{"Answer": "频谱图比较亮的地方就是低频，因为图像的能量一般都是集中在低频部分，频谱中心化以后，就是低频在中间高频在四周了。", "Konwledge_Point": "快速傅里叶变换", "Question": "傅里叶变换关于频谱图横纵坐标的意义的疑问\ndft将时域f（x,y）转化为频域F（u,v），这里的u和v不就代表频率大小嘛。那按道理应该未中心化的频谱图上右下角（u-1,v-1）是最高频信息，可是为什么一直说未中心化的频谱图中心是高频信息而四角是低频信息呢", "Tag": "算法分析"}
{"Answer": "赚个外块真不容易，看了一下午，\n你的问题如下：\n1，乘法错了， 复数的乘法，你写错了；(a + b j) * (c + d j) = ac-bd + (bc + ad) j \n2.  你蝶形运算错了，你在好好对照蝶形图捋一捋，比如，第0级对应的旋转因子都是0，你的0123，第1级是0202，你的0202，第2级0123，你的0000，刚好反了，你的分组和每组的数，有问题，你再好好捋一捋吧\n附上修改后的程序和运行结果：\n \n\nusing System;\n\nnamespace ConsoleApp34\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            const int N = 8;\n            //初始化时域数据\n            Complex[] TD2FD = new Complex[N];\n            for (int i = 0; i < N; i++)\n            {\n                Complex cpx = new Complex();\n                cpx.re = i;\n                cpx.im = 0;\n                TD2FD[i] = cpx;\n            }\n\n            Console.WriteLine(\"------原始信号-----\");\n            Print(TD2FD);\n\n            Console.WriteLine(\"----- FFT -----\");\n            FFT(TD2FD);\n            Print(TD2FD);\n\n            Console.WriteLine(\"----- IFFT -----\");\n            IFFT(TD2FD);\n            Print(TD2FD);\n\n            Console.Read();\n        }\n\n        //快速傅里叶变换\n        public static void FFT(Complex[] TD2FD)\n        {\n            FFT_Core(TD2FD, WT_LUT(TD2FD.Length, 1));\n        }\n\n        //快速傅里叶逆变换\n        public static void IFFT(Complex[] FD2TD)\n        {\n            //做FFT变换\n            Complex[] WT = WT_LUT(FD2TD.Length, -1);\n            FFT_Core(FD2TD, WT);\n            //实部除以N\n            for (int i = 0; i < FD2TD.Length; i++)\n                FD2TD[i].re /= FD2TD.Length;\n        }\n\n        // 返回旋转因子查询表(twiddle factor lookup table)\n        private static Complex[] WT_LUT(int N, int flag = 1)\n        {\n            Complex[] WT = new Complex[N];\n            for (int i = 0; i < N; i++)\n            {\n                Complex cpx_wt = new Complex();\n                float angle = (float)(-i * Math.PI * 2 / N);\n                cpx_wt.re = (float)Math.Cos(angle);\n                //IFFT flag=-1, FFT flag=1\n                cpx_wt.im = flag * (float)Math.Sin(angle);\n                WT[i] = cpx_wt;\n            }\n            return WT;\n        }\n\n        private static void FFT_Core(Complex[] TD2FD, Complex[] WT)\n        {\n            int power = (int)Math.Log(TD2FD.Length, 2);\n            int butterfly;\n            Complex x1, x2, wt;\n            BitReverse(TD2FD);\n\n            //蝶形运算\n            for (int k = 0; k < power; k++) //级数\n            {\n                //Console.WriteLine(\"第{0}级, 共{1}组\", k, 1 << k);\n                for (int j = 0; j < 1 << (power - k - 1); j++) //组数\n                {\n                    butterfly = 1 << k + 1;//每组有几个元素\n                    //计算参与蝶形运算的两个元素的索引\n                    for (int i = 0; i < butterfly / 2; i++) //蝶形运算次数\n                    {\n                        //Console.Write(\"  ({0}x{1} wtIdx={2})\", i + p, i + s, i * (1 << k));\n                        x1 = TD2FD[i + j * butterfly];\n                        x2 = TD2FD[i + butterfly/2 + j * butterfly];\n                        wt = WT[i * TD2FD.Length / butterfly];\n                        TD2FD[i + j * butterfly] = x1 + x2 * wt;\n                        TD2FD[i + butterfly / 2 + j * butterfly] = x1 - x2 * wt;\n                    }\n                    //Console.WriteLine();\n                }\n            }\n        }\n\n        private static int BitReverse(int x)\n        {\n            //倒位排序\n            //0   1   2   3   4   5   6   7   十进制\n            //000 001 010 011 100 101 110 111 十进制对应的二进制\n            //000 100 010 110 001 101 011 111 码位反转\n            //0   4   2   6   1   5   3   7   码位反转后对应的十进制\n            int[] table = new int[8] { 0, 4, 2, 6, 1, 5, 3, 7 };\n            return table[x];\n        }\n\n        // 倒位排序——雷德算法\n        private static void BitReverse(Complex[] array)\n        {\n            int i, j, k;\n            int N = array.Length;\n            Complex temp;\n            j = 0;\n\n            for (i = 0; i < N - 1; i++)\n            {\n                if (i < j)\n                {\n                    temp = array[i];\n                    array[i] = array[j];\n                    array[j] = temp;\n                }\n\n                // 求j的下一个倒序位\n                // N/2的二进制最高位为1，其他位都为0\n                // 判断最高位是否为1，可与N/2进行比较\n                // 判断次高位是否为1，可与N/4进行比较\n                k = N >> 1;\n\n                //如果k<=j,表示j的最高位为1\n                while (k <= j)\n                {\n                    //当k<=j时，需要将最高位变为0\n                    j = j - k;\n                    //判断次高位是否为1,依次类推，逐个比较，直到j某个位为0\n                    k >>= 1;\n                }\n\n                j = j + k;//将0变为1\n            }\n        }\n\n        // 打印\n        private static void Print(Complex[] TD2FD)\n        {\n            for (int i = 0; i < TD2FD.Length; i++)\n            {\n                Console.WriteLine(\"(re={0}, im={1})\", TD2FD[i].re, TD2FD[i].im);\n            }\n            Console.WriteLine();\n        }\n    }\n\n    //定义复数\n    public class Complex\n    {\n        public float re;//实数部\n        public float im;//虚数部\n\n        public static Complex operator +(Complex lhs, Complex rhs)\n        {\n            Complex result = new Complex();\n            result.re = lhs.re + rhs.re;\n            result.im = lhs.im + rhs.im;\n            return result;\n        }\n\n        public static Complex operator -(Complex lhs, Complex rhs)\n        {\n            Complex result = new Complex();\n            result.re = lhs.re - rhs.re;\n            result.im = lhs.im - rhs.im;\n            return result;\n        }\n\n        public static Complex operator *(Complex lhs, Complex rhs)\n        {\n            Complex result = new Complex();\n            result.re = lhs.re * rhs.re - lhs.im * rhs.im;\n            result.im = lhs.re * rhs.im + lhs.im * rhs.re;\n            return result;\n        }\n\n        public static Complex operator *(float lhs, Complex rhs)\n        {\n            Complex result = new Complex();\n            result.re = lhs * rhs.re;\n            result.im = lhs * rhs.im;\n            return result;\n        }\n\n        public static Complex operator *(Complex lhs, float rhs)\n        {\n            Complex result = new Complex();\n            result.re = lhs.re * rhs;\n            result.im = lhs.im * rhs;\n            return result;\n        }\n    }\n}\n\nok，存在可以忽略的误差，很正常，这个没毛病；", "Konwledge_Point": "快速傅里叶变换", "Question": "快速傅里叶逆变换未还原数据\n\n\nusing System;\n\nnamespace ConsoleApp34\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            const int N = 8;\n            //初始化时域数据\n            Complex[] TD2FD = new Complex[N];\n            for (int i = 0; i < N; i++)\n            {\n                Complex cpx = new Complex();\n                cpx.re = i;\n                cpx.im = 0;\n                TD2FD[i] = cpx;\n            }\n\n            Console.WriteLine(\"------原始信号-----\");\n            Print(TD2FD);\n\n            Console.WriteLine(\"----- FFT -----\");\n            FFT(TD2FD);\n            Print(TD2FD);\n\n            Console.WriteLine(\"----- IFFT -----\");\n            IFFT(TD2FD);\n            Print(TD2FD);\n\n            Console.Read();\n        }\n\n        //快速傅里叶变换\n        public static void FFT(Complex[] TD2FD)\n        {\n            FFT_Core(TD2FD, WT_LUT(TD2FD.Length, 1));\n        }\n\n        //快速傅里叶逆变换\n        public static void IFFT(Complex[] FD2TD)\n        {\n            //做FFT变换\n            Complex[] WT = WT_LUT(FD2TD.Length, -1);\n            FFT_Core(FD2TD, WT);\n            //实部除以N\n            for (int i = 0; i < FD2TD.Length; i++)\n                FD2TD[i].re /= FD2TD.Length;\n        }\n\n        // 返回旋转因子查询表(twiddle factor lookup table)\n        private static Complex[] WT_LUT(int N, int flag = 1)\n        {\n            Complex[] WT = new Complex[N];\n            for (int i = 0; i < N; i++)\n            {\n                Complex cpx_wt = new Complex();\n                float angle = (float)(-i * Math.PI * 2 / N);\n                cpx_wt.re = (float)Math.Cos(angle);\n                //IFFT flag=-1, FFT flag=1\n                cpx_wt.im = flag * (float)Math.Sin(angle);\n                WT[i] = cpx_wt;\n            }\n            return WT;\n        }\n\n        private static void FFT_Core(Complex[] TD2FD, Complex[] WT)\n        {\n            int power = (int)Math.Log(TD2FD.Length, 2);\n            int butterfly;\n            int p, s;\n            Complex x1, x2, wt;\n\n            BitReverse(TD2FD);\n\n            //蝶形运算\n            for (int k = 0; k < power; k++) //级数\n            {\n                //Console.WriteLine(\"第{0}级, 共{1}组\", k, 1 << k);\n                for (int j = 0; j < 1 << k; j++) //组数\n                {\n                    butterfly = 1 << (power - k);//每组有几个元素\n                    //计算参与蝶形运算的两个元素的索引\n                    p = j * butterfly;\n                    s = p + butterfly / 2;\n                    //Console.WriteLine(\"butterfly={0}, p={1}, s={2}\", butterfly, p, s);\n                    for (int i = 0; i < butterfly / 2; i++) //蝶形运算次数\n                    {\n                        //Console.Write(\"  ({0}x{1} wtIdx={2})\", i + p, i + s, i * (1 << k));\n                        x1 = TD2FD[i + p];\n                        x2 = TD2FD[i + s];\n                        wt = WT[i * (1 << k)];\n                        TD2FD[i + p] = x1 + x2 * wt;\n                        TD2FD[i + s] = x1 - x2 * wt;\n                    }\n                    //Console.WriteLine();\n                }\n            }\n        }\n\n        private static int BitReverse(int x)\n        {\n            //倒位排序\n            //0   1   2   3   4   5   6   7   十进制\n            //000 001 010 011 100 101 110 111 十进制对应的二进制\n            //000 100 010 110 001 101 011 111 码位反转\n            //0   4   2   6   1   5   3   7   码位反转后对应的十进制\n            int[] table = new int[8] { 0, 4, 2, 6, 1, 5, 3, 7 };\n            return table[x];\n        }\n\n        // 倒位排序——雷德算法\n        private static void BitReverse(Complex[] array)\n        {\n            int i, j, k;\n            int N = array.Length;\n            Complex temp;\n            j = 0;\n\n            for (i = 0; i < N - 1; i++)\n            {\n                if (i < j)\n                {\n                    temp = array[i];\n                    array[i] = array[j];\n                    array[j] = temp;\n                }\n\n                // 求j的下一个倒序位\n                // N/2的二进制最高位为1，其他位都为0\n                // 判断最高位是否为1，可与N/2进行比较\n                // 判断次高位是否为1，可与N/4进行比较\n                k = N >> 1;\n\n                //如果k<=j,表示j的最高位为1\n                while (k <= j)\n                {\n                    //当k<=j时，需要将最高位变为0\n                    j = j - k;\n                    //判断次高位是否为1,依次类推，逐个比较，直到j某个位为0\n                    k >>= 1;\n                }\n\n                j = j + k;//将0变为1\n            }\n        }\n\n        // 打印\n        private static void Print(Complex[] TD2FD)\n        {\n            for (int i = 0; i < TD2FD.Length; i++)\n            {\n                Console.WriteLine(\"(re={0}, im={1})\", TD2FD[i].re, TD2FD[i].im);\n            }\n            Console.WriteLine();\n        }\n    }\n\n    //定义复数\n    public class Complex\n    {\n        public float re;//实数部\n        public float im;//虚数部\n\n        public static Complex operator +(Complex lhs, Complex rhs)\n        {\n            Complex result = new Complex();\n            result.re = lhs.re + rhs.re;\n            result.im = lhs.im + rhs.im;\n            return result;\n        }\n\n        public static Complex operator -(Complex lhs, Complex rhs)\n        {\n            Complex result = new Complex();\n            result.re = lhs.re - rhs.re;\n            result.im = lhs.im - rhs.im;\n            return result;\n        }\n\n        public static Complex operator *(Complex lhs, Complex rhs)\n        {\n            Complex result = new Complex();\n            result.re = lhs.re * rhs.re;\n            result.im = lhs.im * rhs.im;\n            return result;\n        }\n\n        public static Complex operator *(float lhs, Complex rhs)\n        {\n            Complex result = new Complex();\n            result.re = lhs * rhs.re;\n            result.im = lhs * rhs.im;\n            return result;\n        }\n\n        public static Complex operator *(Complex lhs, float rhs)\n        {\n            Complex result = new Complex();\n            result.re = lhs.re * rhs;\n            result.im = lhs.im * rhs;\n            return result;\n        }\n    }\n}\n\n\n\n\n\n\n请问下我写的IFFT，为什么没还原成原始数据呢(re=0,1,2,3,4,5,6,7)？", "Tag": "算法分析"}
{"Answer": "可以参考一下这个\nGitHub - Subtitle-Synchronizer/jlibrosa: Librosa equivalent Java library to process audio file adn extract features from it.\nLibrosa equivalent Java library to process audio file adn extract features from it. - GitHub - Subtitle-Synchronizer/jlibrosa: Librosa equivalent Java library to process audio file adn extract features from it.\n\n\n\nhttps://hub.fastgit.org/Subtitle-Synchronizer/jlibrosa\n\n", "Konwledge_Point": "快速傅里叶变换", "Question": "在Android上如果对音频做快速傅里叶变换\n我想在Android上实现语音识别，现在已经有模型了，但是不知道如何在Android上对音频做预处理，就是快速傅里叶变换。\nPython上可以使用librosa对音频预处理，但是Android没有相关工具。\n希望能提供代码。", "Tag": "算法分析"}
{"Answer": "采样频率时1/dxdx代表你的位置间距", "Konwledge_Point": "快速傅里叶变换", "Question": "对离散信号进行傅里叶变换\n我现在测得了一条直线上的信号，这个信号只表示不同位置的信号值，跟时间无关。一共900个采样点，请问在matlab里作快速傅里叶变换的时候，采样频率是啥？", "Tag": "算法分析"}
{"Answer": "matlab就可以做到呢类似这样画图：\nFs = 1000;            % Sampling frequency\nT = 1/Fs;             % Sampling period\nL = 1500;             % Length of signal\nt = (0:L-1)*T;        % Time vector\nS = 0.7*sin(2*pi*50*t) + sin(2*pi*120*t);\nX = S + 2*randn(size(t));\nY = fft(X);\nP2 = abs(Y/L);\nP1 = P2(1:L/2+1);\nP1(2:end-1) = 2*P1(2:end-1);\nf = Fs*(0:(L/2))/L;\n%% 画图类似这样就行，用plot3画图\nfigure(1);clf\nplot3(f,1*ones(size(f)),P1); hold on;\nplot3(f,2*ones(size(f)),P1);\nplot3(f,3*ones(size(f)),P1);\nset(gca, 'ytick',1:3, 'yticklabel', {'(c)','(b)','(a)'})\nxlabel('f ')\nylabel('不同磨损')\nzlabel('幅值')\nbox on\ngrid on\nview(15,38)\n\n\n", "Konwledge_Point": "快速傅里叶变换", "Question": "将不同信号的快速傅里叶变换图画在一张三维图中进行对比，如下图所示，使用什么软件可以做到？\n\n\n在论文里看到了这张图，将不同信号的快速傅里叶变换图画在一张三维图中进行对比，如上图所示，使用什么软件可以做到？", "Tag": "算法分析"}
{"Answer": "建议添加一个opencv的库，这个库里有很多图像处理函数。像傅里叶变换，这个库里就有接口，可以直接调用。\r\n而特征向量的提取，要看你选择的是什么特征。距离的计算方式也有很多种，一般采用欧氏距离。这个可以表征两个特征向量的相似度", "Konwledge_Point": "快速傅里叶变换", "Question": "vc做基于傅里叶形状描述子的图像检索系统特征向量和距离算法该怎么写啊？\n  对图像进行快速傅里叶变换后得到的关于图片在频域空间的矩阵如何提取用于图像检索的特征向量，以及这些特征向量距离的计算方式。\n", "Tag": "算法分析"}
{"Answer": "fft变换，自己看代码：假设你有时间数组t和信号数组v，如此即可\nfs = floor(1/mean(diff(t)));\nx = v;\nn = 2^floor(log2(length(x)));\nt = t(1:n);\nx = x(1:n);\nL = numel(t);\n%然后对x作傅里叶变换，按照采样频率1000\n%这样的话就会出现200赫兹地方的双冲击\ny = fft(x,n);\nP2 = abs(y/L);\nk = floor(L/2);\nf = (0:k-1)*fs/L;\nplot(f(1:k),P2(1:k))\nxlabel('频率');ylabel('幅值')\n\n一定要注意，采样频率和时间之间的关系", "Konwledge_Point": "快速傅里叶变换", "Question": "关于matlab  FFT问题，时域图很符合预期，但是快速傅里叶变换处理后的频域图失败了\n计算出的数据进行FFT，频域信号不正确。\n\n\n下图是时域图\n\n\n\n\n下图是我得出的频域图\n\n\n\n\n（频域图的横纵坐标代表什么？）\n\n\n代码如下，v是数据。\n\n\nfs\n=\n10000\n;\n\n\nT\n=\n1\n/fs\n;\n\n\nN\n=length(v)\n;\n\n\nn\n=\n0\n:N-\n1\n;\n\n\ny\n=fft(v,N)\n;\n\n\nmag\n=abs(y)\n;\n\n\nf\n=n*fs/N\n;\n\n\na\n=f\n;\n\n\nb\n=mag\n;\n\n\n\n\n\n不知道是代码的问题还是别的\n感谢解答", "Tag": "算法分析"}
{"Answer": "ok,搞定了；\n引发错误的地方在于：傅里叶逆变换，实数部分和虚数部分都需要除N，你只给实数部分除了N，一维数据没有问题是因为，你的一维数据全是实数，逆变换后虚数部分为0，所以不影响；而二维傅里叶变换需要两次逆变换（行和列的逆变换），因此就有了较大影响；\n\npublic static void IFFT(Complex[] FD2TD)\n    {\n        //做FFT变换\n        Complex[] WT = WT_LUT(FD2TD.Length, -1);\n        FFT_Core(FD2TD, WT);\n        //实部除以N\n        for (int i = 0; i < FD2TD.Length; i++)\n        {\n            FD2TD[i].re /= FD2TD.Length;\n            FD2TD[i].im /= FD2TD.Length;\n        }\n    }\n这样改一下就好了，我不太会输出txt，我用控制台输出试了一下，这是逆变换以后的数据：\n\nok,误差在可忽略的范围内；\n \n还有一个规范性的问题，一般矩阵（row,columns）的行是row(Height),列是columns(Width),你刚开始初始化时确实是这么定义的，但后面你就全部反着来了，因为这次输入的是8*8的数据，行列数相等，没有报错，如果下个数据行列数不相等，就有错了，还是规范起来写的好。（这个问题不影响你的这次的结果，但还是改掉的好）", "Konwledge_Point": "快速傅里叶变换", "Question": "我写的二维傅里叶逆变换未还原数据，求帮忙调试下!\n先说下问题：\n\n\n\n我用8x8的数据测试FFT2和IFFT2两个算法，发现数据未还原，求帮忙检查下代码哪写错了？\n\n\n\n(注：如果只对每一行或者每一列做FFT和IFFT，可以还原数据。)\n\n\n\n打印的日志下如\n\n\n\n\n\n\n封装的傅里叶变换类\n\n\n\n\n\nusing System;\n\n/// \n/// 傅里叶变换\n/// \npublic sealed class Fourier\n{\n    //快速傅里叶变换\n    public static void FFT(Complex[] TD2FD)\n    {\n        FFT_Core(TD2FD, WT_LUT(TD2FD.Length, 1));\n    }\n\n    //快速傅里叶变换 (二维)\n    public static void FFT2(Complex2D TD2FD)\n    {\n        //对每一行做FFT\n        for (int i = 0; i < TD2FD.Height; i++)\n        {\n            Complex[] row = TD2FD.GetRow(i);\n            FFT(row);\n            TD2FD.SetRow(i, row);\n        }\n\n        //对每一列做FFT\n        for (int i = 0; i < TD2FD.Width; i++)\n        {\n            Complex[] column = TD2FD.GetColumn(i);\n            FFT(column);\n            TD2FD.SetColumn(i, column);\n        }\n    }\n\n    //快速傅里叶逆变换\n    public static void IFFT(Complex[] FD2TD)\n    {\n        //做FFT变换\n        Complex[] WT = WT_LUT(FD2TD.Length, -1);\n        FFT_Core(FD2TD, WT);\n        //实部除以N\n        for (int i = 0; i < FD2TD.Length; i++)\n            FD2TD[i].re /= FD2TD.Length;\n    }\n\n    //快速傅里叶逆变换 (二维)\n    public static void IFFT2(Complex2D FD2TD)\n    {\n        //对每一行做IFFT\n        for (int i = 0; i < FD2TD.Height; i++)\n        {\n            Complex[] row = FD2TD.GetRow(i);\n            IFFT(row);\n            FD2TD.SetRow(i, row);\n        }\n\n        //对每一列做IFFT\n        for (int i = 0; i < FD2TD.Width; i++)\n        {\n            Complex[] column = FD2TD.GetColumn(i);\n            IFFT(column);\n            FD2TD.SetColumn(i, column);\n        }\n    }\n\n    // 将直流分量移到频谱图的中心\n    public static void FFT2Shift(Complex2D complex2D)\n    {\n        int halfH = complex2D.Height / 2;\n        int halfW = complex2D.Width / 2;\n        //将图像四个象限区域按对角线交换\n        for (int i=0; i halfH + H4 ||\n                    j < halfW - W4 || j > halfW + W4)\n                {\n                    Complex cpx = complex2D.GetComplex(i, j);\n                    cpx.re = 0;\n                    cpx.im = 0;\n                    complex2D.SetComplex(i, j, cpx);\n                }\n            }    \n        }\n    }\n\n    // 返回旋转因子查询表(twiddle factor lookup table)\n    private static Complex[] WT_LUT(int N, int flag = 1)\n    {\n        Complex[] WT = new Complex[N];\n        for (int i = 0; i < N; i++)\n        {\n            Complex cpx_wt = new Complex();\n            float angle = (float)(-i * Math.PI * 2 / N);\n            cpx_wt.re = (float)Math.Cos(angle);\n            //IFFT flag=-1, FFT flag=1\n            cpx_wt.im = flag * (float)Math.Sin(angle);\n            WT[i] = cpx_wt;\n        }\n        return WT;\n    }\n\n    private static void FFT_Core(Complex[] TD2FD, Complex[] WT)\n    {\n        int power = (int)Math.Log(TD2FD.Length, 2);\n        int butterfly;\n        int p, s;\n        Complex x1, x2, wt;\n\n        //倒位排序\n        BitReverse(TD2FD);\n\n        //蝶形运算\n        for (int k = 0; k < power; k++) //级数\n        {\n            for (int j = 0; j < 1 << (power - k - 1); j++) //组数\n            {\n                //每组有几个元素\n                butterfly = 1 << k + 1;\n                //计算参与蝶形运算的两个元素的索引\n                p = j * butterfly;\n                s = p + butterfly / 2;\n                for (int i = 0; i < butterfly / 2; i++) //蝶形运算次数\n                {\n                    x1 = TD2FD[i + p];\n                    x2 = TD2FD[i + s];\n                    wt = WT[i * TD2FD.Length / butterfly];\n                    TD2FD[i + p] = x1 + x2 * wt;\n                    TD2FD[i + s] = x1 - x2 * wt;\n                }\n            }\n        }\n    }\n\n    // 倒位排序——雷德算法\n    private static void BitReverse(Complex[] array)\n    {\n        //倒位排序原理\n        //0   1   2   3   4   5   6   7   十进制\n        //000 001 010 011 100 101 110 111 十进制对应的二进制\n        //000 100 010 110 001 101 011 111 码位反转\n        //0   4   2   6   1   5   3   7   码位反转后对应的十进制\n\n        int i, j, k;\n        int N = array.Length;\n        Complex temp;\n        j = 0;\n\n        for (i = 0; i < N - 1; i++)\n        {\n            if (i < j)\n            {\n                temp = array[i];\n                array[i] = array[j];\n                array[j] = temp;\n            }\n            // 求j的下一个倒序位\n            // N/2的二进制最高位为1，其他位都为0\n            // 判断最高位是否为1，可与N/2进行比较\n            // 判断次高位是否为1，可与N/4进行比较\n            k = N >> 1;\n            //如果k<=j,表示j的最高位为1\n            while (k <= j)\n            {\n                //当k<=j时，需要将最高位变为0\n                j = j - k;\n                //判断次高位是否为1,依次类推，逐个比较，直到j某个位为0\n                k >>= 1;\n            }\n            j = j + k;//将0变为1\n        }\n    }\n\n    // 打印\n    public static void Print(Complex[] TD2FD)\n    {\n        for (int i = 0; i < TD2FD.Length; i++)\n        {\n            Console.WriteLine(TD2FD[i].ToString());\n        }\n        Console.WriteLine();\n    }\n}\n\n//定义复数\npublic class Complex\n{\n    public float re;//实数部\n    public float im;//虚数部\n\n    // 幅值\n    public double Amplitude\n    {\n        get\n        {\n            //测试发现取值范围为\n            //min=0.0009918213, max=412.4615\n            return Math.Sqrt(re * re + im * im);\n        }\n    }\n\n    // 频谱图像素值\n    public double PixelAmplitude\n    {\n        get\n        {\n            //幅值范围很大,需要做以下处理:\n            //1. 将幅值范围调到 [1, ?]\n            //2. 利用Log函数压缩范围\n            //3. 将范围映射到颜色值[0,1]\n            double p = Math.Log(Amplitude * 10000) / 16f;\n            return p;\n        }\n    }\n\n    // 相位\n    public double Phase\n    {\n        get\n        {\n            return Math.Atan2(im, re);\n        }\n    }\n\n    public override string ToString()\n    {\n        return string.Format(\"re={0}, im={1}\", re, im);\n    }\n\n    public static Complex operator +(Complex lhs, Complex rhs)\n    {\n        Complex result = new Complex();\n        result.re = lhs.re + rhs.re;\n        result.im = lhs.im + rhs.im;\n        return result;\n    }\n\n    public static Complex operator -(Complex lhs, Complex rhs)\n    {\n        Complex result = new Complex();\n        result.re = lhs.re - rhs.re;\n        result.im = lhs.im - rhs.im;\n        return result;\n    }\n\n    public static Complex operator *(Complex lhs, Complex rhs)\n    {\n        Complex result = new Complex();\n        result.re = lhs.re * rhs.re - lhs.im * rhs.im;\n        result.im = lhs.re * rhs.im + lhs.im * rhs.re;\n        return result;\n    }\n\n    public static Complex operator *(float lhs, Complex rhs)\n    {\n        Complex result = new Complex();\n        result.re = lhs * rhs.re;\n        result.im = lhs * rhs.im;\n        return result;\n    }\n\n    public static Complex operator *(Complex lhs, float rhs)\n    {\n        Complex result = new Complex();\n        result.re = lhs.re * rhs;\n        result.im = lhs.im * rhs;\n        return result;\n    }\n}\n\npublic class Complex2D\n{\n    private Complex[,] matrix;\n    private int m_width;\n    private int m_height;\n\n    // width:图像宽度 height:图像高度\n    public Complex2D(int width, int height)\n    {\n        m_width = width;\n        m_height = height;\n        matrix = new Complex[width, height];\n    }\n\n    public int Width { get { return m_width; } }\n    public int Height { get { return m_height; } }\n\n    public Complex[] GetRow(int i)\n    {\n        Complex[] row = new Complex[m_width];\n        for (int j = 0; j < m_width; j++)\n            row[j] = matrix[j,i];\n        return row;\n    }\n\n    public void SetRow(int i, Complex[] array)\n    {\n        for (int j = 0; j < m_width; j++)\n            matrix[j, i] = array[j];\n    }\n\n    public Complex[] GetColumn(int i)\n    {\n        Complex[] column = new Complex[m_height];\n        for (int j = 0; j < m_height; j++)\n            column[j] = matrix[i,j];\n        return column;\n    }\n\n    public void SetColumn(int i, Complex[] array)\n    {\n        for (int j = 0; j < m_width; j++)\n            matrix[i, j] = array[j];\n    }\n\n    //i: 第几行  j: 第几列\n    public Complex GetComplex(int i, int j)\n    {\n        return matrix[j,i];\n    }\n\n    //i: 第几行  j: 第几列\n    public void SetComplex(int i, int j, Complex src)\n    {\n        matrix[j, i] = src;\n    }\n\n    // 交换两个元素\n    // i: 第几行  j: 第几列\n    public void SwapComplex(int i0, int j0, int i1, int j1)\n    {\n        Complex tmp = matrix[j0,i0];\n        matrix[j0, i0] = matrix[j1, i1];\n        matrix[j1, i1] = tmp;\n    }\n\n    // 交换行\n    public void SwapRow(int i, int j)\n    {\n        for (int k=0; k<m_width; k++)\n        {\n            Complex cpx0 = matrix[k,i];\n            Complex cpx1 = matrix[k,j];\n            matrix[k,i] = cpx1;\n            matrix[k,j] = cpx0;\n        }\n    }\n\n    // 交换列\n    public void SwapColumn(int i, int j)\n    {\n        for (int k = 0; k < m_height; k++)\n        {\n            Complex cpx0 = matrix[i,k];\n            Complex cpx1 = matrix[j,k];\n            matrix[i,k] = cpx1;\n            matrix[j,k] = cpx0;\n        }\n    }\n\n    public void Print(string fileName)\n    {\n        System.Text.StringBuilder sb = new System.Text.StringBuilder();\n        for (int i = 0; i < m_height; i++)\n        {\n            for (int j = 0; j < m_width; j++)\n                sb.AppendFormat(\"{0:G} \", matrix[j,i].re.ToString().PadRight(5));\n            sb.AppendLine();\n        }\n        System.IO.File.WriteAllText(string.Format(\"D://{0}.txt\", fileName), sb.ToString());\n    }\n}\n\n\n\n\n测试代码\n\n\n\n\n\n//测试\n        Complex2D complex2D = new Complex2D(8, 8);\n        for (int i = 0; i < complex2D.Height; i++)\n        {\n            for (int j = 0; j < complex2D.Width; j++)\n            {\n                Complex cpx = new Complex();\n                cpx.re = i * complex2D.Width + j;\n                cpx.im = 0;\n                complex2D.SetComplex(i, j, cpx);\n            }\n        }\n\n        complex2D.Print(\"8x8\");\n        Fourier.FFT2(complex2D);\n        complex2D.Print(\"fft2\");\n        Fourier.IFFT2(complex2D);\n        complex2D.Print(\"ifft2\");", "Tag": "算法分析"}
{"Answer": "百度搜设置Nuget在线源", "Konwledge_Point": "快速傅里叶变换", "Question": "想要在VS2019中安装math net.Numerisc但是出现如下错误是为什么？\n\n\n\n\n今天发现快速傅里叶变换的逆变换有了错误，所以在搜索资料时发现了mathnet.Nuerics工具包据说可以调用，所以想要下载一下，但是出现了错误。\n请问大噶知道为什么吗？", "Tag": "算法分析"}
{"Answer": "将第二行改为，N1=length(a)。因为函数height在MATLAB中不存在，只有length函数用于获取数组的长度。", "Konwledge_Point": "快速傅里叶变换", "Question": "【matlab】未定义与 'double' 类型的输入参数相对应的函数 'height'\n如题，代码是对结构体数组中的变量进行快速傅里叶变换\n第二行报错：未定义与 'double' 类型的输入参数相对应的函数 'height'。\n\n\na\n=getfield(dec_1D,\n'coefs'\n)\n;\n\n\nN1\n=height(a)\n;\n\n\nFs1\n=\n10\n;\n\n\nT1\n=\n1\n/Fs1\n;\n\n\nt1\n=(\n0\n:\n1\n:N-\n1\n)*T1\n;\n\n\nt1\n=t1\n';\nA1 = fft(a);\n\n", "Tag": "算法分析"}
{"Answer": "先说你程序的错误：\n傅里叶变换和逆变换都没毛病，但你的二维复数矩阵的定义，错了；\n我标出来了，你自己应该能改出来\n\npublic class Complex2D\n{\n    private List<Complex[]> rows = new List<Complex[]>();\n    private List<Complex[]> columns = new List<Complex[]>();\n    private int m_width;\n    private int m_height;\n \n    public Complex2D(int width, int height)\n    {\n        m_width = width;\n        m_height = height;\n        for (int i = 0; i < height; i++)\n            rows.Add(new Complex[width]);   //row[0]~row[height-1]\n        for (int i = 0; i < width; i++)\n            columns.Add(new Complex[height]);//columns[0]~columns[height-1]\n    }                                        //你这里相当于定义了两个矩阵，一个是行向量组成，一个列向量组成；按你的思路，你后面的应该始终保持这两个矩阵相等才对；\n \n    public int Width { get { return m_width; } }\n    public int Height { get { return m_height; } }\n \n    public Complex[] GetRow(int i)\n    {\n        return rows[i];\n    }\n \n    public Complex[] GetColumn(int i)\n    {\n        return columns[i];\n    }\n \n    public void SetRow(int i, Complex[] src)\n    {\n        rows[i] = src;  //你只行向量？？你如果改了第一行的值，那每一列的第一个值也就跟着变了，你没改，你如果此时读第一列的值，你会发现row[i][j],columns[j][i],不一样\n    }\n \n    public void SetColumn(int i, Complex[] src)\n    {\n        columns[i] = src;  //和上面同理\n    }\n \n    //i: 第几行  j: 第几列\n    public Complex GetComplex(int i, int j)\n    {\n        return rows[i][j];  //你的更改行和列有问题，columns[j][i]和row[i][j]不一样了\n    }\n \n    //i: 第几行  j: 第几列\n    public void SetComplex(int i, int j, Complex src)\n    {\n        rows[i][j] = src;   //额。。。。你这里行和列改了，说明你注意到了，然而前面却不改。。\n        columns[j][i] = src;\n    }\n \n    public void SetComplexs(Complex[][] src)\n    {\n        for (int i = 0; i < src.Length; i++)\n        {\n            Complex[] row = src[i];      //这里你又是只改变了row的值，不改columns\n            for (int j = 0; j < row.Length; j++)\n                SetComplex(i, j, row[j]);\n        }\n    }\n \n    public void Print()\n    {\n        for (int i = 0; i < rows.Count; i++)\n        {\n            Complex[] row = rows[i];\n            for (int j = 0; j < row.Length; j++)\n                Console.Write(\"{0:G} \", row[j].re.ToString().PadRight(5));\n            Console.WriteLine();\n        }\n        Console.WriteLine();\n    }\n}\n \n \n1.你的傅里叶变换没问题；我看了几遍，确实找不出有啥问题；\n2.是幅度（模），还要考虑复数部；\n3.应该不对，我记得中心化应该是把矩阵分成四块，重新排序，你写的shift没看懂什么意思，不过就算不考虑中心化，你的图也不对；\n下面四张图分别是，中心化后的实部，虚部，幅度，和未中心化的幅度谱\n\nC#我不太懂，我用python写的，求幅度（模），然后中心化，在取对数：\nfreq = 20*np.log10(0.01 + np.abs(fp.fftshift(freq1)))；\n看你的情况，应该把二维复数那一块改一改应该就好了\n ", "Konwledge_Point": "快速傅里叶变换", "Question": "请教下关于FFT算法生成频谱图的问题\n我理解的大体思路是：\n\n\n\n1、将图像的灰度值作为输入数据代入FFT算法，生成结果A\n\n\n\n2、直接用A的实部值作为像素值生成频谱图\n\n\n\n但是我发现生成的频谱图布局不对。\n\n\n\n用幅度值作为像素值生成的频谱图\n\n\n\n\n\n\n\n\n\n现在我有3个疑问：\n\n\n\n1、将图像灰度值数据代入FFT，再直接IFFT，得到一张正确的灰度图像，是否说明写的FFT和IFFT算法没问题？\n\n\n\n2、频谱图的像素值是由FFT结果数据的实部值生成吗？\n\n\n\n3、代码中的中心化方法FFT2Shift()是我这样写的吗（不确定对公式是否理解正确）？\n\n\n\n \n\n\n\n在线对图像做傅里叶变换 \nhttps://sci2fig.herokuapp.com/fourier\n\n\n\n\n\n\n \n\n\n\n下面给出我封装的傅里叶变换类\n\n\n\n\n\nusing System;\n\n/// \n/// 傅里叶变换\n/// \npublic sealed class Fourier\n{\n    //快速傅里叶变换\n    public static void FFT(Complex[] TD2FD)\n    {\n        FFT_Core(TD2FD, WT_LUT(TD2FD.Length, 1));\n    }\n\n    //快速傅里叶变换 (二维)\n    public static void FFT2(Complex2D TD2FD)\n    {\n        //对每一行做FFT\n        for (int i = 0; i < TD2FD.Height; i++)\n        {\n            Complex[] row = TD2FD.GetRow(i);\n            FFT(row);\n            TD2FD.SetRow(i, row);\n        }\n\n        //对每一列做FFT\n        for (int i = 0; i < TD2FD.Width; i++)\n        {\n            Complex[] column = TD2FD.GetColumn(i);\n            FFT(column);\n            TD2FD.SetColumn(i, column);\n        }\n    }\n\n    //快速傅里叶逆变换\n    public static void IFFT(Complex[] FD2TD)\n    {\n        //做FFT变换\n        Complex[] WT = WT_LUT(FD2TD.Length, -1);\n        FFT_Core(FD2TD, WT);\n        //实部除以N\n        for (int i = 0; i < FD2TD.Length; i++)\n            FD2TD[i].re /= FD2TD.Length;\n    }\n\n    //快速傅里叶逆变换 (二维)\n    public static void IFFT2(Complex2D FD2TD)\n    {\n        //对每一行做IFFT\n        for (int i = 0; i < FD2TD.Height; i++)\n        {\n            Complex[] row = FD2TD.GetRow(i);\n            IFFT(row);\n            FD2TD.SetRow(i, row);\n        }\n\n        //对每一列做IFFT\n        for (int i = 0; i < FD2TD.Width; i++)\n        {\n            Complex[] column = FD2TD.GetColumn(i);\n            IFFT(column);\n            FD2TD.SetColumn(i, column);\n        }\n    }\n\n    // 将直流分量移到频谱图的中心\n    public static void FFT2Shift(Complex2D complex2D)\n    {\n        int halfH = complex2D.Height / 2;\n        int halfW = complex2D.Width / 2;\n        //将图像四个象限区域按对角线交换\n        for (int i=0; i halfH + H4 ||\n                    j < halfW - W4 || j > halfW + W4)\n                {\n                    Complex cpx = complex2D.GetComplex(i, j);\n                    cpx.re = 0;\n                    cpx.im = 0;\n                    complex2D.SetComplex(i, j, cpx);\n                }\n            }    \n        }\n    }\n\n    // 返回旋转因子查询表(twiddle factor lookup table)\n    private static Complex[] WT_LUT(int N, int flag = 1)\n    {\n        Complex[] WT = new Complex[N];\n        for (int i = 0; i < N; i++)\n        {\n            Complex cpx_wt = new Complex();\n            float angle = (float)(-i * Math.PI * 2 / N);\n            cpx_wt.re = (float)Math.Cos(angle);\n            //IFFT flag=-1, FFT flag=1\n            cpx_wt.im = flag * (float)Math.Sin(angle);\n            WT[i] = cpx_wt;\n        }\n        return WT;\n    }\n\n    private static void FFT_Core(Complex[] TD2FD, Complex[] WT)\n    {\n        int power = (int)Math.Log(TD2FD.Length, 2);\n        int butterfly;\n        int p, s;\n        Complex x1, x2, wt;\n\n        //倒位排序\n        BitReverse(TD2FD);\n\n        //蝶形运算\n        for (int k = 0; k < power; k++) //级数\n        {\n            for (int j = 0; j < 1 << (power - k - 1); j++) //组数\n            {\n                //每组有几个元素\n                butterfly = 1 << k + 1;\n                //计算参与蝶形运算的两个元素的索引\n                p = j * butterfly;\n                s = p + butterfly / 2;\n                for (int i = 0; i < butterfly / 2; i++) //蝶形运算次数\n                {\n                    x1 = TD2FD[i + p];\n                    x2 = TD2FD[i + s];\n                    wt = WT[i * TD2FD.Length / butterfly];\n                    TD2FD[i + p] = x1 + x2 * wt;\n                    TD2FD[i + s] = x1 - x2 * wt;\n                }\n            }\n        }\n    }\n\n    // 倒位排序——雷德算法\n    private static void BitReverse(Complex[] array)\n    {\n        //倒位排序原理\n        //0   1   2   3   4   5   6   7   十进制\n        //000 001 010 011 100 101 110 111 十进制对应的二进制\n        //000 100 010 110 001 101 011 111 码位反转\n        //0   4   2   6   1   5   3   7   码位反转后对应的十进制\n\n        int i, j, k;\n        int N = array.Length;\n        Complex temp;\n        j = 0;\n\n        for (i = 0; i < N - 1; i++)\n        {\n            if (i < j)\n            {\n                temp = array[i];\n                array[i] = array[j];\n                array[j] = temp;\n            }\n            // 求j的下一个倒序位\n            // N/2的二进制最高位为1，其他位都为0\n            // 判断最高位是否为1，可与N/2进行比较\n            // 判断次高位是否为1，可与N/4进行比较\n            k = N >> 1;\n            //如果k<=j,表示j的最高位为1\n            while (k <= j)\n            {\n                //当k<=j时，需要将最高位变为0\n                j = j - k;\n                //判断次高位是否为1,依次类推，逐个比较，直到j某个位为0\n                k >>= 1;\n            }\n            j = j + k;//将0变为1\n        }\n    }\n\n    // 打印\n    public static void Print(Complex[] TD2FD)\n    {\n        for (int i = 0; i < TD2FD.Length; i++)\n        {\n            Console.WriteLine(TD2FD[i].ToString());\n        }\n        Console.WriteLine();\n    }\n}\n\n//定义复数\npublic class Complex\n{\n    public float re;//实数部\n    public float im;//虚数部\n\n    // 幅值\n    public double Amplitude\n    {\n        get\n        {\n            //测试发现取值范围为\n            //min=0.0009918213, max=412.4615\n            return Math.Sqrt(re * re + im * im);\n        }\n    }\n\n    // 频谱图像素值\n    public double PixelAmplitude\n    {\n        get\n        {\n            //幅值范围很大,需要做以下处理:\n            //1. 将幅值范围调到 [1, ?]\n            //2. 利用Log函数压缩范围\n            //3. 将范围映射到颜色值[0,1]\n            double p = Math.Log(Amplitude * 10000) / 16f;\n            return p;\n        }\n    }\n\n    // 相位\n    public double Phase\n    {\n        get\n        {\n            return Math.Atan2(im, re);\n        }\n    }\n\n    public override string ToString()\n    {\n        return string.Format(\"re={0}, im={1}\", re, im);\n    }\n\n    public static Complex operator +(Complex lhs, Complex rhs)\n    {\n        Complex result = new Complex();\n        result.re = lhs.re + rhs.re;\n        result.im = lhs.im + rhs.im;\n        return result;\n    }\n\n    public static Complex operator -(Complex lhs, Complex rhs)\n    {\n        Complex result = new Complex();\n        result.re = lhs.re - rhs.re;\n        result.im = lhs.im - rhs.im;\n        return result;\n    }\n\n    public static Complex operator *(Complex lhs, Complex rhs)\n    {\n        Complex result = new Complex();\n        result.re = lhs.re * rhs.re - lhs.im * rhs.im;\n        result.im = lhs.re * rhs.im + lhs.im * rhs.re;\n        return result;\n    }\n\n    public static Complex operator *(float lhs, Complex rhs)\n    {\n        Complex result = new Complex();\n        result.re = lhs * rhs.re;\n        result.im = lhs * rhs.im;\n        return result;\n    }\n\n    public static Complex operator *(Complex lhs, float rhs)\n    {\n        Complex result = new Complex();\n        result.re = lhs.re * rhs;\n        result.im = lhs.im * rhs;\n        return result;\n    }\n}\n\npublic class Complex2D\n{\n    private Complex[,] matrix;\n    private int m_width;\n    private int m_height;\n\n    // width:图像宽度 height:图像高度\n    public Complex2D(int width, int height)\n    {\n        m_width = width;\n        m_height = height;\n        matrix = new Complex[width, height];\n    }\n\n    public int Width { get { return m_width; } }\n    public int Height { get { return m_height; } }\n\n    public Complex[] GetRow(int i)\n    {\n        Complex[] row = new Complex[m_width];\n        for (int j = 0; j < m_width; j++)\n            row[j] = matrix[j,i];\n        return row;\n    }\n\n    public void SetRow(int i, Complex[] array)\n    {\n        for (int j = 0; j < m_width; j++)\n            matrix[j, i] = array[j];\n    }\n\n    public Complex[] GetColumn(int i)\n    {\n        Complex[] column = new Complex[m_height];\n        for (int j = 0; j < m_height; j++)\n            column[j] = matrix[i,j];\n        return column;\n    }\n\n    public void SetColumn(int i, Complex[] array)\n    {\n        for (int j = 0; j < m_width; j++)\n            matrix[i, j] = array[j];\n    }\n\n    //i: 第几行  j: 第几列\n    public Complex GetComplex(int i, int j)\n    {\n        return matrix[j,i];\n    }\n\n    //i: 第几行  j: 第几列\n    public void SetComplex(int i, int j, Complex src)\n    {\n        matrix[j, i] = src;\n    }\n\n    // 交换两个元素\n    // i: 第几行  j: 第几列\n    public void SwapComplex(int i0, int j0, int i1, int j1)\n    {\n        Complex tmp = matrix[j0,i0];\n        matrix[j0, i0] = matrix[j1, i1];\n        matrix[j1, i1] = tmp;\n    }\n\n    // 交换行\n    public void SwapRow(int i, int j)\n    {\n        for (int k=0; k max)\n                    max = p;\n            }\n        }\n        tex.Apply();\n        return tex;\n    }\n\n    public static Complex2D ToComplex2D(Texture2D tex)\n    {\n        Complex2D complex2D = new Complex2D(tex.width, tex.height);\n\n        for (int y = 0; y < tex.height; y++)\n        {\n            for (int x = 0; x < tex.width; x++)\n            {\n                Color c = tex.GetPixel(x, y);\n                Complex cpx = new Complex();\n                cpx.re = c.r * 0.3f + c.g * 0.59f + c.b * 0.11f; //灰度值\n                cpx.im = 0;\n                complex2D.SetComplex(y, x, cpx);\n            }\n        }\n\n        return complex2D;\n    }\n}\n\n\n\n\nFFT->IFFT测试代码\n\n\n\n\n\nusing UnityEngine;\nusing UnityEngine.UI;\n/// \n/// 测试FFT->IFFT算法\n/// \npublic class FFT_IFFT_Test : MonoBehaviour\n{\n    public RawImage rawImage;\n\n    private void Start()\n    {\n        Texture2D tex = rawImage.texture as Texture2D;\n        Complex2D complex2D = FourierHelper.ToComplex2D(tex);\n\n        Fourier.FFT2(complex2D);\n        Fourier.IFFT2(complex2D);\n\n        Texture2D ifft_tex = FourierHelper.ToTexture2D(complex2D);\n        rawImage.texture = ifft_tex;\n    }\n}\n\n\n\n\n频谱图生成代码\n\n\n\n\n\nusing UnityEngine;\nusing UnityEngine.UI;\n/// \n/// 显示频谱图\n/// \npublic class SpectrumTexture : MonoBehaviour\n{\n    public RawImage rawImage;\n\n    private void Start()\n    {\n        Texture2D tex = rawImage.texture as Texture2D;\n        Complex2D complex2D = FourierHelper.ToComplex2D(tex);\n\n        Fourier.FFT2(complex2D);\n\n        Texture2D sp_tex = FourierHelper.ToTexture2D(complex2D);\n        rawImage.texture = sp_tex;\n    }\n}\n\n\n\n\n如有需要也可下载我的测试工程(Unity)\n\n\n\n链接：https://pan.baidu.com/s/1B62muufCP-tWQklPT5H49Q \n\n提取码：z6ku \n\n\n\n \n\n\n\n补充：IFFT2未还原数据\n\n\n\n@ 皮皮宽\n\n\n", "Tag": "算法分析"}
