{"Answer": "String str = \"D:\\123.jsp\";\r\n使用正则时\"\\\"会转义1，建议\r\n  1.先把“\\”替换成\"/\",然后str.split(\"/\");\r\n  2.或者添加一个\"\\\",然后str.split(\"\\\\\\\\\");", "Konwledge_Point": "图的分解", "Question": ["字符串分解问题", ["现在我的问题是做一个图上传的功能点,但是取得文件路径的时候我想对路径进行解析,问题出在这,比如说:文件路径是D:\\123.jsp;我想取到123.jsp,我用的split(\"\\\");去分解,但是不行,我想问一下大家,为什么不行,怎么去分解他.", "\n还行有哪位高手做过图片上传,把你的代码贴出来分享一下,谢谢了", "\n[b]问题补充：[/b]", "\nredish这位哥们,你运行了吗,这样肯定是不行的", "\nString str=\"D:/123.jsp\";", "\nstr.split(\"/\");  ", "\n\n", "[b]问题补充：[/b]", "\n我是取的文件夹的路径,我打出之后是[b][size=large][color=red]D:\\123.jsp[/color][/size][/b],而不是D:/123.jsp", "\n所以大家再帮我看看", "\nString str=\"D:\\123.jsp\";", "\nstr.split(\"\\\"); ", "\n[b]问题补充：[/b]", "\n哥们儿们,你们那些还是不行,String str=request.getParameter(\"name\");而request.getParameter(\"name\")的值是[size=medium][color=red]D:\\123.jsp[/color][/size],我试过了,用jltest这位老兄的还是不行.希望大家继续指教 ", "\n[b]问题补充：[/b]", "\ncprogrammer 这个哥们的也不行,String a = \"D:\\123.jsp\";", "\nString[] b = a.split(\"\\\");     你就住eclipse里面粘贴一下就会有错误", "\n[b]问题补充：[/b]", "\ngeniuslph老兄,能不能给一个例子,我一做就出错"]], "Tag": "算法设计"}
{"Answer": "一般都是新开一页，然后用换页参考来连接，Visio里面有个“换页参考”的图标Off-page reference，专门用来连接多页流程图的，可以试用一下", "Konwledge_Point": "图的分解", "Question": ["Visio 画流程图，一页画不完了，该怎么处理得更好？", ["一个模块。流程相对较多，这样竖着画下来，画到底部了，但还没有画完，此时该怎么做？是新建一页，还是画右边，中间出现的断层该怎么处理？页和页之间用什么符号链接起来？希望大家能解答一下，或者给我一些参考资料"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/374029819566195.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a,b,c,d,e;           \n\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;please input a number&amp;#34;&lt;/span&gt;);    \n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a);                 \n    b&amp;#61;a/&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;;   \n    c&amp;#61;(a-b*&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;)/&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;\n    d&amp;#61;(a-b*&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;-c*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;)/&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    e&amp;#61;(a-b*&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;-c*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;-d*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)%10;\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#61;%d&amp;#43;%d&amp;#43;%d&amp;#43;%d&amp;#34;&lt;/span&gt;,a,b*&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;,c*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;,d*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,e);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "图的分解", "Question": ["如图，咋解各位，大数分解问题", ["要求是给定一个四位整数，对该数进行分解。", " 如:输入:6321", " 输出:6321=6000+300+20+1;", " 输入:6000", " 输出:", " 6000=6000+0+0+0"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;已解决&amp;#xff0c;看源码一下就知道了.......&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["EMD分解 IMF图字体大小", ["使用python PYEMD模块生成的分量图字体太小", "\n", "运行结果及报错内容", "\n", "\n", "我看它作图是基于plt来的，但是不知道怎么调字体"]], "Tag": "算法设计"}
{"Answer": "仔细看了下，好像没有错误。。。。 。", "Konwledge_Point": "图的分解", "Question": ["这分解因式的代码有没有错误的地方？", ["这分解因式的代码有不对的吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff1a;这个问题涉及到图的分割问题&amp;#xff0c;一般可以使用基于贪心算法的启发式方法来求解。具体来讲&amp;#xff0c;可以首先随机选择k个起始节点&amp;#xff0c;然后把其余节点分配给这k个起始节点进行划分&amp;#xff0c;不断迭代优化&amp;#xff0c;直到满足要求为止。具体算法的时间复杂度是O(kn2)&amp;#xff0c;其中n是节点数。同时&amp;#xff0c;还可以使用图论中的最小割算法来解决该问题&amp;#xff0c;但由于最小割算法涉及计算复杂度较大&amp;#xff0c;不太适合应用于大型的图分割问题。&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["关于图论中分解图的方法", ["对于一个连通图，有没有什么方法能将图分割成k个连通子图？并且这些子图的节点数量尽量满足在一个差值范围内。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答通过自己思路及引用到GPTᴼᴾᴱᴺᴬᴵ搜索,得到内容具体如下&amp;#xff1a;&lt;br /&gt;根据您提供的截图&amp;#xff0c;您应该是想要使用 Matlab 中的 EMD&amp;#xff08;经验模态分解&amp;#xff09;算法来分解实际测得的震动数据&amp;#xff0c;并绘制分解后的图像。&lt;/p&gt;\n&lt;p&gt;下面是一些关于如何使用 EMD 算法分解数据的基本步骤&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1、 准备数据&lt;/p&gt;\n&lt;p&gt;首先&amp;#xff0c;您需要将测得的震动数据保存在一个文本文件或 Matlab 中的变量中&amp;#xff0c;以便后续分析。假设您将数据保存在一个名为 &lt;code class=\"language-javascript\"&gt;vibration_data.txt&lt;/code&gt; 的文本文件中&amp;#xff0c;每一行代表一个数据点&amp;#xff0c;数据点之间用空格或逗号分隔。&lt;/p&gt;\n&lt;p&gt;2、 加载数据&lt;/p&gt;\n&lt;p&gt;使用 Matlab 的 &lt;code class=\"language-javascript\"&gt;load&lt;/code&gt; 函数或 &lt;code class=\"language-javascript\"&gt;importdata&lt;/code&gt; 函数来导入数据文件&amp;#xff0c;并将数据保存在一个 Matlab 数组中。例如&amp;#xff0c;可以使用以下代码将数据加载到名为 &lt;code class=\"language-javascript\"&gt;data&lt;/code&gt; 的数组中&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-matlab\"&gt;&lt;span class=\"hljs-attr\"&gt;data&lt;/span&gt; &amp;#61; importdata(&lt;span class=\"hljs-string\"&gt;&amp;#39;vibration_data.txt&amp;#39;&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;3、 运行 EMD 算法&lt;/p&gt;\n&lt;p&gt;接下来&amp;#xff0c;您可以使用 EMD 算法对数据进行分解。在您提供的截图中&amp;#xff0c;似乎是使用了一个叫做 &lt;code class=\"language-javascript\"&gt;emd&lt;/code&gt; 的函数来进行分解。根据您提供的代码和截图&amp;#xff0c;我猜测这个 &lt;code class=\"language-javascript\"&gt;emd&lt;/code&gt; 函数应该是一个 Matlab 函数文件&amp;#xff0c;包含了 EMD 算法的实现。&lt;/p&gt;\n&lt;p&gt;要使用该函数进行分解&amp;#xff0c;您需要将数据作为输入参数传递给该函数&amp;#xff0c;例如&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-matlab\"&gt;&lt;span class=\"hljs-attribute\"&gt;IMFs&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; emd(data)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;该代码将返回一个名为 &lt;code class=\"language-javascript\"&gt;IMFs&lt;/code&gt; 的 Matlab 数组&amp;#xff0c;其中包含了分解后的信号成分。该数组的每一行代表一个瞬态分量&amp;#xff08;Intrinsic Mode Function&amp;#xff0c;IMF&amp;#xff09;。第一行是最高频率的 IMFs&amp;#xff0c;最后一行是最低频率的 IMFs。&lt;/p&gt;\n&lt;p&gt;4、 绘制分解后的图像&lt;/p&gt;\n&lt;p&gt;最后&amp;#xff0c;您可以使用 Matlab 的绘图函数&amp;#xff08;例如 &lt;code class=\"language-javascript\"&gt;plot&lt;/code&gt;、&lt;code class=\"language-javascript\"&gt;subplot&lt;/code&gt;、&lt;code class=\"language-javascript\"&gt;imagesc&lt;/code&gt; 等&amp;#xff09;来绘制分解后的信号成分。例如&amp;#xff0c;以下代码将绘制第 1、3、5 行 IMFs 的图像&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-matlab\"&gt;&lt;span class=\"hljs-attribute\"&gt;subplot&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;plot&lt;/span&gt;(IMFs(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,:));\n&lt;span class=\"hljs-attribute\"&gt;subplot&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;plot&lt;/span&gt;(IMFs(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,:));\n&lt;span class=\"hljs-attribute\"&gt;subplot&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;plot&lt;/span&gt;(IMFs(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,:));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;您可以根据需要调整这些代码来绘制您感兴趣的 IMFs 图像。&lt;/p&gt;\n&lt;p&gt;需要注意的是&amp;#xff0c;EMD 算法是一种迭代算法&amp;#xff0c;其结果可能会因为初始条件和参数的不同而有所不同。因此&amp;#xff0c;您可能需要根据具体情况来调整算法的参数和初始条件&amp;#xff0c;以获得最优的分解结果。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;如果以上回答对您有所帮助&amp;#xff0c;点击一下采纳该答案&amp;#xff5e;谢谢&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["论文里关于matlab emd分解的代码，需要个朋友指导一下怎么带入数据最后输出分解图", ["\n", "\n", "\n", "不太了解每个.m文件分别如何运行，每一个参数怎么替换进去，想用这个代码处理实际测得的震动数据。"]], "Tag": "算法设计"}
{"Answer": "分离固定数据及周期采集数据\r\n1）仪器信息表（字典表）：存放仪器的基本信息，设备ID作为主键\r\n2）数据采集表：设备ID、采集时间、状况参数\r\n数据采集比较密集的话，建议考虑按采集时间创建子表（表名称上加上月份等标记）", "Konwledge_Point": "图的分解", "Question": ["MSSQL数据表如何分解合理", ["用的是MSSql。 ", "\n\n", "一张数据表是这样的，仪器有几十万台，间隔一段时间采集一次数据，该怎么建表合理"]], "Tag": "算法设计"}
{"Answer": "```\r\n[output,res]=emd(x);\r\nemd(x,'Interpolation','pchip');          % 此时输出左图\r\n```\r\n你的这句重复啦，明显的BUG！，emd默认‘Interpolation’是‘spline’，你显示的图示‘spline’的而不是‘pchip’，而存取的变量是‘pchip’的结果！\r\nemd函数前没有output arguments 时输出图片，若有输出变量则不会显示图片。", "Konwledge_Point": "图的分解", "Question": ["MATLAB EMD分解结果和显示有差别", ["为什么emd函数输出的结果和运行emd时显示的经验模态图不一样？左图是运行时显示的图，显示了原信号和5个经验模态图以及余项。右图是根据输出数据画的图，可以明显看出IMF3和原图不一样，请问这是为什么？", "\n代码如下：", "\n\n", "clc;clear\nx=load('sumsin');\nx=x.sumsin;\nt=1:length(x);\n[output,res]=emd(x);\nemd(x,'Interpolation','pchip');          % 此时输出左图\n\nfigure\nsubplot(711)\nplot(t,x)\nset(gca,'xticklabel','');\nfor i=1:6\n    subplot(7,1,i+1)\n    plot(t,imf(:,i))\n    if i<6;set(gca,'xticklabel','');end\nend                                     % 此时输出右图\n", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; glob\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; os\n&lt;span class=\"hljs-meta\"&gt;# 获取当前路径&lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;cwd&lt;/span&gt; &amp;#61; os.getcwd()\n \n&lt;span class=\"hljs-meta\"&gt;# 要拼接的文件夹及其完整路径&amp;#xff0c;注不要包含中文&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;## 待读取批量csv的文件夹 &lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;read_path&lt;/span&gt; &amp;#61;  &amp;#39;data_Q1_2018&amp;#39; \n&lt;span class=\"hljs-meta\"&gt;## 待保存的合并后的csv的文件夹           &lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;save_path&lt;/span&gt; &amp;#61;  &amp;#39;data_Q1_2018_merge&amp;#39;  \n&lt;span class=\"hljs-meta\"&gt;## 待保存的合并后的csv       &lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;save_name&lt;/span&gt; &amp;#61; &amp;#39;&lt;span class=\"hljs-type\"&gt;Modified&lt;/span&gt;.csv&amp;#39;   \n&lt;span class=\"hljs-meta\"&gt;# 修改当前工作目录&lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;os&lt;/span&gt;.chdir(read_path)\n \n&lt;span class=\"hljs-meta\"&gt;# 将该文件夹下的所有文件名存入列表&lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;csv_name_list&lt;/span&gt; &amp;#61; glob.glob(&amp;#39;*csv&amp;#39;)\n \n&lt;span class=\"hljs-meta\"&gt;# 读取第一个CSV文件并包含表头&amp;#xff0c;用于后续的csv文件拼接&lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;df&lt;/span&gt; &amp;#61; pd.read_csv(csv_name_list[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])\n&lt;span class=\"hljs-title\"&gt;tableName&lt;/span&gt; &amp;#61; os.path.splitext(csv_name_list[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n&lt;span class=\"hljs-title\"&gt;df&lt;/span&gt;[tableName] &amp;#61; df[df.columns[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]] / df.iloc[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n&lt;span class=\"hljs-title\"&gt;tableList&lt;/span&gt; &amp;#61; []\n&lt;span class=\"hljs-title\"&gt;tableList&lt;/span&gt;.append(tableName)\n&lt;span class=\"hljs-meta\"&gt;# # 循环遍历列表中各个CSV文件名&amp;#xff0c;并完成文件拼接&lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,len(csv_name_list)):\n    &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt; &amp;#61; pd.read_csv( &lt;span class=\"hljs-title\"&gt;csv_name_list&lt;/span&gt;[&lt;span class=\"hljs-title\"&gt;i&lt;/span&gt;] )&lt;/span&gt;\n    tableName2 &amp;#61; os.path.splitext(csv_name_list[i])[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n    tableList.append(tableName2)\n    &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;[tableName2] &amp;#61; &lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;[&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;.columns[1]] / &lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;.iloc[0,0]&lt;/span&gt;\n    df &amp;#61; pd.concat([df,&lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;],axis&amp;#61;1)&lt;/span&gt;\n    finalData &amp;#61; df[tableList]\n&lt;span class=\"hljs-title\"&gt;finalData&lt;/span&gt;.to_csv(cwd &amp;#43; &amp;#39;\\\\&amp;#39; &amp;#43; save_path &amp;#43; &amp;#39;\\\\&amp;#39; &amp;#43; save_name ,encoding&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;utf_8&amp;#34;&lt;/span&gt;,index&amp;#61;&lt;span class=\"hljs-type\"&gt;False&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/095391889246144.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["用python读取多个csv表指定数据写入一个表中", ["我想用python 合并一组表格，麻烦给写可直接用的代码", "\n", "目录D:/001  文件下有多个cvs表（表1到表?），", "把第二列（B2到B?，数量不固定）除以固定值A2，", "得到新的列合并输出在all.csv中，放同目录下", "第一行输出表格文件名，原表第一行数据不需要，", "如图分表第3列是需要的生成的数据合并到总表", "\n", "\n", "下面是一组参考代码，用来改改可能快一点", "\n", "import pandas as pd\nimport os\n", "# 获取当前路径", "\ncwd = os.getcwd()\n\n", "# 要拼接的文件夹及其完整路径，注不要包含中文", "\n", "# 待读取批量csv的文件夹 ", "\nread_path =  ", "'data_Q1_2018'", " \n", "# 待保存的合并后的csv的文件夹           ", "\nsave_path =  ", "'data_Q1_2018_merge'", "  \n", "# 待保存的合并后的csv       ", "\nsave_name = ", "'Modified.csv'", "   \n", "# 修改当前工作目录", "\nos.chdir(read_path)\n\n", "# 将该文件夹下的所有文件名存入列表", "\ncsv_name_list = os.listdir()\n\n", "# 读取第一个CSV文件并包含表头，用于后续的csv文件拼接", "\ndf = pd.read_csv( csv_name_list[0]) \n\n", "# 读取第一个CSV文件并保存", "\ndf.to_csv( cwd + ", "'\\\\'", " + save_path + ", "'\\\\'", " + save_name , ", "encoding", "=", "\"utf_8\"", ",index=False)\n", "# 循环遍历列表中各个CSV文件名，并完成文件拼接", "\n", "for", " i ", "in", " range(1,18):\n    df = pd.read_csv( csv_name_list[i] )\n    df.to_csv(cwd + ", "'\\\\'", " + save_path + ", "'\\\\'", " + save_name ,", "encoding", "=", "\"utf_8\"", ",index=False, ", "header", "=", "False", ", ", "mode", "=", "'a+'", ")\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The usual approach would be to send only a few emails at once and mark the sent ones on the background(via database flag sent=1 for example)&lt;/p&gt;\n\n&lt;p&gt;Then call the script every few minutes via a cronjob&lt;/p&gt;\n\n&lt;p&gt;This way you dont run into problems with php timeouts when sending emails to a lot of subscribers&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "图的分解", "Question": ["通过延迟将循环过程分解成部分，需要建议", ["\n\n", "i wanted to break down a process (loop) into some parts, for example if have 128 emails to send :", "\n\n", "function subs_emails(){    \n    $subscribers = //find subscribers\n\n    if(!empty($subscribers )){\n        foreach($subscribers as $i => $subscriber){\n            sendEmail($subscriber->id);\n            if($i % 15 == 0){ //<-- send email per 15\n                sleep(60); //to pause the process for 60 seconds \n            }\n        }\n        return true;\n    }else{\n        return false;\n    }\n}\n", "\n\n", "will this works ?? or is there any other \"better approach\" solution ?? need advice please", "\n\n", "thanks", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;我是有问必答小助手&amp;#xff0c;非常抱歉&amp;#xff0c;本次您提出的有问必答问题&amp;#xff0c;技术专家团超时未为您做出解答&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;本次提问扣除的有问必答次数&amp;#xff0c;将会以问答VIP体验卡&amp;#xff08;1次有问必答机会、商城购买实体图书享受95折优惠&amp;#xff09;的形式为您补发到账户。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;因为有问必答VIP体验卡有效期仅有1天&amp;#xff0c;您在需要使用的时候【私信】联系我&amp;#xff0c;我会为您补发。&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["基于奇异值分解的模糊检测与分割", ["代码找不到类似的，就是基于奇异值曲线差异性的图像模糊检测与分割，只看到图片压缩的"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你要把写的函数放到前面去 &lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["matlab函数无法识别，如何解决？", ["用牛顿插值法，计算有点多，编了3个函数都不能用。", "\n", "i = ", "[-", "2", ",-", "1", ",-", "0.5", ",", "0.5", ",", "1", ",", "2", "]", ";\nV = ", "[-", "637", ",-", "96.5", ",-", "20.5", ",", "20.5", ",", "96.5", ",", "637", "]", ";\niNew = ", "0.1", ";\n%一次插值 选i", "[", "3", ",", "4", "]", "\nV1 = b1(", "V(3)", ")+b2(", "V(3)", ",i(", "3", "),", "V(4)", ",i(", "4", "))*(iNew-i(", "3", "));\n%二次插值 选i", "[", "3", ",", "4", ",", "5", "]", "\nV2 = b1(", "V(3)", ")+b2(", "V(3)", ",i(", "3", "),", "V(4)", ",i(", "4", "))*(iNew-i(", "3", "))+b3(", "V(3)", ",i(", "3", "),", "V(4)", ",i(", "4", "),", "V(5)", ",i(", "5", "))*(iNew-i(", "3", "))*(iNew-i(", "4", "));\n\n", "function", " sc3 = b3(f_x1,x1,f_x2,x2,f_x3,x3)\n    sc3 = (b2(f_x2,x2,f_x3,x3)-b2(f_x1,x1,f_x2,x2))/x3-x1;\n", "end", "\n", "function", " sc2 = b2(f_x1,x1,f_x2,x2)\n    sc2 = (f_x2-f_x1)/(x2-x1);\n", "end", "\n", "function", " sc1 = b1(f_x1)\n    sc1 = f_x1;\n", "end", "\n\n\n\n", "\n", "运行结果及报错内容", "\n", "函数或变量 'b1' 无法识别。", "\n", "怕误删了文件，重装了一次，"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;只需要将spectrogram函数的输入参数fs设定为250就可以&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["matlab做时频变换，想把坐标轴从采样点个数变为真实时间", ["关于matlab做stft的问题：我的输入是96×1的数据点（数据来源于250hz的实际电信号采样，这一段数据实际上是0.384秒的），", "现在用spectrogram函数做出的图横轴单位是采样点个数，但我想要横轴是真实时间点，纵轴频率根据横轴自动计算，应该怎么做呢？谢谢！"]], "Tag": "算法设计"}
{"Answer": "还是先判断(*pchb=*pcha)不等于0，再++", "Konwledge_Point": "图的分解", "Question": ["这个是c++课上的一个例子，我有一行不明白", ["如图while那一行，应该是先++，再赋值，判断不等于零，再进行下一步，还是先判断(*pchb=*pcha)不等于0，再++"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以用字符串拼接&amp;#xff0c;例如J(1&amp;#43;i)&amp;#xff0c;里面是i是数值型&amp;#xff0c;可以先转换为字符串&amp;#xff0c;然后拼接。&lt;/p&gt;\n\n&lt;p&gt;J(1&amp;#43;i)可以这样写&amp;#xff1a;[&amp;#39;J(&amp;#39;,num2str(1&amp;#43;i),&amp;#39;)&amp;#39;]&lt;/p&gt;\n\n&lt;p&gt;例如&amp;#xff0c;当i&amp;#61;1时&amp;#xff0c; [&amp;#39;J(1&amp;#39;,num2str(1&amp;#43;1),&amp;#39;)&amp;#39;]则为J(2)&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["matlab如何在循环中修改变量名称并再次使用？", ["\n", "x = image;\n[J1,S1,C1,D1] = SWT2(x);\nL = 1;\nfor i = 1:15\n        [J(1+i),S(1+i),C(1+i),D(1+i)] = SWT2(J(i))\n        e_J(i) = Entropy(J(i))\n        e_J(1+i) = Entropy(J(1+i))\n        L = L+1\n    if e_J(1+i) > e_J(i)\n        break\n    end\nend", "\n\n", "程序思路：输入一幅图像x，通过SWT2函数使x可以产生4幅图像（J1,S1,C1,D1）。对J1再调用SWT2函数产生4幅图像（J2,S2,C2,D2）。对J2再调用SWT2函数产生4幅图像（J3,S3,C3,D3），如此循环15次。", "\n\n", "SWT2函数的功能：将输入的图像分解成近似图像，水平细节图像，垂直细节图像和对角细节图像", "\n\n", "Entropy函数的功能：计算输入图像的熵值", "\n\n", "上述代码肯定执行不了，那么在循环中如何利用i将J(1+i)定义成变量名？例如：当i=3时，J(1+i)表示为变量名为“J4”的一个变量。", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;中间蓝色部分文字的大概意思是通过matlab的内置函数qz可以对矩阵进行QZ分解&amp;#xff0c;而QZ分解的目的是为了求广义的特征值。对于qz(A,B)表示传入两个矩阵A,B&amp;#xff0c;对其进行QZ分解&amp;#xff0c;分解得到6个参数&amp;#xff0c;这六个参数中要满足Q1,Z1为正交矩阵&amp;#xff0c;且满足蓝色框里面的计算&amp;#xff0c;分解出来得到一般的特征向量&amp;#xff0c;用于后期的使用。&lt;br /&gt;同时对于&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;diag&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;U&lt;/span&gt;)./&lt;span class=\"hljs-title\"&gt;diag&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;V&lt;/span&gt;)&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;表示对取矩阵U,V上的对角元素&amp;#xff0c;同时让U的对角元素除以V的对角元素&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["关于#matlab#的问题：第二张图片中蓝色框中间文字怎样理解", ["\n", "源代码关于schur 方法的QZ分解，即把系数矩阵进行分块矩阵的处理。", "第二张图片中蓝色框中间文字怎样理解？", "diag(U)./diag(V)是什么意思？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1、if&amp;#xff08;x&amp;#61;&amp;#61;0&amp;#xff09;&lt;br /&gt;2、printf(&amp;#34;%d &amp;#34;,t); %d后面加个空格&amp;#xff0c;打印的数据好看些&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["我的分解因数的C程序为什么输出是空白？", ["\n", "\n", "问题就是上图", "\n", "\n", "#", "include", " ", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " i = ", "0", ";\n    ", "int", " t = ", "1", ";\n    ", "int", " x = ", "0", ";\n    \n    ", "printf", "(", "\"请输入一个数：\\n\"", ");\n    ", "scanf", "(", "\"%d\"", ",&i);\n    ", "printf", "(", "\"此数的因数有：\\n\"", "); \n    ", "for", "(t=", "1", ";t<=i;++t) {\n        x= i%t;\n        ", "if", "(x=", "0", "){\n            ", "printf", "(", "\"%d\"", ",t);\n        } \n    }\n    \n      ", "return", " ", "0", ";\n      \n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;())\nresult &amp;#61; []\ndef answer_lb(xc):\n    &lt;span class=\"hljs-keyword\"&gt;lb&lt;/span&gt; &amp;#61; []\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,xc):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; xc%i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;lb&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(i)\n            &lt;span class=\"hljs-keyword\"&gt;lb&lt;/span&gt; &amp;#43;&amp;#61; answer_lb(xc//i)\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;lb&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;lb&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(xc)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;lb&lt;/span&gt;\nresult &amp;#61; answer_lb(&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;)\nresult.&lt;span class=\"hljs-keyword\"&gt;sort&lt;/span&gt;()\n# 输出结果&amp;#xff0c;利用&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;()函数将结果按照规定字符串格式输出\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#61;&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(str,result)))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "图的分解", "Question": ["请问各位<将输入的一个正整数分解质因数>得出下图输入输出，我错在哪儿，该怎么改", ["\n", "x", " = ", "int", "(", "input", "())\nresult = []\ndef answer_lb(xc):\n    ", "lb", " = []\n    ", "for", " i in ", "range", "(", "2", ",xc):\n        ", "if", " xc%i == ", "0", ":\n            ", "for", " ", "j", " in ", "range", "(", "2", ",i):\n                ", "if", " i%", "j", " != ", "0", ":\n                    ", "lb", ".", "append", "(i)\n                ", "else", ":\n                    answer_lb(i)\n        ", "else", ":\n            ", "continue", "\n    ", "return", " ", "lb", "\nresult = answer_lb(", "x", ")\nresult.", "sort", "()\n# 输出结果，利用", "map", "()函数将结果按照规定字符串格式输出\n", "print", "(", "x", ",", "'='", ",", "'*'", ".", "join", "(", "map", "(str,result)))\n\n\n\n\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;blockquote&gt;\n&lt;p&gt;回答不易&amp;#xff0c;求求您采纳点赞哦&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;快速峭度图是用来提高窄带瞬态冲击信号分离的精度的一种图形。其中&amp;#xff0c;三个分解频带的谱峭度值分别对应频带[0,1/6]、[1/6,1/3]和[1/3,1/2]。通过使用这种方法来替代传统的二叉树结构分解&amp;#xff0c;可以提高精度。每一层的频带值是通过使用不同的准解析滤波器和高通低通滤波器配置来确定的。&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["快速峭度图怎么看啊！！", ["快速峭度图怎么看啊？", "它的层数为什么是0   1   1.6   2   2.6 这样呀？还有每一层的频带为什么是这样？论文里是下面这样的，我看不懂，有没有人帮我解答以下，谢谢。", "在窄带瞬态冲击信号分离中，二叉树结构分解精度太低，为了提高二叉树结构分解精度，采用通过频率分别为[0,1/6]、[1/6,1/3]和[1/3,1/2]的三个准解析滤波器与上述的高通低通滤波器交替配置，并计算三个分解频带信号的谱峭度值，形成1/3-二叉树结构快速峭度图。", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;请看&amp;#x1f449; &amp;#xff1a;&lt;a href=\"https://blog.csdn.net/csdndouniwan/article/details/87375803?utm_source&amp;#61;csdn_ai_ada_ask_robot\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;Android studio自动创建drawable-xhdpi等文件夹&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "图的分解", "Question": ["Android studio 如何管理 大量图片，drawable中无法建立文件夹吗？", ["虽然已经有许多文件夹：", "drawable", "drawable-v24", "mipmap-anydpi-v26", "mipmap-mdpi", "但是很可惜我用SurfaceView好像不能直接绘制GIF动图，只能将其分解为修列静态图片，使用如下方法绘制：", "\n", "     p_canvas.draw", "Bitmap(Config.", "template_ones", "[", "f_frameIndex", "], ", "f_locationX", ", ", "f_locationY", ", ", "p_paint", ")", ";\n        f_frameIndex = (++f_frameIndex) % ", "55", ";\n\n", "\n", "但是产生了大量的图片！！", "我想比如在drawable文件夹中 建立多个文件夹（即：一个GIF建一个文件夹），但是好像不行，除了有红色波浪线提示错误之外，", "而且R.drawble.还找不到"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\ndef &lt;span class=\"hljs-built_in\"&gt;factor&lt;/span&gt;(n):\n    l &amp;#61; []\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; n &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, n &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n &lt;span class=\"hljs-symbol\"&gt;%&lt;/span&gt; i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n                n &amp;#61; int(n / i)\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n                    l.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(i)\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n                    l.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(i)\n                &lt;span class=\"hljs-built_in\"&gt;break&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;return&lt;/span&gt; l\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;factor&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;45&lt;/span&gt;))\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;factor&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;))\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "图的分解", "Question": ["想问一下这个怎么通过函数的方式实现", ["想问一下这里的这个因式分解要怎么通过上图的这个函数来实现呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff0c;根据你提供的代码和错误信息&amp;#xff0c;可能是由于变量名或函数名错误导致的无法识别错误。&lt;/p&gt;\n&lt;p&gt;首先&amp;#xff0c;出现错误的行中&amp;#xff0c;变量名u_avg_vector可能存在拼写错误。请检查变量名是否正确&amp;#xff0c;并且该变量是否在程序的其他位置正确定义或赋值。&lt;/p&gt;\n&lt;p&gt;另外&amp;#xff0c;代码中也存在其他的语法错误和逻辑错误&amp;#xff0c;例如第一行中R&amp;#61;xfluc&lt;em&gt;xfluc:%1600&lt;/em&gt;1600中的:可能是一个语法错误。在使用注释符号%时&amp;#xff0c;应该将注释放在语句的后面&amp;#xff0c;而不是与语句合并在一起。此外&amp;#xff0c;在第二行中&amp;#xff0c;应该使用lamda而不是landa。&lt;/p&gt;\n&lt;p&gt;为了更好地解决问题&amp;#xff0c;建议提供更多的代码信息和错误信息&amp;#xff0c;或者将完整的代码放在一个单独的脚本中&amp;#xff0c;以便我们更好地了解问题所在并进行修改和调试。&lt;br /&gt;下面是一个修改后的代码片段&amp;#xff0c;你可以参考一下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;pod&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(xfluc, nsnapshots)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;% 计算速度平均值&lt;/span&gt;\nu_avg_vector &amp;#61; &lt;span class=\"hljs-built_in\"&gt;mean&lt;/span&gt;(xfluc, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;); &lt;span class=\"hljs-comment\"&gt;% 按列计算平均值&lt;/span&gt;\navg &amp;#61; &lt;span class=\"hljs-built_in\"&gt;zeros&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(xfluc));\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;j&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(xfluc, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n    avg(:,&lt;span class=\"hljs-built_in\"&gt;j&lt;/span&gt;) &amp;#61; u_avg_vector;\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;% 减去平均值&lt;/span&gt;\nxfluc &amp;#61; xfluc - avg;\n\n&lt;span class=\"hljs-comment\"&gt;% 计算本征正交分解&lt;/span&gt;\nR &amp;#61; xfluc * xfluc&amp;#39;;\n[eigenvector, eigenvalue] &amp;#61; eig(R);\nlamda &amp;#61; &lt;span class=\"hljs-built_in\"&gt;diag&lt;/span&gt;(eigenvalue);\nsum_eigenvalue &amp;#61; sum(lamda);\nenergy &amp;#61; lamda / sum_eigenvalue;\n\n&lt;span class=\"hljs-comment\"&gt;% 选取能量占比达到95%的模态&lt;/span&gt;\nenergy_POD &amp;#61; &lt;span class=\"hljs-number\"&gt;0.95&lt;/span&gt;;\nenergy_process &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; energy_process &amp;lt; energy_POD &amp;amp;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;lt;&amp;#61; nsnapshots\n    energy_process &amp;#61; energy_process &amp;#43; energy(&lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n\n&lt;span class=\"hljs-comment\"&gt;% 计算POD模态&lt;/span&gt;\nu_pod &amp;#61; xfluc&amp;#39; * eigenvector(:,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt;);\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;希望这些修改可以帮助你解决问题。如果还有其他问题&amp;#xff0c;请随时提出。&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["MATLAB中函数或变量无法识别", ["MATLAB中函数或变量无法识别", "对三维速度进行本征正交分解，但是这一个变量无法识别如图", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;def reduceNum(n):\n    \n    &amp;#39;&amp;#39;&amp;#39;策略:求解n的因式分解,首先从2开始到n遍历,\n    如果n%某一个数的结果是整数,则打印出该数,同时n&amp;#61;n/该数\n    直到n&amp;#61;&amp;#61;1结束\n    &amp;#39;&amp;#39;&amp;#39;\n    a&amp;#61;&amp;#39;{} &amp;#61; &amp;#39;.format(n)\n \n    #判断n是否为正整数\n    if not isinstance(n, int) or n &amp;lt;&amp;#61; 0 :\n        print (&amp;#39;请输入一个正确的数字 !&amp;#39;)\n        exit(0)\n        \n    #排除n的值为1 的特殊情况   \n    elif n in [1] :        \n        a&amp;#43;&amp;#61;&amp;#39;{}&amp;#39;.format(n)\n \n    #n的值不为1的正整数   \n    while n not in [1] : # 循环保证递归\n        for temp in range(2, n &amp;#43; 1) :\n            \n            if n % temp &amp;#61;&amp;#61; 0:#更改n的值,同时记录下它的因数并跳出for循环\n                n &amp;#61;int( n/temp)# n 等于 n/temp\n                \n                if n &amp;#61;&amp;#61; 1: #此时n的值大小和因数相同,作为末尾因数\n                    a&amp;#43;&amp;#61;str(temp)\n                    \n                else : # index 一定是因数                    \n                    a&amp;#43;&amp;#61;&amp;#39;{} *&amp;#39;.format(temp)\n                    \n                break\n    print(a)\n            \nreduceNum(999)\nreduceNum(90)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;参考一下&amp;#xff0c;希望对你有帮助&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["麻烦各位大佬帮忙看看", ["【质因数分解】对用户输入的一个大于10的整数进行质因数分解。假设输入符合要求，程序显示该数的质因数分解结果，且各个质因数从小到大排列。", "\n\n", "程序的一次执行过程如下图所示：", "\n\n", "\n\n", "如果用户输入的是一个质数，则程序显示1乘以该数。下图是用户输入一个质数的分解结果：", "\n\n", "\n\n", "程序代码如下：", "\n\n", "#质因数分解", "\n\n", "import math", "\n\n", "x = int(input(\"请输入一个大于10的整数：\"))", "\n\n", "primes =[ ___1___  for p in range(2, x//2+1) if 0 not in[p%d for d in range(2, int(math.sqrt(p))+1)] ]", "\n\n", "factorList = []", "\n\n", "y = x", "\n\n", "for i in primes:", "\n\n", "   while y % i == 0:", "\n\n", "       factorList.append(i) ", "\n\n", "       y = y // i", "\n\n", "if factorList == []:", "\n\n", "   print(\"%d=%d*%d\" % ___2___)", "\n\n", "else:", "\n\n", "   s = \"*\".join( map( ___3___ , factorList) ) ", "\n\n", "   print(\"%d=%s\" % (x,s)) ", "\n\n", "#结束", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "其实更多的考虑是面向对象的特性，一种对现实世界的一种自然模拟，其实在很多时候，一对多 多对多都可以做出来，但是你建模总得有个最佳方案。比如你举的例子\r\nPERSON  1：N   ADDRESS 这其实最直观的对生活中现实模拟，倒不是真的考虑到易用性。", "Konwledge_Point": "图的分解", "Question": ["hibernate文档对于一对多关联的一些疑问", ["[quote]基于外键关联的单向一对多关联是一种很少见的情况，我们不推荐使用它。[/quote]", "\n[quote]我们认为对于这种关联关系最好使用连接表。 [/quote]", "\n\n", "PERSON  1：N   ADDRESS", "\n\n", "ER关系图多对多关系分解为两个一对多关系，没有一对多分解为一对一和一对多。这种推荐的处理方式是如何考虑的呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;本来接口通过底层封装好就是为了方便调用&amp;#xff0c;当然要遵循相应的规则&amp;#xff0c;一千个人有一千种不一样的格式&amp;#xff0c;那怎么读取&amp;#xff1f;所以你要做的就是两件事&amp;#xff0c;第一&amp;#xff1a;找一下资料看看Matlab支不支持读取你这种格式&amp;#xff0c;第二&amp;#xff1a;想办法转成Matlab的格式&amp;#xff0c;比如txt&amp;#xff0c;csv等。有用请采纳&amp;#xff0c;谢谢&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["matlab中自定义格式文件怎么读取", ["问题遇到的现象和发生背景", "\n", "做图像奇异值分解，保存分解后的矩阵为自定义格式，最好不是常见的后缀格式", "\n", "问题相关代码，请勿粘贴截图", "\n", "xiaoye = cat(", "2", ",cramp_lst01,cramp_lst02,cramp_lst03)", ";%这个xiaoye是1063*168的矩阵", "\nsave('xiaoye.svd','xiaoye')", ";", "\n", "\n", "运行结果及报错内容", "\n", "fopen", "(", "'xiaoye.svd'", ")", "\n\nans =\n\n     ", "3", "\n", "\n", "我想要达到的结果", "\n", "读取得到的数据还是xiaoye"]], "Tag": "算法设计"}
{"Answer": "```\r\n select * from user  where userDeviceid in(\r\nSELECT userDeviceid FROM user where channelId='301040' GROUP BY userDeviceid having count(*)&gt;=2\r\n)\r\n```", "Konwledge_Point": "图的分解", "Question": ["MySQL查询求帮助快绝望了", ["所有的查询都在USER表，我分解开了条件，第一个SELECT * FROM USER u WHERE u.", "channelId", "='301040';", "\n 根据查出来userDeviceid的值查，第二条件", "\n 想得到userDeviced字段相同的值大于2条和2条以上所对应的用户", "\n想最终得到，这种数据，每条用户的名字Code不一样,但是userDeviceId是一样的"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/weixin_30920597/article/details/96524904", "Konwledge_Point": "图的分解", "Question": ["关于Database,如何确定架构中的keys，以及是否BCNF，3NF？", ["\n\n", "描述：关于R架构特性A, B, C, D 有以下依赖关系：AB→C, AC→B, B→D, BC→A.", "\n\n", "a. 列出R中所有的keys", "\nb. R是否BCNF，如果不是，把它分解为BCNF关系集", "\nc. R是否3NF，如果不是，把它转为3NF。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个不属于第三范式&amp;#xff0c;在我看来这属于反范式&lt;br /&gt;没有冗余的数据库设计可以做到。但是&amp;#xff0c;没有冗余的数据库未必是最好的数据库&amp;#xff0c;有时为了提高运行效率&amp;#xff0c;就必须降低范式标准&amp;#xff0c;适当保留冗余数据。具体做法是&amp;#xff1a;在概念数据模型设计时遵守第三范式&amp;#xff0c;降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段&amp;#xff0c;允许冗余&amp;#xff0c;达到以空间换时间的目的。&lt;br /&gt;码字不易  望采纳&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["请问该关系为第几范式？", ["如图的关系，约定：同一日期、同一水池ID、同一指标名可以有不同的检测机构ID，也就是（日期，水池ID，指标名，检测机构ID）->值，即日期，水池ID，指标名，检测机构ID是主键，请教各位，这关系是第三范式了吗？", "\n", "如果分解成如下图的两个关系，", "\n", "关系R2的字段“R1_ID”是外键。这么一来，不得不新增一个ID标识，用于R2关联，否则回到图1了。请问我哪里错了"]], "Tag": "算法设计"}
{"Answer": "ORDER BY 字段 nulls last  非MSSQL的语法。\r\n\r\nSELECT * FROM (\r\nSELECT *,\r\n\tCASE WHEN 排序在前的条件 THEN 1  --排序在前的条件\r\n\t WHEN 排序在二的条件 THEN 2 --\t排序在二的条件\t\r\n\t WHEN 排序在二的条件 THEN 3 --\t排序在二的条件\t\r\n\tEND px\r\nFROM RM_RUL_Results )\r\nORDER BY px ASC", "Konwledge_Point": "图的分解", "Question": ["sql server需要把查询结果中的为null的数据放在最后，且为null的字段越少，该数据就越往前", ["在开发过程中，我碰到了一个数据排序的问题，大致情况是在某一张数据表中存在一些数据是空值的情况，显示的时候会比较丑，如图", "\n\n", "因此，我想要对结果进行排序处理，让“不可用设备”、“随机设备”、“敏感性分析”这三个字段中非空的数据优先显示，详细的逻辑可以分解为：", "\n\n", "1.“不可用设备”、“随机设备”、“敏感性分析”都为非空的数据最优先显示", "\n\n", "2.存在两个字段非空，一个字段为空的情形：", "\n\n", "     ①.“不可用设备”、“随机设备”非空，“敏感性分析”为空最优先显示\n     ②.“不可用设备”、“敏感性分析”非空，“随机设备”为空次之\n     ③.“随机设备”、“敏感性分析”非空，“不可用设备”为空最后显示\n", "\n\n", "3.存在一个字段非空，两个字段为空的情形,也分三种情况:", "\n\n", "     ①.“不可用设备非空最优先显示\n     ②.“随机设备”非空次之\n     ③.“敏感性分析”非空最后显示\n", "\n\n", "4.三个字段都为空最后显示", "\n\n", "在这种前提之下，按照字符串排序，那么sql应该怎么写呢", "\n\n", "附上我写的代码，我试过了很多种方法，始终无法实现这种效果，有没有大神能教教我：", "\n\n", "1.SELECT * FROM RM_RUL_Results WHERE 1=1", "\n      ORDER BY components nulls last, random_components nulls last, env nulls last", "\n\n", "我在百度找到的其中一种方法，但是这种方法存在语法错误", "\n\n", "\n\n", "2.SELECT * FROM RM_RUL_Results WHERE 1=1", "\norder by case when components is null then 'zzzzzzzzz' else components end,", "\n            case when random_components is null then 'zzzzzzzzz' else random_components end,", "\n            case when env is null then 'zzzzzzzzz' else env end", "\n\n", "通过case when可以实现对第一个字段“不可用设备”（components）的排序，但是因为优先级的关系，随机设备（random_components）和敏感性分析（env）的空字段会出现在前面", "\n\n", "\n\n", "实在无奈了，有没有大神知道z'm'jie'jue"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;  &lt;span class=\"hljs-title\"&gt;isPrime&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; n &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i * i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n % i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, n;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; n &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;2000&lt;/span&gt; &amp;amp;&amp;amp; n &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt;&amp;#61; n / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;isPrime&lt;/span&gt;(i) &amp;amp;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;isPrime&lt;/span&gt;(n - i)) \n            {\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%-d&amp;#61;%-d&amp;#43;%-d\\n&amp;#34;&lt;/span&gt;, n, i, n - i);&lt;span class=\"hljs-comment\"&gt;//输出&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "图的分解", "Question": ["如何输入若干个任意数，用最简单的方法，好多内容还没学", ["哥德巴赫猜想", "成绩: 5 / 折扣: 0.8", "题面描述：", "如图所示：魔法学院的图书馆珍藏着一份1742年德国中学教师哥德巴赫写给大数学家欧拉的珍贵手稿，这就是世界近代三大数学难题之哥德巴赫猜想。即任何一个大于 6的偶数都可以表示成两个素数之和；任何一个大于9的奇数都可以表示成三个素数之和。 1966年，中国数学家陈景润证明了“任何一个充分大的偶数都可以表示成一个素数与另一个素因子不超过2个的数之和”，简称“1+2”。", "试验证2000以内的正偶数都能够分解为两个素数之和(即验证哥德巴赫猜想对2000以内的正偶数成立)。", "\n", "输入：", "若干个2001以内的正偶数，如上所述。", "\n", "输出：", "标准输出，输出所给正偶数的素数之和，每个占一行，如4=2+2。如果有多种可能，只输出一种，即第一个素数最小的。", "\n", "示例输入：", "4", "6", "8", "\n", "示例输出：", "4=2+2", "6=3+3", "8=3+5", "\n", "测试用例 1    以文本方式显示", "422↵", "1932↵", "1182↵", "86↵", "1880↵", "以文本方式显示", "422=3+419↵", "1932=19+1913↵", "1182=11+1171↵", "86=3+83↵", "1880=3+1877↵", "1秒    无限制    0"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我可以帮你看看程序&amp;#xff0c;我也是研究这方面的。&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["MATLAB  核熵成分分析 KECA 核参数怎么选取以及主元个数怎么计算", ["最近在写KECA的程序，它是对KPCA的一种改进方法，利用Renyi熵来选取主元个数，并将其应用于TE过程进行故障检测，选取TE过程正常训练数据500*52，测试数据960*52，", "\n\n", "但是编程结果一直不对：高斯核参数大一些（100-128左右），计算出来的Renyi熵第一项远远大于其他项，导致主元计算不正确，只有1，但是整体的统计图走向趋势是对的；高斯核函数小一些（3.5-4.5），计算出保留的主元数较为合适（十几到几十不等），但是统计图的趋势完全不对；若是设定大的高斯核参数，自己手动设定合适的保留的主元数（15-27左右），统计图监测效果还行。", "\n\n", "所以怎么才能让设定合适的核参数时计算出合适的主元数？我现在的程序到底哪步出了问题？", "\n\n", " ", "\n\n", "KECA基本原理", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", "程序的整个流程：", "\n\n", "1、导入训练数据X（500*52），计算均值，方差来标准化 ", "\n\n", "2、计算高斯核函数K（500*500），核函数自己设定为128", "\n\n", "\n", "c=128;\nfor i = 1 : X_row\n    for j = 1 : X_row\n        K(i,j) = exp(-(norm(Xtrain(i,:) - Xtrain(j,:)))^2/c^2);%求核矩阵，采用径向基核函数，参数c\n    end\nend", "\n\n", "3、对K直接进行特征值分解（eig）,求解出对应的特征值D和特征向量V，第一个特征值496.8437远远大于第二大的特征向量0.3995。", "\n\n", "做特征值分解的时候是对K做，还是对K/N做？", "求出来的特征向量需要单位化吗？怎么单位化?", "\n\n", "\n", "[V,D]=eig(K);%求特征值和特征向量  \n\nlambda1=diag(D); %对角矩阵 求特征值\n[lambda,index]=sort(real(lambda1),'descend'); %sort 'descend'每行按从大到小排序，lamda为排序后结果，index为索引 按照降序排列\nL1=diag(lambda); %从大到小特征值对角矩阵形式\nVVV=V(:,index);  %按照特征值降序排列的特征向量 N*N\n\nVV=zeros(X_row,X_row);\nfor i=1:X_row\n  VV(:,i) = VVV(:,i)/norm(VVV(:,i));    %特征向量归一化 \nend\n", "\n\n", "4、计算每一项的Renyi熵值（按照熵大小排列，取前npc个特征值特征向量，熵是平方的形式还是不平方的形式？不平方有负值）", "\n\n", "\n", "n0=ones(1,X_row);%1*N 元素全为1\nentropy=zeros(1,X_row);\nfor i = 1 : X_row\n    entropy(i) = lambda(i)*(VV(:,i)'*n0')^2;%求二次熵\n    %entropy(i) =sqrt(lambda(i))*VV(:,i)'*n0';%求熵    \nend", "\n\n", "5、按照Renyi熵值的大小降序排列对应的特征值和特征向量", "\n\n", "\n", "[sorted_entropy,r]=sort(entropy,'descend');%将熵值按降序排列，sorted_entropy是排列后的数组，r是序号\nlamda=lambda(r);%对应于熵降序排列的特征值\nL=diag(lamda);%对应于熵降序排列的特征值对角阵\nP=VV(:,r);%对应于熵降序排列的特征向量", "\n\n", "6、计算Renyi熵值从大到小累计贡献99%的对应的主元个数", "\n\n", "\n", "npc=1;\nwhile sum(sorted_entropy(1:npc))/sum(sorted_entropy)<0.99\n    npc=npc+1; %求保留的主元数\nend", "\n\n", "一般情况下npc=1可以占据99.99%甚至更高的贡献率，但是这种结果是不对的，但是不知道那里不对", "\n\n", "7、利用训练数据计算T2和SPE统计量的控制限", "\n\n", "训练数据主元向量T怎么计算？", "\n\n", "还是", "\n\n", " 计算出训练数据T2和SPE统计量使用核密度估计怎么计算控制限？", "\n\n", "公式怎么使用？x是代表一个样本的T2统计量值吗？", "\n\n", "\n", "%% 计算T2 SPE统计量\nZ_1=inv(sqrt(L))*P'*K'; %N1*N2 \nZ=Z_1';%N2*N1 \nSCORE=K*P; \nZ_ECA_1 =inv(sqrt(L(1:npc,1:npc)))*P(:,1:npc)'*K'; %npc*N2 \nZ_ECA=Z_ECA_1'; %N2*npc \n\n%T2统计量\nfor i=1:X_row\n        T2_1(i)=Z_ECA(i,:)*inv(L(1:npc,1:npc))*Z_ECA(i,:)';   % 1*1\nend\n%T22=diag(Z_ECA*inv(L(1:npc,1:npc))*Z_ECA'); %整体矩阵计算\n\n%Q统计量\nQ_1= sum(Z.^2,2)-sum(Z_ECA.^2 ,2);", "\n\n", "8、CS统计量怎么计算（训练数据的，以及测试数据的）", "\n\n", "\n\n", " CS统计量公式", "\n\n", "\n\n", "\n", "%训练数据CS统计量及控制限计算计算\nPhi_ECA1=sqrt(L(1:npc,1:npc))*P(:,1:npc)'; %npc*N    \nPhi_ECA=Phi_ECA1'; \nSM_ECA=0;\nfor i=1:X_row\n    SM_ECA=SM_ECA+Phi_ECA1(:,i); %npc*1\nend\nM_ECA=SM_ECA/X_row; %npc*1\n\nCS1=zeros(1,X_row);\nfor i=1:X_row\n    CS1(i)=1-M_ECA'*Phi_ECA1(:,i)/(norm(M_ECA')*norm(Phi_ECA1(:,i))); \nend\n\n%利用核密度估计计算控制限\nalpha = 0.99;\n[f,xi] = ksdensity(CS1);\ndelta=xi(2)-xi(1);\nsum_bb=0;\nblock=0;\nfor i=100:-1:1\n    sum_bb=sum_bb+delta*f(i);\n    if sum_bb>(1-alpha) & block==0;\n    bbb=i;\n    block=1;\n    end   \nend\nCSUCL=xi(1)+delta*bbb;\n\n\n\n%测试数据CS统计量\n[K_t] = computeKM(Xtest,Xtrain,c);%求核矩阵，采用径向基核函数，参数c N2*N1\n\nZt_1=inv(sqrt(L))*P'*K_t'; %N1*N2 \nZt=Zt_1';%N2*N1 \nZt_ECA1 =inv(sqrt(L(1:npc,1:npc)))*P(:,1:npc)'*K_t'; %npc*N2 \nZt_ECA=Zt_ECA1'; %N2*npc \n\n\nCS2=zeros(1,Xt_row);\nfor i=1:Xt_row\n      CS2(i)=1-M_ECA'*Zt_ECA1(:,i)/(norm(M_ECA')*norm(Zt_ECA1(:,i))); \nend"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;sym2poly&lt;br /&gt;你是不是拼错了&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["请问一下，这个代码的问题可以怎样解决，结果如图所示", ["请问一下，这个代码的问题可以怎样解决？", "报错结果如图：", "\n", "\n", "clear all\nclose all\n", "derad", "=pi/180;%角度转化为弧度\n", "radeg", "=180/pi;%弧度转化为角度\n", "twpi", "=2*pi;\n", "kelm", "=8;%阵元数\n", "dd", "=0.5;%阵元间距\n", "d", "=0:dd:(kelm-1)*dd;\n", "iwave", "=3;%信源数\ntheta=[10 30 60];%波动方向\n", "snr", "=10;%信噪比\n", "n", "=500;%采样数\n", "A", "=exp(-j*twpi*d.'*sin(theta*derad));%方向向量\n", "S", "=randn(iwave,n);%信源数量\n", "X0", "=A*S;%接受信号\n", "X", "=awgn(X0,snr,'measured');%添加噪声\n", "Rxx", "=X*X'/n;%计算协方差矩阵\n", "InvS", "=inv(Rxx);\n[EVx,Dx]=eig(Rxx);%特征值分解\n", "EVAx", "=diag(Dx)';\n[EVAx,Ix]=sort(EVAx);%特征值从小到大排序\n", "EVAx", "=fliplr(EVAx);%左右翻转，从小到大排序\n", "EVx", "=fliplr(EVx(:,Ix));%对应特征向量排序\n\n", "Unx", "=EVx(:,iwave+1:kelm);\nsyms z\n", "pz", "=z.^([0:kelm-1]", "');\npz1=(z^(-1)).^([0:kelm-1]);\nfz=z.^(kelm-1)*pz1*Unx*Unx'", "*pz;\n", "a", "=sym2ploy(fz);\n", "zx", "=roots(a);\n", "rx", "=zx.';\n[as,ad]=(sort(abs((abs(rx)-1))));\n", "DOAest", "=asin(sort(-angle(rx(ad([1,3,5])))/pi))", "*180", "/pi;\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; java.util.Scanner;\n\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;MyDate&lt;/span&gt; {\n    &lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; year;\n    &lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; month;\n    &lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; day;\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;getYear&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; year;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;setYear&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; year)&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;this&lt;/span&gt;.year &amp;#61; year;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;getMonth&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; month;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;setMonth&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; month)&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;this&lt;/span&gt;.month &amp;#61; month;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;getDay&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; day;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;setDay&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; day)&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;this&lt;/span&gt;.day &amp;#61; day;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;boolean&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;isLeapYear&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; year % &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; year % &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || year % &lt;span class=\"hljs-number\"&gt;400&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;nextDate&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;num&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; getLengthOfMonth(month);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (month &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt; &amp;amp;&amp;amp; day &amp;#61;&amp;#61; num) {\n            year&amp;#43;&amp;#43;;\n            month &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            day &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (day &amp;#61;&amp;#61; num &amp;amp;&amp;amp; month !&amp;#61; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;) {\n            month&amp;#43;&amp;#43;;\n            day &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (day !&amp;#61; num &amp;amp;&amp;amp; month !&amp;#61; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;) {\n            day&amp;#43;&amp;#43;;\n        }\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;getLengthOfMonth&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; month)&lt;/span&gt; {\n        &lt;span class=\"hljs-comment\"&gt;/*判断月份&amp;#xff0c;特殊为2月*/&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num;\n        &lt;span class=\"hljs-keyword\"&gt;switch&lt;/span&gt; (month) {\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;:\n                num &amp;#61; &lt;span class=\"hljs-number\"&gt;31&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n                num &amp;#61; (isLeapYear()) ? &lt;span class=\"hljs-number\"&gt;29&lt;/span&gt; : &lt;span class=\"hljs-number\"&gt;28&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;:\n                num &amp;#61; &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; num;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;inputData&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-comment\"&gt;//创建对象&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;Scanner&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;sc&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Scanner&lt;/span&gt;(System.in);\n        &lt;span class=\"hljs-comment\"&gt;//分别输入年月日&lt;/span&gt;\n        System.out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入年月日&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-type\"&gt;boolean&lt;/span&gt; error;\n        &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n            System.out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入年份&amp;#xff08;1~5000&amp;#xff09;&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            year &amp;#61; sc.nextInt();\n            error &amp;#61; year &amp;lt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || year &amp;gt; &lt;span class=\"hljs-number\"&gt;5000&lt;/span&gt;;\n        } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (error);&lt;span class=\"hljs-comment\"&gt;//若error为true则重新输入年份&lt;/span&gt;\n\n        &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n            System.out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入月份&amp;#xff08;1~12&amp;#xff09;&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            month &amp;#61; sc.nextInt();\n            error &amp;#61; month &amp;lt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || month &amp;gt; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;;\n        } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (error);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;num&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; getLengthOfMonth(month);\n\n        &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n            System.out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入日&amp;#xff08;1~&amp;#34;&lt;/span&gt; &amp;#43; num &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#xff09;:&amp;#34;&lt;/span&gt;);\n            day &amp;#61; sc.nextInt();\n            error &amp;#61; day &amp;lt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || day &amp;gt; num;\n        } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (error);\n\n        &lt;span class=\"hljs-comment\"&gt;/*当输入的年月日都合法之后*/&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;/*特殊为年末和月末*/&lt;/span&gt;\n        System.out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入当前日期&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; year &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &amp;#43; month &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &amp;#43; day);\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; String &lt;span class=\"hljs-title function_\"&gt;getDate&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; year &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &amp;#43; month &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &amp;#43; day;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;getDayOfYear&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;sum&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            sum &amp;#43;&amp;#61; getLengthOfMonth(i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; sum;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "图的分解", "Question": ["关于#java#的问题，如何解决？", ["一．源代码：题目是求当前日期（年月日）的下一天（年月日），源代码已编好。", "\n", "```java\n", "package", " javaexperiment1;\n\n", "//导包", "\n", "import", " java.util.Scanner;\n\n", "public", " ", "class", " ", "NextDate", " {\n\n", "\n", "public", " ", "static", " ", "void", " ", "main", "(", "String", "[] args) {\n    ", "int", " ", "year", ",", "month", ",", "day", ";\n", "\n", "        ", "//创建对象", "\n        Scanner sc = ", "new ", "Scanner", "(System.", "in", ");\n        ", "//分别输入年月日", "\n        System.", "out", ".", "println", "(", "\"请输入年月日\"", ");\n        ", "//接收数据", "\n        ", "/*先定年月日输入值的界限*/", "\n        ", "boolean", " error;\n        do{\n            System.", "out", ".", "println", "(", "\"请输入年份（1~5000）：\"", ");\n            ", "year", " = sc.", "nextInt", "();\n            error = ", "year", "<", "1", " || ", "year", ">", "5000", ";\n        }", "while", "(error);", "//若error为true则重新输入年份", "\n\n            do{\n                System.", "out", ".", "println", "(", "\"请输入月份（1~12）：\"", ");\n                ", "month", " = sc.", "nextInt", "();\n                error = ", "month", "<", "1", " || ", "month", ">", "12", ";\n            }", "while", " (error);\n\n            ", "/*判断月份，特殊为2月*/", "\n        ", "int", " num;\n        ", "switch", " (", "month", "){\n            ", "case", " ", "1", ":\n            ", "case", " ", "3", ":\n            ", "case", " ", "5", ":\n            ", "case", " ", "7", ":\n            ", "case", " ", "8", ":\n            ", "case", " ", "10", ":\n            ", "case", " ", "12", ": num = ", "31", "; ", "break", ";\n            ", "case", " ", "2", ":  num = (", "year", "%", "4", "==", "0", "&&", "year", "%", "100", "!=", "0", " || ", "year", "%", "400", "==", "0", ")? ", "29", ":", "28", "; ", "break", ";\n            ", "default", ": num = ", "30", ";\n        }\n\n        do{\n            System.", "out", ".", "println", "(", "\"请输入日（1~\"", "+ num +", "\"）:\"", ");\n            ", "day", " = sc.", "nextInt", "();\n            error = ", "day", "<", "1", " || ", "day", ">num;\n        }", "while", " (error);\n\n        ", "/*当输入的年月日都合法之后*/", "\n        ", "/*特殊为年末和月末*/", "\n        System.", "out", ".", "println", "(", "\"请输入当前日期：\"", "+ ", "year", " +", "\"-\"", "+ ", "month", " +", "\"-\"", "+ ", "day", ");\n\n\n        ", "if", " (", "month", " == ", "12", " && ", "day", "==num){\n            ", "year", "++;\n            ", "month", " = ", "1", ";\n            ", "day", " = ", "1", ";\n        }\n        ", "else", " ", "if", " (", "day", "==num && ", "month", "!=", "12", "){\n            ", "month", "++;\n            ", "day", " = ", "1", ";\n        }\n        ", "else", " ", "if", " (", "day", "!=num && ", "month", "!=", "12", "){\n            ", "day", "++;\n        }\n\n        System.", "out", ".", "println", "(", "\"下一天日期：\"", "+ ", "year", " +", "\"-\"", "+ ", "month", " +", "\"-\"", "+ ", "day", ");\n\n\n\n\n\n\n\n\n    }\n}\n\n\n", "\n", "\n", "二．题目要求如下（修改已编好的“求下一天年月日的程序”）：", "实验内容 ：    ", "\n", "（1）把实验一的项目文件夹JavaExperiment1复制一份，把新复制的文件夹修改为JavaExperiment3，在IDEA中打开项目文件夹JavaExperiment3，鼠标右键单击项目名称，在弹出的菜单中选择“重构”->\"重命名\"，把项目名称修改为JavaExperiment3，在JavaExperiment3项目中完成本次实验。", "\n", "  (2)  通过IDEA的重构功能把项目的顶层包重命名为javaexperiment3，把NextDate类重命名为MyDate类。", "\n", "  (3)  把原来main方法中完成的功能分解到MyDate类的属性和普通方法中：把变量year、month和day定义成私有的成员变量并定义每个属性的getter方法，定义获取日期的getDate方法，把判断是否是闰年的功能提取到isLeapYear方法中，把获取一个月包含的天数的功能提取到getLengthOfMonth方法中，把输入年月日并对输入的数据进行校验的功能提取到inputData方法中，把计算输入日期的下一个日期的方法提取到nextDate方法中，重构后的MyDate类的UML类图如下图所示：", "\n", "（4）在MyDate类中添加getDayOfYear方法，该方法判断输入的日期是一年中的第几天并返回判断结果。重构的MyDate类的UML类图如下图所示：", "\n", "  （5）在项目包中创建名为Test的测试类，在Test类的main方法中创建MyDate类的对象，通过创建的对象分别调用inputData、nextDate、getDayOfYear、getDate方法完成测试并输出结果。", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你在 heti &amp;#xff08;另外函数名尽量取英文名阿&amp;#xff0c;merge 挺好&amp;#xff09;函数里打印下 left 的值就知道了&amp;#xff0c;加一个 print&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["一个让我非常疑惑的问题，恳请各路大佬抽空帮忙指点一下到底是哪里有问题！", ["小弟先上正确代码", "\n\n", "\n", "#include <stdio.h>\n\n//合体函数 \nvoid heti(int *arr, int *temp, int left, int right, int mid)\n{\n    int i = left;\n    int j = mid + 1;\n    int t = 0;\n    while(i <= mid && j <= right)\n    {\n        if(arr[i] >= arr[j])\n        {\n            temp[t++] = arr[j++];\n        }\n        else\n        {\n            temp[t++] = arr[i++];\n        }\n    }\n    while(i <= mid)\n    {\n        temp[t++] = arr[i++];\n    }\n    while(j <= right)\n    {\n        temp[t++] = arr[j++];\n    }\n    for (i = 0; i < t; i++)\n    {\n        arr[left + i] = temp[i];\n    }\n}\n\n//分开函数 \nvoid fenkai(int *arr, int *temp, int left, int right)\n{\n    if(left < right)\n    {\n        int mid = (left + right) / 2;\n        //向左进行递归分解\n        fenkai(arr, temp, left, mid);\n        fenkai(arr, temp, mid + 1, right); \n        //调用合体函数 \n        heti(arr, temp, left, right, mid);\n    }\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    int arr[n], temp[n];\n    for(int i = 0; i < n; i++)\n    {\n        scanf(\"%d\", &arr[i]);\n    }\n    fenkai(arr, temp, 0, n - 1);\n    for(int i = 0; i < n; i++)\n    {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n} ", "\n\n", "问题描述：该问题是一个数组归并排序的代码，在合体函数的最后要把temp数组的元素全部复制到arr数组，为什么一定要", "arr[left + i] = temp[i]", "，而不能直接用", "arr[i] = temp[i]", "，我寻思我给left赋值就是赋的0啊，而且left的数据也没有变化，为什么两种方法却得到不一样的结果，下面附上两种方案的运行图片（第一个是对的，第二个是错的），跪求大佬告知！！！", "\n\n", "\n\n"]], "Tag": "算法设计"}
{"Answer": "sql语句写的是查询所有，当然不会分页", "Konwledge_Point": "图的分解", "Question": ["jsp分页问题，，，，，，，，，，，，，，，", ["求大神看看   显示列表只有第一页有全部信息，但是页码、上一页、下一页  都有  就是没有内容分页数目正确  但是内容全显示在第一页", "\npackage org.pan.web;", "\nimport java.sql.*;", "\nimport java.util.Vector;", "\nimport org.pan.util.*;", "\nimport javax.servlet.http.HttpServletRequest;", "\nimport org.pan.web.book.shopuser;", "\npublic > private shopuser user = new shopuser(); //新的用户对象", "\nprivate javax.servlet.http.HttpServletRequest request; //建立页面请求", "\nprivate Vector userlist;  //显示用户列表向量数组", "\nprivate int page = 1;   //显示的页码", "\nprivate int pageSize=3;   //每页显示的图书数", "\nprivate int pageCount =0;    //页面总数", "\nprivate long recordCount =0; //查询的记录总数", "\nprivate String message = \"\";    //出错信息提示", "\nprivate String username = \"\";   //注册后返回的用户名", "\nprivate long userid = 0;    //注册后返回的用户ID", "\npublic usermn() throws Exception{", "\nsuper();", "\n}", "\n\n", "public Vector getUserlist() {", "\nreturn userlist;", "\n}", "\n\n", "public String getGbk( String str) {", "\ntry", "\n{", "\nreturn new String(str.getBytes(\"ISO8859-1\"));", "\n}", "\ncatch (Exception e)", "\n{", "\nreturn str;", "\n}", "\n}", "\n\n", "//将页面表单传来的资料分解", "\npublic boolean getRequest(javax.servlet.http.HttpServletRequest newrequest) {", "\nboolean flag = false;", "\ntry", "\n{", "\nrequest = newrequest;", "\nString ID = request.getParameter(\"userid\");", "\nif (ID!=null )", "\n{", "\nuserid = 0;", "\ntry", "\n{", "\nuserid = Long.parseLong(ID);", "\nuser.setId(userid);", "\n}", "\ncatch (Exception e)", "\n{", "\nmessage = message + \"你要修改的用户号出错！\";", "\n}", "\n}   ", "\n\n", "username = request.getParameter(\"username\");", "\nif (username==null || username.equals(\"\"))", "\n{", "\nusername = \"\";", "\nmessage = message + \"用户名为空!\";", "\n}", "\nuser.setUserName(getGbk(username)); ", "\nString password = request.getParameter(\"passwd\");", "\nif (password==null || password.equals(\"\"))", "\n{", "\npassword = \"\";", "\nmessage = message + \"密码为空!\";", "\n}", "\nString pwdconfirm = request.getParameter(\"passconfirm\");", "\nif (!password.equals(pwdconfirm))", "\n{", "\nmessage = message + \"确认密码不相同!\";", "\n}", "\nuser.setPassWord(getGbk(password));", "\nString names = request.getParameter(\"names\");;", "\nif (names==null)", "\n{", "\nnames = \"\";", "\n}", "\nuser.setNames(getGbk(names));", "\nString sex = request.getParameter(\"sex\");", "\nuser.setSex(getGbk(sex));", "\nString address = request.getParameter(\"address\");", "\nif (address == null)", "\n{", "\naddress = \"\";", "\n}", "\nuser.setAddress(getGbk(address));", "\nString post = request.getParameter(\"post\");", "\nif (post == null)", "\n{", "\npost = \"\";", "\n}", "\nuser.setPost(getGbk(post));", "\nString phone = request.getParameter(\"phone\");", "\nif (phone== null)", "\n{", "\nphone = \"\";", "\n}", "\nuser.setPhone(phone);", "\nString email = request.getParameter(\"email\");", "\nif (email == null)", "\n{", "\nemail = \"\";", "\n}", "\nuser.setEmail(getGbk(email));", "\nString IP = request.getRemoteAddr();", "\nuser.setRegIpAddress(IP);", "\nif (message.equals(\"\"))", "\n{", "\nflag = true;", "\n}", "\nreturn flag;", "\n}", "\ncatch (Exception e)", "\n{", "\nreturn flag;", "\n}", "\n}", "\n\n", "public String getSql() {", "\nsqlStr = \"select * from my_users order by id\";", "\nreturn sqlStr;", "\n}", "\n\n", "public boolean execute() throws Exception {", "\nsqlStr = \"select count(*) from my_users\";    //取出记录数", "\nint rscount = pageSize;", "\ntry", "\n{", "\nResultSet rs1 = stmt.executeQuery(sqlStr);", "\nif (rs1.next()) recordCount = rs1.getInt(1);", "\nrs1.close();", "\n}", "\ncatch (SQLException e)", "\n{", "\nclose();", "\nreturn false;", "\n}", "\n//设定有多少pageCount", "\nif (recordCount < 1)", "\n            pageCount = 0;", "\n        else", "\n            pageCount = (int)(recordCount - 1) / pageSize + 1;", "\n//检查查看的页面数是否在范围内", "\nif (page < 1)  ", "\n            page = 1;", "\n        else if (page > pageCount)", "\n            page = pageCount;", "\n\n", "rscount = (int) recordCount % pageSize;  // 最后一页记录数        ", "\n\n", "//sql为倒序取值", "\nsqlStr = \"select * from My_users \";", "\nif (page == 1)", "\n{", "\nsqlStr = sqlStr + \" order by Id desc\";", "\n} else {", "\nsqlStr = sqlStr + \" where Id not in ( select Id from My_users ORDER BY id) and Id in \" +", "\n\"(select Id from My_users ORDER BY ID) \" + \" order by Id desc\";", "\n}", "\ntry", "\n{", "\nrs = stmt.executeQuery(sqlStr);", "\nuserlist = new Vector();", "\nwhile (rs.next()){ ", "\nshopuser user = new shopuser();", "\nuser.setId(rs.getLong(\"Id\"));", "\nuser.setUserName(rs.getString(\"UserName\"));", "\nuser.setPassWord(rs.getString(\"PassWord\"));", "\nuser.setNames(rs.getString(\"Names\"));", "\nuser.setSex(rs.getString(\"Sex\"));", "\nuser.setAddress(rs.getString(\"Address\"));", "\nuser.setPhone(rs.getString(\"Phone\"));", "\nuser.setPost(rs.getString(\"Post\"));", "\nuser.setEmail(rs.getString(\"Email\"));", "\nuser.setRegTime(rs.getString(\"RegTime\"));", "\nuser.setRegIpAddress(rs.getString(\"RegIpAddress\"));", "\nuserlist.addElement(user);", "\n}", "\nrs.close();", "\nreturn true;", "\n}", "\ncatch (SQLException e)", "\n{", "\nSystem.out.println(e);", "\nreturn false;", "\n}", "\n\n", "}", "\n\n", "public boolean insert(HttpServletRequest req) throws Exception {", "\nif (getRequest(req)) {", "\nsqlStr = \"select * from My_users where username = '\" + user.getUserName() +\"'\";", "\nrs = stmt.executeQuery(sqlStr);", "\nif (rs.next())", "\n{", "\nmessage = message + \"该用户名已存在!\";", "\nrs.close();", "\nreturn false;", "\n}", "\nsqlStr = \"insert into my_users (username,password,Names,sex,Address,Phone,Post,Email,RegTime,RegIpaddress) values ('\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getUserName()) + \"','\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getPassWord()) + \"','\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getNames()) + \"','\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getSex()) + \"','\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getAddress()) + \"','\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getPhone()) + \"','\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getPost()) + \"','\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getEmail()) + \"',now(),'\";", "\nsqlStr = sqlStr + user.getRegIpAddress() + \"')\";", "\ntry", "\n{", "\nstmt.execute(sqlStr);", "\nsqlStr = \"select max(id) from My_users where username = '\" +user.getUserName()+ \"'\";", "\nrs = stmt.executeQuery(sqlStr);", "\nwhile (rs.next())", "\n{", "\nuserid = rs.getLong(1);", "\n}", "\nrs.close();", "\nreturn true;", "\n}", "\ncatch (SQLException sqle)", "\n{", "\nreturn false;", "\n}", "\n} else {", "\nreturn false;", "\n}", "\n\n", "}", "\n\n", "public boolean update(HttpServletRequest req) throws Exception {", "\nif (getRequest(req)){", "\nsqlStr = \"update my_users set \";", "\nsqlStr = sqlStr + \"username = '\" + strFormat.toSql(user.getUserName()) + \"',\";", "\nsqlStr = sqlStr + \"password = '\" + strFormat.toSql(user.getPassWord()) + \"',\";", "\nsqlStr = sqlStr + \"Names = '\" + strFormat.toSql(user.getNames()) + \"',\";", "\nsqlStr = sqlStr + \"sex = '\" + strFormat.toSql(user.getSex()) + \"',\";", "\nsqlStr = sqlStr + \"address = '\" + strFormat.toSql(user.getAddress()) + \"',\";", "\nsqlStr = sqlStr + \"phone = '\" + strFormat.toSql(user.getPhone()) + \"',\";", "\nsqlStr = sqlStr + \"post = '\" + strFormat.toSql(user.getPost()) + \"',\";", "\nsqlStr = sqlStr + \"Email = '\" + strFormat.toSql(user.getEmail()) + \"' \";", "\nsqlStr = sqlStr + \" where id = '\" + user.getId() + \"'\";", "\ntry", "\n{", "\nstmt.execute(sqlStr);", "\nreturn true;", "\n}", "\ncatch (SQLException e)", "\n{", "\nreturn false;", "\n}", "\n} else {", "\nreturn false;", "\n}", "\n\n", "}", "\n\n", "public boolean delete( long aid ) throws Exception {", "\n\n", "sqlStr = \"delete from My_users where id = \"  + aid ;", "\ntry", "\n{", "\nstmt.execute(sqlStr);", "\nreturn true;", "\n}", "\ncatch (SQLException e)", "\n{", "\nSystem.out.println(e);", "\nreturn false;", "\n}", "\n}", "\n\n", "public boolean getUserinfo(long newid ) throws Exception {", "\ntry", "\n{", "\nsqlStr=\"select  * from My_users where Id = \" + newid ;", "\nrs = stmt.executeQuery(sqlStr);", "\nuserlist = new Vector();", "\nwhile (rs.next()){ ", "\nuser.setId(rs.getLong(\"Id\"));", "\nuser.setUserName(rs.getString(\"UserName\"));", "\nuser.setPassWord(rs.getString(\"PassWord\"));", "\nuser.setNames(rs.getString(\"Names\"));", "\nuser.setSex(rs.getString(\"Sex\"));", "\nuser.setAddress(rs.getString(\"Address\"));", "\nuser.setPhone(rs.getString(\"Phone\"));", "\nuser.setPost(rs.getString(\"Post\"));", "\nuser.setEmail(rs.getString(\"Email\"));", "\nuser.setRegTime(rs.getString(\"RegTime\"));", "\nuser.setRegIpAddress(rs.getString(\"RegIpAddress\"));", "\nuserlist.addElement(user);", "\n}", "\nrs.close();", "\nreturn true;", "\n}", "\ncatch (SQLException e)", "\n{", "\nreturn false;", "\n}", "\n\n", "}", "\n\n", "public int getPage() {   //显示的页码", "\nreturn page;", "\n}", "\npublic void setPage(int newpage) {", "\npage = newpage;", "\n}", "\n\n", "public int getPageSize(){ //每页显示的图书数", "\nreturn pageSize;", "\n}", "\npublic void setPageSize(int newpsize) {", "\npageSize = newpsize;", "\n}", "\n\n", "public int getPageCount() {  //页面总数", "\nreturn pageCount;", "\n}", "\npublic void setPageCount(int newpcount) {", "\npageCount = newpcount;", "\n}", "\n\n", "public long getRecordCount() {", "\nreturn recordCount;", "\n}", "\npublic void setRecordCount(long newrcount) {", "\nrecordCount= newrcount;", "\n}", "\n\n", "public String getMessage() {", "\nreturn message;", "\n}", "\n\n", "public void setMessage(String msg) {", "\nmessage = msg;", "\n}", "\n\n", "public void setUserid(long uid) {", "\nuserid = uid;", "\n}", "\npublic long getUserid() {", "\nreturn userid;", "\n}", "\n\n", "public void setUserName(String uName) {", "\nusername = uName;", "\n}", "\n\n", "public String getUserName() {", "\nreturn username;", "\n}", "\n};"]], "Tag": "算法设计"}
{"Answer": "&lt;h4 id=\"h4_以下内容部分参考chatgpt模型&amp;#xff1a;_1681128958065\"&gt;以下内容部分参考ChatGPT模型&amp;#xff1a;&lt;/h4&gt;\n&lt;hr /&gt;\n&lt;p&gt;首先需要明确稀疏基和稀疏系数的概念&amp;#xff1a;&lt;br /&gt;稀疏基&amp;#xff1a;一组基底向量&amp;#xff0c;用来表示信号的基础构成&amp;#xff0c;通常使用正交基或者小波基。&lt;br /&gt;稀疏系数&amp;#xff1a;信号在稀疏基下的系数&amp;#xff0c;即用稀疏基去表示信号时各基底向量所占的比例。&lt;/p&gt;\n&lt;p&gt;对于给定的n*1矩阵&amp;#xff0c;我们可以采用傅里叶变换来得到其频域表示&amp;#xff0c;即得到其在正交基下的系数&amp;#xff0c;进而求得其稀疏系数。具体步骤如下&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;对n*1矩阵进行傅里叶变换&amp;#xff0c;得到其频域表示。&lt;/li&gt;&lt;li&gt;选取一组正交基&amp;#xff0c;如离散余弦基&amp;#xff08;DCT&amp;#xff09;、小波基等。&lt;/li&gt;&lt;li&gt;将频域系数投影到正交基上&amp;#xff0c;得到其在正交基下的系数。&lt;/li&gt;&lt;li&gt;对系数进行稀疏化处理&amp;#xff0c;如使用L1范数最小化等方法。&lt;/li&gt;&lt;li&gt;得到稀疏系数&amp;#xff0c;进而得到原信号在稀疏基下的表示。&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;以下是python代码示例&amp;#xff0c;以DCT为例&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; numpy as np\nfrom scipy.fftpack &lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; dct\n\n&lt;span class=\"hljs-comment\"&gt;# 假设有一个10*1的矩阵&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;x&lt;/span&gt; &amp;#61; np.random.rand(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n\n&lt;span class=\"hljs-comment\"&gt;# 进行DCT变换&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;x_dct&lt;/span&gt; &amp;#61; dct(x, &lt;span class=\"hljs-attr\"&gt;type&amp;#61;2,&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;norm&amp;#61;&amp;#39;ortho&amp;#39;)&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 选取前4个DCT基向量作为稀疏基&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;dct_basis&lt;/span&gt; &amp;#61; np.zeros((&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;))\nfor i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;):\n    dct_basis[:, i] &amp;#61; dct(np.eye(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)[:, i], &lt;span class=\"hljs-attr\"&gt;type&amp;#61;2,&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;norm&amp;#61;&amp;#39;ortho&amp;#39;)&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 将频域系数投影到DCT基上&amp;#xff0c;得到其在DCT基下的系数&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;x_sparse&lt;/span&gt; &amp;#61; np.linalg.lstsq(dct_basis, x_dct, &lt;span class=\"hljs-attr\"&gt;rcond&amp;#61;None)[0]&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 对系数进行稀疏化处理&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 这里使用L1范数最小化方法&amp;#xff0c;即Lasso算法&lt;/span&gt;\nfrom sklearn.linear_model &lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; Lasso\n&lt;span class=\"hljs-attr\"&gt;lasso&lt;/span&gt; &amp;#61; Lasso(&lt;span class=\"hljs-attr\"&gt;alpha&amp;#61;0.1)&lt;/span&gt;\nlasso.fit(dct_basis, x_dct)\n&lt;span class=\"hljs-attr\"&gt;x_sparse&lt;/span&gt; &amp;#61; lasso.coef_\n\n&lt;span class=\"hljs-comment\"&gt;# 得到原信号在DCT基下的表示&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;x_rec&lt;/span&gt; &amp;#61; dct_basis &amp;#64; x_sparse\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;需要注意的是&amp;#xff0c;稀疏基的选取需要考虑信号的特点&amp;#xff0c;如能量分布、频率分布等&amp;#xff0c;不同的信号可能需要选取不同的基底。而稀疏化处理的方法也有很多种&amp;#xff0c;如L1范数最小化、L0范数最小化等&amp;#xff0c;需要根据具体情况选择合适的方法。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;h3 id=\"h3_如果我的建议对您有帮助、请点击采纳、祝您生活愉快_1681128958106\"&gt;如果我的建议对您有帮助、请点击采纳、祝您生活愉快&lt;/h3&gt;", "Konwledge_Point": "图的分解", "Question": ["有懂信号学方面知识的朋友吗(标签-矩阵|关键词-傅里叶变换)", ["我有一个n*1的矩阵，现在想用信号学的知识将其分解为稀疏基和稀疏系数，但是有点不清楚方法，网上搜集到的代码是", "\n", "有懂信号学方面知识的朋友吗？能指导我一下吗？图中代码想要采用傅里叶变换。但是我不知道怎么样去得到稀疏基，以及稀疏系数"]], "Tag": "算法设计"}
{"Answer": "String str = \"D:\\123.jsp\";\r\n使用正则时\"\\\"会转义1，建议\r\n  1.先把“\\”替换成\"/\",然后str.split(\"/\");\r\n  2.或者添加一个\"\\\",然后str.split(\"\\\\\\\\\");", "Konwledge_Point": "图的分解", "Question": ["字符串分解问题", ["现在我的问题是做一个图上传的功能点,但是取得文件路径的时候我想对路径进行解析,问题出在这,比如说:文件路径是D:\\123.jsp;我想取到123.jsp,我用的split(\"\\\");去分解,但是不行,我想问一下大家,为什么不行,怎么去分解他.", "\n还行有哪位高手做过图片上传,把你的代码贴出来分享一下,谢谢了", "\n[b]问题补充：[/b]", "\nredish这位哥们,你运行了吗,这样肯定是不行的", "\nString str=\"D:/123.jsp\";", "\nstr.split(\"/\");  ", "\n\n", "[b]问题补充：[/b]", "\n我是取的文件夹的路径,我打出之后是[b][size=large][color=red]D:\\123.jsp[/color][/size][/b],而不是D:/123.jsp", "\n所以大家再帮我看看", "\nString str=\"D:\\123.jsp\";", "\nstr.split(\"\\\"); ", "\n[b]问题补充：[/b]", "\n哥们儿们,你们那些还是不行,String str=request.getParameter(\"name\");而request.getParameter(\"name\")的值是[size=medium][color=red]D:\\123.jsp[/color][/size],我试过了,用jltest这位老兄的还是不行.希望大家继续指教 ", "\n[b]问题补充：[/b]", "\ncprogrammer 这个哥们的也不行,String a = \"D:\\123.jsp\";", "\nString[] b = a.split(\"\\\");     你就住eclipse里面粘贴一下就会有错误", "\n[b]问题补充：[/b]", "\ngeniuslph老兄,能不能给一个例子,我一做就出错"]], "Tag": "算法设计"}
{"Answer": "一般都是新开一页，然后用换页参考来连接，Visio里面有个“换页参考”的图标Off-page reference，专门用来连接多页流程图的，可以试用一下", "Konwledge_Point": "图的分解", "Question": ["Visio 画流程图，一页画不完了，该怎么处理得更好？", ["一个模块。流程相对较多，这样竖着画下来，画到底部了，但还没有画完，此时该怎么做？是新建一页，还是画右边，中间出现的断层该怎么处理？页和页之间用什么符号链接起来？希望大家能解答一下，或者给我一些参考资料"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/374029819566195.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a,b,c,d,e;           \n\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;please input a number&amp;#34;&lt;/span&gt;);    \n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a);                 \n    b&amp;#61;a/&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;;   \n    c&amp;#61;(a-b*&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;)/&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;\n    d&amp;#61;(a-b*&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;-c*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;)/&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    e&amp;#61;(a-b*&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;-c*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;-d*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)%10;\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#61;%d&amp;#43;%d&amp;#43;%d&amp;#43;%d&amp;#34;&lt;/span&gt;,a,b*&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;,c*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;,d*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,e);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "图的分解", "Question": ["如图，咋解各位，大数分解问题", ["要求是给定一个四位整数，对该数进行分解。", " 如:输入:6321", " 输出:6321=6000+300+20+1;", " 输入:6000", " 输出:", " 6000=6000+0+0+0"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;已解决&amp;#xff0c;看源码一下就知道了.......&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["EMD分解 IMF图字体大小", ["使用python PYEMD模块生成的分量图字体太小", "\n", "运行结果及报错内容", "\n", "\n", "我看它作图是基于plt来的，但是不知道怎么调字体"]], "Tag": "算法设计"}
{"Answer": "仔细看了下，好像没有错误。。。。 。", "Konwledge_Point": "图的分解", "Question": ["这分解因式的代码有没有错误的地方？", ["这分解因式的代码有不对的吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff1a;这个问题涉及到图的分割问题&amp;#xff0c;一般可以使用基于贪心算法的启发式方法来求解。具体来讲&amp;#xff0c;可以首先随机选择k个起始节点&amp;#xff0c;然后把其余节点分配给这k个起始节点进行划分&amp;#xff0c;不断迭代优化&amp;#xff0c;直到满足要求为止。具体算法的时间复杂度是O(kn2)&amp;#xff0c;其中n是节点数。同时&amp;#xff0c;还可以使用图论中的最小割算法来解决该问题&amp;#xff0c;但由于最小割算法涉及计算复杂度较大&amp;#xff0c;不太适合应用于大型的图分割问题。&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["关于图论中分解图的方法", ["对于一个连通图，有没有什么方法能将图分割成k个连通子图？并且这些子图的节点数量尽量满足在一个差值范围内。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答通过自己思路及引用到GPTᴼᴾᴱᴺᴬᴵ搜索,得到内容具体如下&amp;#xff1a;&lt;br /&gt;根据您提供的截图&amp;#xff0c;您应该是想要使用 Matlab 中的 EMD&amp;#xff08;经验模态分解&amp;#xff09;算法来分解实际测得的震动数据&amp;#xff0c;并绘制分解后的图像。&lt;/p&gt;\n&lt;p&gt;下面是一些关于如何使用 EMD 算法分解数据的基本步骤&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1、 准备数据&lt;/p&gt;\n&lt;p&gt;首先&amp;#xff0c;您需要将测得的震动数据保存在一个文本文件或 Matlab 中的变量中&amp;#xff0c;以便后续分析。假设您将数据保存在一个名为 &lt;code class=\"language-javascript\"&gt;vibration_data.txt&lt;/code&gt; 的文本文件中&amp;#xff0c;每一行代表一个数据点&amp;#xff0c;数据点之间用空格或逗号分隔。&lt;/p&gt;\n&lt;p&gt;2、 加载数据&lt;/p&gt;\n&lt;p&gt;使用 Matlab 的 &lt;code class=\"language-javascript\"&gt;load&lt;/code&gt; 函数或 &lt;code class=\"language-javascript\"&gt;importdata&lt;/code&gt; 函数来导入数据文件&amp;#xff0c;并将数据保存在一个 Matlab 数组中。例如&amp;#xff0c;可以使用以下代码将数据加载到名为 &lt;code class=\"language-javascript\"&gt;data&lt;/code&gt; 的数组中&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-matlab\"&gt;&lt;span class=\"hljs-attr\"&gt;data&lt;/span&gt; &amp;#61; importdata(&lt;span class=\"hljs-string\"&gt;&amp;#39;vibration_data.txt&amp;#39;&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;3、 运行 EMD 算法&lt;/p&gt;\n&lt;p&gt;接下来&amp;#xff0c;您可以使用 EMD 算法对数据进行分解。在您提供的截图中&amp;#xff0c;似乎是使用了一个叫做 &lt;code class=\"language-javascript\"&gt;emd&lt;/code&gt; 的函数来进行分解。根据您提供的代码和截图&amp;#xff0c;我猜测这个 &lt;code class=\"language-javascript\"&gt;emd&lt;/code&gt; 函数应该是一个 Matlab 函数文件&amp;#xff0c;包含了 EMD 算法的实现。&lt;/p&gt;\n&lt;p&gt;要使用该函数进行分解&amp;#xff0c;您需要将数据作为输入参数传递给该函数&amp;#xff0c;例如&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-matlab\"&gt;&lt;span class=\"hljs-attribute\"&gt;IMFs&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; emd(data)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;该代码将返回一个名为 &lt;code class=\"language-javascript\"&gt;IMFs&lt;/code&gt; 的 Matlab 数组&amp;#xff0c;其中包含了分解后的信号成分。该数组的每一行代表一个瞬态分量&amp;#xff08;Intrinsic Mode Function&amp;#xff0c;IMF&amp;#xff09;。第一行是最高频率的 IMFs&amp;#xff0c;最后一行是最低频率的 IMFs。&lt;/p&gt;\n&lt;p&gt;4、 绘制分解后的图像&lt;/p&gt;\n&lt;p&gt;最后&amp;#xff0c;您可以使用 Matlab 的绘图函数&amp;#xff08;例如 &lt;code class=\"language-javascript\"&gt;plot&lt;/code&gt;、&lt;code class=\"language-javascript\"&gt;subplot&lt;/code&gt;、&lt;code class=\"language-javascript\"&gt;imagesc&lt;/code&gt; 等&amp;#xff09;来绘制分解后的信号成分。例如&amp;#xff0c;以下代码将绘制第 1、3、5 行 IMFs 的图像&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-matlab\"&gt;&lt;span class=\"hljs-attribute\"&gt;subplot&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;plot&lt;/span&gt;(IMFs(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,:));\n&lt;span class=\"hljs-attribute\"&gt;subplot&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;plot&lt;/span&gt;(IMFs(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,:));\n&lt;span class=\"hljs-attribute\"&gt;subplot&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;plot&lt;/span&gt;(IMFs(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,:));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;您可以根据需要调整这些代码来绘制您感兴趣的 IMFs 图像。&lt;/p&gt;\n&lt;p&gt;需要注意的是&amp;#xff0c;EMD 算法是一种迭代算法&amp;#xff0c;其结果可能会因为初始条件和参数的不同而有所不同。因此&amp;#xff0c;您可能需要根据具体情况来调整算法的参数和初始条件&amp;#xff0c;以获得最优的分解结果。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;如果以上回答对您有所帮助&amp;#xff0c;点击一下采纳该答案&amp;#xff5e;谢谢&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["论文里关于matlab emd分解的代码，需要个朋友指导一下怎么带入数据最后输出分解图", ["\n", "\n", "\n", "不太了解每个.m文件分别如何运行，每一个参数怎么替换进去，想用这个代码处理实际测得的震动数据。"]], "Tag": "算法设计"}
{"Answer": "分离固定数据及周期采集数据\r\n1）仪器信息表（字典表）：存放仪器的基本信息，设备ID作为主键\r\n2）数据采集表：设备ID、采集时间、状况参数\r\n数据采集比较密集的话，建议考虑按采集时间创建子表（表名称上加上月份等标记）", "Konwledge_Point": "图的分解", "Question": ["MSSQL数据表如何分解合理", ["用的是MSSql。 ", "\n\n", "一张数据表是这样的，仪器有几十万台，间隔一段时间采集一次数据，该怎么建表合理"]], "Tag": "算法设计"}
{"Answer": "```\r\n[output,res]=emd(x);\r\nemd(x,'Interpolation','pchip');          % 此时输出左图\r\n```\r\n你的这句重复啦，明显的BUG！，emd默认‘Interpolation’是‘spline’，你显示的图示‘spline’的而不是‘pchip’，而存取的变量是‘pchip’的结果！\r\nemd函数前没有output arguments 时输出图片，若有输出变量则不会显示图片。", "Konwledge_Point": "图的分解", "Question": ["MATLAB EMD分解结果和显示有差别", ["为什么emd函数输出的结果和运行emd时显示的经验模态图不一样？左图是运行时显示的图，显示了原信号和5个经验模态图以及余项。右图是根据输出数据画的图，可以明显看出IMF3和原图不一样，请问这是为什么？", "\n代码如下：", "\n\n", "clc;clear\nx=load('sumsin');\nx=x.sumsin;\nt=1:length(x);\n[output,res]=emd(x);\nemd(x,'Interpolation','pchip');          % 此时输出左图\n\nfigure\nsubplot(711)\nplot(t,x)\nset(gca,'xticklabel','');\nfor i=1:6\n    subplot(7,1,i+1)\n    plot(t,imf(:,i))\n    if i<6;set(gca,'xticklabel','');end\nend                                     % 此时输出右图\n", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; glob\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; os\n&lt;span class=\"hljs-meta\"&gt;# 获取当前路径&lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;cwd&lt;/span&gt; &amp;#61; os.getcwd()\n \n&lt;span class=\"hljs-meta\"&gt;# 要拼接的文件夹及其完整路径&amp;#xff0c;注不要包含中文&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;## 待读取批量csv的文件夹 &lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;read_path&lt;/span&gt; &amp;#61;  &amp;#39;data_Q1_2018&amp;#39; \n&lt;span class=\"hljs-meta\"&gt;## 待保存的合并后的csv的文件夹           &lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;save_path&lt;/span&gt; &amp;#61;  &amp;#39;data_Q1_2018_merge&amp;#39;  \n&lt;span class=\"hljs-meta\"&gt;## 待保存的合并后的csv       &lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;save_name&lt;/span&gt; &amp;#61; &amp;#39;&lt;span class=\"hljs-type\"&gt;Modified&lt;/span&gt;.csv&amp;#39;   \n&lt;span class=\"hljs-meta\"&gt;# 修改当前工作目录&lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;os&lt;/span&gt;.chdir(read_path)\n \n&lt;span class=\"hljs-meta\"&gt;# 将该文件夹下的所有文件名存入列表&lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;csv_name_list&lt;/span&gt; &amp;#61; glob.glob(&amp;#39;*csv&amp;#39;)\n \n&lt;span class=\"hljs-meta\"&gt;# 读取第一个CSV文件并包含表头&amp;#xff0c;用于后续的csv文件拼接&lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;df&lt;/span&gt; &amp;#61; pd.read_csv(csv_name_list[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])\n&lt;span class=\"hljs-title\"&gt;tableName&lt;/span&gt; &amp;#61; os.path.splitext(csv_name_list[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n&lt;span class=\"hljs-title\"&gt;df&lt;/span&gt;[tableName] &amp;#61; df[df.columns[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]] / df.iloc[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n&lt;span class=\"hljs-title\"&gt;tableList&lt;/span&gt; &amp;#61; []\n&lt;span class=\"hljs-title\"&gt;tableList&lt;/span&gt;.append(tableName)\n&lt;span class=\"hljs-meta\"&gt;# # 循环遍历列表中各个CSV文件名&amp;#xff0c;并完成文件拼接&lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,len(csv_name_list)):\n    &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt; &amp;#61; pd.read_csv( &lt;span class=\"hljs-title\"&gt;csv_name_list&lt;/span&gt;[&lt;span class=\"hljs-title\"&gt;i&lt;/span&gt;] )&lt;/span&gt;\n    tableName2 &amp;#61; os.path.splitext(csv_name_list[i])[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n    tableList.append(tableName2)\n    &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;[tableName2] &amp;#61; &lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;[&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;.columns[1]] / &lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;.iloc[0,0]&lt;/span&gt;\n    df &amp;#61; pd.concat([df,&lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;],axis&amp;#61;1)&lt;/span&gt;\n    finalData &amp;#61; df[tableList]\n&lt;span class=\"hljs-title\"&gt;finalData&lt;/span&gt;.to_csv(cwd &amp;#43; &amp;#39;\\\\&amp;#39; &amp;#43; save_path &amp;#43; &amp;#39;\\\\&amp;#39; &amp;#43; save_name ,encoding&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;utf_8&amp;#34;&lt;/span&gt;,index&amp;#61;&lt;span class=\"hljs-type\"&gt;False&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/095391889246144.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["用python读取多个csv表指定数据写入一个表中", ["我想用python 合并一组表格，麻烦给写可直接用的代码", "\n", "目录D:/001  文件下有多个cvs表（表1到表?），", "把第二列（B2到B?，数量不固定）除以固定值A2，", "得到新的列合并输出在all.csv中，放同目录下", "第一行输出表格文件名，原表第一行数据不需要，", "如图分表第3列是需要的生成的数据合并到总表", "\n", "\n", "下面是一组参考代码，用来改改可能快一点", "\n", "import pandas as pd\nimport os\n", "# 获取当前路径", "\ncwd = os.getcwd()\n\n", "# 要拼接的文件夹及其完整路径，注不要包含中文", "\n", "# 待读取批量csv的文件夹 ", "\nread_path =  ", "'data_Q1_2018'", " \n", "# 待保存的合并后的csv的文件夹           ", "\nsave_path =  ", "'data_Q1_2018_merge'", "  \n", "# 待保存的合并后的csv       ", "\nsave_name = ", "'Modified.csv'", "   \n", "# 修改当前工作目录", "\nos.chdir(read_path)\n\n", "# 将该文件夹下的所有文件名存入列表", "\ncsv_name_list = os.listdir()\n\n", "# 读取第一个CSV文件并包含表头，用于后续的csv文件拼接", "\ndf = pd.read_csv( csv_name_list[0]) \n\n", "# 读取第一个CSV文件并保存", "\ndf.to_csv( cwd + ", "'\\\\'", " + save_path + ", "'\\\\'", " + save_name , ", "encoding", "=", "\"utf_8\"", ",index=False)\n", "# 循环遍历列表中各个CSV文件名，并完成文件拼接", "\n", "for", " i ", "in", " range(1,18):\n    df = pd.read_csv( csv_name_list[i] )\n    df.to_csv(cwd + ", "'\\\\'", " + save_path + ", "'\\\\'", " + save_name ,", "encoding", "=", "\"utf_8\"", ",index=False, ", "header", "=", "False", ", ", "mode", "=", "'a+'", ")\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The usual approach would be to send only a few emails at once and mark the sent ones on the background(via database flag sent=1 for example)&lt;/p&gt;\n\n&lt;p&gt;Then call the script every few minutes via a cronjob&lt;/p&gt;\n\n&lt;p&gt;This way you dont run into problems with php timeouts when sending emails to a lot of subscribers&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "图的分解", "Question": ["通过延迟将循环过程分解成部分，需要建议", ["\n\n", "i wanted to break down a process (loop) into some parts, for example if have 128 emails to send :", "\n\n", "function subs_emails(){    \n    $subscribers = //find subscribers\n\n    if(!empty($subscribers )){\n        foreach($subscribers as $i => $subscriber){\n            sendEmail($subscriber->id);\n            if($i % 15 == 0){ //<-- send email per 15\n                sleep(60); //to pause the process for 60 seconds \n            }\n        }\n        return true;\n    }else{\n        return false;\n    }\n}\n", "\n\n", "will this works ?? or is there any other \"better approach\" solution ?? need advice please", "\n\n", "thanks", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;我是有问必答小助手&amp;#xff0c;非常抱歉&amp;#xff0c;本次您提出的有问必答问题&amp;#xff0c;技术专家团超时未为您做出解答&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;本次提问扣除的有问必答次数&amp;#xff0c;将会以问答VIP体验卡&amp;#xff08;1次有问必答机会、商城购买实体图书享受95折优惠&amp;#xff09;的形式为您补发到账户。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;因为有问必答VIP体验卡有效期仅有1天&amp;#xff0c;您在需要使用的时候【私信】联系我&amp;#xff0c;我会为您补发。&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["基于奇异值分解的模糊检测与分割", ["代码找不到类似的，就是基于奇异值曲线差异性的图像模糊检测与分割，只看到图片压缩的"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你要把写的函数放到前面去 &lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["matlab函数无法识别，如何解决？", ["用牛顿插值法，计算有点多，编了3个函数都不能用。", "\n", "i = ", "[-", "2", ",-", "1", ",-", "0.5", ",", "0.5", ",", "1", ",", "2", "]", ";\nV = ", "[-", "637", ",-", "96.5", ",-", "20.5", ",", "20.5", ",", "96.5", ",", "637", "]", ";\niNew = ", "0.1", ";\n%一次插值 选i", "[", "3", ",", "4", "]", "\nV1 = b1(", "V(3)", ")+b2(", "V(3)", ",i(", "3", "),", "V(4)", ",i(", "4", "))*(iNew-i(", "3", "));\n%二次插值 选i", "[", "3", ",", "4", ",", "5", "]", "\nV2 = b1(", "V(3)", ")+b2(", "V(3)", ",i(", "3", "),", "V(4)", ",i(", "4", "))*(iNew-i(", "3", "))+b3(", "V(3)", ",i(", "3", "),", "V(4)", ",i(", "4", "),", "V(5)", ",i(", "5", "))*(iNew-i(", "3", "))*(iNew-i(", "4", "));\n\n", "function", " sc3 = b3(f_x1,x1,f_x2,x2,f_x3,x3)\n    sc3 = (b2(f_x2,x2,f_x3,x3)-b2(f_x1,x1,f_x2,x2))/x3-x1;\n", "end", "\n", "function", " sc2 = b2(f_x1,x1,f_x2,x2)\n    sc2 = (f_x2-f_x1)/(x2-x1);\n", "end", "\n", "function", " sc1 = b1(f_x1)\n    sc1 = f_x1;\n", "end", "\n\n\n\n", "\n", "运行结果及报错内容", "\n", "函数或变量 'b1' 无法识别。", "\n", "怕误删了文件，重装了一次，"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;只需要将spectrogram函数的输入参数fs设定为250就可以&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["matlab做时频变换，想把坐标轴从采样点个数变为真实时间", ["关于matlab做stft的问题：我的输入是96×1的数据点（数据来源于250hz的实际电信号采样，这一段数据实际上是0.384秒的），", "现在用spectrogram函数做出的图横轴单位是采样点个数，但我想要横轴是真实时间点，纵轴频率根据横轴自动计算，应该怎么做呢？谢谢！"]], "Tag": "算法设计"}
{"Answer": "还是先判断(*pchb=*pcha)不等于0，再++", "Konwledge_Point": "图的分解", "Question": ["这个是c++课上的一个例子，我有一行不明白", ["如图while那一行，应该是先++，再赋值，判断不等于零，再进行下一步，还是先判断(*pchb=*pcha)不等于0，再++"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以用字符串拼接&amp;#xff0c;例如J(1&amp;#43;i)&amp;#xff0c;里面是i是数值型&amp;#xff0c;可以先转换为字符串&amp;#xff0c;然后拼接。&lt;/p&gt;\n\n&lt;p&gt;J(1&amp;#43;i)可以这样写&amp;#xff1a;[&amp;#39;J(&amp;#39;,num2str(1&amp;#43;i),&amp;#39;)&amp;#39;]&lt;/p&gt;\n\n&lt;p&gt;例如&amp;#xff0c;当i&amp;#61;1时&amp;#xff0c; [&amp;#39;J(1&amp;#39;,num2str(1&amp;#43;1),&amp;#39;)&amp;#39;]则为J(2)&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["matlab如何在循环中修改变量名称并再次使用？", ["\n", "x = image;\n[J1,S1,C1,D1] = SWT2(x);\nL = 1;\nfor i = 1:15\n        [J(1+i),S(1+i),C(1+i),D(1+i)] = SWT2(J(i))\n        e_J(i) = Entropy(J(i))\n        e_J(1+i) = Entropy(J(1+i))\n        L = L+1\n    if e_J(1+i) > e_J(i)\n        break\n    end\nend", "\n\n", "程序思路：输入一幅图像x，通过SWT2函数使x可以产生4幅图像（J1,S1,C1,D1）。对J1再调用SWT2函数产生4幅图像（J2,S2,C2,D2）。对J2再调用SWT2函数产生4幅图像（J3,S3,C3,D3），如此循环15次。", "\n\n", "SWT2函数的功能：将输入的图像分解成近似图像，水平细节图像，垂直细节图像和对角细节图像", "\n\n", "Entropy函数的功能：计算输入图像的熵值", "\n\n", "上述代码肯定执行不了，那么在循环中如何利用i将J(1+i)定义成变量名？例如：当i=3时，J(1+i)表示为变量名为“J4”的一个变量。", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;中间蓝色部分文字的大概意思是通过matlab的内置函数qz可以对矩阵进行QZ分解&amp;#xff0c;而QZ分解的目的是为了求广义的特征值。对于qz(A,B)表示传入两个矩阵A,B&amp;#xff0c;对其进行QZ分解&amp;#xff0c;分解得到6个参数&amp;#xff0c;这六个参数中要满足Q1,Z1为正交矩阵&amp;#xff0c;且满足蓝色框里面的计算&amp;#xff0c;分解出来得到一般的特征向量&amp;#xff0c;用于后期的使用。&lt;br /&gt;同时对于&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;diag&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;U&lt;/span&gt;)./&lt;span class=\"hljs-title\"&gt;diag&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;V&lt;/span&gt;)&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;表示对取矩阵U,V上的对角元素&amp;#xff0c;同时让U的对角元素除以V的对角元素&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["关于#matlab#的问题：第二张图片中蓝色框中间文字怎样理解", ["\n", "源代码关于schur 方法的QZ分解，即把系数矩阵进行分块矩阵的处理。", "第二张图片中蓝色框中间文字怎样理解？", "diag(U)./diag(V)是什么意思？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1、if&amp;#xff08;x&amp;#61;&amp;#61;0&amp;#xff09;&lt;br /&gt;2、printf(&amp;#34;%d &amp;#34;,t); %d后面加个空格&amp;#xff0c;打印的数据好看些&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["我的分解因数的C程序为什么输出是空白？", ["\n", "\n", "问题就是上图", "\n", "\n", "#", "include", " ", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " i = ", "0", ";\n    ", "int", " t = ", "1", ";\n    ", "int", " x = ", "0", ";\n    \n    ", "printf", "(", "\"请输入一个数：\\n\"", ");\n    ", "scanf", "(", "\"%d\"", ",&i);\n    ", "printf", "(", "\"此数的因数有：\\n\"", "); \n    ", "for", "(t=", "1", ";t<=i;++t) {\n        x= i%t;\n        ", "if", "(x=", "0", "){\n            ", "printf", "(", "\"%d\"", ",t);\n        } \n    }\n    \n      ", "return", " ", "0", ";\n      \n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;())\nresult &amp;#61; []\ndef answer_lb(xc):\n    &lt;span class=\"hljs-keyword\"&gt;lb&lt;/span&gt; &amp;#61; []\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,xc):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; xc%i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;lb&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(i)\n            &lt;span class=\"hljs-keyword\"&gt;lb&lt;/span&gt; &amp;#43;&amp;#61; answer_lb(xc//i)\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;lb&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;lb&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(xc)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;lb&lt;/span&gt;\nresult &amp;#61; answer_lb(&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;)\nresult.&lt;span class=\"hljs-keyword\"&gt;sort&lt;/span&gt;()\n# 输出结果&amp;#xff0c;利用&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;()函数将结果按照规定字符串格式输出\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#61;&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(str,result)))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "图的分解", "Question": ["请问各位<将输入的一个正整数分解质因数>得出下图输入输出，我错在哪儿，该怎么改", ["\n", "x", " = ", "int", "(", "input", "())\nresult = []\ndef answer_lb(xc):\n    ", "lb", " = []\n    ", "for", " i in ", "range", "(", "2", ",xc):\n        ", "if", " xc%i == ", "0", ":\n            ", "for", " ", "j", " in ", "range", "(", "2", ",i):\n                ", "if", " i%", "j", " != ", "0", ":\n                    ", "lb", ".", "append", "(i)\n                ", "else", ":\n                    answer_lb(i)\n        ", "else", ":\n            ", "continue", "\n    ", "return", " ", "lb", "\nresult = answer_lb(", "x", ")\nresult.", "sort", "()\n# 输出结果，利用", "map", "()函数将结果按照规定字符串格式输出\n", "print", "(", "x", ",", "'='", ",", "'*'", ".", "join", "(", "map", "(str,result)))\n\n\n\n\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;blockquote&gt;\n&lt;p&gt;回答不易&amp;#xff0c;求求您采纳点赞哦&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;快速峭度图是用来提高窄带瞬态冲击信号分离的精度的一种图形。其中&amp;#xff0c;三个分解频带的谱峭度值分别对应频带[0,1/6]、[1/6,1/3]和[1/3,1/2]。通过使用这种方法来替代传统的二叉树结构分解&amp;#xff0c;可以提高精度。每一层的频带值是通过使用不同的准解析滤波器和高通低通滤波器配置来确定的。&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["快速峭度图怎么看啊！！", ["快速峭度图怎么看啊？", "它的层数为什么是0   1   1.6   2   2.6 这样呀？还有每一层的频带为什么是这样？论文里是下面这样的，我看不懂，有没有人帮我解答以下，谢谢。", "在窄带瞬态冲击信号分离中，二叉树结构分解精度太低，为了提高二叉树结构分解精度，采用通过频率分别为[0,1/6]、[1/6,1/3]和[1/3,1/2]的三个准解析滤波器与上述的高通低通滤波器交替配置，并计算三个分解频带信号的谱峭度值，形成1/3-二叉树结构快速峭度图。", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;请看&amp;#x1f449; &amp;#xff1a;&lt;a href=\"https://blog.csdn.net/csdndouniwan/article/details/87375803?utm_source&amp;#61;csdn_ai_ada_ask_robot\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;Android studio自动创建drawable-xhdpi等文件夹&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "图的分解", "Question": ["Android studio 如何管理 大量图片，drawable中无法建立文件夹吗？", ["虽然已经有许多文件夹：", "drawable", "drawable-v24", "mipmap-anydpi-v26", "mipmap-mdpi", "但是很可惜我用SurfaceView好像不能直接绘制GIF动图，只能将其分解为修列静态图片，使用如下方法绘制：", "\n", "     p_canvas.draw", "Bitmap(Config.", "template_ones", "[", "f_frameIndex", "], ", "f_locationX", ", ", "f_locationY", ", ", "p_paint", ")", ";\n        f_frameIndex = (++f_frameIndex) % ", "55", ";\n\n", "\n", "但是产生了大量的图片！！", "我想比如在drawable文件夹中 建立多个文件夹（即：一个GIF建一个文件夹），但是好像不行，除了有红色波浪线提示错误之外，", "而且R.drawble.还找不到"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\ndef &lt;span class=\"hljs-built_in\"&gt;factor&lt;/span&gt;(n):\n    l &amp;#61; []\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; n &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, n &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n &lt;span class=\"hljs-symbol\"&gt;%&lt;/span&gt; i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n                n &amp;#61; int(n / i)\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n                    l.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(i)\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n                    l.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(i)\n                &lt;span class=\"hljs-built_in\"&gt;break&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;return&lt;/span&gt; l\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;factor&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;45&lt;/span&gt;))\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;factor&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;))\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "图的分解", "Question": ["想问一下这个怎么通过函数的方式实现", ["想问一下这里的这个因式分解要怎么通过上图的这个函数来实现呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff0c;根据你提供的代码和错误信息&amp;#xff0c;可能是由于变量名或函数名错误导致的无法识别错误。&lt;/p&gt;\n&lt;p&gt;首先&amp;#xff0c;出现错误的行中&amp;#xff0c;变量名u_avg_vector可能存在拼写错误。请检查变量名是否正确&amp;#xff0c;并且该变量是否在程序的其他位置正确定义或赋值。&lt;/p&gt;\n&lt;p&gt;另外&amp;#xff0c;代码中也存在其他的语法错误和逻辑错误&amp;#xff0c;例如第一行中R&amp;#61;xfluc&lt;em&gt;xfluc:%1600&lt;/em&gt;1600中的:可能是一个语法错误。在使用注释符号%时&amp;#xff0c;应该将注释放在语句的后面&amp;#xff0c;而不是与语句合并在一起。此外&amp;#xff0c;在第二行中&amp;#xff0c;应该使用lamda而不是landa。&lt;/p&gt;\n&lt;p&gt;为了更好地解决问题&amp;#xff0c;建议提供更多的代码信息和错误信息&amp;#xff0c;或者将完整的代码放在一个单独的脚本中&amp;#xff0c;以便我们更好地了解问题所在并进行修改和调试。&lt;br /&gt;下面是一个修改后的代码片段&amp;#xff0c;你可以参考一下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;pod&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(xfluc, nsnapshots)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;% 计算速度平均值&lt;/span&gt;\nu_avg_vector &amp;#61; &lt;span class=\"hljs-built_in\"&gt;mean&lt;/span&gt;(xfluc, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;); &lt;span class=\"hljs-comment\"&gt;% 按列计算平均值&lt;/span&gt;\navg &amp;#61; &lt;span class=\"hljs-built_in\"&gt;zeros&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(xfluc));\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;j&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(xfluc, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n    avg(:,&lt;span class=\"hljs-built_in\"&gt;j&lt;/span&gt;) &amp;#61; u_avg_vector;\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;% 减去平均值&lt;/span&gt;\nxfluc &amp;#61; xfluc - avg;\n\n&lt;span class=\"hljs-comment\"&gt;% 计算本征正交分解&lt;/span&gt;\nR &amp;#61; xfluc * xfluc&amp;#39;;\n[eigenvector, eigenvalue] &amp;#61; eig(R);\nlamda &amp;#61; &lt;span class=\"hljs-built_in\"&gt;diag&lt;/span&gt;(eigenvalue);\nsum_eigenvalue &amp;#61; sum(lamda);\nenergy &amp;#61; lamda / sum_eigenvalue;\n\n&lt;span class=\"hljs-comment\"&gt;% 选取能量占比达到95%的模态&lt;/span&gt;\nenergy_POD &amp;#61; &lt;span class=\"hljs-number\"&gt;0.95&lt;/span&gt;;\nenergy_process &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; energy_process &amp;lt; energy_POD &amp;amp;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;lt;&amp;#61; nsnapshots\n    energy_process &amp;#61; energy_process &amp;#43; energy(&lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n\n&lt;span class=\"hljs-comment\"&gt;% 计算POD模态&lt;/span&gt;\nu_pod &amp;#61; xfluc&amp;#39; * eigenvector(:,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt;);\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;希望这些修改可以帮助你解决问题。如果还有其他问题&amp;#xff0c;请随时提出。&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["MATLAB中函数或变量无法识别", ["MATLAB中函数或变量无法识别", "对三维速度进行本征正交分解，但是这一个变量无法识别如图", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;def reduceNum(n):\n    \n    &amp;#39;&amp;#39;&amp;#39;策略:求解n的因式分解,首先从2开始到n遍历,\n    如果n%某一个数的结果是整数,则打印出该数,同时n&amp;#61;n/该数\n    直到n&amp;#61;&amp;#61;1结束\n    &amp;#39;&amp;#39;&amp;#39;\n    a&amp;#61;&amp;#39;{} &amp;#61; &amp;#39;.format(n)\n \n    #判断n是否为正整数\n    if not isinstance(n, int) or n &amp;lt;&amp;#61; 0 :\n        print (&amp;#39;请输入一个正确的数字 !&amp;#39;)\n        exit(0)\n        \n    #排除n的值为1 的特殊情况   \n    elif n in [1] :        \n        a&amp;#43;&amp;#61;&amp;#39;{}&amp;#39;.format(n)\n \n    #n的值不为1的正整数   \n    while n not in [1] : # 循环保证递归\n        for temp in range(2, n &amp;#43; 1) :\n            \n            if n % temp &amp;#61;&amp;#61; 0:#更改n的值,同时记录下它的因数并跳出for循环\n                n &amp;#61;int( n/temp)# n 等于 n/temp\n                \n                if n &amp;#61;&amp;#61; 1: #此时n的值大小和因数相同,作为末尾因数\n                    a&amp;#43;&amp;#61;str(temp)\n                    \n                else : # index 一定是因数                    \n                    a&amp;#43;&amp;#61;&amp;#39;{} *&amp;#39;.format(temp)\n                    \n                break\n    print(a)\n            \nreduceNum(999)\nreduceNum(90)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;参考一下&amp;#xff0c;希望对你有帮助&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["麻烦各位大佬帮忙看看", ["【质因数分解】对用户输入的一个大于10的整数进行质因数分解。假设输入符合要求，程序显示该数的质因数分解结果，且各个质因数从小到大排列。", "\n\n", "程序的一次执行过程如下图所示：", "\n\n", "\n\n", "如果用户输入的是一个质数，则程序显示1乘以该数。下图是用户输入一个质数的分解结果：", "\n\n", "\n\n", "程序代码如下：", "\n\n", "#质因数分解", "\n\n", "import math", "\n\n", "x = int(input(\"请输入一个大于10的整数：\"))", "\n\n", "primes =[ ___1___  for p in range(2, x//2+1) if 0 not in[p%d for d in range(2, int(math.sqrt(p))+1)] ]", "\n\n", "factorList = []", "\n\n", "y = x", "\n\n", "for i in primes:", "\n\n", "   while y % i == 0:", "\n\n", "       factorList.append(i) ", "\n\n", "       y = y // i", "\n\n", "if factorList == []:", "\n\n", "   print(\"%d=%d*%d\" % ___2___)", "\n\n", "else:", "\n\n", "   s = \"*\".join( map( ___3___ , factorList) ) ", "\n\n", "   print(\"%d=%s\" % (x,s)) ", "\n\n", "#结束", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "其实更多的考虑是面向对象的特性，一种对现实世界的一种自然模拟，其实在很多时候，一对多 多对多都可以做出来，但是你建模总得有个最佳方案。比如你举的例子\r\nPERSON  1：N   ADDRESS 这其实最直观的对生活中现实模拟，倒不是真的考虑到易用性。", "Konwledge_Point": "图的分解", "Question": ["hibernate文档对于一对多关联的一些疑问", ["[quote]基于外键关联的单向一对多关联是一种很少见的情况，我们不推荐使用它。[/quote]", "\n[quote]我们认为对于这种关联关系最好使用连接表。 [/quote]", "\n\n", "PERSON  1：N   ADDRESS", "\n\n", "ER关系图多对多关系分解为两个一对多关系，没有一对多分解为一对一和一对多。这种推荐的处理方式是如何考虑的呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;本来接口通过底层封装好就是为了方便调用&amp;#xff0c;当然要遵循相应的规则&amp;#xff0c;一千个人有一千种不一样的格式&amp;#xff0c;那怎么读取&amp;#xff1f;所以你要做的就是两件事&amp;#xff0c;第一&amp;#xff1a;找一下资料看看Matlab支不支持读取你这种格式&amp;#xff0c;第二&amp;#xff1a;想办法转成Matlab的格式&amp;#xff0c;比如txt&amp;#xff0c;csv等。有用请采纳&amp;#xff0c;谢谢&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["matlab中自定义格式文件怎么读取", ["问题遇到的现象和发生背景", "\n", "做图像奇异值分解，保存分解后的矩阵为自定义格式，最好不是常见的后缀格式", "\n", "问题相关代码，请勿粘贴截图", "\n", "xiaoye = cat(", "2", ",cramp_lst01,cramp_lst02,cramp_lst03)", ";%这个xiaoye是1063*168的矩阵", "\nsave('xiaoye.svd','xiaoye')", ";", "\n", "\n", "运行结果及报错内容", "\n", "fopen", "(", "'xiaoye.svd'", ")", "\n\nans =\n\n     ", "3", "\n", "\n", "我想要达到的结果", "\n", "读取得到的数据还是xiaoye"]], "Tag": "算法设计"}
{"Answer": "```\r\n select * from user  where userDeviceid in(\r\nSELECT userDeviceid FROM user where channelId='301040' GROUP BY userDeviceid having count(*)&gt;=2\r\n)\r\n```", "Konwledge_Point": "图的分解", "Question": ["MySQL查询求帮助快绝望了", ["所有的查询都在USER表，我分解开了条件，第一个SELECT * FROM USER u WHERE u.", "channelId", "='301040';", "\n 根据查出来userDeviceid的值查，第二条件", "\n 想得到userDeviced字段相同的值大于2条和2条以上所对应的用户", "\n想最终得到，这种数据，每条用户的名字Code不一样,但是userDeviceId是一样的"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/weixin_30920597/article/details/96524904", "Konwledge_Point": "图的分解", "Question": ["关于Database,如何确定架构中的keys，以及是否BCNF，3NF？", ["\n\n", "描述：关于R架构特性A, B, C, D 有以下依赖关系：AB→C, AC→B, B→D, BC→A.", "\n\n", "a. 列出R中所有的keys", "\nb. R是否BCNF，如果不是，把它分解为BCNF关系集", "\nc. R是否3NF，如果不是，把它转为3NF。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个不属于第三范式&amp;#xff0c;在我看来这属于反范式&lt;br /&gt;没有冗余的数据库设计可以做到。但是&amp;#xff0c;没有冗余的数据库未必是最好的数据库&amp;#xff0c;有时为了提高运行效率&amp;#xff0c;就必须降低范式标准&amp;#xff0c;适当保留冗余数据。具体做法是&amp;#xff1a;在概念数据模型设计时遵守第三范式&amp;#xff0c;降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段&amp;#xff0c;允许冗余&amp;#xff0c;达到以空间换时间的目的。&lt;br /&gt;码字不易  望采纳&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["请问该关系为第几范式？", ["如图的关系，约定：同一日期、同一水池ID、同一指标名可以有不同的检测机构ID，也就是（日期，水池ID，指标名，检测机构ID）->值，即日期，水池ID，指标名，检测机构ID是主键，请教各位，这关系是第三范式了吗？", "\n", "如果分解成如下图的两个关系，", "\n", "关系R2的字段“R1_ID”是外键。这么一来，不得不新增一个ID标识，用于R2关联，否则回到图1了。请问我哪里错了"]], "Tag": "算法设计"}
{"Answer": "ORDER BY 字段 nulls last  非MSSQL的语法。\r\n\r\nSELECT * FROM (\r\nSELECT *,\r\n\tCASE WHEN 排序在前的条件 THEN 1  --排序在前的条件\r\n\t WHEN 排序在二的条件 THEN 2 --\t排序在二的条件\t\r\n\t WHEN 排序在二的条件 THEN 3 --\t排序在二的条件\t\r\n\tEND px\r\nFROM RM_RUL_Results )\r\nORDER BY px ASC", "Konwledge_Point": "图的分解", "Question": ["sql server需要把查询结果中的为null的数据放在最后，且为null的字段越少，该数据就越往前", ["在开发过程中，我碰到了一个数据排序的问题，大致情况是在某一张数据表中存在一些数据是空值的情况，显示的时候会比较丑，如图", "\n\n", "因此，我想要对结果进行排序处理，让“不可用设备”、“随机设备”、“敏感性分析”这三个字段中非空的数据优先显示，详细的逻辑可以分解为：", "\n\n", "1.“不可用设备”、“随机设备”、“敏感性分析”都为非空的数据最优先显示", "\n\n", "2.存在两个字段非空，一个字段为空的情形：", "\n\n", "     ①.“不可用设备”、“随机设备”非空，“敏感性分析”为空最优先显示\n     ②.“不可用设备”、“敏感性分析”非空，“随机设备”为空次之\n     ③.“随机设备”、“敏感性分析”非空，“不可用设备”为空最后显示\n", "\n\n", "3.存在一个字段非空，两个字段为空的情形,也分三种情况:", "\n\n", "     ①.“不可用设备非空最优先显示\n     ②.“随机设备”非空次之\n     ③.“敏感性分析”非空最后显示\n", "\n\n", "4.三个字段都为空最后显示", "\n\n", "在这种前提之下，按照字符串排序，那么sql应该怎么写呢", "\n\n", "附上我写的代码，我试过了很多种方法，始终无法实现这种效果，有没有大神能教教我：", "\n\n", "1.SELECT * FROM RM_RUL_Results WHERE 1=1", "\n      ORDER BY components nulls last, random_components nulls last, env nulls last", "\n\n", "我在百度找到的其中一种方法，但是这种方法存在语法错误", "\n\n", "\n\n", "2.SELECT * FROM RM_RUL_Results WHERE 1=1", "\norder by case when components is null then 'zzzzzzzzz' else components end,", "\n            case when random_components is null then 'zzzzzzzzz' else random_components end,", "\n            case when env is null then 'zzzzzzzzz' else env end", "\n\n", "通过case when可以实现对第一个字段“不可用设备”（components）的排序，但是因为优先级的关系，随机设备（random_components）和敏感性分析（env）的空字段会出现在前面", "\n\n", "\n\n", "实在无奈了，有没有大神知道z'm'jie'jue"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;  &lt;span class=\"hljs-title\"&gt;isPrime&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; n &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i * i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n % i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, n;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; n &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;2000&lt;/span&gt; &amp;amp;&amp;amp; n &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt;&amp;#61; n / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;isPrime&lt;/span&gt;(i) &amp;amp;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;isPrime&lt;/span&gt;(n - i)) \n            {\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%-d&amp;#61;%-d&amp;#43;%-d\\n&amp;#34;&lt;/span&gt;, n, i, n - i);&lt;span class=\"hljs-comment\"&gt;//输出&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "图的分解", "Question": ["如何输入若干个任意数，用最简单的方法，好多内容还没学", ["哥德巴赫猜想", "成绩: 5 / 折扣: 0.8", "题面描述：", "如图所示：魔法学院的图书馆珍藏着一份1742年德国中学教师哥德巴赫写给大数学家欧拉的珍贵手稿，这就是世界近代三大数学难题之哥德巴赫猜想。即任何一个大于 6的偶数都可以表示成两个素数之和；任何一个大于9的奇数都可以表示成三个素数之和。 1966年，中国数学家陈景润证明了“任何一个充分大的偶数都可以表示成一个素数与另一个素因子不超过2个的数之和”，简称“1+2”。", "试验证2000以内的正偶数都能够分解为两个素数之和(即验证哥德巴赫猜想对2000以内的正偶数成立)。", "\n", "输入：", "若干个2001以内的正偶数，如上所述。", "\n", "输出：", "标准输出，输出所给正偶数的素数之和，每个占一行，如4=2+2。如果有多种可能，只输出一种，即第一个素数最小的。", "\n", "示例输入：", "4", "6", "8", "\n", "示例输出：", "4=2+2", "6=3+3", "8=3+5", "\n", "测试用例 1    以文本方式显示", "422↵", "1932↵", "1182↵", "86↵", "1880↵", "以文本方式显示", "422=3+419↵", "1932=19+1913↵", "1182=11+1171↵", "86=3+83↵", "1880=3+1877↵", "1秒    无限制    0"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我可以帮你看看程序&amp;#xff0c;我也是研究这方面的。&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["MATLAB  核熵成分分析 KECA 核参数怎么选取以及主元个数怎么计算", ["最近在写KECA的程序，它是对KPCA的一种改进方法，利用Renyi熵来选取主元个数，并将其应用于TE过程进行故障检测，选取TE过程正常训练数据500*52，测试数据960*52，", "\n\n", "但是编程结果一直不对：高斯核参数大一些（100-128左右），计算出来的Renyi熵第一项远远大于其他项，导致主元计算不正确，只有1，但是整体的统计图走向趋势是对的；高斯核函数小一些（3.5-4.5），计算出保留的主元数较为合适（十几到几十不等），但是统计图的趋势完全不对；若是设定大的高斯核参数，自己手动设定合适的保留的主元数（15-27左右），统计图监测效果还行。", "\n\n", "所以怎么才能让设定合适的核参数时计算出合适的主元数？我现在的程序到底哪步出了问题？", "\n\n", " ", "\n\n", "KECA基本原理", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", "程序的整个流程：", "\n\n", "1、导入训练数据X（500*52），计算均值，方差来标准化 ", "\n\n", "2、计算高斯核函数K（500*500），核函数自己设定为128", "\n\n", "\n", "c=128;\nfor i = 1 : X_row\n    for j = 1 : X_row\n        K(i,j) = exp(-(norm(Xtrain(i,:) - Xtrain(j,:)))^2/c^2);%求核矩阵，采用径向基核函数，参数c\n    end\nend", "\n\n", "3、对K直接进行特征值分解（eig）,求解出对应的特征值D和特征向量V，第一个特征值496.8437远远大于第二大的特征向量0.3995。", "\n\n", "做特征值分解的时候是对K做，还是对K/N做？", "求出来的特征向量需要单位化吗？怎么单位化?", "\n\n", "\n", "[V,D]=eig(K);%求特征值和特征向量  \n\nlambda1=diag(D); %对角矩阵 求特征值\n[lambda,index]=sort(real(lambda1),'descend'); %sort 'descend'每行按从大到小排序，lamda为排序后结果，index为索引 按照降序排列\nL1=diag(lambda); %从大到小特征值对角矩阵形式\nVVV=V(:,index);  %按照特征值降序排列的特征向量 N*N\n\nVV=zeros(X_row,X_row);\nfor i=1:X_row\n  VV(:,i) = VVV(:,i)/norm(VVV(:,i));    %特征向量归一化 \nend\n", "\n\n", "4、计算每一项的Renyi熵值（按照熵大小排列，取前npc个特征值特征向量，熵是平方的形式还是不平方的形式？不平方有负值）", "\n\n", "\n", "n0=ones(1,X_row);%1*N 元素全为1\nentropy=zeros(1,X_row);\nfor i = 1 : X_row\n    entropy(i) = lambda(i)*(VV(:,i)'*n0')^2;%求二次熵\n    %entropy(i) =sqrt(lambda(i))*VV(:,i)'*n0';%求熵    \nend", "\n\n", "5、按照Renyi熵值的大小降序排列对应的特征值和特征向量", "\n\n", "\n", "[sorted_entropy,r]=sort(entropy,'descend');%将熵值按降序排列，sorted_entropy是排列后的数组，r是序号\nlamda=lambda(r);%对应于熵降序排列的特征值\nL=diag(lamda);%对应于熵降序排列的特征值对角阵\nP=VV(:,r);%对应于熵降序排列的特征向量", "\n\n", "6、计算Renyi熵值从大到小累计贡献99%的对应的主元个数", "\n\n", "\n", "npc=1;\nwhile sum(sorted_entropy(1:npc))/sum(sorted_entropy)<0.99\n    npc=npc+1; %求保留的主元数\nend", "\n\n", "一般情况下npc=1可以占据99.99%甚至更高的贡献率，但是这种结果是不对的，但是不知道那里不对", "\n\n", "7、利用训练数据计算T2和SPE统计量的控制限", "\n\n", "训练数据主元向量T怎么计算？", "\n\n", "还是", "\n\n", " 计算出训练数据T2和SPE统计量使用核密度估计怎么计算控制限？", "\n\n", "公式怎么使用？x是代表一个样本的T2统计量值吗？", "\n\n", "\n", "%% 计算T2 SPE统计量\nZ_1=inv(sqrt(L))*P'*K'; %N1*N2 \nZ=Z_1';%N2*N1 \nSCORE=K*P; \nZ_ECA_1 =inv(sqrt(L(1:npc,1:npc)))*P(:,1:npc)'*K'; %npc*N2 \nZ_ECA=Z_ECA_1'; %N2*npc \n\n%T2统计量\nfor i=1:X_row\n        T2_1(i)=Z_ECA(i,:)*inv(L(1:npc,1:npc))*Z_ECA(i,:)';   % 1*1\nend\n%T22=diag(Z_ECA*inv(L(1:npc,1:npc))*Z_ECA'); %整体矩阵计算\n\n%Q统计量\nQ_1= sum(Z.^2,2)-sum(Z_ECA.^2 ,2);", "\n\n", "8、CS统计量怎么计算（训练数据的，以及测试数据的）", "\n\n", "\n\n", " CS统计量公式", "\n\n", "\n\n", "\n", "%训练数据CS统计量及控制限计算计算\nPhi_ECA1=sqrt(L(1:npc,1:npc))*P(:,1:npc)'; %npc*N    \nPhi_ECA=Phi_ECA1'; \nSM_ECA=0;\nfor i=1:X_row\n    SM_ECA=SM_ECA+Phi_ECA1(:,i); %npc*1\nend\nM_ECA=SM_ECA/X_row; %npc*1\n\nCS1=zeros(1,X_row);\nfor i=1:X_row\n    CS1(i)=1-M_ECA'*Phi_ECA1(:,i)/(norm(M_ECA')*norm(Phi_ECA1(:,i))); \nend\n\n%利用核密度估计计算控制限\nalpha = 0.99;\n[f,xi] = ksdensity(CS1);\ndelta=xi(2)-xi(1);\nsum_bb=0;\nblock=0;\nfor i=100:-1:1\n    sum_bb=sum_bb+delta*f(i);\n    if sum_bb>(1-alpha) & block==0;\n    bbb=i;\n    block=1;\n    end   \nend\nCSUCL=xi(1)+delta*bbb;\n\n\n\n%测试数据CS统计量\n[K_t] = computeKM(Xtest,Xtrain,c);%求核矩阵，采用径向基核函数，参数c N2*N1\n\nZt_1=inv(sqrt(L))*P'*K_t'; %N1*N2 \nZt=Zt_1';%N2*N1 \nZt_ECA1 =inv(sqrt(L(1:npc,1:npc)))*P(:,1:npc)'*K_t'; %npc*N2 \nZt_ECA=Zt_ECA1'; %N2*npc \n\n\nCS2=zeros(1,Xt_row);\nfor i=1:Xt_row\n      CS2(i)=1-M_ECA'*Zt_ECA1(:,i)/(norm(M_ECA')*norm(Zt_ECA1(:,i))); \nend"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;sym2poly&lt;br /&gt;你是不是拼错了&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["请问一下，这个代码的问题可以怎样解决，结果如图所示", ["请问一下，这个代码的问题可以怎样解决？", "报错结果如图：", "\n", "\n", "clear all\nclose all\n", "derad", "=pi/180;%角度转化为弧度\n", "radeg", "=180/pi;%弧度转化为角度\n", "twpi", "=2*pi;\n", "kelm", "=8;%阵元数\n", "dd", "=0.5;%阵元间距\n", "d", "=0:dd:(kelm-1)*dd;\n", "iwave", "=3;%信源数\ntheta=[10 30 60];%波动方向\n", "snr", "=10;%信噪比\n", "n", "=500;%采样数\n", "A", "=exp(-j*twpi*d.'*sin(theta*derad));%方向向量\n", "S", "=randn(iwave,n);%信源数量\n", "X0", "=A*S;%接受信号\n", "X", "=awgn(X0,snr,'measured');%添加噪声\n", "Rxx", "=X*X'/n;%计算协方差矩阵\n", "InvS", "=inv(Rxx);\n[EVx,Dx]=eig(Rxx);%特征值分解\n", "EVAx", "=diag(Dx)';\n[EVAx,Ix]=sort(EVAx);%特征值从小到大排序\n", "EVAx", "=fliplr(EVAx);%左右翻转，从小到大排序\n", "EVx", "=fliplr(EVx(:,Ix));%对应特征向量排序\n\n", "Unx", "=EVx(:,iwave+1:kelm);\nsyms z\n", "pz", "=z.^([0:kelm-1]", "');\npz1=(z^(-1)).^([0:kelm-1]);\nfz=z.^(kelm-1)*pz1*Unx*Unx'", "*pz;\n", "a", "=sym2ploy(fz);\n", "zx", "=roots(a);\n", "rx", "=zx.';\n[as,ad]=(sort(abs((abs(rx)-1))));\n", "DOAest", "=asin(sort(-angle(rx(ad([1,3,5])))/pi))", "*180", "/pi;\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; java.util.Scanner;\n\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;MyDate&lt;/span&gt; {\n    &lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; year;\n    &lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; month;\n    &lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; day;\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;getYear&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; year;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;setYear&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; year)&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;this&lt;/span&gt;.year &amp;#61; year;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;getMonth&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; month;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;setMonth&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; month)&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;this&lt;/span&gt;.month &amp;#61; month;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;getDay&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; day;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;setDay&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; day)&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;this&lt;/span&gt;.day &amp;#61; day;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;boolean&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;isLeapYear&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; year % &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; year % &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || year % &lt;span class=\"hljs-number\"&gt;400&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;nextDate&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;num&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; getLengthOfMonth(month);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (month &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt; &amp;amp;&amp;amp; day &amp;#61;&amp;#61; num) {\n            year&amp;#43;&amp;#43;;\n            month &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            day &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (day &amp;#61;&amp;#61; num &amp;amp;&amp;amp; month !&amp;#61; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;) {\n            month&amp;#43;&amp;#43;;\n            day &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (day !&amp;#61; num &amp;amp;&amp;amp; month !&amp;#61; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;) {\n            day&amp;#43;&amp;#43;;\n        }\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;getLengthOfMonth&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; month)&lt;/span&gt; {\n        &lt;span class=\"hljs-comment\"&gt;/*判断月份&amp;#xff0c;特殊为2月*/&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num;\n        &lt;span class=\"hljs-keyword\"&gt;switch&lt;/span&gt; (month) {\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;:\n                num &amp;#61; &lt;span class=\"hljs-number\"&gt;31&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n                num &amp;#61; (isLeapYear()) ? &lt;span class=\"hljs-number\"&gt;29&lt;/span&gt; : &lt;span class=\"hljs-number\"&gt;28&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;:\n                num &amp;#61; &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; num;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;inputData&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-comment\"&gt;//创建对象&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;Scanner&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;sc&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Scanner&lt;/span&gt;(System.in);\n        &lt;span class=\"hljs-comment\"&gt;//分别输入年月日&lt;/span&gt;\n        System.out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入年月日&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-type\"&gt;boolean&lt;/span&gt; error;\n        &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n            System.out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入年份&amp;#xff08;1~5000&amp;#xff09;&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            year &amp;#61; sc.nextInt();\n            error &amp;#61; year &amp;lt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || year &amp;gt; &lt;span class=\"hljs-number\"&gt;5000&lt;/span&gt;;\n        } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (error);&lt;span class=\"hljs-comment\"&gt;//若error为true则重新输入年份&lt;/span&gt;\n\n        &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n            System.out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入月份&amp;#xff08;1~12&amp;#xff09;&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            month &amp;#61; sc.nextInt();\n            error &amp;#61; month &amp;lt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || month &amp;gt; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;;\n        } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (error);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;num&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; getLengthOfMonth(month);\n\n        &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n            System.out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入日&amp;#xff08;1~&amp;#34;&lt;/span&gt; &amp;#43; num &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#xff09;:&amp;#34;&lt;/span&gt;);\n            day &amp;#61; sc.nextInt();\n            error &amp;#61; day &amp;lt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || day &amp;gt; num;\n        } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (error);\n\n        &lt;span class=\"hljs-comment\"&gt;/*当输入的年月日都合法之后*/&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;/*特殊为年末和月末*/&lt;/span&gt;\n        System.out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入当前日期&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; year &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &amp;#43; month &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &amp;#43; day);\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; String &lt;span class=\"hljs-title function_\"&gt;getDate&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; year &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &amp;#43; month &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &amp;#43; day;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;getDayOfYear&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;sum&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            sum &amp;#43;&amp;#61; getLengthOfMonth(i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; sum;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "图的分解", "Question": ["关于#java#的问题，如何解决？", ["一．源代码：题目是求当前日期（年月日）的下一天（年月日），源代码已编好。", "\n", "```java\n", "package", " javaexperiment1;\n\n", "//导包", "\n", "import", " java.util.Scanner;\n\n", "public", " ", "class", " ", "NextDate", " {\n\n", "\n", "public", " ", "static", " ", "void", " ", "main", "(", "String", "[] args) {\n    ", "int", " ", "year", ",", "month", ",", "day", ";\n", "\n", "        ", "//创建对象", "\n        Scanner sc = ", "new ", "Scanner", "(System.", "in", ");\n        ", "//分别输入年月日", "\n        System.", "out", ".", "println", "(", "\"请输入年月日\"", ");\n        ", "//接收数据", "\n        ", "/*先定年月日输入值的界限*/", "\n        ", "boolean", " error;\n        do{\n            System.", "out", ".", "println", "(", "\"请输入年份（1~5000）：\"", ");\n            ", "year", " = sc.", "nextInt", "();\n            error = ", "year", "<", "1", " || ", "year", ">", "5000", ";\n        }", "while", "(error);", "//若error为true则重新输入年份", "\n\n            do{\n                System.", "out", ".", "println", "(", "\"请输入月份（1~12）：\"", ");\n                ", "month", " = sc.", "nextInt", "();\n                error = ", "month", "<", "1", " || ", "month", ">", "12", ";\n            }", "while", " (error);\n\n            ", "/*判断月份，特殊为2月*/", "\n        ", "int", " num;\n        ", "switch", " (", "month", "){\n            ", "case", " ", "1", ":\n            ", "case", " ", "3", ":\n            ", "case", " ", "5", ":\n            ", "case", " ", "7", ":\n            ", "case", " ", "8", ":\n            ", "case", " ", "10", ":\n            ", "case", " ", "12", ": num = ", "31", "; ", "break", ";\n            ", "case", " ", "2", ":  num = (", "year", "%", "4", "==", "0", "&&", "year", "%", "100", "!=", "0", " || ", "year", "%", "400", "==", "0", ")? ", "29", ":", "28", "; ", "break", ";\n            ", "default", ": num = ", "30", ";\n        }\n\n        do{\n            System.", "out", ".", "println", "(", "\"请输入日（1~\"", "+ num +", "\"）:\"", ");\n            ", "day", " = sc.", "nextInt", "();\n            error = ", "day", "<", "1", " || ", "day", ">num;\n        }", "while", " (error);\n\n        ", "/*当输入的年月日都合法之后*/", "\n        ", "/*特殊为年末和月末*/", "\n        System.", "out", ".", "println", "(", "\"请输入当前日期：\"", "+ ", "year", " +", "\"-\"", "+ ", "month", " +", "\"-\"", "+ ", "day", ");\n\n\n        ", "if", " (", "month", " == ", "12", " && ", "day", "==num){\n            ", "year", "++;\n            ", "month", " = ", "1", ";\n            ", "day", " = ", "1", ";\n        }\n        ", "else", " ", "if", " (", "day", "==num && ", "month", "!=", "12", "){\n            ", "month", "++;\n            ", "day", " = ", "1", ";\n        }\n        ", "else", " ", "if", " (", "day", "!=num && ", "month", "!=", "12", "){\n            ", "day", "++;\n        }\n\n        System.", "out", ".", "println", "(", "\"下一天日期：\"", "+ ", "year", " +", "\"-\"", "+ ", "month", " +", "\"-\"", "+ ", "day", ");\n\n\n\n\n\n\n\n\n    }\n}\n\n\n", "\n", "\n", "二．题目要求如下（修改已编好的“求下一天年月日的程序”）：", "实验内容 ：    ", "\n", "（1）把实验一的项目文件夹JavaExperiment1复制一份，把新复制的文件夹修改为JavaExperiment3，在IDEA中打开项目文件夹JavaExperiment3，鼠标右键单击项目名称，在弹出的菜单中选择“重构”->\"重命名\"，把项目名称修改为JavaExperiment3，在JavaExperiment3项目中完成本次实验。", "\n", "  (2)  通过IDEA的重构功能把项目的顶层包重命名为javaexperiment3，把NextDate类重命名为MyDate类。", "\n", "  (3)  把原来main方法中完成的功能分解到MyDate类的属性和普通方法中：把变量year、month和day定义成私有的成员变量并定义每个属性的getter方法，定义获取日期的getDate方法，把判断是否是闰年的功能提取到isLeapYear方法中，把获取一个月包含的天数的功能提取到getLengthOfMonth方法中，把输入年月日并对输入的数据进行校验的功能提取到inputData方法中，把计算输入日期的下一个日期的方法提取到nextDate方法中，重构后的MyDate类的UML类图如下图所示：", "\n", "（4）在MyDate类中添加getDayOfYear方法，该方法判断输入的日期是一年中的第几天并返回判断结果。重构的MyDate类的UML类图如下图所示：", "\n", "  （5）在项目包中创建名为Test的测试类，在Test类的main方法中创建MyDate类的对象，通过创建的对象分别调用inputData、nextDate、getDayOfYear、getDate方法完成测试并输出结果。", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你在 heti &amp;#xff08;另外函数名尽量取英文名阿&amp;#xff0c;merge 挺好&amp;#xff09;函数里打印下 left 的值就知道了&amp;#xff0c;加一个 print&lt;/p&gt;", "Konwledge_Point": "图的分解", "Question": ["一个让我非常疑惑的问题，恳请各路大佬抽空帮忙指点一下到底是哪里有问题！", ["小弟先上正确代码", "\n\n", "\n", "#include <stdio.h>\n\n//合体函数 \nvoid heti(int *arr, int *temp, int left, int right, int mid)\n{\n    int i = left;\n    int j = mid + 1;\n    int t = 0;\n    while(i <= mid && j <= right)\n    {\n        if(arr[i] >= arr[j])\n        {\n            temp[t++] = arr[j++];\n        }\n        else\n        {\n            temp[t++] = arr[i++];\n        }\n    }\n    while(i <= mid)\n    {\n        temp[t++] = arr[i++];\n    }\n    while(j <= right)\n    {\n        temp[t++] = arr[j++];\n    }\n    for (i = 0; i < t; i++)\n    {\n        arr[left + i] = temp[i];\n    }\n}\n\n//分开函数 \nvoid fenkai(int *arr, int *temp, int left, int right)\n{\n    if(left < right)\n    {\n        int mid = (left + right) / 2;\n        //向左进行递归分解\n        fenkai(arr, temp, left, mid);\n        fenkai(arr, temp, mid + 1, right); \n        //调用合体函数 \n        heti(arr, temp, left, right, mid);\n    }\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    int arr[n], temp[n];\n    for(int i = 0; i < n; i++)\n    {\n        scanf(\"%d\", &arr[i]);\n    }\n    fenkai(arr, temp, 0, n - 1);\n    for(int i = 0; i < n; i++)\n    {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n} ", "\n\n", "问题描述：该问题是一个数组归并排序的代码，在合体函数的最后要把temp数组的元素全部复制到arr数组，为什么一定要", "arr[left + i] = temp[i]", "，而不能直接用", "arr[i] = temp[i]", "，我寻思我给left赋值就是赋的0啊，而且left的数据也没有变化，为什么两种方法却得到不一样的结果，下面附上两种方案的运行图片（第一个是对的，第二个是错的），跪求大佬告知！！！", "\n\n", "\n\n"]], "Tag": "算法设计"}
{"Answer": "sql语句写的是查询所有，当然不会分页", "Konwledge_Point": "图的分解", "Question": ["jsp分页问题，，，，，，，，，，，，，，，", ["求大神看看   显示列表只有第一页有全部信息，但是页码、上一页、下一页  都有  就是没有内容分页数目正确  但是内容全显示在第一页", "\npackage org.pan.web;", "\nimport java.sql.*;", "\nimport java.util.Vector;", "\nimport org.pan.util.*;", "\nimport javax.servlet.http.HttpServletRequest;", "\nimport org.pan.web.book.shopuser;", "\npublic > private shopuser user = new shopuser(); //新的用户对象", "\nprivate javax.servlet.http.HttpServletRequest request; //建立页面请求", "\nprivate Vector userlist;  //显示用户列表向量数组", "\nprivate int page = 1;   //显示的页码", "\nprivate int pageSize=3;   //每页显示的图书数", "\nprivate int pageCount =0;    //页面总数", "\nprivate long recordCount =0; //查询的记录总数", "\nprivate String message = \"\";    //出错信息提示", "\nprivate String username = \"\";   //注册后返回的用户名", "\nprivate long userid = 0;    //注册后返回的用户ID", "\npublic usermn() throws Exception{", "\nsuper();", "\n}", "\n\n", "public Vector getUserlist() {", "\nreturn userlist;", "\n}", "\n\n", "public String getGbk( String str) {", "\ntry", "\n{", "\nreturn new String(str.getBytes(\"ISO8859-1\"));", "\n}", "\ncatch (Exception e)", "\n{", "\nreturn str;", "\n}", "\n}", "\n\n", "//将页面表单传来的资料分解", "\npublic boolean getRequest(javax.servlet.http.HttpServletRequest newrequest) {", "\nboolean flag = false;", "\ntry", "\n{", "\nrequest = newrequest;", "\nString ID = request.getParameter(\"userid\");", "\nif (ID!=null )", "\n{", "\nuserid = 0;", "\ntry", "\n{", "\nuserid = Long.parseLong(ID);", "\nuser.setId(userid);", "\n}", "\ncatch (Exception e)", "\n{", "\nmessage = message + \"你要修改的用户号出错！\";", "\n}", "\n}   ", "\n\n", "username = request.getParameter(\"username\");", "\nif (username==null || username.equals(\"\"))", "\n{", "\nusername = \"\";", "\nmessage = message + \"用户名为空!\";", "\n}", "\nuser.setUserName(getGbk(username)); ", "\nString password = request.getParameter(\"passwd\");", "\nif (password==null || password.equals(\"\"))", "\n{", "\npassword = \"\";", "\nmessage = message + \"密码为空!\";", "\n}", "\nString pwdconfirm = request.getParameter(\"passconfirm\");", "\nif (!password.equals(pwdconfirm))", "\n{", "\nmessage = message + \"确认密码不相同!\";", "\n}", "\nuser.setPassWord(getGbk(password));", "\nString names = request.getParameter(\"names\");;", "\nif (names==null)", "\n{", "\nnames = \"\";", "\n}", "\nuser.setNames(getGbk(names));", "\nString sex = request.getParameter(\"sex\");", "\nuser.setSex(getGbk(sex));", "\nString address = request.getParameter(\"address\");", "\nif (address == null)", "\n{", "\naddress = \"\";", "\n}", "\nuser.setAddress(getGbk(address));", "\nString post = request.getParameter(\"post\");", "\nif (post == null)", "\n{", "\npost = \"\";", "\n}", "\nuser.setPost(getGbk(post));", "\nString phone = request.getParameter(\"phone\");", "\nif (phone== null)", "\n{", "\nphone = \"\";", "\n}", "\nuser.setPhone(phone);", "\nString email = request.getParameter(\"email\");", "\nif (email == null)", "\n{", "\nemail = \"\";", "\n}", "\nuser.setEmail(getGbk(email));", "\nString IP = request.getRemoteAddr();", "\nuser.setRegIpAddress(IP);", "\nif (message.equals(\"\"))", "\n{", "\nflag = true;", "\n}", "\nreturn flag;", "\n}", "\ncatch (Exception e)", "\n{", "\nreturn flag;", "\n}", "\n}", "\n\n", "public String getSql() {", "\nsqlStr = \"select * from my_users order by id\";", "\nreturn sqlStr;", "\n}", "\n\n", "public boolean execute() throws Exception {", "\nsqlStr = \"select count(*) from my_users\";    //取出记录数", "\nint rscount = pageSize;", "\ntry", "\n{", "\nResultSet rs1 = stmt.executeQuery(sqlStr);", "\nif (rs1.next()) recordCount = rs1.getInt(1);", "\nrs1.close();", "\n}", "\ncatch (SQLException e)", "\n{", "\nclose();", "\nreturn false;", "\n}", "\n//设定有多少pageCount", "\nif (recordCount < 1)", "\n            pageCount = 0;", "\n        else", "\n            pageCount = (int)(recordCount - 1) / pageSize + 1;", "\n//检查查看的页面数是否在范围内", "\nif (page < 1)  ", "\n            page = 1;", "\n        else if (page > pageCount)", "\n            page = pageCount;", "\n\n", "rscount = (int) recordCount % pageSize;  // 最后一页记录数        ", "\n\n", "//sql为倒序取值", "\nsqlStr = \"select * from My_users \";", "\nif (page == 1)", "\n{", "\nsqlStr = sqlStr + \" order by Id desc\";", "\n} else {", "\nsqlStr = sqlStr + \" where Id not in ( select Id from My_users ORDER BY id) and Id in \" +", "\n\"(select Id from My_users ORDER BY ID) \" + \" order by Id desc\";", "\n}", "\ntry", "\n{", "\nrs = stmt.executeQuery(sqlStr);", "\nuserlist = new Vector();", "\nwhile (rs.next()){ ", "\nshopuser user = new shopuser();", "\nuser.setId(rs.getLong(\"Id\"));", "\nuser.setUserName(rs.getString(\"UserName\"));", "\nuser.setPassWord(rs.getString(\"PassWord\"));", "\nuser.setNames(rs.getString(\"Names\"));", "\nuser.setSex(rs.getString(\"Sex\"));", "\nuser.setAddress(rs.getString(\"Address\"));", "\nuser.setPhone(rs.getString(\"Phone\"));", "\nuser.setPost(rs.getString(\"Post\"));", "\nuser.setEmail(rs.getString(\"Email\"));", "\nuser.setRegTime(rs.getString(\"RegTime\"));", "\nuser.setRegIpAddress(rs.getString(\"RegIpAddress\"));", "\nuserlist.addElement(user);", "\n}", "\nrs.close();", "\nreturn true;", "\n}", "\ncatch (SQLException e)", "\n{", "\nSystem.out.println(e);", "\nreturn false;", "\n}", "\n\n", "}", "\n\n", "public boolean insert(HttpServletRequest req) throws Exception {", "\nif (getRequest(req)) {", "\nsqlStr = \"select * from My_users where username = '\" + user.getUserName() +\"'\";", "\nrs = stmt.executeQuery(sqlStr);", "\nif (rs.next())", "\n{", "\nmessage = message + \"该用户名已存在!\";", "\nrs.close();", "\nreturn false;", "\n}", "\nsqlStr = \"insert into my_users (username,password,Names,sex,Address,Phone,Post,Email,RegTime,RegIpaddress) values ('\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getUserName()) + \"','\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getPassWord()) + \"','\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getNames()) + \"','\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getSex()) + \"','\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getAddress()) + \"','\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getPhone()) + \"','\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getPost()) + \"','\";", "\nsqlStr = sqlStr + strFormat.toSql(user.getEmail()) + \"',now(),'\";", "\nsqlStr = sqlStr + user.getRegIpAddress() + \"')\";", "\ntry", "\n{", "\nstmt.execute(sqlStr);", "\nsqlStr = \"select max(id) from My_users where username = '\" +user.getUserName()+ \"'\";", "\nrs = stmt.executeQuery(sqlStr);", "\nwhile (rs.next())", "\n{", "\nuserid = rs.getLong(1);", "\n}", "\nrs.close();", "\nreturn true;", "\n}", "\ncatch (SQLException sqle)", "\n{", "\nreturn false;", "\n}", "\n} else {", "\nreturn false;", "\n}", "\n\n", "}", "\n\n", "public boolean update(HttpServletRequest req) throws Exception {", "\nif (getRequest(req)){", "\nsqlStr = \"update my_users set \";", "\nsqlStr = sqlStr + \"username = '\" + strFormat.toSql(user.getUserName()) + \"',\";", "\nsqlStr = sqlStr + \"password = '\" + strFormat.toSql(user.getPassWord()) + \"',\";", "\nsqlStr = sqlStr + \"Names = '\" + strFormat.toSql(user.getNames()) + \"',\";", "\nsqlStr = sqlStr + \"sex = '\" + strFormat.toSql(user.getSex()) + \"',\";", "\nsqlStr = sqlStr + \"address = '\" + strFormat.toSql(user.getAddress()) + \"',\";", "\nsqlStr = sqlStr + \"phone = '\" + strFormat.toSql(user.getPhone()) + \"',\";", "\nsqlStr = sqlStr + \"post = '\" + strFormat.toSql(user.getPost()) + \"',\";", "\nsqlStr = sqlStr + \"Email = '\" + strFormat.toSql(user.getEmail()) + \"' \";", "\nsqlStr = sqlStr + \" where id = '\" + user.getId() + \"'\";", "\ntry", "\n{", "\nstmt.execute(sqlStr);", "\nreturn true;", "\n}", "\ncatch (SQLException e)", "\n{", "\nreturn false;", "\n}", "\n} else {", "\nreturn false;", "\n}", "\n\n", "}", "\n\n", "public boolean delete( long aid ) throws Exception {", "\n\n", "sqlStr = \"delete from My_users where id = \"  + aid ;", "\ntry", "\n{", "\nstmt.execute(sqlStr);", "\nreturn true;", "\n}", "\ncatch (SQLException e)", "\n{", "\nSystem.out.println(e);", "\nreturn false;", "\n}", "\n}", "\n\n", "public boolean getUserinfo(long newid ) throws Exception {", "\ntry", "\n{", "\nsqlStr=\"select  * from My_users where Id = \" + newid ;", "\nrs = stmt.executeQuery(sqlStr);", "\nuserlist = new Vector();", "\nwhile (rs.next()){ ", "\nuser.setId(rs.getLong(\"Id\"));", "\nuser.setUserName(rs.getString(\"UserName\"));", "\nuser.setPassWord(rs.getString(\"PassWord\"));", "\nuser.setNames(rs.getString(\"Names\"));", "\nuser.setSex(rs.getString(\"Sex\"));", "\nuser.setAddress(rs.getString(\"Address\"));", "\nuser.setPhone(rs.getString(\"Phone\"));", "\nuser.setPost(rs.getString(\"Post\"));", "\nuser.setEmail(rs.getString(\"Email\"));", "\nuser.setRegTime(rs.getString(\"RegTime\"));", "\nuser.setRegIpAddress(rs.getString(\"RegIpAddress\"));", "\nuserlist.addElement(user);", "\n}", "\nrs.close();", "\nreturn true;", "\n}", "\ncatch (SQLException e)", "\n{", "\nreturn false;", "\n}", "\n\n", "}", "\n\n", "public int getPage() {   //显示的页码", "\nreturn page;", "\n}", "\npublic void setPage(int newpage) {", "\npage = newpage;", "\n}", "\n\n", "public int getPageSize(){ //每页显示的图书数", "\nreturn pageSize;", "\n}", "\npublic void setPageSize(int newpsize) {", "\npageSize = newpsize;", "\n}", "\n\n", "public int getPageCount() {  //页面总数", "\nreturn pageCount;", "\n}", "\npublic void setPageCount(int newpcount) {", "\npageCount = newpcount;", "\n}", "\n\n", "public long getRecordCount() {", "\nreturn recordCount;", "\n}", "\npublic void setRecordCount(long newrcount) {", "\nrecordCount= newrcount;", "\n}", "\n\n", "public String getMessage() {", "\nreturn message;", "\n}", "\n\n", "public void setMessage(String msg) {", "\nmessage = msg;", "\n}", "\n\n", "public void setUserid(long uid) {", "\nuserid = uid;", "\n}", "\npublic long getUserid() {", "\nreturn userid;", "\n}", "\n\n", "public void setUserName(String uName) {", "\nusername = uName;", "\n}", "\n\n", "public String getUserName() {", "\nreturn username;", "\n}", "\n};"]], "Tag": "算法设计"}
{"Answer": "&lt;h4 id=\"h4_以下内容部分参考chatgpt模型&amp;#xff1a;_1681128958065\"&gt;以下内容部分参考ChatGPT模型&amp;#xff1a;&lt;/h4&gt;\n&lt;hr /&gt;\n&lt;p&gt;首先需要明确稀疏基和稀疏系数的概念&amp;#xff1a;&lt;br /&gt;稀疏基&amp;#xff1a;一组基底向量&amp;#xff0c;用来表示信号的基础构成&amp;#xff0c;通常使用正交基或者小波基。&lt;br /&gt;稀疏系数&amp;#xff1a;信号在稀疏基下的系数&amp;#xff0c;即用稀疏基去表示信号时各基底向量所占的比例。&lt;/p&gt;\n&lt;p&gt;对于给定的n*1矩阵&amp;#xff0c;我们可以采用傅里叶变换来得到其频域表示&amp;#xff0c;即得到其在正交基下的系数&amp;#xff0c;进而求得其稀疏系数。具体步骤如下&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;对n*1矩阵进行傅里叶变换&amp;#xff0c;得到其频域表示。&lt;/li&gt;&lt;li&gt;选取一组正交基&amp;#xff0c;如离散余弦基&amp;#xff08;DCT&amp;#xff09;、小波基等。&lt;/li&gt;&lt;li&gt;将频域系数投影到正交基上&amp;#xff0c;得到其在正交基下的系数。&lt;/li&gt;&lt;li&gt;对系数进行稀疏化处理&amp;#xff0c;如使用L1范数最小化等方法。&lt;/li&gt;&lt;li&gt;得到稀疏系数&amp;#xff0c;进而得到原信号在稀疏基下的表示。&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;以下是python代码示例&amp;#xff0c;以DCT为例&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; numpy as np\nfrom scipy.fftpack &lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; dct\n\n&lt;span class=\"hljs-comment\"&gt;# 假设有一个10*1的矩阵&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;x&lt;/span&gt; &amp;#61; np.random.rand(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n\n&lt;span class=\"hljs-comment\"&gt;# 进行DCT变换&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;x_dct&lt;/span&gt; &amp;#61; dct(x, &lt;span class=\"hljs-attr\"&gt;type&amp;#61;2,&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;norm&amp;#61;&amp;#39;ortho&amp;#39;)&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 选取前4个DCT基向量作为稀疏基&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;dct_basis&lt;/span&gt; &amp;#61; np.zeros((&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;))\nfor i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;):\n    dct_basis[:, i] &amp;#61; dct(np.eye(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)[:, i], &lt;span class=\"hljs-attr\"&gt;type&amp;#61;2,&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;norm&amp;#61;&amp;#39;ortho&amp;#39;)&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 将频域系数投影到DCT基上&amp;#xff0c;得到其在DCT基下的系数&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;x_sparse&lt;/span&gt; &amp;#61; np.linalg.lstsq(dct_basis, x_dct, &lt;span class=\"hljs-attr\"&gt;rcond&amp;#61;None)[0]&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 对系数进行稀疏化处理&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 这里使用L1范数最小化方法&amp;#xff0c;即Lasso算法&lt;/span&gt;\nfrom sklearn.linear_model &lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; Lasso\n&lt;span class=\"hljs-attr\"&gt;lasso&lt;/span&gt; &amp;#61; Lasso(&lt;span class=\"hljs-attr\"&gt;alpha&amp;#61;0.1)&lt;/span&gt;\nlasso.fit(dct_basis, x_dct)\n&lt;span class=\"hljs-attr\"&gt;x_sparse&lt;/span&gt; &amp;#61; lasso.coef_\n\n&lt;span class=\"hljs-comment\"&gt;# 得到原信号在DCT基下的表示&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;x_rec&lt;/span&gt; &amp;#61; dct_basis &amp;#64; x_sparse\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;需要注意的是&amp;#xff0c;稀疏基的选取需要考虑信号的特点&amp;#xff0c;如能量分布、频率分布等&amp;#xff0c;不同的信号可能需要选取不同的基底。而稀疏化处理的方法也有很多种&amp;#xff0c;如L1范数最小化、L0范数最小化等&amp;#xff0c;需要根据具体情况选择合适的方法。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;h3 id=\"h3_如果我的建议对您有帮助、请点击采纳、祝您生活愉快_1681128958106\"&gt;如果我的建议对您有帮助、请点击采纳、祝您生活愉快&lt;/h3&gt;", "Konwledge_Point": "图的分解", "Question": ["有懂信号学方面知识的朋友吗(标签-矩阵|关键词-傅里叶变换)", ["我有一个n*1的矩阵，现在想用信号学的知识将其分解为稀疏基和稀疏系数，但是有点不清楚方法，网上搜集到的代码是", "\n", "有懂信号学方面知识的朋友吗？能指导我一下吗？图中代码想要采用傅里叶变换。但是我不知道怎么样去得到稀疏基，以及稀疏系数"]], "Tag": "算法设计"}
