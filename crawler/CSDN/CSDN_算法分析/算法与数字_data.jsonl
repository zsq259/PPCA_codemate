{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;name &amp;#61; &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;#34;&lt;/span&gt;)\nN &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;#34;&lt;/span&gt;))\n\ns &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; name:\n    s &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;((&lt;span class=\"hljs-built_in\"&gt;ord&lt;/span&gt;(i) - &lt;span class=\"hljs-number\"&gt;65&lt;/span&gt;) &amp;#43; N)\n    \n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; s !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;100&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(s) &amp;gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n    r &amp;#61; [&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;((&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(s[i]) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(s[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])) % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(s) - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)]\n    s &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;.join(r)\n   \n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(s))\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["Python幸运数字问题 算法求解", ["45、我们经常喜欢说自己的幸运数是多少，但是你认为的幸运数和你的契合度真的那么高吗？其实我们可以通过一段程序来对这点进行一个验证，我们现在有一种很神奇的计算方法：", "第一步： 取出你姓名的缩写，例如，我们上课的珊珊的名字缩写就可以写为SHANSHAN。", "第二步： 将每个字母用数字字符串取代。首先找到一个正整数N表示你的幸运数,之后用N来取代A,N+1来取代 B,N+2 来取代 C,……, N+25来取代Z。例如，如果珊珊觉得他的幸运数字是6，那么N就是6，A就被 6 取代，B 就被7取代，……，Z 则被32取代。上面的例子SHANSHAN则被 24136192413619取代。", "第三步：重复以下操作：将相邻的两位数相加，并写下和的个位数。不难发现这个操作每进行一次，这个数字字符串就会少一位数。当这个数字变成 100 或不超过两位数（第一位是 0 也算两位数）时，这个程序便停止。所得的数字就是你跟你幸运数的契合度。用上面的例子来说，处理的过程如下：", "24136192413619", "6549701654970", "193671719367", "——", "096", "95", "所以如果N为6的话，SHANSHAN跟数字6的契合度高达95！", "相信同学们一定很想知道自己名字和幸运数的契合度吧，你可以尝试着写一个程序，只要输入一个姓名和一个N值，就输出他们的契合度。", "输入格式：", "第一行包括一个仅包含大写字母的姓名字符串", "第二行是一个正整数N", "输出格式：", "一行，输出一个整数，表示契合度。", "输入输出样例：", "输入1:", "DLLSS", "478", "输出1:", "100"]], "Tag": "算法设计"}
{"Answer": "http://blog.chinaunix.net/uid-24683784-id-3061386.html\r\n按照这个算法看，它应该是4个字节32位，也就是8个16进制数", "Konwledge_Point": "算法与数字", "Question": ["ELFHash算法只会生成一个最多8位的数字是吗？", ["不太了解hash算法，ELFHash算法每次都最多返回8位的数值是吗？重复数字的概率大不大？", "\n源码：", "\nlong hash = 0;", "\nlong x = 0;", "\nfor(int i = 0; i < str.length(); i++){", "\nhash = (hash << 4) + str.charAt(i);", "\nif((x = hash & 0xF0000000L) != 0){", "\n\n", "hash ^= (x >> 24);", "\n hash &= ~x;", "\n\n", "}", "\n}", "\nreturn (hash & 0x7FFFFFFF);"]], "Tag": "算法设计"}
{"Answer": "http://blog.sina.com.cn/s/blog_7e1aec770100r4fb.html\r\njava的你自己改改", "Konwledge_Point": "算法与数字", "Question": ["基于优先级的时间片轮转调度算法", ["求一个基于优先级的时间片轮转调度算法。实在是不太会做了，没思路。要求java", "\n要求：", "\n（1）设系统中有n个进程，每个进程PCB格式如下：", "\n进程ID；", "\n进程名称：p1,..., pn；", "\n进程状态：1-运行，2-就绪，3-等待，0-完成；", "\n进程类型：0-系统进程，1-用户进程；", "\n请求资源时刻；", "\n需要的CPU时间；", "\n已运行时间；", "\n优先级：数字小的优先级高；", "\n指向下一进程的指针。", "\n（2）在调度程序运行之前，输入进程名称、所需CPU时间等。", "\n（3）设计4个队列，完成队列，运行队列，就绪队列和等待队列。", "\n（4）调度程序选择就绪队列首进程运行，采用时间片轮转法，输出调度过程。"]], "Tag": "算法设计"}
{"Answer": "做梦。\r\n明文/密文可表示的数量一致（比如三位的数字两边都是1000个），又要可逆，只能一一对应，无论算法再复杂，实质还是置换，把1000个数字都加密一遍，就得到完整的置换表了。", "Konwledge_Point": "算法与数字", "Question": ["求一个可逆的数字加密算法，将固定长度的数字转换为相同长度的数字", ["求一个可逆的数字加密算法，将固定长度的数字转换为相同长度的数字。", "\n比如输入三位的数字就输出一个三位的数字（第一位可以是0），输入4位数字，则输出4位数字", "\n要求具有一定的复杂度，不能是经典的加密算法（置换，移位之类的）"]], "Tag": "算法设计"}
{"Answer": "guess=0\r\na1=0\r\na2=1\r\na3=2\r\na4=3\r\na=[a1,a2,a3,a4]\r\nb1=0\r\nb2=1\r\nb3=2\r\nb4=3\r\nb=[b1,b2,b3,b4]\r\ndef A(guess):\r\nA=0\r\nif a1==b1:\r\nA=A+1\r\nif a2==b2:\r\nA=A+1\r\nif a3==b3:\r\nA=A+1\r\nif a4==b4:\r\nA=A+1\r\nreturn(A)\r\n\r\ndef B(guess):\r\nB=0\r\nfor i in range(0,4):\r\nfor k in range(0,4):\r\nif a[i]==b[k]:\r\nB=B+1\r\nreturn(B)\r\n\r\ne=[i for i in range(1,10000)]\r\nfor i in range(0,9999):\r\nb1=int(e[(9998-i)]/1000)\r\nb2=int((e[(9998-i)]-1000*b1)/100)\r\nb3=int((e[(9998-i)]-1000*b1-100*b2)/10)\r\nb4=int(e[(9998-i)]-1000*b1-100*b2-10*b3)\r\nif b1==b2 or b1==b3 or b1==b4 or b2==b3 or b2==b4 or b3==b4:\r\ndel(e[9998-i])\r\nf=len(e)\r\n\r\ndef number(e):\r\nq=10000\r\np=0\r\nf=len(e)\r\nfor g in range(0,f):\r\nguess=e[g]\r\na1=int(e[g]/1000)\r\na2=int((e[g]-1000*a1)/100)\r\na3=int((e[g]-1000*a1-100*a2)/10)\r\na4=int(e[g]-1000*a1-100*a2-10*a3)\r\na=[a1,a2,a3,a4]\r\nj=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\nfor h in range(0,f):\r\nb1=int(e[h]/1000)\r\nb2=int((e[h]-1000*b1)/100)\r\nb3=int((e[h]-1000*b1-100*b2)/10)\r\nb4=int(e[h]-1000*b1-100*b2-10*b3)\r\nb=[b1,b2,b3,b4]\r\nj[int((B(guess)+1)*B(guess)/2+A(guess))]=j[int((B(guess)+1)*B(guess)/2+A(guess))]+1\r\nif q&gt;max(j):\r\nq=max(j)\r\np=e[g]\r\nreturn(p)\r\n\r\nfor i in range(1,8):\r\nif i ==1:\r\nprint('第',i,'轮')\r\nprint('电脑给出的数字是')\r\nprint(e[0])\r\nc=int(input('数字与位置都猜对的数量'))\r\nd=int(input('猜对数字的数量'))\r\nif (c==4):\r\nbreak\r\na1=int(e[0]/1000)\r\na2=int((e[0]-1000*a1)/100)\r\na3=int((e[0]-1000*a1-100*a2)/10)\r\na4=int(e[0]-1000*a1-100*a2-10*a3)\r\na=[a1,a2,a3,a4]\r\nfor k in range(0,f):\r\nguess=e[f-1-k]\r\nb1=int(guess/1000)\r\nb2=int((guess-1000*b1)/100)\r\nb3=int((guess-1000*b1-100*b2)/10)\r\nb4=int(guess-1000*b1-100*b2-10*b3)\r\nb=[b1,b2,b3,b4]\r\nif A(guess)!=c or B(guess)!=d:\r\ndel(e[f-1-k])\r\nf=len(e)\r\nif i&gt;1:", "Konwledge_Point": "算法与数字", "Question": ["猜数字python代码，画流程图，关键地方的流程图即可", ["guess=0", "\na1=0", "\na2=1", "\na3=2", "\na4=3", "\na=[a1,a2,a3,a4]", "\nb1=0", "\nb2=1", "\nb3=2", "\nb4=3", "\nb=[b1,b2,b3,b4]", "\ndef A(guess):", "\n    A=0", "\n    if a1==b1:", "\n        A=A+1", "\n    if a2==b2:", "\n        A=A+1", "\n    if a3==b3:", "\n        A=A+1", "\n    if a4==b4:", "\n        A=A+1", "\n    return(A)", "\n\n", "def B(guess):", "\n    B=0", "\n    for i in range(0,4):", "\n        for k in range(0,4):", "\n            if a[i]==b[k]:", "\n                B=B+1", "\n    return(B)", "\n\n", "e=[i for i in range(1,10000)]", "\nfor i in range(0,9999):", "\n    b1=int(e[(9998-i)]/1000)", "\n    b2=int((e[(9998-i)]-1000*b1)/100)", "\n    b3=int((e[(9998-i)]-1000*b1-100*b2)/10)", "\n    b4=int(e[(9998-i)]-1000*b1-100*b2-10*b3)", "\n    if b1==b2 or b1==b3 or b1==b4 or b2==b3 or b2==b4 or b3==b4:", "\n        del(e[9998-i])", "\n    f=len(e)", "\n\n", "def number(e):", "\n    q=10000", "\n    p=0", "\n    f=len(e)", "\n    for g in range(0,f):", "\n        guess=e[g]", "\n        a1=int(e[g]/1000)", "\n        a2=int((e[g]-1000*a1)/100)", "\n        a3=int((e[g]-1000*a1-100*a2)/10)", "\n        a4=int(e[g]-1000*a1-100*a2-10*a3)", "\n        a=[a1,a2,a3,a4]", "\n        j=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]", "\n        for h in range(0,f):", "\n            b1=int(e[h]/1000)", "\n            b2=int((e[h]-1000*b1)/100)", "\n            b3=int((e[h]-1000*b1-100*b2)/10)", "\n            b4=int(e[h]-1000*b1-100*b2-10*b3)", "\n            b=[b1,b2,b3,b4]", "\n            j[int((B(guess)+1)*B(guess)/2+A(guess))]=j[int((B(guess)+1)*B(guess)/2+A(guess))]+1", "\n        if q>max(j):", "\n            q=max(j)", "\n            p=e[g]", "\n    return(p)", "\n\n", "for i in range(1,8):", "\n    if i ==1:", "\n        print('第',i,'轮')", "\n        print('电脑给出的数字是')", "\n        print(e[0])", "\n        c=int(input('数字与位置都猜对的数量'))", "\n        d=int(input('猜对数字的数量'))", "\n        if (c==4):", "\n            break", "\n        a1=int(e[0]/1000)", "\n        a2=int((e[0]-1000*a1)/100)", "\n        a3=int((e[0]-1000*a1-100*a2)/10)", "\n        a4=int(e[0]-1000*a1-100*a2-10*a3)", "\n        a=[a1,a2,a3,a4]", "\n        for k in range(0,f):", "\n            guess=e[f-1-k]", "\n            b1=int(guess/1000)", "\n            b2=int((guess-1000*b1)/100)", "\n            b3=int((guess-1000*b1-100*b2)/10)", "\n            b4=int(guess-1000*b1-100*b2-10*b3)", "\n            b=[b1,b2,b3,b4]", "\n            if A(guess)!=c or B(guess)!=d:", "\n                 del(e[f-1-k])", "\n        f=len(e)", "\n    if i>1:", "\n\n", "    print('第',i,'轮')\n    print('电脑给出的数字是')\n    print(number(e))\n    c=int(input('数字与位置都猜对的数量'))\n    d=int(input('猜对数字的数量'))\n    if (c==4):\n        break\n    a1=int(number(e)/1000)\n    a2=int((number(e)-1000*a1)/100)\n    a3=int((number(e)-1000*a1-100*a2)/10)\n    a4=int(number(e)-1000*a1-100*a2-10*a3)\n    a=[a1,a2,a3,a4]\n    for k in range(0,f):\n        guess=e[f-1-k]\n        b1=int(guess/1000)\n        b2=int((guess-1000*b1)/100)\n        b3=int((guess-1000*b1-100*b2)/10)\n        b4=int(guess-1000*b1-100*b2-10*b3)\n        b=[b1,b2,b3,b4]\n        if A(guess)!=c or B(guess)!=d:\n            del(e[f-1-k])\n\n    f=len(e)\n"]], "Tag": "算法设计"}
{"Answer": "取决于加密函数需要什么类型，openssl一般都是要求byte数组。你的十六进制很好转换", "Konwledge_Point": "算法与数字", "Question": ["关于C++的RSA算法。求教", ["公钥私钥不用自己生成，公钥已经有了，要对一段随机数进行公钥加密。", "\n问题1：如果公钥是一段数据，比如：“123A123A123F13123F123F123F12F1F1FFF”这样的16进数据，在调用RSA_PUBLIC_ENTRYCPT时，如何将公钥赋给函数？这段公钥要转成什么类型啊？", "\n问题2：对于要加密的数据，比如一串16进制数据“F12F45F123A123F123FFF2FF1FF”.这样的，这段数据也是如何传给函数啊？要转成什么类型吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\nimport random\n&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[random.randint(1,100) for n in range(100)]&lt;/span&gt;\n&lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[n for n in a if n&amp;gt;&amp;#61;90]&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;大于等于90的有&amp;#xff1a;&amp;#39;&lt;/span&gt;,len(b)&lt;/span&gt;&lt;/span&gt;)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(sum(a)&lt;/span&gt;&lt;/span&gt;,sum(b))\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(sum(a)&lt;/span&gt;&lt;/span&gt;/len(a),sum(b)/len(b))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/917345912046172.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["使用Python设计算法，计算100个元素的一维数组，分别统计其中大于等于90的个数，并求和与平均值。", ["使用Python设计算法，计算100个元素的一维数组，分别统计其中大于等于90的个数，并求和与平均值。"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;What you're looking for is called a &lt;strong&gt;selection algorithm&lt;/strong&gt;. The Wikipedia page on the subject has a few subsections in the &lt;a href=\"http://en.wikipedia.org/wiki/Selection_algorithm#Selecting_k_smallest_or_largest_elements\" rel=\"nofollow noreferrer\"&gt;selecting &lt;em&gt;k&lt;/em&gt; smallest or largest elements&lt;/a&gt; section. When the list is large enough, you can &lt;em&gt;beat&lt;/em&gt; the time required for the naive \"sort the whole list and choose the first 10\" algorithm.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "算法与数字", "Question": ["收集最低数字算法", ["\n\n", "I'm looking for an algorithm (or PHP code, I suppose) to end up with the 10 lowest numbers from a group of numbers. I was thinking of making a ten item array, checking to see if the current number is lower than one of the numbers in the array, and if so, finding the highest number in the array and replacing it with the current number. ", "\n\n", "However, I'm planning on finding the lowest 10 numbers from thousands, and was thinking there might be a faster way to do it. I plan on implementing this in PHP, so any native PHP functions are usable.", "\n    "]], "Tag": "算法设计"}
{"Answer": "将 数组 int[] arr={35,47,26,18,14,35,98,52,48,23,49,32} 进行 由大到小的排序，\r\n那么 从头遍历 累计，累加和 第一大于350 的数据 即符合条件的数据。", "Konwledge_Point": "算法与数字", "Question": ["java数据结构算法问题，几个数相加得到满足条件的最小和", ["我假设一种情况吧：", "\nint[] arr={35,47,26,18,14,35,98,52,48,23,49,32}", "\n假如我需要一个数：360", "\n我现在想知道，上面数组里面的哪几个数相加能大于350", "\n但是所有加起来大于350的组合里数据个数是最少的", "\n需要算法优化，遍历所有情况耗费太大"]], "Tag": "算法设计"}
{"Answer": "```\r\n 不需要9层循环，只需要两层循环\r\n思路（C伪代码）\r\nint arr[3][3];\r\nsum = arr[0][1]+arr[0][2]+arr[0][3];\r\nfor (i = 1; i &lt; 3; i++)\r\n{\r\nsum1 = 0;\r\nfor (int j=1;j&lt;3;j++)\r\n{\r\nsum1 += arr[i][j];\r\n}\r\nif sum1 != sum return false;\r\n}\r\nfor (i = 1; i &lt; 3; i++)\r\n{\r\nsum1 = 0;\r\nfor (int j=1;j&lt;3;j++)\r\n{\r\nsum1 += arr[j][i];\r\n}\r\nif sum1 != sum return false;\r\n}\r\nsum1 = 0;\r\nfor (int j=1;j&lt;3;j++)\r\n{\r\nsum1 += arr[j][j];\r\n}\r\nif sum1 != sum return false;\r\nsum1 = 0;\r\nfor (int j=1;j&lt;3;j++)\r\n{\r\nsum1 += arr[j][3-j];\r\n}\r\nif sum1 != sum return false;\r\n```", "Konwledge_Point": "算法与数字", "Question": ["用php代码，这一个九宫格", ["使得九宫格的横竖斜的三个球相加都相等。注意：不要九层for的循环套用。"]], "Tag": "算法设计"}
{"Answer": "你要自己解密的话，还是算了吧！我当初也是找这种对比法来解密，只有两组情况是没办法导出第三种的。这是防止人为解密！加密方式必须一样，而且需要的明文和密码必须准确，组数量够多，才能找到准确的加密方法。建议放弃吧！", "Konwledge_Point": "算法与数字", "Question": ["一串数字是如何加密/混淆 得到如下密文的？", ["明文是由数字组成的字符串 如", "\n\n", "明文是由数字组成的字符串 如明文是由数字组成的字符串 如明文是由数字组成的字符串 如明文是由数字组成的字符串 如"]], "Tag": "算法设计"}
{"Answer": "程序很长，基本没人会给你调试找错误的。会花费很长时间。\r\n建议你自己学会调试程序，掌握设置断点，查看变量，单步执行等手段。\r\n怀疑是哪里出了问题，就单步执行去试试。", "Konwledge_Point": "算法与数字", "Question": ["c语言扫雷算法有问题求助", ["自己写了个控制台的扫雷", "\n输入坐标然后显示地图", "\n但是输入某些坐标的时候卡住不动了 不知道是陷入死循环还是什么问题", "\n求大神解答         已考虑无雷区自动翻开的死循环  可能是双击时陷入死循环 但看不出是不是这个问题 不知道怎么修改代码", "\n\n", "#include ", "\n#include ", "\n#include ", "\n#include ", "\n\n", "#define len 20                          //边数", "\nint mine[len+2][len+2] = {0};                 //+2是为了在计算周围一圈雷数时不必分四周顶点边界区域，不越界", "\nint dispMine[len+2][len+2] = {0};          //记录当前格子状态：0为未点开、1为已点开、2为双击、3为插旗、4为周围一圈无雷自动翻开", "\nint endindex = 0;                     //点击到地雷的结束标志", "\nint mines = 0;                       //记录已排除的地雷数", "\n\n", "void SetMine(int n)        //布雷", "\n{", "\n    srand(time(0));", "\n    int k, row, col;", "\n    if(n == 1)             //初级难度", "\n        k = 25;", "\n    else if(n == 2)         //中级难度", "\n        k = 50;", "\n    else                   //高级难度", "\n        k = 75;", "\n    mines = k;", "\n    while(k)", "\n    {", "\n        row = rand() % len + 1;              //+1是为了将地雷分布在除四边以外的区域     显示地图时实际只显示中间部分 不显示四周", "\n        col = rand() % len + 1;", "\n        if(!mine[row][col])", "\n        {", "\n            mine[row][col] = 9;", "\n            k--;", "\n        }", "\n    }", "\n}", "\n\n", "void round(int mine[][len+2], int x, int y)", "\n{", "\n    int k = 0;   //地雷数", "\n    if(mine[x][y] == 9 && dispMine[x][y] != 3)  //点击到地雷", "\n        endindex++;", "\n    else ", "\n    {", "\n        if(mine[x][y+1] == 9)             //计算周围一圈是否有雷", "\n            k++;", "\n        if(mine[x+1][y+1] == 9)", "\n            k++;", "\n        if(mine[x+1][y] == 9)", "\n            k++;", "\n        if(mine[x+1][y-1] == 9)", "\n            k++;", "\n        if(mine[x][y-1] == 9)", "\n            k++;", "\n        if(mine[x-1][y-1] == 9)", "\n            k++;", "\n        if(mine[x-1][y] == 9)", "\n            k++;", "\n        if(mine[x-1][y+1] == 9)", "\n            k++;", "\n        mine[x][y] = k;                  //记录当前位置地雷数", "\n    }", "\n\n", "}", "\n\n", "void open(int mine[][len+2], int x, int y)           //翻开", "\n{", "\n    if(mine[x][y] == 9)                          //点击到雷直接返回", "\n        return;", "\n    if(dispMine[x][y] == 3)                //输入坐标位置为插旗的位置", "\n        return;", "\n    if(mine[x][y] == 0)                    //无雷区自动翻开", "\n    { ", "\n        dispMine[x][y] = 4;                 //无雷区标志为4", "\n        if(x != 1 && y != 1)                //考虑各个特殊位置的坐标", "\n        {", "\n            round(mine, x-1, y-1);", "\n            if(!mine[x-1][y-1] && dispMine[x-1][y-1] != 4)            //若无雷自动翻开区域里又有无雷区 继续自动翻开 为了防止死循环", "\n                open(mine, x-1, y-1);                                                                          //要标志已翻开的", "\n            else if(mine[x-1][y-1] && !dispMine[x-1][y-1])       //若是周围一周有雷的，则直接显示，标志为1", "\n                dispMine[x-1][y-1] = 1;", "\n        }", "\n        if(x != 1 && y != len)", "\n        {", "\n            round(mine, x-1, y+1);", "\n            if(!mine[x-1][y+1] && dispMine[x-1][y+1] != 4)", "\n                open(mine, x-1, y+1);", "\n            else if(mine[x-1][y+1] && !dispMine[x-1][y+1])", "\n                dispMine[x-1][y+1] = 1;", "\n        }", "\n        if(x != len && y != 1)", "\n        {", "\n            round(mine, x+1, y-1); ", "\n            if(!mine[x+1][y-1] && dispMine[x+1][y-1] != 4)", "\n                open(mine, x+1, y-1);", "\n            else if(mine[x+1][y-1] && !dispMine[x+1][y-1])", "\n                dispMine[x+1][y-1] = 1;", "\n        }", "\n        if(x != len && y != len)", "\n        {", "\n            round(mine, x+1, y+1);", "\n            if(!mine[x+1][y+1] && dispMine[x+1][y+1] != 4)", "\n                open(mine, x+1, y+1);", "\n            else if(mine[x+1][y+1] && !dispMine[x+1][y+1])", "\n                dispMine[x+1][y+1] = 1;", "\n        }", "\n        if(x != 1)", "\n        {", "\n            round(mine, x-1, y);", "\n            if(!mine[x-1][y] && dispMine[x-1][y] != 4)", "\n                open(mine, x-1, y);", "\n            else if(mine[x-1][y] && !dispMine[x-1][y])", "\n                dispMine[x-1][y] = 1;", "\n        }", "\n        if(x != len)", "\n        {", "\n            round(mine, x+1, y);", "\n            if(!mine[x+1][y] && dispMine[x+1][y] != 4)", "\n                open(mine, x+1, y);", "\n            else if(mine[x+1][y] && !dispMine[x+1][y])", "\n                dispMine[x+1][y] = 1;", "\n        }", "\n        if(y != 1)", "\n        {", "\n            round(mine, x, y-1);", "\n            if(!mine[x][y-1] && dispMine[x][y-1] != 4)", "\n                open(mine, x, y-1);", "\n            else if(mine[x][y-1] && !dispMine[x][y-1])", "\n                dispMine[x][y-1] = 1;", "\n        }", "\n        if(y != len)", "\n        {", "\n            round(mine, x, y+1);", "\n            if(!mine[x][y+1] && dispMine[x][y+1] != 4)", "\n                open(mine, x, y+1);", "\n            else if(mine[x][y+1] && !dispMine[x][y+1])", "\n                dispMine[x][y+1] = 1;", "\n        }", "\n    }", "\n    if(dispMine[x][y] = 2)           //如果双击", "\n    {", "\n        dispMine[x][y] = 1;             //置为已点击防止死循环", "\n        int flag = 0;                  //记录周围一周插旗数", "\n        if(dispMine[x-1][y] == 3)            //若周围有旗子，flag++", "\n            flag++;", "\n        if(dispMine[x-1][y+1] == 3)", "\n            flag++;", "\n        if(dispMine[x][y+1] == 3)", "\n            flag++;", "\n        if(dispMine[x+1][y+1] == 3)", "\n            flag++;", "\n        if(dispMine[x+1][y] == 3)", "\n            flag++;", "\n        if(dispMine[x+1][y-1] == 3)", "\n            flag++;", "\n        if(dispMine[x][y-1] == 3)", "\n            flag++;", "\n        if(dispMine[x-1][y-1] == 3)", "\n            flag++;", "\n        if(mine[x][y] == flag)            //双击的当前位置插旗数与该位置地雷数相同时自动翻开周围一圈未点击的位置", "\n        {", "\n            if(y != len && dispMine[x][y+1] == 0)        //考虑各个特殊位置防止越界以及是否为未翻开位置", "\n            {", "\n                round(mine, x, y+1);", "\n                dispMine[x][y+1] = 1;", "\n                if(!mine[x][y+1])                  //若翻开为无雷区则递归调用", "\n                    open(mine, x, y+1);", "\n            }", "\n            if(x != len && y != len && dispMine[x+1][y+1] == 0)", "\n            {", "\n                round(mine, x+1, y+1);", "\n                dispMine[x+1][y+1] = 1;", "\n                if(!mine[x+1][y+1])", "\n                    open(mine, x+1, y+1);", "\n            }", "\n            if(x != len && dispMine[x+1][y] == 0)", "\n            {", "\n                round(mine, x+1, y);", "\n                dispMine[x+1][y] = 1;", "\n                if(!mine[x+1][y])", "\n                    open(mine, x+1, y);", "\n            }", "\n            if(x != len && y != 1 && dispMine[x+1][y-1] == 0)", "\n            {", "\n                round(mine, x+1, y-1); ", "\n                dispMine[x+1][y-1] = 1;", "\n                if(!mine[x+1][y-1])", "\n                    open(mine, x+1, y-1);", "\n            }", "\n            if(y != 1 && dispMine[x][y-1] == 0)", "\n            {", "\n                round(mine, x, y-1);", "\n                dispMine[x][y-1] = 1;", "\n                if(!mine[x][y-1])", "\n                    open(mine, x, y-1);", "\n            }", "\n            if(x != 1 && y != 1 && dispMine[x-1][y-1] == 0)", "\n            {", "\n                round(mine, x-1, y-1);", "\n                dispMine[x-1][y-1] = 1;", "\n                if(!mine[x-1][y-1])", "\n                    open(mine, x-1, y-1);", "\n            }", "\n            if(x != 1 && dispMine[x-1][y] == 0)", "\n            {", "\n                round(mine, x-1, y);", "\n                dispMine[x-1][y] = 1;", "\n                if(!mine[x-1][y])", "\n                    open(mine, x-1, y);", "\n            }", "\n            if(x != 1 && y != len && dispMine[x-1][y+1] == 0)", "\n            {", "\n                round(mine, x-1, y+1);", "\n                dispMine[x-1][y+1] = 1;", "\n                if(!mine[x-1][y+1])", "\n                    open(mine, x-1, y+1);", "\n            }", "\n        }", "\n    }", "\n\n", "}", "\n\n", "void chaqi(int x, int y)           //插旗", "\n{", "\n    if(dispMine[x][y] == 3)      //已经插旗的位置再次插旗视为取消插旗", "\n    {", "\n        dispMine[x][y] = 0;       //置为0表示未点击区域", "\n        return;", "\n    }", "\n    else if(dispMine[x][y])        //若该位置已点开则不改变", "\n        return;", "\n    dispMine[x][y] = 3;     //插旗标志为3", "\n\n", "}", "\n\n", "void disp(int x, int y)           //显示地图", "\n{", "\n    cout<<\"  \";", "\n    for(int k = 1; k < len+1; k++)", "\n        cout<<setw(2)<<k;", "\n    cout<<endl;", "\n    if(mine[x][y] == 9 && dispMine[x][y] != 3)           //如果点到地雷", "\n    {", "\n        for(int i = 1; i < len+1; i++)", "\n        {", "\n            cout<<setw(2)<<i;", "\n            for(int j = 1; j < len+1; j++)", "\n            {", "\n                if(dispMine[i][j] == 3)              //插旗的地方显示为■", "\n                    cout<<\"■\";", "\n                else if(mine[i][j] == 9)             //有雷的地方显示为*", "\n                    cout<<\" *\";", "\n                else if(dispMine[i][j])            //无雷区显示数字", "\n                    cout<<\" \"<<mine[i][j];", "\n                else                                  //未翻开的地方显示为□", "\n                    cout<<\"□\";", "\n            }", "\n            cout<<endl;", "\n        }", "\n        return;", "\n    }", "\n\n", "for(int i = 1; i < len+1; i++)           //没有点击到地雷\n{   \n    cout<<setw(2)<<i;\n    for(int j = 1; j < len+1; j++)\n    {\n        if(dispMine[i][j] == 3)\n            cout<<\"■\";\n        else if(dispMine[i][j])\n            cout<<\" \"<<mine[i][j];\n        else\n            cout<<\"□\";\n    }\n    cout<<endl;\n}\nreturn;\n", "\n\n", "}", "\n\n", "bool win(int mines)            //判断胜利条件", "\n{ ", "\n    bool win = false;      //默认为没有取得胜利", "\n    int noFlag = 0, yesFlag = 0, halfFlag = 0;        //noFlag记录未翻开的格子数 yesFlag、halfFlag记录插旗数且该位置有雷  noClip", "\n    for(int i = 1; i < len+1; i++)", "\n        for(int j = 1; j < len+1; j++)", "\n        {", "\n\n", "        if(dispMine[i][j] == 0 )         //未翻开位置\n            noFlag++;\n        if(dispMine[i][j] == 3 && mine[i][j] == 9)        //插旗位置正确\n        {\n            yesFlag++;\n            halfFlag++;\n        }\n    }\nif(noFlag == mines || (yesFlag == mines && !noFlag) || halfFlag == len*len - noFlag) //未翻开的格子数等于地雷数 插旗数等于地雷数 \n    win = true;                                                                //插旗与未翻开格子数等于地雷数\nreturn win;   \n", "\n\n", "}", "\nvoid main()", "\n{", "\n    int x = 0, y = 0;", "\n    cout<<\"请选择游戏难度,1.初级 2.中级 3.高级:\";", "\n    int rank = 0;", "\n    while(1)", "\n    {", "\n        cin>>rank;", "\n        if(rank < 1 || rank > 3)", "\n            cout<<\"输入有误，请重新输入：\";", "\n        else", "\n        {", "\n            system(\"CLS\");", "\n            break;", "\n        }", "\n    }", "\n    SetMine(rank);", "\n    disp(x, y);", "\n    while(1)", "\n    {", "\n        cout<<\"1.点击  2.插旗  3.双击\"<\n        cout\n        int n;", "\n        while(1)", "\n        {", "\n            cin>>n;", "\n            cin>>x>>y;", "\n            if(n < 1 || n > 3)", "\n            {", "\n                cout<<\"输入有误，请重新输入：\";", "\n                continue;", "\n            }", "\n            else if(x < 1 || x > 20 || y < 1 || y > 20)", "\n            {", "\n                cout<<\"输入有误，请重新输入：\";", "\n                continue;", "\n            }", "\n            break;", "\n        }", "\n\n", "    if(n == 1 || n == 3)\n    {\n        if(n == 3 && dispMine[x][y] == 3)\n            continue;\n        round(mine, x, y);\n        if(dispMine[x][y] < 2)\n            dispMine[x][y]++;       \n        open(mine, x, y);\n\n    }\n    else if(n == 2)\n        chaqi(x, y);\n\n    system(\"CLS\");\n    disp(x, y);\n    if(endindex)\n    {\n        cout<<\"你输了！\"<<endl;\n        break;\n    }   \n    if(win(mines))\n    {\n        cout<<\"你赢了！\"<<endl;\n        break;\n    }\n}\n", "\n\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/744690029336126.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["算法 一个特殊的数字 怎么缩短运行时间", ["一个特殊的数字，可以分成左右两部分，并且左右两部分相同，如11，2020。但202，2112不算特殊的数。求1到n中有多少个特殊的数", "输入:n", "案例:", "输入22", "输出:2", "因为11，22是特殊的数", "范围n≤1e19"]], "Tag": "算法设计"}
{"Answer": "https://www.92to.com/xuexi/2017/03-04/18054845.html", "Konwledge_Point": "算法与数字", "Question": ["自我复制数字的程序，这个算法怎么用C语言", ["Problem Description", "\nSherlock is fond of playing with numbers. Two days ago he discovered that 9376^2 = 87909376 - the last four digits constitute 9376 again. He called such numbers self-replicating.", "\n\n", "More precisely, an n-digit number is called self-replicating if it is equal to the number formed by the last n digits of its square. Now Sherlock often asks Xay to help him to find new such numbers. To make the things worse, Sherlock already knows what the scales of notation are, so he asks Xay to find, for example, hexadecimal or binary self-replicating numbers.", "\n\n", "Xay wants to help Sherlock, but unfortunately he is very busy now: he is seriously preparing and training for the next ACM Regional Contest. So he asked you to write a program that for a given base b and length n will find all n-digit self-replicating numbers in the scale of notation with base b.", "\n\n", "Input", "\nthere are multiple test cases. one line of each test case contains two integer numbers b and n separated by a single space, the base b of the scale of notation (2 ≤ b ≤ 36) and the required length n (1 ≤ n ≤ 2000).", "\n\n", "Output", "\nFor eacho test case, the first line contains K - the total number of self-replicating numbers of length n in base b. Next K lines contain one n-digit number in base b each. Uppercase Latin letters from A to Z must be used to represent digits from 10 to 35. The self-replicating numbers should be output int lexicographic order.", "\n\n", "Sample Input", "\n2 1", "\n10 4", "\n\n", "Sample Output", "\n2", "\n0", "\n1", "\n1", "\n9376"]], "Tag": "算法设计"}
{"Answer": "java 写的, 其实就是递归....\r\n\r\npackage demo;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author yeyong\r\n */\r\npublic class Test24 {\r\n\r\n  public static void main(String args[]) {\r\n    int a = 100;\r\n    int b = 200;\r\n    int c = 300;\r\n\r\n    String A = \"a+b\"; // 300\r\n    String B = \"A+b\"; // 500\r\n    String C = \"A+B\"; // 800\r\n    String D = \"C+A+b\"; // 1300\r\n\r\n    Map&lt;String, Object&gt; context = new HashMap&lt;String, Object&gt;();\r\n    context.put(\"a\", a);\r\n    context.put(\"b\", b);\r\n    context.put(\"c\", c);\r\n    context.put(\"A\", A);\r\n    context.put(\"B\", B);\r\n    context.put(\"C\", C);\r\n    context.put(\"D\", D);\r\n\r\n    System.out.println(\"D = \" + getVarValue(context, \"D\"));\r\n    System.out.println(\"data : \" + context);\r\n  }\r\n\r\n  private static int getVarValue(Map&lt;String, Object&gt; data, String var) {\r\n    Object o = data.get(var);\r\n    if (o instanceof Integer) {\r\n      return (Integer) o;\r\n    } else if (o instanceof String) {\r\n      String exp = (String) o;\r\n      int sum = 0;\r\n      for (String v : exp.split(\"\\\\s*\\\\+\\\\s*\")) {\r\n        int value = getVarValue(data, v);\r\n        sum += value;\r\n      }\r\n      data.put(var, sum);\r\n      return sum;\r\n    }\r\n    throw new RuntimeException(\"ERROR\");\r\n  }\r\n}", "Konwledge_Point": "算法与数字", "Question": ["求一个算法问题...分数不够可以再加...", [" ", "\n\n", " ", "\n\n", "有如下2组数据", "\n\n", "  int a=100;", "  int b=200;", "  int c=300;", "\n\n", " ", "\n\n", "  String A=\"a+b\";", "  String B=\"A+b\";", "  String C=\"A+B\";", "  String D=\"C+A+b\";", "\n\n", " ", "\n\n", " ", "\n\n", "即B的结果为..A+b也就是a+b+b=600;以此为算法.算出D的计算结果.", "\n\n", "..要求.大写字母的计算过程只能有一次.", "\n\n", "比如说.D,,应该为A+B+A+b; 其中第一次算出了A..则下面的A直接引用其值便可..不需再算.", "\n\n", "D算出来了..则D包含的子项.C,A,B的结果都要算出来.而且要保留..以便如果有E产生..则可直接引用.", "\n\n", "注意..大小写字母的项目都有很多.", "\n\n", " ", "\n\n", "此题为我用JAVA转换过来的..", "\n\n", "原本是一张数据库表..本来是要求用存储过程..函数.或者sql算的..", "\n\n", " ", "\n\n", "如附件所示:", "\n\n", " ", "\n\n", "其实也就是在算D的过程中把其中包含的子项..求出来..并赋值到.val...以便下一个公式可能用到..", "\n\n", " ", "\n\n", "因考虑效率问题..", "\n\n", "每一个大写字母只能算一次..", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/sunlianglong/article/details/80412258", "Konwledge_Point": "算法与数字", "Question": ["机器学习k近邻算法算出结果不对", ["输入代码", "\n\n", "from numpy import *\nimport operator\n\ndef createDataSet():\n    group = array([[ 1.0, 1.1],[ 1.0, 1.0],[0,0],[0, 0.1]])\n    labels = ['A','A','B','B']\n    return group, labels\n\ndef classify0(inX,dataSet,labels,k):\n    dataSetSize = dataSet.shape[0]\n    #❶（以下三行）距离计算\n    diffMat = tile(inX,(dataSetSize,1)) - dataSet\n    sqDiffMat = diffMat**2\n    sqDistances=sqDiffMat.sum(axis=1)\n    distances = sqDistances**0.5\n    sortedDistIndicies=distances.argsort()\n    classCount={}\n    #❷（以下两行）选择距离最小的k个点\n    for i in range(k):\n        voteIlabel = labels[sortedDistIndicies[i]]\n        classCount[voteIlabel] = classCount.get(voteIlabel,0)+1\n        #❸排序\n        sortedClassCount = sorted(classCount.items(),key=operator.itemgetter(1), reverse=True)\n        return sortedClassCount[0][0]\n\ndef file2matrix(filename):\n    fr = open(filename)\n    arrayOlines= fr.readlines()\n    numberOfLines = len(arrayOlines) #❶ 得到文件行数\n    returnMat = zeros((numberOfLines,3)) #❷ 创建返回的Numpy 矩阵 classLabelVector = []\n    classLabelVector = []\n    index = 0\n    #❸ （以下三行）解析文件数据到列表\n    for line in arrayOlines:\n        line = line.strip()\n        listFromLine = line.split('\\t')\n        returnMat[index,:] = listFromLine[0:3]\n        classLabelVector.append(int(listFromLine[-1]))\n        index += 1\n    return returnMat,classLabelVector\n\n", "\n\n", "错误执行结果", "\n\n", ">>> datingDataMat\narray([[4.092000e+04, 8.326976e+00, 9.539520e-01],\n       [0.000000e+00, 0.000000e+00, 0.000000e+00],\n       [0.000000e+00, 0.000000e+00, 0.000000e+00],\n       ...,\n       [0.000000e+00, 0.000000e+00, 0.000000e+00],\n       [0.000000e+00, 0.000000e+00, 0.000000e+00],\n       [0.000000e+00, 0.000000e+00, 0.000000e+00]])\n>>> datingLabels[0:20]\n[3]\n\n", "\n\n", "正确的应该是", "\n\n", ">>> datingDataMat \narray([[ 7. 29170000e+ 04, 7. 10627300e+ 00, 2. 23600000e- 01], \n[ 1. 42830000e+ 04, 2. 44186700e+ 00, 1. 90838000e- 01], \n[ 7. 34750000e+ 04, 8. 31018900e+ 00, 8. 52795000e- 01], \n..., \n[ 1. 24290000e+ 04, 4. 43233100e+ 00, 9. 24649000e- 01], \n[ 2. 52880000e+ 04, 1. 31899030e+ 01, 1. 05013800e+ 00], \n[ 4. 91800000e+ 03, 3. 01112400e+ 00, 1. 90663000e- 01]]) \n>>> datingLabels[ 0: 20] \n[3, 2, 1, 1, 1, 1, 3, 3, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 2, 3]\n\n", "\n\n", "请大佬看下哪里出错了"]], "Tag": "算法设计"}
{"Answer": "public class TestList\r\n{\r\n    /**\r\n     * \r\n     * @param sourceList 基准数据\r\n     * @param targetList 要比较的数据\r\n     * @return 差异数据\r\n     */\r\n    private List&lt;Integer&gt; findNumber(List&lt;Integer&gt; sourceList,\r\n            List&lt;Integer&gt; targetList)\r\n    {\r\n        List&lt;Integer&gt; resultList = new ArrayList&lt;Integer&gt;();\r\n        for (Integer i : sourceList)\r\n        {\r\n            if (targetList.contains(i))\r\n            {\r\n                continue;\r\n            }\r\n            resultList.add(i);\r\n        }\r\n        return resultList;\r\n    }\r\n    \r\n    @Test\r\n    public void test()\r\n    {\r\n        List&lt;Integer&gt; sourceList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\r\n        List&lt;Integer&gt; targetList = Arrays.asList(1, 3, 4, 8, 10);\r\n        List&lt;Integer&gt; resultList = findNumber(sourceList, targetList);\r\n        System.out.println(\"缺少的数字:\");\r\n        for(Integer i : resultList){\r\n            System.out.print(i + \"、\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n打印出的结果：\r\n[quote]\r\n缺少的数字:\r\n2、5、6、7、9、\r\n[/quote]", "Konwledge_Point": "算法与数字", "Question": ["数组查找算法的实现", ["一组数据，顺序排列，比如这样（1,2,3,4,5,6,9,12,16,18,19,25）从中找出缺少的数字（7-8,10-11,13-15,17,20-24），这个程序怎么实现，或者用到什么函数谢谢大家了，"]], "Tag": "算法设计"}
{"Answer": "如果是20之内的纯数字，那么如果生成2*10^20+1个，必然重复，无论什么算法。\r\n要不重复，唯一的办法就是必须每次生成都记录下来，并且每次生成都比较，看是否重复，或者顺序生成，每次生成已有记录+1的编号。", "Konwledge_Point": "算法与数字", "Question": ["求 产品编号生成算法 ，20位之内的纯数字 或者数字和字母搭配都可以", ["求 产品编号生成算法 ，20位之内的纯数字 或者数字和字母搭配都可以", "\n\n", "但是要求就是编号都不一样 比如 ：  31312323  31312424 算法怎么实现呢 随机生成 ", "\n不能重复  求好点的算法"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Ok, after much deliberation, I decided to go the \"sort every column\" route.\nFor future reference by anyone interested, here's the function I've added to my class - it's called once per every column I need ranked:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;   private function calculateRankings(&amp;amp;$employees, $columnName) {\n        $comparer = \"return (\\$a[$columnName][0] == \\$b[$columnName][0]) ? 0 :  (\\$a[$columnName][0] &amp;gt; \\$b[$columnName][0] ? -1 : 1);\";\n        usort($employees, create_function('$a,$b', $comparer));\n        foreach($employees as $key =&amp;gt; &amp;amp;$employee) {\n            $employee[$columnName][1] = $key + 1;\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The +1 is due to the keys being zero-based. &lt;/p&gt;\n\n&lt;p&gt;You prepare for this function by turning each field you need ranked into a 2-element array: the first ([0]) contains the value, and the second ([1]) will contain the rank in the end.&lt;br&gt;\nI.e.: &lt;code&gt;$employees['salary'] = array(1550, 0);&lt;/code&gt;.\nYou then call the function like this:&lt;br&gt;\n&lt;code&gt;$this-&amp;gt;calculateRankings($employees, 'salary');&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;I sincerely hope this helps someone, someday. Thanks to all responders/commenters!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;UPDATE 4/9:&lt;/strong&gt; The function I supplied before couldn't work - there's no way to pass a third parameter (in our case, the column name) into the comparer function. The only way to do it is to use a static class variable, or a create_function hack that I ended up with. Sorry for any confusion.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "算法与数字", "Question": ["高效排名算法（PHP）", ["\n\n", "I have a PHP array (retrieved from a DB) of employees calculated data. There are about 10 columns per employee, 8 of them numerical (the other 2 are id and name). Here's a short sample: ", "\n\n", "\nDavid: 1024, 75,  22  \nMike:  500,  100, 25  \nJeff:  700,  82,  10  \n", "\n\n", "I can easily sort the array on any of the (numerical) fields to show who's at the top/bottom, but what I'd really like to show in the final table view is ranking by the value, so people won't have to sort and re-sort the table to get what they want. Here's an example of the table sorted by the first column, showing rankings in parentheses:", "\n\n", "\nDavid: 1024 (#1), 75  (#3), 22 (#2)  \nJeff:  700  (#2), 82  (#2), 10 (#3)  \nMike:  500  (#3), 100 (#1), 25 (#1)  \n", "\n\n", "Now, I know the easiest approach is just to sort the table by column, use the row indexes as the ranking and repeat per every column. I just wondered if I could find a more efficient way.", "\n\n", "I thought about using ordered queues (one per column that needs ranking), scanning the array once and pushing values into the queues. But:", "\n\n", "\n", "PHP does not have any data structures other than arrays (unless you use external additions)  ", "\n", "I'm not convinced this is more efficient.", "\n", "\n", "Could anyone please suggest the best approach, and/or confirm I should just re-sort the array several times?", "\n\n", "Thanks for your time!", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;大概类似这样吧&amp;#xff1a;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/71875656033615.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["输入三个整数，输出最大值，用N-S流程图表示该算法", ["输入三个整数，输出最大值，用N-S流程图表示该算法"]], "Tag": "算法设计"}
{"Answer": "http://www.apkbus.com/android-124533-1-1.html", "Konwledge_Point": "算法与数字", "Question": ["安卓图像识别算法推荐", ["我想做一个安卓app，能通过摄像头识别数字和字幕，求推荐相关算法"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;  &lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;    &lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; maxn 100005  &lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;    \nvector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; E[maxn], &lt;span class=\"hljs-built_in\"&gt;dp&lt;/span&gt;(maxn), &lt;span class=\"hljs-built_in\"&gt;v&lt;/span&gt;(maxn);    \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;dfs&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; u, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; fa)&lt;/span&gt; &lt;/span&gt;{    \n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; bo &amp;#61; (v[u] ? &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; : &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;)E[u].&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); i&amp;#43;&amp;#43;) {  \n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;  t &amp;#61; E[u][i];\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t !&amp;#61; fa) {\n             &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(t, u)) {  \n                bo &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;  \n                dp[u] &amp;#43;&amp;#61; dp[t] &amp;#43; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;  \n            }\n        }    \n    }   \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; bo;    \n}    \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{    \n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m, s, t, k;  \n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;  \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;) {  \n        cin &amp;gt;&amp;gt; s &amp;gt;&amp;gt; t;  \n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(s &amp;gt; t) &lt;span class=\"hljs-built_in\"&gt;swap&lt;/span&gt;(s, t);\n        E[s].&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(t);    \n        E[t].&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(s);\n    }   \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;) {  \n        cin &amp;gt;&amp;gt; k, v[k] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;  \n    }  \n    &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;);\n    cout &amp;lt;&amp;lt; dp[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;lt;&amp;lt; endl;    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;    \n}    \n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["算法与数据结构实验题 6.1 小明的果树", ["算法与数据结构实验题 6.1 小明的果树", "\n", "★实验任务", "\n", "小明种了一棵果树，这棵树有 n 个节点，树根为 1 号节点，现在这颗果树上有 m 个节 点长出果实(根节点 1 有可能长出果实)，小明要从节点 1 出发采集这些果实，从一个节点爬 到相邻的另一个节点所需要的时间为 1，采集果实不需要时间，问小明如果要采集这 m 个果 实，从节点 1 出发，并且最后需要回到节点 1，最少需要多少的时间。", "\n", "★数据输入", "\n", "第 1 行输入两个数字 n 和 m 第 2 行到第 n 行每行输入两个数字 a 和 b 表示节点 a 和节点 b 之间有一条边 第 n+1 行输入 m 个数字，第 i 个数字 v[i]表示在 v[i]号节点上长有果实 n<=100000 0<m<=n", "\n", "★数据输出", "\n", "对于每个输入，输出一个数字，表示最少需要花费的时间。", "输入：", "4 2", "1 2", "1 3", "2 4", "2 3", "输出：", "4"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;有一个三位数&amp;#xff0c;个位数字比百位数字大&amp;#xff0c;而百位数字又比十位数字大&amp;#xff0c;并且各位数字之和等于各位数字相乘之积&amp;#xff0c;此三位数的结果是&lt;br /&gt;先得到各位数字&amp;#xff0c;判断和与积是否相等&amp;#xff0c;相等再比较三个数大小&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-xml\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n{\n  &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n  {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; i/&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c &amp;#61; i%&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b &amp;#61; (i-a*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;-c)/&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a*b*c &amp;#61;&amp;#61; a&amp;#43;b&amp;#43;c &amp;amp;&amp;amp; a&amp;gt;b &amp;amp;&amp;amp; b&amp;gt;c)\n      &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;这个数是:%d\\n&amp;#34;&lt;/span&gt;,i);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["请问如何用代码解决以下问题？", ["大佬们，请问如何用代码解决以下问题？", "有一个三位数，个位数字比百位数字大，而百位数字又比十位数字大，并且各位数字之和等于各位数字相乘之积，此三位数的结果是"]], "Tag": "算法设计"}
{"Answer": "1 可以参考我的一篇博文\r\nhttp://robblog.iteye.com/admin/blogs/566114\r\n使用堆排序进行多路数组合并。\r\n\r\n2 \r\n\tpublic static char[] reverseStr(final char[] oriStr) {\r\n\t\tchar[] ret = new char[oriStr.length];\r\n\t\tfor (int i = 0; i &lt; oriStr.length; i++)\r\n\t\t\tret[i] = oriStr[oriStr.length - i - 1];\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tchar[] oriStr = { 'b', 'c', 'd', 'a', 'f' };\r\n\t\tSystem.out.println(reverseStr(oriStr));\r\n\t}\r\n\r\n3 说下思路\r\n使用一个数组保存进入队列的值，分别用两个变量保存队头和队尾，需要考虑：\r\n - 入队： 在队尾插入元素，队尾加1\r\n - 出队： 返回队头，队头加1\r\n - 空队列： 队头索引和队尾索引相同\r\n - 数组扩张和缩小： 由于数组定义时必须指定长度，可以先指定一个长度，当队列中的元素个数将要大于这个长度是，扩张数组，队列长度过小时缩小数组。如果扩张数组： 可以参考ArrayList中的实现。", "Konwledge_Point": "算法与数字", "Question": ["java高级算法问题求解 牛人请进", ["1）N个已经排序好的数组，每个数组有M个数字，给出一个算法把这N个数组合并成一个排好序的大数组，并分析该算法的时间和空间复杂度。", "\n\n", "2）写一个Java函数最高效的实现字符串倒序（不能直接使用类库API）。", "\n\n", "3）用Java数组实现一个先进先出的Queue。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用ChatGPT&lt;br /&gt;是的&amp;#xff0c;使用启发式算法求解数字华容道类似的拼图游戏是可行的。启发式算法是一种高效的解决问题的方法&amp;#xff0c;它使用简单的估价函数和最优化策略来找到最优解。在数字华容道拼图游戏中&amp;#xff0c;启发式算法可以把每个可能的移动作为一个状态&amp;#xff0c;然后根据估价函数的结果选择最有可能的状态。这样&amp;#xff0c;它可以快速找到最短路径&amp;#xff0c;从而解决拼图游戏的问题。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["9宫格拼图游戏算法问题", ["您好，我想做一个数字华容道类似9宫格拼图游戏，毕业设计需要算法，我报上去了启发式算法求拼图游戏最优解，这个可行么？"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/settingsun1225/article/details/10285137", "Konwledge_Point": "算法与数字", "Question": ["C语言模拟类型算法问题，怎么才能做到", ["题目描述 Description", "\n小明玩一个数字游戏，取个n行n列数字矩阵（其中n为不超过100的奇数），数字的填补方法为：在矩阵中心从1开始以逆时针方向绕行，逐圈扩大，直到n行n列填满数字，请输出该n行n列正方形矩阵以及其的对角线数字之和.", "\n\n", "输入描述 Input Description", "\nn（即n行n列）", "\n\n", "输出描述 Output Description", "\nn+1行，n行为组成的矩阵，最后一行为对角线数字之和", "\n\n", "样例输入 Sample Input", "\n3", "\n\n", "样例输出 Sample Output", "\n5 4 3", "\n6 1 2", "\n7 8 9", "\n25", "\n怎么写可以建立一个组，然后模仿人填写(跟手写一样转一圈再转一圈)，从1依次往下填"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; itertools\n&lt;span class=\"hljs-title\"&gt;list&lt;/span&gt; &amp;#61; [&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;]\n&lt;span class=\"hljs-title\"&gt;num&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;n&lt;/span&gt;&amp;#61;len(list)\n&lt;span class=\"hljs-title\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt; &amp;#61; itertools.combinations(&lt;span class=\"hljs-title\"&gt;list&lt;/span&gt;,&lt;span class=\"hljs-title\"&gt;i&lt;/span&gt;)&lt;/span&gt;\n    for s &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;:&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; sum(s) &amp;#61;&amp;#61; num:\n            print(&lt;span class=\"hljs-string\"&gt;&amp;#34;组合:{}元素相加等于{}&amp;#34;&lt;/span&gt;.format(s,num))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["如何从一组数里选出相加等于给定值的组合？(语言-python)", ["输入一组数，并给定一个数值，要求程序自动打印出相加之和等于给定值的组合，不一定是两数。", "\n", "求帮忙。语言是python "]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/ESESZB/article/details/52004669", "Konwledge_Point": "算法与数字", "Question": ["这个关于数字搜索和输出的算法，用c语言怎么实现会比较效率高", ["Problem Description", "\nThere are n numbers A1,A2....An,your task is to check whether there exists there different positive integers i, j, k (1≤i,j,k≤n) such that Ai−Aj=Ak", "\n\n", "Input", "\nThere are multiple test cases, no more than 1000 cases.", "\nFirst line of each case contains a single integer n.(3≤n≤100).", "\nNext line contains n integers A1,A2....An.(0≤Ai≤1000)", "\n\n", "Output", "\nFor each case output \"YES\" in a single line if you find such i, j, k, otherwise output \"NO\".", "\n\n", "Sample Input", "\n3", "\n3 1 2", "\n3", "\n1 0 2", "\n4", "\n1 1 0 2", "\n\n", "Sample Output", "\nYES", "\nNO", "\nYES"]], "Tag": "算法设计"}
{"Answer": "final static char[] digits = {\r\n\t\t'0' , '1' , '2' , '3' , '4' , '5' ,\r\n\t\t'6' , '7' , '8' , '9' , 'a' , 'b' ,\r\n\t\t'c' , 'd' , 'e' , 'f' , 'g' , 'h' ,\r\n\t\t'i' , 'j' , 'k' , 'l' , 'm' , 'n' ,\r\n\t\t'o' , 'p' , 'q' , 'r' , 's' , 't' ,\r\n\t\t'u' , 'v' , 'w' , 'x' , 'y' , 'z' ,\r\n\t\t'A' , 'B' , 'C' , 'D' , 'E' , 'F' ,\r\n\t\t'G' , 'H' , 'I' , 'J' , 'K' , 'L' ,\r\n\t\t'M' , 'N' , 'O' , 'P' , 'Q' , 'R' ,\r\n\t\t'S' , 'T' , 'U' , 'V' , 'W' , 'X' ,\r\n\t\t'Y' , 'Z'\r\n\t    };\r\n\r\nprivate static String to62String(long i, int radix) {\r\n        if (radix &lt; Character.MIN_RADIX || radix &gt; 62)\r\n\t    radix = 10;\r\n        if (radix == 10)\r\n            return String.valueOf(i);\r\n        char[] buf = new char[65];\r\n        int charPos = 64;\r\n        boolean negative = (i &lt; 0);\r\n        if (!negative) {\r\n            i = -i;\r\n        }\r\n        while (i &lt;= -radix) {\r\n            buf[charPos--] = digits[(int)(-(i % radix))];\r\n            i = i / radix;\r\n        }\r\n        buf[charPos] = digits[(int)(-i)];\r\n        if (negative) { \r\n            buf[--charPos] = '-';\r\n        }\r\n        return new String(buf, charPos, (65 - charPos));\r\n    }", "Konwledge_Point": "算法与数字", "Question": ["求一字符转化的算法", ["问题大致是这样的，把当前的时间毫秒数转化成一个7个字符的字符串，与时间一一对应的，此字符串包括数字和字母，最好是一种可逆的算法。。"]], "Tag": "算法设计"}
{"Answer": "设有一个顺序串s，其字符仅由数字和小写字母组成。设计一个算法将s中所有数字字符放在前半部分，所有小写字母字符放在后半部分。并给出你所设计的算法的时间和空间复杂度。\r\n#include &amp;lt;algorithm&amp;gt;\r\n#include &amp;lt;string&amp;gt;\r\n#include &amp;lt;iostream&amp;gt;\r\nstd::string s;\r\ncin &gt;&gt; s;\r\nsort(&amp;s[0],&amp;s[s.length() - 1]);\r\n\r\n空间复杂度和时间复杂度均为O(n * log(n))。", "Konwledge_Point": "算法与数字", "Question": ["C++数据结构串算法题目.........", ["设有一个顺序串s，其字符仅由数字和小写字母组成。设计一个算法将s中所有数字字符放在前半部分，所有小写字母字符放在后半部分。并给出你所设计的算法的时间和空间复杂度。"]], "Tag": "算法设计"}
{"Answer": "http://gouwu.baidu.com/question/2204084031584739588.html?entry=qb_browse_default", "Konwledge_Point": "算法与数字", "Question": ["C++的一题OJ算法竞赛题，求解析（最好附上代码）", ["小明的密码由N（1<=N<=12）个数字构成，每个数字都可以是0至9中任意一个数字，但小明的密码还有", "\n一个特点就是密码中连续的M（1<=M<=4）个数字的和是质数，现给定M和N，求满足条件的密码共有多少", "\n个？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;需要定制么&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["数字图像处理—铆钉缺失检测", ["实验目的：", "\n\n", "通过对所拍摄的二维码图片进行大面积缺失检测", "\n\n", "题目要求：", "\n\n", "（1）图像定位，寻找铆钉扣位置", "\n\n", "（2）指定区域彩色图像二值化操作", "\n\n", "（3）根据铆钉反光在二值化图像上确定指定区域是否存在铆钉", "\n\n", "（4）统计算法准确度", "\n\n", "结果要求：", "\n\n", "程序显示测量值和检测结果，将不合格图片显示和存储。和人工核对比较算法准确率，使用c++或python实现"]], "Tag": "算法设计"}
{"Answer": "https://wenku.baidu.com/view/b3ba32a7afaad1f34693daef5ef7ba0d4a736de3.html", "Konwledge_Point": "算法与数字", "Question": ["请问这里的数字组合算法怎么实现的呢，采用数据结构和C语言实现", ["Problem Description", "\nLet d(x) be the sum of all divisors of x. x is called a good number if every number from 1 to d(x) can be expressed as a sum of distinct divisors of x.", "\n\n", "For example, 6 is a good number, d(6)=1+2+3+6=12, 4=1+3,5=2+3,7=1+6 and so on.", "\n\n", "Teacher Mai wants to know whether a even number p can be expressed as a sum of two good numbers.", "\n\n", "Input", "\nThere are multiple test cases(about 40000).", "\n\n", "For each test case, there is only one line contains one even number p(1≤p≤1018).", "\n\n", "Most test cases are generated randomly.", "\n\n", "Output", "\nFor each test case, print \"YES\" or \"NO\" in the first line. That means if is possible to express p as a sum of two good numbers.", "\n\n", "If your answer is \"YES\", print two number a,b in the second lines. Both a and b should be good numbers, and a+b=p.", "\n\n", "In the third and the fourth line, print the factorization of number a and b. If a=∏ki=1peii, where p1<p2<⋯<pk, pi are all prime numbers and ei≥1, you should print k first, then 2k space-seperated numbers p1,e1,p2,e2,⋯,pk,ek.", "\n\n", "Sample Input", "\n18", "\n\n", "Sample Output", "\nYES", "\n6 12", "\n2 2 1 3 1", "\n2 2 2 3 1"]], "Tag": "算法设计"}
{"Answer": "&lt;p style=\"text-align:center\"&gt;&lt;img alt=\"\" height=\"920\" src=\"https://img-ask.csdnimg.cn/upload/1616142371156.jpg\" width=\"878\" /&gt;&lt;/p&gt;\n\n&lt;p&gt;没有了~~~ &lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["Java 带字母和数字的排序算法", ["按照作业的要求写出来的代码，但是总感觉过于麻烦了。因为规定是只能import java.io.*; 所以很多东西比如ArrayList都用不了。之前想用node写，但是最后给我自己绕晕了，就还是用了普通的array。有没有大神能帮忙看看哪里能精简一下？感谢", "\n\n", "\n\n", "\n", "import java.io.*;\n\npublic class Sorter{\n\tpublic static String InputFile;\n\tpublic static String OutputFile;\n\tprivate String[] list;\n\t\n\t//constructor\n\tpublic Sorter() {\n\t\tlist=new String[100];\n\t}\n\t\n\t//sort the numbers in ascending order, and return a string array\n\tpublic String[] sortNumbs(double[] arr){\n\t    if(arr != null && arr.length > 1){\n\t        for(int i = 0; i < arr.length - 1; i++){\n\t            boolean flag = true;\n\t            for(int j = 0; j < arr.length - i - 1 ; j++){\n\t                if(arr[j] > arr[j+1]){\n\t                    double temp;\n\t                    temp = arr[j];\n\t                    arr[j] = arr[j+1];\n\t                    arr[j+1] = temp;\n\t                    flag = false;\n\t                }\n\t            }\n\t            if(flag){\n\t                break;\n\t            }\n\t        }\n\t    }\n\t    //convert the ordered double array to string\n\t    String[] ascending=new String [arr.length];\n\t    for(int i=0;i<arr.length;i++) {\n\t    \tascending[i]=String.valueOf(arr[i]);\n\t    }\n\t    return ascending;\n\t}\n\n\t//judge if the string is a natural number\n\tpublic boolean isNumberic(String str) {\n\t\tfor(int i=str.length();--i>=0;) {\n\t\t\tif(str.charAt(i)<48||str.charAt(i)>57)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t//clear all empty elements in a double array\n\tpublic static double[] replaceNull(double[] str){\n\t\tint length=str.length;\t\n\t\t//count the number of the 0 and calculate the length of the new array;\n\t\tfor(int i=0;i<str.length;i++) {\n\t   \t   if(0==str[i]) {\n\t   \t\t   length--;\n\t   \t   }\n\t   \t}\n\t\tdouble[] arr=new double[length];\n\t\tint k=0,j=0;\n\t\twhile(k<str.length&&j<arr.length) {\n\t\t\tif(0!=str[k]) {\n\t\t\t\tarr[j]=str[k];\n\t\t\t\tk++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse if(0==str[k]) {\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t    return arr;\n\t}\n\t\n\t//clear all empty elements in a string array\n\tpublic static String[] replaceNull(String[] str){\n\t\tint length=str.length;\t\n\t\t//count the number of the null and calculate the length of the new array;\n\t\tfor(int i=0;i<str.length;i++) {\n\t   \t   if(null==str[i]) {\n\t   \t\t   length--;\n\t   \t   }\n\t   \t}\n\t\tString[] arr=new String[length];\n\t\tint k=0,j=0;\n\t\twhile(k<str.length&&j<arr.length) {\n\t\t\tif(null!=str[k]) {\n\t\t\t\tarr[j]=str[k];\n\t\t\t\tk++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse if(null==str[k]) {\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t    return arr;\n\t}\n\t\n\t//write the string in the output file\n\tpublic static void WriteOutput(String out) {\n\t\ttry {\n\t\t\tFile file =new File(OutputFile);\n\t\t\t//if the fill doesn't exist, create a new one\n\t        if(!file.exists()){\n\t        \tfile.createNewFile();\n\t        }\n\t        //append the new element in the file\n\t\t\tFileWriter fileWritter = new FileWriter(file.getName(),true);\n\t\t\tBufferedWriter bufferWritter = new BufferedWriter(fileWritter);\n\t\t\tbufferWritter.write(out);\n\t\t\tbufferWritter.close();\n\t\t} \n\t\tcatch (IOException e) { \n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tSorter sort=new Sorter();\n\t\tInputFile=args[0];\n\t\tOutputFile=args[1];\n\t\t//read the input file\n\t\tFile file=new File(InputFile);\n\t\tFileReader filereader=new FileReader(file);\n\t\tBufferedReader reader=new BufferedReader(filereader);\n\t\tdouble[] dou=new double[100];\n\t\t\n\t\ttry {\n\t\t\tString line = reader.readLine();\n\t\t\tint i=0;\n\t\t\t//judge it's the end or not\n\t\t\twhile (line!= null) {\n\t\t\t\t//if this is the blank line, throw an error\n\t\t\t\tif(line.equals(\"\")) {\n\t\t\t\t\tWriteOutput(\"Input error.\");\n\t\t\t\t\tthrow new Exception(\"Input error.\");\n\t\t\t\t}\n\t\t\t\t//avoid 0 be cleared when the replaceNull used\n\t\t\t\tif(line.equals(\"0\")) {\n\t\t\t\t\tdou[i]=0.1;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t//convert all the natural numbers to the double\n\t\t\t\telse if(sort.isNumberic(line)&&!line.equals(\"0\")) {\n\t\t\t\t\tdou[i]=Double.parseDouble(line);\n\t\t\t\t\t//System.out.println(dou[i]);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t//if input is Do, use 0.5 to represent Do because 0<Do<1\n\t\t\t\telse if(line.equals(\"Do\")) {\n\t\t\t\t\tdou[i]=0.5;\n\t\t\t\t\t//System.out.println(dou[i]);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t//if input is &, use 3.6 to represent & because 3<@<&<4\n\t\t\t\telse if(line.equals(\"&\")) {\n\t\t\t\t\tdou[i]=3.6;\n\t\t\t\t\t//System.out.println(dou[i]);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t//if input is @, use 3.4 to represent @ because 3<@<&<4\n\t\t\t\telse if(line.equals(\"@\")) {\n\t\t\t\t\tdou[i]=3.4;\n\t\t\t\t\t//System.out.println(dou[i]);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t//if input is Fa, use 15.5 to represent Fa because 15<Fa<16\t\n\t\t\t\telse if(line.equals(\"Fa\")) {\n\t\t\t\t\tdou[i]=15.5;\n\t\t\t\t\t//System.out.println(dou[i]);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t//if input is $, use 20.5 to represent $ because 20<$<21\n\t\t\t\telse if(line.equals(\"$\")) {\n\t\t\t\t\tdou[i]=20.5;\n\t\t\t\t\t//System.out.println(dou[i]);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t//if input is Asymbolwithareallylongname, use 55.5 to represent Asymbolwithareallylongname \n\t\t\t\t//because 55<Asymbolwithareallylongname<56\n\t\t\t\telse if(line.equals(\"Asymbolwithareallylongname\")) {\n\t\t\t\t\tdou[i]=55.5;\n\t\t\t\t\t//System.out.println(dou[i]);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t//if input is Re, use 100.5 to represent Re because 100<Re<101\n\t\t\t\telse if(line.equals(\"Re\")) {\n\t\t\t\t\tdou[i]=100.5;\n\t\t\t\t\t//System.out.println(dou[i]);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t//if input is One, use 103.3 to represent One because 103<One<Two<Three<104\n\t\t\t\telse if(line.equals(\"One\")) {\n\t\t\t\t\tdou[i]=103.3;\n\t\t\t\t\t//System.out.println(dou[i]);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t//if input is OTwo, use 103.6 to represent Two because 103<One<Two<Three<104\n\t\t\t\telse if(line.equals(\"Two\")) {\n\t\t\t\t\tdou[i]=103.6;\n\t\t\t\t\t//System.out.println(dou[i]);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t//if input is Three, use 103.9 to represent Three because 103<One<Two<Three<104\n\t\t\t\telse if(line.equals(\"Three\")) {\n\t\t\t\t\tdou[i]=103.9;\n\t\t\t\t\t//System.out.println(dou[i]);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t//if input is Mi, use 1000.5 to represent Mi because 1000<One<1001\n\t\t\t\telse if(line.equals(\"Mi\")) {\n\t\t\t\t\tdou[i]=1000.5;\n\t\t\t\t\t//System.out.println(dou[i]);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t//if input is %, use 1005000.5 to represent One because 1005000<%<1005001\n\t\t\t\telse if(line.equals(\"%\")) {\n\t\t\t\t\tdou[i]=1005000.5;\n\t\t\t\t\t//System.out.println(dou[i]);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t//other inputs will cause error\n\t\t\t\telse {\n\t\t\t\t\tWriteOutput(\"Input error.\");\n\t\t\t\t\tthrow new Exception(\"Input error.\");\n\t\t\t\t}\n\t\t\t\tline = reader.readLine();\n\t\t\t}\n\t\t\t\n\t\t\t//if there are 666s, change them to one @\n\t\t\tint num6=0;\n\t\t\tfor(int k=0;k<dou.length;k++) {\n\t\t\t\tif(dou[k]==666) {\n\t\t\t\t\tif(num6==0) {\n\t\t\t\t\t\tdou[k]=3.4;\n\t\t\t\t\t\tnum6++;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tdou[k]=0;\n\t\t\t\t\t\tnum6++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdou=replaceNull(dou);\n\t\t\t\n\t\t\t//sort the double array and convert them to string\n\t\t\tString[] str=new String[dou.length];\n\t\t\tstr=sort.sortNumbs(dou);\n\t\t\t\n\t\t\t//change all double numbers which is natural numbers originally back to the integer\n\t\t\tfor(int j=0;j<str.length;j++) {\n\t\t\t\tfor(int k=0;k<str[j].length()-1;k++) {\n\t\t\t\t\tif(str[j].charAt(k)=='.'&&str[j].charAt(k+1)=='0') {\n\t\t\t\t\t\tstr[j]=str[j].substring(0,k);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//change all symbols back\n\t\t\tfor(int j=0;j<str.length;j++) {\n\t\t\t\tif(str[j].equals(\"0.5\")) {\n\t\t\t\t\tstr[j]=\"Do\";\n\t\t\t\t}\n\t\t\t\telse if(str[j].equals(\"3.6\")) {\n\t\t\t\t\tstr[j]=\"&\";\n\t\t\t\t}\n\t\t\t\telse if(str[j].equals(\"3.4\")) {\n\t\t\t\t\tstr[j]=\"@\";\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\telse if(str[j].equals(\"15.5\")) {\n\t\t\t\t\tstr[j]=\"Fa\";\n\t\t\t\t}\n\t\t\t\telse if(str[j].equals(\"20.5\")) {\n\t\t\t\t\tstr[j]=\"$\";\n\t\t\t\t}\n\t\t\t\telse if(str[j].equals(\"55.5\")) {\n\t\t\t\t\tstr[j]=\"Asymbolwithareallylongname\";\n\t\t\t\t}\n\t\t\t\telse if(str[j].equals(\"100.5\")) {\n\t\t\t\t\tstr[j]=\"Re\";\n\t\t\t\t}\n\t\t\t\telse if(str[j].equals(\"103.3\")) {\n\t\t\t\t\tstr[j]=\"One\";\n\t\t\t\t}\n\t\t\t\telse if(str[j].equals(\"103.6\")) {\n\t\t\t\t\tstr[j]=\"Two\";\n\t\t\t\t}\n\t\t\t\telse if(str[j].equals(\"103.9\")) {\n\t\t\t\t\tstr[j]=\"Three\";\n\t\t\t\t}\n\t\t\t\telse if(str[j].equals(\"1000.5\")) {\n\t\t\t\t\tstr[j]=\"Mi\";\n\t\t\t\t}\n\t\t\t\telse if(str[j].equals(\"1005000.5\")) {\n\t\t\t\t\tstr[j]=\"%\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//if there is 666, the array will be ascending\n\t\t\tif(num6>0) {\n\t\t\t\tfor(int k=0;k<str.length;k++) {\n\t\t\t\t\tsort.list[k]=str[k];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//if there is no 666, the result list should be sorted in descending order;\n\t\t\telse {\n\t\t\t\tint reverse=str.length;\n\t\t\t\tfor(int k=0;k<str.length;k++) {\n\t\t\t\t\tsort.list[reverse-1]=str[k];\n\t\t\t\t\treverse--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsort.list=replaceNull(sort.list);\n\t\t\t\n\t\t\t//if there is 0 originally, change it back because it was changed to 0.1 before\n\t\t\tfor(int j=0;j<sort.list.length;j++) {\n\t\t\t\tif(sort.list[j].equals(\"0.1\")) {\n\t\t\t\t\tsort.list[j]=\"0\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(int j=0;j<sort.list.length-1;j++) {\n\t\t\t\tWriteOutput(sort.list[j]+\"\\n\");\n\t\t\t\t//System.out.println(sort.list[j]);\n\t\t\t}\n\t\t\tWriteOutput(sort.list[sort.list.length-1]);\n\t\t\t\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t//close the file\n\t\tfinally {\n\t\t\ttry {\n\t\t\t\treader.close();\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n&lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; main(String[] args) {\n        elevator();\n    }\n\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; elevator(){\n        Scanner scanner &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; Scanner(&lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;);\n\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n &amp;#61; scanner.nextInt();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n            &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;请输入大于等于0的数字&amp;#34;);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n            &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;此组数据不做处理&amp;#34;);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;请输入层数:&amp;#34;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] m &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[n];\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;n; i&amp;#43;&amp;#43;){\n            m[i] &amp;#61; scanner.nextInt();\n        }\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        sum &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; * m[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j &amp;lt; n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; ;j&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(m[j] &amp;gt; m[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]){\n                sum &amp;#43;&amp;#61; Math.abs(m[j] - m[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])*&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;  //下降\n            }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(m[j] &amp;lt; m[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]){\n                sum &amp;#43;&amp;#61; Math.abs(m[j] - m[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])*&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;;  //上升\n            }\n        }\n        sum &amp;#43;&amp;#61; n * &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(sum);\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["电梯上下问题的ACM算法(语言-java)", ["问题遇到的现象和发生背景", "\n", "电梯", "\n", "问题相关代码，请勿粘贴截图", "\n", "java题目描述", "在我们的城市最高的建筑只有一个电梯。电梯请求列表包括N个正数。该数字序列表示电梯将要到达的楼层顺序。电梯每上一层楼用时6秒，下一层楼用时4秒，停一次用时5秒。", "\n", "对于给定的请求列表，请计算花费执行列表中的请求的总时间。电梯初始在第0层。", "\n", "输入格式", "输入数据有多组。每组输入数据包含一个正整数N和N个正整数（N和楼层值不会超过100），表示电梯要到达的楼层数量和楼层。当N=0时输入结束，此组数据不进行处理。", "\n", "输出格式", "对于每组输入数据，计算电梯完成请求列表需要的时间，每组输出占一行。", "样例输入", "1 2", "3 2 3 1", "0", "样例输出", "17", "41"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;额&amp;#xff0c;不是有自带的排列组合模块吗。。。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;from itertools &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;product&lt;/span&gt;\nn &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(input())\nfor i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;product&lt;/span&gt;([&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;], &lt;span class=\"hljs-built_in\"&gt;repeat&lt;/span&gt;&amp;#61;n):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(*i)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;当n&amp;#61;3的时候&amp;#xff0c;输出如下&amp;#xff1a;&lt;br /&gt;1 1 1&lt;br /&gt;1 1 2&lt;br /&gt;1 1 3&lt;br /&gt;1 2 1&lt;br /&gt;1 2 2&lt;br /&gt;1 2 3&lt;br /&gt;1 3 1&lt;br /&gt;1 3 2&lt;br /&gt;1 3 3&lt;br /&gt;2 1 1&lt;br /&gt;2 1 2&lt;br /&gt;2 1 3&lt;br /&gt;2 2 1&lt;br /&gt;2 2 2&lt;br /&gt;2 2 3&lt;br /&gt;2 3 1&lt;br /&gt;2 3 2&lt;br /&gt;2 3 3&lt;br /&gt;3 1 1&lt;br /&gt;3 1 2&lt;br /&gt;3 1 3&lt;br /&gt;3 2 1&lt;br /&gt;3 2 2&lt;br /&gt;3 2 3&lt;br /&gt;3 3 1&lt;br /&gt;3 3 2&lt;br /&gt;3 3 3&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["算法py 数字排列可能性", ["python", "\n", "输入一个n长度， 代表n个位置，每个位置有3种可能， 求出所有排序方式。求解", "\n", "例如：n = 2", "\n", "1 1", "1 2", "1 3", "2 1", "2 2", "2 3", "3 1", "3 2", "3 3"]], "Tag": "算法设计"}
{"Answer": "Java 的 Collections 集合工具中的排序方法会根据对象的 Comparator 接口进行排序的，字符串的比较操是基于字典顺序的：\r\n\r\n```\r\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\r\n\t\tlist.add(\"a\");\r\n\t\tlist.add(\"A11\");\r\n\t\tlist.add(\"c\");\r\n\t\tlist.add(\"F\");\r\n\t\tlist.add(\"111\");\r\n\t\tSystem.out.println(list);\r\n\t\tCollections.sort(list);\r\n\t\tSystem.out.println(list);\r\n```", "Konwledge_Point": "算法与数字", "Question": ["Java语言高分悬赏：在排序算法中，如果比较的是对象不是数字或者字符串，程序怎么实现呢", ["Java语言高分悬赏：在排序算法中，如果比较的是对象不是数字或者字符串，程序怎么实现呢"]], "Tag": "算法设计"}
{"Answer": "你在想什么？`scene_id`的UTF-8编码长度原超过8字节，你只传8字节怎么可能还原全部？\r\n必须把整个字节数组都传过去啊。", "Konwledge_Point": "算法与数字", "Question": ["非数字string 转 int（32位非零），传给另一方，在转回到原string，求助 ", ["非数字string 转成 int（32位非零），传给另一方，在转回到原string，求助 ：", "\n我尝试了 string--byte[]--int32       然后 int32--byte[]--string的转换，结果只得到原string的前几位", "\n代码", "\nstring scene_id = \"SYSTEM000000000000018428#0000000001\";", "\n\n", "        byte[] myBytes = Encoding.UTF8.GetBytes(scene_id);\n        long iscene = BitConverter.ToInt64(myBytes,0);\n\n        byte[] tb = BitConverter.GetBytes(iscene);\n        string ts = Encoding.UTF8.GetString(tb);\n"]], "Tag": "算法设计"}
{"Answer": "不好意思，之前发的那个没验证发现有点问题，误导了，这个验证了一下没问题。你的题目总没有说明翻译成几进制，所以我就按原样翻译了\r\n例如字符\"1234\"，翻译为数字1234.\r\n\r\n```\r\n void GetNumFromString(char *c,unsigned long *num);\r\nvoid _tmain(int argc, _TCHAR* argv[])\r\n{\r\n\tunsigned long x;\r\n\tchar *pp = \"1234\";\r\n\tx = 0;\r\n\tGetNumFromString(pp,(unsigned long *)&amp;x);\r\n\tpp = \"8234\";\r\n\tx = 0;\r\n\tGetNumFromString(pp,(unsigned long *)&amp;x);\r\n\twhile(1)\r\n\t{\r\n\r\n\t}\r\n}\r\n\r\nvoid GetNumFromString(char *c,unsigned long *num)\r\n{\r\n\tif(*c != '\\0')\r\n\t{\r\n\t\t*num *= 10;\r\n\t\tif(*c &gt;= '0' &amp;&amp; *c &lt;= '9')\r\n\t\t\t*num += *c - '0';\r\n\t\tGetNumFromString(++c,num);\r\n\t}\r\n}\r\n```", "Konwledge_Point": "算法与数字", "Question": ["从键盘输入一个字符如（“12345”只有0-9）用递归算法将字符串转换为数字，", ["完整题目：从键盘输入一个字符如（“12345”只有0-9）用递归算法将字符串转换为数字，求算法复杂性，并验证排序正确性"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n\nfunction &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(n){\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;gt; n || n &amp;gt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;throw&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; Error(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入一个正整数n&amp;#xff08;1⩽n⩽10 &amp;#xff09;&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;var&lt;/span&gt; t &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;var&lt;/span&gt; c &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; Array(n).fill(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;).&lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt; &amp;#61;&amp;gt; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; Array(n).fill(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));\n    &lt;span class=\"hljs-built_in\"&gt;var&lt;/span&gt; f &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;var&lt;/span&gt; i &amp;#61; n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--){\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;var&lt;/span&gt; j &amp;#61; n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j--){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(f) c[j][i] &amp;#61; t&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; c[n-j-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][i] &amp;#61; t&amp;#43;&amp;#43;;\n        }\n        f &amp;#61; !f;\n    }\n    \n    ////////////// 打印输出\n    console.&lt;span class=\"hljs-built_in\"&gt;log&lt;/span&gt;(c.&lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(e &amp;#61;&amp;gt; e.&lt;span class=\"hljs-built_in\"&gt;join&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;)).&lt;span class=\"hljs-built_in\"&gt;join&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;))\n\n}\n\n&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/004749267336175.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;有用望采纳&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "算法与数字", "Question": ["这道怎么写啊各位（js算法题）", ["输入格式:", "输入一个正整数n（1⩽n⩽10 ）", "\n", "输出格式:", "输出n×n的往返跑方阵。每行n个数字，每个数字占3位，右对齐。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;对于你这个问题可以参考如下链接&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/nbawj/article/details/83109735\" id=\"textarea_1647624518893_1647625612858_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;数组中和为x的所有组合_电子楼战地记者的博客-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;数组&amp;#xff1a;给定一个数组&amp;#xff0c;求出数组中和为某个值的所有组合。例子&amp;#xff1a;数组{3,2,1,1,1,5,6}中和为10的所有组合思路&amp;#xff1a;通过递归加回溯的办法解决&amp;#xff0c;具体思路看代码&amp;#xff1a;void getSum(vector&amp;amp;lt;int&amp;amp;gt; &amp;amp;amp;nums,int pos,int sum,vector&amp;amp;lt;int&amp;amp;gt; &amp;amp;amp;v){    if(sum &amp;amp;lt; 0)    ...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/nbawj/article/details/83109735&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;br /&gt;用c语言是&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; tv&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;]&lt;/span&gt;,vl &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\nvoid get&lt;span class=\"hljs-constructor\"&gt;Sum(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;nums&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;pos&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;sum&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(sum &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        return;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(sum&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; vl; i&amp;#43;&amp;#43;)\n        {\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,tv&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        }\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n        return;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; pos;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        tv&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;vl&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; nums&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;;\n        get&lt;span class=\"hljs-constructor\"&gt;Sum(&lt;span class=\"hljs-params\"&gt;nums&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;&amp;#43;1,&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;sum&lt;/span&gt;-&lt;span class=\"hljs-params\"&gt;nums&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;])&lt;/span&gt;;\n        vl--;\n    }\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main(void)\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; nums&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;},target&amp;#61;&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;;\n    get&lt;span class=\"hljs-constructor\"&gt;Sum(&lt;span class=\"hljs-params\"&gt;nums&lt;/span&gt;,0,5,&lt;span class=\"hljs-params\"&gt;target&lt;/span&gt;)&lt;/span&gt;;\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/215216526746197.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "算法与数字", "Question": ["递归实现以下问题算法", ["用递归实现如下问题：给定一个数组nums=[2，3，5]和一个固定的值target=8。找出数组nums中所有可以使数字和为target的组合（数字可重复）。"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/effective_coder/article/details/8736718", "Konwledge_Point": "算法与数字", "Question": ["请问哪位大神可以帮忙解决一个算法题？", ["具体内容如下:用贪心法解决多仓库 ，( 每个仓库)多库位，库存商品多品牌的出库调度问题"]], "Tag": "算法设计"}
{"Answer": "我写了一个，但是感觉没那么满意\r\n```\r\n public class Red {\r\n\tprivate int remain;//金额，单位厘\r\n\tprivate int count;//个数\r\n\tprivate Precision precision;//精度\r\n\tprivate int max;//上限，单位厘 \r\n\tprivate int min;//下限，单位厘\r\n\tprivate int[] redPool;\r\n\tprivate int index;\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint count = 100;\r\n\t\tRed red = Red.newInstance(10 * 1000, count, Precision.FEN, 1 * 1000, 5 * Precision.FEN.getPre());\r\n\t\tint sum = 0;\r\n\t\tfor (int i = 0; i &lt; count; i++) {\r\n\t\t\tint money = red.getRed();\r\n\t\t\tsum += money;\r\n\t\t\tSystem.out.println(money);\r\n\t\t}\r\n\t\tSystem.out.println(\"---------------\" + sum);\r\n\t}\r\n\t\r\n\tpublic int getRed() {\r\n\t\treturn index &lt; count ? redPool[index++] : 0;\r\n\t}\r\n\t\r\n\tpublic static Red newInstance(int money, int count, Precision precision, int max, int min) {\r\n\t\tRed red = new Red(money, count, precision, max, min);\r\n\t\tString msg;\r\n\t\tif (\"\".equals(msg = red.validate())) return red;\r\n\t\telse throw new RuntimeException(msg);\r\n\t}\r\n\t\r\n\tprivate Red(int money, int count, Precision precision, int max, int min) {\r\n\t\tthis.remain = money;\r\n\t\tthis.count = count;\r\n\t\tthis.precision = precision;\r\n\t\tthis.max = max;\r\n\t\tthis.min = min;\r\n\t\tinit();\r\n\t}\r\n\r\n\tprivate void init() {\r\n\t\tredPool = new int[count];\r\n\t\tint remain_ = remain;\r\n\t\tfor (int i = 0; i &lt; count - 1; i++) {\r\n\t\t\tint max = getRealMax(remain_, count - i);\r\n\t\t\tint min = getRealMin(remain_, count - i);\r\n\t\t\tint money = ((int)(Math.random() * (max - min + precision.getPre())) + min) \r\n\t\t\t\t\t/ precision.getPre() * precision.getPre();//[min, realMax]\r\n\t\t\tremain_ -= money;\r\n\t\t\tredPool[i] = money;\r\n\t\t}\r\n\t\tredPool[count - 1] = remain_;\r\n\t\trandomPool();\r\n\t}\r\n\t\r\n\tprivate void randomPool() {\r\n\t\tfor (int i = 0; i &lt; count; i++) {\r\n\t\t\tint index = (int) (Math.random() * count);\r\n\t\t\tint temp = redPool[i];\r\n\t\t\tredPool[i] = redPool[index];\r\n\t\t\tredPool[index] = temp;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate int getRealMax(int remain, int count) {\r\n\t\tint calMax = remain - ((count - 1) * min);\r\n\t\treturn Math.min(calMax, max);\r\n\t}\r\n\t\r\n\tprivate int getRealMin(int remain, int count) {\r\n\t\tint calMin = remain - ((count - 1) * max);\r\n\t\treturn Math.max(calMin, min);\r\n\t}\r\n\t\r\n\tpublic int getRemain() {\r\n\t\treturn remain;\r\n\t}\r\n\r\n\tpublic void setRemain(int remain) {\r\n\t\tthis.remain = remain;\r\n\t}\r\n\r\n\tpublic int getCount() {\r\n\t\treturn count;\r\n\t}\r\n\r\n\tpublic void setCount(int count) {\r\n\t\tthis.count = count;\r\n\t}\r\n\r\n\tpublic int getMax() {\r\n\t\treturn max;\r\n\t}\r\n\r\n\tpublic void setMax(int max) {\r\n\t\tthis.max = max;\r\n\t}\r\n\r\n\tpublic int getMin() {\r\n\t\treturn min;\r\n\t}\r\n\r\n\tpublic void setMin(int min) {\r\n\t\tthis.min = min;\r\n\t}\r\n\r\n\tpublic Precision getPrecision() {\r\n\t\treturn precision;\r\n\t}\r\n\r\n\tpublic void setPrecision(Precision precision) {\r\n\t\tthis.precision = precision;\r\n\t}\r\n\t\r\n\tprivate String validate() {\r\n\t\tString msg = \"\";\r\n\t\tif (remain &lt;= 0) {\r\n\t\t\tmsg = \"余额不能为0\";\r\n\t\t} else if (remain % precision.getPre() != 0) {\r\n\t\t\tmsg = \"余额的精度不对\";\r\n\t\t} else if (count &lt;= 0) {\r\n\t\t\tmsg = \"红包个数必须为正数\";\r\n\t\t} else if (max % precision.getPre() != 0) {\r\n\t\t\tmsg = \"上限的精度不对\";\r\n\t\t} else if (max &lt;= min) {\r\n\t\t\tmsg = \"上限必须大于下限\";\r\n\t\t} else if (min % precision.getPre() != 0) {\r\n\t\t\tmsg = \"下限的精度不对\";\r\n\t\t} else if (min &lt;= 0) {\r\n\t\t\tmsg = \"下限必须大于0\";\r\n\t\t} else if (getRealMax(remain, count) &lt; getRealMin(remain, count)) {\r\n\t\t\tmsg = \"上下限设置错误\";\r\n\t\t}\r\n\t\treturn msg;\r\n\t}\r\n\t\r\n}\r\nenum Precision {\r\n\tLI(1),\r\n\tFEN(10),\r\n\tJIAO(100),\r\n\tYUAN(1000);\r\n\t\r\n\tprivate int pre;\r\n\tprivate Precision(int pre) {\r\n\t\tthis.pre = pre;\r\n\t}\r\n\tpublic int getPre() {\r\n\t\treturn pre;\r\n\t}\r\n}\r\n```", "Konwledge_Point": "算法与数字", "Question": ["使用java进行红包分配算法", ["公司有个红包分发业务模块，需要红包随机生成金额，克提供参数为：", "\n1、红包金额（最小精确到厘：0.001，数据库是用int表示，1元也就是1000厘）", "\n2、红包发放数量", "\n3、红包金额上限", "\n4、红包金额下限", "\n5、金额精度（精度可以理解为随机数能精确到小数哪一位，如范围为：0.01~0.5，如果精确到分的随机数为0.34 or 0.340，如果精确到厘：0.345）", "\n\n", "1,2,3,4,5都可以由用户输入或选择，程序可进行判断是否参数不符计算，意思就是：", "\n如果金额为10元，数量为10个，上限就不能大于10-0.001*9=9.991之类的", "\n而且，金额是随用户输入，没有限制10的倍数或者100的倍数，可能会是2546", "\n数量也是由用户输入，也可能为3254等不规则数字", "\n需要程序使用用户金额生成在上限下限范围内随机缺固定的数量的红包个数，我想了好久了", "\n由于数学比较差，而且红包金额可以根据精度调控后面小数位数"]], "Tag": "算法设计"}
{"Answer": "可以这样想，假设有数字a,b,c,d,e，取其两两相减的绝对值。将这10个数字做从小到大排序，最好构建成结构体，用于记录每个数字是由哪两个数相减所得。\n\n之后遍历排序好以后的数列\n例:取最小的值作为起始数列，比如为a-b\n那么第二个数字中必要含有a或者b，依次逐步遍历即可得到所有数列情况![图片](https://img-ask.csdn.net/upload/201803/23/1521796790_875281.jpg)", "Konwledge_Point": "算法与数字", "Question": ["初学者 求助排序算法相关问题啊。", ["大学生初学算法 求助大神，一堆数字排序，要求排序后每相邻两数差的绝对值是不断递增的，找出所有满足的排序方案，并找出相邻差值绝对值和最小的那个方案，能做到吗？请给一下思路，或者该使用什么算法，谢谢各位了。"]], "Tag": "算法设计"}
{"Answer": "首先，你用a数组来存储输入的字符，那么每个字符的权重应该是字符-'A'+1才对。\r\n所以，你的求sum的代码应该是sum+=a[i]-'A'+1。", "Konwledge_Point": "算法与数字", "Question": ["26个字母对应1~26的数字，然后计算输入单词的权重之和", ["#include ", "\n#include ", "\n\n", "int main(void)", "\n{", "\n    int A =1, B =2,C =3, D =4, E =5, F =6, G =7, H =8, I =9, J =10,", "\n        K =11, L =12, M =13, N =14, O =15, P =16, Q =17, R =18, S =19, ", "\n        T =20, U =21, V =22, W =23, X =24, Y =25, Z =26;  //对每个字母赋值// ", "\n    char a[100];", "\n    int sum=0,i;  //初始化sum 和 i// ", "\n    a[0] = getchar();   //输入第一个首字母// ", "\n    for(i=0;a[i] != '\\n';i++)  //输入剩余的字母 //", "\n       a[i+1] = getchar();", "\n    for(i=0;a[i]!='\\n';i++)", "\n    sum+=a[i];  //对个字母对应的数字求和// ", "\n    printf(\"%d\\n\",sum);", "\n    return 0;", "\n}", "\n\n", "\n\n", "LOVE 的计算结果应该是54，为什么我的程序会是这么大？ 求大侠指点"]], "Tag": "算法设计"}
{"Answer": "1、可以使用树遍历的方式回溯，一层层遍历、回溯\r\n2、数学方法，\r\n\t\t\t17+(X1*-1)* 6，(X2*-1)* 25+(X3*-1)* 49+(X4*-1)* 27+(X5*-1)* 65+(X6*-1)* 42+(X7*-1)* 48\r\n\t\t\t解向量X1……X7", "Konwledge_Point": "算法与数字", "Question": ["算法：17，6，25，49，27，65，42，48 按顺序加减得99", ["遇到一道算法题，题目是将指定数字按照顺序的方式加上加号和减号的到指定结果，请问该问题的解法，是不是采用遍历树的方式来解决该问题？"]], "Tag": "算法设计"}
{"Answer": "![图片说明](https://img-ask.csdn.net/upload/201806/12/1528789625_194165.png)![图片说明](https://img-ask.csdn.net/upload/201806/12/1528789638_805909.png)\r\n帮你写了个详细的代码", "Konwledge_Point": "算法与数字", "Question": ["同一个包下，怎么调用另一个类里面的算法。", ["\nJ算法是将数字转化为汉字的算法，我现在希望将前台传来的salary工资数字变为汉字，在addservlet里面应该怎么调用呢？"]], "Tag": "算法设计"}
{"Answer": "#include&lt;stdio.h&gt;\r\n#include&lt;stdlib.h&gt;\r\n\r\n#define MAX 70\r\n#define BIG 62\r\n\r\nint temp[BIG];\r\nvoid main()\r\n{\r\n\tint arr[MAX];\r\n\tint i=0,j=0;\r\n\r\n\tfor (i=0; i&lt;MAX; i++)\r\n\t{\r\n\t\tarr[i] = rand()%BIG;\r\n\t}\r\n\tprintf(\"随机得到的数值数组如下：\\n\");\r\n\tfor (i=0; i&lt;MAX; i++)\r\n\t{\r\n\t\tif (arr[i] &gt;= 10 &amp;&amp; arr[i] &lt; 36)\r\n\t\t\tprintf(\" %c\",'A'+arr[i]-10);\r\n\t\telse if (arr[i] &gt;= 36)\r\n\t\t    printf(\" %c\",'a'+arr[i]-36);\r\n\t\telse printf(\" %c\",'0'+arr[i]);\r\n\t}\r\n\tprintf(\"\\n\\n\");\r\n\r\n\tfor (i=0; i&lt;MAX; i++)\r\n\t{\r\n\t\ttemp[arr[i]]++;\r\n\t}\r\n\tfor (i=0; j&lt;MAX; i++)\r\n\t{\r\nfuwei:\r\n\t   if (temp[i] &gt; 0)\r\n\t   {\r\n\t\t   arr[j++] = i;\r\n\t\t   temp[i]--;\r\n\t\t   goto\r\n\t\t\t   fuwei;\r\n\t   }\r\n\t}\r\n\r\n\tprintf(\"经过排序后数值数组如下：\\n\");\r\n    for (i=0; i&lt;MAX; i++)\r\n\t{\r\n\t\tif (arr[i] &gt;= 10 &amp;&amp; arr[i] &lt; 36)\r\n\t\t\tprintf(\" %c\",'A'+arr[i]-10);\r\n\t\telse if (arr[i] &gt;= 36)\r\n\t\t\tprintf(\" %c\",'a'+arr[i]-36);\r\n\t\telse printf(\" %c\",'0'+arr[i]);\r\n\t}\r\n\tsystem(\"pause\");\r\n}\r\n\r\n```\r\n \r\n```\r\n上面是源代码。下面是运行图片\r\n![图片说明](https://img-ask.csdn.net/upload/201506/25/1435219165_343790.png)\r\n\r\n题主若有疑问的话，请私信我，谢谢！", "Konwledge_Point": "算法与数字", "Question": ["排序算法用什么最好？", ["题目要求：随机产生70个字符放在一个数组里，字符只能是数字或英文字母（一共62个字符），然后用程序将它们重新排序并打印出来。", "\n\n", "优先排序规则：数字最优先，字母按照字母表顺序，比如 a 优先于 b 打印，但大写字母优先于小写字母！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的 count_time函数返回的result是一个拷贝数组,不是运行时间,将其改为即可返回时间&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-built_in\"&gt;    return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;round&lt;/span&gt;(end_time - start_time,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;屏蔽&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;# plt.legend(Sort &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;best&amp;#39;&lt;/span&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["变化数字列表长度，统计不同排序算法所消耗的时间，并以折线图形式进行可视化展示，要如何统计不同算法所消耗的时间，并可视化?(语言-python)", ["为什么def的yi函数统计出的sort的耗时和之前运行的结果不一样，要怎么把之前的运行结果，def一个函数来进行统计，以及绘制折线图的报错要怎样修改", "\n"]], "Tag": "算法设计"}
{"Answer": "可以参考我写的博文\r\nhttp://blog.csdn.net/AIRE_Talent/article/details/51020888", "Konwledge_Point": "算法与数字", "Question": ["有趣的数 算法的题 求思路", ["问题描述", "\n我们把一个数称为有趣的，当且仅当：", "\n1. 它的数字只包含0, 1, 2, 3，且这四个数字都出现过至少一次。", "\n2. 所有的0都出现在所有的1之前，而所有的2都出现在所有的3之前。", "\n3. 最高位数字不为0。", "\n因此，符合我们定义的最小的有趣的数是2013。除此以外，4位的有趣的数还有两个：2031和2301。", "\n请计算恰好有n位的有趣的数的个数。由于答案可能非常大，只需要输出答案除以1000000007的余数。", "\n输入格式", "\n输入只有一行，包括恰好一个正整数n (4 ≤ n ≤ 1000)。 ", "\n输出格式", "\n输出只有一行，包括恰好n 位的整数中有趣的数的个数除以1000000007的余数。 ", "\n样例输入", "\n4", "\n样例输出", "\n3", "\n答案：", "\nimport java.util.*;", "\npublic class Main { ", "\npublic static void main(String[] args) { ", "\nnew Main().run(); ", "\n}", "\npublic void run() { ", "\nScanner fin = new Scanner(System.in);", "\nint N = fin.nextInt(); ", "\nlong[] count = new long[8]; ", "\ncount[6] = 0; ", "\ncount[7] = 1; ", "\nlong mod = 1000000007; for (int i = 2; i <= N; ++i) { ", "\nlong[] newCount = new long[8]; ", "\nnewCount[0] = (count[0] * 2 + count[1] + count[3]) % mod; ", "\nnewCount[1] = (count[1] * 2 + count[2] + count[5]) % mod; ", "\nnewCount[2] = (count[2] + count[6]) % mod; ", "\nnewCount[3] = (count[3] * 2 + count[4] + count[5]) % mod; ", "\nnewCount[4] = (count[4] + count[7]) % mod; ", "\nnewCount[5] = (count[5] * 2 + count[6] + count[7]) % mod; ", "\nnewCount[6] = 0; ", "\nnewCount[7] = 1;", "\ncount = newCount; ", "\n}", "\nSystem.out.println(count[0]); ", "\n} ", "\n}", "\n看不懂 求救 到底是什么思路"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这种相等概率的不是最好做吗&amp;#xff1f;&lt;/p&gt;\n&lt;p&gt;设数组q[n]&amp;#xff0c;n为券的总数&lt;br /&gt;初始化q[0至m]&amp;#61;&amp;#34;经&amp;#34;&amp;#xff0c;q[m至2m]&amp;#61;&amp;#34;统&amp;#34;&amp;#xff0c;...&amp;#xff0c;q[5m至6m]&amp;#61;&amp;#34;油&amp;#34;&amp;#xff0c;其中的文字也可以用数字表示&amp;#xff0c;这个应该不用多说吧。&lt;br /&gt;设数组flag[n]&amp;#xff0c;初始化flag[0至n]&amp;#61;0&lt;br /&gt;设数组out[n]&lt;br /&gt;设i&amp;#61;0&lt;/p&gt;\n&lt;p&gt;while(i&amp;lt;n)&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;r&amp;#61;rand(0至n) //不含n&lt;br /&gt;if(flag[r]&amp;#61;&amp;#61;0)&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;out[i]&amp;#61;q[r];&lt;br /&gt;flag[r]&amp;#61;1;&lt;br /&gt;i&amp;#43;&amp;#43;;&lt;br /&gt;}&lt;br /&gt;}&lt;/p&gt;\n&lt;p&gt;然后保存好out&amp;#xff0c;按照out顺序从0开始&amp;#xff0c;卖一个少一个。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["求此题的算法，还有设计算法的一般思路方法", ["在生活中，我们常常会遇到某些食品商家采用一种游戏的方式提供商品的优惠券。商家在每件商品中附一张优惠券，每张券上只印一个字，商家要求消费者集齐所有字即可兑换奖励。现在我们以6个字为例，例如“经统学院加油”，并且这6个字的商品是相等数量的。那么消费者购买12件商品，能享受优惠的可能性有多大"]], "Tag": "算法设计"}
{"Answer": "64bit=2的64次方。\r\n2的10次方约等于10的3次方。\r\n2的60次方约等于10的18次方。\r\n2的4次方=8\r\n所以用10进制表示，差不多就是18~19位", "Konwledge_Point": "算法与数字", "Question": ["雪花算法生成位数的问题", ["雪花算法的原则是生成64bit的唯一编码，为什么存储在数据库是18个数字，怎么算都不对，请教给位，谢谢"]], "Tag": "算法设计"}
{"Answer": "二分法可以吗？\r\n或则，48个区间的话应该可以设计出一个哈希函数，直接映射", "Konwledge_Point": "算法与数字", "Question": ["点投射到区间的算法问题求解", ["有48个区间，分别是负无穷到-121，-120到-115，-115到-114，（不规律的）一直到第", "\n48个区间是-44到0 ，怎么设计一个算法快速判断一个数字比如-88是在哪个区间里的呢"]], "Tag": "算法设计"}
{"Answer": "//说实在话，我又想起旅行商问题来了~\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n *\r\n * @author Administrator\r\n */\r\npublic class NewClass {\r\n    /*\r\n    {2,3,5,7,12,10}\r\n    {2,3,6,4,12,9}\r\n    {3,8,5,11,12,4}\r\n     */\r\n\r\n    ArrayList&lt;Integer&gt; list1;\r\n    ArrayList&lt;Integer&gt; list2;\r\n    ArrayList&lt;Integer&gt; list3;\r\n    ArrayList&lt;ArrayList&gt; list;\r\n\r\n    public static void main(String[] args) {\r\n        new NewClass().printFirst();\r\n    }\r\n\r\n    //打印列表的第一个元素\r\n    public void printFirst(){\r\n        this.toOne();\r\n        for (int i = 0; i &lt; this.list1.size(); i++) {\r\n            System.out.print(list.get(0).get(i) + \"  \");\r\n        }\r\n    }\r\n\r\n    //算法在这里\r\n    private ArrayList&lt;ArrayList&gt; toOne() {\r\n        this.initList(); //初始化各个List\r\n        //前提条件还是你说的那些...\r\n        int length = this.list1.size();\r\n        int flag = 0;\r\n        for(int i = 0 ; i &lt; list.size() - 1; i++){\r\n            for(int j = i + 1 ; j &lt; list.size(); j++){\r\n                if(i == j){\r\n                    continue;\r\n                }\r\n                if(Integer.parseInt(list.get(i).get(flag).toString().trim()) &lt; Integer.parseInt(list.get(i).get(flag).toString().trim())){\r\n                    list.remove(j);\r\n                }else if(Integer.parseInt(list.get(i).get(flag).toString().trim()) &gt; Integer.parseInt(list.get(i).get(flag).toString().trim())){\r\n                    list.remove(i);\r\n                }\r\n            }\r\n            flag ++ ;\r\n            if(list.size() == 1){\r\n                break;\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    //初始化列表\r\n    private void initList() {\r\n        this.list1 = new ArrayList&lt;Integer&gt;();\r\n        this.list2 = new ArrayList&lt;Integer&gt;();\r\n        this.list3 = new ArrayList&lt;Integer&gt;();\r\n        //list1变成{2,3,5,7,12,10}\r\n        list1.add(2);\r\n        list1.add(3);\r\n        list1.add(5);\r\n        list1.add(7);\r\n        list1.add(12);\r\n        list1.add(10);\r\n        //list2变成{2,3,6,4,12,9}\r\n        list2.add(2);\r\n        list2.add(3);\r\n        list2.add(6);\r\n        list2.add(4);\r\n        list2.add(12);\r\n        list2.add(9);\r\n        //list3变成{3,8,5,11,12,4}\r\n        list3.add(3);\r\n        list3.add(8);\r\n        list3.add(5);\r\n        list3.add(11);\r\n        list3.add(12);\r\n        list3.add(4);\r\n        //那个大的ArrayList是这样的\r\n        this.list = new ArrayList&lt;ArrayList&gt;();\r\n        list.add(list1);\r\n        list.add(list2);\r\n        list.add(list3);\r\n    }\r\n}", "Konwledge_Point": "算法与数字", "Question": ["小算法", ["例如如下数据:", "\n{2,3,5,7,12,10}", "\n{2,3,6,4,12,9}", "\n{3,8,5,11,12,4}", "\n\n", "上面的三条记录放在ArrayList里面，并且每条数据本身也是一个ArrayLis，每条记录的长度是一样的，现在想找出其中最小的一条记录，即只要前面的数字小就认为它是小的。也就是说我要得到的数据是{2,3,5,7,12,10}", "\n\n", "用java有好的算法吗？最好能易读一点的", "\n[b]问题补充：[/b]", "\n能帮着写一下吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;用的着那么多循环&amp;#xff1f;能完全平方的三位数也就从10开始到40左右&amp;#xff0c;去计算其他数值乘积就不是完全平方数了&amp;#xff0c;如4和7的乘积不可能是完全平方数&amp;#xff0c;根本就没必要去计算&amp;#xff0c;基本数学知识&amp;#xff0c;没必要画蛇添足&amp;#xff0c;完全平方数2个值相等的乘积&amp;#xff0c;小学基础知识99乘法表。&lt;a href=\"https://ask.csdn.net/questions/7553530\" id=\"textarea_1638837702075_1638837990411_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://ask.csdn.net/questions/7553530&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["哪里出错了？编写程序寻找既是完全平方数，又有两位数字相同的三位正整数，例如121、144等。要求统计满足该条件的整数个数，并从大到小打印这些整数。", ["哪里出错了？"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I have no actual experience that might help you with this, though since you're asking for some insight, I'll share my thoughts on how to do this.&lt;/p&gt;\n\n&lt;p&gt;As I typed my answer, I realised that this is in fact a &lt;a href=\"https://en.wikipedia.org/wiki/Knapsack_problem\" rel=\"nofollow\"&gt;knapsack problem&lt;/a&gt;, which means you can solve it to optimality using any algorithm that solves the knapsack problem. I recommend using &lt;a href=\"https://en.wikipedia.org/wiki/Knapsack_problem#Dynamic_programming_in_advance_algorithm\" rel=\"nofollow\"&gt;dynamic programming&lt;/a&gt; to make your program run faster.&lt;/p&gt;\n\n&lt;p&gt;What you need to do is construct all numbers you can generate by combining two numbers with an operator, so that after this you have a list containing the numbers you started with, and the numbers you generated.&lt;/p&gt;\n\n&lt;p&gt;Then you solve the knapsack problem using the numbers as items with their value as their weight, and the number as the weight you can store at most.&lt;/p&gt;\n\n&lt;p&gt;The only thing that is slightly different is that you have an extra constraint that says that you may only use a number once. So you need to add into your implementation that if you add a combination of numbers, that you must remove the option of storing another combination that is constructed with the same number.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "算法与数字", "Question": ["从6个随机数中计算出随机的三位数？", ["\n\n", "I have 4 years PHP and C# experience, but Math is not my better side.\nI thnik that i need in this project use some math algorithms.", "\n\n", "When page load I need randomly create 7 numbers, 6 are numbers that I can use to calculate given three digit number:", "\n\n", "\n", "rand 1-9 ", "\n", "rand 1-9 ", "\n", "rand 1-9 ", "\n", "rand 1-9 ", "\n", "rand 10-100 //5 steps ", "\n", "rand 10-100 //5 steps", "\n", "\n", "and given number to calculate is 100-999,", "\n\n", "I can use this operations: ", "+, -, /, *, (, )", "\n\n", "What is best algorithm for this? \nI probably need to try all possible combinations with this 6 numbers to calculate given number or closest number of calculations.", "\n\n", "example:\nlet say that given three digit number is \n350, and I need to calculate this number from this numbers:\n3,6,9,5 10, 100\nso formula for this is:\n(100*3)+(5*10) = 350", "\n\n", "if is not possible to calculate exact number, than calculate closest.", "\n\n", "You don't need to solve this problem completely, you can introduce me to solve this problem by paste some pseudo, or describing how to do that.", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这个代码跟题目的要求不太符合&amp;#xff0c;主要修改了一下LinkList_createR函数和main函数中的调用&amp;#xff0c;运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/791994778666192.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码修改如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; N 10&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; SLTDateType;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Node&lt;/span&gt;\n{\n    SLTDateType date;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Node&lt;/span&gt; *next;\n}Node,*LinkList;\n&lt;span class=\"hljs-function\"&gt;SLTDateType &lt;span class=\"hljs-title\"&gt;LinkList_Init&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LinkList &amp;amp;L)&lt;/span&gt;\n&lt;/span&gt;{\n    L&amp;#61;(LinkList)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(Node));\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(L&amp;#61;&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n        &lt;span class=\"hljs-built_in\"&gt;exit&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;);\n    L-&amp;gt;next&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;LinkList_createR&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LinkList L)&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;//,i)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; ch;\n    Node *p,*r;\n    r&amp;#61;L;\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        p&amp;#61;(LinkList)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(Node));\n        p-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;p-&amp;gt;date);\n        r-&amp;gt;next &amp;#61; p; &lt;span class=\"hljs-comment\"&gt;//p插入链表末尾&lt;/span&gt;\n        r &amp;#61; p;\n        ch &amp;#61; &lt;span class=\"hljs-built_in\"&gt;getchar&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;x);&lt;span class=\"hljs-comment\"&gt;//读取x&lt;/span&gt;\n    p &amp;#61; L;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(p-&amp;gt;next)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(p-&amp;gt;next-&amp;gt;date &amp;#61;&amp;#61; x)\n        {\n            r &amp;#61; p-&amp;gt;next;\n            p-&amp;gt;next &amp;#61; r-&amp;gt;next;\n            &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(r);\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            p &amp;#61; p-&amp;gt;next;\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;LinkList_print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LinkList L)&lt;/span&gt;\n&lt;/span&gt;{\n    Node *p;\n    p&amp;#61;L-&amp;gt;next;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(p)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,p-&amp;gt;date);\n        p&amp;#61;p-&amp;gt;next;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    LinkList L;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n&amp;#61;N;\n    &lt;span class=\"hljs-built_in\"&gt;LinkList_Init&lt;/span&gt;(L);\n    &lt;span class=\"hljs-built_in\"&gt;LinkList_createR&lt;/span&gt;(L);&lt;span class=\"hljs-comment\"&gt;//,N);&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//printf(&amp;#34;%d&amp;#34;);&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;LinkList_print&lt;/span&gt;(L);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["有一个整数单链表L，涉及一个算法删除其中所有值为x的结点。", ["有一个整数单链表L，涉及一个算法删除其中所有值为x的结点。", "输入格式:", "第一行，直接给出相关的输入（整形），数据间英文字符的空格，最后回车结束输入。", "第二行，给出要删除的数字（整形）。", "输出格式:", "输出整形结果，数据间一个英文空格隔开。", "1.输入样例:", "1 2 2 3 1", "2", "1.输出样例:", "1 3 1", "2.输入样例:", "1 3 5 5 5 4 2 1 6 7 5 4 1", "5", "2.输出样例:", "1 3 4 2 1 6 7 4 1", "\n", "在成功构建单链表之后应该怎么做呢？", "\n", "本人代码：", "#include<stdio.h>", "#include<stdlib.h>", "#define N 10", "typedef int SLTDateType;", "typedef struct Node", "{", "    SLTDateType date;", "    struct Node *next;", "}Node,*LinkList;", "SLTDateType LinkList_Init(LinkList &L)", "{", "    L=(LinkList)malloc(sizeof(Node));", "    if(L==NULL)", "        exit(-1);", "    L->next=NULL;", "    return 1;", "}", "void LinkList_createR(LinkList L,int n)", "{", "    int i;", "    Node *p,*r;", "    r=L;", "    scanf(\"%d\",n);", "    for(i=0;i<n;i++)", "    {", "        p=(LinkList)malloc(sizeof(Node));", "        scanf(\"%d\",&p->date);", "        p->next=NULL;", "        r->next=p;", "        r=p;", "    }", "}", "void LinkList_print(LinkList L)", "{", "   Node *p;", "   p=L->next;", "   while(p)", "   {", "       printf(\"%d \",p->date);", "       p=p->next;", "   }", "   printf(\"\\n\");", "}", "\n", "int main()", "{", "    LinkList L;", "    int i;", "    int n=N;", "    LinkList_Init(L);", "    LinkList_createR(L,N);", "    printf(\"%d\");", "    LinkList_print(L);", "    return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "你的d是不是每个数重新计算时没有初始化。。", "Konwledge_Point": "算法与数字", "Question": ["小白求助 算法有错误 找不出来，可以运行但是无法达到效果", ["计算水仙花数的算法", "\n#include", "\nint main()", "\n{", "\nint a=100,b,c,d=0;", "\nwhile(a<1000)", "\n{", "\n    b=a;", "\n    while(b!=0)", "\n    {", "\n\n", "c=b%10;", "\nd=d+c*c*c;", "\nb=b/10;", "\n    }", "\n\n", "if(a==d)", "\nprintf(\"%d\",d);", "\na++;", "\n\n", "}", "\n}", "\n可以运行但是运行后没出数字啊啊啊啊"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以用 快速排序 或者 归并排序&amp;#xff0c;或者 希尔排序 都是比冒泡快的。&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/119976287\" id=\"textarea_1630448172561_1630448234069_0\" class=\"md_link_card\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n  &lt;span class=\"md_link_title\"&gt;❤️五万字《十大排序算法》动图讲解❤️(建议收藏)_英雄哪里出来-CSDN博客&lt;/span&gt;\n  &lt;span class=\"md_link_desc\" style=\"\"&gt;打开算法大门&amp;#xff0c;从排序开始&lt;/span&gt;\n  &lt;span class=\"md_flex_card\"&gt;\n  &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n    &lt;span class=\"flex-1\"&gt;\n      &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/WhereIsHeroFrom/article/details/119976287&lt;/span&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["有没有更好的排序算法", ["题目：", "\n", "\n", "我的代码：", "\n", "void sort", "_maoPao(", "int", "*", " ", "people", ",", "int", " ", "peopleSize", ")", "\n{\n    ", "int", " i,j;\n    ", "int", " temp = ", "0", ";\n    ", "for", "(i=", "0", ";i<peopleSize-", "1", ";i++){\n        ", "for", "(j=", "1", ";j<peopleSize-i;j++){\n            ", "if", "(people", "[", "j", "-", "1", "]", "<people", "[", "j", "]", "){\n                temp = people", "[", "j", "]", ";\n                people", "[", "j", "]", " = people", "[", "j", "-", "1", "]", ";\n                people", "[", "j", "-", "1", "]", " = temp;\n            }\n        }\n    }\n}\n\nvoid sort", "_jiShu(", "int", "*", " ", "const", " ", "people", ",", "int", " ", "peopleSize", ",", "int", " ", "min", ",", "int", " ", "max", ")", "\n{\n    ", "int", " i,j;\n    ", "int", "* num;\n    num = (", "int", "*)malloc(max*", "4", "+", "4", ");\n    memset(num,", "0", ",sizeof(", "int", ")*(max+", "1", "));\n\n    ", "//将数组people中min~max的数字的个数分别存放在num数组的，num数组的下标对应当前存的数字", "\n    ", "for", "(i=min;i<=max;i++){\n        ", "for", "(j=", "0", ";j<peopleSize;j++){\n            ", "if", "(people", "[", "j", "]", " == ", "i){\n                num", "[", "i", "]", "++;\n            }\n        }\n    }\n    ", "/*\n    for(i=min;i<=max;i++){\n        printf(\"num[%d]:%d\\n\",i,num[i]);\n    }\n    */", "\n    ", "//按照num中各个数字的个数，对people重新赋值", "\n    ", "int", " n = ", "0", ";\n    ", "for", "(i=max;i>=min;i--){\n        ", "for", "(j=", "0", ";j<num", "[", "i", "]", ";j++){\n            people", "[", "n", "]", " = i;\n            n++;\n        }\n    }\n}\n\nvoid people", "MinAndMax(", "int", "*", " ", "people", ",", "int", " ", "peopleSize", ",", "int", "*", " ", "const", " ", "min", ",", "int", "*", " ", "const", " ", "max", ")", "\n{\n    ", "int", " i;\n    ", "for", "(i=", "0", ";i<peopleSize;i++){\n        ", "if", "(*min>people", "[", "i", "]", "){\n            *min = people", "[", "i", "]", ";\n        }\n        ", "if", "(*max<people", "[", "i", "]", "){\n            *max = people", "[", "i", "]", ";\n        }\n    }\n}\n\n", "int", " num", "RescueBoats(", "int", "*", " ", "people", ", ", "int", " ", "peopleSize", ", ", "int", " ", "limit", ")", "{\n    ", "int", " left = ", "0", ";\n    ", "int", " ret = peopleSize-", "1", ";\n    ", "int", " num = ", "0", ";\n    ", "int", " min = people", "[", "0", "]", ";\n    ", "int", " max = people", "[", "0", "]", ";\n\n    people", "MinAndMax(", "people", ",", "peopleSize", ",&", "min", ",&", "max", ")", ";\n    ", "//printf(\"min:%d\\nmax:%d\\n\",min,max);", "\n    ", "//sort_maoPao(people,peopleSize);", "\n    sort", "_jiShu(", "people", ",", "peopleSize", ",", "min", ",", "max", ")", ";\n", "/*\n    for(int i=0;i<peopleSize;i++){\n        printf(\"%d \",people[i]);\n    }\n*/", "\n    ", "for", "(left=", "0", ";left<=ret;left++){\n        ", "if", "(people", "[", "left", "]", " == ", "limit){\n            num++;\n            continue;\n        }\n        ", "if", "( (people", "[", "left", "]", "+people", "[", "ret", "]", ") <= limit){\n            num++;\n            ret--;\n            continue;\n        }", "else", "{\n            num++;\n            continue;\n        }\n        ", "if", "(left", " == ", "ret){\n            num++;\n        }\n    }\n    return num;\n}\n", "\n", "问题：", "一开始我用的冒泡排序，但是有一组测试案例给的数据量特别大，5000多个，用冒泡排序会超时；", "后来我发现这组数据最小值到最大值跨度不是很大，我就用了计数排序；", "结果在这个案例后面还有一个案例：数据量大，最小值到最大值跨度也大0.0；", "然后冒泡和计数排序都会超时；", "请问有没有更好的排序算法，或者解决方法"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/298919936466146.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;iostream&amp;gt;\nusing namespace std;\nvoid quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;[], &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//原型声明&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;]&lt;/span&gt; &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}, k, i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, len &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; c;\n    &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        i&amp;#43;&amp;#43;, len&amp;#43;&amp;#43;;\n        c &amp;#61; getchar&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (c  !&amp;#61; &lt;span class=\"hljs-character\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;);\n\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;The orginal arrayare:&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; ( k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; k&amp;lt;len; k&amp;#43;&amp;#43;)\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;]&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n    cout &amp;lt;&amp;lt; endl;\n\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;array&lt;/span&gt;, 0, &lt;span class=\"hljs-params\"&gt;len&lt;/span&gt; - 1)&lt;/span&gt;;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;The sorted arrayare:&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; k&amp;lt;len; k&amp;#43;&amp;#43;)\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;]&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//打印数组&lt;/span&gt;\n    cout &amp;lt;&amp;lt; endl;\n    system(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\nvoid quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;[], &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;l&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (l&amp;lt; r)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; l, j &amp;#61; r, x &amp;#61; s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;l&lt;/span&gt;]&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt; j)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt; j&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt; &amp;gt;&amp;#61; x) &lt;span class=\"hljs-comment\"&gt;// 从右向左找第一个小于x的数&lt;/span&gt;\n                j--;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;lt; j)\n                s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt; j&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&amp;lt; x) &lt;span class=\"hljs-comment\"&gt;// 从左向右找第一个大于等于x的数&lt;/span&gt;\n                i&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;lt; j)\n                s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;--]&lt;/span&gt; &amp;#61; s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;;\n        }\n        s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; x;\n        quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;l&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;i&lt;/span&gt; - 1)&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 递归调用&lt;/span&gt;\n        quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;i&lt;/span&gt; &amp;#43; 1, &lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;)&lt;/span&gt;;\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;有帮助点个采纳&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于#算法#的问题：递归与分治法实现快速排序算法，输入一串以英文字符逗号隔开的数字，按升序排列法实现快速排序算法，提交实验报告(语言-c++)", ["递归与分治法实现快速排序算法，输入一串以英文字符逗号隔开的数字，按升序排列法实现快速排序算法，提交实验报告。", "要求：", "1、以word形式提交实验报告，其中运行结果包含3个测试用例。", "2、源码project名称，或类名，或代码注释等形式，体现个人信息，如姓名和学号。", "3、word命名：班级+学号+姓名+算法分析第2章实验报告"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;递归条件改一下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; (s/&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;!&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        &lt;span class=\"hljs-attribute\"&gt;constest&lt;/span&gt;(s / &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["c++递归算法 整形数字 转换 字符串", ["题目：用递归法将一个整数 n 转换成字符串，例如：输入483,应输出字符串\"483\"。n的位数是不确定的。", "问题：输出后开头多出来一个 0 ，why?", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<string>", "\n", "using", " ", "namespace", " std;\n\n", "void", " ", "constest", "(", "int", " s)", "\n", "{\n    ", "int", " t;\n    ", "char", " a;\n    ", "if", " (s != ", "0", ")\n        ", "constest", "(s / ", "10", ");\n    t = s % ", "10", ";\n    a = t + ", "'0'", ";\n    cout << a;\n}\n\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " s;\n    cout << ", "\"输入整数: \"", ";\n    cin >> s;\n    ", "constest", "(s);\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;int sum;要初始化&amp;#xff0c;改为 int sum &amp;#61; 0;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["求解怎么写，数字排序，我的代码错哪了", ["题目6：数字排序", "问题描述", "　　给定n个整数，请计算每个整数各位数字和，按各位数字和从大到小的顺序输出。", "输入格式", "　　输入的第一行包含一个整数n，表示给定数字的个数。", "　　第二行包含n个整数，相邻的整数之间用一个空格分隔，表示所给定的整数。", "输出格式", "　　输出多行，每行包含两个整数，分别表示一个给定的整数和它的各位数字和。按各位数字和递减的顺序输出。如果两个整数各位数字和相同，则先输出值较小的，然后输出值较大的。", "样例输入", "5", "101 100 999 1234 110", "样例输出", "999 27", "1234 10", "101 2", "110 2", "100 1", "评测用例规模与约定", "　　1 ≤ n ≤ 1000，给出的数都是不超过10000的非负整数。"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/zhaihao1996/article/details/52004906", "Konwledge_Point": "算法与数字", "Question": ["这个素数数字的算法，和一般的不太一样，它是基于不同的进制的，怎么算？", ["Problem Description", "\nFermat's theorem states that for any prime number p and for any integer a > 1, a^p == a (mod p). That is, if we raise a to the pth power and divide by p, the remainder is a. Some (but not very many) non-prime values of p, known as base-a pseudoprimes, have this property for some a. (And some, known as Carmichael Numbers, are base-a pseudoprimes for all a.) ", "\nGiven 2 < p ≤ 1,000,000,000 and 1 < a < p, determine whether or not p is a base-a pseudoprime. ", "\n\n", "Input", "\nInput contains several test cases followed by a line containing \"0 0\". Each test case consists of a line containing p and a.", "\n\n", "Output", "\nFor each test case, output \"yes\" if p is a base-a pseudoprime; otherwise output \"no\". ", "\n\n", "Sample Input", "\n3 2", "\n10 3", "\n341 2", "\n341 3", "\n1105 2", "\n1105 3", "\n0 0", "\n\n", "Sample Output", "\nno", "\nno", "\nyes", "\nno", "\nyes", "\nyes"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, a;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        cin &amp;gt;&amp;gt; n;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, s &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;) {\n            cin &amp;gt;&amp;gt; a;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt; &amp;amp;&amp;amp; a &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;) {\n                s &amp;#43;&amp;#61; a;\n            } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || a &amp;gt; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;) {\n                f &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(f &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n            cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; endl;\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;N&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["C++基础题 帮帮忙看一下 .在.线.等.待.", ["\n", "                                                   武提交：", "277", " 则试通过：", "70", "\n描述\n  读入", "n", "（", "0", "<", "n", "<=", "20", "）门课程的成绩ai（", "0", "<=ai<=", "100", "）。输出所有大于或等于", "60", "分的成绩之和。如果其中有一门及以上成\n  绩中有小于", "0", "分或者大于", "100", "分的情况，则直接输出", "N", "”\n输入\n 读入有多组，以", "n", "==", "0", "为结束\n 每组数据占", "2", "行，第", "1", "行为", "n", "，第", "2", "行为", "n", "个整数\n输出\n 输出及格的总分或", "N", "”\n样例输入\n  ", "4", "\n ", "60", " ", "50", " ", "70", " ", "40", "\n ", "90", " ", "60", " ", "80", " ", "110", "\n ", "0", "\n样例输出\n ", "130", "\n  ", "N", "\n"]], "Tag": "算法设计"}
{"Answer": "```\r\n package com.test;  \r\n  \r\nimport java.util.ArrayList;  \r\nimport java.util.List;  \r\n  \r\npublic class MyTest02 {  \r\n    public static void main(String[] args) {  \r\n        int[] a = { 13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7 };  \r\n        int[] s = getMaxSummary(a, 0, 15);  \r\n        for (int i = 0; i &lt; s.length; i++) {  \r\n            System.out.println(s[i]);  \r\n        }  \r\n    }  \r\n  \r\n    /** \r\n     * 程序主入口 \r\n     * @param A \r\n     * @param low \r\n     * @param high \r\n     * @return \r\n     */  \r\n    public static int[] getMaxSummary(int[] A, int low, int high) {  \r\n        if (low == high) { // 如果長度就一個，那麼就把這個取出來  \r\n            int[] result = { low, high, A[low] };  \r\n            return result;  \r\n        } else {  \r\n            int middle = (int) Math.floor((low + high) / 2); // 获取中间值  \r\n            int[] left = new int[3]; // 保存左边部分返回结果  \r\n            int[] right = new int[3]; // 保存右边部分返回结果  \r\n            int[] cross = new int[3]; // 返回交叉部分返回结果  \r\n            left = getMaxSummary(A, low, middle);  \r\n            right = getMaxSummary(A, middle + 1, high);  \r\n            cross = getMaxCrossMid(A, low, high, middle);  \r\n            if (left[2] &gt;= right[2] &amp;&amp; left[2] &gt;= cross[2]) {   // 那部分大就用了那部分  \r\n                return left;  \r\n            } else if (right[2] &gt;= left[2] &amp;&amp; right[2] &gt;= cross[2]) {  \r\n                return right;  \r\n            } else {  \r\n                return cross;  \r\n            }  \r\n        }  \r\n    }  \r\n  \r\n    /** \r\n     * 獲取最大子數組（一部分在左邊，一部分在右邊） \r\n     *  \r\n     * @param A \r\n     * @param low \r\n     * @param high \r\n     * @param middle \r\n     * @return \r\n     */  \r\n    public static int[] getMaxCrossMid(int[] A, int low, int high, int middle) {  \r\n        int leftSum = Integer.MIN_VALUE;  \r\n        int sum = 0; // 保存和的  \r\n        int left = 0; // 记录左边位置  \r\n        for (int i = middle; i &gt;= low; i--) {  \r\n            sum = sum + A[i];  \r\n            if (sum &gt; leftSum) { // 证明所加数字为正数，那么符合条件（因为最大子数组内正数越多指定越大）  \r\n                leftSum = sum;  \r\n                left = i;  \r\n            }  \r\n        }  \r\n  \r\n        int rightSum = Integer.MIN_VALUE;  \r\n        int sum2 = 0;  \r\n        int right = 0; // 记录右边位置  \r\n        for (int i = middle + 1; i &lt;= high; i++) {  \r\n            sum2 = sum2 + A[i];  \r\n            if (sum2 &gt; rightSum) {  \r\n                rightSum = sum2;  \r\n                right = i;  \r\n            }  \r\n        }  \r\n  \r\n        int[] result = new int[3];  \r\n        result[0] = left;  \r\n        result[1] = right;  \r\n        result[2] = leftSum + rightSum;  \r\n        return result;  \r\n    }  \r\n  \r\n      \r\n      \r\n      \r\n}\r\n```", "Konwledge_Point": "算法与数字", "Question": ["一个关于分治算法的问题", ["比如有一个List L = [(0,1), (1, 0), (0, 1), (1, 1), (1, 2), (3, 1), (3, 1), (2, 2), (2, 3), (3, 2), (2, 3), (4, 3), (3, 4), (4, 4), (4, 5), (5, 5)]", "\n\n", "包含N对两两一起的Integer", "\n现在有 (ai,bi)∈L  和 (aj,bj)∈L ", "\n\n", "我们假设如果任意两对满足以下**三种情况其一**，就称这两组数是一对", "\nai=aj  并且 bi=bj", "\nai<aj", "\nbi<bj", "\n比如 (1,2) (1,1)就不是一对，因为任意一个条件都不满足", "\n\n", "那么假设我们有一组中间的（ai，bi），在满足什么情况下我们可以直接停止搜索他的对子呢？", "\n\n", "另外用**分治法**的话，给出一组数字，如何寻找他的一对数组呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;没必要动态数组&amp;#xff0c;你改用全局变量&amp;#xff0c;int a[200000]这样&amp;#xff0c;快点&amp;#xff0c;最多空间应该用到0.76MB&amp;#xff0c;没有超&amp;#xff1b;每次动态数组申请浪费时间&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["请教用c++的vector如何实现（如图有时间限制哦）", ["题目截图如下：", "\n", "本人第一次写数据结构代码，不知道如何用vector解决问题。目前（超时代码）如下：", "\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "<string>", "\n", "using", " ", "namespace", " std;\n\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " n, m;\n    cin >> n >> m;\n    ", "int", "* a = ", "new", " ", "int", "[n];\n    ", "int", "* b = ", "new", " ", "int", "[n];\n    ", "int", "* x = ", "new", " ", "int", "[m];\n    ", "int", "* y = ", "new", " ", "int", "[m];\n    ", "for", " (", "int", " i = ", "0", ";i < n;i++)\n    {\n        cin >> a[i] >> b[i];\n    }\n    ", "for", " (", "int", " i = ", "0", ";i < m;i++)\n    {\n        cin >> x[i] >> y[i];\n    }\n    ", "for", " (", "int", " i = ", "0", ";i < m;i++)\n    {\n        ", "int", " lo=", "0", ", hi=n;\n        ", "while", " (", "1", " < hi-lo)\n        {\n            ", "int", " mi = (hi + lo) >> ", "2", ";\n            ", "long", " ", "long", " ", "int", " t;\n            t = (", "long", " ", "long", ")b[mi] * (", "long", " ", "long", ")x[i] + (", "long", " ", "long", ")a[mi] * (", "long", " ", "long", ")y[i] - (", "long", " ", "long", ")a[mi] * (", "long", " ", "long", ")b[mi];\n            ", "if", " (t >= ", "0", ")\n                lo = mi + ", "1", ";\n            ", "else", "\n                hi = mi;\n        }\n        ", "long", " ", "long", " ", "int", " t;\n        t = (", "long", " ", "long", ")b[lo] * (", "long", " ", "long", ")x[i] + (", "long", " ", "long", ")a[lo] * (", "long", " ", "long", ")y[i] - (", "long", " ", "long", ")a[lo] * (", "long", " ", "long", ")b[lo];\n        ", "if", " (t >= ", "0", ")\n            cout << lo + ", "1", " << endl;\n        ", "else", "\n            cout << lo << endl;\n    }\n    ", "delete", " []a, b, x, y;\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "class Solution {\r\n\t/*\r\n\t *N 表示地图大小\r\n\t *S 表示船只的大小\r\n\t *T 表示被命中的位置\r\n\t * N = 4，S =“1B 2C，2D 4D”和T =“2B 2D 3D 4D 4A”\r\n\t * */\r\n\tpublic static String solution(int N,String S,String T) throws Exception{\r\n\t\tint hitShipLostCount = 0;\r\n\t\tint hitShipRunCount = 0;\r\n\t\t//获取没亮船只\r\n\t\tif(S != null &amp;&amp; S != \"\"){\r\n\t\t\tString[] ships = S.split(\",\");\r\n\t\t\t//遍历船只，获取船只的每个位置\r\n\t\t\tfor (String ship : ships) {\r\n\t\t\t\t//获取船只最小位置\r\n\t\t\t\tString shipMin = ship.substring(0,ship.indexOf(\" \"));\r\n\t\t\t\tint xMin = Integer.valueOf(shipMin.charAt(0) + \"\");\r\n\t\t\t\tchar yMin = shipMin.charAt(1);\r\n\t\t\t\t\r\n\t\t\t\t//获取船只最大位置\r\n\t\t\t\tString shipMax = ship.substring(ship.indexOf(\" \") + 1);\r\n\t\t\t\tint xMax = Integer.valueOf(shipMax.charAt(0) + \"\");\r\n\t\t\t\tchar yMax = shipMax.charAt(1);\r\n\t\t\t\tif(xMax &lt;= N){\r\n\t\t\t\t\t//定义集合保存船只的位置\r\n\t\t\t\t\tList&lt;String&gt; shipPieces = new ArrayList&lt;String&gt;();\r\n\t\t\t\t\tfor (int i = xMin; i &lt;= xMax; i++) {\r\n\t\t\t\t\t\tfor (int j = yMin; j &lt;= yMax; j++) {\r\n\t\t\t\t\t\t\tString s = (char)j + \"\";\r\n\t\t\t\t\t\t\tshipPieces.add(i + s);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//获取被炮弹命中的位置,并去掉重复的\r\n\t\t\t\t\tSet&lt;String&gt; shells = new HashSet&lt;String&gt;();\r\n\t\t\t\t\tString[] shellsArr = T.split(\" \");\r\n\t\t\t\t\tfor (String shell : shellsArr) {\r\n\t\t\t\t\t\tshells.add(shell);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//用于记录船只被击中的碎片数\r\n\t\t\t\t\tint count = 0;\r\n\t\t\t\t\tfor (String shipPiece : shipPieces) {\r\n\t\t\t\t\t\tfor (String shell : shells) {\r\n\t\t\t\t\t\t\tif(shipPiece.equals(shell)){\r\n\t\t\t\t\t\t\t\tcount ++ ;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//被击中沉没船只的数量\r\n\t\t\t\t\tif(count == shipPieces.size()){\r\n\t\t\t\t\t\thitShipLostCount ++ ;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//击中未沉没船只的数量\r\n\t\t\t\t\tif(count &gt; 0 &amp;&amp; count &lt; shipPieces.size()){\r\n\t\t\t\t\t\thitShipRunCount ++ ;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthrow new Exception(\"船只还没有完全进入地图\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\treturn hitShipLostCount + \",\" + hitShipRunCount;\r\n\t}; \r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tString answer = solution(4,\"1B 2C,2D 4D\",\"2B 2D 3D 4D 4A\");\r\n\t\t\tSystem.out.println(answer);\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\n```\r\n \r\n```", "Konwledge_Point": "算法与数字", "Question": ["Java 小白求编写一道算法题 能运行出结果立即采纳", ["这是一道Java算法测试题，只是题目有点长，但看着图片和例子，耐心多读一下就能很容易明白，同学都说题目不难，但本人实在是小白，特此求助，能编写运行出结果立即采纳给分，拜托了。", "\n\n", "现有大小为N行的正方形地图，编号从1到N，每行包含N个单元格，每列标有连续的英文大写字母（A，B，C等）。每个单元格通过行编号及列编号组成的串来标识：例如，“9C” 表示第9行中的第三单元,“15D”表示第15行中的第四单元。", "\n\n", "如下图所示，现有几个最大面积不超过4个单元格组成的矩形，X表示被标记的单元格。", "\n\n", "目标是计算 被X标记且标记满的矩形的数量 和 被X标记但未被标记满的矩形数量。（请看例子）", "\n\n", "例如，下图显示了一个大小为N = 4的地图，两个蓝色矩形（一个正方形，一个长方形）和五个用字母“x”标记的单元格;", "\n\n", "\n\n", "在这个例子中，长方形的三个单元格已经被标记满，正方形只有一个单元格被标记，但未被标记满。在下一张图片中，标记满的矩形被显示为灰色，未标记满的矩形显示为红色：", "\n\n", "\n\n", "用字符串S表示矩形的位置，其分别包含描述矩形的左上角和右下角单元格的位置对。矩形之间用逗号分隔。如上图，S =“1B 2C，2D 4D”。字符串T表示被标记的单元格的位置，包含描述被击中的地图单元的位置：如图，T =“2B 2D 3D 4D 4A”。 S中的矩形和T中的被标记单元格可以以任何顺序出现。", "\n\n", "写一个函数：", "\n\n", "class Solution {public String solution（int N，String S，String T）; ｝", "\n\n", "设地图的大小为N,字符串S描述矩形位置,T描述被标记的单元格，要求返回具有两个数字的字符串：被标记满的矩形的数量和被标记但未被标记满的矩形数量，用逗号分隔。", "\n\n", "例如，假设N = 4，S =“1B 2C，2D 4D”和T =“2B 2D 3D 4D 4A”，您的函数应返回“1,1”，如上所述。"]], "Tag": "算法设计"}
{"Answer": "有2种方法第一种就是再开辟一个与datas相同长度的数组(datax)。这个数组里面都是二进制。假设datas的长度，datax长度为3\r\n将datax从 000 001 010 011 100 101 110 111 只要末尾不断加1再不超过2\r\n然后将datas的相应位置与datax的相应位置的数据相乘\r\n若datas数据为 1 2 3 min -- 2 max --4 count -- 2\r\ndatax 000 001\t 010\t\t  011     \t100       101 \t\t      110 \t       \t111\r\nsum    0   1*3   1*2\t\t 1*2+1*3\t1*1\t\t1*1+1*3\t\t1*1+1*2\t\t1*1+1*2+1*3\r\n只要sum&gt;=min&amp;&amp;sum&lt;=max至于count只要在符合sum的前提下datax的1的个数&lt;=count就行\r\n\r\n另外一种是回溯法原理和上面类似\r\n\r\n\r\n\r\n\r\n```\r\n\r\n\r\n\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class A {\r\n\tpublic static Integer[] datas = new Integer[]{1,2,3,4,5,6,7,8,9,10,11};\r\n\tpublic static Integer[] datasx = new Integer[datas.length];\r\n\tpublic static Integer y = 100;\r\n\tpublic static void main(String[] args) {\r\n\r\n        Integer min = 6;\r\n        Integer max = 12;\r\n        Integer count = 3;\r\n        List&lt;List&lt;Integer&gt;&gt; test = three(datas, min, max, count);\r\n        \r\n        \r\n        for(List&lt;Integer&gt; list : test){\r\n        \tfor(Integer t:list){\r\n        \t\tSystem.out.print(\"[\"+t+\"]\");\r\n        \t}\r\n        \tSystem.out.println();\r\n        }\r\n\r\n\t\t\r\n       // dox(32,min,max,3);\r\n\r\n    }\r\n\r\n    \r\n    \r\n    public static List&lt;List&lt;Integer&gt;&gt; three(Integer datas[], Integer min, Integer max,Integer count){\r\n        List&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();\r\n        List&lt;List&lt;Integer&gt;&gt; list  = new ArrayList&lt;List&lt;Integer&gt;&gt;();\r\n        double b = (double)datas.length;\r\n        Integer u = (int)Math.pow(2.0, b)-1;\r\n        System.out.println(\"wjc\"+u);\r\n        int y = 0;\r\n        while(y &lt; u){\r\n        \ty+=1;\r\n        \tresult = dox(y,min,max,count);\r\n        \tif(result != null){\r\n        \t\tlist.add(result);\r\n        \t}\r\n        \t\r\n        }\r\n        return list;\r\n    }\r\n\tprivate static List&lt;Integer&gt; dox(int parseInt,Integer min, Integer max,Integer count) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\t\r\n\t\t List&lt;Integer&gt; result1 = new ArrayList&lt;&gt;();\r\n\t\t int sum = 0;\r\n\t\t int j = 0;\r\n\t\t int y = 0;\r\n\t\t int p;\r\n\t\t for(int i = 0;i&lt;datasx.length;i++){\r\n\t\t\t datasx[i] = 0;\r\n\t\t }\r\n\t\t \r\n\t\t if(y&gt;count){\r\n\t\t\t return null;\r\n\t\t }\r\n\t\t \r\n\t\t while(parseInt&gt;0){\r\n\t\t\t p = parseInt%2;\r\n\t\t\t parseInt = parseInt/2;\r\n\t\t\t if(p == 1){\r\n\t\t\t\t y++;\r\n\t\t\t\t result1.add(datas.length-1-j);\r\n\t\t\t }\r\n\t\t\t datasx[j++] = p; \r\n\t\t } \r\n\t\t \r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t for(int i = datasx.length-1;i&gt;=0;i--){\r\n\t\t//\tSystem.out.print(datasx[i]);\r\n\t\t\t sum += datas[datas.length-1-i]*datasx[i];\r\n\t\t }\r\n\t\t//System.out.println();\r\n\t\t//System.out.println(sum);\r\n\t\t if(sum &gt;= min &amp;&amp; sum &lt;=max){\r\n\t\t\t return result1;\r\n\t\t }\r\n\t\t return null;\r\n\t}\r\n\r\n}\r\n\r\n\r\n```\r\n上面的代码是我说的第一种方法", "Konwledge_Point": "算法与数字", "Question": ["java 从数组取出指定数量的值，相加大于等于或小于等于指定的值，取出对应的组合下标，下标不能重复", ["Integer[] datas = new Integer[]{1,2,3,4,5,6,7,8,9,10,11}；//目标数组", "\nInteger min = 6;//大于等于的值", "\nInteger max = 12;//小于等于的值", "\nInteger count = 3;//指定数量", "\n\n", "根据count如：3,3个数相加大于等于min小于等于max，2个数相加大于等于min小于等于max，1个数相加大于等于min小于等于max。", "\n如果count=2,2个........,1ge.........。", "\n返回List。", "\n\n", "下面代码是我写死，我想知道怎样写活【count】", "\n\n", "public static void main(String[] args) {\n        Integer[] datas = new Integer[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n        Integer min = 6;\n        Integer max = 12;\n        Integer count = 3;\n        List<Integer[]> test = test(datas, min, max, count);\n        for(Integer[] integers : test){\n            for(Integer t : integers){\n                System.out.print(\"[\"+t+\"]\");\n            }\n            System.out.println(\"\");\n        }\n\n    }\n    public static List<Integer[]> test(Integer[] datas, Integer min, Integer max, Integer count){\n        List<Integer[]> result = new ArrayList<>();\n        switch (count){\n            case 1:\n                result.addAll(one(datas, min, max));\n                break;\n            case 2:\n                result.addAll(one(datas, min, max));\n                result.addAll(two(datas, min, max));\n                break;\n            case 3:\n                result.addAll(one(datas, min, max));\n                result.addAll(two(datas, min, max));\n                result.addAll(three(datas, min, max));\n                break;\n        }\n        return result;\n    }\n\n    public static List<Integer[]> one(Integer[] datas, Integer min, Integer max){\n        List<Integer[]> result = new ArrayList<>();\n        for(int i = 0,len = datas.length; i < len; i++){\n            if(datas[i] >= min && datas[i] <= max){\n                result.add(new Integer[]{i});\n            }\n        }\n        return result;\n    }\n\n    public static List<Integer[]> two(Integer[] datas, Integer min, Integer max){\n        List<Integer[]> result = new ArrayList<>();\n        for(int i = 0,len = datas.length; i < len; i++){\n            for(int j = 1 + i; j < len; j++){\n                Integer num = datas[i] + datas[j];\n                if(num >= min && num <= max){\n                    result.add(new Integer[]{i,j});\n                }\n            }\n        }\n        return result;\n    }\n\n    public static List<Integer[]> three(Integer datas[], Integer min, Integer max){\n        List<Integer[]> result = new ArrayList<>();\n        for(int i = 0,len = datas.length; i < len; i++){\n            for(int j = 1 + i; j < len; j++){\n                for(int k = 1 + j; k < len; k++){\n                    Integer num = datas[i] + datas[j] + datas[k];\n                    if(num >= min && num <= max){\n                        result.add(new Integer[]{i,j,k});\n                    }\n                }\n            }\n        }\n        return result;\n    }\n", "\n\n", "输出的【下标】组合", "\n\n", "[5]\n[6]\n[7]\n[8]\n[9]\n[10]\n[11]\n[0][4]\n[0][5]\n[0][6]\n[0][7]\n[0][8]\n[0][9]\n[0][10]\n[1][3]\n[1][4]\n[1][5]\n[1][6]\n[1][7]\n[1][8]\n[1][9]\n[2][3]\n[2][4]\n[2][5]\n[2][6]\n[2][7]\n[2][8]\n[3][4]\n[3][5]\n[3][6]\n[3][7]\n[4][5]\n[4][6]\n[0][1][2]\n[0][1][3]\n[0][1][4]\n[0][1][5]\n[0][1][6]\n[0][1][7]\n[0][1][8]\n[0][2][3]\n[0][2][4]\n[0][2][5]\n[0][2][6]\n[0][2][7]\n[0][3][4]\n[0][3][5]\n[0][3][6]\n[0][4][5]\n[1][2][3]\n[1][2][4]\n[1][2][5]\n[1][2][6]\n[1][3][4]\n[1][3][5]\n[2][3][4]\n\n"]], "Tag": "算法设计"}
{"Answer": "给你提供一种思路：获取n个随机数n1,n2,n3...，分别对某个数取余并加1作为最后的值，把所有取余得到的值加起来得到sum，\r\n每个人获得的红包=n1/sum*红包\r\n\r\n比如红包总数为100，发给5个人，这5个人对应获得的随机数分别为11，13，5，20，99，对10取余加1\r\n那么第1个人对应的n值为11%10+1=2\r\n其余的人为4，6，1，10\r\nsum=2+4+6+1+10=23\r\n第1个人的红包=2/23*100=8.69\r\n不知道你看懂了没", "Konwledge_Point": "算法与数字", "Question": ["php 循环10次随机数，加起来的和要为100，这个怎么写？", ["循环10次，每次得到一个随机数，相加要等于100，随机数不能为0，且随机数需有大有小", "\n\n", "function randStr($num,$max){\n        $sum = 0;\n        $count = 0;\n        while($sum<$max){\n            $surNum = $num-$count;\n            $rand = mt_rand(1,($max-$sum-$surNum)+1);\n            $sum += $rand;\n            $count++;\n            echo $rand.\"<br/>\";\n        }\n        echo $sum;\n    }\n\n    randStr(10,100);\n", "\n\n", "我写的这个，一开始值会特别大，后面就全是2，1，1这种数，我希望得到的结果是7，9，15，3，5这种有大有小的，要怎么做呢？望各位大佬指教"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这题目用动态规划都不行, 只能从结果上找规律,直接推算了,时间复杂度O(n)&lt;br /&gt;规律是前面30个值为1,2,3,5,8,12,19,30,47,74,116,182,286,449,705,1107,1738,2729,4285,6728,10564,16587,26044,40893,64208,100816,158296,248548,390257,612761&lt;br /&gt;前面2个值为1,2,&lt;br /&gt;第3到5个值为前面两个值之和,&lt;br /&gt;第6到7个值为前面两个值之和减1.&lt;br /&gt;第7个之后的值为前面两个值之和减前面第7个值&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;n &amp;#61; &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入一个整数n&amp;#xff1a;&amp;#34;&lt;/span&gt;))\ndef pf(n):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &amp;#61; [&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,n):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:\n            t &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n        elif i &amp;lt; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;:\n            t &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            t &amp;#61; &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;[i-&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;]\n        &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;[i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#43;&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;[i-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]-t)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;[n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n\n&lt;span class=\"hljs-built_in\"&gt;count&lt;/span&gt; &amp;#61; pf(n)\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(n,&lt;span class=\"hljs-string\"&gt;&amp;#34;点伤害的方案总数:&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;count&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "算法与数字", "Question": ["Python爬楼梯算法", ["投篮得1分，远距离投篮得2分，但他由于他技术有限，不能连续3次远距离投篮，问小明成功得n分的方案数。", "\n", "输入格式:", "一行，一个数字，表示n。", "\n", "输出格式:", "输出造成n点伤害的方案总数。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你说随机算法为啥叫随机呢&amp;#xff1f;&lt;br /&gt;除非你知道他用的随机算法是什么&amp;#xff0c;不然你就只能模拟&amp;#xff0c;或者又大批数据量来找看下是否为假随机。&lt;/p&gt;\n&lt;p&gt;另外&amp;#xff0c;网页游戏的话&amp;#xff0c;看随机程序是跑在你网页代码里面的还是服务器端&amp;#xff0c;服务器端基本上没辙&amp;#xff0c;网页端直接F12改源码。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于#哈希算法#的问题：网页游戏中怪物为八个 我们把怪物用1-8数字来表达 现在可以看到1-8的怪物是随机出现的 该游戏引用随机算法  随机算法有公式吗 随机算法可以破解吗 如果可以应该使用什么工具", ["网页游戏中怪物为八个 我们把怪物用1-8数字来表达 现在可以看到1-8的怪物是随机出现的 该游戏引用随机算法  随机算法有公式吗 随机算法可以破解吗 如果可以应该使用什么工具"]], "Tag": "算法设计"}
{"Answer": "```\r\n public bool sortVector(ref list&lt;int&gt; sourceData)\r\n{\r\n  bool isSuccess = false;\r\n\tif(null != sourceData)\r\n\t{\r\n\ttry\r\n\t{\r\n  list&lt;int&gt; tem;\r\n\tdictionary&lt;String, int&gt; dicBlob = new dictionary&lt;String, int&gt;;\r\n\tforeach(var item in sourceData)\r\n\t{\r\n\tif(dicBlob.Contains(item))\r\n\t{\r\n\t dicBlob[item.ToString()].value += 1;\r\n\t}else\r\n\t{\r\n\t\tdicBlob.Add(item.ToString(),1);\r\n\t}\r\n\t}\r\n\tdicBlob.OrderDesc(r =&gt; r.value);\r\n\tforeach(var item in dicBlob.KeyArray)\r\n\t{\r\n\t\ttem.Add(item);\r\n\t}\r\n\tsourceData = tem;\r\n\t\r\n\t}catch(exception ex)\r\n\t{\r\n\t return false;\r\n\t}\r\n\t}\r\n\treturn isSuccess;\r\n}\r\n\r\n```", "Konwledge_Point": "算法与数字", "Question": ["排序问题，给出详细算法过程", ["给出算法详细过程，编写一个程序，出现次数越多，数字越大的排在前面。"]], "Tag": "算法设计"}
{"Answer": "首先 ，这是一个数学题；其次这肯定还要对y和x的差值分类（即下一层在此楼上还是下），可以使用分支语句，分支后根据给定的条件找出y的范围（y-x&lt;x-B)）,y确定后就好办了；使用两重循环找出所有的组合，然后累加，当然期间还要去除相同排列的情况。\r\n另一种情况也相同。", "Konwledge_Point": "算法与数字", "Question": [" c++算法题 坐电梯 数据结构", ["小G 来到了著名的CIGOM 大厦。大厦一共有n 层，初始的时候小G 在第A", "\n层。小G 特别想去B 层小M 的办公室看一看，然而因为安保原因，B 层已经被", "\n封锁无法进入。", "\n但是小G 既然来了，就想在大厦里面逛一逛。大厦里面有一部电梯，小G 决", "\n定坐k 次电梯。因为小G 比较无聊，他给自己设定了这样一个规矩：假如当前他", "\n在x 层，则他要去的下一个楼层y 和x 的楼层差必须要小于x 和B 的楼层差。每到达一个楼层，小G 都要记录下来其楼层号。", "\n当小G 转完一圈后，他也记录下了k +1 个楼层号（可能有重复）。小G 现在想知道，按照他定下的规矩，一共有多少种可能的楼层号序列？", "\n\n", "输入格式", "\n\n", "输入文件一行，4 个数字n; A;B; k，含义如题目所述。", "\n\n", "输出格式", "\n\n", "输出一个数字，表示可能的楼层号序列的数量。答案对109 + 7 取模。", "\n\n", "样例输入", "\n5 2 4 1", "\n样例输出", "\n2"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个应该能过了&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;\nusing namespace std;\nint main()\n{\n    int &lt;span class=\"hljs-attr\"&gt;n&amp;#61;0,a&amp;#61;0,b&amp;#61;0;&lt;/span&gt;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attr\"&gt;n&amp;#61;&amp;#61;1)&lt;/span&gt;\n        &lt;span class=\"hljs-attr\"&gt;a&amp;#61;1,b&amp;#61;9;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attr\"&gt;n&amp;#61;&amp;#61;2)&lt;/span&gt;\n        &lt;span class=\"hljs-attr\"&gt;a&amp;#61;10,b&amp;#61;98;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attr\"&gt;n&amp;#61;&amp;#61;3)&lt;/span&gt;\n        &lt;span class=\"hljs-attr\"&gt;a&amp;#61;102,b&amp;#61;987;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attr\"&gt;n&amp;#61;&amp;#61;4)&lt;/span&gt;\n        &lt;span class=\"hljs-attr\"&gt;a&amp;#61;1023,b&amp;#61;9876;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attr\"&gt;n&amp;#61;&amp;#61;5)&lt;/span&gt;\n        &lt;span class=\"hljs-attr\"&gt;a&amp;#61;10234,b&amp;#61;98765;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attr\"&gt;n&amp;#61;&amp;#61;6)&lt;/span&gt;\n        &lt;span class=\"hljs-attr\"&gt;a&amp;#61;102345,b&amp;#61;987654;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attr\"&gt;n&amp;#61;&amp;#61;7)&lt;/span&gt;\n        &lt;span class=\"hljs-attr\"&gt;a&amp;#61;1023456,b&amp;#61;9876543;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attr\"&gt;n&amp;#61;&amp;#61;8)&lt;/span&gt;\n        &lt;span class=\"hljs-attr\"&gt;a&amp;#61;10234567,b&amp;#61;98765432;&lt;/span&gt;\n    for(int &lt;span class=\"hljs-attr\"&gt;i&amp;#61;a;&lt;/span&gt; i&amp;lt;&amp;#61;b; i&amp;#43;&amp;#43;) //遍历所有n位数\n    {\n        int arr[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]&amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n        int &lt;span class=\"hljs-attr\"&gt;index&amp;#61;0,num&amp;#61;i,flag&amp;#61;1;&lt;/span&gt;\n        while (num&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-attr\"&gt;index&lt;/span&gt; &amp;#61; num % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (arr[index])\n            {\n                &lt;span class=\"hljs-attr\"&gt;flag&amp;#61;0;&lt;/span&gt;\n                break;\n            }\n            arr[index] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            num /&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag)\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,i);\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["51nod题目   n位不重复的数字", ["今天的数学课让你感到很无聊。于是你打算在纸上写下所有n位不含重复数字的数，来打发时间。", "\n", "例如：你打算写6位数，那么你会写下127643；而123347含重复的3，你不会写下它。", "\n", "你决定由小到大写出每个数，并且你不会考虑含前导0的n位数。", "\n", "输入", "输入一个数n，表示你打算写n位数。", "输出", "每行输出一个数，表示你所写下的n位数。", "数据范围", "对于100%的数据，1≤n≤8；", "输入样例", "1", "输出样例", "1", "2", "3", "4", "5", "6", "7", "8", "9"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;_node&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *data;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; length;\n} Node;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    Node head &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    head.data &amp;#61; (&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; * &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;));\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; ch;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; &amp;amp;&amp;amp; (ch &amp;#61; &lt;span class=\"hljs-built_in\"&gt;getchar&lt;/span&gt;()) !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (ch &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        head.data[i&amp;#43;&amp;#43;] &amp;#61; ch;\n    }\n    head.length &amp;#61; i;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; head.length - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt; head.length; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (head.data[i] &amp;#61;&amp;#61; head.data[j])\n            {\n                &lt;span class=\"hljs-built_in\"&gt;memcpy&lt;/span&gt;(&amp;amp;head.data[j], &amp;amp;head.data[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], head.length - j);\n                head.length--;\n                i--;\n            }\n        }\n    }\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *p &amp;#61; (&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(head.length * &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;));\n    &lt;span class=\"hljs-built_in\"&gt;memcpy&lt;/span&gt;(p, head.data, head.length);\n    &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(head.data);\n    head.data &amp;#61; p;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; head.length; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c &amp;#34;&lt;/span&gt;, head.data[i]);\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["数据结构中线性表在不知道长度的时候怎么输入数据(语言-c语言)", ["\n", "我用循环输入没有输出，刚刚开始学，希望可以解答一下，求指教😊😊非常感谢"]], "Tag": "算法设计"}
{"Answer": "我看是对的！\r\n```\r\nstruct Results solution(int T[],int M)\r\n{\r\n\tint cap = 0;\r\n\tint* res = (int*)malloc((M-1)*sizeof(int));\r\n\tfor(int i=0;i&lt;M-1;i++)\r\n\t{\r\n\t\tres[i] = 0;\r\n\t}\r\n\tfor(int i=0;i&lt;M;i++)\r\n\t{\r\n\t\tint v = T[i];\r\n\t\tint n = i;\r\n\r\n\t\tint index = 0;\r\n\t\tif(n == v)\r\n\t\t{\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\twhile(v != n)\r\n\t\t{\r\n\t\t\tindex++;\r\n\t\t\tn = v;\r\n\t\t\tv = T[v];\r\n\t\t}\r\n\r\n\t\tres[index-1]++;\r\n\t}\r\n\r\n\tResults* rs = (Results *)malloc(sizeof(Results));\r\n\trs-&gt;A = res;\r\n\trs-&gt;N = M-1;\r\n\r\n\treturn *rs;\r\n}\r\n```", "Konwledge_Point": "算法与数字", "Question": ["c语言小白求解一道算法题，能编写运行出结果立即采纳给分", ["这是一道C语言算法测试题，题目有点长，但看着图片和例子，耐心多读一下就能很容易理解，同学都说题目不难，但本人实在是小白，特此求助，能编写运行出正确结果则采纳给分，拜托了。同学说这道题要用 动态数组malloc创建。 ", "\n\n", "一个网络由M个城市和M-1条连接它们的道路组成的。城市在 [0 …（M-1) ]范围内用不同的整数标记。", "\n\n", "如下图，道路以这样的方式连接城市，每对不同的城市通过道路组成的路径连接。只有一种方法可以从任何城市到达任何其它城市。必须经过的“直接道路”的数量被称为这两个城市之间的距离。", "\n\n", "例如，考虑以下由十个城市和九条道路组成的网络：", "\n\n", "\n\n", "城市2和4直接相连，因此它们之间的距离是1.城市4和7通过由“直接道路” 4-0, 0-9和 9-7组成的路径连接; 因此它们之间的距离为3。", "\n\n", "其中一个城市是首都，此题目标是计算在距离首都 1,2,3，...，M-1的每个距离处的城市的数量。", "\n\n", "如图，如果数字1是首都，那么离首都不同距离的城市将如下：", "\n\n", "9处于距离1;", "\n0,3,7处于距离2;", "\n8,4在距离3;", "\n2，5，6距离为4。", "\n\n", "假设给出以下声明：", "\n\n", "struct Results  {", "\n\n", "int ＊ A;", "\nint N.", "\n};", "\n（A代表需要返回的数组，N代表数组的大小）", "\n要求写一个函数", "\n\n", "struct Results solution（int T [ ]，int M），", "\n\n", "给定由M个整数组成的非空的零索引数组T（描述M个城市和M-1条道路组成的网络），返回由M-1个整数组成的数组（表示距离首都1,2，…，M-1的每个距离处的城市数目）。", "\n\n", "数组T描述了一个城市网络，如下所示：", "\n\n", "如果T [P] = Q且P = Q，则P是首都;", "\n如果T [P] = Q且 P不等于Q，则P和Q之间存在“直接道路”", "\n\n", "例如，给定以下由十个元素组成的数组T; （请详细看此例）", "\n\n", "T [0] = 9  T [1] = 1  T [2] = 4", "\nT [3] = 9  T [4] = 0  T [5] = 4", "\nT [6] = 8  T [7] = 9  T [8] = 0", "\nT [9] = 1", "\n\n", "因为 T [1] = 1且1=1，则此时1为首都，", "\n则该函数应返回[1，3，2，3，0，0，0，0，0]，如上所述。", "\n\n", "假设：", "\nM是在范围[1 ... 100,000]内的整数;", "\n数组T的每个元素是在范围[0 ... M-1]内的整数;", "\n在任何两个不同的城市之间只有一个（可能是间接的）连接。", "\n\n", "复杂度：", "\n\n", "预期最坏情况时间复杂度为O（M）;", "\n预期的最坏情况空间复杂度为O（M），超出输入存储（不计算输入参数所需的存储）。", "\n\n", "输入数组的元素可以修改。"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/wmn_wmn/article/details/7371607", "Konwledge_Point": "算法与数字", "Question": ["2^x mod n = 1              ", ["Give a number n, find the minimum x that satisfies 2^x mod n = 1.", "\n\n", "Input", "\n\n", "One positive integer on each line, the value of n.", "\n\n", "Output", "\n\n", "If the minimum x exists, print a line with 2^x mod n = 1.", "\n\n", "Print 2^? mod n = 1 otherwise.", "\n\n", "You should replace x and n with specific numbers.", "\n\n", "Sample Input", "\n\n", "2", "\n5", "\n\n", "Sample Output", "\n\n", "2^? mod 2 = 1", "\n2^4 mod 5 = 1"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/u010551600/article/details/80507271", "Konwledge_Point": "算法与数字", "Question": ["关于边缘检测中canny算法中极大值抑制的问题", ["Canny算法通过对梯度大小取极大值来达到边缘‘’瘦身‘’的目的，有个疑问希望高手能解答，这是从百度百科粘过来的图，", "\n\n", "数字表示梯度幅值，方向表示梯度方向，百度上搜到的边缘“瘦身”方法举例为，比如第二排第3列。它的梯度方向是向上，因此比较它与上下的两个梯度幅值大小（5，4），7为极大值，因此被保留。", "\n\n", "问题来了，比如说第3排第4列中大小为3，方向向上的元素，它与与之相邻的上下两个元素做比较，向上的3与45°的1怎么去比较呢？", "\n\n", "希望高手指点下。。。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&amp;#xff08;1&amp;#xff09;n较大时&amp;#xff0c;fun函数中的t仍然是int类型&amp;#xff0c;计算结果超出int数据类型范围了&amp;#xff0c;把t也改成double类型。&lt;br /&gt;&amp;#xff08;2&amp;#xff09;你的fun函数代码逻辑应该是有问题&amp;#xff0c;需要在第二层for循环之前&amp;#xff0c;把t重置为1&amp;#xff1b;也就是把t&amp;#61;1放在第二层for循环之前。&lt;br /&gt;&amp;#xff08;3&amp;#xff09;fun函数中sn 没有初始化就用了&amp;#xff0c;需要先初始化为0&lt;br /&gt;代码修改如下&amp;#xff08;修改部分有注释&amp;#xff09;&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;double fun(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;)\n{\n    double sn&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;; //(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;改成double类型,sn初始化为&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    \n    for(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; //&amp;#xff08;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#xff09; &lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;放在这里&amp;#xff0c;这样才能保证每次计算的都是i的阶乘\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j;\n        for(j&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;lt;&amp;#61;i;j&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;*&amp;#61;j;\n        }\n        sn&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;/&lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;;\n    }\n    return sn;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["为什么n输入较大的时候就会输出错误", ["#include<stdio.h>", "#include<stdlib.h>", "double fun(int );", "int main()", "{", " int n;", " double s;", " printf(\"输入一个正整数\");//大于1但小于100", " scanf(\"%d\",&n);", " s=fun(n);", " printf(\"%.6f\",s);", " return 0;", "}", "double fun(int n)", "{", " double sn;", " int i,t;", " t=1;", " for(i=1;i<=n;i++){", "  int j;", "  for(j=1;j<=i;j++){", "   t*=j;", "  }", "  sn+=1.0/t;", " }", " return sn;", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你如果要模拟列竖式&amp;#xff0c;那你的所有中间结果也都应该用char[]来存啊&amp;#xff0c;不要依赖long long int类型来保存中间结果&amp;#xff0c;否则输入大到一定程度&amp;#xff0c;中间结果溢出了&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["我的高精度乘法运算算法 为什么位数不能超过105位？", ["进行高精度乘法运算时当数字输入位数超过大概105位时结果是错误的，此后随着输入位数的增加错误的位数也就越多，请问到底是怎么回事呢？", "又该如何解决这个问题呢？", "我的算法是模仿人类列竖式计算", "\n", "下面是代码 乘法函数为BIgMultiply函数", "\n", "#define _CRT_SECURE_NO_DEPRECATE", "\n", "#pragma warning(disable:4996)    //使scanf()函数可用", "\n\n", "#include<stdio.h>", "\n", "#include<stdlib.h>", "\n", "#include<string.h>", "\n", "#define N 205     //精度（数字位数） +2", "\n\n", "//", "将字符串变为倒序\nvoid reverse(char a[]) {\n    static char a2[N];\n    memset(a2, ", "0", ", sizeof(a2));\n    int xa = strlen(a) - ", "1", ";\n    int j = ", "0", ";\n\n    ", "for", " (int i = xa; i >= ", "0", "; i--) {\n        a2[j] = a[i];\n        j++;\n    }\n    memset(a, ", "0", ", sizeof(a));\n    strcpy(a, a2);\n}\n\n", "//", "将字符串换算为真实数字\nvoid str2numArry(char a[]) {\n    ", "for", " (int i = ", "0", "; a[i] != ", "'\\0'", "; i++) {\n        a[i] -= ", "'0'", ";\n    }\n}\n\nint strGetLongest(char a[], char b[]) {\n    int xa = strlen(a);\n    int xb = strlen(b);\n    int longest = xb;\n    ", "if", " (xa >= xb) {\n        longest = xa;\n    }\n    return longest;\n}\n\n", "//", "运算得出的out[]是逆序的\n\nvoid BigPlus(char ia[], char ib[], char ResultGet[]) {\n    static char out[N], a[N], b[N];\n    int JW;", "//", "进位\n    ", "//", "初始化\n    memset(out, ", "0", ", sizeof(out));\n    memset(a, ", "0", ", sizeof(a));\n    memset(b, ", "0", ", sizeof(b));\n    memset(ResultGet, ", "0", ", sizeof(ResultGet));\n    strcpy(a, ia);\n    strcpy(b, ib);\n    ", "//", "先将数字倒序(因为列竖式时需要右对齐且从需要从右往左算)\n    reverse(a);\n    reverse(b);\n\n    ", "//", "取a,b之中最长的 长度？\n    int longest = strGetLongest(a, b);\n    ", "//", "换算为真实数字\n    str2numArry(a);\n    str2numArry(b);\n    ", "//", "因为转换为真实数字之后末尾的‘", "0", "’会变成‘\\", "0", "’，又因为数组经过倒序处理，所以先导零将变成字符串结尾 ", "'\\0'", " 将被忽略。\n    ", "//", "运算\n    JW = ", "0", ";\n    ", "for", " (int i = ", "0", "; i <= longest; i++) {\n        out[i] = a[i] + b[i] + JW;\n        JW = ", "0", ";\n        ", "if", " (out[i] >= ", "10", ") {\n            JW = out[i] / ", "10", ";\n            out[i] %= ", "10", ";\n        }\n    }\n\n    int j = ", "0", ";\n    ", "while", " (out[longest] == ", "0", " && longest > ", "0", ") {\n        longest--;\n    }\n    ", "for", " (int i = longest; i >= ", "0", "; i--) {\n        ResultGet[j] = out[i] + ", "'0'", ";\n\n        j++;\n    }\n    ResultGet[j] = ", "'\\0'", ";\n}\n\nvoid BigMinus(char ia[], char ib[], char ResultGet[]) {\n    static char out[N], a[N], b[N];\n    int JW;", "//", "借位\n\n    ", "//", "初始化\n    memset(out, ", "0", ", sizeof(out));\n    memset(a, ", "0", ", sizeof(a));\n    memset(b, ", "0", ", sizeof(b));\n    memset(ResultGet, ", "0", ", sizeof(ResultGet));\n    strcpy(a, ia);\n    strcpy(b, ib);\n    ", "//", "先将数字倒序(因为列竖式时需要右对齐且从需要从右往左算)\n    reverse(a);\n    reverse(b);\n\n    ", "//", "取a,b之中最长的 长度？\n    int longest = strGetLongest(a, b);\n    ", "//", "换算为真实数字\n    str2numArry(a);\n    str2numArry(b);\n    ", "//", "因为转换为真实数字之后末尾的‘", "0", "’会变成‘\\", "0", "’，又因为数组经过倒序处理，所以先导零将变成字符串结尾 ", "'\\0'", " 将被忽略。\n\n    ", "//", "运算\n    JW = ", "0", ";\n    ", "for", " (int i = ", "0", "; i < longest; i++) {\n        out[i] = a[i] - b[i] - JW;\n        JW = ", "0", ";\n        ", "if", " (out[i] < ", "0", ") {\n            JW = ", "1", ";\n            out[i] += ", "10", ";\n        }\n    }\n\n    ", "//", "逆序输出ASCII\n    int j = ", "0", ";\n\n    ", "while", " (out[longest] == ", "0", " && longest > ", "0", ") {\n        longest--;\n    }\n    ", "for", " (int i = longest; i >= ", "0", "; i--) {\n        ResultGet[j] = out[i] + ", "'0'", ";\n\n        j++;\n    }\n    ResultGet[j] = ", "'\\0'", ";\n}\n\nvoid BigMultiply(char ia[], char ib[], char ResultGet[]) {\n    static char  out1[N][", "2", " * N], a[N+", "84", "], b[N];\n    static long long int out[", "2", " * N];\n    long long int JW;", "//", "进位\n    ", "//", "初始化\n    memset(out, ", "0", ", sizeof(out));\n    memset(out1, ", "0", ", sizeof(out1));\n    memset(a, ", "0", ", sizeof(a));\n    memset(b, ", "0", ", sizeof(b));\n    memset(ResultGet, ", "0", ", sizeof(ResultGet));\n    strcpy(a, ia);\n    strcpy(b, ib);\n\n    ", "//", "先将数字倒序(因为列竖式时需要右对齐且从需要从右往左算)\n    reverse(a);\n    reverse(b);\n\n    int la = strlen(a);\n    int lb = strlen(b);\n    int longest = strGetLongest(a, b) + ", "1", ";", "//", "中间过程结果长度可能的最大值\n    int longest_out = la + lb;", "//", "结果可能的最长长度\n    ", "//", "换算为真实数字\n    str2numArry(a);\n    str2numArry(b);\n    ", "//", "因为转换为真实数字之后末尾的‘", "0", "’会变成‘\\", "0", "’，又因为数组经过倒序处理，所以先导零将变成字符串结尾 ", "'\\0'", " 将被忽略。\n    ", "//", "运算\n    JW = ", "0", ";\n\n    ", "for", " (int i = ", "0", "; i < lb; i++) {\n        ", "for", " (int k = ", "0", ", m = i; k < longest + i; k++, m++) {", "//", "数组序列是从零开始的，用<\n            out1[i][m] = b[i] * a[k] + JW;\n            JW = ", "0", ";\n            ", "if", " (out1[i][m] >= ", "10", ") {\n                JW = out1[i][m] / ", "10", ";\n                out1[i][m] %= ", "10", ";\n            }\n            \n            printf(", "\"%d \"", ", out1[i][k]);\n        }\n        putchar(", "'\\n'", ");\n    }\n    putchar(", "'\\n'", ");\n    putchar(", "'\\n'", ");\n\n    \n    ", "//", "char test[", "50", "][", "50", "] = { {", "1", ",", "2", ",", "3", "},{", "1", ",", "1", ",", "1", "},{", "1", ",", "1", ",", "1", "} };\n    ", "//", "lb是实际列数\n    ", "for", " (int i = ", "0", "; i < longest_out; i++) {\n        out[i] = out1[", "0", "][i];\n    }\n    \n    ", "for", " (int i = ", "1", "; i < lb; i++) {\n        JW = ", "0", ";\n        ", "for", " (int j = ", "0", "; j <= longest_out; j++) {\n            out[j] += out1[i][j] + JW;\n            ", "//i", "f(out[j] < ", "0", " || out[j] > ", "9223372036854775000", ") ", "exit", "(", "0", ");", "//", "test\n            JW = ", "0", ";\n            ", "if", " (out[j] >= ", "10", ") {\n                JW = out[j] / ", "10", ";\n                out[j] %= ", "10", ";\n            }\n            ", "//i", "f (out[j] > ", "10", ") ", "exit", "(", "0", ");", "//", "test\n            ", "//i", "f (JW > ", "10", ") ", "exit", "(", "0", ");", "//", "test\n        }\n\n        \n    }\n\n\n\n    ", "//", "working\n    int j = ", "0", ";\n    ", "while", " (out[longest_out] == ", "0", " && longest_out > ", "0", ") {\n        longest_out--;\n    }\n    ", "for", " (int i = longest_out; i >= ", "0", "; i--) {\n        ResultGet[j] = out[i] + ", "'0'", ";\n        ", "//", "printf(", "\"%d\"", ",out[i]);\n        j++;\n    }\n    ResultGet[j] = ", "'\\0'", ";\n}\nint main() {\n    ", "//i", "nt T;\n    static char a[N], b[N], out[", "2", " * N];\n    /*\n    scanf(", "\"%d\"", ", &T);\n    ", "for", " (int i = ", "1", "; i <= T; i++) {\n        scanf(", "\"%s%s\"", ", a, b);\n        BigPlus(a, b, out);\n        printf(", "\"Case %d:\\n%s + %s = %s\\n\\n\"", ", i, a, b, out);\n    }\n    */\n    ", "while", " (", "1", ") {\n        scanf(", "\"%s%s\"", ", a, b);\n        BigMultiply(a, b, out);\n        printf(", "\"%s\"", ", out);\n        putchar(", "'\\n'", ");\n    }\n\n    return ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;已解决&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["leetcode算法题：第一个唯一数字", ["leetcode题目链接 ", "https://leetcode-cn.com/problems/first-unique-number/", "\n\n", "代码：", "\n\n", "\n", "class FirstUnique \n{\npublic:\n    unordered_map<int,int> num_freq;\n    vector<int> rec;\n\n    FirstUnique(vector<int>& nums) \n    {\n        for (int x: nums)\n            num_freq[x] ++;\n        for (int x : nums)\n            if (num_freq[x] == 1)\n                rec.push_back(x);\n    }\n    \n    int showFirstUnique() \n    {\n        int n = rec.size();\n        int res = -1;\n        int i = 0;\n        while (i < n)\n        {\n            if (num_freq[rec[i]] == 1)\n            {\n                res = rec[i];\n                rec.erase(rec.begin(), rec.begin() + i);\n                break;\n            }\n            i ++;\n        }\n        return res;\n\n    }\n    \n    void add(int value) \n    {\n        num_freq[value] ++;\n        if (num_freq[value] == 1)\n        {\n            rec.push_back(value);\n        }\n    }\n};\n\n/**\n * Your FirstUnique object will be instantiated and called as such:\n * FirstUnique* obj = new FirstUnique(nums);\n * int param_1 = obj->showFirstUnique();\n * obj->add(value);\n */", "\n\n", "求解释中rec.erase(rec.begin(), rec.begin() + i);的作用，我个人理解map中本就保存不重复的元素，这一句的意思应该是指删除因为新添加元素而变成不是唯一整数的数据，因为这个程序中只差这一个功能了，但是我没有理解到，谢谢！", "\n\n", "while (i < n)", "\n        {", "\n            if (num_freq[rec[i]] == 1)", "\n            {", "\n                res = rec[i];", "\n                rec.erase(rec.begin(), rec.begin() + i);", "\n                break;", "\n            }", "\n            i ++;", "\n        }", "\n\n", " ", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "so easy..\r\nint[] ints = new int[8001] ;\r\n#1遍历所有数字.按照下标放入ints 中设置为1\r\n\r\nints[0]=1\r\nints[3]=1\r\n...\r\n\r\n\r\n#2.遍历这个ints数组.一个开关程序.双向输出就可以了", "Konwledge_Point": "算法与数字", "Question": ["兄弟们帮忙想个算法，在存储过程中实现", ["一张表，ID字段，可以存储0~~8000的数字，但是存储的时候可以不连续，", "\n比如：", "\nID", "\n0", "\n3", "\n5", "\n99", "\n100", "\n1000", "\n5000", "\n现在的问题是，根据已经存入ID字段的数字，将没有使用的数字算出来，而且要分段显示，", "\n比如：", "\n开始ID    结束ID", "\n  1         2", "\n  4         4", "\n  6         98", "\n  101       999", "\n  1001      4999", "\n  5001      8000", "\n各位大拿有没有好一点的算法，", "\n多谢多谢！！"]], "Tag": "算法设计"}
{"Answer": "String str=\"111,1a11b222c3dd128182\";\r\n\t\tint n=0;char c;boolean s=true;\r\n\t\tfor(int i=0,l=str.length();i&lt;l;i++){\r\n\t\t\tc=str.charAt(i);\r\n\t\t\tif(c&lt;'0'||c&gt;'9'){\r\n\t\t\t\ts=true;continue;\r\n\t\t\t}\r\n\t\t\tif(!s)continue;\r\n\t\t\tn++;s=false;\r\n\t\t}\r\n\t\tSystem.out.println(n);\r\n\t\t//下面用正则\r\n\t\tPattern p=Pattern.compile(\"[0-9]+\");\r\n\t\tMatcher m=p.matcher(str);\r\n\t\tn=0;while(m.find())n++;\r\n\t\tSystem.out.println(n);\r\n这个嘛 面试官嘛 当面顶肯定你吃亏的嘛 心里有数才行", "Konwledge_Point": "算法与数字", "Question": ["请问一道小算法题，今天面试没有写出来，被鄙视了", ["\"abc334de55\"字符串中有多少组数字,比如这个是2", "\n\"abc334de5533aa44\"这个是3，", "\n\"abcd3343d444ed4ddd5\"这个是4", "\n\n", "就是连续的数字算是一组，一共多少组", "\n\n", "那个面试官很不给面子，说你连这个都写不出来还怎么混啊，我ding了句，说我以前的同事连冒泡排序也写不出，照样7000k"]], "Tag": "算法设计"}
{"Answer": "小白大学没认真学java，这是一道算法考试题，需要用java编写，希望有大神帮忙解答一下，题目有点长，但仔细读一下，看下举例就能明白。java编写出来能运行出结果就直接采纳给分，真心拜托了", "Konwledge_Point": "算法与数字", "Question": ["Java 小白求编写一道算法题 ", ["约翰和他的朋友索尼娅打一场战舰游戏。游戏在N行的正方形地图上进行，编号从1到N.每行包含N个单元格，每列标有连续的英文大写字母（A，B，C等）。每个单元通过由其行编号及其列编号组成的串来标识：例如，“9C” 表示第9行中的第三单元,“15D”表示第15行中的第四单元。", "\n\n", "如下图所示，船只由最大面积为4个单元格的矩形定义，X落在船上时表示船被击中，如果一个船每个部位被击中，则该船被沉没。", "\n\n", "目标是计算沉没的船只的数量和被击中但未沉没的船只的数量。", "\n\n", "例如，下图显示了一个大小为N = 4的地图，两个蓝色船只和五个用字母“x”标记的命中;", "\n在这个例子中，一艘船已经沉没，另一艘已经被击中但没有沉没。在下一张图片中，沉船被显示为灰色，被击中但尚未沉没的船舶显示为红色：", "\n\n", "船的位置被给出为字符串S，其包含分别描述每艘船的左上角和右下角单元的位置对。船舶的描述用逗号分隔。命中的位置为字符串T，包含描述被击中的地图单元的位置：对于上述示例中的地图，S =“1B 2C，2D 4D”和T =“2B 2D 3D 4D 4A”。 S中的船舶和T中的命中可以以任何顺序出现。", "\n\n", "写一个函数：", "\n\n", "class Solution {public String solution（int N，String S，String T）; ）", "\n\n", "假定地图N的大小和分别描述船只命中位置的两个字符串S，T返回具有两个数字的字符串：沉没船舶的计数和已被击中但未沉没的船舶的数量，用逗号分隔。", "\n\n", "例如，假设N = 4，S =“1B 2C，2D 4D”和T =“2B 2D 3D 4D 4A”，您的函数应返回“1,1”，如上所述。"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You could use &lt;a href=\"http://php.net/array_multisort\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;array_multisort&lt;/code&gt;&lt;/a&gt; in two passes:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;First sort by \"Answer Match\" and \"Responses\"&lt;/li&gt;\n&lt;li&gt;Add a new column to the data: the sequence number within a group of same \"Answer Match\" values&lt;/li&gt;\n&lt;li&gt;Sort again, but now by that new column, and then \"Answer Match\"&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Here is the code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// Example data\n$data = [\n    [\"Answer Match\" =&amp;gt; \"rank 3\", \"Responses\" =&amp;gt; \"CB\"],\n    [\"Answer Match\" =&amp;gt; \"rank 1\", \"Responses\" =&amp;gt; \"CO\"],\n    [\"Answer Match\" =&amp;gt; \"rank 1\", \"Responses\" =&amp;gt; \"BR\"],\n    [\"Answer Match\" =&amp;gt; \"rank 2\", \"Responses\" =&amp;gt; \"IR\"],\n    [\"Answer Match\" =&amp;gt; \"rank 2\", \"Responses\" =&amp;gt; \"AB\"],\n    [\"Answer Match\" =&amp;gt; \"rank 3\", \"Responses\" =&amp;gt; \"CA\"],\n];\n\n// First sort by \"Answer Match\" and then \"Responses\":\narray_multisort(array_column($data, \"Answer Match\"), \n                array_column($data, \"Responses\"), SORT_DESC, $data);\n\n// Then add a new column to the data, which gives the sequence number \n// within the same group of \"Answer Match\":\nforeach($data as $i =&amp;gt; $a) {\n    $data[$i][\"i\"] = (!$i or $a[\"Answer Match\"] != $data[$i-1][\"Answer Match\"]) \n                         ? 1 : $data[$i-1][\"i\"]+1;\n}\n\n// Now sort using that extra column to get the final sort order\narray_multisort(array_column($data, \"i\"), array_column($data, \"Answer Match\"), $data);\n\n// If it bothers you, the extra column can be removed again.\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "算法与数字", "Question": ["按相同的字符串名称和索引位置排序", ["\n\n", "I'm trying to sort an array where I have a column with equals strings, and a previous column with the information that should be print according to occurrence. I want to print only the alphabetical order of column 9  and do not take in consideration the alphabetical order from column 8.", "\n\n", "For example:", "\n\n", "column 9=[rank 1, rank1, rank 2, rank2, rank 3, rank3, ...]\n\ncolumn 8=[CO,      BR,    IR,     AB,    CB,      CA....]\n", "\n\n", "It should give me this  output below, because I want to print by rank 1, rank 2, rank 3, rank 1, rank 2, rank 3:", "\n\n", "CO IR CB  BR AB CA\n", "\n\n", "However, my code take the alphabetic order of column 9 when it find equals strings in column 9. How could I solve. Is there a way to check the index to display the data in that order?", "\n\n", "here is my code:", "\n\n", "function readCsv($fileName){\n\n    $handle = fopen($fileName, \"r\");\n\n\n    $data=array();\n\n    while ($col = fgetcsv($handle, 1000, \",\")) { \n\n        $data[] = [\n\n            'Section' => $col[0],   \n            'Q #' => $col [1],\n            'Q Type' => $col[2],\n            'Q Title' => $col[3],\n            'Q Text' => $col[4],\n            'Bonus' => $col [5],\n            'Difficulty' => $col[6],\n            'Answer' => $col[7],\n            'Answer Match' => $col[8],\n            'Responses'=> $col[9], \n\n        ];      \n\n    }\n\n    unset($data[0]); //skip line 1, header\n    usort($data, 'cmp');\n\n    fclose($handle);\n    return $data;\n}\nob_end_flush();\n\n\n\nfunction cmp($a, $b) {\n\n    return $a['Answer Match'] > $b['Answer Match'] (array_search($a['Answer Match'], $a) < array_search($b['Answer Match'], $b)+1);\n}\n", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;g &amp;#61; sorted(&lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;()))\ns &amp;#61; sorted(&lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;()))\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(s)):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; s[i] &amp;gt;&amp;#61; g[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]:\n        s &amp;#61; s[i:]\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;count&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i, &lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt; in zip(g,s):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt;&amp;gt;&amp;#61;i:\n        &lt;span class=\"hljs-built_in\"&gt;count&lt;/span&gt; &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;count&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["分配问题@贪心算法-！%", ["\n", "假设你是一位很棒的家长，想要给你的children一些小饼干。", "但是，每个最多只能给一块饼干。对每个child i，都有一个胃口值 g[i]，这是能让children满足胃口的", "饼干的最小尺寸；", "并且每块饼干j，都有一个尺寸 s[i]。如果 s[i]>= g[i]", "我们可以将这个饼干j分配给child i，这个child会得到满足。", "你的目标是尽可能满足越多数量的children，并输出这个最大数值。", "输入格式", "第一行是由多个数字组成的列表 g。", "第二行是由多个数字组成的列表 s。"]], "Tag": "算法设计"}
{"Answer": "部分伪代码实现，接下来Lz锻炼锻炼coding！ :o  :o \r\n\r\n\r\npublic class Util(){\r\n\r\n\tpublic int parse(int argInput){\r\n\t//将整数单个分解存于数组arr中。\r\n\tString str = argInput+\"\";\r\n\tint length =str.length();\r\n\tint[] arr = new int(length );\r\n\tfor(int i = 0;i&lt;length;i++){\r\n\tarr[i]=Integer.parseInt(str.substring(i,i+1));\r\n\t}\r\n\tint index = length -1;\r\n\twhile(index==0){//从数的最后一位开始，查找前一位比一位小的数。\r\n\t\tif(arr[index]&gt;arr[--index])break;\r\n\t\t}\r\n\t\r\n\tif(index==0){//添加一个0，处理.这中情况如“321”\r\n\t\r\n\t//将0放在数组的第二个位置，数组的第一个位置放原来数值中的最小数，比如321中的“1”\r\n\t//这是数组为“1 0 ..”\r\n\t...\r\n\t//数组第二个位置后面的数从小到大排列。\r\n\t...\r\n\r\n\t}else{//不添加0 这种情况如“2563”\r\n\t\r\n\t//将index位置的值与index-1的值互换。如将6与5互换，“2653”。\r\n\t...\r\n\t//将index后面（包含index位置）的数值从小到大排列。这时将“5 3”从小到大排列。\r\n\t...\r\n\t}\r\n\t///将int数组arr各个数值按顺序生成一个整数。返回所需要的值。\r\n\r\n}//end parse\r\n\t\r\n}", "Konwledge_Point": "算法与数字", "Question": ["急求解一算法（感谢）", ["题：求一下个数", "\n给出一个数字 152，它以125，152，215，251，512，512，1025...排列（位数不足补0）", "\n现在要得到 152 后面的下一个数，即答案是512", "\n\n", "求一通用的java算法", "\n\n", "列（给出以下3个数字）：", "\n115", "\n1051", "\n6233", "\n结果输出：", "\n151", "\n1105", "\n6323", "\n\n", "希望高手帮我解决下，感谢！"]], "Tag": "算法设计"}
{"Answer": "其实这个题不难，可以考虑用2进制的方式来做。\r\ng()\r\n{\r\nreturn 4*f()+2*f()+f();\r\n}\r\n\r\n希望能帮到你。", "Konwledge_Point": "算法与数字", "Question": ["求一个面试算法题答案。", ["已知函数f()以相同的概率返回0或者1，求一个函数g()以相同的概率返回0-7之间的任意一个数字。"]], "Tag": "算法设计"}
{"Answer": "```\r\n #include &lt;iostream&gt;\r\nusing namespace std;\r\nvoid foo(int x)\r\n{\r\n    if (x == 0) return;\r\n    cout &lt;&lt; x % 10;\r\n    foo(x / 10);\r\n}\r\nint main()\r\n{\r\n    int i = 123;\r\n    foo(i);\r\n}\r\n```", "Konwledge_Point": "算法与数字", "Question": ["C++算法：通过递归算法实现非零数字反转", ["事例：", "\n321------123", "\n1568-----8651"]], "Tag": "算法设计"}
{"Answer": "http://xueshu.baidu.com/s?wd=paperuri:(338d8466d57169d1a3f5c5c14007590c)&amp;filter=sc_long_sign&amp;sc_ks_para=q%3D%E5%9F%BA%E4%BA%8E%E7%AE%80%E5%8D%95Petri%E7%BD%91%E5%92%8CgSpan%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E9%A2%91%E7%B9%81%E7%BB%93%E6%9E%84%E6%8C%96%E6%8E%98&amp;tn=SE_baiduxueshu_c1gjeupa&amp;ie=utf-8&amp;sc_us=8400883579086322051", "Konwledge_Point": "算法与数字", "Question": ["jni结构算法 计算一次的业务流程", ["计算一次的业务流程：", "\n    第一步：随机取出1到10的数字n1", "\n        3n1 = n1*2 +n1", "\n        7n1 = 3n1*2+n1", "\n        15n1 = 7n1*2+n1", "\n        ...", "\n        ...共进行15次计算", "\n\n", "第二步：随机取出1到10的数字n2\n    3n2 = n2*2 +n2\n    7n2 = 3n2*2+n2\n    15n2 = 7n2*2+n2\n    ...\n    ...共进行15次计算\n\n第三步：做差并输出：\n    3n1 － 3n2 ＝ x1    输出\n    7n1 － 7n2 ＝ x2    输出\n    ....\n    ....      ＝ x15   输出\n"]], "Tag": "算法设计"}
{"Answer": "```\r\ndef deal(data,flag):\r\n    a=[]\r\n    for i in data:\r\n        if i&gt;=flag:\r\n            return [i]\r\n        elif a==[]:\r\n            a.append([i])\r\n        else:\r\n            a=a+[k+[i] for k in a if sum(k)+i&lt;=flag]\r\n            a.append([i])\r\n    #return sorted(a,key=sum)[-1]\r\n    target=sum(max(a,key=sum))\r\n    return list(filter(lambda x:sum(x)==target,a))\r\nif __name__=='__main__':\r\n    c=[2,1,3,1,5,2,3,4]\r\n    flag=sum(c)//2\r\n    res=deal(c,flag)\r\n    print(res)\r\n\r\n```\r\n\r\n算法复杂度最差是N的3次方", "Konwledge_Point": "算法与数字", "Question": ["怎样用python实现将一组数尽可能均匀地分成两堆，使两个堆中的数的和尽可能相等？", ["麦克叔叔去世了，他在遗嘱中给他的两个孙子阿贝和鲍勃留下了一堆珍贵的口袋妖怪卡片。遗嘱中唯一的方向是“尽可能均匀地分配纸牌的价值”。作为Mike遗嘱的执行人，你已经为每一张口袋妖怪卡片定价，以获得准确的货币价值。你要决定如何将口袋妖怪卡片分成两堆，以尽量减少每一堆卡片的价值总和的差异。", "\n例如，你有下列n=8 个口袋妖怪卡片：", "\n\n", "经过大量的工作，你发现你可以用下面的方法来划分卡片：", "\n\n", "这给了安倍10美元的牌给了鲍勃11美元的牌。这是最好的除法吗?", "\n你要做的是解决n张牌的问题其中每张牌ci都有一个正整数值vi.你的解决方法是计算牌应该如何被分割以及每摞牌的价值。", "\n输入输出示例如下:", "\n\n", "1.通过检查所有可能的桩以蛮力解决此问题。 对这种蛮力算法的时间复杂度进行分析，并通过实施和实验验证您的分析结果(既写出来算法的设计思路等)，并用python算法实现编程", "\n\n", "2.通过动态编程开发更有效的算法。 您应该首先通过动态编程的思想来分析此问题，并编写相应的递归属性。 对这种算法的时间复杂度进行分析，并通过实施和实验验证您的分析结果。并用python代码实现动态编程"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;/*标准输入输出头文件*/&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; number,g,s,b,&lt;span class=\"hljs-keyword\"&gt;q&lt;/span&gt;,w;\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入一个5位整数&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;number);&lt;span class=\"hljs-regexp\"&gt;/*从键盘接收一个5位整数*/&lt;/span&gt;\n    g&amp;#61;number%10;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;这句得到     个位数字\n    s&amp;#61;number/&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;%10; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;这句得到 十位数字\n    b&amp;#61;number/&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;%10;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;这句得到 百位数字\n    &lt;span class=\"hljs-keyword\"&gt;q&lt;/span&gt;&amp;#61;number/&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;%10;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;这句得到 千位数字\n    w&amp;#61;number/&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;%10;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;这句得到 万位数字\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;逆序输出为&amp;#xff1a;%d\\n&amp;#34;&lt;/span&gt;,g*&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;&amp;#43;s*&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;&amp;#43;b*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-keyword\"&gt;q&lt;/span&gt;*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#43;w);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;逆序输出\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["C语言教材上的的数字倒排算法", ["这个算法我实在是看不明白啊", "\n", "#include <stdio.h>/*标准输入输出头文件*/", "\n\n", "int", " main()\n{            \n    ", "int", " number,g,s,b,", "q", ",w; \n    ", "printf", "(", "\"请输入一个5位整数：\\n\"", ");\n    scanf(", "\"%d\"", ",&number);", "/*从键盘接收一个5位整数*/", "\n    g=number%10;", "/*将m模取10的结果赋值给g*/", "\n    s=number/", "10", "%10; ", "/*将m整除10模取10的结果赋值给s*/", "\n    b=number/", "100", "%10;\n    ", "q", "=number/", "1000", "%10;\n    w=number/", "10000", "%10;\n    ", "printf", "(", "\"逆序输出为：%d\\n\"", ",g*", "10000", "+s*", "1000", "+b*", "100", "+", "q", "*", "10", "+w);", "//", "逆序输出\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;使用全排列函数枚举0 ~ 9所有顺序数字&amp;#xff0c;把特殊情况排除掉&amp;#xff0c;如0开头&amp;#xff0c;以及每个数字前面都不能为0。需要3 ~ 4秒钟出结果。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;import itertools\n\n\n&lt;span class=\"hljs-keyword\"&gt;ma&lt;/span&gt; &amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\nmi &amp;#61; float(&lt;span class=\"hljs-string\"&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;)\ndic &amp;#61; {}\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; t in tuple(itertools.permutations([str(i) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)])):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; t[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; t[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;or&lt;/span&gt; t[&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;or&lt;/span&gt; t[&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;\n    \n    D &amp;#61; &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;(t[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;]))\n\n    C &amp;#61; &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;(t[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]))\n\n    B &amp;#61; &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;(t[&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]))\n\n    A &amp;#61; &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;(t[&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]))\n\n    mul &amp;#61; D * C * B * A\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; mul &amp;gt; &lt;span class=\"hljs-keyword\"&gt;ma&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;ma&lt;/span&gt; &amp;#61; mul\n        dic[&lt;span class=\"hljs-keyword\"&gt;ma&lt;/span&gt;] &amp;#61; (D,C,B,A)\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; mul &amp;lt; mi:\n        mi &amp;#61; mul\n        dic[mi] &amp;#61; (D,C,B,A)\n\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;ma&lt;/span&gt;,dic[&lt;span class=\"hljs-keyword\"&gt;ma&lt;/span&gt;])\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(mi,dic[mi])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/862977205746142.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["数字0～9组成的四个数乘法算式，求乘积最大和最小的算法思路", ["用 0123456789 这十个无重复的数字，组成一位数、两位数、三位数、四位数各一个，A、B、C、D；其中，A不能等于0。", "问题：ABC*D 的乘积最大和最小分别是多少？具体是哪四个数组成的算式？", "求：算法，思路。"]], "Tag": "算法设计"}
{"Answer": "下面是我的代码，在没有打印的情况下在我机器上是1948ms\r\n[code]\r\n\t\tlong start = System.currentTimeMillis();\r\n\t\tint[] cubeArray = new int[1000];\r\n\t\tfor (int i = 0; i &lt; 1000; i++) {\r\n\t\t\tcubeArray[i] = i * i * i;\r\n\t\t}\r\n\t\tfor (int a = 1; a &lt;= 999; a++) {\r\n\t\t\tfor (int b = a; b &lt;= 999; b++) {\r\n\t\t\t\tfor (int c = b; c &lt;= 999; c++) {\r\n\t\t\t\t\tfor(int d=c+1;d&lt;=999;d++)\r\n\t\t\t\t\t\tif(cubeArray[a]+cubeArray[b]+cubeArray[c]==cubeArray[d]);\r\n//\t\t\t\t\t\t\tSystem.out.printf(\"a=%d,b=%d,c=%d,d=%d\\n\",a,b,c,d);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tSystem.out.println(System.currentTimeMillis()-start);\r\n\t}", "Konwledge_Point": "算法与数字", "Question": ["求一道java面试算法题 如下", ["求A³+B³+C³=D³   ABCD∈(0-999) 求ABCD", "\n :( 当时想到的最笨的方法就是for循环的嵌套，从效率方面考虑，请教其它算法"]], "Tag": "算法设计"}
{"Answer": "自己写一个\r\n通用的循环小数转浮点的办法\r\n循环节/循环节长度的9\r\n然后用求最大公约数的办法化简。比如\r\n0.3939393939....\r\n化简，因为循环节是39，所以\r\n0.39393939... =  39/99\r\n=13/33\r\n再比如0.121412341234\r\n就是1234/9999 再化简。", "Konwledge_Point": "算法与数字", "Question": ["c++有什么算法或函数可以将浮点数化为分数吗？", ["c++有什么算法或函数可以将不精确的浮点数化为精确的分数吗？希望得到大神解答！"]], "Tag": "算法设计"}
{"Answer": "for(int i : a) {\r\n   if(a[i] != i) {\r\n       a[i] = -1;\r\n   }\r\n}\r\n\r\n这样所有a[i] !=-1的就是了  复杂度O(n)", "Konwledge_Point": "算法与数字", "Question": ["阿里巴巴笔试题：A[i]是一个有序递增数组，其中所有的数字都不相等，请设计一种算法...", ["A[i]是一个有序递增数组，其中所有的数字都不相等，请设计一种算法，求出其中所有的A[i]=i的数字并分析时间复杂度，不分析复杂度不得分。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考一下&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;\n#include&amp;lt;time.h.&amp;gt;\n#include&amp;lt;stdlib.h&amp;gt;\nvoid menu()//菜单\n{\n    printf(&amp;#34;*********************\\n&amp;#34;);\n    printf(&amp;#34;****1.play 0.exit****\\n&amp;#34;);//选择“1”表示“玩游戏”\n    printf(&amp;#34;*********************\\n&amp;#34;);//选择“0”表示“退出”\n}\nvoid play_game()//玩游戏\n{\n    int rand_num &amp;#61; rand() % 100;//随机产生0&amp;#xff5e;99范围内的整数\n    int tmp &amp;#61; 0;\n    while (1)\n    {\n        printf(&amp;#34;请输入你猜的数字&amp;#xff1a;&amp;#34;);\n        scanf(&amp;#34;%d&amp;#34;, &amp;amp;tmp);\n        if (tmp &amp;#61;&amp;#61; rand_num)\n        {\n            printf(&amp;#34;猜对了\\n&amp;#34;);\n            break;\n        }\n        else if (tmp &amp;gt; rand_num)\n        {\n            printf(&amp;#34;猜大了\\n&amp;#34;);\n        }\n        else\n        {\n            printf(&amp;#34;猜小了\\n&amp;#34;);\n        }\n    }\n}\nint main()\n{\n    int input &amp;#61; 0;\n    srand((unsigned int)time(NULL));//srand是随机数发生器的初始化函数\n    //为了防止每次玩游戏时随机产生的数字重复&amp;#xff0c;常使用time函数获得系统时间以初始化\n    do\n    {\n        menu();\n        printf(&amp;#34;请选择&amp;#xff1a;&amp;#34;);\n        scanf(&amp;#34;%d&amp;#34;, &amp;amp;input);\n        switch (input)\n        {\n        case 1:\n            play_game();\n            break;\n        case 0:\n            exit(EXIT_SUCCESS);\n            break;\n        default://当输入菜单中不存在选项时&amp;#xff0c;提醒玩家“选择错误”\n            printf(&amp;#34;选择错误.\\n&amp;#34;);\n            break;\n        }\n    } while (input);\n    system(&amp;#34;pause&amp;#34;);\n    return 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["c语言猜数字问题求解决", ["一、问题描述：该游戏可以由程序随机产生或由用户输入四个0到9之间的数字，且不重复。玩游戏者通过游戏提示输入八次来匹配上面所输入的数字。A表示位置正确且数字正确，B表示数字正确而位置不正确。二、功能要求：本游戏显示这样的菜单：（1） 随机产生数据（2） 用户输入数据（3） 退出游戏游戏成功与否都能返回主菜单三、算法提示：数据结构：数组用简单的程序设计方法四、测试数据：测试数据： 3792第一次输入： 12340A2B第二次输入： 56780A1B第三次输入： 08670A1B第四次输入： 97861A1B第五次输入： 17942A0B第六次输入： 27932A2B第七次输入： 37924A0B游戏成功！！！五、其它：对该系统有兴趣的同学可以在实现系统基本功能后，完善系统的其它功能，如：破记录功能，若你所匹配的次数小于纪录保持者，则为破纪录。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;超过N次都没有猜到&amp;#xff0c;则提示“Game Over”,之前判断太大或太小的应该是cs &amp;lt;&amp;#61; n&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[&lt;span class=\"hljs-keyword\"&gt;cs&lt;/span&gt;]!&amp;#61;da &amp;amp;&amp;amp; &lt;span class=\"hljs-keyword\"&gt;cs&lt;/span&gt;&amp;gt; &lt;span class=\"hljs-keyword\"&gt;n&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//应该是cs &amp;gt; n才对&lt;/span&gt;\n            {\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Game Over&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;整体代码:&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; da,n;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cs&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,num;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;],i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,j&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;da,&amp;amp;n);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n     \n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(a[i]&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        i&amp;#43;&amp;#43;; \n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n    }\n     \n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[cs]&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Game Over&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[cs]&amp;#61;&amp;#61;da)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(cs&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n                {\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Bingo!&amp;#34;&lt;/span&gt;);\n                    &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n                }\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(cs&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n                {\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Lucky You!&amp;#34;&lt;/span&gt;);\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cs &amp;#61; %d&amp;#34;&lt;/span&gt;,cs);\n                    &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n                }\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(cs&amp;lt;&amp;#61;n)\n                {\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Good Guess!&amp;#34;&lt;/span&gt;);\n                    &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n                }\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[cs]&amp;lt;da &amp;amp;&amp;amp; cs&amp;lt;&amp;#61;n)\n            {\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Too small\\n&amp;#34;&lt;/span&gt;);\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[cs]&amp;gt;da &amp;amp;&amp;amp; cs&amp;lt;&amp;#61;n)\n            {\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Too big\\n&amp;#34;&lt;/span&gt;);\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[cs]!&amp;#61;da &amp;amp;&amp;amp; cs&amp;gt; n)\n            {\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Game Over&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n        }\n        cs&amp;#43;&amp;#43;;\n    }\n \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["PTA 7-12猜数字游戏", ["问题遇到的现象和发生背景", "\n", "7-12 猜数字游戏", "\n", "猜数字游戏是令游戏机随机产生一个100以内的正整数，用户输入一个数对其进行猜测，需要你编写程序自动对其与随机产生的被猜数进行比较，并提示大了（“Too big”），还是小了（“Too small”），相等表示猜到了。如果猜到，则结束程序。程序还要求统计猜的次数，如果1次猜出该数，提示“Bingo!”；如果3次以内猜到该数，则提示“Lucky You!”；如果超过3次但是在N（>3）次以内（包括第N次）猜到该数，则提示“Good Guess!”；如果超过N次都没有猜到，则提示“Game Over”，并结束程序。如果在到达N次之前，用户输入了一个负数，也输出“Game Over”，并结束程序。", "\n", "输入格式:", "输入第一行中给出两个不超过100的正整数，分别是游戏机产生的随机数、以及猜测的最大次数N。最后每行给出一个用户的输入，直到出现负数为止。", "\n", "输出格式:", "在一行中输出每次猜测相应的结果，直到输出猜对的结果或“Game Over”则结束。", "\n", "输入样例:", "58 4", "70", "50", "56", "58", "60", "-2", "输出样例:", "Too big", "Too small", "Too small", "Good Guess!", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "#include<stdio.h>", "\n", "int main(void)", "{", "    int da,n;", "    int cs=1,num;", "    int a[100],i=1,j=1;", "\n", "scanf(", "\"%d %d\"", ",&da,&n);\nscanf(", "\"%d\"", ",&a[", "1", "]);\n\n", "while", "(a[i]>", "0", ")\n{\n    i++; \n    scanf(", "\"%d\"", ",&a[i]);\n}\n\n", "while", "(", "1", ")\n{\n    ", "if", "(a[cs]<", "0", ")\n    {\n        ", "printf", "(", "\"Game Over\"", ");\n        ", "break", ";\n    }\n    ", "else", "\n    {\n        ", "if", "(a[cs]==da)\n        {\n            ", "if", "(cs==", "1", ")\n            {\n                ", "printf", "(", "\"Bingo!\"", ");\n                ", "break", ";\n            }\n            ", "else", " ", "if", "(cs<=", "3", ")\n            {\n                ", "printf", "(", "\"Lucky You!\"", ");\n                ", "break", ";\n            }\n            ", "else", " ", "if", "(cs<=n)\n            {\n                ", "printf", "(", "\"Good Guess!\"", ");\n                ", "break", ";\n            }\n        }\n        ", "else", " ", "if", "(a[cs]<da && cs<n)\n        {\n            ", "printf", "(", "\"Too small\\n\"", ");\n        }\n        ", "else", " ", "if", "(a[cs]>da && cs<n)\n        {\n            ", "printf", "(", "\"Too big\\n\"", ");\n        }\n        ", "else", " ", "if", "(a[cs]!=da && cs==n)\n        {\n            ", "printf", "(", "\"Game Over\"", ");\n            ", "break", ";\n        }\n    }\n    \n    cs++;\n}\n\n", "return", " ", "0", ";\n", "\n", "}", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "运行起来好像符合要求，但是就是出错，实在找不到哪里有问题"]], "Tag": "算法设计"}
{"Answer": "https://wenku.baidu.com/view/3d17722cb4daa58da0114a32.html", "Konwledge_Point": "算法与数字", "Question": ["求一个一维下料算法的Java实现", ["条件：为多源线材，能够限定每根线材最多几种零件种类", "\n例如：木材料长度有10,12,13", "\n                        要切割成的零件有 3,    4,    5，  6", "\n                        每种零件需求为    15, 16,  18,    20", "\n                        每种母材上只能有2种零件（这个数字可变）", "\n\n", "求指导，求思路，求建议！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;是选择排序算法&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["这个排序算法的交换位置次数为什么是0啊？", ["\n", "public class Xm1 {\n    public static void main(String[] args) {\n        int[] b = {45,32,43,12,87,56};\n//        冒泡排序算法从小到大\n        int p = 0;\n        int n = 0;\n        for (int q = b.length-1;q>0;q--){\n            for (int w =0;w<q;w++){\n                p++;//在这里计算比较次数。p\n                if(b[w]>b[w+1]){\n                    n++;//算出交换位置的次数。\n                    int e;\n                    e = b[w+1];\n                    b[w+1]= b[w];\n                    b[w]=e;\n                }\n            }\n        }\n        System.out.println(\"冒泡排序算法的次数：\"+p);\n        System.out.println(\"选择排序算法的交换位置次数：\"+n);\n        for(int r =0; r<b.length;r++){\n            System.out.println(b[r]);\n        }\n        System.out.println(\"------------------------------------------------------------------------\");\n//        选择排序算法从小到大\n        int v= 0;\n        int h =0;\n        for(int t =0;t<b.length-1;t++){\n            int min =t;//这个t其实是下标\n            for (int y =t+1; y<b.length;y++){\n                   v++;//这里在计算比较次数\n                   if(b[t]>b[y]){\n                       min = y;//这个其实是下标,这个y的位置其实可能一直在改变。\n                   }\n            }\n            if(min!=t){\n                int u;\n                u = b[t];\n                b[t] = b[min];\n                b[min] = u;\n                h++;//算出交换位置的次数。\n            }\n        }\n        System.out.println(\"选择排序算法的比较次数：\"+v);\n        System.out.println(\"选择排序算法的交换位置次数：\"+h);\n        for(int r =0; r<b.length;r++){\n            System.out.println(b[r]);\n        }\n    }\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;图形型数字推理是数字推理的又一基本题型。&lt;br /&gt;其题干是一个或几个包含 数字的图形&amp;#xff0c;应试者需要发现其中的规律来推测未知数。在解决此类问题时, 可以使用位置分析法。&lt;/p&gt;\n&lt;p&gt;对于本题&amp;#xff0c;可以发现如下规律&amp;#xff1a;&lt;br /&gt;9.1/1.3 &amp;#61; 7 &amp;#61; 5&amp;#43;2&lt;br /&gt;40.7/3.7&amp;#61; 11 &amp;#61;9&amp;#43;2&lt;br /&gt;即每行第二个数字除以第3个数字减去第一个数字的结果是2。因此&amp;#xff0c; 可以计算出未知数是5。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["正在研究一个算法是图形数字研究的，谁一起研究下这个要怎么实现优化", ["问题遇到的现象和发生背景", "\n", "公司最近在搞图形算法，用来在图片上找规律，用于处理特定的图片", "\n", "问题相关代码，请勿粘贴截图", "\n", "第一步是对像素点的色调和分布用不同的数值表示，然后锁定3*3的像素点区域分析。", "比如出现了下面的9个像素点，并通过某种规则给这些像素不同的数值，然后来优化其中一个像素，达到优化图片的效果。", "\n", "表头", "表头", "表头", "5", "9.1", "1.3", "9", "40.7", "3.7", "？", "41.3", "5.9", "\n", "运行结果及报错内容", "\n", "从最初的像素点出来的原始数据是9，现在需要通过算法规律去找这个优化后的数据。", "\n", "我的解答思路和尝试过的方法", "\n", "暂时还在研究中，目前没有解答", "\n", "我想要达到的结果", "\n", "只要有一种规律，并找到优化后的值就可以了，当然如果有多种优化方法并用更好"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;穷举吧&amp;#xff0c; 可能性也不多&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["从0至9选五个数字组成一个三位数与一个二位数相乘，求积最大。", ["\n", "从0至9选五个数字组成一个三位数与一个二位数相乘，输入5个数，输出积的最大值，如何用c语言实现，算法是怎样的。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt; if (s[i] &amp;gt;&amp;#61; &amp;#39;0&amp;#39; and s[i] &amp;lt;&amp;#61; &amp;#39;9&amp;#39;)&lt;br /&gt;改为&lt;br /&gt; if (s[i] &amp;gt;&amp;#61; &amp;#39;0&amp;#39; &amp;amp;&amp;amp; s[i] &amp;lt;&amp;#61; &amp;#39;9&amp;#39;)&lt;br /&gt;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&lt;br /&gt;and是python中的用法&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["c++字符串中数字的个数", ["字符串中的数字个数", "\n", "输入一行字符，长度不超过 100，请你统计一下其中的数字字符的个数。", "\n", "输入格式", "输入一行字符。注意其中可能包含空格。", "\n", "输出格式", "输出一个整数，表示字数字字符的个数。", "\n", "输入样例：", "I am 18 years old this year.", "输出样例：", "2", "这是我的代码：", "\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "<cstring>", "\n", "#", "include", " ", "<algorithm>", "\n\n", "using", " ", "namespace", " std;\n\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " ans = ", "0", ";\n    string s;\n    ", "getline", " (cin, s);\n    ", "for", " (", "int", " i = ", "0", "; i < s.", "size", "(); i ++ )\n        ", "if", " (s[i] >= ", "'0'", " ", "and", " s[i] <= ", "'9'", ")\n            ans ++ ;\n    cout << ans << endl;\n}\n\n", "\n", "我有个疑问，其他的我都懂，但是循环中的s[i]什么意思为什么要带上[i]直接s为什么不行，我试过了，编译错误，有谁能我讲讲其中的c++知识"]], "Tag": "算法设计"}
{"Answer": "https://github.com/guanzhi/GmSSL/ \r\ngmssl开源是基于openssl国密后的开源代码，其中有sm2生成国密证书的代码", "Konwledge_Point": "算法与数字", "Question": ["sm2算法生成国密证书的代码", ["sm2算法生成国密证书的代码，网上找了好多核心代码都不开源，好气。"]], "Tag": "算法设计"}
{"Answer": "c语言没有默认参数吧，改为：\r\n\r\n```\r\n#include &lt;stdio.h&gt;  \r\nint fun(char *p,int m)\r\n{\r\n\tint n=1;\r\n\tif(*p)\r\n\t{\r\n\t\tn=m*10+*p-'0';\r\n\t\treturn fun(p+1,n);\r\n\t}\r\n\treturn m;\t\r\n}\r\n\r\nvoid main()\r\n{\r\n\tchar str[]=\"1234\";\r\n\tprintf(\"%d\\n\",fun(str,0));\r\n} \r\n```", "Konwledge_Point": "算法与数字", "Question": ["C语言递归的数字转换问题，习题求解", ["C语言使用递归算法将一个正整数字符串为对应的数值。不得使用循环"]], "Tag": "算法设计"}
{"Answer": "比较三次是最简单的办法\r\n首先判断ab，然后是bc，再比较ac即可", "Konwledge_Point": "算法与数字", "Question": ["Java语言怎么用最简单的算法给3个数字排序呢？需要至少交换3次么？可不可以简化", ["Java语言怎么用最简单的算法给3个数字排序呢？需要至少交换3次么？可不可以简化"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;conio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;malloc.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *nums&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;,*nSave&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;,i,len&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,n&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,c&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,lc&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,*max,*min,sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; avg &amp;#61; &lt;span class=\"hljs-number\"&gt;0.0&lt;/span&gt;, maxV &amp;#61; &lt;span class=\"hljs-number\"&gt;0.0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入任意数字空格分割(输入回车键结束输入&amp;#xff0c;不支持退格删除):\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        lc&amp;#61;c;\n        c&amp;#61;&lt;span class=\"hljs-built_in\"&gt;getch&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((c&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt; || c&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\r&amp;#39;&lt;/span&gt;) &amp;amp;&amp;amp; (lc&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; lc&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;))&lt;span class=\"hljs-comment\"&gt;//当前输入字符是空格或者回车且前一个输入的字符是数字&amp;#xff0c;创建内存空间并记录数字&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;,c);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!nums)\n            {\n                nums&amp;#61;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;));\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!nums)\n                {\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;内存申请失败&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n                    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                }\n                max&amp;#61;min&amp;#61;&amp;amp;nums[len];\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            {\n                nSave&amp;#61;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *)&lt;span class=\"hljs-built_in\"&gt;realloc&lt;/span&gt;(nums,&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;)*(len&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!nSave)\n                {\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;内存申请失败&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n                    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                }\n                nums&amp;#61;nSave;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(*max&amp;lt;n)\n                    max&amp;#61;&amp;amp;nums[len];\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(*min&amp;gt;n)\n                    min&amp;#61;&amp;amp;nums[len];\n            }\n            nums[len]&amp;#61;n;\n            n&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            len&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(c&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; c&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;,c),n&amp;#61;n*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#43;c-&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(c&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\r&amp;#39;&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n\n    }\n    &lt;span class=\"hljs-comment\"&gt;//------打印输入的数组&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入的数组为&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;len;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,nums[i]);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-comment\"&gt;//------求平均&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;len;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&amp;amp;nums[i]!&amp;#61;max &amp;amp;&amp;amp; &amp;amp;nums[i]!&amp;#61;min)\n            sum&amp;#43;&amp;#61;nums[i];\n\n    avg &amp;#61; sum*&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;/(len&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;去除最大值和最小值后的平均值为&amp;#xff1a;%f\\n&amp;#34;&lt;/span&gt;,avg);\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;len;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&amp;amp;nums[i]!&amp;#61;max &amp;amp;&amp;amp; &amp;amp;nums[i]!&amp;#61;min)\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(nums[i] - avg) &amp;gt; maxV)\n            {\n                maxV &amp;#61; nums[i];\n            }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;去除最大值和最小值后的剩余数与平均值差的绝对值的最大值&amp;#xff1a;%f\\n&amp;#34;&lt;/span&gt;,maxV);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["去掉最大，小值求平均值求出与剩余数与平均值差的绝对值的最大值", ["算法存在问题，但自己没找出来"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* &lt;span class=\"hljs-title\"&gt;bin2hex&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*a)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;*numChar&amp;#61;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;*)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;)*&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cnt &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, tmp&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(cnt&amp;lt;&lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;){\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;i&amp;#43;&amp;#43;){\n            tmp &amp;#61; tmp*&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#43; a[cnt&amp;#43;i]; \n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(tmp&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;){\n            numChar[cnt/&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61; (&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;)((&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;)&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&amp;#43;tmp);\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n             numChar[cnt/&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61; (&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;)((&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;)&lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&amp;#43;(tmp)&lt;span class=\"hljs-number\"&gt;-10&lt;/span&gt;);\n        }\n        cnt&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;\n        tmp&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    numChar[&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; numChar;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num[&lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;],cnt&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,time&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//1个整数32位&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;136&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;*numChar;\n    &lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; tmp &amp;#61; a;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(tmp){\n        num[&lt;span class=\"hljs-number\"&gt;31&lt;/span&gt;-cnt]&amp;#61;tmp&amp;amp;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        tmp&amp;gt;&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        cnt&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(cnt&amp;lt;&lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;){\n        num[&lt;span class=\"hljs-number\"&gt;31&lt;/span&gt;-cnt]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        cnt&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(time&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;amp;&amp;amp;time%&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;);\n        time&amp;#43;&amp;#43;;        \n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,num[i]);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    numChar&amp;#61;&lt;span class=\"hljs-built_in\"&gt;bin2hex&lt;/span&gt;(num);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;,numChar);\n    &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["C语言问题求解答（最好有代码）", []], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;仅供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;//假设有n个人团团围做&amp;#xff0c;从第1个人开始数数&amp;#xff0c;数到第m个人时候&amp;#xff0c;第m个人出列&amp;#xff0c;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//然后继续从1开始数数&amp;#xff0c;数到第m个人退出&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;conio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,k,t;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,m;\n&lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; f[&lt;span class=\"hljs-number\"&gt;1001&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//0该座位未出圈,1该座位已出圈&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Input n m(1000&amp;gt;&amp;#61;n&amp;gt;&amp;#61;m&amp;gt;&amp;#61;1):&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;fflush&lt;/span&gt;(stdout);\n        &lt;span class=\"hljs-built_in\"&gt;rewind&lt;/span&gt;(stdin);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;m)) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;&amp;gt;&amp;#61;n &amp;amp;&amp;amp; n&amp;gt;&amp;#61;m &amp;amp;&amp;amp; m&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    t&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//已出圈总人数&lt;/span&gt;\n    i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//座位编号&lt;/span&gt;\n    k&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//当前要数的数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#61;&amp;#61;f[i]) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (m&amp;#61;&amp;#61;k) {\n                t&amp;#43;&amp;#43;;\n                f[i]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%3d &amp;#34;&lt;/span&gt;,i);\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#61;&amp;#61;t%&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (t&amp;gt;&amp;#61;n) &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n            k&amp;#43;&amp;#43;;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (k&amp;gt;m) k&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n        i&amp;#43;&amp;#43;;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i&amp;gt;n) i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;cprintf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Press any key ...&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;getch&lt;/span&gt;();\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["约瑟夫问题的进阶：加入了一些幸运数字，当同学报到给出的幸运数字的时候，不仅不用出局，而且可以拉一个同学进来，排在他后面,并且从这个同学开始计数。拉进来的同学编号就是刚才出局的同学中编号最小的同学。", ["问题详情：", "\n", "n个小朋友坐成一圈，编号从1到n，玩报数游戏，从第一个开始从1报数。报到特定数值（由题目给出）的同学离开，然后从下个同学开始从1报数。问最后剩的小朋友编号是多少？", "这是约瑟夫1的题目，II中加入了一些幸运数字，当同学报到给出的幸运数字的时候，不仅不用出局，而且可以拉一个同学进来，排在他后面,并且从这个同学开始计数。拉进来的同学编号就是刚才出局的同学中编号最小的同学。", "那什么是幸运数字呢？幸运数字就是给定数字中的奇数。", "\n", "输入要求：", "\n", "n（小盆友数目）", "n-1个数字，如果是偶数表示报道这个数字的同学离开。如果是幸运数字则加入一个同学。", "\n", "输出要求：", "\n", "当圈里面只有一个小朋友的时候，输出最后留下同学的编号", "\n", "输入样例：", "\n", "5", "2 3 4 4 2 5 6 8", "\n", "本人只会约瑟夫问题1的解答，就是简单的：", "\n", "约瑟夫问题：有n个人围成一圈，从第一个人开始沿顺时针方向报数（从1到m报数），凡报到m的人退出圈子，问最后留下的是原来第几号的那个人。要求是输入n,m，最后输出第几个人。感觉此问题和上述问题有相似也有进阶，但是思路上存在问题，希望得到帮助！", "\n", "希望有牛人能够帮助解答一下！本人初学C语言，期待着不断进步"]], "Tag": "算法设计"}
{"Answer": "做一个简单的队列，只保留用户最新输入的7个数字\r\n\r\n```\r\nvar array = new Array();\r\n\r\nfunction addItem(item){\r\n\t if(array.length&gt;=7)array.shift()//删除头\r\n\t\tarray.push(item);\r\n}\r\n```\r\n我觉得你可能表达的是这个意思", "Konwledge_Point": "算法与数字", "Question": ["js或者java的算法，把未知的个数区分", ["js或者java中根据用户输入的数的个数来做横坐标，假如输入的个数是等于7，那么就是7个x点,假如输入的个数大于7，假设为7-1000之间，而横坐标最多显示7个x点，或者小于7个的x点，该如何操作用户输入的大于7个数的数据啊，再重述下，如果输入的小于7个数，那么直接就是可以使用的横坐标，如果输入的是70个数，那么整除10，就是7个点，类似这样的一个整除算法方法，求助..."]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;gets&amp;#xff08;X&amp;#xff09;是干啥用的呢&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["算法问题求解，程序优化", ["三个整数分别为 A,B,CA,B,C。这三个数字不会按照这样的顺序给你，但它们始终满足条件：A < B <C。为了看起来更加简洁明了，我们希望你可以按照给定的顺序重新排列它们。", "输入", "1 5 3", "ABC", "输出", "1 3 5", "输入", "6 4 2", "CAB", "输出", "6 2 4", "用C语言写的代码，这里面哪里有问题？代码输入数字后就停止运行了，如果有更好的程序请分享一下，求解答！谢谢！", "\n", "#include<stdio.h>\n#include<string.h>\nint main()\n{\n    int x[", "3", "]={", "0", "};\n    char ", "X", "[", "4", "]={", "0", "};\n    int i=", "0", ",t=", "0", ";\n    for(i=", "0", ";i<", "3", ";i++)\n    {\n        scanf(", "\"%d\"", ",&x[i]);\n    }\n        gets(", "X", ");\n    if(x[", "0", "]>x[", "1", "])\n    {\n        t=x[", "0", "];\n        x[", "0", "]=x[", "1", "];\n        x[", "1", "]=t;\n    }\n    if(x[", "0", "]>x[", "2", "])\n    {\n        t=x[", "0", "];\n        x[", "0", "]=x[", "2", "];\n        x[", "2", "]=t;\n    }\n    if(x[", "1", "]>x[", "2", "])\n    {\n        t=x[", "1", "];\n        x[", "1", "]=x[", "2", "];\n        x[", "2", "]=t;\n    }\n    if(strcmp(", "X", ",", "\"ABC\"", ")==", "0", ")\n    {\n        for(i=", "0", ";i<", "3", ";i++)\n        {\n            printf(", "\"%d \"", ",x[i]);\n        }\n    }\n    else if(strcmp(", "X", ",", "\"CBA\"", ")==", "0", ")\n    {\n        for(i=", "2", ";i>=", "0", ";i--)\n        {\n            printf(", "\"%d \"", ",x[i]);\n        }\n    }\n    if(strcmp(", "X", ",", "\"ACB\"", ")==", "0", ")\n    {\n        printf(", "\"%d %d %d\"", ",x[", "0", "],x[", "2", "],x[", "1", "]);\n    }\n    if(strcmp(", "X", ",", "\"BCA\"", ")==", "0", ")\n    {\n        printf(", "\"%d %d %d\"", ",x[", "1", "],x[", "2", "],x[", "0", "]);\n    }\n    if(strcmp(", "X", ",", "\"BAC\"", ")==", "0", ")\n    {\n        printf(", "\"%d %d %d\"", ",x[", "1", "],x[", "0", "],x[", "2", "]);\n    }\n    if(strcmp(", "X", ",", "\"CAB\"", ")==", "0", ")\n    {\n        printf(", "\"%d %d %d\"", ",x[", "2", "],x[", "0", "],x[", "1", "]);\n    }\n    return ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;一般是用来获取频谱&amp;#xff0c;频谱有什么用看你实际环境了&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["数字信号处理方面问题，数字信号做DFT或者FFT后到底是有什么作用？", ["求问数字信号处理方面问题，数字信号做DFT或者FFT后到底是有什么作用？是为了滤波？还是为了还原连续信号？如果通过DFT还原连续信号该用什么算法或者公式？是用傅里叶逆变换吗？但逆变换后不也还是数字信号"]], "Tag": "算法设计"}
{"Answer": "http://wenku.baidu.com/link?url=ZYix8_obOT37JUQyFv-t9Y0Sv7SPCIfmc5QwjW-aifxA8WJ4iWajKpfQS7o4aFykxKdIATLIwUY2WZKEnrezolAs3WcE-wczvNsF8qISD0u", "Konwledge_Point": "算法与数字", "Question": ["如何在二分查找的程序中实现对某个具体的浮点型进行精确地查找的算法？", ["如何在二分查找的程序中实现对某个具体的浮点型进行精确地查找的算法？是基于dat文件的存储的搜索，用什么方式进行？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1、x&amp;#61;x * i&amp;#xff0c;第一次 是2019 * 1&amp;#61;2019&amp;#xff0c;第二次是 2019 * 2&amp;#61;4038 第三次是 4038 * 3&amp;#61;12114&amp;#xff0c;中间不全是相差2019&amp;#xff0c;会丢失值&lt;br /&gt;2、x &amp;#43;&amp;#61; 2019;   第一次 是2019&amp;#43;2019&amp;#61;4038&amp;#xff0c;第二次是 4038&amp;#43;2019&amp;#61;6057 第三次是 6057&amp;#43;2019&amp;#61;8076 中间相差2019&lt;br /&gt;所以第一种不行&amp;#xff0c;第二种可以&amp;#xff1b;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于java的算法问题(求最小整数X，2019年蓝桥杯国赛题)", ["public", " ", "class", " ", "Main", " {\n  ", "public", " ", "static", " ", "void", " ", "main", "(", "String", "[] args)", " ", "{\n    ", "int", " x = ", "2019", ";", "int", " i = ", "1", ";\n    ", "while", " ( ", "loseCondition", "(x) ){\n      i++;\n      x = x * i;\n    }\n    System.out.", "println", "(x);\n  }\n  ", "public", " ", "static", " ", "boolean", " ", "loseCondition", "(", "int", " x)", "{\n    ", "boolean", " order = ", "false", ";\n    ", "while", " ( x > ", "0", " ){\n      ", "int", " k = x % ", "10", ";", "//依次取最后一位", "\n      ", "if", " ( k % ", "2", " == ", "0", " ){\n        order = ", "true", ";\n        ", "break", ";\n      }\n      x /= ", "10", ";", "//依次去掉最后一位", "\n    }\n    ", "return", " order;\n  }\n}\n", "\n", "public", " ", "class", " ", "Main", " {\n  ", "public", " ", "static", " ", "void", " ", "main", "(", "String", "[] args)", " ", "{\n    ", "int", " x = ", "2019", ";\n    ", "while", " ( ", "loseCondition", "(x) ){\n      x += ", "2019", ";\n    }\n    System.out.", "println", "(x);\n  }\n  ", "public", " ", "static", " ", "boolean", " ", "loseCondition", "(", "int", " x)", "{\n    ", "boolean", " order = ", "false", ";\n    ", "while", " ( x > ", "0", " ){\n      ", "int", " k = x % ", "10", ";", "//依次取最后一位", "\n      ", "if", " ( k % ", "2", " == ", "0", " ){\n        order = ", "true", ";\n        ", "break", ";\n      }\n      x /= ", "10", ";", "//依次去掉最后一位", "\n    }\n    ", "return", " order;\n  }\n}\n", "\n", "代码求解的问题是：", "            算出最小的整数X，且同时满足：（1）X 是 2019 的整倍数；（2）X 的每一位数字都是奇数。", "\n", "为什么第一个解法不行？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;定义一个大小为n的数组&amp;#xff0c;先将前n个数放到这个数组&amp;#xff0c;求这个数组中的最小数&amp;#xff0c;然后将最小数和后面的数比&amp;#xff0c;如果后面的数比最小数大&amp;#xff0c;那么将这个数替换数组中的最小数后&amp;#xff0c;继续获取数组的最小数&amp;#xff0c;循环上述步骤直至比完全部整数&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于#算法#的问题：则输出99.请设计并实现一算法，传入数字n即可输出第n个大的数(语言-c语言)", ["有10个互不相同的整数： 99,200, 95、 87, 98、-12, 30, -87, 75,-25,不用排序，每当输入一个1-10之间的数n,即可输出第n个大的数"]], "Tag": "算法设计"}
{"Answer": "[http://blog.csdn.net/Dacc123/article/details/50911318?locationNum=2&amp;fps=1](http://blog.csdn.net/Dacc123/article/details/50911318?locationNum=2&amp;fps=1 \"\")\r\n[http://blog.csdn.net/mmc2015/article/details/47321713?locationNum=4&amp;fps=1](http://blog.csdn.net/mmc2015/article/details/47321713?locationNum=4&amp;fps=1 \"\")", "Konwledge_Point": "算法与数字", "Question": ["Multiplication Puzzle               ", ["Description", "\n\n", "The multiplication puzzle is played with a row of cards, each containing a single positive integer. During the move player takes one card out of the row and scores the number of points equal to the product of the number on the card taken and the numbers on the cards on the left and on the right of it. It is not allowed to take out the first and the last card in the row. After the final move, only two cards are left in the row. ", "\n\n", "The goal is to take cards in such order as to minimize the total number of scored points. ", "\n\n", "For example, if cards in the row contain numbers 10 1 50 20 5, player might take a card with 1, then 20 and 50, scoring ", "\n10*1*50 + 50*20*5 + 10*50*5 = 500+5000+2500 = 8000", "\n\n", "If he would take the cards in the opposite order, i.e. 50, then 20, then 1, the score would be ", "\n1*50*20 + 1*20*5 + 10*1*5 = 1000+100+50 = 1150.", "\nInput", "\n\n", "The first line of the input contains the number of cards N (3 <= N <= 100). The second line contains N integers in the range from 1 to 100, separated by spaces.", "\nOutput", "\n\n", "Output must contain a single integer - the minimal score.", "\nSample Input", "\n\n", "6", "\n10 1 50 50 20 5", "\nSample Output", "\n\n", "3650"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;看着像是&amp;#xff0c;直接把String对象打印出来了。 &lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于#android-studio#的问题：Android Studio创建简易计算器，运行有输入第一个数字有点击任意算法后输入第二个数字后突然出现（class  java.lang.String).", ["Android Studio创建简易计算器，运行有输入第一个数字有点击任意算法后输入第二个数字后突然出现（class  java.lang.String).", "\n"]], "Tag": "算法设计"}
{"Answer": "这种我觉得用C++  以及opencv的库比较好。本身opencv的库比较成熟了，学起来也快。并且会的人也多，资源好找一些", "Konwledge_Point": "算法与数字", "Question": ["刚刚学习VB，想知道Moravec算子特征如何提取。我们刚学习数字摄影测量，要求编写这个程序。", ["想请大神告知一二。这个程序是用哪种语言来编写比较的方便。。。。。。。。。。。。。"]], "Tag": "算法设计"}
{"Answer": "每个数字做判断，小于5的加10，大于等于5的减5，就回来了", "Konwledge_Point": "算法与数字", "Question": ["js数字密码加密，将密码中每个数字加5（超过10取个位数）", ["js将密码中的每个数字加五,超过了十取个位数，然后反转（编写解密算法）"]], "Tag": "算法设计"}
{"Answer": "```\r\nimport java.io.UnsupportedEncodingException;\r\n\r\npublic class HelloWorld {\r\n    public static String toOct(String s)\r\n    {\r\n        String result = \"\";\r\n\t\tbyte[] bytes = s.getBytes();\r\n\t\tfor (byte b : bytes)\r\n\t\t{\r\n\t\t\tint b1 = b;\r\n\t\t\tif (b1 &lt; 0) b1 = 256 + b1;\r\n\t\t\tresult += \"\\\\\" + (b1 / 64) % 8 +  \"\" + (b1 / 8) % 8 + \"\" + b1 % 8;\r\n\t\t}\r\n        return result;\r\n    }\r\n\r\n    public static String getOct(String s) throws UnsupportedEncodingException\r\n    {\r\n\t\tString[] as = s.split(\"\\\\\\\\\");\r\n\t\tbyte[] arr = new byte[as.length - 1];\r\n\t\tfor (int i = 1; i &lt; as.length; i++)\r\n\t\t{\r\n\t\t\tint sum = 0;\r\n            int base = 64;\r\n            for (char c : as[i].toCharArray())\r\n            {\r\n                sum += base * ((int)c - '0');\r\n                base /= 8;\r\n            }\r\n\t\t\tif (sum &gt;= 128) sum = sum - 256;\r\n\t\t\tarr[i - 1] = (byte)sum;\r\n\t\t}\r\n        return new String(arr,\"UTF-8\"); //如果还有乱码，这里编码方式你可以修改下，比如试试看unicode gbk等等\r\n    }\r\n\r\n    public static void main(String[] args) throws java.io.UnsupportedEncodingException {\r\n        String s = \"123中文\";\r\n        String o = toOct(s);\r\n        System.out.println(o);\r\n        s = getOct(o);\r\n        System.out.println(s);\r\n    }\r\n}\r\n```\r\n\\061\\062\\063\\344\\270\\255\\346\\226\\207\r\n123中文", "Konwledge_Point": "算法与数字", "Question": ["把8进制的字符串转化成汉字", ["数据是这样的\"\\314\\251\\270\",得到就是这样的了，要把这个转换成汉字字符串"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&amp;#xff08;1&amp;#xff09;你的pp函数逻辑不对&amp;#xff0c;只能判断末尾还有0/1/2/9的数&amp;#xff0c;其他位置的不能判断&lt;br /&gt;&amp;#xff08;2&amp;#xff09;printlen中输出的不应该是bb&amp;#xff0c;应该是bb.pp()&lt;br /&gt;运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/672788710746145.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码修改如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;package test;\n\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;LanQiaoBei&lt;/span&gt; {\n\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; p;\n\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;setP&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; p)&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;.p &amp;#61; p;\n    }\n     \n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;pp&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,t,sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; s[]&amp;#61;&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;];\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;p;i&amp;#43;&amp;#43;) {\n            t &amp;#61; i;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(t!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){ &lt;span class=\"hljs-comment\"&gt;//这里判断i中是否包含 0 1 2 9这几个数字中的任意一个&lt;/span&gt;\n                &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; mm &amp;#61; t%&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//逐个取数字的末尾数&lt;/span&gt;\n                t/&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//数字除以10&amp;#xff0c;跟上一句配合使用&amp;#xff0c;假如 t &amp;#61; i &amp;#61; 12; mm&amp;#61;t%10&amp;#61;2&amp;#xff0c;t&amp;#61;t/10&amp;#61;1&amp;#xff0c;下一次循环的时候 mm&amp;#61;t%10&amp;#61;1&amp;#xff0c;这样能得到数字i各个位上的所有数字&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(mm&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || mm&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || mm&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; || mm&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;){\n                    s[k&amp;#43;&amp;#43;] &amp;#61; i;\n                    &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n                }\n            }\n        }\n       &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(t&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;t&amp;lt;k;t&amp;#43;&amp;#43;) {\n             sum&amp;#61;sum&amp;#43;s[t];\n       }\n         &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; sum;\n    }\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;[] args)&lt;/span&gt;&lt;/span&gt;{\n    LanQiaoBei bb&amp;#61;&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;LanQiaoBei&lt;/span&gt;();\n    bb.&lt;span class=\"hljs-built_in\"&gt;setP&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;);\n    &lt;span class=\"hljs-comment\"&gt;//bb.pp();&lt;/span&gt;\n    System.out.&lt;span class=\"hljs-built_in\"&gt;println&lt;/span&gt;(bb.&lt;span class=\"hljs-built_in\"&gt;pp&lt;/span&gt;());\n    }\n\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["java算法求和，我的运行结果不对，求解答", ["我的问题：", "\n", "我写的代码：", "public class LanQiaoBei {", "   int i,p,t,sum=0;", "   int s[]=new int[40];", "\n", "public void setP(", "int", " p) {\n    this.p = p;\n}\n\n", "int", " pp() {\n   for(i=", "1", ";i<=p;i++) {    \n        ", "if", "(i%", "10", "==", "0", "||i%", "10", "==", "1", "||i%", "10", "==", "2", "||i%", "10", "==", "9", ") {                    \n            for(", "t", "=", "0", ";", "t", "<p;", "t", "++) {\n                s[", "t", "]=i;\n            }                \n     \n     }\n        }\n   for(", "t", "=", "0", ";", "t", "<s.length;", "t", "++) {\n         ", "sum", "=", "sum", "+s[", "t", "];\n   }\n     return ", "sum", ";\n", "\n", "   }", "   public static void main(String[] args){", "       LanQiaoBei bb=new LanQiaoBei();", "       bb.setP(40);", "       bb.pp();", "       System.out.println(bb);", "}", "}", "我的运行结果：LanQiaoBei", "@2f92e0f4", "我想要的结果是问题的和，应该是一个整数。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stack&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-comment\"&gt;// 运算符优先级&amp;#xff0c;数值越大&amp;#xff0c;优先级越高&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;priority&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt; || c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; || c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;// 运算数栈&lt;/span&gt;\n    stack&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; opnd;\n    &lt;span class=\"hljs-comment\"&gt;// 运算符栈&lt;/span&gt;\n    stack&amp;lt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;&amp;gt; optr;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c;\n    cin &amp;gt;&amp;gt; c;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (c !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;$&amp;#39;&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-comment\"&gt;// 如果是数字&amp;#xff0c;直接输出&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;isdigit&lt;/span&gt;(c))\n            cout &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;)\n            optr.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(c);\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (optr.&lt;span class=\"hljs-built_in\"&gt;top&lt;/span&gt;() !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;)\n            {\n                cout &amp;lt;&amp;lt; optr.&lt;span class=\"hljs-built_in\"&gt;top&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n                optr.&lt;span class=\"hljs-built_in\"&gt;pop&lt;/span&gt;();\n            }\n            optr.&lt;span class=\"hljs-built_in\"&gt;pop&lt;/span&gt;(); &lt;span class=\"hljs-comment\"&gt;// 将&amp;#39;(&amp;#39;弹出但不输出&lt;/span&gt;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-comment\"&gt;// 如果当前运算符的优先级小于等于栈顶运算符的优先级&amp;#xff0c;则将栈顶运算符弹出并输出&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (!optr.&lt;span class=\"hljs-built_in\"&gt;empty&lt;/span&gt;() &amp;amp;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;priority&lt;/span&gt;(c) &amp;lt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;priority&lt;/span&gt;(optr.&lt;span class=\"hljs-built_in\"&gt;top&lt;/span&gt;()))\n            {\n                cout &amp;lt;&amp;lt; optr.&lt;span class=\"hljs-built_in\"&gt;top&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n                optr.&lt;span class=\"hljs-built_in\"&gt;pop&lt;/span&gt;();\n            }\n            optr.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(c);\n        }\n\n        cin &amp;gt;&amp;gt; c;\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 将剩余的运算符依次弹出并输出&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (!optr.&lt;span class=\"hljs-built_in\"&gt;empty&lt;/span&gt;())\n    {\n        cout &amp;lt;&amp;lt; optr.&lt;span class=\"hljs-built_in\"&gt;top&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n        optr.&lt;span class=\"hljs-built_in\"&gt;pop&lt;/span&gt;();\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["输入算数表达式，计算出该表达式的逆波兰表达式", ["从键盘上输入一个算数表达式，试编写算法，计算出该表达式的逆波兰表达式。规定：逆波兰表达式的长度不超过一行，以$符作为输入结束，操作数之间用空格分隔,操作符只可能有+、-、", "、/四种运算。(注释要详细)", "例1：输入为：2+3$，输出逆波兰表达式为：2 3 +。", "例2：输入为：2", "3$，输出逆波兰表达式为：2 3 ", "。", "例3：输入为：1+2", "3$，输出逆波兰表达式为：1 2 3 * +。", "例4：输入为：（1+2)", "3$，输出逆波兰表达式为：1 2 + 3 ", "。", "例5：输入为：（1+2", "3）", "4$，输出逆波兰表达式为：1 2 3 * + 4 ", "。", "例6：输入为：6", "((5+(2+3)*8)+3)$，输出逆波兰表达式为：6 5 2 3 + 8 * + 3 + *。", "提示1：括号成对，输出运算符；否则，输出数字。", "提示2：求逆波兰表达式规则如下：设立运算数栈OPND，对表达式从左到右扫描(读入)，当表达式中扫描到数时，压入OPND栈。当扫描到运算符时，从OPND退出两个数，进行相应运算，结果再压入OPND栈。这个过程一直不断运行直至表达式结束符$。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;process.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;//冒泡排序&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;bubble_sort&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j,t;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;-i;j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[j] &amp;gt; a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])  &lt;span class=\"hljs-comment\"&gt;//从小到大&amp;#xff0c;升序&lt;/span&gt;\n            {\n                t &amp;#61; a[j];\n                a[j]&amp;#61;a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;t;\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ;\n}\n&lt;span class=\"hljs-comment\"&gt;//判断是否是水仙花&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;isSxh&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; p[],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *ws)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; s &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; n;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; d &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(a&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; d &amp;#61; a%&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        p[i] &amp;#61; d;\n        s &amp;#43;&amp;#61; (d*d*d);\n        a &amp;#61; a/&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        i&amp;#43;&amp;#43;;\n    }\n    *ws &amp;#61; i;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(s &amp;#61;&amp;#61; n)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,s&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,big&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; p[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;],i,ws&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!&lt;span class=\"hljs-built_in\"&gt;isSxh&lt;/span&gt;(n,p,&amp;amp;ws)) &lt;span class=\"hljs-comment\"&gt;//不是水仙花数&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;不是水仙花数\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;//处理水仙花数&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;bubble_sort&lt;/span&gt;(p,ws); &lt;span class=\"hljs-comment\"&gt;//所有数按照从小到大排序&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ws&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,p[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&amp;#43;p[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#43;p[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,p[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&amp;#43;p[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#43;p[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,p[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&amp;#43;p[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#43;p[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,p[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&amp;#43;p[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#43;p[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,p[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&amp;#43;p[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#43;p[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,p[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&amp;#43;p[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#43;p[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]);\n    }\n    \n\n\n    s&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;ws;i&amp;#43;&amp;#43;)\n        s &amp;#61; s*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; p[i];\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;最小数是%d\\n&amp;#34;&lt;/span&gt;,s);\n    s &amp;#61; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10.0&lt;/span&gt;,ws&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;); &lt;span class=\"hljs-comment\"&gt;//n位最大数&lt;/span&gt;\n    big &amp;#61; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10.0&lt;/span&gt;,ws)&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//n位最小数&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//变量从最大的数到最小的数&amp;#xff0c;并找出其中的水仙花数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;big;i&amp;gt;&amp;#61;s;i--)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;isSxh&lt;/span&gt;(i,p,&amp;amp;ws))\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,i);\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["编写程序，实现水仙花数的计算", ["1）输入一个 n 位的数，先判断是否为水仙花数。如果是水仙花数，则调整这个", "n 位数的各位数字的顺序，获取相同的 n 个数字所能组成的所有数，并按数", "的大小进行排序后，找到其中最小的那个数。", "2）可以求出所有 n 位数中的水仙花数，并按大小排序显示在界面上。"]], "Tag": "算法设计"}
{"Answer": "因为 参数需要两个String类型的      System.currentTimeMills()是Long类型 +“”可以转成String类型", "Konwledge_Point": "算法与数字", "Question": ["读程序时候不理解一个地方。。。求解答", ["Cookie cookie=new Cookie（\"lastTime\",System.currentTimeMillis()+\"\"）;", "\n后面为什么要加\"\"啊  有什么特殊的含义或者用法吗"]], "Tag": "算法设计"}
{"Answer": "import java.util.HashSet;\r\nimport java.util.Iterator;\r\nimport java.util.Set;\r\n\r\n\r\npublic class Test {\r\n\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint i,j,k,m,n,t1,t2,t3;\r\n\t\tSet total=new HashSet();\r\n\t\tfor(int t=1;t&lt;10;t++) {\r\n\t\t\ttotal.add(t);\r\n\t\t}\r\n\t\tSet set=new HashSet();\r\n\t\tSet lastThree=new HashSet();\r\n\t\tfor(i=1;i&lt;4;i++) {\r\n\t\t\tset.add(i);\r\n\t\t\tfor(j=1;j&lt;10;j++) {\r\n\t\t\t\tif(j==i){ continue;}\r\n\t\t\t\tset.add(j);\r\n\t\t\t\tfor(k=1;k&lt;10;k++) {\r\n\t\t\t\t\tif(k==i||k==j) { continue;}\r\n\t\t\t\t\tset.add(k);\r\n\t\t\t\t\tm=3*(i*100+j*10+k);\r\n\t\t\t\t\tif(m&gt;987){set.remove(k);continue;}//如果已超出范围，没必要再往下判断\r\n\t\t\t\t\tt1=m%10; if(t1==0) {set.remove(k);continue;} //个位数\r\n\t\t\t\t\tt2=(m%100)/10; if(t2==0) {set.remove(k);continue;} //十位数\r\n\t\t\t\t\tt3=m/100;  if(t3==0) {set.remove(k);continue;}//百位数\r\n\t\t\t\t\tif(set.contains(t1)){set.remove(k);continue;}\r\n\t\t\t\t\tset.add(t1);\r\n\t\t\t\t\tif(set.contains(t2)) {set.remove(k);set.remove(t1);continue;}\r\n\t\t\t\t\tset.add(t2);\r\n\t\t\t\t\tif(set.contains(t3)) {set.remove(k);set.remove(t1);set.remove(t2);continue;}\r\n\t\t\t\t\tset.add(t3);\r\n\t\t\t\t\t//System.out.println(\"  \"+i+j+k+\"   \"+m);\r\n\t\t\t\t\ttotal.removeAll(total);\r\n\t\t\t\t\tfor(int q=1;q&lt;10;q++) {\r\n\t\t\t\t\t\ttotal.add(q);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttotal.removeAll(set);\r\n                    int[] s=new int[3];\r\n                    Iterator iterator=total.iterator();\r\n                    int p=0;\r\n                    while(iterator.hasNext()) {\r\n                    \ts[p]=Integer.parseInt(iterator.next()+\"\");\r\n                    \tp++;\r\n                    }\r\n                    n=s[0]*100+s[1]*10+s[2];   \r\n                    if(n==2*(i*100+j*10+k)) { System.out.println(i+\"\"+j+\"\"+k+\"    \"+n+\"    \"+m);}\r\n                    n=s[0]*100+s[2]*10+s[1];    \r\n                    if(n==2*(i*100+j*10+k)) { System.out.println(i+\"\"+j+\"\"+k+\"    \"+n+\"    \"+m);}\r\n                    n=s[1]*100+s[0]*10+s[2];   \r\n                    if(n==2*(i*100+j*10+k)) { System.out.println(i+\"\"+j+\"\"+k+\"    \"+n+\"    \"+m);}\r\n                    n=s[1]*100+s[2]*10+s[0]; \r\n                    if(n==2*(i*100+j*10+k)) { System.out.println(i+\"\"+j+\"\"+k+\"    \"+n+\"    \"+m);}\r\n                    n=s[2]*100+s[0]*10+s[1]; \r\n                    if(n==2*(i*100+j*10+k)) { System.out.println(i+\"\"+j+\"\"+k+\"    \"+n+\"    \"+m);}\r\n                    n=s[2]*100+s[1]*10+s[0]; \r\n                    if(n==2*(i*100+j*10+k)) { System.out.println(i+\"\"+j+\"\"+k+\"    \"+n+\"    \"+m);}\r\n                    set.remove(t1);\r\n                    set.remove(t2);\r\n                    set.remove(t3);\r\n                    set.remove(k);\r\n\t\t\t\t} \r\n\t\t\t\t   set.remove(j);\r\n\t\t\t}\r\n\t\t\tset.remove(i);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n运行结果：\r\n192    384    576\r\n219    438    657\r\n273    546    819\r\n327    654    981\r\n\r\n我的思想是，第一个数百位数最大为3，可谓一层循环，十位和各位则组成两层循环。\r\n用一个Set容器来存储第一个三位数，利用第一个数求出第三个数（3倍第一个数），把第三个数的每一位求出，看是否符合，符合则加入set容器，而这时只剩下三个数，对这三个数的六种情况求解，等于第一个数的两倍即成立。很麻烦，思想很简单", "Konwledge_Point": "算法与数字", "Question": ["一道java面试题目", ["给出下题的算法(Java语言实现)", "\n将1、2、3、4、5、6、7、8、9 这九个数字分成三个百位数，每个数字用且只用一次，", "\n并且第三个数字是第一个的3倍，第二个数字是第一个的2倍。", "\n求三个数。[说明，结果可能多于一组，例如327  654  981]", "\n这个是看到一家公司的面试题目，想了一下还没有找到什么好的方法来解决。", "\n请各位帮下忙。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;get_nearest_lucky_ticket&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;):\n    i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; i&amp;lt;&amp;#61;n:\n        li &amp;#61; &lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(n&amp;#43;i)))\n        a &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(li[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;::&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])\n        b &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(li[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;::&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; a&amp;#61;&amp;#61;b:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; n&amp;#43;i\n        li &amp;#61; &lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(n-i)))\n        a &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(li[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;::&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])\n        b &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(li[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;::&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; a&amp;#61;&amp;#61;b:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; n-i\n        i &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;assert&lt;/span&gt; get_nearest_lucky_ticket ( &lt;span class=\"hljs-number\"&gt;111111&lt;/span&gt; ) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;111111&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;assert&lt;/span&gt; get_nearest_lucky_ticket ( &lt;span class=\"hljs-number\"&gt;123321&lt;/span&gt; ) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;123321&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;assert&lt;/span&gt; get_nearest_lucky_ticket ( &lt;span class=\"hljs-number\"&gt;123320&lt;/span&gt; ) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;123321&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;assert&lt;/span&gt; get_nearest_lucky_ticket ( &lt;span class=\"hljs-number\"&gt;333999&lt;/span&gt; ) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;334004&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["用Python，用奇偶性判断幸运数字", ["问题遇到的现象和发生背景", "\n", "如果它的奇数位置的数字的和等于偶数位置的数字的和，那么我们称票为幸运的。", "写下一个函数，它以一个票号作为参数，并返回最近的幸运票号（如果有两个的话）。", "最接近的票号意味着它与给定的票号之间的绝对差异被最小化。", "一个给定的票务号码应该是一个可接受的自然2𝑘位数（它有偶数位数），没有前导零。", "笔记将程序保存到文件ticket.py中，并为解决方案函数提供名称get_nearest_lucky_ticket。", "\n", "问题相关代码，请勿粘贴截图", "\n", "Example\nassert get_nearest_lucky_ticket ( ", "111111", " ) ", "=", "=", " ", "111111", "\nassert get_nearest_lucky_ticket ( ", "123321", " ) ", "=", "=", " ", "123321", "\nassert get_nearest_lucky_ticket ( ", "123320", " ) ", "=", "=", " ", "123321", "\nassert get_nearest_lucky_ticket ( ", "333999", " ) ", "=", "=", " ", "334004", "\n\n", "\n", "我想要达到的结果", "\n", "代码最后使用以上assert测试代码，代码写一下注释。"]], "Tag": "算法设计"}
{"Answer": "数字证书是什么格式的，是要生产签名还是验签？放到一个文件目录下就可以了。\r\n你可以看下java.security这个包下面的类", "Konwledge_Point": "算法与数字", "Question": ["java 怎么使用数字证书", ["做一个接口开发，对方想用RSA加密算法，他发给我了一个数字证书，这个数字证书在java开发中要怎么用呢，放在固定的目录下吗？\n"]], "Tag": "算法设计"}
{"Answer": "https://www.nowcoder.com/questionTerminal/6bcd2d10a11e47c9b707f1d81d4bc1dc", "Konwledge_Point": "算法与数字", "Question": ["float小数怎么精确到6个数字，这个问题的算法？", ["Problem Description", "\nYou have been selected to write the navigation module for PropBot. Unfortunately, the mechanical engineers have not provided a lot of flexibility in movement; indeed, the PropBot can only make two distinct movements. It can either move 10 cm forward, or turn towards the right by 45 degrees. Each of these individual movements takes one second of time.", "\n\n", "Input", "\nYour module has two inputs: the Cartesian coordinates of a point on the plane that the PropBot wants to get as close to as possible, and the maximum number of seconds that can be used to do this. At the beginning of the navigation, the robot is located at the origin, pointed in the +x direction.", "\n\n", "The number of seconds will be an integer between 0 and 24, inclusive. Both the x and y coordinates of the desired destination point will be a real number between -100 and 100, inclusive.", "\n\n", "The first entry in the input file will be the number of test cases, t (0 < t <= 100). Following this line will be t lines, with each line containing three entries separated by spaces. The first entry will be the number of seconds PropBot has to get close to the point. The second entry is the x-coordinate of the point, and the third entry is the y-coordinate of the point.", "\n\n", "Output", "\nYour program must return the distance between the goal point and the closest point the robot can get to within the given time.", "\n\n", "Your result should include at least one digit to the left of the decimal point, and exactly six digits to the right of the decimal point. To eliminate the chance of round off error affecting the results, we have constructed the test data so the seventh digit to the right of the decimal point of the true result is never a 4 or a 5.", "\n\n", "Sample Input", "\n2", "\n24 5.0 5.0", "\n9 7.0 17.0", "\n\n", "Sample Output", "\n0.502525", "\n0.100505"]], "Tag": "算法设计"}
{"Answer": "利用apriori算法，挖掘频繁出现的 2项集", "Konwledge_Point": "算法与数字", "Question": ["在一组3位数中，求同时出现次数最多的2个数字。", ["在一组3位数中，求**同时出现**次数最多的2个数字。", "\n注：所求的2个数字在每组数中同时出现。"]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/c1299401227/p/5592095.html", "Konwledge_Point": "算法与数字", "Question": ["一个有关任务算法的问题，不太会做，请教各位了。", ["Problem Description", "\nThere are two kinds of tasks, namely A and B. There are N workers and the i-th worker would like to finish one task A in ai minutes, one task B in bi minutes. Now you have X task A and Y task B, you want to assign each worker some tasks and finish all the tasks as soon as possible. You should note that the workers are working simultaneously.", "\n\n", "Input", "\nIn the first line there is an integer T(T<=50), indicates the number of test cases.", "\n\n", "In each case, the first line contains three integers N(1<=N<=50), X,Y(1<=X,Y<=200). Then there are N lines, each line contain two integers ai, bi (1<=ai, bi <=1000).", "\n\n", "Output", "\nFor each test case, output “Case d: “ at first line where d is the case number counted from one, then output the shortest time to finish all the tasks.", "\n\n", "Sample Input", "\n3", "\n2 2 2", "\n1 10", "\n10 1", "\n2 2 2", "\n1 1", "\n10 10", "\n\n", "3 3 3", "\n2 7", "\n5 5", "\n7 2", "\n\n", "Sample Output", "\nCase 1: 2", "\nCase 2: 4", "\nCase 3: 6"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m &amp;#61; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, n &amp;#61; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, i, j;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;m, &amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n; j&amp;#43;&amp;#43;) \n            i % (m - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || j % (n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ? &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;*&amp;#34;&lt;/span&gt;) : &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["输出一个m行n列的图形", ["实验四 13．输出一个m行n列的由*组成边框的长方形。例如若m为4、n为6时，则输出：", "\n", "要求：m和n从键盘输入，且m≥2 、n≥2，下述两种算法都可以实现，也可以用其他方法。", "\n", "算法1：第1行和第m行输出n个", "。其他行先输出一个", "，再输出n-2个空格，最后输出一个*。每行结尾输出一个换行符。", "\n", "算法2：将上述图形看成由", "和空格构成的长方形点阵。做一个双重循环，外循环m行，内循环n列，当行号为1或行号为m或列号为1或列号n时输出", "，其他情况输出空格。每行结尾输出一个换行符。"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/xiexingshishu/article/details/77584177", "Konwledge_Point": "算法与数字", "Question": ["一个数字的乘法问题，用C语言怎么实现这个算法的优化呢？", ["Problem Description", "\nAt a container terminal, containers arrive from the hinterland, one by one, by rail, by road, or by small ships. The containers are piled up as they arrive. Then the huge cargo ships arrive, each one capable of carrying thousands of containers. The containers are loaded into the ships that will bring them to far away shores. Or the other way round, containers are brought in over sea, piled up, and transported to the hinterland one by one. Anyway, a huge parking lot is needed, to store the containers waiting for further transportation.", "\n\n", "Building the new container terminal at the mouth of the river was a good choice. But there are disadvantages as well. The ground is very muddy, and building on firm ground would have been substantially cheaper. It will be important to build the parking lot not larger than necessary.", "\n\n", "A container is 40 feet long and 8 feet wide. Containers are stacked, but a stack will be at most five containers high. The stacks are organized in rows. Next to a container stack, and between two container stacks (along the long side of the containers) a space of 2 feet is needed for catching the containers. Next to a row of stacks, and between two stacks (along the short side of the containers) a space of 4 feet is needed for the crane that lifts the containers. All containers are placed in the same direction, as the cranes can not make turns on the parking lot.", "\n\n", "The parking lot should be rectangular. Given the required capacity of the parking lot, what will be the best dimension for the parking lot? In the first place the area should be minimal. The second condition is that the parking lot should be as square as possible.", "\n\n", "Below you see a plan for a parking lot with a capacity of 8 stacks. Two rows of four containers each turns out to be the best solution here, with a total area of 92 × 42 = 3864.", "\n\n", "A parking lot with 8 container stacks.", "\n\n", "Input", "\nOn the first line one positive number: the number of testcases, at most 100. After that per testcase:", "\n\n", "A single positive integer n (n ≤ 1012) on a single line: the required capacity (number of containers) for the parking lot.", "\n\n", "Output", "\nPer testcase:", "\n\n", "A single line, containing the length, width (length ≥ width) and area of the optimal solution. The optimal solution has the least possible area, and if there are multiple solutions having the same area, the difference length - width should be minimal.", "\nUse the sample format.", "\n\n", "Sample Input", "\n6", "\n1", "\n15", "\n22", "\n29", "\n36", "\n43", "\n\n", "Sample Output", "\n48 X 12 = 576", "\n48 X 32 = 1536", "\n52 X 48 = 2496", "\n92 X 32 = 2944", "\n92 X 42 = 3864", "\n136 X 32 = 4352"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你学号和手机号是要int类型还是字符串char []类型&lt;/p&gt;\n&lt;p&gt;输入,判断和输出都应该统一,不要一会用int类型一会用字符串char []类型&lt;/p&gt;\n&lt;p&gt;int的范围是:-2147483648 to 2147483647&lt;br /&gt;你手机号有11位数超出int能承载的最大范围&lt;br /&gt;需要把学号与手机号改成long long int 类型&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    struct student {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        long long int nume_student;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        long long int phone_number;&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;与之相关的a,d,op也改成long long int 类型&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    long long int a;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    long long int d;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    long long int op;&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;学号与手机号输入和输出用%lld,不需要转成字符串了, 也就不需要nty了&lt;/p&gt;\n&lt;p&gt;你题目的解答代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; _CRT_NONSTDC_NO_DEPRECATE&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; _CRT_SECURE_NO_DEPRECATE&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; size 50&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;student&lt;/span&gt; {\n        &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; nume_student;\n        &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; name_student[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n        &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; sex_student;\n        &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; phone_number;\n        &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; score_yuwen;\n        &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; score_math;\n        &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; score_english;\n        &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; score_pinde;\n        &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; total_score;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; rank;\n        &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; attach[&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;];\n    }stu[size];\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; uio[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; b;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c;\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; d;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; e;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; f;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; g;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; h;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; j;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* l;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; lo;\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; op;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请问您要输入多少个信息&amp;#xff1f;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;lo);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;确认输入%d个信息\\n开始输入您的信息:\\n&amp;#34;&lt;/span&gt;, lo);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;lo;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld %s %c %lld %f %f %f %f %s&amp;#34;&lt;/span&gt;,&amp;amp;a, stu[i].name_student, &amp;amp;c,&amp;amp;d, &amp;amp;e, &amp;amp;f, &amp;amp;g, &amp;amp;h,stu[i].attach);\n        stu[i].nume_student &amp;#61; a;\n        stu[i].sex_student &amp;#61; c;\n        stu[i].phone_number &amp;#61; d;\n        stu[i].score_yuwen &amp;#61; e;\n        stu[i].score_math &amp;#61; f;\n        stu[i].score_english &amp;#61; g;\n        stu[i].score_pinde &amp;#61; h;\n        stu[i].total_score &amp;#61; e &amp;#43; f &amp;#43; g &amp;#43; h;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请问您要查询哪个学号&amp;#xff1f;\\n&amp;#34;&lt;/span&gt;);     &lt;span class=\"hljs-comment\"&gt;//在这之前没什么大问题_&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;, &amp;amp;op);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; lo; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (op&amp;#61;&amp;#61;stu[i].nume_student)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i&amp;lt;lo)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;学号为%lld 姓名为%s 性别为%c 手机号为%lld 语文成绩为%f 数学成绩为%f 英语成绩为%f 品德分为%f 综合评测分为%f 排名为 备注为%s&amp;#34;&lt;/span&gt;, stu[i].nume_student ,stu[i].name_student,stu[i].sex_student, stu[i].phone_number , stu[i].score_yuwen, stu[i].score_math, stu[i].score_english, stu[i].score_pinde, stu[i].total_score, stu[i].attach);\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;没有找到学号%d&amp;#34;&lt;/span&gt;,op);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "算法与数字", "Question": ["数字转字符串永远乱码怎么回事？", ["\n", "#", "define", " _CRT_NONSTDC_NO_DEPRECATE", "\n", "#", "define", " _CRT_SECURE_NO_DEPRECATE", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", " ", "<string>", "\n", "using", " ", "namespace", " std;\n", "#", "define", " size 50", "\n", "int", " ", "main", "()", " ", "{\n    ", "struct", " ", "student", " {\n        ", "int", " nume_student;\n        ", "char", " name_student[", "20", "];\n        ", "char", " sex_student;\n        ", "int", " phone_number;\n        ", "float", " score_yuwen;\n        ", "float", " score_math;\n        ", "float", " score_english;\n        ", "float", " score_pinde;\n        ", "float", " total_score;\n        ", "int", " rank;\n        ", "char", " attach[", "50", "];\n    }stu[size];\n    ", "struct", " ", "num", " {\n        ", "char", " iuy[", "100", "];\n        ", "char", " tyu[", "100", "];\n    }nty[size];\n    ", "char", " uio[", "100", "];\n    ", "int", " a;\n    ", "char", " b;\n    ", "char", " c;\n    ", "int", " d;\n    ", "float", " e;\n    ", "float", " f;\n    ", "float", " g;\n    ", "float", " h;\n    ", "float", " j;\n    ", "int", " k;\n    ", "char", "* l;\n    ", "int", " i;\n    ", "int", " lo;\n    ", "int", " op;\n    ", "printf", "(", "\"请问您要输入多少个信息？\"", ");\n    ", "scanf", "(", "\"%d\"", ", &lo);\n    ", "printf", "(", "\"确认输入%d个信息\\n开始输入您的信息\"", ", lo);\n    ", "for", " (i = ", "0", ";i<lo;i++)\n    {\n        ", "scanf", "(", "\"%d %s %c %d %f %f %f %f %s\"", ",&a, stu[i].name_student, &c,&d, &e, &f, &g, &h,stu[i].attach);\n        stu[i].sex_student = c;\n        stu[i].score_yuwen = e;\n        stu[i].score_math = f;\n        stu[i].score_english = g;\n        stu[i].score_pinde = h;\n        stu[i].total_score = e + f + g + h;\n        ", "itoa", "(a, nty[i].iuy, ", "10", ");     _ ", "//这句是我为了数字转化字符串后加的_", "\n        ", "itoa", "(d, nty[i].tyu, ", "10", ");    ** ", "//这句是我为了数字转化字符串后加的**", "\n\n\n    }\n    ", "printf", "(", "\"请问您要查询哪个学号？\\n\"", ");     _", "//在这之前没什么大问题_", "\n    ", "scanf", "(", "\"%d\"", ", &op);\n    ", "sprintf", "(uio, ", "\"%ld\"", ",op)\n    ", "printf", "(", "\"%s\"", ", uio);   **_", "//这一步输出uio的字符串，永远都不是我12位的学号永远都是8位数左右的随机数字_**", "\n    ", "int", " r = ", "strcmp", "(uio, nty[i].iuy);\n    i = ", "0", ";\n    ", "while", " (r!=", "0", ")\n    {\n        i++;\n        r = ", "strcmp", "(uio, nty[i].iuy);\n    }\n    ", "printf", "(", "\"学号为%s 姓名为%s 性别为%c 手机号为%s 语文成绩为%f 数学成绩为%f 英语成绩为%f 品德分为%f 综合评测分为%f 排名为 备注为%s\"", ", nty[i].iuy,stu[i].name_student,stu[i].sex_student, nty[i].tyu, stu[i].score_yuwen, stu[i].score_math, stu[i].score_english, stu[i].score_pinde, stu[i].total_score, stu[i].attach);\n", "\n", "我的目的只有一个，最后我输入我的学号通过while判断找到结构体数组里面我自己信息的那一组然后自己的学号和手机号完美输出不是随机数字也不是乱码，其他的名称成绩统统已经没问题了就是学号和手机号永远不能完好输出。然后我尝试数字改字符串，然后通过strcmp字符串while比较来找到自己的那一组信息，但没等断点测试到while那一行前面数字就不对劲了，5个小时，真顶不住了，希望有可以告诉我怎么在student那块设立结构体数组的时候在学号和手机号也就是nume_student;和phone_number;前面依旧定义int而不是char我知道char最容易但我们课题就是int说最好别改，所以在int前提下成功最后输出我的学号和手机号，悬赏问题，感谢你们了。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;Full(number,begin&amp;#43;1,size-2);&lt;br /&gt;---你这里size每次减去2&amp;#xff0c;然后判断的时候用size%2&amp;#61;&amp;#61;1&lt;br /&gt;每次减去2&amp;#xff0c;那么每次递归的size要么一直是奇数&amp;#xff0c;要么一直是偶数&amp;#xff0c;没有实现奇偶交叉啊&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["数字旋转方阵的有条件输入", ["对于数字旋转方阵可以进行一圈输入为数字一圈输入为0交叉互换输入。以此为基础进行c++代码编写但是运行结果要么为纯数字要么全为0？？这是为什么呢？？", "#include<stdio.h>", "#define N 10", "int data[N][N]={0};", "\n", "void Full(int number,int begin,int size)", "{", "  int i,j,k;", "  if(size==0) return;", "  if(size==1){", "    data[begin][begin]=number;", "    return;", "  }", "  i=begin;j=begin;", "  if((size%2)==1){", "    for(k=0;k<size-1;k++)", "    {", "      data[i][j]=number;", "      number++;", "      i++;", "    }", "    for(k=0;k<size-1;k++)", "    {", "      data[i][j]=number;", "      number++;", "      j++;", "    }", "    for(k=0;k<size-1;k++)", "    {", "      data[i][j]=number;", "      number++;", "      i--;", "    }", "    for(k=0;k<size-1;k++)", "    {", "      data[i][j]=number;", "      number++;", "      j--;", "    }", "   }", "  else{", "    number=0;", "    for(k=0;k<size-1;k++)", "    {", "      data[i][j]=number;", "      i++;", "    }", "    for(k=0;k<size-1;k++)", "    {", "      data[i][j]=number;", "      j++;", "    }", "    for(k=0;k<size-1;k++)", "    {", "      data[i][j]=number;", "      i--;", "    }", "    for(k=0;k<size-1;k++)", "    {", "      data[i][j]=number;", "      j--;", "    }", "   }", "  Full(number,begin+1,size-2);", "  return;", "}", "\n", "void OutPrint(int size)", "{", "  int i,j;", "  for(i=0;i<size;i++){", "    for(j=0;j<size;j++)", "    {", "      printf(\"%4d\",data[i][j]);", "    }", "    printf(\"\\n\");", "  }", "}", "\n", "int main()", "{", "  int n;", "  printf(\"输入方阵阶数(小于10):\\n\");", "  scanf(\"%d\",&n);", "  Full(1,0,n);", "  OutPrint(n);", "  return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你排序传参列表时应该用 array.copy()复制下列表&lt;br /&gt;不然.上一个排序算法把列表排序了之后,下一个排序算法再排序时这个列表已经是排序好的了&amp;#xff0c;这样计算时间就不准确了&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-built_in\"&gt;result&lt;/span&gt; &amp;#61; sort(&lt;span class=\"hljs-type\"&gt;array&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;#加上.copy()&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;改成&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;result &amp;#61;&lt;span class=\"hljs-built_in\"&gt; sort&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;array&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;copy&lt;/span&gt;())\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;对于已经排序好的数组再用快速排序时, 因为快速排序中是用数组第一个值作为中心数,这样中心数都是最小值&amp;#xff0c;造成了递归层级非常多,&lt;br /&gt;列表长度4000,就要递归4000层,你就是设置了sys.setrecursionlimit(100000)递归栈的最大也只能到3000多层, 到达递归最大层数时就会因为递归栈溢出而出错,停止程序.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "算法与数字", "Question": ["python中变化数字列表长度，统计不同排序算法时间中，def计算时间的函数后，为什么当列表大于4000时就不运行了", ["\n", "python中变化数字列表长度，统计不同排序算法时间中，def计算时间的函数后，为什么当列表大于4000时就不运行了，而且为什么使用count-time时，insertionsort的运行时间为0"]], "Tag": "算法设计"}
{"Answer": "结构体变量 它终究是个变量，变量中只有对象的引用 而真正的对象是在内存中的\r\n\r\n\r\n结构体中可以声明一些属性，但是它里面不能有方法吧  结构体就是自己封装的一种数据结构  而类它是所有 对象的描述 ，包括属性 和行为 也就是方法吧", "Konwledge_Point": "算法与数字", "Question": ["帮我解答一下这两道C语言的选择题，谢谢！", []], "Tag": "算法设计"}
{"Answer": "刚才复制没完全...\r\n\r\n```\r\n import java.util.*;\r\n\r\npublic class Test {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\twhile (true) {\r\n\t\t\tSystem.out.println(\"=======猜拳游戏=====\");\r\n\t\t\tSystem.out.println(\"请出拳：(1.剪刀 2.石头 3.布)\");\r\n\t\t\tint number = in.nextInt();\r\n\t\t\tif (number &gt; 3 || number &lt; 1) {\r\n\t\t\t\tSystem.out.println(\"你出拳作弊，请重新合法出拳\");\r\n\t\t\t} else {\r\n\t\t\t\tint number1 = (int) ((Math.random() * 3) + 1);\r\n\t\t\t\tif (number == number1) {\r\n\t\t\t\t\tSystem.out.println(\"你出的是\" + getName(number) + \"\\t电脑出的是\" + getName(number1)\r\n\t\t\t\t\t\t\t+ \"\\t本局平局\");\r\n\t\t\t\t} else if (number &lt; number1 || number==3&amp;&amp;number1==1) {\r\n\t\t\t\t\tSystem.out.println(\"你出的是\" + getName(number) + \"\\t电脑出的是\" + getName(number1)\r\n\t\t\t\t\t\t\t+ \"\\t本局你输\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tSystem.out.println(\"你出的是\" + getName(number) + \"\\t电脑出的是\" + getName(number1)\r\n\t\t\t\t\t\t\t+ \"\\t本局你赢\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static String getName(int n){\r\n\t\tString s = null;\r\n\t\tswitch(n){\r\n\t\tcase 1: s = \"剪刀\"; break;\r\n\t\tcase 2: s = \"石头\"; break;\r\n\t\tcase 3: s = \"布\"; break;\r\n\t\t}\r\n\t\treturn s;\r\n\t}\r\n}\r\n```", "Konwledge_Point": "算法与数字", "Question": ["小白求助，猜拳游戏优化。", ["该如何实现输出的是：你出的是剪刀 ，电脑出的布、这样的形式呢。我目前只能以数字 代替。", "\n代码如下：求大神指点、", "\nimport java.util.*;", "\npublic class A3_10{", "\n    public static void main(String[] args){", "\n        Scanner in=new Scanner(System.in);", "\n        while(true){", "\n            System.out.println(\"=======猜拳游戏=====\");", "\n            System.out.println(\"请出拳：(1.剪刀    2.石头     3.布)\");", "\n            int number=in.nextInt();", "\n            if(number>3||number<1){", "\n                System.out.println(\"你出拳作弊，请重新合法出拳\");", "\n            }else{", "\n                int number1=(int)((Math.random()*3)+1);", "\n                if(number==number1){", "\n                    System.out.println(\"你出的是\"+number+\"\\t电脑出的是\"+number1+\"\\t本局平局\");", "\n                }else if(number<number1){", "\n                    System.out.println(\"你出的是\"+number+\"\\t电脑出的是\"+number1+\"\\t本局你输\");", "\n                }else{", "\n                    System.out.println(\"你出的是\"+number+\"\\t电脑出的是\"+number1+\"\\t本局你赢\");", "\n                }", "\n            }", "\n        }", "\n    }", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;花了点时间&amp;#xff0c;用递归和减而治之的思想。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;deque&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Generate&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; deque&amp;lt;&lt;span class=\"hljs-type\"&gt;int64_t&lt;/span&gt;&amp;gt; &amp;amp;operands, &lt;span class=\"hljs-type\"&gt;int64_t&lt;/span&gt; D, deque&amp;lt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;&amp;gt; &amp;amp;operators, &lt;span class=\"hljs-type\"&gt;int64_t&lt;/span&gt; &amp;amp;result)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (operands.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;() &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1u&lt;/span&gt;) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((operands[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;gt;&amp;#61; D) &amp;amp;&amp;amp; (result &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;) || (result &amp;gt; operands[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])) {\n            result &amp;#61; operands[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];    \n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 加法运算&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;tmpOperands&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(operands)&lt;/span&gt;&lt;/span&gt;;\n    tmpOperands[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43;&amp;#61; tmpOperands[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n    tmpOperands.&lt;span class=\"hljs-built_in\"&gt;pop_front&lt;/span&gt;();\n    operators.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;Generate&lt;/span&gt;(tmpOperands, D, operators, result);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (result &amp;#61;&amp;#61; D) {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    operators.&lt;span class=\"hljs-built_in\"&gt;pop_back&lt;/span&gt;();\n\n    &lt;span class=\"hljs-comment\"&gt;// 乘法运算&lt;/span&gt;\n    tmpOperands[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; operands[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] * operands[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n    operators.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;Generate&lt;/span&gt;(tmpOperands, D, operators, result);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (result !&amp;#61; D) {\n        operators.&lt;span class=\"hljs-built_in\"&gt;pop_back&lt;/span&gt;();\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; **)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int64_t&lt;/span&gt; N, D, i;\n    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; D;\n\n    deque&amp;lt;&lt;span class=\"hljs-type\"&gt;int64_t&lt;/span&gt;&amp;gt; operands;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; N; &amp;#43;&amp;#43;i) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t;\n        cin &amp;gt;&amp;gt; t;\n        operands.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(t);\n    }\n\n    deque&amp;lt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;&amp;gt; operators;\n    &lt;span class=\"hljs-type\"&gt;int64_t&lt;/span&gt; result &amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;Generate&lt;/span&gt;(operands, D, operators, result);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (result &amp;#61;&amp;#61; D) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; N - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &amp;#43;&amp;#43;i) {\n            cout &amp;lt;&amp;lt; operands[i] &amp;lt;&amp;lt; operators[i];\n        }\n        cout &amp;lt;&amp;lt; operands[i] &amp;lt;&amp;lt; endl;\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;NO&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; endl;\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["一道c++算法题，不知道该怎么设计，求指导", ["一道c++算法题，不知道该怎么设计，求指导", "用户可以输入n个数和目标D。", "可使用的运算符限定于加号和乘号两种，且它们之间既没有优先级次序也不得使用括号（故计算总是按输入n个数的顺序及添加的运算符自左向右进行）。", "一旦得不到目标D，希望知道一个能够通过这n个数得出的大于D的最小值。", "【输入】", "第一行两个正整数 N 和 D，分别表示数的个数和目标结果。第二行为 N 个数字，以空格分隔。", "【输出】", "若能得到D，则输出一个对应算式；否则输出No，以及大于D的最小值（最小值不存在则输出-1）。", "【限制】1 ≤ N ≤ 24，1 ≤ D < 2^60", "【输入样例1】", "4 235", "34 12 5 5", "【输出样例1】", "34+12*5+5", "【输入样例2】", "3 600", "9 9 9", "【输出样例2】", "No", "729"]], "Tag": "算法设计"}
{"Answer": "Console.WriteLine(\"{0}的阶乘结果为:{0}\", a, jc);改为 Console.WriteLine(\"{0}的阶乘结果为:{1}\", a, jc);", "Konwledge_Point": "算法与数字", "Question": ["c#初学者关于for语句进行阶乘计算的问题", ["    请问各位前辈大神为何这段代码计算后的结果和输入的结果是一样的,比较输入6,结果还是6,而不是阶乘的结果.\n                    //求输入数字的阶乘\n        Console.WriteLine(\"请输入一个数字:\");\n        int a = int.Parse(Console.ReadLine());\n        int jc = 1;\n        for(int i=1;i<=a;i++)\n        {\n            jc *= i;\n        }\n        Console.WriteLine(\"{0}的阶乘结果为:{0}\", a, jc);\n        Console.ReadKey();\n"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;An alternative approach would be to extract features (keypoints) using the &lt;a href=\"https://en.wikipedia.org/wiki/Scale-invariant_feature_transform\" rel=\"nofollow noreferrer\"&gt;scale-invariant feature transform&lt;/a&gt; (SIFT) or &lt;a href=\"https://en.wikipedia.org/wiki/Speeded_up_robust_features\" rel=\"nofollow noreferrer\"&gt;Speeded Up Robust Features&lt;/a&gt; (SURF).&lt;/p&gt;\n\n&lt;p&gt;It is implemented in &lt;a href=\"https://en.wikipedia.org/wiki/OpenCV\" rel=\"nofollow noreferrer\"&gt;OpenCV&lt;/a&gt; 2.3.1.&lt;/p&gt;\n\n&lt;p&gt;You can find a nice code example using features in &lt;em&gt;&lt;a href=\"http://docs.opencv.org/2.4/doc/tutorials/features2d/feature_homography/feature_homography.html\" rel=\"nofollow noreferrer\"&gt;Features2D + Homography to find a known object&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Both algorithms are invariant to scaling and rotation. Since they work with features, you can also handle &lt;a href=\"http://en.wikipedia.org/wiki/Ambient_occlusion\" rel=\"nofollow noreferrer\"&gt;occlusion&lt;/a&gt; (as long as enough keypoints are visible).&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=\"https://i.stack.imgur.com/kF63R.jpg\" alt=\"Enter image description here\"&gt;&lt;/p&gt;\n\n&lt;p&gt;Image source: tutorial example&lt;/p&gt;\n\n&lt;p&gt;The processing takes a few hundred ms for SIFT, SURF is bit faster, but it not suitable for real-time applications. ORB uses FAST which is weaker regarding rotation invariance.&lt;/p&gt;\n\n&lt;h3&gt;The original papers&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"http://www.vision.ee.ethz.ch/~surf/eccv06.pdf\" rel=\"nofollow noreferrer\"&gt;SURF: Speeded Up Robust Features&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"http://www.cs.ubc.ca/~lowe/papers/ijcv04.pdf\" rel=\"nofollow noreferrer\"&gt;Distinctive Image Features\nfrom Scale-Invariant Keypoints&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"http://www.willowgarage.com/sites/default/files/orb_final.pdf\" rel=\"nofollow noreferrer\"&gt;ORB: an efficient alternative to SIFT or SURF&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    &lt;/div&gt;", "Konwledge_Point": "算法与数字", "Question": ["图像处理: 可口可乐罐识别算法的改进", ["\n\n", "One of the most interesting projects I've worked on in the past couple of years was a project about ", "image processing", ". The goal was to develop a system to be able to recognize Coca-Cola ", "'cans'", " (note that I'm stressing the word 'cans', you'll see why in a minute). You can see a sample below, with the can recognized in the ", "green rectangle", " with scale and rotation.", "\n\n", "\n\n", "Some constraints on the project:", "\n\n", "\n", "The background could be very noisy.", "\n", "The ", "can", " could have any ", "scale", " or ", "rotation", " or even orientation (within reasonable limits).", "\n", "The image could have some degree of fuzziness (contours might not be entirely straight).", "\n", "There could be Coca-Cola bottles in the image, and the algorithm should only detect the ", "can", "!", "\n", "The brightness of the image could vary a lot (so you can't rely \"too much\" on color detection).", "\n", "The ", "can", " could be partly hidden on the sides or the middle and possibly partly hidden behind a bottle.", "\n", "There could be no ", "can", " at all in the image, in which case you had to find nothing and write a message saying so.", "\n", "\n", "So you could end up with tricky things like this (which in this case had my algorithm totally fail):", "\n\n", "\n\n", "I did this project a while ago, and had a lot of fun doing it, and I had a decent implementation. Here are some details about my implementation:", "\n\n", "Language", ": Done in C++ using ", "OpenCV", " library.", "\n\n", "Pre-processing", ": For the image pre-processing, i.e. transforming the image into a more raw form to give to the algorithm, I used 2 methods:", "\n\n", "\n", "Changing color domain from RGB to ", "HSV", " and filtering based on \"red\" hue, saturation above a certain threshold to avoid orange-like colors, and filtering of low value to avoid dark tones. The end result was a binary black and white image, where all white pixels would represent the pixels that match this threshold. Obviously there is still a lot of crap in the image, but this reduces the number of dimensions you have to work with.\n", "\n", "\n", "Noise filtering using median filtering (taking the median pixel value of all neighbors and replace the pixel by this value) to reduce noise.", "\n", "Using ", "Canny Edge Detection Filter", " to get the contours of all items after 2 precedent steps.\n", "\n", "\n", "\n", "Algorithm", ": The algorithm itself I chose for this task was taken from ", "this", " awesome book on feature extraction and called ", "Generalized Hough Transform", " (pretty different from the regular Hough Transform). It basically says a few things:", "\n\n", "\n", "You can describe an object in space without knowing its analytical equation (which is the case here).", "\n", "It is resistant to image deformations such as scaling and rotation, as it will basically test your image for every combination of scale factor and rotation factor.", "\n", "It uses a base model (a template) that the algorithm will \"learn\".", "\n", "Each pixel remaining in the contour image will vote for another pixel which will supposedly be the center (in terms of gravity) of your object, based on what it learned from the model.", "\n", "\n", "In the end, you end up with a heat map of the votes, for example here all the pixels of the contour of the can will vote for its gravitational center, so you'll have a lot of votes in the same pixel corresponding to the center, and will see a peak in the heat map as below:", "\n\n", "\n\n", "Once you have that, a simple threshold-based heuristic can give you the location of the center pixel, from which you can derive the scale and rotation and then plot your little rectangle around it (final scale and rotation factor will obviously be relative to your original template). In theory at least...", "\n\n", "Results", ": Now, while this approach worked in the basic cases, it was severely lacking in some areas:", "\n\n", "\n", "It is ", "extremely slow", "! I'm not stressing this enough. Almost a full day was needed to process the 30 test images, obviously because I had a very high scaling factor for rotation and translation, since some of the cans were very small.", "\n", "It was completely lost when bottles were in the image, and for some reason almost always found the bottle instead of the can (perhaps because bottles were bigger, thus had more pixels, thus more votes)", "\n", "Fuzzy images were also no good, since the votes ended up in pixel at random locations around the center, thus ending with a very noisy heat map.", "\n", "In-variance in translation and rotation was achieved, but not in orientation, meaning that a can that was not directly facing the camera objective wasn't recognized.", "\n", "\n", "Can you help me improve my ", "specific", " algorithm, using ", "exclusively OpenCV", " features, to resolve the ", "four specific", " issues mentioned?", "\n\n", "I hope some people will also learn something out of it as well, after all I think not only people who ask questions should learn. :)", "\n    ", "\n\n", "转载于:https://stackoverflow.com/questions/10168686/image-processing-algorithm-improvement-for-coca-cola-can-recognition"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的click写错了&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/74315042614619.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["点击减号的按钮数字不进行减的算法", ["\n", "可以点击+进行增加，减号不可以减一"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;用递归&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/114438976856143.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;你题目的解答代码如下&amp;#xff1a;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#include&amp;lt;iostream&amp;gt;\nusing namespace std;\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a[] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;};\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; re[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;],&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\nvoid fp(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;)\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;)\n    {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n        for (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;; i&amp;#43;&amp;#43;)\n        {\n            cout &amp;lt;&amp;lt; re[i];\n        }\n        return;\n    }\n    for (i &amp;#61; &lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;-(&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;-&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;); i&amp;#43;&amp;#43;)\n    {\n        re[&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;] &amp;#61; a[i];\n        &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;&amp;#43;&amp;#43;;\n        fp(i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;--;\n    }\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    for (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;长度&amp;#61;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;:&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        fp(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,i);\n        cout &amp;lt;&amp;lt; endl;\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "算法与数字", "Question": ["五个数字所有不重复的组合方式逻辑思维及c++算法", ["现有一个长度为5的数组arrar=[1,2,3,4,5]，求一下这个数组中，所有元素的组合：", "长度=1:1 2 3 4 5", "长度=2:12 13 14 15 23 24 25 34 35 45", "长度=3:123 124 125 234 235 345", "长度=4:1234 1235 1245 2345", "长度=5:12345", "麻烦详细提供一下逻辑和c++算法"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;欸&amp;#xff0c;小兄弟&amp;#xff0c;我之前给你答了&amp;#xff0c;你咋啥都没回复&amp;#xff0c;直接删了&amp;#xff0c;另一个也直接结题&amp;#xff0c;现在又发&amp;#xff0c;是代码有哪里出问题吗&amp;#xff1f;&lt;br /&gt;&lt;a href=\"https://ask.csdn.net/questions/7558320?spm&amp;#61;1001.2014.3001.5505\" id=\"textarea_1636543946554_1636544034817_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;数据结构与算法“爸爸去哪儿”房子分配问题2-数据结构与算法-CSDN问答&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;CSDN问答为您找到数据结构与算法“爸爸去哪儿”房子分配问题2相关问题答案&amp;#xff0c;如果想了解更多关于数据结构与算法“爸爸去哪儿”房子分配问题2 c&amp;#43;&amp;#43;、数据结构、有问必答、 技术问题等相关问答&amp;#xff0c;请访问CSDN问答。&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://ask.csdn.net/questions/7558320?spm&amp;#61;1001.2014.3001.5505&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["数据结构与算法“爸爸去哪儿”分配问题1", ["题目描述", "\n", "最近“爸爸去哪儿”节目很火，据说新一期节目分房的策略有所改变:共有m间房，序号从0到m-1，村长根据每个小朋友的英 文名来分配房子。", "\n", "具体规则如下:", "\n", "每个小朋友的英文名都能得到一个对应的数值:‘a’数值为1，‘b’数值为2，…，‘z’数值为26，小朋友的英文名的数值为各个字母的数值和，比如kimi的英文名的数值为11+9+13+9=42。注:规定输入的英文名均为小写字母", "\n", "假设小朋友的英文名的数值为numName的话，那这个小朋友和他爸爸本期节目要住的房子就是(numName mod m)号房。 如果某小朋友的numName mod m得到的值和之前的小朋友的一样，则用哈希中的线性探测法:找下一号房直到找到一间还没有父 子入住的，若已经找到第m-1间还有人，则回到第0间找。", "\n", "分配完房子之后，村长想知道这个分房策略的平均查找长度是多少，也就是说村长根据这个策略来查找每个人的房子时，平均需要查找多少房子(结果保留三位小数)。", "\n", "比如有以下5个小朋友，并且有6间房:", "\n", "\n", "平均查找长度为:(1+1+1+2+2) / 5 = 1.400", "输入描述", "\n", "输入有多个测试用例，以EOF结束。", "\n", "对于每个测试用例，输入分两部分:", "\n", "第一部分是1行，有两个整数n和m(1<= n, m<=10,000)，中间用空格隔开，n代表有多少对明星父子参加节目，m代表一共 有多少间房", "\n", "第二部分是n行，每行都是一个小朋友的英文名，小朋友的英文名彼此都不同，且中间没有空格。每个小朋友的英文名不超过 10个字母，且均为小写字母", "输出描述", "\n", "对于每个测试用例，输出m+1行 前m行，每行为房子序号+“:”+要入住的小朋友的英文名，没有人入住则输出房子序号+“:NULL”", "\n", "第m+1行输出一个数字，表示平均查找长度，保留三位小数", "输入样例", "\n", "5 6", "kimi", "tiantian", "stone", "angela", "cindy", "\n", "输出样例", "\n", "0:kimi", "1:stone", "2:cindy", "3:NULL", "4:tiantian", "5:angela", "1.400", "\n", "给出代码，谢谢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;检查了一下大整数模块&amp;#xff0c;发现效率不高。因为它需要满足所有情形的计算。而搜索水仙花数&amp;#xff0c;可以通过预先保存各数字的1到60次幂&amp;#xff0c;搜索过程只需要用到加法。这几天抽空改写了大整数子程序&amp;#xff0c;效率大大提高&amp;#xff0c;搜索39位水仙花数只需要100秒左右。&lt;/p&gt;\n&lt;p&gt;module abc                                                 ! 公共变量&lt;/p&gt;\n&lt;p&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   type big_integer                                        ! 定义大整数类型&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;      integer&lt;/span&gt;&lt;em&gt;1 a(63)                                      ! 因为60&lt;/em&gt;连续进位最大结果是599&amp;#xff0c;进位为59&amp;#xff0c;所以取60&amp;#43;2位&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;      integer*1 digit                                      ! digit 位数&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   end type&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   type(big_integer) s(0:9,60,0:60)                        ! 0到9的1到60次方及其0到60倍数值表&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   integer&lt;/span&gt;&lt;em&gt;1 b(60)                                         ! 各位数字的临时数组&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   integer&lt;/span&gt;&lt;/em&gt;4 nn&lt;/p&gt;\n&lt;p&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   character*60 h                                          ! 用于转换和输出大整数&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;end module&lt;/p&gt;\n&lt;p&gt;subroutine add(aa,bb,cc)                                   ! 大整数加法子程序&amp;#xff0c;cc&amp;#61;aa&amp;#43;bb&lt;/p&gt;\n&lt;p&gt;use abc&lt;br /&gt;type(big_integer) aa,bb,cc&lt;br /&gt;integer*1 k,k1&lt;/p&gt;\n&lt;p&gt;if(aa%digit.eq.1.and.aa%a(1).eq.0) then                    ! aa&amp;#61;0&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   cc&amp;#61;bb&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   return&lt;/span&gt;&lt;br /&gt;end if&lt;/p&gt;\n&lt;p&gt;if(bb%digit.eq.1.and.bb%a(1).eq.0) then                    ! bb&amp;#61;0&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   cc&amp;#61;aa&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   return&lt;/span&gt;&lt;br /&gt;end if&lt;/p&gt;\n&lt;p&gt;cc%a&amp;#61;0                                                     ! 初始化cc&amp;#xff0c;进位数k1&lt;br /&gt;k1&amp;#61;0&lt;br /&gt;ii&amp;#61;max(aa%digit,bb%digit)&lt;/p&gt;\n&lt;p&gt;do i&amp;#61;1,ii&amp;#43;1                                                ! 分段加法&amp;#xff0c;进位&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   k&amp;#61;aa%a(i)&amp;#43;bb%a(i)&amp;#43;k1&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   cc%a(i)&amp;#61;k                                               ! 默认不进位&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   k1&amp;#61;0&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   if(k.ge.10) then                                        ! 处理进位情形&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;      cc%a(i)&amp;#61;k-10                                         ! 因为最大进位为1&amp;#xff0c;不用mod&amp;#xff0c;直接用减法&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;      k1&amp;#61;1&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   end if&lt;/span&gt;&lt;br /&gt;end do&lt;/p&gt;\n&lt;p&gt;cc%digit&amp;#61;ii                                                ! 确定位数&lt;br /&gt;if(cc%a(ii&amp;#43;1).gt.0) cc%digit&amp;#61;ii&amp;#43;1&lt;/p&gt;\n&lt;p&gt;end&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["39位水仙花数的优化算法", ["39位水仙花数，即39位正整数的各位数字39次方之和等于它本身。", "\n", "利用fortran语言编程，用递归枚举39个数字构造组合的算法，找到两个39位水仙花数，耗时约400秒。", "\n", "这两个数是：", "115132219018763992565095597973971522401", "115132219018763992565095597973971522400", "\n", "求：更为高效率、更快速的算法。", "\n", "recursive subroutine cc(a,tt,n)                            ! 查找水仙花数的递归子程序", "\n", "use abc", "type(big_integer) tt,t1", "integer*1 a(60),n", "\n", "np=9                                                       ! 逆序查找，比较有效率", "if(n.gt.1) np=a(n-1)", "\n", "do i=np,0,-1                                               ! 循环+递归，构造nn位的数字组合", "\n", "   a(n)=i", "   t1=tt+s(i,nn,1)                                         ! 计算数字nn次幂的和，只计算变化的位", "   if(t1.gt.smax(nn)) cycle                                ! 超出本级构造的最大数，递减a(n)", "   if(t1+s(i,nn,nn-n).lt.smin(nn)) exit                    ! 小于nn位数下限值，退出本级(循环)递归", "\n", "   if(n.eq.nn) then                                        ! 符合上下限值的情形", "\n", "  s1=t1\n  b=a\n\n  ", "do", " k1=", "0", ",", "54", ",", "9", "                                         ! 拆解出各位数字，与a进行比较\n\n     s2=s1/", "1000000000", "\n     s3=s1-s2*", "1000000000", "\n     s1=s2\n\n     ", "do", " k2=", "1", ",", "9", "\n\n        j=k1+k2\n        ", "if", "(j.gt.n) ", "exit", "\n        s4=s3/", "10", "\n        k=s3-s4*", "10", "\n        s3=s4\n\n        ", "do", " jj=n-j+", "1", ",", "1", ",-", "1", "                               ! a中有匹配的，将该位置代换掉，下次匹配减少一个单元\n           ", "if", "(k.eq.b(jj)) then\n              b(jj)=b(n-j+", "1", ")\n              ", "exit", "\n           end ", "if", "\n        end ", "do", "\n\n        ", "if", "(jj.ge.", "1", ") then                               ! 找到匹配，继续；无匹配的，跳出\n           cycle\n        ", "else", "\n           ", "exit", "\n        end ", "if", "\n\n     end ", "do", "\n\n     ", "if", "(jj.lt.", "1", ".and.j.le.n) ", "exit", "                       ! 两条件标记存在不匹配的数字，提前跳出\n\n  end ", "do", "\n\n  ", "if", "(j.le.n) cycle                                     ! 无匹配，跳过\n  write(*,", "'(2x,a)'", ") trim(char(t1))                     ! 输出找到的水仙花数\n", "\n", "   else", "      call cc(a,t1,n+1)                                    ! 继续递归调用", "   end if", "\n", "end do", "\n", "end"]], "Tag": "算法设计"}
{"Answer": "```\r\n #include &lt;stdio.h&gt;\r\nint main()\r\n{\r\n\tchar c;\r\n\tint letters=0,space=0,digit=0,other=0;\r\n\tprintf(\"请输入一行字符：\");\r\n\twhile ((c=getchar())!='\\n')\r\n\t{\r\n\t\tif (c &gt;= 'a'&amp;&amp;c &lt;= 'z' || c &gt;= 'A'&amp;&amp;c &lt;= 'Z')\r\n\t\t{\r\n\t\t\tletters++;\r\n\t\t}\r\n\t\telse if (c == ' ')\r\n\t\t{\r\n\t\t\tspace++;\r\n\t\t}\r\n\t\telse if (c &gt;= '0'&amp;&amp;c &lt;= '9')\r\n\t\t{\r\n\t\t\tdigit++;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tother++;\r\n\t\t}\r\n\t}\r\n\tprintf(\"字母数:%d\\n空格数:%d\\n数字数:%d\\n其他字符:%d\\n\",letters,space,digit,other);\r\n\treturn 0;\r\n}\r\n结果：\r\n请输入一行字符：I am a student 666.\r\n字母数:11\r\n空格数:4\r\n数字数:3\r\n其他字符:1\r\n请按任意键继续. . .\r\n```", "Konwledge_Point": "算法与数字", "Question": ["一个让c语言新手无法理解的题", ["输入一行字符，分别统计出其中英文字母、空格、数字和其他字符的个数。"]], "Tag": "算法设计"}
{"Answer": "# 问题解决的话，请点下采纳\r\n```\r\n#include &lt;stdio.h&gt;\r\n#define N 100\r\nint main()\r\n{\r\n\tint i,j,m,n,a[N];\r\n\tint max,r;\r\n\tscanf(\"%d %d\",&amp;m,&amp;n);\r\n\tfor(i=0;i&lt;m;i++)\r\n\t{\r\n\t\tscanf(\"%d\",&amp;a[i]);\r\n\t}\r\n\tfor(j=0;j&lt;n;j++)\r\n\t{\r\n\t\tfor(i=0,max=i;i&lt;m-j;i++)\r\n\t\t{\r\n\r\n\t\t\tif(a[max]&lt;a[i])\r\n\t\t\t{\r\n\t\t\t\tmax=i;\r\n\t\t\t}\r\n\t\t}\r\n\t\tr=a[max];\r\n\t\ta[max]=a[m-1-j];\r\n\t\ta[m-1-j]=r;\r\n\t}\r\n\tfor(j=0;j&lt;m;j++)\r\n\t{\r\n\t\tprintf(\"%d \",a[j]);\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n```\r\n![图片说明](https://img-ask.csdn.net/upload/202005/23/1590205152_856813.png)", "Konwledge_Point": "算法与数字", "Question": ["本人刚开始学习c语言，求大佬们看看我的这道题，一下是我的问题和代码，也请大佬顺便指出我的错误，修改一下我的代码，如果有更好的算法，就更好了？", ["问题：", "\n7-11 简单选择排序显示第K趟 (16分)", "\n将N个整数按从小到大排序的选择排序法是这样工作的：选择所有数中最大（小）的，与最后一个（第一个）交换。通过一遍扫描，则最后一个元素必定是最大的元素（或第一个元素必定是最小的元素）。然后用同样的方法余下的N−1个元素进行第二遍扫描。依此类推，最后只需处理两个元素，即完成对N个数的排序。 本题要求对任意给定的K（<N）按找大的原则，输出扫描完第K遍后的中间结果数列。", "\n\n", "输入格式:", "\n输入在第1行中给出N和K（1≤K<N≤100），在第2行中给出N个待排序的整数，数字间以空格分隔。", "\n\n", "输出格式:", "\n在一行中输出选择排序法扫描完第K遍后的中间结果数列，数字间以空格分隔，但末尾不得有多余空格。", "\n\n", "输入样例:", "\n6 2", "\n2 3 5 1 6 4", "\n输出样例:", "\n2 3 4 1 5 6", "\n我的代码：", "\n#include", "\n#define N 100", "\nint main()", "\n{", "\n    int i,j,m,n,a[N];", "\n    int max,r;", "\n    scanf(\"%d %d\",&m,&n);", "\n    for(i=0;i<m;i++)", "\n    {", "\n        scanf(\"%d\",&a[i]);", "\n    }", "\n    for(j=0;j<n;j++)", "\n    {", "\n        for(i=0,max=a[0];i<m-j;i++)", "\n        {", "\n            if(max<a[i])", "\n            {", "\n                max=a[i];", "\n            }", "\n        }", "\n        r=max;", "\n        max=a[m-1-j];", "\n        a[m-1-j]=r;", "\n    }", "\n    for(j=0;j<m;j++)", "\n    {", "\n        printf(\"%d \",a[j]);", "\n    }", "\n    return 0;", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://blog.csdn.net/weixin_39959298/article/details/110976824\" id=\"textarea_1649323879641_1649323975806_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_39959298/article/details/110976824&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["扫雷游戏的布雷模块有没有是吗算法使雷区分布合理？", ["问题描述", "\n", "我本人无聊的时候很喜欢玩扫雷，一般开始都是点击左上角第一个方块，只有出现的数字合理，才能继续玩下去，否则就会一直卡在第一步，游戏体验感大大降低，最近刚好碰到一个项目需要写扫雷游戏，关于布雷模块有没有什么算法使雷区分布合理？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;好家伙&amp;#xff0c;你这特征数量真心不少。&lt;br /&gt;KNN的核心是计算距离&amp;#xff0c;你这个特征这么多&amp;#xff0c;计算的复杂度就会很高&amp;#xff0c;不知道你用的距离算法&amp;#xff0c;也不知道你CPU能不能受的住。&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;         减少特征的数量&amp;#xff0c;比如颜色特征&amp;#xff0c;看看能不能去掉关联特征或者在颜色特征的基础上二次提取&amp;#xff0c;如提取所有颜色的均值&amp;#xff0c;以减小特征维度&amp;#xff0c;这也是可行的。&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        归一化&amp;#xff0c;因为要计算距离&amp;#xff0c;但是不同特征的单位不同&amp;#xff0c;因此&amp;#xff0c;一般对不同的特征进行归一化&amp;#xff0c;去掉特征的单位&amp;#xff0c;比较典型的归一化方法&amp;#xff1a;最大最小归一化&amp;#xff0c;min-max&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        把处理后的特征搞到一起组成一个串就行了&amp;#xff0c;组成的串就是这个样本的特征&amp;#xff0c;然后计算距离吧。&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        如果能帮到你&amp;#xff0c;给个采纳哟&amp;#xff01;&lt;/span&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于机器学习中knn算法的一些问题", ["我需要使用knn算法对包含以下三个特征的数据进行训练，但是这些数据都不是一个单一的数字，所以我不太明白应该如何使用这些数据进行训练", "这是一条数据的三个特征", "颜色用了颜色直方图，纹理是灰度共生矩阵，形状是hu矩"]], "Tag": "算法设计"}
{"Answer": "你的意思我看懂了，但是你举的例子最后一行数字按照你的规律说，答案是错的。（六个对号四个错号），按照你的规律来说，应该是两个错，八个对。\r\n3：234789 交集 null = null 叉\r\n9：15610 交集 3 = null 叉\r\n5：234789 交集 39 = 39 勾\r\n2：234789 交集 395 = 39 勾\r\n4：234789 交集 3952 = 239 勾\r\n8：234789 交集 39524 = 2349 勾\r\n1：15610 交集 395248 = 5 勾\r\n7：15610 交集 3952481 = 15 勾\r\n10：234789 交集 39524817 = 234789 勾\r\n6：15610 交集 3952481710 = 1510 勾\r\n你先确定一下这个规律是不是对的，如果确定了规律，出JAVA的算法很容易\r\n\r\n\r\n\r\n\r\n```\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Myclass01 {\r\n\r\n\tprivate HashMap&lt;Integer,List&lt;Integer&gt;&gt; map = new HashMap&lt;Integer, List&lt;Integer&gt;&gt;();\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tnew Myclass01();\r\n\t}\r\n\t\r\n\tpublic Myclass01() {\r\n\t\tSystem.out.print(\"请自行输入一串数字（0代表10）：\");\r\n\t\tScanner scan = new Scanner(System.in);\r\n\t\tString read = scan.nextLine();\r\n\t\tif(!read.matches(\"\\\\d+\")){\r\n\t\t\tSystem.out.println(\"输入的必须都是数字！\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tchar[] ch = read.toCharArray();\r\n\t\tint [] nums_input = new int[ch.length];\r\n\t\tfor (int i = 0; i &lt; ch.length; i++) {\r\n\t\t\tnums_input[i] = Integer.parseInt(String.valueOf(ch[i]));\r\n\t\t}\r\n\t\tinitialization();\r\n\t\tList&lt;Integer&gt; nums_input_list = new ArrayList&lt;Integer&gt;();\r\n\t\tfor (int i = 0; i &lt; nums_input.length; i++) {\r\n\t\t\tint num = nums_input[i];\r\n\t\t\tnums_input_list.add(num);\r\n\t\t}\r\n\t\tfor (int i = 0; i &lt; nums_input_list.size(); i++) {\r\n\t\t\tint num = nums_input_list.get(i);\r\n\t\t\tif(num==0){\r\n\t\t\t\tnum = 10;\r\n\t\t\t}\r\n\t\t\tList&lt;Integer&gt; nums_list = map.get(num);\r\n\t\t\tif(i==0){\r\n\t\t\t\tSystem.out.println(num+\":×\");\r\n\t\t\t}else{\r\n\t\t\t\tint before = nums_input_list.get(i-1);\r\n\t\t\t\tif(nums_list.contains(before)){\r\n\t\t\t\t\tSystem.out.println(num+\":√\");\r\n\t\t\t\t}else{\r\n\t\t\t\t\tSystem.out.println(num+\":×\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate int[] getRandomNum(int count) {\r\n\t\t// TODO 自动生成的方法存根\r\n\t\tint[] nums = new int[count];\r\n\t\tfor (int i = 0; i &lt; count; i++) {\r\n\t\t\tnums[i] = (int)(1+Math.random()*(10-1+1));\r\n\t\t}\r\n\t\t\r\n\t\treturn nums;\r\n\t}\r\n\t\r\n\tprivate void initialization() {\r\n\t\tList&lt;Integer&gt; nums_1 = new ArrayList&lt;Integer&gt;();\r\n\t\tnums_1.add(1);\r\n\t\tnums_1.add(5);\r\n\t\tnums_1.add(6);\r\n\t\tnums_1.add(10);\r\n\t\tList&lt;Integer&gt; nums_2 = new ArrayList&lt;Integer&gt;();\r\n\t\tnums_2.add(2);\r\n\t\tnums_2.add(3);\r\n\t\tnums_2.add(4);\r\n\t\tnums_2.add(7);\r\n\t\tnums_2.add(8);\r\n\t\tnums_2.add(9);\r\n\t\t\r\n\t\tmap.put(1,nums_1);\r\n\t\tmap.put(2, nums_2);\r\n\t\tmap.put(3, nums_2);\r\n\t\tmap.put(4, nums_2);\r\n\t\tmap.put(5, nums_2);\r\n\t\tmap.put(6, nums_1);\r\n\t\tmap.put(7, nums_1);\r\n\t\tmap.put(8, nums_2);\r\n\t\tmap.put(9, nums_1);\r\n\t\tmap.put(10, nums_2);\r\n\t}\r\n\r\n}\r\n\r\n```\r\n运行结果是：\r\n3:×\r\n9:×\r\n5:√\r\n2:×\r\n4:√\r\n8:√\r\n1:×\r\n7:√\r\n10:√\r\n6:√", "Konwledge_Point": "算法与数字", "Question": ["没有大神可以用java实现这个算法", ["\n输入一次数据  然后 统计按规律的打对号   不按规律的打错号  每五分钟输入一次   统计12个小时内的对号和错号的个数。", "\n第一个规律，如果1这个数字左边的数字有 1、5、6、10，其中的一个，那么就打个对号      这十个规律是分开的   每输入一组数据要统计十次。这里的左边是紧挨着的左边。比如这个图片最下面一行的数字，对于上面十个规律来说，他只满足六个，也就是如果我输入图片最后一行的数字  输出的是六个对号四个错号。"]], "Tag": "算法设计"}
{"Answer": "http://www.cnblogs.com/zhousir1991/archive/2011/05/26/2058975.html", "Konwledge_Point": "算法与数字", "Question": ["C语言小算法，求大神支招", ["输入一串int类型的数组，要求出某一截数字串加起来最大，并打印数字串。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;问题的原因出在这段上&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-objectivec\"&gt;    while (first &amp;lt; last) {\n        while (first &amp;lt; last &amp;amp;&amp;amp; A[last] &amp;gt; key) {\n            last--;\n        }\n        A[first] &amp;#61; A[last];\n        while (first &amp;lt; last &amp;amp;&amp;amp; A[first] &amp;lt; key) {\n            first&amp;#43;&amp;#43;;\n        }\n        A[last] &amp;#61; A[first];\n    }&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;如果A[last]恰好等于key,就会导致变成一个死循环。&lt;/p&gt;\n\n&lt;p&gt;解决办法很简单&amp;#xff0c;上面的判定或者下面的判定加个等号&amp;#xff0c;不管是A[last] &amp;gt;&amp;#61; key还是用A[first] &amp;lt;&amp;#61; key都可&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["排序系统中使用快速排序时数组有重复数字无法排序 各位大佬帮忙改一下", ["\n", "#include<stdio.h>\n#define LENGTH 5\nint A[LENGTH];\nvoid bubbleSort();\nvoid quickSort();\nvoid insertSort();\nvoid shellSort();\nvoid main()\n{\n    int choice,i,j,k=1;\n    int O[LENGTH];//保存原始数据的数组\n    printf(\"请输入%d个待排序的整数:\",LENGTH);\n    for(i=0;i<LENGTH;i++)\n    {\n        scanf(\"%d\",&O[i]);\n    }\n    printf(\"排序数据输入成功。\\n\");\n    while(k)\n    {\n        printf(\"\\t\\t   排序子系统\\t\\t\\n\");\n        printf(\"*************************************************\\n\");\n        printf(\"*\\t\\t1......起泡排序\\t\\t\\t*\\n\");\n        printf(\"*\\t\\t2......快速排序\\t\\t\\t*\\n\");\n        printf(\"*\\t\\t3......直接插入排序\\t\\t*\\n\");\n        printf(\"*\\t\\t4......希尔排序\\t\\t\\t*\\n\");\n        printf(\"*\\t\\t0......返回\\t\\t\\t*\\n\");\n        printf(\"*************************************************\\n\");\n        printf(\"请选择菜单号(0---4):\");\n        scanf(\"%d\",&choice);//输入菜单号进行排序算法选择\n\n        for(j=0;j<LENGTH;j++)//将原始数组的数据赋值到待排序数组\n        {\n            A[j]=O[j];\n        }\n        switch(choice)//选择分支  选择排序算法\n        {\n        case 1:\n            bubbleSort();\n            break;\n        case 2:\n            printf(\"原始数据为：\\n\");\n            for(i=0;i<LENGTH;i++)\n            {\n                printf(\"%5d\",A[i]);\n            }\n            printf(\"\\n\");\n\n            quickSort(0,LENGTH-1);\n\n            printf(\"排序后结果为：\\n\");\n            for(i=0;i<LENGTH;i++)\n            {\n                printf(\"%5d\",A[i]);\n            }\n            printf(\"\\n\");\n            break;\n        case 3:\n            insertSort();\n            break;\n        case 4:\n            shellSort();\n            break;\n        case 0:\n            k=0;\n            break;\n        default:\n            printf(\"\\n输入错误，请重新输入。\\n\");\n            getchar();\n            k=1;\n            break;\n        }\n    }\n}\nvoid bubbleSort()//冒泡排序\n{\n    int i,j,k;\n    printf(\"原始数据为：\\n\");\n    for(i=0;i<LENGTH;i++)\n    {\n        printf(\"%5d\",A[i]);\n    }\n    printf(\"\\n\");\n\n    for(i=0;i<LENGTH;i++)\n    {\n        for(j=0;j<LENGTH-1;j++)\n        {\n            if(A[j]>A[j+1])\n            {\n                k=A[j];\n                A[j]=A[j+1];\n                A[j+1]=k;\n            }\n        }\n    }\n    printf(\"排序后结果为：\\n\");\n    for(i=0;i<LENGTH;i++)\n    {\n        printf(\"%5d\",A[i]);\n    }\n    printf(\"\\n\");\n}\nvoid quickSort(int low,int high)//快速排序\n{\n    int first=low;\n    int last=high;\n    int key=A[first];\n    if(low>=high)\n        return;\n    while(first<last)\n    {\n        while(first<last&&A[last]>key)\n        {\n            last--;\n        }\n        A[first]=A[last];\n\n        while(first<last&&A[first]<key)\n        {\n            first++;\n        }\n        A[last]=A[first];\n    }\n    A[first]=key;\n\n    quickSort(low,first-1);\n    quickSort(first+1,high);\n\n}\nvoid insertSort()//插入排序\n{\n    int i,j,k;\n    printf(\"原始数据为：\\n\");\n    for(i=0;i<LENGTH;i++)\n    {\n        printf(\"%5d\",A[i]);\n    }\n    printf(\"\\n\");\n\n    for(i=1;i<LENGTH;i++)\n    {\n        k=A[i];\n        for(j=i-1;j>=0&&A[j]>k;j--)\n        {\n            A[j+1]=A[j];\n        }\n        A[j+1]=k;\n    }\n\n    printf(\"排序后结果为：\\n\");\n    for(i=0;i<LENGTH;i++)\n    {\n        printf(\"%5d\",A[i]);\n    }\n    printf(\"\\n\");\n}\nvoid shellSort()//希尔排序\n{\n    int i,j,k,gap,tmp;\n    printf(\"原始数据为：\\n\");\n    for(i=0;i<LENGTH;i++)\n    {\n        printf(\"%5d\",A[i]);\n    }\n    printf(\"\\n\");\n\n    for(gap=LENGTH/2;gap>0;gap/=2)// 步长初始化为数组长度的一半\n    {\n        for (i=0;i<gap;++i)// 变量 i 为每次分组的第一个元素下标\n        {\n            for (j=i+gap;j<LENGTH;j+=gap)//对步长为gap的元素进行直插排序，当gap为1时，就是直插排序\n            {\n\t            tmp=A[j];  // 备份A[j]的值\n\t            k=j-gap;  // j初始化为i的前一个元素（与i相差gap长度）\n\t            while(k>=0&&A[k]>tmp)\n\t            {\n\t                A[k+gap]=A[k]; // 将在A[i]前且比tmp的值大的元素向后移动一位\n\t                k-=gap;\n\t            }\n\t            A[k+gap]=tmp;\n\t        }\n\t    }\n    }\n\n    printf(\"排序后结果为：\\n\");\n    for(i=0;i<LENGTH;i++)\n    {\n        printf(\"%5d\",A[i]);\n    }\n    printf(\"\\n\");\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Since MD5 (and SHA-1, etc.) will give you 128 bits of data (in PHP, you'll get it in hexadecimal string notation, so you need to convert it to an integer first). That number modulo 10000 will give you your integer.&lt;/p&gt;\n\n&lt;p&gt;Note however that many different hashes will convert to the same integer; this is unavoidable with &lt;em&gt;any&lt;/em&gt; sort of conversion to your integer range, as the &lt;code&gt;modulo&lt;/code&gt; operation essentially maps a larger set of numbers (in this case, 128 bits, that is numbers from 0 to 340,282,366,920,938,463,463,374,607,431,768,211,456) to a smaller set of numbers (less than 17 bits, numbers from 1 to 100,000).&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "算法与数字", "Question": ["算法将md5（或者可能是另一种散列方法？）转换为整数，可以设置可能的结果整数范围（例如：1-10000）？", ["\n\n", "the topic pretty much describes what we would like to accomplish.", "\n\n", "a) start with a possible range of integers, for example, 1 to 10000.", "\n\n", "b) take any md5 hash, run it thru this algo.", "\n\n", "c) result that pops out will be an integer between 1 to 10000.", "\n\n", "we are open to using another hashing method too.", "\n\n", "the flow would ideally look like this:", "\n\n", "string -> md5(string) -> algo(md5(string),range) -> resulting integer within range\n", "\n\n", "is something like this possible?", "\n\n", "final note: the range will always start with 1.", "\n\n", "if you have an answer, feel free to post just the general idea, or if you so desire, php snippet works too :)", "\n\n", "thanks!", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://blog.csdn.net/red_red_red/article/details/89843256\" id=\"textarea_1680353222143_1680353576398_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/red_red_red/article/details/89843256&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=\"https://www.codenong.com/cs106863076/\" id=\"textarea_1680353222143_1680353576398_1\"&gt;https://www.codenong.com/cs106863076/&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["（算法）蓝桥杯算法题数论", ["小数第n位", "题目描述", "我们知道，整数做除法时，有时得到有限小数，有时得到无限循环小数。", "\n", "如果我们把有限小数的末尾加上无限多个 0，它们就有了统一的形式。", "\n", "本题的任务是：在上面的约定下，求整数除法小数点后的第", "�", "n 位开始的 3 位数。", "\n", "输入描述", "输入一行三个整数：", "�", "\n", "�", "\n", "�", "a b n，用空格分开。", "�", "a 是被除数，", "�", "b 是除数，", "�", "n 是所求的小数后位置（", "0", "<", "�", ",", "�", ",", "�", "<", "1", "0", "9", "0<a,b,n<10", "9", " ）", "\n", "输出描述", "输出一行 3 位数字，表示：", "�", "a 除以", "�", "b，小数后第", "�", "n 位开始的 3 位数字。", "\n", "输入输出样例", "示例", "输入", "\n", "1 8 1", "copy", "输出", "\n", "125", "copy", "运行限制", "最大运行时间：1s", "最大运行内存: 256M", "\n", "错误代码：", "\n", "\n", "#", "include", "<bits/stdc++.h>", "\n", "using", " ", "namespace", " std;\n", "int", " ", "main", "()", "\n", "{\n    ", "double", " a,b;\n    ", "long", " ", "long", " n,t;\n    ", "int", " r1,r2,r3;\n    cin>>a>>b>>n; \n    a=a/b*", "pow", "(", "10", ",n", "-1", ")*", "1000", "; \n    t=a;\n    r1=t%", "10", ";\n    r2=t/", "10", "%", "10", ";\n    r3=t/", "100", "%", "10", ";\n    cout<<r3<<r2<<r1;\n    ", "return", " ", "0", ";\n}\n", "\n", "错误问题：样例只有百分20的通过率", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;函数里 j 没有&amp;#43;&amp;#43;的&amp;#xff0c;始终是0位吗&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["vs2019里的未定义标识符如何解决以及算法过程是否合理", ["函数fun功能为依次取出字符串中所有数字字符，形成新的字符串，并取代原字符串", "\n\n", "clrscr（）显示未定义标识符如何处理（vs2019）", "\n\n", "这个程序是否还有其他的问题", "\n\n", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;精简后的代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; java.util.*;\n\n&lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; jiuwushu {\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; main(String[] args) {\n        Scanner sc &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; Scanner(&lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.print(&amp;#34;请输入一个四位的整数&amp;#xff1a;&amp;#34;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; M &amp;#61; sc.nextInt();\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; F &amp;#61; F(M);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (F !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(F);\n        }\n\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;----------------------------&amp;#34;);\n        List&amp;lt;&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt; list &amp;#61; TotalM();\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;九五数中F(M)能被8整除的所有M为: &amp;#34; &amp;#43; list);\n    }\n\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; F(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; M) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (M &amp;lt; &lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt; || M &amp;gt; &lt;span class=\"hljs-number\"&gt;9999&lt;/span&gt;) {\n            &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;你输入的数字有误&amp;#34;);\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n        Map&amp;lt;String, &lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt; wei &amp;#61; wei(M);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; geWei &amp;#61; wei.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(&amp;#34;geWei&amp;#34;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; shiWei &amp;#61; wei.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(&amp;#34;shiWei&amp;#34;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; baiWei &amp;#61; wei.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(&amp;#34;baiWei&amp;#34;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; qianWei &amp;#61; wei.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(&amp;#34;qianWei&amp;#34;);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (qianWei &amp;#43; baiWei &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &amp;amp;&amp;amp; shiWei &amp;#43; geWei &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;) {\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; newM &amp;#61; qianWei * &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; shiWei * &lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt; &amp;#43; baiWei &amp;#43; geWei * &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; (M - newM) / &lt;span class=\"hljs-number\"&gt;99&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static Map&amp;lt;String, &lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt; wei(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; M) {\n        Map&amp;lt;String, &lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt; map &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();\n        map.put(&amp;#34;geWei&amp;#34;, M % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);\n        map.put(&amp;#34;shiWei&amp;#34;, M / &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);\n        map.put(&amp;#34;baiWei&amp;#34;, M / &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);\n        map.put(&amp;#34;qianWei&amp;#34;, M / &lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; map;\n    }\n\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static List&amp;lt;&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt; TotalM() {\n        List&amp;lt;&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt; Ms &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9999&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; F &amp;#61; F(i);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (F !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; F % &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n                Ms.&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(i);\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; Ms;\n    }\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["九五数算法求简单代码", ["求精简的代码", "\n", "\n", "import", " java.util.*;\n\n", "public", " ", "class", " jiuwushu {\n    ", "public", " static ", "void", " main(String[] args) {\n        Scanner sc = ", "new", " Scanner(", "System", ".", "in", ");\n        ", "System", ".", "out", ".println(\"请输入一个四位的整数：\");\n        ", "int", " M = sc.nextInt();\n        ", "int", " F = F(M);\n        ", "if", " (F != ", "0", ") {\n            ", "System", ".", "out", ".println(F);\n        }\n\n        ", "System", ".", "out", ".println(\"----------------------------\");\n        List<", "Integer", "> list = TotalM();\n        ", "System", ".", "out", ".println(\"九五数中F(M)能被8整除的所有M为\");\n        ", "for", " (", "Integer", " ", "integer", " : list) {\n            ", "System", ".", "out", ".print(", "integer", ");\n            ", "System", ".", "out", ".print(\"    \");\n        }\n\n\n    }\n\n    ", "/**\n     * 判断该数是否为九五数，\n     * 九五数：返回 F（M）\n     * 非九五数和输入错误：返回 0\n     * 详细版\n     *\n     * @param M\n     * @return\n     */", "\n    ", "public", " static ", "int", " F(", "int", " M) {\n        ", "if", " (M >= ", "10000", " || M <= ", "999", ") {\n            ", "System", ".", "out", ".println(\"你输入的数字有误\");\n            ", "return", " ", "0", ";\n        } ", "else", " {\n            Map<String, ", "Integer", "> wei = wei(M);\n            ", "int", " geWei = wei.", "get", "(\"geWei\");\n            ", "int", " shiWei = wei.", "get", "(\"shiWei\");\n            ", "int", " baiWei = wei.", "get", "(\"baiWei\");\n            ", "int", " qianWei = wei.", "get", "(\"qianWei\");\n            ", "if", " (qianWei + baiWei == ", "9", " && shiWei + geWei == ", "5", ") {\n                ", "System", ".", "out", ".println(\"该数字为九五数\");\n                ", "int", " newM = qianWei * ", "10", " + shiWei * ", "1000", " + baiWei + geWei * ", "100", ";\n\n                ", "int", " F = (M - newM) / ", "99", ";\n                ", "return", " F;\n\n            } ", "else", " {\n                ", "if", " (qianWei + baiWei == ", "9", ") {\n                    ", "System", ".", "out", ".println(\"该数字不是九五数，原因是个位加十位不等于5\");\n                } ", "else", " ", "if", " (shiWei + geWei == ", "5", ") {\n                    ", "System", ".", "out", ".println(\"该数字不是九五数，原因是百位加千位不等于9\");\n\n                } ", "else", " {\n                    ", "System", ".", "out", ".println(\"该数字不是九五数，原因是个位加十位不等于5，并且百位加千位不等于9\");\n                }\n                ", "return", " ", "0", ";\n\n            }\n        }\n\n    }\n\n    ", "/**\n     * 判断该数是否为九五数，\n     * 九五数：返回 F（M）\n     * 非九五数和输入错误：返回 0\n     * 简略版，针对第二题\n     *\n     * @param M\n     * @return\n     */", "\n    ", "public", " static ", "int", " jiuWu(", "int", " M) {\n        Map<String, ", "Integer", "> wei = wei(M);\n        ", "int", " geWei = wei.", "get", "(\"geWei\");\n        ", "int", " shiWei = wei.", "get", "(\"shiWei\");\n        ", "int", " baiWei = wei.", "get", "(\"baiWei\");\n        ", "int", " qianWei = wei.", "get", "(\"qianWei\");\n        ", "if", " (qianWei + baiWei == ", "9", " && shiWei + geWei == ", "5", ") {\n            ", "int", " newM = qianWei * ", "10", " + shiWei * ", "1000", " + baiWei + geWei * ", "100", ";\n            ", "int", " F = (M - newM) / ", "99", ";\n            ", "return", " F;\n        }\n        ", "return", " ", "0", ";\n    }\n\n    ", "public", " static Map<String, ", "Integer", "> wei(", "int", " M) {\n        Map<String, ", "Integer", "> map = ", "new", " HashMap<String, ", "Integer", ">();\n        ", "int", " geWei = M % ", "10", ";\n        ", "int", " shiWei = M / ", "10", " % ", "10", ";\n        ", "int", " baiWei = M / ", "100", " % ", "10", ";\n        ", "int", " qianWei = M / ", "1000", ";\n\n        map.put(\"geWei\", geWei);\n        map.put(\"shiWei\", shiWei);\n        map.put(\"baiWei\", baiWei);\n        map.put(\"qianWei\", qianWei);\n        ", "return", " map;\n    }\n\n    ", "/**\n     * 判断1000-9999中所有满足九五数的，并满足F(M)能被8整出\n     * 返回List集合\n     *\n     * @return\n     */", "\n    ", "public", " static List<", "Integer", "> TotalM() {\n        List<", "Integer", "> Ms = ", "new", " ArrayList<", "Integer", ">();\n        ", "for", " (", "int", " i = ", "1000", "; i <= ", "9999", "; i++) {\n            ", "int", " F = jiuWu(i);\n            ", "if", " (F != ", "0", ") {\n                ", "if", " (F % ", "8", " == ", "0", ") {\n                    Ms.", "add", "(i);\n                }\n            }\n        }\n        ", "return", " Ms;\n    }\n}\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;肯定是可以的&amp;#xff0c;keras的话调整搭建模型的输出层就行&amp;#xff08;layers.Dense(2)&amp;#xff09;&amp;#xff0c;matlab里的没咋用过&amp;#xff0c;等别人回答~&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["Lstm神经网络能否调整输出层的节点数使其对于预测点输出两个值?", ["最近换方向到光伏区间预测了，对算法一头雾水……使用matlab自带的例子修改了numRespouce提示错误使用reshape，请问各位应该怎么改呢matlab或者python "]], "Tag": "算法设计"}
{"Answer": "这个只要你自己想一个算法就可以了啊，增加位的校验，这样只要你公司里没人说，别人很难猜出是怎么加密的吧", "Konwledge_Point": "算法与数字", "Question": ["公司要做卡系统，求卡号生成算法！", ["公司要做卡系统，对卡号要求：第一：不能重复，要唯一；第二：长度可控制，要在12位到18位之间；第三：不能让别人猜出来（没有绝对，只要很难猜就行）。", "\n其实UUID很适合，但是太长了，而且我们做的是在电视遥控器上用，为了用户输入方便，要求全是数字的。上网查了太多的资料，但是没有一个有明确的答复的！我用的是java开发平台。最好有些示范性代码！谢谢！", "\n[b]问题补充：[/b]", "\n对于congjl2002的回答，我觉得是一个思路，但是能保证不重复吗？", "\n[b]问题补充：[/b]", "\n目前，我是这样做的，不知道可不可以。", "\n首选在卡是一批一批生成的，将卡的批次加入到卡号里面，其它卡号中随机生成，只要保证同一批次的没有重复号就可以了。最后根据congjl的建议，对生成的号码加密后，生成几位校验码再插入其中，这样就安全了　"]], "Tag": "算法设计"}
{"Answer": "看下面这个贴子吧，一模一样的题目：\r\n[url]http://topic.csdn.net/u/20090921/16/6a7b589a-18c2-48be-853f-a33be379818c.html[/url]", "Konwledge_Point": "算法与数字", "Question": ["java 位操作分苹果问题", ["前段时间看道笔试题，问题：", "\n    有600个苹果，分成10个箱子，要求不管顾客要买1-600的任意一个数字都可以给他（不能开箱子），要求用java的位操作，希望各位能帮忙做做", "\n    PS：本人碰到位操作的问题就郁闷"]], "Tag": "算法设计"}
{"Answer": "不好意思你要的是 false\r\n\r\npublic boolean check(String[] args){\r\nBoolean b=false;\r\nfor(String str:args){ \r\n  if(str!=null &amp;&amp; !args[0].equals(str)){ \r\n    return true;    // 发现不一样的  \r\n  } \r\n}\r\nreturn b;\r\n}\r\n\r\n是这个意思？", "Konwledge_Point": "算法与数字", "Question": ["求算法：判断未知长度数组内值是否全部相等", ["从页面过来的一组数字（过来之前不知道会有多少个数字），存于String数组内了，现想判断其值是否全部相同，全部相同则返回false。小弟新手，想了一夜不知有何可用的算法，求教各位援手。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个建议搭建神经网络来解决&amp;#xff0c;目前TensorFlow&amp;#xff0c;pytorch&amp;#xff0c;paddle等框架入门项目便是手写字体的识别&amp;#xff0c;你可以在他们的官方文档看到完整的代码&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["python机器学习中多个数字识别该怎么办啊", ["问题遇到的现象和发生背景", "\n", "学校要求，用python一次性识别多个手写数字，但是我只会用k近邻算法识别单个数字，并且没有多个数字的数据集，只有0-9的 数据集", "\n", "问题相关代码，请勿粘贴截图", "\n", "from PIL import Image", "img = Image.open('手写3.png')", "img = img.resize((32,32))", "img= img.convert('L')", "\n", "import numpy as np", "img_new = img.point(lambda x: 0 if x > 128 else 1)", "arr = np.array(img_new)", "\n", "arr_new = arr.reshape(1,-1)", "\n", "import pandas as pd", "df = pd.read_excel('手写字体识别.xlsx')", "X=df.drop(columns='对应数字')", "y=df['对应数字']", "\n", "from sklearn.model_selection import train_test_split", "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)", "\n", "from sklearn.neighbors import KNeighborsClassifier as  KNN", "knn = KNN(n_neighbors=5)", "knn.fit(X_train,y_train)", "y_pred = knn.predict(X_test)", "a=pd.DataFrame()", "a['预测值']=list(y_pred)", "a['实际值']=list(y_test)", "\n", "answer = knn.predict(arr_new)", "print('手写数字识别为'+str(answer[0]))", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;双层循环&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c#\"&gt; for (int i &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; numlist.Length-1; i&amp;#43;&amp;#43;)&lt;/span&gt;\n            {\n                for (int j &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; j &amp;lt; numlist.Length-1-i; j&amp;#43;&amp;#43;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;前一个和后一个比 所以最后一次比较为倒数第二个和倒一比&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["冒泡排序算法报错 c#", ["报错", "\n", "问题相关代码，请勿粘贴截图", "\n", "        Console.", "WriteLine(", "\"请输入一组数字：\"", ")", ";\n            ", "string", " str = Console.", "ReadLine()", ";\n            ", "string", "[]", " num = str.", "Split(',')", "; ", "// 获取到每个数", "\n            ", "int", "[]", " numlist=", "new", " ", "int", "[", "num", ".L", "ength", "]", ";\n            ", "for", " (", "int", " i = ", "0", "; i < num.Length; i++)\n            {\n                numlist", "[", "i", "]", " = ", "int", ".", "Parse(", "num", "[", "i", "])", "; ", "// 将每个数存储到numlist数组中", "\n            }\n            ", "for", " (", "int", " i = ", "0", "; i < numlist.Length; i++)\n            {\n                ", "for", " (", "int", " j = ", "0", "; j < numlist.Length-i; j++)\n                {\n                    ", "if", " (numlist", "[", "j", "]", "<numlist", "[", "j", "+", "1", "]", ")  ", "//此数小于后一个数，两个数交换，从大到小排列", "\n                    {\n                        ", "int", " temp = numlist", "[", "j", "]", ";\n                        numlist", "[", "j", "]", " = numlist", "[", "j", " + ", "1", "]", ";\n                        numlist", "[", "j", " + ", "1", "]", " = temp;\n                    }\n                }\n            }\n            Console.", "WriteLine(", "\"排序结果为:\"", ")", ";\n            ", "for", " (", "int", " i = ", "0", "; i < numlist.Length; i++)\n            {\n                Console.", "Write(", "numlist", "[", "i", "]+", "\",\"", ")", ";\n            }\n        Console.", "ReadLine()", ";\n\n\n\n"]], "Tag": "算法设计"}
{"Answer": "试写一个：\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\npublic class CombinArray {\r\n\tpublic static ArrayList&lt;Integer&gt; combine(ArrObject theArr,\r\n\t\t\tArrObject otherArr) {\r\n\t\tList&lt;Integer&gt; one = theArr.getArr();\r\n\t\tList&lt;Integer&gt; other = otherArr.getArr();\r\n\t\tArrayList&lt;Integer&gt; combined = new ArrayList&lt;Integer&gt;();\r\n\t\tint noEqualCount = 0;\r\n\t\tint equalCount = 0;\r\n\t\tif (one.size() == other.size()) {\r\n\t\t\tfor (int i = 0; i &lt; one.size(); i++) {\r\n\t\t\t\tif (one.get(i) - other.get(i) != 0) {\r\n\t\t\t\t\tnoEqualCount++;\r\n\t\t\t\t\tcombined.add(one.get(i) + other.get(i));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tequalCount++;\r\n\t\t\t\t\tcombined.add(one.get(i));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Equal and have only one difference can combine to one.\r\n\t\tif (noEqualCount == 1 || equalCount == one.size()) {\r\n\t\t\tSystem.out.println(\"middle:\" + combined);\r\n\t\t\treturn combined;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void testCombine() {\r\n\t\tArrObject arr1 = new ArrObject(Arrays.asList(1, 2, 3));\r\n\t\tArrObject arr2 = new ArrObject(Arrays.asList(1, 2, 3));\r\n\t\tArrObject arr3 = new ArrObject(Arrays.asList(1, 2, 8));\r\n\t\tArrObject arr4 = new ArrObject(Arrays.asList(1, 3, 8));\r\n\t\tArrObject arr5 = new ArrObject(Arrays.asList(1, 3, 8));\r\n\t\tArrObject arr6 = new ArrObject(Arrays.asList(3, 8, 1));\r\n\t\tArrayList&lt;ArrObject&gt; arrayList = new ArrayList&lt;ArrObject&gt;(\r\n\t\t\t\tArrays.asList(arr1, arr2, arr3, arr4, arr5, arr6));\r\n\t\tArrayList&lt;ArrObject&gt; resultList = new ArrayList&lt;ArrObject&gt;();\r\n\t\tfor (int i = 0; i &lt; arrayList.size(); i++) {\r\n\t\t\tArrObject one = arrayList.get(i);\r\n\t\t\tArrObject other = arrayList.get((i + 1) / arrayList.size());\r\n\t\t\tArrayList&lt;Integer&gt; result = combine(one, other);\r\n\t\t\tif (result != null &amp;&amp; !resultList.contains(result)) {\r\n\t\t\t\tarrayList.add(new ArrObject(result));\r\n\t\t\t\tarrayList.remove(one);\r\n\t\t\t\tarrayList.remove(other);\r\n\t\t\t\tresultList.add(new ArrObject(result));\r\n\t\t\t}\r\n\t\t\tprint(arrayList);\r\n\t\t}\r\n\t\tSystem.out.println(\"==========result==========\");\r\n\t\tprint(resultList);\r\n\t}\r\n\r\n\tprivate void print(ArrayList&lt;ArrObject&gt; copyofList) {\r\n\t\tSystem.out.println(\"finished:\");\r\n\t\tfor (ArrObject arrObject : copyofList) {\r\n\t\t\tSystem.out.println(arrObject.getArr());\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass ArrObject {\r\n\tprivate List&lt;Integer&gt; arr;\r\n\tprivate boolean combine;\r\n\r\n\tpublic ArrObject(List&lt;Integer&gt; arr) {\r\n\t\tsuper();\r\n\t\tCollections.sort(arr);\r\n\t\tthis.arr = arr;\r\n\t}\r\n\r\n\tpublic boolean isCombine() {\r\n\t\treturn combine;\r\n\t}\r\n\r\n\tpublic void setCombine(boolean combine) {\r\n\t\tthis.combine = combine;\r\n\t}\r\n\r\n\tpublic List&lt;Integer&gt; getArr() {\r\n\t\treturn arr;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int hashCode() {\r\n\t\tfinal int prime = 31;\r\n\t\tint result = 1;\r\n\t\tresult = prime * result + ((arr == null) ? 0 : arr.hashCode());\r\n\t\treturn result;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean equals(Object obj) {\r\n\t\tif (this == obj)\r\n\t\t\treturn true;\r\n\t\tif (obj == null)\r\n\t\t\treturn false;\r\n\t\tif (getClass() != obj.getClass())\r\n\t\t\treturn false;\r\n\t\tArrObject other = (ArrObject) obj;\r\n\t\tif (arr == null) {\r\n\t\t\tif (other.arr != null)\r\n\t\t\t\treturn false;\r\n\t\t} else if (!arr.equals(other.arr))\r\n\t\t\treturn false;\r\n\t\treturn true;\r\n\t}\r\n}", "Konwledge_Point": "算法与数字", "Question": ["高分求解基本的java算法题", ["例如：", "\nint[][] a=", "\n{", "\n{1,2,3,4,5},", "\n{1,2,3,4,6},", "\n{1,2,3,4,7}", "\n};", "\n\n", "行合并的规则为：两行中只相差一个数字，就把相差的数字进行合并，例如将a进行行合并处理后，变为：", "\nint[][] b=", "\n{", "\n{1,2,3,4,11},", "\n{1,2,3,4,7}", "\n};", "\n\n", "再对 b进行行合并后，变为：", "\nint[][] c=", "\n{", "\n{1,2,3,4,18}", "\n};", "\n\n", "请用java写出能实现合并规则，行数最多可能为5万。"]], "Tag": "算法设计"}
{"Answer": "递归次数太多了，导致堆栈溢出。\r\nwhile(temp&gt;=1e-3) 就可以输出正常结果\r\nwhile(temp&gt;=1e-4)就不行了\r\n我测试了一下大概while (temp &gt;= 0.000104375)在我电脑上就到达极限了，要递归4790次。\r\n建议求PI不要用递归", "Konwledge_Point": "算法与数字", "Question": ["递归问题，求各位大神解疑", ["递归问题，求各位大神解答", "\n\n", "这个递归哪里出问题了，为什么程序没有结果？", "\n\n", "\n//根据 P/4=1-1/3+1/5-1/7.... 求P的近似值，要求精度为0.000001\n\n#include\"iostream\"\nusing namespace std;\n\nint Temp(int n){//求-1的n次方\n    if(n==0)return 1;\n    return -1*Temp(n-1);\n}\n\ndouble PI(){\n    double sum=0;\n    double temp=1.0;\n    int count=0;//计数变量\n    while(temp>=1e-6){\n        count++;\n        sum=sum+Temp(count-1)*temp;\n        temp=1.0/(2*count+1);\n    }\n    return 4*sum;\n}\n\nint main(){\n    cout<<\"------------求PI的值-------------\"<<endl<<endl<<endl<<endl;\n    cout<<\"根据 P/4=1-1/3+1/5-1/7.... 求P的近似值，要求精度为0.000001\"<<endl<<endl;\n    double Pi=PI();\n    cout<<\"PI=\"<<Pi;\n    return 0;\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;每行多一个字符&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; s;\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,i,j;\n  &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c%d&amp;#34;&lt;/span&gt;,&amp;amp;s,&amp;amp;n);\n  &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n  {\n      &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&amp;#61;i;j&amp;#43;&amp;#43;)\n          &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;,s);\n      &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n  }\n  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["c语言输出直角三角形", ["输入一个字符和一个正整数n，输出由该字符构成的n行左下角的直角三角形。", "\n", "输入格式:", "第一行输入一个字符", "\n", "第二行输入一个正整数n。", "\n", "输出格式:", "输出由该字符构成的n行左下角的直角三角形。", "\n", "输入样例:", "*", "5", "输出样例:", "*", "**", "\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "你的代码问题在于scanf没有判断输入的是否是数字，如果不是数字，就会进入死循环。加一个判断就好了。\r\n不过你也可以使用fgets之类的替代scanf，方便指定输入数据类型。\r\n```\r\n#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\nvoid main()\r\n{\r\n    int guess = 0, problem;\r\n    char ch = getchar();\r\n    int isNumber;\r\n    do\r\n    {\r\n        isNumber = scanf(\"%d\", &amp;guess);\r\n        if(isNumber == 0)\r\n        {\r\n            printf(\"please input a number!\");\r\n            ch = getchar();\r\n            continue;\r\n        }\r\n        problem = (int)(rand() % 100) + 1;\r\n        for(; guess != problem;)\r\n        {\r\n            if(guess &gt; problem)\r\n                printf(\"too high!\");\r\n            if(guess &lt; problem)\r\n                printf(\"too low!\");\r\n            scanf(\"%d\", &amp;guess);\r\n        }\r\n        printf(\"%d\", problem);\r\n        ch = getchar();\r\n    }while(ch != 'n');\r\n}\r\n```", "Konwledge_Point": "算法与数字", "Question": ["c 语言的问题求大神的指导！", ["#include\"stdio.h\"", "\n#include\"stdlib.h\"", "\nvoid main()", "\n{", "\n    int guess=0,problem,ch;", "\n    ch=getchar();", "\n    do", "\n    {scanf(\"%d\",&guess);", "\n    problem=(int)(rand()%100)+1;", "\n    for(;guess!=problem;)", "\n    {if(guess>problem)", "\n    printf(\"too high!\");", "\n    if(guess<problem)", "\n        printf(\"too low!\");", "\n    scanf(\"%d\",&guess);", "\n    }", "\n    printf(\"%d\",problem);", "\n    ch=getchar();", "\n    }while(ch!='n');", "\n}为什么猜完一次数字后，我按任意键程序都会进入死循环！！"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n&lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; main(String[] args) {\n        &lt;span class=\"hljs-type\"&gt;boolean&lt;/span&gt; firstFlag &amp;#61; &lt;span class=\"hljs-keyword\"&gt;true&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i % &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(firstFlag){\n                    &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.print(i);\n                    firstFlag &amp;#61; &lt;span class=\"hljs-keyword\"&gt;false&lt;/span&gt;;\n                }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n                    &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.print(&amp;#34;,&amp;#34;&amp;#43;i);\n                }\n            }\n        }\n\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;因为无法判断哪次输出是最后一次&amp;#xff0c;所以将逗号放到前面&amp;#xff0c;添加一个第一次打印的标识&amp;#xff0c;第一次打印的时候不打印逗号&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["Java怎么把输出的最后一个逗号去掉", ["怎么把最后一个逗号去掉啊，有人能教教我嘛。", "看了好多方法都不知道具体怎么用"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这段程序是一个求解1000以内的阿姆斯特朗数的简单 C 语言程序。它采用穷举法来寻找所有符合条件的数&amp;#xff0c;并输出它们。&lt;/p&gt;\n&lt;p&gt;该程序主要分为两个循环&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1.外层循环从2到999依次取出待判定的数i。&lt;/p&gt;\n&lt;p&gt;2.内层循环将i的每一位数字分解并计算它们的立方和&amp;#xff0c;然后与i比较是否相等。如果相等&amp;#xff0c;则说明i是一个阿姆斯特朗数&amp;#xff0c;输出i的值。&lt;/p&gt;\n&lt;p&gt;值得注意的是&amp;#xff0c;该程序在截取整数i的各位数字时&amp;#xff0c;使用了一个循环和一个数组a。循环用来重复执行3次&amp;#xff0c;每次截取i的一个数字&amp;#xff0c;并将它赋值给数组a的一个元素。这样&amp;#xff0c;a数组就存储了i的各位数字。然后&amp;#xff0c;程序使用a数组计算i的立方和&amp;#xff0c;并与i比较&amp;#xff0c;判断i是否是阿姆斯特朗数。&lt;/p&gt;\n&lt;p&gt;另外&amp;#xff0c;该程序的输出结果会在一行内输出所有阿姆斯特朗数&amp;#xff0c;每个数之间用空格隔开。如果您想让输出结果每行输出一定数量的数&amp;#xff0c;请在printf语句中添加换行符。例如&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-css\"&gt;if(a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#43;a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#43;a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]&amp;#61;&amp;#61;i)\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%5d\\n&amp;#34;&lt;/span&gt;,i); &lt;span class=\"hljs-comment\"&gt;/*每个数单独占一行*/&lt;/span&gt;\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;或者&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-css\"&gt;\nif(a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#43;a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#43;a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]&amp;#61;&amp;#61;i)\n{\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%5d&amp;#34;&lt;/span&gt;,i); &lt;span class=\"hljs-comment\"&gt;/*每个数占用一定的宽度*/&lt;/span&gt;\n    if(i&lt;span class=\"hljs-comment\"&gt;%10&amp;#61;&amp;#61;0) printf(&amp;#34;\\n&amp;#34;); /*每行输出10个数*/&lt;/span&gt;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["C语言，解释如下算法", ["C语言，解释代码意思。", "如下，请问为什么内循环是呢？不太明白", "\n", "\n", "for", "(t=", "0", ",k=", "1000", ";k>=", "10", ";t++)\n", "\n", "\n", "/*如果一个正整数等于其各个数字的立方和，则称该数为阿姆斯特朗数(亦称为自恋性数)。\n如 407=43+03+73就是一个阿姆斯特朗数。试编程求1000以内的所有阿姆斯特朗数。\n*问题分析与算法设计\n可采用穷举法，依次取1000以内的各数(设为i)，将i的各位数字分解后，据阿姆斯特朗数的性质进行计算和判断。*/", "\n#include<stdio.h>\nint main()\n{\n    int i,t,k,a[", "3", "];\n    printf(", "\"There are follwing Armstrong number smaller than 1000:\\n\"", ");\n    for(i=", "2", ";i<", "1000", ";i++) ", "/*穷举要判定的数i的取值范围2~1000*/", "\n    {\n        for(t=", "0", ",k=", "1000", ";k>=", "10", ";t++) ", "/*截取整数i的各位(从高向低位)*/", "\n        {\n            a[t]=(i", "%k)/(k/10); /*分别赋于a[0]~a[2}*/", "\n            k/=", "10", ";\n        }\n        if(a[", "0", "]*a[", "0", "]*a[", "0", "]+a[", "1", "]*a[", "1", "]*a[", "1", "]+a[", "2", "]*a[", "2", "]*a[", "2", "]==i)", "/*判断i是否为阿姆斯特朗数*/", "\n        printf(", "\"%5d\"", ",i); ", "/*若满足条件，则输出*/", "\n    }\n    printf(", "\"\\n\"", ");\n}\n"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/chang_mu/article/details/27983989", "Konwledge_Point": "算法与数字", "Question": ["关于如何计算机IP地址的判断判定算法C语言", ["Problem Description", "\n在网络课程上，我学到了很多有关IP的知识。IP全称叫网际协议，有时我们又用IP来指代我们的IP网络地址，现在IPV4下用一个32位无符号整数来表示，一般用点分方式来显示，点将IP地址分成4个部分，每个部分为8位，表示成一个无符号整数（因此不需要用正号出现），如192.168.100.16，是我们非常熟悉的IP地址，一个IP地址串中没有空格出现（因为要表示成一个32数字）。", "\n但是粗心的我，常常将IP地址写错，现在需要你用程序来判断。", "\n\n", "Input", "\n输入有多个case，每个case有一行，不超过100个字符。", "\n\n", "Output", "\n对于每个case，判断输入的IP是否正确，如果正确输入YES，否则NO。", "\n\n", "Sample Input", "\n192.168.100.16", "\n\n", "Sample Output", "\nYES"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;#include &amp;lt;string&amp;gt;\nint main() \n{ \n\tchar c;\n\tc&amp;#61;getchar();\n\tchar ch[80] &amp;#61; { 0 };\n\tgets(ch);\n\t\n\tint n &amp;#61; strlen(ch);\n\tint num &amp;#61; 0;\n\tfor (int i &amp;#61; 0; i &amp;lt; n; i&amp;#43;&amp;#43;)\n\t{\n\t\tif (ch[i] &amp;#61;&amp;#61; c)\n\t\t\tnum&amp;#43;&amp;#43;;\n\t}\n\tprintf(&amp;#34;字符%c出现的次数&amp;#xff1a;%d&amp;#34;, c, num);\n\tprintf(&amp;#34;%s&amp;#34;, ch);\n\treturn 0; \n} &lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["编写程序，输入一个以回车符结束的字符串（少于80字符），再输入一个字符，统计并输出该字符在字符串中出", ["编写程序，输入一个以回车符结束的字符串（少于80字符），再输入一个字符，统计并输出该字符在字符串中出现的次数，然后再输出该字符串。"]], "Tag": "算法设计"}
{"Answer": "#include \"stdio.h\"\r\n#include \"stdlib.h\"\r\nint sort = 100;\r\nint main()\r\n{\r\n\tint in = 0;\r\n\tint r = 0;\r\n\tint sum，j;\r\n\twhile (1)\r\n\t{\r\n\t\ti=0;\r\n\t\tchar help;\r\n\t\tr = rand();\r\n\t\twhile (1000 &lt;= r &amp;&amp; r &lt;= 9999 &amp;&amp; sum&lt;7)//sun&lt;7 判断游戏机会是否超出7次\r\n\t\t{\r\n\t\t\tprintf(\"please enter data:\");\r\n\t\t\tscanf(\"%d\", &amp;in);\r\n\t\t\tprintf(\"Do you need help？Y/N\");//是否选择帮助，Y选择帮助，N不需要帮助\r\n\t\t\tscanf(\"%c\",&amp;help);\r\n\t\t\tif(help=='Y')//Y选择帮助\r\n\t\t\t{\r\n\t\t\t\tint next,next1;\r\n\t\t\t\tint num1,num2;\r\n\t\t\t\tprintf(\"Select help mode ：position:1/Correct:2\");//选择帮助类型，1为查看对应位置正确性，2为查看正确数字\r\n\t\t\t\tscanf(\"%d\",&amp;j);\r\n\t\t\t\tif(j==1)//1为查看对应位置正确性\r\n\t\t\t\t{\r\n\t\t\t\t\tnum1=in;num2=r;\r\n\t\t\t\t\tchar s[4];\r\n\t\t\t\t\tfor(next=0;next&lt;4;next++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(num1%10==num2%10)//对应位置对比\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ts[4-next-1]=\"R\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ts[4-next-1]=\"E\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnum1=num1/10;\r\n\t\t\t\t\t\tnum2=num2/10;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tputs(s);//输出对比结果\r\n\t\t\t\t}\r\n\t\t\t\telse if(j==2)//2为查看正确数字\r\n\t\t\t\t{\r\n\t\t\t\t\tint s[4];\r\n\t\t\t\t\tnum1=in;\r\n\t\t\t\t\tint g=0;\r\n\t\t\t\t\tfor(next=0;next&lt;4;next++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum2=r;\r\n\t\t\t\t\t\tfor(next1=0;next1&lt;4;next1++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(num1%10==num2%10)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ts[g++]=num2%10;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tnum2/=10;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnum1/=10;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tputs(s);//输出对比结果\r\n\t\t\t\t}\r\n\t\t\t\tsort-=sort/10;//扣除使用帮助分\r\n\t\t\t\tprintf(\"当前分数%d\\n\", sort);\r\n\t\t\t}\r\n\t\t\tif (in &gt; r || in &lt; r) //如果大或小，减去当前分数的1/10\r\n\t\t\tsort -= sort / 10;\r\n\t\t\tprintf(\"当前分数%d\\n\", sort);\r\n\t\t\tsum++;//\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}", "Konwledge_Point": "算法与数字", "Question": ["求解一道C语言题目！！！！", ["１. 电脑随机产生1000—9999之间的数字（包括1000、9999）；", "\n提示：用rand函数，该函数在stdlib.h库中，并保证多次运行产生不同的随机数", "\n２. 玩家每轮有七次猜数的机会，如果七次都没有猜到，则失败，判为0分；", "\n３. 玩家每轮可以请求帮助，提问关于产生数字的信息，扣分细则如下；", "\n4. 游戏以百分制形式，初始分为100，最后得分最多为赢家。", "\n 帮助内容及扣分细则：", "\n. 判断你所猜的数中各位数字对应位置正误情况，以R表正确，E表错误。若随机数是2537，而猜的数是1234，则输出EERE，代表猜的数第3位正确，第1,2，4位错误。", "\n——扣当前分数的1/10", "\n. 判断你所猜的数中正确数字是什么。若随机数是2537，而猜的数是1234，则输出有两个数字正确，它们是2，3。 ——扣当前分数的1/10", "\n#include", "\n#include", "\nint sort = 100;", "\nint main()", "\n{", "\nint in = 0;", "\nint r = 0;", "\nwhile (1)", "\n{", "\nr = rand();", "\nwhile (1000 <= r && r <= 9999)", "\n{", "\nprintf(\"please enter data:\");", "\nscanf(\"%d\", &in);", "\nif (in > r || in < r) //如果大或小，减去当前分数的1/10", "\nsort -= sort / 10;", "\nprintf(\"当前分数%d\\n\", sort);", "\n}", "\n}", "\nreturn 0;", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以考虑以下几种方法&amp;#xff1a;&lt;br /&gt;&amp;#xff08;1&amp;#xff09;续期数字证书&amp;#xff1a;在数字证书即将过期时&amp;#xff0c;及时进行续期操作&amp;#xff0c;以延长数字证书的有效期。这样可以保证数字证书的有效期与电子档案的保存期限相对应。需要注意的是&amp;#xff0c;续期数字证书时应当确保其合法性和安全性&amp;#xff0c;防止数字证书被冒用或篡改。&lt;br /&gt;&amp;#xff08;2&amp;#xff09;签署时间戳&amp;#xff1a;在电子签名时&amp;#xff0c;可以同时签署时间戳&amp;#xff0c;以证明签名是在特定时间完成的。时间戳中包含了时间戳机构颁发的数字证书&amp;#xff0c;因此即使原签名证书过期&amp;#xff0c;时间戳依然可以验证签名的合法性&amp;#xff0c;从而保证电子档案的长期可靠保存。需要注意的是&amp;#xff0c;时间戳机构的可信度和稳定性也是需要考虑的因素。&lt;br /&gt;&amp;#xff08;3&amp;#xff09;保留数字证书私钥&amp;#xff1a;在数字证书过期后&amp;#xff0c;仍然保留数字证书的私钥&amp;#xff0c;以便在需要时可以对电子文档进行验证。这种方法可以延长数字证书的有效期&amp;#xff0c;但需要确保私钥的安全性&amp;#xff0c;以免私钥被泄露或攻击。&lt;br /&gt;&amp;#xff08;4&amp;#xff09;使用长效数字证书&amp;#xff1a;长效数字证书&amp;#xff08;Long-term Validity Certificate&amp;#xff09;是一种可以长期使用的数字证书&amp;#xff0c;其有效期可以达到几十年或更长时间。这种数字证书的使用需要符合特定的安全标准和法律法规&amp;#xff0c;同时需要确保证书的可信度和可靠性。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["如何解决电子签名应用中数字证书有限服务期与电子档案长期保存的矛盾", ["如何解决电子签名应用中数字证书有限服务期与电子档案长期保存的矛盾"]], "Tag": "算法设计"}
{"Answer": "肯定不是代码问题，你的路径有问题，你直接把这个java文件放在 任意盘符的跟路径下如：D:\\factorial10.java   试试！", "Konwledge_Point": "算法与数字", "Question": ["求助解决：算法问题-10以内的自然数的阶乘之和。", ["我用UltraEdit编写了factorial10.java文件，代码如下：", "\npublic class factorial10 {", "\n  public static void main(String args[]){", "\n    long a=1;", "\n    long result=0;", "\n    for(int i=1;i<=10;i++)", "\n     {a=a*i;", "\n      result+=a;", "\n     }", "\n     System.out.println(\"result=\" + result);", "\n  }", "\n}", "\n但是在命令提示符中运行factorial10.java文件老是报如下错误：", "\nE:\\baidudownyunload>javac factorial10.java", "\nerror:cannot read:javac factorial10.java", "\n1 error"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;std&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; house[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; };\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;nameToInt&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; name&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; res &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; c : name) {\n        res &amp;#43;&amp;#61; (c - &lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; res;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;nextValue&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; v, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; tryTime&lt;/span&gt;)&lt;/span&gt; {\n  &lt;span class=\"hljs-comment\"&gt;/*  int n &amp;#61; tryTime / 2;\n    int sign &amp;#61; tryTime % 2 &amp;#61;&amp;#61; 0 ? 1 : -1;\n    int add &amp;#61; n &amp;#43; 1;\n    return v &amp;#43; sign * add * add;*/&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt; &amp;#61; tryTime &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; v &amp;#43; &lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt; * &lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;;\n}\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; residents[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;];\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n, m, i, pathLength, tryTime &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt;, oldvalue, newValue;\n    &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; name;\n    &lt;span class=\"hljs-comment\"&gt;// n: 人数&amp;#xff0c;m:房间&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m) {\n        i &amp;#61; &lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        pathLength &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i&amp;#43;&amp;#43; &amp;lt; n) {\n            cin &amp;gt;&amp;gt; name;\n            &lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt; &amp;#61; nameToInt(name) % m;\n            pathLength &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (house[&lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt;]) {\n                tryTime &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; oldvalue &amp;#61; &lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (house[&lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt;]) {\n                    &lt;span class=\"hljs-comment\"&gt;// 增量:&amp;#43;1 -1 &amp;#43;2^2 - 2^2 ...&lt;/span&gt;\n                    newValue &amp;#61; nextValue(oldvalue, tryTime);\n                    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (newValue &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n                        newValue &amp;#43;&amp;#61; m;\n                    }\n                    &lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt; &amp;#61; (newValue) % m;\n                    &lt;span class=\"hljs-comment\"&gt;//value &amp;#61; (value &amp;#43; 1) % m;&lt;/span&gt;\n                    pathLength &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                    tryTime &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (tryTime &amp;gt; m) exit(&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//全满&lt;/span&gt;\n                }\n            }\n            residents[&lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt;] &amp;#61; name;\n            house[&lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n        memset(house, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;) * m);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;) {\n            cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; (residents[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt; ? residents[i] : &lt;span class=\"hljs-string\"&gt;&amp;#34;NULL&amp;#34;&lt;/span&gt;) &amp;lt;&amp;lt; endl;\n            residents[i] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;\n        }\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.3lf\\n&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt; * pathLength / (&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt; * n)));\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["数据结构与算法“爸爸去哪儿”房子分配问题2", ["题目描述", "\n", "最近“爸爸去哪儿”节目很火，据说新一期节目分房的策略有所改变:共有m间房，序号从0到m-1，村长根据每个小朋友的英 文名来分配房子。", "\n", "具体规则如下:", "\n", "每个小朋友的英文名都能得到一个对应的数值:‘a’数值为1，‘b’数值为2，…，‘z’数值为26，小朋友的英文名的数值为各个字母的数值和，比如kimi的英文名的数值为11+9+13+9=42。注:规定输入的英文名均为小写字母", "\n", "假设小朋友的英文名的数值为numName的话，那这个小朋友和他爸爸本期节目要住的房子就是(numName mod m)号房。", "如果某小朋友的numName mod m得到的值和之前的小朋友的一样，则用哈希中的平方探测法。", "\n", "分配完房子之后，村长想知道这个分房策略的平均查找长度是多少，也就是说村长根据这个策略来查找每个人的房子时，平均", "需要查找多少房子(结果保留三位小数)。", "\n", "比如有以下5个小朋友，并且有6间房:", "\n", "\n", "平均查找长度为:(1+1+1+2+2) / 5 = 1.400", "输入描述", "\n", "输入有多个测试用例，以EOF结束。", "\n", "对于每个测试用例，输入分两部分:", "\n", "第一部分是1行，有两个整数n和m(1<= n, m<=10,000)，中间用空格隔开，n代表有多少对明星父子参加节目，m代表一共 有多少间房", "\n", "第二部分是n行，每行都是一个小朋友的英文名，小朋友的英文名彼此都不同，且中间没有空格。每个小朋友的英文名不超过 10个字母，且均为小写字母", "输出描述", "\n", "对于每个测试用例，输出m+1行 前m行，每行为房子序号+“:”+要入住的小朋友的英文名，没有人入住则输出房子序号+“:NULL”", "\n", "第m+1行输出一个数字，表示平均查找长度，保留三位小数", "输入样例", "\n", "5 6", "kimi", "tiantian", "stone", "angela", "cindy", "\n", "输出样例", "\n", "0:kimi", "1:stone", "2:cindy", "3:NULL", "4:tiantian", "5:angela", "1.400", "\n", "给出代码，谢谢"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-comment\"&gt;// 用递归就可以了&lt;/span&gt;\n#include &amp;lt;iostream&amp;gt;\n#include &amp;lt;string&amp;gt;\nusing namespace std;\n\nbool &lt;span class=\"hljs-built_in\"&gt;match&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* pattern, &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;)\n{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (*pattern &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; *&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (*pattern &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt; || *&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (*pattern &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;match&lt;/span&gt;(pattern &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (*pattern &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-comment\"&gt;// 匹配0个1个或多个&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;match&lt;/span&gt;(pattern &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;) || &lt;span class=\"hljs-built_in\"&gt;match&lt;/span&gt;(pattern &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) || &lt;span class=\"hljs-built_in\"&gt;match&lt;/span&gt;(pattern, &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;); \n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (*pattern &amp;#61;&amp;#61; *&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;match&lt;/span&gt;(pattern &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n}\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;main&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt;)\n{\n    string pattern, &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (cin &amp;gt;&amp;gt; pattern &amp;gt;&amp;gt; &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;)\n    {\n        bool ret &amp;#61; &lt;span class=\"hljs-built_in\"&gt;match&lt;/span&gt;(pattern.&lt;span class=\"hljs-property\"&gt;c_str&lt;/span&gt;(), &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;c_str&lt;/span&gt;());\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (ret)\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;false&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["要求各位实现字符串通配符的算法", ["问题描述：在计算机中，通配符一种特殊语法，广泛应用于文件搜索、数据库、正则表达式等领域。现要求各位实现字符串通配符的算法。", "要求：", "实现如下2个通配符：", "：匹配0个或以上的字符（注：能被", "和?匹配的字符仅由英文字母和数字0到9组成，下同）", "？：匹配1个字符", "\n", "注意：匹配时不区分大小写。", "\n"]], "Tag": "算法设计"}
{"Answer": "下面是采用广度优先遍历的代码，我已经测试过了\r\n\r\n/*有一2维数组,比如:String[][] a={{1,2},{3},{4},{5,6}}; \r\n求这些数字一共可以组合多少种排列,并打印所有可能情况 \r\n比如上面的数字可以有这些情况:1345,1346,2345,2346 \r\n最好不要递归,速度要快! */\r\n\r\nimport java.util.LinkedList;\r\n//采用广度优先遍历\r\npublic class BroadFirst {\r\n\r\n\t//用于存储遍历情况的列表\r\n\tprivate LinkedList&lt;String&gt; list=new LinkedList&lt;String&gt;();\r\n\t//传入的参数\r\n\tprivate String[][] para=null;\r\n\t\r\n\tpublic BroadFirst(String[][] para){\r\n\t\tthis.para=para;\r\n\t\t//将第一个列表添加到遍历列表的前端\r\n\t\tfor(String str:this.para[0]){\r\n\t\t\tthis.list.addLast(str);\r\n\t\t}\r\n\t\t//产生序列\r\n\t\tthis.createSequence();\r\n\t}\r\n\t\r\n\tprivate void createSequence() {\r\n\t\tint innerLength = 1;\r\n\t\twhile (true) {\r\n\t\t\tString temp = this.list.pollFirst();\r\n\t\t\tinnerLength = temp.length();\r\n\t\t\t// 深度够了则执行完成\r\n\t\t\tif (innerLength == para.length) {\r\n\t\t\t\tthis.list.addFirst(temp);\r\n\t\t\t\treturn;\r\n\t\t\t} else {\r\n\t\t\t\tfor (String innerStr : this.para[innerLength]) {\r\n\t\t\t\t\t// 依次入队列的末端\r\n\t\t\t\t\tthis.list.addLast(temp + innerStr);\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void printString(){\r\n\t\t\r\n\t\tfor(String str:this.list){\r\n\t\t\tSystem.out.println(str);\r\n\t\t}\r\n\t}\r\n\t//测试\r\n\tpublic static void main(String[] args) {\r\n\t\tString[][] temp={{\"1\",\"2\"},{\"3\"},{\"4\"},{\"5\",\"6\"},{\"7\",\"8\"}};\r\n\t\tBroadFirst bf=new BroadFirst(temp);\r\n\t\tbf.printString();\r\n\t}\r\n\r\n}", "Konwledge_Point": "算法与数字", "Question": ["求2维数组有多少种排列的算法", ["有一2维数组,比如:String[][] a={{1,2},{3},{4},{5,6}};", "\n求这些数字一共可以组合多少种排列,并打印所有可能情况", "\n\n", "比如上面的数字可以有这些情况:1345,1346,2345,2346", "\n\n", "最好不要递归,速度要快!"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/472055264846187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["算法验证，乘积最大值", ["输入五个数字（0-9），把这五个数字组成一个三位数和一个二位数，要求计算组成的这两个数的乘积的最大值", "想问问该算法正确吗", "\n", "#", "include", "<stdio.h>", "\n", "//乘积最大值", "\n", "void", " ", "sort", "(", "int", " t[],", "int", " n)", "\n", "{\n    ", "int", " j=", "0", ";\n    ", "while", "(j<n)\n    {\n        ", "if", "(t[j]<t[j", "-1", "]&&j!=", "0", ")\n        {\n            ", "int", " tem=t[j];\n            t[j]=t[j", "-1", "];\n            t[j", "-1", "]=tem;\n            j--;\n        }\n        ", "else", "\n        {\n            j++;\n        }\n    }\n}\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " j,k,h;\n    ", "int", " t[", "5", "];\n    ", "for", "(j=", "0", ";j<", "5", ";j++)\n    {\n        ", "scanf", "(", "\"%d\"", ",&t[j]);\n    }\n    ", "sort", "(t,", "5", ");\n    \n    ", "int", " max1=t[", "4", "]*", "100", "+t[", "1", "]*", "10", "+t[", "0", "];\n    ", "int", " max2=t[", "3", "]*", "10", "+t[", "2", "];\n    \n    ", "printf", "(", "\"%d  %d   \"", ",max1,max2);\n \n    ", "printf", "(", "\"乘积最大值：%d\\n\"", ",max1*max2);\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题主&amp;#xff0c;在你的isSort方法里面&amp;#xff0c;if判断里用break是错的&amp;#xff0c;这里可以用一个实例说明&amp;#xff0c;假如给你一个数组&amp;#xff0c;元素为{3,1,2}&amp;#xff1b;进入for循环&amp;#xff0c;if判断语句&amp;#xff0c;3和1比较通过&amp;#xff0c;将sort赋值false&amp;#xff0c;然后就   ** break __**break是退出整个循环哈&amp;#xff0c;退出了for循环&amp;#xff0c;后面的数组元素就没有办法判断了&amp;#xff0c;如果非要这么写&amp;#xff0c;可以用continue试一下&amp;#xff0c;望题主采纳。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["JAVA判断阵列数字是否由大到小的顺序排列", ["输入：", "\n", "阵列大小N(整数)、各别数值(整数)", "\n", "输出：", "\n", "判断阵列数字是否由大到小的顺序排列", "\n", "提示：", "\n", "静态方法中的演算法：", "\n", "不必管什么排序法，只要用一个回圈，判断前面的数字有没有比后面的大，按顺序一一比对，若不成立就不是由大到小。", "\n", "特别要求:你必须写一个静态方法", "\n", "public static boolean isSorted(int[] array) {}", "\n", "输出格式：", "\n", "当阵列\"前面的数字比后面的小\"时，输出文字：", "\n", "System.out.println(\"The list is not sorted\");", "\n", "当阵列\"前面的数字比后面的大\"时，输出文字：", "\n", "System.out.println(\"The list is already sorted\");", "\n", "Example:", "\n", "Input", "3", "3 2 1", "\n", "Output", "The list is already sorted", "\n", "\n", "以下是我的程式码:", "\n", "运行以后确实能达成example演示的结果，但是缴交系统表示答案是错误的，请问哪里出了问题?"]], "Tag": "算法设计"}
{"Answer": "```\r\n //返回一个数从后往前第n位的值，比如 fn(1234, 2)得到3\r\nint fn(int x, int n) { ... } //这个函数你自己写\r\nint main()\r\n{\r\nfor (int i = 100; i &lt; 000; i++)\r\n{\r\nfor (int j = 10; j &lt; 99; j++)\r\n{\r\nint x = i * fn(j, 1);\r\nint y = i * fn(j, 2);\r\nif (i * j &lt; 10000) continue; //结果不是5位数\r\nint z = i * j;\r\n//此时第一排是i，第二排是j，第三排是x，第四排是y，最后一排是z，通过fn可以得到每一位的值\r\n//下面写你的判断逻辑，什么叫数字互异的四个数字为2，3，5，7，我不是很清楚。如果满足逻辑，就是答案了。\r\n}\r\n}\r\n}\r\n```", "Konwledge_Point": "算法与数字", "Question": ["竖式问题的变形，求大佬给一段c的编程算法提示", ["下面的乘法竖式中，每个星号表示一个数字。已知竖式中出现的数字互异的四个数字为2，3，5，7，求还原竖式。", "\n      ***", "\n        x  **", "\n        ——", "\n         ****", "\n     ****", "\n     ——", "\n      *****"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题目要求是&amp;#xff1a;&lt;br /&gt;使用do-while语句作为外循环&amp;#xff0c;实现按行数循环&amp;#xff0c;用while循环作为内循环&amp;#xff0c;循环输出每行的5个数&amp;#xff0c;但每个数据应通过计算得到&amp;#xff0c;每个数据之间至少有1个空格。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; i;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(j - i &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%s&amp;#34;&lt;/span&gt;, j, &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;);\n            j &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n        i &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;输出结果&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/290200932946181.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["do while循环嵌套实现数字方阵", ["12345", "23456", "34567", "45678", "56789，输出这个方阵。使用do-while语句作为外循环，实现按行数循环，用while循环作为内循环，循环输出每行的5个数，但每个数据应通过计算得到，每个数据之间至少有1个空格，且要求数据左对齐。", "\n", "不能使用数组", "\n", "我在算法阶段就不知道该怎么设计，这个用循环该怎么做啊", "\n", "以下是我的原码", "\n", "#include<stdio.h>", "int main()", "{", "    int num = 0;int i=0 ;", "    while(1)", "    {", "        if (num == 9)", "            break;", "        if (i >= 0 && i < 4)", "            num++; i++;", "        printf(\"%d \", num);", "        if (i >= 1 && i < 5)", "            num++; i++;", "        printf(\"%d \", num);", "        if (i >= 2 && i < 6)", "            num++; i++;", "        printf(\"%d \", num);", "        if (i >= 3 && i < 7)", "            num++; i++;", "        printf(\"%d \", num);", "        switch (num)", "        {", "        case 4:", "            num = 5;", "            printf(\"%d\\n\", num);", "            num = num - 3; i = 1;", "            printf(\"%d \", num);", "            continue;", "        case 5:", "            num = 6;", "            printf(\"%d\\n\", num);", "            num = num - 3; i = 2;", "            printf(\"%d \", num);", "            continue;", "        case 6:", "            num = 7;", "            printf(\"%d\\n\", num);", "            num = num - 3; i = 3;", "            printf(\"%d \", num);", "            continue;", "        case 7:", "            num = 8;", "            printf(\"%d\\n\", num);", "            num = num - 3; i = 4;", "            printf(\"%d \", num);", "        case 8:", "                num = 9;", "                printf(\"%d\\n\", num);", "                continue;", "        }", "        /", "if (num >= 4 && num < 9)", "        {", "            num = num + 1;", "            printf(\"%d\\n  \", num);", "            num = num - 4; i = 0;", "            continue;", "        }", "            if (num == 9)", "                break;", "/", "    }", "    return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "```\r\n    int aa = 0;\r\n    Count = 0;\r\n    for ( int j = 0; j &lt;i; j++) {\r\n        aa = aa * 10 + a;\r\n        Count += aa;\r\n    }\r\n```", "Konwledge_Point": "算法与数字", "Question": ["关于加法问题，2+22+222+2222.。。。这样的", ["public class ClassMat26 {", "\n    /*", "\n     * 题目：求s=a+aa+aaa+aaaa+aa...a的值，其中a是一个数字。", "\n     * 例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。", "\n     */", "\n\n", "public static int Count;\n\nint test(int a,int i) {\n      int aa;\n    for ( int j = 0; j <=i; j++) {\n        aa = a * 10 + a;\n        Count = a + aa;\n    }\n    System.out.println(\"Count=\"+Count);\n    return 0;\n}\n\npublic static void main(String[] args) {\n    ClassMat26 cm = new ClassMat26();\n    cm.test(2,5);\n}\n", "\n\n", "}", "\n\n", "我的理解的一直加下去，cm.test(2,5); 表示2为初始的，一共加5次，我这样的实现哪里不对吗；如果参数换位cm.test(5,3);，就是5+55+555 这样了"]], "Tag": "算法设计"}
{"Answer": "&lt;h1 id=\"h1_这个问题其实跟之前大家问的组成3位数有点类似_1637631371773\"&gt;这个问题其实跟之前大家问的组成3位数有点类似&lt;/h1&gt;\n&lt;h2 id=\"h2_不同点是&amp;#xff1a;_1637631371773\"&gt;不同点是&amp;#xff1a;&lt;/h2&gt;\n&lt;p&gt;1.现在是用7个数字去组成&lt;br /&gt;2.里面有0&amp;#xff0c;这也就是说&amp;#xff0c;0不能在百位上出现&lt;br /&gt;3.要求是偶数&amp;#xff0c;这里就要来判断能不能%2为0&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;for i in [&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]:\n    if(i &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;):\n        for &lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;in [&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]:\n            for k in [&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]:\n                if( i !&amp;#61; k ) &lt;span class=\"hljs-keyword\"&gt;and &lt;/span&gt;(i !&amp;#61; &lt;span class=\"hljs-keyword\"&gt;j) &lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;and &lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;!&amp;#61; k) &lt;span class=\"hljs-keyword\"&gt;and &lt;/span&gt;((i*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-keyword\"&gt;j*10&amp;#43;k)%2 &lt;/span&gt;&amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;):\n                    print (i,&lt;span class=\"hljs-keyword\"&gt;j,k)\n&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;输出结果&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-symbol\"&gt;2 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;2 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;2 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;2 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;2 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;2 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;2 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;2 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;2 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;2 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;5 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;6 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;6 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;6 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;6 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;6 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;6 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;6 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;6 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;6 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;6 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;7 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;9 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["如何将2、3、5、6、7、9、0组成不相同、不重复、且是偶数的三位数", ["我想要达到的结果", "\n", "将2，3，5，6，7，9，0组成三位数，要求这三位数各不相关，不重复，且是偶数。", "请帮忙设计下算法，用python怎么写代码。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个不是必须的&amp;#xff0c;你可以把任何一个不在你有效数值范围内的数作为结束标志。&lt;br /&gt;用-1是因为大部分练习题都是正整数计算&amp;#xff0c;所以用-1表示无效数值作为结束&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["c语言为什么算平均数以输入-1为标志结束", ["c语言算平均数为什么以输入-1为标志结束c语言算平均数为什么以输入-1为标志结束c语言算平均数为什么以输入-1为标志结束c语言算平均数为什么以输入-1为标志结束c语言算平均数为什么以输入-1为标志结束"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;#include&amp;lt;stdio.h&amp;gt;&lt;br /&gt;#include&amp;lt;string.h&amp;gt;&lt;br /&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;br /&gt;void search(char* a,int n) {&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    if (a &amp;#61;&amp;#61; NULL)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        return;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    int i&amp;#61;0;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    int index &amp;#61; 0, maxindex &amp;#61; 0;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    int length &amp;#61; 0, maxlength &amp;#61; 0;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    while (i&amp;lt;&amp;#61;n)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        if (a[i] &amp;gt;&amp;#61; &amp;#39;0&amp;#39;&amp;amp;&amp;amp;a[i] &amp;lt;&amp;#61; &amp;#39;9&amp;#39;){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            length&amp;#43;&amp;#43;;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        else {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            if (length &amp;gt; maxlength)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                maxindex &amp;#61; i - 1;maxlength &amp;#61; length;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            length &amp;#61; 0;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        i&amp;#43;&amp;#43;;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for (int i &amp;#61; maxindex - maxlength &amp;#43; 1; i &amp;lt;&amp;#61; maxindex; i&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        printf(&amp;#34;%c&amp;#34;, a[i]);&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;int main()&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    char a[100];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    gets(a);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    int n &amp;#61; strlen(a);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    search(a,n);&lt;/span&gt;&lt;br /&gt;}&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["求各位指导怎么才能缩短这个算法的测试时间", ["编写函数输出s中的连续最长的数字串", "输入样例：", "12abcde2345efg789xyz", "输出样例：", "2345", "时间限制：1000ms内存限制：32000kb", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<stdlib.h>", "\n", "#", "include", "<string.h>", "\n", "#", "include", "<time.h>", " ", "\n", "void", " ", "NumStr", "(", "char", " s[])", "\n", "{\n    ", "int", " j=", "0", ";\n    ", "char", " str1[", "100", "],str2[", "100", "];\n    ", "int", " len,temp=", "0", ";\n    len=", "strlen", "(s);\n    ", "for", "(", "int", " i=", "0", "; i<len; i++)\n    {\n        ", "if", "(s[i]>=", "'0'", "&&s[i]<=", "'9'", ")\n        {\n\n            str1[j]=s[i];\n            j++;\n            ", "if", "(s[i+", "1", "]>", "'9'", "||s[i+", "1", "]<", "'0'", ")\n            {\n                ", "if", "(temp<j)\n                    ", "for", "(", "int", " x=", "0", ";x<j;x++)\n                        str2[x]=str1[x];\n                temp=j;\n                j=", "0", ";\n            }\n        }\n    }\n        ", "printf", "(", "\"%s\"", ",str2);\n}\n\n", "int", " ", "main", "()", "\n", "{\n    ", "char", " s[", "100", "];\n    ", "gets", "(s);\n    ", "NumStr", "(s);\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "这里的移动，是指用一个指针或者代表下标的整数去扫描这个字符串。这个指针++，就相当于向右移动。", "Konwledge_Point": "算法与数字", "Question": ["这是一个关于数据结构字符集问题", ["kmp算法，就移动模式串就好。普通字符串数组匹配，主串和模式串都移动。", "\n我很懵，字符串数组数据内容存储好后，怎么能移动呢？", "\n如果指的是移动数组索引，那kmp算法也移动主串和模式串索引了吧"]], "Tag": "算法设计"}
{"Answer": "http://blog.sina.com.cn/s/blog_6fb8700f0101iupl.html", "Konwledge_Point": "算法与数字", "Question": ["求这个题代码的算法设计和流程图", ["问题描述", "\nYOYO非常喜欢CICI，今天他终于向CICI表白了，但是CICI当然不会随随便便的接受，她想找个聪明的男朋友。于是她给YOYO出了个难题，她要求YOYO从商店里中找出一块巧克力。这听 起来不算什么，但是这块巧克力的要求可真是让YOYO犯难了，要求如下：", "\n1、这块巧克力一定要是商店里质量最大的；", "\n2、这块巧克力一定要是质量最大的巧克力中最薄的；", "\n3、这块巧克力一定要是符合前两条的巧克力中编码最大的（每块巧克力都有一个互不相同的编码，越大表示生产日期越近）。", "\n相关的资料到是有，可是，手工从几百块巧克力中选出符合要求的那块…… ", "\n不过YOYO说，这个问题写个小的程序就能解决了。聪明的你一定知道他是怎么解决的吧。", "\n输入：", "\n\n", "有多组数据，第一行一个数字T，表示测试数据的组数。之后有T组数据。", "\n每组数据的第一行为一个整数 N（ N<1000000），表示商店里所有巧克力的数量。", "\n之后N行，每行三个整数，分别表示一块巧克力的质量L、厚度D和编码M（一个9位整数）,所有数字保证最高位非零。", "\n\n", "输出：", "\n\n", "共有T行，第i行只有一个9位整数，表示第i组数据中选出的那块巧克力的编码。", "\n\n", "样例输入：", "\n\n", "1", "\n4", "\n3000 50 872198442", "\n3000 45 752498124", "\n2000 60 765128742", "\n3000 45 652278122", "\n\n", "样例输出：", "\n\n", "752498124", "\n\n", "#include", "\nint main()", "\n{", "\nint n;", "\nscanf(\"%d\",&n);", "\nwhile(n--)", "\n{", "\nint m,a,b,c;", "\nint a1,b1,c1;", "\nscanf(\"%d\",&m);", "\nscanf(\"%d %d %d\",&a,&b,&c);", "\nfor(int i = 1;i < m;i++ )", "\n{", "\nscanf(\"%d %d %d\",&a1,&b1,&c1);", "\nif(a < a1 || (a == a1 && b > b1) || (a == a1 && b == b1 && c < c1))", "\n{", "\na = a1,b = b1,c = c1;", "\n}", "\n}", "\nprintf(\"%d\\n\",c);", "\n}", "\nreturn 0;", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在这段代码中&amp;#xff0c;使用了两个do-while循环来寻找分界点。这种写法比较灵活&amp;#xff0c;可以处理一些特殊的情况&amp;#xff0c;例如数组中有重复元素时。具体来说&amp;#xff0c;第一个循环会从左向右逐个扫描数组元素&amp;#xff0c;直到找到第一个大于或等于分界值x的元素&amp;#xff1b;而第二个循环则会从右向左逐个扫描数组元素&amp;#xff0c;找到第一个小于或等于分界值x的元素。然后交换这两个元素的位置&amp;#xff0c;并继续执行下一轮循环。&lt;/p&gt;\n&lt;p&gt;如果我们改用&amp;lt;&amp;#61;和&amp;gt;&amp;#61;来判断元素的大小关系&amp;#xff0c;会出现以下问题&amp;#xff1a;当数组中存在多个与分界值相等的元素时&amp;#xff0c;就会出现死循环的情况。具体地说&amp;#xff0c;如果一个元素恰好等于分界值&amp;#xff0c;那么它将被分到左右两个部分中&amp;#xff0c;但由于使用的是&amp;lt;&amp;#61;和&amp;gt;&amp;#61;&amp;#xff0c;所以它又会被不断地交换位置&amp;#xff0c;直到程序进入死循环。因此&amp;#xff0c;在快速排序算法中&amp;#xff0c;通常会采用严格的&amp;lt;和&amp;gt;操作符来避免这种情况的发生。&lt;/p&gt;\n&lt;p&gt;需要注意的是&amp;#xff0c;在C&amp;#43;&amp;#43;中&amp;#xff0c;do-while循环与while循环的区别在于&amp;#xff0c;do-while循环至少会执行一次循环体&amp;#xff0c;即使条件不成立&amp;#xff1b;而while循环可能一次都不执行。在这里&amp;#xff0c;使用do-while循环的主要目的是保证每个指针至少会移动一次&amp;#xff0c;确保程序能够正确地运行。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["C++快速排序算法，请各位看看怎么解决疑问", ["\n#", "include", " <iostream>\nusing namespace std;\n\nconst ", "int", " N=", "1e6", "+", "10", ";\n", "int", " p", "[N]", ";\n", "int", " n=", "0", ";\n\nvoid quick", "_sort(", "int", " ", "p", "[],", "int", " ", "l", ",", "int", " ", "r", ")", "\n{\n    ", "if", "(l>=r)\n    return;\n    ", "int", " x=p", "[", "l", "]", ",i=l-", "1", ",j=r+", "1", ";\n    ", "while", "(i<j)\n    {     \n        ", "do", "(i++);", "while", "(p", "[", "i", "]", "<x); \n        ", "do", "(j--);", "while", "(p", "[", "j", "]", ">x);    \n        ", "if", "(i<j) swap(p", "[", "i", "]", ",p", "[", "j", "]", "); \n        }\n        quick", "_sort(", "p", ",", "l", ",", "j", ")", ";\n        quick", "_sort(", "p", ",", "j", "+1,", "r", ")", ";\n}\n    \n    \n", "int", " main", "()", "\n{\n    printf(", "\"请输入数组的大小：\"", ");\n    scanf(", "\"%d\"", ",&n);\n    printf(", "\"\\n请输入数组中各个数字：\"", ");\n    ", "for", "(", "int", " i=", "0", ";i<n;i++)\nscanf(", "\"%d\"", ",&p", "[", "i", "]", ");\n    \n    quick", "_sort(", "p", ",0,", "n", "-1)", ";\n    \n    printf(", "\"\\n快速排序后的数组为：\"", ");\n    ", "for", "(", "int", " i=", "0", ";i<n;i++)\n    printf(", "\"%d \"", ",p", "[", "i", "]", ");\n    return ", "0", ";\n} \n", "\n", "为啥两个do while 为什么不能>=和<="]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;2的&amp;#xff08;n-1&amp;#xff09;*(n-1)次方&amp;#xff0c;到oj上试试&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["能给我看看这个算法题吗", ["你有一个大小为n×n的矩阵, 你可以在矩阵中自由地填写数字", "\n", "假如将这个矩阵每个位置都填上0或1这两种数字, 不难计算: 共有2的(n×n)次方这么多种填写方案", "\n", "但是小度不喜欢偶数, 它希望矩阵的任意某行或任意某列的数字之和均为奇数", "\n", "那么按上述规则将n×n矩阵用0或1填满, 将有多少种方案去填写呢? 你能帮小度计算出来吗?", "\n", "答案可能很大, 请输出答案对1000000007 (10⁹+7)取模后的结果", "\n", "格式", "输入格式", "输入仅包含一个正整数n (1≤n≤109), 含义如题面所述", "输出格式", "输出一个非负整数, 含义如题面所述"]], "Tag": "算法设计"}
{"Answer": "![图片说明](https://img-ask.csdn.net/upload/201705/10/1494413813_110818.png)", "Konwledge_Point": "算法与数字", "Question": ["大神   看这里  这个算法题    首先输入一个数字T(1 <= T <= 100)", ["首先输入一个数字T(1 <= T <= 100)，表示有T个样例，每个样例输入一个仅包含大写英文字母的符串str，字符串长度用|str|来表示，1 <= |str| <= 100。", "\n输出描述", "\n\n", "输出对应的小写字符串。 ", "\n样例输入", "\n\n", "3", "\nACMERGOGOGO", "\nYOUBADBAD", "\nHAPPYBOY", "\n\n", "样例输出", "\n\n", "acmergogogo", "\nyoubadbad", "\nhappyboy", "\n\n", "提示", "\n\n", "输入一个不包含空格的连续字符串，可以使用scanf()函数或gets()函数"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/cnss/article/details/77628", "Konwledge_Point": "算法与数字", "Question": ["dat格式的数据怎么使用二分查找的形式精确返回一个浮点数所在的序数？", ["dat格式的数据怎么使用二分查找的形式精确返回一个浮点数所在的序数？精确匹配查找的算法是什么，怎么用代码实现？"]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/caiyishuai/category/1151952.html", "Konwledge_Point": "算法与数字", "Question": ["一个有关躲猫猫的算法问题，请教下各位的思路，用C语言", ["Problem Description", "\nAs a cute girl, Kotori likes playing ", "Hide and Seek'' with cats particularly.", "\nUnder the influence of Kotori, many girls and cats are playing", "Hide and Seek'' together.", "\nKoroti shots a photo. The size of this photo is n×m, each pixel of the photo is a character of the lowercase(from ", "a' to", "z').", "\nKotori wants to know how many girls and how many cats are there in the photo.", "\n\n", "We define a girl as -- we choose a point as the start, passing by 4 different connected points continuously, and the four characters are exactly ", "girl'' in the order.", "\nWe define two girls are different if there is at least a point of the two girls are different.", "\nWe define a cat as -- we choose a point as the start, passing by 3 different connected points continuously, and the three characters are exactly", "cat'' in the order.", "\nWe define two cats are different if there is at least a point of the two cats are different.", "\n\n", "Two points are regarded to be connected if and only if they share a common edge.", "\n\n", "Input", "\nThe first line is an integer T which represents the case number.", "\n\n", "As for each case, the first line are two integers n and m, which are the height and the width of the photo.", "\nThen there are n lines followed, and there are m characters of each line, which are the the details of the photo.", "\n\n", "It is guaranteed that:", "\nT is about 50.", "\n1≤n≤1000.", "\n1≤m≤1000.", "\n∑(n×m)≤2×106.", "\n\n", "Output", "\nAs for each case, you need to output a single line.", "\nThere should be 2 integers in the line with a blank between them representing the number of girls and cats respectively.", "\n\n", "Please make sure that there is no extra blank.", "\n\n", "Sample Input", "\n3", "\n1 4", "\ngirl", "\n2 3", "\noto", "\ncat", "\n3 4", "\ngirl", "\nhrlt", "\nhlca", "\n\n", "Sample Output", "\n1 0", "\n0 2", "\n4 1"]], "Tag": "算法设计"}
{"Answer": "稍微总结一下:\r\nJVM一定是有优化 才造成冒泡的逆序反而快了 这一点毫无疑问 这个优化不是系统的 而是JVM的 因为在.net上结果是合理的\r\n\r\n交换的时候的位数对交换没有影响 都是32位int类型 你看到的位数多少是没有意义的 所以是等价的", "Konwledge_Point": "算法与数字", "Question": ["问一个关于排序算法效率的问题。", ["就这段代码，下面有3种简单的排序法：冒泡、选择、插入。", "\n我的问题是，为什么冒泡排序和选择排序在对数组进行逆序排序的时候花的时间比对随机数组进行排序所花的时间少呢？", "\n\n", "[code=\"java\"]import java.util.Random;", "\npublic class ArrayUtil {", "\n\n", "public static void bubbleSort(int[] array){\n    for(int i=0; i<array.length - 1; i++){\n        for(int j=0; j<array.length - i - 1; j++){\n            if(array[j]>array[j + 1]){\n                swap(array, j, j + 1);\n            }\n        }\n    }\n}\n\npublic static void selectionSort(int[] array){\n    for(int i=0; i<array.length - 1; i++){\n        int minIndex = i;\n        for(int j=i; j<array.length - 1; j++){\n            if(array[j + 1] < array[minIndex]){\n                minIndex = j + 1;\n            }\n        }\n        swap(array, i, minIndex);\n    }\n}\n\npublic static void insertionSort(int[] array){\n\n    for(int i=1; i<array.length; i++){\n        if(array[i]<array[i - 1]){\n            int temp = array[i];\n            int j = i - 1;\n            while(j>=0 && temp<array[j]){\n                array[j + 1] = array[j];\n                j--;\n            }\n            array[j + 1] = temp;\n        }\n    }\n}\n\nprivate static void swap(int[] array, int index1, int index2) {\n    int temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}\n\npublic static void main(String[] args){\n    int[] array = new int[10000];\n    generateRandomArray(array);\n    long b = System.currentTimeMillis();\n    ArrayUtil.bubbleSort(array);\n    long e = System.currentTimeMillis();\n    System.out.println(\"冒泡+随机:\" + (e - b)/1000.0);\n\n    generateContradictoryArray(array);\n    b = System.currentTimeMillis();\n    ArrayUtil.bubbleSort(array);\n    e = System.currentTimeMillis();\n    System.out.println(\"冒泡+逆序:\" + (e - b)/1000.0);\n\n    generateRandomArray(array);\n    b = System.currentTimeMillis();\n    ArrayUtil.selectionSort(array);\n    e = System.currentTimeMillis();\n    System.out.println(\"选择+随机:\" + (e - b)/1000.0);\n\n    generateContradictoryArray(array);\n    b = System.currentTimeMillis();\n    ArrayUtil.selectionSort(array);\n    e = System.currentTimeMillis();\n    System.out.println(\"选择+逆序:\" + (e - b)/1000.0);\n\n    generateRandomArray(array);\n    b = System.currentTimeMillis();\n    ArrayUtil.insertionSort(array);\n    e = System.currentTimeMillis();\n    System.out.println(\"插入+随机:\" + (e - b)/1000.0);\n\n    generateContradictoryArray(array);\n    b = System.currentTimeMillis();\n    ArrayUtil.insertionSort(array);\n    e = System.currentTimeMillis();\n    System.out.println(\"插入+逆序:\" + (e - b)/1000.0);\n}\n\nprivate static void generateContradictoryArray(int[] array) {\n    for(int i=0; i<array.length; i++){\n        array[i] = array.length - i;\n    }\n}\n\nprivate static void generateRandomArray(int[] array) {\n    Random random = new Random();\n    for(int i=0; i<array.length; i++){\n        array[i] = random.nextInt();\n    }\n}\n", "\n\n", "}", "\n[/code]", "\n\n", "还有，java.util.ArrayList源代码里ensureCapacity方法中这一句[code=\"java\"]int newCapacity = (oldCapacity * 3)/2 + 1;[/code]为什么用这个*3/2+1？这是什么公式？有什么好处？", "\n[b]问题补充：[/b]", "\n[quote=\"mymGrubby\"]这个是一个在增量处理的问题，有专家统计过1.5倍的增量方式是效率综合最高的。", "\n\n", "增量的方式:", "\n1.newCapacity = 所需要的值。", "\n2.newCapacity = oldCapacity + 特定值。", "\n3.newCapacity = oldCapacity * 倍数(>1)。", "\n\n", "第一种 当前空间效率最好。但ArrayList变化时要频繁申请内存。", "\n\n", "第二种 总体效率比第一种好，但没有第三种好。", "\n\n", "第三种 倍数是关键，倍数太大，当前内存浪费过多，倍数太小要频繁申请内存。以前这个倍数大概是2，但数大量数据证明1.5是最好的倍数，再加1应该有更好的效率(oldCapacity 比较小的时候)。[/quote]", "\n\n", "果然，在JDK1.1中，Vector的源代码是这样：", "\n[code=\"java\"]    private void ensureCapacityHelper(int minCapacity) {", "\n    int oldCapacity = elementData.length;", "\n    Object oldData[] = elementData;", "\n    int newCapacity = (capacityIncrement > 0) ?", "\n        (oldCapacity + capacityIncrement) : (oldCapacity * 2);", "\n    if (newCapacity < minCapacity) {", "\n        newCapacity = minCapacity;", "\n    }", "\n    elementData = new Object[newCapacity];", "\n    System.arraycopy(oldData, 0, elementData, 0, elementCount);", "\n    }[/code]", "\n谢谢[url=\"", "http://mymgrubby.iteye.com/\"]mymGrubby[/url", "]", "\n\n", "还有一个问题就是为什么冒泡排序和选择排序在对数组进行逆序排序的时候花的时间比对随机数组进行排序所花的时间少呢？", "\n[b]问题补充：[/b]", "\n[quote=\"xuyao\"]我来回答一地问题，因为是随即数位数太多了，比较要比较高位，所以开销很大，这样没有可比性。你的逆序最大才1000，所以逆序快，建议生成同等位数的再试试。我反正试过了。[/quote]", "\n首先谢谢你的回答。", "\n我刚把generateRandomArray()方法给改了，改成这样：", "\n    [code=\"java\"]private static void generateRandomArray(int[] array) {", "\n        Random random = new Random();", "\n        for(int i=0; i<array.length; ){", "\n            int item = random.nextInt(10000);", "\n            int j;", "\n            if(i==0) array[i]=item;", "\n            for(j=0; j<i; ){", "\n                if(array[j]==item) break;", "\n                j++;", "\n            }", "\n            if(j==i){", "\n                array[i] = item;", "\n                i++;", "\n            }", "\n        }", "\n    }[/code]", "\n这样保证了生成的随机数组不包含重复的数字，并且是0到10000内的数字。但结果似乎仍然是老样子。", "\n[quote=\"xuyao\"]你的逆序最大才1000[/quote]array.length是10000，第一次循环，i=0，array.length - i应该是10000吧。 :) ", "\n[b]问题补充：[/b]", "\n[quote=\"mymGrubby\"]对冒泡排序和选择排序来说，逆序情况下比随机情况下swap操作要少很多。[/quote]", "\n这个应该是不对的，冒泡排序逆序情况下每一步都要swap操作，是49995000次，随机的时候要少得多，比如我刚运行了一下，只swap了25152355次。而选择排序的swap操作在逆序情况下和随机情况下是一样的，都是9999次。", "\n[b]问题补充：[/b]", "\n[quote=\"RednaxelaFX\"]主要还是因为冒泡排序中除了交换之外，寻找逆序对的额外消耗太大了，无法忽略。如果遍历整个数组只完成了一次交换，而这个数组的长度有很大，那么遍历的过程本身显然就有着无法忽略的开销。 [/quote]", "\n可是似乎逆序的时候同样也要遍历相同次数，我并没有在哪个条件下改变i、j的增量，也没有在哪个条件下跳出某次循环。", "\n寻找逆序对的操作同样存在于对逆序数组排序的整个过程中呀。是吧？ :) "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你是不是要实现矩阵乘的运算&amp;#xff1f;&lt;/p&gt;\n\n&lt;p&gt;算法没错&amp;#xff0c;缺少了D[i][j]的初始化&amp;#xff0c;所以是一堆很大或者很小的数字。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;for (i &amp;#61; 0; i &amp;lt; M; i&amp;#43;&amp;#43;)\n{\n    for (j &amp;#61; 0; j &amp;lt; M; j&amp;#43;&amp;#43;)\n    {\n\tD[i][j] &amp;#61; 0;    //初始化\n\tfor (k &amp;#61; 0; k &amp;lt; M; k&amp;#43;&amp;#43;)\n        {\n            C[j][k] &amp;#61; a[i][k] * b[k][j];\n            D[i][j] &amp;#43;&amp;#61; C[j][k];\n        }\n    }\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;以上&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["想知道我的算法哪里出错了，输出来一堆奇怪的数字。", ["\n标题\n\n\n", "\n", "#include<stdio.h>\n#include<stdlib.h>\n\nint M=3;\nint MatMult(int a[3][3], int b[3][3]);\nint main(void)\n{\t\n\tint a[3][3]={{ 1, 2, 3 },{ 2, 3, 1 },{ 3, 1, 2 }};\n\tint b[3][3]={{ 1, 0, 0 },{ 0, 1, 0 }, { 0, 0, 1 }};\n\t\n\tMatMult(a,b);\t\n } \n \nint MatMult(int a[3][3], int b[3][3])\n{\n\tint C[3][3];\n\tint D[3][3];\n\tint i,j,k;\n\tfor(i=0;i<M;i++)\n   {\n\t  for(j=0;j<M;j++)\n\t  {\n\t    for(k=0;k<M;k++)\n\t\t{\n\t\t\tC[j][k]=a[i][k] * b[k][j];\n\t\t    D[i][j]+=C[j][k];\n\t\t\t}\t\n\t  }\n\t}\t\n\t\n\t\n\tfor(i=0;i<M;i++)\n   {\n\t  for(j=0;j<M;j++)\n\t  {\n\t  \t printf(\"%d\",D[i][j]);\n\t  \t printf(\"\\n\");\n      }\n    }\n\treturn 1;\n\t\n\t \n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;应该是代码逻辑错误&amp;#xff0c;如那里第二个for循环的终止条件要改为小于i&amp;#xff0c;然后判断是否为素数的逻辑也要改一下&amp;#xff0c;修改了一下如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main(void){\n    \n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a,b,c,i,j,t,prime&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,count&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;b);\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;a;i&amp;lt;&amp;#61;b;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;j&amp;lt;i;j&amp;#43;&amp;#43;){\n            t&amp;#61;i%j;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n            &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;i&amp;#61;%d,j&amp;#61;%d,count&amp;#61;%d\\n&amp;#34;&lt;/span&gt;,i,j,count);\n                prime&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(prime&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;){\n            count&amp;#43;&amp;#43;;\n        }\n        \n        prime&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                \n    }\n    \n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,count);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n} \n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["C语言，输入入2个正整数A和B，然后输出它们之间的素数个数（不包含A，B）", ["输入格式:", "输入正整数A和B，空格分隔。", "\n", "输出格式:", "输出两数间素数的个数（不包括这两个数）。如果输入负数没有输出。", "\n", "输入样例:", "在这里给出一组输入。例如：", "\n", "10 20", "输出样例:", "在这里给出相应的输出。例如：", "\n", "4", "\n", "输出结果是0，不知道为什么"]], "Tag": "算法设计"}
{"Answer": "思路就是：按照十进制的加法方法，满36向前进一位，这里有一篇比较详细的实现文章，可以参考：https://www.jianshu.com/p/a98caf83e67b\r\n说句实话，简书的文章排版比这个网站好呢。", "Konwledge_Point": "算法与数字", "Question": ["Java语言高分悬赏：怎么实现36进制计数法的累加，要求能带进位算法的", ["Java语言高分悬赏：怎么实现36进制计数法的累加，要求能带进位算法的"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;能够给出程序并讲解&amp;#xff0c;但是能联系一下吗&amp;#xff0c;不然怎么讲解呢。&lt;br /&gt;至于遗传算法&amp;#xff0c;可以看我写的这篇文章 &lt;a href=\"https://blog.csdn.net/soar3033/article/details/101682243?spm&amp;#61;1001.2014.3001.5502\" id=\"textarea_1655273108970_1655273141617_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;Python实现的遗传算法_soar3033的博客-CSDN博客_用python实现遗传算法&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;遗传算法的Python实现看到CSDN问答区有这么一个问题**“请问如何通过遗传算法得出正确字符串&amp;#xff1f; 40C比如我希望得到最终结果为&amp;#34;Hello World!&amp;#34;。请结合代码说明&amp;#xff0c;最好是用python。”**问题链接: link.针对这个问题&amp;#xff0c;自己写了一个。如下&amp;#xff1a;import randomm&amp;#61;40 #种群数v&amp;#61;0  #子代中符合进化目标的个体的位置索引flag&amp;#61;False  #...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/soar3033/article/details/101682243?spm&amp;#61;1001.2014.3001.5502&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["实例遗传算法的详细求解", ["构建一个遗传算法程序，书中已给出详细步骤，但由于基础知识的欠缺，不能完全理解每一步的原因。希望得到重点部分的解释和与结果一样的程序，以及最后如何在excel表格中现实图表的显示。最好能够具体说明。", "找到由30件行李组成的背包问题的最优解。", "然而，knapsack问题是以下问题（图3.15）。", "假设现在有几件行李。 每件行李都被赋予了一定的重量（重量）和价格（价值）。 你选择其中一些行李，并将其装入背包。", "并将它们装入背包。 由于背包有重量限制，行李的总重量不得超过一定重量。 在这些条件下，我们寻找一种行李的组合，使总价格尽可能高。", "\n", "\n", "(1)每件行李都有一定的重量(weight)和价格(value)", "(2)选择其中一些，将其装入有重量限制的背包中，并找到使总价值最大化的组合。", "图3.15 Knapsack问题", "首先，考虑一下染色体是如何表示的。 在背包问题中，直接的方法是将哪些行李要装在背包中表示为0/1。 因此，按行李的件数排列0/1，把要放进背包的行李件数对应的位置作为1，把不放进背包的行李件数对应的位置作为0。 例如，在图3.15中，假设只有五件行李中的第二件和第三件被装在背包里。 在这种情况下，染色体的表示方法看起来像 \"01100\"。", "染色体的估值被计算为装在编织袋中的价值之和。 然而，如果超过了背包的重量限制，该值将被设置为零。 例如，假设在图3.15中，背包的重量限制为100。 在这种情况下，对于将第二和第三件行李装入背包的染色体 \"01100\"，其数值计算如下", "染色体 \"01100\" 価値", "82+85=167", "重量", "39+9=48", "\n", "总重量值为48，总重量小于或等于重量限制，所以总数值167，是染色体的原值。", "相反，如果我们考虑，例如，图315中所有的行李都装在一个背包里的情况，染色体的表达是1。 以同样的方式思考价值和重量，染色体 \"1111 \"有以下价值27+82+85+71+91=356", "重量65+39+9+72+87=272", "染色体的总价值很大，但染色体的总重量超过了100的重量限制，所以染色体的价值为0。", "现在我们已经决定如何表示和评估染色体，现在我们可以根据前面介绍的程序建立遗传算法程序。 首先，考虑数据结构。 遗传算法在一个染色体群体上运行。 因此，让我们在C语言中把染色体群表示为一个变量。", "染色体被表示为0/1的序列，所以一条染色体可以被表示为一个一维数组。 其中的几个走到一起，形成一个染色体群体。 因此，一个染色体群体用一个二维数组表示，如下所示。", "int pool [POOLSIZE] [N]", "int ngpool [POOLSIZE * 2]", "其中，符号常数POOLSIZE给出了每一代染色体组的数量；pool数组保存特定一代的染色体，而ngpool数组保存在遗传操作中作为下一代染色体的候选个体。 ngpool序列中的元素数量是pool序列的两倍。 这样做是为了给后代创造更多的染色体，通过选择的遗传操作可以从中选择合适的染色体。", "在编织袋问题中，必须保留每个包裹的重量和价值。 这里，一个名为PARCEL的二维数组被用来保存重量和数值。 这里，第一个下标给出了包裹之间的区别，第二个下标给出了重量和价值之间的区别。 在下文中，第二个下标如果是0，则被视为代表权重，如果是1，则代表价值。 另外，符号常数N是地块的数量。", "int parcel [N][2]; /", "行李 ", "/", "现在让我们考虑如何根据一个程序来描述一个具体的过程。 首先，在处理步骤（1）中，通过随机数对染色体群进行初始化，具体操作如下。", "int i, j;/", "用于重复的控制变量 ", "/", "for (i = 0; i < POOLSIZE; ++i)for (j = 0; j < N; ++j)pool [i] [j] = rndn (2);", "这里，函数rndn是一个返回随机数的函数，该随机数小于作为参数给定的数字，并且大于或等于0。 在这里，染色体种群是通过随机生成0或1来初始化的。", "接下来是处理步骤（2），使用for语句将以下过程重复适当次数。", "首先，（2-1），交叉过程，首先创建一个轮盘，选择父母。", "具体来说，一个数组轮盘被创建如下，连同评价的总值totalfitness一起被计算。 其中函数evalfit计算作为参数的染色体的评估值。", "/", " 创建轮盘", "/", "for (i = 0; i < POOLSIZE; ++i)", "roulette[i] = evalfit (pool [i]);", "/", " 计算评估的总和", "/ for (i = 0; i < POOLSIZE; ++i)", "totalfitness += roulette [i];", "利用这些结果，步骤（2-1-1）中的父本选择被写成如下", "做(/", "选择父母", "/)", "mama=selectP（轮盘赌，Totalfitness）。", "papa = selectp（轮盘赌，totalfitness）。", "在这里，函数selectp通过轮盘选择来选择一个父本。", "上述做法还可以防止同一染色体被选择两次，这将使交叉运算无效。", "上述做法可以防止同一染色体被选择两次，这将使交叉运算无效。", "接下来，步骤（2-1-2）中的一点交叉等被实施，如下所示。这里，m和PD序列是父染色体，而c1和c2序列持有子染色体。", "/* 交叉点的确定 ", "/cp = rndn (N)。", "/", " 复制前半部分 */", "for (j = 0; j < cp; ++j)", "c1 [j] = m[j]。", "c2 [j] = P[j]。", "/*复制后半部分的内容 */", "for (; j< N; ++j)[c2 [j] = m[j];", "c1 [j] = p[j]。", "然后，步骤（2-2）中的突变过程按以下方式实施。下面的if语句对应于步骤（2-2-1），最后的赋值语句对应于（2-2-2）。注意，notval0函数将0和1倒置。", "for (i = 0; i < POOLSIZE * 2; ++i)", "for (j = 0; j < N; ++j)", "如果((double) rndn (100) / 100.0 <= MRATE)", "ngpool [i] [j] = notval（ngpool [i] [j]）。", "上述过程以程序的形式实现，其模块结构如图3.16所示。 该程序应命名为kpga.c。", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "https://www.zybang.com/question/49df45086e790e5f016e3b1d3016f25a.html", "Konwledge_Point": "算法与数字", "Question": ["计算第k大的数字，在序列中，采用一次遍历的算法，C语言", ["Problem Description", "\nNow is spring ! The sunshine is warm , the flowers is coming out . How lovely it is! So my classmates and I want to go out for a spring-outing.", "\n\n", "But we all select courses ourselves. We don't have classes at the same time.Now our monitor has a big trouble in arranging the time of the spring-outing.", "\n\n", "Can you help him?", "\n\n", "I will give you our courses information and the time of the spring-outing.You just need to tell me that who can't go with us. ", "\n\n", "Input", "\nThe first line contains an integer CA which indicates the number of test cases.", "\nThen CA cases follow.", "\nEach case contains two parts,the students' courses information and the query.", "\n\n", "In the first part ,first there is an integer N（N<200） which means the number of the student,and then comes the N students’ courses information.", "\nA student's courses information is in this format:", "\n\n", "line1: name K", "\nline2: day1 b1 e1", "\n.....", "\nlineK+1: dayK bK eK", "\n\n", "The first line of a student's courses infomation contains his name(less than 20 characters and in lowercase) and the number(K,K<1000) of his courses . Then next K lines describe his courses. Each Line contain three integers indicate the day of a week( 1 <= day <= 7 means Monday to Sunday ), the begin time and the end time of the course.", "\nTo make the problem easier,the begin time and the end time will be in the range from 1 to 11 .(Because in HDU,there is 11 classes one day).", "\n\n", "In the query part , first there is an integer Q which means the query number,and then Q lines follow.", "\nA query contains three integers which means the day ,the begin time and the end time of the spring-outing.And the time is described as the courses.", "\nNotice,everyone may have more than one course at the same time for some special reasons.", "\n\n", "Output", "\nFor each query , just print the names of the students who can't go out for a spring-outing in a line in lexicographic order.", "\nPlease separate two names with a blank.", "\nIf all of the students have time to go , just print \"None\" in a line.", "\n\n", "Sample Input", "\n1", "\n3", "\nlinle 3", "\n1 1 2", "\n2 3 4", "\n3 8 10", "\nlaili 1", "\n4 1 4", "\nxhd 2", "\n1 2 4", "\n4 5 6", "\n3", "\n1 2 2", "\n4 4 5", "\n5 1 2", "\n\n", "Sample Output", "\nlinle xhd", "\nlaili xhd", "\nNone"]], "Tag": "算法设计"}
{"Answer": "```\r\n #include&lt;iostream&gt;\r\n#include&lt;cstring&gt;\r\nusing namespace std;\r\nint x=0; //记录最大值 \r\nint flag[43]; //辅助数组由题可知10 10 10 9 10 10 8 10 10这样最大的数据所能走的最大距离为43所有下标43够了\r\nint N[]={0,1,2,3,4,5,6,7,8}; //辅助九个动作全排列数组\r\nstruct \r\n{\r\nint pos; //此人当前所在的位置\r\nint flag; //如果flag为0代表没被举 1代表被举了\r\nint juren;\r\nint mvflag;     //移动标志位如果没移动则为0 移动了则为1\r\nint mvmax;  //移动的最大步数\r\nint thrflag;  //丢标志位丢过为1没丢过则为0\r\nint thrmax;  //丢的最大距离 \r\n}People[3];   //三个人 \r\nvoid swap(int a,int b)\r\n{\r\nint temp=N[a];\r\nN[a]=N[b];\r\nN[b]=temp;\r\n}\r\nvoid judge(int a,int b,int pos)\r\n{\r\nswitch(People[0].thrflag+People[1].thrflag+People[2].thrflag) //0代表第一次丢人的人不用去判断走.1代表第二次丢 2代表第三次丢 \r\n{\r\ncase 1: if(People[a].mvflag==0)//如果背人的这个没走过且是第二次丢人\r\n x=x&gt;pos+People[a].mvmax+1+People[b].thrmax?x:pos+People[a].mvmax+1+People[b].thrmax;  //这里有个比较巧的事情 \r\nbreak;\r\ncase 2: if(People[a].mvflag==0)//如果背人的这个没走过且是第三次丢人 \r\nif(People[a].mvmax&gt;People[a].thrmax)\r\n x=x&gt;pos+People[a].mvmax?x:pos+People[a].mvmax; \r\nif(People[b].mvflag==0)//如果被扔的人还能走则计算一下最远距离\r\nx=x&gt;pos+People[a].thrmax+People[b].mvmax?x:pos+People[a].thrmax+People[b].mvmax;\r\nbreak;\r\n}\r\n}\r\nvoid Permutations(int n)\r\n{\r\nfor(int i=n;i&lt;9;i++)\r\n{\r\nswap(i,n);\r\nint p=N[n]/3; \r\n//当前动作的人0-2为第一个人的动作一次类推\r\nint pos=People[p].pos;//此人当前所在位置 \r\nint j;\r\nswitch(N[n]%3)//根据动作的不同选择该人需要做的事 当前动作？0为移动1为举2为扔\r\n{\r\ncase 0: \r\nif(People[p].flag||People[p].juren)break; \r\n//如果被举或者举了人都不能移动直接退出\r\nx=x&gt;pos+People[p].mvmax?x:pos+People[p].mvmax;//当前位置加上移动最大值如果大于原值则替换\r\nfor(j=1;j&lt;=People[p].mvmax;j++)//逐步往后移动 \r\n{\r\nif(flag[pos+j]==0)//如果可以移动才移动 \r\n{\r\nflag[pos]=0;  //原位置清0\r\nflag[pos+j]=p+1;//下一位置为该人下标+1 \r\nPeople[p].pos=pos+j; \r\n//此人当前位置变为移动后的位置 \r\nPeople[p].mvflag=1; \r\n//1代表移动过了\r\nPermutations(n+1); \r\nPeople[p].mvflag=0;//所有状态回朔\r\nflag[pos+j]=0; \r\nflag[pos]=p+1; \r\nPeople[p].pos=pos; \r\n \r\n}\r\n} \r\nfor(j=1;j&lt;=People[p].mvmax;j++)//逐步往前移动  \r\n{\r\nif(pos-j&gt;0&amp;&amp;flag[pos-j]==0) //可以移动且大于0\r\n{\r\nflag[pos]=0;  //原位置清0\r\nflag[pos-j]=p+1;//下一位置为该人下标 \r\nPeople[p].pos=pos-j; \r\n//此人当前位置变为移动后的位置 \r\nPeople[p].mvflag=1; \r\n//1代表移动过了\r\nPermutations(n+1); \r\nPeople[p].mvflag=0; \r\nflag[pos-j]=0;//所有状态回朔 \r\nflag[pos]=p+1; \r\nPeople[p].pos=pos; \r\n \r\n} \r\n}\r\nbreak;\r\ncase 1:\r\nif(People[p].flag==1)break;   \r\n//如果此人被举则不能举别人直接退出因为是全排列计算不会出现此人举过再举\r\nif(flag[pos+1]!=0)//后面有人则先举后面的 \r\n{\r\nPeople[p].juren=flag[pos+1];  //举了这个人\r\nPeople[flag[pos+1]-1].flag=1 ;//被举人状态变为被举 \r\nflag[pos+1]=0;//后面的人被举了之后位置清0\r\nPermutations(n+1);\r\nflag[pos+1]=People[p].juren;//回朔\r\nPeople[p].juren=0;   \r\nPeople[flag[pos+1]-1].flag=0 ;\r\nPeople[flag[pos+1]-1].pos=pos+1; //位置复位 \r\n} \r\nif(flag[pos-1]!=0&amp;&amp;pos-1&gt;0)//原理同上举后面的人 \r\n{\r\nPeople[p].juren=flag[pos-1];  //举了这个人\r\nPeople[flag[pos-1]-1].flag=1 ;//被举人状态变为被举 \r\nflag[pos-1]=0;//后面的人被举了之后位置清0\r\nPermutations(n+1);\r\nflag[pos-1]=People[p].juren;//回朔\r\nPeople[p].juren=0;   \r\nPeople[flag[pos-1]-1].flag=0 ;\r\nPeople[flag[pos-1]-1].pos=pos-1; //位置复位 \r\n}\r\nbreak;\r\ncase 2:\r\nif(People[p].juren==0||People[p].flag==1)break; //如果没举人或者被别人举了则不能扔直接退出 \r\nx=x&gt;pos+People[p].thrmax?x:pos+People[p].thrmax;\r\nint juren=People[p].juren-1;//-1之后 才是此人操作的下标 \r\njudge(p,juren,pos);  //这个函数是整个裁剪的关键部分，处理之后可以让丢过人的人不用再走而得到最大距离\r\nfor(j=1;j&lt;=People[p].thrmax;j++)\r\n{\r\nif(flag[pos+j]==0)//丢原理和移动类似 \r\n{\r\nPeople[juren].pos=pos+j;  //被丢人的位置变为丢到的位置 这里有一个地方没有清0就是背人标记位，从而减少了不必要的移动。\r\nPeople[juren].flag=0;     //被举状态复位\r\nflag[pos+j]=juren+1; //标记位置信息\r\nPeople[p].thrflag=1; //状态变为扔过人 \r\nPermutations(n+1); \r\nPeople[p].thrflag=0; //回朔 \r\nPeople[juren].flag=1;     //被举状态复位\r\nflag[pos+j]=0; //标记位置信息\r\n}\r\n}\r\nfor(j=1;j&lt;=People[p].thrmax;j++)\r\n{\r\nif(flag[pos-j]==0&amp;&amp;pos-j&gt;0)//丢原理和移动类似 \r\n{\r\nPeople[juren].pos=pos-j;  //被丢人的位置变为丢到的位置\r\nPeople[juren].flag=0;     //被举状态复位\r\nflag[pos-j]=juren+1; //标记位置信息\r\nPeople[p].thrflag=1; \r\nPermutations(n+1); \r\nPeople[p].thrflag=0; \r\n //回朔 \r\nPeople[juren].flag=1;     //被举状态复位\r\nflag[pos-j]=0; //标记位置信息\r\n}\r\n}\r\nbreak;\r\n} \r\nswap(i,n); //回朔 \r\n}\r\n}\r\nint main()\r\n{\r\nint i,j;\r\nx=0;\r\nmemset(flag,0,sizeof(flag));\r\nmemset(People,0,sizeof(People));\r\nfor(i=0;i&lt;3;i++)\r\n{\r\ncin&gt;&gt;People[i].pos&gt;&gt;People[i].mvmax&gt;&gt;People[i].thrmax; //输入位置信息以及丢和扔的最大距离\r\nflag[People[i].pos]=i+1; \r\n//将位置绑定为当前人 因为0代表没人所以人下标加1 \r\n}\r\nPermutations(0);//9个动作递归全排列计算\r\ncout&lt;&lt;x&lt;&lt;endl;\r\nreturn 0;\r\n}\r\n```", "Konwledge_Point": "算法与数字", "Question": ["蓝桥杯-算法训练 Lift and Throw 求教各位大牛，谢谢各位", ["问题描述", "\n　　给定一条标有整点(1, 2, 3, ...)的射线. 定义两个点之间的距离为其下标之差的绝对值.", "\n　　Laharl, Etna, Flonne一开始在这条射线上不同的三个点, 他们希望其中某个人能够到达下标最大的点.", "\n　　每个角色只能进行下面的3种操作, 且每种操作每人不能进行超过一次.", "\n\n", "　　1.移动一定的距离", "\n　　2.把另一个角色高举过头", "\n　　3.将举在头上的角色扔出一段距离", "\n\n", "　　每个角色有一个movement range参数, 他们只能移动到没有人的位置, 并且起点和终点的距离不超过movement range.", "\n　　如果角色A和另一个角色B距离为1, 并且角色B没有被别的角色举起, 那么A就能举起B. 同时, B会移动到A的位置,B原来所占的位置变为没有人的位置", "\n\n", ". 被举起的角色不能进行任何操作, 举起别人的角色不能移动.同时, 每个角色还有一个throwing range参数, 即他能把举起的角色扔出的最远的距离. ", "\n\n", "注意, 一个角色只能被扔到没有别的角色占据的位置. 我们认为一个角色举起另一个同样举起一个角色的角色是允许的. 这种情况下会出现3个人在同一", "\n\n", "个位置的情况. 根据前面的描述, 这种情况下上面的两个角色不能进行任何操作, 而最下面的角色可以同时扔出上面的两个角色. 你的任务是计算这些角", "\n\n", "色能够到达的位置的最大下标, 即最大的数字x, 使得存在一个角色能够到达x.", "\n输入格式", "\n　　输入共三行, 分别为Laharl, Etna, Floone的信息.", "\n　　每一行有且仅有3个整数, 描述对应角色的初始位置, movement range, throwing range.", "\n　　数据保证3个角色的初始位置两两不相同且所有的数字都在1到10之间.", "\n输出格式", "\n　　仅有1个整数, 即Laharl, Etna, Flonne之一能到达的最大距离.", "\n样例输入", "\n9 3 3", "\n4 3 1", "\n2 3 3", "\n样例输出", "\n15", "\n样例说明", "\n　　一开始Laharl在位置9, Etna在位置4, Flonne在位置2.", "\n　　首先, Laharl移动到6.", "\n　　然后Flonne移动到位置5并且举起Etna.", "\n　　Laharl举起Flonne将其扔到位置9.", "\n　　Flonne把Etna扔到位置12.", "\n　　Etna移动到位置15.", "\n    原题地址：", "http://lx.lanqiao.org/problem.page?gpid=T356", "\n    希望各位能解答一下，最好能提供一下思路和源代码，感激不尽"]], "Tag": "算法设计"}
{"Answer": ";=================================================================\r\nCODE    SEGMENT PUBLIC USE16 'CODE'\r\n\tASSUME CS:CODE, DS:DATA,ES:DATA,SS:STACK\r\nSHOW_MSG MACRO msg\r\n\tpush ax\r\n\tpush dx\r\n\tmov dx,offset msg\r\n\tmov ah,9\r\n\tint 21h\r\n\tpop dx\r\n\tpop ax\r\n\tENDM\r\nSHOW_ASC MACRO\r\n\tpush ax\r\n\tmov ah,2\r\n\tint 21h\r\n\tpop ax\r\n\tENDM\r\n\r\nShowDat10 proc\r\n\tpush ax\r\n\tpush bx\r\n\tpush cx\r\n\tpush dx\r\n\tpush si\r\n\txor bx,bx\r\n\tmov si,offset DatAsc\r\n\taam\r\n\tmov bl,ah\r\n\tmov dl,[si+bx]\r\n\tSHOW_ASC\r\n\tmov bl,al\r\n\tmov dl,[si+bx]\r\n\tSHOW_ASC\r\n\tpop si\r\n\tpop dx\r\n\tpop cx\r\n\tpop bx\r\n\tpop ax\r\n\tretn\r\nShowDat10 Endp\r\nSTART:\r\n\tmov ax,STACK\r\n\tmov ss,ax\r\n\tmov sp,offset StackE\r\n\tmov ax,DATA\r\n\tmov ds,ax\r\n\tSHOW_MSG msg1\r\n\tmov si,offset dat\r\n\tmov cx,10\r\n\txor bx,bx\r\n\tcld\r\nLocLoop:\r\n\tlodsb\r\n\tcmp al,bl\r\n\tjb NotG\r\n\tmov bl,al\r\nNotG:\r\n\tloop LocLoop\r\n\tmov ax,bx\r\n\tcall ShowDat10\r\n\tSHOW_MSG msgCrLf\r\n\tmov ah,4ch\r\n\tint 21h\r\nCODE ENDS\r\n;============================================================================\r\nSTACK   SEGMENT USE16 'STACK'\r\n        DB 200h dup ('-STACK- ')\r\nStackE  equ $\r\nSTACK   ENDS\r\n;============================================================================\r\nDATA   SEGMENT DWORD PUBLIC USE16 'DATA'\r\nDatAsc  db '0123456789ABCDEF'\r\ndat     DB 6,3,11,66,34,67,31,33,89,45\r\nmsg1    db 'MAX IS $'\r\nmsgCrLf db 0dh,0ah,24h\r\nDATA    ENDS\r\n\tEND START", "Konwledge_Point": "算法与数字", "Question": ["用8086汇编语言找出10个字节无符号数中的最大数，并进行显示输出。", ["要求：", "\n数据段提前存好十个无符号数。", "\n得到的最大数也保存在数据段。", "\n利用系统功能调用进行结果的输出。", "\n使用分支和循环程序设计实现。", "\n尽量使用子程序或者宏的程序设计方法使程序整体简洁。", "\n最好写出算法"]], "Tag": "算法设计"}
{"Answer": "没人知道吗，有这么难吗？？？", "Konwledge_Point": "算法与数字", "Question": ["java 两个算法题,帮忙给解答下", ["1、有两百万个正整数 存储在int[] num数组中,而且这些正整数是排序好的,要求用最快的方式找出其中重复的一个数字.", "\n\n", "2、有一个数组中有1000个整数,输出重复次数最多的前三个数及出现次数"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;你可以一行输入7个数字&amp;#xff0c;按照空格分隔&lt;/li&gt;&lt;li&gt;或者分7行输入&amp;#xff0c;每行一个数字&lt;/li&gt;&lt;/ul&gt;\n&lt;p&gt;最后你需要将要查询的数输入进去&amp;#xff0c;再按回车&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["这个出现调试台之后怎么输入？", ["N个有序整数已放在一维数组中。采用函数利用折半查找算法查找整数m在数组中的位置。若找到返回其下标值；反之，返回-1。编写主函数实现函数调用。", "\n", "\n#include<stdio.h>\n", "int", " fun(", "int", " a[], ", "int", " h)\n{\n    ", "int", " ", "left", " = ", "0", ", ", "right", " = ", "6", ", ", "mid", " = (", "left", " + ", "right", ") / ", "2", ";\n    while (", "left", " <= ", "right", ")\n    {\n        ", "if", " (a[", "mid", "] == h)\n        {\n            return ", "mid", ";\n        }\n        else ", "if", " (a[", "mid", "] < h)\n        {\n            ", "left", " = ", "mid", " + ", "1", ";\n            ", "mid", " = (", "left", " + ", "right", ") / ", "2", ";\n        }\n        else ", "if", " (a[", "mid", "] > h)\n        {\n            ", "right", " = ", "mid", " - ", "1", ";\n            ", "mid", " = (", "left", " + ", "right", ") / ", "2", ";\n        }\n    }\n    ", "if", " (", "left", " > ", "right", ") return -", "1", ";\n}\n", "int", " main()\n{\n    ", "int", " a[", "100", "], i = ", "0", ", s, h;\n    printf(", "\"请按顺序输入一串数字：\"", ");\n    for (i = ", "0", "; i < ", "7", "; i++)\n    {\n        scanf_s(", "\"%d\"", ", &a[i]);\n    }\n    printf(", "\"请输入目标数字：\"", ");\n    scanf_s(", "\"%d\"", ", &h);\n    s = fun(a, h);\n    printf(", "\"%d\"", ", s);\n    return ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "```\r\n  if (c_plus &gt; t){\r\n            cout &lt;&lt; \"Oh，my god!\" &lt;&lt; endl;\r\n            continue;\r\n        }\r\n```\r\n\r\n\r\n\r\n```\r\n  if(sum &gt; t) {\r\n        printf(\"Oh,my god!\\n\");\r\n        return;\r\n    }\r\n```", "Konwledge_Point": "算法与数字", "Question": ["一道算法水题，但是不知道问题在哪，求解", ["原题：", "\n\n", "\n", "   JH苦练10年，终于成为了一个神箭手，在下山之前，大师兄YZ不放心，想考验他，只给他一定时间t，同时给他n支箭，最终根据他的表现，考虑他是否能下山。\n   对于每发一次箭，YZ给他4种成绩（优、良、中、差），JH有三种拉弓以及瞄准时间a ,b，c（a>=b>=c）分别能拿优，良，中等级，如果不拉弓不瞄（直接射），只能拿差（不能中靶）了。\n   现在JH想知道，在保证自己弹无虚发（不获得差）的情况下，最多能拿多少个优。\n   如果JH不能做到弹无虚发，输出Oh，my god! \n", "\n\n", "Input", "\n\n", "   输入数据包含T组:\n   对于每组数据，第一行为一个整数n，表示总共有n支箭。\n", "\n\n", "（0<n<=1000）", "\n       之后n行，每行包含三个数字a，b，c，分别表示拿对应等级所需要花的时间。", "\n       (0<c<=b<=a<=1000)", "\n之后一个数字t，表示JH有考核总时间为t", "\n       (0<=t<=1e6)", "\n\n", "Output", "\n\n", "对于每组输入，如果JH能箭无虚发，则输出一个数字x，表示最多能拿到的优的数量。如果不能，则输出Oh，my god!", "\n\n", "Sample Input", "\n\n", "3", "\n1", "\n3 2 1", "\n1", "\n2", "\n3 2 1", "\n3 2 1", "\n4", "\n2", "\n3 2 1", "\n3 2 1", "\n1", "\n\n", "Sample Output", "\n\n", "0", "\n1", "\nOh,my god!", "\n", "\n\n", "代码1:\n", "\n\n", " #include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <list>\n#include <set>\n#include <queue>\n#include <stack>\n#include <map>\nusing namespace std;\n//DEBUG MODE\n#define debug 0\n//循环\n#define REP(n) for(int o=0;o<n;o++)\nconst int maxn = 1005;\nstruct Time {\n    int PTime,MTime;\n    int delta;\n    Time(int x=0,int y=0) {\n        PTime = x;\n        MTime = y;\n        delta = x - y;\n    }\n    bool operator < (const Time &rhs)const {\n        return delta > rhs.delta;\n    }\n};\nTime UseTime[maxn];\nvoid Do() {\n    int t,n,UT=0;\n    scanf(\"%d\",&n);\n    int sum = 0;\n    REP(n) {\n        int a,c;\n        scanf(\"%d%*d%d\",&a,&c);\n        sum += c;\n        UT += a;\n        UseTime[o] = Time(a,c);\n    }\n    scanf(\"%d\",&t);\n    if(sum > t) {\n        printf(\"Oh,my god!\\n\");\n        return;\n    }\n    sort(UseTime,UseTime + n);\n    int ans = n;\n    for(int i = 0;UT > t;i++) {\n        ans--;\n        UT -= UseTime[i].delta;\n    }\n    printf(\"%d\\n\",ans);\n}\nint main() {\n    int T;\n    scanf(\"%d\",&T);\n    while(T--)\n        Do();\n    return 0;\n}\n", "\n\n", "代码2：", "\n\n", "#include <algorithm>\n#include <iostream>\nusing namespace std;\n\nstruct TimeNode {\n    int a, c, delta;\n    TimeNode(int A = 0, int C = 0){\n        a = A;\n        c = C;\n        delta = a-c;\n    }\n    bool operator < (const TimeNode &rhs) const {\n        return delta > rhs.delta;\n    }\n};\nint main(void){\n    TimeNode times[1005];\n    int T = 0;\n    cin >> T;\n    while (T--){\n        int n = 0, t = 0, a = 0, b = 0, c = 0, a_plus = 0, c_plus = 0;\n        cin >> n;\n        for (int count = 0; count < n; count++){\n            cin >> a >> b >> c;\n            times[count] = TimeNode(a,c);\n            a_plus += a;\n            c_plus += c;\n        }\n        cin >> t;\n        if (c_plus > t){\n            cout << \"Oh，my god!\" << endl;\n            continue;\n        }\n        sort(times, times+n);\n        for (int count = 0; a_plus > t; count++){\n            n--;\n            a_plus -= times[count].delta;\n        }\n        cout << n << endl;\n    }\n    return 0;\n}\n\n", "\n\n", "程序1正确但是程序2无法通过，但是我觉得两个程序的语义是一样的，求解。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;Private Sub Command1_Click()\nDim i As Integer, j As Integer, t As Integer, a(1 To 10) As Integer\nPrint &amp;#34;原始数据如下&amp;#34;\nFor i &amp;#61; 1 To 10\na(i) &amp;#61; Int(Rnd * 10)\nPrint a(i);\nNext i\nPrint &amp;#34;按从小到大排列输出&amp;#xff1a;&amp;#34;\nFor i &amp;#61; 1 To 9\nFor j &amp;#61; i &amp;#43; 1 To 10\nIf a(i) &amp;gt; a(j) Then t &amp;#61; a(i): a(i) &amp;#61; a(j): a(j) &amp;#61; t\nNext j\nNext i\nFor i &amp;#61; 1 To 10\nPrint a(i);\nNext\nEnd Sub\n通用过程\nPublic Sub swap_1()\nPrint &amp;#34;按从小到大排列输出&amp;#xff1a;&amp;#34;\nFor i &amp;#61; 1 To 9\nFor j &amp;#61; i &amp;#43; 1 To 10\nIf a(i) &amp;gt; a(j) Then t &amp;#61; a(i): a(i) &amp;#61; a(j): a(j) &amp;#61; t\nNext j\nNext i\nFor i &amp;#61; 1 To 10\nPrint a(i);\nEnd Sub&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["VB冒泡/选择排序程序", ["说实话是vb作业 实在是不会😭\n实验题目: 通过过程/函数调用实现数组的排序与输出输入无序的多个整数，整数与整数间用逗号隔开。要求分别用冒泡和简单选择进行排序。输出冒泡、简单选择排序的每一趟排序结果\n实验要求:要求升序排序要求使用GroupBox控件，区分两种排序算法输出结果排序操作、打印操作要求分别封装在独立的过程/函数中要求有必要的判断条件，保证程序的健壮性\n\n其实两种排序我能明白..但是示例是有一个textbox 在里面输入数字用逗号分隔 怎么把里面的每个数字连起来变成数组呢..."]], "Tag": "算法设计"}
{"Answer": "https://wenku.baidu.com/view/a9e63b7f7e21af45b307a8bd.html", "Konwledge_Point": "算法与数字", "Question": ["比赛难度                         ", ["Problem Description", "\n　　最近，小明出了一些ACM编程题，决定在HDOJ举行一场公开赛。", "\n　　假设题目的数量一共是n道，这些题目的难度被评级为一个不超过1000的非负整数，并且一场比赛至少需要一个题，而这场比赛的难度，就是所有题目的难度之和，同时，我们认为一场比赛与本场题目的顺序无关，而且题目也不会重复。", "\n　　显而易见，很容易得到如下信息：", "\n　　假设比赛只用1个题目，有n种方案；", "\n　　假设比赛使用2个题目，有(n-1)*n/2种方案；", "\n　　假设比赛使用3个题目，有(n-2)*(n-1)*n/6种方案；", "\n　　............", "\n　　假设比赛使用全部的n个题目，此时方案只有1种。", "\n　　", "\n　　经过简单估算，小明发现总方案数几乎是一个天文数字！", "\n　　为了简化问题，现在小明只想知道在所有的方案里面第m小的方案，它的比赛难度是多少呢？", "\n\n", "Input", "\n输入数据的第一行为一个整数T（1 <= T <= 20），表示有T组测试数据。", "\n每组测试数据第一行为两个整数n, m（0 < n, m <= 10000），表示现在有n个题目，现在要求第m小的方案的比赛难度。接下来第二行有n个数字，分别表示这n个题目的难度值。", "\n\n", "Output", "\n对于每组测试数据，输出一行\"Case #c: ans\"（不包含引号），ans 表示要求的第m小的比赛难度，输入数据保证存在第m小的方案，具体参见样例。", "\n\n", "Sample Input", "\n2", "\n5 6", "\n1 1 1 1 1", "\n5 25", "\n1 2 3 4 5", "\n\n", "Sample Output", "\nCase #1: 2", "\nCase #2: 11"]], "Tag": "算法设计"}
{"Answer": "#include &lt;stdio.h&gt;\r\n#include &lt;string.h&gt;\r\nint main()\r\n{  \r\n     int n, i, j;\r\n     char a[10];\r\n     for(n = 123; n &lt; 330; n++)\r\n     {\r\n         sprintf(a, \"%d\", n * 1000000 + n * 2 * 1000 + n * 3);\r\n         for(j = 0, i = '1'; i &lt;= '9'; memchr(a, i++, 9) &amp;&amp; j++);\r\n         if (j == 9)\r\n             printf(\"%d %d %d \\n\", n, n * 2, n * 3);\r\n       }\r\n return 0;\r\n }\r\n\r\n ![图片说明](https://img-ask.csdn.net/upload/201809/22/1537579761_80792.jpg)", "Konwledge_Point": "算法与数字", "Question": ["大神能教教下面这道题吗。。", ["用1，2，3，…，9组成3个三位数abc，def和ghi，每个数字恰好使用一次，要 求abc：def：ghi＝1：2：3。按照“abc def ghi”的格式输出所有解，每行一个解。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;把solution改成x2就行拉&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;syms&lt;/span&gt; x2\n&lt;span class=\"hljs-attribute\"&gt;F&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;\n&lt;span class=\"hljs-attribute\"&gt;B&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;;\n&lt;span class=\"hljs-attribute\"&gt;f1&lt;/span&gt;&amp;#61;(x2/(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#43;x2))*(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;-x2)*(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;-((-&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&amp;#43;F&amp;#43;&lt;span class=\"hljs-number\"&gt;120&lt;/span&gt;*(x2/(x2&amp;#43;&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;)))*((F*(B-x2))/(F/&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;))/F/&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;))*(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;-(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#43;F/&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;02&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;*(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;/(F*x2))));\n&lt;span class=\"hljs-attribute\"&gt;x2&lt;/span&gt;&amp;#61;vpasolve(f1,x2,[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3000&lt;/span&gt;]);\n&lt;span class=\"hljs-attribute\"&gt;x1&lt;/span&gt;&amp;#61;(F*(B-x2))./(&lt;span class=\"hljs-number\"&gt;123&lt;/span&gt;&amp;#43;F&amp;#43;&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;*x2);\n&lt;span class=\"hljs-attribute\"&gt;x3&lt;/span&gt;&amp;#61;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#43;F&amp;#43;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;*x2).*((F*(B-x2))./(F&amp;#43;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;*x2)); \n&lt;span class=\"hljs-attribute\"&gt;x4&lt;/span&gt;&amp;#61;(-&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&amp;#43;F*&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;*(x2./(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;*x2&amp;#43;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;))).*((&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;&amp;#43;F/&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;*(x2./(x2&amp;#43;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)))); \n&lt;span class=\"hljs-attribute\"&gt;x5&lt;/span&gt;&amp;#61;(-&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&amp;#43;F&amp;#43;(x2./(x2&amp;#43;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;))).*(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;/F&amp;#43;&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;./(F*x2)).*((F*(B-x2))./(F&amp;#43;(x2./(x2&amp;#43;B))));\n&lt;span class=\"hljs-attribute\"&gt;p1&lt;/span&gt;&amp;#61;[x1,x2,x3,x4,x5]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;结果&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attr\"&gt;p1&lt;/span&gt; &amp;#61;\n \n&lt;span class=\"hljs-section\"&gt;[                              30/247,   0,                               315,                                -27,                               -Inf]&lt;/span&gt;\n&lt;span class=\"hljs-section\"&gt;[ 0.083573487031700288184438040345821, 1.0, 40.863636363636363636363636363636, -27.045454545454545454545454545455, -4994.4444444444444444444444444444]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;可见有5列呢&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["matlab结果显示为表达式，为何不能计算结果", ["%想应用matlab求出x2的值，再通过x2与x1,x3,x4,x5的关系式，\n求出x1,x3,x4,x5的值，但是matlab输出结果只有x2的值，\nx1,x3,x4,x5都是表达式呈现的，没有数值结果。\n大致程序如下，请求大家指点\n\n\nsyms x1 x2 x3 x4 x5\nF=0.5;\nB=30;\nf1=(x2/(2+x2))*(1-x2)*(1-((", "-5", "+F", "+120", "*(x2/(x2", "+12", ")))*((F*(B-x2))/(F/0.2", "+20", "))/F/200))*(1-(2+F/0.02", "+50", "*(0.6/(F*x2))));\nsolution=vpasolve(f1,x2,[0,3000])\nx1=(F*(B-x2))/(123+F", "+50", "*x2);\nx3=(10+F", "+5", "*x2)*((F*(B-x2))/(F", "+5", "*x2)); \nx4=(", "-5", "+F*4", "+5", "*(x2/(5*x2", "+5", ")))*((4+F/0.1", "+20", "*(x2/(x2", "+10", ")))); \nx5=(", "-5", "+F+(x2/(x2", "+2", ")))*(10/F", "+12", "/(F*x2))*((F*(B-x2))/(F+(x2/(x2+B))));\np1=[x1,x2,x3,x4,x5]\n\n\n"]], "Tag": "算法设计"}
{"Answer": "直接split就好，楼上的substring用错了，substring(12)是从这个位置开始截取到最后，前面12位应该是substring(0,12)\r\n\r\n\r\n```\r\n public String getStr(){\r\nString[]strs = str.split(\"\\\\[Cc]\");//可能是\\\\C，没有实际测试\r\n\r\nfor(int i = 0; i &lt; strs.length;i++){\r\n\tif(i == 0)//第一个一定不以\\c开头\r\n\t\tcontinue;\r\n\tif(strs[i].length&gt;12)\r\n\t\treturn strs[i].substring(0,12);\r\n\telse if(strs[i].length == 12)\r\n\treturn strs[i];\r\n}\r\n}\r\n```\r\n\r\n大概这样就好了.", "Konwledge_Point": "算法与数字", "Question": ["。。。java中一个小算法，来请教一下", ["测试用字符串：", "\nItem0=800,11,0,\\fk3232\\C008028\\c255000000000 欢迎行驶\\n郑州金水路\\n", "\nItem1=800,11,0,\\fk3232\\C024023\\c255000000000注意安全\\n\\fk3232\\C024070\\c255000000000谨慎驾驶\\n", "\nItem2=800,11,0,\\fk3232\\C008032\\c000255000000 欢迎行驶\\n郑州金水路\\n", "\nItem0=300,11,0,\\fs3232\\C032000\\c255000000000谨慎驾驶 注意安全\\C000000\\BB04", "\nItem1=300,14,0,\\fs3232\\c255000000000 欢迎行驶 高速公路！", "\nItem2=300,13,0,\\fs3232\\c255255255000保持车距祝您一路平安", "\nItem0=300,12,0,\\fk2424\\c255000000000欢迎行驶\\n濮鹤高速", "\nItem1=300,14,0,\\fk2424\\c000255000000注意安全\\n谨慎驾驶\\fk2424", "\nItem2=300,76,0,\\fk2424\\c255255255000hello\\nworld", "\n1. 只有\\c中才会包含需要的信息，", "\n2.\\c后边有12个数字，这个12是固定的，", "\n需求是：", "\n给定任意固定格式的字符串，取出\\c 至结束，或者 \\c至下一个\\中间，除了\"\\c255255255255\"之外的信息", "\n比如：Item2=300,76,0,\\fk2424\\c255255255000hello\\nworld 中", "\n取出hello world", "\n\n", "。下边是我写的两种实现方式，虽然我的可以满足业务需求了。总觉得应该还有更便捷的方式，来这里问问大神", "\n这是我第一次写的。不用说，纯粹是跟着第一感觉走的，很啰嗦", "\n这是第二次写的，还是觉得啰嗦，"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你题目的解答代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,l&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    cin &amp;gt;&amp;gt; n;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n%&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || n%&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;错误,n需要不能被2或5整除&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n        m &amp;#61; m*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        l&amp;#43;&amp;#43;;\n    } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (m % n !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;最小的数&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;  是&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;的&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; m/n &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;倍, 包含&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; l &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;个1&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于#c++#的问题：给出一个不能被2或5整除的整数0≤n≤10000，使得它的十进制表示仅由数字1组成", ["给出一个不能被2或5整除的整数0≤n≤10000，一定存在一个n的倍数，使得它的", "十进制表示仅由数字1组成。其中最小的数包含多少个数字？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;小心0&amp;#43;0&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["编写两百位以内数字的加法的算法时出现了奇怪的问题", ["我在编写一个有关两百位以内数字的加法的算法。编完之后，我发现我的算法出现了很奇怪的问题。比如这种，66+99=651.", "我发现我应该出现在的百分位的数出现在了个位。如果运算的过程中不出现进位的话，最后一位就会变成0 。就比如22+33=550 。我检查了三个小时，实在没有找到为什么会这样，不知是否有老哥有空愿意解答一下，真的万分感谢！(；へ：)", "\n", "\n", "#include<iostream>", "\n", "#include<stdio.h>", "\n", "#include<stdlib.h>", "\n", "#include<string>", "\n", "using", " namespace std;\n\n\n\n", "int", " main()\n{\n    ", "int", " a_length = ", "0", ", b_length = ", "0", ";\n    ", "int", " temp0=", "0", ";\n\n    ", "int", " t1=", "0", ", t2=", "0", ", t3=", "0", ", t4=", "0", ",t5=", "0", ",t6=", "0", ";//这相当于一些临时变量，用于传递值\n\n    string ", "temp", ";\n    string a , b;\n    cin >> a >> b;\n    a_length = a.length();\n    b_length = b.length();\n    \n    ", "if", " (a_length < b_length)\n    {\n        ", "temp", " = a;\n        a = b;\n        b = ", "temp", ";\n        temp0 = a_length;\n        a_length = b_length;\n        b_length = temp0;\n    }\n\n\n    reverse(a.", "begin", "(), a.", "end", "());\n    reverse(b.", "begin", "(), b.", "end", "());\n    a[a_length] = ", "'0'", ";\n    b[b_length] = ", "'0'", ";\n\n    ", "for", " (", "int", " i=", "0", ";i<=b_length;i++)\n    {\n        t1 = (", "int", ")a[i]", "-48", ";\n        t2 = (", "int", ")b[i]", "-48", ";\n\n        ", "for", " (;;)\n        {\n            ", "if", " (t1 + t2+t3 > ", "9", ")\n            {\n                t5 = (t1 + t2+t3) % ", "10", ";\n                t6 = (t1 + t2+t3) / ", "10", ";\n                a[i] = (", "char", ")(t5 + ", "48", ");\n                ++i;\n                t1 = (", "int", ")a[i] - ", "48", ";\n                t2 = (", "int", ")b[i] - ", "48", ";\n                t3 = t6;\n\n            }\n            ", "else", "\n            {\n                a[i] = (", "char", ")(t1 + t2+t3 + ", "48", ");\n                t3 = ", "0", ";\n                break;\n            }\n        }\n    }\n\n    reverse(a.", "begin", "(), a.", "end", "());\n    a_length = a.length();\n\n\n    ", "for", " (", "int", " i = ", "0", ",w=", "0", "; i <= a_length; i++)\n    {\n        ", "if", " (a[i] == ", "'0'", "&&w==", "0", ")\n            ", "continue", ";\n        ", "else", "\n        {\n            w = ", "1", ";\n            cout << a[i];\n        }\n    }\n\n    a[", "0", "] = ", "'a'", ";\n    b[", "0", "] = ", "'b'", ";\n\n}\n\n\n\n\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;将所有员工编号是“A”开头的员工卡号更新为将字母“A”替换为数字“1”的员工编号&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;UPDATE&lt;/span&gt; ks_Card\n&lt;span class=\"hljs-keyword\"&gt;SET&lt;/span&gt; Card_ID &amp;#61; &lt;span class=\"hljs-built_in\"&gt;REPLACE&lt;/span&gt;(Card_ID, &lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;WHERE&lt;/span&gt; Emp_ID &lt;span class=\"hljs-keyword\"&gt;IN&lt;/span&gt; (\n  &lt;span class=\"hljs-keyword\"&gt;SELECT&lt;/span&gt; Employee_ID &lt;span class=\"hljs-keyword\"&gt;FROM&lt;/span&gt; hr_EmployeeBase &lt;span class=\"hljs-keyword\"&gt;WHERE&lt;/span&gt; Employee_ID &lt;span class=\"hljs-keyword\"&gt;LIKE&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;A%&amp;#39;&lt;/span&gt;\n);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;查询录用日期为2010年4月录用的员工&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;SELECT&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;e&lt;/span&gt;.Employee_ID, &lt;span class=\"hljs-built_in\"&gt;e&lt;/span&gt;.Name, &lt;span class=\"hljs-built_in\"&gt;e&lt;/span&gt;.GetInDate\n&lt;span class=\"hljs-keyword\"&gt;FROM&lt;/span&gt; hr_EmployeeBase &lt;span class=\"hljs-built_in\"&gt;e&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;WHERE&lt;/span&gt; YEAR(&lt;span class=\"hljs-built_in\"&gt;e&lt;/span&gt;.GetInDate) &amp;#61; &lt;span class=\"hljs-number\"&gt;2010&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;AND&lt;/span&gt; MONTH(&lt;span class=\"hljs-built_in\"&gt;e&lt;/span&gt;.GetInDate) &amp;#61; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["数据库算法的设计问题", ["员工资料表 表名：hr_EmployeeBase 包含字段：(Employee_ID(员工编号), Name(姓名), GetInDate(录入日期))", "员工ID卡表 表名：ks_Card 包含字段：(Card_ID(卡号), Emp_ID(员工编号))", "说明：两个表用Emp_ID和Employee_ID关联", "1.写SQL查询，把所有员工编号是“A”开头的员工卡号更新为将字母“A”替换为数字“1”的员工编号（如员工编号为“A0001”的员工卡号要更新为“10001”）", "2.写SQL查询录用日期为2010年4月录用的员工"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不超过5行&amp;#xff1f;&lt;br /&gt;那只能这样&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-xml\"&gt;            &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[] strs &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[] {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;    1&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;   121&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;  12321&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34; 1234321&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;123454321&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34; 1234321&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;  12321&amp;#34;&lt;/span&gt; , &lt;span class=\"hljs-string\"&gt;&amp;#34;   121&amp;#34;&lt;/span&gt; , &lt;span class=\"hljs-string\"&gt;&amp;#34;    1&amp;#34;&lt;/span&gt; };\n            &lt;span class=\"hljs-keyword\"&gt;foreach&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;var&lt;/span&gt; item &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; strs)\n                Console.WriteLine(item);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code class=\"language-xml\"&gt;\n\nlong item &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//len只到5的话&amp;#xff0c;定义为int就可以了&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt; * &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;)\n            {\n                item &amp;#61; i &amp;lt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt; ? item * &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; long.Parse(&lt;span class=\"hljs-string\"&gt;&amp;#34;1&amp;#34;&lt;/span&gt;.PadLeft(i * &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)) : (item - long.Parse(&lt;span class=\"hljs-string\"&gt;&amp;#34;1&amp;#34;&lt;/span&gt;.PadLeft(((&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;)&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt; * &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; - i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) * &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;))) / &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n                Console.WriteLine(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;.PadLeft((&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;)&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt; - (item.ToString().Length) / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;) &amp;#43; item);\n            }\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["又一算法题，简单又复杂，导师有特殊要求，会的教下", ["题目是在console输出如下图所示数字排列，我导师要求主体代码不能超过5行，又把我难倒了，各位码友专家看能不能教一下，java、c#、c、vb都行", "不会的也可以留言，我们一起学习共同进步", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;折腾了好半天&amp;#xff0c;整理出一种实现方法&amp;#xff0c;貌似是可行的&amp;#xff0c;目前测试是没问题的&amp;#xff0c;你参考一下&amp;#xff1a;&lt;br /&gt;基本思路是就是先考虑全拿走&amp;#xff0c;发现负重超了&amp;#xff0c;那就依次尝试丢弃一个&amp;#xff0c;直到负重不超&amp;#xff0c;这时剩下的列表做为备选列表&amp;#xff0c;循环完以后&amp;#xff0c;在所有备选列表中找最优解&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;fun&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;lst,weight,value, max_weight,lsts, ws, vs&lt;/span&gt;):\n    w_total &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;([weight[i] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; lst]) &lt;span class=\"hljs-comment\"&gt;#计算当前备选列表中的总重量&lt;/span&gt;\n    v_total &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;([value[i] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; lst])  &lt;span class=\"hljs-comment\"&gt;#计算当前备选列表中的总价值&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; w_total&amp;gt;max_weight: &lt;span class=\"hljs-comment\"&gt;#总重量超过最大负重则进行减负&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; lst:  &lt;span class=\"hljs-comment\"&gt;#遍历当前宝物列表&lt;/span&gt;\n            c &amp;#61; [x &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; x &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; lst] &lt;span class=\"hljs-comment\"&gt;#复制列表&amp;#xff0c;防止改变lst&lt;/span&gt;\n            c.remove(i) &lt;span class=\"hljs-comment\"&gt;#移除一个宝物&lt;/span&gt;\n            fun(c,weight,value,max_weight,lsts, ws, vs) &lt;span class=\"hljs-comment\"&gt;#递归计算移除宝物后的各种参数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:                 &lt;span class=\"hljs-comment\"&gt;#总重量不大于最大负重&amp;#xff0c;记录当前宝物列表&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; lst &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; lsts:  &lt;span class=\"hljs-comment\"&gt;#判断列表是否重复&amp;#xff0c;重复不记录&lt;/span&gt;\n            lsts.append(lst)\n            ws.append(w_total)\n            vs.append(v_total)\n\nlst &amp;#61; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;]     &lt;span class=\"hljs-comment\"&gt;#宝物编号列表&lt;/span&gt;\nweight &amp;#61; [&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;]  &lt;span class=\"hljs-comment\"&gt;#宝物重量&lt;/span&gt;\nvalue &amp;#61; [&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]  &lt;span class=\"hljs-comment\"&gt;#宝物价值&lt;/span&gt;\nmax_weight &amp;#61; &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;#最大负重&lt;/span&gt;\nlsts &amp;#61; [] &lt;span class=\"hljs-comment\"&gt;#可能性列表&lt;/span&gt;\nws &amp;#61; [] &lt;span class=\"hljs-comment\"&gt;#对应可能性列表的宝物总重量&lt;/span&gt;\nvs &amp;#61; [] &lt;span class=\"hljs-comment\"&gt;#对应可能性列表的宝物总价值&lt;/span&gt;\nfun(lst,weight,value,max_weight,lsts, ws, vs)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(lsts)):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#34;&lt;span class=\"hljs-subst\"&gt;{ws[i]}&lt;/span&gt;,&lt;span class=\"hljs-subst\"&gt;{vs[i]}&lt;/span&gt;,&lt;span class=\"hljs-subst\"&gt;{lsts[i]}&lt;/span&gt;&amp;#34;&lt;/span&gt;)\nmax_value &amp;#61; vs[ws.index(&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(ws))]\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#34;能带走的最大价值为&amp;#xff1a;&lt;span class=\"hljs-subst\"&gt;{max_value}&lt;/span&gt;&amp;#34;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/380199401056161.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;如有帮助&amp;#xff0c;请采纳。&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["数据结构中背包问题如何避免递归算法迭代到重复一样的数", ["问题遇到的现象和发生背景", "\n", "题干如上，我现在的一个问题是我不知道如何能保证迭代算法每次迭代数都是不重复的，比如目前的代码算出来的最优解是value 8 8 8 8 36 ，weight为4的宝物用了四次 但市这明显不对的，宝物只有一个。如何能保证迭代出来的数字都不一样  ，按照题目字面意思来说 即每个宝物如果他们在最优解中出现，他们只能出现一次呢？", "第二个 我现在箱求出最优解的组合 那我应该怎么做呢？", "\n", "问题相关代码，请勿粘贴截图", "\n", "def recDCCC(weightlist,maxweight,num,valuelist,value,l,p,k):\n    ok=[]\n    ", "if", " ", "num", "==4:\n        ", "print", "(", "'stop1'", ")\n        return value ##递归结束条件 并开始新的一轮递归\n    ", "if", " maxweight<=0:\n        ", "print", "(", "'stop2'", ")\n        return value\n    ###op.append([val ", "for", " val ", "in", " ok ", "if", " val ", "not", " ", "in", " weightlist])##将OK表中不属于valuelist的元素，重复元素剔除出来,除非重复是8，发生重复，立即结束\n    ", "else", ":\n        ", "for", " i ", "in", " range(0,5): \n                    ok.append(valuelist[i])\n                    ", "print", "(valuelist[i])\n                    ", "print", "(ok)\n                    ", "numcoins", "=recDCCC(list(set(weightlist)-set([weightlist[i]])) ,maxweight-weightlist[i],num+1,list(", "set", "(valuelist)-", "set", "([valuelist[i]])) ,value+valuelist[i],l,p,k)\n                    ", "weightlist", "=p\n                    ", "valuelist", "=k\n                    ", "print", "(numcoins)\n                    ", "print", "(", "'break'", ")\n                    ", "if", " l<numcoins:\n                            ", "l", "=numcoins\n                            ", "print", "(", "'end'", ")\n                    ", "else", ":\n                            ", "l", "=l\n                    \n    return l\n\n", "print", "(recDCCC([2,3,4,5,9],20,0,[3,4,8,8,10],0,0,[2,3,4,5,9],[3,4,8,8,10]))\n", "\n", "运行结果及报错内容", "\n", "【8,8,8,8】 最大值36 但这个明显不对 应该为29 每个宝物只能最多出现一次", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第一步&lt;br /&gt;将第一个数插入到链表中&lt;/p&gt;\n&lt;p&gt;第二步&lt;br /&gt;接下来输入的这个数&amp;#xff0c;从链表头部开始遍历链表&amp;#xff0c;按照顺序插入到链表中。如果链表中存在此值&amp;#xff0c;则说明找到了可以连接在一块的积木。即将原来链表中的此节点删除。&lt;/p&gt;\n&lt;p&gt;第三步&lt;br /&gt;当遍历完所有的积木之后&amp;#xff0c;计算链表长度&amp;#xff0c;如果等于2&amp;#xff0c;则表示可以将所有的积木串在一起&amp;#xff0c;输入YES. 否则输入NO&lt;br /&gt;可以参考以下&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/u012324136/article/details/77483072\" id=\"textarea_1642401171749_1642401436306_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/u012324136/article/details/77483072&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["js算法题，搭积木是否能拼接成一个整体？需要提供一个解题思路，3q", ["一天，小明买了许多积木回家，他想把这些积木拼接在一起。每块积木有两个接口，每个接口用一个数字标记，规定只有当两块积木有相同数字标记的接口时，这两块积木才可以通过该接口拼接在一起。举例，有两块积木，接口数字分别为[1,2]和[3,4]，那么这两块积木无法拼接；若两块积木接口数字分别为[1,2]和[2,3]，那么这两块积木可以通过由数字2标记的接口拼接在一起。现在小明知道所有积木的数量和每块积木接口的数字标记，你能告诉他他可以将所有积木拼接成一个整体么？", "\n", "输入", ":n个积木的两个接口的数字标记；1≤x，y≤100000；", "\n", "[", "[1,2]", ",", "[2,3]", ",", "[4,5]", "]", "\n", "[", "[1,2]", ",", "[2,3]", ",", "[3,5]", ",", "[4,5]", ",", "[4,6]", ",", "[5,1]", "]", "\n", "\n", "输出", ":对于每组测试数据，输出”YES”，表示该组数据中的", "所有积木", "可以拼接成一个整体，”NO”表示不行。", "\n", "NO", "\n", "YES", "\n"]], "Tag": "算法设计"}
{"Answer": "这个怎么可能可以反推得到呢？因为有无数种可能性。", "Konwledge_Point": "算法与数字", "Question": ["已经知道一个数字作为数组的和，反过来推这个数组", ["已经知道一个数字作为数组的和，反过来推这个数组是另一个数组中的哪些数字组成的用什么算法？"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/u011429058/article/details/50129919", "Konwledge_Point": "算法与数字", "Question": ["i随机从一个数组中不放回不重复地选取n个数字", ["随机从一个数组中不放回不重复地选取n个数字，使得产生的数组和等于m的编程选取的算法怎么做？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;修改如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n;\nstruct employee\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;  num;  &lt;span class=\"hljs-regexp\"&gt;//num&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;];\n    char name[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    char sex;\n    char post[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;职位\n    char department[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;];&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;部门\n    char Addr[&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;];&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;住址\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;  age;\n};struct employee peo[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\nvoid addmessages(struct employee peo[])\n{\n    char c[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;];\n    &lt;span class=\"hljs-regexp\"&gt;//in&lt;/span&gt;t  n&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;员工编号.姓名.性别.年龄.职务.部门.住址\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;canf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %s %d %s %s %s&amp;#34;&lt;/span&gt;,&amp;amp;peo[n].num,&amp;amp;peo[n].name,&amp;amp;peo[n].sex,&amp;amp;peo[n].age,&amp;amp;peo[n].post,&amp;amp;peo[n].department,&amp;amp;peo[n].Addr);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %c %d %s %s %s&amp;#34;&lt;/span&gt;,&amp;amp;peo[n].num,peo[n].name,&amp;amp;peo[n].sex,&amp;amp;peo[n].age,peo[n].post,peo[n].department,peo[n].Addr);\n        n&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n继续输入下一次请按Y或y&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,c);\n    }&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(!(strcmp(c,&lt;span class=\"hljs-string\"&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;))||!(strcmp(c,&lt;span class=\"hljs-string\"&gt;&amp;#34;y&amp;#34;&lt;/span&gt;)));\n}\nvoid show( struct employee peo[])\n{   &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-regexp\"&gt;//prin&lt;/span&gt;tf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %s %d %s %s %s&amp;#34;&lt;/span&gt;,peo[i].num,peo[i].name,peo[i].sex,peo[i].age,peo[i].post,peo[i].department,peo[i].Addr);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %c %d %s %s %s\\n&amp;#34;&lt;/span&gt;,peo[i].num,peo[i].name,peo[i].sex,peo[i].age,peo[i].post,peo[i].department,peo[i].Addr);\n    }\n}\nvoid find(struct employee peo[])\n{\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入部门,性别查找员工信息:&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i;    &lt;span class=\"hljs-regexp\"&gt;//n&lt;/span&gt;,\n    char bm[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    char sex1;\n    &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;canf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s%s&amp;#34;&lt;/span&gt;,bm,&amp;amp;sex1);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s %c&amp;#34;&lt;/span&gt;,bm,&amp;amp;sex1);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n       &lt;span class=\"hljs-regexp\"&gt;//i&lt;/span&gt;f(!(strcmp(peo[i].department,bm))&amp;amp;&amp;amp;!(strcmp(peo[i].sex,sex1)))\n       &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((strcmp(peo[i].department,bm)&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)&amp;amp;&amp;amp;(peo[i].sex &amp;#61;&amp;#61; sex1))\n       {\n          &lt;span class=\"hljs-regexp\"&gt;//prin&lt;/span&gt;tf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %s %d %s %s %s&amp;#34;&lt;/span&gt;,peo[i].num,peo[i].name,peo[i].sex,peo[i].age,peo[i].post,peo[i].department,peo[i].Addr);\n          &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %c %d %s %s %s\\n&amp;#34;&lt;/span&gt;,peo[i].num,peo[i].name,peo[i].sex,peo[i].age,peo[i].post,peo[i].department,peo[i].Addr);\n          &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n       }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;gt;&amp;#61; n)\n       &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;not found!\\n&amp;#34;&lt;/span&gt;);\n}\nmain()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; menu ;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;1. 输入数据 \\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;2. 显示所有员工信息 \\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;3. 输入部门、性别&amp;#xff0c;显示该部门的员工记录\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;4. 结束.&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入数字1—3:&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;menu);\n        switch (menu)\n        {\n        case &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n               addmessages(peo);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt; ;\n        case &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n               show(peo);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        case &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n               find(peo);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        case &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:\n               &lt;span class=\"hljs-keyword\"&gt;exit&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n        }\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["公司员工基本信息管理程序设计 设计结构体数组，结构中包含数据为：员工编号、姓名、性别、年龄、职务、部门、住址。 设计各个函数，通过选择菜单调用以上各函数", ["这个问题没搞懂怎么改，后两个不能跑", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n", "#", "include", " ", "<string.h>", "\n", "int", " n;\n", "struct", " ", "employee", "\n{\n    ", "int", " num[", "1000", "];\n    ", "char", " name[", "20", "];\n    ", "char", " sex;\n    ", "char", " post[", "20", "];", "//职位", "\n    ", "char", " department[", "30", "];", "//部门", "\n    ", "char", " Addr[", "50", "];", "//住址", "\n    ", "int", " age;\n};", "struct", " ", "employee", " peo[", "10", "];\n", "void", " ", "addmessages", "(", "struct", " employee peo[])", "\n", "{\n    ", "char", " c[", "2", "];\n    ", "int", " n=", "0", ";\n    ", "do", "\n    {\n        ", "printf", "(", "\"员工编号.姓名.性别.年龄.职务.部门.住址\\n\"", ");\n        ", "scanf", "(", "\"%d %s %s %d %s %s %s\"", ",&peo[n].num,&peo[n].name,&peo[n].sex,&peo[n].age,&peo[n].post,&peo[n].department,&peo[n].Addr);\n        n++;\n        ", "printf", "(", "\"\\n继续输入下一次请按Y或y：\"", ");\n        ", "scanf", "(", "\"%s\"", ",c);\n\n    }", "while", "(!(", "strcmp", "(c,", "\"Y\"", "))||!(", "strcmp", "(c,", "\"y\"", ")));\n}\n", "void", " ", "show", "( ", "struct", " employee peo[])", "\n", "{   ", "int", " i;\n    ", "for", "(i=", "0", ";i<n;i++)\n    {\n        ", "printf", "(", "\"%d %s %s %d %s %s %s\"", ",peo[i].num,peo[i].name,peo[i].sex,peo[i].age,peo[i].post,peo[i].department,peo[i].Addr);\n    }\n\n}\n", "void", " ", "find", "(", "struct", " employee peo[])", "\n", "{\n    ", "printf", "(", "\"输入部门,性别查找员工信息:\"", ");\n    ", "int", " n,i;\n    ", "char", " bm[", "20", "];\n    ", "char", " sex1;\n    ", "scanf", "(", "\"%s%s\"", ",bm,&sex1);\n    ", "for", "(i=", "0", ";i<n;i++)\n    ", "if", "(!(", "strcmp", "(peo[i].department,bm))&&!(", "strcmp", "(peo[i].sex,sex1)))\n    {\n        ", "printf", "(", "\"%d %s %s %d %s %s %s\"", ",peo[i].num,peo[i].name,peo[i].sex,peo[i].age,peo[i].post,peo[i].department,peo[i].Addr);\n    }\n}\n", "main", "()\n{\n    ", "int", " menu ;\n    ", "while", " (", "1", ")\n    {\n        ", "printf", " (", "\"1. 输入数据 \\n\"", ");\n        ", "printf", " (", "\"2. 显示所有员工信息 \\n\"", ");\n        ", "printf", " (", "\"3. 输入部门、性别，显示该部门的员工记录\\n\"", ");\n        ", "printf", " (", "\"4. 结束.\"", ");\n        ", "printf", "(", "\"请输入数字1—3:\"", ");\n        ", "scanf", "(", "\"%d\"", ",&menu);\n        ", "switch", " (menu)\n        {", "case", " ", "1", ":\n        ", "addmessages", "(peo);", "break", " ;\n        ", "case", " ", "2", ":\n        ", "show", "(peo);", "break", ";\n        ", "case", " ", "3", ":\n        ", "find", "(peo);", "break", ";\n        ", "case", " ", "4", ":\n        ", "exit", "(", "0", ");\n        }\n    }\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "```\r\npublic void calMaxLength() {\r\n\r\n\t\tString input = \"adc\";\r\n\t\tint max=0;\r\n\t\tint temp=1;\r\n\t\t\r\n\t\t/**\r\n\t\t * 对整个string进行遍历\r\n\t\t */\r\n\t\tfor(int i=1;i&lt;input.length();i++){\r\n\t\t\tchar pre = input.charAt(i-1);\r\n\t\t\tchar now = input.charAt(i);\r\n\t\t\tif(now-pre==1){//如果是连续字符串，长度加一\r\n\t\t\t\ttemp++;\r\n\t\t\t}else{//如果不是连续的字符串，对之前连续的字符串长度进行判断，看是不是目前最长的，如果是则保存\r\n\t\t\t\t  //并且长度计算长度重新计为1\r\n\t\t\t\tmax=(max&gt;temp?max:temp);\r\n\t\t\t\ttemp=1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//因为上面的程序没有对最后一次连续长度进行比较，所以在这里额外比较一次\r\n\t\tmax=(max&gt;temp?max:temp);\r\n\t\t\r\n\t\t//题目要求没有连续的输出0，即没有1这个说法，所以这里进行了判断\r\n\t\tSystem.out.println((max==1?0:max));\r\n\r\n\t}\r\n```\r\n\r\n\r\n上面的方法可以解决楼主的问题，而且时间复杂度是O(n)，应该是最优的解法了。\r\n手打代码&amp;注释，思路已经在注释中说明了。\r\n\r\n望采纳，如果有不合适可以继续交流", "Konwledge_Point": "算法与数字", "Question": ["java字符串中找出最大的“连续的” 子字符串”的长度。", ["例如：abijkabcd 则结果返回 abcd  长度为4。注意是一个字符串，连续的“字符串”而不是  数字串。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;static&lt;br /&gt;int  intA&amp;#61;5&lt;br /&gt;float  f1 &amp;#61;  10.2f&lt;br /&gt;float  f2&lt;br /&gt;double  d  &amp;#61;  21.0&lt;br /&gt;char  c1&amp;#61;‘1’&lt;br /&gt;char  c2&amp;#61;‘’&lt;br /&gt;char  c3&amp;#61;‘’’&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["怎么用算法求大师指点", ["将下列程序中的5个空按照注解的要求填写完整，然后阅读该程序，写出程序的运行结果，并与实际的运行结果进行比较。最后将填写完整的程序复制到用户代码框中提交。", "public class Main {", "\n", "public", " （填空", "1", "） ", "void", " ", "main", "(", "String[] args", ")", " {", "//主方法main", "\n    （填空", "2", "）;", "// 声明一个初值为5的int类型变量intA", "\n    （填空", "3", "）", "// 声明两个float类型的变量f1和f2，f1的初值为实数10.2，f2没初值", "\n    （填空", "4", "）;", "// 声明一个初值为21.0的double类型变量d", "\n    （填空", "5", "）", "// 声明三个char类型的变量c1、c2、c3，初值分别为数字字符1、小写字母a、单引号'", "\n    \n    System.", "out", ".println(", "\"intA=\"", "+intA);\n    f2=", "2", "*f1;\n    System.", "out", ".println(", "\"f1=\"", "+f1+", "\",f2=\"", "+f2);\n    System.", "out", ".println(", "\"c1=\"", "+c1+", "\",c2=\"", "+c2+", "\",c3=\"", "+c3);\n}\n", "\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;时间复杂度为O(n4),一般超过O(n3)算法上就存在问题。&lt;br /&gt;&lt;strong&gt;参考&amp;#xff1a;&lt;/strong&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;UnionFind&lt;/span&gt;:&lt;/span&gt;\n    def __init__(&lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;, n: int):\n        &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.parent &amp;#61; list(range(n))\n        &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.rank &amp;#61; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] * n\n\n    def find(&lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;, x: int) -&amp;gt; int:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.parent[x] !&amp;#61; x:\n            &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.parent[x] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.find(&lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.parent[x])\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.parent[x]\n\n    def merge(&lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;, x: int, y: int) -&amp;gt; None:\n        x, y &amp;#61; &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.find(x), &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.find(y)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; x &amp;#61;&amp;#61; y:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.rank[x] &amp;gt; &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.rank[y]:\n            &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.parent[y] &amp;#61; x\n        elif &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.rank[x] &amp;lt; &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.rank[y]:\n            &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.parent[x] &amp;#61; y\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.parent[y] &amp;#61; x\n            &lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;.rank[x] &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n\n&lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Solution&lt;/span&gt;:&lt;/span&gt;\n    def largestComponentSize(&lt;span class=\"hljs-built_in\"&gt;self&lt;/span&gt;, nums: List[int]) -&amp;gt; int:\n        uf &amp;#61; UnionFind(&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(nums) &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; num in nums:\n            i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; i * i &amp;lt;&amp;#61; num:\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; num % i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n                    uf.merge(num, i)\n                    uf.merge(num, num // i)\n                i &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(Counter(uf.find(num) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; num in nums).values())\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于#优化算法#的问题，如何解决？", ["问题遇到的现象和发生背景", "\n", "leetcode每日一题，给定一个由不同正整数的组成的非空数组 nums ，考虑下面的图：", "有 nums.length 个节点，按从 nums[0] 到 nums[nums.length - 1] 标记；", "只有当 nums[i] 和 nums[j] 共用一个大于 1 的公因数时，nums[i] 和 nums[j]之间才有一条边。", "返回 图中最大连通组件的大小 。", "示例 1：", "输入：nums = [4,6,15,35]", "输出：4", "示例 2：", "输入：nums = [20,50,9,63]", "输出：2", "\n", "问题相关代码，请勿粘贴截图", "\n", "def", " ", "find", "(list,nums):\n        ", "for", " m in list:\n            ", "for", " k in nums:\n                ", "if", " k not in list and math.gcd(k, m) > ", "1", ":\n                    list.", "append", "(k)\n", "class", " Solution:\n    \n    ", "def", " largestComponentSize(self, nums: List[", "int", "]) -> ", "int", ":\n        list1=[]\n        ", "for", " i in nums:\n            list=[i]\n            ", "for", " j in nums:\n                ", "if", " i!=j and math.gcd(i,j)>", "1", ":\n                    list.", "append", "(j)\n            ", "while", " ", "True", ":\n                a=len(list)\n                ", "find", "(list,nums)\n                b=len(list)\n                ", "if", " a==b:\n                    ", "break", "\n            list1.", "append", "(len(list))\n        ", "return", " max(list1)\n", "\n", "运行结果及报错内容", "\n", "循环语句太多导致遇到非常长的数字就超出时间限制了。", "\n\n", "我想要达到的结果", "\n", "算法本身能算出正确得数。", "请评价一下我的算法，有没有优化空间。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题主有一个重大的问题是&amp;#xff0c;求字符串长度哪里&amp;#xff0c;是没有\\0 的&amp;#xff0c;导致你计算的长度有可能不准&lt;/p&gt;\n&lt;p&gt;29行for循环用来判断小数前面是否有0&amp;#xff0c;q记录第一个非0的位置&amp;#xff0c;43行k不应该大于等于q吗&lt;br /&gt;修改前&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/238697831766140.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;修改后&amp;#xff1a;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/863098831766186.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;改动如下&amp;#xff1a;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/700181931766193.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;用你给的其他测试输入时没问题&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["为什么我有几个测试点过不了。给定一个数，请将该数各个位上数字反转得到一个新数。", ["问题遇到的现象和发生背景", "\n", "给定一个数，请将该数各个位上数字反转得到一个新数。", "\n", "\n", "这次与 NOIp2011 普及组第一题不同的是：这个数可以是小数，分数，百分数，整数。整数反转是将所有数位对调；小数反转是把整数部分的数反转，再将小数部分的数反转，不交换整数部分与小数部分；分数反转是把分母的数反转，再把分子的数反转，不交换分子与分母；百分数的分子一定是整数，百分数只改变数字部分。整数新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零；小数新数的末尾不为 00（除非小数部分除了 00 没有别的数，那么只保留1个 00）；分数不约分，分子和分母都不是小数（约分滴童鞋抱歉了，不能过哦。输入数据保证分母不为 00），本次没有负数。", "\n", "题目描述", "给定一个数，请将该数各个位上数字反转得到一个新数。", "\n", "这次与 NOIp2011 普及组第一题不同的是：这个数可以是小数，分数，百分数，整数。", "\n", "整数反转是将所有数位对调。", "\n", "小数反转是把整数部分的数反转，再将小数部分的数反转，不交换整数部分与小数部分。", "\n", "分数反转是把分母的数反转，再把分子的数反转，不交换分子与分母。", "\n", "百分数的分子一定是整数，百分数只改变数字部分。", "\n", "输入格式", "一个实数 ss", "\n", "输出格式", "一个实数，即 ss 的反转数", "\n", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "#include<stdio.h>", "\n", "#include<string.h>", "\n", "int", " main()\n{\n    ", "char", " a[", "10000", "];\n    gets(a);\n    ", "int", " len = strlen(a);\n    ", "int", " flag = ", "0", ",count=", "0", ",count2=", "0", ";\n    ", "for", " (", "int", " i = ", "0", "; i < len; i++)\n    {\n        ", "if", " (a[i] == ", "'.'", ") { flag = ", "1", "; count = i; break; }\n        ", "else", " ", "if", " (a[i] == ", "'%'", ") { flag = ", "2", "; count = i; break; }\n        ", "else", " ", "if", " (a[i] == ", "'/'", ") { flag = ", "3", "; count = i; break; }\n        ", "else", " { flag = ", "0", "; }\n    }\n    ", "int", " count1 = count + ", "1", ";\n        ", "if", " (flag==", "1", ")\n        {\n            ", "int", " j =count", "-1", ";\n            ", "while", " (a[j]==", "'0'", ")\n            {\n                    j", "--;", "\n            }\n            ", "for", " (", "int", " k =j; k >=", "0", "; k", "--)", "\n            {\n                putchar(a[k]);\n            }\n            printf(\".\");\n            ", "for", "(", "int", " q=count+", "1", ";q<len;q++)\n            {\n                ", "if", " (a[q] != ", "'0'", ")\n                {\n                    count2 = ", "1", ";\n                    break;\n                } \n            }\n            ", "if", " (count2) {\n                j = len - ", "1", ";\n                ", "while", " (a[j] == ", "'0'", ")\n                {\n                    j", "--;", "\n                }\n                ", "for", " (", "int", " k = j; k >= count1; k", "--)", "\n                {\n                    putchar(a[k]);\n                }\n            }\n            ", "if", " (count2 == ", "0", ")\n                putchar(", "'0'", ");\n        }\n        ", "else", " ", "if", " (flag==", "3", ")\n        {\n            ", "int", " j = count", "-1", ";\n            ", "while", " (a[j] == ", "'0'", ")\n            {\n                j", "--;", "\n            }\n            ", "for", " (", "int", " k = j; k >= ", "0", "; k", "--)", "\n            {\n                ", "/*printf(\"%c\", a[k]);*/", "\n                putchar(a[k]);\n            }\n            printf(\"/\");\n            j = len - ", "1", ";\n            ", "while", " (a[j] == ", "'0'", ")\n            {\n                j", "--;", "\n            }\n            ", "for", " (", "int", " k = j; k > count; k", "--)", "\n            {\n                ", "/*printf(\"%c\", a[k]);*/", "\n                putchar(a[k]);\n            }\n        ", "/*    return 0;*/", "\n        }\n        ", "else", " ", "if", " (flag==", "2", ")\n        {\n            ", "int", " j = len - ", "2", ";\n            ", "while", " (a[j] == ", "'0'", ")\n            {\n                j", "--;", "\n            }\n            ", "for", " (", "int", " k = j; k >= ", "0", "; k", "--)", "\n            {\n                ", "/*printf(\"%c\", a[k]);*/", "\n                putchar(a[k]);\n            }\n            ", "/*printf(\"%\");*/", "\n            putchar(a[len - ", "1", "]);\n            ", "/*return 0;*/", "\n        }\n        ", "else", " ", "if", " (flag == ", "0", ")\n        {\n            ", "int", " i = len - ", "1", ";\n            ", "while", " (a[i] == ", "'0'", ")\n            {\n                i", "--;", "\n            }\n            ", "for", " (", "int", " j = i; j >= ", "0", "; j", "--)", "\n            {\n                ", "/*printf(\"%c\", a[j]);*/", "\n                putchar(a[j]);\n            }\n        }\n            ", "return", " ", "0", ";\n}\n\n", "\n", "运行结果及报错内容", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j, k, f, cnt &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, n &amp;#61; a &amp;#43; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; a; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; a; j &amp;lt;&amp;#61; n; j&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k &amp;#61; a; k &amp;lt;&amp;#61; n; k&amp;#43;&amp;#43;)  {\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (f &amp;#61; a; f &amp;lt;&amp;#61; n; f&amp;#43;&amp;#43;) {\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i !&amp;#61; j &amp;amp;&amp;amp; i !&amp;#61; k &amp;amp;&amp;amp; i !&amp;#61; f &amp;amp;&amp;amp; j !&amp;#61; k &amp;amp;&amp;amp; j !&amp;#61; f &amp;amp;&amp;amp; k !&amp;#61; f) {\n                        cnt&amp;#43;&amp;#43;;\n                        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(cnt % &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ? &lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt; : &lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, i * &lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt; &amp;#43; j * &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; &amp;#43; k * &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; f);\n                    }\n                }\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (cnt % &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a;\n    &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a);\n    } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (a &amp;lt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || a &amp;gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(a);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["由用户输入一个小于5的正整数a，编写一个函数fun，输出由a开始的连续4个数字组成的所有无重复数字的4位数，要求一行6个数，数字间用空格分开，要求在主函数中完成输入和函数调用。", ["例如输入2，输出则为:", "2345 2354 2435 2453 2534 2543                                       3245 3254 3425 3452 3524 3542                                     4235 4253 4325 4352 4523 4532                                      5234 5243 5324 5342 5423 5432", "麻烦分析下过程和算法步骤和画下流程图或者N-S图"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n \n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; MAXN &amp;#61; &lt;span class=\"hljs-number\"&gt;2e5&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Edge&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; next;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; to;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; len;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; speed;\n}edge[MAXN];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cnt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; head[MAXN];\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Add_Edge&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; u, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; speed, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; len)&lt;/span&gt;&lt;/span&gt;{\n    edge[cnt].next &amp;#61; head[u];\n    edge[cnt].to &amp;#61; v;\n    edge[cnt].speed &amp;#61; speed;\n    edge[cnt].len &amp;#61; len;\n    head[u] &amp;#61; cnt&amp;#43;&amp;#43;;\n}\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dis[MAXN];\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;st&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; id;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dis;\n    &lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;lt; (&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; st &amp;amp;B)&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; dis &amp;gt; B.dis;\n    }\n};\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; vis[MAXN];\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; INF &amp;#61; &lt;span class=\"hljs-number\"&gt;0x3f3f3f3f&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;dijkstra&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; s)&lt;/span&gt;&lt;/span&gt;{\n    dis[s] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    priority_queue&amp;lt;st&amp;gt; q;\n    q.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(st{s, dis[s]});\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(!q.&lt;span class=\"hljs-built_in\"&gt;empty&lt;/span&gt;()){\n        &lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; u &amp;#61; q.&lt;span class=\"hljs-built_in\"&gt;top&lt;/span&gt;();\n        q.&lt;span class=\"hljs-built_in\"&gt;pop&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(vis[u.id]) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        vis[u.id] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;head[u.id];~i;i&amp;#61;edge[i].next){\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v &amp;#61; edge[i].to;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!vis[v] &amp;amp;&amp;amp; dis[u.id] &amp;#43; edge[i].len &amp;lt; dis[v]){\n                dis[v] &amp;#61; dis[u.id] &amp;#43; edge[i].len;\n                q.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(st{v, dis[v]});\n            }\n        }\n    }\n}\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; eps &amp;#61; &lt;span class=\"hljs-number\"&gt;1e-10&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;dcmp&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(x) &amp;lt; eps) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; x &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ? &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; : &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;st2&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; id;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; t;\n    &lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;lt; (&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; st2 &amp;amp;B)&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;dcmp&lt;/span&gt;(t - B.t) &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n};\n&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; dis2[MAXN];\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; INF2 &amp;#61; &lt;span class=\"hljs-number\"&gt;999999999.0&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;dijkstra2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; s)&lt;/span&gt;&lt;/span&gt;{\n    dis2[s] &amp;#61; &lt;span class=\"hljs-number\"&gt;0.0&lt;/span&gt;;\n    priority_queue&amp;lt;st2&amp;gt; q;\n    q.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(st2{s, dis2[s]});\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(!q.&lt;span class=\"hljs-built_in\"&gt;empty&lt;/span&gt;()){\n        &lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; u &amp;#61; q.&lt;span class=\"hljs-built_in\"&gt;top&lt;/span&gt;();\n        q.&lt;span class=\"hljs-built_in\"&gt;pop&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(vis[u.id]) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        vis[u.id] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;head[u.id];~i;i&amp;#61;edge[i].next){\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v &amp;#61; edge[i].to;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!vis[v] &amp;amp;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;dcmp&lt;/span&gt;(dis2[v] - dis2[u.id] - edge[i].len * &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt; / edge[i].speed) &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n                dis2[v] &amp;#61; dis2[u.id] &amp;#43; edge[i].len * &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt; / edge[i].speed;\n                q.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(st2{v, dis2[v]});\n            }\n        }\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    ios::&lt;span class=\"hljs-built_in\"&gt;sync_with_stdio&lt;/span&gt;(&lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;);\n    cin.&lt;span class=\"hljs-built_in\"&gt;tie&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    cout.&lt;span class=\"hljs-built_in\"&gt;tie&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m;\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;\n    &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(head, &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;sizeof&lt;/span&gt; head);\n    &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(dis, &lt;span class=\"hljs-number\"&gt;0x3f&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;sizeof&lt;/span&gt; dis);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;m;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; u, v, speed, len;\n        cin &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v &amp;gt;&amp;gt; speed &amp;gt;&amp;gt; len;\n        &lt;span class=\"hljs-built_in\"&gt;Add_Edge&lt;/span&gt;(u, v, speed, len);\n        &lt;span class=\"hljs-built_in\"&gt;Add_Edge&lt;/span&gt;(v, u, speed, len);\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; q;\n    &lt;span class=\"hljs-built_in\"&gt;dijkstra&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(vis, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;sizeof&lt;/span&gt; vis);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;) dis2[i] &amp;#61; INF2;\n    &lt;span class=\"hljs-built_in\"&gt;dijkstra2&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    cin &amp;gt;&amp;gt; q;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(q--){\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j;\n        &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c;\n        cin &amp;gt;&amp;gt; j &amp;gt;&amp;gt; c;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(dis[j] &amp;#61;&amp;#61; INF) cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IMPOSSIBLE\\n&amp;#34;&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; cout &amp;lt;&amp;lt; dis[j] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;km\\n&amp;#34;&lt;/span&gt;;\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;dcmp&lt;/span&gt;(dis2[j] - INF2) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IMPOSSIBLE\\n&amp;#34;&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; cout &amp;lt;&amp;lt; fixed &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;setprecision&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;) &amp;lt;&amp;lt; dis2[j] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;h\\n&amp;#34;&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["算法题求解！最短路径+动态规划 C++", ["题目设计：", "你怀疑你的导航系统有时会选择低效的路线。", "所以你决定收集一些关于你所在地区的道路系统的数据并编写一个程序，计算出从你的家到你所在地区的最短（综合道路长度）和最快（预期旅行时间）的路线。", "为了使这一任务易于管理，你想出了一个简单的模型。道路系统道路系统由路口（数字从1到N）和连接它们的道路组成，每条道路都有一个限速（单位：km/h）和一个长度（单位：km）。", "在其中一个路口转换道路既不耗费时间也不耗费距离。", "为了简单起见，你还假设所有的道路都是双向的，并且你可以一直以限速行驶。", "\n", "输入的内容包括", "\n", "一行包含N和M(2 ≤ N ≤ 5 · 10^4^, 1 ≤ M ≤ 2 · 10^5^) --分别表示路口和道路的数量", "M行描述道路，第 i 行包含bi, ei, vi和 i (1 ≤ bi，ei≤N，20≤vi≤150，1≤ i ≤300）分别代表第i条道路，与其连接的路口，速度限制和长度（所有这些输入都是整数)", "一行包含 Q（1 ≤ Q ≤ 1000）--查询的数量", "Q行给出查询，每行包括一个整数 j：目的地路口的索引和一个字符c∈{'s', 'f'}", "\n", " 输出", "\n", "对于's'类型的查询，输出从你的家（1号路口）到指定目的地的最短路线的长度。", "对于'f'类型的查询，输出从你的家到指定目的地的最短旅行时间（假设一直按限速行驶），精度为10^-3^", "使用与输入相同的单位，用空格分隔数量和单位。如果一个给定的目的地不能到达，输出 \"IMPOSSIBLE\"。", "\n", "例如：", "\n", "\n", "第三组：", "20 80", "19 15 57 179", "20 20 125 175", "5 4 60 34", "9 10 24 85", "18 8 114 244", "19 9 23 245", "1 5 115 132", "7 17 45 117", "6 12 24 109", "1 12 116 83", "3 3 83 270", "20 20 145 65", "9 13 78 47", "11 14 40 152", "9 15 79 70", "18 9 72 101", "19 5 105 282", "2 3 120 90", "20 13 105 186", "2 4 72 145", "13 18 103 90", "1 3 26 143", "19 13 45 7", "5 14 39 295", "9 7 74 218", "15 5 73 131", "6 15 79 255", "6 15 56 113", "14 5 40 157", "17 17 57 216", "17 14 106 260", "18 9 121 201", "7 11 76 25", "14 17 20 144", "10 6 49 285", "6 16 88 95", "6 4 82 96", "10 16 121 187", "19 11 100 294", "6 9 129 241", "4 4 90 99", "11 15 79 130", "5 8 95 108", "19 15 29 285", "19 20 122 280", "19 13 76 13", "12 16 67 88", "18 10 107 56", "2 18 147 300", "6 15 27 130", "16 6 80 28", "8 5 101 96", "16 16 76 130", "12 3 134 1", "17 4 145 284", "14 9 24 203", "5 13 39 140", "12 9 116 254", "5 12 141 52", "16 3 68 95", "17 1 44 14", "12 20 62 161", "18 16 129 72", "16 18 117 114", "20 17 128 271", "2 1 92 255", "1 19 74 115", "15 2 57 240", "18 7 41 140", "14 1 107 280", "4 6 66 205", "6 10 60 209", "17 2 112 42", "8 2 45 14", "7 16 59 33", "13 16 40 270", "17 6 41 59", "4 13 57 245", "19 11 55 97", "2 8 115 80", "10", "2 s", "15 f", "7 s", "17 f", "8 f", "9 f", "17 s", "16 f", "2 s", "3 f", "\n", "输出：", "56 km", "2.87883212 h", "131 km", "0.31818182 h", "1.00429293 h", "2.31217371 h", "14 km", "2.02895008 h", "56 km", "0.72297993 h", "\n", "关于这道题应该要用到Dijkstra算法或者Moore-Bellman-Ford 算法？希望可以给个详细点的代码，谢谢！", "学到的算法如下代码", "\n", "void", " dijkstra_set (", "int", " s, ", "int", " n) {\n    fill (d, d + n + ", "1", ", INF ) ;\n    d[s] = ", "0", ";\n\n    ", "set", " <pair <", "int", " , ", "int", " > > dst ;\n    dst . ", "insert", " ({d[s], s}) ;\n\n    ", "while", " (! dst. empty () ) {\n        ", "int", " v = dst . ", "begin", " () -> second ;\n        dst . erase ( dst . ", "begin", " () );\n        ", "for", " ( auto e: edges [v])\n              ", "if", " (d[v] + e. ", "cost", " < d[e.u]) {\n                  dst . erase ({d[e.u], e.u}) ;\n                  d[e.u] = d[v] + e. ", "cost", " ;\n                  dst . ", "insert", " ({d[e.u], e.u}) ;\n              }\n     }\n}\n"]], "Tag": "算法设计"}
{"Answer": "时间复杂度O(n)绝对不可能，起码O(n^2)\r\n不用循环或者只用一个循环是可以的。\r\n\r\n\r\n\r\n```\r\n#include \"stdio.h\"\r\n\r\nvoid foo(int * arr, int n, int acc)\r\n{\r\n\tif (acc == n * n) return;\r\n\tif (acc / n &gt; acc % n)\r\n\t\tprintf(\"%d \", arr[acc / n] + arr[acc % n]);\r\n\tfoo(arr, n, acc + 1);\r\n}\r\n\r\nint main()\r\n{\r\n\tint arr[] = { 7, 5, 3, 4 };\r\n\tfoo(arr, 4, 0);\r\n\treturn 0;\r\n}\r\n```\r\n\r\n![图片说明](https://img-ask.csdn.net/upload/201811/20/1542723086_958443.gif)", "Konwledge_Point": "算法与数字", "Question": ["算法题 - 输出数组中数字两两相加的所有结果，要求时间复杂度o(n)", ["比如数组{7,5,3,4}，输出12,10,11,8,9,7", "\n                    时间复杂度o(n)，所以不能用循环嵌套"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n \n&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &amp;#61; int(input(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入数字&amp;#34;&lt;/span&gt;))\n&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;lt; &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;:  &lt;span class=\"hljs-comment\"&gt; //去掉等于号&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; % &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        print(&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n \n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["python找出一个整数的所有因子", ["用循环写一个整数的所有因子数", "\n", "\n", "num", " = int(input(", "\"请输入数字\"", "))\n", "a", " = ", "1", "\n", "while", " ", "a", " <= ", "num", ":\n    ", "if", " ", "num", " % ", "a", " == ", "0", ":\n        print(", "a", ")\n    ", "a", " += ", "1", "\n\n", "\n", "这个把本身也输出了，怎么去掉本身"]], "Tag": "算法设计"}
{"Answer": "http://wenku.baidu.com/link?url=sYNdbuO2AU_UQ0wHic4XgQYIv3NbiuNI_fh8sHXdJbTx_GhgJyTs2KvVTGRRSMtdU7aYNY2uv1sAd4TiznxUdsySI0v6kpWlzuHdcY2ocCq", "Konwledge_Point": "算法与数字", "Question": ["VISC++ 6.0一个算法的问题，按照周期提取浮点数", ["C++ 6.0提取浮点数，浮点数从小到大，再变小，其中有无效的数字剔除，然后得到每个周期，怎么实现呢？"]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/wuyoucao/p/4562341.html", "Konwledge_Point": "算法与数字", "Question": ["输入一个百分制的成绩t，将其转换成对应的等级，C语言实现", ["Problem Description", "\n输入一个百分制的成绩t，将其转换成对应的等级，具体转换规则如下：", "\n90~100为A;", "\n80~89为B;", "\n70~79为C;", "\n60~69为D;", "\n0~59为E;", "\n\n", "Input", "\n输入数据有多组，每组占一行，由一个整数组成。", "\n\n", "Output", "\n对于每组输入数据，输出一行。如果输入数据不在0~100范围内，请输出一行：“Score is error!”。", "\n\n", "Sample Input", "\n56", "\n67", "\n100", "\n123", "\n\n", "Sample Output", "\nE", "\nD", "\nA", "\nScore is error!"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;选用map类型存储数组和下标就行了&amp;#xff0c;每次读入先判断有没有&amp;#xff0c;再选择更新或插入&lt;br /&gt;参考链接&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/yas12345678/article/details/52601624\" id=\"textarea_1636354631266_1636354671617_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;C&amp;#43;&amp;#43;中map用法详解_Donny&amp;#39;s Blog-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;Map是c&amp;#43;&amp;#43;的一个标准容器&amp;#xff0c;她提供了很好一对一的关系&amp;#xff0c;在一些程序中建立一个map可以起到事半功倍的效果&amp;#xff0c;总结了一些map基本简单实用的操作&amp;#xff01;1. map最基本的构造函数&amp;#xff1b;   mapmapstring;         mapmapint;   mapmapstring;         mapmapchar;   mapmapchar;            mapmapint&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/yas12345678/article/details/52601624&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;Map;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m,num;\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;\n    map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;::iterator l_it;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;) {\n        cin &amp;gt;&amp;gt; num;\n        l_it &amp;#61; Map.&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(num);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (l_it &amp;#61;&amp;#61; Map.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;()) {\n            Map.&lt;span class=\"hljs-built_in\"&gt;insert&lt;/span&gt;(pair &amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;(num, i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            Map[num] &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;) {\n        cin &amp;gt;&amp;gt; num;\n        l_it &amp;#61; Map.&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(num);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (l_it &amp;#61;&amp;#61; Map.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;()) {\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            cout &amp;lt;&amp;lt; l_it-&amp;gt;second &amp;lt;&amp;lt; endl;\n        }\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/499076453636119.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于C++的数组指针问题，判断数字是否出现在数组中并输出", ["有一道关于C++的练习题，题目要求是", "输入两个数字N和M，N表示输入的数字个数，M是要测试的数字的个数", "如果测试的数字在第一组数字中出现，则输出他的序号数，如果第一组数字种该数字有重复，则输出最后一位的序号数。", "若没有该数字，则是输出0.", "例如：", "输入：", "3 3", "1 3 5", "1 5 7", "输出：", "1", "3", "0", "输入：4 2", "1 1 3 3", "1 3", "输出：", "2", "4", "输入：", "10 8", "0 0 0 1 2 2 2 2 3 3", "0", "1", "2", "3", "3", "2", "1", "0", "\n", "\n", "我试着设了两个数组，但是不知道在输出的时候怎么弄。。而且0还总是重复输出。", "希望各位可以给一些指导或者完整代码最好啦！谢谢大家"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这是排序啊……&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["编写函数，求一个数组的倒序数组", ["\n", "我的结果不是倒序 还是原来的数组里的数字", "哪位大佬帮我看看怎么改"]], "Tag": "算法设计"}
{"Answer": "直接用Long的hashCode\r\n\r\nlong value;//手机号\r\nint hashCode=(int)(value ^ (value &gt;&gt;&gt; 32));\r\nint index=hashCode%20;", "Konwledge_Point": "算法与数字", "Question": ["通过取模方式，随机获得20个分区", ["假如有100万个手机号码，要均匀分布到20个数据库分区，取模如何是好呢？当然其它好的算法也成", "\n我试验了下通过手机号码的最后两位数的asicc码取模，不太理想"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;其实每步都可以知道还剩多少个数字&amp;#xff0c;判断奇偶就可以每次从左到右执行的&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["报数游戏 用c语言写 输出最后剩下的数字", ["给定一个从 1 到 n 排序的整数列表。", "首先，从左到右，从第一个数字开始，每隔一个数字进行删除，直到列表的末尾。", "第二步，在剩下的数字中，从右到左，从倒数第一个数字开始，每隔一个数字进行删除，直到列表开头。", "我们不断重复这两步，从左到右和从右到左交替进行，直到只剩下一个数字。", "返回长度为 n 的列表中，最后剩下的数字。", "输入n 的数 输出最后剩下的数字"]], "Tag": "算法设计"}
{"Answer": "对String进行操作，字符的分割、正则表达式都能解决这些问题", "Konwledge_Point": "算法与数字", "Question": ["数据类型问题一枚", ["[size=large][color=red]在别的语言中可以直接这样", "\n\n", "比如：int i =10;", "\n\n", "String one= \"abcd\" + i;", "\n\n", "//输出：这个数字是10", "\n\n", "在object_c中该怎么实现啊", "\n\n", "int i = 10;", "\n\n", "NSStirng *one = @\"abcd\" + i;", "\n\n", "//这里这样写肯定是错的，不知道正确的写法是什么，达到上面的那种效果，就是字符串和整形怎么衔接在一起啊", "\n\n", "还有比如java中两个字符串拼接可以直接用+号，在OC都难道只能用拼接函数实现吗？[color=red][/color][/color][/size]"]], "Tag": "算法设计"}
{"Answer": "![图片说明](https://img-ask.csdn.net/upload/202004/15/1586921582_36523.gif)\r\n\r\n下载地址：\r\nhttps://download.csdn.net/download/caozhy/12328131", "Konwledge_Point": "算法与数字", "Question": ["c语言程序从1~16这16个数字中选出6个数字使其相加和为45，求个运行成功的代码", ["要求", "\n1. 从1~16这16个数字中选出6个数字使其相加和为45。", "\n2.  可以动态设置数据中必须包括数和必须不能包括数，（如必须有1，2，3，不能有4，5）用MFC做成对话框形式。", "\n3. 输出满足条件的组数和每组的数据。", "\n\n", "（发个类似图片的代码就行"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先按主键排序&amp;#xff0c;相同则按次主键&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;_PUKE&lt;/span&gt;\n{\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; huase;\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; p;\n}PUKE;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;(*f)&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(PUKE *p,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;sort&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(PUKE *p,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j;\n  PUKE t;\n  &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n-i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;j&amp;#43;&amp;#43;)\n    {\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(p[j].huase &amp;lt; p[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].huase)  || ((p[j].huase &amp;#61;&amp;#61; p[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].huase) &amp;amp;&amp;amp; (p[j].p &amp;lt; p[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].p)))\n      {\n        t &amp;#61; p[j];\n        p[j] &amp;#61; p[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n        p[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; t;\n      }\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n  PUKE puke[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,i,j;\n  &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n  &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;puke[i].huase,&amp;amp;puke[i].p);&lt;span class=\"hljs-comment\"&gt;//花色输入1,2,3,4表示黑、方、梅、杏即可&lt;/span&gt;\n  f fun &amp;#61; sort;\n  &lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(puke,n);\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["怎样设计一个先花色后数字的排序", [".设计算法并编写程序，将下列扑克牌按照先花色后点数的规则进行降序排列（要求使用\n函数指针）。\n花色桃方梅杏梅杏桃方桃\n点数K381024710J\n桃桃杏方梅桃杏梅方梅\n589426QKAQ"]], "Tag": "算法设计"}
{"Answer": "＃＃＃复制一段给你吧 \r\n1. 信息加密\r\n　　收信者是唯一能够解开加密信息的人，因此收信者手里的必须是私钥。发信者手里的是公钥，其它人知道公钥没有关系，因为其它人发来的信息对收信者没有意义。\r\n2. 登录认证\r\n客户端需要将认证标识传送给服务器，此认证标识（可能是一个随机数）其它客户端可以知道，因此需要用私钥加密，客户端保存的是私钥。服务器端保存的是公钥，其它服务器知道公钥没有关系，因为客户端不需要登录其它服务器。\r\n3. 数字签名\r\n　　数字签名是为了表明信息没有受到伪造，确实是信息拥有者发出来的，附在信息原文的后面。就像手写的签名一样，具有不可抵赖性和简洁性。\r\n　　简洁性：对信息原文做hash，得到digest。信息越短加密的耗时越少。\r\n　　不可抵赖性：信息拥有者要保证签名的唯一性，必须是唯一能够加密digest的人，因此必须用私钥加密(就像字迹他人无法学会一样)，得到签名。如果用公钥，那每个人都可以伪造签名了。\r\n4.数字证书\r\n　　问题起源：对1和3，发信者怎么知道从网上获取的公钥就是真的？没有遭受中间人攻击？\r\n　　这样就需要第三方机构来保证公钥的合法性，这个第三方机构就是CA（Certificate Authority），证书中心。\r\n　　CA用自己的私钥对信息原文所有者发布的公钥和相关信息进行加密，得出的内容就是数字证书。\r\n　　信息原文的所有者以后发布信息时，除了带上自己的签名，还带上数字证书，就可以保证信息不被篡改了。信息的接收者先用CA给的公钥解出信息所有者的公钥，这样可以保证信息所有者的公钥是真正的公钥，然后就能通过该公钥证明数字签名是否真实了。", "Konwledge_Point": "算法与数字", "Question": ["RSA 公私匙 数字签名 ", ["RSA中通过KeyPair来生成公私匙", "\n\n", " KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(\"RSA\");\n       keyPairGen.initialize(1024);\n       KeyPair keyPair = keyPairGen.generateKeyPair();\n       RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();\n       RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();\n\n\n", "\n\n", "在做数字签名或者加解密时，为什么不直接使用上门的公私匙 而是要对公私匙做转化", "\n\n", "比如公匙", "\n  X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicKey.getEncoded());", "\n  KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);", "\n  PublicKey publicK = keyFactory.generatePublic(keySpec);", "\n\n", "比如私匙\nPKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(privateKey.getEncoded());\nKeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);\nPrivateKey privateK = keyFactory.generatePrivate(pkcs8KeySpec);\n\n目前网上的帖子基本都是用转化后的公私匙\n但自己在方法里试了下 在签名 验签方法里如果直接使用 不转化的 也是可以做数字签名的，那这几步转化的意义何在，求达人告知下 ，谢谢！\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你输入数字10,就会打印10行语句,第一行语句打印了一个元素,第二行语句打印了两个元素,第三行语句打印了三个数字,因此可以发现每次需要打印&lt;strong&gt;当前行次数&lt;/strong&gt;,而外层for循环中i变量代表当前行,因此只需要在内层for循环写个条件,使得循环i次,而内存for循环从0开始,因此j&amp;lt;i&amp;#43;1或者j&amp;lt;&amp;#61;i&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["c语言。打印数字金字塔。", ["c语言。打印数字金字塔。", "for循环中为什么是j < i+1 呢？以及如何判断这里的控制变量到底是与n有关还是与循环变量i有关呢？ 需要详细的解答", "\n", "\n", "#", "include", "<stdio.h>", "\n", "void", " ", "pinrtTriangle", "(", "int", " n)", "\n", "{\n    ", "int", " num = ", "1", ";            ", "//输入的内容", "\n    ", "for", "(", "int", " i = ", "0", ";i < n;i++)\n    {\n        ", "for", "(", "int", " j = ", "0", ";j < i+", "1", ";j++)      ", "//为什么是j < i+1 呢？以及如何判断这里的控制变量到底是与n有关还是与循环变量i有关呢？ 需要详细的解答", "\n            ", "printf", "(", "\"%d\"", ",num++);\n        ", "printf", "(", "\"\\n\"", ");\n    }\n}\n\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " n;\n    ", "scanf", "(", "\"%d\"", ",&n);\n    ", "pinrtTriangle", "(n);\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;dfs暴搜一下就行&amp;#xff0c;其实剪完枝复杂度不是很大(最深只有10层)&amp;#xff0c;加上输出c&amp;#43;&amp;#43;也只要不到10s。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;/*----------------------------------*/&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;/* Author : KaMtuo                  */&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;/* Email : kamtuo&amp;#64;qq.com            */&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;/* Creation_time : 2022-08-08 20:06 */&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;/* Software : Visual Studio Code    */&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;/*----------------------------------*/&lt;/span&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; endl &lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; std::cin;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; std::cout;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; std::max;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; std::min;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; std::sort;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; std::queue;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; std::priority_queue;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; std::vector;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; std::map;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; std::string;\n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; N &amp;#61; &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; target_num &amp;#61; &lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cnt;\nvector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; in;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;dfs&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; now, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; to)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum &amp;#61;&amp;#61; target_num &amp;amp;&amp;amp; to &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;) {\n        cnt &amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; in.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); i &amp;#43;&amp;#43;) cout &amp;lt;&amp;lt; in[i] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n        cout &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum &amp;gt;&amp;#61; target_num || to &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; now; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;73&lt;/span&gt;; i &amp;#43;&amp;#43;) {\n        in.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(i);\n        &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(i, sum &amp;#43; i, to &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n        in.&lt;span class=\"hljs-built_in\"&gt;pop_back&lt;/span&gt;();\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;freopen&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;all.txt&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;, stdout);\n    &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;44&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    cout &amp;lt;&amp;lt; cnt &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;总共177376种&amp;#xff0c;以下是部分方案&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/167707169956173.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["如何穷举符合条件的数组？求算法", ["从44、45、46...72、73共有29个数字，每次取10个数，每个数字可以重复取，要求这10个数的和为500，共有多少种情况？", "\n", "比如：50取出10次就是500算符合情况。44和54各取出5次也算符合的情况，以下这些都算：", "50    50    50    50    50    50    50    50    50    50", "44    54    44    54    44    54    44    54    44    54", "44    44    44    44    44    54    54    54    54    54", "47    47    48    48    49    49    51    52    52    57", "45    46    47    48    48    49    53    54    55    55", "47    47    47    48    49    49    51    53    54    55", "其他还有那些符合条件的情况？请穷举出来。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/378270690256129.jpg\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;大二的话&amp;#xff0c;这个电路可以理解吧&amp;#xff0c;用这个就可以了&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["#数字电路#的设计问题", ["本人大二，刚学完数字电路，想解决下面的问题，发现自己的知识面不够，想问问大家这种要怎么设计，或者建议用什么芯片。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个代码和前面的分析是意义对应的,&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/864552517436124.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt; \n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; nCases, nFeets;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;nCases) !&amp;#61; EOF)&lt;span class=\"hljs-comment\"&gt;//判定共有多少组输入&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; nCases; i&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;nFeets);&lt;span class=\"hljs-comment\"&gt;//扫描每一组输入中脚的数量&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (nFeets % &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//如果能被4整除,则认为全是兔子&lt;/span&gt;\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d\\n&amp;#34;&lt;/span&gt;, nFeets / &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, nFeets / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (nFeets % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//否则,认为有1只鸡,剩余的全是兔子&lt;/span&gt;\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d\\n&amp;#34;&lt;/span&gt;, nFeets / &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, nFeets / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;0 0\\n&amp;#34;&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//否则为奇数或0,认为没有合理情况,输出0 0&lt;/span&gt;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n \n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["请问这个鸡兔同笼的算法如何理解呢？", ["这个鸡兔同笼的算法我不是很理解，希望大家帮我解析一下代码，并举个实际数字的例子给我看一下，非常感谢！", "\n", "\n", "\n", "\n", "\n", "#", "include", " ", "<cstdio>", "\n\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " nCases, nFeets;\n    ", "while", " (", "scanf", "(", "\"%d\"", ", &nCases) != EOF)\n    {\n        ", "for", " (", "int", " i = ", "0", "; i < nCases; i++)\n        {\n            ", "scanf", "(", "\"%d\"", ", &nFeets);\n            ", "if", " (nFeets % ", "4", " == ", "0", ")\n                ", "printf", "(", "\"%d%d\\n\"", ", nFeets / ", "4", ", nFeets / ", "2", ");\n            ", "else", " ", "if", " (nFeets % ", "2", " == ", "0", ")\n                ", "printf", "(", "\"%d%d\\n\"", ", nFeets / ", "4", " + ", "1", ", nFeets / ", "2", ");\n            ", "else", "\n                ", "printf", "(", "\"0 0\\n\"", ");\n        }\n    }\n    ", "return", " ", "0", ";\n}\n      \n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;100&amp;#43;200&amp;#43;300&amp;#43;324&amp;#43;400&amp;#43;500&amp;#43;600&amp;#43;700&amp;#61;3124&lt;/p&gt;\n&lt;p&gt;先确定个问题&amp;#xff0c;以下两种情况不在目标组合里吧&amp;#xff1f;&lt;br /&gt;100&amp;#43;100&amp;#43;400&amp;#43;324&amp;#43;400&amp;#43;500&amp;#43;600&amp;#43;700&amp;#61;3124。&lt;br /&gt;100&amp;#43;400&amp;#43;100&amp;#43;324&amp;#43;400&amp;#43;500&amp;#43;600&amp;#43;700&amp;#61;3124。&lt;/p&gt;\n&lt;p&gt;能想到比较简单的思路是&amp;#xff0c;分配8个100 到列表里&amp;#xff0c;然后用目标数3124-800&amp;#61;2324 &amp;#xff0c; 做8层遍历&amp;#xff0c; 依次加到列表中的8个数里&amp;#xff0c;新数如果在结果集中出现&amp;#xff0c;忽略。&lt;/p&gt;\n&lt;p&gt;这样&amp;#xff0c;问题就转换为 求8个不重复整数&amp;#xff0c;和为2324的问题。&lt;br /&gt;递归算法&amp;#xff0c;把 0-2324 数用完&amp;#xff0c;取8个数&amp;#xff0c;如果和为2324 &amp;#xff0c;输出。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["8个互不相同三位正整数之和是1234四个数字组成的四位数，这样的组合有多少个？", ["8个互不相同三位正整数之和是1234四个数字组成的四位数，这样的组合有多少个？", "\n", "例如：", "100+200+300+324+400+500+600+700=3124。", "\n", "八个数之和为1234，或1243，或1324……4321等24种情形的，都计算在内。", "\n", "求：算法；代码；运行结果；时耗。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;建议如下图&lt;br /&gt;对象的初始化如果在循环体里面&amp;#xff0c;每次重新进入循环是没有保存数据的&amp;#xff0c;建议写在while 上面&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/102512673046133.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["创建的数组没有被查找算法找到", ["问题遇到的现象和发生背景", "\n", "\n", "问题相关代码，请勿粘贴截图", "\n", "package sheji;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport sheji.RecordNode;\nimport sheji.BSTree;\nimport sheji.KeyType;\nimport sheji.ElementType;\npublic ", "class", " action {\n    public static <ReacordNode> void main(String", "[]", " args) {\n        boolean flag = ", "true", ";\n        ", "while", " (flag) {\n            ", "System", ".", "out.println(", "\"=================================================\"", ");\n            ", "System", ".", "out.println(", "\"请输入下列数字选择相应的操作：\"", ");\n            ", "System", ".", "out.println(", "\"1.建立家谱成员信息\"", ");\n            ", "System", ".", "out.println(", "\"2.查找家谱成员信息\"", ");\n            ", "System", ".", "out.println(", "\"3.删除家谱成员信息\"", ");\n            ", "System", ".", "out.println(", "\"4.退出\"", ");\n            ", "System", ".", "out.println(", "\"=================================================\"", ");\n            ", "System", ".", "out.print(", "\"输入的数字为：\"", ");\n            Scanner sc = ", "new", " ", "Scanner(System.", "in", ")", ";\n            ", "int", " num = sc.next", "Int()", ";\n            BSTree bstree=", "new", " ", "BSTree()", ";\n            switch (num) {\n            case ", "1", ":\n                String", "[]", "item= {", "\"小明\"", ",\n                                ", "\"小张\"", ",\n                                ", "\"小李\"", "};\n                ", "int", "[]", "k= {", "1002", ", ", "1001", ",", "1003", "};   ", "//关键字数组", "\n                KeyType", "[]", " key = ", "new", " KeyType", "[", "k", ". ", "length", "]", "; ", "//关键字数组", "\n                ElementType", "[]", "elem=", "new", " ElementType", "[", "k", ".", "length", "]", ";  ", "//记录数据数组", "\n                ", "System", ".", "out.println(", "\"原序列:\"", ");\n                ", "for", " (", "int", " i = ", "0", "; i<k. length; i++){\n                    key", "[", "i", "]", " = ", "new", " ", "KeyType(", "k", "[", "i", "])", ";          ", "//创建关键字对象", "\n                    elem", "[", "i", "]", "= ", "new", " ", "ElementType(", "item", "[", "i", "])", ";  ", "//创建记录数据对象", "\n                    ", "if", "(bstree.insert", "BST(", "key", "[", "i", "],", "elem", "[", "i", "])", ") {    ", "//若插入对象成功", "\n                    ", "System", ".", "out.println(", "\"[\"", "+key", "[", "i", "]", "+", "\",\"", "+elem", "[", "i", "]", "+", "\"]\"", ");\n                }\n                }\n            break;\n            case ", "2", ":\n                ", "System", ".", "out.println(", "\"\\n 中序遍历二叉排序树\"", ");\n                bstree.", "in", "OrderTraverse(", "bstree", ".", "root", ")", ";\n                ", "System", ".", "out.println", "()", ";\n                KeyType keyvalue =", "new", " ", "KeyType()", ";\n                keyvalue.key=", "1002", ";\n                RecordNode found =(RecordNode)bstree.search", "BST(", "keyvalue", ")", ";\n                ", "if", "(found!=null) {\n                    ", "System", ".", "out.println(", "\"按编号查找:\"", "+keyvalue+", "\",成功！对应家族成员为:\"", "+found.element);\n                }", "else", " {\n                    ", "System", ".", "out.println(", "\"按编号查找:\"", "+keyvalue+", "\",失败！\"", ");\n                }\n                keyvalue.key=", "1003", ";\n                found=(RecordNode)bstree.search", "BST(", "keyvalue", ")", ";\n                ", "if", "(found!=null) {\n                    ", "System", ".", "out.println(", "\"按编号查找:\"", "+keyvalue+", "\",成功！对应家族成员为:\"", "+found.element);\n                }", "else", " {\n                    ", "System", ".", "out.println(", "\"按编号查找:\"", "+keyvalue+", "\",失败！\"", ");\n                }\n            \n                break;\n            \n            case ", "3", ":\n                bstree.", "in", "OrderTraverse(", "bstree", ".", "root", ")", ";\n                ", "System", ".", "out.println", "()", ";\n                KeyType keyvalue1 =", "new", " ", "KeyType()", ";\n                keyvalue1.key=", "1002", ";\n                found=(RecordNode)bstree.remove", "BST(", "keyvalue1", ")", ";\n                ", "if", "(found!=null) {\n                    ", "System", ".", "out.println(", "\"删除编号：\"", "+keyvalue1+", "\"，成功删除：\"", "+found.element+", "\"!\"", ");\n                }", "else", " {", "System", ".", "out.println(", "\"删除编号：\"", "+keyvalue1+", "\"，失败！\"", ");\n                \n                }\n                break;\n\n            default:\n                flag = ", "false", ";\n                ", "System", ".", "out.println(", "\"退出成功\"", ");\n                break;\n                }\n        }\n}\n\n}\n        \n\n        \n\n    \n            \n\n\n\n    \n\n    \n\n\n", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "是不是算法弄错了", "\n", "我想要达到的结果", "\n", "能够查找到并且删除对应对象"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;string.h&amp;gt;&lt;/span&gt;\nint main()\n{\n    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;存储并接收组数\n    int a;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a);\n    \n    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;吃数字后面的回车\n    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;但凡以后遇见数字回车&amp;#xff0c;字符&amp;#xff0c;一定要加上getchar&amp;#xff0c;否则计算机会把数字后面的回车当做字符处理\n    getchar();\n    \n    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;循环输入每组牌\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;a;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;存储每组牌\n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;小编觉得要将每组牌存储在一个大数组中\n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;因为题干有提示首尾有若干空格\n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;所以我觉得scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s %d&amp;#34;&lt;/span&gt;,char*_,int_)这种格式可能接收不到末尾的空格\n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;哪怕后面加上getchar也只能接受一个空格&amp;#xff0c;而空格的数量是不确定的\n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;导致空格或者回车可能会存储到下一组的字符数组里面&amp;#xff0c;这样的程序肯定错误\n        char b[&lt;span class=\"hljs-number\"&gt;1001&lt;/span&gt;];\n        \n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;接收牌\n        gets(b);\n        \n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;存储牌的数量\n        int c&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        \n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;存储牌的花色\n        char d[&lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n        \n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;存储牌的大小\n        int e[&lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n        \n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;控制d数组每个花色字符串的结束\n        int k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        \n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;将大数组牌的花色和大小分别存储到两个数组中\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;strlen(b);j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;判断是否是字母&amp;#xff0c;如果是&amp;#xff0c;存储到d数组中&amp;#xff0c;以空格为标志结束\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(b[j]&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;b[j]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;第一维控制每个花色\n                &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;第二位控制每个花色的字母\n                d[c][k&amp;#43;&amp;#43;]&amp;#61;b[j];\n                \n                &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;如果该字母后面是空格&amp;#xff0c;证明本花色字符串结束\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(b[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n                {\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;结束每个花色&amp;#xff0c;字符串以&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;作为结束标志\n                    d[c][k]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;\n                    \n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;将k赋值&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#xff0c;准备接收下一个花色\n                    k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                    \n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;小编这种字符串也有些不确定&amp;#xff0c;打印出来看一下前面程序的正确性\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s &amp;#34;&lt;/span&gt;,d[c]);\n                }\n            }\n            \n            &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;判断是否是数字\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(b[j]&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;b[j]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;)\n            {\n                e[c]&amp;#61;e[c]*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#43;b[j]-&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n                \n                &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;如果改数字后面是&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;或者&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;说明数字结束\n                &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;将控制第一维的变量c加一\n                &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;准备接收下一个牌的花色和大小\n                &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;d数组和e数组的角标相互对应\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(b[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;||b[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n                {\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;同样&amp;#xff0c;打印一下&amp;#xff0c;看一下效果&amp;#xff0c;校验前面代码是否符合要求\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,e[c]);\n                    c&amp;#43;&amp;#43;;\n                }\n            }\n        }\n        \n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;上面代码执行完毕&amp;#xff0c;说明花色和大小已经分别存储在两个数组中\n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;进行下一步&amp;#xff0c;排序\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;c;j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int k&amp;#61;j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;k&amp;lt;c;k&amp;#43;&amp;#43;)\n            {\n                &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;作为交换时的中间变量\n                char tp[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n                \n                &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;先比较大小&amp;#xff0c;如果前面的牌比后面的小&amp;#xff0c;调换一下位置\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(e[j]&amp;lt;e[k])\n                {\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;先交换大小\n                    int temp&amp;#61;e[j];\n                    e[j]&amp;#61;e[k];\n                    e[k]&amp;#61;temp;\n                    \n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;因为d数组存储的花色和e数组存储的大小的角标是相互对应的\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;d数组也要进行交换\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;因为d数组里面是字符串\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;所以要用字符串复制的函数strcpy\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;如果用赋值即“&amp;#61;”程序报错\n                    strcpy(tp,d[j]);\n                    strcpy(d[j],d[k]);\n                    strcpy(d[k],tp);\n                }\n                \n                &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;大小相同&amp;#xff0c;比较花色\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(e[j]&amp;#61;&amp;#61;e[k])\n                    \n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;因为每个花色的首字母不同&amp;#xff0c;所以我们可以根据首字母判断花色\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;如果前一张牌的花色是‘d’&amp;#xff0c;则一定小于后一张牌的花色&amp;#xff0c;交换花色\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;如果后一张牌的花色是‘s’&amp;#xff0c;则一定大于前一张牌的花色&amp;#xff0c;交换花色\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;如果前一张牌的花色是‘c’&amp;#xff0c;后一张牌的花色是‘h’\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;前一张牌的花色小于后一张牌的花色&amp;#xff0c;交换花色\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;就这三种情况&amp;#xff0c;如果花色不是‘d’和‘s’&amp;#xff0c;那就只能是‘c’和‘h’\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;同理&amp;#xff0c;如果有一个是‘c’&amp;#xff0c;另一个不是‘h’&amp;#xff0c;则一定是‘d’或‘s’\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;其他情况则无需交换花色\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(d[j][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;||d[k][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;||(d[j][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;d[k][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;))\n                    {\n                        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;同理&amp;#xff0c;利用函数交换字符串\n                        strcpy(tp,d[j]);\n                        strcpy(d[j],d[k]);\n                        strcpy(d[k],tp);\n                    }\n            }\n        }\n        \n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;打印&amp;#xff0c;因为结尾没有空格&amp;#xff0c;所以只打印到倒数第二个\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;c-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;#43;&amp;#43;)\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s %d &amp;#34;&lt;/span&gt;,d[j],e[j]);\n        \n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;打印最后一个&amp;#xff0c;并换行\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s %d\\n&amp;#34;&lt;/span&gt;,d[c-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;],e[c-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n    }\n    \n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["这个问题是需要改排序算法吗，显示运行超时其他的没错", ["小诺诺喜欢玩纸牌比大小的游戏。现在有一副牌中的若干张纸牌，需要按牌面的数字从大到小的顺序排列，若数字大小相同则按花色从大到小（黑桃>红桃>梅花>方块）排列。牌面为A、J、Q、K分别用1、11、12、13表示；花色中的黑桃、红桃、梅花、方块分别用英文单词\"spade\"、\"heart\"、\"club\"、\"diamond\"表示。", "\n", "输入格式:", "测试数据有多组，首先输入测试的组数T （0<T<10），然后是T组测试数据；每组测试输入一行，按“花色 数字”的格式输入若干张牌，花色可能为\"spade\"、\"heart\"、\"club\"、\"diamond\"之一，数字为1~13。输入的数据之间可能有若干（至少1个）空格，在行的首尾也可能有若干空格，但每组输入数据的总长度不会超过1000个字符。", "\n", "输出格式:", "每组测试输出一行，按描述中的排序规则从大到小输出牌的信息，数据之间都以一个空格分隔。", "\n", "输入样例:", "2", " diamond 1 club 1  heart 1  spade 3 diamond 2 club 3 heart 2", "diamond 13 club 13 heart 13    spade 12", "输出样例:", "spade 3 club 3 heart 2 diamond 2 heart 1 club 1 diamond 1", "heart 13 club 13 diamond 13 spade 12", "\n", "以下为代码", "#include<stdio.h>", "#include<stdlib.h>", "typedef struct {", "    char r[10];", "    int x;", "    int f;", "}Card;", "Card card[100];", "char ap[100];", "int main(){", "    int l=0;", "    int T;", "\n", "scanf(", "\"%d\"", ",&", "T", ");\ngetchar();\nwhile(", "T", "--){\nchar e=", "'a'", ";\nl=", "0", ";\nwhile(e!=", "'\\n'", "){\n\nscanf(", "\"%s%d\"", ",&card[l].r,&card[l].x);\nl++;\ne=getchar();\n}\nfor(int n=", "0", ";n<l;n++){\n    \n        if(card[n].r[", "0", "]==", "'h'", ")\n        card[n].f =", "3", ";\n        if(card[n].r[", "0", "]==", "'s'", ")\n        card[n].f =", "4", ";\n        if(card[n].r[", "2", "]==", "'u'", ")\n        card[n].f =", "2", ";\n        if(card[n].r[", "1", "]==", "'i'", ")\n        card[n].f =", "1", ";\n    \n}\n    \n", "Card", " t;\n for(int i=", "0", ";i<l;i++)\n        for(int j=", "0", ";j<l", "-1", "-i;j++)\n        {\n        \n            if(card[j].x<card[j+", "1", "].x){\n                t=card[j];\n                card[j]=card[j+", "1", "];\n                card[j+", "1", "]=t;\n            }\n            if(card[j].x==card[j+", "1", "].x)\n                if(card[j].f<card[j+", "1", "].f){\n                t=card[j];\n                card[j]=card[j+", "1", "];\n                card[j+", "1", "]=t;\n            }\n            }\nfor(int i=", "0", ";i<l;i++)\n        printf(", "\"%s %d  \"", ",card[i].r,card[i].x );\n        printf(", "\"\\n\"", ");\n        \n", "\n", "}", "\n", "}"]], "Tag": "算法设计"}
{"Answer": "string str1 = \"21314324234324324123123123\";\r\nstring str2 = \"21314312132132131232132131\";\r\n\r\n   21314324234324324123123123\r\n-  21314312132132131232132131//各位字符相互减法得到下面\r\n    0 0 0 0 0 0 1 2 1 0 2 2 -1 2 2 -1 3 -1 -1 1 0 -1 1 0 -1 2\r\n\t\t\r\n自己探索规律吧。", "Konwledge_Point": "算法与数字", "Question": ["如何进行字符串数值比较（基础篇）", ["例如C++", "\nstring str1 = \"21314324234324324123123123\";", "\nstring str2 = \"21314312132132131232132131\";", "\n\n", "这2条相同字符串长度的数值比较。", "\n看出str1比str2大。算法怎么实现、"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不是输入x,输入的是a,b,c,d&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d %d&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-symbol\"&gt;&amp;amp;a&lt;/span&gt;,&lt;span class=\"hljs-symbol\"&gt;&amp;amp;b&lt;/span&gt;,&lt;span class=\"hljs-symbol\"&gt;&amp;amp;c&lt;/span&gt;,&lt;span class=\"hljs-symbol\"&gt;&amp;amp;d&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;h函数没有返回值&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;h&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; d)&lt;/span&gt;&lt;/span&gt;{\nx &amp;#61; a &amp;#43; b * &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; c * &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; &amp;#43; d * &lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; x;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["目标是输入四位数，然后单独输出个十百千上的每个数字", ["刚开始学习c语言，但是感觉十分混乱，想写一个函数，于是模仿书上的函数，但是一直是错误的，想请大家帮我检查一下错误，或者改进一下算法。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdlib.h&amp;gt;\ntypedef &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; ElemType;\ntypedef &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; node \n{\n    ElemType data;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; node* next;\n}SlinkNode;\n\n&lt;span class=\"hljs-comment\"&gt;//1初始化链表&lt;/span&gt;\nSlinkNode* &lt;span class=\"hljs-constructor\"&gt;InitLink(SlinkNode&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;h&lt;/span&gt;)&lt;/span&gt;\n{\n    h &amp;#61; (SlinkNode*) malloc(sizeof(SlinkNode));\n    h-&amp;gt;next &amp;#61; NULL;\n    return h;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//头插法&lt;/span&gt;\nSlinkNode* &lt;span class=\"hljs-constructor\"&gt;InsertHead(SlinkNode&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;h&lt;/span&gt;,ElemType &lt;span class=\"hljs-params\"&gt;e&lt;/span&gt;)&lt;/span&gt;\n{\n    SlinkNode *t;\n    t &amp;#61; (SlinkNode*)malloc(sizeof(SlinkNode));\n    t-&amp;gt;data &amp;#61; e;\n    t-&amp;gt;next &amp;#61; h-&amp;gt;next;\n    h-&amp;gt;next &amp;#61; t;\n    return h;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//显示链表&lt;/span&gt;\nvoid show&lt;span class=\"hljs-constructor\"&gt;List(SlinkNode&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;h&lt;/span&gt;)&lt;/span&gt;\n{\n    SlinkNode* p &amp;#61; h-&amp;gt;next;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p)\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,p-&amp;gt;data);\n        p &amp;#61; p-&amp;gt;next;\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n\n\n&lt;span class=\"hljs-comment\"&gt;//链表的长度&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Length(SlinkNode&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;h&lt;/span&gt;)&lt;/span&gt;\n{\n    SlinkNode* p &amp;#61; h-&amp;gt;next;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; len&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(p)\n    {\n        len&amp;#43;&amp;#43;;\n        p &amp;#61; p-&amp;gt;next;\n    }\n    return len;\n}\n\n\n&lt;span class=\"hljs-comment\"&gt;//在pos位置插入元素&lt;/span&gt;\nSlinkNode* &lt;span class=\"hljs-constructor\"&gt;InsertAt(SlinkNode&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;h&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;pos&lt;/span&gt;,ElemType &lt;span class=\"hljs-params\"&gt;e&lt;/span&gt;)&lt;/span&gt;\n{\n    SlinkNode* p,*t;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (pos &amp;lt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;pos &amp;gt; &lt;span class=\"hljs-constructor\"&gt;Length(&lt;span class=\"hljs-params\"&gt;h&lt;/span&gt;)&lt;/span&gt;)\n    {\n        return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    t &amp;#61; (SlinkNode*)malloc(sizeof(SlinkNode));\n    t-&amp;gt;data &amp;#61; e;\n    p &amp;#61; h;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(--pos&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;p)\n    {\n        p &amp;#61; p-&amp;gt;next;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(p) \n    {\n        t-&amp;gt;next &amp;#61; p-&amp;gt;next;\n        p-&amp;gt;next &amp;#61; t;    \n    }\n    return h;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//释放内存&lt;/span&gt;\nvoid &lt;span class=\"hljs-constructor\"&gt;FreeList(SlinkNode&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;h&lt;/span&gt;)&lt;/span&gt;\n{\n    SlinkNode* p;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(h)\n    {\n        p &amp;#61; h-&amp;gt;next;\n        free(h);h&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        h &amp;#61; p;\n    }\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n    SlinkNode* h &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;]&lt;/span&gt;&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;28&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;45&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;67&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;18&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;29&lt;/span&gt;};\n    \n    &lt;span class=\"hljs-comment\"&gt;//初始化单链表h&lt;/span&gt;\n    h &amp;#61; &lt;span class=\"hljs-constructor\"&gt;InitLink(&lt;span class=\"hljs-params\"&gt;h&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;//头插法建表&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;;i&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i--)\n    {\n        h &amp;#61; &lt;span class=\"hljs-constructor\"&gt;InsertHead(&lt;span class=\"hljs-params\"&gt;h&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;])&lt;/span&gt;;\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;插入前链表数据:&amp;#34;&lt;/span&gt;);\n    show&lt;span class=\"hljs-constructor\"&gt;List(&lt;span class=\"hljs-params\"&gt;h&lt;/span&gt;)&lt;/span&gt;;\n\n    \n    &lt;span class=\"hljs-comment\"&gt;//在67与14之间插入100(14的位置是5)&lt;/span&gt;\n    h &amp;#61; &lt;span class=\"hljs-constructor\"&gt;InsertAt(&lt;span class=\"hljs-params\"&gt;h&lt;/span&gt;,5,100)&lt;/span&gt;;\n\n    &lt;span class=\"hljs-comment\"&gt;//显示链表&lt;/span&gt;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;插入100后链表数据&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    show&lt;span class=\"hljs-constructor\"&gt;List(&lt;span class=\"hljs-params\"&gt;h&lt;/span&gt;)&lt;/span&gt;;\n\n    \n    &lt;span class=\"hljs-comment\"&gt;//释放链表&lt;/span&gt;\n    &lt;span class=\"hljs-constructor\"&gt;FreeList(&lt;span class=\"hljs-params\"&gt;h&lt;/span&gt;)&lt;/span&gt;;\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["数据结构，C语言，请求各位回答", ["创建一个单链表，除头结点之外有7个有效结点，存放数字分别为：32、28、45、67、14、18、29，建表过程要求使用头插入法。要求：在67与14之间插入结点，插入结点存放数字为100，将插入前和插入后的各结点数字输出。", "   可能使用到的函数：①初始化单链表；②头插入法建表；③单链表插入算法；④单链表输出算法；⑤主函数。"]], "Tag": "算法设计"}
{"Answer": "max=b&gt;max?b:max\r\n的意思是\r\nif (b &gt; max)\r\nmax = b;\r\nelse\r\nmax = max;\r\n也就是如果b比max还大，那么用b作为新的max", "Konwledge_Point": "算法与数字", "Question": ["一道C语言题目 看一下这个编程有些疑惑", ["大概意思就是输入一组成绩 求最大 最小 平均值 ", "\n看下这道提", "\n有个地方不明白", "  看一下有 问号的那两个地方", "\n\n", "就拿一个问号那句来说", "\n\n", "我不理解这程序是怎么一个运算顺序", "\n\n", "比如 b大于max不成立", "\n那么输出max"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/iluckyning/article/details/8482692", "Konwledge_Point": "算法与数字", "Question": ["双向链表排序，大神看看为啥数据老是丢失", ["上代码", "\n\n", " #include <iostream>\n#include<time.h>\n#include<stdlib.h>\nusing namespace std;\n\ntypedef struct node\n{\n    int date;\n    struct node *next;\n    struct node *prior;\n}node;\n\nclass Link\n{\nprivate:\n    node *first;\n    node *last;\n    node *temp;\n    int len;\npublic:\n    void addLink();\n    void showLink();\n    void Swap(node *,node *);\n    void sort();\n    int getLen() const {\n        return len;\n    }\n\n    void setLen(int len) {\n        this->len = len;\n    }\n\n};\n\nvoid Link::addLink()\n{\n    srand((unsigned)time(NULL));\n    for(int i=1;i<=len;i++)\n    {\n        if(i==1)\n        {\n            node *newnode=new node;\n            newnode->date=rand()%101;\n            first=newnode;\n            temp=newnode;\n            first->prior=NULL;\n\n        }else if(i==len){\n            node *newnode=new node;\n            newnode->date=rand()%101;\n            last=newnode;\n            temp->next=last;\n            last->prior=temp;\n            temp=newnode;\n            temp->next=NULL;\n\n        }else\n        {\n            node *newnode=new node;\n            newnode->date=rand()%101;\n            temp->next=newnode;\n            newnode->prior=temp;\n            temp=newnode;\n        }\n    }\n\n\n}\n\nvoid Link::showLink()\n{\n    node *temp=new node;\n    temp=first;\n    while(temp!=NULL)\n    {\n        cout<<temp->date<<\"  \";\n        temp=temp->next;\n    }\n    cout<<endl;\n    temp=last;\n    /*while(temp!=NULL)\n    {\n        cout<<temp->date<<\"  \";\n        temp=temp->prior;\n    }*/\n\n}\n\n", "\n\n", "上面的是双向链表的建立和打印，代码没错", "\n\n", "下面的是选择排序算法，应该也没错", "\n\n", " void Link::sort()\n{\n    node *i,*j,*k;\n    //if(!first->next)\n    //return;\n\n    for(i=first;i->next!=NULL;i=k->next)\n    {\n        for(j=i->next,k=i;j!=NULL;j=j->next)\n            if(k->date>j->date)\n                k=j;\n        if(k!=i)\n            Swap(i,k);\n    }\n\n", "\n\n", "下面的是交换链表位置的代码，复制的某位大神（原谅我忘记了他的名字）的代码，由于他的代码中没有对头结点的换位方法，我就自己写了加上去，结果每次运行都会丢失比头结点小的数据", "\n\n", " void Link::Swap(node *p,node *t)\n{\n    node *temp;\n    if(t->next==NULL&&p->prior!=NULL) //t结点是否为尾结点\n    {\n        if(p->next==t) //p,t结点是否相邻\n        {\n            //与尾结点相邻的交换代\n            t->next=p;\n            t->prior=p->prior;\n            p->next=NULL;\n            p->prior->next=t;\n           p->prior=t;\n        }\n       else\n        {\n            //与尾结点不相邻的交换代\n            t->next=p->next;\n            t->prior->next=p;\n            temp=t->prior;\n            t->prior=p->prior;\n            p->next->prior=t;\n            p->next=NULL;\n            p->prior->next=t;\n            p->prior=temp;\n        }\n    }\n    else if(p->prior==NULL&&t->next!=NULL)\n    {\n        if(p->next==t)\n        {\n            p->next=t->next;\n            p->next->prior=p;\n            p->prior=t;\n            t->next=p;\n            t->prior=NULL;\n        }\n        else\n        {\n            temp=p->next;\n            p->next=t->next;\n            t->next->prior=p;\n            p->prior=t->prior;\n            t->prior->next=p;\n            t->next=temp;\n            temp->prior=t;\n            t->prior=NULL;\n        }\n    }\n    else if(p->prior==NULL&&t->next==NULL)\n    {\n        p->next->prior=t;\n        t->next=p->next;\n        p->next=NULL;\n        t->prior->next=p;\n        p->prior=t->prior;\n        t->prior=NULL;\n    }\n    else{\n        if(p->next==t) //p,t结点是否相邻\n        {\n            //相邻的交换代\n            t->next->prior=p;\n            temp=t->next;\n            t->next=p;\n            t->prior=p->prior;\n            p->next=temp;\n            p->prior->next=t;\n            p->prior=t;\n        }\n        else\n        {\n            //不相邻的交换代\n            t->next->prior=p;\n            temp=t->next;\n            t->next=p->next;\n            p->next->prior=t;\n            p->next=temp;\n            t->prior->next=p;\n            temp=t->prior;\n            t->prior=p->prior;\n            p->prior->next=t;\n            p->prior=temp;\n       }\n    }\n\n\n}\n\n", "\n\n", "大神们来帮个忙吧，找错误找的眼睛都出血丝了。。。"]], "Tag": "算法设计"}
{"Answer": "#include &lt;stdlib.h&gt;\r\n#include &lt;stdio.h&gt;\r\n\r\nint getmax(int first, int second)\r\n{\r\n        return first &gt; second ? first : second;\r\n}\r\n\r\nint main()\r\n{\r\n        int start_index = 0, end_index = 0;\r\n        int sum_max = 0, result = 0;\r\n\r\n        int index = 0;\r\n\r\n        int data[] = {1, 3, -5, 0, 6, -4, 9, 12, -1};\r\n\r\n        int count = sizeof(data)/sizeof(int);\r\n\r\n        for(index = 0; index &lt; count; index++)\r\n        {\r\n                sum_max = getmax(0, sum_max) + data[index];\r\n                if(data[index] &gt;= sum_max)\r\n                {\r\n                        start_index = index;\r\n                }\r\n                result = getmax(result, sum_max);\r\n                if(result == sum_max)\r\n                {\r\n                        end_index = index;\r\n                }\r\n        }\r\n        printf(\"min section [%d, %d],sum : %d\\n\", start_index, end_index, result);\r\n        return 0;\r\n}\r\n\r\n```\r\n \r\n```", "Konwledge_Point": "算法与数字", "Question": ["要求时间复杂度为O(n)的求两个位置之间最大值的算法", ["把一串数（32位int型）放到Num中，求begin和end位置使得begin与end之间的是数字和最大，要求时间复杂度是O（n）。", "\n注：不可以先排序，这串数字的位置不能改变。", "\n最好有源码，思路也可以。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-cpp\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;\nusing namespace std;\nint n;\nint a[10][10],b[10][10];\nint main(){\n    cin&amp;gt;&amp;gt;n;\n    a[1][1]&amp;#61;1;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int &lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;1;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;){\n        int &lt;span class=\"hljs-attribute\"&gt;len&lt;/span&gt;&amp;#61;1&amp;lt;&amp;lt;i;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int &lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;1;j&amp;lt;&amp;#61;len;j&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int &lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;1;k&amp;lt;&amp;#61;len;k&amp;#43;&amp;#43;){\n                b[j][k]&amp;#61;a[(j&amp;#43;1)/2][(k&amp;#43;1)/2];\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j%&lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;0) b[j][k]&amp;#43;&amp;#61;2;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(k%&lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;0) b[j][k]&amp;#43;&amp;#61;1;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int &lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;1;j&amp;lt;&amp;#61;len;j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int &lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;1;k&amp;lt;&amp;#61;len;k&amp;#43;&amp;#43;)\n                a[j][k]&amp;#61;b[j][k];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int &lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;1;i&amp;lt;&amp;#61;1&amp;lt;&amp;lt;n;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int &lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;1;j&amp;lt;&amp;#61;1&amp;lt;&amp;lt;n;j&amp;#43;&amp;#43;)\n            cout&amp;lt;&amp;lt;a[i][j]&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n        cout&amp;lt;&amp;lt;endl;\n    }\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["c++分治xjoi9437矩阵变幻", ["【题目描述】", "\n", "有一个奇幻的矩阵，在不停的变幻，其变幻方式为：", "数字 1 变成矩阵：", "\n", "1 1", "1 2", "数字 2 变成矩阵：", "\n", "2 2", "2 1", "最初该矩阵只有一个元素 1，变幻 n 次后，矩阵会变成什么样？", "例如，矩阵最初为：[1]；", "\n", "矩阵变幻 1 次后：", "\n", "1 1", "1 2", "矩阵变幻 2 次后：", "\n", "1 1 1 1", "1 2 1 2", "1 1 2 2", "1 2 2 1", "【输入】", "\n", "一行一个整数 n（1<=n<=10），表示矩阵变幻的次数", "\n", "【输出】", "\n", "输出若干行，每行若干个整数，整数间以空格分开，表示变幻 n 次后的矩阵", "\n", "【样例输入】", "\n", "3", "\n", "【样例输出】", "\n", "1 1 1 1 1 1 1 1", "1 2 1 2 1 2 1 2", "1 1 2 2 1 1 2 2", "1 2 2 1 1 2 2 1", "1 1 1 1 2 2 2 2", "1 2 1 2 2 1 2 1", "1 1 2 2 2 2 1 1", "1 2 2 1 2 1 1 2", "想自己尝试，但做不出来"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; _CRT_SECURE_NO_WARNINGS&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt; &lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt; &lt;/span&gt;\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;swap&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* i, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* index)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; temp[&lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;];\n    &lt;span class=\"hljs-built_in\"&gt;strcpy&lt;/span&gt;(temp, i);\n    &lt;span class=\"hljs-built_in\"&gt;strcpy&lt;/span&gt;(i, index);\n    &lt;span class=\"hljs-built_in\"&gt;strcpy&lt;/span&gt;(index, temp);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;sort&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; str[][&lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;])&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;//简单选择排序 &lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j, index;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; index &amp;#61; i;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j &amp;lt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(str[i], str[j]) &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                index &amp;#61; j;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i !&amp;#61; index)\n            &lt;span class=\"hljs-built_in\"&gt;swap&lt;/span&gt;(str[i], str[index]);\n    }\n\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; str[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入字符串:&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, str[i]);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;(str);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, str[i]);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/747059597356140.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["c语言字符串排序问题", ["键盘输入三个字符串，编写嵌套函数，对三个字符串进行由小到大排序，并输出排序结果。请问有没有人能帮忙解答一下呢，下面是具体要求", "1）在主函数中获取键盘输入三个字符串到 str[3][80]中.", "2）将数组名作为参数传递给函数 1，函数 1 的功能是实现排序。", "3）在函数 1 中，进行串的两两比较时，将两个串名作为参数传递给函数 2，函数 2 的功能是比较大小，并将小串前置，如 str[0]与 str[1]比较后，str[0]为较小的串。", " 4）在主函数中按照顺序输出排序结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题目是什么&amp;#xff1f;&lt;br /&gt;你定义int i[7]&amp;#xff0c;那么只能用i[0]到i[6]&amp;#xff0c;你用i[7]就越界了&lt;br /&gt;而且每个for循环应该是0到6&amp;#xff0c;不是1到7&amp;#xff0c;也是越界了&lt;br /&gt;整个数组边界都是乱套的&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["特定数字组成的平方数", ["我觉得我的算法思路没问题就是把原数组的下标进行排列组合然后组合成一个七位数，但是运行的时候运行不出结果，没有任何输出。请求指点谢谢。", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;    public static void main(String&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt; args) {\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;;\n        Scanner sc &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Scanner(System.&lt;span class=\"hljs-params\"&gt;in&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt; arr &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;n&lt;/span&gt;]&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;) {\n            arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; sc.next&lt;span class=\"hljs-constructor\"&gt;Int()&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Arrays&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;sort(arr);\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Arrays&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;String(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;)&lt;/span&gt;);\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["键盘输入6个整数，将这6个整数按从小到大的顺序排序。", ["java 在键盘输入6个整数，将这6个整数按从小到大的顺序排序。"]], "Tag": "算法设计"}
{"Answer": "实体\r\n/**\r\n * Created by admin on 2018/6/20.\r\n */\r\npublic class NumEntity {\r\n    private Integer x;\r\n    private Integer y;\r\n    public Integer getX() {\r\n        return x;\r\n    }\r\n\r\n    public void setX(Integer x) {\r\n        this.x = x;\r\n    }\r\n\r\n    public Integer getY() {\r\n        return y;\r\n    }\r\n\r\n    public void setY(Integer y) {\r\n        this.y = y;\r\n    }\r\n\r\n    public NumEntity(Integer x, Integer y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n}\r\n\r\n```\r\n \r\n```\r\n\r\n主类\r\n\r\n/**\r\n * Created by admin on 2018/6/20.\r\n */\r\npublic class CsdnMain {\r\n\r\n    /**\r\n     * 主方法\r\n     * @param args\r\n     */\r\n    public static void main(String[] args) {\r\n        //传入数据为list的对象，为点结构\r\n        List&lt;NumEntity&gt; list = new ArrayList&lt;&gt;();\r\n        list.add(new NumEntity(3,5));\r\n        list.add(new NumEntity(8,20));\r\n        list.add(new NumEntity(7,10));\r\n        //输出结果\r\n        System.out.println(checkCross(list));\r\n    }\r\n\r\n    /**\r\n     * 将传入的数据，小的在前，大的在后, 如果传入规则随机，则需要在list加入参数时做处理，如\r\n     * list.add(beforeDo(new NumEntity(5,3)));\r\n     * @param numEntity\r\n     * @return\r\n     */\r\n    static NumEntity beforeDo(NumEntity numEntity){\r\n        numEntity.setX(Math.min(numEntity.getX(),numEntity.getY()));\r\n        numEntity.setY(Math.max(numEntity.getX(),numEntity.getY()));\r\n        return numEntity;\r\n    }\r\n\r\n    /**\r\n     * 将传入的数据循环比较，设置temp为哨兵，如果最小值大于哨兵则将最大值赋于哨兵，再做下一次判断，如果最小值小于或者等于哨兵，则有交集\r\n     * @param list\r\n     * @return\r\n     */\r\n    static boolean checkCross(List&lt;NumEntity&gt; list){\r\n        int temp = 0;\r\n        for(int i = 0;i&lt;list.size();i++){\r\n            if(list.get(i).getX()&gt;temp){\r\n                temp = list.get(i).getY();\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n}", "Konwledge_Point": "算法与数字", "Question": ["有几组数字，如果有交集返回false", ["今天项目需要 有交集返回false 场景如下", "\n前端传几组数字 比如：", "\n3 5", "\n8  20", "\n7  10", "\n\n", "3 5 和8 20 不存在交集 ", "\n但 8 20  和 7 10存在交集", "\n\n", "这三组数字返回false ", "\n\n", "如果是这两组：", "\n3 5", "\n8  20", "\n\n", "就返回true了 ", "\n\n", "请问java代码怎么实现呢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;long long换成double类型试试&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["c语言long long类型数据溢出", ["#纯新手，在解决计算任意输入的在10的九次方的范围内的数通过冰雹猜想的操作方式（冰雹猜想 是指：一个自然数x，如果是奇数就乘以3再加1，如果是偶数就析出偶数因数2ⁿ，这样经过若干个次数，最终回到1。）变成1所需的操作次数这一问题时，用long long类型进行运算。", "虽然对987654321得到了和书中答案一样的操作数量180，但在检查运算过程中间值时，发现其中有一些数值为负。这个问题整体计算过程中不应该出现负值，所以我推测是数据溢出。但不太能理解原理是什么，毕竟理论上来讲long long类型的范围在10的18次方左右，而我手算负数出现的时候所在的步数的计算结果实际不超过100亿，不应该溢出。而且我是通过类似于冒泡算法的方式输出了计算中间值的最大值，但这个最大值又输出成一个负值，负数又是怎么在比较大小中比过正数的？", "\n", "其次我使用的是devc++ 5.1.1，据说它应该不支持C99的内容，但我又可以顺利使用long long类型。这是为什么？在之后我又按照网上的方法尝试了一下在编译选项中添加“-std＝c99”，以上问题也没有得到解决。", "\n", "相关代码如下：", "#include <stdio.h>", "/", "int main ()", "{", "    long long i=1,o,p,d;", "    int a,b=1;", "    for(;i!=987654321;i++)", "    {", "        o=i;", "        for(a=0;o!=1;a++)", "        {", "            if(o>d)", "            {", "                d=o;", "            }", "            if(o%2==0)", "            {", "                o=o/2;", "            }", "            else", "            {", "                o=3", "o+1;", "            }", "        }", "        if(a>b)", "        {", "            b=a;", "            p=i;", "        }", "    }", "    printf(\"  %d %d %d  \",p,b,d);", "}", "/", "int main()", "{", "    int n2,count=0;", "    scanf(\"%d\",&n2);", "    long long n=n2,k=1;", "    while(n>1)", "    {", "        if(n%2==1)n=n", "3+1;", "        else n/=2;", "        count++;", "        if(n>k)", "        {", "            k=n;", "            printf(\"%d %d   \",k,count);", "        }", "    }", "    printf(\"%d\\n\",count);", "    return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;一共1528个&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/645822394836127.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"https://www.aliyundrive.com/s/m1giuANCszH\" id=\"textarea_1638493004237_1638493229411_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.aliyundrive.com/s/m1giuANCszH&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["用1234这四个数字组合成8位数", ["用1234这四个数字组合成8位数，里面只有1到2个数的组合有多少组，比如11111111这是1个数的组合，11111112，11111113，11111114这是2个数的组合，需要把只有1到2个数的组合统计然后列出来。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;def main(numbers):\n    &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; &amp;#61; sorted(i &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; numbers &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;result&lt;/span&gt; &amp;#61; []\n    n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;start&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(n):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &amp;#61;&amp;#61; n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt;[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]-&lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt;[i] &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt;[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;start&lt;/span&gt;:\n                &lt;span class=\"hljs-built_in\"&gt;result&lt;/span&gt;.append(str(&lt;span class=\"hljs-built_in\"&gt;start&lt;/span&gt;))\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n                &lt;span class=\"hljs-built_in\"&gt;result&lt;/span&gt;.append(str(&lt;span class=\"hljs-built_in\"&gt;start&lt;/span&gt;)&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&amp;#43;str(&lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt;[i]))\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &amp;lt; n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;: &lt;span class=\"hljs-built_in\"&gt;start&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt;[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n    &lt;span class=\"hljs-literal\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;,&amp;#34;&lt;/span&gt;.join(&lt;span class=\"hljs-built_in\"&gt;result&lt;/span&gt;)\n\nnums &amp;#61; [&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;23&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;29&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;39&lt;/span&gt;]\nprint(main(nums))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["Python排序数字返回紧凑形式的字符串", ["Python#389", "函数main（）接收一个包含若干自然数的列表，要求对其中的自然数升序排序，然后返回紧凑形式的字符串。", "例如，main（[5，6,7,8,9,14,13,12,11,23,29,30,39]）返回'5-9,11-14,23,29-30,39'，", "也就是把连续的自然数组合到一起使用减号连接，单个不连续的自然数独立显示，每组之间使用半角逗号分隔。", "考点：选择结构与循环结构，排序", "我咋感觉要用到排序算法啊……", "排序的话有一个sorted()函数排序，但是这个是对字典用的.", "\n", "def main(numbers):\n", "    #return numbers", "\n", "    ans=[]", "\n", "    list.sort(numbers)", "\n", "    for i in numbers:", "\n", "        if numbers[i+1]-numbers[i]==1:", "\n", "            ans.append(i)", "\n", "            return min(ans)+'-'+max(ans)", "\n", "        else:", "\n", "            return i", "\n'''\n答题错误！您的代码执行结果为：\nTraceback (most recent call last):\n", "  File xxx.py, line 13, in <module>", "\n", "    print(main([5, 6, 7, 8, 9, 14, 13, 12, 11, 23, 29, 30, 39]))", "\n", "  File xxx.py, line 8, in main", "\n", "    return min(ans)+'-'+max(ans)", "\nTypeError: unsupported operand type(s) for +: ", "'int'", " and ", "'str'", "\n'''\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/490716372346138.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["要拿出来的数组不是数字，而是类似于一段字符串，想知道怎么转换为数字", ["问题遇到的现象和发生背景", "\n", "验证二分法是真的正确，所以用暴力遍历和二分法同时处理数组，查看二分法是否编写正确", "\n", "问题相关代码，请勿粘贴截图", "\n", "package cn.Text;", "\n", "import java.util.Arrays;", "\n", "/**", "\n", "二分法", "\n", "一次找一半，比较找位置/数字（num）   保证有序", "\n", "注：我们中点位置一般去上中点", "\n", "135679      上中点为5", "\n", "/", "public class Dichotomy {", "  //TODO 二分法查找", "  public static boolean find(int[] arr,int num){", "\n", "  ", "//边界条件", "\n  ", "if", "((arr==", "null", ")||(arr.length==", "0", ")){\n      ", "return", " ", "false", ";\n  }\n  ", "//左边界", "\n  ", "int", " L=", "0", ";\n  ", "//有边界", "\n  ", "int", " R=arr.length", "-1", ";\n  ", "/", "**\n   ", "* arr的[L...........R]之间查找一个数num\n   *", "/", "\n  ", "while", "(L<=R){\n      ", "int", " media=(L+R)/", "2", ";\n      ", "if", "(arr[media]==", "num", "){\n          ", "return", " ", "true", ";\n      }\n      ", "else", " ", "if", "(arr[media]<", "num", "){\n          L=media+", "1", ";\n      }\n      ", "else", "{\n          R=media", "-1", ";\n      }\n  }\n  ", "return", " ", "false", ";\n", "\n", "  }", "\n", "  //TODO 遍历，暴力方法解决", "  public static boolean test(int[] sortedArr, int num) {", "\n", "  ", "for", " (", "int", " cur : sortedArr) {\n      ", "if", " (cur == ", "num", ") {\n          ", "return", " ", "true", ";\n      }\n  }\n  ", "return", " ", "false", ";\n", "\n", "  }", "\n", "  public static int[] generateRandomArray(int maxSize, int maxValue) {", "\n", "  ", "int", "[] arr = ", "new", " ", "int", "[(", "int", ") ((maxSize + ", "1", ") * Math.random())];\n  ", "for", " (", "int", " i = ", "0", "; i < arr.length; i++) {\n      arr[i] = (", "int", ") ((", "maxValue", " + ", "1", ") * Math.random()) - (", "int", ") (", "maxValue", " * Math.random());\n  }\n  return arr;\n", "\n", "  }", "\n", "  public static void main(String[] args) {", "\n", "  ", "int", " testTime = ", "500000", ";\n  ", "int", " maxSize = ", "10", ";\n  ", "int", " maxValue = ", "100", ";\n  boolean succeed = ", "true", ";\n  ", "for", " (", "int", " i = ", "0", "; i < testTime; i++) {\n      ", "int", "[]", " arr = generate", "RandomArray(", "maxSize", ", ", "maxValue", ")", ";\n      ", "System", ".", "out.println(arr);\n      ", "Arrays", ".", "sort(arr);\n      ", "int", " value = (", "int", ") ((maxValue + ", "1", ")", " * ", "Math", ".", "random", "()", ") - (", "int", ") (maxValue", " * ", "Math", ".", "random", "()", ");\n      ", "if", " (test(arr, value) != find(arr, value)) {\n          ", "System", ".", "out.println(", "\"出错了！\"", ");\n          succeed = ", "false", ";\n          break;\n      }\n  }\n  ", "System", ".", "out.println(succeed ? ", "\"Nice!\"", " : ", "\"Fucking fucked!\"", ");\n", "\n", "  }", "}", "\n", "\n", "运行结果及报错内容", "\n", "运行正确，就是不知道怎么转换为数字", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "两个一样的，说明二分法正确，我想知道数组怎么打印出"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n    // 把数组替换成List集合就可以\n    public &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; fiveSum(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[] nums) {\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; &amp;#61; nums.length;\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; ans &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; ? &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; &lt;span class=\"hljs-symbol\"&gt;:&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;\n        for (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            ans &amp;#43;&amp;#61; nums[i];\n        }\n        &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;) return ans;\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; tmp &amp;#61; ans;\n        for(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt;(i &amp;#43; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; &amp;lt; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;) {\n                tmp &amp;#61; tmp - nums[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; nums[i &amp;#43; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;];\n                ans &amp;#61; Math.max(ans, tmp);\n            }\n        }\n        return ans;\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["list的数字集合中有什么好的求和办法么？", ["工具类或者是算法都可以。", "我想要求某个list中连续的五个数的最大值。", "我想要用求子串然后求和的方式，list有什么好的求和方法吗？", "不要流处理。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;好像也没说每个字母代表的数字不同?&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["不知道怎么用c语言实现每个数字不一样", ["就是不知道怎么设置那个每个数字不一样", "#include<stdio.h>", "int main()", "{", "    int d,o,n,a,l,b,e,r,t,g,y=0;", "    int z;", "    int p[10];", "    for(z=0;z<10;z++)", "    p[z]=z;", "    d=5;", "for(z=0;z<10;z++)", "    for(o=p[z];o<=p[9];)", "        for(n=p[z];n<=p[9];)", "            for(a=p[z];a<=p[9];)", "                for(l=0;l<10;l++)", "                    for(b=0;b<10;b++)", "                        for(e=0;e<10;e++)", "                            for(r=0;r<10;r++)", "                                for(t=0;t<10;t++)", "                                    for(g=0;g<10;g++)", "                                    {", "\n", "                                ", "if", "((d", "*100000", "+o", "*10000", "+n", "*1000", "+a", "*100", "+l", "*10", "+d+g", "*100000", "+e", "*10000", "+r", "*1000", "+a", "*100", "+l", "*10", "+d)==(r", "*100000", "+o", "*10000", "+b", "*1000", "+e", "*100", "+r", "*10", "+t))\n                                {\n                                    \n                                    printf(", "\"d=%d\\to=%d\\tn=%d\\ta=%d\\tl=%d\\tg=%d\\te=%d\\tr=%d\\tt=%d\\tb=%d\\n\"", ",d,o,n,a,l,g,e,r,t,b);\n                                    y++;\n                                }\n                                }\nprintf(", "\"总共有多少种正确的算法:%d\"", ",y);\nreturn 0; \n", "\n", " }", "修改一下谢谢了                               "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;只能解决恰好两个物品的情况。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["解背包问题算出来答案不对，不知道代码哪里不对", ["有 N件物品和一个容量是 V的背包。每件物品只能使用一次。", "第 i件物品的体积是 vi，价值是 wi。", "求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。", "输出最大价值。", "\n", "输入格式", "第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。", "\n", "接下来有 N行，每行两个整数 vi,wi，用空格隔开，分别表示第 i件物品的体积和价值。", "\n", "输出格式", "输出一个整数，表示最大价值。", "\n", "数据范围", "0<N,V≤1000", "0<vi,wi≤1000", "输入样例", "4 5", "1 2", "2 4", "3 4", "4 5", "输出样例：", "8", "\n", "我是这样写的", "\n", "\n```c++\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int N,V;\n    cin>>N>>V;\n    int a", "[1000]", "[1]", ";\n    int i;\n    for(i=0;i<N;i++)\n    {\n        cin>>a", "[i]", "[0]", ">>a", "[i]", "[1]", ";\n    }\n    int b", "[1000]", ";\n    int k=0;\n    for(i=0;i<N;i++)\n    {\n       for(int j=i+1;j<N;j++)\n       {\n            if(a", "[i]", "[0]", "+a", "[j]", "[0]", "<=V)\n            {\n            b", "[k]", "=a", "[i]", "[1]", "+a", "[j]", "[1]", ";\n            k++;\n            }\n       }\n    }\n    int max=b", "[0]", ";\n    for(i=1;i<=k;i++)\n    {\n        if(b", "[i]", ">max)\n        {\n            max=b", "[i]", ";\n        }\n    }\n    cout<<max;\n    return 0;\n}\n\n", "\n", "结果算出来答案不对，是哪里出了问题"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n\n \n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n\n{&lt;!-- --&gt;&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a,n;\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; s&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; t;\n\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;n);\n\nt&amp;#61;a;\n\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n\n{&lt;!-- --&gt;&lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,t);\n\n}\n\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n\n{&lt;!-- --&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n\n{&lt;!-- --&gt;&lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; %d &amp;#43;&amp;#34;&lt;/span&gt;,a);\n\n}\n\na&amp;#61;a*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#43;t;\n\ns&amp;#61;s&amp;#43;a;\n\n &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i&amp;lt;n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n\n{\n&lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; %d &amp;#43;&amp;#34;&lt;/span&gt;,a);}\n\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n\n{&lt;!-- --&gt;&lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; %d&amp;#34;&lt;/span&gt;,a);\n\n}\n\n}\n\ns&amp;#61;s&amp;#43;t;\n\n&lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#61; %d&amp;#34;&lt;/span&gt;,s);\n\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["原谅我老是不知道什么状况", ["为什么我输入的数字只能得到0的结果，不知道我的算法还是哪里出了问题"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;c&amp;#43;&amp;#43;不允许cin &amp;gt;&amp;gt;n, int a[n]的方式定义数组&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["为什么这段编译运行之后，输入大一点的数就一直没有输出", ["要实现从N个数中抽出第k个最大的数", "用了二分查找的思想", "输入形式是N，k，a[]分别输入，输出是一个数（第k大的数）", "在输入", "5", "3", "5 4 3 2 1", "这种小一点的数就能运行", "输入", "5", "3", "12345", "5433", "5678", "4352", "345", "这种大一点的数就一直卡在输入结束的页面也不输出的了", "为什么啊求解答！", "\n", "#include <iostream>\nusing namespace std;\n\n", "int", " topk(", "int", " a[], ", "int", " ", "N", ", ", "int", " k) {\n    ", "int", " ", "min", " = a[", "1", "], ", "max", " = a[", "1", "];\n    ", "int", " ", "mid", " = ", "0", ", ", "count", " = ", "0", ";\n    for (", "int", " i = ", "2", "; i <= ", "N", "; i++) {\n        ", "if", " (a[i] < ", "min", ")\n            ", "min", " = a[i];\n        ", "if", " (a[i] > ", "max", ")\n            ", "max", " = a[i];\n    }\n    while (", "max", " > ", "min", ") {\n        ", "mid", " = (", "min", " + ", "max", ") / ", "2", ";\n        for (", "int", " i = ", "1", "; i <= ", "N", "; i++) {\n            ", "if", " (a[i] >= ", "mid", ")\n                ", "count", "++;\n        }\n        ", "if", " (", "count", " < k) {\n            ", "max", " = ", "mid", " - ", "1", ";\n            ", "count", " = ", "0", ";\n        } else {\n            ", "min", " = ", "mid", ";\n            ", "count", " = ", "0", ";\n        }\n    }\n    cout << ", "min", ";\n}\n\n", "int", " main() {\n    ", "int", " ", "N", ", k;\n    cin >> ", "N", " >> k;\n    ", "if", " (k < ", "1", " || k > ", "N", ")\n        return ", "0", ";\n    ", "int", " a[", "N", " + ", "10", "];\n    for (", "int", " i = ", "1", "; i <= ", "N", "; i++)\n        cin >> a[i];\n    topk(a, ", "N", ", k);\n    return ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/671638034666136.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["c语言表达猜数字问题", ["shzjsjuxudjwhjsxuwjxiekhd看了没有什么思路，求解呀！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个可以吗&amp;#xff0c;如果可以记得给个采纳呐&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#define N 100&lt;/span&gt;\n \n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; rmatrix[N][N]&amp;#61;&lt;span class=\"hljs-string\"&gt;{0}&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; number1;&lt;span class=\"hljs-regexp\"&gt;//num&lt;/span&gt;ber的初始值 \nvoid RMATRIX(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; start, &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; number,&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; rmatrix[N][N]){&lt;!-- --&gt;&lt;span class=\"hljs-regexp\"&gt;//n&lt;/span&gt;为矩阵层数&amp;#xff0c;start为矩阵开始层数&amp;#xff0c;number为起始数字\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;lt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;此时的n&amp;#61;%d,start &amp;#61; %d,number &amp;#61; %d\\n&amp;#34;&lt;/span&gt;,n,start,number);\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(number1&amp;#61;&amp;#61;number)\n        {\n            rmatrix[start][start]  &amp;#61; number;\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ;\n        }\n//        rmatrix[start][start] &amp;#61; number;\n        &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; t&amp;#61; start/&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;t &amp;#61; %d\\n&amp;#34;&lt;/span&gt;,t);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(rmatrix[t][t] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            rmatrix[t][t]  &amp;#61; number;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;start;i&amp;lt;(n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;A区(矩阵的第一列)\n            rmatrix[i][start]&amp;#61;number;\n            number&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;start;i&amp;lt;(n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;B区(矩阵的最后一行)\n            rmatrix[n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][i]&amp;#61;number;\n            number&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;(n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);i&amp;gt;start;i--){&lt;!-- --&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;C区(矩阵最后一列)\n            rmatrix[i][n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;number;\n            number&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;(n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);i&amp;gt;start;i--){\n            rmatrix[start][i]&amp;#61;number;\n            number&amp;#43;&amp;#43;;\n        }\n        start&amp;#43;&amp;#43;;\n        RMATRIX(n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,start,number,rmatrix);\n    }\n}\n \n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main(){\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a,b;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n,number;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; rmatrix[N][N];\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入矩阵阶数:&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入开始时的number:&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;number);\n    number1 &amp;#61; number;\n    RMATRIX(n,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,number,rmatrix);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(a&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;a&amp;lt;n;a&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(b&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;b&amp;lt;n;b&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%3d &amp;#34;&lt;/span&gt;,rmatrix[a][b]);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n}\n \n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/204926413566194.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["运行结果不显示任何数字", ["想运行一个螺旋矩阵的程序，没有报错但是运行没有结果输出，感觉是传参的时候出了问题，有人能帮我看看吗？", "\n", "#", "include", "<stdio.h>\n#define N ", "100", "\n\n", "int", " rmatrix", "[N]", "[N]", "={", "0", "};\nvoid ", "RMATRIX(", "int", " ", "n", ",", "int", " ", "start", ", ", "int", " ", "number", ",", "int", " ", "rmatrix", "[N][N])", "{", "//n为矩阵层数，start为矩阵开始层数，number为起始数字", "\n    ", "int", " i;\n    ", "if", "(n==", "1", ")\n        rmatrix", "[", "start", "]", "[", "start", "]", "=number;\n    ", "else", "{\n        ", "for", "(i=start;i<(n-", "1", ");i++){", "//A区(矩阵的第一列)", "\n            rmatrix", "[", "i", "]", "[", "start", "]", "=number;\n            number++;\n        }\n        ", "for", "(i=start;i<(n-", "1", ");i++){", "//B区(矩阵的最后一行)", "\n            rmatrix", "[", "n", "-", "1", "]", "[", "i", "]", "=number;\n            number++;\n        }\n        ", "for", "(i=(n-", "1", ");i>start;i--){", "//C区(矩阵最后一列)", "\n            rmatrix", "[", "i", "]", "[", "n", "-", "1", "]", "=number;\n            number++;\n        }\n        ", "for", "(i=(n-", "1", ");i>start;i--){\n            rmatrix", "[", "start", "]", "[", "i", "]", "=number;\n            number++;\n        }\n        start++;\n        ", "RMATRIX(", "n", "-2,", "start", ",", "number", ",", "rmatrix", ")", ";\n    }\n}\n\nvoid main", "()", "{\n    ", "int", " a,b;\n    ", "int", " n,number;\n    ", "int", " rmatrix", "[N]", "[N]", ";\n    printf(", "\"请输入矩阵阶数:\"", ");\n    scanf(", "\"%d\"", ",&n);\n    printf(", "\"请输入开始时的number:\"", ");\n    scanf(", "\"%d\"", ",&number);\n    ", "RMATRIX(", "n", ",0,", "number", ",", "rmatrix", ")", ";\n    ", "for", "(a=", "0", ";a<", "4", ";a++){\n        ", "for", "(b=", "0", ";b<", "4", ";b++){\n            printf(", "\"%d \"", ",rmatrix", "[", "a", "]", "[", "b", "]", ");\n        }\n        printf(", "\"\\n\"", ");\n    }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;char A[] &amp;#61; &amp;#34;&amp;#34;; char B[] &amp;#61; &amp;#34;&amp;#34;;char C[] &amp;#61; &amp;#34;&amp;#34;;char D[] &amp;#61; &amp;#34;&amp;#34;;char E[] &amp;#61; &amp;#34;&amp;#34;;char F[] &amp;#61; &amp;#34;&amp;#34;; 字符串定义问题&amp;#xff0c;改为&amp;#xff1a;char A[4],B[4],C[4],D[4],E[4],F[4];&lt;br /&gt;修改如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//Ax&amp;#43;By&amp;#61;C&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//Dx&amp;#43;Ey&amp;#61;F&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//x&amp;#61;(CE-BF)/(AE-bD)&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//y&amp;#61;(CD-AF)/(BD-aE)&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; A[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; B[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; C[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; D[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; E[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; F[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请按照以下格式输入方程组 Ax&amp;#43;By&amp;#61;C;Dx&amp;#43;Ey&amp;#61;F\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; str[&lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,str);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;方程组为 %s\\n&amp;#34;&lt;/span&gt;, str);\n    &lt;span class=\"hljs-built_in\"&gt;sscanf&lt;/span&gt;(str,&lt;span class=\"hljs-string\"&gt;&amp;#34;%[^x]&amp;#34;&lt;/span&gt;,A);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;, A);\n    &lt;span class=\"hljs-built_in\"&gt;sscanf&lt;/span&gt;(str,&lt;span class=\"hljs-string\"&gt;&amp;#34;%*[^&amp;#43;]&amp;#43;%[^y]&amp;#34;&lt;/span&gt;,B);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;, B);\n    &lt;span class=\"hljs-built_in\"&gt;sscanf&lt;/span&gt;(str,&lt;span class=\"hljs-string\"&gt;&amp;#34;%*[^&amp;#61;]&amp;#61;%[^;]&amp;#34;&lt;/span&gt;,C);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;, C);\n    &lt;span class=\"hljs-built_in\"&gt;sscanf&lt;/span&gt;(str,&lt;span class=\"hljs-string\"&gt;&amp;#34;%*[^;];%[^x]&amp;#34;&lt;/span&gt;,D);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;, D);\n    &lt;span class=\"hljs-built_in\"&gt;sscanf&lt;/span&gt;(str,&lt;span class=\"hljs-string\"&gt;&amp;#34;%*[^;]%*[^&amp;#43;]&amp;#43;%[^y]&amp;#34;&lt;/span&gt;,E);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;, E);\n    &lt;span class=\"hljs-built_in\"&gt;sscanf&lt;/span&gt;(str,&lt;span class=\"hljs-string\"&gt;&amp;#34;%*[^;]%*[^&amp;#61;]&amp;#61;%s&amp;#34;&lt;/span&gt;,F);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;, F);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num1, num2, num3, num4, num5, num6, x, y;\n    num1 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;atoi&lt;/span&gt;(A);\n    num2 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;atoi&lt;/span&gt;(B);\n    num3 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;atoi&lt;/span&gt;(C);\n    num4 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;atoi&lt;/span&gt;(D);\n    num5 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;atoi&lt;/span&gt;(E);\n    num6 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;atoi&lt;/span&gt;(F);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,num1);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,num2);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,num3);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,num4);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,num5);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,num6);\n    &lt;span class=\"hljs-comment\"&gt;//x &amp;#61; (num1 * num5 -num2 * num6) / (num1 * num5 - num2 * num4);&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//printf(&amp;#34;%d,&amp;#34;,x);&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//x&amp;#61;(CE-BF)/(AE-bD)&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//y&amp;#61;(CD-AF)/(BD-aE)&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["C语言char类型字符串里的数字转换到int就变成0了，六个变了五个，看不出问题", ["char字符串里都是数字，想转换成int类型进行计算，结果转换出来就是一堆0。", "没有报错", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n", "//Ax+By=C", "\n", "//Dx+Ey=F", "\n", "//x=(CE-BF)/(AE-bD)", "\n", "//y=(CD-AF)/(BD-aE)", "\n", "int", " ", "main", "()", "{\n    ", "char", " A[] = ", "\"\"", ";\n    ", "char", " B[] = ", "\"\"", ";\n    ", "char", " C[] = ", "\"\"", ";\n    ", "char", " D[] = ", "\"\"", ";\n    ", "char", " E[] = ", "\"\"", ";\n    ", "char", " F[] = ", "\"\"", ";\n    ", "printf", "(", "\"请按照以下格式输入方程组 Ax+By=C;Dx+Ey=F\\n\"", ");\n    ", "char", " str[", "32", "] = ", "\"\"", ";\n    ", "scanf", "(", "\"%s\"", ",str);\n    ", "printf", "(", "\"方程组为 %s\\n\"", ", str);\n    ", "sscanf", "(str,", "\"%[^x]\"", ",A);\n    ", "printf", "(", "\"%s\\n\"", ", A);\n    ", "sscanf", "(str,", "\"%*[^+]+%[^y]\"", ",B);\n    ", "printf", "(", "\"%s\\n\"", ", B);\n    ", "sscanf", "(str,", "\"%*[^=]=%[^;]\"", ",C);\n    ", "printf", "(", "\"%s\\n\"", ", C);\n    ", "sscanf", "(str,", "\"%*[^;];%[^x]\"", ",D);\n    ", "printf", "(", "\"%s\\n\"", ", D);\n    ", "sscanf", "(str,", "\"%*[^;]%*[^+]+%[^y]\"", ",E);\n    ", "printf", "(", "\"%s\\n\"", ", E);\n    ", "sscanf", "(str,", "\"%*[^;]%*[^=]=%s\"", ",F);\n    ", "printf", "(", "\"%s\\n\"", ", F);\n    ", "int", " num1, num2, num3, num4, num5, num6, x, y;\n    num1 = ", "atoi", "(A);\n    num2 = ", "atoi", "(B);\n    num3 = ", "atoi", "(C);\n    num4 = ", "atoi", "(D);\n    num5 = ", "atoi", "(E);\n    num6 = ", "atoi", "(F);\n    ", "printf", "(", "\"%d\\n\"", ",num1);\n    ", "printf", "(", "\"%d\\n\"", ",num2);\n    ", "printf", "(", "\"%d\\n\"", ",num3);\n    ", "printf", "(", "\"%d\\n\"", ",num4);\n    ", "printf", "(", "\"%d\\n\"", ",num5);\n    ", "printf", "(", "\"%d\\n\"", ",num6);\n    ", "//x = (num1 * num5 -num2 * num6) / (num1 * num5 - num2 * num4);", "\n    ", "//printf(\"%d,\",x);", "\n    ", "//x=(CE-BF)/(AE-bD)", "\n    ", "//y=(CD-AF)/(BD-aE)", "\n    ", "return", " ", "0", ";\n}\n\n", "\n", "\n", "尝试了这样写，结果成功了，但原算法出了什么问题呢", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<stdlib.h>", "\n", "int", " ", "main", "()", "\n", "{\n     ", "char", " b[", "18", "];\n     ", "int", " num;\n     ", "scanf", "(", "\"%s\"", ",b);", "//对char型数组进行赋值 如：123456789", "\n     num = ", "atoi", "(b);\n     ", "printf", "(", "\"%d\"", ",num);\n     ", "int", " C = num + ", "10", ";\n     ", "printf", "(", "\"%d\"", ",C);\n     \n     \n    ", "return", " ", "0", ";\n } \n\n", "\n", "其实就是提取数字计算，但系数为1的情况也没啥思路，是不是要用if，但怎么检测呢，刚学实在没啥见识"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\ncin&amp;gt;&amp;gt;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;;\nfor(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;;i&amp;#43;&amp;#43;)\n{\na*&amp;#61;i;\n&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;&amp;#43;&amp;#61;a;\n}\ncout&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["给定输入n，求1!+2!+3!+.+n!。", ["给定输入n，求1!+2!+3!+。+n!。在使用双重循环解决问题的前提下，可以尝试优化算法，使用单重循环解决该问题。", "【输入形式】", "\n", "一个数字n，不超过20", "【输出形式】【输出形式】", "\n", "一个数字，1!+2!+3!+.+n!的结果", "\n", "【样例输入】", "\n", "3", "【样例输出】", "\n", "9", "【样例说明】", "\n", "输入为3，即求1!+2!+3!=1+2+6=9"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;索引错了&lt;br /&gt;&lt;strong&gt;望采纳&lt;/strong&gt;&amp;#xff0c;谢谢&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;    for (int i &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; n - 1; i&amp;#43;&amp;#43;)&lt;/span&gt;\n    {\n        for (int j &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; j &amp;lt; n - i -1; j&amp;#43;&amp;#43;)&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["c语言的起泡排序问题，出现了莫名的数字", ["一个起泡排序的代码，问题是在排序的数列出现大于46的数字时，会变成46.", "\n", "#include<stdio.h>", "\n", "/*\ntime:2022.04.25\nauthor:FZY\n*/", " \n", "void", " SelectSort(", "int", " r[],", "int", " n)\n{\n    ", "int", " ", "index", ";\n    ", "for", "(", "int", " i=", "0", ";i<n;i++)\n    {\n        ", "index", " = i;\n        ", "for", "(", "int", " j=i+", "1", ";j<n;j++)\n        {\n            ", "if", "(r[j]<r[", "index", "])\n                ", "index", " = j;\n        }\n        ", "if", "(", "index", "!=i)\n        {\n            ", "int", " ", "temp", ";\n            ", "temp", " = r[i];\n            r[i] = r[", "index", "];\n            r[", "index", "] = ", "temp", ";\n        }\n    }\n} \n", "void", " BubbleSort(", "int", " r[],", "int", " n)\n{\n    ", "for", "(", "int", " i=", "0", ";i<n", "-1", ";i++)\n    {\n        ", "for", "(", "int", " j=", "0", ";j<n-i;j++)\n        {\n            ", "if", "(r[j]>r[j+", "1", "])\n            {\n                ", "int", " ", "temp", ";\n                ", "temp", "=r[j];\n                r[j]=r[j+", "1", "];\n                r[j+", "1", "]=", "temp", ";\n            }\n        }\n    }\n}\n", "int", " main()\n{\n    ", "int", " r[] = {", "3", ",", "5", ",", "47", ",", "23", ",", "41", ",", "14", ",", "7", ",", "9", ",", "4", "};\n    ", "int", " s[] = {", "2", ",", "5", ",", "3", ",", "9", ",", "24", ",", "47", ",", "43", ",", "21", ",", "4", "};\n    printf(\"选择排序：\\n\");\n    SelectSort(r,", "9", ");\n    ", "for", "(", "int", " i=", "0", ";i<", "9", ";i++)\n    {\n        printf(\"%d  \",r[i]);\n    }\n    printf(\"\\n起泡排序：\\n\");\n    BubbleSort(s,", "9", ");\n    ", "for", "(", "int", " i=", "0", ";i<", "9", ";i++)\n    {\n        printf(\"%d  \",s[i]);\n    } \n    ", "return", " ", "0", ";\n}\n", "\n", "排序数列里边莫名出现了46"]], "Tag": "算法设计"}
{"Answer": "http://www.cnblogs.com/F-itachi/p/9974336.html", "Konwledge_Point": "算法与数字", "Question": ["C语言输出格雷码的问题", ["格雷码是以n位的二进制来表示数。", "\n与普通的二进制表示不同的是，它要求相邻两个数字只能有1个数位不同。", "\n首尾两个数字也要求只有1位之差。", "\n\n", "有很多算法来生成格雷码。以下是较常见的一种：", "\n从编码全0开始生成。", "\n当产生第奇数个数时，只把当前数字最末位改变（0变1，1变0）", "\n当产生第偶数个数时，先找到最右边的一个1，把它左边的数字改变。", "\n用这个规则产生的4位格雷码序列如下：", "\n0000", "\n0001", "\n0011", "\n0010", "\n0110", "\n0111", "\n0101", "\n0100", "\n1100", "\n1101", "\n1111", "\n1110", "\n1010", "\n1011", "\n1001", "\n1000"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n \n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x, count;\n    count &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;x);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n &amp;#61; x;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; number[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (x / &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        number[i&amp;#43;&amp;#43;] &amp;#61; x % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        x &amp;#61; x / &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (x &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            count&amp;#43;&amp;#43;;\n        }\n    }\n    number[i&amp;#43;&amp;#43;] &amp;#61; x % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, count);\n \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; count - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, number[i]);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;);\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; count; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, number[i]);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["c语言对数字判断问题", ["打了好久都没有思路，各位帮忙看看这个", "zjsjhshsudjsnwbe"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;m函数的break有问题&amp;#xff0c;返回的值会出现错误&amp;#xff0c;建议这里的break变成return -1&lt;br /&gt;在主函数里面判断一下&amp;#xff0c;如果返回值是-1&amp;#xff0c;就continue&lt;/p&gt;\n&lt;p&gt;望采纳&amp;#xff01;谢谢&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["在求200到300的素数的时候，为什么输出了除了素数以外的数字，函数到底除了什么问题？", ["在求200到300的素数的时候，为什么输出了除了素数以外的数字，函数到底除了什么问题？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/972073654566137.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["螺旋矩阵最中间的数字无法输出", ["运行一个关于螺旋矩阵的程序，但是当输入的矩阵阶数为奇数时，最中间的数字为0？这是为什么？", "\n", "import", " java.util.Scanner;\n\n", "public", " ", "class", " Main {\n    ", "public", " static ", "void", " main(String[] args) {\n        ", "int", " i,j;\n        ", "int", " n,number;\n        ", "System", ".", "out", ".print(\"请输入矩阵的阶数n:\");\n        Scanner s = ", "new", " Scanner(", "System", ".", "in", ");\n        n=s.nextInt();\n        ", "int", "[][] matrix = ", "new", " ", "int", "[n][n];\n        ", "System", ".", "out", ".print(\"请输入矩阵初始的值number:\");\n        number=s.nextInt();\n        Rmatrix(n,", "0", ",number,matrix);\n        ", "for", " (i=", "0", ";i<n;i++){\n            ", "for", " (j=", "0", ";j<n;j++){\n                ", "System", ".", "out", ".printf(\"%5d\" ,matrix[i][j]);\n            }\n            ", "System", ".", "out", ".print(\"\\n\");\n        }\n    }\n    ", "public", " static  ", "void", " Rmatrix(", "int", " n,", "int", " ", "start", ",", "int", " number,", "int", "[][] m){\n       ", "int", " i;\n       ", "if", "(n<=", "1", "){\n          ", "return", ";\n       }\n       ", "else", "{\n          ", "for", " (i=", "start", ";i<(n", "-1", ");i++){\n              m[i][", "start", "]=number;\n              number++;\n          }\n          ", "for", " (i=", "start", ";i<(n", "-1", ");i++){\n              m[n", "-1", "][i]=number;\n              number++;\n          }\n          ", "for", "(i=(n", "-1", ");i>", "start", ";i", "--){", "\n              m[i][n", "-1", "]=number;\n              number++;\n          }\n          ", "for", "(i=(n", "-1", ");i>", "start", ";i", "--){", "\n              m[", "start", "][i]=number;\n              number++;\n          }\n          ", "start", "++;\n          Rmatrix((n", "-1", "),", "start", ",number,m);\n       }\n    }\n}\n![img](https://img-mid.csdnimg.cn/", "release", "/static/image/mid/ask/", "26193955456617.", "png \"#left\")\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你题目的解答代码如下&amp;#xff1a;&amp;#xff08;如有帮助&amp;#xff0c;望采纳&amp;#xff01;谢谢! 点击我这个回答右上方的&lt;strong&gt;【采纳】&lt;/strong&gt;按钮&amp;#xff09;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;def &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(lst)&lt;/span&gt;&lt;/span&gt;:\n    sl &amp;#61; sorted(enumerate(lst),key&amp;#61;lambda x: x[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(len(lst)):\n        lst[sl[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]] &amp;#61; i\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; lst\nlst &amp;#61; [&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;]\nprint(&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(lst)&lt;/span&gt;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;‘&lt;/p&gt;\n&lt;p&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/36817583462613.png\" /&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["下面这个算法怎么用用python的函数实现？", ["python 能不能设计一个函数，给list（里面是0-15的整数）里的数字最小的变成0，第二小的变成1，第三小的变成2，以此类推"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;数组越界&lt;br /&gt;你的二维数组定义为 int arr[1001][1001]&amp;#xff0c;但是只读入了5行数字&amp;#xff0c;所以当n大于5时&amp;#xff0c;数组会越界。正确的定义应该是 int arr[1001][1001] &amp;#61; {0}&amp;#xff0c;这样数组中的所有元素都会初始化为0&amp;#xff0c;可以避免数组越界问题。&lt;/li&gt;&lt;/ul&gt;\n&lt;ul&gt;&lt;li&gt;贪心算法错误&lt;br /&gt;你的dp转移方程为 dp[i][j]&amp;#61;max(dp[i-1][j],dp[i-1][j-1])&amp;#43;arr[i][j]&amp;#xff0c;这是贪心算法的思想&amp;#xff0c;但是这个思想在本题中不适用。因为你要求的是从顶部到底部的最大路径和&amp;#xff0c;但是这个路径上的数并不一定是每一行中的最大值。例如&amp;#xff0c;在样例中&amp;#xff0c;第1行的5是最大值&amp;#xff0c;但是最大路径和的路径是 7-&amp;gt;6-&amp;gt;9-&amp;gt;3-&amp;gt;2&amp;#xff0c;其中第1行的5并没有被选中。&lt;/li&gt;&lt;/ul&gt;\n&lt;ul&gt;&lt;li&gt;变量重复定义&lt;br /&gt;你在dp_function函数中定义了一个变量 dp&amp;#xff0c;但是这个变量和外面的变量名相同&amp;#xff0c;会导致变量重复定义的错误。建议将内部变量的名称更改为 dpArr。&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "算法与数字", "Question": ["C++动态规划引入数字三角形", ["原题洛谷：", "https://www.luogu.com.cn/problem/P1216", "照葫芦画瓢第一次写的DP，但是只通过了2/9，不知道哪里有问题，请求指导", "\n", "#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nint dp_function(int n){\n    int arr[", "1001", "][", "1001", "];\n    int dp[", "1001", "][", "1001", "];   //dp[i][j]=max(dp[i", "-1", "][j],dp[i", "-1", "][j", "-1", "])+arr[i][j]//request=dp[n", "-1", "][n", "-1", "]\n    for(int i=", "0", ";i<", "5", ";i++){\n        for(int j=", "0", ";j<=i;j++){\n        scanf(", "\"%d\"", ",&arr[i][j]);\n        if(i==", "0", ")dp[i][j]=arr[i][j];\n        if(j==", "0", ")dp[i][j]=dp[i", "-1", "][j]+arr[i][j];\n        }\n    }\n    for(int i=", "1", ";i<n;i++){\n        for(int j=", "1", ";j<n;j++){\n            dp[i][j]=max(dp[i", "-1", "][j],dp[i", "-1", "][j", "-1", "])+arr[i][j];\n        }\n    }\n    return dp[n", "-1", "][n", "-1", "];\n}\n\nint main(){\n    int n;\n    //dp[i][j]=max(dp[i", "-1", "][j],dp[i", "-1", "][j", "-1", "])+dp[i][j]//request=dp[n", "-1", "][n", "-1", "]\n    scanf(", "\"%d\"", ",&n);\n    printf(", "\"%d\"", ",dp_function(n));\n    return ", "0", ";\n} \n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你错在把数组分成了两半去自找最值&amp;#xff0c;然后再比较这两个值&amp;#xff0c;如&amp;#xff1a;5 9 1 3 4 | 2 6 10 12&amp;#xff0c;分别找到9|12&amp;#xff0c;明显最大不是这两个呢。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["请问各位C语言求一组数据中最大的两个数和最小的两个数，我的代码错在哪，该怎么修改", ["#", "include", " <stdio.h>\n#", "include", " <stdlib.h>\n", "int", " get", "_max(", "int", " ", "b", "[],", "int", " ", "p", ",", "int", " ", "q", ")", ";\n", "int", " get", "_min(", "int", " ", "b", "[],", "int", " ", "p", ",", "int", " ", "q", ")", ";\n", "int", " main", "()", "\n{\n    ", "int", " num,i,max1,max2,big_max,small_max,min1,min2,big_min,small_min;\n    scanf(", "\"%d\"", ",&num);\n    ", "int", " a", "[", "num", "]", ";\n    ", "for", "(i=", "0", ";i<num;i++)\n        scanf(", "\"%d\"", ",&a", "[", "i", "]", ");\n    ", "/**********  Begin  **********/", "\n    max1=get", "_max(", "a", "[],0,", "num", "/", "2-1)", ";\n    max2=get", "_max(", "a", "[],", "num", "/", "2,", "num", "-1)", ";\n    ", "if", "(max1>max2)\n    {\n        big_max=max1;\n        small_max=max2;\n    }\n    ", "else", "\n    {\n        big_max=max2;\n        small_max=max1;\n    }\n    min1=get", "_min(", "a", "[],0,", "num", "/", "2-1)", ";\n    min2=get", "_min(", "a", "[],", "num", "/", "2,", "num", "-1)", ";\n    ", "if", "(min1<min2)\n    {\n        big_min=min2;\n        small_min=min1;\n    }\n    ", "else", "\n    {\n        big_min=min1;\n        small_min=min2;\n    }\n    printf(", "\"max1=%d max2=%d\\n\"", ",big_max,small_max);\n    printf(", "\"min1=%d min2=%d\"", ",small_min,big_min);\n    return ", "0", ";\n}\n", "int", " get", "_max(", "int", " ", "b", "[],", "int", " ", "p", ",", "int", " ", "q", ")", "\n{\n    ", "int", " k,max;\n    ", "if", "(p<q)\n    {\n        max=b", "[", "p", "]", ";\n        ", "for", "(k=p+", "1", ";k<=q;k++)\n        {\n            ", "if", "(b", "[", "k", "]", ">max)\n            {\n                max=b", "[", "k", "]", ";\n            }\n        }\n    }\n    return max;\n}\n", "int", " get", "_min(", "int", " ", "b", "[],", "int", " ", "p", ",", "int", " ", "q", ")", "\n{\n    ", "int", " k,min;\n    ", "if", "(p<q)\n    {\n        min=b", "[", "p", "]", ";\n        ", "for", "(k=p+", "1", ";k<=q;k++)\n        {\n            ", "if", "(b", "[", "k", "]", "<min)\n            {\n                min=b", "[", "k", "]", ";\n            }\n        }\n    }\n    return min;\n}\n\n\n\n    ", "/**********  End  **********/", "\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;cin&amp;gt;&amp;gt;s[i]改成getline(cin, s[i], &amp;#39;\\32&amp;#39;)&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["怎样才能使矩阵每个数字间有一个空格", ["请问这段代码如果想实现输入矩阵时每个数字间都有间隔该怎么改", "\n", "\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "<string>", "\n\n", "#", "define", " maxn 105", "\n", "using", " ", "namespace", " std;\n\nstring s[maxn];\n", "long", " ", "long", " a[maxn][maxn];\n", "long", " ", "long", " p[maxn][maxn];\n\n", "int", " ", "main", "()", "\n", "{\n    ", "long", " ", "long", " n,m;\n    ", "while", "(cin>>n>>m)\n    {\n    ", "for", "(", "int", " i=", "1", ";i<=n;i++)\n    {\n        cin>>s[i];\n        ", "for", "(", "int", " j=", "1", ";j<=m;j++)\n            a[i][j]=s[i][j", "-1", "]-", "'0'", ";    \n    }\n    ", "for", "(", "int", " i=", "1", ";i<=n;i++)\n        ", "for", "(", "int", " j=", "1", ";j<=m;j++)\n            p[i][j]=", "max", "(p[i", "-1", "][j],p[i][j", "-1", "])+a[i][j];\n    cout<<p[n][m]<<endl;\n}\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "问题已解决，原因是ios微信上调用此js接口，传入的timestamp必须是字符串类型，我之前传的是数字类型。安卓上无此问题。\r\n见知乎：\r\nhttps://www.zhihu.com/question/53490788/answer/136897593?group_id=794851608767893504", "Konwledge_Point": "算法与数字", "Question": ["微信企业号页面打开企业通讯录选人报错：fail_invalid signature，请问如何解决？", ["企业号页面中，想打开企业通讯录选人。", "\naccess_token获取成功；", "\njsapi_ticket获取成功；", "\ngroup_ticket也获取成功；", "\nwx.config调用成功（由于debug模式，弹出ok，说明jsapi_ticket的签名算法是正确的）；", "\n\n", "但是的就是调用WeixinJSBridge.invoke(\"openEnterpriseContact\", {......}, function(){......})的时候，总是报fail_invalid signature的错误。", "\n签名算法与wx.config中用的签名算法一样，签名用的字符串也是按照官网开发文档拼接的。", "\n\n", "以下是我的代码片段：", "\n\n", "而且，我已经按照官方文档附录6的方式检查了：", "\n1、企业管理组权限验证签名算法无法验证，因为这个工具只能验证jsapi的签名算法。企业管理组权限验证签名算法与jsapi_ticket签名算法相同，并通过了", "http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign", " 此页面工具的验证。", "\n2、wx.config中的nonceStr是大写S，并且timestamp和noncestr与签名中的一样。", "\n3、url是完整的，以http://开头，与location.href.split('#')[0]相同，我的这个url没有get参数。", "\n4、检查过，一样。", "\n5、access_token和group_ticket都是缓存的。", "\n6、检查了，是一样的。", "\n\n", "页面获取group_ticket签名的controller：", "\n\n", "签名的方法：", "\n\n", "请问是哪里出了问题？", "\n\n", "恳请有能之士帮下忙，帮我解决下这个问题，非常感谢。", "\n\n", "\n\n", "2016年12月22日修改", "\n\n", "问题已解决，原因是ios微信上调用此js接口，传入的timestamp必须是字符串类型，我之前传的是数字类型。安卓上无此问题。", "\n见知乎：", "https://www.zhihu.com/question/53490788/answer/136897593?group_id=794851608767893504"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; res &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cnt &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    cin&amp;gt;&amp;gt;a;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; pre &amp;#61; a;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(cin&amp;gt;&amp;gt;a,a)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a&amp;#61;&amp;#61;pre) cnt&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; cnt &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        res &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(res,cnt);\n        pre &amp;#61; a;\n    }\n    cout&amp;lt;&amp;lt;res&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;答案应该就是这&amp;#xff0c;cnt代表连续的数字的个数&amp;#xff0c;res随时更新答案&amp;#xff0c;pre代表前一个数字&amp;#xff0c;当当前数a等于前一个数pre时候&amp;#xff0c;cnt加一&amp;#xff08;连续相同子序列长度加一&amp;#xff09;&amp;#xff0c;否则cnt为1&amp;#xff08;重新开始了一个子序列&amp;#xff0c;初始长度为1&amp;#xff09;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["相同数字的最大连续子序列", ["要在规定时间里面完成，内存不能超。", "\n"]], "Tag": "算法设计"}
{"Answer": "```\r\n#include &lt;stdio.h&gt;\r\n\r\nint isLeapYear(int year)\r\n{\r\n\tif (year % 100 == 0 &amp;&amp; year % 400 != 0) return 0;\r\n\tif (year % 4 != 0) return 0;\r\n\treturn 1;\r\n}\r\nint main()\r\n{\r\n\tint y;\r\n\tscanf(\"%d\", &amp;y);\r\n\tif (isLeapYear(y))\r\n\t\tprintf(\"%dÊÇÈòÄê!\", y);\r\n\telse\r\n\t\tprintf(\"%d²»ÊÇÈòÄê!\", y);\r\n}\r\n```\r\n\r\n![图片说明](https://img-ask.csdn.net/upload/201904/08/1554700431_328246.gif)", "Konwledge_Point": "算法与数字", "Question": ["用C制作一个闰年判别程序", ["使用C语言编写一个程序，在主函数中从用户处读取年份（整数）。在主函数中，有一个对函数的调用，该函数以参数形式接收年份。该函数确定给定年份是否为闰年。如果给定年份是闰年，则函数返回1（数字1）。否则，函数返回0（零）。", "\n\n", "确定闰年的算法如下：", "\n\n", "如果年份可以被数字400整除", "\n\n", "那一年就是闰年", "\n\n", "否则，如果年份可以被数字100整除", "\n\n", "那么年份不是闰年", "\n\n", "否则，如果年份可以被数字4整除", "\n\n", "那一年就是闰年", "\n\n", "否则，年份不是闰年。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff1a;我们看一下你的问题&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;**1&amp;lt;&amp;lt;get(i,j)是什么意思&amp;#xff1f;**&lt;/p&gt;\n&lt;p&gt;这个是位运算&amp;#xff0c;&amp;lt;&amp;lt;是位左移运算符&amp;#xff0c;比如1&amp;lt;&amp;lt;3&amp;#xff0c;是将1的二进制位置左侧插入3个0&amp;#xff0c;即$0_2&amp;#61;00_2,1_2&amp;#61;01_2,2_2&amp;#61;10_2,0_2&amp;#61;1000_2$ &amp;#xff0c;也就是将1的二进制位向左挪动了3个记号的位置&amp;#xff0c;这个例子相当于计算2的立方。所以这句话中&amp;#xff0c;1&amp;lt;&amp;lt;get(i,j)表示将1的二进制数向左移动get(i,j)位所得的数。另外get(i,j)函数表示&amp;#xff0c;将4*4矩阵看作了一个一维的16个数的序列&amp;#xff0c;并给每个数一个编号&amp;#xff0c;编号规则为先列后行&amp;#xff08;列是第一位&amp;#xff0c;从0开始&amp;#xff09;&amp;#xff0c;即(0,0)的编号为0&amp;#xff0c;(0,1)的编号为1&amp;#xff0c;直到(3,3)的编号为15。所以get(i,j)就取得了一个坐标对应的编号。&lt;/p&gt;\n&lt;p&gt;k&amp;gt;&amp;gt;i&amp;amp;1是什么意思&amp;#xff1f;&lt;/p&gt;\n&lt;p&gt;这句话中&amp;#xff0c;&amp;gt;&amp;gt;是右移位运算符,即将一个数向右移动几位&amp;#xff0c;比如3&amp;gt;&amp;gt;1&amp;#xff0c;则结果是1&amp;#xff0c;即从个位往右第一个数变为了1&amp;#xff0c;由于题目中&amp;#xff0c;状态是用一个整型变量state存储的&amp;#xff0c;即用整型表示了状态&amp;#xff0c;所以这里可以用位运算进行计算。如k取二进制1111表示4*4矩阵都打开&amp;#xff0c;当i&amp;#61;2时&amp;#xff0c;则k&amp;gt;&amp;gt;i&amp;amp;1就表示k向右移动两位&amp;#xff0c;即从k的号位开始&amp;#xff08;前面用了0补位&amp;#xff09;&amp;#xff0c;第一位向右移动到了二进制的个位上&amp;#xff0c;这个时候&amp;#xff0c;&amp;amp;1就表示和1取与运算&amp;#xff0c;即相当于后一位取反&amp;#xff0c;前面全部变成了零&amp;#xff0c;这个时候就得到&amp;#xff0c;3.&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于#算法#的问题，请各位专家解答！", ["飞行员兄弟", "“飞行员兄弟”这个游戏，需要玩家顺利的打开一个拥有 16", " 个把手的冰箱。", "\n", "已知每个把手可以处于以下两种状态之一：打开或关闭。", "\n", "只有当所有把手都打开时，冰箱才会打开。", "\n", "把手可以表示为一个 4×4", " 的矩阵，您可以改变任何一个位置 [i,j]", " 上把手的状态。", "\n", "但是，这也会使得第 i", " 行和第 j", " 列上的所有把手的状态也随着改变。", "\n", "请你求出打开冰箱所需的切换把手的次数最小值是多少。", "\n", "输入格式", "\n", "输入一共包含四行，每行包含四个把手的初始状态。", "\n", "符号 + 表示把手处于闭合状态，而符号 - 表示把手处于打开状态。", "\n", "至少一个手柄的初始状态是关闭的。", "\n", "输出格式", "\n", "第一行输出一个整数 N", "，表示所需的最小切换把手次数。", "\n", "接下来 N", " 行描述切换顺序，每行输出两个整数，代表被切换状态的把手的行号和列号，数字之间用空格隔开。", "\n", "注意：如果存在多种打开冰箱的方式，则按照优先级整体从上到下，同行从左到右打开。", "\n", "数据范围", "\n", "1≤i,j≤4", "\n", "输入样例：", "\n", "-+--", "\n", "\n", "-+--", "输出样例：", "\n", "6", "1 1", "1 3", "1 4", "4 1", "4 3", "4 4", "难度： 简单", "时/空限制： 1s / 64MB", "\n", "\n```c++\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "<algorithm>", "\n", "#", "include", " ", "<vector>", "\n", "using", " ", "namespace", " std;\n", "typedef", " pair<", "int", ",", "int", ">  PII;\n", "int", " change[", "4", "][", "4", "];\n", "int", " ", "get", "(", "int", " x,", "int", " y)", "\n", "{\n    ", "return", " x*", "4", "+y;\n}\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " state=", "0", ";\n    ", "for", "(", "int", " i=", "0", ";i<", "4", ";i++)\n    {\n        string line;\n        cin>>line;\n        ", "for", "(", "int", " j=", "0", ";j<", "4", ";j++)\n            ", "if", "(line[j]==", "'+'", ")\n                state+=", "1", "<<", "get", "(i,j);", "//**1<<get(i,j)是什么意思？**", "\n    }\n    ", "for", "(", "int", " i=", "0", ";i<", "4", ";i++)\n        ", "for", "(", "int", " j=", "0", ";j<", "4", ";j++)\n        {\n            ", "for", "(", "int", " k=", "0", ";k<", "4", ";k++)\n            {\n                change[i][j]+=", "1", "<<", "get", "(i,k);\n                change[i][j]+=", "1", "<<", "get", "(k,j);\n            }\n            change[i][j]-=", "1", "<<", "get", "(i,j);\n        }\n    vector<PII>res;\n    ", "for", "(", "int", " k=", "0", ";k<", "1", "<<", "16", ";k++)\n    {\n        ", "int", " now=state;\n        vector<PII>path;\n        ", "for", "(", "int", " i=", "0", ";i<", "16", ";i++)\n            ", "if", "(k>>i&", "1", ")", "//k>>i&1是什么意思？", "\n            {\n                ", "int", " x=i/", "4", ",y=i%", "4", ";\n                now^=change[x][y];\n                path.", "push_back", "({x,y});\n            }\n        ", "if", "(!now&&(res.", "empty", "()||res.", "size", "()>path.", "size", "()))res=path;\n    }\n    cout<<res.", "size", "()<<endl;\n    ", "for", "(", "auto", " p:res) cout<<p.first+", "1", "<<", "' '", "<<p.second+", "1", "<<endl;", "//p:res中：的作用是什么？", "\n    ", "return", " ", "0", ";\n}\n\n\n", "\n", "```"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;换一个角度&amp;#xff0c;如果foo返回的是0-1的随机数&amp;#xff0c;这时我们只需要建立一个二进制的随机数生成器就可以满足要求了。&lt;/p&gt;\n&lt;p&gt;现在foo返回1-5&amp;#xff0c;那么需要减1&amp;#xff0c;建立5进制随机数生成器数&amp;#xff0c;产生的随机数最大值必须大于等于n&amp;#xff0c;如果生成的随机数超过n就重新生成一次&amp;#xff0c;直到小于n。&lt;/p&gt;\n&lt;p&gt;或者直接生成5进制下非常非常大的数&amp;#xff0c;然后对n取余数也是可以的&amp;#xff0c;不过需要注明可以忽略。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["一道C语言的算法问题", ["有一个函数 foo() 能够返回 1～5的随机数，那么请使用 foo（），设计一个程序实现 1～n的随机数。要求输出的随机数足够随机，有机会取值1~n的任意数字。前几天面试遇到的，没看懂什么意思啊"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如下&amp;#xff0c;全局变量是不行的&amp;#xff0c;在函数里面是可以的&amp;#xff0c;并且变长的数组不能初始化&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; len;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; arr[len]; 全局变量好像是不行的\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; arr_1[i]; &lt;span class=\"hljs-comment\"&gt;//函数内部是可以&amp;#xff0c;i可以读取&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;i);\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["怎么可以让输入的数组个数是任意输入的", ["这个代码输入的数组元素的个数是固定的，怎么可以让输入的数组个数是任意输入的，我在主函数中输入COUNT的值，但提醒我", "在“int”左侧忽略，当未声明变量时。 ", "\n", "#include", "<", "stdio.h", ">", "\n#define ", "COUNT", " ", "6", "\nint a[", "COUNT", "], count ", "=", " ", "COUNT", ", k, m, b[", "COUNT", "],t,c[", "COUNT", "];\n\nvoid oarray(){  ", "//输出原数组", "\n    printf(", "\"原数组:\"", ");\n    ", "for", " (k ", "=", " ", "0", "; k ", "<", " ", "COUNT", "; k", "++", ")\n        printf(", "\"%5d\"", ", b[k]);\n    printf(", "\"", "\\n", "\"", ");\n}\n\n", "//求最大值", "\nvoid ", "max", "(){\n    int i", "=", "0", ", max", "=", "0", ";\n    max", "=", "a[", "0", "];\n    ", "for", "(i", "=", "1", ";i", "<", "COUNT", ";i", "++", "){\n        ", "if", "(max", "<", "a[i]){\n            max", "=", "a[i];\n        }\n    }\n    printf(", "\"最大值:%d", "\\n", "\"", ",max);\n}\n\n", "//求最小值", "\nvoid ", "min", "(){\n    int j", "=", "0", ", min", "=", "0", ";\n    min", "=", "a[", "0", "];\n    ", "for", "(j", "=", "1", ";j", "<", "COUNT", ";j", "++", "){\n        ", "if", "(min", ">", "a[j]){\n            min", "=", "a[j];\n        }\n    }\n    printf(", "\"最小值:%d", "\\n", "\"", ",min);\n\n}\nvoid sort(){  ", "//排序算法", "\n    ", "for", "(k", "=", "0", ";k", "<", "COUNT", "-", "1", ";k", "++", ")  ", "//排序数组", "\n            ", "for", "(m", "=", "k", "+", "1", ";m", "<", "COUNT", ";m", "++", ")\n                ", "if", " (c[k] ", ">", " c[m]) {\n                    t ", "=", " c[k];\n                    c[k] ", "=", " c[m];\n                    c[m] ", "=", " t;\n                }\n        ", "for", " (k ", "=", " ", "0", "; k ", "<", " ", "COUNT", "; k", "++", ")\n            a[k] ", "=", " c[k];\n        printf(", "\"排序后数组为:\"", ");\n        ", "for", " (k ", "=", " ", "0", "; k ", "<", " ", "COUNT", "; k", "++", ")\n        printf(", "\"%5d\"", ", c[k]);\n    printf(", "\"", "\\n", "\"", ");\n}\n\nvoid darray(){  ", "//删除重复数组", "\n       ", "/* int  count = COUNT;*/", "\n\n        ", "for", "(k", "=", "0", ";k", "<", "COUNT", "-", "1", ";k", "++", ")  ", "//排序数组", "\n            ", "for", "(m", "=", "k", "+", "1", ";m", "<", "COUNT", ";m", "++", ")\n                ", "if", " (c[k] ", ">", " c[m]) {\n                    t ", "=", " c[k];\n                    c[k] ", "=", " c[m];\n                    c[m] ", "=", " t;\n                }\n        ", "for", " (k ", "=", " ", "0", "; k ", "<", " ", "COUNT", "; k", "++", ")\n            a[k] ", "=", " c[k];\n    \n    ", "for", " (k ", "=", " count ", "-", " ", "1", "; k ", ">", " ", "0", "; k", "--", ") ", "//删除重复数组", "\n        ", "if", " (a[k] ", "==", " a[k ", "-", " ", "1", "]) {\n            ", "for", " (m ", "=", " k ", "-", " ", "1", "; m ", "<", " ", "COUNT", " ", "-", " ", "1", "; m", "++", ")\n                a[m] ", "=", " a[m ", "+", " ", "1", "];\n            count", "--", ";\n        }\n            printf(", "\"删除重复后的数组:\"", ");\n    ", "for", " (k ", "=", " ", "0", "; k ", "<", " count; k", "++", ")\n        printf(", "\"%5d\"", ", a[k]);\n    printf(", "\"", "\\n", "\"", ");\n\n\n}\n \nvoid choose(){  ", "//选项", "\n    printf(", "\"", "\\n", "\"", ");\n    printf(", "\"选择选项:", "\\n", "\\n", "\"", ");\n    printf(", "\"1.输出原数组", "\\n", "\\n", "\"", ");\n    printf(", "\"2.输出排序后数组", "\\n", "\\n", "\"", ");\n    printf(", "\"3.输出删除重复后的数组", "\\n", "\\n", "\"", ");\n    printf(", "\"4.输出最大值", "\\n", "\\n", "\"", ");\n    printf(", "\"5.输出最小值", "\\n", "\\n", "\"", ");\n    printf(", "\"6.输出所有", "\\n", "\\n", "\"", ");\n    printf(", "\"7.退出", "\\n", "\\n", "\"", ");\n    printf(", "\"请输入选项   1  2  3  4  5  6  7", "\\n", "\"", ");\n    int x;\n    printf(", "\"", "\\n", "\\n", "\"", ");\n    ", "do", "{\n        scanf(", "\"%d\"", ",", "&", "x);\n        printf(", "\"", "\\n", "\"", ");\n        ", "switch", "(x){\n        ", "case", " ", "1", ": oarray(); printf(", "\"", "\\n", "退出按7", "\\n", "\\n", "\"", ");    ", "break", ";  \n        ", "case", " ", "2", ": sort(); printf(", "\"", "\\n", "退出按7", "\\n", "\\n", "\"", ");      ", "break", "; \n        ", "case", " ", "3", ": darray(); printf(", "\"", "\\n", "退出按7", "\\n", "\\n", "\"", ");    ", "break", "; \n        ", "case", " ", "4", ": ", "max", "();    printf(", "\"", "\\n", "退出按7", "\\n", "\\n", "\"", ");      ", "break", "; \n        ", "case", " ", "5", ": ", "min", "();  printf(", "\"", "\\n", "退出按7", "\\n", "\\n", "\"", ");      ", "break", "; \n        ", "case", " ", "6", ": oarray();printf(", "\"", "\\n", "\"", ");sort();printf(", "\"", "\\n", "\"", ");darray();printf(", "\"", "\\n", "\"", ");", "max", "();printf(", "\"", "\\n", "\"", ");", "min", "();   printf(", "\"", "\\n", "退出按7", "\\n", "\\n", "\"", ");", "break", "; \n        ", "case", " ", "7", ": printf(", "\"结束", "\\n", "\\n", "\"", ");    ", "break", ";\n        ", "default", ":", "break", ";\n        }\n    }", "while", "(x", "!=", "7", ");\n}\n\n\nvoid main(){\n    printf(", "\"Input %d data in order:", "\\n", "\"", ", ", "COUNT", ");\n    ", "for", " (k ", "=", " ", "0", "; k ", "<", " ", "COUNT", "; k", "++", ") {  \n            printf(", "\"a[%d]=\"", ", k);\n            scanf(", "\"%d\"", ", ", "&", "a[k]);\n            b[k] ", "=", " a[k], c[k] ", "=", " a[k];\n    }\n    oarray();\n    choose();\n\n\n    ", "//system(\"pause\");", "\n\n\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;是你创建链表的时候多创建了一个节点&lt;br /&gt;你先创建了 head 首元节点之后 for (i &amp;#61; 1; i &amp;lt;&amp;#61; pMng-&amp;gt;nNodeCnt; &amp;#43;&amp;#43;i) 循环NodeCnt次 (比如NodeCnt&amp;#61;10)&lt;br /&gt;一共创建了 NodeCnt 加 1  (10&amp;#43;1&amp;#61;11)个节点&lt;br /&gt;但是你  Print(pMng)函数只输出 10个节点,最后一个没有输出&lt;br /&gt;而排序时是遍历全部11个节点,最后一个没有输出的节点也参与排序&lt;br /&gt;再次  Print(pMng)输出还是只输出前 10个节点,之前没有输出的值排到了前面所以输出了, 排到最后的最大值又没有输出&lt;/p&gt;\n&lt;p&gt;你把for (i &amp;#61; 1; i &amp;lt;&amp;#61; pMng-&amp;gt;nNodeCnt; &amp;#43;&amp;#43;i)  中i&amp;#61;1 改成 i&amp;#61;2 即可&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "算法与数字", "Question": ["双向链表的排序问题，结果为什么总有一个奇奇怪怪的数", ["写了一个随机双向链表，排序操作有问题，导致我在进行排序的时候，总是会出现一个不知道哪来的数，请大家帮我看看是函数写的有问题还是在创建链表的时候我多创了空间导致他自己写了个数在里面。", "\n", "这个是我写的结构体：", "typedef struct ltbl", "{", "    struct ltbl* pPre;      //前一个", "    struct ltbl* pNxt;      //后一个", "    int nKey;                 //结点里的值", "    unsigned char ucDummy[32];    //备用", "}LTBL;", "\n", "typedef struct mng", "{", "    int nNodeCnt;         //链表长度", "    LTBL* pHead;         //指向头指针", "}MNG;", "\n", "这里是我的创建和排序：", "int TBLCreate (MNG* pMng, int nCnt)", "{", "    int i;", "    LTBL* head = NULL;", "    LTBL* p = NULL;", "    LTBL* q = NULL;", "    head = (LTBL*)malloc(sizeof(LTBL));", "    pMng->pHead = head;", "    srand((unsigned int)time(0));", "    pMng->nNodeCnt = nCnt;", "\n", "if(NULL ", "=", "=", " head)\n{\n    printf(", "\"WRONG!\"", ")", ";", "\n    return NG", ";", "\n}\nhead->pPre ", "=", " NULL", ";", "\nhead->nKey ", "=", " rand() % ", "200", ";", "\nhead->pNxt ", "=", " NULL", ";", "\n", "p", " ", "=", " head", ";", "\nfor(i", "=", "1", "; i<=pMng->nNodeCnt; ++i)", "\n{\n    q ", "=", " (LTBL*)malloc(sizeof(LTBL))", ";", "\n    if(NULL ", "=", "=", " q)\n    {\n        printf(", "\"WRONG!\"", ")", ";", "\n        return NG", ";", "\n    }\n    q->nKey ", "=", " rand() % ", "200", ";", "\n    p->pNxt ", "=", " q", ";", "\n    q->pPre ", "=", " p", ";", "\n    q->pNxt ", "=", " NULL", ";", "\n    p ", "=", " q", ";", "\n}\nq->pNxt ", "=", " NULL", ";", "\nreturn OK", ";", "\n", "\n", "}", "\n", "void TBLSort(MNG* pMng, int nFlg)", "{", "    int t = 0;", "    LTBL* head;", "    LTBL* p = NULL;", "    LTBL* q = NULL;", "    head = pMng->pHead;", "    if(0 == nFlg)", "    {", "        for(p=head; p!=NULL; p=p->pNxt)", "        {", "            for(q=p->pNxt; q!=NULL; q=q->pNxt)", "            {", "                if(p->nKey > q->nKey)", "                {", "                    t = q->nKey;", "                    q->nKey = p->nKey;", "                    p->nKey = t;", "                }", "            }", "        }", "    }", "    if(1 == nFlg)", "    {", "        for(p=head; p!=NULL; p=p->pNxt)", "        {", "            for(q=p->pNxt; q!=NULL; q=q->pNxt)", "            {", "                if(p->nKey < q->nKey)", "                {", "                    t = q->nKey;", "                    q->nKey = p->nKey;", "                    p->nKey = t;", "                }", "            }", "        }", "    }", "    Print(pMng);", "}", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法 ：我换的是结点里面的值 如果有人能告诉我怎么换结点就更好了 我试了很多办法都运行不了"]], "Tag": "算法设计"}
{"Answer": "&lt;h5 id=\"如果我的回答对你有帮助&amp;#xff0c;请点击旁边的采纳按钮&amp;#xff0c;谢谢\"&gt;如果我的回答对你有帮助&amp;#xff0c;请点击旁边的采纳按钮&amp;#xff0c;谢谢&lt;/h5&gt;\n&lt;hr /&gt;\n&lt;p&gt;你这可能是思路没问题&amp;#xff0c;写代码的时候糊涂了&lt;/p&gt;\n&lt;p&gt;因为这个代码写到后面意思就不对了&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;思路应该是这样的&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1.将所有数字排序&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;for(i&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;/span&gt;\n        for(j&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;i&lt;span class=\"hljs-comment\"&gt;;j&amp;gt;0&amp;amp;&amp;amp;array[j]&amp;lt;array[j-1];j--){&lt;!-- --&gt;&lt;/span&gt;\n            temp&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;array[j]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n            array[j]&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;array[j-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n            array[j-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;temp&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n        }\n    }\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;2.统计次数&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;result&lt;span class=\"hljs-comment\"&gt;[0]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[0]&lt;/span&gt;&amp;#61;array&lt;span class=\"hljs-comment\"&gt;[0]&lt;/span&gt;;\n    result&lt;span class=\"hljs-comment\"&gt;[0]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[1]&lt;/span&gt;&amp;#61;1;\n    count&amp;#61;0; \n    for(i&amp;#61;1;i&amp;lt;n;i&amp;#43;&amp;#43;){\n        if(array&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&amp;#61;&amp;#61;result&lt;span class=\"hljs-comment\"&gt;[count]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[0]&lt;/span&gt;){\n            result&lt;span class=\"hljs-comment\"&gt;[count]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[1]&lt;/span&gt;&amp;#43;&amp;#43;;\n        }else{\n            count&amp;#43;&amp;#43;;\n            result&lt;span class=\"hljs-comment\"&gt;[count]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[0]&lt;/span&gt;&amp;#61;array&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;;\n            result&lt;span class=\"hljs-comment\"&gt;[count]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[1]&lt;/span&gt;&amp;#61;1;\n        }\n    }\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;3.对次数进行排序&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;    for(i&amp;#61;1;i&amp;lt;&amp;#61;count;i&amp;#43;&amp;#43;){\n        for(j&amp;#61;i;j&amp;gt;0&amp;amp;&amp;amp;result&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[1]&lt;/span&gt;&amp;gt;result&lt;span class=\"hljs-comment\"&gt;[j-1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[1]&lt;/span&gt;;j--){\n            temp&amp;#61;result&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[0]&lt;/span&gt;;\n            result&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[0]&lt;/span&gt;&amp;#61;result&lt;span class=\"hljs-comment\"&gt;[j-1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[0]&lt;/span&gt;;\n            result&lt;span class=\"hljs-comment\"&gt;[j-1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[0]&lt;/span&gt;&amp;#61;temp;\n            \n            temp&amp;#61;result&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[1]&lt;/span&gt;;\n            result&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[1]&lt;/span&gt;&amp;#61;result&lt;span class=\"hljs-comment\"&gt;[j-1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[1]&lt;/span&gt;;\n            result&lt;span class=\"hljs-comment\"&gt;[j-1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[1]&lt;/span&gt;&amp;#61;temp;\n        }\n    }\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;具体代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;/*\n问题描述 \n 给定 n 个整数&amp;#xff0c;请统计出每个整数出现的次数&amp;#xff0c;按出现次数从多到少\n的顺序输出。\n输入格式 \n 输入的第一行包含一个整数 n&amp;#xff0c;表示给定数字的个数。\n 第二行包含 n 个整数&amp;#xff0c;相邻的整数之间用一个空格分隔&amp;#xff0c;表示所给定\n的整数。\n输出格式 \n 输出多行&amp;#xff0c;每行包含两个整数&amp;#xff0c;分别表示一个给定的整数和它出现的\n次数。按出现次数递减的顺序输出。如果两个整数出现的次数一样多&amp;#xff0c;则\n先输出值较小的&amp;#xff0c;然后输出值较大的。(1 ≤ n ≤ 1000&amp;#xff0c;)\n样例输入 \n12\n5 2 3 3 1 3 4 2 5 2 3 5\n样例输出 \n3 4\n2 3\n5 3\n1 1\n4 1\n*/&lt;/span&gt;\n#include&amp;lt;stdio.h&amp;gt;\nint main(void){\n    int n;\n    int i,j,temp,count;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入数字个数&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    int array[n];\n    int result[n][&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;];\n    //输入数据 \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入数据&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    for(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;array[i]);\n    }\n    //对数字排序\n    for(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n        for(j&amp;#61;i;j&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;amp;&amp;amp;array[j]&amp;lt;array[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;];j--){\n            temp&amp;#61;array[j];\n            array[j]&amp;#61;array[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;];\n            array[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61;temp;\n        }\n    }\n    //统计次数\n    result[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;array[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n    result[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    count&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; \n    for(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n        if(array[i]&amp;#61;&amp;#61;result[count][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]){\n            result[count][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#43;&amp;#43;;\n        }else{\n            count&amp;#43;&amp;#43;;\n            result[count][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;array[i];\n            result[count][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n    }\n    //对次数进行排序\n    for(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;count;i&amp;#43;&amp;#43;){\n        for(j&amp;#61;i;j&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;amp;&amp;amp;result[j][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;gt;result[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];j--){\n            temp&amp;#61;result[j][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n            result[j][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;result[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n            result[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;temp;\n            \n            temp&amp;#61;result[j][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n            result[j][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;result[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n            result[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;temp;\n        }\n    } \n    //输出\n    for(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;count;i&amp;#43;&amp;#43;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\t%d\\n&amp;#34;&lt;/span&gt;,result[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;],result[i][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n    } \n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于#c++#数字排序的问题", ["为什么这个题我这样的解法就不对呀？", "\n", "\n", "#include <iostream>", "\n", "#define endl '\\n'", "\nusing namespace std;\nint ", "n", "=0;\nint a[1000]={0};\nint sign[1001]={0};\n\nint findmax()\n{\n    int ", "max", "=0;\n    int ", "maxnum", "=0;\n    ", "for", "(int ", "i", "=0;i<1000;i++)\n    {\n        ", "if", "(sign[i]==0)\n        {\n            continue;\n        }\n         ", "else", "\n         {\n             ", "if", "(sign[i]>maxnum)\n             {\n                 ", "max", "=i;\n                 ", "maxnum", "=sign[i];\n            }\n        }\n    } \n    return max;\n}\n\nint main()\n{\n    int ", "t", "=0,num=0;\n    cin>>n;\n    ", "for", "(int ", "i", "=0;i<n;i++)\n    {\n        cin>>a[i];\n        sign[a[i]]++;\n    }\n    ", "for", "(int ", "i", "=0;i<1000;i++)\n    {\n        ", "if", "(sign[i]==0)\n        {\n            continue;\n        }\n         ", "else", "\n         {\n             num++;\n         }\n    }\n    ", "for", "(int ", "i", "=0;i<num;i++)\n    {\n        ", "t", "=findmax();\n        cout<<t<<", "\" \"", "<<sign[t]<<endl;\n        sign[t]=0;\n    }\n} \n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;越界就查看for循环访问&amp;#xff0c;冒泡每次是相邻两个元素比较&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["c语言实现冒泡排序时出现数组溢出", ["void po_sort(int* arr, int sz)", "{", "    int i = 0;", "    for (i = 0; i < sz - 1; i++)", "    {", "        int flag = 1;", "        int j = 0;", "        for (j = 0; j < sz - 1 - i; j++);", "        {", "            if (arr[j] > arr[j + 1])", "            {", "                int tmp;", "                tmp    = arr[j];", "                arr[j] = arr[j + 1];", "                arr[j + 1] = tmp;", "                flag = 0;", "            }", "        }", "        if (flag == 1)", "        {", "            break;", "        }", "    }", "}", "    int main()", "    {", "        int i;", "        int arr[10] = {10,9,8,7,6,5,4,3,2,1 };", "        int sz=sizeof(arr)/sizeof(arr[0]);", "        po_sort(arr,sz);", "\n", "for", " (i = ", "0", "; i < sz; i++)\n{\n    ", "printf", "(", "\"%d \"", ", arr[i]);\n}\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如果输入的不是数字,input.next().charAt(0) 接收的是你输入的那个不是数字的字符,你需要再加一个input.next() 来接y/n&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["急，这个判断不是数字后跳到else，下面的键盘输入为什么不起作用？", ["为什么我后面的jiXu = input.next().charAt(0);这一句不起作用？", "输入数字就没问题，输入字母或者中文，因为用了数字判断，所有会调到后面的else，可是下面有个键盘输入，为什么不起作用，都不需要你输入", "\n", "\npackage choJiang;\nimport java.util.Scanner;\npublic class Jineng {\n    public static void mai", "n", "(String[] args){\n        Scanner ", "input", " = new Scanner(System.", "in", ");\n        String name;\n        int max = 9999;\n        int min = 1000;\n        int huiYuan = (int) (Math.random()", "*(max-min)) +min;", "\n        char jiXu;\n        ", "do", "{\n            System.", "out", ".printl", "n", "(", "\"************欢迎进入奖客富翁系统************\"", ");\n            System.", "out", ".printl", "n", "(", "\"1.注册\\t2.登录\\t3.抽奖\"", ");\n            System.", "out", ".printl", "n", "(", "\"*************************************\"", ");\n            System.", "out", ".pr", "int", "(", "\"请选择菜单:\"", ");\n            ", "if", "(", "input", ".hasNext", "Int", "()){\n                int ", "index", " = ", "input", ".next", "Int", "();\n                switch(", "index", "){\n                    case 1:\n                        System.", "out", ".printl", "n", "(", "\"[奖客富翁系统  > 注册]\"", ");\n                        System.", "out", ".printl", "n", "(", "\"请填写个人注册信息:\"", ");\n                        System.", "out", ".pr", "int", "(", "\"用户名:\"", ");\n                        name = ", "input", ".next();\n                        System.", "out", ".pr", "int", "(", "\"密码(整数):\"", ");\n                        ", "if", "(", "input", ".hasNext", "Int", "()){\n                            int miMa = ", "input", ".next", "Int", "();\n                            System.", "out", ".printl", "n", "(", "\"注册成功,请记好您的会员卡号\"", ");\n                            System.", "out", ".printl", "n", "(", "\"用户名\\t密码\\t会员卡号\"", ");\n                            System.", "out", ".printl", "n", "(name+", "\"\\t\"", "+miMa+", "\"\\t\"", "+huiYuan);\n                        }", "else", "{\n                            System.", "out", ".printl", "n", "(", "\"请输入正确的密码格式\"", ");\n                        }\n                        break;\n                    case 2:\n                        System.", "out", ".printl", "n", "(", "\"[奖客富翁系统  > 登录]\"", ");\n                        System.", "out", ".pr", "int", "(", "\"请输入用户名:\"", ");\n                        String name2 = ", "input", ".next();\n                        ", "if", "(", "\"name\"", ".equals(name2)){\n                            System.", "out", ".printl", "n", "(", "\"去\"", ");\n                        }\n                        break;\n                    case 3:\n                        System.", "out", ".printl", "n", "(", "\"抽奖\"", ");\n                        break;\n                    default:\n                        System.", "out", ".printl", "n", "(", "\"输入错误\"", ");\n                        break;\n                }\n            }", "else", "{\n                System.", "out", ".printl", "n", "(", "\"请输入正确数字\"", ");\n            }\n            System.", "out", ".printl", "n", "(", "\"继续吗？(y/n)\"", ");\n            jiXu = ", "input", ".next().charAt(0);\n            ", "if", "(", "'n'", "==(jiXu)){\n                System.", "out", ".printl", "n", "(", "\"系统已退出，谢谢使用!\"", ");\n            }\n        }", "while", "(", "'y'", "==(jiXu));\n    }\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;SHA算法名中的数字&amp;#xff0c;通常表示输出的散列值的位数&amp;#xff0c;也就是二进制数的个数。例如&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;【1】SHA-1&amp;#xff1a;输出160位的散列值&amp;#xff0c;也就是160个0或1组成的字符串。&lt;br /&gt;【2】SHA-224&amp;#xff1a;输出224位的散列值&amp;#xff0c;也就是224个0或1组成的字符串。&lt;br /&gt;【3】SHA-256&amp;#xff1a;输出256位的散列值&amp;#xff0c;也就是256个0或1组成的字符串。&lt;br /&gt;输出的散列值的位数越多&amp;#xff0c;表示其能够表示的不同值的数量越多&amp;#xff0c;也就意味着其抗碰撞性越强&amp;#xff0c;也就是难以找到两个不同的消息具有相同的散列值。因此&amp;#xff0c;一般来说&amp;#xff0c;数字越大的SHA算法&amp;#xff0c;安全性越高&amp;#xff0c;但同时计算效率也越低。&lt;/p&gt;\n&lt;p&gt;您可以参考以下链接来了解更多关于SHA算法的原理和应用&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"https://en.wikipedia.org/wiki/Secure_hash_algorithms\" id=\"textarea_1680238582752_1680238702881_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://en.wikipedia.org/wiki/Secure_hash_algorithms&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=\"https://www.simplilearn.com/tutorials/cyber-security-tutorial/sha-256-algorithm\" id=\"textarea_1680238582752_1680238702881_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.simplilearn.com/tutorials/cyber-security-tutorial/sha-256-algorithm&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=\"https://brilliant.org/wiki/secure-hashing-algorithms/\" id=\"textarea_1680238582752_1680238702881_2\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://brilliant.org/wiki/secure-hashing-algorithms/&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;希望这能帮到您。可以的话采纳&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["sha算法名中数字代表什么", ["sha算法名中数字代表什么", "例如sha1，sha224，sha256"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;prime&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; flag &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (x &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) flag &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;sqrt&lt;/span&gt;(x); i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (x % i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            flag &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; flag;\n}\n\n&lt;span class=\"hljs-comment\"&gt;// 从前往后冒泡&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;sort&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j,t,noswap;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt; n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        noswap&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 是否交换表示 1&amp;#xff1a;未交换【表示已排序好】 0&amp;#xff1a;交换了&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;-i;j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;lt;a[j])\n            {\n                t&amp;#61;a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;a[j];\n                a[j]&amp;#61;t;\n                noswap&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(noswap)  &lt;span class=\"hljs-comment\"&gt;// 已经排序好&amp;#xff0c;直接退出就行&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, i, temp;\n    cin&amp;gt;&amp;gt;n;\n\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[n];\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n    {\n        cin&amp;gt;&amp;gt;temp;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;prime&lt;/span&gt;(temp))\n            a[m&amp;#43;&amp;#43;] &amp;#61; temp;\n    }\n\n    &lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;(a, m);\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, a[i]);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["用C++代码做输入数字n表示输入个数，讲输入的n个数字中找到里面的所有素数（包括重复的素数），并从小到大输出出来。", ["用C++代码做输入数字n表示输入个数，讲输入的n个数字中找到里面的所有素数（包括重复的素数），并从小到大输出出来。", "例如：", "输入", "4", "3 7 2 1", "输出", "2 3 7", "我的思路：", "先判断素数，在判断正确，在排序，在输出，但是自己实现不了", "\n", "#", "include", " ", "<iostream>", "\n", "using", " ", "namespace", " std;\n\n", "bool", " ", "IsPrime", "(", "int", " n)", "\n", "{\n    ", "if", "(n <= ", "1", "){\n        cout<<n<<", "\"不是素数\"", "<<endl; \n        ", "return", " ", "false", ";\n    }\n    ", "for", " (", "int", " i = ", "2", "; i < n; i++)\n    {\n        ", "if", " ((n % i) == ", "0", "){\n            cout<<n<<", "\"不是素数\"", "<<endl;\n            ", "return", " ", "false", ";\n        }\n    }\n    cout<<n<<", "\"是素数\"", "<<endl;\n    ", "return", " ", "true", ";\n}\n\n", "int", " ", "main", "()", " ", "{\n    ", "int", " a = ", "2", ", b = ", "17", ", c = ", "18", ";\n    ", "IsPrime", "(a);\n    ", "IsPrime", "(b);\n    ", "IsPrime", "(c);\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "```\r\n 153\r\n153, 1 5 3.\r\nyes\r\nx1=-0.697224 x2=-4.302776\r\n3 5 1 1 3 5 7 2 4 6\r\n1 1 2 3 3 4 5 5 6 7\r\n3 5 1 1 3 5 7 2 4 6\r\n1 1 2 3 3 4 5 5 6 7\r\nPress any key to continue\r\n```\r\n\r\n\r\n\r\n```\r\n 179\r\n179, 1 7 9.\r\nno\r\nx1=-1.697224 x2=-5.302776\r\n9 7 1 1 3 5 7 2 4 6\r\n1 1 2 3 4 5 6 7 7 9\r\n9 7 1 1 3 5 7 2 4 6\r\n1 1 2 3 4 5 6 7 7 9\r\nPress any key to continue\r\n```", "Konwledge_Point": "算法与数字", "Question": ["C语言     求大神拯救", ["根据下列要求，完成程序", "\n1从键盘输入一个三位数整数，并输出该整数，同时输出该三位整数的每一位数字", "\n2写一个函数，判断该三位整数是否为水仙花数", "\n3以该整数的三位数字作为一元二次方程的系数，求该一元二次方程的根", "\n4定义该整形数组，包含十个数据，把该整数的三位数字。依次放入该数组的最前三位，并把数组内容补充完整。并对该数组进行排序，分别输出该数组排序前和排序后的顺序", "\n5对4中做好的数组进行排序（算法不和4相同）输出。（限用指针实现）"]], "Tag": "算法设计"}
{"Answer": "如果不是有序的，那么比较绝对值，找到最小的。\r\n```\r\n#include &lt;stdio.h&gt;\r\n\r\nint main()\r\n{\r\n\tint min = (1 &lt;&lt; 31) - 1;\r\n\tint idx = 0;\r\n\tint arr[] = {915,941,960,976,992,1015,1034,1050,1073,1089,1115,1131,1150,1166,1182,1208,1227};\r\n\tint n = 1000;\r\n\tfor (int i = 0; i &lt; sizeof(arr) / sizeof(int); i++)\r\n\t{\r\n\t\tint diff = arr[i] - n;\r\n\t\tif (diff &lt; 0) diff = -diff;\r\n\t\tif (diff &lt; min)\r\n\t\t{\r\n\t\t\tmin = diff;\r\n\t\t\tidx = i;\r\n\t\t}\r\n\t}\r\n\tprintf(\"最接近的是%d 下标是%d\", arr[idx], idx);\r\n   \treturn 0;\r\n}\r\n```\r\n最接近的是992 下标是4", "Konwledge_Point": "算法与数字", "Question": ["C语言，目标值与数组所有元素去比对，找出最接近的元素，输出下标", ["举例如下：一个数组{915,941,960,976,992,1015,1034,1050,1073,1089,1115,1131,1150,1166,1182,1208,1227};目标值假设是1000，我自己之前用插值算法公式mid = start + (end - start) * ( (key-a[start])/(a[end]-a[start]) )可以快速查找出中间位置，算出大概接近的元素，输出下标，但是我的实际需求数组不一定都是这么有序或者单调的，为保证更准确，我想将目标值一个一个去比对，然后找出数组中最接近的元素，输出数组下标，求老师们帮忙指导一下，求代码和注释"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;循环线性表判断是哪类字符,分添加到不同的的线性表即可&lt;br /&gt;你题目的解答代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-selector-tag\"&gt;li&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#34;a&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;3&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;7&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;*&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;b&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;c&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;#&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;5&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;x&amp;#34;&lt;/span&gt;]&lt;/span&gt;\nli1 &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\nli2 &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\nli3 &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; v &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;li&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; v&lt;span class=\"hljs-selector-class\"&gt;.isalpha&lt;/span&gt;():\n        li1&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(v)\n    elif v&lt;span class=\"hljs-selector-class\"&gt;.isdigit&lt;/span&gt;():\n        li2&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(v)\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        li3&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(v)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(li1)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(li2)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(li3)&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "算法与数字", "Question": ["Python数据结构链表问题", ["已知由一个线性链表表示的线性表中含有3类字符的数据元素（如：字母、数字和其他字符），试编写算法将该线性链表分割为3个循环链表，其中每个循环链表表示的线性表中均只含有一类字符。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;溢出问题在此不讨论&amp;#xff0c;只要函数传进来的str有值就行。函数里面直接写这句试试:return str.substring(str.lastIndexOf(&amp;#39;,&amp;#39;)&amp;#43;1);只有一条纪录也可以正常使用&amp;#xff0c;当然ip地址对不对那就自己验证了。还有函数外面的事情就自己解决了&amp;#xff0c;比如溢出之类的。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["对一个Java字符串进行分割并倒叙遍历获取最后一个IP地址", ["问题遇到的现象和发生背景", "\n", "给你一个无穷字符串类型的 IP ，IP 之间以 ， 分割，类似这样 String ipStr = \"192.168.10.222,192.168.10.43,192.168.10.243\",现在需要你写一个方法，入参为 ipStr，出参为 ipStr 的最后一个 Ip。", "\n", "问题相关代码，请勿粘贴截图", "\n", "public", " ", "class", " ", "IpStr2", " {\n\n    ", "/**\n     * 计时器\n     */", "\n    ", "private", " ", "static", " StopWatch stopWatch = ", "new ", "StopWatch", "();\n\n    ", "public", " ", "static", " ", "void", " ", "main", "(", "String", "[] args) {\n        StringBuilder ", "str", " = ", "new ", "StringBuilder", "();\n        ", "// N", "\n        ", "for", " (", "int", " i = ", "1", "; i <= ", "10000000", "; i++) {\n            ", "str", ".", "append", "(i)\n                    .", "append", "(", "\".\"", " + i)\n                    .", "append", "(", "\".\"", " + i)\n                    .", "append", "(", "\".\"", " + i)\n                    .", "append", "(", "\",\"", ");\n        }\n        stopWatch.", "start", "();\n        ", "String", " s = ", "ipStr", "(", "String", ".", "valueOf", "(", "str", "));\n        stopWatch.", "stop", "();\n        System.", "out", ".", "println", "(", "\"运算耗时为：\"", " + stopWatch.", "prettyPrint", "());\n        System.", "out", ".", "println", "(", "\"计算值为： = \"", " + s);\n    }\n\n    ", "public", " ", "static", " ", "String", " ", "ipStr", "(", "String", " ", "str", ") {\n        ", "ArrayList", "<", "String", "> list = ", "new ", "ArrayList", "<>();\n        ", "String", "[] ", "split", " = ", "str", ".", "split", "(", "\",\"", ");\n        ", "for", " (", "String", " s : ", "split", ") {\n            list.", "add", "(s);\n        }\n        ", "// 反转list", "\n        Collections.", "reverse", "(list);\n        ", "return", " list.", "get", "(", "0", ");\n    }\n}\n", "\n", "运行结果及报错内容", "\n", "数据量超过一亿条会堆溢出", "\n", "我的解答思路和尝试过的方法", "\n", "我已经尝试过根据索引获取，反转实现，流实现等，效果皆不理想。目前最优方案是通过倒序遍历获取效率最高，但是不会倒序实现，希望解决思路附代码实现，感谢，其他方案只要没有性能问题都可以。", "\n", "我想要达到的结果", "\n", "现在需要你写一个方法，入参为 ipStr，出参为 ipStr 的最后一个 Ip。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你举的例子&amp;#xff0c;为什么b[1]&amp;#61;[0,0,10]&amp;#xff0c;0不是l的元素啊&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["Python设计一个有关余数的列表", ["\nn,", "k", "=", "map", "(", "int", ",", "input", "().", "split", "())\n\n", "l", "=", "list", "(", "map", "(", "int", ",", "input", "().", "split", "()))\n", "\n", "n代表列表l有n个数字,k是一个正整数", "想问一下 如何创建这么一个数组 b[i]:代表l中的数字对k取余后，余数为i的前三个最大数字", "比如n=4", "k=3", "l=[2,5,8,10]", "那么b[2]=[2,5,8]", "b[1]=[0,0,10]", "\n", "要求b[i]里面降序 ，实在不知道用什么排序算法了，请求帮助"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;4行x&amp;#61;a改成x,  &amp;#xff0c;然后6行下面才补上x&amp;#61;a;&lt;br /&gt;你printf打印二进制的顺序反了&amp;#xff0c;从小到大打印了。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["编译无错。运行问题。请指正", ["对数字求特征值是常用的编码算法，奇偶特征是一种简单的特征值。对于一个整数，从个位开始对每一位数字编号，个位是1号，十位是2号，以此类推。这个整数在第n位上的数字记作x，如果x和n的奇偶性相同，则记下一个1，否则记下一个0。按照整数的顺序把对应位的表示奇偶性的0和1都记录下来，就形成了一个二进制数字。比如，对于342315，这个二进制数字就是001101。", "\n", "你的程序要读入一个非负整数，整数的范围是[0,1000000]，然后按照上述算法计算出表示奇偶性的那个二进制数字，输出它对应的十进制值。", "\n", "\n", "#include <stdio.h>", "\n", "int", " main()\n{", "int", " a,", "x", "=a,im,sum=", "0", ",b=", "1", ",i=", "1", ";\n", "printf", "(", "\"请输入小于等于1000000的正整数\\n\"", "); \nscanf(", "\"%d\"", ",&a);\n", "while", "(", "x", ">", "0", ")\n{\n", "x", "=a%10;\n", "if", "(i%2!=", "x", "%2){\n    im=", "0", ";\n    ", "printf", "(", "\"%d\"", ",im);\n}\n", "else", "{\nim=", "1", ";\nsum=sum+b; \n", "printf", "(", "\"%d\"", ",im);\n}\nb=b*", "2", ";\ni++;\na/=", "10", ";\n}\n", "printf", "(", "\"    %d\"", ",sum);\n", "return", " ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第一题&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;def &lt;span class=\"hljs-keyword\"&gt;move&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;cube&lt;/span&gt;:list)-&amp;gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;cube&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;],&lt;span class=\"hljs-keyword\"&gt;cube&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])&amp;#61;&amp;#61;(&lt;span class=\"hljs-keyword\"&gt;cube&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;],&lt;span class=\"hljs-keyword\"&gt;cube&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]):&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;False&lt;/span&gt; # 同一个格子\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;cube&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;cube&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;cube&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;cube&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]:&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;True&lt;/span&gt; # 同行或同列\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;False&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;cube&lt;/span&gt; &amp;#61; list(map(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;,&lt;span class=\"hljs-keyword\"&gt;input&lt;/span&gt;().split()))\nprint(&lt;span class=\"hljs-string\"&gt;&amp;#39;是&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;move&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;cube&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; print(&lt;span class=\"hljs-string\"&gt;&amp;#39;否&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;第二题&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;def &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n)&lt;/span&gt;&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n&amp;gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;*&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n/&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#43;n &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n%&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n&lt;span class=\"hljs-number\"&gt;-3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;\nprint(&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-number\"&gt;99&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;第三题&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;n, &lt;span class=\"hljs-keyword\"&gt;m&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;())\n&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &amp;#61; []\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n):\n    &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &amp;#43;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;list&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;()))\n&lt;span class=\"hljs-keyword\"&gt;loc&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;index&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;))\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-keyword\"&gt;loc&lt;/span&gt;//&lt;span class=\"hljs-keyword\"&gt;m&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-keyword\"&gt;loc&lt;/span&gt;%&lt;span class=\"hljs-keyword\"&gt;m&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;(5,5)\n1&lt;span class=\"hljs-number\"&gt; 2 &lt;/span&gt;3&lt;span class=\"hljs-number\"&gt; 4 &lt;/span&gt;5\n2&lt;span class=\"hljs-number\"&gt; 3 &lt;/span&gt;4&lt;span class=\"hljs-number\"&gt; 5 &lt;/span&gt;6\n5&lt;span class=\"hljs-number\"&gt; 6 &lt;/span&gt;7&lt;span class=\"hljs-number\"&gt; 8 &lt;/span&gt;9\n7&lt;span class=\"hljs-number\"&gt; 8 &lt;/span&gt;9&lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;2\n9&lt;span class=\"hljs-number\"&gt; 8 &lt;/span&gt;7&lt;span class=\"hljs-number\"&gt; 6 &lt;/span&gt;5\n3 5\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;第四题&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;def &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n)&lt;/span&gt;&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; n*&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;\nn &amp;#61; int(input())\nsumtotal &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(n):\n    sumtotal &amp;#43;&amp;#61; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;\nprint(sumtotal)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;第五题&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;s &amp;#61; [&lt;span class=\"hljs-string\"&gt;&amp;#39;张三 男 30&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;李四 女 40&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;王五 男 50&amp;#39;&lt;/span&gt;]\n&lt;span class=\"hljs-keyword\"&gt;with&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;open&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;r&amp;#39;员工信息.txt&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; f:\n    f.write(&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;.join(s))\n&lt;span class=\"hljs-keyword\"&gt;with&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;open&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;r&amp;#39;员工信息.txt&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; f:\n    p &amp;#61; f.readlines()\nuserinfo &amp;#61; [i.strip().split() &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; p]\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;([i &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; userinfo &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(i[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])&amp;gt;&lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;第六题&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attribute\"&gt;res&lt;/span&gt;&amp;#61;[]\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; x in range(&lt;span class=\"hljs-number\"&gt;185&lt;/span&gt;//&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    &lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; y in range(&lt;span class=\"hljs-number\"&gt;185&lt;/span&gt;//&lt;span class=\"hljs-number\"&gt;17&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; z in range(&lt;span class=\"hljs-number\"&gt;185&lt;/span&gt;//&lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n            &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;*x &amp;#43; &lt;span class=\"hljs-number\"&gt;17&lt;/span&gt;*y &amp;#43; &lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;*z &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;185&lt;/span&gt;:\n                &lt;span class=\"hljs-attribute\"&gt;res&lt;/span&gt;.append([x,y,z])\n                &lt;span class=\"hljs-attribute\"&gt;break&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(f&amp;#39;有{len(res)}种方法可以做到&amp;#xff1a;&amp;#39;)\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; i in res:\n    &lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(f&amp;#39;{i[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]}箱&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;公斤、{i[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]}箱&lt;span class=\"hljs-number\"&gt;17&lt;/span&gt;公斤、{i[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]}箱&lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;公斤&amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;有5种方法可以做到&amp;#xff1a;\n0箱15公斤、1箱17公斤、8箱21公斤\n1箱15公斤、10箱17公斤、0箱21公斤\n3箱15公斤、7箱17公斤、1箱21公斤\n5箱15公斤、4箱17公斤、2箱21公斤\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;第七题&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;nums &amp;#61; list(map(int,&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;()&lt;span class=\"hljs-selector-class\"&gt;.split&lt;/span&gt;()))\nres &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(len(nums)-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;):\n    m &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[nums[i]&lt;/span&gt;,nums&lt;span class=\"hljs-selector-attr\"&gt;[i&amp;#43;1]&lt;/span&gt;,nums&lt;span class=\"hljs-selector-attr\"&gt;[i&amp;#43;2]&lt;/span&gt;]\n    l &amp;#61; sorted(m)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; l&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;**&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#43;l&lt;span class=\"hljs-selector-attr\"&gt;[1]&lt;/span&gt;**&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;l&lt;span class=\"hljs-selector-attr\"&gt;[2]&lt;/span&gt;**&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n        res&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(m)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(len(res)&lt;/span&gt;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attribute\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;&lt;span class=\"hljs-meta\"&gt;\n[5, 4, 3] [4, 3, 5] [3, 5, 4] [5, 4, 3]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["业务分析编程基础知识", ["1)国际象棋的车在水平或垂直方向上移动。给出棋盘上两个不同的格子，判断车是否能在一次移动中从第一个格子移动到第二个格子。程序收到四个数字，每个数字从1到8，首先给出第一个方格的列号和行号，然后是第二个方格的列号和行号。如果车可以从第一个位置移动到第二个位置，程序应该输出 \"是\"，否则输出 \"否\"。", "\n", "2）如图，计算函数F（n）的算法由以下关系给出。", "函数F（99）+F（100）的值是多少？", "3）找到最大元素的第一次出现的索引。输出两个数字：包含二维数组中最大元素的行和列的数字。如果有多个这样的元素，就打印行号较小的那个，如果行号相等，就打印列号较小的那个。", "\n", "该程序接收到大小为n和m的数组作为输入，然后是n行，每行m个数字。", "\n", "4）如图", "5）创建一个文件，并将公司员工的信息写入其中。阅读该文件，了解有多少员工超过40岁。", "6) 该商店出售的油漆有15公斤、17公斤和21公斤的盒子。", "你必须在不开箱的情况下准确买到185公斤的油漆。有多少种方法可以做到这一点？", "7) 给出一个20个数字的清单。把一个三连号称为三个连续的数字。确定有多少个这样的三角形可以成为一个直角三角形的边。如果没有这样的三元组，打印0。"]], "Tag": "算法设计"}
{"Answer": "看起来一样，都是O(n)。\r\nlist在指定位置插值是用的System.arraycopy，直接基于内存复制，在数据量大的时候有优势（具体大到什么程度，未经测试）。\r\n当然你本地用数组插值也换成System.arraycopy，那肯定是下面的效率更高点。毕竟上面多了一个往List的转换函数。\r\n总体来说，双方类似。", "Konwledge_Point": "算法与数字", "Question": ["以下在数组指定位置插入元素的两种方法哪个时间复杂度更低，效率更高？", ["废话不多说，直接上图。", "\n以上两种算法都是在数组指定位置插入一个数字，哪一种算法时间复杂度更低，换句话说效率更高，我指的是当数组中数据很多的时候，最坏时间复杂度。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;n-n * p改为 n * (1-p)&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["问题 B: 概率论，答案错误", ["题目描述", "小L正在期末考试概率论的考场，但是她遗忘了一个公式的符号是>还是<，于是便开始选择听天由命（ZYZ自研的Z队算法，运行结果只有两个 < 或 >），假设每次命中>的概率为 p，因为小L考试就比较无聊，所以她做了 n 次（因为Z队算法运行的太快了！），她想问你最后命中 < 的期望命中次数是多少。", "输入", "第一行一个整数 n，代表Z队算法执行的次数，n的数据范围是 [1,1018]。", "第二行一个浮点数 p，表示每次执行Z队算法时命中>的概率，范围是 [0,1]。", "输出", "仅一个数字表示最后命中<的期望命中次数，只输出整数部分。", "样例输入 Copy", "19990930", "0.104", "样例输出 Copy", "17911873", "\n", "\n", "#", "include", "<stdio.h>", "\n", "int", " ", "main", "()", " ", "{\n    ", "unsigned", " ", "long", " ", "long", " n;\n    ", "double", " p;\n    ", "scanf", "(", "\"%llu\"", ",&n);\n    ", "scanf", "(", "\"%lf\"", ",&p);\n    ", "printf", "(", "\"%llu\"", ",(", "unsigned", " ", "long", " ", "long", ")(n-n*p));\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "看你的用途啦。说实在的，可以是数字累加型，也可以是定义位数，然后每个位26个字母和10个数字轮流转。\r\n如果是为了转成静态页面链接的，长点更好，不容易重复。\r\n如果有路由功能（比如说群集的负载均衡），则分段，前几个字母表示哪个具体的服务器的key。\r\n如果是为了作为临时页面的（比如说向导型的页面流，第一页，第二页，。。。最后一页，下次用户在过期失效之前，再进入的时候，直接就到处理的第N页）还是有点规律的比较好，便于下次再接着处理.", "Konwledge_Point": "算法与数字", "Question": ["Tinyurl 中url的生成策略", ["tinyurl可以将一长串的url转换为相当短的url，比如 ", "http://preview.tinyurl.com/2wqbcs。", "\n\n", "我对 2wqbcs 这种形式的串比较感兴趣，感觉类似UUID或MD5这样的哈希算法所产生的，youtube的视频网址也有类似这样的串 ", "http://www.youtube.com/watch?v=9SBB14vu8jM", "\n\n", "个人猜测是这几种可能之一：", "\n1.产生一个大的随机数，将这个数字转换为以数字和字母所表示的字符串。感觉这个可能性比较大，类似UUID这样，只要整数值足够大，重复几率很小。", "\n2.一种哈希函数，输入产生特定输出。对于tinyurl，它的长度和源url长度没有关联，感觉不像。", "\n3.一种加密算法，数据是可逆的。", "\n\n", "有对这个了解的朋友，能介绍一下么？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;结束前加个System(&amp;#34;PAUSE&amp;#34;);&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["这个我输入完数字 后面的东西会一闪而过想知道怎么改", ["编译环境 dev c++", "\n", "\n", "#", "define", " _CRT_SECURE_NO_WARNINGS 1", "\n", "#", "include", "<bits/stdc++.h>", "\n", "using", " ", "namespace", " std;\n", "class", " ", "Rational", " {\n", "public", ":\n    ", "Rational", "(", "int", " numerator = ", "0", ", ", "int", " denomintor = ", "0", ");", "//分别表示分子和分母 ", "\n    ", "friend", " Rational ", "operator", "+(Rational r1, Rational r2);", "//+", "\n    ", "friend", " Rational ", "operator", "-(Rational r1, Rational r2);", "//-", "\n    ", "friend", " Rational ", "operator", "*(Rational r1, Rational r2);", "//*", "\n    ", "friend", " Rational ", "operator", "/(Rational r1, Rational r2);", "// /", "\n    ", "friend", " istream& ", "operator", ">>(istream& is, Rational& r);", "//重载流输入 ", "\n    ", "friend", " ostream& ", "operator", "<<(ostream& os, Rational& r);", "//重载流输出 ", "\n    ", "friend", " ", "void", " ", "printReal", "(Rational& r)", ";\n    ", "friend", " Rational ", "normalize", "(Rational s)", ";", "//化简函数", "\n", "private", ":\n    ", "int", " numerator;\n    ", "int", " denomintor;\n};\n", "struct", " ", "User", " ", "//用户结构体类型定义", "\n{\n    ", "char", " szName[", "20", "]; ", "//用户名", "\n    ", "int", " nTime; ", "//使用次数", "\n    ", "int", " nTest; ", "//测试次数", "\n    ", "double", " alAve; ", "//平均成绩", "\n    ", "int", " nAdd; ", "//加法次数", "\n    ", "int", " nSub; ", "//减法次数", "\n    ", "int", " nMul; ", "//乘法次数", "\n    ", "double", " dlScore[", "3", "]; ", "//3次测试得分", "\n}user;\nRational::", "Rational", "(", "int", " numerator, ", "int", " denomintor)\n{\n    ", "this", "->numerator = numerator;\n    ", "this", "->denomintor = denomintor;\n}\n", "void", " ", "printReal", "(Rational& r)", "\n", "{\n    cout << r.numerator << ", "\"/\"", " << r.denomintor;\n}\n", "Rational ", "normalize", "(Rational s)", "\n", "{                                                                ", "//求出分子和分母的最大公约数，用欧几里得算法", "\n    ", "int", " a = ", "abs", "(s.numerator);\n    ", "int", " b = ", "abs", "(s.denomintor);\n    ", "while", " (b > ", "0", ")\n    {\n        ", "int", " t = a % b;\n        a = b;\n        b = t;\n    }\n    ", "Rational ", "R", "(s.numerator / a, s.denomintor / a)", ";\n    ", "return", " R;\n}\nRational ", "operator", "+(Rational r1, Rational r2) {\n    ", "int", " a = r1.numerator;\n    ", "int", " b = r1.denomintor;", "// a/b", "\n    ", "int", " c = r2.numerator;\n    ", "int", " d = r2.denomintor;", "// c/d", "\n    ", "int", " e = a * d + b * c;\n    ", "int", " f = b * d;\n    ", "Rational ", "R", "(e, f)", ";\n    ", "return", " R;\n}\nRational ", "operator", "-(Rational r1, Rational r2) {\n    ", "int", " a = r1.numerator;\n    ", "int", " b = r1.denomintor;", "// a/b", "\n    ", "int", " c = r2.numerator;\n    ", "int", " d = r2.denomintor;", "// c/d", "\n    ", "int", " e = a * d - b * c;\n    ", "int", " f = b * d;\n    ", "Rational ", "R", "(e, f)", ";\n    ", "return", " R;\n}\nRational ", "operator", "*(Rational r1, Rational r2) {\n    ", "int", " a = r1.numerator;\n    ", "int", " b = r1.denomintor;", "// a/b", "\n    ", "int", " c = r2.numerator;\n    ", "int", " d = r2.denomintor;", "// c/d", "\n    ", "int", " e = a * c;\n    ", "int", " f = b * d;\n    ", "Rational ", "R", "(e, f)", ";\n    ", "return", " R;\n}\nRational ", "operator", "/(Rational r1, Rational r2) {\n    ", "int", " a = r1.numerator;\n    ", "int", " b = r1.denomintor;", "// a/b", "\n    ", "int", " c = r2.numerator;\n    ", "int", " d = r2.denomintor;", "// c/d", "\n    ", "int", " e = a * d + b * c;\n    ", "int", " f = b * d;\n    ", "Rational ", "R", "(e, f)", ";\n    ", "return", " R;\n}\n \nistream& ", "operator", ">>(istream& is, Rational& r) {\n    is >> r.numerator >> r.denomintor;\n    ", "if", " (r.denomintor != ", "0", ") {\n        ", "return", " is;\n    }\n    ", "else", " {\n        cout << ", "\"The denominator is 0, which is illegal. Please try again!\"", " << endl;\n        ", "exit", "(", "0", ");\n    }\n}\nostream& ", "operator", "<<(ostream& os, Rational& r) {\n    ", "if", " (r.numerator % r.denomintor == ", "0", ") {\n        os << r.numerator / r.denomintor << endl;\n        ", "return", " os;\n    }\n    ", "else", "\n        os << r.numerator << ", "\"\\\\\"", " << r.denomintor;\n    ", "return", " os;\n}\n", "void", " ", "userprint", "()", " ", "{}\n", "void", " ", "Login", "()", " ", "//当前用户信息函数", "\n", "{\n    ", "char", " szName[", "20", "];\n    cout << ", "\"请输入您的姓名:\"", ";\n    cin.", "getline", "(szName, ", "20", ");\n    ifstream infile;\n    User user1;\n    infile.", "open", "(", "\"user.dat\"", ", ios::binary | ios::in);\n    ", "if", " (!infile)\n    {\n        cout << ", "\"没有原始记录文件，您是第一个用户!\\n\"", ";\n        ", "strcpy", "(user.szName, szName);\n        user.nTest++;\n        ", "return", ";\n    }\n    infile.", "read", "((", "char", "*)&user1, ", "sizeof", "(User));\n    ", "while", " (!infile.", "eof", "())\n    {\n        ", "if", " (", "strcmp", "(user1.szName, szName) == ", "0", ")\n        {\n            user = user1;\n            user.nTime++;\n            cout << ", "\"欢迎您再次使用计算器!\"", ";\n            ", "userprint", "();\n            cin.", "get", "();\n            infile.", "close", "();\n            ", "return", ";\n        }\n        infile.", "read", "((", "char", "*)&user1, ", "sizeof", "(User));\n    }\n    cout << ", "\"欢迎您再次使用计算器!\"", ";\n    ", "strcpy", "(user.szName, szName);\n    user.nTime++;\n    infile.", "close", "();\n    ", "return", ";\n}\n", "void", " ", "SaveFile", "()", " ", "//用户资料保存函数", "\n", "{\n    ", "userprint", "();\n    fstream file;\n    User user1;\n    file.", "open", "(", "\"user.dat\"", ", ios::binary | ios::in | ios::out);\n    ", "if", " (!file)\n    {\n        cout << ", "\"文件打开错误，不能进行更新!\\n\"", ";\n        ", "return", ";\n    }\n    file.", "seekp", "(", "0", ", ios::beg);\n    ", "while", " (!file.", "eof", "())\n    {\n        file.", "read", "((", "char", "*)&user1, ", "sizeof", "(User));\n        ", "if", " (", "strcmp", "(user1.szName, user.szName) == ", "0", ")\n        {\n            file.", "seekp", "(", "-1", " * (", "sizeof", "(User)), ios::cur);\n            file.", "write", "((", "char", "*)&user, ", "sizeof", "(User));\n            file.", "close", "();\n            ", "return", ";\n        }\n    }\n    file.", "close", "();\n    fstream outfile;\n    outfile.", "open", "(", "\"user.dat\"", ", ios::binary | ios::app);\n    outfile.", "write", "((", "char", "*)&user, ", "sizeof", "(User));\n    outfile.", "close", "();\n    ", "return", ";\n}\n", "int", " ", "main", "(", "void", ")", "\n", "{\n    ", "srand", "(", "time", "(", "NULL", ")); ", "//初始化随机数种子语句 随机数在哪产生怎么写捏", "\n    ", "Login", "(); ", "//当前用户信息函数", "\n    ", "int", " choise; ", "//定义字符串名", "\n \n    ", "do", "\n    {\n        ", "system", "(", "\"cls\"", ");\n        cout << ", "\"\\t这是一个简单的计算器程序，可以实现以下功能，请按对应的按键(1-5)\\n\\n\\n\"", ";\n        cout << ", "\"\\t=========================MENU===========================\\n\"", ";\n        cout << ", "\"\\t1:有理数加法，以0结束\\n\"", ";\n        cout << ", "\"\\t2:有理数减法，以0结束\\n\"", ";\n        cout << ", "\"\\t3:测试分数加减乘法运算，1次测试10道题\\n\"", ";\n        cout << ", "\"\\t4:有理数乘法，以0结束\\n\"", ";\n        cout << ", "\"\\t5:有理数除法，以0结束\\n\"", ";\n        cout << ", "\"\\t0:退出程序\\n\\n:\"", ";\n        cout << ", "\"\\t请您选择:\"", ";\n        cin >> choise;\n \n        ", "int", " m1 = ", "rand", "() % ", "100", " + ", "1", "; ", "//生成1-100的随机数", "\n        ", "int", " n1 = ", "rand", "() % ", "100", " + ", "1", ";\n        ", "int", " m2 = ", "rand", "() % ", "100", " + ", "1", ";\n        ", "int", " n2 = ", "rand", "() % ", "100", " + ", "1", ";\n        ", "Rational ", "a", "(m1, n1)", ";\n        ", "Rational ", "b", "(m2, n2)", ";\n \n        ", "if", " (choise == ", "1", ")\n        {\n            Rational c = a + b;\n            ", "printReal", "(c);\n        }\n        ", "else", " ", "if", " (choise == ", "2", ")\n        {\n            Rational c = a - b;\n            ", "printReal", "(c);\n        }\n        ", "else", " ", "if", " (choise == ", "3", ")\n        {\n             \n        }\n        ", "else", " ", "if", " (choise == ", "4", ")\n        {\n            Rational c = a * b;\n            ", "printReal", "(c);\n        }\n        ", "else", " ", "if", " (choise == ", "5", ")\n        {\n            Rational c = a / b;\n            ", "printReal", "(c);\n        }\n        ", "else", " ", "if", " (choise == ", "0", ") ", "//用户选0则结束调用函数", "\n        {\n            cout << ", "\"\\n\\n\\t欢迎下次继续使用计算器!\\n\"", ";\n            ", "break", ";\n        }\n        ", "else", "\n        {\n            cout << ", "\"\\n\\t输入错误，请按任意键继续!\\n\"", ";\n        }\n    } ", "while", " (", "1", ");\n    ", "SaveFile", "(); ", "//调用用户资料保存函数", "\n    ", "return", " ", "0", ";\n}\n \n \n \n", "\n", "太奇怪了 调试好像也没啥错误 到底哪里错了呢"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;  &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,j,a[&lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;]; &lt;span class=\"hljs-comment\"&gt;//n表示输入的十进制数&lt;/span&gt;\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入十进制数&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(n&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n\n    {\n        a[i]&amp;#61;n%&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n\n        i&amp;#43;&amp;#43;;\n\n        n&amp;#61;n/&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n\n    }\n\n    a[i]&amp;#61;n;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;i;j&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j--)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[j]);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/585574949336141.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["99我，xdm!囚囚你们了", ["1、设计一个递归算法，输出一个大于零的十进制数n的各数字位，如n=123，输出各数字位为123。", "2、递归设计简单选择排序和冒泡排序。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;来个java版&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-html\"&gt;&lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Test {\n\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; N &amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; px, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; py, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; di, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dj, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; s, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (px &amp;#61;&amp;#61; i &amp;#43; di &amp;amp;&amp;amp; py &amp;#61;&amp;#61; i &amp;#43; dj) {\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; s &amp;#43; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (px &amp;#61;&amp;#61; i &amp;#43; di &amp;amp;&amp;amp; py &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;#43; dj) {\n                    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; s &amp;#43; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; * n - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; - i;\n                }\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (px &amp;#61;&amp;#61; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;#43; di &amp;amp;&amp;amp; py &amp;#61;&amp;#61; i &amp;#43; dj) {\n                    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; s &amp;#43; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; - i;\n                }\n            }\n        }\n\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;) {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt;(px, py, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#43; di, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;#43; dj, s &amp;#43; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; * n - &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, n - &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;);\n        }\n\n        throw &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; RuntimeException(&amp;#34;something goes wrong.&amp;#34;);\n    }\n\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; main(String[] args) throws &lt;span class=\"hljs-keyword\"&gt;Exception&lt;/span&gt; {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; width &amp;#61; &lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;.toString((&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;) ((N * N - N) / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#43; N)).length();\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; N; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; N; j&amp;#43;&amp;#43;) {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;gt;&amp;#61; j) {\n                    &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.print(String.format(&amp;#34;%&amp;#34; &amp;#43; width &amp;#43; &amp;#34;s&amp;#34;, &lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt;(i, j, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, N)) &amp;#43; &amp;#34;\\t&amp;#34;);\n                }\n            }\n            &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println();\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["脚趾踢到钢板，撞到硬题了，要求有点古怪，期待你进来", ["本以为很简单的算法题，幻想几分钟几行代码搞定，没想到几年都没搞定，踢到钢板了", "各位神人果断出手，救题于千军万马中，招数任出", "当然，能够不用条件句那就最好，能不借助数组就不借助数组，当然，不是说不可以", "\n", "输入输出行数，得出下图数字阵列", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题目一参考代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; collections import Counter\n&lt;span class=\"hljs-attribute\"&gt;s&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;abcdddcf&amp;#39;&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;Counter(s)\n&lt;span class=\"hljs-attribute\"&gt;l&lt;/span&gt;&amp;#61;sorted(a.items(),key&amp;#61;lambda x:x[1])[-1]\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(l)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["Python基础问题求解", ["1.输入一个字符串，求该字符串出现频率最高的那个字符以及其出现次数，将结果显示输出。", "2.给定一个任意字符串，其中，该字符串包含有大写和小写，现编写一函数将小写字母放在前面，大", "写字母放在最后。尽量降低算法的时间复杂度和空间复杂度（参见数据结构课程）", "3.编写一个函数，将用户输入的阿拉伯数字表示的金额表示为中文数字形式和英语形式。例如：", "￥12,539,576.00表示为“人民币壹仟贰佰伍拾叁万玖仟伍佰柒拾陆圆整”以及“RMBtwelve-millionfive", "hundredandthirty-ninethousandfivehundredandseventy-six”。", "（提示：汉语数字每四位一个单位，英语每三", "位一个单位。", "）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;没看到max函数的代码呢&amp;#xff0c;前面的代码是给数组赋值的&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["请问这道“数字三角形”的代码如何理解呢？", ["\n", "#", "include", " ", "<cstdio>", "\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "<cstring>", "\n", "#", "include", " ", "<string>", "\n", "#", "include", " ", "<algorithm>", "\n", "#", "include", " ", "<math.h>", "\n", "using", " ", "namespace", " std;\n", "int", " val[", "101", "][", "101", "];\n", "int", " f[", "101", "][", "101", "]; \n", "int", " n;\n", "int", " ", "main", "()", "\n", "{\n    ", "memset", "(f,", "0", ",", "sizeof", "(f));\n    cin>>n;\n    ", "for", "(", "int", " i=", "1", ";i<=n;i++)\n    {\n        ", "for", "(", "int", " j=", "1", ";j<=i;j++)\n        {\n            cin>>val[i][j];\n        }\n    } \n    ", "for", "(", "int", " i=n;i>=", "1", ";i--)\n    {\n        ", "for", "(", "int", " j=", "1", ";j<=i;j++)\n        {\n            f[i][j]=", "max", "(f[i+", "1", "][j+", "1", "],f[i+", "1", "][j])+val[i][j];\n        }\n    }\n    cout<<f[", "1", "][", "1", "];\n    ", "return", " ", "0", ";\n}\n\n\n", "\n", "我不是很理解这些代码，希望大家帮我注释一下和给出思路分析，谢谢!"]], "Tag": "算法设计"}
{"Answer": "1.PHP目前应该没处理这种数据格式的，需要自己处理了\r\n首先的将大于10小于你定义的数进行循环\r\n在循环中将每个数进行拆分比对\r\nfunction compute($str){\r\n\t$res = '';\r\n\tif($str&gt;10){\r\n\t\tfor($i=10;$i&lt;=$str;$i++){\r\n\t\t\tif(count(array_unique(str_split($i))) == 1){\r\n\t\t\t\t$res .= $i.',';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn trim($res,',');\r\n}\r\n\r\n2.还有一种方法就是将100内的数抽取比如11,22,33,44,55,66,77,88,99\r\n然后进项比对最大值，然后在这些值后面进行操作", "Konwledge_Point": "算法与数字", "Question": ["PHP 取出数值中每个位数相同的", ["比如说$str = 10000;", "\n                echo compute（$str）;", "\n                显示：", "\n                11,22,33,44,55,66,77,88,99,111,222,333……"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;#define MAX_N 1000 &lt;/span&gt;\n\nint main()\n{\n    int n, i, &lt;span class=\"hljs-keyword\"&gt;j, &lt;/span&gt;k;\n    int a[MAX_N], &lt;span class=\"hljs-keyword\"&gt;b[MAX_N]; &lt;/span&gt;\n    \n    while (&lt;span class=\"hljs-keyword\"&gt;scanf(&amp;#34;%d&amp;#34;, &lt;/span&gt;&amp;amp;n) !&amp;#61; EOF) {\n        \n        for (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;) {&lt;!-- --&gt;&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;scanf(&amp;#34;%d&amp;#34;, &lt;/span&gt;&amp;amp;a[i]);\n        }\n\n        k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        for (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;) { &lt;/span&gt;\n            for (&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; j &amp;lt; k; j&amp;#43;&amp;#43;) {&lt;!-- --&gt;&lt;/span&gt;\n                if (a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;b[j]) &lt;/span&gt;{ \n                    &lt;span class=\"hljs-keyword\"&gt;break;\n&lt;/span&gt;                }\n            }\n            if (&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61;&amp;#61; k) {\n                &lt;span class=\"hljs-keyword\"&gt;b[k] &lt;/span&gt;&amp;#61; a[i];\n                k&amp;#43;&amp;#43;;\n            }\n        }\n        for (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; k; i&amp;#43;&amp;#43;) { &lt;/span&gt;\n            for (&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; j &amp;lt; k; j&amp;#43;&amp;#43;) {&lt;!-- --&gt;&lt;/span&gt;\n                if (&lt;span class=\"hljs-keyword\"&gt;b[i] &lt;/span&gt;&amp;gt; &lt;span class=\"hljs-keyword\"&gt;b[j]) &lt;/span&gt;{\n                    int temp &amp;#61; &lt;span class=\"hljs-keyword\"&gt;b[i];\n&lt;/span&gt;                    &lt;span class=\"hljs-keyword\"&gt;b[i] &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;b[j];\n&lt;/span&gt;                    &lt;span class=\"hljs-keyword\"&gt;b[j] &lt;/span&gt;&amp;#61; temp;\n                }\n            }\n        }\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, k);\n        for (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; k; i&amp;#43;&amp;#43;) {&lt;!-- --&gt;&lt;/span&gt;\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;b[i]);\n&lt;/span&gt;        }\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["输入n个随机数，将相同的去掉并按从小到大排序。", ["输入数据有多组，每组测试数据有 2 行，第 1 行为 1 个正整数，表示所生成的随机数的个数：N", "\n", "第 2 行有 N 个用空格隔开的正整数，为所产生的随机数。", "\n", "对于每组测试实例，输出 2 行，第 1 行为 1 个正整数 M，表示不相同的随机数的个数。第 2 行为 M 个用空格隔开的正整数，为从小到大排好序的不相同的随机数。"]], "Tag": "算法设计"}
{"Answer": "雷是随机布的。为了避免用户踩开来第一个就是雷，雷可以在用户翻开来之后再随机产生。事实上布雷的算法和洗牌算法是一样的。\r\n在一个m*n的雷区中，每个单元格可以给它一个编号，比如第x行第y列就是m*x+y。因此所有单元格被编号为0~m*n-1。你只需要打乱他们的顺序，然后取这个序列的前几个（比如10个），根据序号可以反推出坐标，将这些单元格视作雷就可以了。\r\n旁边的数字表示在其周围8个格子中有几个雷（需要对边缘判断下，这里省略不表），比如用户点的是a,b，那么就是判断a-1,b-1;a,b-1;a+1,b-1;...a+1,b+1这几个单元格是否有雷，将雷数显示出来。\r\n\r\n扫雷的程序有很多，你可以找个现成的学习下，google里面输入 site:download.csdn.net 扫雷 源代码，就可以找到。", "Konwledge_Point": "算法与数字", "Question": ["扫雷布的问题，求大神解决", ["扫雷里面的布雷以及雷旁边的数字怎么布呢？？？？具体思想，算法，或者代码都可以，求大神方法"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;BigInteger又不是基本类型&amp;#xff0c;怎么直接乘&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["BigInteger类型的变量为什么只能用multiply来乘 不能直接乘数字吗", [" BigInteger类型的变量为什么只能用multiply来乘 不能直接乘数字吗"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt; &amp;#61; input(&lt;span class=\"hljs-string\"&gt;&amp;#39;请输入信用卡卡号(按回车键确定)&amp;#xff1a;&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;   &lt;span class=\"hljs-comment\"&gt;# 奇数位总和&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;)&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#43;&amp;#61; int(&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;[-i])\n\nb &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;   &lt;span class=\"hljs-comment\"&gt;# 偶数位总和&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;)&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;):\n    &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &amp;#61; int(&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;[-i])*&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; -&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;\n    b &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;&amp;#43;b) % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n    print(&lt;span class=\"hljs-string\"&gt;&amp;#39;校验通过&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n    print(&lt;span class=\"hljs-string\"&gt;&amp;#39;校验不通过&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["Python上机练习，字符类型及其操作", ["本关任务：编写一个能判断信用卡号是否合法的小程序。", "\n", "信用卡号必须通过lun算法进行校验，其过程：", "1、从卡号最后一位数字开始，逆向将奇数位(1、3、5等等)相加。", "2、从卡号倒数第二位数字开始，逆向将偶数位数字，先乘以2（如果乘积为两位数，则将其减去9），再求和。", "3、将奇数位总和加上偶数位总和，结果应该可以被10整除。", "例如，卡号是：5432123456788881", "逆向奇数位为 4 2 2 4 6 8 8 1 和 = 35", "逆向偶数位乘以2（有些要减去9）的结果：1 6 2 6 1 5 7 7，求和 = 35。", "最后 35 + 35 = 70 可以被10整除，认定校验通过。", "注意：信用卡的卡号长度是根据输入来确定的。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在Java中使用print的话是支持转义字符的&amp;#xff0c;或者可以直接拼接一个空格进行打印即可&amp;#xff0c;这里的print和C语言的print是类似的。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;System.out.&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["怎么把我这个数组横向输出，且每个数空格隔开", ["刚上大一，所以想请教一下各位", "试过去掉ln但是只会输出一团数字 想要隔开数字", "package 冒泡排序算法;", "import java.util.Scanner;", "public class Text {", "    public static void main(String[] args) {", "        int[] nums = {33,5,16,18,29,77,99,88};//待排序的数列", "\n", "    //外循环控制轮数\n    for(int i=0;i<nums.length-1;i++) {  //比较轮数等于数列的长度-1\n        for(int j=0;j<nums.length-1-i;j++) {\n            if(nums", "[j]", ">nums", "[j+1]", ") {\n                nums", "[j]", "=nums", "[j]", "+nums", "[j+1]", ";\n                nums", "[j+1]", "=nums", "[j]", "-nums", "[j+1]", ";\n                nums", "[j]", "=nums", "[j]", "-nums", "[j+1]", ";\n            \n            }\n        }\n    }\n//输出结果\n    for(int s:nums) {\n        System.out.println(s);\n    }\n}\n", "\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我现在写&amp;#xff0c;望采纳&amp;#xff01;&amp;#xff01;点击该回答右侧的“采纳”按钮即可采纳&amp;#xff01;&amp;#xff01;&lt;br /&gt;这是一个比较全面的任务&amp;#xff0c;需要用到 Python 中的不同机器学习库和模型来完成。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;对于第一类数据集&amp;#xff0c;我们可以使用 NumPy 库来生成数据&amp;#xff0c;并使用 scikit-learn 中的线性模型、决策树、感知机和双隐层全连接神经网络模型来进行分类。我们可以使用 scikit-learn 中的 train_test_split 函数将数据分成训练集和测试集&amp;#xff0c;然后使用不同的模型训练数据并预测结果。最后&amp;#xff0c;我们可以使用 scikit-learn 中的 classification_report 函数来计算各种指标&amp;#xff0c;例如精度、召回率和 F1 分数&amp;#xff0c;以及使用 matplotlib 库进行可视化。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;对于第二类数据集&amp;#xff0c;我们可以使用 TensorFlow 库中的 MNIST 数据集加载器来载入数据。然后使用 TensorFlow 中的全连接神经网络模型对数据进行分类。我们可以使用 TensorFlow 中的数据划分器将数据划分为训练集和测试集&amp;#xff0c;然后使用模型训练数据并预测结果。最后&amp;#xff0c;我们可以使用 TensorFlow 中的 evaluate 函数来计算模型的准确率&amp;#xff0c;并使用 matplotlib 库进行可视化。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;在尝试使用具有更多隐藏层的全连接神经网络时&amp;#xff0c;我们可以通过更改模型的结构来增加隐藏层的数量。具体来说&amp;#xff0c;我们可以使用 TensorFlow 中的 Keras API 来构建全连接神经网络模型&amp;#xff0c;并使用 add 函数来增加更多的隐藏层。然后我们可以使用 TensorFlow 中的 compile 函数来配置模型的优化器和损失函数&amp;#xff0c;并使用 fit 函数来训练模型。最后&amp;#xff0c;我们可以使用 evaluate 函数来计算模型的准确率&amp;#xff0c;并使用 matplotlib 库进行可视化。&lt;/p&gt;\n&lt;p&gt;在比较不同模型的精度差异时&amp;#xff0c;我们可以使用 classification_report 函数或 evaluate 函数计算出各种指标&amp;#xff0c;并使用 matplotlib 库进行可视化。我们可以对比这些指标&amp;#xff0c;来分析不同模型的优劣。此外&amp;#xff0c;我们还可以考虑因素&amp;#xff0c;例如模型的复杂度和训练数据的质量&amp;#xff0c;来分析可能的原因。&lt;/p&gt;\n&lt;p&gt;下面是一个示例代码&amp;#xff0c;它使用 NumPy 和 scikit-learn 库来处理第一类数据集&amp;#xff0c;并使用线性模型、决策树、感知机和双隐层全连接神经网络对数据进行分类&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;(1)&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; train_test_split\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; LogisticRegression\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.tree &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; DecisionTreeClassifier\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.neural_network &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; MLPClassifier\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; classification_report\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\n \n&lt;span class=\"hljs-comment\"&gt;# 生成数据&lt;/span&gt;\nX &amp;#61; np.random.randint(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, size&amp;#61;(&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;))\ny &amp;#61; np.logical_and(X[:, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], X[:, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n \n&lt;span class=\"hljs-comment\"&gt;# 将数据划分为训练集和测试集&lt;/span&gt;\nX_train, X_test, y_train, y_test &amp;#61; train_test_split(X, y, test_size&amp;#61;&lt;span class=\"hljs-number\"&gt;0.2&lt;/span&gt;)\n \n&lt;span class=\"hljs-comment\"&gt;# 定义模型&lt;/span&gt;\nmodels &amp;#61; [\n    LogisticRegression(),\n    DecisionTreeClassifier(),\n    MLPClassifier(hidden_layer_sizes&amp;#61;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,))\n]\n \n&lt;span class=\"hljs-comment\"&gt;# 分别训练模型并计算准确率&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; model &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; models:\n    &lt;span class=\"hljs-comment\"&gt;# 训练模型&lt;/span&gt;\n    model.fit(X_train, y_train)\n    &lt;span class=\"hljs-comment\"&gt;# 计算准确率&lt;/span&gt;\n    accuracy &amp;#61; model.score(X_test, y_test)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;&lt;span class=\"hljs-subst\"&gt;{model.__class__.__name__}&lt;/span&gt;的准确率为&amp;#xff1a;&lt;span class=\"hljs-subst\"&gt;{accuracy:&lt;span class=\"hljs-number\"&gt;.2&lt;/span&gt;f}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n你还可以使用 classification_report 函数计算更多的指标&amp;#xff0c;例如精度、召回率和 F1 分数。\n \n \n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; model &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; models:\n    &lt;span class=\"hljs-comment\"&gt;# 训练模型&lt;/span&gt;\n    model.fit(X_train, y_train)\n    &lt;span class=\"hljs-comment\"&gt;# 预测测测试集结果&lt;/span&gt;\ny_pred &amp;#61; model.predict(X_test)\n&lt;span class=\"hljs-comment\"&gt;# 计算指标&lt;/span&gt;\nreport &amp;#61; classification_report(y_test, y_pred)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;&lt;span class=\"hljs-subst\"&gt;{model.&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt;.name}&lt;/span&gt;的指标&amp;#xff1a;\\n&lt;span class=\"hljs-subst\"&gt;{report}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果你想要使用 matplotlib 库进行可视化&amp;#xff0c;你可以使用 matplotlib 库中的 plot 函数绘制散点图或直方图来展示数据分布情况&amp;#xff0c;或者使用 matplotlib 库中的 scatter 函数绘制散点图来展示模型的预测结果。&lt;/p&gt;\n&lt;p&gt;例如&amp;#xff0c;下面是使用 matplotlib 库绘制散点图的示例代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;plt&lt;span class=\"hljs-selector-class\"&gt;.scatter&lt;/span&gt;(X&lt;span class=\"hljs-selector-attr\"&gt;[:, 0]&lt;/span&gt;, X&lt;span class=\"hljs-selector-attr\"&gt;[:, 1]&lt;/span&gt;, c&amp;#61;y)\nplt&lt;span class=\"hljs-selector-class\"&gt;.title&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;数据分布情况&amp;#39;&lt;/span&gt;)\nplt&lt;span class=\"hljs-selector-class\"&gt;.xlabel&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;特征1&amp;#39;&lt;/span&gt;)\nplt&lt;span class=\"hljs-selector-class\"&gt;.ylabel&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;特征2&amp;#39;&lt;/span&gt;)\nplt&lt;span class=\"hljs-selector-class\"&gt;.show&lt;/span&gt;()\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;最后&amp;#xff0c;你可以对比各种模型的精度差异&amp;#xff0c;分析可能的原因&amp;#xff0c;并根据自己的目标来选择最优的模型。&lt;br /&gt;下面是一个使用 TensorFlow 和 Keras API 对现有的与、或、非、异或数据集进行分类并给出精度分析和可视化结果的示例代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;import tensorflow as tf\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; tensorflow import keras\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n&lt;span class=\"hljs-comment\"&gt;#生成数据&lt;/span&gt;\nX &amp;#61; np.random.randint(2, size&amp;#61;(1000, 4))\ny &amp;#61; np.logical_and(X[:, 0], X[:, 1])\n \n&lt;span class=\"hljs-comment\"&gt;#将数据划分为训练集和测试集&lt;/span&gt;\nX_train, X_test, y_train, y_test &amp;#61; train_test_split(X, y, &lt;span class=\"hljs-attribute\"&gt;test_size&lt;/span&gt;&amp;#61;0.2)\n \n&lt;span class=\"hljs-comment\"&gt;#使用 Keras API 构建双隐层全连接神经网络模型&lt;/span&gt;\nmodel &amp;#61; keras.Sequential([\nkeras.layers.Dense(128, &lt;span class=\"hljs-attribute\"&gt;activation&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;, input_shape&amp;#61;(4,)),\nkeras.layers.Dense(64, &lt;span class=\"hljs-attribute\"&gt;activation&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;),\nkeras.layers.Dense(1, &lt;span class=\"hljs-attribute\"&gt;activation&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;sigmoid&amp;#39;&lt;/span&gt;)\n])\n \n&lt;span class=\"hljs-comment\"&gt;#配置模型的优化器和损失函数&lt;/span&gt;\nmodel.compile(&lt;span class=\"hljs-attribute\"&gt;optimizer&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;adam&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-attribute\"&gt;loss&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;binary_crossentropy&amp;#39;&lt;/span&gt;, metrics&amp;#61;[&lt;span class=\"hljs-string\"&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;])\n \n&lt;span class=\"hljs-comment\"&gt;#训练模型&lt;/span&gt;\nhistory &amp;#61; model.fit(X_train, y_train, &lt;span class=\"hljs-attribute\"&gt;epochs&lt;/span&gt;&amp;#61;20, validation_data&amp;#61;(X_test, y_test))\n \n&lt;span class=\"hljs-comment\"&gt;#计算模型的准确率&lt;/span&gt;\naccuracy &amp;#61; model.evaluate(X_test, y_test)[1]\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#39;模型的准确率为&amp;#xff1a;{accuracy:.2f}&amp;#39;&lt;/span&gt;)\n \n&lt;span class=\"hljs-comment\"&gt;#使用 matplotlib 库绘制训练损失和验证损失&lt;/span&gt;\nplt.plot(history.history[&lt;span class=\"hljs-string\"&gt;&amp;#39;loss&amp;#39;&lt;/span&gt;], &lt;span class=\"hljs-attribute\"&gt;label&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;train loss&amp;#39;&lt;/span&gt;)\nplt.plot(history.history[&lt;span class=\"hljs-string\"&gt;&amp;#39;val_loss&amp;#39;&lt;/span&gt;], &lt;span class=\"hljs-attribute\"&gt;label&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;validation loss&amp;#39;&lt;/span&gt;)\n \nplt.legend()\nplt.show()\n \n&lt;span class=\"hljs-comment\"&gt;#使用 matplotlib 库绘制训练精度和验证精度&lt;/span&gt;\nplt.plot(history.history[&lt;span class=\"hljs-string\"&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;], &lt;span class=\"hljs-attribute\"&gt;label&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;train accuracy&amp;#39;&lt;/span&gt;)\nplt.plot(history.history[&lt;span class=\"hljs-string\"&gt;&amp;#39;val_accuracy&amp;#39;&lt;/span&gt;], &lt;span class=\"hljs-attribute\"&gt;label&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;validation accuracy&amp;#39;&lt;/span&gt;)\nplt.legend()\nplt.show()\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(2)下面是一个示例代码&amp;#xff0c;它使用 TensorFlow 和 matplotlib 库来处理 MNIST 数据集&amp;#xff0c;并使用线性模型、决策树、感知机和双隐层全连接神经网络对数据进行分类&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; tensorflow &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; tf\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; tensorflow &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; keras\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; train_test_split\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; LogisticRegression\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.tree &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; DecisionTreeClassifier\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.neural_network &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; MLPClassifier\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\n \n&lt;span class=\"hljs-comment\"&gt;# 加载数据&lt;/span&gt;\n(X_train, y_train), (X_test, y_test) &amp;#61; keras.datasets.mnist.load_data()\n \n&lt;span class=\"hljs-comment\"&gt;#将图像数据转换为一维向量&lt;/span&gt;\nX_train &amp;#61; X_train.reshape(X_train.shape[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\nX_test &amp;#61; X_test.reshape(X_test.shape[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n \n&lt;span class=\"hljs-comment\"&gt;#定义模型&lt;/span&gt;\nmodels &amp;#61; [\nLogisticRegression(),\nDecisionTreeClassifier(),\nMLPClassifier(hidden_layer_sizes&amp;#61;(&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;,))\n]\n \n&lt;span class=\"hljs-comment\"&gt;#分别训练模型并计算准确率&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; model &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; models:\n&lt;span class=\"hljs-comment\"&gt;# 训练模型&lt;/span&gt;\nmodel.fit(X_train, y_train)\n&lt;span class=\"hljs-comment\"&gt;# 计算准确率&lt;/span&gt;\naccuracy &amp;#61; model.score(X_test, y_test)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;&lt;span class=\"hljs-subst\"&gt;{model.&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt;.name}&lt;/span&gt;的准确率为&amp;#xff1a;&lt;span class=\"hljs-subst\"&gt;{accuracy:&lt;span class=\"hljs-number\"&gt;.2&lt;/span&gt;f}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n \n&lt;span class=\"hljs-comment\"&gt;#使用 matplotlib 库进行可视化&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i, model &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;enumerate&lt;/span&gt;(models):\n&lt;span class=\"hljs-comment\"&gt;# 预测测试数据&lt;/span&gt;\ny_pred &amp;#61; model.predict(X_test)\n&lt;span class=\"hljs-comment\"&gt;# 绘制前 25 个测试图像和预测结果&lt;/span&gt;\nplt.figure(figsize&amp;#61;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;))\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;):\nplt.subplot(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\nplt.imshow(X_test[j].reshape(&lt;span class=\"hljs-number\"&gt;28&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;28&lt;/span&gt;), cmap&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;gray&amp;#39;&lt;/span&gt;)\nplt.title(&lt;span class=\"hljs-string\"&gt;f&amp;#39;Predicted: &lt;span class=\"hljs-subst\"&gt;{y_pred[j]}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\nplt.axis(&lt;span class=\"hljs-string\"&gt;&amp;#39;off&amp;#39;&lt;/span&gt;)\nplt.suptitle(&lt;span class=\"hljs-string\"&gt;f&amp;#39;&lt;span class=\"hljs-subst\"&gt;{model.&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt;.name}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\nplt.show()\n \n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;注意&amp;#xff0c;在上述代码中&amp;#xff0c;我们使用了 scikit-learn 中的线性模型、决策树和感知机模型来处理 MNIST 数据集。这些模型可能不适用于图像数据&amp;#xff0c;因此可能不会得到很好的结果。此外&amp;#xff0c;我们也可以使用 TensorFlow 中的 Keras API 来构建全连接神经网络模型&amp;#xff0c;并使用 fit 函数来训练模型。最后&amp;#xff0c;我们可以使用 evaluate 函数来计算模型的准确率&amp;#xff0c;并使用 matplotlib 库进行可视化。&lt;/p&gt;\n&lt;p&gt;下面是一个使用 TensorFlow 和 Keras API 构建双隐层全连接神经网络模型并训练 MNIST 数据集的示例代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;import tensorflow as tf\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; tensorflow import keras\n \n&lt;span class=\"hljs-comment\"&gt;#加载数据&lt;/span&gt;\n(X_train, y_train), (X_test, y_test) &amp;#61; keras.datasets.mnist.load_data()\n \n&lt;span class=\"hljs-comment\"&gt;#将图像数据转换为一维向量&lt;/span&gt;\nX_train &amp;#61; X_train.reshape(X_train.shape[0], -1)\nX_test &amp;#61; X_test.reshape(X_test.shape[0], -1)\n \n&lt;span class=\"hljs-comment\"&gt;#归一化数据&lt;/span&gt;\nX_train &amp;#61; X_train / 255.0\nX_test &amp;#61; X_test / 255.0\n \n&lt;span class=\"hljs-comment\"&gt;#使用 Keras API 构建双隐层全连接神经网络模型&lt;/span&gt;\nmodel &amp;#61; keras.Sequential([\nkeras.layers.Dense(128, &lt;span class=\"hljs-attribute\"&gt;activation&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;, input_shape&amp;#61;(784,)),\nkeras.layers.Dense(64, &lt;span class=\"hljs-attribute\"&gt;activation&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;),\nkeras.layers.Dense(10, &lt;span class=\"hljs-attribute\"&gt;activation&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;softmax&amp;#39;&lt;/span&gt;)\n])\n \n&lt;span class=\"hljs-comment\"&gt;#配置模型的优化器和损失函数&lt;/span&gt;\nmodel.compile(&lt;span class=\"hljs-attribute\"&gt;optimizer&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;adam&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-attribute\"&gt;loss&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;sparse_categorical_crossentropy&amp;#39;&lt;/span&gt;, metrics&amp;#61;[&lt;span class=\"hljs-string\"&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;])训练模型\nmodel.fit(X_train, y_train, &lt;span class=\"hljs-attribute\"&gt;epochs&lt;/span&gt;&amp;#61;5)\n \n&lt;span class=\"hljs-comment\"&gt;#评估模型&lt;/span&gt;\ntest_loss, test_acc &amp;#61; model.evaluate(X_test, y_test, &lt;span class=\"hljs-attribute\"&gt;verbose&lt;/span&gt;&amp;#61;2)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#39;测试集的准确率&amp;#xff1a;{test_acc:.2f}&amp;#39;&lt;/span&gt;)\n \n&lt;span class=\"hljs-comment\"&gt;#使用 matplotlib 库进行可视化&lt;/span&gt;\ny_pred &amp;#61; model.predict(X_test)\n \n&lt;span class=\"hljs-comment\"&gt;#绘制前 25 个测试图像和预测结果&lt;/span&gt;\nplt.figure(figsize&amp;#61;(10, 5))\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(25):\nplt.subplot(5, 5, i&amp;#43;1)\nplt.imshow(X_test[i].reshape(28, 28), &lt;span class=\"hljs-attribute\"&gt;cmap&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;gray&amp;#39;&lt;/span&gt;)\nplt.title(f&lt;span class=\"hljs-string\"&gt;&amp;#39;Predicted: {np.argmax(y_pred[i])}&amp;#39;&lt;/span&gt;)\nplt.axis(&lt;span class=\"hljs-string\"&gt;&amp;#39;off&amp;#39;&lt;/span&gt;)\nplt.show()\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;注意&amp;#xff0c;在上述代码中&amp;#xff0c;我们使用了 TensorFlow 和 Keras API 来构建双隐层全连接神经网络模型&amp;#xff0c;并使用 fit 函数来训练模型。然后使用 evaluate 函数来计算模型的准确率&amp;#xff0c;并使用 matplotlib 库进行可视化。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["有关#机器学习#的问题，怎么解决？", ["现有两类数据集：第一类是与、或、非、异或四个数据集，第二类是MNIST手写体数字图片数据集。请分别用教材《机器学习》（周志华著）第3章中的线性模型（任务一）、第4章中的决策树（任务二）、以及第5章中的感知机（任务三）和双隐层全连接神经网络（任务四）分别对上述两类数据集进行分类并给出精度分析和可视化结果；以及尝试采用具有更多隐藏层的全连接神经网络对第二类数据集进行分类，并给出精度分析和可视化结果（任务五）；最后需要对比上述五种任务中的不同模型得到的精度差别，并分析可能的原因，以及由此受到的启发（任务六）。", "要求：", "（1）编程采用MATLAB或Python，代码的所有行均需要有注释。代码单独提交，多个代码需要组织合理，环境配置要清楚指明。", "（2）任务一到任务四的核心算法部分不可以调用库函数，否则最多得相应满分的60%。", "（3）任务一到任务五都可能在编程正确的情况下依然效果不理想，请提出相应的改进方案。在改进时，任务一到任务四的模型类型不能改变，任务五的模型类型可以改变。", "（4）任务一和任务二可以只采用一种算法进行实验，不要求采用所有相关算法。"]], "Tag": "算法设计"}
{"Answer": "写了一个shell排序，把每一步的输出结果打印了一下\r\n```\r\n#include &lt;stdio.h&gt;\r\n\r\nvoid shell_sort(int array[], int length){\r\n\tint i;\r\n\tint j;\r\n\tint k;\r\n\tint gap;\r\n\tint temp;\r\n\tfor(gap=length/2; gap&gt;0; gap=gap/2){\r\n\t\tfor(i=0; i&lt;gap; i++){\r\n\t\t\tfor (int ii = 0; ii &lt; length; ii++)\r\n\t\t\t\tprintf(\"%d \", array[ii]);\r\n\t\t\tprintf(\"\\n\");\r\n\t\t\tfor(j=i+gap; j&lt;length; j=j+gap){\r\n\t\t\t\tif(array[j] &lt; array[j - gap]){\r\n\t\t\t\t\ttemp = array[j];\r\n\t\t\t\t\tk = j - gap;\r\n\t\t\t\t\twhile(k&gt;=0 &amp;&amp; array[k]&gt;temp){\r\n\t\t\t\t\t\tarray[k + gap] = array[k];\r\n\t\t\t\t\t\tk = k - gap;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tarray[k + gap] = temp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nint main()\r\n{\r\n\tint arr[] = {12,2,16,30,8,128,4,10,20,6,18};\r\n\tshell_sort(arr, 11);\r\n\tfor (int ii = 0; ii &lt; 11; ii++)\r\n\t\tprintf(\"%d \", arr[ii]);\r\n   printf(\"\\n\");\r\n   return 0;\r\n}\r\n```\r\n\r\n12 2 16 30 8 128 4 10 20 6 18 \r\n12 2 16 30 8 18 4 10 20 6 128 \r\n12 2 16 30 8 18 4 10 20 6 128 \r\n12 2 10 30 8 18 4 16 20 6 128 \r\n12 2 10 20 8 18 4 16 30 6 128 \r\n12 2 10 20 6 18 4 16 30 8 128 \r\n4 2 6 20 10 18 12 16 30 8 128 \r\n4 2 6 8 10 16 12 18 30 20 128 \r\n2 4 6 8 10 12 16 18 20 30 128 \r\n\r\n\r\n如果不理解，这里有动画过程，自己看看吧\r\nhttps://en.wikipedia.org/wiki/Shellsort", "Konwledge_Point": "算法与数字", "Question": ["【12，2，16，30，8，128，4，10，20，6，18】按照希尔排序", ["上面的数字请按照希尔排序，并且有每一步详细的过程，还有它这种算法好在哪里，", "\n不还是要用直接插入排序吗。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;python堆排序算法参考&lt;br /&gt;&lt;a href=\"https://www.runoob.com/python3/python-heap-sort.html\" id=\"textarea_1639586278278_1639586504327_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;Python 堆排序 | 菜鸟教程&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;Python 堆排序   Python3 实例   堆排序&amp;#xff08;Heapsort&amp;#xff09;是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构&amp;#xff0c;并同时满足堆积的性质&amp;#xff1a;即子结点的键值或索引总是小于&amp;#xff08;或者大于&amp;#xff09;它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。     实例    [mycode3 type&amp;#61;&amp;#39;python&amp;#39;] def heapify(arr, n, i):      largest ..&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://static.runoob.com/images/favicon.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.runoob.com/python3/python-heap-sort.html&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["用Python构建堆", ["问题遇到的现象和发生背景", "\n", "构建堆是堆排序算法的关键步骤。该算法在最坏情况下的运行时间为 O(n log n)，与快速排序算法不同，后者仅在平均情况下保证这样的估计。几种排序算法在实践中比较常用的是组合。将数组转化为堆，需要对其元素进行多次交换。我们将交换称为交换元素 A[i] 和 A[j] 的基本操作。你在这个任务中的目标是将一个给定的数组转换成一个线性数量的交换的堆。", "\n", "数据输入输出例子解释", "\n", "输入第一行包含数字 n。下一行指定了一个数字数组 A[0], …… , A[n − 1] (1< n< 10^5; 0< A[i]< 10^9 for all 0< i< n - 1 ;所有A[i]都是成对不同的；i≠qj).输出输出的第一行必须包含交换次数m，必须满足不等式0 < m < 4 n。以下 m 行中的每一行都应指定数组 A 的两个元素的交换。每个交换由一对不同的索引 0< i≠qj< n - 1 定义，其中一个等式 j = 2i + 1, j = 2i + 2, i = 2j + 1 or i = 2j + 2 都满足了。按照指定的顺序应用所有的交换后，数组应该变成一个最小堆，即所有的都必须满足以下两个条件0< i< n - 1：", "如果 2i + 1< n − 1，则 A[i] < A[2i + 1]。", "如果 2i + 2< n − 1，则 A[i] < A[2i + 2]。", "\n", "问题相关例子", "\n", "1.输入", "6", "0 1 2 3 4 5", "输出", "0", "2.输入", "6", "7 6 5 4 3 2", "输出", "4", "2 5", "1 4", "0 2", "2 5", "\n", "我想要达到的结果", "\n", "用Python构建堆，写一下注释"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;傻子做法&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#include &amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; namespace std;\n\nconst &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; N&amp;#61;&lt;span class=\"hljs-number\"&gt;1e6&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; treee[N];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,flag&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; find_public_father(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; u,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v){\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t1&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,t2&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,arr1[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;],arr2[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;];\n    arr1[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;u; arr2[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;v;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(u&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;){\n        u/&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        arr1[t1&amp;#43;&amp;#43;]&amp;#61;u;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(v&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;){\n        v/&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        arr2[t2&amp;#43;&amp;#43;]&amp;#61;v;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;t1;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;t2;j&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(arr1[i]&amp;#61;&amp;#61;arr2[j]){\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; arr1[i];\n            }\n        }\n    }\n}\n\n&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; u,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; w){\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(u&amp;#61;&amp;#61;v){\n        flag&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(u&amp;gt;v){\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u,v,w);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag){\n        treee[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u]&amp;#43;&amp;#61;w;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,v,w);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag){\n        treee[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#43;&amp;#61;w;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; travel(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; u,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v){\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(u&amp;#61;&amp;#61;v){\n        flag&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(u&amp;gt;v){\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    travel(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u,v);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag){\n        sum&amp;#43;&amp;#61;treee[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u];\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    travel(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,v);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag){\n        sum&amp;#43;&amp;#61;treee[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; main(){\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; q; cin &amp;gt;&amp;gt; q;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(q&lt;span class=\"hljs-comment\"&gt;--){&lt;!-- --&gt;&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x,u,v,w;; cin &amp;gt;&amp;gt; x;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;){\n            cin &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v &amp;gt;&amp;gt; w;\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; father&amp;#61;find_public_father(u,v); \n            // cout &amp;lt;&amp;lt; &amp;#34;their father is:&amp;#34; &amp;lt;&amp;lt; father &amp;lt;&amp;lt; endl;\n            flag&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(father,u,w);\n            flag&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(father,v,w);\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;){\n            cin &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v;\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; father&amp;#61;find_public_father(u,v);\n            sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            flag&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; travel(father,u);\n            flag&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; travel(father,v);\n            cout &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;\n        }\n        // &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        //     cout &amp;lt;&amp;lt; treee[i] &amp;lt;&amp;lt; &amp;#34; &amp;#34;;\n        // }\n    }\n    // &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&amp;#34;pause&amp;#34;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;正解&amp;#xff1a;&lt;a href=\"https://www.cnblogs.com/wzl19981116/p/10087302.html\" id=\"textarea_1666627756057_1666628053082_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.cnblogs.com/wzl19981116/p/10087302.html&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Add&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(ll x,ll y,ll w)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x&amp;gt;y)\n        {\n            a[x]&amp;#43;&amp;#61;w;\n            x/&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        }&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(x&amp;lt;y)&lt;/span&gt;\n        &lt;/span&gt;{\n            a[y]&amp;#43;&amp;#61;w;\n            y/&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n}\n&lt;span class=\"hljs-function\"&gt;ll &lt;span class=\"hljs-title\"&gt;query&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(ll x,ll y)&lt;/span&gt;\n&lt;/span&gt;{\n    ll ans&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x&amp;gt;y)\n        {\n            ans&amp;#43;&amp;#61;a[x];\n            x/&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        }&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(x&amp;lt;y)&lt;/span&gt;\n        &lt;/span&gt;{\n            ans&amp;#43;&amp;#61;a[y];\n            y/&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ans;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["数据结构程序设计实践-收费", ["问题遇到的现象和发生背景", "\n", "算法与数据结构", "\n", "★实验任务", "\n", "有一张无限大的图，图中的节点编号从1开始。图中节点由无向边连接，编号为i的节点分别与2i号节点和2i+1号节点连接，显然任意两个点之间的最短路是确定的且唯一的。最开始每条边上的花费都是0。 接下来有两种操作", "\n", "给从u到v的最短路上的每条边都加上w的花费", "\n", "计算走最短路从u到v的总花费（即路上所有边的花费和）", "\n", "★数据输入", "\n", "第一行输入一个整数q，表示操作的数量，接下来q行，每行第一个数字代表操作的类型，如果是1号操作，则紧接着输入u，v，w三个整数；如果是2号操作，接着输入u，v两个整数。", "\n", "★数据输出", "\n", "对于每一个2号操作，输出一行一个数字，代表路上的总花费", "\n", "输入示例", "7", "1 3 4 30", "1 4 1 2", "1 3 6 8", "2 4 3", "1 6 1 40", "2 3 7", "2 2 4", "输出示例", "94", "0", "32", "★数据范围", "\n", "50% : q <= 10, 1≤u,v,w≤1000", "\n", "100% : q <= 1000, 1≤u,v≤1000000,w <= 1e9", "\n", "我的解答思路和尝试过的方法", "\n", "毫无思路，没有学习图的话，如何通过树来完成呢？"]], "Tag": "算法设计"}
{"Answer": "http://wenku.baidu.com/link?url=en3r9QFo5GmOLMsh_wd6P56zL6zmWYDnIv3x6GW4L5EQEwJtABy-dsAf8RH8M4BgnUJ1tGR1CIusd7nbqzP9or6CMVP51_cSz3AEseIkVWG", "Konwledge_Point": "算法与数字", "Question": ["数据结构预算法      要求统计自己输入文本的数字字母或者文字的个数   把学生独立完成部分填上", ["#include ", "\n#include ", "\n#include ", "\n#include ", "\n#include ", "\n#define MAXSIZE 1000", "\n#define MAXLEN 20", "\n#define MAXNUM 16", "\n#define FALSE 0", "\n#define TRUE 1", "\n/*---------------堆结构的定义---------------*/", "\ntypedef struct{", "\nchar stores[MAXSIZE];", "\nint freep;  //当前可用空间开始位置", "\n}HeapSpace;", "\nHeapSpace sp;", "\n/*-------------单词数据类型定义-------------*/", "\n/*-----------单词在堆中的位置描述-----------*/", "\ntypedef struct{", "\nint stadr; //单词在对空间中的开始位置", "\nint len; //单词长度", "\n}WordType;", "\n/*----------------单词描述-------------------*/", "\ntypedef struct{", "\nchar ch[MAXLEN]; //单词字符串", "\nint size; //单词长度", "\n}Sequence;", "\n/*---------------有序表类型定义---------------*/", "\n/*-------------单词有序表结点定义-------------*/", "\ntypedef WordType ElemType;", "\ntypedef struct NodeType{", "\nElemType data;", "\nstruct NodeType ", "next;", "\n}NodeType,*LinkType;", "\n/", "----------------单词有序表定义--------------*/", "\ntypedef struct{", "\nLinkType head; //有序表头指针", "\n LinkType tail; //有序表尾指针", "\n int size; //有序表结点个数", "\n }OrderList;", "\n/*---记录一行中匹配成功单词在目标词汇表中的位置---*/", "\ntypedef struct{", "\n int eqelem[MAXNUM]; //单词在目标词汇表中的位置", "\n int last;  //匹配成功单词的个数", "\n }EqelemList;", "\n/*-----------文件测试相关的数据类型定义-----------*/", "\n/*--------------单词在文件中的位置----------------*/", "\ntypedef struct Node{", "\n int elem;  //被测单词在文件中的行号", "\n struct Node ", "next;//指向下一个行号结点的指针", "\n }Node,*Link;", "\n/", "-----------单词统计分析记录结构定义-------------*/", "\ntypedef struct{", "\n WordType data; //被测试的单词", "\n int count; //在文件中出现的次数", "\n Link next; //记录出现的所有行号的脸表头指针", "\n }HeadNode;", "\n/*---------文本文件测试结果记录定义---------------*/", "\ntypedef HeadNode ResultType[MAXNUM];", "\ntypedef int status;", "\n/*------------与单词相关的函数----------------*/", "\nstatus NewWord(WordType ", "nw,Sequence cha)", "\n{ int i,k;", "\n if(sp.freep+cha.size>=MAXSIZE)", "\n { printf(\"Heap Full!\\n\");", "\n getchar();", "\n return(0);", "\n }", "\n else{", "\n i=sp.freep;", "\n sp.freep=sp.freep+cha.size;", "\n for(k=0;k\n sp.stores[i+k]=cha.ch[k];", "\n nw->stadr=i;", "\n nw->len=cha.size;", "\n return(1);", "\n }", "\n }", "\nvoid CopyWord(WordType *nw,WordType oldw)", "\n{ nw->stadr=oldw.stadr;", "\nnw->len=oldw.len;", "\n}", "\nint WordCmp(WordType wd1,WordType wd2)", "\n{ int k,si,sj;", "\n(学生独立完成）", "\n}", "\nvoid PrintWord(WordType wd)", "\n{ int i;", "\nfor(i=0;i<wd.len;i++)", "\nputchar(sp.stores[wd.stadr+i]);", "\n}", "\n/", "---------------与有序表相关的函数-----------*", "\nstatus MakeNode(LinkType ", "p,ElemType e)", "\n{ *p=(LinkType)malloc(sizeof(NodeType));", "\nif(!(*p)) return(FALSE);", "\n(*p)->data.stadr=e.stadr;", "\n(*p)->data.len=e.len;", "\n(*p)->next=NULL;", "\nreturn(TRUE);", "\n}", "\nstatus InitList(OrderList *L)", "\n{ ElemType wd;", "\nwd.len=0;", "\nif(MakeNode(&(L->head),wd))", "\n{ L->tail=L->head;", "\nL->head->next=NULL;", "\nL->size=0;", "\nreturn(TRUE);", "\n}", "\nelse{ L->head=NULL;", "\nreturn(FALSE);", "\n}", "\n}", "\nvoid DestroyList(OrderList *L)", "\n{ LinkType p,q;", "\np=L->head;", "\nwhile(p){", "\nq=p;p=p->next;", "\nfree(q);", "\n}", "\nL->head=L->tail=NULL;", "\n}", "\nstatus LocateElem(OrderList L,ElemType e,LinkType *q)", "\n{ LinkType pre,p;", "\n(学生独立完成)", "\n}", "\nvoid InsertAfter(OrderList *L,LinkType q,LinkType s)", "\n{ if(L->head&&q&&s){", "\ns->next=q->next;q->next=s;", "\nif(L->tail==q) L->tail=s;", "\nL->size++;", "\n}", "\n}", "\nvoid ListCompare(OrderList La,OrderList Lb,EqelemList *s)", "\n{ int pos;", "\nLinkType pa,pb;", "\nif(La.head&&Lb.head){", "\npa=La.head->next;", "\npb=Lb.head->next;", "\ns->last=pos=0;", "\nwhile(pa&&pb){", "\nif(WordCmp(pa->data,pb->data)==0){", "\ns->eqelem[s->last++]=pos++;", "\npa=pa->next;", "\npb=pb->next;", "\n}", "\nelse if(WordCmp(pa->data,pb->data)==-1){", "\npa=pa->next;", "\npos++;", "\n}", "\nelse pb=pb->next;", "\n}", "\n}", "\n}", "\nstatus ListEmpty(OrderList L)", "\n{ if(L.size==0) return(TRUE);", "\nreturn(FALSE);", "\n}", "\n/", "-----------与文本文件有关的函数-------------*/", "\nint feoln(FILE ", "f)", "\n{ char cha;", "\ncha=fgetc(f);", "\nungetc(cha,f);", "\n if(cha=='\\n') return(TRUE);", "\n return(FALSE);", "\n }", "\nvoid GetAWord(FILE *f,Sequence *st)", "\n{ char ch;", "\n (学生独立完成）", "\n }", "\nstatus ExtractWord(FILE *f,OrderList *ta)", "\n{ int i;", "\n char lendc;", "\n Sequence str;", "\n WordType nwd;", "\n LinkType p;", "\n LinkType s;", "\n (学生独立完成）", "\n }", "\nstatus match(FILE *f,OrderList pat,ResultType rs)", "\n{ int i,k,linenum,failed,fsp;", "\n OrderList sa;", "\n EqelemList eqlist;", "\n Link p;", "\n (学生独立完成）", "\n }", "\nstatus Initialization(FILE **fr)", "\n{ char FileName[30];", "\n printf(\"Input file name:\");", "\n do{ scanf(\"%s\",FileName);", "\n }while(strlen(FileName)==0);", "\n *fr=fopen(FileName,\"rb\");", "\n if(*fr)", "\n { printf(\"file open!\\n\");", "\n return(TRUE);", "\n }", "\n else { printf(\"file not open!\\n\");", "\n return(FALSE);", "\n }", "\n }", "\nvoid InputWord(OrderList *pt)", "\n{ char cc;", "\nSequence ws;", "\nLinkType p,q;", "\nWordType nwd;", "\n(学生独立完成）", "\n}", "\nvoid InitRList(ResultType rs,OrderList pat)", "\n{ int k;", "\nLinkType p;", "\np=pat.head->next;", "\nfor(k=0;k\nCopyWord(&rs[k].data,p->data);", "\nrs[k].next=NULL;", "\nrs[k].count=0;", "\np=p->next;", "\n}", "\n}", "\nvoid OutResult(ResultType rslist,int n)", "\n{ int i,j;", "\nLink p;", "\nfor(i=0;i\nprintf(\"The word \");", "\nPrintWord(rslist[i].data);", "\nprintf(\" appeared in the file %d times\",rslist[i].cou", "\nif(rslist[i].count!=0){", "\nprintf(\" and on \");", "\np=rslist[i].next;", "\nfor(j=0;j\nif(j\n{ printf(\"%d,\",p->elem);", "\np=p->next;", "\n}", "\nelse printf(\"%d\\n\",p->elem);", "\n}", "\n}", "\n}", "\nvoid FreeResult(ResultType rs,int n)", "\n{ int i;", "\nLink p,q;", "\nfor(i=0;i\np=rs[i].next;", "\n while(p){", "\n q=p;", "\n p=p->next;", "\n free(q);", "\n }", "\n rs[i].next=NULL;", "\n rs[i].count=0;", "\n }", "\n }", "\nint nemu()", "\n{ int mun;", "\n printf(\"\\n *", "******* Literary research aid *********\\n\") ;", "\n printf(\" ", "%8c1---Input matched words%9c\\n\",' ','", "');", "\n printf(\" ", "%8c2---Input match file%13c\\n\",' ','", "');", "\n printf(\" ", "%8c3---Proces file%17c\\n\",' ','", "');", "\n printf(\" ", "%8c4---Output Result%15c\\n\",' ','", "');", "\n printf(\" ", "%8c5---Quit%24c\\n\",' ','", "');", "\n printf(\" *****************************************\\n\");", "\n printf(\"%15cSelcet 1,2,3,4,5: \",' ');", "\n do{", "\n mun=getch()-48;", "\n }while(mun5);", "\n printf(\"\\n\");", "\n return(mun);", "\n}", "\n/*--------------------------------------------*/", "\n/* 主函数  ", "/", "\n/", "--------------------------------------------*/", "\nvoid main()", "\n{ int i,j,flag1=0,flag2=0,flag3=0;", "\n char str[80];", "\n FILE *fp;", "\n OrderList pt;", "\n LinkType p;", "\n ResultType rs;", "\n sp.freep=0;", "\n pt.size=0;", "\n for(i=0;i<MAXNUM;i++) rs[i].next=NULL;", "\n while(1)", "\n { switch(nemu())", "\n {", "\n 93", "\n case 1: //输入待统计的单词集", "\n if(pt.size!=0) DestroyList(&pt);", "\n InputWord(&pt);", "\n if(!ListEmpty(pt)) flag2=1;", "\n break;", "\n case 2: //初始化文件", "\n if(Initialization(&fp)) flag1=1;", "\n break;", "\n case 3: //统计分析", "\n if(flag1==0||flag2==0)", "\n { printf(\"file not processed!\\n\");", "\n getchar();", "\n break;", "\n }", "\n FreeResult(rs,pt.size);", "\n InitRList(rs,pt);", "\n if(!match(fp,pt,rs))", "\n { printf(\"memory overfllow!\\n\");", "\n getchar();", "\n break;", "\n }", "\n else flag3=1;", "\n break;", "\n case 4: //输出统计结果", "\n if(flag3==0){", "\n printf(\"not result!\\n\");", "\n getchar();", "\n break;", "\n }", "\n OutResult(rs,pt.size);", "\n break;", "\n case 5: //退出系统", "\n FreeResult(rs,pt.size);", "\n DestroyList(&pt);", "\n return;", "\n }", "\n }", "\n}"]], "Tag": "算法设计"}
{"Answer": "个人认为：首先要构成回文，是不是应该是一对称数组才行？如果是一个对称数组？就像例子一样。1234564321，length=10,如果是123454321，length=9,这个已经是回文了，所以\r\n长度是双数，我们可以将1234 56 4321中间的两个数（5,6）任意删去其一，就构成回文了。希望能够帮助你。", "Konwledge_Point": "算法与数字", "Question": ["通过删改构成最长回文数问题", ["给定一串数字，通过删除某些数字构成一个回文数，算法如何实现，最好使用java试实现。例 1234564321，删除5或者6，就构成了最长回文数。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1.C风格的代码&lt;br /&gt;2.分为两部分&amp;#xff0c;一部分是Main上面的&amp;#xff0c;一部分是main里面的&amp;#xff0c;&lt;br /&gt;3.struct Student 是一个结构体&amp;#xff0c;a是这个结构体的一个对象&lt;br /&gt;4.进入main&amp;#xff0c;先打印a中的数据&lt;br /&gt;5.然后通过键盘输入获取&amp;#43; - * / 加减乘除&lt;br /&gt;6.获取三个数进行相应计算&amp;#xff0c;输出结果&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["家人🚪，可以解析一下这个代码吗？", ["#include <stdio.h>", "#include <stdlib.h>", "#include<stdio.h>", "struct Student {", "    long int num;", "    char name[20];", "    char sex[20];", "    char addr[20];", "    char xuehao[20];", "}", "a = {", "2108,\"xx\",\"女\",\"123456\",\"123456abc\"}", ";", "int data1;", "int data2;", "int data3;", "void tips()", "{", "    printf(\"\\n\");", "    printf(\"\\n\");", "    printf(\"\\n\");", "    printf(\"\\n\");", "}", "void huoqu(){", "    printf(\"请输入第一个数字:\\n\");", "    scanf(\"%d\",&data1);", "    printf(\"请输入第二个数字:\\n\");", "    scanf(\"%d\",&data2);", "}", "int main(){", "    printf(\"num:%d\\n name:%s\\nsex:%s\\naddress:%s\\nxuehao:%s\", a.num, a.name, a.sex, a.addr, a.xuehao);", "    int data1;", "    int data2;", "    int data3;", "    char suanfa;", "    int mark = 0;", "    while(1)", "    {", "        tips();", "        if(mark != 0)", "        getchar();", "        scanf(\"%c\",&suanfa);", "        getchar();", "        mark = 1;", "        switch(suanfa)            {", "            case '+' :                printf(\"你输入了加法\\n\");", "            printf(\"请输入第一个数字\\n\");", "            scanf(\"%d\",&data1);", "            printf(\"请输入第二个数字\\n\");", "            scanf(\"%d\",&data2);", "            printf(\"请输入第三个数字\\n\");", "            scanf(\"%d\",&data3);", "            printf(\"%d+%d+%d=%d\",data1,data2,data3,data1+data2+data3);", "            break;", "            case '-' :                printf(\"你输入了减法\\n\");", "            printf(\"请输入第一个数字\\n\");", "            scanf(\"%d\",&data1);", "            printf(\"请输入第二个数字\\n\");", "            scanf(\"%d\",&data2);", "            printf(\"请输入第三个数字\\n\");", "            scanf(\"%d\",&data3);", "            printf(\"%d-%d-%d=%d\",data1,data2,data3,data1-data2-data3);", "            break;", "            case '", "' :                printf(\"你输入了乘法\\n\");", "            printf(\"请输入第一个数字\\n\");", "            scanf(\"%d\",&data1);", "            printf(\"请输入第二个数字\\n\");", "            scanf(\"%d\",&data2);", "            printf(\"请输入第三个数字\\n\");", "            scanf(\"%d\",&data3);", "            printf(\"%d", "%d*%d=%d\",data1,data2,data3,data1", "data2", "data3);", "            break;", "            case '/' :                printf(\"你输入了除法\\n\");", "            printf(\"请输入第一个数字\\n\");", "            scanf(\"%d\",&data1);", "            printf(\"请输入第二个数字\\n\");", "            scanf(\"%d\",&data2);", "            printf(\"请输入第三个数字\\n\");", "            scanf(\"%d\",&data3);", "            printf(\"%d/%d/%d=%d\",data1,data2,data3,data1/data2/data3);", "            break;", "            default :                printf(\"你的算法选择错误，请重新选择\\n\");", "            break;", "        }", "    }", "    system(\"pause\");", "    system(\"pause\");", "    return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;提供一种思路&amp;#xff0c;不一定很好。&lt;br /&gt;先思考单一数列中按顺序取若干元素的最大值问题。&lt;br /&gt;这个问题的一种固定解法就是&amp;#xff1a;在可以选择的范围内&amp;#xff0c;选择最大的元素&amp;#xff1b;如果有多个最大元素&amp;#xff0c;选择最靠左的那个。&lt;br /&gt;举例&amp;#xff0c;在2868734952中选择5个数字构成最大值。&lt;br /&gt;首先&amp;#xff0c;第一个元素只能在最左边的&amp;#34;286873&amp;#34;中选出&amp;#xff08;因为再向右选的话剩余元素就凑不出4个数字了&amp;#xff0c;也就是最后的结果凑不出5位数&amp;#xff09;。&lt;br /&gt;在&amp;#34;286873&amp;#34;中最大元素是8&amp;#xff0c;我们选择尽可能靠左的“8”输出&amp;#xff0c;然后剩下的序列变成&amp;#34;68734952&amp;#34;&lt;br /&gt;下一个元素只能在&amp;#34;68734&amp;#34;中选出&amp;#xff0c;选8&amp;#xff0c;剩下序列&amp;#34;734952&amp;#34;&lt;br /&gt;第3个元素只能在&amp;#34;7349&amp;#34;中选出&amp;#xff0c;选9&amp;#xff0c;剩下序列&amp;#34;52&amp;#34;&lt;br /&gt;依次类推。&lt;br /&gt;最后结果是88952。&lt;/p&gt;\n&lt;p&gt;双数列要复杂的多&amp;#xff0c;但是可以用类似的思路来处理它们。&lt;/p&gt;\n&lt;p&gt;假设有数列A(1,n)&amp;#61;{a1, a2, ... an}和B(1,m)&amp;#61;{b1,b2,...,bm}&amp;#xff0c;从中要选取K个元素。怎么做呢&amp;#xff1f;&lt;br /&gt;显然&amp;#xff0c;第1个元素要么从A(1,n)中给出&amp;#xff0c;要么从B(1,m)中给出。&lt;br /&gt;所以&amp;#xff0c;我们可以构造数列(A(1,n),B(1,m))&amp;#61;{a1,a2,...,an,b1,b2,...bm}&amp;#xff0c;从允许的范围内挑出最靠左边的最大元素f1&amp;#xff08;这个时候挑出的元素是A中的可能性大&amp;#xff09;。&lt;br /&gt;我们再构造一个数列(B(1,m),A(1,n))&amp;#61;{b1,b2,...,bm,a1,a2,...an}&amp;#xff0c;从允许的范围内挑出最靠左边的最大元素f2&amp;#xff08;这个时候挑出的元素是B中的可能性大&amp;#xff09;。&lt;br /&gt;如果f1&amp;lt;&amp;gt;f2&amp;#xff0c;选择大的值输出&amp;#xff0c;然后把A或B中该值以及左边的内容切除&amp;#xff1b;&lt;br /&gt;如果f1&amp;#61;f2&amp;#xff0c;且f1、f2都是A或都是B中的元素&amp;#xff0c;则f1和f2必是同一个元素&amp;#xff0c;把该元素输出&amp;#xff0c;并在对应的数列中切除f1以及左边的所有元素;&lt;br /&gt;如果f1&amp;#61;f2&amp;#xff0c;但是f1是ai, f2是bj&amp;#xff0c;则当前步骤无法判断哪个值更合适&amp;#xff0c;需要依次递归进行后续的切割后方能判断。&lt;/p&gt;\n&lt;p&gt;大致的核心伪代码如下&amp;#xff08;偷懒起见&amp;#xff0c;用char数组代表数列&amp;#xff0c;用String代表输出的子序列&amp;#xff09;&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;char[] A&amp;#61;....;&lt;br /&gt;char[[ B&amp;#61;....;&lt;br /&gt;int getMaxIndexInA(int ai, int bj, int L) {&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    //在{ai, ai&amp;#43;1,... an, bj, bj&amp;#43;1, ... bm}中&amp;#xff0c;排除最右边的L-1个元素后&amp;#xff0c;找最左边最大的元素&amp;#xff0c;如果该元素属于A&amp;#xff0c;返回其序号&amp;#xff0c;否则返回-1。&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;int getMaxIndexInB(int ai, int bj, int L) {&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    //在{bj, bj&amp;#43;1, ... bm,ai, ai&amp;#43;1,... an}中&amp;#xff0c;排除最右边的L-1个元素后&amp;#xff0c;找最左边最大的元素&amp;#xff0c;如果该元素属于B&amp;#xff0c;返回其序号&amp;#xff0c;否则返回-1。&lt;/span&gt;&lt;br /&gt;}&lt;/p&gt;\n&lt;p&gt;//获取由序列{ai,...an}以及{bj,...,bm}之中的顺序最大子序列&amp;#xff0c;返回其值。&lt;br /&gt;String getSubList(int ai, int bi, int L) throws Exception{&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  if (L&amp;lt;&amp;#61;0) {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    return &amp;#34;&amp;#34;;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  int next_A_index &amp;#61; getMaxIndexInA(ai, bj, L);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  int next_B_index &amp;#61; getMaxIndexInB(ai, bj, L);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  if ((next_A_index&amp;lt;0) &amp;amp;&amp;amp; (next_B_index&amp;lt;0)) {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    throw new Exception(&amp;#34;找不到解&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  if (next_A_index&amp;lt;0) {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    String result &amp;#61; b[next_B_index];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    result &amp;#43;&amp;#61; getSubList(ai, next_B_index&amp;#43;1, L-1);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  } else if (next_B_index&amp;lt;0) {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    String result &amp;#61; a[next_A_index];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    result &amp;#43;&amp;#61; getSubList(next_A_index&amp;#43;1, bj, L-1);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  } else {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    String resultA &amp;#61; a[next_A_index];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    resultA &amp;#43;&amp;#61; getSubList(next_A_index&amp;#43;1, bj, L-1);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    String resultB &amp;#61; b[next_B_index];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    resultB &amp;#43;&amp;#61; getSubList(ai, next_B_index&amp;#43;1, bj, L-1);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    if (resutA&amp;lt;resultB) {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        return resultB;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    } else {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        return resultA;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  }&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;main () {&lt;!-- --&gt;&lt;br /&gt;...&lt;br /&gt;getSubList(0, 0, L);&lt;br /&gt;...&lt;br /&gt;}&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["用java解决拼接最大数问题", ["拼接最大数", "给定长度分别为 m 和 n 的两个数组，其元素由 0-9 构成，表示两个自然数各位上的数字。现在从这两个数组中选出 k (k <= m + n) 个数字拼接成一个新的数，要求从同一个数组中取出的数字保持其在原数组中的相对顺序。", "\n", "求满足该条件的最大数。结果返回一个表示该最大数的长度为 k 的数组。", "\n", "说明: 请尽可能地优化你算法的时间和空间复杂度。", "\n", "示例 1:", "\n", "输入:", "nums1 =", "[3, 4, 6, 5]", "\n", "nums2 =", "[9, 1, 2, 5, 8, 3]", "\n", "k =", "5", "\n", "输出:", "[9, 8, 6, 5, 3]", "示例 2:", "\n", "输入:", "nums1 =", "[6, 7]", "\n", "nums2 =", "[6, 0, 4]", "\n", "k =", "5", "\n", "输出:", "[6, 7, 6, 0, 4]", "示例 3:", "\n", "输入:", "nums1 =", "[3, 9]", "\n", "nums2 =", "[8, 9]", "\n", "k =", "3", "\n", "输出:", "[9, 8, 9]"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;commodity &amp;#61; []\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; True:\n    &lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt; &amp;#61; input(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入的商品名称、价格、销量、成本[使用逗号或空格隔开],输入q或Q退出&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt;.upper() &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;Q&amp;#34;&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;break&lt;/span&gt;\n    &lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt;.replace(&amp;#39; &amp;#39;,&amp;#39;,&amp;#39;).&lt;span class=\"hljs-built_in\"&gt;split&lt;/span&gt;(&amp;#39;,&amp;#39;)\n    \n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; len(&lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt;) !&amp;#61; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入错误&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        commodity.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;({\n            &lt;span class=\"hljs-string\"&gt;&amp;#34;商品名称&amp;#34;&lt;/span&gt;:&lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;],&lt;span class=\"hljs-string\"&gt;&amp;#34;价格&amp;#34;&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;(&lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]),&lt;span class=\"hljs-string\"&gt;&amp;#34;销量&amp;#34;&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;(&lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]),&lt;span class=\"hljs-string\"&gt;&amp;#34;成本&amp;#34;&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;(&lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]),\n            &lt;span class=\"hljs-string\"&gt;&amp;#34;利润&amp;#34;&lt;/span&gt;:(&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;(&lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]) - &lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;(&lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;])) * &lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;(&lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]),&lt;span class=\"hljs-string\"&gt;&amp;#34;销售额&amp;#34;&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;(&lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]) * &lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;(&lt;span class=\"hljs-symbol\"&gt;_&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])\n            })\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;利润排序&amp;#34;&lt;/span&gt;)\ncommodity.&lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;key&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;lambda&lt;/span&gt; x:x[&lt;span class=\"hljs-string\"&gt;&amp;#34;利润&amp;#34;&lt;/span&gt;],&lt;span class=\"hljs-built_in\"&gt;reverse&lt;/span&gt; &amp;#61; True)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; commodity:\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;销售额排序&amp;#34;&lt;/span&gt;)\ncommodity.&lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;key&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;lambda&lt;/span&gt; x:x[&lt;span class=\"hljs-string\"&gt;&amp;#34;销售额&amp;#34;&lt;/span&gt;],&lt;span class=\"hljs-built_in\"&gt;reverse&lt;/span&gt; &amp;#61; True)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; commodity:\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/695246648046175.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["设计小型商品销售统计系统", ["针对现实场景,基于 python 设计小型商品销售统计系统,包括以下功能: 1.基于字典、列表,字符串、数字类型、 input 函数,记录用户输入的商品名称、价格、销量、成本数据 2.基于循环、字典、排序算法,根据商品的成本和销售额,计算商品的利润,然后按商品销售额和利润进行排序(从大到小)输出展示"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;字符串你要输入啥内容呀&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["求一下c语言的程序题", ["问一下这个怎么改成输入字符串和数字 但是只用数字做后面平均值算法的程序呀", "\n", "#include <stdio.h>", "#define N 5", "main()", "{", "int a[N],i,n;", "float ave,sum=0;", "puts(\"个数n:\");", "scanf(\"%d\",&n);", "for(i=0;i<n;i++)", "{", "scanf(\"%d\",&a[i]);", "sum=sum+a[i];", "}", "ave=sum/n;", "printf(\"\\n%d个数的平均值为:%.2f\\n\",n,ave);", "puts(\"\\n比平均值大的数为:\");", "for(i=0;i<n;i++)", "if(ave<a[i])", "printf(\"%d\\n\",a[i]);", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这是让别人给你写作业来了吗&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["初级程序设计编程练习题", ["编写并测试一个函数innerProd(x，y) 它计算两个（相同长度）列表的内积。x 和y的内积计算如下：", "编写并测试一个函数removeDuplicates(somelist)，从列表中删除重复值。提示：新建一个空列表mlist，如果somelist中的元素没有出现在mlist中，将此元素追加到mlist中。", "编写并测试一个函数shuffle(myList)，该函数返回一个新的列表，此列表的内容为：随机打乱myList列表中各个元素的顺序。注意：不可使用Python自带的random模考中shuffle()函数。提示：可以使用random模块中的randrange函数产生指定范围的随机数，randrange函数的介绍见教材P179或", "\n  \n    ", "Python randrange() 函数 | 菜鸟教程", "\n    \n  ", "Python  randrange() 函数  Python 数字  描述  randrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。 语法 以下是 randrange() 方法的语法:  import random  random.randrange ([start,] stop [,step])  注意：randrange()是不能直接访问的，需要导入 random  模块，然后通过 random 静态对象调..", "\n  ", "\n  ", "\n    ", "\n      ", "https://www.runoob.com/python/func-number-randrange.html", "\n    ", "\n  ", "埃拉托斯特尼筛法是一种优雅的算法，用于确定不超过n 的所有素数。基本思想是首先创建从2 到n 的数字列表。第一个数字从列表中删除，并作为素数公布，而且将该数字的所有倍数从列表中删除。此过程一直持续到列表为空。例如，如果我们希望找到不超过10 的所有素数，该列表最初将包含2、3、4、5、6、7、8、9、10。2 被删除并宣布为素数。然后4、6、8 和10 被删除，因为它们是2 的倍数。这会留下3、5、7、9。重复该过程，3 被宣布为素数并删除，并且9 被删除，因为它3 的倍数。这会留下5 和7。算法继续宣布5 是素数，并将它从列表中删除。最后，7 被宣布和删除。编写一个程序提示用户输入n，然后用筛选算法找出小于或等于n 的所有素数。"]], "Tag": "算法设计"}
{"Answer": "参考：https://blog.csdn.net/lucienduan/article/details/24397949\r\n\r\n```\r\n /************************************************************************/  \r\n/* 算法导论15.4-5 \r\n * 找出n个数的序列中最长的单调递增子序列 \r\n * 利用动态规划思想，时间复杂度为O(n^2)*/  \r\n/************************************************************************/  \r\n#include&lt;iostream&gt;  \r\nusing namespace std;  \r\nvoid printSequence(int *b,int* nums,int last);  \r\nint main()  \r\n{  \r\n    int n=8;  \r\n    int nums[9]={0,1,7,8,9,2,3,4,5};  \r\n    //b存储当前元素所在递增子序列中当前元素的前一个元素序号  \r\n    //c存储以当前元素结尾的递增子序列长度  \r\n    //last存储当前元素为止的序列中最长递增子序列的最后一个元素的序号  \r\n    //maxLen存储当前最长递增子序列的长度  \r\n    int b[9]={0},c[9]={0},last[9]={0},maxLen=0;  \r\n    c[1]=1,last[1]=1;  \r\n    for (int i=1;i&lt;=n;i++)  \r\n    {  \r\n        for (int j=1;j&lt;i;j++)  \r\n        {  \r\n            if(nums[j]&lt;nums[i] &amp;&amp; c[j]+1&gt;c[i])  \r\n            {  \r\n                c[i]=c[j]+1;  \r\n                b[i]=j;  \r\n                last[i]=i;  \r\n                maxLen=c[i];  \r\n            }else if(c[j]&gt;c[i]){  \r\n                maxLen=c[j];  \r\n                last[i]=last[j];  \r\n            }  \r\n        }  \r\n    }  \r\n    cout&lt;&lt;\"原序列长度为\"&lt;&lt;n&lt;&lt;\"，如下：\"&lt;&lt;endl;  \r\n    for (int i=1;i&lt;=n;i++)  \r\n    {  \r\n        cout&lt;&lt;nums[i]&lt;&lt;\" \";  \r\n    }  \r\n    cout&lt;&lt;endl&lt;&lt;\"最长递增子序列长度为\"&lt;&lt;maxLen&lt;&lt;\"，如下：\"&lt;&lt;endl;  \r\n    printSequence(b,nums,last[n]);  \r\n    cout&lt;&lt;endl;  \r\n    return 0;  \r\n}  \r\n  \r\nvoid printSequence(int *b,int* nums,int last)  \r\n{  \r\n    if(b[last]&gt;0)  \r\n        printSequence(b,nums,b[last]);  \r\n    cout&lt;&lt;nums[last]&lt;&lt;\" \";  \r\n}  \r\n```", "Konwledge_Point": "算法与数字", "Question": ["C++语言编程 单调递增最长子序列", ["7-1 单调递增最长子序列", "\n设计一个O(n2)时间的算法，找出由n个数组成的序列的最长单调递增子序列。", "\n输入格式:", "\n\n", "输入有两行： 第一行：n，代表要输入的数列的个数 第二行：n个数，数字之间用空格格开", "\n输出格式:", "\n\n", "最长单调递增子序列的长度", "\n输入样例:", "\n\n", "在这里给出一组输入。例如：", "\n5", "\n1 3 5 2 9", "\n输出样例:", "\n\n", "在这里给出相应的输出。例如：", "\n4"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;搞定了&amp;#xff0c;&lt;br /&gt;genAppPayId…POST中paysign算法&amp;#xff08;已知&amp;#xff09;&lt;br /&gt;收货地址中addressDetail、Where、Mobile算法&amp;#xff08;已知&amp;#xff09;&lt;br /&gt;sign&amp;#xff08;已知&amp;#xff09;&lt;br /&gt;感谢大佬们&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["3des ecb加密结果不一致的", ["分别使用C++、CryptJs和JAVA，对一串数字加密，使用的DESede ECB PKCS5Padding加密方式，但是和另一个软件加密的结果不一致的。", "\n\n", "加密的数据： 13844445555", "\n", "\noNCpGto94/KBqX3FB3TKIg==  A工具", "\noNCpGto94/Kf2zS15DiL7w==  在线加密", "\noNCpGto94/Kf2zS15DiL7w==  CryptJS", "\noNCpGto94/Kf2zS15DiL7w==  C++", "\noNCpGto94/Kf2zS15DiL7w==  java", "\n\n", "如何和”A工具“保持一致呢？是不是和”A工具“算法或者模式不一样？那为什么前面几位又相同，后部分又不一样呢? 求解惑？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;已完成&amp;#xff0c;需要在代码的文件夹下新建一个graph.txt&amp;#xff0c;&lt;br /&gt;内容如下&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/594377156846190.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-py\"&gt;\n&lt;span class=\"hljs-comment\"&gt;# Python program for Kruskal&amp;#39;s algorithm to find&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# Minimum Spanning Tree of a given connected,&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# undirected and weighted graph&lt;/span&gt;\n\n\n&lt;span class=\"hljs-comment\"&gt;# Class to represent a graph&lt;/span&gt;\n\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Graph&lt;/span&gt;:\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;__init__&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, vertices&lt;/span&gt;):\n        self.V &amp;#61; vertices  &lt;span class=\"hljs-comment\"&gt;# No. of vertices&lt;/span&gt;\n        self.graph &amp;#61; []  &lt;span class=\"hljs-comment\"&gt;# default dictionary&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# to store graph&lt;/span&gt;\n\n    &lt;span class=\"hljs-comment\"&gt;# function to add an edge to graph&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;addEdge&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, u, v, w&lt;/span&gt;):\n        self.graph.append([u, v, w])\n\n    &lt;span class=\"hljs-comment\"&gt;# A utility function to find set of an element i&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# (uses path compression technique)&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;find&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, parent, i&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; parent[i] &amp;#61;&amp;#61; i:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; i\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; self.find(parent, parent[i])\n\n    &lt;span class=\"hljs-comment\"&gt;# A function that does union of two sets of x and y&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# (uses union by rank)&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;union&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, parent, rank, x, y&lt;/span&gt;):\n        xroot &amp;#61; self.find(parent, x)\n        yroot &amp;#61; self.find(parent, y)\n\n        &lt;span class=\"hljs-comment\"&gt;# Attach smaller rank tree under root of&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# high rank tree (Union by Rank)&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; rank[xroot] &amp;lt; rank[yroot]:\n            parent[xroot] &amp;#61; yroot\n        &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; rank[xroot] &amp;gt; rank[yroot]:\n            parent[yroot] &amp;#61; xroot\n\n        &lt;span class=\"hljs-comment\"&gt;# If ranks are same, then make one as root&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# and increment its rank by one&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            parent[yroot] &amp;#61; xroot\n            rank[xroot] &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n\n    &lt;span class=\"hljs-comment\"&gt;# The main function to construct MST using Kruskal&amp;#39;s&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# algorithm&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;KruskalMST&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n\n        result &amp;#61; []  &lt;span class=\"hljs-comment\"&gt;# This will store the resultant MST&lt;/span&gt;\n\n        &lt;span class=\"hljs-comment\"&gt;# An index variable, used for sorted edges&lt;/span&gt;\n        i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n\n        &lt;span class=\"hljs-comment\"&gt;# An index variable, used for result[]&lt;/span&gt;\n        e &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n\n        &lt;span class=\"hljs-comment\"&gt;# Step 1: Sort all the edges in&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# non-decreasing order of their&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# weight. If we are not allowed to change the&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# given graph, we can create a copy of graph&lt;/span&gt;\n        self.graph &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sorted&lt;/span&gt;(self.graph,\n                            key&amp;#61;&lt;span class=\"hljs-keyword\"&gt;lambda&lt;/span&gt; item: item[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])\n\n        parent &amp;#61; []\n        rank &amp;#61; []\n\n        &lt;span class=\"hljs-comment\"&gt;# Create V subsets with single elements&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; node &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(self.V):\n            parent.append(node)\n            rank.append(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n\n        &lt;span class=\"hljs-comment\"&gt;# Number of edges to be taken is equal to V-1&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; e &amp;lt; self.V - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n\n            &lt;span class=\"hljs-comment\"&gt;# Step 2: Pick the smallest edge and increment&lt;/span&gt;\n            &lt;span class=\"hljs-comment\"&gt;# the index for next iteration&lt;/span&gt;\n            u, v, w &amp;#61; self.graph[i]\n            i &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n            x &amp;#61; self.find(parent, u)\n            y &amp;#61; self.find(parent, v)\n\n            &lt;span class=\"hljs-comment\"&gt;# If including this edge does&amp;#39;t&lt;/span&gt;\n            &lt;span class=\"hljs-comment\"&gt;# cause cycle, include it in result&lt;/span&gt;\n            &lt;span class=\"hljs-comment\"&gt;# and increment the indexof result&lt;/span&gt;\n            &lt;span class=\"hljs-comment\"&gt;# for next edge&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; x !&amp;#61; y:\n                e &amp;#61; e &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n                result.append([u, v, w])\n                self.union(parent, rank, x, y)\n            &lt;span class=\"hljs-comment\"&gt;# Else discard the edge&lt;/span&gt;\n\n        minimumCost &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Edges in the constructed MST&amp;#34;&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; u, v, weight &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; result:\n            minimumCost &amp;#43;&amp;#61; weight\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d -- %d &amp;#61;&amp;#61; %d&amp;#34;&lt;/span&gt; % (u&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, v&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, weight))\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Minimum Spanning Tree&amp;#34;&lt;/span&gt;, minimumCost)\n\n\n&lt;span class=\"hljs-comment\"&gt;# Driver code&lt;/span&gt;\ndata &amp;#61; []\n&lt;span class=\"hljs-keyword\"&gt;with&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;open&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;graph.txt&amp;#39;&lt;/span&gt;, mode&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, encoding&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; fp:\n    data &amp;#61; fp.readlines()\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i, item &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;enumerate&lt;/span&gt;(data):\n        data[i] &amp;#61; item.split(&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)\n\nn &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(data)\ng &amp;#61; Graph(n)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n):\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n):\n        g.addEdge(i, j, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(data[i][j]))\n\n&lt;span class=\"hljs-comment\"&gt;# Function call&lt;/span&gt;\ng.KruskalMST()\n\n&lt;span class=\"hljs-comment\"&gt;# This code is contributed by Neelam Yadav&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["如何插入txt， txt文件里面有matrix, 如何在python用minimum spanning tree 的算法来运行matrix， 并得出结果", ["如何插入任意一个txt文件，txt文件里面有一个matrix，matrix可以是任意的， 例如， 5", "5， 6", "6.", "如何用minimum spanning tree 的kruskal算法来算出结果", "\n", "我的想法 要用到adj", "= numpy.loadtxt(\"graph.txt\", delimiter=',')", "这个公式来插入txt", "\n", "要用kruskal的方法计算minimum spanning tree， 但是那个matrix（或者说edge, wight)不是直接输在python code里面， 而是通过插入一个txt格式的文件，txt文件里面有matrix，例如：", "0,30,26,50,40", "30,0,24,40,50", "26,24,0,24,26", "50,40,24,0,30", "40,50,26,30,0", "这是55格式的", "也有可能是66格式， 不同数字。", "要求无论插入的txt文本里面有什么样的matrix，python code都可以运行", "\n", "我希望最后的output像这样", "Following are the edges in the constructed MST", "2 -- 3 == 4", "0 -- 3 == 5", "0 -- 1 == 10", "Minimum Cost Spanning Tree: 19", "可以参考 这个链接 ", "https://www.geeksforgeeks.org/kruskals-minimum-spanning-tree-algorithm-greedy-algo-2/", "\n", "并且希望output的顶点不是从0开始计， 而是从1开始", "像‘（0，2）’ 变成 “（1，3）”", "\n", "求解完整的算法"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;能否倒推出来取决于随机算法&lt;/li&gt;&lt;li&gt;如果是伪随时&amp;#xff0c;存在一定可能倒推出来&lt;/li&gt;&lt;li&gt;如果随机算法做到很随机了&amp;#xff0c;那么几乎不可能倒推出来&lt;/li&gt;&lt;li&gt;无论哪种情况&amp;#xff0c;都需要知道随机算法的实现细节&amp;#xff0c;才有倒推的可能&lt;/li&gt;&lt;li&gt;如果从已知的数据倒推&amp;#xff0c;那么需要大量的数据样本&amp;#xff0c;才有可能形成一种模型&amp;#xff0c;才可能预测&lt;/li&gt;&lt;/ul&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请采纳&amp;#xff0c;十分感谢&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["我想请教一下：由一组电脑产生的随机数，能反推出它的计算公式吗？", ["一个抽奖系统，现在知道其他中奖的编码，现在还剩一个奖，想知道编号", "电脑随机出来的数字能倒推回去，算出剩下的数字吗？", "电脑随机数字，一共是20万个数字，抽取十二个数字", "已知十一个个数字是181008", "156507", "155620", "109651", "193533", "070831", "032088", "174400", "055195", "082671", "007121", "那么剩下一个数字能算出来吗？", "抽出不放回的情况下"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;就是把数值用% 和 /除以10&amp;#xff0c;取余 和取商&amp;#xff0c;递归的进行。直到是0为止&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["这道数字逆序的题的代码如何思考呢？", ["\n", "#", "include", "<iostream>", "\n", "using", " ", "namespace", " std;\n", "void", " ", "reverse", "(", "int", " t)", ";\n", "int", " ", "main", "()", " ", "{\n    ", "int", " a = ", "0", ";\n    cin >> a;\n    ", "reverse", "(a);\n    ", "return", " ", "0", ";\n}\n\n", "void", " ", "reverse", "(", "int", " t)", " ", "{\n    ", "if", " (t / ", "10", " == ", "0", ")\n    {\n        cout << t;\n    }\n    ", "else", "\n    {\n        ", "reverse", "(t % ", "10", ");\n        ", "reverse", "(t / ", "10", ");\n    }\n}\n\n\n", "\n", "不是很理解这些代码，希望大家帮我详细注释一下代码"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\nx&amp;#61;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入一个正整数&amp;#34;&lt;/span&gt;))\ny&amp;#61;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入另一个正整数&amp;#34;&lt;/span&gt;))\n&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(x,y&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;&amp;#43;&amp;#61;i\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/431758422646136.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["输入两个正整数求他们的累加和", ["问题遇到的现象和发生背景", "\n", "任意输入两个正整数而不是从1开始", "\n", "问题相关代码，请勿粘贴截图", "\n", "x=int(input(\"请输入一个正整数\"))", "y=int(input(\"请输入另一个正整数\"))", "while   y>x:", "    print(\"第一个正整数要小于第二个正整数\")", "    if  x<=y:", "        sum=0", "        sum=sum+x", "        x+=1", "else:", "    print(sum)", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "例如输入4,7则计算过程为4+5+6+7，怎样用python实现"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;主程序运行开始&amp;#xff0c;显示出当前学生的编号、姓名、性别、地址、学号等&amp;#xff0c;然后&amp;#xff0c;如果键盘打出相应的运算符号加减乘除&amp;#xff0c;则进行相应的运算&amp;#xff0c;并得出计算后的值。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["可以分析一下吗？我想自己敲一个类似的，可是我读不懂这个代码", ["#include <stdio.h>", "#include <stdlib.h>", "#include<stdio.h>", "struct Student {", "long int num;", "char name[20];", "char sex[20];", "char addr[20];", "char xuehao[20];", "}", "a = {", "2108,\"xx\",\"女\",\"123456\",\"123456abc\"}", ";", "int data1;", "int data2;", "int data3;", "void tips()", "{", "printf(\"\\n\");", "printf(\"\\n\");", "printf(\"\\n\");", "printf(\"\\n\");", "}", "void huoqu(){", "printf(\"请输入第一个数字:\\n\");", "scanf(\"%d\",&data1);", "printf(\"请输入第二个数字:\\n\");", "scanf(\"%d\",&data2);", "}", "int main(){", "printf(\"num:%d\\n name:%s\\nsex:%s\\naddress:%s\\nxuehao:%s\", a.num, a.name, a.sex, a.addr, a.xuehao);", "int data1;", "int data2;", "int data3;", "char suanfa;", "int mark = 0;", "while(1)", "{", "tips();", "if(mark != 0)", "getchar();", "scanf(\"%c\",&suanfa);", "getchar();", "mark = 1;", "switch(suanfa) {", "case '+' : printf(\"你输入了加法\\n\");", "printf(\"请输入第一个数字\\n\");", "scanf(\"%d\",&data1);", "printf(\"请输入第二个数字\\n\");", "scanf(\"%d\",&data2);", "printf(\"请输入第三个数字\\n\");", "scanf(\"%d\",&data3);", "printf(\"%d+%d+%d=%d\",data1,data2,data3,data1+data2+data3);", "break;", "case '-' : printf(\"你输入了减法\\n\");", "printf(\"请输入第一个数字\\n\");", "scanf(\"%d\",&data1);", "printf(\"请输入第二个数字\\n\");", "scanf(\"%d\",&data2);", "printf(\"请输入第三个数字\\n\");", "scanf(\"%d\",&data3);", "printf(\"%d-%d-%d=%d\",data1,data2,data3,data1-data2-data3);", "break;", "case '' : printf(\"你输入了乘法\\n\");", "printf(\"请输入第一个数字\\n\");", "scanf(\"%d\",&data1);", "printf(\"请输入第二个数字\\n\");", "scanf(\"%d\",&data2);", "printf(\"请输入第三个数字\\n\");", "scanf(\"%d\",&data3);", "printf(\"%d%d*%d=%d\",data1,data2,data3,data1data2data3);", "break;", "case '/' : printf(\"你输入了除法\\n\");", "printf(\"请输入第一个数字\\n\");", "scanf(\"%d\",&data1);", "printf(\"请输入第二个数字\\n\");", "scanf(\"%d\",&data2);", "printf(\"请输入第三个数字\\n\");", "scanf(\"%d\",&data3);", "printf(\"%d/%d/%d=%d\",data1,data2,data3,data1/data2/data3);", "break;", "default : printf(\"你的算法选择错误，请重新选择\\n\");", "break;", "}", "}", "system(\"pause\");", "system(\"pause\");", "return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "感觉你的描述就是计算交叉熵(Cross Entropy)\r\n\r\nhttps://blog.csdn.net/tsyccnh/article/details/79163834", "Konwledge_Point": "算法与数字", "Question": ["机器学习中分类器验证AUC值不理想，能否比较验证集实际频率和预测概率均值来说明模型准确性。", ["大家好，我目前在用一批土壤数据做二分类模型，尝试了随机森林、SVM、逻辑斯蒂回归、朴素贝叶斯等常用分类算法，但是结果不太理想。不理想指的是采用常规的ROC曲线法进行模型精度验证时，曲线基本就在0.5随机线附近，AUC也就0.53左右的样子。", "\n之前看到过一篇关于贝叶斯概率预测模型的文章（Wu Bo, 2018），他在检验模型准确性时没有采取ROC曲线法或类似基于混淆矩阵的方法，而是把验证数据集当作一个整体，计算了两个分类各自的频率，然后将验证数据集参数的平均值带入训练好的贝叶斯模型，求出一个后验概率，通过比较后验概率与实际频率，来说明模型的好坏。", "\n于是尝试用这种思路，去把我的验证数据集每个样本带入模型计算得到的那个数字（例如贝叶斯和逻辑斯蒂回归都可以给出后验概率）求平均，发现这个平均数确实和实际两个类别的频率很接近。我又通过改变数据的分类阈值（比如说原来是170cm以上算高个，现在调整成160就是高个儿），发现不同阈值下求得的这个平均数和相应的实际频率都很一致。", "\n本人数学底子挺差的，不知道这种验证方法是否可行？如果可行的话，后面是什么原理？能否指点个参考文献？如果不行的话，又是为什么呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;三种输出方式写在一个代码里了&amp;#xff0c;有注释.&lt;br /&gt;下面是输入后&amp;#xff0c;通过3种方式输出的截图&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/637286534456125.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码如下;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; vec;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t;\n    &lt;span class=\"hljs-comment\"&gt;//输入整数&amp;#xff0c;直到输入0为止&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        cin &amp;gt;&amp;gt; t;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (t !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            vec.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(t);\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;//排序&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;(vec.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;(), vec.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;());\n    &lt;span class=\"hljs-comment\"&gt;//输出&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//1.第一种方式&amp;#xff0c;使用成员函数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; vec.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;lt; vec.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;() - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            cout &amp;lt;&amp;lt; vec.&lt;span class=\"hljs-built_in\"&gt;at&lt;/span&gt;(i) &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            cout &amp;lt;&amp;lt; vec.&lt;span class=\"hljs-built_in\"&gt;at&lt;/span&gt;(i) &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=\"hljs-comment\"&gt;//2.第二种方式&amp;#xff0c;使用迭代器&lt;/span&gt;\n    vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;::iterator it &amp;#61; vec.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; it !&amp;#61; vec.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(); it&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (it &amp;#61;&amp;#61; vec.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;())\n            cout &amp;lt;&amp;lt; *it;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; *it;\n        \n    }\n    cout &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-comment\"&gt;//3.第三种方式&amp;#xff0c;使用for_each&lt;/span&gt;\n    for_each(vec.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;(), vec.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(), [](&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; elem) {std::cout &amp;lt;&amp;lt; elem &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;; }\n    );\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["C++STL标准模板库", ["编写一程序，让用户自由地从键盘上输入整数，直到输入数字0时结束。把用户输入的数据保存在模板类vector定义的对象中，并对用户输入的所有数进行排序输出。在向显示器进行输出时，要求用以下3种方式实现：", "1)仅使用vector的相关成员函数，不使用迭代器进行输出；", "2)使用迭代器自己编程输出；", "3)使用STL提供的通用算法for_each进行输出。", "（提示：实现该题目时，首先定义模板类vector的一个对象，利用该对象进行对用户输入数据的操作。在进行数据输出时，第一种方式考虑采用类似于数组的随机访问方法，第二种方式利用Vector的迭代器进行输出，第二种方式则利用STL通用算法for_each进行实现，也可以才用copy函数进行实现。）"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Solution&lt;/span&gt;\n{\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;nextPermutation&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; &amp;amp;nums)&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (nums.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;() &amp;lt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; nums.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;() - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nums[i] &amp;gt;&amp;#61; nums[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n        {\n            i--;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; nums.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;() - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (nums[j] &amp;lt; nums[i])\n            {\n                j--;\n            }\n            &lt;span class=\"hljs-built_in\"&gt;swap&lt;/span&gt;(nums.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;() &amp;#43; i, nums.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;() &amp;#43; j);\n        }\n        &lt;span class=\"hljs-built_in\"&gt;reverse&lt;/span&gt;(nums.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;() &amp;#43; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, nums.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;());\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["用C++解决下一个排列问题", ["下一个排列", "实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。", "\n", "如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。", "\n", "必须 原地 (", "https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95)修改，只允许使用额外常数空间。", "\n", "示例 1：", "\n", "输入：nums = [1,2,3]", "输出：[1,3,2]", "示例 2：", "\n", "输入：nums = [3,2,1]", "输出：[1,2,3]", "示例 3：", "\n", "输入：nums = [1,1,5]", "输出：[1,5,1]", "示例 4：", "\n", "输入：nums = [1]", "输出：[1]", "\n", "提示：", "\n", "1 <= nums.length <= 100", "0 <= nums[i] <= 100"]], "Tag": "算法设计"}
{"Answer": "package test;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class Test {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tprivate static Map&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;();\r\n\tprivate static Map&lt;String, String&gt; maps = new HashMap&lt;String, String&gt;();\r\n\r\n\tstatic {\r\n\t\tfor (int i = 0; i &lt; 10; i++) {\r\n\t\t\tbyte[] bytes = { (byte) (97 + i) };\r\n\t\t\tmap.put(new String(bytes).toUpperCase(), i);\r\n\t\t\tmaps.put(i+\"\", new String(bytes).toUpperCase());\r\n\t\t}\r\n\t\tmaps.put(\" \", \" \");\r\n\t\tmaps.put(\"+\", \"+\");\r\n\t}\r\n\r\n\tpublic static Long[] strToLong(String[] ag) {\r\n\t\tLong[] lo = new Long[ag.length + 1];\r\n\t\tLong res = 0L;\r\n\t\tfor (int i = 0; i &lt; ag.length; i++) {\r\n\t\t\tchar[] ch = ag[i].toCharArray();\r\n\t\t\tString str = \"\";\r\n\t\t\tfor (int j = 0; j &lt; ch.length; j++) {\r\n\t\t\t\tstr = str + map.get(String.valueOf(ch[j])) + \"\";\r\n\t\t\t}\r\n\r\n\t\t\tlo[i] = Long.valueOf(str);\r\n\t\t\tres += lo[i];\r\n\t\t}\r\n\t\tlo[lo.length - 1] = res;\r\n\t\tArrays.sort(lo);\r\n\r\n\t\treturn lo;\r\n\t}\r\n\r\n\tpublic static String[] maxLong(Long[] str) {\r\n\t\tString[] rest = new String[str.length];\r\n\t\tlong maxLen = str[str.length - 1].toString().length();\r\n\r\n\t\tfor (int i = 0; i &lt; str.length; i++) {\r\n\t\t\tlong Len = str[i].toString().length();\r\n\t\t\tlong sub = maxLen - Len;\r\n\t\t\tString s = \"\";\r\n\t\t\tfor (int j = 0; j &lt; sub; j++) {\r\n\t\t\t\ts = \" \" + s;\r\n\t\t\t}\r\n\r\n\t\t\ts = s + str[i];\r\n\t\t\t\trest[i] = s;\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\treturn rest;\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tString[] ag = { \"BAAAA\", \"BAAA\", \"BAABB\", \"BAABB\" };\r\n\t\tLong[] lo = strToLong(ag);\r\n\t\tString[] str = maxLong(lo);\r\n\t\tfor (int i = 0; i &lt; str.length; i++) {\r\n\t\t\t\r\n\t\t\tif (i == 0 || i == str.length - 1 ){\r\n\t\t\t\tSystem.out.print(\"   \");\r\n\t\t\t} else {\r\n\t\t\t\tSystem.out.print(\"+  \");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tchar[] byt = str[i].toCharArray();\r\n\t\t\tfor (int j = 0 ; j &lt; byt.length; j++){\r\n\t\t\t\tSystem.out.print(maps.get(byt[j]+\"\"));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println();\r\n\t\t\t\r\n\t\t\tif (str.length - 2 == i){\r\n\t\t\t\tSystem.out.println(\"-------------\");\r\n\t\t\t} \r\n\t\t\t\r\n\t\t\t\r\n\t\t\t//System.out.println(str[i]);\r\n\t\t}\r\n\t}\r\n\r\n}", "Konwledge_Point": "算法与数字", "Question": ["Java高要求逻辑训练题", ["给定等式其中每个字母代表一个数字，且不同数字对应不同字母。编程求出这些数字并且打出这个数字的算术计算竖式。", "\n\n", "   A B C D E\n  +    D F G\n  +    D F G\n——————————\n   X Y Z D E\n", "\n\n", "ABCDEFGXYZ十个字母各不相等并且分别代表0~9", "\n试过用for循环遍历，但是判断条件想得头都大了。同时经常漏掉判断条件得出很多个错误答案", "\n试过用数组代表0~9先求出算数式再代入字母，依然不知从何下手", "\n也试过先找出隐性条件例G==0 F==5 X==A+1 B>=8   但是想得还是头大。", "\n求：", "\n解这个题目是否需要用到算法？", "\n尽量简短的实现代码", "\n\n", "万分感谢~~~"]], "Tag": "算法设计"}
{"Answer": "你的逻辑和代码都有错。\r\n交换这个思路不行，因为第二次交换，因为8正好是第一个，已经被交换走了，换成了1，所以和最小值交换交换的不是原始值了。\r\n\r\n# 问题解决的话，请点采纳\r\n\r\n```\r\n#include&lt;stdio.h&gt;\r\n\r\nint main()\r\n{\r\n    int n;\r\n    scanf(\"%d\",&amp;n);\r\n    int a[10],i,min,max;\r\n    for(i=0;i&lt;n;i++)scanf(\"%d\",&amp;a[i]);\r\n    for(i=0,min=max=0;i&lt;n;i++)\r\n    {\r\n        if(a[min]&gt;a[i])\r\n            min=i;\r\n        if(a[max]&lt;a[i])\r\n            max=i;\r\n    }\r\n\tint b = a[0];\r\n\tint c = a[n - 1];\r\n\tint ma = a[max];\r\n\tint mi = a[min];\r\n\ta[max] = c;\r\n\ta[min] = b;\r\n\ta[0] = mi;\r\n\ta[n - 1] = ma;\r\n    for(i=0;i&lt;n;i++)\r\n    {\r\n        printf(\"%d \",a[i]);\r\n    }\r\n}\r\n```", "Konwledge_Point": "算法与数字", "Question": ["pta上敲题时出现关于指针与数组运用的问题~", ["7-24 交换最小值和最大值", "\n\n", "本题要求编写程序，先将输入的一系列整数中的最小值与第一个数交换，然后将最大值与最后一个数交换，最后输出交换后的序列。   ", "\n\n", "注意：题目保证最大和最小值都是唯一的。", "\n\n", "输入格式：", "\n\n", "输入在第一行中给出一个正整数N（≤10），第二行给出N个整数，数字间以空格分隔。", "\n\n", "输出格式：", "\n\n", "在一行中顺序输出交换后的序列，每个整数后跟一个空格。", "\n\n", "输入样例：", "\n\n", "\n", "5", "\n\n", "8 2 5 1 4", "\n", "\n\n", "输出样例：", "\n\n", "\n", "1 2 5 4 8", "\n", "\n\n", "程序清单:", "\n\n", "#include<stdio.h>\nswap(int *p1,int *p2)       //交换两个变量的值 \n{\n    int temp;\n    temp=*p1;*p1=*p2;*p2=temp;\n}\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    int a[n],k=0,i,min,max,b;\n    for(i=0;i<n;i++)scanf(\"%d\",&a[i]);\n    for(i=0,min=a[0];i<n-1;i++)\n    {\n        if(min>a[i+1])\n        {\n            k=i+1;min=a[i+1];\n        }\n        if(max<a[i+1])\n        {\n            b=i+1;max=a[i+1];\n        }\n    }\n    swap(&a[0],&a[k]);\n    swap(&a[b],&a[n]);\n    for(i=0;i<n-1;i++)\n    {\n        printf(\"%d \",a[i]);\n    }\n    printf(\"%d\",a[n]);\n}\n", "\n\n", "结果：", "\n\n", "我想请教各位咕噜我想法那里不对，遇到这种题怎么解决？寻找一个数组中最大与最小的是不是要这么麻烦？算法有更简便的请务必告知，谢了~"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(input())\na &amp;#61; list(map(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;,input().split()))\nexchs &amp;#61; []\npos &amp;#61; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; // &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n\nwhile pos &amp;gt;&amp;#61; &lt;span class=\"hljs-symbol\"&gt;0:&lt;/span&gt;\n    i &amp;#61; pos\n    while &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt; &lt;span class=\"hljs-symbol\"&gt;n:&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt; a[i] &amp;lt; a[&lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;] &lt;span class=\"hljs-built_in\"&gt;and&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt; &amp;gt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;or&lt;/span&gt; a[i] &amp;lt; a[&lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt;])&lt;span class=\"hljs-symbol\"&gt;:&lt;/span&gt;\n            break\n        &lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt; &amp;lt; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;and&lt;/span&gt; a[&lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt;] &amp;lt; a[&lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;]&lt;span class=\"hljs-symbol\"&gt;:&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt; a[i] &amp;gt; a[&lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;]&lt;span class=\"hljs-symbol\"&gt;:&lt;/span&gt;\n            a[i],a[&lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;] &amp;#61; a[&lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;],a[i]\n            exchs.append([i, &lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;])\n            i &amp;#61; &lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;\n    pos -&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n\nprint (&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(exchs))\nfor exch in exc&lt;span class=\"hljs-symbol\"&gt;hs:&lt;/span&gt;\n    print (exch[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], exch[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["怎么用python实现这个问题", ["问题 4.3。构建堆", "            时限：1秒", "            内存限制：256 MB", "       构建堆是堆排序算法的关键步骤。该算法在最坏情况下的运行时间为 O(n log n)，与快速排序算法不同，后者仅在平均情况下保证这样的估计。几种排序算法在实践中比较常用的是组合。将数组转化为堆，需要对其元素进行多次交换。我们将交换称为交换元素 A[i] 和 A[j] 的基本操作。你在这个任务中的目标是将一个给定的数组转换成一个线性数量的交换的堆。输入第一行包含数字 n。下一行指定了一个数字数组 A[0], …… , A[n − 1] (1< n< 10^5; 0< A[i]< 10^9 for all 0< i< n - 1 ;所有A[i]都是成对不同的；i≠qj).输出输出的第一行必须包含交换次数m，必须满足不等式0 < m < 4 n。以下 m 行中的每一行都应指定数组 A 的两个元素的交换。每个交换由一对不同的索引 0< i≠qj< n - 1 定义，其中一个等式 j = 2i + 1, j = 2i + 2, i = 2j + 1 or i = 2j + 2 都满足了。按照指定的顺序应用所有的交换后，数组应该变成一个最小堆，即所有的都必须满足以下两个条件0< i< n - 1：", "如果 2i + 1< n − 1，则 A[i] < A[2i + 1]。", "如果 2i + 2< n − 1，则 A[i] < A[2i + 2]。", "例如：", "1.输入", "6", "0 1 2 3 4 5", "输出", "0", "2.输入", "6", "7 6 5 4 3 2", "输出", "4", "2 5", "1 4", "0 2", "2 5"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;兄弟你对这个题的理解有点偏&lt;br /&gt;你需要理解什么叫“1到N”的排列&lt;br /&gt;比如1到3的排列&amp;#xff0c;就是1、2、3这三个数进行排列&lt;br /&gt;而你的结果是1、1、1、15&amp;#xff0c;显然不是1到4的排列&amp;#xff08;需要由1、2、3、4进行排列&amp;#xff09;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["字典序最小是什么意思？", ["想问下字典序最小是啥意思？", "我求出的结果是，[1,1,1,15] 但它给出的结果却是 [1, 2, 4, 3]。[1,1,1,15] 与  [1, 2, 4, 3] 哪个字典序大些？", "会不会是答案有问题？", "附上我的代码", "\n", "def dfs(nums,", "res", "):\n    ", "if", " ", "len", "(", "res", ") == n:\n        result.", "append", "(", "res", ")\n        ", "return", "\n    ", "for", " i in ", "range", "(", "1", ",nums[", "0", "]//", "2", "+", "1", "):\n        temp = []\n        temp.", "append", "(i)\n        flag = True \n        ", "for", " ", "j", " in nums:\n            nextval = ", "j", " - temp[-", "1", "]\n            ", "if", " nextval <= ", "0", ":\n                flag = False\n                ", "continue", "\n            temp.", "append", "(nextval)\n        ", "if", " flag:\n            ", "res", " = temp[:]\n            dfs(temp,", "res", ")\n        ", "else", ":\n            ", "return", " False\n        \n\nn, s = ", "map", "(", "int", ",", "input", "().", "split", "())\nresult = []\ndfs([s],[])\n", "for", " i in sorted(result):\n    ", "print", "(i)\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;%利用扩展欧几里得算法求取e关于&lt;span class=\"hljs-built_in\"&gt;r&lt;/span&gt;的模反元素d\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(mod(&lt;span class=\"hljs-built_in\"&gt;r&lt;/span&gt;,e)~&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n   [&lt;span class=\"hljs-type\"&gt;g&lt;/span&gt;,&lt;span class=\"hljs-type\"&gt;d&lt;/span&gt;,&lt;span class=\"hljs-type\"&gt;y&lt;/span&gt;]&amp;#61;gcd(e,&lt;span class=\"hljs-built_in\"&gt;r&lt;/span&gt;);\n   &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; d&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n       d &amp;#61; d&amp;#43;&lt;span class=\"hljs-built_in\"&gt;r&lt;/span&gt;;\n   &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;matlab中gcd函数的第二个返回值才是要求的d&amp;#xff0c;算出来的d有可能是负数&amp;#xff0c;需要修正一下。RSA的详细过程参看&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html\" id=\"textarea_1647362236602_1647364669615_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["matlb关于RSA算法加解密问题", ["set(", "0", ",", "'RecursionLimit'", ",", "10000", ");\nclear all;\nclc;\n", "%-----------------------------------------------------", "\n", "%初始化生成1000以内的质数", "\nindex=", "1", ";\nzs(", "1", ")=", "2", ";\n", "for", " ", "i", "=", "3", ":", "1000", "\n  ", "for", " ", "j", "=", "2", ":", "i", "-1", "\n      p=", "mod", "(", "i", ",", "j", "); ", "%===i%j", "\n      ", "if", " p==", "0", "\n         ", "break", ";\n      ", "elseif", " ", "j", "==", "i", "-1", "\n         index=index+", "1", ";\n          zs(index)=", "i", ";  \n      ", "end", "\n  ", "end", "\n", "end", "\n", "%---------------------------------------------------", "\n", "%随机找出一个大的质数p", "\n", "while", "(", "1", ")\n ", "i", "=", "rand", "()*(index", "-1", ");\n  ", "if", " ", "i", ">", "10", "\n     ", "break", ";\n ", "end", "\n", "end", "\n", "%---------------------------------------------------", "\n", "%随机找出一个大的质数q,且p！=q", "\n", "while", "(", "1", ")\n   ", "j", "=", "rand", "()*(index", "-1", ");\n   ", "if", " ", "j", ">", "10", " && ", "round", "(", "j", "+", "1", ")~=", "round", "(", "i", "+", "1", ")\n      ", "break", ";\n   ", "end", "\n", "end", "  \np=zs(", "round", "(", "i", "+", "1", "));", "%查表获得质数", "\nq=zs(", "round", "(", "j", "+", "1", "));", "%查表获得质数", "\n", "%-----------------------------------------------------", "\n", "%计算n", "\nn=p*q;\n", "%计算（p-1）*（q-1）----------------------------------", "\nr=(p", "-1", ")*(q", "-1", ");\n", "%----------------------------------------------------", "\n", "%随机取一个e，满足1", "\n", "%这里取的是质数，只要r不是e的倍数就满足条件。", "\n", "while", "(", "1", ")\n  \n  e=zs(", "round", "(", "rand", "()*(index", "-1", "))+", "1", ");", "%这里找出的e是质数", "\n   ", "if", "(", "mod", "(r,e)~=", "0", ")   ", "%只要r不是e的倍数就满足条件", "\n      ", "break", ";\n   ", "end", "\n", "end", "\n", "%---------------------------------------", "\n", "%利用扩张欧几里得算法求取e关于r的模反元素d", "\n\n", "if", "(", "mod", "(r,e)~=", "0", ")\n   d=", "gcd", "(e,r);\n", "end", "\n", "%--------------------------------------", "\n", "%得到公钥", "\nfprintf(", "'public key={n,e}={%d,%d} for encryption \\n'", ",n,e);\n", "%------------------------------------------------", "\n", "%得到私钥", "\nfprintf(", "'private key={n,d}={%d,%d} for decryption\\n'", ",n,d);\n", "disp", "(", "'before encrypt,the info is:'", ");\n", "%-----------------------------------------", "\n", "%待加密的信息", "\ninfo=", "'Hello,I am a student'", ";\n", "disp", "(info);\n", "%----------------------------------------", "\n", "%获得字符串长度", "\n[~,col]=", "size", "(info);\n\n", "for", " k=", "1", ":col\n  en_info(k)=sym(uint8(info(k)));\n", "end", "\n", "disp", "(en_info);\n\n", "%数据采用公钥进行加密--------------------", "\ntic;", "%加密计时器开始", "\n", "for", " k=", "1", ":col\n  tmp(k)=sym(", "mod", "(en_info(k)^e,n));\n", "end", "\n", "disp", "(", "'after encrypted,the info is:'", ");\n", "disp", "(tmp);  \ntoc;", "%加密计时器结束", "\n", "%数据采用私钥解密------------------------", "\ntic;", "%解密计时器开始", "\n", "for", " k=", "1", ":col \n   den_info(k)=", "mod", "(tmp(k)^d,n);\n", "end", "\n", "%有符号数字转换成字符--------------------", "\n", "for", " k=", "1", ":col \n  den_info_c(k)=uint8(den_info(k));\n", "end", "\n", "disp", "(", "'after decrypted,the info is:'", ");\nfprintf(", "'%s\\n'", ",den_info_c);\n", "disp", "(den_info);\ntoc;", "%解密计时器结束", "\n", "%--------------------------------------", "\nclear var;\nclear ", "j", ";\nclear k;\nclear index;\nclear row;\nclear tmp;\nclear zs;\nclear info;\nclear col;\nclear ", "i", ";\nclear den_info;\nclear den_info_c;\nclear en_info;\n\n\n", "\n", "编译结果", "\n", "\n", "解密的过程有些问题，解密之后显示的是一堆乱码，请问应该怎么解决呢，而且，不知道为什么解密的数字", "和加密时相同了，哪里出错了呢？该怎么改好，谢谢大家"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\nisHappy;\nfunction &lt;span class=\"hljs-attribute\"&gt;ans&lt;/span&gt;&amp;#61;isHappy\n&lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;input(&amp;#39;输入数字:&amp;#39;);\ntemp&amp;#61;[];\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (n~&amp;#61;1)&amp;amp;&amp;amp;~&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;(n,temp)\n    temp(end&amp;#43;1)&amp;#61;n;\n    &lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;get_next(n);\nend\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;&amp;#61;1\n    &lt;span class=\"hljs-attribute\"&gt;ans&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;ans&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\nend\nend\nfunction &lt;span class=\"hljs-attribute\"&gt;ans&lt;/span&gt;&amp;#61;get_next(n)\n&lt;span class=\"hljs-attribute\"&gt;s&lt;/span&gt;&amp;#61;0;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; n&amp;gt;0\n    &lt;span class=\"hljs-attribute\"&gt;d&lt;/span&gt;&amp;#61;mod(n,10);\n    &lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;floor(n/10);\n    &lt;span class=\"hljs-attribute\"&gt;s&lt;/span&gt;&amp;#61;s&amp;#43;d^2;\nend\n&lt;span class=\"hljs-attribute\"&gt;ans&lt;/span&gt;&amp;#61;s;\nend\nfunction &lt;span class=\"hljs-attribute\"&gt;ans&lt;/span&gt;&amp;#61;in(n,temp)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;1:length(temp)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;&amp;#61;temp(i)\n        &lt;span class=\"hljs-attribute\"&gt;ans&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n        return;\n    end\nend\n&lt;span class=\"hljs-attribute\"&gt;ans&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\nend\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于#MATLAB#的问题，如何解决？", ["用MATLAB编写一个算法来判断一个数n是不是快乐数", "「快乐数」定义为:对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为1, 也可能是无限循环但始终变不到1。如果可以变为1， 那么这个数就是快乐数。如果n是快乐数就返回True ;不是，则返回False 。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我现在写&amp;#xff0c;望采纳&amp;#xff01;&amp;#xff01;点击该回答右侧的“采纳”按钮即可采纳&amp;#xff01;&amp;#xff01;&lt;br /&gt;这是一个比较全面的任务&amp;#xff0c;需要用到 Python 中的不同机器学习库和模型来完成。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;对于第一类数据集&amp;#xff0c;我们可以使用 NumPy 库来生成数据&amp;#xff0c;并使用 scikit-learn 中的线性模型、决策树、感知机和双隐层全连接神经网络模型来进行分类。我们可以使用 scikit-learn 中的 train_test_split 函数将数据分成训练集和测试集&amp;#xff0c;然后使用不同的模型训练数据并预测结果。最后&amp;#xff0c;我们可以使用 scikit-learn 中的 classification_report 函数来计算各种指标&amp;#xff0c;例如精度、召回率和 F1 分数&amp;#xff0c;以及使用 matplotlib 库进行可视化。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;对于第二类数据集&amp;#xff0c;我们可以使用 TensorFlow 库中的 MNIST 数据集加载器来载入数据。然后使用 TensorFlow 中的全连接神经网络模型对数据进行分类。我们可以使用 TensorFlow 中的数据划分器将数据划分为训练集和测试集&amp;#xff0c;然后使用模型训练数据并预测结果。最后&amp;#xff0c;我们可以使用 TensorFlow 中的 evaluate 函数来计算模型的准确率&amp;#xff0c;并使用 matplotlib 库进行可视化。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;在尝试使用具有更多隐藏层的全连接神经网络时&amp;#xff0c;我们可以通过更改模型的结构来增加隐藏层的数量。具体来说&amp;#xff0c;我们可以使用 TensorFlow 中的 Keras API 来构建全连接神经网络模型&amp;#xff0c;并使用 add 函数来增加更多的隐藏层。然后我们可以使用 TensorFlow 中的 compile 函数来配置模型的优化器和损失函数&amp;#xff0c;并使用 fit 函数来训练模型。最后&amp;#xff0c;我们可以使用 evaluate 函数来计算模型的准确率&amp;#xff0c;并使用 matplotlib 库进行可视化。&lt;/p&gt;\n&lt;p&gt;在比较不同模型的精度差异时&amp;#xff0c;我们可以使用 classification_report 函数或 evaluate 函数计算出各种指标&amp;#xff0c;并使用 matplotlib 库进行可视化。我们可以对比这些指标&amp;#xff0c;来分析不同模型的优劣。此外&amp;#xff0c;我们还可以考虑因素&amp;#xff0c;例如模型的复杂度和训练数据的质量&amp;#xff0c;来分析可能的原因。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;下面是一个示例代码&amp;#xff0c;它使用 NumPy 和 scikit-learn 库来处理第一类数据集&amp;#xff0c;并使用线性模型、决策树、感知机和双隐层全连接神经网络对数据进行分类&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;(1)&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; train_test_split\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; LogisticRegression\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.tree &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; DecisionTreeClassifier\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.neural_network &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; MLPClassifier\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; classification_report\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\n\n&lt;span class=\"hljs-comment\"&gt;# 生成数据&lt;/span&gt;\nX &amp;#61; np.random.randint(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, size&amp;#61;(&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;))\ny &amp;#61; np.logical_and(X[:, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], X[:, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n\n&lt;span class=\"hljs-comment\"&gt;# 将数据划分为训练集和测试集&lt;/span&gt;\nX_train, X_test, y_train, y_test &amp;#61; train_test_split(X, y, test_size&amp;#61;&lt;span class=\"hljs-number\"&gt;0.2&lt;/span&gt;)\n\n&lt;span class=\"hljs-comment\"&gt;# 定义模型&lt;/span&gt;\nmodels &amp;#61; [\n    LogisticRegression(),\n    DecisionTreeClassifier(),\n    MLPClassifier(hidden_layer_sizes&amp;#61;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,))\n]\n\n&lt;span class=\"hljs-comment\"&gt;# 分别训练模型并计算准确率&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; model &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; models:\n    &lt;span class=\"hljs-comment\"&gt;# 训练模型&lt;/span&gt;\n    model.fit(X_train, y_train)\n    &lt;span class=\"hljs-comment\"&gt;# 计算准确率&lt;/span&gt;\n    accuracy &amp;#61; model.score(X_test, y_test)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;&lt;span class=\"hljs-subst\"&gt;{model.__class__.__name__}&lt;/span&gt;的准确率为&amp;#xff1a;&lt;span class=\"hljs-subst\"&gt;{accuracy:&lt;span class=\"hljs-number\"&gt;.2&lt;/span&gt;f}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n你还可以使用 classification_report 函数计算更多的指标&amp;#xff0c;例如精度、召回率和 F1 分数。\n\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; model &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; models:\n    &lt;span class=\"hljs-comment\"&gt;# 训练模型&lt;/span&gt;\n    model.fit(X_train, y_train)\n    &lt;span class=\"hljs-comment\"&gt;# 预测测测试集结果&lt;/span&gt;\ny_pred &amp;#61; model.predict(X_test)\n&lt;span class=\"hljs-comment\"&gt;# 计算指标&lt;/span&gt;\nreport &amp;#61; classification_report(y_test, y_pred)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;&lt;span class=\"hljs-subst\"&gt;{model.&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt;.name}&lt;/span&gt;的指标&amp;#xff1a;\\n&lt;span class=\"hljs-subst\"&gt;{report}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果你想要使用 matplotlib 库进行可视化&amp;#xff0c;你可以使用 matplotlib 库中的 plot 函数绘制散点图或直方图来展示数据分布情况&amp;#xff0c;或者使用 matplotlib 库中的 scatter 函数绘制散点图来展示模型的预测结果。&lt;/p&gt;\n&lt;p&gt;例如&amp;#xff0c;下面是使用 matplotlib 库绘制散点图的示例代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;plt&lt;span class=\"hljs-selector-class\"&gt;.scatter&lt;/span&gt;(X&lt;span class=\"hljs-selector-attr\"&gt;[:, 0]&lt;/span&gt;, X&lt;span class=\"hljs-selector-attr\"&gt;[:, 1]&lt;/span&gt;, c&amp;#61;y)\nplt&lt;span class=\"hljs-selector-class\"&gt;.title&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;数据分布情况&amp;#39;&lt;/span&gt;)\nplt&lt;span class=\"hljs-selector-class\"&gt;.xlabel&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;特征1&amp;#39;&lt;/span&gt;)\nplt&lt;span class=\"hljs-selector-class\"&gt;.ylabel&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;特征2&amp;#39;&lt;/span&gt;)\nplt&lt;span class=\"hljs-selector-class\"&gt;.show&lt;/span&gt;()\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;最后&amp;#xff0c;你可以对比各种模型的精度差异&amp;#xff0c;分析可能的原因&amp;#xff0c;并根据自己的目标来选择最优的模型。&lt;br /&gt;下面是一个使用 TensorFlow 和 Keras API 对现有的与、或、非、异或数据集进行分类并给出精度分析和可视化结果的示例代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;import tensorflow as tf\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; tensorflow import keras\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n&lt;span class=\"hljs-comment\"&gt;#生成数据&lt;/span&gt;\nX &amp;#61; np.random.randint(2, size&amp;#61;(1000, 4))\ny &amp;#61; np.logical_and(X[:, 0], X[:, 1])\n\n&lt;span class=\"hljs-comment\"&gt;#将数据划分为训练集和测试集&lt;/span&gt;\nX_train, X_test, y_train, y_test &amp;#61; train_test_split(X, y, &lt;span class=\"hljs-attribute\"&gt;test_size&lt;/span&gt;&amp;#61;0.2)\n\n&lt;span class=\"hljs-comment\"&gt;#使用 Keras API 构建双隐层全连接神经网络模型&lt;/span&gt;\nmodel &amp;#61; keras.Sequential([\nkeras.layers.Dense(128, &lt;span class=\"hljs-attribute\"&gt;activation&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;, input_shape&amp;#61;(4,)),\nkeras.layers.Dense(64, &lt;span class=\"hljs-attribute\"&gt;activation&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;),\nkeras.layers.Dense(1, &lt;span class=\"hljs-attribute\"&gt;activation&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;sigmoid&amp;#39;&lt;/span&gt;)\n])\n\n&lt;span class=\"hljs-comment\"&gt;#配置模型的优化器和损失函数&lt;/span&gt;\nmodel.compile(&lt;span class=\"hljs-attribute\"&gt;optimizer&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;adam&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-attribute\"&gt;loss&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;binary_crossentropy&amp;#39;&lt;/span&gt;, metrics&amp;#61;[&lt;span class=\"hljs-string\"&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;])\n\n&lt;span class=\"hljs-comment\"&gt;#训练模型&lt;/span&gt;\nhistory &amp;#61; model.fit(X_train, y_train, &lt;span class=\"hljs-attribute\"&gt;epochs&lt;/span&gt;&amp;#61;20, validation_data&amp;#61;(X_test, y_test))\n\n&lt;span class=\"hljs-comment\"&gt;#计算模型的准确率&lt;/span&gt;\naccuracy &amp;#61; model.evaluate(X_test, y_test)[1]\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#39;模型的准确率为&amp;#xff1a;{accuracy:.2f}&amp;#39;&lt;/span&gt;)\n\n&lt;span class=\"hljs-comment\"&gt;#使用 matplotlib 库绘制训练损失和验证损失&lt;/span&gt;\nplt.plot(history.history[&lt;span class=\"hljs-string\"&gt;&amp;#39;loss&amp;#39;&lt;/span&gt;], &lt;span class=\"hljs-attribute\"&gt;label&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;train loss&amp;#39;&lt;/span&gt;)\nplt.plot(history.history[&lt;span class=\"hljs-string\"&gt;&amp;#39;val_loss&amp;#39;&lt;/span&gt;], &lt;span class=\"hljs-attribute\"&gt;label&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;validation loss&amp;#39;&lt;/span&gt;)\n\nplt.legend()\nplt.show()\n\n&lt;span class=\"hljs-comment\"&gt;#使用 matplotlib 库绘制训练精度和验证精度&lt;/span&gt;\nplt.plot(history.history[&lt;span class=\"hljs-string\"&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;], &lt;span class=\"hljs-attribute\"&gt;label&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;train accuracy&amp;#39;&lt;/span&gt;)\nplt.plot(history.history[&lt;span class=\"hljs-string\"&gt;&amp;#39;val_accuracy&amp;#39;&lt;/span&gt;], &lt;span class=\"hljs-attribute\"&gt;label&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;validation accuracy&amp;#39;&lt;/span&gt;)\nplt.legend()\nplt.show()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr /&gt;\n&lt;p&gt;(2)下面是一个示例代码&amp;#xff0c;它使用 TensorFlow 和 matplotlib 库来处理 MNIST 数据集&amp;#xff0c;并使用线性模型、决策树、感知机和双隐层全连接神经网络对数据进行分类&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; tensorflow &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; tf\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; tensorflow &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; keras\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; train_test_split\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; LogisticRegression\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.tree &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; DecisionTreeClassifier\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.neural_network &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; MLPClassifier\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\n\n&lt;span class=\"hljs-comment\"&gt;# 加载数据&lt;/span&gt;\n(X_train, y_train), (X_test, y_test) &amp;#61; keras.datasets.mnist.load_data()\n\n&lt;span class=\"hljs-comment\"&gt;#将图像数据转换为一维向量&lt;/span&gt;\nX_train &amp;#61; X_train.reshape(X_train.shape[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\nX_test &amp;#61; X_test.reshape(X_test.shape[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n\n&lt;span class=\"hljs-comment\"&gt;#定义模型&lt;/span&gt;\nmodels &amp;#61; [\nLogisticRegression(),\nDecisionTreeClassifier(),\nMLPClassifier(hidden_layer_sizes&amp;#61;(&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;,))\n]\n\n&lt;span class=\"hljs-comment\"&gt;#分别训练模型并计算准确率&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; model &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; models:\n&lt;span class=\"hljs-comment\"&gt;# 训练模型&lt;/span&gt;\nmodel.fit(X_train, y_train)\n&lt;span class=\"hljs-comment\"&gt;# 计算准确率&lt;/span&gt;\naccuracy &amp;#61; model.score(X_test, y_test)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;&lt;span class=\"hljs-subst\"&gt;{model.&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt;.name}&lt;/span&gt;的准确率为&amp;#xff1a;&lt;span class=\"hljs-subst\"&gt;{accuracy:&lt;span class=\"hljs-number\"&gt;.2&lt;/span&gt;f}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n\n&lt;span class=\"hljs-comment\"&gt;#使用 matplotlib 库进行可视化&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i, model &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;enumerate&lt;/span&gt;(models):\n&lt;span class=\"hljs-comment\"&gt;# 预测测试数据&lt;/span&gt;\ny_pred &amp;#61; model.predict(X_test)\n&lt;span class=\"hljs-comment\"&gt;# 绘制前 25 个测试图像和预测结果&lt;/span&gt;\nplt.figure(figsize&amp;#61;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;))\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;):\nplt.subplot(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\nplt.imshow(X_test[j].reshape(&lt;span class=\"hljs-number\"&gt;28&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;28&lt;/span&gt;), cmap&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;gray&amp;#39;&lt;/span&gt;)\nplt.title(&lt;span class=\"hljs-string\"&gt;f&amp;#39;Predicted: &lt;span class=\"hljs-subst\"&gt;{y_pred[j]}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\nplt.axis(&lt;span class=\"hljs-string\"&gt;&amp;#39;off&amp;#39;&lt;/span&gt;)\nplt.suptitle(&lt;span class=\"hljs-string\"&gt;f&amp;#39;&lt;span class=\"hljs-subst\"&gt;{model.&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt;.name}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\nplt.show()\n\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;注意&amp;#xff0c;在上述代码中&amp;#xff0c;我们使用了 scikit-learn 中的线性模型、决策树和感知机模型来处理 MNIST 数据集。这些模型可能不适用于图像数据&amp;#xff0c;因此可能不会得到很好的结果。此外&amp;#xff0c;我们也可以使用 TensorFlow 中的 Keras API 来构建全连接神经网络模型&amp;#xff0c;并使用 fit 函数来训练模型。最后&amp;#xff0c;我们可以使用 evaluate 函数来计算模型的准确率&amp;#xff0c;并使用 matplotlib 库进行可视化。&lt;/p&gt;\n&lt;p&gt;下面是一个使用 TensorFlow 和 Keras API 构建双隐层全连接神经网络模型并训练 MNIST 数据集的示例代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;import tensorflow as tf\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; tensorflow import keras\n\n&lt;span class=\"hljs-comment\"&gt;#加载数据&lt;/span&gt;\n(X_train, y_train), (X_test, y_test) &amp;#61; keras.datasets.mnist.load_data()\n\n&lt;span class=\"hljs-comment\"&gt;#将图像数据转换为一维向量&lt;/span&gt;\nX_train &amp;#61; X_train.reshape(X_train.shape[0], -1)\nX_test &amp;#61; X_test.reshape(X_test.shape[0], -1)\n\n&lt;span class=\"hljs-comment\"&gt;#归一化数据&lt;/span&gt;\nX_train &amp;#61; X_train / 255.0\nX_test &amp;#61; X_test / 255.0\n\n&lt;span class=\"hljs-comment\"&gt;#使用 Keras API 构建双隐层全连接神经网络模型&lt;/span&gt;\nmodel &amp;#61; keras.Sequential([\nkeras.layers.Dense(128, &lt;span class=\"hljs-attribute\"&gt;activation&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;, input_shape&amp;#61;(784,)),\nkeras.layers.Dense(64, &lt;span class=\"hljs-attribute\"&gt;activation&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;),\nkeras.layers.Dense(10, &lt;span class=\"hljs-attribute\"&gt;activation&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;softmax&amp;#39;&lt;/span&gt;)\n])\n\n&lt;span class=\"hljs-comment\"&gt;#配置模型的优化器和损失函数&lt;/span&gt;\nmodel.compile(&lt;span class=\"hljs-attribute\"&gt;optimizer&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;adam&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-attribute\"&gt;loss&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;sparse_categorical_crossentropy&amp;#39;&lt;/span&gt;, metrics&amp;#61;[&lt;span class=\"hljs-string\"&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;])训练模型\nmodel.fit(X_train, y_train, &lt;span class=\"hljs-attribute\"&gt;epochs&lt;/span&gt;&amp;#61;5)\n\n&lt;span class=\"hljs-comment\"&gt;#评估模型&lt;/span&gt;\ntest_loss, test_acc &amp;#61; model.evaluate(X_test, y_test, &lt;span class=\"hljs-attribute\"&gt;verbose&lt;/span&gt;&amp;#61;2)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#39;测试集的准确率&amp;#xff1a;{test_acc:.2f}&amp;#39;&lt;/span&gt;)\n\n&lt;span class=\"hljs-comment\"&gt;#使用 matplotlib 库进行可视化&lt;/span&gt;\ny_pred &amp;#61; model.predict(X_test)\n\n&lt;span class=\"hljs-comment\"&gt;#绘制前 25 个测试图像和预测结果&lt;/span&gt;\nplt.figure(figsize&amp;#61;(10, 5))\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(25):\nplt.subplot(5, 5, i&amp;#43;1)\nplt.imshow(X_test[i].reshape(28, 28), &lt;span class=\"hljs-attribute\"&gt;cmap&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;gray&amp;#39;&lt;/span&gt;)\nplt.title(f&lt;span class=\"hljs-string\"&gt;&amp;#39;Predicted: {np.argmax(y_pred[i])}&amp;#39;&lt;/span&gt;)\nplt.axis(&lt;span class=\"hljs-string\"&gt;&amp;#39;off&amp;#39;&lt;/span&gt;)\nplt.show()\n\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;注意&amp;#xff0c;在上述代码中&amp;#xff0c;我们使用了 TensorFlow 和 Keras API 来构建双隐层全连接神经网络模型&amp;#xff0c;并使用 fit 函数来训练模型。然后使用 evaluate 函数来计算模型的准确率&amp;#xff0c;并使用 matplotlib 库进行可视化。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于#机器学习#的问题，如何解决？", ["实验主要内容：", "现有两类数据集：第一类是与、或、非、异或四个数据集，第二类是MNIST手写体数字图片数据集。请分别用教材《机器学习》（周志华著）第3章中的线性模型（任务一，满分20分）、第4章中的决策树（任务二，满分20分）、以及第5章中的感知机（任务三，满分20分）和双隐层全连接神经网络（任务四，满分25分）分别对上述两类数据集进行分类并给出精度分析和可视化结果；以及尝试采用具有更多隐藏层的全连接神经网络对第二类数据集进行分类，并给出精度分析和可视化结果（任务五，满分10分）；最后需要对比上述五种任务中的不同模型得到的精度差别，并分析可能的原因，以及由此受到的启发（任务六，满分5分）。", "报告内容要求：", "（1）编程采用MATLAB或Python，代码的所有行均需要有注释。代码单独提交，多个代码需要组织合理，环境配置要清楚指明。", "（2）任务一到任务四的核心算法部分不可以调用库函数，否则最多得相应满分的60%。", "（3）任务一到任务五都可能在编程正确的情况下依然效果不理想，请提出相应的改进方案。在改进时，任务一到任务四的模型类型不能改变，任务五的模型类型可以改变。", "（4）任务一和任务二可以只采用一种算法进行实验，不要求采用所有相关算法。", "（5）报告中可以粘贴代码，但是尽量控制粘贴的代码篇幅，代码的分析和评价以实际提交的代码为主。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;printf(&amp;#34;%d %d %d&amp;#34;, i, j, shzi(i, j));这里&amp;#xff0c;需要加一个\\n&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d\\n&amp;#34;&lt;/span&gt;, i, j, shzi(i, j));&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;加上\\n回车&amp;#xff0c;否则&amp;#xff0c;所有输出都在一行了\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["c语言 The 3n + 1 problem ，可以通过样例，但依然错误。", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "请考虑以下算法以生成数字序列。以整数 n 开头。如果 n 为偶数，则除以 2。如果 n 为奇数，则乘以 3 并加 1。使用新值 n 重复此过程，并在 n = 1 时终止。例如，将为 n = 22 生成以下数字序列： 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 推测（但尚未证明）对于每个整数 n，此算法将终止于 n = 1。尽管如此，这个猜想仍然适用于至少1， 000， 000的所有整数。对于输入 n，n 的循环长度是生成的数量，最多包括 1。在上面的示例中，循环长度 22 为 16。给定任意两个数字 i 和 j，您将确定 i 和 j 之间所有数字（包括两个端点）的最大循环长度。", "输入将由一系列整数对 i 和 j 组成，每行一对整数。所有整数将小于 1，000，000 且大于 0。", "对于每对输入整数 i 和 j，输出 i、j 的顺序与它们在输入中出现的顺序相同，然后是 i 和 j 之间整数的最大循环长度。这三个数字应用一个空格分隔，所有三个数字都在一行上，每行输入都有一行输出。", "样例输入", "1 10", "100 200", "201 210", "900 1000", "样例输出", "1 10 20", "100 200 125", "201 210 89", "900 1000 174", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "#", "define", " _CRT_SECURE_NO_WARNINGS", "\n", "#", "include", "<stdio.h>", "\n", "int", " ", "shzi", "(", "int", " x, ", "int", " y)", ";\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " i, j = ", "0", ";\n    ", "while", " (~", "scanf", "(", "\"%d %d\"", ", &i, &j))", "//while (scanf(\"%d%d\",&n,&m)!=EOF)也是为了没有输入时跳出循环。", "\n    {\n        ", "shzi", "(i, j);\n        ", "printf", "(", "\"%d %d %d\"", ", i, j, ", "shzi", "(i, j));\n    }\n    ", "return", " ", "0", ";\n}\n", "int", " ", "shzi", "(", "int", " x, ", "int", " y)", "\n", "{\n    ", "int", " i = ", "0", ";\n    ", "int", " count = ", "0", ";\n    ", "int", " maxcount = ", "0", ";\n    ", "if", " (y < x)\n    {\n        ", "int", " temp = ", "0", ";\n        temp = x;\n        x = y;\n        y = temp;\n    }\n    ", "for", " (i = x; i <= y; i++)\n    {\n        ", "int", " p = i;", "//保存i变量，不然后面i值变化了就没办法正常for循环了", "\n        ", "if", " (i == ", "1", ")", "//当i=1时不进入循环所以没办法算一次", "\n        {\n            count++;\n        }\n        ", "else", "\n        {\n            ", "while", " (i != ", "1", ")\n            {\n                ", "if", " (i % ", "2", " == ", "0", ")\n                {\n                    i = i / ", "2", ";\n                }\n                ", "else", "\n                {\n                    i = i * ", "3", " + ", "1", ";\n                }\n                count++;\n            }\n            count++;", "//i也算一次，但是while循环会忽略i", "\n        }\n        ", "if", " (maxcount < count)\n        {\n            maxcount = count;\n        }\n        i = p;", "//赋值给i，继续正常循环", "\n        count = ", "0", ";", "//清零，避免count一直加。才可以准确计算每个i的count", "\n    }\n    ", "return", " maxcount;\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;欢迎采纳&amp;#xff0c;这段代码的功能是将给定的数字 n 翻转过来&amp;#xff0c;比如 n 是 1234&amp;#xff0c;那么最终的输出 s 就会是 4321。为什么要使用这行代码 s &amp;#61; s * 10 &amp;#43; n % 10 &amp;#xff1f;因为%运算得到的是余数&amp;#xff0c;当n的值不断除以10&amp;#xff0c;余数就是每一位上的数字&amp;#xff0c;乘以10则可以实现数字翻转。&lt;br /&gt;举个1234例子&lt;br /&gt;如果给定的数字是1234&amp;#xff0c;最初 s 等于 0&amp;#xff08; s&amp;#61;0&amp;#xff09;&amp;#xff0c;所以 n % 10 结果是 4&amp;#xff0c;然后将 n%10 的结果加到 s 上&amp;#xff0c;即 s &amp;#61; 0 &amp;#43; 4&amp;#xff0c;此时 s 的值为4。接着&amp;#xff0c;n 除以10&amp;#xff0c;就变成了 123&amp;#xff0c;此时&amp;#xff0c;n % 10 结果是 3&amp;#xff0c;将 n % 10 的结果再加到s上&amp;#xff0c;即 s &amp;#61; 4 * 10 &amp;#43; 3&amp;#xff0c;此时 s 的值为43。在继续循环直到 n 变为 0&amp;#xff0c;即可得到最终的结果 s &amp;#61; 4321&amp;#xff0c;也就是翻转后的结果。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["c语言。输出该整数对应的反向数。", ["从键盘上输入一整数（int范围内），输出该整数对应的反向数。", "\n", "比如输入3486，则输 出6843。", "请注意，输出的6843是一个数，不能只是将每个位上的数字打印出。", "\n", "如果输入数字以0结 束，则反向数不需要输出前导0。", "输入格式：\"%d\" 输出格式：\"%d\"", "程序运行结果示例1：", "输入：20220115", "输出：51102202", "程序运行结果示例2：", "输入：150", "输出：51", "\n", "while(n)<-这里n是在干嘛？", "    {", "        s = s * 10 + n % 10;          <-这里的算法又是在干嘛？？？", "        n/=10;", "    }", "\n", "可以详细解答一下代码的意思吗？", "\n", "\n", "#", "include", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " n;\n    ", "int", " s = ", "0", ";\n    ", "scanf", "(", "\"%d\"", ",&n);\n    ", "while", "(n)                          ", "//(n)?", "\n    {\n        s = s * ", "10", " + n % ", "10", ";          ", "//为什么？？这是在干嘛？", "\n        n/=", "10", ";\n    }\n    ", "printf", "(", "\"%d\"", ",s);\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这种东西最好看产品手册&amp;#xff0c;这玩意儿又不是人手一台&amp;#xff0c;要找个用过的人恐怕不容易吧。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["低功耗多通道WFAS1431无线数据采集采发仪的功耗是多少？", [" 工程监测为野外恶劣自然环境和条件下开发的一种集太阳能充电、低功耗、防雷、接口齐备的一体化智能无线采控设备。", "整个设备由供电模块、任务管理模块、功耗管理模块、无线模块、数字接口模块、模拟接口模块、防雷模块、系统控制模块、状态扫描模块及报警模块构成，固件程序采用UCOSGUI多任务实时操作系统及程序算法，整个设备运行可靠，可以实现长时间野外工作。", "常年野外工作，就需要低功耗的设备，可以常年稳定数据采集传输。", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;s&lt;/span&gt;&amp;#61;1\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(0,9436):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i%&lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;1:\n        s*&amp;#61;i\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(s)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;2.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;x1&lt;/span&gt;&amp;#61;int(input())\n&lt;span class=\"hljs-attribute\"&gt;x2&lt;/span&gt;&amp;#61;int(input())\n&lt;span class=\"hljs-attribute\"&gt;x3&lt;/span&gt;&amp;#61;int(input())\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; x1&amp;#43;&lt;span class=\"hljs-attribute\"&gt;x2&lt;/span&gt;&amp;#61;&amp;#61;x3 &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt;  x1&amp;#43;&lt;span class=\"hljs-attribute\"&gt;x3&lt;/span&gt;&amp;#61;&amp;#61;x2 &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; x3&amp;#43;&lt;span class=\"hljs-attribute\"&gt;x2&lt;/span&gt;&amp;#61;&amp;#61;x1 :\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;3.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(2,3804578900232):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; 3804578900232%&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;&amp;#61;0:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i,&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;4.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;s&amp;#61;&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;()\nt&amp;#61;[]\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(s)):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; s[i]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;:\n        t.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(i)\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(t)&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(t[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(t[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(t[&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(t)-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;5.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;def extra_same_elem(list1, list2):\n    set1 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;set&lt;/span&gt;(list1)\n    set2 &lt;span class=\"hljs-comment\"&gt;&amp;#61; set(list2)&lt;/span&gt;\n    iset &lt;span class=\"hljs-comment\"&gt;&amp;#61; set1.intersection(set2)&lt;/span&gt;\n    return &lt;span class=\"hljs-comment\"&gt;list(iset)&lt;/span&gt;\n \nlst1 &lt;span class=\"hljs-comment\"&gt;&amp;#61; [1,2,3]&lt;/span&gt;\nlst2 &lt;span class=\"hljs-comment\"&gt;&amp;#61; [2,3,4]&lt;/span&gt;\nlst &lt;span class=\"hljs-comment\"&gt;&amp;#61; extra_same_elem(lst1, lst2)&lt;/span&gt;\nlst.sort() &lt;span class=\"hljs-comment\"&gt;#&lt;/span&gt;对结果排一下序&amp;#xff0c;方便查看\nprint(lst)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;6.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-variable\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;l&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;n&lt;/span&gt;):\n    &lt;span class=\"hljs-variable\"&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;n&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-variable\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-variable\"&gt;&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;&lt;/span&gt;:\n        &lt;span class=\"hljs-variable\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;n&lt;/span&gt;*&lt;span class=\"hljs-title\"&gt;l&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;n&lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-title\"&gt;l&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;))&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["业务分析编程的基础知识 IDLE", ["1）将所有0到9435之间的奇数值相乘。", "2）给出三个数字。如果可以取其中任何两个加起来变成第三个，则输出«yes«。", "3）列出数字3804578900232的所有正因数。", "4) 给出一个字符串。如果在这一行中f只出现一次，则输出其索引。如果它出现两次或更多次，则打印其第一次和最后一次出现的索引。如果字母f没有出现在给定的行中，则不打印。", "5）有两份列表。找出第一和第二份列表中都出现的单词。", "6）计算函数F(n)值的算法，其中n是自然数，由以下比率给出：", "     F（1）=1", "F(n) = F(n–1) * n，在 n >1", "函数F（100）的值是多少？", "使用子程序"]], "Tag": "算法设计"}
{"Answer": "[http://blog.csdn.net/wyxeainn/article/details/52451155?locationNum=2&amp;fps=1](http://blog.csdn.net/wyxeainn/article/details/52451155?locationNum=2&amp;fps=1 \"\")", "Konwledge_Point": "算法与数字", "Question": ["数塔                              ", ["Problem Description", "\n在讲述DP算法的时候，一个经典的例子就是数塔问题，它是这样描述的：", "\n\n", "有如下所示的数塔，要求从顶层走到底层，若每一步只能走到相邻的结点，则经过的结点的数字之和最大是多少？", "\n已经告诉你了，这是个DP的题目，你能AC吗?", "\n\n", "Input", "\n输入数据首先包括一个整数C,表示测试实例的个数，每个测试实例的第一行是一个整数N(1 <= N <= 100)，表示数塔的高度，接下来用N行数字表示数塔，其中第i行有个i个整数，且所有的整数均在区间[0,99]内。", "\n\n", "Output", "\n对于每个测试实例，输出可能得到的最大和，每个实例的输出占一行。", "\n\n", "Sample Input", "\n1", "\n5", "\n7", "\n3 8", "\n8 1 0 ", "\n2 7 4 4", "\n4 5 2 6 5", "\n\n", "Sample Output", "\n30"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;if(a&amp;#61;1||3||5||7||8||10||12)&lt;br /&gt;错的太厉害了&lt;br /&gt;判断相等用&amp;#61;&amp;#61;&amp;#xff0c;多个值判断相等不能这么写&lt;br /&gt;if(a&amp;#61;&amp;#61;1 || a&amp;#61;&amp;#61;3 || a&amp;#61;&amp;#61;5 || a&amp;#61;&amp;#61; 7 || a&amp;#61;&amp;#61; 8 || a&amp;#61;&amp;#61; 10 || a&amp;#61;&amp;#61;12)&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["怎么解答跨月日期的算法？", ["我写了个程序，就是很简单的算日子相差几天（算上当天），虽然运行成功，但是有很大的问题。一个是我只把它局限在2022年（考虑2月的平年闰年），另一个是这个程序只能算相邻的月份数字。因为我想了很久怎么才能实现跨月份计算，（平年闰年我可以再套一个if，用4整除）却没有想到，不知道是不是受到所学知识的限制（目前学到c语言循环），还是说单纯没有想到办法呢？求帮忙解答！", "\n", "#include<stdio.h>", "int main()", "{", "    int a;", "    int b;", "    int c;", "    int d;", "    int x;", "    int y;", "    printf(\"请分别输入初始与结束月份及日子！(2022)\");", "    scanf(\"%d %~ %~ %~\",&a,&b,&c,&d); //不让d重复！", "    if(a==1||3||5||7||8||10||12)", "    {x=32-b;", "    y=x+d;", "     }", "     else if(a==2)", "     {x=30-b;", "     y=x+b;", "     }", "     else if(a==4||6||9||11)", "     {x=31-b;", "     y=x+d;", "     }", "    printf(\"两个日子相差%d天！\",y);", "    return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;l &amp;#61; [[1], [1, 1]]\nn &amp;#61; int(input(&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;#34;))\n\nfor i in range(2, n):\n    li &amp;#61; [0] * (i &amp;#43; 1)\n    for j in range(i &amp;#43; 1):\n        if j &amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt; 0 &lt;/span&gt;or j &amp;#61;&amp;#61; i:\n            li[j] &amp;#61; 1\n        else:\n            li[j] &amp;#61; l[i - 1][j] &amp;#43; l[i - 1][j - 1]\n    l.append(li)\nfor i in range(n):\n    strC &amp;#61; &amp;#39; &amp;#39;.join(map(str, l[i]))\n    print(strC.center(4 * n))\n\n&amp;#39;&amp;#39;&amp;#39;--result\n&amp;gt;&amp;gt;&amp;gt;10\n                  &lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;                   \n                 &lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;1                   \n                &lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;2&lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;                 \n               &lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;3&lt;span class=\"hljs-number\"&gt; 3 &lt;/span&gt;1                 \n              &lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;4&lt;span class=\"hljs-number\"&gt; 6 &lt;/span&gt;4&lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;               \n            &lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;5&lt;span class=\"hljs-number\"&gt; 10 &lt;/span&gt;10&lt;span class=\"hljs-number\"&gt; 5 &lt;/span&gt;1              \n           &lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;6&lt;span class=\"hljs-number\"&gt; 15 &lt;/span&gt;20&lt;span class=\"hljs-number\"&gt; 15 &lt;/span&gt;6&lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;           \n         &lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;7&lt;span class=\"hljs-number\"&gt; 21 &lt;/span&gt;35&lt;span class=\"hljs-number\"&gt; 35 &lt;/span&gt;21&lt;span class=\"hljs-number\"&gt; 7 &lt;/span&gt;1           \n        &lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;8&lt;span class=\"hljs-number\"&gt; 28 &lt;/span&gt;56&lt;span class=\"hljs-number\"&gt; 70 &lt;/span&gt;56&lt;span class=\"hljs-number\"&gt; 28 &lt;/span&gt;8&lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;        \n     &lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;9&lt;span class=\"hljs-number\"&gt; 36 &lt;/span&gt;84&lt;span class=\"hljs-number\"&gt; 126 &lt;/span&gt;126&lt;span class=\"hljs-number\"&gt; 84 &lt;/span&gt;36&lt;span class=\"hljs-number\"&gt; 9 &lt;/span&gt;1       \n&amp;#39;&amp;#39;&amp;#39;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["sdut-array2-5 打印“杨辉三角“ 品中国数学史 增民族自豪感", ["北宋人贾宪约1050年首先使用“贾宪三角”进行高次开方运算。 南宋数学家杨辉在《详解九章算法》（1261年）记载并保存了“贾宪三角”，故称杨辉三角。杨辉三角是中国数学史上的一个伟大成就。 杨辉三角，是中国古代数学的杰出研究成果之一，它把二项式系数图形化，把组合数内在的一些代数性质直观地从图形中体现出来，是一种离散型的数与形的结合。", "\n", "中国南宋数学家杨辉1261年所著的《详解九章算法》一书中出现。在欧洲，帕斯卡（1623-1662）在1654年发现这一规律，所以这个表又叫做帕斯卡三角形。帕斯卡的发现比杨辉要迟393年，比贾宪迟600年。", "\n", "杨辉三角数字的特点为：", "\n", "（1）在三角形的首列和对角线上，数值均为1；", "\n", "（2）其余数据为：每个数字等于上一行的左右两个数字之和，第n+1行的第i个数等于第n行的第i-1个数和第i个数之和，用公式表示为： C(n+1,i)=C(n,i)+C(n,i-1)。", "\n", "图示为：", "\n", "1.jpg", "\n", "杨辉三角的应用：(a+b)的n次方，展开式中的各项系数依次对应杨辉三角的第(n+1)行中的每一项。", "\n", "输入格式:", "欲打印杨辉三角的行数n（1<=n<=13)。", "\n", "输出格式:", "（1）输出的数据为等腰三角形样式；", "\n", "（2）每个数字占据4个字符的位置，数字左对齐，数字不足4位的右边留出空格；", "\n", "（3）最后一行的数值“1”顶格，前面无空格。", "\n", "提示：以n=5，分析行首空格数为：", "\n", "输入样例1:", "5", "结尾无空行", "输出样例:", "        1", "      1   1", "    1   2   1", "  1   3   3   1", "1   4   6   4   1", "结尾无空行", "输入样例2:", "6", "结尾无空行", "输出样例:", "          1", "        1   1", "      1   2   1", "    1   3   3   1", "  1   4   6   4   1", "1   5   10  10  5   1", "结尾无空行"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&amp;#xff08;1&amp;#xff09;&lt;br /&gt;int bubble(int *p,int j; 这里&amp;#xff0c;你最后漏了一个&amp;#xff09;&lt;br /&gt;应该是&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;bubble&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *p,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j)&lt;/span&gt;&lt;/span&gt;; \n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&amp;#xff08;2&amp;#xff09;C语言不支持变量定义数组长度&amp;#xff0c;题目说明n不大于10 了&amp;#xff0c;数组直接用int ch[10];就可以了。&lt;br /&gt;&amp;#xff08;3&amp;#xff09;冒泡排序内循环错误&amp;#xff0c;for(y&amp;#61;0;y&amp;lt;&amp;#61;j-x-1;y&amp;#43;&amp;#43;)应该是&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;for&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(y&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;y&amp;lt;j-x-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;y&amp;#43;&amp;#43;)&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hljs-comment\"&gt;//不是&amp;lt;&amp;#61;是&amp;lt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;冒泡排序的外循环&amp;#xff1a;for(x&amp;#61;0;x&amp;lt;j;x&amp;#43;&amp;#43;)最好改成for(x&amp;#61;0;x&amp;lt;j-1;x&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;代码修改如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;bubble&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *p,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j)&lt;/span&gt;&lt;/span&gt;;               &lt;span class=\"hljs-comment\"&gt;//&amp;#34;bubble&amp;#34; means using bubble sort &lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; number,i;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; z;        &lt;span class=\"hljs-comment\"&gt;//&amp;#34;number&amp;#34; is the number you want&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ch[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];  \n\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;number);\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;number;i&amp;#43;&amp;#43;)       &lt;span class=\"hljs-comment\"&gt;//i is used to put the number into array &lt;/span&gt;\n    {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;ch[i]);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;bubble&lt;/span&gt;(ch,number);     &lt;span class=\"hljs-comment\"&gt;// make the array to the function &amp;#34;ch&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(z&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;z&amp;lt;number;z&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,ch[z]);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(z!&amp;#61;(number&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;))\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;);      &lt;span class=\"hljs-comment\"&gt;//do the &amp;#34; &amp;#34; thing&lt;/span&gt;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n} \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;bubble&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *p,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j)&lt;/span&gt;\n&lt;/span&gt;{    \n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x,y;                   &lt;span class=\"hljs-comment\"&gt;//these variable are used to do the bubble sort&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t;                         &lt;span class=\"hljs-comment\"&gt;//t is used to exchange variables&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(x&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;x&amp;lt;j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;x&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;//这里最好用x&amp;lt;j-1&amp;#xff0c;虽然用x&amp;lt;j也可以&amp;#xff0c;但是在有些平台提交的时候会报错&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(y&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;y&amp;lt;j-x&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;y&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(p[y]&amp;lt;&amp;#61;p[y&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n            {\n                t&amp;#61;p[y&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                p[y&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;p[y];\n                p[y]&amp;#61;t;\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["c语言冒泡排序：我在做选择排序但是我不知道为什么他前面会给我一个奇怪的数字？", ["这是题目：", "\n", "#include <stdio.h>", "\n", "int", " bubble(", "int", " *p,", "int", " j;               //\"bubble\" means ", "using", " bubble sort \n", "int", " main()\n{\n    ", "int", " number,i;", "int", " z;        //\"number\" ", "is", " the number you want\n    scanf(\"%d\",&number);\n    ", "int", " ch[number];           //q ", "is", " quantity ", "of", " the ", "array", "\"ch\"\n    ", "for", "(i=", "0", ";i<number;i++)       //i ", "is", " used ", "to", " put the number ", "into", " ", "array", " \n    {\n        scanf(\"%d\",&ch[i]);\n    }\n    bubble(ch,number);     // make the ", "array", " ", "to", " the ", "function", " \"ch\"\n    ", "for", "(z=", "0", ";z<number;z++)\n    {\n        printf(\"%d\",ch[z]);\n        ", "if", "(z!=(number", "-1", "))\n        {\n            printf(\" \");      //", "do", " the \" \" thing\n        }\n    }\n    \n    ", "return", " ", "0", ";\n } \n ", "int", " bubble(", "int", " *p,", "int", " j)\n {    \n ", "int", " x,y;                   //these variable are used ", "to", " ", "do", " the bubble sort\n ", "int", " t;                         //t ", "is", " used ", "to", " exchange variables\n     ", "for", "(x=", "0", ";x<j;x++)\n     {\n         ", "for", "(y=", "0", ";y<=j-x", "-1", ";y++)\n         {\n             ", "if", "(p[y]<=p[y+", "1", "])\n             {\n                 t=p[y+", "1", "];\n                 p[y+", "1", "]=p[y];\n                 p[y]=t;\n             }\n         }\n     }\n }\n\n", "\n", "两个例子，为什么会有差别？", "对的：", "\n", "错的："]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\npublic static void main(String[] args){\n    String target = &amp;quot;Jyouhou&amp;quot;;//目标串\n    Scanner scanner = new Scanner(System.in);\n    int t = scanner.nextInt();//组数\n    if(t&amp;lt;=0){\n        System.out.println(&amp;quot;组数必须大于0&amp;quot;);\n        return;\n    }\n    int tLen = target.length();//目标串长度\n    String[] s = new String[t];//需要匹配的字符串数组\n    for(int i=0;i&amp;lt;t;i++){\n        int n = scanner.nextInt();\n        if(n&amp;lt;=0){\n            System.out.println(&amp;quot;字符串SS的长度必须大于0&amp;quot;);\n            return;\n        }\n        scanner.nextLine();//消化掉回车,避免下面的nextLine读到\n        String s1 = scanner.nextLine();\n        s[i]= s1.substring(0,n);\n    }\n\n    for(int i=0;i&amp;lt;t;i++){\n        int count = 0;//匹配的次数\n        int k1 = 0;\n        int k2 = 0;\n        int sLen = s[i].length();//源字符串的长度\n        if(sLen&amp;lt;tLen){//长度不够，肯定不匹配\n            System.out.println(0);\n        }else{\n            while(true){\n                if(s[i].charAt(k1)==target.charAt(k2)){\n                    k2++;\n                }\n                k1++;\n                if(k2==tLen){//target被遍历完，res计数，k2重新开始\n                    count++;\n                    k2=0;\n                    if(sLen-k1&amp;lt;tLen){ //如果剩余长度不足，没必要往下判断\n                        System.out.println(count);\n                        break;\n                    }\n                }\n                if(k1==sLen){//源字符串已被扫描完，输出\n                    System.out.println(count);\n                    break;\n                }\n            }\n        }\n    }\n}&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["求大佬们帮忙看一道算法题目", ["我好菜啊，做了半天还是做不出来，题目如下：", "\n\n", "提取子序列 subarr", "\n\n", "Description", "\n\n", " ", "\n\n", "「信息学（Informatics）」的另一个译名是「情报学」，这个名字在日本见得比较多。日文的「情報」读音为「Jyouhou」。", "\n\n", "现在有一个长为 nn 的字符串 SS ，SS中只包含大小写英文字母或数字。按从前往后的顺序读字符串SS，从SS中取出最靠前的一个子序列构成", "Jyouhou", "串，取出一个串后，从最后一个字符的后一个位置继续尝试取出，直到剩余部分已无法取出一个", "Jyouhou", "串。请求出对于给定的SS，取出的", "Jyouhou", "串的数量是多少。", "\n\n", "子序列：从一个序列中取出若干元素（不要求相邻）组成的一个新序列，新序列元素的顺序按照原序列中元素的相对顺序确定。", "\n\n", "你可以参考样例解释来帮助理解上面的流程。", "\n\n", "Input", "\n\n", " ", "\n\n", "测试点包含多组测试数据。", "\n\n", "第一行包含一个正整数T (1≤T≤20)，表示测试数据组数。", "\n\n", "每组数据中包含两行。第一行包含一个正整数n (1≤n≤10^4)，表示字符串SS的长度。第二行包含一个字符串SS，含义见「题目描述」。", "\n\n", "Output", "\n\n", " ", "\n\n", "对于每一组测试数据，输出一行一个正整数，表示该组数据的答案。", "\n\n", "Sample Input 1 ", "\n\n", "\n3\n20\nJJSy2ouhuouJ5yoxuhou\n10\naaaaaaaaaa\n14\nJyouhoJuyouhou", "\n\n", "Sample Output 1", "\n\n", "\n2\n0\n1", "\n\n", "第一组数据中，找到的 2 个", "Jyouhou", "串为", "J", "JS", "y", "2", "ouh", "u", "ouJ", "5", "yo", "x", "uhou", "。", "\n\n", "第二组数据中，由于不存在 J、y、o、u、h 字符，故无法找到任何一个", "Jyouhou", "串。", "\n\n", "第三组数据中，找到的", "Jyouhou", "串为", "Jyouho", "J", "u", "youhou。由于前一个", "Jyouhou", "串的最后一个字符 u 在第二个字符 J 前面，字符 u 后面已经无法再找到一个", "Jyouhou", "串了，因此只能找出 1 个。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;Members&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;Hugo&amp;#39;&lt;/span&gt;:[&lt;span class=\"hljs-string\"&gt;&amp;#39;Brijht&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;M&amp;#39;&lt;/span&gt;],&lt;span class=\"hljs-string\"&gt;&amp;#39;Mary&amp;#39;&lt;/span&gt;:[&lt;span class=\"hljs-string\"&gt;&amp;#39;Pretty&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;],&lt;span class=\"hljs-string\"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;:[&lt;span class=\"hljs-string\"&gt;&amp;#39;CowBoy&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;M&amp;#39;&lt;/span&gt;],&lt;span class=\"hljs-string\"&gt;&amp;#39;Jerry&amp;#39;&lt;/span&gt;:[&lt;span class=\"hljs-string\"&gt;&amp;#39;Smart&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;M&amp;#39;&lt;/span&gt;],&lt;span class=\"hljs-string\"&gt;&amp;#39;Anna&amp;#39;&lt;/span&gt;:[&lt;span class=\"hljs-string\"&gt;&amp;#39;Lucky&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;]}\n&lt;span class=\"hljs-attribute\"&gt;m&lt;/span&gt;&amp;#61;0\n&lt;span class=\"hljs-attribute\"&gt;f&lt;/span&gt;&amp;#61;0\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i,j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; Members.items():\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; Members[i][1]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;M&amp;#39;&lt;/span&gt;:\n        m&amp;#43;&amp;#61;1\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; :\n        f&amp;#43;&amp;#61;1\n    &lt;span class=\"hljs-attribute\"&gt;t&lt;/span&gt;&amp;#61;Members[i][0].lower()\n    &lt;span class=\"hljs-attribute\"&gt;s&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; k &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; t:\n        s&amp;#43;&amp;#61;str(ord(k)%10)\n    Members[i][0]&amp;#61;s\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;共&amp;#39;&lt;/span&gt;&amp;#43;str(m)&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#39;男性&amp;#xff0c;&amp;#39;&lt;/span&gt;&amp;#43;str(f)&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#39;个女性&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;密码更新后&amp;#xff1a;&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i,j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; Members.items():\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i,j)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["会员信息加密保存重新输出", ["某公司后台管理系统存储着会员的用户信息（格式为{'姓名'：['密码'，'性别']}）。", "用户字典：Members={'Hugo'：['Brijht'，'M']，'Mary':['Pretty'，'F']，'John'：['CowBoy','M'],'Jerry':['Smart','M'],'Anna':['Lucky','F']}", "1.将所有会员的密码根据加密算法加密后，再更新字典里的密码，并输出所有人的信息。", "加密算法：<1>先将英文单词中的每个字母都转换为对应的小写字母。<2>再将该小写字母的ascii码对10整除后取其余数。<3>按以上方法加密每个字符，从而得到一个六位整数密码。", "2.统计男（M）、女（F）会员人数并输出结果。", "3.加密结束后，显示：加密完成。", "4.加密方法：通过表达式“ord(i.lower())%10”获取每个字符的密文，再连接成一串数字密文。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; N 10&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n  {\n   &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j, k, n&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, a[N][N];  &lt;span class=\"hljs-comment\"&gt;/*定义二维数组a[10][10]*/&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要打印的行数(输入&amp;lt;&amp;#61;0时结束&amp;#xff09;&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n      &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;gt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n    {\n      &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;行数不能大于10\\n&amp;#34;&lt;/span&gt;):\n      &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d行杨辉三角如下&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;,n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n        a[i][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; a[i][i] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;/*两边的数令它为1&amp;#xff0c;因为现在循环从1开始&amp;#xff0c;就认为a[i][1]为第一个数*/&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;j&amp;lt;&amp;#61;i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;j&amp;#43;&amp;#43;)\n            a[i][j]&amp;#61;a[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43;a[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j];  &lt;span class=\"hljs-comment\"&gt;/*除两边的数外都等于上两顶数之和*/&lt;/span&gt; \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(k&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;k&amp;lt;&amp;#61;n-i;k&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;   &amp;#34;&lt;/span&gt;);  &lt;span class=\"hljs-comment\"&gt;/*这一行主要是在输出数之前打上空格占位&amp;#xff0c;让输出的数更美观*/&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;lt;&amp;#61;i;j&amp;#43;&amp;#43;)  &lt;span class=\"hljs-comment\"&gt;/*j&amp;lt;&amp;#61;i的原因是不输出其它的数&amp;#xff0c;只输出我们想要的数*/&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%5d&amp;#34;&lt;/span&gt;,a[i][j]);\n        \n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);  &lt;span class=\"hljs-comment\"&gt;/*当一行输出完以后换行继续下一行的输出*/&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n  }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["杨辉三角问题C语言，今天", ["杨辉，字谦光，汉族，钱塘（今浙江省杭州）人，南宋杰出的数学家。 他曾担任过南宋地方行政官员，为政清廉，足迹遍及苏杭一带。他在总结民间乘除捷算法、“垛积术”、纵横图（幻方）以及数学教育方面，均做出了重大的贡献。他是世界上第一个排出丰富的纵横图和讨论其构成规律的数学家。还曾论证过弧矢公式，时人称为“辉术”。与秦九韶、李冶、朱世杰并称“宋元数学四大家”。主要著有数学著作5种21卷，即《详解九章算法》12卷（1261），《日用算法》2卷（1262），《乘除通变本末》3卷（1274），《田亩比类乘除捷法》2卷（1275）和《续古摘奇算法》2卷（1275）（其中《详解》和《日用算法》已非完书）。后三种合称为《杨辉算法》。朝鲜、日本等国均有译本出版，流传世界。（来源于百度百科）", "\n", "杨辉在《详解九章算法》一书中还画了一张表示二项式展开后的系数构成的三角图形，称做“开方做法本源”，简称为“杨辉三角”。杨辉三角是一个由数字排列成的三角形数表。（来源于百度百科）", "\n", "输入一个整数n，输出n行的杨辉三角形。例如，n=5，则杨辉三角如输出样例所示。", "\n", "输入格式:", "输入数据有多组，每组1个整数n(1≤n≤10)，一直处理到文件结束。", "\n", "输出格式:", "对于每个n，输出n行杨辉三角形。每个数据的输出为5个字符宽度，具体见输出样例。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;是对线条样式更精确的控制&amp;#xff0c;元组的元素分别表示&amp;#xff1a;3pt 线、5pt 空间、1pt 线、5pt 空间...&amp;#xff0c;0表示没有偏移量。&lt;br /&gt;参考&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://matplotlib.org/stable/gallery/lines_bars_and_markers/linestyles.html\" id=\"textarea_1649644533811_1649644571584_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://matplotlib.org/stable/gallery/lines_bars_and_markers/linestyles.html&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["lstype = ['-','--',(0, (3, 5, 1, 5, 1, 5)),':','-.']请问这句代码什么意思？", ["用聚类算法分析数据后，生成聚类中心雷达图", " lstype = ['-','--',(0, (3, 5, 1, 5, 1, 5)),':','-.']  #这句代码什么意思？", "        for p in range(len(kinds)):", "        ax.plot(angle, centers[p], linestyle=lstype[i]，label=kinds[p])", " 这句代码设计线条样式，中间的数字什么意思，是什么格式？"]], "Tag": "算法设计"}
{"Answer": "http://www.lxway.com/4084220604.htm", "Konwledge_Point": "算法与数字", "Question": ["统计若干个大型英文txt文件中所有单词出现的次数，并输出出现次数最多的前10个单词及其出现次数", ["统计若干个大型英文txt文件（如英文小说）中所有单词出现的次数，并输出出现次数最多的前10个单词及其出现次数。", "\n\n", "单词字符定义为大小写字母、数字和下划线，", "\n其他字符均看作单词分隔符；", "\n自行设计合适的数据结构及相关算法；", "\n程序运行结束时将txt文件名以及统计结果写入磁盘； ", "\n每次程序启动时（除了首次运行）将上次的结果读入内存、显示；", "\n能根据用户选择实现重新初始化、查找某单词出现次数、追加统计、退出等功能。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第二个代码只有两处地方有问题&lt;/p&gt;\n&lt;p&gt;修改结果&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/120504096846117.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;    a, z;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (~&lt;span class=\"hljs-built_in\"&gt;scanf_s&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;a, &amp;amp;z)) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;    a1, z1, max &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, q &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-comment\"&gt;//确保a1&amp;lt;z1&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;gt; z) {\n            a1 &amp;#61; z;\n            z1 &amp;#61; a;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            a1 &amp;#61; a;\n            z1 &amp;#61; z;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; a1; i &amp;lt;&amp;#61; z1; i&amp;#43;&amp;#43;) {\n\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; i;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (j &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) { q &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; }\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (j !&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (j % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) { j &amp;#61; j / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; }\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; { j &amp;#61; j * &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; }\n                q&amp;#43;&amp;#43;;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (max &amp;lt; q) {\n                max &amp;#61; q;\n            }\n            q &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d\\n&amp;#34;&lt;/span&gt;, a, z, max);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;第一处是j是偶数的时候应该是&lt;code class=\"language-javascript\"&gt;j&amp;#61;j/2&lt;/code&gt;不是&lt;code class=\"language-javascript\"&gt;j&amp;#61;i/2&lt;/code&gt;&amp;#xff0c;第二处是每次循环结束&lt;code class=\"language-javascript\"&gt;q&lt;/code&gt;要清空&amp;#xff0c;不然会一直累加&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["The 3n + 1 problem两个代码的区别及对第二个进行修改", ["问题", "        请考虑以下算法以生成数字序列。以整数 n 开头。如果 n 为偶数，则除以 2。如果 n 为奇数，则乘以 3 并加 1。使用新值 n 重复此过程，并在 n = 1 时终止。例如，将为 n = 22 生成以下数字序列： 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 推测（但尚未证明）对于每个整数 n，此算法将终止于 n = 1。尽管如此，这个猜想仍然适用于至少1， 000， 000的所有整数。对于输入 n，n 的循环长度是生成的数量，最多包括 1。在上面的示例中，循环长度 22 为 16。给定任意两个数字 i 和 j，您将确定 i 和 j 之间所有数字（包括两个端点）的最大循环长度。", "输入：输入将由一系列整数对 i 和 j 组成，每行一对整数。所有整数将小于 1，000，000 且大于 0。", "输出：对于每对输入整数 i 和 j，输出 i、j 的顺序与它们在输入中出现的顺序相同，然后是 i 和 j 之间整数的最大循环长度。这三个数字应用一个空格分隔，所有三个数字都在一行上，每行输入都有一行输出。", "\n", "\n", "问题相关代码，请勿粘贴截图", "\n", "//可行代码", "\n", "#", "include", "<stdio.h>", "\n", "#", "define", " max(a,b) ((a>b) ? a : b)", "\n", "#", "define", " min(a,b) ((a<b) ? a : b)", "\n", "int", "    ", "num", "(", "int", "    i)", " ", "{\n    ", "int", " ans = ", "1", ";\n    ", "while", " (i > ", "1", ") {\n        ", "if", " (i % ", "2", "==", "1", ")\n            i = i * ", "3", " + ", "1", ";\n        ", "else", "\n            i = i / ", "2", ";\n        ans++;\n    }\n    ", "return", " ans;\n}\n", "int", " ", "main", "()", "\n", "{\n    ", "int", "    a, z,m;\n    ", "while", " (~", "scanf_s", "(", "\"%d%d\"", ", &a, &z)) {\n        m = ", "1", ";\n        ", "for", " (", "int", " i = ", "min", "(a, z); i <= ", "max", "(a, z); i++) {\n            m = ", "max", "(m, ", "num", "(i));\n        }\n        ", "printf", "(", "\"%d %d %d\\n\"", ", a, z, m);\n    }\n    \n    ", "return", " ", "0", ";\n}\n\n", "\n", "//不可行代码", "\n", "#", "include", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{\n    ", "int", "    a, z;\n    ", "while", " (~", "scanf_s", "(", "\"%d%d\"", ", &a, &z)){\n    ", "int", "    a1, z1,max = ", "1", ",q=", "1", ";\n    ", "//确保a1<z1", "\n    ", "if", " (a > z) {\n        a1 = z;\n        z1 = a;\n    }\n    ", "else", " {\n        a1 = a;\n        z1 = z;\n    }\n    ", "for", " (", "int", " i = a1; i <= z1; i++) {\n        \n        ", "int", " j = i;\n        ", "if", " (j == ", "1", ") { q == ", "1", "; }\n        ", "while", " (j!=", "1", ")\n        {\n            ", "if", " (j % ", "2", " == ", "0", ") { j = i / ", "2", "; }\n            ", "else", " { j = j * ", "3", " + ", "1", ";  }\n            q++;\n        }\n        ", "if", " (max < q) {\n            max = q;\n        }\n    }\n    ", "printf", "(", "\"%d %d %d\\n\"", ", a, z, max);\n    }\n    ", "return", " ", "0", ";\n}\n\n\n", "\n", "运行结果及报错内容", "\n", "\n", "我想要达到的结果", "\n", "这两个代码有什么不同？为什么第二个代码不行？如何更改？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;是pow函数的使用问题&amp;#xff0c;这个函数返回值是double类型两个参数类型不能都是int类型&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["完美综合式，在sum++加断点之后，查看各个变量的值发现所有的变量都找不到，这是为什么？", ["把数字1,2...9这9个数字分别填入以下含加﹑减﹑乘﹑除与乘方的综合运算式中的9个中,口使得该式成立", "口^口+口口÷口口-口×口=0", "要求数字1,2...这9个数字在式中出现一次且只出现一次，且约定数字“1\"不出现在乘﹑乘方的一位数中（即排除式中的各个1位数为1这一平凡情形)。", "\n", "我的代码整体想法是先枚举出每个数字的所有情况，然后进行条件筛选，调试的时候发现，在判断是否有重复出现的数字的时候，永远都判断不成功，这是不可能出现的，在sum++加断点之后，查看各个变量的值发现所有的变量都找不到，这是为什么？", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "1.你如果能保证1_X在3_X前面，就声明一个变量，保存截取的第一个字符，如果当前截取的和之前的不一样就说明已经循环到了下一个时间段。这样就能获得你要的结果。\r\n2.如果不能保证，就把截取的第一个字符放到Map中，key就是你的第一个字符，value就是拼接的字符，每次先拿截取的第一个字符串查询Map中的值，有就拼接，没有就添加一个。", "Konwledge_Point": "算法与数字", "Question": ["java如何从一个指定的字符串截取相同格式的子字符串", ["Hi,", "\n\n", "我在做一个Web请假（图表操作形式）", "\n   老师通过点击表格列选中，表示这个时间请假。", "\n   当老师在一周的表格上点了很多下的时候，Jquery通过样式查找得到", "\n 老师选中的时间片ID,形如 (1_1,1_2,1_3,3_3,3_4,3_5)这样一个字符串。", "\n这个形式表示老师星期一，1,2,3节课请假，星期三，3,4,5节课请假。", "\n   因为我在数据里要插入2条记录。", "\n   所以要把(1_1,1_2,1_3,3_3,3_4,3_5)分割成(1_1,1_2)(3_3,3_4,3_5)这2个字符串。", "\n   请问有什么好的算法没有?", "\n   我的想法：1.分割成数组all[]遍历，把_前的数字找出来。去掉重复，", "\n               放到一个临时数组 pre[].", "\n           2.创建数组temp[pre.length]。", "\n                再双重遍历all[]与pre[]，", "\n               遍历的时候", "\n               if(all[i].startWith(pre[j]))", "\n                   temp[j]+=all[i]+\",\"", "\n           3.最后得到的temp[]就是要的结果？", "\n\n", "总感觉有点麻烦。求更好的算法.\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;char A[] &amp;#61; &amp;#34;&amp;#34;;&lt;br /&gt;你没有给数组指定大小啊&lt;br /&gt;既然输入表达式格式都是固定的&amp;#xff0c;那这么写就可以了&lt;br /&gt;int A,B,C,D,E,F;&lt;br /&gt;scanf(&amp;#34;%dx&amp;#43;%dy&amp;#61;%d,%dx&amp;#43;%dy&amp;#61;%c&amp;#34;,&amp;amp;A,&amp;amp;B,&amp;amp;C,&amp;amp;D,&amp;amp;E,&amp;amp;F);&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["C语言char字符串里的数字转换成int就变成0了，有的不变0，同样的数据，不知道哪里有问题", ["char转换为int，数据变成0，不知道哪里出错了", "六个数据，同样的方法，成功了一个", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n", "//Ax+By=C", "\n", "//Dx+Ey=F", "\n", "//x=(CE-BF)/(AE-bD)", "\n", "//y=(CD-AF)/(BD-aE)", "\n", "int", " ", "main", "()", "{\n    ", "char", " A[] = ", "\"\"", ";\n    ", "char", " B[] = ", "\"\"", ";\n    ", "char", " C[] = ", "\"\"", ";\n    ", "char", " D[] = ", "\"\"", ";\n    ", "char", " E[] = ", "\"\"", ";\n    ", "char", " F[] = ", "\"\"", ";\n    ", "printf", "(", "\"请按照以下格式输入方程组 Ax+By=C;Dx+Ey=F\\n\"", ");\n    ", "char", " str[", "32", "] = ", "\"\"", ";\n    ", "scanf", "(", "\"%s\"", ",str);\n    ", "printf", "(", "\"方程组为 %s\\n\"", ", str);\n    ", "sscanf", "(str,", "\"%[^x]\"", ",A);\n    ", "printf", "(", "\"%s\\n\"", ", A);\n    ", "sscanf", "(str,", "\"%*[^+]+%[^y]\"", ",B);\n    ", "printf", "(", "\"%s\\n\"", ", B);\n    ", "sscanf", "(str,", "\"%*[^=]=%[^;]\"", ",C);\n    ", "printf", "(", "\"%s\\n\"", ", C);\n    ", "sscanf", "(str,", "\"%*[^;];%[^x]\"", ",D);\n    ", "printf", "(", "\"%s\\n\"", ", D);\n    ", "sscanf", "(str,", "\"%*[^;]%*[^+]+%[^y]\"", ",E);\n    ", "printf", "(", "\"%s\\n\"", ", E);\n    ", "sscanf", "(str,", "\"%*[^;]%*[^=]=%s\"", ",F);\n    ", "printf", "(", "\"%s\\n\"", ", F);\n    ", "int", " num1, num2, num3, num4, num5, num6, x, y;\n    num1 = ", "atoi", "(A);\n    num2 = ", "atoi", "(B);\n    num3 = ", "atoi", "(C);\n    num4 = ", "atoi", "(D);\n    num5 = ", "atoi", "(E);\n    num6 = ", "atoi", "(F);\n    ", "printf", "(", "\"%d\\n\"", ",num1);\n    ", "printf", "(", "\"%d\\n\"", ",num2);\n    ", "printf", "(", "\"%d\\n\"", ",num3);\n    ", "printf", "(", "\"%d\\n\"", ",num4);\n    ", "printf", "(", "\"%d\\n\"", ",num5);\n    ", "printf", "(", "\"%d\\n\"", ",num6);\n    ", "//x = (num1 * num5 -num2 * num6) / (num1 * num5 - num2 * num4);", "\n    ", "//printf(\"%d,\",x);", "\n    ", "//x=(CE-BF)/(AE-bD)", "\n    ", "//y=(CD-AF)/(BD-aE)", "\n    ", "return", " ", "0", ";\n}\n\n", "\n", "我尝试了重新写一个简单的，结果成功了，但这个不知道哪里错", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<stdlib.h>", "\n", "int", " ", "main", "()", "\n", "{\n     ", "char", " b[", "18", "];\n     ", "int", " num;\n     ", "scanf", "(", "\"%s\"", ",b);", "//对char型数组进行赋值 如：123456789", "\n     num = ", "atoi", "(b);\n     ", "printf", "(", "\"%d\"", ",num);\n     ", "int", " C = num + ", "10", ";\n     ", "printf", "(", "\"%d\"", ",C);\n     \n     \n    ", "return", " ", "0", ";\n } \n\n", "\n", "\n", "请教大家了，还有这个系数为1又怎么检测，做了好长时间了"]], "Tag": "算法设计"}
{"Answer": "http://hi.baidu.com/youshizhihu/blog/item/de40658d95dfae10b31bba8a.html\r\n这个很详细", "Konwledge_Point": "算法与数字", "Question": ["关于RSA 密钥文件结构的问题", ["最近在做一个小项目，其中的数字签名部分采用RSA算法，但有一个要求是要使用指定的密钥对，从网上找了些代码，都是自己用KeyPairGenerator生成密钥对，然手再使用，代码如下：", "\n\n", "KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(\"RSA\");", "\nkeyPairGen.initialize(512);", "\nKeyPair keyPair = keyPairGen.generateKeyPair();", "\nRSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();", "\nRSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();", "\n\n", "请问各位大侠，如何使用指定的密钥对来生成RSAPrivateKey 和 RSAPublicKey呢？，或者不采用以上该类，有其他的解决办法没？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1.continue之前不要执行&amp;#43;&amp;#43;操作&amp;#xff0c;这里不仅是第3层有问题&amp;#xff0c;第2层也是错的&lt;br /&gt;2.如果不是要求你输出所有组合&amp;#xff0c;而只是问组合数&amp;#xff0c;直接套用排列组合公式就行了&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["无重复组合（Java）", ["题目：使用for循环，在控制台输出由4.5.6.7能组成多少个互不相同且无重复数字的三位数？都是多少？", "\n", "以下仅主方法代码", "\n", "public", " ", "static", " ", "void", " main(String[] args) {\n        ", "// TODO 自动生成的方法存根", "\n        ", "int", " value;", "//计算互不相同且无重复数字的三位数的数量", "\n        value=", "4", "*", "3", "*", "2", ";\n        ", "int", " ", "sum", "=", "0", ";\n        System.out.println(", "\"能组成\"", "+value+", "\"个互不相同且无重复数字的三位数\"", ");\n        ", "for", "(", "int", " i=", "4", ";i<=", "7", ";i++)\n        {\n            ", "sum", "=i*", "100", ";\n            ", "for", "(", "int", " j=", "4", ";j<=", "7", ";j++)\n            {\n                ", "if", "(i==j)\n                {\n                    j++;\n                    ", "continue", " ;\n                }\n                ", "sum", "=", "sum", "+j*", "10", ";\n                ", "for", "(", "int", " k=", "4", ";k<=", "7", ";k++)\n                {\n                    ", "if", "(i==k||j==k)\n                    {\n                        k++;\n                        ", "continue", " ;\n                    }\n                    ", "sum", "=", "sum", "+k;\n                    System.out.println(", "sum", ");\n                }\n            }\n        }\n    }\n\n", "\n", "经过断点调试发现第三个for循环有问题，哪位能指出我的算法错误？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#include&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;std&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;gjd&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; a,&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; b&lt;/span&gt;)&lt;/span&gt;{ \n    &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; ans;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; la[&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;},lb[&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; lena&amp;#61;a.length(),lenb&amp;#61;b.length();\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;lena;i&amp;#43;&amp;#43;)la[lena&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;-i]&amp;#61;a[i]-&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;; \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;lenb;i&amp;#43;&amp;#43;)lb[lenb&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;-i]&amp;#61;b[i]-&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; max1&amp;#61;max(lena,lenb);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;max1;i&amp;#43;&amp;#43;)la[i]&amp;#43;&amp;#61;lb[i],la[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#43;&amp;#61;la[i]/&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,la[i]%&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; \n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(la[max1])max1&amp;#43;&amp;#43;; &lt;span class=\"hljs-comment\"&gt;//判断高位是否还有;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;max1&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i--)ans&amp;#43;&amp;#61;la[i]&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ans;\n}\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;1001&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;1&amp;#34;&lt;/span&gt;}; &lt;span class=\"hljs-comment\"&gt;//预处理前两位&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n,m;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;/span&gt;)&lt;/span&gt;{\n    cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; ans&amp;#61;m-n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;i&amp;lt;&amp;#61;ans;i&amp;#43;&amp;#43;){\n        a[i]&amp;#61;gjd(a[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;],a[i&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;]); &lt;span class=\"hljs-comment\"&gt;//进行高精加&lt;/span&gt;\n    }\n    cout&amp;lt;&amp;lt;a[ans];\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["一只蜜蜂在下图所示的数字蜂房上爬动,已知它只能从标号小的蜂房爬到标号大的相邻蜂房,现在问你：蜜蜂从蜂房M开始爬到蜂房N，M<N，有多少种爬行路线？(语言-c++)", ["高精度求和函数已经写好了，就不知道下面怎么办了。", "\n", "void ", "add", "(", "int", " a[],", "int", " b[],", "int", " c[],", "int", " ", "al", ",", "int", " ", "bl", ",", "int", " &", "cl", ") {\n    memset(c,", "0", ",sizeof(c))", ";", "\n    ", "cl", "=max(", "al", ",", "bl", ")", ";", "\n    for(", "int", " i=", "0", "; i<cl; i++) {", "\n        c[i]+=a[i]+b[i]", ";", "\n        if(c[i]>=", "10", ") {\n            ++c[i+", "1", "]", ";", "\n            c[i]-=", "10", ";", "\n        }\n        if(c[", "cl", "])\n            ++", "cl", ";", "\n    }\n}\n\n", "\n", "求下面的代码"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我觉得问题在于&amp;#xff1a;&lt;strong&gt;当收到的数据为0的时候&amp;#xff0c;则中断接收。&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;同一太机器上传输速度不是问题。不同机器&amp;#xff0c;数据量大的时候&amp;#xff0c;传输速度慢。服务端很又可能刚接受一帧数据马上再接受时还没有数据过来&amp;#xff0c;返回0了。应该以别的方式结束接受。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["求助 python json服务端与客户端之间传送出错", ["我在一台电脑上运行服务端和客户端，成功。但把客户端放到另外一台电脑上的安卓模拟器里，就出错。我传送的只是一些文字和数字而已，没有特殊字符。", "\n\n", "我把服务端根据算法生成的文件变成JSON文件，切成1024大小，分多次发送。", "\n\n", "当8次发送的时候（一个小点的数据流），完全正常。当13次发送的时候（另外一个大一点的数据流），就出现故障了。", "\n\n", "adb现在乱码，看不到接收到的JSON是怎样的，但根据没乱码之前的经验，应该是不完整的。", "\n\n", "我在接收recv这块，做的是while循环，当收到的数据为0的时候，则中断接收。我设定的是recv（20480），正常的那个是接收了2次（服务端发送了8次 1024），有故障的那个是接收了3次（服务端发送了13次1024）。我在客户端设置了 RECV_BUF_SIZE = 204800。", "\n\n", "没有做切片发送的时候，做了尾标识方法的接收方法，但也不好使。", "\n\n", "请问这是什么问题，该如何解决？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;给个例子参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;n &amp;#61; &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;请输入一个正整数&amp;#xff1a;&amp;#39;&lt;/span&gt;))\n&lt;span class=\"hljs-keyword\"&gt;loop&lt;/span&gt; &amp;#61; True\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#39;{n}&amp;#61;&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;loop&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in range(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n%i&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n            n &amp;#61; n&lt;span class=\"hljs-comment\"&gt;//i&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n                &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(i)\n                &lt;span class=\"hljs-keyword\"&gt;loop&lt;/span&gt; &amp;#61; False\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n                &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(i,&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/156527002056141.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;如有帮助&amp;#xff0c;请采纳&amp;#xff01;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["python编写程序读取一个大于1的正整数，然后显示它所有的最小因子，也称之为素因子 | 最后格式不知道如何体现", ["编写程序读取一个大于1的正整数，然后显示它所有的最小因子，也称之为素因子", "例如：输入整数为90，输出90=2", "3", "3*5", "\n", "问题相关代码", "\n", "n = int(input('请输入一个正整数：'))", "i = 2", "while True:", "    if n % i == 0:", "        print('%d=' % n, i)", "        n = n / i", "    else:", "        i += 1", "    if n == 1:", "        break", "\n", "运行结果及报错内容", "\n", "得出来的因子好像都是对的，但是输出来的格式不是例子那样，不知道应该怎么输代码"]], "Tag": "算法设计"}
{"Answer": "for (int i = 1; i &lt;=100; i++) {\r\n    int num3 = i % 3;\r\n    int num5 = i %5;\r\n    if (num3 + num5 == 0) {\r\n    } else if (num5 == 0) {\r\n    } else if (num3 == 0) {\r\n    }\r\n}", "Konwledge_Point": "算法与数字", "Question": ["实现打印1至100。", ["实现打印1到100，遇到数字为3的倍数时打印“three”,5的倍数打印“five\",既是3的倍数又是5的倍数打印”three_five“;", "\n[code=\"java\"]", "\n    public static void main(String[] args) {", "\n        for(int i=1; i< 101;i++){", "\n\n", "        if(i % 3 == 0 ){\n            if( i % 5 == 0 ){\n                System.out.println(\"three&five's mulriple\");\n                continue;\n            }\n            System.out.println(\"three's mulriple\");\n            continue;\n\n        }\n        if(i% 5 == 0){\n            System.out.println(\"five's mulriple\");\n            continue;\n        }\n        System.out.println(i);\n    }\n}\n", "\n\n", "[/code]", "\n有没有更好的算法或思路。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;sort,reverse前要有一个对象&amp;#xff0c;应该是vecDouble,即vecDouble.sort和vecDouble.reverse&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["编译器报错，求解决办法，", ["\n", "\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "<vector>", "\n", "#", "include", " ", "<algorithm>", "//算法", "\n", "using", " ", "namespace", " std;\n", "int", " ", "main", "()", "\n", "{\n    vector<", "double", ">vecDouble = { ", "98.5", ",", "67.9", ",", "43.6", ",", "32.9", " };\n    ", "//向数组中插入数组", "\n    vecDouble.", "push_back", "(", "100.8", ");", "//在数组的尾部插入一个数字", "\n    ", "//遍历", "\n    ", "for", " (", "int", " i = ", "0", "; i < vecDouble.", "size", "(); i++) {\n        cout << vecDouble[i] << endl;\n    }\n    ", "//集合的通用遍历方法：使用迭代器 iterator", "\n    ", "//以下是迭代器的基本用法", "\n    vector<", "double", ">::iterator it;", "//得到迭代器对象:实际上是一个指针对象", "\n    ", "//从第一个元素开始迭代", "\n    ", "//排序", "\n    ", "sort", "(vecDouble.begin, vecDouble.", "end", "());\n    ", "reverse", "(vecDouble.begin, vecDouble.", "end", "());\n\n    ", "for", " (it = vecDouble.", "begin", "(); it != vecDouble.", "end", "(); ++it)\n    {\n        cout << *it << endl;\n    }\n    \n\n\n\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\nresult_list &amp;#61; []\n\n\n&lt;span class=\"hljs-comment\"&gt;# 调节子树为小根堆,从1开始为有效位&amp;#xff0c;0是临时作用&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;HeapAdjust&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;item_list: &lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;, k: &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;, length: &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&lt;/span&gt;):\n    item_list[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; item_list[k]\n    i &amp;#61; k * &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; i &amp;lt;&amp;#61; length:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &amp;lt; length &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; item_list[i] &amp;gt; item_list[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]:  &lt;span class=\"hljs-comment\"&gt;# 找儿子中小的&lt;/span&gt;\n            i &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; item_list[i] &amp;gt;&amp;#61; item_list[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]:\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            result_list.append(&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(k - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\n            item_list[k] &amp;#61; item_list[i]\n            k &amp;#61; i\n        i *&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n    item_list[k] &amp;#61; item_list[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; item_list\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;BuildMinHeap&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;item_list: &lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;&lt;/span&gt;):\n    length &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(item_list) - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(length / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;), &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        item_list &amp;#61; HeapAdjust(item_list, i, length)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; item_list\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;HeapSort&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;item_list: &lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;&lt;/span&gt;):\n    item_list &amp;#61; BuildMinHeap(item_list)\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34; # 如果要真的堆排序形成大根堆&amp;#xff0c;下面的就不要注释\n    length &amp;#61; len(item_list) - 1\n    for i in range(length, 1, -1):\n        item_list[1], item_list[i] &amp;#61; item_list[i], item_list[1]\n        item_list &amp;#61; HeapAdjust(item_list, 1, i - 1)\n    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; item_list\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;main&lt;/span&gt;():\n    item_list &amp;#61; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n    _ &amp;#61; &lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;())\n    num_str &amp;#61; &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;()\n    num_str_list &amp;#61; num_str.strip().split()\n    num_str_list &amp;#61; [&lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;(item) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; item &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; num_str_list]\n    item_list.extend(num_str_list)\n    HeapSort(item_list)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(result_list))\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; item &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; result_list:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(item)\n\n\nmain()\n\n&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n6\n0 1 2 3 4 5\n6\n7 6 5 4 3 2\n&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["用Python，计算输入特定数列之后，输出构建最小堆需要交换的两个数和交换的次数", ["问题遇到的现象和发生背景", "\n", "构建堆是堆排序算法的关键步骤。该算法在最坏情况下的运行时间为 O(n log n)将数组转化为堆，需要对其元素进行多次交换。我们将交换称为交换元素 A[i] 和 A[j] 的基本操作。你在这个任务中的目标是将一个给定的数组转换成一个线性数量的交换的堆", "######数据输入输出例子解释", "输入第一行包含数字 n。下一行指定了一个数字数组 A[0], …… , A[n − 1] (1< n< 10^5; 0< A[i]< 10^9 for all 0< i< n - 1 ;所有A[i]都是成对不同的；i≠qj).输出输出的第一行必须包含交换次数m，必须满足不等式0 < m < 4 n。以下 m 行中的每一行都应指定数组 A 的两个元素的交换。每个交换由一对不同的索引 0< i≠qj< n - 1 定义，其中一个等式 j = 2i + 1, j = 2i + 2, i = 2j + 1 or i = 2j + 2 都满足了。按照指定的顺序应用所有的交换后，数组应该变成一个最小堆，即所有的都必须满足以下两个条件0< i< n -1", "如果 2i + 1< n − 1，则 A[i] < A[2i + 1]。", "如果 2i + 2< n − 1，则 A[i] < A[2i + 2]。", "\n", "问题相关例子", "\n", "1.输入", "6", "0 1 2 3 4 5", "输出", "0", "2.输入", "6", "7 6 5 4 3 2", "输出", "4", "2 5", "1 4", "0 2", "2 5", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "用Python，计算输入特定数列之后，输出构建最小堆需要交换的两个数和交换的次数"]], "Tag": "算法设计"}
{"Answer": "算法问题\r\n1.第一个return最后才会调用 由于if条件限制调用完后也不会进入递归 详细请看算法\r\n2.第二个return是函数最后 且函数为void 加不加都一样", "Konwledge_Point": "算法与数字", "Question": ["c语言递归调用中要不要return结果都一样", ["以下来自啊哈算法这本书，用于输出数字全排列，发现注释掉的return属于多余。这是怎么回事啊？？？", "\n#include ", "\nint a[10],book[10],n;", "\nvoid dfs(int step)", "\n{", "\n    int i,j;", "\n    if (step == n+1)", "\n    {", "\n        for ( i = 1; i<=n; i++ )", "\n            printf(\"%d\",a[i]);", "\n     //return;", "\n    }", "\n   for (i = 1; i<=n; i++) ", "\n   { ", "\n        if (book[i]==0)", "\n        {", "\n                a[step]=i;", "\n            book[i]=1;", "\n            dfs(step+1);", "\n\n", "        book[i]=0;\n    }\n", "\n\n", "}", "\n     //return;", "\n}", "\n\n", "int main()", "\n{", "\n    scanf(\"%d\",&n);", "\n    dfs(1);", "\n    getchar();", "\n    getchar();", "\n    return 0;", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;while后面多了一个分号&amp;#xff0c;需要把它删了&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/553116843256116.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;存到字符串数组时&amp;#xff0c;要加上&amp;#39;0&amp;#39;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/601017843256165.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;临时变量应该是char类型&amp;#xff0c;而不是char*类型&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/88874694325610.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;完整代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-comment\"&gt;/*&amp;#xff08;3&amp;#xff09;数字字符与整数转换算法&amp;#xff1a;将字符串“#b78c15fk23d*”中整型数据提取出来&amp;#xff0c;合成一个整型数781523并输出来。再将781523整数的各个数位数字拆开存放到一维数组int b[10]中&amp;#xff0c;将一维数组中的元素转换为字符数组s[100]中&amp;#xff0c;输出该数字字符串“325187”。*/&lt;/span&gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;iostream&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;&amp;gt;\nusing namespace std;\nvoid show&lt;span class=\"hljs-constructor\"&gt;_string(&lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;t&lt;/span&gt;[200])&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//输出字符串&lt;/span&gt;\n{\n    cout &amp;lt;&amp;lt; t &amp;lt;&amp;lt; endl;\n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; tiqu(&lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; t&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;]&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; len)\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; len; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (t&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;gt;&amp;#61; &lt;span class=\"hljs-character\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;t&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;lt; &lt;span class=\"hljs-character\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;)\n        {\n            j &amp;#61; j&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; t&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; - &lt;span class=\"hljs-character\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n        }\n    }\n    return j;\n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; store&lt;span class=\"hljs-constructor\"&gt;_int(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;z&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;o&lt;/span&gt;[10])&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; m &amp;#61; z;&lt;span class=\"hljs-comment\"&gt;//防止z数据丢失&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//记录m的位数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (m) { m /&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; n&amp;#43;&amp;#43;; }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--)\n    {\n\n        o&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; z % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        z &amp;#61; z&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    }\n    return n;\n}\nvoid show&lt;span class=\"hljs-constructor\"&gt;_int(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;q&lt;/span&gt;[], &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; len; i&amp;#43;&amp;#43;)\n    {\n        cout &amp;lt;&amp;lt; q&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;;\n    }\n    cout &amp;lt;&amp;lt; endl;\n}\nvoid store&lt;span class=\"hljs-constructor\"&gt;_string(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;t&lt;/span&gt;[10], &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;[100])&lt;/span&gt;\n{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; len; i&amp;#43;&amp;#43;)\n    {\n        s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; (&lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt;)t&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-character\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//将t中元素储存到s中&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt;* p1 &amp;#61; &amp;amp;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//z指向s[0]的位置&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt;* p2 &amp;#61; &amp;amp;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;len&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//z指向s[len-1]的位置&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p1 &amp;lt; p2)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; t &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        t &amp;#61; *p1;\n        *p1 &amp;#61; *p2;\n        *p2 &amp;#61; t;\n        p1&amp;#43;&amp;#43;;\n        p2--;\n    }\n    cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; endl;\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; d&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;]&lt;/span&gt; &amp;#61; { &lt;span class=\"hljs-string\"&gt;&amp;#34;#78c15fk23d&amp;#34;&lt;/span&gt; };\n    show&lt;span class=\"hljs-constructor\"&gt;_string(&lt;span class=\"hljs-params\"&gt;d&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; strlen(d);&lt;span class=\"hljs-comment\"&gt;//计算字符串长度&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k &amp;#61; tiqu(d, j);&lt;span class=\"hljs-comment\"&gt;//提取出781523&lt;/span&gt;\n    cout &amp;lt;&amp;lt; k &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; b&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; c &amp;#61; store&lt;span class=\"hljs-constructor\"&gt;_int(&lt;span class=\"hljs-params\"&gt;k&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;b&lt;/span&gt;)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//返回k的位数&lt;/span&gt;\n    show&lt;span class=\"hljs-constructor\"&gt;_int(&lt;span class=\"hljs-params\"&gt;b&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;c&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;]&lt;/span&gt; &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; };\n    store&lt;span class=\"hljs-constructor\"&gt;_string(&lt;span class=\"hljs-params\"&gt;b&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;c&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;)&lt;/span&gt;;\n    show&lt;span class=\"hljs-constructor\"&gt;_string(&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;)&lt;/span&gt;;\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["达不到第三个效果，问题在哪，325187没有输出", ["\n", "\n", "/*（3）数字字符与整数转换算法：将字符串“#b78c15fk23d*”中整型数据提取出来，合成一个整型数781523并输出来。再将781523整数的各个数位数字拆开存放到一维数组int b[10]中，将一维数组中的元素转换为字符数组s[100]中，输出该数字字符串“325187”。*/", "\n#", "include", " <iostream>\n#", "include", " <", "string", ">\nusing namespace std;\nvoid show", "_string(", "char", " ", "t", "[200])", "//输出字符串", "\n{\n    cout << t << endl;\n}\n", "int", " tiqu(", "char", " t", "[", "200", "]", ", ", "int", " len)\n{\n    ", "int", " j = ", "0", ";\n    ", "for", " (", "int", " i = ", "0", "; i < len; i++)\n    {\n        ", "if", " (t", "[", "i", "]", " >= ", "'0'", " && ", "t", "[", "i", "]", " < ", "'9'", ")\n        {\n            j = j", " * ", "10", " + t", "[", "i", "]", " - ", "'0'", ";\n        }\n    }\n    return j;\n}\n", "int", " store", "_int(", "int", " ", "z", ",", "int", " ", "o", "[10])", "\n{\n    ", "int", " m = z;", "//防止z数据丢失", "\n    ", "int", " n = ", "0", ";", "//记录m的位数", "\n    ", "while", " (m) { m /= ", "10", "; n++; }\n    ", "for", " (", "int", " i = n-", "1", "; i >=", "0", "; i--)\n    {\n        \n        o", "[", "i", "]", " = z%", "10", ";\n        z = z", " / ", "10", ";\n    }\n    return n;\n}\nvoid show", "_int(", "int", " ", "q", "[],", "int", " ", "len", ")", "\n{\n    ", "for", " (", "int", " i = ", "0", "; i < len; i++)\n    {\n        cout << q", "[", "i", "]", ";\n    }\n}\nvoid store", "_string(", "int", " ", "t", "[10],", "int", " ", "len", ", ", "char", " ", "s", "[100])", "\n{\n    ", "for", " (", "int", " i = ", "0", "; i < len; i++)\n    {\n        s", "[", "i", "]", " = (", "char", ")t", "[", "i", "]", ";", "//将t中元素储存到s中", "\n    }\n    ", "char", "* p1 = &s", "[", "0", "]", ";", "//z指向s[0]的位置", "\n    ", "char", "* p2 = &s", "[", "len", "-", "1", "]", ";", "//z指向s[len-1]的位置", "\n    ", "while", " (p1 < p2);\n    {\n        ", "char", " *t = ", "0", ";\n        *t = *p1;\n        *p1 = *p2;\n        *p2 = *t;\n        p1++;\n        p2--;\n    }\n    cout << s;\n}\n\n", "int", " main", "()", "\n{\n    ", "char", " d", "[", "200", "]", " = { ", "\"#78c15fk23d\"", " };\n    show", "_string(", "d", ")", ";\n    ", "int", " j = strlen(d);", "//计算字符串长度", "\n    ", "int", " k = tiqu(d, j);", "//提取出781523", "\n    cout << k << endl;\n    ", "int", " b", "[", "10", "]", ";\n    ", "int", " c=store", "_int(", "k", ", ", "b", ")", ";", "//返回k的位数", "\n    show", "_int(", "b", ",", "c", ")", ";\n    ", "char", " s", "[", "100", "]", ";\n    store", "_string(", "b", ", ", "c", ", ", "s", ")", ";\n    show", "_string(", "s", ")", ";\n    return ", "0", ";\n"]], "Tag": "算法设计"}
{"Answer": "（容斥原理）  最好画一个圈圈图更加直观。对于抽象能力差的人比较好！", "Konwledge_Point": "算法与数字", "Question": ["又来数学题了。。。请教简单做法", ["对某单位的100名员工进行调查，结果发现他们喜欢看球赛和电影、戏剧。", "其中58人喜欢看球赛，38人喜欢看戏剧，52人喜欢看电影，", "既喜欢看球赛又喜欢看戏剧的有18人，既喜欢看电影又喜欢看戏剧的有16人，", "三种都喜欢看的有12人，", "则只喜欢看电影的有（）", "A。22人 B。28人 C。30人 D。36人", "答案是：A。22人", "我想知道这种题的简单算法。", "因贱内对数字方面很弱，所以在这向大家请教了，谢谢各位高手啦。", "ps：求 救 怎么不能用呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;遍历字符串&amp;#xff0c;删除多余空格、数字和特殊字符&amp;#xff0c;将大写字母转为小写&amp;#xff0c;即可。&lt;br /&gt;运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/204389469476146.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-comment\"&gt;//判断字符是否是小写字母&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;islower&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-comment\"&gt;//判断是否是大写字母&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;isupper&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//判断是否是字母&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;isCharacter&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;islower&lt;/span&gt;(c) || &lt;span class=\"hljs-built_in\"&gt;isupper&lt;/span&gt;(c))\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;100005&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; };\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; shift &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (cin.&lt;span class=\"hljs-built_in\"&gt;getline&lt;/span&gt;(a &amp;#43; shift, &lt;span class=\"hljs-number\"&gt;100005&lt;/span&gt; - shift) )\n    {\n        shift &amp;#61; &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(a);\n        a[shift] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//每行后面加一个空格&lt;/span&gt;\n        shift&amp;#43;&amp;#43;; \n    }\n    &lt;span class=\"hljs-comment\"&gt;//删除最后添加的空格&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (shift&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; a[shift - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n    {\n        a[shift - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        shift--;\n    }\n    &lt;span class=\"hljs-comment\"&gt;//遍历数组&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;isCharacter&lt;/span&gt;(a[i]) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-comment\"&gt;//过滤非字母&lt;/span&gt;\n        i&amp;#43;&amp;#43;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (a[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;islower&lt;/span&gt;(a[i]))\n            a[j&amp;#43;&amp;#43;] &amp;#61; a[i];\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;isupper&lt;/span&gt;(a[i])) &lt;span class=\"hljs-comment\"&gt;//大写转小写&lt;/span&gt;\n            a[j&amp;#43;&amp;#43;] &amp;#61; a[i] &amp;#43; &lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-comment\"&gt;//如果是空格&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (j &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; a[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//前一个字符不是空格&lt;/span&gt;\n                a[j&amp;#43;&amp;#43;] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\r&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//回车符&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (j &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;islower&lt;/span&gt;(a[j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]))\n                a[j&amp;#43;&amp;#43;] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n        }\n        i&amp;#43;&amp;#43;;\n    }\n    a[j] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    cout &amp;lt;&amp;lt; a;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["C++算法题求解（字符串）", ["题目描述", "芭芭拉是西风教会的祈礼牧师，同时也是蒙德城的闪耀偶像。", "\n", "只要看到芭芭拉，心情就能变好。——蒙德城里流传着这样的说法。", "\n", "人们接受芭芭拉的歌声，逐渐被她的活力感染。", "\n", "和往常一样，芭芭拉即将登台表演，可她却突然发现自己的歌谱出现了问题，为了正常完成演出，请你能帮她复原歌谱。", "\n", "具体的，芭芭拉的歌谱被表示成一个字符串，这个字符串在标准的情况下仅由小写字 母和空格组成，并且连续的空格最多只能有一个。当前的歌谱由于某些原因，还含有 一些数字和大写字母，并且可能有多个连续空格和换行，所以当前的歌谱不标准。", "\n", "你需要将其还原成标准歌谱，形式化的，标准歌谱仅有小写字母和空格组成，开头不 包含空格，单词和单词之间由一个空格分开。", "\n", "注意换行符在 Windows 下为 \\r\\n 而不是\\n。", "\n", "输入格式", "若干行字符串", "\n", "输出格式", "一行字符串，表示标准歌谱", "\n", "样例", "【样例 1 输入】", "Cor5ru2pt1 2 3 BinAry", "codEs inFecting My", "mInd", "【样例 1 输出】", "corrupt binary codes infecting my mind", "数据范围与提示", "特殊性质 A:不存在大写字母", "特殊性质 B:不存在数字", "特殊性质 C:不存在连续空格", "最大长度为10^5.", "\n", "希望给出代码！"]], "Tag": "算法设计"}
{"Answer": "1、2G\r\n2、一种最土的办法\r\n\r\n        int index = 0;\r\n        Map&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;();\r\n        for (int i = 1; i &lt;= 11; i++)\r\n        {\r\n            for (int j = i + 1; j &lt;= 12; j++)\r\n            {\r\n                for (int k = j + 1; k &lt;= 13; k++)\r\n                {\r\n                    for (int l = k + 1; l &lt;= 14; l++)\r\n                    {\r\n                        for (int m = l + 1; m &lt;= 15; m++)\r\n                        {\r\n                            map.put(\"\" + i + j + k + l + m, ++index);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }", "Konwledge_Point": "算法与数字", "Question": ["高级人员问卷　求解答", ["１，32位WIN平台,JDK１.６，在上述环境下一个JVM实际最多可利多少内存", "２，１５选５是一种数字彩票游戏，即从１５个数字中随便选择不重复的５个数字组成一注彩票号码进行投注。一共３００３注号码，从最小的一注号码到最大的一注号码依次是：", "序号　　彩票号码", "1          01 02 03 04 05", "2          01 02 03 04 06", "           ······", "10        01 02 03 04 14", "11        01 02 03 04 15", "12        01 02 03 05 06", "           ······", "3003    11 12 13 14 15", "求算法:给出任意一注号码,求出序号.例输入\"01 02 03 05 06\"号码,输出数字１２", "问题补充", "高手      求解答！！！！！！！！！！！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;val.end()超出了vector的范围&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["c++排大小，容器中传入数据", ["我的目的是输入任意多的数字，然后通过排序算法，最后输出最大的值", "目前搞不懂要怎么才可以向一个容器中无限的放入数据，这个程序运行会崩溃", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<algorithm>", "\n", "#", "include", "<vector>", "\n", "using", " ", "namespace", " std;\n", "void", " ", "test", "()", "\n", "{\n    vector<", "int", ">val;\n    val.", "resize", "(", "1000", ");\n    ", "int", " put;\n    ", "while", " (cin >> put)\n    {\n        val.", "push_back", "(put);\n    }\n    ", "sort", "(val.", "begin", "(), val.", "end", "());\n    cout << *val.", "end", "() << endl;\n}\n", "int", " ", "main", "()", "\n", "{\n    ", "test", "();\n    ", "system", "(", "\"pause\"", ");\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我想到可以用导数的方法把差值拉大&amp;#xff0c;然后可以划分&lt;br /&gt;2种方法如下&amp;#xff0c;一阶和二阶导数&amp;#xff08;这也就要求至少有2个以上的数&amp;#xff09;&lt;br /&gt;想法&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&amp;#34;&amp;#34;&amp;#34;\n# 一、示例&amp;#xff1a;原始数据\nnum_list &amp;#61; [393, 393, 394, 394, 394, 423, 424, 424, 425, 425, 454, 454, 454, 454, 456]\n\n# 二、示例&amp;#xff1a;分组结果\npart_1 &amp;#61; [393, 393, 394, 394, 394]\npart_2 &amp;#61; [423, 424, 424, 425, 425]\npart_3 &amp;#61; [454, 454, 454, 454, 456]\n\n依次顺序&amp;#xff1a;原来式子&amp;#xff1a;&amp;#xff0c;一阶导数&amp;#xff0c;二阶导数&amp;#xff0c;正则化二阶导数再提取变化最大特征的二阶导数&amp;#xff0c;还原一阶导数\n[393, 393, 394, 394, 394, 423, 424, 424, 425, 425, 454, 454, 454, 454, 456]\n    [0, &lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;,   0,   0,   &lt;span class=\"hljs-string\"&gt;-29&lt;/span&gt;,  &lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;,  0,  &lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;,  0,  &lt;span class=\"hljs-string\"&gt;-29&lt;/span&gt;,   0,  0,    0,  &lt;span class=\"hljs-string\"&gt;-2&lt;/span&gt;]    \n      [1,  &lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;,  0,  29,   &lt;span class=\"hljs-string\"&gt;-28&lt;/span&gt;,  &lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;,  1,  &lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;,  29,  &lt;span class=\"hljs-string\"&gt;-29&lt;/span&gt;, 0, 0, 2]\n      [0,  0,   0,   1,    1,    0,   0,   0,   1,  1,  0,  0, 0]\n    [0,  0,   0,   0,   1,     0,    0,    0,  0,   1,  0,  0, 0,  0]  \n [0&amp;#xff0c; 0,   0,   0,   0,    1,     0,    0,   0,  0,   1,  0,  0, 0, 0]  这个可以代表分界线  \n&amp;#34;&amp;#34;&amp;#34;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1 id=\"一阶导数\"&gt;一阶导数&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\nnum_list &amp;#61; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;394&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;454&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;456&lt;/span&gt;]  # &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;个起步\n# 前向递推法\nfirstD &amp;#61; [num_list[i] - num_list[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(num_list) - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)]  # 一阶导数\ntmpFirstD &amp;#61; [&lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(item) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; item in firstD]\n\nminValue &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(tmpFirstD)\nmaxValue &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(tmpFirstD)\nnewFirstD &amp;#61; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#43; [&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;round&lt;/span&gt;((item - minValue) / (maxValue - minValue))) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; item in tmpFirstD] \nnewFirstDLen &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(newFirstD)\n# 一阶 &amp;#61;》 原式\n&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &amp;#61; []\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(newFirstDLen):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;([num_list[i]])\n    elif newFirstD[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;[&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;) - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(num_list[i])\n    elif newFirstD[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;([num_list[i]])\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;二阶求导&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;num_list &amp;#61; [&lt;span class=\"hljs-number\"&gt;393&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;393&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;394&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;394&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;394&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;423&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;424&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;424&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;425&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;425&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;454&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;454&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;454&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;454&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;456&lt;/span&gt;]  # &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;个起步\nfirstD &amp;#61; [num_list[i] - num_list[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(num_list) - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)]  # 一阶导数\ntmpFirstD &amp;#61; [&lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(item) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; item in firstD]\n\nsecondD &amp;#61; [firstD[i] - firstD[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(firstD) - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)]  # 二阶导数\ntmpSecondD &amp;#61; [&lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(item) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; item in secondD]\n\n\nminValue &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(tmpSecondD)\nmaxValue &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(tmpSecondD)\ntmpSecondD &amp;#61; [&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;round&lt;/span&gt;((item - minValue) / (maxValue - minValue))) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; item in tmpSecondD]\ntmpSecondDLen &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(tmpSecondD)\n\n# 二阶 &amp;#61;》 一阶\ni &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; i &amp;lt; tmpSecondDLen:\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; tmpSecondD[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;and&lt;/span&gt; i &amp;lt; tmpSecondDLen - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;and&lt;/span&gt; tmpSecondD[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        tmpSecondD[i] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n        i &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        i &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n\nnewFirstD &amp;#61; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#43; tmpSecondD &amp;#43; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]  \nnewFirstDLen &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(newFirstD)\n\n# 一阶 &amp;#61;》 原式\n&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &amp;#61; []\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(newFirstDLen):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;([num_list[i]])\n    elif newFirstD[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;[&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;) - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(num_list[i])\n    elif newFirstD[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;([num_list[i]])\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/846434296336142.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;其他案例&amp;#xff1a;&lt;br /&gt;如果个数不多就用1阶&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/849210886336131.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/177975296336140.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/995607296336118.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["【python】给定数组，按相邻元素差额分组", ["\n", "# 一、示例：原始数据", "\n", "num_list", " = [", "393", ", ", "393", ", ", "394", ", ", "394", ", ", "394", ", ", "423", ", ", "424", ", ", "424", ", ", "425", ", ", "425", ", ", "454", ", ", "454", ", ", "454", ", ", "454", ", ", "456", "]\n\n\n", "# 二、示例：分组结果", "\n", "part_1", " = [", "393", ", ", "393", ", ", "394", ", ", "394", ", ", "394", "]\n", "part_2", " = [", "423", ", ", "424", ", ", "424", ", ", "425", ", ", "425", "]\n", "part_3", " = [", "454", ", ", "454", ", ", "454", ", ", "454", ", ", "456", "]\n\n\n", "# 三、数组说明", "\n", "# 1、确定的事项", "\n", "#   1-1 给定的列表，已按由小到大排列好；", "\n", "#   1-2【同组相邻数字的差额】一定明显大于【两组间相领数字的差额】。以上述案例为例：【同组相邻数字的差额】小于3，【两组间相领数字的差额】远大于3;", "\n", "# 2、不确定事项", "\n", "#   2-1 列表元素总个数不确定；", "\n", "#   2-2 可拆分成几组不确定；可能拆分成4-5组", "\n", "#   2-3 每组元素的个数不确定；可能是案例中的5个，也可能是8-10个", "\n", "#   2-4 【同组相邻数字的差额】不一定小于3，比如可能出现[1,5,7,21,25,29]这种场景", "\n\n\n", "# 请问如何使用python实现，或提供拆分思路也可以，谢谢", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;使用一个while循环把scanf()读取后遗留在缓冲区的其他字符读走即可&amp;#xff0c;修改如下:&lt;br /&gt;&lt;br /&gt;参考链接&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/haoshaokang_/article/details/121593252\" id=\"textarea_1674798178321_1674798356545_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1 md_link_url\"&gt;\n         https://blog.csdn.net/haoshaokang_/article/details/121593252\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt; \n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;stdlib.h&amp;#34;&lt;/span&gt;&lt;/span&gt;\n \n&lt;span class=\"hljs-keyword\"&gt;enum&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;color&lt;/span&gt; {red,yellow,green,};\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;f&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;enum&lt;/span&gt; color c)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, c);\n}\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;enum&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;color&lt;/span&gt; t &amp;#61; red;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    \n    &lt;span class=\"hljs-comment\"&gt;/* recont: */&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;( !(&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;t)) || (t &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || t&amp;gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; ) ){\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入错误&amp;#xff0c;必须输入数字0 &amp;lt;&amp;#61; x &amp;lt;&amp;#61; 2\\n\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-comment\"&gt;// https://blog.csdn.net/haoshaokang_/article/details/121593252&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;getchar&lt;/span&gt;()!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-comment\"&gt;// 把scanf()读取后遗留在缓冲区的其他字符读走即可&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n         \n    }\n    &lt;span class=\"hljs-built_in\"&gt;f&lt;/span&gt;(t);\n    &lt;span class=\"hljs-comment\"&gt;/*     //是否继续\n    printf(&amp;#34;输入1继续:&amp;#34;);\n    scanf(&amp;#34;%d&amp;#34;, &amp;amp;i);\n    if (i &amp;#61;&amp;#61; 1){\n        goto recont;\n    } */&lt;/span&gt;\n \n    &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/569741897476198.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["有关于scanf防止错误输入的值。", ["一个我不太能理解的地方：我的程序以下：", "\n", "\n", "#", "include", " ", "\"stdio.h\"", "\n", "#", "include", " ", "\"stdlib.h\"", "\n\n", "enum", " ", "color", " {red,yellow,green,};\n", "void", " ", "f", "(", "enum", " color c)", "{\n    ", "printf", "(", "\"%d\\n\"", ", c);\n}\n\n", "int", " ", "main", "()", "{\n    ", "enum", " ", "color", " t = red;\n    ", "int", " i;\n    \n    ", "/* recont: */", "\n    ", "while", "( !(", "scanf", "(", "\"%d\"", ", &t)) || (t < ", "0", " || t>", "2", " ) ){\n        ", "printf", "(", "\"输入错误，必须输入数字0 <= x <= 2\\n\\n\"", ");\n        ", "if", " ( !(", "scanf", "(", "\"%d\"", ", &t))){\n            ", "scanf", "(", "\"%*s\"", ");\n        }\n    }\n    ", "f", "(t);\n    ", "/*     //是否继续\n    printf(\"输入1继续:\");\n    scanf(\"%d\", &i);\n    if (i == 1){\n        goto recont;\n    } */", "\n\n    ", "system", "(", "\"pause\"", ");\n    ", "return", " ", "0", ";\n}\n", "\n", "为了防止输入超出预期的数字，我用", "\n", "  while( !(", "scanf", "(", "\"%d\"", ", ", "&t", ")) || (", "t", " < ", "0", " || ", "t", ">2 ) )\n\n", "\n", "来做这件事情，", "理论上来说无论输入什么，只要输入的不是0~2之间的某个整数，都会输出“输入错误，必须输入数字0 <= x <= 2\\n\\n”", "但是，很奇怪", "\n", "1111", "//", "输入\n输入错误，必须输入数字", "0", " <= x <= ", "2", "\n\n", "7979", "//", "输入\n", "32", "//", "输入\n输入错误，必须输入数字", "0", " <= x <= ", "2", "\n\nred", "//", "输入\n\n\nred", "//", "输入\n输入错误，必须输入数字", "0", " <= x <= ", "2", "\n\n", "1", "//", "输入\n", "1", "\n请按任意键继续. . .\n\n", "\n", "这就是问题，只要我上一个输入是数字，我就需要随便输入一个值才能输入下一个值，", "只有输入的是一个字符串的时候（“例如‘red‘’”），才能直接开始输入下一个值。", "如何解决这一问题呢，我想达到输入错误的值之后打印“输入错误，必须输入数字0 <= x <= 2\\n\\n”之后立马开始下一次输出而不是输入一个值给不知道什么地方才能开始下一次输出。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码没什么大问题&amp;#xff0c;改动处见注释&amp;#xff0c;完善如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; _CRT_SECURE_NO_WARNINGS 1&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; datatype;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;node&lt;/span&gt; {\n    datatype data;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;node&lt;/span&gt;* link;\n}node;\n\n&lt;span class=\"hljs-function\"&gt;node* &lt;span class=\"hljs-title\"&gt;BuySLTNode&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(datatype x)&lt;/span&gt;\n&lt;/span&gt;{\n    node* newnode &amp;#61; (node*)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(node));\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (newnode &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;perror&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;malloc fail&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;exit&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;);\n    }\n    newnode-&amp;gt;data &amp;#61; x;\n    newnode-&amp;gt;link &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; newnode;\n}\n\n&lt;span class=\"hljs-function\"&gt;node* &lt;span class=\"hljs-title\"&gt;CreateSList&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    datatype data;\n    node* phead &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;, * ptail &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;data); &lt;span class=\"hljs-comment\"&gt;//修改  &lt;/span&gt;\n        node* newnode &amp;#61; &lt;span class=\"hljs-built_in\"&gt;BuySLTNode&lt;/span&gt;(data);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (phead &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n            phead &amp;#61; newnode;&lt;span class=\"hljs-comment\"&gt;//修改 &lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            ptail-&amp;gt;link &amp;#61; newnode;\n        ptail &amp;#61; newnode;   &lt;span class=\"hljs-comment\"&gt;//修改 &lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((&lt;span class=\"hljs-built_in\"&gt;getchar&lt;/span&gt;()) &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;)  &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    } \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; phead;\n}\n\n&lt;span class=\"hljs-function\"&gt;node* &lt;span class=\"hljs-title\"&gt;Find_max&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* phead)&lt;/span&gt;   \n&lt;/span&gt;{\n    node* cur &amp;#61; phead;\n    node* Max &amp;#61; phead;\n    datatype max &amp;#61; cur-&amp;gt;data;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (cur)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (cur-&amp;gt;data &amp;gt; max)\n        {\n            max &amp;#61; cur-&amp;gt;data;\n            Max &amp;#61; cur;\n        }\n        cur &amp;#61; cur-&amp;gt;link;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; Max;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;SListErase&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node** pphead, node* pos)&lt;/span&gt; \n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;assert&lt;/span&gt;(pos);\n    &lt;span class=\"hljs-built_in\"&gt;assert&lt;/span&gt;(*pphead);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (pos &amp;#61;&amp;#61; *pphead)\n    {\n        node* next &amp;#61; (*pphead)-&amp;gt;link;\n        &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(*pphead);\n        *pphead &amp;#61; next;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        node* prev &amp;#61; *pphead;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (prev-&amp;gt;link !&amp;#61; pos)\n        {\n            prev &amp;#61; prev-&amp;gt;link;\n        }\n        prev-&amp;gt;link &amp;#61; pos-&amp;gt;link;\n        &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(pos);\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;SLTPushBack&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node** pphead, datatype x)&lt;/span&gt; \n&lt;/span&gt;{\n    node* newnode &amp;#61; &lt;span class=\"hljs-built_in\"&gt;BuySLTNode&lt;/span&gt;(x);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (*pphead &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n    {\n        *pphead &amp;#61; newnode;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        node* tail &amp;#61; *pphead;\n        &lt;span class=\"hljs-comment\"&gt;//找尾&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (tail-&amp;gt;link)\n        {\n            tail &amp;#61; tail-&amp;gt;link;\n        }\n        tail-&amp;gt;link &amp;#61; newnode;\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;SLTPrint&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* phead)&lt;/span&gt;\n&lt;/span&gt;{\n    node* cur &amp;#61; phead;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (cur)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, cur-&amp;gt;data); &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n        cur &amp;#61; cur-&amp;gt;link;\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    node* plist &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;   &lt;span class=\"hljs-comment\"&gt;//(node*)malloc(sizeof(node)); 修改&lt;/span&gt;\n    plist &amp;#61; &lt;span class=\"hljs-built_in\"&gt;CreateSList&lt;/span&gt;();\n    node* max &amp;#61; &lt;span class=\"hljs-built_in\"&gt;Find_max&lt;/span&gt;(plist);   \n    &lt;span class=\"hljs-built_in\"&gt;SLTPushBack&lt;/span&gt;(&amp;amp;plist, max-&amp;gt;data); &lt;span class=\"hljs-comment\"&gt;//修改 SLTPushBack(plist, max-&amp;gt;data);&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;SListErase&lt;/span&gt;(&amp;amp;plist, max);        &lt;span class=\"hljs-comment\"&gt;//修改 SListErase(plist, max);&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;SLTPrint&lt;/span&gt;(plist);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["C语言线性链表的结点移动", ["【问题描述】", "已知非空线性链表第1个链结点指针为list，链结点构造为", "\n", "struct ", "node", "{\n    datatype", " data;\n    ", "node", " ", "*link", ";\n};\n\n", "\n", "请写一算法，将该链表中数据域值最大的那个点移到链表的最后面。（假设链表中数据域值最大的链结点惟一）（注意：要求先写出算法的解题思路，然后再写出算法）", "【输入形式】", "输入为一个整数序列，整数之间以空格隔开，序列以回车结尾。", "【输出形式】", "输出为移动后的整数序列，整数之间以空格隔开，序列以回车结尾。", "【样例输入】", "3 12 4 9 5 1", "【样例输出】", "3 4 9 5 1 12", "【样例说明】", "将序列中最大的数字12移动到序列最后。", "\n", "我的思路：", "1.先遍历链表找出那个最大值", "2.尾插最大值", "3.删最大值对应结点", "代码如下：", "\n", "#define _CRT_SECURE_NO_WARNINGS 1", "\n", "#include<stdio.h>", "\n", "#include<stdlib.h>", "\n", "#include<assert.h>", "\ntypedef int datatype;\ntypedef struct ", "node", " ", "{\n    datatype", " data;\n    struct ", "node", "* link", ";\n}", "node", ";\n\nnode", "* BuySLTNode(datatype x)\n{\n    ", "node", "* newnode", " = (", "node", "*)malloc", "(sizeof(", "node", "));\n    if", " (newnode == NULL)\n    {\n        perror(", "\"malloc fail\"", ");\n        exit(-", "1", ");\n    }\n    newnode->data = x;\n    newnode->link = NULL;\n    return newnode;\n}\n\n", "node", "* CreateSList", "()\n{\n    datatype data;\n    ", "node", "* phead", " = NULL, *ptail = NULL;\n    while(", "1", ")\n    {\n        scanf(", "\"%d\"", ", &data);\n        if (getchar() == '\\n')\n        {\n            break;\n        }\n        ", "node", "* newnode", " = BuySLTNode(data);\n        if (phead == NULL)\n        {\n            ptail = phead = newnode;\n        }\n        else\n        {\n            ptail->link = newnode;\n            ptail = newnode;\n        }\n    }\n\n    return phead;\n}\n\n", "node", "* Find_max", "(", "node", "* phead", ")\n{\n    ", "node", "* cur", " = phead;\n    ", "node", "* Max", " = phead;\n    datatype max = cur->data;\n    while (cur)\n    {\n        if (cur->data > max)\n        {\n            max = cur->data;\n            Max = cur;\n        }\n        cur = cur->link;\n    }\n    return Max;\n}\n\nvoid SListErase(", "node", "** pphead", ", ", "node", "* pos", ")\n{\n    assert(pos);\n    assert(*pphead);\n    if (pos == *pphead)\n    {\n        ", "node", "* next", " = (*pphead)->link;\n        free(*pphead);\n        *pphead = next;\n    }\n    else\n    {\n        ", "node", "* prev", " = *pphead;\n        while (prev->link != pos)\n        {\n            prev = prev->link;\n        }\n        prev->link = pos->link;\n        free(pos);\n    }\n}\nvoid SLTPushBack(", "node", "** pphead", ", datatype x)\n{\n    ", "node", "* newnode", " = BuySLTNode(x);\n    if (*pphead == NULL)\n    {\n        *pphead = newnode;\n    }\n    else\n    {\n        ", "node", "* tail", " = *pphead;\n        //找尾\n        while (tail->link)\n        {\n            tail = tail->link;\n        }\n        tail->link = newnode;\n    }\n}\n\nvoid SLTPrint(", "node", "* phead", ")\n{\n    ", "node", "* cur", " = phead;\n    while (cur)\n    {\n        printf(", "\"%d\"", ", cur->data);\n        cur = cur->link;\n    }\n}\n\n\nint main()\n{\n    ", "node", "* plist", " = (", "node", "*)malloc", "(sizeof(", "node", "));\n    plist", " = CreateSList();\n    ", "node", "* max", " = Find_max(plist);\n    SLTPushBack(plist, max->data);\n    SListErase(plist, max);\n    SLTPrint(plist);\n    return ", "0", ";\n}\n\n", "\n", "但是打印结果如下：", "\n", "试图调试的时候发现：", "\n", "\n", "不知道是哪里出错了 希望得到帮助 非常感谢"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* &lt;span class=\"hljs-title\"&gt;array&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; numsSize)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;singleNumber&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* nums, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; numsSize)&lt;/span&gt;&lt;/span&gt;;\n &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n &lt;/span&gt;{\n     &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; numsSize;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;numsSize); \n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* nums; \n    nums &amp;#61; &lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;(numsSize);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; single  &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    single &amp;#61; &lt;span class=\"hljs-built_in\"&gt;singleNumber&lt;/span&gt;(nums,numsSize);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;只出现一次的是&amp;#xff1a;%d&amp;#34;&lt;/span&gt;,single);\n    &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(nums);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n  } \n  &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;singleNumber&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* nums, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; numsSize)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ans &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; numsSize; i&amp;#43;&amp;#43;){\n        ans ^&amp;#61; nums[i];&lt;span class=\"hljs-comment\"&gt;//debug运行到这一步出错Segmentation Fault**&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ans;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* &lt;span class=\"hljs-title\"&gt;array&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; numsSize)&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//返回一个动态数组 &lt;/span&gt;\n &lt;/span&gt;{\n     &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* p &amp;#61; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;)*numsSize);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (p &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;未申请到内存&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n     &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i &amp;lt;numsSize;i&amp;#43;&amp;#43;)\n     {\n         &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;p[i]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; p;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img title=\"image.png\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/564380015036165.png\" /&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["代码异或运算部分运行出错，编译没有问题", ["题设是寻找数组中只出现一次的数，其他数字均出现两次（力扣初级算法的题）", "\n", "代码如下", "\n", "#include<stdlib.h>", "\n", "int", "* ", "array", "(", "int", " numsSize);\n", "int", " singleNumber(", "int", "* nums, ", "int", " numsSize);\n ", "int", " main()\n {\n     ", "int", " numsSize;\n    scanf(\"%d\",&numsSize); \n    ", "int", "* nums; \n    nums = ", "array", "(numsSize);\n    ", "int", " single  = ", "0", ";\n    single = singleNumber(nums,numsSize);\n    printf(\"只出现一次的是：%d\",single);\n    free(nums);\n    ", "return", " ", "0", ";\n  } \n  ", "int", " singleNumber(", "int", "* nums, ", "int", " numsSize){\n    ", "int", " ans = ", "0", ";\n    ", "for", "(", "int", " i = ", "0", "; i < numsSize; i++){\n        ans ^= nums[i];**//", "debug", "运行到这一步出错Segmentation Fault**\n    }\n    ", "return", " ans;\n}\n", "int", "* ", "array", "(", "int", " numsSize)//返回一个动态数组 \n {\n     ", "int", "* p = (", "int", "*)malloc(sizeof(", "int", ")*numsSize);\n    ", "if", " (p == ", "NULL", ")\n    {\n        printf(\"未申请到内存\");\n        ", "return", " ", "0", ";\n    }\n     ", "for", "(", "int", " i = ", "0", ";i <numsSize;i++)\n     {\n         scanf(\"%d\",&p[i]);\n    }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "```\r\nimport java.util.Scanner;\r\n\r\npublic class Solution {\r\n\tpublic static void main(String[] args){\r\n\t\tScanner scan = new Scanner(System.in);\r\n\t\tint N = scan.nextInt();\r\n\t\tif(N &gt; 0){\r\n\t\t\tint max = scan.nextInt();\t//假设第一个数是最大的\r\n\t\t\tint i = 1;\r\n\t\t\twhile(i &lt; N){\r\n\t\t\t\tint next = scan.nextInt();\t//不断读取下一个数\r\n\t\t\t\ti++;\r\n\t\t\t\tif(max &lt; next){\r\n\t\t\t\t\tmax = next;\t\t//将读到的数与当前最大值比较，维护最大值变量\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(max);\r\n\t\t}\r\n\t\tscan.close();\r\n\t}\r\n}\r\n```", "Konwledge_Point": "算法与数字", "Question": ["有没有大佬帮忙看看，程序为什么能运行但报错不出结果。", ["package zh.codegym.task.task05.task0532;", "\n\n", "import  java.util.Scanner;", "\n/* ", "\n有关算法的任务", "\n*/", "\n\n", "public class Solution {", "\n    public static void main(String[] args) {", "\n        Scanner sc = new Scanner(System.in);", "\n        int N = sc.nextInt();", "\n        int i;", "\n\n", "    if (N > 0) {\n        int max = 0;\n\n        for (i = 1; i <= N; i++) {\n            int a = sc.nextInt();\n            int b = sc.nextInt();\n            max = a < b ? a : b;\n\n\n        }\n        System.out.println(max);\n    }\n    if(N<=0){\n        System.out.println();\n    }\n\n}\n", "\n\n", "}", "\n编写程序，使其：", "\n1. 从控制台读取数字 N（必须大于 0）", "\n2. 从控制台读取 N 个数字", "\n3.显示 N 个输入数字中的最大值。", "\n\n", "要求：", "\n1.程序应从键盘读取这些数字。", "\n2.程序必须在屏幕上显示一个数字。", "\n3.该类必须包含 public static void main 方法。", "\n4.不要向 Solution 类添加新方法。", "\n5.程序应显示 N 个输入数字中的最大值。", "\n6.如果 N 小于或等于 0，程序不应显示任何内容。", "\n绝望到家了，啥都满足了。就是没满足条件5，气死我鸟了。有大哥告诉我问题出在哪了么！！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;ssss&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["快速排序zhe dao ti该怎么做（C++）？", ["\ntimu描述\n给出一个数据序列，使用快速排序算法进行从小到大的排序\n\n输入\n第一行输入t，表示有t个测试示例\n第二行输入n，表示第一个示例有n个数据\n第三行输入n个数据，都是正整数，数据之间用空格隔开\n以此类推\n\n输出\n每组测试数据，输出每趟快排的结果，即每次排好一个数字结果（长度为1的子序列，不用排，不用输出）。不同测试数据间用空行分隔。\n\n样例输入\n2\n\n6\n\n111", " 22 ", "6", " 444 ", "333 55\n\n8\n\n77", " 555 ", "33", " 1 ", "444", " 77 ", "666 2222\n\n样例输出\n55", " 22 ", "6", " 111 ", "333 444\n\n6", " 22 ", "55", " 111 ", "333 444\n\n6", " 22 ", "55", " 111 ", "333 444\n\n6", " 22 ", "55", " 111 ", "333 444\n\n \n\n1", " 33 ", "77", " 555 ", "444", " 77 ", "666 2222\n\n1", " 33 ", "77", " 555 ", "444", " 77 ", "666 2222\n\n1", " 33 ", "77", " 77 ", "444", " 555 ", "666 2222\n\n1", " 33 ", "77", " 77 ", "444", " 555 ", "666 2222\n\n1", " 33 ", "77", " 77 ", "444", " 555 ", "666 2222\n\n\n\n", "\n", "希望有人能kanyixia。"]], "Tag": "算法设计"}
{"Answer": "mvc模式，是吧m和v层写在一起，通过c来处理逻辑关系，简单的页面还好，越大，逻辑越复杂，就会越乱，你可能经常会写出一个上千行的activity，过段时间再去自己都看不懂，mvp是吧m和v分离出来，不直接交互，通过p层实现数据传递显示，大量的m只管模型内容，v只负责显示，p层负责数据传递", "Konwledge_Point": "算法与数字", "Question": ["Android 当中的 MVC 和 MVP 究竟是如何区分的？", ["最近在看架构方面的资料，对于 MVC 和 MVP 有些搞不明白。", "\n\n", "MVC：", "\nM 层就是用户自己编写的类，页面的逻辑都在这里实现（譬如访问数据库、访问网络、以及各种逻辑操作算法等等），可以总结归纳为 M 层的作用就是“这个页面的功能”", "\nV 层就是各种控件，用来接受用户信息（譬如各种按钮、各种编辑框）和展示信息给用户（类如TextView ImageView 等）", "\nC 层的概念我有些模糊，看一些博客上讲，它是沟通 M 和 V 的桥梁。我有些搞不懂。", "\n\n", "我是这么理解的，我们需要在C 层当中创建 M 层的对象然后调用其相关方法：譬如访问网络方法、存储数据方法，而这些方法所用到的参数就通过V层来获取，同时如果M层有数据返回，那么V层可以直接操作这个返回的数据。", "\n\n", "总感觉哪里不太对，请问大家，我这个理解有问题吗？", "\n\n", "MVP:", "\n在这个模式里，是将Activity或者Fragment作为V层，而将原本 MVC 当中 C 层的沟通逻辑放到了新定义的 P 层当中。", "\n\n", "是这样吗？", "\n\n", "----------大年二十八update--------------", "\n我举个例子，譬如实现一个功能，用户输入一个id（数字），然后匹配数据库当中是否有这个id，如果有，就在页面上显示这个id对象的message，如果没有，就显示没有", "\n\n", "在 MVC 当中", "\nM 层自然有一个 String search(int id)方法，方法体就是通过id去执行查询", "\nV 层就是获取用户输入的id，以及获取用户的点击查询输入，还有显示查询结果", "\nC 层就是 Activity或者Fragment，我们在 Activity当中创建model对象并调用search方法，并且将V层输入的id作为参数传入。", "\n\n", "所谓的M层和V层耦合，就是search方法返回的数据，可以直接调用 V 层的 text.settext(message )来将内容显示出来", "\n\n", "我这么理解有问题吗？"]], "Tag": "算法设计"}
{"Answer": "使用fprintf和fscanf读取文件的时候就能防止读取进去空格了，不行的话就fread然后清空格", "Konwledge_Point": "算法与数字", "Question": ["怎样解决C语言TXT文本输入数据时的空格问题？", ["题目如下：", " 1到40，一共四十个数，输入时一行不超过12个数，不超过10行，筛选出现一次的数字，出现两次的数字，三次及三次以上的数字，出现零次的数字，要求用TXT文本输入，输出。", "遇到的问题：", "输入数据后，发现结果错误。仔细查找发现，每行数据后会发现几个空格，", "，导致了只有第一行数据能够读入。笔者试过多次，发现貌似只有这一种空格形式会对结果造成影响，其他的情况，添加很多空格也不会有事。笔者咨询前辈，说可能由于中文或者英文状态下的原因，笔者试过两种状态下输入原数据的空格，发现均输出错误结果。现在比较迷惑，不知如何改进（其实用基本能用了），还请各位大神帮帮忙，也希望大家能对我的算法提出改进意见！", "代码如下：", "\n#include", "\n#include", "\n#define S 120", "\n#define T 40", "\n#define I 1", "\nint main()", "\n{", "\n    FILE*fp1;", "\n    FILE*fp2=fopen(\"output.txt\",\"w\");", "\n    int num1[S],num2[T],num3[T],num4[T],num5[T],num6[T],i,j=0,k=0,a=0,b=0,c=0,d=0,m,n;", "\n    if((fp1=fopen(\"input.txt\",\"r\"))==NULL)", "\n    {", "\n    printf(\"无法打开文件\\n\");", "\n    exit(0);", "\n    }", "\n    for(i=I;i<=T;i++)", "\n        num2[j++]=i;//将1至40赋给num2数组各元素", "\n    for(i=0;i\n    fscanf(fp1,\"%d\",&num1[i]);//从文件中读出120个的数据，并存入num1数组", "\n    fclose(fp1);", "\n    for(i=0;i\n    {", "\n            for(j=0;j\n            if(num1[j]==num2[i])k++;//比较", "\n            if(k==0) num3[a++]=num2[i];", "\n            else if(k==1) num4[b++]=num2[i];", "\n            else if(k==2) num5[c++]=num2[i];", "\n            else if(k>3||k==3) num6[d++]=num2[i];", "\n            k=0;", "\n    }", "\n    fprintf(fp2,\"出现过零次的数字是:\");", "\n    for(m=0;m<a;m++)", "\n        fprintf(fp2,\"%3d\",num3[m]);", "\n    fprintf(fp2,\"\\n\");", "\n    fprintf(fp2,\"出现过一次的数字是:\");", "\n    for(m=0;m<b;m++)", "\n        fprintf(fp2,\"%3d\",num4[m]);", "\n    fprintf(fp2,\"\\n\");", "\n    fprintf(fp2,\"出现过两次的数字是:\");", "\n    for(m=0;m<c;m++)", "\n        fprintf(fp2,\"%3d\",num5[m]);", "\n    fprintf(fp2,\"\\n\");", "\n    fprintf(fp2,\"出现过三次或三次以上的数字是:\");", "\n    for(m=0;m<d;m++)", "\n        fprintf(fp2,\"%3d\",num6[m]);", "\n    fprintf(fp2,\"\\n\");", "\n    fclose(fp2);", "\n    return 0;", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;_int64 &lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;0;bool &lt;span class=\"hljs-attribute\"&gt;p&lt;/span&gt;&amp;#61;1;\ncin&amp;gt;&amp;gt;n;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(n)&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n%&lt;span class=\"hljs-attribute\"&gt;10&lt;/span&gt;&amp;#61;&amp;#61;7||n%10&amp;#61;&amp;#61;4)n/&amp;#61;10;else &lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;p&amp;#61;0;\ncout&amp;lt;&amp;lt;p&amp;lt;&amp;lt;endl;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["jzoj9248: 幸运数", ["题目描述", "4 和 7 是味味的幸运数字。幸运数是那些只由幸运数字组成的正整数。如 47，477 是幸运数，", "而 5，17，417 就不是幸运数。"]], "Tag": "算法设计"}
{"Answer": "首先差别不大，读取大量数据将占用主要的时间，比较三个字母占用时间比例很小；就3种方式来说，A会比较第4个，B仅仅比较前3个，C还需要取出子串，所以，B最快", "Konwledge_Point": "算法与数字", "Question": ["SQL 查询方式中   大批量数据查询字段效率 ", ["![图片只有三个，如果可能的话请尽量列举更多，或者扩展其他方面的查询性能和优化 方面的知识图片说明", "\n问题内容：", "\n电话号码表t_phonebook中有一千万条数据，其中号码字段phone上创建唯一索引，", "\n且电话号码全都有数字组成，要求统计号码为321的电话号码数量，", "\n下面算法执行速度最快的是——————，最慢的是——————", "\nA：SELECT count(*) FROM t_phone WHERE phoneno>='321',AND phoneno< '321A'", "\nB：SELECT count(*) FROM t_phone WHERE phoneno LIKE '321%'", "\nC: SELECT count(*) FROM t_phone WHERE phoneno substr(phoneno,1,3)='321'", "\nD：都一样快**_"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;package com.example.demo1;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.NoSuchPaddingException;\nimport java.io.ByteArrayOutputStream;\nimport java.security.*;\nimport java.security.interfaces.RSAPrivateKey;\nimport java.security.interfaces.RSAPublicKey;\nimport java.security.spec.PKCS8EncodedKeySpec;\nimport java.security.spec.X509EncodedKeySpec;\nimport java.util.Base64;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class TestRSA\n{\n    /**\n     * 测试方法\n     */\n    public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException {\n        String publicKey &amp;#61; &amp;#34;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCXGI8/U6r8m8bxrF&amp;#43;nb3ONgEUgcykJyo7ZyrAfzX8pbU/t58p89B5O2&amp;#43;zM2ArKBfX5krnUfdMM4DNhPh6HaR&amp;#43;TIFB6qbNCoaQY2IUP9RfsC/vo0Yyz7hZjrThwy&amp;#43;fLfQxZz5jCnrND4lUfKYk8Zh&amp;#43;SzFIsO4HOnsFiGOTIepyOtQIDAQAB&amp;#34;;\n        String privateKey &amp;#61; &amp;#34;MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAJcYjz9TqvybxvGsX6dvc42ARSBzKQnKjtnKsB/NfyltT&amp;#43;3nynz0Hk7b7MzYCsoF9fmSudR90wzgM2E&amp;#43;HodpH5MgUHqps0KhpBjYhQ/1F&amp;#43;wL&amp;#43;&amp;#43;jRjLPuFmOtOHDL58t9DFnPmMKes0PiVR8piTxmH5LMUiw7gc6ewWIY5Mh6nI61AgMBAAECgYBvjnd89wZAebc6Cd2Z3qS/LZxcKAp9qysrTAYbhPrFGGsyKLgM56RU7vV4DG5y2FHS0W0YoUmosQPeYSHjMk9XizWc4RC5h3KX1FThEJgA/bGmv1kY7zURkCukq4RZRJDTc2LkQM7&amp;#43;ihFDyBt9fruROC48mzzV92V639iSO1tDxQJBANHZZUl5bsXBozRSjMBWc/WghLUvvdmJcsm4fQfYdXNsDYylGRAxi5wludHtzrIL1rpIuYtGh0SxW54Ak7Y71B8CQQC4U1QhW960MtbeWp56HbxDvK3SDRTDvEXIF8&amp;#43;1hAdFPFipaMShci8&amp;#43;y4uz9FiDWYDI0nU0SjEqsVuYQJjITmKrAkBo0TzNcXFKKAl8Fgul&amp;#43;sjbFL2Uvu8GXKhQZ&amp;#43;1T4OPxrjQqX0DgnM7ORO3HFRCcUFuGGtNK5QSl5C0OA93ENagjAkBAllJAbiSXF8lamH43Y/v38EEn/RVtkKcS&amp;#43;eT6QY0aoY6frepYd94&amp;#43;LqyBHfl17QLHW5dd/zFDOGpT6y6d4XmJAkAM1DD/QlzsD23zj&amp;#43;HeCiFY5EqEMvB3evi&amp;#43;yqdZ5J5th1VK4ywfeWwUueWDd3yyJy8sK&amp;#43;4vNmvuQci/zBbKU0&amp;#43;n&amp;#34;;\n\n        String str &amp;#61; &amp;#34;{\\&amp;#34;address\\&amp;#34;:\\&amp;#34;安徽宿州\\&amp;#34;,\\&amp;#34;authType\\&amp;#34;:\\&amp;#34;1\\&amp;#34;,\\&amp;#34;backPhoto\\&amp;#34;:\\&amp;#34;https://uniubi-aiot.oss-cn-hangzhou.aliyuncs.com/device/84E0F424B99851FA/20210217083909_243_rgb.jpg\\&amp;#34;,\\&amp;#34;educationCode\\&amp;#34;:\\&amp;#34;6\\&amp;#34;,\\&amp;#34;frontPhoto\\&amp;#34;:\\&amp;#34;https://uniubi-aiot.oss-cn-hangzhou.aliyuncs.com/device/84E0F424B99851FA/20210217083909_243_rgb.jpg\\&amp;#34;,\\&amp;#34;headImageUrl\\&amp;#34;:\\&amp;#34;https://uniubi-aiot.oss-cn-hangzhou.aliyuncs.com/device/84E0F424B99851FA/20210217083909_243_rgb.jpg\\&amp;#34;,\\&amp;#34;idCard\\&amp;#34;:\\&amp;#34;340881199705260330\\&amp;#34;,\\&amp;#34;majorHistoryB\\&amp;#34;:false,\\&amp;#34;nation\\&amp;#34;:\\&amp;#34;汉族\\&amp;#34;,\\&amp;#34;personType\\&amp;#34;:\\&amp;#34;03\\&amp;#34;,\\&amp;#34;phone\\&amp;#34;:\\&amp;#34;15988776666\\&amp;#34;,\\&amp;#34;signOrg\\&amp;#34;:\\&amp;#34;杭州市上城区公安局\\&amp;#34;,\\&amp;#34;trueName\\&amp;#34;:\\&amp;#34;严佳勇\\&amp;#34;,\\&amp;#34;validityPeriod\\&amp;#34;:\\&amp;#34;2012010120200101\\&amp;#34;}&amp;#34;;\n        // 公钥加密&amp;#xff0c;私钥解密\n        String enStr1 &amp;#61; TestRSA.encryptByPublicKey(str, publicKey);\n        System.out.println(&amp;#34;公钥加密后&amp;#xff1a;&amp;#34; &amp;#43; enStr1);\n        String deStr1 &amp;#61; TestRSA.decryptByPrivateKey(enStr1, privateKey);\n        System.out.println(&amp;#34;私钥解密后&amp;#xff1a;&amp;#34; &amp;#43; deStr1);\n\n        // 产生签名\n        String sign &amp;#61; sign(enStr1, privateKey);\n        System.out.println(&amp;#34;签名:&amp;#34; &amp;#43; sign);\n        // 验证签名\n        boolean status &amp;#61; verify(enStr1, publicKey, sign);\n        System.out.println(&amp;#34;状态:&amp;#34; &amp;#43; status);\n\n    }\n\n    //定义加密方式\n    public static final String KEY_RSA &amp;#61; &amp;#34;RSA&amp;#34;;\n    //定义公钥关键词\n    public static final String KEY_RSA_PUBLICKEY &amp;#61; &amp;#34;RSAPublicKey&amp;#34;;\n    //定义私钥关键词\n    public static final String KEY_RSA_PRIVATEKEY &amp;#61; &amp;#34;RSAPrivateKey&amp;#34;;\n    //定义签名算法\n    private final static String KEY_RSA_SIGNATURE &amp;#61; &amp;#34;SHA256WithRSA&amp;#34;;\n    /**\n     * **\n     * RSA最大加密大小\n     */\n    private final static int MAX_ENCRYPT_BLOCK &amp;#61; 117;\n\n    /**\n     * **\n     * RSA最大解密大小\n     */\n    private final static int MAX_DECRYPT_BLOCK &amp;#61; 128;\n\n    /**\n     * 生成公私密钥对\n     */\n    public static Map&amp;lt;String, Object&amp;gt; init()\n    {\n        Map&amp;lt;String, Object&amp;gt; map &amp;#61; null;\n        try\n        {\n            KeyPairGenerator generator &amp;#61; KeyPairGenerator.getInstance(KEY_RSA);\n            //设置密钥对的bit数&amp;#xff0c;越大越安全&amp;#xff0c;但速度减慢&amp;#xff0c;一般使用512或1024\n            generator.initialize(1024);\n            KeyPair keyPair &amp;#61; generator.generateKeyPair();\n            // 获取公钥\n            RSAPublicKey publicKey &amp;#61; (RSAPublicKey) keyPair.getPublic();\n            // 获取私钥\n            RSAPrivateKey privateKey &amp;#61; (RSAPrivateKey) keyPair.getPrivate();\n            // 将密钥对封装为Map\n            map &amp;#61; new HashMap&amp;lt;String, Object&amp;gt;();\n            map.put(KEY_RSA_PUBLICKEY, publicKey);\n            map.put(KEY_RSA_PRIVATEKEY, privateKey);\n        } catch (NoSuchAlgorithmException e)\n        {\n            e.printStackTrace();\n        }\n\n        return map;\n    }\n\n    /**\n     * 获取Base64编码的公钥字符串\n     */\n    public static String getPublicKey(Map&amp;lt;String, Object&amp;gt; map)\n    {\n        String str &amp;#61; &amp;#34;&amp;#34;;\n        Key key &amp;#61; (Key) map.get(KEY_RSA_PUBLICKEY);\n        str &amp;#61; encryptBase64(key.getEncoded());\n        return str;\n    }\n\n    /**\n     * 获取Base64编码的私钥字符串\n     */\n    public static String getPrivateKey(Map&amp;lt;String, Object&amp;gt; map)\n    {\n        String str &amp;#61; &amp;#34;&amp;#34;;\n        Key key &amp;#61; (Key) map.get(KEY_RSA_PRIVATEKEY);\n        str &amp;#61; encryptBase64(key.getEncoded());\n        return str;\n    }\n\n    /**\n     * BASE64 解码\n     *\n     * &amp;#64;param key 需要Base64解码的字符串\n     * &amp;#64;return 字节数组\n     */\n    public static byte[] decryptBase64(String key)\n    {\n        return Base64.getDecoder().decode(key);\n    }\n\n    /**\n     * BASE64 编码\n     *\n     * &amp;#64;param key 需要Base64编码的字节数组\n     * &amp;#64;return 字符串\n     */\n    public static String encryptBase64(byte[] key)\n    {\n        return new String(Base64.getEncoder().encode(key));\n    }\n\n    /**\n     * 公钥加密\n     *\n     * &amp;#64;param encryptingStr\n     * &amp;#64;param publicKeyStr\n     * &amp;#64;return\n     */\n    public static String encryptByPublicKey(String encryptingStr, String publicKeyStr)\n    {\n        try\n        {\n            // 将公钥由字符串转为UTF-8格式的字节数组\n            byte[] publicKeyBytes &amp;#61; decryptBase64(publicKeyStr);\n            // 获得公钥\n            X509EncodedKeySpec keySpec &amp;#61; new X509EncodedKeySpec(publicKeyBytes);\n            // 取得待加密数据\n            byte[] data &amp;#61; encryptingStr.getBytes(&amp;#34;UTF-8&amp;#34;);\n            KeyFactory factory;\n            factory &amp;#61; KeyFactory.getInstance(KEY_RSA);\n            PublicKey publicKey &amp;#61; factory.generatePublic(keySpec);\n            // 对数据加密\n            Cipher cipher &amp;#61; Cipher.getInstance(factory.getAlgorithm());\n            cipher.init(Cipher.ENCRYPT_MODE, publicKey);\n            // 返回加密后由Base64编码的加密信息\n            int inputLen &amp;#61; data.length;\n            ByteArrayOutputStream out &amp;#61; new ByteArrayOutputStream();\n            int offSet &amp;#61; 0;\n            byte[] cache;\n            int i &amp;#61; 0;\n            // 对数据分段解密\n            while (inputLen - offSet &amp;gt; 0)\n            {\n                if (inputLen - offSet &amp;gt; MAX_ENCRYPT_BLOCK)\n                {\n                    cache &amp;#61; cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);\n                } else\n                {\n                    cache &amp;#61; cipher.doFinal(data, offSet, inputLen - offSet);\n                }\n                out.write(cache, 0, cache.length);\n                i&amp;#43;&amp;#43;;\n                offSet &amp;#61; i * MAX_ENCRYPT_BLOCK;\n            }\n            byte[] decryptedData &amp;#61; out.toByteArray();\n            out.close();\n            return encryptBase64(decryptedData);\n        } catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n    /**\n     * 私钥解密\n     *\n     * &amp;#64;param encryptedStr\n     * &amp;#64;param privateKeyStr\n     * &amp;#64;return\n     */\n    public static String decryptByPrivateKey(String encryptedStr, String privateKeyStr)\n    {\n        try\n        {\n            // 对私钥解密\n            byte[] privateKeyBytes &amp;#61; decryptBase64(privateKeyStr);\n            // 获得私钥\n            PKCS8EncodedKeySpec keySpec &amp;#61; new PKCS8EncodedKeySpec(privateKeyBytes);\n            // 获得待解密数据\n            byte[] data &amp;#61; decryptBase64(encryptedStr);\n            KeyFactory factory &amp;#61; KeyFactory.getInstance(KEY_RSA);\n            PrivateKey privateKey &amp;#61; factory.generatePrivate(keySpec);\n            // 对数据解密\n            Cipher cipher &amp;#61; Cipher.getInstance(factory.getAlgorithm());\n            cipher.init(Cipher.DECRYPT_MODE, privateKey);\n            // 返回UTF-8编码的解密信息\n            int inputLen &amp;#61; data.length;\n            ByteArrayOutputStream out &amp;#61; new ByteArrayOutputStream();\n            int offSet &amp;#61; 0;\n            byte[] cache;\n            int i &amp;#61; 0;\n            // 对数据分段解密\n            while (inputLen - offSet &amp;gt; 0)\n            {\n                if (inputLen - offSet &amp;gt; MAX_DECRYPT_BLOCK)\n                {\n                    cache &amp;#61; cipher.doFinal(data, offSet, MAX_DECRYPT_BLOCK);\n                } else\n                {\n                    cache &amp;#61; cipher.doFinal(data, offSet, inputLen - offSet);\n                }\n                out.write(cache, 0, cache.length);\n                i&amp;#43;&amp;#43;;\n                offSet &amp;#61; i * MAX_DECRYPT_BLOCK;\n            }\n            byte[] decryptedData &amp;#61; out.toByteArray();\n            out.close();\n            return new String(decryptedData, &amp;#34;UTF-8&amp;#34;);\n        } catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n    /**\n     * 私钥加密\n     *\n     * &amp;#64;param encryptingStr\n     * &amp;#64;param privateKeyStr\n     * &amp;#64;return\n     */\n    public static String encryptByPrivateKey(String encryptingStr, String privateKeyStr)\n    {\n        try\n        {\n            byte[] privateKeyBytes &amp;#61; decryptBase64(privateKeyStr);\n            // 获得私钥\n            PKCS8EncodedKeySpec keySpec &amp;#61; new PKCS8EncodedKeySpec(privateKeyBytes);\n            // 取得待加密数据\n            byte[] data &amp;#61; encryptingStr.getBytes(&amp;#34;UTF-8&amp;#34;);\n            KeyFactory factory &amp;#61; KeyFactory.getInstance(KEY_RSA);\n            PrivateKey privateKey &amp;#61; factory.generatePrivate(keySpec);\n            // 对数据加密\n            Cipher cipher &amp;#61; Cipher.getInstance(factory.getAlgorithm());\n            cipher.init(Cipher.ENCRYPT_MODE, privateKey);\n            // 返回加密后由Base64编码的加密信息\n            int inputLen &amp;#61; data.length;\n            ByteArrayOutputStream out &amp;#61; new ByteArrayOutputStream();\n            int offSet &amp;#61; 0;\n            byte[] cache;\n            int i &amp;#61; 0;\n            // 对数据分段解密\n            while (inputLen - offSet &amp;gt; 0)\n            {\n                if (inputLen - offSet &amp;gt; MAX_ENCRYPT_BLOCK)\n                {\n                    cache &amp;#61; cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);\n                } else\n                {\n                    cache &amp;#61; cipher.doFinal(data, offSet, inputLen - offSet);\n                }\n                out.write(cache, 0, cache.length);\n                i&amp;#43;&amp;#43;;\n                offSet &amp;#61; i * MAX_ENCRYPT_BLOCK;\n            }\n            byte[] decryptedData &amp;#61; out.toByteArray();\n            out.close();\n            return encryptBase64(decryptedData);\n        } catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n    /**\n     * 公钥解密\n     *\n     * &amp;#64;param encryptedStr\n     * &amp;#64;param publicKeyStr\n     * &amp;#64;return\n     */\n    public static String decryptByPublicKey(String encryptedStr, String publicKeyStr)\n    {\n        try\n        {\n            // 对公钥解密\n            byte[] publicKeyBytes &amp;#61; decryptBase64(publicKeyStr);\n            // 取得公钥\n            X509EncodedKeySpec keySpec &amp;#61; new X509EncodedKeySpec(publicKeyBytes);\n            // 取得待加密数据\n            byte[] data &amp;#61; decryptBase64(encryptedStr);\n            KeyFactory factory &amp;#61; KeyFactory.getInstance(KEY_RSA);\n            PublicKey publicKey &amp;#61; factory.generatePublic(keySpec);\n            // 对数据解密\n            Cipher cipher &amp;#61; Cipher.getInstance(factory.getAlgorithm());\n            cipher.init(Cipher.DECRYPT_MODE, publicKey);\n            // 返回UTF-8编码的解密信息\n            int inputLen &amp;#61; data.length;\n            ByteArrayOutputStream out &amp;#61; new ByteArrayOutputStream();\n            int offSet &amp;#61; 0;\n            byte[] cache;\n            int i &amp;#61; 0;\n            // 对数据分段解密\n            while (inputLen - offSet &amp;gt; 0)\n            {\n                if (inputLen - offSet &amp;gt; MAX_DECRYPT_BLOCK)\n                {\n                    cache &amp;#61; cipher.doFinal(data, offSet, MAX_DECRYPT_BLOCK);\n                } else\n                {\n                    cache &amp;#61; cipher.doFinal(data, offSet, inputLen - offSet);\n                }\n                out.write(cache, 0, cache.length);\n                i&amp;#43;&amp;#43;;\n                offSet &amp;#61; i * MAX_DECRYPT_BLOCK;\n            }\n            byte[] decryptedData &amp;#61; out.toByteArray();\n            out.close();\n            return new String(decryptedData, &amp;#34;UTF-8&amp;#34;);\n        } catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n    /**\n     * 用私钥对加密数据进行签名\n     *\n     * &amp;#64;param encryptedStr\n     * &amp;#64;param privateKey\n     * &amp;#64;return\n     */\n    public static String sign(String encryptedStr, String privateKey)\n    {\n        String str &amp;#61; &amp;#34;&amp;#34;;\n        try\n        {\n            //将私钥加密数据字符串转换为字节数组\n            byte[] data &amp;#61; encryptedStr.getBytes();\n            // 解密由base64编码的私钥\n            byte[] bytes &amp;#61; decryptBase64(privateKey);\n            // 构造PKCS8EncodedKeySpec对象\n            PKCS8EncodedKeySpec pkcs &amp;#61; new PKCS8EncodedKeySpec(bytes);\n            // 指定的加密算法\n            KeyFactory factory &amp;#61; KeyFactory.getInstance(KEY_RSA);\n            // 取私钥对象\n            PrivateKey key &amp;#61; factory.generatePrivate(pkcs);\n            // 用私钥对信息生成数字签名\n            Signature signature &amp;#61; Signature.getInstance(KEY_RSA_SIGNATURE);\n            signature.initSign(key);\n            signature.update(data);\n            str &amp;#61; encryptBase64(signature.sign());\n        } catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n        return str;\n    }\n\n    /**\n     * 校验数字签名\n     *\n     * &amp;#64;param encryptedStr\n     * &amp;#64;param publicKey\n     * &amp;#64;param sign\n     * &amp;#64;return 校验成功返回true&amp;#xff0c;失败返回false\n     */\n    public static boolean verify(String encryptedStr, String publicKey, String sign)\n    {\n        boolean flag &amp;#61; false;\n        try\n        {\n            //将私钥加密数据字符串转换为字节数组\n            byte[] data &amp;#61; encryptedStr.getBytes();\n            // 解密由base64编码的公钥\n            byte[] bytes &amp;#61; decryptBase64(publicKey);\n            // 构造X509EncodedKeySpec对象\n            X509EncodedKeySpec keySpec &amp;#61; new X509EncodedKeySpec(bytes);\n            // 指定的加密算法\n            KeyFactory factory &amp;#61; KeyFactory.getInstance(KEY_RSA);\n            // 取公钥对象\n            PublicKey key &amp;#61; factory.generatePublic(keySpec);\n            // 用公钥验证数字签名\n            Signature signature &amp;#61; Signature.getInstance(KEY_RSA_SIGNATURE);\n            signature.initVerify(key);\n            signature.update(data);\n            flag &amp;#61; signature.verify(decryptBase64(sign));\n        } catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n        return flag;\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;加密代码&lt;/p&gt;\n\n&lt;p style=\"text-align:center\"&gt;&lt;img alt=\"\" src=\"https://img-ask.csdnimg.cn/upload/1624256229018.png\" /&gt;&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["求助：RSA加密发送http请求失败", ["菜鸟求助，这个接口怎样加密，才能发送请求成功，自己搞了半天也没解决。最好把加密代码提供下，感觉不尽！", "\n\n", "接口信息：", "\n\n", "测试接口地址 URL: ", "http://221.13.13.133:21974", "\n\n", "请求方式：POST", "\n\n", "Content-Type：application/x-www-form-urlencoded", "\n\n", "请求参数：", "\n\n", "  unitCode:软件服务商统一社会信用代码", "\n  projectId:项目ID", "\n  data: 加密后的数据", "\n\n", "数据加密说明：", "\n\n", "接口平台为每个接入平台颁发一个数字证书（一对公私钥），接入平台必须通过数字证书的公钥对上行数据进行RSA加密 后再进行Base64编码后提交。 签名加密规则：", "\n\n", "加密算法RSA密钥位数1024；", "签名算法SHA256WithRSA；", "加解密Cipher算法：RAS/ECB/PKCS1Padding；", "加密原始数据为JSON字符串；", "加密最终为Base64编码数据；字符串统一采用UTF-8编码格式。", "\n\n", " ", "\n\n", "测试数据：", "\n\n", "projectId:1270995441467150337", "\n\n", "unitCode：9133011009519461XC", "\n\n", "data: {\"address\":\"安徽宿州\",\"authType\":\"1\",\"backPhoto\":\"https://uniubi-aiot.oss-cn-hangzhou.aliyuncs.com/device/84E0F424B99851FA/20210217083909_243_rgb.jpg\",\"educationCode\":\"6\",\"frontPhoto\":\"https://uniubi-aiot.oss-cn-hangzhou.aliyuncs.com/device/84E0F424B99851FA/20210217083909_243_rgb.jpg\",\"headImageUrl\":\"https://uniubi-aiot.oss-cn-hangzhou.aliyuncs.com/device/84E0F424B99851FA/20210217083909_243_rgb.jpg\",\"idCard\":\"340881199705260330\",\"majorHistoryB\":false,\"nation\":\"汉族\",\"personType\":\"03\",\"phone\":\"15988776666\",\"signOrg\":\"杭州市上城区公安局\",\"trueName\":\"严佳勇\",\"validityPeriod\":\"2012010120200101\"}", "\n\n", "公钥：MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCXGI8/U6r8m8bxrF+nb3ONgEUgcykJyo7ZyrAfzX8pbU/t58p89B5O2+zM2ArKBfX5krnUfdMM4DNhPh6HaR+TIFB6qbNCoaQY2IUP9RfsC/vo0Yyz7hZjrThwy+fLfQxZz5jCnrND4lUfKYk8Zh+SzFIsO4HOnsFiGOTIepyOtQIDAQAB", "\n\n", "私钥：MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAJcYjz9TqvybxvGsX6dvc42ARSBzKQnKjtnKsB/NfyltT+3nynz0Hk7b7MzYCsoF9fmSudR90wzgM2E+HodpH5MgUHqps0KhpBjYhQ/1F+wL++jRjLPuFmOtOHDL58t9DFnPmMKes0PiVR8piTxmH5LMUiw7gc6ewWIY5Mh6nI61AgMBAAECgYBvjnd89wZAebc6Cd2Z3qS/LZxcKAp9qysrTAYbhPrFGGsyKLgM56RU7vV4DG5y2FHS0W0YoUmosQPeYSHjMk9XizWc4RC5h3KX1FThEJgA/bGmv1kY7zURkCukq4RZRJDTc2LkQM7+ihFDyBt9fruROC48mzzV92V639iSO1tDxQJBANHZZUl5bsXBozRSjMBWc/WghLUvvdmJcsm4fQfYdXNsDYylGRAxi5wludHtzrIL1rpIuYtGh0SxW54Ak7Y71B8CQQC4U1QhW960MtbeWp56HbxDvK3SDRTDvEXIF8+1hAdFPFipaMShci8+y4uz9FiDWYDI0nU0SjEqsVuYQJjITmKrAkBo0TzNcXFKKAl8Fgul+sjbFL2Uvu8GXKhQZ+1T4OPxrjQqX0DgnM7ORO3HFRCcUFuGGtNK5QSl5C0OA93ENagjAkBAllJAbiSXF8lamH43Y/v38EEn/RVtkKcS+eT6QY0aoY6frepYd94+LqyBHfl17QLHW5dd/zFDOGpT6y6d4XmJAkAM1DD/QlzsD23zj+HeCiFY5EqEMvB3evi+yqdZ5J5th1VK4ywfeWwUueWDd3yyJy8sK+4vNmvuQci/zBbKU0+n", "\n\n", " ", "\n\n", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你个问题 哪个大神都解答不出来&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["求大神解码一串加密的数字", ["kAYsQ26__HhjJWKvqwkZHAqX-VMlUdYnR1fOKp54KWM", "\n\n", "解码成这串数字：1339189578535395383", "\n\n", "我是小白，求大神试一下，告知加密算法，万分感谢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;上面的数字和旋转没有关系&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["这是数据结构 平衡树旋转 上面的数字都是怎么来的啊", []], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/fendou-999/p/3534930.html", "Konwledge_Point": "算法与数字", "Question": ["python3使用ctypes有些c类型没有怎么办？", ["被实习作业折磨到摸不着头脑", "\n菜狗一只，平常总是靠度娘解决问题，但这次真的搜不到了(╥╯^╰╥)", "\n实在不想用C++......而且已经丢了很久了......", "\n学校实习任务开发指纹仪的相关软件，调用dll函数。", "\n问题1：", "\ndll函数：HANDLE_stdcall sensorOpen(int index)", "\n\n", "这个类型是句柄HANDLE，其返回值需要用到，但是Python没有直接HANDLE，我用int接收暂没出现问题，怕之后会遇到先问一个。", "\n\n", "问题2：", "\ndll函数：int_stdcall sensorCapture(HANDLE handle,unsigned char* imageBuffer, int imageBufferSize)//获取图像", "\n\n", "handle就是上面那个，unsigned char* 文档解释是接收的图像即是输入的参数也会输出，后续指纹算法需要，ctypes也没有，怎么实现？", "\n我目前使用imageBuffer = create_string_buffer(所需空间大小)，但是没有采集到图像（我检验了该函数返回值，为0，即无图像）", "\n我也试过了create_unicode_buffer,结果也一样。到底是使用方法问题还是其他导致我真的没采集到图像", "\n\n", "问题3：（虽然前面的还没解决但先问下）（准确的说目前卡在这里）", "\ndll函数：HANDLE stdcall BIOKEY_INIT(int License, WORD *isize, BYTE*Params, BYTE *Buffer, intImageFlag)", "\n问题出在isize：文档描述：[in] 传入一个无符号双字节长度为22 的数组，且 isize[0]和isize[20]为传入图像宽度，isize[1]和 isize[21]为传入图像高度", "\n这isize怎么提前定义？", "\n\n", "我尝试使用isize = bytearray()处理，但是毕竟是双字节，光是宽度就有300多，但byte要在0-255之间，而且还不确定都是数字（我试过定义为整型数组，报错don't konw how to convert parameter 2）。作为指纹图像，虽然有函数可以修改采集图像的大小，但是太小了的话数据的完整性和可使用性就大打折扣。所以这个双字节咋整啊", "\n\n", "问题4：", "\n有些函数传入参数为int*，咋整......我先去看看ctypes的文档，但是我记得上次看的时候好像没有针对这种指针的...直接使用c_char_p吗？（目前没法验证这个方法是否可行，因为前面就走不通。。。）", "\n\n", "总之目前就这些了，实习作业周三开始检查希望会的大佬帮帮我！谢谢啦！", "\n我先滚去看文档了。。。"]], "Tag": "算法设计"}
{"Answer": "String fileName = \"gzip.file.gz\";\r\nBufferedReader gzipReader = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(fileName))));\r\n            String tmp = null;\r\n            while((tmp=gzipReader.readLine())!=null){\r\n                System.out.println(\"文件行:\"+tmp);\r\n            }\r\n我这样试了试,是可以的;\r\n你是怎么读取的?\r\n\r\n难道跟服务器的编码有关?", "Konwledge_Point": "算法与数字", "Question": ["关于java的GZip解压问题", ["视频系统，关系各终端的播放日志，采用的是定期向服务器上传tar.gz包，然后在服务器上解开，逐条读取放到数据库中。", "\n问题：以前服务器用的是linux系统，解压文件是调用的系统命令tar来解压的，现在因为部分系统要部署到window或苹果上,所以改为用java自己的包来解压。这下出问题了，本来只有三行的记录，解出来之后有四行，第一行的前面是文件名和系统中的很多信息，然后是文件内容，中间隔的是乱码，下载到windows上用文本编辑器打到，，好像中间隔的是空格，用客户端软件ssh到linux上，用vi看，是一个个类似^@样的乱码，然而用正则表达式匹配却不行。", "\n实际数据：", "\n一个tar包，里面是一个log文件，内容是：", "\n\\factory\\film\\真实的谎言\\huangyan.vob,2000-01-01 20:43:32,2000-01-01 20:43:39", "\n\\factory\\film\\指环王\\zhihuanwang.vob,2000-01-01 22:50:24,2000-01-01 22:50:29", "\n用系统命令的方法，一切正常，但是用GZip的包来解，内容就是这样的：", "\n00e04c0000ba_2001-03-06.log     0100755 0000000 0000000 00000003036 07251305477 013102\\factory\\film\\真实的谎言\\huangyan.vob,2000-01-01 20:43:32,2000-01-01 20:43:39", "\n\\factory\\film\\指环王\\zhihuanwang.vob,2000-01-01 22:50:24,2000-01-01 22:50:29", "\n真实文件的前面，是文件名以及后面很多不知道是什么信息的信息，最后还有一行，我想用拷贝粘贴的方法，但是粘不出来，不知道为什么。", "\n请问是不是GZIPInputStream或GZIPOutputStream有什么参数？为什么他们解压后有这么多冗余的数据？如何去掉？", "\n谢谢!不好意思，就这点分了", "\n[b]问题补充：[/b]", "\n这是文件，如果能用Gzip解压后的文件与用winzip 或winrar解压后的文件一致，就说明正确了", "\n[b]问题补充：[/b]", "\n文件后缀名为tgz，请修改修改成tgz，当然压缩算法是一样的，我上传文件不行，只能改为gz才能上传成功", "\n[b]问题补充：[/b]", "\n有的朋友说格式不对，但是为什么用winrar或linux的系统命令解压之后的文件内容正常，但是用java的gzip包却多出了很多内容？这是为什么？至少应该结果相同吧？", "\n[b]问题补充：[/b]", "\n用客户端工具压缩之后，再用gzip的包解压，网上的大多程序都能做到正确解压，我得到的是数字电视的机顶盒所上传的日志文件，因为是不同公司之后开发的，所以很难联调，也不清楚具体是用什么压缩的，应该是用linux的命令压缩的", "\n[b]问题补充：[/b]", "\n[color=red]因为我上传的文件格式不支持，所以我是修改了后缀名才上传成功的，下载后请修改成为*.tgz，而不是gz[/color]", "\n[b]问题补充：[/b]", "\n[color=red]根据后缀名来判断，并不是bz2压缩，也许是在包中含了别的信息，但是有一点很奇怪：为什么用系统命令解压或用工具解压，都没有这些信息呢？为什么用GZip还解压，就会有呢？这是为什么？[/color]"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;判断先后顺序肯定有关系。&amp;amp;&amp;amp;的意思是满足条件一才执行条件二&amp;#xff0c;如果条件1不满足则不会执行条件2。拿你的问题来说&amp;#xff0c;只有索引位置满足条件的时候&amp;#xff0c;才会去进一步比较索引位置对应的值。否则&amp;#xff0c;先取值的话&amp;#xff0c;可能你的索引位置不满足要求&amp;#xff0c;被用来取值了&amp;#xff0c;导致数组越界异常。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["Java关于if语句中有多个条件需要判断，各个条件间的先后顺序有要求吗", ["今天学习回形数，在网上看了别人的代码后试着按自己的理解敲了一遍", "\n", "package", " exercise;\n", "import", " java.util.Scanner;\n\n", "/**\n * ", "@author", " lzy\n * 数组算法\n * 回形数，也称回形矩阵\n */", "\n", "public", " ", "class", " ", "RoundMatrix", " {\n    ", "/**\n     * 定义常量代表含义\n     * 初始向右，设置RIGHT = 1\n     */", "\n    ", "private", " ", "static", " ", "final", " ", "int", " ", "RIGHT", " ", "=", " ", "1", ";\n    ", "private", " ", "static", " ", "final", " ", "int", " ", "DOWN", " ", "=", " ", "2", ";\n    ", "private", " ", "static", " ", "final", " ", "int", " ", "LEFT", " ", "=", " ", "3", ";\n    ", "private", " ", "static", " ", "final", " ", "int", " ", "UP", " ", "=", " ", "4", ";\n\n    ", "public", " ", "static", " ", "void", " ", "main", "(String[] args)", " {\n        ", "//1.创建数组", "\n        ", "//根据键盘输入num值决定回型矩阵的行数列数", "\n        ", "Scanner", " ", "scanner", " ", "=", " ", "new", " ", "Scanner", "(System.in);\n        System.out.println(", "\"请输入一个数字：\"", ");\n        ", "int", " ", "num", " ", "=", " scanner.nextInt();\n        ", "int", "[][] roundMatrix = ", "new", " ", "int", "[num][num];\n        ", "//表示该矩阵元素的总数目", "\n        ", "int", " ", "count", " ", "=", " num * num;\n\n        ", "//2.赋值", "\n        ", "//定义横纵坐标，方向，循环次数计数器", "\n        ", "int", " ", "xAis", " ", "=", " ", "0", ";\n        ", "int", " ", "yAis", " ", "=", " ", "0", ";\n        ", "int", " ", "direction", " ", "=", " RIGHT;\n        ", "int", " recycleNumber;\n\n        ", "for", " (recycleNumber = ", "1", "; recycleNumber <= count; recycleNumber ++){\n            ", "//方向向右时的处理", "\n            ", "switch", " (direction) {\n                ", "case", " RIGHT:\n                    ", "if", " (roundMatrix[xAis][yAis] == ", "0", " && yAis < num) {\n                        roundMatrix[xAis][yAis] = recycleNumber;\n                        yAis ++;\n                    } ", "else", " {\n                        direction = DOWN;\n                        xAis++;\n                        yAis--;\n                        ", "//进入else的recycleNumber需减1，保证下次循环时的值正确", "\n                        recycleNumber--;\n                    }\n                    ", "break", ";\n                ", "//方向向下时的处理", "\n                ", "case", " DOWN:\n                    ", "if", " (roundMatrix[xAis][yAis] == ", "0", " && xAis < num) {\n                        roundMatrix[xAis][yAis] = recycleNumber;\n                        xAis ++;\n                    } ", "else", " {\n                        direction = LEFT;\n                        xAis--;\n                        yAis--;\n                        recycleNumber--;\n                    }\n                    ", "break", ";\n                ", "//方向向左时的处理", "\n                ", "case", " LEFT:\n                    ", "if", " (roundMatrix[xAis][yAis] == ", "0", " && yAis >= ", "0", ") {\n                        roundMatrix[xAis][yAis] = recycleNumber;\n                        yAis --;\n                    } ", "else", " {\n                        direction = UP;\n                        xAis--;\n                        yAis++;\n                        recycleNumber--;\n                    }\n                    ", "break", ";\n                ", "//向上", "\n                ", "case", " UP:\n                    ", "if", " (roundMatrix[xAis][yAis] == ", "0", " && xAis >= ", "0", ") {\n                        roundMatrix[xAis][yAis] = recycleNumber;\n                        xAis --;\n                    } ", "else", " {\n                        direction = RIGHT;\n                        xAis++;\n                        yAis++;\n                        recycleNumber--;\n                    }\n                    ", "break", ";\n                ", "default", ":\n            }\n\n        }\n        ", "//3.遍历", "\n        ", "for", " (", "int", "[] matrix : roundMatrix) {\n            ", "for", " (", "int", " i : matrix) {\n                System.out.print(i + ", "\" \"", ");\n            }\n            System.out.println();\n        }\n    }\n}\n", "\n", "写完后运行，但是却一直报错，显示数组越界异常，不明白为什么", "\n", "Exception ", "in", " thread ", "\"main\"", " java", ".lang", ".ArrayIndexOutOfBoundsException", ": ", "3", "\n    at exercise", ".RoundMatrix", ".main", "(RoundMatrix", ".java", ":", "40", ")\n", "\n", "最后把每条case语句中第一个if语句中 && 前后两个条件的顺序替换了才运行成功，虽然没再报错了，但一直不明白为什么颠倒了顺序后就会数组越界", "\n", "case", " RIGHT:\n                    ", "if", " (yAis < ", "num", " && roundMatrix[xAis][yAis] == ", "0", ")\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这种一般是函数参数不能作为返回值造成的&lt;br /&gt;你这Push调用不对吧&amp;#xff0c; 参数要求是Linkstack类型&amp;#xff0c;你却传递了Linkstack *类型&amp;#xff0c;Push(s,e)就行了&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于数据结构的栈，入栈函数", ["\n", "\n", "\n", "数据入栈后，在入栈函数内输出值是正确的，但是一在函数外面就输出-842150451，还有获取栈顶元素和出栈都是输出一长串数字。这到底是为什么。"]], "Tag": "算法设计"}
{"Answer": "node a[maxn],b[maxn],c[maxn],d[maxn];\r\n这一行有错，应该是node a[maxn+1],b[maxn+1],c[maxn+1],d[maxn+1];\r\n或者后面的调用maxn的地方改为maxn-1；\r\n创建数组时，数组的大小要比其最大序号大1；", "Konwledge_Point": "算法与数字", "Question": ["02-线性结构2 一元多项式的乘法与加法运算，这道题的代码上的问题", ["题目：", "\n设计函数分别求两个一元多项式的乘积与和。", "\n输入格式:", "\n\n", "输入分2行，每行分别先给出多项式非零项的个数，再以指数递降方式输入一个多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。", "\n输出格式:", "\n\n", "输出分2行，分别以指数递降方式输出乘积多项式以及和多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。零多项式应输出0 0。", "\n输入样例:", "\n\n", "4 3 4 -5 2  6 1  -2 0", "\n3 5 20  -7 4  3 1", "\n\n", "输出样例:", "\n\n", "15 24 -25 22 30 21 -10 20 -21 8 35 6 -33 5 14 4 -15 3 18 2 -6 1", "\n5 20 -4 4 -5 2 9 1 -2 0", "\n\n", "问题：", "\n代码敲出来了，样例过了。网上找的测试用例也过了，可是PAT上面过不了，PAT上面的测试用例都是答案错误。。。不知道错那里了，请各位大神帮忙看看。", "\n代码在下面", "\n\n", " #include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int maxn=1e3+10;\nconst int minn=-1005;\nstruct node\n{\n    int cor;\n    int exp;\n    node *next;\n};\nbool flag=false;\nint n,lena,lenb,lenc;\nnode * List1,*List2,*List3;\nnode CreatNode(node a[])                        ///建立结构数组\n{\n    cin>>n;\n    if(n==0)\n    {\n        a[0].cor=0;\n        a[0].exp=0;\n    }\n    for(int i=0; i<n; i++)\n    {\n        cin>>a[i].cor;\n        cin>>a[i].exp;\n    }\n    return *a;\n}\nvoid print(node c[])                          ///打印结构数组\n{\n    if(c[0].cor==0){\n        flag=true;\n    }\n    else cout<<c[0].cor<<\" \"<<c[0].exp;\n    for(int i=1; i<=lenc-1; i++)\n    {\n        if(c[i].cor!=minn)\n        {\n            if(c[i].cor!=0)\n                cout<<\" \"<<c[i].cor<<\" \"<<c[i].exp;\n        }\n    }\n     if(flag==true)\n        cout<<\"0 0\";\n    flag=false;\n}\nbool cmp(const  node & a, const node &b)            ///cmp比较\n{\n    return a.exp>b.exp;\n}\nnode UnionNode(node a[],node b[],node d[])          ///将两个结构数组合并成一个大的结构数组\n{\n    int t=0;\n    for(int i=0; i<lena; i++)\n    {\n        d[t].cor=a[i].cor;\n        d[t].exp=a[i].exp;\n        t++;\n    }\n    for(int i=0; i<lenb; i++)\n    {\n        d[t].cor=b[i].cor;\n        d[t].exp=b[i].exp;\n        t++;\n    }\n    return *d;\n}\nvoid add(node c[])                              ///将数组a,b的值赋值给c并排好序后，在c中进行加法运算\n{\n    int t=lenc;\n    for(int i=0; i<t-1; i++)\n    {\n        if(c[i].exp==c[i+1].exp)\n        {\n            c[i].cor=c[i].cor+c[i+1].cor;\n            c[i+1].cor=minn;\n        }\n    }\n}\n\nnode mulNode(node a[],node b[],node c[])                    ///将两个结构数组相乘的值赋值给第三个结构数组\n{\n    int t=0;\n    for(int i=0; i<lena; i++)\n    {\n        for(int j=0; j<lenb; j++)\n        {\n            c[t].cor=a[i].cor*b[j].cor;\n            c[t].exp=a[i].exp+b[j].exp;\n            t++;\n        }\n    }\n    return *c;\n}\nvoid hh()\n{\n    cout<<endl;\n}\nint main()\n{\n    node a[maxn],b[maxn],c[maxn],d[maxn];\n    a[maxn]=CreatNode(a);                   ///建立第一个结构数组\n    lena=n;\n    b[maxn]=CreatNode(b);                       ///建立第二个结构数组\n    lenb=n;\n\n    lenc=lena*lenb;\n    c[maxn]=mulNode(a,b,c);\n    sort(c,c+lenc,cmp);\n    add(c);\n    print(c);\n\n    hh();\n    //cout<<endl;\n\n    lenc=lena+lenb;\n    d[maxn]=UnionNode(a,b,d);           ///将两个结构数组合并起来为C\n    sort(d,d+lenc,cmp);                     ///对C排序\n    add(d);                     ///C中的元素相加\n    print(d);\n\n    return 0;\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "ahash图片相似度匹配算法，可以更快判断出差别过大的，在粗分类方面非常好用 ！", "Konwledge_Point": "算法与数字", "Question": ["用灰度值进行图像匹配，阈值要怎么设置", ["\n目的是匹配接近的图像，用的灰度差，现在想提高效率，有更准确的办法能提前判断图像差别过大吗？希望找个设置阈值的算法"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/831645466746180.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;这里的a[i&amp;#43;1]会访问到a[25] 但是数组开辟空间只开到a[24]&amp;#xff0c;没a[25]&amp;#xff0c;造成了越界访问&lt;/strong&gt;&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;&lt;strong&gt;简单来说就是&amp;#xff1a;数组所创建的范围已经超过使用的范围了——越界了&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;希望对题主有所帮助&amp;#xff01;可以的话&amp;#xff0c;帮忙点个采纳&amp;#xff01;&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "算法与数字", "Question": ["题很简单，生成25个1到100之间的随机数，打印它们，并在相邻的两个数字之间打印 > 、 < 、 =。 比如 11 > 2 < 5 < 90 > 89 > 17 ...", ["现在遇到的问题是报错，这个错误该怎修改？", "\n", "//我写的代码如下", "\n", "import", " java.util.*;\n", "public", " ", "class", " ", "A", "{\n    ", "public", " ", "static", " ", "void", " ", "main", "(", "String", "[] args)", "{ \n        Random rand=", "new", " ", "Random", "();\n        ", "int", " []a=", "new", " ", "int", "[", "25", "];\n        ", "for", " (", "int", " i=", "0", ";i<a.length ;i++ ) {\n            ", "int", " r=rand.", "nextInt", "(", "100", ")+", "1", ";\n                a[i]=r;\n        }\n        ", "String", " s=", "\"\"", ";\n        ", "String", " x=", "\"\"", ";\n        ", "for", " (", "int", " i=", "0", ";i<", "25", " ;i++ ) {\n            \n            ", "if", " (a[i]>a[i+", "1", "]) {\n                s=s+", "\">\"", "+a[i+", "1", "];\n            }\n            ", "if", " (a[i]<a[i+", "1", "]) {\n                s=s+", "\"<\"", "+a[i+", "1", "];\n            }\n            ", "if", " (a[i]==a[i+", "1", "]) {\n                s=s+", "\"=\"", "+a[i+", "1", "];\n            }\n            x=s;\n            System.out.", "println", "(a[", "0", "]+x);\n        }\n    }\n}\n\n", "\n", "问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "8<50", "8<50>40", "8<50>40<70", "8<50>40<70>42", "8<50>40<70>42<81", "8<50>40<70>42<81>61", "8<50>40<70>42<81>61>24", "8<50>40<70>42<81>61>24<76", "8<50>40<70>42<81>61>24<76>3", "8<50>40<70>42<81>61>24<76>3<100", "8<50>40<70>42<81>61>24<76>3<100>5", "8<50>40<70>42<81>61>24<76>3<100>5<27", "8<50>40<70>42<81>61>24<76>3<100>5<27<81", "8<50>40<70>42<81>61>24<76>3<100>5<27<81>36", "8<50>40<70>42<81>61>24<76>3<100>5<27<81>36<92", "8<50>40<70>42<81>61>24<76>3<100>5<27<81>36<92>64", "8<50>40<70>42<81>61>24<76>3<100>5<27<81>36<92>64>56", "8<50>40<70>42<81>61>24<76>3<100>5<27<81>36<92>64>56=56", "8<50>40<70>42<81>61>24<76>3<100>5<27<81>36<92>64>56=56<57", "8<50>40<70>42<81>61>24<76>3<100>5<27<81>36<92>64>56=56<57<70", "8<50>40<70>42<81>61>24<76>3<100>5<27<81>36<92>64>56=56<57<70>54", "8<50>40<70>42<81>61>24<76>3<100>5<27<81>36<92>64>56=56<57<70>54<83", "8<50>40<70>42<81>61>24<76>3<100>5<27<81>36<92>64>56=56<57<70>54<83>40", "8<50>40<70>42<81>61>24<76>3<100>5<27<81>36<92>64>56=56<57<70>54<83>40>14", "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 25", "    at A.main(A.java:14)", "\n", "输出完成 (耗时 0 秒) - 正常终止", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;h1 id=\"h1_一、步骤_1639784846459\"&gt;一、步骤&lt;/h1&gt;\n&lt;h2 id=\"h2_1、实现一个链表翻转&amp;#xff1b;_1639784846459\"&gt;1、实现一个链表翻转&amp;#xff1b;&lt;/h2&gt;\n&lt;h2 id=\"h2_2、实现两个链表相对位置的相加操作&amp;#xff1b;_1639784846459\"&gt;2、实现两个链表相对位置的相加操作&amp;#xff1b;&lt;/h2&gt;\n&lt;h2 id=\"h2_3、考虑进位&amp;#xff1b;_1639784846459\"&gt;3、考虑进位&amp;#xff1b;&lt;/h2&gt;\n&lt;h1 id=\"h1_二、源码_1639784846459\"&gt;二、源码&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;/*\nl1 -&amp;gt; l2 -&amp;gt; l3 -&amp;gt; l4 -&amp;gt; l5\n\n       |    |\n      pre  now\n*/&lt;/span&gt;\n\nstruct ListNode* reverseList(struct ListNode *l) {\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;struct&lt;/span&gt; ListNode *pre &amp;#61; l, *now &amp;#61; l-&amp;gt;&lt;/span&gt;next;\n    struct ListNode *head &amp;#61; l;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(now) {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pre&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt; &amp;#61; now-&amp;gt;&lt;/span&gt;next;       &lt;span class=\"hljs-comment\"&gt;// (1) 将 now 从链表中剥离出来&amp;#xff1b;&lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;now&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; head;            &lt;span class=\"hljs-comment\"&gt;// (2) 将 now 插入到之前的链表头之前&amp;#xff1b;&lt;/span&gt;\n        head &amp;#61; now;                  &lt;span class=\"hljs-comment\"&gt;// (3) 让 now 成为新的链表头&amp;#xff1b;&lt;/span&gt;\n        \n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;now&lt;/span&gt; &amp;#61; pre-&amp;gt;&lt;/span&gt;next;             &lt;span class=\"hljs-comment\"&gt;// (4) now 也前进一格&amp;#xff1b;&lt;/span&gt;\n    }\n    return head;\n}\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n    struct ListNode *l3 &amp;#61; NULL, *head, *tmp;\n    int a, b, c, cap &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n    &lt;span class=\"hljs-comment\"&gt;// l1 -&amp;gt; l2 上去&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(l1 || l2 || cap) {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;a&lt;/span&gt; &amp;#61; l1 ? l1-&amp;gt;&lt;/span&gt;val : &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;b&lt;/span&gt; &amp;#61; l2 ? l2-&amp;gt;&lt;/span&gt;val : &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        c &amp;#61; a &amp;#43; b &amp;#43; cap;\n        tmp &amp;#61; (struct ListNode *)malloc(sizeof(struct ListNode));\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;tmp&lt;/span&gt;-&amp;gt;&lt;/span&gt;val &amp;#61; c % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;tmp&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; l3;\n        cap &amp;#61; c / &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n\n        l3 &amp;#61; tmp;\n        head &amp;#61; l3;\n        \n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(l1) {\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;l1&lt;/span&gt; &amp;#61; l1-&amp;gt;&lt;/span&gt;next;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(l2) {\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;l2&lt;/span&gt; &amp;#61; l2-&amp;gt;&lt;/span&gt;next;\n        }\n    }\n\n\n\n    return reverseList(head);\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["请你将两个数相加，并以相同形式返回一个表示和的链表。", ["给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。", "\n", "请你将两个数相加，并以相同形式返回一个表示和的链表。", "\n", "你可以假设除了数字 0 之外，这两个数都不会以 0 开头。", "\n", "\n      \n        ", "力扣", "\n        \n      ", "\n      ", "\n      ", "\n        ", "\n          ", "https://leetcode-cn.com/problems/add-two-numbers/", "\n        ", "\n      "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;本人双非本科电信专业&amp;#xff0c;单片机&amp;#xff0c;通信原理&amp;#xff0c;数字信号处理&amp;#xff0c;数电模电也都是专业课。不同于题主&amp;#xff0c;大学没有学习&amp;#xff0c;每年必挂科&amp;#xff0c;最后毕业混过。大学期间也就对编程感兴趣些&amp;#xff08;4年最高分C&amp;#43;&amp;#43; 95&amp;#xff09;&amp;#xff0c;学了学java&amp;#xff0c;目前在郑州一家网络公司做初级java开发。&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;\n\n&lt;p&gt;从题主的学习经历以及各种奖项来看&amp;#xff0c;真的很优秀了。个人推荐题主首先明确一个具体的方向&lt;/p&gt;\n\n&lt;p&gt;1、硬件&amp;#xff0c;单片机&amp;#xff0c;嵌入式编程&lt;/p&gt;\n\n&lt;p&gt;2、软件--具体语言&lt;/p&gt;\n\n&lt;p&gt;3、信号处理&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;\n\n&lt;p&gt;大学学的东西都比较基础&amp;#xff0c;对于实际生产来说其实比较落后&amp;#xff0c;但并不是无用。特别题主这种&amp;#xff0c;各方面都有涉及的&amp;#xff0c;对之后的整体项目了解会很有帮助。&lt;/p&gt;\n\n&lt;p&gt;比如51单片机&amp;#xff0c;就真的只适合学习。电赛使用的也是STM32&amp;#xff0c;18年用的日产的哪个我忘了。&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;\n\n&lt;p&gt;我是20级毕业的直接出来工作的&amp;#xff0c;也有几个考上研究生的同学。考上研之后研究方向的选择&amp;#xff0c;其实就是为以后确定具体方向。&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["考研问答——通信专业相关方向", ["本人双非本科通信工程专业，22届考研，现目标是南邮，但目前遇到一些问题，很是迷茫，恳求答主解惑相助；", "\n\n", "本科绩点一般，现大三第一学期刚结束，总绩点3.55（满绩点5），专业课有几门70多分，通信原理79，数字信号处理96...但实际情况复杂，真心感觉后者也没前者学得好；", "\n\n", "竞赛奖项方面：", "\n\n", "一等奖学金（大一）、2020高教社杯数学建模省二等奖（负责编程和写作）、2020ICAN省三等奖（负责作品主体设计）等省奖；", "\n\n", "个人兴趣和能力方面：", "\n\n", "四六级裸考542(口语B+)，480（还准备继续刷分）；", "\n\n", "对软件编程非常感兴趣，学过C，擅长MATLAB（经常帮实验室老师写一些小程序）、Python（计划参加2021蓝桥杯Python）、51单片机、DOS汇编；", "\n\n", "硬件方面只学过51单片机（课程设计满分）、8086/88微处理器（汇编用的比较熟练，下学期还会学EDA设计、FPGA）；", "\n\n", "数学基础比较薄弱，原本看到南邮20年初试专业课还可以选微机原理，而且其实只要是编程实践类的科目我都很感兴趣，后来发现21年开始专业课就只有通原和数字信号处理了，虽有些失落但也不大要紧，毕竟还有比较充裕的时间准备，但还是对理论类科目比较排斥..", "\n\n", "目前最大的困惑是：在本科的学习过程中经常会有一种虚无感，总觉得学的很多理论课用不上实践，导致大三一段时间上课经常走神不认真听讲，本身也不擅长考试突击，应试能力不强，最后其实连主要靠考试周突击的同学都不如，越发觉得自己很没用，获得的奖项、写过的博客、甚至编程能力也派不上什么用场，毕竟不是计算机专业，而且我们学院没有开设数据结构与算法和JAVA（我这一届没有），机器学习也很少接触，因此也并没有打算跨考；", "\n\n", "在2021 年南邮专业方向介绍中看到信号与信息处理中《多媒体技术与图形处理》还更偏向于软硬件，但不清楚这类专业方向实际学起来是什么情况，总而言之，我个人不太想往科研方向发展，将来也想从事一些技术类而非偏学术类的方向，是否有必要考虑专硕？", "\n\n", "在通信类专业方向的选择上，答主您有没有对我一些更好的建议呢？", "\n\n", "看到这里，也许你会觉得我有些思想上的错误，有点不求上进，也恳请您指点吧，谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;浮点&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["项目描述Python解（必采纳）", ["项目描述Python解: （必采纳）", "给定一个数字n（2 ≤ n ≤ 9），将由这个数字组成的1 ~ n位数相加，要求打印出相加后的结果。例如：n = 3，需要计算3+33+333的值，结果为369，打印出369。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;swap&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* x, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *y)&lt;/span&gt; &lt;/span&gt;{            &lt;span class=\"hljs-comment\"&gt;// (1)&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; tmp &amp;#61; *x;\n    *x &amp;#61; *y;\n    *y &amp;#61; tmp;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{   \n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, b, c;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d&amp;#34;&lt;/span&gt;, &amp;amp;a, &amp;amp;b, &amp;amp;c) !&amp;#61; EOF) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a &amp;gt; b) &lt;span class=\"hljs-built_in\"&gt;swap&lt;/span&gt;(&amp;amp;a, &amp;amp;b);        &lt;span class=\"hljs-comment\"&gt;// (2)&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(b &amp;gt; c) &lt;span class=\"hljs-built_in\"&gt;swap&lt;/span&gt;(&amp;amp;b, &amp;amp;c);        &lt;span class=\"hljs-comment\"&gt;// (3)&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a &amp;gt; b) &lt;span class=\"hljs-built_in\"&gt;swap&lt;/span&gt;(&amp;amp;a, &amp;amp;b);        &lt;span class=\"hljs-comment\"&gt;// (4)&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d\\n&amp;#34;&lt;/span&gt;, a, b, c);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;&lt;li&gt;$(1)$ &lt;code class=\"language-javascript\"&gt;swap&lt;/code&gt;这个函数用来实现对两个整数的交换&amp;#xff0c;&lt;code class=\"language-javascript\"&gt;int *x&lt;/code&gt;代表一个指针&amp;#xff0c;指向的是某个变量的地址&amp;#xff0c;函数体执行的就是交换两个变量的操作。其中&amp;#xff0c;&lt;code class=\"language-javascript\"&gt;*x&lt;/code&gt;代表的是取地址中的值。&lt;/li&gt;&lt;li&gt;$(2)$ $(3)$ $(4)$ 布对应的就是上文 解题思路 中提到的三步交换&amp;#xff0c;由于&lt;code class=\"language-javascript\"&gt;swap&lt;/code&gt;函数的参数是指针&amp;#xff0c;这里需要用&lt;code class=\"language-javascript\"&gt;&amp;amp;&lt;/code&gt;符号把变量转换成它的地址&amp;#xff0c;即指针。&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "算法与数字", "Question": ["【第13题】给定三个数 a，b，c，从小到大输出这三个数", ["给定三个数 a，b，c，从小到大输出这三个数，这个怎么做呀", "数字范围是不定的"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我用矩阵乱算算出来了&amp;#xff0c;结题了&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["python通过矩阵操作得到想要的结果", ["[5 4 3 2 1", " 5 4 3 1 2", " 5 4 2 3 1", " 5 4 1 3 2", " 5 4 2 1 3", " 5 4 1 2 3", " 5 3 4 2 1", " 5 3 4 1 2", " 5 2 4 3 1", " 5 1 4 3 2", " 5 2 4 1 3", " 5 1 4 2 3]", "上述矩阵是否存在一个矩阵操作算法得到以下结果", "每一行出现相邻的目标数字，即在该数组中记为0，反之记为1，首尾也算相邻，例如", "S1_2=[0,0,1,1,0,0,0,0,1,1,1,1]", "S1_3=[1,0,0,0,0,1,1,1,0,1,0,1]", "S1_4=[1,1,1,0,1,0,1,0,1,0,0,0]", "S1_5=[0,1,0,1,1,1,0,1,0,0,1,0]", "S2_3=[0,1,0,0,1,0,1,1,1,0,1,0]", "S2_4=[1,1,0,1,0,1,0,1,0,1,0,0]", "S2_5=[1,0,1,0,1,1,1,0,0,0,0,1]", "S3_4=[0,0,1,1,1,1,0,0,0,0,1,1]", "S3_5=[1,1,1,1,0,0,0,0,1,1,0,0]", "S4_5=[0,0,0,0,0,0,1,1,1,1,1,1]", "共10个数组"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以把每个数看做字符串&amp;#xff0c;输入后排序&amp;#xff0c;然后找到相同的字符串最多有多少个&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于如何使用剪枝优化问题", ["问题遇到的现象和发生背景", "\n", "如果两个整数是由完全相同的数字组成，且同一种数字的个数也相等，那么这两个整数称为相似数。", "例如，12300和20310都是由2个0，1个1，1个2，1个3组成，所以它们是相似数。", "而124和120不是相似数，因为组成的数字不同。", "120和1200也不是相似数，因为组成的数字虽然相同，但0的个数不相等，120中有1个0，而1200中有2个0", "多个整数也可以相似。", "给出N个不同的正整数，求最多有多少个数相似。例如，如果最多有3个数相似，则输出3，最多有2个数相似，输出2.如果所有数均不相似，则输出1。", "\n", "这个问题如何在大量数据下进行剪枝优化", "\n", "问题相关代码，请勿粘贴截图", "\n", "#include <bits/stdc++.h>", "\n", "using", " namespace std;\n", "int", " a[", "1000005", "][", "15", "], m[", "1000005", "], s[", "1000005", "];\n", "int", " k = ", "0", ";\n", "int", " num(", "int", " x) {\n    ", "if", " (s[x] != ", "0", ")\n        ", "return", " s[x];\n    ", "int", " cnt = ", "0", ";\n    ", "while", " (x != ", "0", ") {\n        cnt++;\n        x /= ", "10", ";\n    }\n    ", "return", " s[x] = cnt;\n}\n", "void", " fun(", "int", " x) {\n    ", "int", " i = x;\n    ", "while", " (x != ", "0", ") {\n        k = x % ", "10", ";\n        a[i][k]++;\n        x /= ", "10", ";\n    }\n}\n", "bool", " ", "check", "(", "int", " x, ", "int", " y) {\n    ", "for", " (", "int", " i = ", "0", "; i <= ", "9", "; i++) {\n        ", "if", " ((a[x][i]) != (a[y][i]))\n            ", "return", " ", "0", ";\n    }\n    ", "return", " ", "1", ";\n}\n", "int", " main() {\n    ", "int", " c, d, s = ", "0", ", maxn = ", "0", ";\n    cin >> c;\n    ", "for", " (", "int", " i = ", "1", "; i <= c; i++) {\n        cin >> m[i];\n        fun(m[i]);\n    }\n    sort(m + ", "1", ", m + ", "1", " + c);\n    ", "for", " (", "int", " i = ", "1", "; i <= c; i++) {\n        s = ", "1", ";\n        ", "for", " (", "int", " j = i + ", "1", "; j <= c; j++) {\n            ", "if", " (num(m[j]) > num(m[i]))\n                break;\n            ", "if", " (", "check", "(m[i], m[j]) == ", "1", ") {\n                s++;\n                ", "if", " (s >= maxn)\n                    maxn = s;\n            }\n        }\n    }\n    ", "if", " (maxn == ", "0", ")\n        cout << ", "-1", ";\n    ", "else", "\n        cout << maxn;\n    ", "return", " ", "0", ";\n}\n\n", "\n", "运行结果及报错内容", "\n", "对于小数据而言比较容易处理，但是数据大了之后就会用时很长", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n[int(&lt;span class=\"hljs-name\"&gt;&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;&lt;/span&gt;()) for i in range(&lt;span class=\"hljs-name\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-name\"&gt;&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;&lt;/span&gt;()))]\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["py有关列表的简洁写法", ["给出一个n", "下面n行 每行一个数字 将其读入数组", "我的做法：", "\n", "n", "=", "int", "(", "input", "())", "\n", "a", "=[]\n", "for", " ", "i", " ", "in", " ", "range", "(", "n", "):\n    ", "a.append", "(", "int", "(", "input", "()))", "\n\n\n", "\n", "想问下有没有更加简洁的写法"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/032023791966188.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;,i_count;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;,&amp;amp;i_count);\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n    for(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;;&amp;#43;&amp;#43;i)\n    {\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n    }\n    for(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;i_count;&amp;#43;&amp;#43;i)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k;\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;k);\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        bool isFind&amp;#61;&lt;span class=\"hljs-built_in\"&gt;false&lt;/span&gt;;\n        while(&lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;&amp;#43;(&lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt;-&lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;)/&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n            &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt;(a[&lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt;]&amp;#61;&amp;#61;k)\n            {\n                while(a[&lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt;]&amp;#61;&amp;#61;k)\n                {\n                    --&lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt;;\n                }\n                isFind&amp;#61;&lt;span class=\"hljs-built_in\"&gt;true&lt;/span&gt;;\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n                break;\n            }\n            else &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt;(a[&lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt;]&amp;lt;k)\n            {\n                &lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            }\n            else\n            {\n                &lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt;(!isFind)\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    }\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["二分查找求解实在是看不出来了", ["【深基13.例1】查找", "\n", "题目描述", "\n", "输入 $n$ 个不超过 $10^9$ 的单调不减的（就是后面的数字不小于前面的数字）非负整数 $a_1,a_2,\\dots,a_{n}$，然后进行 $m$ 次询问。对于每次询问，给出一个整数 $q$，要求输出这个数字在序列中第一次出现的编号，如果没有找到的话输出 $-1$ 。", "\n", "输入格式", "\n", "第一行 $2$ 个整数 $n$ 和 $m$，表示数字个数和询问次数。", "\n", "第二行 $n$ 个整数，表示这些待查询的数字。", "\n", "第三行 $m$ 个整数，表示询问这些数字的编号，从 $1$ 开始编号。", "\n", "输出格式", "\n", "输出一行，$m$ 个整数，以空格隔开，表示答案。", "\n", "样例 #1", "\n", "样例输入 #1", "\n", "11 ", "3", "\n", "1 ", "3", " ", "3", " ", "3", " ", "5", " ", "7", " ", "9", " ", "11", " ", "13", " ", "15", " ", "15", "\n", "1 ", "3", " ", "6", "\n", "\n", "样例输出 #1", "\n", "1 ", "2", " -", "1", "\n", "\n", "提示", "\n", "数据保证，$1 \\leq n \\leq 10^6$，$0 \\leq a_i,q \\leq 10^9$，$1 \\leq m \\leq 10^5$", "\n", "本题输入输出量较大，请使用较快的 IO 方式。", "\n", "#include <bits/stdc++.h>\nusing namespace std;\nconst ", "int", " ", "N", " = ", "10000005", ";\n", "int", " arr[", "N", "];\n", "int", " main(){\n    ", "int", " ", "n", ",m;\n    scanf(", "\"%d%d\\n\"", ",&", "n", ",&m);\n    for(", "int", " i = ", "1", "; i <= ", "n", "; i++){\n        scanf(", "\"%d\"", ",&arr[i]);\n    }\n    for(", "int", " j = ", "1", "; j <= m; j++){\n        ", "int", " ", "left", " = ", "1", ";\n        ", "int", " ", "right", " = ", "n", ";\n        ", "int", " ", "mid", " = (", "left", " + ", "right", ") / ", "2", ";\n        ", "int", " x;\n        scanf(", "\"%d\"", ",&x);\n        while(", "true", "){\n            ", "if", "(arr[", "mid", "] > x){\n                ", "right", " = ", "mid", " - ", "1", ";\n                ", "mid", " = (", "left", " + ", "right", ") / ", "2", ";\n            }\n            ", "if", "(arr[", "mid", "] < x){\n                ", "left", " = ", "mid", " + ", "1", ";\n                ", "mid", " = (", "left", " + ", "right", ") / ", "2", ";\n            }\n            ", "if", "(arr[", "mid", "] == x) {\n            break;\n            }\n            ", "if", "(", "left", " > ", "right", ") {\n                printf(", "\"%d\"", ",-", "1", ");\n                return ", "0", ";\n            }\n    }\n        ", "int", " b = ", "0", ";\n        for(", "int", " i = ", "1", "; i < ", "mid", "; i++){\n            ", "if", "(arr[", "mid", "-i]==arr[", "mid", "]) {\n                b++;\n            }\n            else break;\n        }\n        printf(", "\"%d \"", ",", "mid", "-b);\n    }\n    return ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; m, &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, deletion;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;m);\n\n    for (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; sumall &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        do\n        {\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;);\n            &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; &amp;gt; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;)\n                &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;;\n            &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;;\n        } while (&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n\n        for (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;; j&amp;#43;&amp;#43;)\n        {\n            sumall &amp;#43;&amp;#61; j;\n        }\n\n        deletion &amp;#61; sumall - &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;;\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, deletion);\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于循环嵌套的问题SOS", ["现有一堆由1,2,3, ..., n (n>=1)组成的共 n-1 个数字，其中丢失了一个数字k，请找出这个数字。", "\n", "输入 ", "\n", "第一行:m 表示测试数据的组数。", "\n", "接下来m行，每行即为一组测试样例。每组样例有n(n <= 1000)个正整数，其中最后一个整数为0，表示结束，不参与计算。", "\n", "输出", "\n", "对每组数据，输出1至n中缺失的那个整数。", "\n", " #include <stdio.h>", "int main()", "{", "    int m,n,max=1,sum=0,deletion;", "    scanf(\"%d\",&m);", "\n", "for(", "int", " i=", "0", ";i<m;i++){\n    scanf(", "\"%d\"", ",&", "n", ");\n    while(", "n", "!=", "0", "){\n        ", "if", "(", "n", ">", "max", "){\n            ", "max", "=", "n", ";\n        }\n        }\n        for(", "int", " j=", "1", ";j<", "max", ";j++){\n            ", "sum", "+=j;\n        }\n        for(", "int", " k=", "0", ";k<", "max", "-", "1", ";k++){\n            ", "sum", "-=", "n", ";\n        }\n            deletion=", "sum", ";    \n    printf(", "\"%d\\n\"", ",deletion);\n}\nreturn ", "0", ";\n", "\n", "}", "\n", "佬们，为什么这个程序是错的呢？（c语言）比如我要输入两组数，但第二组就输不进去了，我也不知道就算输进去能不能运行"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先排序&amp;#xff0c;然后深度优先。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;nums &amp;#61; [&lt;span class=\"hljs-number\"&gt;20375&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;34665&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;26925&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;25060&lt;/span&gt;,\n&lt;span class=\"hljs-number\"&gt;22185&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;24375&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;22680&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;19195&lt;/span&gt;,\n&lt;span class=\"hljs-number\"&gt;19675&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9800&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10280&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;20090&lt;/span&gt;,\n&lt;span class=\"hljs-number\"&gt;22070&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;18765&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;18810&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;19180&lt;/span&gt;,\n&lt;span class=\"hljs-number\"&gt;15070&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;23000&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;18650&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;17320&lt;/span&gt;,\n&lt;span class=\"hljs-number\"&gt;21135&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;22440&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;18175&lt;/span&gt;]\n\ntar &amp;#61; &lt;span class=\"hljs-number\"&gt;250430&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;dfs&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;tar,nums,res&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(res)&amp;#61;&amp;#61;tar:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; res\n    &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(nums)&amp;lt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(res)&amp;gt;tar:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(nums)):\n            temp &amp;#61; dfs(tar,nums[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:],res&amp;#43;[nums[i]])\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; temp: &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; temp\n            &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; temp&amp;#61;&amp;#61;&lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;: &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n\nnums &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sorted&lt;/span&gt;(nums)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(dfs(tar,nums,&lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;()))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;结果&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-section\"&gt;[9800, 10280, 15070, 17320, 18175, 18650, 18765, 19180, 20090, 20375, 21135, 26925, 34665]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;要找出所有的解&amp;#xff0c;只要稍微改一下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;dfs&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;tar,nums,res&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(res)&amp;#61;&amp;#61;tar:\n        all_res.append(res)\n    &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(nums)&amp;lt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(res)&amp;gt;tar:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(nums)):\n            temp &amp;#61; dfs(tar,nums[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:],res&amp;#43;[nums[i]])\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; temp&amp;#61;&amp;#61;&lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;: &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n\nnums &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sorted&lt;/span&gt;(nums)\nall_res&amp;#61;[]\ndfs(tar,nums,&lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;())\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(all_res))\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sorted&lt;/span&gt;(all_res,key&amp;#61;&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;)[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;可以看到总共有323种解&amp;#xff0c;n最少的解是&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;323\n&lt;span class=\"hljs-comment\"&gt;[15070, 18175, 18765, 20090, 22185, 22440, 22680, 24375, 25060, 26925, 34665]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["从23个已知数中取n个数，n个数之和是250430，求是哪几个数之和", ["一共有23个已知数字，然后里面n个数之和是250430，n未知，现在需要知道是由哪几个数字组成了250430这个总数，只需要这个结果就行了，最好把代码也能给我，编程语言不限。证明不存在这个可能的话也可以。", "23个已知数字：", "20375", "34665", "26925", "25060", "22185", "24375", "22680", "19195", "19675", "9800", "10280", "20090", "22070", "18765", "18810", "19180", "15070", "23000", "18650", "17320", "21135", "22440", "18175"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题目1&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-html\"&gt;void fun(char *s)\n{\n    int i, j;\n    for (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; s[i]!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;; i&amp;#43;&amp;#43;)\n        if (s[i]&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; s[i]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;)//错误&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#xff0c;修改为  !(s[i]&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; s[i]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;)原来的条件是判断字符是数字字符&amp;#xff0c;加上取反后才是去掉数字字符\n            s[j] &amp;#61; s[i];  //错误&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#xff1a;修改为s[j&amp;#43;&amp;#43;]&amp;#61;s[i],赋值后&amp;#xff0c;下标需要后移一位\n    s[j] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;\\0&amp;#34;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;题目2&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-html\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{ \n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;43&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;55&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;65&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;87&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;93&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;62&lt;/span&gt;};\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,k,*pa;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; temp;  &lt;span class=\"hljs-comment\"&gt;//在这里添加temp的声明&amp;#xff08;错误1的修改方法&amp;#xff09;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;k&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%3d&amp;#34;&lt;/span&gt;,a[k]);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;;k&amp;#43;&amp;#43;)\n    { \n        pa&amp;#61;a;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;-k&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        { \n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ( *pa&amp;gt;*(pa&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) )\n            { \n                temp&amp;#61;*pa; *pa&amp;#61;*(pa&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;); *(pa&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&amp;#61;temp;&lt;span class=\"hljs-comment\"&gt;//错误1&amp;#xff0c;没有对temp的声明&amp;#xff0c;需要在开头添加int temp;&lt;/span&gt;\n            }\n            pa&amp;#43;&amp;#43;;\n        }\n    }\n    pa &amp;#61; a; &lt;span class=\"hljs-comment\"&gt;//错误2&amp;#xff1a;需要把pa重新指向数组的首地址&amp;#xff0c;需要添加这一句&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;k&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%3d&amp;#34;&lt;/span&gt;,*pa&amp;#43;&amp;#43;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["c程序设计错误代码判断", ["1.字符串在文档处理、基因序列等方面应用广泛。下列给定程序中，函数fun的功能是：依次取出字符串中所有数字字符，形成新的字符串，并取代原字符串。程序有二个错误，写出错行号、原因、和正确代码。", "1  #include <stdio.h>", "2  void fun(char  *s)", "3   {", "4  int  i, j;", "5  for (i=0, j=0; s[i]!='\\0'; i++)", "6    if (s[i]>='0' && s[i]<='9')", "7       s[j] = s[i];", "8  s[j] = \"\\0\";", "9  }", "10  int main()", "11  {", "12  char  item[80];", "13  printf(\"\\nEnter a string :\");", "14  gets(item);", "15  printf(\"\\n\\nThe string is : %s\\n\", item);", "16  fun(item);", "17  printf(\"\\n\\nThe string of changing is : %s\\n\", item);", "18  return 0;", "19  }", "2.排序算法在很多领域得到相当的重视，尤其是在大量数据的处理方面。下列给定程序是使用指针完成冒泡法排序的程序，其中有二个错误，找出其中的错误行和出错原因，写出正确代码。", "1  #include <stdio.h>", "2  int main()", "3  {  int  a[10]={21,43,55,12,65,87,25,93,30,62};", "4     int  i,k,", "pa;", "5     for (k=0;k<10;k++)", "6       printf(\"%3d\",a[k]);", "7     printf(\"\\n\\n\");", "8     for (k=0;k<9;k++)", "9     {  pa=a;", "10       for (i=0;i<10-k-1;i++)", "11        {  if ( *pa>", "(pa+1) )", "12          {  temp=*pa; ", "pa=", "(pa+1); *(pa+1)=temp;", "13           }", "14           pa++;", "15        }", "16      }", "17      for (k=0;k<10;k++)", "18        printf(\"%3d\",*pa++);", "19      printf(\"\\n\\n\");", "20      return 0;", "21   }"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;递归遍历是比较简单的方法&amp;#xff0c;数字长度有限制吗&amp;#xff0c;长度大的话递归的效率比较低。&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/001946150476163.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;参考如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; _CRT_SECURE_NO_WARNINGS 1&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; g_ys[][&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;def&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;ghi&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;jkl&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;mno&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;pqrs&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;tuv&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;wxyz&amp;#34;&lt;/span&gt; };\n&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; g_out[&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; };\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; g_i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, g_j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* p)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, len;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x &amp;#61; p[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (p[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;)\n    {\n        g_out[g_i][g_j&amp;#43;&amp;#43;] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;\n        g_i&amp;#43;&amp;#43;;\n        g_j--;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    len &amp;#61; &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(g_ys[x]);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; len; i&amp;#43;&amp;#43;)\n    {\n        g_out[g_i][g_j&amp;#43;&amp;#43;] &amp;#61; g_ys[x][i];\n        &lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(p &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n        g_j--;\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; str[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; };\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j, len;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;digits &amp;#61; &amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;gets_s&lt;/span&gt;(str);\n    len &amp;#61; &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(str);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (len &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(str);\n    &lt;span class=\"hljs-comment\"&gt;//填充矩阵&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; g_i; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; len; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (g_out[i][j] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;)\n            {\n                g_out[i][j] &amp;#61; g_out[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j];\n            }\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;, g_out[i][j]);\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["来求电话号码的字母组合", ["看道一到比较有意思的一题，主要是通过输入的数字返回特定的字符串，大家看一下怎么做更好"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;以后还是多多自己动手做做吧&amp;#xff0c;这训练的就是基础&amp;#xff0c;我也是半个新手&amp;#xff0c;写一个给你&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;# 问题1\ndef question_1(num_float):\n    return round(num_float)  # python自带化整函数\n\n\n# 问题2\ndef question_2(year_num):  # 问题二求的是第二年水獭的数量\n    if year_num &amp;lt; 100000:\n        return question_1(year_num * 1.784)\n    elif year_num &amp;gt;&amp;#61; 100000:\n        return question_1(year_num * 1.24)\n\n\n# 问题3&amp;#xff08;a&amp;#xff09; 求的是n年后水獭的数量\ndef predictV1(time, number):\n    final_num &amp;#61; number\n    if time &amp;gt; 0:\n        for i in range(time):\n            final_num &amp;#61; question_2(final_num)\n    return final_num\n\n\n# 问题3&amp;#xff08;b&amp;#xff09;根据参数显示水獭数量变化情况&amp;#xff0c;并返回水獭最终的数量\ndef previsionV2(time, number, display, intyear):\n    final_num &amp;#61; number\n    if display:\n        print(intyear, &amp;#39;:&amp;#39;, final_num)\n    if time &amp;gt; 0:\n        for i in range(time):\n            final_num &amp;#61; question_2(final_num)\n            if display:\n                print(intyear &amp;#43; i &amp;#43; 1, &amp;#39;:&amp;#39;, final_num)\n    return final_num\n\n\n# 问题4 计算水獭数量到达阈值的年份\ndef question_4(threshold, nbInit, yearInit):\n    time_spent &amp;#61; 0\n    num &amp;#61; nbInit\n    while True:\n        if num &amp;gt;&amp;#61; threshold:\n            return yearInit &amp;#43; time_spent\n        num &amp;#61; question_2(num)\n        time_spent &amp;#43;&amp;#61; 1\n\n\nif __name__ &amp;#61;&amp;#61; &amp;#39;__main__&amp;#39;:\n    final_num_1 &amp;#61; predictV1(3, 40000)\n    print(&amp;#39;predictV1 final number is:&amp;#39;, final_num_1)\n\n    print()\n    final_num_2 &amp;#61; previsionV2(3, 40000, True, 2020)\n    print(&amp;#39;predictV2 final number is:&amp;#39;, final_num_2)\n\n    print()\n    year &amp;#61; question_4(157859,40000,2020)\n    print(&amp;#39;Ending year is&amp;#39;, year)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["新人，求大佬帮忙解答", ["本练习的目的是为预测水獭数量提供算法。爱丽丝和鲍勃（Alice and Bob）估计，当水獭的数量不太多时，水獭的数量每年将增长78.4％。然而，一旦水獭数量达到100,000人，各种因素就会导致繁殖减慢和更高的死亡率。因此，当水獭种群中至少有100,000人时，一年内仅增加24％。", "\n\n", "注意：除非另有明确说明，否则对于每个问题，您都可以调用先前问题中要求的功能（即使您自己不知道如何编写它们）。", "\n\n", "问题1：", "编写一个舍入函数，将浮点数x（假定为正数或零）作为参数，并返回最接近x的整数。如果X恰恰是在两个整数之间的中间，我们会总结（例如： 倒圆（16.5）是等于到17）。我们假定有一个地板函数它接受一个浮子作为参数并返回其下部的整数部分（例如： 地板（16.9）是等于以16）。（因此，您可以在不重写的情况下呼叫发言权）。", "\n\n", "问题2：", "编写以下函数，将某个种群中的水獭数量作为参数，并返回第二年该种群中的水獭数量。该数字必须是整数（因为我们不能有水獭的非整数分数），因此我们将四舍五入到最接近的整数。", "\n\n", "问题3：", "\n\n", "a）编写一个函数predictV1，该函数将数年以及水獭初始种群中包含的水獭数量作为参数。然后，您的函数将返回所需年限后水獭的数量。请注意，如果所需的年数等于0，则您的函数应该起作用，并且在这种情况下，将返回初始种群中水獭的数量。", "\n例如：  previsionV1（3，40,000 ）将返回157,859，即3年后从40,000只水獭开始的水獭数量。", "\nprevisionV1（0，45000）将返回45000。", "\n\n", "b）编写一个函数previsionV2，该函数将年份，初始水獭种群中包含的水獭数量，显示的布尔值和整数yearInit作为参数。如果display为false，则该功能将与previsionV1完全相同。但是，如果显示为True，则除了intyear是学习的第一年之外，除了在要求的年限之后返回水獭的数量外，它还将显示每年的相应水獭数量。", "\n我们添加了一个附加约束：您的函数previsionV2不得调用previsionV1，这只是一个教育性的中间步骤，可帮助您编写previsionV2。", "\n注意，请注意使最优雅/分解的算法成为可能。", "\n\n", "示例：  previsionV2（3，40000，True，2020）将显示：", "\n\n", "\n2020：40,000 \n2021：71360 \n2022：127306 \n2023：157859", "\n\n", "并将返回157859。", "\n\n", "问题4：", "写一个函数会达到其把参数作为一个门槛整数，整数nbInit对应于初始种群水獭的数量，和一个整数yearInit对应研究的第一年，其将返回一年水獭的数量将达到或超过指定的阈值。", "\n请注意：乍一看，使用上一个问题中编写的预测功能似乎与您有关。但是，如果您采用这种策略，则由于重复该算法，很有可能导致过多的不必要的计算。我们将在三月至四月的有关复杂性的章节中更详细地介绍这一点。", "\n\n", "示例：将", "\n达到（40,000，45,000，2020）的价值是2020年，因为我们要通过在2020年从45,000獭开始达到40,000水獭的阈值。将", "\n达到（120,000，40,000，2020）的价值是2022年，因为我们要达到120,000只水獭，2020年为40,000只水獭。将", "\n达到（157859，40,000，2020）是2023年将达到（100,000，40,000，2010"]], "Tag": "算法设计"}
{"Answer": "原先定义的球队数组可以使用二维数组，第一维是球队好，第二维是球队名。就可以了。\r\n也可以将球队数组定义成Map，也可以。结合前面提供的方法，就可以输出球队号和球队名。\r\n这个由你自由选择", "Konwledge_Point": "算法与数字", "Question": ["C++数组排序输出的问题", ["数组中的每个量表示一支球队，对数组进行随机数分配，然后根据随机数进行选择排序，排序完了以后，如何输出这些数字原先对应的球队的排序（要求输出的是球队的中文名）？数组是int类型。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;25行应该是  arr[j &amp;#43; 1 ] &amp;#61; temp;&lt;br /&gt;你写成  arr[j &amp;#43; i ] &amp;#61; temp;啦&lt;/p&gt;\n&lt;p&gt;可以的话采纳一下&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["为什么我的C++冒泡排序不正确", ["在b站学习C++,按照教程的代码敲了一冒泡排序。", "结果却跟教程的不一样，我发现最后一位数字无法交换", "使用的软件是VS2019", "该图为运行结果图", "代码如下：", "\n", " ", "#", "include", " ", "<iostream>", "\n", "using", " ", "namespace", " std;\n", "int", " ", "main", "()", " ", "{\n    ", "int", " arr[", "9", "] = {", "4", ",", "2", ",", "9", ",", "0", ",", "5", ",", "7", ",", "1", ",", "3", ",", "8", "};\n    cout << ", "\"冒泡排序前\"", " << endl;\n    ", "for", " (", "int", " i = ", "0", "; i < ", "9", "; i++)\n    {\n        cout << arr[i] << ", "\" \"", ";\n    }\n    cout << endl;\n    ", "int", " len = ", "sizeof", "(arr) / ", "sizeof", "(arr[", "0", "]);\n    ", "//开始冒泡排序", "\n    ", "//总共排序的排序轮数为 元素个数-1", "\n    ", "for", " (", "int", " i = ", "0", "; i < len ", "-1", "  ; i++)\n    {\n        ", "//内存循环对比", "\n        ", "//次数=    元素个数-当前轮数- 1", "\n        ", "for", " (", "int", " j = ", "0", "; j < len  - i ", "-1", " ; j++)\n        {\n            ", "//如果第一个数字比第二个数字大，就交换两个数字", "\n            ", "if", " (arr[j]>arr[j + ", "1", "])\n            {\n                ", "int", " temp = arr[j];\n                arr[j] = arr[j + ", "1", "];\n                arr[j + i ] = temp;\n            }\n        }\n    }\n    ", "//排序后结果", "\n\n    cout << ", "\"冒泡排序后\"", " << endl;\n    ", "for", " (", "int", " i = ", "0", "; i < len; i++)\n    {\n        cout << arr[i] << ", "\" \"", ";\n    }\n    cout << endl;\n    ", "system", "(", "\"pause\"", ");\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;#include&amp;lt;iostream&amp;gt;\n#include&amp;lt;cstring&amp;gt;\nusing namespace std;\nchar a[&lt;span class=\"hljs-number\"&gt;82&lt;/span&gt;];\nint main() {\n    cin&amp;gt;&amp;gt;a;\n    int lena&amp;#61;strlen(a);\n    for (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; lena; i&amp;#43;&amp;#43;) {\n        if (a[i] &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; a[i] &amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;){\n            a[i] &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;33&lt;/span&gt;;\n            if(a[i]&amp;gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;)\n                a[i]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;;\n        }else if (a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;b&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;)\n            a[i] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;;\n        else if (a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;d&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;e&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;)\n            a[i] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;;\n        else if (a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;g&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;h&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;)\n            a[i] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;;\n        else if (a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;j&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;k&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;)\n            a[i] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;5&amp;#39;&lt;/span&gt;;\n        else if (a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;m&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;n&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;)\n            a[i] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;6&amp;#39;&lt;/span&gt;;\n        else if (a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;p&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;r&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;)\n            a[i] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;7&amp;#39;&lt;/span&gt;;\n        else if (a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;u&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;v&amp;#39;&lt;/span&gt;)\n            a[i] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;8&amp;#39;&lt;/span&gt;;\n        else if (a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;w&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt; || a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;)\n            a[i] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;;    \n    }\n    for (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; lena; i&amp;#43;&amp;#43;) {\n        cout &amp;lt;&amp;lt; a[i];\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;br /&gt;\n\n&lt;p&gt;觉得有用的话&lt;font color=\"red\"&gt;&lt;strong&gt;采纳&lt;/strong&gt;&lt;/font&gt;一下哈&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["输入格式 输入包括多个测试数据，输入是一个明文，密码长度不超过80个字符。  输出格式 输出老王真正的密文。下面的这个代码只能输出老王的密码其他的的就不可以了，不知道咋办了", ["假设老王原来一个BBS上的密码为zvbo941987,为了方便记忆，他通过一种算法把这个密码变换成YUANzi1987，这个密码是他的名字和出生年份，怎么忘都忘不了，而且可以明目张胆地放在显眼的地方而不被别人知道真正的密码。 他是这么变换的，大家都知道手机上的字母： 1--1， abc--2, def--3, ghi--4, jkl--5, mno--6, pqrs--7, tuv--8 wxyz--9, 0--0,就这么简单，老王把密码中出现的小写字母都变成对应的数字，数字和其他的符号都不做变换，声明：密码中没有空格，而密码中出现的大写字母则边成小写之后往后移一位，如：X，先边成小写，再往后移一位，不就是y了嘛，简单吧。记住，z往后移是a哦。", "\n", "\n#include<iostream>\nusing namespace std;\n\nint main(){\n    char a[", "10", "];\n    for (int i = ", "0", "; i < ", "10", "; i++)\n    {\n        cin >> a[i];\n    }\n    for (int i = ", "0", "; i < ", "4", "; i++) {\n        if (a[i] >= ", "65", " && a[i] < ", "96", ")\n            a[i] += ", "33", ";\n        else if(a[i]=", "96", ")\n            a[i]=", "97", ";\n    }\n    for(int i=", "4", ";i<", "6", ";i++){\n        if (a[i] == ", "'a'", " || a[i] == ", "'b'", " || a[i] == ", "'c'", ")\n            a[i] = ", "'2'", ";\n        else if (a[i] == ", "'d'", " || a[i] == ", "'e'", " || a[i] == ", "'f'", ")\n            a[i] = ", "'3'", ";\n        else if (a[i] == ", "'g'", " || a[i] == ", "'h'", " || a[i] == ", "'i'", ")\n            a[i] = ", "'4'", ";\n        else if (a[i] == ", "'j'", " || a[i] == ", "'k'", " || a[i] == ", "'l'", ")\n            a[i] = ", "'5'", ";\n        else if (a[i] == ", "'m'", " || a[i] == ", "'n'", " || a[i] == ", "'o'", ")\n            a[i] = ", "'6'", ";\n        else if (a[i] == ", "'p'", " || a[i] == ", "'q'", " || a[i] == ", "'r'", " || a[i] == ", "'s'", ")\n            a[i] = ", "'7'", ";\n        else if (a[i] == ", "'t'", " || a[i] == ", "'u'", " || a[i] == ", "'v'", ")\n            a[i] = ", "'8'", ";\n        else if (a[i] == ", "'w'", " || a[i] == ", "'x'", " || a[i] == ", "'y'", " || a[i] == ", "'z'", ")\n            a[i] = ", "'9'", ";\n        }\n    for (int i = ", "0", "; i < ", "10", "; i++){\n        cout << a[i]; }\n    return ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用GPTᴼᴾᴱᴺᴬᴵ&lt;br /&gt;这段代码看起来是Smarty模板引擎的语法&amp;#xff0c;其中包含了一个条件判断和一个输出语句。&lt;/p&gt;\n&lt;p&gt;如果要在输出语句中直接减去固定数字3&amp;#xff0c;可以在输出语句中使用数学计算符号“-”&amp;#xff0c;例如&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-swift\"&gt;{#&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; $refrundstate &amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; $refrundamount &amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;0.00&amp;#34;&lt;/span&gt;#}&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;{#else#}{#$staticmoney[&lt;span class=\"hljs-string\"&gt;&amp;#39;business&amp;#39;&lt;/span&gt;]&lt;span class=\"hljs-number\"&gt;-3&lt;/span&gt;|string_format:&lt;span class=\"hljs-string\"&gt;&amp;#34;%.2f&amp;#34;&lt;/span&gt;#}{#/&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;#}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在这个修改后的代码中&amp;#xff0c;我们将原始的输出语句 {#$staticmoney[&amp;#39;business&amp;#39;]|string_format:&amp;#34;%.2f&amp;#34;#} 修改为了 {#$staticmoney[&amp;#39;business&amp;#39;]-3|string_format:&amp;#34;%.2f&amp;#34;#}&amp;#xff0c;在这个新的输出语句中&amp;#xff0c;我们直接从 $staticmoney[&amp;#39;business&amp;#39;] 中减去了数字3&amp;#xff0c;并使用 string_format 进行了格式化处理&amp;#xff0c;保留了两位小数。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于#else#的问题，如何解决？", ["求帮忙看下这段代码怎么直接减去固定数字3", "￥{#if $refrundstate ==1 && $refrundamount ==\"0.00\"#}0{#else#}{#$staticmoney['business']|string_format:\"%.2f\"#}{#/if#}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在解析文本的时候&amp;#xff0c;是根据Huffman树来解析压缩文本的.因为所有的字符都在叶子节点上&amp;#xff0c;所以解析查找字符的时候直接找到叶子节点就可以取出对应的字符了&amp;#xff1b;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于同一二叉树的最佳前缀码的疑问", ["\n", "如图，黑色方框内的是重点，其余的圈画请自行忽略。", "可以看到有三个权值为10的八进制数，分别是3.4.5，最优二叉树没问题，问题在于三个权值都是10的八进制数的最佳前缀码，怎么知道哪个最佳前缀码对应哪个八进制数呢？图一说100亻专3，101传4，0001亻专5，既然权值相同，而且画最优二叉树的时候只看权值，也不看权值对应的八进制数字，那么能不能让101传3，0001传4，100传5呢？"]], "Tag": "算法设计"}
{"Answer": "1. 7次\r\n2. 45 64 4 35 25 55 82 89 29 10 15", "Konwledge_Point": "算法与数字", "Question": ["数据结构问题求大神回答呀！！！小弟感激不尽！（可以分开了回答不用一次回答完）", ["1.对于键值序列{38,73,52,15,64,40,48,55,26,12}，用筛选法建最小值堆，共交换元素多少次？ ", "\n\n", "2.从空二叉树开始，严格按照二叉搜索树的插入算法（不进行旋转平衡），逐个插入关键码{15, 82, 10, 4, 55, 89, 29, 45, 54, 35, 25}构造出一颗二叉搜索树，对该二叉搜索树按照后序遍历得到的序列为（元素与元素之间用一个空格隔开）", "\n\n", "3.对于以下等价类，采用“加权合并规则”（也 称“重量权衡合并规则”），进行并查运算，给出最后父结点索引序列。", "\n\n", "1-2 5-1 1-6 0-3 7-4 6-9 5-3 0-8 4–8", "\n\n", "注意：当合并大小相同的两棵树的时候，将第二棵树的根指向第一棵树的根；根结点的索引是它本身；数字之间用一个空格隔开", "\n\n", "\n", "\n", "根据伪满二叉树的前序序列，求ltag-rlink的二叉树前序遍历", "\n\n", "比如：给出伪满二叉树的前序序列如下：", "\n\n", "A' B' D G' / H C' E' F I /", "\n\n", "则可以求出ltag-rlink的二叉树前序遍历为", "\n\n", "0A5 0B3 1D-1 1G4 1H-1 0C-1 0E8 1F-1 1I-1", "\n\n", "(注：各个结点按照“ltag结点名rlink”的方式给出，结点之间用一个空格分隔）", "\n\n", "现给出伪满二叉树的前序序列如下：", "\n\n", "A' B' C' / I H D' E' G / F", "\n\n", "则所求出ltag-rlink的二叉树前序遍历为："]], "Tag": "算法设计"}
{"Answer": "应该是视频错了\r\n\r\n这里不会无限递归\r\nif(cur==n&amp;&amp;isP(r[0]+r[n-1]))\r\n这是递归终止条件", "Konwledge_Point": "算法与数字", "Question": ["看不懂这个回溯，要什么条件才能执行这个回溯呢？", ["题目描述：", "\n素数环:从1到n这n个数摆成一个环，要求相邻的两个数的和是一个素数。", "\n\n", "大佬们应该都接触过这个题，我就不详细说别的了。", "\n\n", "本人刚接触递归回溯这个算法，无法理解", "\n我怎么总觉得到了dfs(n,r,cur+1)这一行之后会一直递归下去呢？", "\n如果递归到满足if(cur==n&&isP(r[0]+r[n-1]))的时候就结束，那如果不满足这个条件难道一直递归下去吗？我怎么感觉没出口呢？？", "\n在什么条件下才会执行r[cur]=0这条回溯语句呢？", "\n求大佬们解答，救救孩子吧", "\n\n", "代码选自蓝桥杯郑未老师的视频，视频里老师说这个回溯语句加不加都行，但是我运行之后发现不加回溯语句的话结果是不对的。", "\n\n", "import java.util.Scanner;\n\npublic class 素数环 {\n\n    public static void main(String[] args) {\n\n        Scanner sss=new Scanner(System.in);\n        int n=sss.nextInt();\n        int r[]=new int[n];\n        r[0]=1;\n        dfs(n,r,1);\n    }\n\n    public static void dfs(int n,int r[],int cur) {\n\n        if(cur==n&&isP(r[0]+r[n-1])) {    //填到末尾了，并且首尾相加为素数才算成功\n            print(r);\n            return;\n        }\n        for(int i=2;i<=n;i++) {        //尝试用每个数字填到cur这个位置\n            if(check(r,i,cur)) {       //数组中没有i这个数，且i和上一个数之和为素数\n                r[cur]=i;              //将i放在cur的位置，并向前走一步\n                dfs(n,r,cur+1);\n                r[cur]=0;              //回溯\n            }\n        }\n    }\n\n    public static void print(int a[]) {\n\n        for(int i=0;i<a.length;i++) {\n            System.out.print(a[i]+(i==a.length-1?\"\":\" \"));\n        }\n        System.out.println();\n    }\n\n\n\n    public static boolean check(int a[],int i,int cur){    //检测i这个数能否放到cur这个位置。\n        for(int e:a) {\n            if(e==i||!isP(a[cur-1]+i))  return false;   \n        }\n\n        return true;\n    }\n\n\n    public static boolean isP(int x) {     //判定是否为素数\n\n        for(int i=2;i*i<=x;i++) {\n\n            if(x%i==0)   return false;\n        }\n        return true;\n    }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;宏展开大概是这样子吧。标准C必须要有返回类型&amp;#xff0c;我加上int为返回类型。&lt;br /&gt;但是貌似逻辑有问题&amp;#xff0c;运行出错&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;stdio.h&amp;gt;\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; r, a;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;P(&lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;\n{\n    return y - ~y &amp;lt;&amp;lt; x;\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Z(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;\n{\n    return r &amp;#61; x % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; ? &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; : &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-constructor\"&gt;Z(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;/&lt;/span&gt; 2)&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;L(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;\n{\n    return x&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=\"hljs-constructor\"&gt;Z(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;;\n}\n\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;S(&lt;span class=\"hljs-params\"&gt;v&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;c&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;t&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;\n        f &amp;#61; &lt;span class=\"hljs-constructor\"&gt;L(&lt;span class=\"hljs-params\"&gt;t&lt;/span&gt;)&lt;/span&gt;,\n        x &amp;#61; r;\n    {\n        return f - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; ? f &amp;gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; ? f - v ? t - (f &amp;gt; v)&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;c : y : &lt;span class=\"hljs-constructor\"&gt;P(&lt;span class=\"hljs-params\"&gt;f&lt;/span&gt;, P(S(&lt;span class=\"hljs-params\"&gt;v&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;c&lt;/span&gt;, L(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;), &lt;span class=\"hljs-constructor\"&gt;S(&lt;span class=\"hljs-params\"&gt;v&lt;/span&gt; &amp;#43; 2, &lt;span class=\"hljs-params\"&gt;t&lt;/span&gt; &amp;#61; S(4,13,-4, &lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;)&lt;/span&gt;, c, &lt;span class=\"hljs-constructor\"&gt;Z(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;)))\n            : &lt;span class=\"hljs-constructor\"&gt;A(S(&lt;span class=\"hljs-params\"&gt;v&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;c&lt;/span&gt;, L(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;),\n                &lt;span class=\"hljs-constructor\"&gt;S(&lt;span class=\"hljs-params\"&gt;v&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;c&lt;/span&gt;, Z(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;));\n    }\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;A(&lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;\n{\n    return &lt;span class=\"hljs-constructor\"&gt;L(&lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;)&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n               ? &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-constructor\"&gt;P(&lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;\n               : &lt;span class=\"hljs-constructor\"&gt;S(4, &lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, 4, Z(&lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;)&lt;/span&gt;);\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;D(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;\n        f,\n        d,\n        c &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,\n        t &amp;#61; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,\n        u &amp;#61; &lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (x&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;D(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt; - 1)&lt;/span&gt;, (x /&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;( &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\n      d &amp;#61; L ( L ( D (x) ) ),\n         f &amp;#61; L ( r ),\n         x &amp;#61; L ( r ),\n         c - r&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;(\n            L ( u)&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;L ( r) - f&lt;span class=\"hljs-operator\"&gt; ||\n            &lt;/span&gt;(x /&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;( u &amp;#61; S (&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, d, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, r ), \n                   t &amp;#61; A (t, d) ),\n            f&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;amp; (x /&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;(  c &amp;#61; P ( d, c ), \n                              t  &amp;#61; &lt;span class=\"hljs-constructor\"&gt;S(4,13,-4, &lt;span class=\"hljs-params\"&gt;t&lt;/span&gt; )&lt;/span&gt;, \n                              u  &amp;#61; &lt;span class=\"hljs-constructor\"&gt;S(4,13,-4, &lt;span class=\"hljs-params\"&gt;u&lt;/span&gt;)&lt;/span&gt; )\n             ),\n         c&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;(x /&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;(\n            t &amp;#61; P (\n               ~u &amp;amp; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &lt;span class=\"hljs-pattern-match\"&gt;| (x &lt;span class=\"hljs-operator\"&gt;/&lt;/span&gt;&amp;#61; 2) % 2 &lt;span class=\"hljs-operator\"&gt;&amp;amp;&amp;amp;&lt;/span&gt; (\n                  u &amp;#61; 1 &amp;lt;&amp;lt; &lt;span class=\"hljs-constructor\"&gt;P&lt;/span&gt; ( &lt;span class=\"hljs-constructor\"&gt;L&lt;/span&gt; ( c ),  u) ), \n               &lt;span class=\"hljs-constructor\"&gt;P&lt;/span&gt; ( &lt;span class=\"hljs-constructor\"&gt;L&lt;/span&gt; ( c ),  t) ),\n            c &amp;#61; r  ),\n         u &lt;span class=\"hljs-operator\"&gt;/&lt;/span&gt; 2 &amp;amp; (x &lt;span class=\"hljs-operator\"&gt;/&lt;/span&gt;&amp;#61; 2) % 2 &lt;span class=\"hljs-operator\"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ( \n            c &amp;#61; &lt;span class=\"hljs-constructor\"&gt;P&lt;/span&gt; ( t, c ), \n            u  &amp;#61; &lt;span class=\"hljs-constructor\"&gt;S(4,13,-4, &lt;span class=\"hljs-params\"&gt;t&lt;/span&gt; )&lt;/span&gt;, \n            t &amp;#61; 9 );\n    {\n        return a &amp;#61; &lt;span class=\"hljs-constructor\"&gt;P(P(&lt;span class=\"hljs-params\"&gt;t&lt;/span&gt;, P(&lt;span class=\"hljs-params\"&gt;u&lt;/span&gt;, P(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;c&lt;/span&gt;)&lt;/span&gt;)),\n                     a);\n    }\n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main()\n{\n    return &lt;span class=\"hljs-constructor\"&gt;D(D(D(D(D(99)&lt;/span&gt;))));\n}\n\n\n&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["有什么办法比较方便的直接替换宏吗？或者看一下这个程序替换宏后的样子？", ["有没有什么工具或是编译器、方法之类的能自动替换宏定义？", "是有一个程序为了尽可能节省字符数量用了大量宏定义，我想看懂它，但全是宏实在看不明白", "\n", "#define", " ", "R", " ", "{", " ", "return", "\n", "#define", " ", "P", " ", "P", " ", "(", "\n", "#define", " ", "L", " ", "L", " ", "(", "\n", "#define", " ", "T", " ", "S", " ", "(", "v", ",", " ", "y", ",", " ", "c", ",", "\n", "#define", " ", "C", " ", ")", ",", "\n", "#define", " ", "X", " ", "x", ")", "\n", "#define", " ", "F", " ", ")", ";", "}", "\n\n", "int", " ", "r", ",", " ", "a", ";", "\n", "P", " ", "y", ",", " ", "X", "\n   ", "R", " ", "y", " ", "-", " ", "~", "y", " ", "<<", " ", "x", ";", "\n", "}", "\n", "Z", " ", "(", "X", "\n   ", "R", " ", "r", " ", "=", " ", "x", " ", "%", " ", "2", " ", "?", " ", "0", " ", ":", " ", "1", " ", "+", " ", "Z", " ", "(", "x", " ", "/", " ", "2", " ", "F", "\n", "L", " ", "X", "\n   ", "R", " ", "x", " ", "/", " ", "2", " ", ">>", " ", "Z", " ", "(", "x", " ", "F", "\n", "#define", " ", "U", " ", "=", " ", "S", "(", "4", ",", "13", ",-", "4", ",", "\n", "T", "  ", "t", ")", "\n", "{", "\n   ", "int", "\n      ", "f", " ", "=", " ", "L", " ", "t", " ", "C", "         \n      ", "x", " ", "=", " ", "r", ";", "\n   ", "R", "\n         ", "f", " ", "-", " ", "2", " ", "?", "\n         ", "f", " ", ">", " ", "2", " ", "?", "\n         ", "f", " ", "-", " ", "v", " ", "?", " ", "t", " ", "-", " ", "(", "f", " ", ">", " ", "v", ")", " ", "*", " ", "c", " ", ":", " ", "y", " ", ":", "\n         ", "P", " ", "f", ",", " ", "P", " ", "T", "  ", "L", " ", "X", "  ", "C", " \n                          ", "S", " ", "(", "v", "+", "2", ",", " ", "t", "  ", "U", " ", "y", " ", "C", "  ", "c", ",", " ", "Z", " ", "(", "X", " ", ")", ")", ")", "\n         ", ":", "\n         ", "A", " ", "(", "T", "  ", "L", " ", "X", "  ", "C", " \n                ", "T", "  ", "Z", " ", "(", "X", " ", ")", " ", "F", "\n", "}", "\n", "A", " ", "(", "y", ",", " ", "X", "\n   ", "R", " ", "L", " ", "y", ")", " ", "-", " ", "1", "\n      ", "?", " ", "5", " ", "<<", " ", "P", " ", "y", ",", " ", "X", " \n      ", ":", " ", "S", " ", "(", "4", ",", " ", "x", ",", " ", "4", ",", " ", "Z", " ", "(", "r", ")", " ", "F", "\n", "#define", " ", "B", " ", "(", "x", " ", "/=", " ", "2", ")", " ", "%", " ", "2", " ", "&&", " ", "(", "\n", "D", " ", "(", "X", " \n", "{", "\n   ", "int", "\n      ", "f", ",", "\n      ", "d", ",", "\n      ", "c", " ", "=", " ", "0", ",", "\n      ", "t", " ", "=", " ", "7", ",", "\n      ", "u", " ", "=", " ", "14", ";", "\n   ", "while", " ", "(", "x", " ", "&&", " ", "D", " ", "(", "x", " ", "-", " ", "1", " ", "C", "  ", "B", " ", "1", ")", ")", "\n      ", "d", " ", "=", " ", "L", " ", "L", " ", "D", " ", "(", "X", " ", ")", " ", "C", "\n         ", "f", " ", "=", " ", "L", " ", "r", " ", "C", "\n         ", "x", " ", "=", " ", "L", " ", "r", " ", "C", "\n         ", "c", " ", "-", " ", "r", " ", "||", " ", "(", "\n            ", "L", " ", "u", ")", " ", "||", " ", "L", " ", "r", ")", " ", "-", " ", "f", " ", "||", "\n            ", "B", " ", "u", " ", "=", " ", "S", " ", "(", "4", ",", " ", "d", ",", " ", "4", ",", " ", "r", " ", "C", " \n                   ", "t", " ", "=", " ", "A", " ", "(", "t", ",", " ", "d", ")", " ", "C", "\n            ", "f", " ", "/", " ", "2", " ", "&", " ", "B", "  ", "c", " ", "=", " ", "P", " ", "d", ",", " ", "c", " ", "C", " \n                              ", "t", "  ", "U", " ", "t", " ", "C", " \n                              ", "u", "  ", "U", " ", "u", ")", " ", ")", "\n             ", "C", "\n         ", "c", " ", "&&", " ", "B", "\n            ", "t", " ", "=", " ", "P", "\n               ", "~", "u", " ", "&", " ", "2", " ", "|", " ", "B", "\n                  ", "u", " ", "=", " ", "1", " ", "<<", " ", "P", " ", "L", " ", "c", " ", "C", "  ", "u", ")", " ", "C", " \n               ", "P", " ", "L", " ", "c", " ", "C", "  ", "t", ")", " ", "C", "\n            ", "c", " ", "=", " ", "r", "  ", "C", "\n         ", "u", " ", "/", " ", "2", " ", "&", " ", "B", " \n            ", "c", " ", "=", " ", "P", " ", "t", ",", " ", "c", " ", "C", " \n            ", "u", "  ", "U", " ", "t", " ", "C", " \n            ", "t", " ", "=", " ", "9", " ", ")", ";", "\n   ", "R", " ", "a", " ", "=", " ", "P", " ", "P", " ", "t", ",", " ", "P", " ", "u", ",", " ", "P", " ", "x", ",", " ", "c", ")", ")", " ", "C", " \n                                ", "a", " ", "F", "\n", "}", "\n", "main", " ", "(", ")", "\n   ", "R", " ", "D", " ", "(", "D", " ", "(", "D", " ", "(", "D", " ", "(", "D", " ", "(", "99", ")", ")", ")", ")", " ", "F", "\n\n", "\n", "PS：这是一个在假设无限大内存没有整形上限的情况下，输出一个巨大的数字的程序，这个数字非常大，远远超越想象。所以我想知道生成这个数字的D函数的工作原理"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我跟你说的这句话第一个字为什么是“我”呢&lt;br /&gt;你看代码不要只看一句啊&amp;#xff0c;要结合上下文整体的去看&lt;br /&gt;你要看这两个变量后面干什么用了&lt;br /&gt;你不管它后面干什么用就纠结为什么给它赋值&amp;#xff0c;那可不是看不懂吗&lt;br /&gt;-&amp;#61;-&amp;#61;-&amp;#61;&lt;br /&gt;这就好比你去看淘宝商家发货&amp;#xff0c;你不看订单&amp;#xff0c;只看商家把商品放到箱子里&amp;#xff0c;然后就去问为什么这个箱子要放这个商品呢&amp;#xff0c;你说呢&lt;br /&gt;-&amp;#61;-&amp;#61;-&amp;#61;-&amp;#61;&lt;br /&gt;如果你看不懂代码&amp;#xff0c;那我简单给你讲讲二分查找到底前前后后的是在干什么&lt;br /&gt;首先定义两个指针&amp;#xff0c;或者用做索引的变量&amp;#xff0c;left和right&amp;#xff0c;left指向0&amp;#xff0c;right指向最后一个元素&lt;br /&gt;还需要一个middle来指向中间&amp;#xff0c;middle&amp;#61;(left&amp;#43;right)/2&lt;br /&gt;然后循环&amp;#xff0c;判断middle需要往更大的方向移动还是更小的方向移动&lt;br /&gt;如果大&amp;#xff0c;让left&amp;#61;middle&amp;#43;1&amp;#xff0c;重新计算middle&lt;br /&gt;如果小&amp;#xff0c;让right&amp;#61;middle-1&amp;#xff0c;重新计算middle&lt;br /&gt;如此循环&lt;br /&gt;那如果一开始你不给left和right赋值&amp;#xff0c;那middle怎么算呢&amp;#xff0c;你是从什么范围搜寻呢&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于二分查找的第一步", ["到底为什么二分查找的第一步是先赋值两端的数字lef和rig啊 求解答 想不明白"]], "Tag": "算法设计"}
{"Answer": "public static List&lt;Integer&gt; longest_increasing_subsequence(List&lt;Integer&gt; sequence) {\r\n\t\t// Write your solution here\r\n\t\tif (sequence.isEmpty()) return new ArrayList&lt;Integer&gt;();\r\n\t\tint max_size[] = new int[sequence.size()];\r\n\t\tint prev_index[] = new int[sequence.size()];\r\n\t\tmax_size[0] = 1;\r\n\t\tprev_index[0] = -1;\r\n\t\tfor (int i = 1; i &lt; sequence.size(); i++) {\r\n\t\t\tint cur_max = 1;\r\n\t\t\tint cur_prev = -1;\r\n\t\t\tint iVal = sequence.get(i);\r\n\t\t\tfor (int j = i - 1; j &gt;= 0; j--) {\r\n\t\t\t\tif (cur_max &lt; max_size[j] + 1 &amp;&amp; sequence.get(j) &lt; iVal) {\r\n\t\t\t\t\tcur_max = max_size[j] + 1;\r\n\t\t\t\t\tcur_prev = j;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tprev_index[i] = cur_prev;\r\n\t\t\tmax_size[i] = cur_max;\r\n\t\t}\r\n\t\tint max_idx = sequence.size() - 1;\r\n\t\tint max_val = max_size[max_idx];\r\n\t\tfor (int i = max_idx - 1; i &gt;= 0; i--) {\r\n\t\t\tif (max_val &lt; max_size[i]) {\r\n\t\t\t\tmax_idx = i;\r\n\t\t\t\tmax_val = max_size[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\tList&lt;Integer&gt; aList = new ArrayList&lt;Integer&gt;();\r\n\t\tint idx = max_idx;\r\n\t\taList.add(sequence.get(idx));\r\n\t\twhile (prev_index[idx] &gt;= 0) {\r\n\t\t\tidx = prev_index[idx];\r\n\t\t\taList.add(sequence.get(idx));\r\n\t\t}\r\n\t\tList&lt;Integer&gt; retList = new ArrayList&lt;Integer&gt;(aList.size());\r\n\t\tfor (int i = aList.size() - 1; i &gt;= 0; i--) {\r\n\t\t\tretList.add(aList.get(i));\r\n\t\t}\r\n\t\treturn retList;\r\n\t}", "Konwledge_Point": "算法与数字", "Question": ["如果求最大非连续子序列？？", ["假设有一个序列是L = [1, 0, 5, 3, 2, 7, 9, 15, 6, 4, 13]", "\n他的最大非连续子序列就是 S = [1, 5, 7, 15, 13] 俩俩数字任意不相邻", "\n现在要求给L求S"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#include &amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; namespace std ;\n\nconst &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; N &amp;#61; &lt;span class=\"hljs-number\"&gt;1010&lt;/span&gt; ;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n , m , res ;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; g[N][N] , f[N][N] ;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dx[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; , &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; , &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; , &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;} , dy[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; , &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; , &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; , &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;} ;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dp (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x , &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; y)\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &amp;amp; v &amp;#61; f[x][y] ;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (v !&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; v ;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; v &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; ;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; xx &amp;#61; x &amp;#43; dx[i] , yy &amp;#61; y &amp;#43; dy[i] ;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (xx &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; xx &amp;lt;&amp;#61; n &amp;amp;&amp;amp; yy &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; yy &amp;lt;&amp;#61; m &amp;amp;&amp;amp; g[x][y] &amp;gt; g[xx][yy])\n        {\n            v &amp;#61; max (v , dp (xx , yy) &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) ;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; v ;\n}\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; main ()\n{\n\n\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m ;\n    memset (f , &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; , sizeof (f)) ;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; m; j&amp;#43;&amp;#43;)  cin &amp;gt;&amp;gt; g[i][j] ;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; m; j&amp;#43;&amp;#43;) res &amp;#61; max (res , dp (i , j)) ;\n    }\n    cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; endl ;\n\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["C爱滑雪 不会啊 希望思路+解析", ["问题遇到的现象和发生背景", "\n", "今天在做题的时候，遇到一道搜索题.", "\n", "问题相关代码，请勿粘贴截图", "\n", "描述", "C teacher喜欢滑雪。这并不奇怪，因为滑雪的确很刺激。可是为了获得速度，滑的区域必须向下倾斜，而", "且当你滑到坡底，你不得不再次走上坡或者等待升降机来载你。C想知道在一个区域中最长的滑", "坡。区域由一个二维数组给出。数组的每个数字代表点的高度。下面是一个例子：", "1 2 3 4 5", "16 17 18 19 6", "15 24 25 20 7", "14 23 22 21 8", "13 12 11 10 9", "一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度减小。在上面的例子中，一条可行的", "滑坡为24 17 16 1（从24开始，在1结束）。当然25 24 23  3 2 1更长。事实上，这是", "最长的一条。", "输入", "输入的第一行为表示区域的二维数组的行数R和列数C（1≤R，C≤100）。下面是R行，每行有C个数，代", "表高度(两个数字之间用1个空格间隔)。", "输出", "输出区域中最长滑坡的长度。", "输入样例 1", "输出样例 1", "5 5", "1 2 3 4 5", "16 17 18 19 6", "15 24 25 20 7", "14 23 22 21 8", "13 12 11 10 9", "25", "\n", "运行结果及报错内容", "\n", "运行后我超时了", "\n", "我想要达到的结果", "\n", "希望有人作详细的注释解析，我在网上看了没懂！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;#include&lt;br /&gt;#include&lt;br /&gt;using namespace std;&lt;br /&gt;int main()&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    int i;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    string n;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    cin&amp;gt;&amp;gt;n;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    printf(&amp;#34;%c%c%c%c\\n&amp;#34;,n[0],n[1],n[6],n[7]);//因为只需要输出新同学的年级和班级&amp;#xff0c;而年级是你输入的学号的第一和第二位字符&amp;#xff0c;班级是第七和第八位字符&amp;#xff0c;所以直接输出即可&lt;/span&gt;&lt;br /&gt;}&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["c++同学入学同学班级年纪", ["9月5日早晨，四中正式进入迎新模式，众多新生和家长就早早来到迎新现场开始报道流程，该校各学院结合自身特色开展了创意十足的迎新活动：元素墙上每个“元素”后学长学姐留下的期待，迎新现场舞动的机器人，照片墙上新生与父母的合影……让新生和家长在了解了学校的情况下，更感受到了浓浓暖意和初中生活的精彩。", "“同学，你好！请问你是哪个班的？”", "仅一行。一个10位的正整数No（2000≤学生入学年份≤2050），表示新同学的学号，学号中从左向右数，第1-2位表示其所在的年级，第7-8位表示其所在的班级。", "仅一行。四位数字，表示新同学所在的年级及班级（其中年级和班级各占2位）。", "1602031104", "1611", "这个需要用string吗？不懂怎么用代码实现"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;最高位表示符号位&amp;#xff0c;1表示负数&amp;#xff0c;1010是10&amp;#xff0c;-10的6-bit源码就是&amp;#xff1a;101010&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["二进制的原码和补数。", ["对于这些问题，输入的答案为二进制值(不带空格)，例如00110。问题中的数字是小数。", "-10作为一个6-bit的原码是多少()", "-64作为8-bit 1的补数是多少()", "-31作为8-bit 2的补数是多少()", "-1作为12-bit 2的补数是多少()"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如果从你的编译提示信息来看&amp;#xff0c;应该是floor()函数和sqrt()函数的头文件没有导入&amp;#xff08;我百度了一下&amp;#xff0c;发现好像gcc不会自动自动链接math库&amp;#xff0c;需要在gcc上加上编译参数&amp;#xff1a;-lm&amp;#xff09;&amp;#xff1b;如果从代码的逻辑来看&amp;#xff0c;可能在判断完全平方数哪里可能错了。下面是我的一个实现&amp;#xff0c;不知道对不对&amp;#xff0c;供参考&amp;#xff1a;&lt;br /&gt;参考链接&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/ssdsafsdsd/article/details/8093894\" id=\"textarea_1657694595006_1657694623348_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;undefined reference to &amp;#39;floor&amp;#39;/undefined reference to &amp;#96;&amp;amp;_ssdsafsdsd的博客-CSDN博客&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;math.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n   &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;( &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;  a &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; a&amp;#43;&amp;#43;)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;( &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; b &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; b &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; b&amp;#43;&amp;#43;)\n    {\n      &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n &amp;#61; a * &lt;span class=\"hljs-number\"&gt;1100&lt;/span&gt; &amp;#43; b * &lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;;\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;      &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; m &amp;#61;floor(&lt;span class=\"hljs-keyword\"&gt;sqrt&lt;/span&gt;(n) &amp;#43; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;);\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(m*n &amp;#61;&amp;#61;n) &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, n);\n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;判断当前aabb形式的四位数&amp;#xff0c;是否是为完全平方数&amp;#xff0c;简单的从&lt;span class=\"hljs-number\"&gt;31&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;的开平方约为整数)遍历到n的开平方 \n        &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; s &amp;#61; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;)&lt;span class=\"hljs-keyword\"&gt;sqrt&lt;/span&gt;(n);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(s*s&amp;#61;&amp;#61;n){\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,n);\n        } \n    \n//        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; c&amp;#61;&lt;span class=\"hljs-number\"&gt;31&lt;/span&gt;;c&amp;lt;&amp;#61;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;)&lt;span class=\"hljs-keyword\"&gt;sqrt&lt;/span&gt;(n);c&amp;#43;&amp;#43;){\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(c*c&amp;#61;&amp;#61;n){\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,n);\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;            }\n//        }    \n    }\n  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/162723396756184.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["刘汝佳的紫书P20的代码运行不了？", ["题目描述：", "输出所有形如aabb的4位完全平方数（即前两位数字相等，后两位数字也相等）。", "代码我使用g++编译后没有输出，是我编译有问题还是代码本身有问题，代码如下：", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<math.h>", "\n", "int", " ", "main", "()", "\n", "{\n   ", "for", "( ", "int", " a = ", "1", ";  a <= ", "9", "; a++)\n    ", "for", "( ", "int", " b = ", "0", "; b <= ", "9", "; b++)\n    {\n      ", "int", " n = a * ", "1100", " + b * ", "11", ";\n      ", "int", " m =", "floor", "(", "sqrt", "(n) + ", "0.5", ");\n      ", "if", "(m*n ==n) ", "printf", "(", "\"%d\\n\"", ", n);\n    }\n  ", "return", " ", "0", ";\n}\n", "\n", "gcc编译则是这样", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第九行&amp;#xff0c;赋值后longest变成一个字符串类型了&lt;br /&gt;pop函数返回的是被删除的元素&amp;#xff0c;而不是删除元素后的列表&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-py\"&gt;\njuzi&amp;#61;&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;()\njuzi.&lt;span class=\"hljs-keyword\"&gt;pop&lt;/span&gt;(-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)  # 删除末尾句号\nlongest &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(juzi)):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(juzi[i])&amp;gt;&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(longest)):\n        longest &amp;#61; juzi[i]\n\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(longest)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["请问为什么会报错呢？", ["系统显示第八行数据类型不同不能比大小，但是len函数和变量longest不都是数字类型吗？我该怎么改呢？Python     我们学到列表元组了，这是列表元组的题。但还是想通过我自己的这种方法解出来。", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;看我这篇文章&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/weixin_64811333/article/details/125194636\" id=\"textarea_1663051500000_1663051512370_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_64811333/article/details/125194636&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["数据结构|希望各位帮助一下啊", ["一共有n个人，围成一圈，从1开始报数，数到m的人出局，然后重新开始报数。算出出局的人的顺序。要求：用顺序和链式存储两种方法完成", "程序清单", "#include <stdio.h>", "#include <stdlib.h>", "#define N      //游戏参与人数", "#define M     //出局数字", "void main()", "{", "\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\na&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;((A&amp;#43;B-7*(6-5)&amp;#39;&lt;/span&gt;\nstack&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\nerror&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;,j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; enumerate(a):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; j&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;:\n        stack&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(&lt;span class=\"hljs-selector-attr\"&gt;[i,j]&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; j&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; stack:\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; stack&lt;span class=\"hljs-selector-attr\"&gt;[-1]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[-1]&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;:\n                stack&lt;span class=\"hljs-selector-class\"&gt;.pop&lt;/span&gt;()\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n                error&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;((&lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            error&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;((&lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\nwhile stack:\n    temp&amp;#61;stack&lt;span class=\"hljs-selector-class\"&gt;.pop&lt;/span&gt;()\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; temp&lt;span class=\"hljs-selector-attr\"&gt;[-1]&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;:\n        error&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;((temp&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;))\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        error&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;((temp&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\nL&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt; for _ in range(len(a))]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; error:\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[-1]&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        L&lt;span class=\"hljs-selector-attr\"&gt;[i[0]&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        L&lt;span class=\"hljs-selector-attr\"&gt;[i[0]&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;$&amp;#39;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;.join(L)&lt;/span&gt;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["python判断括号是否匹配", ["输入一个表达式(长度小于100)，该表达式可以包括开括号、闭括号、数字、符号和字母，例如:", "Y = 4 * 5 + (x 7) * 10", "请编写一个程序来查找不平衡的括号。在一行中输出表达式，并在表达式下面标记不平衡的括号。不平衡的左括号被标记为“$”，不平衡的右括号被标记为“?”。", "输出的例子:", "((A+B-7*(6-5)", "$$", ")(r+5-(e-6))/9-8)(", "？              ?$"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;code class=\"language-javascript\"&gt;B&amp;#61;1&lt;/code&gt;应该挪到&lt;code class=\"language-javascript\"&gt;DO 20&lt;/code&gt;循环前面&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["大家帮我看看，我这个fortran程序错哪儿了？", ["我是一名fortran语言初学者，目前跟着书本在学习。有一道例题   求1！+2！+......+N！。我编写的程序如下:", "\n", "\n", "这个程序编译，链接都没问题。算N=1和N=2都没问题，但是算大于等于3的数字就不行了，咋回事儿呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;一个%d&amp;#xff0c;怎么有两个变量&amp;#xff0c;那你输出的就是年份了呀&amp;#xff0c;&lt;br /&gt;改成 printf(&amp;#34;There are %d cows. \\n&amp;#34;,   MyGetCowR(year));&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/890852495666124.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["一头小母牛，从出生起第四个年头开始每年生一头母牛，按此规律，第n年有头母牛？（C语言 递归函数）", ["题目", "一头小母牛，从出生起第四个年头开始每年生一头母牛，按此规律，第n年有头母牛？", "我使用的是DevC++ 6.3", "代码可以正常运行 有return 0 但是算出来的结果不符合题目的正确算法", "后面递归函数如果year<4 那么输出结果都应该1才对", "可是我的结果是我输入数字是多少 输出就是多少 哪怕超过4 输出结果也是和输入一样", "不太清楚问题出在哪里 麻烦各位帮忙看看！！", "代码", "#include <stdio.h>", "int MyGetCowR(int);", "int main()", "{", "int year;", "printf(\"A heifer gives birth to a cow every year from the fourth year of life. \\n According to this rule, how many cows are there in the n year? \\n\");", "printf(\"Input n = \");", "scanf(\"%d\",&year);", "printf(\"There are %d cows. \\n\", year, MyGetCowR(year));", "return 0;", "}", "int MyGetCowR(int year)", "{", "if (year < 4)", "return 1;", "else", "return MyGetCowR(year-1) + MyGetCowR(year-3);", "}", "\n", "下面是我运行出来的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://blog.csdn.net/weixin_32797725/article/details/116923420\" id=\"textarea_1654314239380_1654314328421_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;linux的shell计算1乘2乘3,shell脚本基础&amp;#xff08;三&amp;#xff09;_梧桐叶的梦的博客-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;一、for循环for循环结构是日常运维工作中用的很频繁的循环结构。1、for循环具体格式&amp;#xff1a;for 变量名 in 循环条件&amp;#xff1b; docommanddone这里的“循环条件”可以是一组字符串挥着数字(用空格隔开)&amp;#xff0c;也可以是一条命令的执行结果。2、for循环实例实例1&amp;#xff1a;计算1到5之和[root&amp;#64;zlinux-01 shell]# vim for01.sh#! /bin/bashsum&amp;#61;0for i in ...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_32797725/article/details/116923420&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;br /&gt;参考一下&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["Linux 如何显示1+2×3的结果", ["有没有人知道如何用expr显示1+2×3的结果", "这个需要凑数字，还要不带重复的字，"]], "Tag": "算法设计"}
{"Answer": "&lt;h3 id=\"如果我的回答对你有帮助&amp;#xff0c;请点击采纳按钮&amp;#xff0c;谢谢\"&gt;如果我的回答对你有帮助&amp;#xff0c;请点击采纳按钮&amp;#xff0c;谢谢&lt;/h3&gt;\n&lt;p&gt;思路&amp;#xff1a;&lt;br /&gt;​&lt;br /&gt;首先我们输入 n 和 k 并且运用二分找到合适的尺寸&amp;#xff0c;而l 必须要足够小&amp;#xff0c;r 必须要足够的大。题中写道数组中的数最大不会超过 100000000 &amp;#xff0c;所以我们设 100000001 就可以了。&lt;/p&gt;\n&lt;p&gt;现在就走到了判断的环节&amp;#xff0c;我们如何判断 mid 是太小还是太大呢&amp;#xff1f;我们需要编写一个新函数 -- f。&lt;/p&gt;\n&lt;p&gt;在函数 f 中&amp;#xff0c;我们依次要判断 a 中的每一个数并计算出能切出多少个 mid &amp;#xff0c;还要用一个变量 ans 储存他们&amp;#xff0c;如果 ans 分的分数比 k 多或者正好等于&amp;#xff0c;返回真。如果是小于 k &amp;#xff0c;返回假。&lt;/p&gt;\n&lt;p&gt;当 f 返回的是真的时候&amp;#xff0c;我们就要试试还能不能把 mid 调大一点&amp;#xff0c;就要&lt;/p&gt;\n&lt;p&gt;l &amp;#61; mid;&lt;br /&gt;如果返回的是假&amp;#xff0c;我们就加的太大了&amp;#xff0c;就要把 midmid 调小一点&amp;#xff0c;就要&lt;/p&gt;\n&lt;p&gt;r &amp;#61; mid;&lt;br /&gt;一直到结束&amp;#xff0c;输出 l 就可以了。&lt;/p&gt;\n&lt;p&gt;完整代码区&amp;#xff1a;&lt;br /&gt;​    &lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt; &lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stack&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iomanip&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; n, k;\n&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;1000005&lt;/span&gt;];\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;f&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; ans &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        ans &amp;#43;&amp;#61; a[i] / x;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ans &amp;gt;&amp;#61; k;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) cin &amp;gt;&amp;gt; a[i];\n    \n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; l &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, r &amp;#61; &lt;span class=\"hljs-number\"&gt;100000001&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; mid;\n    \n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (l &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt; r) {\n        mid &amp;#61; (l &amp;#43; r) / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;f&lt;/span&gt;(mid)) l &amp;#61; mid;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; r &amp;#61; mid;\n    }\n    cout &amp;lt;&amp;lt; l &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n} \n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["C++二分查找的判断", ["二分查找", "判断是否合法", "设置的bool函数，请问定义int类型的数字有什么用啊？谢谢!"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用GPTᴼᴾᴱᴺᴬᴵ&lt;br /&gt;要实现一个基数排序的UI界面程序&amp;#xff0c;需要以下几个步骤&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;设计UI界面&amp;#xff1a;可以使用Python的GUI库&amp;#xff08;如Tkinter、PyQt、wxPython等&amp;#xff09;进行设计&amp;#xff0c;添加输入框、按钮、文本框等组件&amp;#xff0c;用于用户输入数据、选择排序方式等操作&amp;#xff0c;并显示排序结果、时间复杂度、空间复杂度等信息。&lt;/li&gt;&lt;li&gt;编写基数排序算法&amp;#xff1a;可以使用Python编写基数排序算法函数&amp;#xff0c;函数输入为待排序的整数列表和排序方式&amp;#xff08;如升序、降序、按照个位、十位、百位等排序&amp;#xff09;&amp;#xff0c;输出为排序后的整数列表。在函数内部实现基数排序的各个步骤&amp;#xff0c;如桶的初始化、按照位数排序、桶合并等。&lt;/li&gt;&lt;li&gt;实现UI与算法的交互&amp;#xff1a;将UI界面中用户输入的数据传递给基数排序算法函数进行排序&amp;#xff0c;然后将排序结果显示在UI界面上。同时&amp;#xff0c;在排序完成后&amp;#xff0c;计算时间复杂度和空间复杂度&amp;#xff0c;并将其显示在UI界面上。&lt;/li&gt;&lt;li&gt;实现异常处理&amp;#xff1a;在程序中加入异常处理机制&amp;#xff0c;对用户输入的数据进行判断&amp;#xff0c;如果不符合要求&amp;#xff08;如长度不为m&amp;#xff09;&amp;#xff0c;则弹出提示框提醒用户重新输入。&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;在完成以上步骤后&amp;#xff0c;即可实现一个基数排序的UI界面程序&amp;#xff0c;用户可以输入数据&amp;#xff0c;选择排序方式&amp;#xff0c;查看排序结果和相关信息。&lt;/p&gt;\n&lt;p&gt;以下是一个 Python 的基数排序的示例程序&amp;#xff0c;同时满足基本要求中的要求&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import tkinter as tk\nimport &lt;span class=\"hljs-selector-tag\"&gt;time&lt;/span&gt;\nimport random\n\n# 排序函数\ndef radix_sort(nums):\n    RADIX &amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;\n    placement &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    max_digit &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(nums)\n\n    while placement &amp;lt; max_digit:\n        buckets &amp;#61; [&lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;() for _ in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(RADIX)]\n        for i in nums:\n            tmp &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;((i / placement) % RADIX)\n            buckets[tmp].&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(i)\n\n        a &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n        for b in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(RADIX):\n            buck &amp;#61; buckets[b]\n            for i in buck:\n                nums[a] &amp;#61; i\n                a &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n\n        placement *&amp;#61; RADIX\n    return nums\n\n# 生成随机整数\ndef &lt;span class=\"hljs-built_in\"&gt;gen_random_int&lt;/span&gt;(n, m):\n    return [random.&lt;span class=\"hljs-built_in\"&gt;randint&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; ** (m-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;), &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; ** m - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) for _ in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n)]\n\n# 排序并显示结果\ndef &lt;span class=\"hljs-built_in\"&gt;sort_and_display&lt;/span&gt;():\n    n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(n_entry.&lt;span class=\"hljs-built_in\"&gt;get&lt;/span&gt;())\n    m &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(m_entry.&lt;span class=\"hljs-built_in\"&gt;get&lt;/span&gt;())\n\n    if &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(n_entry.&lt;span class=\"hljs-built_in\"&gt;get&lt;/span&gt;()) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; or &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(m_entry.&lt;span class=\"hljs-built_in\"&gt;get&lt;/span&gt;()) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        result_label.&lt;span class=\"hljs-built_in\"&gt;config&lt;/span&gt;(text&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;请输入n和m&amp;#39;&lt;/span&gt;)\n        return\n\n    if n &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; or m &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        result_label.&lt;span class=\"hljs-built_in\"&gt;config&lt;/span&gt;(text&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;n和m必须为正整数&amp;#39;&lt;/span&gt;)\n        return\n\n    nums &amp;#61; &lt;span class=\"hljs-built_in\"&gt;gen_random_int&lt;/span&gt;(n, m)\n\n    start_time &amp;#61; time.&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;()\n\n    # 排序方式&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#xff1a;基数排序\n    result1 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;radix_sort&lt;/span&gt;(nums.&lt;span class=\"hljs-built_in\"&gt;copy&lt;/span&gt;())\n    time1 &amp;#61; time.&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;() - start_time\n    space1 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(result1)\n\n    start_time &amp;#61; time.&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;()\n\n    # 排序方式&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#xff1a;快速排序\n    result2 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sorted&lt;/span&gt;(nums.&lt;span class=\"hljs-built_in\"&gt;copy&lt;/span&gt;())\n    time2 &amp;#61; time.&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;() - start_time\n    space2 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(result2)\n\n    start_time &amp;#61; time.&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;()\n\n    # 排序方式&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;&amp;#xff1a;冒泡排序\n    result3 &amp;#61; nums.&lt;span class=\"hljs-built_in\"&gt;copy&lt;/span&gt;()\n    for i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(result3)):\n        for j in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(result3) - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n            if result3[j] &amp;gt; result3[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]:\n                result3[j], result3[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; result3[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], result3[j]\n    time3 &amp;#61; time.&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;() - start_time\n    space3 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(result3)\n\n    start_time &amp;#61; time.&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;()\n\n    # 排序方式&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;&amp;#xff1a;插入排序\n    result4 &amp;#61; nums.&lt;span class=\"hljs-built_in\"&gt;copy&lt;/span&gt;()\n    for i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(result4)):\n        key_item &amp;#61; result4[i]\n        j &amp;#61; i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        while j &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; and result4[j] &amp;gt; key_item:\n            result4[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; result4[j]\n            j -&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        result4[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; key_item\n    time4 &amp;#61; time.&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;() - start_time\n    space4 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(result4)\n\n    # 显示结果\n    result_label.&lt;span class=\"hljs-built_in\"&gt;config&lt;/span&gt;(text&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;排序方式1&amp;#xff08;基数排序&amp;#xff09;&amp;#xff1a;&amp;#39;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;join&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(str, result1)) &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\n时间&amp;#xff1a;{:.6f}s&amp;#xff0c;空间复杂度&amp;#xff1a;{}个\\n\\n&amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;format&lt;/span&gt;(time1, space1) &amp;#43;\n                             &lt;span class=\"hljs-string\"&gt;&amp;#39;排序方式2&amp;#xff08;快速排序&amp;#xff09;&amp;#xff1a;&amp;#39;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;join&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(str, result2)) &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\n时间&amp;#xff1a;{:.6f}s&amp;#xff0c;空间复杂度&amp;#xff1a;{}个\\n\\n&amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;format&lt;/span&gt;(time2, space2) &amp;#43;\n                             &lt;span class=\"hljs-string\"&gt;&amp;#39;排序方式3&amp;#xff08;冒泡排序&amp;#xff09;&amp;#xff1a;&amp;#39;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;.\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["Python数据结构，基数排序", ["Python数据结构", "要用UI界面，不能在控制台输出，怎么做UI界面呀，在网上看的都是教做学生信息管理系统之类的，不知道怎么做这种", "下面是题目：", "基数排序：从键盘上输入n个长度为m的整数，要求输出这些整数的升序", "和降序排列。", "基本要求：(1)不少于4种排序方式；", "(2)界面显示每种排序结果；", "(3)同时显示排序的时间和空间复杂度；", "(4)程序对所输入的数字进行判断，如果不是所要求的长度，弹出提醒消息", "框；", "(5)输出结果以逗号隔开。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;空指针了么不是&amp;#xff0c;54行这里this后的值都是没有的&amp;#xff0c;有参构造方法里边传值进来没有赋值&amp;#xff0c;这样改一下试试&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Object_4&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; name, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; age)&lt;/span&gt;&lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;.name&amp;#61;name;\n        &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;.age&amp;#61;age;\n    }\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/129604128766192.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/964648128766149.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["java中遇到的问题，难以解决", ["Object_4.java", "\n", "package ", "JAVA", ";\n\n", "public", " ", "class", " ", "Object_4", " {\n    ", "private", " ", "String", " name;\n    ", "private", " int age;\n    ", "//设置内部类为外部类传递参数参数", "\n    ", "public", " ", "Object", "_4(){\n        ", "//TODO Auto-generated constructor stub", "\n        ", "//添加TODO方法", "\n    }\n    ", "public", " ", "Object", "_4(", "String", " name, int age){\n\n    }\n\n    ", "//添加Getter和Setter方法。", "\n    ", "public", " ", "String", " ", "getName", "(", ") {\n        ", "return", " name;\n    }\n\n    ", "public", " ", "void", " ", "setName", "(", "String", " name", ") {\n        ", "this", ".", "name", " = name;\n    }\n\n    ", "public", " int ", "getAge", "(", ") {\n        ", "return", " age;\n    }\n\n    ", "public", " ", "void", " ", "setAge", "(", "int age", ") {\n        ", "this", ".", "age", " = age;\n    }\n\n    ", "//重构toString方法", "\n\n    ", "@Override", "\n    ", "public", " ", "String", " ", "toString", "(", ") {\n        ", "return", "  ", "\"姓名：\"", "+", "this", ".", "name", "+", "\"，年龄:\"", "+", "this", ".", "age", ";\n    }\n\n    ", "//重写equals方法", "\n    ", "@Override", "\n    ", "public", " ", "boolean", " ", "equals", "(", "Object", " obj", ") {\n        ", "//判断内存地址", "\n        ", "if", " (obj == ", "this", ") {\n            ", "return", " ", "true", ";\n        }\n        ", "if", " (obj == ", "null", ") {\n            ", "return", " ", "false", ";\n        }\n        ", "//判断是否是同一类型的对象", "\n        ", "if", " (obj ", "instanceof", " ", "Object", "_4) {\n            ", "//强制转换成Person类型", "\n            ", "Object", "_4 s = (", "Object", "_4) obj;\n            ", "//判断他们的属性值    注：这里的age为什么要用==？可以在评论区回答", "\n            ", "if", " (", "this", ".", "name", ".", "equals", "(s.", "name", ") && ", "this", ".", "age", " == (s.", "age", ")) {\n                ", "return", " ", "true", ";\n            }\n        }\n        ", "return", " ", "false", ";\n    }\n}\n\n", "\n", "Test.java", "\n", "package JAVA;\n\npublic ", "class", " Test04 {\n    public static void main(String", "[]", " args) {\n        Object_4 s1=", "new", " ", "Object_4(", "\"ZYH\"", ",20)", ";\n        Object_4 s2=", "new", " ", "Object_4(", "\"SG\"", ",20)", ";\n        ", "//getClass()方法是获得调用该方法的类", "\n        Class class1=s1.get", "Class()", ";\n        Class class2=s2.get", "Class()", ";\n        ", "if", "(class1==class2){  ", "//class方法的返回值是一个类型", "\n            ", "System", ".", "out.println(", "\"s1和s2是同一个类型\"", ");\n        }", "else", "{\n            ", "System", ".", "out.println(", "\"s1和s2不是同一个类型\"", ");\n        }\n        ", "System", ".", "out.println(", "\"=======================\"", ");\n        ", "//hashCode()方法： 对象的地址字符串或数字使用hash算法计算出来的int类型的数值", "\n        ", "System", ".", "out.println(s1.hash", "Code()", ");\n        ", "System", ".", "out.println(s2.hash", "Code()", ");\n        ", "System", ".", "out.println(", "\"=======================\"", ");\n        ", "//toString方法: 返回类名和他的引用地址", "\n        ", "System", ".", "out.println(s1.", "to", "String()", ");\n        ", "System", ".", "out.println(s2.", "to", "String()", ");\n        ", "System", ".", "out.println(", "\"=======================\"", ");\n        ", "//equals方法判断两个对象是否相等true/false", "\n        ", "System", ".", "out.println(s1.equals(s2));\n\n        Object_4 s3=", "new", " ", "Object_4(", "\"小敏\"", ",20)", ";\n        Object_4 s4=", "new", " ", "Object_4(", "\"小敏\"", ",20)", ";\n        ", "System", ".", "out.println(s3.equals(s4));\n    }\n}\n\n", "\n", "运行Tes.java的时候出现如下报错：", "\n", "\n", "跟着教程来写的，一模一样，但是我的始终不行。", "望帮忙解决，谢谢！！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;二分检索&amp;#xff0c;时间复杂度为O(nlogn)。 &lt;/p&gt;\n\n&lt;p&gt;排序时间复杂度O(nlogn), 二分查找每次左侧O(logn), 每次右侧O(logn),总复杂度O(nlogn &amp;#43; nlogn&amp;#43;nlogn)&amp;#61;O(nlogn).&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;from typing import List\nimport bisect\n\n\ndef challenger_finder(socket_list: List[int], k:int) -&amp;gt;List[int]:\n\tn &amp;#61; len(socket_list)\n\tst &amp;#61; sorted(socket_list)\n\tans &amp;#61; []\n\n\tfor i in range(n):\n\t\tleft &amp;#61; socket_list[i] - k\n\t\tright &amp;#61; socket_list[i] &amp;#43; k\n\t\tlk &amp;#61; bisect.bisect_left(st, left)\n\t\trk &amp;#61; bisect.bisect_right(st, right)\n\t\tans.append(rk-lk-1)\n\treturn ans\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["一个小程序，求大神们帮个忙", ["时间复杂度必须不能大于nlogn", "\n\n", "要用python完成", "\n\n", "在这个问题中，你将得到一个整数列表，代表每个玩家在他们的最后一场比赛中持有的股票数量，以及一个整数，代表要检查的范围应该有多宽。使用这些给定的变量，你的目标是找到每个玩家所创造的范围内的玩家数量。", "\n", "\n例如，假设给定的列表为[5,1,3,1]，范围变量为2。第一个要处理的参与人在索引0处。他们在最后一场比赛中赢了5支股票。要检查的范围是2高于5所以是7,2低于5所以是3。然后，我们的范围将是[(5-2)，(5+2)]或[3,7]，两端都包括在内。在给定的列表中只有一个值3，所以索引为0的玩家只有1场比赛可用。有关更深入的示例，请查看后面的示例。", "\n", "\n您的目标是返回一个包含每个玩家可用对手数量的列表。上面示例的返回列表将是[1,2,3,2]。", "\n\n", "2、向列表中添加元素:List[int]， k [int]", "\n", "\n", "\n", "\nstocks_list: List[int]:一个长度为n的Python列表，包含整数，表示每个玩家在最后一场比赛中获得的股票。每个指数代表一个玩家。", "\n", "\nk: int: Integer表示用于确定每个玩家所有可用对手的范围", "\n", "\n返回:一个长度为n的Python列表，包含整数，包含每个玩家可用对手的数量。", "\n", "\n时间复杂度:O(nlog(n))，其中n是玩家数量", "\n", "\n保证的条件：", "\n", "\n范围k是非负的(可以是正的也可以是零的)", "\n", "\nstocks_list可以包含任何整数、负数、正数和0", "\n", "\nstocks_list可能包含重复的股票编号", "\n", "\n每个测试用例都是保证生成的", "\n\n", "\n", "\n例子:", "\n", "\n例1:", "\n", "\nstocks_list = [5, 1, 3, 2]", "\n", "\nk = 1", "\n", "\n第一个玩家的股票从指数0[5,1,3,2]到5，范围是1。检查可能的对手的范围将是1低于5和1高于5。因此，取值范围应该是[5 - 1,5 + 1]或[4,6]，两边都要包括。在给定的列表中，没有任何值在查找范围[4,6]内，除了这个玩家。因此，没有人会与这个球员匹配，并且一个0应该被放置在返回列表的索引0处。", "\n第二个玩家的股票从指数1[5,1,3,2]中取1，范围为1。检查可能的对手的范围将是1低于1和1高于1。因此，取值范围应该是[1 - 1,1 + 1]或[0,2]，两边都要包括。在给定的列表中，在查找范围内有一个值[0,2]，但不包括这个玩家。因此，只有一个玩家将与这个玩家匹配，并且1应该被放置在返回列表的索引1处。", "\n第三个玩家的股票是指数2[5,1,3,2]中的3，范围是1。检查可能的对手的范围将是1低于3和1高于3。因此，取值范围应该是[3 - 1,3 + 1]或[2,4]，两边都要包括。在给定的列表中，在查找范围内有一个值[2,4]，但不包括这个玩家。因此，只有一个玩家将与这个玩家匹配，并且1应该被放置在返回列表的索引2处。", "\n最后一个玩家的股票是指数3[5,1,3,2]中的2，范围是1。检查可能的对手的范围将是1低于2和1高于2。因此，取值范围为[2 - 1,2 + 1]或[1,3]，两边都要包含。在给定的列表中，在查找范围内有两个值[1,3]，不包括这个玩家。因此，两个玩家将与这个玩家匹配，一个2应该被放置在返回列表的索引3处。", "\n根据以上结果，每个玩家的可能对手数返回列表为[0,1,1,2]", "\n", "\n例2:", "\nstocks_list = [40,22,30,20]", "\n", "\nk = 5", "\n", "\n第一个玩家的股票是指数0[40,22,30,20]的40，范围是5。检查可能的对手的范围将是5低于40和5高于40。因此，取值范围应该是[40 - 5,40 + 5]或[35,45]，两边都要包括。在给定的列表中，除了这个玩家，在这个查找范围[35,45]内没有任何值。因此，没有人会与这个球员匹配，并且一个0应该被放置在返回列表的索引0处。", "\n", "\n第二个玩家的股票是指数1[40,22,30,20]中的22，范围是5。检查可能的对手的范围将是5低于22和5高于22。因此，取值范围应该是[22 - 5,22 + 5]或[17,27]，两边都要包括。在给定的列表中，在查找范围内有一个值[17,29]，但不包括这个玩家。因此，只有一个玩家将与这个玩家匹配，并且1应该被放置在返回列表的索引1处。", "\n", "\n第三个玩家的股票是指数2[40,22,30,20]的30，范围是5。检查可能的对手的范围将是5低于30和5高于30。因此，取值范围应该是[30 - 5,30 + 5]或[25,35]，两边都要包括。在给定的列表中，除了这个玩家之外，在这个查找范围[25,35]内没有任何值。因此，没有人会与这个玩家匹配，一个0应该被放置在返回列表的索引2处。", "\n", "\n最后一个玩家的股票是指数3[40,22,30,20]的20，范围是5。检查可能的对手的范围将是5低于20和5高于20。因此，取值范围应该是[20 - 5,20 + 5]或[15,25]，两边都要包括在内。在给定的列表中，有一个玩家在寻找范围内[15,25]，但不包括这个玩家。因此，一个玩家将与这个玩家匹配，并且1应该被放置在返回列表的索引3处。", "\n", "\n根据以上结果，每个玩家的可能对手数返回列表为[0,1,0,1]", "\n", "\n提示:", "\n", "\n试着从O(n²)方法开始，然后改进你的算法", "\n", "\n考虑使用排序、滑动窗口、二分搜索或这些方法的组合来减少时间复杂性", "\n", "\n考虑一种改变数字位置(即排序)的方法，同时维护对它们最初所在的列表中的位置(索引)的引用", "\n\n", " ", "\n\n", "\n\n", "\n\n", " ", "\n\n", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "scanf是以空格或回车结束的，所以你的字符串 s 中只有 a123x456 。你可以用 gets(s) 是以回车结束，得到字符串", "Konwledge_Point": "算法与数字", "Question": ["我这代码到底出什么问题了？", ["输入一个字符串，内有数字和非数字字符，例如：a123x456 7689?89njnk32lnk123，", "\n将其中连续的数字作为一个整数，依次存放到一维数组a中，例如123放在b[0]，456放", "\n在b[1]......统计共有多少个整数，并输出这些数。弟1行输出个数，第2行输出多个整数", "\n，用空格分隔。", "\n\n", " #include<stdio.h>\n#include<math.h>\nvoid main()\n{\n    int i,j=0,k=0,x=0,n,m,b[100];\n    char s[100],a[100];\n    scanf(\"%s\",s);\n    for(i=0;s[i]!='\\0';i++)\n    {\n        if(s[i]>='0'&&s[i]<='9')\n            a[j++]=s[i];\n        else\n        {\n            j--;\n            for(n=0;j>=0;j--,n++)\n                x+=(a[j]-'0')*(int)pow(10,n);\n            b[k++]=x;\n            x=0;  j=0;\n        }\n    }\n    printf(\"%d\\n\",k);\n    for(m=0;m<k;m++)\n        printf(\"%d \",b[m]);\n    printf(\"\\n\");\n}\n", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;因为输入字符后&amp;#xff0c;最后面还有个回车被scanf()读取了&amp;#xff0c;可以使用一个循环读取每行输入后的剩余字符&amp;#xff08;包括回车符&amp;#xff09;&amp;#xff0c;修改如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; a;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;){\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;,&amp;amp;a);\n        \n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;getchar&lt;/span&gt;()!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;){ &lt;span class=\"hljs-comment\"&gt;// 读走每行输入剩余字符 &lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        } \n        \n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,a);\n    }\n \n \n    \n    &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);    &lt;span class=\"hljs-comment\"&gt;// 防止运行后自动退出&amp;#xff0c;需头文件stdlib.h&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/021107770576149.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["为什么会输出没有设想的值", ["问题遇到的现象和发生背景", "\n", "我在尝试做pat的时候，有的程序的输出预期不在我的意料范围之内。", "\n", "遇到的现象和发生背景，请写出第一个错误信息", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n", "int", " ", "main", "()", "\n", "{\n    ", "char", " a;\n    ", "while", " (", "1", "){\n        ", "scanf", "(", "\"%c\"", ",&a);\n        ", "printf", "(", "\"%d\\n\"", ",a);\n    }\n\n\n    \n    ", "system", "(", "\"pause\"", ");    ", "// 防止运行后自动退出，需头文件stdlib.h", "\n    ", "return", " ", "0", ";\n}\n", "\n", "这是我的程序，原本预想着输入一个字母或者数字，输出这个程序的ascII编码，但是实际上输出了令我史料不急的东西", "\n", "1", "\n", "49", "\n", "10", "\n", "2", "\n", "50", "\n", "10", "\n", "3", "\n", "51", "\n", "10", "\n", "4", "\n", "52", "\n", "10", "\n", "5", "\n", "53", "\n", "10", "\n", "6", "\n", "54", "\n", "10", "\n", "7", "\n", "55", "\n", "10", "\n", "8", "\n", "56", "\n", "10", "\n", "9", "\n", "57", "\n", "10", "\n", "0", "\n", "48", "\n", "10", "\n", "a", "\n", "97", "\n", "10", "\ns\n", "115", "\n", "10", "\ndf\n", "100", "\n", "102", "\n", "10", "\nf\n", "102", "\n", "10", "\ng\n", "103", "\n", "10", "\nh\n", "104", "\n", "10", "\nj\n", "106", "\n", "10", "\n", "q", "\n", "113", "\n", "10", "\nw\n", "119", "\n", "10", "\ne\n", "101", "\n", "10", "\nr\n", "114", "\n", "10", "\nt\n", "116", "\n", "10", "\ny\n", "121", "\n", "10", "\nu\n", "117", "\n", "10", "\n", "i", "\n", "105", "\n", "10", "\no\n", "111", "\n", "10", "\n", "\n", "这些是我的一些测试，我输入的所有的数字和字母后面输出的除了对应的ascII码之外，还额外有一个10，这是咋回事呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;是不一样的。那里应该是一直循环找到列表的最小值。以i&amp;#61;0为例&amp;#xff0c;从第一项开始&amp;#xff0c;找到了比它小的数&amp;#xff0c;就更新min&amp;#xff0c;所以才写作arr[j] &amp;lt; min&amp;#xff0c;以找到最小的值&amp;#xff1b;如果写作arr[j]&amp;lt;arr[i]&amp;#xff0c;那么只要存在比第一项小的数&amp;#xff0c;就会更新min——比如&amp;#xff0c;如果第一项为3&amp;#xff0c;而第二项为1&amp;#xff08;更新了min&amp;#xff09;&amp;#xff0c;但是第三项为2&amp;#xff0c;2&amp;lt;3&amp;#xff0c;又更新了min&amp;#xff0c;并不是最小的数&amp;#xff0c;就会产生错误。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["各位，帮我看看这个问题，问题在代码里面", ["问题遇到的现象和发生背景", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n\n\n", "我想要达到的结果", "\n", "#", "include", " ", "<stdio.h>", "\n", "void", " ", "main", "()", "\n", "{\n    ", "int", " i, j;\n    ", "int", " min;\n    ", "int", " pos;\n    ", "int", " arr[", "10", "];\n    ", "for", " (i = ", "0", "; i < ", "10", "; i++)\n    {\n        ", "printf", "(", "\"arr[%d]=\"", ", i);\n        ", "scanf", "(", "\"%d\"", ", &arr[i]);\n    }\n    ", "for", " (i = ", "0", "; i < ", "9", "; i++)\n    {\n        min = arr[i];\n        pos = i;\n        ", "for", " (j = i+", "1", "; j < ", "10", "; j++)\n        {\n            ", "if", " (arr[j] <min)", "//为什么这个判断不能改成arr[j]<arr[i]，不应该都行吗？", "\n            {\n                min = arr[j];\n                pos = j;\n            }\n        }\n        arr[pos] = arr[i];\n        arr[i] =min;\n    }\n    ", "printf", "(", "\"经过选择排列后的数字为:\\n\"", ");\n    ", "for", " (i = ", "0", "; i < ", "10", "; i++)\n    {\n        ", "printf", "(", "\"%d\\t\"", ", arr[i]);\n        ", "if", " (i == ", "4", ")\n            ", "printf", "(", "\"\\n\"", ");\n    }\n     \n}\n为什么这个数字排列，一旦改我上面的判断就不行，为什么不能直接arr[i]，非要一个中间变量min来代替\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;var Reg &amp;#61; &lt;span class=\"hljs-regexp\"&gt;/^[&amp;#43;-\\d].*?/&lt;/span&gt;;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;以&amp;#43;&amp;#xff0c;-或者数字开头的字符串\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!Reg.test(usernamevalue)){&lt;!-- --&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;不是以&amp;#43;&amp;#xff0c;-或者数字开头的字符串就执行\n\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["javascript编写计算器的小问题", ["问题遇到的现象和发生背景", "用javascript写一个计算器，现在想让输入的第一个值不能为乘号，除号，取余号，但是可以为加号和减号。", "\n", "问题相关代码，请勿粘贴截图", "在这个函数中", "\n", "\n", "<!-- 下面是CSS样式 -->", "\n    ", "<", "style", ">", "\n        ", ".top", "{\n            ", "width", ": ", "465px", ";\n            ", "height", ": ", "60px", ";\n            ", "margin", ": auto;\n            ", "background-color", ": gray;\n            ", "margin-top", ": ", "100px", ";\n            ", "border-top-right-radius", ": ", "10px", ";\n            ", "border-top-left-radius", ": ", "10px", ";\n        }\n\n        ", ".point-red", "{\n            ", "width", ": ", "20px", ";\n            ", "height", ": ", "20px", ";\n            ", "background-color", ": red;\n            ", "float", ": left; ", "/*浮动，可以让其不独占一行*/", "\n            ", "margin-left", ": ", "20px", ";\n            ", "margin-top", ": ", "20px", ";\n            ", "border-radius", ": ", "50%", ";", "/* 通过这个指令将正方形改为一个圆 */", "\n            \n        }\n\n        ", ".point-blue", "{\n            ", "width", ": ", "20px", ";\n            ", "height", ": ", "20px", ";\n            ", "background-color", ": blue;\n            ", "float", ": left; ", "/*浮动，可以让其不独占一行*/", "\n            ", "margin-left", ": ", "20px", ";\n            ", "margin-top", ": ", "20px", ";\n            ", "border-radius", ": ", "50%", ";", "/* 通过这个指令将正方形改为一个圆 */", "\n        }\n\n        ", ".point-green", "{\n            ", "width", ": ", "20px", ";\n            ", "height", ": ", "20px", ";\n            ", "background-color", ": green;\n            ", "float", ": left; ", "/*浮动，可以让其不独占一行*/", "\n            ", "margin-left", ": ", "20px", ";\n            ", "margin-top", ": ", "20px", ";\n            ", "border-radius", ": ", "50%", ";", "/* 通过这个指令将正方形改为一个圆 */", "\n        }\n\n\n        ", "#counter", "{\n            ", "font-size", ": ", "25px", ";\n            ", "color", ": white;\n            ", "float", ": right;\n            ", "line-height", ": ", "60px", ";\n            ", "margin-right", ": ", "35px", ";\n        }\n\n\n        ", "/* 设置显示结果和计算过程的部分 */", "\n        ", "#result", "{\n            ", "width", ": ", "451px", ";\n            ", "height", ": ", "55px", ";\n            ", "border", ": ", "2px", " solid brown;\n            ", "margin", ": auto;\n            ", "text-align", ": right;\n            ", "font-size", ": ", "30px", ";\n            ", "padding-right", ": ", "10px", ";\n            ", "padding-top", ": ", "5px", ";\n        }\n\n        ", "/* 设置按钮区域的样式 */", "\n        ", ".button", "{\n            ", "width", ": ", "465px", ";\n            ", "height", ": ", "413px", ";\n            ", "background-color", ":gray;\n            ", "margin", ": auto;\n            ", "border-bottom-left-radius", ": ", "10px", ";\n            ", "border-bottom-right-radius", ": ", "10px", ";\n            \n        }\n\n        ", ".button", " ", "div", "{\n            ", "width", ": ", "110px", ";\n            ", "height", ": ", "80px", ";\n            ", "float", ": left;\n            ", "background-color", ":aquamarine;\n            ", "border", ": ", "1px", " gray solid;\n            ", "margin-left", ": ", "3.3px", ";\n            ", "text-align", ": center;\n            ", "font-size", ": ", "25px", ";\n            ", "line-height", ": ", "80px", ";\n            ", "font-weight", ": bold;\n        }\n\n        ", "/* 使用伪类，可以产生一个鼠标悬停的效果 */", "\n        ", ".button", " ", "div", ":hover", "{\n            ", "background-color", ": bisque;\n            ", "/* 鼠标放在上面有放大的效果 */", "\n            ", "font-size", ": ", "28px", ";\n            \n        }\n\n        \n    ", "</", "style", ">", "\n", "\n", "\n ", "<!-- 下面是JavaScript代码 -->", "\n    ", "<", "script", " ", "type", "=", "\"text/javascript\"", ">", "\n\n        ", "//解释：在你点击了7那个按钮，就会调用这个函数，定义一个result变量，将整个文件中的class名字为", "\n        ", "//result的值赋给result这个变量，然后再把7赋给result。", "\n        ", "//innerHTML获取HTML当前标签的起始和结束里面的内容", "\n        ", "//给函数传递参数（number），用于输入哪一个数字", "\n    ", "function", " ", "clicknumber", "(", "number", "){\n        ", "var", " result = ", "document", ".", "getElementById", "(", "\"result\"", ");\n        ", "//前面那个数加上后面你输入的数（不是相加成和，而是相加为一前一后，就是输入7和8，变成78", "\n        ", "//innerHTML提取出来的是字符串，所以会变成输入的数字变成连接而不是相加", "\n        result.", "innerHTML", " += number; ", "//这里的result是前面那个变量名，给变量名赋值为7", "\n        \n    }\n\n    ", "// 输入运算符", "\n    ", "function", " ", "clickoperator", "(", "operator", "){\n        ", "var", " result = ", "document", ".", "getElementById", "(", "\"result\"", ");\n        ", "var", " string = result.", "innerHTML", ";\n        ", "var", " len = string.", "length", "; ", "//用len变量获取string长度", "\n        ", "var", " last = string[len-", "1", "]; ", "//last变量是字符串的最后一个字符", "\n\n\n        ", "if", "(last == ", "\"+\"", " || last ==", "\"-\"", " || last == ", "\"*\"", " || last == ", "\"/\"", " || last == ", "\"%\"", "){\n            ", "//下面的代码是从string的数组下标为0开始往后获取len-1个长度，然后最后一位用新输入的那个运算符代替", "\n            ", "var", " temp = string.", "substr", "(", "0", ",len-", "1", ") + operator; ", "//substr(x,y)，x是数组开始的下标，y是往后获取y个", "\n            result.", "innerHTML", " = temp;\n        }\n        ", "else", "{\n            result.", "innerHTML", " += operator; ", "//如果不是字符那就正常执行", "\n        }\n\n        \n        \n        }\n\n\n    ", "// 计算结果", "\n    ", "//思路，先找到ID名为result的元素赋给result这个变量，然后用innerhtml将元素获取给到中间变量expression", "\n    ", "//最后将结果赋给变量result，我认为最后的innerHTML是替换的作用。", "\n    ", "function", " ", "docalc", "(", "){\n        ", "var", " result = ", "document", ".", "getElementById", "(", "\"result\"", ");\n        ", "var", " expression = result.", "innerHTML", ";\n        result.", "innerHTML", " = ", "eval", "(expression);\n       \n    }\n\n    ", "// 清空", "\n    ", "function", " ", "doclear", "(", "){\n        ", "var", " result = ", "document", ".", "getElementById", "(", "\"result\"", ");\n        result.", "innerHTML", " = ", "\" \"", ";  ", "//给这个结果赋空值", "\n        \n        ", "//或者可以这么写", "\n        ", "//document.getElementById(\"result\").innerHTML = \" \";", "\n        ", "//最简单的理解，就是将原来里面的东西替换成了空。因为innerhtml有获取的作用也有替换的作用", "\n        ", "//可能有疑问为什么有时候innerhtml放在document那一句的后面，有时候是放在下一行的", "\n        ", "//innerhtml放在哪一行就是获取这一行的标签的里面的元素的", "\n        \n    }\n\n    ", "// 删除，退格,回退删除最后一个字符", "\n    ", "// 要利用数组，在计算器中12345分别的是第01234位", "\n    ", "function", " ", "doback", "(", "){\n        ", "var", " result = ", "document", ".", "getElementById", "(", "\"result\"", ");\n        ", "var", " len = result.", "innerHTML", ".", "length", ";", "//取长度，这个字符串有多少位的长度", "\n        ", "// substr(x,y)里面有两个参数，x是从数组的第几位开始，y是往后取多少位。（0,5）意思就是从第一个开始取，一直取五个数字", "\n        result.", "innerHTML", " = result.", "innerHTML", ".", "substr", "(", "0", ",len-", "1", ");\n    }\n\n    ", "//获取字符串最后一个字符，如果是一个运算符，你还想输入一个运算法，那就把这个运算符替换了", "\n    ", "function", " ", "getlastchar", "(", "){\n        ", "var", " result = ", "document", ".", "getElementById", "(", "\"result\"", ");\n        ", "var", " string = result.", "innerHTML", ";\n        ", "var", " len = string.", "length", ";\n        ", "var", " last = string[len-", "1", "];\n        ", "if", "(last == ", "\"+\"", " || last ==", "\"-\"", " || last == ", "\"*\"", " || last == ", "\"/\"", " || last == ", "\"%\"", "){\n        }\n    }\n\n\n    ", "// 这个函数是模仿了运算符来写的", "\n    ", "function", " ", "clickpoint", "(", "point", "){\n        ", "var", " result = ", "document", ".", "getElementById", "(", "\"result\"", ");\n        ", "var", " string = result.", "innerHTML", ";\n        ", "var", " len = string.", "length", ";\n        ", "var", " last = string[len-", "1", "];\n        ", "if", "(last == ", "\".\"", "){\n            last = string.", "substr", "(", "0", ",len-", "1", ") + point;\n            result.", "innerHTML", " = last;\n        }\n        ", "else", "{\n            result.", "innerHTML", " += point;\n        }\n    }\n\n    ", "</", "script", ">", "\n", "\n", "<!-- onload元素事件：页面加载完成后则自动执行 -->", "\n", "<", "body", " ", "onload", "=", "\"countertitle()\"", ">", "\n   \n    ", "<", "div", " ", "class", "=", "\"top\"", ">", "   ", "<!-- 这是最上面那个灰色的 -->", "\n        ", "<", "div", " ", "class", "=", "\"point-red\"", ">", "</", "div", ">", "\n        ", "<", "div", " ", "class", "=", "\"point-blue\"", ">", "</", "div", ">", "\n        ", "<", "div", " ", "class", "=", "\"point-green\"", ">", "</", "div", ">", "\n        ", "<", "div", " ", "id", "=", "\"counter\"", ">", "计算器", "</", "div", ">", "\n\n        \n", "</", "div", ">", "\n   \n    ", "<!-- 显示计算结果和计算过程 -->", "\n    ", "<", "div", " ", "id", "=", "\"result\"", ">", "</", "div", ">", "\n\n    ", "<!-- <div name=\"result\">123456</div> 这个没有直接的用处，是为了验证一个命令来写的 -->", "\n\n    ", "<!-- 设置按钮区域 -->", "\n    ", "<", "div", " ", "class", "=", "\"button\"", ">", "\n        ", "<!-- 当元素被单击时，调用countertitle()这个函数，不一定是弹窗啊，只是这个函数正好是弹窗 -->", "\n        ", "<", "div", " ", "onclick", "=", "\"doclear()\"", ">", "AC", "</", "div", ">", "<!--清空-->", "\n        ", "<!--%是一个字符串，所以不能直接写入括号，要用引号包起来，但是外面有双引号了，所以要用单引号-->", "\n        ", "<", "div", " >", "+/-", "</", "div", ">", " \n        ", "<", "div", " ", "onclick", "=", "\"clickoperator('%')\"", ">", "%", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clickoperator('/')\"", ">", "÷", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clicknumber(1)\"", ">", "1", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clicknumber(2)\"", ">", "2", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clicknumber(3)\"", ">", "3", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clickoperator('*')\"", ">", "*", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clicknumber(4)\"", ">", "4", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clicknumber(5)\"", ">", "5", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clicknumber(6)\"", ">", "6", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clickoperator('-')\"", ">", "-", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clicknumber(7)\"", ">", "7", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clicknumber(8)\"", ">", "8", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clicknumber(9)\"", ">", "9", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clickoperator('+')\"", ">", "+", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clicknumber(0)\"", ">", "0", "</", "div", ">", "\n        ", "<!-- 双击时，调用countertitle()这个函数 -->", "\n        ", "<", "div", " ", "onclick", "=", "\"doback()\"", ">", "删除", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"clickpoint('.')\"", ">", ".", "</", "div", ">", "\n        ", "<", "div", " ", "onclick", "=", "\"docalc()\"", ">", "=", "</", "div", ">", "\n    ", "</", "div", ">", "\n\n\n\n", "</", "body", ">", "\n", "</", "html", ">", "\n\n", "\n", "运行结果及报错内容", "没有报错，但是想尽量完善这个计算器", "\n", "我的解答思路和尝试过的方法", "刚开始想在输入数值的函数中进行一个过滤，只要第一个输入不为数值那就不能输出，但是如果这样那加和减也会被过滤掉，于是我选择在运算符的函数中过滤，只要第一个输入为乘除取余就取空值，但是不知道怎么取到第一个值。因为我的代码是将显示的结果里的值全部提出。", "\n", " 我想要达到的结果", "让输入的第一个值不能为乘号，除号，取余号，但是可以为加号和减号。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不能用递归求&amp;#xff0c;否则递归次数太多会导致栈溢出&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fibonacci&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || a &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, f2 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;; i &amp;lt;&amp;#61; a; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f &amp;#61; (f1 &amp;#43; f2) % &lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;;\n        f1 &amp;#61; f2;\n        f2 &amp;#61; f;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; f2;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, a;\n    cin &amp;gt;&amp;gt; n;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n    {\n        cin &amp;gt;&amp;gt; a;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;fibonacci&lt;/span&gt;(a) &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["c++递归问题求解：2790: 菲波那契数列", ["题目描述", "菲波那契数列是指这样的数列：数列的第一个和第二个数都为1，接下来的每个数都等于前面2个数字之和。", "给出一个正整数a，要求菲波那契数列中第a个数对1000取模的结果是多少。", "输入", "第1行是数据的组数n(n<=100000)，后面跟着n行输入。每组测试数据占1行，包括一个正整数a(1<=a<=1000000)。", "输出", "n行，每行输出对应一个输入。输出应是一个正整数，为菲波那契数列中第a个数对1000取模得到的结果。", "样例", "输入", "4", "5", "2", "19", "1", "输出", "5", "1", "181", "1"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第二个for循环是不是应该用 i &amp;lt; j&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["素数筛法求素数求解答", ["c++任务描述", "本关任务：素数筛法求素数。", "\n", "编程要求", "用素数筛法求出2~N以内的所有素数并输出。每5个数字输出一行，每个数字之间用空格分隔开。", "\n", "测试说明", "我会对你编写的代码进行测试：", "\n", "样例输入：", "100", "样例输出：", "请输入N的值：", "2 3 5 7 11", "13 17 19 23 29", "31 37 41 43 47", "53 59 61 67 71", "73 79 83 89 97", "\n", "开始你的任务吧，祝你成功！", "\n", "#include<stdio.h>", "int fac(int x )", "{", "int i,t=0,y;", " for(i=1;i<=x;i++){", "     if(x%i==0){", "t++;", "\n", " }else{", "continue;", " }          }", "\n", "if(t==2){", "y=x;", "}else{", "y=0;", "}", "return y;", "}", "\n", "int main()", "{int fac(int x );", "    int i,j,n,k;", "    scanf(\"%d\",&n);", "    int a[999];", "    for(i=2,j=0;i<=n;i++){", "    if(fac(i)!=i) continue;", "    a[j]=i;    j++;", "    }", "    for(i=0,k=1;i<=j;i++,k++){", "    printf(\"%ld\",a[i]);", "if(k%5==0){", "printf(\"\\n\");", "}else{", "printf(\" \");", "}", "}", "    return 0;", "}", "\n", "为什么我的代码运行后总是多出一个奇怪的数据"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你内层循环没有结束条件啊&amp;#xff0c;这不死循环了吗&lt;br /&gt;n*n如果大于num就应该结束了&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["没有错误但无法成功运行", ["#include ", "\n", "using namespace std;", "\n", "int main()", "{", "// 输出所有形如 aabb（即前两位数字相等，后两位数字相等）的 4 位完全平方数。完全平方数是指那些可以表示为某一正整数的平方的数。", "\n", "int a,b;\n", "for", "(", "a", "=1; a<10; a++)\n    ", "for", "(", "b", "=1; b<10; b++)\n    {\n        int ", "num", "=a*1100+b*11;\n        ", "for", "(int ", "n", "=0;; n++)\n        {\n            ", "if", "(", "num", "==n*n)\n                cout<<num<<endl;\n        }\n    }\n", "\n", "return 0;", "}", "\n", "本新手练习时常常出现这种问题，求大神解答，谢谢🙏"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;44&amp;#xff08;10&amp;#xff09;&amp;#61;101100&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["十进制转二进制和浮点数", ["首先，把44（10）转换成二进制，然后在这里输入答案     {}。", "在纸上标准化的答案，使它从0.1开始，并计算2的幂，这将是浮点数答案的指数值。在这里输入规范化的值   ()(必须从0.1开始，只输入您需要的数字)．", "在这里输入2的指数    ()(必须是一个小数)．", "输入44(10)浮点表示的完整16位二进制版本  ()(它必须是二进制且必须有16位)"]], "Tag": "算法设计"}
{"Answer": "这个问题我觉的可以转换成，求解n皇后问题，不知道对不对，楼主可以试试", "Konwledge_Point": "算法与数字", "Question": ["有一个M*N的0-1矩阵，对其操作以后要使每一行、每一列都只有1个1，求这个矩阵中1的最大个数？", ["matlab编写，就像数字填图的游戏一样，其中的数字1-9在每一行和每一列都有唯一的一个。在一个M*N的0-1矩阵中，我想得到的是在原矩阵上操作，使其每一行和每一列都只有唯一的一个1，怎样才能使得变换后1的个数最多。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第10行的for循环结束条件不对&amp;#xff0c;可以改为ch[i]!&amp;#61;&amp;#39;\\0&amp;#39;或者i&amp;lt;n&amp;#xff0c;即只判断到输入的字符串最后一个字符&amp;#xff0c;如果是ch[i]!&amp;#61;&amp;#39;\\n&amp;#39;&amp;#xff0c;则会数组越界&amp;#xff0c;因为输入的换行使用gets获取字符串不会存储在数组中&amp;#xff0c;所以会访问到超过数组最大下标&amp;#xff0c;直到遇到一个换行符才停止循环。&lt;br /&gt;&lt;br /&gt;修改如下&amp;#xff1a;&lt;br /&gt;&lt;br /&gt;参考链接&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://baike.baidu.com/item/gets/787649\" id=\"textarea_1676512858886_1676512885586_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1 md_link_url\"&gt;\n         https://baike.baidu.com/item/gets/787649\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;br /&gt;&lt;a id=\"textarea_1676512858886_1676512885586_1\" target=\"_blank\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1 md_link_url\"&gt;\n         http://ascii.wjccx.com/\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;string.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    char ch[&lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;lc&lt;/span&gt;,sc,dc,n;\n    &lt;span class=\"hljs-keyword\"&gt;lc&lt;/span&gt;&amp;#61;sc&amp;#61;dc&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; https:&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;baike.baidu.com/item/gets/&lt;span class=\"hljs-number\"&gt;787649&lt;/span&gt;?fr&amp;#61;aladdin\n    gets(ch);     &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;  oaidncpaoIHIOUGLKf093284900fjs \n    n &amp;#61; strlen(ch);\n    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;循环的结束条件改为ch[i]!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;或者i&amp;lt;n&amp;#xff0c;即只判断到输入的字符串最后一个字符 \n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;ch[i]!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; http:&lt;span class=\"hljs-regexp\"&gt;//as&lt;/span&gt;cii.wjccx.com/\n    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;ch[%d]&amp;#61;%d,ch[%d]&amp;#61;%c\\n&amp;#34;&lt;/span&gt;,i,ch[i],i,ch[i]);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch[i]&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;ch[i]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;lc&lt;/span&gt;&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch[i]&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;ch[i]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;)\n            sc&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch[i]&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;ch[i]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;)\n            dc&amp;#43;&amp;#43;;\n    }\n   // &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;ch[%d]&amp;#61;%d,ch[%d]&amp;#61;%c\\n&amp;#34;&lt;/span&gt;,i,ch[i],i,ch[i]);\n        \n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;共%d个字符\\n其中%d个大写字母\\n %d个小写字母\\n %d个数字\\n&amp;#34;&lt;/span&gt;,n,&lt;span class=\"hljs-keyword\"&gt;lc&lt;/span&gt;,sc,dc);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;其中&amp;#xff0c;大写字母占%.2f&amp;#xff0c;小写字母占%.2f&amp;#xff0c;数字占%.2f。&amp;#34;&lt;/span&gt;,(float)&lt;span class=\"hljs-keyword\"&gt;lc&lt;/span&gt;/n,(float)sc/n,(float)dc/n);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n \n}\n \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/534618215676134.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["C语言。统计字符串字数并计算各类字符占总字符数的比例。", ["C语言。统计字符串字数并计算各类字符占总字符数的比例。", "如图，显然不对，请问是什么地方出了问题？", "\n", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<string.h>", "\n", "int", " ", "main", "()", "\n", "{\n    ", "char", " ch[", "80", "];\n    ", "int", " lc,sc,dc,n;\n    lc=sc=dc=", "0", ";\n    ", "gets", "(ch);\n    n = ", "strlen", "(ch);\n    ", "for", "(", "int", " i = ", "0", ";ch[i]!=", "'\\n'", ";i++)\n    {\n        ", "if", "(ch[i]>=", "'A'", "&&ch[i]<=", "'Z'", ")\n            lc++;\n        ", "if", "(ch[i]>=", "'a'", "&&ch[i]<=", "'z'", ")\n            sc++;\n        ", "if", "(ch[i]>=", "'0'", "&&ch[i]<=", "'9'", ")\n            dc++;\n    }\n    ", "printf", "(", "\"共%d个字符\\n其中%d个大写字母\\n %d个小写字母\\n %d个数字\\n\"", ",n,lc,sc,dc);\n    ", "printf", "(", "\"其中，大写字母占%.2f，小写字母占%.2f，数字占%.2f。\"", ",(", "float", ")lc/n,(", "float", ")sc/n,(", "float", ")dc/n);\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "C语言是大小写敏感的语言\r\ntypedef struct\r\n{\r\n    StackElementType elem[Stack_Size];\r\n    int Top;\r\n}SeqStack; \r\n你注意看，Top是大写的\r\n\r\nS-&gt;top++;\r\n你这里是小写的。\r\n\r\n错误提示都是这个类型的错误", "Konwledge_Point": "算法与数字", "Question": ["【数据结构】用栈实现的带括号的多位数四则运算器", ["题目原型：  四则运算器：实现多位整数的带括号的四则运算", "\n\n", "现存问题：", "\n\n", "1.以下代码利用两个char类型的栈分别存取运算数和运算符，但在结束一次优先级高运算后（考虑到运算精度问题，故在程序中，将每次运算的结果都保存为double型）可能会出现浮点值，这个值必须要压栈，并于下一个优先级产生运算，但这个浮点型值无法压入char型栈中，必须要一位一位存取才可实现，请问有没有比较好的办法解决这个问题，应该怎样将数据压入栈中？", "\n\n", "2.程序中出现如图所示错误，麻烦大佬指点一下原因!", "\n", "\n\n", " #include <stdio.h>\n#include <stdlib.h>\n\n#define TRUE 1\n#define FALSE 0\n#define Stack_Size 50\n\ntypedef char StackElementType; \ntypedef struct\n{\n    StackElementType elem[Stack_Size];\n    int Top;\n}SeqStack; \n\nvoid InitStack(SeqStack *S);\nint Push(SeqStack *S,StackElementType x);\nint Pop(SeqStack *S,StackElementType *x);\nint GetTop(SeqStack *S,StackElementType *x);\nStackElementType Compare(StackElementType ch1,StackElementType ch2);\nStackElementType Execute(StackElementType a,StackElementType op,StackElementType b);\n\nint main()\n{\n    printf(\"%c\",ExpEvaluation()); \n    return(0);\n}\nStackElementType ExpEvaluation()\n{\n    SeqStack OPTR,OVS;\n    StackElementType n;\n    StackElementType a,b,ch,op,x,v;\n    InitStack(&OPTR);\n    InitStack(&OVS);\n    Push(&OPTR,'#');\n    printf(\"Please input an expression(Ending with #):\");\n    ch=getchar();//为方便，所以数字也以字符形式来存储 \n    while(ch!='#'||GetTop(&OPTR,&x)!='#')\n    {\n        if(ch>='0'&&ch<='9')//不是操作符，是操作数，进OVS栈 \n        {\n            int temp;\n            temp=ch-'0';//先把当前操作数从字符变为数字 \n            ch=getchar();\n            while(ch>='0'&&ch<='9')//继续判断下一位是否为操作数\n            {\n                temp=temp*10+ch-'0';\n                ch=getchar();\n            } \n            Push(&OVS,temp);\n\n        }\n        else\n        switch(Compare(ch,GetTop(&OPTR,&x)))\n        {\n            case '>':Push(&OPTR,ch);\n              scanf(\"%d\",&ch);\n            case '=':Pop(&OPTR,&op);ch=getchar();break;//脱括号 \n            case '<':Pop(&OPTR,&op);//形成运算 \n            Pop(&OVS,&b);\n            Pop(&OVS,&a);\n            v=Execute(a,op,b);\n            //此处需要将v转换为字符型并且入站 \n            Push(&OVS,v);\n            break; \n        }\n    }\n    v=GetTop(&OVS,&x);\n    return(v);\n} \n\n//初始化\nvoid InitStack(SeqStack *S)\n{\n    /*构造一个空栈S*/\n    S->top=-1; \n} \n//进栈\nint Push(SeqStack *S,StackElementType x)\n{\n    if(S->top==Stack_Size-1)\n     return(FALSE);\n    S->top++;\n    S->elem[S->top]=x;\n    return(TRUE);\n} \n//出栈\nint Pop(SeqStack *S,StackElementType *x)\n{\n    if(S->top==-1)\n     return(FALSE);\n    *x=S->elem[S->top];\n    S->top--;\n    return(TRUE);\n} \n//读栈顶\nint GetTop(SeqStack *S,StackElementType *x)\n{\n    if(S->top==-1)\n     return(FALSE);\n    else\n    {\n        *x=S->elem[S->top];\n        return(TRUE);\n    }\n} \n\n\n//比较优先级，返回'>','<','=' \nStackElementType Compare(StackElementType ch1,StackElementType ch2)\n//ch1为还未进栈的运算符，ch2为当前运算符栈顶元素 \n{\n    //'('未入栈时，优先级最高，入栈后，优先级最低 \n    switch(ch1)\n    {\n        case '(':ch1=6;break;\n        case '*':\n        case '/':ch1=5;break;\n        case '+':\n        case '-':ch1=4;break;\n        case ')':ch1=3;break;\n    }\n    switch(ch2)\n    {\n        case '*':\n        case '/':ch2=5;break;\n        case '+':\n        case '-':ch2=4;break;\n        case ')':ch2=3;break;\n        case '(':ch2=2;break;\n    }\n    if(ch1>ch2)\n     return('>');\n     else if(ch1=ch2)\n      return('=');\n      else\n       return('<');\n}\nStackElementType Execute(StackElementType a,StackElementType op,StackElementType b)\n{\n    double v;\n    switch(op)\n    {\n        case '+':v=(double)a+(double)b;break;\n        case '-':v=(double)a-(double)b;break;\n        case '*':v=(double)a*(double)b;break;\n        case '/':v=(double)a/(double)b;break;\n    }\n    return((StackElementType)v);\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;主要的问题是你已经用递归了&amp;#xff0c;那么for(int i&amp;#61;start;i&amp;lt;9;i&amp;#43;&amp;#43;)这个循环就不需要了&amp;#xff0c;递归本身就相当于这个循环&lt;br /&gt;把这层循环去掉&amp;#xff0c;同时把i都改为start&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;queen&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;( &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; col[&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; start)&lt;/span&gt;&lt;/span&gt;{    &lt;span class=\"hljs-comment\"&gt;//数组的下标代表列,col[i]的值代表在该列放的皇后所在的行数.&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(start &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;){\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; j&amp;#43;&amp;#43;)cout &amp;lt;&amp;lt; col[j] ;\n            cout &amp;lt;&amp;lt; endl;\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//假如正常进行到第八列, 就输出数组;&lt;/span&gt;\n        }\n &lt;span class=\"hljs-comment\"&gt;//   for(int i &amp;#61;start; i &amp;lt;9; i &amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; k &amp;lt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; k&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; flag &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n            col[start] &amp;#61; k;&lt;span class=\"hljs-comment\"&gt;//给第i列的第k行放上皇后;&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;;j&amp;#43;&amp;#43;){\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (start &amp;#61;&amp;#61; j || col[j] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//不与同一个格子、没有放皇后的格子;进行比较&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(col[j] &amp;#61;&amp;#61; col[start]|| start&amp;#43;col[start] &amp;#61;&amp;#61; j &amp;#43; col[j] || start- col[start] &amp;#61;&amp;#61; j-col[j]) {&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//检测是否有同行、同对角线的皇后&lt;/span&gt;\n                        flag &amp;#61; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;col[start] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;/*如果有问题,flag输出false,跳出循环\n                                                        如果没有,flag为true;尝试在下一列放置皇后*/&lt;/span&gt;\n                    }\n                }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag){\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!col[start]) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//如果flag为true,而且在该列放置了皇后,就继续对下一列进行放置操作;如果未放置,说明此时无解,跳出本层递归;&lt;/span&gt;\n                &lt;span class=\"hljs-built_in\"&gt;queen&lt;/span&gt;(col,start&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n            }\n &lt;span class=\"hljs-comment\"&gt;//       }&lt;/span&gt;\n    }\n}\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; queens[&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n &lt;span class=\"hljs-built_in\"&gt;queen&lt;/span&gt;(queens,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/062963516636141.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["写了一个求解八皇后问题的问题代码", ["\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "<cstring>", "\n\n", "using", " ", "namespace", " std;\n\n", "int", " ", "queen", "( ", "int", " col[", "9", "],", "int", " start)", "{    ", "//数组的下标代表列,col[i]的值代表在该列放的皇后所在的行数.", "\n    ", "if", "(start == ", "9", "){\n            ", "for", "(", "int", " j = ", "1", "; j <", "9", "; j++)cout << col[j] ;\n            cout << endl;\n            ", "return", " ", "0", ";", "//假如正常进行到第八列, 就输出数组;", "\n        }\n    ", "for", "(", "int", " i =start; i <", "9", "; i ++){\n        ", "for", "(", "int", " k = ", "1", "; k <", "9", "; k++){\n            ", "bool", " flag = ", "true", ";\n            col[i] = k;", "//给第i列的第k行放上皇后;", "\n            ", "for", "(", "int", " j = ", "1", "; j < ", "9", ";j++){\n                ", "if", " (i == j || col[j] == ", "0", ") ", "continue", ";", "//不与同一个格子、没有放皇后的格子;进行比较", "\n                ", "if", "(col[j] == col[i]|| i+col[i] == j + col[j] || i- col[i] == j-col[j]) {", "//检测是否有同行、同对角线的皇后", "\n                        flag = ", "false", ";col[i] = ", "0", ";", "break", ";", "/*如果有问题,flag输出false,跳出循环\n                                                        如果没有,flag为true;尝试在下一列放置皇后*/", "\n                    }\n                }\n            ", "if", "(flag){\n                ", "if", "(!col[i]) ", "return", " ", "0", ";", "//如果flag为true,而且在该列放置了皇后,就继续对下一列进行放置操作;如果未放置,说明此时无解,跳出本层递归;", "\n                ", "queen", "(col,start+", "1", ");\n            }\n        }\n    }\n}\n\n\n", "int", " ", "main", "()", "{\n ", "int", " queens[", "9", "] = {", "0", "};\n\n ", "queen", "(queens,", "1", ");\n}\n\n", "\n", "以上,输出了很多很多个数字.."]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你题目的解答代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;/^([&amp;#43;\\-_&lt;span class=\"hljs-symbol\"&gt;\\(&lt;/span&gt;&lt;span class=\"hljs-symbol\"&gt;\\)&lt;/span&gt;\\{\\}\\s\\.,]*\\d){7,15}[&amp;#43;\\-_&lt;span class=\"hljs-symbol\"&gt;\\(&lt;/span&gt;&lt;span class=\"hljs-symbol\"&gt;\\)&lt;/span&gt;\\{\\}\\s\\.,]*$/.test(str)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;还需要什么其他分隔符可以自己加在[]中&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "算法与数字", "Question": ["识别号码的正则表达式，求帮助", ["问题遇到的现象和发生背景", "\n", "谷歌搜索，从描述和标题找电话号码", "传整个描述的字符串进去，通过正则表达式，把各种类型的号码找出来", "\n", "号码规则：", "程序需要识别全球电话和号码，长度7-15位数字【最短加拿大的7位数字，最长的15位数字008613925553088，中间有空格.等括号-_*等分隔符号各种（比例0086.139.2555.308.8）】", "\n", "支持以下样例方式:", "07.08.711.08.39  号码之间任意加.或者其他分隔符", "86-010-40020020", "+86.139.2555.3088", "010-40020020", "010-400 200 20 各种空格分开）", "0 8 0 0 9 7 0 0 0 0 1 0", "1 (205) 3191273.", "0809(955) (5577)", "0708.711.0839", "1(213)761-5248", "1(213) 444-6481}", "1(213) 444-6481}", "44 7770 192847.", "86-10-13523458056,", "086-13523458056", "0086-13523458056 ，", "10-13523458056 ，", "13523458056", "+1(949)228-9436", "\n", "\n", "操作环境、软件版本等信息", "\n", "C#网络调用", "\n", "尝试过的解决方法", "\n", "网上下载了感觉不满足需求", "\n", "我想要达到的结果", "\n", "需要写成对应的正则表达式，输入整个谷歌搜索的描述字符，能把号码匹配找出来", "例如", "Face mask for sale WhatsApp +1(949)228-9436. Watch later. Share. Copy link. Info. Shopping. Tap to unmute. If playback", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的第二个for循环中的j的限制条件应该是 j&amp;lt;arr.length-1-i,而不是 j&amp;lt;arr.length-1-j&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;for&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(int j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;arr.length-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;-j;j&amp;#43;&amp;#43;)&lt;/span&gt;&lt;/span&gt;\n改为\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;for&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(int j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j&amp;lt;arr.length-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;-i; j&amp;#43;&amp;#43;)&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["冒泡排序法遇到的问题", ["我的冒泡排序法如果数组是奇数就最后一个数字不是最大的，但是没有排到前面来，如果是偶数的话就是倒数第二个", "\n", "\n", "public", " ", "class", " lx12{\n    ", "public", " static ", "void", " main(String[] args) {\n        ", "int", " arr[] = {", "1", ",", "0", ",", "4", ",", "7", ",", "-1", "};\n      ", "int", " ", "temp", " = ", "0", ";\n      ", "for", "(", "int", " i =", "0", ";i<arr.length", "-1", ";i++){\n         ", "for", "(", "int", " j=", "0", ";j<arr.length", "-1", "-j;j++){\n            ", "if", "(arr[j]>arr[j+", "1", "]){\n               ", "temp", " = arr[j];\n               arr[j] = arr[j+", "1", "];\n               arr[j+", "1", "] = ", "temp", ";\n            }\n         }\n         ", "System", ".", "out", ".println(\"这是\"+(i+", "1", ")+\"次循环\");\n         ", "for", "(", "int", " j=", "0", ";j<arr.length;j++){\n            ", "System", ".", "out", ".print(arr[j]+\"\\t\");\n         }\n      }\n     \n    }\n}\n"]], "Tag": "算法设计"}
{"Answer": "假设两个格子的坐标为(x1,y1), (x2,y2).\r\n那么判断相邻: ((x1==x2) &amp;&amp; (abs(y1-y2)==1)) || ((y1==y2) &amp;&amp; (abs(x1-x2)== 1))\r\n\r\n\r\n用伪代码说明一下,怎么把二维数组分组\r\n\r\n```\r\n// 0 表示未分组, &gt;=1 表示分在哪个组\r\ngroup[16] = {0}\r\ncolor[16]\r\ngroup_num = 0;\r\n\r\n// 递归深度优先遍历, 在当前点的上下左右4个方向探索, 如果未分组, 且颜色一样,则加入当前分组\r\ndfs(x, group_id)\r\n{\r\n  cur_color = color[x];\r\n  check(x-4, cur_color,group_id);\r\n  check(x-1, cur_color,group_id);\r\n  check(x+1, cur_color,group_id);\r\n  check(x+4, cur_color,group_id);\r\n}\r\n\r\ncheck(x, cur_color, group_id) {\r\n  if (x &gt;=0 &amp;&amp; x &lt;16 &amp;&amp; 0 == group[x]) {\r\n    if (color[x] == cur_color) {\r\n      group[x] = group_id;\r\n      dfs(x,group_id);\r\n    }\r\n  }\r\n}\r\n\r\n// 对每个点, 看是否已经分组, 如果未分组, 则新建分组并做深度优先遍历\r\nfor (i = 0; i &lt; 16; i++) {\r\n  if (0 == group[i]) {\r\n    group_num += 1;\r\n    group[i] = group_num;\r\n    dfs(i, color[i], group[i]);\r\n  }\r\n}\r\n\r\n```", "Konwledge_Point": "算法与数字", "Question": ["最难图形遍历，求大神解决！！！", ["\n\n", "像这种图片怎么查找颜色相同的组件，找到相同的了，怎么才能知道颜色相同的方块是否相邻，像这种", "\n我现在的方案是：先创建5个不同颜色的color对象（这张图片只有4中颜色，没次运行方块的颜色不一样。设置的概率的。），然后坐标查询每个方块的颜色，返回的颜色和出创建的颜色对象作比较，和color对象相同的颜色分别用0--4（0红色，1黄色，2绿色，3蓝色，4紫色）表示，之后就用一个长度为16的二维数组装起，这样就得到了每个坐标的颜色。数组里面的值为：1312003010320012。这个一维数组代表的是4x4的格子中颜色。我的难题就是怎么判断相同的数字相邻。", "\n如果有这个问题解决办法或者有更好的算法请帮忙解答一下。", "\n这个是图形代码，负责创建容器和创建排列组件：", "\n\n", "package zhuJie_MB;\n\nimport java.awt.Color;\nimport java.util.Random;\n\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\n\nimport suanFa.XiaoChu_SF;\n\npublic  class Zhumianban_JM{\n    public static JFrame jFrame;\n    public static JButton[] jb=new JButton[16];\n\n    public static void main(String[] args) {\n        Zhumianban_JM zh=new Zhumianban_JM();\n        zh.zhuJianMian();\n        XiaoChu_SF jj=new XiaoChu_SF();\n        jj.suan();\n    }\n    public void zhuJianMian() {\n        Random r=new Random();\n        jFrame=new JFrame(\"糖果Party\");\n        jFrame.setBounds(100,50,1000,600);\n        jFrame.setLayout(null);\n\n        final Color red=new Color(255,0,0);//设置5种颜色。\n        final Color yellow=new Color(255,255,0);\n        final Color green=new Color(0,255,0);\n        final Color blue=new Color(0,0,255);\n        final Color purple=new Color(128,0,128);\n        int x=0;\n        int y=0;\n        for (int i = 0; i <16; i++) {//使用for循环16次。将16个组件初始化并添加到容器中。\n            jb[i]=new JButton();\n            int u=r.nextInt(15);//设置15的随机数。0-4红色，概率最高。以此类推。\n            if (u>=0 && u<=4) {\n                jb[i].setBackground(red);\n            }else if (u>4 && u<=8) {\n                jb[i].setBackground(yellow);\n            }else if (u>8 && u<=11) {\n                jb[i].setBackground(green);\n            }else if (u>11 && u<=13) {\n                jb[i].setBackground(blue);\n            }else {\n                jb[i].setBackground(purple);\n            }\n            jb[i].setBounds(x,y,80,80);//设置布局，使用变量想x，y当中介。使其排列为一个4x4的格子。\n            if (x==240) {\n                y+=80;\n                x=0;\n            }else {\n                x+=80;\n            }\n            jFrame.add(jb[i]);\n        }\n        jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        jFrame.setVisible(true);\n    }\n\n}\n\n", "\n\n", "这个是相关的算法：", "\n\n", "package suanFa;\n\nimport java.awt.AWTException;\nimport java.awt.Color;\nimport java.awt.Robot;\n\nimport zhuJie_MB.Zhumianban_JM;\n\npublic class XiaoChu_SF {\n    static Robot robot=null;\n    static int xxx=145;//获取屏幕x坐标\n    static int yyy=120;//获取屏幕y坐标\n    static int col;//定义一个变量，用来储存颜色所对应的数字。\n    static int[] color=new int[16];//定义一个整型数组，用来装16个组件所对应的颜色代码。\n    static Zhumianban_JM zh=new Zhumianban_JM();\n    public static void suan() {\n        final Color red=new Color(255,0,0);\n        final Color yellow=new Color(255,255,0);\n        final Color green=new Color(0,255,0);\n        final Color blue=new Color(0,0,255);\n        final Color purple=new Color(128,0,128);\n\n\n        new Thread() {//此处需要加一个线程，让线程停止1秒，不然进程未加载出来就开始查询坐标颜色。\n            public void run() {\n                try {\n                    Thread.sleep(1000);\n                    for (int i = 0; i <16; i++) {\n                        try {\n                            robot=new Robot();\n                        } catch (AWTException e) {\n                            e.printStackTrace();\n                        }\n                        robot.getPixelColor(xxx, yyy);\n                        if (robot.getPixelColor(xxx, yyy).equals(red)) {\n                            col=0;\n                        }else if (robot.getPixelColor(xxx, yyy).equals(yellow)) {\n                            col=1;\n                        }\n                        else if (robot.getPixelColor(xxx, yyy).equals(green)) {\n                            col=2;\n                        }\n                        else if (robot.getPixelColor(xxx, yyy).equals(blue)) {\n                            col=3;\n                        }else if (robot.getPixelColor(xxx, yyy).equals(purple)) {\n                            col=4;\n                        }else {\n                            col=50;\n                        }\n                        color[i]=col;//把每个颜色放到color数组中。\n                        System.out.print(color[i]);\n                        if (xxx==385) {//将每次查询是的坐标变换。使其查询坐标颜色时排列为4X4的格子。\n                            yyy+=80;\n                            xxx=145;\n                        }else {\n                            xxx+=80;\n                        }\n                        if (i==15) {//当颜色查询完毕后，进入no1方法。\n                            no1();\n                        }\n                    }\n\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n\n            }\n        }.start();\n    }\n    public static void no1() {\n        int x0 = 0,x1 = 0,x2 = 0,x3 = 0,x4 = 0;//定义5个变量用来储存相同颜色的个数。\n        for (int i = 0; i <16; i++) {//需要查询16次\n            if (color[i]==0) {//查询数组中的数字是否与0，1，2，3，4,相等。\n                x0++;\n            }else if (color[i]==1) {\n                x1++;\n            }else if (color[i]==2) {\n                x2++;\n            }else if (color[i]==3) {\n                x3++;\n            }else if (color[i]==4) {\n                x4++;\n            }\n        }\n\n        int[] xx0 =new int[x0];//定义5个数组用来储存相同颜色的位置。\n        int[] xx1 =new int[x1];\n        int[] xx2 =new int[x2];\n        int[] xx3 =new int[x3];\n        int[] xx4 =new int[x4];\n\n\n        int xxx0=0;//用来当做xx0...的索引。\n        if (x0>=4) {//如果相同的颜色的个数大于或者等于4就把他们所对应的位置保存到上面的数组中\n            for (int i = 0; i <16; i++) {\n                if (color[i]==0) {\n                    xx0[xxx0]=i;\n                    xxx0+=1;//每次索引加一。\n                }\n            }\n        }\n        int xxx1=0;\n        if (x1>=4) {\n            for (int i = 0; i <16; i++) {\n                if (color[i]==1) {\n                    xx1[xxx1]=i;\n                    xxx1+=1;\n                }\n            }\n        }\n        int xxx2=0;\n        if (x2>=4) {\n            for (int i = 0; i <16; i++) {\n                if (color[i]==2) {\n                    xx2[xxx2]=i;\n                    xxx2+=1;\n                }\n            }\n        }\n        int xxx3=0;\n        if (x3>=4) {\n            for (int i = 0; i <16; i++) {\n                if (color[i]==3) {\n                    xx3[xxx3]=i;\n                    xxx3+=1;\n                }\n            }\n        }\n        int xxx4=0;\n        if (x4>=4) {//判断组件是否有4个或者以上，如果有输出组件的位置。\n            for (int i = 0; i <16; i++) {\n                if (color[i]==4) {\n                    xx4[xxx4]=i;\n                    xxx4+=1;\n                }\n            }\n        }\n", "\n\n", "位置和数量都有了，就差怎么知道相邻了。4个或4个以上都算。有点像消消乐，但是消消乐只有横排和枞排。", "\n注：每次运行的图形界面不一样"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;用哈希表&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["vJudge 提交 一直超时", ["题目：", "给出包含n个元素的数组a，求a中距离最近的一对 i,j，满足i < j 且 a[i] == a[j]。如果同时存在多对，输出最小的 i 对应的a[i]。", "\n", "例如：10个数", "19,13,11,19,11,5,6,3,4,3", "满足存在a[i]=a[j]的数字包括：19,11,3。其中11,3这两对的距离更近，在距离相同的情况下，11的下标更靠前。如果不存在相同的数字，输出 \"No\"", "\n", "\n", "#", "include", "<iostream>", "\n", "using", " ", "namespace", " std;\n", "int", " ", "main", "()", " ", "{\n    ", "int", " size;\n    cin >> size;\n    ", "int", "* arr = ", "new", " ", "int", "[size];\n    ", "for", " (", "int", " i = ", "0", "; i < size; i++) {\n        ", "scanf", "(", "\"%d\"", ", arr + i);\n    }\n    ", "int", " min = INT_MAX;\n    ", "int", " minnum = INT_MAX;\n    ", "for", " (", "int", " i = ", "0", "; i < size; i++) {\n        ", "for", " (", "int", " k = i + ", "1", "; k < size; k++) {\n            ", "if", " ((arr[i] == arr[k]) && (k - i) < min) {\n                min = k - i;\n                minnum = arr[i];\n                ", "break", ";\n            }\n        }\n    }\n    ", "if", " (minnum == INT_MAX) {\n        cout << ", "\"No\\n\"", ";\n    }", "else", " cout << minnum;\n}\n", "\n", "学院让在vjudge 上交题", "我寻思 这个都超时了 ，还有更快的吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;Python中str.index如果找不到就会报错&amp;#xff0c;可以用异常处理&amp;#xff0c;或者换成str.count&lt;br /&gt;麻烦采纳一下哟&amp;#xff0c;谢谢๑•́₃•̀๑&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["Python index() ValueError: 402.11 is not in list", ["问题遇到的现象和发生背景", "\n", "我循环遍历了两个数组，用以对其中一组数据进行数据扩充。数据如下：第一张图是需要扩充的，第二张是扩充范围，以第一列为基准，最邻近填充第二列", "\n", "\n", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "txt", " = pd.read_csv('F:\\\\Practice\\\\RamanSpectrum\\\\Savitzky-Golay\\\\actinolite\\\\R040063.txt', header=None)  # 第一张图的数据读入\n", "array", " = np.array(txt, dtype='float32')  # 转换为数组\n\n", "center_array", " = get_unique('F:\\\\Practice\\\\RamanSpectrum\\\\Savitzky-Golay')  # 第二张图的数据读入\n\n", "list_arr", " = list(center_array[:, ", "0", "])  # 设置一个列表用以索引指引\n\n", "# 遍历第一张图，把第二张图对应的位置前后填充起来", "\n", "for", " x in range(len(array)):\n    ", "print", "(x)\n    ", "if", " x == len(array) - ", "1", ":\n        ", "break", "\n    ", "num", " = int(round(array[x + ", "1", ", ", "0", "] - array[x, ", "0", "], ", "4", ") * ", "100", ") - ", "1", "\n    ", "a", " = int(array[x, ", "0", "] * ", "100", ")/", "100", "\n    ", "b", " = int(array[x + ", "1", ", ", "0", "] * ", "100", ")/", "100", "\n    ", "loc1", " = list_arr.index(a)\n    ", "loc2", " = list_arr.index(b)\n    ", "center_array", "[loc1:loc1 + num // ", "2", " + ", "1", ", ", "1", "] = array[x, ", "1", "]\n    ", "center_array", "[loc1 + num // ", "2", " + ", "1", ":loc2 + ", "1", ", ", "1", "] = array[x + ", "1", ", ", "1", "]\n", "\n", "运行结果及报错内容", "\n", "因为出现了错误，所以我尝试输出x，查看哪个数字出现错误，", "\n", "结果显示，是第一张图第488这个位置的数出现了问题，查看数据：", "\n", "但该数字int后不应该是402.11，甚至第二张图里面都没有出现过，所以才导致index找不到，但问题是int(401.637900*100)/100后得到的数值是401.63：", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我之前使用的是round保留两位数，但我只需要强制进行后两位的选取，并不需要四舍五入。", "所以我换成了int，但还是出现了问题"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可能是你没有对a进行范围校验&amp;#xff0c;a的输入范围是1~9&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["[Java]连续数求和：a+2个a+..+ n个a。代码自测无问题，但平台用例通过50%。", ["这是一道机试题，要求Java实现", "本地测试用例都通过了，但平台的测试用例只通过了50%，无法得知平台使用什么测试用例。", "\n", "------原题描述-------------------------------------------------------------------------------------------------------------------", "题目名称：连续数求和", "有这样一类数列，例如：", "数列1：2, 22, 222, 2222, 22222, 222222", "数列2：3, 33, 333, 3333, 33333, 333333, 333333等", "其中每个数的各位数上的值相同，范围1-9。", "输入：a,n，其中a是第一个数字，n是位数。输出：以上形式的数列和(即：a+2个a+..+ n个a)。", "如输入：2,5", "则输出最终求和：24690", "（即：2+22+222+2222+22222（5个2）=24690）", "输入：3,8", "则输出最终求和：37037034", "（即：3+33+333+3333+33333+333333+3333333+33333333（8个3）=37037034）", "注意：请不要修改框架代码，完成getSum函数代码，不要修改函数名，入参，及返回值。", "\n", "\n", "个人说明：", "代码结构平台已预处理好，无需处理输入输出等。只需完成getSum函数，getSum函数结构如下：", "\n", "public", " ", "static", " ", "long", " ", "getSum", "(", "int", " a, ", "int", " n)", " ", "{\n}\n\n", "\n", "个人完整实现如下：", "\n", "public", " ", "static", " ", "long", " getSum(", "int", " a, ", "int", " n) {\n        ", "long", " ", "sum", " = ", "0", ";\n        ", "long", " x = a;\n        ", "for", " (", "int", " i = ", "0", "; i < n; i++) {\n            ", "sum", " = ", "sum", " + x;\n            x = x * ", "10", " + a;\n        }\n        ", "return", " ", "sum", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;int a[] &amp;#61; { 0 };不能这么写&amp;#xff0c;你可以给一个比较大的值&amp;#xff0c;比如int a[10000] &amp;#61; { 0 };\n  &lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["vs提示堆栈被损坏，但是能够运行出来结果？", ["各位帮忙看下！！", "代码如下：", "\n", "#", "define", " _CRT_SECURE_NO_WARNINGS 1 ", "\n", "#", "include", " ", "<stdio.h>", "\n\n", "int", " ", "main", "()", " ", "{\n    ", "//冒泡排序", "\n    ", "int", " a[] = { ", "0", " };\n    ", "int", " b=", "0", ";    ", "//这里的 b 是用来储存数组的大小", "\n    ", "printf", "(", "\"输入数字：\\n\"", ");\n    ", "printf", "(", "\"输入  00  停止\\n\"", ");\n    ", "for", " (", "int", " i = ", "0", ";; i++)\n    {\n        ", "scanf", "(", "\"%d\"", ", &a[i]);\n        ", "if", " (a[i] == ", "00", ")\n        {\n            b = i;\n            ", "break", ";\n        }\n    }\n    ", "printf", "(", "\"  %d  个数的排序结果：\\n\"", ",b);\n    ", "for", " (", "int", " i = ", "0", "; i < b; i++)        ", "//因为输入了 b 个数，此处的  <b 刚好可以把最后输入的  控制 00  去掉", "\n    {\n        ", "for", " (", "int", " j = i; j < b; j++)\n        {\n            ", "if", " (a[i] < a[j])                  \n            {\n                ", "int", " te = a[i];\n                a[i] = a[j];\n                a[j] = te;\n                \n            }\n        }\n    }\n    ", "for", " (", "int", " i = ", "0", "; i < b; i++)    ", "//遍历", "\n    {\n        ", "printf", "(", "\"%d  \"", ", a[i]);\n    }\n}\n\n\n\n\n\n", "\n"]], "Tag": "算法设计"}
{"Answer": "```\r\n #include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\n#include &lt;time.h&gt;\r\n#define MAX_N 20\r\n\r\nint max3(int, int, int);\r\nint maxSubArrayAns(int []);\r\nint maxSubArray(int [], int, int);\r\n\r\nint main(){\r\n    int nums[MAX_N];\r\n    int i;\r\n    srand(time(0));\r\n    printf(\"array: \\n\");\r\n    for(int i = 0; i &lt; MAX_N; i++){\r\n        nums[i] = (int)(rand() % (MAX_N * 2) - MAX_N);\r\n        printf(\"%d\\t\", nums[i]);\r\n    }\r\n    printf(\"\\n\");\r\n    printf(\"The max subsequen sum is %d.\\n\", maxSubArrayAns(nums));\r\n\r\n\r\n    return 0;\r\n}\r\n\r\nint max3(int a, int b, int c){\r\n    if(a &gt; b)\r\n        return a &gt; c ? a : c;\r\n    else\r\n        return b &gt; c ? b : c;\r\n}\r\n\r\nint maxSubArray(int nums[], int left, int right){\r\n    int maxLeftSum, maxRightSum;\r\n    int maxLeftBorderSum, maxRightBorderSum;\r\n    int leftBorderSum, rightBorderSum;\r\n\r\n    if(left == right)\r\n        if(nums[left] &gt; 0)\r\n            return nums[left];\r\n        else\r\n            return 0;\r\n\r\n    int mid = (left + right) / 2, i;\r\n    maxLeftSum = maxSubArray(nums, left, mid);\r\n    maxRightSum = maxSubArray(nums, mid + 1, right);\r\n\r\n    maxLeftBorderSum = 0, leftBorderSum = 0;\r\n    for(i = mid; i &gt;= left; i--){\r\n        leftBorderSum += nums[i];\r\n        if(leftBorderSum &gt; maxLeftBorderSum)\r\n            maxLeftBorderSum = leftBorderSum;\r\n    }\r\n\r\n    maxRightBorderSum = 0, rightBorderSum = 0;\r\n    for(i = mid + 1; i &lt;= right; i++){\r\n        rightBorderSum += nums[i];\r\n        if(rightBorderSum &gt; maxRightBorderSum)\r\n            maxRightBorderSum = rightBorderSum;\r\n    }\r\n\r\n    return max3(maxLeftSum, maxRightSum, maxLeftBorderSum + maxRightBorderSum);\r\n}\r\n\r\nint maxSubArrayAns(int nums[]){\r\n    return maxSubArray(nums, 0, MAX_N - 1);\r\n}\r\n```\r\n\r\n使用分治法的话，平均时间复杂度为Θ(n lg n)。实际上解决最大子序列问题还有一种更加快速的方法，这种方法的时间复杂度是Θ(n)，是一种线性的算法\r\n\r\n\r\n\r\n```\r\n int maxSubArrayAns(int nums[]){\r\n    int i, thisSum = 0, maxSum = 0;\r\n    for(i = 0; i &lt; MAX_N - 1; i++){\r\n        thisSum += nums[i];\r\n        if(thisSum &gt; maxSum)\r\n            maxSum = thisSum;\r\n        else if(thisSum &lt; 0)\r\n            thisSum = 0;\r\n    }\r\n\r\n    return maxSum;\r\n}\r\n```", "Konwledge_Point": "算法与数字", "Question": ["分治法求最大非连续子序列", ["求非连续子序列的问题用DP很好解决，但是**分治法**就比较难了", "\n假设有一个序列是L = [1, 0, 5, 3, 2, 7, 9, 15, 6, 4, 13]", "\n他的最大非连续子序列就是 S = [1, 5, 7, 15, 13] 俩俩数字任意不相邻", "\n现在要求给L求S"]], "Tag": "算法设计"}
{"Answer": "错误在这行：\r\n```\r\nMiniSpanTree_Prim(AdjMatrix &amp;gn,char u)/*从顶点u出发，按普里姆算法构造连通网gn的最小生成树，并输出生成树的每条边*/\r\n{int i,e;\r\n.....\r\n```\r\n\r\n\r\n\r\n\r\nMiniSpanTree_Prim函数定义时，应明确返回值类型。\r\n假设该函数无返回值，也应该定义成:\r\n\r\n\r\n\r\n```\r\nvoid MiniSpanTree_Prim(AdjMatrix &amp;gn,char u){\r\n......\r\n}\r\n```\r\n\r\n**用心回答每个问题，如果对您有帮助，请采纳答案好吗，谢谢！**", "Konwledge_Point": "算法与数字", "Question": ["数据结构关于图的小错误", ["#include", "\n#include", "\n#define Infinity 32768", "\n#define OK 1", "\n#define Error -1", "\n#define True 1", "\n#define False 0", "\n#define MAX_VERTEX_NUM 10", "\ntypedef enum{DG,DN,UDG,UDN}GraphKind;      /*图的种类分别为有向图，有向网，无向图，无向网*/", "\ntypedef char VertexData;", "\ntypedef struct ArcNode", "\n{int adj;", "\n\n", "}ArcNode;", "\ntypedef struct ", "\n{VertexData vertex[MAX_VERTEX_NUM];", "\n ArcNode arcs[MAX_VERTEX_NUM][MAX_VERTEX_NUM];", "\n int vexnum,arcnum;                       /*图的顶点数和弧数*/", "\n GraphKind kind;", "\n}AdjMatrix;", "\nstruct Record{", "\n     char  adjvex;  // U集中的顶点", "\n     int   lowcost;  // 边的权值", "\n}closedge[MAX_VERTEX_NUM];", "\nint LocateVertex(AdjMatrix ", "G,VertexData v)/", "求顶点位置函数*/", "\n{int j=Error,k;", "\n for(k=0;kvexnum;k++)", "\n  if(G->vertex[k]==v)", "\n   {j=k;break;", "\n   }", "\n   return(j);", "\n}", "\nint CreateDN(AdjMatrix ", "G)             /", "创建一个有向网*/", "\n{int i,j,k,weight;VertexData v1,v2;", "\n printf(\"请输入两个数字表示弧数和顶点数\\n\");", "\n fflush(stdin);                         /*清空输入缓冲区*/ ", "\n scanf(\"%d,%d\",&G->arcnum,&G->vexnum);", "\n for(i=0;ivexnum;i++)               /*初始化邻接矩阵*/", "\n  for(j=0;jvexnum;j++)", "\n   G->arcs[i][j].adj=Infinity;", "\n for(i=0;ivexnum;i++)", "\n  printf(\"请输入图的顶点\\n\");", "\n  fflush(stdin);", "\n  scanf(\"%c\",&G->vertex[i]);", "\n for(k=0;karcnum;k++)", "\n {printf(\"请输入一条弧的两个顶点及权值\\n\");", "\n  fflush(stdin);", "\n  scanf(\"%c,%c,%d\",&v1,&v2,&weight);", "\n  i=LocateVertex(G,v1);", "\n  j=LocateVertex(G,v2);", "\n  G->arcs[i][j].adj=weight;              /*建立弧*/", "\n }", "\n return(OK);", "\n}", "\nint Minimum (Record closedge[])", "\n{int reserve=Infinity;", "\n int min;", "\n for(int i=1;i\n {", "\n   if(closedge[i].lowcost0)//没有访问过但是存路径", "\n    {", "\n      reserve=closedge[i].lowcost;", "\n      min=i;", "\n    }", "\n   }", "\n return min;", "\n}", "\nMiniSpanTree_Prim(AdjMatrix &gn,char u)/*从顶点u出发，按普里姆算法构造连通网gn的最小生成树，并输出生成树的每条边*/", "\n{int i,e;", "\n closedge[u].lowcost=0;              /*初始化，U={u}*/", "\n for(i=0;i<gn.vexnum;i++)", "\n      if(i!=u)                        /*对V-U中的顶点i，初始化closedge[i]*/", "\n      {closedge[i].adjvex=u;", "\n       closedge[i].lowcost=gn.arcs[u][i].adj;", "\n      }", "\n for(e=1;e<=gn.vexnum-1;e++)          /*找n-1条边（n=gn.vexnum*/", "\n {int v=Minimum(closedge);            /*closedge[v]中存有当前最小边（u，v）的信息*/", "\n  u=closedge[v].adjvex;               /*u属于U*/", "\n  printf(\"%c,%c\",u,v);                /*输出生成树的当前最小边（u，v）*/", "\n  closedge[v].lowcost=0;              /*将顶点v纳入U的集合*/", "\n  for(i=0;i<gn.vexnum;i++)            /*在顶点v并入U之后，更新closedge[i]*/", "\n      if(gn.arcs[v][i].adj<closedge[i].lowcost)", "\n      {closedge[i].lowcost=gn.arcs[v][i].adj;", "\n       closedge[i].adjvex=v;", "\n      }", "\n }", "\n}", "\nint main()", "\n{AdjMatrix G;", "\n CreateDN(&G);", "\n char first=' ';", "\n printf(\"请输入第一个访问的结点\\n\");", "\n scanf(\"%c\",&first);", "\n MiniSpanTree_Prim(G,first) ;", "\n return 0;", "\n}", "\n出现这个错误\\Users\\Administrator\\Desktop\\3.2.cpp 69 C:\\Users\\Administrator\\Desktop\\C [Error] ISO C++ forbids declaration of `MiniSpanTree_Prim' with no type "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/259758711066196.gif\" class=\"md_img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/732578010066147.jpeg\" class=\"md_img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["识别象棋python运行的疑问", ["这段代码在运行不正常", "（注：功能为，任意给定一张带有棋子的象棋棋盘图像,请识别棋盘中的棋子是什么颜色、是什么棋子及相应的坐标是多少）", "代码如下，怎么修改呀", "\n", "# 图片二值化", "\n", "import", " numpy ", "as", " np\n", "import", " cv2 ", "as", " cv\n", "from", " matplotlib ", "import", " pyplot ", "as", " plt\n", "from", " PIL ", "import", " Image\nimg = Image.", "open", "(", "'C:/Users/ZengFH/Desktop/2.png'", ")\n \n", "# 模式L”为灰色图像，它的每个像素用8个bit表示，0表示黑，255表示白，其他数字表示不同的灰度。", "\nImg = img.convert(", "'L'", ")\nplt.subplot(", "1", ",", "2", ",", "1", "),plt.imshow(Img)\n", "#Img.save(\"test1.jpg\")", "\n \n", "# 自定义灰度界限，大于这个值为黑色，小于这个值为白色", "\nthreshold = ", "200", "\n \ntable = []\n", "for", " i ", "in", " ", "range", "(", "256", "):\n    ", "if", " i < threshold:\n        table.append(", "0", ")\n    ", "else", ":\n        table.append(", "1", ")\n \n", "# 图片二值化", "\nphoto = Img.point(table, ", "'1'", ")\nplt.subplot(", "1", ",", "2", ",", "2", "),plt.imshow(photo)\n", "#photo.save(\"test2.jpg\")", "\nplt.show()\n\n", "#竖线以x坐标进行排序", "\nsx = ", "sorted", "(sx, key=", "lambda", " x: x[", "0", "])\n", "#直线以Y坐标进行排序", "\nzx = ", "sorted", "(zx, key=", "lambda", " x: x[", "2", "])\n\n\n", "#对于竖线进行过滤", "\nsxFilter=[]\n", "if", " ", "len", "(sx)>", "0", ":\n    sxFilter.append(sx[", "0", "])\n    tempsx = sx[", "0", "]\n    ", "# 从第二个开始提取", "\n    ", "for", " i ", "in", " ", "range", "(", "len", "(sx))[", "1", ":]:\n        ", "# 这是竖线的x坐标值间距要大于10", "\n        ", "if", " (sx[i][", "0", "] - tempsx[", "0", "]) > ", "10", ":\n            tempsx = sx[i]\n            sxFilter.append(sx[i])\n\n", "#棋子识别", "\n", "#根据轮廓获取最小矩形边框", "\n            x, y, w, h = cv.boundingRect(cnts[i])\n\n\n", "#轮廓获取得到的是上面图，下面的会有一些干扰项", "\n", "#通过拿到边框的坐标，然后根据宽高的比例进行过滤，我这里根据宽高的差", "\n            x, y, w, h = cv.boundingRect(cnts[i])\n            ", "print", "(x,y,w,h)\n            ", "if", "(", "abs", "(w-h)>", "20", "):\n                    ", "continue", "\n\n\n", "#识别之前要做的是边框排序，根据上面拿到的轮廓数据", "\n", "#这里按照Y，X递增的方式进行", "\nquestionCnts2 = ", "sorted", "(questionCnts.copy(), key=", "lambda", " x: (x[", "1", "],x[", "0", "]))\n", "#排序我这里遇到了问题，因为每行棋子识别的时候，坐标有些高低差导致排序结果可能跟棋盘显示有些出入", "\n", "#其实识别之后可以根据上一篇文章得到的棋盘表格一步一步的得到棋子，我这里没做", "\n", "#我用了个笨办法处理的 就是每行的Y轴根据个大致范围固定了", "\n", "if", " ", "abs", "(y - ", "19", ") < ", "20", ":\n             y = ", "19", "\n\n", "if", " ", "abs", "(y - ", "88", ") < ", "20", ":\n             y = ", "88", "\n \n ", "#拿到了边框后我们可以根据边框截取抠图了", "\nx, y, w, h = questionCnts2[i]\n    ", "# print(x, y, w, h)", "\nim = img[y:y + h, x:x + w]\n  \n  ", "#抠图后然后根据模板匹配算法得到最匹配的模板", "\nresult = cv.matchTemplate(cv.resize(old_img,", "None", ",fx=", "0.8", ", fy=", "0.8", ", interpolation = cv.INTER_CUBIC),tempImg,cv.TM_CCOEFF)\n(_, score, _, _) = cv.minMaxLoc(result)\n", "if", " check_score == ", "0", " ", "or", " score > check_score:\n      ", "#最大得分项", "\n      check_score = score\n      ", "#最大得分项的文件名，然后根据字典获取棋子名称", "\n      ", "#字典", "\n      check_img = fileName\n\n", "#棋谱保存", "\n ", "#第一排的棋子高度大概就在19左右", "\n", "if", " ", "abs", "(y - ", "19", ") < ", "20", ":\n             y = ", "19", "\n\n\nchess_array=[[] ", "for", " i ", "in", " ", "range", "(", "10", ")]\n", "if", "(", "len", "(sxFilter)==", "9", " ", "and", " ", "len", "(zxFilter)==", "10", "):\n  ", "#竖线 直线", "\n  ", "print", "(", "\"---------------------\"", ")\n  ", "for", " i ", "in", " ", "range", "(", "len", "(zxFilter)):\n        ", "for", " j ", "in", " ", "range", "(", "len", "(sxFilter)):\n            ", "#直线的坐标", "\n            x1,x2,y1,y2=zxFilter[i]\n            ", "#竖线坐标", "\n            x3,x4,y3,y4=sxFilter[j]\n            check = ", "False", "\n            ", "print", "(zxFilter[i],", "\"-\"", ",sxFilter[j],i,j)\n            ", "for", " k ", "in", " ", "range", "(", "len", "(questionCnts)):\n                  x, y, w, h=questionCnts[k]\n                  ", "#获取中心坐标", "\n                  centre_x=x+w/", "2", "\n                  centre_y=y+h/", "2", "\n                  ", "#范围之内匹配成功", "\n                  ", "print", "(centre_x,", "\"-\"", ",centre_y)\n                  ", "#这里写的匹配误差在25之内", "\n                  ", "if", "(", "abs", "(centre_x-x3)<", "25", " ", "and", " ", "abs", "(centre_y-y1)<", "25", "):\n                    ", "print", "(", "\"命中!\"", ")\n                    check=", "True", "\n                    ", "#抠图", "\n                    im = img[y:y + h, x:x + w]\n                    ", "#识别", "\n                    orc = get_match(im)\n                    ", "if", " orc ", "is", " ", "not", " ", "None", ":\n                          chess_array[i].append(orc)\n                    ", "else", ":\n                        ", "print", "(", "\"未识别...\"", ")\n            ", "if", " ", "not", " check:\n                  chess_array[i].append(", "\"空空空\"", ")\n", "else", ":\n  ", "print", "(", "\"识别出错了!\"", ")\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;谢邀&amp;#xff0c;私信沟通一手。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["留学狗求大佬帮我看看这个C++哈希的问题怎么解答，需要在linux上跑", ["这是英文原文，链接: https://pan.baidu.com/s/1obkghFd_C59xibGdI_-Mlw 提取码: r75f ", "\n\n", "以下是翻译版本问题要求：", "\n\n", "描述（85分可交付成果/正确性/ 15分设计）", "\n\n", "我们首先提供您对该问题将要做什么的摘要。可交付成果 文件的末尾将提供输出格式。您将测试每个哈希 具有以下内容的实现：", "\n\n", "A）表中的元素总数（N），表的大小（T），负载系数 （Lambda = N / T），平均碰撞次数（M = C / N）和总碰撞次数 碰撞（C），", "\n\n", "B）您将检查另一个给定文件query_words.txt中的每个单词是否在哈希中 表格，并根据是否找到该单词打印相应的输出 找到了，找到该单词需要进行多少次探查（如果存在）。虽然你是 随文件一起提供，我们将使用看不见的测试文件以及另一个文件名，该文件名可能会 包含words.txt中所有单词的子集。", "\n\n", "为了实现上述目的，您将编写一个名为create_and_test_hash.cc的测试程序。 您的程序应像这样从终端运行（终端提示符为％）：", "\n\n", "% ./create_and_test_hash <words file name> <query words file name> <flag>", "\n\n", "对于二次探测应为“二次”，对于线性探测应为“ linear”，而“ double”应为“ double” 用于双重哈希。", "\n\n", "哈希和堆项目 例如，您可以在终端上写：", "\n\n", "% ./create_and_test_hash words.txt query_words.txt quadratic", "\n\n", "您可以使用提供的Makefile来编译和测试您的代码。", "\n\n", "对于双哈希，格式将略有不同，即如下：", "\n\n", "％./create_and_test_hash words.txt query_words.txt double R", "\n\n", "或者，也可以使用：", "\n\n", "％./create_and_test_hash words.txt query_words.txt double", "\n\n", "这里R是在实现double时应该使用的可选R值 在课堂上讨论并在教科书中描述的哈希技术：hash2（x）= R –（x mod R）。如果用户没有输入一个默认的R值，则应在代码中指定一个默认值 命令行。", "\n\n", "一，使用线性和二次探测进行散列（20分）", "\n\n", "修改提供的代码，以进行二次和线性探测，并测试create_and_test_hash。", "\n\n", "不要在其中的main（）函数内编写任何功能 create_and_test_hash.cc。在testHashingWrapper（）中编写所有功能 该文件中的功能。我们将使用我们自己的main函数，直接调用 testHashingWrapper（）。此包装函数将传递所有命令行参数 就像通常在主要功能中一样。", "\n\n", "您将打印上面提到的值，然后打印查询的单词，无论它们是 找到了，并确定了多少次探查。确切的交付物和输出格式 在文件末尾进行了描述。", "\n\n", "二。双重哈希（25分）", "\n\n", "编写代码以实现double_hashing.h，并使用create_and_test_hash进行测试。 这将是二次探测的变体。区别在于功能 FindPos（），现在必须使用其他策略来提供探测。作为第二个哈希 函数，请使用在课堂讲义中讨论并在教科书中找到的hash2（x）= R – （x mod R）。我们将使用我们自己的R值测试您的代码。此外，请指定哪个R README.HASH文件中用于测试程序的值。 切记不要在main（）函数中包含任何功能 create_and_test_hash.cc。", "\n\n", "您将打印当前的R值，上面A部分中提到的值，然后是 查询的单词，是否找到它们以及确定该单词需要进行多少次探查。精确的 文件的末尾描述了可交付成果和输出格式。", "\n\n", "三，拼写检查（40分）", "\n\n", "现在，您可以通过使用线性或二次或双精度来实现拼写检查器 哈希算法。给定一个文档，您的程序应正确输出所有 带有此类标签的拼写单词以及所有拼写错误的单词。对于每个拼写错误的单词 您应该提供字典中的候选更正列表，该列表可以由 将以下规则之一应用于拼写错误的单词：", "\n\n", "a）在任何可能的位置添加一个字符", "\n\n", "b）从单词中删除一个字符", "\n\n", "c）交换单词中的相邻字符 您的程序应从命令行运行，如下所示：", "\n\n", "% ./spell_check <document file> <dictionary file>", "\n\n", "系统会为您提供一个名为document1_short.txt，document_1.txt的小文档， 还有一个字典文件，其中包含大约370k个单词，名为wordsEnglish.txt。 例如，您的拼写检查器应更正以下错误。", "\n\n", "决定性->决定性（情况A） 决策->决策（案例B） 乡镇->国家（案例C）", "\n\n", "纠正提供的词典文件中不存在的任何单词（即使它是正确的） 英文）。", "\n\n", "一些提示：1.请注意，我们提供的词典是实际英语词典的子集， 只要您的拼写检查是合乎逻辑的，您就可以取得成绩。 例如， 字母“ i”不在词典中，更正可能是“中”，“如果”甚至是 “你好”。 这是可接受的输出。", "\n\n", "2.另外，如果将“编辑者”更正为“编辑者”，则可以。 （案例B，删除 特点）", "\n\n", "3.我们建议删除开头和结尾的所有标点符号，对于所有标点符号 单词会将字母转换为小写字母（例如，“ Hello！”被替换为“ hello”， 在拼写检查之前）。", "\n\n", "不要在spell_check.cc的main（）函数内编写任何功能。 写 该文件中的testSpellingWrapper（）内部的所有功能。 我们将使用我们的 自己的主要功能，直接调用testSpellingWrapper（）。 该包装函数是 传递了所有命令行参数，就像通常在main函数中一样。 您将打印该单词，无论它是否已经正确拼写（又名找到），以及所有 如果在词典中找不到该单词，则可能进行拼写更正。 提防 解析时在文档中使用标点符号和格式！ 确切的可交付成果和输出格式如下所述。", "\n\n", "（以下某部分是我要递交的文件，我省略翻译）", "\n\n", "格式 对于线性和二次探测标志（第一部分），格式应如下：", "\n\n", "number_of_elements: <int>", "\nsize_of_table: <int>", "\nload_factor: <float>", "\naverage_collisions: <float>", "\ntotal_collisions: <int>", "\n<new line>", "\n<word1> Found <probes1>", "\n<word2> Not_Found <probes2>", "\n<word3> Found <probes3>", "\n\n", "请包括在表格属性部分和单词列表之间显示的单行（ASCII 10，列为“ <新行>”）。 请加下划线 在“没有”和“找到”之间。 这里显示的单词列表是一个示例，实际输出将取决于query_words.txt中的单词。average_collisions和total_collisions的值将根据所使用的计算机而有所不同。 切换机器或寻求帮助时请注意这一点。 您的提交将在同一台计算机上评分，因此，只要您的实现对其他所有内容都是正确的，这些值就将保持一致。 对于所有标记（线性，二次和双精度），都会发生这种情况。", "\n\n", "正确输出的示例（数字不代表实际表）：", "\n\n", "number_of_elements: 670", "\nsize_of_table: 1560", "\nload_factor: 0.429487", "\naverage_collisions: 0.005", "\ntotal_collisions: 3", "\nhill Found 1", "\nskiny Not_Found 3", "\nbaked Found 1", "\n\n", " ", "\n\n", "对于双标记（第二部分），格式应如下：", "\n\n", "r_value: <int>", "\n<SAME FORMAT AS LINEAR / QUADRATIC>", "\n\n", "双散列的输出之间唯一的区别是增加了一行 r_value：<int>。 紧接在该行下方的输出应与线性输出相同 和二次探查，如上所述。 请在“不”之间添加下划线 和“找到”。", "\n\n", "正确输出的示例（数字不代表实际表）：", "\n\n", "number_of_elements: 200", "\nsize_of_table: 750", "\nload_factor: 0.266666", "\naverage_collisions: 0.0135", "\ntotal_collisions: 3", "\nhill Found 1", "\nskiny Not_Found 3", "\nbaked Found 1", "\n\n", "对于拼写检查（第三部分），输出应如下所示。", "\n\n", "<word1> is CORRECT", "\n<word2> is CORRECT", "\n<word3> is INCORRECT", "\n*** <word3> -> <alternate word> *** case <TYPE: A, B or C>", "\n*** <word3> -> <alternate word> *** case <TYPE: A, B or C>", "\n<word4> is CORRECT", "\n\n", "请确保您的空格，大写字母和换行符正确无误。 请在输出中包括***和->。 这里显示的单词列表是一个 例如，实际输出将取决于文档文件中的单词。 可能有 每个案例类型有一个以上的结果。", "\n\n", "正确输出的示例：（显示的单词不代表实际值 输入）", "\n\n", "country is CORRECT", "\nlikely is CORRECT", "\nclimbing is CORRECT", "\nlwa is INCORRECT", "\n*** lwa -> wa *** case B", "\n*** lwa -> la *** case B", "\n*** lwa -> law *** case C", "\ncases is CORRECT", "\n\n", " ", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的 count 变量在每次调用 darray() 函数的时候都对原来的数组进行排序删除重复&amp;#xff0c;然后 count-- 改变了原来的值&amp;#xff0c;随着调用次数增加&amp;#xff0c;你这个 count 变量一直在减&amp;#xff0c;逻辑出问题了。&lt;br /&gt;要么你在 darray() 函数开始的地方加上 count &amp;#61; COUNT; 重新赋值&amp;#xff0c;应该就可以了。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["程序有错误，在删除数组那里", ["写这个程序  在删除重复数组的时候 ，当他自己执行模块的时候是正确的，但当把所有都输出的时候，删除数组哪里就有一个数字没有了", "\n", "#include", "<", "stdio.h", ">", "\n#define ", "COUNT", " ", "6", "\nint a[", "COUNT", "], count ", "=", " ", "COUNT", ", k, m, b[", "COUNT", "],t,c[", "COUNT", "];\nvoid oarray(){  ", "//输出原数组", "\n    printf(", "\"原数组:\"", ");\n    ", "for", " (k ", "=", " ", "0", "; k ", "<", " ", "COUNT", "; k", "++", ")\n        printf(", "\"%5d\"", ", b[k]);\n    printf(", "\"", "\\n", "\"", ");\n}\n\nvoid sort(){  ", "//排序算法", "\n    ", "for", "(k", "=", "0", ";k", "<", "COUNT", "-", "1", ";k", "++", ")  ", "//排序数组", "\n            ", "for", "(m", "=", "k", "+", "1", ";m", "<", "COUNT", ";m", "++", ")\n                ", "if", " (c[k] ", ">", " c[m]) {\n                    t ", "=", " c[k];\n                    c[k] ", "=", " c[m];\n                    c[m] ", "=", " t;\n                }\n        ", "for", " (k ", "=", " ", "0", "; k ", "<", " ", "COUNT", "; k", "++", ")\n            a[k] ", "=", " c[k];\n        printf(", "\"排序后数组为:\"", ");\n        ", "for", " (k ", "=", " ", "0", "; k ", "<", " ", "COUNT", "; k", "++", ")\n        printf(", "\"%5d\"", ", c[k]);\n    printf(", "\"", "\\n", "\"", ");\n}\n\nvoid darray(){  ", "//删除重复数组", "\n\n        ", "for", "(k", "=", "0", ";k", "<", "COUNT", "-", "1", ";k", "++", ")  ", "//排序数组", "\n            ", "for", "(m", "=", "k", "+", "1", ";m", "<", "COUNT", ";m", "++", ")\n                ", "if", " (c[k] ", ">", " c[m]) {\n                    t ", "=", " c[k];\n                    c[k] ", "=", " c[m];\n                    c[m] ", "=", " t;\n                }\n        ", "for", " (k ", "=", " ", "0", "; k ", "<", " ", "COUNT", "; k", "++", ")\n            a[k] ", "=", " c[k];\n    \n    ", "for", " (k ", "=", " ", "COUNT", " ", "-", " ", "1", "; k ", ">", " ", "0", "; k", "--", ") ", "//删除重复数组", "\n        ", "if", " (a[k] ", "==", " a[k ", "-", " ", "1", "]) {\n            ", "for", " (m ", "=", " k ", "-", " ", "1", "; m ", "<", " ", "COUNT", " ", "-", " ", "1", "; m", "++", ")\n                a[m] ", "=", " a[m ", "+", " ", "1", "];\n            count", "--", ";\n        }\n            printf(", "\"删除重复后的数组:\"", ");\n    ", "for", " (k ", "=", " ", "0", "; k ", "<", " count; k", "++", ")\n        printf(", "\"%5d\"", ", a[k]);\n    printf(", "\"", "\\n", "\"", ");\n\n\n}\n \nvoid choose(){  ", "//选项", "\n    printf(", "\"选择选项:", "\\n", "\\n", "\"", ");\n    printf(", "\"1.输出原数组", "\\n", "\\n", "\"", ");\n    printf(", "\"2.输出排序后数组", "\\n", "\\n", "\"", ");\n    printf(", "\"3.输出删除重复后的数组", "\\n", "\\n", "\"", ");\n    printf(", "\"4.输出所有", "\\n", "\\n", "\"", ");\n    printf(", "\"5.退出", "\\n", "\\n", "\"", ");\n    printf(", "\"请输入数据1,2,3,4,5", "\\n", "\\n", "\"", ");\n    int x;\n    printf(", "\"", "\\n", "\\n", "\"", ");\n    ", "do", "{\n  \n        scanf(", "\"%d\"", ",", "&", "x);\n        ", "switch", "(x){\n        ", "case", " ", "1", ": oarray(); printf(", "\"退出按5", "\\n", "\\n", "\"", ");    ", "break", ";  \n        ", "case", " ", "2", ": sort(); printf(", "\"退出按5", "\\n", "\\n", "\"", ");    ", "break", "; \n        ", "case", " ", "3", ": darray(); printf(", "\"退出按5", "\\n", "\\n", "\"", ");    ", "break", "; \n        ", "case", " ", "4", ": oarray();sort();darray();     printf(", "\"退出按5", "\\n", "\\n", "\"", ");    ", "break", "; \n        ", "case", " ", "5", ": ", "break", ";\n        ", "default", ":", "break", ";\n        }\n    }", "while", "(x", "!=", "5", ");\n}\n\n\nvoid main(){\n    \n\n    printf(", "\"Input %d data in order:", "\\n", "\"", ", ", "COUNT", ");\n", "for", " (k ", "=", " ", "0", "; k ", "<", " ", "COUNT", "; k", "++", ") {  \n        printf(", "\"a[%d]=\"", ", k);\n        scanf(", "\"%d\"", ", ", "&", "a[k]);\n        b[k] ", "=", " a[k], c[k] ", "=", " a[k];\n    }\n    \n    oarray();\n    choose();\n\n\n    ", "//system(\"pause\");", "\n\n\n}\n\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考&lt;a href=\"https://blog.csdn.net/libaoshan55/article/details/76652228\" id=\"textarea_1660405672534_1660405703727_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/libaoshan55/article/details/76652228&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["Python用栈模拟递归解决找零钱问题", ["问题遇到的现象和发生背景", "\n", "我想要写一些代码，用栈模拟递归解决找零钱问题", "然后我想了很久的代码，可总是会有问题，数字小没有问题，可一旦数字大起来，不但不好Debug，而且答案也不对", "我下面的代码该怎么修改才能正确，或者写怎样的代码能解决这道问题(Python或者伪代码， 所写代码为Python)", "原题目是一个客户来到商店，买了37元的东西，他给了服务员100元，服务员现在手头有1元, 3元， 5元,10元，21元和25元的纸币，请问服务员最少要给客户几张纸币(元不能重复输入，并不是我不想每个后面都加上元)", "\n", "问题相关代码，请勿粘贴截图", "\n", "from DoStack import Stack\n\n\ndef recDC(coinValueList, change, knownResults):\n    ", "\"\"", "\"\n\n    :param coinValueList: list -> hava denominations of money\n    :param change: int -> amount of money to change\n    :param knownResults: list -> number of steps per known solution\n    :return: int -> optimal solution\n    \"", "\"\"", "\n    stack = Stack()\n    stack.push(", "[", "[coinValueList, change, knownResults]", ", ", "[]", "]", ")\n    # stack", "[0]", " ", "is", " list ", "of", " parameter stack", "[0]", "[0]", " ", "is", " coins stack", "[0]", "[1]", " ", "is", " amount stack", "[0]", "[2]", " ", "is", " list ", "of", " money\n    # stack", "[1]", " ", "is", " list ", "of", " return value\n    ", "\"\"", "\"\n    minCoins = change\n    if change in coinValueList:  # 递归结束基本条件\n        knownResults", "[change]", " = 1  # 记录最优解\n        return 1\n    elif knownResults", "[change]", " > 0:\n        return knownResults", "[change]", "  # 查表成功,直接使用最优解\n    else:\n        for i in ", "[c for c in coinValueList if c <= change]", ":\n            numCoins = 1 + recDC(coinValueList, change - i, knownResults)\n            if numCoins < minCoins:\n                minCoins = numCoins\n                # 找到最优解,记录到表中\n                knownResults", "[change]", " = minCoins\n    return minCoins\n    \"", "\"\"", "\n    while not stack.isEmpty():\n        f = stack.pop()\n        flag = False\n        minCoins = f", "[0]", "[1]", "\n        if f", "[0]", "[1]", " in f", "[0]", "[0]", ":\n            f", "[0]", "[2]", "[f", "[0]", "[1]", "]", " = 1\n            if stack.isEmpty():\n                return 1\n            minCoins = 1\n        elif f", "[0]", "[2]", "[f", "[0]", "[1]", "]", " > 0:\n            if stack.isEmpty():\n                return f", "[0]", "[2]", "[f", "[0]", "[1]", "]", "\n            minCoins = f", "[0]", "[2]", "[f", "[0]", "[1]", "]", "\n        else:\n            l = ", "[]", "\n            for c in f", "[0]", "[0]", ":\n                if c <= f", "[0]", "[1]", ":\n                    l.append(c)\n            for i in l:\n                if len(f", "[1]", ") < l.index(i) + 1:\n                    stack.push(f)\n                    stack.push(", "[", "[f", "[0]", "[0]", ", f", "[0]", "[1]", " - i, f", "[0]", "[2]", "]", ", ", "[]", "]", ")\n                    flag = True\n                    break\n                else:\n                    if f", "[1]", "[l.index(i)]", " + 1 < minCoins:\n                        minCoins = f", "[1]", "[l.index(i)]", " + 1\n                        f", "[0]", "[2]", "[f", "[0]", "[1]", "]", " = minCoins\n        if flag:\n            continue\n        elif flag:\n            continue\n        else:\n            f = stack.pop()\n            stack.push(", "[", "[f", "[0]", "[0]", ", f", "[0]", "[1]", ", f", "[0]", "[2]", "]", ", ", "[minCoins]", "]", ")\n\n\nprint(recDC(", "[1, 3, 5, 10, 21, 25]", ", 63, ", "[0]", " * (63 + 1)))\n\n", "\n", "Stack代码", "\n", "class", " ", "Stack", "(", "object", "):\n    ", "def", " ", "__init__", "(", "self", "):\n        self.Stack = ", "list", "()\n\n    ", "def", " ", "push", "(", "self, item", "):\n        self.Stack.append(item)\n\n    ", "def", " ", "peek", "(", "self", "):\n        ", "return", " self.Stack[-", "1", "]\n\n    ", "def", " ", "pop", "(", "self", "):\n        _", "return", " = self.Stack[-", "1", "]\n        self.Stack.pop()\n        ", "return", " _", "return", "\n\n    ", "def", " ", "isEmpty", "(", "self", "):\n        ", "if", " ", "len", "(self.Stack) != ", "0", ":\n            ", "return", " ", "False", "\n        ", "return", " ", "True", "\n\n    ", "def", " ", "size", "(", "self", "):\n        ", "return", " ", "len", "(self.Stack)\n\n    ", "def", " ", "number", "(", "self", "):\n        ", "return", " self.Stack\n\n\n", "\n", "运行结果及报错内容", "\n", "理想的结果应该是3， 可运行出的答案却是39，", "\n", "我的解答思路和尝试过的方法", "\n", "我开始是想将问题分解成一个个子问题压入栈，可是代码实现起来却难如登天，最后我选择用二叉树的画法的思路(先将一条进行到底，然后一步步往回退)，但还是没有达到效果，Debug了半天也没找到问题所在，括号多出天际， 看起来贼费劲，最后搞不下去了，还有没有其他的办法可以解决这个问题啊", "\n", "我想要达到的结果", "\n", "运行出来答案是3，而不是39"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;pop(T &amp;amp;x)&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["想用栈实现进制转换，但不知道那里错了", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\nh\n#ifndef STACK_H\n#define STACK_H\ntemplate <class T>\nclass Stack\n{\nprivate:\n    T* element;\n    int maxSize;\n    int top;\npublic:\n    Stack(int w);  \n    bool isempty();     \n    bool isfull();\n    bool push(const T& x);\n    bool pop(T x);\n    ~Stack(){delete[] element;}\n};\n\ntemplate<class T>\nStack<T>::Stack(int w)\n{\n    top = -1;\n    maxSize = w;\n    element = new T(w);\n}\n\ntemplate <class T>\nbool Stack<T>::isempty()\n{\n    return top == -1;\n}\n\ntemplate <class T>\nbool Stack<T>::isfull()\n{\n    return top+1 == maxSize;\n}\n\ntemplate <class T>\nbool Stack<T>::push(const T& x)\n{\n    if(isfull())\n        return false;\n\n    else\n    {\n        element[top + 1] = x;\n        top++;\n        return true;\n    }\n}\n\ntemplate <class T>\nbool Stack<T>::pop(T x)\n{\n    if(isempty())\n        return false;\n    else\n    {\n        x = element[top];\n        top--;\n        return true;\n    }\n}\n#endif\n", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\\\", "\\.cpp\n#include <iostream>\n#include \"stack.h\"\n\nusing namespace std;\n\nvoid conversion(int n,int base);\n\nint main()\n{\n    int n,base;\n    cout << \"请输入想转换的数字和进制：\" << endl;\n    cin >> n >> base;\n    conversion(n,base);\n    cout << endl;\n    return 0;\n}\nvoid conversion(int n,int base)\n{\n    Stack<int> s(100);\n    int y;\n    y = n;\n    int x;\n    while(y)\n    {\n        s.push(y%base);\n        y = y / base;\n    }\n\n    while(!s.isempty())\n    {\n\n        s.pop(x);\n        cout << x;\n    }\n}\n", "\n", "运行结果及报错内容", "\n", "请输入想转换的数字和进制：", "100 2", "32766327663276632766327663276632766", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这可能是由于文件内容不是有效的字符串&amp;#xff0c;stoi函数无法将其转换为可用的整数而导致的。为了避免出现这种情况&amp;#xff0c;应该使用有效的字符串来读取文件内容&amp;#xff0c;以确保stoi函数可以正常工作。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["为什么用stoi后显示abort已被调用错误", ["用string读文件内容时，为了把读取到的string类型内容转换为整型数字，我用了stoi，但是在运行时却显示abort已被调用，这是为什么呢？", "代码：", "\n", "//利用Fleury算法求欧拉回路", "\n#", "include", "<iostream>\n#", "include", "<", "string", ">\n#", "include", "<fstream>\n#", "include", "<sstream>\nusing namespace std;\n#define INFINITY INT_MAX ", "// 定义最大值", "\n#define MAX_V ", "30", " ", "// 最大顶点数目", "\n", "int", " i, j, k;\n\ntypedef ", "struct", "\n{\n    ", "string", " code; ", "// 顶点编号", "\n}VertexType; ", "// 顶点类型定义", "\ntypedef ", "struct", "\n{\n    ", "int", " arcs", "[MAX", "_V", " + ", "1", "]", "[MAX", "_V", " + ", "1", "]", "; ", "// 邻接矩阵", "\n    ", "int", " vexnum, arcnum; ", "// 图包含的顶点数与边的个数", "\n    VertexType vexs", "[MAX", "_V", " + ", "1", "]", "; ", "// 存放顶点信息", "\n} MGraph;\n", "struct", "\n{\n    ", "int", " vexcode;\n    ", "int", " lowcost;\n    ", "bool", " tag;\n} closest", "[MAX", "_V", " + ", "1", "]", "; ", "// 定义辅助数组 closest 的结构", "\n\n", "//利用邻接矩阵打印无向图", "\nvoid ", "PrintGraph(MGraph G)", "\n{\n    cout << ", "\"----------矩阵输出----------\"", " << endl;\n    ", "for", " (i = ", "1", "; i <= ", "G", ".", "vexnum; i++)\n        cout << ", "\"\\t\"", " << ", "G", ".", "vexs", "[", "i", "]", ".code;\n    cout << endl;\n    ", "for", " (i = ", "1", "; i <= ", "G", ".", "vexnum; i++) {\n        cout << ", "G", ".", "vexs", "[", "i", "]", ".code << ", "\"\\t\"", ";\n        ", "for", " (j = ", "1", "; j <= ", "G", ".", "vexnum; j++) {\n            ", "if", " (", "G", ".", "arcs", "[", "i", "]", "[", "j", "]", " == ", "INFINITY)\n                cout << ", "\"∞\"", " << ", "\"\\t\"", ";\n            ", "else", " cout << ", "G", ".", "arcs", "[", "i", "]", "[", "j", "]", " << ", "\"\\t\"", ";\n        }\n        cout << endl;\n    }\n}\n\n", "//创建图", "\nvoid ", "CreateGraph(MGraph& G)", "\n{\n    ifstream ifs;\n    ifs.", "open", "(", "\"D:\\\\欧拉回路.txt\"", ", ios::", "in", ");\n    ", "if", " (!ifs.is", "_open()", ") {\n        cout << ", "\"读取文件失败!\"", " << endl;\n        exit", "(-1)", ";\n    }\n\n    ", "string", " tmp;\n    ", "int", " count = ", "0", ";\n    ", "while", " (getline(ifs, tmp, ", "'\\n'", ")) {\n        ", "//读取顶点数、边数、顶点编号", "\n        ", "if", " (count", " == ", "0", ")\n            ", "G", ".", "vexnum = stoi(tmp);\n        ", "else", " ", "if", " (count", " == ", "1", ") {\n            ", "G", ".", "arcnum = stoi(tmp);\n            ", "for", " (i = ", "1", "; i <= ", "G", ".", "vexnum; i++)\n                ", "for", " (j = ", "1", "; j <= ", "G", ".", "vexnum; j++)\n                    ", "G", ".", "arcs", "[", "i", "]", "[", "j", "]", " = INFINITY; ", "// 邻接矩阵初始化，所有元素初始值为 ∞", "\n        }\n        ", "else", " ", "if", " (count", " == ", "2", ") {\n            istringstream ", "string", "_to_string(", "tmp", ")", ";\n            ", "for", " (i = ", "1", "; i <= ", "G", ".", "vexnum; i++) {\n                ", "string", " str_tmp;\n                string_to_string >> str_tmp;\n                ", "G", ".", "vexs", "[", "i", "]", ".code = str_tmp;\n            }\n        }\n        ", "//读取带权边", "\n        ", "else", " {\n            istringstream ", "string", "_to_num(", "tmp", ")", ";\n            ", "int", " arr_tmp", "[", "2", "]", ";\n            ", "for", " (", "int", " i = ", "0", "; i < ", "2", "; i++) {\n                ", "string", " str_tmp;\n                string_to_num >> str_tmp;\n                arr_tmp", "[", "i", "]", " = stoi(str_tmp);\n            }\n            ", "G", ".", "arcs", "[", "arr_tmp", "[", "0", "]", "]", "[", "arr_tmp", "[", "1", "]", "] = ", "1", ";\n            ", "G", ".", "arcs", "[", "arr_tmp", "[", "1", "]", "]", "[", "arr_tmp", "[", "0", "]", "] = ", "1", ";\n        }\n        count++;\n    }\n    ", "PrintGraph(G)", ";\n\n    ifs.close", "()", ";\n}\n\n\n\n", "int", " main", "()", "\n{\n    MGraph G;\n    ", "CreateGraph(G)", ";\n    return ", "0", ";\n}\n\n", "\n", "错误：", "\n", "\n", "\n", "恳请解惑！万分感激！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;“给定一个小点的输入&amp;#xff0c;完整单步跟踪(同时按Alt&amp;#43;7键查看Call Stack里面从上到下列出的对应从里层到外层的函数调用历史)一遍。”是理解递归函数工作原理的不二法门&amp;#xff01;&lt;br /&gt;递归函数关注以下几个因素&lt;br /&gt;·退出条件&lt;br /&gt;·参数有哪些&lt;br /&gt;·返回值是什么&lt;br /&gt;·局部变量有哪些&lt;br /&gt;·全局变量有哪些&lt;br /&gt;·何时输出&lt;br /&gt;·会不会导致堆栈溢出&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["城堡问题 dfs 函数return以后不继续递归", ["问题遇到的现象和发生背景", "\n", "做了一道 dfs的经典城堡问题 ", "\n", " 1 ", " ", " 2 ", " ", " 3 ", " ", " 4 ", " ", " 5 ", " ", " 6 ", " ", " 7 ", " \n", "\n", "   #############################", " 1 #   |   #   |   #   |   |   #", "   #####---#####---#---#####---#", " 2 #   #   |   #   #   #   #   #", "   #---#####---#####---#####---#", " 3 #   |   |   #   #   #   #   #", "   #---#########---#####---#---#", " 4 #   #   |   |   |   |   #   #", "   #############################", "           (图 1)", "\n", "= Wall", "\n", "   |  = No wall", "\n", " = No wall", "\n", "图1是一个城堡的地形图。请你编写一个程序，计算城堡一共有多少房间，最大的房间有多大。城堡被分割成mn(m≤50，n≤50)个方块，每个方块可以有0~4面墙。", "输入", "程序从标准输入设备读入数据。第一行是两个整数，分别是南北向、东西向的方块数。在接下来的输入行里，每个方块用一个数字(0≤p≤50)描述。用一个数字表示方块周围的墙，1表示西墙，2表示北墙，4表示东墙，8表示南墙。每个方块用代表其周围墙的数字之和表示。城堡的内墙被计算两次，方块(1,1)的南墙同时也是方块(2,1)的北墙。输入的数据保证城堡至少有两个房间。", "输出", "城堡的房间数、城堡中最大房间所包括的方块数。结果显示在标准输出设备上。", "样例输入", "4", "7", "11 6 11 6 3 10 6", "7 9 6 13 5 15 5", "1 10 12 7 13 7 5", "13 11 10 8 10 12 13", "样例输出", "5", "9", "\n", "问题相关代码，请勿粘贴截图", "\n", "#", "include", "<iostream>\n#", "include", "<cstring>\nusing namespace std;\n", "int", " N,R;\n", "int", " roomNum=", "0", ",roomArea=", "0", ";\n", "int", " maxroomArea=", "0", ";\n", "int", " color", "[", "60", "]", "[", "60", "]", ";\n", "int", " room", "[", "60", "]", "[", "60", "]", ";\nvoid ", "Dfs(", "int", " ", "i", ",", "int", " ", "k", ")", "{\n    ", "if", "(color", "[", "i", "]", "[", "k", "]", ")\n        return;\n    \n    ++roomArea;\n    color", "[", "i", "]", "[", "k", "]", "=roomNum;\n    ", "if", "((room", "[", "i", "]", "[", "k", "]", "&", "8", ")==", "0", ")return ", "Dfs(", "i", "+1,", "k", ")", ";\n     ", "if", "((room", "[", "i", "]", "[", "k", "]", "&", "1", ")==", "0", ")return ", "Dfs(", "i", ",", "k", "-1)", ";\n     ", "if", "((room", "[", "i", "]", "[", "k", "]", "&", "2", ")==", "0", ")return ", "Dfs(", "i", "-1,", "k", ")", ";\n     ", "if", "((room", "[", "i", "]", "[", "k", "]", "&", "4", ")==", "0", ")return ", "Dfs(", "i", ",", "k", "+1)", ";\n    \n\n}\n", "int", " main", "()", "{\n    cin>>N>>R;\n    memset(color,", "0", ",sizeof(color));\n\n    ", "for", "(", "int", " i=", "1", ";i<=N;i++){\n        ", "for", "(", "int", " j=", "1", ";j<=R;j++){\n            cin>>room", "[", "i", "]", "[", "j", "]", ";\n        }\n    }\n    \n    ", "for", "(", "int", " i=", "1", ";i<=N;i++){\n        ", "for", "(", "int", " j=", "1", ";j<=R;j++){\n            ", "if", "(!color", "[", "i", "]", "[", "j", "]", "){\n                ++roomNum;\n                roomArea=", "0", ";\n                ", "Dfs(", "i", ",", "j", ")", ";\n                ", "for", "(", "int", " i=", "1", ";i<=N;i++){\n                    ", "for", "(", "int", " j=", "1", ";j<=R;j++){\n                        cout<<color", "[", "i", "]", "[", "j", "]", "<<", "' '", ";\n                    }\n                    cout<<endl;\n                }\n                maxroomArea=max(roomArea,maxroomArea);\n            }\n        }\n    }\n    cout<<roomNum<<endl;\n    cout<<maxroomArea;\n    return ", "0", ";\n} \n\n", "\n", "运行结果及报错内容", "\n", "我每次结束调用Dfs都打印了一下color", "发现这个函数每次 遇到return以后 就不继续递归了", "答案也不正确", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, n, zimu &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, shuzi &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, fuhao &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; s[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-built_in\"&gt;getchar&lt;/span&gt;();\n    &lt;span class=\"hljs-built_in\"&gt;gets&lt;/span&gt;(s);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (s[i] &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; s[i] &amp;lt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;)\n            zimu &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (s[i] &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; s[i] &amp;lt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;)\n            shuzi &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            fuhao &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    sum &amp;#61; zimu &amp;#43; shuzi &amp;#43; fuhao;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;1&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;2&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;3&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于密码强度的题，涉及字符串和ASCII码，本人想知道代码那个地方没有注意到", ["这是一道要求用户输入密码，长度为n，判定密码强度等级的题，数字越高代表强度越高。已知密码可以由数字，字母和字符组成，每使用一个强度等级提升一。我的问题是这串代码可以编译运行，但是强度等级却输出不正确。", "\n", "#", "include", " ", "<stdio.h>", "\n", "char", " s[", "100", "];\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " i, n,zimu, shuzi, fuhao, sum=", "0", ";\n    ", "scanf", "(", "\"%d\"", ", &n);\n    ", "getchar", "();\n    ", "gets", "(s);\n    ", "for", " (i = ", "0", "; i < n; i++)\n    {\n        ", "if", " (s[i] >= ", "'a'", " && s[i] <= ", "'z'", ")\n            zimu = ", "1", ";\n        ", "if", " (s[i] >= ", "'0'", " && s[i] <= ", "'9'", ")\n            shuzi = ", "1", ";\n        ", "else", "\n            fuhao = ", "1", ";\n    }\n    sum = zimu + shuzi + fuhao;\n    ", "if", " (sum == ", "1", ")\n        ", "printf", "(", "\"1\"", ");\n    ", "if", " (sum == ", "2", ")\n        ", "printf", "(", "\"2\"", ");\n    ", "if", " (sum==", "3", ")\n        ", "printf", "(", "\"3\"", ");\n    ", "return", " ", "0", ";\n}\n![img](https:", "//img-mid.csdnimg.cn/release/static/image/mid/ask/205112253666165.jpg \"#left\")", "\n比如这里的应该输出", "1", "，但他输出", "2", "\n\n", "\n", "比如这里的应该输出2，但他输出3", "\n", "但最后这个却能正确输出3"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;就是所有的连通的点&amp;#xff0c;以及被周围的0包裹&amp;#xff0c;形成一个岛屿&amp;#xff0c;这个就是一个分块。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["蓝桥杯模拟赛 最大连通 DFS", ["求分析一下题目意思，不需要告诉我怎么做，", "只需要举个例子告诉我这个连通分块是什么就行，", "感谢感谢！", "\n", "\n", "问题描述", "小蓝有一个 30 行 60 列的数字矩阵，矩阵中的每个数都是 0 或 1 。", "\n", "\n", "\n", "110010000011111110101001001001101010111011011011101001111110", "\n\n", "010000000001010001101100000010010110001111100010101100011110 ", "\n\n", "001011101000100011111111111010000010010101010111001000010100 ", "\n\n", "101100001101011101101011011001000110111111010000000110110000 ", "\n\n", "010101100100010000111000100111100110001110111101010011001011 ", "\n\n", "010011011010011110111101111001001001010111110001101000100011 ", "\n\n", "101001011000110100001101011000000110110110100100110111101011 ", "\n\n", "101111000000101000111001100010110000100110001001000101011001 ", "\n\n", "001110111010001011110000001111100001010101001110011010101110 ", "\n\n", "001010101000110001011111001010111111100110000011011111101010 ", "\n\n", "011111100011001110100101001011110011000101011000100111001011 ", "\n\n", "011010001101011110011011111010111110010100101000110111010110 ", "\n\n", "001110000111100100101110001011101010001100010111110111011011 ", "\n\n", "111100001000001100010110101100111001001111100100110000001101 ", "\n\n", "001110010000000111011110000011000010101000111000000110101101 ", "\n\n", "100100011101011111001101001010011111110010111101000010000111 ", "\n\n", "110010100110101100001101111101010011000110101100000110001010 ", "\n\n", "110101101100001110000100010001001010100010110100100001000011 ", "\n\n", "100100000100001101010101001101000101101000000101111110001010 ", "\n\n", "101101011010101000111110110000110100000010011111111100110010 ", "\n\n", "101111000100000100011000010001011111001010010001010110001010 ", "\n\n", "001010001110101010000100010011101001010101101101010111100101 ", "\n\n", "001111110000101100010111111100000100101010000001011101100001 ", "\n\n", "101011110010000010010110000100001010011111100011011000110010 ", "\n\n", "011110010100011101100101111101000001011100001011010001110011 ", "\n\n", "000101000101000010010010110111000010101111001101100110011100 ", "\n\n", "100011100110011111000110011001111100001110110111001001000111 ", "\n\n", "111011000110001000110111011001011110010010010110101000011111 ", "\n\n", "011110011110110110011011001011010000100100101010110000010011 ", "\n\n", "010011110011100101010101111010001001001111101111101110011101", "\n\n", "\n", "\n", "如果从一个标为 1 的位置可以通过上下左右走到另一个标为 1 的位置，则称两个位置连通。与某一个标为 1 的位置连通的所有位置（包括自己）组成一个连通分块。", "\n", "\n", "\n", "请问矩阵中最大的连通分块有多大？", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; N &amp;#61; &lt;span class=\"hljs-number\"&gt;260&lt;/span&gt;;\nstring s;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    cin &amp;gt;&amp;gt; s;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; res &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, num &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, n &amp;#61; s.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ; i &amp;lt; n; i &amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; i;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(j &amp;lt; n &amp;amp;&amp;amp; s[j] &amp;lt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; s[j] &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) j &amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; i; k &amp;lt; j; k &amp;#43;&amp;#43;)\n            t &amp;#61; t * &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; s[k] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t &amp;gt; num) num &amp;#61; t, res &amp;#61; i;\n        i &amp;#61; j;\n    }\n    \n    cout &amp;lt;&amp;lt; res &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/556622443576196.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["隐藏的最大整数WA 45分", ["题目描述", "今天是个好日子，整数小伙伴们又一起出来聚会了。大家商议决定：今天玩捉迷藏！ 玩法很简单，就是把藏在一个长长的字符串中（任何两个人都不会并排藏在一起）数字伙伴找出来。而且，因为伙伴们太多，只找到此次藏起来的最大的那个伙伴就可以了。并且，大家一致同意，让“1”做第一个找人的人——当然，事先，他并不知道到底有哪些伙伴藏起来了……", "\n", "游戏开始了。“1”是一个很聪明的人，很快，他就把最大的那个伙伴找出来了……", "\n", "如果你是“1”，你能写个程序来解决这件事情么？", "\n", "输入格式", "只有一个字符串，这里面藏有很多的整数小伙伴。字符串最多包含255个字符", "\n", "输出格式", "只有一个整数，表示藏在其中的最大的那个整数小伙伴的位置（整数第一个数字在原串中的位置）。", "\n", "样例输入", "\n", "*((*-a32AB342+", "//", "32143", "abAA\n", "\n", "样例输出", "\n", "17\n", "\n", "我的WA代码：", "\n", "#include<bits/stdc++.h>", "\n", "using", " ", "namespace", " std;\n\n", "int", " main()\n{\n    string s;\n    cin >> s;\n    ", "long", " ", "long", " n = s.size(), ", "index", " = ", "0", ", max = ", "-2147483647", ", ", "sum", " = ", "0", ", wz[", "100005", "] = {", "0", "}, num[", "100005", "];\n    memset(num, ", "-2147483647", ", sizeof(num));\n    bool flag = ", "false", ";\n    ", "for", "(", "int", " i = ", "0", "; i < n; i++)\n    {\n        ", "if", "(s[i] >= ", "'0'", " && s[i] <= ", "'9'", ")\n        {\n            ", "if", "(!flag) flag = ", "true", ", ", "sum", " += s[i] - ", "'0'", ", wz[", "index", "] = i + ", "1", ";\n            ", "else", " ", "sum", " *= ", "10", ", ", "sum", " += s[i] - ", "'0'", ";\n        }\n        ", "else", "\n        {\n            ", "if", "(", "sum", " != ", "0", ") num[", "index", "++] = ", "sum", ";\n            ", "sum", " = ", "0", ", flag = ", "false", ";\n        }\n    }\n    ", "long", " ", "long", " k = ", "0", ";\n    ", "for", "(", "int", " i = ", "0", "; i < ", "index", "; i++)\n        ", "if", "(num[i] > max) max = num[i], k = wz[i];\n    printf(", "\"%lld\"", ", k);\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;scanf(&amp;#34;%s&amp;#34;,&amp;amp;b[i]);读取字符串不用加&amp;amp;&lt;br /&gt;hile (k &amp;#61;&amp;#61; n - 1 &amp;amp;&amp;amp; x[i] &amp;#61;&amp;#61; 0)&lt;br /&gt;这个 while应该改成if&lt;br /&gt;应该是k &amp;#61;&amp;#61; n &lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;           if (&lt;span class=\"hljs-name\"&gt;k&lt;/span&gt; &amp;#61;&amp;#61; n &lt;span class=\"hljs-symbol\"&gt;&amp;amp;&amp;amp;&lt;/span&gt; x[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你题目的解答代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;\nint main()\n{\n    char a[&lt;span class=\"hljs-number\"&gt;101&lt;/span&gt;], b[&lt;span class=\"hljs-number\"&gt;101&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;101&lt;/span&gt;];\n    int &lt;span class=\"hljs-attr\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;j&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;k&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, x[&lt;span class=\"hljs-number\"&gt;101&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    int &lt;span class=\"hljs-attr\"&gt;flag&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;m&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;n&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    gets(a);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n%d&amp;#34;&lt;/span&gt;, &amp;amp;flag, &amp;amp;m);\n    for (&lt;span class=\"hljs-attr\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, b[i]);\n    &lt;span class=\"hljs-attr\"&gt;n&lt;/span&gt; &amp;#61; strlen(a);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-attr\"&gt;flag&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        for (&lt;span class=\"hljs-attr\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-attr\"&gt;k&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            int &lt;span class=\"hljs-attr\"&gt;t&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            for (&lt;span class=\"hljs-attr\"&gt;j&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; b[i][j] !&amp;#61; &amp;#39;\\&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#39;; j&amp;#43;&amp;#43;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[k] &amp;#61;&amp;#61; b[i][j])\n                {\n                    k&amp;#43;&amp;#43;;\n                }\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                {\n                    &lt;span class=\"hljs-attr\"&gt;j&lt;/span&gt; &amp;#61; t;\n                    t&amp;#43;&amp;#43;;\n                    &lt;span class=\"hljs-attr\"&gt;k&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                }\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-attr\"&gt;k&lt;/span&gt; &amp;#61;&amp;#61; n &amp;amp;&amp;amp; x[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)//  while应该改成&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;,应该是&lt;span class=\"hljs-attr\"&gt;k&lt;/span&gt; &amp;#61;&amp;#61; n\n                {\n                    puts(b[i]);\n                    x[i] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                    break;\n                }\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        for (&lt;span class=\"hljs-attr\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-attr\"&gt;k&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            int &lt;span class=\"hljs-attr\"&gt;t&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            for (&lt;span class=\"hljs-attr\"&gt;j&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; b[i][j] !&amp;#61; &amp;#39;\\&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#39;; j&amp;#43;&amp;#43;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[k] &amp;#61;&amp;#61; b[i][j] || a[k] &amp;#61;&amp;#61; b[i][j] &amp;#43; &lt;span class=\"hljs-number\"&gt;32&lt;/span&gt; || a[k] &amp;#61;&amp;#61; b[i][j] - &lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;)\n                {\n                    k&amp;#43;&amp;#43;;\n                }\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                {\n                    &lt;span class=\"hljs-attr\"&gt;j&lt;/span&gt; &amp;#61; t;\n                    t&amp;#43;&amp;#43;;\n                    &lt;span class=\"hljs-attr\"&gt;k&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                }\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-attr\"&gt;k&lt;/span&gt; &amp;#61;&amp;#61; n &amp;amp;&amp;amp; x[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)//  while应该改成&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;,应该是&lt;span class=\"hljs-attr\"&gt;k&lt;/span&gt; &amp;#61;&amp;#61; n\n                {\n                    puts(b[i]);\n                    x[i] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                    break;\n                }\n            }\n        }\n    }\n\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "算法与数字", "Question": ["请问xdoj 字符串查找 81题，运行结果正确，提交只有20分是为什么，怎样修改", ["问题", "\n", "标题", "字符串查找", "\n", "类别", "字符串处理", "\n", "时间限制", "2S", "\n", "内存限制", "256Kb", "\n", "问题描述", "给出一个字符串和多行文字，输出在这些文字中出现了指定字符串的行。", "程序还需要支持大小写敏感选项：", "    当选项打开时，表示同一个字母的大写和小写看作不同的字符；", "    当选项关闭时，表示同一个字母的大写和小写看作相同的字符。", "\n", "输入说明", "输入数据第一行包含一个字符串s，由大小写英文字母组成，长度不超过100。", "第二行包含一个数字，表示大小写敏感选项。当数字为0时表示大小写不敏感，当数字为1时表示大小写敏感。", "第三行包含一个整数n，表示给出的文字行数。", "接下来n行，每行包含一个字符串，字符串由大小写英文字母组成，不含空格和其他字符。每个字符串长度不超过100。", "\n", "输出说明", "输出多行，每行包含一个字符串，按出现的顺序依次给出那些包含了字符串s的行。", "\n", "输入样例", "Hello", "1", "5", "HelloWorld", "HiHiHelloHiHi", "GrepIsAGreatTool", "HELLO", "HELLOisNOTHello", "\n", "输出样例", "HelloWorld", "HiHiHelloHiHi", "HELLOisNOTHello", "\n", "问题相关代码", "\n", "我的代码", "\n", "#include<stdio.h>", "\n", "#include<string.h>", "\nint main(){\n    char a[101],b[101][101];\n    int ", "i", "=0,j=0,k=0,x[101]={0};\n    int ", "flag", "=0,m=0,n=0;\n    gets(a);\n    scanf(", "\"%d\\n%d\"", ",&flag,&m);\n    ", "for", "(", "i", "=0;i<m;i++)\n    scanf(", "\"%s\"", ",&b[i]);\n    ", "n", "=strlen(a);\n\n    ", "if", "(", "flag", "==1)\n        ", "for", "(", "i", "=0;i<m;i++){\n        ", "k", "=0;\n            ", "for", "(", "j", "=0;b[i][j]!=", "'\\0'", ";j++){\n            ", "if", "(a[k]==b[i][j]){\n            k++;    \n            }\n            ", "else", "\n            ", "k", "=0;    \n            ", "while", "(", "k", "==n-1&&x[i]==0){\n                puts(b[i]);\n                x[i]=1;\n                break;\n            }    \n            }\n        }\n    ", "else", " {\n    ", "for", "(", "i", "=0;i<m;i++){\n    ", "k", "=0;\n            ", "for", "(", "j", "=0;b[i][j]!=", "'\\0'", ";j++){\n            ", "if", "(a[k]==b[i][j]||a[k]==b[i][j]+32||a[k]==b[i][j]-32){\n            k++;    \n            }\n            ", "else", "\n            ", "k", "=0;    \n            ", "while", "(", "k", "==n-1&&x[i]==0){\n                puts(b[i]);\n                x[i]=1;\n                break;\n            }    \n            }\n        }\n    }\n    \n    return 0; \n} \n", "\n", "别的100分代码", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<string.h>", "\n\n", "char", " ", "tran", "(", "char", " a)", "{\n    ", "if", "(a<=", "'z'", "&&a>=", "'a'", ") ", "return", " a", "-32", ";\n    ", "else", " ", "if", "(a<=", "'Z'", "&&a>=", "'A'", ") ", "return", " a+", "32", ";\n}\n\n", "int", " ", "main", "()", "{\n    ", "int", " sen,n,i,j,k,l;\n    ", "char", " s[", "101", "],ch[", "1000", "][", "101", "];\n    ", "scanf", "(", "\"%s%d%d\"", ",s,&sen,&n);\n    ", "for", "(i=", "0", ";i<n;i++) ", "scanf", "(", "\"%s\"", ",ch[i]);\n    ", "if", "(sen==", "1", "){\n        ", "for", "(j=", "0", ";j<n;j++){", "//二重循环，在每一行中搜索s", "\n            ", "for", "(k=", "0", ";k<", "strlen", "(ch[j])-", "strlen", "(s)+", "1", ";k++){", "//防溢出", "\n                l=", "0", ";", "//初始化在这里进行！", "\n                ", "if", "(ch[j][k]==s[", "0", "]){\n                    ", "for", "(;l<", "strlen", "(s);l++){\n                        ", "if", "(ch[j][k+l]!=s[l]) ", "break", ";\n                    }\n                }\n                ", "if", "(l==", "strlen", "(s)){\n                    ", "printf", "(", "\"%s\\n\"", ",ch[j]);\n                    ", "break", ";\n                }\n            }\n        }\n    }    \n    ", "else", " ", "if", "(sen==", "0", "){\n        ", "for", "(j=", "0", ";j<n;j++){\n            ", "for", "(k=", "0", ";k<", "strlen", "(ch[j])-", "strlen", "(s)+", "1", ";k++){\n                l=", "0", ";\n                ", "if", "(ch[j][k]==s[", "0", "]||", "tran", "(ch[j][k])==s[", "0", "]){\n                    ", "for", "(;l<", "strlen", "(s);l++){\n                        ", "if", "(ch[j][k+l]!=s[l]&&", "tran", "(ch[j][k+l])!=s[l]) ", "break", ";\n                    }\n                }\n                ", "if", "(l==", "strlen", "(s)){\n                    ", "printf", "(", "\"%s\\n\"", ",ch[j]);\n                    ", "break", ";\n                }\n            }\n        }\n    }\n    ", "return", " ", "0", ";\n}\n\n\n", "\n", "运行结果", "\n", "输入样例", "Hello", "1", "5", "HelloWorld", "HiHiHelloHiHi", "GrepIsAGreatTool", "HELLO", "HELLOisNOTHello", "\n", "输出样例", "HelloWorld", "HiHiHelloHiHi", "HELLOisNOTHello", "\n", "Hello", "0", "5", "HelloWorld", "HiHiHelloHiHi", "GrepIsAGreatTool", "HELLO", "HELLOisNOTHello", "\n", "HelloWorld", "HiHiHelloHiHi", "HELLO", "HELLOisNOTHello"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你要注意一个问题&amp;#xff0c;当第一个元素是最小元素的话&amp;#xff0c;你的交换是有问题的&lt;br /&gt;你的代码是将第一个元素和最大元素交换&amp;#xff0c;如果第一个元素就是最小元素&amp;#xff0c;那么最大元素交换后&amp;#xff0c;最小元素不再是第一个元素&amp;#xff0c;而是原先的最大元素位置。所以你交换最小元素时&amp;#xff0c;还是和第一个元素交换就错了。要对这个情况进行特殊判断&amp;#xff0c;如果第一个元素就是最大元素&amp;#xff0c;那么需要将n值改为m才行。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["数组元素交换，一道简单的C语言代码题，遇到点困难求解答", ["我的代码过不了第二个测试点，由此我写了两种情况的代码，都过不了，感觉我的代码和同学的差不多，请纠正我的代码错误", "原题如下", "L2 数组元素交换 (5 分)", "数组元素交换，要求：（1）最大的元素与第一个元素交换（2）最小的元素与最后一个元素交换。", "\n", "输入格式:", "输入一行字符串（由不同的整数组成，以空格分开）", "\n", "输出格式:", "首先以数组形式输出初始字符串（一行一个数字），然后以数组形式输出完成交换后的字符串（一行一个数字）。", "\n", "输入样例:", "2 9 0 10", "输出样例:", "2", "9", "0", "10", "10", "9", "2", "0", "我的第一次代码", "\n", "#include<stdio.h>", "\n", "#include<string.h>", "\nlong long a[10005],", "i", "=0,j,m=0,n=0,b;\nint main ()\n{    \n    ", "while", "(~scanf(", "\"%d\"", ",&b))\n    {\n         a[i++] = b;\n        ", "if", " (", "'\\n'", " == getchar())\n         {\n             a[i] = ", "'\\0'", ";\n             break;\n         }\n     }\n    ", "for", "(", "j", "=0;j<i;j++)\n        {\n            printf(", "\"%d\\n\"", ",a[j]);\n        }\n        \n    int ", "max", "=a[0];\n    int ", "min", "=a[0];\n    ", "for", "(", "j", "=0;j<i;j++)\n    {\n        ", "if", "(a[j]>max)\n        {\n            ", "max", "=a[j];\n            ", "m", "=j ;\n        }\n        ", "if", "(a[j]<min)\n        {\n            ", "min", "=a[j];\n            ", "n", "=j;\n        }\n    }\n        int ", "t", "=a[0];\n        a[0]=a[m];\n        a[m]=t;\n        \n        ", "t", "=a[i-1];\n        a[i-1]=a[n];\n        a[n]=t;\n        ", "for", "(", "j", "=0;j<i;j++)\n        {\n            printf(", "\"%d\\n\"", ",a[j]);\n        }\n\n    return 0;\n    \n} \n", "\n", "我的第二次代码", "\n", "#include<stdio.h>", "\n", "#include<string.h>", "\nlong long a[10005],", "i", "=0,j,m=0,n=0,b;\nint main ()\n{    \n    ", "while", "(~scanf(", "\"%d\"", ",&b))\n    {\n         a[i++] = b;\n        ", "if", " (", "'\\n'", " == getchar())\n         {\n             a[i] = ", "'\\0'", ";\n             break;\n         }\n    }\n    ", "for", "(", "j", "=0;j<i;j++)\n        {\n            printf(", "\"%d\\n\"", ",a[j]);\n        }\n        \n    int ", "max", "=a[0];\n    ", "for", "(", "j", "=0;j<i;j++)\n    {\n        ", "if", "(a[j]>max)\n        {\n            ", "max", "=a[j];\n            ", "m", "=j;\n        }\n    }\n    \n\n        int ", "t", "=a[0];\n        a[0]=a[m];\n        a[m]=t;\n        \n        \n    int ", "min", "=a[0];\n    ", "for", "(", "j", "=0;j<i;j++)\n    {\n        \n        ", "if", "(a[j]<min)\n        {\n            ", "min", "=a[j];\n            ", "n", "=j;\n        }\n    }    \n        ", "t", "=a[i-1];\n        a[i-1]=a[n];\n        a[n]=t;\n        ", "for", "(", "j", "=0;j<i;j++)\n        {\n            printf(", "\"%d\\n\"", ",a[j]);\n        }\n\n    return 0;\n    \n} \n", "\n", "附上同学的AC代码", "\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "<string>", "\n", "#", "include", " ", "<cmath>", "\n", "using", " ", "namespace", " std;\n\n\n", "int", " ", "main", "()", "{\n \n ", "int", " n,x=", "0", ",maxx=", "-9999", ",minn=", "9999", ",t,t1;\n ", "int", " a[", "100010", "];\n ", "while", "(cin >> n)\n {\n  a[++x] = n;\n  cout << a[x] << endl;\n  ", "if", "(a[x] > maxx)\n  {\n   maxx = a[x];\n   t = x;\n  }\n  ", "if", "(a[x] < minn)\n  {\n   minn = a[x];\n   t1 = x;\n  }\n }\n ", "int", " w;\n w = a[", "1", "];\n a[", "1", "] = a[t];\n a[t] = w;\n \n w = a[x];\n a[x] = a[t1];\n a[t1] = w;\n  \n ", "for", "(", "int", " i = ", "1", ";i <= x;i++)\n {\n  cout << a[i] <<endl; \n }\n\n    ", "return", " ", "0", ";\n}\n", "\n", "感谢帮助"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第一个代码第8行多了个&amp;#xff1b;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["两段同样的冒泡排序代码产生不同的结果", ["在学习了冒泡法后尝试用冒泡法把数字由小到大排序，但是第一次输出的结果顺序未变，又敲了一遍结果又正确了，很奇怪。", "\n", "产生错误结果的代码：", "\n", "#include<stdio.h>", "\nint main()\n{\n    int a[10];\n    int j,i,m;\n    ", "for", "(", "i", "=0;i<10;i++)\n    scanf(", "\"%d\"", ",&a[i]);\n    ", "for", "(", "j", "=0;j<9;j++);\n        {\n            ", "for", "(", "i", "=0;i<9-j;i++)\n            {\n                ", "if", "(a[i]>a[i+1])\n                {\n                    ", "m", "=a[i];a[i]=a[i+1];a[i+1]=m;\n                }\n            }\n        } \n    ", "for", "(", "i", "=0;i<10;i++)\n    printf(", "\"%-3d\"", ",a[i]);\n    return 0;\n}\n\n", "\n", "产生正确结果的代码：", "\n", "#include<stdio.h>", "\nint main()\n{\n    int a[10];\n    int i,j,t;\n    ", "for", "(", "i", "=0;i<10;i++)\n    scanf(", "\"%d\"", ",&a[i]);\n    ", "for", "(", "j", "=0;j<9;j++)\n    {\n        ", "for", "(", "i", "=0;i<9-j;i++)\n        {\n            ", "if", "(a[i]>a[i+1])\n            {\n                ", "t", "=a[i];a[i]=a[i+1];a[i+1]=t;\n            }\n        }\n    }\n    ", "for", "(", "i", "=0;i<10;i++)\n    printf(", "\"%-3d\"", ",a[i]);\n    return 0;\n}\n\n", "\n", "代码1输出的为原始顺序，代码2输出才是由小到大的正确顺序 ，不知道到底哪里不一样导致了错误。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;修改了你的代码&amp;#xff0c;试试对不对&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint main()\n{\n    int n,a,x,b,i,e,&lt;span class=\"hljs-attribute\"&gt;S&lt;/span&gt;&amp;#61;0,c;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;please input a suitable integer:&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    switch(n){\n        case 3:&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;100,b&amp;#61;999;break;\n        case 4:&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;1000,b&amp;#61;9999;break;\n        case 5:&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;10000,b&amp;#61;99999;break;\n        case 6:&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;100000,b&amp;#61;999999;break;\n        case 7:&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;1000000,b&amp;#61;9999999;break;\n        default:printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;error\\n&amp;#34;&lt;/span&gt;);break;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;x&lt;/span&gt;&amp;#61;a;x&amp;lt;&amp;#61;b;x&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;1;i&amp;lt;n;i&amp;#43;&amp;#43;)\n        { &lt;span class=\"hljs-attribute\"&gt;e&lt;/span&gt;&amp;#61;x/10%10;\n            &lt;span class=\"hljs-attribute\"&gt;S&lt;/span&gt;&amp;#61;S&amp;#43;eee;\n        }\n        &lt;span class=\"hljs-attribute\"&gt;c&lt;/span&gt;&amp;#61;x%10;\n        &lt;span class=\"hljs-attribute\"&gt;S&lt;/span&gt;&amp;#61;S&amp;#43;ccc;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;S&lt;/span&gt;&amp;#61;&amp;#61;x)//这里本来是错的&amp;#xff0c;前括号你用的是中文符号\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,x);\n    }\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["输出N位水仙花数pta", ["为什么不是scanf 的返回值declared with attribute 就是printf 就是if", "\n", "水仙花数是指一个N位正整数（N≥3），它的每个位上的数字的N次幂之和等于它本身。例如：153=1", " 本题要求编写程序,计算所有N位水仙花数。", "\n", "输入格式:", "输入在一行中给出一个正整数N（3≤N≤7）。", "\n", "输出格式:", "按递增顺序输出所有N位水仙花数，每个数字占一行。", "\n", "输入样例:", "3", "输出样例:", "153", "370", "371", "407", "#include<stdio.h>", "int main()", "{", "    int n,a,x,b,i,e,S=0,c;", "    printf(\"please input a suitable integer:\");", "    scanf(\"%d\",&n);", "    switch(n){", "      case 3:a=100,b=999;break;", "      case 4:a=1000,b=9999;break;", "      case 5:a=10000,b=99999;break;", "      case 6:a=100000,b=999999;break;", "      case 7:a=1000000,b=9999999;break;", "      default:printf(\"error\\n\");break;", "       }", "for(x=a;x<=b;x++)", "{", "      for(i=1;i<n;i++)", "      {  e=x/10%10;", "         S=S+e", "e", "e;", "           }", "       c=x%10;", "       S=S+c", "c", "c;", "      if （S==x)", "        printf(\"%d\\n\",x);", "    }", "    return 0;", "}", "\n", "pta说的编译错误:a.c: In function ‘main’:", "a.c:23:10: error: stray ‘\\357’ in program", "       if （S==x)", "          ^", "a.c:23:11: error: stray ‘\\274’ in program", "       if （S==x)", "           ^", "a.c:23:12: error: stray ‘\\210’ in program", "       if （S==x)", "            ^", "a.c:23:13: error: expected ‘(’ before ‘S’", "       if （S==x)", "             ^", "a.c:23:13: warning: statement with no effect [-Wunused-value]", "a.c:23:7: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]", "       if （S==x)", "       ^~", "a.c:23:17: note: ...this statement, but the latter is misleadingly indented as if it is guarded by the ‘if’", "       if （S==x)", "                 ^", "a.c:23:17: error: expected statement before ‘)’ token", "a.c:6:5: warning: ignoring return value of ‘scanf’, declared with attribute warn_unused_result [-Wunused-result]", "     scanf(\"%d\",&n);"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;问题1&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c#\"&gt;if(th.IsAlive)\n        {\n            DateTime dt2 &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; DateTime.Now&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n            ts &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; dt2 - dt1&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n            this.textBoxTime.Text &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; Convert.ToString(ts)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n        }\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;无效&amp;#xff0c;因为t2,t3在线程里&amp;#xff0c;你其实不知道他们的完成时间&amp;#xff0c;所以这里是“假的执行时间”&amp;#xff0c;修改方法。用异步信号量堵上&amp;#xff0c;直到t2&amp;#xff0c;t3完成&lt;br /&gt;当然如果你愿意使用task也行&amp;#xff0c;await Task.WhenAll(Task1,task2)就好&lt;/p&gt;\n&lt;p&gt;问题2&amp;#xff1a;t2&amp;#xff0c;t3升序&amp;#xff0c;降序同时对nums操作。一个要升&amp;#xff0c;一个要降&amp;#xff0c;当然乱。所以你需要传参&amp;#xff08;线程传参&amp;#xff09;&amp;#xff0c;各个线程只用传参过来的而且最好是副本&amp;#xff0c;而不是直接在原始数组上操作&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["求指导，c#数据排列使用多线程后输出结果异常", ["求指导，问题如下。如下，我设计了一个冒泡排序法的数字排序功能，原本我将算法放在主线程内，代码运行良好。而我在修改后，将算法分别单独装入子线程中，输出结果出现了异常。", "我个人认为可能是因为子线程在同时调用主线程的局部变量时出现了冲突，当然也有可能不是这个问题。希望有人能为我指点一下问题所在，在不改变多线程，不改变使用冒泡排序法的前提下指导下该如何解决。", "\n", "功能：按下“排序”，主线程生成数据，两个子线程分别执行正反排序，并将结果输出在窗体上。", "问题：使用子线程排序，输出结果异常。", "\n", "源码放上：", "\n", "namespace 数据统计_窗体", "{", "\n", "public", " partial ", "class", " ", "From1", " : Form\n{\n    ", "public", " ", "From1", "()", "\n    {\n        CheckForIllegalCrossThreadCalls = ", "false", ";\n        InitializeComponent();\n    }\n\n    ", "//TimeSpan ts = new TimeSpan();", "\n\n\n\n    ", "//int[] a = new int[n];", "\n\n    ", "Thread", " ", "th", " ", "=", " ", "null", ";\n\n    ", "private", " ", "void", " ", "From1_Load", "(object sender, EventArgs e)", "\n    {\n\n    }\n\n    ", "private", " ", "void", " ", "buttonList_Click", "(object sender, EventArgs e)", "\n    {\n        ", "if", " (th == ", "null", ")\n        {\n            th = ", "new", " ", "Thread", "(PaiXu);\n            th.IsBackground = ", "true", ";", "//设置为后台线程", "\n            th.Start();   ", "//子线程开始执行方法", "\n        }\n        \n    }\n\n    ", "private", " ", "void", " ", "buttonExit_Click", "(object sender, EventArgs e)", "\n    {\n        Close();\n    }\n\n    ", "private", " ", "void", " ", "textBoxWrite_KeyPress", "(object sender, KeyPressEventArgs e)", "\n    {\n        ", "if", "(((", "int", ")e.KeyChar <", "48", "||(", "int", ")e.KeyChar >", "57", "&&(", "int", ")e.KeyChar !=", "8", "))\n        {\n            MessageBox.Show(", "\"只能输入整数\"", ", ", "\"提示\"", ", MessageBoxButtons.OK, MessageBoxIcon.Warning);\n            e.Handled = ", "true", ";\n        }\n    }\n\n    ", "private", " ", "void", " ", "PaiXu", "()", "\n    {\n        ", "TimeSpan", " ", "ts", " ", "=", " ", "new", " ", "TimeSpan", "();\n\n\n        \n\n        ", "int", " ", "n", " ", "=", " ", "0", ";\n        \n\n        ", "//int[] arrayWaitSort = new int[n];", "\n        n = ", "int", ".Parse(", "\"0\"", " + ", "this", ".textBoxWrite.Text);\n\n        ", "int", "[] nums = ", "new", " ", "int", "[n];     ", "//数组arr    nums用于储存生成的数据", "\n        \n        \n        \n\n\n        ", "Random", " ", "rnd", " ", "=", " ", "new", " ", "Random", "();    ", "//random随机数", "\n\n        \n            ", "for", " (", "int", " ", "i", " ", "=", " ", "0", "; i < n; i++)       ", "//i赋予初值0，只要i小于定义的总容量n，就会一直生成新的随机数", "\n                nums[i] = rnd.Next();\n\n        \n       \n\n        foreach (", "int", " everynum in nums)\n        {\n            ", "this", ".textBoxNum.Text += everynum + ", "\"\\r\\n\"", ";\n        }\n\n\n\n        ", "DateTime", " ", "dt1", " ", "=", " DateTime.Now;\n\n\n        ", "Thread", " ", "t2", " ", "=", " ", "new", " ", "Thread", "(() =>\n        {\n            ", "int", " ", "on", " ", "=", " nums.Length;\n            ", "for", " (", "int", " ", "i", " ", "=", " ", "0", "; i < on-", "1", " ; i++)\n            {\n                ", "for", " (", "int", " ", "j", " ", "=", " ", "0", "; j < on -", "1", "- i; j++)\n                {\n                    ", "if", " (nums[j] > nums[j + ", "1", "])\n                    {\n                        ", "int", " ", "temp", " ", "=", " nums[j];\n                        nums[j] = nums[j + ", "1", "];\n                        nums[j+", "1", "] = temp;\n\n                    }\n                }\n            }\n\n            ", "for", " (", "int", " ", "i", " ", "=", " ", "0", "; i < nums.Length; i++)\n\n                ", "this", ".textBoxListON.Text += nums[i] + ", "\"\\r\\n\"", ";\n        });\n        \n\n\n\n        \n        ", "Thread", " ", "t3", " ", "=", " ", "new", " ", "Thread", "(() =>\n        {\n            ", "int", " ", "otto", " ", "=", " nums.Length - ", "1", ";\n            ", "for", " (", "int", " ", "h", " ", "=", " ", "0", "; h < otto; h++)\n            {\n                ", "for", " (", "int", " ", "k", " ", "=", " ", "0", "; k < otto - h; k++)\n                {\n                    ", "if", " (nums[k + ", "1", "] > nums[k])\n                    {\n                        ", "int", " ", "max", " ", "=", " nums[k];\n                        nums[k] = nums[k + ", "1", "];\n                        nums[k + ", "1", "] = max;\n                    }\n                }\n            }\n\n            \n\n            ", "for", " (", "int", " ", "h", " ", "=", " ", "0", "; h < n; h++)\n\n                ", "this", ".textBoxListOut.Text += nums[h] + ", "\"\\r\\n\"", ";\n        });\n\n\n        t2.Start();\n        t3.Start();\n\n        ", "if", "(th.IsAlive)\n        {\n            ", "DateTime", " ", "dt2", " ", "=", " DateTime.Now;\n            ts = dt2 - dt1;\n            ", "this", ".textBoxTime.Text = Convert.ToString(ts);\n        }\n\n        \n\n\n        \n        \n    }\n\n\n\n}\n", "\n", "}", "\n", "界面如下：", "\n", "\n", "接下来是调试效果：（排序结果输出异常）", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;main函数中&amp;#xff1a;&lt;br /&gt;int l &amp;#61; left, r &amp;#61; right;//这里left和right都没有初始化&amp;#xff0c;需要先给left和right赋值&amp;#xff0c;看你main函数中也没用&amp;#xff0c;这一句注释掉就可以了&lt;br /&gt;for (i &amp;#61; 0; i &amp;lt; n; i&amp;#43;&amp;#43;)&lt;br /&gt;        printf(&amp;#34;%d&amp;#34;, a[i]);//这里不需要&amp;amp;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["请问我这个程序错在哪里？", ["#include <stdio.h>\n", "int", " myswap(", "int", "* ", "array", ", ", "int", " left, ", "int", " right)\n{\n    ", "int", " tmp = ", "array", "[left];\n    ", "array", "[left] = ", "array", "[right];\n    ", "array", "[right] = tmp;\n    ", "return", " ", "0", ";\n}\n", "int", " quicksort(", "int", "* a, ", "int", " left, ", "int", " right)\n{\n    ", "if", " (left >= right)\n        ", "return", " ", "0", ";\n    ", "int", " l = left, r = right;", "//最左边的数为左标记，最右边的数为右标记", "\n    ", "int", " pivot = a[left];", "//选择最左边的数字为排序基准(pivot)", "\n    ", "for", " (;;)\n    {\n        ", "while", " (*(a + ", "1", ") <= *(a + pivot) && l < right)\n            l++;\n        ", "while", " (*(a + r) >= *(a + pivot) && r > l)\n            r--;\n        ", "if", " (l < r)\n            myswap(a, l, r);\n        ", "else", "\n            ", "break", ";\n    }\n    ", "if", " (*(a + pivot) < *(a + r))", "//如果此时（右标记）尾指针指向的元素刚好大于枢纽元素", "\n        myswap(a, pivot, r);", "//枢纽和尾指针进行交换使得枢纽元右侧的元素全部大于枢纽元素", "\n    quicksort(a, left, r - ", "1", ");\n    quicksort(a, r + ", "1", ", right);", "//递归", "\n}\n", "int", " main()\n{\n    ", "int", " a[", "100", "], left, right,n,i;", "//一开始设的数组里不能是未知数", "\n    ", "int", " l = left, r = right;\n    scanf(", "\"%d\"", ", &n);\n    ", "for", " (i = ", "0", "; i < n; i++)\n        scanf(", "\"%d\"", ", &a[i]);\n    quicksort(a, ", "0", ", n", "-1", ");\n    ", "for", " (i = ", "0", "; i < n; i++)\n        printf(", "\"%d\"", ", &a[i]);\n}\n\n", "\n", "前几天误以为自己会了，今天复习，改了好几遍程序后发现还是有错误"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;如果有帮到你&amp;#xff0c;请采纳一下~&lt;/li&gt;&lt;/ul&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; time\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; tkinter &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; tk\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; tkinter &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; messagebox\n\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;SortingAlgorithms&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;__init__&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;pass&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;bubble_sort&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, arr&lt;/span&gt;):\n        start_time &amp;#61; time.time()\n        n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(arr)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n):\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, n-i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; arr[j] &amp;gt; arr[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]:\n                    arr[j], arr[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; arr[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], arr[j]\n        end_time &amp;#61; time.time()\n        time_complexity &amp;#61; end_time - start_time\n        space_complexity &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; arr, time_complexity, space_complexity\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;selection_sort&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, arr&lt;/span&gt;):\n        start_time &amp;#61; time.time()\n        n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(arr)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n):\n            min_idx &amp;#61; i\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, n):\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; arr[min_idx] &amp;gt; arr[j]:\n                    min_idx &amp;#61; j\n            arr[i], arr[min_idx] &amp;#61; arr[min_idx], arr[i]\n        end_time &amp;#61; time.time()\n        time_complexity &amp;#61; end_time - start_time\n        space_complexity &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; arr, time_complexity, space_complexity\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;quick_sort&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, arr&lt;/span&gt;):\n        start_time &amp;#61; time.time()\n\n        &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;partition&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;arr, low, high&lt;/span&gt;):\n            i &amp;#61; low - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n            pivot &amp;#61; arr[high]\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(low, high):\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; arr[j] &amp;lt;&amp;#61; pivot:\n                    i &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n                    arr[i], arr[j] &amp;#61; arr[j], arr[i]\n            arr[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], arr[high] &amp;#61; arr[high], arr[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n\n        &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;quick_sort_helper&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;arr, low, high&lt;/span&gt;):\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; low &amp;lt; high:\n                pi &amp;#61; partition(arr, low, high)\n                quick_sort_helper(arr, low, pi-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n                quick_sort_helper(arr, pi&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, high)\n\n        quick_sort_helper(arr, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(arr)-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        end_time &amp;#61; time.time()\n        time_complexity &amp;#61; end_time - start_time\n        space_complexity &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(arr)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; arr, time_complexity, space_complexity\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;merge_sort&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, arr&lt;/span&gt;):\n        start_time &amp;#61; time.time()\n\n        &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;merge&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;arr, l, m, r&lt;/span&gt;):\n            n1 &amp;#61; m - l &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n            n2 &amp;#61; r - m\n            L &amp;#61; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] * n1\n            R &amp;#61; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] * n2\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n1):\n                L[i] &amp;#61; arr[l &amp;#43; i]\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n2):\n                R[j] &amp;#61; arr[m &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;#43; j]\n            i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n            j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n            k &amp;#61; l\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; i &amp;lt; n1 &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; j &amp;lt; n2:\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; L[i] &amp;lt;&amp;#61; R[j]:\n                    arr[k] &amp;#61; L[i]\n                    i &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n                    arr[k] &amp;#61; R[j]\n                    j &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n                k &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; i &amp;lt; n1:\n                arr[k] &amp;#61; L[i]\n                i &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n                k &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; j &amp;lt; n2:\n                arr[k] &amp;#61; R[j]\n                j &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n                k &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n\n        &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;merge_sort_helper&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;arr, l, r&lt;/span&gt;):\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; l &amp;lt; r:\n                m &amp;#61; (l&amp;#43;(r-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)) // &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n                merge_sort_helper(arr, l, m)\n                merge_sort_helper(arr, m&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, r)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["Python数据结构", ["使用python编程语言实现Tkinter界面", "\n", "该界面要有以下功能", "(1)从键盘上输入n个长度为m的整数，程序可以输出这些整数的四种排序方式：快速排序，直接选择排序，冒泡排序，归并排序，并在界面显示每种排序的升序和降序以及排序的时间复杂度和空间复杂度；", "(2)程序能对所输入的数字进行判断，如果不是所要求的长度，弹出提醒消息框；", "(3)输出结果以逗号隔开。", "(4)只能使用数据结构的知识实现，不能使用数据库"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第6行for循环后面的分号删除掉&lt;br /&gt;17行也是&amp;#xff0c;然后大括号也是乱的&lt;br /&gt;printf输出的变量也是错的&amp;#xff0c;修改如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;  a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;] &amp;#61; { {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;},{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;} };\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;  b[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;], i, j;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;array a:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; j&amp;#43;&amp;#43;)\n\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%5d&amp;#34;&lt;/span&gt;, a[i][j]);\n            b[j][i] &amp;#61; a[i][j];\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;array b:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%5d&amp;#34;&lt;/span&gt;, b[i][j]);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["二维数组元素互换出现问题", ["问题遇到的现象和发生背景", "\n", "代码写完后，运行结果出现了一串数字，非数列形式", "\n", "问题相关代码，请勿粘贴截图", "\n", "#include <stdio.h>", "\n", "int main()", "{", "\n", "int  a[", "2", "][", "3", "] = { {", "1", ",", "2", ",", "3", "},{", "4", ",", "5", ",", "6", "} };\nint  b[", "3", "][", "2", "], i, j;\nprintf(", "\"array a:\\n\"", ");\nfor (i = ", "0", "; i <= ", "1", "; i++)\n{\n    for (j = ", "0", "; j <= ", "2", "; j++);\n\n    {\n        printf(", "\"%5d\\n\"", ", a[", "2", "][", "3", "]);\n        b[j][i] = a[i][j];\n    }\n}\n    printf(", "\"\\n\"", ");\nprintf(", "\"array b:\\n\"", ");\nfor (i = ", "0", "; i <= ", "2", "; i++)\n{\n    for (j = ", "0", "; j <= ", "1", "; j++);\n}\nprintf(", "\"%5d\\n\"", ", b[i][j]);\nprintf(", "\"\\n\"", ");\nreturn ", "0", ";\n", "\n", "}", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;直接split就行了   [].concat(arr);换成  arr.split(&amp;#39;,&amp;#39;);&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;function &lt;span class=\"hljs-keyword\"&gt;bubble(){\n&lt;/span&gt;    var arr &amp;#61; prompt(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入一系列数字&amp;#xff08;用英文逗号隔开&amp;#xff09;&amp;#34;&lt;/span&gt;);\n    var arr1&amp;#61; arr.split(&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;);\n    for (var i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; arr1.length - 1; i&amp;#43;&amp;#43;) {&lt;!-- --&gt;&lt;/span&gt;\n        for (var &lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; j &amp;lt; arr1.length - 1 - i; j&amp;#43;&amp;#43;) {&lt;!-- --&gt;&lt;/span&gt;\n            if (arr1[&lt;span class=\"hljs-keyword\"&gt;j] &lt;/span&gt;&amp;gt; arr1[&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]) {\n                var temp &amp;#61; arr1[&lt;span class=\"hljs-keyword\"&gt;j];\n&lt;/span&gt;                arr1[&lt;span class=\"hljs-keyword\"&gt;j] &lt;/span&gt;&amp;#61; arr1[&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                arr1[&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; temp;\n            }\n        }\n    }\n    alert(&lt;span class=\"hljs-string\"&gt;&amp;#34;原始排序为:&amp;#34;&lt;/span&gt;&amp;#43;arr&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;,冒泡排序后的结果为&amp;#xff1a;&amp;#34;&lt;/span&gt;&amp;#43;arr1);\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["JS冒泡排序法程序无效果", ["JS实现冒泡排序法没有效果该怎么解决呢？", "代码如下：", "\n", "function ", "bubble(){\n", "    var arr = prompt(", "\"请输入一系列数字（用英文逗号隔开）\"", ");\n    var arr1= [].concat(arr);\n    for (var i = ", "0", "; i < arr1.length - 1; i++) {", "\n        for (var ", "j ", "= ", "0", "; j < arr1.length - 1 - i; j++) {", "\n            if (arr1[", "j] ", "> arr1[", "j ", "+ ", "1", "]) {\n                var temp = arr1[", "j];\n", "                arr1[", "j] ", "= arr1[", "j ", "+ ", "1", "];\n                arr1[", "j ", "+ ", "1", "] = temp;\n            }\n        }\n    }\n    alert(", "\"原始排序为:\"", "+arr+", "\",冒泡排序后的结果为：\"", "+arr1);\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用自ChatGPT&lt;br /&gt;先贴本人本地执行结果&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/339541501876127.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;这个是我根据chatGPT代码修改的。&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;最近感觉chatGPT给的代码经常有问题&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; java.util.*;\n&lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Main {\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; main(String[] args) {\n        Scanner sc &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; Scanner(&lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;);\n        &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; min &amp;#61; &lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;.MAX_VALUE;\n        //先将点存储在&lt;span class=\"hljs-type\"&gt;Point&lt;/span&gt;数组里面\n        ArrayList&amp;lt;&lt;span class=\"hljs-type\"&gt;Point&lt;/span&gt;&amp;gt; list &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();\n        String &lt;span class=\"hljs-type\"&gt;line&lt;/span&gt; &amp;#61; &amp;#34;&amp;#34;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (!(&amp;#34;&amp;#34;).equals(&lt;span class=\"hljs-type\"&gt;line&lt;/span&gt;&amp;#61;sc.nextLine())) {\n            String[] s &amp;#61; &lt;span class=\"hljs-type\"&gt;line&lt;/span&gt;.split(&amp;#34;,&amp;#34;);\n            list.&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;Point&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;.parseInt(s[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]), &lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;.parseInt(s[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])));\n        }\n        //穷举所有四个点的组合\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; list.size(); i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt; list.size(); j&amp;#43;&amp;#43;) {\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; k &amp;lt; list.size(); k&amp;#43;&amp;#43;) {\n                    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; l &amp;#61; k &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; l &amp;lt; list.size(); l&amp;#43;&amp;#43;) {\n                        &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                        //计算平均距离\n                        sum &amp;#43;&amp;#61; getDistance(list.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(i), list.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(j));\n                        sum &amp;#43;&amp;#61; getDistance(list.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(i), list.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(k));\n                        sum &amp;#43;&amp;#61; getDistance(list.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(i), list.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(l));\n                        sum &amp;#43;&amp;#61; getDistance(list.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(j), list.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(k));\n                        sum &amp;#43;&amp;#61; getDistance(list.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(j), list.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(l));\n                        sum &amp;#43;&amp;#61; getDistance(list.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(k), list.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(l));\n                        sum /&amp;#61; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;;\n                        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum &amp;lt; min) {\n                            min &amp;#61; sum;\n                        }\n                    }\n                }\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printf(&amp;#34;%.02f&amp;#34;, min);\n    }\n    //计算两点之间距离\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; getDistance(&lt;span class=\"hljs-type\"&gt;Point&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;Point&lt;/span&gt; b) {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; Math.sqrt(Math.pow(a.x - b.x, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) &amp;#43; Math.pow(a.y - b.y, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;));\n    }\n}\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;Point&lt;/span&gt; {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; y;\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;Point&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; y) {\n        this.x &amp;#61; x;\n        this.y &amp;#61; y;\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["蓝桥杯 平面点集中4点最小平均距离", ["题目描述", "已知平面上若干个点的坐标。", "\n", "需要求出在所有的组合中，4 个点间平均距离的最小值（四舍五入，保留 2 位小数）。", "比如有 4 个点：a,b,c,d, 则平均距离是指：ab, ac, ad, bc, bd, cd 这 6 个距离的平均值。", "\n", "输入描述", "输入多行（可能包含上万行），每行两个数字 x，y\\ （1 \\leq x,y \\leq 1000）x，y （1≤x,y≤1000），表示每个点的坐标。", "\n", "输出描述", "输出一行，在所有的组合中，4 个点间平均距离的最小值（四舍五入，保留 2 位小数）。", "\n", "输入输出样例", "示例", "输入", "\n", "10", ",", "10", "\n", "20", ",", "20", "\n", "80", ",", "50", "\n", "10", ",", "20", "\n", "20", ",", "10", "\n\n", "\n", "输出", "\n", "11", ".", "38", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;可以看下数据结构参考手册中的 &lt;a href=\"https://zh.cppreference.com/w/c/io/fscanf\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;c语言-fscanf()&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "算法与数字", "Question": ["通过fscanf扫描文本存到动态数组", ["我想要通过fscanf扫描weightdata.txt中的字母和数字，分别存入到data和weight中，并打印，第一次运行成功，再尝试就开始报错，并且每次运行结果都不同。", "\n", "多次运行结果如下：", "\n", "代码如下：", "\n", "#", "define", " _CRT_SECURE_NO_WARNINGS", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<stdio.h>", "\n", "using", " ", "namespace", " std;\n", "typedef", " ", "struct", "\n{\n    ", "char", " data;\n    ", "int", " weight;\n    ", "int", " parent, lchild, rchild;\n}HTNode, * HuffmanTree;", "//动态分配数组存储哈夫曼树", "\n", "typedef", " ", "char", "** HuffmanCode;", "//动态分配数组存储哈夫曼编码表", "\n", "void", " ", "load_weightdata_file", "(HTNode* hnode)", "\n", "{\n    FILE* fp;\n    ", "int", " i = ", "0", ";\n    fp = ", "fopen", "(", "\"D://数据结构//课程实验//weightdata.txt\"", ", ", "\"r\"", ");\n    ", "if", " (fp == ", "NULL", ")\n    {\n        cout << ", "\"打开文件失败\"", " << endl;\n        ", "exit", "(OVERFLOW);\n    }\n    ", "while", " (!", "feof", "(fp))\n    {\n        ", "fscanf", "(fp, ", "\"%c\"", ", &((hnode+i)->data));\n        ", "fscanf", "(fp, ", "\"%d\"", ", &((hnode+i)->weight));\n        ", "fseek", "(fp,", "2", ", SEEK_CUR);\n        cout << (hnode+i)->data << ", "\" \"", ";\n        cout << (hnode+i)->weight << endl;\n        i++;\n        ", "if", " (i == ", "26", ")\n            ", "break", ";\n    }\n    ", "fclose", "(fp);\n    fp = ", "NULL", ";\n}\n", "int", " ", "main", "()", "\n", "{\n    HTNode* HT;\n    HT = (HTNode*)", "malloc", "(", "sizeof", "(HTNode));\n    ", "load_weightdata_file", "(HT);\n    ", "return", " ", "0", ";\n}\n\n", "\n", "调试报错如下：", "\n", "\n", "我查询资料也不知如何解决这种情况"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的算法慢是因为&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;你用的排序算法是O(n^2), 可以直接用Arrays.sort()优化。&lt;/li&gt;&lt;li&gt;你最后获取序号的算法也是O(n^2), 可以用哈希表优化成O(n)&lt;/li&gt;&lt;/ol&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Solution {\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] arrayRankTransform(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] arr) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] arr_copy &amp;#61; Arrays.copyOf(arr, arr.length);\n        Arrays.sort(arr_copy);\n        Map&amp;lt;&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt; &lt;span class=\"hljs-type\"&gt;record&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num : arr_copy) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-type\"&gt;record&lt;/span&gt;.containsKey(num)) {\n                &lt;span class=\"hljs-type\"&gt;record&lt;/span&gt;.put(num, &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;&amp;#43;&amp;#43;);\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;arr.length; &amp;#43;&amp;#43;i) {\n            arr[i] &amp;#61; &lt;span class=\"hljs-type\"&gt;record&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(arr[i]);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; arr;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["优化一段代码，主要是for循环。希望减少运行时间。", ["下面这段代码是将输入的数字进行排序后，将排好的序号替换掉原来数组中元素位置上的值。", "\n", "例如", "\n", "\n", "求优化下列代码。运行时间长，效率不高。", "\n", "class", " ", "Solution", " {\n    ", "public", " ", "int", "[] ", "arrayRankTransform", "(", "int", "[] arr", ")", " {\n        ", "int", " i, j, k;\n       \n        ", "int", " arr_a[] = arr;\n        HashSet<Integer> ", "set", " = ", "new", " HashSet<>();\n\n", "//        for (int i1 : arr_a) {", "\n", "//            System.out.println(i1);", "\n", "//", "\n", "//        }", "\n\n        ", "for", " (", "int", " x = ", "0", "; x < arr.length; x++) {\n            ", "set", ".", "add", "(arr_a[x]);\n        }\n        Integer arr_b[] = ", "set", ".toArray(", "set", ".toArray(", "new", " Integer[]{}));\n\n        ", "for", " (i = ", "0", "; i < arr_b.length - ", "1", "; i++) {\n            ", "for", " (j = ", "0", "; j < arr_b.length - i - ", "1", "; j++) {\n                ", "if", " (arr_b[j] > arr_b[j + ", "1", "]) {\n                    k = arr_b[j];\n                    arr_b[j] = arr_b[j + ", "1", "];\n                    arr_b[j + ", "1", "] = k;\n                }\n            }\n\n        }\n       \n        ", "for", " (", "int", " i1 = ", "0", "; i1 < arr.length; i1++) {\n            ", "for", " (", "int", " i2 = ", "0", "; i2 < arr_b.length; i2++) {\n                ", "if", " (arr[i1] == arr_b[i2]) {\n                    arr[i1] = i2 + ", "1", ";\n                    ", "break", ";\n\n                }\n\n            }\n\n\n        }\n        ", "return", " arr;\n\n    }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "这是我写的测试类，写的不怎么好，但是基本能够进行测试，在网上几乎没有搜出相应的解决方法，可能是测试servlet功能不流行吧，不过话说，开发中都不用纯servler的。\r\n\r\n\r\n```\r\n import static org.junit.Assert.*;\r\n\r\nimport java.io.IOException;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.easymock.EasyMock;\r\nimport org.junit.Test;\r\nimport org.springframework.mock.web.MockHttpSession;\r\n\r\npublic class ValidateCodeServletTest {\r\n\tprivate static Logger logger = Logger.getLogger(ValidateCodeServletTest.class);\r\n\r\n\t@Test\r\n\tpublic void testServiceHttpServletRequestHttpServletResponse() {\r\n\t\tHttpServletRequest reqMock = EasyMock.createMock(HttpServletRequest.class);\r\n\t\tHttpServletResponse respMock = EasyMock.createMock(HttpServletResponse.class);\r\n\t\t\r\n\t\tHttpSession session = new MockHttpSession();\r\n\t\t\r\n\t\tEasyMock.expect(reqMock.getSession()).andReturn(session);\r\n\t\tEasyMock.replay(reqMock);\r\n\t\t\r\n\t\tValidateCodeServlet test = new ValidateCodeServlet();\r\n\t\ttest.init();\r\n\t\ttry {\r\n\t\t\ttest.service(reqMock, respMock);\r\n\t\t} catch (ServletException e) {\r\n\t\t\tlogger.error(\"调用验证码出异常\", e);\r\n\t\t} catch (IOException e) {\r\n\t\t\tlogger.error(\"输入输出流抛出异常\", e);\r\n\t\t}\r\n\t\t\r\n\t\tEasyMock.verify(reqMock);\r\n\t}\r\n}\r\n```", "Konwledge_Point": "算法与数字", "Question": ["悬赏如何junit测试返回值void的输出验证码图片功能的servlet！", ["刚接触到验证码生成算法，由于楼主刚入职职场，刚接触junit测试，知道junit是白盒子测试，也只会用代用返回值的测试。现在我要写一个生成验证码的serlvet,此serlvet可以向客户端返回一个验证码的jpg图片。请问如果用junit来测试这个类的生成验证码功能是否生效？我知道难度可能有点大，所以希望大神耐心解答，50分献上！\n", "\n\n", " public class ValidateCodeServlet extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    // 设置验证图片的宽度, 高度, 验证码的个数\n    private int width = 152;\n    private int height = 40;\n    private int codeCount = 4;\n\n    // 验证码字体的高度\n    private int fontHeight = 4;\n\n    // 验证码中的单个字符基线. 即：验证码中的单个字符位于验证码图形左上角的 (codeX, codeY) 位置处\n    private int codeX = 0;\n    private int codeY = 0;\n\n    // 验证码由哪些字符组成\n    char[] codeSequence = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz23456789\"\n            .toCharArray();\n\n    // 初始化验证码图形属性\n    @Override\n    public void init() {\n        fontHeight = height - 2;\n        codeX = width / (codeCount + 2);\n        codeY = height - 4;\n    }\n\n    @Override\n    public void service(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n\n        // 定义一个类型为 BufferedImage.TYPE_INT_BGR 类型的图像缓存\n        BufferedImage buffImg = null;\n        buffImg = new BufferedImage(width, height, BufferedImage.TYPE_3BYTE_BGR);\n\n        // 在 buffImg 中创建一个 Graphics2D 图像\n        Graphics2D graphics = null;\n        graphics = buffImg.createGraphics();\n\n        // 设置一个颜色, 使 Graphics2D 对象的后续图形使用这个颜色\n        graphics.setColor(Color.WHITE);\n\n        // 填充一个指定的矩形: x - 要填充矩形的 x 坐标; y - 要填充矩形的 y 坐标; width - 要填充矩形的宽度; height\n        // - 要填充矩形的高度\n        graphics.fillRect(0, 0, width, height);\n\n        // 创建一个 Font 对象: name - 字体名称; style - Font 的样式常量; size - Font 的点大小\n        Font font = null;\n        font = new Font(\"\", Font.BOLD, fontHeight);\n        // 使 Graphics2D 对象的后续图形使用此字体\n        graphics.setFont(font);\n\n        graphics.setColor(Color.BLACK);\n\n        // 绘制指定矩形的边框, 绘制出的矩形将比构件宽一个也高一个像素\n        graphics.drawRect(0, 0, width - 1, height - 1);\n\n        // 随机产生 15 条干扰线, 使图像中的认证码不易被其它程序探测到\n        Random random = null;\n        random = new Random();\n        graphics.setColor(Color.GREEN);\n        for (int i = 0; i < 10; i++) {\n            int x = random.nextInt(width);\n            int y = random.nextInt(height);\n            int x1 = random.nextInt(20);\n            int y1 = random.nextInt(20);\n            graphics.drawLine(x, y, x + x1, y + y1);\n        }\n\n        // 创建 randomCode 对象, 用于保存随机产生的验证码, 以便用户登录后进行验证\n        StringBuffer randomCode;\n        randomCode = new StringBuffer();\n\n        for (int i = 0; i < codeCount; i++) {\n            // 得到随机产生的验证码数字\n            String strRand = null;\n            strRand = String.valueOf(codeSequence[random.nextInt(36)]);\n\n            // 用随机产生的颜色将验证码绘制到图像中\n            graphics.setColor(Color.BLUE);\n            graphics.drawString(strRand, (i + 1) * codeX, codeY);\n\n            // System.out.println(\"^^\" + strRand);\n            randomCode.append(strRand);\n        }\n\n        //向session中写入验证码信息\n        request.getSession().setAttribute(\"checkCode\", randomCode.toString());\n\n        // 禁止图像缓存\n        response.setHeader(\"Pragma\", \"no-cache\");\n        response.setHeader(\"Cache-Control\", \"no-cache\");\n        response.setDateHeader(\"Expires\", 0);\n\n        // 将图像输出到输出流中\n        ServletOutputStream sos = null;\n        sos = response.getOutputStream();\n        ImageIO.write(buffImg, \"jpeg\", sos);\n        sos.close();\n    }\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; LEN 10&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;queue&lt;/span&gt; {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; Data[LEN];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; Rear;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; Front;\n};\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;InitQueue&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; queue* q)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;LEN;i&amp;#43;&amp;#43;)\n        q-&amp;gt;Data[i] &amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//输出&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;show&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; queue* q,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; head)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;head,j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;LEN;i&amp;#43;&amp;#43;,j&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(q-&amp;gt;Data[i%LEN] !&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,q-&amp;gt;Data[i%LEN]);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; str[&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; };\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; qhead; &lt;span class=\"hljs-comment\"&gt;//对头位置&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sn, snindex; &lt;span class=\"hljs-comment\"&gt;//蛇头元素和蛇头下标&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, v, size &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;queue&lt;/span&gt; Qa;\n    &lt;span class=\"hljs-built_in\"&gt;InitQueue&lt;/span&gt;(&amp;amp;Qa); &lt;span class=\"hljs-comment\"&gt;//初始化队列&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s %d&amp;#34;&lt;/span&gt;, str, &amp;amp;qhead);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;, &amp;amp;sn, &amp;amp;snindex);\n    Qa.Front &amp;#61; qhead; &lt;span class=\"hljs-comment\"&gt;//队头&lt;/span&gt;\n\n    &lt;span class=\"hljs-comment\"&gt;//将数字串放入队列&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; str[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;; i&amp;#43;&amp;#43;)\n        Qa.Data[(qhead&amp;#43;i)%LEN] &amp;#61; str[i]-&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//循环排放&lt;/span&gt;\n    \n    \n    &lt;span class=\"hljs-comment\"&gt;//如果队头下标&amp;#61;&amp;#61;蛇头下标&amp;#xff0c;直接输出即可&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (qhead &amp;#61;&amp;#61; snindex)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;show&lt;/span&gt;(&amp;amp;Qa,qhead);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d\\n&amp;#34;&lt;/span&gt;, sn, snindex);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-comment\"&gt;//如果队头&amp;#61;&amp;#61;0&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (qhead &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-comment\"&gt;//队尾肯定在最后&amp;#xff0c;所以蛇头直接向前移动即可&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (snindex &amp;gt; qhead)\n            {\n                &lt;span class=\"hljs-comment\"&gt;//队列数据前移&lt;/span&gt;\n                v &amp;#61; Qa.Data[snindex - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; snindex; i &amp;lt; LEN; i&amp;#43;&amp;#43;)\n                    Qa.Data[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; Qa.Data[i];\n                Qa.Data[LEN - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; v;\n                snindex--;\n                &lt;span class=\"hljs-comment\"&gt;//输出蛇元素&lt;/span&gt;\n                &lt;span class=\"hljs-built_in\"&gt;show&lt;/span&gt;(&amp;amp;Qa,qhead);\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d\\n&amp;#34;&lt;/span&gt;, sn, snindex);\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-comment\"&gt;// 对头下标不为0&amp;#xff0c;队尾肯定在头的左侧&lt;/span&gt;\n            Qa.Rear &amp;#61; Qa.Front - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-comment\"&gt;//如果蛇头初始位置在队尾的左侧&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (snindex &amp;lt;&amp;#61; Qa.Rear)\n            {\n                &lt;span class=\"hljs-comment\"&gt;//先向左侧&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (snindex &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                {\n                    v &amp;#61; Qa.Data[snindex - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; snindex; i &amp;lt;&amp;#61; Qa.Rear; i&amp;#43;&amp;#43;)\n                        Qa.Data[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; Qa.Data[i];\n                    Qa.Data[Qa.Rear] &amp;#61; v;\n                    snindex--;\n                    &lt;span class=\"hljs-comment\"&gt;//打印&lt;/span&gt;\n                    &lt;span class=\"hljs-built_in\"&gt;show&lt;/span&gt;(&amp;amp;Qa,qhead);\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d\\n&amp;#34;&lt;/span&gt;, sn, snindex);\n                }\n                &lt;span class=\"hljs-comment\"&gt;//snindex &amp;#61;&amp;#61; 0&lt;/span&gt;\n                v &amp;#61; Qa.Data[LEN&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]; &lt;span class=\"hljs-comment\"&gt;//&lt;/span&gt;\n                Qa.Data[LEN&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61; Qa.Data[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;Qa.Rear;i&amp;#43;&amp;#43;)\n                    Qa.Data[i] &amp;#61; Qa.Data[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                Qa.Data[Qa.Rear] &amp;#61; v;\n                snindex &amp;#61; LEN - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                &lt;span class=\"hljs-built_in\"&gt;show&lt;/span&gt;(&amp;amp;Qa,qhead);\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d\\n&amp;#34;&lt;/span&gt;,sn,snindex);\n\n                &lt;span class=\"hljs-comment\"&gt;//左侧吃完后&amp;#xff0c;绕到数组末尾开始&lt;/span&gt;\n                \n                &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (snindex &amp;gt; qhead)\n                {\n                    v &amp;#61; Qa.Data[snindex - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                    &lt;span class=\"hljs-comment\"&gt;//蛇头后半部分移动&lt;/span&gt;\n                    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; snindex; i &amp;lt; LEN; i&amp;#43;&amp;#43;)\n                        Qa.Data[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; Qa.Data[i];\n                    Qa.Data[LEN - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; Qa.Data[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n                    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; Qa.Rear; i&amp;#43;&amp;#43;)\n                        Qa.Data[i] &amp;#61; Qa.Data[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                    Qa.Data[Qa.Rear] &amp;#61; v;\n                    snindex--;\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (v &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)\n                        &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n                    &lt;span class=\"hljs-built_in\"&gt;show&lt;/span&gt;(&amp;amp;Qa,qhead);\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d\\n&amp;#34;&lt;/span&gt;, sn, snindex);\n                }\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            {\n                &lt;span class=\"hljs-comment\"&gt;//蛇头在队尾的右侧&lt;/span&gt;\n                &lt;span class=\"hljs-comment\"&gt;//size &amp;#61; LEN - (snindex - qhead); //初始蛇身长度&amp;#xff08;含-1&amp;#xff09;&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (snindex &amp;gt; qhead)\n                {\n                    v &amp;#61; Qa.Data[snindex - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                    &lt;span class=\"hljs-comment\"&gt;//蛇头后半部分移动&lt;/span&gt;\n                    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; snindex; i &amp;lt; LEN; i&amp;#43;&amp;#43;)\n                        Qa.Data[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; Qa.Data[i];\n                    Qa.Data[LEN - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; Qa.Data[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n                    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; Qa.Rear; i&amp;#43;&amp;#43;)\n                        Qa.Data[i] &amp;#61; Qa.Data[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                    Qa.Data[Qa.Rear] &amp;#61; v;\n                    snindex--;\n                    &lt;span class=\"hljs-built_in\"&gt;show&lt;/span&gt;(&amp;amp;Qa,qhead);\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d\\n&amp;#34;&lt;/span&gt;, sn, snindex);\n                }\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于使用数据结构队列创建贪吃蛇的问题", ["需要设计一个顺序循环队列，长度len为10，队列中有n个元素（1≤n<10）。选择任意一个元素为蛇的头部，队尾元素为蛇的尾部。贪吃蛇开始移动吃他前面的元素，并追加至蛇的尾部，使蛇变长。", "\n", "第1行，第1个数为一串整形数字，第2个元素表示队头元素的下标值。", "第2行，第1个数表示蛇头部的元素，第2个数表示蛇头部元素的下标值。", "\n", "输入样例", "123456789 0", "3 2", "输出样例", "134567892", "3 1", "345678921", "3 0", "\n", "本人学艺不精，只会队列的入队出队，请问如何在该代码的基础上将其修改为符合题目的需求", "\n", "#", "include", "<stdio.h>\n#", "include", "<stdlib.h>\n\n", "struct", " queue{\n    ", "int", " Data", "[", "100", "]", ";\n    ", "int", " Rear;\n    ", "int", " Front;\n};\nvoid ", "Createqueue(", "struct", " ", "queue", " ", "*", "q", ")", "\n{\n    q->Rear = -", "1", ";\n    q->Front = -", "1", ";\n}\nvoid ", "Addqueue(", "struct", " ", "queue", " ", "*", "q", ", ", "int", " ", "x", ")", "\n{\n    q->Rear++;\n    q->Data", "[", "q", "->R", "ear", "]", " = x;\n}\n", "int", " ", "Outqueue(", "struct", " ", "queue", " ", "*", "q", ")", "\n{\n    q->Front++;\n    return q->Data", "[", "q", "->F", "ront", "]", ";    \n}\n", "int", " ", "Isqueue(", "struct", " ", "queue", " ", "*", "q", ")", " \n{\n    ", "int", " i;\n    ", "if", "(q->Rear", " == ", "q->Front) {\n        i = ", "0", ";\n    }\n    ", "else", " {\n        i = ", "1", ";\n    }\n\n    return i;\n} \n", "int", " main", "()", "\n{\n    ", "struct", " queue Qa;\n    ", "Createqueue(&Qa)", ";\n    ", "int", " i; \n    ", "for", "(i = ", "0", ";i<", "9", ";i++)\n    {\n        ", "Addqueue(&Qa,", "i", ")", ";\n    }\n    ", "while", "(", "Isqueue(&Qa)", ")\n    {\n    ", "int", "    k = ", "Outqueue(&Qa)", ";\n        printf(", "\"%d\"", ",k);\n    }\n    \n    \n}\n"]], "Tag": "算法设计"}
{"Answer": "可以存在数据库，不过同样的读取后存本地，为了安全可以使用后再删除，不过RSA客户端只要有公钥就行了，私钥只有服务端持有，不会被篡改的，公钥任何人都可以知道。", "Konwledge_Point": "算法与数字", "Question": ["RSA算法中的公钥和私钥可以保存在数据库里面吗？", ["毕设是网页防篡改系统。", "\n其中有两个模块，备份模块和恢复模块。", "\n\n", "备份模块用私钥对文件的摘要值进行签名，恢复模块用公钥解密摘要值。", "\n\n", "因为两个模块是分开的， 我如何保存公钥和私钥对？ ", "\n\n", "可以保存在数据库里面吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我没有看你的代码&amp;#xff0c;但我知道你问题出在哪&lt;br /&gt;你小球的函数只应该规定小球出现在哪&amp;#xff0c;而不应该有任何绘制的代码&lt;br /&gt;绘制应该是根据人物的位置、视野、视野里能看到的东西&amp;#xff0c;统一进行绘制&amp;#xff0c;而不是每个函数绘制自己的东西&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["一个程序被新加入的函数图层覆盖了怎么办", ["呃，鄙人想做一个迷宫小程序，但觉得单纯的迷宫没有什么意思，想在程序中加入一个弹射的小球ghost，使游戏角色碰到产生一定的效果，问题就是我写好ghost函数之后整个游戏画面会被覆盖掉，而不是共存，所以想来请教一下各位。", "\n", "这是本来的程序：", "\n", "这是加了ghost后：", "\n", "\n", "源码：", "\n", "//1.程序与处理包括加载头文件，定义常量和函数，进行初始化工作", "\n", "#", "undef", " UNICODE", "\n", "#", "undef", " _UNICODE", "\n", "#", "define", " _CRT_SECURE_NO_WARNINGS", "\n", "#", "include", " ", "<graphics.h>", "\n", "#", "include", " ", "<stack>", "\n", "#", "include", " ", "<vector>", "\n", "#", "include", " ", "<fstream>", "\n", "#", "include", "<stdio.h>", "//*music", "\n", "#", "include", "<windows.h>", "\n", "#", "include", "<mmsystem.h>", "\n", "#", "include", "<time.h>", "\n", "#", "include", "<conio.h>", "\n", "#", "pragma", " comment(lib,", "\"Winmm.lib\"", ")", "\n", "using", " std::stack;            ", "// 使用STL的栈的声明", "\n", "using", " std::vector;            ", "// 使用STL的数组容器封装动态大小数组的序列容器；", "\n\n\n", "// 游戏信息（每一行每一列宽度为32像素）", "\n", "#", "define", " WIN_WIDTH    900    ", "// 窗口的宽度(单位：像素)", "\n", "#", "define", " WIN_HEIGHT    500        ", "// 窗口的高度(单位：像素)", "\n", "// !!注：由于随机生成算法的原因，地图宽高只能为奇数https://zhuanlan.zhihu.com/p/30724817", "\n\n", "#", "define", " GAME_WIDTH    41        ", "// 地图的宽度(单位：块)", "\n", "#", "define", " GAME_HEIGHT    31    ", "// 地图的高度(单位：块)", "\n\n", "#", "define", " WALL        1            ", "// 墙壁的数字标记，用于判断", "\n", "#", "define", " GROUND        0            ", "// 地面的数字标记，用于判断", "\n", "#", "define", " FILLSTATE    2            ", "// 加油站的数字标记，用于判断", "\n", "#", "define", " ENDPOS        3            ", "// 终点的数字标记，用于判断", "\n\n", "#", "define", " MAXVIEW        8.0            ", "// 最大的视野", "\n", "#", "define", " MINVIEW        1            ", "// 最小的视野", "\n", "#", "define", " FILLNUM        10            ", "// 加油站的数量", "\n", "#", "define", " DARKTIME    12            ", "// 视野下降1图块所需的时间", "\n\n", "// 全局变量列表", "\n", "int", "        g_BlockSize;            ", "// 块大小", "\n", "int", "        g_GameMap[GAME_HEIGHT][GAME_WIDTH];    ", "// 地图(宽高单位为块)", "\nPOINT    g_EndPos;                ", "// 终点位置", "\nPOINT   g_PlayerPos;            ", "// 玩家在地图上的位置", "\nPOINT    g_CameraPos;            ", "// 摄像机(屏幕左上角)在地图上的位置", "\nIMAGE    g_MapImage;                ", "// 地图的图片(由于地图是固定的，在不改变缩放的情况下只需要绘制一次)", "\n", "double", "    g_ViewArray;            ", "// 视野", "\nUINT    g_BeginTime;            ", "// 游戏开始时的时间", "\nUINT    g_LastFillTime;            ", "// 上次为油灯加油的时间", "\n\n\n", "// 函数列表", "\n", "void", " ", "initGame", "()", ";                ", "// 初始化游戏", "\n", "void", " ", "endGame", "()", ";                    ", "// 结束游戏", "\n", "void", " ", "draw", "()", ";                    ", "// 绘制函数", "\n", "bool", " ", "upDate", "()", ";                    ", "// 数据更新函数", "\n", "void", " ", "absDelay", "(", "int", " delay)", ";        ", "// 绝对延迟", "\n\n", "bool", " ", "canMove", "(POINT pos)", ";        ", "// 判断某个位置是否可以移动", "\n", "void", " ", "computeCameraPos", "()", ";        ", "// 计算摄像机在地图上的位置", "\n", "void", " ", "rePaintMap", "()", ";                ", "// 重绘地图", "\n\n", "void", " ", "drawWall", "(POINT pos)", ";        ", "// 绘制墙壁图块的函数", "\n", "void", " ", "drawGround", "(POINT pos)", ";        ", "// 绘制地面图块的函数", "\n", "void", " ", "drawFillState", "(POINT pos)", ";    ", "// 绘制油灯图块的函数", "\n", "void", " ", "drawEndPos", "(POINT pos)", ";        ", "// 绘制终点", "\n", "void", " ", "drawPlayer", "()", ";                ", "// 绘制人物的函数", "\n", "void", " ", "drawView", "()", ";                ", "// 绘制视野", "\n", "void", " ", "bgm", "()", ";                     ", "//背景音乐", "\n", "void", " ", "jiaobu", "()", ";                  ", "//脚步声", "\n\n", "void", " ", "welcome", "()", ";\n", "void", " ", "ghost", "()", ";\n\n", "//滚轮控制放大缩小", "\n", "//2.主函数，main执行", "\n", "int", " ", "main", "()", "//主函数", "\n", "{\n    ", "welcome", "();\n    ", "initGame", "();\n        \n    ", "bgm", "();\n    \n    ", "while", " (", "1", ")\n    {\n        \n        ", "if", " (!", "upDate", "()) ", "break", ";    ", "// 更新", "\n        \n        ", "draw", "();                    ", "// 绘制", "\n        \n        ", "absDelay", "(", "16", ");            ", "// 绝对延迟 16 毫秒，控制每秒 60 帧", "\n        \n    }\n    \n    ", "endGame", "();\n    ", "return", " ", "0", ";\n}\n", "//3.初始化游戏，定义开局视野，随机生成地图，这个算法是先生成了一个点 ，根据这个点去找别的点的位置该模块还引用了其他函数进行初始化游戏：标记终点，确定终点位置，计算摄像机的位置，初始化人的位置，初始化画布等，在main中被引用", "\n", "void", " ", "initGame", "()", "// 初始化游戏", "\n", "{\n    g_BlockSize = ", "32", ";            ", "// 初始图块大小为 32 个像素,这个数越大，人物越小，需要走的路程更多", "\n    ", "srand", "(", "GetTickCount", "());        ", "// 标准库中初始化随机数生成的函数", "\n\n    ", "// 初始化间隔室", "\n    ", "for", " (", "int", " i = ", "0", "; i < GAME_HEIGHT; i++)\n    {\n        ", "for", " (", "int", " j = ", "0", "; j < GAME_WIDTH; j++)\n        {\n            ", "if", " (i % ", "2", " == ", "0", " || j % ", "2", " == ", "0", ")", "//奇数行奇数列设为墙壁    ", "\n                g_GameMap[i][j] = WALL;\n            ", "else", "\n                g_GameMap[i][j] = GROUND;", "//偶数行偶数列为地面", "\n        }\n    }\n\n    ", "// 随机生成地图(使用深度优先遍历:先输出当前结点，在根据一定的次序去递归查找孩子)", "\n    stack<POINT> stepStack;        ", "// 步骤栈", "\n    vector<POINT>  stepPoint;    ", "// 四周的点", "\n    POINT nowPoint;                ", "// 当前步的所在点", "\n    stepStack.", "push", "({ ", "1", ",", "1", " });    ", "// 写入初始点 (1,1) 作为起点", "\n    nowPoint = { ", "1", ",", "1", " };\n    g_GameMap[", "1", "][", "1", "] = ", "0xFFFF", ";    ", "// 标记这个点", "\n    ", "while", " (!stepStack.", "empty", "())    ", "// 只要步骤栈不空就继续循环", "\n    {\n        ", "// 得到四周的点", "\n        POINT tempPoint;\n        ", "for", " (", "int", " i = ", "-1", "; i <= ", "1", "; i += ", "2", ")\n        {\n            tempPoint = { nowPoint.x,nowPoint.y + i * ", "2", " };    ", "// 计算点", "\n            ", "// 判断坐标是否合法", "\n            ", "if", " (tempPoint.x >= ", "0", " && tempPoint.x <= GAME_WIDTH - ", "1", " &&\n                tempPoint.y >= ", "0", " && tempPoint.y <= GAME_HEIGHT - ", "1", " &&\n                g_GameMap[tempPoint.y][tempPoint.x] != ", "0xFFFF", ")", "//0xffff=-1", "\n            {\n                stepPoint.", "push_back", "(tempPoint);\n            }\n            tempPoint = { nowPoint.x + i * ", "2", " ,nowPoint.y };    ", "// 计算点", "\n            ", "// 判断坐标是否合法", "\n            ", "if", " (tempPoint.x >= ", "0", " && tempPoint.x <= GAME_WIDTH - ", "1", " &&\n                tempPoint.y >= ", "0", " && tempPoint.y <= GAME_HEIGHT - ", "1", " &&\n                g_GameMap[tempPoint.y][tempPoint.x] != ", "0xFFFF", ")\n            {\n                stepPoint.", "push_back", "(tempPoint);\n            }\n        }\n\n        ", "// 根据周围点的量选择操作", "\n        ", "if", " (stepPoint.", "empty", "())                ", "// 如果周围点都被遍历过了", "\n        {\n            stepStack.", "pop", "();                ", "// 出栈当前点", "\n            ", "if", " (!stepStack.", "empty", "())\n                nowPoint = stepStack.", "top", "();    ", "// 更新当前点", "\n        }\n        ", "else", "\n        {\n            stepStack.", "push", "(stepPoint[", "rand", "() % stepPoint.", "size", "()]);    ", "// 入栈当前点,rand()生成随机数", "\n            g_GameMap[(nowPoint.y + stepStack.", "top", "().y) / ", "2", "][(nowPoint.x + stepStack.", "top", "().x) / ", "2", "] = ", "0", ";    ", "// 打通墙壁", "\n            nowPoint = stepStack.", "top", "();        ", "// 更新当前点", "\n            g_GameMap[nowPoint.y][nowPoint.x] = ", "0xFFFF", ";                ", "// 标记当前点", "\n        }\n        stepPoint.", "clear", "();                    ", "// 清空周围点以便下一次循环", "\n    }\n    \n    ", "// 清洗标记点", "\n    ", "for", " (", "int", " i = ", "0", "; i < GAME_HEIGHT; i++)\n    {\n        ", "for", " (", "int", " j = ", "0", "; j < GAME_WIDTH; j++)\n        {\n            ", "if", " (g_GameMap[i][j] == ", "0xFFFF", ")\n                g_GameMap[i][j] = ", "0", ";\n        }\n    }\n\n    ", "// 随机生成加油站的位置", "\n    ", "for", " (", "int", " i = ", "0", "; i < FILLNUM; i++)\n    {\n        POINT fillPoint = { ", "rand", "() % GAME_WIDTH,", "rand", "() % GAME_HEIGHT };\n        ", "// 保证在空地生成加油站", "\n        ", "while", " (g_GameMap[fillPoint.y][fillPoint.x] != GROUND)\n            fillPoint = { ", "rand", "() % GAME_WIDTH,", "rand", "() % GAME_HEIGHT };\n        ", "// 标记油灯", "\n        g_GameMap[fillPoint.y][fillPoint.x] = FILLSTATE;\n    }\n    \n    g_GameMap[GAME_HEIGHT - ", "2", "][GAME_WIDTH - ", "2", "] = ENDPOS;        ", "// 标记终点", "\n    g_EndPos = { GAME_WIDTH - ", "2", ",GAME_HEIGHT - ", "2", " };                ", "// 确定终点位置", "\n    g_ViewArray = MAXVIEW;                ", "// 初始视野是最大的", "\n    g_BeginTime = ", "GetTickCount", "();        ", "// 开始计时", "\n    g_LastFillTime = ", "GetTickCount", "();    ", "// 油灯加油的时间", "\n    ", "rePaintMap", "();                        ", "// 绘制地图", "\n    g_PlayerPos = { g_BlockSize * ", "3", " / ", "2", ",g_BlockSize * ", "3", " / ", "2", " };    ", "// 初始化人的位置", "\n    ", "computeCameraPos", "();                    ", "// 计算摄像机的位置", "\n    ", "initgraph", "(WIN_WIDTH, WIN_HEIGHT);    ", "// 初始化画布", "\n    ", "setbkmode", "(TRANSPARENT);                ", "// 设置背景为透明", "\n    ", "BeginBatchDraw", "();                    ", "// 开始缓冲绘制", "\n    \n}\n\n\n", "//4. 该模块把绘制视野，人物，时间融合到一个draw里面，在main函数中被引用", "\n\n", "void", " ", "draw", "()", "//绘图", "\n", "{\n    \n    ", "// 清空设备", "\n    ", "cleardevice", "();\n    ", "// 绘制视野", "\n    ", "drawView", "();\n    ", "// 绘制人", "\n    ", "drawPlayer", "();\n    ", "// 绘制时间", "\n    \n    TCHAR timeStr[", "256", "];\n    ", "int", " loseTime = ", "GetTickCount", "() - g_BeginTime;    ", "// 计算流失的时间", "\n    _stprintf_s(timeStr, _T(", "\"游戏时间:%02d:%02d\"", "), loseTime / ", "1000", " / ", "60", ", loseTime / ", "1000", " % ", "60", ");\n    ", "settextcolor", "(", "RGB", "(", "140", ", ", "140", ", ", "140", "));\n    ", "outtextxy", "((WIN_WIDTH - ", "textwidth", "(timeStr)) / ", "2", ", ", "3", ", timeStr);\n    \n\n    ", "FlushBatchDraw", "();    ", "// 刷新屏幕", "\n}\n", "//5.update意为更新，这里的函数用来计算人物移动合法性和路过油灯视野更新，以及鼠标滚轮放大缩小的重新定位", "\n", "bool", " ", "upDate", "()", "//计算，更新位置", "\n", "{\n    POINT nextPos = g_PlayerPos;        ", "// 下一个位置", "\n\n    ", "// 计算下一个位置", "\n    ", "if", "         (", "GetKeyState", "(VK_UP) & ", "0x8000", ")    nextPos.y -= ", "2", ";", "//GetKeyState(VK_UP) & 0x8000)判断是否有按↑键", "\n    \n    \n    ", "if", " (", "GetKeyState", "(VK_DOWN) & ", "0x8000", ")    nextPos.y += ", "2", ";", "//GetKeyState(VK_UP) & 0x8000)判断是否有按↓键", "\n    \n    ", "if", " (", "GetKeyState", "(VK_LEFT) & ", "0x8000", ")    nextPos.x -= ", "2", ";", "//GetKeyState(VK_UP) & 0x8000)判断是否有按←键", "\n    \n    ", "if", " (", "GetKeyState", "(VK_RIGHT) & ", "0x8000", ")    nextPos.x += ", "2", ";", "//GetKeyState(VK_UP) & 0x8000)判断是否有按→键", "\n    \n\n    ", "// 如果下一个位置不合法", "\n    ", "if", " (!", "canMove", "(nextPos))\n    {\n        ", "if", " (", "canMove", "({ g_PlayerPos.x, nextPos.y }))        ", "// y 轴移动合法", "\n            nextPos = { g_PlayerPos.x, nextPos.y };\n        ", "else", " ", "if", " (", "canMove", "({ nextPos.x, g_PlayerPos.y }))    ", "// x 轴移动合法", "\n            nextPos = { nextPos.x, g_PlayerPos.y };\n        ", "else", "                                            ", "// 都不合法", "\n            nextPos = g_PlayerPos;\n    }\n\n    ", "// 如果是油灯则更新时间", "\n    ", "if", " (g_GameMap[nextPos.y / g_BlockSize][nextPos.x / g_BlockSize] == FILLSTATE)\n        g_LastFillTime = ", "GetTickCount", "();\n    ", "// 如果是终点则通关", "\n    ", "else", " ", "if", " (g_GameMap[nextPos.y / g_BlockSize][nextPos.x / g_BlockSize] == ENDPOS)\n    {\n        ", "outtextxy", "(WIN_WIDTH / ", "2", " - ", "40", ", WIN_HEIGHT / ", "2", " - ", "12", ", _T(", "\"恭喜过关！\"", "));", "//字体大小", "\n        ", "FlushBatchDraw", "();\n        ", "Sleep", "(", "5000", ");\n        ", "return", " ", "false", ";\n    }\n    g_PlayerPos = nextPos;                        ", "// 更新位置", "\n    ", "computeCameraPos", "();                            ", "// 计算摄像机的位置", "\n\n    ", "// 根据时间缩减视野", "\n    ", "static", " ", "unsigned", " ", "int", " lastTime = ", "GetTickCount", "();\n    ", "int", " loseTime = ", "GetTickCount", "() - g_LastFillTime;            ", "// 计算流失的时间", "\n    g_ViewArray = MAXVIEW - loseTime / ", "1000.0", " / DARKTIME;    ", "// 每一段时间油灯的照明力会下降一个图块", "\n    ", "if", " (g_ViewArray < MINVIEW) g_ViewArray = MINVIEW;\n\n    ", "// 处理鼠标消息", "\n    MOUSEMSG mouseMsg;                            ", "// 鼠标信息", "\n    ", "int", " lastBlockSize = g_BlockSize;            ", "// 保存原本的大小", "\n    ", "while", " (", "MouseHit", "())\n    {\n        mouseMsg = ", "GetMouseMsg", "();\n        ", "if", " (mouseMsg.uMsg = WM_MOUSEWHEEL)        ", "// 滚轮消息", "\n        {\n            g_BlockSize += mouseMsg.wheel / ", "120", ";\n        }\n    }\n\n    ", "// 如果没有滚轮消息就退出", "\n    ", "if", " (lastBlockSize == g_BlockSize) ", "return", " ", "true", ";\n    ", "// 处理滚轮消息", "\n    ", "if", " (g_BlockSize >= ", "10", " && g_BlockSize <= ", "50", ")    ", "// 块大小没有达到极限值", "\n    {\n        ", "// 保证缩放后的地图不会比窗口小", "\n        ", "if", " (GAME_WIDTH * g_BlockSize < WIN_WIDTH ||\n            GAME_HEIGHT * g_BlockSize < WIN_HEIGHT)\n            g_BlockSize = lastBlockSize;\n        ", "rePaintMap", "();                            ", "// 重绘地图", "\n        ", "// 重新计算玩家在地图上的位置", "\n        POINT mapPos = { g_PlayerPos.x / lastBlockSize,g_PlayerPos.y / lastBlockSize };    ", "// 计算在地图上的位置", "\n        g_PlayerPos.x = mapPos.x * g_BlockSize + g_BlockSize / ", "2", ";    ", "// 计算映射后的位置", "\n        g_PlayerPos.y = mapPos.y * g_BlockSize + g_BlockSize / ", "2", ";    ", "// 计算映射后的位置", "\n        ", "computeCameraPos", "();                        ", "// 重新计算摄像机位置", "\n    }\n    ", "// 保证图块不会过大和过小", "\n    ", "if", " (g_BlockSize < ", "10", ") g_BlockSize = ", "10", ";\n    ", "if", " (g_BlockSize > ", "50", ") g_BlockSize = ", "50", ";\n\n    ", "return", " ", "true", ";\n}\n", "//6.absdelay和帧率有关，人物移速也有关", "\n", "void", " ", "absDelay", "(", "int", " delay)", "// 绝对延迟指每隔指定的时间（参数：滴答值），执行一次调用vTaskDelayUntil()函数的任务。//和帧率有关", "\n", "{\n    ", "static", " ", "int", " curtime = ", "GetTickCount", "();", "//GetTickCount是一种函数。GetTickCount返回（retrieve）从操作系统启动所经过（elapsed）的毫秒数，它的返回值是DWORD。", "\n    ", "static", " ", "int", " pretime = ", "GetTickCount", "();\n    ", "while", " (curtime - pretime < delay)\n    {\n        curtime = ", "GetTickCount", "();\n        ", "Sleep", "(", "1", ");\n    }\n    pretime = curtime;\n}\n", "//7. //判断地图合法模块//在上面update模块中引用", "\n\n", "bool", " ", "canMove", "(POINT pos)", "//判断合法模块//在上面update模块中引用", "\n", "{\n    ", "// 只要外接矩形的四个顶点不在墙壁内就必定合法", "\n    ", "return", "    g_GameMap[(pos.y - ", "3", ") / g_BlockSize][(pos.x - ", "3", ") / g_BlockSize] != WALL &&\n        g_GameMap[(pos.y + ", "3", ") / g_BlockSize][(pos.x + ", "3", ") / g_BlockSize] != WALL &&\n        g_GameMap[(pos.y - ", "3", ") / g_BlockSize][(pos.x + ", "3", ") / g_BlockSize] != WALL &&\n        g_GameMap[(pos.y + ", "3", ") / g_BlockSize][(pos.x - ", "3", ") / g_BlockSize] != WALL;\n}\n", "//8.计算摄像机位置和防止摄像机越界在上面的bool upDate()被引用", "\n", "void", " ", "computeCameraPos", "()", "//判断合法模块//在上面的bool upDate()被引用", "\n", "{\n    ", "// 以人物位置为中心计算摄像机的理论位置", "\n    g_CameraPos.x = g_PlayerPos.x - WIN_WIDTH / ", "2", ";\n    g_CameraPos.y = g_PlayerPos.y - WIN_HEIGHT / ", "2", ";\n    \n    ", "// 防止摄像机越界", "\n    ", "if", " (g_CameraPos.x < ", "0", ")                                        g_CameraPos.x = ", "0", ";", "//摄像机位置的最左端", "\n    ", "if", " (g_CameraPos.y < ", "0", ")                                        g_CameraPos.y = ", "0", ";", "//摄像机位置的最上端", "\n    ", "if", " (g_CameraPos.x > GAME_WIDTH * g_BlockSize - WIN_WIDTH)    g_CameraPos.x = GAME_WIDTH * g_BlockSize - WIN_WIDTH;", "//摄像机位置的最右端", "\n    ", "if", " (g_CameraPos.y > GAME_HEIGHT * g_BlockSize - WIN_HEIGHT)    g_CameraPos.y = GAME_HEIGHT * g_BlockSize - WIN_HEIGHT;", "//摄像机位置的最下端", "\n}\n", "//9. 地图元素绘制如墙壁，加油站，终点，地面", "\n", "void", " ", "rePaintMap", "()", "//地图元素绘制模块", "\n", "{\n    g_MapImage.", "Resize", "(GAME_WIDTH * g_BlockSize, GAME_HEIGHT * g_BlockSize);    ", "// 重置地图图片大小", "\n    ", "SetWorkingImage", "(&g_MapImage);                                ", "// 设置地图图片为当前工作图片", "\n    ", "for", " (", "int", " i = ", "0", "; i < GAME_HEIGHT; i++)\n    {\n        ", "for", " (", "int", " j = ", "0", "; j < GAME_WIDTH; j++)\n        {\n            ", "switch", " (g_GameMap[i][j])\n            {\n            ", "case", " WALL:\n                ", "drawWall", "({ j * g_BlockSize,i * g_BlockSize });        ", "// 绘制墙壁", "\n                ", "break", ";\n            ", "case", " FILLSTATE:\n                ", "drawFillState", "({ j * g_BlockSize,i * g_BlockSize });    ", "// 绘制加油站", "\n                ", "break", ";\n            ", "case", " GROUND:\n                ", "drawGround", "({ j * g_BlockSize,i * g_BlockSize });    ", "// 绘制地面", "\n                ", "break", ";\n            ", "case", " ENDPOS:\n                ", "drawEndPos", "({ j * g_BlockSize,i * g_BlockSize });   ", "//终点", "\n                ", "break", ";\n            }\n        }\n    }\n    ", "SetWorkingImage", "();    ", "// 复位工作图片", "\n}\n", "//10.如下在上面的rePaintMap()被引用", "\n\n\n", "void", " ", "drawWall", "(POINT pos)", "//地图绘制模块//墙壁初始化// 绘制墙壁图块的函数//在上面的rePaintMap()被引用", "\n", "{\n    ", "setfillcolor", "(", "RGB", "(", "166", ", ", "210", ", ", "19", "));", "//填充颜色", "\n    ", "solidrectangle", "(pos.x, pos.y, pos.x + g_BlockSize, pos.y + g_BlockSize);", "//solidrectangle用于画无边框的填充矩形", "\n}\n", "//11.如下，在上面的rePaintMap()被引用", "\n\n", "void", " ", "drawGround", "(POINT pos)", "//地图绘制模块// 绘制地面图块的函数//在上面的rePaintMap()被引用", "\n", "{\n    ", "setfillcolor", "(", "RGB", "(", "255", ", ", "255", ", ", "255", "));\n    ", "solidrectangle", "(pos.x, pos.y, pos.x + g_BlockSize, pos.y + g_BlockSize);\n}\n", "//12. 在上面的rePaintMap()被引用", "\n", "void", " ", "drawFillState", "(POINT pos)", "//在上面的rePaintMap()被引用", "\n", "{\n    ", "drawGround", "(pos);\n\n    ", "// 绘制圆角矩形", "\n    pos.x += g_BlockSize / ", "5", ";\n    pos.y += g_BlockSize / ", "5", ";\n    ", "setfillcolor", "(", "RGB", "(", "252", ", ", "213", ", ", "11", "));\n    ", "solidroundrect", "(pos.x, pos.y, pos.x + g_BlockSize / ", "5", " * ", "3", ", pos.y + g_BlockSize / ", "5", " * ", "3", ", g_BlockSize / ", "8", ", g_BlockSize / ", "8", ");\n}\n\n", "void", " ", "drawEndPos", "(POINT pos)", "//终点//在上面的rePaintMap()被引用", "\n", "{\n    ", "drawGround", "(pos);\n\n    ", "// 绘制圆角矩形", "\n    pos.x += g_BlockSize / ", "5", ";\n    pos.y += g_BlockSize / ", "5", ";\n    ", "setfillcolor", "(", "RGB", "(", "87", ", ", "116", ", ", "48", "));\n    ", "solidroundrect", "(pos.x, pos.y, pos.x + g_BlockSize / ", "5", " * ", "3", ", pos.y + g_BlockSize / ", "5", " * ", "3", ", g_BlockSize / ", "8", ", g_BlockSize / ", "8", ");\n}\n\n", "void", " ", "drawPlayer", "()", "//在上面的draw中引用", "\n", "{\n    ", "setfillcolor", "(", "RGB", "(", "252", ", ", "213", ", ", "11", "));\n    ", "solidcircle", "(g_PlayerPos.x - g_CameraPos.x, g_PlayerPos.y - g_CameraPos.y, ", "3", ");\n    \n}\n\n", "void", " ", "drawView", "()", "//在上面的draw中引用", "\n", "{\n    ", "// 锁定视野", "\n    HRGN viewArr;\n    ", "int", " r = ", "int", "(g_BlockSize * g_ViewArray + ", "0.5", ");    ", "// 计算视野半径", "\n    POINT orgin = g_PlayerPos;\n    orgin.x -= g_CameraPos.x;                        ", "// 计算在屏幕上的位置", "\n    orgin.y -= g_CameraPos.y;                        ", "// 计算在屏幕上的位置", "\n    viewArr = ", "CreateEllipticRgn", "(orgin.x - r, orgin.y - r, orgin.x + r, orgin.y + r);    ", "// 创建一个圆形的区域", "\n    ", "setcliprgn", "(viewArr);                            ", "// 锁定区域", "\n\n    ", "// 绘制地图", "\n    ", "putimage", "(", "0", ", ", "0", ", WIN_WIDTH, WIN_HEIGHT, &g_MapImage, g_CameraPos.x, g_CameraPos.y);\n\n    ", "// 删除区域", "\n    ", "DeleteObject", "(viewArr);\n    ", "// 消除区域", "\n    ", "setcliprgn", "(", "NULL", ");\n}\n\n", "void", " ", "endGame", "()", "// 结束游戏", "\n", "{\n    ", "EndBatchDraw", "();                        ", "// 这个函数用于结束批量绘制，并执行未完成的绘制任务，即结束缓冲绘制", "\n    ", "closegraph", "();                        ", "// 关闭画布", "\n}\n", "void", " ", "bgm", "()", "\n", "{\n    ", "PlaySound", "(", "TEXT", "(", "\"bgm.wav\"", "), ", "NULL", ", SND_FILENAME | SND_ASYNC | SND_LOOP);\n}\n", "void", " ", "jiaobu", "()", "\n", "{\n    ", "PlaySound", "(", "TEXT", "(", "\"jiaobu.wav\"", "), SND_SYNC, SND_FILENAME | SND_ASYNC | ", "NULL", ");\n}\n", "void", " ", "gotoxy", "(", "int", " x, ", "int", " y)", " ", "{\n    COORD pos = { x,y };\n    HANDLE hOut = ", "GetStdHandle", "(STD_OUTPUT_HANDLE);", "// 获取标准输出设备句柄", "\n    ", "SetConsoleCursorPosition", "(hOut, pos);", "//两个参数分别是指定哪个窗体，具体位置", "\n}\n\n", "void", " ", "welcome", "()", " ", "{\n    ", "gotoxy", "(", "15", ", ", "6", ");  ", "printf", "(", "\"欢迎来到  熄灯迷宫小游戏 ! \\n\"", ");\n    ", "gotoxy", "(", "15", ", ", "8", ");  ", "printf", "(", "\"  玩法介绍：                                         \\n\"", ");\n    ", "gotoxy", "(", "15", ", ", "10", "); ", "printf", "(", "\"    本游戏使用方向键操控，和传统迷宫一样需要迅速找到出口，但人物视野会逐渐降低              \\n\"", ");\n    ", "gotoxy", "(", "15", ", ", "12", "); ", "printf", "(", "\"                            路上黄色方块即为“加油站”踩到可以获得最大视野，绿色方块即为终点                                     \\n\"", ");\n    ", "gotoxy", "(", "15", ", ", "20", "); ", "printf", "(", "\"                                                                                        祝你玩得开心\\n\\n\\n\\n\\n\\n\"", ");\n    ", "system", "(", "\"pause\"", "); ", "system", "(", "\"cls\"", ");", "//清除屏幕", "\n    \n}\n", "void", " ", "ghost", "()", "\n", "{\n    ", "int", " ball_x, ball_y;        ", "//小球位置坐标", "\n    ", "int", " ball_vx = ", "1", ";            ", "//小球X轴与Y轴的速度", "\n    ", "int", " ball_vy = ", "1", ";\n    ", "//随机生成小球初始位置", "\n    ", "srand", "((", "unsigned", ")", "time", "(", "NULL", "));\n    ball_x = ", "rand", "() % ", "860", " + ", "20", ";\n    ball_y = ", "rand", "() % ", "460", " + ", "20", ";\n    ", "initgraph", "(", "900", ", ", "500", ");", "//900+500", "\n    \n    ", "while", " (", "1", ")\n    {\n        ", "setcolor", "(YELLOW);\n        ", "setfillcolor", "(GREEN);\n        ", "fillcircle", "(ball_x, ball_y, ", "20", ");\n        ", "Sleep", "(", "2", ");\n        ", "FlushBatchDraw", "();        ", "//将之前的绘图输出，这个函数用于执行未完成的绘图人物。", "\n        \n        ", "setcolor", "(WHITE);\n        ", "setfillcolor", "(WHITE);\n        \n        ", "fillcircle", "(ball_x, ball_y, ", "20", ");\n        ball_x = ball_x + ball_vx;\n        ball_y = ball_y + ball_vy;\n        ", "//当小球表面接触墙壁时发生碰撞反弹", "\n        ", "if", " (ball_x <= ", "20", " || ball_x >= ", "900", ")\n            ball_vx = -ball_vx;\n        ", "if", " (ball_y <= ", "20", " || ball_y >= ", "500", ")\n            ball_vy = -ball_vy;\n        \n    }\n    ", "EndBatchDraw", "();        ", "//结束批量绘制，并执行未完成的绘图任务", "\n    ", "closegraph", "();\n    \n}\n\n\n\n\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;这有个类似的问题, 你可以参考下: &lt;a href=\"https://ask.csdn.net/questions/7679883\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;https://ask.csdn.net/questions/7679883&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;我还给你找了一篇非常好的博客&amp;#xff0c;你可以看看是否有帮助&amp;#xff0c;链接&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/qq_52137710/article/details/110182809\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;c语言删除数组中的元素&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "算法与数字", "Question": ["c语言如何进行数组中元素个数的计数", ["这是我在做一个名叫 组成最大数 的程序时候想提的问题：如何对输入的数组中的数字个数进行计数", "\n", "以下是我同学教我的方法，但我不怎么懂", "\n", "\n", "#include<stdio.h>      ", "\nint main()      \n{      \n    int i,", "j", "=0,a[100000],m,n,s,b;      \n    ", "for", "(", "i", "=0;i<=100000;i++)      \n    {      \n        ", "m", "=getchar();      \n        ", "if", "(", "m", "=='\\n')      \n            break;      \n        a[i]=m-", "'0'", ";      \n        j++;      \n    }      \n    ", "for", "(", "i", "=0;i<j-1;i++)      \n    {      \n        ", "s", "=i;      \n        ", "for", "(", "n", "=i+1;n<j;n++)      \n        {      \n            ", "if", "(a[s]<a[n])      \n                ", "s", "=n;      \n        }      \n        ", "b", "=a[i];      \n        a[i]=a[s];      \n        a[s]=b;      \n    }      \n    ", "for", "(", "i", "=0;i<j;i++)      \n    {      \n        printf(", "\"%d\"", ",a[i]);      \n        ", "if", "(", "i", "==j-1)      \n            printf(", "\"\\n\"", ");      \n    }      \n}  \n\n\n", "\n", "输入42351之后 就会输出54321，用了冒泡排序，但是那个j（数组中元素个数）有其他方法来计算吗？这个我真的不懂", "\n", "大家有没有什么更简单易懂的方法，让我可以替换掉那个求 j 的部分？"]], "Tag": "算法设计"}
{"Answer": "**row 创建了一级指针地址内存，2级指针地址不知道里面多少个一级指针，定义为*row[10]，可以这么用", "Konwledge_Point": "算法与数字", "Question": ["一道编程题，自己做的结果对，但是就是通不过牛客网上的编译器，不知为什么？", ["洗牌在生活中十分常见，现在需要写一个程序模拟洗牌的过程。 现在需要洗2n张牌，从上到下依次是第1张，第2张，第3张一直到第2n张。", "\n首先，我们把这2n张牌分成两堆，左手拿着第1张到第n张（上半堆），右手拿着第n+1张到第2n张（下半堆）。接着就开始洗牌的过程，", "\n先放下右手的最后一张牌，再放下左手的最后一张牌，接着放下右手的倒数第二张牌，再放下左手的倒数第二张牌，", "\n直到最后放下左手的第一张牌。接着把牌合并起来就可以了。 例如有6张牌，最开始牌的序列是1,2,3,4,5,6。首先分成两组，", "\n左手拿着1,2,3；右手拿着4,5,6。在洗牌过程中按顺序放下了6,3,5,2,4,1。把这六张牌再次合成一组牌之后，", "\n我们按照从上往下的顺序看这组牌，就变成了序列1,4,2,5,3,6。 现在给出一个原始牌组，请输出这副牌洗牌k次之后从上往下的序列。", "\n输入描述:", "\n第一行一个数T(T ≤ 100)，表示数据组数。对于每组数据，第一行两个数n,k(1 ≤ n,k ≤ 100)，", "\n接下来一行有2n个数a1,a2,...,a2n(1 ≤ ai ≤ 1000000000)。表示原始牌组从上到下的序列。", "\n\n", "输出描述:", "\n对于每组数据，输出一行，最终的序列。数字之间用空格隔开，不要在行末输出多余的空格。", "\n\n", "输入例子:", "\n3", "\n3 1", "\n1 2 3 4 5 6", "\n3 2", "\n1 2 3 4 5 6", "\n2 2", "\n1 1 1 1", "\n\n", "输出例子:", "\n1 4 2 5 3 6", "\n1 5 4 3 2 6", "\n1 1 1 1", "\n\n", "#include ", "\n#include ", "\n\n", "void Shuffle()", "\n{", "\n    //输入要进行洗牌的组数", "\n    int groups;", "\n    scanf(\"%d\", &groups);", "\n\n", "int i, j, k;                        //循环变量\nint g;                              //定义了循环变量g，遍历每组数据\nint n;                              //定义了一堆牌数量变量n，共2n张牌\nint times;                          //定义了要进行洗牌的次数\n\n//动态分配结果输出数组的行\nint **row = (int**)malloc(sizeof(int*)*groups);\nfor (g = 0; g < groups; g++)\n{\n    scanf(\"%d\", &n);        //输入要进行洗牌的n张牌，共2n张牌\n    scanf(\"%d\", &times);    //输入要进行洗牌的次数\n\n    //动态分配结果输出数组的列\n    row[g] = (int *)malloc(sizeof(int) * 2 * n);\n\n    //为要洗的牌初始化\n    int value;\n    int *cards = (int *)malloc(sizeof(int) * 2 * n);\n    for (i = 0; i < 2 * n; i++)\n    {\n        scanf(\"%d\", &value);\n        cards[i] = value;\n    }\n\n    int *tmp_array = (int *)malloc(sizeof(int) * 2 * n);    //临时存储结果数组\n\n    //按照输入的洗牌次数进行洗牌\n    for (j = 0; j < times; j++)\n    {\n        int LPos = 0, RPos = n;                             //两堆牌的起始点\n        int LeftEnd = n - 1, RightEnd = 2 * n - 1;          //两堆牌的终点\n\n        k = 0;\n        while (LPos <=LeftEnd && RPos<= RightEnd)\n        {\n            tmp_array[k++] = cards[LPos++];\n            tmp_array[k++] = cards[RPos++];\n        }\n\n        //cards临时结果\n        for (i = 0; i < 2 * n; i++)\n            cards[i] = tmp_array[i];\n    }\n\n    //保存结果\n    for (i = 0; i < 2 * n; i++)\n        row[g][i] = tmp_array[i]; \n\n    //释放空间\n    free(cards);\n    free(tmp_array);\n}\n\n//输出结果\nfor (i = 0; i < groups; i++)\n{\n    j = 0;\n    while (row[i][j]>0)             //这里是我处理内存溢出bug的方法，比较简陋\n    {\n        printf(\"%d \", row[i][j]);\n        j++;\n    }\n    printf(\"\\n\");\n}\n", "\n\n", "}", "\n\n", "int main()", "\n{", "\n      Shuffle();", "\n    return 0;", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;else if (a &amp;#61;&amp;#61; 2) {&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        for (i &amp;#61; 0; i &amp;lt;10; i&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            cin &amp;gt;&amp;gt; y;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            num2[i] &amp;#61; y;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        Sort(num1);&lt;/span&gt;&lt;br /&gt; 这里有个错误&amp;#xff0c;应该num2&lt;br /&gt;而且j应该要判断小于10-1&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["函数重载排序问题无法输出结果是为什么呢？", ["\n#", "include", "<iostream>\nusing namespace std;\n    ", "int", " ", "Sort(", "int", " ", "num", "[10])", ";\n    ", "float", " ", "Sort(", "float", " ", "num", "[10])", ";\n\n", "int", " main", "()", "\n{\n    ", "int", " num1", "[", "11", "]", ",x;\n    ", "float", " num2", "[", "11", "]", ",y;\n    ", "int", " i;\n    cout << ", "\"请选择需要输入数字的类型\"", " << endl;    \n    cout << ", "\"整数输入1 实数输入2\"", " << endl;\n    ", "int", " a;\n    cin >> a;\n    cout << ", "\"请输入需要排序的数字\"", " << endl;\n    ", "if", " (a", " == ", "1", ") {        \n        ", "for", " (i = ", "0", "; i <", "10", "; i++)\n        {\n            cin >> x;\n            num1", "[", "i", "]", " = x;\n        }\n        ", "Sort(", "num1", ")", ";\n\n    }\n    ", "else", " ", "if", " (a", " == ", "2", ") {\n        ", "for", " (i = ", "0", "; i <", "10", "; i++)\n        {\n            cin >> y;\n            num2", "[", "i", "]", " = y;\n        }\n        ", "Sort(", "num1", ")", ";\n\n    }\n    return ", "0", ";\n\n}\n", "int", " ", "Sort(", "int", " ", "num", "[10])", "\n{\n    ", "int", " i, j, temp;\n    ", "for", " (i = ", "0", "; i < ", "10", "; i++) {\n        ", "for", " (j = i;j < ", "10", "; j++)\n        {\n            ", "if", " (num", "[", "j", "]", " > num", "[", "j", " + ", "1", "]", ")\n            {\n                temp = num", "[", "j", "]", ";\n                num", "[", "j", "]", " = num", "[", "j", " + ", "1", "]", ";\n                num", "[", "j", " + ", "1", "]", " = temp;\n            }\n        }\n    }\n    ", "for", " (i = ", "0", ", i < ", "10", "; i++;)\n        cout << num", "[", "i", "]", "<<", "\" \"", ";\n    return ", "0", ";\n    }\n\n", "float", " ", "Sort(", "float", " ", "num", "[10])", "\n{\n    ", "int", " i, j;\n     ", "float", " temp;\n    ", "for", " (i = ", "0", "; i < ", "10", "; i++) {\n        ", "for", " (j = i; j < ", "10", "; j++)\n        {\n            ", "if", " (num", "[", "j", "]", " > num", "[", "j", " + ", "1", "]", ")\n            {\n                temp = num", "[", "j", "]", ";\n                num", "[", "j", "]", " = num", "[", "j", " + ", "1", "]", ";\n                num", "[", "j", " + ", "1", "]", " = temp;\n            }\n        }\n    }\n    ", "for", " (i = ", "0", ", i < ", "10", "; i++;)\n        cout << num", "[", "i", "]", " << ", "\" \"", ";\n    return ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;tree[i]代表第i棵树的高度&lt;br /&gt;假设dp[i][j][0] 代表[i&amp;#xff0c;j]区间最大值&amp;#xff0c;dp[i][j][1]代表[i&amp;#xff0c;j]区间最小值&lt;br /&gt;可知dp[i][j][0] &amp;#61; dp[i][j][1] &amp;#61; tree[i]  当i&amp;#61;j时&lt;br /&gt;dp[i][j][0]&amp;#61; Max(tree[j]&amp;#xff0c;dp[i][j-1][0])  j&amp;gt;i&lt;br /&gt;dp[i][j][1]&amp;#61; Min(tree[j]&amp;#xff0c;dp[i][j-1][1])  j&amp;gt;i&lt;br /&gt;最后求解[x&amp;#xff0c;y]区间&amp;#xff0c;为dp[x][y][0] - dp[x][y][1] &lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["范围内最高最矮树高度差问题", ["问题：N棵树排成一排。考虑到每棵树的高度H，小明被要求回答M个问题。每个问题包含两个数字L和R，询问间隔[L，R]中最高树和最短树之间的高度差。帮助小明解决这个问题", "\n", "输入的第一行包含两个整数N和M，表示树的数量和问题的数量", "以下N行中的每一行都包含一个整数Hi，表示每棵树的高度。以下M行中的每一行都包含两个整数Li和Ri，表示每个问题的间隔。", "输出：从第1行到第m行，每行包含一个整数，表示从第Lth树到第Rth树的最高树和最短树之间的高度差。", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;递归快排&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;PartQulickSort1(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;)&lt;/span&gt;\n{\n \n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; mid &amp;#61; &lt;span class=\"hljs-constructor\"&gt;GetMid(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//取中&lt;/span&gt;\n    &lt;span class=\"hljs-constructor\"&gt;Swap(&amp;amp;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;], &amp;amp;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;])&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//将中间的数与最左右的数交换下//swap写的交换函数&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; keyi &amp;#61; left;&lt;span class=\"hljs-comment\"&gt;//得到基数的位置&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (left &amp;lt; right)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (left&amp;lt;right&amp;amp;&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;right&lt;/span&gt;]&lt;/span&gt; &amp;gt;&amp;#61; a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;keyi&lt;/span&gt;]&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//先从右边找到较小的值&lt;/span&gt;\n        {\n            right--;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (left&amp;lt;right&amp;amp;&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;left&lt;/span&gt;]&lt;/span&gt; &amp;lt;&amp;#61; a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;keyi&lt;/span&gt;]&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//再从左边找最大的值&lt;/span&gt;\n        {\n            left&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-constructor\"&gt;Swap(&amp;amp;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;], &amp;amp;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;])&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//进行交换&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-constructor\"&gt;Swap(&amp;amp;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;], &amp;amp;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;keyi&lt;/span&gt;])&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//最后将right或者left位置的值与基数交换&lt;/span&gt;\n    return right;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["用C语言补充代码，能够输出所需结果", ["实现递归快速排序。快速排序使用配分函数和交换函数。这些已经为您实现了。你的任务是实现函数r ecursive_quicksort().TODO在第48行上，该功能从第49行开始。实现是直接的，您先 已经实现了它，你可以转到find_mode_quicksort（）函数，注释出第一个快速排序调用和取消注释recursive_quicksort（）函数。接下来，实现计数排序。你可以在第96行找到TODO，这个函数从第98行开始。在这里，您将一步一步地找到如何实现该函数。注意，在这里也不需要实现查找模式的逻辑，而只需要实现计数排序部分。一旦你实现了计数s 排序后，您可以进入主函数，取消注释启动第二个时钟的块，调用计数排序函数，停止时钟，并打印结果。计数排序不会改变初始数组，因此首先调用它，然后调用快速排序是安全的。快速排序排序到位，所以它改变了顺序 初始数组本身中的元素的r。一旦实现了计数排序，请再次编译并运行代码。比较执行时间 用两种不同的方法来排序，然后找到模式。最后，实现迭代快速排序。你将在第30行找到TODO，算法从第32行开始。可以“硬编码”一个更小的数字输入数组，并包括适当的打印文件来调试您自己的解决方案。若要打印数组的内容，请不要使用大型数组。", "\n", "\n", "\n", "\n\n", "#include <stdio.h>", "\n", "#include <stdlib.h>", "\n", "#include <time.h>", "\n\n//    Swap function to swap two elements of an", " array\n", "//    Used by pratition\nvoid swap(int* a, int* b) {\n   ", " int ", "temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\n//    Partition used by both iterative", " and ", "recursive quicksort", "\nint ", "partition(int arr[],", " int ", "low,", " int ", "high) {\n   ", " int ", "pivot = arr[high];\n   ", " int ", "i = low - 1;\n    for (int j = low; j <= high - 1; j++) {\n       ", " if ", "(arr[j] < pivot) {\n            i++;\n            swap(&arr[i], &arr[high]);\n        }\n    }\n    swap(&arr[i+1], &arr[high]);\n   ", " return ", "i + 1;\n}\n\n//    Iterative quicksort\n//    TODO!!    Implement this function\n//            Follow instructions in the comments below\nvoid iterative_quicksort(int arr[],", " int ", "low,", " int ", "high) {\n    //    Initialize the ", "\"stack data structure\"", " to simulate recursive calls\n    //    Note the size of the array.\n    \n    //    Set ", "\"top\"", " as -1\n    \n    //    ", "\"Push\"", " low", " and ", "high to ", "\"stack\"", "\n    \n    //    In a while loop, ", "\"Pop\"", " two top values from s", "\"tack\"", " and ", "simulate\n    //    call of quicksort. If there are still subarrays to sort, their\n    //    low", " and ", "high values are ", "\"pushed to stack\"", ".\n    //    Ends when ", "\"stack is empty\"", "\n    \n}\n\n//    Recursive quicksort\n//    TODO!! Implement this function\nvoid recursive_quicksort(int arr[],", " int ", "low,", " int ", "high) {\n    \n}\n\n//    For library quicksort", "\nint ", "compare(const void *a,const void *b) {\n   ", " int ", "x = *(int *)(a);\n   ", " int ", "y = *(int *)(b);\n   ", " return ", "x-y;\n}\n\n/*    Finds mode by first sorting the", " array ", "with quicksort \n    NOTE!!!    Quicksort changes the original array,\n            so only one quicksort function can be used at a time.\n            The other function calls can be commented out.\n            qsort() is the library quicksort\n*/", "\nint ", "find_mode_quicksort(int *A,", " int ", "len) {\n    qsort(A,len,sizeof(int),compare);\n    //iterative_quicksort(A, 0, len - 1);\n    //recursive_quicksort(A, 0, len - 1);\n\n    //    Find mode from the sorted array.\n    //    You do", " not ", "need to change this\n   ", " int ", "mode = A[0];\n   ", " int ", "freq = 1;\n   ", " int ", "temp = 1;\n   ", " int ", "i=1;\n\n    while (i < len) {\n       ", " if ", "(A[i] != A[i-1]) {\n            temp = 1;\n        }\n        else {\n            temp++;\n           ", " if ", "(temp > freq) {\n                freq = temp;\n                mode = A[i];\n            }\n        }\n        i++;\n    }\n    printf(", "\"\\nQuicksort: Mode = %d, frequence = %d\\n\"", ",mode,freq);\n   ", " return ", "mode;\n}\n\n//    Finds mode by first sorting", " array ", "with counting sort.\n//    TODO!!    Implement the counting sort algorithm in this function\n//            Follow the instructions in the comments", "\nint ", "find_mode_counting_sort(int *A,", " int ", "len) {\n    //    Initialize output", " array ", "B equal in size of", " array ", "A\n\n    //    Initialize the temporary auxiliary", " array ", "C. Note it's size\n\n    //    Fill the temporary", " array ", "C with zeros\n\n    //    Store the count of each element into the temporary", " array ", "C\n\n    // Store the cumulative counts into", " array ", "C\n\n    //    Find the indexes of the elements of the original", " array\n", "    //   ", " and ", "place the elements in the ouput", " array ", "B\n\n    //    Find mode from", " array ", "B\n    //    You do", " not ", "need to change anything here\n   ", " int ", "mode = arr_B[0];\n   ", " int ", "freq = 1;\n   ", " int ", "temp = 1;\n   ", " int ", "i=1;\n\n    while (i < len) {\n       ", " if ", "(arr_B[i] != arr_B[i-1]) {\n            temp = 1;\n        }\n        else {\n            temp++;\n           ", " if ", "(temp > freq) {\n                freq = temp;\n                mode = arr_B[i];\n            }\n        }\n        i++;\n    }\n    printf(", "\"\\nCounting sort: Mode = %d, frequence = %d\\n\"", ",mode,freq);\n    //    Free memory allocated to", " array ", "B\n    free(arr_B);\n   ", " return ", "mode;\n}\n\n//    Initialize", " array ", "with random numbers\n//    from 0 to 999\nvoid initialize(int *A,", " int ", "len) {\n   ", " int ", "i;\n    for (i=0; i < len; i++) {\n        A[i] = rand()%1000;\n    }\n}\n", "\nint ", "main(){\n    clock_t start,end;\n   ", " int ", "mode = 0;\n\n    //    Reserve a large", " array\n", "   ", " int ", "*array = (int *)malloc(100000000*sizeof(int));\n\n    //    Seed random number generator\n    //    Otherwise it produces the same sequence every time\n    //    Although, same sequence could be used", " if ", "you want\n    //    to compare efficiency of different quicksort implementations\n   ", " int ", "seed = time(NU", "LL);", "\n    srand(seed);\n\n   ", " double ", "totaltime;\n   ", " int ", "size, threshold;\n\n    printf(", "\"Input array size > \"", ");\n    scanf(", "\"%d\"", ",&size);\n\n    printf(", "\"\\nSearching for mode... \\n\"", ");\n    initialize(array,size);\n\n    /*    Uncomment this block of code when you have implemented\n        the counting sort function\n        \n    start = clock();\n    mode = find_mode_counting_sort(array,size);\n    end = clock();\n    totaltime = (double)(end-start)/C", "LOCKS_PER_SEC;", "\n    printf(", "\"Mode:%d, Consumed time: %f seconds \\n\"", ",mode,totaltime);\n    */\n\n    start = clock();\n    mode = find_mode_quicksort(array,size);\n    end = clock();\n    totaltime = (double)(end-start)/C", "LOCKS_PER_SEC;", "\n    printf(", "\"Mode:%d, Consumed time: %f seconds \\n\"", ",mode,totaltime);\n\n    // Free memory allocated to the", " array\n", "    free(array);\n\n   ", " return ", "0;\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/01050382874618.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;三重for为什么会有重复的&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["java：10 是一个非常特殊的数，它可以表示成两个非负整数的平方和 9 = 3 * 3 + 0 * 0。 　", ["10 是一个非常特殊的数，它可以表示成两个非负整数的平方和，10 = 3 * 3 + 1 * 1。", "9 也是同样特殊的数，它可以表示成 9 = 3 * 3 + 0 * 0。", "　　请问，在 1 到 2021 中有多少个这样的数？", "　　请注意，有的数有多种表示方法，例如 25 = 5 * 5 + 0 * 0 = 3 * 3 + 4 * 4，在算答案时只算一次。", "java可以用3重for循环暴力出所有这样的数，但是会有重复的数字，用java解决，有更好的办法吗"]], "Tag": "算法设计"}
{"Answer": "package com;\r\n\r\nimport java.util.Random;\r\n  \r\npublic class ShuDu {  \r\n    /** 存储数字的数组 */  \r\n    private static int[][] n = new int[9][9];  \r\n    /** 生成随机数字的源数组，随机数字从该数组中产生 */  \r\n    private static int[] num = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };  \r\n  \r\n    public static int[][] generateShuDu(){  \r\n        // 生成数字  \r\n        for (int i = 0; i &lt; 9; i++) {  \r\n            // 尝试填充的数字次数  \r\n            int time = 0;  \r\n            // 填充数字  \r\n            for (int j = 0; j &lt; 9; j++) {  \r\n                // 产生数字  \r\n                n[i][j] = generateNum(time);  \r\n                // 如果返回值为0，则代表卡住，退回处理  \r\n                // 退回处理的原则是：如果不是第一列，则先倒退到前一列，否则倒退到前一行的最后一列  \r\n                if (n[i][j] == 0) {  \r\n                    // 不是第一列，则倒退一列  \r\n                    if (j &gt; 0) {  \r\n                        j -= 2;  \r\n                        continue;  \r\n                    } else {// 是第一列，则倒退到上一行的最后一列  \r\n                        i--;  \r\n                        j = 8;  \r\n                        continue;  \r\n                    }  \r\n                }  \r\n                // 填充成功  \r\n                if (isCorret(i, j)) {  \r\n                    // 初始化time，为下一次填充做准备  \r\n                    time = 0;  \r\n                } else { // 继续填充  \r\n                    // 次数增加1  \r\n                    time++;  \r\n                    // 继续填充当前格  \r\n                    j--;  \r\n                }  \r\n            }  \r\n        }  \r\n        return n;  \r\n    }  \r\n  \r\n    /** \r\n     * 是否满足行、列和3X3区域不重复的要求 \r\n     *  \r\n     * @param row \r\n     *            行号 \r\n     * @param col \r\n     *            列号 \r\n     * @return true代表符合要求 \r\n     */  \r\n    private static boolean isCorret(int row, int col) {  \r\n        return (checkRow(row) &amp; checkLine(col) &amp; checkNine(row, col));  \r\n    }  \r\n  \r\n    /** \r\n     * 检查行是否符合要求 \r\n     *  \r\n     * @param row \r\n     *            检查的行号 \r\n     * @return true代表符合要求 \r\n     */  \r\n    private static boolean checkRow(int row) {  \r\n        for (int j = 0; j &lt; 8; j++) {  \r\n            if (n[row][j] == 0) {  \r\n                continue;  \r\n            }  \r\n            for (int k = j + 1; k &lt; 9; k++) {  \r\n                if (n[row][j] == n[row][k]) {  \r\n                    return false;  \r\n                }  \r\n            }  \r\n        }  \r\n        return true;  \r\n    }  \r\n  \r\n    /** \r\n     * 检查列是否符合要求 \r\n     *  \r\n     * @param col \r\n     *            检查的列号 \r\n     * @return true代表符合要求 \r\n     */  \r\n    private static boolean checkLine(int col) {  \r\n        for (int j = 0; j &lt; 8; j++) {  \r\n            if (n[j][col] == 0) {  \r\n                continue;  \r\n            }  \r\n            for (int k = j + 1; k &lt; 9; k++) {  \r\n                if (n[j][col] == n[k][col]) {  \r\n                    return false;  \r\n                }  \r\n            }  \r\n        }  \r\n        return true;  \r\n    }  \r\n  \r\n    /** \r\n     * 检查3X3区域是否符合要求 \r\n     *  \r\n     * @param row \r\n     *            检查的行号 \r\n     * @param col \r\n     *            检查的列号 \r\n     * @return true代表符合要求 \r\n     */  \r\n    private static boolean checkNine(int row, int col) {  \r\n        // 获得左上角的坐标  \r\n        int j = row / 3 * 3;  \r\n        int k = col / 3 * 3;  \r\n        // 循环比较  \r\n        for (int i = 0; i &lt; 8; i++) {  \r\n            if (n[j + i / 3][k + i % 3] == 0) {  \r\n                continue;  \r\n            }  \r\n            for (int m = i + 1; m &lt; 9; m++) {  \r\n                if (n[j + i / 3][k + i % 3] == n[j + m / 3][k + m % 3]) {  \r\n                    return false;  \r\n                }  \r\n            }  \r\n        }  \r\n        return true;  \r\n    }  \r\n  \r\n    /** \r\n     * 产生1-9之间的随机数字 规则：生成的随机数字放置在数组8-time下标的位置，随着time的增加，已经尝试过的数字将不会在取到 \r\n     * 说明：即第一次次是从所有数字中随机，第二次时从前八个数字中随机，依次类推， 这样既保证随机，也不会再重复取已经不符合要求的数字，提高程序的效率 \r\n     * 这个规则是本算法的核心 \r\n     *  \r\n     * @param time \r\n     *            填充的次数，0代表第一次填充 \r\n     * @return \r\n     */  \r\n    private static Random r=new Random();  \r\n    private static int generateNum(int time) {  \r\n        // 第一次尝试时，初始化随机数字源数组  \r\n        if (time == 0) {  \r\n            for (int i = 0; i &lt; 9; i++) {  \r\n                num[i] = i + 1;  \r\n            }  \r\n        }  \r\n        // 第10次填充，表明该位置已经卡住，则返回0，由主程序处理退回  \r\n        if (time == 9) {  \r\n            return 0;  \r\n        }  \r\n        // 不是第一次填充  \r\n        // 生成随机数字，该数字是数组的下标，取数组num中该下标对应的数字为随机数字  \r\n//      int ranNum = (int) (Math.random() * (9 - time));//j2se  \r\n        int ranNum=r.nextInt(9 - time);//j2me  \r\n        // 把数字放置在数组倒数第time个位置，  \r\n        int temp = num[8 - time];  \r\n        num[8 - time] = num[ranNum];  \r\n        num[ranNum] = temp;  \r\n        // 返回数字  \r\n        return num[8 - time];  \r\n    }  \r\n      \r\n    public static void main(String[] args) {  \r\n        int[][] shuDu=generateShuDu();  \r\n        // 输出结果  \r\n        for (int i = 0; i &lt; 9; i++) {  \r\n            for (int j = 0; j &lt; 9; j++) {  \r\n                System.out.print(shuDu[i][j] + \" \");  \r\n            }  \r\n            System.out.println();  \r\n        }  \r\n    }  \r\n}", "Konwledge_Point": "算法与数字", "Question": ["java 菜鸟求助 求各路大神指教 九宫格如何填数？ 需求如下", ["/**", "\n\n", "\n", "打印一个 9*9 的九宫格", "\n", "必须满足一下两个条件", "\n", "条件1： 任意一行或者一列都满足9个不同的数字", "\n", "条件2： 任意一个小9格正方形都满足9个不同的数字", "\n", "思想： 通过设定满足条件 无限次循环生成任意数字的矩阵 直到满足后跳出循环", "\n", "结果失败", "\n", "\n", "*/", "\n\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个init是不对的&amp;#xff0c; 如果返回一个形参 begin和end的值会乱掉的&amp;#xff0c;只是值拷贝。 要malloc返回一个地址&lt;br /&gt;queue army &amp;#61; init(); 这句话运行后会产生一个先的变量&amp;#xff0c;地址是改了的。&lt;br /&gt;先把这个改了试试&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;queue init(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;) {\n    queue &lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;current&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;//现在的元素个数是&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;.store;//两个指针都指向 数组\n    &lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;.end &amp;#61; &lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;.store;\n \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;main函数这样改了一下输出好像对了&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;//queue army &amp;#61; init();//初始化一个链表&lt;/span&gt;\n    queue army;\n    army.current &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//现在的元素个数是0&lt;/span&gt;\n    army.begin &amp;#61; army.store;&lt;span class=\"hljs-comment\"&gt;//两个指针都指向 数组&lt;/span&gt;\n    army.end &amp;#61; army.store;\n\n    &lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(&amp;amp;army);&lt;span class=\"hljs-comment\"&gt;//此后几行是调试 &amp;#xff0c;结构发现错误了&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(&amp;amp;army);\n    &lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(&amp;amp;army);\n    &lt;span class=\"hljs-built_in\"&gt;pop&lt;/span&gt;(&amp;amp;army);\n    &lt;span class=\"hljs-built_in\"&gt;show&lt;/span&gt;(army);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["环形队列使用指针导致错误了", ["//环形队列", "\n", "// 不知道 哪里不对 了", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n", "#", "include", " ", "<conio.h>", "\n", "#", "define", " max 10", "\n", "typedef", " ", "struct", " ", "Queue", " {\n    ", "int", " current;\n    ", "int", " store[max];\n    ", "int", "* begin, * end;\n}queue;\n", "queue ", "init", "(", "void", ")", ";", "//初始化", "\n", "void", " ", "push", "(queue*)", ";", "//入队列", "\n", "void", " ", "pop", "(queue*)", ";", "//出队列", "\n", "void", " ", "show", "(queue)", ";", "//遍历队列元素", "\n", "int", " ", "main", "(", "void", ")", " ", "{\n    queue army = ", "init", "();", "//初始化一个链表", "\n    ", "push", "(&army);", "//此后几行是调试 ，结构发现错误了", "\n    ", "push", "(&army);\n    ", "push", "(&army);\n    ", "pop", "(&army);\n    ", "show", "(army);\n \n    ", "return", " ", "0", ";\n}\n", "queue ", "init", "(", "void", ")", " ", "{\n    queue temp;\n    temp.current = ", "0", ";", "//现在的元素个数是0", "\n    temp.begin = temp.store;", "//两个指针都指向 数组", "\n    temp.end = temp.store;\n \n    ", "return", " temp;\n}\n", "void", " ", "push", "(queue* temp)", " ", "{\n    ", "if", " (temp->current == max) {", "//数据存放满", "\n        ", "puts", "(", "\"队列已满，无法入队列\"", ");\n        ", "exit", "(", "-1", ");\n    }\n    ", "puts", "(", "\"请输入要入队列的数据\"", ");\n    ", "int", " income;\n    ", "scanf_s", "(", "\"%d\"", ", &income);\n    *(temp->end)++ = income;", "// 在 end 位置写入 数据，然后end指针后移一位 ", "\n    ", "printf", "(", "\"%d已入队列\\n\"", ", *(temp->end - ", "1", "));\n    temp->current++; ", "//队列数据 +1", "\n    ", "if", " (temp->end == &(temp->store[max])) {", "//如果越界", "\n        temp->end = &(temp->store[", "0", "]);", "//指向开头位置", "\n    }\n}\n", "void", " ", "pop", "(queue* temp)", " ", "{\n    ", "if", " (temp->current == ", "0", ") {\n        ", "puts", "(", "\"队列为空，无法出队列\"", ");\n        ", "exit", "(", "-1", ");\n    }\n    ", "printf", "(", "\"%d已出队列\"", ", *(temp->begin)++);", "//begin指针读取数字， 然后 后移一位 ", "\n    temp->current--;\n    ", "if", " (temp->begin == &(temp->store[max])) {", "//如果越界", "\n        temp->begin = &(temp->store[", "0", "]);", "//指向开头位置", "\n    }\n}\n", "void", " ", "show", "(queue temp)", " ", "{\n    ", "printf", "(", "\"temp.current is %d\\n\"", ", temp.current);\n    ", "while", "(temp.current != ", "0", ") {\n        ", "if", " (temp.begin != temp.store) {\n            ", "printf", "(", "\"--%d--\"", ", *(temp.begin));\n            temp.begin++;\n        }\n        temp.current--;\n    }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "谢谢大家，已经解决了", "Konwledge_Point": "算法与数字", "Question": ["用tensorflow做机器翻译时训练代码有问题", ["# -*- coding:UTF-8 -*-\nimport tensorflow as tf\n\n\nsrc_path = 'D:/Python37/untitled1/train.tags.en-zh.en.deletehtml'\ntrg_path = 'D:/Python37/untitled1/train.tags.en-zh.zh.deletehtml'\n\nSRC_TRAIN_DATA = 'D:/Python37/untitled1/train.tags.en-zh.en.deletehtml.segment'  # 源语言输入文件\nTRG_TRAIN_DATA = 'D:/Python37/untitled1/train.tags.en-zh.zh.deletehtml.segment'  # 目标语言输入文件\nCHECKPOINT_PATH = './model/seq2seq_ckpt'  # checkpoint保存路径\nHIDDEN_SIZE = 1024                  # LSTM的隐藏层规模\nNUM_LAYERS = 2                      # 深层循环神经网络中LSTM结构的层数\nSRC_VOCAB_SIZE = 10000              # 源语言词汇表大小\nTRG_VOCAB_SIZE = 4000               # 目标语言词汇表大小\nBATCH_SIZE = 100                    # 训练数据batch的大小\nNUM_EPOCH = 5                       # 使用训练数据的轮数\nKEEP_PROB = 0.8                     # 节点不被dropout的概率\nMAX_GRAD_NORM = 5                   # 用于控制梯度膨胀的梯度大小上限\nSHARE_EMB_AND_SOFTMAX = True        # 在softmax层和词向量层之间共享参数\nMAX_LEN = 50                        # 限定句子的最大单词数量\nSOS_ID = 1                          # 目标语言词汇表中<sos>的ID\n\n\n\"\"\"\nfunction: 数据batching,产生最后输入数据格式\nParameters:\n    file_path-数据路径\nReturns:\n    dataset-　每个句子－对应的长度组成的TextLineDataset类的数据集对应的张量\n\"\"\"\ndef MakeDataset(file_path):\n    dataset = tf.data.TextLineDataset(file_path)\n\n    # map(function, sequence[, sequence, ...]) -> list\n    # 通过定义可以看到，这个函数的第一个参数是一个函数，剩下的参数是一个或多个序列，返回值是一个集合。\n    # function可以理解为是一个一对一或多对一函数，map的作用是以参数序列中的每一个元素调用function函数，返回包含每次function函数返回值的list。\n    # lambda argument_list: expression\n    # 其中lambda是Python预留的关键字,argument_list和expression由用户自定义\n    # argument_list参数列表, expression 为函数表达式\n    # 根据空格将单词编号切分开并放入一个一维向量\n    dataset = dataset.map(lambda string: tf.string_split([string]).values)\n    # 将字符串形式的单词编号转化为整数\n    dataset = dataset.map(lambda string: tf.string_to_number(string, tf.int32))\n    # 统计每个句子的单词数量，并与句子内容一起放入Dataset\n    dataset = dataset.map(lambda x: (x, tf.size(x)))\n    return dataset\n\n\"\"\"\nfunction: 从源语言文件src_path和目标语言文件trg_path中分别读取数据，并进行填充和batching操作\nParameters:\n    src_path-源语言，即被翻译的语言,英语.\n    trg_path-目标语言，翻译之后的语言,汉语.\n    batch_size-batch的大小\nReturns:\n    dataset-　每个句子－对应的长度　组成的TextLineDataset类的数据集\n\"\"\"\ndef MakeSrcTrgDataset(src_path, trg_path, batch_size):\n    # 首先分别读取源语言数据和目标语言数据\n    src_data = MakeDataset(src_path)\n    trg_data = MakeDataset(trg_path)\n    # 通过zip操作将两个Dataset合并为一个Dataset，现在每个Dataset中每一项数据ds由4个张量组成\n    # ds[0][0]是源句子\n    # ds[0][1]是源句子长度\n    # ds[1][0]是目标句子\n    # ds[1][1]是目标句子长度\n    #https://blog.csdn.net/qq_32458499/article/details/78856530这篇博客看一下可以细致了解一下Dataset这个库，以及.map和.zip的用法\n    dataset = tf.data.Dataset.zip((src_data, trg_data))\n\n    # 删除内容为空(只包含<eos>)的句子和长度过长的句子\n    def FilterLength(src_tuple, trg_tuple):\n        ((src_input, src_len), (trg_label, trg_len)) = (src_tuple, trg_tuple)\n        # tf.logical_and 相当于集合中的and做法，后面两个都为true最终结果才会为true，否则为false\n        # tf.greater Returns the truth value of (x > y),所以以下所说的是句子长度必须得大于一也就是不能为空的句子\n        # tf.less_equal Returns the truth value of (x <= y),所以所说的是长度要小于最长长度\n        src_len_ok = tf.logical_and(tf.greater(src_len, 1), tf.less_equal(src_len, MAX_LEN))\n        trg_len_ok = tf.logical_and(tf.greater(trg_len, 1), tf.less_equal(trg_len, MAX_LEN))\n        return tf.logical_and(src_len_ok, trg_len_ok) #两个都满足才返回true\n\n    # filter接收一个函数Func并将该函数作用于dataset的每个元素，根据返回值True或False保留或丢弃该元素，True保留该元素，False丢弃该元素\n    # 最后得到的就是去掉空句子和过长的句子的数据集\n    dataset = dataset.filter(FilterLength)\n\n    # 解码器需要两种格式的目标句子：\n    # 1.解码器的输入(trg_input), 形式如同'<sos> X Y Z'\n    # 2.解码器的目标输出(trg_label), 形式如同'X Y Z <eos>'\n    # 上面从文件中读到的目标句子是'X Y Z <eos>'的形式，我们需要从中生成'<sos> X Y Z'形式并加入到Dataset\n    # 编码器只有输入,没有输出,而解码器有输入也有输出，输入为<sos>＋(除去最后一位eos的label列表)\n    # 例如train.en最后都为2,ｉｄ为２就是eos\n    def MakeTrgInput(src_tuple, trg_tuple):\n        ((src_input, src_len), (trg_label, trg_len)) = (src_tuple, trg_tuple)\n        # tf.concat用法 https://blog.csdn.net/qq_33431368/article/details/79429295\n        trg_input = tf.concat([[SOS_ID], trg_label[:-1]], axis=0)\n        return ((src_input, src_len), (trg_input, trg_label, trg_len))\n    dataset = dataset.map(MakeTrgInput)\n\n    # 随机打乱训练数据\n    dataset = dataset.shuffle(10000)\n\n    # 规定填充后的输出的数据维度\n    padded_shapes = (\n        (tf.TensorShape([None]),    # 源句子是长度未知的向量\n         tf.TensorShape([])),       # 源句子长度是单个数字\n        (tf.TensorShape([None]),    # 目标句子(解码器输入)是长度未知的向量\n         tf.TensorShape([None]),    # 目标句子(解码器目标输出)是长度未知的向量\n         tf.TensorShape([]))        # 目标句子长度(输出)是单个数字\n    )\n    # 调用padded_batch方法进行padding 和　batching操作\n    batched_dataset = dataset.padded_batch(batch_size, padded_shapes)\n\n    return batched_dataset\n\n\"\"\"\nfunction: seq2seq模型\nParameters:\nReturns:\n\"\"\"\nclass NMTModel(object):\n    \"\"\"\n    function: 模型初始化\n    Parameters:\n    Returns:\n\n    \"\"\"\n    def __init__(self):\n\n        # 定义编码器和解码器所使用的LSTM结构\n        self.enc_cell = tf.nn.rnn_cell.MultiRNNCell(\n            [tf.nn.rnn_cell.LSTMCell(HIDDEN_SIZE) for _ in range(NUM_LAYERS)])\n        self.dec_cell = tf.nn.rnn_cell.MultiRNNCell(\n            [tf.nn.rnn_cell.LSTMCell(HIDDEN_SIZE) for _ in range(NUM_LAYERS)])\n        # 为源语言和目标语言分别定义词向量\n        self.src_embedding = tf.get_variable('src_emb', [SRC_VOCAB_SIZE, HIDDEN_SIZE])\n        self.trg_embedding = tf.get_variable('trg_emb', [TRG_VOCAB_SIZE, HIDDEN_SIZE])\n        # 定义softmax层的变量\n        if SHARE_EMB_AND_SOFTMAX:\n            self.softmax_weight = tf.transpose(self.trg_embedding)\n        else:\n            self.softmax_weight = tf.get_variable('weight', [HIDDEN_SIZE, TRG_VOCAB_SIZE])\n        self.softmax_bias = tf.get_variable('softmax_loss', [TRG_VOCAB_SIZE])\n\n    \"\"\"\n    function: 在forward函数中定义模型的前向计算图\n    Parameters:\n    　　MakeSrcTrgDataset函数产生的五种张量如下（全部为张量）\n        src_input: 编码器输入（源数据）\n        src_size : 输入大小\n        trg_input：解码器输入（目标数据）\n        trg_label：解码器输出（目标数据）\n        trg_size：　输出大小\n    Returns:\n    \"\"\"\n    def forward(self, src_input, src_size, trg_input, trg_label, trg_size):\n        batch_size = tf.shape(src_input)[0]\n        # 将输入和输出单词转为词向量（rnn中输入数据都要转换成词向量）\n        # 相当于input中的每个id对应的embedding中的向量转换\n        src_emb = tf.nn.embedding_lookup(self.src_embedding, src_input)\n        trg_emb = tf.nn.embedding_lookup(self.trg_embedding, trg_input)\n        # 在词向量上进行dropout\n        src_emb = tf.nn.dropout(src_emb, KEEP_PROB)\n        trg_emb = tf.nn.dropout(trg_emb, KEEP_PROB)\n        # 使用dynamic_rnn构造编码器\n        # 编码器读取源句子每个位置的词向量，输出最后一步的隐藏状态enc_state\n        # 因为编码器是一个双层LSTM，因此enc_state是一个包含两个LSTMStateTuple类的tuple，\n        # 每个LSTMStateTuple对应编码器中一层的状态\n        # enc_outputs是顶层LSTM在每一步的输出，它的维度是[batch_size, max_time, HIDDEN_SIZE]\n        # seq2seq模型中不需要用到enc_outputs,而attention模型会用到它\n        with tf.variable_scope('encoder'):\n            enc_outputs, enc_state = tf.nn.dynamic_rnn(self.enc_cell, src_emb, src_size, dtype=tf.float32)\n        # 使用dynamic_rnn构造解码器\n        # 解码器读取目标句子每个位置的词向量，输出的dec_outputs为每一步顶层LSTM的输出\n        # dec_outputs的维度是[batch_size, max_time, HIDDEN_SIZE]\n        # initial_state=enc_state表示用编码器的输出来初始化第一步的隐藏状态\n        # 编码器最后编码结束最后的状态为解码器初始化的状态\n        with tf.variable_scope('decoder'):\n            dec_outputs, _ = tf.nn.dynamic_rnn(self.dec_cell, trg_emb, trg_size, initial_state=enc_state)\n        # 计算解码器每一步的log perplexity\n        #　输出重新转换成shape为[,HIDDEN_SIZE]\n        output = tf.reshape(dec_outputs, [-1, HIDDEN_SIZE])\n        #  计算解码器每一步的softmax概率值\n        logits = tf.matmul(output, self.softmax_weight) + self.softmax_bias\n        #  交叉熵损失函数，算loss\n        loss = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=tf.reshape(trg_label, [-1]), logits=logits)\n        # 在计算平均损失时，需要将填充位置的权重设置为0，以避免无效位置的预测干扰模型的训练\n        label_weights = tf.sequence_mask(trg_size, maxlen=tf.shape(trg_label)[1], dtype=tf.float32)\n        label_weights = tf.reshape(label_weights, [-1])\n        cost = tf.reduce_sum(loss * label_weights)\n        cost_per_token = cost / tf.reduce_sum(label_weights)\n        # 定义反向传播操作\n        trainable_variables = tf.trainable_variables()\n        # 控制梯度大小，定义优化方法和训练步骤\n        # 算出每个需要更新的值的梯度，并对其进行控制\n        grads = tf.gradients(cost / tf.to_float(batch_size), trainable_variables)\n        grads, _ = tf.clip_by_global_norm(grads, MAX_GRAD_NORM)\n        # 利用梯度下降优化算法进行优化.学习率为1.0\n        optimizer = tf.train.GradientDescentOptimizer(learning_rate=1.0)\n        # 相当于minimize的第二步，正常来讲所得到的list[grads,vars]由compute_gradients得到，返回的是执行对应变量的更新梯度操作的op\n        train_op = optimizer.apply_gradients(zip(grads, trainable_variables))\n        return cost_per_token, train_op\n\n\"\"\"\nfunction: 使用给定的模型model上训练一个epoch，并返回全局步数，每训练200步便保存一个checkpoint\nParameters:\n    session :  会议\n    cost_op :  计算loss的操作op\n    train_op：　训练的操作op\n    saver：　　保存model的类\n    step：　　　训练步数\nReturns:\n\"\"\"\ndef run_epoch(session, cost_op, train_op, saver, step):\n    # 训练一个epoch\n    # 重复训练步骤直至遍历完Dataset中所有数据\n    while True:\n        try:\n            # 运行train_op并计算cost_op的结果也就是损失值，训练数据在main()函数中以Dataset方式提供\n            cost, _ = session.run([cost_op, train_op])\n            # 步数为１０的倍数进行打印\n            if step % 10 == 0:\n                print('After %d steps, per token cost is %.3f' % (step, cost))\n            # 每200步保存一个checkpoint\n            if step % 200 == 0:\n                saver.save(session, CHECKPOINT_PATH, global_step=step)\n            step += 1\n        except tf.errors.OutOfRangeError:\n            break\n    return step\n\n\"\"\"\nfunction: 主函数\nParameters:\nReturns:\n\"\"\"\ndef main():\n    # 定义初始化函数\n    initializer = tf.random_uniform_initializer(-0.05, 0.05)\n    # 定义训练用的循环神经网络模型\n    with tf.variable_scope('nmt_model', reuse=None, initializer=initializer):\n        train_model = NMTModel()\n    # 定义输入数据\n    data = MakeSrcTrgDataset(SRC_TRAIN_DATA, TRG_TRAIN_DATA, BATCH_SIZE)\n    iterator = data.make_initializable_iterator()\n    (src, src_size), (trg_input, trg_label, trg_size) = iterator.get_next()\n    # 定义前向计算图，输入数据以张量形式提供给forward函数\n    cost_op, train_op = train_model.forward(src, src_size, trg_input, trg_label, trg_size)\n    # 训练模型\n    # 保存模型\n    saver = tf.train.Saver()\n    step = 0\n    with tf.Session() as sess:\n        # 初始化全部变量\n        tf.global_variables_initializer().run()\n        # 进行NUM_EPOCH轮数\n        for i in range(NUM_EPOCH):\n            print('In iteration: %d' % (i + 1))\n            sess.run(iterator.initializer)\n            step = run_epoch(sess, cost_op, train_op, saver, step)\n\n\nif __name__ == '__main__':\n    main()\n\n", "\n\n", "问题如下，不知道怎么解决，谢谢！", "\nTraceback (most recent call last):", "\n  File \"D:\\Anaconda\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1334, in _do_call", "\n    return fn(*args)", "\n  File \"D:\\Anaconda\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1319, in _run_fn", "\n    options, feed_dict, fetch_list, target_list, run_metadata)", "\n  File \"D:\\Anaconda\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1407, in _call_tf_sessionrun", "\n    run_metadata)", "\ntensorflow.python.framework.errors_impl.InvalidArgumentError: StringToNumberOp could not correctly convert string: This", "\n     [[{{node StringToNumber}}]]", "\n     [[{{node IteratorGetNext}}]]", "\n\n", "During handling of the above exception, another exception occurred:", "\n\n", "Traceback (most recent call last):", "\n  File \"D:/Python37/untitled1/train_model.py\", line 277, in ", "\n    main()", "\n  File \"D:/Python37/untitled1/train_model.py\", line 273, in main", "\n    step = run_epoch(sess, cost_op, train_op, saver, step)", "\n  File \"D:/Python37/untitled1/train_model.py\", line 231, in run_epoch", "\n    cost, _ = session.run([cost_op, train_op])", "\n  File \"D:\\Anaconda\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 929, in run", "\n    run_metadata_ptr)", "\n  File \"D:\\Anaconda\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1152, in _run", "\n    feed_dict_tensor, options, run_metadata)", "\n  File \"D:\\Anaconda\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1328, in _do_run", "\n    run_metadata)", "\n  File \"D:\\Anaconda\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1348, in _do_call", "\n    raise type(e)(node_def, op, message)", "\ntensorflow.python.framework.errors_impl.InvalidArgumentError: StringToNumberOp could not correctly convert string: This", "\n     [[{{node StringToNumber}}]]", "\n     [[node IteratorGetNext (defined at D:/Python37/untitled1/train_model.py:259) ]]"]], "Tag": "算法设计"}
{"Answer": "稍微修改了下你的代码，accepted了\r\n\r\n```\r\n #include &lt;iostream&gt;\r\n#include &lt;cstdio&gt;\r\n#include &lt;cmath&gt;\r\n#include &lt;algorithm&gt;\r\n#define LL long long\r\nusing namespace std;\r\nLL a[111],b[111111];\r\nint main()\r\n{\r\n    int T;\r\n    cin&gt;&gt;T;\r\n    int i,n;\r\n    while(T--)\r\n    {\r\n        cin&gt;&gt;n;\r\n        int signum=0;\r\n        for(i=1;i&lt;=n;i++)\r\n        {\r\n            scanf(\"%ld\",&amp;a[i]);\r\n            LL tempa=a[i];//保存a[i]被除后的剩余\r\n            int countf=0;//只保留a[i]最小的两个素因子\r\n           for(int j=2;j&lt;=sqrt(a[i]);j++)\r\n            {\r\n                if(tempa%j==0){//第一个或第二个素因子\r\n                \ttempa=tempa/j;//剩余\r\n                    b[++signum]=j;//保存\r\n                    b[++signum]=tempa;//保存和这个因子配对的大于sqrt(a[i])的素因子（例子：26 37，结果应该是26，但是13是不会循环到的）\r\n\r\n                    countf++;\r\n                    if(countf==2){//判断是否是第二个素因子\r\n                    \tbreak;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                    if(tempa%j==0){//如果上面是第一个素因子，试下剩余是否仍然包含这个素因子，比如 3 8，2是8的第一个，但是剩余4仍然有2\r\n                    \tb[++signum]=j;\r\n                    \t b[++signum]=tempa;\r\n\r\n                    \tbreak;\r\n\t\t\t\t\t}\r\n                } \r\n            }\r\n            if(a[i]!=1&amp;&amp;countf==0){//如果不是1而且没有素因子，就是素数，直接加入\r\n            \tb[++signum]=a[i];\r\n\t\t\t}\r\n\r\n        }\r\n        if(signum&lt;2)\r\n            cout&lt;&lt;-1&lt;&lt;endl;\r\n        else{\r\n            sort(b+1,b+signum+1);\r\n            long long desnum=b[1]*b[2];\r\n            cout &lt;&lt; desnum &lt;&lt;endl;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n```", "Konwledge_Point": "算法与数字", "Question": ["刷ACM的小伙伴快进HDU 5428The Factor(*)", ["链接在这", "\nProblem Description", "\n\n", "There is a sequence of n positive integers. Fancycoder is addicted to learn their product, but this product may be extremely huge! However, it is lucky that FancyCoder only needs to find out one factor of this huge product: the smallest factor that contains more than 2 factors（including itself; i.e. 4 has 3 factors so that it is a qualified factor）. You need to find it out and print it. As we know, there may be none of such factors; in this occasion, please print -1 instead. ", "\n\n", "Input", "\n\n", "The first line contains one integer T (1≤T≤15), which represents the number of testcases. ", "\n\n", "For each testcase, there are two lines:", "\n\n", "\n", "The first line contains one integer denoting the value of n (1≤n≤100).", "\n", "The second line contains n integers a1,…,an (1≤a1,…,an≤2×109), which denote these n positive integers. ", "\n", "Output", "\n\n", "Print T answers in T lines.", "\n\n", "Sample Input", "\n\n", "2", "\n3", "\n1 2 3", "\n5", "\n6 6 6 6 6", "\n\n", "Sample Output", "\n\n", "6", "\n4", "\n\n", "Source", "\n\n", "BestCoder Round #54 (div.2)  ", "\n\n", " 有一个数列，FancyCoder沉迷于研究这个数列的乘积相关问题，但是它们的乘积往往非常大。幸运的是，FancyCoder只需要找到这个巨大乘积的最小的满足如下规则的因子：这个因子包含大于两个因子（包括它本身；比如，4有3个因子，因此它是满足这个要求的一个数）。你需要找到这个数字并输出它。但是我们知道，对于某些数可能没有这样的因子；在这样的情况下，请输出-1.\n", "\n\n", "我的代码如下：", "\n\n", "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#define LL long long\nusing namespace std;\nLL a[111],b[111];\nint main()\n{\n    int T;\n    cin>>T;\n    int i,n;\n    while(T--)\n    {\n        cin>>n;\n        int signum=0;\n        for(i=1;i<=n;i++)\n        {\n            scanf(\"%ld\",&a[i]);\n           for(int j=2;j<=sqrt(a[i]);j++)\n            {\n                if(a[i]%j==0){\n                    b[++signum]=j;\n                }break;\n            }\n            if(a[i]!=1&&a[i]%2!=0||a[i]==2){\n                b[++signum]=a[i];\n            }\n\n        }\n        if(signum<2)\n            cout<<-1<<endl;\n        else{\n            sort(b+1,b+signum+1);\n            long long desnum=b[1]*b[2];\n            cout << desnum <<endl;\n        }\n    }\n    return 0;\n}\n\n", "\n\n", "结果一直显示Wrong Answer，研究了一天了，求大神解答"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n\n&amp;#96;&amp;#96;&amp;#96;c&amp;#43;&amp;#43;\n#include&amp;lt;iostream&amp;gt;\nusing namespace std;\nbool flag&amp;#61;1;\nint n,m,s,a&lt;span class=\"hljs-comment\"&gt;[105]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[105]&lt;/span&gt;,book&lt;span class=\"hljs-comment\"&gt;[105]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[105]&lt;/span&gt;,fx&lt;span class=\"hljs-comment\"&gt;[10]&lt;/span&gt;&amp;#61;{0,-1,-1,-1,0,0,1,1,1},fy&lt;span class=\"hljs-comment\"&gt;[10]&lt;/span&gt;&amp;#61;{-1,0,1,-1,1,-1,0,1};\nvoid dfs(int x,int y)\n{\n    for(int i&amp;#61;1;i&amp;lt;&amp;#61;8;i&amp;#43;&amp;#43;)\n    {\n        int nx&amp;#61;x&amp;#43;fx&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;,ny&amp;#61;y&amp;#43;fy&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;;\n        if(nx&amp;gt;&amp;#61;1&amp;amp;&amp;amp;nx&amp;lt;&amp;#61;n&amp;amp;&amp;amp;ny&amp;gt;&amp;#61;1&amp;amp;&amp;amp;ny&amp;lt;&amp;#61;m)\n        {\n            if(a&lt;span class=\"hljs-comment\"&gt;[nx]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[ny]&lt;/span&gt;&amp;lt;&amp;#61;a&lt;span class=\"hljs-comment\"&gt;[x]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[y]&lt;/span&gt;&amp;amp;&amp;amp;book&lt;span class=\"hljs-comment\"&gt;[nx]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[ny]&lt;/span&gt;&amp;#61;&amp;#61;0)\n            {\n                book&lt;span class=\"hljs-comment\"&gt;[nx]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[ny]&lt;/span&gt;&amp;#61;1;\n                dfs(nx,ny);\n            }\n        }\n \n    }\n}\nint main()\n{\n    cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m;\n    for(int i&amp;#61;1;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        for(int j&amp;#61;1;j&amp;lt;&amp;#61;m;j&amp;#43;&amp;#43;)\n        {\n            cin&amp;gt;&amp;gt;a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;;\n        }\n    }\n    for(int i&amp;#61;1;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        for(int j&amp;#61;1;j&amp;lt;&amp;#61;m;j&amp;#43;&amp;#43;)\n        {\n            if(book&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;&amp;#61;&amp;#61;0)\n            {\n                book&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;&amp;#61;1;\n                flag&amp;#61;1;\n                dfs(i,j);\n                if(flag&amp;#61;&amp;#61;1)\n                {\n                    s&amp;#43;&amp;#43;;\n                }\n            }\n        }\n    }\n    cout&amp;lt;&amp;lt;s;\n}\n \n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&amp;#96;&amp;#96;&amp;#96;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["请帮我看看下面代码哪里错误，详细指明！", ["题目描述", "农夫John的农场里有很多小山丘，他想要在那里布置一些保镖去保卫他的那些相当值钱的奶牛们。", "他想知道如果在一座小山丘上布置一名保镖的话，他总共需要招聘多少名保镖。他现在有一个用数字矩阵来表示地形的地图。这个矩阵有N行（1 < N < = 100)和M列( 1 < M < = 70) 。矩阵中的每个元素都有一个值H_ij(0 < = H_ij < =10,000)来表示该地区的海拔高度。", "小山丘的定义是：若地图中一个元素所邻接的所有元素都比这个元素高度要小或等于（或它邻接的是地图的边界），则该元素和其周围所有按照这样顺序排列的元素的集合称为一个小山丘（本题某个非边界点跟它相邻的有8个点：上、下、左、右、左上、右上、左下、右下）。", "\n", "输入", "第1行：两个由空格隔开的整数N和M；", "第2行到第N+1行：", "第I+l行描述了地图上的第I行，有M个由空格隔开的整数：H_ij。", "\n", "输出", "一个整数，表示小山丘的个数。", "\n", "样例输入", "8 7", "4 3 2 2 1 0 1", "3 3 3 2 1 0 1", "2 2 2 2 1 0 0", "2 1 1 1 1 0 0", "1 1 0 0 0 1 0", "0 0 0 1 1 1 0", "0 1 2 2 1 1 0", "0 1 1 1 2 1 0", "\n", "样例输出", "3", "\n", "我的代码如下：", "\n", "#include<iostream>\nusing namespace std;\nbool flag=1;\nint n,m,s,a", "[105]", "[105]", ",book", "[105]", "[105]", ",fx", "[10]", "={0,-1,-1,-1,0,0,1,1,1},fy", "[10]", "={-1,0,1,-1,1,-1,0,1};\nvoid dfs(int x,int y)\n{\n    for(int i=1;i<=8;i++)\n    {\n        int nx=x+fx", "[i]", ",ny=y+fy", "[i]", ";\n        if(nx>=1&&nx<=n&&ny>=1&&ny<=m)\n        {\n            if(a", "[nx]", "[ny]", "<=a", "[x]", "[y]", "&&book", "[nx]", "[ny]", "==0)\n            {\n                book", "[nx]", "[ny]", "=1;\n                dfs(nx,ny);\n            }\n        }\n\n    }\n}\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            cin>>a", "[i]", "[j]", ";\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            if(book", "[i]", "[j]", "==0)\n            {\n                book", "[i]", "[j]", "=1;\n                flag=1;\n                dfs(i,j);\n                if(flag==1)\n                {\n                    s++;\n                }\n            }\n        }\n    }\n    cout<<s;\n}\n\n", "\n", "盼详细解释，谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题目要求“如果解不唯一&amp;#xff0c;则输出按字母序最小的解”&amp;#xff0c;所以最后输出判断时&amp;#xff0c;&lt;code class=\"language-javascript\"&gt;C&lt;/code&gt;那行应该在&lt;code class=\"language-javascript\"&gt;J&lt;/code&gt;那行前面&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["pat乙1018 锤子剪刀布的问题，一个测试点怎么也过不了", ["现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。", "\n", "输入格式：", "输入第 1 行给出正整数 N（≤10", "5", " ），即双方交锋的次数。随后 N 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C 代表“锤子”、J 代表“剪刀”、B 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。", "\n", "输出格式：", "输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。", "\n", "输入样例：", "10", "C J", "J B", "C B", "B B", "B C", "C C", "C B", "J B", "B C", "J J", "输出样例：", "5 3 2", "2 3 5", "B B", "\n", "\n", "#include<bits/stdc++.h>", "\nusing namespace std;\n\nint maxNum(int a, int b, int c){\n    int ", "maxnum", " = ", "0", ";\n    ", "if", " (a > maxnum)\n        ", "maxnum", " = a;\n      ", "if", " (b > maxnum)\n        ", "maxnum", " = b;\n      ", "if", "(c > maxnum)\n        ", "maxnum", " = c;\n     return maxnum;\n}\n \nint main(){\n    int N;\n    cin >> N;\n    char jia, yi;\n    int ", "jwin", " = ", "0", ";\n    int ", "ywin", " = ", "0", ";\n    int ", "nowin", " = ", "0", ";\n    int jiac, jiaj, jiab, yic, yib, yij;\n    ", "jiaj", " = ", "jiac", " = ", "jiab", " = ", "yij", " = ", "yib", " = ", "yic", " = ", "0", ";\n    \n    while(N--){\n        cin >> jia >> yi;\n        ", "if", "(", "jia", " == 'J'){\n            ", "if", "(", "yi", " == 'J') ++nowin;\n            ", "if", "(", "yi", " == 'C') ++ywin, ++yic;\n            ", "if", "(", "yi", " == 'B') ++jwin, ++jiaj;\n        }\n        ", "else", " ", "if", "(", "jia", " == 'C'){\n            ", "if", "(", "yi", " == 'C') ++nowin;\n            ", "if", "(", "yi", " == 'B') ++ywin, ++yib;\n            ", "if", "(", "yi", " == 'J') ++jwin, ++jiac;\n        }\n        ", "else", " ", "if", "(", "jia", " == 'B'){\n            ", "if", "(", "yi", " == 'B') ++nowin;\n            ", "if", "(", "yi", " == 'J') ++ywin, ++yij;\n            ", "if", "(", "yi", " == 'C') ++jwin, ++jiab;\n        }\n    }\n        \n    cout << jwin << ", "\" \"", " << nowin << ", "\" \"", " << ywin << endl;\n    cout << ywin << ", "\" \"", " << nowin << ", "\" \"", " << jwin << endl;\n    \n    int ", "ans1", " = maxNum(jiab, jiaj, jiac);\n    int ", "ans2", " = maxNum(yib, yij, yic);\n    ", "if", "(", "ans1", " == jiab) cout << ", "\"B\"", ";\n    ", "else", " ", "if", "(", "ans1", " == jiaj) cout << ", "\"J\"", ";\n    ", "else", " ", "if", "(", "ans1", " == jiac) cout << ", "\"C\"", ";\n        \n    cout << ", "\" \"", ";\n    \n    ", "if", "(", "ans2", " == yib) cout << ", "\"B\"", ";\n    ", "else", " ", "if", "(", "ans2", " == yij) cout << ", "\"J\"", ";\n    ", "else", " ", "if", "(", "ans2", " == yic) cout << ", "\"C\"", ";\n    \n    return ", "0", ";\n}\n", "\n", "\n", "  代码差两分满分，但是实在不知道怎么改，希望大家帮助下，谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c#\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; chNumber[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;zero&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;one&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;two&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;three&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;four&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;five&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;six&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;seven&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;eight&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;nine&amp;#34;&lt;/span&gt;};\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fnStrToNum&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; chNum[])&lt;/span&gt;\n&lt;/span&gt;{\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;)\n{\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(chNum, chNumber[i]))\n{\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; i;\n}\n}\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fnStrToInt&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; chNum[][&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;], &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (n--)\n{\nc *&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\nc &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;fnStrToNum&lt;/span&gt;(chNum[i&amp;#43;&amp;#43;]);\n}\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; c;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fnIntToStr&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; chNum[][&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;], &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; nNum)&lt;/span&gt;\n&lt;/span&gt;{\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; r &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; chT[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (nNum&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n{\n&lt;span class=\"hljs-built_in\"&gt;strcpy&lt;/span&gt;(chNum[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], chNumber[nNum]);\n}\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n{\nr &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fnIntToStr&lt;/span&gt;(&amp;amp;chT, nNum/&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);\n&lt;span class=\"hljs-built_in\"&gt;strcpy&lt;/span&gt;(chNum[r], chT);\n}\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; r&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; chA[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}, chB[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; iCount &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; \n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; iOut[&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;]; \n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n{\n&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s%s&amp;#34;&lt;/span&gt;, chA[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], chA[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (chA[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;)\n{\n&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s%s&amp;#34;&lt;/span&gt;, chB[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], chB[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (chB[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#61;&amp;#39;&lt;/span&gt;)\n{\niOut[iCount] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fnStrToNum&lt;/span&gt;(chA[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;fnStrToNum&lt;/span&gt;(chB[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]);\n}\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n{\niOut[iCount] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fnStrToNum&lt;/span&gt;(chA[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;fnStrToInt&lt;/span&gt;(chB, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n}\n}\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n{\n&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s%s&amp;#34;&lt;/span&gt;, chB[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], chB[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (chB[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#61;&amp;#39;&lt;/span&gt;)\n{\niOut[iCount] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fnStrToInt&lt;/span&gt;(chA, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;fnStrToNum&lt;/span&gt;(chB[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]);\n}\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n{\niOut[iCount] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fnStrToInt&lt;/span&gt;(chA, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;fnStrToInt&lt;/span&gt;(chB, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n}\n}\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!iOut[iCount])\n{\n&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n}\niCount&amp;#43;&amp;#43;;\n}\n&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; chC[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;iCount; i&amp;#43;&amp;#43;)\n{\nk &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fnIntToStr&lt;/span&gt;(chC, iOut[i]);\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j&amp;lt;k; j&amp;#43;&amp;#43;)\n{\n&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s &amp;#34;&lt;/span&gt;, chC[j]);\n}\n&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;经过测试&amp;#xff0c;感谢采纳&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["初学者不太看得懂程序", [" 用英文单词模拟数学计算\n", "\n", "读入两个小于100的正整数A和B，计算A+B。需要注意的是：A和B的每一位数字由对应的英文单词给出。", "具体的输入输出格式规定如下：", "输入格式：测试输入包含若干测试用例，每个测试用例占一行，格式为“A+B=\"，相邻两字符串有一个空格间隔。当A和B同时为zero时输入结束，相应的结果不要输出。", "输出格式：对每个测试用例输出1行，即A+B的值。", "输入样例：", "one+ two =", "three four +five six=", "zero seven +eight nine =", "zero + zero =", "输出样例：", "three", "nine zero", "nine six", "\n", "\n", "#include <stdio.h>", "#include <stdlib.h>", "#include <string.h>", "\n", "#define MAXSIZE (200)", "\n", "char *array[] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\",", "    \"six\", \"seven\", \"eight\", \"nine\"};", "\n", "void procstr(char *string, int *left, int *right)", "{", "    char words[50][MAXSIZE];", "    char c;", "      int i, num = 0, word = 0, j;", "\n", "/*\n *这部分的功能就是将字符串分解\n * 输入为 one + two =       \n * 分解为:        \n * ", "words", "[", "0", "] = ", "\"one\"", "\n * ", "words", "[", "1", "] = ", "\"+\"", "\n * ", "words", "[", "2", "] = ", "\"two\"", "\n * ", "words", "[", "3", "] = ", "\"=\"", "\n */\n", "for", "(i = ", "0", "; (c = ", "string", "[i]) != '\\", "0", "'; i++) {\n    ", "if", " (c == ' ') {\n        ", "if", " (", "word", ") {\n            strncpy(", "words", "[num", "-1", "], &", "string", "[i-", "word", "], ", "word", ");\n            ", "words", "[num", "-1", "][", "word", "] = '\\", "0", "';\n        }\n        ", "word", " = ", "0", ";\n    } ", "else", " ", "if", " (", "word", " == ", "0", ") {\n        ", "word", "++;\n        num++;\n    } ", "else", " {\n        ", "word", "++;\n    }\n}    \n\n", "if", " (", "word", ") {\n    strncpy(", "words", "[num", "-1", "], &", "string", "[i-", "word", "], ", "word", ");\n    ", "words", "[num", "-1", "][", "word", "] = '\\", "0", "';\n}\n/*****************************************/    \n\n/*\n * 这里的功能就是把\n * + 左边的转换为整数放入 left 里面\n * + 右边的转换为整数放入 right 里面\n */\n\n*left = ", "0", " , *right = ", "0", ";\nint leftok = ", "0", ";\n", "for", "(i = ", "0", "; i<num - ", "1", "; i++) {\n            ", "if", " (strcmp(", "words", "[i], ", "\"+\"", ") == ", "0", ") {\n        leftok = ", "1", ";\n    } ", "else", " {\n        ", "for", " (j = ", "0", "; j < ", "10", "; j++) {\n            ", "if", " (strcmp(", "words", "[i], array[j]) == ", "0", ") {\n                ", "if", " (leftok == ", "1", ") {\n                    *right = ", "(*right) * 10 + j;\n                } else {\n                    *left = ", "(*left) * 10 + j;\n                }\n            }\n        }\n    }\n}", "\n", "\n", "}", "\n", "/* 显示结果 */", "void showRes(int res)", "{", "    int stack[20], top = -1;", "\n", "do", " {\n    stack[++top] = res % ", "10", ";\n    res /= ", "10", ";\n} ", "while", " (res != ", "0", ");\n\n", "for", " (", "int", " i = top; i>=", "0", "; i--) {\n    ", "if", " (i != ", "0", ") {\n        ", "printf", "(", "\"%s \"", ", array[stack[i]]);\n    } ", "else", " {\n        ", "printf", "(", "\"%s\\n\"", ", array[stack[i]]);\n    }\n}\n", "\n", "}", "\n", "int main()", "{", "    char str[MAXSIZE] = {'\\0'};", "    int left = 0, right = 0;int sum;", "    while(1) {", "        fgets(str, MAXSIZE - 1, stdin);", "        procstr(str, &left, &right);    ", "\n", "    ", "if", " (", "left", " == ", "0", " && ", "right", " == ", "0", ") {\n        break;\n    } ", "else", " {\n    \n        showRes(", "left", " + ", "right", ");\n    } \n}\nsystem(", "\"pause\"", ");\n", "return", " ", "0", ";\n", "\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt; \n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;/*********Begin*********/&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,number,i,k,j,p;\n    number&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,p&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    \n    \n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);&lt;span class=\"hljs-comment\"&gt;/*输入代表测试实例个数的n*/&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; z[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};&lt;span class=\"hljs-comment\"&gt;/*定义100个字符数为200的字符串数组&amp;#xff0c;防止输入字符串过长溢出*/&lt;/span&gt;\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n;j&amp;#43;&amp;#43;)&lt;span class=\"hljs-comment\"&gt;/*这几行代码的作用是输入测试的字符&amp;#xff0c;当输完一串之后&amp;#xff0c;输出换行符换行&amp;#xff0c;继续输入下一串&amp;#xff0c;直到n行字符串全部输入完成*/&lt;/span&gt;    \n    {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,z[j]);        \n    }\n    \n    &lt;span class=\"hljs-comment\"&gt;/*for(j&amp;#61;0;j&amp;lt;n;j&amp;#43;&amp;#43;)//这几行代码的作用是输入测试的字符&amp;#xff0c;当输完一串之后&amp;#xff0c;输出换行符换行&amp;#xff0c;继续输入下一串&amp;#xff0c;直到n行字符串全部输入完成    \n    {\n        //scanf(&amp;#34;%s&amp;#34;,z[i]);\n        printf(&amp;#34;%s\\n&amp;#34;,z[j]);        \n    }*/&lt;/span&gt;\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;//这个for语句的作用是把n行字符串全部执行完&lt;/span&gt;\n    {\n        number&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-comment\"&gt;//p&amp;#61;i;//这个语句的作用是当执行完某一行字符串时&amp;#xff0c;可以在数组中接着上一行的数组地址往下执行&amp;#xff0c;而不是重新从数组z[0]开始执行&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(z[i][k])&lt;span class=\"hljs-comment\"&gt;//如果为换行符&amp;#xff0c;则跳出此循环&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((z[i][k]&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;z[i][k]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;))\n                number&amp;#61;number&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;    \n            k&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,number);\n   }\n    &lt;span class=\"hljs-comment\"&gt;/*********End**********/&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n \n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["能不能帮我看看我的代码的问题，不要新代码，我只想我这个能运行。", ["这个题目我之前已经问过一次了，还是没有搞懂，之前有个回复说我的程序里是定义了一个字符串，而不是一个字符数组，字符串和字符数组有啥区别吗？按照昨天回复我的回答，我今天把我的代码中定义的z数组全部初始化为了0，把输入给数组中的scanf中的z前面的取地址符也去掉了，在我下面if的比较中在数字字符的两边也加上了''，昨天还是啥也没输出出来，今天已经变成了报错了。", "\n", "我的思路其实很简单，就是向电脑中输入n行字符串，我想把这n行字符串存到数组中，然后这n行字符串肯定是在数组中按照一个字符一位存储的，所以第二串字符串肯定就是在第一串字符串的基础上加上一个'\\0'，然后接着往数组的下一位存储啊，所以我就遍历这个数组，但是不知道为啥啥也输出不出来。还有我最后一张图片里的回复，他说只用遍历一遍字符串，他写的代码的意思是，输入一行字符串后就输出结果，然后再输出一行字符串吗？", "\n", "烦死我了，帮帮我吧😭一个字符串数组快两天了才做了三个。", "\n", "\n \n", "#include<stdio.h>", "\nint main(void)\n{\n    ", "/*********Begin*********/", "\n    int n,number,i,k,j,p;\n     number=", "0", ",p=", "0", ";\n    char z[", "1000", "]=｛", "0", "｝;     ", "/* 定义一个字符数为1000的数组，防止输入字符串过长溢出*/", "\n \n    scanf(", "\"%d\"", ",&n);   ", "/*输入代表测试实例个数的n*/", "\n    \n    ", "for", "(j=", "0", ";j<n;j++)  ", "/*这几行代码的作用是输入测试的字符，当输完一串之后，输出换行符换行，继续输入下一串，直到n行字符串全部输入完成*/", "\n    scanf(", "\"%s\"", ",z);\n    printf(", "\"\\n\"", ");\n   \n \n    ", "for", "(k=", "0", ";k<n;k++)   ", "/*这个for语句的作用是把n行字符串全部执行完*/", "\n    {          \n    ", "for", "(i=p;i<", "1000", ";i++)    \n    {   p=i;             ", "/*这个语句的作用是当执行完某一行字符串时，可以在数组中接着上一行的数组地址往下执行，而不是重新从数组z[0]开始执行*/", "\n    ", "if", "(z[i]!=", "'\\0'", ")     ", "/*如果为换行符，则跳出此循环*/", "\n    {\n        ", "if", "((z[i]>=", "'0 '", "&& z[i]<=", "'9'", "))\n        {\n            number=number+", "1", ";\n        }\n    }\n    ", "else", " \n     p=p+", "1", "; ", "continue", ";\n    }\n    printf(", "\"%d\\n\"", ",number);\n    }\n \n    ", "/*********End**********/", "\n    return ", "0", ";\n}\n\n", "\n", "\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用GPTᴼᴾᴱᴺᴬᴵ&lt;br /&gt;这个代码实现了一个哈希表&amp;#xff0c;但是哈希函数采用了一个简单的计数哈希。需要改进哈希函数&amp;#xff0c;以减少冲突。改进后&amp;#xff0c;还需要修改插入和查找函数&amp;#xff0c;以便使用新的哈希函数。&lt;/p&gt;\n&lt;p&gt;改进哈希函数的方法很多&amp;#xff0c;以下是一些常见的方法&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;&lt;p&gt;求余数哈希&lt;br /&gt;求余数哈希是计算哈希值的常见方法。这种方法需要选择一个素数作为哈希表大小&amp;#xff0c;然后将键的字符值相加&amp;#xff0c;然后将结果取模。例如&amp;#xff0c;如果哈希表大小为N&amp;#xff0c;键的字符值为c1, c2, c3等&amp;#xff0c;则哈希值为&amp;#xff1a;(c1 &amp;#43; c2 &amp;#43; c3 &amp;#43; ...) % N。这种方法可以产生比计数哈希更好的分布&amp;#xff0c;但是如果哈希表大小不是素数&amp;#xff0c;就可能会出现不均匀的哈希值分布。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;多项式哈希&lt;br /&gt;多项式哈希是一种计算哈希值的方法&amp;#xff0c;它将键的字符值视为多项式的系数。例如&amp;#xff0c;如果键是&amp;#34;abcd&amp;#34;&amp;#xff0c;则其哈希值可以表示为&amp;#xff1a;a * p^3 &amp;#43; b * p^2 &amp;#43; c * p &amp;#43; d&amp;#xff0c;其中p是一个素数。这种方法可以产生非常好的哈希值分布&amp;#xff0c;并且可以通过选择不同的p值来减少冲突。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;布谷鸟哈希&lt;br /&gt;布谷鸟哈希是一种更高级的哈希函数&amp;#xff0c;它可以在O(1)的时间内完成插入和查找操作。它的基本思想是将哈希表分成多个小部分&amp;#xff0c;每个小部分都可以包含多个键。当哈希函数计算出键的哈希值后&amp;#xff0c;它会在所属的小部分中查找是否已经存在相同的键。如果存在&amp;#xff0c;它会将该键移动到另一个小部分中&amp;#xff0c;并在新的小部分中插入该键。这个过程会一直重复&amp;#xff0c;直到没有更多的冲突发生为止。&lt;/p&gt;\n&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;在这里&amp;#xff0c;我们选择第一个方法&amp;#xff0c;即求余数哈希。&lt;/p&gt;\n&lt;p&gt;下面是改进后的哈希函数&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;// improved hash function using modulo hashing&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;modulo_hash&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* &lt;span class=\"hljs-built_in\"&gt;key&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; table_size) {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; hash &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(*&lt;span class=\"hljs-built_in\"&gt;key&lt;/span&gt;) {\n        hash &amp;#61; (hash * &lt;span class=\"hljs-number\"&gt;31&lt;/span&gt; &amp;#43; *&lt;span class=\"hljs-built_in\"&gt;key&lt;/span&gt;) % table_size;\n        &lt;span class=\"hljs-built_in\"&gt;key&lt;/span&gt;&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; hash;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;我们还需要修改插入和查找函数&amp;#xff0c;以便使用新的哈希函数。&lt;/p&gt;\n&lt;p&gt;下面是修改后的插入函数&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;// improved insert function using modulo hashing&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; insert&lt;span class=\"hljs-constructor\"&gt;Person(&lt;span class=\"hljs-params\"&gt;person_struct&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;name_store&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;fi_name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;la_name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;c_code&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;a_code&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;l_number&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;allPersons&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; hash, firsthash;\n    &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; tempFullName&lt;span class=\"hljs-literal\"&gt;[MAX&lt;span class=\"hljs-identifier\"&gt;_NAME_LENGTH&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;;\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于#哈希函数#的问题，如何解决？", ["\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<ctype.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n", "#", "include", " ", "<time.h>", "\n", "#", "include", " ", "<string.h>", "\n\n", "#", "define", " MAX_PERSONS 100000    ", "// hash table size - experiment with different values", "\n", "#", "define", " MAX_NAME_LENGTH 50", "\n", "#", "define", " COUNTRY_CODE_LENGTH 4", "\n", "#", "define", " AREA_CODE_LENGTH 4", "\n", "#", "define", " LOCAL_NUMBER_LENGTH 8", "\n\n", "// struct to store a persosn name and phone nummber details", "\n", "typedef", " ", "struct", " ", "person", " {\n    ", "char", " *first_name;\n    ", "char", " *last_name;\n    ", "char", " *fullName;\n    ", "char", " *countryCode;\n    ", "char", " *areaCode;\n    ", "char", " *localNumber;\n    \n} person_struct;\n\n", "// global variables for printing status infomation", "\n", "int", " collision = ", "0", ";\n", "int", " longest_probing_sequence = ", "0", ";\n\n", "// The bad hash function! ", "TODO:", " Implement a better hesh function!", "\n", "int", " ", "count_hash", "(", "int", " mod, ", "char", "* fullName, ", "int", " fullNameLength)", " ", "{\n    ", "int", " i;\n    ", "int", " hash = ", "0", ";\n    ", "for", "(i=", "0", "; i < fullNameLength; i++){\n        hash = (hash + fullName[i])%mod;\n    }\n    ", "return", " hash;\n}\n\n", "/**\n function to insert a person into the hash table\n (maybe not the best way to do it, but will have to do for now)\n the key used for a person is the first name and last name together\n ", "TODO:", "    I this function you will find the probing method\n     You need to implement a better one.\n*/", "\n", "int", " ", "insertPerson", "(    person_struct *name_store,\n            ", "char", " *fi_name,\n            ", "char", " *la_name,\n            ", "char", " *c_code,\n            ", "char", " *a_code,\n            ", "char", " *l_number,\n            ", "int", " *allPersons)", " ", "{\n    ", "int", " i;\n    ", "int", " hash,firsthash;\n    \n    ", "// Allocating memory for person information", "\n    ", "int", " fiNameLength = ", "strlen", "(fi_name);\n    ", "char", " *tempFiName = ", "malloc", "(fiNameLength*", "sizeof", "(", "char", ")+", "1", ");\n    ", "int", " laNameLength = ", "strlen", "(la_name);\n    ", "char", " *tempLaName = ", "malloc", "(laNameLength*", "sizeof", "(", "char", ")+", "1", ");\n    ", "int", " coCodeLength = ", "strlen", "(c_code);\n    ", "char", " *tempCoCode = ", "malloc", "(coCodeLength*", "sizeof", "(", "char", ")+", "1", ");\n    ", "int", " arCodeLength = ", "strlen", "(a_code);\n    ", "char", " *tempArCode = ", "malloc", "(arCodeLength*", "sizeof", "(", "char", ")+", "1", ");\n    ", "int", " loNumberLength = ", "strlen", "(l_number);\n    ", "char", " *tempLoNumber = ", "malloc", "(loNumberLength*", "sizeof", "(", "char", ")+", "1", ");\n    ", "int", " fullNameLength = MAX_NAME_LENGTH*", "2", ";\n    ", "char", " *tempFullName = ", "malloc", "(fullNameLength*", "sizeof", "(", "char", ")+", "1", ");\n\n    ", "strcpy", "(tempFiName, fi_name);\n    ", "strcpy", "(tempLaName, la_name);\n    ", "strcpy", "(tempCoCode, c_code);\n    ", "strcpy", "(tempArCode, a_code);\n    ", "strcpy", "(tempLoNumber, l_number);\n    \n    ", "//concatenating first name and last name into a variable for the key", "\n    ", "strcpy", "(tempFullName, tempFiName);\n    ", "strcat", "(tempFullName, tempLaName);\n    \n    ", "//changeing the key to capital letters", "\n    ", "for", " (i=", "0", "; i < fullNameLength; i++) {\n        tempFullName[i] = ", "toupper", "(tempFullName[i]);\n    }\n    tempFullName[i] = ", "0", ";\n\n    ", "// counter for number of persons stored in the hash table", "\n    *allPersons = *allPersons+", "1", ";\n\n    ", "// compute hash for the key", "\n    hash = ", "count_hash", "(MAX_PERSONS, tempFullName, fullNameLength);\n    \n    ", "// insert person into hash table", "\n    firsthash = hash;\n    ", "int", " probing = ", "0", ";\n    ", "int", " stored = ", "0", ";\n    ", "while", " (stored == ", "0", ") {\n        ", "if", " (name_store[hash].fullName != ", "0", ") {\n            ", "// Linear probing used a probing method", "\n            ", "// ", "TODO:", " Implement better probing method", "\n            hash = (hash+", "1", ")%MAX_PERSONS;\n            collision++;\n            probing++;\n            \n            ", "//Check if hashtable full", "\n            ", "if", " (hash == firsthash) {\n                ", "return", " ", "0", ";\n            }\n        }\n        ", "else", " {\n            person_struct person;\n            person.first_name = tempFiName;\n            person.last_name = tempLaName;\n            person.fullName = tempFullName;\n            person.countryCode = tempCoCode;\n            person.areaCode = tempArCode;\n            person.localNumber = tempLoNumber;\n            name_store[hash] = person;\n            stored = ", "1", ";\n        }\n    }\n    ", "if", " (probing > longest_probing_sequence) {\n        longest_probing_sequence = probing;\n    }\n    ", "return", " ", "1", ";\n}\n\n", "/**\n ", "TODO:", " Implement function to find person\n Note that a character array cannot be directly copied\n Note also that you must use the same probing mehtod as in insert in case of collisions\n @param name_storage - the the hash table where the persons have been stored\n @param personToFind - the full name of person to find\n @return 0 if person was not found\n*/", "\n", "int", " ", "findPerson", "(person_struct *name_storage, ", "char", "* personToFind)", " ", "{\n    ", "printf", "(", "\"\\nSearching...\\n\"", ");\n    ", "return", " ", "0", ";\n}\n\n", "// main function", "\n", "int", " ", "main", "()", " ", "{\n    FILE *personFile;\n    ", "//person_struct persons[MAX_PERSONS+1];", "\n    ", "// allocate memory for hash table and initialize needed variables", "\n    person_struct *persons = (person_struct *)", "malloc", "(", "sizeof", "(person_struct)*(MAX_PERSONS+", "1", "));\n    ", "char", " firstName[MAX_NAME_LENGTH];\n    ", "char", " lastName[MAX_NAME_LENGTH];\n    ", "char", " countryCode[COUNTRY_CODE_LENGTH];\n    ", "char", " areaCode[AREA_CODE_LENGTH];\n    ", "char", " localNumber[LOCAL_NUMBER_LENGTH];\n    ", "int", " personCount = ", "0", ";\n    ", "double", " totaltime;\n    ", "clock_t", " start,end;\n    ", "int", " i;\n    ", "int", " full = ", "0", ";\n\n    ", "// get input file name from user", "\n    ", "char", " fileName[", "500", "];\n    ", "printf", "(", "\"Type filename:  > \"", ");\n    ", "scanf", "(", "\"%s\"", ",fileName);\n\n    personFile = ", "fopen", "(fileName,", "\"r\"", ");\n\n    ", "if", " (personFile == ", "NULL", "){\n        ", "printf", "(", "\"NO SUCH FILE!\\n\"", ");\n        ", "return", " ", "0", ";\n    }\n\n    ", "char", " garbage[", "1000", "];\n\n    ", "// measure time for inserting all persons into the hash table", "\n    start = ", "clock", "();\n    \n    ", "// reade lines while not end of file", "\n    ", "while", " (", "fscanf", "(personFile, ", "\"%[^,], %[^,], %[^,], %[^,], %[^\\n]\"", ", firstName, lastName, countryCode, areaCode, localNumber) != EOF) {\n        ", "// try to insert person into hash table", "\n        ", "if", " (", "insertPerson", "(persons, firstName, lastName, countryCode, areaCode, localNumber, &personCount) == ", "0", "){\n            ", "printf", "(", "\"Hash table full. File not processed completely!\\n\"", ");\n            full = ", "1", ";\n            ", "break", ";\n        }\n\n        ", "if", " (", "fscanf", "(personFile, ", "\"%999[^a-zA-Z']\"", ", garbage) == EOF) {\n            ", "// End of file garbage", "\n            ", "break", ";\n        }\n    }\n\n    ", "fclose", "(personFile);\n    \n    end = ", "clock", "();\n\n    ", "// printing status information", "\n    ", "if", " (full == ", "0", ") {\n        ", "printf", "(", "\"Total number persons inserted: %d\\n\"", ",personCount);\n        ", "printf", "(", "\"\\n\\nFillrate is: %f%%\\n\"", ", (personCount/(", "double", ")MAX_PERSONS)*", "100.00", ");\n        ", "printf", "(", "\"Total number of collisions: %d\\n\"", ", collision);\n        ", "printf", "(", "\"Longest probing sequece: %d\\n\"", ", longest_probing_sequence);\n    }\n\n    totaltime = (", "double", ")(end-start)/CLOCKS_PER_SEC;\n    ", "printf", "(", "\"\\n\\nTime for inserting %f seconds\\n\"", ", totaltime);\n    \n    ", "// measure time to find a person", "\n    start = ", "clock", "();\n    \n    ", "// Searching for one person", "\n    ", "char", " searchPersonFullName[MAX_NAME_LENGTH*", "2", "] = ", "\"Tian Alphonse JinchengAnguissola\"", ";\n    ", "// use findPeso() function to get place of the hash table where the person should be", "\n    ", "int", " place = ", "findPerson", "(persons, searchPersonFullName);\n    ", "// print detials of person if found, else inform that the person was not found", "\n    \n    end = ", "clock", "();\n    \n    ", "if", " (place != ", "0", ") {\n        ", "printf", "(", "\"Found\\n\"", ");\n        ", "printf", "(", "\"%s \"", ", persons[place].first_name);\n        ", "printf", "(", "\"%s \"", ", persons[place].last_name);\n        ", "printf", "(", "\"%s \"", ", persons[place].countryCode);\n        ", "printf", "(", "\"%s \"", ", persons[place].areaCode);\n        ", "printf", "(", "\"%s\\n\"", ", persons[place].localNumber);\n    }\n    ", "else", " {\n        ", "printf", "(", "\"Not found\\n\"", ");\n    }\n    \n    totaltime = (", "double", ")(end-start)/CLOCKS_PER_SEC;\n    ", "printf", "(", "\"\\n\\nTime searching %f seconds\\n\"", ", totaltime);\n    \n    ", "// Free all person elements from memory", "\n    ", "for", " (i=", "0", "; i <= MAX_PERSONS; i++) {\n        ", "if", " (persons[i].fullName != ", "0", ") {\n            ", "free", "(persons[i].last_name);\n            ", "free", "(persons[i].first_name);\n            ", "free", "(persons[i].countryCode);\n            ", "free", "(persons[i].areaCode);\n            ", "free", "(persons[i].localNumber);\n        }\n    }\n    ", "// Free the table", "\n    ", "free", "(persons);\n    ", "return", " ", "0", ";\n}\n\n", "\n", "注意!提交时:", "\n", "•必要时压缩所有文件", "\n", "•不要包含可执行文件", "\n", "文件扩展名为。c", "\n", "在文件名、注释和代码中使用英文", "\n", "在Moodle中，你可以找到源代码文件phonebook_for_students.c", "\n", "你将在这个练习中练习。此外，您将发现包含", "\n", "不同数量的名字和电话号码(这些不是真实的名字和", "\n", "数字，它们已经生成了)。您可以运行源代码文件。它要求", "\n", "您需要输入一个文本文件。使用给定的文件。然后程序尝试全部插入", "\n", "人员和他们的数字组成一个哈希表结构。一旦完成，它就会尝试", "\n", "从哈希表中找一个人。这不会起作用，因为它没有", "\n", "已经实现了。研究代码和注释以了解它是如何实现的", "\n", "的工作原理。查看关于哈希表的幻灯片和视频来帮助你", "\n", "理解。", "\n", "1点-找到计算哈希值的函数。这不是一件好事", "\n", "解决方案。你的任务是实现一个更好的哈希函数。观察", "\n", "运行时间!越快越好。也要观察总计的打印输出", "\n", "碰撞次数和最长探测序列。实验", "\n", "不同的哈希函数。还可以尝试哈希表的大小。不要尝试", "\n", "大文件与糟糕的哈希函数!这要花很长时间!", "\n", "1点-找到探测方法。它使用线性探测作为探测", "\n", "方法。您的任务是实现一种不同的探测方法。实验", "\n", "不同的探测方法。你也可以尝试不同的哈希函数", "\n", "不同的探测方法。观察这些如何影响碰撞的数量", "\n", "以及探测序列的长度。还可以尝试不同大小的散列", "\n", "表格观察运行时间。", "\n", "1点-找到应该从哈希中找到一个人的函数", "\n", "表格您的任务就是实现这个函数。重复使用已经有的东西", "\n", "送给你。如果你不知道如何处理字符串，请寻求帮助", "\n", "(char数组)。", "\n", "在下一页，你会发现一个表，指定输入文件，数量", "\n", "每个文件中的人，以及他们是否搜索人应该找到", "\n", "在文件中。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如果你的布局是这样子&lt;br /&gt;你的读取存在问题&amp;#xff0c;回车会读进去&amp;#xff0c;还有加和时&amp;#xff0c;会溢出&amp;#xff0c;比如 a[-1][1]就明显溢出了。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n#include&amp;lt;stdio.h&amp;gt;\n//#include&amp;lt;stdlib.h&amp;gt;\nint a[&lt;span class=\"hljs-number\"&gt;105&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;105&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}; //一张地图&amp;#xff0c;有雷为一&amp;#xff0c;无雷为零\nint main() {\n    //memset(a, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, sizeof(a));//地图最开始清空\n    //int b[&lt;span class=\"hljs-number\"&gt;105&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;105&lt;/span&gt;];//一张地图&amp;#xff0c;有雷为一&amp;#xff0c;无雷为零\n    int n, m;\n    char tmp[&lt;span class=\"hljs-number\"&gt;105&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;105&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;m, &amp;amp;n);\n    setbuf(stdin, &lt;span class=\"hljs-symbol\"&gt;NULL&lt;/span&gt;);\n    for (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;) { //读入地图\n        for (int j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n; j&amp;#43;&amp;#43;) {\n            do {\n                //&lt;span class=\"hljs-symbol\"&gt;TODO&lt;/span&gt;\n                scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;, &amp;amp;tmp[i][j]);\n            } while ( tmp[i][j] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; tmp[i][j] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;  );\n\n            if (tmp[i][j] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;) {\n                a[i][j] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;//如果是地雷就将这个点设为一\n            }\n        }\n    }\n    for (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;) {\n        for (int j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n; j&amp;#43;&amp;#43;) {\n            if (a[i][j] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;*&amp;#34;&lt;/span&gt;); //如果是地雷不用输出数字\n            else {\n                int up &amp;#61; i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ? i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; : &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n                int down &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt; n ? i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; : &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n                int lift &amp;#61; j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ? j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; : &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n                int right &amp;#61; j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt; n ? j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; : &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n                int num  &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                if ( up !&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; ) {\n                    if ( lift !&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; ) {\n                        num &amp;#43;&amp;#61; a[up][lift];\n                    }\n                    num &amp;#43;&amp;#61; a[up][j];\n                    if ( right !&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; ) {\n                        num &amp;#43;&amp;#61; a[up][right];\n                    }\n                }\n                if (down !&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;) {\n                    if ( lift !&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; ) {\n                        num &amp;#43;&amp;#61; a[down][lift];\n                    }\n                    num &amp;#43;&amp;#61; a[down][j];\n                    if ( right !&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; ) {\n                        num &amp;#43;&amp;#61; a[down][right];\n                    }\n                }\n                if( lift !&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; ){\n                    num&amp;#43;&amp;#61;a[i][lift];\n                }\n                if( right !&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; ){\n                    num&amp;#43;&amp;#61;a[i][right];\n                }\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, num);\n                //将旁边的雷加起来输出 (旁边的雷直接变成&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#xff09;\n            }\n        }\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;//愉快的结束了主程序\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["（扫雷）我用测试样例做对了，为什么评测过不了", ["问题遇到的现象和发生背景", "\n", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "#include<stdio.h>\nint main()\n{\n    int m, n;\n    char a", "[100]", "[100]", ";\n    int count", "[100]", "[100]", ";\n    scanf(", "\"%d%d\"", ", &m, &n);\n    setbuf(stdin, NULL);\n    /*fflush(stdin);*/\n    for (int i =1; i <=m; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            scanf(", "\"%c\"", ", &a", "[i]", "[j]", ");\n        }\n        setbuf(stdin, NULL);\n        /*fflush(stdin);*/\n    }\n    for (int i =1; i <= m; i++)\n    {\n        for (int j =1; j <= n; j++)\n        {\n            if (i > 0) {\n                if (a", "[i - 1]", "[j]", " == '*')\n                    count", "[i]", "[j]", "++;\n                if (a", "[i - 1]", "[j - 1]", " == '*')\n                    count", "[i]", "[j]", "++;\n                if (a", "[i - 1]", "[j + 1]", " == '*')\n                    count", "[i]", "[j]", "++;\n                if (a", "[i]", "[j - 1]", " == '*')\n                    count", "[i]", "[j]", "++;\n                if (a", "[i]", "[j + 1]", " == '*')\n                    count", "[i]", "[j]", "++;\n                if (a", "[i + 1]", "[j]", " == '*')\n                    count", "[i]", "[j]", "++;\n                if (a", "[i + 1]", "[j - 1]", " == '*')\n                    count", "[i]", "[j]", "++;\n                if (a", "[i + 1]", "[j + 1]", " == '*')\n                    count", "[i]", "[j]", "++;\n            }\n        }\n    }\n    for (int i = 1; i <= m; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            if (a", "[i]", "[j]", " == '?')\n                a", "[i]", "[j]", " = '0' + count", "[i]", "[j]", ";\n        }\n    }\n    for (int i = 1; i <= m; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            printf(", "\"%c\"", ", a", "[i]", "[j]", ");\n        }\n        printf(", "\"\\n\"", ");\n    }\n    return 0;\n}\n\n\n```#include<stdio.h>\n//#include<stdlib.h>\nint a", "[105]", "[105]", "={0};//一张地图，有雷为一，无雷为零 \nint main()\n{\n    //memset(a, 0, sizeof(a));//地图最开始清空 \n    //int b", "[105]", "[105]", ";//一张地图，有雷为一，无雷为零 \n    int n, m;\n    char tmp", "[105]", "[105]", ";\n    scanf(", "\"%d%d\"", ", &m, &n);\n    /*setbuf(stdin, NULL);*/\n    for (int i = 1; i <=m; i++)//读入地图\n    {\n        for (int j = 1; j <=n; j++)\n        {\n            scanf(", "\"%c\"", ",&tmp", "[i]", "[j]", ");\n            if (tmp", "[i]", "[j]", " == '*') \n                a", "[i]", "[j]", " = 1;//如果是地雷就将这个点设为一 \n        }\n    }\n    for (int i = 1; i <= m; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            if (a", "[i]", "[j]", " == 1) printf(", "\"*\"", "); //如果是地雷不用输出数字 \n            else\n            {\n                printf(", "\"%d\"", ", a", "[i + 1]", "[j + 1]", " + a", "[i + 1]", "[j - 1]", " + a", "[i + 1]", "[j]", " + a", "[i]", "[j + 1]", " + a", "[i]", "[j - 1]", " + a", "[i - 1]", "[j + 1]", " + a", "[i - 1]", "[j]", " + a", "[i - 1]", "[j - 1]", ");\n                //将旁边的雷加起来输出 (旁边的雷直接变成1）\n            }\n        }\n        printf(", "\"\\n\"", ");\n    }\n    return 0;//愉快的结束了主程序 \n}\n我换了一种解法还是过不了\n\n```c\n\n\n", "\n", "\n", "运行结果及报错内容", "\n", "但是我自己输入时都对啊", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;修改字符集设置&amp;#xff0c;使用多字节就可以了&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["哈希表的拉链法创建及操作", ["用拉链法创建了一个哈希表。从文件中读取内容到哈希表中，duruhash(H)函数报错，应该是H参数错了，但我在inserthash(H)函数中，是成功运行了的，那H应该是没错的", "有没有兄弟能帮帮我", "\n", "显示错误： [Error] cannot convert 'Hashnode**' to 'hashbit {aka Hashnode*}' for argument '1' to 'void duruhash(hashbit)'", "\n", "#include<iostream>", "\n", "#include<fstream>", "\nusing ", "namespace", " ", "std", ";\n", "#define MAXSIZE 20 ", "\n", "#define n 19", "\ntypedef struct aa", "//将哈希表节点的数据域变为复合型，以便储存密码和金额 ", "\n{\n    ", "int", " zhanghao;\n    ", "int", " mima;\n    ", "int", " money;\n}bb; \ntypedef struct Hashnode", "//哈希表的储存结构 ", "\n{\n    bb data;\n    struct Hashnode *prior;\n    struct Hashnode *next;\n}hashnode,*hashbit;\n", "void", " inithash(hashbit H[])", "//初始化哈希表 ", "\n{\n    ", "int", " i;\n    ", "for", "(i=", "0", ";i<MAXSIZE;i++)\n    {\n        H[i]=", "new", " hashnode;\n        H[i]->data.zhanghao=", "0", ";\n        H[i]->data.mima=", "0", ";\n        H[i]->data.money=", "0", ";\n        H[i]->prior=", "NULL", "; \n        H[i]->next=", "NULL", ";\n    }\n}\n", "void", " readtext(", "int", " ab[]) ", "//从文件中分别读取读取储户的账号，密码，储存金额信息，存入数组ab中", "\n{\n    ", "int", " i=", "0", ";\n    fstream in(", "\"haxi.txt\"", "); \n    cin.rdbuf(in.rdbuf()); ", "//将输入信息从控制台转向txt文件", "\n    ", "for", "(i=", "0", ";i<", "100", ";i++){\n           cin>>ab[i]; ", "//输入到数组中的数据是从txt文件中读取到的，不用再在控制台输入", "\n     }\n    ", "//文件信息读入完成，成功存入ab[]数组中 ", "\n    ", "//将ab[]数组中的信息存入哈希表中 ", "\n}\n", "void", " duruhash(hashbit H)\n{\n    ", "int", " x,i;\n    ", "int", " ab[", "100", "]={", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", "};\n    ", "while", "(ab[i]!=", "'\\0'", ")\n    {\n        hashbit p=", "new", " hashnode;\n        hashbit q=", "new", " hashnode;\n        x=ab[i]%n;", "//散列函数", "\n        p->next=", "NULL", ";\n        p->data.zhanghao=ab[i];\n        p->data.mima=ab[i+", "1", "];\n        p->data.money=ab[i+", "2", "];\n        q=&H[x];\n        ", "while", "(q->next!=", "NULL", ")\n        {\n            q=q->next;\n        }\n        q->next=p;", "// ", "\n        p->prior=q;", "//指向前驱节点 ", "\n        i=i+", "3", "; \n    }\n}\n", "void", " inputhash(hashbit H)\n{\n    ", "int", " ab[", "100", "]={", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", "};\n    hashbit p=", "new", " hashnode;\n    hashbit q=", "new", " hashnode;\n    ", "int", " i=", "30", ";\n    ", "int", " x;\n    x=ab[i]%n;", "//散列函数", "\n    ", "for", "(i=", "0", ";i<", "30", ";i++)\n    {\n        p->next=", "NULL", ";\n        p->data.zhanghao=ab[i];\n        p->data.mima=ab[i+", "1", "];\n        p->data.money=ab[i+", "2", "];\n        q=&H[x];\n        ", "while", "(q!=", "NULL", ")\n        {\n            q=q->next;\n        }\n        q->next=p;", "// ", "\n        p->prior=q;", "//指向前驱节点 ", "\n        i=i+", "3", "; \n    }\n}\n", "void", " inserthash(hashbit H[])", "//开户 ", "\n{\n    ", "int", " a,b,c;\n    cout<<", "\"请设置您的账户（两位数字）：\"", ";\n    cin>>a;\n    cout<<", "\"请设置您的账户密码（不超过四位数字）：\"", ";\n    cin>>b;\n    cout<<", "\"请输入您的存款金额：\"", ";\n    cin>>c;\n    ", "int", " i=a%n;\n    hashbit p=", "new", " hashnode;\n    hashbit q=", "new", " hashnode;\n    p->next=", "NULL", ";\n    p->data.zhanghao=a;\n    p->data.mima=b;\n    p->data.money=c;\n    q=H[i];\n    ", "while", "(q->next!=", "NULL", ")\n    {\n        q=q->next;\n    }\n    q->next=p;\n    p->prior=q;\n    cout<<", "\"开户成功！\"", "<<endl; \n}\nhashnode *searchhash(hashbit H[])", "//查询账户信息 ,输入账号a和密码b进行查询 ", "\n{\n    ", "int", " a,b;\n    cout<<", "\"请输入您的账户和密码(用空格隔开):\"", ";\n    cin>>a>>b;\n    ", "int", " i=a%n;\n    ", "int", " j=", "0", ";\n    hashbit p=", "new", " hashnode;\n    p=H[i];\n    ", "while", "(p->next!=", "NULL", ")\n    {\n        p=p->next;\n        ", "if", "(p->data.zhanghao==a)", "//存在此账户 ", "\n        {\n            ", "if", "(p->data.mima==b)", "//此账户密码错正确 ", "\n            {\n                j=j+", "1", ";\n                ", "break", "; \n            }\n            ", "else", "//此账户密码错误 ", "\n            {\n                j=", "3", ";\n                ", "break", "; \n            } \n        }    \n    }\n    ", "if", "(j==", "0", ")\n    {\n        cout<<", "\"不存在此账户！\"", "<<endl;\n        ", "return", " ", "NULL", "; ", "//不存在，返回空地址 ", "\n    }\n    ", "else", " ", "if", "(j==", "1", ")\n    {\n        cout<<", "\"您的账户余额：\"", "<<p->data.money<<endl; \n        ", "return", " p;", "//存在，返回其地址 ", "\n    }\n    ", "else", "\n    {\n        cout<<", "\"您的账号密码错误！\"", "<<endl;\n        ", "return", " ", "NULL", ";\n    }\n}\n", "void", " detehash(hashbit H[])", "//注销账户 ", "\n{\n    ", "int", " a,b;\n    cout<<", "\"请输入您的账户和密码(用空格隔开):\"", ";\n    cin>>a>>b;\n    hashbit p=", "new", " hashnode;\n    p=searchhash(H);\n    ", "if", "(p!=", "NULL", ")\n    {\n        hashbit q=", "new", " hashnode;\n        hashbit s=", "new", " hashnode;\n        q=p->prior;\n        s=p->next;\n        q->next=s;\n        s->prior=q;\n    }\n    cout<<", "\"您的账户已成功注销！\"", "<<endl;\n}\n", "void", " addhash(hashbit H[])", "//存款", "\n{\n    hashbit p=", "new", " hashnode;\n    ", "int", " a,b,c;\n    cout<<", "\"请输入您的账户,密码和存款金额(用空格隔开):\"", ";\n    cin>>a>>b>>c;\n    ", "int", " i=a%n;\n    ", "int", " j=", "0", ";\n    p=H[i];\n    ", "while", "(p->next!=", "NULL", ")\n    {\n        p=p->next;\n        ", "if", "(p->data.zhanghao==a)", "//存在此账户 ", "\n        {\n            ", "if", "(p->data.mima==b)", "//此账户密码错正确 ", "\n            {\n                j=j+", "1", ";\n                ", "break", "; \n            }\n            ", "else", "//此账户密码错误 ", "\n            {\n                j=", "3", ";\n                ", "break", "; \n            } \n        }    \n    }\n    ", "if", "(j==", "0", ")\n    {\n        cout<<", "\"不存在此账户！\"", "<<endl;  \n    }\n    ", "else", " ", "if", "(j==", "1", ")\n    {\n        p->data.money+=c;\n        cout<<", "\"存款成功！\"", ";\n        cout<<", "\"您的账户余额：\"", "<<p->data.money<<endl; \n    }\n}\n", "void", " minushash(hashbit H[])", "//取款", "\n{\n    hashbit p=", "new", " hashnode;\n    ", "int", " a,b,c;\n    cout<<", "\"请输入您的账户,密码和存款金额(用空格隔开):\"", ";\n    cin>>a>>b>>c;\n    ", "int", " i=a%n;\n    ", "int", " j=", "0", ";\n    p=H[i];\n    ", "while", "(p->next!=", "NULL", ")\n    {\n        p=p->next;\n        ", "if", "(p->data.zhanghao==a)", "//存在此账户 ", "\n        {\n            ", "if", "(p->data.mima==b)", "//此账户密码错正确 ", "\n            {\n                j=j+", "1", ";\n                ", "break", "; \n            }\n            ", "else", "//此账户密码错误 ", "\n            {\n                j=", "3", ";\n                ", "break", "; \n            } \n        }    \n    }\n    ", "if", "(j==", "0", ")\n    {\n        cout<<", "\"不存在此账户！\"", "<<endl;  \n    }\n    ", "else", " ", "if", "(j==", "1", ")\n    {\n        ", "if", "(p->data.money>=c)\n        {\n            cout<<", "\"取款成功！\"", ";\n            cout<<", "\"您的账户余额：\"", "<<p->data.money<<endl; \n        }\n        ", "else", "\n        {\n            cout<<", "\"您的余额不足!\"", ";\n            cout<<", "\"您的账户余额：\"", "<<p->data.money<<endl; \n        }\n    }\n}\n", "void", " shuchuhash(hashbit H[])", "//输出所有账户及其信息 ", "\n{\n    ", "int", " i;\n    hashbit p=", "new", " hashnode;\n    ", "for", "(i=", "0", ";i<MAXSIZE;i++)\n    {\n        p=H[i];\n        ", "while", "(p!=", "NULL", ")\n        {\n            cout<<", "\"账户：\"", "<<p->data.zhanghao <<", "\"余额：\"", "<<p->data.money<<endl;\n            p=p->next;\n        }\n    }\n}\n", "void", " jiluhash(hashbit H[])", "//查询交易记录", "\n{\n    ", "int", " a,b;\n    cout<<", "\"请输入您的账户和密码(用空格隔开):\"", ";\n    cin>>a>>b; \n    \n}\n", "int", " main() \n{\n    ", "int", " a,b,c;\n    ", "int", " m;\n    hashbit H[n];\n    inithash(H);\n", "//    readtext(ab);", "\n    duruhash(H);\n    cout<<", "\"本系统服务有：\"", "<<endl;\n    cout<<", "\"1.开户\"", "<<endl<<", "\"2.存款\"", "<<endl<<", "\"3.取款\"", "<<endl<<", "\"4.查询余额\"", "<<endl<<", "\"5.销户\"", "<<endl<<", "\"6.查看所有账户信息\"", "<<endl<<", "\"7.查询账户的历史交易记录\"", "<<endl; \n    cout<<", "\"请输入需要的服务的代号：\"", ";\n    cin>>m;\n    ", "while", "(m!=", "'\\0'", ")\n    {\n        hashbit p=", "new", " hashnode;\n        ", "switch", "(m) \n        {\n            ", "case", " ", "1", ":{\n                inserthash(H);\n                ", "break", ";\n            }\n            ", "case", " ", "2", ":{\n                addhash(H);\n                ", "break", ";\n            }\n            ", "case", " ", "3", ":{\n                minushash(H);\n                ", "break", ";\n            }\n            ", "case", " ", "4", ":{\n                p=searchhash(H);\n                ", "break", ";\n            }\n            ", "case", " ", "5", ":{\n                detehash(H);\n                ", "break", ";\n            }    \n            ", "case", " ", "6", ":{\n                shuchuhash(H);\n                ", "break", ";\n            }    \n            ", "case", " ", "7", ":{\n                cout<<", "\"请输入您的账户和密码(用空格隔开):\"", ";\n                cin>>a>>b; \n                jiluhash(H);\n                ", "break", ";\n            }\n            ", "default", ":{\n                cout<<", "\"错误！请重新输入！\"", "<<endl; \n                ", "break", ";\n            }\n        }\n        cout<<", "\"请输入需要的服务的代号：\"", ";\n        cin>>m;\n    }\n    ", "return", " ", "0", ";\n}\n", "\n", "​", "用拉链法创建了一个哈希表。从文件中读取内容到哈希表中，出现了问提，有没有兄弟能知道", "显示错误： [Error] cannot convert 'Hashnode**' to 'hashbit {aka Hashnode*}' for argument '1' to 'void duruhash(hashbit)'"]], "Tag": "算法设计"}
{"Answer": "这是因为两个链表都带有头节点的原因。\r\n在inter\\_link 方法中，p1=头节点，p2=头节点，while(p2!=NULL) 过程中，post-&gt;next=p2，表示post-&gt;next=头节点。\r\n你是不是打算把头节点去掉？\r\n这个方法中修改如下：\r\n\r\n\r\n```\r\n struct Node*head, *p1, *p2, *pos;\r\n\tif (a &gt;= b) {\r\n\t\thead = p1 = chain1;\r\n\t\tp2 = chain2-&gt;next; // attention!!!!!!!!!!!!!!!!\r\n\t}\r\n\telse {\r\n\t\thead = p1 = chain2;\r\n\t\tp2 = chain1-&gt;next; // attention!!!!!!!!!!!!!!!!\r\n\t\ttemp = a;\r\n\t\ta = b;\r\n\t\tb = temp;\r\n\t}\r\n```\r\n结果如下：\r\n![图片说明](https://img-ask.csdn.net/upload/201708/19/1503132476_922095.png)", "Konwledge_Point": "算法与数字", "Question": [" 关于链表合并问题 不知道哪里出了问题 ", ["你好", "\n这是我的代码", "\n\n", " #include <stdio.h>\n#include <stdlib.h>\n#include <malloc.h>\ntypedef struct Node\n{\n    int data;\n    struct Node *next;\n}NODE,*PNODE;\nvoid Delete(PNODE Head,int pos)\n{\n    int i=0;\n    PNODE p=Head;\n    while(p&&(i<pos-1))\n    {\n        p=p->next;\n        i++;\n    }\n    if(p==NULL||i>pos-1)\n    {\n        printf(\"错误\\n\");\n        exit(-1);\n    }\n    PNODE q=p->next;\n    p->next=q->next;\n    free(q);\n    q=NULL;\n}\nvoid insert(PNODE Head,int pos,int val)\n{\n    int i=0;\n    PNODE p=Head;\n    while((NULL!=p)&&(i<pos-1))\n    {\n        p=p->next;\n        i++;\n    }\n    if(p==NULL||i>pos-1)\n        {\n        exit(-1);\n        }\n    PNODE q=(PNODE)malloc(sizeof(NODE));\n    q->data=val;\n    q->next=p->next;\n    p->next=q;\n}\nPNODE create(int a)\n{\n    int len;\n    int i;\n    int val;\n    PNODE list;\n    PNODE Head=(PNODE)malloc(sizeof(NODE));\n    if(Head==NULL)\n    {\n        printf(\"Memory allocation failure\");\n        exit(-1);\n    }\n    else\n    {\n      PNODE tail=Head;\n      Head->next=NULL;\n      printf(\"please input the length of list: \");\n\n      for(i=0;i<a;i++)\n      {\n          PNODE p=(PNODE)malloc(sizeof(NODE));\n          if(p==NULL)\n          {\n              printf(\"memroy allocation failure\");\n              exit(-1);\n          }\n          else\n          {\n              printf(\"please input the value of the %d list:\",i+1);\n\n              scanf(\"%d\",&val);\n              p->data=val;\n              tail->next=p;\n              p->next=NULL;\n              tail=p;\n\n          }\n      }\n\n    }\n  return Head;\n}\nvoid print(PNODE Head)\n{\n    PNODE p;\n    if(!Head->next)\n    {\n        printf(\"the list is empty\");\n        exit(-1);\n    }\n    p=Head->next;\n    while(p)\n    {\n        printf(\"%d\\t\",p->data);\n        p=p->next;\n\n    }\n    printf(\"\\n\");\n}\nstruct Node* inter_link(struct Node* chain1,int\n\na,struct Node* chain2,int b)\n{\n    int temp;\n    struct Node*head,*p1,*p2,*pos;\n    if(a>=b){\n        head=p1=chain1;\n        p2=chain2;\n    }else{\n        head=p1=chain2;\n        p2=chain1;\n        temp=a;\n        a=b;\n        b=temp;\n    }\n    pos=head;\n    while(p2!=NULL)\n    {\n        p1=p1->next;\n        pos->next=p2;\n        pos=p2;\n        p2=p2->next;\n        pos->next=p1;\n        pos=p1;\n    }\n    return head;\n}\nvoid inversion(PNODE Head)\n{\n    PNODE p,q,pr;\n    p=Head->next;\n    q=NULL;\n    Head->next=NULL;\n    while(p)\n    {\n        pr=p->next;\n        p->next=q;\n        q=p;\n        p=pr;\n    }\n    Head->next=q;\n}\nvoid sort(struct Node *p,int m)\n{\n    int i,j,t;\n    struct Node *k;\n    k=p;\n    for(i=0;i<m-1;i++)\n    {\n        for(j=0;j<m-i-1;j++)\n        {\n            if(p->data>(p->next)->data)\n            {\n                t=p->data;\n                p->data=(p->next)->data;\n                (p->next)->data=t;\n            }\n            p=p->next;\n        }\n       p=k;\n    }\n}\nint main()\n{\n    PNODE Head,tab,boy;\n    int a,b,h;\n    scanf(\"%d\",&a);\n    Head=create(a);\n\n    printf(\"this is the list:\\n\");\n    print(Head);\n    scanf(\"%d\",&b);\n    tab=create(b);\n    print(tab);\n    inversion(Head);\n    printf(\"inverted list:\\n\");\n    print(Head);\n    printf(\"insert3:\\n\");\n\n\n    Head=inter_link(Head,a,tab,b);\n    print(Head);\n    insert(Head,3,999);\n    print(Head);\n    h=a+b;\n    Delete(Head,3);\n    print(Head);\n   //sort(boy,h);\n    //print(boy);\n\n\n\n    return 0;\n}\n\n", "\n\n", "为什么出现145368这个东西", "\n我的问题是 为什么会出现这串数字"]], "Tag": "算法设计"}
{"Answer": "step4输出的是 UserId\\tItemId,Score，也就是Step5的Map的step4数据KEY是UserId，map的step2的数据KEY是itemID，肯定没办法走到同一个循环。", "Konwledge_Point": "算法与数字", "Question": ["Hadoop mapreduce传值问题", ["最近mapreduce编写遇到了问题。在step4中，reduce可以同时收到从map中传来的A和B两组数据。但是在step5中的reudce却无法同时收到A、B两组数据，出现了有A没B，有B没A的现象，即A和B无法在同一次循环中出现。", "\n\n", "step5，我几乎是从step4复制过来的，很奇怪他们的执行步骤为什么不一样。", "\n\n", "step4", "\n\n", "import java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.regex.Pattern;\n\nimport org.apache.commons.net.telnet.EchoOptionHandler;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.Mapper;\nimport org.apache.hadoop.mapreduce.Reducer;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.input.FileSplit;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\nimport org.apache.hadoop.yarn.logaggregation.AggregatedLogFormat.LogWriter;\n\n//同现矩阵和用户偏好矩阵相乘\npublic class Step4 {\n    public static boolean run(Configuration con, Map<String, String>map) {\n        try {\n            FileSystem fs = FileSystem.get(con);\n            Job job = Job.getInstance();\n            job.setJobName(\"step4\");\n            job.setJarByClass(App.class);\n            job.setMapperClass(Step4_Mapper.class);\n            job.setReducerClass(Step4_Reducer.class);\n            job.setMapOutputKeyClass(Text.class);\n            job.setMapOutputValueClass(Text.class);\n            FileInputFormat.setInputPaths(job, \n                    new Path[] { \n                            new Path(map.get(\"Step4Input1\")),\n                            new Path(map.get(\"Step4Input2\"))\n                            });\n            Path outpath = new Path(map.get(\"Step4Output\"));\n            if(fs.exists(outpath)){\n                fs.delete(outpath,true);\n            }\n            FileOutputFormat.setOutputPath(job, outpath);\n            boolean f = job.waitForCompletion(true);\n            return f;\n        }catch(Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n    static class Step4_Mapper extends Mapper<LongWritable, Text, Text, Text>{\n        private String flag;\n\n        //每次map时都会先判断一次\n        @Override\n        protected void setup(Context context )throws IOException,InterruptedException{\n            FileSplit split = (FileSplit) context.getInputSplit();\n            flag = split.getPath().getParent().getName();\n\n            System.out.print(flag+ \"*************************\");\n        }\n\n        @Override\n        protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException{\n            String[] tokens = Pattern.compile(\"[\\t,]\").split(value.toString());\n\n            //物品共现矩阵\n            if(flag.equals(\"step3\")) {\n                //  i2:i3 1\n                // i2:i2 2\n\n                String[] v1 = tokens[0].split(\":\");\n                String itemID1 = v1[0];\n                String itemID2 = v1[1];\n                String num = tokens[1];\n\n                Text k = new Text(itemID1);\n                Text v = new Text(\"A:\"+itemID2+\",\"+num); //A:i2,1\n\n                context.write(k,v);\n\n            }else if(flag.equals(\"step2\")) {//用户评价矩阵\n                // u2 i1:2,i3:4\n                String userID = tokens[0];\n                for(int i=1;i<tokens.length;i++) {\n                    String[] vector = tokens[i].split(\":\");\n                    String itemID = vector[0]; //物品ID\n                    String pref = vector[1];//评分\n\n                    Text k = new Text(itemID);\n                    Text v = new Text(\"B:\"+userID+\",\"+pref);\n\n                    context.write(k, v);\n\n                }\n            }\n        }\n    }\n\n\n    static class Step4_Reducer extends Reducer<Text, Text, Text, Text>{\n        @Override\n        protected void reduce(Text key, Iterable<Text>values, Context context) throws IOException,InterruptedException{\n            //A为同现矩阵，B为用户偏好矩阵  \n            //某一个物品k，针对它和其他所有物品的同现次数v，都在mapA集合中\n        //  Text k = new Text(itemID1);\n        //Text v = new Text(\"A:\"+itemID2+\",\"+num); //A:i2,1\n        //  context.write(k,v);\n\n            //和该物品（key中的itemID）同现的其他物品的同现集合\n            //其他物品ID为map的key，同现数字为值\n            Map<String, Integer> mapA = new HashMap<String,Integer>();\n\n            //该物品（key中的itemID），所有用户的推荐权重分数\n            Map<String, Integer>mapB = new HashMap<String,Integer>();\n\n            for(Text line:values) {\n                String val = line.toString();\n                if(val.startsWith(\"A:\")) {\n                    String[] kv = Pattern.compile(\"[\\t,]\").split(val.substring(2));\n                    try {\n                        mapA.put(kv[0], Integer.parseInt(kv[1]));\n                    }catch(Exception e) {\n                        e.printStackTrace();\n                    }\n                }else if(val.startsWith(\"B:\")) {\n                    String[] kv = Pattern.compile(\"[\\t,]\").split(val.substring(2));\n                    try {\n                        mapB.put(kv[0], Integer.parseInt(kv[1]));\n                    }catch(Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n\n            double result = 0;\n            Iterator<String>iter = mapA.keySet().iterator();\n            while(iter.hasNext()) {\n                String mapk = iter.next(); //itemID\n\n                int num =mapA.get(mapk).intValue();  // 获取同现值\n                Iterator<String>iterb = mapB.keySet().iterator();\n                while(iterb.hasNext()) {\n                    String mapkb = iterb.next();\n                    int pref = mapB.get(mapkb).intValue();\n                    result = num*pref;\n\n                    Text k = new Text(mapkb);\n                    Text v = new Text(mapk+ \",\" + result);\n                    context.write(k, v);\n                }\n            }\n        }\n    }\n}\n\n", "\n\n", "step5", "\n\n", "\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.regex.Pattern;\n\nimport org.apache.commons.net.telnet.EchoOptionHandler;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.Mapper;\nimport org.apache.hadoop.mapreduce.Reducer;\nimport org.apache.hadoop.mapreduce.Mapper.Context;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.input.FileSplit;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\nimport org.apache.hadoop.yarn.logaggregation.AggregatedLogFormat.LogWriter;\n\n\n\n\n//获得结果矩阵\npublic class Step5 {\n    public static boolean run(Configuration con, Map<String, String>map) {\n        try {\n            FileSystem fs = FileSystem.get(con);\n            Job job = Job.getInstance();\n            job.setJobName(\"step5\");\n            job.setJarByClass(App.class);\n            job.setMapperClass(Step5_Mapper.class);\n            job.setReducerClass(Step5_Reducer.class);\n            job.setMapOutputKeyClass(Text.class);\n            job.setMapOutputValueClass(Text.class);\n            FileInputFormat.setInputPaths(job, \n                    new Path[] { \n                            new Path(map.get(\"Step5Input1\")),\n                            new Path(map.get(\"Step5Input2\"))\n                            });\n            Path outpath = new Path(map.get(\"Step5Output\"));\n            if(fs.exists(outpath)){\n                fs.delete(outpath,true);\n            }\n            FileOutputFormat.setOutputPath(job, outpath);\n            boolean f = job.waitForCompletion(true);\n            return f;\n        }catch(Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n    static class Step5_Mapper extends Mapper<LongWritable, Text, Text, Text>{\n        private String flag;\n        //每次map时都会先判断一次\n        @Override\n        protected void setup(Context context )throws IOException,InterruptedException{\n            FileSplit split = (FileSplit) context.getInputSplit();\n            flag = split.getPath().getParent().getName();\n            System.out.print(flag+ \"*************************\");\n        }\n        @Override\n        protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException{\n            String[] tokens = Pattern.compile(\"[\\t,]\").split(value.toString());\n\n            if(flag.equals(\"step4\")) {\n                    //  i2:i3 1\n                    // i2:i2 2\n                Text k = new Text(tokens[0]);\n                Text v = new Text(\"A:\"+tokens[1]+\",\"+tokens[2]);\n                context.write(k, v);\n            }else if(flag.equals(\"step2\")) {//用户评价矩阵\n                    // u2 i1:2,i3:4\n                    String userID = tokens[0];\n                    for(int i=1;i<tokens.length;i++) {\n                        String[] vector = tokens[i].split(\":\");\n                        String itemID = vector[0]; //物品ID\n                        String pref = vector[1];//评分\n\n                        Text k = new Text(itemID);\n                        Text v = new Text(\"B:\"+userID+\",\"+pref);\n\n                        context.write(k, v);\n                    }\n        }\n    }\n    }\n        //本reduce 负责累加结果\n        static class Step5_Reducer extends Reducer<Text, Text, Text, Text>{\n            protected void reduce(Text key, Iterable<Text>values, Context context) throws IOException,InterruptedException{\n                //其他物品ID为map的key，同现数字为值\n                Map<String, Double> mapA = new HashMap<String,Double>();\n\n                //该物品（key中的itemID），所有用户的推荐权重分数\n                Map<String, Integer>mapB = new HashMap<String,Integer>();\n\n                for(Text line : values) {\n                    String val = line.toString();\n                    if(val.startsWith(\"A:\")) {\n                        String[] kv = Pattern.compile(\"[\\t,]\").split(val.substring(2));\n                        String tokens = kv[1];\n                        String itemID = kv[0];//物品id\n                        Double score = Double.parseDouble(tokens); //相乘结果\n\n                        //相加计算\n                        if(mapA.containsKey(itemID)) {\n                            mapA.put(itemID, mapA.get(itemID)+score);\n                        }else {\n                            mapA.put(itemID, score);\n                        }\n\n                    }else if(val.startsWith(\"B:\")) {\n                        String[] kv = Pattern.compile(\"[\\t,]\").split(val.substring(2));\n                        try {\n                            mapB.put(kv[0], Integer.parseInt(kv[1]));\n                        }catch(Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }\n\n\n                Iterator<String> iter = mapA.keySet().iterator();\n                while(iter.hasNext()) {\n                    String itemID = iter.next();\n                    double score = mapA.get(itemID);\n                    Text v = new Text(itemID+\",\"+score);\n                    Iterator<String>iterb = mapB.keySet().iterator();\n                    while(iterb.hasNext()) {\n                        String mapkb = iterb.next();\n                        Text k = new Text(mapkb);\n\n                        if(k.equals(key)) {\n                            continue;\n                        }else {\n                            context.write(key, v);\n                        }\n                    }\n                }\n            }\n        }\n\n}\n\n\n", "\n\n", "step4和step5配置", "\n\n", "step4，在for循环中同时出现A和B", "\n\n", "step5中，A和B无法出现在同一次循环", "\n直接跳出了for循环进入下面的while循环，此时没有mapB，while无法正常进行", "\n\n", "进行了多次step5后，输出完所有mapA之后，在下一次step5才进入mapB，此时轮到mapA是空的，而只有mapB"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个参数本来就不是固定值啊。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["小白求抓包数据transId的固定值", ["一个网站的抓包数据 transId 没办法获取固定值 点一下抓包就变了 点一下就变了", "\n", "网站", "\n  \n    ", "全球领先的数字藏品电商平台", "\n    \n  ", "iBox Description", "\n  ", "\n  ", "\n    ", "\n      ", "https://www.ibox.art/zh-cn/item/?id=100000121&gid=100065846", "\n    ", "\n  ", "\n", "需要配置微信环境点击才可以获取全部的数据 ", "\n", "(window.webpackJsonp=window.webpackJsonp||[]).push([[10,3],{144:function(t,e,s){},145:function(t,e,s){},148:function(t,e,s){},150:function(t,e,s){\"use strict\";s(144)},151:function(t,e,s){\"use strict\";s(145)},152:function(t,e,s){\"use strict\";var a=s(19),i={name:\"NoData\",props:{tip:{type:String,default:\"暂无数据\"}}},n=(s(150),s(7)),o=Object(n.a)(i,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"no-data\"},[s(\"div\",{staticClass:\"icon\"}),t._v(\" \"),s(\"div\",{staticClass:\"tip\"},[t._v(\"\\n        \"+t._s(t.tip)+\"\\n    \")])])}),[],!1,null,\"59258c4f\",null).exports,l={name:\"ScrollLoader\",props:{loading:{type:Boolean,default:!1},end:{type:Boolean,default:!1},noData:{type:Boolean,default:!1},noDataTip:{type:String,default:\"暂无数据\"},endTip:{type:String,default:\"没有更多数据了～\"}},components:{NoData:o},computed:{...Object(a.b)([\"isMobile\"])},mounted(){window.addEventListener(\"scroll\",this.load)},destroyed(){window.removeEventListener(\"scroll\",this.load,!1)},methods:{load(){if(this.loading||this.end)return;const t=this.isMobile?100:0;var e,s;(function(){let t=0,e=0,s=0;return document.body&&(e=document.body.scrollTop),document.documentElement&&(s=document.documentElement.scrollTop),t=e-s>0?e:s,t})()+document.body.clientHeight+t>=(e=0,s=0,document.body&&(e=document.body.scrollHeight),document.documentElement&&(s=document.documentElement.scrollHeight),e-s>0?e:s)&&this.$emit(\"load\")}}},c=(s(151),Object(n.a)(l,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"scroll-loader\"},[t._t(\"default\"),t._v(\" \"),t.noData?s(\"no-data\",{staticClass:\"no-data\",attrs:{tip:t.noDataTip}}):t._e(),t._v(\" \"),t.end&&!t.noData?s(\"div\",{staticClass:\"no-more\"},[t._v(\"\\n        \"+t._s(t.endTip)+\"\\n    \")]):t._e()],2)}),[],!1,null,\"1bbeb5f3\",null));e.a=c.exports},155:function(t,e,s){},156:function(t,e,s){},159:function(t,e,s){\"use strict\";const a={0:\"UR\",1:\"SSR\",2:\"SR\",3:\"R\",4:\"N\"};var i={name:\"MBoxRarity\",props:{rarity:{type:[Number,String],default:\"\"},suffix:{type:String,default:\"\"}},computed:{label(){const{rarity:t}=this;if(0!==t&&!t&&!this.suffix)return\"盲盒开出\";const e=a[String(t)];return e||\"\"}}},n=(s(161),s(7)),o=Object(n.a)(i,(function(){var t=this,e=t.$createElement;return(t._self._c||e)(\"div\",{class:\"box-rarity rarity-\"+(t.rarity||0)},[t._v(\"\\n    \"+t._s(t.label)+\" \"+t._s(t.suffix)+\"\\n\")])}),[],!1,null,\"e675cdde\",null);e.a=o.exports},161:function(t,e,s){\"use strict\";s(148)},165:function(t,e,s){\"use strict\";var a={name:\"UIMobileCheckbox\",model:{prop:\"value\",event:\"change\"},props:{value:{type:[Object,Boolean],default:!1}},data(){return{checked:this.value}},methods:{toggle(){this.checked=!this.checked}},watch:{checked(t){this.$emit(\"change\",t)}}},i=(s(170),s(7)),n=Object(i.a)(a,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"checkbox\",class:{checked:t.checked},on:{click:t.toggle}},[s(\"div\",{staticClass:\"icon\"}),t._v(\" \"),s(\"div\",{staticClass:\"label\"},[t._t(\"default\")],2)])}),[],!1,null,\"2225e34d\",null);e.a=n.exports},168:function(t,e,s){},170:function(t,e,s){\"use strict\";s(155)},171:function(t,e,s){\"use strict\";s(156)},179:function(t,e,s){\"use strict\";var a=s(153),i=s(159);const n={1:\"首发售罄\",2:\"热卖中\",3:\"即将开售\",4:\"尚未开售\"},o={1:\"首发售罄\",2:\"立即购买\",3:\"查看详情\",4:\"查看详情\"};var l={name:\"ProductList\",components:{MediaWrapper:a.a,BoxRarity:i.a},props:{products:{type:Array,default:()=>[]},showIndex:{type:Boolean,default:!1},mustShowAuthor:{type:Boolean,default:!1},showAction:{type:Boolean,default:!0},showGName:{type:Boolean,default:!1},showRarity:{type:Boolean,default:!1}},data:()=>({listData:[]}),methods:{isVideo(t){const{thumbPic:e}=t;return e.includes(\".mp4\")},saleLabel:t=>n[t],btnLabel:t=>o[t],detail(t){const{gType:e}=t;null===e||0===e?this.$router.push(", "/zh-cn/item/?id=${t.albumId||\"\"}${t.gId?\"&gid=\"+t.gId:\"\"}", "):this.$router.push(", "/zh-cn/mbox/item/?id=${t.albumId||\"\"}${t.gId?\"&gid=\"+t.gId:\"\"}", ")}}},c=(s(187),s(7)),r=Object(c.a)(l,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"product-list\"},t._l(t.products,(function(e,a){return s(\"div\",{key:\"\"+e.albumId+(e.gId?e.gId:a)+e.gNum,staticClass:\"product-container\"},[s(\"div\",{class:\"product status-\"+e.onSale+\" \"+(t.isVideo(e)?\"is-video\":\"\"),on:{click:function(s){return t.detail(e)}}},[s(\"div\",{staticClass:\"cover-wrapper\"},[s(\"div\",{staticClass:\"cover\"},[s(\"media-wrapper\",{attrs:{type:t.isVideo(e)?2:1,src:e.thumbPic}})],1),t._v(\" \"),t.isVideo(e)?[s(\"div\",{staticClass:\"btn-play\",on:{click:function(s){return t.detail(e)}}})]:t.showAction?[s(\"div\",{staticClass:\"btn-status\"},[s(\"nuxt-link\",{attrs:{to:\"/zh-cn/item/?id=\"+(e.albumId||\"\")+(e.gId?\"&gid=\"+e.gId:\"\")}},[s(\"button\",[s(\"span\",{staticClass:\"text\"},[t._v(\"\\n                                    \"+t._s(t.btnLabel(e.onSale))+\"\\n                                \")]),t._v(\" \"),s(\"span\",{staticClass:\"icon\"})])])],1)]:t._e()],2),t._v(\" \"),s(\"div\",{staticClass:\"detail\"},[s(\"div\",{staticClass:\"name\"},[s(\"span\",{staticClass:\"album-name\"},[t._v(\"\\n                        \"+t._s(t.showGName&&e.gName||e.albumName)+\"\\n                    \")]),t._v(\" \"),e.vFlag?s(\"span\",{staticClass:\"v-flag\"}):t._e()]),t._v(\" \"),s(\"div\",{staticClass:\"item-detail\"},[s(\"div\",{staticClass:\"detail-content\",class:{\"show-index\":t.showIndex}},[null===e.gType||0===e.gType?s(\"div\",{staticClass:\"author-info\"},[s(\"img\",{staticClass:\"author-head\",attrs:{src:e.authorHeadImage?e.authorHeadImage:\"/image/default/head.png\",alt:\"headImg\"}}),t._v(\"\\n                            \"+t._s(e.authorName)+\"\\n                        \")]):t.mustShowAuthor?s(\"div\",{staticClass:\"author-info\"},[t._v(\"\\n                            盲盒商品\\n                        \")]):t._e(),t._v(\" \"),t.showIndex?[0===e.gType?s(\"div\",{staticClass:\"sell-limit\"},[s(\"b\",[t._v(\"\\n                                    #\"+t._s(e.gNum)+\"\\n                                \")]),t._v(\"\\n                                / \"+t._s(e.sellLimit)+\"\\n                            \")]):s(\"div\",{staticClass:\"sell-limit\",style:{opacity:.6}},[t._v(\"\\n                                \"+t._s(1===e.label?\"多开不重\":\"单开\")+\"\\n                            \")])]:t._e()],2),t._v(\" \"),4!==e.onSale?s(\"div\",{staticClass:\"price\"},[t._v(\"\\n                        \"+t._s(\"\"!==e.priceCny?\"￥\":\"\")+t._s(t._f(\"defaultValue\")(e.priceCny))+\"\\n                    \")]):s(\"div\",{staticClass:\"price\"},[t._v(\"\\n                        尚未开售\\n                    \")]),t._v(\" \"),s(\"div\",{staticClass:\"price-mobile\"},[4!==e.onSale?s(\"div\",{staticClass:\"price-value\"},[t._v(\"\\n                            \"+t._s(\"\"!==e.priceCny?\"￥\":\"\")+t._s(t._f(\"defaultValue\")(e.priceCny))+\"\\n                        \")]):s(\"div\",{staticClass:\"price-value\"},[t._v(\"\\n                            尚未开售\\n                        \")]),t._v(\" \"),s(\"div\",{staticClass:\"go\"})])])]),t._v(\" \"),[1,2,3].includes(e.onSale)&&t.showAction?s(\"div\",{staticClass:\"status-tag\"},[s(\"span\",{staticClass:\"icon\"}),t._v(\"\\n                \"+t._s(t.saleLabel(e.onSale))+\"\\n            \")]):t._e(),t._v(\" \"),t.showRarity&&0===e.gType&&null!==e.label?s(\"div\",{staticClass:\"rarity\"},[s(\"box-rarity\",{attrs:{suffix:\"盲盒开出\",rarity:e.rarity}})],1):t._e()])])})),0)}),[],!1,null,\"39761c76\",null);e.a=r.exports},180:function(t,e,s){\"use strict\";var a={name:\"UIMobileTabs\",model:{prop:\"value\",event:\"change\"},props:{value:{type:Number,default:null},list:{type:Array,default:()=>[]}},data(){return{active:this.value}},methods:{change(t){this.active=t}},watch:{active(t){this.$emit(\"change\",t)}}},i=(s(171),s(7)),n=Object(i.a)(a,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"tab-change\"},t._l(t.list,(function(e){return s(\"div\",{key:e.value,staticClass:\"tab\",class:{active:e.value===t.active},on:{click:function(s){return t.change(e.value)}}},[t._v(\"\\n        \"+t._s(e.label)+\"\\n    \")])})),0)}),[],!1,null,\"3c467362\",null);e.a=n.exports},187:function(t,e,s){\"use strict\";s(168)},225:function(t,e,s){},226:function(t,e,s){},227:function(t,e,s){},228:function(t,e,s){},229:function(t,e,s){},230:function(t,e,s){},317:function(t,e,s){\"use strict\";s(225)},318:function(t,e,s){\"use strict\";s(226)},327:function(t,e,s){\"use strict\";s(227)},328:function(t,e,s){\"use strict\";s(228)},329:function(t,e,s){\"use strict\";s(229)},330:function(t,e,s){\"use strict\";s(230)},428:function(t,e,s){\"use strict\";s.r(e);var a=s(15),i=s(179),n=s(178),o=s(19),l=(s(312),s(147)),c=s(53),r=s(14),u=s(33),d=s(6),h=s(28),v=(s(313),s(222),{name:\"ProfileEditorModal\",components:{CommonModal:h.a,ElButton:s(314).default,ElInput:s(223).default},props:{user:{type:Object,default:()=>{}}},data(){const{user:t}=this;return{name:t.userName,bio:t.introduction,site:t.socialPlatform,loading:!1,autosize:{minHeight:168}}},methods:{async submit(){const{name:t,bio:e,site:s,user:i}=this;if(!this.checkSiteFormat())return void this.toast(\"社交地址格式不正确\",\"error\");this.loading=!0;const{success:n,message:o}=await a.b.updatePersonalInfo({headImage:i.headImage,userName:t,introduction:e,socialPlatform:s});this.loading=!1,n?(this.$emit(\"close\"),this.$parent.$emit(\"success\")):this.toast(o,\"error\")},startWith:t=>t.includes(\"https://\")||t.includes(\"http://\"),checkSiteFormat(){const{site:t}=this;let e=!1;if(t)if(t.includes(\";\")){const s=t.split(\";\");for(let t=0;t<s.length;t++){let a=this.startWith(s[t]);if(!a){e=a;break}}e=!0}else e=this.startWith(t);else e=!0;return e}}}),m=(s(317),s(7)),p=Object(m.a)(v,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"common-modal\",[s(\"h3\",{staticClass:\"modal-title\",attrs:{slot:\"title\"},slot:\"title\"},[t._v(\"\\n        编辑资料\\n    \")]),t._v(\" \"),s(\"div\",{staticClass:\"modal-content\",attrs:{slot:\"content\"},slot:\"content\"},[s(\"div\",{staticClass:\"form-item\"},[s(\"div\",{staticClass:\"label\"},[t._v(\"\\n                昵称\\n            \")]),t._v(\" \"),s(\"div\",{staticClass:\"control\"},[s(\"el-input\",{attrs:{placeholder:\"请输入昵称\",maxlength:50,size:\"large\"},model:{value:t.name,callback:function(e){t.name=e},expression:\"name\"}})],1)]),t._v(\" \"),s(\"div\",{staticClass:\"form-item\"},[s(\"div\",{staticClass:\"label\"},[t._v(\"\\n                个人简介\\n            \")]),t._v(\" \"),s(\"div\",{staticClass:\"control\"},[s(\"el-input\",{attrs:{placeholder:\"请输入个人简介\",len:100,autosize:t.autosize,type:\"textarea\"},model:{value:t.bio,callback:function(e){t.bio=e},expression:\"bio\"}})],1)]),t._v(\" \"),s(\"div\",{staticClass:\"form-item\"},[s(\"div\",{staticClass:\"label\"},[t._v(\"\\n                个人主页\\n            \")]),t._v(\" \"),s(\"div\",{staticClass:\"control\"},[s(\"el-input\",{attrs:{placeholder:\"社交地址请http://或https://开头，多个社交地址请英文 ; 隔开。\",type:\"textarea\",autosize:t.autosize},model:{value:t.site,callback:function(e){t.site=e},expression:\"site\"}})],1)])]),t._v(\" \"),s(\"div\",{staticClass:\"modal-footer\",attrs:{slot:\"footer\"},slot:\"footer\"},[s(\"el-button\",{staticClass:\"btn-cancel\",attrs:{size:\"large\",type:\"text\"},on:{click:function(e){return t.$emit(\"close\")}}},[t._v(\"\\n            取消\\n        \")]),t._v(\" \"),s(\"el-button\",{staticClass:\"btn-submit\",attrs:{size:\"large\",type:\"primary\",loading:t.loading},on:{click:t.submit}},[t._v(\"\\n            确认\\n        \")])],1)])}),[],!1,null,\"56fae718\",null).exports,b={name:\"WebsitListModal\",components:{CommonModal:h.a},props:{links:{type:Array,default:()=>[]}},methods:{}},f=(s(318),Object(m.a)(b,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"common-modal\",[s(\"h3\",{staticClass:\"modal-title\",attrs:{slot:\"title\"},slot:\"title\"},[t._v(\"\\n        我的\\n    \")]),t._v(\" \"),s(\"div\",{staticClass:\"modal-content\",attrs:{slot:\"content\"},slot:\"content\"},t._l(t.links,(function(e,a){return s(\"a\",{key:a,attrs:{href:e,target:\"_blank\",rel:\"noopener noreferrer\"}},[t.", "v(\"\\n            \"+t.", "s(e)),s(\"i\")])})),0)])}),[],!1,null,\"6a273684\",null).exports),", "={name:\"CreativeAccountInfo\",components:{ElUpload:s(319).default,Clipboard:c.a},async created(){await this.loadUserInfo()},mounted(){this.headers[r.i]=this.$cookies.get(r.i)},data:()=>({headers:{},action:\"/file/upload\",data:{transId:Object(u.b)(),platform:\"web\",project:\"nft-mall\",upType:\"portrait\"},uploading:!1,user:{},copyable:!1,debugCount:0}),computed:{...Object(o.b)([\"uid\",\"isLogin\"]),isAccount(){const{uid:t,userId:e}=this;return+t==+e},links(){const{socialPlatform:t}=this.user;let e=t.split(\";\");return e[e.length-1]||e.splice(e.length-1,1),e},id(){const{id:t}=this.$route.query;return t||\"\"},userId(){const{id:t,uid:e}=this;return t||e}},methods:{checkDebug(){if(20==++this.debugCount){const t=s(95);Object(d.f)()&&new t}},beforeHeadUpload(t){const e=t.size/1024/1024<1;return this.uploading=!0,e||(this.toast(\"上传头像图片大小不能超过 1MB!\",\"error\"),this.uploading=!1),this.data.transId=Object(u.b)(),this.headers[r.i]=this.$cookies.get(r.i),e},onHeadSuccess({code:t,data:e,msg:s}){this.uploading=!1,1===t?(this.user.headImage=e[0],this.saveProfile()):this.toast(s,\"error\")},async saveProfile(){const{headImage:t,userName:e,introduction:s,socialPlatform:i}=this.user,{success:n,message:o}=await a.b.updatePersonalInfo({headImage:t,userName:e,introduction:s,socialPlatform:i});n||this.toast(o,\"error\")},async loadUserInfo(){this.user={};const{success:t,data:e,code:s}=await a.b.getPersonalInfo(this.userId);t?(this.user=e||{},this.user.walletAddress&&(this.copyable=!0)):121===s&&this.isAccount&&await this.login()},edit(){this.$modal.show(p,{user:this.user},{width:\"480px\",height:\"auto\"},{success:()=>{this.$store.dispatch(\"checkToken\"),this.loadUserInfo()}})},goOrder(){this.$router.push(\"/zh-cn/order/list\")},webShow(){this.$modal.show(f,{links:this.links},{height:\"auto\"})},onSuccess(){this.toast(\"复制成功\",\"success\")},onError(){this.toast(\"复制失败\",\"error\")}},watch:{uid(){this.loadUserInfo()},\"user.uid\"(){this.$emit(\"change\",this.user)},userId(t){this.loadUserInfo()}}},g=(s(327),Object(m.a)(", ",(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"account-info\"},[s(\"div\",{staticClass:\"inner\"},[s(\"div\",{staticClass:\"user-info\"},[s(\"el-upload\",{staticClass:\"avatar-uploader\",attrs:{action:t.action,\"show-file-list\":!1,headers:t.headers,data:t.data,disabled:t.uploading||!t.isAccount,accept:\"image/png, image/jpg, image/jpeg\",\"on-success\":t.onHeadSuccess,\"before-upload\":t.beforeHeadUpload}},[s(\"div\",{staticClass:\"head-container\"},[s(\"div\",{staticClass:\"head\"},[t.user.headImage?s(\"img\",{attrs:{src:t.user.headImage}}):t._e()]),t._v(\" \"),t.isAccount?s(\"div\",{staticClass:\"head-edit\"}):t._e()])]),t._v(\" \"),s(\"div\",{staticClass:\"user-detail\"},[s(\"div\",{staticClass:\"name\"},[s(\"div\",{staticClass:\"name-text\"},[t._v(\"\\n                        \"+t._s(t._f(\"defaultValue\")(t.user.userName))+\"\\n                    \")]),t._v(\" \"),s(\"div\",{staticClass:\"name-text-mobile\"},[t._v(\"\\n                        \"+t._s(t._f(\"defaultValue\")(t.user.userName))+\"\\n                    \")]),t._v(\" \"),t.isAccount?s(\"button\",{on:{click:t.edit}},[s(\"span\",{staticClass:\"icon\"}),t._v(\" \"),s(\"span\",{staticClass:\"text\"},[t._v(\"\\n                            编辑资料\\n                        \")])]):t._e()]),t._v(\" \"),s(\"div\",{staticClass:\"address\"},[s(\"span\",{staticClass:\"walletAddress\"},[t._v(t._s(t.user.walletAddress))]),t._v(\" \"),s(\"span\",{staticClass:\"mobile-walletAddress\"},[t._v(t._s(t._f(\"address\")(t.user.walletAddress||\"--\")))]),t._v(\" \"),t.copyable?s(\"clipboard\",{staticClass:\"copy\",attrs:{text:t.user.walletAddress,success:t.onSuccess,error:t.onError}}):t._e()],1)])],1),t._v(\" \"),s(\"div\",{staticClass:\"user-about\",on:{click:t.checkDebug}},[t._v(\"\\n            \"+t._s(t._f(\"defaultValue\")(t.user.introduction))+\"\\n        \")]),t._v(\" \"),t.user.socialPlatform?s(\"div\",{staticClass:\"user-website\"},[s(\"span\",{staticClass:\"icon\"}),t._v(\" \"),t._l(t.links,(function(e,a){return s(\"a\",{key:a,staticClass:\"pc-link\",attrs:{href:e,target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"\\n                \"+t._s(e)+\"\\n            \")])})),t._v(\" \"),t.links.length>0?s(\"a\",{staticClass:\"mobile-link\",attrs:{target:\"_blank\",href:t.links[0],rel:\"noopener noreferrer\"}},[t._v(t._s(t.links[0]))]):t._e(),t._v(\" \"),t.links.length>1?s(\"b\",{on:{click:t.webShow}},[t._v(\"更多\")]):t._e()],2):t._e(),t._v(\" \"),s(\"div\",{directives:[{name:\"show\",rawName:\"v-show\",value:t.isAccount,expression:\"isAccount\"}],staticClass:\"order-info\",on:{click:t.goOrder}},[t._v(\"\\n            全部订单\\n        \")])])])}),[],!1,null,\"5aa7f656\",null).exports),C=s(165),y=s(152),w={name:\"UIMobileRadioGroup\",model:{prop:\"value\",event:\"change\"},props:{value:{type:Number,default:null},list:{type:Array,default:()=>[]}},data(){return{active:this.value}},methods:{change(t){this.active=t}},watch:{active(t){this.$emit(\"change\",t)}}},x=(s(328),Object(m.a)(w,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"radio-group\"},t._l(t.list,(function(e){return s(\"div\",{key:e.value,staticClass:\"item\",class:{checked:e.value===t.active},on:{click:function(s){return t.change(e.value)}}},[s(\"div\",{staticClass:\"icon\"}),t._v(\" \"),s(\"div\",{staticClass:\"label\"},[t._v(\"\\n            \"+t._s(e.label)+\"\\n        \")])])})),0)}),[],!1,null,\"1954425e\",null).exports),k=s(180),I={name:\"MBoxAccountList\",components:{ImageObject:s(181).a},props:{list:{type:Array,default:()=>[]},showPrice:{type:Boolean,default:!0}}},$=(s(329),Object(m.a)(I,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"account-mbox-list\"},t._l(t.list,(function(e,a){return s(\"div\",{key:\"\"+e.albumId+e.num+a,staticClass:\"item-wrapper\"},[s(\"div\",{staticClass:\"item\",on:{click:function(s){return t.$emit(\"item-click\",e)}}},[s(\"div\",{staticClass:\"cover\"},[s(\"image-object\",{attrs:{src:e.thumbPic}})],1),t._v(\" \"),s(\"div\",{staticClass:\"detail\"},[s(\"div\",{staticClass:\"name\"},[t._v(\"\\n                    \"+t._s(t._f(\"defaultValue\")(e.gName))+\"\\n                \")]),t._v(\" \"),e.num>1?s(\"div\",{staticClass:\"num\"},[t._v(\"\\n                    \"+t._s(1===e.label?\"多开不重\":\"单开\")+\" x \"+t._s(t._f(\"defaultValue\")(e.num))+\"\\n                \")]):s(\"div\",{staticClass:\"num\"},[t._v(\"\\n                    \"+t._s(1===e.label?\"多开不重\":\"单开\")+\"\\n                \")]),t._v(\" \"),s(\"div\",{staticClass:\"price\",class:{\"hide-price\":!t.showPrice}},[s(\"div\",{staticClass:\"text\"},[t._v(\"\\n                        ￥\"+t._s(t._f(\"defaultValue\")(e.priceCny))+\"\\n                    \")]),t._v(\" \"),s(\"button\")])])])])})),0)}),[],!1,null,\"abe8b508\",null).exports),A={name:\"CreativePage\",data(){const{type:t,box:e,sale:s,sub:a}=this.$route.query;return{loading:!0,active:isNaN(Number(t))?2:Number(t),page:1,totalPage:0,list:[],noMore:!1,loadId:(new Date).getTime(),subActive:isNaN(Number(a))?0:Number(a),onlyOnSale:\"true\"===s,user:{},subTabs:[{label:\"藏品\",value:0},{label:\"盲盒\",value:1}],mBoxStatus:isNaN(Number(e))?0:Number(e),radios:[{label:\"在售\",value:1},{label:\"不在售\",value:0}]}},async created(){this.page=1,this.list=[],await this.load()},mounted(){this.syncQuery()},components:{List:i.a,ListSkeleton:n.a,ResponsiveLayout:l.a,AccountInfo:g,ScrollLoader:y.a,RadioGroup:x,Tabs:k.a,Checkbox:C.a,AccountList:$},computed:{isAccount(){const{uid:t,userId:e}=this;return+t==+e},id(){const{id:t}=this.$route.query;return t||\"\"},userId(){const{id:t,uid:e}=this;return t||e},pageSize(){const{isMobile:t}=this;return t?50:60},tabs(){const{isAccount:t}=this,e=t?[\"我拥有的\",\"我卖出的\",\"我创作的\"]:[\"TA拥有的\",\"TA卖出的\",\"TA创作的\"];return[2,1,0].map(((t,s)=>({id:t,title:e[s]})))},...Object(o.b)([\"uid\",\"isLogin\",\"isMobile\"]),...Object(o.b)(\"ethereum\",[\"account\"]),onSale(){const{subActive:t,mBoxStatus:e,onlyOnSale:s}=this;return 0===t?s?1:0:e}},methods:{initShare(){const{headImage:t,userName:e}=this.user;t&&this.initWxShare({title:", "${e}的数字藏品，邀你参观", ",desc:", "${e}的数字收藏品主⻚，戳戳看有哪些新鲜的NFT。", ",link:", "${location.origin}/zh-cn/account/?id=${this.userId}", ",timeLinetitle:", "${e}的数字藏品，邀你参观", ",imgUrl:t.includes(\"http\")?", "${t}", ":", "${location.origin}${t}", "})},async load(){this.loading=!0;const t=this.loadId,{success:e,data:s}=await a.b.getCollectionListByUid({uid:this.userId,type:this.active,pageSize:this.pageSize,page:this.page,subType:this.subActive,onSale:this.onSale});t===this.loadId&&(e?(this.page=s.currPage+1,this.noMore=0===s.hashNext,s&&s.list.length&&this.list.push(...s.list)):this.noMore=!0,this.loading=!1)},change(t){this.active=t},changeSub(t){this.subActive=t},reset(){this.page=1,this.list=[],this.noMore=!1,this.loadId=(new Date).getTime()},onItemClick(t){6!==t.onSale?6===t.onSale||this.isAccount?6!==t.onSale&&this.isAccount&&this.$router.push(", "/zh-cn/mbox/open/?id=${t.albumId}&num=${t.num}&type=${t.label}&from=account${t.gId?", "&gid=${t.gId}", ":\"\"}", "):this.$router.push(", "/zh-cn/mbox/item/?id=${t.albumId}", "):this.$router.push(", "/zh-cn/mbox/item/?id=${t.albumId}&gid=${t.gId}", ")},onUserChange(t){this.user=t},syncQuery(){const{active:t,mBoxStatus:e,onlyOnSale:s,subActive:a,userId:i}=this;history.replaceState(null,document.title,", "?type=${t}&box=${e}&sale=${s}&sub=${a}${i?", "&id=${i}", ":\"\"}", ")}},watch:{active(){this.reset(),this.load(),this.syncQuery()},mBoxStatus(){this.reset(),this.load(),this.syncQuery()},onlyOnSale(){this.reset(),this.load(),this.syncQuery()},subActive(){this.reset(),this.load(),this.syncQuery()},async account(t){t?(await this.loadUserInfo(),this.reset(),await this.load()):this.goHome()},\"user.uid\"(){this.initShare()},userId(){this.page=1,this.list=[],this.noMore=!1,this.load()}}},S=(s(330),Object(m.a)(A,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"responsive-layout\",[s(\"section\",{staticClass:\"page\"},[s(\"account-info\",{on:{change:t.onUserChange}}),t._v(\" \"),s(\"div\",{staticClass:\"list-container\"},[s(\"ul\",{staticClass:\"tabs\"},t._l(t.tabs,(function(e){return s(\"li\",{key:e.id,staticClass:\"tab\",class:{active:e.id===t.active},on:{click:function(s){return t.change(e.id)}}},[t._v(\"\\n                    \"+t._s(e.title)),s(\"i\")])})),0),t._v(\" \"),2===t.active?s(\"div\",{staticClass:\"extend-bar\"},[s(\"div\",{staticClass:\"sub-tabs\"},[s(\"tabs\",{staticClass:\"tabs-custom\",attrs:{list:t.subTabs},model:{value:t.subActive,callback:function(e){t.subActive=e},expression:\"subActive\"}})],1),t._v(\" \"),s(\"div\",{staticClass:\"filter\"},[s(\"radio-group\",{directives:[{name:\"show\",rawName:\"v-show\",value:1===t.subActive,expression:\"subActive === 1\"}],attrs:{list:t.radios},model:{value:t.mBoxStatus,callback:function(e){t.mBoxStatus=e},expression:\"mBoxStatus\"}}),t._v(\" \"),s(\"checkbox\",{directives:[{name:\"show\",rawName:\"v-show\",value:1!==t.subActive,expression:\"subActive !== 1\"}],model:{value:t.onlyOnSale,callback:function(e){t.onlyOnSale=e},expression:\"onlyOnSale\"}},[t._v(\"\\n                        仅看在售\\n                    \")])],1)]):t._e(),t._v(\" \"),s(\"div\",{staticClass:\"list\"},[s(\"scroll-loader\",{attrs:{loading:t.loading,end:t.noMore,\"no-data\":!t.list.length&&!t.loading,\"no-data-tip\":\"暂无收藏\"},on:{load:t.load}},[2===t.active?[0===t.subActive?s(\"list\",{attrs:{products:t.list,\"show-action\":0===t.active,\"show-index\":0!==t.active,\"show-g-name\":!0,\"show-rarity\":!0,\"must-show-author\":!0}}):t._e(),t._v(\" \"),1===t.subActive?s(\"account-list\",{attrs:{list:t.list,\"show-price\":1===t.mBoxStatus},on:{\"item-click\":t.onItemClick}}):t._e()]:[s(\"list\",{attrs:{products:t.list,\"show-action\":0===t.active,\"show-index\":0!==t.active,\"show-g-name\":!0,\"show-rarity\":!0,\"must-show-author\":!0}})]],2),t._v(\" \"),s(\"list-skeleton\",{directives:[{name:\"show\",rawName:\"v-show\",value:t.loading,expression:\"loading\"}],attrs:{size:t.isMobile?4:8}})],1)])],1)])}),[],!1,null,\"32cb8751\",null));e.default=S.exports}}]);"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;写成jd* cz_bh()&amp;#xff0c;这是函数申明&amp;#xff0c;当然啥也不会执行&lt;br /&gt;写成ch_bh()&amp;#xff0c;这是函数调用&amp;#xff0c;在这里调用ch_bh函数&amp;#xff0c;当然会执行啊&lt;br /&gt;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&lt;br /&gt;86行你只是调用了ch_bh()函数&amp;#xff0c;但你没有接收这个函数的返回值啊&amp;#xff0c;改成p &amp;#61; ch_bh();这样p才是函数查找到的节点指针&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["C语言实训的两个问题", ["我一共有两个问题关于我C语言的结课代码", "1、函数无法调用的问题（", "已解决", "）但是不知道原理，希望帮忙解释一下，就是我写的函数声明是 *", "jd", " cz_bh()", ";，当我要调用的时候(", "case '3'的时候调用了", ")把这段代码原封不动写上去函数无法运行，直接跳过了这个函数，但是当我把", "jd*删除", "，只保留cz_bh()后函数又可以正常调用了，我不知道是为什么希望有人帮我解释一下", "\n", "2、查找功能传回去的值不是我需要的值，我定义了一个cz_bh()函数来以此通过编号查找到我存储的零部件信息，当我往cz_bh()中存储信息，如图是我已经输入的数据", "\n", "我要查找，往cz_bh()输入1，结果是编号2的信息，不知道是为什么", "\n", "\n", "于是我开始调试，如图是第二次循环找到了编号为2零部件", "\n", "\n", "然后程序返回了p，截至到这里都没有问题，如图，但是返回后的值有问题，p本应该返回编号为1的值，但是此时返回了编号为2的值", "\n", "\n", "接下来输入什么返回的都是2的值，不知道为什么，我把我的源代码发在底下了，希望有巨佬能忙里抽闲帮我看一下，我必感激不尽", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n", "#", "include", " ", "<conio.h>", "\n\n", "//定义采购信息 ", "\n", "typedef", " ", "struct", " ", "_car", "\n{\n    ", "char", " bh[", "20", "]; ", "//编号", "\n    ", "char", " mc[", "10", "]; ", "//名称", "\n    ", "char", " rq[", "20", "]; ", "//日期", "\n    ", "char", " cgy[", "20", "];", "//采购员", "\n    ", "int", " num;     ", "//数量", "\n    ", "double", " dj;    ", "//单价", "\n    ", "char", " dw[", "5", "];  ", "//单位 ", "\n}car;\n\n\n", "//结点 ", "\n", "typedef", " ", "struct", " ", "_jd", "\n{\n    car lj;      ", "//零件", "\n     \n    ", "struct", " ", "_jd", "* pnext;", "//指向下一个结点的指针 ", "\n}jd;\n\n", "//头结点", "\njd *g_pHead = ", "NULL", "; \n\n", "//函数：菜单 ", "\n", "void", " ", "menu", "()", ";\n\n", "//函数：录入信息", "\n", "void", " ", "lr", "()", "; \n\n", "//函数：打印信息", "\n", "void", " ", "dy", "()", "; \n\n", "//函数：通过编号查找零部件", "\n", "jd* ", "cz_bh", "()", ";\n\n", "//函数：通过名称查找零部件", "\n", "jd* ", "cz_mc", "()", "; \n\n", "//函数：修改零部件信息", "\n", "void", " ", "xg", "()", ";\n\n", "//函数：删除零部件是头结点的信息", "\n", "void", " ", "t_sc", "()", "; \n\n", "//函数：删除零部件不是头结点的信息", "\n", "void", " ", "ft_sc", "()", "; \n\n\n", "int", " ", "main", "()", "\n", "{\n        ", "while", "(", "1", ")\n    {\n        jd* p;\n        p = g_pHead;\n        \n        ", "system", "(", "\"cls\"", "); ", "//清屏 ", "\n    \n        ", "//打开菜单 ", "\n        ", "menu", "();\n    \n        ", "//输入选择 ", "\n        ", "printf", "(", "\"请输入你的选择(直接点击数字，不用进行回车)\\n\"", ");\n    \n        ", "//从键盘中接收一个字符来直接操作 ", "\n        ", "char", " ch = ", "getch", "();\n        ", "switch", "(ch)\n       {\n        ", "case", " ", "'1'", ":\n            ", "printf", "(", "\"接下来是采购信息的录入\\n\"", ");\n            ", "lr", "();\n        ", "break", ";\n        \n        ", "case", " ", "'2'", ":\n            ", "printf", "(", "\"接下来是打印所有零部件采购信息\\n\"", ");\n            ", "dy", "();\n        ", "break", ";\n        \n        ", "case", " ", "'3'", ":\n        {\n            ", "printf", "(", "\"接下来是通过编号查找零部件\\n\"", ");\n            ", "cz_bh", "();\n            ", "if", "(p != ", "NULL", ") \n            {\n                ", "printf", "(", "\"*编号:%s\\t*名称:%s\\t*日期:%s\\t*采购员:%s\\t*数量%d\\t*单价:%.2lf\\t*单位:%s*\\n\"", ",p->lj.bh,p->lj.mc,p->lj.rq,p->lj.cgy,p->lj.num,p->lj.dj,p->lj.dw);\n            }\n            \n            ", "else", "\n            {\n                ", "printf", "(", "\"查找失败，未检查到所输入的编号，请您重新检查输入\\n\"", "); \n            }\n            ", "system", "(", "\"pause\"", ");\n        ", "break", ";\n       }\n        \n        ", "case", " ", "'4'", ":\n        {\n            ", "printf", "(", "\"接下来是通过名称查找零部件\\n\"", ");\n            ", "cz_mc", "(); \n            ", "if", "(p != ", "NULL", ") \n            {\n                ", "printf", "(", "\"*编号:%s\\t*名称:%s\\t*日期:%s\\t*采购员:%s\\t*数量%d\\t*单价:%.2lf\\t*单位:%s*\\n\"", ",p->lj.bh,p->lj.mc,p->lj.rq,p->lj.cgy,p->lj.num,p->lj.dj,p->lj.dw);\n            }\n            \n            ", "else", " ", "if", "(p == ", "NULL", ")\n            {\n                ", "printf", "(", "\"查找失败，未检查到所输入的名称，请您重新检查输入\"", "); \n            }\n            ", "system", "(", "\"pause\"", ");\n        ", "break", ";\n        }\n        \n        ", "case", " ", "'5'", ":\n            ", "printf", "(", "\"接下来是给定采购编号，修改采购信息\\n\"", "); \n            ", "xg", "();\n        ", "break", ";\n        \n        ", "case", " ", "'6'", ":\n        {\n            ", "int", " i;\n            ", "printf", "(", "\"接下来是给定采购编号，删除采购信息\\n\"", ");\n            ", "printf", "(", "\"请输入需要删除的零部件的编号是否是您最后输入的零部件(是或只有一个零部件按1，不是按0):\\n\"", ");\n            ", "scanf", "(", "\"%d\"", ",&i);\n            ", "if", "(i==", "1", ")\n            {\n                ", "t_sc", "();\n            }\n            ", "else", " ", "if", "(i==", "0", ")\n            {\n                ", "ft_sc", "();\n            }\n            ", "else", "\n            {\n                ", "printf", "(", "\"对不起，您的输入有误，请重新检查输入\\n\"", ");\n                ", "system", "(", "\"pause\"", ");\n            }\n        ", "break", ";\n        }\n        \n        ", "case", "'7'", ":\n            ", "printf", "(", "\"感谢您的下次使用，再见\"", ");\n            ", "return", " ", "0", "; \n        ", "break", ";\n        \n        ", "default", ":\n        ", "printf", "(", "\"您当前输入有误，请您确认您的操作再重试\\n\"", ");\n        ", "system", "(", "\"pause\"", ");\n        ", "break", ";\n        } \n    }\n    \n    ", "return", " ", "0", ";\n}\n\n", "void", " ", "menu", "()", "\n", "{\n    ", "printf", "(", "\"******汽车零部件采购程序******\\n\"", ");\n    ", "printf", "(", "\"\\t(1)能从键盘输入采购信息。\"", ");\n    ", "printf", "(", "\"\\n\\t(2)打印所有零部件信息。\"", ");\n    ", "printf", "(", "\"\\n\\t(3)指定采购编号，显示采购的零部件信息。\"", ");\n    ", "printf", "(", "\"\\n\\t(4)指定零部件名称，显示该零部件的所有采购信息。\"", ");\n    ", "printf", "(", "\"\\n\\t(5)给定采购编号，修改采购信息。\"", ");\n    ", "printf", "(", "\"\\n\\t(6)给定采购编号，删除采购信息。\"", ");\n    ", "printf", "(", "\"\\n\\t(7)退出程序\\n\"", ");\n}\n\n", "void", " ", "lr", "()", "\n", "{\n    ", "//创建一个新结点", "\n    jd* pjd=(jd*)", "malloc", "(", "sizeof", "(jd)); \n    pjd->pnext=", "NULL", ";\n    \n    ", "//头插法", "\n    ", "if", "(g_pHead == ", "NULL", ") ", "//没有结点，赋予结点 ", "\n    {\n        g_pHead = pjd;\n    }\n    ", "else", "                ", "//有结点", "\n    {\n        pjd->pnext = g_pHead;", "//新结点的下一个为头结点", "\n        g_pHead = pjd;      ", "//则头结点为新设的结点 ", "\n    }\n    \n    ", "printf", "(", "\"请输入编号(例如:1 2 3):\\n\\t\"", ");\n    ", "scanf", "(", "\"%s\"", ",pjd->lj.bh); ", "//编号", "\n    \n    ", "printf", "(", "\"请输入零部件名称(例如:xxx):\\n\\t\"", ");\n    ", "scanf", "(", "\"%s\"", ",pjd->lj.mc); ", "//名称", "\n    \n    ", "printf", "(", "\"请输入日期(例如:xx):\\n\\t\"", ");\n    ", "scanf", "(", "\"%s\"", ",pjd->lj.rq); ", "//日期", "\n    \n    ", "printf", "(", "\"请输入采购员名称(例如:张三):\\n\\t\"", ");\n    ", "scanf", "(", "\"%s\"", ",pjd->lj.cgy);", "//采购员 ", "\n    \n    ", "printf", "(", "\"请输入采购数量(例如:2):\\n\\t\"", ");\n    ", "scanf", "(", "\"%d\"", ",&pjd->lj.num);", "//数量 ", "\n    \n    ", "printf", "(", "\"请输入零部件单价(例如:2.00):\\n\\t\"", ");\n    ", "scanf", "(", "\"%lf\"", ",&pjd->lj.dj);", "//单价 ", "\n    \n    ", "printf", "(", "\"请输入零部件价格单位(例如:SF):\\n\\t\"", "); \n    ", "scanf", "(", "\"%s\"", ",pjd->lj.dw); ", "//单位 ", "\n    \n    ", "printf", "(", "\"零部件信息录入成功!\\n\"", ");\n    ", "printf", "(", "\"如果您想继续输入，请在看到请按任意键继续后回到菜单继续按1录入信息\\n\"", ");\n    \n    ", "system", "(", "\"pause\"", "); ", "//停顿 ", "\n      ", "return", ";\n}\n", "//*********************", "\n", "//********", "\n", "//*************", "\n\n", "void", " ", "dy", "()", "\n", "{\n    ", "printf", "(", "\"******************************************************\\n\"", ");\n    ", "printf", "(", "\"*\\t       欢迎使用汽车零部件管理系统            *\\n\"", ");\n    ", "printf", "(", "\"******************************************************\\n\"", "); \n    \n    ", "printf", "(", "\"*编号\\t*名称\\t*日期\\t*采购员\\t*数量\\t*单价\\t*单位*\\n\"", ");\n    ", "printf", "(", "\"******************************************************\\n\"", ") ;\n    \n    ", "//遍历链表", "\n    jd* p =g_pHead; ", "//让p指向头指针", "\n    ", "while", "(p != ", "NULL", ")", "//只要结点不为空就让循环往下走 ", "\n    {\n    ", "printf", "(", "\"*%s\\t*%s\\t*%s\\t*%s\\t*%d\\t*%.2lf\\t*%s*\\n\"", ",\n        p->lj.bh,\n        p->lj.mc,\n        p->lj.rq,\n        p->lj.cgy,\n        p->lj.num,\n        p->lj.dj,\n        p->lj.dw);\n        \n        p=p->pnext; ", "//指向下一个 ", "\n    } \n     \n    ", "system", "(", "\"pause\"", ");\n}\n\n", "jd* ", "cz_bh", "()", "\n", "{\n    ", "char", " cz_bh[", "20", "];\n    \n    ", "printf", "(", "\"请输入你想查找的零件的编号:\\n\"", ");\n    ", "scanf", "(", "\"%s\"", ",cz_bh);\n    \n    jd* p=g_pHead;\n    ", "while", "(p!=", "NULL", ")\n    {\n        ", "if", "(", "strcmp", "(p->lj.bh,cz_bh)==", "0", ") ", "//会报警告 ", "\n        {\n            ", "return", " p;\n        }\n        \n        p = p->pnext;\n    }\n    ", "return", " ", "NULL", "; \n}\n\n", "jd* ", "cz_mc", "()", "\n", "{\n    ", "char", " cz_mc[", "20", "];\n    \n    ", "printf", "(", "\"请输入你想查找的零件的名称:\\n\"", ");\n    ", "scanf", "(", "\"%s\"", ",cz_mc);\n    \n    jd* p =g_pHead;\n    ", "while", "(p!=", "NULL", ")\n    {\n        ", "if", "(", "strcmp", "(p->lj.mc,cz_mc)==", "0", ")\n        {\n            ", "return", " p;\n        }\n        \n        p=p->pnext; \n    }\n    ", "return", " ", "NULL", "; \n}\n\n", "void", " ", "xg", "()", "\n", "{\n    ", "char", " xg_bh[", "20", "];\n    ", "printf", "(", "\"请输入需要修改的零部件的采购编号\\n\"", ");\n    ", "scanf", "(", "\"%s\"", ",xg_bh);\n    \n    jd* p=g_pHead;\n    ", "while", "(p!=", "NULL", ")\n    {\n        ", "if", "(", "strcmp", "(p->lj.bh,xg_bh)==", "0", ") ", "//p->li.bh与xg_bh不能用等号比较 ", "\n        {\n            ", "printf", "(", "\"请输入修改后的零部件名称:\\n\"", ");\n            ", "scanf", "(", "\"%s\"", ",p->lj.mc);\n            ", "printf", "(", "\"修改成功\\n\"", ");\n            ", "system", "(", "\"pause\"", ");\n            ", "break", ";\n        }\n        p = p->pnext;\n    }\n    \n    ", "if", "(p == ", "NULL", ")\n    {\n        ", "printf", "(", "\"未能找到此采购编号对应零部件，请检查编号\\n\"", "); \n        ", "system", "(", "\"pause\"", ");\n    }\n}\n\n", "void", " ", "t_sc", "()", "\n", "{\n    jd* p1;\n    ", "char", " sc_bh[", "20", "];\n    ", "printf", "(", "\"请输入你所想要删除的零部件的编号:\"", ");\n    ", "scanf", "(", "\"%s\"", ",sc_bh);\n    \n    ", "//如果是头结点 ", "\n    ", "if", "(", "strcmp", "(g_pHead->lj.bh,sc_bh)==", "0", ")  \n    {\n        p1 = g_pHead;            ", "//备份头结点 ", "\n        g_pHead = g_pHead->pnext;", "// 将头结点指向下一个结点 ", "\n        ", "free", "(p1); ", "//删除就是释放这段内存 ,p1被赋予了头结点，但是头结点已经指向下一个结点 ", "\n        ", "printf", "(", "\"恭喜，删除成功\\n\"", ");\n        ", "system", "(", "\"pause\"", ");\n        ", "return", ";\n    }\n    \n    ", "else", "\n    {\n        ", "printf", "(", "\"对不起，删除失败，请检查你输入的编号\\n\"", ");\n        ", "system", "(", "\"pause\"", ");\n        ", "return", ";\n    }\n}\n\n", "void", " ", "ft_sc", "()", "\n", "{\n    ", "//如果不是头结点", "\n    ", "char", " sc1_bh[", "20", "];\n    ", "printf", "(", "\"请输入你所想要删除的零部件的编号:\"", ");\n    ", "scanf", "(", "\"%s\"", ",sc1_bh);\n    jd* p = g_pHead;\n    jd* p2;                  ", "//p2是备份的 ", "\n    ", "while", "(p2->pnext != ", "NULL", ")\n    {\n        ", "if", "(", "strcmp", "(p->pnext->lj.bh,sc1_bh)==", "0", ")\n        {\n            p2 = p->pnext;             ", "//备份头结点 ", "\n            p->pnext = p->pnext->pnext;", "//中间结点(要删除的结点)的上一个结点是头结点，头结点的下一个结点是中间节点的后一个结点 ，把中间结点指向第三个结点 ", "\n            ", "free", "(p2);\n        }\n        \n        ", "if", "(p->pnext == ", "NULL", ") ", "//中间结点已删除.  NULL会警告，'0'不会 ，char变量和指针变量不能比较 ", "\n        {\n            ", "printf", "(", "\"恭喜，成功删除\\n\"", ");\n            ", "system", "(", "\"pause\"", ");\n            ", "return", ";\n        } \n        \n        p = p->pnext;\n        \n        ", "if", "(p->pnext == ", "NULL", ")", "//跳出循环，表示零件不存在", "\n        {\n            ", "printf", "(", "\"对不起，删除失败，请检查你输入的编号\\n\"", ");\n            ", "system", "(", "\"pause\"", ");\n            ", "return", ";\n        }         \n    }\n\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;cstdio&amp;gt;\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main() {\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; a &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; a&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; b &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; b &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; b&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b &amp;#61;&amp;#61; a) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; c &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; c &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; c&amp;#43;&amp;#43;) {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c &amp;#61;&amp;#61; a || c &amp;#61;&amp;#61; b) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; abc &amp;#61; a * &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; &amp;#43; b * &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; c;\n                &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &amp;#61; abc * &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; ghi &amp;#61; abc * &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (ghi &amp;gt; &lt;span class=\"hljs-number\"&gt;987&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;// ghi 最大只能是 987&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; d &amp;#61; &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-regexp\"&gt;/ 100, e &amp;#61; def /&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, f &amp;#61; &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; g &amp;#61; ghi &lt;span class=\"hljs-regexp\"&gt;/ 100, h &amp;#61; ghi /&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, i &amp;#61; ghi % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (d !&amp;#61; e &amp;amp;&amp;amp; d !&amp;#61; f &amp;amp;&amp;amp; d !&amp;#61; g &amp;amp;&amp;amp; d !&amp;#61; h &amp;amp;&amp;amp; d !&amp;#61; i &amp;amp;&amp;amp;\n                    e !&amp;#61; f &amp;amp;&amp;amp; e !&amp;#61; g &amp;amp;&amp;amp; e !&amp;#61; h &amp;amp;&amp;amp; e !&amp;#61; i &amp;amp;&amp;amp;\n                    f !&amp;#61; g &amp;amp;&amp;amp; f !&amp;#61; h &amp;amp;&amp;amp; f !&amp;#61; i &amp;amp;&amp;amp;\n                    g !&amp;#61; h &amp;amp;&amp;amp; g !&amp;#61; i &amp;amp;&amp;amp; h !&amp;#61; i) {\n                        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d\\n&amp;#34;&lt;/span&gt;, abc, &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt;, ghi);\n                }\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["c++排列组合刘汝佳紫书", ["题目：用1,2，3，…，9组成3个数abc,def和ghi，每个数字恰好用一次，要求abc：def:ghi=1:2:3。按照\"abc def ghi\"的格式输出所有解，每行一个解", "下面是我的解答代码，但是遗漏了一个输出 267 534 801", "\n", "#", "define", " _CRT_SECURE_NO_WARNINGS ", "\n", "#", "include", "<cmath>", "\n", "#", "include", "<functional>", "\n", "#", "include", "<cstdio>", "\n", "using", " ", "namespace", " std;\n", "int", " ", "main", "()", " ", "{\n    ", "auto", " i = ", "0", ", j = i, k = j;\n    ", "for", "(i=", "1", ";i<=", "9", ";i++)\n        ", "for", " (j = ", "1", "; j <= ", "9", "; j++) {\n            ", "for", " (k = ", "1", "; k <= ", "9", "; k++) {\n                ", "auto", " abc = i * ", "100", " + j * ", "10", " + k, def = ", "2", " * abc, ghi = ", "3", " * abc;\n                ", "if", " (ghi >= ", "1000", ")", "continue", ";\n                ", "bool", " g[", "10", "]{ ", "false", " };\n                g[i] = ", "true", "; g[j] = ", "true", "; g[k] = ", "true", ";\n                g[def % ", "10", "] = ", "true", "; g[def % ", "100", " / ", "10", "] = ", "true", "; g[def / ", "100", "] = ", "true", ";\n                g[ghi % ", "10", "] = ", "true", "; g[ghi % ", "100", " / ", "10", "] = ", "true", "; g[ghi / ", "100", "] = ", "true", ";\n                ", "auto", " flag = ", "true", ";\n                ", "for", " (", "int", " q = ", "1", "; q <= ", "9", "; q++) {\n                    ", "if", " (!g[q]) { flag = ", "false", ";\n                    ", "break", ";\n                    }\n                    \n                }\n                ", "if", " (flag)", "printf", "(", "\"%d %d %d\\n\"", ", abc, def, ghi);\n            }\n        }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;O(n)的&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m;\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;\n    &lt;span class=\"hljs-function\"&gt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; &lt;span class=\"hljs-title\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; &amp;#43;&amp;#43;i) {\n        cin &amp;gt;&amp;gt; a[i];\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ans &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; (n - m &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; &amp;#43;&amp;#43;i) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; m / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; &amp;#43;&amp;#43;j) {\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x &amp;#61; a[i * m &amp;#43; j];\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; y &amp;#61; a[(i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) * m - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; - j];\n            ans &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(x - y);\n        }\n    }\n    cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["求一个C++ Problem 的解法", ["小H觉得回文数字是非常美的，但是现实中遇到的数字串并非全部都是回文，因此小H要将连续若干个数变成回文，例如[2 4 6 4 3]，最少改变数字数量1个，即2改成3或3改成2。但是仅仅这么算作为第四题太简单了，因此要加大难度。出题人除了给你n个数ai外，还给了你一个奇数m。由经验可知n个数可以划分出n-m+1个子串（每个子串个数为m），现在需要你计算出每个子串都转换为回文的变化总次数。当然为了加深小H对题目的理解，出题者对样例进行如下解释，", "例如样例中可以生成4个子串，其中第一个子串[2 3 9 3 6]需要变化1次，第二个子串[3 9 3 6 3]需要变化次数为1，第三个子串[9 3 6 3 9]需要变化次数为0，[3 6 3 9 7]需要变化次数为2。所以答案就是1+1+0+2=4。", "输入", "第一行输入n和m。", "第二行输入n个整数ai。", "输出", "输出所有子串变成回文的变化次数之和", "样例输入", "8 5", "2 3 9 3 6 3 9 7", "样例输出", "4", "数据规模：", "70%数据 n<=300", "100%数据 1<=m<=n<=10^6 (m保证为奇数) 1<=ai<=10^6", "\n", "O(nm) 的会超时"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我这里把函数f()里面sum的数据类型改为double&amp;#xff0c;结果就和题目所给出的一致了&amp;#xff0c;所以推测应该是求阶乘这里的原因。&lt;br /&gt;&lt;br /&gt;修改如下:&lt;br /&gt;&lt;br /&gt;参考链接&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/ZHangFFYY/article/details/53043885\" id=\"textarea_1681094499200_1681094647034_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1 md_link_url\"&gt;\n         https://blog.csdn.net/ZHangFFYY/article/details/53043885\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=\"https://www.jianshu.com/p/67d55d7b1480\" id=\"textarea_1681094499200_1681094647034_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1 md_link_url\"&gt;\n         https://www.jianshu.com/p/67d55d7b1480\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;f&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; sum&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        sum*&amp;#61;i;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; sum;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;// https://blog.csdn.net/ZHangFFYY/article/details/53043885&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;// https://www.jianshu.com/p/67d55d7b1480&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; x,e,x2,x3,x4;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf %lf&amp;#34;&lt;/span&gt;,&amp;amp;x,&amp;amp;e);\n    x2&amp;#61;x;\n    x3&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    x4&amp;#61;x;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j,flag&amp;#61;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,cnt&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;x3&amp;gt;&amp;#61;e;i&amp;#43;&amp;#43;)\n    {\n        x3&amp;#61;x2;\n        x4*&amp;#61;x*x;        \n        x2&amp;#61;x2&amp;#43;x4*flag/&lt;span class=\"hljs-built_in\"&gt;f&lt;/span&gt;((&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;));\n        flag&amp;#61;-flag;\n        x3&amp;#61;&lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(x2-x3);\n        cnt&amp;#43;&amp;#43;;\n    \n    } \n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %.9lf&amp;#34;&lt;/span&gt;,cnt,x2);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/14841449018615.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["用c求sin的近似值", ["【问题描述】", "\n", "给定一个精度值e，用下列公式计算sin(x)的近似值，要求前后两次迭代之差的绝对值小于e，给出相应的最小迭代次数n和最后一次计算的sin(x)值。", "\n", " sin x = x - x3/3! + x5/5! - x7/7! + ... + (-1)n-1x2n-1/(2n-1)!", "\n", " 其中x为弧度，n为正整数。", "\n", " 【输入形式】", "\n", "从控制台输入x( （0<x<=10） )和e( x>e>0 )的值，以一个空格分隔。", "\n", "【输出形式】", "\n", "输出迭代次数n和最后一次计算的sin(x)的值（以一个空格分隔，并且输出sin(x)时要求小数点后保留9位有效数字）。", "\n", "【样例输入】", "\n", "1.23 0.0000001", "\n", "【样例输出】", "\n", "7 0.942488802", "\n", "【样例说明】", "\n", "输入的x为1.23，精度值e为0.0000001。当n为5时，利用上述公式计算sin(x)的值为0.942489044，n为6时计算的结果为0.942488800，两结果之差的绝对值约为0.000000244，大于要求的精度值0.0000001，故需要继续迭代计算。当n为7时计算的结果为0.942488802，与n为6的计算结果之差的绝对值约为0.000000002，小于要求的精度值，所以最小迭代次数应为7，最后一次计算的sin(x)的值为0.942488802（小数点后保留9位有效数字）。", "\n", "注意：", "(1) 为保证计算精度，请使用double数据类型保存计算数据。", "(2) 应至少迭代两次，即：n>=2。", "\n", "n=7时测试数据与我的结果数据差了一点点，思路和其他测试数据都一样，不知道为啥。", "\n", "#include<stdio.h>", "\n", "#include<math.h>", "\nint f(int n)\n{\n    int i,", "sum", "=1;\n    ", "for", "(", "i", "=1;i<=n;i++)\n    {\n        sum*=i;\n    }\n    return sum;\n}\nint main()\n{\n    double x,e,x2,x3,x4;\n    scanf(", "\"%lf %lf\"", ",&x,&e);\n    ", "x2", "=x;\n    ", "x3", "=1;\n    ", "x4", "=x;\n    int i,j,", "flag", "=-1,cnt=1;\n    ", "for", "(", "i", "=2;x3>=e;i++)\n    {\n        ", "x3", "=x2;\n        x4*=x*x;        \n        ", "x2", "=x2+x4*flag/f((2*i-1));\n        ", "flag", "=-flag;\n        ", "x3", "=fabs(x2-x3);\n        cnt++;\n    \n    } \n    printf(", "\"%d %.9lf\"", ",cnt,x2);\n    return 0;\n}\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;算法思路&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;首先判断字符串s是否为回文串&amp;#xff0c;如果是&amp;#xff0c;则s本身就是特殊的回文子串&amp;#xff0c;直接返回s的长度&amp;#xff1b;&lt;/li&gt;&lt;li&gt;如果s不是回文串&amp;#xff0c;则遍历s中的每个字符&amp;#xff0c;以该字符为中心向两侧扩展&amp;#xff0c;寻找最长的回文子串&amp;#xff0c;记为s1&amp;#xff1b;&lt;/li&gt;&lt;li&gt;对于s1的每个字符&amp;#xff0c;将其和其它字符交换后再次判断是否为回文串&amp;#xff0c;如果是&amp;#xff0c;则更新最长的特殊回文子串的长度。&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;C语言实现&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;.h&amp;gt;\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; is&lt;span class=\"hljs-constructor\"&gt;_palindrome(&lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;start&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;end&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (start &amp;lt; &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;start&lt;/span&gt;]&lt;/span&gt; !&amp;#61; s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;end&lt;/span&gt;]&lt;/span&gt;) {\n            return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n        start&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;--;\n    }\n    return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; longest&lt;span class=\"hljs-constructor\"&gt;_special_palindrome(&lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n &amp;#61; strlen(s);\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; max_len &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n    &lt;span class=\"hljs-comment\"&gt;/* 判断s本身是否为回文串 */&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (is&lt;span class=\"hljs-constructor\"&gt;_palindrome(&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;, 0, &lt;span class=\"hljs-params\"&gt;n&lt;/span&gt; - 1)&lt;/span&gt;) {\n        return n;\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;/* 以每个字符为中心向两侧扩展 */&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; len &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i - len &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;i &amp;#43; len &amp;lt; n&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt; - &lt;span class=\"hljs-identifier\"&gt;len&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-identifier\"&gt;len&lt;/span&gt;]&lt;/span&gt;) {\n            len&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (len &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n            &lt;span class=\"hljs-comment\"&gt;/* 对于每个回文子串&amp;#xff0c;交换其中的字符判断是否为特殊回文子串 */&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; i - len &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; i &amp;#43; len - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j&amp;#43;&amp;#43;) {\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k &amp;#61; j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; k &amp;lt;&amp;#61; i &amp;#43; len - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; k&amp;#43;&amp;#43;) {\n                    &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; tmp &amp;#61; s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;;\n                    s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt; &amp;#61; s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;]&lt;/span&gt;;\n                    s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;]&lt;/span&gt; &amp;#61; tmp;\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (is&lt;span class=\"hljs-constructor\"&gt;_palindrome(&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;i&lt;/span&gt; - &lt;span class=\"hljs-params\"&gt;len&lt;/span&gt; &amp;#43; 1, &lt;span class=\"hljs-params\"&gt;i&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-params\"&gt;len&lt;/span&gt; - 1)&lt;/span&gt;) {\n                        max_len &amp;#61; len;\n                    }\n                    &lt;span class=\"hljs-comment\"&gt;/* 恢复原来的字符串 */&lt;/span&gt;\n                    tmp &amp;#61; s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;;\n                    s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt; &amp;#61; s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;]&lt;/span&gt;;\n                    s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;]&lt;/span&gt; &amp;#61; tmp;\n                }\n            }\n        }\n    }\n\n    return max_len;\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;]&lt;/span&gt;;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, s);\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; len &amp;#61; longest&lt;span class=\"hljs-constructor\"&gt;_special_palindrome(&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;)&lt;/span&gt;;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, len);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;时间复杂度&amp;#xff1a;$O(n^3)$&amp;#xff0c;其中$n$为字符串s的长度。&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["特殊的回文子串C语言", ["给定一个字符串s,s中只包含数字,请返回s中最长的特殊的回文子串的长度", "特殊的回文子串t满足", "t进行任何次交换后可以变成一个回文字符申", "输入格式：", "输入第一行包含一个字符串s", "输出格式：", "特殊的回文子串的最长长度", "\n", "有无给个正确算法"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;chatgpt:&lt;br /&gt;&lt;strong&gt;下面是完整的C语言代码实现&amp;#xff1a;&lt;/strong&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main() {\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; para[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;}, {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;}, {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;}, {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;17&lt;/span&gt;}};\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; threshold &amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; min_sum &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * threshold;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; min_idx &amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; j &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;; j&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; sum &amp;#61; para[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#43; para[j][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum &amp;gt; threshold &amp;amp;&amp;amp; sum &amp;lt; min_sum) {\n                min_sum &amp;#61; sum;\n                min_idx &amp;#61; i * &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; j;\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (min_idx &amp;#61;&amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;No suitable combination found.\\n&amp;#34;&lt;/span&gt;);\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; idx1 &amp;#61; min_idx / &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; idx2 &amp;#61; min_idx % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Combination: %c&amp;#43;%c\\n&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &amp;#43; idx1, &lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &amp;#43; idx2);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Result: %d,%d\\n&amp;#34;&lt;/span&gt;, min_sum, para[idx1][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; para[idx2][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;代码中的para数组表示参数的属性值&amp;#xff0c;threshold表示门槛值&amp;#xff0c;min_sum表示第一个参数之和最小的组合的第一个参数之和&amp;#xff0c;min_idx表示第一个参数之和最小的组合在para数组中的下标&amp;#xff0c;-1表示没有找到符合条件的组合。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;在代码中&amp;#xff0c;使用了两个循环来遍历所有可能的组合&amp;#xff0c;对于每个组合&amp;#xff0c;计算第一个参数之和sum&amp;#xff0c;并检查sum是否满足要求。如果满足&amp;#xff0c;就更新min_sum和min_idx。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;最后&amp;#xff0c;判断min_idx是否为-1&amp;#xff0c;如果是&amp;#xff0c;则输出提示信息&amp;#xff1b;否则&amp;#xff0c;计算出组合中每个参数的下标&amp;#xff0c;输出组合和结果。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;注意&amp;#xff1a;本代码中假设参数个数为4&amp;#xff0c;如果参数个数增加&amp;#xff0c;需要相应地修改代码&lt;/strong&gt;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["求一个排列组合优选程序的编程思路", ["问题如下：", "假设每个参数有两个属性值，例如：", "参数A（5，7）", "参数B（7，9）", "参数C（4，10）", "参数D（12，17）", "现在有一个门槛值E，求第一个参数之和大于门槛值，且小于门槛值2倍的情况下，同时第二个参数之和最小的组合。", "比如门槛值E为10。", "那么门槛区间为10~20。", "那么满足门槛区间值要求的组合有：", "A+B+C（16），A+B（12），A+D（17），B+C（11）,B+D（19）, C+D（16），D（12） ，共有7个组合。", "对应的第二个参数值之和为：", "26（A+B+C）,16（A+B），24(A+D)，19（B+C），26(B+D)，27（C+D）, 17（D），这里面第二个组合A+B的第二个参数和最小（16）。", "所以应该筛选输出A+B这对组合结果（即12,16）以及组合组成（即A+B）。", "\n", "之前尝试用数组操作的方式解决，但是发现在数组中如果出现重复数字，例如A+B组合为12，D也为12，即无法识别该数字的组合来源。", "\n", "所以现在没有解决思路了，想看下各位有没有什么思路。谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;原因是注释标注里的if语句没有返回值。求解代码如下&amp;#xff1a;&lt;/p&gt;", "Konwledge_Point": "算法与数字", "Question": ["关于#c++#的问题，买不到的数目", ["买不到的数目", "小明开了一家糖果店。", "他别出心裁：把水果糖包成4颗一包和7颗一包的两种。", "糖果不能拆包卖。", "小朋友来买糖的时候，他就用这两种包装来组合。", "当然有些糖果数目是无法组合出来的，比如要买 10 颗糖。", "你可以用计算机测试一下，在这种包装情况下，最大不能买到的数量是17。", "大于17的任何数字都可以用4和7组合出来。", "本题的要求就是在已知两个包装的数量时，求最大不能组合出的数字。", "\n", "输入格式：", "两个正整数 n,m，表示每种包装中糖的颗数。", "输出格式：", "一个正整数，表示最大不能买到的糖数。", "\n", "数据范围", "2≤n,m≤1000 保证数据一定有解。", "\n", "输入样例：", "4 7", "输出样例：", "17", "\n", "\n```c++\n", "#", "include", "<iostream>", "\n", "#", "include", "<cstring>", "\n", "#", "include", "<string>", "\n", "#", "include", "<algorithm>", "\n", "#", "include", "<string>", "\n", "#", "include", "<stdlib.h>", "\n", "using", " ", "namespace", " std;\n", "bool", " ", "dfs", "(", "int", " i, ", "int", " n, ", "int", " m)", " ", "{\n    ", "if", " (i == ", "0", ") ", "return", " ", "true", ";\n    ", "/*if (i >= n) dfs(i - n, n, m);//注释里的为什么错了?\n    if (i >= m) dfs(i - m, n, m);*/", "\n    ", "if", " (i >= n && ", "dfs", "(i - n, n, m))  ", "return", " ", "true", ";\n    ", "if", " (i >= m && ", "dfs", "(i - m, n, m))  ", "return", " ", "true", ";\n    ", "return", " ", "false", ";\n}\n", "int", " ", "main", "()", " ", "{\n    ", "int", " n, m,res=", "0", ";\n    ", "scanf", "(", "\"%d %d\"", ", &n, &m);\n    ", "for", " (", "int", " i = ", "1", "; i < ", "1000", "; i++) {\n        ", "if", " (", "dfs", "(i, n, m) == ", "false", ") res = i;\n    }\n    ", "printf", "(", "\"%d\"", ", res);\n    ", "return", " ", "0", ";\n}\n\n", "\n", "求解答注释里的为什么错了?"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;UPDATE&lt;/span&gt; ks_Card &lt;span class=\"hljs-keyword\"&gt;SET&lt;/span&gt; Card_ID &amp;#61; REPLACE(Emp_ID, &lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;WHERE&lt;/span&gt; Emp_ID &lt;span class=\"hljs-keyword\"&gt;LIKE&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;A%&amp;#39;&lt;/span&gt;; \n&lt;span class=\"hljs-keyword\"&gt;SELECT&lt;/span&gt; Employee_ID, &lt;span class=\"hljs-type\"&gt;Name&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;FROM&lt;/span&gt; hr_EmployeeBase &lt;span class=\"hljs-keyword\"&gt;WHERE&lt;/span&gt; GetInDate &lt;span class=\"hljs-keyword\"&gt;BETWEEN&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;2010-04-01&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;AND&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;2010-04-30&amp;#39;&lt;/span&gt;;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与数字", "Question": ["数据库服务器的问题。", ["员工资料表 表名：hr_EmployeeBase 包含字段：(Employee_ID(员工编号), Name(姓名), GetInDate(录入日期))", "员工ID卡表 表名：ks_Card 包含字段：(Card_ID(卡号), Emp_ID(员工编号))", "说明：两个表用Emp_ID和Employee_ID关联", "1.写SQL查询，把所有员工编号是“A”开头的员工卡号更新为将字母“A”替换为数字“1”的员工编号（如员工编号为“A0001”的员工卡号要更新为“10001”）", "2.写SQL查询录用日期为2010年4月录用的员工"]], "Tag": "算法设计"}
