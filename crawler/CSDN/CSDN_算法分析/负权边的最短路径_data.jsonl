{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;Dijkstra算法伪代码 \n\nfor each node v    \n    dis(v) ← &amp;#43;∞    \n    previous (v) ← undefined    \n    dis(source) ← 0    \n    while num(S) &amp;lt; n    ▷ S为顶点集合\n        u ← node with smallest distance    \n        Remove u    \n        for each node v in S    \n            alt ← dis(u) &amp;#43; dis(u,v)    \n            if alt &amp;lt; dis(v) then    \n                dis(v) ← alt    ▷ 更新距离\n                previous(v) ← u    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;可以参考这篇博客&amp;#xff08;含MATLAB代码&amp;#xff09;&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/lishan132/article/details/108527271\" id=\"textarea_1650988419256_1650988630188_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/lishan132/article/details/108527271&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;这篇里面有讲解&amp;#xff08;有示例讲解&amp;#xff09;&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/L_J_Kin/article/details/103061420\" id=\"textarea_1650988419256_1650988630188_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/L_J_Kin/article/details/103061420&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["Matlab 最短路径 起始点出发，回到起始点，经过所有点", ["利用matlab图论知识求解，从起始点出发，经过其他所有点，然后返回起始点，求最短路径"]], "Tag": "算法设计"}
{"Answer": "TSP问题本质和城市间最短路径寻优问题一样，都是求两个点的最优路径，这种问题你要把这些实际数据想成是图的操作\r\nhttp://www.cnblogs.com/biaoyu/archive/2012/09/26/2704456.html", "Konwledge_Point": "负权边的最短路径", "Question": ["蚁群算法 寻找最短路径的问题", ["想搞个城市间最短路径寻优，网上全都是tsp问题，我只想要起点到终点的最优路径，不需要返回，该怎么写。。。能不能给点代码……"]], "Tag": "算法设计"}
{"Answer": "https://cloud.tencent.com/developer/article/1073087", "Konwledge_Point": "负权边的最短路径", "Question": ["这个最短路径的问题，用C语言怎么解决", ["Problem Description", "\nThere are N cities in the country. Each city is represent by a matrix size of M*M. If city A, B and C satisfy that A*B = C, we say that there is a road from A to C with distance 1 (but that does not means there is a road from C to A).", "\nNow the king of the country wants to ask me some problems, in the format:", "\nIs there is a road from city X to Y?", "\nI have to answer the questions quickly, can you help me?", "\n\n", "Input", "\nEach test case contains a single integer N, M, indicating the number of cities in the country and the size of each city. The next following N blocks each block stands for a matrix size of M*M. Then a integer K means the number of questions the king will ask, the following K lines each contains two integers X, Y(1-based).The input is terminated by a set starting with N = M = 0. All integers are in the range [0, 80].", "\n\n", "Output", "\nFor each test case, you should output one line for each question the king asked, if there is a road from city X to Y? Output the shortest distance from X to Y. If not, output \"Sorry\".", "\n\n", "Sample Input", "\n3 2", "\n1 1", "\n2 2", "\n1 1", "\n1 1", "\n2 2", "\n4 4", "\n1", "\n1 3", "\n3 2", "\n1 1", "\n2 2", "\n1 1", "\n1 1", "\n2 2", "\n4 3", "\n1", "\n1 3", "\n0 0", "\n\n", "Sample Output", "\n1", "\nSorry"]], "Tag": "算法设计"}
{"Answer": "已找到，使用图网络模型可以实现。", "Konwledge_Point": "负权边的最短路径", "Question": ["神经网络能否不失一般性地解图的最短路径问题？", ["\n\n", "解最短路径问题，我看了一些网上的例子，多是训练DQN能够在某一特定图中找到最短路径（如图，在这个特定图中学习如何绕过黑点到达黄点）", "\n\n", "这种训练，相当于特定图的拓扑存储在了Q Matrix中，当图（环境）改变时则需要重新训练。", "\n问题：请问神经网络能否不失一般性地解图的最短路径问题？也就是不依赖某种特定的图拓扑，每次输入图拓扑和起点终点，输出最优路径"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/alphapi/article/details/19770749", "Konwledge_Point": "负权边的最短路径", "Question": ["求无向不带权图某点C到各点的最短路径dai'ma", ["一个无向不带权图，有N个节点，M条路径", "\n求某一节点C到其他各路径的最短路径，并按顺序输出"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这个是最短路径计算&amp;#xff0c;运费应该两个地点之间经过节点数计算&amp;#xff0c;比如a到c&amp;#xff0c;&amp;#xff0c;经过5个节点&amp;#xff0c;每个节点收费5元&amp;#xff0c;运费就25元。你的要求包括了好几种最短路径算法&amp;#xff0c;具体可以参考&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/printfxgd/article/details/80791847\" id=\"textarea_1637156922423_1637157011619_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/printfxgd/article/details/80791847&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["城市交通查询系统设计", ["题目3: 城市交通查询系统设计内容：设计一个交通查询系统，能够查询：1)从一个城市到其它各城市之间的最短路径或运费最少的路径;2）多个城市中任意一对城市之间的最短路径或运费最少的路径。设计要求：（1）建立关于城市信息结点的结构体；（2）定义城市信息链表的结点结构；（3）建立交通网络图的存储结构；（4）写出采用Dijksta算法求每对顶点之间最短路径的算法函数；  （5）写出采用Floyed算法求任意一对顶点之间最短路径的算法函数；（6）输入交通网络图中的路径信息或费用信息；（7）根据Dijksta算法计算从太原到其它各大城市的最短路径或最小费用；（8）根据Floyed算法计算任意一对大城市之间的最短路径或最小费用；（9）对于不同的查询要求可以输入已知城市间的路程或所需费用信息。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;graphminspan tree&amp;#xff0c;这里多了两个空格&amp;#xff0c;将空格删去即可&amp;#xff0c;matlab这样相当于直接识别成两个函数&amp;#xff0c;是自定义函数还是系统自带的&amp;#xff0c;可以用实时脚本编程&amp;#xff0c;那个可以实时报错&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["matlab最短路径问题", ["\n", "这个错误应该怎么改呀？"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/ShiWaiGaoRen12345/article/details/69808597", "Konwledge_Point": "负权边的最短路径", "Question": ["最短路径的数据结构的问题，C语言的问题，具体怎么解决的思路的问题", ["Problem Description", "\nThere are n points on the plane, Pi(xi, yi)(1 <= i <= n), and xi < xj (i\nBefore you reach the rightmost point Pn, you can only visit the points those have the bigger x-coordinate value. For example, you are at Pi now, then you can only visit Pj(j > i). When you reach Pn, the rule is changed, from now on you can only visit the points those have the smaller x-coordinate value than the point you are in now, for example, you are at Pi now, then you can only visit Pj(j < i). And in the end you back to P1 and the tour is over.", "\nYou should visit all points in this tour and you can visit every point only once.", "\n\n", "Input", "\nThe input consists of multiple test cases. Each case begins with a line containing a positive integer n(2 <= n <= 200), means the number of points. Then following n lines each containing two positive integers Pi(xi, yi), indicating the coordinate of the i-th point in the plane.", "\n\n", "Output", "\nFor each test case, output one line containing the shortest path to visit all the points with the rule mentioned above.The answer should accurate up to 2 decimal places.", "\n\n", "Sample Input", "\n3", "\n1 1", "\n2 3", "\n3 1", "\n\n", "Sample Output", "\n6.47"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;OP&lt;/span&gt; {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; next[&lt;span class=\"hljs-number\"&gt;10001&lt;/span&gt;], num &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;//  记入它接下来抵达的地方,num 为个数&lt;/span&gt;\n}op[&lt;span class=\"hljs-number\"&gt;10001&lt;/span&gt;];                    &lt;span class=\"hljs-comment\"&gt;//  表示点个数,0为出发地,10000为目的地&lt;/span&gt;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f[&lt;span class=\"hljs-number\"&gt;10001&lt;/span&gt;],key[&lt;span class=\"hljs-number\"&gt;10001&lt;/span&gt;],k_len&amp;#61;&lt;span class=\"hljs-number\"&gt;50000&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;find_MinRoad&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; now,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num)&lt;/span&gt;&lt;/span&gt;{  &lt;span class=\"hljs-comment\"&gt;// 当前位置,当前走的步数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(now&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(num&amp;lt;k_len) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(k_len&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k_len&amp;lt;num;k_len&amp;#43;&amp;#43;) key[k_len] &amp;#61; f[k_len];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(now!&amp;#61;&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;){\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; z&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;z&amp;lt;op[now].num;z&amp;#43;&amp;#43;) {\n            f[num] &amp;#61; op[now].next[z];\n            &lt;span class=\"hljs-built_in\"&gt;find_MinRoad&lt;/span&gt;(op[now].next[z],num&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n        }\n    }\n\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; road,a,b;                      &lt;span class=\"hljs-comment\"&gt;//  road : 输入中间路的总个数&amp;#xff0c;你的图为13,如果更多点把int 换成long op那的数组也再开大点&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;road);\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (road--){\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;b); &lt;span class=\"hljs-comment\"&gt;// a-&amp;gt;b&lt;/span&gt;\n        op[a].next[op[a].num&amp;#43;&amp;#43;] &amp;#61; b;\n    }\n\n    &lt;span class=\"hljs-built_in\"&gt;find_MinRoad&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,k_len&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; z&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;z&amp;lt;k_len;z&amp;#43;&amp;#43;) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,key[z]);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["对于下图，利用最短路径算法，找到从家到学校最短路径长度（能够输出对应路径更好）", ["对于下图，利用最短路径算法，找到从家到学校最短路径长度（能够输出对应路径更好）（C语言）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;边(2,4)的长度看不清&amp;#xff0c;姑且认为是3吧。&lt;br /&gt;那么算法的过程是&amp;#xff1a;&lt;br /&gt;取点2&amp;#xff0c;用2的最短路&lt;strong&gt;0&lt;/strong&gt;更新1(5)、4(3)、6(10)&amp;#xff1b;&lt;br /&gt;取点4&amp;#xff0c;用4的最短路&lt;strong&gt;3&lt;/strong&gt;更新6(5)&amp;#xff1b;&lt;br /&gt;取点1&amp;#xff0c;用1的最短路&lt;strong&gt;5&lt;/strong&gt;更新3(9)、5(12)&amp;#xff1b;&lt;br /&gt;取点6&amp;#xff0c;用6的最短路&lt;strong&gt;5&lt;/strong&gt;更新5(11)&lt;br /&gt;......&lt;br /&gt;括号里是更新后该点的最短路&amp;#xff0c;每次枚举的点的最短路一定是当前已经更新的点中最小的&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["数据结构最短距离（迪杰斯特拉）的算法", ["\n", "这个2到5好像存在问题到底应该走哪一条我记得有讲过还没更新的不能走2到6还没更新可是答案是走的2到4，4到6，6到5"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;弄一个数组&amp;#xff0c;下标是当前节点&amp;#xff0c;里面的值是下一个节点&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["图的最短路径问题，滴杰斯特拉算法", ["\n", "友友们，这个是一个关于图的最短路径求解代码，只显示了求最短路径的函数，在我构造的这个图里，我要输出一个点到另一个点的最短路径长度，但我不会输出走的过程，友友教教我怎么把经过点输出来，想了一个下午了"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;code class=\"language-javascript\"&gt;https://github.com/daancode/a-star&lt;/code&gt;&amp;#xff0c;可以参考这个项目&lt;br /&gt;如有帮助&amp;#xff0c;请采纳&amp;#xff0c;谢谢。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["使用Astar找最短路径", ["\n", "使用Astar找最短路径  当到图中标记的那个点后  再往后就会到右边 无法继续行走  报错，", "代价的计算应该怎么改？ 有什么优化的方法吗 "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不同于网上找到的答案的&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;assert.h&amp;gt;\n#include &amp;lt;stdlib.h&amp;gt;\n\ntypedef struct &lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;\n{\n    int x;\n    int y;\n    int len;\n} QDataType; &lt;span class=\"hljs-comment\"&gt;//数据类型&lt;/span&gt;\n\ntypedef struct ListNode &lt;span class=\"hljs-comment\"&gt;//通过链表实现的&lt;/span&gt;\n{\n    QDataType _&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;;\n    struct ListNode *_pNext;\n} ListNode, *pListNode;\n\ntypedef struct Queue\n{\n    pListNode _pHead; &lt;span class=\"hljs-comment\"&gt;//头指针&lt;/span&gt;\n    pListNode _pTail; &lt;span class=\"hljs-comment\"&gt;//尾指针&lt;/span&gt;\n} Queue;\n\npListNode BuyNode(QDataType d)\n{\n    pListNode new &amp;#61; malloc(sizeof(ListNode));\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;new&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt; &amp;#61; d;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;new&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pNext &amp;#61; NULL;\n    return new;\n}\n\nvoid QueueInit(Queue *q)\n{\n    assert(q);\n    QDataType d;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pHead &amp;#61; BuyNode(d);\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pTail&lt;/span&gt; &amp;#61; q-&amp;gt;&lt;/span&gt;_pHead;\n}\n\nvoid QueuePush(Queue *q, QDataType d)\n{\n    assert(q);\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pTail&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pNext &amp;#61; BuyNode(d);\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pTail&lt;/span&gt; &amp;#61; q-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pTail&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pNext;\n}\n\nvoid QueuePop(Queue *q)\n{\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pListNode&lt;/span&gt; dNode &amp;#61; q-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pHead&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pNext;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (dNode)\n    {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pHead&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pNext&lt;/span&gt; &amp;#61; dNode-&amp;gt;&lt;/span&gt;_pNext;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (q-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pHead&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pNext &amp;#61;&amp;#61; NULL)\n        {\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pTail&lt;/span&gt; &amp;#61; q-&amp;gt;&lt;/span&gt;_pHead;\n        } &lt;span class=\"hljs-comment\"&gt;//如果只有一个元素&amp;#xff0c;删完后ptail会悬空&lt;/span&gt;\n        free(dNode);\n    }\n}\n\nint QueueSize(Queue *q)\n{\n    assert(q);\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pListNode&lt;/span&gt; pre &amp;#61; q-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pHead&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pNext;\n    int count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (pre)\n    {\n        count&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pre&lt;/span&gt; &amp;#61; pre-&amp;gt;&lt;/span&gt;_pNext;\n    }\n    return count;\n}\nint QueueEmpty(Queue *q)\n{\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;return&lt;/span&gt; NULL &amp;#61;&amp;#61; q-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pHead&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pNext;\n}\nQDataType Front(Queue *q)\n{\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;return&lt;/span&gt; q-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pHead&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pNext&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;;\n}\nQDataType Back(Queue *q)\n{\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;return&lt;/span&gt; q-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pTail&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;;\n}\n\nQueue *q;\nint ds[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;{-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}, {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}, {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;}, {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;}};\nint m, n;\nint a[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n\nint bfs(int x, int y, int x2, int y2)\n{\n    QDataType d &amp;#61; {x, y, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    QueuePush(q, d);\n    a[x][y] &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (!QueueEmpty(q))\n    {\n        d &amp;#61; Front(q);\n        QueuePop(q);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;; i&amp;#43;&amp;#43;)\n        {\n            int tx &amp;#61; d.x &amp;#43; ds[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n            int ty &amp;#61; d.y &amp;#43; ds[i][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (tx &amp;#61;&amp;#61; x2 &amp;amp;&amp;amp; ty &amp;#61;&amp;#61; y2)\n            {\n                return d.len&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (tx &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; tx &amp;lt; m &amp;amp;&amp;amp; ty &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ty &amp;lt; n &amp;amp;&amp;amp; a[tx][ty] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                QDataType t &amp;#61; {tx, ty, d.len&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;};\n                QueuePush(q, t);\n                a[tx][ty] &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n           }\n        }\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\nint main()\n{\n    int x1, y1, x2, y2;\n    int i, j;\n    q &amp;#61; (Queue *)malloc(sizeof(Queue));\n    QueueInit(q);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;, &amp;amp;m, &amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n; j&amp;#43;&amp;#43;)\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a[i][j]);\n    }\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d %d&amp;#34;&lt;/span&gt;, &amp;amp;x1, &amp;amp;y1, &amp;amp;x2, &amp;amp;y2);\n    int len &amp;#61; bfs(x1, y1, x2, y2);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (len&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, len);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;no path!&amp;#34;&lt;/span&gt;);\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["c语言，运用队列的数据结构知识求解迷宫问题的最短路径步数。", ["问题遇到的现象和发生背景", "\n", "给定一迷宫以及入口和出口的坐标，要求寻找从入口到出口的最短距离。", "Input", "第一行两个数m和n表示迷宫的行数和列数。迷宫大小不超过45×45。", "\n", "接下来是m行n列的数，用来表示迷宫，1表示墙，0表示通路。", "\n", "第二行四个数x1,y1,x2,y2分别表示起点和终点的坐标。", "\n", "Output", "从起点到终点所经过的最短路径长度，如果不存在，输出\"no path!\"", "\n", "Sample Input", "8 8", "0 0 0 0 0 0 0 1", "0 1 1 1 1 0 0 0", "0 1 0 1 1 1 1 0", "0 1 1 0 0 0 0 0", "0 0 0 1 0 1 1 1", "0 1 0 0 0 0 0 0", "0 1 1 1 1 1 1 0", "0 0 0 0 0 0 0 0", "0 0 1 7", "Sample Output", "8", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "用队列求解。", "\n", "我想要达到的结果", "\n", "不同于网上找到的答案的，运用c语言的知识。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于最新版ChatGPT4的回答&amp;#xff0c;望采纳!!!有其他问题也可以询问我哦、”(最新版更智能&amp;#xff0c;功能更加强大)&lt;/p&gt;\n&lt;p&gt;你可以通过修改遗传算法来解决这个问题。在这种情况下&amp;#xff0c;你可以将问题建模为一个从起点到三个终点之一的最短路径问题。首先&amp;#xff0c;需要创建一个适应度函数来评估路径的总长度。然后&amp;#xff0c;通过模拟退火算法来搜索最佳解。以下是一个简化的MATLAB实现&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;best_path&lt;/span&gt;, &lt;span class=\"hljs-identifier\"&gt;shortest_dist&lt;/span&gt;]&lt;/span&gt; &amp;#61; sa&lt;span class=\"hljs-constructor\"&gt;_tsp(&lt;span class=\"hljs-params\"&gt;dist_matrix&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;start_node&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;end_nodes&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;num_iterations&lt;/span&gt;, T0, &lt;span class=\"hljs-params\"&gt;alpha&lt;/span&gt;)&lt;/span&gt;\n\n    n &amp;#61; size(dist_matrix, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    num_end_nodes &amp;#61; numel(end_nodes);\n\n    % 初始化路径\n    path &amp;#61; &lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;start_node&lt;/span&gt;, &lt;span class=\"hljs-identifier\"&gt;setdiff&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-identifier\"&gt;n&lt;/span&gt;, [&lt;span class=\"hljs-identifier\"&gt;start_node&lt;/span&gt;, &lt;span class=\"hljs-identifier\"&gt;end_nodes&lt;/span&gt;]&lt;/span&gt;)];\n\n    % 初始化温度\n    T &amp;#61; T0;\n\n    best_path &amp;#61; path;\n    shortest_dist &amp;#61; Inf;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:num_iterations\n        % 产生新解\n        new_path &amp;#61; generate&lt;span class=\"hljs-constructor\"&gt;_new_path(&lt;span class=\"hljs-params\"&gt;path&lt;/span&gt;)&lt;/span&gt;;\n\n        % 计算适应度值\n        new_dist &amp;#61; calc&lt;span class=\"hljs-constructor\"&gt;_path_distance(&lt;span class=\"hljs-params\"&gt;new_path&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;dist_matrix&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;end_nodes&lt;/span&gt;)&lt;/span&gt;;\n\n        % Metropolis准则\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; new_dist &amp;lt; shortest_dist&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;exp((shortest_dist - new_dist)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;T) &amp;gt; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n            path &amp;#61; new_path;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; new_dist &amp;lt; shortest_dist\n                shortest_dist &amp;#61; new_dist;\n                best_path &amp;#61; new_path;\n            &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n\n        % 降低温度\n        T &amp;#61; alpha&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;T;\n    &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; new_path &amp;#61; generate&lt;span class=\"hljs-constructor\"&gt;_new_path(&lt;span class=\"hljs-params\"&gt;path&lt;/span&gt;)&lt;/span&gt;\n    n &amp;#61; numel(path);\n    idx &amp;#61; randperm(n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; % 随机选择两个点&amp;#xff0c;但不包括起点\n    new_path &amp;#61; path;\n    &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;_path(&lt;span class=\"hljs-params\"&gt;idx&lt;/span&gt;)&lt;/span&gt; &amp;#61; path(fliplr(idx)); % 交换两个点\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; total_dist &amp;#61; calc&lt;span class=\"hljs-constructor\"&gt;_path_distance(&lt;span class=\"hljs-params\"&gt;path&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;dist_matrix&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;end_nodes&lt;/span&gt;)&lt;/span&gt;\n    n &amp;#61; numel(path);\n    total_dist &amp;#61; sum(dist&lt;span class=\"hljs-constructor\"&gt;_matrix(&lt;span class=\"hljs-params\"&gt;sub2ind&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;size&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;dist_matrix&lt;/span&gt;)&lt;/span&gt;, path(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;), path(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:n))));\n\n    % 计算到所有终点的距离\n    end_dists &amp;#61; dist&lt;span class=\"hljs-constructor\"&gt;_matrix(&lt;span class=\"hljs-params\"&gt;path&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;end&lt;/span&gt;)&lt;/span&gt;, end_nodes);\n    total_dist &amp;#61; total_dist &amp;#43; min(end_dists); % 只保留最短的距离\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;使用此函数时&amp;#xff0c;你需要提供距离矩阵、起始点、终点、迭代次数、初始温度和温度衰减系数。示例如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;% 创建距离矩阵&lt;/span&gt;\ndist_matrix &amp;#61; ...\n\n&lt;span class=\"hljs-comment\"&gt;% 设置起点和终点&lt;/span&gt;\nstart_node &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\nend_nodes &amp;#61; [&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;];\n\n&lt;span class=\"hljs-comment\"&gt;% 设置模拟退火参数&lt;/span&gt;\nnum_iterations &amp;#61; &lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;;\n&lt;span class=\"hljs-symbol\"&gt;T0&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;\nalpha &amp;#61; &lt;span class=\"hljs-number\"&gt;0.99&lt;/span&gt;;\n\n&lt;span class=\"hljs-comment\"&gt;% 调用函数&lt;/span&gt;\n[best_path, shortest_dist] &amp;#61; sa_tsp(dist_matrix, start_node, end_nodes, num_iterations, &lt;span class=\"hljs-symbol\"&gt;T0&lt;/span&gt;, alpha);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;请注意&amp;#xff0c;这个实现是一个简化版&amp;#xff0c;你可能需要根据问题规模和计算能力来调整参数。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["matlab加上模拟退火算法求解最短路问题", ["从一个点出发，在剩余的点中搜索，终点有三个但是要求到其中一个终点的最短距离。我试了用tsp方法求解，但是我不需要形成回路所以不对。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以使用 Network Analyst 工具来计算最小成本路径。要做的第一步是构建网络数据集&amp;#xff0c;其中包含了您要使用的道路、铁路和公路数据。然后&amp;#xff0c;可以使用权值表达式来定义成本函数&amp;#xff0c;指定坡度、海拔和铁路/公路缓冲区对成本的影响。最后&amp;#xff0c;使用 Network Analyst 工具中的最短路径分析工具来计算起点和终点之间的最小成本路径。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["ARCGIS最小成本路径计算", ["计算最小成本路径，出行成本为1000*(1+坡度/10)^2*(1+海拔/2000)，铁路周边1000米缓冲区内出行成本为500，公路周边500米缓冲区内出行成本为800"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;最短路径不对&amp;#xff0c;路径最短不代表它是由最短的边组成的&lt;br /&gt;比如最短的路径是1,100&amp;#xff0c;第二短的路径是102条长度为1的路径组成&amp;#xff0c;很显然最短路径跟这题完全不是同一个问题&lt;br /&gt;而且求最短路径你需要验证每个路径&amp;#xff0c;很耗费时间&lt;br /&gt;这题其实最适合用贪心算法求&amp;#xff0c;反正每路过一个节点&amp;#xff0c;你都走最短的那条就对了&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["与无向图最短路径有关", ["问题", "：一个无向图有n个点，m条边，你现在在1号点，每条边有个对能力值的限制，要大于等于这个限制才能通过它。他们想知道他们至少要有多大的能力值，才能从1号点到n号点。", "\n", "输入", "：第一行两个正整数n,m。分别表示图的大小和边的数量。", "接下来m行，每行3个整数 u,v,l 。表示有一条u到v的边，至少要l能力值才能通过。地图保证1和n是连通的。", "\n", "数据规模", "：对于30%的数据： n<=m<=8", "对于100%的数据 , n<=m<=10^6,1<=u,v<=n,0<=l<=10^9", "\n", "输出描述", "：需要获得的最小的能力值，能够从1到n", "\n", "我的想法和出现的问题", "：我本来打算先求最短路径的，再找出最短路径上最长的一条边的值，但是它测试数据太大了，我邻接矩阵一开数组就爆栈了。有没有什么不爆数组的思路啊。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;D&lt;/p&gt;\n&lt;p&gt;最短路径算法&amp;#xff1a;一个是迪杰斯特拉算法&amp;#xff0c;求从某个源点到其余各顶点的最短路径&amp;#xff0c;求解过程按路径长度递增的次序产生的最短路径&amp;#xff0c;时间复杂度是O(n^2) ; 另一种算法是弗洛伊德算法&amp;#xff0c;求 每一对顶点之间的最短路径&amp;#xff0c;时间复杂度为O(n^3)。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["与费洛伊德算法中最短路径的时间复杂度相关的疑问", ["请教图片中的这个内容该怎么做呢，我能该如何去解决，与费洛伊德算法中最短路径的时间复杂度相关的疑问"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/H_Anonymity/article/details/78107354", "Konwledge_Point": "负权边的最短路径", "Question": ["C语言解决一个关于最短路径的花费的问题，怎么利用C解决", ["Problem Description", "\nThere is an old country and the king fell in love with a devil. The devil always ask the king to do some crazy things. Although the king used to be wise and beloved by his people. Now he is just like a boy in love and can’t refuse any request from the devil. Also, this devil is looking like a very cute Loli.", "\n\n", "Something bad actually happen. The devil makes this kingdom's people infected by a disease called lolicon. Lolicon will take away people's life in silence. ", "\n\n", "Although z*p is died, his friend, y*wan is not a lolicon. Y*wan is the only one in the country who is immune of lolicon, because he like the adult one so much. ", "\n\n", "As this country is going to hell, y*wan want to save this country from lolicon, so he starts his journey.", "\n\n", "You heard about it and want to help y*wan, but y*wan questioned your IQ, and give you a question, so you should solve it to prove your IQ is high enough.", "\n\n", "The problem is about counting. How many undirected graphs satisfied the following constraints?", "\n\n", "\n", "This graph is a complete graph of size n. ", "\n", "Every edge has integer cost from 1 to L.", "\n", "The cost of the shortest path from 1 to n is k.", "\n", "Can you solve it?", "\n\n", "output the answer modulo 10^9+7", "\n\n", "Input", "\nThe first line contains an integer T, denoting the number of the test cases.", "\nFor each test case, the first line contains 3 integers n,k,L.", "\n\n", "T<=5 n,k<=12,L<=10^9.", "\n\n", "Output", "\nFor each test case, output the answer in one line.", "\n\n", "Sample Input", "\n2", "\n3 3 3", "\n4 4 4", "\n\n", "Sample Output", "\n8", "\n668"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/lin375691011/article/details/38405413", "Konwledge_Point": "负权边的最短路径", "Question": ["Single-Player Games             ", ["Description", "\n\n", "Playing games is the most fun if other people take part. But other players are not always available if you need them, which led to the invention of single-player games. One of the most well-known examples is the infamous ", "Solitaire'' packaged with Windows, probably responsible for more wasted hours in offices around the world than any other game. ", "\nThe goal of a single-player game is usually to make", "moves'' until one reaches a final state of the game, which results in a win or loss, or a score assigned to that final state. Most players try to optimize the result of the game by employing good strategies. In this problem we are interested in what happens if one plays randomly. After all, these games are mostly used to waste time, and playing randomly achieves this goal as well as any other strategy. ", "\n\n", "Games can very compactly represented as (possibly infinite) trees. Every node of the tree repre- sents a possible game state. The root of the tree corresponds to the starting position of the game. For an inner node, its children are the game states to which one can move in a single move. The leaf nodes are the final states, and every one of them is assigned a number, which is the score one receives when ending up at that leaf. ", "\n\n", "\nTrees are defined using the following grammar. ", "\n\n", "Definition ::= Identifier \"=\" RealTree ", "\nRealTree ::= \"(\"Tree+\")\" ", "\nTree ::= Identifier | Integer | \"(\"Tree+\")\" ", "\nIdentifier ::= a|b|...|z ", "\nInteger ∈ {...,-3,-2,-1,0,1,2,3,...,} ", "\n\n", "By using a Definition, the RealTree on the right-hand side of the equation is assigned to the Identifier on the left. A RealTree consists of a root node and one or more children, given as a sequence enclosed in brackets. And a Tree is either ", "\n\n", ". the tree represented by a given Identifier, or ", "\n\n", ". a leaf node, represented by a single Integer, or ", "\n\n", ". an inner node, represented by a sequence of one or more Trees (its children), enclosed in brackets. ", "\n\n", "Your goal is to compute the expected score, if one plays randomly, i.e. at each inner node selects one of the children uniformly at random. This expected score is well-defined even for the infinite trees definable in our framework as long as the probability that the game ends (playing randomly) is 1. ", "\nInput", "\n\n", "The input file contains several gametree descriptions. Each description starts with a line containing the number n of identifiers used in the description. The identifiers used will be the first n lowercase letters of the alphabet. The following n lines contain the definitions of these identifiers (in the order a, b, ...). Each definition may contain arbitrary whitespace (but of course there will be no spaces within a single integer). The right hand side of a definition will contain only identifiers from the first n lowercase letters. The inputs ends with a test case starting with n = 0. This test case should not be processed.", "\nOutput", "\n\n", "For each gametree description in the input, first output the number of the game. Then, for all n identifiers in the order a, b, ..., output the following. If an identifier represents a gametree for which the probability of finishing the game is 1, print the expected score (when playing randomly). This value should be exact to three digits to the right of the decimal point. ", "\n\n", "If the game described by the variable does not end with probability 1, print ``Expected score of id undefined'' instead. Output a blank line after each test case.", "\nSample Input", "\n\n", "1", "\na = ((1 7) 6 ((8 3) 4))", "\n2", "\na = (1 b)", "\nb = (4 a)", "\n1", "\na = (a a a)", "\n0", "\nSample Output", "\n\n", "Game 1", "\nExpected score for a = 4.917", "\n\n", "Game 2", "\nExpected score for a = 2.000", "\nExpected score for b = 3.000", "\n\n", "Game 3", "\nExpected score for a undefined"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/xs18952904/article/details/84670271", "Konwledge_Point": "负权边的最短路径", "Question": ["利用C语言的程序设计的技术，计算这个图中的最长最短路径的算法怎么实现", ["Problem Description", "\nThe graph diameter is the length of the \"longest shortest path\" between any two vertices of a graph. In other words, a graph's diameter is the longest path which must be traversed in order to travel from any vertex to another when paths which backtrack, detour, or loop are excluded from consideration.", "\nGiven an undirected graph, your mission is to count the number of diameters of it.", "\n\n", "Input", "\nThe input contains multiple test cases. ", "\nFor each test case, it contains n+1 lines. ", "\nLine 1: two integers m, n (2<= m <= 100, 1 <= n <= 4000) indicating that there are m vertices and n edges in the city. ", "\nLine 2~n+1: each contains three integers i, j, d (1 <= i, j <= m, 1 <= d <= 100), indicating that there is an edge of length d connecting vertex i and vertex j.", "\n\n", "Output", "\nOutput the value of the diameter and the number of diameters in a single line, separated by a single space.", "\n\n", "Sample Input", "\n4 5 ", "\n1 2 1 ", "\n2 3 1 ", "\n3 4 1 ", "\n1 4 1 ", "\n1 3 2 ", "\n\n", "Sample Output", "\n2 5"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;#include&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;br /&gt;using namespace std;&lt;br /&gt;char a[1005],b[1005],e,f;&lt;br /&gt;int n,d[27][27],s&amp;#61;0;&lt;br /&gt;int main(){&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    cin&amp;gt;&amp;gt;a&amp;gt;&amp;gt;b;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    cin&amp;gt;&amp;gt;n;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for(int i&amp;#61;0;i&amp;lt;n;i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        cin&amp;gt;&amp;gt;e&amp;gt;&amp;gt;f;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        d[e-&amp;#39;a&amp;#39;][f-&amp;#39;a&amp;#39;]&amp;#61;d[f-&amp;#39;a&amp;#39;][e-&amp;#39;a&amp;#39;]&amp;#61;1;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for(int k&amp;#61;0;k&amp;lt;27;k&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        for(int i&amp;#61;0;i&amp;lt;27;i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            for(int j&amp;#61;0;j&amp;lt;27;j&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                if(d[i][k]!&amp;#61;0&amp;amp;&amp;amp;d[k][j]!&amp;#61;0&amp;amp;&amp;amp;i!&amp;#61;j){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                    if(d[i][j]&amp;#61;&amp;#61;0) d[i][j]&amp;#61;d[i][k]&amp;#43;d[k][j];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                    else d[i][j]&amp;#61;min(d[i][j],d[i][k]&amp;#43;d[k][j]);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for(int i&amp;#61;0;i&amp;lt;strlen(a);i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        s&amp;#43;&amp;#61;d[a[i]-&amp;#39;a&amp;#39;][b[i]-&amp;#39;a&amp;#39;];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    cout&amp;lt;&amp;lt;s;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    return 0;&lt;/span&gt;&lt;br /&gt;} &lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["弗洛伊德算法求多源最短路径", ["\n", "\n"]], "Tag": "算法设计"}
{"Answer": "http://xueshu.baidu.com/s?wd=paperuri:(bf07b4fc89e69e391ee525c9d6ddee1c)&amp;filter=sc_long_sign&amp;sc_ks_para=q%3D%E5%9F%BA%E4%BA%8E%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%9A%84%E6%97%A0%E4%BA%BA%E6%9C%BA%E8%88%AA%E8%B7%AF%E8%A7%84%E5%88%92&amp;tn=SE_baiduxueshu_c1gjeupa&amp;ie=utf-8&amp;sc_us=14669995398736205306", "Konwledge_Point": "负权边的最短路径", "Question": ["无人机最短飞行路径问题", ["假设无人机有扫描半径r，给定一待测区域，要求无人机能够扫描到区域中的所有位置，并返回无人机起飞点，总飞行路程尽可能短（省电啊）。", "\n求问飞行路线怎么设计，给出大致思路就行。", "\n        1.矩形区域", "\n                 矩形区域尺寸为W×H，起飞点在矩形的边上任一点", "\n                2.圆形区域", "\n                   圆形区域半径为R，起飞点在圆边上任一点"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用ChatGPT &lt;/p&gt;\n&lt;p&gt;1、Dijkstra算法可以用于解决最短路径问题。假设城市A为源点&amp;#xff0c;城市B为终点&amp;#xff0c;可以先将所有城市的距离初始化为无穷大&amp;#xff0c;将城市A到其他城市的距离更新为实际距离&amp;#xff0c;然后选取距离A最近的城市&amp;#xff0c;将它到其他城市的距离与A到其他城市的距离进行比较并更新&amp;#xff0c;直到所有城市的距离都被更新过。最终&amp;#xff0c;从A到B的最短路径即为路径上所有边的距离之和。&lt;/p&gt;\n&lt;p&gt;2、可以使用广度优先搜索算法&amp;#xff08;BFS&amp;#xff09;解决转车次数最少的问题。假设城市A为起点&amp;#xff0c;城市B为终点&amp;#xff0c;将A加入队列&amp;#xff0c;从队列中取出A&amp;#xff0c;遍历A可直达的城市并将其加入队列&amp;#xff0c;标记A为已访问过。接着从队列中取出下一个城市&amp;#xff0c;重复上述过程直到取出B或者队列为空。在遍历时&amp;#xff0c;使用一个数组记录下每个城市到起点的最短距离&amp;#xff0c;每当遍历到一个城市时&amp;#xff0c;如果到达这个城市的路径比之前记录的路径短&amp;#xff0c;就更新这个城市的最短路径。最终&amp;#xff0c;到达B的路径上的中转次数即为B的最短路径上的城市个数减1。&lt;/p&gt;\n&lt;p&gt;3、可以将1和2中的方法结合起来。先按照Dijkstra算法计算出从A到每个城市的最短路径&amp;#xff0c;然后使用BFS算法&amp;#xff0c;从A出发&amp;#xff0c;遍历所有可达城市&amp;#xff0c;更新到这些城市的最短路径和中转次数&amp;#xff0c;直到遍历到B。如果遍历到的城市到A的最短路径加上这个城市到B的最短路径等于A到B的最短路径&amp;#xff0c;说明找到了一条最短路径上的中转点。在更新最短路径和中转次数时&amp;#xff0c;需要考虑到中转次数相同时的比较&amp;#xff0c;可以使用一个优先队列&amp;#xff08;最小堆&amp;#xff09;存储城市信息&amp;#xff0c;根据综合花费&amp;#xff08;最短路径&amp;#43;中转次数&amp;#xff09;的大小来决定优先级。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["数据结构（最短路径的应用）", ["功能：现有10个城市之间的交通信息，若有火车，则提供两个城市之间火车票价格。", "（1）有旅客Ａ，准备从城市A出发到城市B，他希望总想花费最少。试设计一种方案。", "（2）有旅客Ｂ，准备从城市A出发到城市B，他想转车次数最少。试设计一种方案。", "( 3 ) 有旅客Ｂ，准备从城市A出发到城市B，他希望总想花费最少的情况下尽量减少中转次数。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;邻接表&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iomanip&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;deque&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j,a,b,n1,m1;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;node&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; w;\n};\nvector&amp;lt;node&amp;gt; e[&lt;span class=\"hljs-number\"&gt;105&lt;/span&gt;];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,m,vis[&lt;span class=\"hljs-number\"&gt;100001&lt;/span&gt;],mapa[&lt;span class=\"hljs-number\"&gt;1001&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;1001&lt;/span&gt;],ans&amp;#61;&lt;span class=\"hljs-number\"&gt;1000000001&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;dfs&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dis)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(dis&amp;gt;&amp;#61;ans)&lt;span class=\"hljs-comment\"&gt;//小剪枝 &lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n        \n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x&amp;#61;&amp;#61;n)\n    {\n        ans&amp;#61;&lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(ans,dis);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    node tt; \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;e[x].&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;();i&amp;#43;&amp;#43;)\n    {\n        tt&amp;#61;e[x][i];\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(vis[tt.v]&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            vis[tt.v]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(tt.v,dis&amp;#43;tt.w);\n            vis[tt.v]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n    } \n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    node t;\n    cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m&amp;gt;&amp;gt;n1&amp;gt;&amp;gt;m1;\n    &lt;span class=\"hljs-comment\"&gt;//memset(mapa,0x3f,sizeof(mapa));//初始化&lt;/span&gt;\n     \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;m;j&amp;#43;&amp;#43;)\n    {\n        cin&amp;gt;&amp;gt;a&amp;gt;&amp;gt;b;\n        t.v&amp;#61;b;\n        t.w&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        e[a].&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(t);\n        t.v&amp;#61;a;\n        t.w&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        e[b].&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(t);\n       \n    }\n    vis[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;邻接矩阵&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,m,vis[&lt;span class=\"hljs-number\"&gt;100001&lt;/span&gt;],mapa[&lt;span class=\"hljs-number\"&gt;1001&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;1001&lt;/span&gt;],ans&amp;#61;&lt;span class=\"hljs-number\"&gt;1000000001&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;dfs&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dis)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(dis&amp;gt;ans)&lt;span class=\"hljs-comment\"&gt;//小剪枝 &lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x&amp;#61;&amp;#61;n)\n    {\n        ans&amp;#61;&lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(ans,dis);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;//不一定向前走&amp;#xff0c;可能绕一下更近 &lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(mapa[x][i]!&amp;#61;&lt;span class=\"hljs-number\"&gt;0x3f3f3f3f&lt;/span&gt;&amp;amp;&amp;amp;vis[i]&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) \n    {\n        vis[i]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(i,dis&amp;#43;mapa[x][i]);\n        vis[i]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n     } \n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j,a,b,n1,m1;\n    cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m&amp;gt;&amp;gt;n1&amp;gt;&amp;gt;m1;\n    &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(mapa,&lt;span class=\"hljs-number\"&gt;0x3f&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(mapa));\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;m;j&amp;#43;&amp;#43;)\n    {\n        cin&amp;gt;&amp;gt;a&amp;gt;&amp;gt;b;\n        mapa[b][a]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//保证单向 &lt;/span&gt;\n        mapa[a][b]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    vis[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;链式前向星&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iomanip&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;deque&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;edge&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; to;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; nxt;\n}e[&lt;span class=\"hljs-number\"&gt;300&lt;/span&gt;]; \n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cnt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; h[&lt;span class=\"hljs-number\"&gt;105&lt;/span&gt;];\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;addedge&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; u,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v)&lt;/span&gt;\n&lt;/span&gt;{\n    cnt&amp;#43;&amp;#43;;\n    e[cnt].to&amp;#61;v;\n    e[cnt].nxt&amp;#61;h[u];\n    h[u]&amp;#61;cnt;\n}\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,m,vis[&lt;span class=\"hljs-number\"&gt;100001&lt;/span&gt;],mapa[&lt;span class=\"hljs-number\"&gt;1001&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;1001&lt;/span&gt;],ans&amp;#61;&lt;span class=\"hljs-number\"&gt;1000000001&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;dfs&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dis)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(dis&amp;gt;&amp;#61;ans)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x&amp;#61;&amp;#61;n)\n    {\n        ans&amp;#61;&lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(ans,dis);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;h[x];i&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;#61;e[i].nxt)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; to&amp;#61;e[i].to;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(vis[to]&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            vis[to]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(to,dis&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n            vis[to]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n1,m1; \n    cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m&amp;gt;&amp;gt;n1&amp;gt;&amp;gt;m1;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j,a,b,c;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;m;j&amp;#43;&amp;#43;)\n    {\n        cin&amp;gt;&amp;gt;a&amp;gt;&amp;gt;b;\n        &lt;span class=\"hljs-built_in\"&gt;addedge&lt;/span&gt;(a,b);\n        &lt;span class=\"hljs-built_in\"&gt;addedge&lt;/span&gt;(b,a);\n    }\n    vis[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["最小换乘，求最短路径的问题", ["设某城市有n个车站，并有m条公交线路连接这些车站。设这些公交", "车都是单向的，这n个车站被顺序编号为0-n-l。本程序，输入该城市的公交线", "路数、车站个数、以及各公交线路上的各站编号。", "要求:", "\n", "（1求从站0出发乘公交车至其他车站的最少换车次数，并输出所经过的站点序", "列;", "(2利用输入信息构建一张有向图，分别用邻接矩阵和邻接表表示，并输出邻接", "矩阵和邻接表信息;", "\n", "(3从站0出发，对公交线路图进行遍历。", "\n", "收起全部 "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;code class=\"language-javascript\"&gt;i&amp;#61;1, 2, 3, 4, 5, 6&lt;/code&gt;表示第几次迭代&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["数据结构，最短路径问题求解？", ["这个表里的i时什么意思？那个i=1 2 3 4 5 6，这个i是什么意思？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://blog.csdn.net/qq_35710556/article/details/79583229\"&gt;https://blog.csdn.net/qq_35710556/article/details/79583229&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;五种最短路径算法&amp;#xff0c;自己研究一下&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["C++求给出图的最短路径问题", ["\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;迷宫问题算法的根本思想来源于回溯思想&amp;#xff0c;就是从某点出发&amp;#xff0c;根据深度或广度原则不断查找并记录所有走过的路径 遇到不可达或该节点相邻节点遍历完毕即退回&lt;br /&gt;如果说走路径符合题目要求就记录&amp;#xff0c;不符合不记录&lt;br /&gt;所以这个题关键是选对和理解回溯算法&lt;br /&gt;回溯思想有很多介绍的资源&amp;#xff0c;建议仔细阅读&lt;br /&gt;而那两个原则是回溯算法中的采取的遍历原则&lt;br /&gt;换一种角度去理解&amp;#xff0c;这个题就不那么难了&amp;#xff0c;自己也能写出答案&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["python迷宫问题输出所有路径的条数，，最好用BFS或者DFS解决", ["我能用BFS和DFS输出路径和最短路径，但是所有路径条数没思路，下面是我的代码，请大佬们帮个忙。最好能在我的代码基础上写出来", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Plenty of reading/algorithms:\n&lt;a href=\"http://en.wikipedia.org/wiki/Shortest_path_problem\" rel=\"nofollow noreferrer\"&gt;Shortest path problem&lt;/a&gt;. You effectively just have every edge (\"link\", as you called it) with an equal weight.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["线性阵列，节点随机链接到阵列中的其他节点，最短路径", ["\n\n", "INFO:\nI have an Array of 100 nodes, [ 0 .. 99 ].  Each node can have an arbitrary number of linked nodes:", "\n\n", "eg1, 0 links to 5, 10, 15, 20.\neg2, 1 links to 30, 40, 50.\neg3, etc..", "\n\n", "All 100 nodes have at least one linked node, nodes do not know who links to them.", "\n\n", "QUESTION:\nHow can I find the shortest link-path if provided with START and END.", "\n\n", "eg. START=5, END=80, Link Path (example) : [5]->10->24->36->[80]?", "\n\n", "I'm using Pascal and/or PHP, but understanding how is what I'm looking for [code helps too].", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Dijkstra should pass, I just make a submission using JAVA, and it took less than a second to complete each task.&lt;/p&gt;\n\n&lt;p&gt;As I have mentioned, each value in the matrix can go up to 10^9, your solution can encounter a number overflow problem, which can effect the running time.&lt;/p&gt;\n\n&lt;p&gt;My code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;!-- language:java --&amp;gt;\n\nstatic int[]X = {0,1,0,-1};\nstatic int[]Y = {1,0,-1,0};\npublic static void main(String[] args) throws FileNotFoundException {\n    // PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n    // \"output.txt\")));\n    PrintWriter out = new PrintWriter(System.out);\n    Scanner in = new Scanner();        \n    int n = in.nextInt();\n    long[][]map = new long[n][n];\n    for(int i = 0; i &amp;lt; n; i++){\n        for(int j = 0; j &amp;lt; n; j++){\n            map[i][j] = in.nextLong();\n        }\n    }\n    PriorityQueue&amp;lt;Pos&amp;gt; q= new PriorityQueue();\n    long[][]dist = new long[n][n];\n    for(long[]a : dist){\n        Arrays.fill(a,Long.MAX_VALUE);\n    }\n    q.add(new Pos(0,0,map[0][0]));\n    dist[0][0] = map[0][0];\n    while(!q.isEmpty()){\n        Pos p = q.poll();\n        if(dist[p.x][p.y] == p.cost){\n            for(int i = 0; i &amp;lt; 4; i++){\n                int x = p.x + X[i];\n                int y = p.y + Y[i];\n                if(x &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; n &amp;amp;&amp;amp; y &amp;lt; n &amp;amp;&amp;amp; dist[x][y] &amp;gt; dist[p.x][p.y] + map[x][y] ){\n                    dist[x][y] = dist[p.x][p.y] + map[x][y];\n                    q.add(new Pos(x,y,dist[x][y]));\n                }\n            }\n        }\n    }\n    out.println(dist[n - 1][n - 1]);\n    out.close();\n}\n\nstatic class Pos implements Comparable&amp;lt;Pos&amp;gt;{\n    int x, y;\n    long cost;\n    public Pos(int x, int y, long cost) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.cost = cost;\n    }\n    @Override\n    public int compareTo(Pos o) {\n        // TODO Auto-generated method stub\n        return Long.compare(cost, o.cost );\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;I think your Dijkstra implementation is not correct:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for frontier.Len() &amp;gt; 0 {\n    element := heap.Pop(&amp;amp;frontier).(*Item)\n    vertex, cost := element.value, element.priority\n    //You didn't check for visited vertex here!\n    visited[vertex] = true\n    neighbors := graph[vertex]\n    for vertex_new, cost_new := range(neighbors){\n        if !visited[vertex_new]{//You can add same vertex multiple times here!\n            if vertex_new == end{\n                return cost + cost_new\n            }\n            heap.Push(&amp;amp;frontier, &amp;amp;Item{\n                value: vertex_new,\n                priority: cost + cost_new,\n            })\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In your implementation, you only update &lt;code&gt;visited&lt;/code&gt; when the vertex pop out of the heap, thus, one vertex can be added and processed multiple time, so, it will significantly increase your time complexity.&lt;/p&gt;\n\n&lt;p&gt;To fix&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for frontier.Len() &amp;gt; 0 {\n    element := heap.Pop(&amp;amp;frontier).(*Item)\n    vertex, cost := element.value, element.priority\n    if !visited[vertex]{\n        visited[vertex] = true\n        neighbors := graph[vertex]\n        for vertex_new, cost_new := range(neighbors){\n            if !visited[vertex_new]{\n                if vertex_new == end{\n                   return cost + cost_new\n                }\n                heap.Push(&amp;amp;frontier, &amp;amp;Item{\n                   value: vertex_new,\n                   priority: cost + cost_new,\n                })\n            }\n        }   \n    }\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["在矩阵中找到最短路径总和。  Dijkstra是否不适用于这种情况？", ["\n\n", "I am trying to solve ", "the following problem from project euler", " (please take a look at description and the example in the link, but here is the short explanation).", "\n\n", "\n  ", "in the matrix, find the  minimal path sum from the top left to the bottom right, by moving left, right, up, and down", "\n", "\n\n", "Right after I looked at the problem, the obvious solution which came to mind is to create a graph from the matrix and then use ", "Dijkstra", " to find the shortest path.", "\n\n", "To construct a graph from a ", "N*M", " matrix, for every ", "(i, j)", " element I create a vertex ", "i * N + j", " and connect it to any other vertex (to which it is possible to connect with UP, RIGHT, DOWN, LEFT) and the edge will be the value of the element I am connecting to in the matrix. After that I create 2 other vertices ", "-1", " connected to vertex ", "0", " and ", "-2", " connected to ", "N*M - 1", " which will be my start and end vertices (both connection have 0 cost).", "\n\n", "After this I am doing Dijkstra to find shortest path cost from ", "-1", " to ", "-2", ". My Dijkstra implementation uses priority queue and looks this way:", "\n\n", "func dijkstraCost(graph map[int]map[int]int, start, end int) int{\n    if start == end{\n        return 0\n    }\n    frontier := make(PriorityQueue, 1)\n    frontier[0] = &Item{value: start, priority: 0, index: 0}\n    visited := map[int]bool{}\n    heap.Init(&frontier)\n\n    for frontier.Len() > 0 {\n        element := heap.Pop(&frontier).(*Item)\n        vertex, cost := element.value, element.priority\n        visited[vertex] = true\n        neighbors := graph[vertex]\n        for vertex_new, cost_new := range(neighbors){\n            if !visited[vertex_new]{\n                if vertex_new == end{\n                    return cost + cost_new\n                }\n                heap.Push(&frontier, &Item{\n                    value: vertex_new,\n                    priority: cost + cost_new,\n                })\n            }\n        }\n    }\n    return -1\n}\n", "\n\n", "where Priority Queue implementation is taken from heap container (example PriorityQueue) with one minor modification:", "\n\n", "func (pq PriorityQueue) Less(i, j int) bool {\n    return pq[i].priority > pq[j].priority // changed to <\n}\n", "\n\n", "The graph that I am providing to the function looks like:", "\n\n", "map[13:map[8:965 18:121 12:746 14:111] 16:map[11:803 21:732 15:537 17:497] 3:map[8:965 2:234 4:18] 4:map[9:150 3:103] 22:map[17:497 21:732 23:37] -1:map[0:131] 17:map[16:699 18:121 12:746 22:524] 1:map[6:96 0:131 2:234] 9:map[4:18 14:111 8:965] 11:map[6:96 16:699 10:630 12:746] 19:map[14:111 24:331 18:121] 24:map[23:37 -2:0 19:956] 2:map[3:103 7:342 1:673] 15:map[10:630 20:805 16:699] 18:map[13:422 23:37 17:497 19:956] 10:map[5:201 15:537 11:803] 14:map[19:956 13:422 9:150] 0:map[5:201 1:673] 6:map[5:201 7:342 1:673 11:803] 8:map[9:150 3:103 13:422 7:342] -2:map[] 12:map[7:342 17:497 11:803 13:422] 20:map[15:537 21:732] 21:map[16:699 20:805 22:524] 5:map[0:131 10:630 6:96] 23:map[18:121 22:524 24:331] 7:map[2:234 12:746 6:96 8:965]]\n", "\n\n", "\n", "This works correctly but the problem is that it is considered inefficient (judging by ", "Hackerrank version of the problem", "). It should run find the value of the best solution for ", "700x700", " matrix in less than 4 seconds, whereas my solution takes 10 seconds.", "\n\n", "I thought that I am doing something wrong in go, so I reimplemented the same solution in python (where it took approximately 70 seconds for 700x700 matrix)", "\n\n", "\n", "My question is:", " Am I using the right approach to find the best solution in a matrix. If so what am I doing wrong with my implementation?", "\n\n", "P.S. I have full go and python solution, just thought that even without them the question is too long.", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;ryn 安装和python代码都是python2版本的&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["看到您一篇关于ryu最短路径转发的文章，想咨询您一点问题", ["在Ubuntu执行自定义的ryu控制器脚本时出现的问题", "wjc@wjc-virtual-machine:~/ryu/ryu/app$ ryu-manager example_shortestForwarding.py --observe-links", "Traceback (most recent call last):", "  File \"/home/wjc/.local/bin/ryu-manager\", line 5, in ", "    from ryu.cmd.manager import main", "  File \"/home/wjc/.local/lib/python2.7/site-packages/ryu/cmd/manager.py\", line 33, in ", "    from ryu.app import wsgi", "  File \"/home/wjc/.local/lib/python2.7/site-packages/ryu/app/wsgi.py\", line 23, in ", "    from tinyrpc.server import RPCServer", "  File \"/home/wjc/.local/lib/python2.7/site-packages/tinyrpc/", "init", ".py\", line 4, in ", "    from .protocols import *", "  File \"/home/wjc/.local/lib/python2.7/site-packages/tinyrpc/protocols/", "init", ".py\", line 15", "    def ", "init", "(self) -> None:", "                       ^", "SyntaxError: invalid syntax", "\n", "不知道这个问题应该如何解决"]], "Tag": "算法设计"}
{"Answer": "我这里以计算x轴方向最小距离举例，设要求的最小距离为dmin\r\n1.以小圆的圆心为坐标原点建立XOY坐标系\r\n2.则小圆的方程为： pow(x,2)+pow(y,2)=pow(r,2) 其中r为小圆的半径，也就是说r是常数\r\n3.则大圆的方程为： pow(x-a,2)+pow(y-b,2)=pow(R,2) 其中R为大圆的半径,（a,b）为大圆的圆心，所以a，b，R也都是常数\r\n4.设y=y0与小圆相交与点A，B（设其中A在B左边）,与大圆相较于C，D两点（设C在D左边），则两圆在x轴方向上的距离则为A点横坐标与C点横坐标之差的绝对值（其中因为直线要与两圆都相交，所以y0的取值范围为[-r,r]）\r\n5.将y=y0带入小圆方程，则可以得到A点横坐标为：- sqrt（pow(r,2)-pow(y0,2)）,C点横坐标为 - sqrt(pow(R,2)-pow(y0-b,2)) + a\r\n6.则两圆x轴方向上的距离有关y0的方程为 dmin=f(y0)= - sqrt（pow(r,2)-pow(y0,2)）- （- sqrt(pow(R,2)-pow(y0-b,2)) + a）\r\n7.对f(y0)求导,得到f(y0)的导函数设为g(y0)\r\n8.令g(y0)=0，取得f(y0)的极值点，并且根据极值点获得f(y0)的单调性\r\n9.根据f(y0)的单调性取得函数的最小值\r\n\r\n备注：因为常数太多我这里就不替你计算了，自己计算导函数以及获得函数的单调性并且根据单调性取得最小值即可", "Konwledge_Point": "负权边的最短路径", "Question": ["两个圆弧在坐标轴方向上的最短距离怎么求？", ["\n\n", "如上图两个圆，它们在Y轴或者X轴方向上的最短距离怎么算？", "\n最好有方便编程实现的方法"]], "Tag": "算法设计"}
{"Answer": "\"carbohydrate\" 能被缩略成\"carboh\", 但是不能被缩略成\"carbo\" (或其余更短的前缀) 因为已经有一个单词用\"carbo\"开始\r\n\r\n如果是这样的话，那就得建立英语单词库了。。不然的话那就不知道如何去缩写了！！", "Konwledge_Point": "负权边的最短路径", "Question": ["最短前缀                             ", ["描述", "\n一个字符串的前缀是从该字符串的第一个字符起始的一个子串。例如 \"carbon\"的字串是: \"c\", \"ca\", \"car\", \"carb\", \"carbo\", 和 \"carbon\"。注意到这里我们不认为空串是字串, 但是每个非空串是它自身的字串. 我们现在希望能用前缀来缩略的表示单词。例如, \"carbohydrate\" 通常用\"carb\"来缩略表示. 现在给你一组单词, 要求你找到唯一标识每个单词的最短前缀", "\n在下面的例子中，\"carbohydrate\" 能被缩略成\"carboh\", 但是不能被缩略成\"carbo\" (或其余更短的前缀) 因为已经有一个单词用\"carbo\"开始", "\n一个精确匹配会覆盖一个前缀匹配，例如，前缀\"car\"精确匹配单词\"car\". 因此 \"car\" 是 \"car\"的缩略语是没有二义性的 , “car”不会被当成\"carriage\"或者任何在列表中以\"car\"开始的单词.", "\n输入", "\n输入包括至少2行，至多1000行. 每行包括一个以小写字母组成的单词，单词长度至少是1，至多是20.", "\n输出", "\n输出的行数与输入的行数相同。每行输出由相应行输入的单词开始，后面跟着一个空格接下来是相应单词的没有二义性的最短前缀标识符。", "\n样例输入", "\ncarbohydrate", "\ncart", "\ncarburetor", "\ncaramel", "\ncaribou", "\ncarbonic", "\ncartilage", "\ncarbon", "\ncarriage", "\ncarton", "\ncar", "\ncarbonate", "\n样例输出", "\ncarbohydrate carboh", "\ncart cart", "\ncarburetor carbu", "\ncaramel cara", "\ncaribou cari", "\ncarbonic carboni", "\ncartilage carti", "\ncarbon carbon", "\ncarriage carr", "\ncarton carto", "\ncar car", "\ncarbonate carbona"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You can use the base_convert function for what you want, but note that a hash is something else entirely.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["什么是最短的哈希/", ["\n\n", "Is there any hashing method for php to hash (just integer to string) in shortest lenght?", "\n\n", "for example ", "\n\n", "input : ", "10565", " \noutput : ", "rwk4", "\n\n", "input : ", "40853353246", "\noutput : ", "orhg0ut04h", "\n\n", "if there is not hashing like this", "\n\n", "Is there any way(function) to do it?", "\n    "]], "Tag": "算法设计"}
{"Answer": "参考：http://zhidao.baidu.com/link?url=z6bWEi7X6DVMTYXYi-nAxUD26klYLPcH2_n5XQNzL6rID2MlmPa-7Ws5AOaNqscHxrTnrP6jxntvthty7DrvKUh994JhsIndxHKtdq2FW0u", "Konwledge_Point": "负权边的最短路径", "Question": ["求最短哈密尔顿回路怎么实现？", ["求最短哈密尔顿回路怎么实现？", "\n是不是要用到动态规划算法？有没有人能用Java或者C++解释下？"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;When you adjust the new path distance here&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;   if D[edge.Destination] &amp;gt; D[edge.Source]+edge.Weight {\n      D[edge.Destination] = D[edge.Source] + edge.Weight\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Set some array element (say, &lt;code&gt;P&lt;/code&gt; for \"parent\") to point that you have come to &lt;code&gt;Destination&lt;/code&gt; from &lt;code&gt;Source&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;P[edge.Destination] = edge.Source\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After the algorithm ends, in this array each vertex will have its predecessor on the path leading from the starting vertex.&lt;/p&gt;\n\n&lt;p&gt;PS. OK, not with arrays and indices ...&lt;/p&gt;\n\n&lt;p&gt;Add a new field &lt;code&gt;Prev&lt;/code&gt; to the Vertex:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Vertex struct {\n    Id      string\n    Visited bool\n    AdjEdge []*Edge\n    Prev *Vertex\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When adjusting distance:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if D[edge.Destination] &amp;gt; D[edge.Source]+edge.Weight {\n    D[edge.Destination] = D[edge.Source] + edge.Weight\n    edge.Destination.Prev = edge.Source\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And when you display the results:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for vertex1, distance1 := range distmap1 {\n    fmt.Println(vertex1.Id, \"=\", distance1)\n    if vertex1.Prev != nil {\n        fmt.Println (vertex1.Id, \" -&amp;gt; \", vertex1.Prev.Id)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["开始，Dijkstra：打印出路径，而不仅仅是计算最短距离", ["\n\n", "Go, Dijkstra : print out the path, not just calculate the shortest distance.", "\n\n", "http://play.golang.org/p/A2jnzKcbWD", "\n\n", "I was able to find the shortest distance using Dijkstra algorithm, maybe not.\nThe code can be found here.", "\n\n", "But it would be useless if I can't print out the path.\nWith a lot of pointers going on, I can't figure out how to print out the final path that takes the least amount of weights.", "\n\n", "In short, how do I not only find the shortest distance, but also print out the shortest path on this given code?", "\n\n", "The link is here: ", "\n\n", "http://play.golang.org/p/A2jnzKcbWD", "\n\n", "And the snippet of the code is below:", "\n\n", "const MAXWEIGHT = 1000000\n\ntype MinDistanceFromSource map[*Vertex]int\n\nfunc (G *Graph) Dijks(StartSource, TargetSource *Vertex) MinDistanceFromSource {\n  D := make(MinDistanceFromSource)\n  for _, vertex := range G.VertexArray {\n    D[vertex] = MAXWEIGHT\n  }\n  D[StartSource] = 0\n\n  for edge := range StartSource.GetAdEdg() {\n    D[edge.Destination] = edge.Weight\n  }\n  CalculateD(StartSource, TargetSource, D)\n  return D\n}\n\nfunc CalculateD(StartSource, TargetSource *Vertex, D MinDistanceFromSource) {\n  for edge := range StartSource.GetAdEdg() {\n    if D[edge.Destination] > D[edge.Source]+edge.Weight {\n      D[edge.Destination] = D[edge.Source] + edge.Weight\n    } else if D[edge.Destination] < D[edge.Source]+edge.Weight {\n      continue\n    }\n    CalculateD(edge.Destination, TargetSource, D)\n  }\n}\n", "\n\n", "I did something with array to see what is being updated.", "\n\n", "http://play.golang.org/p/bRXYjnIGxy", "\n\n", "This gives ms", "\n\n", "   [A->D D->E E->F F->T B->E E->D E->F F->T]\n", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;h1&gt;Default PHP way&lt;/h1&gt;\n\n&lt;p&gt;What &lt;code&gt;http_build_query&lt;/code&gt; does is a common way to serialize arrays to URL. PHP automatically deserializes it in &lt;code&gt;$_GET&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;When wanting to serialize just a (non-associative) array of integers, you have other options.&lt;/p&gt;\n\n&lt;h1&gt;Small arrays&lt;/h1&gt;\n\n&lt;p&gt;For small arrays, conversion to underscore-separated list is quite convenient and efficient. It is done by &lt;code&gt;$fs = implode('_', $fs)&lt;/code&gt;. Then your URL would look like this:&lt;/p&gt;\n\n&lt;pre class=\"lang-none prettyprint-override\"&gt;&lt;code&gt;http://example.com/?c=asdf&amp;amp;fs=5_12_99\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The downside is that you’ll have to explicitly &lt;code&gt;explode('_', $_GET['fs'])&lt;/code&gt; to get the values back as an array.&lt;/p&gt;\n\n&lt;p&gt;Other delimiters may be used too. Underscore is considered alphanumeric and as such rarely has special meaning. In URLs, it is usually used as space replacement (e.g. by MediaWiki). It is hard to distinguish when used in underlined text. Hyphen is another common replacement for space. It is also often used as minus sign. Comma is a typical list separator, but unlike underscore and hyphen in is percent-encoded by &lt;code&gt;http_build_query&lt;/code&gt; and has special meaning almost everywhere. Similar situation is with vertical bar (“pipe”).&lt;/p&gt;\n\n&lt;h1&gt;Large arrays&lt;/h1&gt;\n\n&lt;p&gt;When having large arrays in URLs, you should first stop coding a start thinking. This almost always indicates bad design. Wouldn’t POST HTTP method be more appropriate? Don’t you have any more readable and space efficient way of identifying the addressed resource?&lt;/p&gt;\n\n&lt;p&gt;URLs should ideally be easy to understand and (at least partially) remember. Placing a large blob inside is really a bad idea.&lt;/p&gt;\n\n&lt;p&gt;Now I warned you. If you still need to embed a large array in URL, go ahead. Compress the data as much as you can, &lt;a href=\"https://en.wikipedia.org/wiki/Base64\" rel=\"nofollow\"&gt;base64&lt;/a&gt;-encode them to convert the binary blob to text and &lt;a href=\"https://en.wikipedia.org/wiki/Percent-encoding\" rel=\"nofollow\"&gt;url-encode&lt;/a&gt; the text to sanitize it for embedding in URL.&lt;/p&gt;\n\n&lt;h2&gt;Modified base64&lt;/h2&gt;\n\n&lt;p&gt;Mmm. Or better use a &lt;a href=\"https://en.wikipedia.org/wiki/Base64#URL_applications\" rel=\"nofollow\"&gt;modified version of base64&lt;/a&gt;. The one of my choice is using&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;-&lt;/code&gt; instead of &lt;code&gt;+&lt;/code&gt;,&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;_&lt;/code&gt; instead of &lt;code&gt;/&lt;/code&gt; and&lt;/li&gt;\n&lt;li&gt;omits the padding &lt;code&gt;=&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\n&lt;pre&gt;&lt;code&gt;define('URL_BASE64_FROM', '+/');\ndefine('URL_BASE64_TO', '-_');\nfunction url_base64_encode($data) {\n    $encoded = base64_encode($data);\n    if ($encoded === false) {\n        return false;\n    }\n    return str_replace('=', '', strtr($encoded, URL_BASE64_FROM, URL_BASE64_TO));\n}\nfunction url_base64_decode($data) {\n    $len = strlen($data);\n    if (is_null($len)) {\n        return false;\n    }\n    $padded = str_pad($data, 4 - $len % 4, '=', STR_PAD_RIGHT);\n    return base64_decode(strtr($padded, URL_BASE64_TO, URL_BASE64_FROM));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This saves two bytes on each character, that would be percent-encoded otherwise. There is no need to call &lt;code&gt;urlencode&lt;/code&gt; function, too.&lt;/p&gt;\n\n&lt;h2&gt;Compression&lt;/h2&gt;\n\n&lt;p&gt;Choice between gzip (&lt;a href=\"http://php.net/manual/en/function.gzcompress.php\" rel=\"nofollow\"&gt;&lt;code&gt;gzcompress&lt;/code&gt;&lt;/a&gt;) and bzip2 (&lt;a href=\"http://php.net/manual/en/function.bzcompress.php\" rel=\"nofollow\"&gt;&lt;code&gt;bzcompress&lt;/code&gt;&lt;/a&gt;) should be made. Do not want to invest time in their comparison, gzip looks better on several relatively small inputs (around 100 chars) for any setting of block size.&lt;/p&gt;\n\n&lt;h2&gt;Packing&lt;/h2&gt;\n\n&lt;p&gt;But what data should be fed into the compression algorithm?&lt;/p&gt;\n\n&lt;p&gt;In C, one would cast array of integers to array of chars (bytes) and hand it over to the compression function. That’s the most obvious way to do things. In PHP the most obvious way to do things is converting all the integers to their decimal representation as strings, then concatenation using delimiters, and only after that compression. What a waste of space!&lt;/p&gt;\n\n&lt;p&gt;So, let’s use the C approach! We’ll get rid of the delimiters and otherwise wasted space and encode each integer in 2 bytes using &lt;a href=\"http://php.net/manual/en/function.pack.php\" rel=\"nofollow\"&gt;&lt;code&gt;pack&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;define('PACK_NUMS_FORMAT', 'n*');\nfunction pack_nums($num_arr) {\n    array_unshift($num_arr, PACK_NUMS_FORMAT);\n    return call_user_func_array('pack', $num_arr);\n}\nfunction unpack_nums($packed_arr) {\n    return unpack(PACK_NUMS_FORMAT, $packed_arr);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Warning: &lt;code&gt;pack&lt;/code&gt; and &lt;code&gt;unpack&lt;/code&gt; behavior is machine-dependent in this case. Byte order could change between machines. But I think it will not be a problem in practice, because the application will not run on two systems with different endianity at the same time. When integrating multiple systems, though, the problem might arise. Also if you switch to a system with different endianity, links using the original one will break.&lt;/p&gt;\n\n&lt;h2&gt;Encoding together&lt;/h2&gt;\n\n&lt;p&gt;Now packing, compression and modified base64, all in one:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function url_embed_array($arr) {\n    return url_base64_encode(gzcompress(pack_nums($arr)));\n}\nfunction url_parse_array($data) {\n    return unpack_nums(gzuncompress(url_base64_decode($data)));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See the &lt;a href=\"http://ideone.com/7cesoN\" rel=\"nofollow\"&gt;result on IdeOne&lt;/a&gt;. It is better than OP’s answer where on his 40-element array my solution produced 91 chars while his one 98. When using &lt;code&gt;range(1, 1000)&lt;/code&gt; (generates &lt;code&gt;array(1, 2, 3, …, 1000)&lt;/code&gt;) as a benchmark, &lt;a href=\"http://ideone.com/FxphIa\" rel=\"nofollow\"&gt;OP’s solution produces 2712 characters while mine just 2032 characters&lt;/a&gt;. This is about 25 % better.&lt;/p&gt;\n\n&lt;p&gt;For the sake of completeness, OP’s solution is&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function url_embed_array($arr) {\n    return urlencode(base64_encode(gzcompress(implode(',', $arr))));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["PHP中数字索引数组的最短可能查询字符串", ["\n\n", "I’m looking for the most concise URL rather than the shortest PHP code. I don’t want my users to be scared by the hideous URLs that PHP creates when encoding arrays.", "\n\n", "PHP will do a lot of repetition in query string if you just stuff an array (", "$fn", ") through ", "http_build_query", ":", "\n\n", "$fs = array(5, 12, 99);\n$url = \"http://$_SERVER[HTTP_HOST]/?\" .\n    http_build_query(array('c' => 'asdf', 'fs' => $fs));\n", "\n\n", "The resulting ", "$url", " is", "\n\n", "http://example.com/?c=asdf&fs[0]=5&fs[1]=12&fs[3]=99\n", "\n\n", "How do I get it down to a minimum (using PHP or methods easily implemented in PHP)?", "\n    "]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/ecttx/article/details/8372486参考一下这个", "Konwledge_Point": "负权边的最短路径", "Question": ["请帮帮忙，有N个点，保证连线是最短的。或者使用循环嵌套，但是需要进行N个嵌套，递归不知道怎么写", ["C#问题，请帮帮忙，有N个点，我需要将其排序，保证连线是最短的。或者使用循环嵌套，但是需要进行N个嵌套，递归不知道怎么写，求大神，新手一枚，没啥分，帮帮忙！"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Your way of doing it is fine. You could use the ternary &lt;code&gt;?&lt;/code&gt; operator to create a shorter if statement though:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;return (count($a)&amp;lt;count($b)) ? $a : $b;\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["返回具有较少元素的数组的最短方法", ["\n\n", "I have two arrays.  I wish to return the array containing fewer elements.", "\n\n", "My code so far:", "\n\n", "<?php\n\nif ( count($a) < count($b) )\n    return $a;\nelse\n    return $b;\n", "\n\n", "Thanks in Advance.", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的程序一直停在了&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    while(scanf(&amp;#34;%s&amp;#34;,s[count])!&amp;#61;EOF)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        count&amp;#43;&amp;#43;;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;所以没看到输出&amp;#xff0c;你可以在while循环后面加一行打印&amp;#xff0c;就会发现问题了&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["为什么这个代码没有输出啊，oj中的最短前缀问题", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "#include<stdio.h>", "#include<string.h>", "int main()", "{", "    char s[1001][21];", "    char re[1001][21];", "    int i,j,k,l,count=0;", "    while(scanf(\"%s\",s[count])!=EOF)", "    {", "        count++;", "    }", "    for(i=0;i<count;i++)", "    {", "        int len=strlen(s[count]);", "        for(j=0;j<len;j++)", "        {", "            re[i][j]=s[i][j];", "            for(k=1;k<count;++k)", "            {", "                for(l=0;l<j;++l)", "                {", "                    if(re[i][l]!=s[k][l])", "                        break;", "                }", "                if(l==j)", "                    break;", "            }", "            if(k==count)", "                break;", "        }", "    }", "    for(i=0;i<count;i++)", "    {", "        printf(\"%s \",s[count]);", "        printf(\"%s\\n\",re[count]);", "    }", "    return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "下面用python的set的union方法实现的（这里安装了boltons，如果直接用set，会自动排序），输出[1, 3, 4, 2, 5]\r\n\r\n```\r\nfrom boltons.setutils import IndexedSet\r\n\r\na=[1,3,4]\r\nb=[3,2,5]\r\nc=[1,3,5]\r\n\r\nresult = IndexedSet(a).union(IndexedSet(b)).union(IndexedSet(c))\r\n\r\nprint(result)\r\n\r\n```\r\nhttps://stackoverflow.com/questions/1653970/does-python-have-an-ordered-set\r\n\r\n你研究下union方法\r\n\r\nc#实现如下：\r\n\r\n```\r\nint[] a = { 1, 3, 4 };\r\nint[] b = { 3, 2, 5 };\r\nint[] c = { 1, 3, 5 };\r\n\r\nvar result = a.Union(b).Union(c);\r\n\r\nforeach(var item in result)\r\n{\r\n    Console.WriteLine(item);\r\n}            \r\n```\r\n其Union的源码地址：https://github.com/dotnet/runtime/blob/master/src/libraries/System.Linq/src/System/Linq/Union.cs", "Konwledge_Point": "负权边的最短路径", "Question": ["怎么把多个有序的数组合并成一个数组，并且保证数组最短，同时保证合并后的数组还能保持各个数组的顺序？", ["例如：", "\n数组1：[1,3,4]", "\n数组2：[3,2,5]", "\n数组3：[1,3,5]", "\n\n", "合并后的最短数组 :[1,3,2,4,5] 或者 [1,3,4,2,5] 或者 [1,3,2,5,4],求出其中", "\n一种情况就行。这个数组能够同时满足原来三个数组的元素排列顺序。", "\n求大佬指点算法，什么语言都行"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;you may try &lt;code&gt;LENGTH()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; select product_name ,length(product_name) as the_length from your_table \n where product_name LIKE '%dead space%'\n ORDER BY  length(product_name)\n limit 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"http://sqlfiddle.com/#!2/45fd7/5\" rel=\"nofollow\"&gt;&lt;strong&gt;DEMO HERE&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["我可以用GROUP BY（MySql）选择最短的字段名称吗？", ["\n\n", "Let's say, I have 2 product names: dead space and dead space limited edition, and I want to group them by \"product_name\" to select \"dead space\" in a mysql query. So I want the query to select the \"product_name\" with the shortest string if the where caluse is \"product_name LIKE '%dead space%'\".", "\n\n", "Thanks a lot,", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You could just do the math on the database side, order your result set by distance and select the one with the lowest value.&lt;/p&gt;\n\n&lt;p&gt;And I took the liberty of updating your database access methods. Don't, under any circumstances, use &lt;code&gt;mysql_*&lt;/code&gt; functions.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$lat1 = 123.245;\n$lon1 = 48.123;\n\n$dbhost = \"localhost\";\n$dbname = \"database\";\n$username = \"user\";\n$password = \"pass\";\n\n$db = new PDO(\"mysql:host=$dbhost;dbname=$dbname\", $username, $password);\n\n$query = \"SELECT *, DEGREES(ACOS(SIN(RADIANS(?)) * SIN(RADIANS(`lat`)) +  COS(RADIANS(?)) * COS(RADIANS(`lat`)) * COS(RADIANS(? - `lon`)))) * 60 * 1.1515 AS distance\n    FROM store\n    ORDER BY distance ASC\n    LIMIT 1\";\n$stmt = $db-&amp;gt;prepare($query);\n$stmt-&amp;gt;execute(array($lat1, $lat1, $lon1));\n$result = $stmt-&amp;gt;fetch(PDO::FETCH_ASSOC);\nprint_r($result);\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["找到2个坐标与存储在表格中的1个集合之间的最短距离", ["\n\n", "I have a MySQL table with the following attributes:\nstore_name\nlat\nlon", "\n\n", "I have 1500 records.", "\n\n", "I need to find the closest store to the user (based on IP).", "\n\n", "I have figured the IP translation part using a 3rd party API. I know how to calculate the distance between 2 coordinates. However, I don't know how to return the store name that is the closest.", "\n\n", "My function to calculate distance", "\n\n", "function distance($lat1, $lon1, $lat2, $lon2) \n{\n$minus = $lon1 - $lon2;\n$dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1))*cos(deg2rad($lat2)) * cos(deg2rad($minus));\n$dist = acos($dist);\n$dist = rad2deg($dist);\n$miles = $dist * 60 * 1.1515;\nreturn $miles;\n}\n", "\n\n", "I can find the distance between user and each store.", "\n\n", "Note: $lat1 and $lat1 are obtained by a 3rd party API service.", "\n\n", "$store = mysql_query(\"SELECT * FROM store\") or die(mysql_error());\nwhile($row=mysql_fetch_assoc($store))\n{\n$lat2 = $row[\"lat\"];\n$lon2 = $row[\"lon\"];\n$distance = distance($lat1, $lon1, $lat2,$lon2);\n}\n", "\n\n", "How do I calculate run the distance function and store the distance value in an array and then sort the distances to find the nearest store? Is this the correct methodology? And how do I proceed with the array code? I have no experience with arrays in PHP.", "\n\n", "Thank you.", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Match and capture key-value pairs and then combine into an array:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$re = '/(\\w+)\\s*=\\s*([^;]*)/';\n$str = 'FIRM_ID = MC0356400000; TAG = EQTV; CURR_CODE = SUR; CLIENT_CODE = FR334; LIMIT_KIND = 1; OPEN_BALANCE = 4822.84; OPEN_LIMIT = 0.00; LEVERAGE = 0;';\npreg_match_all($re, $str, $matches);\nprint_r(array_combine($matches[1],$matches[2]));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See the &lt;a href=\"http://ideone.com/egrziC\" rel=\"nofollow noreferrer\"&gt;PHP demo&lt;/a&gt;, result:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Array\n(\n    [FIRM_ID] =&amp;gt; MC0356400000\n    [TAG] =&amp;gt; EQTV\n    [CURR_CODE] =&amp;gt; SUR\n    [CLIENT_CODE] =&amp;gt; FR334\n    [LIMIT_KIND] =&amp;gt; 1\n    [OPEN_BALANCE] =&amp;gt; 4822.84\n    [OPEN_LIMIT] =&amp;gt; 0.00\n    [LEVERAGE] =&amp;gt; 0\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The regex is&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/(\\w+)\\s*=\\s*([^;]*)/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See is &lt;a href=\"https://regex101.com/r/xlOydu/1\" rel=\"nofollow noreferrer\"&gt;demo online&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;(\\w+)&lt;/code&gt; - Group 1: one or more word chars&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\\s*=\\s*&lt;/code&gt; - a &lt;code&gt;=&lt;/code&gt; enclosed with optional whitespace(s)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;([^;]*)&lt;/code&gt; - Group 2: zero or more chars other than &lt;code&gt;;&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;To \"initialize\" the variables each at a time, you may use a &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$var_name = 'FIRM_ID';\n$re = '/' . $var_name . '\\s*=\\s*\\K[^;]*/';\n$str = 'FIRM_ID = MC0356400000; TAG = EQTV; CURR_CODE = SUR; CLIENT_CODE = FR334; LIMIT_KIND = 1; OPEN_BALANCE = 4822.84; OPEN_LIMIT = 0.00; LEVERAGE = 0;';\npreg_match($re, $str, $m);\nprint_r($m);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See the &lt;a href=\"http://ideone.com/5lqLNl\" rel=\"nofollow noreferrer\"&gt;PHP demo&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;\\K&lt;/code&gt; is the match reset operator that omits all text matched so far within the current match iteration.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["使用正则表达式从字符串中获取匹配模式的最短方法", ["\n\n", "I have pretty long string to parse, that looks like that (part of it)", "\n\n", "$string = 'FIRM_ID = MC0356400000; TAG = EQTV; CURR_CODE = SUR; CLIENT_CODE = FR334; LIMIT_KIND = 1; OPEN_BALANCE = 4822.84; OPEN_LIMIT = 0.00; LEVERAGE = 0;'\n", "\n\n", "I need to get values for php variables from that string, which I do with preg_match:", "\n\n", " preg_match(\"/FIRM_ID = (.*?);/\", $string, $m);\n $firm_id = trim($m[1]);\n\n preg_match(\"/CLIENT_CODE = (.*?);/\", $string, $m);\n $client_code = trim($m[1]);\n", "\n\n", "... and so on", "\n\n", "I was wondering is there a way to do the same in one line? May be with preg_replace or other functions, so I would not have to declare $m variable first and then take out from that [1] element.", "\n\n", "So the code supposed to look like", "\n\n", " $firm_id = somefunction($string);\n $client_code = somefunction($string);\n", "\n\n", "Its not practical question, more theoretical. I know how to get result that I need, I want to know if there is a simpler and more elegant way.", "\n\n", "Thanks.", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;用int 和 unsigned long long比较&amp;#xff0c;当int 为负值&amp;#xff0c;会转换为最大的unsigned long long - n&amp;#xff0c;通常这是一个天文数字&amp;#xff0c;所以此时的 -1 在计算机里是2^64-1 ,这个数基本会大于程序中所有出现的数字&amp;#xff0c;无论你右侧的数有多大&amp;#xff0c;都小于这个数。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["KMP代码中的while循环部分出现问题", ["问题是在写KMP算法过程中出现的，但好像不是算法问题，先po出代码", "\n", "#include<iostream>", "\n", "#include<cstring>", "\nusing namespace std;\nvoid Match_KMP(string T,string P)\n{\n    ", "//", "先找子串的NEXT数组\n    int ", "next", "[P.length()];\n    ", "next", "[", "0", "] = -", "1", ";\n    ", "next", "[", "1", "] = ", "0", ";\n    int j = ", "1", ",k = ", "0", ",i;\n    ", "while", "(j < P.length()){\n        ", "if", "(P[k] == P[j] || k == -", "1", ")\n            ", "next", "[++j] = ++k;\n        ", "else", "{\n            k = ", "next", "[k];\n        }\n    }\n    ", "//", "开始查找\n    i = ", "0", "; j = ", "0", ";\n    ", "while", "(i < T.length() && j < P.length()){\n        ", "if", "(T[i] == P[i] || j == -", "1", "){\n            cout<<T[i]<<", "\" \"", "<<P[i];\n            i++;\n            j++;\n        }\n        ", "else", "{\n            j = ", "next", "[j]; \n            ", "//", "cout<<", "\"j此时的值为：\"", "<<j<<endl;\n            ", "//", "cout<<", "\"P.LEN此时的值为：\"", "<<P.length()<<endl;\n            ", "//", "cout<<(j < P.length());\n            ", "//", "cout<<endl<<(i < T.length());\n        }\n    }\n    ", "if", "(j < P.length())\n        cout<<", "0", "<<endl;\n    ", "else", "\n        cout<<endl<<i<<endl;\n}\nint main()\n{\n    cin>>father;\n    cin>>son;\n    Match_KMP(father,son);\n    return ", "0", ";\n}\n\n", "\n", "\n", "\n", "由于运行过程中用debug看，始终查找子串的while部分只进入了一次循环，所以在注释部分输出了一些结果，发现是第二个条件不", "\n", "符合，但我的疑问是-1 < 3为什么输出结果是0呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;If you have a fixed set of strings and you will only need to look those up then find a minimal perfect hash function. &lt;a href=\"http://en.wikipedia.org/wiki/Perfect_hash_function\" rel=\"nofollow\"&gt;http://en.wikipedia.org/wiki/Perfect_hash_function&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["字符串上的最小校验和", ["\n\n", "scratching my head over this.", "\n\n", "i have 350 strings average 90 chars long, all strings are unique.\nNow, i wanna generate a unique id for each string.", "\n\n", "i tried the sum of chars in the string wich gave two doubles, the returned sum\nis not unique enough. Anybody any idea how to approach this? I thought of hash(), is that the best solution?", "\n\n", "abcdef will return the same as abcdfe", "\n    "]], "Tag": "算法设计"}
{"Answer": "使用模数\r\n\r\n    count = (count + 1) % 7", "Konwledge_Point": "负权边的最短路径", "Question": ["循环计数器-最短算法 ", ["功能：每次按钮按下，就会生成一个整数，然后达到最大值再返回0。", "\n\n", "我想要最短的实现算法。", "\n\n", "比如像这样。从0到6，再从6到0。", "\n\n", "count ++;\ncount *= (count != 7);\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可能是min初始值太小了&amp;#xff0c;min&amp;#61;251;试试&amp;#xff1f;(不确定&amp;#xff09;&lt;/p&gt;\n&lt;p&gt;&amp;#xff08;string a&amp;#xff0c;完全可以改成char a[252]&amp;#61;{0};然后读取是cin.getline(a,250);len&amp;#61;strlen(a);或者不求len,算到a[i]&amp;#61;&amp;#61;0就是到最后了&amp;#xff1b;其他不变&amp;#xff09;&lt;br /&gt;&amp;#xff08;...&amp;amp;&amp;amp; a[i]!&amp;#61; &amp;#39;,&amp;#39; 好像没用&amp;#xff1f;题目提到输入只包含小写字母和空格&amp;#xff09;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["2444 - 最长最短单词", ["2444 - 最长最短单词", "题目描述", "输入一行长度不超过250位的字符串，其中只有小写字母和空格，小写字母组成单词，单词之间只用一个空格隔开，字符串的开始和结束都没有多余空格，输出长度最长的单词和最短的单词，若有多个单词符合要求，只要求输出从前往后数第一个满足要求的单词。", "\n", "输入", "输入文件只有一行字符串，由小写字母和空格组成。", "\n", "输出", "输出文件有两行，第一行为最长的单词，第二行为最短的单词。", "\n", "样例", "输入", "this is my book", "输出", "this", "is", "标签", "字符串", "\n", "#include<bits/stdc++.h>", "\nusing namespace std;\nint main() {\n    string a;\n    int i,len,", "l", "=0,max=0,min=101,x,y;\n    getline(cin,a);\n    ", "len", "=a.size();\n    a[len]=", "' '", ";\n    ", "for", "(", "i", "=0; i<=len; i++) {\n        ", "if", "(a[i]!=", "' '", "&&a[i]!=", "','", ") {\n            l++;\n        } ", "else", " ", "if", "(l>0) {\n            ", "if", "(l>max) {\n                ", "max", "=l;\n                ", "x", "=i-l;\n            }\n            ", "if", "(l<min) {\n                ", "min", "=l;\n                ", "y", "=i-l;\n            }\n            ", "l", "=0;\n        }\n    }\n    ", "for", "(", "i", "=x; i<max+x; i++)\n        cout<<a[i];\n    cout<<endl;\n    ", "for", "(", "i", "=y; i<min+y; i++)\n        cout<<a[i];\n    return 0;\n}\n", "\n", "测试点1： Accepted， 用时: 0 ms， 内存: 256 KB", "测试点2： Accepted， 用时: 0 ms， 内存: 256 KB", "测试点3： Accepted， 用时: 0 ms， 内存: 256 KB", "测试点4： Accepted， 用时: 0 ms， 内存: 256 KB", "测试点5： Accepted， 用时: 0 ms， 内存: 252 KB", "测试点6： Accepted， 用时: 0 ms， 内存: 252 KB", "测试点7： Wrong Answer， 用时: 0 ms， 内存: 256 KB", "各位朋友，帮我看一下这个代码哪里错了！"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;methods that read data into byte slices return the number of bytes read.  You should save that number and then use it to create your string.  &lt;code&gt;n&lt;/code&gt; being the number of bytes read, your code would look like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;s := string(byteArray[:n])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If for some reason you don't have &lt;code&gt;n&lt;/code&gt;, you could use the bytes package to find it, assuming your input doesn't have a null character in it.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;n := bytes.Index(byteArray, []byte{0})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or as icza pointed out, you can use the code below:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;n := bytes.IndexByte(byteArray, 0)\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["将字节数组转换为字符串的最佳方法是什么？", ["\n\n", "I need to read ", "[100]byte", " to transfer a bunch of ", "string", " data.", "\n\n", "Because not all of the ", "string", "s are precisely 100 characters long, the remaining part of the ", "byte array", " are padded with ", "0", "s.", "\n\n", "If I tansfer ", "[100]byte", " to ", "string", " by: ", "string(byteArray[:])", ", the tailing ", "0", "s are displayed as ", "^@^@", "s.", "\n\n", "In C the ", "string", " will terminate upon ", "0", ", so I wonder what's the best way of smartly transfer a ", "byte array", " to ", "string", " in Golang.", "\n    ", "\n\n", "转载于:https://stackoverflow.com/questions/14230145/what-is-the-best-way-to-convert-byte-array-to-string"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;是那个测试页面的问题。保存成独立的html文件没问题&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["为什么这段js一直提示找不到文件？？？？   要求一个数组方阵从左上到右下的最短距离", ["<!DOCTYPE html>", "\n<html>", "\n\n", "<body>", "\n<p>最小路径是：</p>", "\n<p id=\"yyy\"></p>", "\n\n", "<script>", "\n   ", "\n    var themin=0;", "\n    ", "\n    var grid = [", "\n       [1,3,1],", "\n       [1,5,1],", "\n       [4,2,1]  ]", "\n    ", "\n    function minPathSum(grid) {", "\n\n", "          ", "\n           var i,k,j;", "\n           ", "\n           var sum = new Array(9);", "\n           ", "\n           for (var i=0; i<3; i++) {", "\n               sum[i] = new Array(3);", "\n           }", "\n              sum[0][0]=grid[0][0];", "\n\n", "          for (k=0; k<3; k++) {", "\n           ", "\n               for (j=0; j<3; j++) {", "\n                  ", "\n                   if ((k===0)&&(j===0)) {", "\n                      sum[0][0]=grid[0][0];", "\n                   }else if(k-1<0) {", "\n                         sum[k][j] = sum[k][j-1]+grid[k][j];", "\n                       } else if(j-1<0) {", "\n                               sum[k][j] = sum[k-1][j]+grid[k][j];", "\n                            }else {", "\n                                 ", "\n                   sum[i][j] =Math.min(sum[k-1][j], sum[k][j-1])+grid[k][j];", "\n                             }", "\n                         ", "\n                   ", "\n               }", "\n               ", "\n           }", "\n           return sum[2][2];", "\n           ", "\n}", "\n   ", "\n   var x = minPathSum(grid);", "\n   var p=document.getElementById(\"yyy\");", "\n   p.innerHTML = x;", "\n\n", "\n</script>", "\n\n", "</body>", "\n\n", "</html>", "\n\n", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff1a;&amp;#xff08;完整代码包含了GUI界面的设计&amp;#xff09;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\nimport random\nimport math\nimport heapq\nimport tkinter &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; tk\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Point:\n    def &lt;span class=\"hljs-constructor\"&gt;__init__(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;)&lt;/span&gt;:\n        self.x &amp;#61; x\n        self.y &amp;#61; y\n\n    def &lt;span class=\"hljs-constructor\"&gt;__str__(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;)&lt;/span&gt;:\n        return f&lt;span class=\"hljs-string\"&gt;&amp;#34;{self.x},{self.y}&amp;#34;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Edge:\n    def &lt;span class=\"hljs-constructor\"&gt;__init__(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;weight&lt;/span&gt;)&lt;/span&gt;:\n        self.p1 &amp;#61; p1\n        self.p2 &amp;#61; p2\n        self.weight &amp;#61; weight\n\n    def &lt;span class=\"hljs-constructor\"&gt;__lt__(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;other&lt;/span&gt;)&lt;/span&gt;:\n        return self.weight &amp;lt; other.weight\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Graph:\n    def &lt;span class=\"hljs-constructor\"&gt;__init__(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;)&lt;/span&gt;:\n        self.points &amp;#61; &lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;\n        self.edges &amp;#61; &lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;\n        self.colors &amp;#61; &lt;span class=\"hljs-literal\"&gt;[&amp;#34;&lt;span class=\"hljs-identifier\"&gt;red&lt;/span&gt;&amp;#34;, &amp;#34;&lt;span class=\"hljs-identifier\"&gt;blue&lt;/span&gt;&amp;#34;, &amp;#34;&lt;span class=\"hljs-identifier\"&gt;green&lt;/span&gt;&amp;#34;, &amp;#34;&lt;span class=\"hljs-identifier\"&gt;purple&lt;/span&gt;&amp;#34;, &amp;#34;&lt;span class=\"hljs-identifier\"&gt;orange&lt;/span&gt;&amp;#34;, &amp;#34;&lt;span class=\"hljs-identifier\"&gt;brown&lt;/span&gt;&amp;#34;]&lt;/span&gt;\n\n    def add&lt;span class=\"hljs-constructor\"&gt;_point(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;point&lt;/span&gt;)&lt;/span&gt;:\n        self.points.append(point)\n\n    def add&lt;span class=\"hljs-constructor\"&gt;_edge(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;weight&lt;/span&gt;)&lt;/span&gt;:\n        self.edges.append(&lt;span class=\"hljs-constructor\"&gt;Edge(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;weight&lt;/span&gt;)&lt;/span&gt;)\n\n    def get&lt;span class=\"hljs-constructor\"&gt;_distance(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;)&lt;/span&gt;:\n        return math.sqrt((p1.x - p2.x)**&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#43; (p1.y - p2.y)**&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n\n    def generate&lt;span class=\"hljs-constructor\"&gt;_points(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;width&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;height&lt;/span&gt;)&lt;/span&gt;:\n        self.points &amp;#61; &lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(n):\n            x &amp;#61; random.randint(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, width)\n            y &amp;#61; random.randint(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, height)\n            self.points.append(&lt;span class=\"hljs-constructor\"&gt;Point(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;)&lt;/span&gt;)\n\n    def draw&lt;span class=\"hljs-constructor\"&gt;_points(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;canvas&lt;/span&gt;)&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i, point &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; enumerate(self.points):\n            canvas.create&lt;span class=\"hljs-constructor\"&gt;_oval(&lt;span class=\"hljs-params\"&gt;point&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;-2, &lt;span class=\"hljs-params\"&gt;point&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;-2, &lt;span class=\"hljs-params\"&gt;point&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;&amp;#43;2, &lt;span class=\"hljs-params\"&gt;point&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;&amp;#43;2, &lt;span class=\"hljs-params\"&gt;fill&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;colors&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;%&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;colors&lt;/span&gt;)&lt;/span&gt;])\n\n    def draw&lt;span class=\"hljs-constructor\"&gt;_edge(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;canvas&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;color&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;black&amp;#34;&lt;/span&gt;)&lt;/span&gt;:\n        canvas.create&lt;span class=\"hljs-constructor\"&gt;_line(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;fill&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;color&lt;/span&gt;)&lt;/span&gt;\n\n    def generate&lt;span class=\"hljs-constructor\"&gt;_edges(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;rule&lt;/span&gt;)&lt;/span&gt;:\n        self.edges &amp;#61; &lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(len(self.points)):\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, len(self.points)):\n                p1 &amp;#61; self.points&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;\n                p2 &amp;#61; self.points&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; rule&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;straight&amp;#34;&lt;/span&gt;:\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; p1.x&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;p2.x &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; p1.y&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;p2.y:\n                        self.add&lt;span class=\"hljs-constructor\"&gt;_edge(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;get_distance&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;)&lt;/span&gt;)\n                elif rule&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;diag&amp;#34;&lt;/span&gt;:\n                    self.add&lt;span class=\"hljs-constructor\"&gt;_edge(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;get_distance&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;)&lt;/span&gt;)\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; self.get&lt;span class=\"hljs-constructor\"&gt;_distance(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;)&lt;/span&gt; &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;:\n                        self.add&lt;span class=\"hljs-constructor\"&gt;_edge(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;get_distance&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;)&lt;/span&gt;)\n\n    def kruskal(self):\n        self.edges.sort&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n        parent &amp;#61; {}\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; point &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; self.points:\n            parent&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;point&lt;/span&gt;]&lt;/span&gt; &amp;#61; point\n        mst &amp;#61; &lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; edge &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; self.edges:\n            p1 &amp;#61; edge.p1\n            p2 &amp;#61; edge.p2\n            root1 &amp;#61; self.find(parent, p1)\n            root2 &amp;#61; self.find(parent, p2)\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; root1 !&amp;#61; root2:\n                mst.append(edge)\n                parent&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;root1&lt;/span&gt;]&lt;/span&gt; &amp;#61; root2\n        return mst\n\n    def find(self, parent, point):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; parent&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;point&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;point:\n            return point\n        return self.find(parent, parent&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;point&lt;/span&gt;]&lt;/span&gt;)\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; App:\n    def &lt;span class=\"hljs-constructor\"&gt;__init__(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;)&lt;/span&gt;:\n        self.master &amp;#61; master\n        self.width &amp;#61; &lt;span class=\"hljs-number\"&gt;800&lt;/span&gt;\n        self.height &amp;#61; &lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;\n        master.title(&lt;span class=\"hljs-string\"&gt;&amp;#34;Shortest Path&amp;#34;&lt;/span&gt;)\n\n        tk.&lt;span class=\"hljs-constructor\"&gt;Label(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Number of Points:&amp;#34;&lt;/span&gt;)&lt;/span&gt;.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        self.num_points_entry &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Entry(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;)&lt;/span&gt;\n        self.num_points_entry.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        self.num_points_entry.insert(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;10&amp;#34;&lt;/span&gt;)\n\n        tk.&lt;span class=\"hljs-constructor\"&gt;Label(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Size of Grid:&amp;#34;&lt;/span&gt;)&lt;/span&gt;.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        self.grid_size_entry &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Entry(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;)&lt;/span&gt;\n        self.grid_size_entry.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        self.grid_size_entry.insert(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;800x500&amp;#34;&lt;/span&gt;)\n\n        tk.&lt;span class=\"hljs-constructor\"&gt;Label(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Connection Rule:&amp;#34;&lt;/span&gt;)&lt;/span&gt;.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        self.rule_var &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;StringVar()&lt;/span&gt;\n        self.rule_var.set(&lt;span class=\"hljs-string\"&gt;&amp;#34;straight&amp;#34;&lt;/span&gt;)\n        tk.&lt;span class=\"hljs-constructor\"&gt;Radiobutton(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Straight&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;variable&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;rule_var&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;value&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;straight&amp;#34;&lt;/span&gt;)&lt;/span&gt;.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        tk.&lt;span class=\"hljs-constructor\"&gt;Radiobutton(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Diagonal&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;variable&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;rule_var&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;value&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;diag&amp;#34;&lt;/span&gt;)&lt;/span&gt;.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        tk.&lt;span class=\"hljs-constructor\"&gt;Radiobutton(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Distance &amp;lt; 100&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;variable&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;rule_var&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;value&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;dist&amp;#34;&lt;/span&gt;)&lt;/span&gt;.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n\n        self.generate_button &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Button(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Generate&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;command&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;generate_points&lt;/span&gt;)&lt;/span&gt;\n        self.generate_button.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n\n        self.canvas &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Canvas(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;width&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;width&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;height&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;height&lt;/span&gt;)&lt;/span&gt;\n        self.canvas.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, columnspan&amp;#61;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;)\n\n        self.solve_button &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Button(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Solve&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;command&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;solve&lt;/span&gt;)&lt;/span&gt;\n        self.solve_button.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n\n        self.show_all_button &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Button(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Show All&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;command&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;show_all&lt;/span&gt;)&lt;/span&gt;\n        self.show_all_button.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n\n        self.quit_button &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Button(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Quit&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;command&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;quit&lt;/span&gt;)&lt;/span&gt;\n        self.quit_button.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, sticky&amp;#61;tk.W)\n\n        self.rule_var.trace(&lt;span class=\"hljs-string\"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;, lambda *_: self.generate&lt;span class=\"hljs-constructor\"&gt;_points()&lt;/span&gt;)\n\n        self.graph &amp;#61; &lt;span class=\"hljs-constructor\"&gt;Graph()&lt;/span&gt;\n\n    def generate&lt;span class=\"hljs-constructor\"&gt;_points(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;)&lt;/span&gt;:\n        self.graph.generate&lt;span class=\"hljs-constructor\"&gt;_points(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;num_points_entry&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;get&lt;/span&gt;()&lt;/span&gt;), *map(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;, self.grid_size_entry.get&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;.split(&lt;span class=\"hljs-string\"&gt;&amp;#34;x&amp;#34;&lt;/span&gt;)))\n        self.graph.generate&lt;span class=\"hljs-constructor\"&gt;_edges(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;rule_var&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;get&lt;/span&gt;()&lt;/span&gt;)\n        self.redraw&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n\n    def solve(self):\n        self.canvas.delete(&lt;span class=\"hljs-string\"&gt;&amp;#34;all&amp;#34;&lt;/span&gt;)\n        self.graph.generate&lt;span class=\"hljs-constructor\"&gt;_edges(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;rule_var&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;get&lt;/span&gt;()&lt;/span&gt;)\n        mst &amp;#61; self.graph.kruskal&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i, edge &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; enumerate(mst):\n            self.graph.draw&lt;span class=\"hljs-constructor\"&gt;_edge(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;canvas&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;edge&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;edge&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;color&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;graph&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;colors&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;%&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;graph&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;colors&lt;/span&gt;)&lt;/span&gt;])\n        self.graph.draw&lt;span class=\"hljs-constructor\"&gt;_points(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;canvas&lt;/span&gt;)&lt;/span&gt;\n        self.canvas.create&lt;span class=\"hljs-constructor\"&gt;_text(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;width&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;/&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;/&lt;/span&gt;2, &lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;height&lt;/span&gt;-20, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;f&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;Minimum Total Weight: {min_total_weight:.2f}&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;font&lt;/span&gt;&amp;#61;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Arial&amp;#34;&lt;/span&gt;, 16, &lt;span class=\"hljs-string\"&gt;&amp;#34;bold&amp;#34;&lt;/span&gt;)&lt;/span&gt;)\n        self.canvas.update&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n\n    def redraw(self):\n        self.canvas.delete(&lt;span class=\"hljs-string\"&gt;&amp;#34;all&amp;#34;&lt;/span&gt;)\n        self.graph.draw&lt;span class=\"hljs-constructor\"&gt;_edges(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;canvas&lt;/span&gt;)&lt;/span&gt;\n        self.graph.draw&lt;span class=\"hljs-constructor\"&gt;_points(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;canvas&lt;/span&gt;)&lt;/span&gt;\n        self.canvas.update&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n\nroot &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Tk()&lt;/span&gt;\napp &amp;#61; &lt;span class=\"hljs-constructor\"&gt;App(&lt;span class=\"hljs-params\"&gt;root&lt;/span&gt;)&lt;/span&gt;\nroot.mainloop&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;运行结果界面截图如下&amp;#xff1a;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/366043304186197.jpg\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["Python编写最短连线程序", ["\n", "from", " tkinter ", "import", " *\n", "import", " tkinter.messagebox\n", "import", " itertools\n", "import", " random\n", "import", " math\n", "import", " itertools\n\nsize = ", "50", "  ", "# 定义方格的大小", "\nr = ", "5", "  ", "# 定义原点的半径", "\nprecision = ", "10", "  ", "# 定义点击圆点精度范围", "\nEntry_Width = ", "60", "\nEntry_Height = ", "40", "\n\n\n", "class", " ", "GUI", "(", "Tk", "):\n    ", "def", " ", "__init__", "(", "self", "):\n        Tk.__init__(self)\n        self.Width_Number = ", "0", "\n        self.Height_Number = ", "0", "\n        self.Width = ", "max", "((self.Width_Number + ", "2", ") * size, ", "400", ")\n        self.Height = (self.Height_Number + ", "3", ") * size\n        self.cv = ", "None", "\n        self.Sign = [[", "0", " ", "for", " j ", "in", " ", "range", "(", "0", ", ", "101", ")] ", "for", " i ", "in", " ", "range", "(", "0", ", ", "101", ")]\n        self.Entry_W = ", "None", "\n        self.Entry_H = ", "None", "\n        self.Entry_Points = ", "None", "\n        self.title(", "\"最短连线程序\"", ")\n        self.geometry(", "str", "(self.Width) + ", "'x'", " + ", "str", "(self.Height) + ", "'+10+10'", ")\n        self.init_input()\n        self.Min_Distance = ", "1e20", "\n        self.Line_Connect = ", "None", "\n        self.distance = []\n\n    ", "def", " ", "Draw_Point", "(", "self, x_Num, y_Num", "):\n        x_Pos = x_Num * size\n        y_Pos = y_Num * size\n        ", "if", " self.Sign[x_Num - ", "1", "][y_Num - ", "1", "]:\n            self.cv.delete(", "str", "(x_Pos) + ", "'-'", " + ", "str", "(y_Pos))\n            self.Sign[x_Num - ", "1", "][y_Num - ", "1", "] = ", "0", "\n        ", "else", ":\n            self.cv.create_oval(x_Pos - r, y_Pos - r, x_Pos + r, y_Pos + r, fill=", "\"black\"", ",\n                                tags=", "str", "(x_Pos) + ", "'-'", " + ", "str", "(y_Pos))\n            self.Sign[x_Num - ", "1", "][y_Num - ", "1", "] = ", "1", "\n\n    ", "def", " ", "Mouse_Button_Event", "(", "self, event", "):\n        ", "# 获得点击位置最近的坐标", "\n        x_Num = ", "round", "(event.x / size)\n        y_Num = ", "round", "(event.y / size)\n        ", "if", " x_Num > self.Width_Number + ", "1", " ", "or", " y_Num > self.Height_Number + ", "1", " ", "or", " x_Num == ", "0", " ", "or", " y_Num == ", "0", ":\n            ", "return", "\n        x_Pos = x_Num * size\n        y_Pos = y_Num * size\n        ", "if", " ", "abs", "(event.x - x_Pos) < precision ", "and", " ", "abs", "(event.y - y_Pos) < precision:\n            self.Draw_Point(x_Num, y_Num)\n\n    ", "def", " ", "Generate", "(", "self", "):\n        ", "try", ":\n            self.Width_Number = ", "int", "(self.Entry_W.get())\n            self.Height_Number = ", "int", "(self.Entry_H.get())\n            ", "if", " self.Width_Number == ", "0", " ", "or", " self.Height_Number == ", "0", " ", "or", " self.Width_Number >= ", "100", " ", "or", " self.Height_Number >= ", "100", ":\n                tkinter.messagebox.showinfo(", "'警告'", ", ", "'数字超出范围'", ")\n                ", "return", "\n        ", "except", " ValueError:\n            tkinter.messagebox.showinfo(", "'警告'", ", ", "'请输入数字'", ")\n            ", "return", "\n\n        self.Width = ", "max", "((self.Width_Number + ", "2", ") * size, ", "400", ")\n        self.Height = (self.Height_Number + ", "3", ") * size\n        self.geometry(", "str", "(self.Width) + ", "'x'", " + ", "str", "(self.Height) + ", "'+10+10'", ")\n        ", "if", " self.cv ", "is", " ", "not", " ", "None", ":\n            self.cv.delete(", "'all'", ")\n            self.cv.config(width=self.Width, height=self.Height)\n        ", "else", ":\n            self.cv = Canvas(self, width=self.Width, height=self.Height, bg=", "'white'", ")\n            self.cv.pack()\n        ", "for", " i ", "in", " ", "range", "(", "0", ", self.Width_Number):\n            ", "for", " j ", "in", " ", "range", "(", "0", ", self.Height_Number):\n                self.cv.create_rectangle((i + ", "1", ") * size, (j + ", "1", ") * size, (i + ", "2", ") * size, (j + ", "2", ") * size)\n        self.cv.bind_all(", "\"<Button-1>\"", ", self.Mouse_Button_Event)\n        Label(self, text=", "'点数:'", ").place(x=", "0", ", y=(self.Height_Number + ", "2", ") * size, width=Entry_Width, height=Entry_Height)\n        self.Entry_Points = Entry(self.cv)\n        self.Entry_Points.place(x=Entry_Width, y=(self.Height_Number + ", "2", ") * size, width=Entry_Width,\n                                height=Entry_Height)\n        Button(self.cv, text=", "'随机'", ", command=self.Random_Number).place(x=Entry_Width * ", "2", ",\n                                                                     y=(self.Height_Number + ", "2", ") * size,\n                                                                     width=Entry_Width, height=Entry_Height)\n        Button(self.cv, text=", "'计算'", ", command=self.WorkOut).place(x=Entry_Width * ", "3", ",\n                                                               y=(self.Height_Number + ", "2", ") * size,\n                                                               width=Entry_Width, height=Entry_Height)\n        self.init_input()\n\n    ", "def", " ", "init_input", "(", "self", "):\n        Label(self, text=", "'列数:'", ").place(x=", "0", ", y=", "0", ", width=Entry_Width, height=Entry_Height)\n        self.Entry_W = Entry(self)\n        self.Entry_W.place(x=Entry_Width, y=", "0", ", width=Entry_Width, height=Entry_Height)\n        Label(self, text=", "'行数:'", ").place(x=Entry_Width * ", "2", ", y=", "0", ", width=Entry_Width, height=Entry_Height)\n        self.Entry_H = Entry(self)\n        self.Entry_H.place(x=Entry_Width * ", "3", ", y=", "0", ", width=Entry_Width, height=Entry_Height)\n        self.Button_Generate = Button(self, text=", "'生成'", ", command=self.Generate)\n        self.Button_Generate.place(x=Entry_Width * ", "4", ", y=", "0", ", width=Entry_Width, height=Entry_Height)\n        self.Sign = [[", "0", " ", "for", " j ", "in", " ", "range", "(", "0", ", ", "len", "(self.Sign[", "0", "]))] ", "for", " i ", "in", " ", "range", "(", "0", ", ", "len", "(self.Sign))]\n        self.Button_Clear = Button(self, text=", "'清空'", ", command=self.clear_Sign)\n        self.Button_Clear.place(x=Entry_Width * ", "5", ", y=", "0", ", width=Entry_Width, height=Entry_Height)\n\n    ", "def", " ", "clear_Sign", "(", "self", "):\n        self.clear_Line()\n        ", "for", " i ", "in", " ", "range", "(", "0", ", self.Width_Number + ", "1", "):\n            ", "for", " j ", "in", " ", "range", "(", "0", ", self.Height_Number + ", "1", "):\n                ", "if", " self.Sign[i][j] == ", "1", ":\n                    self.Draw_Point(i + ", "1", ", j + ", "1", ")\n\n    ", "def", " ", "clear_Line", "(", "self", "):\n        self.cv.delete(", "\"line\"", ")\n\n    ", "def", " ", "Random_Number", "(", "self", "):\n        ", "try", ":\n            temp = ", "int", "(self.Entry_Points.get())\n        ", "except", " ValueError:\n            tkinter.messagebox.showinfo(", "'警告'", ", ", "'请输入数字'", ")\n            ", "return", "\n        self.clear_Sign()\n        random_list = ", "list", "(itertools.product(", "range", "(", "1", ", self.Width_Number + ", "2", "), ", "range", "(", "1", ", self.Height_Number + ", "2", ")))\n        number = random.sample(random_list, temp)\n        ", "for", " each ", "in", " number:\n            x_Num = each[", "0", "]\n            y_Num = each[", "1", "]\n            self.Draw_Point(x_Num, y_Num)\n\n    ", "def", " ", "GetDistance", "(", "self, Point_List, i, j", "):\n        ", "return", " math.sqrt(((Point_List[i][", "0", "] - Point_List[j][", "0", "]) ** ", "2", ") + ((Point_List[i][", "1", "] - Point_List[j][", "1", "]) ** ", "2", "))\n\n    ", "# dfs计算出最短路径连线", "\n    ", "def", " ", "dfs", "(", "self,flag, index, ", "sum", ", stack", "):\n        ", "if", " ", "sum", " > self.Min_Distance:\n            ", "return", "\n        ", "if", " ", "len", "(stack) == ", "len", "(flag):\n            ", "if", " ", "sum", " < self.Min_Distance:\n                self.Min_Distance = ", "sum", "\n                self.Line_Connect = []\n                self.Line_Connect.append(", "list", "(stack))\n                ", "return", "\n            ", "elif", " ", "sum", " == self.Min_Distance:\n                self.Line_Connect.append(", "list", "(stack))\n                ", "return", "\n            ", "else", ":\n                ", "return", "\n        ", "for", " j ", "in", " ", "range", "(", "0", ", ", "len", "(flag)):\n            ", "if", " flag[j] == ", "0", ":\n                flag[j] = ", "1", "\n                stack.append(j)\n                self.dfs(flag, j, ", "sum", "+self.distance[index][j],stack)\n                flag[j] = ", "0", "\n                stack.pop()\n\n    ", "def", " ", "WorkOut", "(", "self", "):\n        Point_List = []\n        ", "for", " i ", "in", " ", "range", "(", "0", ", self.Width_Number + ", "1", "):\n            ", "for", " j ", "in", " ", "range", "(", "0", ", self.Height_Number + ", "1", "):\n                ", "if", " self.Sign[i][j] == ", "1", ":\n                    Point_List.append([i, j])\n        length = ", "len", "(Point_List)\n        self.distance = [[self.GetDistance(Point_List, i, j) ", "for", " j ", "in", " ", "range", "(", "0", ", length)] ", "for", " i ", "in", " ", "range", "(", "0", ", length)]\n        self.Min_Distance = ", "10", "**", "10", "\n        self.Line_Connect = []\n        self.clear_Line()\n        stack = []\n        flag = [", "0", " ", "for", " i ", "in", " ", "range", "(", "0", ", length)]\n        ", "for", " i ", "in", " ", "range", "(", "0", ", length):\n            flag[i] = ", "1", "\n            stack.append(i)\n            self.dfs(flag, i, ", "0", ", stack)\n            flag[i] = ", "0", "\n            stack.pop()\n\n        ", "for", " each1 ", "in", " self.Line_Connect:\n            ", "for", " each2 ", "in", " self.Line_Connect:\n                ", "if", " each1[", "0", "] == each2[-", "1", "] ", "and", " each1[-", "1", "] == each2[", "0", "]:\n                    each2.reverse()\n        self.Line_Connect = ", "list", "(", "set", "([", "tuple", "(t) ", "for", " t ", "in", " self.Line_Connect]))\n        colors = [", "\"pink\"", ",", "\"red\"", ",", "\"blue\"", ",", "\"Violet\"", ",", "\"Purple\"", ",", "\"Navy\"", ",", "\"SkyBlue\"", ",", "\"Cyan\"", ",", "\"Green\"", ",", "\"Yellow\"", ",", "\"White\"", "]\n        ", "for", " j ", "in", " ", "range", "(", "0", ",", "len", "(self.Line_Connect)):\n            temp = random.randint(-", "5", ",", "5", ")\n            each = self.Line_Connect[j]\n            ", "for", " i ", "in", " ", "range", "(", "0", ", ", "len", "(each)-", "1", "):\n                x1 = (Point_List[each[i]][", "0", "]+", "1", ")*size+temp\n                y1 = (Point_List[each[i]][", "1", "]+", "1", ")*size+temp\n                x2 = (Point_List[each[i+", "1", "]][", "0", "]+", "1", ")*size+temp\n                y2 = (Point_List[each[i+", "1", "]][", "1", "]+", "1", ")*size+temp\n                self.cv.create_line(x1,y1,x2,y2,width=", "3", ",fill=colors[j%", "len", "(colors)],tags=(", "\"line\"", ",", "str", "(j)),dash=(", "4", ",", "4", "))\n\n\n\n", "if", " __name__ == ", "\"__main__\"", ":\n    window = GUI()\n    window.mainloop()\n\n", "\n", "（1）可以自定义方格地图大小（aXb）", "（2）可以设定点数，可以随机生成点，也可预置点的坐标", "（3）生成最短连线，如不止一种结果，用多种颜色显示。", "（4）可自定义连线规则（如只能直线，或者可以斜线）", "现在前3个功能已经能实现，需要在次基础上加上第四个功能，给出完善后能够正确运行的代码，以及正确的运行结果界面截图"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;矩阵里的数字是啥&amp;#xff1f;两点之间的距离吗&amp;#xff1f;0到1的距离和1到0的距离不一样&amp;#xff1f;&lt;br /&gt;最短路径&lt;br /&gt;[0, 7, 6, 3, 1, 2, 5, 4, 8, 0]&lt;br /&gt;最短距离&lt;br /&gt;655&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["0出发最后回到0求最短距离", ["从0出发最后回到0 并且经过1 2 3 4 5 6 7 8求最短距离  每个点只能经过一次"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://www.csdn.net/tags/MtjaYgzsNTY0OTItYmxvZwO0O0OO0O0O.html\" id=\"textarea_1657596156021_1657596278552_0\"&gt;求最短回路算法&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["请教大家一下，数据结构 最短回路模型建立", ["遇到问题了，想不明白，请教大家一下：数据结构，最短回路模型建立。"]], "Tag": "算法设计"}
{"Answer": "&lt;a target='_blank' rel='nofollow' href='http://blog.csdn.net/Apple_wkf/article/details/41693513'&gt;自定义室内地图以及路径规划&lt;/a&gt;&lt;br/&gt;&lt;a target='_blank' rel='nofollow' href='http://blog.csdn.net/yanyuanfen2011/article/details/8967424'&gt;百度地图之路径规划&lt;/a&gt;&lt;br/&gt;&lt;a target='_blank' rel='nofollow' href='http://blog.csdn.net/su19921021/article/details/50954780'&gt;百度地图之路径规划&lt;/a&gt;&lt;br/&gt;----------------------同志你好，我是CSDN问答机器人小N，奉组织之命为你提供参考答案，编程尚未成功，同志仍需努力！", "Konwledge_Point": "负权边的最短路径", "Question": ["地图模块_路径规划的问题", ["输入某一位置查询附近（如3公里）的客户信息，查询后根据输入的位置（起始位置）和部分的客户的地址（客户地址可选）规划出最短的路径；", "\n希望得到：", "\n    1：解决思路", "\n    2：百度、高德是否有这样的接口"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;很简单呀&amp;#xff0c;这是linux基本命令运用的题&amp;#xff0c;就比如说第一道题&lt;br /&gt;新建目录 mkdir hisdir  进入目录 cd hisdir  创建文件 touch t1.txt,t2.txt 移动并改名是 mv  test1 ../f1 复制命令是cp,到主目录命令是 cp f2 /&lt;br /&gt;剩下的你自己来吧&amp;#xff0c;你可以参考我的博客里写的进行相关操作&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/technologist_28/article/details/119506195\" id=\"textarea_1631233295101_1631233624869_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;Linux基础学习四&amp;#xff1a;Linux常用的命令&amp;#xff08;非常详细&amp;#xff09;_CSDN专家-微编程的博客-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;常用的命令文档帮助命令help用法&amp;#xff1a; 命令 --help示例&amp;#xff1a; dhclient --helpman用法: man 命令示例&amp;#xff1a;man dhclient 空格&amp;#xff1a;下一页 b:上一页 q:退出基本操作命令echo作用&amp;#xff1a;输出数据到窗口示例&amp;#xff1a;echo &amp;#34;hello world&amp;#34;\techo $PATH //输出path环境变量的值ip作用&amp;#xff1a;查看ip用法&amp;#xff1a;ip addrifconfig作用&amp;#xff1a;centOS7之前版本查看ip...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/technologist_28/article/details/119506195&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["三道linux操作题不会解", ["假设用户jack在当前目录/home/jack下，新建一个目录hisdir；进入hisdir目录，并在hisdir 目录下新建2个文件t1和t2；然后把test1移到其父目录中并改名为f1；将t2复制到主目录中。 ", "新建用户exp1，UID为1005，指定其所属的私有组为linux5（linux5组的标识符为1000），用户的主目录为/home/exp1，用户的Shell为/bin/bash，帐户10天过期。设置完成后查看各该用户相关信息。设置密码为123456。设置exp11用户的最短口令存活期为20天，最长口令存", "活期为60天，账户过期日期 2016-11-1，口令到期前5天提醒用户修改口令。  ", "设文件 file 当前的权限为 rwx rw- r--。要求取消拥有者的执行权限、取消组内成员的写权限、并且增加其它用户的执行权限。分别用符号表示法和数字表示法修改该文件的权限。"]], "Tag": "算法设计"}
{"Answer": "这个是NP hard的问题，除非死算，没有什么好的办法，但是如果你只是需要近似最优解，可以用启发式算法，比如模拟退火、遗传算法之类。\r\n所谓启发算法，就是说结果很好算，但是算法本身很难，可以通过随机和试探逼近最优解的方法。\r\n也就是先随机选取一些点，然后向某个方向移动，看距离是否缩小，如果是，那么就移动到那个点，再选取周围点，继续。直到选取的点往四周都增大。", "Konwledge_Point": "负权边的最短路径", "Question": ["点到直线的最短距离和问题，优化算法", ["求空间中一个点的坐标，这个坐标到n多个直线的距离和最短，n已知，直线方程已知"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; main(String[] args) {\n//        Scanner scanner &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; Scanner(&lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] arrs &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;};\n        Arrays.sort(arrs);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n&amp;#61; arrs.length;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m &amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum &amp;#61; Arrays.stream(arrs).sum();\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ave &amp;#61; sum%m &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;? sum/m:sum/m &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; ;\n        Map&amp;lt;&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;,List&amp;lt;&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt;&amp;gt; map &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();\n        Map&amp;lt;&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;,&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt; sumMap &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; step &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;arrs.length&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;){\n\n\n\n            &lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt; preSum &amp;#61; sumMap.getOrDefault(j, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (preSum &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || preSum&amp;#43;arrs[i]&amp;lt;&amp;#61; ave){\n                List&amp;lt;&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt; list &amp;#61; map.getOrDefault(j, &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;());\n                list.&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(arrs[i]);\n                map.put(j,list);\n                sumMap.put(j,preSum&amp;#43;arrs[i]);\n                i&lt;span class=\"hljs-comment\"&gt;--;&lt;/span&gt;\n            }\n\n            j&amp;#61;j&amp;#43;step;\n\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j&amp;gt;&amp;#61; m&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;){\n                step &amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (j&amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n                step &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n\n            }\n\n        }\n\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(map);\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(sumMap);\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;耗时:&amp;#34;&amp;#43; sumMap.&lt;span class=\"hljs-keyword\"&gt;values&lt;/span&gt;().stream().max(&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;::compareTo).&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;());\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["m个线程，n个任务，求最短解决时间", ["今天遇到一个题：假设有m个线程，同时解决n个任务，求最短解决时间。", "\n", "输入示例：3                    （3个线程）", "                  1 4 2 3 5        （各个任务的解决时间）", "输出示例：5                    （全部任务最短解决时间）", "\n", "求解决一下给个代码，最好是java的，感谢感谢了"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;n &amp;#61; int(input(&amp;#34;输入材料长度&amp;#xff1a;&amp;#34;))\nm &amp;#61; n\ncx &amp;#61; cy &amp;#61; 0\nfor x in range(1,n//19&amp;#43;1):\n    for y in range(1,n//23&amp;#43;1):\n        z &amp;#61; n-x*19-y*23\n        if z&amp;gt;&amp;#61;0 and (z&amp;lt;m or z&amp;#61;&amp;#61;m and x&amp;lt;cx):\n            m&amp;#61;z\n            cx&amp;#61;x\n            cy&amp;#61;y\nprint(f&amp;#39;19米短管 {cx} 根, 23米短管 {cy} 根&amp;#xff0c;剩余材料 {m} 米。&amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;br /&gt;\n &lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["刚学python，求解", ["任务描述", "\n\n", "本关任务：求出剩余材料最短的切割方案。 一根长度为n米的钢管，需要截成长度为19米和23米的两种短管。求两种短管各截多少根时剩余的材料最少？ （钢管的长度大于等于42） 注意：1、每种短管必须大于等于一根。 2、如果存在多种方案时，请输出19米的数目最少的方案。", "\n\n", "相关知识", "\n\n", "为了完成本关任务，你需要掌握：循环嵌套"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;C&lt;br /&gt;更新server就得是管理员。所以问非管理员身份登录怎么办&amp;#xff0c;那就得换管理员身份登录才能更新。&lt;br /&gt;题目的“ 在最短的时间内 ”是唬人的&amp;#xff0c;好像能有其他办法似的&amp;#xff0c;如果能有的话&amp;#xff0c;那管理员身份岂不是虚设的&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["计算机上执行常规升级，怎样才能在最短的时间内更新布丁", ["计算机上执行常规升级，怎样才能在最短的时间内更新服务器上所有的系统文件和布丁呢"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;bool fun(char* pData, int n) //回文串判断\n{\n\tfor (int i &amp;#61; 0; i &amp;lt; n / 2; i&amp;#43;&amp;#43;)\n\t{\n\t\tif (pData[i] !&amp;#61; pData[n - i - 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n\nvoid fun1(char *pData, int n, int m)//将char的前m个字符颠倒后加到char数组尾部\n{\n\tint pos &amp;#61; n;\n\tfor (int i &amp;#61; m-1; i &amp;gt;&amp;#61; 0; i--)\n\t{\n\t\tpData[pos&amp;#43;&amp;#43;] &amp;#61; pData[i];\n\t}\n}\n\n\n#define N 1000\nint main(void){\n\tint n;\n\tscanf_s(&amp;#34;%d&amp;#34;, &amp;amp;n);\n\tchar ch[N] &amp;#61; { 0 };\n\tscanf_s(&amp;#34;%s&amp;#34;, ch, N);\n\n\tint i &amp;#61; 0;\n\twhile (true)\n\t{\n\t\tfun1(ch, n, i);\n\t\tif (fun(ch, n &amp;#43; i))\n\t\t\tbreak;\n\t\ti&amp;#43;&amp;#43;;\n\t}\n\tch[n &amp;#43; i] &amp;#61; &amp;#39;\\0&amp;#39;;\n\tprintf(&amp;#34;%s&amp;#34;, ch);\n\n\t\n\treturn 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["判断是否为回文字符串，如果不是补齐为最短回文字符串", ["如题，判断是否为回文字符串，如果不是补齐为最短回文字符串，求一段代码，用c语言实现"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个问题可以用图论来解决。图论是一门研究图形结构的数学分支&amp;#xff0c;可以用来描述网络、流程、导航等问题。&lt;/p&gt;\n&lt;p&gt;具体来说&amp;#xff0c;这个问题可以用有向图来表示&amp;#xff0c;其中每个地点对应一个图中的结点&amp;#xff0c;每条路径对应一条有向边。要求求出A地到B地的最短路径&amp;#xff0c;就可以使用最短路径算法来解决。&lt;/p&gt;\n&lt;p&gt;最短路径算法有很多种&amp;#xff0c;常用的有贪心算法和动态规划算法。这里介绍一种经典的最短路径算法——迪杰斯特拉算法。&lt;/p&gt;\n&lt;p&gt;迪杰斯特拉算法的基本思想是从起点开始&amp;#xff0c;每次找到一条到达不同结点的最短路径&amp;#xff0c;直到找到终点为止。&lt;/p&gt;\n&lt;p&gt;算法步骤如下&amp;#xff1a;&lt;/p&gt;\n&lt;ul&gt;&lt;li&gt;&lt;p&gt;初始化&amp;#xff1a;将起点设为已经访问过&amp;#xff0c;并将起点到其它所有结点的距离设为无穷大&amp;#xff08;或某个极大值&amp;#xff09;。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;更新距离&amp;#xff1a;遍历起点的所有出边&amp;#xff0c;更新从起点出发能够到达的结点的距离值。如果从起点到某个结点的距离加上从该结点到另一个结点的距离&amp;#xff0c;则更新从起点到该结点的距离为前者。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;找到最近结点&amp;#xff1a;从未访问过的结点中找到离起点最近的结点&amp;#xff0c;将其设为已访问过。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;重复步骤2和步骤3&amp;#xff0c;直到找到终点为止。&lt;/p&gt;\n&lt;/li&gt;&lt;/ul&gt;\n&lt;p&gt;算法结束后&amp;#xff0c;起点到终点的距离即为从起点到终点的最短路径。&lt;/p&gt;\n&lt;p&gt;举个例子&amp;#xff0c;假设有一张图如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;A ---3---&amp;gt; B ---2---&amp;gt; C&lt;/p&gt;\n&lt;p&gt;| /&lt;/p&gt;\n&lt;p&gt;1 /&lt;/p&gt;\n&lt;p&gt;| /&lt;/p&gt;\n&lt;p&gt;v /&lt;/p&gt;\n&lt;p&gt;D ---2---&amp;gt; E&lt;/p&gt;\n&lt;p&gt;起点为A&amp;#xff0c;终点为E。&lt;/p&gt;\n&lt;p&gt;首先将A设为已访问过&amp;#xff0c;并将A到其它所有结点的距离设为无穷大。&lt;/p&gt;\n&lt;p&gt;然后更新距离。遍历A的出边&amp;#xff0c;可以发现A到B的距离为3&amp;#xff0c;A到D的距离为1。将这两条路径的距离设为3和1。&lt;/p&gt;\n&lt;p&gt;接下来找到最近结点。可以发现A到D的距离最小&amp;#xff0c;因此将D设为已访问过。&lt;/p&gt;\n&lt;p&gt;然后更新距离。遍历D的出边&amp;#xff0c;可以发现A到D到E的距离为3&amp;#xff0c;比A到E的距离小&amp;#xff0c;因此将A到E的距离更新为3。&lt;/p&gt;\n&lt;p&gt;找到最近结点&amp;#xff0c;发现A到E的距离最小&amp;#xff0c;因此将E设为已访问过。由于E是终点&amp;#xff0c;因此算法结束。&lt;/p&gt;\n&lt;p&gt;最终&amp;#xff0c;A到E的距离为3&amp;#xff0c;即为A到E的最短路径。&lt;/p&gt;\n&lt;p&gt;在迪杰斯特拉算法中&amp;#xff0c;需要用到一些数据结构来存储图的信息。通常可以使用邻接矩阵或邻接表来表示图&amp;#xff0c;也可以使用堆来优化算法的执行效率。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["从A地到B地有多条路径可以到达，现要从A地到B地运物资问题", ["从A地到B地有多条路径可以到达，现要从A地到B地运物资，设计一个求走那条路径最短的算法，这个题目用了哪些数据结构？大致的算法思想是什么？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-xml\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,i;\n  string *A;\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; max&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; min &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; avg &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n  cin&amp;gt;&amp;gt;n;\n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n  {\n    A &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; string[n];\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n      cin&amp;gt;&amp;gt;A[i];\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(A[max].&lt;span class=\"hljs-built_in\"&gt;length&lt;/span&gt;() &amp;lt; A[i].&lt;span class=\"hljs-built_in\"&gt;length&lt;/span&gt;())\n          max &amp;#61; i;\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(A[min].&lt;span class=\"hljs-built_in\"&gt;length&lt;/span&gt;() &amp;gt; A[i].&lt;span class=\"hljs-built_in\"&gt;length&lt;/span&gt;())\n          min &amp;#61; i;\n      avg &amp;#43;&amp;#61; A[i].&lt;span class=\"hljs-built_in\"&gt;length&lt;/span&gt;();\n    }\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;最长的串:&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;A[max]&amp;lt;&amp;lt;endl;\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;最短的串:&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;A[min]&amp;lt;&amp;lt;endl;\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;平均长度:&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;avg/n&amp;lt;&amp;lt;endl;\n    \n    &lt;span class=\"hljs-keyword\"&gt;delete&lt;/span&gt; []A;\n  }\n  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["自考C++，问个练习题", ["1，编写一个程序，将从键盘输入的n个字符串保存在一个一维数组A中，在输入字符串之前，先输入n的值，要求数组A需要动态申请空间，程序运行结束前再释放掉。", "2，在题目一的基础上，输出n个字符串中最长的和最短的串，计算n个串的平均长度，并输出结果。", "\n", "自学的，没有老师同学，挺尴尬的，给讲详细点吧。谢谢了。"]], "Tag": "算法设计"}
{"Answer": "https://www.nowcoder.com/questionTerminal/9929785afd364470bc8da265087d1aaf", "Konwledge_Point": "负权边的最短路径", "Question": ["平面直角坐标系上距离点的计算，一个优化的算法，采用C语言谢谢", ["Problem Description", "\nACboy is playing a new stone game. There's a rectangular grid board, and some stones placed at the initial location Bi(Xi, Yi) and the targets are at the location Si(Pj, Qj), the time that moving between them is Di,j = |Xi - Pj| + |Yi - Qj| + 1 minutes. And at different places may have different stones, and different target places have different capacity. In the following picture, B1,2,3 stands for the initial places, S1,2,3,4 stands for the target places. In detail, B1(5) means there are 5 stones at this location, S2(4) means you can move at most 4 stones to this target location.", "\n\n", "The one who moves the stones from the initial places to the target places using less time will win. So ACboy now telling you his play plan, and you should tell hime whether his plan is the best, or he can do it better.", "\n\n", "Input", "\nThe input file consists of The game board description and the play plan description. The first line of the input file consists of two numbers N and M separated by a space. N (1 <= N <= 100) is a number of initial places(numbered from 1 to N). M (1 <= M <= 100) is a number of target places(numbered from 1 to M).", "\n\n", "The following N lines describe initial places. Each line contains there integer numbers Xi, Yi, and Bi separated by spaces, where Xi, Yi (-1000 <= Xi, Yi <= 1000) are the coordinates of initial places, and Bi (1 <= Bi <= 1000) is the number of stones at this location.", "\n\n", "The description of initial places is followed by M lines that describe target places. Each line contains three integer numbers Pj, Qj, and Cj separated by spaces, where Pi, Qi (-1000 <= Pj, Qj <= 1000) are the coordinates of the target places, and Cj (1 <= Cj <= 1000) is the capacity of this place.", "\n\n", "The description of the play plan follows on the next N lines. The play plan of ith initial place consists of M integer numbers Ei,j separated by spaces. Ei,j (0 <= Ei, j <= 1000) is a number of stones that shall move from the ith initial place to the jth target place.", "\n\n", "The plan in the input file is guaranteed to be valid. Namely, B1+B2+....+Bn <= S1+S2+....+Sn.", "\n\n", "Process to the end of file.", "\n\n", "Output", "\nIf ACboy's plan is the best, print \"good\", otherwise, print\"I can do it better\".", "\n\n", "Sample Input", "\n2 1", "\n0 0 5", "\n1 1 5", "\n2 2 5", "\n5", "\n0", "\n\n", "Sample Output", "\nI can do it better"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/hero5201/article/details/51812963", "Konwledge_Point": "负权边的最短路径", "Question": ["一个有关最短时间的计算的算法的问题，谢谢", ["Problem Description", "\n在每年的校赛里，所有进入决赛的同学都会获得一件很漂亮的t-shirt。但是每当我们的工作人员把上百件的衣服从商店运回到赛场的时候，却是非常累的！所以现在他们想要寻找最短的从商店到赛场的路线，你可以帮助他们吗？", "\n\n", "Input", "\n输入包括多组数据。每组数据第一行是两个整数N、M（N<=100，M<=10000），N表示成都的大街上有几个路口，标号为1的路口是商店所在地，标号为N的路口是赛场所在地，M则表示在成都有几条路。N=M=0表示输入结束。接下来M行，每行包括3个整数A，B，C（1<=A,B<=N,1<=C<=1000）,表示在路口A与路口B之间有一条路，我们的工作人员需要C分钟的时间走过这条路。", "\n输入保证至少存在1条商店到赛场的路线。", "\n\n", "Output", "\n对于每组输入，输出一行，表示工作人员从商店走到赛场的最短时间", "\n\n", "Sample Input", "\n2 1", "\n1 2 3", "\n3 3", "\n1 2 5", "\n2 3 5", "\n3 1 2", "\n0 0", "\n\n", "Sample Output", "\n3", "\n2"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You could sort the strings by length using for example &lt;a href=\"https://www.php.net/manual/en/function.usort.php\" rel=\"nofollow noreferrer\"&gt;usort&lt;/a&gt; and get the first item using &lt;a href=\"https://www.php.net/manual/en/function.reset.php\" rel=\"nofollow noreferrer\"&gt;reset&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$array = array(\n    'Google',\n    'Facebook',\n    'Twitter',\n    'Slack',\n    'Twilio',\n);\n\nusort($array, function ($a, $b) {\n    return strlen($a) &amp;lt; strlen($b);\n});\n\necho reset($array); // Facebook\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If there could be more strings with equal length, you could use a foreach and break out of the loop when the length is not equal to the current length of the item to prevent looping the whole list.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$item = reset($array);\n$result = [];\n\nif ($item) {\n    $len = strlen($item);\n    foreach($array as $value) {\n        if (strlen($value) === $len) {\n            $result[] = $value;\n            continue;\n        }\n        break;\n    }\n}\n\nprint_r($result);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Result&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Array\n(\n    [0] =&amp;gt; Facebook\n    [1] =&amp;gt; Test1112\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"https://3v4l.org/q5d8X\" rel=\"nofollow noreferrer\"&gt;Php demo&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["PHP在没有循环的情况下获取数组中最长的字符", ["\n\n", "Given an array, I want to get the longest string by length without using the foreach loop.", "\n\n", "Below is my array", "\n\n", "$array = array(\n    'Google',\n    'Facebook',\n    'Twitter',\n    'Slack',\n    'Twilio',\n);\n", "\n\n", "This question returns the maximum length but I want to get the value of the string.\n", "PHP shortest/longest string in array", "\n    "]], "Tag": "算法设计"}
{"Answer": "这个叫做 中国邮递员问题，你可以google下\r\nhttps://www.cnblogs.com/WABoss/p/5140531.html", "Konwledge_Point": "负权边的最短路径", "Question": ["欧拉回路避桥法的扩展：遍历无向图里的所有边，当这个图不是欧拉回路时，怎样使得走过的重复边最少？", ["遍历所有点的问题是tsp问题，但是如果需要遍历所有的边呢？", "\n欧拉回路的避桥法可以对于欧拉回路，实现不重复的遍历所有边，", "\n但是如果该图不是欧拉回路，该怎样在最短行驶路径下遍历所有边呢？", "\n\n", "问题：", "\n\n", "\n给定一个无向连通图，不是欧拉图，需要遍历其中所有**边**，", "\n可以重复走边，问：怎样使得走过的重复路径最少？", "\n做课设需要解决这个问题，有相关的算法吗，", "\n如果没有，该怎样修改对于欧拉回路的避桥法呢？"]], "Tag": "算法设计"}
{"Answer": "http://download.csdn.net/download/zy841958835/9913574", "Konwledge_Point": "负权边的最短路径", "Question": ["求java笔试面试题目 大神们", ["各位大神马上准备去面试华为 求java的一些面试笔试题目 ", "\n最好基础点的 有解答"]], "Tag": "算法设计"}
{"Answer": "http://www.cnblogs.com/CheeseZH/archive/2012/04/29/2476134.html", "Konwledge_Point": "负权边的最短路径", "Question": ["买票的问题求解           ", ["Description", "\n\n", "Railway tickets were difficult to buy around the Lunar New Year in China, so we must get up early and join a long queue…", "\n\n", "The Lunar New Year was approaching, but unluckily the Little Cat still had schedules going here and there. Now, he had to travel by train to Mianyang, Sichuan Province for the winter camp selection of the national team of Olympiad in Informatics.", "\n\n", "It was one o’clock a.m. and dark outside. Chill wind from the northwest did not scare off the people in the queue. The cold night gave the Little Cat a shiver. Why not find a problem to think about? That was none the less better than freezing to death!", "\n\n", "People kept jumping the queue. Since it was too dark around, such moves would not be discovered even by the people adjacent to the queue-jumpers. “If every person in the queue is assigned an integral value and all the information about those who have jumped the queue and where they stand after queue-jumping is given, can I find out the final order of people in the queue?” Thought the Little Cat.", "\n\n", "Input", "\n\n", "There will be several test cases in the input. Each test case consists of N + 1 lines where N (1 ≤ N ≤ 200,000) is given in the first line of the test case. The next N lines contain the pairs of values Posi and Vali in the increasing order of i (1 ≤ i ≤ N). For each i, the ranges and meanings of Posi and Vali are as follows:", "\n\n", "Posi ∈ [0, i − 1] — The i-th person came to the queue and stood right behind the Posi-th person in the queue. The booking office was considered the 0th person and the person at the front of the queue was considered the first person in the queue.", "\nVali ∈ [0, 32767] — The i-th person was assigned the value Vali.", "\nThere no blank lines between test cases. Proceed to the end of input.", "\n\n", "Output", "\n\n", "For each test cases, output a single line of space-separated integers which are the values of people in the order they stand in the queue.", "\n\n", "Sample Input", "\n\n", "4", "\n0 77", "\n1 51", "\n1 33", "\n2 69", "\n4", "\n0 20523", "\n1 19243", "\n1 3890", "\n0 31492", "\nSample Output", "\n\n", "77 33 69 51", "\n31492 20523 3890 19243"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Check out &lt;a href=\"http://php.net/uniqid\" rel=\"nofollow\"&gt;&lt;code&gt;uniqid()&lt;/code&gt;&lt;/a&gt;.  If you are ultra paranoid, put the filename generation in a loop where you check to see if it exists or not.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$prefix   = hash('sha256', $bits) . '-';\n$filename = uniqid($prefix, true);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This creates a SHA-256 hash of the bits as the prefix to the file, and uses &lt;code&gt;uniqid&lt;/code&gt; to create a unique file name with the prefix of the file being the hash of the bits followed by a &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This should generate a unique filename that you can identify by hashing the bits.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["将2025位转换为最短文件名", ["\n\n", "I have some information represented by 2025 bits. For caching purposes i need to create a unique filename ( not too long of course so fs will handle this ) which will represent these bits. Every set of bits should have unique filename.", "\n\n", "Is md5 suitable for this ? If not , what should i use ?", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;First get the minimum length of all the sub-arrays:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$min_length = min(array_map('count', $array));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then filter the array to get the elements that have that length:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$new_array = array_filter($array, function ($el) use ($min_length) {\n    return count($el) == $min_length);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["获取最短阵列列的所有值", ["\n\n", "I have this array :", "\n\n", "Array\n(\n    [0] => Array        // count 2 values\n        (\n            [0] => 3\n            [1] => 1\n        )\n\n    [1] => Array        // count 2 values\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array        // count 4 values\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n            [3] => 1\n        )\n\n)\n", "\n\n", "and I want to get all of the value of the shortest column. in this case :", "\n\n", "Array\n(\n    [0] => Array\n        (\n            [0] => 3\n            [1] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n)\n", "\n\n", "I post about this case before here : ", "How To Get ALL Minimum Value Within Multidimensional Array?", "\n\n", "but unfortunately that case was using associative array. while in this case isn't associative array.", "\n\n", "how to get the value from array like this?", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;bubble_sort&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; a[][&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;], &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i ,j;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; temp[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n          &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt;n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; - i; j&amp;#43;&amp;#43;)\n         {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(a[j]) &amp;lt; &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]))\n            {\n                &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(temp, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(temp));\n                &lt;span class=\"hljs-built_in\"&gt;memcpy&lt;/span&gt;(temp, a[j], &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(a[j]));\n                &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(a[j], &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(a[j]));\n                &lt;span class=\"hljs-built_in\"&gt;memcpy&lt;/span&gt;(a[j], a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]));\n                &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]));\n                &lt;span class=\"hljs-built_in\"&gt;memcpy&lt;/span&gt;(a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], temp, &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(temp));\n            }\n         }\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; x[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}, v[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;input 3 str\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s%s%s&amp;#34;&lt;/span&gt;, x[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], x[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], x[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]);\n    &lt;span class=\"hljs-built_in\"&gt;bubble_sort&lt;/span&gt;(x, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;strcat&lt;/span&gt;(x[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], x[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]));\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["输入三个字符串，再将最长字符串和最短字符串连接，再将结果输出", ["输入三个字符串，再将最长字符串和最短字符串连接，再将结果输出。很多报错，请讲解一下"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;echo &amp;#39;最长&amp;#39;.$arr3[0].&amp;#34;&lt;br /&gt;&amp;#34;;  //最长的&lt;br /&gt;if($x1-$x2&amp;gt;&amp;#61;3){  //x1是所有字符串个数,包括空字符串; x2不包括空字符串的个数  我随便设置空的至少3个&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    echo &amp;#34;空&amp;#34;;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    return;&lt;/span&gt;&lt;br /&gt;}else{  //没有空的或者空小于2的&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    echo $arr3[$x2-1].&amp;#34;&lt;/span&gt;&lt;br /&gt;&amp;#34;;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    echo $arr3[$x2-2].&amp;#34;&lt;/span&gt;&lt;br /&gt;&amp;#34;;&lt;br /&gt;}&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["PHP如何从n个字符串中挑选出那个不为空的最短字符串m", ["如何从n个字符串（其中有x个空字符串，0≤x≤n）中挑选出那个不为空的最短字符串（m）。", "与此同时还需要兼顾考虑以下特例：如果n个字符串中有x个为空（x<n），则m为空。", "\n", "比如我们可以定义n=10，x=5，这就意味着：", "1、当10个字符串中有2个是空字符串(2显然是小于5的)，则m=最短的那个非空字符串", "2、当10个中有5个或6个是空字符串时，则m=''（m=空）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff1a;首先&amp;#xff0c;需要将输入的字符串按照空格分隔为各个子串&amp;#xff0c;可以使用字符串分割的方法来实现。接下来&amp;#xff0c;遍历每个子串&amp;#xff0c;记录最长和最短的子串以及其中出现的最大和最小字符。这些都可以通过比较字符串长度和字符的ASCII码值来完成。最后&amp;#xff0c;将记录的结果输出即可。以下是一段示例代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-variable\"&gt;input_string&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入字符串&amp;#xff1a;&amp;#34;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=\"hljs-variable\"&gt;substrings&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;input_string.split&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;)\n\n&lt;span class=\"hljs-variable\"&gt;min_substring&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;substrings&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n&lt;span class=\"hljs-variable\"&gt;max_substring&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;substrings&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n&lt;span class=\"hljs-variable\"&gt;min_char&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;input_string&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n&lt;span class=\"hljs-variable\"&gt;max_char&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;input_string&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n\n&lt;span class=\"hljs-variable\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;substring&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;substrings&lt;/span&gt;:\n    &lt;span class=\"hljs-variable\"&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;substring&lt;/span&gt;) &amp;lt; &lt;span class=\"hljs-title\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;min_substring&lt;/span&gt;):\n        &lt;span class=\"hljs-variable\"&gt;min_substring&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;substring&lt;/span&gt;\n    &lt;span class=\"hljs-variable\"&gt;elif&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;substring&lt;/span&gt;) &amp;gt; &lt;span class=\"hljs-title\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;max_substring&lt;/span&gt;):\n        &lt;span class=\"hljs-variable\"&gt;max_substring&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;substring&lt;/span&gt;\n\n    &lt;span class=\"hljs-variable\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;substring&lt;/span&gt;:\n        &lt;span class=\"hljs-variable\"&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;&lt;span class=\"hljs-built_in\"&gt;ord&lt;/span&gt;&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;char&lt;/span&gt;) &amp;lt; &lt;span class=\"hljs-title\"&gt;&lt;span class=\"hljs-built_in\"&gt;ord&lt;/span&gt;&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;min_char&lt;/span&gt;):\n            &lt;span class=\"hljs-variable\"&gt;min_char&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;char&lt;/span&gt;\n        &lt;span class=\"hljs-variable\"&gt;elif&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;&lt;span class=\"hljs-built_in\"&gt;ord&lt;/span&gt;&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;char&lt;/span&gt;) &amp;gt; &lt;span class=\"hljs-title\"&gt;&lt;span class=\"hljs-built_in\"&gt;ord&lt;/span&gt;&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;max_char&lt;/span&gt;):\n            &lt;span class=\"hljs-variable\"&gt;max_char&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;char&lt;/span&gt;\n\n&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;最短子串为&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-variable\"&gt;min_substring&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;最长子串为&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-variable\"&gt;max_substring&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;最小字符为&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-variable\"&gt;min_char&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;最大字符为&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-variable\"&gt;max_char&lt;/span&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;希望这能解决你的问题&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["我想知道怎么显示出最长，最短子串呢？", ["按空格分隔开以后怎样可以是子串之间相互比较然后显示出最长最短子串啊？", "题目如下:", "输入一字符串，各个子串之间按空白字符隔开，分别显式其中最长、最短子串，以及最大、最小字符。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;d没传进去&amp;#xff0c;还有类名、包名最好不要用汉字哈&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;[] args)&lt;/span&gt; &lt;/span&gt;{\n      &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; d &amp;#61; &lt;span class=\"hljs-number\"&gt;3.1415926&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; result &amp;#61; &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;.format(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.2f&amp;#34;&lt;/span&gt;, d);\n        System.out.&lt;span class=\"hljs-built_in\"&gt;println&lt;/span&gt;(result);\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["这个保留小数为什么运行报错啊还有 为什么JAVA保留个小数都这么磨叽 找了好几种方法 就这个最短 哭了", [" 这个保留小数为什么运行报错啊还有 为什么JAVA保留个小数都这么磨叽 找了好几种方法 就这个最短 哭了"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;设材料的长度为l&amp;#xff0c;可以写成 l &amp;#61; 19&lt;em&gt;x&amp;#43;23&lt;/em&gt;y&amp;#43;a&amp;#xff0c;于是题目的意思就是当x&amp;#xff0c;y取何值时&amp;#xff0c;a的值最小。于是我们可以穷举出所有的a&amp;#xff0c;打印最小值即可。&lt;br /&gt;另外不难得出&amp;#xff0c;x的取值范围为0到l//19&amp;#xff0c;y的取值范围为0到l//23&amp;#xff0c;而当剩下的材料小于0时&amp;#xff0c;则取值不成立&amp;#xff0c;于是可列出代码如下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;l &amp;#61; int(&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;())\n&lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; x &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(l&lt;span class=\"hljs-comment\"&gt;//19&amp;#43;1):&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; y &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(l&lt;span class=\"hljs-comment\"&gt;//23&amp;#43;1):&lt;/span&gt;\n        &lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; l-&lt;span class=\"hljs-number\"&gt;19&lt;/span&gt;*x-&lt;span class=\"hljs-number\"&gt;23&lt;/span&gt;*y\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; a&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n            break\n        &lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;((&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;,x,y))\nres &amp;#61; min(b)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#34;19米{res[1]}段,23米{res[2]}段,剩余{res[0]}米&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["剩余最短木料，怎么是剩余木料大于0", ["问一下怎么限定剩余木料长度大于0啊！麻烦用简单的代码，才开始学习的学生，社区里能够搜到的答案所用代码没学过啊"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The Pythagorean distance between two points is calculated by:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;distance = sqrt( (x1-x0)^2 + (y1-y0)^2 )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That's  not what your query is calculating:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT regid, sqrt(latitude-$lati)+sqrt(longitude-$longi) AS SQRT_DIST FROM GPS_tbl ORDER BY SQRT_DIST limit 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You've got the square root of two values added together, not the square root of the sum. Try this instead:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT regid, sqrt( (latitude-$lati)*(latitude-$lati) +(longitude-$longi)*(longitude-$longi) ) AS SQRT_DIST FROM GPS_tbl ORDER BY SQRT_DIST limit 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, a couple of things.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;This distance calculation is an adequate approximation if the distance between the two points is small, but once you get into larger values, it will get farther and farther from the true value. Why? Because the surface of the earth is the surface of a sphere, not a plane. To calculate the correct value, google \"Great Circle Distance\"&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Somebody else will probably mention this, but here goes 1) don't use &lt;code&gt;mysql_&lt;/code&gt; functions: they're deprecated; and 2) your code is vulnerable to SQL injection attacks.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["如何根据给定条件选择最短的GPS坐标？", ["\n\n", "I have table ", "GPS_tbl", " in mysql database ", "my_db", ". In ", "GPS_tbl", " there are five columns ", "1)uid 2)latitude 3)longitude 4)regid 5)status", ". In column ", "5)status", " there are two types of values are stored as varchar one is ", "free", " and other is ", "move", ". What i am doing right now is when user send his/her gps coordinates in terms of ", "latitude", " and ", "longitude", " through ", "POST()", ", so to select the shortest coordinate from columns ", "2)latitude 3)longitude", "  i am using ", "Pythagorean theorem", " so by using this i compare these user sent coordinate with already stored coordinates in columns ", "2)latitude 3)longitude", " and select the ", "4)regid", " against it. Now what i want is only select that ", "4)regid", " against shortest coordinate from ", "2)latitude 3)longitude", " whose ", "5)status", " value is ", "free", ". ", "\n\n", "At the moment i am using this query, which is only selecting ", "4)regid", " against ", "shortest coordinate", " and not taking care of ", "status", " value:", "\n\n", "$result = mysql_query(\"SELECT regid, sqrt(latitude-$lati)+sqrt(longitude-$longi) AS SQRT_DIST FROM GPS_tbl ORDER BY SQRT_DIST limit 1\");\n", "\n\n", "GPS_tbl", "\n\n", "+--------------+------------+-------------+-------------+-------------+\n|     uid      | latitude   | longitude   |   regid     |   status    |\n+--------------+------------+-------------+-------------+-------------+\n|      1       |  73.3433   |  18.5223    |APA91W-ClDoS |   move      |\n|              |            |             |             |             |\n+--- ----------+------------+-------------+-------------+-------------+\n|      2       |  43.3433   |  24.5523    |BON91W-ClDoS |   free      |\n|              |            |             |             |             |\n+--- ----------+------------+-------------+-------------+-------------+\n|      3       |  55.3433   |  37.5323    |WCD71P-ClDoS |   free      |\n|              |            |             |             |             |\n+--- ----------+------------+-------------+-------------+-------------+\n|      4       |  65.3433   |  47.5323    |ZCF71D-ClDoS |   move      |\n|              |            |             |             |             |\n+--- ----------+------------+-------------+-------------+-------------+\n|      5       |  85.3433   |  27.5323    |XVD73A-ClDoS |   free      |\n|              |            |             |             |             |\n+--- ----------+------------+-------------+-------------+-------------+\n", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The algorithm you describe is could be OK but it is less clearly specified when it comes to &lt;em&gt;\"... this way I would need to go through the whole array\"&lt;/em&gt;. &lt;/p&gt;\n\n&lt;p&gt;Once you have done the clean up and splitting into words, It will be easier to create a map for the key words, so you can know quickly if a word from the text matches (with &lt;code&gt;isset()&lt;/code&gt;). Then you could just reduce the text array to an array of matching words (using &lt;code&gt;array_filter()&lt;/code&gt;), still keeping the index of where they appear in the original array of words.&lt;/p&gt;\n\n&lt;p&gt;The algorithm would then walk through that reduced array and keep track of a window (range) of these words. At the right side that window enlarges as long as not all necessary words are inside of it, and it shrinks at the left side when the left side word already occurs elsewhere in the window, or just after you have found a candidate solution. That way your window will travel through the whole (reduced) text array. You'll keep track only of the window that represents the shortest phrase. So at the end you have the optimal solution and just need to translate the window boundaries back to a phrase taken from the original text array.&lt;/p&gt;\n\n&lt;p&gt;Case insensitive matching can be achieved by storing things in lower case (with &lt;code&gt;strtolower&lt;/code&gt;), and by using the original cased string (in array format) for generating the output. &lt;/p&gt;\n\n&lt;p&gt;Here is a function that implements the above described algorithm:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function findFragment($text, $words) {\n    // Remove non-A-Z letters\n    $text = preg_replace(\"/[^a-z ]/i\", \"\", $text);\n    $words = preg_replace(\"/[^a-z ]/i\", \"\", $words);\n    // Create a map keyed by the words to find, with as value \n    // the number of occurrences in current sub-phrase\n    $words_map = array_fill_keys(str_word_count(strtolower($words), 2), 0);\n    // Put all words of text in an array\n    $text_arr = str_word_count($text, 1);\n    $text_low_arr = str_word_count(strtolower($text), 1);\n    // Filter only matching words from the text, keeping their original indexes.\n    $matches = array_filter($text_low_arr, function ($word) use ($words_map) {\n        return isset($words_map[$word]);\n    });\n    // How many distinct words need to be matched to have a candidate phrase\n    $matches_left = count($words_map);\n    // Keep track of how long the shortest phrase is\n    $min_words = count($text_arr) + 1; // start \"infinite\"\n    // Loop over all matching words as the last word of a possible phrase\n    foreach($matches as $i =&amp;gt; $match) {\n        $phrase[$i] = $match; // Add to the phrase\n        $words_map[$match]++; // Increase count for this particular word\n        if ($words_map[$match] &amp;gt; 1) continue; // Nothing new was added\n        // Additional word found\n        $matches_left--;\n        if ($matches_left) continue; // Still need more words\n        // Phrase has all words\n        // Remove words from left which occur elsewhere in the phrase\n        while ($words_map[reset($phrase)] &amp;gt; 1) {\n            $words_map[reset($phrase)]--;\n            unset($phrase[key($phrase)]);\n        }\n        // How many words are in this phrase?\n        $num_words = $i - key($phrase) +1;\n        if ($num_words &amp;lt; $min_words) {\n            // It is shorter than we had so far\n            $min_words = $num_words;\n            $best_start = key($phrase);\n        }\n        // Remove first word from phrase before finding new candidate phrases\n        $words_map[reset($phrase)]--;\n        unset($phrase[key($phrase)]);\n        $matches_left++;\n    }\n    // return best result\n    return implode(\" \", array_slice($text_arr, $best_start, $min_words));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You would call it like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;echo findFragment($text, $words);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For the sample data you have given in the question, it returns the desired answer:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Beispieltext der ein paar Wrter &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;See it run on &lt;a href=\"https://eval.in/574995\" rel=\"nofollow\"&gt;eval.in&lt;/a&gt;. &lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["在Textblock中搜索给定关键字的最短通道", ["\n\n", "i have a task and i am not sure how i should solve the problem. I have an idead but i do not know if it is the best way to solve it.", "\n\n", "Here is the task:\nGiven is a block of text and some keywords to find. We need to find a passage where all words can be found and where least words are used. Only the letters from A-Z and a-z need to be taken into account.", "\n\n", "Here is an example:", "\nTextblock:", "\nEin toller Beispieltext ist der Blindtext. Er hat ein paar Wörter. Dies ist\nein Beispieltext, der ein paar Wörter hat und auch noch ein paar mehr, um\ndie Zeile etwas länger zu machen. Darüber hinaus ist er nur dafür da, um\ngenügend Testtext zusammenzubekommen. Dem Text selbst macht das nicht so\nviel aus. Früher einmal mehr, als er noch nicht so selbstbewusst war. Heute\nkennt er seine Rolle als Blindtext und fügt sich selbstbewusst ein. Er ist\nja irgendwie wichtig. Manchmal jedoch, ganz manchmal, weint er in der Nacht,\nweil er niemals bis zum Ende gelesen wird. Doch das hat ja jetzt zum Glück\nein Ende.", "\n\n", "And here the words that need to be found:\nein\nBeispieltext\nder\npaar\nWörter", "\n\n", "The result would be\nBeispieltext der ein paar Wrter", "\n\n", "Following passage would also be a passage where all the words can be found but it has more words inside of the passage and therefore is not the solution:\nEin toller Beispieltext ist Blindtext. Er hat ein paar Wörter.", "\n\n", "My idea is to cut all unnecessary letters and then split the textblock on spaces to have an array of all words. so i can get the position of the words and calculate how much words are inbetween the first occurence of one of the searched words and the first occurence of all other searched words. this way i would need to go through the whole array and compare all possible lengths of passages and just take the shortest one.", "\n\n", "do you think this is the best approach or can you point me to a better idea how to solve this problem?", "\n    "]], "Tag": "算法设计"}
{"Answer": "ArrayList是一个顺序存储的数据结构，只能顺序存储吧，查询数据也就只能用顺序遍历。。。。\r\n如果是已经排序的，那么二分查找是可以的，没排序的话顺序遍历吧\r\n\r\n一般吧 要想快，用HashMap或者HashSet之类的", "Konwledge_Point": "负权边的最短路径", "Question": ["最快的方法从list中取指定的值", ["List list = new ArrayList();", "\nlist.add(\"aa\");", "\nlist.add(\"bb\");", "\nlist.add(\"cc\");", "\nlist.add(\"dd\");", "\n      .", "\n      .", "\n      .", "\n假设我不知道list中各个值的下标，在这种情况下用最快的方法，取出“cc”。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;Dijkstra算法伪代码 \n\nfor each node v    \n    dis(v) ← &amp;#43;∞    \n    previous (v) ← undefined    \n    dis(source) ← 0    \n    while num(S) &amp;lt; n    ▷ S为顶点集合\n        u ← node with smallest distance    \n        Remove u    \n        for each node v in S    \n            alt ← dis(u) &amp;#43; dis(u,v)    \n            if alt &amp;lt; dis(v) then    \n                dis(v) ← alt    ▷ 更新距离\n                previous(v) ← u    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;可以参考这篇博客&amp;#xff08;含MATLAB代码&amp;#xff09;&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/lishan132/article/details/108527271\" id=\"textarea_1650988419256_1650988630188_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/lishan132/article/details/108527271&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;这篇里面有讲解&amp;#xff08;有示例讲解&amp;#xff09;&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/L_J_Kin/article/details/103061420\" id=\"textarea_1650988419256_1650988630188_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/L_J_Kin/article/details/103061420&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["Matlab 最短路径 起始点出发，回到起始点，经过所有点", ["利用matlab图论知识求解，从起始点出发，经过其他所有点，然后返回起始点，求最短路径"]], "Tag": "算法设计"}
{"Answer": "TSP问题本质和城市间最短路径寻优问题一样，都是求两个点的最优路径，这种问题你要把这些实际数据想成是图的操作\r\nhttp://www.cnblogs.com/biaoyu/archive/2012/09/26/2704456.html", "Konwledge_Point": "负权边的最短路径", "Question": ["蚁群算法 寻找最短路径的问题", ["想搞个城市间最短路径寻优，网上全都是tsp问题，我只想要起点到终点的最优路径，不需要返回，该怎么写。。。能不能给点代码……"]], "Tag": "算法设计"}
{"Answer": "https://cloud.tencent.com/developer/article/1073087", "Konwledge_Point": "负权边的最短路径", "Question": ["这个最短路径的问题，用C语言怎么解决", ["Problem Description", "\nThere are N cities in the country. Each city is represent by a matrix size of M*M. If city A, B and C satisfy that A*B = C, we say that there is a road from A to C with distance 1 (but that does not means there is a road from C to A).", "\nNow the king of the country wants to ask me some problems, in the format:", "\nIs there is a road from city X to Y?", "\nI have to answer the questions quickly, can you help me?", "\n\n", "Input", "\nEach test case contains a single integer N, M, indicating the number of cities in the country and the size of each city. The next following N blocks each block stands for a matrix size of M*M. Then a integer K means the number of questions the king will ask, the following K lines each contains two integers X, Y(1-based).The input is terminated by a set starting with N = M = 0. All integers are in the range [0, 80].", "\n\n", "Output", "\nFor each test case, you should output one line for each question the king asked, if there is a road from city X to Y? Output the shortest distance from X to Y. If not, output \"Sorry\".", "\n\n", "Sample Input", "\n3 2", "\n1 1", "\n2 2", "\n1 1", "\n1 1", "\n2 2", "\n4 4", "\n1", "\n1 3", "\n3 2", "\n1 1", "\n2 2", "\n1 1", "\n1 1", "\n2 2", "\n4 3", "\n1", "\n1 3", "\n0 0", "\n\n", "Sample Output", "\n1", "\nSorry"]], "Tag": "算法设计"}
{"Answer": "已找到，使用图网络模型可以实现。", "Konwledge_Point": "负权边的最短路径", "Question": ["神经网络能否不失一般性地解图的最短路径问题？", ["\n\n", "解最短路径问题，我看了一些网上的例子，多是训练DQN能够在某一特定图中找到最短路径（如图，在这个特定图中学习如何绕过黑点到达黄点）", "\n\n", "这种训练，相当于特定图的拓扑存储在了Q Matrix中，当图（环境）改变时则需要重新训练。", "\n问题：请问神经网络能否不失一般性地解图的最短路径问题？也就是不依赖某种特定的图拓扑，每次输入图拓扑和起点终点，输出最优路径"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/alphapi/article/details/19770749", "Konwledge_Point": "负权边的最短路径", "Question": ["求无向不带权图某点C到各点的最短路径dai'ma", ["一个无向不带权图，有N个节点，M条路径", "\n求某一节点C到其他各路径的最短路径，并按顺序输出"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这个是最短路径计算&amp;#xff0c;运费应该两个地点之间经过节点数计算&amp;#xff0c;比如a到c&amp;#xff0c;&amp;#xff0c;经过5个节点&amp;#xff0c;每个节点收费5元&amp;#xff0c;运费就25元。你的要求包括了好几种最短路径算法&amp;#xff0c;具体可以参考&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/printfxgd/article/details/80791847\" id=\"textarea_1637156922423_1637157011619_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/printfxgd/article/details/80791847&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["城市交通查询系统设计", ["题目3: 城市交通查询系统设计内容：设计一个交通查询系统，能够查询：1)从一个城市到其它各城市之间的最短路径或运费最少的路径;2）多个城市中任意一对城市之间的最短路径或运费最少的路径。设计要求：（1）建立关于城市信息结点的结构体；（2）定义城市信息链表的结点结构；（3）建立交通网络图的存储结构；（4）写出采用Dijksta算法求每对顶点之间最短路径的算法函数；  （5）写出采用Floyed算法求任意一对顶点之间最短路径的算法函数；（6）输入交通网络图中的路径信息或费用信息；（7）根据Dijksta算法计算从太原到其它各大城市的最短路径或最小费用；（8）根据Floyed算法计算任意一对大城市之间的最短路径或最小费用；（9）对于不同的查询要求可以输入已知城市间的路程或所需费用信息。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;graphminspan tree&amp;#xff0c;这里多了两个空格&amp;#xff0c;将空格删去即可&amp;#xff0c;matlab这样相当于直接识别成两个函数&amp;#xff0c;是自定义函数还是系统自带的&amp;#xff0c;可以用实时脚本编程&amp;#xff0c;那个可以实时报错&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["matlab最短路径问题", ["\n", "这个错误应该怎么改呀？"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/ShiWaiGaoRen12345/article/details/69808597", "Konwledge_Point": "负权边的最短路径", "Question": ["最短路径的数据结构的问题，C语言的问题，具体怎么解决的思路的问题", ["Problem Description", "\nThere are n points on the plane, Pi(xi, yi)(1 <= i <= n), and xi < xj (i\nBefore you reach the rightmost point Pn, you can only visit the points those have the bigger x-coordinate value. For example, you are at Pi now, then you can only visit Pj(j > i). When you reach Pn, the rule is changed, from now on you can only visit the points those have the smaller x-coordinate value than the point you are in now, for example, you are at Pi now, then you can only visit Pj(j < i). And in the end you back to P1 and the tour is over.", "\nYou should visit all points in this tour and you can visit every point only once.", "\n\n", "Input", "\nThe input consists of multiple test cases. Each case begins with a line containing a positive integer n(2 <= n <= 200), means the number of points. Then following n lines each containing two positive integers Pi(xi, yi), indicating the coordinate of the i-th point in the plane.", "\n\n", "Output", "\nFor each test case, output one line containing the shortest path to visit all the points with the rule mentioned above.The answer should accurate up to 2 decimal places.", "\n\n", "Sample Input", "\n3", "\n1 1", "\n2 3", "\n3 1", "\n\n", "Sample Output", "\n6.47"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;OP&lt;/span&gt; {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; next[&lt;span class=\"hljs-number\"&gt;10001&lt;/span&gt;], num &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;//  记入它接下来抵达的地方,num 为个数&lt;/span&gt;\n}op[&lt;span class=\"hljs-number\"&gt;10001&lt;/span&gt;];                    &lt;span class=\"hljs-comment\"&gt;//  表示点个数,0为出发地,10000为目的地&lt;/span&gt;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f[&lt;span class=\"hljs-number\"&gt;10001&lt;/span&gt;],key[&lt;span class=\"hljs-number\"&gt;10001&lt;/span&gt;],k_len&amp;#61;&lt;span class=\"hljs-number\"&gt;50000&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;find_MinRoad&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; now,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num)&lt;/span&gt;&lt;/span&gt;{  &lt;span class=\"hljs-comment\"&gt;// 当前位置,当前走的步数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(now&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(num&amp;lt;k_len) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(k_len&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k_len&amp;lt;num;k_len&amp;#43;&amp;#43;) key[k_len] &amp;#61; f[k_len];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(now!&amp;#61;&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;){\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; z&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;z&amp;lt;op[now].num;z&amp;#43;&amp;#43;) {\n            f[num] &amp;#61; op[now].next[z];\n            &lt;span class=\"hljs-built_in\"&gt;find_MinRoad&lt;/span&gt;(op[now].next[z],num&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n        }\n    }\n\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; road,a,b;                      &lt;span class=\"hljs-comment\"&gt;//  road : 输入中间路的总个数&amp;#xff0c;你的图为13,如果更多点把int 换成long op那的数组也再开大点&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;road);\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (road--){\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;b); &lt;span class=\"hljs-comment\"&gt;// a-&amp;gt;b&lt;/span&gt;\n        op[a].next[op[a].num&amp;#43;&amp;#43;] &amp;#61; b;\n    }\n\n    &lt;span class=\"hljs-built_in\"&gt;find_MinRoad&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,k_len&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; z&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;z&amp;lt;k_len;z&amp;#43;&amp;#43;) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,key[z]);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["对于下图，利用最短路径算法，找到从家到学校最短路径长度（能够输出对应路径更好）", ["对于下图，利用最短路径算法，找到从家到学校最短路径长度（能够输出对应路径更好）（C语言）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;边(2,4)的长度看不清&amp;#xff0c;姑且认为是3吧。&lt;br /&gt;那么算法的过程是&amp;#xff1a;&lt;br /&gt;取点2&amp;#xff0c;用2的最短路&lt;strong&gt;0&lt;/strong&gt;更新1(5)、4(3)、6(10)&amp;#xff1b;&lt;br /&gt;取点4&amp;#xff0c;用4的最短路&lt;strong&gt;3&lt;/strong&gt;更新6(5)&amp;#xff1b;&lt;br /&gt;取点1&amp;#xff0c;用1的最短路&lt;strong&gt;5&lt;/strong&gt;更新3(9)、5(12)&amp;#xff1b;&lt;br /&gt;取点6&amp;#xff0c;用6的最短路&lt;strong&gt;5&lt;/strong&gt;更新5(11)&lt;br /&gt;......&lt;br /&gt;括号里是更新后该点的最短路&amp;#xff0c;每次枚举的点的最短路一定是当前已经更新的点中最小的&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["数据结构最短距离（迪杰斯特拉）的算法", ["\n", "这个2到5好像存在问题到底应该走哪一条我记得有讲过还没更新的不能走2到6还没更新可是答案是走的2到4，4到6，6到5"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;弄一个数组&amp;#xff0c;下标是当前节点&amp;#xff0c;里面的值是下一个节点&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["图的最短路径问题，滴杰斯特拉算法", ["\n", "友友们，这个是一个关于图的最短路径求解代码，只显示了求最短路径的函数，在我构造的这个图里，我要输出一个点到另一个点的最短路径长度，但我不会输出走的过程，友友教教我怎么把经过点输出来，想了一个下午了"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/u014569598/article/details/25472851", "Konwledge_Point": "负权边的最短路径", "Question": ["Risk(Floyd)               ", ["Risk is a board game in which several opposing players attempt to conquer the world. The gameboard consists of a world map broken up into hypothetical countries. During a player's turn, armies stationed in one country are only allowed to attack only countries with which they share a common border. Upon conquest of that country, the armies may move into the newly conquered country.", "\nDuring the course of play, a player often engages in a sequence of conquests with the goal of transferring a large mass of armies from some starting country to a destination country. Typically, one chooses the intervening countries so as to minimize the total number of countries that need to be conquered. Given a description of the gameboard with 20 countries each with between 1 and 19 connections to other countries, your task is to write a function that takes a starting country and a destination country and computes the minimum number of countries that must be conquered to reach the destination. You do not need to output the sequence of countries, just the number of countries to be conquered including the destination. For example, if starting and destination countries are neighbors, then your program should return one.", "\n\n", "The following connection diagram illustrates the sample input.", "\n\n", "Input", "\n\n", "Input to your program will consist of a series of country configuration test sets. Each test set will consist of a board description on lines 1 through 19. The representation avoids listing every national boundary twice by only listing the fact that country I borders country J when I < J. Thus, the Ith line, where I is less than 20, contains an integer X indicating how many \"higher-numbered\" countries share borders with country I, then X distinct integers J greater than I and not exceeding 20, each describing a boundary between countries I and J. Line 20 of the test set contains a single integer (1 <= N <= 100) indicating the number of country pairs that follow. The next N lines each contain exactly two integers (1 <= A,B <= 20; A!=B) indicating the starting and ending countries for a possible conquest.", "\n\n", "There can be multiple test sets in the input; your program should continue reading and processing until reaching the end of file. There will be at least one path between any two given countries in every country configuration.", "\n\n", "Output", "\n\n", "For each input set, your program should print the following message \"Test Set #T\" where T is the number of the test set starting with 1. The next NT lines each will contain the result for the corresponding test in the test set - that is, the minimum number of countries to conquer. The test result line should contain the start country code A the string \" to \" the destination country code B ; the string \": \" and a single integer indicating the minimum number of moves required to traverse from country A to country B in the test set. Following all result lines of each input set, your program should print a single blank line.", "\n\n", "Sample Input", "\n\n", "1 3 ", "\n2 3 4 ", "\n3 4 5 6 ", "\n1 6 ", "\n1 7 ", "\n2 12 13 ", "\n1 8 ", "\n2 9 10 ", "\n1 11 ", "\n1 11 ", "\n2 12 17 ", "\n1 14 ", "\n2 14 15 ", "\n2 15 16 ", "\n1 16 ", "\n1 19 ", "\n2 18 19 ", "\n1 20 ", "\n1 20 ", "\n5 ", "\n1 20 ", "\n2 9 ", "\n19 5 ", "\n18 19 ", "\n16 20", "\n\n", "Sample Output", "\n\n", "Test Set #1 ", "\n1 to 20: 7 ", "\n2 to 9: 5 ", "\n19 to 5: 6 ", "\n18 to 19: 2 ", "\n16 to 20: 2 "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;code class=\"language-javascript\"&gt;https://github.com/daancode/a-star&lt;/code&gt;&amp;#xff0c;可以参考这个项目&lt;br /&gt;如有帮助&amp;#xff0c;请采纳&amp;#xff0c;谢谢。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["使用Astar找最短路径", ["\n", "使用Astar找最短路径  当到图中标记的那个点后  再往后就会到右边 无法继续行走  报错，", "代价的计算应该怎么改？ 有什么优化的方法吗 "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不同于网上找到的答案的&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;assert.h&amp;gt;\n#include &amp;lt;stdlib.h&amp;gt;\n\ntypedef struct &lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;\n{\n    int x;\n    int y;\n    int len;\n} QDataType; &lt;span class=\"hljs-comment\"&gt;//数据类型&lt;/span&gt;\n\ntypedef struct ListNode &lt;span class=\"hljs-comment\"&gt;//通过链表实现的&lt;/span&gt;\n{\n    QDataType _&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;;\n    struct ListNode *_pNext;\n} ListNode, *pListNode;\n\ntypedef struct Queue\n{\n    pListNode _pHead; &lt;span class=\"hljs-comment\"&gt;//头指针&lt;/span&gt;\n    pListNode _pTail; &lt;span class=\"hljs-comment\"&gt;//尾指针&lt;/span&gt;\n} Queue;\n\npListNode BuyNode(QDataType d)\n{\n    pListNode new &amp;#61; malloc(sizeof(ListNode));\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;new&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt; &amp;#61; d;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;new&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pNext &amp;#61; NULL;\n    return new;\n}\n\nvoid QueueInit(Queue *q)\n{\n    assert(q);\n    QDataType d;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pHead &amp;#61; BuyNode(d);\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pTail&lt;/span&gt; &amp;#61; q-&amp;gt;&lt;/span&gt;_pHead;\n}\n\nvoid QueuePush(Queue *q, QDataType d)\n{\n    assert(q);\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pTail&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pNext &amp;#61; BuyNode(d);\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pTail&lt;/span&gt; &amp;#61; q-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pTail&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pNext;\n}\n\nvoid QueuePop(Queue *q)\n{\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pListNode&lt;/span&gt; dNode &amp;#61; q-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pHead&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pNext;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (dNode)\n    {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pHead&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pNext&lt;/span&gt; &amp;#61; dNode-&amp;gt;&lt;/span&gt;_pNext;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (q-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pHead&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pNext &amp;#61;&amp;#61; NULL)\n        {\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pTail&lt;/span&gt; &amp;#61; q-&amp;gt;&lt;/span&gt;_pHead;\n        } &lt;span class=\"hljs-comment\"&gt;//如果只有一个元素&amp;#xff0c;删完后ptail会悬空&lt;/span&gt;\n        free(dNode);\n    }\n}\n\nint QueueSize(Queue *q)\n{\n    assert(q);\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pListNode&lt;/span&gt; pre &amp;#61; q-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pHead&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pNext;\n    int count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (pre)\n    {\n        count&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pre&lt;/span&gt; &amp;#61; pre-&amp;gt;&lt;/span&gt;_pNext;\n    }\n    return count;\n}\nint QueueEmpty(Queue *q)\n{\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;return&lt;/span&gt; NULL &amp;#61;&amp;#61; q-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pHead&lt;/span&gt;-&amp;gt;&lt;/span&gt;_pNext;\n}\nQDataType Front(Queue *q)\n{\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;return&lt;/span&gt; q-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pHead&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pNext&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;;\n}\nQDataType Back(Queue *q)\n{\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;return&lt;/span&gt; q-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pTail&lt;/span&gt;-&amp;gt;&lt;/span&gt;_&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;;\n}\n\nQueue *q;\nint ds[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;{-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}, {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}, {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;}, {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;}};\nint m, n;\nint a[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n\nint bfs(int x, int y, int x2, int y2)\n{\n    QDataType d &amp;#61; {x, y, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    QueuePush(q, d);\n    a[x][y] &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (!QueueEmpty(q))\n    {\n        d &amp;#61; Front(q);\n        QueuePop(q);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;; i&amp;#43;&amp;#43;)\n        {\n            int tx &amp;#61; d.x &amp;#43; ds[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n            int ty &amp;#61; d.y &amp;#43; ds[i][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (tx &amp;#61;&amp;#61; x2 &amp;amp;&amp;amp; ty &amp;#61;&amp;#61; y2)\n            {\n                return d.len&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (tx &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; tx &amp;lt; m &amp;amp;&amp;amp; ty &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ty &amp;lt; n &amp;amp;&amp;amp; a[tx][ty] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                QDataType t &amp;#61; {tx, ty, d.len&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;};\n                QueuePush(q, t);\n                a[tx][ty] &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n           }\n        }\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\nint main()\n{\n    int x1, y1, x2, y2;\n    int i, j;\n    q &amp;#61; (Queue *)malloc(sizeof(Queue));\n    QueueInit(q);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;, &amp;amp;m, &amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n; j&amp;#43;&amp;#43;)\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a[i][j]);\n    }\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d %d&amp;#34;&lt;/span&gt;, &amp;amp;x1, &amp;amp;y1, &amp;amp;x2, &amp;amp;y2);\n    int len &amp;#61; bfs(x1, y1, x2, y2);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (len&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, len);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;no path!&amp;#34;&lt;/span&gt;);\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["c语言，运用队列的数据结构知识求解迷宫问题的最短路径步数。", ["问题遇到的现象和发生背景", "\n", "给定一迷宫以及入口和出口的坐标，要求寻找从入口到出口的最短距离。", "Input", "第一行两个数m和n表示迷宫的行数和列数。迷宫大小不超过45×45。", "\n", "接下来是m行n列的数，用来表示迷宫，1表示墙，0表示通路。", "\n", "第二行四个数x1,y1,x2,y2分别表示起点和终点的坐标。", "\n", "Output", "从起点到终点所经过的最短路径长度，如果不存在，输出\"no path!\"", "\n", "Sample Input", "8 8", "0 0 0 0 0 0 0 1", "0 1 1 1 1 0 0 0", "0 1 0 1 1 1 1 0", "0 1 1 0 0 0 0 0", "0 0 0 1 0 1 1 1", "0 1 0 0 0 0 0 0", "0 1 1 1 1 1 1 0", "0 0 0 0 0 0 0 0", "0 0 1 7", "Sample Output", "8", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "用队列求解。", "\n", "我想要达到的结果", "\n", "不同于网上找到的答案的，运用c语言的知识。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于最新版ChatGPT4的回答&amp;#xff0c;望采纳!!!有其他问题也可以询问我哦、”(最新版更智能&amp;#xff0c;功能更加强大)&lt;/p&gt;\n&lt;p&gt;你可以通过修改遗传算法来解决这个问题。在这种情况下&amp;#xff0c;你可以将问题建模为一个从起点到三个终点之一的最短路径问题。首先&amp;#xff0c;需要创建一个适应度函数来评估路径的总长度。然后&amp;#xff0c;通过模拟退火算法来搜索最佳解。以下是一个简化的MATLAB实现&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;best_path&lt;/span&gt;, &lt;span class=\"hljs-identifier\"&gt;shortest_dist&lt;/span&gt;]&lt;/span&gt; &amp;#61; sa&lt;span class=\"hljs-constructor\"&gt;_tsp(&lt;span class=\"hljs-params\"&gt;dist_matrix&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;start_node&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;end_nodes&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;num_iterations&lt;/span&gt;, T0, &lt;span class=\"hljs-params\"&gt;alpha&lt;/span&gt;)&lt;/span&gt;\n\n    n &amp;#61; size(dist_matrix, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    num_end_nodes &amp;#61; numel(end_nodes);\n\n    % 初始化路径\n    path &amp;#61; &lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;start_node&lt;/span&gt;, &lt;span class=\"hljs-identifier\"&gt;setdiff&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-identifier\"&gt;n&lt;/span&gt;, [&lt;span class=\"hljs-identifier\"&gt;start_node&lt;/span&gt;, &lt;span class=\"hljs-identifier\"&gt;end_nodes&lt;/span&gt;]&lt;/span&gt;)];\n\n    % 初始化温度\n    T &amp;#61; T0;\n\n    best_path &amp;#61; path;\n    shortest_dist &amp;#61; Inf;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:num_iterations\n        % 产生新解\n        new_path &amp;#61; generate&lt;span class=\"hljs-constructor\"&gt;_new_path(&lt;span class=\"hljs-params\"&gt;path&lt;/span&gt;)&lt;/span&gt;;\n\n        % 计算适应度值\n        new_dist &amp;#61; calc&lt;span class=\"hljs-constructor\"&gt;_path_distance(&lt;span class=\"hljs-params\"&gt;new_path&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;dist_matrix&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;end_nodes&lt;/span&gt;)&lt;/span&gt;;\n\n        % Metropolis准则\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; new_dist &amp;lt; shortest_dist&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;exp((shortest_dist - new_dist)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;T) &amp;gt; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n            path &amp;#61; new_path;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; new_dist &amp;lt; shortest_dist\n                shortest_dist &amp;#61; new_dist;\n                best_path &amp;#61; new_path;\n            &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n\n        % 降低温度\n        T &amp;#61; alpha&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;T;\n    &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; new_path &amp;#61; generate&lt;span class=\"hljs-constructor\"&gt;_new_path(&lt;span class=\"hljs-params\"&gt;path&lt;/span&gt;)&lt;/span&gt;\n    n &amp;#61; numel(path);\n    idx &amp;#61; randperm(n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; % 随机选择两个点&amp;#xff0c;但不包括起点\n    new_path &amp;#61; path;\n    &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;_path(&lt;span class=\"hljs-params\"&gt;idx&lt;/span&gt;)&lt;/span&gt; &amp;#61; path(fliplr(idx)); % 交换两个点\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; total_dist &amp;#61; calc&lt;span class=\"hljs-constructor\"&gt;_path_distance(&lt;span class=\"hljs-params\"&gt;path&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;dist_matrix&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;end_nodes&lt;/span&gt;)&lt;/span&gt;\n    n &amp;#61; numel(path);\n    total_dist &amp;#61; sum(dist&lt;span class=\"hljs-constructor\"&gt;_matrix(&lt;span class=\"hljs-params\"&gt;sub2ind&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;size&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;dist_matrix&lt;/span&gt;)&lt;/span&gt;, path(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;), path(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:n))));\n\n    % 计算到所有终点的距离\n    end_dists &amp;#61; dist&lt;span class=\"hljs-constructor\"&gt;_matrix(&lt;span class=\"hljs-params\"&gt;path&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;end&lt;/span&gt;)&lt;/span&gt;, end_nodes);\n    total_dist &amp;#61; total_dist &amp;#43; min(end_dists); % 只保留最短的距离\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;使用此函数时&amp;#xff0c;你需要提供距离矩阵、起始点、终点、迭代次数、初始温度和温度衰减系数。示例如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;% 创建距离矩阵&lt;/span&gt;\ndist_matrix &amp;#61; ...\n\n&lt;span class=\"hljs-comment\"&gt;% 设置起点和终点&lt;/span&gt;\nstart_node &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\nend_nodes &amp;#61; [&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;];\n\n&lt;span class=\"hljs-comment\"&gt;% 设置模拟退火参数&lt;/span&gt;\nnum_iterations &amp;#61; &lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;;\n&lt;span class=\"hljs-symbol\"&gt;T0&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;\nalpha &amp;#61; &lt;span class=\"hljs-number\"&gt;0.99&lt;/span&gt;;\n\n&lt;span class=\"hljs-comment\"&gt;% 调用函数&lt;/span&gt;\n[best_path, shortest_dist] &amp;#61; sa_tsp(dist_matrix, start_node, end_nodes, num_iterations, &lt;span class=\"hljs-symbol\"&gt;T0&lt;/span&gt;, alpha);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;请注意&amp;#xff0c;这个实现是一个简化版&amp;#xff0c;你可能需要根据问题规模和计算能力来调整参数。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["matlab加上模拟退火算法求解最短路问题", ["从一个点出发，在剩余的点中搜索，终点有三个但是要求到其中一个终点的最短距离。我试了用tsp方法求解，但是我不需要形成回路所以不对。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以使用 Network Analyst 工具来计算最小成本路径。要做的第一步是构建网络数据集&amp;#xff0c;其中包含了您要使用的道路、铁路和公路数据。然后&amp;#xff0c;可以使用权值表达式来定义成本函数&amp;#xff0c;指定坡度、海拔和铁路/公路缓冲区对成本的影响。最后&amp;#xff0c;使用 Network Analyst 工具中的最短路径分析工具来计算起点和终点之间的最小成本路径。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["ARCGIS最小成本路径计算", ["计算最小成本路径，出行成本为1000*(1+坡度/10)^2*(1+海拔/2000)，铁路周边1000米缓冲区内出行成本为500，公路周边500米缓冲区内出行成本为800"]], "Tag": "算法设计"}
{"Answer": "&lt;ol&gt;&lt;li&gt;i表示步数&amp;#xff0c;从a顶点出发到b顶点只需要1步&amp;#xff0c;故i&amp;#61;1。到其他顶点&amp;#xff0c;以此类推&amp;#xff1b;&lt;/li&gt;&lt;li&gt;从a到d有3种走法&amp;#xff0c;最短路径和是5&amp;#xff08;2&amp;#43;3&amp;#xff0c;即 a -&amp;gt; b -&amp;gt; d&amp;#xff09;&amp;#xff0c;其他两种走法是  a -&amp;gt; c -&amp;gt; d&amp;#xff0c; a -&amp;gt; b -&amp;gt; c -&amp;gt; d&amp;#xff1b;&lt;/li&gt;&lt;li&gt;∞表无穷大&amp;#xff0c;即从某个节点到某个顶点之间是不可达。&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["迪杰斯特拉算法求最短路径", ["看不大懂以下这种迪杰斯特拉求最短路径的方法", "\n", "\n", "\n", "主要疑惑如下：", "1.答案中的i代表的是什么？", "2.为什么会有多个重复的结果出现，例如d行中有三个是完全一模一样的", "3.不是很能理解∞代表的是什么"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;最短路径不对&amp;#xff0c;路径最短不代表它是由最短的边组成的&lt;br /&gt;比如最短的路径是1,100&amp;#xff0c;第二短的路径是102条长度为1的路径组成&amp;#xff0c;很显然最短路径跟这题完全不是同一个问题&lt;br /&gt;而且求最短路径你需要验证每个路径&amp;#xff0c;很耗费时间&lt;br /&gt;这题其实最适合用贪心算法求&amp;#xff0c;反正每路过一个节点&amp;#xff0c;你都走最短的那条就对了&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["与无向图最短路径有关", ["问题", "：一个无向图有n个点，m条边，你现在在1号点，每条边有个对能力值的限制，要大于等于这个限制才能通过它。他们想知道他们至少要有多大的能力值，才能从1号点到n号点。", "\n", "输入", "：第一行两个正整数n,m。分别表示图的大小和边的数量。", "接下来m行，每行3个整数 u,v,l 。表示有一条u到v的边，至少要l能力值才能通过。地图保证1和n是连通的。", "\n", "数据规模", "：对于30%的数据： n<=m<=8", "对于100%的数据 , n<=m<=10^6,1<=u,v<=n,0<=l<=10^9", "\n", "输出描述", "：需要获得的最小的能力值，能够从1到n", "\n", "我的想法和出现的问题", "：我本来打算先求最短路径的，再找出最短路径上最长的一条边的值，但是它测试数据太大了，我邻接矩阵一开数组就爆栈了。有没有什么不爆数组的思路啊。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;D&lt;/p&gt;\n&lt;p&gt;最短路径算法&amp;#xff1a;一个是迪杰斯特拉算法&amp;#xff0c;求从某个源点到其余各顶点的最短路径&amp;#xff0c;求解过程按路径长度递增的次序产生的最短路径&amp;#xff0c;时间复杂度是O(n^2) ; 另一种算法是弗洛伊德算法&amp;#xff0c;求 每一对顶点之间的最短路径&amp;#xff0c;时间复杂度为O(n^3)。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["与费洛伊德算法中最短路径的时间复杂度相关的疑问", ["请教图片中的这个内容该怎么做呢，我能该如何去解决，与费洛伊德算法中最短路径的时间复杂度相关的疑问"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/H_Anonymity/article/details/78107354", "Konwledge_Point": "负权边的最短路径", "Question": ["C语言解决一个关于最短路径的花费的问题，怎么利用C解决", ["Problem Description", "\nThere is an old country and the king fell in love with a devil. The devil always ask the king to do some crazy things. Although the king used to be wise and beloved by his people. Now he is just like a boy in love and can’t refuse any request from the devil. Also, this devil is looking like a very cute Loli.", "\n\n", "Something bad actually happen. The devil makes this kingdom's people infected by a disease called lolicon. Lolicon will take away people's life in silence. ", "\n\n", "Although z*p is died, his friend, y*wan is not a lolicon. Y*wan is the only one in the country who is immune of lolicon, because he like the adult one so much. ", "\n\n", "As this country is going to hell, y*wan want to save this country from lolicon, so he starts his journey.", "\n\n", "You heard about it and want to help y*wan, but y*wan questioned your IQ, and give you a question, so you should solve it to prove your IQ is high enough.", "\n\n", "The problem is about counting. How many undirected graphs satisfied the following constraints?", "\n\n", "\n", "This graph is a complete graph of size n. ", "\n", "Every edge has integer cost from 1 to L.", "\n", "The cost of the shortest path from 1 to n is k.", "\n", "Can you solve it?", "\n\n", "output the answer modulo 10^9+7", "\n\n", "Input", "\nThe first line contains an integer T, denoting the number of the test cases.", "\nFor each test case, the first line contains 3 integers n,k,L.", "\n\n", "T<=5 n,k<=12,L<=10^9.", "\n\n", "Output", "\nFor each test case, output the answer in one line.", "\n\n", "Sample Input", "\n2", "\n3 3 3", "\n4 4 4", "\n\n", "Sample Output", "\n8", "\n668"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/lin375691011/article/details/38405413", "Konwledge_Point": "负权边的最短路径", "Question": ["Single-Player Games             ", ["Description", "\n\n", "Playing games is the most fun if other people take part. But other players are not always available if you need them, which led to the invention of single-player games. One of the most well-known examples is the infamous ", "Solitaire'' packaged with Windows, probably responsible for more wasted hours in offices around the world than any other game. ", "\nThe goal of a single-player game is usually to make", "moves'' until one reaches a final state of the game, which results in a win or loss, or a score assigned to that final state. Most players try to optimize the result of the game by employing good strategies. In this problem we are interested in what happens if one plays randomly. After all, these games are mostly used to waste time, and playing randomly achieves this goal as well as any other strategy. ", "\n\n", "Games can very compactly represented as (possibly infinite) trees. Every node of the tree repre- sents a possible game state. The root of the tree corresponds to the starting position of the game. For an inner node, its children are the game states to which one can move in a single move. The leaf nodes are the final states, and every one of them is assigned a number, which is the score one receives when ending up at that leaf. ", "\n\n", "\nTrees are defined using the following grammar. ", "\n\n", "Definition ::= Identifier \"=\" RealTree ", "\nRealTree ::= \"(\"Tree+\")\" ", "\nTree ::= Identifier | Integer | \"(\"Tree+\")\" ", "\nIdentifier ::= a|b|...|z ", "\nInteger ∈ {...,-3,-2,-1,0,1,2,3,...,} ", "\n\n", "By using a Definition, the RealTree on the right-hand side of the equation is assigned to the Identifier on the left. A RealTree consists of a root node and one or more children, given as a sequence enclosed in brackets. And a Tree is either ", "\n\n", ". the tree represented by a given Identifier, or ", "\n\n", ". a leaf node, represented by a single Integer, or ", "\n\n", ". an inner node, represented by a sequence of one or more Trees (its children), enclosed in brackets. ", "\n\n", "Your goal is to compute the expected score, if one plays randomly, i.e. at each inner node selects one of the children uniformly at random. This expected score is well-defined even for the infinite trees definable in our framework as long as the probability that the game ends (playing randomly) is 1. ", "\nInput", "\n\n", "The input file contains several gametree descriptions. Each description starts with a line containing the number n of identifiers used in the description. The identifiers used will be the first n lowercase letters of the alphabet. The following n lines contain the definitions of these identifiers (in the order a, b, ...). Each definition may contain arbitrary whitespace (but of course there will be no spaces within a single integer). The right hand side of a definition will contain only identifiers from the first n lowercase letters. The inputs ends with a test case starting with n = 0. This test case should not be processed.", "\nOutput", "\n\n", "For each gametree description in the input, first output the number of the game. Then, for all n identifiers in the order a, b, ..., output the following. If an identifier represents a gametree for which the probability of finishing the game is 1, print the expected score (when playing randomly). This value should be exact to three digits to the right of the decimal point. ", "\n\n", "If the game described by the variable does not end with probability 1, print ``Expected score of id undefined'' instead. Output a blank line after each test case.", "\nSample Input", "\n\n", "1", "\na = ((1 7) 6 ((8 3) 4))", "\n2", "\na = (1 b)", "\nb = (4 a)", "\n1", "\na = (a a a)", "\n0", "\nSample Output", "\n\n", "Game 1", "\nExpected score for a = 4.917", "\n\n", "Game 2", "\nExpected score for a = 2.000", "\nExpected score for b = 3.000", "\n\n", "Game 3", "\nExpected score for a undefined"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/xs18952904/article/details/84670271", "Konwledge_Point": "负权边的最短路径", "Question": ["利用C语言的程序设计的技术，计算这个图中的最长最短路径的算法怎么实现", ["Problem Description", "\nThe graph diameter is the length of the \"longest shortest path\" between any two vertices of a graph. In other words, a graph's diameter is the longest path which must be traversed in order to travel from any vertex to another when paths which backtrack, detour, or loop are excluded from consideration.", "\nGiven an undirected graph, your mission is to count the number of diameters of it.", "\n\n", "Input", "\nThe input contains multiple test cases. ", "\nFor each test case, it contains n+1 lines. ", "\nLine 1: two integers m, n (2<= m <= 100, 1 <= n <= 4000) indicating that there are m vertices and n edges in the city. ", "\nLine 2~n+1: each contains three integers i, j, d (1 <= i, j <= m, 1 <= d <= 100), indicating that there is an edge of length d connecting vertex i and vertex j.", "\n\n", "Output", "\nOutput the value of the diameter and the number of diameters in a single line, separated by a single space.", "\n\n", "Sample Input", "\n4 5 ", "\n1 2 1 ", "\n2 3 1 ", "\n3 4 1 ", "\n1 4 1 ", "\n1 3 2 ", "\n\n", "Sample Output", "\n2 5"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;#include&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;br /&gt;using namespace std;&lt;br /&gt;char a[1005],b[1005],e,f;&lt;br /&gt;int n,d[27][27],s&amp;#61;0;&lt;br /&gt;int main(){&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    cin&amp;gt;&amp;gt;a&amp;gt;&amp;gt;b;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    cin&amp;gt;&amp;gt;n;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for(int i&amp;#61;0;i&amp;lt;n;i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        cin&amp;gt;&amp;gt;e&amp;gt;&amp;gt;f;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        d[e-&amp;#39;a&amp;#39;][f-&amp;#39;a&amp;#39;]&amp;#61;d[f-&amp;#39;a&amp;#39;][e-&amp;#39;a&amp;#39;]&amp;#61;1;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for(int k&amp;#61;0;k&amp;lt;27;k&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        for(int i&amp;#61;0;i&amp;lt;27;i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            for(int j&amp;#61;0;j&amp;lt;27;j&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                if(d[i][k]!&amp;#61;0&amp;amp;&amp;amp;d[k][j]!&amp;#61;0&amp;amp;&amp;amp;i!&amp;#61;j){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                    if(d[i][j]&amp;#61;&amp;#61;0) d[i][j]&amp;#61;d[i][k]&amp;#43;d[k][j];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                    else d[i][j]&amp;#61;min(d[i][j],d[i][k]&amp;#43;d[k][j]);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for(int i&amp;#61;0;i&amp;lt;strlen(a);i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        s&amp;#43;&amp;#61;d[a[i]-&amp;#39;a&amp;#39;][b[i]-&amp;#39;a&amp;#39;];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    cout&amp;lt;&amp;lt;s;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    return 0;&lt;/span&gt;&lt;br /&gt;} &lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["弗洛伊德算法求多源最短路径", ["\n", "\n"]], "Tag": "算法设计"}
{"Answer": "http://xueshu.baidu.com/s?wd=paperuri:(bf07b4fc89e69e391ee525c9d6ddee1c)&amp;filter=sc_long_sign&amp;sc_ks_para=q%3D%E5%9F%BA%E4%BA%8E%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%9A%84%E6%97%A0%E4%BA%BA%E6%9C%BA%E8%88%AA%E8%B7%AF%E8%A7%84%E5%88%92&amp;tn=SE_baiduxueshu_c1gjeupa&amp;ie=utf-8&amp;sc_us=14669995398736205306", "Konwledge_Point": "负权边的最短路径", "Question": ["无人机最短飞行路径问题", ["假设无人机有扫描半径r，给定一待测区域，要求无人机能够扫描到区域中的所有位置，并返回无人机起飞点，总飞行路程尽可能短（省电啊）。", "\n求问飞行路线怎么设计，给出大致思路就行。", "\n        1.矩形区域", "\n                 矩形区域尺寸为W×H，起飞点在矩形的边上任一点", "\n                2.圆形区域", "\n                   圆形区域半径为R，起飞点在圆边上任一点"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用ChatGPT &lt;/p&gt;\n&lt;p&gt;1、Dijkstra算法可以用于解决最短路径问题。假设城市A为源点&amp;#xff0c;城市B为终点&amp;#xff0c;可以先将所有城市的距离初始化为无穷大&amp;#xff0c;将城市A到其他城市的距离更新为实际距离&amp;#xff0c;然后选取距离A最近的城市&amp;#xff0c;将它到其他城市的距离与A到其他城市的距离进行比较并更新&amp;#xff0c;直到所有城市的距离都被更新过。最终&amp;#xff0c;从A到B的最短路径即为路径上所有边的距离之和。&lt;/p&gt;\n&lt;p&gt;2、可以使用广度优先搜索算法&amp;#xff08;BFS&amp;#xff09;解决转车次数最少的问题。假设城市A为起点&amp;#xff0c;城市B为终点&amp;#xff0c;将A加入队列&amp;#xff0c;从队列中取出A&amp;#xff0c;遍历A可直达的城市并将其加入队列&amp;#xff0c;标记A为已访问过。接着从队列中取出下一个城市&amp;#xff0c;重复上述过程直到取出B或者队列为空。在遍历时&amp;#xff0c;使用一个数组记录下每个城市到起点的最短距离&amp;#xff0c;每当遍历到一个城市时&amp;#xff0c;如果到达这个城市的路径比之前记录的路径短&amp;#xff0c;就更新这个城市的最短路径。最终&amp;#xff0c;到达B的路径上的中转次数即为B的最短路径上的城市个数减1。&lt;/p&gt;\n&lt;p&gt;3、可以将1和2中的方法结合起来。先按照Dijkstra算法计算出从A到每个城市的最短路径&amp;#xff0c;然后使用BFS算法&amp;#xff0c;从A出发&amp;#xff0c;遍历所有可达城市&amp;#xff0c;更新到这些城市的最短路径和中转次数&amp;#xff0c;直到遍历到B。如果遍历到的城市到A的最短路径加上这个城市到B的最短路径等于A到B的最短路径&amp;#xff0c;说明找到了一条最短路径上的中转点。在更新最短路径和中转次数时&amp;#xff0c;需要考虑到中转次数相同时的比较&amp;#xff0c;可以使用一个优先队列&amp;#xff08;最小堆&amp;#xff09;存储城市信息&amp;#xff0c;根据综合花费&amp;#xff08;最短路径&amp;#43;中转次数&amp;#xff09;的大小来决定优先级。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["数据结构（最短路径的应用）", ["功能：现有10个城市之间的交通信息，若有火车，则提供两个城市之间火车票价格。", "（1）有旅客Ａ，准备从城市A出发到城市B，他希望总想花费最少。试设计一种方案。", "（2）有旅客Ｂ，准备从城市A出发到城市B，他想转车次数最少。试设计一种方案。", "( 3 ) 有旅客Ｂ，准备从城市A出发到城市B，他希望总想花费最少的情况下尽量减少中转次数。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;code class=\"language-javascript\"&gt;i&amp;#61;1, 2, 3, 4, 5, 6&lt;/code&gt;表示第几次迭代&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["数据结构，最短路径问题求解？", ["这个表里的i时什么意思？那个i=1 2 3 4 5 6，这个i是什么意思？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://blog.csdn.net/qq_35710556/article/details/79583229\"&gt;https://blog.csdn.net/qq_35710556/article/details/79583229&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;五种最短路径算法&amp;#xff0c;自己研究一下&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["C++求给出图的最短路径问题", ["\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;迷宫问题算法的根本思想来源于回溯思想&amp;#xff0c;就是从某点出发&amp;#xff0c;根据深度或广度原则不断查找并记录所有走过的路径 遇到不可达或该节点相邻节点遍历完毕即退回&lt;br /&gt;如果说走路径符合题目要求就记录&amp;#xff0c;不符合不记录&lt;br /&gt;所以这个题关键是选对和理解回溯算法&lt;br /&gt;回溯思想有很多介绍的资源&amp;#xff0c;建议仔细阅读&lt;br /&gt;而那两个原则是回溯算法中的采取的遍历原则&lt;br /&gt;换一种角度去理解&amp;#xff0c;这个题就不那么难了&amp;#xff0c;自己也能写出答案&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["python迷宫问题输出所有路径的条数，，最好用BFS或者DFS解决", ["我能用BFS和DFS输出路径和最短路径，但是所有路径条数没思路，下面是我的代码，请大佬们帮个忙。最好能在我的代码基础上写出来", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Plenty of reading/algorithms:\n&lt;a href=\"http://en.wikipedia.org/wiki/Shortest_path_problem\" rel=\"nofollow noreferrer\"&gt;Shortest path problem&lt;/a&gt;. You effectively just have every edge (\"link\", as you called it) with an equal weight.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["线性阵列，节点随机链接到阵列中的其他节点，最短路径", ["\n\n", "INFO:\nI have an Array of 100 nodes, [ 0 .. 99 ].  Each node can have an arbitrary number of linked nodes:", "\n\n", "eg1, 0 links to 5, 10, 15, 20.\neg2, 1 links to 30, 40, 50.\neg3, etc..", "\n\n", "All 100 nodes have at least one linked node, nodes do not know who links to them.", "\n\n", "QUESTION:\nHow can I find the shortest link-path if provided with START and END.", "\n\n", "eg. START=5, END=80, Link Path (example) : [5]->10->24->36->[80]?", "\n\n", "I'm using Pascal and/or PHP, but understanding how is what I'm looking for [code helps too].", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Dijkstra should pass, I just make a submission using JAVA, and it took less than a second to complete each task.&lt;/p&gt;\n\n&lt;p&gt;As I have mentioned, each value in the matrix can go up to 10^9, your solution can encounter a number overflow problem, which can effect the running time.&lt;/p&gt;\n\n&lt;p&gt;My code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;!-- language:java --&amp;gt;\n\nstatic int[]X = {0,1,0,-1};\nstatic int[]Y = {1,0,-1,0};\npublic static void main(String[] args) throws FileNotFoundException {\n    // PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n    // \"output.txt\")));\n    PrintWriter out = new PrintWriter(System.out);\n    Scanner in = new Scanner();        \n    int n = in.nextInt();\n    long[][]map = new long[n][n];\n    for(int i = 0; i &amp;lt; n; i++){\n        for(int j = 0; j &amp;lt; n; j++){\n            map[i][j] = in.nextLong();\n        }\n    }\n    PriorityQueue&amp;lt;Pos&amp;gt; q= new PriorityQueue();\n    long[][]dist = new long[n][n];\n    for(long[]a : dist){\n        Arrays.fill(a,Long.MAX_VALUE);\n    }\n    q.add(new Pos(0,0,map[0][0]));\n    dist[0][0] = map[0][0];\n    while(!q.isEmpty()){\n        Pos p = q.poll();\n        if(dist[p.x][p.y] == p.cost){\n            for(int i = 0; i &amp;lt; 4; i++){\n                int x = p.x + X[i];\n                int y = p.y + Y[i];\n                if(x &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; n &amp;amp;&amp;amp; y &amp;lt; n &amp;amp;&amp;amp; dist[x][y] &amp;gt; dist[p.x][p.y] + map[x][y] ){\n                    dist[x][y] = dist[p.x][p.y] + map[x][y];\n                    q.add(new Pos(x,y,dist[x][y]));\n                }\n            }\n        }\n    }\n    out.println(dist[n - 1][n - 1]);\n    out.close();\n}\n\nstatic class Pos implements Comparable&amp;lt;Pos&amp;gt;{\n    int x, y;\n    long cost;\n    public Pos(int x, int y, long cost) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.cost = cost;\n    }\n    @Override\n    public int compareTo(Pos o) {\n        // TODO Auto-generated method stub\n        return Long.compare(cost, o.cost );\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;I think your Dijkstra implementation is not correct:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for frontier.Len() &amp;gt; 0 {\n    element := heap.Pop(&amp;amp;frontier).(*Item)\n    vertex, cost := element.value, element.priority\n    //You didn't check for visited vertex here!\n    visited[vertex] = true\n    neighbors := graph[vertex]\n    for vertex_new, cost_new := range(neighbors){\n        if !visited[vertex_new]{//You can add same vertex multiple times here!\n            if vertex_new == end{\n                return cost + cost_new\n            }\n            heap.Push(&amp;amp;frontier, &amp;amp;Item{\n                value: vertex_new,\n                priority: cost + cost_new,\n            })\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In your implementation, you only update &lt;code&gt;visited&lt;/code&gt; when the vertex pop out of the heap, thus, one vertex can be added and processed multiple time, so, it will significantly increase your time complexity.&lt;/p&gt;\n\n&lt;p&gt;To fix&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for frontier.Len() &amp;gt; 0 {\n    element := heap.Pop(&amp;amp;frontier).(*Item)\n    vertex, cost := element.value, element.priority\n    if !visited[vertex]{\n        visited[vertex] = true\n        neighbors := graph[vertex]\n        for vertex_new, cost_new := range(neighbors){\n            if !visited[vertex_new]{\n                if vertex_new == end{\n                   return cost + cost_new\n                }\n                heap.Push(&amp;amp;frontier, &amp;amp;Item{\n                   value: vertex_new,\n                   priority: cost + cost_new,\n                })\n            }\n        }   \n    }\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["在矩阵中找到最短路径总和。  Dijkstra是否不适用于这种情况？", ["\n\n", "I am trying to solve ", "the following problem from project euler", " (please take a look at description and the example in the link, but here is the short explanation).", "\n\n", "\n  ", "in the matrix, find the  minimal path sum from the top left to the bottom right, by moving left, right, up, and down", "\n", "\n\n", "Right after I looked at the problem, the obvious solution which came to mind is to create a graph from the matrix and then use ", "Dijkstra", " to find the shortest path.", "\n\n", "To construct a graph from a ", "N*M", " matrix, for every ", "(i, j)", " element I create a vertex ", "i * N + j", " and connect it to any other vertex (to which it is possible to connect with UP, RIGHT, DOWN, LEFT) and the edge will be the value of the element I am connecting to in the matrix. After that I create 2 other vertices ", "-1", " connected to vertex ", "0", " and ", "-2", " connected to ", "N*M - 1", " which will be my start and end vertices (both connection have 0 cost).", "\n\n", "After this I am doing Dijkstra to find shortest path cost from ", "-1", " to ", "-2", ". My Dijkstra implementation uses priority queue and looks this way:", "\n\n", "func dijkstraCost(graph map[int]map[int]int, start, end int) int{\n    if start == end{\n        return 0\n    }\n    frontier := make(PriorityQueue, 1)\n    frontier[0] = &Item{value: start, priority: 0, index: 0}\n    visited := map[int]bool{}\n    heap.Init(&frontier)\n\n    for frontier.Len() > 0 {\n        element := heap.Pop(&frontier).(*Item)\n        vertex, cost := element.value, element.priority\n        visited[vertex] = true\n        neighbors := graph[vertex]\n        for vertex_new, cost_new := range(neighbors){\n            if !visited[vertex_new]{\n                if vertex_new == end{\n                    return cost + cost_new\n                }\n                heap.Push(&frontier, &Item{\n                    value: vertex_new,\n                    priority: cost + cost_new,\n                })\n            }\n        }\n    }\n    return -1\n}\n", "\n\n", "where Priority Queue implementation is taken from heap container (example PriorityQueue) with one minor modification:", "\n\n", "func (pq PriorityQueue) Less(i, j int) bool {\n    return pq[i].priority > pq[j].priority // changed to <\n}\n", "\n\n", "The graph that I am providing to the function looks like:", "\n\n", "map[13:map[8:965 18:121 12:746 14:111] 16:map[11:803 21:732 15:537 17:497] 3:map[8:965 2:234 4:18] 4:map[9:150 3:103] 22:map[17:497 21:732 23:37] -1:map[0:131] 17:map[16:699 18:121 12:746 22:524] 1:map[6:96 0:131 2:234] 9:map[4:18 14:111 8:965] 11:map[6:96 16:699 10:630 12:746] 19:map[14:111 24:331 18:121] 24:map[23:37 -2:0 19:956] 2:map[3:103 7:342 1:673] 15:map[10:630 20:805 16:699] 18:map[13:422 23:37 17:497 19:956] 10:map[5:201 15:537 11:803] 14:map[19:956 13:422 9:150] 0:map[5:201 1:673] 6:map[5:201 7:342 1:673 11:803] 8:map[9:150 3:103 13:422 7:342] -2:map[] 12:map[7:342 17:497 11:803 13:422] 20:map[15:537 21:732] 21:map[16:699 20:805 22:524] 5:map[0:131 10:630 6:96] 23:map[18:121 22:524 24:331] 7:map[2:234 12:746 6:96 8:965]]\n", "\n\n", "\n", "This works correctly but the problem is that it is considered inefficient (judging by ", "Hackerrank version of the problem", "). It should run find the value of the best solution for ", "700x700", " matrix in less than 4 seconds, whereas my solution takes 10 seconds.", "\n\n", "I thought that I am doing something wrong in go, so I reimplemented the same solution in python (where it took approximately 70 seconds for 700x700 matrix)", "\n\n", "\n", "My question is:", " Am I using the right approach to find the best solution in a matrix. If so what am I doing wrong with my implementation?", "\n\n", "P.S. I have full go and python solution, just thought that even without them the question is too long.", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;ryn 安装和python代码都是python2版本的&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["看到您一篇关于ryu最短路径转发的文章，想咨询您一点问题", ["在Ubuntu执行自定义的ryu控制器脚本时出现的问题", "wjc@wjc-virtual-machine:~/ryu/ryu/app$ ryu-manager example_shortestForwarding.py --observe-links", "Traceback (most recent call last):", "  File \"/home/wjc/.local/bin/ryu-manager\", line 5, in ", "    from ryu.cmd.manager import main", "  File \"/home/wjc/.local/lib/python2.7/site-packages/ryu/cmd/manager.py\", line 33, in ", "    from ryu.app import wsgi", "  File \"/home/wjc/.local/lib/python2.7/site-packages/ryu/app/wsgi.py\", line 23, in ", "    from tinyrpc.server import RPCServer", "  File \"/home/wjc/.local/lib/python2.7/site-packages/tinyrpc/", "init", ".py\", line 4, in ", "    from .protocols import *", "  File \"/home/wjc/.local/lib/python2.7/site-packages/tinyrpc/protocols/", "init", ".py\", line 15", "    def ", "init", "(self) -> None:", "                       ^", "SyntaxError: invalid syntax", "\n", "不知道这个问题应该如何解决"]], "Tag": "算法设计"}
{"Answer": "我这里以计算x轴方向最小距离举例，设要求的最小距离为dmin\r\n1.以小圆的圆心为坐标原点建立XOY坐标系\r\n2.则小圆的方程为： pow(x,2)+pow(y,2)=pow(r,2) 其中r为小圆的半径，也就是说r是常数\r\n3.则大圆的方程为： pow(x-a,2)+pow(y-b,2)=pow(R,2) 其中R为大圆的半径,（a,b）为大圆的圆心，所以a，b，R也都是常数\r\n4.设y=y0与小圆相交与点A，B（设其中A在B左边）,与大圆相较于C，D两点（设C在D左边），则两圆在x轴方向上的距离则为A点横坐标与C点横坐标之差的绝对值（其中因为直线要与两圆都相交，所以y0的取值范围为[-r,r]）\r\n5.将y=y0带入小圆方程，则可以得到A点横坐标为：- sqrt（pow(r,2)-pow(y0,2)）,C点横坐标为 - sqrt(pow(R,2)-pow(y0-b,2)) + a\r\n6.则两圆x轴方向上的距离有关y0的方程为 dmin=f(y0)= - sqrt（pow(r,2)-pow(y0,2)）- （- sqrt(pow(R,2)-pow(y0-b,2)) + a）\r\n7.对f(y0)求导,得到f(y0)的导函数设为g(y0)\r\n8.令g(y0)=0，取得f(y0)的极值点，并且根据极值点获得f(y0)的单调性\r\n9.根据f(y0)的单调性取得函数的最小值\r\n\r\n备注：因为常数太多我这里就不替你计算了，自己计算导函数以及获得函数的单调性并且根据单调性取得最小值即可", "Konwledge_Point": "负权边的最短路径", "Question": ["两个圆弧在坐标轴方向上的最短距离怎么求？", ["\n\n", "如上图两个圆，它们在Y轴或者X轴方向上的最短距离怎么算？", "\n最好有方便编程实现的方法"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/xiaohang3414/article/details/73321625", "Konwledge_Point": "负权边的最短路径", "Question": ["最短路径搜索，除了暴搜以外，采用C语言的还有更优化的办法怎么做呢？", ["Problem Description", "\nThe discovery of anti-gravitations technology changed the world. The invention of anti-gravitation shoes (Grav-shoes) enables people to fly in the sky freely. This led to the rise of a new sky sport: ``Flying Circus\".", "\n\n", "Utilizing Grav-shoes and personal flying suits, competitors battle it out in a special field, where they compete scoring obtain m points within a certain time limit. The field is a square with edge length 300 meters. Moreover, there are four buoys floating at each corner of the square. Four buoys are numbered as 1,2,3,4 in clockwise order.", "\n\n", "Two players start at buoy #1. When game begin, they will try to touch four floating buoys in clockwise order.", "\n(Since buoy #1 is the start point, the first buoy they need to touch will be buoy #2, and after that, they need to touch buoy #3,#4,#1 in order) Note that they could fly freely in the field, even fly inside the square field.", "\n\n", "Under two situations the player could score one point.", "\n\n", "⋅1. If you touch a buoy before your opponent, you will get one point. For example if your opponent touch the buoy #2 before you after start, he will score one point. So when you touch the buoy #2, you won't get any point. Meanwhile, you cannot touch buoy #3 or any other buoys before touching the buoy #2.", "\n\n", "⋅2. Ignoring the buoys and relying on dogfighting to get point. If you and your opponent meet in the same position, you can try to fight with your opponent to score one point. For the proposal of game balance, two players are not allowed to fight before buoy #2 is touched by anybody.", "\n\n", "There are three types of players.", "\n\n", "Speeder: As a player specializing in high speed movement, he/she tries to avoid dogfighting while attempting to gain points by touching buoys.", "\nFighter: As a player specializing in dogfighting, he/she always tries to fight with the opponent to score points. Since a fighter is slower than a speeder, it's difficult for him/her to score points by touching buoys when the opponent is a speeder.", "\nAll-Rounder: A balanced player between Fighter and Speeder.", "\n\n", "There will be a training match between Asuka (All-Rounder) and Shion (Speeder).", "\nSince the match is only a training match, the rules are simplified: the game will end after the buoy #1 is touched by anybody. Shion is a speed lover, and his strategy is very simple: touch buoy #2,#3,#4,#1 along the shortest path.", "\n\n", "Asuka is good at dogfighting, so she will always score one point by dogfighting with Shion, and the opponent will be stunned for T seconds after dogfighting. Since Asuka is slower than Shion, she decides to fight with Shion for only one time during the match. It is also assumed that if Asuka and Shion touch the buoy in the same time, the point will be given to Asuka and Asuka could also fight with Shion at the buoy. We assume that in such scenario, the dogfighting must happen after the buoy is touched by Asuka or Shion.", "\n\n", "The speed of Asuka is V1 m/s. The speed of Shion is V2 m/s. Is there any possibility for Asuka to win the match (to have higher score)?", "\n\n", "Input", "\nThe first line contains an integer t (0<t≤1000), followed by t lines.", "\nEach line contains three double T, V1 and V2 (0≤V1≤V2≤2000,0≤T≤2000) with no more than two decimal places, stands for one case.", "\n\n", "Output", "\nIf there exist any strategy for Asuka to win the match, output ", "Yes\", otherwise, output", "No\".", "\n\n", "Sample Input", "\n2", "\n1 10 13", "\n100 10 13", "\n\n", "Sample Output", "\nCase #1: No", "\nCase #2: Yes"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/u012969412/article/details/44818029", "Konwledge_Point": "负权边的最短路径", "Question": ["希望大神解答一下，这道题用bfs+优先队列为什么不对，只能用最短路径来写", ["Bessie and the rest of Farmer John's cows are taking a trip this winter to go skiing. One day Bessie finds herself at the top left corner of an R (1 <= R <= 100) by C (1 <= C <= 100) grid of elevations E (-25 <= E <= 25). In order to join FJ and the other cows at a discow party, she must get down to the bottom right corner as quickly as she can by travelling only north, south, east, and west.\n\nBessie starts out travelling at a initial speed V (1 <= V <= 1,000,000). She has discovered a remarkable relationship between her speed and her elevation change. When Bessie moves from a location of height A to an adjacent location of eight B, her speed is multiplied by the number 2^(A-B). The time it takes Bessie to travel from a location to an adjacent location is the reciprocal of her speed when she is at the first location.\n\nFind the both smallest amount of time it will take Bessie to join her cow friends.\n", "\n\n", "Input", "\n    * Line 1: Three space-separated integers: V, R, and C, which respectively represent Bessie's initial velocity and the number of rows and columns in the grid.", "\n\n", "* Lines 2..R+1: C integers representing the elevation E of the corresponding location on the grid. \n", "\n\n", "Output", "\n    A single number value, printed to two exactly decimal places: the minimum amount of time that Bessie can take to reach the bottom right corner of the grid. ", "\nSample Input", "\n\n", "1 3 3\n1 5 3\n6 3 5\n2 4 3\n", "\n\n", "Sample Output", "\n\n", "29.00\n", "\n\n", "Hint", "\n    Bessie's best route is:", "\n    Start at 1,1 time 0 speed 1", "\n    East to 1,2 time 1 speed 1/16", "\n    South to 2,2 time 17 speed 1/4", "\n    South to 3,2 time 21 speed 1/8", "\n    East to 3,3 time 29 speed 1/4 "]], "Tag": "算法设计"}
{"Answer": "\"carbohydrate\" 能被缩略成\"carboh\", 但是不能被缩略成\"carbo\" (或其余更短的前缀) 因为已经有一个单词用\"carbo\"开始\r\n\r\n如果是这样的话，那就得建立英语单词库了。。不然的话那就不知道如何去缩写了！！", "Konwledge_Point": "负权边的最短路径", "Question": ["最短前缀                             ", ["描述", "\n一个字符串的前缀是从该字符串的第一个字符起始的一个子串。例如 \"carbon\"的字串是: \"c\", \"ca\", \"car\", \"carb\", \"carbo\", 和 \"carbon\"。注意到这里我们不认为空串是字串, 但是每个非空串是它自身的字串. 我们现在希望能用前缀来缩略的表示单词。例如, \"carbohydrate\" 通常用\"carb\"来缩略表示. 现在给你一组单词, 要求你找到唯一标识每个单词的最短前缀", "\n在下面的例子中，\"carbohydrate\" 能被缩略成\"carboh\", 但是不能被缩略成\"carbo\" (或其余更短的前缀) 因为已经有一个单词用\"carbo\"开始", "\n一个精确匹配会覆盖一个前缀匹配，例如，前缀\"car\"精确匹配单词\"car\". 因此 \"car\" 是 \"car\"的缩略语是没有二义性的 , “car”不会被当成\"carriage\"或者任何在列表中以\"car\"开始的单词.", "\n输入", "\n输入包括至少2行，至多1000行. 每行包括一个以小写字母组成的单词，单词长度至少是1，至多是20.", "\n输出", "\n输出的行数与输入的行数相同。每行输出由相应行输入的单词开始，后面跟着一个空格接下来是相应单词的没有二义性的最短前缀标识符。", "\n样例输入", "\ncarbohydrate", "\ncart", "\ncarburetor", "\ncaramel", "\ncaribou", "\ncarbonic", "\ncartilage", "\ncarbon", "\ncarriage", "\ncarton", "\ncar", "\ncarbonate", "\n样例输出", "\ncarbohydrate carboh", "\ncart cart", "\ncarburetor carbu", "\ncaramel cara", "\ncaribou cari", "\ncarbonic carboni", "\ncartilage carti", "\ncarbon carbon", "\ncarriage carr", "\ncarton carto", "\ncar car", "\ncarbonate carbona"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You can use the base_convert function for what you want, but note that a hash is something else entirely.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["什么是最短的哈希/", ["\n\n", "Is there any hashing method for php to hash (just integer to string) in shortest lenght?", "\n\n", "for example ", "\n\n", "input : ", "10565", " \noutput : ", "rwk4", "\n\n", "input : ", "40853353246", "\noutput : ", "orhg0ut04h", "\n\n", "if there is not hashing like this", "\n\n", "Is there any way(function) to do it?", "\n    "]], "Tag": "算法设计"}
{"Answer": "参考：http://zhidao.baidu.com/link?url=z6bWEi7X6DVMTYXYi-nAxUD26klYLPcH2_n5XQNzL6rID2MlmPa-7Ws5AOaNqscHxrTnrP6jxntvthty7DrvKUh994JhsIndxHKtdq2FW0u", "Konwledge_Point": "负权边的最短路径", "Question": ["求最短哈密尔顿回路怎么实现？", ["求最短哈密尔顿回路怎么实现？", "\n是不是要用到动态规划算法？有没有人能用Java或者C++解释下？"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;When you adjust the new path distance here&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;   if D[edge.Destination] &amp;gt; D[edge.Source]+edge.Weight {\n      D[edge.Destination] = D[edge.Source] + edge.Weight\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Set some array element (say, &lt;code&gt;P&lt;/code&gt; for \"parent\") to point that you have come to &lt;code&gt;Destination&lt;/code&gt; from &lt;code&gt;Source&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;P[edge.Destination] = edge.Source\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After the algorithm ends, in this array each vertex will have its predecessor on the path leading from the starting vertex.&lt;/p&gt;\n\n&lt;p&gt;PS. OK, not with arrays and indices ...&lt;/p&gt;\n\n&lt;p&gt;Add a new field &lt;code&gt;Prev&lt;/code&gt; to the Vertex:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Vertex struct {\n    Id      string\n    Visited bool\n    AdjEdge []*Edge\n    Prev *Vertex\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When adjusting distance:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if D[edge.Destination] &amp;gt; D[edge.Source]+edge.Weight {\n    D[edge.Destination] = D[edge.Source] + edge.Weight\n    edge.Destination.Prev = edge.Source\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And when you display the results:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for vertex1, distance1 := range distmap1 {\n    fmt.Println(vertex1.Id, \"=\", distance1)\n    if vertex1.Prev != nil {\n        fmt.Println (vertex1.Id, \" -&amp;gt; \", vertex1.Prev.Id)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["开始，Dijkstra：打印出路径，而不仅仅是计算最短距离", ["\n\n", "Go, Dijkstra : print out the path, not just calculate the shortest distance.", "\n\n", "http://play.golang.org/p/A2jnzKcbWD", "\n\n", "I was able to find the shortest distance using Dijkstra algorithm, maybe not.\nThe code can be found here.", "\n\n", "But it would be useless if I can't print out the path.\nWith a lot of pointers going on, I can't figure out how to print out the final path that takes the least amount of weights.", "\n\n", "In short, how do I not only find the shortest distance, but also print out the shortest path on this given code?", "\n\n", "The link is here: ", "\n\n", "http://play.golang.org/p/A2jnzKcbWD", "\n\n", "And the snippet of the code is below:", "\n\n", "const MAXWEIGHT = 1000000\n\ntype MinDistanceFromSource map[*Vertex]int\n\nfunc (G *Graph) Dijks(StartSource, TargetSource *Vertex) MinDistanceFromSource {\n  D := make(MinDistanceFromSource)\n  for _, vertex := range G.VertexArray {\n    D[vertex] = MAXWEIGHT\n  }\n  D[StartSource] = 0\n\n  for edge := range StartSource.GetAdEdg() {\n    D[edge.Destination] = edge.Weight\n  }\n  CalculateD(StartSource, TargetSource, D)\n  return D\n}\n\nfunc CalculateD(StartSource, TargetSource *Vertex, D MinDistanceFromSource) {\n  for edge := range StartSource.GetAdEdg() {\n    if D[edge.Destination] > D[edge.Source]+edge.Weight {\n      D[edge.Destination] = D[edge.Source] + edge.Weight\n    } else if D[edge.Destination] < D[edge.Source]+edge.Weight {\n      continue\n    }\n    CalculateD(edge.Destination, TargetSource, D)\n  }\n}\n", "\n\n", "I did something with array to see what is being updated.", "\n\n", "http://play.golang.org/p/bRXYjnIGxy", "\n\n", "This gives ms", "\n\n", "   [A->D D->E E->F F->T B->E E->D E->F F->T]\n", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;h1&gt;Default PHP way&lt;/h1&gt;\n\n&lt;p&gt;What &lt;code&gt;http_build_query&lt;/code&gt; does is a common way to serialize arrays to URL. PHP automatically deserializes it in &lt;code&gt;$_GET&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;When wanting to serialize just a (non-associative) array of integers, you have other options.&lt;/p&gt;\n\n&lt;h1&gt;Small arrays&lt;/h1&gt;\n\n&lt;p&gt;For small arrays, conversion to underscore-separated list is quite convenient and efficient. It is done by &lt;code&gt;$fs = implode('_', $fs)&lt;/code&gt;. Then your URL would look like this:&lt;/p&gt;\n\n&lt;pre class=\"lang-none prettyprint-override\"&gt;&lt;code&gt;http://example.com/?c=asdf&amp;amp;fs=5_12_99\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The downside is that you’ll have to explicitly &lt;code&gt;explode('_', $_GET['fs'])&lt;/code&gt; to get the values back as an array.&lt;/p&gt;\n\n&lt;p&gt;Other delimiters may be used too. Underscore is considered alphanumeric and as such rarely has special meaning. In URLs, it is usually used as space replacement (e.g. by MediaWiki). It is hard to distinguish when used in underlined text. Hyphen is another common replacement for space. It is also often used as minus sign. Comma is a typical list separator, but unlike underscore and hyphen in is percent-encoded by &lt;code&gt;http_build_query&lt;/code&gt; and has special meaning almost everywhere. Similar situation is with vertical bar (“pipe”).&lt;/p&gt;\n\n&lt;h1&gt;Large arrays&lt;/h1&gt;\n\n&lt;p&gt;When having large arrays in URLs, you should first stop coding a start thinking. This almost always indicates bad design. Wouldn’t POST HTTP method be more appropriate? Don’t you have any more readable and space efficient way of identifying the addressed resource?&lt;/p&gt;\n\n&lt;p&gt;URLs should ideally be easy to understand and (at least partially) remember. Placing a large blob inside is really a bad idea.&lt;/p&gt;\n\n&lt;p&gt;Now I warned you. If you still need to embed a large array in URL, go ahead. Compress the data as much as you can, &lt;a href=\"https://en.wikipedia.org/wiki/Base64\" rel=\"nofollow\"&gt;base64&lt;/a&gt;-encode them to convert the binary blob to text and &lt;a href=\"https://en.wikipedia.org/wiki/Percent-encoding\" rel=\"nofollow\"&gt;url-encode&lt;/a&gt; the text to sanitize it for embedding in URL.&lt;/p&gt;\n\n&lt;h2&gt;Modified base64&lt;/h2&gt;\n\n&lt;p&gt;Mmm. Or better use a &lt;a href=\"https://en.wikipedia.org/wiki/Base64#URL_applications\" rel=\"nofollow\"&gt;modified version of base64&lt;/a&gt;. The one of my choice is using&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;-&lt;/code&gt; instead of &lt;code&gt;+&lt;/code&gt;,&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;_&lt;/code&gt; instead of &lt;code&gt;/&lt;/code&gt; and&lt;/li&gt;\n&lt;li&gt;omits the padding &lt;code&gt;=&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\n&lt;pre&gt;&lt;code&gt;define('URL_BASE64_FROM', '+/');\ndefine('URL_BASE64_TO', '-_');\nfunction url_base64_encode($data) {\n    $encoded = base64_encode($data);\n    if ($encoded === false) {\n        return false;\n    }\n    return str_replace('=', '', strtr($encoded, URL_BASE64_FROM, URL_BASE64_TO));\n}\nfunction url_base64_decode($data) {\n    $len = strlen($data);\n    if (is_null($len)) {\n        return false;\n    }\n    $padded = str_pad($data, 4 - $len % 4, '=', STR_PAD_RIGHT);\n    return base64_decode(strtr($padded, URL_BASE64_TO, URL_BASE64_FROM));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This saves two bytes on each character, that would be percent-encoded otherwise. There is no need to call &lt;code&gt;urlencode&lt;/code&gt; function, too.&lt;/p&gt;\n\n&lt;h2&gt;Compression&lt;/h2&gt;\n\n&lt;p&gt;Choice between gzip (&lt;a href=\"http://php.net/manual/en/function.gzcompress.php\" rel=\"nofollow\"&gt;&lt;code&gt;gzcompress&lt;/code&gt;&lt;/a&gt;) and bzip2 (&lt;a href=\"http://php.net/manual/en/function.bzcompress.php\" rel=\"nofollow\"&gt;&lt;code&gt;bzcompress&lt;/code&gt;&lt;/a&gt;) should be made. Do not want to invest time in their comparison, gzip looks better on several relatively small inputs (around 100 chars) for any setting of block size.&lt;/p&gt;\n\n&lt;h2&gt;Packing&lt;/h2&gt;\n\n&lt;p&gt;But what data should be fed into the compression algorithm?&lt;/p&gt;\n\n&lt;p&gt;In C, one would cast array of integers to array of chars (bytes) and hand it over to the compression function. That’s the most obvious way to do things. In PHP the most obvious way to do things is converting all the integers to their decimal representation as strings, then concatenation using delimiters, and only after that compression. What a waste of space!&lt;/p&gt;\n\n&lt;p&gt;So, let’s use the C approach! We’ll get rid of the delimiters and otherwise wasted space and encode each integer in 2 bytes using &lt;a href=\"http://php.net/manual/en/function.pack.php\" rel=\"nofollow\"&gt;&lt;code&gt;pack&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;define('PACK_NUMS_FORMAT', 'n*');\nfunction pack_nums($num_arr) {\n    array_unshift($num_arr, PACK_NUMS_FORMAT);\n    return call_user_func_array('pack', $num_arr);\n}\nfunction unpack_nums($packed_arr) {\n    return unpack(PACK_NUMS_FORMAT, $packed_arr);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Warning: &lt;code&gt;pack&lt;/code&gt; and &lt;code&gt;unpack&lt;/code&gt; behavior is machine-dependent in this case. Byte order could change between machines. But I think it will not be a problem in practice, because the application will not run on two systems with different endianity at the same time. When integrating multiple systems, though, the problem might arise. Also if you switch to a system with different endianity, links using the original one will break.&lt;/p&gt;\n\n&lt;h2&gt;Encoding together&lt;/h2&gt;\n\n&lt;p&gt;Now packing, compression and modified base64, all in one:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function url_embed_array($arr) {\n    return url_base64_encode(gzcompress(pack_nums($arr)));\n}\nfunction url_parse_array($data) {\n    return unpack_nums(gzuncompress(url_base64_decode($data)));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See the &lt;a href=\"http://ideone.com/7cesoN\" rel=\"nofollow\"&gt;result on IdeOne&lt;/a&gt;. It is better than OP’s answer where on his 40-element array my solution produced 91 chars while his one 98. When using &lt;code&gt;range(1, 1000)&lt;/code&gt; (generates &lt;code&gt;array(1, 2, 3, …, 1000)&lt;/code&gt;) as a benchmark, &lt;a href=\"http://ideone.com/FxphIa\" rel=\"nofollow\"&gt;OP’s solution produces 2712 characters while mine just 2032 characters&lt;/a&gt;. This is about 25 % better.&lt;/p&gt;\n\n&lt;p&gt;For the sake of completeness, OP’s solution is&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function url_embed_array($arr) {\n    return urlencode(base64_encode(gzcompress(implode(',', $arr))));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["PHP中数字索引数组的最短可能查询字符串", ["\n\n", "I’m looking for the most concise URL rather than the shortest PHP code. I don’t want my users to be scared by the hideous URLs that PHP creates when encoding arrays.", "\n\n", "PHP will do a lot of repetition in query string if you just stuff an array (", "$fn", ") through ", "http_build_query", ":", "\n\n", "$fs = array(5, 12, 99);\n$url = \"http://$_SERVER[HTTP_HOST]/?\" .\n    http_build_query(array('c' => 'asdf', 'fs' => $fs));\n", "\n\n", "The resulting ", "$url", " is", "\n\n", "http://example.com/?c=asdf&fs[0]=5&fs[1]=12&fs[3]=99\n", "\n\n", "How do I get it down to a minimum (using PHP or methods easily implemented in PHP)?", "\n    "]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/ecttx/article/details/8372486参考一下这个", "Konwledge_Point": "负权边的最短路径", "Question": ["请帮帮忙，有N个点，保证连线是最短的。或者使用循环嵌套，但是需要进行N个嵌套，递归不知道怎么写", ["C#问题，请帮帮忙，有N个点，我需要将其排序，保证连线是最短的。或者使用循环嵌套，但是需要进行N个嵌套，递归不知道怎么写，求大神，新手一枚，没啥分，帮帮忙！"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Your way of doing it is fine. You could use the ternary &lt;code&gt;?&lt;/code&gt; operator to create a shorter if statement though:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;return (count($a)&amp;lt;count($b)) ? $a : $b;\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["返回具有较少元素的数组的最短方法", ["\n\n", "I have two arrays.  I wish to return the array containing fewer elements.", "\n\n", "My code so far:", "\n\n", "<?php\n\nif ( count($a) < count($b) )\n    return $a;\nelse\n    return $b;\n", "\n\n", "Thanks in Advance.", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的程序一直停在了&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    while(scanf(&amp;#34;%s&amp;#34;,s[count])!&amp;#61;EOF)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        count&amp;#43;&amp;#43;;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;所以没看到输出&amp;#xff0c;你可以在while循环后面加一行打印&amp;#xff0c;就会发现问题了&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["为什么这个代码没有输出啊，oj中的最短前缀问题", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "#include<stdio.h>", "#include<string.h>", "int main()", "{", "    char s[1001][21];", "    char re[1001][21];", "    int i,j,k,l,count=0;", "    while(scanf(\"%s\",s[count])!=EOF)", "    {", "        count++;", "    }", "    for(i=0;i<count;i++)", "    {", "        int len=strlen(s[count]);", "        for(j=0;j<len;j++)", "        {", "            re[i][j]=s[i][j];", "            for(k=1;k<count;++k)", "            {", "                for(l=0;l<j;++l)", "                {", "                    if(re[i][l]!=s[k][l])", "                        break;", "                }", "                if(l==j)", "                    break;", "            }", "            if(k==count)", "                break;", "        }", "    }", "    for(i=0;i<count;i++)", "    {", "        printf(\"%s \",s[count]);", "        printf(\"%s\\n\",re[count]);", "    }", "    return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "下面用python的set的union方法实现的（这里安装了boltons，如果直接用set，会自动排序），输出[1, 3, 4, 2, 5]\r\n\r\n```\r\nfrom boltons.setutils import IndexedSet\r\n\r\na=[1,3,4]\r\nb=[3,2,5]\r\nc=[1,3,5]\r\n\r\nresult = IndexedSet(a).union(IndexedSet(b)).union(IndexedSet(c))\r\n\r\nprint(result)\r\n\r\n```\r\nhttps://stackoverflow.com/questions/1653970/does-python-have-an-ordered-set\r\n\r\n你研究下union方法\r\n\r\nc#实现如下：\r\n\r\n```\r\nint[] a = { 1, 3, 4 };\r\nint[] b = { 3, 2, 5 };\r\nint[] c = { 1, 3, 5 };\r\n\r\nvar result = a.Union(b).Union(c);\r\n\r\nforeach(var item in result)\r\n{\r\n    Console.WriteLine(item);\r\n}            \r\n```\r\n其Union的源码地址：https://github.com/dotnet/runtime/blob/master/src/libraries/System.Linq/src/System/Linq/Union.cs", "Konwledge_Point": "负权边的最短路径", "Question": ["怎么把多个有序的数组合并成一个数组，并且保证数组最短，同时保证合并后的数组还能保持各个数组的顺序？", ["例如：", "\n数组1：[1,3,4]", "\n数组2：[3,2,5]", "\n数组3：[1,3,5]", "\n\n", "合并后的最短数组 :[1,3,2,4,5] 或者 [1,3,4,2,5] 或者 [1,3,2,5,4],求出其中", "\n一种情况就行。这个数组能够同时满足原来三个数组的元素排列顺序。", "\n求大佬指点算法，什么语言都行"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;you may try &lt;code&gt;LENGTH()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; select product_name ,length(product_name) as the_length from your_table \n where product_name LIKE '%dead space%'\n ORDER BY  length(product_name)\n limit 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"http://sqlfiddle.com/#!2/45fd7/5\" rel=\"nofollow\"&gt;&lt;strong&gt;DEMO HERE&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["我可以用GROUP BY（MySql）选择最短的字段名称吗？", ["\n\n", "Let's say, I have 2 product names: dead space and dead space limited edition, and I want to group them by \"product_name\" to select \"dead space\" in a mysql query. So I want the query to select the \"product_name\" with the shortest string if the where caluse is \"product_name LIKE '%dead space%'\".", "\n\n", "Thanks a lot,", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You could just do the math on the database side, order your result set by distance and select the one with the lowest value.&lt;/p&gt;\n\n&lt;p&gt;And I took the liberty of updating your database access methods. Don't, under any circumstances, use &lt;code&gt;mysql_*&lt;/code&gt; functions.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$lat1 = 123.245;\n$lon1 = 48.123;\n\n$dbhost = \"localhost\";\n$dbname = \"database\";\n$username = \"user\";\n$password = \"pass\";\n\n$db = new PDO(\"mysql:host=$dbhost;dbname=$dbname\", $username, $password);\n\n$query = \"SELECT *, DEGREES(ACOS(SIN(RADIANS(?)) * SIN(RADIANS(`lat`)) +  COS(RADIANS(?)) * COS(RADIANS(`lat`)) * COS(RADIANS(? - `lon`)))) * 60 * 1.1515 AS distance\n    FROM store\n    ORDER BY distance ASC\n    LIMIT 1\";\n$stmt = $db-&amp;gt;prepare($query);\n$stmt-&amp;gt;execute(array($lat1, $lat1, $lon1));\n$result = $stmt-&amp;gt;fetch(PDO::FETCH_ASSOC);\nprint_r($result);\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["找到2个坐标与存储在表格中的1个集合之间的最短距离", ["\n\n", "I have a MySQL table with the following attributes:\nstore_name\nlat\nlon", "\n\n", "I have 1500 records.", "\n\n", "I need to find the closest store to the user (based on IP).", "\n\n", "I have figured the IP translation part using a 3rd party API. I know how to calculate the distance between 2 coordinates. However, I don't know how to return the store name that is the closest.", "\n\n", "My function to calculate distance", "\n\n", "function distance($lat1, $lon1, $lat2, $lon2) \n{\n$minus = $lon1 - $lon2;\n$dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1))*cos(deg2rad($lat2)) * cos(deg2rad($minus));\n$dist = acos($dist);\n$dist = rad2deg($dist);\n$miles = $dist * 60 * 1.1515;\nreturn $miles;\n}\n", "\n\n", "I can find the distance between user and each store.", "\n\n", "Note: $lat1 and $lat1 are obtained by a 3rd party API service.", "\n\n", "$store = mysql_query(\"SELECT * FROM store\") or die(mysql_error());\nwhile($row=mysql_fetch_assoc($store))\n{\n$lat2 = $row[\"lat\"];\n$lon2 = $row[\"lon\"];\n$distance = distance($lat1, $lon1, $lat2,$lon2);\n}\n", "\n\n", "How do I calculate run the distance function and store the distance value in an array and then sort the distances to find the nearest store? Is this the correct methodology? And how do I proceed with the array code? I have no experience with arrays in PHP.", "\n\n", "Thank you.", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Match and capture key-value pairs and then combine into an array:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$re = '/(\\w+)\\s*=\\s*([^;]*)/';\n$str = 'FIRM_ID = MC0356400000; TAG = EQTV; CURR_CODE = SUR; CLIENT_CODE = FR334; LIMIT_KIND = 1; OPEN_BALANCE = 4822.84; OPEN_LIMIT = 0.00; LEVERAGE = 0;';\npreg_match_all($re, $str, $matches);\nprint_r(array_combine($matches[1],$matches[2]));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See the &lt;a href=\"http://ideone.com/egrziC\" rel=\"nofollow noreferrer\"&gt;PHP demo&lt;/a&gt;, result:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Array\n(\n    [FIRM_ID] =&amp;gt; MC0356400000\n    [TAG] =&amp;gt; EQTV\n    [CURR_CODE] =&amp;gt; SUR\n    [CLIENT_CODE] =&amp;gt; FR334\n    [LIMIT_KIND] =&amp;gt; 1\n    [OPEN_BALANCE] =&amp;gt; 4822.84\n    [OPEN_LIMIT] =&amp;gt; 0.00\n    [LEVERAGE] =&amp;gt; 0\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The regex is&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/(\\w+)\\s*=\\s*([^;]*)/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See is &lt;a href=\"https://regex101.com/r/xlOydu/1\" rel=\"nofollow noreferrer\"&gt;demo online&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;(\\w+)&lt;/code&gt; - Group 1: one or more word chars&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\\s*=\\s*&lt;/code&gt; - a &lt;code&gt;=&lt;/code&gt; enclosed with optional whitespace(s)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;([^;]*)&lt;/code&gt; - Group 2: zero or more chars other than &lt;code&gt;;&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;To \"initialize\" the variables each at a time, you may use a &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$var_name = 'FIRM_ID';\n$re = '/' . $var_name . '\\s*=\\s*\\K[^;]*/';\n$str = 'FIRM_ID = MC0356400000; TAG = EQTV; CURR_CODE = SUR; CLIENT_CODE = FR334; LIMIT_KIND = 1; OPEN_BALANCE = 4822.84; OPEN_LIMIT = 0.00; LEVERAGE = 0;';\npreg_match($re, $str, $m);\nprint_r($m);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See the &lt;a href=\"http://ideone.com/5lqLNl\" rel=\"nofollow noreferrer\"&gt;PHP demo&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;\\K&lt;/code&gt; is the match reset operator that omits all text matched so far within the current match iteration.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["使用正则表达式从字符串中获取匹配模式的最短方法", ["\n\n", "I have pretty long string to parse, that looks like that (part of it)", "\n\n", "$string = 'FIRM_ID = MC0356400000; TAG = EQTV; CURR_CODE = SUR; CLIENT_CODE = FR334; LIMIT_KIND = 1; OPEN_BALANCE = 4822.84; OPEN_LIMIT = 0.00; LEVERAGE = 0;'\n", "\n\n", "I need to get values for php variables from that string, which I do with preg_match:", "\n\n", " preg_match(\"/FIRM_ID = (.*?);/\", $string, $m);\n $firm_id = trim($m[1]);\n\n preg_match(\"/CLIENT_CODE = (.*?);/\", $string, $m);\n $client_code = trim($m[1]);\n", "\n\n", "... and so on", "\n\n", "I was wondering is there a way to do the same in one line? May be with preg_replace or other functions, so I would not have to declare $m variable first and then take out from that [1] element.", "\n\n", "So the code supposed to look like", "\n\n", " $firm_id = somefunction($string);\n $client_code = somefunction($string);\n", "\n\n", "Its not practical question, more theoretical. I know how to get result that I need, I want to know if there is a simpler and more elegant way.", "\n\n", "Thanks.", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;用int 和 unsigned long long比较&amp;#xff0c;当int 为负值&amp;#xff0c;会转换为最大的unsigned long long - n&amp;#xff0c;通常这是一个天文数字&amp;#xff0c;所以此时的 -1 在计算机里是2^64-1 ,这个数基本会大于程序中所有出现的数字&amp;#xff0c;无论你右侧的数有多大&amp;#xff0c;都小于这个数。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["KMP代码中的while循环部分出现问题", ["问题是在写KMP算法过程中出现的，但好像不是算法问题，先po出代码", "\n", "#include<iostream>", "\n", "#include<cstring>", "\nusing namespace std;\nvoid Match_KMP(string T,string P)\n{\n    ", "//", "先找子串的NEXT数组\n    int ", "next", "[P.length()];\n    ", "next", "[", "0", "] = -", "1", ";\n    ", "next", "[", "1", "] = ", "0", ";\n    int j = ", "1", ",k = ", "0", ",i;\n    ", "while", "(j < P.length()){\n        ", "if", "(P[k] == P[j] || k == -", "1", ")\n            ", "next", "[++j] = ++k;\n        ", "else", "{\n            k = ", "next", "[k];\n        }\n    }\n    ", "//", "开始查找\n    i = ", "0", "; j = ", "0", ";\n    ", "while", "(i < T.length() && j < P.length()){\n        ", "if", "(T[i] == P[i] || j == -", "1", "){\n            cout<<T[i]<<", "\" \"", "<<P[i];\n            i++;\n            j++;\n        }\n        ", "else", "{\n            j = ", "next", "[j]; \n            ", "//", "cout<<", "\"j此时的值为：\"", "<<j<<endl;\n            ", "//", "cout<<", "\"P.LEN此时的值为：\"", "<<P.length()<<endl;\n            ", "//", "cout<<(j < P.length());\n            ", "//", "cout<<endl<<(i < T.length());\n        }\n    }\n    ", "if", "(j < P.length())\n        cout<<", "0", "<<endl;\n    ", "else", "\n        cout<<endl<<i<<endl;\n}\nint main()\n{\n    cin>>father;\n    cin>>son;\n    Match_KMP(father,son);\n    return ", "0", ";\n}\n\n", "\n", "\n", "\n", "由于运行过程中用debug看，始终查找子串的while部分只进入了一次循环，所以在注释部分输出了一些结果，发现是第二个条件不", "\n", "符合，但我的疑问是-1 < 3为什么输出结果是0呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;If you have a fixed set of strings and you will only need to look those up then find a minimal perfect hash function. &lt;a href=\"http://en.wikipedia.org/wiki/Perfect_hash_function\" rel=\"nofollow\"&gt;http://en.wikipedia.org/wiki/Perfect_hash_function&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["字符串上的最小校验和", ["\n\n", "scratching my head over this.", "\n\n", "i have 350 strings average 90 chars long, all strings are unique.\nNow, i wanna generate a unique id for each string.", "\n\n", "i tried the sum of chars in the string wich gave two doubles, the returned sum\nis not unique enough. Anybody any idea how to approach this? I thought of hash(), is that the best solution?", "\n\n", "abcdef will return the same as abcdfe", "\n    "]], "Tag": "算法设计"}
{"Answer": "使用模数\r\n\r\n    count = (count + 1) % 7", "Konwledge_Point": "负权边的最短路径", "Question": ["循环计数器-最短算法 ", ["功能：每次按钮按下，就会生成一个整数，然后达到最大值再返回0。", "\n\n", "我想要最短的实现算法。", "\n\n", "比如像这样。从0到6，再从6到0。", "\n\n", "count ++;\ncount *= (count != 7);\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可能是min初始值太小了&amp;#xff0c;min&amp;#61;251;试试&amp;#xff1f;(不确定&amp;#xff09;&lt;/p&gt;\n&lt;p&gt;&amp;#xff08;string a&amp;#xff0c;完全可以改成char a[252]&amp;#61;{0};然后读取是cin.getline(a,250);len&amp;#61;strlen(a);或者不求len,算到a[i]&amp;#61;&amp;#61;0就是到最后了&amp;#xff1b;其他不变&amp;#xff09;&lt;br /&gt;&amp;#xff08;...&amp;amp;&amp;amp; a[i]!&amp;#61; &amp;#39;,&amp;#39; 好像没用&amp;#xff1f;题目提到输入只包含小写字母和空格&amp;#xff09;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["2444 - 最长最短单词", ["2444 - 最长最短单词", "题目描述", "输入一行长度不超过250位的字符串，其中只有小写字母和空格，小写字母组成单词，单词之间只用一个空格隔开，字符串的开始和结束都没有多余空格，输出长度最长的单词和最短的单词，若有多个单词符合要求，只要求输出从前往后数第一个满足要求的单词。", "\n", "输入", "输入文件只有一行字符串，由小写字母和空格组成。", "\n", "输出", "输出文件有两行，第一行为最长的单词，第二行为最短的单词。", "\n", "样例", "输入", "this is my book", "输出", "this", "is", "标签", "字符串", "\n", "#include<bits/stdc++.h>", "\nusing namespace std;\nint main() {\n    string a;\n    int i,len,", "l", "=0,max=0,min=101,x,y;\n    getline(cin,a);\n    ", "len", "=a.size();\n    a[len]=", "' '", ";\n    ", "for", "(", "i", "=0; i<=len; i++) {\n        ", "if", "(a[i]!=", "' '", "&&a[i]!=", "','", ") {\n            l++;\n        } ", "else", " ", "if", "(l>0) {\n            ", "if", "(l>max) {\n                ", "max", "=l;\n                ", "x", "=i-l;\n            }\n            ", "if", "(l<min) {\n                ", "min", "=l;\n                ", "y", "=i-l;\n            }\n            ", "l", "=0;\n        }\n    }\n    ", "for", "(", "i", "=x; i<max+x; i++)\n        cout<<a[i];\n    cout<<endl;\n    ", "for", "(", "i", "=y; i<min+y; i++)\n        cout<<a[i];\n    return 0;\n}\n", "\n", "测试点1： Accepted， 用时: 0 ms， 内存: 256 KB", "测试点2： Accepted， 用时: 0 ms， 内存: 256 KB", "测试点3： Accepted， 用时: 0 ms， 内存: 256 KB", "测试点4： Accepted， 用时: 0 ms， 内存: 256 KB", "测试点5： Accepted， 用时: 0 ms， 内存: 252 KB", "测试点6： Accepted， 用时: 0 ms， 内存: 252 KB", "测试点7： Wrong Answer， 用时: 0 ms， 内存: 256 KB", "各位朋友，帮我看一下这个代码哪里错了！"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;methods that read data into byte slices return the number of bytes read.  You should save that number and then use it to create your string.  &lt;code&gt;n&lt;/code&gt; being the number of bytes read, your code would look like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;s := string(byteArray[:n])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If for some reason you don't have &lt;code&gt;n&lt;/code&gt;, you could use the bytes package to find it, assuming your input doesn't have a null character in it.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;n := bytes.Index(byteArray, []byte{0})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or as icza pointed out, you can use the code below:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;n := bytes.IndexByte(byteArray, 0)\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["将字节数组转换为字符串的最佳方法是什么？", ["\n\n", "I need to read ", "[100]byte", " to transfer a bunch of ", "string", " data.", "\n\n", "Because not all of the ", "string", "s are precisely 100 characters long, the remaining part of the ", "byte array", " are padded with ", "0", "s.", "\n\n", "If I tansfer ", "[100]byte", " to ", "string", " by: ", "string(byteArray[:])", ", the tailing ", "0", "s are displayed as ", "^@^@", "s.", "\n\n", "In C the ", "string", " will terminate upon ", "0", ", so I wonder what's the best way of smartly transfer a ", "byte array", " to ", "string", " in Golang.", "\n    ", "\n\n", "转载于:https://stackoverflow.com/questions/14230145/what-is-the-best-way-to-convert-byte-array-to-string"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;是那个测试页面的问题。保存成独立的html文件没问题&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["为什么这段js一直提示找不到文件？？？？   要求一个数组方阵从左上到右下的最短距离", ["<!DOCTYPE html>", "\n<html>", "\n\n", "<body>", "\n<p>最小路径是：</p>", "\n<p id=\"yyy\"></p>", "\n\n", "<script>", "\n   ", "\n    var themin=0;", "\n    ", "\n    var grid = [", "\n       [1,3,1],", "\n       [1,5,1],", "\n       [4,2,1]  ]", "\n    ", "\n    function minPathSum(grid) {", "\n\n", "          ", "\n           var i,k,j;", "\n           ", "\n           var sum = new Array(9);", "\n           ", "\n           for (var i=0; i<3; i++) {", "\n               sum[i] = new Array(3);", "\n           }", "\n              sum[0][0]=grid[0][0];", "\n\n", "          for (k=0; k<3; k++) {", "\n           ", "\n               for (j=0; j<3; j++) {", "\n                  ", "\n                   if ((k===0)&&(j===0)) {", "\n                      sum[0][0]=grid[0][0];", "\n                   }else if(k-1<0) {", "\n                         sum[k][j] = sum[k][j-1]+grid[k][j];", "\n                       } else if(j-1<0) {", "\n                               sum[k][j] = sum[k-1][j]+grid[k][j];", "\n                            }else {", "\n                                 ", "\n                   sum[i][j] =Math.min(sum[k-1][j], sum[k][j-1])+grid[k][j];", "\n                             }", "\n                         ", "\n                   ", "\n               }", "\n               ", "\n           }", "\n           return sum[2][2];", "\n           ", "\n}", "\n   ", "\n   var x = minPathSum(grid);", "\n   var p=document.getElementById(\"yyy\");", "\n   p.innerHTML = x;", "\n\n", "\n</script>", "\n\n", "</body>", "\n\n", "</html>", "\n\n", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff1a;&amp;#xff08;完整代码包含了GUI界面的设计&amp;#xff09;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\nimport random\nimport math\nimport heapq\nimport tkinter &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; tk\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Point:\n    def &lt;span class=\"hljs-constructor\"&gt;__init__(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;)&lt;/span&gt;:\n        self.x &amp;#61; x\n        self.y &amp;#61; y\n\n    def &lt;span class=\"hljs-constructor\"&gt;__str__(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;)&lt;/span&gt;:\n        return f&lt;span class=\"hljs-string\"&gt;&amp;#34;{self.x},{self.y}&amp;#34;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Edge:\n    def &lt;span class=\"hljs-constructor\"&gt;__init__(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;weight&lt;/span&gt;)&lt;/span&gt;:\n        self.p1 &amp;#61; p1\n        self.p2 &amp;#61; p2\n        self.weight &amp;#61; weight\n\n    def &lt;span class=\"hljs-constructor\"&gt;__lt__(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;other&lt;/span&gt;)&lt;/span&gt;:\n        return self.weight &amp;lt; other.weight\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Graph:\n    def &lt;span class=\"hljs-constructor\"&gt;__init__(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;)&lt;/span&gt;:\n        self.points &amp;#61; &lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;\n        self.edges &amp;#61; &lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;\n        self.colors &amp;#61; &lt;span class=\"hljs-literal\"&gt;[&amp;#34;&lt;span class=\"hljs-identifier\"&gt;red&lt;/span&gt;&amp;#34;, &amp;#34;&lt;span class=\"hljs-identifier\"&gt;blue&lt;/span&gt;&amp;#34;, &amp;#34;&lt;span class=\"hljs-identifier\"&gt;green&lt;/span&gt;&amp;#34;, &amp;#34;&lt;span class=\"hljs-identifier\"&gt;purple&lt;/span&gt;&amp;#34;, &amp;#34;&lt;span class=\"hljs-identifier\"&gt;orange&lt;/span&gt;&amp;#34;, &amp;#34;&lt;span class=\"hljs-identifier\"&gt;brown&lt;/span&gt;&amp;#34;]&lt;/span&gt;\n\n    def add&lt;span class=\"hljs-constructor\"&gt;_point(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;point&lt;/span&gt;)&lt;/span&gt;:\n        self.points.append(point)\n\n    def add&lt;span class=\"hljs-constructor\"&gt;_edge(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;weight&lt;/span&gt;)&lt;/span&gt;:\n        self.edges.append(&lt;span class=\"hljs-constructor\"&gt;Edge(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;weight&lt;/span&gt;)&lt;/span&gt;)\n\n    def get&lt;span class=\"hljs-constructor\"&gt;_distance(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;)&lt;/span&gt;:\n        return math.sqrt((p1.x - p2.x)**&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#43; (p1.y - p2.y)**&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n\n    def generate&lt;span class=\"hljs-constructor\"&gt;_points(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;width&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;height&lt;/span&gt;)&lt;/span&gt;:\n        self.points &amp;#61; &lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(n):\n            x &amp;#61; random.randint(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, width)\n            y &amp;#61; random.randint(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, height)\n            self.points.append(&lt;span class=\"hljs-constructor\"&gt;Point(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;)&lt;/span&gt;)\n\n    def draw&lt;span class=\"hljs-constructor\"&gt;_points(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;canvas&lt;/span&gt;)&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i, point &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; enumerate(self.points):\n            canvas.create&lt;span class=\"hljs-constructor\"&gt;_oval(&lt;span class=\"hljs-params\"&gt;point&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;-2, &lt;span class=\"hljs-params\"&gt;point&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;-2, &lt;span class=\"hljs-params\"&gt;point&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;&amp;#43;2, &lt;span class=\"hljs-params\"&gt;point&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;&amp;#43;2, &lt;span class=\"hljs-params\"&gt;fill&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;colors&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;%&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;colors&lt;/span&gt;)&lt;/span&gt;])\n\n    def draw&lt;span class=\"hljs-constructor\"&gt;_edge(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;canvas&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;color&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;black&amp;#34;&lt;/span&gt;)&lt;/span&gt;:\n        canvas.create&lt;span class=\"hljs-constructor\"&gt;_line(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;y&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;fill&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;color&lt;/span&gt;)&lt;/span&gt;\n\n    def generate&lt;span class=\"hljs-constructor\"&gt;_edges(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;rule&lt;/span&gt;)&lt;/span&gt;:\n        self.edges &amp;#61; &lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(len(self.points)):\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, len(self.points)):\n                p1 &amp;#61; self.points&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;\n                p2 &amp;#61; self.points&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; rule&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;straight&amp;#34;&lt;/span&gt;:\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; p1.x&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;p2.x &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; p1.y&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;p2.y:\n                        self.add&lt;span class=\"hljs-constructor\"&gt;_edge(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;get_distance&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;)&lt;/span&gt;)\n                elif rule&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;diag&amp;#34;&lt;/span&gt;:\n                    self.add&lt;span class=\"hljs-constructor\"&gt;_edge(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;get_distance&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;)&lt;/span&gt;)\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; self.get&lt;span class=\"hljs-constructor\"&gt;_distance(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;)&lt;/span&gt; &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;:\n                        self.add&lt;span class=\"hljs-constructor\"&gt;_edge(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;get_distance&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;)&lt;/span&gt;)\n\n    def kruskal(self):\n        self.edges.sort&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n        parent &amp;#61; {}\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; point &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; self.points:\n            parent&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;point&lt;/span&gt;]&lt;/span&gt; &amp;#61; point\n        mst &amp;#61; &lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; edge &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; self.edges:\n            p1 &amp;#61; edge.p1\n            p2 &amp;#61; edge.p2\n            root1 &amp;#61; self.find(parent, p1)\n            root2 &amp;#61; self.find(parent, p2)\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; root1 !&amp;#61; root2:\n                mst.append(edge)\n                parent&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;root1&lt;/span&gt;]&lt;/span&gt; &amp;#61; root2\n        return mst\n\n    def find(self, parent, point):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; parent&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;point&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;point:\n            return point\n        return self.find(parent, parent&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;point&lt;/span&gt;]&lt;/span&gt;)\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; App:\n    def &lt;span class=\"hljs-constructor\"&gt;__init__(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;)&lt;/span&gt;:\n        self.master &amp;#61; master\n        self.width &amp;#61; &lt;span class=\"hljs-number\"&gt;800&lt;/span&gt;\n        self.height &amp;#61; &lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;\n        master.title(&lt;span class=\"hljs-string\"&gt;&amp;#34;Shortest Path&amp;#34;&lt;/span&gt;)\n\n        tk.&lt;span class=\"hljs-constructor\"&gt;Label(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Number of Points:&amp;#34;&lt;/span&gt;)&lt;/span&gt;.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        self.num_points_entry &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Entry(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;)&lt;/span&gt;\n        self.num_points_entry.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        self.num_points_entry.insert(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;10&amp;#34;&lt;/span&gt;)\n\n        tk.&lt;span class=\"hljs-constructor\"&gt;Label(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Size of Grid:&amp;#34;&lt;/span&gt;)&lt;/span&gt;.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        self.grid_size_entry &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Entry(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;)&lt;/span&gt;\n        self.grid_size_entry.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        self.grid_size_entry.insert(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;800x500&amp;#34;&lt;/span&gt;)\n\n        tk.&lt;span class=\"hljs-constructor\"&gt;Label(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Connection Rule:&amp;#34;&lt;/span&gt;)&lt;/span&gt;.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        self.rule_var &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;StringVar()&lt;/span&gt;\n        self.rule_var.set(&lt;span class=\"hljs-string\"&gt;&amp;#34;straight&amp;#34;&lt;/span&gt;)\n        tk.&lt;span class=\"hljs-constructor\"&gt;Radiobutton(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Straight&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;variable&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;rule_var&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;value&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;straight&amp;#34;&lt;/span&gt;)&lt;/span&gt;.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        tk.&lt;span class=\"hljs-constructor\"&gt;Radiobutton(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Diagonal&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;variable&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;rule_var&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;value&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;diag&amp;#34;&lt;/span&gt;)&lt;/span&gt;.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        tk.&lt;span class=\"hljs-constructor\"&gt;Radiobutton(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Distance &amp;lt; 100&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;variable&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;rule_var&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;value&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;dist&amp;#34;&lt;/span&gt;)&lt;/span&gt;.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n\n        self.generate_button &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Button(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Generate&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;command&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;generate_points&lt;/span&gt;)&lt;/span&gt;\n        self.generate_button.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n\n        self.canvas &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Canvas(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;width&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;width&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;height&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;height&lt;/span&gt;)&lt;/span&gt;\n        self.canvas.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, columnspan&amp;#61;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;)\n\n        self.solve_button &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Button(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Solve&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;command&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;solve&lt;/span&gt;)&lt;/span&gt;\n        self.solve_button.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n\n        self.show_all_button &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Button(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Show All&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;command&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;show_all&lt;/span&gt;)&lt;/span&gt;\n        self.show_all_button.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n\n        self.quit_button &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Button(&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;Quit&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;command&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;master&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;quit&lt;/span&gt;)&lt;/span&gt;\n        self.quit_button.grid(row&amp;#61;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, column&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, sticky&amp;#61;tk.W)\n\n        self.rule_var.trace(&lt;span class=\"hljs-string\"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;, lambda *_: self.generate&lt;span class=\"hljs-constructor\"&gt;_points()&lt;/span&gt;)\n\n        self.graph &amp;#61; &lt;span class=\"hljs-constructor\"&gt;Graph()&lt;/span&gt;\n\n    def generate&lt;span class=\"hljs-constructor\"&gt;_points(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;)&lt;/span&gt;:\n        self.graph.generate&lt;span class=\"hljs-constructor\"&gt;_points(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;num_points_entry&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;get&lt;/span&gt;()&lt;/span&gt;), *map(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;, self.grid_size_entry.get&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;.split(&lt;span class=\"hljs-string\"&gt;&amp;#34;x&amp;#34;&lt;/span&gt;)))\n        self.graph.generate&lt;span class=\"hljs-constructor\"&gt;_edges(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;rule_var&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;get&lt;/span&gt;()&lt;/span&gt;)\n        self.redraw&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n\n    def solve(self):\n        self.canvas.delete(&lt;span class=\"hljs-string\"&gt;&amp;#34;all&amp;#34;&lt;/span&gt;)\n        self.graph.generate&lt;span class=\"hljs-constructor\"&gt;_edges(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;rule_var&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;get&lt;/span&gt;()&lt;/span&gt;)\n        mst &amp;#61; self.graph.kruskal&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i, edge &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; enumerate(mst):\n            self.graph.draw&lt;span class=\"hljs-constructor\"&gt;_edge(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;canvas&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;edge&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;p1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;edge&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;p2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;color&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;graph&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;colors&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;%&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;graph&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;colors&lt;/span&gt;)&lt;/span&gt;])\n        self.graph.draw&lt;span class=\"hljs-constructor\"&gt;_points(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;canvas&lt;/span&gt;)&lt;/span&gt;\n        self.canvas.create&lt;span class=\"hljs-constructor\"&gt;_text(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;width&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;/&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;/&lt;/span&gt;2, &lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;height&lt;/span&gt;-20, &lt;span class=\"hljs-params\"&gt;text&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;f&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;Minimum Total Weight: {min_total_weight:.2f}&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;font&lt;/span&gt;&amp;#61;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Arial&amp;#34;&lt;/span&gt;, 16, &lt;span class=\"hljs-string\"&gt;&amp;#34;bold&amp;#34;&lt;/span&gt;)&lt;/span&gt;)\n        self.canvas.update&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n\n    def redraw(self):\n        self.canvas.delete(&lt;span class=\"hljs-string\"&gt;&amp;#34;all&amp;#34;&lt;/span&gt;)\n        self.graph.draw&lt;span class=\"hljs-constructor\"&gt;_edges(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;canvas&lt;/span&gt;)&lt;/span&gt;\n        self.graph.draw&lt;span class=\"hljs-constructor\"&gt;_points(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;canvas&lt;/span&gt;)&lt;/span&gt;\n        self.canvas.update&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n\nroot &amp;#61; tk.&lt;span class=\"hljs-constructor\"&gt;Tk()&lt;/span&gt;\napp &amp;#61; &lt;span class=\"hljs-constructor\"&gt;App(&lt;span class=\"hljs-params\"&gt;root&lt;/span&gt;)&lt;/span&gt;\nroot.mainloop&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;运行结果界面截图如下&amp;#xff1a;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/366043304186197.jpg\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["Python编写最短连线程序", ["\n", "from", " tkinter ", "import", " *\n", "import", " tkinter.messagebox\n", "import", " itertools\n", "import", " random\n", "import", " math\n", "import", " itertools\n\nsize = ", "50", "  ", "# 定义方格的大小", "\nr = ", "5", "  ", "# 定义原点的半径", "\nprecision = ", "10", "  ", "# 定义点击圆点精度范围", "\nEntry_Width = ", "60", "\nEntry_Height = ", "40", "\n\n\n", "class", " ", "GUI", "(", "Tk", "):\n    ", "def", " ", "__init__", "(", "self", "):\n        Tk.__init__(self)\n        self.Width_Number = ", "0", "\n        self.Height_Number = ", "0", "\n        self.Width = ", "max", "((self.Width_Number + ", "2", ") * size, ", "400", ")\n        self.Height = (self.Height_Number + ", "3", ") * size\n        self.cv = ", "None", "\n        self.Sign = [[", "0", " ", "for", " j ", "in", " ", "range", "(", "0", ", ", "101", ")] ", "for", " i ", "in", " ", "range", "(", "0", ", ", "101", ")]\n        self.Entry_W = ", "None", "\n        self.Entry_H = ", "None", "\n        self.Entry_Points = ", "None", "\n        self.title(", "\"最短连线程序\"", ")\n        self.geometry(", "str", "(self.Width) + ", "'x'", " + ", "str", "(self.Height) + ", "'+10+10'", ")\n        self.init_input()\n        self.Min_Distance = ", "1e20", "\n        self.Line_Connect = ", "None", "\n        self.distance = []\n\n    ", "def", " ", "Draw_Point", "(", "self, x_Num, y_Num", "):\n        x_Pos = x_Num * size\n        y_Pos = y_Num * size\n        ", "if", " self.Sign[x_Num - ", "1", "][y_Num - ", "1", "]:\n            self.cv.delete(", "str", "(x_Pos) + ", "'-'", " + ", "str", "(y_Pos))\n            self.Sign[x_Num - ", "1", "][y_Num - ", "1", "] = ", "0", "\n        ", "else", ":\n            self.cv.create_oval(x_Pos - r, y_Pos - r, x_Pos + r, y_Pos + r, fill=", "\"black\"", ",\n                                tags=", "str", "(x_Pos) + ", "'-'", " + ", "str", "(y_Pos))\n            self.Sign[x_Num - ", "1", "][y_Num - ", "1", "] = ", "1", "\n\n    ", "def", " ", "Mouse_Button_Event", "(", "self, event", "):\n        ", "# 获得点击位置最近的坐标", "\n        x_Num = ", "round", "(event.x / size)\n        y_Num = ", "round", "(event.y / size)\n        ", "if", " x_Num > self.Width_Number + ", "1", " ", "or", " y_Num > self.Height_Number + ", "1", " ", "or", " x_Num == ", "0", " ", "or", " y_Num == ", "0", ":\n            ", "return", "\n        x_Pos = x_Num * size\n        y_Pos = y_Num * size\n        ", "if", " ", "abs", "(event.x - x_Pos) < precision ", "and", " ", "abs", "(event.y - y_Pos) < precision:\n            self.Draw_Point(x_Num, y_Num)\n\n    ", "def", " ", "Generate", "(", "self", "):\n        ", "try", ":\n            self.Width_Number = ", "int", "(self.Entry_W.get())\n            self.Height_Number = ", "int", "(self.Entry_H.get())\n            ", "if", " self.Width_Number == ", "0", " ", "or", " self.Height_Number == ", "0", " ", "or", " self.Width_Number >= ", "100", " ", "or", " self.Height_Number >= ", "100", ":\n                tkinter.messagebox.showinfo(", "'警告'", ", ", "'数字超出范围'", ")\n                ", "return", "\n        ", "except", " ValueError:\n            tkinter.messagebox.showinfo(", "'警告'", ", ", "'请输入数字'", ")\n            ", "return", "\n\n        self.Width = ", "max", "((self.Width_Number + ", "2", ") * size, ", "400", ")\n        self.Height = (self.Height_Number + ", "3", ") * size\n        self.geometry(", "str", "(self.Width) + ", "'x'", " + ", "str", "(self.Height) + ", "'+10+10'", ")\n        ", "if", " self.cv ", "is", " ", "not", " ", "None", ":\n            self.cv.delete(", "'all'", ")\n            self.cv.config(width=self.Width, height=self.Height)\n        ", "else", ":\n            self.cv = Canvas(self, width=self.Width, height=self.Height, bg=", "'white'", ")\n            self.cv.pack()\n        ", "for", " i ", "in", " ", "range", "(", "0", ", self.Width_Number):\n            ", "for", " j ", "in", " ", "range", "(", "0", ", self.Height_Number):\n                self.cv.create_rectangle((i + ", "1", ") * size, (j + ", "1", ") * size, (i + ", "2", ") * size, (j + ", "2", ") * size)\n        self.cv.bind_all(", "\"<Button-1>\"", ", self.Mouse_Button_Event)\n        Label(self, text=", "'点数:'", ").place(x=", "0", ", y=(self.Height_Number + ", "2", ") * size, width=Entry_Width, height=Entry_Height)\n        self.Entry_Points = Entry(self.cv)\n        self.Entry_Points.place(x=Entry_Width, y=(self.Height_Number + ", "2", ") * size, width=Entry_Width,\n                                height=Entry_Height)\n        Button(self.cv, text=", "'随机'", ", command=self.Random_Number).place(x=Entry_Width * ", "2", ",\n                                                                     y=(self.Height_Number + ", "2", ") * size,\n                                                                     width=Entry_Width, height=Entry_Height)\n        Button(self.cv, text=", "'计算'", ", command=self.WorkOut).place(x=Entry_Width * ", "3", ",\n                                                               y=(self.Height_Number + ", "2", ") * size,\n                                                               width=Entry_Width, height=Entry_Height)\n        self.init_input()\n\n    ", "def", " ", "init_input", "(", "self", "):\n        Label(self, text=", "'列数:'", ").place(x=", "0", ", y=", "0", ", width=Entry_Width, height=Entry_Height)\n        self.Entry_W = Entry(self)\n        self.Entry_W.place(x=Entry_Width, y=", "0", ", width=Entry_Width, height=Entry_Height)\n        Label(self, text=", "'行数:'", ").place(x=Entry_Width * ", "2", ", y=", "0", ", width=Entry_Width, height=Entry_Height)\n        self.Entry_H = Entry(self)\n        self.Entry_H.place(x=Entry_Width * ", "3", ", y=", "0", ", width=Entry_Width, height=Entry_Height)\n        self.Button_Generate = Button(self, text=", "'生成'", ", command=self.Generate)\n        self.Button_Generate.place(x=Entry_Width * ", "4", ", y=", "0", ", width=Entry_Width, height=Entry_Height)\n        self.Sign = [[", "0", " ", "for", " j ", "in", " ", "range", "(", "0", ", ", "len", "(self.Sign[", "0", "]))] ", "for", " i ", "in", " ", "range", "(", "0", ", ", "len", "(self.Sign))]\n        self.Button_Clear = Button(self, text=", "'清空'", ", command=self.clear_Sign)\n        self.Button_Clear.place(x=Entry_Width * ", "5", ", y=", "0", ", width=Entry_Width, height=Entry_Height)\n\n    ", "def", " ", "clear_Sign", "(", "self", "):\n        self.clear_Line()\n        ", "for", " i ", "in", " ", "range", "(", "0", ", self.Width_Number + ", "1", "):\n            ", "for", " j ", "in", " ", "range", "(", "0", ", self.Height_Number + ", "1", "):\n                ", "if", " self.Sign[i][j] == ", "1", ":\n                    self.Draw_Point(i + ", "1", ", j + ", "1", ")\n\n    ", "def", " ", "clear_Line", "(", "self", "):\n        self.cv.delete(", "\"line\"", ")\n\n    ", "def", " ", "Random_Number", "(", "self", "):\n        ", "try", ":\n            temp = ", "int", "(self.Entry_Points.get())\n        ", "except", " ValueError:\n            tkinter.messagebox.showinfo(", "'警告'", ", ", "'请输入数字'", ")\n            ", "return", "\n        self.clear_Sign()\n        random_list = ", "list", "(itertools.product(", "range", "(", "1", ", self.Width_Number + ", "2", "), ", "range", "(", "1", ", self.Height_Number + ", "2", ")))\n        number = random.sample(random_list, temp)\n        ", "for", " each ", "in", " number:\n            x_Num = each[", "0", "]\n            y_Num = each[", "1", "]\n            self.Draw_Point(x_Num, y_Num)\n\n    ", "def", " ", "GetDistance", "(", "self, Point_List, i, j", "):\n        ", "return", " math.sqrt(((Point_List[i][", "0", "] - Point_List[j][", "0", "]) ** ", "2", ") + ((Point_List[i][", "1", "] - Point_List[j][", "1", "]) ** ", "2", "))\n\n    ", "# dfs计算出最短路径连线", "\n    ", "def", " ", "dfs", "(", "self,flag, index, ", "sum", ", stack", "):\n        ", "if", " ", "sum", " > self.Min_Distance:\n            ", "return", "\n        ", "if", " ", "len", "(stack) == ", "len", "(flag):\n            ", "if", " ", "sum", " < self.Min_Distance:\n                self.Min_Distance = ", "sum", "\n                self.Line_Connect = []\n                self.Line_Connect.append(", "list", "(stack))\n                ", "return", "\n            ", "elif", " ", "sum", " == self.Min_Distance:\n                self.Line_Connect.append(", "list", "(stack))\n                ", "return", "\n            ", "else", ":\n                ", "return", "\n        ", "for", " j ", "in", " ", "range", "(", "0", ", ", "len", "(flag)):\n            ", "if", " flag[j] == ", "0", ":\n                flag[j] = ", "1", "\n                stack.append(j)\n                self.dfs(flag, j, ", "sum", "+self.distance[index][j],stack)\n                flag[j] = ", "0", "\n                stack.pop()\n\n    ", "def", " ", "WorkOut", "(", "self", "):\n        Point_List = []\n        ", "for", " i ", "in", " ", "range", "(", "0", ", self.Width_Number + ", "1", "):\n            ", "for", " j ", "in", " ", "range", "(", "0", ", self.Height_Number + ", "1", "):\n                ", "if", " self.Sign[i][j] == ", "1", ":\n                    Point_List.append([i, j])\n        length = ", "len", "(Point_List)\n        self.distance = [[self.GetDistance(Point_List, i, j) ", "for", " j ", "in", " ", "range", "(", "0", ", length)] ", "for", " i ", "in", " ", "range", "(", "0", ", length)]\n        self.Min_Distance = ", "10", "**", "10", "\n        self.Line_Connect = []\n        self.clear_Line()\n        stack = []\n        flag = [", "0", " ", "for", " i ", "in", " ", "range", "(", "0", ", length)]\n        ", "for", " i ", "in", " ", "range", "(", "0", ", length):\n            flag[i] = ", "1", "\n            stack.append(i)\n            self.dfs(flag, i, ", "0", ", stack)\n            flag[i] = ", "0", "\n            stack.pop()\n\n        ", "for", " each1 ", "in", " self.Line_Connect:\n            ", "for", " each2 ", "in", " self.Line_Connect:\n                ", "if", " each1[", "0", "] == each2[-", "1", "] ", "and", " each1[-", "1", "] == each2[", "0", "]:\n                    each2.reverse()\n        self.Line_Connect = ", "list", "(", "set", "([", "tuple", "(t) ", "for", " t ", "in", " self.Line_Connect]))\n        colors = [", "\"pink\"", ",", "\"red\"", ",", "\"blue\"", ",", "\"Violet\"", ",", "\"Purple\"", ",", "\"Navy\"", ",", "\"SkyBlue\"", ",", "\"Cyan\"", ",", "\"Green\"", ",", "\"Yellow\"", ",", "\"White\"", "]\n        ", "for", " j ", "in", " ", "range", "(", "0", ",", "len", "(self.Line_Connect)):\n            temp = random.randint(-", "5", ",", "5", ")\n            each = self.Line_Connect[j]\n            ", "for", " i ", "in", " ", "range", "(", "0", ", ", "len", "(each)-", "1", "):\n                x1 = (Point_List[each[i]][", "0", "]+", "1", ")*size+temp\n                y1 = (Point_List[each[i]][", "1", "]+", "1", ")*size+temp\n                x2 = (Point_List[each[i+", "1", "]][", "0", "]+", "1", ")*size+temp\n                y2 = (Point_List[each[i+", "1", "]][", "1", "]+", "1", ")*size+temp\n                self.cv.create_line(x1,y1,x2,y2,width=", "3", ",fill=colors[j%", "len", "(colors)],tags=(", "\"line\"", ",", "str", "(j)),dash=(", "4", ",", "4", "))\n\n\n\n", "if", " __name__ == ", "\"__main__\"", ":\n    window = GUI()\n    window.mainloop()\n\n", "\n", "（1）可以自定义方格地图大小（aXb）", "（2）可以设定点数，可以随机生成点，也可预置点的坐标", "（3）生成最短连线，如不止一种结果，用多种颜色显示。", "（4）可自定义连线规则（如只能直线，或者可以斜线）", "现在前3个功能已经能实现，需要在次基础上加上第四个功能，给出完善后能够正确运行的代码，以及正确的运行结果界面截图"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;矩阵里的数字是啥&amp;#xff1f;两点之间的距离吗&amp;#xff1f;0到1的距离和1到0的距离不一样&amp;#xff1f;&lt;br /&gt;最短路径&lt;br /&gt;[0, 7, 6, 3, 1, 2, 5, 4, 8, 0]&lt;br /&gt;最短距离&lt;br /&gt;655&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["0出发最后回到0求最短距离", ["从0出发最后回到0 并且经过1 2 3 4 5 6 7 8求最短距离  每个点只能经过一次"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://www.csdn.net/tags/MtjaYgzsNTY0OTItYmxvZwO0O0OO0O0O.html\" id=\"textarea_1657596156021_1657596278552_0\"&gt;求最短回路算法&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["请教大家一下，数据结构 最短回路模型建立", ["遇到问题了，想不明白，请教大家一下：数据结构，最短回路模型建立。"]], "Tag": "算法设计"}
{"Answer": "&lt;a target='_blank' rel='nofollow' href='http://blog.csdn.net/Apple_wkf/article/details/41693513'&gt;自定义室内地图以及路径规划&lt;/a&gt;&lt;br/&gt;&lt;a target='_blank' rel='nofollow' href='http://blog.csdn.net/yanyuanfen2011/article/details/8967424'&gt;百度地图之路径规划&lt;/a&gt;&lt;br/&gt;&lt;a target='_blank' rel='nofollow' href='http://blog.csdn.net/su19921021/article/details/50954780'&gt;百度地图之路径规划&lt;/a&gt;&lt;br/&gt;----------------------同志你好，我是CSDN问答机器人小N，奉组织之命为你提供参考答案，编程尚未成功，同志仍需努力！", "Konwledge_Point": "负权边的最短路径", "Question": ["地图模块_路径规划的问题", ["输入某一位置查询附近（如3公里）的客户信息，查询后根据输入的位置（起始位置）和部分的客户的地址（客户地址可选）规划出最短的路径；", "\n希望得到：", "\n    1：解决思路", "\n    2：百度、高德是否有这样的接口"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;很简单呀&amp;#xff0c;这是linux基本命令运用的题&amp;#xff0c;就比如说第一道题&lt;br /&gt;新建目录 mkdir hisdir  进入目录 cd hisdir  创建文件 touch t1.txt,t2.txt 移动并改名是 mv  test1 ../f1 复制命令是cp,到主目录命令是 cp f2 /&lt;br /&gt;剩下的你自己来吧&amp;#xff0c;你可以参考我的博客里写的进行相关操作&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/technologist_28/article/details/119506195\" id=\"textarea_1631233295101_1631233624869_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;Linux基础学习四&amp;#xff1a;Linux常用的命令&amp;#xff08;非常详细&amp;#xff09;_CSDN专家-微编程的博客-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;常用的命令文档帮助命令help用法&amp;#xff1a; 命令 --help示例&amp;#xff1a; dhclient --helpman用法: man 命令示例&amp;#xff1a;man dhclient 空格&amp;#xff1a;下一页 b:上一页 q:退出基本操作命令echo作用&amp;#xff1a;输出数据到窗口示例&amp;#xff1a;echo &amp;#34;hello world&amp;#34;\techo $PATH //输出path环境变量的值ip作用&amp;#xff1a;查看ip用法&amp;#xff1a;ip addrifconfig作用&amp;#xff1a;centOS7之前版本查看ip...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/technologist_28/article/details/119506195&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["三道linux操作题不会解", ["假设用户jack在当前目录/home/jack下，新建一个目录hisdir；进入hisdir目录，并在hisdir 目录下新建2个文件t1和t2；然后把test1移到其父目录中并改名为f1；将t2复制到主目录中。 ", "新建用户exp1，UID为1005，指定其所属的私有组为linux5（linux5组的标识符为1000），用户的主目录为/home/exp1，用户的Shell为/bin/bash，帐户10天过期。设置完成后查看各该用户相关信息。设置密码为123456。设置exp11用户的最短口令存活期为20天，最长口令存", "活期为60天，账户过期日期 2016-11-1，口令到期前5天提醒用户修改口令。  ", "设文件 file 当前的权限为 rwx rw- r--。要求取消拥有者的执行权限、取消组内成员的写权限、并且增加其它用户的执行权限。分别用符号表示法和数字表示法修改该文件的权限。"]], "Tag": "算法设计"}
{"Answer": "这个是NP hard的问题，除非死算，没有什么好的办法，但是如果你只是需要近似最优解，可以用启发式算法，比如模拟退火、遗传算法之类。\r\n所谓启发算法，就是说结果很好算，但是算法本身很难，可以通过随机和试探逼近最优解的方法。\r\n也就是先随机选取一些点，然后向某个方向移动，看距离是否缩小，如果是，那么就移动到那个点，再选取周围点，继续。直到选取的点往四周都增大。", "Konwledge_Point": "负权边的最短路径", "Question": ["点到直线的最短距离和问题，优化算法", ["求空间中一个点的坐标，这个坐标到n多个直线的距离和最短，n已知，直线方程已知"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; main(String[] args) {\n//        Scanner scanner &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; Scanner(&lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] arrs &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;};\n        Arrays.sort(arrs);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n&amp;#61; arrs.length;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m &amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum &amp;#61; Arrays.stream(arrs).sum();\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ave &amp;#61; sum%m &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;? sum/m:sum/m &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; ;\n        Map&amp;lt;&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;,List&amp;lt;&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt;&amp;gt; map &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();\n        Map&amp;lt;&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;,&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt; sumMap &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; step &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;arrs.length&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;){\n\n\n\n            &lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt; preSum &amp;#61; sumMap.getOrDefault(j, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (preSum &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || preSum&amp;#43;arrs[i]&amp;lt;&amp;#61; ave){\n                List&amp;lt;&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt; list &amp;#61; map.getOrDefault(j, &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;());\n                list.&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(arrs[i]);\n                map.put(j,list);\n                sumMap.put(j,preSum&amp;#43;arrs[i]);\n                i&lt;span class=\"hljs-comment\"&gt;--;&lt;/span&gt;\n            }\n\n            j&amp;#61;j&amp;#43;step;\n\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j&amp;gt;&amp;#61; m&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;){\n                step &amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (j&amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n                step &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n\n            }\n\n        }\n\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(map);\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(sumMap);\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;耗时:&amp;#34;&amp;#43; sumMap.&lt;span class=\"hljs-keyword\"&gt;values&lt;/span&gt;().stream().max(&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;::compareTo).&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;());\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["m个线程，n个任务，求最短解决时间", ["今天遇到一个题：假设有m个线程，同时解决n个任务，求最短解决时间。", "\n", "输入示例：3                    （3个线程）", "                  1 4 2 3 5        （各个任务的解决时间）", "输出示例：5                    （全部任务最短解决时间）", "\n", "求解决一下给个代码，最好是java的，感谢感谢了"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;n &amp;#61; int(input(&amp;#34;输入材料长度&amp;#xff1a;&amp;#34;))\nm &amp;#61; n\ncx &amp;#61; cy &amp;#61; 0\nfor x in range(1,n//19&amp;#43;1):\n    for y in range(1,n//23&amp;#43;1):\n        z &amp;#61; n-x*19-y*23\n        if z&amp;gt;&amp;#61;0 and (z&amp;lt;m or z&amp;#61;&amp;#61;m and x&amp;lt;cx):\n            m&amp;#61;z\n            cx&amp;#61;x\n            cy&amp;#61;y\nprint(f&amp;#39;19米短管 {cx} 根, 23米短管 {cy} 根&amp;#xff0c;剩余材料 {m} 米。&amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;br /&gt;\n &lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["刚学python，求解", ["任务描述", "\n\n", "本关任务：求出剩余材料最短的切割方案。 一根长度为n米的钢管，需要截成长度为19米和23米的两种短管。求两种短管各截多少根时剩余的材料最少？ （钢管的长度大于等于42） 注意：1、每种短管必须大于等于一根。 2、如果存在多种方案时，请输出19米的数目最少的方案。", "\n\n", "相关知识", "\n\n", "为了完成本关任务，你需要掌握：循环嵌套"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;C&lt;br /&gt;更新server就得是管理员。所以问非管理员身份登录怎么办&amp;#xff0c;那就得换管理员身份登录才能更新。&lt;br /&gt;题目的“ 在最短的时间内 ”是唬人的&amp;#xff0c;好像能有其他办法似的&amp;#xff0c;如果能有的话&amp;#xff0c;那管理员身份岂不是虚设的&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["计算机上执行常规升级，怎样才能在最短的时间内更新布丁", ["计算机上执行常规升级，怎样才能在最短的时间内更新服务器上所有的系统文件和布丁呢"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;bool fun(char* pData, int n) //回文串判断\n{\n\tfor (int i &amp;#61; 0; i &amp;lt; n / 2; i&amp;#43;&amp;#43;)\n\t{\n\t\tif (pData[i] !&amp;#61; pData[n - i - 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n\nvoid fun1(char *pData, int n, int m)//将char的前m个字符颠倒后加到char数组尾部\n{\n\tint pos &amp;#61; n;\n\tfor (int i &amp;#61; m-1; i &amp;gt;&amp;#61; 0; i--)\n\t{\n\t\tpData[pos&amp;#43;&amp;#43;] &amp;#61; pData[i];\n\t}\n}\n\n\n#define N 1000\nint main(void){\n\tint n;\n\tscanf_s(&amp;#34;%d&amp;#34;, &amp;amp;n);\n\tchar ch[N] &amp;#61; { 0 };\n\tscanf_s(&amp;#34;%s&amp;#34;, ch, N);\n\n\tint i &amp;#61; 0;\n\twhile (true)\n\t{\n\t\tfun1(ch, n, i);\n\t\tif (fun(ch, n &amp;#43; i))\n\t\t\tbreak;\n\t\ti&amp;#43;&amp;#43;;\n\t}\n\tch[n &amp;#43; i] &amp;#61; &amp;#39;\\0&amp;#39;;\n\tprintf(&amp;#34;%s&amp;#34;, ch);\n\n\t\n\treturn 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["判断是否为回文字符串，如果不是补齐为最短回文字符串", ["如题，判断是否为回文字符串，如果不是补齐为最短回文字符串，求一段代码，用c语言实现"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个问题可以用图论来解决。图论是一门研究图形结构的数学分支&amp;#xff0c;可以用来描述网络、流程、导航等问题。&lt;/p&gt;\n&lt;p&gt;具体来说&amp;#xff0c;这个问题可以用有向图来表示&amp;#xff0c;其中每个地点对应一个图中的结点&amp;#xff0c;每条路径对应一条有向边。要求求出A地到B地的最短路径&amp;#xff0c;就可以使用最短路径算法来解决。&lt;/p&gt;\n&lt;p&gt;最短路径算法有很多种&amp;#xff0c;常用的有贪心算法和动态规划算法。这里介绍一种经典的最短路径算法——迪杰斯特拉算法。&lt;/p&gt;\n&lt;p&gt;迪杰斯特拉算法的基本思想是从起点开始&amp;#xff0c;每次找到一条到达不同结点的最短路径&amp;#xff0c;直到找到终点为止。&lt;/p&gt;\n&lt;p&gt;算法步骤如下&amp;#xff1a;&lt;/p&gt;\n&lt;ul&gt;&lt;li&gt;&lt;p&gt;初始化&amp;#xff1a;将起点设为已经访问过&amp;#xff0c;并将起点到其它所有结点的距离设为无穷大&amp;#xff08;或某个极大值&amp;#xff09;。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;更新距离&amp;#xff1a;遍历起点的所有出边&amp;#xff0c;更新从起点出发能够到达的结点的距离值。如果从起点到某个结点的距离加上从该结点到另一个结点的距离&amp;#xff0c;则更新从起点到该结点的距离为前者。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;找到最近结点&amp;#xff1a;从未访问过的结点中找到离起点最近的结点&amp;#xff0c;将其设为已访问过。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;重复步骤2和步骤3&amp;#xff0c;直到找到终点为止。&lt;/p&gt;\n&lt;/li&gt;&lt;/ul&gt;\n&lt;p&gt;算法结束后&amp;#xff0c;起点到终点的距离即为从起点到终点的最短路径。&lt;/p&gt;\n&lt;p&gt;举个例子&amp;#xff0c;假设有一张图如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;A ---3---&amp;gt; B ---2---&amp;gt; C&lt;/p&gt;\n&lt;p&gt;| /&lt;/p&gt;\n&lt;p&gt;1 /&lt;/p&gt;\n&lt;p&gt;| /&lt;/p&gt;\n&lt;p&gt;v /&lt;/p&gt;\n&lt;p&gt;D ---2---&amp;gt; E&lt;/p&gt;\n&lt;p&gt;起点为A&amp;#xff0c;终点为E。&lt;/p&gt;\n&lt;p&gt;首先将A设为已访问过&amp;#xff0c;并将A到其它所有结点的距离设为无穷大。&lt;/p&gt;\n&lt;p&gt;然后更新距离。遍历A的出边&amp;#xff0c;可以发现A到B的距离为3&amp;#xff0c;A到D的距离为1。将这两条路径的距离设为3和1。&lt;/p&gt;\n&lt;p&gt;接下来找到最近结点。可以发现A到D的距离最小&amp;#xff0c;因此将D设为已访问过。&lt;/p&gt;\n&lt;p&gt;然后更新距离。遍历D的出边&amp;#xff0c;可以发现A到D到E的距离为3&amp;#xff0c;比A到E的距离小&amp;#xff0c;因此将A到E的距离更新为3。&lt;/p&gt;\n&lt;p&gt;找到最近结点&amp;#xff0c;发现A到E的距离最小&amp;#xff0c;因此将E设为已访问过。由于E是终点&amp;#xff0c;因此算法结束。&lt;/p&gt;\n&lt;p&gt;最终&amp;#xff0c;A到E的距离为3&amp;#xff0c;即为A到E的最短路径。&lt;/p&gt;\n&lt;p&gt;在迪杰斯特拉算法中&amp;#xff0c;需要用到一些数据结构来存储图的信息。通常可以使用邻接矩阵或邻接表来表示图&amp;#xff0c;也可以使用堆来优化算法的执行效率。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["从A地到B地有多条路径可以到达，现要从A地到B地运物资问题", ["从A地到B地有多条路径可以到达，现要从A地到B地运物资，设计一个求走那条路径最短的算法，这个题目用了哪些数据结构？大致的算法思想是什么？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-xml\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,i;\n  string *A;\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; max&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; min &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; avg &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n  cin&amp;gt;&amp;gt;n;\n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n  {\n    A &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; string[n];\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n      cin&amp;gt;&amp;gt;A[i];\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(A[max].&lt;span class=\"hljs-built_in\"&gt;length&lt;/span&gt;() &amp;lt; A[i].&lt;span class=\"hljs-built_in\"&gt;length&lt;/span&gt;())\n          max &amp;#61; i;\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(A[min].&lt;span class=\"hljs-built_in\"&gt;length&lt;/span&gt;() &amp;gt; A[i].&lt;span class=\"hljs-built_in\"&gt;length&lt;/span&gt;())\n          min &amp;#61; i;\n      avg &amp;#43;&amp;#61; A[i].&lt;span class=\"hljs-built_in\"&gt;length&lt;/span&gt;();\n    }\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;最长的串:&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;A[max]&amp;lt;&amp;lt;endl;\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;最短的串:&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;A[min]&amp;lt;&amp;lt;endl;\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;平均长度:&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;avg/n&amp;lt;&amp;lt;endl;\n    \n    &lt;span class=\"hljs-keyword\"&gt;delete&lt;/span&gt; []A;\n  }\n  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["自考C++，问个练习题", ["1，编写一个程序，将从键盘输入的n个字符串保存在一个一维数组A中，在输入字符串之前，先输入n的值，要求数组A需要动态申请空间，程序运行结束前再释放掉。", "2，在题目一的基础上，输出n个字符串中最长的和最短的串，计算n个串的平均长度，并输出结果。", "\n", "自学的，没有老师同学，挺尴尬的，给讲详细点吧。谢谢了。"]], "Tag": "算法设计"}
{"Answer": "https://www.nowcoder.com/questionTerminal/9929785afd364470bc8da265087d1aaf", "Konwledge_Point": "负权边的最短路径", "Question": ["平面直角坐标系上距离点的计算，一个优化的算法，采用C语言谢谢", ["Problem Description", "\nACboy is playing a new stone game. There's a rectangular grid board, and some stones placed at the initial location Bi(Xi, Yi) and the targets are at the location Si(Pj, Qj), the time that moving between them is Di,j = |Xi - Pj| + |Yi - Qj| + 1 minutes. And at different places may have different stones, and different target places have different capacity. In the following picture, B1,2,3 stands for the initial places, S1,2,3,4 stands for the target places. In detail, B1(5) means there are 5 stones at this location, S2(4) means you can move at most 4 stones to this target location.", "\n\n", "The one who moves the stones from the initial places to the target places using less time will win. So ACboy now telling you his play plan, and you should tell hime whether his plan is the best, or he can do it better.", "\n\n", "Input", "\nThe input file consists of The game board description and the play plan description. The first line of the input file consists of two numbers N and M separated by a space. N (1 <= N <= 100) is a number of initial places(numbered from 1 to N). M (1 <= M <= 100) is a number of target places(numbered from 1 to M).", "\n\n", "The following N lines describe initial places. Each line contains there integer numbers Xi, Yi, and Bi separated by spaces, where Xi, Yi (-1000 <= Xi, Yi <= 1000) are the coordinates of initial places, and Bi (1 <= Bi <= 1000) is the number of stones at this location.", "\n\n", "The description of initial places is followed by M lines that describe target places. Each line contains three integer numbers Pj, Qj, and Cj separated by spaces, where Pi, Qi (-1000 <= Pj, Qj <= 1000) are the coordinates of the target places, and Cj (1 <= Cj <= 1000) is the capacity of this place.", "\n\n", "The description of the play plan follows on the next N lines. The play plan of ith initial place consists of M integer numbers Ei,j separated by spaces. Ei,j (0 <= Ei, j <= 1000) is a number of stones that shall move from the ith initial place to the jth target place.", "\n\n", "The plan in the input file is guaranteed to be valid. Namely, B1+B2+....+Bn <= S1+S2+....+Sn.", "\n\n", "Process to the end of file.", "\n\n", "Output", "\nIf ACboy's plan is the best, print \"good\", otherwise, print\"I can do it better\".", "\n\n", "Sample Input", "\n2 1", "\n0 0 5", "\n1 1 5", "\n2 2 5", "\n5", "\n0", "\n\n", "Sample Output", "\nI can do it better"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/hero5201/article/details/51812963", "Konwledge_Point": "负权边的最短路径", "Question": ["一个有关最短时间的计算的算法的问题，谢谢", ["Problem Description", "\n在每年的校赛里，所有进入决赛的同学都会获得一件很漂亮的t-shirt。但是每当我们的工作人员把上百件的衣服从商店运回到赛场的时候，却是非常累的！所以现在他们想要寻找最短的从商店到赛场的路线，你可以帮助他们吗？", "\n\n", "Input", "\n输入包括多组数据。每组数据第一行是两个整数N、M（N<=100，M<=10000），N表示成都的大街上有几个路口，标号为1的路口是商店所在地，标号为N的路口是赛场所在地，M则表示在成都有几条路。N=M=0表示输入结束。接下来M行，每行包括3个整数A，B，C（1<=A,B<=N,1<=C<=1000）,表示在路口A与路口B之间有一条路，我们的工作人员需要C分钟的时间走过这条路。", "\n输入保证至少存在1条商店到赛场的路线。", "\n\n", "Output", "\n对于每组输入，输出一行，表示工作人员从商店走到赛场的最短时间", "\n\n", "Sample Input", "\n2 1", "\n1 2 3", "\n3 3", "\n1 2 5", "\n2 3 5", "\n3 1 2", "\n0 0", "\n\n", "Sample Output", "\n3", "\n2"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You could sort the strings by length using for example &lt;a href=\"https://www.php.net/manual/en/function.usort.php\" rel=\"nofollow noreferrer\"&gt;usort&lt;/a&gt; and get the first item using &lt;a href=\"https://www.php.net/manual/en/function.reset.php\" rel=\"nofollow noreferrer\"&gt;reset&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$array = array(\n    'Google',\n    'Facebook',\n    'Twitter',\n    'Slack',\n    'Twilio',\n);\n\nusort($array, function ($a, $b) {\n    return strlen($a) &amp;lt; strlen($b);\n});\n\necho reset($array); // Facebook\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If there could be more strings with equal length, you could use a foreach and break out of the loop when the length is not equal to the current length of the item to prevent looping the whole list.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$item = reset($array);\n$result = [];\n\nif ($item) {\n    $len = strlen($item);\n    foreach($array as $value) {\n        if (strlen($value) === $len) {\n            $result[] = $value;\n            continue;\n        }\n        break;\n    }\n}\n\nprint_r($result);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Result&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Array\n(\n    [0] =&amp;gt; Facebook\n    [1] =&amp;gt; Test1112\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"https://3v4l.org/q5d8X\" rel=\"nofollow noreferrer\"&gt;Php demo&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["PHP在没有循环的情况下获取数组中最长的字符", ["\n\n", "Given an array, I want to get the longest string by length without using the foreach loop.", "\n\n", "Below is my array", "\n\n", "$array = array(\n    'Google',\n    'Facebook',\n    'Twitter',\n    'Slack',\n    'Twilio',\n);\n", "\n\n", "This question returns the maximum length but I want to get the value of the string.\n", "PHP shortest/longest string in array", "\n    "]], "Tag": "算法设计"}
{"Answer": "这个叫做 中国邮递员问题，你可以google下\r\nhttps://www.cnblogs.com/WABoss/p/5140531.html", "Konwledge_Point": "负权边的最短路径", "Question": ["欧拉回路避桥法的扩展：遍历无向图里的所有边，当这个图不是欧拉回路时，怎样使得走过的重复边最少？", ["遍历所有点的问题是tsp问题，但是如果需要遍历所有的边呢？", "\n欧拉回路的避桥法可以对于欧拉回路，实现不重复的遍历所有边，", "\n但是如果该图不是欧拉回路，该怎样在最短行驶路径下遍历所有边呢？", "\n\n", "问题：", "\n\n", "\n给定一个无向连通图，不是欧拉图，需要遍历其中所有**边**，", "\n可以重复走边，问：怎样使得走过的重复路径最少？", "\n做课设需要解决这个问题，有相关的算法吗，", "\n如果没有，该怎样修改对于欧拉回路的避桥法呢？"]], "Tag": "算法设计"}
{"Answer": "http://download.csdn.net/download/zy841958835/9913574", "Konwledge_Point": "负权边的最短路径", "Question": ["求java笔试面试题目 大神们", ["各位大神马上准备去面试华为 求java的一些面试笔试题目 ", "\n最好基础点的 有解答"]], "Tag": "算法设计"}
{"Answer": "http://www.cnblogs.com/CheeseZH/archive/2012/04/29/2476134.html", "Konwledge_Point": "负权边的最短路径", "Question": ["买票的问题求解           ", ["Description", "\n\n", "Railway tickets were difficult to buy around the Lunar New Year in China, so we must get up early and join a long queue…", "\n\n", "The Lunar New Year was approaching, but unluckily the Little Cat still had schedules going here and there. Now, he had to travel by train to Mianyang, Sichuan Province for the winter camp selection of the national team of Olympiad in Informatics.", "\n\n", "It was one o’clock a.m. and dark outside. Chill wind from the northwest did not scare off the people in the queue. The cold night gave the Little Cat a shiver. Why not find a problem to think about? That was none the less better than freezing to death!", "\n\n", "People kept jumping the queue. Since it was too dark around, such moves would not be discovered even by the people adjacent to the queue-jumpers. “If every person in the queue is assigned an integral value and all the information about those who have jumped the queue and where they stand after queue-jumping is given, can I find out the final order of people in the queue?” Thought the Little Cat.", "\n\n", "Input", "\n\n", "There will be several test cases in the input. Each test case consists of N + 1 lines where N (1 ≤ N ≤ 200,000) is given in the first line of the test case. The next N lines contain the pairs of values Posi and Vali in the increasing order of i (1 ≤ i ≤ N). For each i, the ranges and meanings of Posi and Vali are as follows:", "\n\n", "Posi ∈ [0, i − 1] — The i-th person came to the queue and stood right behind the Posi-th person in the queue. The booking office was considered the 0th person and the person at the front of the queue was considered the first person in the queue.", "\nVali ∈ [0, 32767] — The i-th person was assigned the value Vali.", "\nThere no blank lines between test cases. Proceed to the end of input.", "\n\n", "Output", "\n\n", "For each test cases, output a single line of space-separated integers which are the values of people in the order they stand in the queue.", "\n\n", "Sample Input", "\n\n", "4", "\n0 77", "\n1 51", "\n1 33", "\n2 69", "\n4", "\n0 20523", "\n1 19243", "\n1 3890", "\n0 31492", "\nSample Output", "\n\n", "77 33 69 51", "\n31492 20523 3890 19243"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Check out &lt;a href=\"http://php.net/uniqid\" rel=\"nofollow\"&gt;&lt;code&gt;uniqid()&lt;/code&gt;&lt;/a&gt;.  If you are ultra paranoid, put the filename generation in a loop where you check to see if it exists or not.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$prefix   = hash('sha256', $bits) . '-';\n$filename = uniqid($prefix, true);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This creates a SHA-256 hash of the bits as the prefix to the file, and uses &lt;code&gt;uniqid&lt;/code&gt; to create a unique file name with the prefix of the file being the hash of the bits followed by a &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This should generate a unique filename that you can identify by hashing the bits.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["将2025位转换为最短文件名", ["\n\n", "I have some information represented by 2025 bits. For caching purposes i need to create a unique filename ( not too long of course so fs will handle this ) which will represent these bits. Every set of bits should have unique filename.", "\n\n", "Is md5 suitable for this ? If not , what should i use ?", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;First get the minimum length of all the sub-arrays:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$min_length = min(array_map('count', $array));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then filter the array to get the elements that have that length:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$new_array = array_filter($array, function ($el) use ($min_length) {\n    return count($el) == $min_length);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["获取最短阵列列的所有值", ["\n\n", "I have this array :", "\n\n", "Array\n(\n    [0] => Array        // count 2 values\n        (\n            [0] => 3\n            [1] => 1\n        )\n\n    [1] => Array        // count 2 values\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array        // count 4 values\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n            [3] => 1\n        )\n\n)\n", "\n\n", "and I want to get all of the value of the shortest column. in this case :", "\n\n", "Array\n(\n    [0] => Array\n        (\n            [0] => 3\n            [1] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n)\n", "\n\n", "I post about this case before here : ", "How To Get ALL Minimum Value Within Multidimensional Array?", "\n\n", "but unfortunately that case was using associative array. while in this case isn't associative array.", "\n\n", "how to get the value from array like this?", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;bubble_sort&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; a[][&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;], &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i ,j;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; temp[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n          &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt;n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; - i; j&amp;#43;&amp;#43;)\n         {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(a[j]) &amp;lt; &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]))\n            {\n                &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(temp, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(temp));\n                &lt;span class=\"hljs-built_in\"&gt;memcpy&lt;/span&gt;(temp, a[j], &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(a[j]));\n                &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(a[j], &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(a[j]));\n                &lt;span class=\"hljs-built_in\"&gt;memcpy&lt;/span&gt;(a[j], a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]));\n                &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]));\n                &lt;span class=\"hljs-built_in\"&gt;memcpy&lt;/span&gt;(a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], temp, &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(temp));\n            }\n         }\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; x[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}, v[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;input 3 str\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s%s%s&amp;#34;&lt;/span&gt;, x[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], x[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], x[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]);\n    &lt;span class=\"hljs-built_in\"&gt;bubble_sort&lt;/span&gt;(x, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;strcat&lt;/span&gt;(x[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], x[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]));\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["输入三个字符串，再将最长字符串和最短字符串连接，再将结果输出", ["输入三个字符串，再将最长字符串和最短字符串连接，再将结果输出。很多报错，请讲解一下"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;echo &amp;#39;最长&amp;#39;.$arr3[0].&amp;#34;&lt;br /&gt;&amp;#34;;  //最长的&lt;br /&gt;if($x1-$x2&amp;gt;&amp;#61;3){  //x1是所有字符串个数,包括空字符串; x2不包括空字符串的个数  我随便设置空的至少3个&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    echo &amp;#34;空&amp;#34;;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    return;&lt;/span&gt;&lt;br /&gt;}else{  //没有空的或者空小于2的&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    echo $arr3[$x2-1].&amp;#34;&lt;/span&gt;&lt;br /&gt;&amp;#34;;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    echo $arr3[$x2-2].&amp;#34;&lt;/span&gt;&lt;br /&gt;&amp;#34;;&lt;br /&gt;}&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["PHP如何从n个字符串中挑选出那个不为空的最短字符串m", ["如何从n个字符串（其中有x个空字符串，0≤x≤n）中挑选出那个不为空的最短字符串（m）。", "与此同时还需要兼顾考虑以下特例：如果n个字符串中有x个为空（x<n），则m为空。", "\n", "比如我们可以定义n=10，x=5，这就意味着：", "1、当10个字符串中有2个是空字符串(2显然是小于5的)，则m=最短的那个非空字符串", "2、当10个中有5个或6个是空字符串时，则m=''（m=空）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff1a;首先&amp;#xff0c;需要将输入的字符串按照空格分隔为各个子串&amp;#xff0c;可以使用字符串分割的方法来实现。接下来&amp;#xff0c;遍历每个子串&amp;#xff0c;记录最长和最短的子串以及其中出现的最大和最小字符。这些都可以通过比较字符串长度和字符的ASCII码值来完成。最后&amp;#xff0c;将记录的结果输出即可。以下是一段示例代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-variable\"&gt;input_string&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入字符串&amp;#xff1a;&amp;#34;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=\"hljs-variable\"&gt;substrings&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;input_string.split&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;)\n\n&lt;span class=\"hljs-variable\"&gt;min_substring&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;substrings&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n&lt;span class=\"hljs-variable\"&gt;max_substring&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;substrings&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n&lt;span class=\"hljs-variable\"&gt;min_char&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;input_string&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n&lt;span class=\"hljs-variable\"&gt;max_char&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;input_string&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n\n&lt;span class=\"hljs-variable\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;substring&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;substrings&lt;/span&gt;:\n    &lt;span class=\"hljs-variable\"&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;substring&lt;/span&gt;) &amp;lt; &lt;span class=\"hljs-title\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;min_substring&lt;/span&gt;):\n        &lt;span class=\"hljs-variable\"&gt;min_substring&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;substring&lt;/span&gt;\n    &lt;span class=\"hljs-variable\"&gt;elif&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;substring&lt;/span&gt;) &amp;gt; &lt;span class=\"hljs-title\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;max_substring&lt;/span&gt;):\n        &lt;span class=\"hljs-variable\"&gt;max_substring&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;substring&lt;/span&gt;\n\n    &lt;span class=\"hljs-variable\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;substring&lt;/span&gt;:\n        &lt;span class=\"hljs-variable\"&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;&lt;span class=\"hljs-built_in\"&gt;ord&lt;/span&gt;&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;char&lt;/span&gt;) &amp;lt; &lt;span class=\"hljs-title\"&gt;&lt;span class=\"hljs-built_in\"&gt;ord&lt;/span&gt;&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;min_char&lt;/span&gt;):\n            &lt;span class=\"hljs-variable\"&gt;min_char&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;char&lt;/span&gt;\n        &lt;span class=\"hljs-variable\"&gt;elif&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;&lt;span class=\"hljs-built_in\"&gt;ord&lt;/span&gt;&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;char&lt;/span&gt;) &amp;gt; &lt;span class=\"hljs-title\"&gt;&lt;span class=\"hljs-built_in\"&gt;ord&lt;/span&gt;&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;max_char&lt;/span&gt;):\n            &lt;span class=\"hljs-variable\"&gt;max_char&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-variable\"&gt;char&lt;/span&gt;\n\n&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;最短子串为&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-variable\"&gt;min_substring&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;最长子串为&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-variable\"&gt;max_substring&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;最小字符为&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-variable\"&gt;min_char&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;最大字符为&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-variable\"&gt;max_char&lt;/span&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;希望这能解决你的问题&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["我想知道怎么显示出最长，最短子串呢？", ["按空格分隔开以后怎样可以是子串之间相互比较然后显示出最长最短子串啊？", "题目如下:", "输入一字符串，各个子串之间按空白字符隔开，分别显式其中最长、最短子串，以及最大、最小字符。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;d没传进去&amp;#xff0c;还有类名、包名最好不要用汉字哈&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;[] args)&lt;/span&gt; &lt;/span&gt;{\n      &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; d &amp;#61; &lt;span class=\"hljs-number\"&gt;3.1415926&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; result &amp;#61; &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;.format(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.2f&amp;#34;&lt;/span&gt;, d);\n        System.out.&lt;span class=\"hljs-built_in\"&gt;println&lt;/span&gt;(result);\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["这个保留小数为什么运行报错啊还有 为什么JAVA保留个小数都这么磨叽 找了好几种方法 就这个最短 哭了", [" 这个保留小数为什么运行报错啊还有 为什么JAVA保留个小数都这么磨叽 找了好几种方法 就这个最短 哭了"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;设材料的长度为l&amp;#xff0c;可以写成 l &amp;#61; 19&lt;em&gt;x&amp;#43;23&lt;/em&gt;y&amp;#43;a&amp;#xff0c;于是题目的意思就是当x&amp;#xff0c;y取何值时&amp;#xff0c;a的值最小。于是我们可以穷举出所有的a&amp;#xff0c;打印最小值即可。&lt;br /&gt;另外不难得出&amp;#xff0c;x的取值范围为0到l//19&amp;#xff0c;y的取值范围为0到l//23&amp;#xff0c;而当剩下的材料小于0时&amp;#xff0c;则取值不成立&amp;#xff0c;于是可列出代码如下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;l &amp;#61; int(&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;())\n&lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; x &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(l&lt;span class=\"hljs-comment\"&gt;//19&amp;#43;1):&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; y &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(l&lt;span class=\"hljs-comment\"&gt;//23&amp;#43;1):&lt;/span&gt;\n        &lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; l-&lt;span class=\"hljs-number\"&gt;19&lt;/span&gt;*x-&lt;span class=\"hljs-number\"&gt;23&lt;/span&gt;*y\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; a&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n            break\n        &lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;((&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;,x,y))\nres &amp;#61; min(b)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#34;19米{res[1]}段,23米{res[2]}段,剩余{res[0]}米&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["剩余最短木料，怎么是剩余木料大于0", ["问一下怎么限定剩余木料长度大于0啊！麻烦用简单的代码，才开始学习的学生，社区里能够搜到的答案所用代码没学过啊"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The Pythagorean distance between two points is calculated by:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;distance = sqrt( (x1-x0)^2 + (y1-y0)^2 )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That's  not what your query is calculating:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT regid, sqrt(latitude-$lati)+sqrt(longitude-$longi) AS SQRT_DIST FROM GPS_tbl ORDER BY SQRT_DIST limit 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You've got the square root of two values added together, not the square root of the sum. Try this instead:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT regid, sqrt( (latitude-$lati)*(latitude-$lati) +(longitude-$longi)*(longitude-$longi) ) AS SQRT_DIST FROM GPS_tbl ORDER BY SQRT_DIST limit 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, a couple of things.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;This distance calculation is an adequate approximation if the distance between the two points is small, but once you get into larger values, it will get farther and farther from the true value. Why? Because the surface of the earth is the surface of a sphere, not a plane. To calculate the correct value, google \"Great Circle Distance\"&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Somebody else will probably mention this, but here goes 1) don't use &lt;code&gt;mysql_&lt;/code&gt; functions: they're deprecated; and 2) your code is vulnerable to SQL injection attacks.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["如何根据给定条件选择最短的GPS坐标？", ["\n\n", "I have table ", "GPS_tbl", " in mysql database ", "my_db", ". In ", "GPS_tbl", " there are five columns ", "1)uid 2)latitude 3)longitude 4)regid 5)status", ". In column ", "5)status", " there are two types of values are stored as varchar one is ", "free", " and other is ", "move", ". What i am doing right now is when user send his/her gps coordinates in terms of ", "latitude", " and ", "longitude", " through ", "POST()", ", so to select the shortest coordinate from columns ", "2)latitude 3)longitude", "  i am using ", "Pythagorean theorem", " so by using this i compare these user sent coordinate with already stored coordinates in columns ", "2)latitude 3)longitude", " and select the ", "4)regid", " against it. Now what i want is only select that ", "4)regid", " against shortest coordinate from ", "2)latitude 3)longitude", " whose ", "5)status", " value is ", "free", ". ", "\n\n", "At the moment i am using this query, which is only selecting ", "4)regid", " against ", "shortest coordinate", " and not taking care of ", "status", " value:", "\n\n", "$result = mysql_query(\"SELECT regid, sqrt(latitude-$lati)+sqrt(longitude-$longi) AS SQRT_DIST FROM GPS_tbl ORDER BY SQRT_DIST limit 1\");\n", "\n\n", "GPS_tbl", "\n\n", "+--------------+------------+-------------+-------------+-------------+\n|     uid      | latitude   | longitude   |   regid     |   status    |\n+--------------+------------+-------------+-------------+-------------+\n|      1       |  73.3433   |  18.5223    |APA91W-ClDoS |   move      |\n|              |            |             |             |             |\n+--- ----------+------------+-------------+-------------+-------------+\n|      2       |  43.3433   |  24.5523    |BON91W-ClDoS |   free      |\n|              |            |             |             |             |\n+--- ----------+------------+-------------+-------------+-------------+\n|      3       |  55.3433   |  37.5323    |WCD71P-ClDoS |   free      |\n|              |            |             |             |             |\n+--- ----------+------------+-------------+-------------+-------------+\n|      4       |  65.3433   |  47.5323    |ZCF71D-ClDoS |   move      |\n|              |            |             |             |             |\n+--- ----------+------------+-------------+-------------+-------------+\n|      5       |  85.3433   |  27.5323    |XVD73A-ClDoS |   free      |\n|              |            |             |             |             |\n+--- ----------+------------+-------------+-------------+-------------+\n", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The algorithm you describe is could be OK but it is less clearly specified when it comes to &lt;em&gt;\"... this way I would need to go through the whole array\"&lt;/em&gt;. &lt;/p&gt;\n\n&lt;p&gt;Once you have done the clean up and splitting into words, It will be easier to create a map for the key words, so you can know quickly if a word from the text matches (with &lt;code&gt;isset()&lt;/code&gt;). Then you could just reduce the text array to an array of matching words (using &lt;code&gt;array_filter()&lt;/code&gt;), still keeping the index of where they appear in the original array of words.&lt;/p&gt;\n\n&lt;p&gt;The algorithm would then walk through that reduced array and keep track of a window (range) of these words. At the right side that window enlarges as long as not all necessary words are inside of it, and it shrinks at the left side when the left side word already occurs elsewhere in the window, or just after you have found a candidate solution. That way your window will travel through the whole (reduced) text array. You'll keep track only of the window that represents the shortest phrase. So at the end you have the optimal solution and just need to translate the window boundaries back to a phrase taken from the original text array.&lt;/p&gt;\n\n&lt;p&gt;Case insensitive matching can be achieved by storing things in lower case (with &lt;code&gt;strtolower&lt;/code&gt;), and by using the original cased string (in array format) for generating the output. &lt;/p&gt;\n\n&lt;p&gt;Here is a function that implements the above described algorithm:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function findFragment($text, $words) {\n    // Remove non-A-Z letters\n    $text = preg_replace(\"/[^a-z ]/i\", \"\", $text);\n    $words = preg_replace(\"/[^a-z ]/i\", \"\", $words);\n    // Create a map keyed by the words to find, with as value \n    // the number of occurrences in current sub-phrase\n    $words_map = array_fill_keys(str_word_count(strtolower($words), 2), 0);\n    // Put all words of text in an array\n    $text_arr = str_word_count($text, 1);\n    $text_low_arr = str_word_count(strtolower($text), 1);\n    // Filter only matching words from the text, keeping their original indexes.\n    $matches = array_filter($text_low_arr, function ($word) use ($words_map) {\n        return isset($words_map[$word]);\n    });\n    // How many distinct words need to be matched to have a candidate phrase\n    $matches_left = count($words_map);\n    // Keep track of how long the shortest phrase is\n    $min_words = count($text_arr) + 1; // start \"infinite\"\n    // Loop over all matching words as the last word of a possible phrase\n    foreach($matches as $i =&amp;gt; $match) {\n        $phrase[$i] = $match; // Add to the phrase\n        $words_map[$match]++; // Increase count for this particular word\n        if ($words_map[$match] &amp;gt; 1) continue; // Nothing new was added\n        // Additional word found\n        $matches_left--;\n        if ($matches_left) continue; // Still need more words\n        // Phrase has all words\n        // Remove words from left which occur elsewhere in the phrase\n        while ($words_map[reset($phrase)] &amp;gt; 1) {\n            $words_map[reset($phrase)]--;\n            unset($phrase[key($phrase)]);\n        }\n        // How many words are in this phrase?\n        $num_words = $i - key($phrase) +1;\n        if ($num_words &amp;lt; $min_words) {\n            // It is shorter than we had so far\n            $min_words = $num_words;\n            $best_start = key($phrase);\n        }\n        // Remove first word from phrase before finding new candidate phrases\n        $words_map[reset($phrase)]--;\n        unset($phrase[key($phrase)]);\n        $matches_left++;\n    }\n    // return best result\n    return implode(\" \", array_slice($text_arr, $best_start, $min_words));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You would call it like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;echo findFragment($text, $words);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For the sample data you have given in the question, it returns the desired answer:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Beispieltext der ein paar Wrter &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;See it run on &lt;a href=\"https://eval.in/574995\" rel=\"nofollow\"&gt;eval.in&lt;/a&gt;. &lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["在Textblock中搜索给定关键字的最短通道", ["\n\n", "i have a task and i am not sure how i should solve the problem. I have an idead but i do not know if it is the best way to solve it.", "\n\n", "Here is the task:\nGiven is a block of text and some keywords to find. We need to find a passage where all words can be found and where least words are used. Only the letters from A-Z and a-z need to be taken into account.", "\n\n", "Here is an example:", "\nTextblock:", "\nEin toller Beispieltext ist der Blindtext. Er hat ein paar Wörter. Dies ist\nein Beispieltext, der ein paar Wörter hat und auch noch ein paar mehr, um\ndie Zeile etwas länger zu machen. Darüber hinaus ist er nur dafür da, um\ngenügend Testtext zusammenzubekommen. Dem Text selbst macht das nicht so\nviel aus. Früher einmal mehr, als er noch nicht so selbstbewusst war. Heute\nkennt er seine Rolle als Blindtext und fügt sich selbstbewusst ein. Er ist\nja irgendwie wichtig. Manchmal jedoch, ganz manchmal, weint er in der Nacht,\nweil er niemals bis zum Ende gelesen wird. Doch das hat ja jetzt zum Glück\nein Ende.", "\n\n", "And here the words that need to be found:\nein\nBeispieltext\nder\npaar\nWörter", "\n\n", "The result would be\nBeispieltext der ein paar Wrter", "\n\n", "Following passage would also be a passage where all the words can be found but it has more words inside of the passage and therefore is not the solution:\nEin toller Beispieltext ist Blindtext. Er hat ein paar Wörter.", "\n\n", "My idea is to cut all unnecessary letters and then split the textblock on spaces to have an array of all words. so i can get the position of the words and calculate how much words are inbetween the first occurence of one of the searched words and the first occurence of all other searched words. this way i would need to go through the whole array and compare all possible lengths of passages and just take the shortest one.", "\n\n", "do you think this is the best approach or can you point me to a better idea how to solve this problem?", "\n    "]], "Tag": "算法设计"}
{"Answer": "ArrayList是一个顺序存储的数据结构，只能顺序存储吧，查询数据也就只能用顺序遍历。。。。\r\n如果是已经排序的，那么二分查找是可以的，没排序的话顺序遍历吧\r\n\r\n一般吧 要想快，用HashMap或者HashSet之类的", "Konwledge_Point": "负权边的最短路径", "Question": ["最快的方法从list中取指定的值", ["List list = new ArrayList();", "\nlist.add(\"aa\");", "\nlist.add(\"bb\");", "\nlist.add(\"cc\");", "\nlist.add(\"dd\");", "\n      .", "\n      .", "\n      .", "\n假设我不知道list中各个值的下标，在这种情况下用最快的方法，取出“cc”。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;x0&lt;/span&gt;&amp;#61;x1&amp;#61;y0&amp;#61;y1&amp;#61;0\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;:\n    inp &amp;#61; input(&lt;span class=\"hljs-string\"&gt;&amp;#39;请输入方向和数字空格隔开&amp;#xff0c;或q退出&amp;#xff1a;&amp;#39;&lt;/span&gt;)    \n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; inp &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;:\n        break\n    &lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;inp.split()[0].lower()\n    &lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;int(inp.split()[1])\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;&amp;#61;&amp;#39;up&amp;#39;:\n        y1&amp;#43;&amp;#61;b\n    elif &lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;&amp;#61;&amp;#39;down&amp;#39;:\n        &lt;span class=\"hljs-attribute\"&gt;y1-&lt;/span&gt;&amp;#61;b\n    elif &lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;&amp;#61;&amp;#39;left&amp;#39;:\n        &lt;span class=\"hljs-attribute\"&gt;x1-&lt;/span&gt;&amp;#61;b\n    elif &lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;&amp;#61;&amp;#39;right&amp;#39;:\n        x1&amp;#43;&amp;#61;b\n&lt;span class=\"hljs-attribute\"&gt;dis&lt;/span&gt;&amp;#61;round(((x1-x0)**2&amp;#43;(y1-y0)**2)**0.5)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#39;distance:{dis}&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;请输入方向和数字空格隔开&amp;#xff0c;或&lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt;退出&amp;#xff1a;UP &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;    \n请输入方向和数字空格隔开&amp;#xff0c;或&lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt;退出&amp;#xff1a;DOWN &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;\n请输入方向和数字空格隔开&amp;#xff0c;或&lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt;退出&amp;#xff1a;&lt;span class=\"hljs-attribute\"&gt;LEFT&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;\n请输入方向和数字空格隔开&amp;#xff0c;或&lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt;退出&amp;#xff1a;&lt;span class=\"hljs-attribute\"&gt;RIGHT&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n请输入方向和数字空格隔开&amp;#xff0c;或&lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt;退出&amp;#xff1a;&lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt;\ndistance:&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["python练习题，关于点的移动的问题", ["【编程题】机器人从原点（0,0）开始在平面中移动。 机器人可以通过给定的步骤向上，向下，向左和向右移动。 机器人运动的痕迹如下所示：", "\n", "UP 5", "\n", "DOWN 3", "\n", "LETF 3", "\n", "RIGHT 2", "\n", "方向之后的数字是步骤。 请编写一个程序来计算一系列运动和原点（由input输入）之后距当前位置的距离。如果距离是浮点数，则只打印最接近的整数。", "\n", "例：如果给出以下元组作为程序的输入：", "\n", "UP 5", "\n", "DOWN 3", "\n", "LETF 3", "\n", "RIGHT 2", "\n", "然后，程序的输出应该是：2"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;主要使用到Split()用来分割字符串&amp;#xff0c;for循环进行判断&amp;#xff0c;以及System.Text.Encoding.Default.GetByteCount()获取字符长度。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c#\"&gt; static void &lt;span class=\"hljs-constructor\"&gt;Main(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt;[] &lt;span class=\"hljs-params\"&gt;args&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; str &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;wsd1132大江东去&amp;#xff0c;浪淘尽wsd1132&amp;#xff0c;千古风流人物。#故垒西边wsd1132&amp;#xff0c;人道是&amp;#xff0c;#三国周郎赤壁wsd1132。#乱石穿空&amp;#xff0c;惊涛拍岸wsd1132&amp;#xff0c;卷起千堆雪。#江山如画&amp;#xff0c;一时多少豪杰。#&amp;#34;&lt;/span&gt;;\n            var &lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt; &amp;#61; str.&lt;span class=\"hljs-constructor\"&gt;Split(&amp;#39;#&amp;#39;)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//分隔符#&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; m &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//最短字符&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; num &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//为空次数&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;.Length; i&amp;#43;&amp;#43;)\n            {\n                &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//单个分割字符串&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (m&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;(n !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;System.Text.Encoding.Default.&lt;span class=\"hljs-constructor\"&gt;GetByteCount(&lt;span class=\"hljs-params\"&gt;m&lt;/span&gt;)&lt;/span&gt; &amp;gt; System.Text.Encoding.Default.&lt;span class=\"hljs-constructor\"&gt;GetByteCount(&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;)&lt;/span&gt;))\n                {\n                    m &amp;#61; n;\n                }\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;)\n                {\n                    num&amp;#43;&amp;#43;;&lt;span class=\"hljs-comment\"&gt;//记录为空的次数&lt;/span&gt;\n                }\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (num &amp;gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n            {&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//如果这n个字符串中有3个以上的是空字符串&amp;#xff0c;则m也等于空&lt;/span&gt;\n                m &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;\n            }\n            Console.&lt;span class=\"hljs-constructor\"&gt;WriteLine(&lt;span class=\"hljs-string\"&gt;&amp;#34;你获取的最短字符&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-params\"&gt;m&lt;/span&gt;)&lt;/span&gt;;\n        }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这是结果&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/544263731336164.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["C#如何从分割的n个字符串中挑选出那个不为空的最短字符串m呢？", ["字符串如下：", "\n", "\n", "wsd1132大江东去，浪淘尽wsd1132，千古风流人物。#", "@#故垒西边wsd1132，人道是，#三国周郎赤壁wsd1132。#乱石穿空，惊涛拍岸wsd1132，卷起千堆雪#。@#江山如画，一时多少豪杰。#@#", "\n", "\n", "分隔符  ", "#和@", " 【因为CSDN不允许提问时有连续的#出现，不得已换成了#", "@的组合，也就是说，分隔符都是#亦可】", "分割后的字符串如下（注意其中有空字符串）", "\n", "wsd1132大江东去，浪淘尽wsd1132，千古风流人物。\n\n\n\n故垒西边wsd1132，人道是，\n三国周郎赤壁wsd1132。\n乱石穿空，惊涛拍岸wsd1132，卷起千堆雪。\n\n\n江山如画，一时多少豪杰。\n\n\n\n", "\n", "然后，分以下3种情况去找m的值", "\n", "\n", "1、如果这n个字符串全部不为空，则m就等于最短的那个字符串", "2、如果这n个字符串中有2个以下的是空字符串，则m依然等于最短的那个字符串", "3、如果这n个字符串中有3个以上的是空字符串，则m也等于空。", "\n", "\n", "最后，分情况输出m的值。"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;pre&gt;&lt;code&gt;&amp;lt;?php\n$arr = array();\nfor($i=0; $i&amp;lt;20; $i++){\n  $random_num = rand(1,200);\n  array_push($arr, $random_num);\n}\n\n?&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["生成具有特定范围的20个随机数的最短方法", ["\n\n", "I need to generate an array containing 20 random numbers between 1 and 200. Is there a shorter/cleaner code I can use?", "\n\n", "<?php \n$x= array (rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200),rand(1,200));\necho '<pre>'; print_r($x); echo '</pre>';\n?>\n", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You could have done it like this as well:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if (isset($_GET['page']) &amp;amp;&amp;amp; $_GET['page'] == 'items') {\n    if (isset($_GET['action']) &amp;amp;&amp;amp; ($_GET['action'] == 'new' || $_GET['action'] == 'edit')) {\n\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["如果条件，这个PHP多重编码的最短方式", ["\n\n", "I am trying to do a query like:", "\n\n", "If ", "$_GET['page'] == 'items'", " AND ", "$_GET['action'] == 'new' OR 'edit'", "\n\n", "Here's what I have:", "\n\n", "if (isset($_GET['page']) && $_GET['page'] == 'items') {\n    if (isset($_GET['action']) && $_GET['action'] == 'new' || isset($_GET['action']) && $_GET['action'] == 'edit') {\n\n        // This is what Im looking for\n\n    }\n}\n", "\n\n", "Is this correct, and is this the easiest way to make this query?", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;n &amp;#61; int(input(&amp;#34;输入材料长度&amp;#xff1a;&amp;#34;))\nm &amp;#61; n\ncx &amp;#61; cy &amp;#61; 0\n\nfor x in range(1,n//19&amp;#43;1):\n    for y in range(1,n//23&amp;#43;1):\n        z &amp;#61; n-x*19-y*23\n        if z&amp;gt;&amp;#61;0 and (z&amp;lt;m or z&amp;#61;&amp;#61;m and x&amp;lt;cx):\n            m&amp;#61;z\n            cx&amp;#61;x\n            cy&amp;#61;y\n\nprint(f&amp;#39;19米短管 {cx} 根, 23米短管 {cy} 根&amp;#xff0c;剩余材料 {m} 米。&amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["求助遍历循环中的嵌套循环", ["本关任务：求出剩余材料最短的切割方案。 一根长度为n米的钢管，需要截成长度为19米和23米的两种短管。求两种短管各截多少根时剩余的材料最少？ （钢管的长度大于等于42） 注意：1、每种短管必须大于等于一根。 2、如果存在多种方案时，请输出19米的数目最少的方案。"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You can use this function ... it works with unlimited arguments &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;?php\n\nfunction prepare() {\n    $arg = func_get_args ();\n    $new = array ();\n    foreach ( $arg as $value ) {\n        $new [] = strtolower ( str_replace ( array (\n                \" \" \n        ), \"-\", $value ) );\n    }\n    return implode ( \" \", $new );\n}\n\n?&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;body class=\"&amp;lt;?php echo prepare($c-&amp;gt;getCollectionName(),$c-&amp;gt;getCollectionTypeName()); ?&amp;gt;\"&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;body class=\"&amp;lt;?php echo prepare(\"ABC CLASS\",\"DEF\",\"MORE CLASSES\") ?&amp;gt;\"&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;body class=\"abc-class def more-classes\"&amp;gt;   \n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["在PHP中转换大小写和空格的最短方法", ["\n\n", "I'm trying to add class name in my Concrete 5 theme. What's the elegant way to strip spaces and replace it with dashes then transform them to lower case?", "\n\n", "I already tried lowering the case but I also need to replace the space with dashes (-)", "\n\n", "Here's what my code look like:", "\n\n", "<body class=\"<?php echo strtolower($c->getCollectionName()); echo ' '; echo strtolower($c->getCollectionTypeName()); ?>\">\n", "\n\n", "should look like this", "\n\n", "<body class=\"home right-sidebar\">\n", "\n\n", "Thanks.", "\n    "]], "Tag": "算法设计"}
{"Answer": "是：\r\n\r\n```\r\n Alt+Shift+B\r\n```", "Konwledge_Point": "负权边的最短路径", "Question": ["eclipse的快捷键问题，希望大家知道的说一下", ["\n请问显示这个行级结构的快捷键是什么？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-comment\"&gt;//汉诺塔问题&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;move&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; pose1,&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; pose2)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c--&amp;gt;%c  &amp;#34;&lt;/span&gt;,pose1,pose2);&lt;span class=\"hljs-comment\"&gt;//模拟鼠标移动盘子的过程&lt;/span&gt;\n}\n&lt;span class=\"hljs-built_in\"&gt;hanoi&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; pose1,&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; pose2,&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; pose3)\n{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;move&lt;/span&gt;(pose1, pose3);&lt;span class=\"hljs-comment\"&gt;//只有一个时我们可以直接从A--&amp;gt;C&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;hanoi&lt;/span&gt;(n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, pose1, pose3, pose2);&lt;span class=\"hljs-comment\"&gt;//多个盘子时&amp;#xff0c;先将上面n-1个&amp;#xff0c;通过B-&amp;gt;C&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;move&lt;/span&gt;(pose1, pose3);&lt;span class=\"hljs-comment\"&gt;//第二步&amp;#xff0c;将A上剩下的一个移动到目的地C&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;hanoi&lt;/span&gt;(n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, pose2, pose1, pose3);\n        &lt;span class=\"hljs-comment\"&gt;//第三步&amp;#xff0c;将B上n-1个借助C移动到A&amp;#xff1b;再将B剩下一个移动到C&lt;/span&gt;\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-built_in\"&gt;hanoi&lt;/span&gt;(n, &lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["汉诺塔问题四个盘子四个塔座，用最短步骤", ["1.求怎么样用Ｃ语言去描述", "2.也想有一个调用过程可以帮助我理解"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;pre&gt;&lt;code&gt;&amp;lt;?php\n\n$items = [\n    'whatever',\n    'something else',\n    'foobar'\n];\n\n$matches  = preg_grep ('/foobar/', $items);\nvar_dump($matches);\n\n?&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You don't need to iterate over the array, you can use preg_grep and pass your array instead.&lt;/p&gt;\n\n&lt;p&gt;Happy coding&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["使用正则表达式在数组中查找某个值的最短代码？", ["\n\n", "Lets say I have an array with these elements:", "\n\n", "[\n    'whatever',\n    'something else',\n    'foobar'\n]\n", "\n\n", "I know I can iterate over the array and check for foobar using a regex for example. The question is, is there a shorter way of doing that?", "\n\n", "Thanks?", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; s[&lt;span class=\"hljs-number\"&gt;512&lt;/span&gt;], *p &amp;#61; s, t[&lt;span class=\"hljs-number\"&gt;512&lt;/span&gt;], m[&lt;span class=\"hljs-number\"&gt;512&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; len&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, max&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;gets&lt;/span&gt;(s);\n \n    &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((*p&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; *p&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;) || (*p&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; *p&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;)) {\n            t[len&amp;#43;&amp;#43;] &amp;#61; *p;\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (len&amp;gt;max) {\n                t[len] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                &lt;span class=\"hljs-built_in\"&gt;strcpy&lt;/span&gt;(m, t);\n                max &amp;#61; len;\n            }\n            len &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n        p&amp;#43;&amp;#43;;\n    } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (*p!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (len&amp;gt;max) {\n        t[len] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;strcpy&lt;/span&gt;(m, t);\n        max &amp;#61; len;\n    }\n \n    cout &amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;-------------------&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; m &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;-------------------&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["C++获取字符串中的最长单词", ["编写程序，求出所给出的字符串中最长的字母字串(以非字母隔开),例如，字符串”Apple$12pear watermelon $ # Banana“中最长的字母字串为\"watermelon\".", "\n", "答:", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<cstring>", "\n", "#", "include", "<numeric>", "\n\n", "using", " ", "namespace", " std;\n\n", "int", " ", "main", "()", "\n", "{\n    ios::", "sync_with_stdio", "(", "false", ");", "//不用管", "\n    cin.", "tie", "(", "nullptr", ");            ", "//不用管", "\n\n    ", "int", " n = ", "0", ";\n    ", "int", " maxlen = ", "0", ";\n    ", "char", " t[", "100", "];\n    ", "char", " max[", "100", "];\n    ", "char", " s[", "100", "];\n    cin.", "getline", "(s, ", "100", ");\n    ", "for", " (", "int", " i = ", "0", "; s[i", "-1", "]; i++)", "//当遍历到最后一项时如果也是字母 判断条件为s[i]则不会考虑最后一串单词。", "\n    {                            ", "//判断条件为s[i-1]时 可以遍历到'\\0'所以会考虑最后一串单词。", "\n        ", "if", " (", "isalpha", "(s[i]))", "//isalpha()判断字符是否为字母 不是则返回0 头文件为numeric", "\n        {\n            t[n++] = s[i];\n        }\n        ", "else", "\n        {\n            ", "if", " (maxlen < n)\n            {    \n                ", "int", " i;\n                maxlen = n;\n                ", "for", " ( i = ", "0", "; i < n; i++)\n                {\n                    max[i] = t[i];\n                }\n                max[i] = ", "'\\0'", ";", "//最长单词字符数组末尾加上'\\0'", "\n            }\n            n = ", "0", ";", "//抽取一个单词后 不管长度是否比上一个单词大 临时储存的t字符数组的下标", "\n                ", "//都要初始化为0 .", "\n        }\n    }\n    cout << max << endl;\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;pre&gt;&lt;code&gt;$foo = \"2, 4, 33, 25, 66\";\necho preg_replace(\"/(\\d+)(,?)/\", \"'1-$1'$2\", $foo );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As requested by @roullie, here's a fast regex solution.  In the regex, &lt;code&gt;\\d+&lt;/code&gt; matches 1 or more digits. &lt;code&gt;,?&lt;/code&gt; matches 0 or 1 comma (the last item does not have a common so I must match on 0 or 1.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["在PHP中修改逗号分隔列表中的字符串的最短方法", ["\n\n", "If I want to modify a comma separated list like this:", "\n\n", "$foo = \"2, 4, 33, 25, 66\"\n", "\n\n", "to become", "\n\n", "$foo = \"'1-2', '1-4', '1-33', '1-25', '1-66'\"\n", "\n\n", "What would be the fastest and most efficient way to achieve that in PHP?", "\n\n", "EDIT:", "\nI have tried this, but looking for a better way:", "\n\n", "$foo = \"2, 4, 33, 25, 66\";\n$bar = implode(\"', '1-\",explode(\",\",$foo));\n$foo = \"'1-\". $bar .\"'\";\n", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;改为 &amp;lt;&amp;#61;&lt;br /&gt;实际上代码可以很简单&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; N, A, B;\n  &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d%d&amp;#34;&lt;/span&gt;, &amp;amp;N, &amp;amp;A, &amp;amp;B);\n  A -&amp;#61; (N - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) % A &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n  B -&amp;#61; (N - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) % B &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (A &amp;lt; B)\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, A);\n  &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, B);\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["最短米数问题，能帮我看看代码哪里错了吗？", ["\n", "这个代码哪里出问题了吗，调试的时候会绕过while那里是正常的吗？代数之后运行数据出来很离谱，哪里错了吗？麻烦各位朋友帮我看看，万分感谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在字符串数组中用strcmp逐个比较输入字符串的所有位置下标。然后用下标进行循环比较求最小值&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["定义一个字符串数组，用以接受用户输入的英文单词列表，随后再接受另外两个单词的输入，随后判断这两个单词在字符串数组中的最短距离，要求使用函数调用实现。", ["问题遇到的现象和发生背景 2、    定义一个字符串数组，用以接受用户输入的英文单词列表（单词数不少于十个），随后再接受另外两个单词的输入（这两个单词必须是包含在前面的单词列表里面的单词），随后判断这两个单词在字符串数组中的最短距离，要求使用函数调用实现。", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容 2、    定义一个字符串数组，用以接受用户输入的英文单词列表（单词数不少于十个），随后再接受另外两个单词的输入（这两个单词必须是包含在前面的单词列表里面的单词），随后判断这两个单词在字符串数组中的最短距离，要求使用函数调用实现。", "\n", "输入：I am a Chinese I come from china and I am a college student", "输入：am Chinese", "输出：2", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; This answer relates to older versions of &lt;code&gt;go&lt;/code&gt;. For Go 1.8 and newer, see the &lt;a href=\"https://stackoverflow.com/a/42872183/293064\"&gt;AndreKR's answer below&lt;/a&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you want something a bit less verbose than the standard library &lt;code&gt;sort&lt;/code&gt; package, you could use the third party &lt;a href=\"http://godoc.org/github.com/bradfitz/slice\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;github.com/bradfitz/slice&lt;/code&gt;&lt;/a&gt; package.  It uses some tricks to generate the &lt;code&gt;Len&lt;/code&gt; and &lt;code&gt;Swap&lt;/code&gt; methods needed to sort your slice, so you only need to provide a &lt;code&gt;Less&lt;/code&gt; method.&lt;/p&gt;\n\n&lt;p&gt;With this package, you can perform the sort with:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;slice.Sort(planets[:], func(i, j int) bool {\n    return planets[i].Axis &amp;lt; planets[j].Axis\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;planets[:]&lt;/code&gt; part is necessary to produce a slice covering your array.  If you make &lt;code&gt;planets&lt;/code&gt; a slice instead of an array you could skip that part.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["用（任意）字段名称对结构数组进行简单排序的最短方法是什么？", ["\n\n", "I just had a problem where I had an array of structs, e.g.", "\n\n", "package main\n\nimport \"log\"\n\ntype Planet struct {\n    Name       string  `json:\"name\"`\n    Aphelion   float64 `json:\"aphelion\"`   // in million km\n    Perihelion float64 `json:\"perihelion\"` // in million km\n    Axis       int64   `json:\"Axis\"`       // in km\n    Radius     float64 `json:\"radius\"`\n}\n\nfunc main() {\n    var mars = new(Planet)\n    mars.Name = \"Mars\"\n    mars.Aphelion = 249.2\n    mars.Perihelion = 206.7\n    mars.Axis = 227939100\n    mars.Radius = 3389.5\n\n    var earth = new(Planet)\n    earth.Name = \"Earth\"\n    earth.Aphelion = 151.930\n    earth.Perihelion = 147.095\n    earth.Axis = 149598261\n    earth.Radius = 6371.0\n\n    var venus = new(Planet)\n    venus.Name = \"Venus\"\n    venus.Aphelion = 108.939\n    venus.Perihelion = 107.477\n    venus.Axis = 108208000\n    venus.Radius = 6051.8\n\n    planets := [...]Planet{*mars, *venus, *earth}\n    log.Println(planets)\n}\n", "\n\n", "Lets say you want to sort it by ", "Axis", ". How do you do that?", "\n\n", "(Note: I have seen ", "http://golang.org/pkg/sort/", " and it seems to work, but I have to add about 20 lines just for simple sorting by a very simple key. I have a python background where it is as simple as ", "sorted(planets, key=lambda n: n.Axis)", " - is there something similar simple in Go?)", "\n    "]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/huayunhualuo/article/details/51161933", "Konwledge_Point": "负权边的最短路径", "Question": ["向量和欧几里得的距离的计算，求最短的距离，给定的点，采用C语言算法怎么实现", ["Problem Description", "\nThe government in a foreign country is looking into the possibility of establishing a subway system in its capital. Because of practical reasons, they would like each subway line to start at the central station and then go in a straight line in some angle as far as necessary. You have been hired to investigate whether such an approach is feasible. Given the coordinates of important places in the city as well as the maximum distance these places can be from a subway station (possibly the central station, which is already built), your job is to calculate the minimum number of subway lines needed. You may assume that any number of subway stations can be", "\nbuilt along a subway line.", "\n\n", "Figure 1: The figure above corresponds to the first data set in the example input.", "\n\n", "Input", "\nThe first line in the input file contains an integer N, the number of data sets to follow. Each set starts with two integers, n and d (1 <= n <= 500, 0 <= d < 150). n is the number of important places in the city that must have a subway station nearby, and d is the maximum distance allowed", "\nbetween an important place and a subway station. Then comes n lines, each line containing two integers x and y (-100 <= x, y <= 100), the coordinates of an important place in the capital. The central station will always have coordinates 0, 0. All pairs of coordinates within a data set", "\nwill be distinct (and none will be 0, 0).", "\n\n", "Output", "\nFor each data set, output a single integer on a line by itself: the minimum number of subway lines needed to make sure all important places in the city is at a distance of at most d from a subway station.", "\n\n", "Sample Input", "\n2", "\n7 1", "\n-1 -4", "\n-3 1", "\n-3 -1", "\n2 3", "\n2 4", "\n2 -2", "\n6 -2", "\n4 0", "\n0 4", "\n-12 18", "\n0 27", "\n-34 51", "\n\n", "Sample Output", "\n4", "\n2"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/847361615556144.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; ch[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;112&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,ch[i]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.2s&amp;#34;&lt;/span&gt;,ch[i]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["输入-首中文藏头诗，一共四句，每句-行，但句子不一定是等长的，最短一个汉字，最长九个汉字(注意:一个汉字占两个字节)。取出每句的第一个汉字并连接在一起形成一个字符串并输出。", ["程序功能利用字符数组设计并实现一个解密藏头诗的程序。输入-首中文藏头诗，一共四句，每句-行，但句子不一定是等长的，最短一个汉字，最长九个汉字(注意:一个汉字占两个字节)。取出每句的第一个汉字并连接在一起形成一个字符串并输出。"]], "Tag": "算法设计"}
{"Answer": "各位人家都给分了，稍微耐心点嘛，代码改了一下你看看，基本按照你思路弄的：\r\n\r\n```\r\n#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\n#include &lt;string.h&gt;\r\n#define N 7\r\n#define M 15\r\n\r\nint main()\r\n{\r\n\tint i, j, changdu[N];\r\n\tchar m[N][M], min[M], max[M];\r\n\tint maxlen, minlen;\r\n\tprintf(\"input 6 strings:\\n\");\r\n\tfor (i = 0; i &lt; 6; i++)\r\n\t{\r\n\t\tscanf(\"%s\", &amp;m[i]);\r\n\t}\r\n\tstrcpy(min, m[0]);\r\n\tstrcpy(max, m[0]);\r\n\r\n\tchangdu[0] = strlen(m[0]);\r\n\tmaxlen = changdu[0];\r\n\tminlen = changdu[0];\r\n\tfor (j = 1; j &lt; 6; j++)\r\n\t{\r\n\t\tchangdu[j] = strlen(m[j]);\r\n\t\tif (maxlen &lt; changdu[j])\r\n\t\t{\r\n\t\t\tstrcpy(max, m[j]);\r\n\t\t\tmaxlen = changdu[j];\r\n\t\t}\r\n\t\telse if (minlen &gt; changdu[j])\r\n\t\t{\r\n\t\t\tstrcpy(min, m[j]);\r\n\t\t\tminlen = changdu[j];\r\n\t\t}\r\n\t}\r\n\r\n\tprintf(\"max string is %s,min is %s\", max, min);\r\n\r\n}\r\n```\r\n执行结果，最长的可不是java是第一行的：\r\n![图片说明](https://img-ask.csdn.net/upload/201901/15/1547523899_237370.png)", "Konwledge_Point": "负权边的最短路径", "Question": ["c语言，输入6个字符串，求最大串和最小串", ["输入6个字符串，输出最大串及最小串，如", "\n输入：", "\nhello,world", "\nc", "\njava", "\nc++", "\n#c", "\ncp", "\n运行结果：", "\n最大串：java", "\n最小串：c", "\n\n", "以下是我的代码，请问哪里有错，怎么改", "\n\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#define N 7\n#define M 15\n\nint main()\n{\n    int i,j,changdu[N];\n    char *m[M],min[M],max[M];\n    printf(\"input 6 strings:\\n\");\n    for(i = 0; i < 6; i++)\n    {\n        scanf(\"%s\",&m[i]);\n    }\n    strcpy(min[M],m[0]);\n    strcpy(max[M],m[0]);\n    for(i = 0; i < 5;i++)\n    {\n        changdu[i] = strlen(m[i]);\n        for(j = i+1; j < 6 ; j++)\n        {\n            changdu[j] = strlen(m[j]);\n            if(changdu[i] < changdu[j])\n            {\n                strcpy(max[M] , m[j]);\n                strcpy(min[M] , m[i]);\n\n            }\n        }\n    }\n    printf(\"max string is %s,min is %s\",max[M],min[M]);\n\n}\n\n", "\n\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;%u&lt;br /&gt;%d&lt;br /&gt;%d %o %x&lt;br /&gt;%c&lt;br /&gt;%f&lt;br /&gt;%2.3f&lt;br /&gt;\\t%2.3f&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["以无符号十进制整数形式同时输出20和-5；", ["（1）以无符号十进制整数形式同时输出20和-5；", "（2）以带符号十进制整数形式同时输出20和-5；", "（3）分别以十进制、八进制、十六进制的形式同时输出010；", "（4）以字符型的形式输出‘A’；", "（5）分别以浮点型、指数型和最短宽度的形式同时输出3.14；", "（6）以数据宽度为6、小数位数为4位的形式输出3.14；", "（7）以数据宽度为6、小数位数为4位、数据整体靠左的形式输出3.14；"]], "Tag": "算法设计"}
{"Answer": "这个问题已经跟VB.NET没有多少关系了，它可能比你想象的要复杂得多。首先，你得获得路网数据，即所有的道路矢量数据。这个百度地图似乎不提供，不过可以购买商用的地图数据。其次，你要会最优路径搜索算法，这个问题就更加有点大了，涉及路径规划算法。这个你可以通过《算法导论》这本书来入门，再通过阅读路径优化相关的最新学术文献来学习。\r\n\r\n然而，更加复杂的是，你得知道哪些道路是可以行车的，哪些道路红绿灯多，哪些道路是单行线，哪些道路单双号限行，哪些道路容易堵车，哪些道路会收费...........所以这其实是一个比最短路径规划更复杂的优化问题。", "Konwledge_Point": "负权边的最短路径", "Question": ["vb.net 求百度地图两点间的行车距离", ["采用vb.net 如何获取百度地图上两点间的最短行车距离？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;ctime&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;utility&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stack&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;set&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;bitset&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; PI acos(-1.0)&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; INF 0x3f3f3f3f&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; LL long long&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; Pair pair&lt;span class=\"hljs-string\"&gt;&amp;lt;int,int&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;LL &lt;span class=\"hljs-title\"&gt;quickPow&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LL a,LL b)&lt;/span&gt;&lt;/span&gt;{ LL res&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(b){&lt;!-- --&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(b&amp;amp;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)res*&amp;#61;a; a*&amp;#61;a; b&amp;gt;&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;} &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; res; }\n&lt;span class=\"hljs-function\"&gt;LL &lt;span class=\"hljs-title\"&gt;multMod&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LL a,LL b,LL mod)&lt;/span&gt;&lt;/span&gt;{ a%&amp;#61;mod; b%&amp;#61;mod; LL res&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(b){&lt;!-- --&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(b&amp;amp;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)res&amp;#61;(res&amp;#43;a)%mod; a&amp;#61;(a&amp;lt;&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)%mod; b&amp;gt;&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; } &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; res%mod;}\n&lt;span class=\"hljs-function\"&gt;LL &lt;span class=\"hljs-title\"&gt;quickMultPowMod&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LL a, LL b,LL mod)&lt;/span&gt;&lt;/span&gt;{ LL res&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,k&amp;#61;a; &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(b){&lt;!-- --&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((b&amp;amp;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))res&amp;#61;&lt;span class=\"hljs-built_in\"&gt;multMod&lt;/span&gt;(res,k,mod)%mod; k&amp;#61;&lt;span class=\"hljs-built_in\"&gt;multMod&lt;/span&gt;(k,k,mod)%mod; b&amp;gt;&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;} &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; res%mod;}\n&lt;span class=\"hljs-function\"&gt;LL &lt;span class=\"hljs-title\"&gt;quickPowMod&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LL a,LL b,LL mod)&lt;/span&gt;&lt;/span&gt;{ LL res&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(b){&lt;!-- --&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(b&amp;amp;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)res&amp;#61;(a*res)%mod; a&amp;#61;(a*a)%mod; b&amp;gt;&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; } &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; res; }\n&lt;span class=\"hljs-function\"&gt;LL &lt;span class=\"hljs-title\"&gt;getInv&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LL a,LL mod)&lt;/span&gt;&lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;quickPowMod&lt;/span&gt;(a,mod&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;,mod); }\n&lt;span class=\"hljs-function\"&gt;LL &lt;span class=\"hljs-title\"&gt;GCD&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LL x,LL y)&lt;/span&gt;&lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; !y?x:&lt;span class=\"hljs-built_in\"&gt;GCD&lt;/span&gt;(y,x%y); }\n&lt;span class=\"hljs-function\"&gt;LL &lt;span class=\"hljs-title\"&gt;LCM&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LL x,LL y)&lt;/span&gt;&lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; x/&lt;span class=\"hljs-built_in\"&gt;GCD&lt;/span&gt;(x,y)*y; }\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; EPS &amp;#61; &lt;span class=\"hljs-number\"&gt;1E-6&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; MOD &amp;#61; &lt;span class=\"hljs-number\"&gt;1000000000&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; N &amp;#61; &lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dx[] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;};\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dy[] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;};\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n \n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Node&lt;/span&gt; {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; val;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; step;\n    &lt;span class=\"hljs-built_in\"&gt;Node&lt;/span&gt;() {}\n    &lt;span class=\"hljs-built_in\"&gt;Node&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; val, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; step) : &lt;span class=\"hljs-built_in\"&gt;val&lt;/span&gt;(val), &lt;span class=\"hljs-built_in\"&gt;step&lt;/span&gt;(step) {}\n};\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; vis[&lt;span class=\"hljs-number\"&gt;65536&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;BFS&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Node st, Node ed)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(vis, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(vis));\n    queue&amp;lt;Node&amp;gt; Q;\n    Q.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(st);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (!Q.&lt;span class=\"hljs-built_in\"&gt;empty&lt;/span&gt;()) {\n        Node now &amp;#61; Q.&lt;span class=\"hljs-built_in\"&gt;front&lt;/span&gt;();\n        Q.&lt;span class=\"hljs-built_in\"&gt;pop&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (now.val &amp;#61;&amp;#61; ed.val) {\n            cout &amp;lt;&amp;lt; now.step &amp;lt;&amp;lt; endl;\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n        }\n \n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; val &amp;#61; now.val;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; step &amp;#61; now.step;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) { &lt;span class=\"hljs-comment\"&gt;//从高到低枚举每一位&lt;/span&gt;\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x &amp;#61; (&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt; - i) / &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, y &amp;#61; (&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt; - i) % &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//横纵坐标&lt;/span&gt;\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; nowPos &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt;&amp;lt; i; &lt;span class=\"hljs-comment\"&gt;//当前位置代表权值&lt;/span&gt;\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; rightPos &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;); &lt;span class=\"hljs-comment\"&gt;//当前位置右方位置代表权值&lt;/span&gt;\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; downPos &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (i - &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;);  &lt;span class=\"hljs-comment\"&gt;//当前位置下方位置代表权值&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (y &amp;lt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &amp;amp;&amp;amp; ((val &amp;amp; nowPos) !&amp;#61; (val &amp;amp; rightPos))) { &lt;span class=\"hljs-comment\"&gt;//向右交换&lt;/span&gt;\n                &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; nextVal &amp;#61; val ^ nowPos ^ rightPos; &lt;span class=\"hljs-comment\"&gt;//交换后的状态&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!vis[nextVal]) {\n                    vis[nextVal] &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n                    Q.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;Node&lt;/span&gt;(nextVal, step &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));\n                }\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (x &amp;lt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &amp;amp;&amp;amp; ((val &amp;amp; nowPos) !&amp;#61; (val &amp;amp; downPos))) { &lt;span class=\"hljs-comment\"&gt;//向下交换&lt;/span&gt;\n                &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; nextVal &amp;#61; val ^ nowPos ^ downPos; &lt;span class=\"hljs-comment\"&gt;//交换后的状态&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!vis[nextVal]) {\n                    vis[nextVal] &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n                    Q.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;Node&lt;/span&gt;(nextVal, step &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));\n                }\n            }\n        }\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; ch;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; st &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, ed &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) {\n        cin &amp;gt;&amp;gt; ch;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (ch &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)\n            st &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt;&amp;lt; i;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) {\n        cin &amp;gt;&amp;gt; ch;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (ch &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)\n            ed &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt;&amp;lt; i;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (st &amp;#61;&amp;#61; ed)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;0\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;BFS&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;Node&lt;/span&gt;(st, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;), &lt;span class=\"hljs-built_in\"&gt;Node&lt;/span&gt;(ed, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;));\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["信息学一本通（1451:棋盘游戏）", ["输出结果不对 大家看看哪错了", "\n", "今日程序内容：", "棋盘游戏。在一个4 x 4的棋盘上有 8个黑棋和 8个白棋，当且仅当两个格子有公共边，这两个格子上的棋是相邻的。移动棋子的规则是交换相邻两个棋子。给出一个初始棋盘和一个最终棋盘，请找出一个最短的移动序列使初始棋盘变为最终棋盘。", "\n", "输入：", "前四行，每行4个数字（ 1或者0 ），描述了初始棋盘；接着是一个空行；\n第六到第九行，每行 4个数字（ 1或者0），描述了最终棋盘。\n", "\n", "输出：", "输出的第一行是一个整数", "n", "，表示最少的移动步数。\n", "\n", "\n", "#include <stdio.h>", "int A,B;", "int vis[100000];", "struct P", "{", "    int num,d;", "};", "struct P p[100];", "void bfs()", "{", "    p[0].num=A,p[0].d=0;", "    while(p[0].num!=0)", "    {", "        int tmp=p[0].num;", "        int k=0;", "        if(tmp==B)", "        {", "            printf(\"%d\\n\",p[0].d);", "            return;", "        }", "        for(int i=15;i>=0;i--)", "        {", "            int x=(15-i)/4,y=(15-i)%4,w=1<<i,z;", "            if(y<3&&(tmp&(1<<i))!=(tmp&(1<<(i-1))))", "            {", "                z=1<<(i-1);", "                if(!vis[tmp^z^w])", "                {", "                    vis[tmp^z^w]=1;", "                    p[k++].num=tmp^z^w;", "                    p[k++].d=p[0].d+1;", "                }", "            }", "            if(x<3&&(tmp&(1<<i))!=(tmp&(1<<(i-4))))", "            {", "                z=1<<(i-4);", "                if(!vis[tmp^z^w])", "                {", "                    vis[tmp^z^w]=1;", "                    p[k++].num=tmp^z^w;", "                    p[k++].d=p[0].d+1;", "                }", "            }", "        }", "    }", "}", "int main()", "{", "    int i;", "    char ch;", "    for(i=15;i>=0;i--)", "    {", "        scanf(\"%c\",&ch);", "\n", "    ", "if", "(ch==", "'1'", ")\n    {\n        A+=", "1", "<<i;\n    }\n}\ngetchar();\n", "for", "(i=", "15", ";i>=", "0", ";i--)\n{\n    scanf(", "\"%c\"", ",&ch);\n    ", "if", "(ch==", "'1'", ")\n    {\n        B+=", "1", "<<i;\n    }\n}\n", "printf", "(", "\"%d %d\"", ",A,B);\n", "if", "(A==B)\n{\n    ", "printf", "(", "\"0\\n\"", ");\n}\n", "else", "\n{\n    bfs();\n}\n", "return", " ", "0", ";\n", "\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你可以参考图的最短路径算法&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/m0_64045085/article/details/123504469\" id=\"textarea_1653206972669_1653207354620_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;图论&amp;#xff1a;图的四种最短路径算法_钟一淼的博客-CSDN博客_图论 最短路径算法&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;最短路径的四种算法&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/m0_64045085/article/details/123504469&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["选取距离之和最小的点", ["平面上有一些点称为固定点，还有另外一些点为可选点，对于每一个固定点，我们可以从可选点中找出距离其最短的点，令z=所有最短距离之和，我们的要求是从可选点中选取部分点，使得z最小"]], "Tag": "算法设计"}
{"Answer": "电子盘不存在物理寻磁道的操作，所以选择先来先服务FCFS", "Konwledge_Point": "负权边的最短路径", "Question": ["若所有硬盘全部设计成电子硬盘，哪个磁盘调度算法最合适？", ["三种调度算法：先来先服务FCFS，最短寻道时间优先算法SSTF，电梯法SCAN"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/odaynot/article/details/8117682", "Konwledge_Point": "负权边的最短路径", "Question": ["快，急急急急急急急急急急急急急", ["C语言计算汉诺塔的最短移动步数，用C语言实现，快，急急急急急急急急急急急急急"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;islower返回的就是布尔值啊&lt;br /&gt;你如果要的是小写&amp;#xff0c;用lower()就行了&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["for i in licensePlate: TypeError: 'bool' object is not iterable出现这个怎么办", ["\n", "题目求的是最短补全词", "遇到这种情况要怎么办，我根本没有bool类型为什么会报错，求帮助"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先学基础&amp;#xff0c;而后边实践边学习&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["如何迅速搭建项目框架", ["如何迅速搭建项目框架 ，如何在最短的时间内学会一套语言，如何入手力扣，走出新手村"]], "Tag": "算法设计"}
{"Answer": "其实，这个和旅行商问题是一样的。\r\n旅行商问题是：A,B,C,D,E……\r\n从A出发，经过B,C,D,E……最终还要回到A。\r\n\r\n你可以参考我的这篇博客\r\nhttp://keating.iteye.com/admin/blogs/403454\r\n\r\n如果看不懂，我再给你找找说明文档～～～", "Konwledge_Point": "负权边的最短路径", "Question": ["一个算法问题？？？", ["题目是这样的，有任意多个公交站点，比如：A,B,C,D,E……，他们各个站点的距离确定（自定义），然后求出任意一个站点到另外一个站点的最短距离，并且得到他经过的站点。比如，求A到D的最短路程，并且经过哪些站点。程序的实现是这样的：输入AB5（就表示A到B，距离为5），然后输入BC3，……。这样把所有数据输入给程序，最后任意输入两点,比如BD，然后程序打印出最短距离和经过的站点。", "\n\n", "这个算法用java怎么实现呢？尽量用面向对象的思想"]], "Tag": "算法设计"}
{"Answer": "txt文件中只存具体的数据，然后用sql语句LOAD DATA... INFILE", "Konwledge_Point": "负权边的最短路径", "Question": ["mysql从一个txt文件中 插入1200w条数据，如何编写sql语句，使得效率最高", ["mysql从一个txt文件中 插入1200w条数据，如何编写sql语句，使得效率最高，所用时间最短。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;Python 技能树这里有一个可以&amp;#xff1a;&lt;a href=\"https://bbs.csdn.net/skill/practice/python-3-14/79?typeId&amp;#61;17371\" id=\"textarea_1632911887991_1632911897817_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;技能树答题&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;技能树答题&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://bbs.csdn.net/skill/practice/python-3-14/79?typeId&amp;#61;17371&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;br /&gt;Python 技能树-&amp;gt;基础语法-&amp;gt;数据类型-&amp;gt;Python 元组&amp;#xff0c;里面就有一个“计算黑客帝国的滤镜颜色” 的代码。&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/082885119236178.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["如何用 Python 计算黑客帝国的滤镜颜色？", ["最好使用元组来计算，如果有其他的滤镜公式提供就更好了。使用 Python 元组的话，如何把代码压缩到最短？", "\n"]], "Tag": "算法设计"}
{"Answer": "BankQueue CompareS(BankQueue Q[4])//找出最短队列\r\n{\r\n\tint i;\r\n\ti=Q[0].rear-Q[0].front &lt;= Q[1].rear-Q[1].front ?  0 : 1 ;\r\n\ti=Q[i].rear-Q[i].front &lt;= Q[2].rear-Q[2].front ?  i : 2 ;\r\n\treturn Q[i].rear-Q[i].front&lt;= Q[3].rear-Q[3].front ?  Q[i] : Q[3] ;\r\n}", "Konwledge_Point": "负权边的最短路径", "Question": ["C++ 队列操作，新人小白，在线等，挺急的", ["已知4只队列，如何选中其中最短的队列，进行后续操作？", "\n求大神，讲下思路和代码，要求是原队列进行后续操作"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/w3071206219/article/details/52573783\r\n这是最长的，看完之后只要智力没有问题，应该能举一反三写出最短的", "Konwledge_Point": "负权边的最短路径", "Question": ["C语言编程问题，求大神帮助", ["输入一行字符串，输出最长的单词和最短的单词。", "\n请尽量有简单语句编写(我是c语言初学者)，感谢！感谢！感谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;if代码块要加大括号啊&lt;br /&gt;if (len &amp;gt; max2)&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;max2 &amp;#61; len; max1.erase(); max1.replace(0, len, s);&lt;br /&gt;}、&lt;br /&gt; if (len &amp;lt; min2)&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;min2 &amp;#61; len; min1.erase(); min1.replace(0, len, s);&lt;br /&gt;}&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["C++代码中的判断语句出现错误", ["【题目描述】", "输入1行句子(不多于200个单词，每个单词长度不超过100)，只包含字母、空格和逗号。单词由至少一个连续的字母构成，空格和逗号都是单词间的间隔。", "\n", " 试输出第1个最长的单词和第1个最短单词。", "\n", "【输入】", "一行句子。", "\n", "【输出】", "第1行，第一个最长的单词。", "\n", "第2行，第一个最短的单词。", "\n", "【输入样例】", "I am studying Programming language C in Peking University", "【输出样例】", "Programming", "I", "【提示】", "提示：", "\n", "如果所有单词长度相同，那么第一个单词既是最长单词也是最短单词。", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<string.h>", "\n", "#", "include", "<cstdio>", "\n", "#", "include", " ", "<string>", "\n", "using", " ", "namespace", " std;\nstring s;\n", "int", " ", "main", "()", " ", "{\n    string max1, min1;\n    ", "int", " max2=", "0", ", min2=", "200", ";\n    ", "int", " len; \n    ", "while", " (cin>>s&&s.", "size", "()!=", "0", ") {\n        len = s.", "size", "();\n        ", "if", " (len > max2) max2 = len; max1.", "erase", "(); max1.", "replace", "(", "0", ", len, s);\n        ", "if", " (len < min2) min2 = len; min1.", "erase", "(); min1.", "replace", "(", "0", ", len, s);\n    }\n    cout << max1 << ", "\" \"", "<<min1 << endl;\n    ", "return", " ", "0", ";\n}\n\n", "\n", "如图，他好像没有进行判断便运行了。是不是我的代码有些问题？", "我想要求最长单词和最短单词"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-php\"&gt;\n&lt;span class=\"hljs-variable\"&gt;$arr1&lt;/span&gt;&amp;#61;array(strlen(&lt;span class=\"hljs-variable\"&gt;$len1&lt;/span&gt;)&amp;#61;&amp;gt;&lt;span class=\"hljs-variable\"&gt;$len1&lt;/span&gt;,strlen(&lt;span class=\"hljs-variable\"&gt;$len2&lt;/span&gt;)&amp;#61;&amp;gt;&lt;span class=\"hljs-variable\"&gt;$len2&lt;/span&gt;,strlen(&lt;span class=\"hljs-variable\"&gt;$len3&lt;/span&gt;)&amp;#61;&amp;gt;&lt;span class=\"hljs-variable\"&gt;$len3&lt;/span&gt;); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;用循环像这样添加&amp;#xff0c;添加之前判断是否为空\narsort(&lt;span class=\"hljs-variable\"&gt;$arr1&lt;/span&gt;); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;按照键的大小排序\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; print_r(&lt;span class=\"hljs-variable\"&gt;$arr1&lt;/span&gt;);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;按照键的大小输出关联数组\n&lt;span class=\"hljs-variable\"&gt;$arr2&lt;/span&gt;&amp;#61;array_values(&lt;span class=\"hljs-variable\"&gt;$arr1&lt;/span&gt;);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;关联数组转普通数组,\necho &lt;span class=\"hljs-variable\"&gt;$arr2&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;字符最长的下标是&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,第二是&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#xff0c;最小的是数组长度-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\necho &lt;span class=\"hljs-variable\"&gt;$arr2&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt; ;\necho &lt;span class=\"hljs-variable\"&gt;$arr2&lt;/span&gt;[count(&lt;span class=\"hljs-variable\"&gt;$arr2&lt;/span&gt;)-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt; ;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["关于PHP比较字符串长度的简洁方法请教", ["$", "le", "n1", "=", "'大江东去，浪淘尽，'", ";\n$", "le", "n2", "=", "'大江东去，浪淘尽，千古风流人物。故垒西边，'", ";\n$", "le", "n3", "=", "'大江东去，浪淘尽，千古风流人物。故垒西边，人道是，三国周郎赤壁。人生如梦，一尊还酹江月。'", ";\n$", "le", "n7", "=", "''", ";\n$", "le", "n4", "=", "'大江东去，浪淘尽，千古风流人物。'", ";\n$", "le", "n5", "=", "'大江东去，浪淘尽，千古风流人物。故垒西边，人道是，三国周郎赤壁。'", ";\n$", "le", "n6", "=", "'大江东去，浪淘尽，千古风流人物。故垒西边，人道是，'", ";\n$", "le", "n8", "=", "''", ";\n", "\n", "如何一次性比较出以上8个字符串的长度（或者循环比较出），并分别输出以下3组字符串呢？", "1、最短的字符串（不含空字符串）", "2、第二短的字符串", "3、最长的字符串", "\n", "以下是我写的找出最短字符串的代码（按三个字符串），但是感觉好复杂啊～结果好像也有问题～", "\n", "$str", "=", "$len1", "<", "$len2", "?(", "$len1", "<", "$len3", "?", "$len1", ":", "$len3", "):(", "$len2", "<", "$len3", "?", "$len2", ":", "$len3", ");\n", "echo", " ", "\"最短字符串内容如下：\"", " ", "$str", ";\n", "\n", "目前的难点是如果有几组空字符串混杂其中时，如何找出最短的那个非空字符串呢？那么第二短的也就好找了，相对的，最长的好像已经解决了。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;为了解决这个问题&amp;#xff0c;我们可以使用贪心的思想&amp;#xff0c;每次选择最少的时间办理业务的窗口。&lt;/p&gt;\n&lt;p&gt;首先&amp;#xff0c;我们需要定义一个数组time[3]来保存每个窗口办理业务的时间。然后&amp;#xff0c;我们依次遍历每一位客户&amp;#xff0c;每当有一个客户需要办理业务时&amp;#xff0c;我们就在time数组中选择最少的时间办理业务的窗口&amp;#xff0c;并把该客户办理业务的时间加入time数组中对应的窗口。&lt;/p&gt;\n&lt;p&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; namespace std;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    cin &amp;gt;&amp;gt; n; // 输入客户数量\n\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}; // 定义并初始化&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;数组\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t;\n        cin &amp;gt;&amp;gt; t; // 输入客户i办理业务的时间\n\n        // 选择最少的时间办理业务的窗口\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; minTime &amp;#61; min(&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], min(&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]));\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61;&amp;#61; minTime)\n        {\n            &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#43;&amp;#61; t; // 把客户i办理业务的时间加入窗口&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;的时间\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61;&amp;#61; minTime)\n        {\n            &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43;&amp;#61; t; // 把客户i办理业务的时间加入窗口&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;的时间\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#43;&amp;#61; t; // 把客户i办理业务的时间加入窗口&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;的时间\n        }\n    }\n\n    // 输出最短时间\n    cout &amp;lt;&amp;lt; min(&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], min(&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])) &amp;lt;&amp;lt; endl;\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在这个代码中&amp;#xff0c;我们使用了C&amp;#43;&amp;#43;的min函数来选择time数组中最少的时间办理业务的窗口&amp;#xff0c;然后将该客户办理业务的时间加入time数组中对应的窗口。最后&amp;#xff0c;我们使用min函数再次计算time数组中的最小值&amp;#xff0c;并输出。&lt;/p&gt;\n&lt;p&gt;这个算法的时间复杂度是O(n)&amp;#xff0c;可以在很短的时间内解决问题。&lt;/p&gt;\n&lt;p&gt;我们可以通过下面的代码来测试这个算法的正确性&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; namespace std;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    cin &amp;gt;&amp;gt; n; // 输入客户数量\n\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}; // 定义并初始化&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;数组\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t;\n        cin &amp;gt;&amp;gt; t; // 输入客户i办理业务的时间\n\n        // 选择最少的时间办理业务的窗口\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; minTime &amp;#61; min(&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], min(&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]));\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61;&amp;#61; minTime)\n        {\n            &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#43;&amp;#61; t; // 把客户i办理业务的时间加入窗口&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;的时间\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61;&amp;#61; minTime)\n        {\n            &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43;&amp;#61; t; // 把客户i办理业务的时间加入窗口&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;的时间\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#43;&amp;#61; t; // 把客户i办理业务的时间加入窗口&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;的时间\n        }\n    }\n\n    // 输出最短时间\n    cout &amp;lt;&amp;lt; min(&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], min(&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])) &amp;lt;&amp;lt; endl;\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这样子我们可以输入5位客户的办理业务的时间&amp;#xff0c;然后根据我们前面提到的贪心算法的思路&amp;#xff0c;选择最少的时间办理业务的窗口&amp;#xff0c;并将该客户办理业务的时间加入time数组中对应的窗口。最后&amp;#xff0c;我们输出time数组中的最小值&amp;#xff0c;就可以得到最短的办理业务的时间。&lt;/p&gt;\n&lt;p&gt;例如&amp;#xff0c;如果我们输入的办理业务的时间分别为3、5、2、4、1&amp;#xff0c;那么最终time数组的值分别为10、9、6&amp;#xff0c;最短的办理业务的时间就是6。&lt;/p&gt;\n&lt;p&gt;这个算法的正确性是基于贪心算法的思路&amp;#xff0c;每次都选择最少的时间办理业务的窗口&amp;#xff0c;最终可以得到最优的解。&lt;/p&gt;\n&lt;p&gt;希望这些内容对你有帮助&amp;#xff01;可以话请给博主点个采纳&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["业务办理时间问题C++", ["\n", "【题目描述】某服务大厅同时开放3个窗口为客户办理业务，窗口编号分别为1、2、3。现有N（2≤N≤50）位客户需要办理业务，客户编号为1~N，作为办理业务的先后顺序。起初三个窗口为空闲状态，空闲的窗口会按照客户编号顺序呼叫下一位客户。如果多个窗口同时为空闲状态，按照窗口编号顺序呼叫（1优先于2，2优先于3）。现给出每位客户办理业务的时间（单位：分钟），请计算出N位客户全部办理完业务后，哪一个窗口合计办理业务的时间最短，并输出最短时间"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;分别找出m和n所在的行号和列号&amp;#xff0c;求出行列的差值相加&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;math.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; w,m,n;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; row1,col1,row2,col2;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d%d&amp;#34;&lt;/span&gt;,&amp;amp;w,&amp;amp;m,&amp;amp;n);\n    row1 &amp;#61; &lt;span class=\"hljs-regexp\"&gt;m/w;\n    row2 &amp;#61; n/&lt;/span&gt;w;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(row1%2&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        col1 &amp;#61; m%w-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        col1 &amp;#61; w-m%w;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(row2%2&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        col2 &amp;#61; n%w-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        col2 &amp;#61; w-n%w;\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-keyword\"&gt;abs&lt;/span&gt;(col1-col2) &amp;#43; &lt;span class=\"hljs-keyword\"&gt;abs&lt;/span&gt;(row1-row2));\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["简单的程序题c语言请教一下", ["x星球居民小区的楼房都是一样的，并且按矩阵样式排列，其楼房的编号为1，2，3等等", "当排满一行时，从下一行相邻的楼往反方向排号", "比如:当小区排号为6时，开始情形如下", "1  2  3  4  5  6", "12 11 10 9  8 7", "13  14  15等等", "我们的问题是已知两个楼号m和n，需要求出它们之间的最短移动距离（不能斜线方向移动）", "输入为3个整数w m n，空格分开，都在1到10000范围内，w为排号宽度，m，n为待计算的楼号", "要求输入一个整数，表示m，n两楼间的最短移动距离", "例如:", "用户输入", "6 8 2", "则，程序该输出", "4"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;没有中转&amp;#xff0c;那就是判断当前航班的Dest是否作为其他航班的Source&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["关于python结合sql的问题，如何解决？", ["在Python中写SQL语句，这里需要筛选出所有可以直达目的地的航班（没有中转），我的理解筛选出出发地到目的地消耗时间最短的航班（不知道对不对），在sql变量里面要怎么表示？", "\n", "表名叫做Flights.", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "数据结构中的图所有路径以及最短路径的算法", "Konwledge_Point": "负权边的最短路径", "Question": ["有趣的问题，进来看看", ["  1、北京地铁图。已知两条线路交汇处的结点处，可以知道邻近线路的地铁运行时间、间隔时间...\n\n       设计一种数据结构，编程实现：\n\n       （1）从一站点到另一站点的所有线路。\n\n       （2）从一站点到另一站点的时间最短线路。\n"]], "Tag": "算法设计"}
{"Answer": "根据题意，空格和逗号都是分割符\r\nif(ch[i]==' ')\r\n-&gt;\r\nif(ch[i]==' ' || ch[i] == ',')\r\n\r\n\r\n\r\n```\r\n\r\n#include&lt;stdio.h&gt;\r\n#include&lt;string.h&gt;\r\nint main()\r\n{\r\n    char ch[22222];\r\n    int i,max=0,min=120,a,b,c,d,t=0;\r\n\ta=b=c=d=0;\r\n    gets(ch);\r\n    int len=strlen(ch);\r\n    for(i=0;i&lt;=len;i++)\r\n    {\r\n\r\n        if(ch[i]==' ' || ch[i]==',' || ch[i]=='\\0')\r\n        {\r\n\r\n            int n=i-t;\r\n\t\t\tif (n &gt; 0)\r\n\t\t\t{\r\n            if(n&gt;max) {max=n;a=t;b=i-1;}\r\n            if(n&lt;min) {min=n;c=t,d=i-1;}\r\n\t\t\t}\r\n            t=i+1;\r\n        }\r\n    }\r\n\r\n    for(i=a;i&lt;=b;i++)\r\n        printf(\"%c\",ch[i]);\r\n        printf(\"\\n\");\r\n    for(i=c;i&lt;=d;i++)\r\n        printf(\"%c\",ch[i]);\r\n    return 0;\r\n}\r\n```\r\nhttp://noi.openjudge.cn/ch0107/solution/22519898/\r\naccepted了", "Konwledge_Point": "负权边的最短路径", "Question": ["字符串的一道题，我的答案超时了，希望大神在原有基础上帮我改正", ["描述", "\n输入1行句子（不多于200个单词，每个单词长度不超过100），只包含字母、空格和逗号。单词由至少一个连续的字母构成，空格和逗号都是单词间的间隔。", "\n试输出第1个最长的单词和第1个最短单词。 ", "\n输入", "\n一行句子。", "\n输出", "\n两行输出：", "\n第1行，第一个最长的单词。", "\n第2行，第一个最短的单词。", "\n样例输入", "\nI am studying Programming language C in Peking University", "\n样例输出", "\nProgramming", "\nI", "\n提示", "\n如果所有单词长度相同，那么第一个单词既是最长单词也是最短单词。", "\n\n", "#include<stdio.h>\n#include<string.h>\nint main()\n{\n    char ch[222222];\n    int i,max=0,min=120,a,b,c,d,t=0;\n    gets(ch);\n    int len=strlen(ch);\n    for(i=0;i<len;i++)\n    {\n\n        if(ch[i]==' ')\n        {\n\n            int n=i-t+1;\n            if(n>max) {max=n;a=t;b=i-1;}\n            if(n<min) {min=n;c=t,d=i-1;}\n            t=i+1;\n        }\n    }\n\n    for(i=a;i<=b;i++)\n        printf(\"%c\",ch[i]);\n        printf(\"\\n\");\n    for(i=c;i<=d;i++)\n        printf(\"%c\",ch[i]);\n    return 0;\n}\n\n", "\n\n", "地址", "http://noi.openjudge.cn/ch0107/25/"]], "Tag": "算法设计"}
{"Answer": "虚拟机防火墙关闭么，1158的端口是否占用，vm里面是否可以此命令登入", "Konwledge_Point": "负权边的最短路径", "Question": ["本机链接虚拟机数据库，出现ORA-12569: TNS:packet checksum failure错误提醒", ["本机和虚拟机可以联通，访问虚拟机数据出错", "\n\n", "```C:\\Users\\liuye>ping 192.168.88.130", "\n\n", "正在 Ping 192.168.88.130 具有 32 字节的数据:", "\n来自 192.168.88.130 的回复: 字节=32 时间<1ms TTL=128", "\n来自 192.168.88.130 的回复: 字节=32 时间<1ms TTL=128", "\n来自 192.168.88.130 的回复: 字节=32 时间<1ms TTL=128", "\n来自 192.168.88.130 的回复: 字节=32 时间<1ms TTL=128", "\n\n", "192.168.88.130 的 Ping 统计信息:", "\n    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，", "\n往返行程的估计时间(以毫秒为单位):", "\n    最短 = 0ms，最长 = 0ms，平均 = 0ms", "\n\n", "C:\\Users\\liuye>sqlplus scott/tiger@192.168.88.130:1158/orcl", "\n\n", "SQL*Plus: Release 12.1.0.1.0 Production on Tue Jun 11 18:54:47 2019", "\n\n", "Copyright (c) 1982, 2013, Oracle.  All rights reserved.", "\n\n", "ERROR:", "\nORA-12569: TNS:packet checksum failure", "\n\n", "Enter user-name:", "\n\n"]], "Tag": "算法设计"}
{"Answer": "//存在数组 int[] input = {0,1,2,3,4,...,49}\r\n\r\n//随即一个 属于[0,49] 的整数  i\r\n\r\n//因为你要5个均衡随机数，所以设置平均步长  step = input.length / 5 = 10\r\n\r\n//循环五次,结果为 result[]\r\n\r\nfor(int j = 0, j &lt; 5, j++){\r\n     result[j] = input [ i % 50 ];\r\n     i  =  i  +  step;\r\n}\r\n\r\n//其实我也不太明白你的问题，题意我是猜的", "Konwledge_Point": "负权边的最短路径", "Question": ["找一个数组里面的随机数问题", ["有这样一个问题 ，例如有一个【0,50】的数组，数组下标从0开始一直到49，数组的值和数组下标值一样，我怎么样在最短的时间里面找出我要的5个随机数， 例如 ：1,5,9,7,42 。重要的一点是要保持随即数要均衡。"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/u012774187/article/details/41734977", "Konwledge_Point": "负权边的最短路径", "Question": ["HDU-3751 找最短路必经点，超时了", ["代码：", "代码", "\n\n", "我的思路：先存这个图上从小偷家到各点的最短时间在d1数组，存警察到图上各点最短时间在d2数组， 然后遍历小偷以最短路回家可能经过的位置，这个位置是不是一定经过，然后求出最小时间"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/hero5201/article/details/51812963", "Konwledge_Point": "负权边的最短路径", "Question": ["最短路                                算法问题", ["Problem Description", "\n在每年的校赛里，所有进入决赛的同学都会获得一件很漂亮的t-shirt。但是每当我们的工作人员把上百件的衣服从商店运回到赛场的时候，却是非常累的！所以现在他们想要寻找最短的从商店到赛场的路线，你可以帮助他们吗？", "\n\n", "Input", "\n输入包括多组数据。每组数据第一行是两个整数N、M（N<=100，M<=10000），N表示成都的大街上有几个路口，标号为1的路口是商店所在地，标号为N的路口是赛场所在地，M则表示在成都有几条路。N=M=0表示输入结束。接下来M行，每行包括3个整数A，B，C（1<=A,B<=N,1<=C<=1000）,表示在路口A与路口B之间有一条路，我们的工作人员需要C分钟的时间走过这条路。", "\n输入保证至少存在1条商店到赛场的路线。", "\n\n", "Output", "\n对于每组输入，输出一行，表示工作人员从商店走到赛场的最短时间", "\n\n", "Sample Input", "\n2 1", "\n1 2 3", "\n3 3", "\n1 2 5", "\n2 3 5", "\n3 1 2", "\n0 0", "\n\n", "Sample Output", "\n3", "\n2"]], "Tag": "算法设计"}
{"Answer": "http://www.cnblogs.com/pblr/p/4748902.html", "Konwledge_Point": "负权边的最短路径", "Question": ["Dijkstra Or Floyd Or dfs ", ["Problem Description", "\n在每年的校赛里，所有进入决赛的同学都会获得一件很漂亮的t-shirt。但是每当我们的工作人员把上百件的衣服从商店运回到赛场的时候，却是非常累的！所以现在他们想要寻找最短的从商店到赛场的路线，你可以帮助他们吗？", "\n\n", "Input", "\n输入包括多组数据。每组数据第一行是两个整数N、M（N<=100，M<=10000），N表示成都的大街上有几个路口，标号为1的路口是商店所在地，标号为N的路口是赛场所在地，M则表示在成都有几条路。N=M=0表示输入结束。接下来M行，每行包括3个整数A，B，C（1<=A,B<=N,1<=C<=1000）,表示在路口A与路口B之间有一条路，我们的工作人员需要C分钟的时间走过这条路。 输入保证至少存在1条商店到赛场的路线。", "\n\n", "Output", "\n对于每组输入，输出一行，表示工作人员从商店走到赛场的最短时间", "\n\n", "Sample Input", "\n 2 1", "\n 1 2 3", "\n 3 3", "\n 1 2 5", "\n 2 3 5", "\n 3 1 2", "\n 0 0", "\n\n", "Sample Output", "\n 3", "\n 2"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/u013885699/article/details/21111601", "Konwledge_Point": "负权边的最短路径", "Question": ["最短路                  ", ["Problem Description", "\n\n", "在每年的校赛里，所有进入决赛的同学都会获得一件很漂亮的t-shirt。但是每当我们的工作人员把上百件的衣服从商店运回到赛场的时候，却是非常累的！所以现在他们想要寻找最短的从商店到赛场的路线，你可以帮助他们吗？", "\n\n", "Input", "\n\n", "输入包括多组数据。每组数据第一行是两个整数N、M（N<=100，M<=10000），N表示成都的大街上有几个路口，标号为1的路口是商店所在地，标号为N的路口是赛场所在地，M则表示在成都有几条路。N=M=0表示输入结束。接下来M行，每行包括3个整数A，B，C（1<=A,B<=N,1<=C<=1000）,表示在路口A与路口B之间有一条路，我们的工作人员需要C分钟的时间走过这条路。", "\n\n", "输入保证至少存在1条商店到赛场的路线", "\n\n", "Output", "\n\n", "对于每组输入，输出一行，表示工作人员从商店走到赛场的最短时间", "\n\n", "Sample Input", "\n\n", "2 1", "\n\n", "1 2 3", "\n\n", "3 3", "\n\n", "1 2 5", "\n\n", "2 3 5", "\n\n", "3 1 2", "\n\n", "0 0", "\n\n", "Sample Output", "\n\n", "3", "\n\n", "2"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你题目的解答代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入句子数: &amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    &lt;span class=\"hljs-built_in\"&gt;getchar&lt;/span&gt;();\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; str[n][&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; min,max;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-built_in\"&gt;gets&lt;/span&gt;(str[i]);\n    }\n    min&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    max&amp;#61;min;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;你输入了下面这几句话&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;,str[i]);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; temp&amp;#61;&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(str[i]);\n        min &amp;#61; temp &amp;lt; &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(str[min]) ? i : min;\n        max &amp;#61; temp &amp;gt; &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(str[max]) ? i : max;\n    }\n     &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;其中最长的是&amp;#xff1a;%s\\n&amp;#34;&lt;/span&gt;, str[max]);\n     &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;其中最短的是&amp;#xff1a;%s\\n&amp;#34;&lt;/span&gt;, str[min]);\n     &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["输入有问题 不知道该怎么改", ["写一个程序，让用户输入 n 句话，并计算出最长和最短的两句。", "使用 1 个二维数组存储用户输入的 n句话。", "\n", "\n```c\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<string.h>", "\n", "int", " ", "main", "()", "{\n    ", "int", " n;\n    ", "printf", "(", "\"请输入句子数: \"", ")； \n    ", "scanf", "(", "\"%d\"", ",&n);\n    ", "char", " str[n][", "100", "];\n    ", "int", " min,max;\n    ", "for", "(", "int", " i=", "0", ";i<n;i++){\n        ", "for", "(", "int", " j=", "0", ";(ch=", "getchar", "())!=", "'\\n'", ";j++){\n            str[i][j]=ch;\n        }\n        str[i][j]=", "'\\0'", ";\n    }\n    min=", "0", ";\n    max=min;\n    ", "printf", "(", "\"你输入了下面这几句话\"", ");\n    ", "for", "(", "int", " i=", "0", ";i<n;i++){\n        ", "scanf", "(", "\"%s\\n\"", ",str[i]);\n        temp=", "strlen", "(str[i]);\n        min = temp < ", "strlen", "(str[min]) ? i : min;\n        max = temp > ", "strlen", "(str[max]) ? i : max;\n    }\n     ", "printf", "(", "\"其中最长的是：%s\\n\"", ", str[max]);\n     ", "printf", "(", "\"其中最短的是：%s\\n\"", ", str[min]);\n     ", "return", " ", "0", ";\n    \n}\n\n", "\n", "```"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我提供一个思路&amp;#xff1a;&lt;br /&gt;一个字符串和它的逆序字符串肯定是回文&amp;#xff0c;所以&amp;#xff0c;将字符串的逆序依次附加到原始字符串上&amp;#xff0c;判断是否为回文即可。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;build_palindrome&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;):\n    r &amp;#61; s[::-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n    length &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(r)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,length&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        s0 &amp;#61; s &amp;#43; r[-i:]\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; s0 &amp;#61;&amp;#61; s0[::-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]:\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(s0)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["问python的一道题", ["请问这题应该如何思考 ?", "一点思路都没有:(", "\n", "\n", "\"\"\"\n给定一个字符串str，\n通过在初始字符串的末尾添加字符使其成为回文，\n找到可能最短的字符串。\n对于str=“abcdc”，输出应为“abcdcba”。\n\"\"\"", "\n", "def", " ", "build_palindrome", "(", "s", "):\n    ", "pass", "\n\n", "print", "(build_palindrome(", "\"abcdc\"", "))\n", "#\"abcdcba\"", "\n", "print", "(build_palindrome(", "\"ababab\"", "))\n", "#\"abababa\"", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; re\ns&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;[0.0005, 0.0005, 0.0005]&amp;#39;&lt;/span&gt;\nregexp &amp;#61; re.&lt;span class=\"hljs-built_in\"&gt;compile&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;r&amp;#34;\\d&amp;#43;\\.\\d&amp;#43;&amp;#34;&lt;/span&gt;)\nget &amp;#61; regexp.findall(s)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(get)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["关于#正则表达式#的问题：希望有这样一个正则表达式，可以实现对于方括号内部的数字字符串的提取", ["现有一个字符串", "[0.0005, 0.0005, 0.0005]", "，希望有这样一个正则表达式，可以实现对于方括号内部的数字字符串的提取。但是要注意的是，方括号中的数字字符串列表数量不是固定的，最短可以是", "[0.0005]", ", 最多无上限", "[0.0005, 0.0005, ... (n个), 0.0005]", "。", "如何简洁高效的提取里面的所有", "0.0005", "？"]], "Tag": "算法设计"}
{"Answer": "```\r\n from __future__ import print_function\r\n\r\nimport sys\r\n\r\nfrom pyspark.sql import SparkSession\r\n\r\ndef min(a,b):\r\n    return a if a &lt; b else b\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    if len(sys.argv) != 2:\r\n        print(\"Usage:  odcount &lt;file&gt;\", file=sys.stderr)\r\n        exit(-1)\r\n\r\n    spark = SparkSession\\\r\n        .builder\\\r\n        .appName(\"PythonODCount\")\\\r\n        .getOrCreate()\r\n\r\n    lines = spark.read.text(sys.argv[1]).rdd.map(lambda r: r[0])\r\n    lines = lines.filter( lambda line: len(line.strip()) &gt; 0 )\r\n    mintimes = lines.flatMap(lambda x: [x[1:-1]]) \\\r\n                  .map( lambda x: (x.split(',')[0], int(x.split(',')[2])) ) \\\r\n                  .reduceByKey(min)\r\n    mintime_list = mintimes.collect()\r\n    mintime_map = {}\r\n    print(\"min time:\")\r\n    for (od, mintime) in mintime_list:\r\n        mintime_map[od] = mintime\r\n        print(\"%s: %i\" % (od.encode('utf-8'), mintime))\r\n        \r\n    largelines = lines.flatMap(lambda x: [x[1:-1]]) \\\r\n                  .filter( lambda x: int(x.split(',')[2]) &gt; 2 * mintime_map.get(x.split(',')[0]) )\r\n    \r\n    print(\"large time line:\")\r\n    for line in largelines.collect():\r\n        print(\"%s\" % line.encode('utf-8'))\r\n\r\n    spark.stop()\r\n```", "Konwledge_Point": "负权边的最短路径", "Question": ["还是昨天的Spark数据分析的问题，求代码，有帮助的可以再加C币", ["现在我有一组数据，第一列是入站口到出站口（OD），第二列是刷卡的卡号，第三列是出行总时间。", "\n现在我想研究在相同的OD下，出行时长的分布，并从中筛选出出行时长异常的卡号，默认出行时长超过该OD最短出行时长2倍为异常。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1、调试发现这个代码还是有问题的&amp;#xff0c;在取最短字符串的没有赋值a[0]而是赋值为空&amp;#xff0c;导致第二个测试数据在寻找最小字符串时候为空。&lt;br /&gt;2、寻找最长字符串可以嵌套三层循环&lt;br /&gt; news &amp;#61; a[0]&lt;br /&gt;for i in a[ 1: ]:&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  for j in news:&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for k in i :&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;      将news中的每一个与剩下a数组中的每一个对比&amp;#xff0c;相同保留&amp;#xff0c;不相同跳下一个&lt;/span&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["这个是查找字符串数组中开头的最长公共字符串，怎么改成查找字符串数组中最长的公共字符串", ["问题相关代码", "\n", "def", " ", "get_commonstr", "(", "a", "):\n    ", "if", " ", "len", "(a)==", "0", ":\n        ", "return", " ", "\"\"", "\n    cd,zcd=", "len", "(a),", "len", "(a[", "0", "])\n    news=", "\"\"", "#公共字符串", "\n    ", "for", " i ", "in", " a[", "1", ":]:\n        ", "if", " zcd>", "len", "(i):\n            zcd=", "len", "(i) ", "#最短字符串长度", "\n            news=i ", "#最短字符串", "\n    ", "for", " m ", "in", " ", "range", "(zcd):\n        flag=", "False", " ", "#退出外部循环标志", "\n        ", "for", " i ", "in", " a:", "#2；取值0,1", "\n            ", "if", " news[m]!=i[m]: ", "#根据字符位置比较是否相等", "\n                news=news[:m]\n                flag=", "True", "\n                ", "break", "\n        ", "if", " flag:\n            ", "break", "\n    ", "return", " news\n\n\n", "# s1=[\"fliower\",\"fliowe\",\"flight\"]", "\ns1=[[", "'fliower'", ",\n  ", "'wesaawsfliower'", ",\n  ", "'dowflight'", ",\n  ", "'abcdefg!fliower.exe'", ",\n  ", "\"{'aw1qwf': 'fliower.exe', 'Bu': 'fliower'}\"", "]]\n", "if", " __name__==", "\"__main__\"", ":\n    ", "print", "[(", "\"结果:\"", "+get_commonstr(s1))]\n\n", "\n", "运行结果", "\n", "IndexError: string index out of range", "\n", "我想要达到的结果", "\n", "这个是查找字符串数组中开头的最长公共字符串，怎么改成查找字符串数组中最长的公共字符串", "比如上边的数组中，最长的公共字符串就是fliower"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#include &amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main()\n{\n    string &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;;\n    cin&amp;gt;&amp;gt;&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n;\n    n&amp;#61;&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;.length();\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(n%&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n/&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;[i]!&amp;#61;&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;[n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;-i])\n            {\n                cout&amp;lt;&amp;lt;n&amp;lt;&amp;lt;endl;\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            }\n        }\n        n&amp;#61;n/&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n    }\n    cout&amp;lt;&amp;lt;n&amp;lt;&amp;lt;endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["输出答案没有问题，但显示时间超限怎么解决", ["M队长几经辗转成为了学院组织的邪恶科学家。有一天他在研究FEV强制进化病毒。他发现FEV病毒有一种神奇的复制模式。FEV病毒进入生物体内，会将有害DNA片段注入宿主DNA，并在宿主的DNA上进行复制。", "\n", "为了简化说明该过程，我们把有害DNA片段抽象成1~26个小写拉丁字母的字符串S1。假设初始片段为ab，那么他会自我镜像复制并连接成为abba的字符串，复制若干次可能变成abbaabba。", "\n", "现在M队长会给你复制之后的字符串S2，请你帮助他推断出初始串的可能最短长度。"]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/mis-xiao/p/3921401.html", "Konwledge_Point": "负权边的最短路径", "Question": ["HDU Today                     ", ["Problem Description", "\n经过锦囊相助，海东集团终于度过了危机，从此，HDU的发展就一直顺风顺水，到了2050年，集团已经相当规模了，据说进入了钱江肉丝经济开发区500强。这时候，XHD夫妇也退居了二线，并在风景秀美的诸暨市浬浦镇陶姚村买了个房子，开始安度晚年了。", "\n这样住了一段时间，徐总对当地的交通还是不太了解。有时很郁闷，想去一个地方又不知道应该乘什么公交车，在什么地方转车，在什么地方下车（其实徐总自己有车，却一定要与民同乐，这就是徐总的性格）。", "\n徐总经常会问蹩脚的英文问路：“Can you help me?”。看着他那迷茫而又无助的眼神，热心的你能帮帮他吗？", "\n请帮助他用最短的时间到达目的地（假设每一路公交车都只在起点站和终点站停，而且随时都会开）。", "\n\n", "Input", "\n输入数据有多组，每组的第一行是公交车的总数N(0<=N<=10000)；", "\n第二行有徐总的所在地start，他的目的地end；", "\n接着有n行，每行有站名s，站名e，以及从s到e的时间整数t(0<t<100)(每个地名是一个长度不超过30的字符串)。", "\nnote：一组数据中地名数不会超过150个。", "\n如果N==-1，表示输入结束。", "\n\n", "Output", "\n如果徐总能到达目的地，输出最短的时间；否则，输出“-1”。", "\n\n", "Sample Input", "\n6", "\nxiasha westlake", "\nxiasha station 60", "\nxiasha ShoppingCenterofHangZhou 30", "\nstation westlake 20", "\nShoppingCenterofHangZhou supermarket 10", "\nxiasha supermarket 50", "\nsupermarket westlake 10", "\n-1", "\n\n", "Sample Output", "\n50"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在OpenCASCADE&amp;#xff08;OCE&amp;#xff09;中&amp;#xff0c;可以使用BRepIntCurveSurface_Inter.hxx头文件中的BRepIntCurveSurface_Inter类求射线与TopoDS_Shape的交点。&lt;/p&gt;\n&lt;p&gt;下面是一个简单的代码示例&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/072603804576128.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;br /&gt;这是一个简单的代码示例&amp;#xff0c;你可以根据自己的需求修改。希望对您有所帮助&amp;#xff01;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["怎么求射线与TopoDS_Shape的交点？", ["\n", "我现在想要从某点发射一条射线与TopoDS_Shape相交并获取交点。", "因为我没找到射线与TopoDS_Shape相交的方法，所以只能通过射线与TopoDS_Face逐个求交，取距离源点最短那个交点的办法来获取交点。", "但是由图中可知所求出来的交点不只1个，于是选择哪个就是个问题。", "我想通过判定点是否在曲面上的办法求出交点，但是发现指定精度阈值以后，感官看上去的交点丢失了。于是怎么设置阈值又是个问题。", "所以我想问的问题是", "怎么求射线与TopoDS_Shape的交点？这里我想要的是最佳实践。", "OpenCascade版本是7.5.0"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;已经用脚本写出来了&amp;#xff0c;其实不用游标也可以&amp;#xff0c;写的脚本如下&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;UPDATE elevator_enterprise_sy_analyse t1 JOIN (SELECT t1.id,t2.ent_extend2 FROM\n(\nSELECT ent_extend2,MIN(ent_extend3) ent_extend3 FROM elevator_enterprise_sy_analyse WHERE ent_extend1&amp;#61;1 GROUP BY ent_extend2\n) t2\nLEFT JOIN elevator_enterprise_sy_analyse t1 ON t1.ent_extend2&amp;#61;t2.ent_extend2 AND t1.ent_extend3&amp;#61;t2.ent_extend3) \nt2 ON t1.ent_extend2 &amp;#61; t2.ent_extend2\nSET t1.fk_root_id &amp;#61; t2.id,t1.fk_ent_pid&amp;#61;t2.id WHERE t1.ent_extend1&amp;#61;1 AND t1.fk_root_id&amp;#61;t1.id  ;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["mysql存储过程数据问题处理，游标", ["MySQL现在遇到这个问题需要写存储过程进行处理，问题场景如下：", "\n\n", "对同一张表数据循环更新，如表test，中存在，a，b，c，d，e，f，g，其中a为主键，现阶段a与b数据一致，如果数据量在500，其中c列存在一部分相同数据（如500条去重后可能只有100多条数据），现需要将c字段中相同的字段的b列更新为d列长度最短的那条（d列数据是c+其他字符）记录的a列id主键，如图，红框内容更新为黄框中，用游标写但是逻辑上没搞清楚，在线等", "\n\n", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;telnet 命令需要加端口&amp;#xff0c;如果有具体的端口就加具体的端口  没有加个80&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["win10在控制面板明明已经启用了telnet,可是在服务里找不到telnet，telnet用不了 ！", ["win10在控制面板明明已经启用了telnet,可是在服务里找不到telnet，telnet用不了：", "\n", "可以ping成功：", "\n", "C:\\Users\\11917>ping 192.168.10.18\n\n正在", " Ping ", "192.168.10.18 具有 32 字节的数据:\n来自 192.168.10.18 的回复: 字节=32 时间=1ms ", "TTL", "=64\n来自 192.168.10.18 的回复: 字节=32 时间=1ms ", "TTL", "=64\n来自 192.168.10.18 的回复: 字节=32 时间=1ms ", "TTL", "=64\n来自 192.168.10.18 的回复: 字节=32 时间=1ms ", "TTL", "=64\n\n192.168.10.18 的", " Ping ", "统计信息:\n    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，\n往返行程的估计时间(以毫秒为单位):\n    最短 = 1ms，最长 = 1ms，平均 = 1ms\n", "\n", "但是telnet用不了：", "\n", "C:\\Users\\", "11917", ">telnet ", "127.0.0.1", "\n正在连接", "127.0.0.1", "...无法打开到主机的连接。 在端口 ", "23", ": 连接失败\n\nMicrosoft Telnet> o                                                                                                     \n( to ) ", "192.168.10.17", "                                                                                                 \n 正在连接...无法打开到主机的连接。 在端口 ", "192.168.10.17", ": 连接失败\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/538354740156145.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/054464740156141.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-comment\"&gt;#!/usr/bin/python&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;\n&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n&amp;#64;author: Roc-xb\n&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; os\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; re\n\nipadd &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;39.97.4.86&amp;#39;&lt;/span&gt;\ncommand &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;ping -n 1 &amp;#34;&lt;/span&gt; &amp;#43; ipadd &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;gt;ip.txt&amp;#34;&lt;/span&gt;\nos.system(command)\ntxt &amp;#61; &lt;span class=\"hljs-built_in\"&gt;open&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;ip.txt&amp;#39;&lt;/span&gt;, encoding&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;gbk&amp;#34;&lt;/span&gt;).read().replace(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;)\nres &amp;#61; re.findall(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;(\\d&amp;#43;)&amp;#34;&lt;/span&gt;, txt)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(res)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["python问题，返回值去内容问题", ["\n# *", "--coding:utf-8 --*", "\n\n", "import", " ", "os", "\n", "import", " re\n", "import", " ", "string", "\n", "import", " subprocess\n\n\nipadd = ", "'193.168.70.2'", "\n\np = ", "os", ".popen(", "'ping -n 1 '", "  + ipadd)\npin = p.read()\np.close\n\n\n", "print", " (pin)\n", "\n", "打印结果：", "正在 Ping 193.168.70.2 具有 32 字节的数据:", "来自 193.168.70.2 的回复: 字节=", "32", " 时间<", "1", "ms TTL=", "128", "\n", "193.168.70.2 的 Ping 统计信息:", "    数据包: 已发送 = ", "1", "，已接收 = ", "1", "，丢失 = ", "0", " (0% 丢失)，", "往返行程的估计时间(以毫秒为单位):", "    最短 = ", "0", "ms，最长 = ", "0", "ms，平均 = ", "0", "ms", "\n", "想分别取出ping输出结果，取出字节=后的32数字，取出时间<后的秒数，取出TTL=后的128，取出的内容均为数字。需要取出的数字都已经加粗，请问究竟应该怎么取出啊？求指点，感激不尽，谢谢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;【有帮助请采纳】&lt;/strong&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;())                        &lt;span class=\"hljs-comment\"&gt;#输入n&lt;/span&gt;\ndata &amp;#61; &lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().split()))   &lt;span class=\"hljs-comment\"&gt;#将编号数据存储到列表data中&lt;/span&gt;\nk &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;())                        &lt;span class=\"hljs-comment\"&gt;#输入查询次数&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(k):                      &lt;span class=\"hljs-comment\"&gt;#遍历查询次数&lt;/span&gt;\n    x &amp;#61; &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;()                         &lt;span class=\"hljs-comment\"&gt;#输入查询书号&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; x &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; data:&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(data.index(x))   &lt;span class=\"hljs-comment\"&gt;#判断存在&amp;#xff0c;输出顺序号&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)                      &lt;span class=\"hljs-comment\"&gt;#判断为否&amp;#xff0c;输出-1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;【有帮助请采纳】&lt;/strong&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["输入书序号，输出书的位置", ["某书库的书不是乱七八糟摆放的，而是按照书的编号（也就是每本书有一个唯一整数编号）顺序摆放的。书库为了提供服务质量，委托了你开发图书查询系统，要求开发的系统提供查询服务具有最短平均响应时间。在此假定，读者查询每一本的概率都是相等的，如果书不存在，也要求尽可能快地得到结果。", "输入格式", "第一行一个整数n，表示书库中书的总本数，0<n<=10,000,000。其后n个按升序排列的正整数，每个编号代表一本书。接下来的一行包含一个整数k，表示读者的查询次数，0<k<10000。此后的k行，每行一个整数，表示读者查询的书号，书号取值范围[1 , 10的19次方]。", "输出格式", "输出每次查询的结果，如果书号存在，再输出该书号对应的顺序号（顺序号是从0开始的），如果没有则输出-1。", "输入样例 复制", "10", "2 3 7 100 168 2018 3125 5196 712513 1234567890123", "4", "100", "101", "1234567890123", "2018", "输出样例 复制", "3", "-1", "9", "5"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;手打的&amp;#xff0c;希望有帮助&amp;#xff1a;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/16125450893614.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["pta 时间类型-设置时间", ["定义如下时间结构类型", "typedef struct", "{", "    char hour, minute, second;", "} MYTIME;", "注：为了节约内存，由于小时数最大为23，分钟数和秒数最大为59，因此小时数、分钟数和秒数均采用最短的整数(char)，最大值可达127。", "请编写函数，设置时间结构类型变量的值。", "函数原型", "void TimeSet(MYTIME *time, int hour, int minute, int second);", "说明：参数 time 为指示时间结构类型变量的指针，hour、minute和second 为时、分和秒数。若参数 hour、minute 和 second 正确有效，则函数将 time 所指示的时间结构类型变量设置成此时间，否则报告错误，不修改时间结构类型变量的值。", "\n", "裁判程序", "#include <stdio.h>", "\n", "......", "\n", "typedef struct", "{", "    char hour, minute, second;", "} MYTIME;", "\n", "int IsValidTime(int hour, int minute, int second);", "void TimeSet(MYTIME *time, int hour, int minute, int second);", "\n", "int main()", "{", "    MYTIME a = {12, 15, 30};", "    int h, m, s;", "    scanf(\"%d %d %d\", &h, &m, &s);", "    TimeSet(&a, h, m, s);", "    printf(\"%d %d %d\\n\", a.hour, a.minute, a.second);", "    return 0;", "}", "输入样例1", "8 30 45", "输出样例1", "8 30 45", "输入样例2", "20 60 -15", "输出样例2", "不正确参数！", "12 15 30"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;for(j&amp;#61;n-1;j&amp;lt;2*n;j&amp;#43;&amp;#43;)&lt;br /&gt;第二个循环应该从n开始&amp;#xff0c;而不是n-1。现在和for(j&amp;#61;0;j&amp;lt;n;j&amp;#43;&amp;#43;)重复了j&amp;#61;n-1&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["C语言文本读取内容错误", ["就是我在执行ticket()函数时readtxt()这个函数时从文本里读取出来的数字跟我文本里存的不一样", "自己写的，可能有些地方不太对", "\n", "#include\"stdio.h\"", "\n", "#include\"stdlib.h\"", "\n", "#include\"string.h\"", "\n\n", "#define max 50", "\n\nint Bian[max][max][", "2", "];", "//", "第一层存放相连站点的距离，第二层存放到各点的最短距离", "//", " \n\nstruct subway\n{\n    char no[max];", "//", "编号", "//", " \n    char ostation[max];", "//", "线路起始站", "//", "\n    char estation[max];", "//", "线路终点站", "//", "\n}sub[max];\n\nint n,z=", "1", ";\n\nvoid readtxt();", "//", "读取文本", "//", "\nint money(int a);", "//", "计算票价", "//", "\nint jisuan(int i,int h,int c);", "//", "辅助计算最短距离", "//", " \nvoid shortest();", "//", "计算最短距离", "//", " \nvoid save();", "//", "保存文件", "//", "\nvoid add();", "//", "增加站点", "//", "\nvoid Delete();", "//", "删除站点", "//", "\nvoid Print();", "//", "存储信息的浏览", "//", "\nvoid Search();", "//", "对单一站点信息查询", "//", " \nvoid ticket();", "//", "计算票价", "//", " \nvoid menu();", "//", "主菜单", "//", " \n\n\nint main()\n{\n    ", "while", "(z)\n    menu();\n    system(", "\"pause\"", ");\n    return ", "0", ";\n}\n\n\nvoid readtxt()", "//", "读取文本", "//", "\n{\n    int i=", "0", ",j,k=", "0", ";\n    FILE *fp;\n    ", "if", "((fp=fopen(", "\"subway.txt\"", ",", "\"r\"", "))==NULL)\n    {\n        printf(", "\"subway.txt读取失败\"", ");\n        system(", "\"pause\"", ");\n        ", "exit", "(", "0", ");\n    }\n    FILE *B;\n    ", "if", "((B=fopen(", "\"Bow.txt\"", ",", "\"r\"", "))==NULL)\n    {\n        printf(", "\"Bow.txt读取失败\"", ");\n        system(", "\"pause\"", ");\n        ", "exit", "(", "0", ");\n    }\n    ", "while", "(fscanf(fp,", "\"%s %s %s\"", ",sub[i].no,sub[i].ostation,sub[i].estation)==", "3", ")", "//", "站点的读取", "//", " \n    {\n        i++;\n    }\n    fclose(fp);\n    n=i;\n    \n    ", "for", "(i=", "0", ";i<", "2", "*n;i++)", "//", "边的读取", "//", " \n    {\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            fscanf(B,", "\"%d\"", ",&Bian[i][j][", "0", "]);\n        }\n        ", "for", "(j=n-", "1", ";j<", "2", "*n;j++)\n        {\n            fscanf(B,", "\"%d\"", ",&Bian[i][j][", "1", "]);", "//", "最短距离的读取", "//", "\n        }\n    }\n    \n    fclose(B);\n    printf(", "\"边：\\n\"", ");\n    ", "for", "(i=", "0", ";i<n;i++)", "//", "最短距离的读取", "//", " \n    {\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            printf(", "\"%d \"", ",Bian[i][j][", "0", "]);\n        }\n        printf(", "\"\\n\"", ");\n    }\n    printf(", "\"最短：\\n\"", ");\n    ", "for", "(i=", "0", ";i<n;i++)", "//", "最短距离的读取", "//", " \n    {\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            printf(", "\"%d \"", ",Bian[i][j][", "1", "]);\n        }\n        printf(", "\"\\n\"", ");\n    }\n     \n}\n\nvoid save()", "//", "保存文件", "//", "\n{\n    int i,j;\n    FILE *fp;\n    FILE *B;\n    fp=fopen(", "\"subway.txt\"", ",", "\"w\"", ");\n    B=fopen(", "\"Bow.txt\"", ",", "\"w\"", ");\n    ", "for", "(i=", "0", ";i<n;i++)\n    {\n        fprintf(fp,", "\"%s %s %s\"", ",sub[i].no,sub[i].ostation,sub[i].estation);", "//", "站点的保存", "//", " \n        fputc(", "'\\n'", ",fp);\n    }\n    fclose(fp);\n    ", "for", "(i=", "0", ";i<n;i++)\n    {\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            fprintf(B,", "\"%d\"", ",Bian[i][j][", "0", "]);", "//", "边的保存", "//", " \n        }\n        fputc(", "'\\n'", ",B);\n    }\n    ", "for", "(i=", "0", ";i<n;i++)\n    {\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            fprintf(B,", "\"%d\"", ",Bian[i][j][", "1", "]);", "//", "最短距离的保存", "//", " \n        }\n        fputc(", "'\\n'", ",B);\n    }\n    fclose(B);\n    printf(", "\"边：\\n\"", ");\n    ", "for", "(i=", "0", ";i<n;i++)\n    {\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            printf(", "\"%d \"", ",Bian[i][j][", "0", "]);\n        }\n        printf(", "\"\\n\"", ");\n    }\n    system(", "\"pause\"", ");\n}\n\nint money(int a)", "//", "计算票价", "//", "\n{\n    int i;\n    ", "if", "(a=", "0", ")\n      i=", "0", ";\n    ", "else", " ", "if", "(a<=", "4", ")\n      i=", "2", ";\n    ", "else", " ", "if", "(a>", "4", "&&a<=", "12", ")\n      i=", "2", "+(a-", "4", ")/", "4", ";\n    ", "else", " ", "if", "(a>", "12", "&&a<=", "24", ")\n      i=", "4", "+(a-", "12", ")/", "6", ";\n    ", "else", "\n      i=", "6", "+(a-", "24", ")/", "8", ";\n    return i;\n}\n\nint road[max][max];", "//", "记录是否走过", "//", " \n\n", "#define kon 999", "\n\nint jisuan(int i,int h,int c)", "//", "计算最短距离", "//", " \n{\n    int j,k=", "0", ",l;\n    int a=kon,b,d,e;\n    ", "for", "(j=", "0", ";j<n;j++)\n    {\n        ", "if", "(road[h][j]!=", "1", ")\n        {\n            k++;\n        }\n    }\n    ", "if", "(k==", "0", ")\n    {\n         \n        return ", "0", ";\n    }\n    e=kon;\n    ", "for", "(j=", "0", ";j<n;j++)\n    {\n        ", "if", "(h=j)\n        {\n            Bian[h][j][", "1", "]=", "0", ";\n            road[h][j]=", "1", ";\n        }\n        ", "else", " ", "if", "(road[h][j]!=", "1", ")\n        {\n            ", "if", "(a>=Bian[h][j][", "0", "])\n            {\n                a=Bian[h][j][", "0", "];\n                ", "if", "(a<=Bian[h][j][", "1", "])\n                {\n                    ", "if", "(h!=i)\n                    {\n                        l=c+a;\n                    }\n                    ", "else", "\n                    {\n                        l=a;    \n                    }\n                    ", "if", "(l<k)\n                    {\n                        e=l;\n                    }\n                    ", "if", "(l<=Bian[i][j][", "1", "])\n                    {\n                        Bian[i][j][", "1", "]=l;\n                        Bian[j][i][", "1", "]=Bian[i][j][", "1", "];\n                    }\n                }\n            }\n        }\n    }\n    int help[", "50", "];\n    int g=", "0", ";\n    ", "for", "(j=", "0", ";j<n;j++)\n    {\n        ", "if", "(road[h][j]!=", "1", ")\n        {\n            help[g]=j;\n            g++;\n        }\n    }\n    int o,p;\n    o=Bian[h][help[", "0", "]][", "0", "];\n    p=help[", "0", "];\n    \n    ", "for", "(j=", "0", ";j<g;j++)\n    {\n        ", "if", "(o<Bian[h][help[j]][", "0", "])\n        {\n            o=Bian[h][help[j]][", "0", "];\n            p=help[j];\n        }\n    }\n    \n    b=p;\n    ", "if", "(i=h)\n    {\n        d=e;\n    }\n    ", "else", " ", "if", "(i!=h)\n    {\n        d+=e;\n    }\n    road[i][b]=", "1", ";\n    road[b][i]=road[i][b];\n    \n    k=", "0", ";\n    \n    ", "for", "(j=", "0", ";j<n;j++)\n    {\n        \n        ", "if", "(road[i][j]!=", "1", ")\n        {\n            \n            k+=", "1", ";\n            \n        }\n    }\n    \n    ", "if", "(k!=", "0", ")\n    {\n        jisuan(i,b,d);", "//", "b记录离i最短的站点,d记录i到b的距离", "//", "\n    }\n    ", "else", "\n    {\n        return ", "0", ";\n    }\n}\n\nvoid shortest()", "//", "计算起始站和终点站的最短距离", "//", " \n{\n    int i,j,k=", "0", ";\n    int e,r;\n    ", "for", "(e=", "0", ";e<n;e++)\n    {\n        ", "for", "(r=", "0", ";r<n;r++)\n        {\n            road[e][r]=", "0", ";\n        }\n    }\n    \n    int c;\n    ", "for", "(i=", "0", ";i<n;i++)\n    {\n        c=", "0", ";\n        \n        jisuan(i,i,c);\n    }\n    printf(", "\"最短：\\n\"", ");\n    ", "for", "(i=", "0", ";i<n;i++)", "//", "最短距离的读取", "//", " \n    {\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            printf(", "\"%d \"", ",Bian[i][j][", "1", "]);\n        }\n        printf(", "\"\\n\"", ");\n    }\n    save();\n} \n\n\n\nvoid add()", "//", "新增地铁站点", "//", " \n{\n    int i=", "0", ",k=", "0", ",j,l,h,flag,g,p=", "0", ";", "//", "新增地铁数量 <l> ;相连站点数量 <h>", "//", " \n    int a[", "10", "];", "//", "相连地铁编号", "//", " \n    int b[", "10", "];", "//", "相连距离", "//", " \n    FILE *fp;\n    FILE *B;\n    ", "if", "((fp=fopen(", "\"subway.txt\"", ",", "\"a+\"", "))==NULL)\n    {\n        printf(", "\"subway.txt读取失败\"", ");\n        system(", "\"pause\"", ");\n        ", "exit", "(", "0", ");\n    }\n    ", "if", "((B=fopen(", "\"Bow.txt\"", ",", "\"a+\"", "))==NULL)\n    {\n        printf(", "\"Bow.txt读取失败\"", ");\n        system(", "\"pause\"", ");\n        ", "exit", "(", "0", ");\n    }\n    ", "while", "(fscanf(fp,", "\"%s %s %s\"", ",sub[i].no,sub[i].ostation,sub[i].estation)==", "3", ")", "//", "站点的读取", "//", " \n    {\n        i++;\n    }\n    fclose(fp);\n    n=i;\n    ", "if", "(n==", "0", ")\n    {\n        p=", "1", ";\n    }\n    printf(", "\"%d\\n\"", ",i);\n    ", "for", "(g=", "0", ";g<n;g++)", "//", "边的读取", "//", " \n    {\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            fscanf(B,", "\"%d\"", ",&Bian[g][j][", "0", "]);\n        }\n        fscanf(B,", "\"\\n\"", ");\n    }\n    ", "for", "(i=", "0", ";i<n;i++)", "//", "最短距离的读取", "//", " \n    {\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            fscanf(B,", "\"%d\"", ",&Bian[i][j][", "1", "]);\n        }\n        fscanf(B,", "\"\\n\"", ");\n    }\n    fclose(B);\n    \n    ", "//", "分割", "//", " \n    printf(", "\"请输入待增加的地铁站点数量：\\n\"", ");\n    scanf(", "\"%d\"", ",&l);\n    ", "do", "\n    {\n        flag=", "1", ";\n        ", "while", "(flag)\n        {\n            flag=", "0", ";\n            printf(", "\"请输入第%d个地铁站点的编号:\\n\"", ",i+", "1", ");\n            scanf(", "\"%s\"", ",sub[i].no);\n            ", "for", "(j=", "0", ";j<i;j++)\n            {\n                ", "if", "(strcmp(sub[i].no,sub[j].no)==", "0", ")\n                {\n                    printf(", "\"已有该地铁编号，请重新登入。\\n\"", ");\n                    flag=", "1", ";\n                    system(", "\"pause\"", "); \n                    ", "break", ";\n                }\n            }\n            printf(", "\"请输入第%d个地铁站点的起始站：\\n\"", ",i+", "1", ");\n            scanf(", "\"%s\"", ",sub[i].ostation);\n            printf(", "\"请输入第%d个地铁站点的终点站：\\n\"", ",i+", "1", ");\n            scanf(", "\"%s\"", ",sub[i].estation);\n            \n            printf(", "\"与该地铁站点相连的地铁站点数量：\\n\"", ");\n            scanf(", "\"%d\"", ",&h);\n            \n            ", "for", "(j=", "0", ";j<h;j++)\n            {\n                printf(", "\"请输入与第%d号地铁站点相连的地铁编号：\\n\"", ",i+", "1", ");\n                scanf(", "\"%d\"", ",&a[j]);    \n            }\n            ", "for", "(j=", "0", ";j<h;j++)\n            {\n                printf(", "\"请输入与第%d号地铁编号相连站点的距离：(一次一个)\\n\"", ",i+", "1", ");\n                scanf(", "\"%d\"", ",&Bian[i][a[j]-", "1", "][", "0", "]);\n                Bian[a[j]-", "1", "][i][", "0", "]=Bian[i][a[j]-", "1", "][", "0", "];\n            }\n            \n            ", "if", "(flag==", "0", ")\n            {\n                i++;\n            }\n        }\n    }\n    ", "while", "(i<n+l);\n    n+=l;\n    ", "//", "分割", "//", " \n    ", "for", "(j=", "0", ";j<n;j++)\n    {\n        ", "for", "(g=", "0", ";g<n;g++)\n        {\n            \n            ", "if", "(Bian[j][g][", "0", "]==", "0", "&&j!=g)\n            {\n                Bian[j][g][", "1", "]=kon;\n            }\n            ", "else", "\n            {\n                Bian[j][g][", "1", "]=Bian[j][g][", "0", "];\n            }\n        }\n    }\n    ", "if", "(p==", "0", ")\n    {\n        shortest();\n    }\n    ", "else", "\n        save();", "//", "保存", "//", " \n    printf(", "\"录入完毕！\\n\\n\"", ");\n    return ;\n}\n\nvoid Delete()\n{\n    int i=", "0", ",k=", "0", ",j,g;\n    char a[", "10", "];", "//", "相连地铁编号", "//", " \n    int b[", "10", "];", "//", "相连距离", "//", " \n    FILE *fp;\n    FILE *B;\n    ", "if", "((fp=fopen(", "\"subway.txt\"", ",", "\"r\"", "))==NULL)\n    {\n        printf(", "\"subway.txt读取失败\"", ");\n        system(", "\"pause\"", ");\n        ", "exit", "(", "0", ");\n    }\n    ", "if", "((B=fopen(", "\"Bow.txt\"", ",", "\"r\"", "))==NULL)\n    {\n        printf(", "\"Bow.txt读取失败\"", ");\n        system(", "\"pause\"", ");\n        ", "exit", "(", "0", ");\n    }\n    ", "while", "(fscanf(fp,", "\"%s %s %s\"", ",sub[i].no,sub[i].ostation,sub[i].estation)==", "3", ")", "//", "站点的读取", "//", " \n    {\n        i++;\n    }\n    fclose(fp);\n    n=i;\n    ", "for", "(g=", "0", ";g<n;g++)", "//", "边的读取", "//", " \n    {\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            fscanf(B,", "\"%d\"", ",&Bian[g][j][", "0", "]);\n        }\n        fscanf(B,", "\"\\n\"", ");\n    }\n    ", "for", "(i=", "0", ";i<n;i++)", "//", "最短距离的读取", "//", " \n    {\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            fscanf(B,", "\"%d\"", ",&Bian[i][j][", "1", "]);\n        }\n        fscanf(B,", "\"\\n\"", ");\n    }\n    fclose(B);\n    ", "//", "分割", "//", " \n    int t,flag=", "0", ";\n    char s1[", "30", "];\n    printf(", "\"请输入要删除的地铁编号:\\n\"", ");\n    scanf(", "\"%s\"", ",s1);\n    ", "for", "(t=", "0", ";t<n;t++)\n    {\n        ", "if", "(strcmp(sub[t].no,s1)==", "0", ")\n        {\n            flag=", "1", ";\n            ", "for", "(j=t;j<n-", "1", ";j++)\n            {\n                sub[j]=sub[j+", "1", "]; \n            }\n        }\n        ", "if", "(flag==", "1", ")\n        {\n            ", "for", "(j=t;j<n-", "1", ";j++)\n            {\n                ", "for", "(g=", "0", ";g<n;g++)\n                {\n                    Bian[j][g][", "0", "]=Bian[j+", "1", "][g][", "0", "];\n                    Bian[g][j][", "0", "]=Bian[g][j+", "1", "][", "0", "];\n                }\n            }\n        }\n    }\n    ", "for", "(j=", "0", ";j<n;j++)\n    {\n        ", "for", "(g=", "0", ";g<n;g++)\n        {\n            ", "if", "(Bian[j][g][", "0", "]=NULL)\n            {\n                Bian[j][g][", "1", "]=kon;\n            }\n            ", "else", "\n            {\n                Bian[j][g][", "1", "]=Bian[j][g][", "0", "];\n            }\n        }\n    }\n    ", "if", "(flag==", "0", ")\n    {\n        printf(", "\"该编号不存在！\\n\"", ");\n    }\n    ", "if", "(flag==", "1", ")\n    {\n        printf(", "\"站点删除成功！\\n\"", ");\n        n--;\n    }\n    shortest();\n    save();\n}\n\nvoid Search()", "//", "查找 \n{\n    FILE *fp;", "//", "要读取的文件指针 \n    int i=", "0", ";", "//", "数组移动\n    ", "if", "((fp=fopen(", "\"subway.txt\"", ",", "\"r\"", "))==NULL)\n    {\n        printf(", "\"subway.txt读取失败\"", ");\n        system(", "\"pause\"", ");\n        ", "exit", "(", "0", ");\n    }\n    printf(", "\"hi\\n\"", ");\n    system(", "\"pause\"", ");\n    ", "while", "(fscanf(fp,", "\"%s %s %s\"", ",sub[i].no,sub[i].ostation,sub[i].estation)==", "3", ")\n    {\n        i++;\n    }\n     \n    n=i;\n    int j,item,flag=", "0", ";\n    char s1[", "10", "];\n    printf(", "\"----------------------------------------------------------\\n\"", ");\n    printf(", "\"------------------◎ 1.按编号查询   ◎--------------------\\n\"", ");\n    printf(", "\"------------------◎ 2.按起始站查询 ◎--------------------\\n\"", ");\n    printf(", "\"------------------◎ 3.按终点站查询 ◎--------------------\\n\"", ");\n    printf(", "\"------------------◎ 4.退出本菜单   ◎--------------------\\n\"", ");\n    printf(", "\"----------------------------------------------------------\\n\"", ");\n    ", "while", "(", "1", ")\n       {\n           printf(", "\"请选择子菜单编号:\"", ");\n           scanf(", "\"%d\"", ",&item);\n           flag=", "0", ";\n           switch(item)\n          {\n            case ", "1", ":\n            printf(", "\"请输入要查询的地铁站点编号：\"", ");", "//", "通过地铁线路查找 \n            scanf(", "\"%s\"", ",s1);\n            ", "for", "(j=", "0", ";j<n;j++)\n            ", "if", "(strcmp(sub[j].no,s1)==", "0", ")\n            {\n                flag=", "1", ";\n                printf(", "\"地铁编号   起始站    终点站\\n\"", "); \n                printf(", "\"---------------------------\\n\"", ");\n                printf(", "\"  %s          %s         %s       \\n\"", ",sub[j].no,sub[j].ostation,sub[j].estation);\n                \n            }         \n            ", "if", "(flag==", "0", ")\n            printf(", "\"查询错误，无该信息!\\n\"", "); ", "break", ";\n            case ", "2", ":\n            printf(", "\"请输入查询的地铁起始站：\"", ");", "//", "通过地铁起始站查找 \n            scanf(", "\"%s\"", ",s1);\n            ", "for", "(j=", "0", ";j<n;j++)\n             ", "if", "(strcmp(sub[j].ostation,s1)==", "0", ")\n            {\n                flag=", "1", ";\n                printf(", "\"地铁编号   起始站    终点站\\n\"", "); \n                printf(", "\"---------------------------\\n\"", ");\n                printf(", "\"  %s          %s         %s       \\n\"", ",sub[j].no,sub[j].ostation,sub[j].estation);\n            }\n                     \n            ", "if", "(flag==", "0", ")\n            printf(", "\"查询错误，无该信息!\\n\"", "); ", "break", ";    \n            case ", "3", ":\n            printf(", "\"请输入查询的地铁终点站：\"", ");", "//", "通过地铁终点站查找 \n            scanf(", "\"%s\"", ",s1);\n            ", "for", "(j=", "0", ";j<n;j++)\n            ", "if", "(strcmp(sub[j].estation,s1)==", "0", ") \n            {\n                flag=", "1", ";\n                printf(", "\"地铁编号   起始站    终点站\\n\"", "); \n                printf(", "\"---------------------------\\n\"", ");\n                printf(", "\"  %s          %s         %s       \\n\"", ",sub[j].no,sub[j].ostation,sub[j].estation);\n                \n            }\n            ", "if", "(flag==", "0", ")\n            printf(", "\"查询错误，无该信息\\n\"", "); ", "break", ";    \n            case ", "4", ": return;\n            default:printf(", "\"请在1-4之间选择\\n\"", ");", "//", "提示用户在有效范围中选择 \n        }\n    }\n}\n\nvoid Print()", "//", "存储信息的浏览", "//", "\n{\n    int i; \n    printf(", "\"欢迎查询地铁线路!所有信息为:\\n\"", ");\n    printf(", "\"地铁编号   起始站    终点站\\n\"", "); \n    printf(", "\"---------------------------\\n\"", ");\n    readtxt();", "//", "调用函数 \n    ", "for", "(i=", "0", ";i<n;i++)\n    {\n    printf(", "\"  %s          %s         %s       \\n\"", ",sub[i].no,sub[i].ostation,sub[i].estation);\n    }\n    system(", "\"pause\"", ");\n}\n\nvoid ticket()\n{\n    int i,j,l;\n    readtxt();\n    system(", "\"pause\"", ");\n    \n    printf(", "\"请输入起点站编号：\\n\"", ");\n    scanf(", "\"%d\"", ",&i);\n    printf(", "\"请输入终点站编号：\\n\"", ");\n    scanf(", "\"%d\"", ",&j);\n    l=Bian[i-", "1", "][j-", "1", "][", "1", "];\n    printf(", "\"从第%d号地铁站到第%d号地铁站的地铁票需要%d元。\\n\\n\"", ",i,j,money(l));\n}\n\nvoid menu()", "//", "主菜单", "//", " \n{\n    int num;\n    system(", "\"color 75\"", ");", "//", "更改界面颜色为灰色背景浅紫色字体 \n    printf(", "\"******************************广州地铁线网票价查询系统**************************\\n\"", ");\n    printf(", "\"***********************友情提示：浏览和更新前请先刷新系统***********************\\n\"", ");\n    printf(", "\"                       **********************************                       \\n\"", ");\n    printf(", "\"                       *     0     刷新地铁信息         *                       \\n\"", ");\n    printf(", "\"                       *     1     地铁信息的增加       *                       \\n\"", ");\n    printf(", "\"                       *     2     地铁信息的浏览       *                       \\n\"", ");\n    printf(", "\"                       *     3     地铁信息的查询       *                       \\n\"", ");\n    printf(", "\"                       *     4     地铁票价的查询       *                       \\n\"", ");\n    printf(", "\"                       *     5     地铁信息的删除       *                       \\n\"", ");\n    printf(", "\"                       *     6          退出            *                       \\n\"", ");\n    printf(", "\"                       **********************************                       \\n\"", ");\n    printf(", "\"请输入选择序号:\\n\"", ");\n    scanf(", "\"%d\"", ",&num);\n    switch(num)\n    { \n        case ", "0", ":readtxt();  ", "break", "; \n        case ", "1", ":add();  ", "break", ";\n        case ", "2", ":Print();  ", "break", ";\n        case ", "3", ":Search();  ", "break", ";\n        case ", "4", ":ticket();  ", "break", ";\n        case ", "5", ":Delete();  ", "break", ";\n        case ", "6", ":z=", "0", ";  printf(", "\"Bye!\\n\"", ");  ", "break", ";\n        default:printf(", "\"请在0-6之间选择\\n\"", ");\n    }\n}\n\n", "\n", "图一是readtxt()读取出来的数，图二是文本里的数", "\n"]], "Tag": "算法设计"}
{"Answer": "m1&amp;1和n1&amp;1是判断奇数偶数的，\r\n\r\n最后输出abs（m1-n1）这个没问题吧？就是两个楼差的行数，比如7和20，这部分就是3\r\nabs（m2-n2）的部分就是判断两楼在同一行时需要走的路。如果m1或者n1是奇数，w-1-m1表示楼离最左边的距离。也就是最后求两个楼离最左边距离的差的绝对值\r\n\r\n最初的时候m--和n--，表示把整个矩阵改变为从0开始。\r\n\r\n比如4 7 20\r\n\r\n矩阵：\r\n0 1 2 3\r\n7 6 5 4\r\n8 9 10 11\r\n15 14 13 12\r\n16 17 18 19\r\n               20\r\n这样就是求6和19的距离了\r\n\r\n其实如果不做m--和n--改变下算法也是可以的", "Konwledge_Point": "负权边的最短路径", "Question": ["蓝桥杯—移动距离的问题，走过的路过，千万不要错过", ["移动距离", "\n\n", "X星球居民小区的楼房全是一样的，并且按矩阵样式排列。其楼房的编号为1,2,3...", "\n当排满一行时，从下一行相邻的楼往反方向排号。", "\n比如：当小区排号宽度为6时，开始情形如下：", "\n\n", "1  2  3  4  5  6", "\n12 11 10 9  8  7", "\n13 14 15 .....", "\n\n", "我们的问题是：已知了两个楼号m和n，需要求出它们之间的最短移动距离（不能斜线方向移动）", "\n\n", "输入为3个整数w m n，空格分开，都在1到10000范围内", "\nw为排号宽度，m,n为待计算的楼号。", "\n要求输出一个整数，表示m n 两楼间最短移动距离。", "\n\n", "例如：", "\n用户输入：", "\n6 8 2", "\n则，程序应该输出：", "\n4", "\n\n", "再例如：", "\n用户输入：", "\n4 7 20", "\n则，程序应该输出：", "\n5", "\n\n", "资源约定：", "\n峰值内存消耗 < 256M", "\nCPU消耗  < 1000ms", "\n\n", "请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。", "\n\n", "所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。", "\n\n", "注意: main函数需要返回0", "\n注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。", "\n注意: 所有依赖的函数必须明确地在源文件中 #include ， 不能通过工程设置而省略常用头文件。", "\n\n", "提交时，注意选择所期望的编译器类型。", "\n\n", "我找到的解答方案如下：", "\n\n", " #include <iostream>\n#include <cmath>\nusing namespace std;\nint main()\n{\n    int w,m,n;\n    cin>>w>>m>>n;\n\n    m--;\n    n--;\n\n    int m1=m/w, m2=m%w;\n    if(m1&1)\n    {\n        m2=w-1-m2;\n    }\n\n    int n1=n/w, n2=n%w;\n    if(n1&1)\n    {\n        n2=w-1-n2;\n    }       \n\n    cout<<abs(m1-n1)+abs(m2-n2)<<endl;\n    return 0;\n}\n", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;同学你好&amp;#xff0c;你用sparse函数构成的连接矩阵不是方阵&amp;#xff0c;导致后面那个函数graphshortestpath内部调用的另外一个函数graphalgs算法产生错误。&lt;br /&gt;改正的办法是把sparse内部调用设置为方阵&amp;#xff0c;这样就不会有问题啦&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;17&lt;/span&gt;];\n&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;17&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;18&lt;/span&gt;];\n&lt;span class=\"hljs-attribute\"&gt;weight&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-number\"&gt;48&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;45&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;48&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;51&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;36&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;48&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;39&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;42&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;48&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;27&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;48&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;51&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;27&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;27&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;27&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;75&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;27&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;39&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;39&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;45&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;45&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;45&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;57&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;23&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;42&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;48&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;42&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;48&lt;/span&gt; ];\n&lt;span class=\"hljs-attribute\"&gt;N&lt;/span&gt; &amp;#61; max([a(:);b(:)]);%N是方阵的大小\n&lt;span class=\"hljs-attribute\"&gt;dg&lt;/span&gt;&amp;#61;sparse(a,b,weight, N, N);%稀疏矩阵设置为N×N大小的方阵即可&lt;span class=\"hljs-meta\"&gt;\n[m,n]&amp;#61;graphshortestpath(dg,1,2)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["graphshortestpath调用时报错", ["我想用该函数求解最短路程，结果出现这样一句话", "下面是我的代码", "a=[1,1,1,2,2,3,3,4,4,5,6,6,7,8,8,8,8,9,9,9,10,10,11,11,12,13,13,14,14,15,17];", "b=[2,5,6,3,5,4,9,10,11,8,7,12,8,9,13,12,14,10,13,15,11,15,15,16,14,14,15,15,17,16,18];", "\n", "weight=[48 45 48 51 36 48 39 42 48 27 48 51 27 30 27 27 75 30 27 39 39 45 45 45 57 23 30 42 48 42 48 ];", "dg=sparse(a,b,weight);", "[m,n]=graphshortestpath(dg,1,2)", "请问各位怎么回事呀"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;升级电脑的Git工具到最新版本&amp;#xff0c;再试一试&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["能ping通github.com却不能clone项目。", ["\n", "D:\\myapp>ping github.com\n\n正在 Ping github.com [13.229.188.59] 具有 32 字节的数据:\n来自 13.229.188.59 的回复: 字节=32 时间=84ms TTL=43\n来自 13.229.188.59 的回复: 字节=32 时间=83ms TTL=43\n来自 13.229.188.59 的回复: 字节=32 时间=83ms TTL=43\n来自 13.229.188.59 的回复: 字节=32 时间=83ms TTL=43\n\n13.229.188.59 的 Ping 统计信息:\n    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，\n往返行程的估计时间(以毫秒为单位):\n    最短 = 83ms，最长 = 84ms，平均 = 83ms\n\nD:\\myapp>git clone https://github.com/aave/flashloan-box\nCloning into 'flashloan-box'...\nfatal: unable to access 'https://github.com/aave/flashloan-box/': OpenSSL SSL_connect: Connection was reset in connection to github.com:443\n\nD:\\myapp>", "\n\n", "浏览器能直接访问到项目。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;前端是不行的&amp;#xff0c;  nodejs可以的&amp;#xff0c;你参考一下这个基本现成的&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/qq_34310906/article/details/109582102\" id=\"textarea_1657178644818_1657178727139_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/qq_34310906/article/details/109582102&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["javascript怎样实现类似windows中的ping命令", ["请问javascript是否可以实现类似windows 的ping命令那样对多个内网IP地址的通断进行判断，ip地址绑定的设备有可能是电脑，有可能是路由，将结果返回以数组形式输出到txt中保存。", "\n", "通的话将下方内容写进txt", "正在 Ping 193.168.13.2 具有 32 字节的数据:", "来自 193.168.13.2 的回复: 字节=32 时间=5ms TTL=124", "来自 193.168.13.2 的回复: 字节=32 时间=5ms TTL=124", "来自 193.168.13.2 的回复: 字节=32 时间=4ms TTL=124", "来自 193.168.13.2 的回复: 字节=32 时间=4ms TTL=124", "\n", "193.168.13.2 的 Ping 统计信息:", "    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，", "往返行程的估计时间(以毫秒为单位):", "    最短 = 4ms，最长 = 5ms，平均 = 4ms", "\n", "请帮忙解答，查了好多资料都是外网的解决方法，因为是内网所有不能用"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff0c;望采纳&amp;#xff0c;谢谢&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;check_password&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;password&lt;/span&gt;):\n    &lt;span class=\"hljs-comment\"&gt;# fill your codes after this line&lt;/span&gt;\n    s&amp;#61;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; c &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; password:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; c &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; c &amp;lt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;:\n            s[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; c &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; c &amp;lt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;:\n            s[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; c &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; c &amp;lt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;:\n            s[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; c &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#64;#$%&amp;amp;&amp;#39;&lt;/span&gt;:\n            s[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(s) &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; s[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;] &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(password) &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(password) &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# end of your codes&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# do not modify&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__ &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:\n    passwords &amp;#61; &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().split(&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)\n    oks&amp;#61;[]\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; password &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; passwords:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; check_password(password):\n            oks.append(password)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;符号密码设定标准的结果为:&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;.join(oks))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/020604688176158.jpg\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["python编程实现密码检测", ["假定某系统密码设定规则如下：", "(1). [a-z]之间至少有1个字母 【判断条件提示：j >= 'a' and j <= 'z'，以下类似】", "(2). [A-Z]之间至少有1个字母", "(3). [0-9]之间至少有1个数字", "(4). [", "@#$%&", "]中至少有2个字符", "(5).密码的最短长度：7", "(6).密码的最大长度：13", "(7).密码不能包含空格", "请编程实现下述问题：程序接受键盘输入的多个逗号分隔的密码，并根据上述密码设定规则对所有密码进行检测，将符合条件的密码以字符串形式打印，每个密码用逗号分隔。", "例：", "如果以下密码作为程序的输入：ABd1#234", "@1,a ", "F1#", "@12,2w&a3E", ",2We3345,dHuD&u", "12=e, ABd1234", "@1，则程序的输出应该是：符合密码设定标准的结果为：ABd1#234@1,2w&a3E"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;封装成函数了&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-py\"&gt;&lt;span class=\"hljs-attribute\"&gt;from&lt;/span&gt; haversine import haversine\n\n&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt; &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;111&lt;/span&gt;: (-&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;4168610028693&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;145&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;005372256037&lt;/span&gt;),\n     &lt;span class=\"hljs-attribute\"&gt;222&lt;/span&gt;: (-&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;7032933463858&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;144&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;572524145218&lt;/span&gt;),\n     &lt;span class=\"hljs-attribute\"&gt;333&lt;/span&gt;: (-&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;7292612709136&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;144&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;650631483984&lt;/span&gt;),\n     &lt;span class=\"hljs-attribute\"&gt;444&lt;/span&gt;: (-&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;7777637471456&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;144&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;772303608804&lt;/span&gt;),\n     &lt;span class=\"hljs-attribute\"&gt;555&lt;/span&gt;: (-&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;5792063872414&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;144&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;72816450831&lt;/span&gt;),\n     &lt;span class=\"hljs-attribute\"&gt;666&lt;/span&gt;: (-&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;7830652929363&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;144&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;802188066669&lt;/span&gt;),\n     &lt;span class=\"hljs-attribute\"&gt;777&lt;/span&gt;: (-&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;6019247988331&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;144&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;943306014347&lt;/span&gt;)}\n\n&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt; &amp;#61;&lt;span class=\"hljs-meta\"&gt; [(-38.04683, 145.1261),\n     (-37.78122000000001, 145.0336),\n     (-37.7709, 145.1104),\n     (-37.7076, 144.9097),\n     (-37.7762, 145.0958),\n     (-37.97593, 145.18931)]&lt;/span&gt;\n\n&lt;span class=\"hljs-attribute\"&gt;def&lt;/span&gt; getMinDist(a:dict, b:list): \n     &lt;span class=\"hljs-attribute\"&gt;minDist&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;**&lt;span class=\"hljs-number\"&gt;31&lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n     &lt;span class=\"hljs-attribute\"&gt;key&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n     &lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; k in a.keys():\n          &lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; i in range(len(b)):\n               &lt;span class=\"hljs-attribute\"&gt;d&lt;/span&gt; &amp;#61; haversine(a[k], b[i])\n               &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt;(d&amp;lt;minDist):\n                    &lt;span class=\"hljs-attribute\"&gt;minDist&lt;/span&gt; &amp;#61; d\n                    &lt;span class=\"hljs-attribute\"&gt;key&lt;/span&gt; &amp;#61; k\n     &lt;span class=\"hljs-attribute\"&gt;return&lt;/span&gt; key, minDist\n\n&lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;, d &amp;#61; getMinDist(a, b)\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#34;关键字是{k}, 最短距离是{d}&amp;#34;&lt;/span&gt;)\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["python找最小值", ["有一个字典a", "a = {111: (-37.4168610028693, 145.005372256037),", " 222: (-37.7032933463858, 144.572524145218),", " 333: (-37.7292612709136, 144.650631483984),", " 444: (-37.7777637471456, 144.772303608804),", " 555: (-37.5792063872414, 144.72816450831),", " 666: (-37.7830652929363, 144.802188066669),", " 777: (-37.6019247988331, 144.943306014347)}", "\n", "列表b", "b = [(-38.04683, 145.1261)", "(-37.78122000000001, 145.0336)", "(-37.7709, 145.1104)", "(-37.7076, 144.9097)", "(-37.7762, 145.0958)", "(-37.97593, 145.18931)]", "\n", "我想用haversine包计算出b列表每个元素到字典a中的每个values的距离，并找到每个列表元素到字典value的最小值然后返回字典key，比如b[0]到字典a['111']的距离是b[0]到字典a的所有value中的距离最短，那么打印key111和距离。请问要如何实现呢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;print(Cmd_out) 之前判断下   Cmd_out是不是空字符串即可&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; Cmd&lt;span class=\"hljs-number\"&gt;_&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.strip(&lt;span class=\"hljs-string\"&gt;&amp;#39; \\r\\n&amp;#39;&lt;/span&gt;)!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;:\n        print(Cmd&lt;span class=\"hljs-number\"&gt;_&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["print输出有空行，怎么删除", ["代码如下：import subprocess", "\n", "p = subprocess.Popen('ping baidu.com',", "                     shell=True,", "                     stdin=subprocess.PIPE,", "                     stdout=subprocess.PIPE, )", "while True:", "    result = p.stdout.readline()", "\n", "if", " result != ", "b''", ":  \n    ", "try", ":\n        Cmd_out = ", "str", "(result.decode(", "'gbk'", ").strip(", "' \\r\\n'", "))  \n    ", "except", ":\n        Cmd_out = ", "str", "(result.decode(", "'utf-8'", ").strip(", "' \\r\\n'", "))  \n", "else", ":\n    ", "break", "\nkeyword = Cmd_out.find(", "'来自'", ")  ", "# 行是否有关键字‘来自’", "\n", "if", " keyword != -", "1", ":\n    Cmd_out = ", "'\\b'", "\n\n", "print", "(Cmd_out)\n", "\n", "输出结果：", "正在 Ping baidu.com [220.181.38.148] 具有 32 字节的数据:", "\n", "220.181.38.148 的 Ping 统计信息:", "数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，", "往返行程的估计时间(以毫秒为单位):", "最短 = 56ms，最长 = 57ms，平均 = 56ms", "\n", "中间有几行空行，怎样才能把输出的空行删除，连续输出", "\n", "只删除空行，其他格式保持不变"]], "Tag": "算法设计"}
{"Answer": "如果不考虑线程的复用性，直接做个ThreadGroup就能很容易做个循环判断出来线程是否执行完了\r\nThreadPoolExecutor 主要是考虑线程的复用", "Konwledge_Point": "负权边的最短路径", "Question": ["主线程 如果判断 N个子线程都执行完了？", ["需求：一个方法（主线程）开启了N个子线程，每个子线程去执行各自的任务，且执行的时间不一样，现在主线程需要将所有子线程执行完后的结果进行处理，并返回。", "\n    那如果判断所有的子线程都执行完了呢？", "\n    目前我的做法是：", "\n\n", "            TestThread t2= new TestThread();\n    TestThread t3= new TestThread();\n    TestThread t1= new TestThread();\n    System.out.println(\"start...\");\n    t1.start();\n    t2.start();\n    t3.start();\n    try{\n        t1.join();\n        t2.join();\n        t3.join();\n\n                  //此处得到t1，t2,t3,的执行结果，\n                  //返回处理后的最终结果。\n\n    }catch(Exception e){\n\n    }\n\n    System.out.println(\"end!!!\");\n\n现在，我是不知道这样处理性能上好不好， 因为调用这个是很需要性能好， 希望时间上最短好越好，因为可能调用的比较频繁，调用者需要将结果返回页面的。 \n 求大家给一个好的解决方法或是思路。\n 谢谢！！！\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;请问要代码还是思路&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["一道搜索题，始终做不对", ["传球游戏", "\n", "题目背景", "\n", "终于下课了，小A都等不及了。今天小A和他的朋友们在操场上玩着传球游戏。", "\n", "题目描述", "\n", "这些同学排成n排，每一排人数不等。一些同学穿着红衣服，一些同学穿着蓝衣服，不同颜色队服的同学可以互相传球(A为红色队服，B为蓝色队服），相同队服颜色的同学不能互相传球，传球的时候，只有排数相邻且坐标差距相邻（如第一排球员坐标为2，则可以传给第二排坐标为1,2,3的队员）的队员之间可以传球（每排的队员队服颜色可能不同），每排之间的间距为x[i]，每排有y[i]个球员。小A在第一排，小B在第n排，小A需要通过他的同学将球传给小B，可以往前传，也可以往后传（顺序可以为1-2-1），求出小A能否把球传给小B，如果可以求出最短距离。（本题有多组数据）", "\n", "输入格式", "\n", "第1行输入m，表示有m组数据；", "\n", "每组数据第1行输入n,代表有n排；", "\n", "每组数据第2行输入x[i],共n-1个数字，空格隔开，表示每排间距；", "\n", "接下来2n行，第一行输入y[i],表示每排人数，第二行输入y[i]个字符，表示每个队员的队服颜色，从上到下，\"R\"表示红色，\"B\"表示蓝色。", "\n", "接下来一行，两个数，表示A点和B点在所在排数中的坐标(每一排的坐标默认从上往下，从1开始）。", "\n", "输出格式", "\n", "每组数据都要输出，如果小A可以把球传给小B，输出\"Yes\"后紧跟\":\",在冒号后面输出最短距离；", "\n", "如果不能，则输出\"No\"。", "\n", "每组数据换行符隔开。", "\n", "样例 #1", "\n", "样例输入 #1", "\n", "2", "\n", "4", "\n", "1", " ", "1", " ", "1", "\n", "3", "\n", "B", " R ", "B", "\n", "4", "\nR ", "B", " R R\n", "2", "\nR ", "B", "\n", "1", "\n", "B", "\n", "2", " ", "1", "\n", "4", "\n", "2", " ", "3", " ", "1", "\n", "4", "\nR ", "B", " R ", "B", "\n", "5", "\n", "B", " ", "B", " ", "B", " ", "B", " ", "B", "\n", "5", "\nR ", "B", " ", "B", " ", "B", " ", "B", "\n", "1", "\nR\n", "3", " ", "1", "\n", "\n", "样例输出 #1", "\n", "Yes", ":", "3", "\n", "Yes", ":", "10", "\n", "\n", "样例 #2", "\n", "样例输入 #2", "\n", "3", "\n", "3", "\n", "2", " ", "2", " \n", "2", "\n", "B", " ", "B", "\n", "3", " \n", "B", " ", "B", " ", "B", "\n", "1", "\n", "B", "\n", "1", " ", "1", "\n", "4", "\n", "5", " ", "5", " ", "5", "\n", "4", "\nR R R R\n", "4", " \n", "B", " ", "B", " ", "B", " ", "B", "\n", "4", "\nR R R R\n", "4", "\n", "B", " ", "B", " ", "B", " ", "B", "\n", "1", " ", "1", "\n", "4", "\n", "2", " ", "2", " ", "2", "\n", "3", "\n", "B", " R ", "B", "\n", "4", "\nR ", "B", " ", "B", " R\n", "5", "\n", "B", " ", "B", " ", "B", " ", "B", " R\n", "1", "\nR\n", "2", " ", "1", "\n", "\n", "样例输出 #2", "\n", "No", "\n", "Yes", ":", "15", "\n", "No", "\n", "\n", "提示", "\n", "样例解释：见附件", "\n", "数据范围：1≤m≤100,1≤n≤1000,1≤x[i]≤100,1≤y[i]≤5000。", "\n", "此题我自己出的，思路用广搜做，RE了，不知道怎么做"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;AcWing y总题解&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;\nusing namespace std;\nconst &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; N &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;e5 &amp;#43; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n,k;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;q[N]&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; dist[N];\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; bfs()\n{\n    memset(dist, -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, sizeof(dist));\n    dist[n] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-string\"&gt;q[0]&lt;/span&gt; &amp;#61; n;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; hh &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, tt &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(hh &amp;lt;&amp;#61; tt)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; t &amp;#61; &lt;span class=\"hljs-string\"&gt;q[hh&amp;#43;&amp;#43;]&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t &amp;#61;&amp;#61; k) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; dist[k];\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt; N &amp;amp;&amp;amp; dist[t &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61;&amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            dist[t &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; dist[t] &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-string\"&gt;q[&amp;#43;&amp;#43;tt]&lt;/span&gt; &amp;#61; t &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; dist[t - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61;&amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            dist[t - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; dist[t] &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-string\"&gt;q[&amp;#43;&amp;#43;tt]&lt;/span&gt; &amp;#61; t - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t * &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;lt; N &amp;amp;&amp;amp; dist[t * &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#61;&amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            dist[t * &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#61; dist[t] &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-string\"&gt;q[&amp;#43;&amp;#43;tt]&lt;/span&gt; &amp;#61; t * &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{   \n    cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;k;\n    cout&amp;lt;&amp;lt;bfs()&amp;lt;&amp;lt;endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["我不知道怎么判断哪个更近，如下", ["抓住那头牛", "背景", "农夫知道一头牛的位置，想要抓住它。", "\n", "题目描述", "农夫和牛都位于数轴上，农夫起始位于点 N(0≤N≤100000)，牛位于点 K(0≤K≤100000)。农夫有两种移动方式：", "\n", "1.从 X 移动到 X−1 或 X+1，每次移动花费1分钟", "\n", "2.从 X 移动到  2∗X ，每次移动花费1分钟", "\n", "假设牛没有意识到农夫的行动，站在原地不动。农夫最少要花多少时间才能抓住牛?", "\n", "编写程序计算最短需要花费的时间。", "\n", "输入格式", "两个整数，N和K", "\n", "输出格式", "一个整数，表示农夫抓到牛所需要花费的最小分钟数", "\n", "样例输入", "5 17", "样例输出", "4", "样例解释", "5->10->9->18->17", "\n", "using", " ", "namespace", " std;\n                \n", "int", " ", "main", "()", "{\n    ", "int", " n,k,g=", "0", ";\n    cin >> n >> k;\n    ", "if", "(n>=k){\n        cout << n-k;\n    }", "else", "{\n        ", "for", "(", "int", " i=", "1", ";i<=", "10000000", ";i++){\n            ", "if", "(n=k){\n                ", "break", ";\n            }", "else", "{\n                 ______?________\n            }\n        }\n    }\n    ", "return", " ", "0", ";\n} \n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;回答&amp;#xff1a;结果出来了&amp;#xff0c;修改了前面的i部分&amp;#xff0c;截图如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/118058427636174.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a, b, c, d;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; h &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, M &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d %d&amp;#34;&lt;/span&gt;, &amp;amp;a, &amp;amp;b, &amp;amp;c, &amp;amp;d);\n    \n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;gt; c) {\n        h &amp;#61; &lt;span class=\"hljs-number\"&gt;24&lt;/span&gt; &amp;#43; c - a;\n    }    \n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;lt; c) {\n        h &amp;#61; c - a;\n    }    \n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;#61; c) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (d &amp;lt; b) {\n            h &amp;#61; &lt;span class=\"hljs-number\"&gt;24&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            h &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n    }\n    \n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; m &amp;#61; d - b;\n    \n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (m &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        M &amp;#61; m &amp;#43; &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;;\n        h &amp;#61; h - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        M &amp;#61; m;\n    }\n    \n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;O JOGO DUROU %d HORA(S) E %d MINUTO(S)&amp;#34;&lt;/span&gt;, h, M);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["为什么感觉代码没错，却结果不对？", ["问题：读取四个整数 A,B,C,D，用来表示游戏的开始时间和结束时间。", "           其中 A 和 B 为开始时刻的小时和分钟数，C 和 D 为结束时刻的小时和分钟数。", "           请你计算游戏的持续时间。", "           比赛最短持续 1 分钟，最长持续 24 小时。", "          输入格式", "          共一行，包含四个整数 A,B,C,D。", "          输出格式", "          O JOGO DUROU X HORA(S) E Y MINUTO(S)，表示游戏共持续了 X 小时 Y 分钟。", "代码：", "\n", "#include<stdio.h>", "\nint main()\n{\n    int a,b,c,d;\n    int ", "h", "=0,M=0;\n    scanf(", "\"%d %d %d %d\"", ",&a,&b,&c,&d);\n    ", "if", "(a>c){\n      ", "h", "=24+c-a;  \n    }\n    ", "if", "(a<c){\n      ", "h", "=c-a;\n    }\n    ", "if", "(", "a", "=c){\n        ", "if", "(d<b){\n            ", "h", "=24;\n        }", "else", "{\n            ", "h", "=0;\n        }\n    }\n    int ", "m", "=d-b;\n    ", "if", "(m<0){\n      ", "M", "=m+60;\n      ", "h", "=h-1;\n    }", "else", "{\n      ", "M", "=m;\n    }\n    \n    printf(", "\"O JOGO DUROU %d HORA(S) E %d MINUTO(S)\"", ",h,M);\n    return 0;\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;lcm&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; y)&lt;/span&gt;\n&lt;/span&gt;{\n     &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x*y&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n      &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; max &amp;#61; a &amp;gt; b ? a : b ;\n      &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n      {\n          &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(max%a&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; max%b&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n              &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n          max--;\n      }\n      &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; max;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n      &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,b,h;\n      cin&amp;gt;&amp;gt;a&amp;gt;&amp;gt;b&amp;gt;&amp;gt;h;\n      cout&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;lcm&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;lcm&lt;/span&gt;(a,b),h);\n      &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["JZOJ：：【WJOI】TT的立方体", ["题目描述", "  在积木星球上，所有的楼房都是活的。积木星球的国王TT是世界上最伟大的建筑师。也只有他，才配得上做积木星球的国王。积木星球上全都是散落的巨大积木，这是天然的好建筑材料，TT拥有最聪明的头脑和最灵巧的双手。他搭建起尖顶红砖的房子，搭建起300层高的房子，搭建起五角星形的房子，搭建起水晶般透明的房子。", "  有一天，TT想利用的无数块长宽高分别为a,b,h的长方体积木，搭建一个正方体，当然中间不能有缝隙，要不然就不牢固了。他的问题是，搭出的正方体棱长最少是多少？", "输入", "三个整数：a, b, h。", "输出", "一个整数：正方体最短的棱长，数据保证答案<263。", "样例", "输入  复制", "3 2 4", "输出  复制", "12", "提示", "样例解释：", "所有的积木长是3，宽是2，高是4。可以一排摆4个，摆6排，摆3层，这样搭出的正方体棱长是12。", "数据范围：", "40%的数据：1<=a,b,h<=200。", "100%的数据：1<=a,b,h<=2*109。 "]], "Tag": "算法设计"}
{"Answer": "看看是不是挂了代理服务器，或者修改了hosts，或者你的dns服务器有屏蔽。", "Konwledge_Point": "负权边的最短路径", "Question": ["Why does the *.github.io pointed to 127.0.0.1?", ["最近当我访问github page个人博客时，好像出现了问题，当我使用ping工具查找ip时，发现它指向了127.0.0.1。", "\n\n", "visit error info:", "\n\n", "无法访问此网站\nyansheng836.github.io 拒绝了我们的连接请求。\n请试试以下办法：\n\n检查网络连接\n检查代理服务器和防火墙\nERR_CONNECTION_REFUSED\n\n", "\n\n", "ping info:", "\n\n", "C:\\>ping yansheng836.github.io\n\n正在 Ping yansheng836.github.io [127.0.0.1] 具有 32 字节的数据:\n来自 127.0.0.1 的回复: 字节=32 时间<1ms TTL=64\n来自 127.0.0.1 的回复: 字节=32 时间<1ms TTL=64\n来自 127.0.0.1 的回复: 字节=32 时间<1ms TTL=64\n来自 127.0.0.1 的回复: 字节=32 时间<1ms TTL=64\n\n127.0.0.1 的 Ping 统计信息:\n    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，\n往返行程的估计时间(以毫秒为单位):\n    最短 = 0ms，最长 = 0ms，平均 = 0ms\n", "\n\n", "这个情况是最近才出现的（我最近重装了一次Windows系统，不知道是否和这个情况有关），起初在逛github时，访问别人的博客会失败。一开始我以为是个人情况，但是今天我尝试了好几个博客，发现都是如此，我意识到这可能是一个比较普遍的问题。然而我并没有在搜索网站找到合适的解决办法，于是我想请教大家该如何解决这个问题？先行谢过！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用GPTᴼᴾᴱᴺᴬᴵ&lt;br /&gt;在你的代码中&amp;#xff0c;有几个问题&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;函数返回类型应该是字符串类型&amp;#xff0c;而不是整型0。&lt;/li&gt;&lt;li&gt;当出现不匹配的情况时&amp;#xff0c;应该立即返回公共前缀&amp;#xff0c;而不是输出当前已经找到的公共前缀并继续循环。&lt;/li&gt;&lt;li&gt;在第二个循环内&amp;#xff0c;每次循环结束后&amp;#xff0c;计数器c应该被重置为0&amp;#xff0c;以确保正确计算每个字符的匹配情况。&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;-&lt;br /&gt;以下是修改后的代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;class Solution {\npublic:\n    &lt;span class=\"hljs-keyword\"&gt;string&lt;/span&gt; longestCommonPrefix(&lt;span class=\"hljs-keyword\"&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-keyword\"&gt;string&lt;/span&gt;&amp;gt;&amp;amp; strs) {\n        &lt;span class=\"hljs-keyword\"&gt;string&lt;/span&gt; pub &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;size&lt;/span&gt; &amp;#61; strs.&lt;span class=\"hljs-keyword\"&gt;size&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; smix &amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; m &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; m &amp;lt; &lt;span class=\"hljs-keyword\"&gt;size&lt;/span&gt;; m&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(smix &amp;gt; strs[m].&lt;span class=\"hljs-keyword\"&gt;size&lt;/span&gt;())\n                smix &amp;#61; strs[m].&lt;span class=\"hljs-keyword\"&gt;size&lt;/span&gt;();\n        }\n        &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i, c;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; t &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; t &amp;lt; smix; t&amp;#43;&amp;#43;) {\n            c &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-keyword\"&gt;size&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(strs[i][t] &amp;#61;&amp;#61; strs[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][t])\n                    c&amp;#43;&amp;#43;;\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                    &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(c &amp;#61;&amp;#61; i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)\n                pub.push_back(strs[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][t]);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; pub;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; pub;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在这个修改后的代码中&amp;#xff0c;我们使用return pub来立即返回公共前缀&amp;#xff0c;而不是使用std::cout输出当前找到的公共前缀并继续循环。&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["查找字符串数组中的最长公共前缀", ["题目是：编写一个函数来查找字符串数组中的最长公共前缀。", "如果不存在公共前缀，返回空字符串 \"\"。", "\n", "我的解决思路是", "先用变量smix取得最短字符串长度", "双重循环 不断将字符压入到一个空字符串中", "\n", "现在报错：", "Line 522: Char 69: runtime error: applying non-zero offset 18446744073709551615 to null pointer (basic_string.h)", "SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/basic_string.h:531:69", "\n", "class Solution {\npublic:\n    ", "string", " longestCommonPrefix(", "vector", "<", "string", ">& strs) {\n    ", "string", " pub = ", "\"\"", ";\n    ", "int", " ", "size", " = strs.", "size", "();\n    ", "int", " smix = ", "100", ";\n    ", "for", "(", "int", " m = ", "0", ";m<", "size", ";m++){\n        ", "if", "(smix>strs[m].", "size", "())\n        smix = strs[m].", "size", "();\n    }\n    ", "int", " c = ", "0", ";\n    ", "int", " i;\n    ", "for", "(", "int", " t = ", "0", ";t<smix;t++){\n    ", "for", "(i = ", "0", ";i<", "size", "-1", ";i++){\n        ", "if", "(strs[i][t]==strs[i+", "1", "][t])\n        c++;\n    }\n    ", "if", "(c==i", "-1", ")\n    pub.push_back(strs[", "0", "][t]);\n    ", "else", "{\n        std::cout<<pub<<std::endl;\n    }\n    }\n    ", "return", " ", "0", ";\n    }\n    \n};\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你改变a的类型了&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/837084250766180.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; math\n\n&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt; &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;: (-&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;4168610028693&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;145&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;005372256037&lt;/span&gt;),\n     &lt;span class=\"hljs-attribute\"&gt;1&lt;/span&gt;: (-&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;7032933463858&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;144&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;572524145218&lt;/span&gt;),\n     &lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;: (-&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;7292612709136&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;144&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;650631483984&lt;/span&gt;),\n     &lt;span class=\"hljs-attribute\"&gt;3&lt;/span&gt;: (-&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;7777637471456&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;144&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;772303608804&lt;/span&gt;),\n     &lt;span class=\"hljs-attribute\"&gt;4&lt;/span&gt;: (-&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;5792063872414&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;144&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;72816450831&lt;/span&gt;)}\n\n\n&lt;span class=\"hljs-attribute\"&gt;def&lt;/span&gt; get_min_dis2(data: dict, b: tuple):\n    &lt;span class=\"hljs-attribute\"&gt;min_dist&lt;/span&gt; &amp;#61; float(&amp;#39;inf&amp;#39;)\n    &lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; k in data.keys():\n        &lt;span class=\"hljs-attribute\"&gt;lat1&lt;/span&gt;, lon1 &amp;#61; data[k]\n        &lt;span class=\"hljs-attribute\"&gt;lat2&lt;/span&gt;, lon2 &amp;#61; b\n        &lt;span class=\"hljs-attribute\"&gt;dlat&lt;/span&gt; &amp;#61; math.radians(lat2 - lat1)\n        &lt;span class=\"hljs-attribute\"&gt;dlon&lt;/span&gt; &amp;#61; math.radians(lon2 - lon1)\n        &lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt; &amp;#61; (math.sin(dlat / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) * math.sin(dlat / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) &amp;#43; math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) *\n             &lt;span class=\"hljs-attribute\"&gt;math&lt;/span&gt;.sin(dlon / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) * math.sin(dlon / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;))\n        &lt;span class=\"hljs-attribute\"&gt;c&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * math.atan2(math.sqrt(a), math.sqrt(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; - a))\n        &lt;span class=\"hljs-attribute\"&gt;distance&lt;/span&gt; &amp;#61; c * &lt;span class=\"hljs-number\"&gt;6378&lt;/span&gt;\n        &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; distance &amp;lt; min_dist:\n            &lt;span class=\"hljs-attribute\"&gt;min_dist&lt;/span&gt; &amp;#61; distance\n            &lt;span class=\"hljs-attribute\"&gt;key&lt;/span&gt; &amp;#61; k\n    &lt;span class=\"hljs-attribute\"&gt;return&lt;/span&gt; (key, b, min_dist)\n\n\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(get_min_dis2(a, (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["关于函数type error的问题", ["有一个字典a", "a = {0: (-37.4168610028693, 145.005372256037),", " 1: (-37.7032933463858, 144.572524145218),", " 2: (-37.7292612709136, 144.650631483984),", " 3: (-37.7777637471456, 144.772303608804),", " 4: (-37.5792063872414, 144.72816450831)}", "\n", "我想写一个函数来计算某个点到a字典中所有点的haversine距离并且返回最短距离和字典的key，我的代码如下：", "\n", "def get_min_dis2(", "a", ":dict,b:tuple):\n    min_dist = ", "10000", "\n    ", "for", " k ", "in", " ", "a", ".", "keys", "():\n        lat1, lon1 = ", "a", "[k]\n        lat2, lon2 = b\n        dlat = math.radians(lat2-lat1)\n        dlon = math.radians(lon2-lon1)\n        ", "a", " = (math.", "sin", "(dlat / ", "2", ") * math.", "sin", "(dlat / ", "2", ") + math.", "cos", "(math.radians(lat1)) * math.", "cos", "(math.radians(lat2))*\n            math.", "sin", "(dlon / ", "2", ") * math.", "sin", "(dlon / ", "2", "))\n        c = ", "2", " * math.", "atan2", "(math.", "sqrt", "(", "a", "), math.", "sqrt", "(", "1", "-", "a", "))\n        distance = c * ", "6378", "\n        ", "if", " distance < min_dist:\n            min_dist = distance\n            key = k\n    ", "return", " (key,b,min_dist)\n\n", "\n", "get_min_dis2(a,(-37.8438,145.0303))", "但是我运行时会一直报错TypeError: 'float' object is not subscriptable", "请问要如何解决呢"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n#include &amp;lt;iostream&amp;gt;\n#include &amp;lt;cstring&amp;gt;\n#include &amp;lt;cstdio&amp;gt;\nusing namespace std;\nint x1, y1;\nint x2, y2;\nint n, m;\nint MIN &amp;#61; 0x7f7f7f7f;\nint G&lt;span class=\"hljs-comment\"&gt;[15]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[15]&lt;/span&gt;;\nint A&lt;span class=\"hljs-comment\"&gt;[15]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[15]&lt;/span&gt;;\nint HP &amp;#61; 6;\nint dir&lt;span class=\"hljs-comment\"&gt;[4]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[2]&lt;/span&gt; &amp;#61; {1, 0, -1, 0, 0, 1, 0, -1};\nvoid dfs(int x, int y, int hp, int ANS) {\n    if (hp &amp;lt;&amp;#61; 0) {\n        return ;\n    }\n    if (G&lt;span class=\"hljs-comment\"&gt;[x]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[y]&lt;/span&gt; &amp;#61;&amp;#61; 3) {\n        MIN &amp;#61; min(MIN, ANS);\n        return ;\n    }\n    if (G&lt;span class=\"hljs-comment\"&gt;[x]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[y]&lt;/span&gt; &amp;#61;&amp;#61; 4) {\n        hp &amp;#61; 6;\n    }\n    ANS&amp;#43;&amp;#43;;\n    for (int i &amp;#61; 0; i &amp;lt; 4; i&amp;#43;&amp;#43;) {\n        int tx &amp;#61; x &amp;#43; dir&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[0]&lt;/span&gt;;\n        int ty &amp;#61; y &amp;#43; dir&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[1]&lt;/span&gt;;\n        if (G&lt;span class=\"hljs-comment\"&gt;[tx]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[ty]&lt;/span&gt; !&amp;#61; 0 &amp;amp;&amp;amp; A&lt;span class=\"hljs-comment\"&gt;[tx]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[ty]&lt;/span&gt; &amp;lt;&amp;#61; 1 &amp;amp;&amp;amp; tx &amp;gt;&amp;#61; 1 &amp;amp;&amp;amp; tx &amp;lt;&amp;#61; n &amp;amp;&amp;amp; ty &amp;gt;&amp;#61; 1 &amp;amp;&amp;amp; ty &amp;lt;&amp;#61; m) {\n            A&lt;span class=\"hljs-comment\"&gt;[tx]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[ty]&lt;/span&gt;&amp;#43;&amp;#43;;\n            dfs(tx, ty, hp - 1, ANS);\n            A&lt;span class=\"hljs-comment\"&gt;[tx]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[ty]&lt;/span&gt;--; \n        }\n    }\n}\nint main() {\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;\n    for (int i &amp;#61; 1; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        for (int j &amp;#61; 1; j &amp;lt;&amp;#61; m; j&amp;#43;&amp;#43;) {\n            cin &amp;gt;&amp;gt; G&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;;\n            if (G&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61;&amp;#61; 0) {\n                A&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61; false;\n            }\n            if (G&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61;&amp;#61; 2) {\n                x1 &amp;#61; i;\n                y1 &amp;#61; j;\n            }\n            if (G&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61;&amp;#61; 3) {\n                x2 &amp;#61; i;\n                y2 &amp;#61; j;\n            }\n        }\n    }\n    dfs(x1, y1, HP, 0);\n    if(MIN &amp;#61;&amp;#61; 0x7f7f7f7f) MIN &amp;#61; -1;\n    cout &amp;lt;&amp;lt; MIN &amp;lt;&amp;lt; endl;\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["这道题哪里错了？（C++）", ["题目描述\n小", "H", "在一个划分成了n*m个方格的长方形封锁线上。 每次他能向上下左右四个方向移动一格（当然小", "H", "不可以静止不动）， 但不能离开封锁线，否则就被打死了。 刚开始时他有满血", "6", "点，每移动一格他要消耗", "1", "点血量。一旦小", "H", "的 血量降到 ", "0", "， 他将死去。 他可以沿路通过拾取鼠标（什么鬼。。。）来补满血量。只要他走到有鼠标的格子，他不需要任何时间即可拾取。格子上的鼠标可以瞬间补满，所以每次经过这个格子都有鼠标。就算到了某个有鼠标的格子才死去， 他也不能通过拾取鼠标补满 HP。 即使在家门口死去， 他也不能算完成任务回到家中。\n\n地图上有 ", "5", " 种格子：\n\n数字 ", "0", "： 障碍物。\n\n数字 ", "1", "： 空地， 小", "H", "可以自由行走。\n\n数字 ", "2", "： 小", "H", "出发点， 也是一片空地。\n\n数字 ", "3", "： 小", "H", "的家。\n\n数字 ", "4", "： 有鼠标在上面的空地。\n\n小", "H", "能否安全回家？如果能， 最短需要多长时间呢？\n\n输入格式\n第一行两个整数n,m， 表示地图的大小为n*m。\n\n下面 n 行， 每行 m 个数字来描述地图。\n\n输出格式\n一行， 若小", "H", "不能回家， 输出", "-1", ",否则输出他回家所需最短时间。\n\n输入输出样例\n输入 ", "#1复制", "\n", "3", " ", "3", "\n", "2", " ", "1", " ", "1", "\n", "1", " ", "1", " ", "0", "\n", "1", " ", "1", " ", "3", "\n输出 ", "#1复制", "\n", "4", "\n说明/提示\n", "1", "<=n,m<=", "9", "\n", "\n", "\n", "#include <iostream>", "\n", "#include <cstring>", "\n", "using", " namespace std;\n", "int", " x1, y1;\n", "int", " x2, y2;\n", "int", " n, m;\n", "int", " min = ", "0x7f7f7f7f", ";\n", "int", " G[", "15", "][", "15", "];\n", "bool", " A[", "15", "][", "15", "];\n", "int", " HP = ", "6", ";\n", "int", " ans = ", "0", ";\n", "int", " dir[", "4", "][", "2", "] = {", "1", ", ", "0", ", ", "-1", ", ", "0", ", ", "0", ", ", "1", ", ", "0", ", ", "-1", "};\n", "int", " dfs(", "int", " x, ", "int", " y, ", "int", " hp, ", "int", " ANS) {\n    hp", "--;", "\n    ", "if", " (hp <= ", "0", ") {\n        ", "return", " ", "-1", ";\n    }\n    ", "if", " (G[x][y] == ", "3", ") {\n        ", "return", " ans;\n    }\n    ", "if", " (G[x][y] == ", "4", ") {\n        hp = ", "6", ";\n    }\n    ans++;\n    ", "for", " (", "int", " i = ", "0", "; i < ", "4", "; i++) {\n        ", "int", " tx = x + dir[i][", "0", "];\n        ", "int", " ty = y + dir[i][", "1", "];\n        ", "if", " (A[tx][ty] == ", "true", " && tx >= ", "1", " && tx <= n && ty >= ", "1", " && ty <= m) {\n            A[tx][ty] = ", "false", ";\n            dfs(tx, ty, hp, ans);\n            A[tx][ty] = ", "true", "; \n        }\n    }\n}\n", "int", " main() {\n    memset(A, ", "true", ", sizeof(A));\n    cin >> n >> m;\n    ", "for", " (", "int", " i = ", "1", "; i <= n; i++) {\n        ", "for", " (", "int", " j = ", "1", "; j <= m; j++) {\n            cin >> G[i][j];\n            ", "if", " (G[i][j] == ", "0", ") {\n                A[i][j] = ", "false", ";\n            }\n            ", "if", " (G[i][j] == ", "2", ") {\n                x1 = i;\n                x2 = j;\n            }\n            ", "if", " (G[i][j] == ", "3", ") {\n                x2 = i;\n                x2 = j;\n            }\n        }\n    }\n    cout << dfs(x1, y1, HP, ans) << endl;\n    ", "return", " ", "0", ";\n}\n", "\n", "为什么样例输出是4，而我的是3"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://blog.csdn.net/gjpzl/article/details/110671145\" id=\"textarea_1630046282611_1630046364565_0\" class=\"md_link_card\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n  &lt;span class=\"md_link_title\"&gt;面试笔试算法之排列组合与搜索走地图问题_gjpzl的博客-CSDN博客&lt;/span&gt;\n  &lt;span class=\"md_link_desc\" style=\"\"&gt;排列组合与搜索走地图问题Oj-235.递归实现指数型枚举题目描述从 1−n 这 n 个整数中随机选取任意多个&amp;#xff0c;每种方案里的数从小到大排列&amp;#xff0c;按字典序输出所有可能的选择方案。输入输入一个整数 n。&amp;#xff08;1≤n≤10&amp;#xff09;输出每行一组方案&amp;#xff0c;每组方案中两个数之间用空格分隔。注意每行最后一个数后没有空格。样例输入3样例输出11 21 2 31 322 33样例输入24样例输出211 21 2 31 2 3 41 2 41 31 3 41 422 32&lt;/span&gt;\n  &lt;span class=\"md_flex_card\"&gt;\n  &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n    &lt;span class=\"flex-1\"&gt;\n      &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/gjpzl/article/details/110671145&lt;/span&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;&lt;/a&gt;&lt;br /&gt;看这个&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["C++编程题目，龙&虫 改了好几遍还是不对", ["有一道题不太明白，关于C++联系题，在刷题的时候改了好几次都没有改对，希望大家帮帮我,有没有一些代码的思路或者想法，伪代码也可以，内容中没有办法打出英文的大写哦，所以用了0代替", "\n", "龙&虫", "时间限制：1秒        内存限制：128M", "题目描述", "给出一张NxM的地图，在地图上有一只虫，样子却很像龙，而且嘴能快速的喷出一种毒液，瞬间杀死敌人 ", "\n", "现在假设虫的初始位置在（X1,Y1），另外在（X2,Y2）处有一个敌人。假设虫移动一步需要单位1的时间，而杀死敌人不需要时间，并且虫的毒液射程无穷大，但毒液不能穿透阻碍物，虫只能攻击上下左右、左上、右上、左下、右下八个方向 请求出虫最少需要用多少时间才能消灭敌人", "\n", "输入描述", "第一行两个数N和M，表示矩阵的规模 ", "\n", "接下来是NxM的矩阵，0代表空地，X代表障碍物 ", "\n", "下面是若干行数据，每行为一对数据，分别是敌人的位置和虫的位置。显然，敌人和虫都不可能在障碍物上 ", "\n", "以“0 0 0 0”为输入结束标志", "\n", "输出描述", "输出第一行为虫能消灭掉敌人的最短时间 ", "\n", "显然，若能直接打到敌人，则时间为0，若无法消灭，则第二行再输出“Impossible”", "\n", "\n", "样例", "输入", "3 3", "000", "XX0", "0X0", "2 3 3 1", "0 0 0 0", "输出", "Impossible!", "\n", "\n", "提示", "对于30%的数据：NXM<=5000 ", "\n", "对于50%的数据：NXM<=10000 ", "\n", "对于100%的数据：NXM<=20000"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个问题应该不难吧&amp;#xff0c;这里给你说一下简单思路&lt;br /&gt;使用次数&amp;#xff1a;用一个变量cnt计数&amp;#xff0c;它输入一次&amp;#xff0c;你就加一次。&lt;br /&gt;日期的读取可以用字符串&amp;#xff0c;然后再将它转成数。转数时只需要转小时&amp;#xff0c;分钟&amp;#xff0c;秒。日期不用转。&lt;br /&gt;使用频率&amp;#xff1a;根据使用次数算。&lt;br /&gt;最长时间&amp;#xff1a;每次它输入后你都将使用时间算出来&amp;#xff0c;然后和当前的最大时间比。&lt;br /&gt;最短时间&amp;#xff1a;也是每次它输入后你都将使用时间算出来&amp;#xff0c;然后和当前的最短时间比。&lt;br /&gt;平均时间&amp;#xff1a;将每次你算出来的时间加在一起&amp;#xff0c;最后除以使用次数。&lt;br /&gt;先给你一个简单的思路&amp;#xff0c;你自己想想&amp;#xff0c;如果还有什么地方不明白&amp;#xff0c;我再告诉你&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["c++ 初级 ，我该怎么做，🙏🙏", ["start: 2021-03-03 09:00:00, stop: 2021-03-03 21:51:38", "start: 2021-03-03 22:51:38, stop: 2021-03-04 02:10:44", "start: 2021-03-04 03:10:44, stop: 2021-03-04 15:15:41", "start: 2021-03-04 16:15:41, stop: 2021-03-05 03:37:11", "start: 2021-03-05 04:37:11, stop: 2021-03-05 13:43:33", "start: 2021-03-05 14:43:33, stop: 2021-03-05 22:04:12", "start: 2021-03-05 23:04:12, stop: 2021-03-06 11:02:25", "start: 2021-03-06 12:02:25, stop: 2021-03-06 21:32:53", "start: 2021-03-06 22:32:53, stop: 2021-03-07 07:48:56", "start: 2021-03-07 08:48:56, stop: 2021-03-07 18:46:56", "start: 2021-03-07 19:46:56, stop: 2021-03-07 22:33:49", "start: 2021-03-07 23:33:49, stop: 2021-03-08 07:19:41", "start: 2021-03-08 08:19:41, stop: 2021-03-08 19:59:41", "start: 2021-03-08 20:59:41, stop: 2021-03-09 07:31: ", "\n", "这是打印机这个月的使用次数，时间跟日期，如何读取，并输出，这台打印机的这个月的使用频率，最长时间，最短时间，跟平均时间"]], "Tag": "算法设计"}
{"Answer": "这个问题想了很久 ,像是递归,又有一些差别\r\n分析一下如何过河吧,得出一个结论就是 ,数值最小的两个需要当勤劳的搬运工\r\n1,2,5,10\r\n不计手电的情况 ,就是  10,5   和 2,1,总计 12 ,\r\n但是需要手电,在上述过程中先是 1 搬运一次 然后是2 搬运一次 ,由于搬运产生的额外开销 1,2 加2\r\n也就是 12+1+2+2\r\n分析1,2,3,5,10,\r\n不计手电的情况 就是 10,5 和3,2 和 1 总计14\r\n但是需要手电,在上述过程中先是 1 搬运一次 +1然后是2 搬运一次+2 ,由于搬运产生的额外开销 1,2 加2  ,然后 1又开始搬运  +1 \r\n14+1+2+2+1\r\n分析1,2,3,5,7,10\r\n不计手电的情况 就是10,7 和 5,3  和 2,1总计17\r\n但是需要手电,在上述过程中先是 1 搬运一次+1 然后是2 搬运一次+2 ,由于搬运产生的额外开销 1,2 加2  ,然后 1又开始搬运  +1 ,然后 2搬运一次+2 额外开销2 \r\n17+1+2+2+1+2+2\r\n然后就找出规程了,搬运一次+1 搬运第二次加4 ,第三次 加1 第四次加2  \r\n搬运的次数为 数组长度-2  \r\n接下来上代码 .....不必要了\r\n就是先总结次数,然后加起来就可以了,", "Konwledge_Point": "负权边的最短路径", "Question": ["2017完美世界研发部笔试题_取经", ["一、题目概述", "\n\n", "师徒四人西天取经，途中必需跨过一座桥，四个人从桥的同一端出发，你得帮助他们到达另一端，天色很暗而他们只有一支手电筒，一次同时最多可以有两个人一起经过桥。而过桥的时候必须持有手电筒，所以就得有人把手电筒带来带去，来回桥两端。手电筒不能用丢的方式来传递，四个人的步行速度各不同，若两人同行则以较慢者的速度为准，大师兄需花1分钟过桥，二师兄需花2分钟过桥，三师兄需花5分钟过桥，师傅需花10分钟过桥。请问他们最短在多少分钟内过桥？（）", "\nA. 18", "\nB. 17", "\nC. 19", "\nD. 16", "\n\n", "一开始直接想到，用最小的那个数来回跑，也就是大师兄来回跑，算出来是19，可是又想了下，如下： ", "\n1、大师兄和二师兄过桥，算二师兄的时间也就是2分钟 ", "\n2、大师兄独自拿手电回来 1分钟 ", "\n3、三师弟和师傅那手电过桥，算师傅的时间也就是10分钟 ", "\n4、二师弟拿手电回来 2分钟 ", "\n5、最后大师兄和二师弟过桥 2分钟 ", "\n总共17分钟", "\n\n", "虽然结果出来了，感觉有点不实在，这其中的规律是怎样的呢？有没有什么规律解决这类似的问题呢，比如只有三个人过桥呢？二师兄不过桥，结果又是什么呢？再比如，多一个人过桥呢？多了个白龙马过桥，白龙马过桥的时间时6分钟，结果又是什么呢？有没有什么规律呢，或者说有没有个公式来计算呢？用编程怎么解？", "\n\n", "具体看链接：", "http://blog.csdn.net/Two_Water/article/details/52590899"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;忘记初始化了&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n\n        &lt;span class=\"hljs-attribute\"&gt;min&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;201&lt;/span&gt;;\n        &lt;span class=\"hljs-attribute\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;k);\n        &lt;span class=\"hljs-attribute\"&gt;num&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        \n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["共同的前缀，给你K个字符串，请求出它们的最长公共前缀。 输入 第一行是一个整数N，表示测试样例的个数。", ["Description", "给你K个字符串，请求出它们的最长公共前缀。 输入 第一行是一个整数N，表示测试样例的个数。 每个测试样例的第一行是一个整数K（2 <= k <= 20），表示有多少个字符串；以后每行是一个字符串，每个字符串的长度不超过200个字符。 输出 每行输出一个样例的结果。先输出“Case #: ”，其中’#’为样例的序号（从1开始），冒号为英文冒号，后接一个空格；然后是对应样例的结果。如果没有公共前缀，则无需输出前缀，但Case信息仍需要输出。", "\n", "Sample Input", "2", "3", "ACD", "ACDEF", "ACDFE", "2", "ABC", "BCD", "\n", "Sample Output", "Case 1: ACD", "Case 2:", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<string.h>", "\n", "int", " ", "main", "()", " \n", "{\n    ", "int", " n,k,i,min = ", "201", ",j,temp,x = ", "1", ",num;\n    ", "char", " str[", "22", "][", "202", "];\n    ", "scanf", "(", "\"%d\"", ",&n);\n    ", "while", "(n--)\n    {\n        ", "scanf", "(", "\"%d\"", ",&k);\n        num = ", "0", ";\n        ", "for", "(i = ", "0", ";i < k;i++)\n        {\n            ", "scanf", "(", "\"%s\"", ",str[i]);\n        }\n        ", "printf", "(", "\"Case %d: \"", ",x);\n        x++;\n        ", "for", "(i=", "0", ";i<k;i++)\n        {\n               temp = ", "strlen", "(str[i]);\n               ", "if", "(temp < min)\n            {\n                min = temp;", "//min为最短字符串的长度", "\n            }\n        }\n        ", "for", "(j = ", "0", ";j < min;j++)\n        {\n            ", "for", "(i = ", "0", ";i < k - ", "1", ";i++)\n            {\n                ", "if", "(str[i][j]==str[i+", "1", "][j])\n                {\n                    ", "continue", ";\n                } \n                ", "else", "\n                {\n                    num = ", "1", ";\n                    ", "break", ";\n                }\n            }\n            ", "if", "(num!=", "1", ")\n            {\n                   ", "printf", "(", "\"%c\"", ",str[", "0", "][j]);\n            }\n        }\n        ", "printf", "(", "\"\\n\"", ");\n    }\n    ", "return", " ", "0", ";\n}\n \n\n", "\n", "WA"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我是C菜鸡&amp;#xff0c;首先看这个是堆栈信息&amp;#xff0c;应该是if(s[m]&amp;#61;&amp;#61;s[m&amp;#43;j])&amp;#xff0c;m&amp;#43;j越界了。&lt;br /&gt;第二&amp;#xff0c;刚开始学算法&amp;#xff0c;还是多看看题解&amp;#xff0c;没必要自己解&amp;#xff0c;有很多惯用的算法&amp;#xff0c;理解之后在遇到能想到&amp;#xff0c;就是你的东西。从头研究算法&amp;#xff0c;意义不大&amp;#xff0c;我们都是普通人&amp;#xff0c;太费时间&amp;#xff0c;会打击积极性。&lt;br /&gt;当然不只有题解才是对的&amp;#xff0c;你的思路解不出来&amp;#xff0c;再看题解也很合理。题解看懂&amp;#xff0c;在分析一下你的代码&amp;#xff0c;是超时间限制了&amp;#xff0c;还是边界判断的有问题。&lt;br /&gt;报错信息&amp;#xff0c;如果分析不对&amp;#xff0c;就得C大佬看看了&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["力扣第三题：无重复字符的最长子串 想知道哪里出错？", ["问题遇到的现象和发生背景", "\n", "力扣第三题：无重复字符的最长子串 求问哪里出错？", "\n", "\n", "问题相关代码，请勿粘贴截图", "\n", "int lengthOfLongestSubstring(char * s){\n    int i,j,m,n,k1,k2,k3=", "0", ";           ", "//i", "为子串起始下标\n    ", "for", "(i=", "0", ";s[i+", "1", "]!=", "'0'", ";i++) ", "//", "每个元素依次作为子串起始\n    {\n        ", "for", "(k2=", "0", ";s[k2]!=", "'0'", ";k2++);", "//", "使k2等于数组长度\n        ", "for", "(m=i;s[m+", "1", "]!=", "'0'", ",m<(k2+i);m++)", "//", "检验字符m，从首字符到已知最短长度（k2+i)或最后一位依次循环\n        {\n            ", "for", "(j=", "1", ",k1=(m-i+", "1", ");s[m+j]!=", "'0'", ";j++)\n            {\n                ", "if", "(s[m]==s[m+j])\n                {\n                    ", "break", ";\n                }\n                ", "else", " k1++;", "//", "k1保存不含有与检验字符m重复字符的子串长度\n            }\n            ", "if", "(k1<k2)\n            {\n                k2=k1;", "//", "k2保存不含有重复字符的子串长度\n            }\n        }\n        ", "if", "(k2>k3)\n        {\n            k3=k2;", "//", "k3保存不含有重复字符的最长子串的长度\n        }\n    }\n    return k3;\n}\n\n", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "①一串字符串 从头到尾每个元素依次作为子串的首元素。", "②判断以某位元素作为首元素的这个子串的长度，再次（在这个子串中）从头到尾每个元素依次循环，遇到相同的就返回。", "③同时记录当前长度，通过k三个变量记录长度来达到传递最终正确长度的效果", "\n", "我想要达到的结果", "\n", "虽然可能有更好的办法，但我还是想知道我的这个错在哪里，我无法相信我无法理解，我甚至自己举例子一步步试了，完全没有问题！！令人费解！"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/u011542204/article/details/47105911", "Konwledge_Point": "负权边的最短路径", "Question": ["C程序输出题目所要求的序列，序列中每个元素一行。如果存在两个符合要求的序列", ["Problem Description", "\n由于整日整夜地对着这个棋盘，Lele终于走火入魔。每天一睡觉，他就会梦到自己会被人被扔进一个棋盘中，一直找不到出路，然后从梦中惊醒。久而久之，Lele被搞得精神衰弱。梦境是否会成为现实，谁也说不准，不过不怕一万只怕万一。现在Lele每次看到一个棋盘，都会想象一下自己被关进去以后要如何逃生。", "\n\n", "Lele碰到的棋盘都是正方形的，其中有些格子是坏的，不可以走，剩下的都是可以走的。只要一走到棋盘的边沿（最外面的一圈），就算已经逃脱了。Lele梦见自己一定会被扔在一个可以走的格子里，但是不确定具体是哪一个，所以他要做好被扔在任意一个格子的准备。", "\n\n", "现在Lele请你帮忙，对于任意一个棋盘，找出一个最短的序列，序列里可以包括\"north\"(地图里向上),\"east\"(地图里向右),\"south\"(地图里向下),\"west\"(地图里向左)，这四个方向命令。不论Lele被扔在棋盘里的哪个好的格子里，都能按这个序列行走逃出棋盘。", "\n逃脱的具体方法是：不论Lele被扔在哪里，Lele按照序列里的方向命令一个一个地走，每个命令走一格，如果走的时候会碰到坏的格子，则忽略这条命令。当然，如果已经逃脱了，就可以不考虑序列中剩下的命令了。", "\n\n", "Input", "\n本题目包含多组测试，请处理至文件结束。", "\n每组测试第一行包含一个正整数 N (0<N<9)，代表棋盘的大小是 N*N", "\n接下来有N行，每行N个字符代表这个棋盘。", "\n其中0代表该位置是好的，可以走，1代表该位置是坏的，不可以走。", "\n\n", "题目数据保证，对于任意一个棋盘，都存在题目中所要求的序列", "\n\n", "Output", "\n对于每组数据，输出题目所要求的序列，序列中每个元素一行。", "\n如果存在两个符合要求的序列，请输出字典序最小的那个序列。", "\n\n", "两个测试之间请用一个空行隔开。", "\n\n", "Sample Input", "\n4", "\n1101", "\n0001", "\n1100", "\n1001", "\n\n", "Sample Output", "\neast", "\nnorth"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/acm_cxlove/article/details/7750207", "Konwledge_Point": "负权边的最短路径", "Question": ["Escape from Tetris                  ", ["Problem Description", "\n由于整日整夜地对着这个棋盘，Lele终于走火入魔。每天一睡觉，他就会梦到自己会被人被扔进一个棋盘中，一直找不到出路，然后从梦中惊醒。久而久之，Lele被搞得精神衰弱。梦境是否会成为现实，谁也说不准，不过不怕一万只怕万一。现在Lele每次看到一个棋盘，都会想象一下自己被关进去以后要如何逃生。", "\n\n", "Lele碰到的棋盘都是正方形的，其中有些格子是坏的，不可以走，剩下的都是可以走的。只要一走到棋盘的边沿（最外面的一圈），就算已经逃脱了。Lele梦见自己一定会被扔在一个可以走的格子里，但是不确定具体是哪一个，所以他要做好被扔在任意一个格子的准备。", "\n\n", "现在Lele请你帮忙，对于任意一个棋盘，找出一个最短的序列，序列里可以包括\"north\"(地图里向上),\"east\"(地图里向右),\"south\"(地图里向下),\"west\"(地图里向左)，这四个方向命令。不论Lele被扔在棋盘里的哪个好的格子里，都能按这个序列行走逃出棋盘。", "\n逃脱的具体方法是：不论Lele被扔在哪里，Lele按照序列里的方向命令一个一个地走，每个命令走一格，如果走的时候会碰到坏的格子，则忽略这条命令。当然，如果已经逃脱了，就可以不考虑序列中剩下的命令了。", "\n\n", "Input", "\n本题目包含多组测试，请处理至文件结束。", "\n每组测试第一行包含一个正整数 N (0<N<9)，代表棋盘的大小是 N*N", "\n接下来有N行，每行N个字符代表这个棋盘。", "\n其中0代表该位置是好的，可以走，1代表该位置是坏的，不可以走。", "\n\n", "题目数据保证，对于任意一个棋盘，都存在题目中所要求的序列", "\n\n", "Output", "\n对于每组数据，输出题目所要求的序列，序列中每个元素一行。", "\n如果存在两个符合要求的序列，请输出字典序最小的那个序列。", "\n\n", "两个测试之间请用一个空行隔开。", "\n\n", "Sample Input", "\n4", "\n1101", "\n0001", "\n1100", "\n1001", "\n\n", "Sample Output", "\neast", "\nnorth"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\nimport tkinter &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; tk\nimport &lt;span class=\"hljs-built_in\"&gt;random&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;from&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;random&lt;/span&gt; import randint\n \ndef &lt;span class=\"hljs-built_in\"&gt;tick&lt;/span&gt;():\n    &lt;span class=\"hljs-built_in\"&gt;global&lt;/span&gt; clock_val, after_id\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; clock_started:\n        clock_val &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        clock_lab[&lt;span class=\"hljs-string\"&gt;&amp;#34;text&amp;#34;&lt;/span&gt;] &amp;#61; str(clock_val)\n        after_id &amp;#61; clock_lab.&lt;span class=\"hljs-keyword\"&gt;after&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;tick&lt;/span&gt;)\n        \ndef click1(event):\n    &lt;span class=\"hljs-built_in\"&gt;global&lt;/span&gt; clock_started\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; clock_started:&lt;span class=\"hljs-comment\"&gt;#需要&amp;#xff0c;主要是为了不执行clock_lab.after(1000, tick)这句&amp;#xff0c;要不连续点击会生成多个延时,这样假设1秒内点了3次按钮&amp;#xff0c;那么将会在1s后同时执行tick&amp;#43;3&amp;#xff0c;这样计时就错误了&lt;/span&gt;\n        clock_started &amp;#61; True\n        clock_lab.&lt;span class=\"hljs-keyword\"&gt;after&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;tick&lt;/span&gt;)\n    clicked_btn &amp;#61; event.widget&lt;span class=\"hljs-comment\"&gt;#widget是当前点击的按钮控件&amp;#xff0c;更多属性参考这篇文章http://c.biancheng.net/tkinter/event.html&lt;/span&gt;\n    clicked_val &amp;#61; int(clicked_btn[&lt;span class=\"hljs-string\"&gt;&amp;#34;text&amp;#34;&lt;/span&gt;])\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; clicked_val &amp;#61;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]:\n        clicked_btn[&lt;span class=\"hljs-string\"&gt;&amp;#34;state&amp;#34;&lt;/span&gt;] &amp;#61; tk.DISABLED\n        del &lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        clock_started &amp;#61; False\n        clock_lab.after_cancel(after_id)\n \n \nwindow&amp;#61;tk.Tk()\n \nwindow.title(&lt;span class=\"hljs-string\"&gt;&amp;#34;Clicker&amp;#34;&lt;/span&gt;)\n \n&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;&amp;#61;[]\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;):\n    ran_number&amp;#61;&lt;span class=\"hljs-built_in\"&gt;random&lt;/span&gt;.randint(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;999&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; ran_number &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;:\n        ran_number&amp;#61;&lt;span class=\"hljs-built_in\"&gt;random&lt;/span&gt;.randint(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;999&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;.append(ran_number)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;):\n    button_1&amp;#61;tk.Button(window, &lt;span class=\"hljs-keyword\"&gt;text&lt;/span&gt;&amp;#61;str(&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;[i]),width&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n    button_1.grid(row&amp;#61;i%&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,column&amp;#61;&lt;span class=\"hljs-comment\"&gt;i//5)&lt;/span&gt;\n    button_1.bind(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;lt;Button-1&amp;gt;&amp;#34;&lt;/span&gt;,click1)\n \n \n&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;()\nprint(&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;)\nclock_val &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\nclock_lab &amp;#61; tk.Label(window, &lt;span class=\"hljs-keyword\"&gt;text&lt;/span&gt;&amp;#61;str(clock_val))\nclock_lab.grid(column&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, row&amp;#61;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\nclock_started &amp;#61; False&lt;span class=\"hljs-comment\"&gt;#这个是标记是否开始游戏的变量&amp;#xff0c;默认为False尚未开始&amp;#xff0c;在点击按钮后再开始并且计时&lt;/span&gt;\nwindow.mainloop()\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["python tkinter", ["对这段代码中一些步骤不理解", "\n", "\n", "\n", "一个窗口拥有5*5按钮的划分，按钮上的数字是随机赋予的，最下面那条label是计时器，游戏规则", "是从25个数字中找到最小的数字，然后点击，按钮上的数字立刻DISABLED（变成灰色），当点击", "第一个按钮的同时，下面label也开始计时（按秒数算），然后找第二小的数字, 以此类推，25个数", "字全部点到，看谁用时最短", "提问在注释里", "\n", "import tkinter ", "as", " tk\nimport ", "random", "\n", "from", " ", "random", " import randint\n\ndef ", "tick", "():\n    ", "global", " clock_val, after_id\n    ", "if", " clock_started:\n        clock_val += ", "1", "\n        clock_lab[", "\"text\"", "] = str(clock_val)\n        after_id = clock_lab.", "after", "(", "1000", ", ", "tick", ")\n        \ndef click1(event):\n    ", "global", " clock_started\n    ", "if", " ", "not", " clock_started:", "#下面已经把clock_started设置成False了，not clock_started就是True，clock_started的状态一直是False，这里的if应该用不到吧", "\n        clock_started = True\n        clock_lab.", "after", "(", "1000", ", ", "tick", ")\n    clicked_btn = event.widget", "#这条代码在这里起什么作用？", "\n    clicked_val = int(clicked_btn[", "\"text\"", "])\n    ", "if", " clicked_val == ", "number", "[", "0", "]:\n        clicked_btn[", "\"state\"", "] = tk.DISABLED\n        del ", "number", "[", "0", "]\n    ", "if", " ", "len", "(", "number", ") == ", "0", ":\n        clock_started = False\n        clock_lab.after_cancel(after_id)\n\n\nwindow=tk.Tk()\n\nwindow.title(", "\"Clicker\"", ")\n\n", "number", "=[]\n", "for", " i ", "in", " range(", "25", "):\n    ran_number=", "random", ".randint(", "1", ",", "999", ")\n    ", "while", " ran_number ", "in", " ", "number", ":\n        ran_number=", "random", ".randint(", "1", ",", "999", ")\n    ", "number", ".append(ran_number)\n", "for", " i ", "in", " range(", "25", "):\n    button_1=tk.Button(window, ", "text", "=str(", "number", "[i]),width=", "10", ")\n    button_1.grid(row=i%", "5", ",column=", "i//5)", "\n    button_1.bind(", "\"<Button-1>\"", ",click1)\n\n\n", "number", ".", "sort", "()\nclock_val = ", "0", "\nclock_lab = tk.Label(window, ", "text", "=str(clock_val))\nclock_lab.grid(column=", "2", ", row=", "5", ")\nclock_started = False", "#这里为什么要设置成False", "\nwindow.mainloop()\n\n\n\n\n\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你具体哪个问题不懂&amp;#xff1f;&lt;br /&gt;可以看看 &lt;a href=\"https://blog.csdn.net/uniqsa/article/details/78519140\" id=\"textarea_1661427937221_1661428058767_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/uniqsa/article/details/78519140&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["关于c++转python的问题", ["请问有人能帮我把以下这段c++代码转成python代码吗？十分感谢！", "\n", "问题描述：", "地图每个位置都有一个数字表示经过这个位置需要用的时间，地图如下：", "1 6 6 6", "15 7 6 6", "15 3 6 6", "15 15 1 1", "输入：第一行包含两个正整数 N 和 M(1<N,M<30）表示地图长和宽", "下面一行包含 4 个整数，", "前两个数表示起点，后面两个数表示终点，最后是一个 N 行 M 列的二维数组，", "每个数字表示走当前位置需要用的时间。", "输出：一个整数，表示最短时间。样例输入：", "【样例输入】", "4 4", "1 1 4 4", "1 6 6 6", "15 7 6 6", "15 3 6 6", "15 15 1 1", "【样例输出】", "25", "【样例解释】", "\n", "\n", "#include<bits/stdc++.h>\nusing namespace std;\n\nint a", "[101]", "[101]", ",m,n,sum=0,mins=2147483647;\nint f", "[4]", "[2]", "={{0,1},{-1,0},{1,0},{0,-1}};\nint sx,sy,ex,ey,book", "[101]", "[101]", ";\n\nvoid dfs(int x,int y){\n    book", "[x]", "[y]", "=1;\n    sum+=a", "[x]", "[y]", ";\n    if(x==ex && y==ey){\n        mins=sum<mins?sum:mins;\n        book", "[x]", "[y]", "=0;\n        sum-=a", "[x]", "[y]", ";\n        return;\n    }\n    for(int i=0;i<4;i++){\n        int xx=x+f", "[i]", "[0]", ";\n        int yy=y+f", "[i]", "[1]", ";\n        if(xx>=1 && xx<=n && yy>=1 && yy<=m && a", "[xx]", "[yy]", " && book", "[xx]", "[yy]", "==0){\n            dfs(xx,yy);\n        }\n    }\n    book", "[x]", "[y]", "=0;\n    sum-=a", "[x]", "[y]", ";\n    return;\n}\nint main(){\n    cin >> n >> m;\n    cin >> sx >> sy >> ex >> ey;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            cin >> a", "[i]", "[j]", ";\n        }\n    }\n    dfs(sx,sy);\n    cout << mins;\n    return 0;\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;sum &amp;#61; 1 放到if外面去&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["水题全WA|最大连续组长度|非常感谢", ["水题全WA，麻烦各位帮忙看看，谢谢！", "\n", "问题：自己检查n遍觉得无懈可击（汗），样例都过了，测评就全", "WA", "了", "\n", "部分代码意义已注释", "\n", "题目：", "\n", "\n", "最大连续组长度", "\n", "小X在黑板上任意写下一串由26个英文字母组成的字母序列。然后，要求同学们在最短的时间里找出这个字母序列中哪个字母连续出现的次数最多，并且指出该字母一共连续出现了多少次。", "例如：字母序列为", "ABBAAAACC", "，其中左边起第1个字母A没有连续出现。第二字母B连续出现了2次。第4个字母A连续出现了4次，第8个字母C连续出现了两次。则在这个字母序列中，第4个字母A连续出现的次数最多，共4次。", "编程解决这个问题。", "\n", "\n", "\n", "输入格式", "\n", "输入文件名：len.in", "第一行为正整数t(≤5)，表示数据组数；每组数据中，第一行为字母序列中的字母个数n(<10000），第二行为字母序列，全部由大写字母组成。", "\n", "\n", "\n", "输出格式", "\n", "输出文件名：len.out", "对于每组数据，输出两行结果：第一行为最多连续出现的次数，第二行为连续出现次数最多的字母。（如果最多的次数有多个，输出最早出现的字母）。", "\n", "\n", "\n", "输入/输出例子1", "\n", "输入：", "2", "9", "ABBAAAACC", "20", "AAABBBAAAABBBBBBBCCC", "输出：", "4", "A", "7", "B", "\n", "\n", "本蒟蒻的代码", "\n", "#include <bits/stdc++.h>\nusing namespace std;\nstring s;\n", "int", " main (){\n    //freopen (", "\"len.in\"", ",", "\"r\"", ",stdin);\n    //freopen (", "\"len.out\"", ",", "\"w\"", ",stdout);\n    ", "int", " ", "t", ";\n    cin>>", "t", ";\n    while (", "t", "--){\n        ", "int", " ", "n", ",", "max", "=", "1", ",", "sum", "=", "1", ";//", "max", "：最多连续出现的次数|", "sum", "：目前连续出现的次数 \n        ", "char", " v,maxv;//v：目前的字母|maxv：最多连续出现次数最多的字母 \n        cin>>", "n", ">>s;\n        maxv=s[", "0", "];//以防万一序列中的元素各不相同，不然maxv就没赋值啦 \n        for (", "int", " i=", "1", ";i<=", "n", ";i++){\n            ", "if", " (s[i]==s[i-", "1", "]){//如果和上一个重复 \n                ", "sum", "++;\n                v=s[i];\n            }\n            else{//如果不同 \n                ", "if", " (", "sum", ">", "max", "){//如果大于", "max", " \n                    ", "max", "=", "sum", ";\n                    maxv=v;\n                    ", "sum", "=", "1", ";\n                }\n                v=s[i];\n            }\n        }\n        cout<<", "max", "<<endl<<maxv<<endl;\n    }\n    return ", "0", ";\n} \n", "\n", "过样例：", "\n", "\n", "去测评：", "\n", "\n", "非常感谢"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;char s[200001] &amp;#61; {0},st[201][101] &amp;#61; {0};\nint j &amp;#61; 0;\nfor(int i&amp;#61;0; i&amp;lt;strlen(s); i&amp;#43;&amp;#43;)\n{\n    if(s[i]&amp;#61;&amp;#61;&amp;#39; &amp;#39;)\n    {\n        p&amp;#43;&amp;#43;;\n        j&amp;#61;0;\n    }\n    st[p][j&amp;#43;&amp;#43;]&amp;#61;s[i];\n}\nfor(j&amp;#61;0; j&amp;lt;p-1; j&amp;#43;&amp;#43;)\n    for(i&amp;#61;0; i&amp;lt;p-j-1; i&amp;#43;&amp;#43;)\n        if(strlen(st[i])&amp;gt;strlen(st[i&amp;#43;1]))\n        {\n            strcpy(t,st[i]);\n            strcpy(st[i],st[i&amp;#43;1]);\n            strcpy(st[i&amp;#43;1],t);\n        }\nputs(st[p-1]);\nputs(st[0]);&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["为什么会测不出来啊？", ["输入字母之后弹出Program received signal SIGSEGV, Segmentation fault.，不知为什么,调试时箭头停在st[p][j]=s[i];这一行，编译时没有报错", "\n\n", "用DevC++写的，TDM-GCC 4.9.2 64-bit Release", "\n\n", "代码目的是从一行英文子串中找到并输出最长最短单词", "\n\n", "是新手，在oj上测试是显示运行错误", "\n\n", "\n", "#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nchar s[200001],st[201][101],t[101];\nint main()\n{\n\tint p=0;\n\tgets(s);\n\tfor(int i=0; i<strlen(s); i++)\n\t\tif(s[i]==',')s[i]=' ';\n\tfor(int i=0; i<strlen(s); i++)\n\t{\n\t\tif(s[i]==' ')p++;\n\t\tfor(int j=0; s[i]!=' '; j++)\n\t\t\tst[p][j]=s[i];\n\t}\n\tfor(int j=1; j<=p; j++)\n\t\tfor(int i=1; i<p; i++)\n\t\t\tif(strlen(st[i])>strlen(st[i+1]))\n\t\t\t{\n\t\t\t\tstrcpy(t,st[i]);\n\t\t\t\tstrcpy(st[i],st[i+1]);\n\t\t\t\tstrcpy(st[i+1],t);\n\t\t\t}\n\tputs(st[p]);\n\tputs(st[1]);\n\treturn 0;\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;img alt=\"\" height=\"105\" src=\"https://img-ask.csdnimg.cn/upload/1621409374653.png\" width=\"273\" /&gt;&lt;/p&gt;\n\n&lt;p&gt;照你这个说法&amp;#xff0c;这两个红框都代表的皮炎平&amp;#xff0c;可是价格却不一样&amp;#xff1f; 咋合并&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["pandas的merge函数多键合并的问题", ["原始数据如下", "\n\n", "\n", "a = pd.DataFrame({'药品名':['感康','感冒灵','皮炎平'], '商品号':['8124','0023','0045'],'条形码':['69000000001','69000002103','69000000003'], '规格':['12片','8袋','15克']})\nb = pd.DataFrame({'批准文号':['国药准字Z43018942','国药准字Z23010042','国药准字H13018942', '国药准字B12018332'], '商品号':['0012','0023','1023','0045'],'条形码':['69000000001','69000000002','69000000003', '69000000553'], '零售价':[10, 9, 7.5, 25]})", "\n\n", "\n\n", "我想通过‘商品号’和‘条形码’这两列，合并这两个表格", "\n但这两列，只要其中一列相等即可合并，我要的结果如下：", "\n\n", "\n\n", "如何用最短的代码实现这个目的呢"]], "Tag": "算法设计"}
{"Answer": "可以直接关闭订单，自解决", "Konwledge_Point": "负权边的最短路径", "Question": ["微信扫码支付，关闭订单和撤销订单？", [" /**\n        * \n        * 关闭订单\n        * @param WxPayData inputObj 提交给关闭订单API的参数\n        * @param int timeOut 接口超时时间\n        * @throws WxPayException\n        * @return 成功时返回，其他抛异常\n        */\n        public static WxPayData CloseOrder(WxPayData inputObj, int timeOut = 6)\n        {\n            string url = \"https://api.mch.weixin.qq.com/pay/closeorder\";\n            //检测必填参数\n            if(!inputObj.IsSet(\"out_trade_no\"))\n            {\n                throw new WxPayException(\"关闭订单接口中，out_trade_no必填！\");\n            }\n\n            inputObj.SetValue(\"appid\",WxPayConfig.APPID);//公众账号ID\n            inputObj.SetValue(\"mch_id\",WxPayConfig.MCHID);//商户号\n            inputObj.SetValue(\"nonce_str\",GenerateNonceStr());//随机字符串     \n            inputObj.SetValue(\"sign\",inputObj.MakeSign());//签名\n            string xml = inputObj.ToXml();\n\n            var start = DateTime.Now;//请求开始时间\n\n            string response = HttpService.Post(xml, url, false, timeOut);\n\n            var end = DateTime.Now;\n            int timeCost = (int)((end - start).TotalMilliseconds);\n\n            WxPayData result = new WxPayData();\n            result.FromXml(response);\n\n            ReportCostTime(url, timeCost, result);//测速上报\n\n            return result;\n        }\n            /**\n        * \n        * 撤销订单API接口\n        * @param WxPayData inputObj 提交给撤销订单API接口的参数，out_trade_no和transaction_id必填一个\n        * @param int timeOut 接口超时时间\n        * @throws WxPayException\n        * @return 成功时返回API调用结果，其他抛异常\n        */\n        public static WxPayData Reverse(WxPayData inputObj, int timeOut = 6)\n        {\n            string url = \"https://api.mch.weixin.qq.com/secapi/pay/reverse\";\n            //检测必填参数\n            if (!inputObj.IsSet(\"out_trade_no\") && !inputObj.IsSet(\"transaction_id\"))\n            {\n                throw new WxPayException(\"撤销订单API接口中，参数out_trade_no和transaction_id必须填写一个！\");\n            }\n\n            inputObj.SetValue(\"appid\", WxPayConfig.APPID);//公众账号ID\n            inputObj.SetValue(\"mch_id\", WxPayConfig.MCHID);//商户号\n            inputObj.SetValue(\"nonce_str\", GenerateNonceStr());//随机字符串\n            inputObj.SetValue(\"sign\", inputObj.MakeSign());//签名\n            string xml = inputObj.ToXml();\n\n            var start = DateTime.Now;//请求开始时间\n\n            Log.Debug(\"WxPayApi\", \"Reverse request : \" + xml);\n\n            string response = HttpService.Post(xml, url, true, timeOut);\n\n            Log.Debug(\"WxPayApi\", \"Reverse response : \" + response);\n\n            var end = DateTime.Now;\n            int timeCost = (int)((end - start).TotalMilliseconds);\n\n            WxPayData result = new WxPayData();\n            result.FromXml(response);\n\n            ReportCostTime(url, timeCost, result);//测速上报\n\n            return result;\n        }\n", "\n\n", "注意：订单生成后不能马上调用关单接口，最短调用时间间隔为5分钟。", "\n我生成订单想立即关闭，怎么做"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/375146442456137.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;给你写出来了&amp;#xff0c;看我的。&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n//最大公共子序列的问题\n#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;string.h&amp;gt;\n#define &lt;span class=\"hljs-symbol\"&gt;MAXSIZE&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;\nint c[&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;];\nint b[&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;];\nchar f[&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;];\nvoid print(int i, int j, int s, char x[], char y[]);\nint max(int m, int n, int i, int j) // c[i][j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;].c[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j]\n{\n    if (m &amp;gt; n) {\n        b[i][j] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        return m;\n    } else {\n        b[i][j] &amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n        return n;\n    }\n}\nint &lt;span class=\"hljs-symbol\"&gt;LCS&lt;/span&gt;(char x[], char y[]) {\n    int i, j;\n    int m, n;\n    m &amp;#61; strlen(x);\n    n &amp;#61; strlen(y);\n    for (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;)\n        c[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    for (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j&amp;#43;&amp;#43;)\n        c[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][j] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    for (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; m; i&amp;#43;&amp;#43;) {\n        for (j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; n; j&amp;#43;&amp;#43;) {\n            if (x[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61;&amp;#61; y[j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]) {\n                b[i][j] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                c[i][j] &amp;#61; c[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            } else {\n                c[i][j] &amp;#61; max(c[i][j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], c[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j], i, j);\n            }\n        }\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;X和Y的LCS是&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    print(m, n, c[m][n], x, y);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;, f);\n    return c[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n}\nvoid print(int i, int j, int s, char x[], char y[]) {\n    if (b[i][j] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        f[s - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; x[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n        i--;\n        j--;\n        s--;\n        print(i, j, s, x, y);\n    } else if (b[i][j] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        j--;\n        print(i, j, s, x, y);\n    } else if (b[i][j] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        i--;\n        print(i, j, s, x, y);\n    }\n}\nint main() {\n    char x[&lt;span class=\"hljs-symbol\"&gt;MAXSIZE&lt;/span&gt;];\n    char y[&lt;span class=\"hljs-symbol\"&gt;MAXSIZE&lt;/span&gt;];\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;你要输入的X字符串为&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, x);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;你要输入的Y字符串为&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, y);\n    int s &amp;#61; &lt;span class=\"hljs-symbol\"&gt;LCS&lt;/span&gt;(x, y);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;公共子序列长度为&amp;#xff1a;%d\\n&amp;#34;&lt;/span&gt;, s);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["求最长子序列代码错误如何修改？", ["问题遇到的现象和发生背景", "\n", "求最长子序列，怎么输入都是输出最短的那个，或是一个拼接答案，该怎么改？", "\n", "问题相关代码，请勿粘贴截图", "\n", "#", "include", "<string.h>", "\n", "#", "include", "<stdlib.h>", "\n", "#", "include", "<stdio.h>", "\n", "#", "define", " MAX 64", "\n\n", "typedef", " ", "struct", " ", "node", "{\n    ", "char", " data[MAX];\n    ", "int", " length;\n}SqString;\n\n", "void", " ", "StrAssign", "(SqString *s,", "char", " cstr[])", "\n", "{ \n    ", "int", " i;\n    ", "for", " (i=", "0", ";cstr[i]!=", "'\\0'", ";i++)\n    s->data[i]=cstr[i];\n    s->data[i]=", "'\\0'", ";\n    s->length=i;\n}\n\n", "SqString* ", "SubStr", "(SqString *s,", "int", " i,", "int", " j)", "\n", "{ \n    SqString* str;\n    ", "int", " k;\n    str->length=", "0", ";\n    ", "if", " (i<", "0", " || i>s->length || j<", "0", " || i+j", "-1", ">s->length)\n    ", "return", " str; ", "//参数不正确时返回空串", "\n    ", "for", " (k=i;k<i+j", "-1", ";k++) ", "//s->data[i..i+j]?str", "\n    str->data[k-i]=s->data[k];\n    str->length=j", "-1", ";\n    ", "return", " str;\n}\n\n", "bool", " ", "SubContains", "(SqString* s1,SqString* temp)", "\n", "{\n    ", "int", " i = ", "0", ", j = ", "0", ", flag = ", "-1", ";\n    ", "while", " (i < s1->length && j < temp->length)\n    {\n        ", "if", " (s1->data[i] == temp->data[j])\n        { \n            i++;\n            j++;\n        }\n        ", "else", "\n        {\n            i = i - j + ", "1", "; ", "//主串字符回到比较最开始比较的后一个字符", "\n            j = ", "0", ";         ", "//字串字符重新开始", "\n        }\n        ", "if", " (j == temp->length)\n        {             ", "//如果匹配成功", "\n            flag = ", "1", "; ", "//字串出现", "\n            ", "break", ";\n        }\n    }\n    ", "return", " flag;\n}\n\n", "SqString* ", "MaxSubstring", "(SqString* s1,SqString* s2)", "{  \n    SqString* max,*min; \n    max=(s1->length>s2->length)?s1:s2;  \n    min=(max==s1)?s2:s1;  \n    ", "for", "(", "int", " i=", "0", ";i<min->length;i++)  \n    {  \n        ", "for", "(", "int", " j=", "0", ",k=min->length-i;k!=min->length+", "1", ";j++,k++)  \n        {  \n            SqString* temp=", "SubStr", "(min,j,k-j", "-1", ");  \n            ", "if", "(", "SubContains", "(max,temp))  \n                ", "return", " temp;  \n        }  \n    }  \n    ", "return", " ", "0", ";  \n}  \n", "int", " ", "main", "()", "{\n    ", "char", " a1[", "100", "],a2[", "100", "];\n    SqString* s,s1,s2; \n    ", "printf", "(", "\"请输入第一个字符串：\"", "); \n    ", "gets", "(a1);\n    ", "printf", "(", "\"请输入第二个字符串：\"", "); \n    ", "gets", "(a2);\n    ", "StrAssign", "(&s1,a1);\n    ", "StrAssign", "(&s2,a2);\n    s=", "MaxSubstring", "(&s1,&s2);  \n    ", "printf", "(", "\"%s\"", ",s->data);\n    ", "return", " ", "0", ";\n}\n\n\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/triple_wdf/article/details/51023080", "Konwledge_Point": "负权边的最短路径", "Question": ["状态压缩BFS                            拯救大兵瑞恩", ["Problem Description", "\n　　　1944年，特种兵麦克接到国防部的命令，要求立即赶赴太平洋上的一个孤岛，营救被敌军俘虏的大兵瑞恩。瑞恩被关押在一个迷宫里，迷宫地形复杂，但是幸好麦克得到了迷宫的地形图。", "\n　　　迷宫的外形是一个长方形，其在南北方向被划分为N行，在东西方向被划分为M列，于是整个迷宫被划分为N*M个单元。我们用一个有序数对（单元的行号，单元的列号）来表示单元位置。南北或东西方向相邻的两个单元之间可以互通，或者存在一扇锁着的门，又或者存在一堵不可逾越的墙。迷宫中有一些单元存放着钥匙，并且所有的门被分为P类，打开同一类的门的钥匙相同，打开不同类的门的钥匙不同。", "\n　　　大兵瑞恩被关押在迷宫的东南角，即（N,M）单元里，并已经昏迷。迷宫只有一个入口，在西北角，也就是说，麦克可以直接进入(1,1)单元。另外，麦克从一个单元移动到另一个相邻单元的时间为1，拿取所在单元的钥匙的时间以及用钥匙开门的时间忽略不计。", "\n　　　你的任务是帮助麦克以最快的方式抵达瑞恩所在单元，营救大兵瑞恩。", "\n\n", "Input", "\n有多组数据对于每一组数据来说：", "\n第一行是三个整数，依次表示N,M,P的值；", "\n第二行是一个整数K，表示迷宫中门和墙的总个数；", "\n第I+2行（1<=I<=K），有5个整数，依次为Xi1,Yi1,Xi2,Yi2,Gi：", "\n当Gi>=1时，表示(Xi1,Yi1)单元与(Xi2,Yi2)单元之间有一扇第Gi类的门，当Gi=0时，表示(Xi1,Yi1)单元与(Xi2,Yi2)单元之间有一堵不可逾越的墙；", "\n（其中，|Xi1-Xi2|+|Yi1-Yi2|=1，0<=Gi<=P）", "\n第K+3行是一个整数S，表示迷宫中存放的钥匙总数；", "\n第K+3+J行(1<=J<=S)，有3个整数，依次为Xi1,Yi1,Qi：表示第J把钥匙存放在(Xi1,Yi1)单元里，并且第J把钥匙是用来开启第Qi类门的。（其中1<=Qi<=P）", "\n注意：输入数据中同一行各相邻整数之间用一个空格分隔。", "\n\n", "参数设定：", "\n3<=N,M<=15;", "\n1<=P<=10;", "\n\n", "Output", "\n对于每一组数据，输出一行，只包含一个整数T，表示麦克营救到大兵瑞恩的最短时间的值，若不存在可行的营救方案则输出-1。", "\n\n", "Sample Input", "\n4 4 9", "\n9", "\n1 2 1 3 2", "\n1 2 2 2 0", "\n2 1 2 2 0", "\n2 1 3 1 0", "\n2 3 3 3 0", "\n2 4 3 4 1", "\n3 2 3 3 0", "\n3 3 4 3 0", "\n4 3 4 4 0", "\n2", "\n2 1 2", "\n4 2 1", "\n\n", "Sample Output", "\n14"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;status InitQueue(Queue *Q)\n{\n&lt;span class=\"hljs-attribute\"&gt;Q&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;(Queue*)malloc(sizeof(Node))&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n(*Q).front&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;(*Q).rear&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\nreturn OK&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n}//队列初始化\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;完全没有必要malloc啊&amp;#xff0c;你main调用的时候&amp;#xff0c;传入的是一个Queue变量的地址&amp;#xff0c;不是一个Queue指针变量&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["队列排队求长问题，运行出来结果不对，可以看看哪里错了吗", ["这是原题：", "有3个队列A、队列B、队列C，原队列长度分别为10人、13人、16人。在5秒钟间隔内有1人到达，他以排队的规则是：哪个队列越短，他选中该队列的概率就越大；每个人离队的规律是：在6秒钟内，以概率P离队。当离队概率P=0.45时，计算500秒内队列A、队列B、队列C的长度分别是多少？", "\n", "这是我的程序代码：", "#include<stdio.h>", "#include<stdlib.h>", "#define OK 1", "#define ERROR 0", "#define OVERFLOW -2", "#define MAXQSIZE 1000", "typedef int status; ", "\n", "typedef struct Node", "{", "    int front;//头指针，指向队头元素", "    int rear;//尾指针，指向队尾元素的下一个位置", "}Queue;//队列的顺序存储结构 ", "\n", "status InitQueue(Queue ", "Q)", "{", "    Q=(Queue", ")malloc(sizeof(Node));", "    (*Q).front=(*Q).rear=0;", "    return OK;", "}//队列初始化", "\n", "int QueueLength(Queue Q)", "{", "    return (Q.rear-Q.front+MAXQSIZE)%MAXQSIZE;", "}//返回Q的长度", "\n", "status EnQueue(Queue *Q)", "{", "    if(((*Q).rear+1)%MAXQSIZE==(*Q).front)//队列满", "        return ERROR;", "    (*Q).rear=((*Q).rear+1)%MAXQSIZE;", "    return OK;", "}//入队", "\n", "status DeQueue(Queue *Q)", "{", "    if((*Q).front==(*Q).rear)", "        return ERROR;", "    (*Q).front=((*Q).front+1)%MAXQSIZE;", "    return OK;", "}//出队 ", "\n", "Queue Minimun(Queue A,Queue B,Queue C)", "{", "    int l1=QueueLength(A);", "    int l2=QueueLength(B);", "    int l3=QueueLength(C);", "    if(l1<=l2&&l1<=l3)", "        return A;", "    if(l2<=l1&&l2<=l3)", "        return B;", "    if(l3<=l2&&l3<=l1)", "        return C;", "}//返回最短队列 ", "\n", "int main()", "{", "    while(1)", "    {", "        int t;float P;", "        Queue A;", "        Queue B;", "        Queue C;", "        InitQueue(&A);", "        InitQueue(&B);", "        InitQueue(&C);", "        for(int i=1;i<=10;i++)", "            EnQueue(&A);", "        for(int i=1;i<=13;i++)", "            EnQueue(&B);", "        for(int i=1;i<=16;i++)", "            EnQueue(&C);", "        printf(\"请输入离队概率（以0到1之间的小数表示，输入0退出）：\");", "        scanf(\"%f\",&P);", "        if(P==0)", "        {", "            printf(\"结束退出......\\n\");", "            exit(-1);", "        }", "        P=P*100;", "        printf(\"请输入时长：\");", "        scanf(\"%d\",&t);", "        int c=0;", "        while(++c<=t)", "        {", "            if(c%5==0)", "            {", "                Queue Q=Minimun(A,B,C);", "                EnQueue(&Q);", "            }", "            if(c%6==0)", "            {", "                int r1=rand()%101;", "                int r2=rand()%101;", "                int r3=rand()%101;", "                if(r1<P)", "                    DeQueue(&A);", "                if(r2<P)", "                    DeQueue(&B);", "                if(r3<P)", "                    DeQueue(&C);", "            }", "        }", "        printf(\"A:%d\\nB:%d\\nC:%d\\n\\n\",QueueLength(A),QueueLength(B),QueueLength(C));", "    }", "    return 0;", "}", "\n", "结果出来是这个样子的：", "但是正确的结果应该是这样的：", "我不知道哪里出问题了..."]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;编译不了看报错信息呀&lt;br /&gt;告诉你scanf函数是unsafe的&amp;#xff0c;应该换成scanf_s&amp;#xff0c;你照做呀&lt;/p&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["在书上看的代码，编译不出来", ["/**\n   开发团队：明日科技\n   明日学院网站：www.mingrisoft.com\n   一起来测试情商\n*/", "\n", "#", "include", " ", "<stdio.h>", "\n", "void", " ", "Q1", "()", ";\n", "void", " ", "Q2", "()", ";\n", "void", " ", "Q3", "()", ";\n", "void", " ", "Q4", "()", ";\n", "void", " ", "Q5", "()", ";\n", "void", " ", "Q6", "()", ";\n", "void", " ", "Q7", "()", ";\n", "void", " ", "Q8", "()", ";\n", "void", " ", "Q9", "()", ";\n", "void", " ", "Q10", "()", ";\n", "void", " ", "gameOver", "()", ";\n", "void", " ", "Out", "()", ";\n", "void", " ", "again", "(", "int", " i, ", "int", " As, ", "int", " Bs, ", "int", " Cs, ", "int", " Ds)", ";\n", "static", "  ", "int", " q1, q2, q3, q4, q5, q6, q7, q8, q9, q10;\n", "int", " ", "main", "()", "\n", "{\n\n    ", "Out", "();\n    ", "return", " ", "0", ";\n}\n\n", "void", " ", "Out", "()", " ", "{\n    ", "printf", "(", "\"=============情商测试（共10题总分200分）=================\\n\"", ");\n    ", "printf", "(", "\"人的情商比智商重要得多，它反映了一个人认知与表达自身情感；共10题。\\n\"", ");\n    ", "printf", "(", "\"了解、体会他人情感的能力。本测试由美国著名心理学家、哈佛心理学博士Daniel Goleman（1946.3.7 - ）所设计，\\n\"", ");\n    ", "printf", "(", "\"通过对这一系列问题的回答，您可以获得一个关于自己EQ（情商）的简单印象分数。最高分为200，一般人平均分为100左右。\\n\"", ");\n    ", "Q1", "();\n}\n\n\n", "void", " ", "Q1", "()", "\n", "{\n    ", "char", " sq;\n    ", "printf", "(", "\"------------第一题------------------\\n\"", ");\n    ", "printf", "(", "\"1. 坐飞机时，突然受到很大的震动，你开始随着机身左右摇摆。这时候，您会怎样做呢?\\n\"", ");\n    ", "printf", "(", "\"   A. 继续读书或看杂志，或继续看电影，不太注意正在发生的骚乱\\n\"", ");\n    ", "printf", "(", "\"   B. 注意事态的变化，仔细听播音员的播音，并翻看紧急情况应付手，以备万一\\n\"", ");\n    ", "printf", "(", "\"   C. A和B都有一点\\n\"", ");\n    ", "printf", "(", "\"   D. 不能确定--根本没注意到\\n\"", ");\n\n    ", "printf", "(", "\"请输入你的答案(单选)：\\n\"", ");\n    ", "scanf", "(", "\"%c\"", ", &sq);\n    ", "if", " (sq == ", "'A'", ") {\n        q1 = ", "20", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'B'", ") {\n        q1 = ", "20", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'C'", ") {\n        q1 = ", "20", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'D'", ") {\n        q1 = ", "0", ";\n    }\n    ", "else", " {\n        ", "again", "(", "1", ", ", "20", ", ", "20", ", ", "20", ", ", "0", ");\n        ", "return", " ", "0", ";\n    }\n    ", "Q2", "();\n}\n", "//    　　2. B是最好的选择", "\n", "//    　　情商高的父母善于利用孩子情绪状态不好的时机对孩子进行情绪教育，帮助孩子明白是什么使他们感到不安，他们正在感受的情绪状态是怎样的，以及他们能进行的选择", "\n", "//    　　A=0，B=20，C=0，D=0", "\n", "void", " ", "Q2", "()", "\n", "{\n    ", "char", " sq;\n    ", "printf", "(", "\"------------第二题------------------\\n\"", ");\n    ", "printf", "(", "\"2. 带一群4岁的孩子去公园玩，其中一个孩子由于别人都不和他玩而大哭起来。这个时候，您该怎么办呢?\\n\"", ");\n    ", "printf", "(", "\"   A. 置身事外--让孩子们自己处理\\n\"", ");\n    ", "printf", "(", "\"   B. 和这个孩子交谈，并帮助她想办法\\n\"", ");\n    ", "printf", "(", "\"   C. 轻轻地告诉她不要哭\\n\"", ");\n    ", "printf", "(", "\"   D. 想办法转移这个孩子的注意力，给她一些其他的东西让她玩\\n\"", ");\n    ", "printf", "(", "\"请输入你的答案(单选)：\\n\"", ");\n    ", "scanf", "(", "\"%c\"", ", &sq);\n    ", "if", " (sq == ", "'A'", ") {\n        q2 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'B'", ") {\n        q2 = ", "20", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'C'", ") {\n        q2 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'D'", ") {\n        q2 = ", "0", ";\n    }\n    ", "else", " {\n        ", "again", "(", "2", ", ", "0", ", ", "20", ", ", "0", ", ", "0", ");\n        ", "return", " ", "0", ";\n    }\n    ", "Q3", "();\n}\n", "//    　　3. A自我激励的一个标志是能制定一个克服障碍和挫折的计划，并严格执行它", "\n", "//    　　A=20，B=0，C=20，D=0", "\n", "void", " ", "Q3", "()", " ", "{\n\n    ", "char", " sq;\n    ", "printf", "(", "\"------------第三题------------------\\n\"", ");\n    ", "printf", "(", "\"3. 假设您是一个大学生，想在某门课程上得优秀，但是在其中考试时却只得了及格。这时候，您该怎么办呢?\\n\"", ");\n    ", "printf", "(", "\"   A. 制定一个详细的学习，并决心按计划进行\\n\"", ");\n    ", "printf", "(", "\"   B. 决心以后好好学\\n\"", ");\n    ", "printf", "(", "\"   C. 告诉自己在这门课上考不好没什么大不了的，把精力集中在其他可能考得好的课程上\\n\"", ");\n    ", "printf", "(", "\"   D. 去拜访任课教授，试图让他给您高一点的分数\\n\"", ");\n    ", "printf", "(", "\"请输入你的答案(单选)：\\n\"", ");\n    ", "scanf", "(", "\"%c\"", ", &sq);\n    ", "if", " (sq == ", "'A'", ") {\n        q3 = ", "20", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'B'", ") {\n        q3 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'C'", ") {\n        q3 = ", "20", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'D'", ") {\n        q3 = ", "0", ";\n    }\n    ", "else", " {\n        ", "again", "(", "3", ", ", "20", ", ", "0", ", ", "20", ", ", "0", ");\n        ", "return", " ", "0", ";\n    }\n    ", "Q4", "();\n}\n", "//    　　4. C为最佳答案", "\n", "//    　　情商高的一个标志是面对挫折时，能把它看成一种可以从中学到东西的挑战，坚持下去，尝试新的方法，而不是放弃努力，怨天尤人，变得萎靡不振", "\n", "//    　　A=0，B=0，C=20，D=0", "\n", "void", " ", "Q4", "()", " ", "{\n\n    ", "char", " sq;\n    ", "printf", "(", "\"------------第四题------------------\\n\"", ");\n    ", "printf", "(", "\"4. 假设您是一个保险推销员，去访问一些有希望成为您的顾客的人。可是一连十五个人都只是对您敷衍，并不明确表态，您变得很失望。这时候，您会怎么做呢?\\n\"", ");\n    ", "printf", "(", "\"   A. 认为这只不过是一天的遭遇而已，希望明天会有好运气\\n\"", ");\n    ", "printf", "(", "\"   B. 考虑一下自己是否适合做推销员\\n\"", ");\n    ", "printf", "(", "\"   C. 在下一次拜访时再做努力，保持勤勤恳恳工作的状态\\n\"", ");\n    ", "printf", "(", "\"   D. 考虑去争取其他的顾客\"", ");\n    ", "printf", "(", "\"请输入你的答案(单选)：\\n\"", ");\n    ", "scanf", "(", "\"%c\"", ", &sq);\n    ", "if", " (sq == ", "'A'", ") {\n        q4 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'B'", ") {\n        q4 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'C'", ") {\n        q4 = ", "20", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'D'", ") {\n        q4 = ", "0", ";\n    }\n    ", "else", " {\n        ", "again", "(", "4", ", ", "0", ", ", "0", ", ", "20", ", ", "0", ");\n        ", "return", " ", "0", ";\n    }\n    ", "Q5", "();\n}\n\n", "//    　　5. C形成一种欢迎多样化的气氛的最有效的方法是公开挑明这一点", "\n", "//    　　当有人违反时，明确告诉他您的组织的规范不容许这种情况发生。不是力图改变这种偏见(这是一个更困难的任务)，而只是让人们遵照规范去行事", "\n", "//    　　A=0，B=0，C=20，D=0", "\n", "void", " ", "Q5", "()", " ", "{\n    ", "char", " sq;\n    ", "printf", "(", "\"------------第五题------------------\\n\"", ");\n    ", "printf", "(", "\"5. 您是一个经理，提倡在公司中不要搞种族歧视。一天您偶然听到有人正在开有关种族歧视的玩笑。您会怎么办呢?\\n\"", ");\n    ", "printf", "(", "\"   A. 不理它--这只是一个玩笑而已\\n\"", ");\n    ", "printf", "(", "\"   B. 把那人叫到办公室去，严厉斥责他一顿\\n\"", ");\n    ", "printf", "(", "\"   C. 当场大声告诉他，这种玩笑是不恰当的，在您这里是不能容忍的\\n\"", ");\n    ", "printf", "(", "\"   D. 建议开玩笑的人去参加一个有关反对种族歧视的培训班\\n\"", ");\n    ", "printf", "(", "\"请输入你的答案(单选)：\\n\"", ");\n    ", "scanf", "(", "\"%c\"", ", &sq);\n    ", "if", " (sq == ", "'A'", ") {\n        q5 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'B'", ") {\n        q5 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'C'", ") {\n        q5 = ", "20", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'D'", ") {\n        q5 = ", "0", ";\n    }\n    ", "else", " {\n        ", "again", "(", "5", ", ", "0", ", ", "0", ", ", "20", ", ", "0", ");\n        ", "return", " ", "0", ";\n    }\n    ", "Q6", "();\n}\n", "//    　　6.D有资料表明，当一个人处于愤怒状态时，使他平静下来的最有效的办法是转移他愤怒的焦点，理解并认可他的感受，用一种不激怒他的方式让他看清现状，并给他以希望", "\n", "//    　　A=0，B=5，C=5，D=20", "\n", "void", " ", "Q6", "()", " ", "{\n    ", "char", " sq;\n    ", "printf", "(", "\"------------第六题------------------\\n\"", ");\n    ", "printf", "(", "\"6. 您的朋友开车时别人的车突然危险地抢到你们前面，您的朋友勃然大怒，而您试图让他平静下来。您会怎么做呢?\\n\"", ");\n    ", "printf", "(", "\"   A. 告诉他忘掉它吧--现在没事了，这不是什么大不了的事\\n\"", ");\n    ", "printf", "(", "\"   B. 放一盘他喜欢听的磁带，转移他的注意力\\n\"", ");\n    ", "printf", "(", "\"   C. 一起责骂那个司机，表示自己站在他那一边\\n\"", ");\n    ", "printf", "(", "\"   D. 告诉他您也曾有同样的经历，当时您也一样气得发疯，可是后来您看到那个司机出了车祸，被送到医院急救室\\n\"", ");\n    ", "printf", "(", "\"请输入你的答案(单选)：\\n\"", ");\n    ", "scanf", "(", "\"%c\"", ", &sq);\n    ", "if", " (sq == ", "'A'", ") {\n        q6 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'B'", ") {\n        q6 = ", "5", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'C'", ") {\n        q6 = ", "5", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'D'", ") {\n        q6 = ", "20", ";\n    }\n    ", "else", " {\n        ", "again", "(", "6", ", ", "0", ", ", "5", ", ", "5", ", ", "20", ");\n        ", "return", " ", "0", ";\n    }\n    ", "Q7", "();\n}\n", "//    　　7.A中断20分钟或更长的时间", "\n", "//    　　这是使愤怒引起的生理状态平息下来的最短时间。否则，种状态会歪曲您的理解力，使您更可能出口伤人。平静了情绪后，你们的讨论才会更富有成效", "\n", "//    　　A=20，B=0，C=0，D=0", "\n", "void", " ", "Q7", "()", " ", "{\n    ", "char", " sq;\n    ", "printf", "(", "\"------------第七题------------------\\n\"", ");\n    ", "printf", "(", "\"7. 您和伴侣发生了争论，两人激烈地争吵;盛怒之下，互相进行人身攻击，虽然你们并不是真的想这样做。这时候，最好怎么办呢?\\n\"", ");\n    ", "printf", "(", "\"   A. 停止20分钟，然后继续争论\\n\"", ");\n    ", "printf", "(", "\"   B. 停止争吵……保持沉默，不管对方说什么\\n\"", ");\n    ", "printf", "(", "\"   C. 向对方说抱歉，并要求他(她)也向您道歉\\n\"", ");\n    ", "printf", "(", "\"   D. 先停一会儿，整理一下自己的想法，然后尽可能清楚地阐明自己的立场\\n\"", ");\n    ", "printf", "(", "\"请输入你的答案(单选)：\\n\"", ");\n    ", "scanf", "(", "\"%c\"", ", &sq);\n    ", "if", " (sq == ", "'A'", ") {\n        q7 = ", "20", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'B'", ") {\n        q7 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'C'", ") {\n        q7 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'D'", ") {\n        q7 = ", "0", ";\n    }\n    ", "else", " {\n        ", "again", "(", "7", ", ", "20", ", ", "0", ", ", "0", ", ", "0", ");\n        ", "return", " ", "0", ";\n    }\n    ", "Q8", "();\n}\n", "//    　　8.B当一个组织的成员之间关系融洽、亲善，每一个人都感到心情舒畅时，组织的工作效率才会最高。在这种情况下，人们才能自由地做出他们最大的贡献", "\n", "//    　　A=0，B=20，C=0，D=0", "\n", "void", " ", "Q8", "()", " ", "{\n\n    ", "char", " sq;\n    ", "printf", "(", "\"------------第八题------------------\\n\"", ");\n    ", "printf", "(", "\"8. 您被分到一个单位当领导，想提出一些解决工作中烦难问题的好方法。这时候，您第一件要做的是什么呢?\\n\"", ");\n    ", "printf", "(", "\"   A. 起草一个议事日程，以便充分利用和大家在一起讨论的时间。\\n\"", ");\n    ", "printf", "(", "\"   B. 给人们一定的时间相互了解\\n\"", ");\n    ", "printf", "(", "\"   C. 让每一个人说出如何解决问题的想法\\n\"", ");\n    ", "printf", "(", "\"   D. 采用一种创造性地发表意见的形式，鼓励每一个人说出此时进入他脑子里的任何想法，而不管该想法有多疯狂\\n\"", ");\n    ", "printf", "(", "\"请输入你的答案(单选)：\\n\"", ");\n    ", "scanf", "(", "\"%c\"", ", &sq);\n    ", "if", " (sq == ", "'A'", ") {\n        q8 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'B'", ") {\n        q8 = ", "20", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'C'", ") {\n        q8 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'D'", ") {\n        q8 = ", "0", ";\n    }\n    ", "else", " {\n        ", "again", "(", "8", ", ", "0", ", ", "20", ", ", "0", ", ", "0", ");\n        ", "return", " ", "0", ";\n    }\n    ", "Q9", "();\n}\n", "//    　　9.D生来带有害羞气质的孩子，如果他们父母能安排一系列渐进的针对他们害羞的挑战，并且这种挑战是能逐个应付得了的，那么他们通常会变得喜欢外出起来", "\n", "//    　　A=0，B=5，C=0，D=20", "\n", "void", " ", "Q9", "()", " ", "{\n    ", "char", " sq;\n    ", "printf", "(", "\"------------第九题------------------\\n\"", ");\n    ", "printf", "(", "\"9. 您3岁的儿子非常胆小，实际上，从他出生起就对陌生地方和陌生人有些神经过敏或者说有些恐惧。您该怎么办呢?\\n\"", ");\n    ", "printf", "(", "\"   A. 接受他具有害羞气质的事实，想办法让他避开他感到不安的环境\\n\"", ");\n    ", "printf", "(", "\"   B. 带他去看儿童精神科医生，寻求帮助\\n\"", ");\n    ", "printf", "(", "\"   C. 有目的地让他一下子接触许多人，带他到各种陌生的地方，克服他的恐惧心理\\n\"", ");\n    ", "printf", "(", "\"   D. 设计渐进的系列挑战性计划，每一个相对来说都是容易对付的，从而让他渐渐懂得他能够应付陌生的人和陌生的地方\\n\"", ");\n    ", "printf", "(", "\"请输入你的答案(单选)：\\n\"", ");\n    ", "scanf", "(", "\"%c\"", ", &sq);\n    ", "if", " (sq == ", "'A'", ") {\n        q9 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'B'", ") {\n        q9 = ", "5", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'C'", ") {\n        q9 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'D'", ") {\n        q9 = ", "20", ";\n    }\n    ", "else", " {\n        ", "again", "(", "9", ", ", "0", ", ", "5", ", ", "0", ", ", "20", ");\n        ", "return", " ", "0", ";\n    }\n    ", "Q10", "();\n}\n", "//    　　10.B给自己适度的挑战，最有可能激发自己最大的热情", "\n", "//", "\n", "//    　　这既能使您学得愉快，又能使您完成得最好", "\n", "//", "\n", "//    　　A=0，B=20，C=0，D=0", "\n", "void", " ", "Q10", "()", " ", "{\n\n    ", "char", " sq;\n    ", "printf", "(", "\"------------第十题------------------\\n\"", ");\n    ", "printf", "(", "\"10. 多年以来，您一起想重学一种您在儿时学过的乐器，而现在只是为了娱乐，您又开始学了。您想最有效的利用时间。您该怎么做呢?\\n\"", ");\n    ", "printf", "(", "\"    A. 每天坚持严格的练习\\n\"", ");\n    ", "printf", "(", "\"    B. 选择能稍微扩展能力的有针对性的曲子去练习\\n\"", ");\n    ", "printf", "(", "\"    C. 只有当自己有情绪的时候才去练习\\n\"", ");\n    ", "printf", "(", "\"    D. 选择远远超出您的能力但通过勤奋的努力能掌握的乐曲去练习\\n\"", ");\n    ", "printf", "(", "\"请输入你的答案(单选)：\\n\"", ");\n    ", "scanf", "(", "\"%c\"", ", &sq);\n    ", "if", " (sq == ", "'A'", ") {\n        q10 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'B'", ") {\n        q10 = ", "20", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'C'", ") {\n        q10 = ", "0", ";\n    }\n    ", "else", " ", "if", " (sq == ", "'D'", ") {\n        q10 = ", "0", ";\n    }\n    ", "else", " {\n        ", "again", "(", "10", ", ", "0", ", ", "20", ", ", "0", ", ", "0", ");\n        ", "return", " ", "0", ";\n    }\n    ", "gameOver", "();\n}\n", "void", " ", "gameOver", "()", " ", "{\n    ", "int", " z = q1 + q2 + q3 + q4 + q5 + q6 + q7 + q8 + q9 + q10;\n    ", "printf", "(", "\"------------答题结束------------------\\n\"", ");\n    ", "printf", "(", "\"测试结果：获得分数共计：%d分\\n\"", ", z);\n    ", "if", " (z >= ", "0", " && z < ", "50", ") {\n        ", "printf", "(", "\"低情商\\n\"", ");\n        ", "printf", "(", "\"尊重所有人的人权和人格尊严。\\n不将自己的价值观强加于他人。\\n对自己有清醒的认识，能承受压力。\\n自信而不自满。\\n人际关系良好，和朋友或同事能友好相处。\\n善于处理生活中遇到的各方面的问题。\\n 认真对待每一件事情。\\n\"", ");\n    }\n    ", "else", " ", "if", " (z >= ", "50", " && z < ", "100", ") {\n        ", "printf", "(", "\"较低情商\\n\"", ");\n        ", "printf", "(", "\"是负责任的“好”公民。\\n自尊。\\n有独立人格，但在一些情况下易受别人焦虑情绪的感染。\\n比较自信而不自满。\\n较好的人际关系。\\n能应对大多数的问题，不会有太大的心理压力。\\n\"", ");\n    }\n    ", "else", " ", "if", " (z >= ", "100", " && z < ", "150", ") {\n        ", "printf", "(", "\"较高情商\\n\"", ");\n        ", "printf", "(", "\"易受他人影响，自己的目标不明确。\\n比低情商者善于原谅，能控制大脑。\\n能应付较轻的焦虑情绪。\\n把自尊建立在他人认同的基础上。\\n缺乏坚定的自我意识。\\n 人际关系较差。\\n\"", ");\n    }\n    ", "else", " ", "if", " (z >= ", "150", " && z < ", "200", ") {\n        ", "printf", "(", "\"高情商\\n\"", ");\n        ", "printf", "(", "\"自我意识差。\\n无确定的目标，也不打算付诸实践。\\n严重依赖他人。\\n处理人际关系能力差。\\n 应对焦虑能力差。\\n 生活无序。\\n无责任感，爱抱怨。\\n\"", ");\n    }\n}\n", "void", " ", "again", "(", "int", " i, ", "int", " As, ", "int", " Bs, ", "int", " Cs, ", "int", " Ds)", " ", "{\n    ", "char", " sq;\n    ", "int", " y = ", "0", ";\n    ", "//printf(\"输入错误，请再次输入你的答案(单选)：\\n\");", "\n    ", "scanf", "(", "\"%c\"", ", &sq);\n    ", "if", " (sq == ", "'A'", ") {\n        y = As;\n    }\n    ", "else", " ", "if", " (sq == ", "'B'", ") {\n        y = Bs;\n    }\n    ", "else", " ", "if", " (sq == ", "'C'", ") {\n        y = Cs;\n    }\n    ", "else", " ", "if", " (sq == ", "'D'", ") {\n        y = Ds;\n    }\n    ", "else", " {\n        ", "again", "(i, As, Bs, Cs, Ds);\n\n    }\n    ", "if", " (i == ", "1", ") {\n        q1 = y;\n        ", "Q2", "();\n    }\n    ", "else", " ", "if", " (i == ", "2", ") {\n        q2 = y;\n        ", "Q3", "();\n    }\n    ", "else", " ", "if", " (i == ", "3", ") {\n        q3 = y;\n        ", "Q4", "();\n    }\n    ", "else", " ", "if", " (i == ", "4", ") {\n        q4 = y;\n        ", "Q5", "();\n    }\n    ", "else", " ", "if", " (i == ", "5", ") {\n        q5 = y;\n        ", "Q6", "();\n    }\n    ", "else", " ", "if", " (i == ", "6", ") {\n        q6 = y;\n        ", "Q7", "();\n    }\n    ", "else", " ", "if", " (i == ", "7", ") {\n        q7 = y;\n        ", "Q8", "();\n    }\n    ", "else", " ", "if", " (i == ", "8", ") {\n        q8 = y;\n        ", "Q9", "();\n    }\n    ", "else", " ", "if", " (i == ", "9", ") {\n        q9 = y;\n        ", "Q10", "();\n    }\n    ", "else", " ", "if", " (i == ", "10", ") {\n        q10 = y;\n        ", "gameOver", "();\n    }\n\n}\n\n\n\n\n\n", "\n", "\n", "在书上看的代码，编译不出来"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;格式你自己调整一下&amp;#xff1a;另外这些命令都是非常简单的&amp;#xff0c;建议研究下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;、mkdir &lt;span class=\"hljs-regexp\"&gt;/tmp/&lt;/span&gt;test; chmod &lt;span class=\"hljs-number\"&gt;664&lt;/span&gt; &lt;span class=\"hljs-regexp\"&gt;/tmp/&lt;/span&gt;test\n&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;、cd /home; pwd\n&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;、mkdir &lt;span class=\"hljs-regexp\"&gt;/worker; mkdir /&lt;/span&gt;worker&lt;span class=\"hljs-regexp\"&gt;/hosts01; mkdir /&lt;/span&gt;worker&lt;span class=\"hljs-regexp\"&gt;/hosts02; mkdir /&lt;/span&gt;worker&lt;span class=\"hljs-regexp\"&gt;/hosts01/&lt;/span&gt;h01; mkdir &lt;span class=\"hljs-regexp\"&gt;/worker/&lt;/span&gt;hosts01/h02\n&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;、rm -rf &lt;span class=\"hljs-regexp\"&gt;/worker/&lt;/span&gt;hosts01&lt;span class=\"hljs-regexp\"&gt;/h01; rmdir /&lt;/span&gt;worker/hosts01\n&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;、touch &lt;span class=\"hljs-regexp\"&gt;/worker/&lt;/span&gt;hosts02/test.txt; passwd\n&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;、useradd -s &lt;span class=\"hljs-regexp\"&gt;/bin/&lt;/span&gt;bash -m &lt;span class=\"hljs-number\"&gt;200880101&lt;/span&gt;-user01; useradd -s &lt;span class=\"hljs-regexp\"&gt;/bin/&lt;/span&gt;bash -m &lt;span class=\"hljs-number\"&gt;200880101&lt;/span&gt;-user02; useradd -s &lt;span class=\"hljs-regexp\"&gt;/bin/&lt;/span&gt;bash -m &lt;span class=\"hljs-number\"&gt;200880101&lt;/span&gt;-user03; echo &lt;span class=\"hljs-number\"&gt;123456&lt;/span&gt; | passwd --stdin &lt;span class=\"hljs-number\"&gt;200880101&lt;/span&gt;-user01; echo &lt;span class=\"hljs-number\"&gt;123456&lt;/span&gt; | passwd --stdin &lt;span class=\"hljs-number\"&gt;200880101&lt;/span&gt;-user02; echo &lt;span class=\"hljs-number\"&gt;123456&lt;/span&gt; | passwd --stdin &lt;span class=\"hljs-number\"&gt;200880101&lt;/span&gt;-user03; cut -d: -f1-&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-regexp\"&gt;/etc/&lt;/span&gt;passwd | tail -&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;\n&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;、chage -M &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; -m &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt; -W &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;200880101&lt;/span&gt;-user01; chage -l &lt;span class=\"hljs-number\"&gt;200880101&lt;/span&gt;-user01\n&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;、echo $(id -u &lt;span class=\"hljs-number\"&gt;200880101&lt;/span&gt;-user02); usermod -u &lt;span class=\"hljs-number\"&gt;3000&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;200880101&lt;/span&gt;-user02; id -u &lt;span class=\"hljs-number\"&gt;200880101&lt;/span&gt;-user02\n&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;、userdel -r &lt;span class=\"hljs-number\"&gt;200880101&lt;/span&gt;-user03; cut -d: -f1-&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-regexp\"&gt;/etc/&lt;/span&gt;passwd\n&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;、groupadd workgroup-&lt;span class=\"hljs-number\"&gt;01&lt;/span&gt;; groupadd workgroup-&lt;span class=\"hljs-number\"&gt;02&lt;/span&gt;; groupadd workgroup-&lt;span class=\"hljs-number\"&gt;03&lt;/span&gt;; cat &lt;span class=\"hljs-regexp\"&gt;/etc/g&lt;/span&gt;roup\n&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;、groupmod -n test-&lt;span class=\"hljs-keyword\"&gt;group&lt;/span&gt; -g &lt;span class=\"hljs-number\"&gt;4000&lt;/span&gt; workgroup-&lt;span class=\"hljs-number\"&gt;02&lt;/span&gt;; cat &lt;span class=\"hljs-regexp\"&gt;/etc/g&lt;/span&gt;roup\n&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;、groupdel workgroup-&lt;span class=\"hljs-number\"&gt;03&lt;/span&gt;; cat &lt;span class=\"hljs-regexp\"&gt;/etc/g&lt;/span&gt;roup\n&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;、usermod -aG workgroup-&lt;span class=\"hljs-number\"&gt;01&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;200880101&lt;/span&gt;-user01; cat &lt;span class=\"hljs-regexp\"&gt;/etc/g&lt;/span&gt;roup\n&lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;、touch test01.txt; chown user02:user02 test01.txt; ls -l test01.txt\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "负权边的最短路径", "Question": ["Linux 虚拟机命令解答", ["1、在／ tmp 下新建目录 test ．并指定权限664 2、进入／ home 目录，使用 pwd 显示当前目录", "3、在／下新建目录 worker ，在 worker 下成立新建目录host01,hosts02,在hosts01下新建h01,h02文件。", "4、删除hosts01下的h01目录，若host01目录为空，则删除host01", "5、在hosts02下新建文件 test . txt ，更改 root 用户密码", "6、以自己的学号为前缀创建三个用户，如200880101-user01、200880101-user02、200880101-user03，密码均为123456，用户账户永不过期，使用命令查看新建用户信息（查看后5行内容）。", "7、修改用户user01属性值，最短口令存活期为7天，最长口令存活期为60天，口令到期前2天提醒用户修改口令，设置完成后查看各属性值。", "8、查看用户user02的 UID ，并修改用户user02的 UID 值为3000，修改完成后查看用户user02的 UID 。", "9、删除用户user03，同时删除主目录以及目录中的所有文件，查看当前用户信息以及用户目录情况。", "10、创建组群 workgroup -01、 workgroup -02、 workgroup -03，并查看组群文件信息内容。", "11、更改组群 workgroup -02的名称为 test - group ，并且修改组 ID 为4000．查看修改信息结果。", "12、删除组群 workgroup -03，并查看组群文件信息内容。", "13、将用户user01添加到组群 workgroup -01中，并查看组群文件信息内容。", "14、创建文件test01.txt，修改文件的所有者属主为user02，属组为user02，并查看文件test01.txt属性信息。"]], "Tag": "算法设计"}
