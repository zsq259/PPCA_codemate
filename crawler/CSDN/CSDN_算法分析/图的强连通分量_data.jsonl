{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Graph&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;__init__&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, num_vertices&lt;/span&gt;):\n        self.num_vertices &amp;#61; num_vertices\n        self.adj_list &amp;#61; [[] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; _ &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_vertices)]\n        \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;add_edge&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, u, v&lt;/span&gt;):\n        self.adj_list[u].append(v)\n        self.adj_list[v].append(u)\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;bfs&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;graph, start, component_num, component&lt;/span&gt;):\n    queue &amp;#61; [start]\n    component[start] &amp;#61; component_num\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; queue:\n        vertex &amp;#61; queue.pop(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; neighbor &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; graph.adj_list[vertex]:\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; component[neighbor] &lt;span class=\"hljs-keyword\"&gt;is&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;None&lt;/span&gt;:\n                queue.append(neighbor)\n                component[neighbor] &amp;#61; component_num\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;get_connected_components&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;graph&lt;/span&gt;):\n    component_num &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    component &amp;#61; [&lt;span class=\"hljs-literal\"&gt;None&lt;/span&gt;] * graph.num_vertices\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; vertex &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(graph.num_vertices):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; component[vertex] &lt;span class=\"hljs-keyword\"&gt;is&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;None&lt;/span&gt;:\n            bfs(graph, vertex, component_num, component)\n            component_num &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; component\n\n&lt;span class=\"hljs-comment\"&gt;# 创建图&lt;/span&gt;\ng &amp;#61; Graph(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\ng.add_edge(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\ng.add_edge(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\ng.add_edge(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\ng.add_edge(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n\n&lt;span class=\"hljs-comment\"&gt;# 获取连通分量&lt;/span&gt;\ncomponents &amp;#61; get_connected_components(g)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(components)  &lt;span class=\"hljs-comment\"&gt;# 输出&amp;#xff1a;[0, 0, 0, 1, 2]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "图的强连通分量", "Question": ["利用广度优先搜索编程实现确定无向图的连通分量。", ["Python数据结构，利用广度优先搜索编程实现确定无向图的连通分量。"]], "Tag": "算法设计"}
{"Answer": "http://www.cppblog.com/Ylemzy/archive/2011/04/02/143310.html", "Konwledge_Point": "图的强连通分量", "Question": ["强连通分量                ", ["Description", "\n\n", "Once upon a time there lived a king and he had N sons. And there were N beautiful girls in the kingdom and the king knew about each of his sons which of those girls he did like. The sons of the king were young and light-headed, so it was possible for one son to like several girls. ", "\n\n", "So the king asked his wizard to find for each of his sons the girl he liked, so that he could marry her. And the king's wizard did it -- for each son the girl that he could marry was chosen, so that he liked this girl and, of course, each beautiful girl had to marry only one of the king's sons. ", "\n\n", "However, the king looked at the list and said: \"I like the list you have made, but I am not completely satisfied. For each son I would like to know all the girls that he can marry. Of course, after he marries any of those girls, for each other son you must still be able to choose the girl he likes to marry.\" ", "\n\n", "The problem the king wanted the wizard to solve had become too hard for him. You must save wizard's head by solving this problem.", "\nInput", "\n\n", "The first line of the input contains N -- the number of king's sons (1 <= N <= 2000). Next N lines for each of king's sons contain the list of the girls he likes: first Ki -- the number of those girls, and then Ki different integer numbers, ranging from 1 to N denoting the girls. The sum of all Ki does not exceed 200000. ", "\n\n", "The last line of the case contains the original list the wizard had made -- N different integer numbers: for each son the number of the girl he would marry in compliance with this list. It is guaranteed that the list is correct, that is, each son likes the girl he must marry according to this list. ", "\nOutput", "\n\n", "Output N lines.For each king's son first print Li -- the number of different girls he likes and can marry so that after his marriage it is possible to marry each of the other king's sons. After that print Li different integer numbers denoting those girls, in ascending order.", "\nSample Input", "\n\n", "4", "\n2 1 2", "\n2 1 2", "\n2 2 3", "\n2 3 4", "\n1 2 3 4", "\nSample Output", "\n\n", "2 1 2", "\n2 1 2", "\n1 3", "\n1 4"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;强连通分量是指在有向图中&amp;#xff0c;任意两点之间都存在一条从一个点到另一个点的有向路径&amp;#xff0c;并且从另一个点也能到达第一个点的点集。&lt;br /&gt;所以有3个&amp;#xff0c;最左边一个&amp;#xff0c;中间4个&amp;#xff0c;右边1个&lt;br /&gt;一个顶点自然是一个连通分量。因为它不需要任何路径&amp;#xff0c;它肯定能到达自身。&lt;/p&gt;", "Konwledge_Point": "图的强连通分量", "Question": ["数据结构中有向图的强连通分量", ["右图中的强连通分量的个数为（    ）个。", "\n", "这里左右两个顶点怎么是强连通分量了"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/keyboardmagician/article/details/53005003", "Konwledge_Point": "图的强连通分量", "Question": ["求强连通分量入门题hdu1269迷宫城堡wa掉了大神帮忙看看", ["迷宫城堡", "\n\n", "Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)", "\nTotal Submission(s): 17155    Accepted Submission(s): 7507", "\n\n", "Problem Description", "\n为了训练小希的方向感，Gardon建立了一座大城堡，里面有N个房间(N<=10000)和M条通道(M<=100000)，每个通道都是单向的，就是说若称某通道连通了A房间和B房间，只说明可以通过这个通道由A房间到达B房间，但并不说明通过它可以由B房间到达A房间。Gardon需要请你写个程序确认一下是否任意两个房间都是相互连通的，即：对于任意的i和j，至少存在一条路径可以从房间i到房间j，也存在一条路径可以从房间j到房间i。", "\n\n", "Input", "\n输入包含多组数据，输入的第一行有两个数：N和M，接下来的M行每行有两个数a和b，表示了一条通道可以从A房间来到B房间。文件最后以两个0结束。", "\n\n", "Output", "\n对于输入的每组数据，如果任意两个房间都是相互连接的，输出\"Yes\"，否则输出\"No\"。", "\n\n", "Sample Input", "\n3 3", "\n1 2", "\n2 3", "\n3 1", "\n3 3", "\n1 2", "\n2 3", "\n3 2", "\n0 0", "\n\n", "Sample Output", "\nYes", "\nNo", "\n\n", "下面是我写了 注释是我自己理解的不知道对不对 求指点！", "\nimport java.util.ArrayList;", "\nimport java.util.Scanner;", "\nimport java.util.Stack;", "\n\n", "public class Main {", "\n\n", "private static int n;\nprivate static int m;\nprivate static int[] dfn;\nprivate static int[] low;\nprivate static int time;\nprivate static Stack<Integer> stack;\nprivate static int sum;\nprivate static ArrayList[] list;\n\npublic static void main(String[] args) {\n    // TODO 自动生成的方法存根\n    Scanner scanner = new Scanner(System.in);\n    while (scanner.hasNext()) {\n        scn(scanner);//输入\n        bud();       //算法\n        out();       //输出\n    }\n}\n\nprivate static void out() {\n    // TODO 自动生成的方法存根\n    if (sum==1) {\n        System.out.println(\"Yes\");\n    }else {\n        System.out.println(\"No\");\n    }\n}\n\nprivate static void bud() {\n        dfn = new int [n+1];//次序数组\n        low = new int [n+1];//记录此点所能到达最早栈中的值\n        time = 0;//时间戳\n        sum = 0;//记录此图有几个强连通分量\n        stack = new Stack<Integer>();\n        //强连通分量一定是个环   此栈相当于这个环中的任意一条弧\n        Targan_bfs(1);\n}\n\nprivate static void Targan_bfs(int i) {\n        dfn[i] = low[i]    = ++time;//low先初始跟次序相同\n        stack.push(i);//将点i压入栈\n        //之后进行bfs搜索 枚举每一种成环的可能\n        for (int j = 0; j <list[i].size() ; j++) {\n            int k= (int) list[i].get(j);\n            if(dfn[k]==0){\n                Targan_bfs(k);\n                low[i] = Math.min(low[i], low[k]);\n                //如果进行了递归存在下一个连通点并且这点不在栈里\n                //那么根据low的定义 low = min{low[i],low[k]}\n            }else {\n                low[i] = Math.min(low[i], dfn[k]);\n                //不进行递归那么表示下一个连通点在栈中\n                //根据low的的定义 low = min{low[i],dnf[k]}\n                }\n        }\n        if (low[i]==dfn[i]) {\n            //当low[i]=dfn[i]表示他自身构成了环 所以他是一个独立的连通分量\n            sum ++;int k = 0;\n            //为什么循环出栈呢\n            //如果所有的点都相互连通那么在最后搜到的点low【最后】=low【首先】\n            //同理 每当你找到一个强连通分量那么请都弹出去\n            do {\n               k = stack.pop();\n            } while (low[k]!=dfn[k]&&!stack.isEmpty());\n        }\n\n}\n\nprivate static void scn(Scanner scanner) {\n    n = scanner.nextInt();\n    m = scanner.nextInt();\n    if(n==0&&m==0){java.lang.System.exit(0);}\n    list = new ArrayList[n+1];\n    for(int i=0;i<=n;i++){list[i]=new ArrayList<Integer>();}\n    for (int i = 0; i <m; i++) {\n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n        list[a].add(b);\n    }        \n}\n", "\n\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;联通分量分为强连通和弱连通&amp;#xff0c;如果是弱连通&amp;#xff0c;这里就不需要分了。&lt;/p&gt;", "Konwledge_Point": "图的强连通分量", "Question": ["数据结构中的连通分量问题", ["\n", "按照有向图看， 这6 个顶点 是一个 连通分量吗？是不是 要把 5 和 4 去掉， 0 1 2 3 是一个分量，5 、4 分别是另外两个分量"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;输入图的格式是什么&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "图的强连通分量", "Question": ["用C++实现以下功能", ["(1)输入一个无向图，打印出它的所有连通分量。如", "下示例，", "连通分量有2个，分别为{1,2,4,5}, {3,6}", "(2)输入一个有向图，打印出它的所有强连通分量。", "如下示例，", "强连通分量有3个，分别为{1}, {4}, {2,5,3,6}", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;只需要调用遍历过程一次&lt;br /&gt;必须调用&amp;#xff08;&amp;#xff09;次深度优先搜索遍历的算法&lt;br /&gt;注意这是在考语文&lt;br /&gt;-&amp;#61;-&amp;#61;-&amp;#61;-&amp;#61;-&lt;br /&gt;你知道搜索算法是个递归吧&lt;br /&gt;问你这个函数一共递归多少次&lt;br /&gt;不是问你主函数调用这个函数几次&lt;/p&gt;", "Konwledge_Point": "图的强连通分量", "Question": ["要按照深度优先搜索的方法访问所有顶点，则必须调用（）次深度优先搜索遍历的算法。", ["若一个图中包含有k个连通分量，若要按照深度优先搜索的方法访问所有顶点，则必须调用（）次深度优先搜索遍历的算法。", "A. kB. 1C. k-1D. k+1", "这个怎么是k次，不是连通图的话只需要调用遍历过程一次，就可以遍历图中所有的顶点了吗"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于Monster 组和GPT的调写&amp;#xff1a;&lt;br /&gt;改了改&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;int visit[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n\nint c(LGraph Graph)\n{\n    visit[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    P&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;tr&lt;/span&gt; t&amp;#61;Graph-&amp;gt;&lt;/span&gt;G[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].FirstEdge;\n    Ptr queue[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;];\n    int front&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,rear&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    queue[rear&amp;#43;&amp;#43;]&amp;#61;t;\n    int cnt&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(front&amp;lt;rear){\n        Ptr temp&amp;#61;queue[front&amp;#43;&amp;#43;];\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(temp){\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;(!visit[temp-&amp;gt;&lt;/span&gt;adjV]){\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;queue&lt;/span&gt;[rear&amp;#43;&amp;#43;]&amp;#61;Graph-&amp;gt;&lt;/span&gt;G[&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;temp&lt;/span&gt;-&amp;gt;&lt;/span&gt;adjV].FirstEdge;\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;visit&lt;/span&gt;[temp-&amp;gt;&lt;/span&gt;adjV]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            }\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;temp&lt;/span&gt;&amp;#61;temp-&amp;gt;&lt;/span&gt;next;\n        }\n    }\n\n    cnt&amp;#43;&amp;#43;;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;for&lt;/span&gt;(int i&amp;#61;0;i&amp;lt;Graph-&amp;gt;&lt;/span&gt;Nv;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!visit[i]){\n            P&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;tr&lt;/span&gt; t&amp;#61;Graph-&amp;gt;&lt;/span&gt;G[i].FirstEdge;\n            front&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,rear&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            queue[rear&amp;#43;&amp;#43;]&amp;#61;t;\n            cnt&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(front&amp;lt;rear){\n                Ptr temp&amp;#61;queue[front&amp;#43;&amp;#43;];\n                &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(temp){\n                    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;(!visit[temp-&amp;gt;&lt;/span&gt;adjV]){\n                        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;queue&lt;/span&gt;[rear&amp;#43;&amp;#43;]&amp;#61;Graph-&amp;gt;&lt;/span&gt;G[&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;temp&lt;/span&gt;-&amp;gt;&lt;/span&gt;adjV].FirstEdge;\n                        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;visit&lt;/span&gt;[temp-&amp;gt;&lt;/span&gt;adjV]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                    }\n                    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;temp&lt;/span&gt;&amp;#61;temp-&amp;gt;&lt;/span&gt;next;\n                }\n            }\n        }\n    }\n    return cnt;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "图的强连通分量", "Question": ["显示的是段错误，问题详情如下", ["\nint visit[", "10000", "]={", "0", "};\nint c(LGraph Graph)\n{\n    visit[", "0", "]=", "1", ";\n    P", "tr", " t=Graph->", "G[", "0", "].FirstEdge;\n    Ptr queue[", "10000", "];\n    int front=", "0", ",rear=", "0", ";\n    queue[rear++]=t;\n    int cnt=", "0", ";\n    ", "while", "(front<rear){\n        Ptr temp=queue[front++];\n        ", "while", "(temp->", "next){\n            ", "queue", "[rear++]=temp->", "next;\n            ", "visit", "[temp->", "next", "->", "adjV]=", "1", ";\n            ", "temp", "=temp->", "next;\n        }\n    }\n    cnt++;\n    ", "for", "(int i=0;i<Graph->", "Nv;i++){\n        ", "if", "(visit[i]==", "0", "){\n            P", "tr", " t=Graph->", "G[i].FirstEdge;\n            Ptr queue[", "10000", "];\n            int front=", "0", ",rear=", "0", ";\n            queue[rear++]=t;\n            int cnt=", "0", ";\n            ", "while", "(front<rear){\n                Ptr temp=queue[front++];\n                ", "while", "(temp->", "next){\n                    ", "queue", "[rear++]=temp->", "next;\n                    ", "visit", "[temp->", "next", "->", "adjV]=", "1", ";\n                    ", "temp", "=temp->", "next;\n                }\n            }\n            cnt++;\n        }\n    }\n    return cnt;\n}\n", "\n", "因为我现在看不了原题了所以大概回忆着写了出来，就是让求有几个强连通分量，然后数据结构是邻接表，我的思路是首先从序号为0的结点开始进行广度优先遍历，也就是层序遍历，把序号0所在的强连通分量都遍历后，我再检查所有节点中谁没被遍历过，即visit[i]==0;", "然后用和上面同样的方法进行遍历", "但是总是不对，显示为段错误，到底怎么回事呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Graph&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;__init__&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, num_vertices&lt;/span&gt;):\n        self.num_vertices &amp;#61; num_vertices\n        self.adj_list &amp;#61; [[] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; _ &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_vertices)]\n        \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;add_edge&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, u, v&lt;/span&gt;):\n        self.adj_list[u].append(v)\n        self.adj_list[v].append(u)\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;bfs&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;graph, start, component_num, component&lt;/span&gt;):\n    queue &amp;#61; [start]\n    component[start] &amp;#61; component_num\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; queue:\n        vertex &amp;#61; queue.pop(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; neighbor &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; graph.adj_list[vertex]:\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; component[neighbor] &lt;span class=\"hljs-keyword\"&gt;is&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;None&lt;/span&gt;:\n                queue.append(neighbor)\n                component[neighbor] &amp;#61; component_num\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;get_connected_components&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;graph&lt;/span&gt;):\n    component_num &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    component &amp;#61; [&lt;span class=\"hljs-literal\"&gt;None&lt;/span&gt;] * graph.num_vertices\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; vertex &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(graph.num_vertices):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; component[vertex] &lt;span class=\"hljs-keyword\"&gt;is&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;None&lt;/span&gt;:\n            bfs(graph, vertex, component_num, component)\n            component_num &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; component\n\n&lt;span class=\"hljs-comment\"&gt;# 创建图&lt;/span&gt;\ng &amp;#61; Graph(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\ng.add_edge(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\ng.add_edge(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\ng.add_edge(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\ng.add_edge(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n\n&lt;span class=\"hljs-comment\"&gt;# 获取连通分量&lt;/span&gt;\ncomponents &amp;#61; get_connected_components(g)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(components)  &lt;span class=\"hljs-comment\"&gt;# 输出&amp;#xff1a;[0, 0, 0, 1, 2]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "图的强连通分量", "Question": ["利用广度优先搜索编程实现确定无向图的连通分量。", ["Python数据结构，利用广度优先搜索编程实现确定无向图的连通分量。"]], "Tag": "算法设计"}
{"Answer": "http://www.cppblog.com/Ylemzy/archive/2011/04/02/143310.html", "Konwledge_Point": "图的强连通分量", "Question": ["强连通分量                ", ["Description", "\n\n", "Once upon a time there lived a king and he had N sons. And there were N beautiful girls in the kingdom and the king knew about each of his sons which of those girls he did like. The sons of the king were young and light-headed, so it was possible for one son to like several girls. ", "\n\n", "So the king asked his wizard to find for each of his sons the girl he liked, so that he could marry her. And the king's wizard did it -- for each son the girl that he could marry was chosen, so that he liked this girl and, of course, each beautiful girl had to marry only one of the king's sons. ", "\n\n", "However, the king looked at the list and said: \"I like the list you have made, but I am not completely satisfied. For each son I would like to know all the girls that he can marry. Of course, after he marries any of those girls, for each other son you must still be able to choose the girl he likes to marry.\" ", "\n\n", "The problem the king wanted the wizard to solve had become too hard for him. You must save wizard's head by solving this problem.", "\nInput", "\n\n", "The first line of the input contains N -- the number of king's sons (1 <= N <= 2000). Next N lines for each of king's sons contain the list of the girls he likes: first Ki -- the number of those girls, and then Ki different integer numbers, ranging from 1 to N denoting the girls. The sum of all Ki does not exceed 200000. ", "\n\n", "The last line of the case contains the original list the wizard had made -- N different integer numbers: for each son the number of the girl he would marry in compliance with this list. It is guaranteed that the list is correct, that is, each son likes the girl he must marry according to this list. ", "\nOutput", "\n\n", "Output N lines.For each king's son first print Li -- the number of different girls he likes and can marry so that after his marriage it is possible to marry each of the other king's sons. After that print Li different integer numbers denoting those girls, in ascending order.", "\nSample Input", "\n\n", "4", "\n2 1 2", "\n2 1 2", "\n2 2 3", "\n2 3 4", "\n1 2 3 4", "\nSample Output", "\n\n", "2 1 2", "\n2 1 2", "\n1 3", "\n1 4"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;强连通分量是指在有向图中&amp;#xff0c;任意两点之间都存在一条从一个点到另一个点的有向路径&amp;#xff0c;并且从另一个点也能到达第一个点的点集。&lt;br /&gt;所以有3个&amp;#xff0c;最左边一个&amp;#xff0c;中间4个&amp;#xff0c;右边1个&lt;br /&gt;一个顶点自然是一个连通分量。因为它不需要任何路径&amp;#xff0c;它肯定能到达自身。&lt;/p&gt;", "Konwledge_Point": "图的强连通分量", "Question": ["数据结构中有向图的强连通分量", ["右图中的强连通分量的个数为（    ）个。", "\n", "这里左右两个顶点怎么是强连通分量了"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/keyboardmagician/article/details/53005003", "Konwledge_Point": "图的强连通分量", "Question": ["求强连通分量入门题hdu1269迷宫城堡wa掉了大神帮忙看看", ["迷宫城堡", "\n\n", "Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)", "\nTotal Submission(s): 17155    Accepted Submission(s): 7507", "\n\n", "Problem Description", "\n为了训练小希的方向感，Gardon建立了一座大城堡，里面有N个房间(N<=10000)和M条通道(M<=100000)，每个通道都是单向的，就是说若称某通道连通了A房间和B房间，只说明可以通过这个通道由A房间到达B房间，但并不说明通过它可以由B房间到达A房间。Gardon需要请你写个程序确认一下是否任意两个房间都是相互连通的，即：对于任意的i和j，至少存在一条路径可以从房间i到房间j，也存在一条路径可以从房间j到房间i。", "\n\n", "Input", "\n输入包含多组数据，输入的第一行有两个数：N和M，接下来的M行每行有两个数a和b，表示了一条通道可以从A房间来到B房间。文件最后以两个0结束。", "\n\n", "Output", "\n对于输入的每组数据，如果任意两个房间都是相互连接的，输出\"Yes\"，否则输出\"No\"。", "\n\n", "Sample Input", "\n3 3", "\n1 2", "\n2 3", "\n3 1", "\n3 3", "\n1 2", "\n2 3", "\n3 2", "\n0 0", "\n\n", "Sample Output", "\nYes", "\nNo", "\n\n", "下面是我写了 注释是我自己理解的不知道对不对 求指点！", "\nimport java.util.ArrayList;", "\nimport java.util.Scanner;", "\nimport java.util.Stack;", "\n\n", "public class Main {", "\n\n", "private static int n;\nprivate static int m;\nprivate static int[] dfn;\nprivate static int[] low;\nprivate static int time;\nprivate static Stack<Integer> stack;\nprivate static int sum;\nprivate static ArrayList[] list;\n\npublic static void main(String[] args) {\n    // TODO 自动生成的方法存根\n    Scanner scanner = new Scanner(System.in);\n    while (scanner.hasNext()) {\n        scn(scanner);//输入\n        bud();       //算法\n        out();       //输出\n    }\n}\n\nprivate static void out() {\n    // TODO 自动生成的方法存根\n    if (sum==1) {\n        System.out.println(\"Yes\");\n    }else {\n        System.out.println(\"No\");\n    }\n}\n\nprivate static void bud() {\n        dfn = new int [n+1];//次序数组\n        low = new int [n+1];//记录此点所能到达最早栈中的值\n        time = 0;//时间戳\n        sum = 0;//记录此图有几个强连通分量\n        stack = new Stack<Integer>();\n        //强连通分量一定是个环   此栈相当于这个环中的任意一条弧\n        Targan_bfs(1);\n}\n\nprivate static void Targan_bfs(int i) {\n        dfn[i] = low[i]    = ++time;//low先初始跟次序相同\n        stack.push(i);//将点i压入栈\n        //之后进行bfs搜索 枚举每一种成环的可能\n        for (int j = 0; j <list[i].size() ; j++) {\n            int k= (int) list[i].get(j);\n            if(dfn[k]==0){\n                Targan_bfs(k);\n                low[i] = Math.min(low[i], low[k]);\n                //如果进行了递归存在下一个连通点并且这点不在栈里\n                //那么根据low的定义 low = min{low[i],low[k]}\n            }else {\n                low[i] = Math.min(low[i], dfn[k]);\n                //不进行递归那么表示下一个连通点在栈中\n                //根据low的的定义 low = min{low[i],dnf[k]}\n                }\n        }\n        if (low[i]==dfn[i]) {\n            //当low[i]=dfn[i]表示他自身构成了环 所以他是一个独立的连通分量\n            sum ++;int k = 0;\n            //为什么循环出栈呢\n            //如果所有的点都相互连通那么在最后搜到的点low【最后】=low【首先】\n            //同理 每当你找到一个强连通分量那么请都弹出去\n            do {\n               k = stack.pop();\n            } while (low[k]!=dfn[k]&&!stack.isEmpty());\n        }\n\n}\n\nprivate static void scn(Scanner scanner) {\n    n = scanner.nextInt();\n    m = scanner.nextInt();\n    if(n==0&&m==0){java.lang.System.exit(0);}\n    list = new ArrayList[n+1];\n    for(int i=0;i<=n;i++){list[i]=new ArrayList<Integer>();}\n    for (int i = 0; i <m; i++) {\n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n        list[a].add(b);\n    }        \n}\n", "\n\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;联通分量分为强连通和弱连通&amp;#xff0c;如果是弱连通&amp;#xff0c;这里就不需要分了。&lt;/p&gt;", "Konwledge_Point": "图的强连通分量", "Question": ["数据结构中的连通分量问题", ["\n", "按照有向图看， 这6 个顶点 是一个 连通分量吗？是不是 要把 5 和 4 去掉， 0 1 2 3 是一个分量，5 、4 分别是另外两个分量"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;输入图的格式是什么&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "图的强连通分量", "Question": ["用C++实现以下功能", ["(1)输入一个无向图，打印出它的所有连通分量。如", "下示例，", "连通分量有2个，分别为{1,2,4,5}, {3,6}", "(2)输入一个有向图，打印出它的所有强连通分量。", "如下示例，", "强连通分量有3个，分别为{1}, {4}, {2,5,3,6}", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;只需要调用遍历过程一次&lt;br /&gt;必须调用&amp;#xff08;&amp;#xff09;次深度优先搜索遍历的算法&lt;br /&gt;注意这是在考语文&lt;br /&gt;-&amp;#61;-&amp;#61;-&amp;#61;-&amp;#61;-&lt;br /&gt;你知道搜索算法是个递归吧&lt;br /&gt;问你这个函数一共递归多少次&lt;br /&gt;不是问你主函数调用这个函数几次&lt;/p&gt;", "Konwledge_Point": "图的强连通分量", "Question": ["要按照深度优先搜索的方法访问所有顶点，则必须调用（）次深度优先搜索遍历的算法。", ["若一个图中包含有k个连通分量，若要按照深度优先搜索的方法访问所有顶点，则必须调用（）次深度优先搜索遍历的算法。", "A. kB. 1C. k-1D. k+1", "这个怎么是k次，不是连通图的话只需要调用遍历过程一次，就可以遍历图中所有的顶点了吗"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于Monster 组和GPT的调写&amp;#xff1a;&lt;br /&gt;改了改&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;int visit[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n\nint c(LGraph Graph)\n{\n    visit[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    P&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;tr&lt;/span&gt; t&amp;#61;Graph-&amp;gt;&lt;/span&gt;G[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].FirstEdge;\n    Ptr queue[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;];\n    int front&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,rear&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    queue[rear&amp;#43;&amp;#43;]&amp;#61;t;\n    int cnt&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(front&amp;lt;rear){\n        Ptr temp&amp;#61;queue[front&amp;#43;&amp;#43;];\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(temp){\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;(!visit[temp-&amp;gt;&lt;/span&gt;adjV]){\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;queue&lt;/span&gt;[rear&amp;#43;&amp;#43;]&amp;#61;Graph-&amp;gt;&lt;/span&gt;G[&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;temp&lt;/span&gt;-&amp;gt;&lt;/span&gt;adjV].FirstEdge;\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;visit&lt;/span&gt;[temp-&amp;gt;&lt;/span&gt;adjV]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            }\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;temp&lt;/span&gt;&amp;#61;temp-&amp;gt;&lt;/span&gt;next;\n        }\n    }\n\n    cnt&amp;#43;&amp;#43;;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;for&lt;/span&gt;(int i&amp;#61;0;i&amp;lt;Graph-&amp;gt;&lt;/span&gt;Nv;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!visit[i]){\n            P&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;tr&lt;/span&gt; t&amp;#61;Graph-&amp;gt;&lt;/span&gt;G[i].FirstEdge;\n            front&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,rear&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            queue[rear&amp;#43;&amp;#43;]&amp;#61;t;\n            cnt&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(front&amp;lt;rear){\n                Ptr temp&amp;#61;queue[front&amp;#43;&amp;#43;];\n                &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(temp){\n                    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;(!visit[temp-&amp;gt;&lt;/span&gt;adjV]){\n                        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;queue&lt;/span&gt;[rear&amp;#43;&amp;#43;]&amp;#61;Graph-&amp;gt;&lt;/span&gt;G[&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;temp&lt;/span&gt;-&amp;gt;&lt;/span&gt;adjV].FirstEdge;\n                        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;visit&lt;/span&gt;[temp-&amp;gt;&lt;/span&gt;adjV]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                    }\n                    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;temp&lt;/span&gt;&amp;#61;temp-&amp;gt;&lt;/span&gt;next;\n                }\n            }\n        }\n    }\n    return cnt;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "图的强连通分量", "Question": ["显示的是段错误，问题详情如下", ["\nint visit[", "10000", "]={", "0", "};\nint c(LGraph Graph)\n{\n    visit[", "0", "]=", "1", ";\n    P", "tr", " t=Graph->", "G[", "0", "].FirstEdge;\n    Ptr queue[", "10000", "];\n    int front=", "0", ",rear=", "0", ";\n    queue[rear++]=t;\n    int cnt=", "0", ";\n    ", "while", "(front<rear){\n        Ptr temp=queue[front++];\n        ", "while", "(temp->", "next){\n            ", "queue", "[rear++]=temp->", "next;\n            ", "visit", "[temp->", "next", "->", "adjV]=", "1", ";\n            ", "temp", "=temp->", "next;\n        }\n    }\n    cnt++;\n    ", "for", "(int i=0;i<Graph->", "Nv;i++){\n        ", "if", "(visit[i]==", "0", "){\n            P", "tr", " t=Graph->", "G[i].FirstEdge;\n            Ptr queue[", "10000", "];\n            int front=", "0", ",rear=", "0", ";\n            queue[rear++]=t;\n            int cnt=", "0", ";\n            ", "while", "(front<rear){\n                Ptr temp=queue[front++];\n                ", "while", "(temp->", "next){\n                    ", "queue", "[rear++]=temp->", "next;\n                    ", "visit", "[temp->", "next", "->", "adjV]=", "1", ";\n                    ", "temp", "=temp->", "next;\n                }\n            }\n            cnt++;\n        }\n    }\n    return cnt;\n}\n", "\n", "因为我现在看不了原题了所以大概回忆着写了出来，就是让求有几个强连通分量，然后数据结构是邻接表，我的思路是首先从序号为0的结点开始进行广度优先遍历，也就是层序遍历，把序号0所在的强连通分量都遍历后，我再检查所有节点中谁没被遍历过，即visit[i]==0;", "然后用和上面同样的方法进行遍历", "但是总是不对，显示为段错误，到底怎么回事呢？"]], "Tag": "算法设计"}
