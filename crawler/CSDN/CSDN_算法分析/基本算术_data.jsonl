{"Answer": "提示一下，用简单类工厂的模式去做这种计算器的实现，能够体现面向对象的思想。", "Konwledge_Point": "基本算术", "Question": ["求c++大神解答，最好是面向对象程序设计c++高级语言的", ["\n", "模拟计算器程序\n问题描述\n设计一个程序来模拟一个简单的手持计算器。程序支持算术运算+、-、*、/、=、以及Ｃ（清除）、A（全清除）操作。\n基本要求\n程序运行时，显示一个窗口，等待用户输入，用户可以从键盘输入要计算的表达式，输入的表达式显示在窗口中，用户键入’=’ 符号后，窗口显示出结果。\n测试数据\n程序输入不少于5种不同的表达式进行测试。\n实现提示\n可定义一个计算器类，该类包括两个组件对象，一个计算引擎和一个用户接口，用户接口对象处理接受的键盘输入信息，并显示答案，计算引擎对象对给出的数据执行相应操作，并存储操作的结果。\n选作内容\n如果用户输入的表达式不合法，可以判别出来并给出相应的错误提示。", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;简单写了下&amp;#xff0c;希望有用&amp;#xff0c;祝你顺利&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//简单方法一 &lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,b,c;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; op;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入表达式,按enter执行&amp;#xff0c;例如 1&amp;#43;2 &amp;#xff1a;&amp;#34;&lt;/span&gt;); \n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%c%d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;op,&amp;amp;b);\n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt;(op){\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n            c&amp;#61;a&amp;#43;b;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n            c&amp;#61;a-b;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n            c&amp;#61;a*b;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n            c&amp;#61;a/b;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;:\n            c&amp;#61;a%b;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;不支持该操作%c&amp;#34;&lt;/span&gt;,op);     \n    }     \n     &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%c%d&amp;#61;%d\\n&amp;#34;&lt;/span&gt;,a,op,b,c); \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/10126463035619.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//简单方法二&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;add&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a&amp;#43;b;\n} \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;sub&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a-b;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;muti&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a*b;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;div&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a/b;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;mod&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a%b;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,b,c;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; op;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入表达式,按enter执行&amp;#xff0c;例如 1&amp;#43;2 &amp;#xff1a;&amp;#34;&lt;/span&gt;); \n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%c%d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;op,&amp;amp;b);\n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt;(op){\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n            c&amp;#61;&lt;span class=\"hljs-built_in\"&gt;add&lt;/span&gt;(a,b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n            c&amp;#61;&lt;span class=\"hljs-built_in\"&gt;sub&lt;/span&gt;(a,b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n            c&amp;#61;&lt;span class=\"hljs-built_in\"&gt;muti&lt;/span&gt;(a,b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n            c&amp;#61;&lt;span class=\"hljs-built_in\"&gt;div&lt;/span&gt;(a,b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;:\n            c&amp;#61;&lt;span class=\"hljs-built_in\"&gt;mod&lt;/span&gt;(a,b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;不支持该操作%c&amp;#34;&lt;/span&gt;,op);     \n    }     \n     &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%c%d&amp;#61;%d\\n&amp;#34;&lt;/span&gt;,a,op,b,c); \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/155518630356115.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "基本算术", "Question": ["这个c语言该怎么解答呢", ["一、使用两种方法编写一个简单的计算器程序，该计算器程序能实现两个数的加法、减法、乘法、除法和取余等基本的算术运算。1.方法1：根据输入的两个整型操作数和运算符可以完成 + 、—、* 、/ 、% 运算，输出结果必须是一个完整的算术运算式的格式。例如 ：输入3+5，输出结果是 3+5=8。（要求使用switch语句）", "2.方法2：根据输入两个整型操作数和运算符可以完成 + 、—、* 、/ 、% 运算。具体运算过程要求是通过调用对应的子函数来实现。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#include&amp;lt;stdio.h&amp;gt;\n \n#include&amp;lt;stdlib.h&amp;gt;\n \n \n \n#define STACK_SIZE &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;              &lt;span class=\"hljs-comment\"&gt;//存储空间初始分配量&lt;/span&gt;\n \n#define STACK_INCREASE &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;    &lt;span class=\"hljs-comment\"&gt;//存储空间分配增量&lt;/span&gt;\n \n \n \ntypedef struct {                &lt;span class=\"hljs-comment\"&gt;//寄存运算符&lt;/span&gt;\n \n      char* base;           &lt;span class=\"hljs-comment\"&gt;//栈底指针&lt;/span&gt;\n \n      char* top;                  &lt;span class=\"hljs-comment\"&gt;//栈顶指针&lt;/span&gt;\n \n      int stacksize;        &lt;span class=\"hljs-comment\"&gt;//当前可使用最大容量&lt;/span&gt;\n \n}OPTR;\n \ntypedef struct {                &lt;span class=\"hljs-comment\"&gt;//寄存操作数&lt;/span&gt;\n \n      double* base;\n \n      double* top;\n \n      int stacksize;\n \n}OPND;\n \n \n \nint InitStack(OPTR* s);\n \nint InitStack(OPND* s);\n \nint Push(OPTR* s, char e);\n \nint Push(OPND* s, double e);\n \nint Pop(OPTR* s, char* e);\n \nint Pop(OPND* s, double* e);\n \nchar Gettop(OPTR* s);\n \ndouble Gettop(OPND* s);\n \nint In(char e);\n \nchar Precede(char a, char b);\n \ndouble Operate(double a, double b, char t);\n \n \n \n&lt;span class=\"hljs-comment\"&gt;//主函数&lt;/span&gt;\n \nint main()\n \n{\n \n      OPTR optr;\n \n      OPND opnd;\n \n      OPND temp;    &lt;span class=\"hljs-comment\"&gt;//临时存储数字&amp;#xff0c;构造多位数&lt;/span&gt;\n \n      char c;            &lt;span class=\"hljs-comment\"&gt;//接收表达式&lt;/span&gt;\n \n      char y;            &lt;span class=\"hljs-comment\"&gt;//接收脱掉的括号和井号&lt;/span&gt;\n \n      char theta;       &lt;span class=\"hljs-comment\"&gt;//接收脱出进行运算的运算符&lt;/span&gt;\n \n      double a, b;  &lt;span class=\"hljs-comment\"&gt;//接收脱出进行运算的操作数&lt;/span&gt;\n \n      int g &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n \n \n \n      &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(g)\n \n      {\n \n             system(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n \n                    double x &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, z &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;    &lt;span class=\"hljs-comment\"&gt;//多位数转换&lt;/span&gt;\n \n                    int n &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;                   &lt;span class=\"hljs-comment\"&gt;//幂&lt;/span&gt;\n \n                    int error &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;               &lt;span class=\"hljs-comment\"&gt;//输入格式错误则报错&lt;/span&gt;\n \n                    InitStack(&amp;amp;optr);\n \n                    InitStack(&amp;amp;opnd);\n \n                    InitStack(&amp;amp;temp);\n \n            \n \n                    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入整数表达式&amp;#xff08;以#结束&amp;#xff09;&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n \n                    Push(&amp;amp;optr, &lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;);\n \n                    c &amp;#61; getchar();\n \n     \n \n                    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (c !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; || Gettop(&amp;amp;optr) !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;)\n \n                    {\n \n                           &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) {\n \n                                  Push(&amp;amp;opnd, (double)z);\n \n                                  c &amp;#61; getchar();\n \n                           }\n \n                           &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n \n                           {\n \n                                  &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (!In(c))\n \n                                  {                                               &lt;span class=\"hljs-comment\"&gt;//将多位数存入临时栈&lt;/span&gt;\n \n                                         Push(&amp;amp;temp, c - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);       &lt;span class=\"hljs-comment\"&gt;//字符转数字&lt;/span&gt;\n \n                                         c &amp;#61; getchar();\n \n                                  }\n \n                                  &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (temp.base !&amp;#61; temp.top)\n \n                            {                                 &lt;span class=\"hljs-comment\"&gt;//将临时栈中的数重组为多位数&lt;/span&gt;\n \n                                         Pop(&amp;amp;temp, &amp;amp;x);\n \n                                         z &amp;#61; z &amp;#43; x * n;\n \n                                         n *&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n \n                                  }\n \n                                  n &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n \n                                  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (z)Push(&amp;amp;opnd, (double)z);&lt;span class=\"hljs-comment\"&gt;//重组后的多位数入栈&lt;/span&gt;\n \n                                  z &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n \n                           }\n \n            \n \n                           &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (In(c))\n \n                           {\n \n                                  switch (Precede(Gettop(&amp;amp;optr), c))\n \n                                  {\n \n                                         case &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;:\n \n                                                Push(&amp;amp;optr, c);\n \n                                                c &amp;#61; getchar();\n \n                                                break;\n \n                   \n \n                                         case &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#61;&amp;#39;&lt;/span&gt;:\n \n                                                Pop(&amp;amp;optr, &amp;amp;y);\n \n                                                c &amp;#61; getchar();\n \n                                                break;\n \n                   \n \n                                         case &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;:\n \n                                                Pop(&amp;amp;optr, &amp;amp;theta);\n \n                                                Pop(&amp;amp;opnd, &amp;amp;b);\n \n                                                Pop(&amp;amp;opnd, &amp;amp;a);\n \n                                                Push(&amp;amp;opnd, Operate(a, b, theta));\n \n                                                break;\n \n                   \n \n                                         case &lt;span class=\"hljs-string\"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;:\n \n                                                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入错误&amp;#xff01;&amp;#34;&lt;/span&gt;);\n \n                                                error &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n \n                                                break;\n \n                                  }\n \n                           }\n \n                           &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (error)break;\n \n                    }\n \n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!error)\n \n                           printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;结果为&amp;#xff1a;%.2f\\n&amp;#34;&lt;/span&gt;, Gettop(&amp;amp;opnd));\n \n                    system(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n \n \n      }\n \n            \n \n      return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n \n}\n \n&lt;span class=\"hljs-comment\"&gt;//构造空栈s&lt;/span&gt;\n \nint InitStack(OPTR* s) {\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;base &amp;#61; (char*)malloc(STACK_SIZE * sizeof(char));\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (!s-&amp;gt;&lt;/span&gt;base)\n \n             exit(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//存储分配失败&lt;/span&gt;\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;top&lt;/span&gt; &amp;#61; s-&amp;gt;&lt;/span&gt;base;\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;stacksize &amp;#61; STACK_SIZE;\n \n      return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n \n}\n \nint InitStack(OPND* s) {\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;base &amp;#61; (double*)malloc(STACK_SIZE * sizeof(double));\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (!s-&amp;gt;&lt;/span&gt;base)\n \n             exit(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;top&lt;/span&gt; &amp;#61; s-&amp;gt;&lt;/span&gt;base;\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;stacksize &amp;#61; STACK_SIZE;\n \n      return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n \n}\n \n&lt;span class=\"hljs-comment\"&gt;//插入元素e为新的栈顶&lt;/span&gt;\n \nint Push(OPTR* s, char e) {\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (s-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;top&lt;/span&gt; - s-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;base&lt;/span&gt; &amp;gt;&amp;#61; s-&amp;gt;&lt;/span&gt;stacksize) {&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//栈满&amp;#xff0c;追加存储空间&lt;/span&gt;\n \n             &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;base&lt;/span&gt; &amp;#61; (char*)realloc(s-&amp;gt;&lt;/span&gt;base,\n \n                    (&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;stacksize &amp;#43; STACK_INCREASE) * sizeof(char));\n \n             &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (!s-&amp;gt;&lt;/span&gt;base)\n \n                    exit(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n \n             &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;top&lt;/span&gt; &amp;#61; s-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;base&lt;/span&gt; &amp;#43; s-&amp;gt;&lt;/span&gt;stacksize;\n \n             &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;stacksize &amp;#43;&amp;#61; STACK_INCREASE;\n \n      }\n \n      *(&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;top) &amp;#61; e;\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;top&amp;#43;&amp;#43;;\n \n}\n \nint Push(OPND* s, double e) {\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (s-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;top&lt;/span&gt; - s-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;base&lt;/span&gt; &amp;gt;&amp;#61; s-&amp;gt;&lt;/span&gt;stacksize) {\n \n             &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;base&lt;/span&gt; &amp;#61; (double*)realloc(s-&amp;gt;&lt;/span&gt;base,\n \n                    (&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;stacksize &amp;#43; STACK_INCREASE) * sizeof(double));\n \n             &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (!s-&amp;gt;&lt;/span&gt;base)\n \n                    exit(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n \n             &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;top&lt;/span&gt; &amp;#61; s-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;base&lt;/span&gt; &amp;#43; s-&amp;gt;&lt;/span&gt;stacksize;\n \n             &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;stacksize &amp;#43;&amp;#61; STACK_INCREASE;\n \n      }\n \n      *(&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;top) &amp;#61; e;\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;top&amp;#43;&amp;#43;;\n \n}\n \n&lt;span class=\"hljs-comment\"&gt;//删除栈顶元素,返回其值&lt;/span&gt;\n \nint Pop(OPTR* s, char* e) {\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (s-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;top&lt;/span&gt; &amp;#61;&amp;#61; s-&amp;gt;&lt;/span&gt;base)return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;top--;\n \n      *&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;e&lt;/span&gt; &amp;#61; *(s-&amp;gt;&lt;/span&gt;top);\n \n      return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n \n}\n \nint Pop(OPND* s, double* e) {\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (s-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;top&lt;/span&gt; &amp;#61;&amp;#61; s-&amp;gt;&lt;/span&gt;base)return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;top--;\n \n      *&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;e&lt;/span&gt; &amp;#61; *(s-&amp;gt;&lt;/span&gt;top);\n \n      return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n \n}\n \n&lt;span class=\"hljs-comment\"&gt;//判断栈是否为空&amp;#xff0c;不为空则返回栈顶元素e&lt;/span&gt;\n \nchar Gettop(OPTR* s) {\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (s-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;top&lt;/span&gt; &amp;#61;&amp;#61; s-&amp;gt;&lt;/span&gt;base)\n \n             return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;char&lt;/span&gt;* e &amp;#61; s-&amp;gt;&lt;/span&gt;top;\n \n      e--;\n \n      return *e;\n \n}\n \ndouble Gettop(OPND* s) {\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (s-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;top&lt;/span&gt; &amp;#61;&amp;#61; s-&amp;gt;&lt;/span&gt;base)\n \n             return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n \n      &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;double&lt;/span&gt;* e &amp;#61; s-&amp;gt;&lt;/span&gt;top;\n \n      e--;\n \n      return *e;\n \n}\n \n&lt;span class=\"hljs-comment\"&gt;//判断是否为运算符&lt;/span&gt;\n \nint In(char e) {\n \n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (e &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt; || e &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; || e &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; || e &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; || e &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt; || e &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;)&amp;#39;&lt;/span&gt; || e &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;)\n \n             return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n \n      &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n \n}\n \n&lt;span class=\"hljs-comment\"&gt;//判断优先级&lt;/span&gt;\n \nchar Precede(char a, char b) {\n \n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;)\n \n      {\n \n             &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; || b &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; || b &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;) return &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;;\n \n             &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; return &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;;\n \n      }\n \n      &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)\n \n      {\n \n             &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; || b &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; || b &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;) return &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;;\n \n             &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; return &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;;\n \n      }\n \n      &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;)\n \n      {\n \n             &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;)return &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;;\n \n             &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; return &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;;\n \n      }\n \n      &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)\n \n      {\n \n             &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;)return &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;;\n \n             &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; return &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;;\n \n      }\n \n      &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;)\n \n      {\n \n             &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;)return &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#61;&amp;#39;&lt;/span&gt;;\n \n             &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;) return &lt;span class=\"hljs-string\"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;;\n \n             &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; return &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;;\n \n      }\n \n      &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;)\n \n      {\n \n             &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;)return &lt;span class=\"hljs-string\"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;;\n \n             &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; return &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;;\n \n \n \n      }\n \n      &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;)\n \n      {\n \n             &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;)return &lt;span class=\"hljs-string\"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;;\n             &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;)return &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#61;&amp;#39;&lt;/span&gt;;\n             &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; return &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;;\n      }\n}\n&lt;span class=\"hljs-comment\"&gt;//计算&lt;/span&gt;\ndouble Operate(double a, double b, char theta) {\n      switch (theta)\n      {\n      case &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n             return a &amp;#43; b;\n      case &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n             return &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt; * a - b;\n      case &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n             return a * b;\n      case &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n             return &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt; * a / b;\n                    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n             printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入错误&amp;#xff01;&amp;#34;&lt;/span&gt;);\n             exit(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n \n      }\n \n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "基本算术", "Question": ["数据结构-算术表达式的求解", ["问题描述：给定一个算术表达式，通过程序求出最后的结果。", "基本要求：", "1． 从键盘输入要求解的算术表达式；", "2． 采用栈结构进行算术表达式的求解过程；", "3． 能够判断算术表达式正确与否；", "4． 对于错误表达式给出提示；", "5． 对于正确的表达式给出最后的结果；", "附程序和图加主要思想"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;plus&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%g &amp;#43; %g &amp;#61; %g\\n&amp;#34;&lt;/span&gt;, a, b, a &amp;#43; b);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;minus&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%g - %g &amp;#61; %g\\n&amp;#34;&lt;/span&gt;, a, b, a - b);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;multiply&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%g * %g &amp;#61; %g\\n&amp;#34;&lt;/span&gt;, a, b, a * b);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;divide&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{        \n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%g / %g &amp;#61; %.2f\\n&amp;#34;&lt;/span&gt;, a, b, a / b);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;  ret;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; in[&lt;span class=\"hljs-number\"&gt;64&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; }, x[&lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;], y[&lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;], op[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a, b;&lt;span class=\"hljs-comment\"&gt;//参加运算的两个数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;gets&lt;/span&gt;(in);&lt;span class=\"hljs-comment\"&gt;//输入算式&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(in, &lt;span class=\"hljs-string\"&gt;&amp;#34;exit&amp;#34;&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//输入“exit”时&amp;#xff0c;退出计算器&lt;/span&gt;\n        ret &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sscanf&lt;/span&gt;(in, &lt;span class=\"hljs-string\"&gt;&amp;#34;%[0-9.] %[^0-9. ] %[0-9.]&amp;#34;&lt;/span&gt;, x, op, y);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (ret &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;) {\n            &lt;span class=\"hljs-built_in\"&gt;sscanf&lt;/span&gt;(x, &lt;span class=\"hljs-string\"&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;, &amp;amp;a);\n            &lt;span class=\"hljs-built_in\"&gt;sscanf&lt;/span&gt;(y, &lt;span class=\"hljs-string\"&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;, &amp;amp;b);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(op, &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#43;&amp;#34;&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                &lt;span class=\"hljs-built_in\"&gt;plus&lt;/span&gt;(a, b);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(op, &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                &lt;span class=\"hljs-built_in\"&gt;minus&lt;/span&gt;(a, b);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(op, &lt;span class=\"hljs-string\"&gt;&amp;#34;*&amp;#34;&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                &lt;span class=\"hljs-built_in\"&gt;multiply&lt;/span&gt;(a, b);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(op, &lt;span class=\"hljs-string\"&gt;&amp;#34;/&amp;#34;&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; b !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                &lt;span class=\"hljs-built_in\"&gt;divide&lt;/span&gt;(a, b);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;error!Please input again.\\n&amp;#34;&lt;/span&gt;);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;error!Please input again.\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "基本算术", "Question": ["（简单题）程序设计基础：简易计算器的设计（急，6.5号16：00截止哦）", ["课题2.简易计算器的设计", "\n", "问题描述:能够实现两个数的算术运算功能(加、减、乘、除)", "\n", "1.基本要求", "\n", "(1)依次输入第一个操作数、运算符、第二个操作数，然后输出运算结果，例如", "\n", "输入: 13*8", "\n", "输出: 13*8=104", "\n", "(2)对错误的表达式有识别功能，例如输入: 12/0", "\n", "输出: error! Please input again.", "\n", "(3)除法运算的结果要保留小数位数2位;(4)当输入“exit”时，退出计算器;", "\n", "(5)利用函数调用的方法实现计算器的计算功", "\n", "能。", "\n", "附上整个系统数据结构的定义及系统源代码，各自定义函数的声明部分中，要求对主要变量的作用进行注释，语句部分中要求对关键语句进行注释，以方便阅读和理解程序。"]], "Tag": "算法设计"}
{"Answer": "软考有官方教材啊...考软考不能连这个都不知道.....把那本教材搞定就差不多了..\r\n\r\n主要的难点是数据结构跟UML,重点搞定这2个.\r\n\r\n重点，数据结构，算法，C语言，UML，面向对象设计。\r\n其他都不怎么难的..\r\n\r\n还有要学一下什么数据流程图,不过看官方教材就可以了.\r\n\r\n这种事情,问你们老师更好,多跟你们的老师交流一下,发个mail沟通下,他肯定可以给你们更多的信息,包括如何复习跟准备.", "Konwledge_Point": "基本算术", "Question": ["请问大家一下，软件设计师考试怎么过啊！", ["考试时间爱：5月23日。", "\n考试要求：", "\n(1) 掌握数据表示、算术和逻辑运算；", "\n(2) 掌握相关的应用数学、离散数学的基础知识；", "\n(3) 掌握计算机体系结构以及各主要部件的性能和基本工作原理；", "\n(4) 掌握操作系统、程序设计语言的基础知识，了解编译程序的基本知识；", "\n(5) 熟练掌握常用数据结构和常用算法；", "\n(6) 熟悉数据库、网络和多媒体的基础知识；", "\n(7) 掌握C程序设计语言，以及C++、Java、Visual Basic、Visual C++中的一种程序设计语言；", "\n(8) 熟悉软件工程、软件过程改进和软件开发项目管理的基础知识；", "\n(9) 熟悉掌握软件设计的方法和技术；", "\n(10) 掌握常用信息技术标准、安全性，以及有关法律、法规的基本知识；", "\n(11) 了解信息化、计算机应用的基础知识；", "\n(12) 正确阅读和理解计算机领域的英文资料。", "\n通过本考试的合格人员能根据软件开发项目管理和软件工程的要求，按照系统总体设计规格说明书进行软件设计，编写程序设计规格说明书等相应的文档，组织和指导程序员编写、调试程序，并对软件进行优化和集成测试，开发出符合系统总体设计要求的高质量软件；具有工程师的实际工作能力和业务水平。", "\n本考试设置的科目包括：", "\n(1) 计算机与软件工程知识，考试时间为150分钟，笔试；", "\n(2) 软件设计，考试时间为150分钟，笔试。", "\n\n", "截至作者发表，作者已经学过数据结构与算法，c，java，计算机组成原理的1/3（这学期学的课），数据库（自学）好了，离散", "\n\n", "有经验的过来人请指点一二，我想早点过", "\n[b]问题补充：[/b]", "\n看好几编？ 要多久啊！ 大伙能具体点说吗？有哪些重点的"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;下面是一个例子&amp;#xff0c;它使用C语言实现了二叉树来表示表达式并求值的功能&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;ctype.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;// 定义表达式二叉树的结点结构&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;node&lt;/span&gt; {\n  &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; data;  &lt;span class=\"hljs-comment\"&gt;// 结点的数据域&amp;#xff0c;用来存储运算符或者操作数&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;node&lt;/span&gt; *left;  &lt;span class=\"hljs-comment\"&gt;// 左子树指针&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;node&lt;/span&gt; *right;  &lt;span class=\"hljs-comment\"&gt;// 右子树指针&lt;/span&gt;\n} Node;\n\n&lt;span class=\"hljs-comment\"&gt;// 创建表达式二叉树的函数&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;Node *&lt;span class=\"hljs-title\"&gt;create_expression_tree&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *expression)&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=\"hljs-comment\"&gt;// 定义栈&amp;#xff0c;用来存储结点&lt;/span&gt;\n  Node *stack[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; top &amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;// 栈顶指针&lt;/span&gt;\n\n  &lt;span class=\"hljs-comment\"&gt;// 遍历表达式的每一个字符&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; expression[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n    &lt;span class=\"hljs-comment\"&gt;// 如果是数字&amp;#xff0c;创建一个结点并将其压入栈中&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;isdigit&lt;/span&gt;(expression[i])) {\n      Node *node &amp;#61; (Node *) &lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(Node));\n      node-&amp;gt;data &amp;#61; expression[i];\n      node-&amp;gt;left &amp;#61; node-&amp;gt;right &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n      stack[&amp;#43;&amp;#43;top] &amp;#61; node;\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n      &lt;span class=\"hljs-comment\"&gt;// 如果是运算符&amp;#xff0c;从栈中弹出两个结点作为运算符的两个操作数&lt;/span&gt;\n      Node *node &amp;#61; (Node *) &lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(Node));\n      node-&amp;gt;data &amp;#61; expression[i];\n      node-&amp;gt;right &amp;#61; stack[top--];\n      node-&amp;gt;left &amp;#61; stack[top--];\n      &lt;span class=\"hljs-comment\"&gt;// 将新创建的结点压入栈中&lt;/span&gt;\n      stack[&amp;#43;&amp;#43;top] &amp;#61; node;\n    }\n  }\n\n  &lt;span class=\"hljs-comment\"&gt;// 返回表达式二叉树的根结点&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; stack[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n}\n\n&lt;span class=\"hljs-comment\"&gt;// 使用后缀表达式的方式遍历二叉树并求值的函数&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;evaluate&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Node *root)&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=\"hljs-comment\"&gt;// 如果是叶子结点&amp;#xff0c;直接返回数据域中存储的数字&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (root-&amp;gt;left &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt; &amp;amp;&amp;amp; root-&amp;gt;right &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; root-&amp;gt;data - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-comment\"&gt;// 如果是二元运算符&amp;#xff0c;则递归计算左右子树的值并进行计算&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; left &amp;#61; &lt;span class=\"hljs-built_in\"&gt;evaluate&lt;/span&gt;(root-&amp;gt;left);\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; right &amp;#61; &lt;span class=\"hljs-built_in\"&gt;evaluate&lt;/span&gt;(root-&amp;gt;right);\n&lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (root-&amp;gt;data) {\n&lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; left &amp;#43; right;\n&lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; left - right;\n&lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; left * right;\n&lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; left / right;\n}\n\n&lt;span class=\"hljs-comment\"&gt;// 其他情况返回0&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n&lt;span class=\"hljs-comment\"&gt;// 创建表达式二叉树&lt;/span&gt;\nNode root &amp;#61; &lt;span class=\"hljs-built_in\"&gt;create_expression_tree&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;9&amp;#43;52-4/2&amp;#34;&lt;/span&gt;);\n\n&lt;span class=\"hljs-comment\"&gt;// 计算并打印结果&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; result &amp;#61; &lt;span class=\"hljs-built_in\"&gt;evaluate&lt;/span&gt;(root);\n&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Result: %d\\n&amp;#34;&lt;/span&gt;, result);\n\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;希望Al有所帮助&lt;/p&gt;", "Konwledge_Point": "基本算术", "Question": ["求一段代码，用c语言写", ["利用二叉树求解表达式【基本功能】二叉树表示表达式的递归定义为：（1）若表达式为数或简单变量，则相应二叉树中仅有一个根结点，其数据域存放该表达式信息；（2）若表达式为“第一操作数 运算符 第二操作数”的形式，则相应的二叉树中以左子树表示第一操作数，右子树表示第二操作数，根结点的数据域存放运算符（若为一元运算符，则左子树为空），其中，操作数本身又为表达式对于任意一个算术表达式，都可以用二叉树来表示。表达式对应的二叉树创建后，利用二叉树的遍历操作，可实现表达式的求值运算。【基本要求】（1）设计表达式二叉树的创建与求值函数。（2）编写一个测试主函数。【提示】由于创建的表达式树需要准确的表达运算次序，因此在扫描表达式创建表达式树的过程中，当遇到运算符时不能直接创建结点，而应将其与前面的运算符进行优先级比较，根据比较的结果再进行处理。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先括号&amp;#xff0c;再其他&lt;/p&gt;", "Konwledge_Point": "基本算术", "Question": ["逻辑表达式的基本算法", ["像这样有括号的是不是就先算括号里的，就不能根据！的优先级大于算术运算符来算了？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;发送英文测试一下&lt;/p&gt;", "Konwledge_Point": "基本算术", "Question": ["单片机与sim900a实现发送中文短信不成功的问题", ["\n", "#include<reg52.h>\n#define uchar unsigned char\n#define uint unsigned int\ncode char str1[]=\"AT+CSQ\\r\\n\";\ncode char str2[]=\"AT+CSCS=\\\"UCS2\\\"\\r\\n\";\ncode char str3[]=\"AT+CMGF=1\\r\\n\";\ncode char str4[]=\"AT+CSMP=17,167,2,25\";\ncode char str5[]=\"AT+CMGS=\\\"00310037003800330032003100370032003000380033\\\"\\r\\n\";\ncode char str6[]=\"8B66544AFF0179EF6C348D859650\";\ncode char str7[]=\"AT+CMGD=1\";\nvoid DelaySec(int sec)\n{\n\tuint i,j=0;\n\n\tfor(i=0;i<sec;i++)\n\t{\n\t\tfor(j=0;j<65535;j++)\n\t\t{\t\n\t\t}\n\t}\n}\nvoid uart_init(void)\n{\n\tTMOD=0x20;\n\tSCON=0x40;\n\tTH1=0xfd;\n\tTL1=0xfd;\n\tTR1=1;\n\tES=1;\n\tEA=1;\n}\nvoid sendonebyte(uint c)\n{\n\tES=0;\n\tSBUF=c;\n\twhile(!TI);\n\tTI=0;\n\tES=1;\n}\n\nvoid main(void)\n{\n\tuint i=0;\n\tuart_init();\n\twhile(str1[i]!='\\0')\n\t{\n\t\tsendonebyte(str1[i++]);\n\t}\n\tDelaySec(1);\n\ti=0;\n\t\twhile(str2[i]!='\\0')\n\t{\n\t\tsendonebyte(str2[i++]);\n\t}\n\tDelaySec(1);\n\ti=0;\n\t\twhile(str3[i]!='\\0')\n\t{\n\t\tsendonebyte(str3[i++]);\n\t}\n\tDelaySec(1);\n\ti=0;\n\t\twhile(str4[i]!='\\0')\n\t{\n\t\tsendonebyte(str4[i++]);\n\t}\n\t\tDelaySec(1);\n\ti=0;\n\n\tDelaySec(5);\n\t\twhile(str5[i]!='\\0')\n\t{\n\t\tsendonebyte(str5[i++]);\n\t}\n\t\tDelaySec(1);\n\ti=0;\n\t\twhile(str6[i]!='\\0')\n\t{\n\t\tsendonebyte(str6[i++]);\n\t}\n\t\tDelaySec(1);\n\ti=0;\n\tsendonebyte(0x1A);\n\t\twhile(str7[i]!='\\0')\n\t{\n\t\tsendonebyte(str7[i++]);\n\t}\n\t\tDelaySec(1);\n\ti=0;\t\n\twhile(1);\n\t\n}\nvoid uart_isr(void) interrupt 4\n{\n\tif(RI)\n\t{\n\t\tRI=0;\n\t\t\n\t}\n\telse\n\tTI=0;\n}", "\n\n", "上面是单独写的一个只发中文短信的，语句改成发送英文短信的后经过单片机测试可以发送，但是中文的AT指令就不行了。", "\n\n", "\n", "#include\"SIM900A.h\"\n#include<reg52.h>\ntypedef unsigned char uchar;\ntypedef unsigned int uint;\n//注意，无论接收到信号还是发送完信号，都会进中断服务程序的\n/*初始化程序（必须使用，否则无法收发），次程序将会使用定时器1*/\nvoid SerialInti(void)//初始化程序（必须使用，否则无法收发）\n{\n\tTMOD=0x21;//定时器1操作模式2:8位自动重载定时器\n\tTH1=0xfd;//装入初值，波特率9600\n\tTL1=0xfd;\n\tTR1=1;//打开定时器\n\tSM0=0;//设置串行通讯工作模式，（10为一部发送，波特率可变，由定时器1的溢出率控制）\n\tSM1=1;//(同上)在此模式下，定时器溢出一次就发送一个位的数据\n\tREN=1;//串行接收允许位（要先设置sm0sm1再开串行允许）\n\tEA=1;//开总中断\n\tES=1;//开串行口中断\t\n}\nvoid Uart1BYTE(uchar temp)\n{\n\t\tSBUF=temp;\n\t\twhile(!TI);//等待发送完成信号（TI=1）出现\n\t\tTI=0;\n\n}\n//串行口连续发送char型数组，遇到终止号/0将停止\nvoid Uart1Sends(uchar *str)\n{\n\twhile(*str!='\\0')\n\t{\n\t\twhile(!TI);//等待发送完成信号（TI=1）出现\n\t\tTI=0;\n\t\tstr++;\n\t}\n}\n\n//延时函数大概是1s钟\nvoid DelaySec(int sec)\n{\n\tuint i,j=0;\n\n\tfor(i=0;i<sec;i++)\n\t{\n\t\tfor(j=0;j<65535;j++)\n\t\t{\t\n\t\t}\n\t}\n}\n\n\n\nvoid SIM900A(void)\n{\n\n\n\t\tUart1Sends(\"AT+CSQ\\r\\n\");\n\t\tDelaySec(1);//延时1秒\n\t\tUart1Sends(\"AT+CMGF=1\\r\\n\");//文本模式\n\t\tDelaySec(1);//延时1秒\n\t\tUart1Sends(\"AT+CSMP=17,167,2,25\\r\\n\");//设置在工作模式\n\t\tDelaySec(1);//延时1秒\n\t\tUart1Sends(\"AT+CSCS=\\\"UCS2\\\"\");//UCS2编码字集\n\t\tDelaySec(1);\n\t\tUart1Sends(\"AT+CMGS=\\\"00310037003800330032003100370032003000380033\\\"\");//unicode电话号码\n\t\tDelaySec(3);\n\t\tUart1Sends(\"8B66544AFF0179EF6C348D859650\");//内容unicode码\n\t\tDelaySec(3);//延时3秒\n\t      Uart1BYTE(0x1A);\n}", "\n\n", "这个是另一种，不清楚有没有问题的，反正编译没问题", "\n\n", "但是调用到主程序后（以下是主程序，做的简陋的涵洞积水预警系统）", "\n\n", "\n", "#include\"ds18b20.h\"\n#include\"csb.h\"\n#include\"lcd.h\"\n#include<reg52.h>\n#include\"main.h\"\n#include\"SIM900A.h\"\n\ntypedef unsigned char uchar;\ntypedef unsigned int uint;\n\nuint temp1[3];\nuchar count = 0;\n\n\nuint a1=0,Threshold1=15,Threshold2=20;\n//已用端口p0.0，p0.1，p0.2，p0.3，p0.4，p0.5，p0.6，p0.7，p2.7，p2.6\n//p0.0，p0.1（超声波）p0.2~p0.5（LCD）p2.0-2.3（按键）p0.6（DS18b20）\n\nvoid main(void)\n{\t\n\t\tinitc();//超声波初始化\n\t\tinit(); //lcd初始化\n\t\tSerialInti();\n\t\t\n\t\t\n\twhile(1)\n\t{\n\t\tswitch(P2)\n\t\t{\n\t\tcase 0xfe:{Threshold1=Threshold1+1;display1();break;}\n\t\tcase 0xfd:{Threshold1=Threshold1-1;display1();break;}\n\t\tcase 0xfb:{Threshold2=Threshold2+1;display2();break;}\n\t\tcase 0xf7:{Threshold2=Threshold2-1;display2();break;}\n\t\tdefault:break;\n\t\t}\n\t\twhile(count < 3)\n\t\t{\n\t\t\ttemp1[count]=loop();\n\t\t\tcount++;\t\t\n\t\t}\t\t\t\n\t\ta1 = (uint)(temp1[0] + temp1[1] + temp1[2]) / 3;\n\t\ta1=400-a1;\n\t\tcount = 0;\n\t\tif(a1>Threshold2)\n\t\t{\n\t\t\tSIM900A();\n\t\t\tdisplay();\n\t\t}\n\t\telse if(a1>Threshold1)\n\t\t{\n\t\t\tdisplay();//lcd显示程序\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdisplay();\n\t\t}\n\t\tdelay(3000);\n\t}\n}\t\t\t //0:加，1：减\nvoid Serial_interrupt() interrupt 4//串口中断 \n{\n\tif(RI)\n\tRI=0;//接收中断信号清零，表示将继续接收\n\tif(TI)\n\tTI=0;\n}\n", "\n\n", "就会导致超声波传感器运行异常，lcd也什么都不显示了，只因为调用了SIM900A()这个函数，是不是频繁进入中断影响了超声波传感器的运行？？？", "\n\n", "总之，求大佬给一个SIM900A发送中文短信的正确程序（用的是52单片机），并考虑加到我那个涵洞积水系统也可以正常发中文短信的。", "\n\n", "以下是其他部分的.c和.h程序（怕大佬分析时有需求，特意附上，别因为感觉多就。。。），没加sim900a.c前其他程序已经在单片机跑过了的。", "\n\n", "\n", "#include<reg52.h>\n#include<intrins.h>\n#include\"ds18b20.h\"\n#include\"csb.h\"\n#include\"lcd.h\"\ntypedef unsigned char uchar;\ntypedef unsigned int uint;\n/*定时器0初始化*/\nvoid initc(void)\n{\n\tTMOD=0x21;//，定时器0工作在模式一。00000001\n\tTH0=0;\n\tTL0=0;\n\tET0=1;\t\n\tEA=1;\n\tTR0 = 0;\n}\nvoid trigger(void)    //单片机输入切换电平启动\n{\n\tTRIGGER=0;\n\tTRIGGER=1;\n\t_nop_();_nop_();_nop_();_nop_();\n\t_nop_();_nop_();_nop_();_nop_();\n\t_nop_();_nop_();_nop_();_nop_();\n\t_nop_();_nop_();_nop_();_nop_();\n\tTRIGGER=0;\n\n} \n\nuint get_distance()\n{\n\tuint time = TH0*256+TL0;\n\tfloat distance;\n\tif(read_temperature() <= 10)\n\t{\n\t\tdistance = time * (330.45 * 100) / 2000000; \n\t}\n\telse if(read_temperature() <= 30)\n\t{\n\t\tdistance = time * (342.62 * 100) / 2000000;\n\t}\n\telse\n\t{\n\t\tdistance = time * (354.85 * 100) / 2000000;\n\t}\n\tTH0 = TL0 = 0;\n\treturn (uint)distance;\n}\n\t\nuint loop(void)\n{\n\ttrigger();\n\twhile(!ECH0);\n\tTR0=1;\n\twhile(ECH0);  \n\tTR0=0;\n \tdelay(200);//延时（大于200ms)\n\treturn get_distance();\n}\n\n\n\n\n\n/*超声波*/", "\n\n", "\n", "#include <reg52.h>\n#include \"ds18b20.h\"\n\nvoid delay_18B20(unsigned int i)\n{\n\tfor(;i>0;i--);\n}\n\n\n//DS18B20芯片初始化\nvoid Init_DS18B20(void) \t\n{\n  unsigned char x=0;\n  DQ = 1;          //DQ拉高\n  delay_18B20(8);  //稍作延时\n  DQ = 0;          //DQ拉低\n  delay_18B20(80); //延时大于480us\n  DQ = 1;          //拉高总线\n  delay_18B20(14);\n  x=DQ;            //若x=0初始化成功，若x=1初始化失败\n  delay_18B20(20);\n}\n\n\n//通过单总线向DS18B20写一个字节\nvoid WriteOneChar(unsigned char dat)\n{\n  unsigned char i=0;\n  for (i=8;i>0;i--)\n  {\n   DQ=0;\n   DQ=dat&0x01;\n   if(DQ)\n\t{\n\t\tdelay_18B20(1);\n\t\tDQ=1;\n\t}\n\telse\n\t{\n\t\tdelay_18B20(5);\n\t\tDQ=1;\n\t}\n   dat>>=1;\t //算术右移\n   }\n}\n\n//从DS18B20读取一个字节\nunsigned char ReadOneChar(void) //给DQ 0，1切换信号后便会得到1位的数据反馈到DQ上\n  {\n    unsigned char i=0;\n    unsigned char dat=0;\n    for (i=8;i>0;i--)\n    {\n\t\tDQ=0; //拉低总线\n\t\tdat>>=1;//每读取移位向右移移位\n\t\tDQ=1; //拉高总线\n\t\tif(DQ)\n\t\tdat|=0x80;\t\t  //当DQ为1信号，软件将1赋给那一位\n\t\tdelay_18B20(4);\n    }\n     return(dat);\n  }\n\n\nunsigned char read_temperature(void)\n{\t\t\t\t\t\t\t \n unsigned char a = 0,b = 0,temp = 0;\n Init_DS18B20();\n WriteOneChar(0xCC);  // 跳过读序列号操作\n WriteOneChar(0x44);  // 启动温度转换\n delay_18B20(100);    // \n Init_DS18B20();\n WriteOneChar(0xCC);  //跳过读序列号操作\n WriteOneChar(0xBE);  //读取温度寄存器\n delay_18B20(100);\n a = ReadOneChar();     //读温度低位\n b = ReadOneChar();     //读温度高位\n temp = b;              // 以下部分和你的是一样的\n temp <<= 8;\n temp |= a;\n if(temp < 0x8000)      \n {\n\ttemp = ((b * 256 + a) >> 4);  // 完成的是十六进制转为10进制\t，右移4位去掉小数部分，精度12位\n }\t \n else\n {\n\ttemp = -((b * 256 + a) >> 4);\n }\n return(temp);\n}\n\n\n/*温度传感器*/", "\n\n", "\n", "#include<reg52.h>\n#include<intrins.h>\n#include\"lcd.h\"\n#include\"main.h\"\n#include\"ds18b20.h\"\ntypedef unsigned char uchar;\ntypedef unsigned int uint;                                    \nuchar code hanzi1[]={\"当前积\\xfd水深度为:\"};\nuchar code hanzi2[]={\"谨慎通行!\"};\nuchar code Temp[]={\"温度:\"};\nuchar code Threshold_A[]={\"阈值A:\"};\nuchar code Threshold_B[]={\"阈值B:\"};\nvoid delay(uint y)                                //单位：1ms\n{\tuint z;\n\tuchar x;\n\tfor(z=0;z<y;z++)\n\t{\n\t\tfor(x=0;x<120;x++);\n\t}\n}\nvoid write_command(uchar command_data)                  //写指令\n{\n\tuchar i,temp,temp1,temp2;\n\ttemp=0xf8;\n\tdelay(10);\n\tCS=1;\n\tSCLK=0;\n\tfor(i=0;i<8;i++)\n\t{\n\t\tSID=(bit)(temp&0x80);\n\t\tSCLK=0;\n\t\tSCLK=1;\n\t\ttemp=(temp<<1);\n\t}\t\t\t\t\t\t \t\t\t\t\n\ttemp1=command_data;\n\ttemp1=(temp1&0xf0);\n\tfor(i=0;i<8;i++)\n\t{\n\t\tSID=(bit)(temp1&0x80);\n\t\tSCLK=0;\n\t\tSCLK=1;\n\t\ttemp1=(temp1<<1);\n\t}\n\ttemp2=command_data;\n\ttemp2=(temp2<<4);\n\tfor(i=0;i<8;i++)\n\t{\n\t\tSID=(bit)(temp2&0x80);\n\t\tSCLK=0;\n\t\tSCLK=1;\n\t\ttemp2=(temp2<<1);\n\t}\n\tCS=0;\n}\nvoid write_data(uchar command_data)                      //写数据\n{\n\tuchar temp,temp1,temp2,i;\t\n\ttemp=0xfa;\n\tdelay(10);\n\tCS=1;\n\tfor(i=0;i<8;i++)\t\n\t{\n\t\tSID=(bit)(temp&0x80);\n\t\tSCLK=0;\n\t\tSCLK=1;\n\t\ttemp=(temp<<1);\n\t}\n\ttemp1=command_data;\n\ttemp1=(temp1&0xf0);\n\tfor(i=0;i<8;i++)\n\t{\n\t\tSID=(bit)(temp1&0x80);\n\t\tSCLK=0;\n\t\tSCLK=1;\n\t\ttemp1=(temp1<<1);\n\t}\n\ttemp2=command_data;\n\ttemp2=(temp2<<4);\n\tfor(i=0;i<8;i++)\n\t{\n\t\tSID=(bit)(temp2&0x80);\n\t\tSCLK=0;\n\t\tSCLK=1;\n\t\ttemp2=(temp2<<1);\n\t}\n\tCS=0;\n}\nvoid init(void)                 //初始化\n{\n\tPSB=0;\n\tdelay(100);\n\twrite_command(0x30);      //  功能设置：一次送8位数据，,基本指令集。\n\twrite_command(0x04);      //  点设定：显示字符/光标从左到右移位，DDRAM地址加1。\n\twrite_command(0x0c);      //  显示设定:开显示,关光标，当前关闭反白闪动。\t\t\t\n\twrite_command(0x01);      //  清DDRAM\n\twrite_command(0x02);      //  DDRAM地址归位\n\twrite_command(0x80);      //  把显示地址设为0X80，即为第一行的首位。\t\n}\nvoid display(void)\n{\n\tuchar temp[2];\n\tuchar j,i;\n\tuint temperature=(int)read_temperature();\n\tinit();\n\twrite_command(0x80);                        //第一行显示\n\tfor(j=0;j<16;j++)\n\t{\n\t\twrite_data(hanzi1[j]);\n\t}\n\twrite_command(0x90);\n\twrite_data(a1/100+0x30);\n\twrite_data(a1%100/10+0x30);\n\twrite_data(a1%10+0x30);\n\twrite_data('c');\n\twrite_data('m');\n\tif(a1>Threshold1)\n\t{\n\t\twrite_command(0x88);\n\t\tfor(j=0;j<9;j++)\n\t\t{\n\t\t\twrite_data(hanzi2[j]);\n\t\t}\n\t}\n\twrite_command(0x98);\n\tfor(i=0;i<6;i++)\n\t{\n\t\twrite_data(Temp[i]);   // 显示温度提示\n\t}\n\ttemp[0]=temperature/10+0x30;\n\ttemp[1]=temperature%10+0x30;\n\twrite_command(0x98+5);       // 显示温度值\n\tfor(i=0;i<2;i++)\n\t{\n\t\twrite_data(temp[i]);\n\t}\n}\nvoid display1(void)\n{\n\tuchar i;\n\tinit();\n\twrite_command(0x98);\n\tfor(i=0;i<6;i++)\n\t{\n\t\twrite_data(Threshold_A[i]);\n\t}\n\twrite_data(Threshold1/10+0x30);\n\twrite_data(Threshold1%10+0x30);\n\n}\nvoid display2(void)\n{\n\tuchar i;\n\tinit();\n\twrite_command(0x98);\n\tfor(i=0;i<6;i++)\n\t{\n\t\twrite_data(Threshold_B[i]);\n\t}\t\t\t     \n\twrite_data(Threshold2/10+0x30);\n\twrite_data(Threshold2%10+0x30);\n}\n\n\t/*lcd12864*/", "\n\n", "\n "]], "Tag": "算法设计"}
