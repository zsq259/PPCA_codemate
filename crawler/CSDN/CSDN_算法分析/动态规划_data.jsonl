{"Answer": "动态规划和递归毫无关系，事实上也没有“递归优化”这种说法。\r\n动态规划的思想是将要解决的问题转化为一系列逐步求解的问题并且逐步加以解决。动态规划避免了无意义的穷举，它强调逐步解决问题，让先前解决的结果可以作为后续解决问题的条件避免重复求解相同的问题。\r\n举一个例子，最长公共子序列问题（我曾经解答过，完整代码在这里：http://ask.csdn.net/questions/237208），传统的穷举是那第一个字符串的任意子序列去匹配第二个的任何子序列，比如说比较abc和bcd，abc的所有子串是\r\na\r\nb\r\nc\r\nab\r\nbc\r\nabc\r\n而bcd是\r\nb\r\nc\r\nd\r\nbc\r\ncd\r\nbcd\r\n然后再把它们两两比较，找到b c bc，最后找到最长的bc。这是无意义的穷举。\r\n用动态规划，我们将它们转化为后缀数组，然后排序\r\na\r\nab\r\nabc\r\nb\r\nb-2\r\nbc\r\nbc-2\r\nbcd-2\r\nc-2\r\ncd-2\r\nd-2\r\n注意，因为C语言可以用首地址+长度表示一个字符串，实际上我们并不需要穷举就能得到子串\r\n我们把子串排列起来，自然相邻的字符串才能匹配上。所以只要比较相邻的就可以了。\r\n为什么第二个方法要比第一个方法好，因为第一个方法做了很多重复的事情，如果a和b匹配不上，它和c更匹配不上，但是显然在没有序的集合里匹配，它就是在做重复工作。\r\n\r\n动态规划的过程中局部、整体等都可以采用递归，也可以不用。比如如上算法，其中排序的环节，你就可以用快速排序，它就是一个递归分治的过程。", "Konwledge_Point": "动态规划", "Question": ["动态规划与递归联系。", ["求教各位，以前一直觉得动态规划就是对递归的优化，最近发现并不是。我想请问各位动态规划和递归之间有什么联系吗？还是说动态规划和递归没关系。"]], "Tag": "算法设计"}
{"Answer": "点击链接加入群聊【python技术部落窝】：https://jq.qq.com/?_wv=1027&amp;k=58leovM", "Konwledge_Point": "动态规划", "Question": ["多维资源分配 动态规划  python的代码", ["如题，在写论文，求一个多维资源分配 动态规划的python代码，跪求。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;强化学习中的动态规划和最优控制中的动态规划基本上是相同的概念&amp;#xff0c;两者都是指一类基于值函数、策略等概念的动态规划算法&amp;#xff0c;用于求解最优策略或最优值函数等问题。两者的区别可能在于应用领域和侧重点略有不同&amp;#xff0c;强化学习中的动态规划更多地关注智能体与环境的交互过程&amp;#xff0c;如何通过智能体的决策和环境的反馈来优化策略或值函数等&amp;#xff0c;而最优控制中的动态规划更多地关注系统控制领域&amp;#xff0c;如何通过控制系统的决策和系统反馈来实现优化控制。 关于自适应动态规划的入门&amp;#xff0c;建议首先了解动态规划中的基本概念、算法思路和应用场景等。在学习过程中可以通过参考相关教材、论文和网络课程等途径获取相关知识。以下是入门自适应动态规划时的一些建议&amp;#xff1a; 了解基本概念和算法&amp;#xff1a;包括状态空间、值函数、策略、贝尔曼等基本概念&amp;#xff0c;以及动态规划算法中的策略迭代、值迭代等核心思想和数学工具。 学习自适应动态规划的基本原理和方法&amp;#xff1a;包括自适应系统的基本概念和特点&amp;#xff0c;自适应动态规划中的自适应控制参数、学习率、自适应规划等问题。 理解自适应动态规划在实际应用中的优势和局限&amp;#xff1a;例如在控制系统优化、自主机器人、智能交通等领域中的应用案例和实验结果。 尝试实践和扩展自适应动态规划算法&amp;#xff1a;可以从案例出发&amp;#xff0c;学习基于自适应动态规划算法的控制系统或机器人等系统&amp;#xff0c;通过对算法的本质及应用实例的深入理解&amp;#xff0c;进而深入分析和尝试扩展自适应动态规划算法。同时建议积累相关的编程和数据分析技能&amp;#xff0c;例如 Python 编程和数据可视化等。 值得一提的是&amp;#xff0c;自适应动态规划是一类比较复杂和高级的动态规划算法&amp;#xff0c;需要具备一定的数学建模和数据分析基础&amp;#xff0c;同时也需要花费较多&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["强化学习里的动态规划和最优控制里的动态规划有区别吗？", ["强化学习里的动态规划和最优控制里的动态规划有区别吗？，", "\n\n", "学习自适应动态规划如何入门呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;\nvoid strcpy(int *a, int *b, int Y){\n    for(int i&amp;#61;0;i&amp;lt;&amp;#61;Y;i&amp;#43;&amp;#43;) *(a&amp;#43;i) &amp;#61; *(b&amp;#43;i);\n}\nvoid solve(){\n        int n; scanf(&amp;#34;%d&amp;#34;,&amp;amp;n);\n        int type[n], weight[n], Y, i, j, k;\n        for(i&amp;#61;0;i&amp;lt;n;i&amp;#43;&amp;#43;) scanf(&amp;#34;%d&amp;#34;,&amp;amp;type[i]);\n        for(i&amp;#61;0;i&amp;lt;n;i&amp;#43;&amp;#43;) scanf(&amp;#34;%d&amp;#34;,&amp;amp;weight[i]);\n        scanf(&amp;#34;%d&amp;#34;,&amp;amp;Y);\n        int Min[Y&amp;#43;1], Min_Path[Y&amp;#43;1], path[n][Y&amp;#43;1];\n        for(i&amp;#61;0;i&amp;lt;&amp;#61;Y;i&amp;#43;&amp;#43;) Min[i] &amp;#61; 9999;\n        Min[0] &amp;#61; 0;\n        printf(&amp;#34;\\n&amp;#34;);\n        for(j&amp;#61;0;j&amp;lt;n;j&amp;#43;&amp;#43;){\n            for(i&amp;#61;type[j]; i&amp;lt;&amp;#61;Y; i&amp;#43;&amp;#43;)\n                if(Min[i] &amp;gt; Min[i-type[j]]&amp;#43;weight[j]){\n                    Min_Path[i] &amp;#61; type[j];\n                    Min[i] &amp;#61; Min[i-type[j]]&amp;#43;weight[j];\n                }\n            for(k&amp;#61;1;k&amp;lt;&amp;#61;Y;k&amp;#43;&amp;#43;) printf(&amp;#34;%-3d&amp;#34;,Min[k]);\n            printf(&amp;#34;\\n&amp;#34;);\n            strcpy(path[j],Min_Path,Y);\n        }\n\n        printf(&amp;#34;\\n&amp;#34;);\n        for(i&amp;#61;0;i&amp;lt;n;i&amp;#43;&amp;#43;){\n            for(j&amp;#61;1;j&amp;lt;&amp;#61;Y;j&amp;#43;&amp;#43;)\n                printf(&amp;#34;%-3d&amp;#34;,path[i][j]);\n            printf(&amp;#34;\\n&amp;#34;);\n        }\n\n        int y&amp;#61;Y;\n        printf(&amp;#34;\\n支付方式:&amp;#34;);\n        while (y){\n            printf(&amp;#34;%d &amp;#34;,Min_Path[y]);\n            y -&amp;#61; Min_Path[y];\n        }\n        printf(&amp;#34;\\n总重量:%d\\n&amp;#34;,Min[Y]);\n}\nint main(){\n    solve();\n    return 1;\n}\n/*\n4\n1 4 6 8\n1 3 2 6\n12\n */&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p style=\"text-align:center\"&gt;&lt;img alt=\"\" height=\"492\" src=\"https://img-ask.csdnimg.cn/upload/1619149096414.png\" width=\"449\" /&gt;&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划-硬币重量最轻问题", ["    设有n种不同面值的硬币，第i种硬币的币值是Vi(其中V1=1),重量是Wi,i=1,2，...n且现在购买某种总币值为y的商品，需要用这些硬币付款，如果每种钱币使用的个数不限，那么如何选择付款的方法使得付出钱币的总重量最轻？使用动态规划设计策略设计一个求解该问题的算法。假设问题的输入实例是：", "\n\n", "     V1=1， V2=4， V3=6， V4=8", "\n\n", "     W1=1， W2=2，W3=4，W4=6", "\n\n", "     Y=12", "\n\n", "要求输出优化函数表和标记函数表、以及硬币支付方式。", "\n\n", "最好用C语言"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;理解图&lt;br /&gt;&lt;img title=\"image.png\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/625479045926181.png\" /&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划c++编程题：铺砖", ["我好像见过类似的题，但只有一种砖，这有两种砖；", "求思路即可；（毕竟动归一般只需要一个状态转移方程吧？）", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;#include&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;br /&gt;using namespace std;&lt;br /&gt;const int MAX_N &amp;#61; 10010;&lt;br /&gt;int Num[MAX_N][2];&lt;/p&gt;\n&lt;p&gt;int Sum[MAX_N][MAX_N];&lt;br /&gt;int N, X;&lt;br /&gt;int main()&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; X;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for (int i &amp;#61; 1; i &amp;lt;&amp;#61; N; i&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        cin &amp;gt;&amp;gt; Num[i][0] &amp;gt;&amp;gt; Num[i][1];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    Sum[0][0] &amp;#61; 1;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for (int i &amp;#61; 1; i &amp;lt;&amp;#61; N; i&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        for (int j &amp;#61; 0; j &amp;lt;&amp;#61; X; j&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            if (Sum[i - 1][j])&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                Sum[i][j &amp;#43; Num[i][0]] &amp;#61; Sum[i][j &amp;#43; Num[i][1]] &amp;#61; 1;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    if (Sum[N][X]&amp;#61;&amp;#61;1)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        cout &amp;lt;&amp;lt; &amp;#34;Yes&amp;#34; &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    else&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        cout &amp;lt;&amp;lt; &amp;#34;No&amp;#34; &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;}&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划跳跃问题c++", ["（用动态规划，c++实现）", "小明在数轴上的坐标 0 处。现在小明将进行N次跳跃。第i次朝数轴正方向跳ai或bi个单位。请你判断跳N次以后他能否停留在坐标X", "\n", "输入描述", "\n", "第一行输入N和X，接下来N行输入ai和bi，其中", "1≤i≤N", "1≤ai,bi≤100", "1≤X≤10000", "\n", "输出描述", "\n", "如果能在 N 次跳跃后到达位置 X，则输出 Yes，否则输出 No。", "\n", "用例输入 ", "\n", "2 10", "3 6", "4 5", "\n", "用例输出 ", "\n", "Yes"]], "Tag": "算法设计"}
{"Answer": "动态规划严格说不是算法，而是思路。就是求出一个中间的结果，再用它作为下次求解的条件，从而避免重复的运算（相比较穷举和遍历），提高性能。\r\n动态规划不一定是递归的，反之也不一定。", "Konwledge_Point": "动态规划", "Question": ["一个大一小白，想问动态规划是干嘛的", ["C语言老师给了好多个课题让我们自己去学然后上讲台讲给同听。我负责动态规划，但不知道动态规划是干嘛的，知道涉及到递归"]], "Tag": "算法设计"}
{"Answer": "&lt;h1 id=\"h1_报错_1661228630664\"&gt;报错&lt;/h1&gt;\n&lt;p&gt;原因在于你没开启C&amp;#43;&amp;#43;11&amp;#xff0c;如果是DEV这里可以开启&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/98844482216612.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;如果不是dev&amp;#xff0c;那么就去百度一下你的IDE如何开启C&amp;#43;&amp;#43;11&lt;/p&gt;\n&lt;p&gt;开启后就没有error了&amp;#xff0c;只有warning&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/409255822166131.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["#动态规划#的问题，如何解决？", ["动态规划", "\n", "\n#include<bits/stdc++.h>\n#include<iostream>\n\nusing namespace std;\nconst int ", "N", "=", "11", ",", "M", "=", "28", ",inf=", "0x3f3f3f", ",", "Day", "=", "30", ";\nint dp[", "32", "][", "N", "+", "1", "][", "405", "][", "605", "],zd,qd,", "FZ", ";\nint cost_water,cost_food,walk,dig,buy;\nint xh_water[", "3", "]= {", "5", ",", "8", ",", "10", "},xh_food[", "3", "]= {", "7", ",", "6", ",", "10", "};//不同天气条件基础消耗\nbool cz[", "N", "+", "1", "],ks[", "N", "+", "1", "];\n\nstruct node\n{\n    short day; // 天数\n    short from; // 持续天数\n    int water,food;\n    int money;\n    bool operator!=(const node &x)\n    {\n        return x.day!=day || x.from!=from || x.water!=water || x.food!=food ;\n    };\n} path[", "31", "][", "N", "+", "1", "][", "405", "][", "605", "],lastpath;\nint  weather[", "31", "]=\n    {", "-1", ",", "1", ",", "1", ",", "0", ",", "2", ",", "0", ",", "1", ",", "2", ",", "0", ",", "1", ",", "1", ",\n        ", "2", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "1", ",", "1", ",\n        ", "0", ",", "0", ",", "1", ",", "0", ",", "2", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", "\n    };//", "30", "天的天气条件情况“", "1", "”代表高温，“", "0", "”代表晴朗，“", "2", "”代表沙暴\n\nvector <int> g[", "N", "];\nmap <int,int> mp;\nvoid push_back(int x,int y)\n{\n    g[x].push_back(y);\n    g[y].push_back(x);\n}\n\nvoid build_map()\n{\n    push_back(", "1", ",", "2", ");//从哪走到哪\n    push_back(", "2", ",", "3", ");\n    push_back(", "2", ",", "5", ");\n    push_back(", "5", ",", "6", ");\n    push_back(", "3", ",", "4", ");\n    push_back(", "4", ",", "7", ");\n    push_back(", "6", ",", "7", ");\n    push_back(", "7", ",", "8", ");\n    push_back(", "8", ",", "9", ");\n    push_back(", "9", ",", "10", ");\n    push_back(", "10", ",", "11", ");\n\n    mp[", "1", "]=", "1", ";//走哪\n    mp[", "2", "]=", "25", ";\n    mp[", "3", "]=", "26", ";\n    mp[", "4", "]=", "27", ";\n    mp[", "5", "]=", "24", ";\n    mp[", "6", "]=", "23", ";\n    mp[", "7", "]=", "21", ";\n    mp[", "8", "]=", "9", ";\n    mp[", "9", "]=", "15", ";\n    mp[", "10", "]=", "14", ";\n    mp[", "11", "]=", "12", ";\n    for(int i=", "1", "; i<=", "N", "; i++)\n    {\n        cz[i]=", "0", ";\n        ks[i]=", "0", ";\n    }\n    cz[", "9", "]=", "1", ";\n    ks[", "11", "]=", "1", ";\n    zd=", "4", ";\n    qd=", "1", ";\n\n    return ;\n}\nvoid init()\n{\n    memset(dp,-inf,sizeof(dp));\n    ", "FZ", "=", "1200", ";\n    cost_water=", "5", ";\n    cost_food=", "10", ";\n\n    walk=", "2", ";\n    buy=", "2", ";\n    dig=", "3", ";\n\n\n    for(int k=", "0", "; k<=", "405", "; k++)\n    {\n        for(int l=", "0", "; l<=", "601", "; l++)\n        {\n            if(k*", "3", "+l*", "2", "<=", "FZ", ")\n            {\n                dp[", "0", "][qd][k][l]=", "10000", "-k*cost_water-l*cost_food;\n            }\n        }\n    }\n    printf(", "\"init %d\\n\"", ",dp[", "0", "][", "1", "][", "178", "][", "333", "]);\n    path[", "0", "][", "1", "][", "0", "][", "0", "]= {", "0", ",", "0", ",", "0", ",", "0", "};\n    return ;\n}\nint main()\n{\n\n\n    build_map();\n    init();\n    for(int i=", "0", "; i<", "Day", "; i++)\n    {\n        printf(", "\"第%d天\\n\"", ",i);\n        int tq=weather[i];\n        for(int j=", "1", "; j<=", "N", "; j++)\n        {\n            if(cz[j])// 村庄\n            {\n                for(int w=", "0", "; w<=", "405", "; w++)\n                {\n                    for(int f=", "0", "; w*", "3", "+f*", "2", "<=", "1200", "; f++)\n                    {\n                        //购买或不够买物资(ww=", "0", ",ff=", "0", "就是不购买)\n                        if(tq==", "2", ") //停留\n                        {\n                            int money=dp[i][j][w][f];\n                            for(int ww=", "0", "; ww<=money/cost_water; ww++)\n                            {\n                                for(int ff=", "0", "; ff<=(", "FZ", "-(w+ww)*", "3", ")/", "2", "-f; ff++)\n                                {\n\n                                    if(w+ww-xh_water[tq]>=", "0", "&&f+ff-xh_food[tq]>=", "0", "&&dp[i][j][w][f]", "-2", "*ww*cost_water", "-2", "*ff*cost_food>=", "0", ")\n                                    {\n                                        if(dp[i+", "1", "][j][w+ww-xh_water[tq]][f+ff-xh_food[tq]]<dp[i][j][w][f]", "-2", "*ww*cost_water", "-2", "*ff*cost_food)\n                                        {\n                                            dp[i+", "1", "][j][w+ww-xh_water[tq]][f+ff-xh_food[tq]]=dp[i][j][w][f]", "-2", "*ww*cost_water", "-2", "*ff*cost_food;\n                                            path[i+", "1", "][j][w+ww-xh_water[tq]][f+ff-xh_food[tq]]= {i,j,w,f,dp[i][j][w][f]", "-2", "*ww*cost_water", "-2", "*ff*cost_food};\n                                        }\n                                    }\n\n                                }\n                            }\n                        }\n                        else //从j走到jj\n                        {\n                            for(auto jj :g[j])\n                            {\n                                int money=dp[i][j][w][f];\n                                for(int ww=", "0", "; ww<=money/cost_water; ww++)\n                                {\n                                    for(int ff=", "0", "; ff<=(", "FZ", "-(w+ww)*", "3", ")/", "2", "-f; ff++)\n                                    {\n                                        if(w+ww-walk*xh_water[tq]>=", "0", "&&f+ff-walk*xh_food[tq]>=", "0", "&&dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food>=", "0", ")\n                                        {\n                                            if(dp[i+", "1", "][jj][w+ww-walk*xh_water[tq]][f+ff-walk*xh_food[tq]]<dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food)\n                                            {\n                                                dp[i+", "1", "][jj][w+ww-walk*xh_water[tq]][f+ff-walk*xh_food[tq]]=dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food;\n                                                path[i+", "1", "][jj][w+ww-walk*xh_water[tq]][f+ff-walk*xh_food[tq]]= {i,j,w,f,dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food};\n                                            }\n\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else if (ks[j])// 矿山\n            {\n                for(int w=", "0", "; w<=", "405", "; w++)\n                {\n                    for(int f=", "0", "; w*", "3", "+f*", "2", "<=", "1200", "; f++)\n                    {\n                        // 已经停留一天了，可以挖矿\n                        if(w-dig*xh_water[tq]>=", "0", "&&f-dig*xh_food[tq]>=", "0", ")\n                        {\n                            if(dp[i+", "1", "][j][w-dig*xh_water[tq]][f-dig*xh_food[tq]]<dp[i][j][w][f]+", "1000", "&&dp[i][j][w][f]>=", "0", ")\n                            {\n                                dp[i+", "1", "][j][w-dig*xh_water[tq]][f-dig*xh_food[tq]]=dp[i][j][w][f]+", "1000", ";\n                                path[i+", "1", "][j][w-dig*xh_water[tq]][f-dig*xh_food[tq]]= {i,j,w,f,dp[i][j][w][f]+", "1000", "};\n                            }\n\n                        }\n                        // 在矿山不挖矿或 不允许挖矿\n                        if(tq==", "2", ") //停留但不挖矿\n                        {\n                            if(w-xh_water[tq]>=", "0", "&&f-xh_food[tq]>=", "0", ")\n                            {\n                                if(dp[i+", "1", "][j][w-xh_water[tq]][f-xh_food[tq]]<dp[i][j][w][f]&&dp[i][j][w][f]>=", "0", ")\n                                {\n\n                                    dp[i+", "1", "][j][w-xh_water[tq]][f-xh_food[tq]]=dp[i][j][w][f];\n                                    path[i+", "1", "][j][w-xh_water[tq]][f-xh_food[tq]]= {i,j,w,f,dp[i][j][w][f]};\n                                }\n\n                            }\n                        }\n                        else\n                        {\n                            if(w-walk*xh_water[tq]>=", "0", "&&f-walk*xh_food[tq]>=", "0", ")\n                            {\n                                for(auto jj:g[j])\n                                {\n                                    if(dp[i+", "1", "][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]<dp[i][j][w][f]&&dp[i][j][w][f]>=", "0", ")\n                                    {\n                                        dp[i+", "1", "][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=dp[i][j][w][f];\n                                        path[i+", "1", "][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]= {i,j,w,f,dp[i][j][w][f]};\n                                    }\n\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else //普通区\n            {\n                for(int w=", "0", "; w<=", "405", "; w++)\n                {\n                    for(int f=", "0", "; w*", "3", "+f*", "2", "<=", "1200", "; f++)\n                    {\n                        if(tq==", "2", ") //在j点停留\n                        {\n                            if(w-xh_water[tq]>=", "0", "&&f-xh_food[tq]>=", "0", "&&dp[i][j][w][f]>=", "0", ")\n                            {\n                                if(dp[i+", "1", "][j][w-xh_water[tq]][f-xh_food[tq]]<dp[i][j][w][f])\n                                {\n                                    dp[i+", "1", "][j][w-xh_water[tq]][f-xh_food[tq]]=dp[i][j][w][f];\n                                    path[i+", "1", "][j][w-xh_water[tq]][f-xh_food[tq]]= {i,j,w,f,dp[i][j][w][f]};\n                                }\n                            }\n                        }\n                        else// 走到jj点\n                        {\n                            for(auto jj :g[j])\n                            {\n                                if(w-walk*xh_water[tq]>=", "0", "&&f-walk*xh_food[tq]>=", "0", "&&dp[i][j][w][f]>=", "0", ")\n                                {\n                                    if(dp[i+", "1", "][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]<dp[i][j][w][f])\n                                    {\n\n                                        dp[i+", "1", "][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=dp[i][j][w][f];\n                                        path[i+", "1", "][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]= {i,j,w,f,dp[i][j][w][f]};\n\n                                    }\n\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    int ans=-inf;\n    node lastpath;\n    int last_water=", "0", ",last_food=", "0", ",last_day=", "Day", ";\n    for(int i=", "0", "; i<=", "Day", "; i++)\n    {\n        for(int w=", "0", "; w<=", "405", "; w++)\n            for(int f=", "0", "; w*", "3", "+", "2", "*f<=", "1200", "; f++)\n            {\n                if(dp[i][zd][w][f]>ans)\n                {\n                    ans=dp[i][zd][w][f];\n                    lastpath=path[i][zd][w][f];\n                    last_water=w;\n                    last_food=f;\n                    last_day=i;\n                }\n            }\n    }\n    stack<node> s;\n    stack<int> my;\n    printf(", "\"天数:%d 天气:%d %d 水:%d 食物:%d 资金:%d\\n\"", ",last_day,weather[", "Day", "],zd,last_water,last_food,ans);\n    s.push((node)\n    {\n        last_day,zd,last_water,last_food,ans\n    });\n\n\n    while(lastpath!=path[", "0", "][", "1", "][", "0", "][", "0", "])\n    {\n        s.push(lastpath);\n        printf(", "\"天数:%d 天气:%d %d 天气:%d 食物:%d 资金:%d\\n\"", ",lastpath.day,weather[lastpath.day],mp[lastpath.from],lastpath.water,lastpath.food,lastpath.money);\n        my.push(lastpath.money);\n        lastpath=path[lastpath.day][lastpath.from][lastpath.water][lastpath.food];\n    }\n    freopen(", "\"output.txt\"", ",", "\"w\"", ",stdout);\n    my.push(my.top());\n    while (!s.empty())\n    {\n        node t=s.top();\n        int money=my.top();\n        printf(", "\"天数:%d 天气:%d 获得资金:%d 水:%d 食物:%d 资金:%d\\n\"", ",t.day,weather[t.day],mp[t.from],t.water,t.food,money);\n        s.pop();\n        my.pop();\n    }\n    printf(", "\"%d\\n\"", ",ans);\n    return ", "0", ";\n}\n\n\n", "\n", "\n", "运行结果及报错内容", "\n", "\n", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|140|error: 'jj' does not name a type|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|159|error: expected ';' before '}' token|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|159|error: expected primary-expression before '}' token|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|159|error: expected ';' before '}' token|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|159|error: expected primary-expression before '}' token|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|159|error: expected ')' before '}' token|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|159|error: expected primary-expression before '}' token|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|159|error: expected ';' before '}' token|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|175|warning: extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by default]|", "\n"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/weixin_39778570/article/details/87095270", "Konwledge_Point": "动态规划", "Question": ["多维资源动态规划 Matlab求解", []], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/nan81962325/article/details/80202508", "Konwledge_Point": "动态规划", "Question": ["算法【动态规划类型的问题】", ["对一棵树进行着色，每个结点可着黑色或白色，相邻结点不能着相同黑色，但可着相同白色，令树的根为r，请设计一种算法对树中尽量多的节点着黑色", "\n\n", "不需要写代码啦，希望有大神给一个思路"]], "Tag": "算法设计"}
{"Answer": "[b]一个线性规划的问题[/b]\r\n\r\n设总吨数:K \r\n设22顿车辆数为：x\r\n设29顿车辆数为：y\r\n设32顿车辆数为：m\r\n设40顿车辆数为：n\r\n\r\n列方程：\r\n\r\nx+y+m+n &lt;=21;\r\n22x+29y+32m+40n &gt;= K；\r\nx , y,m ,n 为正整数\r\nx&gt;0\r\ny&gt;0\r\nm&gt;0\r\nn&gt;0\r\n\r\n\r\n求x+y+m+n的最优解（当x+y+m+n相等时，取22x+29y+32m+40n最小的x,y,m,n）\r\n==============================\r\n条件太小，只能从1开始，用穷举法。", "Konwledge_Point": "动态规划", "Question": ["关于一个动态规划的问题", ["问题描述：现有21辆车，其中载重22吨的有2台、29吨的有6台、32吨的有7台、40吨的有6台，求最佳车辆分配方案。", "\n输入:总吨数", "\n输出：车辆分配方案 需要的车辆最少（车辆载重量最低也是一个评价因素，当需要的车辆数目相同时，载重量低的车辆为最优解）为最优解", "\n\n", "示例：", "\n输入： 101", "\n输出： 29吨一台 32吨一台 40吨一台", "\n\n", "求算法描述...."]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;对&amp;#xff0c;不装入第i件物品和装入第i件物品&amp;#xff08;前提是能装下&amp;#xff09;进行比较价值哪个更大&lt;br /&gt;这个讲动态规划很全面&lt;a href=\"https://zhuanlan.zhihu.com/p/93857890\" id=\"textarea_1634011914188_1634012084777_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;动态规划之背包问题系列 - 知乎&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;背包问题是一类经典的动态规划问题&amp;#xff0c;它非常灵活&amp;#xff0c;需要仔细琢磨体会&amp;#xff0c;本文先对背包问题的几种常见类型作一个总结&amp;#xff0c;然后再看看LeetCode上几个相关题目。 本文首发于我的博客&amp;#xff0c;传送门根据 维基百科&amp;#xff0c;背包问题&amp;#xff08;Knapsa…&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://static.zhihu.com/heifetz/favicon.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://zhuanlan.zhihu.com/p/93857890&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划问题的个人理解", ["假设背包的容量无穷大,那么说到我加入(i+1)件物品肯定比i件物品的价值大,但是实际情况背包的容量是有限的。可不可以理解为当每多一件物品,新物品+前面剩余价值最大值组合 和 旧物品的最大排列组合相对比,留下最大值"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;O(n^2)&lt;br /&gt;很明显&amp;#xff0c;两层循环&lt;br /&gt;第一层平方级别&lt;br /&gt;第二层常数级别&lt;br /&gt;所以是平方级别&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划求一下这个时间复杂度", [" for(int i=1; i<=n*m; i++)", "            for(int j=0; j<=14; j++)", "            {", "                if(j==0)//只有一种情况，由dp[i-1][j+5]+b[i]的情况也就是上一段有5的气然后用掉了", "                    dp[i][j]=dp[i-1][j+5]+b[i];", "                else if(j<10)//有两种情况，1，由上一段直接跑过来，2，由上一段消耗一张加速卡跑过来；", "                    dp[i][j]=min(dp[i-1][j-1]+a[i],dp[i-1][j+5]+b[i]);", "                else if(j==10)//有两种情况，1，由上一段直接跑过来，2，由上一段的14+1变成10跑过来；", "                    dp[i][j]=min(dp[i-1][j-1]+a[i],dp[i-1][14]+a[i]);", "                else if(j>10)//只有一种情况，由上一段路直接跑过来；", "                    dp[i][j]=dp[i-1][j-1]+a[i];", "            }"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;将单独赋值的m放到第一个后&amp;#xff0c;req就不会报错了&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["lingo动态规划求生产计划", ["lingo求解出现问题，不知为何，代码如下", "\n", "sets:\npart/", "1.", ".7", "/:set,hold,a;\ntime/", "1.", ".6", "/:capacity;\nuses(part,part):req;\npxt(part,time):demand,x,y,inv;\nendsets\n\ndata:\ndemand = ", "40", " ", "0", " ", "100", " ", "0", " ", "90", " ", "10", "\n          ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n          ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n          ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n          ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n          ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n          ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", ";\ncapacity = ", "10000", " ", "0", " ", "5000", " ", "5000", " ", "1000", " ", "1000", ";\nset = ", "400", " ", "500", " ", "1000", " ", "300", " ", "200", " ", "400", " ", "100", ";\nhold = ", "12", " ", "0.6", " ", "1.0", " ", "0.04", " ", "0.03", " ", "0.04", " ", "0.04", ";\na = ", "0", " ", "5", " ", "8", " ", "0", " ", "0", " ", "0", " ", "0", ";\nreq = ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n      ", "5", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n      ", "7", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n      ", "0", " ", "9", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n      ", "0", " ", "11", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n      ", "0", " ", "13", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n      ", "0", " ", "0", " ", "15", " ", "0", " ", "0", " ", "0", " ", "0", ";\nM = ", "25000", ";\n", "enddata", "\n\n", "min", " ", "=", " ", "@sum(pxt(i,j):set(i)*y(i,j)+hold(i)*inv(i,j))", ";\n\n", "@for(pxt(i,j): @if(j#eq#1,0,inv(i,j-1))+x(i,j)-inv(i,j)=\n                        demand(i,j)+@sum(part(k):req(i,k)*x(k,j)))", ";\n", "@for(time(j):@sum(part(i):a(i)*x(i,j))<capacity(j))", ";\n\n", "@for(pxt:X<=M*y;@bin(y))", ";\n\n", "\n", "出现以下问题", "\n", "[Error Code:   ", "29", "]\n\n  Invalid ", "number", " of initialization ", "values", " in ", "a", " DATA/INIT/CALC\n  statement.  The required ", "number", " of ", "values", " ", "is", ":          ", "42", ".\n\n     ", "14", "]            ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n                            ^\n\n", "\n", "感谢大家指导！谢谢"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/qq_40379678/article/details/82955119", "Konwledge_Point": "动态规划", "Question": ["这个动态规划的问题有点难，用C语言实现", ["Problem Description", "\nMr Cheng is a collector of old Chinese porcelain, more specifically late 15th century Feng dynasty vases. The art of vase-making at this time followed very strict artistic rules. There was a limited number of accepted styles, each defined by its shape and decoration. More specifically, there were 36 vase shapes and 36 different patterns of decoration – in all 1296 different styles.", "\n\n", "For a collector, the obvious goal is to own a sample of each of the 1296 styles. Mr Cheng however, like so many other collectors, could never afford a complete collection, and instead concentrates on some shapes and some decorations. As symmetry between shape and decoration was one of the", "\nmain aestheathical paradigms of the Feng dynasty, Mr Cheng wants to have a full collection of all combinations of k shapes and k decorations, for as large a k as possible. However, he has discovered that determining this k for a given collection is not always trivial. This means that his collection might actually be better than he thinks. Can you help him?", "\n\n", "Input", "\nOn the first line of the input, there is a single positive integer n, telling the number of test scenarios to follow. Each test scenario begins with a line containing a single positive integer m <=100 , the number of vases in the collection. Then follow m lines, one per vase, each with a pair of numbers, si and di, separated by a single space, where si ( 0 < i <= 36 ) indicates the shape of Mr Cheng's i:th vase, and di ( 0 < i <=36 ) indicates its decoration.", "\n\n", "Output", "\nFor each test scenario, output one line containing the maximum k, such that there are k shapes and k decorations for which Mr Cheng's collection contains all k*k combined styles.", "\n\n", "Sample Input", "\n2", "\n5", "\n11 13", "\n23 5", "\n17 36", "\n11 5", "\n23 13", "\n2", "\n23 15", "\n15 23", "\n\n", "Sample Output", "\n2", "\n1"]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/tonghao/p/4802967.html", "Konwledge_Point": "动态规划", "Question": ["这个问题用动态规划的算法可以怎么实现的呢？", ["Problem Description", "\nYou are given N baskets of gold coins. The baskets are numbered from 1 to N. In all except one of the baskets, each gold coin weighs w grams. In the one exceptional basket, each gold coin weighs w-d grams. A wizard appears on the scene and takes 1 coin from Basket 1, 2 coins from Basket 2, and so on, up to and including N-1 coins from Basket N-1. He does not take any coins from Basket N. He weighs the selected coins and concludes which of the N baskets contains the lighter coins. Your mission is to emulate the wizard's computation.", "\n\n", "Input", "\nThe input file will consist of one or more lines; each line will contain data for one instance of the problem. More specifically, each line will contain four positive integers, separated by one blank space. The first three integers are, respectively, the numbers N, w, and d, as described above. The fourth integer is the result of weighing the selected coins.", "\n\n", "N will be at least 2 and not more than 8000. The value of w will be at most 30. The value of d will be less than w.", "\n\n", "Output", "\nFor each instance of the problem, your program will produce one line of output, consisting of one positive integer: the number of the basket that contains lighter coins than the other baskets.", "\n\n", "Sample Input", "\n10 25 8 1109", "\n10 25 8 1045", "\n8000 30 12 959879400", "\n\n", "Sample Output", "\n2", "\n10", "\n50"]], "Tag": "算法设计"}
{"Answer": "http://www.2cto.com/kf/201504/390807.html", "Konwledge_Point": "动态规划", "Question": ["Balance 天平问题，用动态规划", ["Description", "\n\n", "Gigel has a strange \"balance\" and he wants to poise it. Actually, the device is different from any other ordinary balance. ", "\nIt orders two arms of negligible weight and each arm's length is 15. Some hooks are attached to these arms and Gigel wants to hang up some weights from his collection of G weights (1 <= G <= 20) knowing that these weights have distinct values in the range 1..25. Gigel may droop any weight of any hook but he is forced to use all the weights. ", "\nFinally, Gigel managed to balance the device using the experience he gained at the National Olympiad in Informatics. Now he would like to know in how many ways the device can be balanced. ", "\n\n", "Knowing the repartition of the hooks and the set of the weights write a program that calculates the number of possibilities to balance the device. ", "\nIt is guaranteed that will exist at least one solution for each test case at the evaluation. ", "\nInput", "\n\n", "The input has the following structure: ", "\n? the first line contains the number C (2 <= C <= 20) and the number G (2 <= G <= 20); ", "\n? the next line contains C integer numbers (these numbers are also distinct and sorted in ascending order) in the range -15..15 representing the repartition of the hooks; each number represents the position relative to the center of the balance on the X axis (when no weights are attached the device is balanced and lined up to the X axis; the absolute value of the distances represents the distance between the hook and the balance center and the sign of the numbers determines the arm of the balance to which the hook is attached: '-' for the left arm and '+' for the right arm); ", "\n? on the next line there are G natural, distinct and sorted in ascending order numbers in the range 1..25 representing the weights' values. ", "\nOutput", "\n\n", "The output contains the number M representing the number of possibilities to poise the balance.", "\nSample Input", "\n\n", "2 4 ", "\n-2 3 ", "\n3 4 5 8", "\nSample Output", "\n\n", "2"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/hnust_xiehonghao/article/details/7911575", "Konwledge_Point": "动态规划", "Question": ["这个问题用线段数还是用动态规划？回溯算法怎么实现？", ["Problem Description", "\n\n", "In the year 8888, the Earth is ruled by the PPF Empire . As the population growing , PPF needs to find more land for the newborns . Finally , PPF decides to attack Kscinow who ruling the Mars . Here the problem comes! How can the soldiers reach the Mars ? PPF convokes his soldiers and asks for their suggestions . “Rush … ” one soldier answers. “Shut up ! Do I have to remind you that there isn’t any road to the Mars from here!” PPF replies. “Fly !” another answers. PPF smiles :“Clever guy ! Although we haven’t got wings , I can buy some magic broomsticks from HARRY POTTER to help you .” Now , it’s time to learn to fly on a broomstick ! we assume that one soldier has one level number indicating his degree. The soldier who has a higher level could teach the lower , that is to say the former’s level > the latter’s . But the lower can’t teach the higher. One soldier can have only one teacher at most , certainly , having no teacher is also legal. Similarly one soldier can have only one student at most while having no student is also possible. Teacher can teach his student on the same broomstick .Certainly , all the soldier must have practiced on the broomstick before they fly to the Mars! Magic broomstick is expensive !So , can you help PPF to calculate the minimum number of the broomstick needed .", "\nFor example : ", "\nThere are 5 soldiers (A B C D E)with level numbers : 2 4 5 6 4;", "\nOne method :", "\nC could teach B; B could teach A; So , A B C are eligible to study on the same broomstick.", "\nD could teach E;So D E are eligible to study on the same broomstick;", "\nUsing this method , we need 2 broomsticks.", "\nAnother method:", "\nD could teach A; So A D are eligible to study on the same broomstick.", "\nC could teach B; So B C are eligible to study on the same broomstick.", "\nE with no teacher or student are eligible to study on one broomstick.", "\nUsing the method ,we need 3 broomsticks.", "\n……", "\n\n", "After checking up all possible method, we found that 2 is the minimum number of broomsticks needed. ", "\n\n", "Input", "\nInput file contains multiple test cases. ", "\nIn a test case,the first line contains a single positive number N indicating the number of soldiers.(0<=N<=3000)", "\nNext N lines :There is only one nonnegative integer on each line , indicating the level number for each soldier.( less than 30 digits);", "\n\n", "Output", "\nFor each case, output the minimum number of broomsticks on a single line.", "\n\n", "Sample Input", "\n4", "\n10", "\n20", "\n30", "\n04", "\n5", "\n2", "\n3", "\n4", "\n3", "\n4", "\n\n", "Sample Output", "\n1", "\n2"]], "Tag": "算法设计"}
{"Answer": "http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=2944", "Konwledge_Point": "动态规划", "Question": ["字母猜谜问题，用动态规划算法怎么解决？", ["Problem Description", "\nAnna Graham is a puzzle maker who prides herself in the quality and complexity of her work. She makes puzzles of all kinds - crosswords, logic problems, acrostics, and word search puzzles, to name but a few. For each puzzle, she has developed a set of rules which she constrains herself to follow. For word search puzzles, she insists not only that all the words be connected to one another (as in most word search puzzles), but also that removing any word from the word list will not cause one or more words to become disconnected from the rest. (Two words are connected if they contain a common letter in the grid.) The example word search puzzle on the left satisfies this condition, but the one on the right does not (removing the word Pascal from the word list disconnects Java from the other two words).", "\nYour job is to write a program that checks to see if Anna’s word search problems are up to snuff.", "\n\n", "Input", "\nInput will consist of multiple test cases. The first line of each test case contains 3 integers n m l, where n and m are the number of rows and columns in the puzzle and l is the number of words. Following this are n lines containing m uppercase characters each (the puzzle) followed by l lines containing one word each (the word list, in mixed case). Each word in the word list will appear in the puzzle exactly once. There will be no more than 100 rows and 100 columns in the puzzle and no more than 100 words to search for. There will be no spaces in the input words.", "\n\n", "Output", "\nFor each problem instance, output the word Yes or No depending on whether the puzzle satisfies Anna’s constraints.", "\n\n", "Sample Input", "\n5 6 3", "\nPBROGR", "\nPASCAL", "\nASMMIN", "\nGIICON", "\nTCELST", "\nBASIC", "\nLISP", "\nPascal", "\n5 6 4", "\nPBROJR", "\nPASCAL", "\nASMMVN", "\nGIICAN", "\nTCELST", "\nBASIC", "\nJava", "\nLISP", "\nPascal", "\n0 0 0", "\n\n", "Sample Output", "\nYes", "\nNo"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你可以参考如下链接&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/the_ZED/article/details/104174375\"&gt;https://blog.csdn.net/the_ZED/article/details/104174375&lt;/a&gt;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/qq_41785863/article/details/88769368\"&gt;https://blog.csdn.net/qq_41785863/article/details/88769368&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;解决思路和代码都在链接中&amp;#xff0c;我就不重述了。&lt;/p&gt;\n&lt;p&gt;如果对你有帮助&amp;#xff0c;可以给我个采纳吗&amp;#xff0c;谢谢!! 点击我这个回答右上方的&lt;strong&gt;【采纳】&lt;/strong&gt;按钮&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["求c语言代码做大臣的旅费的两种方法，分别是动态规划和分支界定，要让我能在电脑上运行", ["【问题描述】  ", "很久以前，T王国空前繁荣。为了更好地管理国家，王国修建了大量的快速路，用于连接首都和王国内的各大城市。 ", "为节省经费，T国的大臣们经过思考，制定了一套优秀的修建方案，使得任何一个大城市都能从首都直接或者通过其他大城市间接到达。同时，如果不重复经过大城市，从首都到达每个大城市的方案都是唯一的。 ", "J是T国重要大臣，他巡查于各大城市之间，体察民情。所以，从一个城市马不停蹄地到另一个城市成了J最常做的事情。他有一个钱袋，用于存放往来城市间的路费。 ", "聪明的J发现，如果不在某个城市停下来修整，在连续行进过程中，他所花的路费与他已走的距离有关，在走第x千米到第x+1千米这一千米中（x是整数），他花费的路费是x+10这么多。也就是说走1千米花费11，走2千米要花费23。 ", "J大臣想知道：他从某一个城市出发，中间不休息，到达另一个城市，所有可能花费的路费中最多是多少呢？  ", "\n", "输入格式 ", "输入的第一行包含一个整数n，表示包括首都在内的T王国的城市数 ", "城市从1开始依次编号，1号城市为首都。 ", "接下来n-1行，描述T国的高速路（T国的高速路一定是n-1条） ", "每行三个整数Pi, Qi, Di，表示城市Pi和城市Qi之间有一条高速路，长度为Di千米。  ", "\n", "输出格式 ", "输出一个整数，表示大臣J最多花费的路费是多少。 ", "样例输入", "1 ", "5 ", "1 2 2 ", "1 3 1 ", "2 4 5 ", "2 5 4 ", "样例输出", "1 ", "135 ", "输出格式", "大臣J从城市4到城市5要花费135的路费。 ", "上面就是习题", "我自己在网上也有找代码，就是不知道这个是上面方法中的哪一个，我不介意你在网上找代码告诉我，只要能运行就行，但是最好把代码稍微修改，只要让老式不发现就行。时间在七月十四日之前", "。", "接受私信联系"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* &lt;span class=\"hljs-title\"&gt;search&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;*s,&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;*t)&lt;/span&gt;\n&lt;/span&gt;{    \n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t_size&amp;#61;&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(t),s_size&amp;#61;&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(s),T,i,j;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *p&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;(s_size-t_size);i&amp;#43;&amp;#43;)\n    {\n        p&amp;#61;s&amp;#43;i;\n        T&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;t_size;j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(*p!&amp;#61;*(t&amp;#43;j))\n            {\n                T&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n            p&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(T&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(T&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; s&amp;#43;i;\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* S &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;qwertyuoiuywerqwrew&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* T &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;ty&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* R &amp;#61; &lt;span class=\"hljs-built_in\"&gt;search&lt;/span&gt;(S,T);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(R &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Not Found\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(S)-&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(R));\n    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["定义两个字符串s和t，在s中查找t。如果能够找到，则输出t在s中首次出现的第一个字符的下标；否则，输出“Not Found”。", ["定义两个字符串s和t，在s中查找t。如果能够找到，则输出t在s中首次出现的第一个字符的下标；否则，输出“Not Found”。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考一下&amp;#xff1a;&lt;a href=\"https://juejin.cn/post/6979215311820029982\"&gt;https://juejin.cn/post/6979215311820029982&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;如果对你有帮助&amp;#xff0c;可以点击我这个回答右上方的【采纳】按钮&amp;#xff0c;给我个采纳吗&amp;#xff0c;谢谢&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["MATLAB动态规划优化调度代码", ["有没有大神会MATLAB动态规划优化调度代码，可以教我一下吗，有偿。实在是搞不懂了。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;不是同一个意思。动态规划是一种解决复杂问题的算法&amp;#xff0c;它通过将问题分解成子问题&amp;#xff0c;并且通过解决子问题来求解原问题。而cplex中的动态搜索是指在求解MIP问题时&amp;#xff0c;根据列子空间变化情况根据目标函数的优化值进行变量选择&amp;#xff0c;并不是像动态规划将问题分解成子问题。两者的应用场景和解决问题的方法不同&amp;#xff0c;需要根据具体的问题来选择正确的方法。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划和cplex中的MIP动态搜索是一回事吗", ["cplex中对MIP问题的求解中写道MIP搜索方式：动态搜索。请问这里的动态搜索和常说的动态规划是一个意思吗，如果不是那有什么不同呢？"]], "Tag": "算法设计"}
{"Answer": "思路如下：\r\n题目的要求本质上是说有x个人，分成y组，要求每组至少有个一个人。问有多少种分法。\r\n动态数组为dp[x][y]。表示x个人分成y组有多少种分法。有题目要求所知，\r\n对所有x，dp[x][1] = 1，dp[x][y] = 1，如果x &lt; y，则dp[x][y] = 0.否则，\r\ndp[x][y] = dp[x-1][y] * y + dp[x-1][y-1]，也就是说，状态[x,y]肯定可以从二种相邻状态得到，\r\n第一种，x-1个人已经组成了y组，则第x个人可以放入任意一组中，也就是有dp[x-1][y]_*y种可能；\r\n第二种，x-1个人已经组成了y-1组，则第x个人必须被放到第yzu中，也就是有dp[x-1][y-1]种可能。\r\n对于x-1个人组成了y-2甚至更少组的情况，不可能在多一个人情况下组成y组，可以不予考虑。c++程序如下：_\r\n\r\n\r\n```\r\n const int INF = 110; \r\nint dp[INF][INF]; \r\n\r\nvoid buildDP() {\r\n\tfor (int i = 1; i &lt; INF; i++) {\r\n\t\tdp[i][1] = 1; \r\n\t\tdp[i][i] = 1; \r\n\t}\r\n\r\n\tfor (int i = 2; i &lt; INF; i++) {\r\n\t\tfor (int j = 2; j &lt; i; j++) {\r\n\t\t\tdp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] * j; \r\n\t\t}\r\n\t}\r\n}\r\n\r\nint main() {\r\n\tint x, y; cin &gt;&gt; x &gt;&gt; y; \r\n\r\n\tbuildDP(); \r\n\r\n\tcout &lt;&lt; dp[x][y] &lt;&lt; endl; \r\n\r\n\treturn 0; \r\n}\r\n```", "Konwledge_Point": "动态规划", "Question": ["动态规划问题求解思路", ["动态规划题目：请问这道问题的各阶段确定状态变量如何确定？请各位大神指教！", "\n假设工人人数为 x，有 y 项任务(其中：1 <= y,x <= 100)，假定每个任务的工作量都是一样的，要求每个工人至少完成一项任务，同时还要求每项任务至少要被完成一次，问有多少种安排方案？当然也有可能没有一种方案存在。", "\n（附测试数据：x=4 ,y=2时，结果为7", "\n\n", "                    x=15 ,y=12,结果为106470\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以当作一辆车&amp;#xff0c;第一辆车先走&amp;#xff0c;采集过的置为0&amp;#xff0c;然后第2辆车再走。简单的动态规划问题&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Solution&lt;/span&gt;{\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;run&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[][] arr, String name&lt;/span&gt;)&lt;/span&gt;{\n        List&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[]&amp;gt; res &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; row &amp;#61; arr.length;\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; column &amp;#61; arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].length;\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[][] temp &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[row][column];\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;row; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; column; j&amp;#43;&amp;#43;) {\n                &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; top &amp;#61; i &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ? temp[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j] : &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; left &amp;#61; j &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ? temp[i][j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] : &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                temp[i][j] &amp;#61; Math.max(top, left) &amp;#43; arr[i][j];\n            }\n        }\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; car &amp;#61; temp[row&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][column&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;];\n        System.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(name &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;最大值&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; car);\n        &lt;span class=\"hljs-comment\"&gt;//获取car1的路径&lt;/span&gt;\n        res.&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[]{row&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,column&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;});\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; row&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,j&amp;#61;column&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; j&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n            &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; top &amp;#61;temp[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j];\n            &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; left &amp;#61; temp[i][j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;];\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(top &amp;gt;&amp;#61; left){\n                i--;\n            }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n                j--;\n            }\n            res.&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[]{i, j});\n            arr[i][j] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i-- &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n            arr[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            res.&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[]{i, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;});\n        }\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (j-- &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n            arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][j] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            res.&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[]{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, j});\n        }\n        System.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(name &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;路径&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k &amp;#61; res.size()&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;; k&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;--k){\n            System.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.print(Arrays.toString(res.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(k)));\n        }\n        System.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println();\n    }\n\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;String[] args&lt;/span&gt;)&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[][] a &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[][]{&lt;!-- --&gt;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;},{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;},{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;},{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;},{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}};\n        run(a, &lt;span class=\"hljs-string\"&gt;&amp;#34;car1&amp;#34;&lt;/span&gt;);\n        run(a, &lt;span class=\"hljs-string\"&gt;&amp;#34;car2&amp;#34;&lt;/span&gt;);\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/797193559256167.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;&lt;strong&gt;给个采纳吧&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划问题，请大家看一下", ["两台月球矿车从A点向B点移动探测，每台矿车每次可以向右或向下移动一步，移动到的位置对应的数据为可采集的矿石数量 假设每台矿车矿石装载量无限，请求出两台矿车都到达B点后采集到的矿石数量总和最大值，并将他们经过的路径输出 动态规划问题", "算法思想  代码和伪代码  复杂度（空间和时间）", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;h2 id=\"h2_1、暴力解法_1639658522861\"&gt;1、暴力解法&lt;/h2&gt;\n&lt;ul&gt;&lt;li&gt;所谓暴力解法&amp;#xff0c;就是穷举所有情况。因为对于长度为 $n$ 的原序列&amp;#xff0c;它的子序列总共有 $2^n$ 种情况&amp;#xff0c;所以利用深度优先搜索枚举所有情况&amp;#xff0c;然后取 &amp;#34;满足相邻两元素递增并且长度最长&amp;#34; 的子序列就是答案&amp;#xff0c;当然这种方法肯定是不可取的&amp;#xff0c;因为随着 $n$ 的不断变大&amp;#xff0c;整个求解时间复杂度呈指数级增长。&lt;/li&gt;&lt;/ul&gt;\n&lt;h2 id=\"h2_2、朴素解法_1639658522862\"&gt;2、朴素解法&lt;/h2&gt;\n&lt;ul&gt;&lt;li&gt;朴素解法采用的是动态规划的思想。首先当然是设计状态。&lt;h3 id=\"h3_1&amp;#xff09;设计状态_1639658522862\"&gt;1&amp;#xff09;设计状态&lt;/h3&gt;\n&lt;/li&gt;&lt;li&gt;对于数组序列 $a_i(1 \\le i \\le n)$&amp;#xff0c;令 $f[i]$ 表示以第 $i$ 个数 $a_i$ 结尾的最长递增子序列的长度。&lt;/li&gt;&lt;li&gt;那么&amp;#xff0c;我们考虑以第 $i$ 个数 $a_i$ 结尾的最长递增子序列&amp;#xff0c;它在这个序列中的前一个数一定是 $a_j(1 \\le j &amp;lt; i)$ 中的一个&amp;#xff0c;所以&amp;#xff0c;如果我们已经知道了 $f[j]$&amp;#xff0c;那么就有 $f[i] &amp;#61; f[j] &amp;#43; 1$。显然&amp;#xff0c;我们还需要满足 $a_j &amp;lt; a_i$ 这个递增的限制条件。&lt;h3 id=\"h3_2&amp;#xff09;状态转移方程_1639658522862\"&gt;2&amp;#xff09;状态转移方程&lt;/h3&gt;\n&lt;/li&gt;&lt;li&gt;那么就可以得出状态转移方程&amp;#xff1a;$$f[i] &amp;#61; \\max_{j&amp;#61;1}^{i-1} (f[j] \\ | \\  a_j &amp;lt; a_i) &amp;#43; 1$$&lt;/li&gt;&lt;li&gt;这里 $f[j]$ 是 $f[i]$ 的子结构&amp;#xff0c;而 $max(f[j])$ 是 $f[i]$ 的最优子结构&amp;#xff0c;当然我们需要考虑一种情况&amp;#xff0c;就是没有找到最优子结构的时候&amp;#xff0c;例如&amp;#xff1a;$i&amp;#61;1$ 或者 不存在 $a_j &amp;lt; a_i$ 的 $j$&amp;#xff0c;此时 $f[i] &amp;#61; 1$&amp;#xff0c;表示 $a_i$ 本身是一个长度为 $1$ 的最长递增子序列。&lt;/li&gt;&lt;li&gt;$f[i]$ 数组可以通过两层循环来求解&amp;#xff0c;如下图表所示&amp;#xff1a;&lt;/li&gt;&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210614171004963.png#pic_center\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;-|&lt;span class=\"hljs-string\"&gt;-&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;-&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;-&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;-&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;-&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;-&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;-\n$a[i]$&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;1&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;2&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;4&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;6&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;3&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;5&lt;/span&gt;|9\n$f[i]$|&lt;span class=\"hljs-string\"&gt;1&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;2&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;3&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;4&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;3&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;4&lt;/span&gt;|5\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3 id=\"h3_3&amp;#xff09;时间复杂度分析_1639658522883\"&gt;3&amp;#xff09;时间复杂度分析&lt;/h3&gt;\n&lt;ul&gt;&lt;li&gt;状态数 $f[...]$ 总共 $O(n)$ 个&amp;#xff0c;状态转移的消耗为 $O(n)$&amp;#xff0c;所以总的时间复杂度为 $O(n^2)$&amp;#xff0c;所以对于这类问题&amp;#xff0c;一般能够接受的 $n$ 的范围在千级别&amp;#xff0c;也就是 $1000, 2000, 3000 ...$。如果是 $n&amp;#61;10000, 100000$ 的情况&amp;#xff0c;就需要考虑优化了。&lt;/li&gt;&lt;li&gt;那么&amp;#xff0c;下文将介绍最长单调子序列的优化算法&amp;#xff0c;基于的是 贪心 的思想&amp;#xff0c;为了方便理解&amp;#xff0c;将 &amp;#34;单调&amp;#34; 一词替换为 &amp;#34;递增&amp;#34;。均以 最长递增子序列 为例进行讲解。&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "动态规划", "Question": ["请问动态规划里的最长递增子系列问题", ["请问动态规划里的最长递增子系列问题", "为什么时间复杂度是 nlog2 的呀"]], "Tag": "算法设计"}
{"Answer": "http://zhidao.baidu.com/link?url=DusTYd_4dgXuIS_G88sIwfRCR7viclzAEjlx45dQIXVNvisa28lctiMmi90qEkjl1wJ7B66bDEgZpeGhXkQd8rZX8L5xW7e4n63K9bQUrB_", "Konwledge_Point": "动态规划", "Question": ["概率问题,动态规划求解", ["大神们,用动态规划怎么解这道题呀?", "\n问题描述", "\n　　生成n个∈[a,b]的随机整数，输出它们的和为x的概率。", "\n输入格式", "\n　　一行输入四个整数依次为n，a，b，x，用空格分隔。", "\n输出格式", "\n　　输出一行包含一个小数位和为x的概率，小数点后保留四位小数", "\n样例输入", "\n2 1 3 4", "\n样例输出", "\n0.3333", "\n数据规模和约定", "\n　　对于50%的数据，n≤5.", "\n　　对于100%的数据，n≤100,b≤100."]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这是一道动态规划题目。&lt;/p&gt;\n&lt;p&gt;我们可以使用自底向上的方法来求解这道题目。&lt;/p&gt;\n&lt;p&gt;首先我们可以定义一个数组dp[i]表示到第i个时间结点的最大收获。&lt;/p&gt;\n&lt;p&gt;具体来说&amp;#xff0c;我们可以从小到大循环每个时间结点i&amp;#xff0c;对于每个时间结点i&amp;#xff0c;我们可以循环每个指向它的时间结点j&amp;#xff0c;如果有多个指向它的时间结点j&amp;#xff0c;则取收获最大的那个即可。&lt;/p&gt;\n&lt;p&gt;最终结果就是dp[n]&amp;#xff0c;即最后一个时间结点的最大收获值。&lt;/p&gt;\n&lt;p&gt;具体代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;int n&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\nint v[MAX_N]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\nint f[MAX_N]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\nint dp[MAX_N]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n\nint main()\n{\n    cin &amp;gt;&amp;gt; n&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    for (int i &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) cin &amp;gt;&amp;gt; v[i];&lt;/span&gt;\n    for (int i &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) cin &amp;gt;&amp;gt; f[i];&lt;/span&gt;\n\n    for (int i &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; n&lt;span class=\"hljs-comment\"&gt;; i &amp;gt;&amp;#61; 1; i--)&lt;/span&gt;\n    {\n        if (f[i] &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) dp[i] &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; v[i]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n        else\n        {\n            dp[i] &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; v[i]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n            for (int j &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; f[i]&lt;span class=\"hljs-comment\"&gt;; j !&amp;#61; 0; j &amp;#61; f[j]) dp[i]&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["关于#C++动态规划#的问题,如何解决?", ["希望能帮忙解决一下今天不会的题(应该是动态规划):", "\n", "\n", "\n", "\n", "最好是C++的代码加上思路!谢谢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;动态规划&amp;#xff0c;光讲概念肯定很难理解的&amp;#xff0c;还是需要多加实践。&lt;br /&gt;建议多刷题&amp;#xff0c;文章的话我可以提供一些&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/120107337?ops_request_misc&amp;#61;%257B%2522request%255Fid%2522%253A%2522163965567116780264065144%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;amp;request_id&amp;#61;163965567116780264065144&amp;amp;biz_id&amp;#61;0&amp;amp;utm_medium&amp;#61;distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-120107337.pc_v2_rank_blog_default&amp;amp;utm_term&amp;#61;%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92&amp;amp;spm&amp;#61;1018.2226.3001.4450\" id=\"textarea_1639655597089_1639655696292_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;夜深人静写算法&amp;#xff08;二&amp;#xff09;- 动态规划入门_英雄哪里出来-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;全网独家《动态规划》从入门到精通&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/WhereIsHeroFrom/article/details/120107337?ops_request_misc&amp;#61;%257B%2522request%255Fid%2522%253A%2522163965567116780264065144%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;amp;request_id&amp;#61;163965567116780264065144&amp;amp;biz_id&amp;#61;0&amp;amp;utm_medium&amp;#61;distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-120107337.pc_v2_rank_blog_default&amp;amp;utm_term&amp;#61;%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92&amp;amp;spm&amp;#61;1018.2226.3001.4450&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划的子问题到底是指什么呢？", ["动态规划的子问题到底是指什么呢？这块有详细的教程吗？", "如果有一些能够参考的博文也可以"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;[[0]*(n&amp;#43;1) for _ in range(m&amp;#43;1)] 这整体不是列表推导式吗&lt;br /&gt;意思就是生成一个m行n列的数组每项值为0&amp;#xff0c;print(dp) 就能看出来生成的是什么了。&lt;br /&gt;for _ in range(m&amp;#43;1) 你应该知道for in 语句吧&amp;#xff0c; 这个 _ 你不喜欢可以换成其他的不影响&amp;#xff0c;反正又不使用。&lt;/p&gt;\n&lt;p&gt;w[j] 没定义是应为没把全部代码写出来&amp;#xff0c;w[] v[] 这两个不都是要输入的吗&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["python 动态规划创建列表相关问题", ["\n", "最近在学python，在刷题的时候遇到一道动态规划题——背包问题，有一些代码看不懂。", "\n", "\n", "dp = ", "[", "[0]", "*(n+1) for _ in range(m+1)]", "\nfor i in range(1,m+1):\n    for j in range(1,n+1):\n        if j-w", "[i]", ">=0:\n            dp", "[i]", "[j]", " = max(dp", "[i-1]", "[j]", ", dp", "[i-1]", "[j-w", "[i]", "]", "+v", "[i]", ")\n        else:\n            dp", "[i]", "[j]", " = dp", "[i-1]", "[j]", "\nreturn dp", "[m]", "[n]", "\n\n", "\n", "附完整问题截图：", "\n", "\n", "想问问这些代码是什么意思？尤其是第一行，没见过这种写法，有两个地方看不懂——\"[0]*(n+1)\"和for后面的\"_\"。", "还有，第四行为什么可以直接把w[j]写进来，前面的代码里也没定义过。", "提前谢谢解答。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;import java.util.*;&lt;/p&gt;\n&lt;p&gt;import static java.lang.Math.*;&lt;/p&gt;\n&lt;p&gt;public class  Shiyaner&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;public static void main(String[] args)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;final  int m &amp;#61; 5;&lt;/p&gt;\n&lt;p&gt;final  int n &amp;#61; 5;&lt;/p&gt;\n&lt;p&gt;//  定义向上&amp;#xff0c;向右的代价&amp;#xff0c;以及最优代价&lt;/p&gt;\n&lt;p&gt;int[][] Cost &amp;#61; new int[m&amp;#43;1][n&amp;#43;1];&lt;/p&gt;\n&lt;p&gt;int[][] Down &amp;#61; new int[m][n&amp;#43;1];&lt;/p&gt;\n&lt;p&gt;int[][] Right &amp;#61; new int[m&amp;#43;1][n];&lt;/p&gt;\n&lt;p&gt;int count &amp;#61; 0, i &amp;#61; 0, j &amp;#61; 0;&lt;/p&gt;\n&lt;p&gt;//  随机的产生向上代价数组Above&amp;#xff0c;并输出&lt;/p&gt;\n&lt;p&gt;for(i &amp;#61; 0; i &amp;lt; m; i&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;for(j &amp;#61; 0; j &amp;lt; n&amp;#43;1; j&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;Random rand &amp;#61; new Random();&lt;/p&gt;\n&lt;p&gt;Down[i][j] &amp;#61; (rand.nextInt(5)&amp;#43;5);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;System.out.printf(&amp;#34;Down:\\n&amp;#34;);&lt;/p&gt;\n&lt;p&gt;for(i &amp;#61; 0; i &amp;lt; m; i&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;for(j &amp;#61; 0; j &amp;lt; n&amp;#43;1; j&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;System.out.printf(&amp;#34;%5d&amp;#34;, Down[i][j]);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;System.out.println(&amp;#34;\\n&amp;#34;);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;//  随机的产生向右代价数组Right&amp;#xff0c;并输出&lt;/p&gt;\n&lt;p&gt;for(i &amp;#61; 0; i &amp;lt; m&amp;#43;1; i&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;for(j &amp;#61; 0; j &amp;lt; n; j&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;Random rand &amp;#61; new Random();&lt;/p&gt;\n&lt;p&gt;Right[i][j] &amp;#61; (rand.nextInt(5)&amp;#43;5);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;System.out.printf(&amp;#34;Right:\\n&amp;#34;);&lt;/p&gt;\n&lt;p&gt;for(i &amp;#61; 0; i &amp;lt; m&amp;#43;1; i&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;for(j &amp;#61; 0; j &amp;lt; n; j&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;System.out.printf(&amp;#34;%5d&amp;#34;, Right[i][j]);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;System.out.println(&amp;#34;\\n&amp;#34;);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;//   求出最优代价数组Cost并输出&lt;/p&gt;\n&lt;p&gt;Cost[0][0] &amp;#61; 0;&lt;/p&gt;\n&lt;p&gt;for(i &amp;#61; 1; i &amp;lt; m&amp;#43;1; i&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;Cost[i][0] &amp;#61; Cost[i-1][0] &amp;#43; Down[i-1][0];&lt;/p&gt;\n&lt;p&gt;for(j &amp;#61; 1; j &amp;lt; n&amp;#43;1; j&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;Cost[0][j] &amp;#61; Cost[0][j-1] &amp;#43; Right[0][j-1];&lt;/p&gt;\n&lt;p&gt;for(i &amp;#61; 0; i &amp;lt; m; i&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;for(j &amp;#61; 0; j &amp;lt; n; j&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;Cost[i&amp;#43;1][j&amp;#43;1] &amp;#61; min((Cost[i&amp;#43;1][j] &amp;#43; Right[i&amp;#43;1][j]), (Cost[i][j&amp;#43;1] &amp;#43;&lt;/p&gt;\n&lt;p&gt;Down[i][j&amp;#43;1]));&lt;/p&gt;\n&lt;p&gt;System.out.printf(&amp;#34;最优距离:\\n&amp;#34;);&lt;/p&gt;\n&lt;p&gt;for(i &amp;#61; 0; i &amp;lt; m&amp;#43;1; i&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;for(j &amp;#61; 0; j &amp;lt; n&amp;#43;1; j&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;System.out.printf(&amp;#34;%5d&amp;#34;,Cost[i][j]);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;System.out.println(&amp;#34;\\n&amp;#34;);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;//  输出最优路径的具体走法&lt;/p&gt;\n&lt;p&gt;System.out.println(&amp;#34;请输入你想到达的坐标位置&amp;#xff1a;&amp;#34;);&lt;/p&gt;\n&lt;p&gt;Scanner in1 &amp;#61; new Scanner(System.in);&lt;/p&gt;\n&lt;p&gt;System.out.print(&amp;#34;横坐标&amp;#xff1a;&amp;#34;);&lt;/p&gt;\n&lt;p&gt;int a &amp;#61; in1.nextInt();&lt;/p&gt;\n&lt;p&gt;System.out.print(&amp;#34;纵坐标&amp;#xff1a;&amp;#34;);&lt;/p&gt;\n&lt;p&gt;int b &amp;#61; in1.nextInt();&lt;/p&gt;\n&lt;p&gt;int[] d &amp;#61; new int[a&amp;#43;b];&lt;/p&gt;\n&lt;p&gt;int k &amp;#61; a&amp;#43;b-1;&lt;/p&gt;\n&lt;p&gt;i &amp;#61; a - 1  ;&lt;/p&gt;\n&lt;p&gt;j &amp;#61; b - 1  ;&lt;/p&gt;\n&lt;p&gt;while ( i !&amp;#61; 0 &amp;amp;&amp;amp; j !&amp;#61; 0 )&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;if (  Cost[i&amp;#43;1][j&amp;#43;1] &amp;#61;&amp;#61; (Cost[i&amp;#43;1][j] &amp;#43; Right[i&amp;#43;1][j]))&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;d[k] &amp;#61; 0;&lt;/p&gt;\n&lt;p&gt;j--;&lt;/p&gt;\n&lt;p&gt;k--;&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;else&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;d[k] &amp;#61; 1;&lt;/p&gt;\n&lt;p&gt;i--;&lt;/p&gt;\n&lt;p&gt;k--;&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;if( i &amp;#61;&amp;#61; 0 )&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;while ( j !&amp;#61; 0 )&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;d[k] &amp;#61; 1;&lt;/p&gt;\n&lt;p&gt;j--;&lt;/p&gt;\n&lt;p&gt;k--;&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;if( j &amp;#61;&amp;#61; 0 )&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;while ( i !&amp;#61; 0 )&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;d[k] &amp;#61; 0;&lt;/p&gt;\n&lt;p&gt;i--;&lt;/p&gt;\n&lt;p&gt;k--;&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;for (i &amp;#61; a&amp;#43;b-1 ; i &amp;gt;&amp;#61; 0 ; i-- )&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;if ( d[i] &amp;#61;&amp;#61; 0 )&lt;/p&gt;\n&lt;p&gt;System.out.println(&amp;#34;Right&amp;#34;);&lt;/p&gt;\n&lt;p&gt;else&lt;/p&gt;\n&lt;p&gt;System.out.println(&amp;#34;Down&amp;#34;);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;运行结果如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;Down:&lt;/p&gt;\n&lt;p&gt;5    9    7    6    5    6&lt;/p&gt;\n&lt;p&gt;8    9    8    5    7    6&lt;/p&gt;\n&lt;p&gt;9    6    7    9    6    5&lt;/p&gt;\n&lt;p&gt;9    9    7    5    6    6&lt;/p&gt;\n&lt;p&gt;5    7    5    9    5    5&lt;/p&gt;\n&lt;p&gt;Right:&lt;/p&gt;\n&lt;p&gt;7    7    9    8    8&lt;/p&gt;\n&lt;p&gt;6    6    5    6    6&lt;/p&gt;\n&lt;p&gt;8    9    7    9    8&lt;/p&gt;\n&lt;p&gt;9    7    7    5    8&lt;/p&gt;\n&lt;p&gt;6    7    7    9    7&lt;/p&gt;\n&lt;p&gt;6    7    8    5    6&lt;/p&gt;\n&lt;p&gt;最优距离:&lt;/p&gt;\n&lt;p&gt;0    7   14   23   31   39&lt;/p&gt;\n&lt;p&gt;5   11   17   22   28   34&lt;/p&gt;\n&lt;p&gt;13   20   25   27   35   40&lt;/p&gt;\n&lt;p&gt;22   26   32   36   41   45&lt;/p&gt;\n&lt;p&gt;31   35   39   41   47   51&lt;/p&gt;\n&lt;p&gt;36   42   44   50   52   56&lt;/p&gt;\n&lt;p&gt;请输入你想到达的坐标位置&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;横坐标&amp;#xff1a;3&lt;/p&gt;\n&lt;p&gt;纵坐标&amp;#xff1a;3&lt;/p&gt;\n&lt;p&gt;Down&lt;/p&gt;\n&lt;p&gt;Down&lt;/p&gt;\n&lt;p&gt;Down&lt;/p&gt;\n&lt;p&gt;Down&lt;/p&gt;\n&lt;p&gt;Right&lt;/p&gt;\n&lt;p&gt;Right&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["java实验-设计动态规划算法", ["设平面上有一个m×n 的网格，将左下角的网格点标记为（0,0）而右上角的网格点标记为（m,n）。某人想从（0,0）出发沿网格线行进到达（m,n），但是在网格点（i,j）处他只能向上行进或者向右行进，向上行进的代价为aij（amj ＝＋∞），向右行进的代价是bij（bin ＝＋∞）。试设计一个动态规划算法，在这个网格中为该旅行者寻找一条代价最小的旅行路线。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff1a;&lt;br /&gt;&amp;#xff08;1&amp;#xff09;递归 &lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Cnk&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(k&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ||k&amp;#61;&amp;#61;n)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;Cnk&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,k)&amp;#43;&lt;span class=\"hljs-built_in\"&gt;Cnk&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,k&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;);\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,k;\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; res &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;k);\n    res &amp;#61; &lt;span class=\"hljs-built_in\"&gt;Cnk&lt;/span&gt;(n,k);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;,res);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&amp;#xff08;2&amp;#xff09;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Jiecheng&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; s &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n        s *&amp;#61; i;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; s;\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Cnk&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;Jiecheng&lt;/span&gt;(n)/&lt;span class=\"hljs-built_in\"&gt;Jiecheng&lt;/span&gt;(k)/&lt;span class=\"hljs-built_in\"&gt;Jiecheng&lt;/span&gt;(n-k);\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,k;\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; res &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;k);\n    res &amp;#61; &lt;span class=\"hljs-built_in\"&gt;Cnk&lt;/span&gt;(n,k);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;,res);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["如何用偏基础的c语言递归和动态规划解决该问题", ["如何用偏基础的C语言递归程序和动态规划程序分别解决这个问题，希望给出两种方法", "数据范围在一千左右"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;用数组price[0,1,2...n]表示每个城镇的货物价值&lt;br /&gt;题目&amp;#xff1a;低买高卖&amp;#xff0c;限制买卖次数k次。&lt;/p&gt;\n&lt;p&gt;我们用 buy[i][j] 表示对于数组prices[0..i] 中的价格而言&amp;#xff0c;进行恰好 j次交易&amp;#xff0c;并且车上还有一个货物&amp;#xff0c;这种情况下的最大利润。&lt;br /&gt;用sell[i][j]表示这种情况下&amp;#xff0c;车上没有货物时候的最大利润&amp;#xff1b;用cost表示此时车上货物的价值&lt;/p&gt;\n&lt;p&gt;推导&amp;#xff1a;&lt;br /&gt;对于buy[i][j] ,如果是第i站进行了交易&amp;#xff0c;如果此时不持有货物那么最大利润就是sell[i-1][j-1] - price[i]&lt;br /&gt;如果此时持有货物&amp;#xff0c;那么最大利润就是buy[i-1][j-1]-price[i]&amp;#43;cost&lt;br /&gt;那么buy[i][j] &amp;#61; Max{sell[i-1][j-1] - price[i]&amp;#xff0c;buy[i-1][j-1]-price[i]&amp;#43;cost  }&lt;/p&gt;\n&lt;p&gt;对于sell[i][j]&amp;#xff0c;此时持有货物&amp;#xff0c;那么最大利润就是持有的卖出 buy[i-1][j-1] &amp;#43; cost&lt;br /&gt;如果此时不持有货物&amp;#xff0c;最大利润就是sell[i-1][j]&lt;br /&gt;那么sell[i][j] &amp;#61; Max{ buy[i-1][j-1] &amp;#43; cost, sell[i-1][j]  }&lt;/p&gt;\n&lt;p&gt;在k次交易后&amp;#xff0c;不持有货物利润最大&amp;#xff0c;所以答案在sell[n-1][0...k]中的最大值。&lt;/p&gt;\n&lt;p&gt;ps&amp;#xff1a;算法题中&amp;#xff0c;算是困难类型的了。。。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划相关问题，卡车运货最大利润问题", ["Consider a delivery truck that travels from a start town to a destination town", "passing by multiple towns en route. At each of the n towns along the route", "there is the option for the truck to either pick up a new load at cost ci specific", "for town i, or else drop off its existing load at a value vi ≤ ci specific for town", "i. The truck can only transport one load at a time and can only stop at most", "2k ≤ n times to pick up or drop off a load.", "The purpose of this assignment is to develop algorithms that can indicate to", "a truck driver at which towns it is best to pick up or drop off in order for the", "truck to get the best overall profit.", " Exact Approach which is a program that demonstrates an approach that", "correctly and efficiently solves the delivery truck problem. Please include", "comments in your program that clearly explain the approach you have", "taken, particularly why it works, and include good test cases that illustrate", "its correctness.", "求一个详细点的思路，需要用动态规划，最好思路有详细思考过程"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;动态规划的基本思想是将原问题分解为若干个子问题&amp;#xff0c;从而通过计算每个子问题的答案来解决原问题。在本题中&amp;#xff0c;我们可以使用一个数组&amp;#xff0c;记录以当前数字结尾的单调递增子数列的最大和。&lt;/p&gt;\n&lt;p&gt;我们令dp[i]表示以第i个数字结尾的单调递增子数列的最大和&amp;#xff0c;那么&amp;#xff0c;dp[i]可以由以下状态转移方程得到&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;dp[i] &amp;#61; max(dp[j]) &amp;#43; a[i] (0 &amp;lt;&amp;#61; j &amp;lt; i and a[j] &amp;lt; a[i])&lt;/p&gt;\n&lt;p&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; N &amp;#61; &lt;span class=\"hljs-number\"&gt;2010&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 定义数列的最大长度&lt;/span&gt;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n; &lt;span class=\"hljs-comment\"&gt;// 数列的长度&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[N]; &lt;span class=\"hljs-comment\"&gt;// 定义数列&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dp[N]; &lt;span class=\"hljs-comment\"&gt;// 定义DP数组&amp;#xff0c;dp[i]表示以第i个数字结尾的单调递增子数列的最大和&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    cin &amp;gt;&amp;gt; n; &lt;span class=\"hljs-comment\"&gt;// 输入数列的长度&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i &amp;#43;&amp;#43;) cin &amp;gt;&amp;gt; a[i]; &lt;span class=\"hljs-comment\"&gt;// 输入数列中的数字&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i &amp;#43;&amp;#43;)\n    {\n        dp[i] &amp;#61; a[i]; &lt;span class=\"hljs-comment\"&gt;// 初始化dp[i]&amp;#xff0c;设为数列中的第i个数字&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; i; j &amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[j] &amp;lt; a[i]) dp[i] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(dp[i], dp[j] &amp;#43; a[i]); &lt;span class=\"hljs-comment\"&gt;// 如果a[j] &amp;lt; a[i]&amp;#xff0c;更新dp[i]的值&lt;/span&gt;\n        }\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ans &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 定义答案&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i &amp;#43;&amp;#43;) ans &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(ans, dp[i]); &lt;span class=\"hljs-comment\"&gt;// 求出答案&lt;/span&gt;\n    cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl; &lt;span class=\"hljs-comment\"&gt;// 输出答案&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["关于递增数列问题，如何使用动态规划思想解决。", ["关于递增数列问题，如何使用动态规划思想解决。", "从数列中选出若干个数字（至少选择一个），这些数字相对顺序与他们对应在数列中的相对顺序一致， 同时要求其大小单调递增，求满足条件的这些数字的最大和。", "\n", "第一行输入 1 个整数N，表示数列大小。（1≤N≤2000）", "第二行输入 N 个整数 Ai，表示数列中的每个数字。（−10000≤Ai≤10000）。", "\n", "一个整数，表示满足条件的这些数字的最大和。", "样例输入：", "5", "1 3 1 5 -2", "样例输出：", "9"]], "Tag": "算法设计"}
{"Answer": "需要考虑的前提很多啊，如果你的对象数量级很大，那不推荐这样，如果你需要给删除配上撤销操作，这样是可行的\r\n数据库里的删除操作，很多时候就不是真的删除，只是状态的改变", "Konwledge_Point": "动态规划", "Question": ["程序设计 方法合并问题", ["对某个对象的删除方法可以合并到编辑方法里面吗？因为就算是删除也只是软删除改一下状态而已嘛  这样做是否合理呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;全局有默认值&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["c++中有关动态规划的简单算法", ["这个问题的题目和正确题解如下，主要用到的是动态规划算法。我的疑问是为什么二维数组f【】【】没有进行初始化，但是运行结果却是正确的呢？", "\n", "[NOIP2002 普及组] 过河卒", "\n", "题目描述", "\n", "棋盘上 $A$ 点有一个过河卒，需要走到目标 $B$ 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 $C$ 点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。", "\n", "棋盘用坐标表示，$A$ 点 $(0, 0)$、$B$ 点 $(n, m)$，同样马的位置坐标是需要给出的。", "\n", "\n", "现在要求你计算出卒从 $A$ 点能够到达 $B$ 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。", "\n", "输入格式", "\n", "一行四个正整数，分别表示 $B$ 点坐标和马的坐标。", "\n", "输出格式", "\n", "一个整数，表示所有的路径条数。", "\n", "样例 #1", "\n", "样例输入 #1", "\n", "6 ", "6", " ", "3", " ", "3", "\n", "\n", "样例输出 #1", "\n", "6\n", "\n", "提示", "\n", "对于 $100 %$ 的数据，$1 \\le n, m \\le 20$，$0 \\le$ 马的坐标 $\\le 20$。", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<cstring>", "\n", "#", "include", "<cstdio>", "\n", "#", "include", "<algorithm>", "\n", "#", "define", " ll long long", "\n", "using", " ", "namespace", " std;\n\n", "const", " ", "int", " fx[] = {", "0", ", ", "-2", ", ", "-1", ", ", "1", ", ", "2", ", ", "2", ", ", "1", ", ", "-1", ", ", "-2", "};\n", "const", " ", "int", " fy[] = {", "0", ", ", "1", ", ", "2", ", ", "2", ", ", "1", ", ", "-1", ", ", "-2", ", ", "-2", ", ", "-1", "};\n", "//马可以走到的位置", "\n\n", "int", " bx, by, mx, my;\nll f[", "40", "][", "40", "];\n", "bool", " s[", "40", "][", "40", "]; ", "//判断这个点有没有马拦住", "\n", "int", " ", "main", "()", "{\n    ", "scanf", "(", "\"%d%d%d%d\"", ", &bx, &by, &mx, &my);\n    bx += ", "2", "; by += ", "2", "; mx += ", "2", "; my += ", "2", ";\n    ", "//坐标+2以防越界", "\n    f[", "2", "][", "1", "] = ", "1", ";", "//初始化", "\n    s[mx][my] = ", "1", ";", "//标记马的位置", "\n    ", "for", "(", "int", " i = ", "1", "; i <= ", "8", "; i++) s[mx + fx[i]][my + fy[i]] = ", "1", ";\n    ", "for", "(", "int", " i = ", "2", "; i <= bx; i++){\n        ", "for", "(", "int", " j = ", "2", "; j <= by; j++){\n            ", "if", "(s[i][j]) ", "continue", "; ", "// 如果被马拦住就直接跳过", "\n            f[i][j] = f[i - ", "1", "][j] + f[i][j - ", "1", "];\n            ", "//状态转移方程", "\n        }\n    }\n    ", "printf", "(", "\"%lld\\n\"", ", f[bx][by]);\n    ", "return", " ", "0", ";\n} \n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;动态规划的背包问题。&lt;/p&gt;\n&lt;p&gt;但是如果把这道题强行理解为01背包未免有些和01背包的概念不符&amp;#xff0c;其实这道题是到达性的01背包。&lt;/p&gt;\n&lt;p&gt;我们可以不把这道题想象的那么复杂&amp;#xff0c;直接按照最基础的动态规划来&amp;#xff0c;设置动态转移方程和初值。&lt;/p&gt;\n&lt;p&gt;这回我们用标记数组来动归。&lt;/p&gt;\n&lt;p&gt;设状态转移方程f[i][j]为第i首歌能否达到j的音量&amp;#xff0c;能为1&amp;#xff0c;不能为0。&lt;/p&gt;\n&lt;p&gt;这样的话我们就可以开始动归&amp;#xff0c;最后只需要枚举出最大的f[n][i]&amp;#xff0c;就是需要找的答案了。&lt;/p&gt;\n&lt;p&gt;这里还需要注意&amp;#xff0c;初值f[0][begin]要设置为1&amp;#xff0c;因为没开始之前就可以达到begin的音量。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,beginlevel,maxlevel;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c[&lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f[&lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;1010&lt;/span&gt;];\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d%d&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;beginlevel,&amp;amp;maxlevel);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;c[i]);\n    f[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][beginlevel]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;maxlevel;j&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j--)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(f[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j] &amp;amp;&amp;amp; j&amp;#43;c[i]&amp;lt;&amp;#61;maxlevel)\n                f[i][j&amp;#43;c[i]]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(f[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j] &amp;amp;&amp;amp; j-c[i]&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                f[i][j-c[i]]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;maxlevel;i&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i--)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(f[n][i]&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,i);\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;-1&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;DFS也行&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; ll long long&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; reg register&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; bl,ml,ans,c[&lt;span class=\"hljs-number\"&gt;55&lt;/span&gt;],n;\n&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; f[&lt;span class=\"hljs-number\"&gt;51&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;1010&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//定义t是否能达到k的音量&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;dfs&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(k&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;||k&amp;gt;ml)&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;//剪枝部分↓&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(f[t][k])&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;//如果改点已经有了&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//就不要再搜了&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; f[t][k]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//否则算他访问过了&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//剪枝部分↑&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t&amp;#61;&amp;#61;n){\n        ans&amp;#61;&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(ans,k);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(t&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,k&amp;#43;c[t&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n    &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(t&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,k-c[t&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    ans&amp;#61;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d%d&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;bl,&amp;amp;ml);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(reg &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;&amp;#43;&amp;#43;i){\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;c[i]);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,bl);\n    cout&amp;lt;&amp;lt;ans;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; \n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["关于C++动态规划，请问代码bug在哪儿？", ["这道问题起源洛谷", "\n", "\n", "\n", "我用动态规划来写，solve(i,j)表示第 i 次调音调到 j 可不可行，true代表可行，false代表不可行", "那么i>1时，solve(i,j)=true当且仅当 0<=j - a[j]<=maxlevel && solve(i - 1, j - a[j]) == true", "                                                     或 0<=j +a[j]<=maxlevel && solve(i - 1, j +a[j]) == true", "以下是我用这个思路写的代码", "\n", "#", "include", "<iostream>", "\n", "using", " ", "namespace", " std;\n\n", "int", " n, bl, ml;\n", "int", " a[", "51", "];\n\n", "bool", " ", "in", "(", "int", " n)", " ", "{\n    ", "if", " (n >= ", "0", " && n <= ml) {\n        ", "return", " ", "true", ";\n    }\n    ", "else", " {\n        ", "return", " ", "false", ";\n    }\n}\n", "bool", " ", "solve", "(", "int", " i, ", "int", " j)", " ", "{\n        ", "if", " (i == ", "0", ") {\n            ", "if", " (j == bl) {                \n                ", "return", " ", "true", ";\n            }\n            ", "else", " {                \n                ", "return", " ", "false", ";\n            }\n        }\n        ", "else", "{\n            ", "if", " (", "in", "(j - a[j]) == ", "true", " && (", "solve", "(i - ", "1", ", j - a[j]) == ", "true", ")) {                \n                ", "return", " ", "true", ";\n            }\n            ", "else", " ", "if", " (", "in", "(j + a[j]) == ", "true", " && (", "solve", "(i - ", "1", ", j + a[j]) == ", "true", ")) {                \n                ", "return", " ", "true", ";\n            }\n            ", "else", " {                \n                ", "return", " ", "false", ";\n            }\n        }\n    \n}\n\n", "int", " ", "main", "()", " ", "{\n    cin >> n >> bl >> ml;\n    ", "for", " (", "int", " i = ", "1", ";i <= n;i++) {\n        cin >> a[i];\n    }    \n    ", "for", " (", "int", " j = ml;j >= ", "-1", ";j--) {\n        ", "bool", " ans2 = ", "solve", "(n, j);\n        ", "if", " (ans2 == ", "true", ") {\n            cout << j;\n            ", "break", ";\n        }\n        ", "if", " (j == ", "-1", ") {\n            cout << ", "-1", ";\n        }        \n    }\n}\n\n\n\n", "\n", "但是程序好像有bug，输入样例不对", "\n", "\n", "请问bug在哪儿？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这道题的n高达1e5&amp;#xff0c;两次循环下来肯定会超时的&lt;br /&gt;两序列长度相同并且都是1-n的排列&amp;#xff0c;因此可以进行优化将时间复杂度降为nlogn&amp;#xff0c;数组降为1维。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#include&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;\nusing namespace std;\nconst int &lt;span class=\"hljs-symbol\"&gt;N&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1e5&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\nint a[&lt;span class=\"hljs-symbol\"&gt;N&lt;/span&gt;],b[&lt;span class=\"hljs-symbol\"&gt;N&lt;/span&gt;],c[&lt;span class=\"hljs-symbol\"&gt;N&lt;/span&gt;],f[&lt;span class=\"hljs-symbol\"&gt;N&lt;/span&gt;];\nint len&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\nint main()\n{\n    int n;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    for(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n    c[a[i]]&amp;#61;i;\n    }\n    for(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;b[i]);\n        b[i]&amp;#61;c[b[i]];\n    }\n    f[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;b[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n    for(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        if(f[len]&amp;lt;b[i])\n        f[&amp;#43;&amp;#43;len]&amp;#61;b[i];\n        else\n        f[lower_bound(f&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,f&amp;#43;len&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,b[i])-f]&amp;#61;b[i];\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,len);\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["关于#c语言#的问题：洛谷P1438最长公共子序列与动态规划有关错误信息如图找出错误并给出解决方案通过测试", ["洛谷P1438最长公共子序列与动态规划有关", "错误信息如图", "找出错误并给出解决方案通过测试", "\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "代码功能归根结底不是别人帮自己看或讲解或注释出来的；而是被自己静下心来花足够长的时间和精力亲自动手单步或设断点或对执行到某步获得的中间结果显示或写到日志文件中一步一步分析出来的。\r\n提醒：再牛×的老师也无法代替学生自己领悟和上厕所！\r\n单步调试和设断点调试（VS IDE中编译连接通过以后，按F10或F11键单步执行，按Shift+F11退出当前函数；在某行按F9设断点后按F5执行停在该断点处。）是程序员必须掌握的技能之一。", "Konwledge_Point": "动态规划", "Question": ["c语言 回转寿司（排列组合问题） 有雏形", ["盘子从厨师右边流向左边", "\n\n", "厨师连续做n盘寿司，放入回转寿司的传送列中", "\n最初的分叉点：", "\n最初的b盘寿司会流向上面的传送列，后面的n-b盘寿司流向下面的传送列", "\n或者", "\n最初的b盘寿司会流向下面的传送列，后面的n-b盘寿司流向下面的传送列", "\n1<=b<=n-1", "\n\n", "上面的列和下面的列都坐着客人", "\n上面的客人：会吃掉送过来的所有寿司，全部吃掉以后，会以最初传送过来的顺序或者与之相反的顺序把盘子放回传送列", "\n下面的客人和上面的客人完全一样。", "\n\n", "店员会把传送过来的空盘子叠成一叠，有可能叠成上面客人的盘子在上，也有可能叠成下面的客人的盘子在上", "\n\n", "碟子一共有10种(0,1,2,3,4,5,6,7,8,9)", "\n\n", "问最后一共有多少被叠起来的可能", "\n\n", "比如，流过来的碟子是0,1,2的时候", "\n一共有012,021,102,120,201,210这6种顺序", "\n\n", "输入格式：", "\n数据的个数L", "\n数据1", "\n数据2", "\n…", "\n数据L", "\n\n", "各数据代表盘子的排列方式（2<=盘子数量<=100）", "\n\n", "输出", "\n\n", "输出可能的排列数量", "\n<例1>", "\n输入", "\n3", "\n001", "\n12345", "\n0000", "\n输出", "\n3", "\n18", "\n1", "\n<例2>", "\n输入", "\n2", "\n012", "\n1234", "\n输出", "\n6", "\n12", "\n（还有一组是50个的比较大的数据，这个时候我自己写的程序运行就会直接结束）", "\n\n", "以下是代码雏形", "\n只需要修改reverse swap和chk_isnew（这个函数我应该没写错）部分", "\n（自己写了要求的函数部分，但是结果不对）", "\n\n", " #include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef int item;\ntypedef struct node *link;\n\n#define MAX_LEN 100\n#define MAX_RESULTS 1000\n\nstruct node\n{\n    char *p;\n    link next;\n};\nlink NEW(char *inp, link next)\n{\n    link x = malloc(sizeof(*x));\n    x->p = inp;\n    x->next = next;\n    return x;\n}\nvoid reverse(int sp,int ep,char*in)\n{\n    int i;\n    char temp;\n    for(i=0;i<(ep-sp+1)/2;i++){\n        temp=in[sp+i];\n        in[sp+i]=in[ep-(i+1)];\n        in[ep-(i+1)]=temp;\n    }\n    //reverse in[sp]...in[ep-1]\n}\nvoid swap(int sp,int ep,char *in)\n{\n    int i,j,k;\n    char temp[101];\n    char box1[101];\n    char box2[101];\n    for(i=0;i<sp;i++){\n        temp[i]=in[i];\n    }\n    for(j=0;j<ep-sp;j++){\n        box1[j]=in[sp+j];\n    }\n    for(k=0;k<sp;k++){\n        box2[k]=temp[k];\n    }\n    *in=strcat(box1,box2);\n    //swap in[0]~in[sp-1] by in[sp]~in[ep-1]\n}\nint chk_isnew(char *in, link *p_head)\n{\n    link t=*p_head;\n    while(t!=NULL)\n    {\n        if(strcmp(t->p,in)==0) return 0;\n        else t=t->next;\n    }\n    char *store = (char *)malloc(sizeof(char)*MAX_LEN);\n    memcpy(store,in,sizeof(char)*MAX_LEN);\n    *p_head = NEW(store, *p_head);\n    return(1);\n}\nint main(void)\n{\n    link head;\n    int num, cnt, i;\n    scanf(\"%d\", &num);\n    int *result = (int *)malloc(sizeof(int)*MAX_RESULTS);\n    char *dish;\n    char *tmp_dish;\n    for(cnt=0; cnt<num; cnt++)\n    {\n        result[cnt] = 0;\n        head = NULL;\n        dish = (char *)malloc(sizeof(char)*MAX_LEN);\n        memset(dish,0x00,sizeof(char)*MAX_LEN);\n        tmp_dish = (char *)malloc(sizeof(char)*MAX_LEN);\n\n        scanf(\"%s\", dish);\n        memcpy(tmp_dish,dish,sizeof(char)*MAX_LEN);\n        int len = strlen(dish);\n        for(i=1; i<len; i++)\n        {\n            int rev, swp;\n            for(rev=0; rev<4; rev++)\n            {\n                switch(rev)\n                {\n                case 0:\n                    break;\n                case 1:\n                    reverse(0,i,tmp_dish); // reverse 1st half\n                    break;\n                case 2:\n                    reverse(i,len,tmp_dish); // reverse 2nd half\n                    break;\n                case 3:\n                    reverse(0,i,tmp_dish); // reverse 1st half\n                    reverse(i,len,tmp_dish); // reverse 2nd half\n                    break;\n                }\n                for(swp=0; swp<2; swp++)\n                {\n                    switch(swp)\n                    {\n                    case 0:\n                        break; //not swap\n                    case 1:\n                        swap(i,len,tmp_dish); //swap\n                        break;\n                    }\n                    if(chk_isnew(tmp_dish, &head)) result[cnt]++;\n                }\n                memcpy(tmp_dish,dish,sizeof(char)*MAX_LEN);\n            }\n        }\n        link t = head;\n        while(t->next!=NULL)\n        {\n            t = t->next;\n        }\n        link r;\n        t = head;\n        while(t->next!=NULL)\n        {\n            r = t;\n            t = t->next;\n            free(r->p);\n            free(r);\n        }\n        free(dish);\n        free(tmp_dish);\n    }\n    for(cnt=0; cnt<num; cnt++)\n    {\n        printf(\"%d\\n\",result[cnt]);\n    }\n    return 0;\n}\n\n", "\n\n", "要求改写reverse,swap和chk_isnew的函数部分（chk_isnew应该没有错）", "\n非常长的问题有劳了"]], "Tag": "算法设计"}
{"Answer": "http://www.acmerblog.com/hdu-2224-the-shortest-path-3454.html", "Konwledge_Point": "动态规划", "Question": ["The shortest path                   ", ["Problem Description", "\nThere are n points on the plane, Pi(xi, yi)(1 <= i <= n), and xi < xj (i\nBefore you reach the rightmost point Pn, you can only visit the points those have the bigger x-coordinate value. For example, you are at Pi now, then you can only visit Pj(j > i). When you reach Pn, the rule is changed, from now on you can only visit the points those have the smaller x-coordinate value than the point you are in now, for example, you are at Pi now, then you can only visit Pj(j < i). And in the end you back to P1 and the tour is over.", "\nYou should visit all points in this tour and you can visit every point only once.", "\n\n", "Input", "\nThe input consists of multiple test cases. Each case begins with a line containing a positive integer n(2 <= n <= 200), means the number of points. Then following n lines each containing two positive integers Pi(xi, yi), indicating the coordinate of the i-th point in the plane.", "\n\n", "Output", "\nFor each test case, output one line containing the shortest path to visit all the points with the rule mentioned above.The answer should accurate up to 2 decimal places.", "\n\n", "Sample Input", "\n3", "\n1 1", "\n2 3", "\n3 1", "\n\n", "Sample Output", "\n6.47", "\n\n", "Hint: The way 1 - 3 - 2 - 1 makes the shortest path."]], "Tag": "算法设计"}
{"Answer": "http://poj.org/problem?id=3033", "Konwledge_Point": "动态规划", "Question": ["Traveling Salesman                      ", ["Problem Description", "\nLong before the days of international trade treaties, a salesman would need to pay taxes at every border crossed. So your task is to find the minimum number of borders that need to be crossed when traveling between two countries. We model the surface of Earth as a set of polygons in three dimensions forming a closed convex 3D shape, where each polygon corresponds to one country. You are not allowed to cross at points where more than two countries meet.", "\n\n", "Input", "\nEach test case consists of a line containing c, the number of countries (4 ≤ c ≤ 6000), followed by c lines containing the integers n x1 y1 z1 … xn yn zn, describing (in order) the n corners of a closed polygon (3 ≤ n ≤ 20). Then follows a line with one integer m (0 < m ≤ 50), and then m lines with queries ca cb, where ca and cb are country numbers (starting with 1). No point will be on the line between two connected points, and -106 ≤ x, y, z ≤ 106 for all points. No two non-adjacent edges of a country share a common point. The input is terminated by a case where c = 0, which should not be processed.", "\n\n", "Output", "\nFor each query, output the number of borders you must cross to go from ca to cb.", "\n\n", "Sample Input", "\n6", "\n4 0 0 0 0 0 1 0 1 1 0 1 0", "\n4 1 0 0 1 0 1 1 1 1 1 1 0", "\n4 0 0 0 1 0 0 1 0 1 0 0 1", "\n4 0 1 0 1 1 0 1 1 1 0 1 1", "\n4 0 0 0 0 1 0 1 1 0 1 0 0", "\n4 0 0 1 0 1 1 1 1 1 1 0 1", "\n2", "\n1 2", "\n1 3", "\n0", "\n\n", "Sample Output", "\n2", "\n1"]], "Tag": "算法设计"}
{"Answer": "将 n 个点的坐标排序（x 为主键）\r\n\r\n任取一点将 n 个点分成 2 组 n1 和 n2，求出 2 个面积 m1 和 m2\r\n\r\n从 n1 中取出最后的一个点，放入 n2 中，再求出 2 个面积 m'1 和 m'2\r\n\r\n如果 m'1+m'2 &lt; m1+m2，则继续\r\n\r\n分别对重组后的 n1 和 n2 做如上操作\r\n\r\n直至满足 k 的数量要求，反之亦然\r\n\r\n其实你很快就会发现最小面积就是前 k-1 个点的 (maxx - minx)*(maxy-miny) + (n-k-1)", "Konwledge_Point": "动态规划", "Question": ["如何用动态规划解决平面上的n个点用k个矩形覆盖的最小面积？", ["假设有n个点，我们要用k个矩形去覆盖所用的点，然后这k个矩形的面积要尽可能小", "\n1）矩形的底是在x轴上的（其实就是直方图）", "\n2）矩形的面积可以为0（就是一条与x轴垂直的线）", "\n3）矩形不能重叠（边线与顶点也都不能重合）", "\n\n", "有人可以帮我一下吗？想了半天都没想出来怎么用动态规划解决这个问题"]], "Tag": "算法设计"}
{"Answer": "http://www.acmerblog.com/hdu-1501-Zipper-2058.html", "Konwledge_Point": "动态规划", "Question": ["Zipper                   ", ["Problem Description", "\nGiven three strings, you are to determine whether the third string can be formed by combining the characters in the first two strings. The first two strings can be mixed arbitrarily, but each must stay in its original order.", "\n\n", "For example, consider forming \"tcraete\" from \"cat\" and \"tree\":", "\n\n", "String A: cat", "\nString B: tree", "\nString C: tcraete", "\n\n", "As you can see, we can form the third string by alternating characters from the two strings. As a second example, consider forming \"catrtee\" from \"cat\" and \"tree\":", "\n\n", "String A: cat", "\nString B: tree", "\nString C: catrtee", "\n\n", "Finally, notice that it is impossible to form \"cttaree\" from \"cat\" and \"tree\".", "\n\n", "Input", "\nThe first line of input contains a single positive integer from 1 through 1000. It represents the number of data sets to follow. The processing for each data set is identical. The data sets appear on the following lines, one data set per line.", "\n\n", "For each data set, the line of input consists of three strings, separated by a single space. All strings are composed of upper and lower case letters only. The length of the third string is always the sum of the lengths of the first two strings. The first two strings will have lengths between 1 and 200 characters, inclusive.", "\n\n", "Output", "\nFor each data set, print:", "\n\n", "Data set n: yes", "\n\n", "if the third string can be formed from the first two, or", "\n\n", "Data set n: no", "\n\n", "if it cannot. Of course n should be replaced by the data set number. See the sample output below for an example.", "\n\n", "Sample Input", "\n3", "\ncat tree tcraete", "\ncat tree catrtee", "\ncat tree cttaree", "\n\n", "Sample Output", "\nData set 1: yes", "\nData set 2: yes", "\nData set 3: no"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/counterm/article/details/6308881", "Konwledge_Point": "动态规划", "Question": ["Bean Counting               ", ["The CSC has decided to hold a contest to guess the number of beans in a given jar. To make it a wee bit more interesting, they decided to have the contestants guess the number of a particular kind of bean, the jar having many types of beans in it. Each participant would par $2.00 per guess.", "\nIf the guess is one off (either one greater or less) than the actual count, they get a single share of the total pot. If the guess is right on, they get two shares of the total pot.", "\n\n", "Your task is to tally these guesses and print out how much each person wins.", "\n\n", "Input", "\n\n", "The first line will contain hundreds of letters, from a - z, each representing one bean of that type of bean. There will only be 26 different types of beans. The next line contains an integer n, the number of guesses. Each of the n following line will be the guess from a contestant. A contestant can guess as many times as they like. The line will begin with a single letter, in the range A - Z, leaving only 26 possible contests. The first letter will be followed by a single space, and then up to five pairs of letter/number combinations, the letter representing the type of bean for this guess, and the number the number of that bean the contestant expects to find. The letter and the value of a guess will be separated by a ':' and each guess on lines with more than one guess will be separated by a ','.", "\n\n", "Process to the end of file.", "\n\n", "Tallying:", "\n\n", "The amount a contestant will receive is based on shares of a pot. The pot will consist of the total of all the guesses, at $2.00 per guess. The fraction each person gets will be based on:", "\n\n", "TotNum: total number of guesses by all contestants", "\nTotShares: total number of shares from all contestants", "\nOffOne: number of off-by-one guesses by that contestant", "\nRightOn: number if right-on guesses by that contestant", "\n\n", "(TotNum * $2.00) / TotShares * (OffOne + (RightOn * 2))", "\n\n", "Output", "\n\n", "Print out all the winners, in alphabetical order, and their winnings, separated by a single space. Each winner should be on a line by itself.", "\n\n", "Separate output for different cases by a single blank line.", "\n\n", "Sample Input", "\n\n", "aadddddddddddddddddddddddffffffffffffffffwwwwwwwwwwwwccccalalala", "\n4", "\nA a:6,c:6", "\nB w:12", "\nC d:25", "\nD d:22,c:4,l:3,f:15", "\n\n", "Sample Output", "\n\n", "A 3.20", "\nB 3.20", "\nD 9.60"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;我是有问必答小助手&amp;#xff0c;非常抱歉&amp;#xff0c;本次您提出的有问必答问题&amp;#xff0c;目前超出我们的服务范围&amp;#xff0c;暂时无法为您解答。&lt;br /&gt;\n&lt;br /&gt;\n首次提问人员可免费体验一次有问必答服务。目前首次提问的问题服务范围为&amp;#xff1a;编程语言、Java开发、python、数据库、前端开发 领域专业技术问题&amp;#xff0c;为您提供问题的解决思路和指导。&lt;strong&gt;&lt;u&gt;不提供源码代写、项目文档代写、论文代写、安装包资源发送或安装、软件使用指导等服务。&lt;/u&gt;&lt;/strong&gt;&lt;br /&gt;\n&lt;br /&gt;\n我们后续会持续优化&amp;#xff0c;扩大我们的服务范围&amp;#xff0c;为您带来更好地服务。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划 C++ 急求", ["【问题描述】", "\n\n", "助教小明给期末测验出了", "道算法题目。他希望在即将到来的期末测验试卷中使用其中", "道题目。", "\n\n", "每道算法题目都有一个难度等级。如果一次测验中的所有k道题目都有不同的难度等级，那么这次期末测试就是有区分度的。", "\n\n", "计算小明可以设计多少种有区分度的期末试卷。", "\n\n", "注：", "\n\n", "两份测验试卷当且仅当一份试卷中存在某一题目", "，而另一份试卷中不存在这个题", "，这两份试卷才有区别。", "\n\n", "输出结果对998,244,353取余。", "\n\n", "【输入形式】", "\n\n", "输入第一行包括两个用空格分隔开的整数", "和", ",", "\n\n", "输入第二行", "个用空格分开隔的整数", "，表示不同题目的难度。", "\n\n", "【输出形式】", "\n\n", " 一个整数，表示可设计的有区分度的期末试卷数目。结果对998,244,353取余", "\n\n", "【样例输入】", "\n\n", "\n5 2\n1 2 3 4 5", "\n\n", "【样例输出】", "\n\n", "\n10"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;更改如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;clear all\nclc\n% clc;clear;\n% A&amp;#61;[ 0 1 2 3 4];\n% A1&amp;#61;[0 1 2 3 4 5];\n% A2&amp;#61;[0 1 2 3 4 5 6];\n% &lt;span class=\"hljs-attribute\"&gt;B&lt;/span&gt;&amp;#61;nchoosek(A,3);\n% &lt;span class=\"hljs-attribute\"&gt;B1&lt;/span&gt;&amp;#61;nchoosek(A1,3);\n% &lt;span class=\"hljs-attribute\"&gt;B2&lt;/span&gt;&amp;#61;nchoosek(A2,3);\n% &lt;span class=\"hljs-attribute\"&gt;C&lt;/span&gt;&amp;#61;fliplr(B);\n% &lt;span class=\"hljs-attribute\"&gt;C1&lt;/span&gt;&amp;#61;fliplr(B1);\n% &lt;span class=\"hljs-attribute\"&gt;C2&lt;/span&gt;&amp;#61;fliplr(B2);\n% sum&amp;#61;[B;C];\n% sum1&amp;#61;[B1;C1];\n% sum2&amp;#61;[B2;C2];\n% [m,n]&amp;#61;size(sum);\n% [m1,n1]&amp;#61;size(sum1);\n% [m2,n2]&amp;#61;size(sum2);\n&lt;span class=\"hljs-attribute\"&gt;blank&lt;/span&gt;&amp;#61;0;\n&lt;span class=\"hljs-attribute\"&gt;blank1&lt;/span&gt;&amp;#61;0;\n% &lt;span class=\"hljs-attribute\"&gt;blank2&lt;/span&gt;&amp;#61;zeros(m2,1);\n%%\n&lt;span class=\"hljs-attribute\"&gt;sum11&lt;/span&gt;&amp;#61;0;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;0:4\n    %&lt;span class=\"hljs-attribute\"&gt;a4&lt;/span&gt;&amp;#61;sum(i,1);\n    switch i\n        case 0\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;0;\n        case 1\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;3;\n        case 2\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;5;\n        case 3\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;6;\n        case 4\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;7;\n    end\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;1:4\n        %&lt;span class=\"hljs-attribute\"&gt;b4&lt;/span&gt;&amp;#61;sum(j,2);\n        switch j\n            case 0\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;0;\n            case 1\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;4;\n            case 2\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;6;\n            case 3\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;7;\n            case 4\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;8;\n        end\n        \n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;0:4\n            %&lt;span class=\"hljs-attribute\"&gt;c4&lt;/span&gt;&amp;#61;sum(k,3);\n            switch k\n                case 0\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;0;\n                case 1\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;2;\n                case 2\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;5;\n                case 3\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;9;\n                case 4\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;8;\n            end\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i&amp;#43;j&amp;#43;&lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;&amp;#61;4\n                &lt;span class=\"hljs-attribute\"&gt;sum11&lt;/span&gt;&amp;#61;a1&amp;#43;b1&amp;#43;c1;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; blank&amp;lt;sum11\n                    &lt;span class=\"hljs-attribute\"&gt;blank&lt;/span&gt;&amp;#61;sum11;\n                    list&amp;#61;[i,j,k];\n                end\n            end\n            \n        end\n    end\nend\n&lt;span class=\"hljs-attribute\"&gt;MAX&lt;/span&gt;&amp;#61;blank %最大获利\nlist %z最终结果\n%%\n\n&lt;span class=\"hljs-attribute\"&gt;sum12&lt;/span&gt;&amp;#61;0;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;0:5\n    switch i\n        case 0\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;0;\n        case 1\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;3;\n        case 2\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;5;\n        case 3\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;6;\n        case 4\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;7;\n        case 5\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;6;\n    end\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;0:5\n        switch j\n            case 0\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;0;\n            case 1\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;4;\n            case 2\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;6;\n            case 3\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;7;\n            case 4\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;8;\n            case 5\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;9;\n        end\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;0:5\n            switch k\n                case 0\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;0;\n                case 1\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;2;\n                case 2\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;5;\n                case 3\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;9;\n                case 4\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;8;\n                case 5\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;8;\n            end\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i&amp;#43;j&amp;#43;&lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;&amp;#61;5\n                &lt;span class=\"hljs-attribute\"&gt;sum12&lt;/span&gt;&amp;#61;a1&amp;#43;b1&amp;#43;c1;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; blank1&amp;lt;sum12\n                    &lt;span class=\"hljs-attribute\"&gt;blank1&lt;/span&gt;&amp;#61;sum12;\n                    list1&amp;#61;[i,j,k];\n                end\n            end\n        end\n    end\nend\n&lt;span class=\"hljs-attribute\"&gt;MAX1&lt;/span&gt;&amp;#61;blank1 %最大获利\nlist1 %z最终结果\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["matlab动态规划问题。", ["这里我只列出了订购4套和5套的情况，一开始以为能弄出所有排列情况即可，但是结果是我写的排列中没有出现数字有重复的排列，类似于（1，1，2）（1，1, 3)这样的有重复数字的排列，导致计算订购5套时只得到答案时（0，2，3），未得到正确答案（1，1，3），如何在此代码上进行修改从而把有重复数字的排列加进去？", "\n", "clc;clear;\nA=[ 0 1 2 3 4];\nA1=[0 1 2 3 4 5];\nA2=[0 1 2 3 4 5 6];\n", "B", "=nchoosek(A,3);\n", "B1", "=nchoosek(A1,3);\n", "B2", "=nchoosek(A2,3);\n", "C", "=fliplr(B);\n", "C1", "=fliplr(B1);\n", "C2", "=fliplr(B2);\nsum=[B;C];\nsum1=[B1;C1];\nsum2=[B2;C2];\n[m,n]=size(sum);\n[m1,n1]=size(sum1);\n[m2,n2]=size(sum2);\n", "blank", "=zeros(m,1);\n", "blank1", "=zeros(m1,1);\n", "blank2", "=zeros(m2,1);\n%%\n", "for", " ", "i", "=1:m\n        ", "a4", "=sum(i,1);\n        switch a4\n            case 0\n                ", "a1", "=0;\n            case 1\n                ", "a1", "=3;\n            case 2\n                ", "a1", "=5;\n            case 3\n                ", "a1", "=6;\n            case 4\n                ", "a1", "=7;\n        end\n                \n            \n        ", "b4", "=sum(i,2);\n        switch b4\n            case 0\n                ", "b1", "=0;\n            case 1\n                ", "b1", "=4;\n            case 2\n                ", "b1", "=6;\n            case 3\n                ", "b1", "=7;\n            case 4\n                ", "b1", "=8;\n        end\n            \n        ", "c4", "=sum(i,3);\n        switch c4\n            case 0\n                ", "c1", "=0;\n            case 1\n                ", "c1", "=2;\n            case 2\n                ", "c1", "=5;\n            case 3\n                ", "c1", "=9;\n            case 4\n                ", "c1", "=8;\n        end\n        ", "if", " a4+b4+", "c4", "==4\n        ", "sum11", "=a1+b1+c1;\n        blank(i,1)=sum11;\n        end\n    \nend\n", "MAX", "=max(blank);\n[q,w]=", "find", "(", "blank", "==MAX);\n", "final", "=sum(q,:)\n%%\n", "for", " ", "i", "=1:m1\n        ", "a5", "=sum1(i,1);\n        switch a5\n            case 0\n                ", "a1", "=0;\n            case 1\n                ", "a1", "=3;\n            case 2\n                ", "a1", "=5;\n            case 3\n                ", "a1", "=6;\n            case 4\n                ", "a1", "=7;\n            case 5\n                ", "a1", "=6;\n                \n                \n        end\n                \n            \n        ", "b5", "=sum1(i,2);\n        switch b5\n            case 0\n                ", "b1", "=0;\n            case 1\n                ", "b1", "=4;\n            case 2\n                ", "b1", "=6;\n            case 3\n                ", "b1", "=7;\n            case 4\n                ", "b1", "=8;\n            case 5\n                ", "b1", "=9;\n        end\n            \n        ", "c5", "=sum1(i,3);\n        switch c5\n            case 0\n                ", "c1", "=0;\n            case 1\n                ", "c1", "=2;\n            case 2\n                ", "c1", "=5;\n            case 3\n                ", "c1", "=9;\n            case 4\n                ", "c1", "=8;\n            case 5\n                ", "c1", "=8;\n        end\n        ", "if", " a5+b5+", "c5", "==5\n        ", "sum22", "=a1+b1+c1;\n        blank1(i,1)=sum22;\n        end\nend\n        ", "MAX1", "=max(blank1);\n[q1,w1]=", "find", "(", "blank1", "==MAX1);\n", "final1", "=sum1(q1,:)\n\n", "\n", "1）当可分配设备数为4时，最终得到最优决策为（0,1,3）即1分厂不分配设备，2分厂分配1个设备，3分厂分配3个设备，得到最优解为13万元", "2）当可分配设备数为5时，最终得到最优决策为（1,1,3）即1分厂分配1台设备，2分厂分配1台设备，3分厂分配3个设备，得到最优解为16万元"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;树上背包问题&amp;#xff0c;给你个参考题目&lt;br /&gt;&lt;a href=\"https://www.luogu.com.cn/problem/P2014\" id=\"textarea_1660829562551_1660829661268_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.luogu.com.cn/problem/P2014&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;和你这个一样&amp;#xff0c;具体可以去看他们的题解&amp;#xff0c;他们写的会更详细。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["求解一道动态规划问题", ["问题遇到的现象和发生背景", "\n", "共N门功夫，没门功夫伤害值为ti，没一门功夫都有0或1个先修功夫，有先修功夫的需要先学个先修功夫之后才能练习。小西现在想学习M门功夫,她想知道M门功夫能够造成的伤害值最大为多大?", "输入示例：", "6", "2 ，-1", "3， 2", "4， 0", "3， -1", "4 ，1", "5 ，0", "4", "输入第一行为N,接下来N行第-个数字是第i门功夫的伤害值和第i门功夫的先修功夫(0-indexed).如果没有先修功夫，则标记其先修功夫为-1.最后一行输入为M ", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;看了代码有以下几个问题&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1.在记录是否为障碍物的数组中&amp;#xff0c;应该将其定义为bool类型而不是int类型&amp;#xff0c;因为它只有两个取值&amp;#xff0c;0和1。&lt;/p&gt;\n&lt;p&gt;2.在记录是否为障碍物的数组中&amp;#xff0c;应该将x和y的计算分别赋值给x和y&amp;#xff0c;而不是将y赋值给x&amp;#xff0c;这是因为y是dy数组中的元素&amp;#xff0c;而dx数组中的元素应该赋值给x。&lt;/p&gt;\n&lt;p&gt;3.在dp的过程中&amp;#xff0c;应该从0开始循环到Bx和By&amp;#xff0c;而不是从1开始循环到Bx-1和By-1&amp;#xff0c;因为dp[0][0]表示的是起点&amp;#xff0c;而dp[Bx-1][By-1]表示的是终点。&lt;/p&gt;\n&lt;p&gt;4.dp[i][j]应该只在map[i][j]等于0的情况下更新&amp;#xff0c;因为map[i][j]等于1表示这个点是障碍物&amp;#xff0c;无法通过。&lt;/p&gt;\n&lt;p&gt;这个是修改过后的代码&amp;#xff0c;你可以参考一下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; INF 1e9&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dx[] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;};\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dy[] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;};\n&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; map[&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dp[&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;];\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; Bx, By, Hx, Hy;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(map, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(map));\n    cin &amp;gt;&amp;gt; Bx &amp;gt;&amp;gt; By &amp;gt;&amp;gt; Hx &amp;gt;&amp;gt; Hy;\n    map[Hx][Hy] &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x &amp;#61; Hx &amp;#43; dx[i];\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; y &amp;#61; Hy &amp;#43; dy[i];\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || y &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || x &amp;gt; Bx || y &amp;gt; By) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        map[x][y] &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n    }\n    dp[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt;&amp;#61; Bx; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt;&amp;#61; By; j&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!map[i][j]) {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; j &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) dp[i][j] &amp;#61; dp[i][j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;];\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) dp[i][j] &amp;#61; dp[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j];\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; dp[i][j] &amp;#61; dp[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j] &amp;#43; dp[i][j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;];\n            }\n        }\n    }\n    cout &amp;lt;&amp;lt; dp[Bx][By] &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["C++动态规划DP题", ["DP题，马前卒，代码求指正", "思路是用map记录障碍点（记为1），dp时若非1则dp[i][j]=dp[i-1][j]+dp[i][j-1]", "原题洛谷：", "https://www.luogu.com.cn/problem/P1002", "\n", "\n", "#", "include", "<cstdio>", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<algorithm>", "\n", "#", "include", "<cstring>", "\n", "#", "define", " INF 1e9", "\n", "using", " ", "namespace", " std;\n\n", "int", " dx[]={", "-2", ",", "-1", ",", "1", ",", "2", ",", "-2", ",", "-1", ",", "1", ",", "2", "};\n", "int", " dy[]={", "-1", ",", "-2", ",", "-2", ",", "-1", ",", "1", ",", "2", ",", "2", ",", "1", "};\n", "bool", " map[", "22", "][", "22", "];\n", "int", " dp[", "22", "][", "22", "];\n\n", "int", " Bx,By,Hx,Hy;\n", "//dp[i][j]=dp[i-1][j]+dp[i][j-1]", "\n", "int", " ", "main", "()", "{\n    ", "memset", "(map,", "0", ",", "sizeof", "(map));\n    cin>>Bx>>By>>Hx>>Hy;\n    map[Hx][Hy]=", "1", ";\n    ", "for", "(", "int", " i=", "0", ";i<", "8", ";i++){\n        ", "int", " x=Hx+dx[i];\n        ", "int", " y=Hx+dy[i];\n        ", "if", "(x<", "0", "||y<", "0", "||x>Bx||y>By)", "continue", ";\n        map[x][y]=", "1", ";\n    }\n    dp[", "0", "][", "1", "]=", "1", ";\n    ", "for", "(", "int", " i=", "1", ";i<Bx;i++){\n        ", "for", "(", "int", " j=", "1", ";j<By;j++){\n            ", "if", "(map[i][j]==", "0", ")dp[i][j]=dp[i", "-1", "][j]+dp[i][j", "-1", "];\n        }\n    }\n    cout<<dp[Bx", "-1", "][By", "-1", "];\n    ", "return", " ", "0", ";\n} \n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;return x&amp;lt;1&amp;amp;&amp;amp;y&amp;lt;1?false:true;&lt;br /&gt;这意思要x和y都小于1才是false&amp;#xff1f;应该是x&amp;lt;1 || y&amp;lt;1吧&amp;#xff0c;有一个小于1就不对了吧&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划DP过河卒C++", ["洛谷原题：", "https://www.luogu.com.cn/problem/P1002", "用的DP，但是WA，求指导", "思路是把所有坐标+1（坐标原点映射到（1，1）），再用数组E[][]标记马可能在的地方（用in函数避免数组越界），最后dp", "\n", "#", "include", "<cstdio>", "\n", "#", "include", "<algorithm>", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<cstring>", "\n", "using", " ", "namespace", " std;\n\n", "//f[i][j]表示走到（i,j）的总路径条数", "\n", "//转移方程：f[i][j]=f[i][j-1]+f[i-1][j] ", "\n", "int", " Bx,By,Hx,Hy;\n", "int", " f[", "22", "][", "22", "],E[", "22", "][", "22", "];\n", "//坐标原点映射为（1，1） ", "\n\n", "//检查是否在边界内", "\n", "bool", " ", "in", "(", "int", " x,", "int", " y)", "{\n    ", "return", " x<", "1", "&&y<", "1", "?", "false", ":", "true", ";\n} \n\n", "int", " ", "dp", "(", "int", " Bx,", "int", " By,", "int", " Hx,", "int", " Hy)", "{\n    ", "//马 ", "\n    ", "memset", "(E,", "0", ",", "sizeof", "(E));\n    E[Hx][Hy]=", "-1", ";\n    ", "for", "(", "int", " i=", "-2", ";i<=", "2", ";i+=", "4", ")", "for", "(", "int", " j=", "-1", ";i<=", "1", ";i+=", "2", ")", "if", "(", "in", "(Hx+i,Hy+j))E[Hx+i][Hy+j]=", "-1", ";\n    ", "for", "(", "int", " i=", "-1", ";i<=", "1", ";i+=", "2", ")", "for", "(", "int", " j=", "-2", ";j<=", "2", ";j+=", "4", ")", "if", "(", "in", "(Hx+i,Hy+j))E[Hx+i][Hy+j]=", "-1", ";\n    ", "//for(int i=1;i<=Bx;i++)f[i][1]=1;", "\n    ", "//for(int j=1;j<=By;j++)f[1][j]=1;", "\n    f[", "1", "][", "0", "]=", "1", ";\n    ", "for", "(", "int", " i=", "1", ";i<=Bx;i++){\n        ", "for", "(", "int", " j=", "1", ";j<=By;j++){\n            ", "if", "(E[i][j]==", "-1", ")f[i][j]=", "0", ";\n            ", "else", " f[i][j]=f[i][j", "-1", "]+f[i", "-1", "][j];\n        }\n    }\n    ", "return", " f[Bx][By];\n}\n\n", "int", " ", "main", "()", "{\n    cin>>Bx>>By>>Hx>>Hy;\n    cout<<", "dp", "(Bx+", "1", ",By+", "1", ",Hx+", "1", ",Hy+", "1", ");\n    ", "return", " ", "0", ";\n} \n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;下面这个是我的&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;#include&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;\nusing namespace std;\nint n,x,l[&lt;span class=\"hljs-number\"&gt;1005&lt;/span&gt;],w[&lt;span class=\"hljs-number\"&gt;1005&lt;/span&gt;],u[&lt;span class=\"hljs-number\"&gt;1005&lt;/span&gt;],dp[&lt;span class=\"hljs-number\"&gt;1005&lt;/span&gt;];\nint main(){\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;x);\n    for(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;){\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d&amp;#34;&lt;/span&gt;,&amp;amp;l[i],&amp;amp;w[i],&amp;amp;u[i]);\n    }\n    for(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;){\n        for(int j&amp;#61;x;j&amp;gt;&amp;#61;u[i];j--){\n            dp[j]&amp;#61;max(dp[j]&amp;#43;l[i],dp[j-u[i]]&amp;#43;w[i]);\n        }\n        for(int j&amp;#61;u[i]&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;j&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j--){\n            dp[j]&amp;#43;&amp;#61;l[i];\n        }\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;*dp[x]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你的其实没啥问题&amp;#xff0c;只不过你的dp药要从0开始。因为就算没有药也有失败经验*_*.(要注意细节啊&amp;#xff0c;满意就给个采纳吧^_^)&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/181233219776122.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划五倍经验C++", ["洛谷原题：", "https://www.luogu.com.cn/problem/P1802", "初学DP，只拿了40分，但总感觉代码没问题", "转移方程：f[i][j]=max(f[i-1][j]+lose[i],f[i-1][j-use[i]]+win[i]) ", "\n", "#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,x,lose", "[1002]", ",win", "[1002]", ",use", "[1002]", ";\nlong long f", "[1002]", "[1002]", ";\n//f", "[i]", "[j]", "表示用j瓶药拿到前i人的exp\n//f", "[i]", "[j]", "=max(f", "[i-1]", "[j]", "+lose", "[i]", ",f", "[i-1]", "[j-use", "[i]", "]", "+win", "[i]", ") \nlong long dp(int n,int x){\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=x;j++){\n            if(j<use", "[i]", ")f", "[i]", "[j]", "=f", "[i-1]", "[j]", "+lose", "[i]", ";\n            else f", "[i]", "[j]", "=max(f", "[i-1]", "[j]", "+lose", "[i]", ",f", "[i-1]", "[j-use", "[i]", "]", "+win", "[i]", ");\n        }\n    }\n    return f", "[n]", "[x]", ";\n}\n\nint main(){\n    cin>>n>>x;\n    for(int i=1;i<=n;i++)cin>>lose", "[i]", ">>win", "[i]", ">>use", "[i]", ";\n    long long exp=dp(n,x);\n    cout<<5*exp;\n    return 0;\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;对于等差数列有三种情况 上升、下降、不变&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/842748858746174.png\" /&gt;&lt;/p&gt;&lt;br /&gt;可参考&lt;a href=\"https://blog.csdn.net/qq_17550379/article/details/96623816\" id=\"textarea_1647858527682_1647858864280_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;Leetcode 1027&amp;#xff1a;最长等差数列&amp;#xff08;超详细的解法&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff09;_coordinate_blog的博客-CSDN博客_最长等差子序列&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;给定一个整数数组 A&amp;#xff0c;返回 A 中最长等差子序列的长度。回想一下&amp;#xff0c;A 的子序列是列表 A[i_1], A[i_2], ..., A[i_k] 其中 0 &amp;lt;&amp;#61; i_1 &amp;lt; i_2 &amp;lt; ... &amp;lt; i_k &amp;lt;&amp;#61; A.length - 1。并且如果 B[i&amp;#43;1] - B[i]( 0 &amp;lt;&amp;#61; i &amp;lt; B.length - 1) 的值都相同&amp;#xff0c;那么序列 B 是等差的。...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/qq_17550379/article/details/96623816&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["最长等差数列动态规划", ["\n", "\n", "能不能具体讲解一下这个状态转移方程，尽量细致一点，想了半天愣是想不通"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;a[i]代表第i个要释放的囚犯的编号,为了方便处理边界问题&amp;#xff0c;我们把牢房的左墙壁和右墙壁也当作要释放的囚犯。&lt;br /&gt;\ndp[i][j]表示释放a[i]和a[j]之间应该要释放的囚犯所需要的最少金币数。&lt;/strong&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["贿赂囚犯，区间动态规划", ["区间dp的i和j连续释放之间的囚犯是什么意思啊"]], "Tag": "算法设计"}
{"Answer": "import java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static java.util.stream.Collectors.*;\r\n\r\npublic class GroupTest {\r\n    public static void main(String[] args) {\r\n        double[] nums = {100.0, 1.0, 20.0, 50.0, 90.0, 91.0, 92.0, 31.0, 32.0, 63.0,\r\n        33.0, 45.0, 56.0, 78.0, 88.0, 99.0, 8.0, 13.0, 23.0, 53.0, 67.0};\r\n\r\n        int k = 8;\r\n\r\n        group(nums, k);\r\n    }\r\n\r\n    public static void group(double[] values, int countPerGroup) {\r\n        // order first, get len%countPerGroup from middle\r\n        // the left split to several groups\r\n\r\n        // calculate the average, get len%countPerGroup numbers which totally to it\r\n        // cycle, if min, select the max\r\n\r\n        Arrays.sort(values);\r\n\r\n        List&lt;Double&gt; lstNums = new ArrayList&lt;&gt;();\r\n        for(double value: values) {\r\n            lstNums.add(value);\r\n        }\r\n\r\n        List&lt;Double&gt; middleList = new ArrayList&lt;&gt;();\r\n        int midLen = values.length%countPerGroup;\r\n\r\n        if(midLen != 0) {\r\n            middleList = middle(lstNums, midLen, Arrays.stream(values).average().getAsDouble());\r\n        }\r\n\r\n        List&lt;List&lt;Double&gt;&gt; lstGroups = new ArrayList&lt;&gt;();\r\n        int groups = values.length/countPerGroup;\r\n        for(int i = 0; i &lt; groups; i++) {\r\n            lstGroups.add(new ArrayList&lt;&gt;());\r\n        }\r\n\r\n        for(int i = 0; i &lt; countPerGroup; i++) {\r\n            lstGroups = lstGroups.stream().sorted((a, b) -&gt; {\r\n                double total_a = a.stream().reduce(0.0, Double::sum);\r\n                double total_b = b.stream().reduce(0.0, Double::sum);\r\n                return Double.compare(total_a, total_b);\r\n            }).collect(Collectors.toList());\r\n\r\n            lstGroups.forEach(group -&gt; {\r\n                group.add(max(lstNums));\r\n            });\r\n        }\r\n\r\n        if(midLen != 0) {\r\n            lstGroups.add(middleList);\r\n        }\r\n        lstGroups.forEach(group -&gt; {\r\n            System.out.println(\"average:\" + group.stream().reduce(0.0, Double::sum)/group.size()\r\n                    + \", count:\" + group.size()\r\n            + \", elements:\" + group.toString());\r\n        });\r\n    }\r\n\r\n    public static List&lt;Double&gt; middle(List&lt;Double&gt; values, int count, double average) {\r\n        List&lt;Double&gt; middleList = new ArrayList&lt;&gt;();\r\n\r\n        if(count == 1) {\r\n            middleList.add(mostNear(values, average));\r\n        } else {\r\n            List&lt;Double&gt; tmp = middle(values, count - 1, average);\r\n            double total = 0.0;\r\n            for(double value : tmp) {\r\n                total = total + value;\r\n            }\r\n\r\n            middleList.addAll(tmp);\r\n            middleList.add(mostNear(values, average * count - total));\r\n        }\r\n\r\n\r\n        return middleList;\r\n    }\r\n    public static double mostNear(List&lt;Double&gt; values, double average) {\r\n        double nearestValue = 0.0;\r\n        double gap = values.stream().max(Double::compareTo).get();\r\n        for(double value: values) {\r\n            if(Math.abs(value - average) &lt; gap) {\r\n                gap = Math.abs(value - average);\r\n                nearestValue = value;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // remove from the list\r\n        values.remove(nearestValue);\r\n        return nearestValue;\r\n    }\r\n\r\n    public static double max(List&lt;Double&gt; values) {\r\n        double maxValue = values.stream().max(Double::compareTo).get();\r\n\r\n        values.remove(maxValue);\r\n        return maxValue;\r\n    }\r\n\r\n}", "Konwledge_Point": "动态规划", "Question": ["java数据分组  动态规划 遗传算法", ["n个小数待分组，每个数组k个，如果n%k==0,那么组数为n/k个，如果n%k!=0,则最后一组的数量为n%k,组数为n/K+1,要求每个组的均值相等或者相近！"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, k,cnt&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;\n    &lt;span class=\"hljs-function\"&gt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt;&amp;gt; &lt;span class=\"hljs-title\"&gt;d&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;) {\n        cin &amp;gt;&amp;gt; d[i];\n    }\n    &lt;span class=\"hljs-function\"&gt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt;&amp;gt; &lt;span class=\"hljs-title\"&gt;dp&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;){\n                cnt&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            dp[i] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(dp[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43;k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,dp[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43;d[cnt]-d[cnt&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]);\n        }\n\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        dp[i] &amp;#61; dp[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43;k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;/*for (int i&amp;#61;1; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n       cout&amp;lt;&amp;lt;dp[i]&amp;lt;&amp;lt;endl;\n    }*/&lt;/span&gt;\n    cout &amp;lt;&amp;lt; dp[n] &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["C++算法题（动态规划算法）", ["贝西喜欢看Mooloo的节目。因为贝西是一头忙碌的奶牛，她已经计划了接下来N（1≤N≤10^5）天的时间表，她将观看Mooloo。因为Mooloo是一项付费订阅服务，她现在需要决定如何将需要支付的金额降至最低。", "\n", "Mooloo有一个有趣的订阅系统：连续d天订阅Mooloo需要d+K（1≤K≤10^9）元钱。您可以随时启动订阅，如果当前订阅到期，您可以根据需要多次启动新订阅。考虑到这一点，计算出贝西为了完成她的计划需要支付的最低金额。", "\n", "INPUT FORMAT（输入来自终端/stdin）：", "\n", "第一行包含整数N和K。", "\n", "第二行包含N个整数，描述贝西观看Mooloo的天数：1≤d1<d2<……<dN≤10^14。", "\n", "OUTPUT FORMAT（输出格式）（将输出打印到终端/标准输出）：", "\n", "请注意，此问题中涉及的大整数大小可能需要使用64位整数数据类型（例如，C/C++中的“long-long”）。", "\n", "样本输入：", "\n", "2 4", "\n", "7 9", "\n", "样本输出：", "\n", "7.", "\n", "贝西在第7天购买了为期三天的订阅，花费d+K=3+4=7元。", "\n", "样本输入：", "\n", "2 3", "\n", "1 10", "\n", "样本输出：", "\n", "8.", "\n", "贝西第一天购买一天的订阅，花费d+K=1+3=4元。贝西还在第10天购买一天的订阅，花费d+K=1+3=4元。贝西总共花了8元。", "\n", "评分：", "\n", "输入3-5:N≤10", "\n", "输入6-12：无额外限制。", "\n", "这是今天学校布置的题目，我不会，希望各位帮忙解答一下（用C++的算法进行），最希望给出代码和思路！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这一道题很容易被误认为机器人路径问题&amp;#xff0c;但你仔细看看这个题目&amp;#xff0c;这个是4行5列&amp;#xff0c;你用的是5行5列的&amp;#xff0c;应该用4行4列的。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["简单动态规划问题（寻找路径条数）", ["问题遇到的现象和发生背景", "\n", "蓝桥杯上的题", "视频链接：", "https://www.bilibili.com/video/BV1qE411E7UK?p=3", "\n", "问题相关代码，请勿粘贴截图", "\n", "#include <stdio.h>\n\nint main()\n{\n    long f[", "5", "][", "5", "]={", "0", "};\n    int i,j;\n    for(i=", "0", ";i<", "5", ";i++)\n        for(j=", "0", ";j<", "5", ";j++)\n            {\n                if(i == ", "0", " and j == ", "0", ") //递推边界", "1", " f[", "0", "][", "0", "]=", "1", "\n                    f[", "0", "][", "0", "] = ", "1", ";\n                else if(i == ", "0", " and j > ", "0", ")//递推边界", "2", "，x=", "0", "时；\n                    f[", "0", "][j] = f[", "0", "][j - ", "1", "];\n                else if(i > ", "0", " and j == ", "0", ")//递推边界", "3", "，y=", "0", "时；\n                    f[i][", "0", "] = f[i - ", "1", "][", "0", "];\n                else\n                    f[i][j] = f[i - ", "1", "][j] + f[i][j - ", "1", "];//递推核心\n            }\n        printf(", "\"%d\"", ",f[", "4", "][", "4", "]);\n        return ", "0", "; \n}\n\n", "\n", "运行结果及报错内容", "\n", "运行结果打印出的是70 而官方给出的答案却是是35", "\n", "我的解答思路和尝试过的方法", "\n", "  在这个问题中，不管是上面还是左边的字都可以接上下一个字，所以问题就转化成了“从起点（0，0）开始，移动至终点（4，4）有可以有多少条路线”.所以根据动态转移方程f[i][j] = f[i - 1][j] + f[i][j - 1]写出了以上代码。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;一个标准的多重背包问题&amp;#xff0c;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n#include &amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;\nusing namespace std;\nint n,m;//n种牌&amp;#xff0c;出m张,根据n、m的大小开二维数组d[n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][m&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] \n//这里假设n小于&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&amp;#xff0c;m小于&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt; \nint a[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;],d[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;],s;//d[i][j]表示前i种牌出m张&amp;#xff0c;一共多少种 \nint main()\n{\n    cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m;\n    for(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;) cin&amp;gt;&amp;gt;a[i]; \n    d[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    for(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;){\n        d[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        s&amp;#43;&amp;#61;a[i];//前i种牌一共s张 \n        for(int j&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;lt;&amp;#61;min(m,s);j&amp;#43;&amp;#43;){//凑j张牌  //降维的话&amp;#xff0c;这需要倒着做&amp;#xff0c;参考&lt;span class=\"hljs-number\"&gt;01&lt;/span&gt;背包\n            for(int k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&amp;#61;min(a[i],j);k&amp;#43;&amp;#43;){//取k张i &amp;#xff0c;这是一个多重背包 \n                d[i][j]&amp;#43;&amp;#61;d[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j-k];\n                d[i][j]&lt;span class=\"hljs-comment\"&gt;%&amp;#61;1e6&amp;#43;7;&lt;/span&gt;\n            } \n        }\n    } \n    cout&amp;lt;&amp;lt;d[n][m]; //降维的话&amp;#xff0c;倒着做。 \n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["求大家帮我解答一下这道动态规划题", ["现在有n种牌，第i种有ai张牌。", "\n", "现在要出m张牌，可以从手牌里任意选择。出牌时同一种牌需要放在一起，且不同种类的牌需要按牌的种类编号从小到大摆放。", "\n", "想知道一共有多少种出牌方式。对答案膜10^6 + 7的结果", "\n", "想了很久还是不会"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1.把输入的数据放到数组里面&amp;#xff1b;&lt;br /&gt;2.循环遍历相加&amp;#xff0c;步长为3&amp;#xff1b;&lt;br /&gt;3.把相加的数比较大小&amp;#xff0c;去最大的一个。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["站外题！动态规划 ！求解！！", ["求大神解答！", "题目：", "设有N 个正整数（1<=N<=1000），其中每一个均是大于等子1 小于等于10000的数。从这N个数中任取出若干个数（不能连续取相邻3个数）要求得到一种取法，使得到的和为最大。", "如：当N=6时，有6个数分别为：15,18 28 14 5 11 2133", "此时，有许多种取法，如：", "15, 18,45,33", "18. 28 21 33", "15. 28 45 33", "和为121就是满足要求的一种取法，", "\n", "输入数据的第一行是一个整数N", "第二行有N个符合条件的整数，数与数之间的间隔是用一个空格分开。", "输出数据仅有一行包含一个整数，即为满足条件的最大和。", "输入：", "6", "15 18 28 45 21 33", "输出：", "121"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码有一些问题。函数 leftsing 采用了递归的方式&amp;#xff0c;这会导致程序在处理较大的输入时运行很慢&amp;#xff0c;导致超时。此外程序没有处理可能出现的边界条件&amp;#xff0c;例如 i 等于 0 时的情况。&lt;/p&gt;\n&lt;p&gt;提供一个思路&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;首先&amp;#xff0c;定义一个数组 dp&amp;#xff0c;dp[i] 表示在前 i 个同学中出列最少的同学数&amp;#xff0c;使得剩下的同学能排成合唱队形。&lt;/p&gt;\n&lt;p&gt;对于每个同学&amp;#xff0c;有两种选择&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1、将其出列&amp;#xff0c;这样的话&amp;#xff0c;需要使得剩下的同学能排成合唱队形&amp;#xff0c;就有 dp[i] &amp;#61; dp[i-1]。&lt;br /&gt;2、将其保留&amp;#xff0c;这样的话&amp;#xff0c;需要使得它的左右两侧的同学身高都比它低&amp;#xff0c;可以使用一个数组 left[i] 表示在第 i 个同学的左侧&amp;#xff0c;最多能保留多少个比它高的同学&amp;#xff0c;使得剩下的同学能排成合唱队形。同理&amp;#xff0c;可以使用一个数组 right[i] 表示在第 i 个同学的右侧&amp;#xff0c;最多能保留多少个比它低的同学&amp;#xff0c;使得剩下的同学能排成合唱队形。就有 dp[i] &amp;#61;dp[i] &amp;#61; min(dp[i], dp[left[i]] &amp;#43; dp[right[i]] &amp;#43; 1)&lt;/p&gt;\n&lt;p&gt;于是&amp;#xff0c;就可以得到状态转移方程&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;dp[i] &amp;#61; min(dp[i-1], dp[left[i]] &amp;#43; dp[right[i]] &amp;#43; 1)&lt;/p&gt;\n&lt;p&gt;接下来&amp;#xff0c;考虑如何求出 left[i] 和 right[i]。可以使用单调栈来维护一个递增的子序列。对于第 i 个同学&amp;#xff0c;弹出栈中所有比它大的同学&amp;#xff0c;并将它压入栈中。如果栈中有 k 个同学&amp;#xff0c;就 left[i] &amp;#61; k&amp;#xff0c;也就是在第 i 个同学的左侧最多能保留 k 个比它高的同学&amp;#xff0c;使得剩下的同学能排成合唱队形。对于 right[i]&amp;#xff0c;可以从后往前扫描数组&amp;#xff0c;使用同样的方法求出。&lt;/p&gt;\n&lt;p&gt;程序输出 dp[n] 就可以了。&lt;/p&gt;\n&lt;p&gt;这是一种可行的做法&amp;#xff0c;但是它的时间复杂度是 O(n^2)&amp;#xff0c;可能还是不够优秀。如果想进一步优化&amp;#xff0c;可以考虑使用更高效的算法&amp;#xff0c;例如二分或者树状数组。&lt;br /&gt;仅供参考&amp;#xff0c;望采纳&amp;#xff0c;谢谢。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["关于动态规划合唱队问题的疑问！(语言-c语言)", ["您的程序未能在规定时间内运行结束，请检查是否循环有错或算法复杂度过大。", "\n", "通俗来说，能找到一个同学，他的两边的同学身高都依次严格降低的队形就是合唱队形。", "例子：", "123 124 125 123 121 是一个合唱队形", "123 123 124 122不是合唱队形，因为前两名同学身高相等，不符合要求", "123 122 121 122不是合唱队形，因为找不到一个同学，他的两侧同学身高递减。", "\n", "你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。", "\n", "注意：不允许改变队列元素的先后顺序 且 不要求最高同学左右人数必须相等", "\n", "数据范围： 1 \\le n \\le 3000 \\1≤n≤3000 ", "\n", "未通过样例:", "124", "16 103 132 23 211 75 155 82 32 48 79 183 13 91 51 172 109 102 189 121 12 120 116 133 79 120 116 208 47 110 65 187 69 143 140 173 203 35 184 49 245 50 179 63 204 34 218 11 205 100 90 19 145 203 203 215 72 108 58 198 95 116 125 235 156 133 220 236 125 29 235 170 130 165 155 54 127 128 204 62 59 226 233 245 46 3 14 108 37 94 52 97 159 190 143 67 24 204 39 222 245 233 11 80 166 39 224 12 38 13 85 21 47 25 180 219 140 201 11 42 110 209 77 136", "\n", "预期输出：95", "\n", "#", "include", " ", "<stdio.h>", "\n\n", "int", " ", "leftsing", "(", "int", " *height,", "int", " num,", "int", " i)", "{", "//以第i个同学为基准左边最长上升子序列", "\n", "//前面i-1组中满足：1.height[j]<height[i]2.leftsing[j]为最大值；", "\n    ", "if", "(i>", "0", "){\n      ", "int", " max1=", "0", ",max2=", "0", ";\n      ", "for", "(", "int", " j=", "0", ";j<i;j++){\n         ", "if", "(", "leftsing", "(height,num,j)>max1&&height[j]<height[i]){\n           max1=", "leftsing", "(height,num,j);\n         }\n         ", "if", "(", "leftsing", "(height,num,j)>max2){\n            max2=", "leftsing", "(height,num,j);\n         }\n      }\n      ", "if", "(max1>=max2){\n        ", "return", " max1+", "1", ";\n      }\n      ", "else", "\n        ", "return", " max2;\n    }\n    ", "else", "\n    ", "return", " ", "1", ";\n}", "//该函数输出正常", "\n\n", "int", " ", "main", "()", " ", "{\n    ", "int", " num=", "0", ";\n    ", "scanf", "(", "\"%d\"", ",&num);\n    ", "int", " height[num];\n    ", "for", "(", "int", " i=", "0", ";i<num;i++){\n        ", "scanf", "(", "\"%d\"", ",&height[i]);\n    }", "//以上输入正常，下面思考如何实现合唱队列", "\n    ", "int", " backheight[num];\n    ", "for", "(", "int", " i=", "0", ";i<num;i++){", "//对height进行倒序", "\n       backheight[i]=height[num", "-1", "-i];\n    }\n    ", "int", " best=", "0", ";\n    ", "for", "(", "int", " i=", "0", ";i<num;i++){", "//height的第i个数就是backheight的第num-1-i个数", "\n       ", "int", " temp=", "leftsing", "(height,num,i)+", "leftsing", "(backheight,num,num-i", "-1", ")", "-1", ";\n       ", "//temp越大越好", "\n       ", "if", "(temp>best)\n          best=temp;\n    }\n    ", "int", " min=num-best;\n    ", "printf", "(", "\"%d\"", ",min);\n    ", "return", " ", "0", ";\n}\n\n", "\n", "牛客刷题时遇到的问题，自测样例都能过，但是提交时就是0/20，而且报超时，用本地IDE输入错误的样例也是没有输出，很奇怪。"]], "Tag": "算法设计"}
{"Answer": "代码下载：https://download.csdn.net/download/caozhy/11449907\r\n\r\n\r\n![图片说明](https://img-ask.csdn.net/upload/201907/29/1564412731_903934.gif)\r\n\r\n\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Data;\r\nusing System.Drawing;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Windows.Forms;\r\n\r\nnamespace Q770812\r\n{\r\n    public partial class Form1 : Form\r\n    {\r\n        public Form1()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        private int[,] area;\r\n\r\n        private int step = 1;\r\n\r\n        private void button1_Click(object sender, EventArgs e)\r\n        {\r\n            //step++;\r\n            for (int k = 0; k &lt; step; k++)\r\n            {\r\n                for (int i = 0; i &lt; 30; i++)\r\n                {\r\n                    for (int j = 0; j &lt; 15; j++)\r\n                    {\r\n                        if (area[i, j] == 4) area[i, j] = 1;\r\n                    }\r\n                }\r\n                for (int i = 0; i &lt; 30; i++)\r\n                {\r\n                    for (int j = 0; j &lt; 15; j++)\r\n                    {\r\n                        if (area[i, j] == 0)\r\n                        {\r\n                            bool pt = false;\r\n                            for (int ii = (i &gt; 0 ? i - 1 : 0); ii &lt;= (i &lt; 29 ? i + 1 : 29); ii++)\r\n                                for (int jj = (j &gt; 0 ? j - 1 : 0); jj &lt;= (j &lt; 14 ? j + 1 : 14); jj++)\r\n                                {\r\n                                    if ((ii == i &amp;&amp; jj != j) || (ii != i &amp;&amp; jj == j))\r\n                                        if (area[ii, jj] == 1) pt = true;\r\n                                }\r\n                            area[i, j] = pt ? 4 : area[i, j];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            pictureBox1.Refresh();\r\n        }\r\n\r\n        private void pictureBox1_Paint(object sender, PaintEventArgs e)\r\n        {\r\n            if (area == null) return;\r\n            var g = e.Graphics;\r\n            g.FillRectangle(Brushes.White, 0f, 0f, pictureBox1.Width, pictureBox1.Height);\r\n            for (int i = 0; i &lt; 30; i++)\r\n            {\r\n                for (int j = 0; j &lt; 15; j++)\r\n                {\r\n                    Brush br = new SolidBrush(Color.FromArgb(110, 136, 199));\r\n                    switch (area[i, j])\r\n                    {\r\n                        case 0:\r\n                            br = new SolidBrush(Color.FromArgb(219, 213, 213));\r\n                            break;\r\n                        case 1:\r\n                            br = new SolidBrush(Color.FromArgb(202, 190, 180));\r\n                            break;\r\n                        case 3:\r\n                            br = new SolidBrush(Color.FromArgb(134, 134, 122));\r\n                            break;\r\n                    }\r\n                    g.FillRectangle(br, 10.0f + i * 20.0f, 10.0f + j * 20.0f, 18.0f, 18.0f);\r\n                }\r\n            }\r\n        }\r\n\r\n        private void button2_Click(object sender, EventArgs e)\r\n        {\r\n            area = new int[30, 15];\r\n            for (int i = 0; i &lt; 30; i++)\r\n            {\r\n                for (int j = 0; j &lt; 15; j++)\r\n                    area[i, j] = 0;\r\n            }\r\n            for (int i = 3; i &lt;= 11; i++)\r\n            {\r\n                area[3, i] = 3;\r\n                area[4, i] = 3;\r\n            }\r\n            for (int i = 4; i &lt;= 14; i++)\r\n            {\r\n                area[13, i] = 3;\r\n                area[14, i] = 3;\r\n            }\r\n            for (int i = 0; i &lt;= 6; i++)\r\n            {\r\n                area[22, i] = 3;\r\n                area[23, i] = 3;\r\n            }\r\n            for (int i = 0; i &lt;= 6; i++)\r\n            {\r\n                area[22, i] = 3;\r\n                area[23, i] = 3;\r\n            }\r\n            for (int i = 5; i &lt;= 6; i++)\r\n            {\r\n                area[24, i] = 3;\r\n                area[25, i] = 3;\r\n                area[26, i] = 3;\r\n            }\r\n            area[8, 7] = 1;\r\n            step = 1;\r\n            pictureBox1.Refresh();\r\n        }\r\n\r\n        private void Form1_Load(object sender, EventArgs e)\r\n        {\r\n            button2.PerformClick();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n```\r\nnamespace Q770812\r\n{\r\n    partial class Form1\r\n    {\r\n        /// &lt;summary&gt;\r\n        /// Required designer variable.\r\n        /// &lt;/summary&gt;\r\n        private System.ComponentModel.IContainer components = null;\r\n\r\n        /// &lt;summary&gt;\r\n        /// Clean up any resources being used.\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"disposing\"&gt;true if managed resources should be disposed; otherwise, false.&lt;/param&gt;\r\n        protected override void Dispose(bool disposing)\r\n        {\r\n            if (disposing &amp;&amp; (components != null))\r\n            {\r\n                components.Dispose();\r\n            }\r\n            base.Dispose(disposing);\r\n        }\r\n\r\n        #region Windows Form Designer generated code\r\n\r\n        /// &lt;summary&gt;\r\n        /// Required method for Designer support - do not modify\r\n        /// the contents of this method with the code editor.\r\n        /// &lt;/summary&gt;\r\n        private void InitializeComponent()\r\n        {\r\n            this.pictureBox1 = new System.Windows.Forms.PictureBox();\r\n            this.button1 = new System.Windows.Forms.Button();\r\n            this.button2 = new System.Windows.Forms.Button();\r\n            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();\r\n            this.SuspendLayout();\r\n            // \r\n            // pictureBox1\r\n            // \r\n            this.pictureBox1.BackColor = System.Drawing.Color.White;\r\n            this.pictureBox1.Location = new System.Drawing.Point(30, 12);\r\n            this.pictureBox1.Name = \"pictureBox1\";\r\n            this.pictureBox1.Size = new System.Drawing.Size(616, 319);\r\n            this.pictureBox1.TabIndex = 0;\r\n            this.pictureBox1.TabStop = false;\r\n            this.pictureBox1.Paint += new System.Windows.Forms.PaintEventHandler(this.pictureBox1_Paint);\r\n            // \r\n            // button1\r\n            // \r\n            this.button1.Location = new System.Drawing.Point(431, 354);\r\n            this.button1.Name = \"button1\";\r\n            this.button1.Size = new System.Drawing.Size(90, 25);\r\n            this.button1.TabIndex = 1;\r\n            this.button1.Text = \"next\";\r\n            this.button1.UseVisualStyleBackColor = true;\r\n            this.button1.Click += new System.EventHandler(this.button1_Click);\r\n            // \r\n            // button2\r\n            // \r\n            this.button2.Location = new System.Drawing.Point(556, 354);\r\n            this.button2.Name = \"button2\";\r\n            this.button2.Size = new System.Drawing.Size(90, 25);\r\n            this.button2.TabIndex = 2;\r\n            this.button2.Text = \"reset\";\r\n            this.button2.UseVisualStyleBackColor = true;\r\n            this.button2.Click += new System.EventHandler(this.button2_Click);\r\n            // \r\n            // Form1\r\n            // \r\n            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\r\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\r\n            this.ClientSize = new System.Drawing.Size(673, 391);\r\n            this.Controls.Add(this.button2);\r\n            this.Controls.Add(this.button1);\r\n            this.Controls.Add(this.pictureBox1);\r\n            this.Name = \"Form1\";\r\n            this.Text = \"Form1\";\r\n            this.Load += new System.EventHandler(this.Form1_Load);\r\n            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();\r\n            this.ResumeLayout(false);\r\n\r\n        }\r\n\r\n        #endregion\r\n\r\n        private System.Windows.Forms.PictureBox pictureBox1;\r\n        private System.Windows.Forms.Button button1;\r\n        private System.Windows.Forms.Button button2;\r\n    }\r\n}\r\n\r\n```", "Konwledge_Point": "动态规划", "Question": ["请问下面这样的路径规划动态图应该如何制作", []], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;看着应该没问题&amp;#xff0c;递归的话&amp;#xff0c;n 如果大一点话&amp;#xff0c;可能会栈溢出&amp;#xff0c; 不知道这种情况是不是也是解答错误&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["想问问以下两种动态规划方法有什么不同？为什么会导致结果不一样？", ["第一种做法的思路是先不断递归求出下格子与右格子拿到的金币数，然后根据两者的最大值来判断是走下方还是走右方。期间使用了标记数组剪枝", "\n", "def dfs(x,y):\n    if x > n-", "1", " or y > n-", "1", ":\n        return ", "0", "\n    if x == n-", "1", " and y == n-", "1", ":\n        return nums[x][y]\n    if not used[x][y]:\n        used[x][y] = ", "max", "(", "dfs", "(x+", "1", ",y),", "dfs", "(x,y+", "1", ")) + nums[x][y]\n    return used[x][y]\n    \n    \nn = ", "int", "(", "input", "())\nnums = []\nfor i in ", "range", "(n):\n    nums.", "append", "(", "list", "(", "map", "(int,", "input", "().", "split", "())))\n    \nused = [[", "0", " for i in ", "range", "(n)] for j in ", "range", "(n)]\n", "print", "(", "dfs", "(", "0", ",", "0", "))\n", "\n", "第二种思路是要想走到这个位置，就要看这个位置的上方拿的金币多点还是左方拿的金币多点，哪边拿得多就从哪边走过来", "\n", "nums = ", "[]", "\nn = int(", "input", "())\n", "for", " ", "i", " ", "in", " range(n):\n    nums", ".append", "(list(map(int, ", "input", "()", ".split", "())))\n \ndp = ", "[[0 for i in range(n)]", " ", "for", " j ", "in", " range(n)]\n\ndp", "[0]", "[0]", " = nums", "[0]", "[0]", "\n", "for", " ", "i", " ", "in", " range(", "1", ", n):\n    dp", "[i]", "[0]", " = dp", "[i - 1]", "[0]", " + nums", "[i]", "[0]", "\n    dp", "[0]", "[i]", " = dp", "[0]", "[i - 1]", " + nums", "[0]", "[i]", "\n\n", "for", " ", "i", " ", "in", " range(", "1", ", n):\n    ", "for", " j ", "in", " range(", "1", ", n):\n        dp", "[i]", "[j]", " = max(dp", "[i - 1]", "[j]", ", dp", "[i]", "[j - 1]", ") + nums", "[i]", "[j]", "\n \n", "print", "(dp[n - ", "1", "][n - ", "1", "])", "\n", "\n", "一种做法能拿满分，另一种做法只能拿30分，没有出现运行超时的情况，都是解答错误."]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/discreeter/article/details/52005835", "Konwledge_Point": "动态规划", "Question": ["不用动态规划，亲和串能做到不超时么？具体的代码和思路？", ["Problem Description", "\n人随着岁数的增长是越大越聪明还是越大越笨，这是一个值得全世界科学家思考的问题,同样的问题Eddy也一直在思考，因为他在很小的时候就知道亲和串如何判断了，但是发现，现在长大了却不知道怎么去判断亲和串了，于是他只好又再一次来请教聪明且乐于助人的你来解决这个问题。", "\n亲和串的定义是这样的：给定两个字符串s1和s2,如果能通过s1循环移位，使s2包含在s1中，那么我们就说s2 是s1的亲和串。", "\n\n", "Input", "\n本题有多组测试数据，每组数据的第一行包含输入字符串s1,第二行包含输入字符串s2，s1与s2的长度均小于100000。", "\n\n", "Output", "\n如果s2是s1的亲和串，则输出\"yes\"，反之，输出\"no\"。每组测试的输出占一行。", "\n\n", "Sample Input", "\nAABCD", "\nCDAA", "\nASD", "\nASDF", "\n\n", "Sample Output", "\nyes", "\nno"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我怀疑你是故意的吧&amp;#xff0c;哪怕是复制黏贴也好啊&amp;#xff0c;看得头都大了。两个代码不是一样的。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["一道OJ动态规划题（Print Words in Lines），同样的代码用C++能通过，改写为C就不行", ["C++版本", "\n", "\n//poj ", "3390", "\n//sep9\n#include <iostream>\n#include<memory.h>\nusing namespace std;\nconst int maxM=", "102", ";\nconst int maxN=", "10004", ";\nint dp[maxN+", "1", "][maxM+", "1", "];\nint ", "L", "[maxN];\n\nint main()\n{\n    int cases;\n    scanf(", "\"%d\"", ",&cases);\n    while(cases--){\n        int m,n,s;\n        scanf(", "\"%d%d\"", ",&m,&n);\n        for(int i=", "1", ";i<=n;i++)\n            scanf(", "\"%d\"", ",&", "L", "[i]);\n        memset(dp,", "0x7f", ",sizeof(dp));\n        dp[", "0", "][m]=", "0", ";\n        for(int i=", "1", ";i<=n;i++){\n            int x=dp[maxN][maxM];\n            for(s=m;s>=", "0", ";--s)\n                x=min(x,dp[i", "-1", "][s]);    \n            dp[i][", "L", "[i]]=x+(m-", "L", "[i])*(m-", "L", "[i]);\n            for(s=", "L", "[i]+", "2", ";s<=m;++s){\n                int x=s-", "L", "[i]", "-1", ";\n                if(dp[i", "-1", "][x]==dp[maxN][maxM])\n                    continue;\n                int y=dp[i", "-1", "][x]-(m-x)*(m-x)+(m-s)*(m-s);\n                dp[i][s]=y;\n            }\n        }\n        int ans=dp[", "0", "][maxM];\n        for(s=", "0", ";s<=m;++s)\n            ans=min(ans,dp[n][s]);\n        printf(", "\"%d\\n\"", ",ans);\n    }\n    return ", "0", ";    \n} \n", "\n", "c语言版本", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<memory.h>", "\n", "#", "define", " maxM 108", "\n", "#", "define", " maxN 10004", "\n", "int", " f[maxM+", "10", "][maxN+", "10", "];\n", "int", " L[maxN+", "1", "];\n", "int", " ", "min", "(", "int", " a,", "int", " b)", "{\n    ", "if", "(a>b)\n        ", "return", " b;\n    ", "else", "\n        ", "return", " a;\n}\n\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " c,i,x,y,fine;\n    ", "scanf", "(", "\"%d\"", ",&c);\n    ", "while", "(c--){\n        ", "int", " m,n,s;\n        ", "scanf", "(", "\"%d%d\"", ",&m,&n);\n        ", "for", "(i=", "1", ";i<=n;++i)\n            ", "scanf", "(", "\"%d\"", ",&L[i]);\n        ", "memset", "(f,", "0x7f", ",", "sizeof", "(f));\n        f[", "0", "][m]=", "0", ";\n\n        ", "for", "(i=", "1", ";i<=n;i++){\n            x=f[maxM][maxN];\n            ", "for", "(s=m;s>=", "0", ";s--)\n                x=", "min", "(x,f[i", "-1", "][s]);\n            f[i][L[i]]=x+(m-L[i])*(m-L[i]);\n\n            ", "for", "(s=L[i]+", "2", ";s<=m;s++){\n                x=s-L[i]", "-1", ";\n                ", "if", "(f[i", "-1", "][x]==f[maxM][maxN])\n                    ", "continue", ";\n                y=f[i", "-1", "][x]-(m-x)*(m-x)+(m-s)*(m-s);\n                f[i][s]=y;\n            }\n        }\n\n        fine=f[maxM][maxN];\n        ", "for", "(s=", "0", ";s<=m;s++){\n            fine=", "min", "(fine,f[n][s]);\n        }\n        ", "printf", "(", "\"%d\\n\"", ",fine);\n    }\n    ", "return", " ", "0", ";\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;按照你的代码改的&amp;#xff0c;有什么看不懂的再问我&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\nvector&amp;lt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-built_in\"&gt;generate&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; numRows) {\n\n    &lt;span class=\"hljs-comment\"&gt;//int i &amp;#61; numRows;&lt;/span&gt;\n\n    &lt;span class=\"hljs-comment\"&gt;//int j &amp;#61; numRows;&lt;/span&gt;\n\n    vector&amp;lt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-built_in\"&gt;dp&lt;/span&gt;(numRows&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;(numRows&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));               &lt;span class=\"hljs-comment\"&gt;//代表的是第i行第j列的元素是多少&lt;/span&gt;\n\n    vector&amp;lt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;&amp;gt; st;\n\n    \n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&amp;#61;numRows; i&amp;#43;&amp;#43;)\n\n        dp[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n\n\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j&amp;lt;numRows; j&amp;#43;&amp;#43;)\n\n        dp[j][j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n    st.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;({ &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; });\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; numRows; i&amp;#43;&amp;#43;) {\n        vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; s;\n        s.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(dp[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; i; j&amp;#43;&amp;#43;) {\n\n            dp[i][j] &amp;#61; dp[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; dp[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j];\n\n            &lt;span class=\"hljs-comment\"&gt;//s.push_back(dp[i, j]);&lt;/span&gt;\n            s.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(dp[i][j]);\n\n        }\n\n        st.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(s);\n\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; st;\n\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    vector&amp;lt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;&amp;gt; ans &amp;#61; &lt;span class=\"hljs-built_in\"&gt;generate&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;size_t&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; ans.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;i) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;size_t&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; ans[i].&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;j) {\n            cout &amp;lt;&amp;lt; ans[i][j] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n        }\n        cout &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["我觉得这道杨辉三角思路应该是这样的，就是用动态规划，但感觉里面错误不少，有没有朋友愿意看一下啊。", ["问题遇到的现象和发生背景", "\n", "https://leetcode-cn.com/problems/pascals-triangle/solution/", "\n", "问题相关代码，请勿粘贴截图", "\n", "class", " ", "Solution", " {\n", "public", ":\n    vector<vector<", "int", ">> ", "generate", "(", "int", " numRows) {\n        ", "int", " i = numRows;\n        ", "int", " j = numRows;\n        ", "int", " dp[i][j];               ", "//代表的是第i行第j列的元素是多少", "\n        vector<vector<", "int", ">> st;\n        vector<", "int", "> s;\n        ", "for", "(", "int", " i = ", "0", ";i<numRows;i++)\n            dp[i][", "0", "] = ", "1", ";\n\n        ", "for", "(", "int", " j = ", "0", ";j<numRows;j++)\n            dp[j][j+", "1", "] = ", "0", ";\n\n        ", "for", "(", "int", " i = ", "1", ";i<=numRows;i++){\n            ", "for", "(", "int", " j = ", "1", ";j<=i+", "1", ";j++){\n                dp[i][j] = dp[i", "-1", "][j", "-1", "] + dp[i", "-1", "][j];\n                s.", "push_back", "(dp[i,j]);\n            }\n            st.", "push_back", "(s);\n        }\n        ", "return", " st;\n    }\n};\n\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;if (result &amp;#61;&amp;#61; 0) 条件不满足的情况下就会执行。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["书上说这段代码是用动态规划优化了递归算法，但是像下面这样数组里的元素好像永远不会改变，那跟原本的递归不就没有区别了吗", ["我想问一下，下面这段代码最后的 output[n] = result 意义是什么，在这段代码里它好像并不会执行。书上说这段代码是用动态规划优化了递归算法，但是像下面这样数组里的元素好像永远不会改变，那跟原本的递归不就没有区别了吗。", "\n", "\npublic class test2 {\n    public ", "static", " ", "int", " output[] = new ", "int", "[", "1000", "];\n    public ", "static", " ", "void", " main(", "String", "[] args) {\n        ", "System", ".", "out", ".println(", "method", "(", "6", "));\n    }\n    public ", "static", " ", "int", " ", "method", "(", "int", " n){\n        ", "int", " ", "result", ";\n        ", "result", " = output[n];\n        ", "if", " (", "result", " == ", "0", "){\n            ", "if", " (n == ", "0", ")\n                ", "return", " ", "0", ";\n            ", "else", " ", "if", " (n == ", "1", ")\n                ", "return", " ", "1", ";\n            ", "else", " {\n                ", "return", " (", "method", "(n - ", "1", ") + ", "method", "(n - ", "2", "));\n            }\n        }\n        output[n] = ", "result", ";\n        ", "return", " ", "result", ";\n    }\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;if( len &amp;lt;&amp;#61; 1);&lt;br /&gt;因为这个分号&amp;#xff0c;使得你后面的代码全成了废话了。&lt;br /&gt;return s成了必然执行的&amp;#xff0c;可不是输入什麽就输出什麽麽&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["我用c语言写了一段动态规划的寻找最长回文字符，可是总是不成功，找了半天，输入babad，却输出babad，以下是代码", ["\n", "char", " * ", "longestPalindrome", "(", "char", " * s)", "\n", "{\n    ", "//读取长度", "\n    ", "int", " len = ", "strlen", "(s);\n    ", "if", "( len <= ", "1", ");\n    {\n        ", "return", " s;\n    }\n    ", "//定义布尔型", "\n    ", "bool", " dp[", "1001", "][", "1001", "];\n    ", "memset", "(dp,", "0", ",", "sizeof", "(dp));\n    dp[", "0", "][", "0", "]=", "1", ";\n     ", "//给长度为2的赋值，因为上面的排出，最短的长度就是2了", "\n     ", "for", "(", "int", " i =", "1", "; i < len;i++)\n     {\n      dp[i][i]=", "true", ";\n      ", "//因为下面判断时候会出[1][0]的时候，不然会出错", "\n      dp[i][i", "-1", "]=", "true", "; \n     }\n    ", "int", " left = ", "0", ";\n    ", "int", " right = ", "0", ";\n    ", "int", " max = ", "0", ";\n    ", "//k表示回文字节的长度，先从2开始", "\n    ", "for", "(", "int", " k=", "2", "; k <= len;k++)\n    {\n      ", "//i表示回文字符的开始位置", "\n      ", "for", "(", "int", " i =", "0", "; i < len - k +", "1", " ;i++ ) \n     {\n       ", "if", "(s[i] == s[i+k", "-1", "] && dp[i+", "1", "][i+k", "-2", "])\n       {\n            dp[i][i+k", "-1", "] =", "true", ";\n           ", "if", "(max < k", "-1", ")\n           {\n              max = k", "-1", ";\n              left = i;\n              right = i+k", "-1", ";\n           }   \n       }\n     }\n    }\n    ", "char", "* arr = (", "char", "*)", "malloc", "(", "sizeof", "(", "char", ")*(max*", "2", "));", "//因为 ap[X][Y]代表了2个字符，所以max*2才是最终的字符", "\n    ", "int", " i =", "0", ";\n    ", "for", "(;left<=right;i++)\n    {\n     arr[i]=s[left++];\n    }\n    arr[i]=", "'\\0'", ";\n    ", "return", "  arr;\n}\n"]], "Tag": "算法设计"}
{"Answer": "![](http://img.my.csdn.net/uploads/201301/23/1358910778_5267.jpg)", "Konwledge_Point": "动态规划", "Question": ["C++ LCS 算法的问题???", ["求最长公共字串，用后缀数组和动态规划相比，哪个更有优势？", "\n\n", "谢谢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;最优二叉查找树和哈夫曼树都是动态规划算法中的经典问题&amp;#xff0c;但它们是不同的问题&amp;#xff0c;它们解决的问题也不同。&lt;/p&gt;\n&lt;p&gt;最优二叉查找树问题是一个经典的搜索问题&amp;#xff0c;旨在找到一个给定有序关键字序列的最优二叉查找树&amp;#xff0c;使得在查询这些关键字时所需的比较次数最小。最优二叉查找树通常被用于数据库管理系统中&amp;#xff0c;用于快速查找关键字。&lt;/p&gt;\n&lt;p&gt;而哈夫曼树问题是一个经典的编码问题&amp;#xff0c;旨在找到一个给定字符集的最优前缀编码方式&amp;#xff0c;使得编码后的比特流长度最小。哈夫曼树通常被用于数据压缩和通信中&amp;#xff0c;用于减小数据传输的大小。&lt;/p&gt;\n&lt;p&gt;虽然这两个问题看起来相似&amp;#xff0c;但它们解决的问题不同&amp;#xff0c;所以它们的算法也有所不同。在最优二叉查找树算法中&amp;#xff0c;我们需要计算一个有序关键字序列的最优查找树&amp;#xff0c;而在哈夫曼树算法中&amp;#xff0c;我们需要计算一个字符集的最优前缀编码方式。在最优二叉查找树中&amp;#xff0c;我们需要计算每个关键字的概率&amp;#xff0c;而在哈夫曼树中&amp;#xff0c;我们需要计算每个字符的出现概率。&lt;/p&gt;\n&lt;p&gt;总之&amp;#xff0c;最优二叉查找树和哈夫曼树都是动态规划算法中的经典问题&amp;#xff0c;但它们解决的问题不同&amp;#xff0c;所以它们的算法也有所不同。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["最优二叉查找树和哈夫曼树", ["动态规划算法里的最优二叉查找树就是哈夫曼树嘛？如果不是的话它们有什么区别呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;i从1到n遍历&amp;#xff0c;求出每个r[i]。求r[i]的方法是j从1到i-1遍历&amp;#xff0c;求出最大的r[i-j]&amp;#43;r[j]&amp;#xff0c;再将最大的r[i-j]&amp;#43;r[j]与p[i]比较&amp;#xff0c;较大的一个就是r[i]&amp;#xff0c;若p[i]较大&amp;#xff0c;则将s[i]赋值i&amp;#xff0c;否则赋值j。输出最优解就是输出s[i]&amp;#xff0c;再把i赋值为i-s[i]&amp;#xff0c;两个过程循环&amp;#xff0c;直到i与s[i]相等。&lt;/p&gt;\n&lt;p&gt;外层循环次数为n&amp;#xff0c;内层循环次数为1&amp;#43;2&amp;#43;3&amp;#43;……&amp;#43;n-1&amp;#xff0c;总体时间复杂度为O(n*n)&lt;/p&gt;\n&lt;p&gt;c代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n#include&amp;lt;stdio.h&amp;gt;\nint main() {\n    int p[&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;17&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;17&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;24&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;}, r[&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;], s[&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;], n &amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    int i, j;\n\n    //求r[i]和s[i]\n    i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    while (i &amp;lt;&amp;#61; n) {\n        r[i] &amp;#61; p[i];\n        j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        s[i] &amp;#61; i;\n        while (j &amp;lt; i) {\n            if (r[j] &amp;#43; r[i - j] &amp;gt;r[i]) {\n                r[i] &amp;#61; r[j] &amp;#43; r[i - j];\n                s[i] &amp;#61; j;\n            }\n            j&amp;#43;&amp;#43;;\n        }\n        i&amp;#43;&amp;#43;;\n    }\n\n    //输出最优解\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入长度: &amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;i);\n    while (i !&amp;#61; s[i]) {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, s[i]);\n        i &amp;#61; i-s[i];\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,s[i]);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;执行结果&amp;#xff08;为了方便显示&amp;#xff0c;我临时套了个死循环&amp;#xff09;&amp;#xff1a;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/548829679176118.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["这个算法题的3、4、5有没有会做的啊", ["就写345问就行，有没有会写的啊，关于动态规划的.（这个提问要求30字实在没什么好写的、冲字数）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;建模有两种&amp;#xff0c;基于场景的建模和基于代码实现的建模。前者将实际场景抽象为人可以分析的数学模型&amp;#xff0c;后者则是将实际场景&amp;#xff08;或者是经过“提纯”后的数学模型&amp;#xff09;转换为可以编码实现的类定义。&lt;br /&gt;实际使用时&amp;#xff0c;最常见的是直接将实际场景映射为类定义&amp;#xff0c;而数学建模则完全隐匿在这个转换中不可见。&lt;br /&gt;譬如我现在有一个基于图论的最短行程算法&amp;#xff0c;想用它来解决不同仓库间的运输问题。&lt;br /&gt;首先进行数学建模&amp;#xff0c;得把仓库和图中的节点对应起来&amp;#xff0c;把路程和节点间距对应起来&amp;#xff0c;把单位耗费和节点间距的权重对应起来&amp;#xff0c;然后可以开始用那个方法来解决这个问题。简单的讲&amp;#xff0c;就是先手算一遍&amp;#xff0c;了解那些信息是必须的&amp;#xff0c;这些必须的信息是如何为算法所用的。&lt;br /&gt;然后是到计算机代码的建模。如果你所使用的语言中已经有提供合适的模型类&amp;#xff08;譬如带长度权重的节点图&amp;#xff09;&amp;#xff0c;则可以直接使用。如果没有&amp;#xff08;一般总是没有的&amp;#xff09;&amp;#xff0c;那么这些东西就需要自己来实现&amp;#xff0c;这样你的模型就有很多东西可以写了&amp;#xff0c;譬如定义一个带长度和权重的路径类&amp;#xff0c;带仓储容量的仓库类&amp;#xff0c;由若干仓库对象及关联的路径对象组成的运输网类等等&amp;#xff0c;然后在自己的算法中&amp;#xff0c;就使用这些类的对象属性进行处理&amp;#xff0c;而不要直接用那种一般人看不懂的abcd作为变量就行了。开头有点难&amp;#xff0c;慢慢的会习惯的&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["是根据算法建模还是根据模型采用算法?", ["大佬们，我在写论文，题目早都定了，不能修改，叫基于动态规划的冷链物流路径优化研究，我去看了下采用动态规划思想的算法有Floyd算法，但是好像一般用于最短路，而路径优化研究没看到过关于这个算法的，我不知道该怎么扯得上关系建模了，或许是本来就不能关联，真的现在很混乱，导师又水，问了不回，让我去看别人论文怎么写的，救救孩子吧🙏🏻"]], "Tag": "算法设计"}
{"Answer": "那个貌似是滚动数组，01背包优化用到了", "Konwledge_Point": "动态规划", "Question": ["用一维数组去代替二维数组，从而优化空间复杂度的方法叫什么啊，", ["我想问一下，例如动态规划中，因为之前的数据用不到，用1个一维数组去代替二维数组是状态压缩吗？", "\n就是那种后算出来的数据去覆盖之前的数据。使空间被优化了。它就叫什么呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在回答你问题的时候&amp;#xff0c;想问下你&amp;#xff0c;计划以后往哪个方向发展&amp;#xff1f;&lt;br /&gt;如果Java 方向&amp;#xff0c;这个大了去了&amp;#xff0c;完全没必要c/c&amp;#43;&amp;#43;&amp;#xff0c;java 搞定一切。&lt;br /&gt;如果c/c&amp;#43;&amp;#43;&amp;#xff0c;例如Linux 驱动等&amp;#xff0c;更没必要Java&amp;#xff0c;没鸟用&amp;#xff1b;&lt;br /&gt;建议走 c/c&amp;#43;&amp;#43;&lt;br /&gt;职场十几年发展下来&amp;#xff0c;得出一个结论&amp;#xff0c;你要精、精、精。当你很精一门之后&amp;#xff0c;你会发现&amp;#xff0c;其他没必要学&amp;#xff0c;因为你已经是专家了&amp;#xff0c;或者走向管理的路线。&lt;br /&gt;专家只会越来越深&amp;#xff0c;不会把面扩的很广&amp;#xff0c;你要知道公司里面有一批Java 人员。你需要的是在架构、设计上精通&amp;#xff0c;底层、硬件精通&amp;#xff1b;&lt;br /&gt;最后&amp;#xff0c;你是在是有空的话&amp;#xff0c;深入shell 、python。。。一定对你以后有好处。。。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["目前只会c和c++,有必要再学java或者其他语言吗", ["背景：我是个女生，是计科的人工智能方向的大学生，打算明年考研。", "我现在只会c和c++,目前只会用c和c++刷算法题，没试过开发，只会动态规划、深度搜索那些算法，但我看就业好像都是收会java或者python的，非常犹豫要不要学一下java。可以给一些建议吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于你对代码有一定的基础&amp;#xff0c;我建议你尝试到b站上去学习尚硅谷的java基础视频&amp;#xff0c;毕竟现在的主流还是java&amp;#xff0c;早点接触会比较好&amp;#xff0c;那个视频讲的非常详细&amp;#xff0c;适合初学者学习&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["大一学习方向，希望有人能提点提点", ["我是一名大一学生，（双非普通一本）现在还是大类，下学期分流，能顺便提点下我该分流去哪儿的方向吗？🐣，现在学了c语言，数据结构自学了寒假但有些东西算法没有搞太明白，但自学有些不太懂，teather现在讲课又太慢了比如什么动态规划，我就完全搞不懂🦁，hash也没完全搞懂，我又不想浪费时间，就像先学学新语言c++或者Java但我不知道学啥🙈"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; INF &amp;#61; &lt;span class=\"hljs-number\"&gt;0x3f3f3f3f&lt;/span&gt;;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cost[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]; &lt;span class=\"hljs-comment\"&gt;// 存储行驶1到10公里的费用&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n; &lt;span class=\"hljs-comment\"&gt;// 总路程数&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dp[&lt;span class=\"hljs-number\"&gt;1005&lt;/span&gt;]; &lt;span class=\"hljs-comment\"&gt;// dp数组&amp;#xff0c;dp[i]表示行驶i公里的最小花费&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(dp, INF, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(dp)); &lt;span class=\"hljs-comment\"&gt;// 初始化为最大值&amp;#xff0c;表示不可达&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        cin &amp;gt;&amp;gt; cost[i];\n    }\n    cin &amp;gt;&amp;gt; n;\n\n    dp[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 起点为0公里&amp;#xff0c;花费为0&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;amp;&amp;amp; j &amp;lt;&amp;#61; i; j&amp;#43;&amp;#43;) { &lt;span class=\"hljs-comment\"&gt;// 从1到10公里选择一个乘车距离&lt;/span&gt;\n            dp[i] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(dp[i], dp[i-j] &amp;#43; cost[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]); &lt;span class=\"hljs-comment\"&gt;// 转移方程&lt;/span&gt;\n        }\n    }\n\n    cout &amp;lt;&amp;lt; dp[n] &amp;lt;&amp;lt; endl; &lt;span class=\"hljs-comment\"&gt;// 输出结果&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["绿色出行（green）", ["绿色出行(green):为了保护环境，倡导“绿色出行”，小L每天都乘公共汽车上、下学。", "WH城市的公共汽车很特别，没有一辆公共汽车行驶超过10公里(但都是行驶整数公", "里)，所有街道在每公里处都有一个公共汽车站。一位顾客打算乘坐公共汽车行驶x公", "里，他可以通过多次的换乘车来完成他的旅程，顾客每次换乘车都根据他所乘坐的公", "里数来付费。小L的家和学校都恰好在公共汽车站处，相距n公里。小L是学生，在保护环境的同时当然忠要节省，他在想怎样换乘公共汽车，使得行驶n公里乘坐公共汽车的总费用最少。", "第一行十个整数分别表示行走1到10公里的费用(费用≤500)。注意这些数并无实际的经济意义，即行驶10公里费用可能比行驶1公里的少。", "第二行一个整数n表示，表示小L要乘坐的总路程数。", "Output", "仅一行包含一个整数，表示最少的费用。1sns100。", "Sample Input", "12 21 31 40 49 58 69 79 90 101", "15", "Sample Output", "147", "Sample Exp lanation", "  动态规划"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这是一个NP-hard问题&amp;#xff0c;通常需要采用启发式算法来求解。这里介绍一种贪心算法的思路&amp;#xff0c;可能并不能保证达到最优解&amp;#xff0c;但是可以得到一个比较好的近似解。&lt;/p&gt;\n&lt;p&gt;首先&amp;#xff0c;将所有任务按照区域编号升序排列。然后&amp;#xff0c;对于每个经理&amp;#xff0c;统计该经理已经负责的区域中的任务数量之和。对于每个任务&amp;#xff0c;按照区域编号升序依次将其分配给还未负责该区域的任务数量最小的经理。如果存在多个经理任务数量相同时&amp;#xff0c;选择任务数量之和最小的那个经理。最后&amp;#xff0c;检查各个经理手上的任务数量&amp;#xff0c;如果有经理比其他经理任务数量多出了两个或以上的任务&amp;#xff0c;那么就从该经理手中数量最多的任务中选择一个&amp;#xff0c;分配给任务数量最少的经理。&lt;/p&gt;\n&lt;p&gt;下面是一个C&amp;#43;&amp;#43;实现的代码示例&amp;#xff08;假设区域编号从1开始&amp;#xff09;&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&amp;#96;&amp;#96;&amp;#96;c&amp;#43;&amp;#43;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-comment\"&gt;// 定义经理和区域的类型&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; Manager;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; Region;\n\n&lt;span class=\"hljs-comment\"&gt;// 打印经理和区域的任务情况&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Manager&amp;amp; mgr, &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Region&amp;amp; region)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; mgr.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;i) {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Manager &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &amp;#43; i) &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;:&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; region.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;j) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (mgr[i] &amp;#61;&amp;#61; j) {\n                cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; region[j];\n            }\n        }\n        cout &amp;lt;&amp;lt; endl;\n    }\n}\n\n&lt;span class=\"hljs-comment\"&gt;// 贪心分配任务&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;assign&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Manager&amp;amp; mgr, &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Region&amp;amp; region, Manager&amp;amp; result)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;// 统计每个经理已经负责的区域中的任务数量之和&lt;/span&gt;\n    map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; taskCount;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; mgr.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;i) {\n        taskCount[i] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; region.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;j) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (mgr[i] &amp;#61;&amp;#61; j) {\n                taskCount[i] &amp;#43;&amp;#61; region[j];\n            }\n        }\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 按照区域编号升序分配任务&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; region.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;i) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; minTaskCount &amp;#61; INT_MAX;\n        vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; candidate;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; mgr.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;j) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (mgr[j] &amp;#61;&amp;#61; i) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (taskCount[j] &amp;lt; minTaskCount) {\n                candidate.&lt;span class=\"hljs-built_in\"&gt;clear&lt;/span&gt;();\n                candidate.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(j);\n                minTaskCount &amp;#61; taskCount[j];\n            } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (taskCount[j] &amp;#61;&amp;#61; minTaskCount) {\n                candidate.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(j);\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (candidate.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;() &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n            result[i] &amp;#61; candidate[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n            taskCount[candidate[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]] &amp;#43;&amp;#61; region[i];\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; minSum &amp;#61; INT_MAX;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; selected &amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j : candidate) {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; k &amp;lt; m; k&amp;#43;&amp;#43;) {\n        sum &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(data[k][j]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum &amp;lt; minSum) {\n        minSum &amp;#61; sum;\n        selected &amp;#61; j;\n    }\n}\n\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这段代码中&amp;#xff0c;首先初始化 minSum 为整型最大值&amp;#xff0c;selected 为 -1&amp;#xff0c;然后遍历候选的区域经理&amp;#xff0c;计算每个区域经理当前任务量的绝对值之和&amp;#xff0c;即上文代码中的 calculateSum() 函数返回值&amp;#xff0c;将结果保存在 sum 变量中&amp;#xff0c;如果 sum 小于当前最小值 minSum&amp;#xff0c;则将 minSum 更新为 sum&amp;#xff0c;同时将 selected 更新为当前区域经理 j。最后返回选中的区域经理的编号 selected。&lt;/p&gt;\n&lt;p&gt;&amp;#96;&amp;#96;&amp;#96;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["一个任务平均分配算法问题", ["有ABCDE等多个区域经理，现在有区域一二三四等若干个区域的任务向区域经理分配，每个经理负责的区域不同，（例如A负责一二三，B负责二四 C负责三五六），并且每个区域经理手上已经可能存在一定量的任务，求一种算法思路使得尽可能的使每个经理手上最后分配到的任务数量相同。", "\n", "示例：A=1 B=60 C=5 D=5 E=10 F=40（每个经理手中初始任务数量）", "\n", "           区域一=20   区域二=15  区域三=10  区域四=10  区域五=0 (目前需要被分配的任务数量）", "\n", "          A负责区域一二三四", "\n", "          B负责区域一二三四", "\n", "          C负责区域一三四", "\n", "          D负责区域二", "\n", "          E负责区域三", "\n", "          F负责区域一四五", "\n", "这个例子最后期望是A=19 B=60 C=19 D=19 E=19 F=40", "\n", "我试过自己写贪心\\动态规划 但都在个别极端情况下出现了分配不均或局部不均的情况，可不可以给个思路，有C++的或者其他的代码更好。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;读题&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;相比于其他普通大一计算机专业的学生&amp;#xff0c;你已经相对很优秀了&amp;#xff0c;当然如果你身边全是优秀并且勤奋的同学&amp;#xff0c;你可能感觉不到这一点&lt;/li&gt;&lt;li&gt;以我的理解&amp;#xff0c;除了计算机组成原理、编译原理、计算机网络这些相对偏底层的科目外&amp;#xff0c;其他本应该大二大三计算机专业才需要学习的课程&amp;#xff0c;你现在都已经掌握了&amp;#xff0c;常规课程进度已经跟不上你的学习进度&lt;/li&gt;&lt;li&gt;你和你的家人都很快乐和谐&amp;#xff0c;那么你可能是一个热爱生活的人&amp;#xff0c;算法竞赛对你来说一眼就能看到头&amp;#xff0c;翻来覆去就是那些算法、思路&amp;#xff0c;而且看不到这些算法能解决什么实际生活中的问题&amp;#xff0c;这对你来说有些迷茫和困惑&amp;#xff0c;我在大学的时候也有这种困惑&amp;#xff0c;现在回想起来如果有人在那个时候给我一些指点和帮助&amp;#xff0c;可能我会更“厉害”一点&lt;/li&gt;&lt;li&gt;读研读博最终都是在某一个领域深耕&amp;#xff0c;也就是是在深度上下功夫&amp;#xff0c;如果读研读博是你真实的想法&amp;#xff0c;那么最终你需要回归到“深度”上面来&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;我的建议是&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;课程要重视&amp;#xff0c;学校学院的实践、活动要参加&amp;#xff0c;以你的基础、学习能力和对生活的热爱&amp;#xff0c;绩点和实践分数加起来&amp;#xff0c;保研没问题&lt;/li&gt;&lt;li&gt;学好数学&amp;#xff0c;包括但不限于微积分、线性代数、概率论等&amp;#xff0c;计算机的尽头是算法&amp;#xff0c;算法的尽头是数学计算&lt;/li&gt;&lt;li&gt;一些竞赛可以参加&amp;#xff0c;一是能保研加分&amp;#xff0c;二是能结交朋友&amp;#xff0c;这对你以后的学习和工作会有帮助&amp;#xff0c;不必过分在意证书&amp;#xff0c;有兴趣和时间就去考&amp;#xff0c;没有就不考&lt;/li&gt;&lt;li&gt;了解本校优秀研究生导师&amp;#xff0c;如果你有他的课程那就更好&amp;#xff0c;看看他和他的学生在研究什么&amp;#xff0c;如果有兴趣&amp;#xff0c;你可以和导师了解&amp;#xff0c;甚至到实验室“打工”&amp;#xff0c;一般来说&amp;#xff0c;优秀的导师都很喜欢这种有潜力有兴趣的学生&amp;#xff0c;这会扩大你的知识面&amp;#xff0c;也会让你结交更多朋友&lt;/li&gt;&lt;li&gt;多了解计算机研究如何跟实际问题挂钩&amp;#xff0c;激发兴趣&amp;#xff0c;让“深耕”不那么枯燥&amp;#xff0c;兴趣是最好的老师&amp;#xff0c;比如新闻、招聘网站、博客、开源社区等&amp;#xff0c;比如前段时间的chatGPT&amp;#xff0c;比如很久之前的比特币&amp;#xff0c;比如招聘网站上紧缺的人才等等&amp;#xff0c;对有兴趣的方向通过搜索、学习和请教&amp;#xff0c;了解大概&amp;#xff0c;有机会的话去参加一些线上或线下的讲座&amp;#xff0c;甚至了解本校或其他学校有没有这方面的专家&amp;#xff0c;自己考不考虑去相关学校读研读博等&lt;/li&gt;&lt;li&gt;别忘了和自己的父母讨论&amp;#xff0c;你的父母都是高级知识分子&amp;#xff0c;能给你一些帮助&lt;/li&gt;&lt;li&gt;到了大三大四&amp;#xff0c;自己大概也有个方向了&amp;#xff0c;这时候不会再迷茫&amp;#xff0c;再从这个方向完成深度的追求&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;总结&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;打好基础&amp;#xff0c;学好数学&amp;#xff0c;热爱生活&amp;#xff0c;参加竞赛&amp;#xff0c;广交朋友&amp;#xff0c;力争保研&lt;/li&gt;&lt;li&gt;广泛涉猎&amp;#xff0c;激发兴趣&amp;#xff0c;父母建议&amp;#xff0c;确定方向&lt;/li&gt;&lt;li&gt;追求深度&amp;#xff0c;读研读博&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "动态规划", "Question": ["大一计算机专业学生应该追求深度学习还是广度学习？", ["我是某大学大一计算机科学与技术专业的学生。", "\n", "除了老师上课讲C语言程序设计基础外，我利用半年的时间自学了C++，数据结构与算法，和数据库管理系统MySQL。", "\n", "我身边的同学大多都在卷算法，学校集训队也会定期举行一些训练赛。我也刷了一些LeetCode上的算法题，但是我只能说我只是对一些基本的东西有所了解，比如递归回溯贪心深搜广搜动态规划啥常用的，有时候LeetCode上面的一些题目，还有ACM的题目对我来说有些费劲。", "\n", "我很有把握地说，我不想在算法竞赛上花费太多时间，只是因为我想更全面地发展。我的学习能力不需要怀疑，如果我真的想认真学算法，精通它，这只是时间的问题，所以不用考虑我是否能学好。", "\n", "所以说我想从更广度的方面进行学习，我下学期开学后回校准备继续用半年时间打磨我计算机的基本功，就是在计算机组成原理、计算机网络等计算机基础学科方面，然后大二参加一些竞赛，雨露均沾。", "\n", "另外的话，我的个人想法是希望我能读研读博，这是由我的家庭环境决定的，因为我妈妈就是博士，虽然发财是从来没有的，但是很有文化、有思想，我们家也过得很快乐，我也希望我也能一样，这也算是我的一种信仰吧。", "\n", "所以我是应该从广度的方面进行学习？还是从深度的方面进行学习呢？我更倾向前者，如果可以，我应该制定并遵循什么样的学习计划？可以考什么样的证书、参加比赛呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n        &lt;span class=\"hljs-attr\"&gt;g&lt;/span&gt; &amp;#61; y[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这里有访问越界&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["vc中因为数组定义顺序不同，执行结果也不同", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "\n", "#", "include", " ", "<iostream>", "\n", "using", " ", "namespace", " std;\n\n", "double", " ", "newTon", "(", "double", " s, ", "double", " x[], ", "double", " y[], ", "int", " n)", "\n", "{\n\n    ", "double", " p = y[", "0", "], g, f;\n    ", "for", " (", "int", " i = ", "0", "; i < n; i++)\n    {\n        ", "for", " (", "int", " j = n - ", "1", "; j > i; j--)\n        {\n            y[j] = (y[j] - y[j - ", "1", "]) / (x[j] - x[j - i - ", "1", "]); ", "//动态规划", "\n        }\n        g = y[i + ", "1", "];\n        ", "for", " (", "int", " k = ", "0", "; k <= i; k++)\n            g *= (s - x[k]);\n        p += g;\n    }\n    ", "return", " p;\n}\n", "int", " ", "main", "()", "\n", "{\n\n    ", "double", " y1[", "3", "] = {", "0.36789441", ", ", "0.135335283", ", ", "0.049787068", "};\n    ", "double", " x1[", "3", "] = {", "1", ", ", "2", ", ", "3", "};\n    cout << ", "newTon", "(", "2.6", ", x1, y1, ", "3", ") << endl;\n\n    ", "double", " x2[", "3", "] = {", "1", ", ", "2", ", ", "3", "};\n    ", "double", " y2[", "3", "] = {", "0.36789441", ", ", "0.135335283", ", ", "0.049787068", "};\n    cout << ", "newTon", "(", "2.6", ", x2, y2, ", "3", ") << endl;\n\n    ", "return", " ", "0", ";\n}\n", "\n", "运行结果及报错内容", "\n", "0.066365", "-0.317635", "\n", "我的解答思路和尝试过的方法", "\n", "在devc和vs里出来的两个答案是一样的，但在vc里是不同的", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;returnSize是个输出型参数。因为你要返回一个数组&amp;#xff0c;但是数组返回的时候会退化成指针&amp;#xff0c;你无法知道该数组有几个元素&amp;#xff0c;所以需要传入一个输出型参数来表示数组的元素个数。所以这个参数在函数里面修改&amp;#xff0c;你在函数外部可以拿到。&lt;br /&gt;int returnSize &amp;#61; 0&amp;#xff1b;&lt;br /&gt;然后将&amp;amp;returnSize传入函数twoSum。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["returnSize 什么用", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "题目描述\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n示例:\n\n给定 nums = ", "[", "2", ", ", "7", ", ", "11", ", ", "15", "]", ", target = ", "9", "\n\n因为 nums", "[", "0", "]", " + nums", "[", "1", "]", " = ", "2", " + ", "7", " = ", "9", "\n所以返回 ", "[", "0", ", ", "1", "]", "\n\n来源：力扣（LeetCode）\n链接：https:", "//leetcode-cn.com/problems/two-sum", "\n\n完整程序代码：\n\n#", "include", " <stdio.h>\n#", "include", " <stdlib.h>\n\n", "/* DS:Review */", "\n\n\n", "int", "* two", "Sum(", "int", "*", " ", "nums", ", ", "int", " ", "numsSize", ", ", "int", " ", "target", ", ", "int", "*", " ", "returnSize", ")", "{\n    ", "int", " *a = (", "int", " *)malloc(sizeof(", "int", ")", " * ", "2", ");", "//用动态规划的方法创建一个大小为2的数组", "\n    ", "int", " i, j;\n    ", "for", " (i = ", "0", "; i < numsSize - ", "1", "; i++) {\n        ", "for", " (j = i + ", "1", "; j < numsSize; j++) {\n            ", "if", " (nums", "[", "i", "]", " + nums", "[", "j", "]", " == ", "target) {\n                a", "[", "0", "]", " = i;\n                a", "[", "1", "]", " = j;\n                printf(", "\"%d---%d\"", ",i,j);\n                *returnSize = ", "2", ";\n                return a;\n            }\n        }\n    }               \n    *returnSize = ", "0", ";\n    return a;\n}\n\n", "int", " main(", "int", " argc, ", "char", " *argv", "[]", ") {\n    ", "int", " nums", "[", "10", "]", " = {", "1", ",", "3", ",", "7", ",", "9", ",", "4", ",", "2", "};\n    ", "int", " *returnSize;\n    two", "Sum(", "nums", ",6,7,", "returnSize", ")", ";\n    return ", "0", ";\n}\n\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/weixin_42127177/article/details/122076403\" id=\"textarea_1677232344994_1677232429491_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_42127177/article/details/122076403&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; getGiftMaxValue2(const &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *&lt;span class=\"hljs-keyword\"&gt;values&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;rows&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cols)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-keyword\"&gt;values&lt;/span&gt; || !&lt;span class=\"hljs-keyword\"&gt;rows&lt;/span&gt; || !cols)\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *maxValues &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[cols];//一维数组的内存不能申请为&lt;span class=\"hljs-keyword\"&gt;rows&lt;/span&gt;的大小&amp;#xff0c;除非&lt;span class=\"hljs-keyword\"&gt;rows&lt;/span&gt;在内层循环        \n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-keyword\"&gt;rows&lt;/span&gt;; &amp;#43;&amp;#43;i) \n        {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; cols; &amp;#43;&amp;#43;j)\n            {\n                &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; left &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; up &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                    up &amp;#61; maxValues[j];\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (j &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                    left &amp;#61; maxValues[j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                maxValues[j] &amp;#61; max(up, left) &amp;#43; &lt;span class=\"hljs-keyword\"&gt;values&lt;/span&gt;[i*cols &amp;#43; j];\n            }\n        }\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;maxValue&lt;/span&gt; &amp;#61; maxValues[cols - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n        &lt;span class=\"hljs-keyword\"&gt;delete&lt;/span&gt; maxValues;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;maxValue&lt;/span&gt;;\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["函数参数调用的问题，", ["关于函数调用的问题。", "题目是一道动态规划的题目。", "在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？", "\n", "#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 105\nint a", "[maxn]", "[maxn]", ";\nint n,m;\n\nint fun(vector<vector<int>>& grid){\n      int m = grid.size();   \n        int n = grid", "[0]", ".size(); \n  \n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            if(i==0&&j==0){\n                a", "[i]", "[j]", "=grid", "[0]", "[0]", ";\n\n            }else if(i==0){\n                a", "[i]", "[j]", "=grid", "[i]", "[j]", "+a", "[i]", "[j-1]", ";\n            }else if(j==0){\n                a", "[i]", "[j]", "=grid", "[i]", "[j]", "+a", "[i-1]", "[j]", ";\n            }else{\n                a", "[i]", "[j]", "=grid", "[i]", "[j]", " + max(a", "[i-1]", "[j]", ",a", "[i]", "[j-1]", ");\n            }\n        }\n    }\n\n    return a", "[n-1]", "[m-1]", ";\n\n\n\n}\nint main(){\n\n    int n,m;\n    cin>>n>>m;\n    int i,j;\n    vector<vector<int>>grid;\n    int sum;\n\n    for(i=0;i<n;i++){\n        for(j=0;j<m;j++){\n            cin>>grid", "[i]", "[j]", ";\n        }\n    }\n\n   sum=fun(vector<vector<int>>& grid);// 这里一直报错，请问这里应该怎么写参数。\n\n    cout<<sum;\n    \n\n\n    return 0;\n}\n\n", "\n", "关于函数参数调用的问题！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你第9行赋值给minCoins为coinCount了 &lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["各位大神，我这里哪里出错了呀，，", ["#找零兑换的动态规划", "\n\n", "#不知道哪里出错了！！！！！！老是提示 第6行 'int' object is not subscriptable", "\n\n", "def dpMakeChange(coinValueList,change,minCoins,coinsUsed):", "    for cents in range(1,change+1):", "        coinCount = cents", "        newCoin = 1", "        for j in [c for c in coinValueList if c <= cents]:", "            if minCoins[cents - j] + 1 < coinCount:", "                coinCount = minCoins[cents - j] + 1 ", "                newCoin = j", "        minCoins = coinCount", "        coinsUsed[cents] = newCoin", "    return minCoins[change]", " ", "print(dpMakeChange([1,5,10,21,25],63,[0] * 63))", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的代码问题很明显啊&amp;#xff0c;参数returnSize你没有给赋值啊。这样外边调用函数就不知道你返回的指针有多少个元素了。如果默认为0的话&amp;#xff0c;就啥也不会干&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["关于函数中的指针参数的问题", ["问题遇到的现象和发生背景", "\n", "        我在力扣上刷题的时候，被一个函数的指针参数给难住了？想问一问关于指针参数的问题\n        问题是：\n", "\n", "杨辉三角 II", "给定一个非负索引 rowIndex，返回「杨辉三角」的第 rowIndex 行。", "\n", "在「杨辉三角」中，每个数是它左上方和右上方的数的和。", "\n", "示例 1:", "\n", "输入: rowIndex = 3", "输出: [1,3,3,1]", "示例 2:", "\n", "输入: rowIndex = 0", "输出: [1]", "示例 3:", "\n", "输入: rowIndex = 1", "输出: [1,1]", "\n", "提示:", "\n", "0 <= rowIndex <= 33", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "首先是出题人给的函数格式：", "\n", "/**\n * Note: The returned", " array ", "must be malloced, assume caller calls free().\n */\nint* getRow(int rowIndex, int* returnSize){\n\n}\n\n", "\n", "这是我写的代码：", "\n", "int", "* getRow(", "int", " rowIndex, ", "int", "* returnSize){\n    ", "int", " i,j;\n    ", "int", " *", "row", "=(", "int", "*)malloc(sizeof(", "int", ")*(rowIndex+", "1", "));                 //注意这里的“rowIndex+", "1", "”\n    memset(", "row", ",", "0", ",sizeof(", "int", ")*(rowIndex+", "1", "));                          //这句也是\n    ", "row", "[", "0", "]=", "1", ";\n    ", "for", "(i=", "1", ";i<=rowIndex;i++){\n        ", "for", "(j=i;j>", "0", ";j", "--){", "\n            ", "row", "[j]+=", "row", "[j", "-1", "];\n        }\n    }\n    ", "return", " ", "row", ";\n}\n\n", "\n", "提交结果显示解答错误。", "\n", "下面这个是正确的版本：", "\n", "int", "* getRow(", "int", " rowIndex, ", "int", "* returnSize){\n    ", "int", " i,j;\n     *returnSize=rowIndex+", "1", ";                                       ", "//用了它给的指针参数", "\n    ", "int", " *", "row", "=(", "int", "*)malloc(sizeof(", "int", ")*( *returnSize));      ", "//把rowIndex+1 改成   *returnSize了", "\n    memset(", "row", ",", "0", ",sizeof(", "int", ")*( *returnSize));                ", "//这句也是", "\n    ", "row", "[", "0", "]=", "1", ";\n    ", "for", "(i=", "1", ";i<=rowIndex;i++){\n        ", "for", "(j=i;j>", "0", ";j--){\n            ", "row", "[j]+=", "row", "[j-", "1", "];\n        }\n    }\n    ", "return", " ", "row", ";\n}\n", "\n", "运行结果及报错内容", "\n", "\n", "具体错在哪我也不知道", "\n", "我的解答思路和尝试过的方法", "\n", "就用了个动态规划", "\n", "我想要达到的结果", "\n", "我想知道为啥用rowIndex+1就是错的，而用*returnSize就对了，应该是我在函数的指针参数这一块有些迷糊，想向大家请教一下函数的指针参数的知识，特别像上面这样的问题。"]], "Tag": "算法设计"}
{"Answer": "动态规划和递归毫无关系，事实上也没有“递归优化”这种说法。\r\n动态规划的思想是将要解决的问题转化为一系列逐步求解的问题并且逐步加以解决。动态规划避免了无意义的穷举，它强调逐步解决问题，让先前解决的结果可以作为后续解决问题的条件避免重复求解相同的问题。\r\n举一个例子，最长公共子序列问题（我曾经解答过，完整代码在这里：http://ask.csdn.net/questions/237208），传统的穷举是那第一个字符串的任意子序列去匹配第二个的任何子序列，比如说比较abc和bcd，abc的所有子串是\r\na\r\nb\r\nc\r\nab\r\nbc\r\nabc\r\n而bcd是\r\nb\r\nc\r\nd\r\nbc\r\ncd\r\nbcd\r\n然后再把它们两两比较，找到b c bc，最后找到最长的bc。这是无意义的穷举。\r\n用动态规划，我们将它们转化为后缀数组，然后排序\r\na\r\nab\r\nabc\r\nb\r\nb-2\r\nbc\r\nbc-2\r\nbcd-2\r\nc-2\r\ncd-2\r\nd-2\r\n注意，因为C语言可以用首地址+长度表示一个字符串，实际上我们并不需要穷举就能得到子串\r\n我们把子串排列起来，自然相邻的字符串才能匹配上。所以只要比较相邻的就可以了。\r\n为什么第二个方法要比第一个方法好，因为第一个方法做了很多重复的事情，如果a和b匹配不上，它和c更匹配不上，但是显然在没有序的集合里匹配，它就是在做重复工作。\r\n\r\n动态规划的过程中局部、整体等都可以采用递归，也可以不用。比如如上算法，其中排序的环节，你就可以用快速排序，它就是一个递归分治的过程。", "Konwledge_Point": "动态规划", "Question": ["动态规划与递归联系。", ["求教各位，以前一直觉得动态规划就是对递归的优化，最近发现并不是。我想请问各位动态规划和递归之间有什么联系吗？还是说动态规划和递归没关系。"]], "Tag": "算法设计"}
{"Answer": "点击链接加入群聊【python技术部落窝】：https://jq.qq.com/?_wv=1027&amp;k=58leovM", "Konwledge_Point": "动态规划", "Question": ["多维资源分配 动态规划  python的代码", ["如题，在写论文，求一个多维资源分配 动态规划的python代码，跪求。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;强化学习中的动态规划和最优控制中的动态规划基本上是相同的概念&amp;#xff0c;两者都是指一类基于值函数、策略等概念的动态规划算法&amp;#xff0c;用于求解最优策略或最优值函数等问题。两者的区别可能在于应用领域和侧重点略有不同&amp;#xff0c;强化学习中的动态规划更多地关注智能体与环境的交互过程&amp;#xff0c;如何通过智能体的决策和环境的反馈来优化策略或值函数等&amp;#xff0c;而最优控制中的动态规划更多地关注系统控制领域&amp;#xff0c;如何通过控制系统的决策和系统反馈来实现优化控制。 关于自适应动态规划的入门&amp;#xff0c;建议首先了解动态规划中的基本概念、算法思路和应用场景等。在学习过程中可以通过参考相关教材、论文和网络课程等途径获取相关知识。以下是入门自适应动态规划时的一些建议&amp;#xff1a; 了解基本概念和算法&amp;#xff1a;包括状态空间、值函数、策略、贝尔曼等基本概念&amp;#xff0c;以及动态规划算法中的策略迭代、值迭代等核心思想和数学工具。 学习自适应动态规划的基本原理和方法&amp;#xff1a;包括自适应系统的基本概念和特点&amp;#xff0c;自适应动态规划中的自适应控制参数、学习率、自适应规划等问题。 理解自适应动态规划在实际应用中的优势和局限&amp;#xff1a;例如在控制系统优化、自主机器人、智能交通等领域中的应用案例和实验结果。 尝试实践和扩展自适应动态规划算法&amp;#xff1a;可以从案例出发&amp;#xff0c;学习基于自适应动态规划算法的控制系统或机器人等系统&amp;#xff0c;通过对算法的本质及应用实例的深入理解&amp;#xff0c;进而深入分析和尝试扩展自适应动态规划算法。同时建议积累相关的编程和数据分析技能&amp;#xff0c;例如 Python 编程和数据可视化等。 值得一提的是&amp;#xff0c;自适应动态规划是一类比较复杂和高级的动态规划算法&amp;#xff0c;需要具备一定的数学建模和数据分析基础&amp;#xff0c;同时也需要花费较多&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["强化学习里的动态规划和最优控制里的动态规划有区别吗？", ["强化学习里的动态规划和最优控制里的动态规划有区别吗？，", "\n\n", "学习自适应动态规划如何入门呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;\nvoid strcpy(int *a, int *b, int Y){\n    for(int i&amp;#61;0;i&amp;lt;&amp;#61;Y;i&amp;#43;&amp;#43;) *(a&amp;#43;i) &amp;#61; *(b&amp;#43;i);\n}\nvoid solve(){\n        int n; scanf(&amp;#34;%d&amp;#34;,&amp;amp;n);\n        int type[n], weight[n], Y, i, j, k;\n        for(i&amp;#61;0;i&amp;lt;n;i&amp;#43;&amp;#43;) scanf(&amp;#34;%d&amp;#34;,&amp;amp;type[i]);\n        for(i&amp;#61;0;i&amp;lt;n;i&amp;#43;&amp;#43;) scanf(&amp;#34;%d&amp;#34;,&amp;amp;weight[i]);\n        scanf(&amp;#34;%d&amp;#34;,&amp;amp;Y);\n        int Min[Y&amp;#43;1], Min_Path[Y&amp;#43;1], path[n][Y&amp;#43;1];\n        for(i&amp;#61;0;i&amp;lt;&amp;#61;Y;i&amp;#43;&amp;#43;) Min[i] &amp;#61; 9999;\n        Min[0] &amp;#61; 0;\n        printf(&amp;#34;\\n&amp;#34;);\n        for(j&amp;#61;0;j&amp;lt;n;j&amp;#43;&amp;#43;){\n            for(i&amp;#61;type[j]; i&amp;lt;&amp;#61;Y; i&amp;#43;&amp;#43;)\n                if(Min[i] &amp;gt; Min[i-type[j]]&amp;#43;weight[j]){\n                    Min_Path[i] &amp;#61; type[j];\n                    Min[i] &amp;#61; Min[i-type[j]]&amp;#43;weight[j];\n                }\n            for(k&amp;#61;1;k&amp;lt;&amp;#61;Y;k&amp;#43;&amp;#43;) printf(&amp;#34;%-3d&amp;#34;,Min[k]);\n            printf(&amp;#34;\\n&amp;#34;);\n            strcpy(path[j],Min_Path,Y);\n        }\n\n        printf(&amp;#34;\\n&amp;#34;);\n        for(i&amp;#61;0;i&amp;lt;n;i&amp;#43;&amp;#43;){\n            for(j&amp;#61;1;j&amp;lt;&amp;#61;Y;j&amp;#43;&amp;#43;)\n                printf(&amp;#34;%-3d&amp;#34;,path[i][j]);\n            printf(&amp;#34;\\n&amp;#34;);\n        }\n\n        int y&amp;#61;Y;\n        printf(&amp;#34;\\n支付方式:&amp;#34;);\n        while (y){\n            printf(&amp;#34;%d &amp;#34;,Min_Path[y]);\n            y -&amp;#61; Min_Path[y];\n        }\n        printf(&amp;#34;\\n总重量:%d\\n&amp;#34;,Min[Y]);\n}\nint main(){\n    solve();\n    return 1;\n}\n/*\n4\n1 4 6 8\n1 3 2 6\n12\n */&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p style=\"text-align:center\"&gt;&lt;img alt=\"\" height=\"492\" src=\"https://img-ask.csdnimg.cn/upload/1619149096414.png\" width=\"449\" /&gt;&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划-硬币重量最轻问题", ["    设有n种不同面值的硬币，第i种硬币的币值是Vi(其中V1=1),重量是Wi,i=1,2，...n且现在购买某种总币值为y的商品，需要用这些硬币付款，如果每种钱币使用的个数不限，那么如何选择付款的方法使得付出钱币的总重量最轻？使用动态规划设计策略设计一个求解该问题的算法。假设问题的输入实例是：", "\n\n", "     V1=1， V2=4， V3=6， V4=8", "\n\n", "     W1=1， W2=2，W3=4，W4=6", "\n\n", "     Y=12", "\n\n", "要求输出优化函数表和标记函数表、以及硬币支付方式。", "\n\n", "最好用C语言"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;理解图&lt;br /&gt;&lt;img title=\"image.png\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/625479045926181.png\" /&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划c++编程题：铺砖", ["我好像见过类似的题，但只有一种砖，这有两种砖；", "求思路即可；（毕竟动归一般只需要一个状态转移方程吧？）", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;#include&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;br /&gt;using namespace std;&lt;br /&gt;const int MAX_N &amp;#61; 10010;&lt;br /&gt;int Num[MAX_N][2];&lt;/p&gt;\n&lt;p&gt;int Sum[MAX_N][MAX_N];&lt;br /&gt;int N, X;&lt;br /&gt;int main()&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; X;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for (int i &amp;#61; 1; i &amp;lt;&amp;#61; N; i&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        cin &amp;gt;&amp;gt; Num[i][0] &amp;gt;&amp;gt; Num[i][1];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    Sum[0][0] &amp;#61; 1;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for (int i &amp;#61; 1; i &amp;lt;&amp;#61; N; i&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        for (int j &amp;#61; 0; j &amp;lt;&amp;#61; X; j&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            if (Sum[i - 1][j])&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                Sum[i][j &amp;#43; Num[i][0]] &amp;#61; Sum[i][j &amp;#43; Num[i][1]] &amp;#61; 1;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    if (Sum[N][X]&amp;#61;&amp;#61;1)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        cout &amp;lt;&amp;lt; &amp;#34;Yes&amp;#34; &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    else&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        cout &amp;lt;&amp;lt; &amp;#34;No&amp;#34; &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;}&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划跳跃问题c++", ["（用动态规划，c++实现）", "小明在数轴上的坐标 0 处。现在小明将进行N次跳跃。第i次朝数轴正方向跳ai或bi个单位。请你判断跳N次以后他能否停留在坐标X", "\n", "输入描述", "\n", "第一行输入N和X，接下来N行输入ai和bi，其中", "1≤i≤N", "1≤ai,bi≤100", "1≤X≤10000", "\n", "输出描述", "\n", "如果能在 N 次跳跃后到达位置 X，则输出 Yes，否则输出 No。", "\n", "用例输入 ", "\n", "2 10", "3 6", "4 5", "\n", "用例输出 ", "\n", "Yes"]], "Tag": "算法设计"}
{"Answer": "动态规划严格说不是算法，而是思路。就是求出一个中间的结果，再用它作为下次求解的条件，从而避免重复的运算（相比较穷举和遍历），提高性能。\r\n动态规划不一定是递归的，反之也不一定。", "Konwledge_Point": "动态规划", "Question": ["一个大一小白，想问动态规划是干嘛的", ["C语言老师给了好多个课题让我们自己去学然后上讲台讲给同听。我负责动态规划，但不知道动态规划是干嘛的，知道涉及到递归"]], "Tag": "算法设计"}
{"Answer": "&lt;h1 id=\"h1_报错_1661228630664\"&gt;报错&lt;/h1&gt;\n&lt;p&gt;原因在于你没开启C&amp;#43;&amp;#43;11&amp;#xff0c;如果是DEV这里可以开启&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/98844482216612.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;如果不是dev&amp;#xff0c;那么就去百度一下你的IDE如何开启C&amp;#43;&amp;#43;11&lt;/p&gt;\n&lt;p&gt;开启后就没有error了&amp;#xff0c;只有warning&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/409255822166131.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["#动态规划#的问题，如何解决？", ["动态规划", "\n", "\n#include<bits/stdc++.h>\n#include<iostream>\n\nusing namespace std;\nconst int ", "N", "=", "11", ",", "M", "=", "28", ",inf=", "0x3f3f3f", ",", "Day", "=", "30", ";\nint dp[", "32", "][", "N", "+", "1", "][", "405", "][", "605", "],zd,qd,", "FZ", ";\nint cost_water,cost_food,walk,dig,buy;\nint xh_water[", "3", "]= {", "5", ",", "8", ",", "10", "},xh_food[", "3", "]= {", "7", ",", "6", ",", "10", "};//不同天气条件基础消耗\nbool cz[", "N", "+", "1", "],ks[", "N", "+", "1", "];\n\nstruct node\n{\n    short day; // 天数\n    short from; // 持续天数\n    int water,food;\n    int money;\n    bool operator!=(const node &x)\n    {\n        return x.day!=day || x.from!=from || x.water!=water || x.food!=food ;\n    };\n} path[", "31", "][", "N", "+", "1", "][", "405", "][", "605", "],lastpath;\nint  weather[", "31", "]=\n    {", "-1", ",", "1", ",", "1", ",", "0", ",", "2", ",", "0", ",", "1", ",", "2", ",", "0", ",", "1", ",", "1", ",\n        ", "2", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "1", ",", "1", ",\n        ", "0", ",", "0", ",", "1", ",", "0", ",", "2", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", "\n    };//", "30", "天的天气条件情况“", "1", "”代表高温，“", "0", "”代表晴朗，“", "2", "”代表沙暴\n\nvector <int> g[", "N", "];\nmap <int,int> mp;\nvoid push_back(int x,int y)\n{\n    g[x].push_back(y);\n    g[y].push_back(x);\n}\n\nvoid build_map()\n{\n    push_back(", "1", ",", "2", ");//从哪走到哪\n    push_back(", "2", ",", "3", ");\n    push_back(", "2", ",", "5", ");\n    push_back(", "5", ",", "6", ");\n    push_back(", "3", ",", "4", ");\n    push_back(", "4", ",", "7", ");\n    push_back(", "6", ",", "7", ");\n    push_back(", "7", ",", "8", ");\n    push_back(", "8", ",", "9", ");\n    push_back(", "9", ",", "10", ");\n    push_back(", "10", ",", "11", ");\n\n    mp[", "1", "]=", "1", ";//走哪\n    mp[", "2", "]=", "25", ";\n    mp[", "3", "]=", "26", ";\n    mp[", "4", "]=", "27", ";\n    mp[", "5", "]=", "24", ";\n    mp[", "6", "]=", "23", ";\n    mp[", "7", "]=", "21", ";\n    mp[", "8", "]=", "9", ";\n    mp[", "9", "]=", "15", ";\n    mp[", "10", "]=", "14", ";\n    mp[", "11", "]=", "12", ";\n    for(int i=", "1", "; i<=", "N", "; i++)\n    {\n        cz[i]=", "0", ";\n        ks[i]=", "0", ";\n    }\n    cz[", "9", "]=", "1", ";\n    ks[", "11", "]=", "1", ";\n    zd=", "4", ";\n    qd=", "1", ";\n\n    return ;\n}\nvoid init()\n{\n    memset(dp,-inf,sizeof(dp));\n    ", "FZ", "=", "1200", ";\n    cost_water=", "5", ";\n    cost_food=", "10", ";\n\n    walk=", "2", ";\n    buy=", "2", ";\n    dig=", "3", ";\n\n\n    for(int k=", "0", "; k<=", "405", "; k++)\n    {\n        for(int l=", "0", "; l<=", "601", "; l++)\n        {\n            if(k*", "3", "+l*", "2", "<=", "FZ", ")\n            {\n                dp[", "0", "][qd][k][l]=", "10000", "-k*cost_water-l*cost_food;\n            }\n        }\n    }\n    printf(", "\"init %d\\n\"", ",dp[", "0", "][", "1", "][", "178", "][", "333", "]);\n    path[", "0", "][", "1", "][", "0", "][", "0", "]= {", "0", ",", "0", ",", "0", ",", "0", "};\n    return ;\n}\nint main()\n{\n\n\n    build_map();\n    init();\n    for(int i=", "0", "; i<", "Day", "; i++)\n    {\n        printf(", "\"第%d天\\n\"", ",i);\n        int tq=weather[i];\n        for(int j=", "1", "; j<=", "N", "; j++)\n        {\n            if(cz[j])// 村庄\n            {\n                for(int w=", "0", "; w<=", "405", "; w++)\n                {\n                    for(int f=", "0", "; w*", "3", "+f*", "2", "<=", "1200", "; f++)\n                    {\n                        //购买或不够买物资(ww=", "0", ",ff=", "0", "就是不购买)\n                        if(tq==", "2", ") //停留\n                        {\n                            int money=dp[i][j][w][f];\n                            for(int ww=", "0", "; ww<=money/cost_water; ww++)\n                            {\n                                for(int ff=", "0", "; ff<=(", "FZ", "-(w+ww)*", "3", ")/", "2", "-f; ff++)\n                                {\n\n                                    if(w+ww-xh_water[tq]>=", "0", "&&f+ff-xh_food[tq]>=", "0", "&&dp[i][j][w][f]", "-2", "*ww*cost_water", "-2", "*ff*cost_food>=", "0", ")\n                                    {\n                                        if(dp[i+", "1", "][j][w+ww-xh_water[tq]][f+ff-xh_food[tq]]<dp[i][j][w][f]", "-2", "*ww*cost_water", "-2", "*ff*cost_food)\n                                        {\n                                            dp[i+", "1", "][j][w+ww-xh_water[tq]][f+ff-xh_food[tq]]=dp[i][j][w][f]", "-2", "*ww*cost_water", "-2", "*ff*cost_food;\n                                            path[i+", "1", "][j][w+ww-xh_water[tq]][f+ff-xh_food[tq]]= {i,j,w,f,dp[i][j][w][f]", "-2", "*ww*cost_water", "-2", "*ff*cost_food};\n                                        }\n                                    }\n\n                                }\n                            }\n                        }\n                        else //从j走到jj\n                        {\n                            for(auto jj :g[j])\n                            {\n                                int money=dp[i][j][w][f];\n                                for(int ww=", "0", "; ww<=money/cost_water; ww++)\n                                {\n                                    for(int ff=", "0", "; ff<=(", "FZ", "-(w+ww)*", "3", ")/", "2", "-f; ff++)\n                                    {\n                                        if(w+ww-walk*xh_water[tq]>=", "0", "&&f+ff-walk*xh_food[tq]>=", "0", "&&dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food>=", "0", ")\n                                        {\n                                            if(dp[i+", "1", "][jj][w+ww-walk*xh_water[tq]][f+ff-walk*xh_food[tq]]<dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food)\n                                            {\n                                                dp[i+", "1", "][jj][w+ww-walk*xh_water[tq]][f+ff-walk*xh_food[tq]]=dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food;\n                                                path[i+", "1", "][jj][w+ww-walk*xh_water[tq]][f+ff-walk*xh_food[tq]]= {i,j,w,f,dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food};\n                                            }\n\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else if (ks[j])// 矿山\n            {\n                for(int w=", "0", "; w<=", "405", "; w++)\n                {\n                    for(int f=", "0", "; w*", "3", "+f*", "2", "<=", "1200", "; f++)\n                    {\n                        // 已经停留一天了，可以挖矿\n                        if(w-dig*xh_water[tq]>=", "0", "&&f-dig*xh_food[tq]>=", "0", ")\n                        {\n                            if(dp[i+", "1", "][j][w-dig*xh_water[tq]][f-dig*xh_food[tq]]<dp[i][j][w][f]+", "1000", "&&dp[i][j][w][f]>=", "0", ")\n                            {\n                                dp[i+", "1", "][j][w-dig*xh_water[tq]][f-dig*xh_food[tq]]=dp[i][j][w][f]+", "1000", ";\n                                path[i+", "1", "][j][w-dig*xh_water[tq]][f-dig*xh_food[tq]]= {i,j,w,f,dp[i][j][w][f]+", "1000", "};\n                            }\n\n                        }\n                        // 在矿山不挖矿或 不允许挖矿\n                        if(tq==", "2", ") //停留但不挖矿\n                        {\n                            if(w-xh_water[tq]>=", "0", "&&f-xh_food[tq]>=", "0", ")\n                            {\n                                if(dp[i+", "1", "][j][w-xh_water[tq]][f-xh_food[tq]]<dp[i][j][w][f]&&dp[i][j][w][f]>=", "0", ")\n                                {\n\n                                    dp[i+", "1", "][j][w-xh_water[tq]][f-xh_food[tq]]=dp[i][j][w][f];\n                                    path[i+", "1", "][j][w-xh_water[tq]][f-xh_food[tq]]= {i,j,w,f,dp[i][j][w][f]};\n                                }\n\n                            }\n                        }\n                        else\n                        {\n                            if(w-walk*xh_water[tq]>=", "0", "&&f-walk*xh_food[tq]>=", "0", ")\n                            {\n                                for(auto jj:g[j])\n                                {\n                                    if(dp[i+", "1", "][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]<dp[i][j][w][f]&&dp[i][j][w][f]>=", "0", ")\n                                    {\n                                        dp[i+", "1", "][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=dp[i][j][w][f];\n                                        path[i+", "1", "][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]= {i,j,w,f,dp[i][j][w][f]};\n                                    }\n\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else //普通区\n            {\n                for(int w=", "0", "; w<=", "405", "; w++)\n                {\n                    for(int f=", "0", "; w*", "3", "+f*", "2", "<=", "1200", "; f++)\n                    {\n                        if(tq==", "2", ") //在j点停留\n                        {\n                            if(w-xh_water[tq]>=", "0", "&&f-xh_food[tq]>=", "0", "&&dp[i][j][w][f]>=", "0", ")\n                            {\n                                if(dp[i+", "1", "][j][w-xh_water[tq]][f-xh_food[tq]]<dp[i][j][w][f])\n                                {\n                                    dp[i+", "1", "][j][w-xh_water[tq]][f-xh_food[tq]]=dp[i][j][w][f];\n                                    path[i+", "1", "][j][w-xh_water[tq]][f-xh_food[tq]]= {i,j,w,f,dp[i][j][w][f]};\n                                }\n                            }\n                        }\n                        else// 走到jj点\n                        {\n                            for(auto jj :g[j])\n                            {\n                                if(w-walk*xh_water[tq]>=", "0", "&&f-walk*xh_food[tq]>=", "0", "&&dp[i][j][w][f]>=", "0", ")\n                                {\n                                    if(dp[i+", "1", "][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]<dp[i][j][w][f])\n                                    {\n\n                                        dp[i+", "1", "][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=dp[i][j][w][f];\n                                        path[i+", "1", "][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]= {i,j,w,f,dp[i][j][w][f]};\n\n                                    }\n\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    int ans=-inf;\n    node lastpath;\n    int last_water=", "0", ",last_food=", "0", ",last_day=", "Day", ";\n    for(int i=", "0", "; i<=", "Day", "; i++)\n    {\n        for(int w=", "0", "; w<=", "405", "; w++)\n            for(int f=", "0", "; w*", "3", "+", "2", "*f<=", "1200", "; f++)\n            {\n                if(dp[i][zd][w][f]>ans)\n                {\n                    ans=dp[i][zd][w][f];\n                    lastpath=path[i][zd][w][f];\n                    last_water=w;\n                    last_food=f;\n                    last_day=i;\n                }\n            }\n    }\n    stack<node> s;\n    stack<int> my;\n    printf(", "\"天数:%d 天气:%d %d 水:%d 食物:%d 资金:%d\\n\"", ",last_day,weather[", "Day", "],zd,last_water,last_food,ans);\n    s.push((node)\n    {\n        last_day,zd,last_water,last_food,ans\n    });\n\n\n    while(lastpath!=path[", "0", "][", "1", "][", "0", "][", "0", "])\n    {\n        s.push(lastpath);\n        printf(", "\"天数:%d 天气:%d %d 天气:%d 食物:%d 资金:%d\\n\"", ",lastpath.day,weather[lastpath.day],mp[lastpath.from],lastpath.water,lastpath.food,lastpath.money);\n        my.push(lastpath.money);\n        lastpath=path[lastpath.day][lastpath.from][lastpath.water][lastpath.food];\n    }\n    freopen(", "\"output.txt\"", ",", "\"w\"", ",stdout);\n    my.push(my.top());\n    while (!s.empty())\n    {\n        node t=s.top();\n        int money=my.top();\n        printf(", "\"天数:%d 天气:%d 获得资金:%d 水:%d 食物:%d 资金:%d\\n\"", ",t.day,weather[t.day],mp[t.from],t.water,t.food,money);\n        s.pop();\n        my.pop();\n    }\n    printf(", "\"%d\\n\"", ",ans);\n    return ", "0", ";\n}\n\n\n", "\n", "\n", "运行结果及报错内容", "\n", "\n", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|140|error: 'jj' does not name a type|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|159|error: expected ';' before '}' token|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|159|error: expected primary-expression before '}' token|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|159|error: expected ';' before '}' token|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|159|error: expected primary-expression before '}' token|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|159|error: expected ')' before '}' token|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|159|error: expected primary-expression before '}' token|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|159|error: expected ';' before '}' token|", "D:\\Users\\86187\\Documents\\shuame\\Cache\\穿越沙漠\\main.cpp|175|warning: extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by default]|", "\n"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/weixin_39778570/article/details/87095270", "Konwledge_Point": "动态规划", "Question": ["多维资源动态规划 Matlab求解", []], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/nan81962325/article/details/80202508", "Konwledge_Point": "动态规划", "Question": ["算法【动态规划类型的问题】", ["对一棵树进行着色，每个结点可着黑色或白色，相邻结点不能着相同黑色，但可着相同白色，令树的根为r，请设计一种算法对树中尽量多的节点着黑色", "\n\n", "不需要写代码啦，希望有大神给一个思路"]], "Tag": "算法设计"}
{"Answer": "[b]一个线性规划的问题[/b]\r\n\r\n设总吨数:K \r\n设22顿车辆数为：x\r\n设29顿车辆数为：y\r\n设32顿车辆数为：m\r\n设40顿车辆数为：n\r\n\r\n列方程：\r\n\r\nx+y+m+n &lt;=21;\r\n22x+29y+32m+40n &gt;= K；\r\nx , y,m ,n 为正整数\r\nx&gt;0\r\ny&gt;0\r\nm&gt;0\r\nn&gt;0\r\n\r\n\r\n求x+y+m+n的最优解（当x+y+m+n相等时，取22x+29y+32m+40n最小的x,y,m,n）\r\n==============================\r\n条件太小，只能从1开始，用穷举法。", "Konwledge_Point": "动态规划", "Question": ["关于一个动态规划的问题", ["问题描述：现有21辆车，其中载重22吨的有2台、29吨的有6台、32吨的有7台、40吨的有6台，求最佳车辆分配方案。", "\n输入:总吨数", "\n输出：车辆分配方案 需要的车辆最少（车辆载重量最低也是一个评价因素，当需要的车辆数目相同时，载重量低的车辆为最优解）为最优解", "\n\n", "示例：", "\n输入： 101", "\n输出： 29吨一台 32吨一台 40吨一台", "\n\n", "求算法描述...."]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;对&amp;#xff0c;不装入第i件物品和装入第i件物品&amp;#xff08;前提是能装下&amp;#xff09;进行比较价值哪个更大&lt;br /&gt;这个讲动态规划很全面&lt;a href=\"https://zhuanlan.zhihu.com/p/93857890\" id=\"textarea_1634011914188_1634012084777_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;动态规划之背包问题系列 - 知乎&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;背包问题是一类经典的动态规划问题&amp;#xff0c;它非常灵活&amp;#xff0c;需要仔细琢磨体会&amp;#xff0c;本文先对背包问题的几种常见类型作一个总结&amp;#xff0c;然后再看看LeetCode上几个相关题目。 本文首发于我的博客&amp;#xff0c;传送门根据 维基百科&amp;#xff0c;背包问题&amp;#xff08;Knapsa…&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://static.zhihu.com/heifetz/favicon.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://zhuanlan.zhihu.com/p/93857890&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划问题的个人理解", ["假设背包的容量无穷大,那么说到我加入(i+1)件物品肯定比i件物品的价值大,但是实际情况背包的容量是有限的。可不可以理解为当每多一件物品,新物品+前面剩余价值最大值组合 和 旧物品的最大排列组合相对比,留下最大值"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;O(n^2)&lt;br /&gt;很明显&amp;#xff0c;两层循环&lt;br /&gt;第一层平方级别&lt;br /&gt;第二层常数级别&lt;br /&gt;所以是平方级别&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划求一下这个时间复杂度", [" for(int i=1; i<=n*m; i++)", "            for(int j=0; j<=14; j++)", "            {", "                if(j==0)//只有一种情况，由dp[i-1][j+5]+b[i]的情况也就是上一段有5的气然后用掉了", "                    dp[i][j]=dp[i-1][j+5]+b[i];", "                else if(j<10)//有两种情况，1，由上一段直接跑过来，2，由上一段消耗一张加速卡跑过来；", "                    dp[i][j]=min(dp[i-1][j-1]+a[i],dp[i-1][j+5]+b[i]);", "                else if(j==10)//有两种情况，1，由上一段直接跑过来，2，由上一段的14+1变成10跑过来；", "                    dp[i][j]=min(dp[i-1][j-1]+a[i],dp[i-1][14]+a[i]);", "                else if(j>10)//只有一种情况，由上一段路直接跑过来；", "                    dp[i][j]=dp[i-1][j-1]+a[i];", "            }"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;将单独赋值的m放到第一个后&amp;#xff0c;req就不会报错了&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["lingo动态规划求生产计划", ["lingo求解出现问题，不知为何，代码如下", "\n", "sets:\npart/", "1.", ".7", "/:set,hold,a;\ntime/", "1.", ".6", "/:capacity;\nuses(part,part):req;\npxt(part,time):demand,x,y,inv;\nendsets\n\ndata:\ndemand = ", "40", " ", "0", " ", "100", " ", "0", " ", "90", " ", "10", "\n          ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n          ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n          ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n          ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n          ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n          ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", ";\ncapacity = ", "10000", " ", "0", " ", "5000", " ", "5000", " ", "1000", " ", "1000", ";\nset = ", "400", " ", "500", " ", "1000", " ", "300", " ", "200", " ", "400", " ", "100", ";\nhold = ", "12", " ", "0.6", " ", "1.0", " ", "0.04", " ", "0.03", " ", "0.04", " ", "0.04", ";\na = ", "0", " ", "5", " ", "8", " ", "0", " ", "0", " ", "0", " ", "0", ";\nreq = ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n      ", "5", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n      ", "7", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n      ", "0", " ", "9", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n      ", "0", " ", "11", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n      ", "0", " ", "13", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n      ", "0", " ", "0", " ", "15", " ", "0", " ", "0", " ", "0", " ", "0", ";\nM = ", "25000", ";\n", "enddata", "\n\n", "min", " ", "=", " ", "@sum(pxt(i,j):set(i)*y(i,j)+hold(i)*inv(i,j))", ";\n\n", "@for(pxt(i,j): @if(j#eq#1,0,inv(i,j-1))+x(i,j)-inv(i,j)=\n                        demand(i,j)+@sum(part(k):req(i,k)*x(k,j)))", ";\n", "@for(time(j):@sum(part(i):a(i)*x(i,j))<capacity(j))", ";\n\n", "@for(pxt:X<=M*y;@bin(y))", ";\n\n", "\n", "出现以下问题", "\n", "[Error Code:   ", "29", "]\n\n  Invalid ", "number", " of initialization ", "values", " in ", "a", " DATA/INIT/CALC\n  statement.  The required ", "number", " of ", "values", " ", "is", ":          ", "42", ".\n\n     ", "14", "]            ", "0", " ", "0", " ", "0", " ", "0", " ", "0", " ", "0", "\n                            ^\n\n", "\n", "感谢大家指导！谢谢"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/qq_40379678/article/details/82955119", "Konwledge_Point": "动态规划", "Question": ["这个动态规划的问题有点难，用C语言实现", ["Problem Description", "\nMr Cheng is a collector of old Chinese porcelain, more specifically late 15th century Feng dynasty vases. The art of vase-making at this time followed very strict artistic rules. There was a limited number of accepted styles, each defined by its shape and decoration. More specifically, there were 36 vase shapes and 36 different patterns of decoration – in all 1296 different styles.", "\n\n", "For a collector, the obvious goal is to own a sample of each of the 1296 styles. Mr Cheng however, like so many other collectors, could never afford a complete collection, and instead concentrates on some shapes and some decorations. As symmetry between shape and decoration was one of the", "\nmain aestheathical paradigms of the Feng dynasty, Mr Cheng wants to have a full collection of all combinations of k shapes and k decorations, for as large a k as possible. However, he has discovered that determining this k for a given collection is not always trivial. This means that his collection might actually be better than he thinks. Can you help him?", "\n\n", "Input", "\nOn the first line of the input, there is a single positive integer n, telling the number of test scenarios to follow. Each test scenario begins with a line containing a single positive integer m <=100 , the number of vases in the collection. Then follow m lines, one per vase, each with a pair of numbers, si and di, separated by a single space, where si ( 0 < i <= 36 ) indicates the shape of Mr Cheng's i:th vase, and di ( 0 < i <=36 ) indicates its decoration.", "\n\n", "Output", "\nFor each test scenario, output one line containing the maximum k, such that there are k shapes and k decorations for which Mr Cheng's collection contains all k*k combined styles.", "\n\n", "Sample Input", "\n2", "\n5", "\n11 13", "\n23 5", "\n17 36", "\n11 5", "\n23 13", "\n2", "\n23 15", "\n15 23", "\n\n", "Sample Output", "\n2", "\n1"]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/tonghao/p/4802967.html", "Konwledge_Point": "动态规划", "Question": ["这个问题用动态规划的算法可以怎么实现的呢？", ["Problem Description", "\nYou are given N baskets of gold coins. The baskets are numbered from 1 to N. In all except one of the baskets, each gold coin weighs w grams. In the one exceptional basket, each gold coin weighs w-d grams. A wizard appears on the scene and takes 1 coin from Basket 1, 2 coins from Basket 2, and so on, up to and including N-1 coins from Basket N-1. He does not take any coins from Basket N. He weighs the selected coins and concludes which of the N baskets contains the lighter coins. Your mission is to emulate the wizard's computation.", "\n\n", "Input", "\nThe input file will consist of one or more lines; each line will contain data for one instance of the problem. More specifically, each line will contain four positive integers, separated by one blank space. The first three integers are, respectively, the numbers N, w, and d, as described above. The fourth integer is the result of weighing the selected coins.", "\n\n", "N will be at least 2 and not more than 8000. The value of w will be at most 30. The value of d will be less than w.", "\n\n", "Output", "\nFor each instance of the problem, your program will produce one line of output, consisting of one positive integer: the number of the basket that contains lighter coins than the other baskets.", "\n\n", "Sample Input", "\n10 25 8 1109", "\n10 25 8 1045", "\n8000 30 12 959879400", "\n\n", "Sample Output", "\n2", "\n10", "\n50"]], "Tag": "算法设计"}
{"Answer": "http://www.2cto.com/kf/201504/390807.html", "Konwledge_Point": "动态规划", "Question": ["Balance 天平问题，用动态规划", ["Description", "\n\n", "Gigel has a strange \"balance\" and he wants to poise it. Actually, the device is different from any other ordinary balance. ", "\nIt orders two arms of negligible weight and each arm's length is 15. Some hooks are attached to these arms and Gigel wants to hang up some weights from his collection of G weights (1 <= G <= 20) knowing that these weights have distinct values in the range 1..25. Gigel may droop any weight of any hook but he is forced to use all the weights. ", "\nFinally, Gigel managed to balance the device using the experience he gained at the National Olympiad in Informatics. Now he would like to know in how many ways the device can be balanced. ", "\n\n", "Knowing the repartition of the hooks and the set of the weights write a program that calculates the number of possibilities to balance the device. ", "\nIt is guaranteed that will exist at least one solution for each test case at the evaluation. ", "\nInput", "\n\n", "The input has the following structure: ", "\n? the first line contains the number C (2 <= C <= 20) and the number G (2 <= G <= 20); ", "\n? the next line contains C integer numbers (these numbers are also distinct and sorted in ascending order) in the range -15..15 representing the repartition of the hooks; each number represents the position relative to the center of the balance on the X axis (when no weights are attached the device is balanced and lined up to the X axis; the absolute value of the distances represents the distance between the hook and the balance center and the sign of the numbers determines the arm of the balance to which the hook is attached: '-' for the left arm and '+' for the right arm); ", "\n? on the next line there are G natural, distinct and sorted in ascending order numbers in the range 1..25 representing the weights' values. ", "\nOutput", "\n\n", "The output contains the number M representing the number of possibilities to poise the balance.", "\nSample Input", "\n\n", "2 4 ", "\n-2 3 ", "\n3 4 5 8", "\nSample Output", "\n\n", "2"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/hnust_xiehonghao/article/details/7911575", "Konwledge_Point": "动态规划", "Question": ["这个问题用线段数还是用动态规划？回溯算法怎么实现？", ["Problem Description", "\n\n", "In the year 8888, the Earth is ruled by the PPF Empire . As the population growing , PPF needs to find more land for the newborns . Finally , PPF decides to attack Kscinow who ruling the Mars . Here the problem comes! How can the soldiers reach the Mars ? PPF convokes his soldiers and asks for their suggestions . “Rush … ” one soldier answers. “Shut up ! Do I have to remind you that there isn’t any road to the Mars from here!” PPF replies. “Fly !” another answers. PPF smiles :“Clever guy ! Although we haven’t got wings , I can buy some magic broomsticks from HARRY POTTER to help you .” Now , it’s time to learn to fly on a broomstick ! we assume that one soldier has one level number indicating his degree. The soldier who has a higher level could teach the lower , that is to say the former’s level > the latter’s . But the lower can’t teach the higher. One soldier can have only one teacher at most , certainly , having no teacher is also legal. Similarly one soldier can have only one student at most while having no student is also possible. Teacher can teach his student on the same broomstick .Certainly , all the soldier must have practiced on the broomstick before they fly to the Mars! Magic broomstick is expensive !So , can you help PPF to calculate the minimum number of the broomstick needed .", "\nFor example : ", "\nThere are 5 soldiers (A B C D E)with level numbers : 2 4 5 6 4;", "\nOne method :", "\nC could teach B; B could teach A; So , A B C are eligible to study on the same broomstick.", "\nD could teach E;So D E are eligible to study on the same broomstick;", "\nUsing this method , we need 2 broomsticks.", "\nAnother method:", "\nD could teach A; So A D are eligible to study on the same broomstick.", "\nC could teach B; So B C are eligible to study on the same broomstick.", "\nE with no teacher or student are eligible to study on one broomstick.", "\nUsing the method ,we need 3 broomsticks.", "\n……", "\n\n", "After checking up all possible method, we found that 2 is the minimum number of broomsticks needed. ", "\n\n", "Input", "\nInput file contains multiple test cases. ", "\nIn a test case,the first line contains a single positive number N indicating the number of soldiers.(0<=N<=3000)", "\nNext N lines :There is only one nonnegative integer on each line , indicating the level number for each soldier.( less than 30 digits);", "\n\n", "Output", "\nFor each case, output the minimum number of broomsticks on a single line.", "\n\n", "Sample Input", "\n4", "\n10", "\n20", "\n30", "\n04", "\n5", "\n2", "\n3", "\n4", "\n3", "\n4", "\n\n", "Sample Output", "\n1", "\n2"]], "Tag": "算法设计"}
{"Answer": "http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=2944", "Konwledge_Point": "动态规划", "Question": ["字母猜谜问题，用动态规划算法怎么解决？", ["Problem Description", "\nAnna Graham is a puzzle maker who prides herself in the quality and complexity of her work. She makes puzzles of all kinds - crosswords, logic problems, acrostics, and word search puzzles, to name but a few. For each puzzle, she has developed a set of rules which she constrains herself to follow. For word search puzzles, she insists not only that all the words be connected to one another (as in most word search puzzles), but also that removing any word from the word list will not cause one or more words to become disconnected from the rest. (Two words are connected if they contain a common letter in the grid.) The example word search puzzle on the left satisfies this condition, but the one on the right does not (removing the word Pascal from the word list disconnects Java from the other two words).", "\nYour job is to write a program that checks to see if Anna’s word search problems are up to snuff.", "\n\n", "Input", "\nInput will consist of multiple test cases. The first line of each test case contains 3 integers n m l, where n and m are the number of rows and columns in the puzzle and l is the number of words. Following this are n lines containing m uppercase characters each (the puzzle) followed by l lines containing one word each (the word list, in mixed case). Each word in the word list will appear in the puzzle exactly once. There will be no more than 100 rows and 100 columns in the puzzle and no more than 100 words to search for. There will be no spaces in the input words.", "\n\n", "Output", "\nFor each problem instance, output the word Yes or No depending on whether the puzzle satisfies Anna’s constraints.", "\n\n", "Sample Input", "\n5 6 3", "\nPBROGR", "\nPASCAL", "\nASMMIN", "\nGIICON", "\nTCELST", "\nBASIC", "\nLISP", "\nPascal", "\n5 6 4", "\nPBROJR", "\nPASCAL", "\nASMMVN", "\nGIICAN", "\nTCELST", "\nBASIC", "\nJava", "\nLISP", "\nPascal", "\n0 0 0", "\n\n", "Sample Output", "\nYes", "\nNo"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你可以参考如下链接&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/the_ZED/article/details/104174375\"&gt;https://blog.csdn.net/the_ZED/article/details/104174375&lt;/a&gt;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/qq_41785863/article/details/88769368\"&gt;https://blog.csdn.net/qq_41785863/article/details/88769368&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;解决思路和代码都在链接中&amp;#xff0c;我就不重述了。&lt;/p&gt;\n&lt;p&gt;如果对你有帮助&amp;#xff0c;可以给我个采纳吗&amp;#xff0c;谢谢!! 点击我这个回答右上方的&lt;strong&gt;【采纳】&lt;/strong&gt;按钮&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["求c语言代码做大臣的旅费的两种方法，分别是动态规划和分支界定，要让我能在电脑上运行", ["【问题描述】  ", "很久以前，T王国空前繁荣。为了更好地管理国家，王国修建了大量的快速路，用于连接首都和王国内的各大城市。 ", "为节省经费，T国的大臣们经过思考，制定了一套优秀的修建方案，使得任何一个大城市都能从首都直接或者通过其他大城市间接到达。同时，如果不重复经过大城市，从首都到达每个大城市的方案都是唯一的。 ", "J是T国重要大臣，他巡查于各大城市之间，体察民情。所以，从一个城市马不停蹄地到另一个城市成了J最常做的事情。他有一个钱袋，用于存放往来城市间的路费。 ", "聪明的J发现，如果不在某个城市停下来修整，在连续行进过程中，他所花的路费与他已走的距离有关，在走第x千米到第x+1千米这一千米中（x是整数），他花费的路费是x+10这么多。也就是说走1千米花费11，走2千米要花费23。 ", "J大臣想知道：他从某一个城市出发，中间不休息，到达另一个城市，所有可能花费的路费中最多是多少呢？  ", "\n", "输入格式 ", "输入的第一行包含一个整数n，表示包括首都在内的T王国的城市数 ", "城市从1开始依次编号，1号城市为首都。 ", "接下来n-1行，描述T国的高速路（T国的高速路一定是n-1条） ", "每行三个整数Pi, Qi, Di，表示城市Pi和城市Qi之间有一条高速路，长度为Di千米。  ", "\n", "输出格式 ", "输出一个整数，表示大臣J最多花费的路费是多少。 ", "样例输入", "1 ", "5 ", "1 2 2 ", "1 3 1 ", "2 4 5 ", "2 5 4 ", "样例输出", "1 ", "135 ", "输出格式", "大臣J从城市4到城市5要花费135的路费。 ", "上面就是习题", "我自己在网上也有找代码，就是不知道这个是上面方法中的哪一个，我不介意你在网上找代码告诉我，只要能运行就行，但是最好把代码稍微修改，只要让老式不发现就行。时间在七月十四日之前", "。", "接受私信联系"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* &lt;span class=\"hljs-title\"&gt;search&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;*s,&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;*t)&lt;/span&gt;\n&lt;/span&gt;{    \n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t_size&amp;#61;&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(t),s_size&amp;#61;&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(s),T,i,j;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *p&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;(s_size-t_size);i&amp;#43;&amp;#43;)\n    {\n        p&amp;#61;s&amp;#43;i;\n        T&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;t_size;j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(*p!&amp;#61;*(t&amp;#43;j))\n            {\n                T&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n            p&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(T&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(T&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; s&amp;#43;i;\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* S &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;qwertyuoiuywerqwrew&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* T &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;ty&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* R &amp;#61; &lt;span class=\"hljs-built_in\"&gt;search&lt;/span&gt;(S,T);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(R &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Not Found\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(S)-&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(R));\n    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["定义两个字符串s和t，在s中查找t。如果能够找到，则输出t在s中首次出现的第一个字符的下标；否则，输出“Not Found”。", ["定义两个字符串s和t，在s中查找t。如果能够找到，则输出t在s中首次出现的第一个字符的下标；否则，输出“Not Found”。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考一下&amp;#xff1a;&lt;a href=\"https://juejin.cn/post/6979215311820029982\"&gt;https://juejin.cn/post/6979215311820029982&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;如果对你有帮助&amp;#xff0c;可以点击我这个回答右上方的【采纳】按钮&amp;#xff0c;给我个采纳吗&amp;#xff0c;谢谢&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["MATLAB动态规划优化调度代码", ["有没有大神会MATLAB动态规划优化调度代码，可以教我一下吗，有偿。实在是搞不懂了。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;不是同一个意思。动态规划是一种解决复杂问题的算法&amp;#xff0c;它通过将问题分解成子问题&amp;#xff0c;并且通过解决子问题来求解原问题。而cplex中的动态搜索是指在求解MIP问题时&amp;#xff0c;根据列子空间变化情况根据目标函数的优化值进行变量选择&amp;#xff0c;并不是像动态规划将问题分解成子问题。两者的应用场景和解决问题的方法不同&amp;#xff0c;需要根据具体的问题来选择正确的方法。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划和cplex中的MIP动态搜索是一回事吗", ["cplex中对MIP问题的求解中写道MIP搜索方式：动态搜索。请问这里的动态搜索和常说的动态规划是一个意思吗，如果不是那有什么不同呢？"]], "Tag": "算法设计"}
{"Answer": "思路如下：\r\n题目的要求本质上是说有x个人，分成y组，要求每组至少有个一个人。问有多少种分法。\r\n动态数组为dp[x][y]。表示x个人分成y组有多少种分法。有题目要求所知，\r\n对所有x，dp[x][1] = 1，dp[x][y] = 1，如果x &lt; y，则dp[x][y] = 0.否则，\r\ndp[x][y] = dp[x-1][y] * y + dp[x-1][y-1]，也就是说，状态[x,y]肯定可以从二种相邻状态得到，\r\n第一种，x-1个人已经组成了y组，则第x个人可以放入任意一组中，也就是有dp[x-1][y]_*y种可能；\r\n第二种，x-1个人已经组成了y-1组，则第x个人必须被放到第yzu中，也就是有dp[x-1][y-1]种可能。\r\n对于x-1个人组成了y-2甚至更少组的情况，不可能在多一个人情况下组成y组，可以不予考虑。c++程序如下：_\r\n\r\n\r\n```\r\n const int INF = 110; \r\nint dp[INF][INF]; \r\n\r\nvoid buildDP() {\r\n\tfor (int i = 1; i &lt; INF; i++) {\r\n\t\tdp[i][1] = 1; \r\n\t\tdp[i][i] = 1; \r\n\t}\r\n\r\n\tfor (int i = 2; i &lt; INF; i++) {\r\n\t\tfor (int j = 2; j &lt; i; j++) {\r\n\t\t\tdp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] * j; \r\n\t\t}\r\n\t}\r\n}\r\n\r\nint main() {\r\n\tint x, y; cin &gt;&gt; x &gt;&gt; y; \r\n\r\n\tbuildDP(); \r\n\r\n\tcout &lt;&lt; dp[x][y] &lt;&lt; endl; \r\n\r\n\treturn 0; \r\n}\r\n```", "Konwledge_Point": "动态规划", "Question": ["动态规划问题求解思路", ["动态规划题目：请问这道问题的各阶段确定状态变量如何确定？请各位大神指教！", "\n假设工人人数为 x，有 y 项任务(其中：1 <= y,x <= 100)，假定每个任务的工作量都是一样的，要求每个工人至少完成一项任务，同时还要求每项任务至少要被完成一次，问有多少种安排方案？当然也有可能没有一种方案存在。", "\n（附测试数据：x=4 ,y=2时，结果为7", "\n\n", "                    x=15 ,y=12,结果为106470\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以当作一辆车&amp;#xff0c;第一辆车先走&amp;#xff0c;采集过的置为0&amp;#xff0c;然后第2辆车再走。简单的动态规划问题&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Solution&lt;/span&gt;{\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;run&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[][] arr, String name&lt;/span&gt;)&lt;/span&gt;{\n        List&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[]&amp;gt; res &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; row &amp;#61; arr.length;\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; column &amp;#61; arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].length;\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[][] temp &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[row][column];\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;row; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; column; j&amp;#43;&amp;#43;) {\n                &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; top &amp;#61; i &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ? temp[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j] : &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; left &amp;#61; j &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ? temp[i][j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] : &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                temp[i][j] &amp;#61; Math.max(top, left) &amp;#43; arr[i][j];\n            }\n        }\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; car &amp;#61; temp[row&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][column&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;];\n        System.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(name &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;最大值&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; car);\n        &lt;span class=\"hljs-comment\"&gt;//获取car1的路径&lt;/span&gt;\n        res.&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[]{row&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,column&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;});\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; row&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,j&amp;#61;column&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; j&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n            &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; top &amp;#61;temp[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j];\n            &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; left &amp;#61; temp[i][j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;];\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(top &amp;gt;&amp;#61; left){\n                i--;\n            }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n                j--;\n            }\n            res.&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[]{i, j});\n            arr[i][j] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i-- &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n            arr[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            res.&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[]{i, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;});\n        }\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (j-- &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n            arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][j] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            res.&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[]{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, j});\n        }\n        System.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(name &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;路径&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k &amp;#61; res.size()&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;; k&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;--k){\n            System.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.print(Arrays.toString(res.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(k)));\n        }\n        System.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println();\n    }\n\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;String[] args&lt;/span&gt;)&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[][] a &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[][]{&lt;!-- --&gt;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;},{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;},{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;},{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;},{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}};\n        run(a, &lt;span class=\"hljs-string\"&gt;&amp;#34;car1&amp;#34;&lt;/span&gt;);\n        run(a, &lt;span class=\"hljs-string\"&gt;&amp;#34;car2&amp;#34;&lt;/span&gt;);\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/797193559256167.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;&lt;strong&gt;给个采纳吧&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划问题，请大家看一下", ["两台月球矿车从A点向B点移动探测，每台矿车每次可以向右或向下移动一步，移动到的位置对应的数据为可采集的矿石数量 假设每台矿车矿石装载量无限，请求出两台矿车都到达B点后采集到的矿石数量总和最大值，并将他们经过的路径输出 动态规划问题", "算法思想  代码和伪代码  复杂度（空间和时间）", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;h2 id=\"h2_1、暴力解法_1639658522861\"&gt;1、暴力解法&lt;/h2&gt;\n&lt;ul&gt;&lt;li&gt;所谓暴力解法&amp;#xff0c;就是穷举所有情况。因为对于长度为 $n$ 的原序列&amp;#xff0c;它的子序列总共有 $2^n$ 种情况&amp;#xff0c;所以利用深度优先搜索枚举所有情况&amp;#xff0c;然后取 &amp;#34;满足相邻两元素递增并且长度最长&amp;#34; 的子序列就是答案&amp;#xff0c;当然这种方法肯定是不可取的&amp;#xff0c;因为随着 $n$ 的不断变大&amp;#xff0c;整个求解时间复杂度呈指数级增长。&lt;/li&gt;&lt;/ul&gt;\n&lt;h2 id=\"h2_2、朴素解法_1639658522862\"&gt;2、朴素解法&lt;/h2&gt;\n&lt;ul&gt;&lt;li&gt;朴素解法采用的是动态规划的思想。首先当然是设计状态。&lt;h3 id=\"h3_1&amp;#xff09;设计状态_1639658522862\"&gt;1&amp;#xff09;设计状态&lt;/h3&gt;\n&lt;/li&gt;&lt;li&gt;对于数组序列 $a_i(1 \\le i \\le n)$&amp;#xff0c;令 $f[i]$ 表示以第 $i$ 个数 $a_i$ 结尾的最长递增子序列的长度。&lt;/li&gt;&lt;li&gt;那么&amp;#xff0c;我们考虑以第 $i$ 个数 $a_i$ 结尾的最长递增子序列&amp;#xff0c;它在这个序列中的前一个数一定是 $a_j(1 \\le j &amp;lt; i)$ 中的一个&amp;#xff0c;所以&amp;#xff0c;如果我们已经知道了 $f[j]$&amp;#xff0c;那么就有 $f[i] &amp;#61; f[j] &amp;#43; 1$。显然&amp;#xff0c;我们还需要满足 $a_j &amp;lt; a_i$ 这个递增的限制条件。&lt;h3 id=\"h3_2&amp;#xff09;状态转移方程_1639658522862\"&gt;2&amp;#xff09;状态转移方程&lt;/h3&gt;\n&lt;/li&gt;&lt;li&gt;那么就可以得出状态转移方程&amp;#xff1a;$$f[i] &amp;#61; \\max_{j&amp;#61;1}^{i-1} (f[j] \\ | \\  a_j &amp;lt; a_i) &amp;#43; 1$$&lt;/li&gt;&lt;li&gt;这里 $f[j]$ 是 $f[i]$ 的子结构&amp;#xff0c;而 $max(f[j])$ 是 $f[i]$ 的最优子结构&amp;#xff0c;当然我们需要考虑一种情况&amp;#xff0c;就是没有找到最优子结构的时候&amp;#xff0c;例如&amp;#xff1a;$i&amp;#61;1$ 或者 不存在 $a_j &amp;lt; a_i$ 的 $j$&amp;#xff0c;此时 $f[i] &amp;#61; 1$&amp;#xff0c;表示 $a_i$ 本身是一个长度为 $1$ 的最长递增子序列。&lt;/li&gt;&lt;li&gt;$f[i]$ 数组可以通过两层循环来求解&amp;#xff0c;如下图表所示&amp;#xff1a;&lt;/li&gt;&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210614171004963.png#pic_center\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;-|&lt;span class=\"hljs-string\"&gt;-&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;-&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;-&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;-&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;-&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;-&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;-\n$a[i]$&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;1&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;2&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;4&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;6&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;3&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;5&lt;/span&gt;|9\n$f[i]$|&lt;span class=\"hljs-string\"&gt;1&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;2&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;3&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;4&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;3&lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;4&lt;/span&gt;|5\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3 id=\"h3_3&amp;#xff09;时间复杂度分析_1639658522883\"&gt;3&amp;#xff09;时间复杂度分析&lt;/h3&gt;\n&lt;ul&gt;&lt;li&gt;状态数 $f[...]$ 总共 $O(n)$ 个&amp;#xff0c;状态转移的消耗为 $O(n)$&amp;#xff0c;所以总的时间复杂度为 $O(n^2)$&amp;#xff0c;所以对于这类问题&amp;#xff0c;一般能够接受的 $n$ 的范围在千级别&amp;#xff0c;也就是 $1000, 2000, 3000 ...$。如果是 $n&amp;#61;10000, 100000$ 的情况&amp;#xff0c;就需要考虑优化了。&lt;/li&gt;&lt;li&gt;那么&amp;#xff0c;下文将介绍最长单调子序列的优化算法&amp;#xff0c;基于的是 贪心 的思想&amp;#xff0c;为了方便理解&amp;#xff0c;将 &amp;#34;单调&amp;#34; 一词替换为 &amp;#34;递增&amp;#34;。均以 最长递增子序列 为例进行讲解。&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "动态规划", "Question": ["请问动态规划里的最长递增子系列问题", ["请问动态规划里的最长递增子系列问题", "为什么时间复杂度是 nlog2 的呀"]], "Tag": "算法设计"}
{"Answer": "http://zhidao.baidu.com/link?url=DusTYd_4dgXuIS_G88sIwfRCR7viclzAEjlx45dQIXVNvisa28lctiMmi90qEkjl1wJ7B66bDEgZpeGhXkQd8rZX8L5xW7e4n63K9bQUrB_", "Konwledge_Point": "动态规划", "Question": ["概率问题,动态规划求解", ["大神们,用动态规划怎么解这道题呀?", "\n问题描述", "\n　　生成n个∈[a,b]的随机整数，输出它们的和为x的概率。", "\n输入格式", "\n　　一行输入四个整数依次为n，a，b，x，用空格分隔。", "\n输出格式", "\n　　输出一行包含一个小数位和为x的概率，小数点后保留四位小数", "\n样例输入", "\n2 1 3 4", "\n样例输出", "\n0.3333", "\n数据规模和约定", "\n　　对于50%的数据，n≤5.", "\n　　对于100%的数据，n≤100,b≤100."]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这是一道动态规划题目。&lt;/p&gt;\n&lt;p&gt;我们可以使用自底向上的方法来求解这道题目。&lt;/p&gt;\n&lt;p&gt;首先我们可以定义一个数组dp[i]表示到第i个时间结点的最大收获。&lt;/p&gt;\n&lt;p&gt;具体来说&amp;#xff0c;我们可以从小到大循环每个时间结点i&amp;#xff0c;对于每个时间结点i&amp;#xff0c;我们可以循环每个指向它的时间结点j&amp;#xff0c;如果有多个指向它的时间结点j&amp;#xff0c;则取收获最大的那个即可。&lt;/p&gt;\n&lt;p&gt;最终结果就是dp[n]&amp;#xff0c;即最后一个时间结点的最大收获值。&lt;/p&gt;\n&lt;p&gt;具体代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;int n&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\nint v[MAX_N]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\nint f[MAX_N]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\nint dp[MAX_N]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n\nint main()\n{\n    cin &amp;gt;&amp;gt; n&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    for (int i &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) cin &amp;gt;&amp;gt; v[i];&lt;/span&gt;\n    for (int i &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) cin &amp;gt;&amp;gt; f[i];&lt;/span&gt;\n\n    for (int i &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; n&lt;span class=\"hljs-comment\"&gt;; i &amp;gt;&amp;#61; 1; i--)&lt;/span&gt;\n    {\n        if (f[i] &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) dp[i] &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; v[i]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n        else\n        {\n            dp[i] &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; v[i]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n            for (int j &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; f[i]&lt;span class=\"hljs-comment\"&gt;; j !&amp;#61; 0; j &amp;#61; f[j]) dp[i]&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["关于#C++动态规划#的问题,如何解决?", ["希望能帮忙解决一下今天不会的题(应该是动态规划):", "\n", "\n", "\n", "\n", "最好是C++的代码加上思路!谢谢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;动态规划&amp;#xff0c;光讲概念肯定很难理解的&amp;#xff0c;还是需要多加实践。&lt;br /&gt;建议多刷题&amp;#xff0c;文章的话我可以提供一些&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/120107337?ops_request_misc&amp;#61;%257B%2522request%255Fid%2522%253A%2522163965567116780264065144%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;amp;request_id&amp;#61;163965567116780264065144&amp;amp;biz_id&amp;#61;0&amp;amp;utm_medium&amp;#61;distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-120107337.pc_v2_rank_blog_default&amp;amp;utm_term&amp;#61;%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92&amp;amp;spm&amp;#61;1018.2226.3001.4450\" id=\"textarea_1639655597089_1639655696292_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;夜深人静写算法&amp;#xff08;二&amp;#xff09;- 动态规划入门_英雄哪里出来-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;全网独家《动态规划》从入门到精通&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/WhereIsHeroFrom/article/details/120107337?ops_request_misc&amp;#61;%257B%2522request%255Fid%2522%253A%2522163965567116780264065144%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;amp;request_id&amp;#61;163965567116780264065144&amp;amp;biz_id&amp;#61;0&amp;amp;utm_medium&amp;#61;distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-120107337.pc_v2_rank_blog_default&amp;amp;utm_term&amp;#61;%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92&amp;amp;spm&amp;#61;1018.2226.3001.4450&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划的子问题到底是指什么呢？", ["动态规划的子问题到底是指什么呢？这块有详细的教程吗？", "如果有一些能够参考的博文也可以"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;[[0]*(n&amp;#43;1) for _ in range(m&amp;#43;1)] 这整体不是列表推导式吗&lt;br /&gt;意思就是生成一个m行n列的数组每项值为0&amp;#xff0c;print(dp) 就能看出来生成的是什么了。&lt;br /&gt;for _ in range(m&amp;#43;1) 你应该知道for in 语句吧&amp;#xff0c; 这个 _ 你不喜欢可以换成其他的不影响&amp;#xff0c;反正又不使用。&lt;/p&gt;\n&lt;p&gt;w[j] 没定义是应为没把全部代码写出来&amp;#xff0c;w[] v[] 这两个不都是要输入的吗&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["python 动态规划创建列表相关问题", ["\n", "最近在学python，在刷题的时候遇到一道动态规划题——背包问题，有一些代码看不懂。", "\n", "\n", "dp = ", "[", "[0]", "*(n+1) for _ in range(m+1)]", "\nfor i in range(1,m+1):\n    for j in range(1,n+1):\n        if j-w", "[i]", ">=0:\n            dp", "[i]", "[j]", " = max(dp", "[i-1]", "[j]", ", dp", "[i-1]", "[j-w", "[i]", "]", "+v", "[i]", ")\n        else:\n            dp", "[i]", "[j]", " = dp", "[i-1]", "[j]", "\nreturn dp", "[m]", "[n]", "\n\n", "\n", "附完整问题截图：", "\n", "\n", "想问问这些代码是什么意思？尤其是第一行，没见过这种写法，有两个地方看不懂——\"[0]*(n+1)\"和for后面的\"_\"。", "还有，第四行为什么可以直接把w[j]写进来，前面的代码里也没定义过。", "提前谢谢解答。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;import java.util.*;&lt;/p&gt;\n&lt;p&gt;import static java.lang.Math.*;&lt;/p&gt;\n&lt;p&gt;public class  Shiyaner&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;public static void main(String[] args)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;final  int m &amp;#61; 5;&lt;/p&gt;\n&lt;p&gt;final  int n &amp;#61; 5;&lt;/p&gt;\n&lt;p&gt;//  定义向上&amp;#xff0c;向右的代价&amp;#xff0c;以及最优代价&lt;/p&gt;\n&lt;p&gt;int[][] Cost &amp;#61; new int[m&amp;#43;1][n&amp;#43;1];&lt;/p&gt;\n&lt;p&gt;int[][] Down &amp;#61; new int[m][n&amp;#43;1];&lt;/p&gt;\n&lt;p&gt;int[][] Right &amp;#61; new int[m&amp;#43;1][n];&lt;/p&gt;\n&lt;p&gt;int count &amp;#61; 0, i &amp;#61; 0, j &amp;#61; 0;&lt;/p&gt;\n&lt;p&gt;//  随机的产生向上代价数组Above&amp;#xff0c;并输出&lt;/p&gt;\n&lt;p&gt;for(i &amp;#61; 0; i &amp;lt; m; i&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;for(j &amp;#61; 0; j &amp;lt; n&amp;#43;1; j&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;Random rand &amp;#61; new Random();&lt;/p&gt;\n&lt;p&gt;Down[i][j] &amp;#61; (rand.nextInt(5)&amp;#43;5);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;System.out.printf(&amp;#34;Down:\\n&amp;#34;);&lt;/p&gt;\n&lt;p&gt;for(i &amp;#61; 0; i &amp;lt; m; i&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;for(j &amp;#61; 0; j &amp;lt; n&amp;#43;1; j&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;System.out.printf(&amp;#34;%5d&amp;#34;, Down[i][j]);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;System.out.println(&amp;#34;\\n&amp;#34;);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;//  随机的产生向右代价数组Right&amp;#xff0c;并输出&lt;/p&gt;\n&lt;p&gt;for(i &amp;#61; 0; i &amp;lt; m&amp;#43;1; i&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;for(j &amp;#61; 0; j &amp;lt; n; j&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;Random rand &amp;#61; new Random();&lt;/p&gt;\n&lt;p&gt;Right[i][j] &amp;#61; (rand.nextInt(5)&amp;#43;5);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;System.out.printf(&amp;#34;Right:\\n&amp;#34;);&lt;/p&gt;\n&lt;p&gt;for(i &amp;#61; 0; i &amp;lt; m&amp;#43;1; i&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;for(j &amp;#61; 0; j &amp;lt; n; j&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;System.out.printf(&amp;#34;%5d&amp;#34;, Right[i][j]);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;System.out.println(&amp;#34;\\n&amp;#34;);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;//   求出最优代价数组Cost并输出&lt;/p&gt;\n&lt;p&gt;Cost[0][0] &amp;#61; 0;&lt;/p&gt;\n&lt;p&gt;for(i &amp;#61; 1; i &amp;lt; m&amp;#43;1; i&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;Cost[i][0] &amp;#61; Cost[i-1][0] &amp;#43; Down[i-1][0];&lt;/p&gt;\n&lt;p&gt;for(j &amp;#61; 1; j &amp;lt; n&amp;#43;1; j&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;Cost[0][j] &amp;#61; Cost[0][j-1] &amp;#43; Right[0][j-1];&lt;/p&gt;\n&lt;p&gt;for(i &amp;#61; 0; i &amp;lt; m; i&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;for(j &amp;#61; 0; j &amp;lt; n; j&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;Cost[i&amp;#43;1][j&amp;#43;1] &amp;#61; min((Cost[i&amp;#43;1][j] &amp;#43; Right[i&amp;#43;1][j]), (Cost[i][j&amp;#43;1] &amp;#43;&lt;/p&gt;\n&lt;p&gt;Down[i][j&amp;#43;1]));&lt;/p&gt;\n&lt;p&gt;System.out.printf(&amp;#34;最优距离:\\n&amp;#34;);&lt;/p&gt;\n&lt;p&gt;for(i &amp;#61; 0; i &amp;lt; m&amp;#43;1; i&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;for(j &amp;#61; 0; j &amp;lt; n&amp;#43;1; j&amp;#43;&amp;#43;)&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;System.out.printf(&amp;#34;%5d&amp;#34;,Cost[i][j]);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;System.out.println(&amp;#34;\\n&amp;#34;);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;//  输出最优路径的具体走法&lt;/p&gt;\n&lt;p&gt;System.out.println(&amp;#34;请输入你想到达的坐标位置&amp;#xff1a;&amp;#34;);&lt;/p&gt;\n&lt;p&gt;Scanner in1 &amp;#61; new Scanner(System.in);&lt;/p&gt;\n&lt;p&gt;System.out.print(&amp;#34;横坐标&amp;#xff1a;&amp;#34;);&lt;/p&gt;\n&lt;p&gt;int a &amp;#61; in1.nextInt();&lt;/p&gt;\n&lt;p&gt;System.out.print(&amp;#34;纵坐标&amp;#xff1a;&amp;#34;);&lt;/p&gt;\n&lt;p&gt;int b &amp;#61; in1.nextInt();&lt;/p&gt;\n&lt;p&gt;int[] d &amp;#61; new int[a&amp;#43;b];&lt;/p&gt;\n&lt;p&gt;int k &amp;#61; a&amp;#43;b-1;&lt;/p&gt;\n&lt;p&gt;i &amp;#61; a - 1  ;&lt;/p&gt;\n&lt;p&gt;j &amp;#61; b - 1  ;&lt;/p&gt;\n&lt;p&gt;while ( i !&amp;#61; 0 &amp;amp;&amp;amp; j !&amp;#61; 0 )&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;if (  Cost[i&amp;#43;1][j&amp;#43;1] &amp;#61;&amp;#61; (Cost[i&amp;#43;1][j] &amp;#43; Right[i&amp;#43;1][j]))&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;d[k] &amp;#61; 0;&lt;/p&gt;\n&lt;p&gt;j--;&lt;/p&gt;\n&lt;p&gt;k--;&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;else&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;d[k] &amp;#61; 1;&lt;/p&gt;\n&lt;p&gt;i--;&lt;/p&gt;\n&lt;p&gt;k--;&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;if( i &amp;#61;&amp;#61; 0 )&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;while ( j !&amp;#61; 0 )&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;d[k] &amp;#61; 1;&lt;/p&gt;\n&lt;p&gt;j--;&lt;/p&gt;\n&lt;p&gt;k--;&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;if( j &amp;#61;&amp;#61; 0 )&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;while ( i !&amp;#61; 0 )&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;d[k] &amp;#61; 0;&lt;/p&gt;\n&lt;p&gt;i--;&lt;/p&gt;\n&lt;p&gt;k--;&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;for (i &amp;#61; a&amp;#43;b-1 ; i &amp;gt;&amp;#61; 0 ; i-- )&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;p&gt;if ( d[i] &amp;#61;&amp;#61; 0 )&lt;/p&gt;\n&lt;p&gt;System.out.println(&amp;#34;Right&amp;#34;);&lt;/p&gt;\n&lt;p&gt;else&lt;/p&gt;\n&lt;p&gt;System.out.println(&amp;#34;Down&amp;#34;);&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;}&lt;/p&gt;\n&lt;p&gt;运行结果如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;Down:&lt;/p&gt;\n&lt;p&gt;5    9    7    6    5    6&lt;/p&gt;\n&lt;p&gt;8    9    8    5    7    6&lt;/p&gt;\n&lt;p&gt;9    6    7    9    6    5&lt;/p&gt;\n&lt;p&gt;9    9    7    5    6    6&lt;/p&gt;\n&lt;p&gt;5    7    5    9    5    5&lt;/p&gt;\n&lt;p&gt;Right:&lt;/p&gt;\n&lt;p&gt;7    7    9    8    8&lt;/p&gt;\n&lt;p&gt;6    6    5    6    6&lt;/p&gt;\n&lt;p&gt;8    9    7    9    8&lt;/p&gt;\n&lt;p&gt;9    7    7    5    8&lt;/p&gt;\n&lt;p&gt;6    7    7    9    7&lt;/p&gt;\n&lt;p&gt;6    7    8    5    6&lt;/p&gt;\n&lt;p&gt;最优距离:&lt;/p&gt;\n&lt;p&gt;0    7   14   23   31   39&lt;/p&gt;\n&lt;p&gt;5   11   17   22   28   34&lt;/p&gt;\n&lt;p&gt;13   20   25   27   35   40&lt;/p&gt;\n&lt;p&gt;22   26   32   36   41   45&lt;/p&gt;\n&lt;p&gt;31   35   39   41   47   51&lt;/p&gt;\n&lt;p&gt;36   42   44   50   52   56&lt;/p&gt;\n&lt;p&gt;请输入你想到达的坐标位置&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;横坐标&amp;#xff1a;3&lt;/p&gt;\n&lt;p&gt;纵坐标&amp;#xff1a;3&lt;/p&gt;\n&lt;p&gt;Down&lt;/p&gt;\n&lt;p&gt;Down&lt;/p&gt;\n&lt;p&gt;Down&lt;/p&gt;\n&lt;p&gt;Down&lt;/p&gt;\n&lt;p&gt;Right&lt;/p&gt;\n&lt;p&gt;Right&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["java实验-设计动态规划算法", ["设平面上有一个m×n 的网格，将左下角的网格点标记为（0,0）而右上角的网格点标记为（m,n）。某人想从（0,0）出发沿网格线行进到达（m,n），但是在网格点（i,j）处他只能向上行进或者向右行进，向上行进的代价为aij（amj ＝＋∞），向右行进的代价是bij（bin ＝＋∞）。试设计一个动态规划算法，在这个网格中为该旅行者寻找一条代价最小的旅行路线。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff1a;&lt;br /&gt;&amp;#xff08;1&amp;#xff09;递归 &lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Cnk&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(k&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ||k&amp;#61;&amp;#61;n)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;Cnk&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,k)&amp;#43;&lt;span class=\"hljs-built_in\"&gt;Cnk&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,k&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;);\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,k;\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; res &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;k);\n    res &amp;#61; &lt;span class=\"hljs-built_in\"&gt;Cnk&lt;/span&gt;(n,k);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;,res);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&amp;#xff08;2&amp;#xff09;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Jiecheng&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; s &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n        s *&amp;#61; i;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; s;\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Cnk&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;Jiecheng&lt;/span&gt;(n)/&lt;span class=\"hljs-built_in\"&gt;Jiecheng&lt;/span&gt;(k)/&lt;span class=\"hljs-built_in\"&gt;Jiecheng&lt;/span&gt;(n-k);\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,k;\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; res &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;k);\n    res &amp;#61; &lt;span class=\"hljs-built_in\"&gt;Cnk&lt;/span&gt;(n,k);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;,res);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["如何用偏基础的c语言递归和动态规划解决该问题", ["如何用偏基础的C语言递归程序和动态规划程序分别解决这个问题，希望给出两种方法", "数据范围在一千左右"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;用数组price[0,1,2...n]表示每个城镇的货物价值&lt;br /&gt;题目&amp;#xff1a;低买高卖&amp;#xff0c;限制买卖次数k次。&lt;/p&gt;\n&lt;p&gt;我们用 buy[i][j] 表示对于数组prices[0..i] 中的价格而言&amp;#xff0c;进行恰好 j次交易&amp;#xff0c;并且车上还有一个货物&amp;#xff0c;这种情况下的最大利润。&lt;br /&gt;用sell[i][j]表示这种情况下&amp;#xff0c;车上没有货物时候的最大利润&amp;#xff1b;用cost表示此时车上货物的价值&lt;/p&gt;\n&lt;p&gt;推导&amp;#xff1a;&lt;br /&gt;对于buy[i][j] ,如果是第i站进行了交易&amp;#xff0c;如果此时不持有货物那么最大利润就是sell[i-1][j-1] - price[i]&lt;br /&gt;如果此时持有货物&amp;#xff0c;那么最大利润就是buy[i-1][j-1]-price[i]&amp;#43;cost&lt;br /&gt;那么buy[i][j] &amp;#61; Max{sell[i-1][j-1] - price[i]&amp;#xff0c;buy[i-1][j-1]-price[i]&amp;#43;cost  }&lt;/p&gt;\n&lt;p&gt;对于sell[i][j]&amp;#xff0c;此时持有货物&amp;#xff0c;那么最大利润就是持有的卖出 buy[i-1][j-1] &amp;#43; cost&lt;br /&gt;如果此时不持有货物&amp;#xff0c;最大利润就是sell[i-1][j]&lt;br /&gt;那么sell[i][j] &amp;#61; Max{ buy[i-1][j-1] &amp;#43; cost, sell[i-1][j]  }&lt;/p&gt;\n&lt;p&gt;在k次交易后&amp;#xff0c;不持有货物利润最大&amp;#xff0c;所以答案在sell[n-1][0...k]中的最大值。&lt;/p&gt;\n&lt;p&gt;ps&amp;#xff1a;算法题中&amp;#xff0c;算是困难类型的了。。。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划相关问题，卡车运货最大利润问题", ["Consider a delivery truck that travels from a start town to a destination town", "passing by multiple towns en route. At each of the n towns along the route", "there is the option for the truck to either pick up a new load at cost ci specific", "for town i, or else drop off its existing load at a value vi ≤ ci specific for town", "i. The truck can only transport one load at a time and can only stop at most", "2k ≤ n times to pick up or drop off a load.", "The purpose of this assignment is to develop algorithms that can indicate to", "a truck driver at which towns it is best to pick up or drop off in order for the", "truck to get the best overall profit.", " Exact Approach which is a program that demonstrates an approach that", "correctly and efficiently solves the delivery truck problem. Please include", "comments in your program that clearly explain the approach you have", "taken, particularly why it works, and include good test cases that illustrate", "its correctness.", "求一个详细点的思路，需要用动态规划，最好思路有详细思考过程"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;动态规划的基本思想是将原问题分解为若干个子问题&amp;#xff0c;从而通过计算每个子问题的答案来解决原问题。在本题中&amp;#xff0c;我们可以使用一个数组&amp;#xff0c;记录以当前数字结尾的单调递增子数列的最大和。&lt;/p&gt;\n&lt;p&gt;我们令dp[i]表示以第i个数字结尾的单调递增子数列的最大和&amp;#xff0c;那么&amp;#xff0c;dp[i]可以由以下状态转移方程得到&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;dp[i] &amp;#61; max(dp[j]) &amp;#43; a[i] (0 &amp;lt;&amp;#61; j &amp;lt; i and a[j] &amp;lt; a[i])&lt;/p&gt;\n&lt;p&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; N &amp;#61; &lt;span class=\"hljs-number\"&gt;2010&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 定义数列的最大长度&lt;/span&gt;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n; &lt;span class=\"hljs-comment\"&gt;// 数列的长度&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[N]; &lt;span class=\"hljs-comment\"&gt;// 定义数列&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dp[N]; &lt;span class=\"hljs-comment\"&gt;// 定义DP数组&amp;#xff0c;dp[i]表示以第i个数字结尾的单调递增子数列的最大和&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    cin &amp;gt;&amp;gt; n; &lt;span class=\"hljs-comment\"&gt;// 输入数列的长度&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i &amp;#43;&amp;#43;) cin &amp;gt;&amp;gt; a[i]; &lt;span class=\"hljs-comment\"&gt;// 输入数列中的数字&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i &amp;#43;&amp;#43;)\n    {\n        dp[i] &amp;#61; a[i]; &lt;span class=\"hljs-comment\"&gt;// 初始化dp[i]&amp;#xff0c;设为数列中的第i个数字&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; i; j &amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[j] &amp;lt; a[i]) dp[i] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(dp[i], dp[j] &amp;#43; a[i]); &lt;span class=\"hljs-comment\"&gt;// 如果a[j] &amp;lt; a[i]&amp;#xff0c;更新dp[i]的值&lt;/span&gt;\n        }\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ans &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 定义答案&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i &amp;#43;&amp;#43;) ans &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(ans, dp[i]); &lt;span class=\"hljs-comment\"&gt;// 求出答案&lt;/span&gt;\n    cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl; &lt;span class=\"hljs-comment\"&gt;// 输出答案&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["关于递增数列问题，如何使用动态规划思想解决。", ["关于递增数列问题，如何使用动态规划思想解决。", "从数列中选出若干个数字（至少选择一个），这些数字相对顺序与他们对应在数列中的相对顺序一致， 同时要求其大小单调递增，求满足条件的这些数字的最大和。", "\n", "第一行输入 1 个整数N，表示数列大小。（1≤N≤2000）", "第二行输入 N 个整数 Ai，表示数列中的每个数字。（−10000≤Ai≤10000）。", "\n", "一个整数，表示满足条件的这些数字的最大和。", "样例输入：", "5", "1 3 1 5 -2", "样例输出：", "9"]], "Tag": "算法设计"}
{"Answer": "需要考虑的前提很多啊，如果你的对象数量级很大，那不推荐这样，如果你需要给删除配上撤销操作，这样是可行的\r\n数据库里的删除操作，很多时候就不是真的删除，只是状态的改变", "Konwledge_Point": "动态规划", "Question": ["程序设计 方法合并问题", ["对某个对象的删除方法可以合并到编辑方法里面吗？因为就算是删除也只是软删除改一下状态而已嘛  这样做是否合理呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;全局有默认值&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["c++中有关动态规划的简单算法", ["这个问题的题目和正确题解如下，主要用到的是动态规划算法。我的疑问是为什么二维数组f【】【】没有进行初始化，但是运行结果却是正确的呢？", "\n", "[NOIP2002 普及组] 过河卒", "\n", "题目描述", "\n", "棋盘上 $A$ 点有一个过河卒，需要走到目标 $B$ 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 $C$ 点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。", "\n", "棋盘用坐标表示，$A$ 点 $(0, 0)$、$B$ 点 $(n, m)$，同样马的位置坐标是需要给出的。", "\n", "\n", "现在要求你计算出卒从 $A$ 点能够到达 $B$ 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。", "\n", "输入格式", "\n", "一行四个正整数，分别表示 $B$ 点坐标和马的坐标。", "\n", "输出格式", "\n", "一个整数，表示所有的路径条数。", "\n", "样例 #1", "\n", "样例输入 #1", "\n", "6 ", "6", " ", "3", " ", "3", "\n", "\n", "样例输出 #1", "\n", "6\n", "\n", "提示", "\n", "对于 $100 %$ 的数据，$1 \\le n, m \\le 20$，$0 \\le$ 马的坐标 $\\le 20$。", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<cstring>", "\n", "#", "include", "<cstdio>", "\n", "#", "include", "<algorithm>", "\n", "#", "define", " ll long long", "\n", "using", " ", "namespace", " std;\n\n", "const", " ", "int", " fx[] = {", "0", ", ", "-2", ", ", "-1", ", ", "1", ", ", "2", ", ", "2", ", ", "1", ", ", "-1", ", ", "-2", "};\n", "const", " ", "int", " fy[] = {", "0", ", ", "1", ", ", "2", ", ", "2", ", ", "1", ", ", "-1", ", ", "-2", ", ", "-2", ", ", "-1", "};\n", "//马可以走到的位置", "\n\n", "int", " bx, by, mx, my;\nll f[", "40", "][", "40", "];\n", "bool", " s[", "40", "][", "40", "]; ", "//判断这个点有没有马拦住", "\n", "int", " ", "main", "()", "{\n    ", "scanf", "(", "\"%d%d%d%d\"", ", &bx, &by, &mx, &my);\n    bx += ", "2", "; by += ", "2", "; mx += ", "2", "; my += ", "2", ";\n    ", "//坐标+2以防越界", "\n    f[", "2", "][", "1", "] = ", "1", ";", "//初始化", "\n    s[mx][my] = ", "1", ";", "//标记马的位置", "\n    ", "for", "(", "int", " i = ", "1", "; i <= ", "8", "; i++) s[mx + fx[i]][my + fy[i]] = ", "1", ";\n    ", "for", "(", "int", " i = ", "2", "; i <= bx; i++){\n        ", "for", "(", "int", " j = ", "2", "; j <= by; j++){\n            ", "if", "(s[i][j]) ", "continue", "; ", "// 如果被马拦住就直接跳过", "\n            f[i][j] = f[i - ", "1", "][j] + f[i][j - ", "1", "];\n            ", "//状态转移方程", "\n        }\n    }\n    ", "printf", "(", "\"%lld\\n\"", ", f[bx][by]);\n    ", "return", " ", "0", ";\n} \n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;动态规划的背包问题。&lt;/p&gt;\n&lt;p&gt;但是如果把这道题强行理解为01背包未免有些和01背包的概念不符&amp;#xff0c;其实这道题是到达性的01背包。&lt;/p&gt;\n&lt;p&gt;我们可以不把这道题想象的那么复杂&amp;#xff0c;直接按照最基础的动态规划来&amp;#xff0c;设置动态转移方程和初值。&lt;/p&gt;\n&lt;p&gt;这回我们用标记数组来动归。&lt;/p&gt;\n&lt;p&gt;设状态转移方程f[i][j]为第i首歌能否达到j的音量&amp;#xff0c;能为1&amp;#xff0c;不能为0。&lt;/p&gt;\n&lt;p&gt;这样的话我们就可以开始动归&amp;#xff0c;最后只需要枚举出最大的f[n][i]&amp;#xff0c;就是需要找的答案了。&lt;/p&gt;\n&lt;p&gt;这里还需要注意&amp;#xff0c;初值f[0][begin]要设置为1&amp;#xff0c;因为没开始之前就可以达到begin的音量。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,beginlevel,maxlevel;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c[&lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f[&lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;1010&lt;/span&gt;];\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d%d&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;beginlevel,&amp;amp;maxlevel);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;c[i]);\n    f[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][beginlevel]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;maxlevel;j&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j--)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(f[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j] &amp;amp;&amp;amp; j&amp;#43;c[i]&amp;lt;&amp;#61;maxlevel)\n                f[i][j&amp;#43;c[i]]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(f[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j] &amp;amp;&amp;amp; j-c[i]&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                f[i][j-c[i]]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;maxlevel;i&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i--)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(f[n][i]&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,i);\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;-1&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;DFS也行&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; ll long long&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; reg register&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; bl,ml,ans,c[&lt;span class=\"hljs-number\"&gt;55&lt;/span&gt;],n;\n&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; f[&lt;span class=\"hljs-number\"&gt;51&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;1010&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//定义t是否能达到k的音量&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;dfs&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(k&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;||k&amp;gt;ml)&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;//剪枝部分↓&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(f[t][k])&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;//如果改点已经有了&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//就不要再搜了&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; f[t][k]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//否则算他访问过了&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//剪枝部分↑&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t&amp;#61;&amp;#61;n){\n        ans&amp;#61;&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(ans,k);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(t&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,k&amp;#43;c[t&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n    &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(t&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,k-c[t&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    ans&amp;#61;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d%d&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;bl,&amp;amp;ml);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(reg &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;&amp;#43;&amp;#43;i){\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;c[i]);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;dfs&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,bl);\n    cout&amp;lt;&amp;lt;ans;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; \n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["关于C++动态规划，请问代码bug在哪儿？", ["这道问题起源洛谷", "\n", "\n", "\n", "我用动态规划来写，solve(i,j)表示第 i 次调音调到 j 可不可行，true代表可行，false代表不可行", "那么i>1时，solve(i,j)=true当且仅当 0<=j - a[j]<=maxlevel && solve(i - 1, j - a[j]) == true", "                                                     或 0<=j +a[j]<=maxlevel && solve(i - 1, j +a[j]) == true", "以下是我用这个思路写的代码", "\n", "#", "include", "<iostream>", "\n", "using", " ", "namespace", " std;\n\n", "int", " n, bl, ml;\n", "int", " a[", "51", "];\n\n", "bool", " ", "in", "(", "int", " n)", " ", "{\n    ", "if", " (n >= ", "0", " && n <= ml) {\n        ", "return", " ", "true", ";\n    }\n    ", "else", " {\n        ", "return", " ", "false", ";\n    }\n}\n", "bool", " ", "solve", "(", "int", " i, ", "int", " j)", " ", "{\n        ", "if", " (i == ", "0", ") {\n            ", "if", " (j == bl) {                \n                ", "return", " ", "true", ";\n            }\n            ", "else", " {                \n                ", "return", " ", "false", ";\n            }\n        }\n        ", "else", "{\n            ", "if", " (", "in", "(j - a[j]) == ", "true", " && (", "solve", "(i - ", "1", ", j - a[j]) == ", "true", ")) {                \n                ", "return", " ", "true", ";\n            }\n            ", "else", " ", "if", " (", "in", "(j + a[j]) == ", "true", " && (", "solve", "(i - ", "1", ", j + a[j]) == ", "true", ")) {                \n                ", "return", " ", "true", ";\n            }\n            ", "else", " {                \n                ", "return", " ", "false", ";\n            }\n        }\n    \n}\n\n", "int", " ", "main", "()", " ", "{\n    cin >> n >> bl >> ml;\n    ", "for", " (", "int", " i = ", "1", ";i <= n;i++) {\n        cin >> a[i];\n    }    \n    ", "for", " (", "int", " j = ml;j >= ", "-1", ";j--) {\n        ", "bool", " ans2 = ", "solve", "(n, j);\n        ", "if", " (ans2 == ", "true", ") {\n            cout << j;\n            ", "break", ";\n        }\n        ", "if", " (j == ", "-1", ") {\n            cout << ", "-1", ";\n        }        \n    }\n}\n\n\n\n", "\n", "但是程序好像有bug，输入样例不对", "\n", "\n", "请问bug在哪儿？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这道题的n高达1e5&amp;#xff0c;两次循环下来肯定会超时的&lt;br /&gt;两序列长度相同并且都是1-n的排列&amp;#xff0c;因此可以进行优化将时间复杂度降为nlogn&amp;#xff0c;数组降为1维。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#include&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;\nusing namespace std;\nconst int &lt;span class=\"hljs-symbol\"&gt;N&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1e5&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\nint a[&lt;span class=\"hljs-symbol\"&gt;N&lt;/span&gt;],b[&lt;span class=\"hljs-symbol\"&gt;N&lt;/span&gt;],c[&lt;span class=\"hljs-symbol\"&gt;N&lt;/span&gt;],f[&lt;span class=\"hljs-symbol\"&gt;N&lt;/span&gt;];\nint len&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\nint main()\n{\n    int n;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    for(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n    c[a[i]]&amp;#61;i;\n    }\n    for(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;b[i]);\n        b[i]&amp;#61;c[b[i]];\n    }\n    f[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;b[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n    for(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        if(f[len]&amp;lt;b[i])\n        f[&amp;#43;&amp;#43;len]&amp;#61;b[i];\n        else\n        f[lower_bound(f&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,f&amp;#43;len&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,b[i])-f]&amp;#61;b[i];\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,len);\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["关于#c语言#的问题：洛谷P1438最长公共子序列与动态规划有关错误信息如图找出错误并给出解决方案通过测试", ["洛谷P1438最长公共子序列与动态规划有关", "错误信息如图", "找出错误并给出解决方案通过测试", "\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "代码功能归根结底不是别人帮自己看或讲解或注释出来的；而是被自己静下心来花足够长的时间和精力亲自动手单步或设断点或对执行到某步获得的中间结果显示或写到日志文件中一步一步分析出来的。\r\n提醒：再牛×的老师也无法代替学生自己领悟和上厕所！\r\n单步调试和设断点调试（VS IDE中编译连接通过以后，按F10或F11键单步执行，按Shift+F11退出当前函数；在某行按F9设断点后按F5执行停在该断点处。）是程序员必须掌握的技能之一。", "Konwledge_Point": "动态规划", "Question": ["c语言 回转寿司（排列组合问题） 有雏形", ["盘子从厨师右边流向左边", "\n\n", "厨师连续做n盘寿司，放入回转寿司的传送列中", "\n最初的分叉点：", "\n最初的b盘寿司会流向上面的传送列，后面的n-b盘寿司流向下面的传送列", "\n或者", "\n最初的b盘寿司会流向下面的传送列，后面的n-b盘寿司流向下面的传送列", "\n1<=b<=n-1", "\n\n", "上面的列和下面的列都坐着客人", "\n上面的客人：会吃掉送过来的所有寿司，全部吃掉以后，会以最初传送过来的顺序或者与之相反的顺序把盘子放回传送列", "\n下面的客人和上面的客人完全一样。", "\n\n", "店员会把传送过来的空盘子叠成一叠，有可能叠成上面客人的盘子在上，也有可能叠成下面的客人的盘子在上", "\n\n", "碟子一共有10种(0,1,2,3,4,5,6,7,8,9)", "\n\n", "问最后一共有多少被叠起来的可能", "\n\n", "比如，流过来的碟子是0,1,2的时候", "\n一共有012,021,102,120,201,210这6种顺序", "\n\n", "输入格式：", "\n数据的个数L", "\n数据1", "\n数据2", "\n…", "\n数据L", "\n\n", "各数据代表盘子的排列方式（2<=盘子数量<=100）", "\n\n", "输出", "\n\n", "输出可能的排列数量", "\n<例1>", "\n输入", "\n3", "\n001", "\n12345", "\n0000", "\n输出", "\n3", "\n18", "\n1", "\n<例2>", "\n输入", "\n2", "\n012", "\n1234", "\n输出", "\n6", "\n12", "\n（还有一组是50个的比较大的数据，这个时候我自己写的程序运行就会直接结束）", "\n\n", "以下是代码雏形", "\n只需要修改reverse swap和chk_isnew（这个函数我应该没写错）部分", "\n（自己写了要求的函数部分，但是结果不对）", "\n\n", " #include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef int item;\ntypedef struct node *link;\n\n#define MAX_LEN 100\n#define MAX_RESULTS 1000\n\nstruct node\n{\n    char *p;\n    link next;\n};\nlink NEW(char *inp, link next)\n{\n    link x = malloc(sizeof(*x));\n    x->p = inp;\n    x->next = next;\n    return x;\n}\nvoid reverse(int sp,int ep,char*in)\n{\n    int i;\n    char temp;\n    for(i=0;i<(ep-sp+1)/2;i++){\n        temp=in[sp+i];\n        in[sp+i]=in[ep-(i+1)];\n        in[ep-(i+1)]=temp;\n    }\n    //reverse in[sp]...in[ep-1]\n}\nvoid swap(int sp,int ep,char *in)\n{\n    int i,j,k;\n    char temp[101];\n    char box1[101];\n    char box2[101];\n    for(i=0;i<sp;i++){\n        temp[i]=in[i];\n    }\n    for(j=0;j<ep-sp;j++){\n        box1[j]=in[sp+j];\n    }\n    for(k=0;k<sp;k++){\n        box2[k]=temp[k];\n    }\n    *in=strcat(box1,box2);\n    //swap in[0]~in[sp-1] by in[sp]~in[ep-1]\n}\nint chk_isnew(char *in, link *p_head)\n{\n    link t=*p_head;\n    while(t!=NULL)\n    {\n        if(strcmp(t->p,in)==0) return 0;\n        else t=t->next;\n    }\n    char *store = (char *)malloc(sizeof(char)*MAX_LEN);\n    memcpy(store,in,sizeof(char)*MAX_LEN);\n    *p_head = NEW(store, *p_head);\n    return(1);\n}\nint main(void)\n{\n    link head;\n    int num, cnt, i;\n    scanf(\"%d\", &num);\n    int *result = (int *)malloc(sizeof(int)*MAX_RESULTS);\n    char *dish;\n    char *tmp_dish;\n    for(cnt=0; cnt<num; cnt++)\n    {\n        result[cnt] = 0;\n        head = NULL;\n        dish = (char *)malloc(sizeof(char)*MAX_LEN);\n        memset(dish,0x00,sizeof(char)*MAX_LEN);\n        tmp_dish = (char *)malloc(sizeof(char)*MAX_LEN);\n\n        scanf(\"%s\", dish);\n        memcpy(tmp_dish,dish,sizeof(char)*MAX_LEN);\n        int len = strlen(dish);\n        for(i=1; i<len; i++)\n        {\n            int rev, swp;\n            for(rev=0; rev<4; rev++)\n            {\n                switch(rev)\n                {\n                case 0:\n                    break;\n                case 1:\n                    reverse(0,i,tmp_dish); // reverse 1st half\n                    break;\n                case 2:\n                    reverse(i,len,tmp_dish); // reverse 2nd half\n                    break;\n                case 3:\n                    reverse(0,i,tmp_dish); // reverse 1st half\n                    reverse(i,len,tmp_dish); // reverse 2nd half\n                    break;\n                }\n                for(swp=0; swp<2; swp++)\n                {\n                    switch(swp)\n                    {\n                    case 0:\n                        break; //not swap\n                    case 1:\n                        swap(i,len,tmp_dish); //swap\n                        break;\n                    }\n                    if(chk_isnew(tmp_dish, &head)) result[cnt]++;\n                }\n                memcpy(tmp_dish,dish,sizeof(char)*MAX_LEN);\n            }\n        }\n        link t = head;\n        while(t->next!=NULL)\n        {\n            t = t->next;\n        }\n        link r;\n        t = head;\n        while(t->next!=NULL)\n        {\n            r = t;\n            t = t->next;\n            free(r->p);\n            free(r);\n        }\n        free(dish);\n        free(tmp_dish);\n    }\n    for(cnt=0; cnt<num; cnt++)\n    {\n        printf(\"%d\\n\",result[cnt]);\n    }\n    return 0;\n}\n\n", "\n\n", "要求改写reverse,swap和chk_isnew的函数部分（chk_isnew应该没有错）", "\n非常长的问题有劳了"]], "Tag": "算法设计"}
{"Answer": "http://www.acmerblog.com/hdu-2224-the-shortest-path-3454.html", "Konwledge_Point": "动态规划", "Question": ["The shortest path                   ", ["Problem Description", "\nThere are n points on the plane, Pi(xi, yi)(1 <= i <= n), and xi < xj (i\nBefore you reach the rightmost point Pn, you can only visit the points those have the bigger x-coordinate value. For example, you are at Pi now, then you can only visit Pj(j > i). When you reach Pn, the rule is changed, from now on you can only visit the points those have the smaller x-coordinate value than the point you are in now, for example, you are at Pi now, then you can only visit Pj(j < i). And in the end you back to P1 and the tour is over.", "\nYou should visit all points in this tour and you can visit every point only once.", "\n\n", "Input", "\nThe input consists of multiple test cases. Each case begins with a line containing a positive integer n(2 <= n <= 200), means the number of points. Then following n lines each containing two positive integers Pi(xi, yi), indicating the coordinate of the i-th point in the plane.", "\n\n", "Output", "\nFor each test case, output one line containing the shortest path to visit all the points with the rule mentioned above.The answer should accurate up to 2 decimal places.", "\n\n", "Sample Input", "\n3", "\n1 1", "\n2 3", "\n3 1", "\n\n", "Sample Output", "\n6.47", "\n\n", "Hint: The way 1 - 3 - 2 - 1 makes the shortest path."]], "Tag": "算法设计"}
{"Answer": "http://poj.org/problem?id=3033", "Konwledge_Point": "动态规划", "Question": ["Traveling Salesman                      ", ["Problem Description", "\nLong before the days of international trade treaties, a salesman would need to pay taxes at every border crossed. So your task is to find the minimum number of borders that need to be crossed when traveling between two countries. We model the surface of Earth as a set of polygons in three dimensions forming a closed convex 3D shape, where each polygon corresponds to one country. You are not allowed to cross at points where more than two countries meet.", "\n\n", "Input", "\nEach test case consists of a line containing c, the number of countries (4 ≤ c ≤ 6000), followed by c lines containing the integers n x1 y1 z1 … xn yn zn, describing (in order) the n corners of a closed polygon (3 ≤ n ≤ 20). Then follows a line with one integer m (0 < m ≤ 50), and then m lines with queries ca cb, where ca and cb are country numbers (starting with 1). No point will be on the line between two connected points, and -106 ≤ x, y, z ≤ 106 for all points. No two non-adjacent edges of a country share a common point. The input is terminated by a case where c = 0, which should not be processed.", "\n\n", "Output", "\nFor each query, output the number of borders you must cross to go from ca to cb.", "\n\n", "Sample Input", "\n6", "\n4 0 0 0 0 0 1 0 1 1 0 1 0", "\n4 1 0 0 1 0 1 1 1 1 1 1 0", "\n4 0 0 0 1 0 0 1 0 1 0 0 1", "\n4 0 1 0 1 1 0 1 1 1 0 1 1", "\n4 0 0 0 0 1 0 1 1 0 1 0 0", "\n4 0 0 1 0 1 1 1 1 1 1 0 1", "\n2", "\n1 2", "\n1 3", "\n0", "\n\n", "Sample Output", "\n2", "\n1"]], "Tag": "算法设计"}
{"Answer": "将 n 个点的坐标排序（x 为主键）\r\n\r\n任取一点将 n 个点分成 2 组 n1 和 n2，求出 2 个面积 m1 和 m2\r\n\r\n从 n1 中取出最后的一个点，放入 n2 中，再求出 2 个面积 m'1 和 m'2\r\n\r\n如果 m'1+m'2 &lt; m1+m2，则继续\r\n\r\n分别对重组后的 n1 和 n2 做如上操作\r\n\r\n直至满足 k 的数量要求，反之亦然\r\n\r\n其实你很快就会发现最小面积就是前 k-1 个点的 (maxx - minx)*(maxy-miny) + (n-k-1)", "Konwledge_Point": "动态规划", "Question": ["如何用动态规划解决平面上的n个点用k个矩形覆盖的最小面积？", ["假设有n个点，我们要用k个矩形去覆盖所用的点，然后这k个矩形的面积要尽可能小", "\n1）矩形的底是在x轴上的（其实就是直方图）", "\n2）矩形的面积可以为0（就是一条与x轴垂直的线）", "\n3）矩形不能重叠（边线与顶点也都不能重合）", "\n\n", "有人可以帮我一下吗？想了半天都没想出来怎么用动态规划解决这个问题"]], "Tag": "算法设计"}
{"Answer": "http://www.acmerblog.com/hdu-1501-Zipper-2058.html", "Konwledge_Point": "动态规划", "Question": ["Zipper                   ", ["Problem Description", "\nGiven three strings, you are to determine whether the third string can be formed by combining the characters in the first two strings. The first two strings can be mixed arbitrarily, but each must stay in its original order.", "\n\n", "For example, consider forming \"tcraete\" from \"cat\" and \"tree\":", "\n\n", "String A: cat", "\nString B: tree", "\nString C: tcraete", "\n\n", "As you can see, we can form the third string by alternating characters from the two strings. As a second example, consider forming \"catrtee\" from \"cat\" and \"tree\":", "\n\n", "String A: cat", "\nString B: tree", "\nString C: catrtee", "\n\n", "Finally, notice that it is impossible to form \"cttaree\" from \"cat\" and \"tree\".", "\n\n", "Input", "\nThe first line of input contains a single positive integer from 1 through 1000. It represents the number of data sets to follow. The processing for each data set is identical. The data sets appear on the following lines, one data set per line.", "\n\n", "For each data set, the line of input consists of three strings, separated by a single space. All strings are composed of upper and lower case letters only. The length of the third string is always the sum of the lengths of the first two strings. The first two strings will have lengths between 1 and 200 characters, inclusive.", "\n\n", "Output", "\nFor each data set, print:", "\n\n", "Data set n: yes", "\n\n", "if the third string can be formed from the first two, or", "\n\n", "Data set n: no", "\n\n", "if it cannot. Of course n should be replaced by the data set number. See the sample output below for an example.", "\n\n", "Sample Input", "\n3", "\ncat tree tcraete", "\ncat tree catrtee", "\ncat tree cttaree", "\n\n", "Sample Output", "\nData set 1: yes", "\nData set 2: yes", "\nData set 3: no"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/counterm/article/details/6308881", "Konwledge_Point": "动态规划", "Question": ["Bean Counting               ", ["The CSC has decided to hold a contest to guess the number of beans in a given jar. To make it a wee bit more interesting, they decided to have the contestants guess the number of a particular kind of bean, the jar having many types of beans in it. Each participant would par $2.00 per guess.", "\nIf the guess is one off (either one greater or less) than the actual count, they get a single share of the total pot. If the guess is right on, they get two shares of the total pot.", "\n\n", "Your task is to tally these guesses and print out how much each person wins.", "\n\n", "Input", "\n\n", "The first line will contain hundreds of letters, from a - z, each representing one bean of that type of bean. There will only be 26 different types of beans. The next line contains an integer n, the number of guesses. Each of the n following line will be the guess from a contestant. A contestant can guess as many times as they like. The line will begin with a single letter, in the range A - Z, leaving only 26 possible contests. The first letter will be followed by a single space, and then up to five pairs of letter/number combinations, the letter representing the type of bean for this guess, and the number the number of that bean the contestant expects to find. The letter and the value of a guess will be separated by a ':' and each guess on lines with more than one guess will be separated by a ','.", "\n\n", "Process to the end of file.", "\n\n", "Tallying:", "\n\n", "The amount a contestant will receive is based on shares of a pot. The pot will consist of the total of all the guesses, at $2.00 per guess. The fraction each person gets will be based on:", "\n\n", "TotNum: total number of guesses by all contestants", "\nTotShares: total number of shares from all contestants", "\nOffOne: number of off-by-one guesses by that contestant", "\nRightOn: number if right-on guesses by that contestant", "\n\n", "(TotNum * $2.00) / TotShares * (OffOne + (RightOn * 2))", "\n\n", "Output", "\n\n", "Print out all the winners, in alphabetical order, and their winnings, separated by a single space. Each winner should be on a line by itself.", "\n\n", "Separate output for different cases by a single blank line.", "\n\n", "Sample Input", "\n\n", "aadddddddddddddddddddddddffffffffffffffffwwwwwwwwwwwwccccalalala", "\n4", "\nA a:6,c:6", "\nB w:12", "\nC d:25", "\nD d:22,c:4,l:3,f:15", "\n\n", "Sample Output", "\n\n", "A 3.20", "\nB 3.20", "\nD 9.60"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;我是有问必答小助手&amp;#xff0c;非常抱歉&amp;#xff0c;本次您提出的有问必答问题&amp;#xff0c;目前超出我们的服务范围&amp;#xff0c;暂时无法为您解答。&lt;br /&gt;\n&lt;br /&gt;\n首次提问人员可免费体验一次有问必答服务。目前首次提问的问题服务范围为&amp;#xff1a;编程语言、Java开发、python、数据库、前端开发 领域专业技术问题&amp;#xff0c;为您提供问题的解决思路和指导。&lt;strong&gt;&lt;u&gt;不提供源码代写、项目文档代写、论文代写、安装包资源发送或安装、软件使用指导等服务。&lt;/u&gt;&lt;/strong&gt;&lt;br /&gt;\n&lt;br /&gt;\n我们后续会持续优化&amp;#xff0c;扩大我们的服务范围&amp;#xff0c;为您带来更好地服务。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划 C++ 急求", ["【问题描述】", "\n\n", "助教小明给期末测验出了", "道算法题目。他希望在即将到来的期末测验试卷中使用其中", "道题目。", "\n\n", "每道算法题目都有一个难度等级。如果一次测验中的所有k道题目都有不同的难度等级，那么这次期末测试就是有区分度的。", "\n\n", "计算小明可以设计多少种有区分度的期末试卷。", "\n\n", "注：", "\n\n", "两份测验试卷当且仅当一份试卷中存在某一题目", "，而另一份试卷中不存在这个题", "，这两份试卷才有区别。", "\n\n", "输出结果对998,244,353取余。", "\n\n", "【输入形式】", "\n\n", "输入第一行包括两个用空格分隔开的整数", "和", ",", "\n\n", "输入第二行", "个用空格分开隔的整数", "，表示不同题目的难度。", "\n\n", "【输出形式】", "\n\n", " 一个整数，表示可设计的有区分度的期末试卷数目。结果对998,244,353取余", "\n\n", "【样例输入】", "\n\n", "\n5 2\n1 2 3 4 5", "\n\n", "【样例输出】", "\n\n", "\n10"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;更改如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;clear all\nclc\n% clc;clear;\n% A&amp;#61;[ 0 1 2 3 4];\n% A1&amp;#61;[0 1 2 3 4 5];\n% A2&amp;#61;[0 1 2 3 4 5 6];\n% &lt;span class=\"hljs-attribute\"&gt;B&lt;/span&gt;&amp;#61;nchoosek(A,3);\n% &lt;span class=\"hljs-attribute\"&gt;B1&lt;/span&gt;&amp;#61;nchoosek(A1,3);\n% &lt;span class=\"hljs-attribute\"&gt;B2&lt;/span&gt;&amp;#61;nchoosek(A2,3);\n% &lt;span class=\"hljs-attribute\"&gt;C&lt;/span&gt;&amp;#61;fliplr(B);\n% &lt;span class=\"hljs-attribute\"&gt;C1&lt;/span&gt;&amp;#61;fliplr(B1);\n% &lt;span class=\"hljs-attribute\"&gt;C2&lt;/span&gt;&amp;#61;fliplr(B2);\n% sum&amp;#61;[B;C];\n% sum1&amp;#61;[B1;C1];\n% sum2&amp;#61;[B2;C2];\n% [m,n]&amp;#61;size(sum);\n% [m1,n1]&amp;#61;size(sum1);\n% [m2,n2]&amp;#61;size(sum2);\n&lt;span class=\"hljs-attribute\"&gt;blank&lt;/span&gt;&amp;#61;0;\n&lt;span class=\"hljs-attribute\"&gt;blank1&lt;/span&gt;&amp;#61;0;\n% &lt;span class=\"hljs-attribute\"&gt;blank2&lt;/span&gt;&amp;#61;zeros(m2,1);\n%%\n&lt;span class=\"hljs-attribute\"&gt;sum11&lt;/span&gt;&amp;#61;0;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;0:4\n    %&lt;span class=\"hljs-attribute\"&gt;a4&lt;/span&gt;&amp;#61;sum(i,1);\n    switch i\n        case 0\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;0;\n        case 1\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;3;\n        case 2\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;5;\n        case 3\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;6;\n        case 4\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;7;\n    end\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;1:4\n        %&lt;span class=\"hljs-attribute\"&gt;b4&lt;/span&gt;&amp;#61;sum(j,2);\n        switch j\n            case 0\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;0;\n            case 1\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;4;\n            case 2\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;6;\n            case 3\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;7;\n            case 4\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;8;\n        end\n        \n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;0:4\n            %&lt;span class=\"hljs-attribute\"&gt;c4&lt;/span&gt;&amp;#61;sum(k,3);\n            switch k\n                case 0\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;0;\n                case 1\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;2;\n                case 2\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;5;\n                case 3\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;9;\n                case 4\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;8;\n            end\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i&amp;#43;j&amp;#43;&lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;&amp;#61;4\n                &lt;span class=\"hljs-attribute\"&gt;sum11&lt;/span&gt;&amp;#61;a1&amp;#43;b1&amp;#43;c1;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; blank&amp;lt;sum11\n                    &lt;span class=\"hljs-attribute\"&gt;blank&lt;/span&gt;&amp;#61;sum11;\n                    list&amp;#61;[i,j,k];\n                end\n            end\n            \n        end\n    end\nend\n&lt;span class=\"hljs-attribute\"&gt;MAX&lt;/span&gt;&amp;#61;blank %最大获利\nlist %z最终结果\n%%\n\n&lt;span class=\"hljs-attribute\"&gt;sum12&lt;/span&gt;&amp;#61;0;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;0:5\n    switch i\n        case 0\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;0;\n        case 1\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;3;\n        case 2\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;5;\n        case 3\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;6;\n        case 4\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;7;\n        case 5\n            &lt;span class=\"hljs-attribute\"&gt;a1&lt;/span&gt;&amp;#61;6;\n    end\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;0:5\n        switch j\n            case 0\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;0;\n            case 1\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;4;\n            case 2\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;6;\n            case 3\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;7;\n            case 4\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;8;\n            case 5\n                &lt;span class=\"hljs-attribute\"&gt;b1&lt;/span&gt;&amp;#61;9;\n        end\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;0:5\n            switch k\n                case 0\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;0;\n                case 1\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;2;\n                case 2\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;5;\n                case 3\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;9;\n                case 4\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;8;\n                case 5\n                    &lt;span class=\"hljs-attribute\"&gt;c1&lt;/span&gt;&amp;#61;8;\n            end\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i&amp;#43;j&amp;#43;&lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;&amp;#61;5\n                &lt;span class=\"hljs-attribute\"&gt;sum12&lt;/span&gt;&amp;#61;a1&amp;#43;b1&amp;#43;c1;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; blank1&amp;lt;sum12\n                    &lt;span class=\"hljs-attribute\"&gt;blank1&lt;/span&gt;&amp;#61;sum12;\n                    list1&amp;#61;[i,j,k];\n                end\n            end\n        end\n    end\nend\n&lt;span class=\"hljs-attribute\"&gt;MAX1&lt;/span&gt;&amp;#61;blank1 %最大获利\nlist1 %z最终结果\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["matlab动态规划问题。", ["这里我只列出了订购4套和5套的情况，一开始以为能弄出所有排列情况即可，但是结果是我写的排列中没有出现数字有重复的排列，类似于（1，1，2）（1，1, 3)这样的有重复数字的排列，导致计算订购5套时只得到答案时（0，2，3），未得到正确答案（1，1，3），如何在此代码上进行修改从而把有重复数字的排列加进去？", "\n", "clc;clear;\nA=[ 0 1 2 3 4];\nA1=[0 1 2 3 4 5];\nA2=[0 1 2 3 4 5 6];\n", "B", "=nchoosek(A,3);\n", "B1", "=nchoosek(A1,3);\n", "B2", "=nchoosek(A2,3);\n", "C", "=fliplr(B);\n", "C1", "=fliplr(B1);\n", "C2", "=fliplr(B2);\nsum=[B;C];\nsum1=[B1;C1];\nsum2=[B2;C2];\n[m,n]=size(sum);\n[m1,n1]=size(sum1);\n[m2,n2]=size(sum2);\n", "blank", "=zeros(m,1);\n", "blank1", "=zeros(m1,1);\n", "blank2", "=zeros(m2,1);\n%%\n", "for", " ", "i", "=1:m\n        ", "a4", "=sum(i,1);\n        switch a4\n            case 0\n                ", "a1", "=0;\n            case 1\n                ", "a1", "=3;\n            case 2\n                ", "a1", "=5;\n            case 3\n                ", "a1", "=6;\n            case 4\n                ", "a1", "=7;\n        end\n                \n            \n        ", "b4", "=sum(i,2);\n        switch b4\n            case 0\n                ", "b1", "=0;\n            case 1\n                ", "b1", "=4;\n            case 2\n                ", "b1", "=6;\n            case 3\n                ", "b1", "=7;\n            case 4\n                ", "b1", "=8;\n        end\n            \n        ", "c4", "=sum(i,3);\n        switch c4\n            case 0\n                ", "c1", "=0;\n            case 1\n                ", "c1", "=2;\n            case 2\n                ", "c1", "=5;\n            case 3\n                ", "c1", "=9;\n            case 4\n                ", "c1", "=8;\n        end\n        ", "if", " a4+b4+", "c4", "==4\n        ", "sum11", "=a1+b1+c1;\n        blank(i,1)=sum11;\n        end\n    \nend\n", "MAX", "=max(blank);\n[q,w]=", "find", "(", "blank", "==MAX);\n", "final", "=sum(q,:)\n%%\n", "for", " ", "i", "=1:m1\n        ", "a5", "=sum1(i,1);\n        switch a5\n            case 0\n                ", "a1", "=0;\n            case 1\n                ", "a1", "=3;\n            case 2\n                ", "a1", "=5;\n            case 3\n                ", "a1", "=6;\n            case 4\n                ", "a1", "=7;\n            case 5\n                ", "a1", "=6;\n                \n                \n        end\n                \n            \n        ", "b5", "=sum1(i,2);\n        switch b5\n            case 0\n                ", "b1", "=0;\n            case 1\n                ", "b1", "=4;\n            case 2\n                ", "b1", "=6;\n            case 3\n                ", "b1", "=7;\n            case 4\n                ", "b1", "=8;\n            case 5\n                ", "b1", "=9;\n        end\n            \n        ", "c5", "=sum1(i,3);\n        switch c5\n            case 0\n                ", "c1", "=0;\n            case 1\n                ", "c1", "=2;\n            case 2\n                ", "c1", "=5;\n            case 3\n                ", "c1", "=9;\n            case 4\n                ", "c1", "=8;\n            case 5\n                ", "c1", "=8;\n        end\n        ", "if", " a5+b5+", "c5", "==5\n        ", "sum22", "=a1+b1+c1;\n        blank1(i,1)=sum22;\n        end\nend\n        ", "MAX1", "=max(blank1);\n[q1,w1]=", "find", "(", "blank1", "==MAX1);\n", "final1", "=sum1(q1,:)\n\n", "\n", "1）当可分配设备数为4时，最终得到最优决策为（0,1,3）即1分厂不分配设备，2分厂分配1个设备，3分厂分配3个设备，得到最优解为13万元", "2）当可分配设备数为5时，最终得到最优决策为（1,1,3）即1分厂分配1台设备，2分厂分配1台设备，3分厂分配3个设备，得到最优解为16万元"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;树上背包问题&amp;#xff0c;给你个参考题目&lt;br /&gt;&lt;a href=\"https://www.luogu.com.cn/problem/P2014\" id=\"textarea_1660829562551_1660829661268_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.luogu.com.cn/problem/P2014&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;和你这个一样&amp;#xff0c;具体可以去看他们的题解&amp;#xff0c;他们写的会更详细。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["求解一道动态规划问题", ["问题遇到的现象和发生背景", "\n", "共N门功夫，没门功夫伤害值为ti，没一门功夫都有0或1个先修功夫，有先修功夫的需要先学个先修功夫之后才能练习。小西现在想学习M门功夫,她想知道M门功夫能够造成的伤害值最大为多大?", "输入示例：", "6", "2 ，-1", "3， 2", "4， 0", "3， -1", "4 ，1", "5 ，0", "4", "输入第一行为N,接下来N行第-个数字是第i门功夫的伤害值和第i门功夫的先修功夫(0-indexed).如果没有先修功夫，则标记其先修功夫为-1.最后一行输入为M ", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;看了代码有以下几个问题&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1.在记录是否为障碍物的数组中&amp;#xff0c;应该将其定义为bool类型而不是int类型&amp;#xff0c;因为它只有两个取值&amp;#xff0c;0和1。&lt;/p&gt;\n&lt;p&gt;2.在记录是否为障碍物的数组中&amp;#xff0c;应该将x和y的计算分别赋值给x和y&amp;#xff0c;而不是将y赋值给x&amp;#xff0c;这是因为y是dy数组中的元素&amp;#xff0c;而dx数组中的元素应该赋值给x。&lt;/p&gt;\n&lt;p&gt;3.在dp的过程中&amp;#xff0c;应该从0开始循环到Bx和By&amp;#xff0c;而不是从1开始循环到Bx-1和By-1&amp;#xff0c;因为dp[0][0]表示的是起点&amp;#xff0c;而dp[Bx-1][By-1]表示的是终点。&lt;/p&gt;\n&lt;p&gt;4.dp[i][j]应该只在map[i][j]等于0的情况下更新&amp;#xff0c;因为map[i][j]等于1表示这个点是障碍物&amp;#xff0c;无法通过。&lt;/p&gt;\n&lt;p&gt;这个是修改过后的代码&amp;#xff0c;你可以参考一下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; INF 1e9&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dx[] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;};\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dy[] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;};\n&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; map[&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dp[&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;];\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; Bx, By, Hx, Hy;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(map, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(map));\n    cin &amp;gt;&amp;gt; Bx &amp;gt;&amp;gt; By &amp;gt;&amp;gt; Hx &amp;gt;&amp;gt; Hy;\n    map[Hx][Hy] &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x &amp;#61; Hx &amp;#43; dx[i];\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; y &amp;#61; Hy &amp;#43; dy[i];\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || y &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || x &amp;gt; Bx || y &amp;gt; By) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        map[x][y] &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n    }\n    dp[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt;&amp;#61; Bx; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt;&amp;#61; By; j&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!map[i][j]) {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; j &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) dp[i][j] &amp;#61; dp[i][j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;];\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) dp[i][j] &amp;#61; dp[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j];\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; dp[i][j] &amp;#61; dp[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j] &amp;#43; dp[i][j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;];\n            }\n        }\n    }\n    cout &amp;lt;&amp;lt; dp[Bx][By] &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["C++动态规划DP题", ["DP题，马前卒，代码求指正", "思路是用map记录障碍点（记为1），dp时若非1则dp[i][j]=dp[i-1][j]+dp[i][j-1]", "原题洛谷：", "https://www.luogu.com.cn/problem/P1002", "\n", "\n", "#", "include", "<cstdio>", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<algorithm>", "\n", "#", "include", "<cstring>", "\n", "#", "define", " INF 1e9", "\n", "using", " ", "namespace", " std;\n\n", "int", " dx[]={", "-2", ",", "-1", ",", "1", ",", "2", ",", "-2", ",", "-1", ",", "1", ",", "2", "};\n", "int", " dy[]={", "-1", ",", "-2", ",", "-2", ",", "-1", ",", "1", ",", "2", ",", "2", ",", "1", "};\n", "bool", " map[", "22", "][", "22", "];\n", "int", " dp[", "22", "][", "22", "];\n\n", "int", " Bx,By,Hx,Hy;\n", "//dp[i][j]=dp[i-1][j]+dp[i][j-1]", "\n", "int", " ", "main", "()", "{\n    ", "memset", "(map,", "0", ",", "sizeof", "(map));\n    cin>>Bx>>By>>Hx>>Hy;\n    map[Hx][Hy]=", "1", ";\n    ", "for", "(", "int", " i=", "0", ";i<", "8", ";i++){\n        ", "int", " x=Hx+dx[i];\n        ", "int", " y=Hx+dy[i];\n        ", "if", "(x<", "0", "||y<", "0", "||x>Bx||y>By)", "continue", ";\n        map[x][y]=", "1", ";\n    }\n    dp[", "0", "][", "1", "]=", "1", ";\n    ", "for", "(", "int", " i=", "1", ";i<Bx;i++){\n        ", "for", "(", "int", " j=", "1", ";j<By;j++){\n            ", "if", "(map[i][j]==", "0", ")dp[i][j]=dp[i", "-1", "][j]+dp[i][j", "-1", "];\n        }\n    }\n    cout<<dp[Bx", "-1", "][By", "-1", "];\n    ", "return", " ", "0", ";\n} \n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;return x&amp;lt;1&amp;amp;&amp;amp;y&amp;lt;1?false:true;&lt;br /&gt;这意思要x和y都小于1才是false&amp;#xff1f;应该是x&amp;lt;1 || y&amp;lt;1吧&amp;#xff0c;有一个小于1就不对了吧&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划DP过河卒C++", ["洛谷原题：", "https://www.luogu.com.cn/problem/P1002", "用的DP，但是WA，求指导", "思路是把所有坐标+1（坐标原点映射到（1，1）），再用数组E[][]标记马可能在的地方（用in函数避免数组越界），最后dp", "\n", "#", "include", "<cstdio>", "\n", "#", "include", "<algorithm>", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<cstring>", "\n", "using", " ", "namespace", " std;\n\n", "//f[i][j]表示走到（i,j）的总路径条数", "\n", "//转移方程：f[i][j]=f[i][j-1]+f[i-1][j] ", "\n", "int", " Bx,By,Hx,Hy;\n", "int", " f[", "22", "][", "22", "],E[", "22", "][", "22", "];\n", "//坐标原点映射为（1，1） ", "\n\n", "//检查是否在边界内", "\n", "bool", " ", "in", "(", "int", " x,", "int", " y)", "{\n    ", "return", " x<", "1", "&&y<", "1", "?", "false", ":", "true", ";\n} \n\n", "int", " ", "dp", "(", "int", " Bx,", "int", " By,", "int", " Hx,", "int", " Hy)", "{\n    ", "//马 ", "\n    ", "memset", "(E,", "0", ",", "sizeof", "(E));\n    E[Hx][Hy]=", "-1", ";\n    ", "for", "(", "int", " i=", "-2", ";i<=", "2", ";i+=", "4", ")", "for", "(", "int", " j=", "-1", ";i<=", "1", ";i+=", "2", ")", "if", "(", "in", "(Hx+i,Hy+j))E[Hx+i][Hy+j]=", "-1", ";\n    ", "for", "(", "int", " i=", "-1", ";i<=", "1", ";i+=", "2", ")", "for", "(", "int", " j=", "-2", ";j<=", "2", ";j+=", "4", ")", "if", "(", "in", "(Hx+i,Hy+j))E[Hx+i][Hy+j]=", "-1", ";\n    ", "//for(int i=1;i<=Bx;i++)f[i][1]=1;", "\n    ", "//for(int j=1;j<=By;j++)f[1][j]=1;", "\n    f[", "1", "][", "0", "]=", "1", ";\n    ", "for", "(", "int", " i=", "1", ";i<=Bx;i++){\n        ", "for", "(", "int", " j=", "1", ";j<=By;j++){\n            ", "if", "(E[i][j]==", "-1", ")f[i][j]=", "0", ";\n            ", "else", " f[i][j]=f[i][j", "-1", "]+f[i", "-1", "][j];\n        }\n    }\n    ", "return", " f[Bx][By];\n}\n\n", "int", " ", "main", "()", "{\n    cin>>Bx>>By>>Hx>>Hy;\n    cout<<", "dp", "(Bx+", "1", ",By+", "1", ",Hx+", "1", ",Hy+", "1", ");\n    ", "return", " ", "0", ";\n} \n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;下面这个是我的&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;#include&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;\nusing namespace std;\nint n,x,l[&lt;span class=\"hljs-number\"&gt;1005&lt;/span&gt;],w[&lt;span class=\"hljs-number\"&gt;1005&lt;/span&gt;],u[&lt;span class=\"hljs-number\"&gt;1005&lt;/span&gt;],dp[&lt;span class=\"hljs-number\"&gt;1005&lt;/span&gt;];\nint main(){\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;x);\n    for(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;){\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d&amp;#34;&lt;/span&gt;,&amp;amp;l[i],&amp;amp;w[i],&amp;amp;u[i]);\n    }\n    for(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;){\n        for(int j&amp;#61;x;j&amp;gt;&amp;#61;u[i];j--){\n            dp[j]&amp;#61;max(dp[j]&amp;#43;l[i],dp[j-u[i]]&amp;#43;w[i]);\n        }\n        for(int j&amp;#61;u[i]&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;j&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j--){\n            dp[j]&amp;#43;&amp;#61;l[i];\n        }\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;*dp[x]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你的其实没啥问题&amp;#xff0c;只不过你的dp药要从0开始。因为就算没有药也有失败经验*_*.(要注意细节啊&amp;#xff0c;满意就给个采纳吧^_^)&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/181233219776122.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["动态规划五倍经验C++", ["洛谷原题：", "https://www.luogu.com.cn/problem/P1802", "初学DP，只拿了40分，但总感觉代码没问题", "转移方程：f[i][j]=max(f[i-1][j]+lose[i],f[i-1][j-use[i]]+win[i]) ", "\n", "#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,x,lose", "[1002]", ",win", "[1002]", ",use", "[1002]", ";\nlong long f", "[1002]", "[1002]", ";\n//f", "[i]", "[j]", "表示用j瓶药拿到前i人的exp\n//f", "[i]", "[j]", "=max(f", "[i-1]", "[j]", "+lose", "[i]", ",f", "[i-1]", "[j-use", "[i]", "]", "+win", "[i]", ") \nlong long dp(int n,int x){\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=x;j++){\n            if(j<use", "[i]", ")f", "[i]", "[j]", "=f", "[i-1]", "[j]", "+lose", "[i]", ";\n            else f", "[i]", "[j]", "=max(f", "[i-1]", "[j]", "+lose", "[i]", ",f", "[i-1]", "[j-use", "[i]", "]", "+win", "[i]", ");\n        }\n    }\n    return f", "[n]", "[x]", ";\n}\n\nint main(){\n    cin>>n>>x;\n    for(int i=1;i<=n;i++)cin>>lose", "[i]", ">>win", "[i]", ">>use", "[i]", ";\n    long long exp=dp(n,x);\n    cout<<5*exp;\n    return 0;\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;对于等差数列有三种情况 上升、下降、不变&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/842748858746174.png\" /&gt;&lt;/p&gt;&lt;br /&gt;可参考&lt;a href=\"https://blog.csdn.net/qq_17550379/article/details/96623816\" id=\"textarea_1647858527682_1647858864280_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;Leetcode 1027&amp;#xff1a;最长等差数列&amp;#xff08;超详细的解法&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff09;_coordinate_blog的博客-CSDN博客_最长等差子序列&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;给定一个整数数组 A&amp;#xff0c;返回 A 中最长等差子序列的长度。回想一下&amp;#xff0c;A 的子序列是列表 A[i_1], A[i_2], ..., A[i_k] 其中 0 &amp;lt;&amp;#61; i_1 &amp;lt; i_2 &amp;lt; ... &amp;lt; i_k &amp;lt;&amp;#61; A.length - 1。并且如果 B[i&amp;#43;1] - B[i]( 0 &amp;lt;&amp;#61; i &amp;lt; B.length - 1) 的值都相同&amp;#xff0c;那么序列 B 是等差的。...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/qq_17550379/article/details/96623816&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["最长等差数列动态规划", ["\n", "\n", "能不能具体讲解一下这个状态转移方程，尽量细致一点，想了半天愣是想不通"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;a[i]代表第i个要释放的囚犯的编号,为了方便处理边界问题&amp;#xff0c;我们把牢房的左墙壁和右墙壁也当作要释放的囚犯。&lt;br /&gt;\ndp[i][j]表示释放a[i]和a[j]之间应该要释放的囚犯所需要的最少金币数。&lt;/strong&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["贿赂囚犯，区间动态规划", ["区间dp的i和j连续释放之间的囚犯是什么意思啊"]], "Tag": "算法设计"}
{"Answer": "import java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static java.util.stream.Collectors.*;\r\n\r\npublic class GroupTest {\r\n    public static void main(String[] args) {\r\n        double[] nums = {100.0, 1.0, 20.0, 50.0, 90.0, 91.0, 92.0, 31.0, 32.0, 63.0,\r\n        33.0, 45.0, 56.0, 78.0, 88.0, 99.0, 8.0, 13.0, 23.0, 53.0, 67.0};\r\n\r\n        int k = 8;\r\n\r\n        group(nums, k);\r\n    }\r\n\r\n    public static void group(double[] values, int countPerGroup) {\r\n        // order first, get len%countPerGroup from middle\r\n        // the left split to several groups\r\n\r\n        // calculate the average, get len%countPerGroup numbers which totally to it\r\n        // cycle, if min, select the max\r\n\r\n        Arrays.sort(values);\r\n\r\n        List&lt;Double&gt; lstNums = new ArrayList&lt;&gt;();\r\n        for(double value: values) {\r\n            lstNums.add(value);\r\n        }\r\n\r\n        List&lt;Double&gt; middleList = new ArrayList&lt;&gt;();\r\n        int midLen = values.length%countPerGroup;\r\n\r\n        if(midLen != 0) {\r\n            middleList = middle(lstNums, midLen, Arrays.stream(values).average().getAsDouble());\r\n        }\r\n\r\n        List&lt;List&lt;Double&gt;&gt; lstGroups = new ArrayList&lt;&gt;();\r\n        int groups = values.length/countPerGroup;\r\n        for(int i = 0; i &lt; groups; i++) {\r\n            lstGroups.add(new ArrayList&lt;&gt;());\r\n        }\r\n\r\n        for(int i = 0; i &lt; countPerGroup; i++) {\r\n            lstGroups = lstGroups.stream().sorted((a, b) -&gt; {\r\n                double total_a = a.stream().reduce(0.0, Double::sum);\r\n                double total_b = b.stream().reduce(0.0, Double::sum);\r\n                return Double.compare(total_a, total_b);\r\n            }).collect(Collectors.toList());\r\n\r\n            lstGroups.forEach(group -&gt; {\r\n                group.add(max(lstNums));\r\n            });\r\n        }\r\n\r\n        if(midLen != 0) {\r\n            lstGroups.add(middleList);\r\n        }\r\n        lstGroups.forEach(group -&gt; {\r\n            System.out.println(\"average:\" + group.stream().reduce(0.0, Double::sum)/group.size()\r\n                    + \", count:\" + group.size()\r\n            + \", elements:\" + group.toString());\r\n        });\r\n    }\r\n\r\n    public static List&lt;Double&gt; middle(List&lt;Double&gt; values, int count, double average) {\r\n        List&lt;Double&gt; middleList = new ArrayList&lt;&gt;();\r\n\r\n        if(count == 1) {\r\n            middleList.add(mostNear(values, average));\r\n        } else {\r\n            List&lt;Double&gt; tmp = middle(values, count - 1, average);\r\n            double total = 0.0;\r\n            for(double value : tmp) {\r\n                total = total + value;\r\n            }\r\n\r\n            middleList.addAll(tmp);\r\n            middleList.add(mostNear(values, average * count - total));\r\n        }\r\n\r\n\r\n        return middleList;\r\n    }\r\n    public static double mostNear(List&lt;Double&gt; values, double average) {\r\n        double nearestValue = 0.0;\r\n        double gap = values.stream().max(Double::compareTo).get();\r\n        for(double value: values) {\r\n            if(Math.abs(value - average) &lt; gap) {\r\n                gap = Math.abs(value - average);\r\n                nearestValue = value;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // remove from the list\r\n        values.remove(nearestValue);\r\n        return nearestValue;\r\n    }\r\n\r\n    public static double max(List&lt;Double&gt; values) {\r\n        double maxValue = values.stream().max(Double::compareTo).get();\r\n\r\n        values.remove(maxValue);\r\n        return maxValue;\r\n    }\r\n\r\n}", "Konwledge_Point": "动态规划", "Question": ["java数据分组  动态规划 遗传算法", ["n个小数待分组，每个数组k个，如果n%k==0,那么组数为n/k个，如果n%k!=0,则最后一组的数量为n%k,组数为n/K+1,要求每个组的均值相等或者相近！"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, k,cnt&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;\n    &lt;span class=\"hljs-function\"&gt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt;&amp;gt; &lt;span class=\"hljs-title\"&gt;d&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;) {\n        cin &amp;gt;&amp;gt; d[i];\n    }\n    &lt;span class=\"hljs-function\"&gt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt;&amp;gt; &lt;span class=\"hljs-title\"&gt;dp&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;){\n                cnt&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            dp[i] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(dp[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43;k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,dp[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43;d[cnt]-d[cnt&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]);\n        }\n\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        dp[i] &amp;#61; dp[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43;k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;/*for (int i&amp;#61;1; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n       cout&amp;lt;&amp;lt;dp[i]&amp;lt;&amp;lt;endl;\n    }*/&lt;/span&gt;\n    cout &amp;lt;&amp;lt; dp[n] &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["C++算法题（动态规划算法）", ["贝西喜欢看Mooloo的节目。因为贝西是一头忙碌的奶牛，她已经计划了接下来N（1≤N≤10^5）天的时间表，她将观看Mooloo。因为Mooloo是一项付费订阅服务，她现在需要决定如何将需要支付的金额降至最低。", "\n", "Mooloo有一个有趣的订阅系统：连续d天订阅Mooloo需要d+K（1≤K≤10^9）元钱。您可以随时启动订阅，如果当前订阅到期，您可以根据需要多次启动新订阅。考虑到这一点，计算出贝西为了完成她的计划需要支付的最低金额。", "\n", "INPUT FORMAT（输入来自终端/stdin）：", "\n", "第一行包含整数N和K。", "\n", "第二行包含N个整数，描述贝西观看Mooloo的天数：1≤d1<d2<……<dN≤10^14。", "\n", "OUTPUT FORMAT（输出格式）（将输出打印到终端/标准输出）：", "\n", "请注意，此问题中涉及的大整数大小可能需要使用64位整数数据类型（例如，C/C++中的“long-long”）。", "\n", "样本输入：", "\n", "2 4", "\n", "7 9", "\n", "样本输出：", "\n", "7.", "\n", "贝西在第7天购买了为期三天的订阅，花费d+K=3+4=7元。", "\n", "样本输入：", "\n", "2 3", "\n", "1 10", "\n", "样本输出：", "\n", "8.", "\n", "贝西第一天购买一天的订阅，花费d+K=1+3=4元。贝西还在第10天购买一天的订阅，花费d+K=1+3=4元。贝西总共花了8元。", "\n", "评分：", "\n", "输入3-5:N≤10", "\n", "输入6-12：无额外限制。", "\n", "这是今天学校布置的题目，我不会，希望各位帮忙解答一下（用C++的算法进行），最希望给出代码和思路！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这一道题很容易被误认为机器人路径问题&amp;#xff0c;但你仔细看看这个题目&amp;#xff0c;这个是4行5列&amp;#xff0c;你用的是5行5列的&amp;#xff0c;应该用4行4列的。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["简单动态规划问题（寻找路径条数）", ["问题遇到的现象和发生背景", "\n", "蓝桥杯上的题", "视频链接：", "https://www.bilibili.com/video/BV1qE411E7UK?p=3", "\n", "问题相关代码，请勿粘贴截图", "\n", "#include <stdio.h>\n\nint main()\n{\n    long f[", "5", "][", "5", "]={", "0", "};\n    int i,j;\n    for(i=", "0", ";i<", "5", ";i++)\n        for(j=", "0", ";j<", "5", ";j++)\n            {\n                if(i == ", "0", " and j == ", "0", ") //递推边界", "1", " f[", "0", "][", "0", "]=", "1", "\n                    f[", "0", "][", "0", "] = ", "1", ";\n                else if(i == ", "0", " and j > ", "0", ")//递推边界", "2", "，x=", "0", "时；\n                    f[", "0", "][j] = f[", "0", "][j - ", "1", "];\n                else if(i > ", "0", " and j == ", "0", ")//递推边界", "3", "，y=", "0", "时；\n                    f[i][", "0", "] = f[i - ", "1", "][", "0", "];\n                else\n                    f[i][j] = f[i - ", "1", "][j] + f[i][j - ", "1", "];//递推核心\n            }\n        printf(", "\"%d\"", ",f[", "4", "][", "4", "]);\n        return ", "0", "; \n}\n\n", "\n", "运行结果及报错内容", "\n", "运行结果打印出的是70 而官方给出的答案却是是35", "\n", "我的解答思路和尝试过的方法", "\n", "  在这个问题中，不管是上面还是左边的字都可以接上下一个字，所以问题就转化成了“从起点（0，0）开始，移动至终点（4，4）有可以有多少条路线”.所以根据动态转移方程f[i][j] = f[i - 1][j] + f[i][j - 1]写出了以上代码。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;一个标准的多重背包问题&amp;#xff0c;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n#include &amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;\nusing namespace std;\nint n,m;//n种牌&amp;#xff0c;出m张,根据n、m的大小开二维数组d[n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][m&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] \n//这里假设n小于&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&amp;#xff0c;m小于&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt; \nint a[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;],d[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;],s;//d[i][j]表示前i种牌出m张&amp;#xff0c;一共多少种 \nint main()\n{\n    cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m;\n    for(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;) cin&amp;gt;&amp;gt;a[i]; \n    d[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    for(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;){\n        d[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        s&amp;#43;&amp;#61;a[i];//前i种牌一共s张 \n        for(int j&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;lt;&amp;#61;min(m,s);j&amp;#43;&amp;#43;){//凑j张牌  //降维的话&amp;#xff0c;这需要倒着做&amp;#xff0c;参考&lt;span class=\"hljs-number\"&gt;01&lt;/span&gt;背包\n            for(int k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&amp;#61;min(a[i],j);k&amp;#43;&amp;#43;){//取k张i &amp;#xff0c;这是一个多重背包 \n                d[i][j]&amp;#43;&amp;#61;d[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j-k];\n                d[i][j]&lt;span class=\"hljs-comment\"&gt;%&amp;#61;1e6&amp;#43;7;&lt;/span&gt;\n            } \n        }\n    } \n    cout&amp;lt;&amp;lt;d[n][m]; //降维的话&amp;#xff0c;倒着做。 \n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["求大家帮我解答一下这道动态规划题", ["现在有n种牌，第i种有ai张牌。", "\n", "现在要出m张牌，可以从手牌里任意选择。出牌时同一种牌需要放在一起，且不同种类的牌需要按牌的种类编号从小到大摆放。", "\n", "想知道一共有多少种出牌方式。对答案膜10^6 + 7的结果", "\n", "想了很久还是不会"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1.把输入的数据放到数组里面&amp;#xff1b;&lt;br /&gt;2.循环遍历相加&amp;#xff0c;步长为3&amp;#xff1b;&lt;br /&gt;3.把相加的数比较大小&amp;#xff0c;去最大的一个。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["站外题！动态规划 ！求解！！", ["求大神解答！", "题目：", "设有N 个正整数（1<=N<=1000），其中每一个均是大于等子1 小于等于10000的数。从这N个数中任取出若干个数（不能连续取相邻3个数）要求得到一种取法，使得到的和为最大。", "如：当N=6时，有6个数分别为：15,18 28 14 5 11 2133", "此时，有许多种取法，如：", "15, 18,45,33", "18. 28 21 33", "15. 28 45 33", "和为121就是满足要求的一种取法，", "\n", "输入数据的第一行是一个整数N", "第二行有N个符合条件的整数，数与数之间的间隔是用一个空格分开。", "输出数据仅有一行包含一个整数，即为满足条件的最大和。", "输入：", "6", "15 18 28 45 21 33", "输出：", "121"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码有一些问题。函数 leftsing 采用了递归的方式&amp;#xff0c;这会导致程序在处理较大的输入时运行很慢&amp;#xff0c;导致超时。此外程序没有处理可能出现的边界条件&amp;#xff0c;例如 i 等于 0 时的情况。&lt;/p&gt;\n&lt;p&gt;提供一个思路&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;首先&amp;#xff0c;定义一个数组 dp&amp;#xff0c;dp[i] 表示在前 i 个同学中出列最少的同学数&amp;#xff0c;使得剩下的同学能排成合唱队形。&lt;/p&gt;\n&lt;p&gt;对于每个同学&amp;#xff0c;有两种选择&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1、将其出列&amp;#xff0c;这样的话&amp;#xff0c;需要使得剩下的同学能排成合唱队形&amp;#xff0c;就有 dp[i] &amp;#61; dp[i-1]。&lt;br /&gt;2、将其保留&amp;#xff0c;这样的话&amp;#xff0c;需要使得它的左右两侧的同学身高都比它低&amp;#xff0c;可以使用一个数组 left[i] 表示在第 i 个同学的左侧&amp;#xff0c;最多能保留多少个比它高的同学&amp;#xff0c;使得剩下的同学能排成合唱队形。同理&amp;#xff0c;可以使用一个数组 right[i] 表示在第 i 个同学的右侧&amp;#xff0c;最多能保留多少个比它低的同学&amp;#xff0c;使得剩下的同学能排成合唱队形。就有 dp[i] &amp;#61;dp[i] &amp;#61; min(dp[i], dp[left[i]] &amp;#43; dp[right[i]] &amp;#43; 1)&lt;/p&gt;\n&lt;p&gt;于是&amp;#xff0c;就可以得到状态转移方程&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;dp[i] &amp;#61; min(dp[i-1], dp[left[i]] &amp;#43; dp[right[i]] &amp;#43; 1)&lt;/p&gt;\n&lt;p&gt;接下来&amp;#xff0c;考虑如何求出 left[i] 和 right[i]。可以使用单调栈来维护一个递增的子序列。对于第 i 个同学&amp;#xff0c;弹出栈中所有比它大的同学&amp;#xff0c;并将它压入栈中。如果栈中有 k 个同学&amp;#xff0c;就 left[i] &amp;#61; k&amp;#xff0c;也就是在第 i 个同学的左侧最多能保留 k 个比它高的同学&amp;#xff0c;使得剩下的同学能排成合唱队形。对于 right[i]&amp;#xff0c;可以从后往前扫描数组&amp;#xff0c;使用同样的方法求出。&lt;/p&gt;\n&lt;p&gt;程序输出 dp[n] 就可以了。&lt;/p&gt;\n&lt;p&gt;这是一种可行的做法&amp;#xff0c;但是它的时间复杂度是 O(n^2)&amp;#xff0c;可能还是不够优秀。如果想进一步优化&amp;#xff0c;可以考虑使用更高效的算法&amp;#xff0c;例如二分或者树状数组。&lt;br /&gt;仅供参考&amp;#xff0c;望采纳&amp;#xff0c;谢谢。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["关于动态规划合唱队问题的疑问！(语言-c语言)", ["您的程序未能在规定时间内运行结束，请检查是否循环有错或算法复杂度过大。", "\n", "通俗来说，能找到一个同学，他的两边的同学身高都依次严格降低的队形就是合唱队形。", "例子：", "123 124 125 123 121 是一个合唱队形", "123 123 124 122不是合唱队形，因为前两名同学身高相等，不符合要求", "123 122 121 122不是合唱队形，因为找不到一个同学，他的两侧同学身高递减。", "\n", "你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。", "\n", "注意：不允许改变队列元素的先后顺序 且 不要求最高同学左右人数必须相等", "\n", "数据范围： 1 \\le n \\le 3000 \\1≤n≤3000 ", "\n", "未通过样例:", "124", "16 103 132 23 211 75 155 82 32 48 79 183 13 91 51 172 109 102 189 121 12 120 116 133 79 120 116 208 47 110 65 187 69 143 140 173 203 35 184 49 245 50 179 63 204 34 218 11 205 100 90 19 145 203 203 215 72 108 58 198 95 116 125 235 156 133 220 236 125 29 235 170 130 165 155 54 127 128 204 62 59 226 233 245 46 3 14 108 37 94 52 97 159 190 143 67 24 204 39 222 245 233 11 80 166 39 224 12 38 13 85 21 47 25 180 219 140 201 11 42 110 209 77 136", "\n", "预期输出：95", "\n", "#", "include", " ", "<stdio.h>", "\n\n", "int", " ", "leftsing", "(", "int", " *height,", "int", " num,", "int", " i)", "{", "//以第i个同学为基准左边最长上升子序列", "\n", "//前面i-1组中满足：1.height[j]<height[i]2.leftsing[j]为最大值；", "\n    ", "if", "(i>", "0", "){\n      ", "int", " max1=", "0", ",max2=", "0", ";\n      ", "for", "(", "int", " j=", "0", ";j<i;j++){\n         ", "if", "(", "leftsing", "(height,num,j)>max1&&height[j]<height[i]){\n           max1=", "leftsing", "(height,num,j);\n         }\n         ", "if", "(", "leftsing", "(height,num,j)>max2){\n            max2=", "leftsing", "(height,num,j);\n         }\n      }\n      ", "if", "(max1>=max2){\n        ", "return", " max1+", "1", ";\n      }\n      ", "else", "\n        ", "return", " max2;\n    }\n    ", "else", "\n    ", "return", " ", "1", ";\n}", "//该函数输出正常", "\n\n", "int", " ", "main", "()", " ", "{\n    ", "int", " num=", "0", ";\n    ", "scanf", "(", "\"%d\"", ",&num);\n    ", "int", " height[num];\n    ", "for", "(", "int", " i=", "0", ";i<num;i++){\n        ", "scanf", "(", "\"%d\"", ",&height[i]);\n    }", "//以上输入正常，下面思考如何实现合唱队列", "\n    ", "int", " backheight[num];\n    ", "for", "(", "int", " i=", "0", ";i<num;i++){", "//对height进行倒序", "\n       backheight[i]=height[num", "-1", "-i];\n    }\n    ", "int", " best=", "0", ";\n    ", "for", "(", "int", " i=", "0", ";i<num;i++){", "//height的第i个数就是backheight的第num-1-i个数", "\n       ", "int", " temp=", "leftsing", "(height,num,i)+", "leftsing", "(backheight,num,num-i", "-1", ")", "-1", ";\n       ", "//temp越大越好", "\n       ", "if", "(temp>best)\n          best=temp;\n    }\n    ", "int", " min=num-best;\n    ", "printf", "(", "\"%d\"", ",min);\n    ", "return", " ", "0", ";\n}\n\n", "\n", "牛客刷题时遇到的问题，自测样例都能过，但是提交时就是0/20，而且报超时，用本地IDE输入错误的样例也是没有输出，很奇怪。"]], "Tag": "算法设计"}
{"Answer": "代码下载：https://download.csdn.net/download/caozhy/11449907\r\n\r\n\r\n![图片说明](https://img-ask.csdn.net/upload/201907/29/1564412731_903934.gif)\r\n\r\n\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Data;\r\nusing System.Drawing;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Windows.Forms;\r\n\r\nnamespace Q770812\r\n{\r\n    public partial class Form1 : Form\r\n    {\r\n        public Form1()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        private int[,] area;\r\n\r\n        private int step = 1;\r\n\r\n        private void button1_Click(object sender, EventArgs e)\r\n        {\r\n            //step++;\r\n            for (int k = 0; k &lt; step; k++)\r\n            {\r\n                for (int i = 0; i &lt; 30; i++)\r\n                {\r\n                    for (int j = 0; j &lt; 15; j++)\r\n                    {\r\n                        if (area[i, j] == 4) area[i, j] = 1;\r\n                    }\r\n                }\r\n                for (int i = 0; i &lt; 30; i++)\r\n                {\r\n                    for (int j = 0; j &lt; 15; j++)\r\n                    {\r\n                        if (area[i, j] == 0)\r\n                        {\r\n                            bool pt = false;\r\n                            for (int ii = (i &gt; 0 ? i - 1 : 0); ii &lt;= (i &lt; 29 ? i + 1 : 29); ii++)\r\n                                for (int jj = (j &gt; 0 ? j - 1 : 0); jj &lt;= (j &lt; 14 ? j + 1 : 14); jj++)\r\n                                {\r\n                                    if ((ii == i &amp;&amp; jj != j) || (ii != i &amp;&amp; jj == j))\r\n                                        if (area[ii, jj] == 1) pt = true;\r\n                                }\r\n                            area[i, j] = pt ? 4 : area[i, j];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            pictureBox1.Refresh();\r\n        }\r\n\r\n        private void pictureBox1_Paint(object sender, PaintEventArgs e)\r\n        {\r\n            if (area == null) return;\r\n            var g = e.Graphics;\r\n            g.FillRectangle(Brushes.White, 0f, 0f, pictureBox1.Width, pictureBox1.Height);\r\n            for (int i = 0; i &lt; 30; i++)\r\n            {\r\n                for (int j = 0; j &lt; 15; j++)\r\n                {\r\n                    Brush br = new SolidBrush(Color.FromArgb(110, 136, 199));\r\n                    switch (area[i, j])\r\n                    {\r\n                        case 0:\r\n                            br = new SolidBrush(Color.FromArgb(219, 213, 213));\r\n                            break;\r\n                        case 1:\r\n                            br = new SolidBrush(Color.FromArgb(202, 190, 180));\r\n                            break;\r\n                        case 3:\r\n                            br = new SolidBrush(Color.FromArgb(134, 134, 122));\r\n                            break;\r\n                    }\r\n                    g.FillRectangle(br, 10.0f + i * 20.0f, 10.0f + j * 20.0f, 18.0f, 18.0f);\r\n                }\r\n            }\r\n        }\r\n\r\n        private void button2_Click(object sender, EventArgs e)\r\n        {\r\n            area = new int[30, 15];\r\n            for (int i = 0; i &lt; 30; i++)\r\n            {\r\n                for (int j = 0; j &lt; 15; j++)\r\n                    area[i, j] = 0;\r\n            }\r\n            for (int i = 3; i &lt;= 11; i++)\r\n            {\r\n                area[3, i] = 3;\r\n                area[4, i] = 3;\r\n            }\r\n            for (int i = 4; i &lt;= 14; i++)\r\n            {\r\n                area[13, i] = 3;\r\n                area[14, i] = 3;\r\n            }\r\n            for (int i = 0; i &lt;= 6; i++)\r\n            {\r\n                area[22, i] = 3;\r\n                area[23, i] = 3;\r\n            }\r\n            for (int i = 0; i &lt;= 6; i++)\r\n            {\r\n                area[22, i] = 3;\r\n                area[23, i] = 3;\r\n            }\r\n            for (int i = 5; i &lt;= 6; i++)\r\n            {\r\n                area[24, i] = 3;\r\n                area[25, i] = 3;\r\n                area[26, i] = 3;\r\n            }\r\n            area[8, 7] = 1;\r\n            step = 1;\r\n            pictureBox1.Refresh();\r\n        }\r\n\r\n        private void Form1_Load(object sender, EventArgs e)\r\n        {\r\n            button2.PerformClick();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n```\r\nnamespace Q770812\r\n{\r\n    partial class Form1\r\n    {\r\n        /// &lt;summary&gt;\r\n        /// Required designer variable.\r\n        /// &lt;/summary&gt;\r\n        private System.ComponentModel.IContainer components = null;\r\n\r\n        /// &lt;summary&gt;\r\n        /// Clean up any resources being used.\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"disposing\"&gt;true if managed resources should be disposed; otherwise, false.&lt;/param&gt;\r\n        protected override void Dispose(bool disposing)\r\n        {\r\n            if (disposing &amp;&amp; (components != null))\r\n            {\r\n                components.Dispose();\r\n            }\r\n            base.Dispose(disposing);\r\n        }\r\n\r\n        #region Windows Form Designer generated code\r\n\r\n        /// &lt;summary&gt;\r\n        /// Required method for Designer support - do not modify\r\n        /// the contents of this method with the code editor.\r\n        /// &lt;/summary&gt;\r\n        private void InitializeComponent()\r\n        {\r\n            this.pictureBox1 = new System.Windows.Forms.PictureBox();\r\n            this.button1 = new System.Windows.Forms.Button();\r\n            this.button2 = new System.Windows.Forms.Button();\r\n            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();\r\n            this.SuspendLayout();\r\n            // \r\n            // pictureBox1\r\n            // \r\n            this.pictureBox1.BackColor = System.Drawing.Color.White;\r\n            this.pictureBox1.Location = new System.Drawing.Point(30, 12);\r\n            this.pictureBox1.Name = \"pictureBox1\";\r\n            this.pictureBox1.Size = new System.Drawing.Size(616, 319);\r\n            this.pictureBox1.TabIndex = 0;\r\n            this.pictureBox1.TabStop = false;\r\n            this.pictureBox1.Paint += new System.Windows.Forms.PaintEventHandler(this.pictureBox1_Paint);\r\n            // \r\n            // button1\r\n            // \r\n            this.button1.Location = new System.Drawing.Point(431, 354);\r\n            this.button1.Name = \"button1\";\r\n            this.button1.Size = new System.Drawing.Size(90, 25);\r\n            this.button1.TabIndex = 1;\r\n            this.button1.Text = \"next\";\r\n            this.button1.UseVisualStyleBackColor = true;\r\n            this.button1.Click += new System.EventHandler(this.button1_Click);\r\n            // \r\n            // button2\r\n            // \r\n            this.button2.Location = new System.Drawing.Point(556, 354);\r\n            this.button2.Name = \"button2\";\r\n            this.button2.Size = new System.Drawing.Size(90, 25);\r\n            this.button2.TabIndex = 2;\r\n            this.button2.Text = \"reset\";\r\n            this.button2.UseVisualStyleBackColor = true;\r\n            this.button2.Click += new System.EventHandler(this.button2_Click);\r\n            // \r\n            // Form1\r\n            // \r\n            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\r\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\r\n            this.ClientSize = new System.Drawing.Size(673, 391);\r\n            this.Controls.Add(this.button2);\r\n            this.Controls.Add(this.button1);\r\n            this.Controls.Add(this.pictureBox1);\r\n            this.Name = \"Form1\";\r\n            this.Text = \"Form1\";\r\n            this.Load += new System.EventHandler(this.Form1_Load);\r\n            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();\r\n            this.ResumeLayout(false);\r\n\r\n        }\r\n\r\n        #endregion\r\n\r\n        private System.Windows.Forms.PictureBox pictureBox1;\r\n        private System.Windows.Forms.Button button1;\r\n        private System.Windows.Forms.Button button2;\r\n    }\r\n}\r\n\r\n```", "Konwledge_Point": "动态规划", "Question": ["请问下面这样的路径规划动态图应该如何制作", []], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;看着应该没问题&amp;#xff0c;递归的话&amp;#xff0c;n 如果大一点话&amp;#xff0c;可能会栈溢出&amp;#xff0c; 不知道这种情况是不是也是解答错误&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["想问问以下两种动态规划方法有什么不同？为什么会导致结果不一样？", ["第一种做法的思路是先不断递归求出下格子与右格子拿到的金币数，然后根据两者的最大值来判断是走下方还是走右方。期间使用了标记数组剪枝", "\n", "def dfs(x,y):\n    if x > n-", "1", " or y > n-", "1", ":\n        return ", "0", "\n    if x == n-", "1", " and y == n-", "1", ":\n        return nums[x][y]\n    if not used[x][y]:\n        used[x][y] = ", "max", "(", "dfs", "(x+", "1", ",y),", "dfs", "(x,y+", "1", ")) + nums[x][y]\n    return used[x][y]\n    \n    \nn = ", "int", "(", "input", "())\nnums = []\nfor i in ", "range", "(n):\n    nums.", "append", "(", "list", "(", "map", "(int,", "input", "().", "split", "())))\n    \nused = [[", "0", " for i in ", "range", "(n)] for j in ", "range", "(n)]\n", "print", "(", "dfs", "(", "0", ",", "0", "))\n", "\n", "第二种思路是要想走到这个位置，就要看这个位置的上方拿的金币多点还是左方拿的金币多点，哪边拿得多就从哪边走过来", "\n", "nums = ", "[]", "\nn = int(", "input", "())\n", "for", " ", "i", " ", "in", " range(n):\n    nums", ".append", "(list(map(int, ", "input", "()", ".split", "())))\n \ndp = ", "[[0 for i in range(n)]", " ", "for", " j ", "in", " range(n)]\n\ndp", "[0]", "[0]", " = nums", "[0]", "[0]", "\n", "for", " ", "i", " ", "in", " range(", "1", ", n):\n    dp", "[i]", "[0]", " = dp", "[i - 1]", "[0]", " + nums", "[i]", "[0]", "\n    dp", "[0]", "[i]", " = dp", "[0]", "[i - 1]", " + nums", "[0]", "[i]", "\n\n", "for", " ", "i", " ", "in", " range(", "1", ", n):\n    ", "for", " j ", "in", " range(", "1", ", n):\n        dp", "[i]", "[j]", " = max(dp", "[i - 1]", "[j]", ", dp", "[i]", "[j - 1]", ") + nums", "[i]", "[j]", "\n \n", "print", "(dp[n - ", "1", "][n - ", "1", "])", "\n", "\n", "一种做法能拿满分，另一种做法只能拿30分，没有出现运行超时的情况，都是解答错误."]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/discreeter/article/details/52005835", "Konwledge_Point": "动态规划", "Question": ["不用动态规划，亲和串能做到不超时么？具体的代码和思路？", ["Problem Description", "\n人随着岁数的增长是越大越聪明还是越大越笨，这是一个值得全世界科学家思考的问题,同样的问题Eddy也一直在思考，因为他在很小的时候就知道亲和串如何判断了，但是发现，现在长大了却不知道怎么去判断亲和串了，于是他只好又再一次来请教聪明且乐于助人的你来解决这个问题。", "\n亲和串的定义是这样的：给定两个字符串s1和s2,如果能通过s1循环移位，使s2包含在s1中，那么我们就说s2 是s1的亲和串。", "\n\n", "Input", "\n本题有多组测试数据，每组数据的第一行包含输入字符串s1,第二行包含输入字符串s2，s1与s2的长度均小于100000。", "\n\n", "Output", "\n如果s2是s1的亲和串，则输出\"yes\"，反之，输出\"no\"。每组测试的输出占一行。", "\n\n", "Sample Input", "\nAABCD", "\nCDAA", "\nASD", "\nASDF", "\n\n", "Sample Output", "\nyes", "\nno"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我怀疑你是故意的吧&amp;#xff0c;哪怕是复制黏贴也好啊&amp;#xff0c;看得头都大了。两个代码不是一样的。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["一道OJ动态规划题（Print Words in Lines），同样的代码用C++能通过，改写为C就不行", ["C++版本", "\n", "\n//poj ", "3390", "\n//sep9\n#include <iostream>\n#include<memory.h>\nusing namespace std;\nconst int maxM=", "102", ";\nconst int maxN=", "10004", ";\nint dp[maxN+", "1", "][maxM+", "1", "];\nint ", "L", "[maxN];\n\nint main()\n{\n    int cases;\n    scanf(", "\"%d\"", ",&cases);\n    while(cases--){\n        int m,n,s;\n        scanf(", "\"%d%d\"", ",&m,&n);\n        for(int i=", "1", ";i<=n;i++)\n            scanf(", "\"%d\"", ",&", "L", "[i]);\n        memset(dp,", "0x7f", ",sizeof(dp));\n        dp[", "0", "][m]=", "0", ";\n        for(int i=", "1", ";i<=n;i++){\n            int x=dp[maxN][maxM];\n            for(s=m;s>=", "0", ";--s)\n                x=min(x,dp[i", "-1", "][s]);    \n            dp[i][", "L", "[i]]=x+(m-", "L", "[i])*(m-", "L", "[i]);\n            for(s=", "L", "[i]+", "2", ";s<=m;++s){\n                int x=s-", "L", "[i]", "-1", ";\n                if(dp[i", "-1", "][x]==dp[maxN][maxM])\n                    continue;\n                int y=dp[i", "-1", "][x]-(m-x)*(m-x)+(m-s)*(m-s);\n                dp[i][s]=y;\n            }\n        }\n        int ans=dp[", "0", "][maxM];\n        for(s=", "0", ";s<=m;++s)\n            ans=min(ans,dp[n][s]);\n        printf(", "\"%d\\n\"", ",ans);\n    }\n    return ", "0", ";    \n} \n", "\n", "c语言版本", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<memory.h>", "\n", "#", "define", " maxM 108", "\n", "#", "define", " maxN 10004", "\n", "int", " f[maxM+", "10", "][maxN+", "10", "];\n", "int", " L[maxN+", "1", "];\n", "int", " ", "min", "(", "int", " a,", "int", " b)", "{\n    ", "if", "(a>b)\n        ", "return", " b;\n    ", "else", "\n        ", "return", " a;\n}\n\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " c,i,x,y,fine;\n    ", "scanf", "(", "\"%d\"", ",&c);\n    ", "while", "(c--){\n        ", "int", " m,n,s;\n        ", "scanf", "(", "\"%d%d\"", ",&m,&n);\n        ", "for", "(i=", "1", ";i<=n;++i)\n            ", "scanf", "(", "\"%d\"", ",&L[i]);\n        ", "memset", "(f,", "0x7f", ",", "sizeof", "(f));\n        f[", "0", "][m]=", "0", ";\n\n        ", "for", "(i=", "1", ";i<=n;i++){\n            x=f[maxM][maxN];\n            ", "for", "(s=m;s>=", "0", ";s--)\n                x=", "min", "(x,f[i", "-1", "][s]);\n            f[i][L[i]]=x+(m-L[i])*(m-L[i]);\n\n            ", "for", "(s=L[i]+", "2", ";s<=m;s++){\n                x=s-L[i]", "-1", ";\n                ", "if", "(f[i", "-1", "][x]==f[maxM][maxN])\n                    ", "continue", ";\n                y=f[i", "-1", "][x]-(m-x)*(m-x)+(m-s)*(m-s);\n                f[i][s]=y;\n            }\n        }\n\n        fine=f[maxM][maxN];\n        ", "for", "(s=", "0", ";s<=m;s++){\n            fine=", "min", "(fine,f[n][s]);\n        }\n        ", "printf", "(", "\"%d\\n\"", ",fine);\n    }\n    ", "return", " ", "0", ";\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;按照你的代码改的&amp;#xff0c;有什么看不懂的再问我&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\nvector&amp;lt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-built_in\"&gt;generate&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; numRows) {\n\n    &lt;span class=\"hljs-comment\"&gt;//int i &amp;#61; numRows;&lt;/span&gt;\n\n    &lt;span class=\"hljs-comment\"&gt;//int j &amp;#61; numRows;&lt;/span&gt;\n\n    vector&amp;lt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-built_in\"&gt;dp&lt;/span&gt;(numRows&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;(numRows&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));               &lt;span class=\"hljs-comment\"&gt;//代表的是第i行第j列的元素是多少&lt;/span&gt;\n\n    vector&amp;lt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;&amp;gt; st;\n\n    \n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&amp;#61;numRows; i&amp;#43;&amp;#43;)\n\n        dp[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n\n\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j&amp;lt;numRows; j&amp;#43;&amp;#43;)\n\n        dp[j][j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n    st.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;({ &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; });\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; numRows; i&amp;#43;&amp;#43;) {\n        vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; s;\n        s.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(dp[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; i; j&amp;#43;&amp;#43;) {\n\n            dp[i][j] &amp;#61; dp[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; dp[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j];\n\n            &lt;span class=\"hljs-comment\"&gt;//s.push_back(dp[i, j]);&lt;/span&gt;\n            s.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(dp[i][j]);\n\n        }\n\n        st.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(s);\n\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; st;\n\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    vector&amp;lt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;&amp;gt; ans &amp;#61; &lt;span class=\"hljs-built_in\"&gt;generate&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;size_t&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; ans.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;i) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;size_t&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; ans[i].&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;j) {\n            cout &amp;lt;&amp;lt; ans[i][j] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n        }\n        cout &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["我觉得这道杨辉三角思路应该是这样的，就是用动态规划，但感觉里面错误不少，有没有朋友愿意看一下啊。", ["问题遇到的现象和发生背景", "\n", "https://leetcode-cn.com/problems/pascals-triangle/solution/", "\n", "问题相关代码，请勿粘贴截图", "\n", "class", " ", "Solution", " {\n", "public", ":\n    vector<vector<", "int", ">> ", "generate", "(", "int", " numRows) {\n        ", "int", " i = numRows;\n        ", "int", " j = numRows;\n        ", "int", " dp[i][j];               ", "//代表的是第i行第j列的元素是多少", "\n        vector<vector<", "int", ">> st;\n        vector<", "int", "> s;\n        ", "for", "(", "int", " i = ", "0", ";i<numRows;i++)\n            dp[i][", "0", "] = ", "1", ";\n\n        ", "for", "(", "int", " j = ", "0", ";j<numRows;j++)\n            dp[j][j+", "1", "] = ", "0", ";\n\n        ", "for", "(", "int", " i = ", "1", ";i<=numRows;i++){\n            ", "for", "(", "int", " j = ", "1", ";j<=i+", "1", ";j++){\n                dp[i][j] = dp[i", "-1", "][j", "-1", "] + dp[i", "-1", "][j];\n                s.", "push_back", "(dp[i,j]);\n            }\n            st.", "push_back", "(s);\n        }\n        ", "return", " st;\n    }\n};\n\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;if (result &amp;#61;&amp;#61; 0) 条件不满足的情况下就会执行。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["书上说这段代码是用动态规划优化了递归算法，但是像下面这样数组里的元素好像永远不会改变，那跟原本的递归不就没有区别了吗", ["我想问一下，下面这段代码最后的 output[n] = result 意义是什么，在这段代码里它好像并不会执行。书上说这段代码是用动态规划优化了递归算法，但是像下面这样数组里的元素好像永远不会改变，那跟原本的递归不就没有区别了吗。", "\n", "\npublic class test2 {\n    public ", "static", " ", "int", " output[] = new ", "int", "[", "1000", "];\n    public ", "static", " ", "void", " main(", "String", "[] args) {\n        ", "System", ".", "out", ".println(", "method", "(", "6", "));\n    }\n    public ", "static", " ", "int", " ", "method", "(", "int", " n){\n        ", "int", " ", "result", ";\n        ", "result", " = output[n];\n        ", "if", " (", "result", " == ", "0", "){\n            ", "if", " (n == ", "0", ")\n                ", "return", " ", "0", ";\n            ", "else", " ", "if", " (n == ", "1", ")\n                ", "return", " ", "1", ";\n            ", "else", " {\n                ", "return", " (", "method", "(n - ", "1", ") + ", "method", "(n - ", "2", "));\n            }\n        }\n        output[n] = ", "result", ";\n        ", "return", " ", "result", ";\n    }\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;if( len &amp;lt;&amp;#61; 1);&lt;br /&gt;因为这个分号&amp;#xff0c;使得你后面的代码全成了废话了。&lt;br /&gt;return s成了必然执行的&amp;#xff0c;可不是输入什麽就输出什麽麽&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["我用c语言写了一段动态规划的寻找最长回文字符，可是总是不成功，找了半天，输入babad，却输出babad，以下是代码", ["\n", "char", " * ", "longestPalindrome", "(", "char", " * s)", "\n", "{\n    ", "//读取长度", "\n    ", "int", " len = ", "strlen", "(s);\n    ", "if", "( len <= ", "1", ");\n    {\n        ", "return", " s;\n    }\n    ", "//定义布尔型", "\n    ", "bool", " dp[", "1001", "][", "1001", "];\n    ", "memset", "(dp,", "0", ",", "sizeof", "(dp));\n    dp[", "0", "][", "0", "]=", "1", ";\n     ", "//给长度为2的赋值，因为上面的排出，最短的长度就是2了", "\n     ", "for", "(", "int", " i =", "1", "; i < len;i++)\n     {\n      dp[i][i]=", "true", ";\n      ", "//因为下面判断时候会出[1][0]的时候，不然会出错", "\n      dp[i][i", "-1", "]=", "true", "; \n     }\n    ", "int", " left = ", "0", ";\n    ", "int", " right = ", "0", ";\n    ", "int", " max = ", "0", ";\n    ", "//k表示回文字节的长度，先从2开始", "\n    ", "for", "(", "int", " k=", "2", "; k <= len;k++)\n    {\n      ", "//i表示回文字符的开始位置", "\n      ", "for", "(", "int", " i =", "0", "; i < len - k +", "1", " ;i++ ) \n     {\n       ", "if", "(s[i] == s[i+k", "-1", "] && dp[i+", "1", "][i+k", "-2", "])\n       {\n            dp[i][i+k", "-1", "] =", "true", ";\n           ", "if", "(max < k", "-1", ")\n           {\n              max = k", "-1", ";\n              left = i;\n              right = i+k", "-1", ";\n           }   \n       }\n     }\n    }\n    ", "char", "* arr = (", "char", "*)", "malloc", "(", "sizeof", "(", "char", ")*(max*", "2", "));", "//因为 ap[X][Y]代表了2个字符，所以max*2才是最终的字符", "\n    ", "int", " i =", "0", ";\n    ", "for", "(;left<=right;i++)\n    {\n     arr[i]=s[left++];\n    }\n    arr[i]=", "'\\0'", ";\n    ", "return", "  arr;\n}\n"]], "Tag": "算法设计"}
{"Answer": "![](http://img.my.csdn.net/uploads/201301/23/1358910778_5267.jpg)", "Konwledge_Point": "动态规划", "Question": ["C++ LCS 算法的问题???", ["求最长公共字串，用后缀数组和动态规划相比，哪个更有优势？", "\n\n", "谢谢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;最优二叉查找树和哈夫曼树都是动态规划算法中的经典问题&amp;#xff0c;但它们是不同的问题&amp;#xff0c;它们解决的问题也不同。&lt;/p&gt;\n&lt;p&gt;最优二叉查找树问题是一个经典的搜索问题&amp;#xff0c;旨在找到一个给定有序关键字序列的最优二叉查找树&amp;#xff0c;使得在查询这些关键字时所需的比较次数最小。最优二叉查找树通常被用于数据库管理系统中&amp;#xff0c;用于快速查找关键字。&lt;/p&gt;\n&lt;p&gt;而哈夫曼树问题是一个经典的编码问题&amp;#xff0c;旨在找到一个给定字符集的最优前缀编码方式&amp;#xff0c;使得编码后的比特流长度最小。哈夫曼树通常被用于数据压缩和通信中&amp;#xff0c;用于减小数据传输的大小。&lt;/p&gt;\n&lt;p&gt;虽然这两个问题看起来相似&amp;#xff0c;但它们解决的问题不同&amp;#xff0c;所以它们的算法也有所不同。在最优二叉查找树算法中&amp;#xff0c;我们需要计算一个有序关键字序列的最优查找树&amp;#xff0c;而在哈夫曼树算法中&amp;#xff0c;我们需要计算一个字符集的最优前缀编码方式。在最优二叉查找树中&amp;#xff0c;我们需要计算每个关键字的概率&amp;#xff0c;而在哈夫曼树中&amp;#xff0c;我们需要计算每个字符的出现概率。&lt;/p&gt;\n&lt;p&gt;总之&amp;#xff0c;最优二叉查找树和哈夫曼树都是动态规划算法中的经典问题&amp;#xff0c;但它们解决的问题不同&amp;#xff0c;所以它们的算法也有所不同。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["最优二叉查找树和哈夫曼树", ["动态规划算法里的最优二叉查找树就是哈夫曼树嘛？如果不是的话它们有什么区别呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;i从1到n遍历&amp;#xff0c;求出每个r[i]。求r[i]的方法是j从1到i-1遍历&amp;#xff0c;求出最大的r[i-j]&amp;#43;r[j]&amp;#xff0c;再将最大的r[i-j]&amp;#43;r[j]与p[i]比较&amp;#xff0c;较大的一个就是r[i]&amp;#xff0c;若p[i]较大&amp;#xff0c;则将s[i]赋值i&amp;#xff0c;否则赋值j。输出最优解就是输出s[i]&amp;#xff0c;再把i赋值为i-s[i]&amp;#xff0c;两个过程循环&amp;#xff0c;直到i与s[i]相等。&lt;/p&gt;\n&lt;p&gt;外层循环次数为n&amp;#xff0c;内层循环次数为1&amp;#43;2&amp;#43;3&amp;#43;……&amp;#43;n-1&amp;#xff0c;总体时间复杂度为O(n*n)&lt;/p&gt;\n&lt;p&gt;c代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n#include&amp;lt;stdio.h&amp;gt;\nint main() {\n    int p[&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;17&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;17&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;24&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;}, r[&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;], s[&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;], n &amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    int i, j;\n\n    //求r[i]和s[i]\n    i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    while (i &amp;lt;&amp;#61; n) {\n        r[i] &amp;#61; p[i];\n        j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        s[i] &amp;#61; i;\n        while (j &amp;lt; i) {\n            if (r[j] &amp;#43; r[i - j] &amp;gt;r[i]) {\n                r[i] &amp;#61; r[j] &amp;#43; r[i - j];\n                s[i] &amp;#61; j;\n            }\n            j&amp;#43;&amp;#43;;\n        }\n        i&amp;#43;&amp;#43;;\n    }\n\n    //输出最优解\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入长度: &amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;i);\n    while (i !&amp;#61; s[i]) {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, s[i]);\n        i &amp;#61; i-s[i];\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,s[i]);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;执行结果&amp;#xff08;为了方便显示&amp;#xff0c;我临时套了个死循环&amp;#xff09;&amp;#xff1a;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/548829679176118.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["这个算法题的3、4、5有没有会做的啊", ["就写345问就行，有没有会写的啊，关于动态规划的.（这个提问要求30字实在没什么好写的、冲字数）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;建模有两种&amp;#xff0c;基于场景的建模和基于代码实现的建模。前者将实际场景抽象为人可以分析的数学模型&amp;#xff0c;后者则是将实际场景&amp;#xff08;或者是经过“提纯”后的数学模型&amp;#xff09;转换为可以编码实现的类定义。&lt;br /&gt;实际使用时&amp;#xff0c;最常见的是直接将实际场景映射为类定义&amp;#xff0c;而数学建模则完全隐匿在这个转换中不可见。&lt;br /&gt;譬如我现在有一个基于图论的最短行程算法&amp;#xff0c;想用它来解决不同仓库间的运输问题。&lt;br /&gt;首先进行数学建模&amp;#xff0c;得把仓库和图中的节点对应起来&amp;#xff0c;把路程和节点间距对应起来&amp;#xff0c;把单位耗费和节点间距的权重对应起来&amp;#xff0c;然后可以开始用那个方法来解决这个问题。简单的讲&amp;#xff0c;就是先手算一遍&amp;#xff0c;了解那些信息是必须的&amp;#xff0c;这些必须的信息是如何为算法所用的。&lt;br /&gt;然后是到计算机代码的建模。如果你所使用的语言中已经有提供合适的模型类&amp;#xff08;譬如带长度权重的节点图&amp;#xff09;&amp;#xff0c;则可以直接使用。如果没有&amp;#xff08;一般总是没有的&amp;#xff09;&amp;#xff0c;那么这些东西就需要自己来实现&amp;#xff0c;这样你的模型就有很多东西可以写了&amp;#xff0c;譬如定义一个带长度和权重的路径类&amp;#xff0c;带仓储容量的仓库类&amp;#xff0c;由若干仓库对象及关联的路径对象组成的运输网类等等&amp;#xff0c;然后在自己的算法中&amp;#xff0c;就使用这些类的对象属性进行处理&amp;#xff0c;而不要直接用那种一般人看不懂的abcd作为变量就行了。开头有点难&amp;#xff0c;慢慢的会习惯的&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["是根据算法建模还是根据模型采用算法?", ["大佬们，我在写论文，题目早都定了，不能修改，叫基于动态规划的冷链物流路径优化研究，我去看了下采用动态规划思想的算法有Floyd算法，但是好像一般用于最短路，而路径优化研究没看到过关于这个算法的，我不知道该怎么扯得上关系建模了，或许是本来就不能关联，真的现在很混乱，导师又水，问了不回，让我去看别人论文怎么写的，救救孩子吧🙏🏻"]], "Tag": "算法设计"}
{"Answer": "那个貌似是滚动数组，01背包优化用到了", "Konwledge_Point": "动态规划", "Question": ["用一维数组去代替二维数组，从而优化空间复杂度的方法叫什么啊，", ["我想问一下，例如动态规划中，因为之前的数据用不到，用1个一维数组去代替二维数组是状态压缩吗？", "\n就是那种后算出来的数据去覆盖之前的数据。使空间被优化了。它就叫什么呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在回答你问题的时候&amp;#xff0c;想问下你&amp;#xff0c;计划以后往哪个方向发展&amp;#xff1f;&lt;br /&gt;如果Java 方向&amp;#xff0c;这个大了去了&amp;#xff0c;完全没必要c/c&amp;#43;&amp;#43;&amp;#xff0c;java 搞定一切。&lt;br /&gt;如果c/c&amp;#43;&amp;#43;&amp;#xff0c;例如Linux 驱动等&amp;#xff0c;更没必要Java&amp;#xff0c;没鸟用&amp;#xff1b;&lt;br /&gt;建议走 c/c&amp;#43;&amp;#43;&lt;br /&gt;职场十几年发展下来&amp;#xff0c;得出一个结论&amp;#xff0c;你要精、精、精。当你很精一门之后&amp;#xff0c;你会发现&amp;#xff0c;其他没必要学&amp;#xff0c;因为你已经是专家了&amp;#xff0c;或者走向管理的路线。&lt;br /&gt;专家只会越来越深&amp;#xff0c;不会把面扩的很广&amp;#xff0c;你要知道公司里面有一批Java 人员。你需要的是在架构、设计上精通&amp;#xff0c;底层、硬件精通&amp;#xff1b;&lt;br /&gt;最后&amp;#xff0c;你是在是有空的话&amp;#xff0c;深入shell 、python。。。一定对你以后有好处。。。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["目前只会c和c++,有必要再学java或者其他语言吗", ["背景：我是个女生，是计科的人工智能方向的大学生，打算明年考研。", "我现在只会c和c++,目前只会用c和c++刷算法题，没试过开发，只会动态规划、深度搜索那些算法，但我看就业好像都是收会java或者python的，非常犹豫要不要学一下java。可以给一些建议吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于你对代码有一定的基础&amp;#xff0c;我建议你尝试到b站上去学习尚硅谷的java基础视频&amp;#xff0c;毕竟现在的主流还是java&amp;#xff0c;早点接触会比较好&amp;#xff0c;那个视频讲的非常详细&amp;#xff0c;适合初学者学习&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["大一学习方向，希望有人能提点提点", ["我是一名大一学生，（双非普通一本）现在还是大类，下学期分流，能顺便提点下我该分流去哪儿的方向吗？🐣，现在学了c语言，数据结构自学了寒假但有些东西算法没有搞太明白，但自学有些不太懂，teather现在讲课又太慢了比如什么动态规划，我就完全搞不懂🦁，hash也没完全搞懂，我又不想浪费时间，就像先学学新语言c++或者Java但我不知道学啥🙈"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; INF &amp;#61; &lt;span class=\"hljs-number\"&gt;0x3f3f3f3f&lt;/span&gt;;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cost[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]; &lt;span class=\"hljs-comment\"&gt;// 存储行驶1到10公里的费用&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n; &lt;span class=\"hljs-comment\"&gt;// 总路程数&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dp[&lt;span class=\"hljs-number\"&gt;1005&lt;/span&gt;]; &lt;span class=\"hljs-comment\"&gt;// dp数组&amp;#xff0c;dp[i]表示行驶i公里的最小花费&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(dp, INF, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(dp)); &lt;span class=\"hljs-comment\"&gt;// 初始化为最大值&amp;#xff0c;表示不可达&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        cin &amp;gt;&amp;gt; cost[i];\n    }\n    cin &amp;gt;&amp;gt; n;\n\n    dp[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 起点为0公里&amp;#xff0c;花费为0&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;amp;&amp;amp; j &amp;lt;&amp;#61; i; j&amp;#43;&amp;#43;) { &lt;span class=\"hljs-comment\"&gt;// 从1到10公里选择一个乘车距离&lt;/span&gt;\n            dp[i] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(dp[i], dp[i-j] &amp;#43; cost[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]); &lt;span class=\"hljs-comment\"&gt;// 转移方程&lt;/span&gt;\n        }\n    }\n\n    cout &amp;lt;&amp;lt; dp[n] &amp;lt;&amp;lt; endl; &lt;span class=\"hljs-comment\"&gt;// 输出结果&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["绿色出行（green）", ["绿色出行(green):为了保护环境，倡导“绿色出行”，小L每天都乘公共汽车上、下学。", "WH城市的公共汽车很特别，没有一辆公共汽车行驶超过10公里(但都是行驶整数公", "里)，所有街道在每公里处都有一个公共汽车站。一位顾客打算乘坐公共汽车行驶x公", "里，他可以通过多次的换乘车来完成他的旅程，顾客每次换乘车都根据他所乘坐的公", "里数来付费。小L的家和学校都恰好在公共汽车站处，相距n公里。小L是学生，在保护环境的同时当然忠要节省，他在想怎样换乘公共汽车，使得行驶n公里乘坐公共汽车的总费用最少。", "第一行十个整数分别表示行走1到10公里的费用(费用≤500)。注意这些数并无实际的经济意义，即行驶10公里费用可能比行驶1公里的少。", "第二行一个整数n表示，表示小L要乘坐的总路程数。", "Output", "仅一行包含一个整数，表示最少的费用。1sns100。", "Sample Input", "12 21 31 40 49 58 69 79 90 101", "15", "Sample Output", "147", "Sample Exp lanation", "  动态规划"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这是一个NP-hard问题&amp;#xff0c;通常需要采用启发式算法来求解。这里介绍一种贪心算法的思路&amp;#xff0c;可能并不能保证达到最优解&amp;#xff0c;但是可以得到一个比较好的近似解。&lt;/p&gt;\n&lt;p&gt;首先&amp;#xff0c;将所有任务按照区域编号升序排列。然后&amp;#xff0c;对于每个经理&amp;#xff0c;统计该经理已经负责的区域中的任务数量之和。对于每个任务&amp;#xff0c;按照区域编号升序依次将其分配给还未负责该区域的任务数量最小的经理。如果存在多个经理任务数量相同时&amp;#xff0c;选择任务数量之和最小的那个经理。最后&amp;#xff0c;检查各个经理手上的任务数量&amp;#xff0c;如果有经理比其他经理任务数量多出了两个或以上的任务&amp;#xff0c;那么就从该经理手中数量最多的任务中选择一个&amp;#xff0c;分配给任务数量最少的经理。&lt;/p&gt;\n&lt;p&gt;下面是一个C&amp;#43;&amp;#43;实现的代码示例&amp;#xff08;假设区域编号从1开始&amp;#xff09;&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&amp;#96;&amp;#96;&amp;#96;c&amp;#43;&amp;#43;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-comment\"&gt;// 定义经理和区域的类型&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; Manager;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; Region;\n\n&lt;span class=\"hljs-comment\"&gt;// 打印经理和区域的任务情况&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Manager&amp;amp; mgr, &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Region&amp;amp; region)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; mgr.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;i) {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Manager &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &amp;#43; i) &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;:&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; region.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;j) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (mgr[i] &amp;#61;&amp;#61; j) {\n                cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; region[j];\n            }\n        }\n        cout &amp;lt;&amp;lt; endl;\n    }\n}\n\n&lt;span class=\"hljs-comment\"&gt;// 贪心分配任务&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;assign&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Manager&amp;amp; mgr, &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Region&amp;amp; region, Manager&amp;amp; result)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;// 统计每个经理已经负责的区域中的任务数量之和&lt;/span&gt;\n    map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; taskCount;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; mgr.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;i) {\n        taskCount[i] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; region.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;j) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (mgr[i] &amp;#61;&amp;#61; j) {\n                taskCount[i] &amp;#43;&amp;#61; region[j];\n            }\n        }\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 按照区域编号升序分配任务&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; region.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;i) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; minTaskCount &amp;#61; INT_MAX;\n        vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; candidate;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; mgr.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); &amp;#43;&amp;#43;j) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (mgr[j] &amp;#61;&amp;#61; i) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (taskCount[j] &amp;lt; minTaskCount) {\n                candidate.&lt;span class=\"hljs-built_in\"&gt;clear&lt;/span&gt;();\n                candidate.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(j);\n                minTaskCount &amp;#61; taskCount[j];\n            } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (taskCount[j] &amp;#61;&amp;#61; minTaskCount) {\n                candidate.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(j);\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (candidate.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;() &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n            result[i] &amp;#61; candidate[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n            taskCount[candidate[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]] &amp;#43;&amp;#61; region[i];\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; minSum &amp;#61; INT_MAX;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; selected &amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j : candidate) {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; k &amp;lt; m; k&amp;#43;&amp;#43;) {\n        sum &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(data[k][j]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum &amp;lt; minSum) {\n        minSum &amp;#61; sum;\n        selected &amp;#61; j;\n    }\n}\n\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这段代码中&amp;#xff0c;首先初始化 minSum 为整型最大值&amp;#xff0c;selected 为 -1&amp;#xff0c;然后遍历候选的区域经理&amp;#xff0c;计算每个区域经理当前任务量的绝对值之和&amp;#xff0c;即上文代码中的 calculateSum() 函数返回值&amp;#xff0c;将结果保存在 sum 变量中&amp;#xff0c;如果 sum 小于当前最小值 minSum&amp;#xff0c;则将 minSum 更新为 sum&amp;#xff0c;同时将 selected 更新为当前区域经理 j。最后返回选中的区域经理的编号 selected。&lt;/p&gt;\n&lt;p&gt;&amp;#96;&amp;#96;&amp;#96;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["一个任务平均分配算法问题", ["有ABCDE等多个区域经理，现在有区域一二三四等若干个区域的任务向区域经理分配，每个经理负责的区域不同，（例如A负责一二三，B负责二四 C负责三五六），并且每个区域经理手上已经可能存在一定量的任务，求一种算法思路使得尽可能的使每个经理手上最后分配到的任务数量相同。", "\n", "示例：A=1 B=60 C=5 D=5 E=10 F=40（每个经理手中初始任务数量）", "\n", "           区域一=20   区域二=15  区域三=10  区域四=10  区域五=0 (目前需要被分配的任务数量）", "\n", "          A负责区域一二三四", "\n", "          B负责区域一二三四", "\n", "          C负责区域一三四", "\n", "          D负责区域二", "\n", "          E负责区域三", "\n", "          F负责区域一四五", "\n", "这个例子最后期望是A=19 B=60 C=19 D=19 E=19 F=40", "\n", "我试过自己写贪心\\动态规划 但都在个别极端情况下出现了分配不均或局部不均的情况，可不可以给个思路，有C++的或者其他的代码更好。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;读题&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;相比于其他普通大一计算机专业的学生&amp;#xff0c;你已经相对很优秀了&amp;#xff0c;当然如果你身边全是优秀并且勤奋的同学&amp;#xff0c;你可能感觉不到这一点&lt;/li&gt;&lt;li&gt;以我的理解&amp;#xff0c;除了计算机组成原理、编译原理、计算机网络这些相对偏底层的科目外&amp;#xff0c;其他本应该大二大三计算机专业才需要学习的课程&amp;#xff0c;你现在都已经掌握了&amp;#xff0c;常规课程进度已经跟不上你的学习进度&lt;/li&gt;&lt;li&gt;你和你的家人都很快乐和谐&amp;#xff0c;那么你可能是一个热爱生活的人&amp;#xff0c;算法竞赛对你来说一眼就能看到头&amp;#xff0c;翻来覆去就是那些算法、思路&amp;#xff0c;而且看不到这些算法能解决什么实际生活中的问题&amp;#xff0c;这对你来说有些迷茫和困惑&amp;#xff0c;我在大学的时候也有这种困惑&amp;#xff0c;现在回想起来如果有人在那个时候给我一些指点和帮助&amp;#xff0c;可能我会更“厉害”一点&lt;/li&gt;&lt;li&gt;读研读博最终都是在某一个领域深耕&amp;#xff0c;也就是是在深度上下功夫&amp;#xff0c;如果读研读博是你真实的想法&amp;#xff0c;那么最终你需要回归到“深度”上面来&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;我的建议是&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;课程要重视&amp;#xff0c;学校学院的实践、活动要参加&amp;#xff0c;以你的基础、学习能力和对生活的热爱&amp;#xff0c;绩点和实践分数加起来&amp;#xff0c;保研没问题&lt;/li&gt;&lt;li&gt;学好数学&amp;#xff0c;包括但不限于微积分、线性代数、概率论等&amp;#xff0c;计算机的尽头是算法&amp;#xff0c;算法的尽头是数学计算&lt;/li&gt;&lt;li&gt;一些竞赛可以参加&amp;#xff0c;一是能保研加分&amp;#xff0c;二是能结交朋友&amp;#xff0c;这对你以后的学习和工作会有帮助&amp;#xff0c;不必过分在意证书&amp;#xff0c;有兴趣和时间就去考&amp;#xff0c;没有就不考&lt;/li&gt;&lt;li&gt;了解本校优秀研究生导师&amp;#xff0c;如果你有他的课程那就更好&amp;#xff0c;看看他和他的学生在研究什么&amp;#xff0c;如果有兴趣&amp;#xff0c;你可以和导师了解&amp;#xff0c;甚至到实验室“打工”&amp;#xff0c;一般来说&amp;#xff0c;优秀的导师都很喜欢这种有潜力有兴趣的学生&amp;#xff0c;这会扩大你的知识面&amp;#xff0c;也会让你结交更多朋友&lt;/li&gt;&lt;li&gt;多了解计算机研究如何跟实际问题挂钩&amp;#xff0c;激发兴趣&amp;#xff0c;让“深耕”不那么枯燥&amp;#xff0c;兴趣是最好的老师&amp;#xff0c;比如新闻、招聘网站、博客、开源社区等&amp;#xff0c;比如前段时间的chatGPT&amp;#xff0c;比如很久之前的比特币&amp;#xff0c;比如招聘网站上紧缺的人才等等&amp;#xff0c;对有兴趣的方向通过搜索、学习和请教&amp;#xff0c;了解大概&amp;#xff0c;有机会的话去参加一些线上或线下的讲座&amp;#xff0c;甚至了解本校或其他学校有没有这方面的专家&amp;#xff0c;自己考不考虑去相关学校读研读博等&lt;/li&gt;&lt;li&gt;别忘了和自己的父母讨论&amp;#xff0c;你的父母都是高级知识分子&amp;#xff0c;能给你一些帮助&lt;/li&gt;&lt;li&gt;到了大三大四&amp;#xff0c;自己大概也有个方向了&amp;#xff0c;这时候不会再迷茫&amp;#xff0c;再从这个方向完成深度的追求&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;总结&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;打好基础&amp;#xff0c;学好数学&amp;#xff0c;热爱生活&amp;#xff0c;参加竞赛&amp;#xff0c;广交朋友&amp;#xff0c;力争保研&lt;/li&gt;&lt;li&gt;广泛涉猎&amp;#xff0c;激发兴趣&amp;#xff0c;父母建议&amp;#xff0c;确定方向&lt;/li&gt;&lt;li&gt;追求深度&amp;#xff0c;读研读博&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "动态规划", "Question": ["大一计算机专业学生应该追求深度学习还是广度学习？", ["我是某大学大一计算机科学与技术专业的学生。", "\n", "除了老师上课讲C语言程序设计基础外，我利用半年的时间自学了C++，数据结构与算法，和数据库管理系统MySQL。", "\n", "我身边的同学大多都在卷算法，学校集训队也会定期举行一些训练赛。我也刷了一些LeetCode上的算法题，但是我只能说我只是对一些基本的东西有所了解，比如递归回溯贪心深搜广搜动态规划啥常用的，有时候LeetCode上面的一些题目，还有ACM的题目对我来说有些费劲。", "\n", "我很有把握地说，我不想在算法竞赛上花费太多时间，只是因为我想更全面地发展。我的学习能力不需要怀疑，如果我真的想认真学算法，精通它，这只是时间的问题，所以不用考虑我是否能学好。", "\n", "所以说我想从更广度的方面进行学习，我下学期开学后回校准备继续用半年时间打磨我计算机的基本功，就是在计算机组成原理、计算机网络等计算机基础学科方面，然后大二参加一些竞赛，雨露均沾。", "\n", "另外的话，我的个人想法是希望我能读研读博，这是由我的家庭环境决定的，因为我妈妈就是博士，虽然发财是从来没有的，但是很有文化、有思想，我们家也过得很快乐，我也希望我也能一样，这也算是我的一种信仰吧。", "\n", "所以我是应该从广度的方面进行学习？还是从深度的方面进行学习呢？我更倾向前者，如果可以，我应该制定并遵循什么样的学习计划？可以考什么样的证书、参加比赛呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n        &lt;span class=\"hljs-attr\"&gt;g&lt;/span&gt; &amp;#61; y[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这里有访问越界&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["vc中因为数组定义顺序不同，执行结果也不同", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "\n", "#", "include", " ", "<iostream>", "\n", "using", " ", "namespace", " std;\n\n", "double", " ", "newTon", "(", "double", " s, ", "double", " x[], ", "double", " y[], ", "int", " n)", "\n", "{\n\n    ", "double", " p = y[", "0", "], g, f;\n    ", "for", " (", "int", " i = ", "0", "; i < n; i++)\n    {\n        ", "for", " (", "int", " j = n - ", "1", "; j > i; j--)\n        {\n            y[j] = (y[j] - y[j - ", "1", "]) / (x[j] - x[j - i - ", "1", "]); ", "//动态规划", "\n        }\n        g = y[i + ", "1", "];\n        ", "for", " (", "int", " k = ", "0", "; k <= i; k++)\n            g *= (s - x[k]);\n        p += g;\n    }\n    ", "return", " p;\n}\n", "int", " ", "main", "()", "\n", "{\n\n    ", "double", " y1[", "3", "] = {", "0.36789441", ", ", "0.135335283", ", ", "0.049787068", "};\n    ", "double", " x1[", "3", "] = {", "1", ", ", "2", ", ", "3", "};\n    cout << ", "newTon", "(", "2.6", ", x1, y1, ", "3", ") << endl;\n\n    ", "double", " x2[", "3", "] = {", "1", ", ", "2", ", ", "3", "};\n    ", "double", " y2[", "3", "] = {", "0.36789441", ", ", "0.135335283", ", ", "0.049787068", "};\n    cout << ", "newTon", "(", "2.6", ", x2, y2, ", "3", ") << endl;\n\n    ", "return", " ", "0", ";\n}\n", "\n", "运行结果及报错内容", "\n", "0.066365", "-0.317635", "\n", "我的解答思路和尝试过的方法", "\n", "在devc和vs里出来的两个答案是一样的，但在vc里是不同的", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;returnSize是个输出型参数。因为你要返回一个数组&amp;#xff0c;但是数组返回的时候会退化成指针&amp;#xff0c;你无法知道该数组有几个元素&amp;#xff0c;所以需要传入一个输出型参数来表示数组的元素个数。所以这个参数在函数里面修改&amp;#xff0c;你在函数外部可以拿到。&lt;br /&gt;int returnSize &amp;#61; 0&amp;#xff1b;&lt;br /&gt;然后将&amp;amp;returnSize传入函数twoSum。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["returnSize 什么用", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "题目描述\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n示例:\n\n给定 nums = ", "[", "2", ", ", "7", ", ", "11", ", ", "15", "]", ", target = ", "9", "\n\n因为 nums", "[", "0", "]", " + nums", "[", "1", "]", " = ", "2", " + ", "7", " = ", "9", "\n所以返回 ", "[", "0", ", ", "1", "]", "\n\n来源：力扣（LeetCode）\n链接：https:", "//leetcode-cn.com/problems/two-sum", "\n\n完整程序代码：\n\n#", "include", " <stdio.h>\n#", "include", " <stdlib.h>\n\n", "/* DS:Review */", "\n\n\n", "int", "* two", "Sum(", "int", "*", " ", "nums", ", ", "int", " ", "numsSize", ", ", "int", " ", "target", ", ", "int", "*", " ", "returnSize", ")", "{\n    ", "int", " *a = (", "int", " *)malloc(sizeof(", "int", ")", " * ", "2", ");", "//用动态规划的方法创建一个大小为2的数组", "\n    ", "int", " i, j;\n    ", "for", " (i = ", "0", "; i < numsSize - ", "1", "; i++) {\n        ", "for", " (j = i + ", "1", "; j < numsSize; j++) {\n            ", "if", " (nums", "[", "i", "]", " + nums", "[", "j", "]", " == ", "target) {\n                a", "[", "0", "]", " = i;\n                a", "[", "1", "]", " = j;\n                printf(", "\"%d---%d\"", ",i,j);\n                *returnSize = ", "2", ";\n                return a;\n            }\n        }\n    }               \n    *returnSize = ", "0", ";\n    return a;\n}\n\n", "int", " main(", "int", " argc, ", "char", " *argv", "[]", ") {\n    ", "int", " nums", "[", "10", "]", " = {", "1", ",", "3", ",", "7", ",", "9", ",", "4", ",", "2", "};\n    ", "int", " *returnSize;\n    two", "Sum(", "nums", ",6,7,", "returnSize", ")", ";\n    return ", "0", ";\n}\n\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/weixin_42127177/article/details/122076403\" id=\"textarea_1677232344994_1677232429491_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_42127177/article/details/122076403&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; getGiftMaxValue2(const &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *&lt;span class=\"hljs-keyword\"&gt;values&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;rows&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cols)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-keyword\"&gt;values&lt;/span&gt; || !&lt;span class=\"hljs-keyword\"&gt;rows&lt;/span&gt; || !cols)\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *maxValues &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[cols];//一维数组的内存不能申请为&lt;span class=\"hljs-keyword\"&gt;rows&lt;/span&gt;的大小&amp;#xff0c;除非&lt;span class=\"hljs-keyword\"&gt;rows&lt;/span&gt;在内层循环        \n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-keyword\"&gt;rows&lt;/span&gt;; &amp;#43;&amp;#43;i) \n        {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; cols; &amp;#43;&amp;#43;j)\n            {\n                &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; left &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; up &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                    up &amp;#61; maxValues[j];\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (j &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                    left &amp;#61; maxValues[j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                maxValues[j] &amp;#61; max(up, left) &amp;#43; &lt;span class=\"hljs-keyword\"&gt;values&lt;/span&gt;[i*cols &amp;#43; j];\n            }\n        }\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;maxValue&lt;/span&gt; &amp;#61; maxValues[cols - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n        &lt;span class=\"hljs-keyword\"&gt;delete&lt;/span&gt; maxValues;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;maxValue&lt;/span&gt;;\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["函数参数调用的问题，", ["关于函数调用的问题。", "题目是一道动态规划的题目。", "在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？", "\n", "#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 105\nint a", "[maxn]", "[maxn]", ";\nint n,m;\n\nint fun(vector<vector<int>>& grid){\n      int m = grid.size();   \n        int n = grid", "[0]", ".size(); \n  \n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            if(i==0&&j==0){\n                a", "[i]", "[j]", "=grid", "[0]", "[0]", ";\n\n            }else if(i==0){\n                a", "[i]", "[j]", "=grid", "[i]", "[j]", "+a", "[i]", "[j-1]", ";\n            }else if(j==0){\n                a", "[i]", "[j]", "=grid", "[i]", "[j]", "+a", "[i-1]", "[j]", ";\n            }else{\n                a", "[i]", "[j]", "=grid", "[i]", "[j]", " + max(a", "[i-1]", "[j]", ",a", "[i]", "[j-1]", ");\n            }\n        }\n    }\n\n    return a", "[n-1]", "[m-1]", ";\n\n\n\n}\nint main(){\n\n    int n,m;\n    cin>>n>>m;\n    int i,j;\n    vector<vector<int>>grid;\n    int sum;\n\n    for(i=0;i<n;i++){\n        for(j=0;j<m;j++){\n            cin>>grid", "[i]", "[j]", ";\n        }\n    }\n\n   sum=fun(vector<vector<int>>& grid);// 这里一直报错，请问这里应该怎么写参数。\n\n    cout<<sum;\n    \n\n\n    return 0;\n}\n\n", "\n", "关于函数参数调用的问题！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你第9行赋值给minCoins为coinCount了 &lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["各位大神，我这里哪里出错了呀，，", ["#找零兑换的动态规划", "\n\n", "#不知道哪里出错了！！！！！！老是提示 第6行 'int' object is not subscriptable", "\n\n", "def dpMakeChange(coinValueList,change,minCoins,coinsUsed):", "    for cents in range(1,change+1):", "        coinCount = cents", "        newCoin = 1", "        for j in [c for c in coinValueList if c <= cents]:", "            if minCoins[cents - j] + 1 < coinCount:", "                coinCount = minCoins[cents - j] + 1 ", "                newCoin = j", "        minCoins = coinCount", "        coinsUsed[cents] = newCoin", "    return minCoins[change]", " ", "print(dpMakeChange([1,5,10,21,25],63,[0] * 63))", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的代码问题很明显啊&amp;#xff0c;参数returnSize你没有给赋值啊。这样外边调用函数就不知道你返回的指针有多少个元素了。如果默认为0的话&amp;#xff0c;就啥也不会干&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["关于函数中的指针参数的问题", ["问题遇到的现象和发生背景", "\n", "        我在力扣上刷题的时候，被一个函数的指针参数给难住了？想问一问关于指针参数的问题\n        问题是：\n", "\n", "杨辉三角 II", "给定一个非负索引 rowIndex，返回「杨辉三角」的第 rowIndex 行。", "\n", "在「杨辉三角」中，每个数是它左上方和右上方的数的和。", "\n", "示例 1:", "\n", "输入: rowIndex = 3", "输出: [1,3,3,1]", "示例 2:", "\n", "输入: rowIndex = 0", "输出: [1]", "示例 3:", "\n", "输入: rowIndex = 1", "输出: [1,1]", "\n", "提示:", "\n", "0 <= rowIndex <= 33", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "首先是出题人给的函数格式：", "\n", "/**\n * Note: The returned", " array ", "must be malloced, assume caller calls free().\n */\nint* getRow(int rowIndex, int* returnSize){\n\n}\n\n", "\n", "这是我写的代码：", "\n", "int", "* getRow(", "int", " rowIndex, ", "int", "* returnSize){\n    ", "int", " i,j;\n    ", "int", " *", "row", "=(", "int", "*)malloc(sizeof(", "int", ")*(rowIndex+", "1", "));                 //注意这里的“rowIndex+", "1", "”\n    memset(", "row", ",", "0", ",sizeof(", "int", ")*(rowIndex+", "1", "));                          //这句也是\n    ", "row", "[", "0", "]=", "1", ";\n    ", "for", "(i=", "1", ";i<=rowIndex;i++){\n        ", "for", "(j=i;j>", "0", ";j", "--){", "\n            ", "row", "[j]+=", "row", "[j", "-1", "];\n        }\n    }\n    ", "return", " ", "row", ";\n}\n\n", "\n", "提交结果显示解答错误。", "\n", "下面这个是正确的版本：", "\n", "int", "* getRow(", "int", " rowIndex, ", "int", "* returnSize){\n    ", "int", " i,j;\n     *returnSize=rowIndex+", "1", ";                                       ", "//用了它给的指针参数", "\n    ", "int", " *", "row", "=(", "int", "*)malloc(sizeof(", "int", ")*( *returnSize));      ", "//把rowIndex+1 改成   *returnSize了", "\n    memset(", "row", ",", "0", ",sizeof(", "int", ")*( *returnSize));                ", "//这句也是", "\n    ", "row", "[", "0", "]=", "1", ";\n    ", "for", "(i=", "1", ";i<=rowIndex;i++){\n        ", "for", "(j=i;j>", "0", ";j--){\n            ", "row", "[j]+=", "row", "[j-", "1", "];\n        }\n    }\n    ", "return", " ", "row", ";\n}\n", "\n", "运行结果及报错内容", "\n", "\n", "具体错在哪我也不知道", "\n", "我的解答思路和尝试过的方法", "\n", "就用了个动态规划", "\n", "我想要达到的结果", "\n", "我想知道为啥用rowIndex+1就是错的，而用*returnSize就对了，应该是我在函数的指针参数这一块有些迷糊，想向大家请教一下函数的指针参数的知识，特别像上面这样的问题。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;首先你的card肯定是个数组&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/152808985056177.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;数据的格式大概是这样的&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;export&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt; {\n  &lt;span class=\"hljs-title function_\"&gt;data&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;/span&gt;) {\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; {\n      &lt;span class=\"hljs-attr\"&gt;list&lt;/span&gt;: [\n        {&lt;!-- --&gt;&lt;span class=\"hljs-attr\"&gt;name&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#39;二级菜单1&amp;#39;&lt;/span&gt;},\n        {&lt;!-- --&gt;&lt;span class=\"hljs-attr\"&gt;name&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#39;二级菜单2&amp;#39;&lt;/span&gt;},\n      ]\n    }\n  }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;添加菜单的时候只需要向这个数组push一个节点&lt;br /&gt;this.list.push({name: &amp;#39;二级菜单3&amp;#39;})&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["vue个人页如何可以自定义添加card", ["前端框架：Ant Design Vue", "需求：我想给登录用户设置一个可以自我规划的以card形式添加系统内页面的功能，应该如何实现？", "具体样式大致如下：", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;网关获取到了吗 网关可达吗 网关可达的话看网关所在设备到Zongbu路由器有没有问题&amp;#xff0c;如果你是中继获取的话记得把向外的路由打通&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["新华三H3C动态地址访问遇到问题", ["如图是我的实验拓扑图。其中PC_1是需要采用DHCP获取动态地址的。现在的情况是PC_1成功获取了一个IP地址（192.168.1.2），但是这个动态地址无法访问到Zongbu路由器，我需要怎样修改命令？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;用对应的sql_id替换到的这个SQL进行查询 &amp;#xff0c;会查到对应的结果。结果是call 存储过程的命令&amp;#xff0c;执行这个存储过程即可删除指定sql。切记执行存储过程时&amp;#xff0c;你想删除的sql没有在运行。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-sql\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;select&lt;/span&gt; \n&lt;span class=\"hljs-string\"&gt;&amp;#39;call sys.dbms_shared_pool.purge(&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;||&lt;/span&gt;t.ADDRESS&lt;span class=\"hljs-operator\"&gt;||&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;||&lt;/span&gt;t.hash_value&lt;span class=\"hljs-operator\"&gt;||&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&amp;#39;,&amp;#39;&amp;#39;c&amp;#39;&amp;#39;)&amp;#39;&lt;/span&gt;\nSQL_TEXT,sql_id, address, hash_value, executions, loads, parse_calls, invalidations  \n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; v$&lt;span class=\"hljs-keyword\"&gt;sql&lt;/span&gt; t &lt;span class=\"hljs-keyword\"&gt;where&lt;/span&gt; t.SQL_ID &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;71bmxtwqmdq43&amp;#39;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["oracle 如何删除动态v$sql视图中的记录？", ["oracle 如何删除动态v$sql视图中的记录，比如想删指定的一条或者多条？"]], "Tag": "算法设计"}
{"Answer": "谁定的主色调是红色？ 我觉得就不应该是红为主色调，一般企业政府的网站都是蓝白色调为主。红色很两眼，起到点睛之笔还可以，作主色调我觉得不合适。", "Konwledge_Point": "动态规划", "Question": ["一个论坛网站怎样设计，首页和子页面", ["大家好，最近公司要求我和一个美工一起做一个论坛网站，名为“中国IT服务管理论坛”（itsmf）。两周前客户给出了第一份需求：\n\n关于中国IT服务管理论坛的初步需求如下：\n1、  由于论坛工作刚刚展开，网站需求暂时没法表达非常详尽，目前近期的规划是使首页初步成型，论坛动态、加入论坛以及联系我们等基本功能正常使用。\n\n2、  菜单项有如下几个：首页、关于论坛、论坛服务、最佳实践、出版物、论坛会员、加入论坛、联系我们\n•首页包含：公告通知、论坛动态、业界动态、会员单位、会员登录、友情链接\n•关于论坛中包含：论坛的倡议书、论坛章程、论坛组织结构\n•论坛服务中包含：咨询认证结果公示平台、IT服务管理软件使用平台等\n\n3、  会员制：会员登陆后能使用论坛服务以及其他功能。\n\n4、我们会提供论坛Logo，希望网站主色调为红色。\n不知通过上述需求，贵公司能否先设计一个网站大致的界面？也希望贵公司能提出宝贵意见！有问题，请随时沟通！  \n\n本周一的时候我们给他做了一个初步的模型：(模型截图见附件1\n", "\n\n", "[img]/upload/attachment/136177/487baa3f-f642-3fe4-b573-4785d7c2a061.jpg[/img]", "\n)", "\n\n", "但是客户很不满意，主要说颜色不是很符合他们的要求。之后，客户又提出了进一步的需求：\n\n下面需要将菜单上每一个菜单项对应调用的页面框架设计出来，\n1.关于论坛：应当包含论坛介绍，建议在页面的上部放置图片，图片下方左边可以论坛介绍的一些标题，例如论坛的倡议书、论坛章程、论坛组织结构等内容；图片下方右边就是每一个标题对应的内容。\n\n2.论坛服务：采用类似框架，左边是链接标题，包括咨询认证结果公示平台、IT服务管理软件使用平台等，右边是对应的内容\n\n3.最佳实践：采用类似框架，左边是链接标题，包括服务台介绍、事件处理流程、问题处理流程、变更处理流程、配置处理流程等，右边就是对应内容，应该设计为点击左边标题，则右边内容变为对应信息。\n\n4.出版物和论坛会员都是类似方式表示。\n\n然后我们提交了第二次的效果图：\n", "\n\n", "[img]/upload/attachment/136179/0eded2d3-6808-3b2f-aa13-2782b9df6859.png[/img]", "\n\n", "客户提出的意见如下：\n1.颜色还是不够让人舒服，色泽还需要调整；\n2.菜单框显得偏大，菜单文字偏小；\n3.页面布局还需要修饰，显得还不够专业。\n\n由于自己以前没做过网页设计（只做过一点JSP后台开发），美工也是刚毕业，才来公司不久，做的东西很难满足客户的要求。希望大家能提出你们宝贵的意见，或者提供一些类似的参考网站。\n", "\n\n", "我也知道我们做的这个网站很不专业，连我自己都不太看的过去，确实很难拿出手，但是客户那边又催得急。大家有什么话请尽管说，谢谢你们的帮助！"]], "Tag": "算法设计"}
{"Answer": "$(\".AddSection\").parent().parent().siblings(\".FormItemListEdit2\")", "Konwledge_Point": "动态规划", "Question": ["Jquery如何选择到父父元素下的某个子元素（越多种方法越好）", ["点击AddSection，给FormItemListEdit2下嵌套某个div，div已经用onclick动态生成", "\n\n", " <div class=\"FormItemListEdit\">\n   <a href=\"javascript:void(0)\">\n    <p class=\"EditContent\">\n    <a href=\"javascript:void(0)\" class=\"EditContentImg\"></a>准备工作\n    </p></a>\n    <a href=\"javascript:void(0)\" class=\"RightContentImg\"></a>\n    <div class=\"RightContentImgAdd\">\n    <div class=\"Entry\">\n  <div class=\"EntryTrangle\"></div>\n  <a class=\"AddChapter\"href=\"javascript:void(0)\"><p>添加章</p></a>\n  <a class=\"AddSection\" href=\"javascript:void(0)\"><p>添加节</p></a>\n  <a class=\"DeleteColumn\"href=\"javascript:void(0)\"><p>删除</p></a>\n</div> \n   </div> \n    <a href=\"javascript:void(0)\" class=\"RightContentNum\">0字</a>\n    <!-- 二级嵌套 -->\n     <div class=\"FormItemListEdit2\">\n   <p class=\"EditContent\">安排行程规划</p>\n   <a href=\"javascript:void(0)\" class=\"RightContentImg\"></a>\n   <div class=\"RightContentImgAdd2\">\n <div class=\"Entry\">\n <div class=\"EntryTrangle\"></div>\n <a class=\"AddSection2\"href=\"javascript:void(0)\"><p>添加节</p></a>\n <a class=\"DeleteColumn2\" href=\"javascript:void(0)\"><p>删除</p></a></div></div>\n <a href=\"javascript:void(0)\" class=\"RightContentNum\">0字</a></div>\n\n  </div> \n"]], "Tag": "算法设计"}
{"Answer": "```\r\n下面这个函数是有问题的\r\n function cleananimated(time,a) { \r\n    var $right_content=$(\"#right_content\");\r\n    var $box_ul=$right_content.find(a);\r\n    $box_ul.mouseover(function () {\r\n        clearInterval(time);\r\n    }).mouseout(function () {\r\n        time1=setInterval(\"lianimated1()\",50);\r\n        return time1;\r\n    });\r\n}\r\n前面\r\n time1=cleananimated(time1,\"ul.content_box_ul\");\r\ntime2=cleananimated(time2,\"ul.visit_box_ul\"); //这里有time2，但上面函数在Out的时候只会改变time1。也就是最后time1,time2都会执行lianimated1这个函数定时\r\n```", "Konwledge_Point": "动态规划", "Question": ["jqueryclearInterval怎么无法清除setInterval", ["<!--html-->\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>主站</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/main.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/index.css\">\n    <script src=\"lib/jquery-2.2.4.min.js\" type=\"text/javascript\"></script>\n    <script src=\"lib/index.js\" type=\"text/javascript\"></script>\n    <script type=\"text/javascript\">\n        var time1 = setInterval(\"lianimated1()\", 0);\n        var time2 = setInterval(\"lianimated2()\", 0);\n        $(function () {\n            time1=cleananimated(time1,\"ul.content_box_ul\");\n            time2=cleananimated(time2,\"ul.visit_box_ul\");\n        });\n    </script>\n</head>\n\n<body>\n<!--------------------header---------------------->\n<div id=\"header\"><img src=\"images/header.jpg\"></div>\n<!----------------------nav----------------------->\n<div id=\"nav\">\n    <ul>\n        <li id=\"current_page\"><a href=\"index.html\">首页</a></li>\n        <li><a href=\"introduce.html\">个人简介</a></li>\n        <li><a href=\"photolist.html\">个人相册</a></li>\n        <li><a href=\"articlelist.html\">日志</a></li>\n        <li><a href=\"careerlist.html\">职业规划</a></li>\n        <li><a href=\"worklist.html\">作品展示</a></li>\n    </ul>\n</div>\n<!--------------------content--------------------->\n<div id=\"content\">\n    <div id=\"left_nav\">\n        <ul>\n            <li><span><a class=\"title\" href=\"index.html\">首页</a></span></li>\n            <li><span><a class=\"title\" href=\"photolist.html\">相册列表</a></span></li>\n            <li><a href=\"sceneryphoto.html\">旅游相册</a></li>\n            <li><a href=\"cartoonphoto.html\">动漫卡通</a></li>\n            <li><a href=\"studyphoto.html\">大学时光</a></li>\n            <li><span><a class=\"title\" href=\"careerlist.html\">职业规划</a></span></li>\n            <li><a href=\"#\">大学生活</a></li>\n            <li><a href=\"#\">活动参与</a></li>\n            <li><a href=\"#\">实习打算</a></li>\n            <li><span><a class=\"title\" href=\"articlelist.html\">我的日志</a></span></li>\n            <li><a href=\"#\">星湖游记</a></li>\n            <li><a href=\"#\">重庆一览</a></li>\n            <li><a href=\"#\">荷塘月色</a></li>\n            <li><span><a class=\"title\" href=\"introduce.html\">个人简历</a></span></li>\n            <li><a href=\"#\">姓名</a></li>\n            <li><a href=\"#\">姓别</a></li>\n            <li><a href=\"#\">工作经验</a></li>\n            <li><span><a class=\"title\" href=\"worklist.html\">作品展示</a></span></li>\n            <li><a href=\"#\">ps作品</a></li>\n            <li><a href=\"#\">HTML作品</a></li>\n            <li><span><a class=\"title\" href=\"#\">经典瞬间</a></span></li>\n        </ul>\n    </div>\n    <div id=\"right_content\">\n        <div id=\"photo\">\n            <ul>\n                <li><a href=\"#\"><img src=\"images/one.jpg\"></a></li>\n                <li><a href=\"#\"><img src=\"images/two.jpg\"></a></li>\n                <li><a href=\"#\"><img src=\"images/three.jpg\"></a></li>\n                <li><a href=\"#\"><img src=\"images/four.jpg\"></a></li>\n            </ul>\n        </div>\n        <div id=\"title\">\n            <div id=\"acedemic_image\"><a href=\"#\"><img src=\"images/more.png\"></a>日志动态</div>\n            <div class=\"content_box\">\n                <ul class=\"content_box_ul\">\n                    <li><a href=\"#\">我很不幸的过了英语四级啊</a><span>06-13</span></li>\n                    <li><a href=\"#\">一女生说：生命科学院院长演讲一场，彻...</a><span>04-13</span></li>\n                    <li><a href=\"#\">【转】班任为王，导员为皇，讲师为妃，...</a><span>03-11</span></li>\n                    <li><a href=\"#\">一，当你发现自己不再盲目的喜欢跟风似...</a><span>02-19</span></li>\n                    <li><a href=\"#\">很多人都认为节省能让他们的生活更保险...</a><span>02-10</span></li>\n                    <li><a href=\"#\">请不要随意的对一个人下定义告诉你这样...</a><span>02-09</span></li>\n                    <li><a href=\"#\">【转】我现在终于明白，其实爱情没那么...</a><span>02-01</span></li>\n                    <li><a href=\"#\">请不要随意的对一个人下定义告诉你这样...</a><span>01-19</span></li>\n                    <li><a href=\"#\">我很不幸的过了英语四级啊</a><span>06-13</span></li>\n                    <li><a href=\"#\">一女生说：生命科学院院长演讲一场，彻...</a><span>04-13</span></li>\n                    <li><a href=\"#\">【转】班任为王，导员为皇，讲师为妃，...</a><span>03-11</span></li>\n                    <li><a href=\"#\">一，当你发现自己不再盲目的喜欢跟风似...</a><span>02-19</span></li>\n                    <li><a href=\"#\">很多人都认为节省能让他们的生活更保险...</a><span>02-10</span></li>\n                    <li><a href=\"#\">请不要随意的对一个人下定义告诉你这样...</a><span>02-09</span></li>\n                    <li><a href=\"#\">【转】我现在终于明白，其实爱情没那么...</a><span>02-01</span></li>\n                    <li><a href=\"#\">请不要随意的对一个人下定义告诉你这样...</a><span>01-19</span></li>\n                </ul>\n            </div>\n        </div>\n        <div id=\"text\">\n            <div class=\"box\">\n                <div id=\"introduce\">\n                    <h3>个人简介</h3>\n                    <p>我叫，<br>\n                        来自。</p>\n                </div>\n            </div>\n            <div class=\"box\">\n                <div id=\"career\">\n                    <h3>职业</h3>\n                    <p>现学习软件工程，<br>\n                        想从事软件开发。</p>\n                </div>\n            </div>\n            <div class=\"box\">\n                <div id=\"love\">\n                    <h3>个人爱好</h3>\n                    <p>喜欢古典文学，<br>\n                        喜欢乒乓球。</p>\n                </div>\n            </div>\n        </div>\n        <div id=\"visit\">\n            <div id=\"visit_image\"><a href=\"#\"><img src=\"images/more.png\"></a>最近发生</div>\n            <div class=\"visit_box\">\n                <ul class=\"visit_box_ul\">\n                    <li><a href=\"#\">爬高压线触电身亡&nbsp;身体被烧焦浓烟滚滚恐怖</a><span>06-20</span></li>\n                    <li><a href=\"#\">抗日雷剧再现神技：自行车飞拦火车似直升机</a><span>06-19</span></li>\n                    <li><a href=\"#\">成龙动作电影周落幕《战狼》豪取四奖成最大赢家</a><span>06-18</span></li>\n                    <li><a href=\"#\">爬高压线触电身亡&nbsp;身体被烧焦浓烟滚滚恐怖</a><span>06-20</span></li>\n                    <li><a href=\"#\">抗日雷剧再现神技：自行车飞拦火车似直升机</a><span>06-19</span></li>\n                    <li><a href=\"#\">成龙动作电影周落幕《战狼》豪取四奖成最大赢家</a><span>06-18</span></li>\n                    <li><a href=\"#\">爬高压线触电身亡&nbsp;身体被烧焦浓烟滚滚恐怖</a><span>06-20</span></li>\n                    <li><a href=\"#\">抗日雷剧再现神技：自行车飞拦火车似直升机</a><span>06-19</span></li>\n                    <li><a href=\"#\">成龙动作电影周落幕《战狼》豪取四奖成最大赢家</a><span>06-18</span></li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>\n<!--------------------footer---------------------->\n<div id=\"footer\">\n</div>\n</body>\n</html>\n\n <!--js-->\n var len1=0;\nfunction lianimated1() {\n    var $right_content=$(\"#right_content\");\n    var $box=$right_content.find(\"div.content_box\");\n    var $box_ul=$right_content.find(\"ul.content_box_ul\");\n    var height=$box.height();\n    var ul_height=$box_ul.height();\n    if(len1<(ul_height-height)){\n        $box_ul.animate({marginTop: '-=' +10},\"slow\");\n        len1+=10;\n    }else{\n        $box_ul.animate({marginTop: '+=' +len1},0);\n        len1=0;\n    }\n}\nvar len2=0;\nfunction lianimated2() {\n    var $right_content=$(\"#right_content\");\n    var $box=$right_content.find(\"div.visit_box\");\n    var $box_ul=$right_content.find(\"ul.visit_box_ul\");\n    var height=$box.height();\n    var ul_height=$box_ul.height();\n    if(len2<(ul_height-height-60)){\n        $box_ul.animate({marginTop: '-=' +10},\"slow\");\n        len2+=10;\n    }else{\n        $box_ul.animate({marginTop: '+=' +len2},0);\n        len2=0;\n    }\n}\nfunction cleananimated(time,a) {\n    var $right_content=$(\"#right_content\");\n    var $box_ul=$right_content.find(a);\n    $box_ul.mouseover(function () {\n        clearInterval(time);\n    }).mouseout(function () {\n        time1=setInterval(\"lianimated1()\",50);\n        return time1;\n    });\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;最外面少了[]&lt;/p&gt;\n&lt;p&gt;&amp;#34;daan&amp;#34;: [{&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;, &amp;#34;D&amp;#34;}]不对。去掉 {}&lt;br /&gt;改成&lt;br /&gt;&amp;#34;daan&amp;#34;: [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;, &amp;#34;D&amp;#34;]&lt;/p&gt;\n&lt;p&gt;正确json格式&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;[\n    {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;根据事项所涉的责任单位&amp;#xff0c;将工单分派到相关成员单位办理。以上是工单分派原则的那一种&amp;#xff08;)&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;工单延期申请第一次延期时限为()工作日?&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;以下哪项不符合成员单位提交的办理结果的要求:&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;负责知识库更新维护的是:&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;为热线工作的业务主管部门负责12345 热线规划、建设和管理工作。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;根据热线管理办法第三十四条市民投诉和举报的内容应()&amp;#xff0c;须提供具体的联系方式和必要的情况说明&amp;#xff0c;并根据特定情形配合提供相关材料或证据。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;在办理环节&amp;#xff0c;咨询、表扬类工单距办结期限剩余的呈预警状态&amp;#xff1a;投诉、举报、求助、建议类工单距办结期限剩余的呈预警状态。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;热线工单实行限时办结制&amp;#xff0c;成员单位应当按照以下规定办理工单&amp;#xff1a;咨询、表扬类单&amp;#xff0c;一般须在个工作日内办结&amp;#xff1a;投诉、举报、求助、建议类工单&amp;#xff0c;一般须在个工作日内办结。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;以下对东莞12345热线受理范围解释最全面的是&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;E&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;群众前往东莞市中级法院立案庭办事&amp;#xff0c;过安检时被要求脱鞋子站到2个木箱上&amp;#xff0c;其认为此举侵犯人权。同时其发现法院适用的设备是三无产品&amp;#xff0c;并且没有通过3c认证。现对于中级法院使用三无产品及所采取的安检方法表示不满。其希望相关部门处理中级法院使用不合法产品以及违规安检的问题。以上案例不可以受理&amp;#xff0c;其依据是&amp;#xff08;)&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;话务服务满意度评价结果纳入咨询员工作绩效考核;办理情况满意度评价结果首次评为事项办理效果不满意&amp;#xff0c;且诉求人有说明合理理由的工单&amp;#xff0c;经热线管理中心审核后&amp;#xff0c;对符合重办要求的发回成员单位重办&amp;#xff0c;重办次数为次&amp;#xff0c;按原工单类型时限要求办理&amp;#xff0c;且不能申请延期;对不符合重办要求的向诉求人说明理由。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;分管领导、专职人员和应急联系人的姓名、职务、办公电话、手机号码等信息要向备案并保持动态更新。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;市民可通过电话、网站、等多种渠道反映非紧急类诉求。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;成员单位须在收到工单内反馈是否受理意见&amp;#xff0c;工单办结时限均从工单受理后开始计算。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;市民来电查询某地址上的住户信息&amp;#xff0c;该诉求涉及个人隐私&amp;#xff0c;故不在受理范围。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;诉求人要求出具书面办理结果的&amp;#xff0c;在符合法律法规和国家、省、市相关规章制度的情况下&amp;#xff0c;成员单位应予以配合。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;成员单位须配合“直通12345”栏目组做好工单的跟踪、督办、采访、报道工作;应邀做客“直通12345”节目的&amp;#xff0c;对市民在 节目中反映的诉求进行有效处理。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;工单超过受理期限或办结期限未作处理的&amp;#xff0c;工单呈红牌状态。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;对涉及两个或者以上成员单位职责的事项&amp;#xff0c;按照职责规定分别分派至成员单位办理&amp;#xff0c;即拆单分派。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;市民来电表示中东国家都是一夫多妻制为什么我国只能一夫一妻。希望能修改有关法律法规&amp;#xff0c;该诉求涉及法律法规和规章明确规定的情形&amp;#xff0c;根据管理办法不在受理范围。可以建议市民向人大反映该类诉求。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;当履责意见超出有效期时&amp;#xff0c;该类事项仍不具备办理条件的&amp;#xff0c;成员单位须重新签订传。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;成员单位要明确应急联系人&amp;#xff0c;指定工作机构&amp;#xff0c;落实有综合协调职能的专职人员&amp;#xff0c;统筹协调办理12345热线分派的属于本单位或下属单位职责范围的事项及其他相关工作。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;工单类型是咨询&amp;#xff0c;成员单位可以申请延期&amp;#xff0c;第一次延期为10个工作日。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;履责意见须附上具体办理工单的单位盖章及证明本单位已按照法律、职责规定履行职责的书面意见&amp;#xff0c;自签发之日起&amp;#xff0c;有效期为一年。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;工单的监察状态分为预警和红牌。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;市民如对执法部门的执法结果不满可以建议市民去对应部门进行行政复议。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;经查证&amp;#xff0c;诉求内容纯属骚扰、恶意攻击、陷害、悔辱、详诱、馒骂&amp;#xff0c;热线管理中心有权采取挂机、号码屏蔽等手段或提请有关部门依法进行处理。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;市民反映南城区鸿福路11号的兰州拉面店拒绝食客在餐馆内饮酒&amp;#xff0c;且店内也没有提供猪肉类的食品。市民认为该类清真餐应入乡随俗&amp;#xff0c;迎合当地人生活习惯。希望相关部门协调该餐厅提供猪肉类食品并售卖酒类饮品&amp;#xff0c;该诉求涉及社会公序良俗和宗教信仰问题&amp;#xff0c;根据管理办法不在受理范围。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;市民来电反映家中自来水管老化需要更换&amp;#xff0c;咨询员可以直接下单受理。&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;\n    },\n    {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】如遇特殊情况&amp;#xff0c;哪些类型工单无法在规定时限内办结可申请延期答复?&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;]\n    }, {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】如遇特殊情况&amp;#xff0c;工单无法在规定时限内办结的&amp;#xff0c;以下哪些类型工单&amp;#xff0c;可申请1次延期答复有以下&amp;#xff1a;&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;]\n    }, {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】根据目前热线的操作规范&amp;#xff0c;下列哪些指引是正确的是:&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;]\n    }, {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】申请1次延期后&amp;#xff0c;如有法律法规、规章或有关规范性文件明确规定办结时限超过上述时限&amp;#xff0c;且确实无法在上述时限内办结的&amp;#xff0c;以下哪些类型工单&amp;#xff0c;可再次提交1次延期申请&amp;#xff1a;&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;]\n    }, {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】以下哪些事项&amp;#xff0c;热线是不予受理的&amp;#xff1f;&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;]\n    }, {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】经查证&amp;#xff0c;诉求内容纯属骚扰、恶意攻击、陷害、侮辱、诽谤、谩骂&amp;#xff0c;热线管理中心有权采取&amp;#xff08;&amp;#xff09;等手段或提请有关部门依法进行处理。&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;]\n    }, {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】符合管理办法不受理事项中“依照法定职责不属于本级政府及其工作部处理的事项”规定有:&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;]\n    }, {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】根据热线管理办法&amp;#xff0c;热线的服务内容包括:&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;E&amp;#34;&lt;/span&gt;]\n    }, {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】热线管理中心对以下情形进行督办:&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;]\n    }, {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】依法应当通过或已进入以下哪些途径解决的事项热线不予受理&amp;#xff1f;&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;]\n    }, {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】热线建立满意度评价机制&amp;#xff0c;市民可对&amp;#xff08;&amp;#xff09;和&amp;#xff08;&amp;#xff09;进行满意度评价。&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;]\n    }, {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】市民反映楼上住户装修施工导致其家里天花板漏水&amp;#xff0c;但是一直没有支付维修费&amp;#xff0c;随即向万江区人民法院提出起诉&amp;#xff0c;但是法院一直没有开庭审批&amp;#xff0c;其对此不满。希望有关部门要求法院尽快开庭审理。以上案例符合管理办法中不受理范围中的那些条理&amp;#xff1f;&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;]\n    }, {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】当涉及等突发事项时&amp;#xff0c;热线管理中心及时向应急部门通报情况&amp;#xff0c;由应急部门通知相关单位按照《中华人民共和国突发事件应对法》等有关要求立即启动应急处置预案&amp;#xff0c;并及时向社会公布处置结果。&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;E&amp;#34;&lt;/span&gt;]\n    }, {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】以下不属于热线受理范围的是&amp;#xff1a;&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;E&amp;#34;&lt;/span&gt;]\n    }, {\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#34;【多选题】东莞市12345政府服务热线管理中心&amp;#xff08;以下简称“热线管理中心”&amp;#xff09;负责热线事项的哪些日常管理工作&amp;#xff1f;&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;daan&amp;#34;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;E&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;F&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;G&amp;#34;&lt;/span&gt;]\n    }\n]\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["josn的题库格式，能看下对不对吗", ["{", "    \"根据事项所涉的责任单位，将工单分派到相关成员单位办理。以上是工单分派原则的那一种（)\": \"C\",", "    \"工单延期申请第一次延期时限为()工作日?\": \"C\",", "    \"以下哪项不符合成员单位提交的办理结果的要求:\": \"B\",", "    \"负责知识库更新维护的是:\": \"C\",", "    \"为热线工作的业务主管部门负责12345 热线规划、建设和管理工作。\": \"D\",", "    \"根据热线管理办法第三十四条市民投诉和举报的内容应()，须提供具体的联系方式和必要的情况说明，并根据特定情形配合提供相关材料或证据。\": \"C\",", "    \"在办理环节，咨询、表扬类工单距办结期限剩余的呈预警状态：投诉、举报、求助、建议类工单距办结期限剩余的呈预警状态。\": \"C\",", "    \"热线工单实行限时办结制，成员单位应当按照以下规定办理工单：咨询、表扬类单，一般须在个工作日内办结：投诉、举报、求助、建议类工单，一般须在个工作日内办结。\": \"B\",", "    \"以下对东莞12345热线受理范围解释最全面的是\": \"E\",", "    \"群众前往东莞市中级法院立案庭办事，过安检时被要求脱鞋子站到2个木箱上，其认为此举侵犯人权。同时其发现法院适用的设备是三无产品，并且没有通过3c认证。现对于中级法院使用三无产品及所采取的安检方法表示不满。其希望相关部门处理中级法院使用不合法产品以及违规安检的问题。以上案例不可以受理，其依据是（)\": \"A\",", "    \"话务服务满意度评价结果纳入咨询员工作绩效考核;办理情况满意度评价结果首次评为事项办理效果不满意，且诉求人有说明合理理由的工单，经热线管理中心审核后，对符合重办要求的发回成员单位重办，重办次数为次，按原工单类型时限要求办理，且不能申请延期;对不符合重办要求的向诉求人说明理由。\": \"A\",", "    \"分管领导、专职人员和应急联系人的姓名、职务、办公电话、手机号码等信息要向备案并保持动态更新。\": \"B\",", "    \"市民可通过电话、网站、等多种渠道反映非紧急类诉求。\": \"C\",", "    \"成员单位须在收到工单内反馈是否受理意见，工单办结时限均从工单受理后开始计算。\": \"D\",", "    \"市民来电查询某地址上的住户信息，该诉求涉及个人隐私，故不在受理范围。\": \"A\",", "    \"诉求人要求出具书面办理结果的，在符合法律法规和国家、省、市相关规章制度的情况下，成员单位应予以配合。\": \"A\",", "    \"成员单位须配合“直通12345”栏目组做好工单的跟踪、督办、采访、报道工作;应邀做客“直通12345”节目的，对市民在 节目中反映的诉求进行有效处理。\": \"A\",", "    \"工单超过受理期限或办结期限未作处理的，工单呈红牌状态。\": \"A\",", "    \"对涉及两个或者以上成员单位职责的事项，按照职责规定分别分派至成员单位办理，即拆单分派。\": \"B\",", "    \"市民来电表示中东国家都是一夫多妻制为什么我国只能一夫一妻。希望能修改有关法律法规，该诉求涉及法律法规和规章明确规定的情形，根据管理办法不在受理范围。可以建议市民向人大反映该类诉求。\": \"A\",", "    \"当履责意见超出有效期时，该类事项仍不具备办理条件的，成员单位须重新签订传。\": \"A\",", "    \"成员单位要明确应急联系人，指定工作机构，落实有综合协调职能的专职人员，统筹协调办理12345热线分派的属于本单位或下属单位职责范围的事项及其他相关工作。\": \"A\",", "    \"工单类型是咨询，成员单位可以申请延期，第一次延期为10个工作日。\": \"B\",", "    \"履责意见须附上具体办理工单的单位盖章及证明本单位已按照法律、职责规定履行职责的书面意见，自签发之日起，有效期为一年。\": \"B\",", "    \"工单的监察状态分为预警和红牌。\": \"A\",", "    \"市民如对执法部门的执法结果不满可以建议市民去对应部门进行行政复议。\": \"A\",", "    \"经查证，诉求内容纯属骚扰、恶意攻击、陷害、悔辱、详诱、馒骂，热线管理中心有权采取挂机、号码屏蔽等手段或提请有关部门依法进行处理。\": \"A\",", "    \"市民反映南城区鸿福路11号的兰州拉面店拒绝食客在餐馆内饮酒，且店内也没有提供猪肉类的食品。市民认为该类清真餐应入乡随俗，迎合当地人生活习惯。希望相关部门协调该餐厅提供猪肉类食品并售卖酒类饮品，该诉求涉及社会公序良俗和宗教信仰问题，根据管理办法不在受理范围。\": \"A\",", "    \"市民来电反映家中自来水管老化需要更换，咨询员可以直接下单受理。\": \"B\"", "}, {", "    \"name\": \"【多选题】如遇特殊情况，哪些类型工单无法在规定时限内办结可申请延期答复?\",", "    \"daan\": [{\"A\", \"B\", \"C\", \"D\"}]", "}, {", "    \"name\": \"【多选题】如遇特殊情况，工单无法在规定时限内办结的，以下哪些类型工单，可申请1次延期答复有以下：\",", "    \"daan\": [{\"A\", \"B\", \"C\", \"D\"}]", "}, {", "    \"name\": \"【多选题】根据目前热线的操作规范，下列哪些指引是正确的是:\",", "    \"daan\": [{\"A\", \"B\", \"C\"}]", "}, {", "    \"name\": \"【多选题】申请1次延期后，如有法律法规、规章或有关规范性文件明确规定办结时限超过上述时限，且确实无法在上述时限内办结的，以下哪些类型工单，可再次提交1次延期申请：\",", "    \"daan\": [{\"B\", \"C\"}]", "}, {", "    \"name\": \"【多选题】以下哪些事项，热线是不予受理的？\",", "    \"daan\": [{\"A\", \"B\", \"D\"}]", "}, {", "    \"name\": \"【多选题】经查证，诉求内容纯属骚扰、恶意攻击、陷害、侮辱、诽谤、谩骂，热线管理中心有权采取（）等手段或提请有关部门依法进行处理。\",", "    \"daan\": [{\"B\", \"C\"}]", "}, {", "    \"name\": \"【多选题】符合管理办法不受理事项中“依照法定职责不属于本级政府及其工作部处理的事项”规定有:\",", "    \"daan\": [{\"B\", \"C\"}]", "}, {", "    \"name\": \"【多选题】根据热线管理办法，热线的服务内容包括:\",", "    \"daan\": [{\"A\", \"B\", \"C\", \"D\", \"E\"}]", "}, {", "    \"name\": \"【多选题】热线管理中心对以下情形进行督办:\",", "    \"daan\": [{\"A\", \"B\", \"C\", \"D\"}]", "}, {", "    \"name\": \"【多选题】依法应当通过或已进入以下哪些途径解决的事项热线不予受理？\",", "    \"daan\": [{\"A\", \"B\", \"C\", \"D\"}]", "}, {", "    \"name\": \"【多选题】热线建立满意度评价机制，市民可对（）和（）进行满意度评价。\",", "    \"daan\": [{\"A\", \"B\"}]", "}, {", "    \"name\": \"【多选题】市民反映楼上住户装修施工导致其家里天花板漏水，但是一直没有支付维修费，随即向万江区人民法院提出起诉，但是法院一直没有开庭审批，其对此不满。希望有关部门要求法院尽快开庭审理。以上案例符合管理办法中不受理范围中的那些条理？\",", "    \"daan\": [{\"B\", \"C\"}]", "}, {", "    \"name\": \"【多选题】当涉及等突发事项时，热线管理中心及时向应急部门通报情况，由应急部门通知相关单位按照《中华人民共和国突发事件应对法》等有关要求立即启动应急处置预案，并及时向社会公布处置结果。\",", "    \"daan\": [{\"A\", \"B\", \"C\", \"D\", \"E\"}]", "}, {", "    \"name\": \"【多选题】以下不属于热线受理范围的是：\",", "    \"daan\": [{\"A\", \"B\", \"C\", \"D\", \"E\"}]", "}, {", "    \"name\": \"【多选题】东莞市12345政府服务热线管理中心（以下简称“热线管理中心”）负责热线事项的哪些日常管理工作？\",", "    \"daan\": [{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"}]", "}"]], "Tag": "算法设计"}
{"Answer": "你看上个提问里面我的回答了吗，又开一个一样的。。", "Konwledge_Point": "动态规划", "Question": ["android 百度地图 搜索跳转", ["一共有两个Activity ，第一个Activity显示地图，实现定位当前地址并输出在第一个页面的EditText里，第二个Activity是搜索页面，搜索框是EditText，ListView显示搜索结果，使用百度地图建议搜索功能。比如搜索一个万达广场，点击搜索结果后希望在第一个Activity的地图上显示当前定位地址和到万达广场的路线规划，就是起点和终点显示出来。", "\n（这里需要起点自动获取，因为地图已经实现自动定位当前地址了，不要那种既要输入起点，又要输入终点，最后还得要点击一下确定，才会显示结果的那种无语的操作体验，整个软件是没有一个Bundle按钮的，只需要item）", "\n现在的问题是点击第二个页面ListView里面的搜索结果万达广场，跳转到第一个页面之后没有任何反应。", "\n谢谢各位大神哥哥姐姐~请帮我实现Intent ，使用的是startactivityforresult，数据传送和接收，在接收后的onActivityResult里面进行处理", "\n第一个页面", "\npublic class MainActivity extends Activity {", "\n\n", "private MapView mMapView = null;\nprivate BaiduMap mBaidumap =null;\nprivate PoiSearch mPoiSearch = null;\nprivate EditText mTv = null;\n\nprivate \n\nLocationClient mLocClient;\nprivate MainActivity.MyLocationListener myListener = new MainActivity.MyLocationListener();\nprivate int mCurrentDirection = 0;\nprivate Double lastX = 0.0;\nprivate MyLocationData locData;\nprivate float mCurrentAccracy;\nprivate double mCurrentLat = 0.0;\nprivate double mCurrentLon = 0.0;\nprivate String mCityName;\nboolean isFirstLoc = true;\nBitmapDescriptor mCurrentMarker;\nprivate SensorManager mSensorManager;\nprivate MyLocationConfiguration.LocationMode mCurrentMode;\nprivate MainActivity.DirectionSensorListener DirectionListener = new MainActivity.DirectionSensorListener();\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    SDKInitializer.initialize(getApplicationContext());\n    setContentView(R.layout.content_main);\n    mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);//获取传感器管理服务\n    mCurrentMode = MyLocationConfiguration.LocationMode.NORMAL;\n    //初始化地图\n    mMapView = (MapView) findViewById(R.id.mapView);\n    mTv = (EditText) findViewById(R.id.tiaozhuan);\n    mTv.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            Bundle bundle = new Bundle();\n            bundle.putString(\"userName\", \"zhangsan\");\n            bundle.putInt(\"userAge\", 100);\n            Intent intent = new Intent(MainActivity.this, Main2Activity.class);\n            intent.putExtras(bundle);\n            startActivityForResult(intent, 1);//\n        }\n    });\n\n/*protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    // TODO Auto-generated method stub\n    switch (requestCode){\n        case RESULT_OK:\n            Bundle bundle=data.getExtras();\n            String str=bundle.getString(\"backData\");\n            Toast.makeText(MainActivity.this, str,Toast.LENGTH_LONG).show();\n            break;\n\n        default:\n            break;\n    }*/\n    mBaidumap = mMapView.getMap();\n    mMapView.showScaleControl(false);\n    mMapView.showZoomControls(false);\n    UiSettings settings = mBaidumap.getUiSettings();\n    settings.setOverlookingGesturesEnabled(false);//设置双指下拉时不启用3D地图\n    settings.setRotateGesturesEnabled(false);//设置地图不可旋转\n    //开启定位图层\n    mBaidumap.setMyLocationEnabled(true);\n    initLocation();\n    //initPoiSearch();\n\n    mPoiSearch = PoiSearch.newInstance();\n    mPoiSearch.setOnGetPoiSearchResultListener(new OnGetPoiSearchResultListener() {\n@Override\npublic void onGetPoiDetailResult(PoiDetailResult poiDetailResult) {\n    if (poiDetailResult == null\n        || poiDetailResult.error == SearchResult.ERRORNO.RESULT_NOT_FOUND) {\n        Toast.makeText(MainActivity.this, \"未找到结果\", Toast.LENGTH_LONG)\n        .show();\n        return;\n    }\n    if (poiDetailResult.error == SearchResult.ERRORNO.NO_ERROR) {\n    //搜索到POI\n    mBaidumap.clear();\n    mBaidumap.addOverlay(new MarkerOptions()\n        .position(poiDetailResult.location)\n        .icon(BitmapDescriptorFactory.fromResource(R.drawable.alf))\n        .title(poiDetailResult.getAddress()));\n    //讲该POI设置为地图中心\n    mBaidumap.setMapStatus(MapStatusUpdateFactory.newLatLng(poiDetailResult.location));\n    Toast.makeText(MainActivity.this, \"搜索中...\", Toast.LENGTH_LONG).show();\n        return;\n    }\n}\n@Override\npublic void onGetPoiIndoorResult(PoiIndoorResult poiIndoorResult) {\n\n}\n@Override\npublic void onGetPoiResult(PoiResult poiResult) {\n\n        }\n    });\n}\n\nprivate void initLocation() {\n    mLocClient = new LocationClient(this);\n    mLocClient.registerLocationListener(myListener);\n    LocationClientOption option = new LocationClientOption();\n    option.setOpenGps(true);//打开GPS\n    option.setCoorType(\"bd09ll\");//设置坐标类型\n    option.setIsNeedAddress(true);//是否需要地址信息\n    option.setScanSpan(1000);\n    LocationPermission();\n    mLocClient.setLocOption(option);\n}\n\nprivate void LocationPermission() {\n    int checkPermission = ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.ACCESS_COARSE_LOCATION);\n    if (checkPermission != PackageManager.PERMISSION_GRANTED) {\n        ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.ACCESS_COARSE_LOCATION}, 1);\n        Log.d(\"未获得定位权限\", \"弹出提示\");\n        return;\n    }\n}\n\npublic class DirectionSensorListener implements SensorEventListener {\n\n    @Override\n    public void onSensorChanged(SensorEvent event) {\n        double x = event.values[SensorManager.DATA_X];\n        if (Math.abs(x - lastX) > 1.0) {\n            mCurrentDirection = (int) x;\n            //设置定位数据\n            locData = new MyLocationData.Builder()\n                    .accuracy(mCurrentAccracy)//精度\n                    .direction(mCurrentDirection) //此处设置开发者获取到的方向信息，顺时针0-360\n                    .latitude(mCurrentLat)//经度\n                    .longitude(mCurrentLon)//纬度\n                    .build();\n            mBaidumap.setMyLocationData(locData);\n        }\n        lastX = x;\n    }\n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n\n    }\n}\npublic class MyLocationListener implements BDLocationListener {\n\n    @Override\n    public void onReceiveLocation(BDLocation bdLocation) {\n        //map view销毁后不在处理新接受的位置\n        if (bdLocation == null || mMapView == null) {\n            return;\n        }\n        mCurrentLat = bdLocation.getLatitude();\n        mCurrentLon = bdLocation.getLongitude();\n        mCurrentAccracy = bdLocation.getRadius();\n        mCityName = bdLocation.getCity();\n        //设置定位数据\n        locData = new MyLocationData.Builder()\n                .accuracy(bdLocation.getRadius())//精度\n                .direction(mCurrentDirection) //此处设置开发者获取到的方向信息，顺时针0-360\n                .latitude(bdLocation.getLatitude())//经度\n                .longitude(bdLocation.getLongitude())//纬度\n                .build();\n        mBaidumap.setMyLocationData(locData);\n        //第一次定位时，将地图位置移动到当前位置\n        if (isFirstLoc) {\n            isFirstLoc = false;\n            LatLng ll = new LatLng(bdLocation.getLatitude(), bdLocation.getLongitude());\n            MapStatus.Builder builder = new MapStatus.Builder();\n            builder.target(ll).zoom(18.0f);\n            mBaidumap.animateMapStatus(MapStatusUpdateFactory.newMapStatus(builder.build()));\n            mCurrentMarker = null;\n            mBaidumap\n                    .setMyLocationConfiguration(new MyLocationConfiguration(\n                            mCurrentMode, true, null));\n        }\n    }\n}\n@Override\nprotected void onStart() {\n    //为系统的方向传感器注册监听器\n    mSensorManager.registerListener(DirectionListener, mSensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION)\n            , SensorManager.SENSOR_DELAY_UI);\n    //启动监听\n    mLocClient.start();\n    super.onStart();\n}\n\n@Override\nprotected void onPause() {\n    mMapView.onPause();\n    super.onPause();\n}\n\n@Override\nprotected void onResume() {\n    mMapView.onResume();\n    super.onResume();\n}\n\n@Override\nprotected void onStop() {\n    //取消传感器监听\n    mSensorManager.unregisterListener(DirectionListener);\n    super.onStop();\n}\n\n@Override\nprotected void onDestroy() {\n    //退出时销毁定位\n    mLocClient.stop();\n    //关闭定位图层\n    mBaidumap.setMyLocationEnabled(false);\n    mMapView.onDestroy();\n    //mMapView = null;\n   // mPoiSearch.destroy();\n    //mSuggestionSearch.destroy();\n    super.onDestroy();\n}\n", "\n\n", "}", "\n第二个页面", "\npublic class Main2Activity extends Activity implements OnGetSuggestionResultListener {", "\n\n", "private EditText et_address;\nprivate Adapter_list_Address adapter_list_Address;\nprivate ListView myListView;\nprivate List<String> list = new ArrayList<>();\nprivate List<String> lists = new ArrayList<>();\n\n\n//地图相关\n/**\n * 百度地图控件\n */\nMapView mMapView = null;\n/**\n * 百度地图实例\n */\nBaiduMap mBaidumap = null;\n\n\n//定位相关\n/**\n * 定位客户端\n */\nLocationClient mLocClient;\n/**\n * 定位模式\n */\nprivate LocationMode mCurrentMode;\n/**\n * 定位图标\n */\nBitmapDescriptor mCurrentMarker;\n/**\n * 传感器管理器\n */\nprivate SensorManager mSensorManager;\n/**\n * 当前方向\n */\nprivate int mCurrentDirection = 0;\n/**\n * 当前经度\n */\nprivate double mCurrentLat = 0.0;\n/**\n * 当前纬度\n */\nprivate double mCurrentLon = 0.0;\n/**\n * 当前经度\n */\nprivate float mCurrentAccracy;\n/**\n * 是否首次定位\n */\nboolean isFirstLoc = true;\n/**\n * 定位数据\n */\nprivate MyLocationData locData;\n/**\n * 定位监听\n */\nprivate MyLocationListener myListener = new MyLocationListener();\n/**\n * 方向监听\n */\nprivate DirectionSensorListener DirectionListener = new DirectionSensorListener();\n/**\n * 上一次的方向\n */\nprivate Double lastX = 0.0;\n/**\n * 定位所在城市\n */\nprivate String mCityName;\n//poi搜索相关\n/**\n * Poi检索实例\n */\nprivate PoiSearch mPoiSearch = null;\nprivate SuggestionSearch mSuggestionSearch = null;\n\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    SDKInitializer.initialize(getApplicationContext());\n    setContentView(R.layout.activity_main2);\n    mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);//获取传感器管理服务\n    mCurrentMode = LocationMode.NORMAL;\n    //初始化地图\n    mMapView = (MapView) findViewById(R.id.mapView2);\n    mBaidumap = mMapView.getMap();\n    mMapView.showScaleControl(false);\n    mMapView.showZoomControls(false);\n    UiSettings settings = mBaidumap.getUiSettings();\n    settings.setOverlookingGesturesEnabled(false);//设置双指下拉时不启用3D地图\n    settings.setRotateGesturesEnabled(false);//设置地图不可旋转\n    //开启定位图层\n    mBaidumap.setMyLocationEnabled(true);\n    initLocation();\n    initPoiSearch();\n    initData();\n\n    Timer timer = new Timer();\n    timer.schedule(new TimerTask() {\n        public void run() {\n            ShowKeyboard(et_address);\n        }\n    }, 500);\n}\n\nprivate void initData() {\n    et_address = (EditText) findViewById(R.id.et_address);\n    myListView = (ListView) findViewById(R.id.lv_address);\n    mPoiSearch = PoiSearch.newInstance();\n    mPoiSearch.setOnGetPoiSearchResultListener(new OnGetPoiSearchResultListener() {\n@Override\npublic void onGetPoiResult(PoiResult poiResult) {\n    if (poiResult == null || poiResult.error == SearchResult.ERRORNO.RESULT_NOT_FOUND) {\n    Toast.makeText(Main2Activity.this, \"未找到结果\", Toast.LENGTH_LONG).show();\n    return;\n}\n    if (poiResult.error == SearchResult.ERRORNO.NO_ERROR) {\n\n}\n    if (poiResult.error == SearchResult.ERRORNO.AMBIGUOUS_KEYWORD) {\n    //当输入关键字在本市没有找到，但是在其他城市找到时，返回包含该关键字信息的城市列表\n    String strInfo = \"在\";\n    for (CityInfo cityInfo : poiResult.getSuggestCityList()) {\n            strInfo += cityInfo.city;\n            strInfo += \",\";\n        }\n            strInfo += \"找到结果\";\n            Toast.makeText(Main2Activity.this, strInfo, Toast.LENGTH_LONG).show();\n        }\n    }\n\n@Override\npublic void onGetPoiDetailResult(PoiDetailResult poiDetailResult) {\n    if (poiDetailResult == null\n        || poiDetailResult.error == SearchResult.ERRORNO.RESULT_NOT_FOUND) {\n        Toast.makeText(Main2Activity.this, \"未找到结果\", Toast.LENGTH_LONG)\n            .show();\n            return;\n        }\n    if (poiDetailResult.error == SearchResult.ERRORNO.NO_ERROR) {\n    //搜索到POI\n    mBaidumap.clear();\n    mBaidumap.addOverlay(new MarkerOptions()\n            .position(poiDetailResult.location)\n            .icon(BitmapDescriptorFactory.fromResource(R.drawable.alf))\n            .title(poiDetailResult.getAddress()));\n        //讲该POI设置为地图中心\n        mBaidumap.setMapStatus(MapStatusUpdateFactory.newLatLng(poiDetailResult.location));\n        Toast.makeText(Main2Activity.this, \"搜索中...\", Toast.LENGTH_LONG).show();\n            return;\n        }\n    }\n@Override\npublic void onGetPoiIndoorResult(PoiIndoorResult poiIndoorResult) {\n\n    }\n});\n\n    //初始化建议搜索模块，注册建议搜索事件监听\n    mSuggestionSearch = SuggestionSearch.newInstance();\n    mSuggestionSearch.setOnGetSuggestionResultListener(this);\n    et_address.addTextChangedListener(new TextWatcher() {\n@Override\npublic void afterTextChanged(Editable arg0) {\n    if (adapter_list_Address != null) {\n        adapter_list_Address.notifyDataSetChanged();\n    }\n    mSuggestionSearch\n        .requestSuggestion((new SuggestionSearchOption())\n        .keyword(et_address.getText().toString()).city(\"北京\"));\n    }\n@Override\npublic void beforeTextChanged(CharSequence arg0, int arg1,\n                              int arg2, int arg3) {\n    if (adapter_list_Address != null) {\n        adapter_list_Address.notifyDataSetChanged();\n    }\n    mSuggestionSearch\n        .requestSuggestion((new SuggestionSearchOption())\n        .keyword(et_address.getText().toString()).city(\"北京\"));\n    }\n@Override\npublic void onTextChanged(CharSequence cs, int arg1, int arg2,\n                          int arg3) {\n    if (cs.length() < 0) {\n        return;\n    }\n/**\n* 使用建议搜索服务获取建议列表，结果在onSuggestionResult()中更新\n*/\nif (adapter_list_Address != null) {\n          adapter_list_Address.notifyDataSetChanged();\n}\n    mSuggestionSearch\n    .requestSuggestion((new SuggestionSearchOption())\n    .keyword(et_address.getText().toString()).city(\"北京\"));\n}\n});\n", "\n\n", "}", "\n\n", "@Override\npublic void onGetSuggestionResult(final SuggestionResult msg) {\n    // TODO Auto-generated method stub\n    if (msg == null || msg.getAllSuggestions() == null) {\n        Toast.makeText(Main2Activity.this, \"未检索到当前地址\", Toast.LENGTH_SHORT).show();\n        return;\n    }\n\n    if (list != null) {\n        list.clear();\n    }\n    if (lists != null) {\n        lists.clear();\n    }\n\n    for (SuggestionResult.SuggestionInfo info : msg.getAllSuggestions()) {\n        Log.e(\"info.ccity\", \"info.city\" + info.city + \"info.district\" + info.district + \"info.key\" + info.key);\n        list.add(info.key);\n        lists.add(info.city + info.district + info.key);\n        adapter_list_Address = new Adapter_list_Address(Main2Activity.this, list, lists);\n        myListView.setAdapter(adapter_list_Address);\n        myListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {\n                SuggestionResult.SuggestionInfo info = msg.getAllSuggestions().get(position);\n                mPoiSearch.searchPoiDetail(new PoiDetailSearchOption().poiUid(info.uid));\n\n                Intent intentAddress = new Intent();\n                intentAddress.putExtra(\"backData\",et_address.getText().toString());\n                setResult(RESULT_OK,intentAddress);\n                finish();\n            }\n        });\n        adapter_list_Address.notifyDataSetChanged();\n    }\n}\n\npublic static void ShowKeyboard(View v) {\n    InputMethodManager imm = (InputMethodManager) v.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n    imm.showSoftInput(v, InputMethodManager.SHOW_FORCED);\n}\n\npublic static void HideKeyboard(View v) {\n    InputMethodManager imm = (InputMethodManager) v.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n    if (imm.isActive()) {\n        imm.hideSoftInputFromWindow(v.getApplicationWindowToken(), 0);\n    }\n}\n\n/**\n * 初始化定位相关\n */\nprivate void initLocation() {\n    mLocClient = new LocationClient(this);\n    mLocClient.registerLocationListener(myListener);\n    LocationClientOption option = new LocationClientOption();\n    option.setOpenGps(true);//打开GPS\n    option.setCoorType(\"bd09ll\");//设置坐标类型\n    option.setIsNeedAddress(true);//是否需要地址信息\n    option.setScanSpan(1000);\n    LocationPermission();\n    mLocClient.setLocOption(option);\n}\n\n/**\n * poi搜索相关\n */\nprivate void initPoiSearch() {\n    //初始化搜索模块，注册搜索事件监听\n    mPoiSearch = PoiSearch.newInstance();\n    //mPoiSearch.setOnGetPoiSearchResultListener(this);\n}\n\n/**\n * 获取GPS定位权限(Android6.0 以上需要动态获取权限)\n */\nprivate void LocationPermission() {\n    int checkPermission = ContextCompat.checkSelfPermission(Main2Activity.this, Manifest.permission.ACCESS_COARSE_LOCATION);\n    if (checkPermission != PackageManager.PERMISSION_GRANTED) {\n        ActivityCompat.requestPermissions(Main2Activity.this, new String[]{Manifest.permission.ACCESS_COARSE_LOCATION}, 1);\n        Log.d(\"未获得定位权限\", \"弹出提示\");\n        return;\n    }\n}\n\n/**\n * 方向监听\n */\npublic class DirectionSensorListener implements SensorEventListener {\n\n    @Override\n    public void onSensorChanged(SensorEvent event) {\n        double x = event.values[SensorManager.DATA_X];\n        if (Math.abs(x - lastX) > 1.0) {\n            mCurrentDirection = (int) x;\n            //设置定位数据\n            locData = new MyLocationData.Builder()\n                    .accuracy(mCurrentAccracy)//精度\n                    .direction(mCurrentDirection) //此处设置开发者获取到的方向信息，顺时针0-360\n                    .latitude(mCurrentLat)//经度\n                    .longitude(mCurrentLon)//纬度\n                    .build();\n            mBaidumap.setMyLocationData(locData);\n        }\n        lastX = x;\n    }\n\n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n\n    }\n}\n\n/**\n * 定位监听\n */\npublic class MyLocationListener implements BDLocationListener {\n\n    @Override\n    public void onReceiveLocation(BDLocation bdLocation) {\n        //map view销毁后不在处理新接受的位置\n        if (bdLocation == null || mMapView == null) {\n            return;\n        }\n        mCurrentLat = bdLocation.getLatitude();\n        mCurrentLon = bdLocation.getLongitude();\n        mCurrentAccracy = bdLocation.getRadius();\n        mCityName = bdLocation.getCity();\n        //设置定位数据\n        locData = new MyLocationData.Builder()\n                .accuracy(bdLocation.getRadius())//精度\n                .direction(mCurrentDirection) //此处设置开发者获取到的方向信息，顺时针0-360\n                .latitude(bdLocation.getLatitude())//经度\n                .longitude(bdLocation.getLongitude())//纬度\n                .build();\n        mBaidumap.setMyLocationData(locData);\n        //第一次定位时，将地图位置移动到当前位置\n        if (isFirstLoc) {\n            isFirstLoc = false;\n            LatLng ll = new LatLng(bdLocation.getLatitude(), bdLocation.getLongitude());\n            MapStatus.Builder builder = new MapStatus.Builder();\n            builder.target(ll).zoom(18.0f);\n            mBaidumap.animateMapStatus(MapStatusUpdateFactory.newMapStatus(builder.build()));\n            mCurrentMarker = null;\n            mBaidumap\n                    .setMyLocationConfiguration(new MyLocationConfiguration(\n                            mCurrentMode, true, null));\n        }\n    }\n}\n\n@Override\nprotected void onStart() {\n    //为系统的方向传感器注册监听器\n    mSensorManager.registerListener(DirectionListener, mSensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION)\n            , SensorManager.SENSOR_DELAY_UI);\n    //启动监听\n    mLocClient.start();\n    super.onStart();\n}\n\n@Override\nprotected void onPause() {\n    mMapView.onPause();\n    super.onPause();\n}\n\n@Override\nprotected void onResume() {\n    mMapView.onResume();\n    super.onResume();\n}\n\n@Override\nprotected void onStop() {\n    //取消传感器监听\n    mSensorManager.unregisterListener(DirectionListener);\n    super.onStop();\n}\n\n@Override\nprotected void onDestroy() {\n    //退出时销毁定位\n    mLocClient.stop();\n    //关闭定位图层\n    mBaidumap.setMyLocationEnabled(false);\n    mMapView.onDestroy();\n    mMapView = null;\n    mPoiSearch.destroy();\n    mSuggestionSearch.destroy();\n    super.onDestroy();\n}\n", "\n\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt; return s.substr(begin,maxlen);&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["判断最长回文字符串的时候，用这段代码在面对cbbd时输出了bbd，其他都正常，这是为什么呢", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "class", " ", "Solution", " {\n", "public", ":\n    ", "string ", "longestPalindrome", "(string s)", " ", "{\n        ", "int", " n = s.", "size", "();\n        ", "if", "(n<", "2", ")\n            ", "return", " s;\n\n        ", "int", " maxlen = ", "1", ";\n        ", "int", " begin = ", "0", ";\n        ", "int", " dp[n][n];\n        ", "for", "(", "int", " i = ", "0", ";i<n;i++)\n            dp[i][i] = ", "true", ";\n        ", "//先枚举所有的子字符串", "\n\n        ", "for", "(", "int", " j = ", "1", ";j<n;j++){\n            ", "for", "(", "int", " i = ", "0", ";i<=j;i++){\n                ", "if", "(s[i]!=s[j])\n                    dp[i][j] = ", "false", ";\n                ", "else", "{\n                    ", "if", "(j-i<", "3", ")\n                        dp[i][j] = ", "true", ";\n                    ", "else", "{\n                        dp[i][j] = dp[i+", "1", "][j", "-1", "];\n                    }\n                }\n            ", "if", "(dp[i][j]&&j-i+", "1", ">maxlen){\n                maxlen = j-i+", "1", ";\n                begin = i;\n            }\n            }        \n        }\n        ", "return", " s.", "substr", "(begin,maxlen+begin);\n    }\n};\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "不一定从最高处开始啊", "Konwledge_Point": "动态规划", "Question": ["dp 滑雪 请帮我看看我的代码哪里错了 特别是search过程 谢谢！", ["滑雪是一项非常刺激的运动，为了获得速度，滑雪的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待升降机来载你。给出一个由二维数组表示的滑雪区域，数组的数字代表各点的高度。请你找出这个区域中最长的滑坡。", "\n下面是一个例子：", "\n1  2  3  4  5", "\n16 17 18 19 6", "\n15 24 25 20 7", "\n14 23 22 21 8", "\n13 12 11 10 9", "\n\n", "一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度减小。在上面的例子中，一条可滑行的滑坡为24-17-16-1。当然，25-24-23-...-3-2-1更长。事实上，这是最长的一条滑坡。", "\n\n", "输入文件ski.in的第一行为两个数R, C，表示滑雪区域的行数和列数（1≤R,C≤100）。下面是R行，每行有C个整数，表示高度H（0≤H≤10000）。 ", "\n\n", "输出文件ski.out包括一行，只包含一个整数，表示滑雪区域中最长滑坡的长度", "\n\n", "这是我的代码 请问哪里错了 不能得满分啊", "\nprogram hx;", "\ntype info=array[1..3]of longint;", "\nconst movx:array[1..4]of shortint=(0,-1,1,0);", "\n      movy:array[1..4]of shortint=(1,0,0,-1);", "\nvar map:array [1..6000000]of info;", "\nn,m,s,i,tot,max:longint;", "\nprocedure readin;", "\nvar i,j:longint;", "\nbegin", "\n  readln(n,m);", "\n  for i:=1 to n do", "\n  begin", "\n    for j:=1 to m do", "\n    begin", "\n      inc(s);", "\n      read(map[s][3]);", "\n      map[s][1]:=i;", "\n      map[s][2]:=j;", "\n    end;", "\n  end;", "\nend;", "\nprocedure ordered(l,r:longint);", "\nvar i,j,m:longint;", "\n    jhq:info;", "\nbegin", "\n  m:=map[(l+r)div 2][3];", "\n  i:=l;", "\n  j:=r;", "\n  while i<=j do", "\n  begin", "\n    while map[i][3]\n    while map[j][3]>m do dec(j);", "\n    if i<=j then", "\n    begin", "\n      jhq:=map[i];", "\n      map[i]:=map[j];", "\n      map[j]:=jhq;", "\n      inc(i);", "\n      dec(j);", "\n    end;", "\n    if i\n    if j>l then ordered(l,j);", "\n  end;", "\nend;", "\nprocedure search(k:longint);", "\nvar i:longint;", "\n    f:boolean;", "\nbegin", "\n  f:=false;", "\n  for i:=1 to 4 do", "\n    begin", "\n      if (map[k-1][1]=map[k][1]+movx[i])and(map[k-1][2]=map[k][2]+movy[i])and(map[k][3]<>map[k-1][3]) then", "\n      f:=true;", "\n      if f=true then inc(tot);", "\n      if f=false then", "\n      begin", "\n        if max<=tot then max:=tot", "\n        else tot:=0;", "\n      end;", "\n      if k-1=1 then exit;", "\n      search(k-1);", "\n    end;", "\nend;", "\nbegin", "\n  s:=0;", "\n  readin;", "\n  ordered(1,s);", "\n  max:=0;", "\n  search(s);", "\n  write(max+1);", "\nend."]], "Tag": "算法设计"}
{"Answer": "首先这是算法题.\r\n然后答案是:\r\n1 优惠力度最大的是2个花瓶加一朵花 原价12 现在10\r\n2 优惠力度次的是3朵花 优惠1元\r\n所以先计算能满足的2瓶1花数量\r\n再计算3花数量\r\n剩下的按原价\r\n将前面三个加起来就行\r\n实现:\r\nint p1 = 0;\r\nint p2 = 0;\r\nint n1 = n2 = 0;\r\nint price = 0;\r\np1 = (n1 % 2)\r\n\r\nif n2 &gt;= p1&amp;&amp;p1!=0 n2=n2-p1;n1=n1-p1;\r\np2=n2%3\r\nif  p2&gt;0 n2=n2-p2\r\n总价格为:p1*10+p2*5 + n1*2+n2*5", "Konwledge_Point": "动态规划", "Question": ["有没有大神指导下，下面这道题用Java怎么做，能给出代码最好！", ["商店中每种商品都有标价.例如,一朵花的价格是2元.一个花瓶的价格是5元.为了吸引顾客,商店提供了一组优惠商品价. 优惠商品是把一种或多种商品分成一组,并降价销售.例如,3朵花的价格不是6元而是5元.2个花瓶加1朵花的优惠价是10元.试设计一种算法,计算出某一顾客所购商品应付的最少费用. "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;-2即4,294,967,294&amp;#xff0c;4,294,967,294%1000就是294。可以这样试试&amp;#xff08;int&amp;#xff09;real&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["关于#c##的问题：//计算rt_kprintf(\"dd=%d res=%f real=%d CIRCLE_CNT=%d\\n\",dd,res,real,CIRCLE_CNT)", ["条件：real=-2 CIRCLE_CNT=1000 M_PI=3.1415", "int dd=(real) % CIRCLE_CNT;", "double res = (double)((real) % CIRCLE_CNT) * 2 * M_PI / CIRCLE_CNT;//计算", "rt_kprintf(\"dd=%d res=%f real=%d CIRCLE_CNT=%d\\n\",dd,res,real,CIRCLE_CNT);", "输出：dd=294 res=1.847256 real=-2", "感觉好奇怪，为什么dd是294？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;用动态规划算法&amp;#xff0c;结果是 1153760191515263502 种。&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/660667516646164.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["从小于300的素数中，随机取出的组合，其和大于等于4567的有多少种？", ["小于300的素数有62个，从中随机取出若干，可以是1个到62个，它们的和大于等于4567，这样的组合有多少个？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;下面是你的错误代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;int n, m;\n// 多组数据&amp;#xff0c;数组开大点\nlong long a&lt;span class=\"hljs-comment\"&gt;[10]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[200010]&lt;/span&gt;;\n// a&lt;span class=\"hljs-comment\"&gt;[初始数字]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[扩展次数]&lt;/span&gt; &amp;#61; 扩展后的位数\n// 数据可能比较大&amp;#xff0c;取模\n\nint main() {    \n    // 预处理&amp;#xff0c;初始化10之前的数&amp;#xff0c;也就是0~9\n    for (int i &amp;#61; 0; i &amp;lt;&amp;#61; 9; i &amp;#43;&amp;#43;) {\n        a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[0]&lt;/span&gt; &amp;#61; 1; // 对于0次扩展&amp;#xff0c;自己不变\n    }\n    for (int i &amp;#61; 0; i &amp;lt;&amp;#61; 9; i &amp;#43;&amp;#43;) { // 初始数字\n        for (int j &amp;#61; 1; j &amp;lt;&amp;#61; 200000; j &amp;#43;&amp;#43;) { // 扩展次数\n            a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61; a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j-1]&lt;/span&gt;;\n            if (j &amp;gt;&amp;#61; 11)\n                // 对于当前位数j&amp;#xff0c;统计的是自身i在j次扩展时的数字个数\n                a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61; (a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#43; a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j-9]&lt;/span&gt; - a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j-10]&lt;/span&gt; &amp;#43; a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j-10]&lt;/span&gt; - a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j-11]&lt;/span&gt;) % mod;\n                /*\n                因为数字9可以由0和1增加得到&amp;#xff0c;假设我们从x扩展到y&amp;#xff0c;\n                那么y与x一定最多只多了一位&amp;#xff0c;\n                因此我们可以用a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j-9]&lt;/span&gt;来表示是在1后面加上i扩展了j-10位的\n                数字前面在并上0或不变得到的&amp;#xff0c;即a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j-9]&lt;/span&gt; - a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j-10]&lt;/span&gt;\n                如果不加0而是加1的话&amp;#xff0c;就变成了i&amp;#43;1的后9位&amp;#xff0c;即a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j-10]&lt;/span&gt; - a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j-11]&lt;/span&gt;\n                数字9会多算&amp;#xff0c;所以减去前面的再加上后面的&amp;#xff0c;就是实际得到的结果\n                */\n            else if (j &amp;#61;&amp;#61; 10 - i)\n                a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61; (a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#43; 1) % mod;\n                // 由于加1后每一位都变成了1&amp;#xff0c;因为&amp;#43;1与之前不同&amp;#xff0c;直接&amp;#43;1即可\n        }\n    }\n\n    int t &amp;#61; read();\n    while (t --) {\n        n &amp;#61; read(); m &amp;#61; read();\n        long long sum &amp;#61; 0;\n        while (n) {\n            // 从低位到高位记录总共的数字个数&amp;#xff0c;取模\n            sum &amp;#61; (sum &amp;#43; a&lt;span class=\"hljs-comment\"&gt;[n%10]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[m]&lt;/span&gt;) % mod;\n            n /&amp;#61; 10;\n        }\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld\\n&amp;#34;&lt;/span&gt;, sum);\n    }\n\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;原因&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;代码中没有对结果取模&amp;#xff0c;超过了最大范围可能引起错误&amp;#xff0c;因此加上了这部分内容。&lt;/p&gt;\n&lt;p&gt;代码预处理的步骤和函数的具体说明提供的解释并不一样。因此对预处理部分做了必要的调整。建议看一遍解释。&lt;/p&gt;\n&lt;p&gt;以上是你的答案和错误代码的原因&amp;#xff0c;请注意后续维护。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["线性DPCF1513C Add One的代码不知道为什么错了", ["题目链接codeforces", "题目链接洛谷", "\n", "Add One", "\n", "题面翻译", "\n", "称“将一个数上每一位的值$+1$”为一次操作，例如对于$93$进行一次操作后的结果为$104$。输入$n,m$，输出对$n$进行$m$次操作的结果。", "\n", "题目描述", "\n", "You are given an integer $ n $ . You have to apply $ m $ operations to it.", "\n", "In a single operation, you must replace every digit $ d $ of the number with the decimal representation of integer $ d + 1 $ . For example, $ 1912 $ becomes $ 21023 $ after applying the operation once.", "\n", "You have to find the length of $ n $ after applying $ m $ operations. Since the answer can be very large, print it modulo $ 10^9+7 $ .", "\n", "输入格式", "\n", "The first line contains a single integer $ t $ ( $ 1 \\le t \\le 2 \\cdot 10^5 $ ) — the number of test cases.", "\n", "The only line of each test case contains two integers $ n $ ( $ 1 \\le n \\le 10^9 $ ) and $ m $ ( $ 1 \\le m \\le 2 \\cdot 10^5 $ ) — the initial number and the number of operations.", "\n", "输出格式", "\n", "For each test case output the length of the resulting number modulo $ 10^9+7 $ .", "\n", "样例 #1", "\n", "样例输入 #1", "\n", "5", "\n", "1912 ", "1", "\n", "5 ", "6", "\n", "999 ", "1", "\n", "88 ", "2", "\n", "12 ", "100", "\n", "\n", "样例输出 #1", "\n", "5", "\n", "2", "\n", "6", "\n", "4", "\n", "2115", "\n", "\n", "提示", "\n", "For the first test, $ 1912 $ becomes $ 21023 $ after $ 1 $ operation which is of length $ 5 $ .", "\n", "For the second test, $ 5 $ becomes $ 21 $ after $ 6 $ operations which is of length $ 2 $ .", "\n", "For the third test, $ 999 $ becomes $ 101010 $ after $ 1 $ operation which is of length $ 6 $ .", "\n", "For the fourth test, $ 88 $ becomes $ 1010 $ after $ 2 $ operations which is of length $ 4 $ .", "\n", "我的错误代码", "\n", "#", "include", " ", "<cstdio>", "\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "<algorithm>", "\n\n", "using", " ", "namespace", " std;\n\n", "const", " ", "int", " mod = ", "1e9", " + ", "7", ";\n\n", "inline", " ", "int", " ", "read", "()", " ", "{\n    ", "int", " s = ", "0", ", w = ", "1", ";\n    ", "char", " c = ", "getchar", "();\n    ", "while", " (c < ", "'0'", " || c > ", "'9'", ") {", "if", " (c == ", "'-'", ") w = ", "-1", "; c = ", "getchar", "();}\n    ", "while", " (c >= ", "'0'", " && c <= ", "'9'", ") s = s * ", "10", " + c - ", "'0'", ", c = ", "getchar", "();\n    ", "return", " s * w;\n}\n\n", "int", " n, m;\n", "long", " ", "long", " a[", "10", "][", "200010", "];\n", "// a[初始数字][扩展次数] = 扩展后的位数", "\n\n", "int", " ", "main", "()", " ", "{    \n    ", "for", " (", "int", " i = ", "0", "; i <= ", "9", "; i ++) {\n        a[i][", "0", "] = ", "1", ";\n    }\n    \n    ", "for", " (", "int", " i = ", "0", "; i <= ", "9", "; i ++) { ", "// 初始数字", "\n        ", "for", " (", "int", " j = ", "1", "; j <= ", "200000", "; j ++) { ", "// 扩展次数", "\n            a[i][j] = a[i][j", "-1", "];\n            ", "if", " (j >= ", "11", ")\n                a[i][j] = (a[i][j] + a[i][j", "-9", "] - a[i][j", "-10", "] + a[i][j", "-10", "] - a[i][j", "-11", "]) % mod;\n            ", "/*\n              因为数字9可以由0和1增加得到\n              所以：a[i][j-9] - a[i][j-10] + a[i][j-10] - a[i][j-11]\n              表示数字i扩展j次后的数字中数字9的个数。\n              其中a[i][j-9] - a[i][j-10]是数字i在扩展第j-9次后\n              新出现的数字1的个数；\n              其中a[i][j-10] - a[i][j-11]是数字i在扩展第j-10次后\n              新出现的数字0的个数；\n             */", "\n            ", "else", " ", "if", " (j == ", "10", " - i || i == ", "9", " && j == ", "10", ")\n                a[i][j] = (a[i][j] + ", "1", ") % mod;\n        }\n    }\n    \n    ", "int", " t = ", "read", "(); \n    ", "while", " (t --) {\n        n = ", "read", "(); m = ", "read", "();\n        ", "long", " ", "long", " sum = ", "0", ";\n        ", "while", " (n) {\n            sum = (sum + a[n%", "10", "][m]) % mod;\n            n /= ", "10", ";\n        }\n        ", "printf", "(", "\"%lld\\n\"", ", sum);\n    }\n    \n    ", "return", " ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;虽然是三维数组&amp;#xff0c;但其实问题不大&amp;#xff0c;有一维是字符串&amp;#xff0c;其实是二维的字符串数组&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;countMatches&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *** items, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; itemsSize, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* itemsColSize, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; * ruleKey, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; * ruleValue)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ans &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, cmpIdx;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; itemsSize; &amp;#43;&amp;#43;i) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(ruleKey, &lt;span class=\"hljs-string\"&gt;&amp;#34;type&amp;#34;&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            cmpIdx &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(ruleKey, &lt;span class=\"hljs-string\"&gt;&amp;#34;color&amp;#34;&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            cmpIdx &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(ruleKey, &lt;span class=\"hljs-string\"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            cmpIdx &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            cmpIdx &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(items[i][cmpIdx], ruleValue) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &amp;#43;&amp;#43; ans;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ans;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["一个有关于三维数组的题", ["给你一个数组 items ，其中 items[i] = [typei, colori, namei] ，描述第 i 件物品的类型、颜色以及名称。", "\n", "另给你一条由两个字符串 ruleKey 和 ruleValue 表示的检索规则。", "\n", "如果第 i 件物品能满足下述条件之一，则认为该物品与给定的检索规则 匹配 ：", "\n", "ruleKey == \"type\" 且 ruleValue == typei 。", "ruleKey == \"color\" 且 ruleValue == colori 。", "ruleKey == \"name\" 且 ruleValue == namei 。", "统计并返回 匹配检索规则的物品数量 。", "\n", "\n      \n        ", "力扣", "\n        \n      ", "\n      ", "\n      ", "\n        ", "\n          ", "https://leetcode-cn.com/problems/count-items-matching-a-rule/", "\n        ", "\n      "]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\nvector&amp;lt;int&amp;gt;f[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\nvector&amp;lt;int&amp;gt; add(vector&amp;lt;int&amp;gt; &amp;amp;&lt;span class=\"hljs-symbol\"&gt;A&lt;/span&gt;, vector&amp;lt;int&amp;gt; &amp;amp;&lt;span class=\"hljs-symbol\"&gt;B&lt;/span&gt;)\n{\n    if (&lt;span class=\"hljs-symbol\"&gt;A&lt;/span&gt;.size() &amp;lt; &lt;span class=\"hljs-symbol\"&gt;B&lt;/span&gt;.size()) return add(&lt;span class=\"hljs-symbol\"&gt;B&lt;/span&gt;, &lt;span class=\"hljs-symbol\"&gt;A&lt;/span&gt;);\n \n    vector&amp;lt;int&amp;gt; &lt;span class=\"hljs-symbol\"&gt;C&lt;/span&gt;;\n    int t &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    for (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-symbol\"&gt;A&lt;/span&gt;.size(); i &amp;#43;&amp;#43; )\n    {\n        t &amp;#43;&amp;#61; &lt;span class=\"hljs-symbol\"&gt;A&lt;/span&gt;[i];\n        if (i &amp;lt; &lt;span class=\"hljs-symbol\"&gt;B&lt;/span&gt;.size()) t &amp;#43;&amp;#61; &lt;span class=\"hljs-symbol\"&gt;B&lt;/span&gt;[i];\n        &lt;span class=\"hljs-symbol\"&gt;C&lt;/span&gt;.push_back(t &lt;span class=\"hljs-comment\"&gt;% 10);&lt;/span&gt;\n        t /&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    }\n \n    if (t) &lt;span class=\"hljs-symbol\"&gt;C&lt;/span&gt;.push_back(t);\n    return &lt;span class=\"hljs-symbol\"&gt;C&lt;/span&gt;;\n}\n \nvoid solve(){\n         \n         string s;\n         cin &amp;gt;&amp;gt; s;\n         f[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].push_back(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n         for(int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ; i &amp;lt; s.size() ; i &amp;#43;&amp;#43; ){\n             if(s[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;) f[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; add(f[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;],f[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]) ;\n             if(s[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;) f[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#61; add(f[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;],f[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]) ;\n             if(s[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;) f[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;] &amp;#61; add(f[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;],f[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]) ;\n             if(s[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;) f[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61; add(f[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;],f[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;]) ;\n             if(s[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;) f[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;] &amp;#61; add(f[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;],f[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;]) ;\n             if(s[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;) f[&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;] &amp;#61; add(f[&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;],f[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;]) ;\n             if(s[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;) f[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;] &amp;#61; add(f[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;],f[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;]) ;\n             if(s[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;) f[&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;] &amp;#61; add(f[&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;],f[&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;]);\n              \n         }\n         reverse(f[&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;].begin(),f[&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;].end());\n         for(auto i : f[&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;]) cout&amp;lt;&amp;lt;i;\n          \n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["求字符串的子序列问题(语言-c++)", ["题目描述", "\n", "众所周知，珂朵莉是世界上最幸福的女孩子；", "但这道题目与幸福没有任何关系；", "珂朵莉发现，对于任何一个字符串s都有一个珂学值，即其中含有子序列“chtholly”的个数", "由于珂学崇尚壮阔，珂学值的结果可能很大", "\n", "输入", "\n", "第1行一个字符串S。", "\n", "输出", "\n", "共1行，一个整数，表示珂学值", "\n", "提示", "\n", "对于10%的数据，|S|<=8", "对于30%的数据，|S|<=20", "对于60%的数据，|S|<=1000", "对于100%的数据，|S|<=100000", "答案保证在可输出的范围内", "\n", "我感觉应该是用dp 就写了一下", "但是代码卡在60分过不去了 显示答案错误 请指教一下哪里出了问题QAQ", "\n", "#", "include", "<bits/stdc++.h>", "\n", "using", " ", "namespace", " std;\nstring k={", "\"chtholly\"", "};\n", "long", " ", "long", "  f[", "100005", "][", "13", "];\n", "char", " ch[", "100005", "];\n", "int", " ", "main", "()", "\n", "{\n   ", "scanf", "(", "\"%s\"", ",&ch);\n   ", "int", " n=", "strlen", "(ch);\n   ", "for", "(", "int", " i=", "0", ";i<n;i++)\n   {\n        ", "for", "(", "int", " j=", "0", ";j<=", "7", ";j++)\n        {\n            f[i+", "1", "][j+", "1", "]=f[i][j+", "1", "];\n\n            ", "if", "(k[j]==ch[i])\n            {\n            ", "if", "(j==", "0", ")f[i+", "1", "][j+", "1", "]++;\n            ", "else", "\n            f[i+", "1", "][j+", "1", "]+=f[i][j];\n\n            }\n        }\n   }\n\n   cout<<f[n][", "8", "];\n    ", "return", " ", "0", ";\n}\n", "\n", "ok啦！", "\n", "#include<bits/stdc++.h>", "\n", "using", " namespace std;\nstring k={\"chtholly\"};\nstring sum[", "8", "]={\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"};\n", "char", " ch[", "200005", "];\nstring ", "add", "(string  n,string  m)\n{\n   string x;\n   ", "int", " a=n.size(),b=m.size();\n   ", "int", " mins=min(a,b),", "temp", "=", "0", ",i;\n   ", "for", "( i=", "0", ";i<mins;i++)\n   {\n       ", "int", " s=(", "int", ")n[i]+(", "int", ")m[i]", "-48", "*", "2", "+", "temp", ";\n       ", "if", "(s>", "9", ")", "temp", "=", "1", ";\n       ", "else", " ", "temp", "=", "0", ";\n       x+=(", "char", ")(s%", "10", "+", "48", ");\n       //cout<<i<<\" \";\n   }\n   ", "while", "(i<a)\n   {\n       ", "int", " s=(", "int", ")n[i++]", "-48", "+", "temp", ";\n       ", "if", "(s>", "9", ")", "temp", "=", "1", ";\n       ", "else", " ", "temp", "=", "0", ";\n       x+=(", "char", ")(s%", "10", "+", "48", ");\n       // cout<<i<<\" \";\n   }\n     ", "while", "(i<b)\n   {\n       ", "int", " s=(", "int", ")m[i++]", "-48", "+", "temp", ";\n       ", "if", "(s>", "9", ")", "temp", "=", "1", ";\n       ", "else", " ", "temp", "=", "0", ";\n       x+=(", "char", ")(s%", "10", "+", "48", ");\n       // cout<<i<<\" \";\n   }\n   ", "if", "(", "temp", ")x+=", "'1'", ";\n   //cout<<x<<endl;\n\n    ", "return", " x;\n}\n", "int", " main()\n{\n   scanf(\"%s\",ch);\n   ", "int", " n=strlen(ch);\n    string u=\"1\";\n   ", "for", "(", "int", " i=", "0", ";i<n;i++)\n   {\n       ", "if", "(ch[i]==", "'c'", ")sum[", "0", "]=", "add", "(sum[", "0", "],u);\n       ", "for", "(", "int", " j=", "7", ";j>=", "1", ";j", "--)", "\n       {\n           ", "if", "(ch[i]==k[j])sum[j]=", "add", "(sum[j", "-1", "],sum[j]);\n       }\n\n   }\n    ", "for", "(", "int", " i=sum[", "7", "].size()", "-1", ";i>=", "0", ";i", "--)cout<<sum[7][i];", "\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;h1 id=\"h1_一、分析_1639977503408\"&gt;一、分析&lt;/h1&gt;\n&lt;p&gt;1、0是&amp;#xff1b;&lt;br /&gt;2、负数不是&amp;#xff1b;&lt;br /&gt;3、整数的话先拆解到栈中&amp;#xff0c;然后比较头尾即可&amp;#xff1b;&lt;/p&gt;\n&lt;h1 id=\"h1_二、题解_1639977503408\"&gt;二、题解&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;isPalindrome&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; stk[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;], top &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(x) {\n        stk[top&amp;#43;&amp;#43;] &amp;#61; x % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        x /&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; top/&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; &amp;#43;&amp;#43;i) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(stk[i] !&amp;#61; stk[top&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;-i]) {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["有一道关于回文数的问题。", ["给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。", "\n", "回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。", "\n", "https://leetcode-cn.com/problems/palindrome-number/"]], "Tag": "算法设计"}
{"Answer": "&lt;h1 id=\"h1_一、分析_1639977783832\"&gt;一、分析&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;思路如下&amp;#xff1a;\n&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#xff09;如果在 &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; 到 maxn 之间的数字&amp;#xff0c;映射到哈希数组中&amp;#xff1b;\n&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#xff09;然后从 &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; 开始遍历哈希数组&amp;#xff0c;第一个没有被哈希的就是答案&amp;#xff1b;\n&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;&amp;#xff09;所有数字都遍历完毕&amp;#xff0c;仍然没有找到&amp;#xff0c;则答案为 &lt;span class=\"hljs-variable\"&gt;$n&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$。&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1 id=\"h1_二、源码_1639977783840\"&gt;二、源码&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; maxn 500001&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; hash[&lt;span class=\"hljs-number\"&gt;500001&lt;/span&gt;], cases &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;firstMissingPositive&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* nums, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; numsSize)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &amp;#43;&amp;#43;cases;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; numsSize; &amp;#43;&amp;#43;i) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(nums[i] &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nums[i] &amp;lt; maxn)\n            hash[ nums[i] ] &amp;#61; cases;        &lt;span class=\"hljs-comment\"&gt;// (1) 如果在 1 到 maxn 之间的数字&amp;#xff0c;映射到哈希数组中&amp;#xff1b;&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; numsSize; &amp;#43;&amp;#43;i) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(hash[i] &amp;lt; cases) {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; i;                       &lt;span class=\"hljs-comment\"&gt;// (2) 然后从 1 开始遍历哈希数组&amp;#xff0c;第一个没有被哈希的就是答案&amp;#xff1b;&lt;/span&gt;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; numsSize &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;                    &lt;span class=\"hljs-comment\"&gt;// (3) 所有数字都遍历完毕&amp;#xff0c;仍然没有找到&amp;#xff0c;则答案为 n&amp;#43;1&amp;#xff1b;    &lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数", ["给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。请你实现时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案。", "\n", "\n      \n        ", "力扣", "\n        \n      ", "\n      ", "\n      ", "\n        ", "\n          ", "https://leetcode-cn.com/problems/first-missing-positive/", "\n        ", "\n      "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;今天正好写了篇题解&amp;#xff0c;可以赏脸看看dwd &lt;a href=\"https://www.cnblogs.com/mosqu1to/p/15913766.html\" id=\"textarea_1645279401180_1645279586078_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.cnblogs.com/mosqu1to/p/15913766.html&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["试题 算法训练 幸运的店家", ["资源限制", "时间限制：1.0s   内存限制：256.0MB", "问题描述", "　　炫炫开了一家商店，卖的货只有一个，X，X卖N元钱。有趣的是，世界上只有面值为3的幂的纸币，即纸币只有1元的、3元的、9元的，有一天，桥神来买X，可他没办法正好给出N元钱，而炫炫没法找零，于是他只好用他的钱凑出了一个比N大，并且最小的价值，交给了炫炫。炫炫想知道，他这次最多可以得到多少张纸币。", "输入格式", "　　一个数，N", "输出格式", "　　一个数，为答案", "样例输入", "4", "样例输出", "2", "数据规模和约定", "　　n<=10^17", "\n", "究竟要怎么贪 "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;重新更新回答&amp;#xff0c;简单的说说前面的执行步骤&amp;#xff0c;其实一步一步按照程序执行流程演算下去就行了。文字实在难以解释&amp;#xff0c;可以&amp;#43;V私聊说明&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/78776220166619.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["python递归函数中通过for循环构建树 for循环运作逻辑", ["最近工作忙到死 以前也一知半解的 现在彻底想不起来了 脊椎也痛，索性就直接问吧", "是这样子的 有哪位可以给我讲述一下通过递归构建树的时候内部for循环的运作逻辑 为啥图1的for循环长这个样子 for循环这些数字代表啥意思 图1成功构建了一个树", "\n", "大家可以看我之前打赏记录 我得到满意答案会给钱的放心", "\n", "\n", "def", " recDCCC(weightlist,maxweight,num,lk,value,llp):\n    ", "if", " num==", "4", ":\n        ", "return", " llp ##递归结束条件 并开始新的一轮递归\n    ", "if", " maxweight>", "20", ":\n        ", "return", " llp\n    ", "###op.append([val for val in ok if val not in weightlist])##将OK表中不属于valuelist的元素，重复元素剔除出来,除非重复是8，发生重复，立即结束", "\n    ", "else", ":\n        ", "for", " i in range(len(weightlist)): \n                    ", "print", "(i)\n                    ", "p", "=weightlist[i][", "0", "]\n                    ", "l", "=weightlist[i][", "1", "]\n                    ", "c", "=list(set(weightlist)-set([weightlist[i]]))## 被抽出的因子，剩余的进去迭代，剩余的部分便是C\n                    ", "llp", ".append(c)\n                    ", "numcoins", "=recDCCC(c,maxweight+p,num+", "1", ",lk+l,value,llp)\n    ", "return", " llp\n\n\n", "recDCCC", "([(", "2", ",", "3", "),(", "3", ",", "4", "),(", "4", ",", "8", "),(", "5", ",", "8", "),(", "9", ",", "10", ")],", "0", ",", "0", ",", "0", ",", "0", ",[])\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这是一道典型的背包问题。在这道题中&amp;#xff0c;我们可以将每位骑士看作是一种物品&amp;#xff0c;攻击力ai看作是价值&amp;#xff0c;他自己的价格看作是他的攻击力。我们的目标是尽可能使用少的骑士来消灭恶龙&amp;#xff0c;并且让国王支付的报酬最少。&lt;/p&gt;\n&lt;p&gt;为了解决这道题&amp;#xff0c;我们可以使用01背包算法来求解。首先&amp;#xff0c;我们可以使用一个一维数组f[i]表示当恶龙的生命值为i时&amp;#xff0c;国王支付的最低代价。然后&amp;#xff0c;我们可以枚举每位骑士&amp;#xff0c;分别计算出使用这位骑士可以让国王支付的最低代价。&lt;/p&gt;\n&lt;p&gt;具体来说&amp;#xff0c;我们可以使用以下代码来实现&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;for (int i &amp;#61; 0; i &amp;lt; n; i&amp;#43;&amp;#43;) {\n  for (int j &amp;#61; h; j &amp;gt;&amp;#61; a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;; j--) {\n    f&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61; min(f&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;, f&lt;span class=\"hljs-comment\"&gt;[j - a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;]&lt;/span&gt; &amp;#43; a&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在上面的代码中&amp;#xff0c;我们首先使用枚举骑士的循环来遍历每位骑士。然后&amp;#xff0c;我们使用双重循环来枚举恶龙的生命值j。在循环中&amp;#xff0c;我们可以使用 f[j] &amp;#61; min(f[j], f[j - a[i]] &amp;#43; a[i]) 语句来更新状态。在这个语句中&amp;#xff0c;f[j] 表示当前的最低代价&amp;#xff0c;f[j - a[i]] 表示使用第i位骑士的情况下的最低代价&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["杀死恶龙II(dragon)DP", ["杀死恶龙II(dragon)", "问题描述：", "王国里又来了一头恶龙，国王又到骑士工会征集n名骑士去杀死这条恶龙。假定这条恶龙的生命值为H，而每位骑士有攻击力ai，他可以砍伤恶龙ai点生命值，他所得的报酬就是他的攻击力。请你帮助国王计算，如果要杀死这个恶龙，也就是把恶龙的生命值全部消灭，他最少要支付多少报酬（注意：不一定要求这n名骑士都去攻击，只需要选择部分骑士即可完成任务，此时国王只需要支付参与攻击的那部分骑士即可）。", "输入格式：", "第一行为正整数n(≤100)和H(≤106)；第二行为n个正整数ai(≤105)，分别表示每位骑士的攻击力。", "输出格式：", "输出仅一个整数，表示国王必须支付的最低代价，如果不能杀死恶龙，输出-1。", "输入样例", "5 16", "3 1 3 5 6", "输出样例", "17"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如果你要把&lt;code class=\"language-javascript\"&gt;s[i]&lt;/code&gt;替换成&lt;code class=\"language-javascript\"&gt;t&lt;/code&gt;&amp;#xff0c;图2中循环条件中的&lt;code class=\"language-javascript\"&gt;s[i]&lt;/code&gt;也需要替换成&lt;code class=\"language-javascript\"&gt;t&lt;/code&gt;&amp;#xff0c;即&lt;code class=\"language-javascript\"&gt;for (k&amp;#61;1; k&amp;lt;&amp;#61;t; k*&amp;#61;2)&lt;/code&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["help！多重背包的二进制优化", ["\n", "第13行到18行，把s[i]用t代换为啥错了呢？", "\n", "p1对，p2错"]], "Tag": "算法设计"}
{"Answer": "利用HttpClient或者HttpRequest等和网络相关的类拿到网页数据，此时应该是HTML的，然后利用正则提取出来就可以了", "Konwledge_Point": "动态规划", "Question": ["c#如何提取提取淘宝或者京东的一些产品信息", ["想请问下怎么提取淘宝或者京东的一些产品信息功能，比如成交记录之类的，因为淘宝或者京东等网站这些都是JS，不懂提取，求大神们指点一二"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; minTime(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] &lt;span class=\"hljs-keyword\"&gt;costs&lt;/span&gt;,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x){\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;,times&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,tmp_x&amp;#61;x;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;.length&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || &lt;span class=\"hljs-keyword\"&gt;costs&lt;/span&gt;.length&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; times;\n        }\n//        按时间排序\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;.length;i&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;.length-i;j&amp;#43;&amp;#43;){\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[j]&amp;lt;&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]){\n                    &lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[j];\n                    &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[j]&amp;#61;&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                    &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;;\n                    &lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-keyword\"&gt;costs&lt;/span&gt;[j];\n                    &lt;span class=\"hljs-keyword\"&gt;costs&lt;/span&gt;[j]&amp;#61;&lt;span class=\"hljs-keyword\"&gt;costs&lt;/span&gt;[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                    &lt;span class=\"hljs-keyword\"&gt;costs&lt;/span&gt;[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;;\n                }\n            }\n        }\n//        复制一个临时数组&amp;#xff0c;用于删除使用过的元素\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] tmp_time&amp;#61;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[]) Arrays.copyOf(&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;,&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;.length);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] tmp_costs&amp;#61;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[]) Arrays.copyOf(&lt;span class=\"hljs-keyword\"&gt;costs&lt;/span&gt;,&lt;span class=\"hljs-keyword\"&gt;costs&lt;/span&gt;.length);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; len&amp;#61;tmp_costs.length;\n        \n//        开始获取时间\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-keyword\"&gt;costs&lt;/span&gt;.length;i&amp;#43;&amp;#43;){\n//            判断人数是否满足条件\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(tmp_x&amp;gt;&amp;#61;&lt;span class=\"hljs-keyword\"&gt;costs&lt;/span&gt;[i]){\n//                每一次统计只取同时进行所花最大时间\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(times&amp;lt;&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[i]){\n                    times&amp;#61;&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;[i];\n                }\n                tmp_x-&amp;#61;&lt;span class=\"hljs-keyword\"&gt;costs&lt;/span&gt;[i];\n//                删除使用过的元素\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k&amp;#61;i;k&amp;lt;len&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;k&amp;#43;&amp;#43;){\n                    tmp_costs[k]&amp;#61;tmp_costs[k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                    tmp_time[k]&amp;#61;tmp_time[k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                }\n                tmp_costs[len&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;\n                tmp_time[len&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;\n                len&lt;span class=\"hljs-comment\"&gt;--;&lt;/span&gt;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(tmp_x&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){ break; }\n\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; times&amp;#43;minTime((&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[]) Arrays.copyOf(tmp_time,len),(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[]) Arrays.copyOf(tmp_costs,len),x);\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["蓄水池并发注水问题-算法题（java/c++）", ["当前有n个水池（n无大小限制，此处0<n<10^5）可同时蓄水，蓄满第i个水池所需要的时间为time[i]，蓄第i个水池所需要的工人数为costs[i]，（水池一旦开始蓄水就不能停下，且对水池蓄水必须满足人数要求，time.length = costs.length），当前有x个员工在待命（单个水池需要的人数不会超过x），求在满足人数要求的情况下完成全部蓄水任务的最短时间。", "\n", "输入：", "time = [2,4,10]", "costs = [2,5,7]", "x=7", "输出：14", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在 LIS 算法中&amp;#xff0c;通常使用二分查找来查找第一个大于等于 a[i] 的元素的下标。&lt;/p&gt;\n&lt;ul&gt;&lt;li&gt;这是因为&amp;#xff0c;LIS 算法中所求的是最长上升子序列&amp;#xff0c;也就是说&amp;#xff0c;每一个元素都应该比它前面的元素要大。如果使用第一个大于 a[i] 的元素的下标&amp;#xff0c;那么就可能会出现一个元素和它前面的元素相等的情况&amp;#xff0c;这样就不能满足 LIS 的要求了。&lt;/li&gt;&lt;li&gt;另一方面&amp;#xff0c;如果要求最长不下降子序列&amp;#xff0c;那么就可以使用第一个大于 a[i] 的元素的下标&amp;#xff0c;因为最长不下降子序列中的元素是可以相等的。&lt;/li&gt;&lt;li&gt;简单来说&amp;#xff0c;在 LIS 算法中&amp;#xff0c;用二分查找查找第一个大于等于 a[i] 的元素的下标&amp;#xff0c;是为了保证 LIS 中的每一个元素都比它前面的元素要大。如果你想要求最长不下降子序列&amp;#xff0c;就可以使用第一个大于 a[i] 的元素的下标。&lt;/li&gt;&lt;/ul&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;stdlib.h&amp;gt;\n\n#define &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(a, b) ((a) &amp;gt; (b) ? (a) &lt;span class=\"hljs-symbol\"&gt;:&lt;/span&gt; (b))\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;100005&lt;/span&gt;];\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; b[&lt;span class=\"hljs-number\"&gt;100005&lt;/span&gt;];\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main()\n{\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;);\n    for (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;; i&amp;#43;&amp;#43;)\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a[i]);\n\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    for (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;;\n        while (&lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt; &amp;lt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt; &amp;#61; (&lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt;) / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n            &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt; (b[&lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt;] &amp;lt; a[i])\n                &lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            else\n                &lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n        b[&lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;] &amp;#61; a[i];\n        &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt; &amp;gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;)\n            &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;;\n    }\n\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;);\n\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["LIS的O(nlogn)算法中关于二分查找的问题", ["用O(nlogn)算法 求最长上升子序列 和最长不下降子序列 中用到的二分搜索，是查找第一个 >= a[i] 的元素的下标还是第一个 > a[i] 的元素的下标？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;vector创建二维数组&amp;#xff0c;应该是这里错了。&lt;br /&gt;按着下面这个改一下&lt;br /&gt;//创建一个[99][99]的二维数组&lt;br /&gt;vector&amp;lt;vector &amp;gt; f(99,vector(99))&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["vector实现背包dp，报错", [" 背包dp，没报错，为什么运行不了啊。", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<algorithm>", "\n", "#", "include", "<cstdio>", "\n", "#", "include", "<vector>", "\n\n", "using", " ", "namespace", " std;\n\nvector <", "int", "> ", "num", "(", "0", ", ", "0", ");\nvector <", "int", "> ", "value", "(", "0", ", ", "0", ");\n", "int", " m=", "0", ", n=", "0", ";\n\n", "int", " ", "main", "()", "\n", "{\n    ", "system", "(", "\"color 2E\"", ");\n    cout << ", "\"请输入商品数M ： \"", ";\n    cin >> m;\n    cout << ", "\"请输入容器容量N ： \"", ";\n    cin >> n;\n    ", "int", " temp=", "0", ";\n    cout << ", "\"请输入每个商品的体积 ： \"", "<<endl;\n    ", "for", " (", "int", " i = ", "0", "; i < m; i++)\n    {\n        cin >> temp;\n        num.", "push_back", "(temp);\n\n    }\n    cout << ", "\"请输入每个商品的价值 ： \"", " << endl;\n    ", "for", " (", "int", " i = ", "0", "; i < m; i++)\n    {\n        cin >> temp;\n        value.", "push_back", "(temp);\n    }\n    vector<vector< ", "int", " > > ", "a", "(m + ", "1", ", ", "vector", "<", "int", ">(n + ", "1", "));\n    ", "for", " (", "int", " i = ", "0", "; i <= m; i++)\n    {\n        a[i][", "0", "] = ", "0", ";\n    }\n    ", "for", " (", "int", " i = ", "0", "; i <= n; i++)\n    {\n        a[", "0", "][i] = ", "0", ";\n    }\n    ", "for", " (", "int", " i = ", "1", "; i <= m; i++)\n    {\n        ", "for", " (", "int", " j = ", "1", "; j <= n; j++)\n        {\n            ", "if", " (num[i - ", "1", "] < j)\n            {\n                a[i][j] = ", "0", ";\n            }\n            ", "else", "\n            {\n                a[i][j] = ", "max", "(a[i", "-1", "][j],(value[i", "-1", "]+a[i", "-1", "][j-num[i", "-1", "]]));\n            }\n        }\n    }\n    cout << ", "\"物品的最大价值为 ： \"", ";\n    cout << a[m + ", "1", "][n + ", "1", "] << endl;\n    ", "return", " ", "0", ";\n}\n\n", "\n", "\n", " 用一维数组就可以，但我想用vector", "在不改变变长数组的情况下正常输出"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Solution {\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; maxSubArray(vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums) {\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt; &amp;#61; nums.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;();\n \n        //&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; dp[&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;][&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;];             //dp数组表明前面存储的元素的和\n \n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n \n        // for(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;;i&amp;#43;&amp;#43;)      //对元素进行初始化\n        //     dp[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;&amp;#43;nums[i];\n \n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt; &amp;#61; nums[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];//dp[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n \n        for(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;;j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            for(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61;j;i&amp;lt;&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;;i&amp;#43;&amp;#43;)\n            {\n                //dp[i][j] &amp;#61; dp[i][j-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; nums[i];\n                &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;&amp;#43;&amp;#61;nums[i];\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;)&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["leetcode最大子数组之和，用我这种思路可以解吗？", ["问题遇到的现象和发生背景", "\n", "\n      \n        ", "力扣", "\n        \n      ", "\n      ", "\n      ", "\n        ", "\n          ", "https://leetcode-cn.com/problems/maximum-subarray/", "\n        ", "\n      ", "\n", "问题相关代码，请勿粘贴截图", "\n", "class", " ", "Solution", " {\n", "public", ":\n    ", "int", " ", "maxSubArray", "(vector<", "int", ">& nums)", " ", "{\n        ", "int", " size = nums.", "size", "();\n\n        ", "int", " dp[size][size];             ", "//dp数组表明前面存储的元素的和", "\n\n        ", "int", " sum = ", "0", ";\n\n        ", "for", "(", "int", " i = ", "0", ";i<size;i++)      ", "//对元素进行初始化", "\n            dp[i][", "0", "] = sum+nums[i];\n\n        ", "int", " max = dp[", "0", "][", "0", "];\n\n        ", "for", "(", "int", " j = ", "1", ";j<size;j++){\n            ", "for", "(", "int", " i = ", "0", ";i<=j;i++){\n                dp[i][j] = dp[i][j", "-1", "] + nums[i];\n                ", "if", "(dp[i][j] > max)\n                    max = dp[i][j];\n            }\n        }\n        ", "return", " max;\n    }\n};\n\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;35岁前我面试过很多项目经理和开发候选人&amp;#xff0c;发现大多数40岁的甚至50岁的技术人&amp;#xff0c;他们的技术并没有随着年龄的增长而提高&amp;#xff0c;反而有点跟不上时代的发展。固守旧有的经验&amp;#xff0c;故步自封。&lt;/p&gt;\n&lt;p&gt;为此我成立了35岁大龄技术人社群&amp;#xff0c;针对35岁以上技术人组织线下会议&amp;#xff0c;一起分享和沟通技术&amp;#xff0c;以及未来的发展。&lt;/p&gt;\n&lt;p&gt;我发现35岁的人因为受到家庭的影响&amp;#xff0c;精力明显不够用&amp;#xff0c;而且也没有时间学习新技术&amp;#xff0c;更多情况下是考虑用旧有的技术解决问题&amp;#xff0c;或者甩手给新人&amp;#xff0c;让他们解决。&lt;br /&gt;更多的人开始考虑副业&amp;#xff0c;打造自己的睡后收入。&lt;/p&gt;\n&lt;p&gt;后来这个社群讨论的话题就慢慢演变成了35岁如何通过副业打造自己的竞争力&amp;#xff0c;确保可以不工作也有收入。&lt;/p&gt;\n&lt;p&gt;于是大部分人开设了公众号&amp;#xff0c;开通了csdn博客专栏&amp;#xff0c;开始输出自己的价值&amp;#xff0c;进而获得收益。&lt;/p&gt;\n&lt;p&gt;从那之后&amp;#xff0c;我也开始写公众号&amp;#xff0c;做自己的个人网站&amp;#xff0c;在csdn输出内容&amp;#xff0c;提供面试资料&amp;#xff0c;提供学习规划咨询&amp;#xff0c;等等一系列的副业。很庆幸的是&amp;#xff0c;花了一年时间&amp;#xff0c;成功实现了副业收入高于了工资收入。&lt;br /&gt;当副业收入高于薪资4倍的时候&amp;#xff0c;正好赶上中耳炎&amp;#xff0c;果断辞职。&lt;/p&gt;\n&lt;p&gt;之后结束北漂&amp;#xff0c;在老家定居&amp;#xff0c;过上了自己梦想中的居家办公的生活。&lt;/p&gt;\n&lt;p&gt;所以35岁不可怕&amp;#xff0c;可怕的是你一直在等待35岁的到来&amp;#xff0c;而从未行动。&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["如何打破IT界的35岁门槛？", ["IT程序员在大家看来是一个'高薪'行业, 可是它真的是一个高薪行业吗? 现在国家认证程序员是'农民工'。", "\n", "那么问题来了, 农民工的工作年龄的限制是多少呢? 程序员的为什么又会有35大砍一说呢?", "希望大家们能够帮我解惑, 也帮一些即将进入IT圈的同学指出问题。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我想明白了&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/20951052386610.jpg\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["请问我写的dp状态转移方程对不对", ["能看看这个问题我写的状态转移方程对吗？答案是二维的但我的是一维的", "\n", "\n", "我写的是:", "dp[i]=max(dp[i-1],dp[i-2]+a[i]*a[i-1])", "dp[0]=0,dp[1]=1"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/802104070046168.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;阅读、理解、注释、讲解四段代码的工作量非常大&amp;#xff0c;很抱歉我无力完成。我仅分析一下第四段代码。&lt;br /&gt;另外&amp;#xff0c;我不建议你直接贴代码让别人来分析&amp;#xff0c;而是应该首先理解书上作者的描述、逻辑&amp;#xff0c;在脑海中构建出解题的思路。有必要的话自己跑代码&amp;#xff0c;并且学会使用代码调试器观察程序运行途中变量的值&amp;#xff0c;这样有便于你自己理解&amp;#xff0c;也有利于你的编程思维。&lt;br /&gt;我个人并不是很喜欢硬分析别人给出的代码&amp;#xff0c;而是自己从头开始写&amp;#xff0c;如果遇到什么困难再去看看别人在那个地方是怎么写的。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;概括一下这四段代码别写了啥&amp;#xff1a;&lt;br /&gt;①代码一直接递归&amp;#xff0c;时间开销O(2^N)为指数量级&amp;#xff0c;耗时巨大&amp;#xff1b;&lt;br /&gt;②代码二叫备忘录式的动态规划。他建立了一个表格&amp;#xff0c;标记了哪些路径已经算过了&amp;#xff0c;哪些没有算过。算过的值就可以直接拿来用。这个算法已经把时间复杂度降低为O(N²)的多项式&amp;#xff0c;改进巨大&amp;#xff1b;&lt;br /&gt;③代码三叫递推式的动态规划。他直接从子问题&amp;#xff08;更短的路径&amp;#xff09;开始解决&amp;#xff0c;然后用子问题的答案直接求解更大的问题&amp;#xff0c;逐步推进。递推式的动态规划比备忘录式的在时间复杂度上的常数更小&amp;#xff0c;但是数量级依然是O(N²)的&amp;#xff1b;&lt;br /&gt;④代码四用了滚动数组的技巧&amp;#xff0c;用新算出来的值覆盖掉老的、不再使用的值。此方法把空间复杂度从O(N²)降到O(N)&amp;#xff0c;时间复杂度不变&amp;#xff08;已无法改进&amp;#xff09;。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;动态规划中的状态转移方程非常重要&amp;#xff0c;程序的核心就是在递推这个方程求值&amp;#xff0c;顺带一点边角料的处理。本题的状态转移方程&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;maxSum&lt;span class=\"hljs-comment\"&gt;[r]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61;\n{\n    D&lt;span class=\"hljs-comment\"&gt;[r]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;, if r &amp;#61;&amp;#61; N\n    max{maxSum&lt;span class=\"hljs-comment\"&gt;[r&amp;#43;1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;, maxSum&lt;span class=\"hljs-comment\"&gt;[r&amp;#43;1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j&amp;#43;1]&lt;/span&gt;} &amp;#43; D&lt;span class=\"hljs-comment\"&gt;[r]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;, if r &amp;lt; N\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在状态转移方程中&amp;#xff0c;maxSum[r][j]指的是从三角形的最下面一行走到第r行第j个数字时的最大的和&amp;#xff0c;D[r][j]指的是三角形中第r行第j个数字。&lt;br /&gt;如果r &amp;#61;&amp;#61; N&amp;#xff0c;那么路径上仅有这个数字&amp;#xff0c;故maxSum[r][j] &amp;#61; D[r][j]&amp;#xff1b;&lt;br /&gt;如果r &amp;lt; N&amp;#xff0c;那么从D[r][j]这一点的左侧最大路径maxSum[r&amp;#43;1][j]和右侧最大路径maxSum[r&amp;#43;1][j&amp;#43;1]中选一个更大的&amp;#xff0c;再加上D[r][j]本身的值&amp;#xff0c;得到maxSum[r][j]的结果。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;这是对第四段代码进行注释&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n \n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; MAX 101&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; D[MAX][MAX]; &lt;span class=\"hljs-comment\"&gt;// 二维数组D&amp;#xff0c;用于存储这个数字三角形。&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* maxSum; &lt;span class=\"hljs-comment\"&gt;// maxSum是一个int指针。&lt;/span&gt;\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j;\n    cin &amp;gt;&amp;gt; n; &lt;span class=\"hljs-comment\"&gt;// 将N存入变量n.&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, i &amp;lt;&amp;#61; n;i&amp;#43;&amp;#43;&amp;#xff09;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j &amp;lt;&amp;#61; i;j&amp;#43;&amp;#43;)\n            cin &amp;gt;&amp;gt; D[i][j]; &lt;span class=\"hljs-comment\"&gt;// 将数字三角形读入二维数组D.&lt;/span&gt;\n    maxSum &amp;#61; D[n]; &lt;span class=\"hljs-comment\"&gt;// 将maxSum指向三角形的最后一行&amp;#xff0c;实现了状态转移方程中r &amp;#61;&amp;#61; N时的情况。此时maxSum是个一维数组&amp;#xff0c;maxSum[j]保存了第N行第j个位置的最大路径&amp;#xff08;从三角形最下行开始走&amp;#xff09;。&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; --i) &lt;span class=\"hljs-comment\"&gt;// 变量i是当前考虑的行数&amp;#xff0c;从第n-1行递减到第1行。&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; i; &amp;#43;&amp;#43;j) &lt;span class=\"hljs-comment\"&gt;// 考虑第i行第j个位置&amp;#xff0c;从1递增到i&amp;#xff0c;因为第i行只有i个数。&lt;/span&gt;\n            maxSum[j] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(maxSum[j], maxSum[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]) &amp;#43; D[i][j]; &lt;span class=\"hljs-comment\"&gt;// 实现状态转移方程r &amp;lt; N时的递推。这里算第i行的maxSum[j]时&amp;#xff0c;使用了已经算好且存下来的第i&amp;#43;1行的maxSum[j]和maxSum[j&amp;#43;1]的值&amp;#xff0c;并直接覆盖了maxSum[j]的值&amp;#xff0c;这并不会干扰接下来对maxSum[j&amp;#43;1]的计算。这就是滚动数组的主要思想。&lt;/span&gt;\n    cout &amp;lt;&amp;lt; maxSum[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;lt;&amp;lt; endl; &lt;span class=\"hljs-comment\"&gt;// 输出结果。变量i最终的值为1&amp;#xff0c;即maxSum当前存的是第1行的情况。&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["请问这道数字三角形如何理解呢？", ["请问这道数字三角形如何理解呢？有四段代码，我不是很懂，希望大家帮注释一下代码并讲一下思路。非常感谢！", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<cstdio>", "\nusning ", "namespace", " std;\n\n", "#", "define", " MAX_NUM 100", "\n", "int", " d[MAX_NUM + ", "10", "][MAX_NUM + ", "10", "];\n", "int", " N;\n\n", "int", " ", "MaxSum", "(", "int", " r, ", "int", " j)", "\n", "{\n    ", "if", " (r == N）\n        ", "return", " d[r][j]\n        ", "int", " sum1 = ", "MaxSun", "(r + ", "1", ", j);\n        ", "int", " sum2 = ", "MaxSum", "(r + ", "1", ", j + ", "1", ");\n        ", "if", " (sum1 > sum2)\n            ", "return", " sum1 + d[r][j]\n            ", "return", " sum2 + d[r][j];\n}\n\n", "int", " ", "main", "()\n{\n    ", "int", " m;\n    ", "scanf", "(", "\"%d\"", ", &N);\n    ", "for", " (", "int", " i = ", "1", ";i <= N;i++)\n        ", "for", " (", "int", " j = ", "1", ";j <= i;i++)\n            ", "scanf", "(", "\"%d\"", ", &d[i][j]);\n    ", "printf", "(", "\"%d\"", ", ", "MaxSum", "(", "1", ", ", "1", "));\n    ", "return", " ", "0", ";\n}\n\n", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<cstdio>", "\n", "#", "include", "<cstring>", "\n", "using", " ", "namespace", " std;\n\n", "#", "define", " MAX_NUM 100", "\n", "int", " d[MAX_NUM + ", "10", "][MAX_NUM + ", "10", "];\n", "int", " N;\n", "int", " maxSum[MAX_NUM + ", "10", "][MAX_NUM + ", "10", "];\n\n", "int", " ", "MaxSum", "(", "int", " r, ", "int", " j)", "\n", "{\n    ", "if", " (r == N)\n        ", "return", " d[r][j];\n    ", "if", " (maxSum[r + ", "1", "][j] == ", "-1", ")\n        maxSum[r + ", "1", "][j] = ", "MaxSum", "(r + ", "1", ", j);\n    ", "if", " (maxSum[r + ", "1", "][j + ", "1", "] == ", "-1", ")\n        maxSum[r + ", "1", "][j + ", "1", "] = ", "MaxSum", "(r + ", "1", ", j + ", "1", ");\n    ", "if", " (maxSum[r + ", "1", "][j] > maxSum[r + ", "1", "][j + ", "1", "])\n        ", "return", " maxSum[r + ", "1", "][j] + d[r][j];\n}\n\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " m;\n    ", "scanf", "(", "\"%d\"", ", &N);\n\n    ", "memset", "(maxSum, ", "-1", ", ", "sizeof", "(maxSum));\n    ", "for", " (", "int", " i = ", "1", ";i <= N;i++)\n        ", "for", " (", "int", " j = ", "1", ";j <= i;j++)\n            ", "scanf", "(", "\"%d\"", ", &d[i][j]);\n    ", "printf", "(", "\"%d\"", ", ", "MaxSum", "(", "1", ", ", "1", "))l\n        ", "return", " ", "0", ";\n}\n\n", "\n", "#include<cstdio>\n#include<cstring>\n#include<iostream>\nusing namespace std;\n\n#define ", "MAX_NUM", " ", "100", "\nint d[", "MAX_NUM", " + ", "10", "][", "MAX_NUM", " + ", "10", "];\nint ", "N", ";\nint maxSum[", "MAX_NUM", " + ", "10", "][", "MAX_NUM", " + ", "10", "];\n\nint main()\n{\n    int i, j;\n    scanf(", "\"%d\"", ", &", "N", ");\n    for (i = ", "1", ", i <= ", "N", ";i++)\n        for (j = ", "1", ";j <= i;j++)\n            scanf(", "\"%d\"", ", &d[i][j]);\n    for (j = ", "1", ";j <= ", "N", ";j++)\n        maxSum[", "N", "][j] = d[", "N", "][j];\n    for (i = ", "N", ";i > ", "1", ";i--)\n        for (j = ", "1", ";j < i;j++) {\n            if (maxSum[i][j] > maxSum[i][j + ", "1", "])\n                maxSum[i - ", "1", "][j] = maxSum[i][j] + d[i - ", "1", "][j];\n            else\n                maxSum[i - ", "1", "][j] = maxSun[i][j + ", "1", "] + d[i - ", "1", "][j];\n        }\n    printf(", "\"%d\"", ", maxSum[", "1", "][", "1", "]);\n    return ", "0", ";\n}\n\n\n", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<algorithm>", "\n", "using", " ", "namespace", " std;\n\n", "#", "define", " MAX 101", "\n", "int", " D[MAX][MAX];\n", "int", " n;", "int", "* maxSum;\n\n", "int", " ", "main", "()", " ", "{\n    ", "int", " i, j;\n    cin >> n;\n    ", "for", " (i = ", "1", ", i <= n;i++）\n        ", "for", " (j = ", "1", ";j <= i;j++)\n            cin >> D[i][j];\n        maxSum = D[n];\n        ", "for", " (", "int", " i = n - ", "1", ";i >= ", "1", ", --i)\n            ", "for", " (", "int", " j = ", "1", ";j <= i;++j)\n                maxSum[j] = ", "max", "(maxSum[j], maxSum[j + ", "1", "]) + D[i][j];\n        cout << maxSum[", "1", "] << endl;\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;par &amp;#61; [&lt;span class=\"hljs-number\"&gt;0.05&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0.1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0.2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0.5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2.0&lt;/span&gt;] &lt;span class=\"hljs-comment\"&gt;#存储每种硬币&amp;#xff0c;从小到大排列&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入需要找的零钱:&amp;#34;&lt;/span&gt;)) \n&lt;span class=\"hljs-comment\"&gt;#从面值最大的开始遍历&lt;/span&gt;\ni &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(par) -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;gt;&amp;#61; par[i]:\n        n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; // par[i])\n        change &amp;#61; n * par[i]\n        &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.6f&amp;#34;&lt;/span&gt; %(&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; - change))\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;用了%d个%1.2f元硬币&amp;#34;&lt;/span&gt; % (n,par[i]))\n    i -&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;par是硬币种类,可以自行修改&lt;br /&gt;有帮助请点击采纳,谢谢&lt;/p&gt;", "Konwledge_Point": "动态规划", "Question": ["python 贪心算法硬币找钱问题", ["设有6 种不同面值的硬币，各硬币的面值分别为5 分，1 角，2 角，5 毛，1 元，2元。现要用这些面值的硬币来购物。在购物中希望使用最少个数硬币。例如，1 次购物需要付款0.55 元，如果没有5 角的硬币，只好用2∗2角+1∗1角+1∗5分 共4 枚硬币来付款。", "\n", "对于给定的各种面值的硬币个数和付款金额，计算使用硬币个数最少的交易方案。", "\n", "输入格式:", "输入数据有若干组，第一行给出一个整数n表示输入数据的组数。", "\n", "以下n行每一行有6 个整数和1个有2 位小数的实数。分别表示可以使用的各种面值的硬币个数和付款金额。", "\n", "输出格式:", "输出每组数据的最少硬币个数。如果不可能完成交易，则输出“impossible”。", "\n", "输入样例:", "2", "2 4 2 2 1 0 0.95", "2 4 2 0 1 0 0.55", "输出样例:", "4", "4"]], "Tag": "算法设计"}
{"Answer": "&lt;h1 id=\"h1_一、解析_1639831598507\"&gt;一、解析&lt;/h1&gt;\n&lt;p&gt;注意以下几个点&amp;#xff1a;&lt;br /&gt;1&amp;#xff09;符号位&amp;#xff1b;&lt;br /&gt;2&amp;#xff09;超int32&amp;#xff1b;&lt;br /&gt;3&amp;#xff09;判断0的情况&amp;#xff1b;&lt;/p&gt;\n&lt;h1 id=\"h1_二、源码_1639831598507\"&gt;二、源码&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;reverse&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; x)&lt;/span&gt; {\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;s&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;// (1) 存储结果&amp;#xff1b;&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;sign&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;    &lt;span class=\"hljs-comment\"&gt;// (2) 存储符号位&amp;#xff1b;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {       &lt;span class=\"hljs-comment\"&gt;// (3) 判断x的符号位&amp;#xff1b;&lt;/span&gt;\n        sign &amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;    &lt;span class=\"hljs-comment\"&gt;// (4) 负数的情况&amp;#xff1b;&lt;/span&gt;\n        x &amp;#61; -x;       &lt;span class=\"hljs-comment\"&gt;// (5) 取反&amp;#xff1b;&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;     &lt;span class=\"hljs-comment\"&gt;// (6) x 为 0 的情况直接返回&amp;#xff1b;&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (x) {\n        s &amp;#61; s * &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; (x % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);\n        x /&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    }\n    s *&amp;#61; sign;        &lt;span class=\"hljs-comment\"&gt;// (7) 别忘了&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(s &amp;lt; -((&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt;)&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-number\"&gt;31&lt;/span&gt;) ) {\n        s &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(s &amp;gt; ((&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt;)&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-number\"&gt;31&lt;/span&gt;) - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; ) {\n        s &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; s;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "动态规划", "Question": ["给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。", ["给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。", "\n", "\n      \n        ", "力扣", "\n        \n      ", "\n      ", "\n      ", "\n        ", "\n          ", "https://leetcode-cn.com/problems/reverse-integer/", "\n        ", "\n      "]], "Tag": "算法设计"}
