{"Answer": "求最大受益，思想是把价值最大的先放入依次进行比较，再把价重比最大的进行比较。在比较两者的结果 进行取舍\r\n我以价值最大为例进行比较\r\n第一步：放入w6            w剩=11         n剩=6          p总=18\r\n第二步：放入w2            w剩=6           n剩=5          p总=18+15\r\n第三步：放入w0            w剩=4          n剩=4           p总=18+15+10      \r\n第四步：放入w3            因为w3&gt;w剩   当7/4w3 刚好装满      n=3    p总待=18+15+10+7/4*7 = 55.25 待定\r\n第五步：舍弃第四步 \r\n             放入w4            w剩=3           n=3    p总验=p总=18+15+10+6\r\n第六步  放入w1             w剩=0     刚好装满   n=2   p总验=18+15+10+6+5=54   （验证）\r\n    54&lt;55.25\r\n\t当按照价值最大为例进行比较\t最大收益为（1,0,0,7/4,1,1）\r\n\t\t\r\n\t\t再以价重比最大按照上面的方法进行比较   价重比就是价格除以重量，得出单价进行比较\r\n\t\t\r\n\t\t结果就是：\r\n\t\t就是10+5*2/3+15+6+18+3=55（1/3）\r\n\t\t\r\n\t\t55.25&lt;55（1/3）\r\n\t\t\r\n\t\t所以(x0,x1,x2,x3,x4,x5,x6)=(1,2/3,1,0,1,1,1)\r\n\t\t\r\n\t\tps：你的那个注意细节 你把乘号写成加好了，10+5*2/3+15+6+18+3=55（1/3）", "Konwledge_Point": "背包问题", "Question": ["贪心法 背包问题 一道简单的实际问题 不知道大难如何计算出来的。", ["问题：设有背包问题实例n=7，M=15（背包载重），（w0,w1,...,w6）=(2,3,5,7,1,4,1),", "\n物品装入背包的收益为：(p0,p1,p2,p3,p4,p5,p6)=(10,5,15,7,6,18,3).", "\n求这一实例的最优解和最大收益", "\n答案：最优解：（p0/wo,p1/w1,p2/w2,p3/w3,p4/w4,p5/w5,p6/w6）=(10/2,5/3,15/5,7/7,6/1,18/4,3/1)", "(x0,x1,x2,x3,x4,x5,x6)=(1,2/3,1,0,1,1,1)", "\n最大收益：10+5+2/3+15+6+18+3=55（1/3）", "\n\n", "我想问加粗斜体的这个答案是怎么求出来的？有公式还是什么思想？", "\n如果按照上一步直接计算答案应该是（5,1.667,3,1,6,4,5,3）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题主&amp;#xff0c;上一个给你发的那个输入顺序换下就对了&amp;#xff0c;不用重新发题&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;//一维数组解法&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; MAX_M 12880        &lt;span class=\"hljs-comment\"&gt;//最大限重&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; MAX_N 3402        &lt;span class=\"hljs-comment\"&gt;// 最大种类数&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; max(a,b) a&amp;gt;b?a:b&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dp[MAX_M &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; weights[MAX_N &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; values[MAX_N &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m, i, j;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;n , &amp;amp;m);&lt;span class=\"hljs-comment\"&gt;//n是种类&amp;#xff0c;m是限制重量&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;values[i],&amp;amp;weights[i] );\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; m; j &amp;gt;&amp;#61; weights[i]; j--) {\n            dp[j] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(dp[j], dp[j - weights[i]] &amp;#43; values[i]);\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, dp[m] );\n}\n&lt;span class=\"hljs-comment\"&gt;/*\n5 15\n4 12\n2 2\n2 1\n1 1\n10 4\n*/&lt;/span&gt;\n \n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/430400106636182.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["大学计算机-背包问题 求解 ，答案", ["背包问题的定义是：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量", "内，我们如何选择，才能使得物品的总价格最高。下图是背包问题的一个例子，应该选择哪", "些盒子，才能使价格尽可能地大，并且保持总重量不超过 15 kg？所选物品的总价值是多少？", "\n"]], "Tag": "算法设计"}
{"Answer": "return Math.max(getSValue(index - 1, totalWeight - w[index]) + v[index], getSValue(index - 1, resiWeight));\r\n\r\n把里面的totalWeight改成resiWeight。你的函数参数是resiWeight，而不是totalWeight，如果按你写的，程序跑起来getSValue(index，resiWeight)的第二个函数参数值始终不变，所以始终有resiWeight&gt;=w[index]", "Konwledge_Point": "背包问题", "Question": ["用不同方式的递归来解决01背包问题的疑问", ["01背包问题，假设表示各个物品重量的数组为w,对应的价值为数组v,这里用两种方式进行解决，第一种方式：反向遍历，即我从后往前进行选择，即从w.length-1到0进行选择，第二种方式：正向遍历，从第0个物品开始往第w.length-1个物品开始决策，具体代码如下：", "\n//方式一：反向遍历，即我从后往前进行选择，即从w.length-1到0进行选择，", "\n\n", " public class Knapsack {\n    //表示各个物品的重量\n  public static int w[];\n    //表示各个物品的价值\n   public static int v[];\n   //表示背包容量\n   public static int totalWeight;\n   //用于存储计算过的子问题的解的二维数组\n   public static int[][] tempArray;\n    public static void main(String[] args) {\n        w = new int[]{3, 4,5,2,7};\n        v = new int[]{9,3,21,4,33};\n        totalWeight = 15;\n        int len = w.length;\n        System.out.println(getSValue(len-1,15));\n    }\n    private static int getSValue(int index, int resiWeight) {\n        //暴力搜索来获取的背包问题的最大价值,返回值 就是这个最大值，函数本身的含义表示选取到第index个物品时已经获得的价值,第二个参数表示背包还剩余的容量\n        if (resiWeight<=0)\n            return 0;\n        if (index==-1)\n            return 0;\n\n        if (resiWeight>=w[index]) {\n           return Math.max(getSValue(index - 1, totalWeight - w[index]) + v[index], getSValue(index - 1, resiWeight));\n    }\n        else {\n            return getSValue(index-1,resiWeight);\n        }\n\n    }\n}\n", "\n\n", "//方式二：反向来写的话，即从第0个物品开始决策直到第w.length-1个物品，代码如下：", "\n\n", " public static int f(int cur,int max)\n    {\n        if(cur==num)//物品已经尝试完,这里必须是cur==num或cur<=num,说明决策到了第num-1个物品，已到数组的最后一个元素进行决策，不管怎么决策，将调用的是f(num)，这个物品根本不存在，注意这里的判断是写在了递归式前面\n            return 0;\n        if(max<=0)//背包已经装满，没有容量了\n            return 0;\n        if(max<w[cur])//背包容量小于该商品的重量\n            return f(cur+1,max);\n        else\n        {\n            return Math.max(f(cur+1,max), f(cur+1,max-w[cur])+v[cur]);\n        }\n    }\n\n", "\n\n", "上述两种方式应该都可以，但是正向方式得到的最大价值是70，明显是把所有物品都选了，才有70，但是重量和超过背包容量15，肯定有问题，不知到错在哪里，但是反向来写的话，即从第0个物品开始决策直到第w.length-1个物品，，，得到的结果是63，这个对的，为什么第一中方式的结果是错的，求大神解惑？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考一下&amp;#xff1a;&lt;a href=\"https://www.cnblogs.com/congqiandehoulai/p/8532869.html\"&gt;https://www.cnblogs.com/congqiandehoulai/p/8532869.html&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;如果对你有帮助&amp;#xff0c;可以点击我这个回答右上方的【采纳】按钮&amp;#xff0c;给我个采纳吗&amp;#xff0c;谢谢&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["大规模0—1背包问题求", ["当你用LINGO求解了100个物品的背包问题时，你是怎样", "把那些不装的物品挑出来的？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如果你是在学习算法设计&amp;#xff0c;那么这一篇可能就是你所需要的&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/huayula/article/details/106339138\" id=\"textarea_1631715054150_1631715195263_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;采用优先队列式分枝限界法求解0/1背包问题-算法设计与分析报告C/C&amp;#43;&amp;#43;版_爱酷码的博客-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;设计如下这个pdf文档有点长&amp;#xff0c;截图分段了&amp;#xff0c;需要可以直接下载该文档代码如下//author:rgh//采用优先队列式分枝限界法求解0/1背包问题#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;queue&amp;gt;using namespace std;#define MAXN 20\t\t\t\t\t\t//最多可能物品数//问题表示int n&amp;#61;3,W&amp;#61;30;int w[]&amp;#61;{0,16,15,15};\t\t\t\t//重量&amp;#xff0c;下标0不用int v[]&amp;#61;{0.&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/huayula/article/details/106339138&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["求一篇分支限界法求0-1背包问题的代码", ["求一篇分支限界法求0-1背包问题的代码，希望可以用c语言或者c加加，但是C加加结构体里面希望不要有函数，俺还没有学结构体函数。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你题目的解答代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;n,&lt;span class=\"hljs-keyword\"&gt;c&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;()\nn &amp;#61; &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(n)\n&lt;span class=\"hljs-keyword\"&gt;c&lt;/span&gt; &amp;#61; float(&lt;span class=\"hljs-keyword\"&gt;c&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;w&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-keyword\"&gt;list&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(float,&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;()))\nli &amp;#61; sorted(enumerate(&lt;span class=\"hljs-keyword\"&gt;w&lt;/span&gt;,start&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;), key&amp;#61;lambda &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;: &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &amp;#61; []\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i,v in li:\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;c&lt;/span&gt;-v&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;c&lt;/span&gt; -&amp;#61; v\n    &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(i)\n&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;sort&lt;/span&gt;()\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;))\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(str,&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/048170276846139.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "背包问题", "Question": ["python部分背包问题 贪心算法", ["给出n个物体，第i个物体重量为w_i.选择尽量多的物体，使得总重量不超过C.其中参数n为正整数，w_i，C为正的有理数。", "\n", "输入格式:", "第一行输入n和C，用空格隔开。", "\n", "第二行输入w_1, w_2 ...w_n.共n个数，用空格隔开。", "\n", "输出格式:", "第一行输出选择的物体数量。", "\n", "第二行按从小到大的顺序输出选择的物体编号i。", "\n", "注：如果物体数量相同有多种选择，请输出物体重量和最小的物体编号。", "第一组测试用例是", "5 10", "4 2 3 1 5", "输出", "4", "1 2 3 4", "第二组是", "5 10.1", "4.2 1.9 3.1 1 5", "输出", "3", "2 3 4"]], "Tag": "算法设计"}
{"Answer": "输入\n1\n20 3\n10 5\n6 2\n5 4\n\n输出\n75\n\nhint\n小王子花了5秒钟做完第3件事，然后花15秒钟去自习", "Konwledge_Point": "背包问题", "Question": ["一个简单的背包问题dp", ["找不出状态转移方程", "\n\n", "描述", "\n\n", "一大堆期末考试来袭，草滩小王子被迫去上自习了。", "\n\n", "除了自习，草滩小王子还想到了n件可以做的事，n件事可以选一些去做，", "\n\n", "这些事会花费一定的时间并且必须一次完成不停止（本题中时间的最小单位为1秒）", "\n\n", "并且可以提高（降低）草滩小王子自习的效率（神奇的是效率的提升是累加的），", "\n\n", "草滩小王子一开始的效率只有1。", "\n\n", "草滩小王子可以在任意时刻开始自习任意时间（效率不会因此降低），假设当前的效率为 ki ，", "\n\n", "这段时间 ti内获得的收获 si=ti×ki 。", "\n\n", "现在草滩小王子共有t秒的时间，该如何分配时间获得最大的自习收获呢。", "\n\n", "输入", "\n\n", "第一行是一个整数T(T<=10)，代表测试数据的组数。 对于每组测试数据： 第一行含两个个整数 t(0≤t≤1000),n(1≤n≤10000) 接下来n行，第行包括2个整数a,b(0≤a≤100,0≤b≤30)。 a代表第i件事所花的时间,b代表第i件事所提升的效率", "\n\n", "输出", "\n\n", "对于每组测试数据，输出一行，表示草滩小王子能够获得的最大收获"]], "Tag": "算法设计"}
{"Answer": "直接说题目是什么你这么问，没人知道代码要干嘛", "Konwledge_Point": "背包问题", "Question": ["acm背包问题求大神赐教", [" for(i = 1; i<=n; i++)  \n{  \n    for(j = v; j>=c[i]; j--)//在这里，背包放入物品后，容量不断的减少，直到再也放不进了  \n    {  \n        f[i][v]=max(f[i-1][v],f[i-1][v-c[i]]+w[i]);  \n    }  \n}  \n", "\n\n", "请问 第一个循环 i =1 之后 第二个循环 一直在放编号为1的石头啊？这两个循环都是干嘛的？那个 f[i][v] 数组 从00到 iv 都变成什么样了？求大神赐教"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;都报啥错啊&lt;br /&gt;for(i&amp;#61;0;i&amp;lt;n;i&amp;#43;&amp;#43;)&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;if(z[i]&amp;lt;z[i&amp;#43;1])&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;swap(z,w,v,i);&lt;br /&gt;}&lt;br /&gt;这里是有问题的。有效值总共就n个&amp;#xff0c;当i&amp;#61;n-1时&amp;#xff0c;z[i&amp;#43;1]是个无效数&amp;#xff0c;进行比较处理就不知道会怎么样了。改为i&amp;lt;n-1&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["背包问题动态规划没搞懂报错原因", ["没有懂报错的原因，不知道该怎么该，还是思路有问题", "\n", "#include<stdio.h>", "void swap(float z,float w,float v,int i);", "int main()", "{", "    float w[20],v[20],c,x[20],z[20];", "    float sum,l[20];//l放入背包的部分重量    sum价值总额和", "    int n,i;", "    sum =0;", "    printf(\"输入物品数量：\");", "    scanf(\"%d\",&n);", "    printf(\"输入背包容量：\");", "    scanf(\"%f\",&c);", "    printf(\"输入物品重量：\");", "    for(i=0;i<n;i++)", "    {", "        scanf(\"%f\",&w[i]);", "     }", "     printf(\"输入物品价值：\");", "    for(i=0;i<n;i++)", "    {", "        scanf(\"%f\",&w[i]);", "     }", "     //单位价值", "     for(i=0;i<n;i++)", "     {", "         z[i]=v[i]/w[i];", "      }", "      for(i=0;i<n;i++)", "      {", "          if(z[i]<z[i+1])", "          {", "              swap(z,w,v,i);", "          }", "      }", "      for(i=0;c!=0;i++)", "      {", "          if(w[i]<=c)", "          {", "              x[i]=1;", "              l[i]=w[i];", "              c=c-w[i];", "              sum=sum+v[i];", "          }", "\n", "    if(w[i]>c)\n    {\n        x[i]=", "1", ";\n        l[i]=c;\n        sum=sum+c*z[i];\n    }\n  }\n  \n  //输出\n  for(i=", "0", ";i<n;i++) \n  {\n      if(x[i]==", "1", ")\n      {\n          printf(", "\"放入重量为%f，价值为%f的物品，放入重量为%f：\"", ",w[i],v[i],l[i]);\n      }\n  }\n  printf(", "\"总价值为：%f\"", ",sum);\n  \n", "\n", " } ", "\n", "void swap(float z,float w,float v,int i)", "{", "    float temp;", "    temp=z[i];", "    z[i]=z[i+1];", "    z[i+1]=temp;", "\n", "temp=w", "[i]", ";\nw", "[i]", "=w", "[i+1]", ";\nw", "[i+1]", "=temp;\n\ntemp=v", "[i]", ";\nv", "[i]", "=v", "[i+1]", ";\nv", "[i+1]", "=temp;\n", "\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码格式较乱&amp;#xff0c;不过猜测问题出在x &amp;#61; y这里&amp;#xff0c;列表的浅拷贝&amp;#xff0c;两个变量指向了同一个列表地址。所以后面执行到y[k] &amp;#61; 0的时候&amp;#xff0c;即使没有再赋值&amp;#xff0c;x也会变成和y一样全0的列表。&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["回溯法解决0-1背包问题", ["结果的最优解x莫名其妙就被改了，看了好几遍都不知道在哪里改的 ", "\n", "def bound(cv, cw, w, v, k, dw, n):  #对剩余物品做贪心选择", "    b = cv  #当前价值总量", "    c = cw  #当前背包已用容量", "    for i in range(k+1, n):", "        if c+w[i] <= dw:", "            c = c + w[i]", "            b = b + v[i]", "        else:", "            b = b + v[i]*((dw-c)/w[i])", "            break", "    return b", "\n", "def bt_Knapsack(dw, n, w, v, fw, fv, x):", "    cw = cv = 0", "    k = 0   #表示第k+1件物品", "    y = [0 for i in range(n)] #设置临时解向量", "    while(1):", "        while k<n and (cw+w[k])<=dw:", "            cw = cw + w[k]", "            cv = cv + v[k]", "            y[k] = 1", "            k = k + 1", "        if k>=n:  #全部考查完，找到可行解", "            fv = cv", "            print('value:',fv)", "            fw = cw", "            x = y", "            print('solution x:', x)  # 最优解", "            k = n-1", "        else:  #k超重，不能装入", "            y[k] = 0", "        while bound(cv, cw, w, v, k, dw, n) <= fv:  #无更优解", "            while k != -1 and y[k] != 1:  # 回溯", "                k = k - 1", "            if k == -1:", "                break", "            y[k] = 0", "            cw = cw - w[k]", "            cv = cv - v[k]", "        if k == -1:", "            break", "        k = k + 1", "    print('maxValue:', fv)  # 最优值", "    print('solution:', x)  # 最优解", "\n", "n = 8", "dw = 110", "w = [1,11,21,23,33,43,45,55]", "v = [11,21,31,33,43,53,55,65]", "x = [0 for i in range(n)]", "fw = 0", "fv = -1  #已找到的某个可行解的最大价值。求最大，初值为-1", "bt_Knapsack(dw, n, w, v, fw, fv, x)", "\n"]], "Tag": "算法设计"}
{"Answer": "选取价值最大者。反例：\r\nW=30\r\n物品：A B C\r\n重量：28 12 12\r\n价值：30 20 20\r\n根据策略，首先选取物品A，接下来就无法再选取了，可是，选取B、C则更好。\r\n选取单位重量价值最大的物品。反例：\r\nW=30\r\n物品：A B C\r\n重量：28 20 10\r\n价值：28 20 10\r\n根据策略，三种物品单位重量价值一样，程序无法依据现有策略作出判断.\r\n\r\n使用动态规划来处理背包问题: \r\n背包的状态转换方程 f[i,j] = Max{ f[i-1,j-Wi]+Pi( j &gt;= Wi ),  f[i-1,j] }\r\n         f[i,j]表示在前i件物品中选择若干件放在承重为 j 的背包中，可以取得的最大价值。\r\n         Pi表示第i件物品的价值。\r\n\r\n参考代码:\r\n\r\n```\r\n #include &lt;iostream&gt;\r\n#include &lt;vector&gt; \r\nusing namespace std;\r\n//物品类 \r\nclass packitem{\r\n\tpublic:\r\n\t\tpackitem(int w, int v):weight(w), value(v){}\r\n\t\tint weight;\r\n\t\tint value;\r\n};\r\nint matrix[5][10] = {0};\r\nint maxValue(int matrix[][10], vector&lt;packitem*&gt; vecpack, int bagsize, int bagweight){\r\n\tfor(int i = bagsize - 1; i &gt;= 0; --i){\r\n\t\tfor(int j = 0; j &lt; bagweight; ++j){\r\n\t\t\tpackitem item = *vecpack[i];\r\n\t\t\tif(item.weight &gt; j + 1){\r\n\t\t\t\t//当前背包不能装下此物品\r\n\t\t\t\tif(0 == j){\r\n\t\t\t\t\tmatrix[i][j] = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tmatrix[i][j] = matrix[i + 1][j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tint valueInbag = 0;\r\n\t\t\t\tif( i == bagsize - 1|| j - item.weight + 1 &lt; 0){\r\n\t\t\t\t\tmatrix[i][j] = item.value;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tint tmp = 0;\r\n\t\t\t\t\tif (j - item.weight &gt;= 0)\r\n\t\t\t\t\t\ttmp = j - item.weight;\r\n\t\t\t\t\tvalueInbag = matrix[i + 1][tmp] + item.value;\r\n\t\t\t\t\tmatrix[i][j] = max(matrix[i + 1][j], valueInbag);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor(int i = 0; i &lt; bagsize; ++i){\r\n\t\tfor(int j = 0; j &lt; bagweight; ++j){\r\n\t\t\tcout&lt;&lt;matrix[i][j]&lt;&lt;\" \"; \r\n\t\t}\r\n\t\tcout&lt;&lt;endl;\r\n\t}\r\n\treturn matrix[0][bagweight - 1];\r\n\t\r\n}\r\nint main()\r\n{\r\n\tvector&lt;packitem*&gt; tmp; \r\n\tint w[] = {2,2,6,5,4};\r\n\tint v[] = {6,3,5,4,6};\r\n\tint bagweight = 10;\r\n\tfor(int i = 0; i &lt; 5; ++i){\r\n\t\ttmp.push_back(new packitem(w[i], v[i]));\r\n\t}\r\n\tint result = maxValue(matrix, tmp, 5, bagweight);\r\n\t\r\n\tfor(int i = 0; i &lt; 5; ++i){\r\n\t\tdelete tmp[i];\r\n\t}\r\n\ttmp.clear();\r\n\t\r\n\tcout&lt;&lt;result&lt;&lt;endl;\r\n\treturn 0;\r\n}\r\n```", "Konwledge_Point": "背包问题", "Question": ["背包算法最优解的问题", ["若果把背包问题 直接按价值降序排列 和 按单位质量价值降序排列 两者的结果进行比较,能不能得出最优解?如果不能,在不涉及递归和穷举的前提下,有什么方法可以得出最优解?"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;根本区别就是多了一个维度&amp;#xff0c;你需要遍历更多次&lt;br /&gt;也可以说没有根本区别&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["一维背包问题和二维背包问题根本区别", ["一维背包问题和二维背包问题还有完全背包问题的根本区别在哪里啊？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;01背包问题&amp;#xff0c;可以使用动态规划处理&amp;#xff0c;详细代码如下&amp;#xff0c;望采纳&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-cpp\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; N &amp;#61; &lt;span class=\"hljs-number\"&gt;1010&lt;/span&gt;;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; w[N], c[N];  &lt;span class=\"hljs-comment\"&gt;// w[i] 表示第 i 件物品的重量&amp;#xff0c;c[i] 表示当前可选的第 i 件物品的数量&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f[N][N];  &lt;span class=\"hljs-comment\"&gt;// f[i][j] 表示在前 i 件物品中选择一些使得重量不超过 j 时的最大价值&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; path[N];  &lt;span class=\"hljs-comment\"&gt;// path[i] 表示第 i 个数在哪一行被更新&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i &amp;#43;&amp;#43; ) &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;w[i]);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i &amp;#43;&amp;#43; ) &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;c[i]);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;m);\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i &amp;#43;&amp;#43; )\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt;&amp;#61; m; j &amp;#43;&amp;#43; )\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; k &amp;lt;&amp;#61; c[i] &amp;amp;&amp;amp; k * w[i] &amp;lt;&amp;#61; j; k &amp;#43;&amp;#43; )\n            {\n                &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; val &amp;#61; f[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j - k * w[i]] &amp;#43; k * w[i];\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (val &amp;gt; f[i][j])\n                {\n                    f[i][j] &amp;#61; val;\n                    path[j] &amp;#61; i;\n                }\n            }\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, f[n][m]);\n\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; m;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (k)\n    {\n        c[path[k]] -- ;\n        k -&amp;#61; w[path[k]];\n    }\n\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; res &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i &amp;#43;&amp;#43; )\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c[i]) res &amp;#43;&amp;#43; ;\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, res);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i &amp;#43;&amp;#43; )\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c[i]) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, i);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["背包问题求解zsbd", ["D31s9. 装物品方案（小内存）", "\n", "时间限制：2.0s 内存限制：16.0MB Special Judge 代码提交间隔：5分钟(现在可以提交)", "问题描述", "有 件物品，第 件物品的重量为 （整数）。", "\n", "对于给定的整数 ， 请选择一些物品，使得拼出的重量不超过 ，请问在此前提下能拼出的最大重量是多少？具体的方案是怎样的？", "\n", "输入格式", "输入的第一行包含一个整数 ，表示物品数量。", "\n", "第二行包含 个整数 , , , ，分别为每个物品的重量。", "\n", "最后一行包含一个整数 。", "\n", "输出格式", "输出的第一行包含一个整数 ，表示答案。", "\n", "第二行包含一个整数 ，表示要选择的物品个数。", "\n", "第三行包含 个整数，为每个选择的物品的编号，按照从小到大的顺序输出，相邻整数之间使用一个空格分隔。", "\n", "样例输入", "3", "4 4 6", "12", "Data", "样例输出", "10", "2", "1 3", "Data", "以下答案也正确", "\n", "10", "2", "2 3", "\n", "这道背包问题我一开始打算用回溯做，但会超时和错误，现在打算还是老老实实用背包做，请各方神圣帮本蒟蒻看看吧！", "急！在线蹲答案！", "好回答立刻采纳！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于Monster 组和GPT的调写&amp;#xff1a;&lt;br /&gt;可以在代码中增加一个循环&amp;#xff0c;在每次放入背包之前判断是否有余地&amp;#xff0c;如果有余地则再次放入。代码如下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;v &amp;#61; [&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;]\nval &amp;#61; [&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;120&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;280&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;]\nnum &amp;#61; [&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;]\nv_val &amp;#61; []\n&lt;span class=\"hljs-symbol\"&gt;VS&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;S&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;\n \nfor i in range(&lt;span class=\"hljs-symbol\"&gt;S&lt;/span&gt;):\n    v_val.append(val[i]/v[i])\n \nfor i in range(&lt;span class=\"hljs-symbol\"&gt;S&lt;/span&gt;):\n    for j in range(i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-symbol\"&gt;S&lt;/span&gt;):\n        if v_val[i] &amp;lt; v_val[j]:\n            v_val[i],v_val[j] &amp;#61; v_val[j],v_val[i]\n            v[i],v[j] &amp;#61; v[j],v[i]\n            val[i],val[j] &amp;#61; val[j],val[i]\n            num[i],num[j] &amp;#61; num[j],num[i]\n \nprint(&lt;span class=\"hljs-string\"&gt;&amp;#34;编号&amp;#xff1a;{}&amp;#34;&lt;/span&gt;.format(num))\nprint(&lt;span class=\"hljs-string\"&gt;&amp;#34;体积&amp;#xff1a;{}&amp;#34;&lt;/span&gt;.format(v))\nprint(&lt;span class=\"hljs-string\"&gt;&amp;#34;价值&amp;#xff1a;{}&amp;#34;&lt;/span&gt;.format(val))\n \nv1_now &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\nval1_now &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n \nprint(&lt;span class=\"hljs-string\"&gt;&amp;#34;背包内加入的物品编号有&amp;#xff1a;&amp;#34;&lt;/span&gt;,end&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)\nfor i in range(&lt;span class=\"hljs-symbol\"&gt;S&lt;/span&gt;):\n    while (v[i] &amp;#43; v1_now) &amp;lt;&amp;#61; &lt;span class=\"hljs-symbol\"&gt;VS&lt;/span&gt;:\n        v1_now &amp;#43;&amp;#61; v[i]\n        val1_now &amp;#43;&amp;#61; val[i]\n        print(num[i],end&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)\n    if v1_now &amp;#61;&amp;#61; &lt;span class=\"hljs-symbol\"&gt;VS&lt;/span&gt;:\n        break\nprint()\nprint(&lt;span class=\"hljs-string\"&gt;&amp;#34;背包体积:{}&amp;#34;&lt;/span&gt;.format(v1_now))\nprint(&lt;span class=\"hljs-string\"&gt;&amp;#34;背包价值:{}&amp;#34;&lt;/span&gt;.format(val1_now))\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["贪心算法优化背包问题", ["贪心算法——背包问题", "不是0-1背包 可以一个物品多拿几次。以下代码如何改造一下", "。", "--------------*", "改造后应该是：带4个6kg（体积）的，总共的最大利润是￥480", "-", "*---------------------------", "\n", "#各物品的体积列表", "\nv = [2,8,5,6,15,3,7]\n", "#各物品的价值列表", "\nval = [30,100,10,120,280,50,40]\n", "#各物品编号", "\nnum = [1,2,3,4,5,6,7]\n", "#各物品价格/体重", "\nv_val = []\n", "#输入背包体积", "\nVS = 25\n", "#输入物品种类数", "\nS = 7\n\n", "#计算价格与体重之比", "\n", "for", " i ", "in", " range(S):\n    v_val.append(val[i]/v[i])\n", "#排序", "\n", "for", " i ", "in", " range(S):\n    ", "for", " j ", "in", " range(i+1,S):\n        ", "if", " v_val[i] < v_val[j]:\n            v_val[i],v_val[j] = v_val[j],v_val[i]\n            v[i],v[j] = v[j],v[i]\n            val[i],val[j] = val[j],val[i]\n            num[i],num[j] = num[j],num[i]\n\n", "print", "(", "\"编号：{}\"", ".format(num))\n", "print", "(", "\"体积：{}\"", ".format(v))\n", "print", "(", "\"价值：{}\"", ".format(val))\n\n", "#不可分割物品", "\n", "#当前背包占用体积", "\nv1_now = 0\n", "#当前背包内价值", "\nval1_now = 0\n\n", "print", "(", "\"背包内加入的物品编号有：\"", ",", "end", "=", "''", ")\n", "for", " i ", "in", " range(S):\n    ", "if", " (v[i] + v1_now) <= VS:\n        v1_now +=v[i]\n        val1_now += val[i]\n        ", "print", "(num[i],", "end", "=", "''", ")\n    ", "else", ":\n        break\n", "print", "()\n", "#背包占用体积为", "\n", "print", "(", "\"背包体积:{}\"", ".format(v1_now))\n", "print", "(", "\"背包价值:{}\"", ".format(val1_now))\n\n", "\n", "改造前："]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;N&lt;/span&gt;, V &amp;#61; &lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;())\n \n&lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt; &amp;#61; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] * (V&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; _ in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;N&lt;/span&gt;):\n    v, &lt;span class=\"hljs-keyword\"&gt;w&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;())\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt; in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(V, v-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt;[&lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt;[&lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt;], &lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt;[&lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt;-v]&amp;#43;&lt;span class=\"hljs-keyword\"&gt;w&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt;[-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["python 贪心算法 0-1背包问题", ["给定n(n<=100)种物品和一个背包。物品i的重量是wi(wi<=100)，价值为vi(vi<=100)，背包的容量为C(C<=1000)。", "应如何选择装入背包中的物品，使得装入背包中物品的总价值最大? 在选择装入背包的物品时，对每种物品i只有两个选择：装入或不装入。不能将物品i装入多次，也不能只装入部分物品i。", "\n", "输入格式:", "共有n+1行输入：", "第一行为n值和c值，表示n件物品和背包容量c；", "接下来的n行，每行有两个数据，分别表示第i(1≤i≤n)件物品的重量和价值。", "\n", "输出格式:", "输出装入背包中物品的最大总价值。", "\n", "输入样例:", "在这里给出一组输入。例如：", "\n", "5 10", "2 6", "2 3", "6 5", "5 4", "4 6", "输出样例:", "在这里给出相应的输出。例如：", "\n", "15"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考一下&amp;#xff0c;可行的话 还请点击 采纳&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; MAXN 105&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; MAXW 10005&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; max(a, b) (a &amp;gt; b ? a : b)&lt;/span&gt;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m;\n&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; f[MAXW];\n\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;node&lt;/span&gt; {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; w;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; v;\n} Node;\n\nNode a[MAXN];\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;zero_one_pack&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; w, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;#61;&amp;#61; n) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (w &amp;gt;&amp;#61; a[i].w) {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;zero_one_pack&lt;/span&gt;(w - a[i].w, i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#43; a[i].v, &lt;span class=\"hljs-built_in\"&gt;zero_one_pack&lt;/span&gt;(w, i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;zero_one_pack&lt;/span&gt;(w, i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; T;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;T);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (T--) {\n        &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(f, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;sizeof&lt;/span&gt; f);\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;m, &amp;amp;n);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%lf&amp;#34;&lt;/span&gt;, &amp;amp;a[i].w, &amp;amp;a[i].v);\n            a[i].v &amp;#61; a[i].v / a[i].w;\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.2lf\\n&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;zero_one_pack&lt;/span&gt;(m, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) * m);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["关于#背包问题#的问题，如何解决？", ["大家好，有一个c语言相关的问题，想请求大家帮助。", "在for循环中两组数据单独测试没问题，一起测试就有问题", "\n", "题目", "\n", "\n", "这是我的代码", "\n", "//贪心策略-dotcpp3042-金银岛", "\n", "//策略：背包问题", "\n", "#", "include", "<stdio.h>", "\n", "void", " ", "sort", "(", "float", " weight[],", "float", " value[],", "int", " n)", ";\n", "int", " ", "main", "(", "void", ")", "\n", "{\n    ", "int", " k;", "//用于记录有多少个测试组 ", "\n    ", "scanf", "(", "\"%d\"", ",&k);\n    ", "int", " i;\n    ", "float", " count=", "0", ";", "//记录能够带走的最大价值 ", "\n    ", "for", "(i=", "0", ";i<k;i++)\n    {\n        ", "//变量定义 ", "\n        ", "int", " m,n;\n        ", "scanf", "(", "\"%d\"", ",&m);", "//最大承重", "\n        ", "scanf", "(", "\"%d\"", ",&n);", "//有n个物品", "\n        ", "float", " weight[n];", "//每一个物体的质量 ", "\n        ", "float", " value[n];", "//对应物体的价值", "\n        \n        ", "//数据获取", "\n        ", "int", " j;\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            ", "scanf", "(", "\"%f %f\"", ",&weight[j],&value[j]);\n         } \n         \n        ", "//数据处理-按照性价比(价值/质量)最大的排序", "\n        ", "sort", "(weight,value,n); \n", "//测试打印 ", "\n", "//        for(int i=0;i<n;i++)", "\n", "//        {", "\n", "//            printf(\"%f %f %f\\n\",value[i],weight[i],value[i]/weight[i]);", "\n", "//        }", "\n        ", "//数据处理", "\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            ", "if", "(weight[j]>m)\n            {\n                count+=value[j]/weight[j]*m;\n                ", "break", ";\n            }\n            ", "else", "\n            {\n                count+=value[j];\n                m-=weight[j];\n            }\n         } \n         ", "printf", "(", "\"%.2f\\n\"", ",count);\n    }\n    ", "return", " ", "0", ";\n } \n ", "void", " ", "sort", "(", "float", " weight[],", "float", " value[],", "int", " n)", "\n ", "{\n     ", "for", "(", "int", " i=", "0", ";i<n", "-1", ";i++)\n     {\n         ", "for", "(", "int", " j=i+", "1", ";j<n;j++)\n         {\n             ", "if", "(value[i]/weight[i]<value[j]/weight[j])\n             {\n                 ", "float", " temp=value[i];\n                 value[i]=value[j];\n                 value[j]=temp;\n                 \n                 temp=weight[i];\n                 weight[i]=weight[j];\n                 weight[j]=temp;\n             }\n         }\n     }\n }\n\n", "\n", "下面是两个单独测试的，一个是整体测试的", "\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#include &amp;lt;iostream&amp;gt;\nusing namespace std;\n\nint main() {\n    int n, w, m;\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; w &amp;gt;&amp;gt; m;\n\n    int dp&lt;span class=\"hljs-comment\"&gt;[n&amp;#43;1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[m&amp;#43;1]&lt;/span&gt;;\n    for (int i &amp;#61; 0; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        for (int j &amp;#61; 0; j &amp;lt;&amp;#61; m; j&amp;#43;&amp;#43;) {\n            dp&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61; 0;\n        }\n    }\n\n    for (int i &amp;#61; 1; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        for (int j &amp;#61; 1; j &amp;lt;&amp;#61; m; j&amp;#43;&amp;#43;) {\n            if (j &amp;gt;&amp;#61; w) {\n                dp&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61; max(dp&lt;span class=\"hljs-comment\"&gt;[i-1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;, dp&lt;span class=\"hljs-comment\"&gt;[i-1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j-w]&lt;/span&gt; &amp;#43; w);\n            } else {\n                dp&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61; dp&lt;span class=\"hljs-comment\"&gt;[i-1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;;\n            }\n        }\n    }\n\n    cout &amp;lt;&amp;lt; dp&lt;span class=\"hljs-comment\"&gt;[n]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[m]&lt;/span&gt; &amp;lt;&amp;lt; endl;\n\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["关于C++的背包问题，请各方神圣帮本蒟蒻看看", ["D579q. 装物品（小内存）", "\n", "时间限制：2.0s   内存限制：16.0MB   Special Judge   代码提交间隔：5分钟(现在可以提交)", "问题描述", "有  件物品，第  件物品的重量为  （整数）。", "\n", "对于给定的整数 ， 请选择一些物品，使得拼出的重量不超过 ，请问在此前提下能拼出的最大重量是多少？", "\n", "输入格式", "输入的第一行包含一个整数 ，表示物品数量。", "\n", "第二行包含  个整数 , , , ，分别为每个物品的重量。", "\n", "最后一行包含一个整数 。", "\n", "输出格式", "输出的第一行包含一个整数 ，表示答案。", "\n", "样例输入", "3", "4 4 6", "12", "Data", "样例输出", "10", "\n", "这道背包问题我一开始打算用回溯做，但会超时和错误，现在打算还是老老实实用背包做，请各方神圣帮本蒟蒻看看吧！", "急！在线蹲答案！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;能跑&amp;#xff0c;就是结果不太对&lt;br /&gt;报错可能是你输入格式的问题&amp;#xff0c;两个数要用英文逗号隔开&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/007541378166174.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;答案应该是8&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["完全背包问题求解，报错分段断层", ["带佬们，是这样的，我这个飞舞尝试了一下完全背包问题，不知道为什么不能跑", "代码如下：", "#include<stdio.h>", "#include <math.h>", "int V[1010],W[1010];", "int f[1010];", "#define max(a, b) (((a) > (b)) ? (a) : (b));", "int main()", "{", "    int n,m;", "    scanf(\"%d,%d\",&n,&m);", "    for(int i=1;i<=n;i++)", "    scanf(\"%d,%d\",&V[i],&W[i]);", "    for(int i = 1 ; i<=n ;i++)", "    {", "    for(int j = V[i] ; j<=m ;j++)", "    {", "            f[j] = max(f[j],f[j-V[i]]+W[i]);", "    }", "\n", "}\n", "printf", "(", "\"%d\"", ",f[m]);\n", "return", " ", "0", "; \n", "\n", "}", "报错说是分段断层，求带佬指点迷津。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的代码有3个问题&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;没有弄懂背包的实际含义&amp;#xff1b;&lt;/li&gt;&lt;li&gt;三重循环枚举会时间超限&amp;#xff08;3000的3次方&amp;gt;1秒最多能运行的次数&amp;#xff09;&amp;#xff1b;&lt;/li&gt;&lt;li&gt;最大数字为3000&amp;#xff0c;数组却只有1010。&lt;/li&gt;&lt;/ol&gt;\n&lt;pre&gt;&lt;code class=\"language-cpp\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; w[&lt;span class=\"hljs-number\"&gt;3010&lt;/span&gt;],v[&lt;span class=\"hljs-number\"&gt;3010&lt;/span&gt;],c[&lt;span class=\"hljs-number\"&gt;3010&lt;/span&gt;],p[&lt;span class=\"hljs-number\"&gt;3010&lt;/span&gt;],b[&lt;span class=\"hljs-number\"&gt;3010&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//数组要开大一些&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k,m,n;\n    cin&amp;gt;&amp;gt;k&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        cin&amp;gt;&amp;gt;c[i]&amp;gt;&amp;gt;v[i];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;m;i&amp;#43;&amp;#43;)\n    {\n        cin&amp;gt;&amp;gt;w[i]&amp;gt;&amp;gt;p[i];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;m;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;k;j&amp;gt;&amp;#61;w[i];j--)\n        {\n            b[j]&amp;#61;&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(b[j],b[j-w[i]]&amp;#43;p[i]);&lt;span class=\"hljs-comment\"&gt;//先处理菜&amp;#xff0c;因为菜可以买任意多个&lt;/span&gt;\n            &lt;span class=\"hljs-comment\"&gt;//背包板子&lt;/span&gt;\n        }\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ans&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;c[i];j&amp;lt;&amp;#61;k;j&amp;#43;&amp;#43;)&lt;span class=\"hljs-comment\"&gt;//处理放哪个螃蟹&lt;/span&gt;\n        {\n            ans&amp;#61;&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(ans,b[j-c[i]]&amp;#43;v[i]);&lt;span class=\"hljs-comment\"&gt;//取最大值&lt;/span&gt;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,ans);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["背包问题的加强版有点问题", ["Description", "为了做饭，出题人拿了 k 块钱，准备去买食材。出题人准备买一只螃蟹和若干蔬菜。菜场里有 n 只螃蟹，第 i只螃蟹的价格为 c_i​，美味值为 v_i，菜场里有 m 个蔬菜，第 i 个蔬菜的价格为 w_i，美味值为 p_i​，求出题人的钱能换来最大的美味值。", "Input", "第一行三个正整数 k,n,m，", "接下来 n 行，每行两个正整数 c_i​,v_i，", "接下来 m 行，每行两个正整数 w_i​,p_i，", "相邻整数均以空格分开", "Output", "一行一个整数，表示出题人的钱能换来最大的美味值", "Sample input", "23 2 2", "2 3", "3 4", "10 10", "10 10", "Sample output", "24", "Note", "all the numbers <= 3000", "Time and memory limit", "1s ，512M", "\n", "这——题（连起来还不给我发了）怎么答，貌似是一个01背包的加强版，不过我写的有点问题", "这是我写的", "\n", "#include<bits/stdc++.h>\nusing namespace std;\nint w", "[1010]", ",v", "[1010]", ",c", "[1010]", ",p", "[1010]", ",b", "[1010]", ";\nint main()\n{\n    int k,m,n;\n    cin>>k>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>c", "[i]", ">>v", "[i]", ";\n    }\n    for(int i=1;i<=m;i++)\n    {\n        cin>>w", "[i]", ">>p", "[i]", ";\n    }\n    for(int ii=1;ii<=n;ii++)\n    {\n        for(int i=1;i<=m;i++)\n        {\n            for(int j=k;j>=w", "[i]", "+c", "[ii]", ";j--)\n            {\n                b", "[j]", "=max(b", "[j]", ",b", "[j-w", "[i]", "]", "+p", "[i]", ")+v", "[ii]", ";\n            }\n        }\n    }\n    cout<<b", "[k]", ";\n}\n\n", "\n", "样例能过但其他评测点都错了", "急！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;11行 &amp;amp;w[i]&amp;#xff0c;13行 &amp;amp;v[i]&amp;#xff0c;中括号里面是i&amp;#xff0c;不是n&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["简单背包问题暴虐大一新生", ["\n", "想先求出背包可装最大价值再考虑其他方面但是输出结果不对。看了好几个小时了😭", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;scanf(&amp;#34;%d&amp;#34;,c);//背包容量&lt;br /&gt;改为scanf(&amp;#34;%d&amp;#34;,&amp;amp;c);//背包容量&lt;br /&gt;for ( i &amp;#61; 0; i &amp;lt;&amp;#61;n; i&amp;#43;&amp;#43;)&lt;br /&gt;改为&lt;br /&gt;for ( i &amp;#61; 0; i &amp;lt;n; i&amp;#43;&amp;#43;)&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["关于背包问题的动态规划", ["这个代码问题出在哪啊，无法运行出结果，运行到输入背包质量就不行了", "\n", "#include<stdio.h>", "void Knaspack(int w[],int v[],int n,int c,int m[][50]);", "int max(int x,int y);", "void Traceback(int w[],int x[],int n,int c,int m[][50]);", "int main()", "{", "    int i;", "    int n,c;", "    int w[50],v[50];//物品体积、价值", "    int m[50][50];//最优值", "    int x[50];//观察是否有物品存入", "    printf(\"输入物品数量：\");", "    scanf(\"%d\",&n);//输入物品数量", "    printf(\"输入背包容量：\");", "    scanf(\"%d\",c);//背包容量", "    printf(\"输入物品的质量\");", "    for ( i = 0; i <=n; i++)", "    {", "        scanf(\"%d\",&w[i]);", "    }", "    printf(\"输入物品的价值\");", "    for ( i = 0; i <= n; i++)", "    {", "        scanf(\"%d\",&v[i]);", "    }", "    Knaspack(w,v,n,c,m);//寻找最优解", "    Traceback(w,x,n,c,m);//输出值", "    for(i=0;i<n;i++)", "    {", "        printf(\"%d\",x[i]);", "    }", "\n", "}", "void Knaspack(int w[],int v[],int n,int c,int m[][50])", "{", "    int i,j;", "\n", "for(i=0;i<=n;i++)//初始化背包容量为0时\n{\n    m", "[i]", "[0]", "=0;\n}\nfor(i=1;i<=c;i++)//初始化0个物品时\n{\n    m", "[0]", "[i]", "=0;\n}\nfor(i=0;i<n;i++)\n{\n    for(j=1;j<=c;j++)\n    {\n        if(w", "[i]", ">j)//无法装入装\n        {\n            m", "[i]", "[j]", "=m", "[i-1]", "[j]", ";\n        }\n            \n        \n        else{//判断是否要装\n            m", "[i]", "[j]", "=max(m", "[i-1]", "[j]", ",m", "[i-1]", "[j-w", "[i]", "]", "+v", "[i]", ");\n            \n        }\n    }\n\n}\n", "\n", "}", "void Traceback(int w[],int x[],int n,int c,int m[][50])", "{", "    int i;", "    int j;", "    j=c;", "    for(i=n;i>0;i--)", "    {", "        if(m[i][j]==m[i-1][j])", "        {", "            x[i-1]=0;", "        }", "        else{", "            x[i-1]=1;", "            j=j-w[i];", "        }", "    }", "\n", "}", "\n", "int max(int x,int y)", "{", "    int l;", "    if(x>y)", "    {", "        l=x;", "    }", "    else", "    {", "        l=y;", "    }", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题主您好&amp;#xff0c;acwing上收录了这条题目&amp;#xff0c;有详解&amp;#xff0c;您可以参考下&lt;a href=\"https://www.acwing.com/solution/content/1374/\" id=\"textarea_1644738925439_1644738962559_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.acwing.com/solution/content/1374/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["背包问题能详细讲下吗？", ["有 NN 件物品和一个容量是 VV 的背包。每件物品只能使用一次。", "第 ii 件物品的体积是 vivi，价值是 wiwi。", "求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。", "输出最大价值。", "输入格式", "第一行两个整数，N，VN，V，用空格隔开，分别表示物品数量和背包容积。", "接下来有 NN 行，每行两个整数 vi,wivi,wi，用空格隔开，分别表示第 ii 件物品的体积和价值。", "输出格式", "输出一个整数，表示最大价值。", "数据范围", "0<N,V≤10000<N,V≤1000", "0<vi,wi≤1000"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于new Bing的回答&amp;#xff1a;&lt;br /&gt;在代码中&amp;#xff0c;有一个max函数的返回值是0&amp;#xff0c;应该改为返回max。修改后的代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#include &amp;lt;stdio.h&amp;gt;\n#define mn &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;\nint min(int a,int b)\n{\nint min;\nif(a&amp;lt;b) min&amp;#61;a;\nreturn min;\n}\nint max(int a,int b)\n{\nint max;\nif(a&amp;gt;b) max&amp;#61;a;\nelse max&amp;#61;b; //修改这里&amp;#xff0c;返回max值\nreturn max;\n}\nvoid &lt;span class=\"hljs-symbol\"&gt;Knapsack&lt;/span&gt;(int *v, int *w, int c, int n, int (*m)[mn])\n//v[]物品的价值&amp;#xff0c;w[]物品的重量&amp;#xff0c;c背包容量&amp;#xff0c;n物品数量&amp;#xff0c;m[i][j]是背包容量为j&amp;#xff0c;可选择物品为i,i&amp;#43;&lt;span class=\"hljs-number\"&gt;1.&lt;/span&gt;...n的最优值\n{\nint j,i;\n//先判断第n个物品能不能装入背包\nint jMax &amp;#61; min(w[n]&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,c);\n//当&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;lt;&amp;#61;j&amp;lt;&amp;#61;w[n]时&amp;#xff0c;m(n,j)&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\nfor(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j&amp;lt;&amp;#61;jMax;j&amp;#43;&amp;#43;) m[n][j]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n//当j&amp;gt;&amp;#61;w[n]时&amp;#xff0c;m(n,j)&amp;#61;v[n]\nfor(j&amp;#61;w[n]; j&amp;lt;&amp;#61;c; j&amp;#43;&amp;#43;) m[n][j] &amp;#61; v[n];\n//再从n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;往前开始判断第n个物品到第i个物品能不能装下\nfor(i&amp;#61;n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;; i&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i--)\n{\njMax &amp;#61; min(w[i]&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,c);\nfor(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j&amp;lt;&amp;#61;jMax; j&amp;#43;&amp;#43;)//背包剩余容量j&amp;lt;&amp;#61;jMax&amp;lt;c\nm[i][j] &amp;#61; m[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j];//无法装入第i个物品\nfor(j&amp;#61;w[i]; j&amp;lt;&amp;#61;c; j&amp;#43;&amp;#43;)\nm[i][j] &amp;#61; max(m[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j],m[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j-w[i]]&amp;#43;v[i]);\n}\n//判断第n个到第&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;个物品能不能装下\nm[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][c] &amp;#61; m[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;][c];\nif(c&amp;gt;&amp;#61;w[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\nm[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][c]&amp;#61;max(m[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][c],m[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;][c-w[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]]&amp;#43;v[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n}\n//x[]数组: 值为&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;表示不装入背包&amp;#xff0c;值为&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;表示装入背包\nvoid &lt;span class=\"hljs-symbol\"&gt;Traceback&lt;/span&gt;(int (*m)[mn], int *w, int c, int n, int *x)\n{\nint i;\nfor(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;lt;n; i&amp;#43;&amp;#43;)\n{\nif(m[i][c] &amp;#61;&amp;#61; m[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][c])\nx[i]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\nelse\n{\nx[i]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\nc-&amp;#61;w[i];\n}\n}\nx[n]&amp;#61;(m[n][c])?&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\nint main()\n{\nint n,c,i;\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入物品的数量n&amp;#61;&amp;#34;&lt;/span&gt;);\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入背包的容量c&amp;#61;&amp;#34;&lt;/span&gt;);\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;c);\nint w[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请依次输入各物品的重量:&amp;#34;&lt;/span&gt;);\nfor(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;w[i]);\nint v[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请依次输入各物品的价值:&amp;#34;&lt;/span&gt;);\nfor(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;v[i]);\nint m[mn][mn];\nint x[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\nint mw&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\nint mv&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n//进行查找与回溯\n&lt;span class=\"hljs-symbol\"&gt;Knapsack&lt;/span&gt;(v,w,c,n,m);\n&lt;span class=\"hljs-symbol\"&gt;Traceback&lt;/span&gt;(m,w,c,n,x);\n//输出最优序列和最优重量与最优值\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;最优装载序列为&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\nfor(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n{\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,x[i]);\nmw&amp;#61;mw&amp;#43;x[i]*w[i];\nmv&amp;#61;mv&amp;#43;x[i]*v[i];\n}\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n最大重量为&amp;#xff1a;%d\\n最大价值为&amp;#xff1a;%d\\n&amp;#34;&lt;/span&gt;,mw,mv);\nreturn &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/964928329086123.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["C语言0-1背包问题", ["为什么代码编译的时候没有报错但运行的时候只能运行一半", "\n", "#include <stdio.h>\n#define mn ", "50", "\nint min(int a,int b)\n{\n    int min;\n    if(a<b) min=a;\n    return min;\n}\nint max(int a,int b)\n{\n    int max;\n    if(a>b) max=a;\n    return ", "0", ";\n}\nvoid ", "Knapsack", "(int *v, int *w, int c, int n, int (*m)[mn])\n//v[]物品的价值，w[]物品的重量，c背包容量，n物品数量，m[i][j]是背包容量为j，可选择物品为i,i+", "1.", "...n的最优值\n{\n    int j,i;\n//先判断第n个物品能不能装入背包\n  int jMax = min(w[n]", "-1", ",c);\n//当", "0", "<=j<=w[n]时，m(n,j)=", "0", "\n  for(j=", "0", "; j<=jMax;j++)  m[n][j]=", "0", ";\n//当j>=w[n]时，m(n,j)=v[n]\n  for(j=w[n]; j<=c; j++)  m[n][j] = v[n];\n//再从n", "-1", "往前开始判断第n个物品到第i个物品能不能装下\n  for(i=n", "-1", "; i>", "1", "; i--)\n  {    jMax = min(w[i]", "-1", ",c);\n    for(j=", "0", "; j<=jMax; j++)//背包剩余容量j<=jMax<c\n        m[i][j] = m[i+", "1", "][j];//无法装入第i个物品\n    for(j=w[i]; j<=c; j++)\n        m[i][j] = max(m[i+", "1", "][j],m[i+", "1", "][j-w[i]]+v[i]);\n  }\n  //判断第n个到第", "1", "个物品能不能装下\n  m[", "1", "][c] = m[", "2", "][c];\n  if(c>=w[", "1", "])\n    m[", "1", "][c]=max(m[", "1", "][c],m[", "2", "][c-w[", "1", "]]+v[", "1", "]);\n  }\n//x[]数组: 值为", "0", "表示不装入背包，值为", "1", "表示装入背包\nvoid ", "Traceback", "(int (*m)[mn], int *w, int c, int n, int *x)\n{\n    int i;\n    for(i=", "1", "; i<n; i++)\n    {\n        if(m[i][c] == m[i+", "1", "][c])\n            x[i]=", "0", ";\n        else\n        {\n            x[i]=", "1", ";\n            c-=w[i];\n        }\n    }\n    x[n]=(m[n][c])?", "1", ":", "0", ";\n}\nint main()\n{\n    int n,c,i;\n    printf(", "\"请输入物品的数量n=\"", ");\n    scanf(", "\"%d\"", ",&n);\n    printf(", "\"请输入背包的容量c=\"", ");\n    scanf(", "\"%d\"", ",&c);\n    int w[", "100", "];\n    printf(", "\"请依次输入各物品的重量:\"", ");\n    for(i=", "1", ";i<=n;i++)\n        scanf(", "\"%d\"", ",w[i]);\n    int v[", "100", "];\n    printf(", "\"请依次输入各物品的价值:\"", ");\n    for(i=", "1", ";i<=n;i++)\n        scanf(", "\"%d\"", ",&v[i]);\n    int m[mn][mn];\n    int x[", "100", "];\n    int mw=", "0", ";\n    int mv=", "0", ";\n    //进行查找与回溯\n    ", "Knapsack", "(v,w,c,n,m);\n    ", "Traceback", "(m,w,c,n,x);\n    //输出最优序列和最优重量与最优值\n    printf(", "\"最优装载序列为：\\n\"", ");\n    for(i=", "1", ";i<=n;i++)\n    {\n        printf(", "\"&d\"", ",x[i]);\n        mw=mw+x[i]*w[i];\n        mv=mv+x[i]*v[i];\n    }\n    printf(", "\"最大重量为：%d\\n最大价值为：%d\\n\"", ",mw,mv);\n    return ", "0", ";\n}\n\n", "\n", "运行结果", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这就是钱币和邮票的问题嘛&lt;br /&gt;面值10,5,2,1几种钱币&amp;#xff0c;你要用来买东西&amp;#xff0c;那就要遍历然后去匹配啊&amp;#xff0c;不能用贪婪算法的&lt;br /&gt;一个价值11块的东西就是要10&amp;#43;1&amp;#xff0c;你用10&amp;#43;5无论如何凑不出11来&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["c++的背包问题的变形", ["我没用背包的写法，我是想把每个宝石价格从大到小排列然后，用每个食物减去这个宝石价格能最后能0的就输出，排查过程就是先for一次，（食物比宝石价格高的才减）从第一个开始减减去第一个，然后减第二个依次往下到所有宝石结束。如果第一轮不行，然后就从第二个开始开始减，同理然后减第三个依次往下", "#include<bits/stdc++.h>", "using namespace std;", "int main()", "{", "    int t;", "    scanf(\"%d\",&t);", "\n", "for", "(", "int", " i=", "1", ";i<=t;i++)\n{\n    ", "int", " m[", "1000", "];\n    ", "int", " s[", "1000", "];\n    \n    ", "int", " a,b;\n    scanf(", "\"%d\"", ",&a);\n    scanf(", "\"%d\"", ",&b);\n    ", "//", "马丁 \n    ", "for", "(", "int", " ", "q", "=", "1", ";", "q<=a;q++)\n    {\n        \n        int c;\n        scanf(\"%d\",&c);\n        m[q]=c;\n        \n    }\n    //食物价格 \n    for(int w=1;w<=b;w++)\n    {\n      \n      int d;\n      scanf(\"%d\",&d);\n      s[w]=d;\n          \n    }\n    \n    \n    sort(m+1,m+a+1);\n    reverse(m+1,m+a+1);\n\n    \n    for(int e=1;e<=b;e++)\n    {\n        int flag=0;\n        int jk=s[e];\n        \n        for(int f=1;f<=a;f++)\n        {   \n             s[e]=jk;\n             \n               if(s[e]>", "=", "m[f]", ")\n            { \n              \n             s[e]=s[e]-", "m[f]", ";\n            ", "//prin", "tf(", "\"%d\\n\"", ",s[e]);\n            ", "if", "(s[e]==", "0", "){flag=", "1", ";", "break", ";}\n            \n            }  \n             \n             \n             ", "for", "(", "int", " g=f+", "1", ";g<=a;g++)\n             {\n                \n                ", "if", "(s[e]>", "m[g]", "){s[e]=s[e]-", "m[g]", ";}\n                ", "else", " ", "if", "(s[e]==", "m[g]", "){s[e]=s[e]-", "m[g]", ";}\n                 //", "printf", "(", "\"%d\\n\"", ",s[e]);\n                ", "if", "(s[e]==", "0", "){flag=", "1", ";", "break", ";}\n                \n             }\n            \n            ", "if", "(s[e]==", "0", "){", "break", ";}\n             \n          }\n    \n        ", "if", "(flag==", "1", "){", "printf", "(", "\"yes\\n\"", ");}\n        ", "else", "{", "printf", "(", "\"no\\n\"", ");} \n\n    }\n}\n", "\n", "}", "现在自己测了很多数据都对但是wa，我想知道问题出现在哪"]], "Tag": "算法设计"}
{"Answer": "不知道你这个问题是否已经解决, 如果还没有解决的话: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;你可以参考下这个问题的回答, 看看是否对你有帮助, 链接: &lt;a href=\"https://ask.csdn.net/questions/335034?utm_source&amp;#61;csdn_ai_ada_ask_robot\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;https://ask.csdn.net/questions/335034&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;这篇博客你也可以参考下&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/a553455/article/details/98943333?utm_source&amp;#61;csdn_ai_ada_ask_robot\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;C&amp;#43;&amp;#43; 基类中静态成员初始化问题、基类头文件中定义类外变量重定义问题的解决过程&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;除此之外, 这篇博客: &lt;a href=\"https://blog.csdn.net/henry594xiaoli/article/details/123820453?utm_source&amp;#61;csdn_ai_ada_ask_robot\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;C&amp;#43;&amp;#43;实现单链表的基本运算&lt;/font&gt;&lt;/a&gt;中的 &lt;strong&gt;头节点不包含数据&amp;#xff0c;具有指引作用&amp;#xff0c;头节点的下一个结点才开始保存数据。&lt;/strong&gt; 部分也许能够解决你的问题, 你可以仔细阅读以下内容或者直接跳转源博客中阅读: &lt;br /&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;void CreateListR(LinkList *&amp;amp;L,ElemType a[],int n)\n{\n\tLinkList *s,*r;int i;\n\tL&amp;#61;new LinkList;  //产生一个新的头结点\n\tr&amp;#61;L;  //令r指针指向终端结点&amp;#xff0c;刚开始的时候指向头结点\n\tfor(i&amp;#61;0;i&amp;lt;n;i&amp;#43;&amp;#43;)\n\t{\n\t\ts&amp;#61;new LinkList;\n\t\ts-&amp;gt;data&amp;#61;a[i];\n\t\tr-&amp;gt;next&amp;#61;s;  //将s插入r的后面\n\t\tr&amp;#61;s;     //r指针指向终端结点\n\t}\n\tr-&amp;gt;next&amp;#61;NULL;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;如果你已经解决了该问题, 非常希望你能够分享一下解决方案, 写成博客, 将相关链接放在评论区, 以帮助更多的人 ^-^", "Konwledge_Point": "背包问题", "Question": ["c++ 背包问题 小内存", ["帮本蒟蒻看看吧", "\n", "#include <iostream>", "\n", "#include <vector>", "\n\n", "using", " namespace std;\n\n", "int", " main() {\n    ", "int", " n, W;\n    cin >> n;\n\n    vector<", "int", "> w(n);\n    ", "for", " (", "int", " i = ", "0", "; i < n; i++) {\n        cin >> w[i];\n    }\n\n    cin >> W;\n\n    vector<vector<", "int", "> > ", "table", "(n+", "1", ", vector<", "int", ">(W+", "1", ", ", "0", "));\n\n    ", "for", " (", "int", " i = ", "1", "; i <= n; i++) {\n        ", "for", " (", "int", " j = ", "1", "; j <= W; j++) {\n            ", "if", " (w[i", "-1", "] > j) {\n                ", "table", "[i][j] = ", "table", "[i", "-1", "][j];\n            } ", "else", " {\n                ", "table", "[i][j] = max(w[i", "-1", "] + ", "table", "[i", "-1", "][j-w[i", "-1", "]], ", "table", "[i", "-1", "][j]);\n            }\n        }\n    }\n\n    ", "int", " max_weight = ", "table", "[n][W];\n    cout << max_weight << endl;\n\n    vector<", "int", "> items;\n    ", "int", " i = n, j = W;\n    ", "while", " (i > ", "0", " && j > ", "0", ") {\n        ", "if", " (", "table", "[i][j] == ", "table", "[i", "-1", "][j]) {\n            i", "--;", "\n        } ", "else", " {\n            items.push_back(i);\n            j -= w[i", "-1", "];\n            i", "--;", "\n        }\n    }\n\n    ", "int", " num_items = items.size();\n    cout << num_items << endl;\n\n    ", "for", " (", "int", " i = num_items", "-1", "; i >= ", "0", "; i", "--) {", "\n        cout << items[i] << \" \";\n    }\n    cout << endl;\n\n    ", "return", " ", "0", ";\n}\n", "\n", "请大家们提提修改意见，主要是内存超限，帮我看看吧！ "]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/lyhvoyage/article/details/17041907", "Konwledge_Point": "背包问题", "Question": ["      洗衣服的背包问题        ", ["Description", "\nDearboy was so busy recently that now he has piles of clothes to wash. Luckily, he has a beautiful and hard-working girlfriend to help him. The clothes are in varieties of colors but each piece of them can be seen as of only one color. In order to prevent the clothes from getting dyed in mixed colors, Dearboy and his girlfriend have to finish washing all clothes of one color before going on to those of another color.", "\nFrom experience Dearboy knows how long each piece of clothes takes one person to wash. Each piece will be washed by either Dearboy or his girlfriend but not both of them. The couple can wash two pieces simultaneously. What is the shortest possible time they need to finish the job?", "\nInput", "\nThe input contains several test cases. Each test case begins with a line of two positive integers M and N (M < 10, N < 100), which are the numbers of colors and of clothes. The next line contains M strings which are not longer than 10 characters and do not contain spaces, which the names of the colors. Then follow N lines describing the clothes. Each of these lines contains the time to wash some piece of the clothes (less than 1,000) and its color. Two zeroes follow the last test case.", "\nOutput", "\nFor each test case output on a separate line the time the couple needs for washing.", "\nSample Input", "\n3 4", "\nred blue yellow", "\n2 red", "\n3 blue", "\n4 blue", "\n6 red", "\n0 0", "\nSample Output", "\n10"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的代码有2个问题&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;数组没必要开那么大&amp;#xff0c;用vector存储即可。&lt;/li&gt;&lt;li&gt;存储状态的数组定义&amp;#xff0c;以及状态转移方程是错的。&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;按你的思路改写的&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; argc, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t, n, W;\n    cin &amp;gt;&amp;gt; t; &lt;span class=\"hljs-comment\"&gt;// 输入测试用例数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (t-- &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; W; &lt;span class=\"hljs-comment\"&gt;// 输入物品数量n、背包&amp;#xff08;剩余&amp;#xff09;重量W&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;assert&lt;/span&gt;(n &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;assert&lt;/span&gt;(W &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n        \n        &lt;span class=\"hljs-comment\"&gt;// 输入n个物品重量、价值&lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; &lt;span class=\"hljs-title\"&gt;v&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n)&lt;/span&gt;, &lt;span class=\"hljs-title\"&gt;w&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n)&lt;/span&gt;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; &amp;#43;&amp;#43;i)\n        {\n            cin &amp;gt;&amp;gt; w[i] &amp;gt;&amp;gt; v[i];\n        }\n\n        vector&amp;lt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; &amp;gt; &lt;span class=\"hljs-built_in\"&gt;c&lt;/span&gt;(n &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;(W &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)); &lt;span class=\"hljs-comment\"&gt;// 全部初始化为0&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;// c[i][j] 表示将前i个物品&amp;#xff0c;放入背包剩余重量为j&amp;#xff0c;取得的最大价值&lt;/span&gt;\n\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; &amp;#43;&amp;#43;i)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; W; &amp;#43;&amp;#43;j)\n            {\n                &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; idx &amp;#61; i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (j &amp;lt; w[idx]) &lt;span class=\"hljs-comment\"&gt;// 背包剩余容量不足以放入第i个物品&amp;#xff0c;只有一种选择&amp;#xff0c;价值不变&lt;/span&gt;\n                {\n                    c[i][j] &amp;#61; c[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j];\n                }\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                {\n                    &lt;span class=\"hljs-comment\"&gt;// 剩余重量足够时&amp;#xff0c;有两种选择&amp;#xff0c;选价值高者&lt;/span&gt;\n                    c[i][j] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(c[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j], c[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j - w[idx]] &amp;#43; v[idx]);\n                }\n            }\n        }\n        cout &amp;lt;&amp;lt; c[n][W] &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;    \n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["P1314 01背包问题II", ["问题遇到的现象和发生背景", "\n", "\n", "问题相关代码，请勿粘贴截图", "\n", "#", "include", "<bits/stdc++.h>", "\n", "using", " ", "namespace", " std;\n", "int", " w[", "100001", "],v[", "100001", "],dp[", "100001", "];\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " t,n,m;\n    cin>>t;\n    ", "while", "(t--)\n    {\n        ", "memset", "(dp,", "0", ",", "sizeof", "(dp));\n        cin>>n>>m;\n        ", "for", "(", "int", " i=", "1", ";i<=n;i++)\n        {\n            cin>>w[i]>>v[i];\n        }\n        ", "for", "(", "int", " i=", "1", ";i<=n;i++)\n        {\n            ", "for", "(", "int", " j=m;j>=w[i];j--)\n            {\n                dp[j]=", "max", "(dp[j],dp[j-w[i]]+v[i]);\n            }\n        }\n        cout<<dp[m]<<endl;\n    }\n}\n", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "动态规划", "\n", "我想要达到的结果", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的第二层循环里面写的for (int j &amp;#61; 1; j &amp;lt;&amp;#61; m; i&amp;#43;&amp;#43;)     i&amp;#43;&amp;#43;&amp;#xff0c; 这里是j&amp;#43;&amp;#43;呀。    &amp;#xff08;有用请点采纳&amp;#xff09;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["01背包问题的代码不能输出", ["\n#include <iostream>\n#include <cmath>\n#define N 1005\n\nusing namespace std;\n\nint n, m;\nint f", "[N]", "[N]", ";\nint v", "[N]", ", w", "[N]", ";\n\nint main()\n{\n\n    cin >> n >> m;\n\n    for (int i = 1; i <= n ; i++)\n    {\n        cin >> v", "[i]", " >> w", "[i]", ";\n    }\n\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= m; j++)\n        {\n              if(j<v", "[i]", ")\n                f", "[i]", "[j]", " = f", "[i-1]", "[j]", ";\n              else \n            {\n                f", "[i]", "[j]", " = max(f", "[i-1]", "[j]", ",f", "[i - 1]", "[j-v", "[i]", "]", " + w", "[i]", ");\n            }\n        }\n    }\n\n    cout << f", "[n]", "[m]", " << endl;\n    \n    return 0;\n}\n", "\n", "这段代码我照着视频敲的，能正常输出，但我下面自己敲了一个一模一样的，不能输出。", "\n", "#include <iostream>\n#include <cmath>\n\n#define NUM 1005\nusing namespace std;\nint n, m;\nint v", "[NUM]", ", w", "[NUM]", ";\nint dp", "[NUM]", "[NUM]", ";\n\nint main() {\n\n\n    cin >> n >> m;\n    for (int i = 1; i <= n; i++) {\n        cin >> v", "[i]", " >> w", "[i]", ";\n    }\n\n    for (int i = 1; i <= n; i++) {\n\n        for (int j = 1; j <= m; i++) {\n\n            if (j < v", "[i]", ")\n                dp", "[i]", "[j]", " = dp", "[i - 1]", "[j]", ";\n            else {\n                dp", "[i]", "[j]", " = max(dp", "[i - 1]", "[j]", ", dp", "[i - 1]", "[j - v", "[i]", "]", " + w", "[i]", ");\n            }\n        }\n    }\n    cout << dp", "[n]", "[m]", " << endl;\n\n    return 0;\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; t,m,w,dp2[&lt;span class=\"hljs-number\"&gt;100005&lt;/span&gt;],tm1[&lt;span class=\"hljs-number\"&gt;100001&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;},o;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;truncsqrt&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; p)&lt;/span&gt;&lt;/span&gt;{&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//筛法求素数&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&amp;#61;p;i&amp;#43;&amp;#43;) \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;j&amp;lt;&amp;#61;p/i;j&amp;#43;&amp;#43;) tm1[i*j]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; p;\n    &lt;span class=\"hljs-built_in\"&gt;truncsqrt&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;201&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//打一个质数表&amp;#xff0c;质数为0&amp;#xff0c;非质数为1&lt;/span&gt;\n    tm1[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//1不是质数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(cin&amp;gt;&amp;gt;p){&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//循环数&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(dp2,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(dp2));&lt;span class=\"hljs-comment\"&gt;//记得清零&lt;/span&gt;\n        dp2[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&amp;#61;p;i&amp;#43;&amp;#43;){\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(tm1[i]&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;i;j&amp;lt;&amp;#61;p;j&amp;#43;&amp;#43;){\n                    dp2[j]&amp;#61;dp2[j-i]&amp;#43;dp2[j];\n                }\n            }\n        cout&amp;lt;&amp;lt;dp2[p]&amp;lt;&amp;lt;endl;&lt;span class=\"hljs-comment\"&gt;//直接输出即可&lt;/span&gt;\n    }\n    \n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["背包问题  洛谷 [AHOI2001]质数和分解", ["题目要求： 任何大于 1 的自然数 N，都可以写成若干个大于等于2且小于等于 N 的质数之和表达式(包括只有一个数构成的和表达式的情况)，并且可能有不止一种质数和的形式。例如9 的质数和表达式就有四种本质不同的形式：9 = 2+5+2 = 2+3+2+2 = 3+3+3 = 2+7 。 这里所谓两个本质相同的表达式是指可以通过交换其中一个表达式中参加和运算的各个数的位置而直接得到另一个表达式。 试编程求解自然数 N 可以写成多少种本质不同的质数和表达式。  输入格式 读入一个自然数 N , 2≤N≤1070。  输出格式 依次输出每一个自然数 N 的本质不同的质数和表达式的数目", "\n", "#", "include", "<bits/stdc++.h>", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<cstring>", "\n", "using", " ", "namespace", " std;\n", "int", " n,pr[", "20000", "],f[", "20000", "],a,flag;\n", "void", " ", "prime", "(", "int", " nn)", "{\n    ", "for", " (", "int", " i=", "2", ";i<=", "2075", ";i++){\n        flag=", "0", ";\n        ", "for", " (", "int", " j=", "2", ";j<=", "sqrt", "(i);j++){\n            ", "if", "(i%j==", "0", ")\n                flag=", "1", ";\n        }\n        ", "if", "(flag==", "0", "){\n            a+=", "1", ";\n            pr[a]=i;\n        }\n    }\n}\n", "int", " ", "main", "()", "\n", "{\n    cin>>n;\n    ", "prime", "(n);\n    f[", "0", "]=", "1", ";\n    ", "for", "(", "int", " i=", "1", ";i<=a;++i){\n        ", "//cout<<pr[i]<<endl;", "\n        ", "for", "(", "int", " j=pr[i];j<=n;++j)\n        f[j]+=f[j-pr[i]];\n    } \n    cout<<f[n]<<endl;\n    \n       ", "return", " ", "0", "; \n}\n\n", "\n", "代码有些问题哪位好人能帮忙解答一下"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;引用chatGPT作答&amp;#xff0c;这是一个动态规划问题&amp;#xff0c;可以使用二维数组或者滚动数组进行实现。但是由于物品数目较多&amp;#xff0c;使用二维数组空间复杂度过高&amp;#xff0c;因此使用滚动数组的方式&amp;#xff0c;将二维数组转化为一维数组。具体来说&amp;#xff0c;定义$f[j]$表示恰好装满容量为$j$的背包可以得到的最大价值&amp;#xff0c;初始化为$0$&amp;#xff0c;然后遍历每一个物品&amp;#xff0c;对于每一个物品&amp;#xff0c;都考虑是否选择该物品&amp;#xff0c;如果选择该物品&amp;#xff0c;则状态转移方程为$f[j]&amp;#61;max(f[j],f[j-c[i]]&amp;#43;w[i])$。如果不选择该物品&amp;#xff0c;则状态转移方程为$f[j]&amp;#61;f[j]$。在遍历完所有的物品之后&amp;#xff0c;如果$f[v]&amp;lt;0$&amp;#xff0c;则输出&amp;#34;NO&amp;#34;&amp;#xff0c;否则输出$f[v]$。&lt;/p&gt;\n&lt;p&gt;以下是对于给出代码的一些补充说明&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;对于$f$数组的初始化&amp;#xff0c;不能将其初始化为$0$&amp;#xff0c;因为物品的价值可以为负数&amp;#xff0c;如果将$f$数组初始化为$0$&amp;#xff0c;则有可能会将一个价值为负数的物品加入到背包中&amp;#xff0c;这是不符合题目要求的。因此&amp;#xff0c;需要将$f$数组初始化为一个极小值&amp;#xff0c;例如$-10^7$。&lt;/p&gt;\n&lt;p&gt;遍历$j$的时候&amp;#xff0c;应该从$0$开始&amp;#xff0c;这样才能保证背包能够恰好装满。&lt;/p&gt;\n&lt;p&gt;遍历$i$的时候&amp;#xff0c;应该从$1$开始&amp;#xff0c;因为第$0$个物品没有体积和价值&amp;#xff0c;没有任何意义。&lt;/p&gt;\n&lt;p&gt;对于状态转移方程$f[j]&amp;#61;max(f[j],f[j-c[i]]&amp;#43;w[i])$&amp;#xff0c;应该首先判断$j&amp;gt;&amp;#61;c[i]$&amp;#xff0c;只有当$j&amp;gt;&amp;#61;c[i]$的时候才能使用状态转移方程&amp;#xff0c;否则会访问$f[-1]$&amp;#xff0c;导致运行错误。&lt;/p&gt;\n&lt;p&gt;输出结果的时候&amp;#xff0c;应该先判断$f[v]$是否小于$0$&amp;#xff0c;如果小于$0$&amp;#xff0c;则输出&amp;#34;NO&amp;#34;&amp;#xff0c;否则输出$f[v]$。&lt;/p&gt;\n&lt;p&gt;以下是修改过的代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;  &lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;  &lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;  \n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; MAXN &amp;#61; &lt;span class=\"hljs-number\"&gt;2010&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; MAXV &amp;#61; &lt;span class=\"hljs-number\"&gt;50010&lt;/span&gt;;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f[MAXV];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c[MAXN], w[MAXN];\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; test;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;test);  \n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (test--) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m, v;\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;m, &amp;amp;v);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; m; &amp;#43;&amp;#43;i) {\n            &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;c[i], &amp;amp;w[i]);\n        }\n\n        &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(f, &lt;span class=\"hljs-number\"&gt;-0x3f&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(f));\n        f[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; m; &amp;#43;&amp;#43;i) {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; c[i]; j &amp;lt;&amp;#61; v; &amp;#43;&amp;#43;j) {\n                f[j] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(f[j], f[j - c[i]] &amp;#43; w[i]);\n            }\n        }\n\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (f[v] &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;NO\\n&amp;#34;&lt;/span&gt;);\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, f[v]);\n        }\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["C++完全背包问题，oj平台答案对50%", ["题目描述", "完全背包定义有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的体积是c，价值是w。求解将哪些物品装入背包可使这些物品的体积总和不超过背包容量，且价值总和最大。本题要求是背包恰好装满背包时，求出最大价值总和是多少。如果不能恰好装满背包，输出NO", "输入", "第一行： N 表示有多少组测试数据（N<7）。", "接下来每组测试数据的第一行有两个整数M，V。 M表示物品种类的数目，V表示背包的总容量。(0<M<=2000，0<V<=50000)", "接下来的M行每行有两个整数c，w分别表示每种物品的重量和价值(0<c<100000，0<w<100000)", "输出", "对应每组测试数据输出结果（如果能恰好装满背包，输出装满背包时背包内物品的最大价值总和。 如果不能恰好装满背包，输出NO）", "样例输入", "2", "1 5", "2 2", "2 5", "2 2", "5 1", "样例输出", "NO", "1", "\n", "\n", "#", "include", "<iostream>", "  ", "\n", "#", "include", "<stdio.h>", "  ", "\n", "#", "include", "<string>", "  ", "\n", "#", "include", "<cstring>", "  ", "\n        ", "using", " ", "namespace", " std;  \n    ", "int", " f[", "50010", "], c[", "2010", "], w[", "2010", "];  \n    ", "int", " ", "main", "()", "  \n    ", "{  \n        ", "int", " test, m, v, i, j;  \n        ", "scanf", "(", "\"%d\"", ", &test);  \n        ", "while", " (test--)  \n        {  \n            ", "memset", "(f, ", "-10000000", ", ", "sizeof", "(f)); \n            f[", "0", "] = ", "0", ";  \n            ", "scanf", "(", "\"%d%d\"", ", &m, &v);  \n            ", "for", " (i = ", "1", "; i <= m; ++i)  \n                ", "scanf", "(", "\"%d%d\"", ", &c[i], &w[i]);  \n            ", "for", " (i = ", "1", "; i <= m; ++i)  \n            ", "for", " (j = ", "0", "; j <= v; ++j)\n            ", "if", " (j >= c[i])  \n                f[j] = f[j]>(f[j - c[i]] + w[i]) ? f[j] : f[j - c[i]] + w[i]; \n            ", "if", " (f[v]<", "0", ") \n                ", "printf", "(", "\"NO\\n\"", ");  \n            ", "else", "  \n                ", "printf", "(", "\"%d\\n\"", ", f[v]);  \n        }  \n    }  \n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;cout&amp;lt;&amp;lt;dp[m][n]&amp;lt;&amp;lt;endl;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/292537340736128.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["01背包问题运行结果不对，哪里错了", ["#include", "using namespace std;", "const int MAXN=1005;", "int v[MAXN];//物品体积", "int w[MAXN];//物品价值", "int dp[MAXN][MAXN];//最大价值", "void main(){", "    int m,n,i,j;", "    cin>>m>>n;", "    for(i=1;i<=m;i++){", "        cin>>v[i]>>w[i];", "\n", "}for(j=0;j<=n;j++){\ndp", "[0]", "[j]", "=0;}//初始化物品为0的价值为0\nfor(i=1;i<=m;i++){\n    for(j=0;j<=n;j++){\n    if(v", "[i]", ">j){\n        dp", "[i]", "[j]", "=dp", "[i-1]", "[j]", ";//放不了第i个物品\n    }else\n    dp", "[i]", "[j]", "=max(dp", "[i-1]", "[j]", ",dp", "[i-1]", "[j-v", "[i]", "]", "+w", "[i]", ");//放得了第i个物品\n}}\ncout<<dp", "[i]", "[j]", "<<endl;\n", "\n", "}", "int max(int a,int b){", "    if(a>b)", "    return a;", "    else return b;", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[m].pw&amp;gt;a[m&amp;#43;1].pw)\n            {\n                int &lt;span class=\"hljs-attribute\"&gt;t&lt;/span&gt;&amp;#61;a[m].&lt;span class=\"hljs-literal\"&gt;No&lt;/span&gt;;\n                a[m].&lt;span class=\"hljs-attribute\"&gt;No&lt;/span&gt;&amp;#61;a[m&amp;#43;1].&lt;span class=\"hljs-literal\"&gt;No&lt;/span&gt;;\n                a[m&amp;#43;1].&lt;span class=\"hljs-attribute\"&gt;No&lt;/span&gt;&amp;#61;t;\n            }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;只交换No不对吧&amp;#xff0c; 应该整个结构交换&lt;br /&gt;第40行代码不完整啊&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["用贪心算法解决01背包问题输出结果错误", ["\n", "-", "\n", "\n", "#", "include", "<stdio.h>", "\n", "struct", " ", "good", "\n{\n    ", "int", " No;\n    ", "///物品编号", "\n    ", "float", " weight;\n    ", "//物品重量", "\n    ", "float", " value;\n    ", "//物品价值", "\n    ", "float", " pw;\n    ", "//物品单位重量的价值； pw=value/weight;", "\n}\n;\n", "int", " ", "main", "()", "{\n    ", "int", " n;\n    ", "int", " c;\n    ", "float", " we=", "0", ";\n    ", "float", " va=", "0", ";\n    ", "scanf", "(", "\"%d%d\"", ",&n,&c);\n    ", "struct", " ", "good", " a[n];\n    ", "for", "(", "int", " i = ", "0", ";i < n;i++) {\n        ", "scanf", "(", "\"%f %f\"", ",&a[i].weight,&a[i].value);\n        a[i].pw=a[i].value/a[i].weight;\n        a[i].No=i;\n    } \n    ", "//排序", "\n    ", "for", "(", "int", " i = ", "0", ";i < n;i++) {\n        ", "for", "(", "int", " m = ", "0", ";m < n-i", "-1", ";m++) {\n            ", "if", "(a[m].pw>a[m+", "1", "].pw)\n            {\n                ", "int", " t=a[m].No;\n                a[m].No=a[m+", "1", "].No;\n                a[m+", "1", "].No=t;\n            }\n        }\n    }\n    ", "//加起来", "\n    ", "for", "(", "int", " i = ", "0", ";i < n;i++) {\n    ", "for", "(", "int", " m=", "0", ";m<n;m++){\n        ", "if", "(a[m].No==n", "-1", "-i){\n        we+=a[m].weight;\n        va+=a[m].value;\n        }\n        ", "if", "(we>c)\n        {\n            we-=a[m].weight;\n            va-=a[m].value;\n            ", "goto", " out;", "//脱离循环", "\n        }\n    }\n    }\n    out:;\n    ", "printf", "(", "\"%f %f\"", ",we,va);\n    ", "return", " ", "0", ";\n}\n\n", "\n"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/hellobabygogo3/article/details/8043584\r\nhttp://www.cnblogs.com/xinsheng/archive/2013/12/04/3458362.html", "Konwledge_Point": "背包问题", "Question": ["多重背包的可行性问题            ", ["Description", "\n\n", "People in Silverland use coins.They have coins of value A1,A2,A3...An Silverland dollar.One day Tony opened his money-box and found there were some coins.He decided to buy a very nice watch in a nearby shop. He wanted to pay the exact price(without change) and he known the price would not more than m.But he didn't know the exact price of the watch.", "\nYou are to write a program which reads n,m,A1,A2,A3...An and C1,C2,C3...Cn corresponding to the number of Tony's coins of value A1,A2,A3...An then calculate how many prices(form 1 to m) Tony can pay use these coins.", "\nInput", "\n\n", "The input contains several test cases. The first line of each test case contains two integers n(1<=n<=100),m(m<=100000).The second line contains 2n integers, denoting A1,A2,A3...An,C1,C2,C3...Cn (1<=Ai<=100000,1<=Ci<=1000). The last test case is followed by two zeros.", "\nOutput", "\n\n", "For each test case output the answer on a single line.", "\nSample Input", "\n\n", "3 10", "\n1 2 4 2 1 1", "\n2 5", "\n1 4 2 1", "\n0 0", "\nSample Output", "\n\n", "8", "\n4"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/libin56842/article/details/9473019", "Konwledge_Point": "背包问题", "Question": ["poj 1276 背包问题 编译错误 求大神看看 英汉题意如下", ["Description", "\n\n", "A Bank plans to install a machine for cash withdrawal. The machine is able to deliver appropriate @ bills for a requested cash amount. The machine uses exactly N distinct bill denominations, say Dk, k=1,N, and for each denomination Dk the machine has a supply of nk bills. For example, ", "\n\n", "N=3, n1=10, D1=100, n2=4, D2=50, n3=5, D3=10 ", "\n\n", "means the machine has a supply of 10 bills of @100 each, 4 bills of @50 each, and 5 bills of @10 each. ", "\n\n", "Call cash the requested amount of cash the machine should deliver and write a program that computes the maximum amount of cash less than or equal to cash that can be effectively delivered according to the available bill supply of the machine. ", "\n\n", "Notes: ", "\n@ is the symbol of the currency delivered by the machine. For instance, @ may stand for dollar, euro, pound etc. ", "\nInput", "\n\n", "The program input is from standard input. Each data set in the input stands for a particular transaction and has the format: ", "\n\n", "cash N n1 D1 n2 D2 ... nN DN ", "\n\n", "where 0 <= cash <= 100000 is the amount of cash requested, 0 <=N <= 10 is the number of bill denominations and 0 <= nk <= 1000 is the number of available bills for the Dk denomination, 1 <= Dk <= 1000, k=1,N. White spaces can occur freely between the numbers in the input. The input data are correct. ", "\nOutput", "\n\n", "For each set of data the program prints the result to the standard output on a separate line as shown in the examples below. ", "\nSample Input", "\n\n", "735 3  4 125  6 5  3 350", "\n633 4  500 30  6 100  1 5  0 1", "\n735 0", "\n0 3  10 100  10 50  10 10", "\nSample Output", "\n\n", "735", "\n630", "\n0", "\n0", "\n题意：有现今cash，和n种钱币，每种钱币有ni个，价值为di，求各种钱币组成的不超过cash的最大钱数.......", "\n\n", " #include <iostream>\n#include <vector>\n#include <cstring>\n\nusing namespace std;\n\nint imax(int a,int b)\n{\n    return(a>b?a:b);\n}\n\nint main()\n{\n    int cash;\n    int nu;\n    while(cin>>cash>>nu)\n    {\n        vector <int> l;\n        l.push_back(0);\n        int num=0;\n        int n;\n        int d;\n        int i;\n        int j;\n\n        for(i=1;i<nu+1;++i)\n        {\n            cin>>n>>d;\n            num+=n;\n            for(j=0;j<n;++j)\n            {\n                l.push_back(d);\n            }\n        }\n        int f[num+1][cash+1];\n        memset(f,0,sizeof(f));\n        i=0;\n        j=0;\n\n        for(int i=1;i<num+1;++i)\n        {\n            for(int j=cash;j>=l[i];--j)\n            {\n                f[i][j]=imax(f[i-1][j-l[i]]+l[i],f[i-1][j]);\n            }\n        }\n        cout<<f[num][cash]<<endl;\n    }\n\n    return 0;\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你原本开辟的空间是m 、n大小下标从0开始&amp;#xff0c;但是循环判断i&amp;#xff0c;j怎么能等于n m 了&amp;#xff0c;这样越界了&amp;#xff0c;把两个循环的等于号去掉&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["c语言，完全背包问题，动态建立数组，发生内存冲突", []], "Tag": "算法设计"}
{"Answer": "把子问题理解为：“(组合价值, 组合物品列表）的列表”，从一组物品开始，逐步添加下一组物品，最终结果出来之后筛选符合条件“总价值不超过给定值”的组合价值最大的项。\r\n优化：在计算过程中，可以把组合价值超过给定值的项剔除。", "Konwledge_Point": "背包问题", "Question": ["分组背包的变式问题（每组物品必须选择一个不能不选）", ["有n组物品，必须从每一组物品中选出一个，在物品的总价值不超过一个给定值的情况下，得到最高的价值。", "\n\n", "目前我用递归在每一次递归过程中设置了单独的循环查找每一类中的所有物品，后序问题要求用动态规划进行优化。", "\n\n", "但是动态规划要求每个子问题具有最优解，但是对于这个问题对于子问题的最优解就可能会导致下一个问题无解，希望大神们给点思路"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/386900930846164.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\nn, v &amp;#61; map(int,&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;()&lt;span class=\"hljs-selector-class\"&gt;.split&lt;/span&gt;())\nlst &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(n):\n    vl, value &amp;#61; map(int,&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;()&lt;span class=\"hljs-selector-class\"&gt;.split&lt;/span&gt;())\n    lst&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(&lt;span class=\"hljs-selector-attr\"&gt;[vl,value]&lt;/span&gt;)\ndp &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[[0]&lt;/span&gt;*(v&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)]\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,v&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; j&amp;lt;lst&lt;span class=\"hljs-selector-attr\"&gt;[i-1]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;:#装不下\n            dp&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[j]&lt;/span&gt; &amp;#61; dp&lt;span class=\"hljs-selector-attr\"&gt;[i-1]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[j]&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:#装得下&amp;#xff0c;预留空间\n            dp&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[j]&lt;/span&gt; &amp;#61; max(dp&lt;span class=\"hljs-selector-attr\"&gt;[i-1]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[j]&lt;/span&gt;,dp&lt;span class=\"hljs-selector-attr\"&gt;[i-1]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[j-lst[i-1]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;] &amp;#43; lst&lt;span class=\"hljs-selector-attr\"&gt;[i - 1]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[1]&lt;/span&gt;)\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(dp[-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;/span&gt;\n \n \n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你的代码略微改了一下&amp;#xff0c;希望对你有用&amp;#xff0c;望采纳&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["01背包python3问题解答不知道哪里错了", ["01背包，", "有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。", "\n", "第 i 件物品的体积是 vi，价值是 wi。", "\n", "求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。", "输出最大价值。", "\n", "输入格式", "第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。", "\n", "接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。", "\n", "输出格式", "输出一个整数，表示最大价值。", "\n", "数据范围", "0<N,V≤1000", "0<vi,wi≤1000", "输入样例", "4 5", "1 2", "2 4", "3 4", "4 5", "输出样例：", "8", "\n", "\n\n\nn, v = map(int,", "input", "()", ".split", "())\nlst = ", "[]", "\n", "for", " ", "i", " ", "in", " range(n):\nvl, value = map(int,", "input", "()", ".split", "())\nlst", ".append", "(", "[vl,value]", ")\ndp = ", "[[0]", "(v+", "1", ")](n+", "1", ")\n", "for", " ", "i", " ", "in", " range(", "1", ",n+", "1", "):\n", "for", " j ", "in", " range(", "1", ",v+", "1", "):\ndp", "[i]", "[j]", " = dp", "[i-1]", "[j]", "\n", "if", " j >= lst", "[i-1]", "[0]", ":\ndp", "[i]", "[j]", " = max(dp", "[i]", "[j]", ", dp", "[i-1]", "[j-lst[i-1]", "[0]", "] + lst", "[i - 1]", "[1]", ")\n", "print", "(dp[-", "1", "][-", "1", "])", "\n\n\n"]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/chengsheng/p/4891563.html", "Konwledge_Point": "背包问题", "Question": ["贪心+01背包的算法问题，计算dxy的最高分，采用C语言", ["Problem Description", "\nThe SDOI in 2045 is far from what it was been 30 years ago. Each competition has t minutes and n problems.", "\n\n", "The ith problem with the original mark of Ai(Ai≤106),and it decreases Bi by each minute. It is guaranteed that it does not go to minus when the competition ends. For example someone solves the ith problem after x minutes of the competition beginning. He/She will get Ai−Bi∗x marks.", "\n\n", "If someone solves a problem on x minute. He/She will begin to solve the next problem on x+1 minute.", "\n\n", "dxy who attend this competition with excellent strength, can measure the time of solving each problem exactly.He will spend Ci(Ci≤t) minutes to solve the ith problem. It is because he is so godlike that he can solve every problem of this competition. But to the limitation of time, it's probable he cannot solve every problem in this competition. He wanted to arrange the order of solving problems to get the highest mark in this competition.", "\n\n", "Input", "\nThere is an positive integer T(T≤10) in the first line for the number of testcases.(the number of testcases with n>200 is no more than 5)", "\n\n", "For each testcase, there are two integers in the first line n(1≤n≤1000) and t(1≤t≤3000) for the number of problems and the time limitation of this competition.", "\n\n", "There are n lines followed and three positive integers each line Ai,Bi,Ci. For the original mark,the mark decreasing per minute and the time dxy of solving this problem will spend.", "\n\n", "Hint:", "\nFirst to solve problem 2 and then solve problem 1 he will get 88 marks. Higher than any other order.", "\n\n", "Output", "\nFor each testcase output a line for an integer, for the highest mark dxy will get in this competition.", "\n\n", "Sample Input", "\n1", "\n4 10", "\n110 5 9", "\n30 2 1", "\n80 4 8", "\n50 3 2", "\n\n", "Sample Output", "\n88"]], "Tag": "算法设计"}
{"Answer": "http://www.acmerblog.com/hdu-1881-%E6%AF%95%E4%B8%9Abg-2877.html", "Konwledge_Point": "背包问题", "Question": ["用0-1背包的思想                 ", ["问题描述 :", "\n\n", "每年毕业的季节都会有大量毕业生发起狂欢，好朋友们相约吃散伙饭，网络上称为“bg”。参加不同团体的bg会有不同的感觉，我们可以用一个非负整数为每个bg定义一个“快乐度”。现给定一个bg列表，上面列出每个bg的快乐度、持续长度、bg发起人的离校时间，请你安排一系列bg的时间使得自己可以获得最大的快乐度。", "\n\n", "例如有4场bg：", "\n第1场快乐度为5，持续1小时，发起人必须在1小时后离开；", "\n第2场快乐度为10，持续2小时，发起人必须在3小时后离开；", "\n第3场快乐度为6，持续1小时，发起人必须在2小时后离开；", "\n第4场快乐度为3，持续1小时，发起人必须在1小时后离开。", "\n则获得最大快乐度的安排应该是：先开始第3场，获得快乐度6，在第1小时结束，发起人也来得及离开；再开始第2场，获得快乐度10，在第3小时结束，发起人正好来得及离开。此时已经无法再安排其他的bg，因为发起人都已经离开了学校。因此获得的最大快乐度为16。", "\n\n", "注意bg必须在发起人离开前结束，你不可以中途离开一场bg，也不可以中途加入一场bg。", "\n又因为你的人缘太好，可能有多达30个团体bg你，所以你需要写个程序来解决这个时间安排的问题。 ", "\n\n", "输入:", "\n\n", "测试输入包含若干测试用例。每个测试用例的第1行包含一个整数N (<=30)，随后有N行，每行给出一场bg的信息：", "\nh l t", "\n其中 h 是快乐度，l是持续时间（小时），t是发起人离校时间。数据保证l不大于t,因为若发起人必须在t小时后离开，bg必须在主人离开前结束。", "\n\n", "当N为负数时输入结束。 ", "\n\n", "输出:", "\n\n", "每个测试用例的输出占一行，输出最大快乐度。", "\n样例输入:", "\n\n", "3", "\n6 3 3", "\n3 2 2", "\n4 1 3", "\n4", "\n5 1 1", "\n10 2 3", "\n6 1 2", "\n3 1 1", "\n-1", "\n样例输出:", "\n\n", "7", "\n16"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;都可以的&lt;/p&gt;\n&lt;h1 id=\"h1_一、01背包_1639655305324\"&gt;一、0/1背包&lt;/h1&gt;\n&lt;p&gt;&lt;a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/113765565\" id=\"textarea_1639655231180_1639655305325_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;夜深人静写算法&amp;#xff08;十四&amp;#xff09;- 0/1 背包_英雄哪里出来-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;动态规划的基础 —— 0/1 背包&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/WhereIsHeroFrom/article/details/113765565&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;h1 id=\"h1_二、完全背包_1639655305324\"&gt;二、完全背包&lt;/h1&gt;\n&lt;p&gt;&lt;a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/113808807\" id=\"textarea_1639655231180_1639655305325_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;夜深人静写算法&amp;#xff08;十五&amp;#xff09;- 完全背包_英雄哪里出来-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;完全背包问题&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/WhereIsHeroFrom/article/details/113808807&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["有关于01背包的问题想请教一下各位", ["01背包为什么可以用滚动数组来做呢？但是完全背包就不行呢"]], "Tag": "算法设计"}
{"Answer": "程序写的有问题， C++不支持动态数组，而且边界问题比较严重。编译都不能通过，更不能运行。\r\n```\r\n int f[n + 1][W + 1] ;\r\n n 和 W都是传入的参数，语法都不对。\r\n \r\n  for(int idx = 1; idx &lt;= n; idx++){\r\n       f[idx][0] = 0;\r\n       for(int j = 1; j &lt;= W; j++){\r\n           f[idx][j] = f[idx - 1][j];\r\n           if(j &gt;= w[idx])   //  这里超出了边界\r\n               f[idx][j] = max(f[idx - 1][j - w[idx-1]] + v[idx-1], f[idx-1][j]);\r\n       }\r\n   }\r\n\t \r\n \r\n```\r\n\r\n自己再仔细看看.", "Konwledge_Point": "背包问题", "Question": ["使用Qt运行C++程序的问题", ["用Qt写01背包问题时发现运行结果怎么都不对,可是debug结果是对的,就找了个在线编译器发现结果是正确的,想知道什么原因", "\n具体代码和图片请大家移步", "http://bbs.csdn.net/topics/392216005", "\n感谢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于GPT和Monster组的编写&amp;#xff0c;&lt;br /&gt;有用请采纳&amp;#xff1a;&lt;br /&gt;这个问题可以被归类为三维背包问题&amp;#xff0c;也称作三维剪枝问题&amp;#xff0c;这是一个NP完全问题&amp;#xff0c;意味着没有一个简单的算法可以在多项式时间内找到最优解。&lt;br /&gt;一般的做法是使用近似算法来尽可能减少空间浪费或者启发式算法来寻找最优或者接近最优的解决方案。常用的方法包括贪心&amp;#xff0c;分治法&amp;#xff0c;遗传算法等。&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["最优经济尺寸设计问题", ["   现有 n个尺寸测量为Xi=[li，wi，hi]  （ 1≤i≤n）的三维立方体，且形状尺寸各不相同、大小各异。现在需要把这n个立方体放进合适的柜子里，柜子需要根据立方体的大小进行定制，我该怎么去设计这有限个柜子的大小，才能使得我所有柜子的空间利用率最大，浪费最少，在柜子摆放空间一定的情况下摆放最多的柜子。", "     我感觉极限情况就是为每个立方体打造适合其本身的柜子，但是这明显不太现实。", "     如果我现在规定只能设计有限个规格的柜子的情况下（比如可以给个限制条件，规定只能设计m种规格的柜子），我该怎么去设计这m个规格的柜子的尺寸，使得空间浪费最少，是不是存在一种最优解。", "    不知道这个问题属于什么数学问题？我有看到“背包问题”，不太一样，请各位指点迷津，给我一点思路，是不是有解决这种数学问题的方法或者算法。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;运行结果及代码如下&amp;#xff1a;&lt;br /&gt;例1&amp;#xff1a;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/595331378756179.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;例2&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/530251378756187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; namespace std;\n\n//&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;判断在n天内&amp;#xff0c;是否有所有考试科目\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; isContainAll(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* d, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t)\n{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; m; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; j &amp;lt; t; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (d[j] &amp;#61;&amp;#61; i)\n                break;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (j &amp;gt;&amp;#61; t) //t天内没有i科目的考试&amp;#xff0c;不满足要求\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n\n//&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;在t天内&amp;#xff0c;如果出现多次i科目的考试&amp;#xff0c;只保留最后&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;次的天数\n&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; deald(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* d, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m)\n{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; t - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&lt;span class=\"hljs-comment\"&gt;--)&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (d[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n\n        //如果d[i]不为&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#xff0c;将之前的&amp;#61;d[i]的全部置&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; i; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (d[j] &amp;#61;&amp;#61; d[i])\n                d[j] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n\n    }\n}\n\n//获取数组中从&lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;开始不为&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;的元素的第一个位置\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; getpos(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* d, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;)\n{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;; i &amp;lt; t; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (d[i] !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; i;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n\n//&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;判断在t天内&amp;#xff0c;是否能够保证所有的科目都能完全准备完\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; isFull(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* d,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* p)\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; shift &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; start &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; pos &amp;#61; getpos(d, t, &lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;);\n        //判断是否有足够的天数复习\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (pos - &lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt; &amp;#43; shift &amp;lt; p[d[pos]])\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            shift &amp;#61; pos - &lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt; &amp;#43; shift - p[d[pos]];\n            start &amp;#61; pos &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n\n\n\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* d, * p;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; //所有科目一共需要准备的天数\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m; //输入n和m\n    d &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[n];\n    p &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[m];\n    //输入di\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n        cin &amp;gt;&amp;gt; d[i];\n    //输入mi\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n    {\n        cin &amp;gt;&amp;gt; p[i];\n        sum &amp;#43;&amp;#61; p[i];\n    }\n\n\n    //需要的天数至少为sum &amp;#43; m ,sum天准备&amp;#xff0c;m天考试\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t &amp;#61; sum &amp;#43; m;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; t &amp;lt;&amp;#61; n; t&amp;#43;&amp;#43;)\n    {\n        //从t&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;到&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#xff0c;判断是否包含了所有的科目\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (isContainAll(m, d, t))\n        {\n            deald(d, t, m); //处理d\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (isFull(d, t, m, p))\n            {\n                cout &amp;lt;&amp;lt; t;\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            }\n        }\n\n    }\n\n    cout &amp;lt;&amp;lt; &amp;#34;-1&amp;#34;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["HELP!求此题的代码!", ["背包问题?什么牛马?还是贪心?em求此题的代码，各位大奆帮帮忙"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;既然这样&amp;#xff0c;那这道题是否可以转换为01背包呢&amp;#xff1f;&lt;/p&gt;\n&lt;p&gt;答案很明显是可以的。可以利用并查集&amp;#xff0c;将这m组配对购买的商品划到一个集合里&amp;#xff0c;这样就可以确定买了其中一个就得买另一个。&lt;/p&gt;\n&lt;p&gt;最后就是01背包啦&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\nusing namespace std;\n\nint father[&lt;span class=\"hljs-number\"&gt;20001&lt;/span&gt;],c[&lt;span class=\"hljs-number\"&gt;20001&lt;/span&gt;],w[&lt;span class=\"hljs-number\"&gt;20001&lt;/span&gt;],f[&lt;span class=\"hljs-number\"&gt;20001&lt;/span&gt;];\nint n,m,k,x,y;\n\nint &lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(int x)  &lt;span class=\"hljs-comment\"&gt;//并查集&lt;/span&gt;\n{\n    return x&amp;#61;&amp;#61;father[x]?x:father[x]&amp;#61;&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(father[x]);\n}\n\nint main()\n{\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d%d&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;m,&amp;amp;k);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;w[i],&amp;amp;c[i]);\n        father[i]&amp;#61;i;  &lt;span class=\"hljs-comment\"&gt;//初始化&lt;/span&gt;\n    } \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;m;i&amp;#43;&amp;#43;)\n    {\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;x,&amp;amp;y);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(x)!&amp;#61;&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(y)) father[&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(y)]&amp;#61;&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(x);  &lt;span class=\"hljs-comment\"&gt;//划为同一集合&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n     &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (father[i]!&amp;#61;i)  &lt;span class=\"hljs-comment\"&gt;//如果买了这一件商品就得买另一件商品&lt;/span&gt;\n     {\n        c[&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(i)]&amp;#43;&amp;#61;c[i];\n        w[&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(i)]&amp;#43;&amp;#61;w[i];  &lt;span class=\"hljs-comment\"&gt;//划为同一集合&lt;/span&gt;\n        c[i]&amp;#61;w[i]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;//清零&amp;#xff0c;不清零就可能会造成重复购买一件商品&lt;/span&gt;\n     }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n     &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int j&amp;#61;k;j&amp;gt;&amp;#61;w[i];j--)\n      f[j]&amp;#61;&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(f[j],f[j-w[i]]&amp;#43;c[i]); &lt;span class=\"hljs-comment\"&gt;//01背包&lt;/span&gt;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\n&amp;#34;&lt;/span&gt;,f[k]);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["洛谷：P1455 搭配购买 怎么做", ["洛谷：P1455 搭配购买 怎么做？？", "\n", "我对题解表示十分无奈，写的都什么", "乱七八糟", "的。", "\n", "题目乍一看挺简单，只是一个普通的01背包问题，但从题目中得知背包的限制条件：买了A就必须买B，而且关系是互相的（而不是买A必买B，买B不一定买A）", "\n", "于是，我就想把相关联的云合在一起，看作一个更大的云，然后就用背包将它解决。", "\n", "问题出现了：", "我不会合并！", "，试了很多遍都不行，希望有天才帮帮忙。题目如下：", "\n", "\n      \n        ", "搭配购买 - 洛谷", "\n        \n      ", "\n      ", "\n      ", "\n        ", "\n          ", "https://www.luogu.com.cn/problem/P1455", "\n        ", "\n      "]], "Tag": "算法设计"}
{"Answer": "&lt;h1&gt;简单插入排序&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;\nvoid display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-comment\"&gt;// 直接插入排序:默认排序结果是非递减有序序列&lt;/span&gt;\nvoid direct&lt;span class=\"hljs-constructor\"&gt;InsertSort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;length&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; tmp,i, j;\n    display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;length&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;length;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&amp;lt;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;){\n            tmp&amp;#61;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;amp;&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;&amp;gt;tmp;j--){\n                a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;&amp;#61;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;;\n            }\n            a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;&amp;#61;tmp;\n        }\n        display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;length&lt;/span&gt;)&lt;/span&gt;;\n    }\n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;43&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;79&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;};\n    direct&lt;span class=\"hljs-constructor\"&gt;InsertSort(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;)&lt;/span&gt;/sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;));\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i,len&amp;#61;sizeof(a)/sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Result:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;len;i&amp;#43;&amp;#43;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/531420675636186.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;h1&gt;选择排序&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;\nvoid display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\nvoid swap(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;*a,&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;*b){(*a)^&amp;#61;(*b);(*b)^&amp;#61;(*a);(*a)^&amp;#61;(*b);}\nvoid select&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;[],&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; minpos&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,i,j;\n    display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;len-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        minpos&amp;#61;i;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;lt;len;j&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;&amp;lt;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;minpos&lt;/span&gt;]&lt;/span&gt;) minpos&amp;#61;j;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(minpos!&amp;#61;i){\n            swap(&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;,&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;minpos&lt;/span&gt;]&lt;/span&gt;);\n        }\n        display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;;\n    }\n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;43&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;79&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;};\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; len &amp;#61; sizeof(a)/sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;);\n    select&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Result:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;len;i&amp;#43;&amp;#43;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/766161675636133.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;h1&gt;冒泡排序&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;\nvoid display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\nvoid swap(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;*a,&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;*b){ (*a)^&amp;#61;(*b);(*b)^&amp;#61;(*a);(*a)^&amp;#61;(*b);}\n&lt;span class=\"hljs-comment\"&gt;//线性排序的冒泡排序:递增序列&lt;/span&gt;\nvoid bubble&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;[],&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; flag;\n    display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;len-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i--) {\n        flag&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;i;j&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;&amp;gt;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;){&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//将大的后移&lt;/span&gt;\n                flag&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                swap(&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;,&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;);\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!flag) break;\n        display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;;\n    }  \n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;43&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;79&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;};\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; len &amp;#61; sizeof(a)/sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;);\n    bubble&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Result:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;len;i&amp;#43;&amp;#43;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/380302675636172.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;h1&gt;背包问题&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;//一维数组解法&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; MAX_M 12880        &lt;span class=\"hljs-comment\"&gt;//最大限重&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; MAX_N 3402        &lt;span class=\"hljs-comment\"&gt;// 最大种类数&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; max(a,b) a&amp;gt;b?a:b&lt;/span&gt;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dp[MAX_M &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; weights[MAX_N &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; values[MAX_N &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m, i, j;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;n , &amp;amp;m);&lt;span class=\"hljs-comment\"&gt;//n是种类&amp;#xff0c;m是限制重量&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;weights[i] ,&amp;amp;values[i]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; m; j &amp;gt;&amp;#61; weights[i]; j--) {\n            dp[j] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(dp[j], dp[j - weights[i]] &amp;#43; values[i]);\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, dp[m] );\n}\n&lt;span class=\"hljs-comment\"&gt;/*\n5 15\n4 12\n2 2\n2 1\n1 1\n10 4\n*/&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/194352675636131.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["大学计算机—计算思维导论  习题求解", ["按三种不同的内排序算法对下列数据完成排序：43, 4, 79, 22。\n", "\n", "\n", "（1）插入法排序，要求写出每次插入一个数据后的数据排列状态；", "（2）简单选择法排序，要求写出每次选择一个元素并安置到合适位置后的数据排列状态；", "（3）冒泡法排序，要求写出每个轮次的数据排列结果。", "\n", "   背包问题的定义是：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量", "内，我们如何选择，才能使得物品的总价格最高。下图是背包问题的一个例子，应该选择哪", "些盒子，才能使价格尽可能地大，并且保持总重量不超过 15 kg？所选物品的总价值是多少？", "\n"]], "Tag": "算法设计"}
{"Answer": "在函数内部声明了的二维数组超过了你系统的限制，有两种方案，1）把数组w和m的声明放到函数外面（就是声明为全局变量），或者\r\n2）用malloc动态申请内存创建二维数组。", "Konwledge_Point": "背包问题", "Question": ["关于01背包代码的一些问题", ["1.main函数使用了堆栈的“41216”个字节: 超过了 /analyze:stacksize '16384'。 请考虑将某些数据移到堆中。这个应该怎么解决？", "\n2.以下见代码：（报错信息在注释中）", "\n\n", "#include<stdio.h>\nint max(int a, int b) {\n    if (a >= b)return a;\n    else return b;\n}\nmain() {\n    int n, c;\n    int w[100], v[100];\n    int i, j;\n    int m[100][100];//已有价值和剩余容量\n    int put[100];//是否放置\n    scanf_s(\"%d %d\", &n, &c);\n    for (i = 0;i < n;i++) {\n        scanf_s(\"%d\", &w[i]);\n    }\n    for (i = 0;i < n;i++) {\n        scanf_s(\"%d\", &v[i]);\n    }\n    for (i = 0;i < n;i++) {\n        for (j = c;j >= 0;j--){\n            if (w[i] <= j) {//如果装得下\n                m[i][j]= max(m[i - 1][j - w[i]] + v[i], m[i - 1][j]);\n            }\n            else {\n                m[i][j] = m[i - 1][j];\n            }\n\n\n        }\n    }\n    printf(\"%d\\n\", m[n - 1][c]);//可读大小为40000个字节，但可能读取了-400个字节\n    for (i = 0;i < n;i++) {\n        for (j = c;j >= 0;j--) {\n            if (m[i][j] == m[i - 1][j])put[i] = 0;\n            else put[i] = 1;\n        }\n    }\n    for (i = 0;i < n;i++) {\n        printf(\"%d\", put[i]);\n        printf(\" \");\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n", "\n\n", "又：报错行的c是否该改为0？因为如果按照j表示剩余容量的设定，应该输出剩余容量为0时的最大价值", "\n请各位大佬指教"]], "Tag": "算法设计"}
{"Answer": "```\r\n 用户信息：id，姓名，....          存储用户信息\r\n\r\n活动表：id，活动名称，....       存储活动信息\r\n\r\n\r\nactivities_user：id，用户id，活动id    存储用户参与活动关系\r\n```", "Konwledge_Point": "背包问题", "Question": ["数据库设计问题，求解", ["现在要设计一个活动。", "\n活动有报名参与的用户，怎样去存储参与活动的用户列表呢？"]], "Tag": "算法设计"}
{"Answer": "```\r\n for (i = n - 1; i &gt;= 0;i--)   //看代码有点排序，这个是倒着排序，数组下标越小越大\r\n \r\n//for (i = 0; i &lt; n;i++) //如果这样写肯定是需要修改的代码。。\r\n```", "Konwledge_Point": "背包问题", "Question": ["dp中第一行的循环为什么一定要那么写，而不能写成我注释的那个样子？", ["for (i = n - 1; i >= 0;i--)", "\n        //for (i = 0; i < n;i++)", "\n        {", "\n            for (j = 0; j <= w; j++)", "\n            {", "\n                //show();", "\n                if (j < wi[i])", "\n                {", "\n                    dp[i][j] = dp[i + 1][j];", "\n                }", "\n                else", "\n                {", "\n                    dp[i][j] = max(dp[i + 1][j], dp[i + 1][j - wi[i]] + pi[i]);", "\n                }", "\n            }", "\n        }", "\n        cout << dp[0][w] << endl;", "\n        //cout << dp[n - 1][w] << endl;", "\n\n", "    这是简单的背包问题的动态规划，可是我还是不会\n"]], "Tag": "算法设计"}
{"Answer": "程序1\r\nInput：n个集装箱，及其重量wi；两艘轮船的载重量C1，C2。 \r\nOutput：一种装载方案，没有输出没有解。  \r\n1. 设定目标函数的限界down=w1，up=  n iiw1 ，flag=false(标记是否找到解)  \r\n2. 计算初始结点1的f(1)=up和g(1)=0，将初始结点插入最大堆H,堆中存储f值为结点键值;  \r\n3. while (H ≠Φ)  \r\n4. {  \r\n5.       从H中做DELETEMAX的操作，用p带回相应结点; \r\n6.       If  g(p)&lt;=C1 and up-g(p)&lt;=C2 then    \r\n7.             沿parent指针输出装入第一艘轮船的集装箱，  剩余装入第二艘轮船，flag=true，exit  (结束程序)；  \r\n8.       Else if g(p)&lt;=C1 and up-g(p)&gt;C2  \r\n9.       {    if p为叶子结点 then    \r\n10.               if  堆H为空then  输出没有解, exit  (结束程序)；  \r\n11.               else  if f(p)&gt;down then down=f(p), 删除H中小于等于down的结点； \r\n12.           else   \r\n13.           {   产生p满足约束条件的后继结点d(建树，保留结点的parent指针)  并计算f(d)和g(d)  \r\n14.              将f值大于down的结点插入最大堆H中；} \r\n15.       } \r\n16. }  \r\n17. if flag=false then 输出没有解；", "Konwledge_Point": "背包问题", "Question": ["c++编译错误。怎么办？", ["/*描述：有一批共n个集装箱要装上两艘载重量分别为c1和c2的轮船，其中，集装箱i的重量为wi，且", "\n    集装箱重量总和小于等于两辆轮船的载重量总和。", "\n    装在问提要求确定是否存在一个方案可将这n个集装箱装上两艘轮船。", "\n    若有，找出一种装在方案。", "\n\n", "解决方法：（1）首先将第一艘轮船极可能装满", "\n            （2）将其余的集装箱装载第二艘轮船", "\n\n", "    装载第一艘轮船的方法等价于一个特殊的0-1背包问题\n", "\n\n", "*/", "\n#include ", "\n\n", "using namespace std;", "\n\n", "int c1[100], c2[100];//两艘轮船的载重量", "\nint n[100];//集装箱个数", "\nint w[1000];//每个集装箱的重量", "\nint bestw = 0;//记录当前第一搜轮船装载的最大值", "\nint a[1000];//记录每个集装箱是否被装进第一搜轮船", "\n\n", "//插入排序", "\nvoid InsertSort(int A[], int N)", "\n{", "\n    int j, p;", "\n    int tmp;", "\n\n", "for(p = 1; p < N; p++) {\n    tmp = A[p];\n    for(j = p; j > 0 && A[j - 1] > A[j]; j--) {\n        A[j] = A[j - 1];\n    }\n\n    A[j] = tmp;\n}\n", "\n\n", "}", "\n\n", "void search(int m)", "\n{", "\n    if(m >= n)//这里提示有问题", "\n        return;", "\n    else {", "\n        if(w[m] <= c1 - bestw)//这里提示有问题", "\n        {", "\n            a[m] = 1;", "\n            bestw = bestw + w[m];", "\n        }", "\n\n", "    else a[m] = 0;\n\n    search(m + 1);\n}\n", "\n\n", "}", "\n\n", "//判断函数", "\nbool outp(int c1, int C2, int N)", "\n{", "\n    int i;", "\n    //对集装箱的重量进行插入排序", "\n    InsertSort(w, N);", "\n\n", "//将将第一个集装箱尽可能装满\nsearch(0);\n\nint wz = 0;//集装箱总重量\nfor(i = 0; i < N; i++) {\n    wz = wz + w[i];\n}\n//做出判断\nif(C2 >= wz - bestw)\n    return true;\nelse\n    return false;\n", "\n\n", "}", "\n\n", "int main()", "\n{", "\n    int i = -1, j;", "\n    do {", "\n        i++;", "\n        cin >> c1[i] >> c2[i] >> n[i];//输入载重量和集装箱的个数", "\n        int i;//循环变量", "\n        for(j = 0; j < n[i]; j++) {", "\n            //输入每个集装箱的重量", "\n            cin >> w[i];", "\n        }", "\n    }while(c1[i] || c2[i] || n[i]);", "\n\n", "int tmp = i;\n\nfor(i =  0; i < tmp; i++) {\n    if(outp(c1[i], c2[i], n[i]))\n        cout << \"Yes\" << endl;\n    else cout << \"No\" << endl;\n}\nreturn 0;\n", "\n\n", "}", "\n\n", "\n", "\n\n", "编译提示", "\nerror: ISO C++ forbids comparison between pointer and integer"]], "Tag": "算法设计"}
{"Answer": "http://www.acmerblog.com/hdu-3983-harry-potter-and-the-binary-kingdom-6986.html", "Konwledge_Point": "背包问题", "Question": ["Harry Potter and the Binary Kingdom              ", ["问题描述 :", "\n\n", "After defeating the Voldemort, Harry is enjoying his senior year in Hogwarts with his friends. They decide to make a graduation trip, using their newest magical broom. In the journey, Harry is trapped in a Kingdom named Binary Kingdom, maybe because the smart but isolated people still have no idea of the great reputation of this young wizard. Loving numbers and binary very much, the subjects of Binary Kingdom claim only Harry solve the problem can he leave there.", "\nHarry Potter and J.K.Rowling", "\n\n", "The problem begins with an empty number multi-set, with six kinds of operation:", "\n\n", "\n", "INS M: insert M into the set", "\n", "DEL M: delete all numbers equal to M if any one exists; otherwise report “Del error”", "\n", "ADD M: increase the value of every number by M", "\n", "SUB M: decrease the value of every number by M if after decreasing no number will be less than zero; otherwise report “Sub error”", "\n", "QNUM M: query how many numbers equal to M in the set", "\n", "QBIT M: query how many numbers whose M-th bit is 1 in its binary, M is counting from lower to higher, beginning with 0", "\n", "Though our brave Harry Potter can proficient in many fields, he is not good at math, now, it’s your time. ", "\n\n", "输入:", "\n\n", "The first line contains a single integer T, indicating the number of test cases.", "\nEach test case begins with an integer M, following M operations. ", "\n\n", "Technical Specification", "\n\n", "\n", "1 <= T <= 12", "\n", "1 <= M <= 100 000", "\n", "The QBIT operations’ M will in the range [0, 17], the other five operations’ M in the range [0, 1 000 000 000]. ", "\n", "输出:", "\n\n", "The first line contains a single integer T, indicating the number of test cases.", "\nEach test case begins with an integer M, following M operations. ", "\n\n", "Technical Specification", "\n\n", "\n", "1 <= T <= 12", "\n", "1 <= M <= 100 000", "\n", "The QBIT operations’ M will in the range [0, 17], the other five operations’ M in the range [0, 1 000 000 000].", "\n", "样例输入:", "\n\n", "1", "\n10", "\nINS 1", "\nINS 2", "\nDEL 1", "\nINS 3", "\nDEL 1", "\nADD 1", "\nSUB 4", "\nQNUM 2", "\nQBIT 1", "\nQBIT 2", "\n样例输出:", "\n\n", "Case 1:", "\nDel error", "\nSub error", "\n0", "\n1", "\n1"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;c是多重背包了&amp;#xff0c;不是01&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["谁能告诉我,他最后一个背包里的价值是咋算出来的?", ["昨天看课件,看要这个贪心算法,讲的01背包的例子 ,但是 他这个例图属实给我看懵逼了,有人理解他这个例子是啥意思么 ?", "\n", "特别是 C那个例子 ,01背包问题,一个物品不是只能用一次么?,而且最后一个背包的价值到底咋算出来的?", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用GPTᴼᴾᴱᴺᴬᴵ&lt;br /&gt;这个问题可以使用整数规划来求解。我们可以将每个人排的时间段表示成0/1向量&amp;#xff0c;其中1表示这个时间段被排给这个人&amp;#xff0c;0表示这个时间段没有被排给这个人。然后我们可以定义以下变量&amp;#xff1a;&lt;br /&gt;-&lt;br /&gt;$x_{i,j}$&amp;#xff1a;表示第$i$个人是否被排在第$j$个时间段&amp;#xff0c;其中$i\\in[1,29], j\\in[1,6520]$。&lt;br /&gt;$y_i$&amp;#xff1a;表示第$i$个人被排的时间总长&amp;#xff0c;其中$i\\in[1,29]$。&lt;br /&gt;接下来&amp;#xff0c;我们需要定义一些约束条件和目标函数。首先&amp;#xff0c;对于每个人&amp;#xff0c;他们被排的时间总长应该满足以下约束&amp;#xff1a;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/495987405876146.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;其中&amp;#xff0c;$t_j$表示第$j$个时间段的时长。另外&amp;#xff0c;每个人被排的时间段数也需要满足一定的约束&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/402738405876139.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;每个时间段只能被一个人排&amp;#xff0c;因此我们需要满足以下约束&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/846168405876124.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;最后&amp;#xff0c;我们需要定义一个目标函数&amp;#xff0c;使得每个人的时间尽量平均&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/297519405876161.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;这个问题可以使用整数规划求解器来解决&amp;#xff0c;例如PuLP库。下面是一个Python代码示例&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; pulp &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; *\n\n&lt;span class=\"hljs-comment\"&gt;# 设置每个人的监考次数和时长&lt;/span&gt;\nsubjects &amp;#61; [&lt;span class=\"hljs-string\"&gt;&amp;#39;语文&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;英语&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;数学&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;物理&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;道法&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;历史&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;化学&amp;#39;&lt;/span&gt;]\nnum_subjects &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(subjects)\nnum_people &amp;#61; &lt;span class=\"hljs-number\"&gt;29&lt;/span&gt;\ntime_limit &amp;#61; &lt;span class=\"hljs-number\"&gt;6520&lt;/span&gt;\n\nnum_exams &amp;#61; {\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;语文&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;英语&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;数学&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;物理&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;道法&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;历史&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;化学&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;\n}\n\ntime_per_exam &amp;#61; {\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;语文&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;224&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;英语&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;224&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;数学&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;224&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;物理&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;448&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;道法&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;448&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;历史&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;448&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;化学&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;448&lt;/span&gt;\n}\n\n&lt;span class=\"hljs-comment\"&gt;# 定义问题&lt;/span&gt;\nprob &amp;#61; LpProblem(&lt;span class=\"hljs-string\"&gt;&amp;#34;监考排班问题&amp;#34;&lt;/span&gt;, LpMinimize)\n\n&lt;span class=\"hljs-comment\"&gt;# 定义决策变量&lt;/span&gt;\nx &amp;#61; {}\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_people):\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_subjects):\n        x[(i, j)] &amp;#61; LpVariable(&lt;span class=\"hljs-string\"&gt;&amp;#34;x_{}_{}&amp;#34;&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;format&lt;/span&gt;(i, j), &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, LpInteger)\n\n&lt;span class=\"hljs-comment\"&gt;# 定义目标函数&lt;/span&gt;\nprob &amp;#43;&amp;#61; lpSum([x[(i, j)] * time_per_exam[subjects[j]] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_people) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_subjects)])\n\n&lt;span class=\"hljs-comment\"&gt;# 添加约束条件&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_subjects):\n    prob &amp;#43;&amp;#61; lpSum([x[(i, j)] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_people)]) &amp;#61;&amp;#61; num_exams[subjects[j]]\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_people):\n    prob &amp;#43;&amp;#61; lpSum([x[(i, j)] * time_per_exam[subjects[j]] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_subjects)]) &amp;#61;&amp;#61; time_limit\n\n&lt;span class=\"hljs-comment\"&gt;# 求解问题&lt;/span&gt;\nprob.solve()\n\n&lt;span class=\"hljs-comment\"&gt;# 输出结果&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_people):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;第{}位监考老师&amp;#xff1a;&amp;#34;&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;format&lt;/span&gt;(i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_subjects):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; x[(i, j)].value() &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t{}: {}次&amp;#34;&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;format&lt;/span&gt;(subjects[j], num_exams[subjects[j]]))\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t总时长: {}分钟&amp;#34;&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;format&lt;/span&gt;(value(lpSum([x[(i, j)] * time_per_exam[subjects[j]] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_subjects)]))))\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;该代码使用PuLP库&amp;#xff0c;定义了每个人监考的次数和时长&amp;#xff0c;并使用整数规划方法求解监考排班问题。输出结果会列出每位监考老师监考的科目和总时长。&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["python排监考，怎么解决", ["请教一个问题，用python怎么解决，没有什么思路，用背包的话这个太复杂了", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用ChatGPT &lt;/p&gt;\n&lt;p&gt;了保证服务端的10比1的比例&amp;#xff0c;可以设计如下的接口测试用例&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1、测试用例1&amp;#xff1a;money为10&amp;#xff0c;num为1&amp;#xff0c;预期结果为play为1。&lt;br /&gt;2、测试用例2&amp;#xff1a;money为90&amp;#xff0c;num为9&amp;#xff0c;预期结果为play为9。&lt;br /&gt;3、测试用例3&amp;#xff1a;money为100&amp;#xff0c;num为1&amp;#xff0c;预期结果为play为1。&lt;br /&gt;4、测试用例4&amp;#xff1a;money为100&amp;#xff0c;num为10&amp;#xff0c;预期结果为play为10。&lt;br /&gt;5、测试用例5&amp;#xff1a;money为110&amp;#xff0c;num为10&amp;#xff0c;预期结果为play为10。&lt;br /&gt;6、测试用例6&amp;#xff1a;money为150&amp;#xff0c;num为15&amp;#xff0c;预期结果为play为10。&lt;br /&gt;7、测试用例7&amp;#xff1a;money为0&amp;#xff0c;num为1&amp;#xff0c;预期结果为play为0。&lt;br /&gt;通过以上测试用例&amp;#xff0c;可以保证服务端的10比1的比例&amp;#xff0c;同时也覆盖了不同的场景&amp;#xff0c;如有足够的金币可以玩多少次游戏&amp;#xff0c;不足的金币可以玩多少次游戏&amp;#xff0c;甚至金币不够玩游戏的场景。&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["关于#游戏程序#的问题：玩游戏一次10金币，接口返回一个可玩游戏的次数是10.(开发工具-postman)", ["我背包有100金币，玩游戏一次10金币，接口返回一个可玩游戏的次数是10.", "\n", "入参就是    money 100，  num 10  ，返回play 10", "\n", "就是一次游戏的比例是10比1，怎么设计接口测试用例保证服务端的10比1的比例"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,t;\n&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; s;\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;miji&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m,v;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; w;\n}k[&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;];       &lt;span class=\"hljs-comment\"&gt;//定义结构体 &lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;cmp&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;(miji a,miji b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a.w&amp;gt;b.w;         &lt;span class=\"hljs-comment\"&gt;//由于排序要用sort&amp;#xff0c;所以要打此函数 &lt;/span&gt;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    cin &amp;gt;&amp;gt;n &amp;gt;&amp;gt;t;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        cin &amp;gt;&amp;gt;k[i].m &amp;gt;&amp;gt;k[i].v;\n        k[i].w&amp;#61;k[i].v*&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;/k[i].m;      &lt;span class=\"hljs-comment\"&gt;//k[i].w是性价比 &lt;/span&gt;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt; (k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,n&amp;#43;k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,cmp);       &lt;span class=\"hljs-comment\"&gt;//按性价比排序 &lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (t&amp;gt;k[i].m)\n        {\n            s&amp;#43;&amp;#61;k[i].v;\n            t-&amp;#61;k[i].m;            &lt;span class=\"hljs-comment\"&gt;//如果当前物品可以装下&amp;#xff0c;就装 &lt;/span&gt;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            s&amp;#43;&amp;#61;t*&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;*k[i].w;          &lt;span class=\"hljs-comment\"&gt;//装不下就尽量多 &lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.2f&amp;#34;&lt;/span&gt;,s);        &lt;span class=\"hljs-comment\"&gt;//保留两位小数&amp;#xff0c;输出 &lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["关于#C++#的问题，如何解决？", ["题目描述", "独孤大虾走进了放满武功秘籍的秘境。秘境里面有 N(N≤100) 本秘籍，第 i 本秘籍的重量和武力提升值分别是 mi​,vi​(1≤mi​,vi​≤100)。独孤大虾有一个承重量为 T(T≤1000) 的背包，但并不一定有办法将全部的秘籍都装进去。他想提升尽可能多的武力值。所有秘籍都可以把单个动作招式拆分，拆分完的秘籍重量武力比（也就是单位武力值）不变。请问独孤大虾最多可以提升多少武力值？", "\n", "输入格式", "第一行两个整数 N,T。", "\n", "接下来 N 行，每行两个整数 mi​,vi​。", "\n", "输出格式", "一个实数表示答案，输出两位小数", "\n", "输入输出样例", "输入 #1", "\n", "4 50", "10 60", "20 100", "30 120", "15 45", "输出 #1", "\n", "240.00"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;scanf_s&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;, &amp;amp;limitweight);\n&lt;span class=\"hljs-attribute\"&gt;limitweight&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你这里刚输入重量限制&amp;#xff0c;又把它清掉干什么&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["大家看看哪里出了问题，最后显示是0", ["问题：实现从N个物品种找出价值总和最大的物品，放在额定容量的背包里。", "\n", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "define", " N 100", "\n", "int", " num_type;\n", "int", " currentoption[N];\n", "int", " option[N];\n", "double", " maxvalue;", "/*最大值*/", "\n", "double", " totalvalue;", "/*总价值*/", "\n", "double", " limitweight;", "/*重量限制*/", "\n", "struct", " \n{\n    ", "double", " weight;\n    ", "double", " value;\n}good[N];\n", "void", " ", "outchick", "(", "int", " i, ", "double", " tw, ", "double", " totalvalue)", "\n", "{\n    ", "int", " k;\n    ", "if", " (tw + good[i].weight <= limitweight)\n    {\n        currentoption[i] = ", "1", ";\n        ", "if", " (i < num_type - ", "1", ")\n            ", "outchick", "(i + ", "1", ", tw + good[i].weight, totalvalue);\n        ", "else", "\n        {\n            ", "for", " (k = ", "0", "; k < num_type; ++k)\n                option[k] = currentoption[k];\n            maxvalue = totalvalue;\n            \n        }\n    }\n    currentoption[i] = ", "0", ";\n    ", "if", " (totalvalue - good[i].value > maxvalue)\n    {\n        ", "if", " (i < num_type - ", "1", ")\n            ", "outchick", "(i + ", "1", ", tw, totalvalue - good[i].value);\n        ", "else", "\n        {\n            ", "for", " (k = ", "0", "; k < num_type; ++k)\n                option[k] = currentoption[k];\n            maxvalue = totalvalue - good[i].value;\n        }\n    }\n}\n", "void", " ", "main", "()", "\n", "{\n    ", "int", " i;\n    ", "double", " weight, value;\n    ", "printf", "(", "\"请输入物品的类别数：\\n\"", ");\n    ", "scanf_s", "(", "\"%d\"", ", &num_type);\n    ", "printf", "(", "\"请输入物品的重量和价格\\n\"", ");\n    totalvalue = ", "0.0", ";\n    ", "for", " (i = ", "0", "; i < num_type; ++i)\n    {\n        ", "scanf_s", "(", "\"%lf %lf\"", ", &weight, &value);\n        good[i].weight = weight;\n        good[i].value = value;\n        totalvalue += value;\n    }\n    ", "printf", "(", "\"输入重量限制\\n\"", ");\n    ", "scanf_s", "(", "\"%lf\"", ", &limitweight);\n    limitweight = ", "0.0", ";\n    ", "for", " (i = ", "0", "; i < num_type;++i)\n    {\n        currentoption[i] = ", "0", ";\n    }\n    ", "outchick", "(", "0", ", ", "0.0", ", totalvalue);\n    ", "for", " (i = ", "0", "; i < num_type;++i)\n        ", "if", " (option[i])\n            ", "printf", "(", "\"%d\\t\"", ", i + ", "1", ");\n    ", "printf", "(", "\"总价值是%2f\"", ", maxvalue);\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;i最大值是5&amp;#xff0c;j最大值是3&amp;#xff0c;5*i&amp;#43;j&amp;#61;28&amp;#xff0c;handbag[28]越界了吧。&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["如何使用easyx由于一段代码而出现闪退？(语言-c语言)", ["使用easyx由于一个代码的闪退", "\n", "\ntypedef struct {\n    int num;", "//", "武器编号\n    int intensify;", "//", "强化等级\n    char name[", "15", "]; ", "//", "武器名称\n    int atk; ", "//", "攻击力\n    int magicatk;", "//", "魔法攻击\n    int pp;  ", "//", "所需体力\n    int mp;", "//", "所需魔力值\n    IMAGE* p;  ", "//", "贴图\n    TCHAR story[", "100", "];", "//", "武器描述\n    int money;", "//", "出售金币\n\n}weapon;", "//", "结构体 - 武器\nweapon handbag[", "24", "];", "//", "武器背包\n", "for", " (int i = ", "0", "; i < ", "24", "; i++)", "//", "背包数组初始化\n                handbag[i] = { -", "1", ",", "0", ",NULL,", "0", ",", "0", ",", "0", ",", "0", ",NULL,NULL,", "0", " };\n", "for", " (int i = ", "0", "; i < ", "6", "; i++) ", "//", "武器贴图打印\n        ", "for", " (int j = ", "0", "; j < ", "4", "; j++) {\n                    drawAlpha(&img_empt, ", "400", " + j * ", "40", ", ", "130", " + i * ", "40", ");", "//", "打印的空白贴图\n                    ", "if", " (handbag[", "5", " * i + j].p != NULL);\n                    ", "//", "drawAlpha(handbag[", "5", " * i + j].p, ", "400", " + j * ", "33", ", ", "130", " + i * ", "33", ");", "//", "打印的武器\n                \n                }\n", "\n", "注释掉的一段代码就是问题，如果我加上这段代码，打开背包的时候，就会闪退，注释掉就不会。", "感谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我是这样理解的&lt;br /&gt;第一个问题&amp;#xff1a;怎么理解状态转移方程f[j]&amp;#61; min(f[j]&amp;#43;b[i],j&amp;gt;&amp;#61;a[i]? f[j-a[i]]:Inf)中的f[j-a[i]]的含义&amp;#xff0c;为何不是f[j-a[i]]&amp;#43;a[i]&amp;#xff1f;&lt;br /&gt;a. 先要弄清楚f[j]和j代表什么含义&amp;#xff0c;f[j]是在total_b_prefix中部分花在b商店的钱&amp;#xff0c; j是total_b_prefix从b商店转移花在a商店的钱&amp;#xff0c;也就是说 f[j] &amp;#43; j &amp;#61; total_b_prefix。希望花在b上的钱更小然后转移到a商店的钱打折后总价更小。&lt;br /&gt;b. f[j-a[i]]是当前如果j&amp;gt;&amp;#61;a[i]&amp;#xff0c;这个时候第i个商品去a店买&amp;#xff0c;也就是转移了a[i]去了a商店&amp;#xff0c;那么剩下的就是去b的店取最小的剩余的钱f[j-a[i]]&lt;br /&gt;c. 为何不是f[j-a[i]]&amp;#43;a[i] &amp;#xff0c;这个是f[j]的含义决定的&amp;#xff0c;是花在b商店最小的钱和a没有关系&amp;#xff0c;上面有ans min操作体现了和a的关系&lt;br /&gt;第二个问题&amp;#xff1a;有介绍说&amp;#xff0c;这里的f[j]&amp;#xff0c;其实是f[i-1][j]的简化&amp;#xff0c;那么当i&amp;#61;0时&amp;#xff0c;f[i-1][j]该如何解释&amp;#xff1f;&lt;br /&gt;这个是应该是降维的操作&amp;#xff0c;简化计算。 然后i&amp;#61;0这种&amp;#xff0c;那个视频里面只是这么介绍便于理解&amp;#xff0c;可以理解i从1开始的&amp;#xff0c;然后把i&amp;#61;0都赋值为inf就行&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["2018年noip提高组初赛题的最后一个填空题", ["用代码块功能插入代码，请勿粘贴截图", "这提是2018年noip提高组初赛题的最后一个填空题。程序的下半段采用动态规划，f记录状态，有几个问题不明白：", "1.怎么理解状态转移方程f[j]= min(f[j]+b[i],j>=a[i]? f[j-a[i]]:Inf)中的f[j-a[i]]的含义，为何不是f[j-a[i]]+a[i]", "2.有介绍说，这里的f[j]，其实是f[i-1][j]的简化，那么当i=0时，f[i-1][j]该如何解释？", "完整的代码如下", "#include", "using namespace std;", "\n", "const int Inf = 1000;", "const int threshold = 410;", "const int maxn = 8; ", "\n", "int n=8;", "int a[maxn]={30,60,30,40,50,60,70,60};//450*0.95=427.5", "int b[maxn]={30,60,60,60,70,80,90,70};", "bool put_a[maxn];", "int total_a, total_b; ", "\n", "double ans;", "double f[threshold];//这个是重点:f[i]表示从当前前缀状态下，买总价格为i的物品，所需要去b商场的最小花费", "double min(double x,double y){return x>y?y:x;}", "int main(){//16行", "    int i;", "//    scanf(\"%d\", &n);", " //   total_a = total_b = 0; //18行", "    for (i = 0; i < n; ++i) {", "//        scanf(\"%d%d\", a + i, b + i);", "        if (a[i] <= b[i]) total_a += a[i]; //选价格小的，不考虑优惠", "        else total_b += b[i];", "    }", "    ans = total_a + total_b; //不考虑优惠,直接计算总价", "    total_a = total_b = 0;", "    for (i = 0; i < n; ++i){", "        if (a[i] * 0.95 <= b[i]){//买a", "            put_a[i] = true;", "            total_a += a[i];", "        }else{  //买b", "            put_a[i] = false;", "            total_b += b[i];", "        }", "    }", "    if (total_a >= threshold){//35行 a商品打折后> threshold,结束", "        printf(\"%.2f\", total_a * 0.95 + total_b);", "        return 0;", "    }", "    f[0] = 0;          //total_a < threshold", "    for (i = 1; i < threshold; ++i)", "        f[i] = Inf;", "    int total_b_prefix = 0;", "    for (i = 0; i < n; ++i)", "        if (!put_a[i]) { //如果是b买的，就考虑背包转移", "            total_b_prefix += b[i]; //当前去b买的物品，所花费的总代价", "            for (int j = threshold-1; j >= 0; --j) {", "                if (total_a+j+a[i]>=threshold && f[j]!= Inf)//如果可以转移", "                    ans=min(ans,(total_a+j+a[i])*0.95+f[j]+total_b-total_b_prefix);", "//当前去a商场的总花费加上背包体积以及当前物品，乘以折扣，在加上去b商场购买的总价值，是否小于ans", "                f[j]= min(f[j]+b[i],j>=a[i]? f[j-a[i]]:Inf);//背包转移", "//考虑当前的j大小的背包是加上b[i]更优,还是直接靠f[j-a[i]]转移更优（就是考虑当前的背包是加上代价还是状态转移）", "            }", "        }", "    printf(\"%f\", ans);", "    return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "此方法可行，价格列表越长，准确性越大，但是对内存和时间要求特别大，价格列表越长时间和内存指数增长\r\n\r\n\r\n\r\nCOUNT = 0\r\nlist_all=[]\r\nsum = []\r\n#实现全排列的函数\r\ndef perm(n, begin, end):\r\n    global COUNT\r\n    if begin &gt;= end:\r\n        list_all.append(n)\r\n        COUNT += 1\r\n    else:\r\n        i = begin\r\n        for num in range(begin, end):\r\n            n[num], n[i] = n[i], n[num]\r\n            perm(n, begin + 1, end)\r\n            n[num], n[i] = n[i], n[num]\r\n\r\n\r\ndef analizy(M,Y):\r\n    for v in list_all:#遍历所有价格排列的可能\r\n\r\n        l = [i for i in v]#将一个 list 映射为另一个 list，每个元素设为变量i，对每个可能价格列表切成M大小的子列表\r\n        list_son=list([l[i:i + M] for i in range(0, len(l), M)])\r\n\r\n        for a in list_son:#遍历字列表，对每个子列表求和，并判断符合最大商品数和小于最大金额的子列表，然后放到list——sonson列表中，其余的组成一个新列表重新开始，M此时递减\r\n            list_sonson=[]\r\n            list_rest=[]\r\n            sum2=0\r\n            for c in a:\r\n                sum2+=c\r\n            if len(a)==M and sum2&lt;=Y:\r\n                list_sonson.append(a)\r\n                global sum1\r\n                sum1=len(list_sonson)\r\n                sum1+=sum1\r\n            else:\r\n                list_rest.extend(a)\r\n                if len(list_rest)==0:\r\n                    break\r\n                elif len(list_rest)==1:\r\n                    sum1+=1\r\n                else:\r\n                    perm(list_rest, 0, len(list_rest))\r\n                    M-=1\r\n                    analizy(M, Y)\r\n\r\n            sum.append(sum1)#把每一种价格排列，组成的组数放入sum1列表中，注意这里的顺序是和群排列的顺序一样的，一次可以找出对应的那价格排列\r\n\r\n\r\n\r\n\r\n\r\n\r\n#价格列表\r\nn = [4,5,35,46,12,59,25,46,45,29]\r\nperm(n, 0, len(n))\r\nanalizy(M=3,Y=82)#M是最大商品数，Y是订单最大金额\r\n\r\n#因为用min函数不能直接对列表求多个最小值相同及其下标。\r\nmin = min(sum)\r\nlist_dict=[]\r\nfor v in sum:\r\n    if v==min:\r\n        v_index=sum.index(v)\r\n        dic = {v:v_index}\r\n        list_dict.append(dic)\r\n        \r\nprint(\"全排列结果有{}种\".format(COUNT))\r\nprint(\"最小组数对应价格列表排列的下标和list_dict里对应的下标列表：\\n{}\".format(list_dict))#根据此列表可以找出对应的那个最少组数的价格排列，", "Konwledge_Point": "背包问题", "Question": ["拆单问题，将物品分成n个订单", ["有如下N个物品，价格为 {g1,g2,g3,g4,…,gn}，将物品分成订单，每个订单物品数量不超过M(int),每个子订单总金额不超过Y，但尽可能大，求怎么分单才能使得订单数（Num）值最小？（ps:可以理解为所有基本数据为int类型）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;看一下下面的代码&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/qq_43627087/article/details/88960098\" id=\"textarea_1669626215016_1669626238915_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;HDU1176天上掉馅饼&amp;#xff08;数塔问题&amp;#xff09;_邵光亮的博客-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;Description都说天上不会掉馅饼&amp;#xff0c;但有一天gameboy正走在回家的小径上&amp;#xff0c;忽然天上掉下大把大把的馅饼。说来gameboy的人品实在是太好了&amp;#xff0c;这馅饼别处都不掉&amp;#xff0c;就掉落在他身旁的10米范围内。馅饼如果掉在了地上当然就不能吃了&amp;#xff0c;所以gameboy马上卸下身上的背包去接。但由于小径两侧都不能站人&amp;#xff0c;所以他只能在小径上接。由于gameboy平时老呆在房间里玩游戏&amp;#xff0c;虽然在游戏中是个身手敏捷的高手&amp;#xff0c;...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1 md_link_url\"&gt;\n         https://blog.csdn.net/qq_43627087/article/details/88960098\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["dp代码找不到bug", ["都说天上不会掉馅饼，但有一天gameboy正走在回家的小径上，忽然天上掉下大把大把的馅饼。说来gameboy的人品实在是太好了，这馅饼别处都不掉，就掉落在他身旁的10米范围内。馅饼如果掉在了地上当然就不能吃了，所以gameboy马上卸下身上的背包去接。但由于小径两侧都不能站人，所以他只能在小径上接。gameboy每秒种只有在移动不超过一米的范围内接住坠落的馅饼。现在给这条小径如图标上坐标：", "\n", "\n", "为了使问题简化，假设在接下来的一段时间里，馅饼都掉落在0-10这11个位置。开始时gameboy站在5这个位置，因此在第一秒，他只能接到4,5,6这三个位置中其中一个位置上的馅饼。问gameboy最多可能接到多少个馅饼？（假设他的背包可以容纳无穷多个馅饼）", "Input", "输入数据有多组。每组数据的第一行为以正整数n(0<n<100000)，表示有n个馅饼掉在这条小径上。在结下来的n行中，每行有两个整数x,T(0<T<100000),表示在第T秒有一个馅饼掉在x点上。同一秒钟在同一点上可能掉下多个馅饼。n=0时输入结束。", "Output", "每一组输入数据对应一行输出。输出一个整数m，表示gameboy最多可能接到m个馅饼。", "提示：本题的输入数据量比较大，建议用scanf读入，用cin可能会超时。", "Sample", "Input", "6", "5 1", "4 1", "6 1", "7 2", "7 2", "8 3", "0", "Output", "4", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<math.h>", "\n", "#", "include", "<string.h>", "\n", "#", "include", "<algorithm>", " ", "\n", "using", " ", "namespace", " std;\n", "int", " dp[", "20", "][", "100500", "];\n", "int", " ", "main", "()", "{\n    ", "int", " n;\n    ", "while", "(", "scanf", "(", "\"%d\"", ",&n) && n!=", "0", "){\n        ", "int", " t=", "0", ";\n        ", "memset", "(dp,", "0", ",", "sizeof", "(dp));\n        ", "for", "(", "int", " i=", "1", ",x,T;i<=n;i++){\n            ", "scanf", "(", "\"%d%d\"", ",&x,&T);\n            ", "if", "(T==", "1", " && (x<", "4", "||x>", "6", ")) ;\n            ", "else", " ", "if", "(T==", "2", " && (x<", "3", "||x>", "7", ")) ;\n            ", "else", " ", "if", "(T==", "3", " && (x<", "2", "||x>", "8", ")) ;  ", "//由于gameboy初始位置在 5，所以此处列举的位置他接不到馅饼 ", "\n            ", "else", " ", "if", "(T==", "4", " && x==", "0", "||x==", "10", ") ;\n            ", "else", " ++dp[x][T];  ", "//计算某一时间某一地点有多少馅饼掉下 ", "\n            t=t>T?t:T;  ", "//计算总时间 ", "\n        }\n        ", "for", "(", "int", " i=", "0", ";i<=", "10", ";i++){   ", "//dp[i][j]表示第 j秒第 i的位置上最多可以拿到多少个馅饼 ", "\n            ", "for", "(", "int", " j=", "1", ";j<=t;j++){\n                ", "if", "(i!=", "0", ") dp[i][j]+=", "max", "(dp[i][j", "-1", "],", "max", "(dp[i+", "1", "][j", "-1", "],dp[i", "-1", "][j", "-1", "]));\n                ", "else", " dp[i][j]+=", "max", "(dp[i][j", "-1", "],dp[i+", "1", "][j", "-1", "]);\n            }\n        }\n        ", "int", " Max=", "0", ";\n        ", "for", "(", "int", " i=", "0", ";i<=", "10", ";i++){\n            Max=Max>dp[i][t]?Max:dp[i][t]; ", "//遍历最后的时间所有的地点，找到最大的那个 ", "\n        }\n        cout<<Max<<endl;\n    }\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "这个题把他简化一下就是一个变形的数塔\r\n数塔的每行就是时间，每列就是人参果掉下的位置的坐标\r\n所以我们要设置一个二维数组，用一个变量记录时间的最大值，来进行循环\r\n\r\n![图片说明](https://img-ask.csdn.net/upload/202004/19/1587283758_588862.png)\r\n\r\n这个是样例的输入数据，我在上面标上了行和列\r\n我在上面画了两条竖线，这样就更像数塔了，这两条线代表在他们外面的人参果是接不到的，那么我们要做的就是找出一条路径使得所有数字之和最大，那么不就是我们的数塔问题么？\r\n那么dp[0][5]就一定是接到最多人参果的地方，同时我们使用逆序也会使问题更方便，顺序的话，还要再加上一个二维数组去保存数据和\r\n\r\n具体代码你可以看一下这个文章\r\n[文章](https://blog.csdn.net/qq_45721778/article/details/105616305 \"文章\")", "Konwledge_Point": "背包问题", "Question": ["dp题，求大佬指点迷津，有币日后定补上", ["巧接人参果", "\n时间限制: 1 Sec  内存限制: 128 MB", "\n提交: 270  解决: 61", "\n[提交] [状态] [讨论版] [命题人:admin]", "\n题目描述", "\n唐僧率领徒弟孙悟空、猪八戒、沙和尚去西天取经，路经万寿山五庄观。 观主镇元大仙上天听道去了，临行嘱咐童子，大唐高僧路经此地，可取人参果好生款待。这人参果乃仙家之宝 ，食之能长生不老。师徒一行来到五庄观，观中童儿只将人参果款待唐僧 。悟空不甘受此冷落，加之贪吃的八戒在旁怂恿，便潜入果园偷吃人参仙果。 恰巧你也在那，于是你有缘与孙悟空一起摘人参果。不过这人参果遇金则落，遇土则遁。为此，孙悟空、猪八戒、沙和尚三人爬上果树用金箍棒等将人参果打落，而你则在树底下接人参果。 这人参果别处都不掉，就掉落在他身旁的10米范围内。人身果如果掉在了地上就不见了。当然你很聪明，可是看到这么多人身果，动作也变迟钝了，每秒种只有在移动不超过一米的范围内接住坠落的人身果。现在给你接人参果如图标上坐标： 为了使问题简化，假设在接下来的一段时间里，人参果都掉落在0-10这11个位置。开始时你站在5这个位置，因此在第一秒，他只能接到4,5,6这三个位置中期中一个位置上的馅饼。问你最多可能接到多少个人参果？（假设背包可以容纳无穷多个人参果）", "\n\n", "输入", "\n输入数据有多组。每组数据的第一行为以正整数n(0 < n < 100000)，表示有n个人参果掉下来。在接下来的n行中，每行有两个整数x,T(0 <= T < 100000),表示在第T秒有一个人参果掉在x点上。同一秒钟在同一点上可能掉下多个人身果。n=0时输入结束。", "\n\n", "输出", "\n每一组输入数据对应一行输出。输出一个整数m，表示你最多可能接到m个人参果。", "\n\n", "样例输入", "\n6", "\n5 1", "\n4 1", "\n6 1", "\n7 2", "\n7 2", "\n8 3", "\n0", "\n\n", "样例输出", "\n4"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用ChatGPT &lt;/p&gt;\n&lt;p&gt;这个错误提示是因为在 MainMenu.ui 文件中&amp;#xff0c;您为 QPushButton 控件命名为 work、goToSchool 等&amp;#xff0c;这些名称与 MainMenuWindow 类中的方法名称重复了&amp;#xff0c;导致程序出现错误。&lt;/p&gt;\n&lt;p&gt;为了解决这个问题&amp;#xff0c;您可以尝试以下方法之一&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1、修改控件名称&lt;br /&gt;您可以在 MainMenu.ui 文件中修改控件的名称&amp;#xff0c;以避免与 MainMenuWindow 类中的方法名称重复。例如&amp;#xff0c;您可以将 work 控件的名称修改为 workButton&amp;#xff0c;将 goToSchool 控件的名称修改为 goToSchoolButton&amp;#xff0c;以此类推。&lt;/p&gt;\n&lt;p&gt;2、修改方法名称&lt;br /&gt;您也可以修改 MainMenuWindow 类中的方法名称&amp;#xff0c;以避免与 QPushButton 控件的名称重复。例如&amp;#xff0c;您可以将 work 方法的名称修改为 workButtonClicked&amp;#xff0c;将 goToSchool 方法的名称修改为 goToSchoolButtonClicked&amp;#xff0c;以此类推。&lt;/p&gt;\n&lt;p&gt;修改后的代码如下所示&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; PyQt5 &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; QtWidgets, QtGui, QtCore\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; MainMenu    &lt;span class=\"hljs-comment\"&gt;# 这是窗体文件&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; sys\n \n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;MainMenuWindow&lt;/span&gt;(QtWidgets.QMainWindow, MainMenu.Ui_MainMenu):\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;__init__&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;super&lt;/span&gt;(MainMenuWindow, self).__init__()\n        self.setupUi(self)\n \n        &lt;span class=\"hljs-comment\"&gt;# 将 QPushButton 控件的 clicked 信号连接到对应的方法上&lt;/span&gt;\n        self.workButton.clicked.connect(self.workButtonClicked)\n        self.goToSchoolButton.clicked.connect(self.goToSchoolButtonClicked)\n        self.showButton.clicked.connect(self.showButtonClicked)\n        self.studyButton.clicked.connect(self.studyButtonClicked)\n        self.openBagButton.clicked.connect(self.openBagButtonClicked)\n        self.goToStoreButton.clicked.connect(self.goToStoreButtonClicked)\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;workButtonClicked&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;workButtonClicked&amp;#34;&lt;/span&gt;)\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;goToSchoolButtonClicked&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;goToSchoolButtonClicked&amp;#34;&lt;/span&gt;)\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;showButtonClicked&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;showButtonClicked&amp;#34;&lt;/span&gt;)\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;studyButtonClicked&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;studyButtonClicked&amp;#34;&lt;/span&gt;)\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;openBagButtonClicked&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;openBagButtonClicked&amp;#34;&lt;/span&gt;)\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;goToStoreButtonClicked&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;goToStoreButtonClicked&amp;#34;&lt;/span&gt;)\n \n \n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__ &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:\n    app &amp;#61; QtWidgets.QApplication(sys.argv)\n    mainMenuWindow &amp;#61; MainMenuWindow()\n    mainMenuWindow.show()\n    sys.exit(app.exec_())\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在这个代码中&amp;#xff0c;我们将 QPushButton 控件的名称修改为 workButton、goToSchoolButton 等&amp;#xff0c;并且将这些控件的 clicked 信号连接到对应的方法上&amp;#xff0c;这样就可以避免命名冲突了。&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["PyQt5,UI与逻辑代码分离出错", ["我使用PyQt5写一个窗体（GUI）程序，我尝试逻辑代码与UI分离，结果第一次成功了，第二次换了个窗体，出错了。", "\n", "错误报告：", "\n", "D:\\Program\\Python\\venv\\Scripts\\", "python", ".", "exe", " D:\\Program\\Python\\Python日常编程\\LifeReopensForGUI\\begin.", "py", " \nTraceback (most recent ", "call", " ", "last", "):\n  File ", "\"D:\\Program\\Python\\Python日常编程\\LifeReopensForGUI\\begin.py\"", ", ", "line", " ", "15", ", in ", "<module>", "\n    mainMenuWindow.show()\nTypeError: ", "'QPushButton'", " object ", "is", " not callable\n\n进程已结束,退出代码", "1", "\n", "\n", "逻辑代码如下:", "\n", "from", " ", "PyQt5", " ", "import", " QtWidgets, QtGui, QtCore\n", "import", " MainMenu    # 这是窗体文件\n", "import", " sys\n", "\n\n", "class", " ", "MainMenuWindow", "(", "QtWidgets", ".", "QMainWindow", ", ", "MainMenu", ".", "Ui_MainMenu", "):\n    def __init__(", "self", "):\n        super(", "MainMenuWindow", ", ", "self", ").__init__()\n        self.setupUi(", "self", ")\n\n\nif __name__ == '__main__':\n    app = ", "QtWidgets", ".", "QApplication", "(", "sys", ".", "argv", ")\n    mainMenuWindow = ", "MainMenuWindow", "()\n    mainMenuWindow.show()\n    sys.exit(", "app", ".", "exec_", "())", "\n", "\n", "UI文件代码如下:", "\n", "# -*- coding: utf-", "8", " -*-\n\n# Form implementation generated from reading ui file '", "MainMenu", ".", "ui'\n#\n# Created by: PyQt5 UI code generator ", "5.15", ".", "9", "\n#\n# WARNING: Any manual changes made ", "to", " this file will be lost ", "when", " pyuic5 is\n# run again.  Do not edit this file unless you know what you are doing.\n\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\nimport sys\nfrom PyQt5.QtWidgets import QMainWindow\n\n\n", "class", " ", "Ui_MainMenu(", "object", ")", ":\n    def setup", "Ui(", "self", ", MainMenu)", ":\n        ", "MainMenu", ".", "set", "ObjectName(", "\"MainMenu\"", ")", "\n        ", "MainMenu", ".", "resize(", "800", ", ", "600", ")\n        self.centralwidget = QtWidgets.", "QWidget(MainMenu)", "\n        self.centralwidget.set", "ObjectName(", "\"centralwidget\"", ")", "\n        self.label = QtWidgets.", "QLabel(", "self", ".", "centralwidget", ")", "\n        self.label.set", "Geometry(QtCore.QRect(0, 0, 801, 271)", ")\n        self.label.set", "Text(", "\"\"", ")", "\n        self.label.set", "Pixmap(QtGui.QPixmap(", "\":/png/resource Files/人生重开.png\"", ")", ")\n        self.label.set", "ScaledContents(True)", "\n        self.label.set", "ObjectName(", "\"label\"", ")", "\n        self.verticalLayoutWidget = QtWidgets.", "QWidget(", "self", ".", "centralwidget", ")", "\n        self.verticalLayoutWidget.set", "Geometry(QtCore.QRect(10, 280, 781, 261)", ")\n        self.verticalLayoutWidget.set", "ObjectName(", "\"verticalLayoutWidget\"", ")", "\n        self.verticalLayout = QtWidgets.", "QVBoxLayout(", "self", ".", "verticalLayoutWidget", ")", "\n        self.verticalLayout.set", "ContentsMargins(0, 0, 0, 0)", "\n        self.verticalLayout.set", "ObjectName(", "\"verticalLayout\"", ")", "\n        self.work = QtWidgets.", "QPushButton(", "self", ".", "verticalLayoutWidget", ")", "\n        self.work.set", "ObjectName(", "\"work\"", ")", "\n        self.verticalLayout.add", "Widget(", "self", ".", "work", ")", "\n        self.goToSchool = QtWidgets.", "QPushButton(", "self", ".", "verticalLayoutWidget", ")", "\n        self.goToSchool.set", "ObjectName(", "\"goToSchool\"", ")", "\n        self.verticalLayout.add", "Widget(", "self", ".", "goToSchool", ")", "\n        self.show = QtWidgets.", "QPushButton(", "self", ".", "verticalLayoutWidget", ")", "\n        self.show.set", "ObjectName(", "\"show\"", ")", "\n        self.verticalLayout.add", "Widget(", "self", ".", "show", ")", "\n        self.study = QtWidgets.", "QPushButton(", "self", ".", "verticalLayoutWidget", ")", "\n        self.study.set", "ObjectName(", "\"study\"", ")", "\n        self.verticalLayout.add", "Widget(", "self", ".", "study", ")", "\n        self.openBag = QtWidgets.", "QPushButton(", "self", ".", "verticalLayoutWidget", ")", "\n        self.openBag.set", "ObjectName(", "\"openBag\"", ")", "\n        self.verticalLayout.add", "Widget(", "self", ".", "openBag", ")", "\n        self.goToStore = QtWidgets.", "QPushButton(", "self", ".", "verticalLayoutWidget", ")", "\n        self.goToStore.set", "ObjectName(", "\"goToStore\"", ")", "\n        self.verticalLayout.add", "Widget(", "self", ".", "goToStore", ")", "\n        ", "MainMenu", ".", "set", "CentralWidget(", "self", ".", "centralwidget", ")", "\n        self.menubar = QtWidgets.", "QMenuBar(MainMenu)", "\n        self.menubar.set", "Geometry(QtCore.QRect(0, 0, 800, 26)", ")\n        self.menubar.set", "ObjectName(", "\"menubar\"", ")", "\n        ", "MainMenu", ".", "set", "MenuBar(", "self", ".", "menubar", ")", "\n        self.statusbar = QtWidgets.", "QStatusBar(MainMenu)", "\n        self.statusbar.set", "ObjectName(", "\"statusbar\"", ")", "\n        ", "MainMenu", ".", "set", "StatusBar(", "self", ".", "statusbar", ")", "\n\n        self.retranslate", "Ui(MainMenu)", "\n        ", "QtCore", ".", "QMetaObject", ".", "connect", "SlotsByName(MainMenu)", "\n\n    def retranslate", "Ui(", "self", ", MainMenu)", ":\n        _translate = ", "QtCore", ".", "QCoreApplication", ".", "translate\n        ", "MainMenu", ".", "set", "WindowTitle(", "_translate", "(", "\"MainMenu\"", ", ", "\"主界面\"", ")", ")\n        self.work.set", "Text(", "_translate", "(", "\"MainMenu\"", ", ", "\"工作\"", ")", ")\n        self.goToSchool.set", "Text(", "_translate", "(", "\"MainMenu\"", ", ", "\"去学校\"", ")", ")\n        self.show.set", "Text(", "_translate", "(", "\"MainMenu\"", ", ", "\"显示属性\"", ")", ")\n        self.study.set", "Text(", "_translate", "(", "\"MainMenu\"", ", ", "\"学习\"", ")", ")\n        self.openBag.set", "Text(", "_translate", "(", "\"MainMenu\"", ", ", "\"打开背包\"", ")", ")\n        self.goToStore.set", "Text(", "_translate", "(", "\"MainMenu\"", ", ", "\"去商店\"", ")", ")\n", "\n", "运行结果:", "\n", "D:\\Program\\Python\\venv\\Scripts\\", "python", ".", "exe", " D:\\Program\\Python\\Python日常编程\\LifeReopensForGUI\\begin.", "py", " \nTraceback (most recent ", "call", " ", "last", "):\n  File ", "\"D:\\Program\\Python\\Python日常编程\\LifeReopensForGUI\\begin.py\"", ", ", "line", " ", "15", ", in ", "<module>", "\n    mainMenuWindow.show()\nTypeError: ", "'QPushButton'", " object ", "is", " not callable\n\n进程已结束,退出代码", "1", "\n", "\n", "我的解答思路和尝试过的方法:", "\n", "我先在UI文件运行窗体,发现没问题.窗体正常显示.", "我把窗体类继承的改为QMainWindow,还是有问题."]], "Tag": "算法设计"}
{"Answer": "求最大受益，思想是把价值最大的先放入依次进行比较，再把价重比最大的进行比较。在比较两者的结果 进行取舍\r\n我以价值最大为例进行比较\r\n第一步：放入w6            w剩=11         n剩=6          p总=18\r\n第二步：放入w2            w剩=6           n剩=5          p总=18+15\r\n第三步：放入w0            w剩=4          n剩=4           p总=18+15+10      \r\n第四步：放入w3            因为w3&gt;w剩   当7/4w3 刚好装满      n=3    p总待=18+15+10+7/4*7 = 55.25 待定\r\n第五步：舍弃第四步 \r\n             放入w4            w剩=3           n=3    p总验=p总=18+15+10+6\r\n第六步  放入w1             w剩=0     刚好装满   n=2   p总验=18+15+10+6+5=54   （验证）\r\n    54&lt;55.25\r\n\t当按照价值最大为例进行比较\t最大收益为（1,0,0,7/4,1,1）\r\n\t\t\r\n\t\t再以价重比最大按照上面的方法进行比较   价重比就是价格除以重量，得出单价进行比较\r\n\t\t\r\n\t\t结果就是：\r\n\t\t就是10+5*2/3+15+6+18+3=55（1/3）\r\n\t\t\r\n\t\t55.25&lt;55（1/3）\r\n\t\t\r\n\t\t所以(x0,x1,x2,x3,x4,x5,x6)=(1,2/3,1,0,1,1,1)\r\n\t\t\r\n\t\tps：你的那个注意细节 你把乘号写成加好了，10+5*2/3+15+6+18+3=55（1/3）", "Konwledge_Point": "背包问题", "Question": ["贪心法 背包问题 一道简单的实际问题 不知道大难如何计算出来的。", ["问题：设有背包问题实例n=7，M=15（背包载重），（w0,w1,...,w6）=(2,3,5,7,1,4,1),", "\n物品装入背包的收益为：(p0,p1,p2,p3,p4,p5,p6)=(10,5,15,7,6,18,3).", "\n求这一实例的最优解和最大收益", "\n答案：最优解：（p0/wo,p1/w1,p2/w2,p3/w3,p4/w4,p5/w5,p6/w6）=(10/2,5/3,15/5,7/7,6/1,18/4,3/1)", "(x0,x1,x2,x3,x4,x5,x6)=(1,2/3,1,0,1,1,1)", "\n最大收益：10+5+2/3+15+6+18+3=55（1/3）", "\n\n", "我想问加粗斜体的这个答案是怎么求出来的？有公式还是什么思想？", "\n如果按照上一步直接计算答案应该是（5,1.667,3,1,6,4,5,3）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题主&amp;#xff0c;上一个给你发的那个输入顺序换下就对了&amp;#xff0c;不用重新发题&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;//一维数组解法&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; MAX_M 12880        &lt;span class=\"hljs-comment\"&gt;//最大限重&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; MAX_N 3402        &lt;span class=\"hljs-comment\"&gt;// 最大种类数&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; max(a,b) a&amp;gt;b?a:b&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dp[MAX_M &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; weights[MAX_N &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; values[MAX_N &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m, i, j;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;n , &amp;amp;m);&lt;span class=\"hljs-comment\"&gt;//n是种类&amp;#xff0c;m是限制重量&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;values[i],&amp;amp;weights[i] );\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; m; j &amp;gt;&amp;#61; weights[i]; j--) {\n            dp[j] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(dp[j], dp[j - weights[i]] &amp;#43; values[i]);\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, dp[m] );\n}\n&lt;span class=\"hljs-comment\"&gt;/*\n5 15\n4 12\n2 2\n2 1\n1 1\n10 4\n*/&lt;/span&gt;\n \n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/430400106636182.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["大学计算机-背包问题 求解 ，答案", ["背包问题的定义是：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量", "内，我们如何选择，才能使得物品的总价格最高。下图是背包问题的一个例子，应该选择哪", "些盒子，才能使价格尽可能地大，并且保持总重量不超过 15 kg？所选物品的总价值是多少？", "\n"]], "Tag": "算法设计"}
{"Answer": "return Math.max(getSValue(index - 1, totalWeight - w[index]) + v[index], getSValue(index - 1, resiWeight));\r\n\r\n把里面的totalWeight改成resiWeight。你的函数参数是resiWeight，而不是totalWeight，如果按你写的，程序跑起来getSValue(index，resiWeight)的第二个函数参数值始终不变，所以始终有resiWeight&gt;=w[index]", "Konwledge_Point": "背包问题", "Question": ["用不同方式的递归来解决01背包问题的疑问", ["01背包问题，假设表示各个物品重量的数组为w,对应的价值为数组v,这里用两种方式进行解决，第一种方式：反向遍历，即我从后往前进行选择，即从w.length-1到0进行选择，第二种方式：正向遍历，从第0个物品开始往第w.length-1个物品开始决策，具体代码如下：", "\n//方式一：反向遍历，即我从后往前进行选择，即从w.length-1到0进行选择，", "\n\n", " public class Knapsack {\n    //表示各个物品的重量\n  public static int w[];\n    //表示各个物品的价值\n   public static int v[];\n   //表示背包容量\n   public static int totalWeight;\n   //用于存储计算过的子问题的解的二维数组\n   public static int[][] tempArray;\n    public static void main(String[] args) {\n        w = new int[]{3, 4,5,2,7};\n        v = new int[]{9,3,21,4,33};\n        totalWeight = 15;\n        int len = w.length;\n        System.out.println(getSValue(len-1,15));\n    }\n    private static int getSValue(int index, int resiWeight) {\n        //暴力搜索来获取的背包问题的最大价值,返回值 就是这个最大值，函数本身的含义表示选取到第index个物品时已经获得的价值,第二个参数表示背包还剩余的容量\n        if (resiWeight<=0)\n            return 0;\n        if (index==-1)\n            return 0;\n\n        if (resiWeight>=w[index]) {\n           return Math.max(getSValue(index - 1, totalWeight - w[index]) + v[index], getSValue(index - 1, resiWeight));\n    }\n        else {\n            return getSValue(index-1,resiWeight);\n        }\n\n    }\n}\n", "\n\n", "//方式二：反向来写的话，即从第0个物品开始决策直到第w.length-1个物品，代码如下：", "\n\n", " public static int f(int cur,int max)\n    {\n        if(cur==num)//物品已经尝试完,这里必须是cur==num或cur<=num,说明决策到了第num-1个物品，已到数组的最后一个元素进行决策，不管怎么决策，将调用的是f(num)，这个物品根本不存在，注意这里的判断是写在了递归式前面\n            return 0;\n        if(max<=0)//背包已经装满，没有容量了\n            return 0;\n        if(max<w[cur])//背包容量小于该商品的重量\n            return f(cur+1,max);\n        else\n        {\n            return Math.max(f(cur+1,max), f(cur+1,max-w[cur])+v[cur]);\n        }\n    }\n\n", "\n\n", "上述两种方式应该都可以，但是正向方式得到的最大价值是70，明显是把所有物品都选了，才有70，但是重量和超过背包容量15，肯定有问题，不知到错在哪里，但是反向来写的话，即从第0个物品开始决策直到第w.length-1个物品，，，得到的结果是63，这个对的，为什么第一中方式的结果是错的，求大神解惑？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考一下&amp;#xff1a;&lt;a href=\"https://www.cnblogs.com/congqiandehoulai/p/8532869.html\"&gt;https://www.cnblogs.com/congqiandehoulai/p/8532869.html&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;如果对你有帮助&amp;#xff0c;可以点击我这个回答右上方的【采纳】按钮&amp;#xff0c;给我个采纳吗&amp;#xff0c;谢谢&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["大规模0—1背包问题求", ["当你用LINGO求解了100个物品的背包问题时，你是怎样", "把那些不装的物品挑出来的？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如果你是在学习算法设计&amp;#xff0c;那么这一篇可能就是你所需要的&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/huayula/article/details/106339138\" id=\"textarea_1631715054150_1631715195263_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;采用优先队列式分枝限界法求解0/1背包问题-算法设计与分析报告C/C&amp;#43;&amp;#43;版_爱酷码的博客-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;设计如下这个pdf文档有点长&amp;#xff0c;截图分段了&amp;#xff0c;需要可以直接下载该文档代码如下//author:rgh//采用优先队列式分枝限界法求解0/1背包问题#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;queue&amp;gt;using namespace std;#define MAXN 20\t\t\t\t\t\t//最多可能物品数//问题表示int n&amp;#61;3,W&amp;#61;30;int w[]&amp;#61;{0,16,15,15};\t\t\t\t//重量&amp;#xff0c;下标0不用int v[]&amp;#61;{0.&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/huayula/article/details/106339138&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["求一篇分支限界法求0-1背包问题的代码", ["求一篇分支限界法求0-1背包问题的代码，希望可以用c语言或者c加加，但是C加加结构体里面希望不要有函数，俺还没有学结构体函数。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你题目的解答代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;n,&lt;span class=\"hljs-keyword\"&gt;c&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;()\nn &amp;#61; &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(n)\n&lt;span class=\"hljs-keyword\"&gt;c&lt;/span&gt; &amp;#61; float(&lt;span class=\"hljs-keyword\"&gt;c&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;w&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-keyword\"&gt;list&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(float,&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;()))\nli &amp;#61; sorted(enumerate(&lt;span class=\"hljs-keyword\"&gt;w&lt;/span&gt;,start&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;), key&amp;#61;lambda &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;: &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &amp;#61; []\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i,v in li:\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;c&lt;/span&gt;-v&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;c&lt;/span&gt; -&amp;#61; v\n    &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(i)\n&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;sort&lt;/span&gt;()\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;))\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(str,&lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/048170276846139.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "背包问题", "Question": ["python部分背包问题 贪心算法", ["给出n个物体，第i个物体重量为w_i.选择尽量多的物体，使得总重量不超过C.其中参数n为正整数，w_i，C为正的有理数。", "\n", "输入格式:", "第一行输入n和C，用空格隔开。", "\n", "第二行输入w_1, w_2 ...w_n.共n个数，用空格隔开。", "\n", "输出格式:", "第一行输出选择的物体数量。", "\n", "第二行按从小到大的顺序输出选择的物体编号i。", "\n", "注：如果物体数量相同有多种选择，请输出物体重量和最小的物体编号。", "第一组测试用例是", "5 10", "4 2 3 1 5", "输出", "4", "1 2 3 4", "第二组是", "5 10.1", "4.2 1.9 3.1 1 5", "输出", "3", "2 3 4"]], "Tag": "算法设计"}
{"Answer": "输入\n1\n20 3\n10 5\n6 2\n5 4\n\n输出\n75\n\nhint\n小王子花了5秒钟做完第3件事，然后花15秒钟去自习", "Konwledge_Point": "背包问题", "Question": ["一个简单的背包问题dp", ["找不出状态转移方程", "\n\n", "描述", "\n\n", "一大堆期末考试来袭，草滩小王子被迫去上自习了。", "\n\n", "除了自习，草滩小王子还想到了n件可以做的事，n件事可以选一些去做，", "\n\n", "这些事会花费一定的时间并且必须一次完成不停止（本题中时间的最小单位为1秒）", "\n\n", "并且可以提高（降低）草滩小王子自习的效率（神奇的是效率的提升是累加的），", "\n\n", "草滩小王子一开始的效率只有1。", "\n\n", "草滩小王子可以在任意时刻开始自习任意时间（效率不会因此降低），假设当前的效率为 ki ，", "\n\n", "这段时间 ti内获得的收获 si=ti×ki 。", "\n\n", "现在草滩小王子共有t秒的时间，该如何分配时间获得最大的自习收获呢。", "\n\n", "输入", "\n\n", "第一行是一个整数T(T<=10)，代表测试数据的组数。 对于每组测试数据： 第一行含两个个整数 t(0≤t≤1000),n(1≤n≤10000) 接下来n行，第行包括2个整数a,b(0≤a≤100,0≤b≤30)。 a代表第i件事所花的时间,b代表第i件事所提升的效率", "\n\n", "输出", "\n\n", "对于每组测试数据，输出一行，表示草滩小王子能够获得的最大收获"]], "Tag": "算法设计"}
{"Answer": "直接说题目是什么你这么问，没人知道代码要干嘛", "Konwledge_Point": "背包问题", "Question": ["acm背包问题求大神赐教", [" for(i = 1; i<=n; i++)  \n{  \n    for(j = v; j>=c[i]; j--)//在这里，背包放入物品后，容量不断的减少，直到再也放不进了  \n    {  \n        f[i][v]=max(f[i-1][v],f[i-1][v-c[i]]+w[i]);  \n    }  \n}  \n", "\n\n", "请问 第一个循环 i =1 之后 第二个循环 一直在放编号为1的石头啊？这两个循环都是干嘛的？那个 f[i][v] 数组 从00到 iv 都变成什么样了？求大神赐教"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;都报啥错啊&lt;br /&gt;for(i&amp;#61;0;i&amp;lt;n;i&amp;#43;&amp;#43;)&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;if(z[i]&amp;lt;z[i&amp;#43;1])&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;swap(z,w,v,i);&lt;br /&gt;}&lt;br /&gt;这里是有问题的。有效值总共就n个&amp;#xff0c;当i&amp;#61;n-1时&amp;#xff0c;z[i&amp;#43;1]是个无效数&amp;#xff0c;进行比较处理就不知道会怎么样了。改为i&amp;lt;n-1&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["背包问题动态规划没搞懂报错原因", ["没有懂报错的原因，不知道该怎么该，还是思路有问题", "\n", "#include<stdio.h>", "void swap(float z,float w,float v,int i);", "int main()", "{", "    float w[20],v[20],c,x[20],z[20];", "    float sum,l[20];//l放入背包的部分重量    sum价值总额和", "    int n,i;", "    sum =0;", "    printf(\"输入物品数量：\");", "    scanf(\"%d\",&n);", "    printf(\"输入背包容量：\");", "    scanf(\"%f\",&c);", "    printf(\"输入物品重量：\");", "    for(i=0;i<n;i++)", "    {", "        scanf(\"%f\",&w[i]);", "     }", "     printf(\"输入物品价值：\");", "    for(i=0;i<n;i++)", "    {", "        scanf(\"%f\",&w[i]);", "     }", "     //单位价值", "     for(i=0;i<n;i++)", "     {", "         z[i]=v[i]/w[i];", "      }", "      for(i=0;i<n;i++)", "      {", "          if(z[i]<z[i+1])", "          {", "              swap(z,w,v,i);", "          }", "      }", "      for(i=0;c!=0;i++)", "      {", "          if(w[i]<=c)", "          {", "              x[i]=1;", "              l[i]=w[i];", "              c=c-w[i];", "              sum=sum+v[i];", "          }", "\n", "    if(w[i]>c)\n    {\n        x[i]=", "1", ";\n        l[i]=c;\n        sum=sum+c*z[i];\n    }\n  }\n  \n  //输出\n  for(i=", "0", ";i<n;i++) \n  {\n      if(x[i]==", "1", ")\n      {\n          printf(", "\"放入重量为%f，价值为%f的物品，放入重量为%f：\"", ",w[i],v[i],l[i]);\n      }\n  }\n  printf(", "\"总价值为：%f\"", ",sum);\n  \n", "\n", " } ", "\n", "void swap(float z,float w,float v,int i)", "{", "    float temp;", "    temp=z[i];", "    z[i]=z[i+1];", "    z[i+1]=temp;", "\n", "temp=w", "[i]", ";\nw", "[i]", "=w", "[i+1]", ";\nw", "[i+1]", "=temp;\n\ntemp=v", "[i]", ";\nv", "[i]", "=v", "[i+1]", ";\nv", "[i+1]", "=temp;\n", "\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码格式较乱&amp;#xff0c;不过猜测问题出在x &amp;#61; y这里&amp;#xff0c;列表的浅拷贝&amp;#xff0c;两个变量指向了同一个列表地址。所以后面执行到y[k] &amp;#61; 0的时候&amp;#xff0c;即使没有再赋值&amp;#xff0c;x也会变成和y一样全0的列表。&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["回溯法解决0-1背包问题", ["结果的最优解x莫名其妙就被改了，看了好几遍都不知道在哪里改的 ", "\n", "def bound(cv, cw, w, v, k, dw, n):  #对剩余物品做贪心选择", "    b = cv  #当前价值总量", "    c = cw  #当前背包已用容量", "    for i in range(k+1, n):", "        if c+w[i] <= dw:", "            c = c + w[i]", "            b = b + v[i]", "        else:", "            b = b + v[i]*((dw-c)/w[i])", "            break", "    return b", "\n", "def bt_Knapsack(dw, n, w, v, fw, fv, x):", "    cw = cv = 0", "    k = 0   #表示第k+1件物品", "    y = [0 for i in range(n)] #设置临时解向量", "    while(1):", "        while k<n and (cw+w[k])<=dw:", "            cw = cw + w[k]", "            cv = cv + v[k]", "            y[k] = 1", "            k = k + 1", "        if k>=n:  #全部考查完，找到可行解", "            fv = cv", "            print('value:',fv)", "            fw = cw", "            x = y", "            print('solution x:', x)  # 最优解", "            k = n-1", "        else:  #k超重，不能装入", "            y[k] = 0", "        while bound(cv, cw, w, v, k, dw, n) <= fv:  #无更优解", "            while k != -1 and y[k] != 1:  # 回溯", "                k = k - 1", "            if k == -1:", "                break", "            y[k] = 0", "            cw = cw - w[k]", "            cv = cv - v[k]", "        if k == -1:", "            break", "        k = k + 1", "    print('maxValue:', fv)  # 最优值", "    print('solution:', x)  # 最优解", "\n", "n = 8", "dw = 110", "w = [1,11,21,23,33,43,45,55]", "v = [11,21,31,33,43,53,55,65]", "x = [0 for i in range(n)]", "fw = 0", "fv = -1  #已找到的某个可行解的最大价值。求最大，初值为-1", "bt_Knapsack(dw, n, w, v, fw, fv, x)", "\n"]], "Tag": "算法设计"}
{"Answer": "选取价值最大者。反例：\r\nW=30\r\n物品：A B C\r\n重量：28 12 12\r\n价值：30 20 20\r\n根据策略，首先选取物品A，接下来就无法再选取了，可是，选取B、C则更好。\r\n选取单位重量价值最大的物品。反例：\r\nW=30\r\n物品：A B C\r\n重量：28 20 10\r\n价值：28 20 10\r\n根据策略，三种物品单位重量价值一样，程序无法依据现有策略作出判断.\r\n\r\n使用动态规划来处理背包问题: \r\n背包的状态转换方程 f[i,j] = Max{ f[i-1,j-Wi]+Pi( j &gt;= Wi ),  f[i-1,j] }\r\n         f[i,j]表示在前i件物品中选择若干件放在承重为 j 的背包中，可以取得的最大价值。\r\n         Pi表示第i件物品的价值。\r\n\r\n参考代码:\r\n\r\n```\r\n #include &lt;iostream&gt;\r\n#include &lt;vector&gt; \r\nusing namespace std;\r\n//物品类 \r\nclass packitem{\r\n\tpublic:\r\n\t\tpackitem(int w, int v):weight(w), value(v){}\r\n\t\tint weight;\r\n\t\tint value;\r\n};\r\nint matrix[5][10] = {0};\r\nint maxValue(int matrix[][10], vector&lt;packitem*&gt; vecpack, int bagsize, int bagweight){\r\n\tfor(int i = bagsize - 1; i &gt;= 0; --i){\r\n\t\tfor(int j = 0; j &lt; bagweight; ++j){\r\n\t\t\tpackitem item = *vecpack[i];\r\n\t\t\tif(item.weight &gt; j + 1){\r\n\t\t\t\t//当前背包不能装下此物品\r\n\t\t\t\tif(0 == j){\r\n\t\t\t\t\tmatrix[i][j] = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tmatrix[i][j] = matrix[i + 1][j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tint valueInbag = 0;\r\n\t\t\t\tif( i == bagsize - 1|| j - item.weight + 1 &lt; 0){\r\n\t\t\t\t\tmatrix[i][j] = item.value;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tint tmp = 0;\r\n\t\t\t\t\tif (j - item.weight &gt;= 0)\r\n\t\t\t\t\t\ttmp = j - item.weight;\r\n\t\t\t\t\tvalueInbag = matrix[i + 1][tmp] + item.value;\r\n\t\t\t\t\tmatrix[i][j] = max(matrix[i + 1][j], valueInbag);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor(int i = 0; i &lt; bagsize; ++i){\r\n\t\tfor(int j = 0; j &lt; bagweight; ++j){\r\n\t\t\tcout&lt;&lt;matrix[i][j]&lt;&lt;\" \"; \r\n\t\t}\r\n\t\tcout&lt;&lt;endl;\r\n\t}\r\n\treturn matrix[0][bagweight - 1];\r\n\t\r\n}\r\nint main()\r\n{\r\n\tvector&lt;packitem*&gt; tmp; \r\n\tint w[] = {2,2,6,5,4};\r\n\tint v[] = {6,3,5,4,6};\r\n\tint bagweight = 10;\r\n\tfor(int i = 0; i &lt; 5; ++i){\r\n\t\ttmp.push_back(new packitem(w[i], v[i]));\r\n\t}\r\n\tint result = maxValue(matrix, tmp, 5, bagweight);\r\n\t\r\n\tfor(int i = 0; i &lt; 5; ++i){\r\n\t\tdelete tmp[i];\r\n\t}\r\n\ttmp.clear();\r\n\t\r\n\tcout&lt;&lt;result&lt;&lt;endl;\r\n\treturn 0;\r\n}\r\n```", "Konwledge_Point": "背包问题", "Question": ["背包算法最优解的问题", ["若果把背包问题 直接按价值降序排列 和 按单位质量价值降序排列 两者的结果进行比较,能不能得出最优解?如果不能,在不涉及递归和穷举的前提下,有什么方法可以得出最优解?"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;根本区别就是多了一个维度&amp;#xff0c;你需要遍历更多次&lt;br /&gt;也可以说没有根本区别&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["一维背包问题和二维背包问题根本区别", ["一维背包问题和二维背包问题还有完全背包问题的根本区别在哪里啊？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;01背包问题&amp;#xff0c;可以使用动态规划处理&amp;#xff0c;详细代码如下&amp;#xff0c;望采纳&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-cpp\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; N &amp;#61; &lt;span class=\"hljs-number\"&gt;1010&lt;/span&gt;;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; w[N], c[N];  &lt;span class=\"hljs-comment\"&gt;// w[i] 表示第 i 件物品的重量&amp;#xff0c;c[i] 表示当前可选的第 i 件物品的数量&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f[N][N];  &lt;span class=\"hljs-comment\"&gt;// f[i][j] 表示在前 i 件物品中选择一些使得重量不超过 j 时的最大价值&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; path[N];  &lt;span class=\"hljs-comment\"&gt;// path[i] 表示第 i 个数在哪一行被更新&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i &amp;#43;&amp;#43; ) &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;w[i]);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i &amp;#43;&amp;#43; ) &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;c[i]);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;m);\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i &amp;#43;&amp;#43; )\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt;&amp;#61; m; j &amp;#43;&amp;#43; )\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; k &amp;lt;&amp;#61; c[i] &amp;amp;&amp;amp; k * w[i] &amp;lt;&amp;#61; j; k &amp;#43;&amp;#43; )\n            {\n                &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; val &amp;#61; f[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j - k * w[i]] &amp;#43; k * w[i];\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (val &amp;gt; f[i][j])\n                {\n                    f[i][j] &amp;#61; val;\n                    path[j] &amp;#61; i;\n                }\n            }\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, f[n][m]);\n\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; m;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (k)\n    {\n        c[path[k]] -- ;\n        k -&amp;#61; w[path[k]];\n    }\n\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; res &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i &amp;#43;&amp;#43; )\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c[i]) res &amp;#43;&amp;#43; ;\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, res);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i &amp;#43;&amp;#43; )\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c[i]) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, i);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["背包问题求解zsbd", ["D31s9. 装物品方案（小内存）", "\n", "时间限制：2.0s 内存限制：16.0MB Special Judge 代码提交间隔：5分钟(现在可以提交)", "问题描述", "有 件物品，第 件物品的重量为 （整数）。", "\n", "对于给定的整数 ， 请选择一些物品，使得拼出的重量不超过 ，请问在此前提下能拼出的最大重量是多少？具体的方案是怎样的？", "\n", "输入格式", "输入的第一行包含一个整数 ，表示物品数量。", "\n", "第二行包含 个整数 , , , ，分别为每个物品的重量。", "\n", "最后一行包含一个整数 。", "\n", "输出格式", "输出的第一行包含一个整数 ，表示答案。", "\n", "第二行包含一个整数 ，表示要选择的物品个数。", "\n", "第三行包含 个整数，为每个选择的物品的编号，按照从小到大的顺序输出，相邻整数之间使用一个空格分隔。", "\n", "样例输入", "3", "4 4 6", "12", "Data", "样例输出", "10", "2", "1 3", "Data", "以下答案也正确", "\n", "10", "2", "2 3", "\n", "这道背包问题我一开始打算用回溯做，但会超时和错误，现在打算还是老老实实用背包做，请各方神圣帮本蒟蒻看看吧！", "急！在线蹲答案！", "好回答立刻采纳！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于Monster 组和GPT的调写&amp;#xff1a;&lt;br /&gt;可以在代码中增加一个循环&amp;#xff0c;在每次放入背包之前判断是否有余地&amp;#xff0c;如果有余地则再次放入。代码如下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;v &amp;#61; [&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;]\nval &amp;#61; [&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;120&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;280&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;]\nnum &amp;#61; [&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;]\nv_val &amp;#61; []\n&lt;span class=\"hljs-symbol\"&gt;VS&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;S&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;\n \nfor i in range(&lt;span class=\"hljs-symbol\"&gt;S&lt;/span&gt;):\n    v_val.append(val[i]/v[i])\n \nfor i in range(&lt;span class=\"hljs-symbol\"&gt;S&lt;/span&gt;):\n    for j in range(i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-symbol\"&gt;S&lt;/span&gt;):\n        if v_val[i] &amp;lt; v_val[j]:\n            v_val[i],v_val[j] &amp;#61; v_val[j],v_val[i]\n            v[i],v[j] &amp;#61; v[j],v[i]\n            val[i],val[j] &amp;#61; val[j],val[i]\n            num[i],num[j] &amp;#61; num[j],num[i]\n \nprint(&lt;span class=\"hljs-string\"&gt;&amp;#34;编号&amp;#xff1a;{}&amp;#34;&lt;/span&gt;.format(num))\nprint(&lt;span class=\"hljs-string\"&gt;&amp;#34;体积&amp;#xff1a;{}&amp;#34;&lt;/span&gt;.format(v))\nprint(&lt;span class=\"hljs-string\"&gt;&amp;#34;价值&amp;#xff1a;{}&amp;#34;&lt;/span&gt;.format(val))\n \nv1_now &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\nval1_now &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n \nprint(&lt;span class=\"hljs-string\"&gt;&amp;#34;背包内加入的物品编号有&amp;#xff1a;&amp;#34;&lt;/span&gt;,end&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)\nfor i in range(&lt;span class=\"hljs-symbol\"&gt;S&lt;/span&gt;):\n    while (v[i] &amp;#43; v1_now) &amp;lt;&amp;#61; &lt;span class=\"hljs-symbol\"&gt;VS&lt;/span&gt;:\n        v1_now &amp;#43;&amp;#61; v[i]\n        val1_now &amp;#43;&amp;#61; val[i]\n        print(num[i],end&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)\n    if v1_now &amp;#61;&amp;#61; &lt;span class=\"hljs-symbol\"&gt;VS&lt;/span&gt;:\n        break\nprint()\nprint(&lt;span class=\"hljs-string\"&gt;&amp;#34;背包体积:{}&amp;#34;&lt;/span&gt;.format(v1_now))\nprint(&lt;span class=\"hljs-string\"&gt;&amp;#34;背包价值:{}&amp;#34;&lt;/span&gt;.format(val1_now))\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["贪心算法优化背包问题", ["贪心算法——背包问题", "不是0-1背包 可以一个物品多拿几次。以下代码如何改造一下", "。", "--------------*", "改造后应该是：带4个6kg（体积）的，总共的最大利润是￥480", "-", "*---------------------------", "\n", "#各物品的体积列表", "\nv = [2,8,5,6,15,3,7]\n", "#各物品的价值列表", "\nval = [30,100,10,120,280,50,40]\n", "#各物品编号", "\nnum = [1,2,3,4,5,6,7]\n", "#各物品价格/体重", "\nv_val = []\n", "#输入背包体积", "\nVS = 25\n", "#输入物品种类数", "\nS = 7\n\n", "#计算价格与体重之比", "\n", "for", " i ", "in", " range(S):\n    v_val.append(val[i]/v[i])\n", "#排序", "\n", "for", " i ", "in", " range(S):\n    ", "for", " j ", "in", " range(i+1,S):\n        ", "if", " v_val[i] < v_val[j]:\n            v_val[i],v_val[j] = v_val[j],v_val[i]\n            v[i],v[j] = v[j],v[i]\n            val[i],val[j] = val[j],val[i]\n            num[i],num[j] = num[j],num[i]\n\n", "print", "(", "\"编号：{}\"", ".format(num))\n", "print", "(", "\"体积：{}\"", ".format(v))\n", "print", "(", "\"价值：{}\"", ".format(val))\n\n", "#不可分割物品", "\n", "#当前背包占用体积", "\nv1_now = 0\n", "#当前背包内价值", "\nval1_now = 0\n\n", "print", "(", "\"背包内加入的物品编号有：\"", ",", "end", "=", "''", ")\n", "for", " i ", "in", " range(S):\n    ", "if", " (v[i] + v1_now) <= VS:\n        v1_now +=v[i]\n        val1_now += val[i]\n        ", "print", "(num[i],", "end", "=", "''", ")\n    ", "else", ":\n        break\n", "print", "()\n", "#背包占用体积为", "\n", "print", "(", "\"背包体积:{}\"", ".format(v1_now))\n", "print", "(", "\"背包价值:{}\"", ".format(val1_now))\n\n", "\n", "改造前："]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;N&lt;/span&gt;, V &amp;#61; &lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;())\n \n&lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt; &amp;#61; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] * (V&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; _ in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;N&lt;/span&gt;):\n    v, &lt;span class=\"hljs-keyword\"&gt;w&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;())\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt; in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(V, v-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt;[&lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt;[&lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt;], &lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt;[&lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt;-v]&amp;#43;&lt;span class=\"hljs-keyword\"&gt;w&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt;[-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["python 贪心算法 0-1背包问题", ["给定n(n<=100)种物品和一个背包。物品i的重量是wi(wi<=100)，价值为vi(vi<=100)，背包的容量为C(C<=1000)。", "应如何选择装入背包中的物品，使得装入背包中物品的总价值最大? 在选择装入背包的物品时，对每种物品i只有两个选择：装入或不装入。不能将物品i装入多次，也不能只装入部分物品i。", "\n", "输入格式:", "共有n+1行输入：", "第一行为n值和c值，表示n件物品和背包容量c；", "接下来的n行，每行有两个数据，分别表示第i(1≤i≤n)件物品的重量和价值。", "\n", "输出格式:", "输出装入背包中物品的最大总价值。", "\n", "输入样例:", "在这里给出一组输入。例如：", "\n", "5 10", "2 6", "2 3", "6 5", "5 4", "4 6", "输出样例:", "在这里给出相应的输出。例如：", "\n", "15"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考一下&amp;#xff0c;可行的话 还请点击 采纳&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; MAXN 105&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; MAXW 10005&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; max(a, b) (a &amp;gt; b ? a : b)&lt;/span&gt;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m;\n&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; f[MAXW];\n\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;node&lt;/span&gt; {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; w;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; v;\n} Node;\n\nNode a[MAXN];\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;zero_one_pack&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; w, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;#61;&amp;#61; n) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (w &amp;gt;&amp;#61; a[i].w) {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;zero_one_pack&lt;/span&gt;(w - a[i].w, i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#43; a[i].v, &lt;span class=\"hljs-built_in\"&gt;zero_one_pack&lt;/span&gt;(w, i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;zero_one_pack&lt;/span&gt;(w, i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; T;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;T);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (T--) {\n        &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(f, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;sizeof&lt;/span&gt; f);\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;m, &amp;amp;n);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%lf&amp;#34;&lt;/span&gt;, &amp;amp;a[i].w, &amp;amp;a[i].v);\n            a[i].v &amp;#61; a[i].v / a[i].w;\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.2lf\\n&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;zero_one_pack&lt;/span&gt;(m, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) * m);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["关于#背包问题#的问题，如何解决？", ["大家好，有一个c语言相关的问题，想请求大家帮助。", "在for循环中两组数据单独测试没问题，一起测试就有问题", "\n", "题目", "\n", "\n", "这是我的代码", "\n", "//贪心策略-dotcpp3042-金银岛", "\n", "//策略：背包问题", "\n", "#", "include", "<stdio.h>", "\n", "void", " ", "sort", "(", "float", " weight[],", "float", " value[],", "int", " n)", ";\n", "int", " ", "main", "(", "void", ")", "\n", "{\n    ", "int", " k;", "//用于记录有多少个测试组 ", "\n    ", "scanf", "(", "\"%d\"", ",&k);\n    ", "int", " i;\n    ", "float", " count=", "0", ";", "//记录能够带走的最大价值 ", "\n    ", "for", "(i=", "0", ";i<k;i++)\n    {\n        ", "//变量定义 ", "\n        ", "int", " m,n;\n        ", "scanf", "(", "\"%d\"", ",&m);", "//最大承重", "\n        ", "scanf", "(", "\"%d\"", ",&n);", "//有n个物品", "\n        ", "float", " weight[n];", "//每一个物体的质量 ", "\n        ", "float", " value[n];", "//对应物体的价值", "\n        \n        ", "//数据获取", "\n        ", "int", " j;\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            ", "scanf", "(", "\"%f %f\"", ",&weight[j],&value[j]);\n         } \n         \n        ", "//数据处理-按照性价比(价值/质量)最大的排序", "\n        ", "sort", "(weight,value,n); \n", "//测试打印 ", "\n", "//        for(int i=0;i<n;i++)", "\n", "//        {", "\n", "//            printf(\"%f %f %f\\n\",value[i],weight[i],value[i]/weight[i]);", "\n", "//        }", "\n        ", "//数据处理", "\n        ", "for", "(j=", "0", ";j<n;j++)\n        {\n            ", "if", "(weight[j]>m)\n            {\n                count+=value[j]/weight[j]*m;\n                ", "break", ";\n            }\n            ", "else", "\n            {\n                count+=value[j];\n                m-=weight[j];\n            }\n         } \n         ", "printf", "(", "\"%.2f\\n\"", ",count);\n    }\n    ", "return", " ", "0", ";\n } \n ", "void", " ", "sort", "(", "float", " weight[],", "float", " value[],", "int", " n)", "\n ", "{\n     ", "for", "(", "int", " i=", "0", ";i<n", "-1", ";i++)\n     {\n         ", "for", "(", "int", " j=i+", "1", ";j<n;j++)\n         {\n             ", "if", "(value[i]/weight[i]<value[j]/weight[j])\n             {\n                 ", "float", " temp=value[i];\n                 value[i]=value[j];\n                 value[j]=temp;\n                 \n                 temp=weight[i];\n                 weight[i]=weight[j];\n                 weight[j]=temp;\n             }\n         }\n     }\n }\n\n", "\n", "下面是两个单独测试的，一个是整体测试的", "\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#include &amp;lt;iostream&amp;gt;\nusing namespace std;\n\nint main() {\n    int n, w, m;\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; w &amp;gt;&amp;gt; m;\n\n    int dp&lt;span class=\"hljs-comment\"&gt;[n&amp;#43;1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[m&amp;#43;1]&lt;/span&gt;;\n    for (int i &amp;#61; 0; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        for (int j &amp;#61; 0; j &amp;lt;&amp;#61; m; j&amp;#43;&amp;#43;) {\n            dp&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61; 0;\n        }\n    }\n\n    for (int i &amp;#61; 1; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        for (int j &amp;#61; 1; j &amp;lt;&amp;#61; m; j&amp;#43;&amp;#43;) {\n            if (j &amp;gt;&amp;#61; w) {\n                dp&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61; max(dp&lt;span class=\"hljs-comment\"&gt;[i-1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;, dp&lt;span class=\"hljs-comment\"&gt;[i-1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j-w]&lt;/span&gt; &amp;#43; w);\n            } else {\n                dp&lt;span class=\"hljs-comment\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt; &amp;#61; dp&lt;span class=\"hljs-comment\"&gt;[i-1]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[j]&lt;/span&gt;;\n            }\n        }\n    }\n\n    cout &amp;lt;&amp;lt; dp&lt;span class=\"hljs-comment\"&gt;[n]&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;[m]&lt;/span&gt; &amp;lt;&amp;lt; endl;\n\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["关于C++的背包问题，请各方神圣帮本蒟蒻看看", ["D579q. 装物品（小内存）", "\n", "时间限制：2.0s   内存限制：16.0MB   Special Judge   代码提交间隔：5分钟(现在可以提交)", "问题描述", "有  件物品，第  件物品的重量为  （整数）。", "\n", "对于给定的整数 ， 请选择一些物品，使得拼出的重量不超过 ，请问在此前提下能拼出的最大重量是多少？", "\n", "输入格式", "输入的第一行包含一个整数 ，表示物品数量。", "\n", "第二行包含  个整数 , , , ，分别为每个物品的重量。", "\n", "最后一行包含一个整数 。", "\n", "输出格式", "输出的第一行包含一个整数 ，表示答案。", "\n", "样例输入", "3", "4 4 6", "12", "Data", "样例输出", "10", "\n", "这道背包问题我一开始打算用回溯做，但会超时和错误，现在打算还是老老实实用背包做，请各方神圣帮本蒟蒻看看吧！", "急！在线蹲答案！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;能跑&amp;#xff0c;就是结果不太对&lt;br /&gt;报错可能是你输入格式的问题&amp;#xff0c;两个数要用英文逗号隔开&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/007541378166174.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;答案应该是8&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["完全背包问题求解，报错分段断层", ["带佬们，是这样的，我这个飞舞尝试了一下完全背包问题，不知道为什么不能跑", "代码如下：", "#include<stdio.h>", "#include <math.h>", "int V[1010],W[1010];", "int f[1010];", "#define max(a, b) (((a) > (b)) ? (a) : (b));", "int main()", "{", "    int n,m;", "    scanf(\"%d,%d\",&n,&m);", "    for(int i=1;i<=n;i++)", "    scanf(\"%d,%d\",&V[i],&W[i]);", "    for(int i = 1 ; i<=n ;i++)", "    {", "    for(int j = V[i] ; j<=m ;j++)", "    {", "            f[j] = max(f[j],f[j-V[i]]+W[i]);", "    }", "\n", "}\n", "printf", "(", "\"%d\"", ",f[m]);\n", "return", " ", "0", "; \n", "\n", "}", "报错说是分段断层，求带佬指点迷津。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的代码有3个问题&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;没有弄懂背包的实际含义&amp;#xff1b;&lt;/li&gt;&lt;li&gt;三重循环枚举会时间超限&amp;#xff08;3000的3次方&amp;gt;1秒最多能运行的次数&amp;#xff09;&amp;#xff1b;&lt;/li&gt;&lt;li&gt;最大数字为3000&amp;#xff0c;数组却只有1010。&lt;/li&gt;&lt;/ol&gt;\n&lt;pre&gt;&lt;code class=\"language-cpp\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; w[&lt;span class=\"hljs-number\"&gt;3010&lt;/span&gt;],v[&lt;span class=\"hljs-number\"&gt;3010&lt;/span&gt;],c[&lt;span class=\"hljs-number\"&gt;3010&lt;/span&gt;],p[&lt;span class=\"hljs-number\"&gt;3010&lt;/span&gt;],b[&lt;span class=\"hljs-number\"&gt;3010&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//数组要开大一些&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k,m,n;\n    cin&amp;gt;&amp;gt;k&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        cin&amp;gt;&amp;gt;c[i]&amp;gt;&amp;gt;v[i];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;m;i&amp;#43;&amp;#43;)\n    {\n        cin&amp;gt;&amp;gt;w[i]&amp;gt;&amp;gt;p[i];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;m;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;k;j&amp;gt;&amp;#61;w[i];j--)\n        {\n            b[j]&amp;#61;&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(b[j],b[j-w[i]]&amp;#43;p[i]);&lt;span class=\"hljs-comment\"&gt;//先处理菜&amp;#xff0c;因为菜可以买任意多个&lt;/span&gt;\n            &lt;span class=\"hljs-comment\"&gt;//背包板子&lt;/span&gt;\n        }\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ans&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;c[i];j&amp;lt;&amp;#61;k;j&amp;#43;&amp;#43;)&lt;span class=\"hljs-comment\"&gt;//处理放哪个螃蟹&lt;/span&gt;\n        {\n            ans&amp;#61;&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(ans,b[j-c[i]]&amp;#43;v[i]);&lt;span class=\"hljs-comment\"&gt;//取最大值&lt;/span&gt;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,ans);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["背包问题的加强版有点问题", ["Description", "为了做饭，出题人拿了 k 块钱，准备去买食材。出题人准备买一只螃蟹和若干蔬菜。菜场里有 n 只螃蟹，第 i只螃蟹的价格为 c_i​，美味值为 v_i，菜场里有 m 个蔬菜，第 i 个蔬菜的价格为 w_i，美味值为 p_i​，求出题人的钱能换来最大的美味值。", "Input", "第一行三个正整数 k,n,m，", "接下来 n 行，每行两个正整数 c_i​,v_i，", "接下来 m 行，每行两个正整数 w_i​,p_i，", "相邻整数均以空格分开", "Output", "一行一个整数，表示出题人的钱能换来最大的美味值", "Sample input", "23 2 2", "2 3", "3 4", "10 10", "10 10", "Sample output", "24", "Note", "all the numbers <= 3000", "Time and memory limit", "1s ，512M", "\n", "这——题（连起来还不给我发了）怎么答，貌似是一个01背包的加强版，不过我写的有点问题", "这是我写的", "\n", "#include<bits/stdc++.h>\nusing namespace std;\nint w", "[1010]", ",v", "[1010]", ",c", "[1010]", ",p", "[1010]", ",b", "[1010]", ";\nint main()\n{\n    int k,m,n;\n    cin>>k>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>c", "[i]", ">>v", "[i]", ";\n    }\n    for(int i=1;i<=m;i++)\n    {\n        cin>>w", "[i]", ">>p", "[i]", ";\n    }\n    for(int ii=1;ii<=n;ii++)\n    {\n        for(int i=1;i<=m;i++)\n        {\n            for(int j=k;j>=w", "[i]", "+c", "[ii]", ";j--)\n            {\n                b", "[j]", "=max(b", "[j]", ",b", "[j-w", "[i]", "]", "+p", "[i]", ")+v", "[ii]", ";\n            }\n        }\n    }\n    cout<<b", "[k]", ";\n}\n\n", "\n", "样例能过但其他评测点都错了", "急！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;11行 &amp;amp;w[i]&amp;#xff0c;13行 &amp;amp;v[i]&amp;#xff0c;中括号里面是i&amp;#xff0c;不是n&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["简单背包问题暴虐大一新生", ["\n", "想先求出背包可装最大价值再考虑其他方面但是输出结果不对。看了好几个小时了😭", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;scanf(&amp;#34;%d&amp;#34;,c);//背包容量&lt;br /&gt;改为scanf(&amp;#34;%d&amp;#34;,&amp;amp;c);//背包容量&lt;br /&gt;for ( i &amp;#61; 0; i &amp;lt;&amp;#61;n; i&amp;#43;&amp;#43;)&lt;br /&gt;改为&lt;br /&gt;for ( i &amp;#61; 0; i &amp;lt;n; i&amp;#43;&amp;#43;)&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["关于背包问题的动态规划", ["这个代码问题出在哪啊，无法运行出结果，运行到输入背包质量就不行了", "\n", "#include<stdio.h>", "void Knaspack(int w[],int v[],int n,int c,int m[][50]);", "int max(int x,int y);", "void Traceback(int w[],int x[],int n,int c,int m[][50]);", "int main()", "{", "    int i;", "    int n,c;", "    int w[50],v[50];//物品体积、价值", "    int m[50][50];//最优值", "    int x[50];//观察是否有物品存入", "    printf(\"输入物品数量：\");", "    scanf(\"%d\",&n);//输入物品数量", "    printf(\"输入背包容量：\");", "    scanf(\"%d\",c);//背包容量", "    printf(\"输入物品的质量\");", "    for ( i = 0; i <=n; i++)", "    {", "        scanf(\"%d\",&w[i]);", "    }", "    printf(\"输入物品的价值\");", "    for ( i = 0; i <= n; i++)", "    {", "        scanf(\"%d\",&v[i]);", "    }", "    Knaspack(w,v,n,c,m);//寻找最优解", "    Traceback(w,x,n,c,m);//输出值", "    for(i=0;i<n;i++)", "    {", "        printf(\"%d\",x[i]);", "    }", "\n", "}", "void Knaspack(int w[],int v[],int n,int c,int m[][50])", "{", "    int i,j;", "\n", "for(i=0;i<=n;i++)//初始化背包容量为0时\n{\n    m", "[i]", "[0]", "=0;\n}\nfor(i=1;i<=c;i++)//初始化0个物品时\n{\n    m", "[0]", "[i]", "=0;\n}\nfor(i=0;i<n;i++)\n{\n    for(j=1;j<=c;j++)\n    {\n        if(w", "[i]", ">j)//无法装入装\n        {\n            m", "[i]", "[j]", "=m", "[i-1]", "[j]", ";\n        }\n            \n        \n        else{//判断是否要装\n            m", "[i]", "[j]", "=max(m", "[i-1]", "[j]", ",m", "[i-1]", "[j-w", "[i]", "]", "+v", "[i]", ");\n            \n        }\n    }\n\n}\n", "\n", "}", "void Traceback(int w[],int x[],int n,int c,int m[][50])", "{", "    int i;", "    int j;", "    j=c;", "    for(i=n;i>0;i--)", "    {", "        if(m[i][j]==m[i-1][j])", "        {", "            x[i-1]=0;", "        }", "        else{", "            x[i-1]=1;", "            j=j-w[i];", "        }", "    }", "\n", "}", "\n", "int max(int x,int y)", "{", "    int l;", "    if(x>y)", "    {", "        l=x;", "    }", "    else", "    {", "        l=y;", "    }", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题主您好&amp;#xff0c;acwing上收录了这条题目&amp;#xff0c;有详解&amp;#xff0c;您可以参考下&lt;a href=\"https://www.acwing.com/solution/content/1374/\" id=\"textarea_1644738925439_1644738962559_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.acwing.com/solution/content/1374/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["背包问题能详细讲下吗？", ["有 NN 件物品和一个容量是 VV 的背包。每件物品只能使用一次。", "第 ii 件物品的体积是 vivi，价值是 wiwi。", "求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。", "输出最大价值。", "输入格式", "第一行两个整数，N，VN，V，用空格隔开，分别表示物品数量和背包容积。", "接下来有 NN 行，每行两个整数 vi,wivi,wi，用空格隔开，分别表示第 ii 件物品的体积和价值。", "输出格式", "输出一个整数，表示最大价值。", "数据范围", "0<N,V≤10000<N,V≤1000", "0<vi,wi≤1000"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于new Bing的回答&amp;#xff1a;&lt;br /&gt;在代码中&amp;#xff0c;有一个max函数的返回值是0&amp;#xff0c;应该改为返回max。修改后的代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#include &amp;lt;stdio.h&amp;gt;\n#define mn &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;\nint min(int a,int b)\n{\nint min;\nif(a&amp;lt;b) min&amp;#61;a;\nreturn min;\n}\nint max(int a,int b)\n{\nint max;\nif(a&amp;gt;b) max&amp;#61;a;\nelse max&amp;#61;b; //修改这里&amp;#xff0c;返回max值\nreturn max;\n}\nvoid &lt;span class=\"hljs-symbol\"&gt;Knapsack&lt;/span&gt;(int *v, int *w, int c, int n, int (*m)[mn])\n//v[]物品的价值&amp;#xff0c;w[]物品的重量&amp;#xff0c;c背包容量&amp;#xff0c;n物品数量&amp;#xff0c;m[i][j]是背包容量为j&amp;#xff0c;可选择物品为i,i&amp;#43;&lt;span class=\"hljs-number\"&gt;1.&lt;/span&gt;...n的最优值\n{\nint j,i;\n//先判断第n个物品能不能装入背包\nint jMax &amp;#61; min(w[n]&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,c);\n//当&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;lt;&amp;#61;j&amp;lt;&amp;#61;w[n]时&amp;#xff0c;m(n,j)&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\nfor(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j&amp;lt;&amp;#61;jMax;j&amp;#43;&amp;#43;) m[n][j]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n//当j&amp;gt;&amp;#61;w[n]时&amp;#xff0c;m(n,j)&amp;#61;v[n]\nfor(j&amp;#61;w[n]; j&amp;lt;&amp;#61;c; j&amp;#43;&amp;#43;) m[n][j] &amp;#61; v[n];\n//再从n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;往前开始判断第n个物品到第i个物品能不能装下\nfor(i&amp;#61;n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;; i&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i--)\n{\njMax &amp;#61; min(w[i]&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,c);\nfor(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j&amp;lt;&amp;#61;jMax; j&amp;#43;&amp;#43;)//背包剩余容量j&amp;lt;&amp;#61;jMax&amp;lt;c\nm[i][j] &amp;#61; m[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j];//无法装入第i个物品\nfor(j&amp;#61;w[i]; j&amp;lt;&amp;#61;c; j&amp;#43;&amp;#43;)\nm[i][j] &amp;#61; max(m[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j],m[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j-w[i]]&amp;#43;v[i]);\n}\n//判断第n个到第&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;个物品能不能装下\nm[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][c] &amp;#61; m[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;][c];\nif(c&amp;gt;&amp;#61;w[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\nm[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][c]&amp;#61;max(m[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][c],m[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;][c-w[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]]&amp;#43;v[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n}\n//x[]数组: 值为&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;表示不装入背包&amp;#xff0c;值为&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;表示装入背包\nvoid &lt;span class=\"hljs-symbol\"&gt;Traceback&lt;/span&gt;(int (*m)[mn], int *w, int c, int n, int *x)\n{\nint i;\nfor(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;lt;n; i&amp;#43;&amp;#43;)\n{\nif(m[i][c] &amp;#61;&amp;#61; m[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][c])\nx[i]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\nelse\n{\nx[i]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\nc-&amp;#61;w[i];\n}\n}\nx[n]&amp;#61;(m[n][c])?&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\nint main()\n{\nint n,c,i;\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入物品的数量n&amp;#61;&amp;#34;&lt;/span&gt;);\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入背包的容量c&amp;#61;&amp;#34;&lt;/span&gt;);\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;c);\nint w[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请依次输入各物品的重量:&amp;#34;&lt;/span&gt;);\nfor(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;w[i]);\nint v[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请依次输入各物品的价值:&amp;#34;&lt;/span&gt;);\nfor(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;v[i]);\nint m[mn][mn];\nint x[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\nint mw&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\nint mv&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n//进行查找与回溯\n&lt;span class=\"hljs-symbol\"&gt;Knapsack&lt;/span&gt;(v,w,c,n,m);\n&lt;span class=\"hljs-symbol\"&gt;Traceback&lt;/span&gt;(m,w,c,n,x);\n//输出最优序列和最优重量与最优值\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;最优装载序列为&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\nfor(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n{\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,x[i]);\nmw&amp;#61;mw&amp;#43;x[i]*w[i];\nmv&amp;#61;mv&amp;#43;x[i]*v[i];\n}\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n最大重量为&amp;#xff1a;%d\\n最大价值为&amp;#xff1a;%d\\n&amp;#34;&lt;/span&gt;,mw,mv);\nreturn &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/964928329086123.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["C语言0-1背包问题", ["为什么代码编译的时候没有报错但运行的时候只能运行一半", "\n", "#include <stdio.h>\n#define mn ", "50", "\nint min(int a,int b)\n{\n    int min;\n    if(a<b) min=a;\n    return min;\n}\nint max(int a,int b)\n{\n    int max;\n    if(a>b) max=a;\n    return ", "0", ";\n}\nvoid ", "Knapsack", "(int *v, int *w, int c, int n, int (*m)[mn])\n//v[]物品的价值，w[]物品的重量，c背包容量，n物品数量，m[i][j]是背包容量为j，可选择物品为i,i+", "1.", "...n的最优值\n{\n    int j,i;\n//先判断第n个物品能不能装入背包\n  int jMax = min(w[n]", "-1", ",c);\n//当", "0", "<=j<=w[n]时，m(n,j)=", "0", "\n  for(j=", "0", "; j<=jMax;j++)  m[n][j]=", "0", ";\n//当j>=w[n]时，m(n,j)=v[n]\n  for(j=w[n]; j<=c; j++)  m[n][j] = v[n];\n//再从n", "-1", "往前开始判断第n个物品到第i个物品能不能装下\n  for(i=n", "-1", "; i>", "1", "; i--)\n  {    jMax = min(w[i]", "-1", ",c);\n    for(j=", "0", "; j<=jMax; j++)//背包剩余容量j<=jMax<c\n        m[i][j] = m[i+", "1", "][j];//无法装入第i个物品\n    for(j=w[i]; j<=c; j++)\n        m[i][j] = max(m[i+", "1", "][j],m[i+", "1", "][j-w[i]]+v[i]);\n  }\n  //判断第n个到第", "1", "个物品能不能装下\n  m[", "1", "][c] = m[", "2", "][c];\n  if(c>=w[", "1", "])\n    m[", "1", "][c]=max(m[", "1", "][c],m[", "2", "][c-w[", "1", "]]+v[", "1", "]);\n  }\n//x[]数组: 值为", "0", "表示不装入背包，值为", "1", "表示装入背包\nvoid ", "Traceback", "(int (*m)[mn], int *w, int c, int n, int *x)\n{\n    int i;\n    for(i=", "1", "; i<n; i++)\n    {\n        if(m[i][c] == m[i+", "1", "][c])\n            x[i]=", "0", ";\n        else\n        {\n            x[i]=", "1", ";\n            c-=w[i];\n        }\n    }\n    x[n]=(m[n][c])?", "1", ":", "0", ";\n}\nint main()\n{\n    int n,c,i;\n    printf(", "\"请输入物品的数量n=\"", ");\n    scanf(", "\"%d\"", ",&n);\n    printf(", "\"请输入背包的容量c=\"", ");\n    scanf(", "\"%d\"", ",&c);\n    int w[", "100", "];\n    printf(", "\"请依次输入各物品的重量:\"", ");\n    for(i=", "1", ";i<=n;i++)\n        scanf(", "\"%d\"", ",w[i]);\n    int v[", "100", "];\n    printf(", "\"请依次输入各物品的价值:\"", ");\n    for(i=", "1", ";i<=n;i++)\n        scanf(", "\"%d\"", ",&v[i]);\n    int m[mn][mn];\n    int x[", "100", "];\n    int mw=", "0", ";\n    int mv=", "0", ";\n    //进行查找与回溯\n    ", "Knapsack", "(v,w,c,n,m);\n    ", "Traceback", "(m,w,c,n,x);\n    //输出最优序列和最优重量与最优值\n    printf(", "\"最优装载序列为：\\n\"", ");\n    for(i=", "1", ";i<=n;i++)\n    {\n        printf(", "\"&d\"", ",x[i]);\n        mw=mw+x[i]*w[i];\n        mv=mv+x[i]*v[i];\n    }\n    printf(", "\"最大重量为：%d\\n最大价值为：%d\\n\"", ",mw,mv);\n    return ", "0", ";\n}\n\n", "\n", "运行结果", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这就是钱币和邮票的问题嘛&lt;br /&gt;面值10,5,2,1几种钱币&amp;#xff0c;你要用来买东西&amp;#xff0c;那就要遍历然后去匹配啊&amp;#xff0c;不能用贪婪算法的&lt;br /&gt;一个价值11块的东西就是要10&amp;#43;1&amp;#xff0c;你用10&amp;#43;5无论如何凑不出11来&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["c++的背包问题的变形", ["我没用背包的写法，我是想把每个宝石价格从大到小排列然后，用每个食物减去这个宝石价格能最后能0的就输出，排查过程就是先for一次，（食物比宝石价格高的才减）从第一个开始减减去第一个，然后减第二个依次往下到所有宝石结束。如果第一轮不行，然后就从第二个开始开始减，同理然后减第三个依次往下", "#include<bits/stdc++.h>", "using namespace std;", "int main()", "{", "    int t;", "    scanf(\"%d\",&t);", "\n", "for", "(", "int", " i=", "1", ";i<=t;i++)\n{\n    ", "int", " m[", "1000", "];\n    ", "int", " s[", "1000", "];\n    \n    ", "int", " a,b;\n    scanf(", "\"%d\"", ",&a);\n    scanf(", "\"%d\"", ",&b);\n    ", "//", "马丁 \n    ", "for", "(", "int", " ", "q", "=", "1", ";", "q<=a;q++)\n    {\n        \n        int c;\n        scanf(\"%d\",&c);\n        m[q]=c;\n        \n    }\n    //食物价格 \n    for(int w=1;w<=b;w++)\n    {\n      \n      int d;\n      scanf(\"%d\",&d);\n      s[w]=d;\n          \n    }\n    \n    \n    sort(m+1,m+a+1);\n    reverse(m+1,m+a+1);\n\n    \n    for(int e=1;e<=b;e++)\n    {\n        int flag=0;\n        int jk=s[e];\n        \n        for(int f=1;f<=a;f++)\n        {   \n             s[e]=jk;\n             \n               if(s[e]>", "=", "m[f]", ")\n            { \n              \n             s[e]=s[e]-", "m[f]", ";\n            ", "//prin", "tf(", "\"%d\\n\"", ",s[e]);\n            ", "if", "(s[e]==", "0", "){flag=", "1", ";", "break", ";}\n            \n            }  \n             \n             \n             ", "for", "(", "int", " g=f+", "1", ";g<=a;g++)\n             {\n                \n                ", "if", "(s[e]>", "m[g]", "){s[e]=s[e]-", "m[g]", ";}\n                ", "else", " ", "if", "(s[e]==", "m[g]", "){s[e]=s[e]-", "m[g]", ";}\n                 //", "printf", "(", "\"%d\\n\"", ",s[e]);\n                ", "if", "(s[e]==", "0", "){flag=", "1", ";", "break", ";}\n                \n             }\n            \n            ", "if", "(s[e]==", "0", "){", "break", ";}\n             \n          }\n    \n        ", "if", "(flag==", "1", "){", "printf", "(", "\"yes\\n\"", ");}\n        ", "else", "{", "printf", "(", "\"no\\n\"", ");} \n\n    }\n}\n", "\n", "}", "现在自己测了很多数据都对但是wa，我想知道问题出现在哪"]], "Tag": "算法设计"}
{"Answer": "不知道你这个问题是否已经解决, 如果还没有解决的话: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;你可以参考下这个问题的回答, 看看是否对你有帮助, 链接: &lt;a href=\"https://ask.csdn.net/questions/335034?utm_source&amp;#61;csdn_ai_ada_ask_robot\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;https://ask.csdn.net/questions/335034&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;这篇博客你也可以参考下&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/a553455/article/details/98943333?utm_source&amp;#61;csdn_ai_ada_ask_robot\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;C&amp;#43;&amp;#43; 基类中静态成员初始化问题、基类头文件中定义类外变量重定义问题的解决过程&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;除此之外, 这篇博客: &lt;a href=\"https://blog.csdn.net/henry594xiaoli/article/details/123820453?utm_source&amp;#61;csdn_ai_ada_ask_robot\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;C&amp;#43;&amp;#43;实现单链表的基本运算&lt;/font&gt;&lt;/a&gt;中的 &lt;strong&gt;头节点不包含数据&amp;#xff0c;具有指引作用&amp;#xff0c;头节点的下一个结点才开始保存数据。&lt;/strong&gt; 部分也许能够解决你的问题, 你可以仔细阅读以下内容或者直接跳转源博客中阅读: &lt;br /&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;void CreateListR(LinkList *&amp;amp;L,ElemType a[],int n)\n{\n\tLinkList *s,*r;int i;\n\tL&amp;#61;new LinkList;  //产生一个新的头结点\n\tr&amp;#61;L;  //令r指针指向终端结点&amp;#xff0c;刚开始的时候指向头结点\n\tfor(i&amp;#61;0;i&amp;lt;n;i&amp;#43;&amp;#43;)\n\t{\n\t\ts&amp;#61;new LinkList;\n\t\ts-&amp;gt;data&amp;#61;a[i];\n\t\tr-&amp;gt;next&amp;#61;s;  //将s插入r的后面\n\t\tr&amp;#61;s;     //r指针指向终端结点\n\t}\n\tr-&amp;gt;next&amp;#61;NULL;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;如果你已经解决了该问题, 非常希望你能够分享一下解决方案, 写成博客, 将相关链接放在评论区, 以帮助更多的人 ^-^", "Konwledge_Point": "背包问题", "Question": ["c++ 背包问题 小内存", ["帮本蒟蒻看看吧", "\n", "#include <iostream>", "\n", "#include <vector>", "\n\n", "using", " namespace std;\n\n", "int", " main() {\n    ", "int", " n, W;\n    cin >> n;\n\n    vector<", "int", "> w(n);\n    ", "for", " (", "int", " i = ", "0", "; i < n; i++) {\n        cin >> w[i];\n    }\n\n    cin >> W;\n\n    vector<vector<", "int", "> > ", "table", "(n+", "1", ", vector<", "int", ">(W+", "1", ", ", "0", "));\n\n    ", "for", " (", "int", " i = ", "1", "; i <= n; i++) {\n        ", "for", " (", "int", " j = ", "1", "; j <= W; j++) {\n            ", "if", " (w[i", "-1", "] > j) {\n                ", "table", "[i][j] = ", "table", "[i", "-1", "][j];\n            } ", "else", " {\n                ", "table", "[i][j] = max(w[i", "-1", "] + ", "table", "[i", "-1", "][j-w[i", "-1", "]], ", "table", "[i", "-1", "][j]);\n            }\n        }\n    }\n\n    ", "int", " max_weight = ", "table", "[n][W];\n    cout << max_weight << endl;\n\n    vector<", "int", "> items;\n    ", "int", " i = n, j = W;\n    ", "while", " (i > ", "0", " && j > ", "0", ") {\n        ", "if", " (", "table", "[i][j] == ", "table", "[i", "-1", "][j]) {\n            i", "--;", "\n        } ", "else", " {\n            items.push_back(i);\n            j -= w[i", "-1", "];\n            i", "--;", "\n        }\n    }\n\n    ", "int", " num_items = items.size();\n    cout << num_items << endl;\n\n    ", "for", " (", "int", " i = num_items", "-1", "; i >= ", "0", "; i", "--) {", "\n        cout << items[i] << \" \";\n    }\n    cout << endl;\n\n    ", "return", " ", "0", ";\n}\n", "\n", "请大家们提提修改意见，主要是内存超限，帮我看看吧！ "]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/lyhvoyage/article/details/17041907", "Konwledge_Point": "背包问题", "Question": ["      洗衣服的背包问题        ", ["Description", "\nDearboy was so busy recently that now he has piles of clothes to wash. Luckily, he has a beautiful and hard-working girlfriend to help him. The clothes are in varieties of colors but each piece of them can be seen as of only one color. In order to prevent the clothes from getting dyed in mixed colors, Dearboy and his girlfriend have to finish washing all clothes of one color before going on to those of another color.", "\nFrom experience Dearboy knows how long each piece of clothes takes one person to wash. Each piece will be washed by either Dearboy or his girlfriend but not both of them. The couple can wash two pieces simultaneously. What is the shortest possible time they need to finish the job?", "\nInput", "\nThe input contains several test cases. Each test case begins with a line of two positive integers M and N (M < 10, N < 100), which are the numbers of colors and of clothes. The next line contains M strings which are not longer than 10 characters and do not contain spaces, which the names of the colors. Then follow N lines describing the clothes. Each of these lines contains the time to wash some piece of the clothes (less than 1,000) and its color. Two zeroes follow the last test case.", "\nOutput", "\nFor each test case output on a separate line the time the couple needs for washing.", "\nSample Input", "\n3 4", "\nred blue yellow", "\n2 red", "\n3 blue", "\n4 blue", "\n6 red", "\n0 0", "\nSample Output", "\n10"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的代码有2个问题&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;数组没必要开那么大&amp;#xff0c;用vector存储即可。&lt;/li&gt;&lt;li&gt;存储状态的数组定义&amp;#xff0c;以及状态转移方程是错的。&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;按你的思路改写的&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; argc, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t, n, W;\n    cin &amp;gt;&amp;gt; t; &lt;span class=\"hljs-comment\"&gt;// 输入测试用例数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (t-- &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; W; &lt;span class=\"hljs-comment\"&gt;// 输入物品数量n、背包&amp;#xff08;剩余&amp;#xff09;重量W&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;assert&lt;/span&gt;(n &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;assert&lt;/span&gt;(W &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n        \n        &lt;span class=\"hljs-comment\"&gt;// 输入n个物品重量、价值&lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; &lt;span class=\"hljs-title\"&gt;v&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n)&lt;/span&gt;, &lt;span class=\"hljs-title\"&gt;w&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n)&lt;/span&gt;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; &amp;#43;&amp;#43;i)\n        {\n            cin &amp;gt;&amp;gt; w[i] &amp;gt;&amp;gt; v[i];\n        }\n\n        vector&amp;lt;vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; &amp;gt; &lt;span class=\"hljs-built_in\"&gt;c&lt;/span&gt;(n &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt;(W &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)); &lt;span class=\"hljs-comment\"&gt;// 全部初始化为0&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;// c[i][j] 表示将前i个物品&amp;#xff0c;放入背包剩余重量为j&amp;#xff0c;取得的最大价值&lt;/span&gt;\n\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; &amp;#43;&amp;#43;i)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; W; &amp;#43;&amp;#43;j)\n            {\n                &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; idx &amp;#61; i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (j &amp;lt; w[idx]) &lt;span class=\"hljs-comment\"&gt;// 背包剩余容量不足以放入第i个物品&amp;#xff0c;只有一种选择&amp;#xff0c;价值不变&lt;/span&gt;\n                {\n                    c[i][j] &amp;#61; c[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j];\n                }\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                {\n                    &lt;span class=\"hljs-comment\"&gt;// 剩余重量足够时&amp;#xff0c;有两种选择&amp;#xff0c;选价值高者&lt;/span&gt;\n                    c[i][j] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(c[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j], c[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j - w[idx]] &amp;#43; v[idx]);\n                }\n            }\n        }\n        cout &amp;lt;&amp;lt; c[n][W] &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;    \n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["P1314 01背包问题II", ["问题遇到的现象和发生背景", "\n", "\n", "问题相关代码，请勿粘贴截图", "\n", "#", "include", "<bits/stdc++.h>", "\n", "using", " ", "namespace", " std;\n", "int", " w[", "100001", "],v[", "100001", "],dp[", "100001", "];\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " t,n,m;\n    cin>>t;\n    ", "while", "(t--)\n    {\n        ", "memset", "(dp,", "0", ",", "sizeof", "(dp));\n        cin>>n>>m;\n        ", "for", "(", "int", " i=", "1", ";i<=n;i++)\n        {\n            cin>>w[i]>>v[i];\n        }\n        ", "for", "(", "int", " i=", "1", ";i<=n;i++)\n        {\n            ", "for", "(", "int", " j=m;j>=w[i];j--)\n            {\n                dp[j]=", "max", "(dp[j],dp[j-w[i]]+v[i]);\n            }\n        }\n        cout<<dp[m]<<endl;\n    }\n}\n", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "动态规划", "\n", "我想要达到的结果", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的第二层循环里面写的for (int j &amp;#61; 1; j &amp;lt;&amp;#61; m; i&amp;#43;&amp;#43;)     i&amp;#43;&amp;#43;&amp;#xff0c; 这里是j&amp;#43;&amp;#43;呀。    &amp;#xff08;有用请点采纳&amp;#xff09;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["01背包问题的代码不能输出", ["\n#include <iostream>\n#include <cmath>\n#define N 1005\n\nusing namespace std;\n\nint n, m;\nint f", "[N]", "[N]", ";\nint v", "[N]", ", w", "[N]", ";\n\nint main()\n{\n\n    cin >> n >> m;\n\n    for (int i = 1; i <= n ; i++)\n    {\n        cin >> v", "[i]", " >> w", "[i]", ";\n    }\n\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= m; j++)\n        {\n              if(j<v", "[i]", ")\n                f", "[i]", "[j]", " = f", "[i-1]", "[j]", ";\n              else \n            {\n                f", "[i]", "[j]", " = max(f", "[i-1]", "[j]", ",f", "[i - 1]", "[j-v", "[i]", "]", " + w", "[i]", ");\n            }\n        }\n    }\n\n    cout << f", "[n]", "[m]", " << endl;\n    \n    return 0;\n}\n", "\n", "这段代码我照着视频敲的，能正常输出，但我下面自己敲了一个一模一样的，不能输出。", "\n", "#include <iostream>\n#include <cmath>\n\n#define NUM 1005\nusing namespace std;\nint n, m;\nint v", "[NUM]", ", w", "[NUM]", ";\nint dp", "[NUM]", "[NUM]", ";\n\nint main() {\n\n\n    cin >> n >> m;\n    for (int i = 1; i <= n; i++) {\n        cin >> v", "[i]", " >> w", "[i]", ";\n    }\n\n    for (int i = 1; i <= n; i++) {\n\n        for (int j = 1; j <= m; i++) {\n\n            if (j < v", "[i]", ")\n                dp", "[i]", "[j]", " = dp", "[i - 1]", "[j]", ";\n            else {\n                dp", "[i]", "[j]", " = max(dp", "[i - 1]", "[j]", ", dp", "[i - 1]", "[j - v", "[i]", "]", " + w", "[i]", ");\n            }\n        }\n    }\n    cout << dp", "[n]", "[m]", " << endl;\n\n    return 0;\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; t,m,w,dp2[&lt;span class=\"hljs-number\"&gt;100005&lt;/span&gt;],tm1[&lt;span class=\"hljs-number\"&gt;100001&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;},o;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;truncsqrt&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; p)&lt;/span&gt;&lt;/span&gt;{&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//筛法求素数&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&amp;#61;p;i&amp;#43;&amp;#43;) \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;j&amp;lt;&amp;#61;p/i;j&amp;#43;&amp;#43;) tm1[i*j]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; p;\n    &lt;span class=\"hljs-built_in\"&gt;truncsqrt&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;201&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//打一个质数表&amp;#xff0c;质数为0&amp;#xff0c;非质数为1&lt;/span&gt;\n    tm1[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//1不是质数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(cin&amp;gt;&amp;gt;p){&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//循环数&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(dp2,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(dp2));&lt;span class=\"hljs-comment\"&gt;//记得清零&lt;/span&gt;\n        dp2[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&amp;#61;p;i&amp;#43;&amp;#43;){\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(tm1[i]&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;i;j&amp;lt;&amp;#61;p;j&amp;#43;&amp;#43;){\n                    dp2[j]&amp;#61;dp2[j-i]&amp;#43;dp2[j];\n                }\n            }\n        cout&amp;lt;&amp;lt;dp2[p]&amp;lt;&amp;lt;endl;&lt;span class=\"hljs-comment\"&gt;//直接输出即可&lt;/span&gt;\n    }\n    \n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["背包问题  洛谷 [AHOI2001]质数和分解", ["题目要求： 任何大于 1 的自然数 N，都可以写成若干个大于等于2且小于等于 N 的质数之和表达式(包括只有一个数构成的和表达式的情况)，并且可能有不止一种质数和的形式。例如9 的质数和表达式就有四种本质不同的形式：9 = 2+5+2 = 2+3+2+2 = 3+3+3 = 2+7 。 这里所谓两个本质相同的表达式是指可以通过交换其中一个表达式中参加和运算的各个数的位置而直接得到另一个表达式。 试编程求解自然数 N 可以写成多少种本质不同的质数和表达式。  输入格式 读入一个自然数 N , 2≤N≤1070。  输出格式 依次输出每一个自然数 N 的本质不同的质数和表达式的数目", "\n", "#", "include", "<bits/stdc++.h>", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<cstring>", "\n", "using", " ", "namespace", " std;\n", "int", " n,pr[", "20000", "],f[", "20000", "],a,flag;\n", "void", " ", "prime", "(", "int", " nn)", "{\n    ", "for", " (", "int", " i=", "2", ";i<=", "2075", ";i++){\n        flag=", "0", ";\n        ", "for", " (", "int", " j=", "2", ";j<=", "sqrt", "(i);j++){\n            ", "if", "(i%j==", "0", ")\n                flag=", "1", ";\n        }\n        ", "if", "(flag==", "0", "){\n            a+=", "1", ";\n            pr[a]=i;\n        }\n    }\n}\n", "int", " ", "main", "()", "\n", "{\n    cin>>n;\n    ", "prime", "(n);\n    f[", "0", "]=", "1", ";\n    ", "for", "(", "int", " i=", "1", ";i<=a;++i){\n        ", "//cout<<pr[i]<<endl;", "\n        ", "for", "(", "int", " j=pr[i];j<=n;++j)\n        f[j]+=f[j-pr[i]];\n    } \n    cout<<f[n]<<endl;\n    \n       ", "return", " ", "0", "; \n}\n\n", "\n", "代码有些问题哪位好人能帮忙解答一下"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;引用chatGPT作答&amp;#xff0c;这是一个动态规划问题&amp;#xff0c;可以使用二维数组或者滚动数组进行实现。但是由于物品数目较多&amp;#xff0c;使用二维数组空间复杂度过高&amp;#xff0c;因此使用滚动数组的方式&amp;#xff0c;将二维数组转化为一维数组。具体来说&amp;#xff0c;定义$f[j]$表示恰好装满容量为$j$的背包可以得到的最大价值&amp;#xff0c;初始化为$0$&amp;#xff0c;然后遍历每一个物品&amp;#xff0c;对于每一个物品&amp;#xff0c;都考虑是否选择该物品&amp;#xff0c;如果选择该物品&amp;#xff0c;则状态转移方程为$f[j]&amp;#61;max(f[j],f[j-c[i]]&amp;#43;w[i])$。如果不选择该物品&amp;#xff0c;则状态转移方程为$f[j]&amp;#61;f[j]$。在遍历完所有的物品之后&amp;#xff0c;如果$f[v]&amp;lt;0$&amp;#xff0c;则输出&amp;#34;NO&amp;#34;&amp;#xff0c;否则输出$f[v]$。&lt;/p&gt;\n&lt;p&gt;以下是对于给出代码的一些补充说明&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;对于$f$数组的初始化&amp;#xff0c;不能将其初始化为$0$&amp;#xff0c;因为物品的价值可以为负数&amp;#xff0c;如果将$f$数组初始化为$0$&amp;#xff0c;则有可能会将一个价值为负数的物品加入到背包中&amp;#xff0c;这是不符合题目要求的。因此&amp;#xff0c;需要将$f$数组初始化为一个极小值&amp;#xff0c;例如$-10^7$。&lt;/p&gt;\n&lt;p&gt;遍历$j$的时候&amp;#xff0c;应该从$0$开始&amp;#xff0c;这样才能保证背包能够恰好装满。&lt;/p&gt;\n&lt;p&gt;遍历$i$的时候&amp;#xff0c;应该从$1$开始&amp;#xff0c;因为第$0$个物品没有体积和价值&amp;#xff0c;没有任何意义。&lt;/p&gt;\n&lt;p&gt;对于状态转移方程$f[j]&amp;#61;max(f[j],f[j-c[i]]&amp;#43;w[i])$&amp;#xff0c;应该首先判断$j&amp;gt;&amp;#61;c[i]$&amp;#xff0c;只有当$j&amp;gt;&amp;#61;c[i]$的时候才能使用状态转移方程&amp;#xff0c;否则会访问$f[-1]$&amp;#xff0c;导致运行错误。&lt;/p&gt;\n&lt;p&gt;输出结果的时候&amp;#xff0c;应该先判断$f[v]$是否小于$0$&amp;#xff0c;如果小于$0$&amp;#xff0c;则输出&amp;#34;NO&amp;#34;&amp;#xff0c;否则输出$f[v]$。&lt;/p&gt;\n&lt;p&gt;以下是修改过的代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;  &lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;  &lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;  \n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; MAXN &amp;#61; &lt;span class=\"hljs-number\"&gt;2010&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; MAXV &amp;#61; &lt;span class=\"hljs-number\"&gt;50010&lt;/span&gt;;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f[MAXV];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c[MAXN], w[MAXN];\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; test;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;test);  \n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (test--) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m, v;\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;m, &amp;amp;v);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; m; &amp;#43;&amp;#43;i) {\n            &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;c[i], &amp;amp;w[i]);\n        }\n\n        &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(f, &lt;span class=\"hljs-number\"&gt;-0x3f&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(f));\n        f[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; m; &amp;#43;&amp;#43;i) {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; c[i]; j &amp;lt;&amp;#61; v; &amp;#43;&amp;#43;j) {\n                f[j] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(f[j], f[j - c[i]] &amp;#43; w[i]);\n            }\n        }\n\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (f[v] &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;NO\\n&amp;#34;&lt;/span&gt;);\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, f[v]);\n        }\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["C++完全背包问题，oj平台答案对50%", ["题目描述", "完全背包定义有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的体积是c，价值是w。求解将哪些物品装入背包可使这些物品的体积总和不超过背包容量，且价值总和最大。本题要求是背包恰好装满背包时，求出最大价值总和是多少。如果不能恰好装满背包，输出NO", "输入", "第一行： N 表示有多少组测试数据（N<7）。", "接下来每组测试数据的第一行有两个整数M，V。 M表示物品种类的数目，V表示背包的总容量。(0<M<=2000，0<V<=50000)", "接下来的M行每行有两个整数c，w分别表示每种物品的重量和价值(0<c<100000，0<w<100000)", "输出", "对应每组测试数据输出结果（如果能恰好装满背包，输出装满背包时背包内物品的最大价值总和。 如果不能恰好装满背包，输出NO）", "样例输入", "2", "1 5", "2 2", "2 5", "2 2", "5 1", "样例输出", "NO", "1", "\n", "\n", "#", "include", "<iostream>", "  ", "\n", "#", "include", "<stdio.h>", "  ", "\n", "#", "include", "<string>", "  ", "\n", "#", "include", "<cstring>", "  ", "\n        ", "using", " ", "namespace", " std;  \n    ", "int", " f[", "50010", "], c[", "2010", "], w[", "2010", "];  \n    ", "int", " ", "main", "()", "  \n    ", "{  \n        ", "int", " test, m, v, i, j;  \n        ", "scanf", "(", "\"%d\"", ", &test);  \n        ", "while", " (test--)  \n        {  \n            ", "memset", "(f, ", "-10000000", ", ", "sizeof", "(f)); \n            f[", "0", "] = ", "0", ";  \n            ", "scanf", "(", "\"%d%d\"", ", &m, &v);  \n            ", "for", " (i = ", "1", "; i <= m; ++i)  \n                ", "scanf", "(", "\"%d%d\"", ", &c[i], &w[i]);  \n            ", "for", " (i = ", "1", "; i <= m; ++i)  \n            ", "for", " (j = ", "0", "; j <= v; ++j)\n            ", "if", " (j >= c[i])  \n                f[j] = f[j]>(f[j - c[i]] + w[i]) ? f[j] : f[j - c[i]] + w[i]; \n            ", "if", " (f[v]<", "0", ") \n                ", "printf", "(", "\"NO\\n\"", ");  \n            ", "else", "  \n                ", "printf", "(", "\"%d\\n\"", ", f[v]);  \n        }  \n    }  \n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;cout&amp;lt;&amp;lt;dp[m][n]&amp;lt;&amp;lt;endl;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/292537340736128.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["01背包问题运行结果不对，哪里错了", ["#include", "using namespace std;", "const int MAXN=1005;", "int v[MAXN];//物品体积", "int w[MAXN];//物品价值", "int dp[MAXN][MAXN];//最大价值", "void main(){", "    int m,n,i,j;", "    cin>>m>>n;", "    for(i=1;i<=m;i++){", "        cin>>v[i]>>w[i];", "\n", "}for(j=0;j<=n;j++){\ndp", "[0]", "[j]", "=0;}//初始化物品为0的价值为0\nfor(i=1;i<=m;i++){\n    for(j=0;j<=n;j++){\n    if(v", "[i]", ">j){\n        dp", "[i]", "[j]", "=dp", "[i-1]", "[j]", ";//放不了第i个物品\n    }else\n    dp", "[i]", "[j]", "=max(dp", "[i-1]", "[j]", ",dp", "[i-1]", "[j-v", "[i]", "]", "+w", "[i]", ");//放得了第i个物品\n}}\ncout<<dp", "[i]", "[j]", "<<endl;\n", "\n", "}", "int max(int a,int b){", "    if(a>b)", "    return a;", "    else return b;", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[m].pw&amp;gt;a[m&amp;#43;1].pw)\n            {\n                int &lt;span class=\"hljs-attribute\"&gt;t&lt;/span&gt;&amp;#61;a[m].&lt;span class=\"hljs-literal\"&gt;No&lt;/span&gt;;\n                a[m].&lt;span class=\"hljs-attribute\"&gt;No&lt;/span&gt;&amp;#61;a[m&amp;#43;1].&lt;span class=\"hljs-literal\"&gt;No&lt;/span&gt;;\n                a[m&amp;#43;1].&lt;span class=\"hljs-attribute\"&gt;No&lt;/span&gt;&amp;#61;t;\n            }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;只交换No不对吧&amp;#xff0c; 应该整个结构交换&lt;br /&gt;第40行代码不完整啊&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["用贪心算法解决01背包问题输出结果错误", ["\n", "-", "\n", "\n", "#", "include", "<stdio.h>", "\n", "struct", " ", "good", "\n{\n    ", "int", " No;\n    ", "///物品编号", "\n    ", "float", " weight;\n    ", "//物品重量", "\n    ", "float", " value;\n    ", "//物品价值", "\n    ", "float", " pw;\n    ", "//物品单位重量的价值； pw=value/weight;", "\n}\n;\n", "int", " ", "main", "()", "{\n    ", "int", " n;\n    ", "int", " c;\n    ", "float", " we=", "0", ";\n    ", "float", " va=", "0", ";\n    ", "scanf", "(", "\"%d%d\"", ",&n,&c);\n    ", "struct", " ", "good", " a[n];\n    ", "for", "(", "int", " i = ", "0", ";i < n;i++) {\n        ", "scanf", "(", "\"%f %f\"", ",&a[i].weight,&a[i].value);\n        a[i].pw=a[i].value/a[i].weight;\n        a[i].No=i;\n    } \n    ", "//排序", "\n    ", "for", "(", "int", " i = ", "0", ";i < n;i++) {\n        ", "for", "(", "int", " m = ", "0", ";m < n-i", "-1", ";m++) {\n            ", "if", "(a[m].pw>a[m+", "1", "].pw)\n            {\n                ", "int", " t=a[m].No;\n                a[m].No=a[m+", "1", "].No;\n                a[m+", "1", "].No=t;\n            }\n        }\n    }\n    ", "//加起来", "\n    ", "for", "(", "int", " i = ", "0", ";i < n;i++) {\n    ", "for", "(", "int", " m=", "0", ";m<n;m++){\n        ", "if", "(a[m].No==n", "-1", "-i){\n        we+=a[m].weight;\n        va+=a[m].value;\n        }\n        ", "if", "(we>c)\n        {\n            we-=a[m].weight;\n            va-=a[m].value;\n            ", "goto", " out;", "//脱离循环", "\n        }\n    }\n    }\n    out:;\n    ", "printf", "(", "\"%f %f\"", ",we,va);\n    ", "return", " ", "0", ";\n}\n\n", "\n"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/hellobabygogo3/article/details/8043584\r\nhttp://www.cnblogs.com/xinsheng/archive/2013/12/04/3458362.html", "Konwledge_Point": "背包问题", "Question": ["多重背包的可行性问题            ", ["Description", "\n\n", "People in Silverland use coins.They have coins of value A1,A2,A3...An Silverland dollar.One day Tony opened his money-box and found there were some coins.He decided to buy a very nice watch in a nearby shop. He wanted to pay the exact price(without change) and he known the price would not more than m.But he didn't know the exact price of the watch.", "\nYou are to write a program which reads n,m,A1,A2,A3...An and C1,C2,C3...Cn corresponding to the number of Tony's coins of value A1,A2,A3...An then calculate how many prices(form 1 to m) Tony can pay use these coins.", "\nInput", "\n\n", "The input contains several test cases. The first line of each test case contains two integers n(1<=n<=100),m(m<=100000).The second line contains 2n integers, denoting A1,A2,A3...An,C1,C2,C3...Cn (1<=Ai<=100000,1<=Ci<=1000). The last test case is followed by two zeros.", "\nOutput", "\n\n", "For each test case output the answer on a single line.", "\nSample Input", "\n\n", "3 10", "\n1 2 4 2 1 1", "\n2 5", "\n1 4 2 1", "\n0 0", "\nSample Output", "\n\n", "8", "\n4"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/libin56842/article/details/9473019", "Konwledge_Point": "背包问题", "Question": ["poj 1276 背包问题 编译错误 求大神看看 英汉题意如下", ["Description", "\n\n", "A Bank plans to install a machine for cash withdrawal. The machine is able to deliver appropriate @ bills for a requested cash amount. The machine uses exactly N distinct bill denominations, say Dk, k=1,N, and for each denomination Dk the machine has a supply of nk bills. For example, ", "\n\n", "N=3, n1=10, D1=100, n2=4, D2=50, n3=5, D3=10 ", "\n\n", "means the machine has a supply of 10 bills of @100 each, 4 bills of @50 each, and 5 bills of @10 each. ", "\n\n", "Call cash the requested amount of cash the machine should deliver and write a program that computes the maximum amount of cash less than or equal to cash that can be effectively delivered according to the available bill supply of the machine. ", "\n\n", "Notes: ", "\n@ is the symbol of the currency delivered by the machine. For instance, @ may stand for dollar, euro, pound etc. ", "\nInput", "\n\n", "The program input is from standard input. Each data set in the input stands for a particular transaction and has the format: ", "\n\n", "cash N n1 D1 n2 D2 ... nN DN ", "\n\n", "where 0 <= cash <= 100000 is the amount of cash requested, 0 <=N <= 10 is the number of bill denominations and 0 <= nk <= 1000 is the number of available bills for the Dk denomination, 1 <= Dk <= 1000, k=1,N. White spaces can occur freely between the numbers in the input. The input data are correct. ", "\nOutput", "\n\n", "For each set of data the program prints the result to the standard output on a separate line as shown in the examples below. ", "\nSample Input", "\n\n", "735 3  4 125  6 5  3 350", "\n633 4  500 30  6 100  1 5  0 1", "\n735 0", "\n0 3  10 100  10 50  10 10", "\nSample Output", "\n\n", "735", "\n630", "\n0", "\n0", "\n题意：有现今cash，和n种钱币，每种钱币有ni个，价值为di，求各种钱币组成的不超过cash的最大钱数.......", "\n\n", " #include <iostream>\n#include <vector>\n#include <cstring>\n\nusing namespace std;\n\nint imax(int a,int b)\n{\n    return(a>b?a:b);\n}\n\nint main()\n{\n    int cash;\n    int nu;\n    while(cin>>cash>>nu)\n    {\n        vector <int> l;\n        l.push_back(0);\n        int num=0;\n        int n;\n        int d;\n        int i;\n        int j;\n\n        for(i=1;i<nu+1;++i)\n        {\n            cin>>n>>d;\n            num+=n;\n            for(j=0;j<n;++j)\n            {\n                l.push_back(d);\n            }\n        }\n        int f[num+1][cash+1];\n        memset(f,0,sizeof(f));\n        i=0;\n        j=0;\n\n        for(int i=1;i<num+1;++i)\n        {\n            for(int j=cash;j>=l[i];--j)\n            {\n                f[i][j]=imax(f[i-1][j-l[i]]+l[i],f[i-1][j]);\n            }\n        }\n        cout<<f[num][cash]<<endl;\n    }\n\n    return 0;\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你原本开辟的空间是m 、n大小下标从0开始&amp;#xff0c;但是循环判断i&amp;#xff0c;j怎么能等于n m 了&amp;#xff0c;这样越界了&amp;#xff0c;把两个循环的等于号去掉&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["c语言，完全背包问题，动态建立数组，发生内存冲突", []], "Tag": "算法设计"}
{"Answer": "把子问题理解为：“(组合价值, 组合物品列表）的列表”，从一组物品开始，逐步添加下一组物品，最终结果出来之后筛选符合条件“总价值不超过给定值”的组合价值最大的项。\r\n优化：在计算过程中，可以把组合价值超过给定值的项剔除。", "Konwledge_Point": "背包问题", "Question": ["分组背包的变式问题（每组物品必须选择一个不能不选）", ["有n组物品，必须从每一组物品中选出一个，在物品的总价值不超过一个给定值的情况下，得到最高的价值。", "\n\n", "目前我用递归在每一次递归过程中设置了单独的循环查找每一类中的所有物品，后序问题要求用动态规划进行优化。", "\n\n", "但是动态规划要求每个子问题具有最优解，但是对于这个问题对于子问题的最优解就可能会导致下一个问题无解，希望大神们给点思路"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/386900930846164.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\nn, v &amp;#61; map(int,&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;()&lt;span class=\"hljs-selector-class\"&gt;.split&lt;/span&gt;())\nlst &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(n):\n    vl, value &amp;#61; map(int,&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;()&lt;span class=\"hljs-selector-class\"&gt;.split&lt;/span&gt;())\n    lst&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(&lt;span class=\"hljs-selector-attr\"&gt;[vl,value]&lt;/span&gt;)\ndp &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[[0]&lt;/span&gt;*(v&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)]\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,v&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; j&amp;lt;lst&lt;span class=\"hljs-selector-attr\"&gt;[i-1]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;:#装不下\n            dp&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[j]&lt;/span&gt; &amp;#61; dp&lt;span class=\"hljs-selector-attr\"&gt;[i-1]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[j]&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:#装得下&amp;#xff0c;预留空间\n            dp&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[j]&lt;/span&gt; &amp;#61; max(dp&lt;span class=\"hljs-selector-attr\"&gt;[i-1]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[j]&lt;/span&gt;,dp&lt;span class=\"hljs-selector-attr\"&gt;[i-1]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[j-lst[i-1]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;] &amp;#43; lst&lt;span class=\"hljs-selector-attr\"&gt;[i - 1]&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[1]&lt;/span&gt;)\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(dp[-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;/span&gt;\n \n \n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你的代码略微改了一下&amp;#xff0c;希望对你有用&amp;#xff0c;望采纳&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["01背包python3问题解答不知道哪里错了", ["01背包，", "有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。", "\n", "第 i 件物品的体积是 vi，价值是 wi。", "\n", "求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。", "输出最大价值。", "\n", "输入格式", "第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。", "\n", "接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。", "\n", "输出格式", "输出一个整数，表示最大价值。", "\n", "数据范围", "0<N,V≤1000", "0<vi,wi≤1000", "输入样例", "4 5", "1 2", "2 4", "3 4", "4 5", "输出样例：", "8", "\n", "\n\n\nn, v = map(int,", "input", "()", ".split", "())\nlst = ", "[]", "\n", "for", " ", "i", " ", "in", " range(n):\nvl, value = map(int,", "input", "()", ".split", "())\nlst", ".append", "(", "[vl,value]", ")\ndp = ", "[[0]", "(v+", "1", ")](n+", "1", ")\n", "for", " ", "i", " ", "in", " range(", "1", ",n+", "1", "):\n", "for", " j ", "in", " range(", "1", ",v+", "1", "):\ndp", "[i]", "[j]", " = dp", "[i-1]", "[j]", "\n", "if", " j >= lst", "[i-1]", "[0]", ":\ndp", "[i]", "[j]", " = max(dp", "[i]", "[j]", ", dp", "[i-1]", "[j-lst[i-1]", "[0]", "] + lst", "[i - 1]", "[1]", ")\n", "print", "(dp[-", "1", "][-", "1", "])", "\n\n\n"]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/chengsheng/p/4891563.html", "Konwledge_Point": "背包问题", "Question": ["贪心+01背包的算法问题，计算dxy的最高分，采用C语言", ["Problem Description", "\nThe SDOI in 2045 is far from what it was been 30 years ago. Each competition has t minutes and n problems.", "\n\n", "The ith problem with the original mark of Ai(Ai≤106),and it decreases Bi by each minute. It is guaranteed that it does not go to minus when the competition ends. For example someone solves the ith problem after x minutes of the competition beginning. He/She will get Ai−Bi∗x marks.", "\n\n", "If someone solves a problem on x minute. He/She will begin to solve the next problem on x+1 minute.", "\n\n", "dxy who attend this competition with excellent strength, can measure the time of solving each problem exactly.He will spend Ci(Ci≤t) minutes to solve the ith problem. It is because he is so godlike that he can solve every problem of this competition. But to the limitation of time, it's probable he cannot solve every problem in this competition. He wanted to arrange the order of solving problems to get the highest mark in this competition.", "\n\n", "Input", "\nThere is an positive integer T(T≤10) in the first line for the number of testcases.(the number of testcases with n>200 is no more than 5)", "\n\n", "For each testcase, there are two integers in the first line n(1≤n≤1000) and t(1≤t≤3000) for the number of problems and the time limitation of this competition.", "\n\n", "There are n lines followed and three positive integers each line Ai,Bi,Ci. For the original mark,the mark decreasing per minute and the time dxy of solving this problem will spend.", "\n\n", "Hint:", "\nFirst to solve problem 2 and then solve problem 1 he will get 88 marks. Higher than any other order.", "\n\n", "Output", "\nFor each testcase output a line for an integer, for the highest mark dxy will get in this competition.", "\n\n", "Sample Input", "\n1", "\n4 10", "\n110 5 9", "\n30 2 1", "\n80 4 8", "\n50 3 2", "\n\n", "Sample Output", "\n88"]], "Tag": "算法设计"}
{"Answer": "http://www.acmerblog.com/hdu-1881-%E6%AF%95%E4%B8%9Abg-2877.html", "Konwledge_Point": "背包问题", "Question": ["用0-1背包的思想                 ", ["问题描述 :", "\n\n", "每年毕业的季节都会有大量毕业生发起狂欢，好朋友们相约吃散伙饭，网络上称为“bg”。参加不同团体的bg会有不同的感觉，我们可以用一个非负整数为每个bg定义一个“快乐度”。现给定一个bg列表，上面列出每个bg的快乐度、持续长度、bg发起人的离校时间，请你安排一系列bg的时间使得自己可以获得最大的快乐度。", "\n\n", "例如有4场bg：", "\n第1场快乐度为5，持续1小时，发起人必须在1小时后离开；", "\n第2场快乐度为10，持续2小时，发起人必须在3小时后离开；", "\n第3场快乐度为6，持续1小时，发起人必须在2小时后离开；", "\n第4场快乐度为3，持续1小时，发起人必须在1小时后离开。", "\n则获得最大快乐度的安排应该是：先开始第3场，获得快乐度6，在第1小时结束，发起人也来得及离开；再开始第2场，获得快乐度10，在第3小时结束，发起人正好来得及离开。此时已经无法再安排其他的bg，因为发起人都已经离开了学校。因此获得的最大快乐度为16。", "\n\n", "注意bg必须在发起人离开前结束，你不可以中途离开一场bg，也不可以中途加入一场bg。", "\n又因为你的人缘太好，可能有多达30个团体bg你，所以你需要写个程序来解决这个时间安排的问题。 ", "\n\n", "输入:", "\n\n", "测试输入包含若干测试用例。每个测试用例的第1行包含一个整数N (<=30)，随后有N行，每行给出一场bg的信息：", "\nh l t", "\n其中 h 是快乐度，l是持续时间（小时），t是发起人离校时间。数据保证l不大于t,因为若发起人必须在t小时后离开，bg必须在主人离开前结束。", "\n\n", "当N为负数时输入结束。 ", "\n\n", "输出:", "\n\n", "每个测试用例的输出占一行，输出最大快乐度。", "\n样例输入:", "\n\n", "3", "\n6 3 3", "\n3 2 2", "\n4 1 3", "\n4", "\n5 1 1", "\n10 2 3", "\n6 1 2", "\n3 1 1", "\n-1", "\n样例输出:", "\n\n", "7", "\n16"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;都可以的&lt;/p&gt;\n&lt;h1 id=\"h1_一、01背包_1639655305324\"&gt;一、0/1背包&lt;/h1&gt;\n&lt;p&gt;&lt;a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/113765565\" id=\"textarea_1639655231180_1639655305325_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;夜深人静写算法&amp;#xff08;十四&amp;#xff09;- 0/1 背包_英雄哪里出来-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;动态规划的基础 —— 0/1 背包&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/WhereIsHeroFrom/article/details/113765565&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;h1 id=\"h1_二、完全背包_1639655305324\"&gt;二、完全背包&lt;/h1&gt;\n&lt;p&gt;&lt;a href=\"https://blog.csdn.net/WhereIsHeroFrom/article/details/113808807\" id=\"textarea_1639655231180_1639655305325_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;夜深人静写算法&amp;#xff08;十五&amp;#xff09;- 完全背包_英雄哪里出来-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;完全背包问题&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/WhereIsHeroFrom/article/details/113808807&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["有关于01背包的问题想请教一下各位", ["01背包为什么可以用滚动数组来做呢？但是完全背包就不行呢"]], "Tag": "算法设计"}
{"Answer": "程序写的有问题， C++不支持动态数组，而且边界问题比较严重。编译都不能通过，更不能运行。\r\n```\r\n int f[n + 1][W + 1] ;\r\n n 和 W都是传入的参数，语法都不对。\r\n \r\n  for(int idx = 1; idx &lt;= n; idx++){\r\n       f[idx][0] = 0;\r\n       for(int j = 1; j &lt;= W; j++){\r\n           f[idx][j] = f[idx - 1][j];\r\n           if(j &gt;= w[idx])   //  这里超出了边界\r\n               f[idx][j] = max(f[idx - 1][j - w[idx-1]] + v[idx-1], f[idx-1][j]);\r\n       }\r\n   }\r\n\t \r\n \r\n```\r\n\r\n自己再仔细看看.", "Konwledge_Point": "背包问题", "Question": ["使用Qt运行C++程序的问题", ["用Qt写01背包问题时发现运行结果怎么都不对,可是debug结果是对的,就找了个在线编译器发现结果是正确的,想知道什么原因", "\n具体代码和图片请大家移步", "http://bbs.csdn.net/topics/392216005", "\n感谢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于GPT和Monster组的编写&amp;#xff0c;&lt;br /&gt;有用请采纳&amp;#xff1a;&lt;br /&gt;这个问题可以被归类为三维背包问题&amp;#xff0c;也称作三维剪枝问题&amp;#xff0c;这是一个NP完全问题&amp;#xff0c;意味着没有一个简单的算法可以在多项式时间内找到最优解。&lt;br /&gt;一般的做法是使用近似算法来尽可能减少空间浪费或者启发式算法来寻找最优或者接近最优的解决方案。常用的方法包括贪心&amp;#xff0c;分治法&amp;#xff0c;遗传算法等。&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["最优经济尺寸设计问题", ["   现有 n个尺寸测量为Xi=[li，wi，hi]  （ 1≤i≤n）的三维立方体，且形状尺寸各不相同、大小各异。现在需要把这n个立方体放进合适的柜子里，柜子需要根据立方体的大小进行定制，我该怎么去设计这有限个柜子的大小，才能使得我所有柜子的空间利用率最大，浪费最少，在柜子摆放空间一定的情况下摆放最多的柜子。", "     我感觉极限情况就是为每个立方体打造适合其本身的柜子，但是这明显不太现实。", "     如果我现在规定只能设计有限个规格的柜子的情况下（比如可以给个限制条件，规定只能设计m种规格的柜子），我该怎么去设计这m个规格的柜子的尺寸，使得空间浪费最少，是不是存在一种最优解。", "    不知道这个问题属于什么数学问题？我有看到“背包问题”，不太一样，请各位指点迷津，给我一点思路，是不是有解决这种数学问题的方法或者算法。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;运行结果及代码如下&amp;#xff1a;&lt;br /&gt;例1&amp;#xff1a;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/595331378756179.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;例2&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/530251378756187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; namespace std;\n\n//&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;判断在n天内&amp;#xff0c;是否有所有考试科目\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; isContainAll(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* d, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t)\n{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; m; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; j &amp;lt; t; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (d[j] &amp;#61;&amp;#61; i)\n                break;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (j &amp;gt;&amp;#61; t) //t天内没有i科目的考试&amp;#xff0c;不满足要求\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n\n//&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;在t天内&amp;#xff0c;如果出现多次i科目的考试&amp;#xff0c;只保留最后&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;次的天数\n&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; deald(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* d, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m)\n{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; t - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&lt;span class=\"hljs-comment\"&gt;--)&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (d[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n\n        //如果d[i]不为&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#xff0c;将之前的&amp;#61;d[i]的全部置&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; i; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (d[j] &amp;#61;&amp;#61; d[i])\n                d[j] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n\n    }\n}\n\n//获取数组中从&lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;开始不为&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;的元素的第一个位置\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; getpos(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* d, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;)\n{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;; i &amp;lt; t; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (d[i] !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; i;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n\n//&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;判断在t天内&amp;#xff0c;是否能够保证所有的科目都能完全准备完\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; isFull(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* d,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* p)\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; shift &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; start &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; pos &amp;#61; getpos(d, t, &lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;);\n        //判断是否有足够的天数复习\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (pos - &lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt; &amp;#43; shift &amp;lt; p[d[pos]])\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            shift &amp;#61; pos - &lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt; &amp;#43; shift - p[d[pos]];\n            start &amp;#61; pos &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n\n\n\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* d, * p;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; //所有科目一共需要准备的天数\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m; //输入n和m\n    d &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[n];\n    p &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[m];\n    //输入di\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n        cin &amp;gt;&amp;gt; d[i];\n    //输入mi\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n    {\n        cin &amp;gt;&amp;gt; p[i];\n        sum &amp;#43;&amp;#61; p[i];\n    }\n\n\n    //需要的天数至少为sum &amp;#43; m ,sum天准备&amp;#xff0c;m天考试\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t &amp;#61; sum &amp;#43; m;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; t &amp;lt;&amp;#61; n; t&amp;#43;&amp;#43;)\n    {\n        //从t&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;到&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#xff0c;判断是否包含了所有的科目\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (isContainAll(m, d, t))\n        {\n            deald(d, t, m); //处理d\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (isFull(d, t, m, p))\n            {\n                cout &amp;lt;&amp;lt; t;\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            }\n        }\n\n    }\n\n    cout &amp;lt;&amp;lt; &amp;#34;-1&amp;#34;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["HELP!求此题的代码!", ["背包问题?什么牛马?还是贪心?em求此题的代码，各位大奆帮帮忙"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;既然这样&amp;#xff0c;那这道题是否可以转换为01背包呢&amp;#xff1f;&lt;/p&gt;\n&lt;p&gt;答案很明显是可以的。可以利用并查集&amp;#xff0c;将这m组配对购买的商品划到一个集合里&amp;#xff0c;这样就可以确定买了其中一个就得买另一个。&lt;/p&gt;\n&lt;p&gt;最后就是01背包啦&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\nusing namespace std;\n\nint father[&lt;span class=\"hljs-number\"&gt;20001&lt;/span&gt;],c[&lt;span class=\"hljs-number\"&gt;20001&lt;/span&gt;],w[&lt;span class=\"hljs-number\"&gt;20001&lt;/span&gt;],f[&lt;span class=\"hljs-number\"&gt;20001&lt;/span&gt;];\nint n,m,k,x,y;\n\nint &lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(int x)  &lt;span class=\"hljs-comment\"&gt;//并查集&lt;/span&gt;\n{\n    return x&amp;#61;&amp;#61;father[x]?x:father[x]&amp;#61;&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(father[x]);\n}\n\nint main()\n{\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d%d&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;m,&amp;amp;k);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;w[i],&amp;amp;c[i]);\n        father[i]&amp;#61;i;  &lt;span class=\"hljs-comment\"&gt;//初始化&lt;/span&gt;\n    } \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;m;i&amp;#43;&amp;#43;)\n    {\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;x,&amp;amp;y);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(x)!&amp;#61;&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(y)) father[&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(y)]&amp;#61;&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(x);  &lt;span class=\"hljs-comment\"&gt;//划为同一集合&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n     &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (father[i]!&amp;#61;i)  &lt;span class=\"hljs-comment\"&gt;//如果买了这一件商品就得买另一件商品&lt;/span&gt;\n     {\n        c[&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(i)]&amp;#43;&amp;#61;c[i];\n        w[&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(i)]&amp;#43;&amp;#61;w[i];  &lt;span class=\"hljs-comment\"&gt;//划为同一集合&lt;/span&gt;\n        c[i]&amp;#61;w[i]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;//清零&amp;#xff0c;不清零就可能会造成重复购买一件商品&lt;/span&gt;\n     }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n     &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int j&amp;#61;k;j&amp;gt;&amp;#61;w[i];j--)\n      f[j]&amp;#61;&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(f[j],f[j-w[i]]&amp;#43;c[i]); &lt;span class=\"hljs-comment\"&gt;//01背包&lt;/span&gt;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\n&amp;#34;&lt;/span&gt;,f[k]);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["洛谷：P1455 搭配购买 怎么做", ["洛谷：P1455 搭配购买 怎么做？？", "\n", "我对题解表示十分无奈，写的都什么", "乱七八糟", "的。", "\n", "题目乍一看挺简单，只是一个普通的01背包问题，但从题目中得知背包的限制条件：买了A就必须买B，而且关系是互相的（而不是买A必买B，买B不一定买A）", "\n", "于是，我就想把相关联的云合在一起，看作一个更大的云，然后就用背包将它解决。", "\n", "问题出现了：", "我不会合并！", "，试了很多遍都不行，希望有天才帮帮忙。题目如下：", "\n", "\n      \n        ", "搭配购买 - 洛谷", "\n        \n      ", "\n      ", "\n      ", "\n        ", "\n          ", "https://www.luogu.com.cn/problem/P1455", "\n        ", "\n      "]], "Tag": "算法设计"}
{"Answer": "&lt;h1&gt;简单插入排序&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;\nvoid display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-comment\"&gt;// 直接插入排序:默认排序结果是非递减有序序列&lt;/span&gt;\nvoid direct&lt;span class=\"hljs-constructor\"&gt;InsertSort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;length&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; tmp,i, j;\n    display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;length&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;length;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&amp;lt;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;){\n            tmp&amp;#61;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;amp;&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;&amp;gt;tmp;j--){\n                a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;&amp;#61;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;;\n            }\n            a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;&amp;#61;tmp;\n        }\n        display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;length&lt;/span&gt;)&lt;/span&gt;;\n    }\n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;43&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;79&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;};\n    direct&lt;span class=\"hljs-constructor\"&gt;InsertSort(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;)&lt;/span&gt;/sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;));\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i,len&amp;#61;sizeof(a)/sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Result:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;len;i&amp;#43;&amp;#43;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/531420675636186.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;h1&gt;选择排序&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;\nvoid display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\nvoid swap(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;*a,&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;*b){(*a)^&amp;#61;(*b);(*b)^&amp;#61;(*a);(*a)^&amp;#61;(*b);}\nvoid select&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;[],&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; minpos&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,i,j;\n    display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;len-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        minpos&amp;#61;i;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;lt;len;j&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;&amp;lt;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;minpos&lt;/span&gt;]&lt;/span&gt;) minpos&amp;#61;j;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(minpos!&amp;#61;i){\n            swap(&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;,&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;minpos&lt;/span&gt;]&lt;/span&gt;);\n        }\n        display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;;\n    }\n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;43&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;79&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;};\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; len &amp;#61; sizeof(a)/sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;);\n    select&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Result:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;len;i&amp;#43;&amp;#43;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/766161675636133.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;h1&gt;冒泡排序&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;\nvoid display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\nvoid swap(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;*a,&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;*b){ (*a)^&amp;#61;(*b);(*b)^&amp;#61;(*a);(*a)^&amp;#61;(*b);}\n&lt;span class=\"hljs-comment\"&gt;//线性排序的冒泡排序:递增序列&lt;/span&gt;\nvoid bubble&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;[],&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; flag;\n    display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;len-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i--) {\n        flag&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;i;j&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;&amp;gt;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;){&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//将大的后移&lt;/span&gt;\n                flag&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                swap(&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;,&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;);\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!flag) break;\n        display&lt;span class=\"hljs-constructor\"&gt;Array(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;;\n    }  \n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;43&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;79&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;};\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; len &amp;#61; sizeof(a)/sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;);\n    bubble&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt;;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Result:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;len;i&amp;#43;&amp;#43;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/380302675636172.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;h1&gt;背包问题&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;//一维数组解法&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; MAX_M 12880        &lt;span class=\"hljs-comment\"&gt;//最大限重&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; MAX_N 3402        &lt;span class=\"hljs-comment\"&gt;// 最大种类数&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; max(a,b) a&amp;gt;b?a:b&lt;/span&gt;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dp[MAX_M &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; weights[MAX_N &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; values[MAX_N &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m, i, j;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;n , &amp;amp;m);&lt;span class=\"hljs-comment\"&gt;//n是种类&amp;#xff0c;m是限制重量&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;weights[i] ,&amp;amp;values[i]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; m; j &amp;gt;&amp;#61; weights[i]; j--) {\n            dp[j] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(dp[j], dp[j - weights[i]] &amp;#43; values[i]);\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, dp[m] );\n}\n&lt;span class=\"hljs-comment\"&gt;/*\n5 15\n4 12\n2 2\n2 1\n1 1\n10 4\n*/&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/194352675636131.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["大学计算机—计算思维导论  习题求解", ["按三种不同的内排序算法对下列数据完成排序：43, 4, 79, 22。\n", "\n", "\n", "（1）插入法排序，要求写出每次插入一个数据后的数据排列状态；", "（2）简单选择法排序，要求写出每次选择一个元素并安置到合适位置后的数据排列状态；", "（3）冒泡法排序，要求写出每个轮次的数据排列结果。", "\n", "   背包问题的定义是：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量", "内，我们如何选择，才能使得物品的总价格最高。下图是背包问题的一个例子，应该选择哪", "些盒子，才能使价格尽可能地大，并且保持总重量不超过 15 kg？所选物品的总价值是多少？", "\n"]], "Tag": "算法设计"}
{"Answer": "在函数内部声明了的二维数组超过了你系统的限制，有两种方案，1）把数组w和m的声明放到函数外面（就是声明为全局变量），或者\r\n2）用malloc动态申请内存创建二维数组。", "Konwledge_Point": "背包问题", "Question": ["关于01背包代码的一些问题", ["1.main函数使用了堆栈的“41216”个字节: 超过了 /analyze:stacksize '16384'。 请考虑将某些数据移到堆中。这个应该怎么解决？", "\n2.以下见代码：（报错信息在注释中）", "\n\n", "#include<stdio.h>\nint max(int a, int b) {\n    if (a >= b)return a;\n    else return b;\n}\nmain() {\n    int n, c;\n    int w[100], v[100];\n    int i, j;\n    int m[100][100];//已有价值和剩余容量\n    int put[100];//是否放置\n    scanf_s(\"%d %d\", &n, &c);\n    for (i = 0;i < n;i++) {\n        scanf_s(\"%d\", &w[i]);\n    }\n    for (i = 0;i < n;i++) {\n        scanf_s(\"%d\", &v[i]);\n    }\n    for (i = 0;i < n;i++) {\n        for (j = c;j >= 0;j--){\n            if (w[i] <= j) {//如果装得下\n                m[i][j]= max(m[i - 1][j - w[i]] + v[i], m[i - 1][j]);\n            }\n            else {\n                m[i][j] = m[i - 1][j];\n            }\n\n\n        }\n    }\n    printf(\"%d\\n\", m[n - 1][c]);//可读大小为40000个字节，但可能读取了-400个字节\n    for (i = 0;i < n;i++) {\n        for (j = c;j >= 0;j--) {\n            if (m[i][j] == m[i - 1][j])put[i] = 0;\n            else put[i] = 1;\n        }\n    }\n    for (i = 0;i < n;i++) {\n        printf(\"%d\", put[i]);\n        printf(\" \");\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n", "\n\n", "又：报错行的c是否该改为0？因为如果按照j表示剩余容量的设定，应该输出剩余容量为0时的最大价值", "\n请各位大佬指教"]], "Tag": "算法设计"}
{"Answer": "```\r\n 用户信息：id，姓名，....          存储用户信息\r\n\r\n活动表：id，活动名称，....       存储活动信息\r\n\r\n\r\nactivities_user：id，用户id，活动id    存储用户参与活动关系\r\n```", "Konwledge_Point": "背包问题", "Question": ["数据库设计问题，求解", ["现在要设计一个活动。", "\n活动有报名参与的用户，怎样去存储参与活动的用户列表呢？"]], "Tag": "算法设计"}
{"Answer": "```\r\n for (i = n - 1; i &gt;= 0;i--)   //看代码有点排序，这个是倒着排序，数组下标越小越大\r\n \r\n//for (i = 0; i &lt; n;i++) //如果这样写肯定是需要修改的代码。。\r\n```", "Konwledge_Point": "背包问题", "Question": ["dp中第一行的循环为什么一定要那么写，而不能写成我注释的那个样子？", ["for (i = n - 1; i >= 0;i--)", "\n        //for (i = 0; i < n;i++)", "\n        {", "\n            for (j = 0; j <= w; j++)", "\n            {", "\n                //show();", "\n                if (j < wi[i])", "\n                {", "\n                    dp[i][j] = dp[i + 1][j];", "\n                }", "\n                else", "\n                {", "\n                    dp[i][j] = max(dp[i + 1][j], dp[i + 1][j - wi[i]] + pi[i]);", "\n                }", "\n            }", "\n        }", "\n        cout << dp[0][w] << endl;", "\n        //cout << dp[n - 1][w] << endl;", "\n\n", "    这是简单的背包问题的动态规划，可是我还是不会\n"]], "Tag": "算法设计"}
{"Answer": "程序1\r\nInput：n个集装箱，及其重量wi；两艘轮船的载重量C1，C2。 \r\nOutput：一种装载方案，没有输出没有解。  \r\n1. 设定目标函数的限界down=w1，up=  n iiw1 ，flag=false(标记是否找到解)  \r\n2. 计算初始结点1的f(1)=up和g(1)=0，将初始结点插入最大堆H,堆中存储f值为结点键值;  \r\n3. while (H ≠Φ)  \r\n4. {  \r\n5.       从H中做DELETEMAX的操作，用p带回相应结点; \r\n6.       If  g(p)&lt;=C1 and up-g(p)&lt;=C2 then    \r\n7.             沿parent指针输出装入第一艘轮船的集装箱，  剩余装入第二艘轮船，flag=true，exit  (结束程序)；  \r\n8.       Else if g(p)&lt;=C1 and up-g(p)&gt;C2  \r\n9.       {    if p为叶子结点 then    \r\n10.               if  堆H为空then  输出没有解, exit  (结束程序)；  \r\n11.               else  if f(p)&gt;down then down=f(p), 删除H中小于等于down的结点； \r\n12.           else   \r\n13.           {   产生p满足约束条件的后继结点d(建树，保留结点的parent指针)  并计算f(d)和g(d)  \r\n14.              将f值大于down的结点插入最大堆H中；} \r\n15.       } \r\n16. }  \r\n17. if flag=false then 输出没有解；", "Konwledge_Point": "背包问题", "Question": ["c++编译错误。怎么办？", ["/*描述：有一批共n个集装箱要装上两艘载重量分别为c1和c2的轮船，其中，集装箱i的重量为wi，且", "\n    集装箱重量总和小于等于两辆轮船的载重量总和。", "\n    装在问提要求确定是否存在一个方案可将这n个集装箱装上两艘轮船。", "\n    若有，找出一种装在方案。", "\n\n", "解决方法：（1）首先将第一艘轮船极可能装满", "\n            （2）将其余的集装箱装载第二艘轮船", "\n\n", "    装载第一艘轮船的方法等价于一个特殊的0-1背包问题\n", "\n\n", "*/", "\n#include ", "\n\n", "using namespace std;", "\n\n", "int c1[100], c2[100];//两艘轮船的载重量", "\nint n[100];//集装箱个数", "\nint w[1000];//每个集装箱的重量", "\nint bestw = 0;//记录当前第一搜轮船装载的最大值", "\nint a[1000];//记录每个集装箱是否被装进第一搜轮船", "\n\n", "//插入排序", "\nvoid InsertSort(int A[], int N)", "\n{", "\n    int j, p;", "\n    int tmp;", "\n\n", "for(p = 1; p < N; p++) {\n    tmp = A[p];\n    for(j = p; j > 0 && A[j - 1] > A[j]; j--) {\n        A[j] = A[j - 1];\n    }\n\n    A[j] = tmp;\n}\n", "\n\n", "}", "\n\n", "void search(int m)", "\n{", "\n    if(m >= n)//这里提示有问题", "\n        return;", "\n    else {", "\n        if(w[m] <= c1 - bestw)//这里提示有问题", "\n        {", "\n            a[m] = 1;", "\n            bestw = bestw + w[m];", "\n        }", "\n\n", "    else a[m] = 0;\n\n    search(m + 1);\n}\n", "\n\n", "}", "\n\n", "//判断函数", "\nbool outp(int c1, int C2, int N)", "\n{", "\n    int i;", "\n    //对集装箱的重量进行插入排序", "\n    InsertSort(w, N);", "\n\n", "//将将第一个集装箱尽可能装满\nsearch(0);\n\nint wz = 0;//集装箱总重量\nfor(i = 0; i < N; i++) {\n    wz = wz + w[i];\n}\n//做出判断\nif(C2 >= wz - bestw)\n    return true;\nelse\n    return false;\n", "\n\n", "}", "\n\n", "int main()", "\n{", "\n    int i = -1, j;", "\n    do {", "\n        i++;", "\n        cin >> c1[i] >> c2[i] >> n[i];//输入载重量和集装箱的个数", "\n        int i;//循环变量", "\n        for(j = 0; j < n[i]; j++) {", "\n            //输入每个集装箱的重量", "\n            cin >> w[i];", "\n        }", "\n    }while(c1[i] || c2[i] || n[i]);", "\n\n", "int tmp = i;\n\nfor(i =  0; i < tmp; i++) {\n    if(outp(c1[i], c2[i], n[i]))\n        cout << \"Yes\" << endl;\n    else cout << \"No\" << endl;\n}\nreturn 0;\n", "\n\n", "}", "\n\n", "\n", "\n\n", "编译提示", "\nerror: ISO C++ forbids comparison between pointer and integer"]], "Tag": "算法设计"}
{"Answer": "http://www.acmerblog.com/hdu-3983-harry-potter-and-the-binary-kingdom-6986.html", "Konwledge_Point": "背包问题", "Question": ["Harry Potter and the Binary Kingdom              ", ["问题描述 :", "\n\n", "After defeating the Voldemort, Harry is enjoying his senior year in Hogwarts with his friends. They decide to make a graduation trip, using their newest magical broom. In the journey, Harry is trapped in a Kingdom named Binary Kingdom, maybe because the smart but isolated people still have no idea of the great reputation of this young wizard. Loving numbers and binary very much, the subjects of Binary Kingdom claim only Harry solve the problem can he leave there.", "\nHarry Potter and J.K.Rowling", "\n\n", "The problem begins with an empty number multi-set, with six kinds of operation:", "\n\n", "\n", "INS M: insert M into the set", "\n", "DEL M: delete all numbers equal to M if any one exists; otherwise report “Del error”", "\n", "ADD M: increase the value of every number by M", "\n", "SUB M: decrease the value of every number by M if after decreasing no number will be less than zero; otherwise report “Sub error”", "\n", "QNUM M: query how many numbers equal to M in the set", "\n", "QBIT M: query how many numbers whose M-th bit is 1 in its binary, M is counting from lower to higher, beginning with 0", "\n", "Though our brave Harry Potter can proficient in many fields, he is not good at math, now, it’s your time. ", "\n\n", "输入:", "\n\n", "The first line contains a single integer T, indicating the number of test cases.", "\nEach test case begins with an integer M, following M operations. ", "\n\n", "Technical Specification", "\n\n", "\n", "1 <= T <= 12", "\n", "1 <= M <= 100 000", "\n", "The QBIT operations’ M will in the range [0, 17], the other five operations’ M in the range [0, 1 000 000 000]. ", "\n", "输出:", "\n\n", "The first line contains a single integer T, indicating the number of test cases.", "\nEach test case begins with an integer M, following M operations. ", "\n\n", "Technical Specification", "\n\n", "\n", "1 <= T <= 12", "\n", "1 <= M <= 100 000", "\n", "The QBIT operations’ M will in the range [0, 17], the other five operations’ M in the range [0, 1 000 000 000].", "\n", "样例输入:", "\n\n", "1", "\n10", "\nINS 1", "\nINS 2", "\nDEL 1", "\nINS 3", "\nDEL 1", "\nADD 1", "\nSUB 4", "\nQNUM 2", "\nQBIT 1", "\nQBIT 2", "\n样例输出:", "\n\n", "Case 1:", "\nDel error", "\nSub error", "\n0", "\n1", "\n1"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;c是多重背包了&amp;#xff0c;不是01&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["谁能告诉我,他最后一个背包里的价值是咋算出来的?", ["昨天看课件,看要这个贪心算法,讲的01背包的例子 ,但是 他这个例图属实给我看懵逼了,有人理解他这个例子是啥意思么 ?", "\n", "特别是 C那个例子 ,01背包问题,一个物品不是只能用一次么?,而且最后一个背包的价值到底咋算出来的?", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用GPTᴼᴾᴱᴺᴬᴵ&lt;br /&gt;这个问题可以使用整数规划来求解。我们可以将每个人排的时间段表示成0/1向量&amp;#xff0c;其中1表示这个时间段被排给这个人&amp;#xff0c;0表示这个时间段没有被排给这个人。然后我们可以定义以下变量&amp;#xff1a;&lt;br /&gt;-&lt;br /&gt;$x_{i,j}$&amp;#xff1a;表示第$i$个人是否被排在第$j$个时间段&amp;#xff0c;其中$i\\in[1,29], j\\in[1,6520]$。&lt;br /&gt;$y_i$&amp;#xff1a;表示第$i$个人被排的时间总长&amp;#xff0c;其中$i\\in[1,29]$。&lt;br /&gt;接下来&amp;#xff0c;我们需要定义一些约束条件和目标函数。首先&amp;#xff0c;对于每个人&amp;#xff0c;他们被排的时间总长应该满足以下约束&amp;#xff1a;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/495987405876146.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;其中&amp;#xff0c;$t_j$表示第$j$个时间段的时长。另外&amp;#xff0c;每个人被排的时间段数也需要满足一定的约束&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/402738405876139.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;每个时间段只能被一个人排&amp;#xff0c;因此我们需要满足以下约束&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/846168405876124.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;最后&amp;#xff0c;我们需要定义一个目标函数&amp;#xff0c;使得每个人的时间尽量平均&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/297519405876161.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;这个问题可以使用整数规划求解器来解决&amp;#xff0c;例如PuLP库。下面是一个Python代码示例&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; pulp &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; *\n\n&lt;span class=\"hljs-comment\"&gt;# 设置每个人的监考次数和时长&lt;/span&gt;\nsubjects &amp;#61; [&lt;span class=\"hljs-string\"&gt;&amp;#39;语文&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;英语&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;数学&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;物理&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;道法&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;历史&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;化学&amp;#39;&lt;/span&gt;]\nnum_subjects &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(subjects)\nnum_people &amp;#61; &lt;span class=\"hljs-number\"&gt;29&lt;/span&gt;\ntime_limit &amp;#61; &lt;span class=\"hljs-number\"&gt;6520&lt;/span&gt;\n\nnum_exams &amp;#61; {\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;语文&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;英语&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;数学&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;物理&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;道法&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;历史&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;化学&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;\n}\n\ntime_per_exam &amp;#61; {\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;语文&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;224&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;英语&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;224&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;数学&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;224&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;物理&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;448&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;道法&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;448&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;历史&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;448&lt;/span&gt;,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;化学&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-number\"&gt;448&lt;/span&gt;\n}\n\n&lt;span class=\"hljs-comment\"&gt;# 定义问题&lt;/span&gt;\nprob &amp;#61; LpProblem(&lt;span class=\"hljs-string\"&gt;&amp;#34;监考排班问题&amp;#34;&lt;/span&gt;, LpMinimize)\n\n&lt;span class=\"hljs-comment\"&gt;# 定义决策变量&lt;/span&gt;\nx &amp;#61; {}\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_people):\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_subjects):\n        x[(i, j)] &amp;#61; LpVariable(&lt;span class=\"hljs-string\"&gt;&amp;#34;x_{}_{}&amp;#34;&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;format&lt;/span&gt;(i, j), &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, LpInteger)\n\n&lt;span class=\"hljs-comment\"&gt;# 定义目标函数&lt;/span&gt;\nprob &amp;#43;&amp;#61; lpSum([x[(i, j)] * time_per_exam[subjects[j]] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_people) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_subjects)])\n\n&lt;span class=\"hljs-comment\"&gt;# 添加约束条件&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_subjects):\n    prob &amp;#43;&amp;#61; lpSum([x[(i, j)] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_people)]) &amp;#61;&amp;#61; num_exams[subjects[j]]\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_people):\n    prob &amp;#43;&amp;#61; lpSum([x[(i, j)] * time_per_exam[subjects[j]] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_subjects)]) &amp;#61;&amp;#61; time_limit\n\n&lt;span class=\"hljs-comment\"&gt;# 求解问题&lt;/span&gt;\nprob.solve()\n\n&lt;span class=\"hljs-comment\"&gt;# 输出结果&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_people):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;第{}位监考老师&amp;#xff1a;&amp;#34;&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;format&lt;/span&gt;(i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_subjects):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; x[(i, j)].value() &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t{}: {}次&amp;#34;&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;format&lt;/span&gt;(subjects[j], num_exams[subjects[j]]))\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t总时长: {}分钟&amp;#34;&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;format&lt;/span&gt;(value(lpSum([x[(i, j)] * time_per_exam[subjects[j]] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(num_subjects)]))))\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;该代码使用PuLP库&amp;#xff0c;定义了每个人监考的次数和时长&amp;#xff0c;并使用整数规划方法求解监考排班问题。输出结果会列出每位监考老师监考的科目和总时长。&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["python排监考，怎么解决", ["请教一个问题，用python怎么解决，没有什么思路，用背包的话这个太复杂了", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用ChatGPT &lt;/p&gt;\n&lt;p&gt;了保证服务端的10比1的比例&amp;#xff0c;可以设计如下的接口测试用例&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1、测试用例1&amp;#xff1a;money为10&amp;#xff0c;num为1&amp;#xff0c;预期结果为play为1。&lt;br /&gt;2、测试用例2&amp;#xff1a;money为90&amp;#xff0c;num为9&amp;#xff0c;预期结果为play为9。&lt;br /&gt;3、测试用例3&amp;#xff1a;money为100&amp;#xff0c;num为1&amp;#xff0c;预期结果为play为1。&lt;br /&gt;4、测试用例4&amp;#xff1a;money为100&amp;#xff0c;num为10&amp;#xff0c;预期结果为play为10。&lt;br /&gt;5、测试用例5&amp;#xff1a;money为110&amp;#xff0c;num为10&amp;#xff0c;预期结果为play为10。&lt;br /&gt;6、测试用例6&amp;#xff1a;money为150&amp;#xff0c;num为15&amp;#xff0c;预期结果为play为10。&lt;br /&gt;7、测试用例7&amp;#xff1a;money为0&amp;#xff0c;num为1&amp;#xff0c;预期结果为play为0。&lt;br /&gt;通过以上测试用例&amp;#xff0c;可以保证服务端的10比1的比例&amp;#xff0c;同时也覆盖了不同的场景&amp;#xff0c;如有足够的金币可以玩多少次游戏&amp;#xff0c;不足的金币可以玩多少次游戏&amp;#xff0c;甚至金币不够玩游戏的场景。&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["关于#游戏程序#的问题：玩游戏一次10金币，接口返回一个可玩游戏的次数是10.(开发工具-postman)", ["我背包有100金币，玩游戏一次10金币，接口返回一个可玩游戏的次数是10.", "\n", "入参就是    money 100，  num 10  ，返回play 10", "\n", "就是一次游戏的比例是10比1，怎么设计接口测试用例保证服务端的10比1的比例"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,t;\n&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; s;\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;miji&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m,v;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; w;\n}k[&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;];       &lt;span class=\"hljs-comment\"&gt;//定义结构体 &lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;cmp&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;(miji a,miji b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a.w&amp;gt;b.w;         &lt;span class=\"hljs-comment\"&gt;//由于排序要用sort&amp;#xff0c;所以要打此函数 &lt;/span&gt;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    cin &amp;gt;&amp;gt;n &amp;gt;&amp;gt;t;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        cin &amp;gt;&amp;gt;k[i].m &amp;gt;&amp;gt;k[i].v;\n        k[i].w&amp;#61;k[i].v*&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;/k[i].m;      &lt;span class=\"hljs-comment\"&gt;//k[i].w是性价比 &lt;/span&gt;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt; (k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,n&amp;#43;k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,cmp);       &lt;span class=\"hljs-comment\"&gt;//按性价比排序 &lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (t&amp;gt;k[i].m)\n        {\n            s&amp;#43;&amp;#61;k[i].v;\n            t-&amp;#61;k[i].m;            &lt;span class=\"hljs-comment\"&gt;//如果当前物品可以装下&amp;#xff0c;就装 &lt;/span&gt;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            s&amp;#43;&amp;#61;t*&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;*k[i].w;          &lt;span class=\"hljs-comment\"&gt;//装不下就尽量多 &lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.2f&amp;#34;&lt;/span&gt;,s);        &lt;span class=\"hljs-comment\"&gt;//保留两位小数&amp;#xff0c;输出 &lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "背包问题", "Question": ["关于#C++#的问题，如何解决？", ["题目描述", "独孤大虾走进了放满武功秘籍的秘境。秘境里面有 N(N≤100) 本秘籍，第 i 本秘籍的重量和武力提升值分别是 mi​,vi​(1≤mi​,vi​≤100)。独孤大虾有一个承重量为 T(T≤1000) 的背包，但并不一定有办法将全部的秘籍都装进去。他想提升尽可能多的武力值。所有秘籍都可以把单个动作招式拆分，拆分完的秘籍重量武力比（也就是单位武力值）不变。请问独孤大虾最多可以提升多少武力值？", "\n", "输入格式", "第一行两个整数 N,T。", "\n", "接下来 N 行，每行两个整数 mi​,vi​。", "\n", "输出格式", "一个实数表示答案，输出两位小数", "\n", "输入输出样例", "输入 #1", "\n", "4 50", "10 60", "20 100", "30 120", "15 45", "输出 #1", "\n", "240.00"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;scanf_s&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;, &amp;amp;limitweight);\n&lt;span class=\"hljs-attribute\"&gt;limitweight&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你这里刚输入重量限制&amp;#xff0c;又把它清掉干什么&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["大家看看哪里出了问题，最后显示是0", ["问题：实现从N个物品种找出价值总和最大的物品，放在额定容量的背包里。", "\n", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "define", " N 100", "\n", "int", " num_type;\n", "int", " currentoption[N];\n", "int", " option[N];\n", "double", " maxvalue;", "/*最大值*/", "\n", "double", " totalvalue;", "/*总价值*/", "\n", "double", " limitweight;", "/*重量限制*/", "\n", "struct", " \n{\n    ", "double", " weight;\n    ", "double", " value;\n}good[N];\n", "void", " ", "outchick", "(", "int", " i, ", "double", " tw, ", "double", " totalvalue)", "\n", "{\n    ", "int", " k;\n    ", "if", " (tw + good[i].weight <= limitweight)\n    {\n        currentoption[i] = ", "1", ";\n        ", "if", " (i < num_type - ", "1", ")\n            ", "outchick", "(i + ", "1", ", tw + good[i].weight, totalvalue);\n        ", "else", "\n        {\n            ", "for", " (k = ", "0", "; k < num_type; ++k)\n                option[k] = currentoption[k];\n            maxvalue = totalvalue;\n            \n        }\n    }\n    currentoption[i] = ", "0", ";\n    ", "if", " (totalvalue - good[i].value > maxvalue)\n    {\n        ", "if", " (i < num_type - ", "1", ")\n            ", "outchick", "(i + ", "1", ", tw, totalvalue - good[i].value);\n        ", "else", "\n        {\n            ", "for", " (k = ", "0", "; k < num_type; ++k)\n                option[k] = currentoption[k];\n            maxvalue = totalvalue - good[i].value;\n        }\n    }\n}\n", "void", " ", "main", "()", "\n", "{\n    ", "int", " i;\n    ", "double", " weight, value;\n    ", "printf", "(", "\"请输入物品的类别数：\\n\"", ");\n    ", "scanf_s", "(", "\"%d\"", ", &num_type);\n    ", "printf", "(", "\"请输入物品的重量和价格\\n\"", ");\n    totalvalue = ", "0.0", ";\n    ", "for", " (i = ", "0", "; i < num_type; ++i)\n    {\n        ", "scanf_s", "(", "\"%lf %lf\"", ", &weight, &value);\n        good[i].weight = weight;\n        good[i].value = value;\n        totalvalue += value;\n    }\n    ", "printf", "(", "\"输入重量限制\\n\"", ");\n    ", "scanf_s", "(", "\"%lf\"", ", &limitweight);\n    limitweight = ", "0.0", ";\n    ", "for", " (i = ", "0", "; i < num_type;++i)\n    {\n        currentoption[i] = ", "0", ";\n    }\n    ", "outchick", "(", "0", ", ", "0.0", ", totalvalue);\n    ", "for", " (i = ", "0", "; i < num_type;++i)\n        ", "if", " (option[i])\n            ", "printf", "(", "\"%d\\t\"", ", i + ", "1", ");\n    ", "printf", "(", "\"总价值是%2f\"", ", maxvalue);\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;i最大值是5&amp;#xff0c;j最大值是3&amp;#xff0c;5*i&amp;#43;j&amp;#61;28&amp;#xff0c;handbag[28]越界了吧。&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["如何使用easyx由于一段代码而出现闪退？(语言-c语言)", ["使用easyx由于一个代码的闪退", "\n", "\ntypedef struct {\n    int num;", "//", "武器编号\n    int intensify;", "//", "强化等级\n    char name[", "15", "]; ", "//", "武器名称\n    int atk; ", "//", "攻击力\n    int magicatk;", "//", "魔法攻击\n    int pp;  ", "//", "所需体力\n    int mp;", "//", "所需魔力值\n    IMAGE* p;  ", "//", "贴图\n    TCHAR story[", "100", "];", "//", "武器描述\n    int money;", "//", "出售金币\n\n}weapon;", "//", "结构体 - 武器\nweapon handbag[", "24", "];", "//", "武器背包\n", "for", " (int i = ", "0", "; i < ", "24", "; i++)", "//", "背包数组初始化\n                handbag[i] = { -", "1", ",", "0", ",NULL,", "0", ",", "0", ",", "0", ",", "0", ",NULL,NULL,", "0", " };\n", "for", " (int i = ", "0", "; i < ", "6", "; i++) ", "//", "武器贴图打印\n        ", "for", " (int j = ", "0", "; j < ", "4", "; j++) {\n                    drawAlpha(&img_empt, ", "400", " + j * ", "40", ", ", "130", " + i * ", "40", ");", "//", "打印的空白贴图\n                    ", "if", " (handbag[", "5", " * i + j].p != NULL);\n                    ", "//", "drawAlpha(handbag[", "5", " * i + j].p, ", "400", " + j * ", "33", ", ", "130", " + i * ", "33", ");", "//", "打印的武器\n                \n                }\n", "\n", "注释掉的一段代码就是问题，如果我加上这段代码，打开背包的时候，就会闪退，注释掉就不会。", "感谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我是这样理解的&lt;br /&gt;第一个问题&amp;#xff1a;怎么理解状态转移方程f[j]&amp;#61; min(f[j]&amp;#43;b[i],j&amp;gt;&amp;#61;a[i]? f[j-a[i]]:Inf)中的f[j-a[i]]的含义&amp;#xff0c;为何不是f[j-a[i]]&amp;#43;a[i]&amp;#xff1f;&lt;br /&gt;a. 先要弄清楚f[j]和j代表什么含义&amp;#xff0c;f[j]是在total_b_prefix中部分花在b商店的钱&amp;#xff0c; j是total_b_prefix从b商店转移花在a商店的钱&amp;#xff0c;也就是说 f[j] &amp;#43; j &amp;#61; total_b_prefix。希望花在b上的钱更小然后转移到a商店的钱打折后总价更小。&lt;br /&gt;b. f[j-a[i]]是当前如果j&amp;gt;&amp;#61;a[i]&amp;#xff0c;这个时候第i个商品去a店买&amp;#xff0c;也就是转移了a[i]去了a商店&amp;#xff0c;那么剩下的就是去b的店取最小的剩余的钱f[j-a[i]]&lt;br /&gt;c. 为何不是f[j-a[i]]&amp;#43;a[i] &amp;#xff0c;这个是f[j]的含义决定的&amp;#xff0c;是花在b商店最小的钱和a没有关系&amp;#xff0c;上面有ans min操作体现了和a的关系&lt;br /&gt;第二个问题&amp;#xff1a;有介绍说&amp;#xff0c;这里的f[j]&amp;#xff0c;其实是f[i-1][j]的简化&amp;#xff0c;那么当i&amp;#61;0时&amp;#xff0c;f[i-1][j]该如何解释&amp;#xff1f;&lt;br /&gt;这个是应该是降维的操作&amp;#xff0c;简化计算。 然后i&amp;#61;0这种&amp;#xff0c;那个视频里面只是这么介绍便于理解&amp;#xff0c;可以理解i从1开始的&amp;#xff0c;然后把i&amp;#61;0都赋值为inf就行&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["2018年noip提高组初赛题的最后一个填空题", ["用代码块功能插入代码，请勿粘贴截图", "这提是2018年noip提高组初赛题的最后一个填空题。程序的下半段采用动态规划，f记录状态，有几个问题不明白：", "1.怎么理解状态转移方程f[j]= min(f[j]+b[i],j>=a[i]? f[j-a[i]]:Inf)中的f[j-a[i]]的含义，为何不是f[j-a[i]]+a[i]", "2.有介绍说，这里的f[j]，其实是f[i-1][j]的简化，那么当i=0时，f[i-1][j]该如何解释？", "完整的代码如下", "#include", "using namespace std;", "\n", "const int Inf = 1000;", "const int threshold = 410;", "const int maxn = 8; ", "\n", "int n=8;", "int a[maxn]={30,60,30,40,50,60,70,60};//450*0.95=427.5", "int b[maxn]={30,60,60,60,70,80,90,70};", "bool put_a[maxn];", "int total_a, total_b; ", "\n", "double ans;", "double f[threshold];//这个是重点:f[i]表示从当前前缀状态下，买总价格为i的物品，所需要去b商场的最小花费", "double min(double x,double y){return x>y?y:x;}", "int main(){//16行", "    int i;", "//    scanf(\"%d\", &n);", " //   total_a = total_b = 0; //18行", "    for (i = 0; i < n; ++i) {", "//        scanf(\"%d%d\", a + i, b + i);", "        if (a[i] <= b[i]) total_a += a[i]; //选价格小的，不考虑优惠", "        else total_b += b[i];", "    }", "    ans = total_a + total_b; //不考虑优惠,直接计算总价", "    total_a = total_b = 0;", "    for (i = 0; i < n; ++i){", "        if (a[i] * 0.95 <= b[i]){//买a", "            put_a[i] = true;", "            total_a += a[i];", "        }else{  //买b", "            put_a[i] = false;", "            total_b += b[i];", "        }", "    }", "    if (total_a >= threshold){//35行 a商品打折后> threshold,结束", "        printf(\"%.2f\", total_a * 0.95 + total_b);", "        return 0;", "    }", "    f[0] = 0;          //total_a < threshold", "    for (i = 1; i < threshold; ++i)", "        f[i] = Inf;", "    int total_b_prefix = 0;", "    for (i = 0; i < n; ++i)", "        if (!put_a[i]) { //如果是b买的，就考虑背包转移", "            total_b_prefix += b[i]; //当前去b买的物品，所花费的总代价", "            for (int j = threshold-1; j >= 0; --j) {", "                if (total_a+j+a[i]>=threshold && f[j]!= Inf)//如果可以转移", "                    ans=min(ans,(total_a+j+a[i])*0.95+f[j]+total_b-total_b_prefix);", "//当前去a商场的总花费加上背包体积以及当前物品，乘以折扣，在加上去b商场购买的总价值，是否小于ans", "                f[j]= min(f[j]+b[i],j>=a[i]? f[j-a[i]]:Inf);//背包转移", "//考虑当前的j大小的背包是加上b[i]更优,还是直接靠f[j-a[i]]转移更优（就是考虑当前的背包是加上代价还是状态转移）", "            }", "        }", "    printf(\"%f\", ans);", "    return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "此方法可行，价格列表越长，准确性越大，但是对内存和时间要求特别大，价格列表越长时间和内存指数增长\r\n\r\n\r\n\r\nCOUNT = 0\r\nlist_all=[]\r\nsum = []\r\n#实现全排列的函数\r\ndef perm(n, begin, end):\r\n    global COUNT\r\n    if begin &gt;= end:\r\n        list_all.append(n)\r\n        COUNT += 1\r\n    else:\r\n        i = begin\r\n        for num in range(begin, end):\r\n            n[num], n[i] = n[i], n[num]\r\n            perm(n, begin + 1, end)\r\n            n[num], n[i] = n[i], n[num]\r\n\r\n\r\ndef analizy(M,Y):\r\n    for v in list_all:#遍历所有价格排列的可能\r\n\r\n        l = [i for i in v]#将一个 list 映射为另一个 list，每个元素设为变量i，对每个可能价格列表切成M大小的子列表\r\n        list_son=list([l[i:i + M] for i in range(0, len(l), M)])\r\n\r\n        for a in list_son:#遍历字列表，对每个子列表求和，并判断符合最大商品数和小于最大金额的子列表，然后放到list——sonson列表中，其余的组成一个新列表重新开始，M此时递减\r\n            list_sonson=[]\r\n            list_rest=[]\r\n            sum2=0\r\n            for c in a:\r\n                sum2+=c\r\n            if len(a)==M and sum2&lt;=Y:\r\n                list_sonson.append(a)\r\n                global sum1\r\n                sum1=len(list_sonson)\r\n                sum1+=sum1\r\n            else:\r\n                list_rest.extend(a)\r\n                if len(list_rest)==0:\r\n                    break\r\n                elif len(list_rest)==1:\r\n                    sum1+=1\r\n                else:\r\n                    perm(list_rest, 0, len(list_rest))\r\n                    M-=1\r\n                    analizy(M, Y)\r\n\r\n            sum.append(sum1)#把每一种价格排列，组成的组数放入sum1列表中，注意这里的顺序是和群排列的顺序一样的，一次可以找出对应的那价格排列\r\n\r\n\r\n\r\n\r\n\r\n\r\n#价格列表\r\nn = [4,5,35,46,12,59,25,46,45,29]\r\nperm(n, 0, len(n))\r\nanalizy(M=3,Y=82)#M是最大商品数，Y是订单最大金额\r\n\r\n#因为用min函数不能直接对列表求多个最小值相同及其下标。\r\nmin = min(sum)\r\nlist_dict=[]\r\nfor v in sum:\r\n    if v==min:\r\n        v_index=sum.index(v)\r\n        dic = {v:v_index}\r\n        list_dict.append(dic)\r\n        \r\nprint(\"全排列结果有{}种\".format(COUNT))\r\nprint(\"最小组数对应价格列表排列的下标和list_dict里对应的下标列表：\\n{}\".format(list_dict))#根据此列表可以找出对应的那个最少组数的价格排列，", "Konwledge_Point": "背包问题", "Question": ["拆单问题，将物品分成n个订单", ["有如下N个物品，价格为 {g1,g2,g3,g4,…,gn}，将物品分成订单，每个订单物品数量不超过M(int),每个子订单总金额不超过Y，但尽可能大，求怎么分单才能使得订单数（Num）值最小？（ps:可以理解为所有基本数据为int类型）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;看一下下面的代码&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/qq_43627087/article/details/88960098\" id=\"textarea_1669626215016_1669626238915_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;HDU1176天上掉馅饼&amp;#xff08;数塔问题&amp;#xff09;_邵光亮的博客-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;Description都说天上不会掉馅饼&amp;#xff0c;但有一天gameboy正走在回家的小径上&amp;#xff0c;忽然天上掉下大把大把的馅饼。说来gameboy的人品实在是太好了&amp;#xff0c;这馅饼别处都不掉&amp;#xff0c;就掉落在他身旁的10米范围内。馅饼如果掉在了地上当然就不能吃了&amp;#xff0c;所以gameboy马上卸下身上的背包去接。但由于小径两侧都不能站人&amp;#xff0c;所以他只能在小径上接。由于gameboy平时老呆在房间里玩游戏&amp;#xff0c;虽然在游戏中是个身手敏捷的高手&amp;#xff0c;...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1 md_link_url\"&gt;\n         https://blog.csdn.net/qq_43627087/article/details/88960098\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["dp代码找不到bug", ["都说天上不会掉馅饼，但有一天gameboy正走在回家的小径上，忽然天上掉下大把大把的馅饼。说来gameboy的人品实在是太好了，这馅饼别处都不掉，就掉落在他身旁的10米范围内。馅饼如果掉在了地上当然就不能吃了，所以gameboy马上卸下身上的背包去接。但由于小径两侧都不能站人，所以他只能在小径上接。gameboy每秒种只有在移动不超过一米的范围内接住坠落的馅饼。现在给这条小径如图标上坐标：", "\n", "\n", "为了使问题简化，假设在接下来的一段时间里，馅饼都掉落在0-10这11个位置。开始时gameboy站在5这个位置，因此在第一秒，他只能接到4,5,6这三个位置中其中一个位置上的馅饼。问gameboy最多可能接到多少个馅饼？（假设他的背包可以容纳无穷多个馅饼）", "Input", "输入数据有多组。每组数据的第一行为以正整数n(0<n<100000)，表示有n个馅饼掉在这条小径上。在结下来的n行中，每行有两个整数x,T(0<T<100000),表示在第T秒有一个馅饼掉在x点上。同一秒钟在同一点上可能掉下多个馅饼。n=0时输入结束。", "Output", "每一组输入数据对应一行输出。输出一个整数m，表示gameboy最多可能接到m个馅饼。", "提示：本题的输入数据量比较大，建议用scanf读入，用cin可能会超时。", "Sample", "Input", "6", "5 1", "4 1", "6 1", "7 2", "7 2", "8 3", "0", "Output", "4", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<math.h>", "\n", "#", "include", "<string.h>", "\n", "#", "include", "<algorithm>", " ", "\n", "using", " ", "namespace", " std;\n", "int", " dp[", "20", "][", "100500", "];\n", "int", " ", "main", "()", "{\n    ", "int", " n;\n    ", "while", "(", "scanf", "(", "\"%d\"", ",&n) && n!=", "0", "){\n        ", "int", " t=", "0", ";\n        ", "memset", "(dp,", "0", ",", "sizeof", "(dp));\n        ", "for", "(", "int", " i=", "1", ",x,T;i<=n;i++){\n            ", "scanf", "(", "\"%d%d\"", ",&x,&T);\n            ", "if", "(T==", "1", " && (x<", "4", "||x>", "6", ")) ;\n            ", "else", " ", "if", "(T==", "2", " && (x<", "3", "||x>", "7", ")) ;\n            ", "else", " ", "if", "(T==", "3", " && (x<", "2", "||x>", "8", ")) ;  ", "//由于gameboy初始位置在 5，所以此处列举的位置他接不到馅饼 ", "\n            ", "else", " ", "if", "(T==", "4", " && x==", "0", "||x==", "10", ") ;\n            ", "else", " ++dp[x][T];  ", "//计算某一时间某一地点有多少馅饼掉下 ", "\n            t=t>T?t:T;  ", "//计算总时间 ", "\n        }\n        ", "for", "(", "int", " i=", "0", ";i<=", "10", ";i++){   ", "//dp[i][j]表示第 j秒第 i的位置上最多可以拿到多少个馅饼 ", "\n            ", "for", "(", "int", " j=", "1", ";j<=t;j++){\n                ", "if", "(i!=", "0", ") dp[i][j]+=", "max", "(dp[i][j", "-1", "],", "max", "(dp[i+", "1", "][j", "-1", "],dp[i", "-1", "][j", "-1", "]));\n                ", "else", " dp[i][j]+=", "max", "(dp[i][j", "-1", "],dp[i+", "1", "][j", "-1", "]);\n            }\n        }\n        ", "int", " Max=", "0", ";\n        ", "for", "(", "int", " i=", "0", ";i<=", "10", ";i++){\n            Max=Max>dp[i][t]?Max:dp[i][t]; ", "//遍历最后的时间所有的地点，找到最大的那个 ", "\n        }\n        cout<<Max<<endl;\n    }\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "这个题把他简化一下就是一个变形的数塔\r\n数塔的每行就是时间，每列就是人参果掉下的位置的坐标\r\n所以我们要设置一个二维数组，用一个变量记录时间的最大值，来进行循环\r\n\r\n![图片说明](https://img-ask.csdn.net/upload/202004/19/1587283758_588862.png)\r\n\r\n这个是样例的输入数据，我在上面标上了行和列\r\n我在上面画了两条竖线，这样就更像数塔了，这两条线代表在他们外面的人参果是接不到的，那么我们要做的就是找出一条路径使得所有数字之和最大，那么不就是我们的数塔问题么？\r\n那么dp[0][5]就一定是接到最多人参果的地方，同时我们使用逆序也会使问题更方便，顺序的话，还要再加上一个二维数组去保存数据和\r\n\r\n具体代码你可以看一下这个文章\r\n[文章](https://blog.csdn.net/qq_45721778/article/details/105616305 \"文章\")", "Konwledge_Point": "背包问题", "Question": ["dp题，求大佬指点迷津，有币日后定补上", ["巧接人参果", "\n时间限制: 1 Sec  内存限制: 128 MB", "\n提交: 270  解决: 61", "\n[提交] [状态] [讨论版] [命题人:admin]", "\n题目描述", "\n唐僧率领徒弟孙悟空、猪八戒、沙和尚去西天取经，路经万寿山五庄观。 观主镇元大仙上天听道去了，临行嘱咐童子，大唐高僧路经此地，可取人参果好生款待。这人参果乃仙家之宝 ，食之能长生不老。师徒一行来到五庄观，观中童儿只将人参果款待唐僧 。悟空不甘受此冷落，加之贪吃的八戒在旁怂恿，便潜入果园偷吃人参仙果。 恰巧你也在那，于是你有缘与孙悟空一起摘人参果。不过这人参果遇金则落，遇土则遁。为此，孙悟空、猪八戒、沙和尚三人爬上果树用金箍棒等将人参果打落，而你则在树底下接人参果。 这人参果别处都不掉，就掉落在他身旁的10米范围内。人身果如果掉在了地上就不见了。当然你很聪明，可是看到这么多人身果，动作也变迟钝了，每秒种只有在移动不超过一米的范围内接住坠落的人身果。现在给你接人参果如图标上坐标： 为了使问题简化，假设在接下来的一段时间里，人参果都掉落在0-10这11个位置。开始时你站在5这个位置，因此在第一秒，他只能接到4,5,6这三个位置中期中一个位置上的馅饼。问你最多可能接到多少个人参果？（假设背包可以容纳无穷多个人参果）", "\n\n", "输入", "\n输入数据有多组。每组数据的第一行为以正整数n(0 < n < 100000)，表示有n个人参果掉下来。在接下来的n行中，每行有两个整数x,T(0 <= T < 100000),表示在第T秒有一个人参果掉在x点上。同一秒钟在同一点上可能掉下多个人身果。n=0时输入结束。", "\n\n", "输出", "\n每一组输入数据对应一行输出。输出一个整数m，表示你最多可能接到m个人参果。", "\n\n", "样例输入", "\n6", "\n5 1", "\n4 1", "\n6 1", "\n7 2", "\n7 2", "\n8 3", "\n0", "\n\n", "样例输出", "\n4"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用ChatGPT &lt;/p&gt;\n&lt;p&gt;这个错误提示是因为在 MainMenu.ui 文件中&amp;#xff0c;您为 QPushButton 控件命名为 work、goToSchool 等&amp;#xff0c;这些名称与 MainMenuWindow 类中的方法名称重复了&amp;#xff0c;导致程序出现错误。&lt;/p&gt;\n&lt;p&gt;为了解决这个问题&amp;#xff0c;您可以尝试以下方法之一&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1、修改控件名称&lt;br /&gt;您可以在 MainMenu.ui 文件中修改控件的名称&amp;#xff0c;以避免与 MainMenuWindow 类中的方法名称重复。例如&amp;#xff0c;您可以将 work 控件的名称修改为 workButton&amp;#xff0c;将 goToSchool 控件的名称修改为 goToSchoolButton&amp;#xff0c;以此类推。&lt;/p&gt;\n&lt;p&gt;2、修改方法名称&lt;br /&gt;您也可以修改 MainMenuWindow 类中的方法名称&amp;#xff0c;以避免与 QPushButton 控件的名称重复。例如&amp;#xff0c;您可以将 work 方法的名称修改为 workButtonClicked&amp;#xff0c;将 goToSchool 方法的名称修改为 goToSchoolButtonClicked&amp;#xff0c;以此类推。&lt;/p&gt;\n&lt;p&gt;修改后的代码如下所示&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; PyQt5 &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; QtWidgets, QtGui, QtCore\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; MainMenu    &lt;span class=\"hljs-comment\"&gt;# 这是窗体文件&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; sys\n \n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;MainMenuWindow&lt;/span&gt;(QtWidgets.QMainWindow, MainMenu.Ui_MainMenu):\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;__init__&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;super&lt;/span&gt;(MainMenuWindow, self).__init__()\n        self.setupUi(self)\n \n        &lt;span class=\"hljs-comment\"&gt;# 将 QPushButton 控件的 clicked 信号连接到对应的方法上&lt;/span&gt;\n        self.workButton.clicked.connect(self.workButtonClicked)\n        self.goToSchoolButton.clicked.connect(self.goToSchoolButtonClicked)\n        self.showButton.clicked.connect(self.showButtonClicked)\n        self.studyButton.clicked.connect(self.studyButtonClicked)\n        self.openBagButton.clicked.connect(self.openBagButtonClicked)\n        self.goToStoreButton.clicked.connect(self.goToStoreButtonClicked)\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;workButtonClicked&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;workButtonClicked&amp;#34;&lt;/span&gt;)\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;goToSchoolButtonClicked&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;goToSchoolButtonClicked&amp;#34;&lt;/span&gt;)\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;showButtonClicked&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;showButtonClicked&amp;#34;&lt;/span&gt;)\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;studyButtonClicked&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;studyButtonClicked&amp;#34;&lt;/span&gt;)\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;openBagButtonClicked&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;openBagButtonClicked&amp;#34;&lt;/span&gt;)\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;goToStoreButtonClicked&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;goToStoreButtonClicked&amp;#34;&lt;/span&gt;)\n \n \n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__ &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:\n    app &amp;#61; QtWidgets.QApplication(sys.argv)\n    mainMenuWindow &amp;#61; MainMenuWindow()\n    mainMenuWindow.show()\n    sys.exit(app.exec_())\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在这个代码中&amp;#xff0c;我们将 QPushButton 控件的名称修改为 workButton、goToSchoolButton 等&amp;#xff0c;并且将这些控件的 clicked 信号连接到对应的方法上&amp;#xff0c;这样就可以避免命名冲突了。&lt;/p&gt;", "Konwledge_Point": "背包问题", "Question": ["PyQt5,UI与逻辑代码分离出错", ["我使用PyQt5写一个窗体（GUI）程序，我尝试逻辑代码与UI分离，结果第一次成功了，第二次换了个窗体，出错了。", "\n", "错误报告：", "\n", "D:\\Program\\Python\\venv\\Scripts\\", "python", ".", "exe", " D:\\Program\\Python\\Python日常编程\\LifeReopensForGUI\\begin.", "py", " \nTraceback (most recent ", "call", " ", "last", "):\n  File ", "\"D:\\Program\\Python\\Python日常编程\\LifeReopensForGUI\\begin.py\"", ", ", "line", " ", "15", ", in ", "<module>", "\n    mainMenuWindow.show()\nTypeError: ", "'QPushButton'", " object ", "is", " not callable\n\n进程已结束,退出代码", "1", "\n", "\n", "逻辑代码如下:", "\n", "from", " ", "PyQt5", " ", "import", " QtWidgets, QtGui, QtCore\n", "import", " MainMenu    # 这是窗体文件\n", "import", " sys\n", "\n\n", "class", " ", "MainMenuWindow", "(", "QtWidgets", ".", "QMainWindow", ", ", "MainMenu", ".", "Ui_MainMenu", "):\n    def __init__(", "self", "):\n        super(", "MainMenuWindow", ", ", "self", ").__init__()\n        self.setupUi(", "self", ")\n\n\nif __name__ == '__main__':\n    app = ", "QtWidgets", ".", "QApplication", "(", "sys", ".", "argv", ")\n    mainMenuWindow = ", "MainMenuWindow", "()\n    mainMenuWindow.show()\n    sys.exit(", "app", ".", "exec_", "())", "\n", "\n", "UI文件代码如下:", "\n", "# -*- coding: utf-", "8", " -*-\n\n# Form implementation generated from reading ui file '", "MainMenu", ".", "ui'\n#\n# Created by: PyQt5 UI code generator ", "5.15", ".", "9", "\n#\n# WARNING: Any manual changes made ", "to", " this file will be lost ", "when", " pyuic5 is\n# run again.  Do not edit this file unless you know what you are doing.\n\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\nimport sys\nfrom PyQt5.QtWidgets import QMainWindow\n\n\n", "class", " ", "Ui_MainMenu(", "object", ")", ":\n    def setup", "Ui(", "self", ", MainMenu)", ":\n        ", "MainMenu", ".", "set", "ObjectName(", "\"MainMenu\"", ")", "\n        ", "MainMenu", ".", "resize(", "800", ", ", "600", ")\n        self.centralwidget = QtWidgets.", "QWidget(MainMenu)", "\n        self.centralwidget.set", "ObjectName(", "\"centralwidget\"", ")", "\n        self.label = QtWidgets.", "QLabel(", "self", ".", "centralwidget", ")", "\n        self.label.set", "Geometry(QtCore.QRect(0, 0, 801, 271)", ")\n        self.label.set", "Text(", "\"\"", ")", "\n        self.label.set", "Pixmap(QtGui.QPixmap(", "\":/png/resource Files/人生重开.png\"", ")", ")\n        self.label.set", "ScaledContents(True)", "\n        self.label.set", "ObjectName(", "\"label\"", ")", "\n        self.verticalLayoutWidget = QtWidgets.", "QWidget(", "self", ".", "centralwidget", ")", "\n        self.verticalLayoutWidget.set", "Geometry(QtCore.QRect(10, 280, 781, 261)", ")\n        self.verticalLayoutWidget.set", "ObjectName(", "\"verticalLayoutWidget\"", ")", "\n        self.verticalLayout = QtWidgets.", "QVBoxLayout(", "self", ".", "verticalLayoutWidget", ")", "\n        self.verticalLayout.set", "ContentsMargins(0, 0, 0, 0)", "\n        self.verticalLayout.set", "ObjectName(", "\"verticalLayout\"", ")", "\n        self.work = QtWidgets.", "QPushButton(", "self", ".", "verticalLayoutWidget", ")", "\n        self.work.set", "ObjectName(", "\"work\"", ")", "\n        self.verticalLayout.add", "Widget(", "self", ".", "work", ")", "\n        self.goToSchool = QtWidgets.", "QPushButton(", "self", ".", "verticalLayoutWidget", ")", "\n        self.goToSchool.set", "ObjectName(", "\"goToSchool\"", ")", "\n        self.verticalLayout.add", "Widget(", "self", ".", "goToSchool", ")", "\n        self.show = QtWidgets.", "QPushButton(", "self", ".", "verticalLayoutWidget", ")", "\n        self.show.set", "ObjectName(", "\"show\"", ")", "\n        self.verticalLayout.add", "Widget(", "self", ".", "show", ")", "\n        self.study = QtWidgets.", "QPushButton(", "self", ".", "verticalLayoutWidget", ")", "\n        self.study.set", "ObjectName(", "\"study\"", ")", "\n        self.verticalLayout.add", "Widget(", "self", ".", "study", ")", "\n        self.openBag = QtWidgets.", "QPushButton(", "self", ".", "verticalLayoutWidget", ")", "\n        self.openBag.set", "ObjectName(", "\"openBag\"", ")", "\n        self.verticalLayout.add", "Widget(", "self", ".", "openBag", ")", "\n        self.goToStore = QtWidgets.", "QPushButton(", "self", ".", "verticalLayoutWidget", ")", "\n        self.goToStore.set", "ObjectName(", "\"goToStore\"", ")", "\n        self.verticalLayout.add", "Widget(", "self", ".", "goToStore", ")", "\n        ", "MainMenu", ".", "set", "CentralWidget(", "self", ".", "centralwidget", ")", "\n        self.menubar = QtWidgets.", "QMenuBar(MainMenu)", "\n        self.menubar.set", "Geometry(QtCore.QRect(0, 0, 800, 26)", ")\n        self.menubar.set", "ObjectName(", "\"menubar\"", ")", "\n        ", "MainMenu", ".", "set", "MenuBar(", "self", ".", "menubar", ")", "\n        self.statusbar = QtWidgets.", "QStatusBar(MainMenu)", "\n        self.statusbar.set", "ObjectName(", "\"statusbar\"", ")", "\n        ", "MainMenu", ".", "set", "StatusBar(", "self", ".", "statusbar", ")", "\n\n        self.retranslate", "Ui(MainMenu)", "\n        ", "QtCore", ".", "QMetaObject", ".", "connect", "SlotsByName(MainMenu)", "\n\n    def retranslate", "Ui(", "self", ", MainMenu)", ":\n        _translate = ", "QtCore", ".", "QCoreApplication", ".", "translate\n        ", "MainMenu", ".", "set", "WindowTitle(", "_translate", "(", "\"MainMenu\"", ", ", "\"主界面\"", ")", ")\n        self.work.set", "Text(", "_translate", "(", "\"MainMenu\"", ", ", "\"工作\"", ")", ")\n        self.goToSchool.set", "Text(", "_translate", "(", "\"MainMenu\"", ", ", "\"去学校\"", ")", ")\n        self.show.set", "Text(", "_translate", "(", "\"MainMenu\"", ", ", "\"显示属性\"", ")", ")\n        self.study.set", "Text(", "_translate", "(", "\"MainMenu\"", ", ", "\"学习\"", ")", ")\n        self.openBag.set", "Text(", "_translate", "(", "\"MainMenu\"", ", ", "\"打开背包\"", ")", ")\n        self.goToStore.set", "Text(", "_translate", "(", "\"MainMenu\"", ", ", "\"去商店\"", ")", ")\n", "\n", "运行结果:", "\n", "D:\\Program\\Python\\venv\\Scripts\\", "python", ".", "exe", " D:\\Program\\Python\\Python日常编程\\LifeReopensForGUI\\begin.", "py", " \nTraceback (most recent ", "call", " ", "last", "):\n  File ", "\"D:\\Program\\Python\\Python日常编程\\LifeReopensForGUI\\begin.py\"", ", ", "line", " ", "15", ", in ", "<module>", "\n    mainMenuWindow.show()\nTypeError: ", "'QPushButton'", " object ", "is", " not callable\n\n进程已结束,退出代码", "1", "\n", "\n", "我的解答思路和尝试过的方法:", "\n", "我先在UI文件运行窗体,发现没问题.窗体正常显示.", "我把窗体类继承的改为QMainWindow,还是有问题."]], "Tag": "算法设计"}
