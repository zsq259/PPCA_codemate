{"Answer": "我用蚁群和量子蚁群算法做过，一个是比赛用的，一个是毕设\r\n没用遗传实现过", "Konwledge_Point": "集合覆盖", "Question": ["用遗传算法解决集合覆盖模型", ["求用遗传算法解决集合覆盖模型的程序试例或源程序，最好能相关物流配送中心和物流中心选址问题"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先从redis取出来&amp;#xff0c;然后把新map的值赋给旧map&amp;#xff0c;然后再存进去&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["redis的value存map集合新数据覆盖老数据怎么办", []], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;集合之间并没有关联。&lt;br /&gt;是添加的数据相同而已。&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["java两个for循环add不同的集合为什么第二个集合会把第一个集合数据搬过来", ["两个String类型的集合", "\n", "\n", "两个数据库都按过来6个数据,当personIdList的for循环结束以后开始执行emcodeList的for循环的时候personIdList 第零位数据被拿到了emcodeList集合的第零位是怎么回事?"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这种你可以在外面定义Map&amp;#xff0c;然后再循环里面new&amp;#xff0c;每次也就能够装入List里面。&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["Java循环数据 如果Map在循环外 循环添加数据就会被覆盖 但是在里面 就不会", ["Map在里面 添加到list里面数据不会被覆盖", "Map在外面 添加到list里面数据会被覆盖", "\n", "疑惑"]], "Tag": "算法设计"}
{"Answer": "一个map中，key值是唯一的，所以想要一个相同的key值拥有多个值。就得采用key -&gt; 数组或集合（将同个key值的value用数组或集合收集，再设置），你上面这种相当于将map一个key值所对应的值设置了无数次", "Konwledge_Point": "集合覆盖", "Question": ["这个HashMap的值循环一次就会被覆盖，应该怎么解决呢？？？", ["\n这个HashMap存的map的值循环一次就会被覆盖，应该怎么解决呢？？？", "\n能让它存入每一次put的值。"]], "Tag": "算法设计"}
{"Answer": "set原则是添加相同元素操作是无效,是因为在做二叉树或哈希算法时,相同元素计算值相同不允许插入,这个可以改的,你在\r\n①hashSet的所需要元素的类重写hashCode方法,和equal方法,而方法里什么也不做返回false,\r\n②在TreeSet中,不管自定义选择器还是重写选择方法,还是一样什么也不做,返回0.\r\n这样set也能插入相同元素了,然后这样Set就失去了元素唯一性了.\r\n其实set就是map集合的键列集合,而**值列都是Object()**,是map集合的特殊表现,map插入key重复时,覆盖的是值(!!!!这个你看清楚,你插入成功的前提是\r\n键一样,**值是不一样**).如果键和值都一样还是无法插入的,这就是如果set插入相同元素,相对于map集合键和值都一样,当然无法插入啊.", "Konwledge_Point": "集合覆盖", "Question": ["求解map集合和set集合的问题", ["set集合中添加两个相同元素，会导致添加操作无效。", "\nmap集合中的key不能是重复的，如果重复，那么后面添加的的映射关系会覆盖前面的映射关系，map集合中的key的维护是依靠set集合完成的。", "\n为什么同是set集合，map集合在key重复时是先进去再覆盖，而set集合是添加操作无效，不能进去。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;j因为赋值的下标是index&amp;#xff0c;num1和num2赋值的时候index一直在增加&amp;#xff0c;所以不会覆盖&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["对数组进行赋值是为什么后面赋值不会覆盖前面的的赋值？", ["全部代码如下:", " {", "\n", "public", " ", "static", " ", "void", " main(String[] args) {\n    ", "// 复制某个数组元素数据至另外一个数组中", "\n    String[] num1 = ", "new", " String[", "3", "];\n    num1[", "0", "] = ", "\"1\"", ";\n\n    String[] num2 = {", "\"3\"", ", ", "\"2\"", ", ", "\"1\"", "};\n\n    ", "// 把num2中的元素存储到num1中", "\n    ", "// 获得数组剩余的空间大小  默认为0", "\n    ", "int", " len = num1.length;\n    ", "int", " ", "count", " = ", "0", ";", "// 原数组以及属于的空间", "\n    ", "for", " (", "int", " i = ", "0", "; i < len; i++) {\n        ", "if", " (num1[i] == ", "null", ") {\n            ", "break", ";\n        } ", "else", " {\n            ", "count", "++;\n        }\n    }\n\n    ", "int", " shengyv = len - ", "count", ";", "// 求得原数组的剩余空间", "\n\n    ", "int", " len2 = num2.length;", "// 要复制元素的个数", "\n    String[] newStringArray = ", "null", ";\n    ", "if", " (shengyv < len2) {\n        ", "// 原数组的空间不够使用   手动扩大一个数组的空间大小   扩容", "\n        ", "// 简单来说：就是创建一个新的数组", "\n        newStringArray = ", "new", " String[", "count", " + len2];\n        ", "// 遍历原数组以及复制的数字元素   存储到newStringArray", "\n        ", "int", " ", "index", " = ", "0", ";\n        ", "for", " (", "int", " j = ", "0", "; j < ", "count", "; j++) {\n            newStringArray[", "index", "] = num1[j];\n            ", "index", "++;\n        }\n        ", "for", " (", "int", " j = ", "0", "; j < len2; j++) {\n            newStringArray[", "index", "] = num2[j];\n            ", "index", "++;\n        }\n        System.out.println(Arrays.toString(newStringArray));\n    } ", "else", " {\n        ", "// 直接将复制数组内容村粗到原数组中即可", "\n        ", "for", " (", "int", " j = ", "0", "; j < len2; j++) {\n            num1[", "count", "] = num2[j];\n            ", "count", "++;\n        }\n        System.out.println(Arrays.toString(num1));\n    }\n", "\n", "下面代码不太懂，第一个循环num1先对newStringArray进行赋值，当第二个循环运行是num2对newStringArray进行赋值，为什么num2赋的值不会覆盖num1的赋值？", "\n", "｛", "for (int j = 0; j < count; j++) {", "                newStringArray[index] = num1[j];", "                index++;", "            }", "for (int j = 0; j < len2; j++) {", "                newStringArray[index] = num2[j];", "                index++;", "            }", "｝", "刚接触Java不太懂，"]], "Tag": "算法设计"}
{"Answer": "Book book=new Book();\r\n//创建TreeSet集合，里面储存book对象的属性\r\nTreeSet&lt;Book&gt; tree=new TreeSet&lt;Book&gt;();\r\n\r\n第一次添加的是book对象，保存到tree中。tree获得book的地址。\r\n第二次添加的还是book对象，只是改了下值。保存到tree中进行覆盖。\r\n\r\n\r\n第一个修改的地方\r\n//创建引用名，不new对象\r\nBook book ;\r\n//创建TreeSet集合，里面储存book对象的属性\r\nTreeSet&lt;Book&gt; tree=new TreeSet&lt;Book&gt;();\r\n\r\n\r\n第二个修改的地方\r\npublic boolean addBook(String bookName, String author, String press, String price, String bookID, String pubdate){\r\n    boolean bl2=false;\r\n\t\t\r\n\t\t//在方法中new对象，可以保证每次的对象不一样\r\n\t\tbook = new Book();\r\n\t\t\r\n    book.setBookName(bookName);\r\n    book.setAuthor(author);\r\n    book.setPress(press);\r\n    book.setPrice(price);\r\n    book.setBookID(bookID);\r\n    book.setPubdate(pubdate);\r\n    System.out.println(\"新书信息如下:\"+book.toStrings());\r\n    System.out.println(\"是否保存该书？ (Y)是 (N)否\");\r\n    option=sc.next();\r\n    if(\"y\".equalsIgnoreCase(option)){\r\n        System.out.println(\"正在添加....\");\r\n        tree.add(book);//把图书的信息添加到tree集合中\r\n        bl2=true;\r\n    }\r\n    else{\r\n        System.out.println(\"已取消\");\r\n    }\r\n    return bl2;\r\n}", "Konwledge_Point": "集合覆盖", "Question": ["java关于TreeSet集合的问题，为什么每次添加只能添加进去一个，再添加的时候就会覆盖掉前面那个", ["不知道为什么只能添加一个对象进去，添加第二次的时候就覆盖掉了第一次添加进去的。麻烦大家了!", "\n\n", "这是main方法", "\nif(\"a\".equalsIgnoreCase(option)){", "\n                                //查看图书的功能", "\n                                d.cheekBook();", "\n                            }", "\n                            else if(\"b\".equalsIgnoreCase(option)){", "\n                                //添加图书的功能", "\n                                System.out.println(\"请输入书名:\");", "\n                                bookName=sc.next();", "\n                                System.out.println(\"请输入作者:\");", "\n                                author=sc.next();", "\n                                System.out.println(\"请输入出版社:\");", "\n                                press=sc.next();", "\n                                System.out.println(\"请输入价格:\");", "\n                                price=sc.next();", "\n                                System.out.println(\"请输入书号:\");", "\n                                bookID=sc.next();", "\n                                System.out.println(\"请输入出版日期:\");", "\n                                pubdate=sc.next();", "\n                                boolean bl2=d.addBook(bookName,author,press,price,bookID,pubdate);", "\n                                if(bl2){", "\n                                    System.out.println(\"添加成功\");", "\n                                    System.out.println(\"请选择功能:查看图书(A) 添加图书(B) 修改图书(C) 删除图书(D)\");", "\n                                    option=sc.next();", "\n                                    if(\"a\".equalsIgnoreCase(option)){", "\n                                        //查看图书", "\n                                        d.cheekBook();", "\n                                    }", "\n                                    else if(\"b\".equalsIgnoreCase(option)){", "\n                                        //添加图书", "\n                                        System.out.println(\"请输入书名:\");", "\n                                        bookName=sc.next();", "\n                                        System.out.println(\"请输入作者:\");", "\n                                        author=sc.next();", "\n                                        System.out.println(\"请输入出版社:\");", "\n                                        press=sc.next();", "\n                                        System.out.println(\"请输入价格:\");", "\n                                        price=sc.next();", "\n                                        System.out.println(\"请输入书号:\");", "\n                                        bookID=sc.next();", "\n                                        System.out.println(\"请输入出版日期:\");", "\n                                        pubdate=sc.next();", "\n                                        bln=d.addBook(bookName,author,press,price,bookID,pubdate);", "\n                                        if(bln){", "\n                                            System.out.println(\"添加成功\");", "\n                                        }", "\n                                    }", "\n\n", "    这是添加图书和查看图书的的方法                       \n                                //创建book对象\nBook book=new Book();\n//创建TreeSet集合，里面储存book对象的属性\nTreeSet<Book> tree=new TreeSet<Book>();\n//查看图书的功能\npublic void cheekBook(){\n    if(tree.isEmpty()){\n        System.out.println(\"请添加图书!!!\");\n    }\n    else{\n        System.out.println(\"查看图书\");\n        System.out.println(\"|书名|     |作者|     |出版社|    |价格|   |书号|   |出版日期|\");\n        Iterator<Book> it=tree.iterator();\n        while(it.hasNext()){\n            System.out.println(it.next());\n        }\n\n    }\n}\n\n//添加图书\npublic boolean addBook(String bookName, String author, String press, String price, String bookID, String pubdate){\n    boolean bl2=false;\n    book.setBookName(bookName);\n    book.setAuthor(author);\n    book.setPress(press);\n    book.setPrice(price);\n    book.setBookID(bookID);\n    book.setPubdate(pubdate);\n    System.out.println(\"新书信息如下:\"+book.toStrings());\n    System.out.println(\"是否保存该书？ (Y)是 (N)否\");\n    option=sc.next();\n    if(\"y\".equalsIgnoreCase(option)){\n        System.out.println(\"正在添加....\");\n        tree.add(book);//把图书的信息添加到tree集合中\n        bl2=true;\n    }\n    else{\n        System.out.println(\"已取消\");\n    }\n    return bl2;\n}\n"]], "Tag": "算法设计"}
{"Answer": "static静态变量是属于类的变量，任何时候只有一份，你在循环中给这个变量的赋值了3次，第3次赋值覆盖了前两次，所以最终的结果是 2 2 2", "Konwledge_Point": "集合覆盖", "Question": ["list.add() 添加对象时为什么显示的都是最后一个对象的属性？以前添加的值被覆盖了", ["import java.util.ArrayList;", "\nimport java.util.List;", "\n\n", "public class Listaa {", "\n    private static List list = new ArrayList();", "\n\n", "private static int i;\n\npublic static void maain(int i) {\n    Listaa t = new Listaa();\n    t.setI(i);\n    list.add(t);\n}\n\npublic static void main(String args[]) {\n    Listaa a = new Listaa();\n    for (int i = 0; i < 3; i++)\n        maain(i);\n    for (int i = 0; i < list.size(); i++) {\n\n        a = (Listaa) list.get(i);\n        System.out.println(a.getI());\n    }\n}\n\npublic int getI() {\n    return i;\n}\n\npublic void setI(int i) {\n    this.i = i;\n}\n", "\n\n", "}", "\n输出结果是 2 2 2，为什么不是 0 1 2 ？"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;If you want to append array elements from the second array to the first array while not overwriting the elements from the first array and not re-indexing, use the &lt;strong&gt;+ array union operator&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$a = array(10 =&amp;gt; array(25,26));\n$b = array(22 =&amp;gt; array(45,66));\n$c = $a + $b;\nprint_r($c);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Array\n(\n    [10] =&amp;gt; Array\n        (\n            [0] =&amp;gt; 25\n            [1] =&amp;gt; 26\n        )\n\n    [22] =&amp;gt; Array\n        (\n            [0] =&amp;gt; 45\n            [1] =&amp;gt; 66\n        )\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The keys are preserved in this case.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Same answer from the other question\n  you posted relating this issue:\n  &lt;a href=\"https://stackoverflow.com/questions/5212924/merging-a-multi-dimensional-array-into-another-multi-dimensional-array/\"&gt;merging a multi-dimensional array into another multi-dimensional array&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    &lt;/div&gt;", "Konwledge_Point": "集合覆盖", "Question": ["如何创建多维数组的集合，而不是在推送新的数组时覆盖原始值", ["\n\n", "Here is my site\n", "http://69.231.195.173:8888/iadprint/products?product=flyers", "\n\n", "When the user selects a few selections that relate to the flyer product and presses add to cart. this is what code is executed.", "\n\n", "if(isset($_POST['btnAddToCart']) && isset($_GET['product']))\n    {\n        $product_id = $action->getProductID($_GET['product']);\n\n        $attribute[$product_id] = array();\n\n\n        foreach ($_POST as $field=>$hash) \n        {\n            $hash = $security->clean_numeric($hash);\n\n            if($field != \"btnAddToCart\" && $field != 'price' && !empty($hash))\n            {\n                array_push($attribute[$product_id], $hash);\n\n            }\n        } \n\n        $_SESSION['iadprint_cart'] = $attribute;\n}\n", "\n\n", "the array that gets formed looks like this", "\n\n", "Array\n(\n    [10] => Array\n        (\n            [0] => 30\n            [1] => 36\n        )\n)\n", "\n\n", "inside that main array the 10 refers to flyer product id name. inside of that the 30 and 36 are the ids of the selections. ", "\n\n", "the problem i'm having is if you select business card and make your selections and add to cart instead of pushing in a format like the picture that is everything inside the array()  for the new product. the data gets overridden. I am using array_push and it should work but it is not.", "\n    "]], "Tag": "算法设计"}
{"Answer": "应该是服务器那边的问题，服务器在每个上传的图片都应该保存到不同的文件名上", "Konwledge_Point": "集合覆盖", "Question": ["Android多图片上传会发生覆盖问题", ["我写了一个多图片上传的小程序，选出的图片存在List集合里，然后通过for循环发送到服务器里。可是却发生了收到都是最后一张图片，这该怎么解决！求大神相助！！！！！！！！！！！！！！！！！！！！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;是不是putstring 和 获取的时候  有一个异步的顺序?&lt;br /&gt;获取的时候其实还没有put进去?&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["Android sharedpreferences使用putString()无法覆盖相同key的值", ["问题遇到的现象和发生背景", "\n", "使用sharedpreferences全局存储map将map转成json字符串进行存储，在清空时使用putString方法将值设置成空字符串，但是在获取时，还是之前的值 并没有为空字符串。", "\n", "问题相关代码，请勿粘贴截图", "\n", "private", " ", "SharedPreferences", " share;\n ", "private", " ", "SharedPreferences", ".", "Editor", " editor;\n ", "private", " ", "Map", "<", "String", ",", "String", "> moreData = ", "new", " ", "HashMap", "<>();\n", "private", " ", "SharedPreferencesUtils", "() {\n        share = ", "EallApplication", ".", "getContext", "().", "getSharedPreferences", "(", "SHARED_NAME", ", ", "Context", ".", "MODE_PRIVATE", ");\n        editor = share.", "edit", "();\n    }\n\n", "/**\n     * 单例模式\n     */", "\n    ", "private", " ", "static", " ", "SharedPreferencesUtils", " instance;", "//单例模式 双重检查锁定", "\n\n    ", "public", " ", "static", " ", "SharedPreferencesUtils", " ", "getInstance", "(", ") {\n        ", "if", " (instance == ", "null", ") {\n            synchronized (", "SharedPreferencesUtils", ".", "class", ") {\n                ", "if", " (instance == ", "null", ") {\n                    instance = ", "new", " ", "SharedPreferencesUtils", "();\n                }\n            }\n        }\n        ", "return", " instance;\n    }\n\n\n", "/**\n     * 用于保存集合\n     *\n     * ", "@param", " key key\n     * ", "@param", " map map数据\n     * ", "@return", " 保存结果\n     */", "\n    ", "public", " ", "void", " ", "putHashMapData", "(", "String", " key, ", "Map", "<", "String", ", ", "String", "> map", ") {\n        ", "if", " (map == ", "null", "){\n            moreData.", "clear", "();\n            editor.", "putString", "(key, ", "\"\"", ");\n            editor.", "apply", "();\n            ", "return", ";\n        }\n\n        moreData.", "putAll", "(map);\n        ", "try", " {\n            ", "Gson", " gson = ", "new", " ", "Gson", "();\n            ", "String", " json = gson.", "toJson", "(moreData);\n            editor.", "putString", "(key, json);\n        } ", "catch", " (", "Exception", " e) {\n            e.", "printStackTrace", "();\n        }\n        editor.", "apply", "();\n        ", "return", ";\n    }\n\n    ", "public", " ", "Map", "<", "String", ", ", "String", "> ", "getHashMapData", "(", "String", " key", ") {\n        ", "String", " json = share.", "getString", "(key, ", "\"\"", ");\n        ", "Map", "<", "String", ",", "String", "> map = ", "new", " ", "Gson", "().", "fromJson", "(json, ", "new", " ", "TypeToken", "<", "HashMap", "<", "String", ",", "Object", ">>(){}.", "getType", "());\n        ", "return", " map;\n    }\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "和游标没有关系了，看个例子\r\nSELECT *\r\n  FROM aa t\r\n WHERE num &lt;= 40\r\n ORDER BY num DESC\r\n结果：\r\n1    40\r\n1    30\r\n2    10\r\nSELECT *\r\n  FROM aa t\r\n WHERE num &lt;= 30\r\n ORDER BY num DESC\r\n   FOR UPDATE SKIP LOCKED\r\n\r\n结果：\r\n1    30\r\n2    10\r\nSELECT *\r\n  FROM aa t\r\n WHERE num &lt;= 40\r\n ORDER BY num DESC\r\n   FOR UPDATE SKIP LOCKED\r\n结果：\r\n1    40", "Konwledge_Point": "集合覆盖", "Question": ["oracle里有没有其他方法替代游标", ["存储过程内使用了游标遍历数据，需要对数据进行更新。", "\n当多用户同时请求时，多个session的游标查询的数据可能重复，游标锁定了数据，", "\n第一个用户 更新了数据，", "\n后面用户可能会覆盖前一个用户更新的数据。", "\n需要频繁查询数据，考虑到性能方面，希望用存储过程完成数据处理。", "\n有没有其他方法替代游标呢？"]], "Tag": "算法设计"}
{"Answer": "你原来在方法中每次调用方法都会新建一个list。所以每一次元素都是当次的元素。把list作为类的全局变量，list就可以增加了", "Konwledge_Point": "集合覆盖", "Question": ["如何在一个方法内将对象存入list中，放入session,再次执行该方法如何将新的对象继续存入？", ["1.在执行方法SavaQuestion，定义一个list对象 questionNaireQuestionslist", "\n2.再将questionNaireQuestion对象放入这个list对象questionNaireQuestionslist中", "\n3.将list对象questionNaireQuestionslist保存入session中，将questionNaireQuestion保存入session中", "\n4.如何再次执行这个方法SavaQuestion，将新的questionNaireQuesion对象存入list中", "\n5.我每次将新的questionNaireQuesion对象存入list中时都会覆盖原有的，list对象questionNaireQuestionslist永远只有一个元素", "\n\n", "public String saveQuestion(HttpServletRequest request) {\n   List<QuestionNaireQuestion> questionNaireQuestionslist = new ArrayList<QuestionNaireQuestion>();\n        QuestionNaireQuestion questionNaireQuestion = new QuestionNaireQuestion();\n                //......\n                 questionNaireQuestionslist.add(questionNaireQuestion);\n                 //将List对象questionNaireQuestionslist存入session中\n                request.getSession().setAttribute(\"questionNaireQuestionslist\", questionNaireQuestionslist);\n                 //将questionNaireQuestion对象存入session中\n                 request.getSession().setAttribute(\"questionNaireQuestion\", questionNaireQuestion);\n\n"]], "Tag": "算法设计"}
{"Answer": "缓存问题。\r\n拿过来之前把session同步下再看看。", "Konwledge_Point": "集合覆盖", "Question": ["Hibernate的一对多映射的问题，集合的size不对。", ["Parent和Children建立一对多的双向关联。", "\nParent类的Children属性是Set类型的。", "\n\n", "数据库里面和parent关联的child记录是2条，这个确认过。", "\n\n", "但是parent.getChindren().size()的值是1。", "\n\n", "但是用HQL方式用相同的条件查询，\"from Child c where c.parentId=\" + parent.getId()，结果是2。", "\n我把parent.getChindren().size()时在控制台输出的sql语句复制出来替换掉问号，直接去查询数据库，结果也是2条记录。", "\n\n", "为什么直接输出size的值是1而其他方法查询的结果是2？", "\n\n", "我已经覆盖了对象的hashCode和equals方法了，我在hashCode和equals里添加了输出，发现hashCode执行了一遍，equals没有执行，是不是说在初始化children的时候只有1个对象被添加到set里？ ", "\n\n", "应用里其他地方的一对多映射都正常，唯独这里有问题。", "\nChild不止和Parent有关联，还和其他的对象有同样的关联，那些就正常。", "\n\n", "[code=\"xml\"]", "\n\n", "\n class=\"com.bean.Parent\" not-null=\"false\" cascade=\"none\" />", "\n[/code]"]], "Tag": "算法设计"}
{"Answer": "entry应该指的就是键值对吧", "Konwledge_Point": "集合覆盖", "Question": ["hashmap 中的Entry链问题", ["引用网上的一段话：[quote]当程序试图将一个key-value对放入HashMap中时，程序首先根据该 key 的 hashCode() 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 hashCode() 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value，但key不会覆盖。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部[/quote]", "\n\n", "我的疑问是，这段话要怎么理解", "\n因为当我定义", "\n[code=\"java\"]", "\nmap.put(1,\"a\");", "\nmap.put(1,\"b\");", "\n[/code]", "\n\n", "此时map的size实际是1,map.get(1)为b也就是说后put的元素把前面的覆盖了。", "\n所以我想知道的是这个Entry里有多个元素，该怎么理解？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://leetcode-cn.com/circle/discuss/7HUB28/\" id=\"textarea_1644475955207_1644475999598_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://leetcode-cn.com/circle/discuss/7HUB28/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["求“最大公共偏序子集”", ["有两个各自具有一种序结构的集合，如何寻找这两个集合的一种共同子集使得：", "1、子集中元素的排列顺序能同时满足这两个集合上的序结构；", "2、符合1的前提下，子集尽可能大", "\n", "比如把两个字符串当做集合：", "a=\"我不知道如何解决这个问题\"", "b=\"不知道我能否想出解决该问题的办法\"", "那么符合条件的所谓“最大公共偏序子集”就是：", "\"不知道解决问题\"", "\n", "稍微解释一下c怎么来的，所谓的序结构，比如a字符串的就是：“我”要排在“不”前面，“不”又要排在后面的其他字前面，字符串上这种覆盖每个字的一维的从左到右的可传导的顺序关系，就可以当做是a字符串所具有的一个序结构，同理b字符串也一样。", "然后c在是a，b的公共子集的同时，c中的每一个元素，还要满足a，b上的顺序关系，比如开头的\"我\"和\"不\"字，虽然是a，b的共同元素，但是它们两个字在a中和在b中的先后顺序不一样，所以它们不能同时出现在c中。", "就是这么回事吧，有点像是在找最长公共子串，也有点像求交集。", "声明一下，标题中的“最大公共偏序子集”这个名字是我乱取的，只是为了简要概括题意而已，不过或许数学里真有这么个说法。", "其实这里的集合，也不是严格数学定义的集合，可以当他是一个collection而不是set，也就是说，元素可重复。", "请各位给点思路就好"]], "Tag": "算法设计"}
{"Answer": "：D， 大概知道你是什么意思了。其实你用list 这个Collection就完全可以达到你要的效果了。\r\nSet 不允许有相同的对象如果你一定要把相同的对像放在一个Collection中的话那建议用List好了，这样就不会存在一个覆盖问题了。\r\n\r\n能不能在每次循环的完后即在还没有覆盖就把值给在前台给获得\r\n-----------------------------------------------------------\r\n不行，看一下Struts2 的流程图。顺便建议看一下Struts2的时序图。从页面到Action再到页面其实是一整个流程。Web Application都是按照这个流程走的。", "Konwledge_Point": "集合覆盖", "Question": ["一个ssh问题", ["初学ssh框架。对那个注射的原理有点模糊", "\n下面是我遇到的一个问题。请大家帮忙指教", "\n    public String queryAllCatory(){", "\n        catorys = this.getCatoryManager().queryCatory();", "\n        for(int i=0; i\n            catory = catorys.get(i);", "\n            sub = catory.getSubcatories();", "\n//          sub.add(catory.getSubcatories().iterator().next());", "\n//          System.out.println(\"-----------\"+ catory.getCatoryname()+\":\" + catory.getSubcatories().iterator().next());  ", "\n//          sub.add(catory.getSubcatories().iterator().next());", "\n        }", "\n        return SUCCESS;", "\n    }", "\n上面是action代码", "\n下面是jsp代码", "\n\n", "                <tr>\n                    <td>\n                        <s:property value=\"catoryname\" />\n                    </td>\n                    <td>\n                        <s:iterator value=\"sub\">\n                            <s:property value=\"subcatoryname\" />\n                        </s:iterator>\n                    </td>\n                </tr>\n            </s:iterator>\n", "\n\n", "我想在jsp页面获得值。但是我不明白为什么问题获得set集合最后一个值。他们不是一边循环一边把那个值传到jsp页面上的吗。请大家指教。", "\n\n", "我记得前面我做过类似的好像能获得这样的值的呀。弄不明白了。折腾了两天了也不知道怎么回事", "\n[b]问题补充：[/b]", "\n谢谢你的回答。我在后台给打出来了。sub里面是有值的。是最后一个值，我想知道怎么把他循环里面的每一个值都在前台给显示出来，我记得前面我做过就这样能把他给显示出来。  我的意思就是把他每一个循环的值在页面都能够显示出来。", "\n[b]问题补充：[/b]", "\n可能还没有表达清楚。可能在循环的时候每一次向sub里面放值的时候这次放的值把上次的值给覆盖了。我就是想知道的是：能不能在每次循环的完后即在还没有覆盖就把值给在前台给获得。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;/war exploded/addCart  这里是有空格的吗&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["java-web练习，点击addCart.html文档后，无法跳转到AddCartServlet，请问是不是下图红框所示的地址写错了？", ["这是项目文件列表及html文档的跳转地址", "以下为具体实现代码", "\n", "<!", "DOCTYPE", " html>\n<html lang=", "\"en\"", ">\n<head>\n    <meta charset=", "\"UTF-8\"", ">\n    <title>", "Title", "</title>\n</head>\n<body>\n<center>\n    <h1>商品列表</h1>\n    <a href=", "\"/war exploded/addCart?name=杯子\"", ">杯子</a><br>\n    <a href=", "\"/war exploded/addCart?name=书包\"", ">书包</a><br>\n    <a href=", "\"/war exploded/addCart?name=笔记本\"", ">笔记本</a><br>\n</center>\n</body>\n</html>\n\n", "package", " session;\n\n", "import", " javax.servlet.*;\n", "import", " javax.servlet.http.*;\n", "import", " javax.servlet.annotation.*;\n", "import", " java.io.", "IOException", ";\n", "import", " java.util.", "ArrayList", ";\n", "import", " java.util.", "List", ";\n\n", "@WebServlet", "(name = ", "\"AddCartServlet\"", ", urlPatterns = ", "\"/addCart\"", ")\npublic ", "class", " ", "AddCartServlet", " ", "extends", " ", "HttpServlet", " ", "{\n    ", "@Override", "\n    ", "protected", " void doGet(", "HttpServletRequest", " request, ", "HttpServletResponse", " response) ", "throws", " ", "ServletException", ", ", "IOException", " {\n\n        ", "//获取商品信息", "\n        ", "String", " name=request.getParameter(", "\"name\"", ");\n        ", "//在服务器中开辟一个能保存商品信息的内存空间session", "\n        ", "HttpSession", " session= request.getSession();\n\n        ", "//重点：以下代码实现目的为--在连续点击打开多个商品链接后，使多个商品信息可以通过name传进来保存在session中，不会被前个商品信息覆盖，只出现一个商品；", "\n\n        ", "//创建一个list类集合对象用来保存此前session中的所有商品信息；此处需要强转（将session转为List类使等号两边类型相等）", "\n        ", "List", " list=(", "List", ")session.getAttribute(", "\"list\"", ");\n        ", "//第一次访问的时候，list不存在，需要创建一个；", "\n        ", "if", " (list==", "null", "){\n            list=", "new", " ", "ArrayList", "();\n        }\n        ", "//将商品信息保存到list集合中", "\n        list.add(name);\n        ", "//在session内存空间中保存一个键为\"list\",值为list的商品", "\n        session.setAttribute(", "\"list\"", ",list);\n\n        ", "//方法重载，对session进行持久化操作，也就是持久化cookie里的JSESSIONID（标识id）", "\n        ", "Cookie", " cookie=", "new", " ", "Cookie", "(", "\"JSESSIONID\"", ",session.getId());\n        ", "//使session内存空间在无操作情况下存在时间变为24小时；", "\n        cookie.setMaxAge(", "60", "*", "60", "*", "24", ");\n        ", "//使cookie参数在war exploded目录下才会被携带；", "\n        cookie.setPath(", "\"/war exploded\"", ");\n        response.addCookie(cookie);\n    }\n\n    ", "@Override", "\n    ", "protected", " void doPost(", "HttpServletRequest", " request, ", "HttpServletResponse", " response) ", "throws", " ", "ServletException", ", ", "IOException", " {\n\n    }\n}\n\n", "package", " session;\n\n", "import", " javax.servlet.*;\n", "import", " javax.servlet.http.*;\n", "import", " javax.servlet.annotation.*;\n", "import", " java.io.", "IOException", ";\n", "import", " java.util.", "List", ";\n\n", "@WebServlet", "(name = ", "\"GetCartServlet\"", ", urlPatterns = ", "\"/getCart\"", ")\npublic ", "class", " ", "GetCartServlet", " ", "extends", " ", "HttpServlet", " ", "{\n    ", "@Override", "\n    ", "protected", " void doGet(", "HttpServletRequest", " request, ", "HttpServletResponse", " response) ", "throws", " ", "ServletException", ", ", "IOException", " {\n\n        ", "HttpSession", " session=request.getSession();\n        ", "List", "<", "String", "> list=(", "List", "<", "String", ">) session.getAttribute(", "\"list\"", ");\n        response.setCharacterEncoding(", "\"UTF-8\"", ");\n        response.setContentType(", "\"text/html;charset=UTF-8\"", ");\n\n        ", "for", " (", "String", " s : list){\n            response.getWriter().write(s+", "\"<br/>\"", ");\n        }\n    }\n\n    ", "@Override", "\n    ", "protected", " void doPost(", "HttpServletRequest", " request, ", "HttpServletResponse", " response) ", "throws", " ", "ServletException", ", ", "IOException", " {\n\n    }\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "以前是plug-in 现在是dropins文件夹了\r\n\r\n看这个博客你就知道了http://jyw.iteye.com/blog/210109\r\n还解决不了我就不信了", "Konwledge_Point": "集合覆盖", "Question": ["myeclipse7.1到底怎么装插件啊", ["想装javafx，只能用7 版本的myeclipse。", "\n但是，昏过去，这个插件到底怎么装啊，不管本地，还是远程都没法装插件啊。", "\n\n", "不管怎么弄，它好像都要去联网去装或者升级很多不相关的插件，而不是只安装某个指定的插件。", "\n但是，每次都在网上卡死。", "\n我只要装一个javafx插件啊，难道我就不能直接装它一下就行了么。搞了两天了，还是装不上。", "\n\n", "真不知道为什么要搞个什么pulse,是不是eclipse以后也想搞专制。", "\n[b]问题补充：[/b]", "\n[quote]覆盖到 features 和 plugins 目录下是一种办法,一般插件下载了都是压缩包你解压到eclipse安装目录覆盖这就可以了 ", "\n\n", "还有就是通过 Help---> Softwere Updates ---> find and install...-->>search for new features [/quote]", "\n\n", "这是以前版本才能用的；现在根本就不行了貌似。", "\n现在eclipse使用pulse来管理插件，以及升级。", "\n\n", "但我觉得这肯定通过某种方法还是能本地直接安装的，所以等待达人出现。", "\n[b]问题补充：[/b]", "\n[quote]", "http://www.vogella.de/articles/JavaFX/article.html#eclipse_install", " ", "\n\n", "这个肯定可以帮到你了.图文并茂,教你怎么装javaFX插件[/quote]", "\n\n", "这个根本没用，没讲怎么装，我以前看过", "\n[b]问题补充：[/b]", "\n补充一下；从myeclipse7开始貌似跟以前结构完全不一样了。", "\n连原始eclipse都没有，全都集合在myeclipse自己里面了。", "\n连links目录也没有", "\n[b]问题补充：[/b]", "\n[quote]", "http://www.vogella.de/articles/Eclipse/article.html#updatemanager", " ", "\n\n", "这里有说到怎么安装呀 ", "\nHelp -> Software Updates-> ", "\n单击Check for updates...(系统检测有没有可用跟新) ", "\n选择Available Software选项卡 ", "\n然后选择你要更新或者安装的插件,比如\"JavaFX plug-in\", ", "\n单击manage sites按钮 ", "\n选择JavaFx plug-in的更新站点,打开则可以看到安装包列表 ", "\n\n", "To add a new update site select on the tab \"Available Software\" the button \"Add Site\" and input the URL. This will then make this update site available and will allow you to install software from this site. ", "\n\n", "添加一个新的更新站点,选择\"available Software\"(可用软件)选项卡,点击\"add site\"按钮,输入url(", "http://download.java.net/general/javafx/eclipse/windows/site.xml)不知道是不是这个,你试一下,就可以更新", ". ", "\n\n", "1.4. Manual installation of plug-ins (dropins folder) ", "\n\n", "If you can't use or don't want to use the Eclipse update manager you can also put the plug-in into Eclipse dropins folder and restart Eclipse. After the restart Eclipse should detect the new plugin and install it for you. ", "\n另外也可以从", "http://download.java.net/general/javafx/eclipse/windows/", " 这里下载插件来拷贝到 eclipse安装目录中的相应文件夹中,然后重启,就可以检测到 [/quote]", "\n\n", "这个网站说的方法是通过网络安装，这是不可能装的，好像国内根本就连不上那些网现在。", "\n另外已经说了，myeclipse7开始，就已经没有什么eclipse目录了，不支持link目录了。", "\n\n", "我现在网上看到有些人说可以放在dropins目录下，就是不知道怎么使用"]], "Tag": "算法设计"}
{"Answer": "＝ ＝ 在java内部实际上是有指针概念的。你想，使用具有指针概念的cpu写出来的java解释器哪能离开指针概念？再说就像代词一样，你哪能少了指向其它变量的变量啊。\r\n解释你的问题：你的obj指向一个数组对象，你每次是在把同一个数组对象add到了list里，也即list里每一个坑指向的都是同一个数组对象。", "Konwledge_Point": "集合覆盖", "Question": ["关于 java Mysql的一个小问题，求帮忙解答", ["package ceshiJDBC;", "\n\n", "import java.util.Properties;", "\nimport java.io.FileNotFoundException;", "\nimport java.io.FileReader;", "\nimport java.io.IOException;", "\nimport java.security.KeyStore.ProtectionParameter;", "\nimport java.sql.*;", "\nimport java.util.ArrayList;", "\nimport java.util.List;", "\n//object数组存储", "\npublic class ORMDemo {", "\n\n", "static Properties pro=null;\nstatic Connection con=null;\nstatic PreparedStatement ps=null;\nstatic ResultSet rs=null;\nstatic Object[] obj=null;\nstatic List<Object[]> list=new ArrayList<Object[]>();\n\nstatic {\n    try {\n        pro=new Properties();\n        pro.load(new FileReader(\"D:\\\\JavaEEeclipse\\\\ceshiJDBC\\\\src\\\\ceshiJDBC\\\\JDBC.properties\"));\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\npublic static void main(String[] args) {\n\n\n    try {\n        Class.forName(pro.getProperty(\"mysqlDriver\"));\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    }\n\n    try {\n        con=new JDBCUtil().getCon();\n        ps=con.prepareStatement(\"select username,regTime from t_user where id>?\");\n        ps.setInt(1, 2);\n        rs=ps.executeQuery();\n         obj=new Object[2];\n        while(rs.next()) {\n            obj[0]=rs.getString(1);\n            obj[1]=rs.getDate(2);\n            list.add(obj);\n            System.out.println(rs.getString(1)+\"--\"+rs.getDate(2));\n        }\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    } catch (SQLException e) {\n        e.printStackTrace();\n    }\n    for(Object[] lists:list) {\n\n            System.out.println(\"\"+lists[0]+lists[1]);\n\n    }\n\n}\n", "\n\n", "}", "\n输出结果：", "\nnam--2017-11-27", "\n??--2017-11-27", "\ngerg--2017-11-27", "\nrg--2017-11-27", "\nrg2017-11-27", "\nrg2017-11-27", "\nrg2017-11-27", "\nrg2017-11-27", "\n\n", "为什么数据存到集合中时正常，而最后都被覆盖了？", "\n就是说，为什么最后结果都是rg2017-11-27？？"]], "Tag": "算法设计"}
{"Answer": "* The &lt;tt&gt;List&lt;/tt&gt; interface places additional stipulations, beyond those\r\n * specified in the &lt;tt&gt;Collection&lt;/tt&gt; interface, on the contracts of the\r\n * &lt;tt&gt;iterator&lt;/tt&gt;, &lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;equals&lt;/tt&gt;, and\r\n * &lt;tt&gt;hashCode&lt;/tt&gt; methods.  Declarations for other inherited methods are\r\n * also included here for convenience.&lt;p&gt;\r\n\r\n这个说的明白只是为了方便的，这样你就可以直接看到这个这个方法的注释了，不用再进入collection接口。因为基本上我们使用的都是list或是set。", "Konwledge_Point": "集合覆盖", "Question": ["一个关于接口的继承的问题", ["[code=\"java\"]public interface List extends Collection[/code]", "\n\n", "这是jdk中的结构.", "\ncollection中已经有size,isEmpty,toArray,isEmpty等方法,可是在list接口中,又去覆盖它,这是为什么啊,干嘛要多此一举?", "\n\n", ":x "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;###解决了&amp;#xff0c;我之前不知道为什么 &lt;a class=\"md_call_user\" type=\"user\"&gt;&amp;#64;Autowried会失败&amp;#xff0c;最后我使用手动注入RedisUtils&amp;#xff0c;成功了。&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;将原本的自动注入&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-meta\"&gt;&amp;#64;Autowired&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; RedisUtils redisUtil\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;改为手动注入&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; RedisUtils redisUtil &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;BeanUtils&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;get&lt;span class=\"hljs-constructor\"&gt;Bean(RedisUtils.&lt;span class=\"hljs-params\"&gt;class&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Bean工具类&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-meta\"&gt;&amp;#64;Component&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;BeanUtils&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;implements&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ApplicationContextAware&lt;/span&gt;  &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;protected&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; ApplicationContext applicationContext ;\n\n    &lt;span class=\"hljs-meta\"&gt;&amp;#64;Override&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;setApplicationContext&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(ApplicationContext arg0)&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (applicationContext &amp;#61;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;null&lt;/span&gt;) {\n            applicationContext &amp;#61; arg0;\n        }\n \n    }\n    &lt;span class=\"hljs-comment\"&gt;/**\n     * 拿到ApplicationContext对象实例后就可以手动获取Bean的注入实例对象\n     */&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=\"hljs-function\"&gt;T &lt;span class=\"hljs-title\"&gt;getBean&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Class&amp;lt;T&amp;gt; clazz)&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; applicationContext.&lt;span class=\"hljs-title\"&gt;getBean&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(clazz)&lt;/span&gt;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3 id=\"h3_完美解决_1647788493203\"&gt;完美解决&lt;/h3&gt;", "Konwledge_Point": "集合覆盖", "Question": ["【报NullPointerException】springboot 中 websocket 的 @OnMessage 中使用自定义的工具类，报空指针异常", ["问题遇到的现象和发生背景", "\n", "使用websocket谢了一个简单的聊天室，当聊天用户未上线的时候，给该未上线的用户发送消息，我是想保存将未上线用户为收到的消息保存到redis中，以便该未登录用户下次登录后可以从redis中获取其未登录是本应收到的消息。因为用户发送的消息是在onMessge中发送的，我在onMessage中使用自定义的RedisUtils（通过", "@Component注入到了springboot中了，用的时候使用了@Autowired自动装配），总是报“NullPointerException”。", "\n", "问题相关代码，请勿粘贴截图", "\n", "   @Autowired\n    ", "private", " RedisUtils redisUtil;\n\n    ", "// static：因为这个类是所有用户共享的，使用 static 可以保证存储的数据不会被覆盖", "\n    ", "private", " static Map<String,ChatEndpoint> onlineUser = ", "new", " ConcurrentHashMap<>", "()", ";\n\n    ", "// 声明 websocket session对象，使得每一个用户拥有自己的独立的 session，因此我们不能使用 static", "\n    ", "private", " Session wsSession;\n\n    ", "// 用户取出当前用户存在 httpSession 中的信息", "\n    ", "private", " HttpSession httpSession;\n\n    @OnOpen\n    public void on", "Open(Session ", "session", ", EndpointConfig ", "endpointConfig", ")", "{\n        ", "try", " {\n            ", "// 给当前的 WebSocket Session 赋值", "\n            this.wsSession = session;\n            ", "// 获取 httpSession，并存入当前的 httpSession", "\n            this.httpSession = (HttpSession) endpointConfig.get", "UserProperties()", ".get(", "HttpSession", ".", "class", ".get", "Name()", ");\n\n            onlineUser.put((String) httpSession.get", "Attribute(", "\"userId\"", ")", ", this);\n        } catch (Exception e) {\n            e.print", "StackTrace()", ";\n        }\n    }\n\n@OnMessage\n    public void on", "Message(String ", "message", ", Session ", "session", ")", "{\n        ", "try", " {\n            ", "// 将JSON 转换成 Object", "\n            MyMessage myMessage = ", "JSON", ".", "parse", "Object(", "message", ", MyMessage.", "class", ")", ";\n\n            ", "// 获取要发送的消息（JSON）", "\n            String targetSendMessage = ", "MessageUtils", ".", "get", "Message(", "false", ",(String)", " httpSession.get", "Attribute(", "\"userId\"", ")", ", myMessage.get", "Message()", ");\n\n            String listID = myMessage.get", "ToName()", " + httpSession.get", "Attribute(", "\"userId\"", ")", ";\n\n            ", "// 获取当前在线的用户集合", "\n            Set<String> onlineUsers = onlineUser.key", "Set()", ";\n            ", "// 若发送消息的目标在线，直接发送消息", "\n            ", "if", " (onlineUsers.contains(myMessage.get", "ToName()", ")) {\n                ", "// 发送消息", "\n                onlineUser.get(myMessage.get", "ToName()", ")    ", "// 获取目标用户对应的 ChatEndpoint 类", "\n                        .wsSession   ", "// 目标用户对应的 ChatEndpoint 类的成员变量", "\n                        .get", "BasicRemote()", "  ", "//", "\n                        .send", "Text(", "targetSendMessage", ")", ";  ", "// 发送消息（targetSendMessage  : JSON）", "\n\n            } ", "else", " { ", "// 发送消息的目标不在线", "\n                ", "// 获取以目标用户为主角的我们的聊天记录", "\n                List<Object> chatRecordOfText = get", "ChatRecordOfText(", "listID", ")", ";\n        } catch (IOException e) {\n            e.print", "StackTrace()", ";\n        }\n    }\n\n    ", "private", " List<Object> get", "ChatRecordOfText(String ", "listID", ")", "{\n        ", "try", " {\n            return redisUtil.l", "Get(", "listID", "+", "\"chattxt\"", ", 0, -1)", ";\n        } catch (Exception e) {\n            e.print", "StackTrace()", ";\n            return ", "new", " ArrayList<>", "()", ";\n        }\n    }\n", "\n", "运行结果及报错内容", "\n", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "1、我试过 new RedisUtils()，结果也是“空指针异常”", "\n", "我想要达到的结果", "\n", "能够在 OnMessage 使用自定义个 RedisUtils 访问 redis 服务器"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;需要先确定是否正确安装了jinja2&amp;#xff0c;如果没有&amp;#xff0c;通过pip install Jinja2安装一下&amp;#xff0c;如果已经安装&amp;#xff0c;那就可能是环境配置问题&amp;#xff0c;确定一下你安装的什么版本的python&amp;#xff0c;运行的时候又是用的什么版本的&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["出现cannot import name 'Markup' from 'jinja2'怎么解决", ["\n```python\n", "import", " pandas ", "as", " pd\n", "from", " pyecharts ", "import", " Geo,Line,Bar\n", "from", " pyecharts ", "import", " Overlap  ", "# 图表叠加类", "\n", "from", " wordcloud ", "import", " WordCloud, ImageColorGenerator    ", "# 词云图相关模块", "\n", "import", " matplotlib.pyplot ", "as", " plt                         ", "# 绘制图表的模块", "\n", "from", " os ", "import", " path                                     ", "# 路径", "\n", "import", " collections                                      ", "# 集合模块", "\n", "import", " jieba                                            ", "# 分词模块", "\n", "import", " imageio                                          ", "# 图片读取", "\n", "# 读取文件内容", "\ntomato_com = pd.read_excel(", "'夏洛特烦恼.xlsx'", ")\ngrouped = tomato_com.groupby([", "'city'", "])  ", "# 按照城市名称进行数据的分组", "\ngrouped_pct = grouped[", "'score'", "]  ", "# 获取分组后的评分信息", "\ncity_com = grouped_pct.agg([", "'mean'", ", ", "'count'", "])  ", "# 聚合数据，城市、平均分、数量", "\n        ", "# 重置数据的索引", "\ncity_com.reset_index(inplace=", "True", ")\n        ", "# 返回浮点数 0.01 返回到后两位", "\ncity_com[", "'mean'", "] = ", "round", "(city_com[", "'mean'", "], ", "2", ")\n        ", "# 创建热力图实例对象", "\ngeo = Geo(", "'《夏洛特烦恼 》 全国热力图'", ", title_color=", "\"#fff\"", ",\n                  title_pos=", "\"center\"", ", width=", "1200", ",\n                  height=", "600", ", background_color=", "'#404a59'", ")\nflag = ", "True", "\n        ", "# 创建城市与对应数量的列表数据", "\ndata = [(city_com[", "'city'", "][i], city_com[", "'count'", "][i]) ", "for", " i ", "in", " ", "range", "(", "0", ", city_com.shape[", "0", "])]\n", "while", " flag:\n            ", "# 转换数据序列，将带字典和元组类型的序列转换为 k_lst,v_lst 两个列表", "\n    attr, value = geo.cast(data)\n    ", "try", ":\n                ", "# 添加城市热点图", "\n                ", "# attr城市名称、value对应数量、type类型、visual_range热点区间值、visual_text_color字体颜色", "\n                ", "# is_visualmap是否为视觉地图、", "\n        geo.add(", "\"\"", ", attr, value, ", "type", "=", "\"heatmap\"", ", visual_range=[", "0", ", ", "50", "], visual_text_color=", "\"#fff\"", ",\n                        is_visualmap=", "True", ")\n        flag = ", "False", "     ", "# 修改循环标记", "\n    ", "except", " ValueError ", "as", " e:\n        e = ", "str", "(e)\n        e = e.split(", "\"No coordinate is specified for \"", ")[", "1", "]  ", "# 获取不支持的城市名", "\n        ", "for", " i ", "in", " ", "range", "(", "0", ", ", "len", "(data)):\n            ", "if", " e ", "in", " ", "list", "(data[i]):\n                ", "del", " data[i]  ", "# 将不支持城市名的数据删除", "\n                ", "break", "\n            flag = ", "True", "\n        ", "# 生成全国热力图html文件", "\ngeo.render(", "'夏洛特烦恼全国热力图.html'", ")\n\n", "# 2、生成主要城市评论数及平均分文件", "\n", "# 通过排序获取数量排行前30的城市信息", "\ncity_main = city_com.sort_values(", "'count'", ", ascending=", "False", ")[", "0", ":", "30", "]\nattr = city_main[", "'city'", "]     ", "# 获取城市名称的数据", "\nv1 = city_main[", "'count'", "]      ", "# 获取数量", "\nv2 = city_main[", "'mean'", "]       ", "# 获取平均分", "\nline = Line(", "\"主要城市评分\"", ")  ", "# 折线图对象", "\n        ", "# is_stack是否堆叠、xaxis_rotate（x轴城市名称旋转角度）", "\n        ", "# yaxis_min（y轴最小值）", "\n        ", "# mark_point（覆盖物的方式显示最高值和最小值）", "\n        ", "# xaxis_interval（x轴间隔距离，底部显示城市名称之间的距离）", "\n        ", "# line_color（线的颜色）", "\n        ", "# line_width（线宽度）", "\n        ", "# mark_point_textcolor（标记点文字的颜色）", "\n        ", "# is_splitline_show（是否显示分割线）", "\nline.add(", "\"城市\"", ", attr, v2, is_stack=", "True", ", xaxis_rotate=", "45", ", yaxis_min=", "0", ",\n                 mark_point=[", "'min'", ", ", "'max'", "], xaxis_interval=", "0", ", line_color=", "'lightblue'", ",\n                 line_width=", "4", ", mark_point_textcolor=", "'black'", ", mark_point_color=", "'yellow'", ",\n                 is_splitline_show=", "False", ")    ", "# 添加折线图", "\nbar = Bar(", "\"主要城市评论数\"", ")          ", "# 柱形图对象", "\nbar.add(", "\"城市\"", ", attr, v1, is_stack=", "False", ", xaxis_rotate=", "45", ", yaxis_min=", "0", ",\n                xaxis_interval=", "0", ", is_splitline_show=", "False", ",mark_point_color=", "'yellow'", ")   ", "# 添加柱形图", "\noverlap = Overlap()    ", "# 叠加图表对象", "\n        ", "# 默认不新增 x y 轴，并且 x y 轴的索引都为 0", "\noverlap.add(bar)\noverlap.add(line, yaxis_index=", "1", ", is_add_yaxis=", "True", ")\n        ", "# 生成主要城市评论数_平均分.html文件", "\noverlap.render(", "'主要城市评论数_平均分.html'", ")\n\n", "# 3、生成词云图", "\n", "# 获取评论内容", "\ntomato_str = ", "' '", ".join(tomato_com[", "'comment'", "])\nwords_list = []  ", "# 保存词汇的列表", "\n        ", "# 分词", "\nword_generator = jieba.cut_for_search(tomato_str)\n", "for", " word ", "in", " word_generator:\n    words_list.append(word)  ", "# 将拆分后的词汇添加至列表当中", "\nwords_list = [k ", "for", " k ", "in", " words_list ", "if", " ", "len", "(k) > ", "1", "]  ", "# 筛选词汇长度大于1的", "\nback_color = imageio.imread(", "'词云背景.jpg'", ")  ", "# 读取图片", "\nwc = WordCloud(background_color=", "'white'", ",  ", "# 背景颜色", "\n                       max_words=", "200", ",  ", "# 最大词数", "\n                       mask=back_color,  ", "# 以该参数值作图绘制词云，这个参数不为空时，width和height会被忽略", "\n                       max_font_size=", "300", ",  ", "# 显示字体的最大值", "\n                       font_path=", "\"STFANGSO.ttf\"", ",  ", "# 字体", "\n                       random_state=", "42", ",  ", "# 为每个词返回一个PIL颜色", "\n                       ", "# width=1000,  # 图片的宽", "\n                       ", "# height=860  # 图片的长", "\n                       )\ntomato_count = collections.Counter(words_list)  ", "# 统计数量", "\nwc.generate_from_frequencies(tomato_count)  ", "# 生成词云图", "\n        ", "# 基于彩色图像生成相应彩色", "\nimage_colors = ImageColorGenerator(back_color)\n        ", "# 创建图形", "\nplt.figure()\n        ", "# 显示彩色图像", "\nplt.imshow(wc.recolor(color_func=image_colors))\n        ", "# 去掉坐标轴", "\nplt.axis(", "'off'", ")\n        ", "# 保存词云图片", "\nwc.to_file(path.join(", "'词云.png'", "))\n\n", "\n", "为什么会出现这样的报错，这些库都安装了一个遍，是在pycharm上运行的", "\n", "\n", "\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;大部分比较基础&amp;#xff0c;操作题有点费点时间。&lt;/p&gt;\n\n&lt;p&gt;一、选择题&lt;/p&gt;\n\n&lt;p&gt;1、D&lt;/p&gt;\n\n&lt;p&gt;2、C&lt;/p&gt;\n\n&lt;p&gt;3、B&lt;/p&gt;\n\n&lt;p&gt;4、A&lt;/p&gt;\n\n&lt;p&gt;5、B&lt;/p&gt;\n\n&lt;p&gt;6、C&lt;/p&gt;\n\n&lt;p&gt;7、C&lt;/p&gt;\n\n&lt;p&gt;8、B&lt;/p&gt;\n\n&lt;p&gt;9、A&lt;/p&gt;\n\n&lt;p&gt;10、D&lt;/p&gt;\n\n&lt;p&gt;11、C&lt;/p&gt;\n\n&lt;p&gt;12、A&lt;/p&gt;\n\n&lt;p&gt;13、D&lt;/p&gt;\n\n&lt;p&gt;14、D&lt;/p&gt;\n\n&lt;p&gt;15、B&lt;/p&gt;\n\n&lt;p&gt;二、填空题&lt;/p&gt;\n\n&lt;p&gt;1、[1,2]&lt;/p&gt;\n\n&lt;p&gt;2、[6, 7, 9, 11]&lt;/p&gt;\n\n&lt;p&gt;3、评分、降序&lt;/p&gt;\n\n&lt;p&gt;4、代码如下&amp;#xff0c;按照填空需求填空即可。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;list1&amp;#61;[&amp;#39;张杨华&amp;#39;,&amp;#39;韩冠浩&amp;#39;,&amp;#39;刘斯&amp;#39;,&amp;#39;李弘&amp;#39;,&amp;#39;关申海&amp;#39;,&amp;#39;李晓思&amp;#39;,&amp;#39;李思慧&amp;#39;,&amp;#39;刘潇斯&amp;#39;,&amp;#39;刘斯&amp;#39;]\nlist1[list1.index(&amp;#39;李弘&amp;#39;)]&amp;#61;&amp;#39;李泓&amp;#39;\nlist1.remove(&amp;#39;刘斯&amp;#39;)\nlist1.append(&amp;#39;张瀚&amp;#39;) \nprint(list1)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;5、代码如下&amp;#xff0c;按照填空需求填空即可。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;t_array&amp;#61;[(4,5,6,7),(8,9,10,11),(12,13,14,15),(16,17,18,19)]\nsum&amp;#61;0\nfor arr in t_array:\n    for i in range(4):\n        sum&amp;#43;&amp;#61;arr[i]\nprint(sum)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;三、操作题&lt;/p&gt;\n\n&lt;p&gt;1、代码如下&amp;#xff0c;网上有一模一样的题目&amp;#xff0c;不过代码有点问题&amp;#xff0c;改正如下&amp;#xff0c;思路就是排除法。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;import string\ndef str_count(str):\n    count_en &amp;#61; count_dg &amp;#61; count_sp &amp;#61;count_zh &amp;#61; count_pu &amp;#61; 0\n    for s in str:\n        # 统计英文字母个数 \n        if s in string.ascii_letters:\n            count_en &amp;#43;&amp;#61; 1 \n        # 统计数字个数\n        elif s.isdigit(): \n            count_dg &amp;#43;&amp;#61; 1\n        # 统计空格个数 \n        elif s.isspace():\n            count_sp &amp;#43;&amp;#61; 1 \n        # 统计中文个数\n        elif s.isalpha():\n            count_zh &amp;#43;&amp;#61; 1\n        # 剩余就是标点符号 \n        else:\n            count_pu &amp;#43;&amp;#61; 1 \n    print(&amp;#39;英文字符:&amp;#39;, count_en)\n    print(&amp;#39;数字:&amp;#39;, count_dg) \n    print(&amp;#39;空格:&amp;#39;, count_sp) \n    print(&amp;#39;中文:&amp;#39;, count_zh) \n    print(&amp;#39;标点符号:&amp;#39;, count_pu)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;2、代码如下&amp;#xff0c;网上有类似的题目&amp;#xff0c;不过这个题目要求更严格&amp;#xff0c;所以for循环中这样写。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;import random\nrandom.seed(0x1010)\ns&amp;#61;&amp;#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789!&amp;#64;#$%&amp;amp;*-&amp;#34; \nls&amp;#61;[]\nexcludes&amp;#61;&amp;#34;&amp;#34;\n\nwhile len(ls)&amp;lt;20:\n    pwd&amp;#61;&amp;#34;&amp;#34;\n\n    for i in range(3):\n        pwd&amp;#43;&amp;#61;random.choice(s[:26])\n        pwd&amp;#43;&amp;#61;random.choice(s[26:53])\n        pwd&amp;#43;&amp;#61;random.choice(s[53:64])\n        pwd&amp;#43;&amp;#61;random.choice(s[64:len(s)&amp;#43;1])\n        \n    if pwd[0] in excludes:\n        continue\n    else:\n        ls.append(pwd)\n        excludes&amp;#43;&amp;#61;pwd[0]\n\n    with open(&amp;#39;激活码.txt&amp;#39;,&amp;#39;w&amp;#39;) as f:\n        f.write(&amp;#39;\\n&amp;#39;.join(ls))&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "集合覆盖", "Question": ["大佬们，可以帮我做做这张试卷吗。很快考试了。做一道也可以，给个答案就行了，", ["  全国高等学校计算机水平考试II级---《Python 程序设计》考试大纲 (试行)", "\n一、考试目标与要求", "\n考试目标:测试考生系统掌握 Python 基本概念及其编程思想，了解 Python 计算生态，利 用 Python 进行数据处理及解决问题的能力。", "\n考试要求:", "\n1. 熟练掌握 Python 语言基础语法，掌握模块化程序设计思想，了解面向对象基本概念。 2. 熟练掌握 Python 常用标准库及第三方库的使用。", "\n3. 能够阅读和分析 Python 程序，利用 Python 进行简单的数据处理及数据可视化。", "\n二、考试内容", "\n(一)基础知识", "\n【考试要求】", "\n掌握Python中的常量、变量、数据类型、运算符、表达式、内置函数和基本输入输出。 【主要考点】", "\n1.常量与变量", "\n2.基本数据类型 3.运算符与表达式 4.数据类型转换 5.字符串类型及相关函数/方法 6.基本输入输出", "\n7. Python常用内置函数 8.注释", "\n(二)流程控制", "\n【考试要求】 掌握Python程序格式框架及书写风格，掌握顺序、选择、循环结构在Python中的实现方", "\n法，能灵活运用不同的控制结构解决实际问题。 【主要考点】", "\n1.顺序结构", "\n2. 选择结构:单分支、双分支、多分支选择结构，选择结构的嵌套", "\n3. 循环结构:for 循环、while 循环，带有 else 子句的循环，break 与 continue 语句的作", "\n用", "\n4. 程序的异常处理:try ---except", "\n(三)高级数据类型", "\n【考试要求】 掌握Python中列表、元组、字典、集合的使用方法以及应用场合;了解不同数据类型的", "\n     1/7", "\n\n", "  优缺点和适用领域;学会综合应用多种数据类型解决实际问题。 【主要考点】 1.列表:创建、删除、修改、切片、访问、排序;多维列表", "\n2. 元组:创建、删除、切片、访问", "\n3. 字典:创建、删除、添加、修改及访问，有序字典的使用", "\n4. 集合:创建、删除、访问，集合的并、交、差以及对称差等运算 5. 列表、元组、集合的区别及相互转换", "\n(四)模块化程序设计", "\n【考试要求】 了解模块化程序设计思想，掌握分而治之的结构化程序设计方法;掌握函数定义、参数传", "\n递及高级函数的使用;了解变量作用域的含义;掌握匿名函数的定义及使用。 【主要考点】", "\n1. 函数定义与使用", "\n2. 函数参数:默认参数、可变参数、关键字参数", "\n3. 变量作用域:局部变量和全局变量", "\n4. 匿名函数的定义及使用", "\n5. 高级函数(map、reduce、filter)的使用", "\n(五)面向对象程序设计", "\n【考试要求】 了解Python中面向对象程序设计的基本方法，包括类的定义与使用、类的属性、类中的", "\n特殊方法。", "\n【主要考点】", "\n1. 类的定义与使用", "\n2. 类成员访问控制", "\n3. 继承与多态", "\n4. 特殊方法与运算符重载", "\n(六)文件操作", "\n【考试要求】 要求考生掌握文件的基本操作,掌握CSV、Excel文件的读取。", "\n【主要考点】", "\n1. 文件的使用:打开、读写、定位和关闭 2. 一二维数据组织:存储、处理及可视化 3. 读写CSV格式数据文件", "\n4. 读取Excel格式数据文件(pandas库)", "\n(七)模块与库", "\n【考试要求】 了解Python生态系统，掌握Python常用标准库，运用第三方库解决实际问题,包括但不限", "\n于网络爬虫、数据分析、文本处理、数据可视化、机器学习、Web应用开发、网络编程等领域。 【主要考点】", "\n     2/7", "\n\n", "  1. Python常用标准库:random、math、string、OS、time、datetime、urllib.request。 2.第三方库:Matplotlib、pandas、jieba、wordcloud、requests、BeautifulSoup4、XPath、 NumPy、Scrapy。", "\n三、考试方式", "\n机试(考试时间:105 分钟)", "\n考卷题型题量:卷面总分 100。单选题(15 题，30 分)、填空题(5 题，30 分)和操作题", "\n(程序代码挖空题)(2 题，40 分)。", "\n四、考试环境要求", "\nPython 3.7 及以上，可选装 PyScripter、Pycharm、Anaconda、VSCode 等 IDE 编程环境。", "\n五、考试样题", "\n(一)单选题(15 题，30 分) 1、下面__________不是 Python 合法标识符。", "\nA) __name32 B) name32", "\nC) __name32__ D) 32name", "\n2、关于 Python 内存管理，下面__________说法错误。", "\nA) 当 Python 运行时垃圾回收也会启动", "\nB) python 会自己管理内存，对于占用很大内存的对象，并不会马上释放 C) Python 采用了类似 Windows 内核对象一样的方式来对内存进行管理 D) Python 语言，对象的类型和内存都是在运行时确定的", "\n3、在 Python3 中，下列不支持的数字类型是__________。", "\nA) 浮点型 B) 分数 C) 复数 D) 长整型", "\n4、下列不能作为字典的键是__________。 A) 变量", "\nB) 字符 C) 元组 D) 数字", "\n5、关于单引号，双引号，三引号的说法错误的是__________。", "\nA) 单引号和双引号是等效的", "\nB) 单引号，双引号，三引号，如果要换行，需要符号(\\)，不可以直接换行 C) 三引号则可以直接换行，并且可以包含注释", "\nD) 三引号可以包含双引号，而不需要转义", "\n6、在 Python3 中下列__________语句是非法的。", "\n     3/7", "\n\n", "  A) m=(n=a+1) B) a,b=b,a", "\nC) m,n='ab' D) m,n=3,4", "\n7、在 Python3 中，关于模块说法错误的是__________。", "\nA) 模块是对象", "\nB)模块是一个 Python 文件", "\nC) 模块能定义函数和变量，但不能定义类", "\nD) 在不同的模块中可以存在相同名字的函数名和变量名", "\n8、关于变量的作用域说法错误的是__________。", "\nA) 如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量 B) Python 变量的作用域不由变量所在源代码中的位置决定", "\nC) 全局变量如果是在函数内部赋值的话，必须经过声明", "\nD) 全局变量在函数内部不经过声明也可以使用", "\n9、以下关于异常处理的描述，正确的是__________。", "\nA) try 语句中有 except 子句，但也可以有 finally 子句", "\nB) Python 中不允许利用 raise 语句由程序主动引发异常 C)引发一个不存在索引的列表元素会引发 NameError 错误 D)Python 中，可以用异常处理捕获程序中的所有错误", "\n  10、以下语句会无限循环下去的是__________。", "\n A) for n in range(1000): time.sleep(5)", "\nC) while False: continue", "\nB) while 1<10: time.sleep(10)", "\nD) while True: break", "\n11、Python 变量命名规则说法错误的是__________。", "\nA) 变量名不能包含空格，但可使用下划线来分隔其中的单词。 B) 不论是类成员变量还是全局变量，均不使用 m 或 g 前缀 C) 变量名只能包含字母、数字和下划线。以字母或数字开头 D) 变量名不应带有类型信息，因为 Python 是动态类型语言", "\n12、关于 Python 的 lambda 函数，以下选项中描述错误的是__________。", "\nA) f = lambda x,y:x+y 执行后，f 的类型为数字类型", "\nB) lambda 函数是指一类无需定义标识符(函数名)的函数或子程序", "\nC) lambda 函数可以接收任意多个参数 (包括可选参数) 并且返回单个表达式的值 D) lambda 的主体是一个表达式，而不是一个代码块", "\n13、以下选项中，不是 Python 语言保留字的是__________。 A) pass", "\nB) continue C) except D) next", "\n14、关于 Python 程序中与“缩进”有关的说法中，以下选项中不正确的是__________。", "\nA) 缩进统一为 4 个空格且强制使用", "\nB) Python 中的每一条语句都有一个缩进级别，并且缩进级别会使用栈的数据结构进行存", "\n储", "\n  4/7", "\n\n", "  C) Python 中的缩进是有语法含义的，它用来表示一个代码块 D) 一条比较长的语句也可以用缩进分成多行", "\n15、关于 Python 循环结构，以下选项中描述错误的是__________。", "\nA) 每个 continue 语句只有能力跳出当前层次的循环", "\nB) continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮", "\n循环", "\nC) break 跳出并结束当前整个循环，执行循环后的语句", "\nD) while 循环不会迭代 list 或 tuple 的元素，而是根据表达式判断循环是否结束", "\n(二)填空题(5 题，30 分)", "\n1、表达式 [x for x in [1,2,3,4,5] if x<3]的值为 1", "\n2、设列表对象 aList 的值为[3, 4, 5, 6, 7, 9, 11, 13, 15, 17]，那么 aList[3:7]得到的值是 2 3、从猫眼电影热门榜单上爬取电影信息(包括电影名、主演、上映时间、评分)，结果保存 形式为 item= [('少年的你','主演:周冬雨','上映时间:06-27',9.5),┈],那么使用 item.sort(key=lambda x:x[3],reverse=True)语句的作用是对 3 (电影名/主演/上映时间/评 分)进行 4 (升序/降序)排列", "\n4、list1 中存放李小姐结婚请帖名单，她发现把“李泓”写成了“李弘”，少写“张瀚”， “刘 斯”名字有重复，得把第一删除，请补全横线处的代码，请你帮她更正过来。", "\nlist1=['张杨华','韩冠浩','刘斯','李弘','关申海','李晓思','李思慧','刘潇斯','刘斯'] 5 ('李泓')", "\n6 ('刘斯')", "\n7 ('张瀚') print(list1)", "\n5、t_array 中存放 4╳4 的二维数组，下列程序是计算该二维数组各元素的和，请完善下列代 码。", "\nt_array=[(4,5,6,7),(8,9,10,11),(12,13,14,15),(16,17,18,19)] sum= 8", "\nfor arr in t_array:", "\nfor i in 9 : 10", "\nprint(sum)", "\n(三)操作题(程序代码挖空题)(2 题，40 分)", "\n                  5/7", "\n\n", "  1、在考试操作试题文件夹里，打开“gdpython1.py”文件，按下面的要求完成操作: 从键盘上输入一段文字，调用下列函数，能统计出该段文字的中文个数、英文个数、数", "\n字个数和标点符号的个数。请完善代码。", "\nimport string", "\ndef str_count(str):", "\ncount_en = count_dg = count_sp =count_zh = count_pu = 0 for s in str:", "\n# 统计英文字母个数 if s in string. 1 :", "\ncount_en += 1 # 统计数字个数", "\nelifs. 2 : count_dg += 1", "\n# 统计中文个数 elifs. 3 :", "\ncount_zh += 1 # 统计空格个数", "\nelif s. 4 : count_sp += 1", "\n# 统计标点符号个数 else:", "\ncount_pu += 1 print('英文字符:', count_en)", "\nprint('数字:', count_dg) print('空格:', count_sp) print('中文:', count_zh) print('标点符号:', count_pu)", "\n2、在考试操作试题文件夹里，打开“gdpython2.py”文件，按下面的要求完善列代码，生产 随机激活码。具体要求如下:", "\n(1) 使用random库，采用0x1011作为随机种子。", "\n(2) 每次产生20条激活码，且首字不能一样。每条激活码单独一行。", "\n(3) 必须包含大写字母、小写字母和数字，必需包括“!@#$%&*-”8个特殊符号中的某", "\n一个。", "\n(4) 每次激活码产生的长度为12位。", "\n(5) 不能重复。", "\n(6) 程序所产生的激活码保存在“激活码.txt”文件中。", "\nimport random", "\nrandom. 1 s=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789!@#$%&*-\" ls=[]", "\nexcludes=\"\"", "\nwhile 2 :", "\n          pwd=\"\"", "\n 6/7", "\n\n", "  for i in 3 : 4", "\nif pwd[0] in excludes:", "\n5", "\nelse:", "\nls. 6", "\nexcludes+= 7 with open('激活码.txt','w') as f:", "\nf.write('\\n'. 8 )", "\n           7/7"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个是 带参数的 python 程序文件。&lt;br /&gt;VS 应该也有对应输入参数的设置&lt;br /&gt;pycharm 是这个位置&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/969002519936117.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;比如这个这个程序命名为 work.py  &amp;#xff0c; 你要分析的文件是 doc1.txt&lt;br /&gt;一般就是去命令提示符下&amp;#xff0c; 直接运行即可。&lt;br /&gt;python work.py doc1.txt&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["如何用python %s调用程序？", ["现有一段2008年的代码，其中的运行方法为", "\n", "python %s [", "<文件名匹配式>", " [", "<更多文件名匹配式>", "...]]\n\n", "\n", "但是尝试在vscode上运行则会报错，如下图", "\n", "在新版IDLE上运行则无响应：", "\n", "\n", "请问这个代码能如何被调用？谢谢！", "\n", "附上完整代码：", "\n", " \n", "# !/usr/bin/env python", "\n", "# This file has following encoding: utf-8", "\n", "######################## 模块文档 ########################", "\n", "\"\"\"\n“%s”汉语拼音-国际音标转换工具 2.1版（2007年9月16日）\n作者：徐清白(http://xuqingbai.googlepages.com)，首发于2007年8月6日\n授权：自由软件（GNU 通用公共许可证）\n要求：必须使用 Python 2.5 或更新版本的解释器运行\n用法：python %s [<文件名匹配式> [<更多文件名匹配式>...]]\n功能：从符合每个<文件名匹配式>的所有文件或标准输入流(stdin)读取汉语拼音文稿，\n      向标准输出流(stdout)写入经过转换得到国际音标文稿。结果仅供学习参考。\n注意：<文件名匹配式> 采用 UNIX shell 风格的 glob 匹配规则\n文稿格式：<单字拼音>[[ |']<更多单字拼音>...]\n其中：<单字拼音> = <汉语拼音字母串>[<声调标号>]\n      <声调标号> 取值1-5（对应四声和轻声）\n标音风格：适度严格的IPA音素音标＋部分汉语言学界专用符号\n详细的用户文档请参看“DOC_USERSGUIDE.html”文件\n\"\"\"", "\n", "######################## 模块导入 ########################", "\n", "import", " os, re\n", "######################## 全局变量 ########################", "\n", "# 三种字符集标志", "\nGB18030, GBK, UTF8 = ", "\"gb18030\"", ", ", "\"gbk\"", ", ", "\"utf8\"", "\n", "# 字符编码页解码失败标志", "\ndecodingFailed = ", "False", "  ", "# 初始状态：关闭", "\n", "# 正则表达式替换命令元组和内部标志", "\ncmdPairTuple = ", "tuple", "()  ", "# 预备空对象", "\nPATTERN, SUBST = ", "0", ", ", "1", "  ", "# 匹配段和替换段", "\n", "# 经过编译的正则表达式对象列表", "\nreList = []  ", "# 预备空对象", "\n", "# 创建正则表达式替换命令元组的默认设置表（固定集合对象）", "\ndefaultPrefSet = ", "frozenset", "([\n    ", "### 以下各行字符串，凡行首用#号注释者均表示无效；", "\n    ", "### 凡行首未用#号注释者均有效，效用如后面注释所述：", "\n    ", "# \"NUMBER_2_BY_AR4\",                      # 数字“二”有大开口度韵腹", "\n    ", "# \"AI_INC_NEAR_OPEN_FRONT\",               # ai/uai韵腹为舌面前次开元音", "\n    ", "# \"AIR_ANR_INC_NEAR_OPEN_CENTRAL\",        # air/anr韵腹为舌面央次低元音", "\n    ", "# \"CENTRAL_A_BY_SMALLCAPS_A\",             # “央a”采用小型大写[A]标明", "\n    ", "# \"IE_YUE_INC_SMALLCAPS_E\",               # ie/yue采用小型大写[E]标明", "\n    ", "# \"IE_YUE_INC_E\",                         # ie/yue采用[e]标明（覆盖上一条）", "\n    ", "# \"IAN_YUAN_AS_AN\",                       # ian/yuan韵腹和an一样", "\n    ", "# \"ONLY_YUAN_AS_AN\",                      # 仅yuan韵腹和an一样（覆盖上一条）", "\n    ", "# \"OU_INC_SCHWA\",                         # ou/iou采用舌面央中元音韵腹", "\n    ", "# \"IONG_BY_IUNG\",                         # iong韵母采用i韵头u韵腹", "\n    ", "# \"ASPIRATE_BY_TURNED_COMMA\",             # 采用反逗号弱送气符号", "\n    ", "# \"RHOTICITY_BY_RHOTIC_HOOK\",             # 儿化韵卷舌动作采用卷舌小钩", "\n    ", "# \"ONLY_ER_BY_RHOTIC_HOOK\",               # 只有er音节卷舌动作采用卷舌小钩", "\n    ", "# \"INITIAL_R_BY_VED_RETRO_FRIC\",          # 声母r为卷舌浊擦音而非卷舌通音", "\n    ", "# \"R_TURNED_WITH_HOOK\",                   # 严格采用卷舌通音符号", "\n    ", "# \"TRANSITIONAL_SCHWA_IN_ING\",            # ing有舌面央中元音韵腹", "\n    ", "# \"TRANSITIONAL_SCHWA_IN_UEN\",            # 合口un有舌面央中元音韵腹", "\n    ", "# \"NO_TRANSITIONAL_U\",                    # bo/po/mo/fo没有[u]韵头", "\n    ", "# \"SYLLABLE_JUNCTURE_BY_PLUS\",            # 音节间断采用开音渡+号而非.号", "\n    ", "# \"HTML_SUP_TAG_FOR_TONE_VALUE\",          # 调值采用HTML上标标签格式", "\n    ", "# \"HIDE_ALL_TONE_VALUE\",                  # 隐藏所有声调转换", "\n    ", "### 以下选项仅存设想，目前尚未实现：", "\n    ", "# \"RETROFLEX_INITIAL_STANDALONE\",         # 卷舌声母可成音节而无需舌尖元音", "\n    ", "# \"ZERO_INITIAL_HAS_CONSONANT\",           # 零声母有辅音", "\n])\n", "# 正则表达式替换命令元组一揽子创建设置方案（元组，[0]位为说明）", "\nrecipeLinWang1992 = (", "U\"林焘、王理嘉《语音学教程》\"", ",\n                     ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"AI_INC_NEAR_OPEN_FRONT\"", "\n                     )\nrecipeBeidaCN2004 = (", "U\"北京大学中文系《现代汉语》（重排本）\"", ",\n                     ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n                     ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ", ", "\"IONG_BY_IUNG\"", ", ", "\"IAN_YUAN_AS_AN\"", "\n                     )\nrecipeHuangLiao2002 = (", "U\"黄伯荣、廖序东《现代汉语》（增订三版）\"", ",\n                       ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"CENTRAL_A_BY_SMALLCAPS_A\"", ",\n                       ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ", ", "\"ONLY_YUAN_AS_AN\"", ", ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ",\n                       ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "\n                       )\nrecipeYangZhou1995 = (", "U\"杨润陆、周一民《现代汉语》（北师大文学院教材）\"", ",\n                      ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n                      ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "\n                      )\nrecipeYuan2001 = (", "U\"袁家骅等《汉语方言概要》（第二版重排）\"", ",\n                  ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n                  ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ", ", "\"IAN_YUAN_AS_AN\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n                  ", "\"IE_YUE_INC_E\"", "\n                  )\nrecipeTang2002 = (", "U\"唐作藩《音韵学教程》（第三版）\"", ",\n                  ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n                  ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ", ", "\"IAN_YUAN_AS_AN\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n                  ", "\"IE_YUE_INC_E\"", ", ", "\"OU_INC_SCHWA\"", "\n                  )\n \n", "######################## 函数声明 ########################", "\n", "def", " ", "createCmdPairTuple", "(", "prefSet=defaultPrefSet", "):\n    ", "\"\"\"创建正则表达式替换命令元组\n    然后编译便于反复使用的匹配段正则表达式对象列表\n    参数prefSet是一个控制命令元组创建的选项设置序列\"\"\"", "\n    ", "### 预先处理同系列设置的覆盖关系——defaultPrefSet也可能让人动了手脚", "\n    prefSet = ", "set", "(prefSet)  ", "# 先换为可变集合副本，以防固定类型参数", "\n    ", "if", " ", "\"IE_YUE_INC_E\"", " ", "in", " prefSet ", "and", " ", "\"IE_YUE_INC_SMALLCAPS_E\"", " ", "in", " prefSet:\n        prefSet.remove(", "\"IE_YUE_INC_SMALLCAPS_E\"", ")\n    ", "if", " ", "\"ONLY_YUAN_AS_AN\"", " ", "in", " prefSet ", "and", " ", "\"IAN_YUAN_AS_AN\"", " ", "in", " prefSet:\n        prefSet.remove(", "\"IAN_YUAN_AS_AN\"", ")\n    ", "global", " cmdPairTuple\n    cmdPairTuple = (\n        ", "### 转换声母前的预处理", "\n        ", "# 音节间断与隔音符号", "\n        (", "R'([aoeiuvüê][1-5]?)([yw])'", ",  ", "# a/o/e前有元音时必须写隔音符号", "\n         ", "R\"\\1'\\2\"", "),  ", "# 标明不必写出隔音符号的音节间断", "\n        (", "R\"'\"", ", (", "R\"+\"", " ", "if", " ", "\"SYLLABLE_JUNCTURE_BY_PLUS\"", " ", "in", " prefSet ", "else", "\n                 ", "R\".\"", ")),  ", "# 音节间断（开音渡）标记", "\n        ", "# 兼容正规的印刷体字母ɡ/ɑ->g/a", "\n        (", "R\"ɡ\"", ", ", "R\"g\"", "),\n        (", "R\"ɑ\"", ", ", "R\"a\"", "),\n        ", "# 特殊的ê韵母，只能搭配零声母（“诶”字等）", "\n        (", "R\"(ê|ea)\"", ", ", "R\"ɛ\"", "),  ", "# ea是ê的GF 3006表示", "\n        ", "# 消除因可以紧邻韵腹充当声母或韵尾的辅音的歧义", "\n        (", "R\"r([aoeiu])\"", ", ", "R\"R\\1\"", "),  ", "# 声母r暂改为R，以免与卷舌标志r混淆", "\n        (", "R\"n([aoeiuvü])\"", ", ", "R\"N\\1\"", "),  ", "# 声母n暂改为N，以免与韵尾n/ng混淆", "\n        ", "# 需要排除式匹配转换的韵母", "\n        (", "R\"ng(?![aeu])\"", ", ", "R\"ŋ\"", "),  ", "# 双字母ng，后鼻音韵尾或自成音节", "\n        (", "R\"(?<![ieuyüv])e(?![inŋr])\"", ",\n         ", "R\"ɤ\"", "),  ", "# 单韵母e，此前已转换ea和声母r/n", "\n        (", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])er4\"", ",\n         (", "R\"ar4\"", " ", "if", " ", "\"NUMBER_2_BY_AR4\"", " ", "in", " prefSet ", "else", "\n          ", "R\"er4\"", ")),  ", "# 数字“二”是否有大开口度韵腹", "\n        (", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])ar4\"", ",\n         (", "R\"a˞4\"", " ", "if", " ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", " ", "in", " prefSet ", "else", "\n          ", "R\"ar4\"", ")),  ", "# 数字“二”也属于er音节，可特别选用小钩", "\n        (", "R\"a(?![ionŋ])\"", ", (", "R\"ᴀ\"", " ", "if", " ", "\"CENTRAL_A_BY_SMALLCAPS_A\"", " ", "in", " prefSet ", "else", "\n                           ", "R\"a\"", ")),  ", "# “央a”是否用小型大写[A]标明，已转换“二”", "\n        (", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])er\"", ",\n         (", "R\"ə˞\"", " ", "if", " ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", " ", "in", " prefSet ", "else", "\n          ", "R\"ər\"", ")),  ", "# 一般的卷舌单韵母er，此前已排除“二”", "\n        (", "R\"(?<![iuüv])er\"", ", ", "R\"ər\"", "),  ", "# 构成单韵母e的儿化韵的er", "\n        (", "R\"(?<=[bpmf])o(?![uŋ])\"", ",\n         (", "R\"o\"", " ", "if", " ", "\"NO_TRANSITIONAL_U\"", " ", "in", " prefSet ", "else", "\n          ", "R\"uo\"", ")),  ", "# bo/po/mo/fo是否有韵头u", "\n        ", "### 声母——无需转换m/f/n/l/s/r(但r可根据设置执行转换)", "\n        ", "# 送气清辅音声母", "\n        (", "R\"([ptk])\"", ", ", "R\"\\1ʰ\"", "),\n        (", "R\"q\"", ", ", "R\"tɕʰ\"", "),\n        (", "R\"(ch|ĉ)\"", ", ", "R\"tʂʰ\"", "),  ", "# 后者是ch的注音变体", "\n        (", "R\"c\"", ", ", "R\"tsʰ\"", "),  ", "# 此前已排除ch", "\n        ", "# 不送气清辅音声母", "\n        (", "R\"b\"", ", ", "R\"p\"", "),  ", "# 此前已排除送气的p/t/k", "\n        (", "R\"d\"", ", ", "R\"t\"", "),\n        (", "R\"g\"", ", ", "R\"k\"", "),  ", "# 此前已排除后鼻音双字母中的g，注意隔音", "\n        (", "R\"j\"", ", ", "R\"tɕ\"", "),\n        (", "R\"(zh|ẑ)\"", ", ", "R\"tʂ\"", "),  ", "# 后者是zh的注音变体", "\n        (", "R\"z\"", ", ", "R\"ts\"", "),  ", "# 此前已排除zh", "\n        ", "# 擦音声母", "\n        (", "R\"(sh|ŝ)\"", ", ", "R\"ʂ\"", "),  ", "# 后者是sh的注音变体", "\n        (", "R\"x\"", ", ", "R\"ɕ\"", "),  ", "# 声母x，排除后再转换h", "\n        (", "R\"h\"", ", ", "R\"x\"", "),  ", "# 声母h，此前已排除zh/ch/sh", "\n        ", "### 韵母", "\n        ", "# 舌尖元音韵母", "\n        (", "R\"(sʰ?)i\"", ", ", "R\"\\1ɿ\"", "),  ", "# zi/ci/si", "\n        (", "R\"([ʂR]ʰ?)i\"", ", ", "R\"\\1ʅ\"", "),  ", "# zhi/chi/shi/ri", "\n        ", "# 部分韵腹省略表示的韵母+隔音符号和韵头w/y", "\n        (", "R\"iu\"", ", ", "R\"iou\"", "),  ", "# 无需转换iou", "\n        (", "R\"ui\"", ", ", "R\"uei\"", "),  ", "# 无需转换uei", "\n        (", "R\"wu?\"", ", ", "R\"u\"", "),\n        (", "R\"yi?\"", ", ", "R\"i\"", "),  ", "# 此前已排除iu", "\n        ", "# 韵头[i]/[y]的韵母", "\n        (", "R\"iu|[üv]\"", ", ", "R\"y\"", "),  ", "# 转换ü/v，恢复yu/yue，准备yuan/yun", "\n        (", "R\"ian\"", ", (", "R\"ian\"", " ", "if", " ", "\"IAN_YUAN_AS_AN\"", " ", "in", " prefSet ", "else", "\n                   ", "R\"iɛn\"", ")),  ", "# 是否认为ian韵腹和an一样", "\n        (", "R\"yan\"", ", (", "R\"yan\"", " ", "if", " (", "\"ONLY_YUAN_AS_AN\"", " ", "in", " prefSet)\n                              ", "or", " (", "\"IAN_YUAN_AS_AN\"", " ", "in", " prefSet) ", "else", "\n                   ", "R\"yɛn\"", ")),  ", "# 是否认为yuan韵腹和an一样（覆盖上一选项）", "\n        (", "R\"(ɕʰ?)uan\"", ", (", "R\"\\1yan\"", " ", "if", " (", "\"ONLY_YUAN_AS_AN\"", " ", "in", " prefSet)\n                                     ", "or", " (", "\"IAN_YUAN_AS_AN\"", " ", "in", " prefSet) ", "else", "\n                        ", "R\"\\1yɛn\"", ")),  ", "# {j/q/x}uan，是否认为和an一样", "\n        (", "R\"(ɕʰ?)u\"", ", ", "R\"\\1y\"", "),  ", "# {j/q/x}u{e/n}韵头，此前已排除{j/q/x}uan", "\n        (", "R\"([iy])e(?!n)\"", ", (", "R\"\\1ᴇ\"", " ", "if", " ", "\"IE_YUE_INC_SMALLCAPS_E\"", " ", "in", " prefSet ", "else", "\n                            ", "R\"\\1e\"", ")),  ", "# ie/yue/üe/ve，此前已转换{j/q/x}u", "\n        (", "R\"([iy])e(?!n)\"", ", (", "R\"\\1e\"", " ", "if", " ", "\"IE_YUE_INC_E\"", " ", "in", " prefSet ", "else", "\n                            ", "R\"\\1ɛ\"", ")),  ", "# ie/yue是否采用[e]标明，此前已判断[E]", "\n        ", "# 舌面央中元音轻微过渡韵腹", "\n        (", "R\"iŋ\"", ", (", "R\"iəŋ\"", " ", "if", " ", "\"TRANSITIONAL_SCHWA_IN_ING\"", " ", "in", " prefSet ", "else", "\n                  ", "R\"iŋ\"", ")),  ", "# ing是否有舌面央中元音韵腹", "\n        (", "R\"(un|uen)\"", ", (", "R\"uən\"", " ", "if", " ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", " ", "in", " prefSet ", "else", "\n                        ", "R\"un\"", ")),  ", "# 合口un/uen过渡，此前已排除撮口[j/q/x]un", "\n        ", "# 后移的a", "\n        (", "R\"ao\"", ", ", "R\"ɑu\"", "),  ", "# 包括ao/iao，o改为u", "\n        (", "R\"aŋ\"", ", ", "R\"ɑŋ\"", "),  ", "# 包括ang/iang/uang", "\n        ", "# 韵母en/eng韵腹是舌面央中元音", "\n        (", "R\"e([nŋ])\"", ", ", "R\"ə\\1\"", "),\n        ", "# ong类韵母", "\n        (", "R\"ioŋ\"", ", (", "R\"iuŋ\"", " ", "if", " ", "\"IONG_BY_IUNG\"", " ", "in", " prefSet ", "else", "\n                   ", "R\"yŋ\"", ")),  ", "# iong的两种转换，此前yong已转换为iong", "\n        (", "R\"oŋ\"", ", ", "R\"uŋ\"", "),  ", "# ong，此前已排除iong", "\n        ", "### 儿化音变——无需转换ar/ir/ur/aur/our/yur", "\n        ", "# 舌尖元音韵母", "\n        (", "R\"[ɿʅ]r\"", ", ", "R\"ər\"", "),  ", "# {zh/ch/sh/r/z/c/s}ir", "\n        ", "# 鼻韵尾脱落和相应的韵腹元音替换", "\n        (", "R\"[aɛ][in]r\"", ", (", "R\"ɐr\"", " ", "if", " ", "\"AIR_ANR_INC_NEAR_OPEN_CENTRAL\"", " ", "in", " prefSet ", "else", "\n                         ", "R\"ar\"", ")),  ", "# air/anr韵尾脱落后的韵腹替换", "\n        (", "R\"eir|ənr\"", ", ", "R\"ər\"", "),  ", "# eir韵腹央化，韵尾脱落；enr韵尾脱落", "\n        (", "R\"([iy])r\"", ", ", "R\"\\1ər\"", "),  ", "# ir/yr增加央化韵腹", "\n        (", "R\"([iuy])nr\"", ", ", "R\"\\1ər\"", "),  ", "# inr/ynr/unr韵尾脱落后增加央化韵腹", "\n        (", "R\"iuŋr\"", ", ", "R\"iũr\"", "),  ", "# iungr(iongr的可选变换)", "\n        (", "R\"([iuy])ŋr\"", ", ", "R\"\\1ə̃r\"", "),  ", "# ingr/yngr/ungr韵尾脱落后增加央化鼻化韵腹", "\n        (", "R\"ŋr\"", ", ", "R\"̃r\"", "),  ", "# ang/eng韵尾儿化脱落后韵腹鼻化", "\n        ", "### 声母、韵母转换的善后扫尾工作", "\n        ", "# 处理儿化韵卷舌动作", "\n        (", "R\"r\"", ", (", "R\"˞\"", " ", "if", " ", "\"RHOTICITY_BY_RHOTIC_HOOK\"", " ", "in", " prefSet ", "else", "\n                 ", "R\"r\"", ")),  ", "# 是否先把儿化韵卷舌动作改为卷舌小钩", "\n        (", "R\"R\"", ", (", "R\"ʐ\"", " ", "if", " ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", " ", "in", " prefSet ", "else", "\n                 ", "R\"r\"", ")),  ", "# 恢复声母r，是否采用卷舌浊擦音表示声母r", "\n        ", "# 此前已处理完卷舌动作和声母，现在处理剩下的r字符的可选转换", "\n        (", "R\"r\"", ", (", "R\"ɻ\"", " ", "if", " ", "\"R_TURNED_WITH_HOOK\"", " ", "in", " prefSet ", "else", "\n                 ", "R\"r\"", ")),  ", "# 是否严格采用卷舌通音符号[ɻ]", "\n        ", "# 恢复声母n", "\n        (", "R\"N\"", ", ", "R\"n\"", "),  ", "# 此前已处理完单元音韵母e和ie/yue", "\n        ", "# 其他选项", "\n        (", "R\"ʰ\"", ", (", "R\"ʻ\"", " ", "if", " ", "\"ASPIRATE_BY_TURNED_COMMA\"", " ", "in", " prefSet ", "else", "\n                 ", "R\"ʰ\"", ")),  ", "# 是否采用反逗号送气符号", "\n        (", "R\"ai\"", ", (", "R\"æi\"", " ", "if", " ", "\"AI_INC_NEAR_OPEN_FRONT\"", " ", "in", " prefSet ", "else", "\n                  ", "R\"ai\"", ")),  ", "# （非儿化的）ai/uai韵腹为舌面前次开元音", "\n        (", "R\"ou\"", ", (", "R\"əu\"", " ", "if", " ", "\"OU_INC_SCHWA\"", " ", "in", " prefSet ", "else", "\n                  ", "R\"ou\"", ")),  ", "# ou/iou是否采用舌面央中元音韵腹", "\n        ", "### 声调", "\n        ", "# 先期处理", "\n        ((", "R\"[1-5]\"", " ", "if", " ", "\"HIDE_ALL_TONE_VALUE\"", " ", "in", " prefSet ", "else", "\n          ", "R\"5\"", "), ", "R\"\"", "),  ", "# 只隐藏轻声还是隐藏所有的声调转换", "\n        (", "R\"([1-4])\"", ",\n         (", "R\"<sup>\\1</sup>\"", " ", "if", " ", "\"HTML_SUP_TAG_FOR_TONE_VALUE\"", " ", "in", " prefSet ", "else", "\n          ", "R\"(\\1)\"", ")),  ", "# 隔离单个数字调号", "\n        ", "# 标出普通话调值", "\n        (", "\"([(>])1([)<])\"", ", ", "R\"\\1 55\\2\"", "),  ", "# 阴平（第一声）", "\n        (", "\"([(>])2([)<])\"", ", ", "R\"\\1 35\\2\"", "),  ", "# 阳平（第二声）", "\n        (", "\"([(>])3([)<])\"", ", ", "R\"\\1 214\\2\"", "),  ", "# 上声（第三声）", "\n        (", "\"([(>])4([)<])\"", ", ", "R\"\\1 51\\2\"", "),  ", "# 去声（第四声）", "\n        (", "\"([(>]) ([235])\"", ", ", "R\"\\1\\2\"", ")  ", "# 去掉此前标调值时加上的空格", "\n    )\n    ", "### 以上，替换命令元组创建完成！", "\n    ", "# 编译正则表达式对象，以便反复使用", "\n    ", "global", " reList\n    reList = ", "map", "(re.", "compile", ", [pair[PATTERN] ", "for", " pair ", "in", " cmdPairTuple])\n \n", "def", " ", "decodeLine", "(", "encodedLine", "):\n    ", "\"\"\"对每一行拼音字符串做字符编码页解码\"\"\"", "\n    ", "try", ":\n        decodedLine = encodedLine.decode(UTF8)\n    ", "except", " UnicodeDecodeError:  ", "# 如果不是UTF-8", "\n        ", "try", ":\n            decodedLine = encodedLine.decode(GB18030)\n        ", "except", " UnicodeDecodeError:  ", "# 如果GB-18030也不行", "\n            decodedLine = ", "\"\"", " + os.linesep  ", "# 解码失败，只能清空", "\n            ", "global", " decodingFailed\n            decodingFailed = ", "True", "  ", "# 设置字符编码页解码失败标志", "\n    ", "except", " UnicodeEncodeError:  ", "# wx中可能出现编码错误", "\n        decodedLine = encodedLine\n    ", "return", " decodedLine\n \n", "def", " ", "msgOnDecodingFailure", "(", "fileName=", "\"标准输入流\"", "):\n    ", "\"\"\"针对字符编码页解码失败的文件在事后通过标准错误流提出警告\"\"\"", "\n    ", "global", " decodingFailed\n    ", "if", " decodingFailed:  ", "# 检查上次文件处理中是否出现解码错误", "\n        sys.stderr.write((", "U\"%s 警告：%s解码失败！\"", " % (sys.argv[", "0", "], fileName)).encode(GBK) + os.linesep)\n        decodingFailed = ", "False", "  ", "# 重置字符集码页解码失败标志为关闭", "\n \n", "def", " ", "convertLine", "(", "pinyinLine", "):\n    ", "\"\"\"对每一行拼音字符串依次执行全部替换命令，像流编辑器sed一样工作\"\"\"", "\n    ", "# 以单个“#”开头的行不转换，当作注释行", "\n    ", "if", " pinyinLine.startswith(", "\"#\"", ") ", "and", " ", "not", " pinyinLine.startswith(", "\"##\"", "):\n        ", "return", " pinyinLine[", "1", ":]  ", "# 去掉开头的“#”后再返回", "\n    ", "# 以两个“#”开头的行，只保留一个“#”，然后继续", "\n    ", "if", " pinyinLine.startswith(", "\"##\"", "):\n        pinyinLine = pinyinLine[", "1", ":]\n    ipaLine = pinyinLine.lower()  ", "# 大写字母在替换过程中另有意义", "\n    ", "for", " eachRe, eachCmdPair ", "in", " ", "zip", "(reList, cmdPairTuple):\n        ipaLine = eachRe.sub(eachCmdPair[SUBST], ipaLine)\n    ", "return", " ipaLine\n \n", "def", " ", "convertPinyin2IPA", "(", "pinyinLines, linesep=", "\"\"", "):\n    ", "\"\"\"将汉语拼音文稿转换为国际音标文稿\n    参数pinyinLines是输入的字符串序列\n    参数linesep是行分隔符（对于fp.readlines()或s.splitlines(True)的输入，缺省即可）\"\"\"", "\n    ", "# 逐行处理解码和转换，有利于减少解码带来的乱码行", "\n    ipaLines = ", "map", "(convertLine, ", "map", "(decodeLine, pinyinLines))\n    ", "return", " linesep.join(ipaLines).encode(UTF8)  ", "# 必须按UTF-8再encode一下", "\n \n", "######################## 主干函数 ########################", "\n", "def", " ", "Pinyin2IPA", "(", "pinyinLines, *prefs", "):\n    ", "\"\"\"创建转换命令，并将汉语拼音文稿转换为国际音标文稿\n        参数pinyinLines可以是字符串序列或单个字符串（后者也会包装进元组）\n        参数收集元组prefs是一个控制命令元组创建的选项设置表\"\"\"", "\n    ", "# 根据设置表创建替换命令元组（设置表缺省时提供默认值）", "\n    ", "if", " ", "not", " prefs:\n        prefs = defaultPrefSet\n    createCmdPairTuple(prefs)\n    ", "# 将单个字符串包装进元组，以便逐行处理", "\n    ", "if", " ", "isinstance", "(pinyinLines, ", "str", "):\n        pinyinLines = (pinyinLines,)\n    ", "return", " convertPinyin2IPA(pinyinLines)\n \n", "######################## 直接运行 ########################", "\n", "if", " __name__ == ", "'__main__'", ":\n    ", "import", " glob, locale, sys\n    globFailMsg = ", "U\"%s 错误：参数“%s”不能匹配任何有效的文件名！\"", "+ os.linesep\n    readFailMsg = ", "U\"%s 错误：文件“%s”数据读取失败！\"", "+ os.linesep\n    ", "if", " ", "len", "(sys.argv) > ", "1", ":\n        ", "if", " sys.argv[", "1", "].lower() ", "not", " ", "in", " (", "\"/?\"", ", ", "\"/h\"", ", ", "\"--help\"", ", ", "\"-h\"", "):\n            ", "for", " eachArg ", "in", " sys.argv[", "1", ":]:  ", "# 遍历glob表达式参数", "\n                fileNameList = glob.glob(eachArg)  ", "# 考虑DOS不负责glob解析", "\n                ", "if", " ", "not", " fileNameList:\n                    sys.stderr.write(globFailMsg % (sys.argv[", "0", "], eachArg))\n                ", "else", ":\n                    ", "for", " eachFileName ", "in", " fileNameList:\n                        ", "try", ":\n                            sys.stdout.write(Pinyin2IPA(", "open", "(eachFileName, ", "'r'", ").readlines()))\n                            msgOnDecodingFailure(", "U\"文件“%s”\"", " % eachFileName)\n                        ", "except", " IOError:\n                            sys.stderr.write(readFailMsg % (sys.argv[", "0", "], eachFileName))\n        ", "else", ":  ", "# 按照本地设置的编码方式输出模块文档作为简单帮助", "\n            language_dummy, encoding = locale.getdefaultlocale()\n            ", "print", "(__doc__ % (sys.argv[", "0", "], sys.argv[", "0", "])).encode(encoding)\n    ", "else", ":\n        sys.stdout.write(Pinyin2IPA(sys.stdin.readlines()))\n        msgOnDecodingFailure()\n", "######################## 脚本结束 ########################", "\n\n\n"]], "Tag": "算法设计"}
{"Answer": "[quote]但重定向后person.jsp页面取不到request的值[/quote]\r\n一般的用法不会去重定向jsp页面，因为你的取数逻辑不会是放在jsp页面里面（如果有放那里，你的代码就很差劲了）。你的重定向应该去定向你的一个struts动做。重新去载入你的数据，这样做才是正确的。\r\n\r\n你的排序问题，自增长嘛，按ID也是行的。不过推荐你用UUID。自增长很傻的。写个排序很容易，把取出来的数据再排一下，你以后也会用得到，多花点时间写一下吧。\r\n朋友能加点分不....-_-!补充了这么多不容易啊....", "Konwledge_Point": "集合覆盖", "Question": ["struts2留言显示问题，头疼好几天了。", ["项目中用s2sh做的用户留言功能。用户登录时根据uid获取给自己的留言信息放入map中（struts2的session）并在前台遍历显示，没有问题，现在我需要将来访者新的留言顺序显示在所有留言的上面，封装好留言对象后用dao保存到数据库中，并将留言对象放入map中，返回前台显示，这是可以显示，但新增第二条留言时，会覆盖之前的一条留言。怎么解决啊，头疼死了，帮帮忙吧。", "问题补充：", "数据库中保存正常，是在显示的时候覆盖了，再有我也觉得放入session不好，会占用过多内存但该怎么做呢？", "问题补充：", "不光是留言显示的问题，还有比如添加好友后的显示好友列表这样类似的问题，其实我就是搞不清楚应该怎么保存此类信息并在前台顺序显示。eyeqq 能说详细些吗？谢谢！", "问题补充：", "没有写equals和hashCode，这两个方法有什么用？", "问题补充：", "用了request 但新增留言显示在最后，需页面刷新后才能显示在留言列表的最上面", "现在我是这样做的：", "第一步：  点击好友的链接显示好友的个人主页，此时留言列表可以正常显示，步骤如下：", "     a：点击好友链接后提交personpage.action处理（主要是获取好友对象，根据好友对象得到好友的所有留言放入request） 代码:", "personpage.action", "public class PersonPageAction extends ActionSupport {", "  private static final long serialVersionUID = 1L;", "  private String personuid;", "  private UserBusiness userBusiness;", "  public void setUserBusiness(UserBusiness userBusiness) {", "      this.userBusiness = userBusiness;", "  }", "  public String getPersonuid() {", "      return personuid;", "  }", "  public void setPersonuid(String personuid) {", "      this.personuid = personuid;", "  }", "  @Override", "  public String execute() throws Exception {", "      if(userBusiness.isGetUser(personuid)) {", "          return SUCCESS;", "      }", "      return INPUT;", "  }", "}", "UserBusiness的代码：", "public boolean isGetUser(String personuid) {", "  try {", "      //首先获取当前user对象", "User personuser = getUser(Integer.valueOf(personuid));", "HttpServletRequest request = ServletActionContext.getRequest();", "request.setAttribute(\"personfriendusers\", personfriendusers);", "request.setAttribute(\"personuser\", personuser);", "request.setAttribute(\"personguestbooks\", personuser.getGuestbooks());", "      return true;", "  } catch (Exception e) {", "  e.printStackTrace();", "  return false;", "  }", "b:好友个人主页jsp的留言显示代码：", "//留言代码：", "       <form action=\"guestbook.action\">       <textarea name=\"gcontent\" rows=\"3\" cols=\"53\">", "       ", "       <input name=\"personuserid\" type=\"hidden\" value=\"&amp;lt;s:property value=\">\"/>", "    <input type=\"submit\" value=\"留言\">", "    ", "    </form>", "//留言显示代码", "<s:iterator value=\"#request.personguestbooks\" status=\"stuts\">", "\n", "      姓名：<s:property value=\"gname\">", "      时间：<s:property value=\"gtime\">", "      内容：<s:property value=\"gcontent\">", "        ", " </s:iterator>", "第二步：新添加留言：在上面个人主页上添加留言内容提交到guestbook.action（增加新留言到数据库，并且在返回到个人主页显示）", "guestbook.action代码：", "public class GuestbookAction extends ActionSupport {", "@Override", "public String execute() throws Exception {", "if(guestbookBusiness.isGuestbookAdd(personuserid,gcontent)) {", "HttpServletRequest request = ServletActionContext.getRequest();", "User personuser = (User)request.getAttribute(\"personuser\");", "request.setAttribute(\"personguestbooks\", personuser.getGuestbooks());", "          return SUCCESS;", "      }", "      return INPUT;", "  }", "GuestbookBusiness代码如下：", "public class GuestbookBusinessImpl implements GuestbookBusiness {", "public boolean isGuestbookAdd(Integer personuserid,String gcontent) {", "try {", "User personuser = userDao.get(personuserid);", "User user = (User)ActionContext.getContext().getSession().get(\"user\");", "  guestbook.setGcontent(gcontent);", "  guestbook.setGtime(new Date());", "  guestbook.setGname(user.getUsername());", "  guestbook.setUser(personuser);", "  //将留言对象加入用户留言集合", "  personuser.getGuestbooks().add(guestbook);", "  guestbookDao.addGuestbook(guestbook);", "HttpServletRequest request = ServletActionContext.getRequest();", "      //返回到Action", "  equest.setAttribute(\"personuser\", personuser);", "          return true;", "      } catch (Exception e) {", "          e.printStackTrace();", "      }", "      return false;", "  }", "此时返回的新增留言在最后，需刷新才能提前，这样写是不是有问题，该怎样做才能直接将回复的留言显示在留言列表的最上面呢？", "问题补充：", "你的personuser.guestbooks是个Set还是个List？ ", "guestbook.action中success到哪里了？", "用的是Set      success后直接回person.jsp 页面", "\"重定向\"   我去试一下 struts2好像是在struts2好像是在struts.xml配置", "问题补充：", "你好eyeqq  我去做了重定向 又有一个新问题： 从url看重定向成功，但重定向后person.jsp页面取不到request的值，不光留言的内容，其他request中的的值也取不到，但点击其他页面后再点击好友链接新加入的留言显示出来并且正常排序。（好友与留言用hibernate做的一对多关联映射，排序是按gid逆向排序，没有按时间排序）怎么回事呢？", "问题补充：", "首先谢谢你，还有加分是肯定的了，10分都给你，虽然还没有解决我的问题，但已经给了我很多好的建议。我在做一下重定向action 去数据库重新取一下，分先给了。。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;字符串前加u,后面字符串以 Unicode格式进行编码&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-built_in\"&gt;exp&lt;/span&gt; &amp;#61; U&lt;span class=\"hljs-string\"&gt;&amp;#34;我是中文字符串” &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;字符串前加r 去掉反斜杠的转移机制。&amp;#xff08;特殊字符&amp;#xff1a;即那些&amp;#xff0c;反斜杠加上对应字母&amp;#xff0c;表示对应的特殊含义的&amp;#xff0c;比如最常见的”\\n”表示换行&amp;#xff0c;”\\t”表示Tab等。 &amp;#xff09;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-built_in\"&gt;exp&lt;/span&gt; &amp;#61; r&lt;span class=\"hljs-string\"&gt;&amp;#34;inin\\nin” #表示一个普通生字符串lnininin&amp;#xff0c;而不表示换行了。&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你将加U的注释去除&lt;br /&gt;如下 &lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;U&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;对每一行拼音字符串依次执行全部替换命令&amp;#xff0c;像流编辑器sed一样工作&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n改为\n&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;对每一行拼音字符串依次执行全部替换命令&amp;#xff0c;像流编辑器sed一样工作&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;将UR 改为R&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;U&lt;span class=\"hljs-string\"&gt;R&amp;#34;N&amp;#34;&lt;/span&gt;\n改为\n&lt;span class=\"hljs-string\"&gt;R&amp;#34;N&amp;#34;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;修改后代码如下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# !/usr/bin/env python&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# This file has following encoding: utf-8&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;######################## 模块文档 ########################&lt;/span&gt;\n&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n“%s”汉语拼音-国际音标转换工具 2.1版&amp;#xff08;2007年9月16日&amp;#xff09;\n作者&amp;#xff1a;徐清白(http://xuqingbai.googlepages.com)&amp;#xff0c;首发于2007年8月6日\n授权&amp;#xff1a;自由软件&amp;#xff08;GNU 通用公共许可证&amp;#xff09;\n要求&amp;#xff1a;必须使用 Python 2.5 或更新版本的解释器运行\n用法&amp;#xff1a;python %s [&amp;lt;文件名匹配式&amp;gt; [&amp;lt;更多文件名匹配式&amp;gt;...]]\n功能&amp;#xff1a;从符合每个&amp;lt;文件名匹配式&amp;gt;的所有文件或标准输入流(stdin)读取汉语拼音文稿&amp;#xff0c;\n      向标准输出流(stdout)写入经过转换得到国际音标文稿。结果仅供学习参考。\n注意&amp;#xff1a;&amp;lt;文件名匹配式&amp;gt; 采用 UNIX shell 风格的 glob 匹配规则\n文稿格式&amp;#xff1a;&amp;lt;单字拼音&amp;gt;[[ |&amp;#39;]&amp;lt;更多单字拼音&amp;gt;...]\n其中&amp;#xff1a;&amp;lt;单字拼音&amp;gt; &amp;#61; &amp;lt;汉语拼音字母串&amp;gt;[&amp;lt;声调标号&amp;gt;]\n      &amp;lt;声调标号&amp;gt; 取值1-5&amp;#xff08;对应四声和轻声&amp;#xff09;\n标音风格&amp;#xff1a;适度严格的IPA音素音标&amp;#xff0b;部分汉语言学界专用符号\n详细的用户文档请参看“DOC_USERSGUIDE.html”文件\n&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;######################## 模块导入 ########################&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; os, re\n\n&lt;span class=\"hljs-comment\"&gt;######################## 全局变量 ########################&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 三种字符集标志&lt;/span&gt;\nGB18030, GBK, UTF8 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;gb18030&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;gbk&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 字符编码页解码失败标志&lt;/span&gt;\ndecodingFailed &amp;#61; &lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 初始状态&amp;#xff1a;关闭&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 正则表达式替换命令元组和内部标志&lt;/span&gt;\ncmdPairTuple &amp;#61; &lt;span class=\"hljs-built_in\"&gt;tuple&lt;/span&gt;()  &lt;span class=\"hljs-comment\"&gt;# 预备空对象&lt;/span&gt;\nPATTERN, SUBST &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 匹配段和替换段&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 经过编译的正则表达式对象列表&lt;/span&gt;\nreList &amp;#61; []  &lt;span class=\"hljs-comment\"&gt;# 预备空对象&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 创建正则表达式替换命令元组的默认设置表&amp;#xff08;固定集合对象&amp;#xff09;&lt;/span&gt;\ndefaultPrefSet &amp;#61; &lt;span class=\"hljs-built_in\"&gt;frozenset&lt;/span&gt;([\n    &lt;span class=\"hljs-comment\"&gt;### 以下各行字符串&amp;#xff0c;凡行首用#号注释者均表示无效&amp;#xff1b;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;### 凡行首未用#号注释者均有效&amp;#xff0c;效用如后面注释所述&amp;#xff1a;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;NUMBER_2_BY_AR4&amp;#34;,                      # 数字“二”有大开口度韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;AI_INC_NEAR_OPEN_FRONT&amp;#34;,               # ai/uai韵腹为舌面前次开元音&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;AIR_ANR_INC_NEAR_OPEN_CENTRAL&amp;#34;,        # air/anr韵腹为舌面央次低元音&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;CENTRAL_A_BY_SMALLCAPS_A&amp;#34;,             # “央a”采用小型大写[A]标明&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;IE_YUE_INC_SMALLCAPS_E&amp;#34;,               # ie/yue采用小型大写[E]标明&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;IE_YUE_INC_E&amp;#34;,                         # ie/yue采用[e]标明&amp;#xff08;覆盖上一条&amp;#xff09;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;IAN_YUAN_AS_AN&amp;#34;,                       # ian/yuan韵腹和an一样&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;ONLY_YUAN_AS_AN&amp;#34;,                      # 仅yuan韵腹和an一样&amp;#xff08;覆盖上一条&amp;#xff09;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;OU_INC_SCHWA&amp;#34;,                         # ou/iou采用舌面央中元音韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;IONG_BY_IUNG&amp;#34;,                         # iong韵母采用i韵头u韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;,             # 采用反逗号弱送气符号&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;RHOTICITY_BY_RHOTIC_HOOK&amp;#34;,             # 儿化韵卷舌动作采用卷舌小钩&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;,               # 只有er音节卷舌动作采用卷舌小钩&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;,          # 声母r为卷舌浊擦音而非卷舌通音&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;R_TURNED_WITH_HOOK&amp;#34;,                   # 严格采用卷舌通音符号&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;TRANSITIONAL_SCHWA_IN_ING&amp;#34;,            # ing有舌面央中元音韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;,            # 合口un有舌面央中元音韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;NO_TRANSITIONAL_U&amp;#34;,                    # bo/po/mo/fo没有[u]韵头&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;SYLLABLE_JUNCTURE_BY_PLUS&amp;#34;,            # 音节间断采用开音渡&amp;#43;号而非.号&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;HTML_SUP_TAG_FOR_TONE_VALUE&amp;#34;,          # 调值采用HTML上标标签格式&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;HIDE_ALL_TONE_VALUE&amp;#34;,                  # 隐藏所有声调转换&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;### 以下选项仅存设想&amp;#xff0c;目前尚未实现&amp;#xff1a;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;RETROFLEX_INITIAL_STANDALONE&amp;#34;,         # 卷舌声母可成音节而无需舌尖元音&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;ZERO_INITIAL_HAS_CONSONANT&amp;#34;,           # 零声母有辅音&lt;/span&gt;\n])\n&lt;span class=\"hljs-comment\"&gt;# 正则表达式替换命令元组一揽子创建设置方案&amp;#xff08;元组&amp;#xff0c;[0]位为说明&amp;#xff09;&lt;/span&gt;\nrecipeLinWang1992 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;林焘、王理嘉《语音学教程》&amp;#34;&lt;/span&gt;,\n                     &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;AI_INC_NEAR_OPEN_FRONT&amp;#34;&lt;/span&gt;\n                     )\nrecipeBeidaCN2004 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;北京大学中文系《现代汉语》&amp;#xff08;重排本&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                     &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;,\n                     &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;IONG_BY_IUNG&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt;\n                     )\nrecipeHuangLiao2002 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;黄伯荣、廖序东《现代汉语》&amp;#xff08;增订三版&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                       &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;CENTRAL_A_BY_SMALLCAPS_A&amp;#34;&lt;/span&gt;,\n                       &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_YUAN_AS_AN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt;,\n                       &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;\n                       )\nrecipeYangZhou1995 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;杨润陆、周一民《现代汉语》&amp;#xff08;北师大文学院教材&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                      &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;,\n                      &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;\n                      )\nrecipeYuan2001 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;袁家骅等《汉语方言概要》&amp;#xff08;第二版重排&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_E&amp;#34;&lt;/span&gt;\n                  )\nrecipeTang2002 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;唐作藩《音韵学教程》&amp;#xff08;第三版&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_E&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;OU_INC_SCHWA&amp;#34;&lt;/span&gt;\n                  )\n\n\n&lt;span class=\"hljs-comment\"&gt;######################## 函数声明 ########################&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;createCmdPairTuple&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;prefSet&amp;#61;defaultPrefSet&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;创建正则表达式替换命令元组\n    然后编译便于反复使用的匹配段正则表达式对象列表\n    参数prefSet是一个控制命令元组创建的选项设置序列&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;### 预先处理同系列设置的覆盖关系——defaultPrefSet也可能让人动了手脚&lt;/span&gt;\n    prefSet &amp;#61; &lt;span class=\"hljs-built_in\"&gt;set&lt;/span&gt;(prefSet)  &lt;span class=\"hljs-comment\"&gt;# 先换为可变集合副本&amp;#xff0c;以防固定类型参数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_E&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_SMALLCAPS_E&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet:\n        prefSet.remove(&lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_SMALLCAPS_E&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet:\n        prefSet.remove(&lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;global&lt;/span&gt; cmdPairTuple\n    cmdPairTuple &amp;#61; (\n        &lt;span class=\"hljs-comment\"&gt;### 转换声母前的预处理&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 音节间断与隔音符号&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#39;([aoeiuvüê][1-5]?)([yw])&amp;#39;&lt;/span&gt;,  &lt;span class=\"hljs-comment\"&gt;# a/o/e前有元音时必须写隔音符号&lt;/span&gt;\n         &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1&amp;#39;\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 标明不必写出隔音符号的音节间断&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;&amp;#43;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;SYLLABLE_JUNCTURE_BY_PLUS&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;.&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 音节间断&amp;#xff08;开音渡&amp;#xff09;标记&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 兼容正规的印刷体字母ɡ/ɑ-&amp;gt;g/a&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ɡ&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;g&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ɑ&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;a&amp;#34;&lt;/span&gt;),\n        &lt;span class=\"hljs-comment\"&gt;# 特殊的ê韵母&amp;#xff0c;只能搭配零声母&amp;#xff08;“诶”字等&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(ê|ea)&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɛ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ea是ê的GF 3006表示&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 消除因可以紧邻韵腹充当声母或韵尾的辅音的歧义&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;r([aoeiu])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;R\\1&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 声母r暂改为R&amp;#xff0c;以免与卷舌标志r混淆&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;n([aoeiuvü])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;N\\1&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 声母n暂改为N&amp;#xff0c;以免与韵尾n/ng混淆&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 需要排除式匹配转换的韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ng(?![aeu])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ŋ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 双字母ng&amp;#xff0c;后鼻音韵尾或自成音节&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![ieuyüv])e(?![inŋr])&amp;#34;&lt;/span&gt;,\n         &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɤ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 单韵母e&amp;#xff0c;此前已转换ea和声母r/n&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![bpmfdtNlgkhjqxzcsRiywuüv])er4&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ar4&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;NUMBER_2_BY_AR4&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;er4&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 数字“二”是否有大开口度韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![bpmfdtNlgkhjqxzcsRiywuüv])ar4&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;a˞4&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;ar4&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 数字“二”也属于er音节&amp;#xff0c;可特别选用小钩&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;a(?![ionŋ])&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ᴀ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;CENTRAL_A_BY_SMALLCAPS_A&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                           &lt;span class=\"hljs-string\"&gt;R&amp;#34;a&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# “央a”是否用小型大写[A]标明&amp;#xff0c;已转换“二”&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![bpmfdtNlgkhjqxzcsRiywuüv])er&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ə˞&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;ər&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 一般的卷舌单韵母er&amp;#xff0c;此前已排除“二”&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![iuüv])er&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 构成单韵母e的儿化韵的er&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;&amp;#61;[bpmf])o(?![uŋ])&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;o&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;uo&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# bo/po/mo/fo是否有韵头u&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 声母——无需转换m/f/n/l/s/r(但r可根据设置执行转换)&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 送气清辅音声母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([ptk])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ʰ&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;q&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tɕʰ&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(ch|ĉ)&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tʂʰ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 后者是ch的注音变体&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;c&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tsʰ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除ch&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 不送气清辅音声母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;b&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;p&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除送气的p/t/k&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;d&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;t&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;g&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;k&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除后鼻音双字母中的g&amp;#xff0c;注意隔音&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;j&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tɕ&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(zh|ẑ)&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tʂ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 后者是zh的注音变体&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;z&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ts&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除zh&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 擦音声母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(sh|ŝ)&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ʂ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 后者是sh的注音变体&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;x&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɕ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 声母x&amp;#xff0c;排除后再转换h&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;h&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;x&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 声母h&amp;#xff0c;此前已排除zh/ch/sh&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 韵母&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 舌尖元音韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(sʰ?)i&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ɿ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# zi/ci/si&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([ʂR]ʰ?)i&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ʅ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# zhi/chi/shi/ri&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 部分韵腹省略表示的韵母&amp;#43;隔音符号和韵头w/y&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iu&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;iou&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 无需转换iou&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ui&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;uei&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 无需转换uei&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;wu?&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;u&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;yi?&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;i&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除iu&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 韵头[i]/[y]的韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iu|[üv]&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;y&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 转换ü/v&amp;#xff0c;恢复yu/yue&amp;#xff0c;准备yuan/yun&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ian&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ian&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                   &lt;span class=\"hljs-string\"&gt;R&amp;#34;iɛn&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否认为ian韵腹和an一样&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;yan&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;yan&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet)\n                              &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet) &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                   &lt;span class=\"hljs-string\"&gt;R&amp;#34;yɛn&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否认为yuan韵腹和an一样&amp;#xff08;覆盖上一选项&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(ɕʰ?)uan&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1yan&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet)\n                                     &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet) &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                        &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1yɛn&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# {j/q/x}uan&amp;#xff0c;是否认为和an一样&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(ɕʰ?)u&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1y&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# {j/q/x}u{e/n}韵头&amp;#xff0c;此前已排除{j/q/x}uan&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iy])e(?!n)&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ᴇ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_SMALLCAPS_E&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                            &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1e&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# ie/yue/üe/ve&amp;#xff0c;此前已转换{j/q/x}u&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iy])e(?!n)&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1e&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_E&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                            &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ɛ&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# ie/yue是否采用[e]标明&amp;#xff0c;此前已判断[E]&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 舌面央中元音轻微过渡韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iŋ&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iəŋ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_ING&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                  &lt;span class=\"hljs-string\"&gt;R&amp;#34;iŋ&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# ing是否有舌面央中元音韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(un|uen)&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;uən&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                        &lt;span class=\"hljs-string\"&gt;R&amp;#34;un&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 合口un/uen过渡&amp;#xff0c;此前已排除撮口[j/q/x]un&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 后移的a&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ao&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɑu&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 包括ao/iao&amp;#xff0c;o改为u&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;aŋ&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɑŋ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 包括ang/iang/uang&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 韵母en/eng韵腹是舌面央中元音&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;e([nŋ])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ə\\1&amp;#34;&lt;/span&gt;),\n        &lt;span class=\"hljs-comment\"&gt;# ong类韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ioŋ&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iuŋ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IONG_BY_IUNG&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                   &lt;span class=\"hljs-string\"&gt;R&amp;#34;yŋ&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# iong的两种转换&amp;#xff0c;此前yong已转换为iong&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;oŋ&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;uŋ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ong&amp;#xff0c;此前已排除iong&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 儿化音变——无需转换ar/ir/ur/aur/our/yur&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 舌尖元音韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;[ɿʅ]r&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# {zh/ch/sh/r/z/c/s}ir&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 鼻韵尾脱落和相应的韵腹元音替换&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;[aɛ][in]r&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ɐr&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;AIR_ANR_INC_NEAR_OPEN_CENTRAL&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                         &lt;span class=\"hljs-string\"&gt;R&amp;#34;ar&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# air/anr韵尾脱落后的韵腹替换&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;eir|ənr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# eir韵腹央化&amp;#xff0c;韵尾脱落&amp;#xff1b;enr韵尾脱落&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iy])r&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ir/yr增加央化韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iuy])nr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# inr/ynr/unr韵尾脱落后增加央化韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iuŋr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;iũr&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# iungr(iongr的可选变换)&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iuy])ŋr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ə̃r&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ingr/yngr/ungr韵尾脱落后增加央化鼻化韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ŋr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;̃r&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ang/eng韵尾儿化脱落后韵腹鼻化&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 声母、韵母转换的善后扫尾工作&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 处理儿化韵卷舌动作&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;˞&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;RHOTICITY_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否先把儿化韵卷舌动作改为卷舌小钩&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;R&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ʐ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 恢复声母r&amp;#xff0c;是否采用卷舌浊擦音表示声母r&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 此前已处理完卷舌动作和声母&amp;#xff0c;现在处理剩下的r字符的可选转换&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ɻ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;R_TURNED_WITH_HOOK&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否严格采用卷舌通音符号[ɻ]&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 恢复声母n&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;N&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;n&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已处理完单元音韵母e和ie/yue&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 其他选项&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ʰ&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ʻ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;ʰ&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否采用反逗号送气符号&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ai&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;æi&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;AI_INC_NEAR_OPEN_FRONT&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                  &lt;span class=\"hljs-string\"&gt;R&amp;#34;ai&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# &amp;#xff08;非儿化的&amp;#xff09;ai/uai韵腹为舌面前次开元音&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ou&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;əu&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;OU_INC_SCHWA&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                  &lt;span class=\"hljs-string\"&gt;R&amp;#34;ou&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# ou/iou是否采用舌面央中元音韵腹&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 声调&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 先期处理&lt;/span&gt;\n        ((&lt;span class=\"hljs-string\"&gt;R&amp;#34;[1-5]&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;HIDE_ALL_TONE_VALUE&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;5&amp;#34;&lt;/span&gt;), &lt;span class=\"hljs-string\"&gt;R&amp;#34;&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 只隐藏轻声还是隐藏所有的声调转换&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([1-4])&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;&amp;lt;sup&amp;gt;\\1&amp;lt;/sup&amp;gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;HTML_SUP_TAG_FOR_TONE_VALUE&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;(\\1)&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 隔离单个数字调号&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 标出普通话调值&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;])1([)&amp;lt;])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1 55\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 阴平&amp;#xff08;第一声&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;])2([)&amp;lt;])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1 35\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 阳平&amp;#xff08;第二声&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;])3([)&amp;lt;])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1 214\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 上声&amp;#xff08;第三声&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;])4([)&amp;lt;])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1 51\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 去声&amp;#xff08;第四声&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;]) ([235])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1\\2&amp;#34;&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 去掉此前标调值时加上的空格&lt;/span&gt;\n    )\n    &lt;span class=\"hljs-comment\"&gt;### 以上&amp;#xff0c;替换命令元组创建完成&amp;#xff01;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 编译正则表达式对象&amp;#xff0c;以便反复使用&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;global&lt;/span&gt; reList\n    reList &amp;#61; &lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(re.&lt;span class=\"hljs-built_in\"&gt;compile&lt;/span&gt;, [pair[PATTERN] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; pair &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; cmdPairTuple])\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;decodeLine&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;encodedLine&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;对每一行拼音字符串做字符编码页解码&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt;:\n        decodedLine &amp;#61; encodedLine.decode(UTF8)\n    &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt; UnicodeDecodeError:  &lt;span class=\"hljs-comment\"&gt;# 如果不是UTF-8&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt;:\n            decodedLine &amp;#61; encodedLine.decode(GB18030)\n        &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt; UnicodeDecodeError:  &lt;span class=\"hljs-comment\"&gt;# 如果GB-18030也不行&lt;/span&gt;\n            decodedLine &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt; &amp;#43; os.linesep  &lt;span class=\"hljs-comment\"&gt;# 解码失败&amp;#xff0c;只能清空&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;global&lt;/span&gt; decodingFailed\n            decodingFailed &amp;#61; &lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 设置字符编码页解码失败标志&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt; UnicodeEncodeError:  &lt;span class=\"hljs-comment\"&gt;# wx中可能出现编码错误&lt;/span&gt;\n        decodedLine &amp;#61; encodedLine\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; decodedLine\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;msgOnDecodingFailure&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;fileName&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;标准输入流&amp;#34;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;针对字符编码页解码失败的文件在事后通过标准错误流提出警告&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;global&lt;/span&gt; decodingFailed\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; decodingFailed:  &lt;span class=\"hljs-comment\"&gt;# 检查上次文件处理中是否出现解码错误&lt;/span&gt;\n        sys.stderr.write((&lt;span class=\"hljs-string\"&gt;U&amp;#34;%s 警告&amp;#xff1a;%s解码失败&amp;#xff01;&amp;#34;&lt;/span&gt; % (sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], fileName)).encode(GBK) &amp;#43; os.linesep)\n        decodingFailed &amp;#61; &lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 重置字符集码页解码失败标志为关闭&lt;/span&gt;\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;convertLine&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;pinyinLine&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;对每一行拼音字符串依次执行全部替换命令&amp;#xff0c;像流编辑器sed一样工作&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 以单个“#”开头的行不转换&amp;#xff0c;当作注释行&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; pinyinLine.startswith(&lt;span class=\"hljs-string\"&gt;&amp;#34;#&amp;#34;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; pinyinLine.startswith(&lt;span class=\"hljs-string\"&gt;&amp;#34;##&amp;#34;&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; pinyinLine[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:]  &lt;span class=\"hljs-comment\"&gt;# 去掉开头的“#”后再返回&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 以两个“#”开头的行&amp;#xff0c;只保留一个“#”&amp;#xff0c;然后继续&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; pinyinLine.startswith(&lt;span class=\"hljs-string\"&gt;&amp;#34;##&amp;#34;&lt;/span&gt;):\n        pinyinLine &amp;#61; pinyinLine[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:]\n    ipaLine &amp;#61; pinyinLine.lower()  &lt;span class=\"hljs-comment\"&gt;# 大写字母在替换过程中另有意义&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; eachRe, eachCmdPair &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;zip&lt;/span&gt;(reList, cmdPairTuple):\n        ipaLine &amp;#61; eachRe.sub(eachCmdPair[SUBST], ipaLine)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ipaLine\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;convertPinyin2IPA&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;pinyinLines, linesep&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;将汉语拼音文稿转换为国际音标文稿\n    参数pinyinLines是输入的字符串序列\n    参数linesep是行分隔符&amp;#xff08;对于fp.readlines()或s.splitlines(True)的输入&amp;#xff0c;缺省即可&amp;#xff09;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 逐行处理解码和转换&amp;#xff0c;有利于减少解码带来的乱码行&lt;/span&gt;\n    ipaLines &amp;#61; &lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(convertLine, &lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(decodeLine, pinyinLines))\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; linesep.join(ipaLines).encode(UTF8)  &lt;span class=\"hljs-comment\"&gt;# 必须按UTF-8再encode一下&lt;/span&gt;\n\n\n&lt;span class=\"hljs-comment\"&gt;######################## 主干函数 ########################&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;Pinyin2IPA&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;pinyinLines, *prefs&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;创建转换命令&amp;#xff0c;并将汉语拼音文稿转换为国际音标文稿\n        参数pinyinLines可以是字符串序列或单个字符串&amp;#xff08;后者也会包装进元组&amp;#xff09;\n        参数收集元组prefs是一个控制命令元组创建的选项设置表&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 根据设置表创建替换命令元组&amp;#xff08;设置表缺省时提供默认值&amp;#xff09;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; prefs:\n        prefs &amp;#61; defaultPrefSet\n    createCmdPairTuple(prefs)\n    &lt;span class=\"hljs-comment\"&gt;# 将单个字符串包装进元组&amp;#xff0c;以便逐行处理&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;isinstance&lt;/span&gt;(pinyinLines, &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;):\n        pinyinLines &amp;#61; (pinyinLines,)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; convertPinyin2IPA(pinyinLines)\n\n\n&lt;span class=\"hljs-comment\"&gt;######################## 直接运行 ########################&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__ &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; glob, locale, sys\n\n    globFailMsg &amp;#61; &lt;span class=\"hljs-string\"&gt;U&amp;#34;%s 错误&amp;#xff1a;参数“%s”不能匹配任何有效的文件名&amp;#xff01;&amp;#34;&lt;/span&gt;&amp;#43; os.linesep\n    readFailMsg &amp;#61; &lt;span class=\"hljs-string\"&gt;U&amp;#34;%s 错误&amp;#xff1a;文件“%s”数据读取失败&amp;#xff01;&amp;#34;&lt;/span&gt;&amp;#43; os.linesep\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(sys.argv) &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; sys.argv[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].lower() &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;/?&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;/h&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;--help&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;-h&amp;#34;&lt;/span&gt;):\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; eachArg &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; sys.argv[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:]:  &lt;span class=\"hljs-comment\"&gt;# 遍历glob表达式参数&lt;/span&gt;\n                fileNameList &amp;#61; glob.glob(eachArg)  &lt;span class=\"hljs-comment\"&gt;# 考虑DOS不负责glob解析&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; fileNameList:\n                    sys.stderr.write(globFailMsg % (sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], eachArg))\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n                    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; eachFileName &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; fileNameList:\n                        &lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt;:\n                            sys.stdout.write(Pinyin2IPA(&lt;span class=\"hljs-built_in\"&gt;open&lt;/span&gt;(eachFileName, &lt;span class=\"hljs-string\"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;).readlines()))\n                            msgOnDecodingFailure(&lt;span class=\"hljs-string\"&gt;U&amp;#34;文件“%s”&amp;#34;&lt;/span&gt; % eachFileName)\n                        &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt; IOError:\n                            sys.stderr.write(readFailMsg % (sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], eachFileName))\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:  &lt;span class=\"hljs-comment\"&gt;# 按照本地设置的编码方式输出模块文档作为简单帮助&lt;/span&gt;\n            language_dummy, encoding &amp;#61; locale.getdefaultlocale()\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(__doc__ % (sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])).encode(encoding)\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        sys.stdout.write(Pinyin2IPA(sys.stdin.readlines()))\n        msgOnDecodingFailure()\n&lt;span class=\"hljs-comment\"&gt;######################## 脚本结束 ########################&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "集合覆盖", "Question": ["在python 2.5 的代码中出现的 “UR” 会导致程序错误，这是一个语法吗？应如何修改？", ["本人python初学者（只学到面向对象），在查找语言学相关资料时找到了“汉语拼音-国际音标转换工具” ，能有效进行音标转化。（", "http://py2ipa.sourceforge.net/", "）", "但是其使用的版本为python 2.5，其中cmdPairTuple函数里多次出现的UR代码意义不明且在网上也没有相关资料（107行左右），会导致程序出错。", "\n", "文件的完整代码如下：", "\n", "\n", "#!/usr/bin/env python", "\n", "# This file has following encoding: utf-8", "\n", "######################## 模块文档 ########################", "\n", "U\"\"\"\n“%s”汉语拼音-国际音标转换工具 2.1版（2007年9月16日）\n\n作者：徐清白(http://xuqingbai.googlepages.com)，首发于2007年8月6日\n授权：自由软件（GNU 通用公共许可证）\n\n要求：必须使用 Python 2.5 或更新版本的解释器运行\n\n用法：python %s [<文件名匹配式> [<更多文件名匹配式>...]]\n功能：从符合每个<文件名匹配式>的所有文件或标准输入流(stdin)读取汉语拼音文稿，\n      向标准输出流(stdout)写入经过转换得到国际音标文稿。结果仅供学习参考。\n注意：<文件名匹配式> 采用 UNIX shell 风格的 glob 匹配规则\n\n文稿格式：<单字拼音>[[ |']<更多单字拼音>...]\n其中：<单字拼音> = <汉语拼音字母串>[<声调标号>]\n      <声调标号> 取值1-5（对应四声和轻声）\n\n标音风格：适度严格的IPA音素音标＋部分汉语言学界专用符号\n\n详细的用户文档请参看“DOC_USERSGUIDE.html”文件\"\"\"", "\n", "######################## 模块导入 ########################", "\n", "import", " os, re\n", "######################## 全局变量 ########################", "\n", "# 三种字符集标志", "\nGB18030, GBK, UTF8 = ", "\"gb18030\"", ", ", "\"gbk\"", ", ", "\"utf8\"", "\n", "# 字符编码页解码失败标志", "\ndecodingFailed = ", "False", "  ", "# 初始状态：关闭", "\n", "# 正则表达式替换命令元组和内部标志", "\ncmdPairTuple = ", "tuple", "()  ", "# 预备空对象", "\nPATTERN, SUBST = ", "0", ", ", "1", "   ", "# 匹配段和替换段", "\n", "# 经过编译的正则表达式对象列表", "\nreList = []             ", "# 预备空对象", "\n", "# 创建正则表达式替换命令元组的默认设置表（固定集合对象）", "\ndefaultPrefSet = ", "frozenset", "([\n", "### 以下各行字符串，凡行首用#号注释者均表示无效；", "\n", "### 凡行首未用#号注释者均有效，效用如后面注释所述：", "\n", "# \"NUMBER_2_BY_AR4\",                      # 数字“二”有大开口度韵腹", "\n", "# \"AI_INC_NEAR_OPEN_FRONT\",               # ai/uai韵腹为舌面前次开元音", "\n", "# \"AIR_ANR_INC_NEAR_OPEN_CENTRAL\",        # air/anr韵腹为舌面央次低元音", "\n", "# \"CENTRAL_A_BY_SMALLCAPS_A\",             # “央a”采用小型大写[A]标明", "\n", "# \"IE_YUE_INC_SMALLCAPS_E\",               # ie/yue采用小型大写[E]标明", "\n", "# \"IE_YUE_INC_E\",                         # ie/yue采用[e]标明（覆盖上一条）", "\n", "# \"IAN_YUAN_AS_AN\",                       # ian/yuan韵腹和an一样", "\n", "# \"ONLY_YUAN_AS_AN\",                      # 仅yuan韵腹和an一样（覆盖上一条）", "\n", "# \"OU_INC_SCHWA\",                         # ou/iou采用舌面央中元音韵腹", "\n", "# \"IONG_BY_IUNG\",                         # iong韵母采用i韵头u韵腹", "\n", "# \"ASPIRATE_BY_TURNED_COMMA\",             # 采用反逗号弱送气符号", "\n", "# \"RHOTICITY_BY_RHOTIC_HOOK\",             # 儿化韵卷舌动作采用卷舌小钩", "\n", "# \"ONLY_ER_BY_RHOTIC_HOOK\",               # 只有er音节卷舌动作采用卷舌小钩", "\n", "# \"INITIAL_R_BY_VED_RETRO_FRIC\",          # 声母r为卷舌浊擦音而非卷舌通音", "\n", "# \"R_TURNED_WITH_HOOK\",                   # 严格采用卷舌通音符号", "\n", "# \"TRANSITIONAL_SCHWA_IN_ING\",            # ing有舌面央中元音韵腹", "\n", "# \"TRANSITIONAL_SCHWA_IN_UEN\",            # 合口un有舌面央中元音韵腹", "\n", "# \"NO_TRANSITIONAL_U\",                    # bo/po/mo/fo没有[u]韵头", "\n", "# \"SYLLABLE_JUNCTURE_BY_PLUS\",            # 音节间断采用开音渡+号而非.号", "\n", "# \"HTML_SUP_TAG_FOR_TONE_VALUE\",          # 调值采用HTML上标标签格式", "\n", "# \"HIDE_ALL_TONE_VALUE\",                  # 隐藏所有声调转换", "\n", "### 以下选项仅存设想，目前尚未实现：", "\n", "# \"RETROFLEX_INITIAL_STANDALONE\",         # 卷舌声母可成音节而无需舌尖元音", "\n", "# \"ZERO_INITIAL_HAS_CONSONANT\",           # 零声母有辅音", "\n])\n", "# 正则表达式替换命令元组一揽子创建设置方案（元组，[0]位为说明）", "\nrecipeLinWang1992 = (  ", "U\"林焘、王理嘉《语音学教程》\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"AI_INC_NEAR_OPEN_FRONT\"", "\n)\nrecipeBeidaCN2004 = (  ", "U\"北京大学中文系《现代汉语》（重排本）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ", ", "\"IONG_BY_IUNG\"", ", ", "\"IAN_YUAN_AS_AN\"", "\n)\nrecipeHuangLiao2002 = (", "U\"黄伯荣、廖序东《现代汉语》（增订三版）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"CENTRAL_A_BY_SMALLCAPS_A\"", ",\n", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ", ", "\"ONLY_YUAN_AS_AN\"", ", ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ",\n", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "\n)\nrecipeYangZhou1995 = ( ", "U\"杨润陆、周一民《现代汉语》（北师大文学院教材）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "\n)\nrecipeYuan2001 = (     ", "U\"袁家骅等《汉语方言概要》（第二版重排）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ", ", "\"IAN_YUAN_AS_AN\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n", "\"IE_YUE_INC_E\"", "\n)\nrecipeTang2002 = (     ", "U\"唐作藩《音韵学教程》（第三版）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ", ", "\"IAN_YUAN_AS_AN\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n", "\"IE_YUE_INC_E\"", ", ", "\"OU_INC_SCHWA\"", "\n)\n", "######################## 函数声明 ########################", "\n", "def", " ", "createCmdPairTuple", "(", "prefSet = defaultPrefSet", "):\n    ", "U\"\"\"创建正则表达式替换命令元组\n    然后编译便于反复使用的匹配段正则表达式对象列表\n    参数prefSet是一个控制命令元组创建的选项设置序列\"\"\"", "\n    ", "### 预先处理同系列设置的覆盖关系——defaultPrefSet也可能让人动了手脚", "\n    prefSet = ", "set", "(prefSet)           ", "# 先换为可变集合副本，以防固定类型参数", "\n    ", "if", " ", "\"IE_YUE_INC_E\"", "    ", "in", " prefSet ", "and", " ", "\"IE_YUE_INC_SMALLCAPS_E\"", " ", "in", " prefSet:\n        prefSet.remove(", "\"IE_YUE_INC_SMALLCAPS_E\"", ")\n    ", "if", " ", "\"ONLY_YUAN_AS_AN\"", " ", "in", " prefSet ", "and", " ", "\"IAN_YUAN_AS_AN\"", "         ", "in", " prefSet:\n        prefSet.remove(", "\"IAN_YUAN_AS_AN\"", ")\n    ", "global", " cmdPairTuple\n    cmdPairTuple = (\n    ", "### 转换声母前的预处理", "\n    ", "# 音节间断与隔音符号", "\n    (U", "R'([aoeiuvüê][1-5]?)([yw])'", ",   ", "# a/o/e前有元音时必须写隔音符号", "\n                    U", "R\"\\1'\\2\"", "),      ", "# 标明不必写出隔音符号的音节间断", "\n    (U", "R\"'\"", ",        (U", "R\"+\"", " ", "if", " ", "\"SYLLABLE_JUNCTURE_BY_PLUS\"", "      ", "in", " prefSet ", "else", "\n                    U", "R\".\"", ")),         ", "# 音节间断（开音渡）标记", "\n    ", "# 兼容正规的印刷体字母ɡ/ɑ->g/a", "\n    (U", "R\"ɡ\"", ",         U", "R\"g\"", "),\n    (U", "R\"ɑ\"", ",         U", "R\"a\"", "),\n    ", "# 特殊的ê韵母，只能搭配零声母（“诶”字等）", "\n    (U", "R\"(ê|ea)\"", ",    U", "R\"ɛ\"", "),          ", "# ea是ê的GF 3006表示", "\n    ", "# 消除因可以紧邻韵腹充当声母或韵尾的辅音的歧义", "\n    (U", "R\"r([aoeiu])\"", ",   U", "R\"R\\1\"", "),     ", "# 声母r暂改为R，以免与卷舌标志r混淆", "\n    (U", "R\"n([aoeiuvü])\"", ", U", "R\"N\\1\"", "),     ", "# 声母n暂改为N，以免与韵尾n/ng混淆", "\n    ", "# 需要排除式匹配转换的韵母", "\n    (U", "R\"ng(?![aeu])\"", ",  U", "R\"ŋ\"", "),       ", "# 双字母ng，后鼻音韵尾或自成音节", "\n    (U", "R\"(?<![ieuyüv])e(?![inŋr])\"", ",\n                       U", "R\"ɤ\"", "),       ", "# 单韵母e，此前已转换ea和声母r/n", "\n    (U", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])er4\"", ",\n                      (U", "R\"ar4\"", " ", "if", " ", "\"NUMBER_2_BY_AR4\"", "           ", "in", " prefSet ", "else", "\n                       U", "R\"er4\"", ")),    ", "# 数字“二”是否有大开口度韵腹", "\n    (U", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])ar4\"", ",\n                      (U", "R\"a˞4\"", " ", "if", " ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", "    ", "in", " prefSet ", "else", "\n                       U", "R\"ar4\"", ")),    ", "# 数字“二”也属于er音节，可特别选用小钩", "\n    (U", "R\"a(?![ionŋ])\"", ", (U", "R\"ᴀ\"", " ", "if", " ", "\"CENTRAL_A_BY_SMALLCAPS_A\"", "    ", "in", " prefSet ", "else", "\n                       U", "R\"a\"", ")),      ", "# “央a”是否用小型大写[A]标明，已转换“二”", "\n    (U", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])er\"", ",\n                       (U", "R\"ə˞\"", " ", "if", " ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", "    ", "in", " prefSet ", "else", "\n                        U", "R\"ər\"", ")),    ", "# 一般的卷舌单韵母er，此前已排除“二”", "\n    (U", "R\"(?<![iuüv])er\"", ", U", "R\"ər\"", "),     ", "# 构成单韵母e的儿化韵的er", "\n    (U", "R\"(?<=[bpmf])o(?![uŋ])\"", ",\n                      (U", "R\"o\"", " ", "if", " ", "\"NO_TRANSITIONAL_U\"", "           ", "in", " prefSet ", "else", "\n                       U", "R\"uo\"", ")),     ", "# bo/po/mo/fo是否有韵头u", "\n    ", "### 声母——无需转换m/f/n/l/s/r(但r可根据设置执行转换)", "\n    ", "# 送气清辅音声母", "\n    (U", "R\"([ptk])\"", ",   U", "R\"\\1ʰ\"", "),\n    (U", "R\"q\"", ",         U", "R\"tɕʰ\"", "),\n    (U", "R\"(ch|ĉ)\"", ",    U", "R\"tʂʰ\"", "),        ", "# 后者是ch的注音变体", "\n    (U", "R\"c\"", ",         U", "R\"tsʰ\"", "),        ", "# 此前已排除ch", "\n    ", "# 不送气清辅音声母", "\n    (U", "R\"b\"", ",         U", "R\"p\"", "),          ", "# 此前已排除送气的p/t/k", "\n    (U", "R\"d\"", ",         U", "R\"t\"", "),\n    (U", "R\"g\"", ",         U", "R\"k\"", "),          ", "# 此前已排除后鼻音双字母中的g，注意隔音", "\n    (U", "R\"j\"", ",         U", "R\"tɕ\"", "),\n    (U", "R\"(zh|ẑ)\"", ",    U", "R\"tʂ\"", "),         ", "# 后者是zh的注音变体", "\n    (U", "R\"z\"", ",         U", "R\"ts\"", "),         ", "# 此前已排除zh", "\n    ", "# 擦音声母", "\n    (U", "R\"(sh|ŝ)\"", ",    U", "R\"ʂ\"", "),          ", "# 后者是sh的注音变体", "\n    (U", "R\"x\"", ",         U", "R\"ɕ\"", "),          ", "# 声母x，排除后再转换h", "\n    (U", "R\"h\"", ",         U", "R\"x\"", "),          ", "# 声母h，此前已排除zh/ch/sh", "\n    ", "### 韵母", "\n    ", "# 舌尖元音韵母", "\n    (U", "R\"(sʰ?)i\"", ",    U", "R\"\\1ɿ\"", "),        ", "# zi/ci/si", "\n    (U", "R\"([ʂR]ʰ?)i\"", ", U", "R\"\\1ʅ\"", "),        ", "# zhi/chi/shi/ri", "\n    ", "# 部分韵腹省略表示的韵母+隔音符号和韵头w/y", "\n    (U", "R\"iu\"", ",        U", "R\"iou\"", "),        ", "# 无需转换iou", "\n    (U", "R\"ui\"", ",        U", "R\"uei\"", "),        ", "# 无需转换uei", "\n    (U", "R\"wu?\"", ",       U", "R\"u\"", "),\n    (U", "R\"yi?\"", ",       U", "R\"i\"", "),          ", "# 此前已排除iu", "\n    ", "# 韵头[i]/[y]的韵母", "\n    (U", "R\"iu|[üv]\"", ",   U", "R\"y\"", "),          ", "# 转换ü/v，恢复yu/yue，准备yuan/yun", "\n    (U", "R\"ian\"", ",      (U", "R\"ian\"", " ", "if", " ", "\"IAN_YUAN_AS_AN\"", "               ", "in", " prefSet ", "else", "\n                    U", "R\"iɛn\"", ")),       ", "# 是否认为ian韵腹和an一样", "\n    (U", "R\"yan\"", ",      (U", "R\"yan\"", " ", "if", " (", "\"ONLY_YUAN_AS_AN\"", "             ", "in", " prefSet)\n                            ", "or", " (", "\"IAN_YUAN_AS_AN\"", "              ", "in", " prefSet) ", "else", "\n                    U", "R\"yɛn\"", ")),       ", "# 是否认为yuan韵腹和an一样（覆盖上一选项）", "\n    (U", "R\"(ɕʰ?)uan\"", ", (U", "R\"\\1yan\"", " ", "if", " (", "\"ONLY_YUAN_AS_AN\"", "           ", "in", " prefSet)\n                              ", "or", " (", "\"IAN_YUAN_AS_AN\"", "            ", "in", " prefSet) ", "else", "\n                    U", "R\"\\1yɛn\"", ")),     ", "# {j/q/x}uan，是否认为和an一样", "\n    (U", "R\"(ɕʰ?)u\"", ",    U", "R\"\\1y\"", "),        ", "# {j/q/x}u{e/n}韵头，此前已排除{j/q/x}uan", "\n    (U", "R\"([iy])e(?!n)\"", ",  (U", "R\"\\1ᴇ\"", " ", "if", " ", "\"IE_YUE_INC_SMALLCAPS_E\"", "  ", "in", " prefSet ", "else", "\n                         U", "R\"\\1e\"", ")),  ", "# ie/yue/üe/ve，此前已转换{j/q/x}u", "\n    (U", "R\"([iy])e(?!n)\"", ",  (U", "R\"\\1e\"", " ", "if", " ", "\"IE_YUE_INC_E\"", "            ", "in", " prefSet ", "else", "\n                         U", "R\"\\1ɛ\"", ")),  ", "# ie/yue是否采用[e]标明，此前已判断[E]", "\n    ", "# 舌面央中元音轻微过渡韵腹", "\n    (U", "R\"iŋ\"", ",       (U", "R\"iəŋ\"", " ", "if", " ", "\"TRANSITIONAL_SCHWA_IN_ING\"", "    ", "in", " prefSet ", "else", "\n                    U", "R\"iŋ\"", ")),        ", "# ing是否有舌面央中元音韵腹", "\n    (U", "R\"(un|uen)\"", ", (U", "R\"uən\"", " ", "if", " ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", "    ", "in", " prefSet ", "else", "\n                    U", "R\"un\"", ")),        ", "# 合口un/uen过渡，此前已排除撮口[j/q/x]un", "\n    ", "# 后移的a", "\n    (U", "R\"ao\"", ",        U", "R\"ɑu\"", "),         ", "# 包括ao/iao，o改为u", "\n    (U", "R\"aŋ\"", ",        U", "R\"ɑŋ\"", "),         ", "# 包括ang/iang/uang", "\n    ", "# 韵母en/eng韵腹是舌面央中元音", "\n    (U", "R\"e([nŋ])\"", ",   U", "R\"ə\\1\"", "),\n    ", "# ong类韵母", "\n    (U", "R\"ioŋ\"", ",      (U", "R\"iuŋ\"", " ", "if", " ", "\"IONG_BY_IUNG\"", "                 ", "in", " prefSet ", "else", "\n                    U", "R\"yŋ\"", ")),        ", "# iong的两种转换，此前yong已转换为iong", "\n    (U", "R\"oŋ\"", ",        U", "R\"uŋ\"", "),         ", "# ong，此前已排除iong", "\n    ", "### 儿化音变——无需转换ar/ir/ur/aur/our/yur", "\n    ", "# 舌尖元音韵母", "\n    (U", "R\"[ɿʅ]r\"", ",     U", "R\"ər\"", "),         ", "# {zh/ch/sh/r/z/c/s}ir", "\n    ", "# 鼻韵尾脱落和相应的韵腹元音替换", "\n    (U", "R\"[aɛ][in]r\"", ",(U", "R\"ɐr\"", " ", "if", " ", "\"AIR_ANR_INC_NEAR_OPEN_CENTRAL\"", " ", "in", " prefSet ", "else", "\n                    U", "R\"ar\"", ")),        ", "# air/anr韵尾脱落后的韵腹替换", "\n    (U", "R\"eir|ənr\"", ",   U", "R\"ər\"", "),         ", "# eir韵腹央化，韵尾脱落；enr韵尾脱落", "\n    (U", "R\"([iy])r\"", ",   U", "R\"\\1ər\"", "),       ", "# ir/yr增加央化韵腹", "\n    (U", "R\"([iuy])nr\"", ", U", "R\"\\1ər\"", "),       ", "# inr/ynr/unr韵尾脱落后增加央化韵腹", "\n    (U", "R\"iuŋr\"", ",      U", "R\"iũr\"", "),        ", "# iungr(iongr的可选变换)", "\n    (U", "R\"([iuy])ŋr\"", ", U", "R\"\\1ə̃r\"", "),      ", "# ingr/yngr/ungr韵尾脱落后增加央化鼻化韵腹", "\n    (U", "R\"ŋr\"", ",        U", "R\"̃r\"", "),         ", "# ang/eng韵尾儿化脱落后韵腹鼻化", "\n    ", "### 声母、韵母转换的善后扫尾工作", "\n    ", "# 处理儿化韵卷舌动作", "\n    (U", "R\"r\"", ",        (U", "R\"˞\"", " ", "if", " ", "\"RHOTICITY_BY_RHOTIC_HOOK\"", "       ", "in", " prefSet ", "else", "\n                    U", "R\"r\"", ")),         ", "# 是否先把儿化韵卷舌动作改为卷舌小钩", "\n    (U", "R\"R\"", ",        (U", "R\"ʐ\"", " ", "if", " ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "    ", "in", " prefSet ", "else", " \n                    U", "R\"r\"", ")),         ", "# 恢复声母r，是否采用卷舌浊擦音表示声母r", "\n    ", "# 此前已处理完卷舌动作和声母，现在处理剩下的r字符的可选转换", "\n    (U", "R\"r\"", ",        (U", "R\"ɻ\"", " ", "if", " ", "\"R_TURNED_WITH_HOOK\"", "             ", "in", " prefSet ", "else", "\n                    U", "R\"r\"", ")),         ", "# 是否严格采用卷舌通音符号[ɻ]", "\n    ", "# 恢复声母n", "\n    (U", "R\"N\"", ",         U", "R\"n\"", "),          ", "# 此前已处理完单元音韵母e和ie/yue", "\n    ", "# 其他选项", "\n    (U", "R\"ʰ\"", ",        (U", "R\"ʻ\"", " ", "if", " ", "\"ASPIRATE_BY_TURNED_COMMA\"", "       ", "in", " prefSet ", "else", "\n                    U", "R\"ʰ\"", ")),         ", "# 是否采用反逗号送气符号", "\n    (U", "R\"ai\"", ",       (U", "R\"æi\"", " ", "if", " ", "\"AI_INC_NEAR_OPEN_FRONT\"", "        ", "in", " prefSet ", "else", "\n                    U", "R\"ai\"", ")),        ", "# （非儿化的）ai/uai韵腹为舌面前次开元音", "\n    (U", "R\"ou\"", ",       (U", "R\"əu\"", " ", "if", " ", "\"OU_INC_SCHWA\"", "                  ", "in", " prefSet ", "else", "\n                    U", "R\"ou\"", ")),        ", "# ou/iou是否采用舌面央中元音韵腹", "\n    ", "### 声调", "\n    ", "# 先期处理", "\n    ((U", "R\"[1-5]\"", " ", "if", " ", "\"HIDE_ALL_TONE_VALUE\"", "                      ", "in", " prefSet ", "else", "\n      U", "R\"5\"", "),       U", "R\"\"", "),           ", "# 只隐藏轻声还是隐藏所有的声调转换", "\n    (U", "R\"([1-4])\"", ",\n      (U", "R\"<sup>\\1</sup>\"", " ", "if", " ", "\"HTML_SUP_TAG_FOR_TONE_VALUE\"", "     ", "in", " prefSet ", "else", "\n                    U", "R\"(\\1)\"", ")),      ", "# 隔离单个数字调号", "\n    ", "# 标出普通话调值", "\n    (", "\"([(>])1([)<])\"", ", U", "R\"\\1 55\\2\"", "),  ", "# 阴平（第一声）", "\n    (", "\"([(>])2([)<])\"", ", U", "R\"\\1 35\\2\"", "),  ", "# 阳平（第二声）", "\n    (", "\"([(>])3([)<])\"", ", U", "R\"\\1 214\\2\"", "), ", "# 上声（第三声）", "\n    (", "\"([(>])4([)<])\"", ", U", "R\"\\1 51\\2\"", "),  ", "# 去声（第四声）", "\n    (", "\"([(>]) ([235])\"", ",U", "R\"\\1\\2\"", ")      ", "# 去掉此前标调值时加上的空格", "\n    )\n    ", "### 以上，替换命令元组创建完成！", "\n    ", "# 编译正则表达式对象，以便反复使用", "\n    ", "global", " reList\n    reList = ", "map", "(re.", "compile", ", [pair[PATTERN] ", "for", " pair ", "in", " cmdPairTuple])\n", "def", " ", "decodeLine", "(", "encodedLine", "):\n    ", "U\"\"\"对每一行拼音字符串做字符编码页解码\"\"\"", "\n    ", "try", ":\n        decodedLine = encodedLine.decode(UTF8)\n    ", "except", " UnicodeDecodeError:             ", "# 如果不是UTF-8", "\n        ", "try", ":\n            decodedLine = encodedLine.decode(GB18030)\n        ", "except", " UnicodeDecodeError:         ", "# 如果GB-18030也不行", "\n            decodedLine = ", "\"\"", " + os.linesep  ", "# 解码失败，只能清空", "\n            ", "global", " decodingFailed\n            decodingFailed = ", "True", "          ", "# 设置字符编码页解码失败标志", "\n    ", "except", " UnicodeEncodeError:             ", "# wx中可能出现编码错误", "\n        decodedLine = encodedLine\n    ", "return", " decodedLine\n", "def", " ", "msgOnDecodingFailure", "(", "fileName = ", "\"标准输入流\"", "):\n    ", "U\"\"\"针对字符编码页解码失败的文件在事后通过标准错误流提出警告\"\"\"", "\n    ", "global", " decodingFailed\n    ", "if", " decodingFailed:                  ", "# 检查上次文件处理中是否出现解码错误", "\n        sys.stderr.write((", "U\"%s 警告：%s解码失败！\"", "%(sys.argv[", "0", "], fileName)).encode(GBK) + os.linesep)\n        decodingFailed = ", "False", "          ", "# 重置字符集码页解码失败标志为关闭", "\n", "def", " ", "convertLine", "(", "pinyinLine", "):\n    ", "U\"\"\"对每一行拼音字符串依次执行全部替换命令，像流编辑器sed一样工作\"\"\"", "\n    ", "# 以单个“#”开头的行不转换，当作注释行", "\n    ", "if", " pinyinLine.startswith(", "\"#\"", ") ", "and", " ", "not", " pinyinLine.startswith(", "\"##\"", "):\n        ", "return", " pinyinLine[", "1", ":]           ", "# 去掉开头的“#”后再返回", "\n    ", "# 以两个“#”开头的行，只保留一个“#”，然后继续", "\n    ", "if", " pinyinLine.startswith(", "\"##\"", "):\n        pinyinLine = pinyinLine[", "1", ":]\n    ipaLine = pinyinLine.lower()        ", "# 大写字母在替换过程中另有意义", "\n    ", "for", " eachRe, eachCmdPair ", "in", " ", "zip", "(reList, cmdPairTuple):\n        ipaLine = eachRe.sub(eachCmdPair[SUBST], ipaLine)\n    ", "return", " ipaLine\n", "def", " ", "convertPinyin2IPA", "(", "pinyinLines, linesep=", "\"\"", "):\n    ", "U\"\"\"将汉语拼音文稿转换为国际音标文稿\n    参数pinyinLines是输入的字符串序列\n    参数linesep是行分隔符（对于fp.readlines()或s.splitlines(True)的输入，缺省即可）\"\"\"", "\n    ", "# 逐行处理解码和转换，有利于减少解码带来的乱码行", "\n    ipaLines = ", "map", "(convertLine, ", "map", "(decodeLine, pinyinLines))\n    ", "return", " linesep.join(ipaLines).encode(UTF8)  ", "# 必须按UTF-8再encode一下", "\n", "######################## 主干函数 ########################", "\n", "def", " ", "Pinyin2IPA", "(", "pinyinLines, *prefs", "):\n    ", "U\"\"\"创建转换命令，并将汉语拼音文稿转换为国际音标文稿\n        参数pinyinLines可以是字符串序列或单个字符串（后者也会包装进元组）\n        参数收集元组prefs是一个控制命令元组创建的选项设置表\"\"\"", "\n    ", "# 根据设置表创建替换命令元组（设置表缺省时提供默认值）", "\n    ", "if", " ", "not", " prefs:\n        prefs = defaultPrefSet\n    createCmdPairTuple(prefs)\n    ", "# 将单个字符串包装进元组，以便逐行处理", "\n    ", "if", " ", "isinstance", "(pinyinLines, ", "str", "):\n        pinyinLines = (pinyinLines, )\n    ", "return", " convertPinyin2IPA(pinyinLines)\n", "######################## 直接运行 ########################", "\n", "if", " __name__ == ", "'__main__'", ":\n    ", "import", " glob, locale, sys\n    globFailMsg = ", "U\"%s 错误：参数“%s”不能匹配任何有效的文件名！\"", ".encode(GBK) + os.linesep\n    readFailMsg = ", "U\"%s 错误：文件“%s”数据读取失败！\"", ".encode(GBK) + os.linesep\n    ", "if", " ", "len", "(sys.argv) > ", "1", ":\n        ", "if", " sys.argv[", "1", "].lower() ", "not", " ", "in", " (", "\"/?\"", ", ", "\"/h\"", ", ", "\"--help\"", ", ", "\"-h\"", "):\n            ", "for", " eachArg ", "in", " sys.argv[", "1", ":]:              ", "# 遍历glob表达式参数", "\n                fileNameList = glob.glob(eachArg)     ", "# 考虑DOS不负责glob解析", "\n                ", "if", " ", "not", " fileNameList:\n                    sys.stderr.write(globFailMsg%(sys.argv[", "0", "], eachArg))\n                ", "else", ":\n                    ", "for", " eachFileName ", "in", " fileNameList:\n                        ", "try", ":\n                            sys.stdout.write(Pinyin2IPA(", "open", "(eachFileName, ", "'r'", ").readlines()))\n                            msgOnDecodingFailure(", "U\"文件“%s”\"", "%eachFileName)\n                        ", "except", " IOError:\n                            sys.stderr.write(readFailMsg%(sys.argv[", "0", "], eachFileName))\n        ", "else", ":  ", "# 按照本地设置的编码方式输出模块文档作为简单帮助", "\n            language_dummy, encoding = locale.getdefaultlocale()\n            ", "print", " (__doc__%(sys.argv[", "0", "], sys.argv[", "0", "])).encode(encoding)\n    ", "else", ":\n        sys.stdout.write(Pinyin2IPA(sys.stdin.readlines()))\n        msgOnDecodingFailure()\n", "######################## 脚本结束 ########################", "\n", "\n", "尝试运行后会告知在cmdPairTuple函数中出现invalid syntax。", "\n", "\n", "因为不知道UR是否是语法的一部分，所以不敢贸然删除。", "\n", "请帮忙看看这个cmdPairTuple函数怎么改才能让程序正常运行，谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这文章看看&lt;a href=\"https://blog.csdn.net/qq_20210951/article/details/109309141\"&gt;https://blog.csdn.net/qq_20210951/article/details/109309141&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;还有你有没有加数据库配置&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["springboot整合mybatisPlus中报错", ["错误全部", "\n\n", "\n", "\"C:\\Program Files\\Java\\jdk1.8.0_191\\bin\\java.exe\" -XX:TieredStopAtLevel=1 -noverify -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dspring.jmx.enabled=true -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true \"-javaagent:D:\\work\\Idea\\IntelliJ IDEA 2020.1.1\\lib\\idea_rt.jar=52898:D:\\work\\Idea\\IntelliJ IDEA 2020.1.1\\bin\" -Dfile.encoding=UTF-8 -classpath \"C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\charsets.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\deploy.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\access-bridge-64.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\cldrdata.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\dnsns.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\jaccess.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\jfxrt.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\localedata.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\nashorn.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\sunec.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\sunjce_provider.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\sunmscapi.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\sunpkcs11.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\zipfs.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\javaws.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\jce.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\jfr.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\jfxswt.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\jsse.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\management-agent.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\plugin.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\resources.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\rt.jar;D:\\work\\Idea\\workSpase\\myself\\zrp-dome\\zrp-dome-mybatis\\target\\classes;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter-web\\2.2.5.RELEASE\\spring-boot-starter-web-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter\\2.2.5.RELEASE\\spring-boot-starter-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot\\2.2.5.RELEASE\\spring-boot-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter-logging\\2.2.5.RELEASE\\spring-boot-starter-logging-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\ch\\qos\\logback\\logback-classic\\1.2.3\\logback-classic-1.2.3.jar;D:\\work\\maven\\repository-ali\\ch\\qos\\logback\\logback-core\\1.2.3\\logback-core-1.2.3.jar;D:\\work\\maven\\repository-ali\\org\\apache\\logging\\log4j\\log4j-to-slf4j\\2.12.1\\log4j-to-slf4j-2.12.1.jar;D:\\work\\maven\\repository-ali\\org\\apache\\logging\\log4j\\log4j-api\\2.12.1\\log4j-api-2.12.1.jar;D:\\work\\maven\\repository-ali\\org\\slf4j\\jul-to-slf4j\\1.7.30\\jul-to-slf4j-1.7.30.jar;D:\\work\\maven\\repository-ali\\jakarta\\annotation\\jakarta.annotation-api\\1.3.5\\jakarta.annotation-api-1.3.5.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-core\\5.2.4.RELEASE\\spring-core-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-jcl\\5.2.4.RELEASE\\spring-jcl-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\yaml\\snakeyaml\\1.25\\snakeyaml-1.25.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter-json\\2.2.5.RELEASE\\spring-boot-starter-json-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\core\\jackson-databind\\2.10.2\\jackson-databind-2.10.2.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\datatype\\jackson-datatype-jdk8\\2.10.2\\jackson-datatype-jdk8-2.10.2.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\datatype\\jackson-datatype-jsr310\\2.10.2\\jackson-datatype-jsr310-2.10.2.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\module\\jackson-module-parameter-names\\2.10.2\\jackson-module-parameter-names-2.10.2.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter-tomcat\\2.2.5.RELEASE\\spring-boot-starter-tomcat-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\apache\\tomcat\\embed\\tomcat-embed-core\\9.0.31\\tomcat-embed-core-9.0.31.jar;D:\\work\\maven\\repository-ali\\org\\apache\\tomcat\\embed\\tomcat-embed-el\\9.0.31\\tomcat-embed-el-9.0.31.jar;D:\\work\\maven\\repository-ali\\org\\apache\\tomcat\\embed\\tomcat-embed-websocket\\9.0.31\\tomcat-embed-websocket-9.0.31.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter-validation\\2.2.5.RELEASE\\spring-boot-starter-validation-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\jakarta\\validation\\jakarta.validation-api\\2.0.2\\jakarta.validation-api-2.0.2.jar;D:\\work\\maven\\repository-ali\\org\\hibernate\\validator\\hibernate-validator\\6.0.18.Final\\hibernate-validator-6.0.18.Final.jar;D:\\work\\maven\\repository-ali\\org\\jboss\\logging\\jboss-logging\\3.4.1.Final\\jboss-logging-3.4.1.Final.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\classmate\\1.5.1\\classmate-1.5.1.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-web\\5.2.4.RELEASE\\spring-web-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-beans\\5.2.4.RELEASE\\spring-beans-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-webmvc\\5.2.4.RELEASE\\spring-webmvc-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-aop\\5.2.4.RELEASE\\spring-aop-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-context\\5.2.4.RELEASE\\spring-context-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-expression\\5.2.4.RELEASE\\spring-expression-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\cloud\\spring-cloud-starter-alibaba-nacos-discovery\\2.2.1.RELEASE\\spring-cloud-starter-alibaba-nacos-discovery-2.2.1.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\nacos\\nacos-client\\1.2.1\\nacos-client-1.2.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\nacos\\nacos-common\\1.2.1\\nacos-common-1.2.1.jar;D:\\work\\maven\\repository-ali\\commons-io\\commons-io\\2.2\\commons-io-2.2.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\nacos\\nacos-api\\1.2.1\\nacos-api-1.2.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\fastjson\\1.2.58\\fastjson-1.2.58.jar;D:\\work\\maven\\repository-ali\\com\\google\\guava\\guava\\22.0\\guava-22.0.jar;D:\\work\\maven\\repository-ali\\com\\google\\code\\findbugs\\jsr305\\1.3.9\\jsr305-1.3.9.jar;D:\\work\\maven\\repository-ali\\com\\google\\errorprone\\error_prone_annotations\\2.0.18\\error_prone_annotations-2.0.18.jar;D:\\work\\maven\\repository-ali\\com\\google\\j2objc\\j2objc-annotations\\1.1\\j2objc-annotations-1.1.jar;D:\\work\\maven\\repository-ali\\org\\codehaus\\mojo\\animal-sniffer-annotations\\1.14\\animal-sniffer-annotations-1.14.jar;D:\\work\\maven\\repository-ali\\commons-codec\\commons-codec\\1.13\\commons-codec-1.13.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\core\\jackson-core\\2.10.2\\jackson-core-2.10.2.jar;D:\\work\\maven\\repository-ali\\io\\prometheus\\simpleclient\\0.5.0\\simpleclient-0.5.0.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\spring\\spring-context-support\\1.0.6\\spring-context-support-1.0.6.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-commons\\2.2.2.RELEASE\\spring-cloud-commons-2.2.2.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\security\\spring-security-crypto\\5.2.2.RELEASE\\spring-security-crypto-5.2.2.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-context\\2.2.2.RELEASE\\spring-cloud-context-2.2.2.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\cloud\\spring-cloud-starter-alibaba-nacos-config\\2.2.1.RELEASE\\spring-cloud-starter-alibaba-nacos-config-2.2.1.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\cloud\\spring-cloud-starter-alibaba-sentinel\\2.2.1.RELEASE\\spring-cloud-starter-alibaba-sentinel-2.2.1.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-transport-simple-http\\1.7.1\\sentinel-transport-simple-http-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-transport-common\\1.7.1\\sentinel-transport-common-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-datasource-extension\\1.7.1\\sentinel-datasource-extension-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-annotation-aspectj\\1.7.1\\sentinel-annotation-aspectj-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-core\\1.7.1\\sentinel-core-1.7.1.jar;D:\\work\\maven\\repository-ali\\org\\aspectj\\aspectjrt\\1.9.5\\aspectjrt-1.9.5.jar;D:\\work\\maven\\repository-ali\\org\\aspectj\\aspectjweaver\\1.9.2\\aspectjweaver-1.9.2.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\cloud\\spring-cloud-circuitbreaker-sentinel\\2.2.1.RELEASE\\spring-cloud-circuitbreaker-sentinel-2.2.1.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-reactor-adapter\\1.7.1\\sentinel-reactor-adapter-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-spring-webflux-adapter\\1.7.1\\sentinel-spring-webflux-adapter-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-spring-webmvc-adapter\\1.7.1\\sentinel-spring-webmvc-adapter-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-parameter-flow-control\\1.7.1\\sentinel-parameter-flow-control-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\googlecode\\concurrentlinkedhashmap\\concurrentlinkedhashmap-lru\\1.4.2\\concurrentlinkedhashmap-lru-1.4.2.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-cluster-server-default\\1.7.1\\sentinel-cluster-server-default-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-cluster-common-default\\1.7.1\\sentinel-cluster-common-default-1.7.1.jar;D:\\work\\maven\\repository-ali\\io\\netty\\netty-handler\\4.1.45.Final\\netty-handler-4.1.45.Final.jar;D:\\work\\maven\\repository-ali\\io\\netty\\netty-common\\4.1.45.Final\\netty-common-4.1.45.Final.jar;D:\\work\\maven\\repository-ali\\io\\netty\\netty-buffer\\4.1.45.Final\\netty-buffer-4.1.45.Final.jar;D:\\work\\maven\\repository-ali\\io\\netty\\netty-transport\\4.1.45.Final\\netty-transport-4.1.45.Final.jar;D:\\work\\maven\\repository-ali\\io\\netty\\netty-resolver\\4.1.45.Final\\netty-resolver-4.1.45.Final.jar;D:\\work\\maven\\repository-ali\\io\\netty\\netty-codec\\4.1.45.Final\\netty-codec-4.1.45.Final.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-cluster-client-default\\1.7.1\\sentinel-cluster-client-default-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\cloud\\spring-cloud-alibaba-sentinel-datasource\\2.2.1.RELEASE\\spring-cloud-alibaba-sentinel-datasource-2.2.1.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\dataformat\\jackson-dataformat-xml\\2.10.2\\jackson-dataformat-xml-2.10.2.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\core\\jackson-annotations\\2.10.2\\jackson-annotations-2.10.2.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\module\\jackson-module-jaxb-annotations\\2.10.2\\jackson-module-jaxb-annotations-2.10.2.jar;D:\\work\\maven\\repository-ali\\jakarta\\xml\\bind\\jakarta.xml.bind-api\\2.3.2\\jakarta.xml.bind-api-2.3.2.jar;D:\\work\\maven\\repository-ali\\jakarta\\activation\\jakarta.activation-api\\1.2.2\\jakarta.activation-api-1.2.2.jar;D:\\work\\maven\\repository-ali\\org\\codehaus\\woodstox\\stax2-api\\4.2\\stax2-api-4.2.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\woodstox\\woodstox-core\\6.0.3\\woodstox-core-6.0.3.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-starter-openfeign\\2.2.6.RELEASE\\spring-cloud-starter-openfeign-2.2.6.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-starter\\2.2.6.RELEASE\\spring-cloud-starter-2.2.6.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\security\\spring-security-rsa\\1.0.9.RELEASE\\spring-security-rsa-1.0.9.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\bouncycastle\\bcpkix-jdk15on\\1.64\\bcpkix-jdk15on-1.64.jar;D:\\work\\maven\\repository-ali\\org\\bouncycastle\\bcprov-jdk15on\\1.64\\bcprov-jdk15on-1.64.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-openfeign-core\\2.2.6.RELEASE\\spring-cloud-openfeign-core-2.2.6.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter-aop\\2.2.5.RELEASE\\spring-boot-starter-aop-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\io\\github\\openfeign\\form\\feign-form-spring\\3.8.0\\feign-form-spring-3.8.0.jar;D:\\work\\maven\\repository-ali\\io\\github\\openfeign\\form\\feign-form\\3.8.0\\feign-form-3.8.0.jar;D:\\work\\maven\\repository-ali\\commons-fileupload\\commons-fileupload\\1.4\\commons-fileupload-1.4.jar;D:\\work\\maven\\repository-ali\\io\\github\\openfeign\\feign-core\\10.10.1\\feign-core-10.10.1.jar;D:\\work\\maven\\repository-ali\\io\\github\\openfeign\\feign-slf4j\\10.10.1\\feign-slf4j-10.10.1.jar;D:\\work\\maven\\repository-ali\\org\\slf4j\\slf4j-api\\1.7.30\\slf4j-api-1.7.30.jar;D:\\work\\maven\\repository-ali\\io\\github\\openfeign\\feign-hystrix\\10.10.1\\feign-hystrix-10.10.1.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\archaius\\archaius-core\\0.7.6\\archaius-core-0.7.6.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-starter-netflix-ribbon\\2.2.6.RELEASE\\spring-cloud-starter-netflix-ribbon-2.2.6.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-netflix-ribbon\\2.2.6.RELEASE\\spring-cloud-netflix-ribbon-2.2.6.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-netflix-archaius\\2.2.6.RELEASE\\spring-cloud-netflix-archaius-2.2.6.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-starter-netflix-archaius\\2.2.6.RELEASE\\spring-cloud-starter-netflix-archaius-2.2.6.RELEASE.jar;D:\\work\\maven\\repository-ali\\commons-configuration\\commons-configuration\\1.8\\commons-configuration-1.8.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\ribbon\\ribbon\\2.3.0\\ribbon-2.3.0.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\ribbon\\ribbon-transport\\2.3.0\\ribbon-transport-2.3.0.jar;D:\\work\\maven\\repository-ali\\io\\reactivex\\rxnetty-contexts\\0.4.9\\rxnetty-contexts-0.4.9.jar;D:\\work\\maven\\repository-ali\\io\\reactivex\\rxnetty-servo\\0.4.9\\rxnetty-servo-0.4.9.jar;D:\\work\\maven\\repository-ali\\javax\\inject\\javax.inject\\1\\javax.inject-1.jar;D:\\work\\maven\\repository-ali\\io\\reactivex\\rxnetty\\0.4.9\\rxnetty-0.4.9.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\ribbon\\ribbon-core\\2.3.0\\ribbon-core-2.3.0.jar;D:\\work\\maven\\repository-ali\\commons-lang\\commons-lang\\2.6\\commons-lang-2.6.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\ribbon\\ribbon-httpclient\\2.3.0\\ribbon-httpclient-2.3.0.jar;D:\\work\\maven\\repository-ali\\commons-collections\\commons-collections\\3.2.2\\commons-collections-3.2.2.jar;D:\\work\\maven\\repository-ali\\org\\apache\\httpcomponents\\httpclient\\4.5.11\\httpclient-4.5.11.jar;D:\\work\\maven\\repository-ali\\org\\apache\\httpcomponents\\httpcore\\4.4.13\\httpcore-4.4.13.jar;D:\\work\\maven\\repository-ali\\com\\sun\\jersey\\jersey-client\\1.19.1\\jersey-client-1.19.1.jar;D:\\work\\maven\\repository-ali\\com\\sun\\jersey\\jersey-core\\1.19.1\\jersey-core-1.19.1.jar;D:\\work\\maven\\repository-ali\\javax\\ws\\rs\\jsr311-api\\1.1.1\\jsr311-api-1.1.1.jar;D:\\work\\maven\\repository-ali\\com\\sun\\jersey\\contribs\\jersey-apache-client4\\1.19.1\\jersey-apache-client4-1.19.1.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\servo\\servo-core\\0.10.1\\servo-core-0.10.1.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\servo\\servo-internal\\0.10.1\\servo-internal-0.10.1.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\netflix-commons\\netflix-commons-util\\0.1.1\\netflix-commons-util-0.1.1.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\ribbon\\ribbon-loadbalancer\\2.3.0\\ribbon-loadbalancer-2.3.0.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\netflix-commons\\netflix-statistics\\0.1.1\\netflix-statistics-0.1.1.jar;D:\\work\\maven\\repository-ali\\io\\reactivex\\rxjava\\1.3.8\\rxjava-1.3.8.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-starter-netflix-hystrix\\2.2.2.RELEASE\\spring-cloud-starter-netflix-hystrix-2.2.2.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-netflix-hystrix\\2.2.2.RELEASE\\spring-cloud-netflix-hystrix-2.2.2.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\hystrix\\hystrix-core\\1.5.18\\hystrix-core-1.5.18.jar;D:\\work\\maven\\repository-ali\\org\\hdrhistogram\\HdrHistogram\\2.1.9\\HdrHistogram-2.1.9.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\hystrix\\hystrix-serialization\\1.5.18\\hystrix-serialization-1.5.18.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\module\\jackson-module-afterburner\\2.10.2\\jackson-module-afterburner-2.10.2.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\hystrix\\hystrix-metrics-event-stream\\1.5.18\\hystrix-metrics-event-stream-1.5.18.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\hystrix\\hystrix-javanica\\1.5.18\\hystrix-javanica-1.5.18.jar;D:\\work\\maven\\repository-ali\\org\\apache\\commons\\commons-lang3\\3.9\\commons-lang3-3.9.jar;D:\\work\\maven\\repository-ali\\org\\ow2\\asm\\asm\\5.0.4\\asm-5.0.4.jar;D:\\work\\maven\\repository-ali\\io\\reactivex\\rxjava-reactive-streams\\1.2.1\\rxjava-reactive-streams-1.2.1.jar;D:\\work\\maven\\repository-ali\\org\\reactivestreams\\reactive-streams\\1.0.3\\reactive-streams-1.0.3.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\druid\\1.1.20\\druid-1.1.20.jar;D:\\work\\maven\\repository-ali\\mysql\\mysql-connector-java\\8.0.20\\mysql-connector-java-8.0.20.jar;D:\\work\\maven\\repository-ali\\com\\google\\protobuf\\protobuf-java\\3.6.1\\protobuf-java-3.6.1.jar;D:\\work\\maven\\repository-ali\\com\\baomidou\\mybatis-plus-boot-starter\\3.4.2\\mybatis-plus-boot-starter-3.4.2.jar;D:\\work\\maven\\repository-ali\\com\\baomidou\\mybatis-plus\\3.4.2\\mybatis-plus-3.4.2.jar;D:\\work\\maven\\repository-ali\\com\\baomidou\\mybatis-plus-extension\\3.4.2\\mybatis-plus-extension-3.4.2.jar;D:\\work\\maven\\repository-ali\\com\\baomidou\\mybatis-plus-core\\3.4.2\\mybatis-plus-core-3.4.2.jar;D:\\work\\maven\\repository-ali\\com\\baomidou\\mybatis-plus-annotation\\3.4.2\\mybatis-plus-annotation-3.4.2.jar;D:\\work\\maven\\repository-ali\\com\\github\\jsqlparser\\jsqlparser\\4.0\\jsqlparser-4.0.jar;D:\\work\\maven\\repository-ali\\org\\mybatis\\mybatis\\3.5.6\\mybatis-3.5.6.jar;D:\\work\\maven\\repository-ali\\org\\mybatis\\mybatis-spring\\2.0.5\\mybatis-spring-2.0.5.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-autoconfigure\\2.2.5.RELEASE\\spring-boot-autoconfigure-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter-jdbc\\2.2.5.RELEASE\\spring-boot-starter-jdbc-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\zaxxer\\HikariCP\\3.4.2\\HikariCP-3.4.2.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-jdbc\\5.2.4.RELEASE\\spring-jdbc-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-tx\\5.2.4.RELEASE\\spring-tx-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\projectlombok\\lombok\\1.16.18\\lombok-1.16.18.jar\" com.zrp.Launcher\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::        (v2.2.5.RELEASE)\n\n2021-03-31 17:24:08.092  INFO 10920 --- [           main] com.zrp.Launcher                         : The following profiles are active: dev\n2021-03-31 17:24:08.135  WARN 10920 --- [           main] o.s.c.c.u.SpringFactoryImportSelector    : More than one implementation of @EnableCircuitBreaker (now relying on @Conditionals to pick one): [com.alibaba.cloud.sentinel.custom.SentinelCircuitBreakerConfiguration, org.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration]\n2021-03-31 17:24:08.641  INFO 10920 --- [           main] o.s.cloud.context.scope.GenericScope     : BeanFactory id=e645c3eb-3aa8-3327-bfb7-27db67f3d842\n2021-03-31 17:24:08.782  INFO 10920 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.cloud.sentinel-com.alibaba.cloud.sentinel.SentinelProperties' of type [com.alibaba.cloud.sentinel.SentinelProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\n2021-03-31 17:24:08.904  INFO 10920 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'com.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration' of type [com.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\n2021-03-31 17:24:09.074  INFO 10920 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)\n2021-03-31 17:24:09.083  INFO 10920 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n2021-03-31 17:24:09.083  INFO 10920 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]\n2021-03-31 17:24:09.169  INFO 10920 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2021-03-31 17:24:09.169  INFO 10920 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1059 ms\n2021-03-31 17:24:09.279  WARN 10920 --- [           main] c.n.c.sources.URLConfigurationSource     : No URLs will be polled as dynamic configuration sources.\n2021-03-31 17:24:09.279  INFO 10920 --- [           main] c.n.c.sources.URLConfigurationSource     : To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.\n2021-03-31 17:24:09.282  WARN 10920 --- [           main] c.n.c.sources.URLConfigurationSource     : No URLs will be polled as dynamic configuration sources.\n2021-03-31 17:24:09.282  INFO 10920 --- [           main] c.n.c.sources.URLConfigurationSource     : To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.\n2021-03-31 17:24:09.423  INFO 10920 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'\n2021-03-31 17:24:09.458  INFO 10920 --- [           main] c.a.c.s.SentinelWebAutoConfiguration     : [Sentinel Starter] register SentinelWebInterceptor with urlPatterns: [/**].\n2021-03-31 17:24:10.284  INFO 10920 --- [           main] o.s.s.c.ThreadPoolTaskScheduler          : Initializing ExecutorService 'Nacso-Watch-Task-Scheduler'\n2021-03-31 17:24:10.288  INFO 10920 --- [           main] com.alibaba.nacos.client.naming          : initializer namespace from System Property :null\n2021-03-31 17:24:10.289  INFO 10920 --- [           main] com.alibaba.nacos.client.naming          : initializer namespace from System Environment :null\n2021-03-31 17:24:10.289  INFO 10920 --- [           main] com.alibaba.nacos.client.naming          : initializer namespace from System Property :null\n2021-03-31 17:24:11.166  WARN 10920 --- [           main] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userMapper' defined in file [D:\\work\\Idea\\workSpase\\myself\\zrp-dome\\zrp-dome-mybatis\\target\\classes\\com\\zrp\\dao\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Property 'sqlSessionFactory' or 'sqlSessionTemplate' are required\n2021-03-31 17:24:11.167  INFO 10920 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'\n2021-03-31 17:24:11.180  WARN 10920 --- [           main] c.n.c.sources.URLConfigurationSource     : No URLs will be polled as dynamic configuration sources.\n2021-03-31 17:24:11.180  INFO 10920 --- [           main] c.n.c.sources.URLConfigurationSource     : To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.\n2021-03-31 17:24:11.183  INFO 10920 --- [           main] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]\n2021-03-31 17:24:11.200  INFO 10920 --- [           main] ConditionEvaluationReportLoggingListener : \n\nError starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.\n2021-03-31 17:24:11.208 ERROR 10920 --- [           main] o.s.boot.SpringApplication               : Application run failed\n\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userMapper' defined in file [D:\\work\\Idea\\workSpase\\myself\\zrp-dome\\zrp-dome-mybatis\\target\\classes\\com\\zrp\\dao\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Property 'sqlSessionFactory' or 'sqlSessionTemplate' are required\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1796) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:860) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878) ~[spring-context-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) ~[spring-context-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) ~[spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]\n\tat com.zrp.Launcher.main(Launcher.java:30) [classes/:na]\nCaused by: java.lang.IllegalArgumentException: Property 'sqlSessionFactory' or 'sqlSessionTemplate' are required\n\tat org.springframework.util.Assert.notNull(Assert.java:198) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.mybatis.spring.support.SqlSessionDaoSupport.checkDaoConfig(SqlSessionDaoSupport.java:122) ~[mybatis-spring-2.0.5.jar:2.0.5]\n\tat org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:73) ~[mybatis-spring-2.0.5.jar:2.0.5]\n\tat org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1855) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1792) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\t... 16 common frames omitted\n\n\nProcess finished with exit code 1\n", "\n\n", "\n\n", "启动类中也写@MapperScan", "\n\n", "\n\n", "下面代码结构和jar", "\n\n", "\n\n", "zrp-dome-mybatis-dev.yaml ", "\n\n", "\n", "#---------固定配置------------------\n# xml扫描，多个目录用逗号或者分号分隔(告诉 Mapper 所对应的 XML 文件位置)\nmybatis-plus:\n  mapper-locations: classpath:mybatis/*.xml\n  type-aliases-package: com.zrp.po\n \n#----------全局配置-----------------\nspring:\n  cloud:\n    nacos:\n      discovery:\n       #nacos注册中心地址\n        server-addr: 127.0.0.1:8848\n        #开发环境（dev、pro等）     \n        namespace:\n        #组名\n        group: DEFAULT_GROUP\n\n\n#---------本工程专属配置-------------------       \n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    url: jdbc:mysql://127.0.0.1/pp-shop?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true\n    username: root\n    password: root\n    druid:\n      defaultAutoCommit: false\n      defaultReadOnly: false\n      initialSize: 2\n      maxActive: 5\n      minIdle: 2\n      timeBetweenEvictionRunsMillis: 18000\n      minEvictableIdleTimeMillis: 600000\n      maxEvictableIdleTimeMillis: 1200000\n      poolPreparedStatements: true\n      maxOpenPreparedStatements: 100\n      testOnBorrow: true\n      testOnReturn: true\n      testWhileIdle: true\n      validationQuery: select 1\n      removeAbandonedOnBorrow: true\n      removeAbandoned: true\n      removeAbandonedOnMaintenance: true\n      removeAbandonedTimeout: 300\n      maxWaitMillis: 3000\n      keepalive: true\n      phyMaxUseCount: 2000\n      filters: stat,log4j2,config\n", "\n\n", "bootstrap.yml", "\n\n", " ", "\n\n", "\n", "#端口\nserver:\n  port: 8080\nspring:\n  profiles:\n    active: dev                 #配置文件 --对应配置文件集合的 spring.profiles\n  application:\n    name: zrp-dome-mybatis      #服务名字\n  main:\n    allow-bean-definition-overriding: false  #解决bean重复定义，设为true，后面定义bean会覆盖相同名字之前定义的bean\n\n\n#nacos中配置文件格式 ${spring.application.name} - ${spring.profiles.active} . ${file-extension}\n#所以这个匹配的nacos是：zrp-dome-mybatis-dev.yaml\n---\nspring:\n  profiles: dev\n  cloud:\n    nacos:\n      config:\n        server-addr: 127.0.0.1:8848       #nacos注册中心地址\n        file-extension: yaml              #文件后缀\n        group:                            # 组名\n---\n#所以这个匹配的nacos是：zrp-dome-mybatis-test.yaml\nspring:\n  profiles: test\n  cloud:\n    nacos:\n      config:\n        server-addr: zhaoruipeng.work     #nacos注册中心地址\n        file-extension: yaml              #文件后缀\n        group: DEFAULT_GROUP              # 组名"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在使用TreeNode.Tag属性时&amp;#xff0c;需要注意的是&amp;#xff0c;这个属性是object类型&amp;#xff0c;因此需要进行类型转换才能获取到正确的值。&lt;/p&gt;\n&lt;p&gt;对于存储Dictionary&amp;lt;string, string&amp;gt;类型的数据&amp;#xff0c;可以按照以下方式进行设置和获取&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;设置节点的Tag属性&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c#\"&gt;Dictionary&amp;lt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;&amp;gt; &lt;span class=\"hljs-built_in\"&gt;data&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-literal\"&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;&amp;gt;();\n&lt;span class=\"hljs-comment\"&gt;// 设置字典的键值对&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;data&lt;/span&gt;.Add(&lt;span class=\"hljs-string\"&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;value1&amp;#34;&lt;/span&gt;);\n&lt;span class=\"hljs-built_in\"&gt;data&lt;/span&gt;.Add(&lt;span class=\"hljs-string\"&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;value2&amp;#34;&lt;/span&gt;);\n&lt;span class=\"hljs-comment\"&gt;// 创建节点并设置Tag属性&lt;/span&gt;\nTreeNode node &amp;#61; &lt;span class=\"hljs-literal\"&gt;new&lt;/span&gt; TreeNode(&lt;span class=\"hljs-string\"&gt;&amp;#34;节点名称&amp;#34;&lt;/span&gt;);\nnode.&lt;span class=\"hljs-built_in\"&gt;Tag&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;data&lt;/span&gt;;\n&lt;span class=\"hljs-comment\"&gt;// 添加节点到TreeView中&lt;/span&gt;\ntreeView1.Nodes.Add(node);\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;获取节点的Tag属性&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c#\"&gt;&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;treeView1_MouseUp&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;span class=\"hljs-built_in\"&gt;object&lt;/span&gt; sender, MouseEventArgs e&lt;/span&gt;)\n{\n    &lt;span class=\"hljs-comment\"&gt;// 获取选中的节点&lt;/span&gt;\n    &lt;span class=\"hljs-title class_\"&gt;TreeNode&lt;/span&gt; selectedNode &amp;#61; treeView1.&lt;span class=\"hljs-property\"&gt;SelectedNode&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (selectedNode &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;null&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;// 判断Tag属性是否为null&amp;#xff0c;并进行类型转换&lt;/span&gt;\n    &lt;span class=\"hljs-title class_\"&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;&amp;gt; data &amp;#61; selectedNode.&lt;span class=\"hljs-property\"&gt;Tag&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;&amp;gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (data &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;null&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;// 根据键名获取字典中的值&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; value1 &amp;#61; data[&lt;span class=\"hljs-string\"&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;];\n    &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; value2 &amp;#61; data[&lt;span class=\"hljs-string\"&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;];\n    &lt;span class=\"hljs-comment\"&gt;// 输出结果&lt;/span&gt;\n    &lt;span class=\"hljs-title class_\"&gt;MessageBox&lt;/span&gt;.&lt;span class=\"hljs-title class_\"&gt;Show&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;value1: &amp;#34;&lt;/span&gt; &amp;#43; value1 &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;, value2: &amp;#34;&lt;/span&gt; &amp;#43; value2);\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;需要注意的是&amp;#xff0c;在设置和获取Tag属性时&amp;#xff0c;需要确保所赋值的对象和获取的对象是同一个&amp;#xff0c;否则可能会导致空值或类型转换异常。&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["TreeView问题", ["在做C#winform的TreeView并使用XML存储TreeView的信息，将TreeNode.Tag赋为了Dictionary<string, string>,希望能够在TreeView中能存储一些数据，但是现在在使用treeView_MouseUp方法的时候Dictionary<string, string>的对象一直是null。请给解决下，谢谢了", "这个是treeView_MouseUp方法", "\n", " ", "private", " void tree", "View1_MouseUp(", "object", " ", "sender", ", MouseEventArgs ", "e", ")", "\n        {\n\n            ", "try", "\n            {\n                Point mpt = ", "new", " ", "Point(", "e", ".X, ", "e", ".Y)", ";\n                TreeNode TreeClickNode1 = this.treeView1.", "GetNodeAt(", "mpt", ")", ";\n\n                ", "//dict = (Dictionary<string, string>)TreeClickNode1.Tag;", "\n                ", "// string str= TreeClickNode1.Tag.ToString();", "\n                ", "// String str1=str;", "\n\n                ", "if", " (TreeClickNode1 != null)\n                {\n                    dict = (Dictionary<", "string", ", ", "string", ">)TreeClickNode1.Tag;\n                    ", "CreatMenu(", "dict", "[", "\"tag\"", "])", ";\n                    ", "//CreatMenu(TreeClickNode1.Tag.ToString());", "\n                    ", "if", " (e.Button", " == ", "MouseButtons.Right)\n                    {\n                        this.contextMenuStrip.", "Show(", "this", ".", "treeView1", ", ", "mpt", ")", ";       ", "//在mpt位置实现treeview1的点击菜单栏", "\n                        ", "//this.treeView1.ContextMenu.Show(treeView1,mpt);", "\n                    }\n                }\n                ", "else", "\n                {\n                    MessageBox.", "Show(", "\"点击了\"", ")", ";\n                    contextMenuStrip.Items.", "Clear()", ";\n                }\n            }\n            catch\n            { \n            \n            }\n        }\n", "\n", "下面是全部代码，AddUnit,AddUser,AddLowest 是添加节点的form类就没有写出", "\n", "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\nusing System.Xml;\nusing System.IO;\n\nusing System.Collections;\nusing TreeView;\nusing System.Net.Sockets;\n\nnamespace GlassProcess\n{\n    public partial class DbView : Form\n    {\n       static List<string> array1 = new List<string>();\n        string filepath;\n        string menufilepath;\n        string proname;\n        public string unit;\n        public string user;\n        public string lowest;\n        public string company;\n      \n        private bool tmpBool;\n        XmlOperator xmloper;\n        bool haveUnit = false;\n        bool haveUser = false;\n        bool havelowest = false;\n\n        Dictionary<string, string> dict = new Dictionary<string, string>();\n\n        public DbView( )\n        {\n            filepath = Application.StartupPath;               ", "//", "获取应用程序的启动路径\n            ", "//m", "enufilepath = filepath + ", "\"\\\\Menu.xml\"", ";           ", "//", "菜单文件路径\n            xmloper = new XmlOperator(filepath, ", "\"Menu.xml\"", ");      ", "//", "创建XML操作类\n           \n            InitializeComponent();        ", "//", "初始化组件\n           \n        }\n\n        private void DbView_Load(object sender, EventArgs e)\n        {\n            LoadFormXml();                  ", "//", "载入数据，生成列表\n            treeView1.CheckBoxes = false;   ", "//", "关闭复选框\n        }\n\n        ", "//", "载入数据 生成列表\n        private void LoadFormXml()\n        {\n            XmlNodeList xmlNodes = xmloper.GetXmlNodeList();      ", "//", "获取XML节点列表\n            this.treeView1.BeginUpdate();                         ", "//", "更新TreeView\n            this.treeView1.Nodes.Clear();                         ", "//", "清空TreeView节点\n            XmlNode2TreeNode(xmlNodes, this.treeView1.Nodes);     ", "//", "节点转换为TreeView节点\n            this.treeView1.EndUpdate();                           ", "//", "结束更新TreeView\n            ExpandRoot(this.treeView1.Nodes);                     ", "//", "展开TreeView节点\n         }\n\n        ", "//", "展开节点\n        private void ExpandRoot(TreeNodeCollection treeNodes)\n        {\n            foreach (TreeNode treeNode ", "in", " treeNodes)\n            {\n                ", "if", " (dict[", "\"tag\"", "].Equals(", "\"root\"", "))      ", "//", "如果是根节点\n                {\n                    treeNode.Expand();                           ", "//", "展开节点\n                }\n                ", "else", " ", "if", " (dict[", "\"tag\"", "].Equals(", "\"area\"", "))  ", "//", "如果是区域节点\n                {\n                    treeNode.Collapse();                          ", "//", "折叠节点\n                }\n                ", "if", " (treeNode.Nodes.Count > ", "0", ")                     ", "//", "如果有子节点\n                {\n                    ExpandRoot(treeNode.Nodes);                   ", "//", "递归展开子节点\n                }\n            }\n        }\n\n\n\n        private void XmlNode2TreeNode(XmlNodeList xmlNode, TreeNodeCollection treeNode)\n        {\n            foreach (XmlNode xmlnode ", "in", " xmlNode)\n            {\n                ", "if", " (xmlnode.NodeType != XmlNodeType.Element)    ", "//", "忽略非Element类型的节点\n                {\n                    ", "continue", ";\n                }\n                TreeNode treenode = new TreeNode();      ", "//", "新建一个TreeNode，并根据XML节点的Title属性设置文本\n                treenode.Text = xmlnode.Attributes[", "\"Title\"", "].Value;\n                ", "//", "dict.Add(", "\"tag\"", ",", "\"null\"", ");\n                ", "if", " (xmlnode.HasChildNodes)                       ", "//", "如果XML节点有子节点，则递归调用XmlNode2TreeNode方法转换子节点\n                {\n                    ", "if", " (xmlnode.ChildNodes[", "0", "].NodeType == XmlNodeType.CDATA)  ", "//", "如果第一个子节点是CDATA,则将其内容作为TreeNode的Tag\n                    {\n                        string str;\n                        str= xmlnode.ChildNodes[", "0", "].Value.ToString();\n                        dict[", "\"tag\"", "] = str;\n                        ", "if", " (dict[", "\"tag\"", "].Equals(", "\"root\"", "))\n                        {\n                            treenode.ImageIndex = ", "0", ";\n                            treenode.SelectedImageIndex = ", "0", ";\n                            treenode.Expand();\n                        }\n                        ", "else", " ", "if", " (dict[", "\"tag\"", "].Equals(", "\"area\"", "))\n                        {\n                            treenode.ImageIndex = ", "1", ";\n                            treenode.SelectedImageIndex = ", "1", ";\n                           \n                        }\n                        ", "else", " ", "if", " (dict[", "\"tag\"", "].Equals(", "\"user\"", "))\n                        {\n                            treenode.ImageIndex = ", "2", ";\n                            treenode.SelectedImageIndex = ", "2", ";\n                        }\n                        ", "else", "\n                        {\n                            treenode.ImageIndex = ", "2", ";\n                            treenode.SelectedImageIndex = ", "2", ";\n                        }\n\n                    }\n                    ", "//", "将新建的TreeNode添加到父TreeNode的Nodes 集合中\n                    XmlNode2TreeNode(xmlnode.ChildNodes, treenode.Nodes);\n                }\n                ", "//", "将新建的TreeNode添加到TreeView的节点集合中\n                treeNode.Add(treenode);\n            }\n        }\n\n        private void treeView1_MouseUp(object sender, MouseEventArgs e)\n        {\n\n            try\n            {\n                Point mpt = new Point(e.X, e.Y);\n                TreeNode TreeClickNode1 = this.treeView1.GetNodeAt(mpt);\n\n                ", "//", "dict = (Dictionary<string, string>)TreeClickNode1.Tag;\n                ", "//", " string str= TreeClickNode1.Tag.ToString();\n                ", "//", " String str1=str;\n\n                ", "if", " (TreeClickNode1 != null)\n                {\n                    dict = (Dictionary<string, string>)TreeClickNode1.Tag;\n                    CreatMenu(dict[", "\"tag\"", "]);\n                    ", "//", "CreatMenu(TreeClickNode1.Tag.ToString());\n                    ", "if", " (e.Button == MouseButtons.Right)\n                    {\n                        this.contextMenuStrip.Show(this.treeView1, mpt);       ", "//", "在mpt位置实现treeview1的点击菜单栏\n                        ", "//", "this.treeView1.ContextMenu.Show(treeView1,mpt);\n                    }\n                }\n                ", "else", "\n                {\n                    MessageBox.Show(", "\"点击了\"", ");\n                    contextMenuStrip.Items.Clear();\n                }\n            }\n            catch\n            { \n            \n            }\n        }\n\n        private void CreatMenu(string p)\n        {\n            switch (p)\n            {\n                case ", "\"root\"", ":\n                    {\n                        ", "//", "清空右键菜单\n                        this.contextMenuStrip.Items.Clear();\n                        ", "//", "创建“新增用户分区”菜单项，并添加到右键菜单\n                        ToolStripMenuItem AddArea = new ToolStripMenuItem();\n                        AddArea.Name = ", "\"新增用户分区\"", ";\n                        AddArea.Text = ", "\"新增用户分区\"", ";\n                        AddArea.Click += new System.EventHandler(AddArea_Click);\n                        contextMenuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {AddArea});\n\n                        /*\n                         上面这段代码用于在 ContextMenuStrip 控件中添加一个 ToolStripMenuItem 控件，其中 AddArea 是 ToolStripMenuItem 控件的实例。具体解释如下：\n                           - contextMenuStrip：ContextMenuStrip 控件的实例，用于显示右键菜单。\n                           - Items：ContextMenuStrip 类的属性，表示右键菜单中包含的所有 ToolStripItem 对象的集合。\n                           - AddRange：ToolStripItemCollection 类的方法，用于向 ToolStripItem 对象的集合中添加 ToolStripItem 数组的元素。\n                            - new System.Windows.Forms.ToolStripItem[]：表示创建一个 ToolStripItem 数组的实例。\n                            - {AddArea}：表示添加 ToolStripMenuItem 实例 AddArea 到 ToolStripItem 数组中。\n                             因此，这段代码的作用是将一个名为 AddArea 的 ToolStripMenuItem 添加到 ContextMenuStrip 控件中显示在右键菜单中。\n                         */\n\n                    }\n                    ", "break", ";\n\n                case ", "\"area\"", ":\n                {\n                     ", "//", "清空右键菜单\n                    this.contextMenuStrip.Items.Clear();\n                    ", "//", "创建“添加用户”菜单项，并添加到右键菜单\n                    ToolStripMenuItem AddUser = new ToolStripMenuItem();\n                    AddUser.Name = ", "\"添加用户\"", ";\n                    AddUser.Text = ", "\"添加用户\"", ";\n                    AddUser.Image = this.treeImgs.Images[", "3", "];\n                    AddUser.DisplayStyle = ToolStripItemDisplayStyle.ImageAndText;\n                    AddUser.Click += new System.EventHandler(AddUser_Click);\n                    ", "//", "创建“删除组”菜单项，并添加到右键菜单\n                    ToolStripMenuItem DeleteArea = new ToolStripMenuItem();\n                    DeleteArea.Name = ", "\"删除组\"", ";\n                    DeleteArea.Text = ", "\"删除组\"", ";\n                    DeleteArea.Click += new System.EventHandler(DeleteArea_Click);\n                    contextMenuStrip.Items.AddRange(\n                         new System.Windows.Forms.ToolStripItem[] { \n                           AddUser,DeleteArea       \n                        }\n                    );\n                }\n                ", "break", ";\n                case ", "\"user\"", ":\n                {\n                    ", "//", "清空右键菜单\n                    this.contextMenuStrip.Items.Clear();\n                    ", "//", "创建“删除用户菜单项”，并添加到右键菜单\n                    ToolStripMenuItem DeleteUser = new ToolStripMenuItem();\n\n                    DeleteUser.Name = ", "\"删除用户\"", ";\n                    DeleteUser.Text = ", "\"删除用户\"", ";\n                    DeleteUser.Click += new System.EventHandler(DeleteUser_Click);\n\n                    ToolStripMenuItem Property = new ToolStripMenuItem();\n\n                        Property.Name = ", "\"添加元件\"", ";\n                        Property.Text = ", "\"添加元件\"", ";\n                        Property.Click += new System.EventHandler(AddLowest_Click);\n\n                        contextMenuStrip.Items.AddRange(\n                         new System.Windows.Forms.ToolStripItem[] {DeleteUser,Property});\n                    }\n                ", "break", ";\n                case ", "\"lowest\"", ":\n                    {\n                        ", "//", "清空右键菜单\n                        this.contextMenuStrip.Items.Clear();\n                        ", "//", "创建“删除用户菜单项”，并添加到右键菜单\n                        ToolStripMenuItem DeleteUser = new ToolStripMenuItem();\n\n                        DeleteUser.Name = ", "\"删除元件\"", ";\n                        DeleteUser.Text = ", "\"删除元件\"", ";\n                        DeleteUser.Click += new System.EventHandler(DeleteLowest_Click);\n\n                       \n\n                        contextMenuStrip.Items.AddRange(\n                         new System.Windows.Forms.ToolStripItem[] { DeleteUser });\n                    }\n                    ", "break", ";\n\n            }\n        }\n        ", "//", "private void ContractListBakRootItem_Click(object sender, EventArgs e)\n        ", "//", "{\n            \n        ", "//", "    ", "//", "this.treeView1.ExpandAll();\n        ", "//", "}\n\n        private void ContractListBakGroupItem_Click(object sender, EventArgs e)\n        {\n            List<string> array = new List<string>();\n            foreach (TreeNode node ", "in", " this.treeView1.SelectedNode.Nodes)\n            {\n                array.Add((node.Text.Split(", "'/'", "))[", "0", "]);\n            }\n\n         \n            ", "//", "this.treeView1.ExpandAll();\n        }\n\n        ", "//", "private void ImportDataUser_Click(object sender, EventArgs e)\n        ", "//", "{\n          \n        ", "//", "    ", "//", "this.treeView1.ExpandAll();\n        ", "//", "}\n        private void SearchTreeNode(TreeNodeCollection treeNodes,string fileName)\n        {\n            ", "//", "在指定的节点集合treeNodes中搜索名为fileName的节点并删除\n            foreach (TreeNode treeNode ", "in", " treeNodes)\n            {\n                dict = (Dictionary<string, string>)treeNode.Tag;\n                ", "if", " (dict[", "\"tag\"", "] == ", "\"user\"", ")\n                {\n                    ", "if", " (treeNode.Text.Equals(fileName))\n                    {\n                        this.treeView1.Nodes.Remove(treeNode);\n                    }\n                    ", "continue", ";\n                }\n\n                ", "if", " (treeNode.Nodes.Count > ", "0", ")\n                {\n                    SearchTreeNode(treeNode.Nodes, fileName);\n                }\n            }\n        }\n        \n\n\n        private TreeNode CreateChildNodeByImport(string file)\n        {\n            ", "//", "根据导入的文件名创建一个新的树节点并返回\n\n            TreeNode node = new TreeNode(file);\n            dict = (Dictionary<string, string>)node.Tag;\n            dict[", "\"tag\"", "]= ", "\"user\"", ";\n            return node;\n        }\n\n          \n\n        ", "//", "递归查找并删除TreeView控件中指定用户的节点\n        private void RemoveUser(TreeNodeCollection treeNodes)\n        {\n            foreach (TreeNode treeNode ", "in", " treeNodes)\n            {\n                dict = (Dictionary<string, string>)treeNode.Tag;\n                ", "if", " (dict[", "\"tag\"", "].Equals(", "\"user\"", "))\n                {\n                    ", "if", " (treeNode.Text.Equals(user))\n                    {\n                        treeNode.Remove();\n                    }\n                }\n                ", "else", " ", "if", " (dict[", "\"tag\"", "].Equals(", "\"lowest\"", "))\n                {\n                    ", "if", " (treeNode.Text.Equals(lowest))\n                    {\n                        treeNode.Remove();\n                    }\n                }\n\n\n                ", "if", " (treeNode.Nodes.Count > ", "0", ")      ", "//", "treeNode.Nodes.Count表示该节点下子节点个数\n                {                                           \n                    RemoveUser(treeNode.Nodes);\n                }\n            }\n        }\n        private void AddArea_Click2(object sender, EventArgs e)     ", "//", "添加区域\n        {\n            AddUnit form = new AddUnit(this);\n            form.ShowDialog();\n            ", "if", " (!string.IsNullOrEmpty(unit))\n            {\n                TreeNode node = CreateRootNode();\n\n                ", "//", "this.treeView1.Nodes.\n                ", "//", "TreeNode root = this.treeView1.Nodes[", "0", "];\n                this.treeView1.Nodes[", "0", "].Nodes.Add(node);\n                SaveToXml();\n                LoadFormXml();\n            }\n            ", "//", "this.treeView1.ExpandAll();\n        }\n\n        private void AddArea_Click(object sender, EventArgs e)\n        {\n            ", "//", "创建AddUser窗体的实例\n            AddUnit form = new AddUnit(this);\n            ", "//", "显示窗体，等待用户输入\n            ", "//", "  ", "if", " (form.ShowDialog()== DialogResult.OK)\n            form.ShowDialog();\n                ", "if", " (!string.IsNullOrEmpty(unit))\n                {\n                    ", "//", "检查Tree View控件中是否已经存在指定用户的节点\n                    Check(this.treeView1.Nodes);\n                    ", "if", " (haveUnit)\n                    {\n                    ", "//", "如果用户已经存在，弹出确认对话框\n                    MessageBox.Show(", "\"该组[\"", " + unit + ", "\"]已经存在\"", ");\n                     \n                    }\n                    ", "else", "\n                    {   ", "//", "如果用户不存在，创建新的节点\n                        TreeNode node = CreateRootNode();\n                        ", "//", "TreeNode selectNode = this.treeView1.SelectedNode;\n                        ", "//", "selectNode.Nodes.Add(node);    ", "//", "adduser\n                        this.treeView1.Nodes[", "0", "].Nodes.Add(node);\n                        SaveToXml();     ", "//", "重新从XML文件中加载数据并更新Tree View控件\n                        LoadFormXml();\n\n                    }\n\n                }\n          ", "//", "  }\n            haveUnit = false;    ", "//", "重置haveUnit\n        }\n\n        ", "//", "添加元件\n        private void AddLowest_Click(object sender, EventArgs e)\n        {\n            ", "//", "创建AddUser窗体的实例\n            AddLowest form = new AddLowest(this);\n            ", "//", "显示窗体，等待用户输入\n            ", "if", " (form.ShowDialog() == DialogResult.OK)\n            {\n                ", "if", " (!string.IsNullOrEmpty(lowest))\n                {\n                    ", "//", "检查Tree View控件中是否已经存在指定用户的节点\n                    Check(this.treeView1.Nodes);\n                    ", "if", " (havelowest)\n                    {\n                        ", "//", "如果用户已经存在，弹出确认对话框\n                        ", "if", " (MessageBox.Show(", "\"该元件[\"", " + lowest + ", "\"]已经存在，是否覆盖?\"", ", ", "\"确认\"", ", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)\n                        {\n                            ", "//", "删除原来的节点并创建新的节点\n                            RemoveUser(this.treeView1.Nodes);\n                            TreeNode node = CreateLowestNode();\n                            TreeNode selectNode = this.treeView1.SelectedNode;\n                            selectNode.Nodes.Add(node);\n                            SaveToXml();          ", "//", "将更改保存到XML文件中\n                            LoadFormXml();        ", "//", "重新从XML文件中加载数据并更新TreeView控件\n                        }\n                        ", "else", "\n                        {\n                            ", "//", "SetNodeBackColor(this.treeView1.Nodes);\n                            return;\n                        }\n                    }\n                    ", "else", "\n                    {   ", "//", "如果用户不存在，创建新的节点\n                        TreeNode node = CreateLowestNode();\n                        TreeNode selectNode = this.treeView1.SelectedNode;\n                        selectNode.Nodes.Add(node);    ", "//", "adduser\n                        SaveToXml();     ", "//", "重新从XML文件中加载数据并更新Tree View控件\n                        LoadFormXml();\n\n                    }\n                   \n                }\n            }\n            haveUser = false;    ", "//", "重置haveUser\n        }\n\n        private void AddUser_Click(object sender, EventArgs e)\n        {\n            ", "//", "创建AddUser窗体的实例\n            AddUser form = new AddUser(this);\n            ", "//", "显示窗体，等待用户输入\n            ", "if", " (form.ShowDialog() == DialogResult.OK)\n            {\n                ", "if", " (!string.IsNullOrEmpty(user))\n                {\n                    ", "//", "检查Tree View控件中是否已经存在指定用户的节点\n                    Check(this.treeView1.Nodes);\n                    ", "if", " (haveUser)\n                    {\n                        ", "//", "如果用户已经存在，弹出确认对话框\n                        MessageBox.Show(", "\"该用户[\"", " + user + ", "\"]已经存在\"", ");\n                       \n                    }\n                    ", "else", "\n                    {   ", "//", "如果用户不存在，创建新的节点\n                        TreeNode node = CreateChildNode();\n                        TreeNode selectNode = this.treeView1.SelectedNode;\n                        selectNode.Nodes.Add(node);\n                        SaveToXml();     ", "//", "重新从XML文件中加载数据并更新Tree View控件\n                        LoadFormXml();\n\n                    }\n\n                }\n            }\n            haveUser = false;    ", "//", "重置haveUser\n        }\n\n        private void Check(TreeNodeCollection treeNodes)   ", "//", "检查Tree View控件中是否已经存在指定用户的节点\n        {\n            tmpBool = false;\n            \n            foreach (TreeNode treeNode ", "in", " treeNodes)\n            {\n                dict = (Dictionary<string,string>)treeNode.Tag;\n                ", "if", " (dict[", "\"tag\"", "].Equals(", "\"area\"", "))\n                {\n                    ", "if", " (treeNode.Text.Equals(unit))\n                    {\n                        treeNode.BackColor = Color.Red;    ", "//", "将节点的背景颜色设为红色\n                        ", "//", "treeNode\n                        ", "//", "treeNode.Parent.Expand();          ", "//", "展开父节点\n                        haveUnit = true;                   ", "//", "设置haveUnit为true，表示找到了该用户\n                    }\n                }\n                ", "else", " ", "if", " (dict[", "\"tag\"", "].Equals(", "\"user\"", "))\n                {\n                    ", "if", " (treeNode.Text.Equals(user))\n                    {\n                        treeNode.BackColor = Color.Red;    ", "//", "将节点的背景颜色设为红色\n                        ", "//", "treeNode\n                        treeNode.Parent.Expand();          ", "//", "展开父节点\n                        haveUser = true;                   ", "//", "设置haveUser为true，表示找到了该用户\n                    }\n                }\n                ", "else", " ", "if", " (dict[", "\"tag\"", "].Equals(", "\"lowest\"", "))\n                {\n                    ", "if", " (treeNode.Text.Equals(lowest))\n                    {\n                        treeNode.BackColor = Color.Red;    ", "//", "将节点的背景颜色设为红色\n                        ", "//", "treeNode\n                        treeNode.Parent.Expand();          ", "//", "展开父节点\n                        havelowest = true;                   ", "//", "设置haveUser为true，表示找到了该用户\n                    }\n                }\n                ", "if", " (treeNode.Nodes.Count > ", "0", ")\n                {\n                    Check(treeNode.Nodes);             ", "//", "递归调用CheckUser,查找子节点中是否存在该用户\n                }\n            }\n        }\n\n        private void DeleteLowest_Click(object sender, EventArgs e)\n        {\n            Dictionary<string, string> dict = new Dictionary<string, string>();\n            ", "if", " (MessageBox.Show(", "\"你确定要删除吗?\"", ", ", "\"删除确认\"", ", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)\n            {\n                ", "if", " (this.treeView1.SelectedNode == null)\n                {\n                    return;\n                }\n                dict = (Dictionary<string, string>)this.treeView1.SelectedNode.Tag;\n                ", "if", " (dict[", "\"tag\"", "] == ", "\"lowest\"", ")\n                {\n                        this.treeView1.Nodes.Remove(this.treeView1.SelectedNode);", "//", "移除选中节点\n                        SaveToXml();                                             ", "//", "保存到XML文件\n                        LoadFormXml();                                           ", "//", "从XML文件加载节点\n                }\n            }\n        }\n        private void DeleteUser_Click(object sender, EventArgs e)\n        {\n            Dictionary<string, string> dict = new Dictionary<string, string>();\n            ", "if", " (MessageBox.Show(", "\"你确定要删除吗?\"", ", ", "\"删除确认\"", ", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)\n            {\n                ", "if", " (this.treeView1.SelectedNode == null)\n                {\n                    return;\n                }\n                dict = (Dictionary<string, string>)this.treeView1.SelectedNode.Tag;\n                ", "if", " (dict[", "\"tag\"", "] == ", "\"user\"", ")\n                {\n                    List<string> array = new List<string>();\n                    foreach (TreeNode node ", "in", " this.treeView1.SelectedNode.Nodes)\n                    {\n                        array.Add(node.Text);                    \n                    }\n\n                    ", "if", " (array.Count != ", "0", ")\n                    {\n                        MessageBox.Show(", "\"不能删除非空用户的结点！\"", ", ", "\"确定\"", ", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                    }\n                    ", "else", "\n                    {\n                        this.treeView1.Nodes.Remove(this.treeView1.SelectedNode);", "//", "移除选中节点\n                        SaveToXml();                                             ", "//", "保存到XML文件\n                        LoadFormXml();                                           ", "//", "从XML文件加载节点\n                                                                                \n                     }\n\n                }\n            }\n        }\n        private void DeleteArea_Click(object sender, EventArgs e)\n        {\n            Dictionary<string, string> dict = new Dictionary<string, string>();\n            ", "if", " (MessageBox.Show(", "\"你确定要删除吗?\"", ", ", "\"删除确认\"", ", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)\n            {\n                ", "if", " (this.treeView1.SelectedNode == null)\n                {\n                    return;\n                }\n                dict = (Dictionary<string, string>)this.treeView1.SelectedNode.Tag;\n                ", "if", "(dict[", "\"tag\"", "] == ", "\"area\"", ")\n                {\n                    List<string> array = new List<string>();\n                    foreach (TreeNode node ", "in", " this.treeView1.SelectedNode.Nodes)\n                    {\n                        ", "//", "array.Add((node.Text.Split(", "'/'", "))[", "0", "]);   ", "//", "将子节点的文本按照‘/’分割成字符串数组，并取第一个元素，即用户名\n                        array.Add(node.Text);                     ", "//", "当前并没有字符串含", "'/'", "\n                    }\n                    \n                    ", "if", " (array.Count != ", "0", ")\n                    {\n                        MessageBox.Show(", "\"不能删除非空用户的组结点！\"", ", ", "\"确定\"", ", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                    }\n                    ", "else", "\n                    {\n                        this.treeView1.Nodes.Remove(this.treeView1.SelectedNode);", "//", "移除选中节点\n                        SaveToXml();                                             ", "//", "保存到XML文件\n                        LoadFormXml();                                           ", "//", "从XML文件加载节点\n                        ", "//", "binary.DeleteAccountDirectory(array[", "0", "]);\n                     \n                    }\n                   \n                }\n            }\n        }\n\n        ", "//", " 点击列表项\n        ", "//", "private void ListItem_Click(object sender, EventArgs e)\n        ", "//", "{\n        ", "//", " TODO: 实现点击列表项后的操作\n        ", "//", "}\n        ", "//", " 添加选项卡页\n        ", "//", "private void AddTabPage(string pageTitle, Control ctrForm)\n        ", "//", "{\n        ", "//", " TODO: 实现添加选项卡页的操作\n        ", "//", "}\n        ", "//", " 双击树形视图\n        private void treeView1_DoubleClick(object sender, EventArgs e)\n        {\n            ", "//", "  MessageBox.Show(", "\"双击了\"", ");    ", "//", " TODO: 实现双击树形视图后的操作\n        }\n\n        ", "//", " 添加单元工具按钮的点击事件\n        private void toolbtn_AddUnit_Click(object sender, EventArgs e)\n        {\n            ", "//", " 打开添加单元的窗口\n            AddUnit form = new AddUnit(this);\n            form.ShowDialog();\n            ", "if", " (!string.IsNullOrEmpty(unit))\n            {\n                ", "//", " 创建根节点\n                TreeNode node = CreateRootNode();\n\n                ", "//", " 添加节点到树形视图中\n                this.treeView1.Nodes[", "0", "].Nodes.Add(node);\n                \n                SaveToXml();    ", "//", " 将树形视图保存到XML文件中\n                LoadFormXml();       ", "//", " 从XML文件中加载树形视图\n            }\n            ", "//", "this.treeView1.ExpandAll();\n            \n        }\n\n        ", "//", " 创建根节点\n        private TreeNode CreateRootNode()\n        {\n            Dictionary<String, String> dict = new Dictionary<String, String>();\n            dict.Add(", "\"tag\"", ", ", "\"area\"", ");\n            TreeNode node = new TreeNode(this.unit);\n            node.Tag = dict;\n            node.ImageIndex = ", "1", ";\n            node.SelectedImageIndex = ", "1", ";\n            return node;\n        }\n\n        ", "//", " 创建子节点\n        private TreeNode CreateChildNode()\n        {\n            Dictionary<String, String> dict = new Dictionary<String, String>();\n            dict.Add(", "\"tag\"", ", ", "\"user\"", ");\n            TreeNode node = new TreeNode(this.user);\n            node.Tag = dict;\n            node.ImageIndex = ", "2", ";\n            node.SelectedImageIndex = ", "2", ";\n            return node;\n        }\n\n        private TreeNode CreateLowestNode()\n        {\n            Dictionary<String, String> dict = new Dictionary<String, String>();\n            dict.Add(", "\"tag\"", ", ", "\"lowest\"", ");\n            TreeNode node = new TreeNode(this.lowest);\n            node.Tag = dict;\n          \n            return node;\n        }\n\n        ", "//", "private TreeNode Create1Node()\n        ", "//", "{\n        ", "//", "    Dictionary<String,String> dict =new Dictionary<String,String>();\n        ", "//", "    dict.Add(", "\"tag\"", ",", "\"lowest\"", ");\n        ", "//", "    TreeNode node = new TreeNode(this.lowest);\n        ", "//", "    node.Tag = dict[", "\"tag\"", "];\n        ", "//", "    ", "//", "node.ImageIndex = ", "2", ";\n        ", "//", "    ", "//", "node.SelectedImageIndex = ", "2", ";\n        ", "//", "    return node;\n        ", "//", "}\n\n        ", "//", " 将树形视图保存到XML文件中\n        public void SaveToXml()\n        {\n            ", "//", " 创建XML文档对象\n            XmlDocument doc = new XmlDocument();\n            ", "//", " 创建根节点\n            doc.LoadXml(", "\"<Menu></Menu>\"", ");\n            XmlNode root = doc.DocumentElement;\n            ", "//", " 添加XML声明\n            doc.InsertBefore(doc.CreateXmlDeclaration(", "\"1.0\"", ", ", "\"utf-8\"", ", ", "\"yes\"", "), root);\n            ", "//", " 将树形视图转换为XML节点，并添加到XML文档中\n            TreeNode2Xml(this.treeView1.Nodes, root);\n            ", "//", " 将XML文档保存到文件中\n            xmloper.SaveXml(doc);\n        }\n\n        ", "//", " 将TreeNodeCollection转换为XML节点\n        private void TreeNode2Xml(TreeNodeCollection treeNodes, XmlNode xmlNode)\n        {\n            XmlDocument doc = xmlNode.OwnerDocument;\n            foreach (TreeNode treeNode ", "in", " treeNodes)\n            {\n                dict = (Dictionary<string, string>)treeNode.Tag;\n                ", "//", " 创建XML节点\n                XmlNode element = doc.CreateNode(", "\"element\"", ", ", "\"Item\"", ", ", "\"\"", ");  ", "//", "创建名为item的xml对象\n                XmlAttribute attr = doc.CreateAttribute(", "\"Title\"", ");         \n                attr.Value = treeNode.Text;                               ", "//", "属性值为treeNode.Text   \n                element.Attributes.Append(attr);                          ", "//", "添加名为Title的属性   \n                element.AppendChild(doc.CreateCDataSection(dict[", "\"tag\"", "])); ", "//", "将treeNode转换为CDataSection并将其作为子节点添加到element中\n                xmlNode.AppendChild(element);                             ", "//", "将element添加到xmlNode子节点中\n                ", "//", " 如果该节点有子节点，则递归调用该方法\n                ", "if", " (treeNode.Nodes.Count > ", "0", ")\n                {\n                    TreeNode2Xml(treeNode.Nodes, element);\n                }\n            }\n        }\n\n        ", "//", " 当用户选中某个节点时发生的事件处理程序\n        private void treeView1_AfterSelect(object sender, TreeViewEventArgs e)\n        {\n            string path = null;\n            TreeNode node = this.treeView1.SelectedNode;\n            ", "//", "node.ForeColor = Color.Red;\n            ", "if", " (node != null)\n            {\n                path = node.Text;\n                ", "while", " (node.Parent != null)\n                {\n                    node = node.Parent;\n                    path = node.Text + ", "\"\\\\\"", " + path;\n                }\n            }\n            \n        }\n\n        ", "//", " 当用户单击树形视图时发生的事件处理程序\n        private void treeView1_Click(object sender, EventArgs e)\n        {\n            ", "//", " 获取鼠标单击的位置上的节点\n            object tmpObj = this.treeView1.GetNodeAt(this.treeView1.PointToClient(Cursor.Position));\n            ", "if", " (tmpObj != null)\n            {\n                ", "if", " ((tmpObj as TreeNode).Bounds.Contains(this.treeView1.PointToClient(Cursor.Position)))\n                {\n                    tmpBool = true;\n                }\n            }\n        }\n\n        ", "//", " 当用户展开某个节点之前发生的事件处理程序\n        private void treeView1_BeforeExpand(object sender, TreeViewCancelEventArgs e)\n        {\n            ", "if", " (tmpBool)\n            {\n                e.Cancel = tmpBool;\n            }\n            tmpBool = false; \n        }\n\n        ", "//", " 当用户折叠某个节点之前发生的事件处理程序\n        private void treeView1_BeforeCollapse(object sender, TreeViewCancelEventArgs e)\n        {\n            ", "if", " (tmpBool)\n            {\n                e.Cancel = tmpBool;\n            }\n            tmpBool = false;\n\n        }\n\n        ", "//", " 当用户在树形视图上单击鼠标按钮时发生的事件处理程序\n        private void treeView1_MouseClick(object sender, MouseEventArgs e){}\n\n        ", "//", " 当用户在树形视图上移动鼠标时发生的事件处理程序\n        private void treeView1_MouseMove(object sender, MouseEventArgs e)\n        {\n           \n        }\n\n        ", "//", " 当鼠标离开树形视图时发生的事件处理程序\n        private void treeView1_MouseLeave(object sender, EventArgs e)\n        {\n           \n\n        }\n\n        private void toolbtnSearch_Click(object sender, EventArgs e)\n        {\n            string searchName = this.toolText.Text;\n            SetNodeBackColor(this.treeView1.Nodes);\n            ", "if", " (!string.IsNullOrEmpty(searchName))\n            {\n                SearchXml(this.treeView1.Nodes, searchName); ", "//", " 根据搜索内容在TreeView中查找匹配节点\n            }\n        }\n        private void SetNodeBackColor(TreeNodeCollection treeNodes)\n        {\n            foreach (TreeNode treeNode ", "in", " treeNodes)\n            {\n                dict = (Dictionary<string, string>)treeNode.Tag;\n                treeNode.BackColor = Color.White;  ", "//", " 设置节点背景颜色为白色\n                ", "if", " (dict[", "\"tag\"", "].Equals(", "\"area\"", "))   ", "//", " 如果节点的Tag属性值为", "\"area\"", "，则将该节点折叠\n                {\n                    treeNode.Collapse();\n                }\n                ", "if", " (treeNode.Nodes.Count > ", "0", ")\n                {\n                    SetNodeBackColor(treeNode.Nodes);   ", "//", " 递归调用SetNodeBackColor方法，对当前节点的所有子节点执行相同的操作\n                }\n            }\n        }\n\n        private void SearchXml(TreeNodeCollection treeNodes,string search)\n        {\n            foreach (TreeNode treeNode ", "in", " treeNodes)\n            {\n                ", "if", " (treeNode.Text.ToString().Contains(search))     ", "//", " 如果当前节点的文本内容包含搜索内容，则将该节点的背景颜色设置为Coral色\n                {\n                    treeNode.BackColor = Color.Coral;\n                    ", "if", "(treeNode.Parent!=null)                  ", "//", " 如果该节点有父节点，则展开其父节点\n                    {\n                        treeNode.Parent.Expand();\n                    }\n                }\n                ", "if", " (treeNode.Nodes.Count > ", "0", ")\n                {\n                    SearchXml(treeNode.Nodes,search);          ", "//", " 递归调用SearchXml方法，对当前节点的所有子节点执行相同的操作\n                }\n            }\n        }\n\n        private void toolText_TextChanged(object sender, EventArgs e)\n        {\n            toolbtnSearch_Click(sender, e);      ", "//", " 当搜索框文本内容发生变化时，执行toolbtnSearch_Click方法\n        }\n\n        ", "//", "节点的选中取消事件\n        private void treeView1_AfterCheck(object sender, TreeViewEventArgs e)\n        {\n            ", "if", " (e.Node.Checked)    ", "//", " 如果当前节点被选中，则将其所有子节点的选中状态设置为true\n            {\n               setChildNodeCheckedState(e.Node, true);\n            }\n            ", "else", "                   ", "//", " 如果当前节点未选中，则将其所有子节点的选中状态设置为false\n            {\n                setChildNodeCheckedState(e.Node,  false);\n            }\n        }\n\n\n        ", "//", "选中节点之后，选中节点的所有子节点\n        private void setChildNodeCheckedState(TreeNode currNode, bool state)\n        {\n            TreeNodeCollection nodes = currNode.Nodes;\n            ", "if", " (nodes.Count > ", "0", ")\n                foreach (TreeNode tn ", "in", " nodes)\n                {\n\n                    tn.Checked = state;      ", "//", " 将当前子节点的选中状态设置为指定的状态\n                    setChildNodeCheckedState(tn, state); ", "//", " 递归调用setChildNodeCheckedState方法，对当前子节点的所有子节点执行相同的操作\n                }\n        }\n    }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "我用蚁群和量子蚁群算法做过，一个是比赛用的，一个是毕设\r\n没用遗传实现过", "Konwledge_Point": "集合覆盖", "Question": ["用遗传算法解决集合覆盖模型", ["求用遗传算法解决集合覆盖模型的程序试例或源程序，最好能相关物流配送中心和物流中心选址问题"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先从redis取出来&amp;#xff0c;然后把新map的值赋给旧map&amp;#xff0c;然后再存进去&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["redis的value存map集合新数据覆盖老数据怎么办", []], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;集合之间并没有关联。&lt;br /&gt;是添加的数据相同而已。&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["java两个for循环add不同的集合为什么第二个集合会把第一个集合数据搬过来", ["两个String类型的集合", "\n", "\n", "两个数据库都按过来6个数据,当personIdList的for循环结束以后开始执行emcodeList的for循环的时候personIdList 第零位数据被拿到了emcodeList集合的第零位是怎么回事?"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这种你可以在外面定义Map&amp;#xff0c;然后再循环里面new&amp;#xff0c;每次也就能够装入List里面。&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["Java循环数据 如果Map在循环外 循环添加数据就会被覆盖 但是在里面 就不会", ["Map在里面 添加到list里面数据不会被覆盖", "Map在外面 添加到list里面数据会被覆盖", "\n", "疑惑"]], "Tag": "算法设计"}
{"Answer": "一个map中，key值是唯一的，所以想要一个相同的key值拥有多个值。就得采用key -&gt; 数组或集合（将同个key值的value用数组或集合收集，再设置），你上面这种相当于将map一个key值所对应的值设置了无数次", "Konwledge_Point": "集合覆盖", "Question": ["这个HashMap的值循环一次就会被覆盖，应该怎么解决呢？？？", ["\n这个HashMap存的map的值循环一次就会被覆盖，应该怎么解决呢？？？", "\n能让它存入每一次put的值。"]], "Tag": "算法设计"}
{"Answer": "set原则是添加相同元素操作是无效,是因为在做二叉树或哈希算法时,相同元素计算值相同不允许插入,这个可以改的,你在\r\n①hashSet的所需要元素的类重写hashCode方法,和equal方法,而方法里什么也不做返回false,\r\n②在TreeSet中,不管自定义选择器还是重写选择方法,还是一样什么也不做,返回0.\r\n这样set也能插入相同元素了,然后这样Set就失去了元素唯一性了.\r\n其实set就是map集合的键列集合,而**值列都是Object()**,是map集合的特殊表现,map插入key重复时,覆盖的是值(!!!!这个你看清楚,你插入成功的前提是\r\n键一样,**值是不一样**).如果键和值都一样还是无法插入的,这就是如果set插入相同元素,相对于map集合键和值都一样,当然无法插入啊.", "Konwledge_Point": "集合覆盖", "Question": ["求解map集合和set集合的问题", ["set集合中添加两个相同元素，会导致添加操作无效。", "\nmap集合中的key不能是重复的，如果重复，那么后面添加的的映射关系会覆盖前面的映射关系，map集合中的key的维护是依靠set集合完成的。", "\n为什么同是set集合，map集合在key重复时是先进去再覆盖，而set集合是添加操作无效，不能进去。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;j因为赋值的下标是index&amp;#xff0c;num1和num2赋值的时候index一直在增加&amp;#xff0c;所以不会覆盖&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["对数组进行赋值是为什么后面赋值不会覆盖前面的的赋值？", ["全部代码如下:", " {", "\n", "public", " ", "static", " ", "void", " main(String[] args) {\n    ", "// 复制某个数组元素数据至另外一个数组中", "\n    String[] num1 = ", "new", " String[", "3", "];\n    num1[", "0", "] = ", "\"1\"", ";\n\n    String[] num2 = {", "\"3\"", ", ", "\"2\"", ", ", "\"1\"", "};\n\n    ", "// 把num2中的元素存储到num1中", "\n    ", "// 获得数组剩余的空间大小  默认为0", "\n    ", "int", " len = num1.length;\n    ", "int", " ", "count", " = ", "0", ";", "// 原数组以及属于的空间", "\n    ", "for", " (", "int", " i = ", "0", "; i < len; i++) {\n        ", "if", " (num1[i] == ", "null", ") {\n            ", "break", ";\n        } ", "else", " {\n            ", "count", "++;\n        }\n    }\n\n    ", "int", " shengyv = len - ", "count", ";", "// 求得原数组的剩余空间", "\n\n    ", "int", " len2 = num2.length;", "// 要复制元素的个数", "\n    String[] newStringArray = ", "null", ";\n    ", "if", " (shengyv < len2) {\n        ", "// 原数组的空间不够使用   手动扩大一个数组的空间大小   扩容", "\n        ", "// 简单来说：就是创建一个新的数组", "\n        newStringArray = ", "new", " String[", "count", " + len2];\n        ", "// 遍历原数组以及复制的数字元素   存储到newStringArray", "\n        ", "int", " ", "index", " = ", "0", ";\n        ", "for", " (", "int", " j = ", "0", "; j < ", "count", "; j++) {\n            newStringArray[", "index", "] = num1[j];\n            ", "index", "++;\n        }\n        ", "for", " (", "int", " j = ", "0", "; j < len2; j++) {\n            newStringArray[", "index", "] = num2[j];\n            ", "index", "++;\n        }\n        System.out.println(Arrays.toString(newStringArray));\n    } ", "else", " {\n        ", "// 直接将复制数组内容村粗到原数组中即可", "\n        ", "for", " (", "int", " j = ", "0", "; j < len2; j++) {\n            num1[", "count", "] = num2[j];\n            ", "count", "++;\n        }\n        System.out.println(Arrays.toString(num1));\n    }\n", "\n", "下面代码不太懂，第一个循环num1先对newStringArray进行赋值，当第二个循环运行是num2对newStringArray进行赋值，为什么num2赋的值不会覆盖num1的赋值？", "\n", "｛", "for (int j = 0; j < count; j++) {", "                newStringArray[index] = num1[j];", "                index++;", "            }", "for (int j = 0; j < len2; j++) {", "                newStringArray[index] = num2[j];", "                index++;", "            }", "｝", "刚接触Java不太懂，"]], "Tag": "算法设计"}
{"Answer": "Book book=new Book();\r\n//创建TreeSet集合，里面储存book对象的属性\r\nTreeSet&lt;Book&gt; tree=new TreeSet&lt;Book&gt;();\r\n\r\n第一次添加的是book对象，保存到tree中。tree获得book的地址。\r\n第二次添加的还是book对象，只是改了下值。保存到tree中进行覆盖。\r\n\r\n\r\n第一个修改的地方\r\n//创建引用名，不new对象\r\nBook book ;\r\n//创建TreeSet集合，里面储存book对象的属性\r\nTreeSet&lt;Book&gt; tree=new TreeSet&lt;Book&gt;();\r\n\r\n\r\n第二个修改的地方\r\npublic boolean addBook(String bookName, String author, String press, String price, String bookID, String pubdate){\r\n    boolean bl2=false;\r\n\t\t\r\n\t\t//在方法中new对象，可以保证每次的对象不一样\r\n\t\tbook = new Book();\r\n\t\t\r\n    book.setBookName(bookName);\r\n    book.setAuthor(author);\r\n    book.setPress(press);\r\n    book.setPrice(price);\r\n    book.setBookID(bookID);\r\n    book.setPubdate(pubdate);\r\n    System.out.println(\"新书信息如下:\"+book.toStrings());\r\n    System.out.println(\"是否保存该书？ (Y)是 (N)否\");\r\n    option=sc.next();\r\n    if(\"y\".equalsIgnoreCase(option)){\r\n        System.out.println(\"正在添加....\");\r\n        tree.add(book);//把图书的信息添加到tree集合中\r\n        bl2=true;\r\n    }\r\n    else{\r\n        System.out.println(\"已取消\");\r\n    }\r\n    return bl2;\r\n}", "Konwledge_Point": "集合覆盖", "Question": ["java关于TreeSet集合的问题，为什么每次添加只能添加进去一个，再添加的时候就会覆盖掉前面那个", ["不知道为什么只能添加一个对象进去，添加第二次的时候就覆盖掉了第一次添加进去的。麻烦大家了!", "\n\n", "这是main方法", "\nif(\"a\".equalsIgnoreCase(option)){", "\n                                //查看图书的功能", "\n                                d.cheekBook();", "\n                            }", "\n                            else if(\"b\".equalsIgnoreCase(option)){", "\n                                //添加图书的功能", "\n                                System.out.println(\"请输入书名:\");", "\n                                bookName=sc.next();", "\n                                System.out.println(\"请输入作者:\");", "\n                                author=sc.next();", "\n                                System.out.println(\"请输入出版社:\");", "\n                                press=sc.next();", "\n                                System.out.println(\"请输入价格:\");", "\n                                price=sc.next();", "\n                                System.out.println(\"请输入书号:\");", "\n                                bookID=sc.next();", "\n                                System.out.println(\"请输入出版日期:\");", "\n                                pubdate=sc.next();", "\n                                boolean bl2=d.addBook(bookName,author,press,price,bookID,pubdate);", "\n                                if(bl2){", "\n                                    System.out.println(\"添加成功\");", "\n                                    System.out.println(\"请选择功能:查看图书(A) 添加图书(B) 修改图书(C) 删除图书(D)\");", "\n                                    option=sc.next();", "\n                                    if(\"a\".equalsIgnoreCase(option)){", "\n                                        //查看图书", "\n                                        d.cheekBook();", "\n                                    }", "\n                                    else if(\"b\".equalsIgnoreCase(option)){", "\n                                        //添加图书", "\n                                        System.out.println(\"请输入书名:\");", "\n                                        bookName=sc.next();", "\n                                        System.out.println(\"请输入作者:\");", "\n                                        author=sc.next();", "\n                                        System.out.println(\"请输入出版社:\");", "\n                                        press=sc.next();", "\n                                        System.out.println(\"请输入价格:\");", "\n                                        price=sc.next();", "\n                                        System.out.println(\"请输入书号:\");", "\n                                        bookID=sc.next();", "\n                                        System.out.println(\"请输入出版日期:\");", "\n                                        pubdate=sc.next();", "\n                                        bln=d.addBook(bookName,author,press,price,bookID,pubdate);", "\n                                        if(bln){", "\n                                            System.out.println(\"添加成功\");", "\n                                        }", "\n                                    }", "\n\n", "    这是添加图书和查看图书的的方法                       \n                                //创建book对象\nBook book=new Book();\n//创建TreeSet集合，里面储存book对象的属性\nTreeSet<Book> tree=new TreeSet<Book>();\n//查看图书的功能\npublic void cheekBook(){\n    if(tree.isEmpty()){\n        System.out.println(\"请添加图书!!!\");\n    }\n    else{\n        System.out.println(\"查看图书\");\n        System.out.println(\"|书名|     |作者|     |出版社|    |价格|   |书号|   |出版日期|\");\n        Iterator<Book> it=tree.iterator();\n        while(it.hasNext()){\n            System.out.println(it.next());\n        }\n\n    }\n}\n\n//添加图书\npublic boolean addBook(String bookName, String author, String press, String price, String bookID, String pubdate){\n    boolean bl2=false;\n    book.setBookName(bookName);\n    book.setAuthor(author);\n    book.setPress(press);\n    book.setPrice(price);\n    book.setBookID(bookID);\n    book.setPubdate(pubdate);\n    System.out.println(\"新书信息如下:\"+book.toStrings());\n    System.out.println(\"是否保存该书？ (Y)是 (N)否\");\n    option=sc.next();\n    if(\"y\".equalsIgnoreCase(option)){\n        System.out.println(\"正在添加....\");\n        tree.add(book);//把图书的信息添加到tree集合中\n        bl2=true;\n    }\n    else{\n        System.out.println(\"已取消\");\n    }\n    return bl2;\n}\n"]], "Tag": "算法设计"}
{"Answer": "static静态变量是属于类的变量，任何时候只有一份，你在循环中给这个变量的赋值了3次，第3次赋值覆盖了前两次，所以最终的结果是 2 2 2", "Konwledge_Point": "集合覆盖", "Question": ["list.add() 添加对象时为什么显示的都是最后一个对象的属性？以前添加的值被覆盖了", ["import java.util.ArrayList;", "\nimport java.util.List;", "\n\n", "public class Listaa {", "\n    private static List list = new ArrayList();", "\n\n", "private static int i;\n\npublic static void maain(int i) {\n    Listaa t = new Listaa();\n    t.setI(i);\n    list.add(t);\n}\n\npublic static void main(String args[]) {\n    Listaa a = new Listaa();\n    for (int i = 0; i < 3; i++)\n        maain(i);\n    for (int i = 0; i < list.size(); i++) {\n\n        a = (Listaa) list.get(i);\n        System.out.println(a.getI());\n    }\n}\n\npublic int getI() {\n    return i;\n}\n\npublic void setI(int i) {\n    this.i = i;\n}\n", "\n\n", "}", "\n输出结果是 2 2 2，为什么不是 0 1 2 ？"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;If you want to append array elements from the second array to the first array while not overwriting the elements from the first array and not re-indexing, use the &lt;strong&gt;+ array union operator&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$a = array(10 =&amp;gt; array(25,26));\n$b = array(22 =&amp;gt; array(45,66));\n$c = $a + $b;\nprint_r($c);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Array\n(\n    [10] =&amp;gt; Array\n        (\n            [0] =&amp;gt; 25\n            [1] =&amp;gt; 26\n        )\n\n    [22] =&amp;gt; Array\n        (\n            [0] =&amp;gt; 45\n            [1] =&amp;gt; 66\n        )\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The keys are preserved in this case.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Same answer from the other question\n  you posted relating this issue:\n  &lt;a href=\"https://stackoverflow.com/questions/5212924/merging-a-multi-dimensional-array-into-another-multi-dimensional-array/\"&gt;merging a multi-dimensional array into another multi-dimensional array&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    &lt;/div&gt;", "Konwledge_Point": "集合覆盖", "Question": ["如何创建多维数组的集合，而不是在推送新的数组时覆盖原始值", ["\n\n", "Here is my site\n", "http://69.231.195.173:8888/iadprint/products?product=flyers", "\n\n", "When the user selects a few selections that relate to the flyer product and presses add to cart. this is what code is executed.", "\n\n", "if(isset($_POST['btnAddToCart']) && isset($_GET['product']))\n    {\n        $product_id = $action->getProductID($_GET['product']);\n\n        $attribute[$product_id] = array();\n\n\n        foreach ($_POST as $field=>$hash) \n        {\n            $hash = $security->clean_numeric($hash);\n\n            if($field != \"btnAddToCart\" && $field != 'price' && !empty($hash))\n            {\n                array_push($attribute[$product_id], $hash);\n\n            }\n        } \n\n        $_SESSION['iadprint_cart'] = $attribute;\n}\n", "\n\n", "the array that gets formed looks like this", "\n\n", "Array\n(\n    [10] => Array\n        (\n            [0] => 30\n            [1] => 36\n        )\n)\n", "\n\n", "inside that main array the 10 refers to flyer product id name. inside of that the 30 and 36 are the ids of the selections. ", "\n\n", "the problem i'm having is if you select business card and make your selections and add to cart instead of pushing in a format like the picture that is everything inside the array()  for the new product. the data gets overridden. I am using array_push and it should work but it is not.", "\n    "]], "Tag": "算法设计"}
{"Answer": "应该是服务器那边的问题，服务器在每个上传的图片都应该保存到不同的文件名上", "Konwledge_Point": "集合覆盖", "Question": ["Android多图片上传会发生覆盖问题", ["我写了一个多图片上传的小程序，选出的图片存在List集合里，然后通过for循环发送到服务器里。可是却发生了收到都是最后一张图片，这该怎么解决！求大神相助！！！！！！！！！！！！！！！！！！！！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;是不是putstring 和 获取的时候  有一个异步的顺序?&lt;br /&gt;获取的时候其实还没有put进去?&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["Android sharedpreferences使用putString()无法覆盖相同key的值", ["问题遇到的现象和发生背景", "\n", "使用sharedpreferences全局存储map将map转成json字符串进行存储，在清空时使用putString方法将值设置成空字符串，但是在获取时，还是之前的值 并没有为空字符串。", "\n", "问题相关代码，请勿粘贴截图", "\n", "private", " ", "SharedPreferences", " share;\n ", "private", " ", "SharedPreferences", ".", "Editor", " editor;\n ", "private", " ", "Map", "<", "String", ",", "String", "> moreData = ", "new", " ", "HashMap", "<>();\n", "private", " ", "SharedPreferencesUtils", "() {\n        share = ", "EallApplication", ".", "getContext", "().", "getSharedPreferences", "(", "SHARED_NAME", ", ", "Context", ".", "MODE_PRIVATE", ");\n        editor = share.", "edit", "();\n    }\n\n", "/**\n     * 单例模式\n     */", "\n    ", "private", " ", "static", " ", "SharedPreferencesUtils", " instance;", "//单例模式 双重检查锁定", "\n\n    ", "public", " ", "static", " ", "SharedPreferencesUtils", " ", "getInstance", "(", ") {\n        ", "if", " (instance == ", "null", ") {\n            synchronized (", "SharedPreferencesUtils", ".", "class", ") {\n                ", "if", " (instance == ", "null", ") {\n                    instance = ", "new", " ", "SharedPreferencesUtils", "();\n                }\n            }\n        }\n        ", "return", " instance;\n    }\n\n\n", "/**\n     * 用于保存集合\n     *\n     * ", "@param", " key key\n     * ", "@param", " map map数据\n     * ", "@return", " 保存结果\n     */", "\n    ", "public", " ", "void", " ", "putHashMapData", "(", "String", " key, ", "Map", "<", "String", ", ", "String", "> map", ") {\n        ", "if", " (map == ", "null", "){\n            moreData.", "clear", "();\n            editor.", "putString", "(key, ", "\"\"", ");\n            editor.", "apply", "();\n            ", "return", ";\n        }\n\n        moreData.", "putAll", "(map);\n        ", "try", " {\n            ", "Gson", " gson = ", "new", " ", "Gson", "();\n            ", "String", " json = gson.", "toJson", "(moreData);\n            editor.", "putString", "(key, json);\n        } ", "catch", " (", "Exception", " e) {\n            e.", "printStackTrace", "();\n        }\n        editor.", "apply", "();\n        ", "return", ";\n    }\n\n    ", "public", " ", "Map", "<", "String", ", ", "String", "> ", "getHashMapData", "(", "String", " key", ") {\n        ", "String", " json = share.", "getString", "(key, ", "\"\"", ");\n        ", "Map", "<", "String", ",", "String", "> map = ", "new", " ", "Gson", "().", "fromJson", "(json, ", "new", " ", "TypeToken", "<", "HashMap", "<", "String", ",", "Object", ">>(){}.", "getType", "());\n        ", "return", " map;\n    }\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "和游标没有关系了，看个例子\r\nSELECT *\r\n  FROM aa t\r\n WHERE num &lt;= 40\r\n ORDER BY num DESC\r\n结果：\r\n1    40\r\n1    30\r\n2    10\r\nSELECT *\r\n  FROM aa t\r\n WHERE num &lt;= 30\r\n ORDER BY num DESC\r\n   FOR UPDATE SKIP LOCKED\r\n\r\n结果：\r\n1    30\r\n2    10\r\nSELECT *\r\n  FROM aa t\r\n WHERE num &lt;= 40\r\n ORDER BY num DESC\r\n   FOR UPDATE SKIP LOCKED\r\n结果：\r\n1    40", "Konwledge_Point": "集合覆盖", "Question": ["oracle里有没有其他方法替代游标", ["存储过程内使用了游标遍历数据，需要对数据进行更新。", "\n当多用户同时请求时，多个session的游标查询的数据可能重复，游标锁定了数据，", "\n第一个用户 更新了数据，", "\n后面用户可能会覆盖前一个用户更新的数据。", "\n需要频繁查询数据，考虑到性能方面，希望用存储过程完成数据处理。", "\n有没有其他方法替代游标呢？"]], "Tag": "算法设计"}
{"Answer": "你原来在方法中每次调用方法都会新建一个list。所以每一次元素都是当次的元素。把list作为类的全局变量，list就可以增加了", "Konwledge_Point": "集合覆盖", "Question": ["如何在一个方法内将对象存入list中，放入session,再次执行该方法如何将新的对象继续存入？", ["1.在执行方法SavaQuestion，定义一个list对象 questionNaireQuestionslist", "\n2.再将questionNaireQuestion对象放入这个list对象questionNaireQuestionslist中", "\n3.将list对象questionNaireQuestionslist保存入session中，将questionNaireQuestion保存入session中", "\n4.如何再次执行这个方法SavaQuestion，将新的questionNaireQuesion对象存入list中", "\n5.我每次将新的questionNaireQuesion对象存入list中时都会覆盖原有的，list对象questionNaireQuestionslist永远只有一个元素", "\n\n", "public String saveQuestion(HttpServletRequest request) {\n   List<QuestionNaireQuestion> questionNaireQuestionslist = new ArrayList<QuestionNaireQuestion>();\n        QuestionNaireQuestion questionNaireQuestion = new QuestionNaireQuestion();\n                //......\n                 questionNaireQuestionslist.add(questionNaireQuestion);\n                 //将List对象questionNaireQuestionslist存入session中\n                request.getSession().setAttribute(\"questionNaireQuestionslist\", questionNaireQuestionslist);\n                 //将questionNaireQuestion对象存入session中\n                 request.getSession().setAttribute(\"questionNaireQuestion\", questionNaireQuestion);\n\n"]], "Tag": "算法设计"}
{"Answer": "缓存问题。\r\n拿过来之前把session同步下再看看。", "Konwledge_Point": "集合覆盖", "Question": ["Hibernate的一对多映射的问题，集合的size不对。", ["Parent和Children建立一对多的双向关联。", "\nParent类的Children属性是Set类型的。", "\n\n", "数据库里面和parent关联的child记录是2条，这个确认过。", "\n\n", "但是parent.getChindren().size()的值是1。", "\n\n", "但是用HQL方式用相同的条件查询，\"from Child c where c.parentId=\" + parent.getId()，结果是2。", "\n我把parent.getChindren().size()时在控制台输出的sql语句复制出来替换掉问号，直接去查询数据库，结果也是2条记录。", "\n\n", "为什么直接输出size的值是1而其他方法查询的结果是2？", "\n\n", "我已经覆盖了对象的hashCode和equals方法了，我在hashCode和equals里添加了输出，发现hashCode执行了一遍，equals没有执行，是不是说在初始化children的时候只有1个对象被添加到set里？ ", "\n\n", "应用里其他地方的一对多映射都正常，唯独这里有问题。", "\nChild不止和Parent有关联，还和其他的对象有同样的关联，那些就正常。", "\n\n", "[code=\"xml\"]", "\n\n", "\n class=\"com.bean.Parent\" not-null=\"false\" cascade=\"none\" />", "\n[/code]"]], "Tag": "算法设计"}
{"Answer": "entry应该指的就是键值对吧", "Konwledge_Point": "集合覆盖", "Question": ["hashmap 中的Entry链问题", ["引用网上的一段话：[quote]当程序试图将一个key-value对放入HashMap中时，程序首先根据该 key 的 hashCode() 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 hashCode() 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value，但key不会覆盖。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部[/quote]", "\n\n", "我的疑问是，这段话要怎么理解", "\n因为当我定义", "\n[code=\"java\"]", "\nmap.put(1,\"a\");", "\nmap.put(1,\"b\");", "\n[/code]", "\n\n", "此时map的size实际是1,map.get(1)为b也就是说后put的元素把前面的覆盖了。", "\n所以我想知道的是这个Entry里有多个元素，该怎么理解？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://leetcode-cn.com/circle/discuss/7HUB28/\" id=\"textarea_1644475955207_1644475999598_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://leetcode-cn.com/circle/discuss/7HUB28/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["求“最大公共偏序子集”", ["有两个各自具有一种序结构的集合，如何寻找这两个集合的一种共同子集使得：", "1、子集中元素的排列顺序能同时满足这两个集合上的序结构；", "2、符合1的前提下，子集尽可能大", "\n", "比如把两个字符串当做集合：", "a=\"我不知道如何解决这个问题\"", "b=\"不知道我能否想出解决该问题的办法\"", "那么符合条件的所谓“最大公共偏序子集”就是：", "\"不知道解决问题\"", "\n", "稍微解释一下c怎么来的，所谓的序结构，比如a字符串的就是：“我”要排在“不”前面，“不”又要排在后面的其他字前面，字符串上这种覆盖每个字的一维的从左到右的可传导的顺序关系，就可以当做是a字符串所具有的一个序结构，同理b字符串也一样。", "然后c在是a，b的公共子集的同时，c中的每一个元素，还要满足a，b上的顺序关系，比如开头的\"我\"和\"不\"字，虽然是a，b的共同元素，但是它们两个字在a中和在b中的先后顺序不一样，所以它们不能同时出现在c中。", "就是这么回事吧，有点像是在找最长公共子串，也有点像求交集。", "声明一下，标题中的“最大公共偏序子集”这个名字是我乱取的，只是为了简要概括题意而已，不过或许数学里真有这么个说法。", "其实这里的集合，也不是严格数学定义的集合，可以当他是一个collection而不是set，也就是说，元素可重复。", "请各位给点思路就好"]], "Tag": "算法设计"}
{"Answer": "：D， 大概知道你是什么意思了。其实你用list 这个Collection就完全可以达到你要的效果了。\r\nSet 不允许有相同的对象如果你一定要把相同的对像放在一个Collection中的话那建议用List好了，这样就不会存在一个覆盖问题了。\r\n\r\n能不能在每次循环的完后即在还没有覆盖就把值给在前台给获得\r\n-----------------------------------------------------------\r\n不行，看一下Struts2 的流程图。顺便建议看一下Struts2的时序图。从页面到Action再到页面其实是一整个流程。Web Application都是按照这个流程走的。", "Konwledge_Point": "集合覆盖", "Question": ["一个ssh问题", ["初学ssh框架。对那个注射的原理有点模糊", "\n下面是我遇到的一个问题。请大家帮忙指教", "\n    public String queryAllCatory(){", "\n        catorys = this.getCatoryManager().queryCatory();", "\n        for(int i=0; i\n            catory = catorys.get(i);", "\n            sub = catory.getSubcatories();", "\n//          sub.add(catory.getSubcatories().iterator().next());", "\n//          System.out.println(\"-----------\"+ catory.getCatoryname()+\":\" + catory.getSubcatories().iterator().next());  ", "\n//          sub.add(catory.getSubcatories().iterator().next());", "\n        }", "\n        return SUCCESS;", "\n    }", "\n上面是action代码", "\n下面是jsp代码", "\n\n", "                <tr>\n                    <td>\n                        <s:property value=\"catoryname\" />\n                    </td>\n                    <td>\n                        <s:iterator value=\"sub\">\n                            <s:property value=\"subcatoryname\" />\n                        </s:iterator>\n                    </td>\n                </tr>\n            </s:iterator>\n", "\n\n", "我想在jsp页面获得值。但是我不明白为什么问题获得set集合最后一个值。他们不是一边循环一边把那个值传到jsp页面上的吗。请大家指教。", "\n\n", "我记得前面我做过类似的好像能获得这样的值的呀。弄不明白了。折腾了两天了也不知道怎么回事", "\n[b]问题补充：[/b]", "\n谢谢你的回答。我在后台给打出来了。sub里面是有值的。是最后一个值，我想知道怎么把他循环里面的每一个值都在前台给显示出来，我记得前面我做过就这样能把他给显示出来。  我的意思就是把他每一个循环的值在页面都能够显示出来。", "\n[b]问题补充：[/b]", "\n可能还没有表达清楚。可能在循环的时候每一次向sub里面放值的时候这次放的值把上次的值给覆盖了。我就是想知道的是：能不能在每次循环的完后即在还没有覆盖就把值给在前台给获得。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;/war exploded/addCart  这里是有空格的吗&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["java-web练习，点击addCart.html文档后，无法跳转到AddCartServlet，请问是不是下图红框所示的地址写错了？", ["这是项目文件列表及html文档的跳转地址", "以下为具体实现代码", "\n", "<!", "DOCTYPE", " html>\n<html lang=", "\"en\"", ">\n<head>\n    <meta charset=", "\"UTF-8\"", ">\n    <title>", "Title", "</title>\n</head>\n<body>\n<center>\n    <h1>商品列表</h1>\n    <a href=", "\"/war exploded/addCart?name=杯子\"", ">杯子</a><br>\n    <a href=", "\"/war exploded/addCart?name=书包\"", ">书包</a><br>\n    <a href=", "\"/war exploded/addCart?name=笔记本\"", ">笔记本</a><br>\n</center>\n</body>\n</html>\n\n", "package", " session;\n\n", "import", " javax.servlet.*;\n", "import", " javax.servlet.http.*;\n", "import", " javax.servlet.annotation.*;\n", "import", " java.io.", "IOException", ";\n", "import", " java.util.", "ArrayList", ";\n", "import", " java.util.", "List", ";\n\n", "@WebServlet", "(name = ", "\"AddCartServlet\"", ", urlPatterns = ", "\"/addCart\"", ")\npublic ", "class", " ", "AddCartServlet", " ", "extends", " ", "HttpServlet", " ", "{\n    ", "@Override", "\n    ", "protected", " void doGet(", "HttpServletRequest", " request, ", "HttpServletResponse", " response) ", "throws", " ", "ServletException", ", ", "IOException", " {\n\n        ", "//获取商品信息", "\n        ", "String", " name=request.getParameter(", "\"name\"", ");\n        ", "//在服务器中开辟一个能保存商品信息的内存空间session", "\n        ", "HttpSession", " session= request.getSession();\n\n        ", "//重点：以下代码实现目的为--在连续点击打开多个商品链接后，使多个商品信息可以通过name传进来保存在session中，不会被前个商品信息覆盖，只出现一个商品；", "\n\n        ", "//创建一个list类集合对象用来保存此前session中的所有商品信息；此处需要强转（将session转为List类使等号两边类型相等）", "\n        ", "List", " list=(", "List", ")session.getAttribute(", "\"list\"", ");\n        ", "//第一次访问的时候，list不存在，需要创建一个；", "\n        ", "if", " (list==", "null", "){\n            list=", "new", " ", "ArrayList", "();\n        }\n        ", "//将商品信息保存到list集合中", "\n        list.add(name);\n        ", "//在session内存空间中保存一个键为\"list\",值为list的商品", "\n        session.setAttribute(", "\"list\"", ",list);\n\n        ", "//方法重载，对session进行持久化操作，也就是持久化cookie里的JSESSIONID（标识id）", "\n        ", "Cookie", " cookie=", "new", " ", "Cookie", "(", "\"JSESSIONID\"", ",session.getId());\n        ", "//使session内存空间在无操作情况下存在时间变为24小时；", "\n        cookie.setMaxAge(", "60", "*", "60", "*", "24", ");\n        ", "//使cookie参数在war exploded目录下才会被携带；", "\n        cookie.setPath(", "\"/war exploded\"", ");\n        response.addCookie(cookie);\n    }\n\n    ", "@Override", "\n    ", "protected", " void doPost(", "HttpServletRequest", " request, ", "HttpServletResponse", " response) ", "throws", " ", "ServletException", ", ", "IOException", " {\n\n    }\n}\n\n", "package", " session;\n\n", "import", " javax.servlet.*;\n", "import", " javax.servlet.http.*;\n", "import", " javax.servlet.annotation.*;\n", "import", " java.io.", "IOException", ";\n", "import", " java.util.", "List", ";\n\n", "@WebServlet", "(name = ", "\"GetCartServlet\"", ", urlPatterns = ", "\"/getCart\"", ")\npublic ", "class", " ", "GetCartServlet", " ", "extends", " ", "HttpServlet", " ", "{\n    ", "@Override", "\n    ", "protected", " void doGet(", "HttpServletRequest", " request, ", "HttpServletResponse", " response) ", "throws", " ", "ServletException", ", ", "IOException", " {\n\n        ", "HttpSession", " session=request.getSession();\n        ", "List", "<", "String", "> list=(", "List", "<", "String", ">) session.getAttribute(", "\"list\"", ");\n        response.setCharacterEncoding(", "\"UTF-8\"", ");\n        response.setContentType(", "\"text/html;charset=UTF-8\"", ");\n\n        ", "for", " (", "String", " s : list){\n            response.getWriter().write(s+", "\"<br/>\"", ");\n        }\n    }\n\n    ", "@Override", "\n    ", "protected", " void doPost(", "HttpServletRequest", " request, ", "HttpServletResponse", " response) ", "throws", " ", "ServletException", ", ", "IOException", " {\n\n    }\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "以前是plug-in 现在是dropins文件夹了\r\n\r\n看这个博客你就知道了http://jyw.iteye.com/blog/210109\r\n还解决不了我就不信了", "Konwledge_Point": "集合覆盖", "Question": ["myeclipse7.1到底怎么装插件啊", ["想装javafx，只能用7 版本的myeclipse。", "\n但是，昏过去，这个插件到底怎么装啊，不管本地，还是远程都没法装插件啊。", "\n\n", "不管怎么弄，它好像都要去联网去装或者升级很多不相关的插件，而不是只安装某个指定的插件。", "\n但是，每次都在网上卡死。", "\n我只要装一个javafx插件啊，难道我就不能直接装它一下就行了么。搞了两天了，还是装不上。", "\n\n", "真不知道为什么要搞个什么pulse,是不是eclipse以后也想搞专制。", "\n[b]问题补充：[/b]", "\n[quote]覆盖到 features 和 plugins 目录下是一种办法,一般插件下载了都是压缩包你解压到eclipse安装目录覆盖这就可以了 ", "\n\n", "还有就是通过 Help---> Softwere Updates ---> find and install...-->>search for new features [/quote]", "\n\n", "这是以前版本才能用的；现在根本就不行了貌似。", "\n现在eclipse使用pulse来管理插件，以及升级。", "\n\n", "但我觉得这肯定通过某种方法还是能本地直接安装的，所以等待达人出现。", "\n[b]问题补充：[/b]", "\n[quote]", "http://www.vogella.de/articles/JavaFX/article.html#eclipse_install", " ", "\n\n", "这个肯定可以帮到你了.图文并茂,教你怎么装javaFX插件[/quote]", "\n\n", "这个根本没用，没讲怎么装，我以前看过", "\n[b]问题补充：[/b]", "\n补充一下；从myeclipse7开始貌似跟以前结构完全不一样了。", "\n连原始eclipse都没有，全都集合在myeclipse自己里面了。", "\n连links目录也没有", "\n[b]问题补充：[/b]", "\n[quote]", "http://www.vogella.de/articles/Eclipse/article.html#updatemanager", " ", "\n\n", "这里有说到怎么安装呀 ", "\nHelp -> Software Updates-> ", "\n单击Check for updates...(系统检测有没有可用跟新) ", "\n选择Available Software选项卡 ", "\n然后选择你要更新或者安装的插件,比如\"JavaFX plug-in\", ", "\n单击manage sites按钮 ", "\n选择JavaFx plug-in的更新站点,打开则可以看到安装包列表 ", "\n\n", "To add a new update site select on the tab \"Available Software\" the button \"Add Site\" and input the URL. This will then make this update site available and will allow you to install software from this site. ", "\n\n", "添加一个新的更新站点,选择\"available Software\"(可用软件)选项卡,点击\"add site\"按钮,输入url(", "http://download.java.net/general/javafx/eclipse/windows/site.xml)不知道是不是这个,你试一下,就可以更新", ". ", "\n\n", "1.4. Manual installation of plug-ins (dropins folder) ", "\n\n", "If you can't use or don't want to use the Eclipse update manager you can also put the plug-in into Eclipse dropins folder and restart Eclipse. After the restart Eclipse should detect the new plugin and install it for you. ", "\n另外也可以从", "http://download.java.net/general/javafx/eclipse/windows/", " 这里下载插件来拷贝到 eclipse安装目录中的相应文件夹中,然后重启,就可以检测到 [/quote]", "\n\n", "这个网站说的方法是通过网络安装，这是不可能装的，好像国内根本就连不上那些网现在。", "\n另外已经说了，myeclipse7开始，就已经没有什么eclipse目录了，不支持link目录了。", "\n\n", "我现在网上看到有些人说可以放在dropins目录下，就是不知道怎么使用"]], "Tag": "算法设计"}
{"Answer": "＝ ＝ 在java内部实际上是有指针概念的。你想，使用具有指针概念的cpu写出来的java解释器哪能离开指针概念？再说就像代词一样，你哪能少了指向其它变量的变量啊。\r\n解释你的问题：你的obj指向一个数组对象，你每次是在把同一个数组对象add到了list里，也即list里每一个坑指向的都是同一个数组对象。", "Konwledge_Point": "集合覆盖", "Question": ["关于 java Mysql的一个小问题，求帮忙解答", ["package ceshiJDBC;", "\n\n", "import java.util.Properties;", "\nimport java.io.FileNotFoundException;", "\nimport java.io.FileReader;", "\nimport java.io.IOException;", "\nimport java.security.KeyStore.ProtectionParameter;", "\nimport java.sql.*;", "\nimport java.util.ArrayList;", "\nimport java.util.List;", "\n//object数组存储", "\npublic class ORMDemo {", "\n\n", "static Properties pro=null;\nstatic Connection con=null;\nstatic PreparedStatement ps=null;\nstatic ResultSet rs=null;\nstatic Object[] obj=null;\nstatic List<Object[]> list=new ArrayList<Object[]>();\n\nstatic {\n    try {\n        pro=new Properties();\n        pro.load(new FileReader(\"D:\\\\JavaEEeclipse\\\\ceshiJDBC\\\\src\\\\ceshiJDBC\\\\JDBC.properties\"));\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\npublic static void main(String[] args) {\n\n\n    try {\n        Class.forName(pro.getProperty(\"mysqlDriver\"));\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    }\n\n    try {\n        con=new JDBCUtil().getCon();\n        ps=con.prepareStatement(\"select username,regTime from t_user where id>?\");\n        ps.setInt(1, 2);\n        rs=ps.executeQuery();\n         obj=new Object[2];\n        while(rs.next()) {\n            obj[0]=rs.getString(1);\n            obj[1]=rs.getDate(2);\n            list.add(obj);\n            System.out.println(rs.getString(1)+\"--\"+rs.getDate(2));\n        }\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    } catch (SQLException e) {\n        e.printStackTrace();\n    }\n    for(Object[] lists:list) {\n\n            System.out.println(\"\"+lists[0]+lists[1]);\n\n    }\n\n}\n", "\n\n", "}", "\n输出结果：", "\nnam--2017-11-27", "\n??--2017-11-27", "\ngerg--2017-11-27", "\nrg--2017-11-27", "\nrg2017-11-27", "\nrg2017-11-27", "\nrg2017-11-27", "\nrg2017-11-27", "\n\n", "为什么数据存到集合中时正常，而最后都被覆盖了？", "\n就是说，为什么最后结果都是rg2017-11-27？？"]], "Tag": "算法设计"}
{"Answer": "* The &lt;tt&gt;List&lt;/tt&gt; interface places additional stipulations, beyond those\r\n * specified in the &lt;tt&gt;Collection&lt;/tt&gt; interface, on the contracts of the\r\n * &lt;tt&gt;iterator&lt;/tt&gt;, &lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;equals&lt;/tt&gt;, and\r\n * &lt;tt&gt;hashCode&lt;/tt&gt; methods.  Declarations for other inherited methods are\r\n * also included here for convenience.&lt;p&gt;\r\n\r\n这个说的明白只是为了方便的，这样你就可以直接看到这个这个方法的注释了，不用再进入collection接口。因为基本上我们使用的都是list或是set。", "Konwledge_Point": "集合覆盖", "Question": ["一个关于接口的继承的问题", ["[code=\"java\"]public interface List extends Collection[/code]", "\n\n", "这是jdk中的结构.", "\ncollection中已经有size,isEmpty,toArray,isEmpty等方法,可是在list接口中,又去覆盖它,这是为什么啊,干嘛要多此一举?", "\n\n", ":x "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;###解决了&amp;#xff0c;我之前不知道为什么 &lt;a class=\"md_call_user\" type=\"user\"&gt;&amp;#64;Autowried会失败&amp;#xff0c;最后我使用手动注入RedisUtils&amp;#xff0c;成功了。&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;将原本的自动注入&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-meta\"&gt;&amp;#64;Autowired&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; RedisUtils redisUtil\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;改为手动注入&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; RedisUtils redisUtil &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;BeanUtils&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;get&lt;span class=\"hljs-constructor\"&gt;Bean(RedisUtils.&lt;span class=\"hljs-params\"&gt;class&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Bean工具类&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-meta\"&gt;&amp;#64;Component&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;BeanUtils&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;implements&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ApplicationContextAware&lt;/span&gt;  &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;protected&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; ApplicationContext applicationContext ;\n\n    &lt;span class=\"hljs-meta\"&gt;&amp;#64;Override&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;setApplicationContext&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(ApplicationContext arg0)&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (applicationContext &amp;#61;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;null&lt;/span&gt;) {\n            applicationContext &amp;#61; arg0;\n        }\n \n    }\n    &lt;span class=\"hljs-comment\"&gt;/**\n     * 拿到ApplicationContext对象实例后就可以手动获取Bean的注入实例对象\n     */&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=\"hljs-function\"&gt;T &lt;span class=\"hljs-title\"&gt;getBean&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Class&amp;lt;T&amp;gt; clazz)&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; applicationContext.&lt;span class=\"hljs-title\"&gt;getBean&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(clazz)&lt;/span&gt;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3 id=\"h3_完美解决_1647788493203\"&gt;完美解决&lt;/h3&gt;", "Konwledge_Point": "集合覆盖", "Question": ["【报NullPointerException】springboot 中 websocket 的 @OnMessage 中使用自定义的工具类，报空指针异常", ["问题遇到的现象和发生背景", "\n", "使用websocket谢了一个简单的聊天室，当聊天用户未上线的时候，给该未上线的用户发送消息，我是想保存将未上线用户为收到的消息保存到redis中，以便该未登录用户下次登录后可以从redis中获取其未登录是本应收到的消息。因为用户发送的消息是在onMessge中发送的，我在onMessage中使用自定义的RedisUtils（通过", "@Component注入到了springboot中了，用的时候使用了@Autowired自动装配），总是报“NullPointerException”。", "\n", "问题相关代码，请勿粘贴截图", "\n", "   @Autowired\n    ", "private", " RedisUtils redisUtil;\n\n    ", "// static：因为这个类是所有用户共享的，使用 static 可以保证存储的数据不会被覆盖", "\n    ", "private", " static Map<String,ChatEndpoint> onlineUser = ", "new", " ConcurrentHashMap<>", "()", ";\n\n    ", "// 声明 websocket session对象，使得每一个用户拥有自己的独立的 session，因此我们不能使用 static", "\n    ", "private", " Session wsSession;\n\n    ", "// 用户取出当前用户存在 httpSession 中的信息", "\n    ", "private", " HttpSession httpSession;\n\n    @OnOpen\n    public void on", "Open(Session ", "session", ", EndpointConfig ", "endpointConfig", ")", "{\n        ", "try", " {\n            ", "// 给当前的 WebSocket Session 赋值", "\n            this.wsSession = session;\n            ", "// 获取 httpSession，并存入当前的 httpSession", "\n            this.httpSession = (HttpSession) endpointConfig.get", "UserProperties()", ".get(", "HttpSession", ".", "class", ".get", "Name()", ");\n\n            onlineUser.put((String) httpSession.get", "Attribute(", "\"userId\"", ")", ", this);\n        } catch (Exception e) {\n            e.print", "StackTrace()", ";\n        }\n    }\n\n@OnMessage\n    public void on", "Message(String ", "message", ", Session ", "session", ")", "{\n        ", "try", " {\n            ", "// 将JSON 转换成 Object", "\n            MyMessage myMessage = ", "JSON", ".", "parse", "Object(", "message", ", MyMessage.", "class", ")", ";\n\n            ", "// 获取要发送的消息（JSON）", "\n            String targetSendMessage = ", "MessageUtils", ".", "get", "Message(", "false", ",(String)", " httpSession.get", "Attribute(", "\"userId\"", ")", ", myMessage.get", "Message()", ");\n\n            String listID = myMessage.get", "ToName()", " + httpSession.get", "Attribute(", "\"userId\"", ")", ";\n\n            ", "// 获取当前在线的用户集合", "\n            Set<String> onlineUsers = onlineUser.key", "Set()", ";\n            ", "// 若发送消息的目标在线，直接发送消息", "\n            ", "if", " (onlineUsers.contains(myMessage.get", "ToName()", ")) {\n                ", "// 发送消息", "\n                onlineUser.get(myMessage.get", "ToName()", ")    ", "// 获取目标用户对应的 ChatEndpoint 类", "\n                        .wsSession   ", "// 目标用户对应的 ChatEndpoint 类的成员变量", "\n                        .get", "BasicRemote()", "  ", "//", "\n                        .send", "Text(", "targetSendMessage", ")", ";  ", "// 发送消息（targetSendMessage  : JSON）", "\n\n            } ", "else", " { ", "// 发送消息的目标不在线", "\n                ", "// 获取以目标用户为主角的我们的聊天记录", "\n                List<Object> chatRecordOfText = get", "ChatRecordOfText(", "listID", ")", ";\n        } catch (IOException e) {\n            e.print", "StackTrace()", ";\n        }\n    }\n\n    ", "private", " List<Object> get", "ChatRecordOfText(String ", "listID", ")", "{\n        ", "try", " {\n            return redisUtil.l", "Get(", "listID", "+", "\"chattxt\"", ", 0, -1)", ";\n        } catch (Exception e) {\n            e.print", "StackTrace()", ";\n            return ", "new", " ArrayList<>", "()", ";\n        }\n    }\n", "\n", "运行结果及报错内容", "\n", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "1、我试过 new RedisUtils()，结果也是“空指针异常”", "\n", "我想要达到的结果", "\n", "能够在 OnMessage 使用自定义个 RedisUtils 访问 redis 服务器"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;需要先确定是否正确安装了jinja2&amp;#xff0c;如果没有&amp;#xff0c;通过pip install Jinja2安装一下&amp;#xff0c;如果已经安装&amp;#xff0c;那就可能是环境配置问题&amp;#xff0c;确定一下你安装的什么版本的python&amp;#xff0c;运行的时候又是用的什么版本的&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["出现cannot import name 'Markup' from 'jinja2'怎么解决", ["\n```python\n", "import", " pandas ", "as", " pd\n", "from", " pyecharts ", "import", " Geo,Line,Bar\n", "from", " pyecharts ", "import", " Overlap  ", "# 图表叠加类", "\n", "from", " wordcloud ", "import", " WordCloud, ImageColorGenerator    ", "# 词云图相关模块", "\n", "import", " matplotlib.pyplot ", "as", " plt                         ", "# 绘制图表的模块", "\n", "from", " os ", "import", " path                                     ", "# 路径", "\n", "import", " collections                                      ", "# 集合模块", "\n", "import", " jieba                                            ", "# 分词模块", "\n", "import", " imageio                                          ", "# 图片读取", "\n", "# 读取文件内容", "\ntomato_com = pd.read_excel(", "'夏洛特烦恼.xlsx'", ")\ngrouped = tomato_com.groupby([", "'city'", "])  ", "# 按照城市名称进行数据的分组", "\ngrouped_pct = grouped[", "'score'", "]  ", "# 获取分组后的评分信息", "\ncity_com = grouped_pct.agg([", "'mean'", ", ", "'count'", "])  ", "# 聚合数据，城市、平均分、数量", "\n        ", "# 重置数据的索引", "\ncity_com.reset_index(inplace=", "True", ")\n        ", "# 返回浮点数 0.01 返回到后两位", "\ncity_com[", "'mean'", "] = ", "round", "(city_com[", "'mean'", "], ", "2", ")\n        ", "# 创建热力图实例对象", "\ngeo = Geo(", "'《夏洛特烦恼 》 全国热力图'", ", title_color=", "\"#fff\"", ",\n                  title_pos=", "\"center\"", ", width=", "1200", ",\n                  height=", "600", ", background_color=", "'#404a59'", ")\nflag = ", "True", "\n        ", "# 创建城市与对应数量的列表数据", "\ndata = [(city_com[", "'city'", "][i], city_com[", "'count'", "][i]) ", "for", " i ", "in", " ", "range", "(", "0", ", city_com.shape[", "0", "])]\n", "while", " flag:\n            ", "# 转换数据序列，将带字典和元组类型的序列转换为 k_lst,v_lst 两个列表", "\n    attr, value = geo.cast(data)\n    ", "try", ":\n                ", "# 添加城市热点图", "\n                ", "# attr城市名称、value对应数量、type类型、visual_range热点区间值、visual_text_color字体颜色", "\n                ", "# is_visualmap是否为视觉地图、", "\n        geo.add(", "\"\"", ", attr, value, ", "type", "=", "\"heatmap\"", ", visual_range=[", "0", ", ", "50", "], visual_text_color=", "\"#fff\"", ",\n                        is_visualmap=", "True", ")\n        flag = ", "False", "     ", "# 修改循环标记", "\n    ", "except", " ValueError ", "as", " e:\n        e = ", "str", "(e)\n        e = e.split(", "\"No coordinate is specified for \"", ")[", "1", "]  ", "# 获取不支持的城市名", "\n        ", "for", " i ", "in", " ", "range", "(", "0", ", ", "len", "(data)):\n            ", "if", " e ", "in", " ", "list", "(data[i]):\n                ", "del", " data[i]  ", "# 将不支持城市名的数据删除", "\n                ", "break", "\n            flag = ", "True", "\n        ", "# 生成全国热力图html文件", "\ngeo.render(", "'夏洛特烦恼全国热力图.html'", ")\n\n", "# 2、生成主要城市评论数及平均分文件", "\n", "# 通过排序获取数量排行前30的城市信息", "\ncity_main = city_com.sort_values(", "'count'", ", ascending=", "False", ")[", "0", ":", "30", "]\nattr = city_main[", "'city'", "]     ", "# 获取城市名称的数据", "\nv1 = city_main[", "'count'", "]      ", "# 获取数量", "\nv2 = city_main[", "'mean'", "]       ", "# 获取平均分", "\nline = Line(", "\"主要城市评分\"", ")  ", "# 折线图对象", "\n        ", "# is_stack是否堆叠、xaxis_rotate（x轴城市名称旋转角度）", "\n        ", "# yaxis_min（y轴最小值）", "\n        ", "# mark_point（覆盖物的方式显示最高值和最小值）", "\n        ", "# xaxis_interval（x轴间隔距离，底部显示城市名称之间的距离）", "\n        ", "# line_color（线的颜色）", "\n        ", "# line_width（线宽度）", "\n        ", "# mark_point_textcolor（标记点文字的颜色）", "\n        ", "# is_splitline_show（是否显示分割线）", "\nline.add(", "\"城市\"", ", attr, v2, is_stack=", "True", ", xaxis_rotate=", "45", ", yaxis_min=", "0", ",\n                 mark_point=[", "'min'", ", ", "'max'", "], xaxis_interval=", "0", ", line_color=", "'lightblue'", ",\n                 line_width=", "4", ", mark_point_textcolor=", "'black'", ", mark_point_color=", "'yellow'", ",\n                 is_splitline_show=", "False", ")    ", "# 添加折线图", "\nbar = Bar(", "\"主要城市评论数\"", ")          ", "# 柱形图对象", "\nbar.add(", "\"城市\"", ", attr, v1, is_stack=", "False", ", xaxis_rotate=", "45", ", yaxis_min=", "0", ",\n                xaxis_interval=", "0", ", is_splitline_show=", "False", ",mark_point_color=", "'yellow'", ")   ", "# 添加柱形图", "\noverlap = Overlap()    ", "# 叠加图表对象", "\n        ", "# 默认不新增 x y 轴，并且 x y 轴的索引都为 0", "\noverlap.add(bar)\noverlap.add(line, yaxis_index=", "1", ", is_add_yaxis=", "True", ")\n        ", "# 生成主要城市评论数_平均分.html文件", "\noverlap.render(", "'主要城市评论数_平均分.html'", ")\n\n", "# 3、生成词云图", "\n", "# 获取评论内容", "\ntomato_str = ", "' '", ".join(tomato_com[", "'comment'", "])\nwords_list = []  ", "# 保存词汇的列表", "\n        ", "# 分词", "\nword_generator = jieba.cut_for_search(tomato_str)\n", "for", " word ", "in", " word_generator:\n    words_list.append(word)  ", "# 将拆分后的词汇添加至列表当中", "\nwords_list = [k ", "for", " k ", "in", " words_list ", "if", " ", "len", "(k) > ", "1", "]  ", "# 筛选词汇长度大于1的", "\nback_color = imageio.imread(", "'词云背景.jpg'", ")  ", "# 读取图片", "\nwc = WordCloud(background_color=", "'white'", ",  ", "# 背景颜色", "\n                       max_words=", "200", ",  ", "# 最大词数", "\n                       mask=back_color,  ", "# 以该参数值作图绘制词云，这个参数不为空时，width和height会被忽略", "\n                       max_font_size=", "300", ",  ", "# 显示字体的最大值", "\n                       font_path=", "\"STFANGSO.ttf\"", ",  ", "# 字体", "\n                       random_state=", "42", ",  ", "# 为每个词返回一个PIL颜色", "\n                       ", "# width=1000,  # 图片的宽", "\n                       ", "# height=860  # 图片的长", "\n                       )\ntomato_count = collections.Counter(words_list)  ", "# 统计数量", "\nwc.generate_from_frequencies(tomato_count)  ", "# 生成词云图", "\n        ", "# 基于彩色图像生成相应彩色", "\nimage_colors = ImageColorGenerator(back_color)\n        ", "# 创建图形", "\nplt.figure()\n        ", "# 显示彩色图像", "\nplt.imshow(wc.recolor(color_func=image_colors))\n        ", "# 去掉坐标轴", "\nplt.axis(", "'off'", ")\n        ", "# 保存词云图片", "\nwc.to_file(path.join(", "'词云.png'", "))\n\n", "\n", "为什么会出现这样的报错，这些库都安装了一个遍，是在pycharm上运行的", "\n", "\n", "\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;大部分比较基础&amp;#xff0c;操作题有点费点时间。&lt;/p&gt;\n\n&lt;p&gt;一、选择题&lt;/p&gt;\n\n&lt;p&gt;1、D&lt;/p&gt;\n\n&lt;p&gt;2、C&lt;/p&gt;\n\n&lt;p&gt;3、B&lt;/p&gt;\n\n&lt;p&gt;4、A&lt;/p&gt;\n\n&lt;p&gt;5、B&lt;/p&gt;\n\n&lt;p&gt;6、C&lt;/p&gt;\n\n&lt;p&gt;7、C&lt;/p&gt;\n\n&lt;p&gt;8、B&lt;/p&gt;\n\n&lt;p&gt;9、A&lt;/p&gt;\n\n&lt;p&gt;10、D&lt;/p&gt;\n\n&lt;p&gt;11、C&lt;/p&gt;\n\n&lt;p&gt;12、A&lt;/p&gt;\n\n&lt;p&gt;13、D&lt;/p&gt;\n\n&lt;p&gt;14、D&lt;/p&gt;\n\n&lt;p&gt;15、B&lt;/p&gt;\n\n&lt;p&gt;二、填空题&lt;/p&gt;\n\n&lt;p&gt;1、[1,2]&lt;/p&gt;\n\n&lt;p&gt;2、[6, 7, 9, 11]&lt;/p&gt;\n\n&lt;p&gt;3、评分、降序&lt;/p&gt;\n\n&lt;p&gt;4、代码如下&amp;#xff0c;按照填空需求填空即可。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;list1&amp;#61;[&amp;#39;张杨华&amp;#39;,&amp;#39;韩冠浩&amp;#39;,&amp;#39;刘斯&amp;#39;,&amp;#39;李弘&amp;#39;,&amp;#39;关申海&amp;#39;,&amp;#39;李晓思&amp;#39;,&amp;#39;李思慧&amp;#39;,&amp;#39;刘潇斯&amp;#39;,&amp;#39;刘斯&amp;#39;]\nlist1[list1.index(&amp;#39;李弘&amp;#39;)]&amp;#61;&amp;#39;李泓&amp;#39;\nlist1.remove(&amp;#39;刘斯&amp;#39;)\nlist1.append(&amp;#39;张瀚&amp;#39;) \nprint(list1)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;5、代码如下&amp;#xff0c;按照填空需求填空即可。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;t_array&amp;#61;[(4,5,6,7),(8,9,10,11),(12,13,14,15),(16,17,18,19)]\nsum&amp;#61;0\nfor arr in t_array:\n    for i in range(4):\n        sum&amp;#43;&amp;#61;arr[i]\nprint(sum)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;三、操作题&lt;/p&gt;\n\n&lt;p&gt;1、代码如下&amp;#xff0c;网上有一模一样的题目&amp;#xff0c;不过代码有点问题&amp;#xff0c;改正如下&amp;#xff0c;思路就是排除法。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;import string\ndef str_count(str):\n    count_en &amp;#61; count_dg &amp;#61; count_sp &amp;#61;count_zh &amp;#61; count_pu &amp;#61; 0\n    for s in str:\n        # 统计英文字母个数 \n        if s in string.ascii_letters:\n            count_en &amp;#43;&amp;#61; 1 \n        # 统计数字个数\n        elif s.isdigit(): \n            count_dg &amp;#43;&amp;#61; 1\n        # 统计空格个数 \n        elif s.isspace():\n            count_sp &amp;#43;&amp;#61; 1 \n        # 统计中文个数\n        elif s.isalpha():\n            count_zh &amp;#43;&amp;#61; 1\n        # 剩余就是标点符号 \n        else:\n            count_pu &amp;#43;&amp;#61; 1 \n    print(&amp;#39;英文字符:&amp;#39;, count_en)\n    print(&amp;#39;数字:&amp;#39;, count_dg) \n    print(&amp;#39;空格:&amp;#39;, count_sp) \n    print(&amp;#39;中文:&amp;#39;, count_zh) \n    print(&amp;#39;标点符号:&amp;#39;, count_pu)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;2、代码如下&amp;#xff0c;网上有类似的题目&amp;#xff0c;不过这个题目要求更严格&amp;#xff0c;所以for循环中这样写。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;import random\nrandom.seed(0x1010)\ns&amp;#61;&amp;#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789!&amp;#64;#$%&amp;amp;*-&amp;#34; \nls&amp;#61;[]\nexcludes&amp;#61;&amp;#34;&amp;#34;\n\nwhile len(ls)&amp;lt;20:\n    pwd&amp;#61;&amp;#34;&amp;#34;\n\n    for i in range(3):\n        pwd&amp;#43;&amp;#61;random.choice(s[:26])\n        pwd&amp;#43;&amp;#61;random.choice(s[26:53])\n        pwd&amp;#43;&amp;#61;random.choice(s[53:64])\n        pwd&amp;#43;&amp;#61;random.choice(s[64:len(s)&amp;#43;1])\n        \n    if pwd[0] in excludes:\n        continue\n    else:\n        ls.append(pwd)\n        excludes&amp;#43;&amp;#61;pwd[0]\n\n    with open(&amp;#39;激活码.txt&amp;#39;,&amp;#39;w&amp;#39;) as f:\n        f.write(&amp;#39;\\n&amp;#39;.join(ls))&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "集合覆盖", "Question": ["大佬们，可以帮我做做这张试卷吗。很快考试了。做一道也可以，给个答案就行了，", ["  全国高等学校计算机水平考试II级---《Python 程序设计》考试大纲 (试行)", "\n一、考试目标与要求", "\n考试目标:测试考生系统掌握 Python 基本概念及其编程思想，了解 Python 计算生态，利 用 Python 进行数据处理及解决问题的能力。", "\n考试要求:", "\n1. 熟练掌握 Python 语言基础语法，掌握模块化程序设计思想，了解面向对象基本概念。 2. 熟练掌握 Python 常用标准库及第三方库的使用。", "\n3. 能够阅读和分析 Python 程序，利用 Python 进行简单的数据处理及数据可视化。", "\n二、考试内容", "\n(一)基础知识", "\n【考试要求】", "\n掌握Python中的常量、变量、数据类型、运算符、表达式、内置函数和基本输入输出。 【主要考点】", "\n1.常量与变量", "\n2.基本数据类型 3.运算符与表达式 4.数据类型转换 5.字符串类型及相关函数/方法 6.基本输入输出", "\n7. Python常用内置函数 8.注释", "\n(二)流程控制", "\n【考试要求】 掌握Python程序格式框架及书写风格，掌握顺序、选择、循环结构在Python中的实现方", "\n法，能灵活运用不同的控制结构解决实际问题。 【主要考点】", "\n1.顺序结构", "\n2. 选择结构:单分支、双分支、多分支选择结构，选择结构的嵌套", "\n3. 循环结构:for 循环、while 循环，带有 else 子句的循环，break 与 continue 语句的作", "\n用", "\n4. 程序的异常处理:try ---except", "\n(三)高级数据类型", "\n【考试要求】 掌握Python中列表、元组、字典、集合的使用方法以及应用场合;了解不同数据类型的", "\n     1/7", "\n\n", "  优缺点和适用领域;学会综合应用多种数据类型解决实际问题。 【主要考点】 1.列表:创建、删除、修改、切片、访问、排序;多维列表", "\n2. 元组:创建、删除、切片、访问", "\n3. 字典:创建、删除、添加、修改及访问，有序字典的使用", "\n4. 集合:创建、删除、访问，集合的并、交、差以及对称差等运算 5. 列表、元组、集合的区别及相互转换", "\n(四)模块化程序设计", "\n【考试要求】 了解模块化程序设计思想，掌握分而治之的结构化程序设计方法;掌握函数定义、参数传", "\n递及高级函数的使用;了解变量作用域的含义;掌握匿名函数的定义及使用。 【主要考点】", "\n1. 函数定义与使用", "\n2. 函数参数:默认参数、可变参数、关键字参数", "\n3. 变量作用域:局部变量和全局变量", "\n4. 匿名函数的定义及使用", "\n5. 高级函数(map、reduce、filter)的使用", "\n(五)面向对象程序设计", "\n【考试要求】 了解Python中面向对象程序设计的基本方法，包括类的定义与使用、类的属性、类中的", "\n特殊方法。", "\n【主要考点】", "\n1. 类的定义与使用", "\n2. 类成员访问控制", "\n3. 继承与多态", "\n4. 特殊方法与运算符重载", "\n(六)文件操作", "\n【考试要求】 要求考生掌握文件的基本操作,掌握CSV、Excel文件的读取。", "\n【主要考点】", "\n1. 文件的使用:打开、读写、定位和关闭 2. 一二维数据组织:存储、处理及可视化 3. 读写CSV格式数据文件", "\n4. 读取Excel格式数据文件(pandas库)", "\n(七)模块与库", "\n【考试要求】 了解Python生态系统，掌握Python常用标准库，运用第三方库解决实际问题,包括但不限", "\n于网络爬虫、数据分析、文本处理、数据可视化、机器学习、Web应用开发、网络编程等领域。 【主要考点】", "\n     2/7", "\n\n", "  1. Python常用标准库:random、math、string、OS、time、datetime、urllib.request。 2.第三方库:Matplotlib、pandas、jieba、wordcloud、requests、BeautifulSoup4、XPath、 NumPy、Scrapy。", "\n三、考试方式", "\n机试(考试时间:105 分钟)", "\n考卷题型题量:卷面总分 100。单选题(15 题，30 分)、填空题(5 题，30 分)和操作题", "\n(程序代码挖空题)(2 题，40 分)。", "\n四、考试环境要求", "\nPython 3.7 及以上，可选装 PyScripter、Pycharm、Anaconda、VSCode 等 IDE 编程环境。", "\n五、考试样题", "\n(一)单选题(15 题，30 分) 1、下面__________不是 Python 合法标识符。", "\nA) __name32 B) name32", "\nC) __name32__ D) 32name", "\n2、关于 Python 内存管理，下面__________说法错误。", "\nA) 当 Python 运行时垃圾回收也会启动", "\nB) python 会自己管理内存，对于占用很大内存的对象，并不会马上释放 C) Python 采用了类似 Windows 内核对象一样的方式来对内存进行管理 D) Python 语言，对象的类型和内存都是在运行时确定的", "\n3、在 Python3 中，下列不支持的数字类型是__________。", "\nA) 浮点型 B) 分数 C) 复数 D) 长整型", "\n4、下列不能作为字典的键是__________。 A) 变量", "\nB) 字符 C) 元组 D) 数字", "\n5、关于单引号，双引号，三引号的说法错误的是__________。", "\nA) 单引号和双引号是等效的", "\nB) 单引号，双引号，三引号，如果要换行，需要符号(\\)，不可以直接换行 C) 三引号则可以直接换行，并且可以包含注释", "\nD) 三引号可以包含双引号，而不需要转义", "\n6、在 Python3 中下列__________语句是非法的。", "\n     3/7", "\n\n", "  A) m=(n=a+1) B) a,b=b,a", "\nC) m,n='ab' D) m,n=3,4", "\n7、在 Python3 中，关于模块说法错误的是__________。", "\nA) 模块是对象", "\nB)模块是一个 Python 文件", "\nC) 模块能定义函数和变量，但不能定义类", "\nD) 在不同的模块中可以存在相同名字的函数名和变量名", "\n8、关于变量的作用域说法错误的是__________。", "\nA) 如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量 B) Python 变量的作用域不由变量所在源代码中的位置决定", "\nC) 全局变量如果是在函数内部赋值的话，必须经过声明", "\nD) 全局变量在函数内部不经过声明也可以使用", "\n9、以下关于异常处理的描述，正确的是__________。", "\nA) try 语句中有 except 子句，但也可以有 finally 子句", "\nB) Python 中不允许利用 raise 语句由程序主动引发异常 C)引发一个不存在索引的列表元素会引发 NameError 错误 D)Python 中，可以用异常处理捕获程序中的所有错误", "\n  10、以下语句会无限循环下去的是__________。", "\n A) for n in range(1000): time.sleep(5)", "\nC) while False: continue", "\nB) while 1<10: time.sleep(10)", "\nD) while True: break", "\n11、Python 变量命名规则说法错误的是__________。", "\nA) 变量名不能包含空格，但可使用下划线来分隔其中的单词。 B) 不论是类成员变量还是全局变量，均不使用 m 或 g 前缀 C) 变量名只能包含字母、数字和下划线。以字母或数字开头 D) 变量名不应带有类型信息，因为 Python 是动态类型语言", "\n12、关于 Python 的 lambda 函数，以下选项中描述错误的是__________。", "\nA) f = lambda x,y:x+y 执行后，f 的类型为数字类型", "\nB) lambda 函数是指一类无需定义标识符(函数名)的函数或子程序", "\nC) lambda 函数可以接收任意多个参数 (包括可选参数) 并且返回单个表达式的值 D) lambda 的主体是一个表达式，而不是一个代码块", "\n13、以下选项中，不是 Python 语言保留字的是__________。 A) pass", "\nB) continue C) except D) next", "\n14、关于 Python 程序中与“缩进”有关的说法中，以下选项中不正确的是__________。", "\nA) 缩进统一为 4 个空格且强制使用", "\nB) Python 中的每一条语句都有一个缩进级别，并且缩进级别会使用栈的数据结构进行存", "\n储", "\n  4/7", "\n\n", "  C) Python 中的缩进是有语法含义的，它用来表示一个代码块 D) 一条比较长的语句也可以用缩进分成多行", "\n15、关于 Python 循环结构，以下选项中描述错误的是__________。", "\nA) 每个 continue 语句只有能力跳出当前层次的循环", "\nB) continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮", "\n循环", "\nC) break 跳出并结束当前整个循环，执行循环后的语句", "\nD) while 循环不会迭代 list 或 tuple 的元素，而是根据表达式判断循环是否结束", "\n(二)填空题(5 题，30 分)", "\n1、表达式 [x for x in [1,2,3,4,5] if x<3]的值为 1", "\n2、设列表对象 aList 的值为[3, 4, 5, 6, 7, 9, 11, 13, 15, 17]，那么 aList[3:7]得到的值是 2 3、从猫眼电影热门榜单上爬取电影信息(包括电影名、主演、上映时间、评分)，结果保存 形式为 item= [('少年的你','主演:周冬雨','上映时间:06-27',9.5),┈],那么使用 item.sort(key=lambda x:x[3],reverse=True)语句的作用是对 3 (电影名/主演/上映时间/评 分)进行 4 (升序/降序)排列", "\n4、list1 中存放李小姐结婚请帖名单，她发现把“李泓”写成了“李弘”，少写“张瀚”， “刘 斯”名字有重复，得把第一删除，请补全横线处的代码，请你帮她更正过来。", "\nlist1=['张杨华','韩冠浩','刘斯','李弘','关申海','李晓思','李思慧','刘潇斯','刘斯'] 5 ('李泓')", "\n6 ('刘斯')", "\n7 ('张瀚') print(list1)", "\n5、t_array 中存放 4╳4 的二维数组，下列程序是计算该二维数组各元素的和，请完善下列代 码。", "\nt_array=[(4,5,6,7),(8,9,10,11),(12,13,14,15),(16,17,18,19)] sum= 8", "\nfor arr in t_array:", "\nfor i in 9 : 10", "\nprint(sum)", "\n(三)操作题(程序代码挖空题)(2 题，40 分)", "\n                  5/7", "\n\n", "  1、在考试操作试题文件夹里，打开“gdpython1.py”文件，按下面的要求完成操作: 从键盘上输入一段文字，调用下列函数，能统计出该段文字的中文个数、英文个数、数", "\n字个数和标点符号的个数。请完善代码。", "\nimport string", "\ndef str_count(str):", "\ncount_en = count_dg = count_sp =count_zh = count_pu = 0 for s in str:", "\n# 统计英文字母个数 if s in string. 1 :", "\ncount_en += 1 # 统计数字个数", "\nelifs. 2 : count_dg += 1", "\n# 统计中文个数 elifs. 3 :", "\ncount_zh += 1 # 统计空格个数", "\nelif s. 4 : count_sp += 1", "\n# 统计标点符号个数 else:", "\ncount_pu += 1 print('英文字符:', count_en)", "\nprint('数字:', count_dg) print('空格:', count_sp) print('中文:', count_zh) print('标点符号:', count_pu)", "\n2、在考试操作试题文件夹里，打开“gdpython2.py”文件，按下面的要求完善列代码，生产 随机激活码。具体要求如下:", "\n(1) 使用random库，采用0x1011作为随机种子。", "\n(2) 每次产生20条激活码，且首字不能一样。每条激活码单独一行。", "\n(3) 必须包含大写字母、小写字母和数字，必需包括“!@#$%&*-”8个特殊符号中的某", "\n一个。", "\n(4) 每次激活码产生的长度为12位。", "\n(5) 不能重复。", "\n(6) 程序所产生的激活码保存在“激活码.txt”文件中。", "\nimport random", "\nrandom. 1 s=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789!@#$%&*-\" ls=[]", "\nexcludes=\"\"", "\nwhile 2 :", "\n          pwd=\"\"", "\n 6/7", "\n\n", "  for i in 3 : 4", "\nif pwd[0] in excludes:", "\n5", "\nelse:", "\nls. 6", "\nexcludes+= 7 with open('激活码.txt','w') as f:", "\nf.write('\\n'. 8 )", "\n           7/7"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个是 带参数的 python 程序文件。&lt;br /&gt;VS 应该也有对应输入参数的设置&lt;br /&gt;pycharm 是这个位置&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/969002519936117.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;比如这个这个程序命名为 work.py  &amp;#xff0c; 你要分析的文件是 doc1.txt&lt;br /&gt;一般就是去命令提示符下&amp;#xff0c; 直接运行即可。&lt;br /&gt;python work.py doc1.txt&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["如何用python %s调用程序？", ["现有一段2008年的代码，其中的运行方法为", "\n", "python %s [", "<文件名匹配式>", " [", "<更多文件名匹配式>", "...]]\n\n", "\n", "但是尝试在vscode上运行则会报错，如下图", "\n", "在新版IDLE上运行则无响应：", "\n", "\n", "请问这个代码能如何被调用？谢谢！", "\n", "附上完整代码：", "\n", " \n", "# !/usr/bin/env python", "\n", "# This file has following encoding: utf-8", "\n", "######################## 模块文档 ########################", "\n", "\"\"\"\n“%s”汉语拼音-国际音标转换工具 2.1版（2007年9月16日）\n作者：徐清白(http://xuqingbai.googlepages.com)，首发于2007年8月6日\n授权：自由软件（GNU 通用公共许可证）\n要求：必须使用 Python 2.5 或更新版本的解释器运行\n用法：python %s [<文件名匹配式> [<更多文件名匹配式>...]]\n功能：从符合每个<文件名匹配式>的所有文件或标准输入流(stdin)读取汉语拼音文稿，\n      向标准输出流(stdout)写入经过转换得到国际音标文稿。结果仅供学习参考。\n注意：<文件名匹配式> 采用 UNIX shell 风格的 glob 匹配规则\n文稿格式：<单字拼音>[[ |']<更多单字拼音>...]\n其中：<单字拼音> = <汉语拼音字母串>[<声调标号>]\n      <声调标号> 取值1-5（对应四声和轻声）\n标音风格：适度严格的IPA音素音标＋部分汉语言学界专用符号\n详细的用户文档请参看“DOC_USERSGUIDE.html”文件\n\"\"\"", "\n", "######################## 模块导入 ########################", "\n", "import", " os, re\n", "######################## 全局变量 ########################", "\n", "# 三种字符集标志", "\nGB18030, GBK, UTF8 = ", "\"gb18030\"", ", ", "\"gbk\"", ", ", "\"utf8\"", "\n", "# 字符编码页解码失败标志", "\ndecodingFailed = ", "False", "  ", "# 初始状态：关闭", "\n", "# 正则表达式替换命令元组和内部标志", "\ncmdPairTuple = ", "tuple", "()  ", "# 预备空对象", "\nPATTERN, SUBST = ", "0", ", ", "1", "  ", "# 匹配段和替换段", "\n", "# 经过编译的正则表达式对象列表", "\nreList = []  ", "# 预备空对象", "\n", "# 创建正则表达式替换命令元组的默认设置表（固定集合对象）", "\ndefaultPrefSet = ", "frozenset", "([\n    ", "### 以下各行字符串，凡行首用#号注释者均表示无效；", "\n    ", "### 凡行首未用#号注释者均有效，效用如后面注释所述：", "\n    ", "# \"NUMBER_2_BY_AR4\",                      # 数字“二”有大开口度韵腹", "\n    ", "# \"AI_INC_NEAR_OPEN_FRONT\",               # ai/uai韵腹为舌面前次开元音", "\n    ", "# \"AIR_ANR_INC_NEAR_OPEN_CENTRAL\",        # air/anr韵腹为舌面央次低元音", "\n    ", "# \"CENTRAL_A_BY_SMALLCAPS_A\",             # “央a”采用小型大写[A]标明", "\n    ", "# \"IE_YUE_INC_SMALLCAPS_E\",               # ie/yue采用小型大写[E]标明", "\n    ", "# \"IE_YUE_INC_E\",                         # ie/yue采用[e]标明（覆盖上一条）", "\n    ", "# \"IAN_YUAN_AS_AN\",                       # ian/yuan韵腹和an一样", "\n    ", "# \"ONLY_YUAN_AS_AN\",                      # 仅yuan韵腹和an一样（覆盖上一条）", "\n    ", "# \"OU_INC_SCHWA\",                         # ou/iou采用舌面央中元音韵腹", "\n    ", "# \"IONG_BY_IUNG\",                         # iong韵母采用i韵头u韵腹", "\n    ", "# \"ASPIRATE_BY_TURNED_COMMA\",             # 采用反逗号弱送气符号", "\n    ", "# \"RHOTICITY_BY_RHOTIC_HOOK\",             # 儿化韵卷舌动作采用卷舌小钩", "\n    ", "# \"ONLY_ER_BY_RHOTIC_HOOK\",               # 只有er音节卷舌动作采用卷舌小钩", "\n    ", "# \"INITIAL_R_BY_VED_RETRO_FRIC\",          # 声母r为卷舌浊擦音而非卷舌通音", "\n    ", "# \"R_TURNED_WITH_HOOK\",                   # 严格采用卷舌通音符号", "\n    ", "# \"TRANSITIONAL_SCHWA_IN_ING\",            # ing有舌面央中元音韵腹", "\n    ", "# \"TRANSITIONAL_SCHWA_IN_UEN\",            # 合口un有舌面央中元音韵腹", "\n    ", "# \"NO_TRANSITIONAL_U\",                    # bo/po/mo/fo没有[u]韵头", "\n    ", "# \"SYLLABLE_JUNCTURE_BY_PLUS\",            # 音节间断采用开音渡+号而非.号", "\n    ", "# \"HTML_SUP_TAG_FOR_TONE_VALUE\",          # 调值采用HTML上标标签格式", "\n    ", "# \"HIDE_ALL_TONE_VALUE\",                  # 隐藏所有声调转换", "\n    ", "### 以下选项仅存设想，目前尚未实现：", "\n    ", "# \"RETROFLEX_INITIAL_STANDALONE\",         # 卷舌声母可成音节而无需舌尖元音", "\n    ", "# \"ZERO_INITIAL_HAS_CONSONANT\",           # 零声母有辅音", "\n])\n", "# 正则表达式替换命令元组一揽子创建设置方案（元组，[0]位为说明）", "\nrecipeLinWang1992 = (", "U\"林焘、王理嘉《语音学教程》\"", ",\n                     ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"AI_INC_NEAR_OPEN_FRONT\"", "\n                     )\nrecipeBeidaCN2004 = (", "U\"北京大学中文系《现代汉语》（重排本）\"", ",\n                     ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n                     ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ", ", "\"IONG_BY_IUNG\"", ", ", "\"IAN_YUAN_AS_AN\"", "\n                     )\nrecipeHuangLiao2002 = (", "U\"黄伯荣、廖序东《现代汉语》（增订三版）\"", ",\n                       ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"CENTRAL_A_BY_SMALLCAPS_A\"", ",\n                       ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ", ", "\"ONLY_YUAN_AS_AN\"", ", ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ",\n                       ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "\n                       )\nrecipeYangZhou1995 = (", "U\"杨润陆、周一民《现代汉语》（北师大文学院教材）\"", ",\n                      ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n                      ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "\n                      )\nrecipeYuan2001 = (", "U\"袁家骅等《汉语方言概要》（第二版重排）\"", ",\n                  ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n                  ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ", ", "\"IAN_YUAN_AS_AN\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n                  ", "\"IE_YUE_INC_E\"", "\n                  )\nrecipeTang2002 = (", "U\"唐作藩《音韵学教程》（第三版）\"", ",\n                  ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n                  ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ", ", "\"IAN_YUAN_AS_AN\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n                  ", "\"IE_YUE_INC_E\"", ", ", "\"OU_INC_SCHWA\"", "\n                  )\n \n", "######################## 函数声明 ########################", "\n", "def", " ", "createCmdPairTuple", "(", "prefSet=defaultPrefSet", "):\n    ", "\"\"\"创建正则表达式替换命令元组\n    然后编译便于反复使用的匹配段正则表达式对象列表\n    参数prefSet是一个控制命令元组创建的选项设置序列\"\"\"", "\n    ", "### 预先处理同系列设置的覆盖关系——defaultPrefSet也可能让人动了手脚", "\n    prefSet = ", "set", "(prefSet)  ", "# 先换为可变集合副本，以防固定类型参数", "\n    ", "if", " ", "\"IE_YUE_INC_E\"", " ", "in", " prefSet ", "and", " ", "\"IE_YUE_INC_SMALLCAPS_E\"", " ", "in", " prefSet:\n        prefSet.remove(", "\"IE_YUE_INC_SMALLCAPS_E\"", ")\n    ", "if", " ", "\"ONLY_YUAN_AS_AN\"", " ", "in", " prefSet ", "and", " ", "\"IAN_YUAN_AS_AN\"", " ", "in", " prefSet:\n        prefSet.remove(", "\"IAN_YUAN_AS_AN\"", ")\n    ", "global", " cmdPairTuple\n    cmdPairTuple = (\n        ", "### 转换声母前的预处理", "\n        ", "# 音节间断与隔音符号", "\n        (", "R'([aoeiuvüê][1-5]?)([yw])'", ",  ", "# a/o/e前有元音时必须写隔音符号", "\n         ", "R\"\\1'\\2\"", "),  ", "# 标明不必写出隔音符号的音节间断", "\n        (", "R\"'\"", ", (", "R\"+\"", " ", "if", " ", "\"SYLLABLE_JUNCTURE_BY_PLUS\"", " ", "in", " prefSet ", "else", "\n                 ", "R\".\"", ")),  ", "# 音节间断（开音渡）标记", "\n        ", "# 兼容正规的印刷体字母ɡ/ɑ->g/a", "\n        (", "R\"ɡ\"", ", ", "R\"g\"", "),\n        (", "R\"ɑ\"", ", ", "R\"a\"", "),\n        ", "# 特殊的ê韵母，只能搭配零声母（“诶”字等）", "\n        (", "R\"(ê|ea)\"", ", ", "R\"ɛ\"", "),  ", "# ea是ê的GF 3006表示", "\n        ", "# 消除因可以紧邻韵腹充当声母或韵尾的辅音的歧义", "\n        (", "R\"r([aoeiu])\"", ", ", "R\"R\\1\"", "),  ", "# 声母r暂改为R，以免与卷舌标志r混淆", "\n        (", "R\"n([aoeiuvü])\"", ", ", "R\"N\\1\"", "),  ", "# 声母n暂改为N，以免与韵尾n/ng混淆", "\n        ", "# 需要排除式匹配转换的韵母", "\n        (", "R\"ng(?![aeu])\"", ", ", "R\"ŋ\"", "),  ", "# 双字母ng，后鼻音韵尾或自成音节", "\n        (", "R\"(?<![ieuyüv])e(?![inŋr])\"", ",\n         ", "R\"ɤ\"", "),  ", "# 单韵母e，此前已转换ea和声母r/n", "\n        (", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])er4\"", ",\n         (", "R\"ar4\"", " ", "if", " ", "\"NUMBER_2_BY_AR4\"", " ", "in", " prefSet ", "else", "\n          ", "R\"er4\"", ")),  ", "# 数字“二”是否有大开口度韵腹", "\n        (", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])ar4\"", ",\n         (", "R\"a˞4\"", " ", "if", " ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", " ", "in", " prefSet ", "else", "\n          ", "R\"ar4\"", ")),  ", "# 数字“二”也属于er音节，可特别选用小钩", "\n        (", "R\"a(?![ionŋ])\"", ", (", "R\"ᴀ\"", " ", "if", " ", "\"CENTRAL_A_BY_SMALLCAPS_A\"", " ", "in", " prefSet ", "else", "\n                           ", "R\"a\"", ")),  ", "# “央a”是否用小型大写[A]标明，已转换“二”", "\n        (", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])er\"", ",\n         (", "R\"ə˞\"", " ", "if", " ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", " ", "in", " prefSet ", "else", "\n          ", "R\"ər\"", ")),  ", "# 一般的卷舌单韵母er，此前已排除“二”", "\n        (", "R\"(?<![iuüv])er\"", ", ", "R\"ər\"", "),  ", "# 构成单韵母e的儿化韵的er", "\n        (", "R\"(?<=[bpmf])o(?![uŋ])\"", ",\n         (", "R\"o\"", " ", "if", " ", "\"NO_TRANSITIONAL_U\"", " ", "in", " prefSet ", "else", "\n          ", "R\"uo\"", ")),  ", "# bo/po/mo/fo是否有韵头u", "\n        ", "### 声母——无需转换m/f/n/l/s/r(但r可根据设置执行转换)", "\n        ", "# 送气清辅音声母", "\n        (", "R\"([ptk])\"", ", ", "R\"\\1ʰ\"", "),\n        (", "R\"q\"", ", ", "R\"tɕʰ\"", "),\n        (", "R\"(ch|ĉ)\"", ", ", "R\"tʂʰ\"", "),  ", "# 后者是ch的注音变体", "\n        (", "R\"c\"", ", ", "R\"tsʰ\"", "),  ", "# 此前已排除ch", "\n        ", "# 不送气清辅音声母", "\n        (", "R\"b\"", ", ", "R\"p\"", "),  ", "# 此前已排除送气的p/t/k", "\n        (", "R\"d\"", ", ", "R\"t\"", "),\n        (", "R\"g\"", ", ", "R\"k\"", "),  ", "# 此前已排除后鼻音双字母中的g，注意隔音", "\n        (", "R\"j\"", ", ", "R\"tɕ\"", "),\n        (", "R\"(zh|ẑ)\"", ", ", "R\"tʂ\"", "),  ", "# 后者是zh的注音变体", "\n        (", "R\"z\"", ", ", "R\"ts\"", "),  ", "# 此前已排除zh", "\n        ", "# 擦音声母", "\n        (", "R\"(sh|ŝ)\"", ", ", "R\"ʂ\"", "),  ", "# 后者是sh的注音变体", "\n        (", "R\"x\"", ", ", "R\"ɕ\"", "),  ", "# 声母x，排除后再转换h", "\n        (", "R\"h\"", ", ", "R\"x\"", "),  ", "# 声母h，此前已排除zh/ch/sh", "\n        ", "### 韵母", "\n        ", "# 舌尖元音韵母", "\n        (", "R\"(sʰ?)i\"", ", ", "R\"\\1ɿ\"", "),  ", "# zi/ci/si", "\n        (", "R\"([ʂR]ʰ?)i\"", ", ", "R\"\\1ʅ\"", "),  ", "# zhi/chi/shi/ri", "\n        ", "# 部分韵腹省略表示的韵母+隔音符号和韵头w/y", "\n        (", "R\"iu\"", ", ", "R\"iou\"", "),  ", "# 无需转换iou", "\n        (", "R\"ui\"", ", ", "R\"uei\"", "),  ", "# 无需转换uei", "\n        (", "R\"wu?\"", ", ", "R\"u\"", "),\n        (", "R\"yi?\"", ", ", "R\"i\"", "),  ", "# 此前已排除iu", "\n        ", "# 韵头[i]/[y]的韵母", "\n        (", "R\"iu|[üv]\"", ", ", "R\"y\"", "),  ", "# 转换ü/v，恢复yu/yue，准备yuan/yun", "\n        (", "R\"ian\"", ", (", "R\"ian\"", " ", "if", " ", "\"IAN_YUAN_AS_AN\"", " ", "in", " prefSet ", "else", "\n                   ", "R\"iɛn\"", ")),  ", "# 是否认为ian韵腹和an一样", "\n        (", "R\"yan\"", ", (", "R\"yan\"", " ", "if", " (", "\"ONLY_YUAN_AS_AN\"", " ", "in", " prefSet)\n                              ", "or", " (", "\"IAN_YUAN_AS_AN\"", " ", "in", " prefSet) ", "else", "\n                   ", "R\"yɛn\"", ")),  ", "# 是否认为yuan韵腹和an一样（覆盖上一选项）", "\n        (", "R\"(ɕʰ?)uan\"", ", (", "R\"\\1yan\"", " ", "if", " (", "\"ONLY_YUAN_AS_AN\"", " ", "in", " prefSet)\n                                     ", "or", " (", "\"IAN_YUAN_AS_AN\"", " ", "in", " prefSet) ", "else", "\n                        ", "R\"\\1yɛn\"", ")),  ", "# {j/q/x}uan，是否认为和an一样", "\n        (", "R\"(ɕʰ?)u\"", ", ", "R\"\\1y\"", "),  ", "# {j/q/x}u{e/n}韵头，此前已排除{j/q/x}uan", "\n        (", "R\"([iy])e(?!n)\"", ", (", "R\"\\1ᴇ\"", " ", "if", " ", "\"IE_YUE_INC_SMALLCAPS_E\"", " ", "in", " prefSet ", "else", "\n                            ", "R\"\\1e\"", ")),  ", "# ie/yue/üe/ve，此前已转换{j/q/x}u", "\n        (", "R\"([iy])e(?!n)\"", ", (", "R\"\\1e\"", " ", "if", " ", "\"IE_YUE_INC_E\"", " ", "in", " prefSet ", "else", "\n                            ", "R\"\\1ɛ\"", ")),  ", "# ie/yue是否采用[e]标明，此前已判断[E]", "\n        ", "# 舌面央中元音轻微过渡韵腹", "\n        (", "R\"iŋ\"", ", (", "R\"iəŋ\"", " ", "if", " ", "\"TRANSITIONAL_SCHWA_IN_ING\"", " ", "in", " prefSet ", "else", "\n                  ", "R\"iŋ\"", ")),  ", "# ing是否有舌面央中元音韵腹", "\n        (", "R\"(un|uen)\"", ", (", "R\"uən\"", " ", "if", " ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", " ", "in", " prefSet ", "else", "\n                        ", "R\"un\"", ")),  ", "# 合口un/uen过渡，此前已排除撮口[j/q/x]un", "\n        ", "# 后移的a", "\n        (", "R\"ao\"", ", ", "R\"ɑu\"", "),  ", "# 包括ao/iao，o改为u", "\n        (", "R\"aŋ\"", ", ", "R\"ɑŋ\"", "),  ", "# 包括ang/iang/uang", "\n        ", "# 韵母en/eng韵腹是舌面央中元音", "\n        (", "R\"e([nŋ])\"", ", ", "R\"ə\\1\"", "),\n        ", "# ong类韵母", "\n        (", "R\"ioŋ\"", ", (", "R\"iuŋ\"", " ", "if", " ", "\"IONG_BY_IUNG\"", " ", "in", " prefSet ", "else", "\n                   ", "R\"yŋ\"", ")),  ", "# iong的两种转换，此前yong已转换为iong", "\n        (", "R\"oŋ\"", ", ", "R\"uŋ\"", "),  ", "# ong，此前已排除iong", "\n        ", "### 儿化音变——无需转换ar/ir/ur/aur/our/yur", "\n        ", "# 舌尖元音韵母", "\n        (", "R\"[ɿʅ]r\"", ", ", "R\"ər\"", "),  ", "# {zh/ch/sh/r/z/c/s}ir", "\n        ", "# 鼻韵尾脱落和相应的韵腹元音替换", "\n        (", "R\"[aɛ][in]r\"", ", (", "R\"ɐr\"", " ", "if", " ", "\"AIR_ANR_INC_NEAR_OPEN_CENTRAL\"", " ", "in", " prefSet ", "else", "\n                         ", "R\"ar\"", ")),  ", "# air/anr韵尾脱落后的韵腹替换", "\n        (", "R\"eir|ənr\"", ", ", "R\"ər\"", "),  ", "# eir韵腹央化，韵尾脱落；enr韵尾脱落", "\n        (", "R\"([iy])r\"", ", ", "R\"\\1ər\"", "),  ", "# ir/yr增加央化韵腹", "\n        (", "R\"([iuy])nr\"", ", ", "R\"\\1ər\"", "),  ", "# inr/ynr/unr韵尾脱落后增加央化韵腹", "\n        (", "R\"iuŋr\"", ", ", "R\"iũr\"", "),  ", "# iungr(iongr的可选变换)", "\n        (", "R\"([iuy])ŋr\"", ", ", "R\"\\1ə̃r\"", "),  ", "# ingr/yngr/ungr韵尾脱落后增加央化鼻化韵腹", "\n        (", "R\"ŋr\"", ", ", "R\"̃r\"", "),  ", "# ang/eng韵尾儿化脱落后韵腹鼻化", "\n        ", "### 声母、韵母转换的善后扫尾工作", "\n        ", "# 处理儿化韵卷舌动作", "\n        (", "R\"r\"", ", (", "R\"˞\"", " ", "if", " ", "\"RHOTICITY_BY_RHOTIC_HOOK\"", " ", "in", " prefSet ", "else", "\n                 ", "R\"r\"", ")),  ", "# 是否先把儿化韵卷舌动作改为卷舌小钩", "\n        (", "R\"R\"", ", (", "R\"ʐ\"", " ", "if", " ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", " ", "in", " prefSet ", "else", "\n                 ", "R\"r\"", ")),  ", "# 恢复声母r，是否采用卷舌浊擦音表示声母r", "\n        ", "# 此前已处理完卷舌动作和声母，现在处理剩下的r字符的可选转换", "\n        (", "R\"r\"", ", (", "R\"ɻ\"", " ", "if", " ", "\"R_TURNED_WITH_HOOK\"", " ", "in", " prefSet ", "else", "\n                 ", "R\"r\"", ")),  ", "# 是否严格采用卷舌通音符号[ɻ]", "\n        ", "# 恢复声母n", "\n        (", "R\"N\"", ", ", "R\"n\"", "),  ", "# 此前已处理完单元音韵母e和ie/yue", "\n        ", "# 其他选项", "\n        (", "R\"ʰ\"", ", (", "R\"ʻ\"", " ", "if", " ", "\"ASPIRATE_BY_TURNED_COMMA\"", " ", "in", " prefSet ", "else", "\n                 ", "R\"ʰ\"", ")),  ", "# 是否采用反逗号送气符号", "\n        (", "R\"ai\"", ", (", "R\"æi\"", " ", "if", " ", "\"AI_INC_NEAR_OPEN_FRONT\"", " ", "in", " prefSet ", "else", "\n                  ", "R\"ai\"", ")),  ", "# （非儿化的）ai/uai韵腹为舌面前次开元音", "\n        (", "R\"ou\"", ", (", "R\"əu\"", " ", "if", " ", "\"OU_INC_SCHWA\"", " ", "in", " prefSet ", "else", "\n                  ", "R\"ou\"", ")),  ", "# ou/iou是否采用舌面央中元音韵腹", "\n        ", "### 声调", "\n        ", "# 先期处理", "\n        ((", "R\"[1-5]\"", " ", "if", " ", "\"HIDE_ALL_TONE_VALUE\"", " ", "in", " prefSet ", "else", "\n          ", "R\"5\"", "), ", "R\"\"", "),  ", "# 只隐藏轻声还是隐藏所有的声调转换", "\n        (", "R\"([1-4])\"", ",\n         (", "R\"<sup>\\1</sup>\"", " ", "if", " ", "\"HTML_SUP_TAG_FOR_TONE_VALUE\"", " ", "in", " prefSet ", "else", "\n          ", "R\"(\\1)\"", ")),  ", "# 隔离单个数字调号", "\n        ", "# 标出普通话调值", "\n        (", "\"([(>])1([)<])\"", ", ", "R\"\\1 55\\2\"", "),  ", "# 阴平（第一声）", "\n        (", "\"([(>])2([)<])\"", ", ", "R\"\\1 35\\2\"", "),  ", "# 阳平（第二声）", "\n        (", "\"([(>])3([)<])\"", ", ", "R\"\\1 214\\2\"", "),  ", "# 上声（第三声）", "\n        (", "\"([(>])4([)<])\"", ", ", "R\"\\1 51\\2\"", "),  ", "# 去声（第四声）", "\n        (", "\"([(>]) ([235])\"", ", ", "R\"\\1\\2\"", ")  ", "# 去掉此前标调值时加上的空格", "\n    )\n    ", "### 以上，替换命令元组创建完成！", "\n    ", "# 编译正则表达式对象，以便反复使用", "\n    ", "global", " reList\n    reList = ", "map", "(re.", "compile", ", [pair[PATTERN] ", "for", " pair ", "in", " cmdPairTuple])\n \n", "def", " ", "decodeLine", "(", "encodedLine", "):\n    ", "\"\"\"对每一行拼音字符串做字符编码页解码\"\"\"", "\n    ", "try", ":\n        decodedLine = encodedLine.decode(UTF8)\n    ", "except", " UnicodeDecodeError:  ", "# 如果不是UTF-8", "\n        ", "try", ":\n            decodedLine = encodedLine.decode(GB18030)\n        ", "except", " UnicodeDecodeError:  ", "# 如果GB-18030也不行", "\n            decodedLine = ", "\"\"", " + os.linesep  ", "# 解码失败，只能清空", "\n            ", "global", " decodingFailed\n            decodingFailed = ", "True", "  ", "# 设置字符编码页解码失败标志", "\n    ", "except", " UnicodeEncodeError:  ", "# wx中可能出现编码错误", "\n        decodedLine = encodedLine\n    ", "return", " decodedLine\n \n", "def", " ", "msgOnDecodingFailure", "(", "fileName=", "\"标准输入流\"", "):\n    ", "\"\"\"针对字符编码页解码失败的文件在事后通过标准错误流提出警告\"\"\"", "\n    ", "global", " decodingFailed\n    ", "if", " decodingFailed:  ", "# 检查上次文件处理中是否出现解码错误", "\n        sys.stderr.write((", "U\"%s 警告：%s解码失败！\"", " % (sys.argv[", "0", "], fileName)).encode(GBK) + os.linesep)\n        decodingFailed = ", "False", "  ", "# 重置字符集码页解码失败标志为关闭", "\n \n", "def", " ", "convertLine", "(", "pinyinLine", "):\n    ", "\"\"\"对每一行拼音字符串依次执行全部替换命令，像流编辑器sed一样工作\"\"\"", "\n    ", "# 以单个“#”开头的行不转换，当作注释行", "\n    ", "if", " pinyinLine.startswith(", "\"#\"", ") ", "and", " ", "not", " pinyinLine.startswith(", "\"##\"", "):\n        ", "return", " pinyinLine[", "1", ":]  ", "# 去掉开头的“#”后再返回", "\n    ", "# 以两个“#”开头的行，只保留一个“#”，然后继续", "\n    ", "if", " pinyinLine.startswith(", "\"##\"", "):\n        pinyinLine = pinyinLine[", "1", ":]\n    ipaLine = pinyinLine.lower()  ", "# 大写字母在替换过程中另有意义", "\n    ", "for", " eachRe, eachCmdPair ", "in", " ", "zip", "(reList, cmdPairTuple):\n        ipaLine = eachRe.sub(eachCmdPair[SUBST], ipaLine)\n    ", "return", " ipaLine\n \n", "def", " ", "convertPinyin2IPA", "(", "pinyinLines, linesep=", "\"\"", "):\n    ", "\"\"\"将汉语拼音文稿转换为国际音标文稿\n    参数pinyinLines是输入的字符串序列\n    参数linesep是行分隔符（对于fp.readlines()或s.splitlines(True)的输入，缺省即可）\"\"\"", "\n    ", "# 逐行处理解码和转换，有利于减少解码带来的乱码行", "\n    ipaLines = ", "map", "(convertLine, ", "map", "(decodeLine, pinyinLines))\n    ", "return", " linesep.join(ipaLines).encode(UTF8)  ", "# 必须按UTF-8再encode一下", "\n \n", "######################## 主干函数 ########################", "\n", "def", " ", "Pinyin2IPA", "(", "pinyinLines, *prefs", "):\n    ", "\"\"\"创建转换命令，并将汉语拼音文稿转换为国际音标文稿\n        参数pinyinLines可以是字符串序列或单个字符串（后者也会包装进元组）\n        参数收集元组prefs是一个控制命令元组创建的选项设置表\"\"\"", "\n    ", "# 根据设置表创建替换命令元组（设置表缺省时提供默认值）", "\n    ", "if", " ", "not", " prefs:\n        prefs = defaultPrefSet\n    createCmdPairTuple(prefs)\n    ", "# 将单个字符串包装进元组，以便逐行处理", "\n    ", "if", " ", "isinstance", "(pinyinLines, ", "str", "):\n        pinyinLines = (pinyinLines,)\n    ", "return", " convertPinyin2IPA(pinyinLines)\n \n", "######################## 直接运行 ########################", "\n", "if", " __name__ == ", "'__main__'", ":\n    ", "import", " glob, locale, sys\n    globFailMsg = ", "U\"%s 错误：参数“%s”不能匹配任何有效的文件名！\"", "+ os.linesep\n    readFailMsg = ", "U\"%s 错误：文件“%s”数据读取失败！\"", "+ os.linesep\n    ", "if", " ", "len", "(sys.argv) > ", "1", ":\n        ", "if", " sys.argv[", "1", "].lower() ", "not", " ", "in", " (", "\"/?\"", ", ", "\"/h\"", ", ", "\"--help\"", ", ", "\"-h\"", "):\n            ", "for", " eachArg ", "in", " sys.argv[", "1", ":]:  ", "# 遍历glob表达式参数", "\n                fileNameList = glob.glob(eachArg)  ", "# 考虑DOS不负责glob解析", "\n                ", "if", " ", "not", " fileNameList:\n                    sys.stderr.write(globFailMsg % (sys.argv[", "0", "], eachArg))\n                ", "else", ":\n                    ", "for", " eachFileName ", "in", " fileNameList:\n                        ", "try", ":\n                            sys.stdout.write(Pinyin2IPA(", "open", "(eachFileName, ", "'r'", ").readlines()))\n                            msgOnDecodingFailure(", "U\"文件“%s”\"", " % eachFileName)\n                        ", "except", " IOError:\n                            sys.stderr.write(readFailMsg % (sys.argv[", "0", "], eachFileName))\n        ", "else", ":  ", "# 按照本地设置的编码方式输出模块文档作为简单帮助", "\n            language_dummy, encoding = locale.getdefaultlocale()\n            ", "print", "(__doc__ % (sys.argv[", "0", "], sys.argv[", "0", "])).encode(encoding)\n    ", "else", ":\n        sys.stdout.write(Pinyin2IPA(sys.stdin.readlines()))\n        msgOnDecodingFailure()\n", "######################## 脚本结束 ########################", "\n\n\n"]], "Tag": "算法设计"}
{"Answer": "[quote]但重定向后person.jsp页面取不到request的值[/quote]\r\n一般的用法不会去重定向jsp页面，因为你的取数逻辑不会是放在jsp页面里面（如果有放那里，你的代码就很差劲了）。你的重定向应该去定向你的一个struts动做。重新去载入你的数据，这样做才是正确的。\r\n\r\n你的排序问题，自增长嘛，按ID也是行的。不过推荐你用UUID。自增长很傻的。写个排序很容易，把取出来的数据再排一下，你以后也会用得到，多花点时间写一下吧。\r\n朋友能加点分不....-_-!补充了这么多不容易啊....", "Konwledge_Point": "集合覆盖", "Question": ["struts2留言显示问题，头疼好几天了。", ["项目中用s2sh做的用户留言功能。用户登录时根据uid获取给自己的留言信息放入map中（struts2的session）并在前台遍历显示，没有问题，现在我需要将来访者新的留言顺序显示在所有留言的上面，封装好留言对象后用dao保存到数据库中，并将留言对象放入map中，返回前台显示，这是可以显示，但新增第二条留言时，会覆盖之前的一条留言。怎么解决啊，头疼死了，帮帮忙吧。", "问题补充：", "数据库中保存正常，是在显示的时候覆盖了，再有我也觉得放入session不好，会占用过多内存但该怎么做呢？", "问题补充：", "不光是留言显示的问题，还有比如添加好友后的显示好友列表这样类似的问题，其实我就是搞不清楚应该怎么保存此类信息并在前台顺序显示。eyeqq 能说详细些吗？谢谢！", "问题补充：", "没有写equals和hashCode，这两个方法有什么用？", "问题补充：", "用了request 但新增留言显示在最后，需页面刷新后才能显示在留言列表的最上面", "现在我是这样做的：", "第一步：  点击好友的链接显示好友的个人主页，此时留言列表可以正常显示，步骤如下：", "     a：点击好友链接后提交personpage.action处理（主要是获取好友对象，根据好友对象得到好友的所有留言放入request） 代码:", "personpage.action", "public class PersonPageAction extends ActionSupport {", "  private static final long serialVersionUID = 1L;", "  private String personuid;", "  private UserBusiness userBusiness;", "  public void setUserBusiness(UserBusiness userBusiness) {", "      this.userBusiness = userBusiness;", "  }", "  public String getPersonuid() {", "      return personuid;", "  }", "  public void setPersonuid(String personuid) {", "      this.personuid = personuid;", "  }", "  @Override", "  public String execute() throws Exception {", "      if(userBusiness.isGetUser(personuid)) {", "          return SUCCESS;", "      }", "      return INPUT;", "  }", "}", "UserBusiness的代码：", "public boolean isGetUser(String personuid) {", "  try {", "      //首先获取当前user对象", "User personuser = getUser(Integer.valueOf(personuid));", "HttpServletRequest request = ServletActionContext.getRequest();", "request.setAttribute(\"personfriendusers\", personfriendusers);", "request.setAttribute(\"personuser\", personuser);", "request.setAttribute(\"personguestbooks\", personuser.getGuestbooks());", "      return true;", "  } catch (Exception e) {", "  e.printStackTrace();", "  return false;", "  }", "b:好友个人主页jsp的留言显示代码：", "//留言代码：", "       <form action=\"guestbook.action\">       <textarea name=\"gcontent\" rows=\"3\" cols=\"53\">", "       ", "       <input name=\"personuserid\" type=\"hidden\" value=\"&amp;lt;s:property value=\">\"/>", "    <input type=\"submit\" value=\"留言\">", "    ", "    </form>", "//留言显示代码", "<s:iterator value=\"#request.personguestbooks\" status=\"stuts\">", "\n", "      姓名：<s:property value=\"gname\">", "      时间：<s:property value=\"gtime\">", "      内容：<s:property value=\"gcontent\">", "        ", " </s:iterator>", "第二步：新添加留言：在上面个人主页上添加留言内容提交到guestbook.action（增加新留言到数据库，并且在返回到个人主页显示）", "guestbook.action代码：", "public class GuestbookAction extends ActionSupport {", "@Override", "public String execute() throws Exception {", "if(guestbookBusiness.isGuestbookAdd(personuserid,gcontent)) {", "HttpServletRequest request = ServletActionContext.getRequest();", "User personuser = (User)request.getAttribute(\"personuser\");", "request.setAttribute(\"personguestbooks\", personuser.getGuestbooks());", "          return SUCCESS;", "      }", "      return INPUT;", "  }", "GuestbookBusiness代码如下：", "public class GuestbookBusinessImpl implements GuestbookBusiness {", "public boolean isGuestbookAdd(Integer personuserid,String gcontent) {", "try {", "User personuser = userDao.get(personuserid);", "User user = (User)ActionContext.getContext().getSession().get(\"user\");", "  guestbook.setGcontent(gcontent);", "  guestbook.setGtime(new Date());", "  guestbook.setGname(user.getUsername());", "  guestbook.setUser(personuser);", "  //将留言对象加入用户留言集合", "  personuser.getGuestbooks().add(guestbook);", "  guestbookDao.addGuestbook(guestbook);", "HttpServletRequest request = ServletActionContext.getRequest();", "      //返回到Action", "  equest.setAttribute(\"personuser\", personuser);", "          return true;", "      } catch (Exception e) {", "          e.printStackTrace();", "      }", "      return false;", "  }", "此时返回的新增留言在最后，需刷新才能提前，这样写是不是有问题，该怎样做才能直接将回复的留言显示在留言列表的最上面呢？", "问题补充：", "你的personuser.guestbooks是个Set还是个List？ ", "guestbook.action中success到哪里了？", "用的是Set      success后直接回person.jsp 页面", "\"重定向\"   我去试一下 struts2好像是在struts2好像是在struts.xml配置", "问题补充：", "你好eyeqq  我去做了重定向 又有一个新问题： 从url看重定向成功，但重定向后person.jsp页面取不到request的值，不光留言的内容，其他request中的的值也取不到，但点击其他页面后再点击好友链接新加入的留言显示出来并且正常排序。（好友与留言用hibernate做的一对多关联映射，排序是按gid逆向排序，没有按时间排序）怎么回事呢？", "问题补充：", "首先谢谢你，还有加分是肯定的了，10分都给你，虽然还没有解决我的问题，但已经给了我很多好的建议。我在做一下重定向action 去数据库重新取一下，分先给了。。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;字符串前加u,后面字符串以 Unicode格式进行编码&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-built_in\"&gt;exp&lt;/span&gt; &amp;#61; U&lt;span class=\"hljs-string\"&gt;&amp;#34;我是中文字符串” &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;字符串前加r 去掉反斜杠的转移机制。&amp;#xff08;特殊字符&amp;#xff1a;即那些&amp;#xff0c;反斜杠加上对应字母&amp;#xff0c;表示对应的特殊含义的&amp;#xff0c;比如最常见的”\\n”表示换行&amp;#xff0c;”\\t”表示Tab等。 &amp;#xff09;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-built_in\"&gt;exp&lt;/span&gt; &amp;#61; r&lt;span class=\"hljs-string\"&gt;&amp;#34;inin\\nin” #表示一个普通生字符串lnininin&amp;#xff0c;而不表示换行了。&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你将加U的注释去除&lt;br /&gt;如下 &lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;U&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;对每一行拼音字符串依次执行全部替换命令&amp;#xff0c;像流编辑器sed一样工作&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n改为\n&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;对每一行拼音字符串依次执行全部替换命令&amp;#xff0c;像流编辑器sed一样工作&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;将UR 改为R&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;U&lt;span class=\"hljs-string\"&gt;R&amp;#34;N&amp;#34;&lt;/span&gt;\n改为\n&lt;span class=\"hljs-string\"&gt;R&amp;#34;N&amp;#34;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;修改后代码如下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# !/usr/bin/env python&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# This file has following encoding: utf-8&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;######################## 模块文档 ########################&lt;/span&gt;\n&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n“%s”汉语拼音-国际音标转换工具 2.1版&amp;#xff08;2007年9月16日&amp;#xff09;\n作者&amp;#xff1a;徐清白(http://xuqingbai.googlepages.com)&amp;#xff0c;首发于2007年8月6日\n授权&amp;#xff1a;自由软件&amp;#xff08;GNU 通用公共许可证&amp;#xff09;\n要求&amp;#xff1a;必须使用 Python 2.5 或更新版本的解释器运行\n用法&amp;#xff1a;python %s [&amp;lt;文件名匹配式&amp;gt; [&amp;lt;更多文件名匹配式&amp;gt;...]]\n功能&amp;#xff1a;从符合每个&amp;lt;文件名匹配式&amp;gt;的所有文件或标准输入流(stdin)读取汉语拼音文稿&amp;#xff0c;\n      向标准输出流(stdout)写入经过转换得到国际音标文稿。结果仅供学习参考。\n注意&amp;#xff1a;&amp;lt;文件名匹配式&amp;gt; 采用 UNIX shell 风格的 glob 匹配规则\n文稿格式&amp;#xff1a;&amp;lt;单字拼音&amp;gt;[[ |&amp;#39;]&amp;lt;更多单字拼音&amp;gt;...]\n其中&amp;#xff1a;&amp;lt;单字拼音&amp;gt; &amp;#61; &amp;lt;汉语拼音字母串&amp;gt;[&amp;lt;声调标号&amp;gt;]\n      &amp;lt;声调标号&amp;gt; 取值1-5&amp;#xff08;对应四声和轻声&amp;#xff09;\n标音风格&amp;#xff1a;适度严格的IPA音素音标&amp;#xff0b;部分汉语言学界专用符号\n详细的用户文档请参看“DOC_USERSGUIDE.html”文件\n&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;######################## 模块导入 ########################&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; os, re\n\n&lt;span class=\"hljs-comment\"&gt;######################## 全局变量 ########################&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 三种字符集标志&lt;/span&gt;\nGB18030, GBK, UTF8 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;gb18030&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;gbk&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 字符编码页解码失败标志&lt;/span&gt;\ndecodingFailed &amp;#61; &lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 初始状态&amp;#xff1a;关闭&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 正则表达式替换命令元组和内部标志&lt;/span&gt;\ncmdPairTuple &amp;#61; &lt;span class=\"hljs-built_in\"&gt;tuple&lt;/span&gt;()  &lt;span class=\"hljs-comment\"&gt;# 预备空对象&lt;/span&gt;\nPATTERN, SUBST &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 匹配段和替换段&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 经过编译的正则表达式对象列表&lt;/span&gt;\nreList &amp;#61; []  &lt;span class=\"hljs-comment\"&gt;# 预备空对象&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 创建正则表达式替换命令元组的默认设置表&amp;#xff08;固定集合对象&amp;#xff09;&lt;/span&gt;\ndefaultPrefSet &amp;#61; &lt;span class=\"hljs-built_in\"&gt;frozenset&lt;/span&gt;([\n    &lt;span class=\"hljs-comment\"&gt;### 以下各行字符串&amp;#xff0c;凡行首用#号注释者均表示无效&amp;#xff1b;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;### 凡行首未用#号注释者均有效&amp;#xff0c;效用如后面注释所述&amp;#xff1a;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;NUMBER_2_BY_AR4&amp;#34;,                      # 数字“二”有大开口度韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;AI_INC_NEAR_OPEN_FRONT&amp;#34;,               # ai/uai韵腹为舌面前次开元音&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;AIR_ANR_INC_NEAR_OPEN_CENTRAL&amp;#34;,        # air/anr韵腹为舌面央次低元音&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;CENTRAL_A_BY_SMALLCAPS_A&amp;#34;,             # “央a”采用小型大写[A]标明&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;IE_YUE_INC_SMALLCAPS_E&amp;#34;,               # ie/yue采用小型大写[E]标明&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;IE_YUE_INC_E&amp;#34;,                         # ie/yue采用[e]标明&amp;#xff08;覆盖上一条&amp;#xff09;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;IAN_YUAN_AS_AN&amp;#34;,                       # ian/yuan韵腹和an一样&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;ONLY_YUAN_AS_AN&amp;#34;,                      # 仅yuan韵腹和an一样&amp;#xff08;覆盖上一条&amp;#xff09;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;OU_INC_SCHWA&amp;#34;,                         # ou/iou采用舌面央中元音韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;IONG_BY_IUNG&amp;#34;,                         # iong韵母采用i韵头u韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;,             # 采用反逗号弱送气符号&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;RHOTICITY_BY_RHOTIC_HOOK&amp;#34;,             # 儿化韵卷舌动作采用卷舌小钩&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;,               # 只有er音节卷舌动作采用卷舌小钩&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;,          # 声母r为卷舌浊擦音而非卷舌通音&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;R_TURNED_WITH_HOOK&amp;#34;,                   # 严格采用卷舌通音符号&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;TRANSITIONAL_SCHWA_IN_ING&amp;#34;,            # ing有舌面央中元音韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;,            # 合口un有舌面央中元音韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;NO_TRANSITIONAL_U&amp;#34;,                    # bo/po/mo/fo没有[u]韵头&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;SYLLABLE_JUNCTURE_BY_PLUS&amp;#34;,            # 音节间断采用开音渡&amp;#43;号而非.号&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;HTML_SUP_TAG_FOR_TONE_VALUE&amp;#34;,          # 调值采用HTML上标标签格式&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;HIDE_ALL_TONE_VALUE&amp;#34;,                  # 隐藏所有声调转换&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;### 以下选项仅存设想&amp;#xff0c;目前尚未实现&amp;#xff1a;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;RETROFLEX_INITIAL_STANDALONE&amp;#34;,         # 卷舌声母可成音节而无需舌尖元音&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;ZERO_INITIAL_HAS_CONSONANT&amp;#34;,           # 零声母有辅音&lt;/span&gt;\n])\n&lt;span class=\"hljs-comment\"&gt;# 正则表达式替换命令元组一揽子创建设置方案&amp;#xff08;元组&amp;#xff0c;[0]位为说明&amp;#xff09;&lt;/span&gt;\nrecipeLinWang1992 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;林焘、王理嘉《语音学教程》&amp;#34;&lt;/span&gt;,\n                     &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;AI_INC_NEAR_OPEN_FRONT&amp;#34;&lt;/span&gt;\n                     )\nrecipeBeidaCN2004 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;北京大学中文系《现代汉语》&amp;#xff08;重排本&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                     &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;,\n                     &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;IONG_BY_IUNG&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt;\n                     )\nrecipeHuangLiao2002 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;黄伯荣、廖序东《现代汉语》&amp;#xff08;增订三版&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                       &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;CENTRAL_A_BY_SMALLCAPS_A&amp;#34;&lt;/span&gt;,\n                       &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_YUAN_AS_AN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt;,\n                       &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;\n                       )\nrecipeYangZhou1995 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;杨润陆、周一民《现代汉语》&amp;#xff08;北师大文学院教材&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                      &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;,\n                      &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;\n                      )\nrecipeYuan2001 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;袁家骅等《汉语方言概要》&amp;#xff08;第二版重排&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_E&amp;#34;&lt;/span&gt;\n                  )\nrecipeTang2002 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;唐作藩《音韵学教程》&amp;#xff08;第三版&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_E&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;OU_INC_SCHWA&amp;#34;&lt;/span&gt;\n                  )\n\n\n&lt;span class=\"hljs-comment\"&gt;######################## 函数声明 ########################&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;createCmdPairTuple&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;prefSet&amp;#61;defaultPrefSet&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;创建正则表达式替换命令元组\n    然后编译便于反复使用的匹配段正则表达式对象列表\n    参数prefSet是一个控制命令元组创建的选项设置序列&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;### 预先处理同系列设置的覆盖关系——defaultPrefSet也可能让人动了手脚&lt;/span&gt;\n    prefSet &amp;#61; &lt;span class=\"hljs-built_in\"&gt;set&lt;/span&gt;(prefSet)  &lt;span class=\"hljs-comment\"&gt;# 先换为可变集合副本&amp;#xff0c;以防固定类型参数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_E&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_SMALLCAPS_E&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet:\n        prefSet.remove(&lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_SMALLCAPS_E&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet:\n        prefSet.remove(&lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;global&lt;/span&gt; cmdPairTuple\n    cmdPairTuple &amp;#61; (\n        &lt;span class=\"hljs-comment\"&gt;### 转换声母前的预处理&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 音节间断与隔音符号&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#39;([aoeiuvüê][1-5]?)([yw])&amp;#39;&lt;/span&gt;,  &lt;span class=\"hljs-comment\"&gt;# a/o/e前有元音时必须写隔音符号&lt;/span&gt;\n         &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1&amp;#39;\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 标明不必写出隔音符号的音节间断&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;&amp;#43;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;SYLLABLE_JUNCTURE_BY_PLUS&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;.&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 音节间断&amp;#xff08;开音渡&amp;#xff09;标记&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 兼容正规的印刷体字母ɡ/ɑ-&amp;gt;g/a&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ɡ&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;g&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ɑ&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;a&amp;#34;&lt;/span&gt;),\n        &lt;span class=\"hljs-comment\"&gt;# 特殊的ê韵母&amp;#xff0c;只能搭配零声母&amp;#xff08;“诶”字等&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(ê|ea)&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɛ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ea是ê的GF 3006表示&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 消除因可以紧邻韵腹充当声母或韵尾的辅音的歧义&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;r([aoeiu])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;R\\1&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 声母r暂改为R&amp;#xff0c;以免与卷舌标志r混淆&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;n([aoeiuvü])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;N\\1&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 声母n暂改为N&amp;#xff0c;以免与韵尾n/ng混淆&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 需要排除式匹配转换的韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ng(?![aeu])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ŋ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 双字母ng&amp;#xff0c;后鼻音韵尾或自成音节&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![ieuyüv])e(?![inŋr])&amp;#34;&lt;/span&gt;,\n         &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɤ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 单韵母e&amp;#xff0c;此前已转换ea和声母r/n&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![bpmfdtNlgkhjqxzcsRiywuüv])er4&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ar4&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;NUMBER_2_BY_AR4&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;er4&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 数字“二”是否有大开口度韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![bpmfdtNlgkhjqxzcsRiywuüv])ar4&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;a˞4&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;ar4&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 数字“二”也属于er音节&amp;#xff0c;可特别选用小钩&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;a(?![ionŋ])&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ᴀ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;CENTRAL_A_BY_SMALLCAPS_A&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                           &lt;span class=\"hljs-string\"&gt;R&amp;#34;a&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# “央a”是否用小型大写[A]标明&amp;#xff0c;已转换“二”&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![bpmfdtNlgkhjqxzcsRiywuüv])er&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ə˞&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;ər&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 一般的卷舌单韵母er&amp;#xff0c;此前已排除“二”&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![iuüv])er&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 构成单韵母e的儿化韵的er&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;&amp;#61;[bpmf])o(?![uŋ])&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;o&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;uo&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# bo/po/mo/fo是否有韵头u&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 声母——无需转换m/f/n/l/s/r(但r可根据设置执行转换)&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 送气清辅音声母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([ptk])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ʰ&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;q&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tɕʰ&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(ch|ĉ)&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tʂʰ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 后者是ch的注音变体&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;c&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tsʰ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除ch&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 不送气清辅音声母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;b&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;p&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除送气的p/t/k&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;d&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;t&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;g&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;k&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除后鼻音双字母中的g&amp;#xff0c;注意隔音&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;j&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tɕ&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(zh|ẑ)&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tʂ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 后者是zh的注音变体&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;z&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ts&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除zh&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 擦音声母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(sh|ŝ)&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ʂ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 后者是sh的注音变体&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;x&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɕ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 声母x&amp;#xff0c;排除后再转换h&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;h&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;x&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 声母h&amp;#xff0c;此前已排除zh/ch/sh&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 韵母&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 舌尖元音韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(sʰ?)i&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ɿ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# zi/ci/si&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([ʂR]ʰ?)i&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ʅ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# zhi/chi/shi/ri&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 部分韵腹省略表示的韵母&amp;#43;隔音符号和韵头w/y&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iu&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;iou&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 无需转换iou&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ui&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;uei&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 无需转换uei&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;wu?&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;u&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;yi?&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;i&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除iu&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 韵头[i]/[y]的韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iu|[üv]&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;y&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 转换ü/v&amp;#xff0c;恢复yu/yue&amp;#xff0c;准备yuan/yun&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ian&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ian&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                   &lt;span class=\"hljs-string\"&gt;R&amp;#34;iɛn&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否认为ian韵腹和an一样&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;yan&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;yan&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet)\n                              &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet) &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                   &lt;span class=\"hljs-string\"&gt;R&amp;#34;yɛn&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否认为yuan韵腹和an一样&amp;#xff08;覆盖上一选项&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(ɕʰ?)uan&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1yan&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet)\n                                     &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet) &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                        &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1yɛn&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# {j/q/x}uan&amp;#xff0c;是否认为和an一样&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(ɕʰ?)u&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1y&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# {j/q/x}u{e/n}韵头&amp;#xff0c;此前已排除{j/q/x}uan&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iy])e(?!n)&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ᴇ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_SMALLCAPS_E&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                            &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1e&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# ie/yue/üe/ve&amp;#xff0c;此前已转换{j/q/x}u&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iy])e(?!n)&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1e&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_E&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                            &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ɛ&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# ie/yue是否采用[e]标明&amp;#xff0c;此前已判断[E]&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 舌面央中元音轻微过渡韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iŋ&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iəŋ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_ING&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                  &lt;span class=\"hljs-string\"&gt;R&amp;#34;iŋ&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# ing是否有舌面央中元音韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(un|uen)&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;uən&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                        &lt;span class=\"hljs-string\"&gt;R&amp;#34;un&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 合口un/uen过渡&amp;#xff0c;此前已排除撮口[j/q/x]un&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 后移的a&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ao&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɑu&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 包括ao/iao&amp;#xff0c;o改为u&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;aŋ&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɑŋ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 包括ang/iang/uang&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 韵母en/eng韵腹是舌面央中元音&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;e([nŋ])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ə\\1&amp;#34;&lt;/span&gt;),\n        &lt;span class=\"hljs-comment\"&gt;# ong类韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ioŋ&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iuŋ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IONG_BY_IUNG&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                   &lt;span class=\"hljs-string\"&gt;R&amp;#34;yŋ&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# iong的两种转换&amp;#xff0c;此前yong已转换为iong&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;oŋ&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;uŋ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ong&amp;#xff0c;此前已排除iong&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 儿化音变——无需转换ar/ir/ur/aur/our/yur&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 舌尖元音韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;[ɿʅ]r&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# {zh/ch/sh/r/z/c/s}ir&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 鼻韵尾脱落和相应的韵腹元音替换&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;[aɛ][in]r&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ɐr&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;AIR_ANR_INC_NEAR_OPEN_CENTRAL&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                         &lt;span class=\"hljs-string\"&gt;R&amp;#34;ar&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# air/anr韵尾脱落后的韵腹替换&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;eir|ənr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# eir韵腹央化&amp;#xff0c;韵尾脱落&amp;#xff1b;enr韵尾脱落&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iy])r&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ir/yr增加央化韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iuy])nr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# inr/ynr/unr韵尾脱落后增加央化韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iuŋr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;iũr&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# iungr(iongr的可选变换)&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iuy])ŋr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ə̃r&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ingr/yngr/ungr韵尾脱落后增加央化鼻化韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ŋr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;̃r&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ang/eng韵尾儿化脱落后韵腹鼻化&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 声母、韵母转换的善后扫尾工作&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 处理儿化韵卷舌动作&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;˞&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;RHOTICITY_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否先把儿化韵卷舌动作改为卷舌小钩&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;R&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ʐ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 恢复声母r&amp;#xff0c;是否采用卷舌浊擦音表示声母r&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 此前已处理完卷舌动作和声母&amp;#xff0c;现在处理剩下的r字符的可选转换&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ɻ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;R_TURNED_WITH_HOOK&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否严格采用卷舌通音符号[ɻ]&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 恢复声母n&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;N&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;n&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已处理完单元音韵母e和ie/yue&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 其他选项&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ʰ&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ʻ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;ʰ&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否采用反逗号送气符号&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ai&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;æi&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;AI_INC_NEAR_OPEN_FRONT&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                  &lt;span class=\"hljs-string\"&gt;R&amp;#34;ai&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# &amp;#xff08;非儿化的&amp;#xff09;ai/uai韵腹为舌面前次开元音&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ou&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;əu&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;OU_INC_SCHWA&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                  &lt;span class=\"hljs-string\"&gt;R&amp;#34;ou&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# ou/iou是否采用舌面央中元音韵腹&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 声调&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 先期处理&lt;/span&gt;\n        ((&lt;span class=\"hljs-string\"&gt;R&amp;#34;[1-5]&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;HIDE_ALL_TONE_VALUE&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;5&amp;#34;&lt;/span&gt;), &lt;span class=\"hljs-string\"&gt;R&amp;#34;&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 只隐藏轻声还是隐藏所有的声调转换&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([1-4])&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;&amp;lt;sup&amp;gt;\\1&amp;lt;/sup&amp;gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;HTML_SUP_TAG_FOR_TONE_VALUE&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;(\\1)&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 隔离单个数字调号&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 标出普通话调值&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;])1([)&amp;lt;])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1 55\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 阴平&amp;#xff08;第一声&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;])2([)&amp;lt;])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1 35\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 阳平&amp;#xff08;第二声&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;])3([)&amp;lt;])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1 214\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 上声&amp;#xff08;第三声&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;])4([)&amp;lt;])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1 51\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 去声&amp;#xff08;第四声&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;]) ([235])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1\\2&amp;#34;&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 去掉此前标调值时加上的空格&lt;/span&gt;\n    )\n    &lt;span class=\"hljs-comment\"&gt;### 以上&amp;#xff0c;替换命令元组创建完成&amp;#xff01;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 编译正则表达式对象&amp;#xff0c;以便反复使用&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;global&lt;/span&gt; reList\n    reList &amp;#61; &lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(re.&lt;span class=\"hljs-built_in\"&gt;compile&lt;/span&gt;, [pair[PATTERN] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; pair &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; cmdPairTuple])\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;decodeLine&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;encodedLine&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;对每一行拼音字符串做字符编码页解码&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt;:\n        decodedLine &amp;#61; encodedLine.decode(UTF8)\n    &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt; UnicodeDecodeError:  &lt;span class=\"hljs-comment\"&gt;# 如果不是UTF-8&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt;:\n            decodedLine &amp;#61; encodedLine.decode(GB18030)\n        &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt; UnicodeDecodeError:  &lt;span class=\"hljs-comment\"&gt;# 如果GB-18030也不行&lt;/span&gt;\n            decodedLine &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt; &amp;#43; os.linesep  &lt;span class=\"hljs-comment\"&gt;# 解码失败&amp;#xff0c;只能清空&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;global&lt;/span&gt; decodingFailed\n            decodingFailed &amp;#61; &lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 设置字符编码页解码失败标志&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt; UnicodeEncodeError:  &lt;span class=\"hljs-comment\"&gt;# wx中可能出现编码错误&lt;/span&gt;\n        decodedLine &amp;#61; encodedLine\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; decodedLine\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;msgOnDecodingFailure&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;fileName&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;标准输入流&amp;#34;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;针对字符编码页解码失败的文件在事后通过标准错误流提出警告&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;global&lt;/span&gt; decodingFailed\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; decodingFailed:  &lt;span class=\"hljs-comment\"&gt;# 检查上次文件处理中是否出现解码错误&lt;/span&gt;\n        sys.stderr.write((&lt;span class=\"hljs-string\"&gt;U&amp;#34;%s 警告&amp;#xff1a;%s解码失败&amp;#xff01;&amp;#34;&lt;/span&gt; % (sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], fileName)).encode(GBK) &amp;#43; os.linesep)\n        decodingFailed &amp;#61; &lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 重置字符集码页解码失败标志为关闭&lt;/span&gt;\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;convertLine&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;pinyinLine&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;对每一行拼音字符串依次执行全部替换命令&amp;#xff0c;像流编辑器sed一样工作&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 以单个“#”开头的行不转换&amp;#xff0c;当作注释行&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; pinyinLine.startswith(&lt;span class=\"hljs-string\"&gt;&amp;#34;#&amp;#34;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; pinyinLine.startswith(&lt;span class=\"hljs-string\"&gt;&amp;#34;##&amp;#34;&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; pinyinLine[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:]  &lt;span class=\"hljs-comment\"&gt;# 去掉开头的“#”后再返回&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 以两个“#”开头的行&amp;#xff0c;只保留一个“#”&amp;#xff0c;然后继续&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; pinyinLine.startswith(&lt;span class=\"hljs-string\"&gt;&amp;#34;##&amp;#34;&lt;/span&gt;):\n        pinyinLine &amp;#61; pinyinLine[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:]\n    ipaLine &amp;#61; pinyinLine.lower()  &lt;span class=\"hljs-comment\"&gt;# 大写字母在替换过程中另有意义&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; eachRe, eachCmdPair &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;zip&lt;/span&gt;(reList, cmdPairTuple):\n        ipaLine &amp;#61; eachRe.sub(eachCmdPair[SUBST], ipaLine)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ipaLine\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;convertPinyin2IPA&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;pinyinLines, linesep&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;将汉语拼音文稿转换为国际音标文稿\n    参数pinyinLines是输入的字符串序列\n    参数linesep是行分隔符&amp;#xff08;对于fp.readlines()或s.splitlines(True)的输入&amp;#xff0c;缺省即可&amp;#xff09;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 逐行处理解码和转换&amp;#xff0c;有利于减少解码带来的乱码行&lt;/span&gt;\n    ipaLines &amp;#61; &lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(convertLine, &lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(decodeLine, pinyinLines))\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; linesep.join(ipaLines).encode(UTF8)  &lt;span class=\"hljs-comment\"&gt;# 必须按UTF-8再encode一下&lt;/span&gt;\n\n\n&lt;span class=\"hljs-comment\"&gt;######################## 主干函数 ########################&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;Pinyin2IPA&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;pinyinLines, *prefs&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;创建转换命令&amp;#xff0c;并将汉语拼音文稿转换为国际音标文稿\n        参数pinyinLines可以是字符串序列或单个字符串&amp;#xff08;后者也会包装进元组&amp;#xff09;\n        参数收集元组prefs是一个控制命令元组创建的选项设置表&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 根据设置表创建替换命令元组&amp;#xff08;设置表缺省时提供默认值&amp;#xff09;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; prefs:\n        prefs &amp;#61; defaultPrefSet\n    createCmdPairTuple(prefs)\n    &lt;span class=\"hljs-comment\"&gt;# 将单个字符串包装进元组&amp;#xff0c;以便逐行处理&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;isinstance&lt;/span&gt;(pinyinLines, &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;):\n        pinyinLines &amp;#61; (pinyinLines,)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; convertPinyin2IPA(pinyinLines)\n\n\n&lt;span class=\"hljs-comment\"&gt;######################## 直接运行 ########################&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__ &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; glob, locale, sys\n\n    globFailMsg &amp;#61; &lt;span class=\"hljs-string\"&gt;U&amp;#34;%s 错误&amp;#xff1a;参数“%s”不能匹配任何有效的文件名&amp;#xff01;&amp;#34;&lt;/span&gt;&amp;#43; os.linesep\n    readFailMsg &amp;#61; &lt;span class=\"hljs-string\"&gt;U&amp;#34;%s 错误&amp;#xff1a;文件“%s”数据读取失败&amp;#xff01;&amp;#34;&lt;/span&gt;&amp;#43; os.linesep\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(sys.argv) &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; sys.argv[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].lower() &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;/?&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;/h&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;--help&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;-h&amp;#34;&lt;/span&gt;):\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; eachArg &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; sys.argv[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:]:  &lt;span class=\"hljs-comment\"&gt;# 遍历glob表达式参数&lt;/span&gt;\n                fileNameList &amp;#61; glob.glob(eachArg)  &lt;span class=\"hljs-comment\"&gt;# 考虑DOS不负责glob解析&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; fileNameList:\n                    sys.stderr.write(globFailMsg % (sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], eachArg))\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n                    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; eachFileName &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; fileNameList:\n                        &lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt;:\n                            sys.stdout.write(Pinyin2IPA(&lt;span class=\"hljs-built_in\"&gt;open&lt;/span&gt;(eachFileName, &lt;span class=\"hljs-string\"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;).readlines()))\n                            msgOnDecodingFailure(&lt;span class=\"hljs-string\"&gt;U&amp;#34;文件“%s”&amp;#34;&lt;/span&gt; % eachFileName)\n                        &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt; IOError:\n                            sys.stderr.write(readFailMsg % (sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], eachFileName))\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:  &lt;span class=\"hljs-comment\"&gt;# 按照本地设置的编码方式输出模块文档作为简单帮助&lt;/span&gt;\n            language_dummy, encoding &amp;#61; locale.getdefaultlocale()\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(__doc__ % (sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])).encode(encoding)\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        sys.stdout.write(Pinyin2IPA(sys.stdin.readlines()))\n        msgOnDecodingFailure()\n&lt;span class=\"hljs-comment\"&gt;######################## 脚本结束 ########################&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "集合覆盖", "Question": ["在python 2.5 的代码中出现的 “UR” 会导致程序错误，这是一个语法吗？应如何修改？", ["本人python初学者（只学到面向对象），在查找语言学相关资料时找到了“汉语拼音-国际音标转换工具” ，能有效进行音标转化。（", "http://py2ipa.sourceforge.net/", "）", "但是其使用的版本为python 2.5，其中cmdPairTuple函数里多次出现的UR代码意义不明且在网上也没有相关资料（107行左右），会导致程序出错。", "\n", "文件的完整代码如下：", "\n", "\n", "#!/usr/bin/env python", "\n", "# This file has following encoding: utf-8", "\n", "######################## 模块文档 ########################", "\n", "U\"\"\"\n“%s”汉语拼音-国际音标转换工具 2.1版（2007年9月16日）\n\n作者：徐清白(http://xuqingbai.googlepages.com)，首发于2007年8月6日\n授权：自由软件（GNU 通用公共许可证）\n\n要求：必须使用 Python 2.5 或更新版本的解释器运行\n\n用法：python %s [<文件名匹配式> [<更多文件名匹配式>...]]\n功能：从符合每个<文件名匹配式>的所有文件或标准输入流(stdin)读取汉语拼音文稿，\n      向标准输出流(stdout)写入经过转换得到国际音标文稿。结果仅供学习参考。\n注意：<文件名匹配式> 采用 UNIX shell 风格的 glob 匹配规则\n\n文稿格式：<单字拼音>[[ |']<更多单字拼音>...]\n其中：<单字拼音> = <汉语拼音字母串>[<声调标号>]\n      <声调标号> 取值1-5（对应四声和轻声）\n\n标音风格：适度严格的IPA音素音标＋部分汉语言学界专用符号\n\n详细的用户文档请参看“DOC_USERSGUIDE.html”文件\"\"\"", "\n", "######################## 模块导入 ########################", "\n", "import", " os, re\n", "######################## 全局变量 ########################", "\n", "# 三种字符集标志", "\nGB18030, GBK, UTF8 = ", "\"gb18030\"", ", ", "\"gbk\"", ", ", "\"utf8\"", "\n", "# 字符编码页解码失败标志", "\ndecodingFailed = ", "False", "  ", "# 初始状态：关闭", "\n", "# 正则表达式替换命令元组和内部标志", "\ncmdPairTuple = ", "tuple", "()  ", "# 预备空对象", "\nPATTERN, SUBST = ", "0", ", ", "1", "   ", "# 匹配段和替换段", "\n", "# 经过编译的正则表达式对象列表", "\nreList = []             ", "# 预备空对象", "\n", "# 创建正则表达式替换命令元组的默认设置表（固定集合对象）", "\ndefaultPrefSet = ", "frozenset", "([\n", "### 以下各行字符串，凡行首用#号注释者均表示无效；", "\n", "### 凡行首未用#号注释者均有效，效用如后面注释所述：", "\n", "# \"NUMBER_2_BY_AR4\",                      # 数字“二”有大开口度韵腹", "\n", "# \"AI_INC_NEAR_OPEN_FRONT\",               # ai/uai韵腹为舌面前次开元音", "\n", "# \"AIR_ANR_INC_NEAR_OPEN_CENTRAL\",        # air/anr韵腹为舌面央次低元音", "\n", "# \"CENTRAL_A_BY_SMALLCAPS_A\",             # “央a”采用小型大写[A]标明", "\n", "# \"IE_YUE_INC_SMALLCAPS_E\",               # ie/yue采用小型大写[E]标明", "\n", "# \"IE_YUE_INC_E\",                         # ie/yue采用[e]标明（覆盖上一条）", "\n", "# \"IAN_YUAN_AS_AN\",                       # ian/yuan韵腹和an一样", "\n", "# \"ONLY_YUAN_AS_AN\",                      # 仅yuan韵腹和an一样（覆盖上一条）", "\n", "# \"OU_INC_SCHWA\",                         # ou/iou采用舌面央中元音韵腹", "\n", "# \"IONG_BY_IUNG\",                         # iong韵母采用i韵头u韵腹", "\n", "# \"ASPIRATE_BY_TURNED_COMMA\",             # 采用反逗号弱送气符号", "\n", "# \"RHOTICITY_BY_RHOTIC_HOOK\",             # 儿化韵卷舌动作采用卷舌小钩", "\n", "# \"ONLY_ER_BY_RHOTIC_HOOK\",               # 只有er音节卷舌动作采用卷舌小钩", "\n", "# \"INITIAL_R_BY_VED_RETRO_FRIC\",          # 声母r为卷舌浊擦音而非卷舌通音", "\n", "# \"R_TURNED_WITH_HOOK\",                   # 严格采用卷舌通音符号", "\n", "# \"TRANSITIONAL_SCHWA_IN_ING\",            # ing有舌面央中元音韵腹", "\n", "# \"TRANSITIONAL_SCHWA_IN_UEN\",            # 合口un有舌面央中元音韵腹", "\n", "# \"NO_TRANSITIONAL_U\",                    # bo/po/mo/fo没有[u]韵头", "\n", "# \"SYLLABLE_JUNCTURE_BY_PLUS\",            # 音节间断采用开音渡+号而非.号", "\n", "# \"HTML_SUP_TAG_FOR_TONE_VALUE\",          # 调值采用HTML上标标签格式", "\n", "# \"HIDE_ALL_TONE_VALUE\",                  # 隐藏所有声调转换", "\n", "### 以下选项仅存设想，目前尚未实现：", "\n", "# \"RETROFLEX_INITIAL_STANDALONE\",         # 卷舌声母可成音节而无需舌尖元音", "\n", "# \"ZERO_INITIAL_HAS_CONSONANT\",           # 零声母有辅音", "\n])\n", "# 正则表达式替换命令元组一揽子创建设置方案（元组，[0]位为说明）", "\nrecipeLinWang1992 = (  ", "U\"林焘、王理嘉《语音学教程》\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"AI_INC_NEAR_OPEN_FRONT\"", "\n)\nrecipeBeidaCN2004 = (  ", "U\"北京大学中文系《现代汉语》（重排本）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ", ", "\"IONG_BY_IUNG\"", ", ", "\"IAN_YUAN_AS_AN\"", "\n)\nrecipeHuangLiao2002 = (", "U\"黄伯荣、廖序东《现代汉语》（增订三版）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"CENTRAL_A_BY_SMALLCAPS_A\"", ",\n", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ", ", "\"ONLY_YUAN_AS_AN\"", ", ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ",\n", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "\n)\nrecipeYangZhou1995 = ( ", "U\"杨润陆、周一民《现代汉语》（北师大文学院教材）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "\n)\nrecipeYuan2001 = (     ", "U\"袁家骅等《汉语方言概要》（第二版重排）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ", ", "\"IAN_YUAN_AS_AN\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n", "\"IE_YUE_INC_E\"", "\n)\nrecipeTang2002 = (     ", "U\"唐作藩《音韵学教程》（第三版）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ", ", "\"IAN_YUAN_AS_AN\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n", "\"IE_YUE_INC_E\"", ", ", "\"OU_INC_SCHWA\"", "\n)\n", "######################## 函数声明 ########################", "\n", "def", " ", "createCmdPairTuple", "(", "prefSet = defaultPrefSet", "):\n    ", "U\"\"\"创建正则表达式替换命令元组\n    然后编译便于反复使用的匹配段正则表达式对象列表\n    参数prefSet是一个控制命令元组创建的选项设置序列\"\"\"", "\n    ", "### 预先处理同系列设置的覆盖关系——defaultPrefSet也可能让人动了手脚", "\n    prefSet = ", "set", "(prefSet)           ", "# 先换为可变集合副本，以防固定类型参数", "\n    ", "if", " ", "\"IE_YUE_INC_E\"", "    ", "in", " prefSet ", "and", " ", "\"IE_YUE_INC_SMALLCAPS_E\"", " ", "in", " prefSet:\n        prefSet.remove(", "\"IE_YUE_INC_SMALLCAPS_E\"", ")\n    ", "if", " ", "\"ONLY_YUAN_AS_AN\"", " ", "in", " prefSet ", "and", " ", "\"IAN_YUAN_AS_AN\"", "         ", "in", " prefSet:\n        prefSet.remove(", "\"IAN_YUAN_AS_AN\"", ")\n    ", "global", " cmdPairTuple\n    cmdPairTuple = (\n    ", "### 转换声母前的预处理", "\n    ", "# 音节间断与隔音符号", "\n    (U", "R'([aoeiuvüê][1-5]?)([yw])'", ",   ", "# a/o/e前有元音时必须写隔音符号", "\n                    U", "R\"\\1'\\2\"", "),      ", "# 标明不必写出隔音符号的音节间断", "\n    (U", "R\"'\"", ",        (U", "R\"+\"", " ", "if", " ", "\"SYLLABLE_JUNCTURE_BY_PLUS\"", "      ", "in", " prefSet ", "else", "\n                    U", "R\".\"", ")),         ", "# 音节间断（开音渡）标记", "\n    ", "# 兼容正规的印刷体字母ɡ/ɑ->g/a", "\n    (U", "R\"ɡ\"", ",         U", "R\"g\"", "),\n    (U", "R\"ɑ\"", ",         U", "R\"a\"", "),\n    ", "# 特殊的ê韵母，只能搭配零声母（“诶”字等）", "\n    (U", "R\"(ê|ea)\"", ",    U", "R\"ɛ\"", "),          ", "# ea是ê的GF 3006表示", "\n    ", "# 消除因可以紧邻韵腹充当声母或韵尾的辅音的歧义", "\n    (U", "R\"r([aoeiu])\"", ",   U", "R\"R\\1\"", "),     ", "# 声母r暂改为R，以免与卷舌标志r混淆", "\n    (U", "R\"n([aoeiuvü])\"", ", U", "R\"N\\1\"", "),     ", "# 声母n暂改为N，以免与韵尾n/ng混淆", "\n    ", "# 需要排除式匹配转换的韵母", "\n    (U", "R\"ng(?![aeu])\"", ",  U", "R\"ŋ\"", "),       ", "# 双字母ng，后鼻音韵尾或自成音节", "\n    (U", "R\"(?<![ieuyüv])e(?![inŋr])\"", ",\n                       U", "R\"ɤ\"", "),       ", "# 单韵母e，此前已转换ea和声母r/n", "\n    (U", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])er4\"", ",\n                      (U", "R\"ar4\"", " ", "if", " ", "\"NUMBER_2_BY_AR4\"", "           ", "in", " prefSet ", "else", "\n                       U", "R\"er4\"", ")),    ", "# 数字“二”是否有大开口度韵腹", "\n    (U", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])ar4\"", ",\n                      (U", "R\"a˞4\"", " ", "if", " ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", "    ", "in", " prefSet ", "else", "\n                       U", "R\"ar4\"", ")),    ", "# 数字“二”也属于er音节，可特别选用小钩", "\n    (U", "R\"a(?![ionŋ])\"", ", (U", "R\"ᴀ\"", " ", "if", " ", "\"CENTRAL_A_BY_SMALLCAPS_A\"", "    ", "in", " prefSet ", "else", "\n                       U", "R\"a\"", ")),      ", "# “央a”是否用小型大写[A]标明，已转换“二”", "\n    (U", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])er\"", ",\n                       (U", "R\"ə˞\"", " ", "if", " ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", "    ", "in", " prefSet ", "else", "\n                        U", "R\"ər\"", ")),    ", "# 一般的卷舌单韵母er，此前已排除“二”", "\n    (U", "R\"(?<![iuüv])er\"", ", U", "R\"ər\"", "),     ", "# 构成单韵母e的儿化韵的er", "\n    (U", "R\"(?<=[bpmf])o(?![uŋ])\"", ",\n                      (U", "R\"o\"", " ", "if", " ", "\"NO_TRANSITIONAL_U\"", "           ", "in", " prefSet ", "else", "\n                       U", "R\"uo\"", ")),     ", "# bo/po/mo/fo是否有韵头u", "\n    ", "### 声母——无需转换m/f/n/l/s/r(但r可根据设置执行转换)", "\n    ", "# 送气清辅音声母", "\n    (U", "R\"([ptk])\"", ",   U", "R\"\\1ʰ\"", "),\n    (U", "R\"q\"", ",         U", "R\"tɕʰ\"", "),\n    (U", "R\"(ch|ĉ)\"", ",    U", "R\"tʂʰ\"", "),        ", "# 后者是ch的注音变体", "\n    (U", "R\"c\"", ",         U", "R\"tsʰ\"", "),        ", "# 此前已排除ch", "\n    ", "# 不送气清辅音声母", "\n    (U", "R\"b\"", ",         U", "R\"p\"", "),          ", "# 此前已排除送气的p/t/k", "\n    (U", "R\"d\"", ",         U", "R\"t\"", "),\n    (U", "R\"g\"", ",         U", "R\"k\"", "),          ", "# 此前已排除后鼻音双字母中的g，注意隔音", "\n    (U", "R\"j\"", ",         U", "R\"tɕ\"", "),\n    (U", "R\"(zh|ẑ)\"", ",    U", "R\"tʂ\"", "),         ", "# 后者是zh的注音变体", "\n    (U", "R\"z\"", ",         U", "R\"ts\"", "),         ", "# 此前已排除zh", "\n    ", "# 擦音声母", "\n    (U", "R\"(sh|ŝ)\"", ",    U", "R\"ʂ\"", "),          ", "# 后者是sh的注音变体", "\n    (U", "R\"x\"", ",         U", "R\"ɕ\"", "),          ", "# 声母x，排除后再转换h", "\n    (U", "R\"h\"", ",         U", "R\"x\"", "),          ", "# 声母h，此前已排除zh/ch/sh", "\n    ", "### 韵母", "\n    ", "# 舌尖元音韵母", "\n    (U", "R\"(sʰ?)i\"", ",    U", "R\"\\1ɿ\"", "),        ", "# zi/ci/si", "\n    (U", "R\"([ʂR]ʰ?)i\"", ", U", "R\"\\1ʅ\"", "),        ", "# zhi/chi/shi/ri", "\n    ", "# 部分韵腹省略表示的韵母+隔音符号和韵头w/y", "\n    (U", "R\"iu\"", ",        U", "R\"iou\"", "),        ", "# 无需转换iou", "\n    (U", "R\"ui\"", ",        U", "R\"uei\"", "),        ", "# 无需转换uei", "\n    (U", "R\"wu?\"", ",       U", "R\"u\"", "),\n    (U", "R\"yi?\"", ",       U", "R\"i\"", "),          ", "# 此前已排除iu", "\n    ", "# 韵头[i]/[y]的韵母", "\n    (U", "R\"iu|[üv]\"", ",   U", "R\"y\"", "),          ", "# 转换ü/v，恢复yu/yue，准备yuan/yun", "\n    (U", "R\"ian\"", ",      (U", "R\"ian\"", " ", "if", " ", "\"IAN_YUAN_AS_AN\"", "               ", "in", " prefSet ", "else", "\n                    U", "R\"iɛn\"", ")),       ", "# 是否认为ian韵腹和an一样", "\n    (U", "R\"yan\"", ",      (U", "R\"yan\"", " ", "if", " (", "\"ONLY_YUAN_AS_AN\"", "             ", "in", " prefSet)\n                            ", "or", " (", "\"IAN_YUAN_AS_AN\"", "              ", "in", " prefSet) ", "else", "\n                    U", "R\"yɛn\"", ")),       ", "# 是否认为yuan韵腹和an一样（覆盖上一选项）", "\n    (U", "R\"(ɕʰ?)uan\"", ", (U", "R\"\\1yan\"", " ", "if", " (", "\"ONLY_YUAN_AS_AN\"", "           ", "in", " prefSet)\n                              ", "or", " (", "\"IAN_YUAN_AS_AN\"", "            ", "in", " prefSet) ", "else", "\n                    U", "R\"\\1yɛn\"", ")),     ", "# {j/q/x}uan，是否认为和an一样", "\n    (U", "R\"(ɕʰ?)u\"", ",    U", "R\"\\1y\"", "),        ", "# {j/q/x}u{e/n}韵头，此前已排除{j/q/x}uan", "\n    (U", "R\"([iy])e(?!n)\"", ",  (U", "R\"\\1ᴇ\"", " ", "if", " ", "\"IE_YUE_INC_SMALLCAPS_E\"", "  ", "in", " prefSet ", "else", "\n                         U", "R\"\\1e\"", ")),  ", "# ie/yue/üe/ve，此前已转换{j/q/x}u", "\n    (U", "R\"([iy])e(?!n)\"", ",  (U", "R\"\\1e\"", " ", "if", " ", "\"IE_YUE_INC_E\"", "            ", "in", " prefSet ", "else", "\n                         U", "R\"\\1ɛ\"", ")),  ", "# ie/yue是否采用[e]标明，此前已判断[E]", "\n    ", "# 舌面央中元音轻微过渡韵腹", "\n    (U", "R\"iŋ\"", ",       (U", "R\"iəŋ\"", " ", "if", " ", "\"TRANSITIONAL_SCHWA_IN_ING\"", "    ", "in", " prefSet ", "else", "\n                    U", "R\"iŋ\"", ")),        ", "# ing是否有舌面央中元音韵腹", "\n    (U", "R\"(un|uen)\"", ", (U", "R\"uən\"", " ", "if", " ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", "    ", "in", " prefSet ", "else", "\n                    U", "R\"un\"", ")),        ", "# 合口un/uen过渡，此前已排除撮口[j/q/x]un", "\n    ", "# 后移的a", "\n    (U", "R\"ao\"", ",        U", "R\"ɑu\"", "),         ", "# 包括ao/iao，o改为u", "\n    (U", "R\"aŋ\"", ",        U", "R\"ɑŋ\"", "),         ", "# 包括ang/iang/uang", "\n    ", "# 韵母en/eng韵腹是舌面央中元音", "\n    (U", "R\"e([nŋ])\"", ",   U", "R\"ə\\1\"", "),\n    ", "# ong类韵母", "\n    (U", "R\"ioŋ\"", ",      (U", "R\"iuŋ\"", " ", "if", " ", "\"IONG_BY_IUNG\"", "                 ", "in", " prefSet ", "else", "\n                    U", "R\"yŋ\"", ")),        ", "# iong的两种转换，此前yong已转换为iong", "\n    (U", "R\"oŋ\"", ",        U", "R\"uŋ\"", "),         ", "# ong，此前已排除iong", "\n    ", "### 儿化音变——无需转换ar/ir/ur/aur/our/yur", "\n    ", "# 舌尖元音韵母", "\n    (U", "R\"[ɿʅ]r\"", ",     U", "R\"ər\"", "),         ", "# {zh/ch/sh/r/z/c/s}ir", "\n    ", "# 鼻韵尾脱落和相应的韵腹元音替换", "\n    (U", "R\"[aɛ][in]r\"", ",(U", "R\"ɐr\"", " ", "if", " ", "\"AIR_ANR_INC_NEAR_OPEN_CENTRAL\"", " ", "in", " prefSet ", "else", "\n                    U", "R\"ar\"", ")),        ", "# air/anr韵尾脱落后的韵腹替换", "\n    (U", "R\"eir|ənr\"", ",   U", "R\"ər\"", "),         ", "# eir韵腹央化，韵尾脱落；enr韵尾脱落", "\n    (U", "R\"([iy])r\"", ",   U", "R\"\\1ər\"", "),       ", "# ir/yr增加央化韵腹", "\n    (U", "R\"([iuy])nr\"", ", U", "R\"\\1ər\"", "),       ", "# inr/ynr/unr韵尾脱落后增加央化韵腹", "\n    (U", "R\"iuŋr\"", ",      U", "R\"iũr\"", "),        ", "# iungr(iongr的可选变换)", "\n    (U", "R\"([iuy])ŋr\"", ", U", "R\"\\1ə̃r\"", "),      ", "# ingr/yngr/ungr韵尾脱落后增加央化鼻化韵腹", "\n    (U", "R\"ŋr\"", ",        U", "R\"̃r\"", "),         ", "# ang/eng韵尾儿化脱落后韵腹鼻化", "\n    ", "### 声母、韵母转换的善后扫尾工作", "\n    ", "# 处理儿化韵卷舌动作", "\n    (U", "R\"r\"", ",        (U", "R\"˞\"", " ", "if", " ", "\"RHOTICITY_BY_RHOTIC_HOOK\"", "       ", "in", " prefSet ", "else", "\n                    U", "R\"r\"", ")),         ", "# 是否先把儿化韵卷舌动作改为卷舌小钩", "\n    (U", "R\"R\"", ",        (U", "R\"ʐ\"", " ", "if", " ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "    ", "in", " prefSet ", "else", " \n                    U", "R\"r\"", ")),         ", "# 恢复声母r，是否采用卷舌浊擦音表示声母r", "\n    ", "# 此前已处理完卷舌动作和声母，现在处理剩下的r字符的可选转换", "\n    (U", "R\"r\"", ",        (U", "R\"ɻ\"", " ", "if", " ", "\"R_TURNED_WITH_HOOK\"", "             ", "in", " prefSet ", "else", "\n                    U", "R\"r\"", ")),         ", "# 是否严格采用卷舌通音符号[ɻ]", "\n    ", "# 恢复声母n", "\n    (U", "R\"N\"", ",         U", "R\"n\"", "),          ", "# 此前已处理完单元音韵母e和ie/yue", "\n    ", "# 其他选项", "\n    (U", "R\"ʰ\"", ",        (U", "R\"ʻ\"", " ", "if", " ", "\"ASPIRATE_BY_TURNED_COMMA\"", "       ", "in", " prefSet ", "else", "\n                    U", "R\"ʰ\"", ")),         ", "# 是否采用反逗号送气符号", "\n    (U", "R\"ai\"", ",       (U", "R\"æi\"", " ", "if", " ", "\"AI_INC_NEAR_OPEN_FRONT\"", "        ", "in", " prefSet ", "else", "\n                    U", "R\"ai\"", ")),        ", "# （非儿化的）ai/uai韵腹为舌面前次开元音", "\n    (U", "R\"ou\"", ",       (U", "R\"əu\"", " ", "if", " ", "\"OU_INC_SCHWA\"", "                  ", "in", " prefSet ", "else", "\n                    U", "R\"ou\"", ")),        ", "# ou/iou是否采用舌面央中元音韵腹", "\n    ", "### 声调", "\n    ", "# 先期处理", "\n    ((U", "R\"[1-5]\"", " ", "if", " ", "\"HIDE_ALL_TONE_VALUE\"", "                      ", "in", " prefSet ", "else", "\n      U", "R\"5\"", "),       U", "R\"\"", "),           ", "# 只隐藏轻声还是隐藏所有的声调转换", "\n    (U", "R\"([1-4])\"", ",\n      (U", "R\"<sup>\\1</sup>\"", " ", "if", " ", "\"HTML_SUP_TAG_FOR_TONE_VALUE\"", "     ", "in", " prefSet ", "else", "\n                    U", "R\"(\\1)\"", ")),      ", "# 隔离单个数字调号", "\n    ", "# 标出普通话调值", "\n    (", "\"([(>])1([)<])\"", ", U", "R\"\\1 55\\2\"", "),  ", "# 阴平（第一声）", "\n    (", "\"([(>])2([)<])\"", ", U", "R\"\\1 35\\2\"", "),  ", "# 阳平（第二声）", "\n    (", "\"([(>])3([)<])\"", ", U", "R\"\\1 214\\2\"", "), ", "# 上声（第三声）", "\n    (", "\"([(>])4([)<])\"", ", U", "R\"\\1 51\\2\"", "),  ", "# 去声（第四声）", "\n    (", "\"([(>]) ([235])\"", ",U", "R\"\\1\\2\"", ")      ", "# 去掉此前标调值时加上的空格", "\n    )\n    ", "### 以上，替换命令元组创建完成！", "\n    ", "# 编译正则表达式对象，以便反复使用", "\n    ", "global", " reList\n    reList = ", "map", "(re.", "compile", ", [pair[PATTERN] ", "for", " pair ", "in", " cmdPairTuple])\n", "def", " ", "decodeLine", "(", "encodedLine", "):\n    ", "U\"\"\"对每一行拼音字符串做字符编码页解码\"\"\"", "\n    ", "try", ":\n        decodedLine = encodedLine.decode(UTF8)\n    ", "except", " UnicodeDecodeError:             ", "# 如果不是UTF-8", "\n        ", "try", ":\n            decodedLine = encodedLine.decode(GB18030)\n        ", "except", " UnicodeDecodeError:         ", "# 如果GB-18030也不行", "\n            decodedLine = ", "\"\"", " + os.linesep  ", "# 解码失败，只能清空", "\n            ", "global", " decodingFailed\n            decodingFailed = ", "True", "          ", "# 设置字符编码页解码失败标志", "\n    ", "except", " UnicodeEncodeError:             ", "# wx中可能出现编码错误", "\n        decodedLine = encodedLine\n    ", "return", " decodedLine\n", "def", " ", "msgOnDecodingFailure", "(", "fileName = ", "\"标准输入流\"", "):\n    ", "U\"\"\"针对字符编码页解码失败的文件在事后通过标准错误流提出警告\"\"\"", "\n    ", "global", " decodingFailed\n    ", "if", " decodingFailed:                  ", "# 检查上次文件处理中是否出现解码错误", "\n        sys.stderr.write((", "U\"%s 警告：%s解码失败！\"", "%(sys.argv[", "0", "], fileName)).encode(GBK) + os.linesep)\n        decodingFailed = ", "False", "          ", "# 重置字符集码页解码失败标志为关闭", "\n", "def", " ", "convertLine", "(", "pinyinLine", "):\n    ", "U\"\"\"对每一行拼音字符串依次执行全部替换命令，像流编辑器sed一样工作\"\"\"", "\n    ", "# 以单个“#”开头的行不转换，当作注释行", "\n    ", "if", " pinyinLine.startswith(", "\"#\"", ") ", "and", " ", "not", " pinyinLine.startswith(", "\"##\"", "):\n        ", "return", " pinyinLine[", "1", ":]           ", "# 去掉开头的“#”后再返回", "\n    ", "# 以两个“#”开头的行，只保留一个“#”，然后继续", "\n    ", "if", " pinyinLine.startswith(", "\"##\"", "):\n        pinyinLine = pinyinLine[", "1", ":]\n    ipaLine = pinyinLine.lower()        ", "# 大写字母在替换过程中另有意义", "\n    ", "for", " eachRe, eachCmdPair ", "in", " ", "zip", "(reList, cmdPairTuple):\n        ipaLine = eachRe.sub(eachCmdPair[SUBST], ipaLine)\n    ", "return", " ipaLine\n", "def", " ", "convertPinyin2IPA", "(", "pinyinLines, linesep=", "\"\"", "):\n    ", "U\"\"\"将汉语拼音文稿转换为国际音标文稿\n    参数pinyinLines是输入的字符串序列\n    参数linesep是行分隔符（对于fp.readlines()或s.splitlines(True)的输入，缺省即可）\"\"\"", "\n    ", "# 逐行处理解码和转换，有利于减少解码带来的乱码行", "\n    ipaLines = ", "map", "(convertLine, ", "map", "(decodeLine, pinyinLines))\n    ", "return", " linesep.join(ipaLines).encode(UTF8)  ", "# 必须按UTF-8再encode一下", "\n", "######################## 主干函数 ########################", "\n", "def", " ", "Pinyin2IPA", "(", "pinyinLines, *prefs", "):\n    ", "U\"\"\"创建转换命令，并将汉语拼音文稿转换为国际音标文稿\n        参数pinyinLines可以是字符串序列或单个字符串（后者也会包装进元组）\n        参数收集元组prefs是一个控制命令元组创建的选项设置表\"\"\"", "\n    ", "# 根据设置表创建替换命令元组（设置表缺省时提供默认值）", "\n    ", "if", " ", "not", " prefs:\n        prefs = defaultPrefSet\n    createCmdPairTuple(prefs)\n    ", "# 将单个字符串包装进元组，以便逐行处理", "\n    ", "if", " ", "isinstance", "(pinyinLines, ", "str", "):\n        pinyinLines = (pinyinLines, )\n    ", "return", " convertPinyin2IPA(pinyinLines)\n", "######################## 直接运行 ########################", "\n", "if", " __name__ == ", "'__main__'", ":\n    ", "import", " glob, locale, sys\n    globFailMsg = ", "U\"%s 错误：参数“%s”不能匹配任何有效的文件名！\"", ".encode(GBK) + os.linesep\n    readFailMsg = ", "U\"%s 错误：文件“%s”数据读取失败！\"", ".encode(GBK) + os.linesep\n    ", "if", " ", "len", "(sys.argv) > ", "1", ":\n        ", "if", " sys.argv[", "1", "].lower() ", "not", " ", "in", " (", "\"/?\"", ", ", "\"/h\"", ", ", "\"--help\"", ", ", "\"-h\"", "):\n            ", "for", " eachArg ", "in", " sys.argv[", "1", ":]:              ", "# 遍历glob表达式参数", "\n                fileNameList = glob.glob(eachArg)     ", "# 考虑DOS不负责glob解析", "\n                ", "if", " ", "not", " fileNameList:\n                    sys.stderr.write(globFailMsg%(sys.argv[", "0", "], eachArg))\n                ", "else", ":\n                    ", "for", " eachFileName ", "in", " fileNameList:\n                        ", "try", ":\n                            sys.stdout.write(Pinyin2IPA(", "open", "(eachFileName, ", "'r'", ").readlines()))\n                            msgOnDecodingFailure(", "U\"文件“%s”\"", "%eachFileName)\n                        ", "except", " IOError:\n                            sys.stderr.write(readFailMsg%(sys.argv[", "0", "], eachFileName))\n        ", "else", ":  ", "# 按照本地设置的编码方式输出模块文档作为简单帮助", "\n            language_dummy, encoding = locale.getdefaultlocale()\n            ", "print", " (__doc__%(sys.argv[", "0", "], sys.argv[", "0", "])).encode(encoding)\n    ", "else", ":\n        sys.stdout.write(Pinyin2IPA(sys.stdin.readlines()))\n        msgOnDecodingFailure()\n", "######################## 脚本结束 ########################", "\n", "\n", "尝试运行后会告知在cmdPairTuple函数中出现invalid syntax。", "\n", "\n", "因为不知道UR是否是语法的一部分，所以不敢贸然删除。", "\n", "请帮忙看看这个cmdPairTuple函数怎么改才能让程序正常运行，谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这文章看看&lt;a href=\"https://blog.csdn.net/qq_20210951/article/details/109309141\"&gt;https://blog.csdn.net/qq_20210951/article/details/109309141&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;还有你有没有加数据库配置&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["springboot整合mybatisPlus中报错", ["错误全部", "\n\n", "\n", "\"C:\\Program Files\\Java\\jdk1.8.0_191\\bin\\java.exe\" -XX:TieredStopAtLevel=1 -noverify -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dspring.jmx.enabled=true -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true \"-javaagent:D:\\work\\Idea\\IntelliJ IDEA 2020.1.1\\lib\\idea_rt.jar=52898:D:\\work\\Idea\\IntelliJ IDEA 2020.1.1\\bin\" -Dfile.encoding=UTF-8 -classpath \"C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\charsets.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\deploy.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\access-bridge-64.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\cldrdata.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\dnsns.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\jaccess.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\jfxrt.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\localedata.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\nashorn.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\sunec.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\sunjce_provider.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\sunmscapi.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\sunpkcs11.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\ext\\zipfs.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\javaws.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\jce.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\jfr.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\jfxswt.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\jsse.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\management-agent.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\plugin.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\resources.jar;C:\\Program Files\\Java\\jdk1.8.0_191\\jre\\lib\\rt.jar;D:\\work\\Idea\\workSpase\\myself\\zrp-dome\\zrp-dome-mybatis\\target\\classes;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter-web\\2.2.5.RELEASE\\spring-boot-starter-web-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter\\2.2.5.RELEASE\\spring-boot-starter-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot\\2.2.5.RELEASE\\spring-boot-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter-logging\\2.2.5.RELEASE\\spring-boot-starter-logging-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\ch\\qos\\logback\\logback-classic\\1.2.3\\logback-classic-1.2.3.jar;D:\\work\\maven\\repository-ali\\ch\\qos\\logback\\logback-core\\1.2.3\\logback-core-1.2.3.jar;D:\\work\\maven\\repository-ali\\org\\apache\\logging\\log4j\\log4j-to-slf4j\\2.12.1\\log4j-to-slf4j-2.12.1.jar;D:\\work\\maven\\repository-ali\\org\\apache\\logging\\log4j\\log4j-api\\2.12.1\\log4j-api-2.12.1.jar;D:\\work\\maven\\repository-ali\\org\\slf4j\\jul-to-slf4j\\1.7.30\\jul-to-slf4j-1.7.30.jar;D:\\work\\maven\\repository-ali\\jakarta\\annotation\\jakarta.annotation-api\\1.3.5\\jakarta.annotation-api-1.3.5.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-core\\5.2.4.RELEASE\\spring-core-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-jcl\\5.2.4.RELEASE\\spring-jcl-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\yaml\\snakeyaml\\1.25\\snakeyaml-1.25.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter-json\\2.2.5.RELEASE\\spring-boot-starter-json-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\core\\jackson-databind\\2.10.2\\jackson-databind-2.10.2.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\datatype\\jackson-datatype-jdk8\\2.10.2\\jackson-datatype-jdk8-2.10.2.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\datatype\\jackson-datatype-jsr310\\2.10.2\\jackson-datatype-jsr310-2.10.2.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\module\\jackson-module-parameter-names\\2.10.2\\jackson-module-parameter-names-2.10.2.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter-tomcat\\2.2.5.RELEASE\\spring-boot-starter-tomcat-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\apache\\tomcat\\embed\\tomcat-embed-core\\9.0.31\\tomcat-embed-core-9.0.31.jar;D:\\work\\maven\\repository-ali\\org\\apache\\tomcat\\embed\\tomcat-embed-el\\9.0.31\\tomcat-embed-el-9.0.31.jar;D:\\work\\maven\\repository-ali\\org\\apache\\tomcat\\embed\\tomcat-embed-websocket\\9.0.31\\tomcat-embed-websocket-9.0.31.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter-validation\\2.2.5.RELEASE\\spring-boot-starter-validation-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\jakarta\\validation\\jakarta.validation-api\\2.0.2\\jakarta.validation-api-2.0.2.jar;D:\\work\\maven\\repository-ali\\org\\hibernate\\validator\\hibernate-validator\\6.0.18.Final\\hibernate-validator-6.0.18.Final.jar;D:\\work\\maven\\repository-ali\\org\\jboss\\logging\\jboss-logging\\3.4.1.Final\\jboss-logging-3.4.1.Final.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\classmate\\1.5.1\\classmate-1.5.1.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-web\\5.2.4.RELEASE\\spring-web-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-beans\\5.2.4.RELEASE\\spring-beans-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-webmvc\\5.2.4.RELEASE\\spring-webmvc-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-aop\\5.2.4.RELEASE\\spring-aop-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-context\\5.2.4.RELEASE\\spring-context-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-expression\\5.2.4.RELEASE\\spring-expression-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\cloud\\spring-cloud-starter-alibaba-nacos-discovery\\2.2.1.RELEASE\\spring-cloud-starter-alibaba-nacos-discovery-2.2.1.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\nacos\\nacos-client\\1.2.1\\nacos-client-1.2.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\nacos\\nacos-common\\1.2.1\\nacos-common-1.2.1.jar;D:\\work\\maven\\repository-ali\\commons-io\\commons-io\\2.2\\commons-io-2.2.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\nacos\\nacos-api\\1.2.1\\nacos-api-1.2.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\fastjson\\1.2.58\\fastjson-1.2.58.jar;D:\\work\\maven\\repository-ali\\com\\google\\guava\\guava\\22.0\\guava-22.0.jar;D:\\work\\maven\\repository-ali\\com\\google\\code\\findbugs\\jsr305\\1.3.9\\jsr305-1.3.9.jar;D:\\work\\maven\\repository-ali\\com\\google\\errorprone\\error_prone_annotations\\2.0.18\\error_prone_annotations-2.0.18.jar;D:\\work\\maven\\repository-ali\\com\\google\\j2objc\\j2objc-annotations\\1.1\\j2objc-annotations-1.1.jar;D:\\work\\maven\\repository-ali\\org\\codehaus\\mojo\\animal-sniffer-annotations\\1.14\\animal-sniffer-annotations-1.14.jar;D:\\work\\maven\\repository-ali\\commons-codec\\commons-codec\\1.13\\commons-codec-1.13.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\core\\jackson-core\\2.10.2\\jackson-core-2.10.2.jar;D:\\work\\maven\\repository-ali\\io\\prometheus\\simpleclient\\0.5.0\\simpleclient-0.5.0.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\spring\\spring-context-support\\1.0.6\\spring-context-support-1.0.6.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-commons\\2.2.2.RELEASE\\spring-cloud-commons-2.2.2.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\security\\spring-security-crypto\\5.2.2.RELEASE\\spring-security-crypto-5.2.2.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-context\\2.2.2.RELEASE\\spring-cloud-context-2.2.2.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\cloud\\spring-cloud-starter-alibaba-nacos-config\\2.2.1.RELEASE\\spring-cloud-starter-alibaba-nacos-config-2.2.1.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\cloud\\spring-cloud-starter-alibaba-sentinel\\2.2.1.RELEASE\\spring-cloud-starter-alibaba-sentinel-2.2.1.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-transport-simple-http\\1.7.1\\sentinel-transport-simple-http-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-transport-common\\1.7.1\\sentinel-transport-common-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-datasource-extension\\1.7.1\\sentinel-datasource-extension-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-annotation-aspectj\\1.7.1\\sentinel-annotation-aspectj-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-core\\1.7.1\\sentinel-core-1.7.1.jar;D:\\work\\maven\\repository-ali\\org\\aspectj\\aspectjrt\\1.9.5\\aspectjrt-1.9.5.jar;D:\\work\\maven\\repository-ali\\org\\aspectj\\aspectjweaver\\1.9.2\\aspectjweaver-1.9.2.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\cloud\\spring-cloud-circuitbreaker-sentinel\\2.2.1.RELEASE\\spring-cloud-circuitbreaker-sentinel-2.2.1.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-reactor-adapter\\1.7.1\\sentinel-reactor-adapter-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-spring-webflux-adapter\\1.7.1\\sentinel-spring-webflux-adapter-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-spring-webmvc-adapter\\1.7.1\\sentinel-spring-webmvc-adapter-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-parameter-flow-control\\1.7.1\\sentinel-parameter-flow-control-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\googlecode\\concurrentlinkedhashmap\\concurrentlinkedhashmap-lru\\1.4.2\\concurrentlinkedhashmap-lru-1.4.2.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-cluster-server-default\\1.7.1\\sentinel-cluster-server-default-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-cluster-common-default\\1.7.1\\sentinel-cluster-common-default-1.7.1.jar;D:\\work\\maven\\repository-ali\\io\\netty\\netty-handler\\4.1.45.Final\\netty-handler-4.1.45.Final.jar;D:\\work\\maven\\repository-ali\\io\\netty\\netty-common\\4.1.45.Final\\netty-common-4.1.45.Final.jar;D:\\work\\maven\\repository-ali\\io\\netty\\netty-buffer\\4.1.45.Final\\netty-buffer-4.1.45.Final.jar;D:\\work\\maven\\repository-ali\\io\\netty\\netty-transport\\4.1.45.Final\\netty-transport-4.1.45.Final.jar;D:\\work\\maven\\repository-ali\\io\\netty\\netty-resolver\\4.1.45.Final\\netty-resolver-4.1.45.Final.jar;D:\\work\\maven\\repository-ali\\io\\netty\\netty-codec\\4.1.45.Final\\netty-codec-4.1.45.Final.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\csp\\sentinel-cluster-client-default\\1.7.1\\sentinel-cluster-client-default-1.7.1.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\cloud\\spring-cloud-alibaba-sentinel-datasource\\2.2.1.RELEASE\\spring-cloud-alibaba-sentinel-datasource-2.2.1.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\dataformat\\jackson-dataformat-xml\\2.10.2\\jackson-dataformat-xml-2.10.2.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\core\\jackson-annotations\\2.10.2\\jackson-annotations-2.10.2.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\module\\jackson-module-jaxb-annotations\\2.10.2\\jackson-module-jaxb-annotations-2.10.2.jar;D:\\work\\maven\\repository-ali\\jakarta\\xml\\bind\\jakarta.xml.bind-api\\2.3.2\\jakarta.xml.bind-api-2.3.2.jar;D:\\work\\maven\\repository-ali\\jakarta\\activation\\jakarta.activation-api\\1.2.2\\jakarta.activation-api-1.2.2.jar;D:\\work\\maven\\repository-ali\\org\\codehaus\\woodstox\\stax2-api\\4.2\\stax2-api-4.2.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\woodstox\\woodstox-core\\6.0.3\\woodstox-core-6.0.3.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-starter-openfeign\\2.2.6.RELEASE\\spring-cloud-starter-openfeign-2.2.6.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-starter\\2.2.6.RELEASE\\spring-cloud-starter-2.2.6.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\security\\spring-security-rsa\\1.0.9.RELEASE\\spring-security-rsa-1.0.9.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\bouncycastle\\bcpkix-jdk15on\\1.64\\bcpkix-jdk15on-1.64.jar;D:\\work\\maven\\repository-ali\\org\\bouncycastle\\bcprov-jdk15on\\1.64\\bcprov-jdk15on-1.64.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-openfeign-core\\2.2.6.RELEASE\\spring-cloud-openfeign-core-2.2.6.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter-aop\\2.2.5.RELEASE\\spring-boot-starter-aop-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\io\\github\\openfeign\\form\\feign-form-spring\\3.8.0\\feign-form-spring-3.8.0.jar;D:\\work\\maven\\repository-ali\\io\\github\\openfeign\\form\\feign-form\\3.8.0\\feign-form-3.8.0.jar;D:\\work\\maven\\repository-ali\\commons-fileupload\\commons-fileupload\\1.4\\commons-fileupload-1.4.jar;D:\\work\\maven\\repository-ali\\io\\github\\openfeign\\feign-core\\10.10.1\\feign-core-10.10.1.jar;D:\\work\\maven\\repository-ali\\io\\github\\openfeign\\feign-slf4j\\10.10.1\\feign-slf4j-10.10.1.jar;D:\\work\\maven\\repository-ali\\org\\slf4j\\slf4j-api\\1.7.30\\slf4j-api-1.7.30.jar;D:\\work\\maven\\repository-ali\\io\\github\\openfeign\\feign-hystrix\\10.10.1\\feign-hystrix-10.10.1.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\archaius\\archaius-core\\0.7.6\\archaius-core-0.7.6.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-starter-netflix-ribbon\\2.2.6.RELEASE\\spring-cloud-starter-netflix-ribbon-2.2.6.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-netflix-ribbon\\2.2.6.RELEASE\\spring-cloud-netflix-ribbon-2.2.6.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-netflix-archaius\\2.2.6.RELEASE\\spring-cloud-netflix-archaius-2.2.6.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-starter-netflix-archaius\\2.2.6.RELEASE\\spring-cloud-starter-netflix-archaius-2.2.6.RELEASE.jar;D:\\work\\maven\\repository-ali\\commons-configuration\\commons-configuration\\1.8\\commons-configuration-1.8.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\ribbon\\ribbon\\2.3.0\\ribbon-2.3.0.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\ribbon\\ribbon-transport\\2.3.0\\ribbon-transport-2.3.0.jar;D:\\work\\maven\\repository-ali\\io\\reactivex\\rxnetty-contexts\\0.4.9\\rxnetty-contexts-0.4.9.jar;D:\\work\\maven\\repository-ali\\io\\reactivex\\rxnetty-servo\\0.4.9\\rxnetty-servo-0.4.9.jar;D:\\work\\maven\\repository-ali\\javax\\inject\\javax.inject\\1\\javax.inject-1.jar;D:\\work\\maven\\repository-ali\\io\\reactivex\\rxnetty\\0.4.9\\rxnetty-0.4.9.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\ribbon\\ribbon-core\\2.3.0\\ribbon-core-2.3.0.jar;D:\\work\\maven\\repository-ali\\commons-lang\\commons-lang\\2.6\\commons-lang-2.6.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\ribbon\\ribbon-httpclient\\2.3.0\\ribbon-httpclient-2.3.0.jar;D:\\work\\maven\\repository-ali\\commons-collections\\commons-collections\\3.2.2\\commons-collections-3.2.2.jar;D:\\work\\maven\\repository-ali\\org\\apache\\httpcomponents\\httpclient\\4.5.11\\httpclient-4.5.11.jar;D:\\work\\maven\\repository-ali\\org\\apache\\httpcomponents\\httpcore\\4.4.13\\httpcore-4.4.13.jar;D:\\work\\maven\\repository-ali\\com\\sun\\jersey\\jersey-client\\1.19.1\\jersey-client-1.19.1.jar;D:\\work\\maven\\repository-ali\\com\\sun\\jersey\\jersey-core\\1.19.1\\jersey-core-1.19.1.jar;D:\\work\\maven\\repository-ali\\javax\\ws\\rs\\jsr311-api\\1.1.1\\jsr311-api-1.1.1.jar;D:\\work\\maven\\repository-ali\\com\\sun\\jersey\\contribs\\jersey-apache-client4\\1.19.1\\jersey-apache-client4-1.19.1.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\servo\\servo-core\\0.10.1\\servo-core-0.10.1.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\servo\\servo-internal\\0.10.1\\servo-internal-0.10.1.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\netflix-commons\\netflix-commons-util\\0.1.1\\netflix-commons-util-0.1.1.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\ribbon\\ribbon-loadbalancer\\2.3.0\\ribbon-loadbalancer-2.3.0.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\netflix-commons\\netflix-statistics\\0.1.1\\netflix-statistics-0.1.1.jar;D:\\work\\maven\\repository-ali\\io\\reactivex\\rxjava\\1.3.8\\rxjava-1.3.8.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-starter-netflix-hystrix\\2.2.2.RELEASE\\spring-cloud-starter-netflix-hystrix-2.2.2.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\cloud\\spring-cloud-netflix-hystrix\\2.2.2.RELEASE\\spring-cloud-netflix-hystrix-2.2.2.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\hystrix\\hystrix-core\\1.5.18\\hystrix-core-1.5.18.jar;D:\\work\\maven\\repository-ali\\org\\hdrhistogram\\HdrHistogram\\2.1.9\\HdrHistogram-2.1.9.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\hystrix\\hystrix-serialization\\1.5.18\\hystrix-serialization-1.5.18.jar;D:\\work\\maven\\repository-ali\\com\\fasterxml\\jackson\\module\\jackson-module-afterburner\\2.10.2\\jackson-module-afterburner-2.10.2.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\hystrix\\hystrix-metrics-event-stream\\1.5.18\\hystrix-metrics-event-stream-1.5.18.jar;D:\\work\\maven\\repository-ali\\com\\netflix\\hystrix\\hystrix-javanica\\1.5.18\\hystrix-javanica-1.5.18.jar;D:\\work\\maven\\repository-ali\\org\\apache\\commons\\commons-lang3\\3.9\\commons-lang3-3.9.jar;D:\\work\\maven\\repository-ali\\org\\ow2\\asm\\asm\\5.0.4\\asm-5.0.4.jar;D:\\work\\maven\\repository-ali\\io\\reactivex\\rxjava-reactive-streams\\1.2.1\\rxjava-reactive-streams-1.2.1.jar;D:\\work\\maven\\repository-ali\\org\\reactivestreams\\reactive-streams\\1.0.3\\reactive-streams-1.0.3.jar;D:\\work\\maven\\repository-ali\\com\\alibaba\\druid\\1.1.20\\druid-1.1.20.jar;D:\\work\\maven\\repository-ali\\mysql\\mysql-connector-java\\8.0.20\\mysql-connector-java-8.0.20.jar;D:\\work\\maven\\repository-ali\\com\\google\\protobuf\\protobuf-java\\3.6.1\\protobuf-java-3.6.1.jar;D:\\work\\maven\\repository-ali\\com\\baomidou\\mybatis-plus-boot-starter\\3.4.2\\mybatis-plus-boot-starter-3.4.2.jar;D:\\work\\maven\\repository-ali\\com\\baomidou\\mybatis-plus\\3.4.2\\mybatis-plus-3.4.2.jar;D:\\work\\maven\\repository-ali\\com\\baomidou\\mybatis-plus-extension\\3.4.2\\mybatis-plus-extension-3.4.2.jar;D:\\work\\maven\\repository-ali\\com\\baomidou\\mybatis-plus-core\\3.4.2\\mybatis-plus-core-3.4.2.jar;D:\\work\\maven\\repository-ali\\com\\baomidou\\mybatis-plus-annotation\\3.4.2\\mybatis-plus-annotation-3.4.2.jar;D:\\work\\maven\\repository-ali\\com\\github\\jsqlparser\\jsqlparser\\4.0\\jsqlparser-4.0.jar;D:\\work\\maven\\repository-ali\\org\\mybatis\\mybatis\\3.5.6\\mybatis-3.5.6.jar;D:\\work\\maven\\repository-ali\\org\\mybatis\\mybatis-spring\\2.0.5\\mybatis-spring-2.0.5.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-autoconfigure\\2.2.5.RELEASE\\spring-boot-autoconfigure-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\boot\\spring-boot-starter-jdbc\\2.2.5.RELEASE\\spring-boot-starter-jdbc-2.2.5.RELEASE.jar;D:\\work\\maven\\repository-ali\\com\\zaxxer\\HikariCP\\3.4.2\\HikariCP-3.4.2.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-jdbc\\5.2.4.RELEASE\\spring-jdbc-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\springframework\\spring-tx\\5.2.4.RELEASE\\spring-tx-5.2.4.RELEASE.jar;D:\\work\\maven\\repository-ali\\org\\projectlombok\\lombok\\1.16.18\\lombok-1.16.18.jar\" com.zrp.Launcher\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::        (v2.2.5.RELEASE)\n\n2021-03-31 17:24:08.092  INFO 10920 --- [           main] com.zrp.Launcher                         : The following profiles are active: dev\n2021-03-31 17:24:08.135  WARN 10920 --- [           main] o.s.c.c.u.SpringFactoryImportSelector    : More than one implementation of @EnableCircuitBreaker (now relying on @Conditionals to pick one): [com.alibaba.cloud.sentinel.custom.SentinelCircuitBreakerConfiguration, org.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration]\n2021-03-31 17:24:08.641  INFO 10920 --- [           main] o.s.cloud.context.scope.GenericScope     : BeanFactory id=e645c3eb-3aa8-3327-bfb7-27db67f3d842\n2021-03-31 17:24:08.782  INFO 10920 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.cloud.sentinel-com.alibaba.cloud.sentinel.SentinelProperties' of type [com.alibaba.cloud.sentinel.SentinelProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\n2021-03-31 17:24:08.904  INFO 10920 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'com.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration' of type [com.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\n2021-03-31 17:24:09.074  INFO 10920 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)\n2021-03-31 17:24:09.083  INFO 10920 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n2021-03-31 17:24:09.083  INFO 10920 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]\n2021-03-31 17:24:09.169  INFO 10920 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2021-03-31 17:24:09.169  INFO 10920 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1059 ms\n2021-03-31 17:24:09.279  WARN 10920 --- [           main] c.n.c.sources.URLConfigurationSource     : No URLs will be polled as dynamic configuration sources.\n2021-03-31 17:24:09.279  INFO 10920 --- [           main] c.n.c.sources.URLConfigurationSource     : To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.\n2021-03-31 17:24:09.282  WARN 10920 --- [           main] c.n.c.sources.URLConfigurationSource     : No URLs will be polled as dynamic configuration sources.\n2021-03-31 17:24:09.282  INFO 10920 --- [           main] c.n.c.sources.URLConfigurationSource     : To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.\n2021-03-31 17:24:09.423  INFO 10920 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'\n2021-03-31 17:24:09.458  INFO 10920 --- [           main] c.a.c.s.SentinelWebAutoConfiguration     : [Sentinel Starter] register SentinelWebInterceptor with urlPatterns: [/**].\n2021-03-31 17:24:10.284  INFO 10920 --- [           main] o.s.s.c.ThreadPoolTaskScheduler          : Initializing ExecutorService 'Nacso-Watch-Task-Scheduler'\n2021-03-31 17:24:10.288  INFO 10920 --- [           main] com.alibaba.nacos.client.naming          : initializer namespace from System Property :null\n2021-03-31 17:24:10.289  INFO 10920 --- [           main] com.alibaba.nacos.client.naming          : initializer namespace from System Environment :null\n2021-03-31 17:24:10.289  INFO 10920 --- [           main] com.alibaba.nacos.client.naming          : initializer namespace from System Property :null\n2021-03-31 17:24:11.166  WARN 10920 --- [           main] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userMapper' defined in file [D:\\work\\Idea\\workSpase\\myself\\zrp-dome\\zrp-dome-mybatis\\target\\classes\\com\\zrp\\dao\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Property 'sqlSessionFactory' or 'sqlSessionTemplate' are required\n2021-03-31 17:24:11.167  INFO 10920 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'\n2021-03-31 17:24:11.180  WARN 10920 --- [           main] c.n.c.sources.URLConfigurationSource     : No URLs will be polled as dynamic configuration sources.\n2021-03-31 17:24:11.180  INFO 10920 --- [           main] c.n.c.sources.URLConfigurationSource     : To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.\n2021-03-31 17:24:11.183  INFO 10920 --- [           main] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]\n2021-03-31 17:24:11.200  INFO 10920 --- [           main] ConditionEvaluationReportLoggingListener : \n\nError starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.\n2021-03-31 17:24:11.208 ERROR 10920 --- [           main] o.s.boot.SpringApplication               : Application run failed\n\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userMapper' defined in file [D:\\work\\Idea\\workSpase\\myself\\zrp-dome\\zrp-dome-mybatis\\target\\classes\\com\\zrp\\dao\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Property 'sqlSessionFactory' or 'sqlSessionTemplate' are required\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1796) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:860) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878) ~[spring-context-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) ~[spring-context-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) ~[spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.5.RELEASE.jar:2.2.5.RELEASE]\n\tat com.zrp.Launcher.main(Launcher.java:30) [classes/:na]\nCaused by: java.lang.IllegalArgumentException: Property 'sqlSessionFactory' or 'sqlSessionTemplate' are required\n\tat org.springframework.util.Assert.notNull(Assert.java:198) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.mybatis.spring.support.SqlSessionDaoSupport.checkDaoConfig(SqlSessionDaoSupport.java:122) ~[mybatis-spring-2.0.5.jar:2.0.5]\n\tat org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:73) ~[mybatis-spring-2.0.5.jar:2.0.5]\n\tat org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1855) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1792) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]\n\t... 16 common frames omitted\n\n\nProcess finished with exit code 1\n", "\n\n", "\n\n", "启动类中也写@MapperScan", "\n\n", "\n\n", "下面代码结构和jar", "\n\n", "\n\n", "zrp-dome-mybatis-dev.yaml ", "\n\n", "\n", "#---------固定配置------------------\n# xml扫描，多个目录用逗号或者分号分隔(告诉 Mapper 所对应的 XML 文件位置)\nmybatis-plus:\n  mapper-locations: classpath:mybatis/*.xml\n  type-aliases-package: com.zrp.po\n \n#----------全局配置-----------------\nspring:\n  cloud:\n    nacos:\n      discovery:\n       #nacos注册中心地址\n        server-addr: 127.0.0.1:8848\n        #开发环境（dev、pro等）     \n        namespace:\n        #组名\n        group: DEFAULT_GROUP\n\n\n#---------本工程专属配置-------------------       \n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    url: jdbc:mysql://127.0.0.1/pp-shop?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true\n    username: root\n    password: root\n    druid:\n      defaultAutoCommit: false\n      defaultReadOnly: false\n      initialSize: 2\n      maxActive: 5\n      minIdle: 2\n      timeBetweenEvictionRunsMillis: 18000\n      minEvictableIdleTimeMillis: 600000\n      maxEvictableIdleTimeMillis: 1200000\n      poolPreparedStatements: true\n      maxOpenPreparedStatements: 100\n      testOnBorrow: true\n      testOnReturn: true\n      testWhileIdle: true\n      validationQuery: select 1\n      removeAbandonedOnBorrow: true\n      removeAbandoned: true\n      removeAbandonedOnMaintenance: true\n      removeAbandonedTimeout: 300\n      maxWaitMillis: 3000\n      keepalive: true\n      phyMaxUseCount: 2000\n      filters: stat,log4j2,config\n", "\n\n", "bootstrap.yml", "\n\n", " ", "\n\n", "\n", "#端口\nserver:\n  port: 8080\nspring:\n  profiles:\n    active: dev                 #配置文件 --对应配置文件集合的 spring.profiles\n  application:\n    name: zrp-dome-mybatis      #服务名字\n  main:\n    allow-bean-definition-overriding: false  #解决bean重复定义，设为true，后面定义bean会覆盖相同名字之前定义的bean\n\n\n#nacos中配置文件格式 ${spring.application.name} - ${spring.profiles.active} . ${file-extension}\n#所以这个匹配的nacos是：zrp-dome-mybatis-dev.yaml\n---\nspring:\n  profiles: dev\n  cloud:\n    nacos:\n      config:\n        server-addr: 127.0.0.1:8848       #nacos注册中心地址\n        file-extension: yaml              #文件后缀\n        group:                            # 组名\n---\n#所以这个匹配的nacos是：zrp-dome-mybatis-test.yaml\nspring:\n  profiles: test\n  cloud:\n    nacos:\n      config:\n        server-addr: zhaoruipeng.work     #nacos注册中心地址\n        file-extension: yaml              #文件后缀\n        group: DEFAULT_GROUP              # 组名"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在使用TreeNode.Tag属性时&amp;#xff0c;需要注意的是&amp;#xff0c;这个属性是object类型&amp;#xff0c;因此需要进行类型转换才能获取到正确的值。&lt;/p&gt;\n&lt;p&gt;对于存储Dictionary&amp;lt;string, string&amp;gt;类型的数据&amp;#xff0c;可以按照以下方式进行设置和获取&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;设置节点的Tag属性&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c#\"&gt;Dictionary&amp;lt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;&amp;gt; &lt;span class=\"hljs-built_in\"&gt;data&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-literal\"&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;&amp;gt;();\n&lt;span class=\"hljs-comment\"&gt;// 设置字典的键值对&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;data&lt;/span&gt;.Add(&lt;span class=\"hljs-string\"&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;value1&amp;#34;&lt;/span&gt;);\n&lt;span class=\"hljs-built_in\"&gt;data&lt;/span&gt;.Add(&lt;span class=\"hljs-string\"&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;value2&amp;#34;&lt;/span&gt;);\n&lt;span class=\"hljs-comment\"&gt;// 创建节点并设置Tag属性&lt;/span&gt;\nTreeNode node &amp;#61; &lt;span class=\"hljs-literal\"&gt;new&lt;/span&gt; TreeNode(&lt;span class=\"hljs-string\"&gt;&amp;#34;节点名称&amp;#34;&lt;/span&gt;);\nnode.&lt;span class=\"hljs-built_in\"&gt;Tag&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;data&lt;/span&gt;;\n&lt;span class=\"hljs-comment\"&gt;// 添加节点到TreeView中&lt;/span&gt;\ntreeView1.Nodes.Add(node);\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;获取节点的Tag属性&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c#\"&gt;&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;treeView1_MouseUp&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;span class=\"hljs-built_in\"&gt;object&lt;/span&gt; sender, MouseEventArgs e&lt;/span&gt;)\n{\n    &lt;span class=\"hljs-comment\"&gt;// 获取选中的节点&lt;/span&gt;\n    &lt;span class=\"hljs-title class_\"&gt;TreeNode&lt;/span&gt; selectedNode &amp;#61; treeView1.&lt;span class=\"hljs-property\"&gt;SelectedNode&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (selectedNode &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;null&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;// 判断Tag属性是否为null&amp;#xff0c;并进行类型转换&lt;/span&gt;\n    &lt;span class=\"hljs-title class_\"&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;&amp;gt; data &amp;#61; selectedNode.&lt;span class=\"hljs-property\"&gt;Tag&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;&amp;gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (data &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;null&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;// 根据键名获取字典中的值&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; value1 &amp;#61; data[&lt;span class=\"hljs-string\"&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;];\n    &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; value2 &amp;#61; data[&lt;span class=\"hljs-string\"&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;];\n    &lt;span class=\"hljs-comment\"&gt;// 输出结果&lt;/span&gt;\n    &lt;span class=\"hljs-title class_\"&gt;MessageBox&lt;/span&gt;.&lt;span class=\"hljs-title class_\"&gt;Show&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;value1: &amp;#34;&lt;/span&gt; &amp;#43; value1 &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;, value2: &amp;#34;&lt;/span&gt; &amp;#43; value2);\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;需要注意的是&amp;#xff0c;在设置和获取Tag属性时&amp;#xff0c;需要确保所赋值的对象和获取的对象是同一个&amp;#xff0c;否则可能会导致空值或类型转换异常。&lt;/p&gt;", "Konwledge_Point": "集合覆盖", "Question": ["TreeView问题", ["在做C#winform的TreeView并使用XML存储TreeView的信息，将TreeNode.Tag赋为了Dictionary<string, string>,希望能够在TreeView中能存储一些数据，但是现在在使用treeView_MouseUp方法的时候Dictionary<string, string>的对象一直是null。请给解决下，谢谢了", "这个是treeView_MouseUp方法", "\n", " ", "private", " void tree", "View1_MouseUp(", "object", " ", "sender", ", MouseEventArgs ", "e", ")", "\n        {\n\n            ", "try", "\n            {\n                Point mpt = ", "new", " ", "Point(", "e", ".X, ", "e", ".Y)", ";\n                TreeNode TreeClickNode1 = this.treeView1.", "GetNodeAt(", "mpt", ")", ";\n\n                ", "//dict = (Dictionary<string, string>)TreeClickNode1.Tag;", "\n                ", "// string str= TreeClickNode1.Tag.ToString();", "\n                ", "// String str1=str;", "\n\n                ", "if", " (TreeClickNode1 != null)\n                {\n                    dict = (Dictionary<", "string", ", ", "string", ">)TreeClickNode1.Tag;\n                    ", "CreatMenu(", "dict", "[", "\"tag\"", "])", ";\n                    ", "//CreatMenu(TreeClickNode1.Tag.ToString());", "\n                    ", "if", " (e.Button", " == ", "MouseButtons.Right)\n                    {\n                        this.contextMenuStrip.", "Show(", "this", ".", "treeView1", ", ", "mpt", ")", ";       ", "//在mpt位置实现treeview1的点击菜单栏", "\n                        ", "//this.treeView1.ContextMenu.Show(treeView1,mpt);", "\n                    }\n                }\n                ", "else", "\n                {\n                    MessageBox.", "Show(", "\"点击了\"", ")", ";\n                    contextMenuStrip.Items.", "Clear()", ";\n                }\n            }\n            catch\n            { \n            \n            }\n        }\n", "\n", "下面是全部代码，AddUnit,AddUser,AddLowest 是添加节点的form类就没有写出", "\n", "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\nusing System.Xml;\nusing System.IO;\n\nusing System.Collections;\nusing TreeView;\nusing System.Net.Sockets;\n\nnamespace GlassProcess\n{\n    public partial class DbView : Form\n    {\n       static List<string> array1 = new List<string>();\n        string filepath;\n        string menufilepath;\n        string proname;\n        public string unit;\n        public string user;\n        public string lowest;\n        public string company;\n      \n        private bool tmpBool;\n        XmlOperator xmloper;\n        bool haveUnit = false;\n        bool haveUser = false;\n        bool havelowest = false;\n\n        Dictionary<string, string> dict = new Dictionary<string, string>();\n\n        public DbView( )\n        {\n            filepath = Application.StartupPath;               ", "//", "获取应用程序的启动路径\n            ", "//m", "enufilepath = filepath + ", "\"\\\\Menu.xml\"", ";           ", "//", "菜单文件路径\n            xmloper = new XmlOperator(filepath, ", "\"Menu.xml\"", ");      ", "//", "创建XML操作类\n           \n            InitializeComponent();        ", "//", "初始化组件\n           \n        }\n\n        private void DbView_Load(object sender, EventArgs e)\n        {\n            LoadFormXml();                  ", "//", "载入数据，生成列表\n            treeView1.CheckBoxes = false;   ", "//", "关闭复选框\n        }\n\n        ", "//", "载入数据 生成列表\n        private void LoadFormXml()\n        {\n            XmlNodeList xmlNodes = xmloper.GetXmlNodeList();      ", "//", "获取XML节点列表\n            this.treeView1.BeginUpdate();                         ", "//", "更新TreeView\n            this.treeView1.Nodes.Clear();                         ", "//", "清空TreeView节点\n            XmlNode2TreeNode(xmlNodes, this.treeView1.Nodes);     ", "//", "节点转换为TreeView节点\n            this.treeView1.EndUpdate();                           ", "//", "结束更新TreeView\n            ExpandRoot(this.treeView1.Nodes);                     ", "//", "展开TreeView节点\n         }\n\n        ", "//", "展开节点\n        private void ExpandRoot(TreeNodeCollection treeNodes)\n        {\n            foreach (TreeNode treeNode ", "in", " treeNodes)\n            {\n                ", "if", " (dict[", "\"tag\"", "].Equals(", "\"root\"", "))      ", "//", "如果是根节点\n                {\n                    treeNode.Expand();                           ", "//", "展开节点\n                }\n                ", "else", " ", "if", " (dict[", "\"tag\"", "].Equals(", "\"area\"", "))  ", "//", "如果是区域节点\n                {\n                    treeNode.Collapse();                          ", "//", "折叠节点\n                }\n                ", "if", " (treeNode.Nodes.Count > ", "0", ")                     ", "//", "如果有子节点\n                {\n                    ExpandRoot(treeNode.Nodes);                   ", "//", "递归展开子节点\n                }\n            }\n        }\n\n\n\n        private void XmlNode2TreeNode(XmlNodeList xmlNode, TreeNodeCollection treeNode)\n        {\n            foreach (XmlNode xmlnode ", "in", " xmlNode)\n            {\n                ", "if", " (xmlnode.NodeType != XmlNodeType.Element)    ", "//", "忽略非Element类型的节点\n                {\n                    ", "continue", ";\n                }\n                TreeNode treenode = new TreeNode();      ", "//", "新建一个TreeNode，并根据XML节点的Title属性设置文本\n                treenode.Text = xmlnode.Attributes[", "\"Title\"", "].Value;\n                ", "//", "dict.Add(", "\"tag\"", ",", "\"null\"", ");\n                ", "if", " (xmlnode.HasChildNodes)                       ", "//", "如果XML节点有子节点，则递归调用XmlNode2TreeNode方法转换子节点\n                {\n                    ", "if", " (xmlnode.ChildNodes[", "0", "].NodeType == XmlNodeType.CDATA)  ", "//", "如果第一个子节点是CDATA,则将其内容作为TreeNode的Tag\n                    {\n                        string str;\n                        str= xmlnode.ChildNodes[", "0", "].Value.ToString();\n                        dict[", "\"tag\"", "] = str;\n                        ", "if", " (dict[", "\"tag\"", "].Equals(", "\"root\"", "))\n                        {\n                            treenode.ImageIndex = ", "0", ";\n                            treenode.SelectedImageIndex = ", "0", ";\n                            treenode.Expand();\n                        }\n                        ", "else", " ", "if", " (dict[", "\"tag\"", "].Equals(", "\"area\"", "))\n                        {\n                            treenode.ImageIndex = ", "1", ";\n                            treenode.SelectedImageIndex = ", "1", ";\n                           \n                        }\n                        ", "else", " ", "if", " (dict[", "\"tag\"", "].Equals(", "\"user\"", "))\n                        {\n                            treenode.ImageIndex = ", "2", ";\n                            treenode.SelectedImageIndex = ", "2", ";\n                        }\n                        ", "else", "\n                        {\n                            treenode.ImageIndex = ", "2", ";\n                            treenode.SelectedImageIndex = ", "2", ";\n                        }\n\n                    }\n                    ", "//", "将新建的TreeNode添加到父TreeNode的Nodes 集合中\n                    XmlNode2TreeNode(xmlnode.ChildNodes, treenode.Nodes);\n                }\n                ", "//", "将新建的TreeNode添加到TreeView的节点集合中\n                treeNode.Add(treenode);\n            }\n        }\n\n        private void treeView1_MouseUp(object sender, MouseEventArgs e)\n        {\n\n            try\n            {\n                Point mpt = new Point(e.X, e.Y);\n                TreeNode TreeClickNode1 = this.treeView1.GetNodeAt(mpt);\n\n                ", "//", "dict = (Dictionary<string, string>)TreeClickNode1.Tag;\n                ", "//", " string str= TreeClickNode1.Tag.ToString();\n                ", "//", " String str1=str;\n\n                ", "if", " (TreeClickNode1 != null)\n                {\n                    dict = (Dictionary<string, string>)TreeClickNode1.Tag;\n                    CreatMenu(dict[", "\"tag\"", "]);\n                    ", "//", "CreatMenu(TreeClickNode1.Tag.ToString());\n                    ", "if", " (e.Button == MouseButtons.Right)\n                    {\n                        this.contextMenuStrip.Show(this.treeView1, mpt);       ", "//", "在mpt位置实现treeview1的点击菜单栏\n                        ", "//", "this.treeView1.ContextMenu.Show(treeView1,mpt);\n                    }\n                }\n                ", "else", "\n                {\n                    MessageBox.Show(", "\"点击了\"", ");\n                    contextMenuStrip.Items.Clear();\n                }\n            }\n            catch\n            { \n            \n            }\n        }\n\n        private void CreatMenu(string p)\n        {\n            switch (p)\n            {\n                case ", "\"root\"", ":\n                    {\n                        ", "//", "清空右键菜单\n                        this.contextMenuStrip.Items.Clear();\n                        ", "//", "创建“新增用户分区”菜单项，并添加到右键菜单\n                        ToolStripMenuItem AddArea = new ToolStripMenuItem();\n                        AddArea.Name = ", "\"新增用户分区\"", ";\n                        AddArea.Text = ", "\"新增用户分区\"", ";\n                        AddArea.Click += new System.EventHandler(AddArea_Click);\n                        contextMenuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {AddArea});\n\n                        /*\n                         上面这段代码用于在 ContextMenuStrip 控件中添加一个 ToolStripMenuItem 控件，其中 AddArea 是 ToolStripMenuItem 控件的实例。具体解释如下：\n                           - contextMenuStrip：ContextMenuStrip 控件的实例，用于显示右键菜单。\n                           - Items：ContextMenuStrip 类的属性，表示右键菜单中包含的所有 ToolStripItem 对象的集合。\n                           - AddRange：ToolStripItemCollection 类的方法，用于向 ToolStripItem 对象的集合中添加 ToolStripItem 数组的元素。\n                            - new System.Windows.Forms.ToolStripItem[]：表示创建一个 ToolStripItem 数组的实例。\n                            - {AddArea}：表示添加 ToolStripMenuItem 实例 AddArea 到 ToolStripItem 数组中。\n                             因此，这段代码的作用是将一个名为 AddArea 的 ToolStripMenuItem 添加到 ContextMenuStrip 控件中显示在右键菜单中。\n                         */\n\n                    }\n                    ", "break", ";\n\n                case ", "\"area\"", ":\n                {\n                     ", "//", "清空右键菜单\n                    this.contextMenuStrip.Items.Clear();\n                    ", "//", "创建“添加用户”菜单项，并添加到右键菜单\n                    ToolStripMenuItem AddUser = new ToolStripMenuItem();\n                    AddUser.Name = ", "\"添加用户\"", ";\n                    AddUser.Text = ", "\"添加用户\"", ";\n                    AddUser.Image = this.treeImgs.Images[", "3", "];\n                    AddUser.DisplayStyle = ToolStripItemDisplayStyle.ImageAndText;\n                    AddUser.Click += new System.EventHandler(AddUser_Click);\n                    ", "//", "创建“删除组”菜单项，并添加到右键菜单\n                    ToolStripMenuItem DeleteArea = new ToolStripMenuItem();\n                    DeleteArea.Name = ", "\"删除组\"", ";\n                    DeleteArea.Text = ", "\"删除组\"", ";\n                    DeleteArea.Click += new System.EventHandler(DeleteArea_Click);\n                    contextMenuStrip.Items.AddRange(\n                         new System.Windows.Forms.ToolStripItem[] { \n                           AddUser,DeleteArea       \n                        }\n                    );\n                }\n                ", "break", ";\n                case ", "\"user\"", ":\n                {\n                    ", "//", "清空右键菜单\n                    this.contextMenuStrip.Items.Clear();\n                    ", "//", "创建“删除用户菜单项”，并添加到右键菜单\n                    ToolStripMenuItem DeleteUser = new ToolStripMenuItem();\n\n                    DeleteUser.Name = ", "\"删除用户\"", ";\n                    DeleteUser.Text = ", "\"删除用户\"", ";\n                    DeleteUser.Click += new System.EventHandler(DeleteUser_Click);\n\n                    ToolStripMenuItem Property = new ToolStripMenuItem();\n\n                        Property.Name = ", "\"添加元件\"", ";\n                        Property.Text = ", "\"添加元件\"", ";\n                        Property.Click += new System.EventHandler(AddLowest_Click);\n\n                        contextMenuStrip.Items.AddRange(\n                         new System.Windows.Forms.ToolStripItem[] {DeleteUser,Property});\n                    }\n                ", "break", ";\n                case ", "\"lowest\"", ":\n                    {\n                        ", "//", "清空右键菜单\n                        this.contextMenuStrip.Items.Clear();\n                        ", "//", "创建“删除用户菜单项”，并添加到右键菜单\n                        ToolStripMenuItem DeleteUser = new ToolStripMenuItem();\n\n                        DeleteUser.Name = ", "\"删除元件\"", ";\n                        DeleteUser.Text = ", "\"删除元件\"", ";\n                        DeleteUser.Click += new System.EventHandler(DeleteLowest_Click);\n\n                       \n\n                        contextMenuStrip.Items.AddRange(\n                         new System.Windows.Forms.ToolStripItem[] { DeleteUser });\n                    }\n                    ", "break", ";\n\n            }\n        }\n        ", "//", "private void ContractListBakRootItem_Click(object sender, EventArgs e)\n        ", "//", "{\n            \n        ", "//", "    ", "//", "this.treeView1.ExpandAll();\n        ", "//", "}\n\n        private void ContractListBakGroupItem_Click(object sender, EventArgs e)\n        {\n            List<string> array = new List<string>();\n            foreach (TreeNode node ", "in", " this.treeView1.SelectedNode.Nodes)\n            {\n                array.Add((node.Text.Split(", "'/'", "))[", "0", "]);\n            }\n\n         \n            ", "//", "this.treeView1.ExpandAll();\n        }\n\n        ", "//", "private void ImportDataUser_Click(object sender, EventArgs e)\n        ", "//", "{\n          \n        ", "//", "    ", "//", "this.treeView1.ExpandAll();\n        ", "//", "}\n        private void SearchTreeNode(TreeNodeCollection treeNodes,string fileName)\n        {\n            ", "//", "在指定的节点集合treeNodes中搜索名为fileName的节点并删除\n            foreach (TreeNode treeNode ", "in", " treeNodes)\n            {\n                dict = (Dictionary<string, string>)treeNode.Tag;\n                ", "if", " (dict[", "\"tag\"", "] == ", "\"user\"", ")\n                {\n                    ", "if", " (treeNode.Text.Equals(fileName))\n                    {\n                        this.treeView1.Nodes.Remove(treeNode);\n                    }\n                    ", "continue", ";\n                }\n\n                ", "if", " (treeNode.Nodes.Count > ", "0", ")\n                {\n                    SearchTreeNode(treeNode.Nodes, fileName);\n                }\n            }\n        }\n        \n\n\n        private TreeNode CreateChildNodeByImport(string file)\n        {\n            ", "//", "根据导入的文件名创建一个新的树节点并返回\n\n            TreeNode node = new TreeNode(file);\n            dict = (Dictionary<string, string>)node.Tag;\n            dict[", "\"tag\"", "]= ", "\"user\"", ";\n            return node;\n        }\n\n          \n\n        ", "//", "递归查找并删除TreeView控件中指定用户的节点\n        private void RemoveUser(TreeNodeCollection treeNodes)\n        {\n            foreach (TreeNode treeNode ", "in", " treeNodes)\n            {\n                dict = (Dictionary<string, string>)treeNode.Tag;\n                ", "if", " (dict[", "\"tag\"", "].Equals(", "\"user\"", "))\n                {\n                    ", "if", " (treeNode.Text.Equals(user))\n                    {\n                        treeNode.Remove();\n                    }\n                }\n                ", "else", " ", "if", " (dict[", "\"tag\"", "].Equals(", "\"lowest\"", "))\n                {\n                    ", "if", " (treeNode.Text.Equals(lowest))\n                    {\n                        treeNode.Remove();\n                    }\n                }\n\n\n                ", "if", " (treeNode.Nodes.Count > ", "0", ")      ", "//", "treeNode.Nodes.Count表示该节点下子节点个数\n                {                                           \n                    RemoveUser(treeNode.Nodes);\n                }\n            }\n        }\n        private void AddArea_Click2(object sender, EventArgs e)     ", "//", "添加区域\n        {\n            AddUnit form = new AddUnit(this);\n            form.ShowDialog();\n            ", "if", " (!string.IsNullOrEmpty(unit))\n            {\n                TreeNode node = CreateRootNode();\n\n                ", "//", "this.treeView1.Nodes.\n                ", "//", "TreeNode root = this.treeView1.Nodes[", "0", "];\n                this.treeView1.Nodes[", "0", "].Nodes.Add(node);\n                SaveToXml();\n                LoadFormXml();\n            }\n            ", "//", "this.treeView1.ExpandAll();\n        }\n\n        private void AddArea_Click(object sender, EventArgs e)\n        {\n            ", "//", "创建AddUser窗体的实例\n            AddUnit form = new AddUnit(this);\n            ", "//", "显示窗体，等待用户输入\n            ", "//", "  ", "if", " (form.ShowDialog()== DialogResult.OK)\n            form.ShowDialog();\n                ", "if", " (!string.IsNullOrEmpty(unit))\n                {\n                    ", "//", "检查Tree View控件中是否已经存在指定用户的节点\n                    Check(this.treeView1.Nodes);\n                    ", "if", " (haveUnit)\n                    {\n                    ", "//", "如果用户已经存在，弹出确认对话框\n                    MessageBox.Show(", "\"该组[\"", " + unit + ", "\"]已经存在\"", ");\n                     \n                    }\n                    ", "else", "\n                    {   ", "//", "如果用户不存在，创建新的节点\n                        TreeNode node = CreateRootNode();\n                        ", "//", "TreeNode selectNode = this.treeView1.SelectedNode;\n                        ", "//", "selectNode.Nodes.Add(node);    ", "//", "adduser\n                        this.treeView1.Nodes[", "0", "].Nodes.Add(node);\n                        SaveToXml();     ", "//", "重新从XML文件中加载数据并更新Tree View控件\n                        LoadFormXml();\n\n                    }\n\n                }\n          ", "//", "  }\n            haveUnit = false;    ", "//", "重置haveUnit\n        }\n\n        ", "//", "添加元件\n        private void AddLowest_Click(object sender, EventArgs e)\n        {\n            ", "//", "创建AddUser窗体的实例\n            AddLowest form = new AddLowest(this);\n            ", "//", "显示窗体，等待用户输入\n            ", "if", " (form.ShowDialog() == DialogResult.OK)\n            {\n                ", "if", " (!string.IsNullOrEmpty(lowest))\n                {\n                    ", "//", "检查Tree View控件中是否已经存在指定用户的节点\n                    Check(this.treeView1.Nodes);\n                    ", "if", " (havelowest)\n                    {\n                        ", "//", "如果用户已经存在，弹出确认对话框\n                        ", "if", " (MessageBox.Show(", "\"该元件[\"", " + lowest + ", "\"]已经存在，是否覆盖?\"", ", ", "\"确认\"", ", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)\n                        {\n                            ", "//", "删除原来的节点并创建新的节点\n                            RemoveUser(this.treeView1.Nodes);\n                            TreeNode node = CreateLowestNode();\n                            TreeNode selectNode = this.treeView1.SelectedNode;\n                            selectNode.Nodes.Add(node);\n                            SaveToXml();          ", "//", "将更改保存到XML文件中\n                            LoadFormXml();        ", "//", "重新从XML文件中加载数据并更新TreeView控件\n                        }\n                        ", "else", "\n                        {\n                            ", "//", "SetNodeBackColor(this.treeView1.Nodes);\n                            return;\n                        }\n                    }\n                    ", "else", "\n                    {   ", "//", "如果用户不存在，创建新的节点\n                        TreeNode node = CreateLowestNode();\n                        TreeNode selectNode = this.treeView1.SelectedNode;\n                        selectNode.Nodes.Add(node);    ", "//", "adduser\n                        SaveToXml();     ", "//", "重新从XML文件中加载数据并更新Tree View控件\n                        LoadFormXml();\n\n                    }\n                   \n                }\n            }\n            haveUser = false;    ", "//", "重置haveUser\n        }\n\n        private void AddUser_Click(object sender, EventArgs e)\n        {\n            ", "//", "创建AddUser窗体的实例\n            AddUser form = new AddUser(this);\n            ", "//", "显示窗体，等待用户输入\n            ", "if", " (form.ShowDialog() == DialogResult.OK)\n            {\n                ", "if", " (!string.IsNullOrEmpty(user))\n                {\n                    ", "//", "检查Tree View控件中是否已经存在指定用户的节点\n                    Check(this.treeView1.Nodes);\n                    ", "if", " (haveUser)\n                    {\n                        ", "//", "如果用户已经存在，弹出确认对话框\n                        MessageBox.Show(", "\"该用户[\"", " + user + ", "\"]已经存在\"", ");\n                       \n                    }\n                    ", "else", "\n                    {   ", "//", "如果用户不存在，创建新的节点\n                        TreeNode node = CreateChildNode();\n                        TreeNode selectNode = this.treeView1.SelectedNode;\n                        selectNode.Nodes.Add(node);\n                        SaveToXml();     ", "//", "重新从XML文件中加载数据并更新Tree View控件\n                        LoadFormXml();\n\n                    }\n\n                }\n            }\n            haveUser = false;    ", "//", "重置haveUser\n        }\n\n        private void Check(TreeNodeCollection treeNodes)   ", "//", "检查Tree View控件中是否已经存在指定用户的节点\n        {\n            tmpBool = false;\n            \n            foreach (TreeNode treeNode ", "in", " treeNodes)\n            {\n                dict = (Dictionary<string,string>)treeNode.Tag;\n                ", "if", " (dict[", "\"tag\"", "].Equals(", "\"area\"", "))\n                {\n                    ", "if", " (treeNode.Text.Equals(unit))\n                    {\n                        treeNode.BackColor = Color.Red;    ", "//", "将节点的背景颜色设为红色\n                        ", "//", "treeNode\n                        ", "//", "treeNode.Parent.Expand();          ", "//", "展开父节点\n                        haveUnit = true;                   ", "//", "设置haveUnit为true，表示找到了该用户\n                    }\n                }\n                ", "else", " ", "if", " (dict[", "\"tag\"", "].Equals(", "\"user\"", "))\n                {\n                    ", "if", " (treeNode.Text.Equals(user))\n                    {\n                        treeNode.BackColor = Color.Red;    ", "//", "将节点的背景颜色设为红色\n                        ", "//", "treeNode\n                        treeNode.Parent.Expand();          ", "//", "展开父节点\n                        haveUser = true;                   ", "//", "设置haveUser为true，表示找到了该用户\n                    }\n                }\n                ", "else", " ", "if", " (dict[", "\"tag\"", "].Equals(", "\"lowest\"", "))\n                {\n                    ", "if", " (treeNode.Text.Equals(lowest))\n                    {\n                        treeNode.BackColor = Color.Red;    ", "//", "将节点的背景颜色设为红色\n                        ", "//", "treeNode\n                        treeNode.Parent.Expand();          ", "//", "展开父节点\n                        havelowest = true;                   ", "//", "设置haveUser为true，表示找到了该用户\n                    }\n                }\n                ", "if", " (treeNode.Nodes.Count > ", "0", ")\n                {\n                    Check(treeNode.Nodes);             ", "//", "递归调用CheckUser,查找子节点中是否存在该用户\n                }\n            }\n        }\n\n        private void DeleteLowest_Click(object sender, EventArgs e)\n        {\n            Dictionary<string, string> dict = new Dictionary<string, string>();\n            ", "if", " (MessageBox.Show(", "\"你确定要删除吗?\"", ", ", "\"删除确认\"", ", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)\n            {\n                ", "if", " (this.treeView1.SelectedNode == null)\n                {\n                    return;\n                }\n                dict = (Dictionary<string, string>)this.treeView1.SelectedNode.Tag;\n                ", "if", " (dict[", "\"tag\"", "] == ", "\"lowest\"", ")\n                {\n                        this.treeView1.Nodes.Remove(this.treeView1.SelectedNode);", "//", "移除选中节点\n                        SaveToXml();                                             ", "//", "保存到XML文件\n                        LoadFormXml();                                           ", "//", "从XML文件加载节点\n                }\n            }\n        }\n        private void DeleteUser_Click(object sender, EventArgs e)\n        {\n            Dictionary<string, string> dict = new Dictionary<string, string>();\n            ", "if", " (MessageBox.Show(", "\"你确定要删除吗?\"", ", ", "\"删除确认\"", ", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)\n            {\n                ", "if", " (this.treeView1.SelectedNode == null)\n                {\n                    return;\n                }\n                dict = (Dictionary<string, string>)this.treeView1.SelectedNode.Tag;\n                ", "if", " (dict[", "\"tag\"", "] == ", "\"user\"", ")\n                {\n                    List<string> array = new List<string>();\n                    foreach (TreeNode node ", "in", " this.treeView1.SelectedNode.Nodes)\n                    {\n                        array.Add(node.Text);                    \n                    }\n\n                    ", "if", " (array.Count != ", "0", ")\n                    {\n                        MessageBox.Show(", "\"不能删除非空用户的结点！\"", ", ", "\"确定\"", ", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                    }\n                    ", "else", "\n                    {\n                        this.treeView1.Nodes.Remove(this.treeView1.SelectedNode);", "//", "移除选中节点\n                        SaveToXml();                                             ", "//", "保存到XML文件\n                        LoadFormXml();                                           ", "//", "从XML文件加载节点\n                                                                                \n                     }\n\n                }\n            }\n        }\n        private void DeleteArea_Click(object sender, EventArgs e)\n        {\n            Dictionary<string, string> dict = new Dictionary<string, string>();\n            ", "if", " (MessageBox.Show(", "\"你确定要删除吗?\"", ", ", "\"删除确认\"", ", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)\n            {\n                ", "if", " (this.treeView1.SelectedNode == null)\n                {\n                    return;\n                }\n                dict = (Dictionary<string, string>)this.treeView1.SelectedNode.Tag;\n                ", "if", "(dict[", "\"tag\"", "] == ", "\"area\"", ")\n                {\n                    List<string> array = new List<string>();\n                    foreach (TreeNode node ", "in", " this.treeView1.SelectedNode.Nodes)\n                    {\n                        ", "//", "array.Add((node.Text.Split(", "'/'", "))[", "0", "]);   ", "//", "将子节点的文本按照‘/’分割成字符串数组，并取第一个元素，即用户名\n                        array.Add(node.Text);                     ", "//", "当前并没有字符串含", "'/'", "\n                    }\n                    \n                    ", "if", " (array.Count != ", "0", ")\n                    {\n                        MessageBox.Show(", "\"不能删除非空用户的组结点！\"", ", ", "\"确定\"", ", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                    }\n                    ", "else", "\n                    {\n                        this.treeView1.Nodes.Remove(this.treeView1.SelectedNode);", "//", "移除选中节点\n                        SaveToXml();                                             ", "//", "保存到XML文件\n                        LoadFormXml();                                           ", "//", "从XML文件加载节点\n                        ", "//", "binary.DeleteAccountDirectory(array[", "0", "]);\n                     \n                    }\n                   \n                }\n            }\n        }\n\n        ", "//", " 点击列表项\n        ", "//", "private void ListItem_Click(object sender, EventArgs e)\n        ", "//", "{\n        ", "//", " TODO: 实现点击列表项后的操作\n        ", "//", "}\n        ", "//", " 添加选项卡页\n        ", "//", "private void AddTabPage(string pageTitle, Control ctrForm)\n        ", "//", "{\n        ", "//", " TODO: 实现添加选项卡页的操作\n        ", "//", "}\n        ", "//", " 双击树形视图\n        private void treeView1_DoubleClick(object sender, EventArgs e)\n        {\n            ", "//", "  MessageBox.Show(", "\"双击了\"", ");    ", "//", " TODO: 实现双击树形视图后的操作\n        }\n\n        ", "//", " 添加单元工具按钮的点击事件\n        private void toolbtn_AddUnit_Click(object sender, EventArgs e)\n        {\n            ", "//", " 打开添加单元的窗口\n            AddUnit form = new AddUnit(this);\n            form.ShowDialog();\n            ", "if", " (!string.IsNullOrEmpty(unit))\n            {\n                ", "//", " 创建根节点\n                TreeNode node = CreateRootNode();\n\n                ", "//", " 添加节点到树形视图中\n                this.treeView1.Nodes[", "0", "].Nodes.Add(node);\n                \n                SaveToXml();    ", "//", " 将树形视图保存到XML文件中\n                LoadFormXml();       ", "//", " 从XML文件中加载树形视图\n            }\n            ", "//", "this.treeView1.ExpandAll();\n            \n        }\n\n        ", "//", " 创建根节点\n        private TreeNode CreateRootNode()\n        {\n            Dictionary<String, String> dict = new Dictionary<String, String>();\n            dict.Add(", "\"tag\"", ", ", "\"area\"", ");\n            TreeNode node = new TreeNode(this.unit);\n            node.Tag = dict;\n            node.ImageIndex = ", "1", ";\n            node.SelectedImageIndex = ", "1", ";\n            return node;\n        }\n\n        ", "//", " 创建子节点\n        private TreeNode CreateChildNode()\n        {\n            Dictionary<String, String> dict = new Dictionary<String, String>();\n            dict.Add(", "\"tag\"", ", ", "\"user\"", ");\n            TreeNode node = new TreeNode(this.user);\n            node.Tag = dict;\n            node.ImageIndex = ", "2", ";\n            node.SelectedImageIndex = ", "2", ";\n            return node;\n        }\n\n        private TreeNode CreateLowestNode()\n        {\n            Dictionary<String, String> dict = new Dictionary<String, String>();\n            dict.Add(", "\"tag\"", ", ", "\"lowest\"", ");\n            TreeNode node = new TreeNode(this.lowest);\n            node.Tag = dict;\n          \n            return node;\n        }\n\n        ", "//", "private TreeNode Create1Node()\n        ", "//", "{\n        ", "//", "    Dictionary<String,String> dict =new Dictionary<String,String>();\n        ", "//", "    dict.Add(", "\"tag\"", ",", "\"lowest\"", ");\n        ", "//", "    TreeNode node = new TreeNode(this.lowest);\n        ", "//", "    node.Tag = dict[", "\"tag\"", "];\n        ", "//", "    ", "//", "node.ImageIndex = ", "2", ";\n        ", "//", "    ", "//", "node.SelectedImageIndex = ", "2", ";\n        ", "//", "    return node;\n        ", "//", "}\n\n        ", "//", " 将树形视图保存到XML文件中\n        public void SaveToXml()\n        {\n            ", "//", " 创建XML文档对象\n            XmlDocument doc = new XmlDocument();\n            ", "//", " 创建根节点\n            doc.LoadXml(", "\"<Menu></Menu>\"", ");\n            XmlNode root = doc.DocumentElement;\n            ", "//", " 添加XML声明\n            doc.InsertBefore(doc.CreateXmlDeclaration(", "\"1.0\"", ", ", "\"utf-8\"", ", ", "\"yes\"", "), root);\n            ", "//", " 将树形视图转换为XML节点，并添加到XML文档中\n            TreeNode2Xml(this.treeView1.Nodes, root);\n            ", "//", " 将XML文档保存到文件中\n            xmloper.SaveXml(doc);\n        }\n\n        ", "//", " 将TreeNodeCollection转换为XML节点\n        private void TreeNode2Xml(TreeNodeCollection treeNodes, XmlNode xmlNode)\n        {\n            XmlDocument doc = xmlNode.OwnerDocument;\n            foreach (TreeNode treeNode ", "in", " treeNodes)\n            {\n                dict = (Dictionary<string, string>)treeNode.Tag;\n                ", "//", " 创建XML节点\n                XmlNode element = doc.CreateNode(", "\"element\"", ", ", "\"Item\"", ", ", "\"\"", ");  ", "//", "创建名为item的xml对象\n                XmlAttribute attr = doc.CreateAttribute(", "\"Title\"", ");         \n                attr.Value = treeNode.Text;                               ", "//", "属性值为treeNode.Text   \n                element.Attributes.Append(attr);                          ", "//", "添加名为Title的属性   \n                element.AppendChild(doc.CreateCDataSection(dict[", "\"tag\"", "])); ", "//", "将treeNode转换为CDataSection并将其作为子节点添加到element中\n                xmlNode.AppendChild(element);                             ", "//", "将element添加到xmlNode子节点中\n                ", "//", " 如果该节点有子节点，则递归调用该方法\n                ", "if", " (treeNode.Nodes.Count > ", "0", ")\n                {\n                    TreeNode2Xml(treeNode.Nodes, element);\n                }\n            }\n        }\n\n        ", "//", " 当用户选中某个节点时发生的事件处理程序\n        private void treeView1_AfterSelect(object sender, TreeViewEventArgs e)\n        {\n            string path = null;\n            TreeNode node = this.treeView1.SelectedNode;\n            ", "//", "node.ForeColor = Color.Red;\n            ", "if", " (node != null)\n            {\n                path = node.Text;\n                ", "while", " (node.Parent != null)\n                {\n                    node = node.Parent;\n                    path = node.Text + ", "\"\\\\\"", " + path;\n                }\n            }\n            \n        }\n\n        ", "//", " 当用户单击树形视图时发生的事件处理程序\n        private void treeView1_Click(object sender, EventArgs e)\n        {\n            ", "//", " 获取鼠标单击的位置上的节点\n            object tmpObj = this.treeView1.GetNodeAt(this.treeView1.PointToClient(Cursor.Position));\n            ", "if", " (tmpObj != null)\n            {\n                ", "if", " ((tmpObj as TreeNode).Bounds.Contains(this.treeView1.PointToClient(Cursor.Position)))\n                {\n                    tmpBool = true;\n                }\n            }\n        }\n\n        ", "//", " 当用户展开某个节点之前发生的事件处理程序\n        private void treeView1_BeforeExpand(object sender, TreeViewCancelEventArgs e)\n        {\n            ", "if", " (tmpBool)\n            {\n                e.Cancel = tmpBool;\n            }\n            tmpBool = false; \n        }\n\n        ", "//", " 当用户折叠某个节点之前发生的事件处理程序\n        private void treeView1_BeforeCollapse(object sender, TreeViewCancelEventArgs e)\n        {\n            ", "if", " (tmpBool)\n            {\n                e.Cancel = tmpBool;\n            }\n            tmpBool = false;\n\n        }\n\n        ", "//", " 当用户在树形视图上单击鼠标按钮时发生的事件处理程序\n        private void treeView1_MouseClick(object sender, MouseEventArgs e){}\n\n        ", "//", " 当用户在树形视图上移动鼠标时发生的事件处理程序\n        private void treeView1_MouseMove(object sender, MouseEventArgs e)\n        {\n           \n        }\n\n        ", "//", " 当鼠标离开树形视图时发生的事件处理程序\n        private void treeView1_MouseLeave(object sender, EventArgs e)\n        {\n           \n\n        }\n\n        private void toolbtnSearch_Click(object sender, EventArgs e)\n        {\n            string searchName = this.toolText.Text;\n            SetNodeBackColor(this.treeView1.Nodes);\n            ", "if", " (!string.IsNullOrEmpty(searchName))\n            {\n                SearchXml(this.treeView1.Nodes, searchName); ", "//", " 根据搜索内容在TreeView中查找匹配节点\n            }\n        }\n        private void SetNodeBackColor(TreeNodeCollection treeNodes)\n        {\n            foreach (TreeNode treeNode ", "in", " treeNodes)\n            {\n                dict = (Dictionary<string, string>)treeNode.Tag;\n                treeNode.BackColor = Color.White;  ", "//", " 设置节点背景颜色为白色\n                ", "if", " (dict[", "\"tag\"", "].Equals(", "\"area\"", "))   ", "//", " 如果节点的Tag属性值为", "\"area\"", "，则将该节点折叠\n                {\n                    treeNode.Collapse();\n                }\n                ", "if", " (treeNode.Nodes.Count > ", "0", ")\n                {\n                    SetNodeBackColor(treeNode.Nodes);   ", "//", " 递归调用SetNodeBackColor方法，对当前节点的所有子节点执行相同的操作\n                }\n            }\n        }\n\n        private void SearchXml(TreeNodeCollection treeNodes,string search)\n        {\n            foreach (TreeNode treeNode ", "in", " treeNodes)\n            {\n                ", "if", " (treeNode.Text.ToString().Contains(search))     ", "//", " 如果当前节点的文本内容包含搜索内容，则将该节点的背景颜色设置为Coral色\n                {\n                    treeNode.BackColor = Color.Coral;\n                    ", "if", "(treeNode.Parent!=null)                  ", "//", " 如果该节点有父节点，则展开其父节点\n                    {\n                        treeNode.Parent.Expand();\n                    }\n                }\n                ", "if", " (treeNode.Nodes.Count > ", "0", ")\n                {\n                    SearchXml(treeNode.Nodes,search);          ", "//", " 递归调用SearchXml方法，对当前节点的所有子节点执行相同的操作\n                }\n            }\n        }\n\n        private void toolText_TextChanged(object sender, EventArgs e)\n        {\n            toolbtnSearch_Click(sender, e);      ", "//", " 当搜索框文本内容发生变化时，执行toolbtnSearch_Click方法\n        }\n\n        ", "//", "节点的选中取消事件\n        private void treeView1_AfterCheck(object sender, TreeViewEventArgs e)\n        {\n            ", "if", " (e.Node.Checked)    ", "//", " 如果当前节点被选中，则将其所有子节点的选中状态设置为true\n            {\n               setChildNodeCheckedState(e.Node, true);\n            }\n            ", "else", "                   ", "//", " 如果当前节点未选中，则将其所有子节点的选中状态设置为false\n            {\n                setChildNodeCheckedState(e.Node,  false);\n            }\n        }\n\n\n        ", "//", "选中节点之后，选中节点的所有子节点\n        private void setChildNodeCheckedState(TreeNode currNode, bool state)\n        {\n            TreeNodeCollection nodes = currNode.Nodes;\n            ", "if", " (nodes.Count > ", "0", ")\n                foreach (TreeNode tn ", "in", " nodes)\n                {\n\n                    tn.Checked = state;      ", "//", " 将当前子节点的选中状态设置为指定的状态\n                    setChildNodeCheckedState(tn, state); ", "//", " 递归调用setChildNodeCheckedState方法，对当前子节点的所有子节点执行相同的操作\n                }\n        }\n    }\n}\n\n"]], "Tag": "算法设计"}
