{"Answer": "1 3\r\n1 4\r\n首先1和1比，得到1 1\r\n然后3和1(这里的1是指第二个1)比，得到1 1 3\r\n最后3和4比，得到1 1 3 4\r\n后一个类似\r\n\r\n再举一个例子\r\n1 3 6和2 7 8归并\r\n首先1 2比得到1 2（此时可以得知第二个数组没有比2小的数字，但是第一个数组不一定，所以下面用第一个数组的3和2比）\r\n然后3 2比，得到1 2 3（此时可以得知第一个数组没有比3小的，但是第二个数组不一定，所以下面用3 7比）\r\n然后3 7比，得到1 2 3 7\r\n然后6 7比，得到1 2 3 6 7（此时第一个数组比完了，不会再有比6大的，输出第二个数组剩下的）\r\n结束，得到1 2 3 6 7 8", "Konwledge_Point": "归并排序", "Question": ["归并排序比较次数问题", ["第二趟排序，为什么前半部分比较次数和后半部门比较次数都是3，是那些数在比较，求大神。百度了很久都没找到"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你可以参考如下链接&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://www.cnblogs.com/942267027wzmblog/p/6882267.html\" id=\"textarea_1631786425244_1631786474087_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;C语言归并排序&amp;#xff08;合并排序&amp;#xff09;算法及代码 - Alex_ShineSky - 博客园&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;归并排序也称合并排序&amp;#xff0c;其算法思想是将待排序序列分为两部分&amp;#xff0c;依次对分得的两个部分再次使用归并排序&amp;#xff0c;之后再对其进行合并。仅从算法思想上了解归并排序会觉得很抽象&amp;#xff0c;接下来就以对序列A[0], A[l]…, A&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://common.cnblogs.com/favicon.svg\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.cnblogs.com/942267027wzmblog/p/6882267.html&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;br /&gt;如果对你有帮助&amp;#xff0c;可以给我个采纳吗&amp;#xff0c;谢谢!! 点击我这个回答右上方的&lt;strong&gt;【采纳】&lt;/strong&gt;按钮&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["使用C++归并排序的方法", ["使用C++", "通过奥运举重比赛运动员出场顺序的案例分析，掌握分而治之归并排序算法的应用 。", "输入：", "8个运动员参加比赛，每个运动员试举重量分次输入，如下：", "姓名    A    B    C    D    E    F    G    H", "试举1    98    95    95    93    92    90    100    96", "试举2    99    101    103    94    107    91    102    97", "试举3    100    102    104    105    108    109    104    101", "输出：形式如下", "出场顺序号    姓名    试举次数    试举重量", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24            "]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/yinheyi/p/10840465.html", "Konwledge_Point": "归并排序", "Question": ["关于C++算法中归并排序的问题", ["求助大神，我写的这个归并排序的代码有什么问题，为什么程序运行后什么也不输出呢？", "\n\n", "#include<iostream>\nusing namespace std;\nvoid erfen(int A[],int low,int high);\nvoid paixu(int A[],int low,int mid,int high);\n\nint main()\n{\n    int num[2] = {3,4};\n    erfen(num, 0,1);\n    for (int i = 0; i < 2; i++)\n        cout << num[i] << endl;\n\n    return 0;\n}\nvoid paixu(int A[], int low, int mid, int high)\n{\n    int* B = new int[high - low + 1];\n    int i = low;\n    int j = mid + 1;\n    int k = 0;\n    while (i <= mid && j <= high)\n    {\n        if (A[i] <= A[j])B[k++] = A[i++];\n        else B[k++] = A[j++];\n    }\n    while (i <= mid)B[k++] = A[i++];\n    while (j <= high) B[k++] = A[j++];\n    //填充原数组\n    for (int x = low, k = 0; x <= high; i++)\n        A[i] = B[k++];\n    delete [] B;\n}\nvoid erfen(int A[], int low, int high)\n{\n\n    if (low < high)\n    {\n        int mid = (low + high) / 2;\n        erfen(A,low,mid);\n        erfen(A, mid + 1,high);\n        paixu(A, low, mid, high);\n    }\n}\n\n", "\n\n", "程序运行后，先是卡住几秒，然后输出“请按任意键继续...”"]], "Tag": "算法设计"}
{"Answer": "找到两处问题\r\n1.t应该从l开始\r\n2.l中间已经修改了\r\n修改后代码如下\r\n\r\n\r\n```\r\n #include&lt;stdio.h&gt;\r\n#include &lt;iostream&gt;\r\nusing namespace std;\r\nint a[100]; \r\nvoid merge(int m[],int l,int r,int rightend);\r\nvoid sort(int m[],int l,int r);\r\nvoid msort();\r\nint n;\r\nint main()\r\n{\r\n  cin&gt;&gt;n;\r\n  for(int i=0;i &lt;n;++i)\r\n  {\r\n    cin&gt;&gt;a[i];\r\n  }\r\n  msort();\r\n  for(int i=0;i&lt;n;i++)\r\n  {\r\n    cout&lt;&lt;a[i]&lt;&lt;\" \";\r\n  }\r\n}\r\nvoid sort(int m[],int l, int r)\r\n{\r\n  int center;\r\n  if(l&lt;r)\r\n  {\r\n    center=(l+r)/2;\r\n    sort(m,l,center);\r\n    sort(m,center+1,r);\r\n    merge(m,l,center+1,r);\r\n  }\r\n}\r\nvoid merge(int m[],int l,int r,int rightend)\r\n{\r\n  //这里的t应该从该l开始而不是从0 开始\r\n  int t=l;\r\n  //这里要将l保存下来\r\n  int start = l;\r\n  int leftend=r-1;\r\n  while(l&lt;=leftend &amp;&amp; r&lt;=rightend)\r\n  {\r\n    if(a[l]&lt;=a[r])\r\n    {\r\n      m[t++]=a[l++];\r\n    }\r\n    else\r\n    {\r\n      m[t++]=a[r++];\r\n    }\r\n  }\r\n  while(l&lt;=leftend) m[t++]=a[l++];\r\n  while(r&lt;=rightend) m[t++]=a[r++];\r\n\r\n  //因为上面的l++,已经将l加到了leftend\r\n  //这里应该从开始start 到 最后的 t 都应该修改\r\n  for(int i=start;i&lt;t;i++)\r\n  {\r\n    a[i]=m[i];\r\n  }\r\n}\r\nvoid msort()\r\n{\r\n  int temp[100];\r\n  sort(temp,0,n-1);\r\n}\r\n\r\n```", "Konwledge_Point": "归并排序", "Question": ["用c++实现归并排序的问题", ["打算用递归法实现归并排序，但结果总是不对，找不到问题，求大佬解答", "\n#include", "\nusing namespace std;", "\nint a[100]; ", "\nvoid merge(int m[],int l,int r,int rightend);", "\nvoid sort(int m[],int l,int r);", "\nvoid msort();", "\nint n;", "\nint main()", "\n{", "\n    cin>>n;", "\n    for(int i=0;i\n    {", "\n        cin>>a[i];", "\n    }", "\n    msort();", "\n    for(int i=0;i<n;i++)", "\n    {", "\n        cout<<a[i]<<\" \";", "\n    }", "\n}", "\nvoid sort(int m[],int l, int r)", "\n{", "\n    int center;", "\n    if(l<r)", "\n    {", "\n      center=(l+r)/2;", "\n      sort(m,l,center);", "\n      sort(m,center+1,r);", "\n      merge(m,l,center+1,r);", "\n    }", "\n}", "\nvoid merge(int m[],int l,int r,int rightend)", "\n{", "\n    int t=0;", "\n    int leftend=r-1;", "\n    while(l<=leftend&&r<=rightend)", "\n    {", "\n        if(a[l]<=a[r])", "\n        {", "\n            m[t++]=a[l++];", "\n        }", "\n        else", "\n        {", "\n            m[t++]=a[r++];", "\n        }", "\n    }", "\n    while(l<=leftend) m[t++]=a[l++];", "\n    while(r<=rightend) m[t++]=a[r++];", "\n    for(int i=0;i<t;i++)", "\n    {", "\n        a[l+i]=m[i];", "\n    }", "\n}", "\nvoid msort()", "\n{", "\n    int temp[100];", "\n    sort(temp,0,n-1);", "\n}"]], "Tag": "算法设计"}
{"Answer": "排序效率根本就不能单纯的说哪种比哪种高吧，建议看看算法导论", "Konwledge_Point": "归并排序", "Question": ["测试排序的效率,为什么:希尔排序>归并排序>快速排序?", ["我看看几篇排序的算法的文章,大家都说效率一般都是:快速排序>归并排序>希尔排序", "\n\n", "然后就用java自己动手测了一下,测试结果却是:希尔排序>归并排序>快速排序", "\n\n", "而且当数据量过大时,归并排序 和 快速排序 会出现栈溢出.", "\n\n", " ", "\n\n", "以下是我写的源代码,请帮我分析一下是什么原因?", "\n\n", " ", "\n\n", "package com.test;\n\nimport java.util.Arrays;\nimport java.util.Random;\n\npublic class Sort {\n    public static void main(String[] args) {\n        int[] arr = new int[400000];\n        Random r = new Random();\n\n        long start, end;\n\n        init(arr, r);\n        System.out.print(\"希尔排序...\");\n        start = System.currentTimeMillis();\n        sort1(arr);\n        end = System.currentTimeMillis();\n        System.out.println(\"完成\" + (end - start));\n        //System.out.println(Arrays.toString(arr));\n\n        init(arr, r);\n        System.out.print(\"归并排序...\");\n        start = System.currentTimeMillis();\n        arr = sort2(arr, 0, arr.length - 1);\n        end = System.currentTimeMillis();\n        System.out.println(\"完成\" + (end - start));\n        //System.out.println(Arrays.toString(arr));\n\n        init(arr, r);\n        System.out.print(\"快速排序...\");\n        start = System.currentTimeMillis();\n        sort3(arr, 0, arr.length - 1);\n        end = System.currentTimeMillis();\n        System.out.println(\"完成\" + (end - start));\n        //System.out.println(Arrays.toString(arr));\n\n    }\n\n    /**\n     * 初始化\n     */\n    private static void init(int[] arr, Random r) {\n        System.out.print(\"\\n初始化...\");\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] = r.nextInt(100);\n        }\n        //System.out.println(\"\\n\" + Arrays.toString(arr));\n    }\n\n    /**\n     * 希尔排序\n     */\n    private static void sort1(int[] a) {\n        int i, j, temp, increment;\n        // increment增量缩短，当增量为1时，即把整个数组进行插入排序\n        for (increment = a.length / 3; increment > 0; increment /= 3) {\n            for (i = increment; i < a.length; i++) {\n                temp = a[i];\n                for (j = i - increment; j >= 0 && temp < a[j]; j -= increment) {\n                    a[j + increment] = a[j];\n                }\n                a[j + increment] = temp;\n            }\n\n        }\n    }\n\n    /**\n     * 归并排序\n     * left,right参数表示:把a数组中fist--right之间的元素排序\n     * 排序结果以新数组返回.\n     */\n    private static int[] sort2(int[] a, int left, int right) {\n            //判断递归结束条件\n            if (right <= left) return new int[] { a[left] };\n            \n            //从数组中间切成左右两部分,mid为右边部分的起始下标\n            int mid = (left + right + 1) / 2;\n            //第一步:用递归把数组左边排序\n            int[] a1 = sort2(a, left, mid - 1);\n            //第二步:用递归把数组右边排序\n            int[] a2 = sort2(a, mid, right);\n            \n            //第三步:归并操作,把左右两边序列合并到新的数组\n            int[] result = new int[right - left + 1];\n            int i = 0, j = 0, k = 0;\n            while (i < a1.length && j < a2.length) {\n                if (a1[i] < a2[j])\n                    result[k++] = a1[i++];\n                else\n                    result[k++] = a2[j++];\n            }\n            while (j < a2.length) {\n                result[k++] = a2[j++];\n            }\n            while (i < a1.length) {\n                result[k++] = a1[i++];\n            }\n            return result;\n    }\n\n    /**\n     * 快速排序\n     * left,right参数表示:把a数组中left--right之间的元素排序\n     */\n    private static void sort3(int[] a, int left, int right) {\n        // 第四步:判断结束递归的条件\n        if(left>=right) return;\n        \n        // 第一步:以left为基数,把a分成左右两部分,使左边部分小于右边部分\n        int i = left;//最终i==j;\n        for (int b=1,j=right; i < j;) {// 最初b=1,表示以left为基数\n            if (a[i] > a[j]) {//交换位置\n                int temp = a[i];\n                a[i] = a[j];\n                a[j] = temp;\n                if (b==1) i++; else j--;//应基数位置不同,处理也不同\n                b = -b;//交换位置后,基数位置变化,b=1,表示以left为基数\n            } else {\n                if (b==1) j--; else i++;//应基数位置不同,处理也不同\n            }\n        }\n        // 第二步:递归排序左部分(left到i-1)\n        sort3(a,left,i-1);\n        // 第三步:递归排序右部分(i+1到right)\n        sort3(a,i+1,right);\n    }\n}\n", "\n\n", " 运行结果如下:", "\n\n", " ", "\n\n", "初始化...希尔排序...完成40", "初始化...归并排序...完成53", "初始化...快速排序...完成1411", "\n\n", " ", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "```\r\nwhile (i &lt; list1_size &amp;&amp; j &lt; list2_size)\r\n\t{\r\n\t\tif (list1[i] &lt; list2[j])   //把j写成i了\r\n\t\t{\r\n\t\t\ttemp[k++] = list1[i++];\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\ttemp[k++] = list2[j++];\r\n\t\t}\r\n\t}\r\n```", "Konwledge_Point": "归并排序", "Question": ["C语言归并排序问题 求解答", ["请大家帮我看一下这段代码的问题，谢谢了", "\n\n", "/*先拆分，再两两归并!*/\n\n#include<stdio.h>\n#define MAXSIZE 10\n\n/*归并后的数据存入list1*/\n\n\nvoid merging(int *list1, int list1_size, int *list2, int list2_size)//归并代码\n{\n    int temp[MAXSIZE];\n    int i, j, k;\n    int m;\n    i =j =k =0;\n\n\n    while(i < list1_size && j < list2_size)\n    {\n        if(list1[i] < list2[i])\n        {\n            temp[k++] = list1[i++];\n        }\n        else\n        {\n            temp[k++] = list2[j++];\n        }\n    }\n    while(i < list1_size)\n    {\n        temp[k++] = list1[i++];\n    }\n    while(j < list2_size)\n    {\n        temp[k++] = list2[j++];\n    }\n    for(m=0; m < (list1_size + list2_size); m++)\n    {\n        list1[m] = temp[m];\n    }\n}\n\n\n\nvoid MergeSort(int k[] , int n)//递归拆分代码\n{\n    if (n > 1)\n    {\n        int *list1 = k;\n        int list1_size = n/2;\n        int *list2 = k + n/2;\n        int list2_size = n - list1_size; \n\n        MergeSort(list1, list1_size);\n        MergeSort(list2, list2_size);\n\n        merging(list1, list1_size, list2, list2_size);//归并\n    }\n\n\n}\nint main()\n{\n    int i, a[10]={2,4,6,8,0,9,7,5,3,1};\n\n    MergeSort(a,10);\n\n    printf(\"排序后的结果是：\");\n\n    for(i=0;i<10;i++)\n    {\n        printf(\"%d \",a[i]);\n    }\n\n    printf(\"\\n\");\n\n    return 0;\n}\n\n", "\n\n", "图片说明"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;#include &amp;lt;iostream&amp;gt;\nusing namespace std;\n    void merge(int arr[], int start, int mid,int end)\n    { \n        mid &amp;#61; (start &amp;#43; end) / 2;\n        int mi &amp;#61; mid &amp;#43; 1;\n        int k &amp;#61; 0;\n        int  *tmp &amp;#61; new int[end-start&amp;#43;1];\n        int s &amp;#61; start;//下面start&amp;#43;&amp;#43;自增&amp;#xff0c;改变start的值&amp;#xff0c;s为start备份 \n        while (start &amp;lt;&amp;#61; mid &amp;amp;&amp;amp; mi &amp;lt;&amp;#61; end)\n        {\n            if (arr[start] &amp;lt;&amp;#61; arr[mi])//这里mid应该改为mi \n            {\n                tmp[k&amp;#43;&amp;#43;] &amp;#61; arr[start&amp;#43;&amp;#43;];\n            }\n            else \n            {\n                tmp[k&amp;#43;&amp;#43;] &amp;#61; arr[mi&amp;#43;&amp;#43;];\n            }\n           \n        }\n        //若其中一个没排完&amp;#xff0c;把剩下的元素放进tmp\n        while (start &amp;lt;&amp;#61; mid) \n            tmp[k&amp;#43;&amp;#43;] &amp;#61; arr[start&amp;#43;&amp;#43;];\n        while (mi&amp;lt;&amp;#61; end)  \n            tmp[k&amp;#43;&amp;#43;] &amp;#61; arr[mi&amp;#43;&amp;#43;];\n \n        for (int i &amp;#61; s, j &amp;#61; 0; i &amp;lt;&amp;#61; end; i&amp;#43;&amp;#43;, j&amp;#43;&amp;#43;) {//用start的备份s&amp;#xff0c;start已自增 \n            arr[i] &amp;#61; tmp[j];\n            cout &amp;lt;&amp;lt; tmp[j] &amp;lt;&amp;lt; &amp;#34; &amp;#34;;\n        }\n        cout&amp;lt;&amp;lt;endl;\n        delete []tmp;\n        tmp &amp;#61; nullptr;\n    }\n \n    void merge_sort(int arr[], int start, int end)//递归\n    {\n        \n        if (arr&amp;#61;&amp;#61;nullptr||end &amp;#61;&amp;#61; 0 || ( end-start)&amp;#61;&amp;#61;0)\n        {\n            return;\n        }\n        if(end-start &amp;#61;&amp;#61; 1){//少了一步 \n        \tif(arr[start]&amp;gt;arr[end]){\n        \t\tint temp &amp;#61; arr[start];\n        \t\tarr[start] &amp;#61; arr[end];\n        \t\tarr[end] &amp;#61; temp;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n       \n        if (start &amp;lt; end)\n        {\n            int mid &amp;#61; (start &amp;#43; end) / 2;\n            int middle &amp;#61; mid &amp;#43; 1;\n           \n            merge_sort(arr, start, mid);\n            merge_sort(arr, middle , end);\n            merge(arr, start, mid, end);//将两个有序子数组合并操作\n        }\n      \n       \n    }\n   \n \nint main()\n{\n    int a[] &amp;#61; {3,2,9,20,8,15,18};\n    int length &amp;#61; sizeof(a) / sizeof(a[0]);\n    merge_sort(a, 0, length-1);\n    for (int i &amp;#61; 0; i &amp;lt; length; i&amp;#43;&amp;#43;)\n        cout &amp;lt;&amp;lt; a[i] &amp;lt;&amp;lt; &amp;#34; &amp;#34;;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["关于归并排序的一些BUG", ["\n", "#include <iostream>\nusing namespace std;\n\n /**\n   * 归并排序\n   * 简介:将两个（或两个以上）\"有序\"表合并成一个新的有序表 即把待排序序列分为若干个子序列，\n   *     每个子序列是有序的。然后再把有序子序列合并为整体有序序列\n   * 时间复杂度为O(nlogn)\n   * 稳定排序方式\n   * @param nums 待排序数组\n    @return 输出有序数组\n   **/\n    void merge(int arr[], int start, int mid,int end)\n    { \n        mid = (start + end) / 2;\n        int mi = mid + 1;\n        int k = 0;\n        int  *tmp = new int[end+1];\n        \n        while (start <= mid && mi <= end)\n        {\n            if (arr[start] <= arr[mid])\n            {\n                tmp[k++] = arr[start++];\n            }\n            else \n            {\n                tmp[k++] = arr[mi++];\n            }\n           \n        }\n        //若其中一个没排完，把剩下的元素放进tmp\n        while (start <= mid) \n            tmp[k++] = arr[start++];\n        while (mi<= end)  \n            tmp[k++] = arr[mi++];\n\n        for (int i = start, j = 0; i <= end; i++, j++) {\n            arr[i] = tmp[j];\n        }\n        delete []tmp;\n        tmp = nullptr;\n    }\n\n    void merge_sort(int arr[], int start, int end)//递归\n    {\n        \n        if (arr==nullptr||end == 0 || ( end-start)<=1)\n        {\n            return;\n        }\n       \n        if (start < end)\n        {\n            int mid = (start + end) / 2;\n            int middle = mid + 1;\n           \n            merge_sort(arr, start, mid);\n            merge_sort(arr, middle , end);\n            merge(arr, start, mid, end);//将两个有序子数组合并操作\n        }\n      \n       \n    }\n   \n\nint main()\n{\n    int a[] = {3,2,9,20,8,15,18};\n    int length = sizeof(a) / sizeof(a[0]);\n    merge_sort(a, 0, length-1);\n    for (int i = 0; i < length; i++)\n        cout << a[i] << \" \";\n}\n\n", "\n\n", "输出的时候发现排序不成功，有没有大佬帮忙看一下是哪里的问题？"]], "Tag": "算法设计"}
{"Answer": "结果没变化的原因![图片说明](https://img-ask.csdn.net/upload/202003/25/1585145095_87678.png)", "Konwledge_Point": "归并排序", "Question": ["关于归并排序的输出问题", ["使用归并排序后输出的数组还是原来的形式，没有变化，求大佬解决", "\n\n", "#include<stdio.h>\nvoid merge(int arr[],int L,int M,int R)\n{\n    int left[M-L];\n    int right[R-M+1];\n    for(int i=L;i<M;i++)\n    {\n        left[i-L] = arr[i];\n    }\n    for(int i=M;i<=R;i++)\n    {\n        right[i-M] = arr[i];\n    }\n    int i=0,j=0,k=0;\n    while(i < M-L && j < R-M+1)\n    {\n        if(left[i] < right[j])\n        {\n        left[i] = arr[k];\n        i++;\n        k++;\n        }\n        else\n        {\n        right[j] = arr[k];\n        j++;\n        k++;\n        }\n    }\n    while(j < R-M+1)\n    {\n        right[j] = arr[k];\n        j++;\n        k++;\n    }\n\n    while(i < M-L)\n    {\n        left[i] = arr[k];\n        i++;\n        k++;\n    }\n}\n\nvoid merge_sort(int arr[],int L,int R)\n{\n    if(L == R)\n    return;\n    else \n    {   \n        int M = (L+R)/2;\n        merge_sort(arr,L,M); \n        merge_sort(arr,M+1,R); \n        merge(arr,L,M+1,R); \n    }\n}\n\nint main(void)\n{\n    int arr[] = {2,7,8,10,3,5,6,9}; \n    int L = 0;\n    int R = 7;\n    merge_sort(arr,L,R);\n    for(int i=0;i<=R;i++)\n    {\n        printf(\"%d \",arr[i]);\n    }\n    return 0;\n} \n"]], "Tag": "算法设计"}
{"Answer": "```\r\n#include&lt;stdlib.h&gt;\r\n#include&lt;string.h&gt;\r\n#include&lt;stdio.h&gt;\r\n//归并排序 先划分 分别排序 然后归并 \r\nint helper[100];\r\nvoid merger(int arr[], int left, int mid, int right, int *temp){\r\n\tint i = left;\r\n\tint j = mid + 1;\r\n\tint k = left;\r\n\twhile (i &lt;= mid&amp;&amp;j &lt;= right){\r\n\t\tif (arr[i] &lt; arr[j]){\r\n\t\t\ttemp[k++] = arr[i++];\r\n\t\t}\r\n\t\telse{\r\n\t\t\ttemp[k++] = arr[j++];\r\n\t\t}\r\n\t}\r\n\twhile (i &lt;= mid){\r\n\t\ttemp[k++] = arr[i++];\r\n\t}\r\n\twhile (j &lt;= right){\r\n\t\ttemp[k++] = arr[j++];\r\n\t}\r\n\tmemcpy(arr + left, temp + left, sizeof(int)*(right - left+1));\r\n}\r\nvoid mergesort(int arr[],int left,int right,int *temp){\r\n\tint mid = 0;\r\n\tif (left &lt; right){\r\n\t\tmid = left + (right - left) / 2;\r\n\t\tmergesort(arr, left, mid, temp);\r\n\t\tmergesort(arr, mid + 1, right, temp);\r\n\t\tmerger(arr, left, mid, right, temp);\r\n\t}\r\n}\r\nint main()\r\n{\r\nint a[]={1,3,5,7,9,2};\r\nmergesort(a,0,5,helper);\r\nfor(int i=0;i&lt;6;i++)\r\nprintf(\"%d \",a[i]);\r\n}\r\n\r\n```", "Konwledge_Point": "归并排序", "Question": ["请大神帮我看看 这归并排序哪里写错了", ["#include", "\n#include", "\n#include", "\n//归并排序  先划分 分别排序 然后归并 ", "\nint helper[100];", "\n\n", "void merger(int*a,int p,int mid,int r)", "\n{", "\n\n", "memcpy(helper,a,sizeof(int)*(r-p+1));\n\nint left=p;//左侧队伍头部指针，指向带比较的元素 \nint right=mid+1;//右侧 \nint current=p;//原数组指针，指向代填入数据的位置; \nwhile(left<=mid&&right<=r)\n{\n    if(helper[left]<=helper[right])\n    { a[current]=helper[left];\n       current++;\n       left++;\n    }else{\n        a[current]=helper[left];\n       current++;\n       right++;\n    }\n}\nwhile(left<=mid)\n{\n    a[current]=helper[left];\n    current++;\n    left++;\n}\n", "\n\n", "}", "\nvoid mergersort(int*a,int p,int r)", "\n{", "\n    if(p<r)", "\n    {", "\n        int mid=(p+r)/2;", "\n        mergersort(a,p,mid);", "\n        for(int i=0;i<3;i++)", "\n\n", "    mergersort(a,mid+1,r);\n    for(int i=3;i<6;i++)\n\n    merger(a,p,mid,r);\n}\n", "\n\n", "} ", "\nmain()", "\n{", "\n    int a[]={1,3,5,7,9,2};", "\n    mergersort(a,0,5);", "\n    for(int i=0;i<6;i++)", "\n    printf(\"%d\",a[i]);", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;像这种递归的排序一部都有三个参数&amp;#xff0c;数组&amp;#xff0c;开始位置&amp;#xff0c;结束位置&amp;#xff0c;你这就两个参数&amp;#xff0c;明显不对&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["C语言利用归并排序法实现数据从小到大排列，最后执行时没有结果，想问一下大家这段代码问题出在哪里？", ["\n"]], "Tag": "算法设计"}
{"Answer": "在针对java对象排序时，两个对象顺序一样，也只是一些key值一样，但是其他的成员变量不一样，这时就需要稳定的排序，保证原先在前面的对象排序后还是在前面。\r\n对于基本类型，如int, char，一样就是一样，没有先后顺序的区别。", "Konwledge_Point": "归并排序", "Question": ["java 针对基本类型设计了“快速排序”，针对对象设计的“稳定归并排序”为什么？", ["如题。为什么用两种不同方式？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;结束条件应该是 if(lo&amp;gt;&amp;#61;hi) return;&lt;br /&gt;否则一开始的时候lo&amp;#61;1,hi&amp;#61;19&amp;#xff0c;满足条件就结束了&lt;br /&gt;调试了一下&amp;#xff0c;改成 if(lo&amp;gt;&amp;#61;hi) return;后排序正确&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["归并排序未成功排序，求指正代码", ["编译器未报错，但是为什么没有正确由小到大的排序呢？", "\n", "#", "include", " <stdio.h>\n#", "include", " <stdbool.h>\n", "bool", " less(", "int", " a,", "int", " b);\nvoid ", "Merge(", "int", " ", "*", "a", ",", "int", " ", "lo", ",", "int", " ", "mid", ",", "int", " ", "hi", ")", ";", "//lo相当于left，hi相当于right。", "\nvoid ", "Sort(", "int", " ", "*", "a", ",", "int", " ", "lo", ",", "int", " ", "hi", ")", ";\n", "int", " main", "()", "\n{\n    ", "int", " i;\n    ", "int", " a", "[", "20", "]", "={", "1", ",", "4", ",", "3", ",", "5", ",", "7", ",", "8", ",", "5", ",", "4", ",", "7", ",", "9", ",", "11", ",", "43", ",", "54", ",", "32", ",", "56", ",", "234", ",", "6434", ",", "34", ",", "323", ",", "76", ",};\n    ", "int", " length=", "20", ";\n    ", "int", " lo=", "0", ";\n    ", "int", " hi=length-", "1", ";\n    ", "Sort(", "a", ",", "lo", ",", "hi", ")", ";\n    ", "for", "(i=", "0", ";i<length;i++)\n        printf(", "\"%d \"", ",a", "[", "i", "]", ");\n    return ", "0", ";\n}\n", "bool", " less(", "int", " a,", "int", " b)\n{\n    return a<=b;\n}\n \nvoid ", "Merge(", "int", " ", "*", "a", ",", "int", " ", "lo", ",", "int", " ", "mid", ",", "int", " ", "hi", ")", "\n{\n    ", "int", " aux", "[", "20", "]", ";\n    ", "int", " k;\n    ", "int", " i=lo;\n    ", "int", " j=mid+", "1", ";\n    ", "for", "(k=lo;k<=hi;k++)\n        aux", "[", "k", "]", "=a", "[", "k", "]", ";\n    ", "for", "(k=lo;k<=hi;k++){\n        ", "if", "(i>mid){\n            a", "[", "k", "]", "=aux", "[", "j", "++", "]", ";\n        }", "else", " ", "if", "(j>hi){\n            a", "[", "k", "]", "=aux", "[", "i", "++", "]", ";\n        }", "else", " ", "if", "(less(aux", "[", "j", "]", ",aux", "[", "i", "]", ")){\n            a", "[", "k", "]", "=aux", "[", "j", "++", "]", ";\n        }", "else", "{\n            a", "[", "k", "]", "=aux", "[", "i", "++", "]", ";\n        }      \n    }\n    return;\n}\nvoid ", "Sort(", "int", " ", "*", "a", ",", "int", " ", "lo", ",", "int", " ", "hi", ")", "\n{\n    ", "if", "(lo<=hi) return;\n    ", "int", " mid=lo+(hi-lo)/", "2", ";\n    ", "Sort(", "a", ",", "lo", ",", "mid", ")", ";", "//左半边排序", "\n    ", "Sort(", "a", ",", "mid", "+1,", "hi", ")", ";", "//右半边排序", "\n    ", "Merge(", "a", ",", "lo", ",", "mid", ",", "hi", ")", ";\n    return;\n}\n\n", "\n", "最后的输出仍然是原数组a的初始化数据，我甚至在想是不是根本没有比较。求指正。"]], "Tag": "算法设计"}
{"Answer": "我看到你这个问题，刚开始还以为是二分法，摸了半天瞎。后来发现时归并排序，然后我发现我也不会，就调你的程序，查资料什么事归并排序。\r\n然后发现其实问题很简单，\r\n\twhile(i&lt;=mid) {\r\n\t\ts[k++]=a[i++];\r\n\t}\r\n\twhile(j&lt;=end) {\r\n\t\ts[k++]=a[j++];\r\n\t}\r\n这个地方粗一看觉得是对的，但是后来我细想，要是1个排序的数组：4 5 3。然后经过你的这段程序，\r\nwhile(i&lt;=mid &amp;&amp; j&lt;=end) {\r\n\t\tif(a[i]&lt;a[j]) {\r\n\t\t\ts[k++]=a[i++];\r\n\t\t} else {\r\n\t\t\ts[k++]=a[j++];\r\n\t\t}\r\n\t}\r\n\r\nEnter 5 nimbers:\r\n5 4 3 2 1\r\n\r\n0-4\r\n0-2\r\n0-1\r\n0-0\r\n1-1\r\n 0 0 1\r\n    4    5    0    0    0\r\n2-2\r\n 0 1 2\r\n    3    4    0    0    0\r\n3-4\r\n3-3\r\n4-4\r\n 3 3 4\r\n    3    4    0    1    2\r\n 0 2 4\r\n    1    2    3    0    0\r\nThe sorted order is:\r\n    1    2    3    0    0\r\n第一次，把三排到最开始，i ++ 了，while就退出了，这是还有4 5没有合并，然后你下面的是if（），这就造成，最多只能加一个元素的情况，把5给\r\n丢了。现在是3 4，然后合并了 1 2，成了 3 4 0 1 2，在排序的时候，把 1 2 先拍， 这时候while退出，然后 就合并了一个 3 ， 4 给丢了。换成 while\r\n就行了。还有，定义数组要规范，然后还要初始化，这是规范化操作。我贴上了测试的数据。不知道你看不看得懂。", "Konwledge_Point": "归并排序", "Question": ["哪位大神知道我这个归并排序的代码究竟哪里出了问题？", ["代码如下：", "\n找了好久，实在找不出哪里的问题：", "\n\n", " #include<stdio.h>\nvoid merge(int s[],int a[],int start,int mid,int end) \n{\n    int i=start;\n    int j=mid+1;\n    int k=start;\n    while(i<=mid && j<=end) {\n        if(a[i]<a[j]) {\n            s[k++]=a[i++];\n        } else {\n            s[k++]=a[j++];\n        }\n    }\n    if(i<=mid) {\n        s[k++]=a[i++];\n    }\n    if(j<=end) {\n        s[k++]=a[j++];\n    }\n}\n\nvoid merge_sort(int s[],int a[],int start,int end) \n{\n    int t[20]; \n    int mid; \n    if(start==end) {\n        s[start]=a[start];\n    } else {\n        mid=(start+end)/2;\n        merge_sort(t,a,start,mid);\n        merge_sort(t,a,mid+1,end);\n        merge(s,t,start,mid,end);\n    }\n}\n\nint main()\n{\n    int i;\n    int n=5;\n    int a[n],s[n];\n    printf(\"Enter %d nimbers: \\n\",n);\n    for(i=0;i<n;i++) {\n        scanf(\"%d\",&a[i]);\n    }\n    printf(\"\\n\");\n    merge_sort(s,a,0,n-1);\n    printf(\"The sorted order is: \\n\");\n    for(i=0;i<n;i++) {\n        printf(\"%5d\",s[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n"]], "Tag": "算法设计"}
{"Answer": "while(i&lt;list2_size)\r\n    {\r\n        temp[k++]=list2[j++];\r\n    } \r\n\t\t\r\n这句中i改为j", "Konwledge_Point": "归并排序", "Question": ["归并排序问题，代码是按照教学视频打的，为什么会出错，显示一些奇奇怪怪的数字", ["如题，不知道是哪里疏漏了，请各位大神指教", "\n\n", "#include<stdio.h>\n#include<stdlib.h>\n\nvoid merging(int list1[],int list1_size,int list2[],int list2_size)\n{\n    int temp[8],i=0,j=0,k=0;\n    while(i<list1_size&&j<list2_size)\n    {\n        if(list1[i]<list2[j])\n        {\n            temp[k++]=list1[i++];\n        }\n        else\n        {\n            temp[k++]=list2[j++];\n        }\n    }\n    while(i<list1_size)\n    {\n        temp[k++]=list1[i++];\n    }   \n    while(i<list2_size)\n    {\n        temp[k++]=list2[j++];\n    }   \n    for(int m=0;m<(list1_size+list2_size);m++)\n    {\n        list1[m]=temp[m];\n    }\n}\nvoid merge_sort(int k[],int n)\n{\n    if(n>1)\n    {\n    int *list1=k;\n    int list1_size=n/2;\n    int *list2=k+n/2;\n    int list2_size=n/2;\n    merge_sort(list1,list1_size);\n    merge_sort(list2,list2_size);\n    merging(list1,list1_size,list2,list2_size);\n    }\n}\n\nint main()\n{\n    int a[8]={3,41,52,26,38,57,9,49};\n    merge_sort(a,8);\n    for(int i=0;i<8;i++)\n        printf(\"%d \",a[i]);\n    return 0;\n}\n"]], "Tag": "算法设计"}
{"Answer": "首先，int m=0; 这条语句有问题，应该是 int m=low;\r\n\r\n其次，\r\nfor(int i=0;i&lt;=len;++i){\r\n\t\t data[i]=data2[i];\r\n}\r\n这条语句有问题，应该是\r\n\r\nfor( int i = 0; i &lt; len; ++i,)\r\n\t\t data[ i + low ] = data2[ i ];\r\n}", "Konwledge_Point": "归并排序", "Question": ["归并排序中合并总是少一些数，那个排序的函数已经写好了。", ["int post_sort2(int data[] , int low   , int mid , int high)", "\n{", "\n    int len=high-low+1;", "\n    int data2[len];", "\n    int m=0;", "\n    int loc=0;", "\n    int n=mid+1;", "\n    while (m<=mid && n<=high)", "\n    {    if (data[m]<=data[n])", "\n        {    data2[loc]=data[m];", "\n            m=m+1;", "\n            loc=loc+1;", "\n        }", "\n        else", "\n        {    data2[loc]=data[n];", "\n            n=n+1;", "\n            loc=loc+1;", "\n        }", "\n    }", "\n    while (m<=mid)", "\n    {    data2[loc]=data[m];", "\n        loc=loc+1;", "\n        m=m+1;", "\n    }", "\n    while(n<=high)", "\n    {    data2[loc]=data[n];", "\n        loc=loc+1;", "\n        n=n+1;", "\n    }", "\n    for(int i=0;i<=len;++i)", "\n    {", "\n        data[i]=data2[i];", "\n    }", "\n    return 0;", "\n}"]], "Tag": "算法设计"}
{"Answer": "我说的是，在待排序数据本身有序的情况下，归并更快，我什么时候说“归并排序比快速排序快”了。", "Konwledge_Point": "归并排序", "Question": ["link能不能改变排序算法？link如何实现归并排序？", ["听说归并排序比快速排序快，有没有办法使用归并排序代替快速排序？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&amp;#xff08;1&amp;#xff09;原因分析&lt;br /&gt;第9行的递归不会陷入死循环&amp;#xff0c;因为它们都会递归到if(l&amp;#61;&amp;#61;r)的情形然后return返回。&lt;br /&gt;&amp;#xff08;2&amp;#xff09;分析验证&lt;br /&gt;下面给出了一个用于验证的递归二叉树图&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/895920400166188.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;上图表明初始(l,r)&amp;#61;(1,10)或(l,r)&amp;#61;(1,5)的情形最终都会递归到if(l&amp;#61;&amp;#61;r)的情形然后return返回&amp;#xff0c;因此不会陷入死循环。&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["这个归并排序第8行不会死循环吗？", ["这个归并排序第8行不会死循环吗？这个归并排序第8行不会死循环吗？为什么这个归并排序第8行不会死循环吗？"]], "Tag": "算法设计"}
{"Answer": "http://blog.sina.com.cn/s/blog_a80fd6510101b5u4.html", "Konwledge_Point": "归并排序", "Question": ["Big String                     ", ["We will construct an infinitely long string from two short strings: A = \"^__^\" (four characters), and B = \"T.T\" (three characters). Repeat the following steps:", "\nConcatenate A after B to obtain a new string C. For example, if A = \"^__^\" and B = \"T.T\", then C = BA = \"T.T^__^\".", "\nLet A = B, B = C -- as the example above A = \"T.T\", B = \"T.T^__^\".", "\nYour task is to find out the n-th character of this infinite string.", "\n\n", "Input", "\n\n", "The input contains multiple test cases, each contains only one integer N (1 <= N <= 2^63 - 1). Proceed to the end of file.", "\n\n", "Output", "\n\n", "For each test case, print one character on each line, which is the N-th (index begins with 1) character of this infinite string.", "\n\n", "Sample Input", "\n\n", "1", "\n2", "\n4", "\n8", "\n\n", "Sample Output", "\n\n", "T", "\n.", "\n^", "\nT"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;望采纳&amp;#xff01;点击左下方的解决即可采纳&amp;#xff01;可以参考一下我的代码&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdlib.h&amp;gt;\n\n&lt;span class=\"hljs-comment\"&gt;// 归并两个有序子数组&lt;/span&gt;\nvoid merge(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;* arr, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;* temp, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; left, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; mid, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; right)\n{\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; left, j &amp;#61; mid &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt;&amp;#61; mid&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;j &amp;lt;&amp;#61; right)\n{\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;lt; arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;)\n{\ntemp&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n}\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n{\ntemp&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n}\n}\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt;&amp;#61; mid)\n{\ntemp&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n}\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (j &amp;lt;&amp;#61; right)\n{\ntemp&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n}\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; l &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; l &amp;lt; k; l&amp;#43;&amp;#43;)\n{\narr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;left&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-identifier\"&gt;l&lt;/span&gt;]&lt;/span&gt; &amp;#61; temp&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;l&lt;/span&gt;]&lt;/span&gt;;\n}\n}\n\n&lt;span class=\"hljs-comment\"&gt;// 递归归并排序&lt;/span&gt;\nvoid merge&lt;span class=\"hljs-constructor\"&gt;_sort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;temp&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;)&lt;/span&gt;\n{\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (left &amp;lt; right)\n{\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; mid &amp;#61; left &amp;#43; (right - left)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\nmerge&lt;span class=\"hljs-constructor\"&gt;_sort(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;temp&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;)&lt;/span&gt;;\nmerge&lt;span class=\"hljs-constructor\"&gt;_sort(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;temp&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt; &amp;#43; 1, &lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;)&lt;/span&gt;;\nmerge(arr, temp, left, mid, right);\n}\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt; &amp;#61; { &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt; };\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; len &amp;#61; sizeof(arr)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;);\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;* temp &amp;#61; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;*)malloc(sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;)&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;len);\nmerge&lt;span class=\"hljs-constructor\"&gt;_sort(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;temp&lt;/span&gt;, 0, &lt;span class=\"hljs-params\"&gt;len&lt;/span&gt; - 1)&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; len; i&amp;#43;&amp;#43;)\n{\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n}\nreturn &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;上面的代码包含了两个函数&amp;#xff1a;merge和merge_sort。merge函数用于归并两个有序子数组&amp;#xff0c;merge_sort函数用于递归调用merge函数实现归&lt;/p&gt;\n&lt;p&gt;上面的代码包含了两个函数&amp;#xff1a;merge和merge_sort。merge函数用于归并两个有序子数组&amp;#xff0c;merge_sort函数用于递归调用merge函数实现归并排序&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["一个归并排序的问题！", ["归并排序，为什么没有运行排序，数组里的数据还是原封不动的顺序，求赐！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;提个建议&amp;#xff1a;问问题要有诚意&amp;#xff0c;图都是模糊的&amp;#xff0c;问题还要大家来猜吗&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["最近在练习归并排序的算法，出现了一些问题怎么解决呢", ["\n", "\n", "最近在练习归并排序的算法，出现了一些问题怎么解决呢最近在练习归并排序的算法，出现了一些问题怎么解决"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;修改完善如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;\n#define MAX &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;\ntypedef &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; Status;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; e;\ntypedef &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; data&lt;span class=\"hljs-literal\"&gt;[MAX]&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; length;\n}Slist;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; insert(Slist* L, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; e) {\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i&amp;lt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;i&amp;gt;L-&amp;gt;length &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; L-&amp;gt;length; j &amp;gt;&amp;#61; i; j--)\n        L-&amp;gt;data&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt; &amp;#61; L-&amp;gt;data&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;;\n    L-&amp;gt;data&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt; &amp;#61; e;\n    L-&amp;gt;length&amp;#43;&amp;#43;;\n    return &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n}\nStatus &lt;span class=\"hljs-constructor\"&gt;GetElem(Slist&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; L, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&amp;amp; &lt;span class=\"hljs-params\"&gt;e&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;i&amp;gt;L-&amp;gt;length)\n        return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    e &amp;#61; L-&amp;gt;data&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;;\n    return e;\n}\nStatus locate(Slist L, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; e) {\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;data&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;e)\n            return i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; length(Slist L) {\n    return &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length;\n}\nStatus  rank(Slist a, Slist b, Slist* c) {  &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    Status ea, eb, ia &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, ib &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, ic &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (ia &amp;lt; a.length&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;ib &amp;lt; b.length) \n    {\n        &lt;span class=\"hljs-constructor\"&gt;GetElem(&amp;amp;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;ia&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;ea&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-constructor\"&gt;GetElem(&amp;amp;&lt;span class=\"hljs-params\"&gt;b&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;ib&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;eb&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (ea &amp;lt;&amp;#61; eb){\n            insert(c, ic, ea);\n            ia&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            insert(c, ic, eb);\n            ib&amp;#43;&amp;#43;;\n        }\n        ic&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (ia &amp;lt; a.length) {\n        &lt;span class=\"hljs-constructor\"&gt;GetElem(&amp;amp;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;ia&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;ea&lt;/span&gt;)&lt;/span&gt;;\n        insert(c, ic, ea);\n        ia&amp;#43;&amp;#43;; ic&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (ib &amp;lt; b.length) {\n        &lt;span class=\"hljs-constructor\"&gt;GetElem(&amp;amp;&lt;span class=\"hljs-params\"&gt;b&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;ib&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;eb&lt;/span&gt;)&lt;/span&gt;;\n        insert(c, ic, eb);\n        ib&amp;#43;&amp;#43;; ic&amp;#43;&amp;#43;;\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;//Slist c{};&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//c.length &amp;#61; 0;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//for (int k &amp;#61; 0; k &amp;lt; (a.length &amp;#43; b.length); k&amp;#43;&amp;#43;) {&lt;!-- --&gt;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    GetElem(&amp;amp;a, k, ea);&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    GetElem(&amp;amp;b, k, eb);&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    if (ea &amp;lt;&amp;#61; eb);&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    insert(&amp;amp;c, k &amp;#43; 1, ea);&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    insert(&amp;amp;c, k &amp;#43; 2, eb);&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    return 0;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//}&lt;/span&gt;\n}\nvoid print(Slist L)   &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length; i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;data&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; {\n    Slist La{};\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;La&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    Slist Lb{};\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Lb&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    Slist Lc{};\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Lc&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n    insert(&amp;amp;La, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    insert(&amp;amp;La, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;);\n    insert(&amp;amp;La, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;);\n    insert(&amp;amp;Lb, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n    insert(&amp;amp;Lb, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;);\n    insert(&amp;amp;Lb, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;);\n    insert(&amp;amp;Lb, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;);\n    insert(&amp;amp;Lb, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);\n    insert(&amp;amp;Lb, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;);\n\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;La:&amp;#34;&lt;/span&gt;);\n    print(La);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Lb:&amp;#34;&lt;/span&gt;);\n    print(Lb);\n\n    rank(La, Lb, &amp;amp;Lc);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Lc:&amp;#34;&lt;/span&gt;);\n    print(Lc);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["已知线性表La和Lb中的数据元素按值非递减有序排列，现要求La和Lb归并排序为Lc\n我想知道我这段rank中a和b表的元素为什么只传递了1和2给c，后续就不在执行了?", ["已知线性表La和Lb中的数据元素按值非递减有序排列，现要求La和Lb归并排序为Lc", "我想知道我这段rank中a和b表的元素为什么只传递了1和2给c，后续就不在执行了?", "代码如下", "#include <stdio.h>", "\n", "\n#define MAX 100\ntypedef int Status;\nint e;\ntypedef struct {\n    int data[MAX];\n    int ", "length", ";\n}Slist;\nint ", "insert", "(Slist ", "*L, int i, int e) {\n    if (i<1 || i>L->length + 1)\n        return 0;", "\n    for (int j = L->", "length", "; j >= i; j--)\n        L->data[j] = L->data[j-1];\n    L->data[i - 1] = e;\n    L->", "length", "++;\n    ", "return", " true;\n}\nStatus GetElem(Slist", "* L, int i,int& e){\n        if (i<0 || i>L->length)\n            return 0;", "\n    e = L->data[i];\n    ", "return", " e;\n}\nStatus locate(Slist L,int e) {\n    for (int i = 0; i < L.", "length", "; i++)\n        ", "if", " (L.data[i] == e)\n            ", "return", " i + 1;\n    ", "return", " 0;\n}\nint ", "length", "(Slist L){\n    ", "return", " L.", "length", ";\n}\nStatus  ", "rank", "(Slist a,Slist b ) {\n    int ea;\n    int eb;\n    Slist c{};\n    c.", "length", " = 0;\n    for (int k = 0; k < (a.", "length", "+b.", "length", "); k++) {\n        GetElem(", "&a", ", k, ea);\n        GetElem(", "&b", ", k, eb);\n        ", "if", " (ea <= eb);\n        ", "insert", "(", "&c", ", k+1, ea);\n        ", "insert", "(", "&c", ", k+2, eb);\n        ", "return", " 0;\n    }\n}\nint mai", "n", "() {\n    Slist La{};\n    La.", "length", " = 0;\n    Slist Lb{};\n    Slist Lc{};\n    Lb.", "length", " = 0;\n    Lc.", "length", " = 0;\n    ", "insert", "(", "&La", ", 1, 1);\n    ", "insert", "(", "&La", ", 2, 7);\n    ", "insert", "(", "&La", ", 3, 8);\n    ", "insert", "(", "&Lb", ", 1, 2);\n    ", "insert", "(", "&Lb", ", 2, 4);\n    ", "insert", "(", "&Lb", ", 3, 6);\n    ", "insert", "(", "&Lb", ", 4, 8);\n    ", "insert", "(", "&Lb", ", 5, 10);\n    ", "insert", "(", "&Lb", ", 6, 11);\n    ", "rank", "(La,Lb);\n}\n", "\n", "rank函数的运行结果：", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;sort 中最后for循环应该i&amp;lt;&amp;#61;t吧&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["关于归并排序求逆序对数", ["利用归并排序求逆序对数，但是结果是错误的，帮忙看看哪里出错了", "\n", "\n", "#include<stdio.h>", "\n", "int", " ", "index", " = ", "0", ";\n", "int", " main() {\n    ", "void", " Merge(", "int", " a[], ", "int", " a1[], ", "int", " s, ", "int", " m, ", "int", " t);\n    ", "void", " MergeSort(", "int", " a[], ", "int", " s, ", "int", " t);\n    ", "int", " a[", "6", "];\n    ", "for", " (", "int", " i = ", "0", "; i < ", "6", "; i++) {\n        scanf(\"%d\", &a[i]);\n    }\n    printf(\"\\n\");\n    MergeSort(a, ", "0", ", ", "5", ");\n    printf(\"%d\", ", "index", ");\n}\n", "void", " Merge(", "int", " a[], ", "int", " a1[], ", "int", " s, ", "int", " m, ", "int", " t) {\n    ", "int", " i = s;\n    ", "int", " j = m + ", "1", ";\n    ", "int", " k = s;\n    ", "while", " (i <= m && j <= t) {\n        ", "if", " (a[i] <= a[j]) {\n            a1[k] = a[i];\n            k++;\n            i++;\n        }\n        ", "else", " {\n            a1[k] = a[j];\n            k++;\n            j++;\n            ", "index", " += m - i + ", "1", ";\n        }\n    }\n    ", "while", " (i <= m) a1[k++] = a[i++];\n    ", "while", " (j <= t) a1[k++] = a[j++];\n}\n", "void", " MergeSort(", "int", " a[], ", "int", " s, ", "int", " t) {\n    ", "int", " a1[", "1000", "];\n    ", "int", " m;\n    ", "if", "(s < t) {\n        m = (s + t) / ", "2", ";\n        MergeSort(a, s, m);\n        MergeSort(a, m + ", "1", ", t);\n        Merge(a, a1, s, m, t);\n    }\n    ", "for", " (", "int", " i = s; i < t; i++) {\n        a[i] = a1[i];\n    }\n}\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不能&amp;lt;&amp;#61;L.end()的&amp;#xff0c;end()已经是结束符&amp;#xff0c;没有对象了。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;vector&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;cstdio&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;iostream&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;algorithm&amp;gt;\nusing namespace std;\nvoid mergesort(vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;&amp;amp;T,&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; left,&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; right)\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; mid&amp;#61;(right-left)/&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n    vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;L;\n    vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;R;\n    vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;ans;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;insert(&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;,&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;T&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;&amp;#43;left,&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;T&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;&amp;#43;left&amp;#43;mid);\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;R&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;insert(&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;R&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;,&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;T&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;&amp;#43;left&amp;#43;mid&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;T&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;&amp;#43;right);\n    vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;::iterator i&amp;#61;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;::iterator j&amp;#61;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;R&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i&amp;lt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;&amp;amp;&amp;amp;j&amp;lt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;R&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;)\n    {\n         &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((*i)&amp;lt;&amp;#61;(*j))\n         {\n              ans.push&lt;span class=\"hljs-constructor\"&gt;_back((&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;)&lt;/span&gt;);\n              i&amp;#43;&amp;#43;;\n         }\n         &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((*i)&amp;gt;&amp;#61;(*j))\n         {\n            ans.push&lt;span class=\"hljs-constructor\"&gt;_back((&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;j&lt;/span&gt;)&lt;/span&gt;);\n            j&amp;#43;&amp;#43;;    \n         }    \n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;lt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i&amp;lt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;)\n        {\n            ans.push&lt;span class=\"hljs-constructor\"&gt;_back((&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;)&lt;/span&gt;);\n            i&amp;#43;&amp;#43;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j&amp;lt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;R&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;)\n    {    \n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(j&amp;lt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;R&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;)\n        {\n            ans.push&lt;span class=\"hljs-constructor\"&gt;_back((&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;j&lt;/span&gt;)&lt;/span&gt;);\n            j&amp;#43;&amp;#43;;\n        }\n    }\n     vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;::iterator k&amp;#61;ans.&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(;k&amp;lt;ans.&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;k&amp;#43;&amp;#43;)\n    {\n        cout&amp;lt;&amp;lt;(*k)&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n    }\n}\n &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n {\n     &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n     vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;T;\n     &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;;i&amp;#43;&amp;#43;)\n     {\n         &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n;\n         cin&amp;gt;&amp;gt;n;\n         &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;T&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;push&lt;span class=\"hljs-constructor\"&gt;_back(&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;)&lt;/span&gt;;\n    }\n    mergesort(T,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n }\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["C++二路归并排序（非递归）", ["C++二路归并排序（非递归）", "输入10个数组成的局部有序的数组，对所有数据进行二路归并排序再输出", "输入：0 2 4 7 9 1 3 4 5 0", "输出：0 0 1 2 3 4 4 5 7 9", "错误输出：0123445-1700（DEVC++）", "代码如下：", "\n", "\n```c++\n#", "include", "<vector>\n#", "include", "<cstdio>\n#", "include", "<iostream>\n#", "include", "<algorithm>\nusing namespace std;\nvoid mergesort(vector<", "int", ">&T,", "int", " left,", "int", " right)\n{\n    ", "int", " mid=(right-left)/", "2", ";\n    vector<", "int", ">L;\n    vector<", "int", ">R;\n    vector<", "int", ">ans;\n    ", "L", ".", "insert(", "L", ".", "begin", "()", ",", "T", ".", "begin", "()", "+left,", "T", ".", "begin", "()", "+left+mid);\n    ", "R", ".", "insert(", "R", ".", "begin", "()", ",", "T", ".", "begin", "()", "+left+mid+", "1", ",", "T", ".", "begin", "()", "+right);\n    vector<", "int", ">::iterator i=", "L", ".", "begin", "()", ";\n    vector<", "int", ">::iterator j=", "R", ".", "begin", "()", ";\n    ", "while", "(i<=", "L", ".", "end", "()", "&&j<=", "R", ".", "end", "()", ")\n    {\n     ", "if", "((*i)<=(*j))\n     {\n          ans.push", "_back((", "*", "i", ")", ");\n          i++;\n     }\n     ", "if", "((*i)>=(*j))\n     {\n        ans.push", "_back((", "*", "j", ")", ");\n        j++;    \n     }    \n    }\n    ", "if", "(i<=", "L", ".", "end", "()", ")\n    {\n        ", "while", "(i<=", "L", ".", "end", "()", ")\n        {\n            ans.push", "_back((", "*", "i", ")", ");\n            i++;\n        }\n    }\n    ", "else", " ", "if", "(j<=", "R", ".", "end", "()", ")\n    {    \n        ", "while", "(j<=", "R", ".", "end", "()", ")\n        {\n            ans.push", "_back((", "*", "j", ")", ");\n            j++;\n        }\n    }\n     vector<", "int", ">::iterator k=ans.", "begin", "()", ";\n    ", "for", "(;k<=ans.", "end", "()", ";k++)\n    {\n        cout<<(*k);\n    }\n}\n ", "int", " main", "()", "\n {\n     ", "int", " i;\n     vector<", "int", ">T;\n     ", "for", "(i=", "0", ";i<=", "9", ";i++)\n     {\n         ", "int", " n;\n         cin>>n;\n         ", "T", ".", "push", "_back(", "n", ")", ";\n    }\n    mergesort(T,", "0", ",", "9", ");\n    return ", "0", ";\n }\n\n", "\n", "```"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你别发图片 发代码吧&amp;#xff0c;发图片分成几张 眼睛都看花了&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["为什么C语言归并排序失败了", ["如下是VS2022的C语言代码", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<math.h>", "\n", "#", "define", " N 10", "\n", "int", " ", "main", "(", "void", ")", "\n", "{\n    ", "int", " I, alx, alxEnd, blx, blxEnd, clx, glx, size;\n    _Bool CopyA, CopyB;\n    ", "int", " arr[N];\n    ", "int", " temp[N] = { ", "0", " };\n    ", "printf", "(", "\"Define a random number group:\\n\"", ");\n    ", "for", " (I = ", "0", "; I < N; ++I)      ", "/*给数组赋值随机变量*/", "\n    {\n        arr[I] = (", "int", ")(", "rand", "() % ", "100", ");\n        ", "printf", "(", "\"%d \"", ", arr[I]);\n    }\n    ", "printf", "(", "\"\\n\"", ");\n    ", "for", " (size = ", "1", "; size < N; size += size);   ", "//归并排序", "\n    {\n        ", "for", " (glx = ", "0", "; glx < N; glx += ", "2", " * size)\n        {\n            alx = glx;\n            alxEnd = (N < (alx + size)) ? N : (alx + size);\n            blx = glx + size;\n            blxEnd = (N < (blx + size)) ? N : (blx + size);\n            clx = glx;\n            ", "while", " ((alx < alxEnd) || (blx < blxEnd))\n            {\n                CopyA = ", "0", ";\n                CopyB = ", "0", ";\n                ", "if", " ((alx < alxEnd) && (blx < blxEnd))\n                {\n                    CopyA = (arr[alx] < arr[blx]);\n                    CopyB = !CopyA;\n                }\n                ", "else", "\n                {\n                    ", "if", " (alx >= alxEnd)\n                    {\n                        CopyB = ", "1", ";\n                    }\n                    ", "else", "\n                    {\n                        CopyA = ", "1", ";\n                    }\n                }\n                ", "if", " (CopyA == ", "1", ")\n                {\n                    temp[clx] = arr[alx];\n                    alx++;\n                }\n                ", "if", " (CopyB == ", "1", ")\n                {\n                    temp[clx] = arr[blx];\n                    blx++;\n                }\n                clx++;\n            }\n        }\n        ", "for", " (I = ", "0", "; I < N; ++I)\n        {\n            arr[I] = temp[I];\n        }\n    }\n    ", "printf", "(", "\"Here is the group that has been arranged:\\n\"", ");\n    ", "for", " (I = ", "0", "; I < N; ++I)\n    {\n        ", "printf", "(", "\"%d \"", ", arr[I]);\n    }\n    ", "return", " ", "0", ";\n}\n\n", "\n", "\n", "我用X-program就成功了", "\n", "\n", "这是为什么呀？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;sort是先快排1.5*log2(n)次&amp;#xff0c;若长度大于32&amp;#xff0c;则改用堆排。C&amp;#43;&amp;#43;有个partial_sort堆排&amp;#xff0c;和他的sort用的时间差不多一样&amp;#xff0c;可以确定就是用的堆排&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["对1000000个随机数的数组进行排序，测试c++库里的sort()用时比自己写的归并排序用时长，是出了什么问题吗？", ["我想要比较sort和归并对同一个数组排序的用时长短，觉得应该sort（）比自己写的快，但实验结果却相反。1000000左右的排序似乎其他人测试的sort用时大概在0.15左右，但我运行的却是0.5以上。是代码有问题还是运行出了问题呢？", "\n", "#", "include", " <iostream>\n#", "include", "<algorithm>\n#", "include", " <random>\n#", "include", "<ctime>\nusing namespace std;\ntemplate<", "class", " T1>\nvoid ", "Merge(T1 ", "a", "[], ", "int", " ", "l", ", ", "int", " ", "m", ", ", "int", " ", "r", ", T1 ", "c", "[])", "\n{\n    ", "//已知a[l]<=…<=a[m];a[m+1]<=a[r]", "\n    ", "//归并到c[l]~c[r]，并复制到a[l]~a[r]", "\n    ", "int", " i = l;\n    ", "int", " j = m + ", "1", ";\n    ", "int", " k = l;\n    ", "while", " (i <= m", " && ", "j <= r)\n    {\n        ", "if", " (a", "[", "i", "]", " < a", "[", "j", "]", ")\n        {\n            c", "[", "k", "]", " = a", "[", "i", "]", ";\n            i++;\n            k++;\n        }\n        ", "else", "\n        {\n            c", "[", "k", "++", "]", " = a", "[", "j", "++", "]", ";\n        }\n    }\n    ", "while", " (i <= m)\n    {\n        c", "[", "k", "++", "]", " = a", "[", "i", "++", "]", ";\n    }\n    ", "while", " (j <= r)\n    {\n        c", "[", "k", "++", "]", " = a", "[", "j", "++", "]", ";\n    }\n    k = l;\n    ", "while", " (k <= r)\n    {\n        a", "[", "k", "]", " = c", "[", "k", "]", ";\n        k++;\n    }\n}\ntemplate<", "class", " T11>\nvoid ", "MergeSort(T11 ", "a", "[], ", "int", " ", "l", ", ", "int", " ", "r", ", T11 ", "c", "[])", "\n{\n    ", "//a[l]~a[r]进行排序", "\n    ", "if", " (l >= r)\n    {\n        return;\n    }\n    ", "int", " m = (l + r)", " / ", "2", ";\n    ", "MergeSort(", "a", ", ", "l", ", ", "m", ", ", "c", ")", ";\n    ", "MergeSort(", "a", ", ", "m", " + 1, ", "r", ", ", "c", ")", ";\n    ", "Merge(", "a", ", ", "l", ", ", "m", ", ", "r", ", ", "c", ")", ";\n}\n\nvoid main", "()", "\n{\n    ", "int", " n;\n    n = ", "1000000", ";\n    ", "float", "* a = ", "new", " ", "float", "[", "n", "]", ";\n    ", "float", "* b = ", "new", " ", "float", "[", "n", "]", ";\n    ", "float", "* c = ", "new", " ", "float", "[", "n", "]", ";\n    ", "for", " (", "int", " i = ", "0", "; i < n; i++)\n    {\n        ", "//cout << \"随机生成a[\" << i << \"]的值为\";", "\n        a", "[", "i", "]", " = rand", "()", " % ", "100000000", ";\n        b", "[", "i", "]", " = a", "[", "i", "]", ";\n        ", "//cout << a[i] << endl;", "\n    }\n\n    clock_t start1, end1, start2, end2;\n    start1 = clock", "()", ";\n    ", "MergeSort(", "a", ", 0, 999999, ", "c", ")", ";\n    end1 = clock", "()", ";\n    cout << start1 << ", "\" \"", " << end1;\n    cout << ", "\"归并排序用时为\"", " <<(double)( end1 - start1)/CLOCKS_PER_SEC << endl;\n\n    start2 = clock", "()", ";\n    sort(b, b + ", "1000000", ");\n    end2 = clock", "()", ";\n    cout << start2 << ", "\" \"", " << end2;;\n    cout << ", "\"sort函数用时为\"", " << (double)(end2 - start2) /CLOCKS_PER_SEC << endl;\n\n    ", "for", " (", "int", " i = ", "0", "; i < ", "1000000", "; i++)\n    {\n        ", "if", " (a", "[", "i", "]", " != b", "[", "i", "]", ")\n            cout << ", "\"error!\"", " << endl;\n    }\n\n    delete", "[]", " a;\n    delete", "[]", " b;\n    delete", "[]", " c;\n\n}\n", "\n", "代码大概就是这样，通过前两个函数进行归并排序，并用了模板类。之后用rand（）随机产生随机数。a数组和b数组完全一样。对a数组进行归并排序，对b数组进行sort排序。c数组是为了辅助归并排序的数组。之后用clock（）进行计时，输出得到用时。最后那个循环是为了检测是否归并排序出错。", "\n", "运行结果及报错内容", "\n", "\n", "我的运行结果大概是这样的，归并0.15左右，而sort0.5以上。", "\n", "我的解答思路和尝试过的方法", "\n", "我尝试用不同的函数获取用时，timeGetTime（），GetTickCourt（）。但结果都是这样的", "\n", "我想要达到的结果", "\n", "我想要得到sort（）和归并到底谁更快，以及为什么我的实验结果sort（）运行有0.5s以上这么久？", "\n", "求高人指点！"]], "Tag": "算法设计"}
{"Answer": "你的递归函数跑到main函数里面去了。还在用记事本编辑java呢？ :lol:", "Konwledge_Point": "归并排序", "Question": ["初学，请帮小弟. 运行结果已经写出帮看一下原因。万分感谢", ["import java.util.Scanner;", "\n\n", "public class UseRecursion", "\n{", "\n    public static void main(String[] args)", "\n    {", "\n        Scanner scanner =new Scanner(System.in);", "\n\n", "    System.out.println(\"输入两数：\");\n    System.out.print(\"m=\");\n    int m = scanner.nextInt();\n\n    System.out.print(\"n=\");\n    int n = scanner.nextInt();\n\n    System.out.println(\"GCD：\"+ gcd(m, n));\n\nprivate static int gcd(int m, int n)//辗转相除法球最大公因式\n{\n     if(n == 0)\n        return m;\n     else\n        return gcd(n, m % n);\n    }\n}\n", "\n\n", "}", "\n     /*等价于下面的循环调用：", "\n     private static int gcd(int m,int n)", "\n     {", "\n      int r;", "\n      while(n!=0)", "\n      {", "\n        r = m % n;", "\n        m=n;", "\n        n=r;", "\n      }", "\n      return m;", "\n     }", "\n     */", "\n\n", "结果：", "\nUseRecursion.java:24: 非法的表达式开始", "\n    private static int gcd(int m, int n)//辗转相除法球最大公因式", "\n    ^", "\nUseRecursion.java:24: 非法的表达式开始", "\n    private static int gcd(int m, int n)//辗转相除法球最大公因式", "\n            ^", "\nUseRecursion.java:24: 需要 ';'", "\n    private static int gcd(int m, int n)//辗转相除法球最大公因式", "\n                  ^", "\nUseRecursion.java:24: 需要 \".class\"", "\n    private static int gcd(int m, int n)//辗转相除法球最大公因式", "\n                               ^", "\nUseRecursion.java:24: 需要 ';'", "\n    private static int gcd(int m, int n)//辗转相除法球最大公因式", "\n                                ^", "\nUseRecursion.java:24: 需要 ';'", "\n    private static int gcd(int m, int n)//辗转相除法球最大公因式", "\n                                       ^"]], "Tag": "算法设计"}
{"Answer": "```\r\n int lo, int mid, int hi\r\n分别是待归并的两部分数组的起始位置，第一个是lo~mid，第二个是mid+1~hi\r\n\r\n        int i = lo;\r\n        int j = mid + 1;\r\n开始的时候，i和j分别指向两部分数组的开始位置\r\n\r\nfor (int k = lo; k &lt; hi + 1; k++) {\r\n            b[k] = a[k];\r\n        }\r\n首先复制一份拷贝到b里面，而原来的a数组的相应位置则保存排序后的结果\r\n\r\nfor (int k = lo; k &lt; hi + 1; k++) {\r\n\r\n            if (i &gt; mid) { //i &gt; mid说明第一个数组中的数据都已经插入到a里面了，而第二个数组是有序的，所以照着复制就可以\r\n                a[k] = b[j++];\r\n            } else if (j &gt; hi) { //j&gt;h说明第二个数组已经都插入进去了，而第一个数组是有序的，所以照着复制\r\n                a[k] = b[i++];\r\n            } else if (less(b[i], b[j])) { //第一个数组的当前元素比第二个小，那么先插入第一个数组的（插入后i往后移动一个），第二个不动。\r\n                a[k] = b[i++];\r\n            } else { //第一个数组比第二个大，那么先插入第二个的，第一个不动\r\n                a[k] = b[j++];\r\n            }\r\n        }\r\n\r\n```", "Konwledge_Point": "归并排序", "Question": ["关于java归并排序的问题", ["下面是代码 我的问题是 Merge方法里面的那四种判断是根据什么来的？j>hi是怎么回事，", "\n\n", " public class Merge {\n\n    private static Comparable[] b;\n\n    public static boolean less(Comparable v, Comparable w) {\n        return v.compareTo(w) < 0;\n    }\n\n    public static void merge(Comparable[] a, int lo, int mid, int hi) {\n        int i = lo;\n        int j = mid + 1;\n\n        for (int k = lo; k < hi + 1; k++) {\n            b[k] = a[k];\n        }\n        for (int k = lo; k < hi + 1; k++) {\n\n            if (i > mid) {\n                a[k] = b[j++];\n            } else if (j > hi) {\n                a[k] = b[i++];\n            } else if (less(b[i], b[j])) {\n                a[k] = b[i++];\n            } else {\n                a[k] = b[j++];\n            }\n        }\n    }\n\n    /**\n     * 自顶向下和自底向上\n     *\n     * @param a\n     */\n    public static void sort(Comparable[] a) {\n        b = new Comparable[a.length];\n        // 自顶向下\n        sort(a, 0, a.length - 1);\n\n        //自底向上\n//        for (int i = 1; i < a.length; i++) {\n//            for (int lo = 0; lo < a.length - i; lo += i + i) {\n//                merge(a, lo, lo + i - 1, Math.min(lo + i + i - 1, a.length - 1));\n//            }\n//        }\n    }\n\n    public static void sort(Comparable[] a, int lo, int hi) {\n        if (hi <= lo) {\n            return;\n        }\n        int mid = lo + (hi - lo) / 2;\n        sort(a, lo, mid);\n        sort(a, mid + 1, hi);\n        merge(a, lo, mid, hi);\n    }\n\n    public static void show(Comparable[] a) {\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i] + \" \");\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        Integer[] a = new Integer[10];\n        for (int i = 0; i < 10; i++) {\n            a[i] = (int) (Math.random() * 10 + 1);\n        }\n        show(a);\n        sort(a);\n        show(a);\n    }\n\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的merge代码没有考虑left和right数组元素数目不等的情况。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;iostream&amp;gt;\nusing namespace std;\n\nvoid &lt;span class=\"hljs-constructor\"&gt;Merge(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;A, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;q&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n1 &amp;#61; q - p &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n2 &amp;#61; r - q;\n\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; *L &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;n1&lt;/span&gt;]&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; *R &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;n2&lt;/span&gt;]&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n1; i&amp;#43;&amp;#43;)\n        L&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;p&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n2; j&amp;#43;&amp;#43;)\n        R&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt; &amp;#61; A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;q&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;;\n\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k &amp;#61; p;\n\n    &lt;span class=\"hljs-comment\"&gt;// Merge L[] and R[] into A[]&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt; n1&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;j &amp;lt; n2)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (L&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;lt;&amp;#61; R&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;)\n            A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; L&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; R&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;// Copy the remaining element of L[], if there are any&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt; n1)\n        A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; L&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;// Copy the remaining element of R[], if there are any&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (j &amp;lt; n2)\n        A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; R&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n\n    delete&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt; L;\n    delete&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt; R;\n}\n\nvoid &lt;span class=\"hljs-constructor\"&gt;Merge_Sort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;A, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;low&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;high&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; mid;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (low &amp;lt; high)\n    {\n        mid &amp;#61; (low &amp;#43; high)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        &lt;span class=\"hljs-constructor\"&gt;Merge_Sort(A, &lt;span class=\"hljs-params\"&gt;low&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-constructor\"&gt;Merge_Sort(A, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt; &amp;#43; 1, &lt;span class=\"hljs-params\"&gt;high&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-constructor\"&gt;Merge(A, &lt;span class=\"hljs-params\"&gt;low&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;high&lt;/span&gt;)&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]&lt;/span&gt; &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;};\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; low &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; high &amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; mid &amp;#61; (low &amp;#43; high)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;Merge(A, &lt;span class=\"hljs-params\"&gt;low&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;high&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;Merge_Sort(A, 0, 9)&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; m &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; m &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; m&amp;#43;&amp;#43;)\n    {\n        cout &amp;lt;&amp;lt; A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;m&lt;/span&gt;]&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n    }\n\n    cout &amp;lt;&amp;lt; endl;\n\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["<算法导论第三版>的伪代码写的C++的归并排序", ["问题遇到的现象和发生背景", "\n", "这是一个归并排序,是根据<算法导论第三版> 的伪代码写的,可是最终得到的结果总是错误的,不知道怎么回事总会访问到特定的数组外但是也没有发生编译过程的错误.", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n\n\n", "我想要达到的结果", "\n", "#", "include", "<iostream>\nusing namespace std;\n\nvoid ", "Merge(", "int", " ", "*", "A,", "int", " ", "p", ",", "int", " ", "q", ",", "int", " ", "r", ")", "\n{\n    ", "int", " n1 = q - p;\n    ", "int", " n2 = r - q;\n    \n    cout << ", "\"q-p=\"", " << q - p << endl;\n    ", "int", "* L = ", "new", " ", "int", "[", "n1", "+", "1", "]", ";\n    ", "int", "* R = ", "new", " ", "int", "[", "n2", "]", ";\n\n    ", "for", " (", "int", " i = ", "0", "; i <= n1; i++)\n    {\n        L", "[", "i", "]", " = A", "[", "p", " + ", "i", "]", ";\n        \n    }\n    \n    ", "for", " (", "int", " j = ", "0", "; j < n2; j++)\n    {\n        R", "[", "j", "]", " = A", "[", "q", " + ", "j", " + ", "1", "]", ";\n    }\n    ", "int", " i = ", "0", ";\n    ", "int", " j = ", "0", ";\n\n    ", "for", " (", "int", " k = p; k < r; k++)\n    {\n        ", "if", " (L", "[", "i", "]", " <= R", "[", "j", "]", ")\n        {\n            A", "[", "k", "]", " = L", "[", "i", "]", ";\n            i++;\n        }\n        ", "else", "\n        {\n                A", "[", "k", "]", " = R", "[", "j", "]", ";\n                j++;\n        }\n    }\n\n}\n\n\nvoid ", "Merge_Sort(", "int", "*", " A, ", "int", " ", "low", ", ", "int", " ", "high", ")", "\n{\n    ", "int", " mid;\n    ", "if", " (low < high)\n    {\n        mid = ((low + high)", " / ", "2", ");\n        ", "Merge_Sort(A, ", "low", ", ", "mid", ")", ";\n        ", "Merge_Sort(A, ", "mid", " + 1, ", "high", ")", ";\n        ", "Merge(A, ", "low", ", ", "mid", ", ", "high", ")", ";\n    }\n\n}\n\n\n", "int", " main", "()", "\n{\n    ", "int", " A", "[", "10", "]", " = {", "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3", ",", "2", ",", "1", "};\n    ", "int", " low = ", "0", ";\n    ", "int", " high = ", "9", ";\n    ", "int", " mid = (low + high)", " / ", "2", ";\n    ", "Merge(A, ", "low", ", ", "mid", ", ", "high", ")", ";\n    ", "Merge_Sort(A, 0, 9)", ";\n\n    ", "for", " (", "int", " m = ", "0", "; m < ", "10", "; m++)\n    {\n        cout << A", "[", "m", "]", " << ", "\" \"", ";\n    }\n\n    cout << endl;\n    \n    return ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可参考博文&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/qq_42589613/article/details/110431662\" id=\"textarea_1669367169568_1669367386549_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/qq_42589613/article/details/110431662&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n# -*- coding: utf-&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt; -*-\ndef merge(&lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt;):\n    # 合并两个有序列表\n    &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &amp;#61; []\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt;) &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt;) &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;lt; &lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]:\n            &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;pop&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;))\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;pop&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;))\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;extend&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;extend&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;\n\ndef mergeSort(arr):\n    # 归并函数\n    n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(arr)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n &amp;lt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; arr\n    middle &amp;#61; n // &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt; &amp;#61; arr[:middle] # 取序列左边部分\n    &lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt; &amp;#61; arr[middle:]# 取序列右边部分\n    # 对左边部分序列递归调用归并函数\n    left_sort &amp;#61; mergeSort(&lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt;)\n    # 对右边部分序列递归调用归并函数\n    right_sort &amp;#61; mergeSort(&lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt;)\n    #\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; merge(left_sort, right_sort)\narr &amp;#61; [&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;]\n&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#61; mergeSort(arr)\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["python实现归并排序时，输出“[0, 0, 0, 0, 0, 0, 0, 0]”", ["问题遇到的现象和发生背景", "\n", "python实现归并排序时 ，单独调用merge可以输出正确，但是sort、merge一起调用输出结果 ", "\n", "[0, 0, 0, 0, 0, 0, 0, 0]", "\n", "自学数据结构到归并排序，不知道哪里有错误", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "import", " sys\nsys.setrecursionlimit(", "100000", ") ", "#例如这里设置为十万", "\n\n", "def", " ", "sort", "(", "arr,low,high", "):\n    ", "if", " low < high :\n        mid = ", "int", "((low+high)/", "2", ")\n        sort(arr,low,mid)\n        sort(arr,mid+", "1", ",high)\n        merge(arr,low,mid,high)\n    ", "return", " arr\n\n\n", "def", " ", "merge", "(", "arr,low,mid,high", "):\n    temp1 = [", "0", "]*", "len", "(arr)\n    \n    x = low\n    y = mid + ", "1", "\n    i = ", "0", "\n    ", "while", " x<mid ", "and", " y<high:\n        ", "if", " arr[x] <= arr[y]:\n            ", "'''print(x)'''", "\n            temp1[i] = arr[x]\n            i += ", "1", "\n            x += ", "1", "\n        ", "else", ":\n            ", "''' print(y)'''", "\n            temp1[i] = arr[y]\n            i += ", "1", "\n            y += ", "1", "\n    ", "while", " y<=high:\n        temp1[i] = arr[y]\n        i += ", "1", "\n        y += ", "1", "\n\n    ", "while", " x<=mid:\n        temp1[i] = arr[x]\n        i += ", "1", "\n        x += ", "1", "\n    a = ", "0", "\n    b = ", "0", "\n    ", "while", " a < ", "len", "(arr):\n        arr[a] = temp1[b]\n        a += ", "1", "\n        b += ", "1", "\n    ", "return", " arr\n        \n\n\narr = [", "7", ",", "1", ",", "4", ",", "9", ",", "3", ",", "5", ",", "2", ",", "8", "]\nlow = ", "0", "\nhigh = ", "len", "(arr)-", "1", "\nmid =", "int", "((low+high)/", "2", ")\n\n", "print", " (sort(arr,low,high))\n\n", "\n", "运行结果及报错内容", "\n", "运行结果：[0, 0, 0, 0, 0, 0, 0, 0]", "\n", "我的解答思路和尝试过的方法", "\n", "\n", "def", " ", "merge", "(", "arr,low,mid,high", "):\n    temp1 = [", "0", "]*", "len", "(arr)\n    \n    x = low\n    y = mid + ", "1", "\n    i = ", "0", "\n    ", "while", " x<mid ", "and", " y<high:\n        ", "if", " arr[x] <= arr[y]:\n            ", "'''print(x)'''", "\n            temp1[i] = arr[x]\n            i += ", "1", "\n            x += ", "1", "\n        ", "else", ":\n            ", "''' print(y)'''", "\n            temp1[i] = arr[y]\n            i += ", "1", "\n            y += ", "1", "\n    ", "while", " y<=high:\n        temp1[i] = arr[y]\n        i += ", "1", "\n        y += ", "1", "\n\n    ", "while", " x<=mid:\n        temp1[i] = arr[x]\n        i += ", "1", "\n        x += ", "1", "\n    a = ", "0", "\n    b = ", "0", "\n    ", "while", " a < ", "len", "(arr):\n        arr[a] = temp1[b]\n        a += ", "1", "\n        b += ", "1", "\n    ", "return", " arr\n\narr = [", "1", ",", "4", ",", "7", ",", "9", ",", "2", ",", "3", ",", "5", ",", "8", "]\nlow = ", "0", "\nhigh = ", "len", "(arr)-", "1", "\nmid =", "int", "((low+high)/", "2", ")\n\n", "print", " (merge(arr,low,mid,high))\n", "\n", "运行结果及报错内容", "\n", "运行结果：[1, 2, 3, 4, 5, 8, 7, 9]"]], "Tag": "算法设计"}
{"Answer": "你的代码中merge函数的while循环里，这个判断Right数组的下标错了，应该是Right[j]\r\n```\r\n if (Left[i] &lt; Right[i])\r\n        {\r\n            arr[k] = Left[i];\r\n            i++;\r\n            k++;\r\n        }\r\n```", "Konwledge_Point": "归并排序", "Question": ["求问归并排序代码哪里有问题，请大家指教，谢谢！", ["代码如下所示：", "\n测试后结果排序不正确，不知哪里写错了，请大家指教，谢谢", "\n\n", "#include <stdio.h>\n#include <malloc.h>\n#include <stdlib.h>\n\nvoid mergeSort(int arr[], int L, int R);\n\nint main( )\n{\n    int arr[6] = { 12,24,22,14,18,91 };\n    mergeSort(arr, 0, 5);\n    for (int i = 0;i < 6;i++)\n    {\n        printf_s(\"%d\\n\", arr[i]);\n    }\n}\n//L和R都是index，注意\nvoid merge(int arr[], int L, int M, int R)\n{\n    int Left_Size = M - L;\n    int Right_Size = R - M + 1;\n    //int Left[Left_Size];\n    int* Left = (int*)malloc(sizeof(int) * Left_Size);\n    if (Left == nullptr) { exit(-1); }\n    int* Right = (int*)malloc(sizeof(int) * Right_Size);\n    if (Right == nullptr) { exit(-1); }\n    //int i; \n    for (int i = L;i < M;i++)\n    {\n        Left[i - L] = arr[i];\n    }\n    for (int i = M;i <= R;i++)\n    {\n        Right[i-M] = arr[i];\n    }\n\n    int i = 0,j = 0,k = L;\n    while (i < Left_Size && j < Right_Size)\n    {\n        if (Left[i] < Right[i])\n        {\n            arr[k] = Left[i];\n            i++;\n            k++;\n        }\n        else\n        {\n            arr[k] = Right[j];\n            j++;\n            k++;\n        }\n    }\n    while (i < Left_Size)\n    {\n        arr[k] = Left[i];\n        i++;\n        k++;\n    }\n    while (j < Right_Size)\n    {\n        arr[k] = Right[j];\n        j++;\n        k++;\n    }\n\n}\n//L和R都是index，注意\nvoid mergeSort(int arr[], int L,int R)\n{\n    if (L == R)\n    {\n        return;\n    }\n    else\n    {\n    int M = (L + R) / 2;\n    mergeSort(arr, L, M);\n    mergeSort(arr, M + 1, R);\n    //这里第二个参数表示的是第二个数组第一个开头元素，所以我们要传入M+1\n    merge(arr, L, M+1, R);\n    }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我测试了下&amp;#xff0c;可以正常排序的&amp;#xff0c;&lt;code class=\"language-javascript\"&gt;mergeSort(a, 0, a.length);&lt;/code&gt;你是这样调用的吗&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["归并排序法数组中的最后一个数字总是不能进入排序是怎么回事", ["代码如下", "\n", "public", " ", "void", " mergeSort(", "int", " f[], ", "int", " l, ", "int", " u) {\n        // the algorithm ", "of", " merge sorting\n        ", "if", " (l + ", "1", " < u) {\n            ", "int", " mid = (l + u) / ", "2", ";\n            mergeSort(f, l, mid);\n            mergeSort(f, mid, u);\n            merge(f, l, mid, u);\n        }\n    }\n", "public", " ", "void", " merge(", "int", " arr[], ", "int", " l, ", "int", " m, ", "int", " r) {\n        // the algorithm ", "of", " merging\n        ", "int", "[] ", "temp", " = ", "new", " ", "int", "[r - l + ", "1", "];\n        ", "int", " i = ", "0", ", j = ", "0", ", k = ", "0", ";\n        // ", "declare", " variable ", "for", " counting\n\n        ", "if", " (r - l == ", "1", ") {\n            ", "int", " min = Math.min(arr[l], arr[r]);\n            ", "int", " max = Math.max(arr[l], arr[r]);\n            arr[l] = min;\n            arr[r] = max;\n        }\n        // the situation that there are ", "only", " two numbers\n\n        ", "else", " {\n            ", "while", " (l + i < m && m + j < r) {\n                ", "if", " (arr[l + i] < arr[m + j]) {\n                    ", "temp", "[k] = arr[l + i];\n                    k += ", "1", ";\n                    i += ", "1", ";\n                } ", "else", " {\n                    ", "temp", "[k] = arr[m + j];\n                    k += ", "1", ";\n                    j += ", "1", ";\n                }\n            }\n            ", "while", " (l + i < m) {\n                ", "temp", "[k] = arr[l + i];\n                k += ", "1", ";\n                i += ", "1", ";\n            }\n            ", "while", " (m + j < r) {\n                ", "temp", "[k] = arr[m + j];\n                k += ", "1", ";\n                j += ", "1", ";\n            }\n            ", "for", " (", "int", " n = ", "0", "; n < ", "temp", ".length - ", "1", "; n++) {\n                arr[l + n] = ", "temp", "[n];\n            }\n        }\n    }\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;每个记录是一个区间&amp;#xff0c;可以理解成一个块&amp;#xff0c;比较顺序如图中虚线隔开的部分。不知道这样你能不能理解题目代码中两城记录什么时候&amp;#43;&amp;#43;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/583169711066128.jpg\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["归并排序问题，信息技术", ["这个题目怎么想才能思路清晰啊😭感觉看了很久还是觉得有点乱，主要的思路是怎么样的？", "\n", "\n\n", " ", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;import java.util.Arrays;\npublic class HelloWorld {\npublic void merge_sort(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;q[]&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; l, &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; r){\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (l &amp;#61;&amp;#61; r) {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; mid &amp;#61; (l&amp;#43;r)&amp;gt;&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    merge_sort(&lt;span class=\"hljs-keyword\"&gt;q&lt;/span&gt;, l, mid);\n    merge_sort(&lt;span class=\"hljs-keyword\"&gt;q&lt;/span&gt;, mid &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, r);\n\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; temp[] &amp;#61; new &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;[r-l&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i &amp;#61; l, j &amp;#61; mid &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt;&amp;#61; mid &amp;amp;&amp;amp; j &amp;lt;&amp;#61; r) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;q[i]&lt;/span&gt; &amp;lt; &lt;span class=\"hljs-string\"&gt;q[j]&lt;/span&gt;) {\n            temp[k&amp;#43;&amp;#43;] &amp;#61; &lt;span class=\"hljs-string\"&gt;q[i&amp;#43;&amp;#43;]&lt;/span&gt;;\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            temp[k&amp;#43;&amp;#43;] &amp;#61; &lt;span class=\"hljs-string\"&gt;q[j&amp;#43;&amp;#43;]&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt;&amp;#61; mid) {\n        temp[k&amp;#43;&amp;#43;] &amp;#61; &lt;span class=\"hljs-string\"&gt;q[i&amp;#43;&amp;#43;]&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (j &amp;lt;&amp;#61; r) {\n        temp[k&amp;#43;&amp;#43;] &amp;#61; &lt;span class=\"hljs-string\"&gt;q[j&amp;#43;&amp;#43;]&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; p &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; p &amp;lt; temp.length; p&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-string\"&gt;q[l&amp;#43;p]&lt;/span&gt; &amp;#61; temp[p];\n    }\n}\n\npublic static void main(String[] args) {\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; []qwe &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;};\n    HelloWorld demo &amp;#61; new HelloWorld();\n    demo.merge_sort(qwe, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, qwe.length-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    System.out.println(Arrays.toString(qwe));\n}\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在线测试通过&amp;#xff08;因为在线平台的限制&amp;#xff0c;我把主类类名略微修改了。&amp;#xff09;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/906319856086119.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["Java归并排序结果不对应", ["归并排序出现错误，", "\n", "public class demo1 {\n    static ", "int", "[] a=new ", "int", "[", "11000", "];\n    public void merge_sort(", "int", " ", "q[]", ", ", "int", " l, ", "int", " r){\n        ", "if", " (l == r) ", "return", ";", "//", "若数组中只有一个或没有数，就直接返回了\n        ", "int", " mid = (l+r)>>", "1", ";\n        merge_sort(", "q", ", l, mid);\n        merge_sort(", "q", ",mid +", "1", " ,r);\n        ", "int", " k = l, i = l, j = mid + ", "1", ";\n        ", "int", " temp[] = new ", "int", "[q.length];\n        ", "while", " (i<=mid && j<=r){\n            ", "if", " (", "q[i]", " < ", "q[j]", ") temp[k++] = ", "q[i++]", ";\n            ", "else", " temp[k++] = ", "q[j++]", ";\n        }\n        ", "while", " (i <= mid) temp[k++] = ", "q[i++]", ";\n        ", "while", " (j <= r) temp[k++] = ", "q[j++]", ";\n        ", "for", " (i = ", "1", ", j = ", "0", "; i <= r; i++, j++) ", "q[i]", " = temp[j];\n    }\n\n    public static void main(String[] args) {\n        ", "int", " []qwe = {", "3", ",", "2", ",", "1", ",", "1", "};\n        demo1 demo = new demo1();\n        demo.merge_sort(qwe,", "0", ", qwe.length-", "1", ");\n        System.out.println(Arrays.toString(qwe));\n    }\n\n}\n", "\n", "运行结果却是：", "\n", "求解惑"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的代码实现了归并排序的思想&amp;#xff0c;但是有一个小错误。在while循环结束后&amp;#xff0c;你应该把result的赋值语句放在循环外面&amp;#xff0c;否则会导致每次只返回一个元素。我修改了一下&amp;#xff0c;你可以参考一下。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;shu &lt;/span&gt;&amp;#61; [&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;]\ndef test(&lt;span class=\"hljs-keyword\"&gt;shu):\n&lt;/span&gt;    if len(&lt;span class=\"hljs-keyword\"&gt;shu) &lt;/span&gt;&amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        return &lt;span class=\"hljs-keyword\"&gt;shu\n&lt;/span&gt;    mid &amp;#61; int(len(&lt;span class=\"hljs-keyword\"&gt;shu)/2)\n&lt;/span&gt;    &lt;span class=\"hljs-keyword\"&gt;llist, &lt;/span&gt;rlist &amp;#61; test(&lt;span class=\"hljs-keyword\"&gt;shu[:mid]), &lt;/span&gt;test(&lt;span class=\"hljs-keyword\"&gt;shu[mid:])\n&lt;/span&gt;    result &amp;#61; []\n    i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    while i &amp;lt; len(&lt;span class=\"hljs-keyword\"&gt;llist) &lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;and &lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;lt; len(rlist):\n        if rlist[&lt;span class=\"hljs-keyword\"&gt;j] &lt;/span&gt;&amp;lt; &lt;span class=\"hljs-keyword\"&gt;llist[i]:\n&lt;/span&gt;            result.append(rlist[&lt;span class=\"hljs-keyword\"&gt;j])\n&lt;/span&gt;            &lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;        else:&lt;/span&gt;\n            result.append(&lt;span class=\"hljs-keyword\"&gt;llist[i])\n&lt;/span&gt;            i &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 把result的赋值语句放在循环外面&lt;/span&gt;\n    result &amp;#61; result &amp;#43; &lt;span class=\"hljs-keyword\"&gt;llist[i:] &lt;/span&gt;&amp;#43; rlist[&lt;span class=\"hljs-keyword\"&gt;j:]\n&lt;/span&gt;    return result\nprint(test(&lt;span class=\"hljs-keyword\"&gt;shu))\n&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["关于归并排序问题，如何解决？", ["shu ", "= [", "5", ", ", "3", ", ", "7", ", ", "2", ", ", "4", ", ", "6", ", ", "1", ", ", "8", "]\ndef test(", "shu):\n", "    if len(", "shu) ", "<= ", "1", ":\n        return ", "shu\n", "    mid = int(len(", "shu)/2)\n", "    ", "llist, ", "rlist = test(", "shu[:mid]), ", "test(", "shu[mid:])\n", "    result = []\n    i = ", "0", "\n    ", "j ", "= ", "0", "\n    while i < len(", "llist) ", "and ", "j ", "< len(rlist):\n        if rlist[", "j] ", "< ", "llist[i]:\n", "            result.append(rlist[", "j])\n", "            ", "j ", "= ", "j ", "+ ", "1", "\n", "        else:", "\n            result.append(", "llist[i])\n", "            i = i + ", "1", "\n        result = result + ", "llist[i:] ", "+ rlist[", "j:]\n", "        return result\nprint(test(", "shu))", "\n", "\n", "\n", "为什么结果错误", "​"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;#define _CRT_SECURE_NO_WARNINGS &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;malloc.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;windows.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;memory.h&amp;gt;\n&lt;span class=\"hljs-comment\"&gt;//归并排序&amp;#xff1a;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;/*\narr:指定数组\nleft:判定左边界\nright:判断右边界\nmid:判断中点\n*/&lt;/span&gt;\nvoid &lt;span class=\"hljs-constructor\"&gt;Merge(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; *p &amp;#61; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;*)malloc((right - left &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;));\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; *temp &amp;#61; p;\n    memset(p, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, (right - left &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;));\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; L &amp;#61; left;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; R &amp;#61; mid &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (L &amp;lt;&amp;#61; mid&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;R &amp;lt;&amp;#61; right)\n    {\n        *p&amp;#43;&amp;#43; &amp;#61; arr&lt;span class=\"hljs-literal\"&gt;[L]&lt;/span&gt; &amp;lt; arr&lt;span class=\"hljs-literal\"&gt;[R]&lt;/span&gt; ? arr&lt;span class=\"hljs-literal\"&gt;[L&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; : arr&lt;span class=\"hljs-literal\"&gt;[R&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (L &amp;lt;&amp;#61; mid)\n    {\n        *p&amp;#43;&amp;#43; &amp;#61; arr&lt;span class=\"hljs-literal\"&gt;[L&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (R &amp;lt;&amp;#61; right)\n    {\n        *p&amp;#43;&amp;#43; &amp;#61; arr&lt;span class=\"hljs-literal\"&gt;[R&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    }\n \n    memcpy(arr &amp;#43; left, temp, (right - left &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;));\n \n    free(temp);\n    temp &amp;#61; NULL;\n}\n \nvoid &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (left&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;right)\n        return;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; mid &amp;#61; left &amp;#43; ((right - left)&amp;gt;&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n \n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;)&lt;/span&gt;;            &lt;span class=\"hljs-comment\"&gt;//左半边&lt;/span&gt;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt; &amp;#43; 1, &lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;)&lt;/span&gt;;        &lt;span class=\"hljs-comment\"&gt;//右半边&lt;/span&gt;\n    &lt;span class=\"hljs-constructor\"&gt;Merge(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;)&lt;/span&gt;;        &lt;span class=\"hljs-comment\"&gt;//排序&lt;/span&gt;\n}\n \n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]&lt;/span&gt; &amp;#61; { &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;};\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, 0, &lt;span class=\"hljs-params\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;)&lt;/span&gt;/ sizeof(arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&lt;/span&gt;) - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; sizeof(arr)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;sizeof(arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&lt;/span&gt;); i&amp;#43;&amp;#43;)\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n \n    system(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["我想问问，这归并排序为什么排不了啊😭", ["排序完的数组出现0，-1，和原来的数组不同，为什么会这样呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;溢出问题单点调试下&amp;#xff0c;你看看right&amp;gt;arr长度的情况&amp;#xff0c;修改下第一个循环&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;void merge(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;* arr, const &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;, const &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt;, const &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt;)\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    const &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt; &amp;#61; (&lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt; - &lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;* temp &amp;#61; new &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;];\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n   while (i &amp;lt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt; &amp;amp;&amp;amp; j &amp;lt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt; &amp;amp;&amp;amp; k &amp;lt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;)\n    temp[k&amp;#43;&amp;#43;] &amp;#61; arr[i] &amp;lt; arr[j] ? arr[i&amp;#43;&amp;#43;] &lt;span class=\"hljs-symbol\"&gt;:&lt;/span&gt; arr[j&amp;#43;&amp;#43;];\n    while (i &amp;lt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt;)\n        temp[k&amp;#43;&amp;#43;] &amp;#61; arr[i&amp;#43;&amp;#43;];\n    while (j &amp;lt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt;)\n        temp[k&amp;#43;&amp;#43;] &amp;#61; arr[j&amp;#43;&amp;#43;];//缓冲区溢出&amp;#xff1f;\n    for (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;; &amp;#43;&amp;#43;i)\n        arr[&lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt; &amp;#43; i] &amp;#61; temp[i];//未初始化内存&amp;#xff1f;\n    delete[]temp;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["C++归并排序产生缓冲区溢出和未初始化内存的警告", ["写了一个简单的归并排序，产生了警告C6386写入 \"temp\" 时缓冲区溢出和警告C6001使用未初始化的内存“*temp”。", "\n", "void merge(", "int", "* arr, const ", "int", "& ", "left", ", const ", "int", "& ", "mid", ", const ", "int", "& ", "right", ")\n{\n    ", "int", " i = ", "left", ";\n    ", "int", " j = ", "mid", " + ", "1", ";\n    const ", "int", " ", "len", " = (", "right", " - ", "left", ") + ", "1", ";\n    ", "int", "* temp = new ", "int", "[", "len", "];\n    ", "int", " k = ", "0", ";\n    while (i <= ", "mid", " && j <= ", "right", ")\n        temp[k++] = arr[i] < arr[j] ? arr[i++] ", ":", " arr[j++];\n    while (i <= ", "mid", ")\n        temp[k++] = arr[i++];\n    while (j <= ", "right", ")\n        temp[k++] = arr[j++];//缓冲区溢出？\n    for (", "int", " i = ", "0", "; i < ", "len", "; ++i)\n        arr[", "left", " + i] = temp[i];//未初始化内存？\n    delete[]temp;\n}\n\nvoid mergeSort(", "int", "* arr, const ", "int", "& ", "left", ", const ", "int", "& ", "right", ")\n{\n    ", "if", " (", "left", " == ", "right", ")\n        return;\n    ", "int", " ", "mid", " = (", "left", " + ", "right", ") >> ", "1", ";\n    mergeSort(arr, ", "left", ", ", "mid", ");\n    mergeSort(arr, ", "mid", " + ", "1", ", ", "right", ");\n    merge(arr, ", "left", ", ", "mid", ", ", "right", ");\n}\n\nvoid MergeSo", "rt:", ":so", "rt(", "int", "* arr, const ", "int", "& ", "len", ")\n{\n    cout << ", "\"归并排序\"", " << endl;\n    mergeSort(arr, ", "0", ", ", "len", " - ", "1", ");\n}\n\n\n", "\n", "找了半天没发现警告的原因，经过测试程序是能正常运行的。"]], "Tag": "算法设计"}
{"Answer": "改了三处：\r\n1.多传入了一个参数int c[]作为目标数组\r\n2.guibing函数里k初始成start\r\n3.guibing函数最后的for循环改成了for(i=start; i&lt;=end; i++)a[i] = c[i];\r\n```\r\n #include&lt;iostream&gt;\r\nusing namespace std; \r\nvoid fenkai(int a[], int c[], int l, int r);\r\nvoid guibing(int a[], int c[], int start, int mid, int end);\r\nint main(){\r\n\tint a[20], c[20];\r\n\tfor (int i = 0; i &lt; 20; i++){\r\n\t\ta[i] = rand() % 100;\r\n\t\tcout &lt;&lt; a[i] &lt;&lt; \" \";\r\n\t}\r\n\tcout &lt;&lt; endl;\r\n\tfenkai(a, c, 0,19);\r\n\tfor (int i = 0; i &lt; 20; i++)\r\n\t\tcout &lt;&lt; c[i] &lt;&lt; \" \";\r\n}\r\nvoid guibing(int a[], int c[], int start, int mid, int end){\r\n\tint i, j, k;\r\n\ti = start, j = mid + 1, k = start;\r\n\t//int *c=new int[end-start+1];\r\n\twhile (i &lt;= mid&amp;&amp;j &lt;= end){\r\n\t\tif (a[i] &lt; a[j])\r\n\t\t\tc[k++] = a[i++];\r\n\t\telse\r\n\t\t\tc[k++] = a[j++];\r\n\t}\r\n\twhile (i&lt;=mid)\r\n\t\t\tc[k++] = a[i++];\r\n\twhile (j&lt;=end)\r\n\t\t\tc[k++] = a[j++];\r\n\t//for (int i = start, k = 0; i&lt;(end-start+1); i++, k++)\r\n\tfor(i=start; i&lt;=end; i++)\r\n\t\ta[i] = c[i];\r\n\t//delete[] c;\r\n}\r\nvoid fenkai(int a[],int c[], int l,int r){\r\n\tif (l &lt; r){\r\n\t\tint m = (l + r) / 2;\r\n\t\tfenkai(a, c, l, m);\r\n\t\tfenkai(a, c, m+1, r);\r\n\t\tguibing(a, c, l, m, r);\r\n\t}\r\n}\r\n```\r\n![图片说明](https://img-ask.csdn.net/upload/201605/24/1464083785_511567.png)", "Konwledge_Point": "归并排序", "Question": ["大神们帮我看看这个归并排序代码，谢了。", ["#include", "\nusing namespace std; ", "\nvoid fenkai(int a[], int l, int r);", "\nvoid guibing(int a[], int start, int mid, int end);", "\nint main(){", "\n    int a[20];", "\n    for (int i = 0; i < 20; i++){", "\n        a[i] = rand() % 100;", "\n        cout << a[i] << \" \";", "\n    }", "\n    cout << endl;", "\n    fenkai(a, 0,19);", "\n    for (int i = 0; i < 20; i++)", "\n        cout << a[i] << \" \";", "\n}", "\nvoid guibing(int a[], int start, int mid, int end){", "\n    int i, j, k;", "\n    i = start, j = mid + 1, k = 0;", "\n    int *c=new int[end-start+1];", "\n    while (i <= mid&&j <= end){", "\n        if (a[i] < a[j])", "\n            c[k++] = a[i++];", "\n        else", "\n            c[k++] = a[j++];", "\n    }", "\n    while (i<=mid)", "\n            c[k++] = a[i++];", "\n    while (j<=end)", "\n            c[k++] = a[j++];", "\n    for (int i = start, k = 0; i<(end-start+1); i++, k++)", "\n        a[i] = c[k];", "\n    delete[] c;", "\n}", "\nvoid fenkai(int a[],int l,int r){", "\n    if (l < r){", "\n        int m = (l + r) / 2;", "\n        fenkai(a, l, m);", "\n        fenkai(a, m+1, r);", "\n        guibing(a, l, m, r);", "\n    }", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;归并排序的空间复杂度是O(n)&amp;#xff0c;即需要一个额外的数组来进行合并操作。而快速排序的空间复杂度是O(logn)。所以要求内存量最大的排序方法应该是归并排序&amp;#xff0c;答案为D。&lt;/p&gt;\n&lt;p&gt;如果对您有帮助&amp;#xff0c;请给与采纳&amp;#xff0c;谢谢。&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["下述几种排序方法中，要求内存量最大的", ["要求内存量最大的，这个怎么是归并排序，归并排序是O(n),而快速排序是O(nlogn),"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://www.cnblogs.com/plain8/p/8093052.html\" id=\"textarea_1632453228601_1632453240577_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;C语言&amp;#xff1a;归并排序 - plain8 - 博客园&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;归并排序&amp;#xff08;C语言&amp;#xff09;。 先上代码&amp;#xff0c;理论会后面一起总结。 1. 递归 2. 非递归&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://common.cnblogs.com/favicon.svg\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.cnblogs.com/plain8/p/8093052.html&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["不知道这个归并排序错在哪了，没有用动态内存分配。", ["\n#include<stdio.h>\n#include<stdlib.h>\n\n\nvoid merge(", "int", "* arr,", "int", " ", "left", ",", "int", " ", "right", ",", "int", " ", "mid", "){\n    ", "int", " Arr[", "20", "];\n    ", "int", " M=", "right", "-", "left", ";\n    ", "int", " k=", "0", ";\n    ", "int", " ", "t", "=", "mid", "+", "1", ";\n    while(", "left", "<=", "mid", "&&", "t", "<=", "right", "){\n        ", "if", "(arr[", "left", "]<arr[", "t", "]){\n            Arr[k++]=arr[", "left", "++];\n        }else{\n            Arr[k++]=arr[", "t", "++];\n        }\n    }\n    while(", "left", "<=", "mid", ")\n        Arr[k++]=arr[", "left", "++];\n    while(", "t", "<=", "right", ")\n        Arr[k++]=arr[", "t", "++];\n    \n    ", "int", " i;\n    for(i=", "0", ";i<=M;i++){\n        arr[i]=Arr[i];\n    }\n}\n\nvoid merge_sort(", "int", "* arr,", "int", " ", "left", ",", "int", " ", "right", "){\n    ", "if", "(", "right", "==", "left", ")\n        return ;\n        \n    ", "int", " ", "mid", "=(", "right", "+", "left", ")/", "2", ";\n    merge_sort(arr,", "left", ",", "mid", ");\n    merge_sort(arr,", "mid", "+", "1", ",", "right", ");\n    \n    merge(arr,", "left", ",", "right", ",", "mid", ");\n}\n\nvoid print(", "int", "* arr,", "int", " ", "n", "){\n    ", "int", " i;\n    for(i=", "0", ";i<", "n", ";i++)\n        printf(", "\"%d\"", ",arr[i]);\n}\n\n", "int", " main(){\n    ", "int", " arr[", "5", "]={", "5", ",", "4", ",", "3", ",", "2", ",", "1", "};\n    merge_sort(arr,", "0", ",", "4", ");\n    print(arr,", "5", ");\n    \n    return ", "0", "; \n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;越界后, and的短路特性使得第二个条件没被执行. 另外我觉得没必要写这么复杂的条件, 可以在最后把剩下的放进去, 代码比较对称, 逻辑比较清晰:&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;def merge(s1, s2, s):\n    i &amp;#61; j &amp;#61; 0\n    while i &amp;lt; len(s1) and j &amp;lt; len(s2):\n        if s1[i] &amp;lt; s2[j]:\n            s[i&amp;#43;j] &amp;#61; s1[i]\n            i &amp;#43;&amp;#61; 1\n        elif s1[i] &amp;gt;&amp;#61; s2[j]:\n            s[i&amp;#43;j] &amp;#61; s2[j]\n            j &amp;#43;&amp;#61; 1\n    while i &amp;lt; len(s1):\n        s[i&amp;#43;j] &amp;#61; s1[i]\n        i &amp;#43;&amp;#61; 1\n    while j &amp;lt; len(s2):\n        s[i&amp;#43;j] &amp;#61; s2[j]\n        j &amp;#43;&amp;#61; 1&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;或者直接舍弃指标i和j, 用列表的pop移动.&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["python实现二归并排序时，为什么只是交换了and两边条件的位置，一个能出结果，一个就报错？", ["\n", "def merge(s1,s2,s):\n    i = j = 0\n    while i+j<len(s):\n        if j==len(s2) or (i<len(s1) and s1[i]<s2[j]):\n            s[i+j] = s1[i]\n            i += 1\n        else:\n            s[i+j] = s2[j]\n            j += 1\n\ndef merge_sort(s):\n    n = len(s)\n    if n < 2:\n        return\n    mid = n // 2\n    s1 = s[0:mid]\n    s2 = s[mid:n]\n    merge_sort(s1)\n    merge_sort(s2)\n    merge(s1,s2,s)\n\n\ns = [24,17,40,28,13,14,22,32,40,21,48,4,47,8,37,18,88,56,79,35,0,66,156]\nmerge_sort(s)\nprint(s)\n", "\n\n", "这个代码是能正常运行的，结果是：", "\n\n", "\n", "[0, 4, 8, 13, 14, 17, 18, 21, 22, 24, 28, 32, 35, 37, 40, 40, 47, 48, 56, 66, 79, 88, 156]", "\n\n", "但是我只是改变了if 语句中 and两边语句 的位置，结果就报错了", "\n\n", "\n", " if j==len(s2) or (s1[i]<s2[j] and i<len(s1)):", "\n\n", "\n", "---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n<ipython-input-9-5ac2ee75fd0c> in <module>()\n     22 \n     23 s = [24,17,40,28,13,14,22,32,40,21,48,4,47,8,37,18,88,56,79,35,0,66,156]\n---> 24 merge_sort(s)\n     25 print(s)\n\n<ipython-input-9-5ac2ee75fd0c> in merge_sort(s)\n     16     s1 = s[0:mid]\n     17     s2 = s[mid:n]\n---> 18     merge_sort(s1)\n     19     merge_sort(s2)\n     20     merge(s1,s2,s)\n\n<ipython-input-9-5ac2ee75fd0c> in merge_sort(s)\n     16     s1 = s[0:mid]\n     17     s2 = s[mid:n]\n---> 18     merge_sort(s1)\n     19     merge_sort(s2)\n     20     merge(s1,s2,s)\n\n<ipython-input-9-5ac2ee75fd0c> in merge_sort(s)\n     18     merge_sort(s1)\n     19     merge_sort(s2)\n---> 20     merge(s1,s2,s)\n     21 \n     22 \n\n<ipython-input-9-5ac2ee75fd0c> in merge(s1, s2, s)\n      2     i = j = 0\n      3     while i+j<len(s):\n----> 4         if j==len(s2) or (s1[i]<s2[j] and i<len(s1)):\n      5             s[i+j] = s1[i]\n      6             i += 1\n\nIndexError: list index out of range\n"]], "Tag": "算法设计"}
{"Answer": "找了一个描述： \r\n例如，需要归并文件A、B，则按固定长度从文件A、B中分别读取一小段AS、BS，将AS、BS的归并结果记录在CS中，如果AS先比较完（反之类似），则将CS追加写入文件C并清空CS内存，并从文件A中读取下一段保存在AS中，再运行归并函数，直到文件A或B完全读取完，再把剩下的AS或BS写入文件C\r\n好好理解一下", "Konwledge_Point": "归并排序", "Question": ["海量数据多路归并的问题，求指点～", ["归并排序我知道：就是把两个有序序列归并为一个有序序列", "\n\n", "海量数据的多路归并的思想我也看了，就是有一点不明白，它是一小段一小段归并的，那他是怎么做到整体有序的呢？", "\n\n", "多路归并排序并不是把所有数据都读取到内存中，而是从每个文件中读取一小块数据，归并好就保存一小块，再读取下一小块", "\n\n", "比方说1～2000 和2001～4000归并，10个10个归并", "\n\n", "那结果就是：1，2，。。。，9，10，2001，2002，。。。，2009，2010", "\n\n", "11，12，。。。，19，20，2011，2012，.。。，2019，2020", "\n\n", ".。。。。。。。。。。。。。。", "\n\n", "后面也是一样", "\n\n", "那他怎么做到 整体的有序呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;对于第一个问题&amp;#xff0c;根据题目中描述的第一趟排序结果为{14&amp;#xff0c;5&amp;#xff0c;19&amp;#xff0c;20&amp;#xff0c;11&amp;#xff0c;19}&amp;#xff0c;可以确定采用的排序算法是简单选择排序&amp;#xff0c;因为简单选择排序的每一趟排序都会选择当前未排序部分中的最小元素&amp;#xff0c;并将其与未排序部分的第一个元素进行交换&amp;#xff0c;使得前面部分有序&amp;#xff0c;而第一趟排序的结果与题目中给出的结果一致。&lt;/p&gt;\n&lt;p&gt;对于第二个问题&amp;#xff0c;若从节省存储空间的角度考虑&amp;#xff0c;则应该首选快速排序&amp;#xff0c;因为它的空间复杂度为O(log n)&amp;#xff0c;而堆排序和归并排序的空间复杂度分别为O(n)和O(n log n)。其次选取堆排序&amp;#xff0c;因为它的空间复杂度与数据规模无关&amp;#xff0c;而归并排序的空间复杂度与数据规模成正比。&lt;/p&gt;\n&lt;p&gt;但是&amp;#xff0c;如果同时从最坏情况和节省内存的角度考虑&amp;#xff0c;那么归并排序可能是更好的选择&amp;#xff0c;因为它的时间复杂度为O(n log n)&amp;#xff0c;且空间复杂度为O(n)&amp;#xff0c;而快速排序在最坏情况下的时间复杂度为O(n^2)&amp;#xff0c;且空间复杂度为O(log n)。因此&amp;#xff0c;如果要同时考虑最坏情况和节省内存&amp;#xff0c;应该选取归并排序方法。&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["对给出的一组关键若按关键字非递减排序", ["对给出的一组关键字。若按关键字非递减排序问采用的排序算法是", "A）简单选择排序", "\n", "\n", "这个应首选快速排序吧，它的空间复杂度是nlogn，堆是n²", "．在堆排序、快速排序和归并排序中，若从节省存储空间考虑，则应首先选取（）方法，其次选取()方法；若", "从最坏并且节省内存，不应该是归并排序吗", "\n", "若只从最坏情况下排序最快并且要节省内存考虑，则应选取__方法。，"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;所谓稳定的排序方法&lt;br /&gt;不是说有时候能排序成功&amp;#xff0c;有时候不会成功&lt;br /&gt;是说在排序之后&amp;#xff0c;能够使得具有相同大小的键值的记录前后位置没有发生变化&lt;br /&gt;那你想&amp;#xff0c;两个链表要合并成一个链表&amp;#xff0c;两个链表里有相同的项x&amp;#xff0c;一开始肯定是较短的链表里x比较靠前&amp;#xff0c;较长的链表里x比较靠后&amp;#xff0c;而合并的时候到底谁在前就看你外层循环和内层循环是哪个&amp;#xff0c;跟x原来的位置无关&amp;#xff0c;所以x的相对位置就可能发生变化&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["数据结构排序B选项为啥不选", ["选项B为啥不对？基数排序和归并排序不都应该是稳定的算法吗？求！！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;各种算法的时间空间复杂度如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/765063837776163.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;br /&gt;原理参考链接&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/YUBANGSHUANGYUER/article/details/114377566\" id=\"textarea_1677738261737_1677738379539_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1 md_link_url\"&gt;\n         https://blog.csdn.net/YUBANGSHUANGYUER/article/details/114377566\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;p&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;有帮助的话&amp;#xff0c;请点采纳~&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "归并排序", "Question": ["下列四种排序中（  ）的空间复杂度最大。", ["14、下列四种排序中（  ）的空间复杂度最大。", "(A) 插入排序    (B) 冒泡排序    (C) 堆排序      (D) 归并排序", "为啥答案选择D选项，不是堆的空间复杂度为O（n^2)吗"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;是否可以理解为对数组排序呢&amp;#xff1f;分别用不同排序方法。&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["java学生成绩排序", ["【问题描述】", " 对本班所有学生的上学期的各科平均成绩进行从高到低排序，学生的平均成绩可按照上学期真实平均成绩设计，也可利用随机数自动生成，并对这些平均成绩进行多种方法进行排序。", "【基本要求】", "请用Java语言编写程序，满足以下要求：", "（1）至少采用四种方法实现上述问题求解（提示，可采用的方法有插入排序、希尔排序、起泡排序、快速排序、选择排序、堆排序、归并排序），并把排序后的结果写出到不同的文本文件中，文件名自行设计。", "（2）统计每一种排序方法的性能（以上机运行程序所花费的时间为准进行对比），并分析各个排序算法的优劣。", "【测试数据】", "（1）要求使用全部合法数据，整体非法数据，局部非法数据进行程序测试，以保证程序的稳定。", "（2）若平均成绩随机生成，生成的范围为：[60 - 100]。", "【实现提示】", "成绩的排序可利用学过的排序算法实现，对于结果的写出可利用java的缓冲输入输出字符流进行实现。", "__"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;试试我这个呢,从结果看还是快排快些&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/391827503946120.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;你可以按照自己的需求修改测试程序。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdlib.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;time.h&amp;gt;\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr1&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr2&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;2000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr3&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;3000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr4&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;4000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr5&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;5000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr6&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;6000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr7&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;7000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr8&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;8000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr9&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;9000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr10&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;]&lt;/span&gt;;\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; brr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;]&lt;/span&gt;;\n\nvoid init&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n    srand((unsigned &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;)time(NULL));\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr1&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;2000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr1&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr2&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;3000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr3&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr1&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;4000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr4&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;5000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr5&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;6000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr6&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;7000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr7&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;8000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr8&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;9000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr9&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr10&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n}\n\nvoid quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;number&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;first&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;last&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i, j, pivot;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; temp;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (first&amp;lt;last) {\n        pivot &amp;#61; first;\n        i &amp;#61; first;\n        j &amp;#61; last;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i&amp;lt;j) {\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;lt;&amp;#61; number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;pivot&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;i&amp;lt;last)\n                i&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;&amp;gt;number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;pivot&lt;/span&gt;]&lt;/span&gt;)\n                j--;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i&amp;lt;j) {\n                temp &amp;#61; number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;;\n                number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;;\n                number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt; &amp;#61; temp;\n            }\n        }\n        temp &amp;#61; number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;pivot&lt;/span&gt;]&lt;/span&gt;;\n        number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;pivot&lt;/span&gt;]&lt;/span&gt; &amp;#61; number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;;\n        number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt; &amp;#61; temp;\n        quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;number&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;first&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;j&lt;/span&gt; - 1)&lt;/span&gt;;\n        quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;number&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;j&lt;/span&gt; &amp;#43; 1, &lt;span class=\"hljs-params\"&gt;last&lt;/span&gt;)&lt;/span&gt;;\n    }\n}\n\nvoid &lt;span class=\"hljs-constructor\"&gt;Merge(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;sourceArr&lt;/span&gt;[],&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;tempArr&lt;/span&gt;[], &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;startIndex&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;midIndex&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;endIndex&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; startIndex, j&amp;#61;midIndex&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, k &amp;#61; startIndex;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i!&amp;#61;midIndex&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;j!&amp;#61;endIndex&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(sourceArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;gt; sourceArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;)\n            tempArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; sourceArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            tempArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; sourceArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i !&amp;#61; midIndex&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        tempArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; sourceArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(j !&amp;#61; endIndex&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        tempArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; sourceArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;startIndex; i&amp;lt;&amp;#61;endIndex; i&amp;#43;&amp;#43;)\n        sourceArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; tempArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;;\n}\n \n&lt;span class=\"hljs-comment\"&gt;//内部使用递归&lt;/span&gt;\nvoid &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;sourceArr&lt;/span&gt;[], &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;tempArr&lt;/span&gt;[], &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;startIndex&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;endIndex&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; midIndex;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(startIndex &amp;lt; endIndex)\n    {\n        midIndex &amp;#61; startIndex &amp;#43; (endIndex-startIndex)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//避免溢出int&lt;/span&gt;\n        &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;sourceArr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;tempArr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;startIndex&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;midIndex&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;sourceArr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;tempArr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;midIndex&lt;/span&gt;&amp;#43;1, &lt;span class=\"hljs-params\"&gt;endIndex&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-constructor\"&gt;Merge(&lt;span class=\"hljs-params\"&gt;sourceArr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;tempArr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;startIndex&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;midIndex&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;endIndex&lt;/span&gt;)&lt;/span&gt;;\n    }\n}\nvoid test&lt;span class=\"hljs-constructor\"&gt;Merge()&lt;/span&gt;\n{\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 1000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 2000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr3&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 3000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr4&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 4000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr5&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 5000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr6&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 6000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr7&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 7000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr8&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 8000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr9&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 9000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr10&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 10000)&lt;/span&gt;;\n}\nvoid test&lt;span class=\"hljs-constructor\"&gt;Qsort()&lt;/span&gt;\n{\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr1&lt;/span&gt;,0,1000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr2&lt;/span&gt;,0,2000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr3&lt;/span&gt;,0,3000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr4&lt;/span&gt;,0,4000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr5&lt;/span&gt;,0,5000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr6&lt;/span&gt;,0,6000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr7&lt;/span&gt;,0,7000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr8&lt;/span&gt;,0,8000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr9&lt;/span&gt;,0,9000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr10&lt;/span&gt;,0,10000)&lt;/span&gt;;\n}\n\nvoid print&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr1:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr1[%d]:%d &amp;#34;&lt;/span&gt;,i,arr1&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr2:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;2000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr2[%d]:%d &amp;#34;&lt;/span&gt;,i,arr2&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr3:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;3000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr3[%d]:%d &amp;#34;&lt;/span&gt;,i,arr3&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr4:\\n&amp;#34;&lt;/span&gt;);    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;4000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr4[%d]:%d &amp;#34;&lt;/span&gt;,i,arr4&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr5:\\n&amp;#34;&lt;/span&gt;);    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;5000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr5[%d]:%d &amp;#34;&lt;/span&gt;,i,arr5&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr6:\\n&amp;#34;&lt;/span&gt;);    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;6000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr6%d]:%d &amp;#34;&lt;/span&gt;,i,arr6&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr7:\\n&amp;#34;&lt;/span&gt;);    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;7000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr7[%d]:%d &amp;#34;&lt;/span&gt;,i,arr7&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr8:\\n&amp;#34;&lt;/span&gt;);    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;8000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr8[%d]:%d &amp;#34;&lt;/span&gt;,i,arr8&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr9:\\n&amp;#34;&lt;/span&gt;);    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;9000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr9[%d]:%d &amp;#34;&lt;/span&gt;,i,arr9&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr10:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr10[%d]:%d &amp;#34;&lt;/span&gt;,i,arr10&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    \n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main(void) \n{ \n    init&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    \n    &lt;span class=\"hljs-comment\"&gt;/*归并排序时间记录*/&lt;/span&gt;\n    \n    clock_t &lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;;\n    double time_cost;\n    &lt;span class=\"hljs-comment\"&gt;// 开始记录&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt; &amp;#61; clock&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;/*这里输入待测试程序段*/&lt;/span&gt;\n    test&lt;span class=\"hljs-constructor\"&gt;Merge()&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;// 结束记录&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt; &amp;#61; clock&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    time_cost &amp;#61; (double)(&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt; - &lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;CLOCKS_PER_SEC;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;testMerge cost : %lf s\\n&amp;#34;&lt;/span&gt;, CLOCKS_PER_SEC, time_cost);\n    \n    \n     init&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n\n    &lt;span class=\"hljs-comment\"&gt;/*快速排序时间记录*/&lt;/span&gt;\n    \n    clock_t begin1, end1;\n    double time_cost1;\n    &lt;span class=\"hljs-comment\"&gt;// 开始记录&lt;/span&gt;\n    begin1 &amp;#61; clock&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;/*这里输入待测试程序段*/&lt;/span&gt;\n    test&lt;span class=\"hljs-constructor\"&gt;Qsort()&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;// 结束记录&lt;/span&gt;\n    end1 &amp;#61; clock&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    time_cost1 &amp;#61; (double)(end1 - begin1)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;CLOCKS_PER_SEC;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;testQsort cost : %lf s\\n&amp;#34;&lt;/span&gt;, CLOCKS_PER_SEC, time_cost1);\n    \n    print&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["关于#排序算法#的问题，如何用c++解决？", ["题目是：用大小分别为1000 2000 3000 4000 5000 6000 7000 8000 9000和10000的10个数组的排列来统计归并排序算法和快速排序算法的时间复杂性。", "我尝试使用随机数生成10个数组中的数据，但是每次排列结束都会时间超限。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1, A&lt;br /&gt;2, B&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["关于#线性回归#的问题：如果只想得到1000个元素组成的序列中第5个最小元素之前的部分排序的序列", ["如果只想得到1000个元素组成的序列中第5个最小元素之前的部分排序的序列，用（    ）方法最快。", "A．堆排序                                B．快速排序", "C．插入排序                                D．归并排序", "广义表满足Head(A)=Tail(A)，则A为（   ）。", "A．（）                                 B．（（））", "C．（（），（））                           D．（（），（），（））"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-attribute\"&gt;def&lt;/span&gt; merge_sort(alist):\n    &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; len(alist) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-attribute\"&gt;return&lt;/span&gt; alist\n    &lt;span class=\"hljs-attribute\"&gt;mid&lt;/span&gt; &amp;#61; len(alist) // &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;left&lt;/span&gt; &amp;#61; merge_sort(alist[:mid])\n    &lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt; &amp;#61; merge_sort(alist[mid:])\n    &lt;span class=\"hljs-attribute\"&gt;result&lt;/span&gt; &amp;#61;&lt;span class=\"hljs-meta\"&gt; []&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;while&lt;/span&gt; len(left) &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; and len(right) &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; left[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;lt;&amp;#61; right[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]:\n            &lt;span class=\"hljs-attribute\"&gt;result&lt;/span&gt;.append(left.pop(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;))\n        &lt;span class=\"hljs-attribute\"&gt;else&lt;/span&gt;:\n            &lt;span class=\"hljs-attribute\"&gt;result&lt;/span&gt;.append(right.pop(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;))\n    &lt;span class=\"hljs-attribute\"&gt;result&lt;/span&gt; &amp;#43;&amp;#61; left\n    &lt;span class=\"hljs-attribute\"&gt;result&lt;/span&gt; &amp;#43;&amp;#61; right\n    &lt;span class=\"hljs-attribute\"&gt;return&lt;/span&gt; result\n\n\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(merge_sort([&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;99&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;33&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;69&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;77&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;88&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;55&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;33&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;36&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;39&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;66&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;44&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["请问这个程序的代码该怎么写", ["编写函数merge_sort(alist)使用“归并排序算法”对参数列表alist的各元素进行升序排序，排序后，", "alist的各元素按升序有序。"]], "Tag": "算法设计"}
{"Answer": "&lt;h5 id=\"h5_可以创建中、英文标点码表字典&amp;#xff0c;轮询字符输入文本字符串中、英标点替换就好。_1669093665245\"&gt;  可以创建中、英文标点码表字典&amp;#xff0c;轮询字符输入文本字符串中、英标点替换就好。&lt;/h5&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#!/usr/bin/nve python&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# coding: utf-8&lt;/span&gt;\n\nen_punc &amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;,;.:!? &amp;#39;&lt;/span&gt;\nch_punc &amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#xff0c;&amp;#xff1b;。&amp;#xff1a;&amp;#xff01;&amp;#xff1f; &amp;#39;&lt;/span&gt;\nen_punc_dict &amp;#61; &lt;span class=\"hljs-built_in\"&gt;dict&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;zip&lt;/span&gt;(en_punc, ch_punc))\nch_punc_dict &amp;#61; &lt;span class=\"hljs-built_in\"&gt;dict&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;zip&lt;/span&gt;(ch_punc, en_punc))\n\n\ntext &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&amp;#39;\n排序算法一:冒泡排序。 排序算法二:快速排序。 排序算法三:堆排序。 排序算法四:归并排序 排序算法五:插入排序 排序算法六:基数排序 排序算法七:选择排序 排序算法八:堆排序。 排序算法九:希尔排序 排序算法十:快速排序(FIFO)。 排序算法十一:树结构排序……\n&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 输入中文&amp;#xff1a;&amp;#xff0c;代码默认&amp;#61;:(英文)&amp;#xff0c;反之一样&lt;/span&gt;\n\ntext2 &amp;#61; []\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; text:\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; en_punc:\n        i &amp;#61; en_punc_dict.get(i)\n    &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; ch_punc:\n        i &amp;#61; ch_punc_dict.get(i)\n\n    text2.append(i)\n\ntext2 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;.join(text2)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#34;\\n\\n输入文本&amp;#xff1a;\\n&lt;span class=\"hljs-subst\"&gt;{text}&lt;/span&gt;\\n\\n代码处理后&amp;#xff1a;\\n&lt;span class=\"hljs-subst\"&gt;{text2}&lt;/span&gt;\\n&amp;#34;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/703983390966166.jpg\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;hr /&gt;\n\n&lt;h4 id=\"h4_如果输入文本只有中、英文一种标点&amp;#xff0c;只须轮询相反标点列表&amp;#xff0c;用strreplace、resub任一个方法替换输入文本的标点为另一类标点。这样子&amp;#xff0c;比轮询输入文本高效&amp;#xff0c;特别是输入文本很大。_1669093665359\"&gt;如果输入文本只有中、英文一种标点&amp;#xff0c;只须轮询相反标点列表&amp;#xff0c;用str.replace()、re.sub()任一个方法替换输入文本的标点为另一类标点。这样子&amp;#xff0c;比轮询输入文本高效&amp;#xff0c;特别是输入文本“很大“。&lt;/h4&gt;", "Konwledge_Point": "归并排序", "Question": ["全角半角切换，input输入中文：标点，代码默认=:(英文)，反之一样？", ["# 输入，标点符号默认中英文相互切换", "\n\n", "# 编号①②③   ord( '①' ): 9312", "\nz=", "input", "(", "''''''", ")\nb= ", "input", "(", "'''请输入切片位置：'''", ")\nd= ", "input", "(", "'''请输入回车位置：'''", ")\nz_list = z.strip().split(d)\n", "for", " index,value ", "in", " ", "enumerate", "(z_list):\n    ", "print", "(", "'{}.{}'", ".", "format", "(  ", "chr", "( ", "9312", "+index ) , value.split(b)[", "1", "] ))\n\n\n", "'''\n排序算法一:冒泡排序 排序算法二:快速排序 排序算法三:堆排序 排序算法四:归并排序 排序算法五:插入排序 排序算法六:基数排序 排序算法七:选择排序 排序算法八:堆排序 排序算法九:希尔排序 排序算法十:快速排序(FIFO) 排序算法十一:树结构排序\n'''", "\n\n", "# 输入中文：，代码默认=:(英文)，反之一样", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/613827320966118.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;br /&gt;望采纳&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["CSDN反馈中心在哪里？", ["CSDN反馈中心在哪里？", "我在私信中发了一张图片，是一幅讲解归并排序的动图为什么它说内容含有敏感信息，还把它删了，我想到CSDN反馈中心反馈。", "用的是电脑"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;运算符优先级的问题&amp;#xff0c;优先级比较如下&amp;#xff1a;&lt;/p&gt;\n\n&lt;p&gt;除运算符 &amp;gt; 加运算符 &amp;gt; 位移运算符&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["求中点的问题：为什么会栈溢出", ["归并排序求中点时，为什么我写右移就会报栈溢出，而除以2就可以呢？"]], "Tag": "算法设计"}
{"Answer": "scanf_s需要指定每个输入字符串长度\r\n```\r\n scanf_s(\"%s %s\", inf[i].sName,8 ,inf[i].sTele,11);\r\n```", "Konwledge_Point": "归并排序", "Question": ["VS2013使用scanf_s过界", ["无法运行，代码如", "\n\n", "// info.cpp : Defines the entry point for the console application.\n//\n\n#include \"stdafx.h\"\n#include <stdio.h>\n#include <string.h>\n//infomation\n//technology\n//IT\n//冒泡 选择 插入排序\n//快速排序 归并排序\nstruct SInfo\n{\n    char sName[20];\n    char sTele[20];\n};\n\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    SInfo inf[5];\n#define COUNT sizeof(inf)/sizeof(inf[0])\n    int i = 0;\n    while (i < COUNT)\n    {\n        printf(\"请输入第%d个学生姓名和电话：【以空格间隔】\", i + 1);\n        fflush(stdin);\n        scanf_s(\"%s %s\", inf[i].sName, inf[i].sTele);       //调试到这错误\n        ++i;\n    }\n    //ccc aaa ddd bbb eee\n    i = 0;\n    unsigned int j = 0;\n    while (i < COUNT - i)\n    {\n        j = 0;\n        while (j < COUNT - i)\n        {\n            if (strcmp(inf[j].sName, inf[j + 1].sName) > 0)\n            {\n                SInfo t = inf[j];\n                inf[j] = inf[j + 1];\n                inf[j + 1] = t;\n            }\n            ++j;\n        }\n        ++i;\n    }\n    i = 0;\n    while (i < COUNT)\n    {\n        printf(\"%s\\t%s\\n\", inf[i].sName, inf[i].sTele);\n        ++i;\n    }\n    return 0;\n}\n\n", "\n\n", "调试之后出现", "\nUnhandled exception at 0xFEFEFEFE in info.exe: 0xC0000005: Access violation executing location 0xFEFEFEFE.", "\n麻烦大神讲解下，谢谢"]], "Tag": "算法设计"}
{"Answer": "```\r\n 因为是递归\r\n if (hi&lt;=lo) return;\r\n    int mid=lo+(hi-lo)/2;\r\n    sort(a,lo,mid);\r\n    sort(a,mid+1,hi);\r\n你跳出的是sort(a,lo,mid);这一步函数调用，这个函数调用return返回后就是执行sort(a,mid+1,hi);\r\n```", "Konwledge_Point": "归并排序", "Question": ["java递归 if（） return返回到哪里？", ["学习归并排序时，遇到递归的思想。", "\n测试输入 mergesortexample", "\n单步调试到，if (hi<=lo) return;当hi=0，lo=0时，执行return，在我理解中，return就是退出方法了，为何会跳到 sort(a,mid+1,hi);而且此时，lo=0，hi=1？", "\n\n", "private static void sort(Comparable[] a,int lo,int hi){", "\n        //将数组a【lo hi】排序", "\n        if (hi<=lo) return;", "\n        int mid=lo+(hi-lo)/2;", "\n        sort(a,lo,mid);", "\n        sort(a,mid+1,hi);", "\n        merge(a,lo,mid,hi);", "\n    }", "\n\n", "import java.util.Scanner;", "\n\n", "public class Merge {", "\n    private static Comparable[] aux;", "\n\n", "public static void sort(Comparable[] a){\n\n    aux=new Comparable[a.length];\n    sort(a,0,a.length-1);\n}\n\nprivate static boolean less(Comparable v,Comparable w){\n    return v.compareTo(w)<0;\n}\n\npublic static void merge(Comparable[] a,int lo,int mid,int hi){\n    //将a【lo mid】与a【mid+1，hi】归并\n    int i=lo;\n    int j=mid+1;\n\n    for(int k=lo;k<=hi;k++){\n        aux[k]=a[k];\n    }\n\n    for(int k=lo;k<=hi;k++){\n        if(i>mid)                          a[k]=aux[j++];\n        else if(j>hi)                      a[k]=aux[i++];\n             else if(less(aux[j],aux[i]))  a[k]=aux[j++];\n                  else                     a[k]=aux[i++];\n    }\n}\n\nprivate static void sort(Comparable[] a,int lo,int hi){\n    //将数组a【lo hi】排序\n    if (hi<=lo) return;\n    int mid=lo+(hi-lo)/2;\n    sort(a,lo,mid);\n    sort(a,mid+1,hi);\n    merge(a,lo,mid,hi);\n}\nprivate static void show(Comparable[] a){\n    //在单行中打印数组\n    for(int i=0; i<a.length;i++)\n        System.out.print(a[i]+\"\");\n    System.out.println();\n\n}\npublic static boolean isSorted(Comparable[] a){\n    //测试数组是否有序\n    for(int i=1;i<a.length;i++)\n        if(less(a[i],a[i-1])) return false;\n    return true;\n}\npublic static void main(String[] args){\n    //从标准输入读取字符串，将它们排序并输出\n     System.out.print(\"输入\");\n     Scanner s = new Scanner(System.in);\n     String line=s.nextLine();\n     System.out.println(\"输入的是\"+line);                \n\n    char [] charArr =line.toCharArray();    \n    String[] strArr = new String[charArr.length];\n\n    for(int i = 0; i < strArr.length; i++) {\n        strArr[i] = String.valueOf(charArr[i]);\n    }\n\n    sort(strArr);\n    assert isSorted(strArr);\n    show(strArr);\n}\n", "\n\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题目呢&amp;#xff1f;另外快排时间复杂度也是O(nlogn)啊&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["OJ时间超限问题，代码能改进什么地方", ["问题遇到的现象和发生背景", "\n", "题目是输出数组第k大元素，要求多组输入，第一行是k,第二行是数组，要求时间复杂度为O(n)，用数据分区+递归查找加随机选取基准就可以,我明明用的是归并排序但oj老是时间超限。", "\n", "问题相关代码，请勿粘贴截图", "\n", "#include<stdio.h>", "#include<stdlib.h>", "int main(){", "    int n;", "    int a[10000];", "    char c;", "    int k;", "    while(scanf(\"%d\",&k)!=EOF){", "    while(scanf(\"%d\",&a[0])!=EOF){", "        int n=0;", "        while(scanf(\"%d\",&a[++n])){", "            if(c=getchar()=='\\n')", "            break;", "        }", "       int result=quickselect(a,0,n,k);", "       printf(\"%d\\n\",result);", "    }", "   }", "    return 0;", "}", "void swap(int a[],int i,int j){", "    int t=a[i];", "    a[i]=a[j];", "    a[j]=t;", "}", "int random(int p,int q){", "    return rand()%(q-p+1)+p;", "}", "int rpart(int a[],int p,int q){", "    int r=random(p,q);", "    swap(a,p,r);", "    int i=part(a,p,q);", "    return i;", "}", "\n", "int part(int a[],int p,int q){", "    int x=a[p];", "    int i=p,j;", "    for(j=p+1;j<=q;j++){", "        if(a[j]>=x){", "            i++;", "            swap(a,i,j);", "        }", "    }", "    swap(a,p,i);", "    return i;", "}", "int quickselect(int a[],int p,int q,int k){", "    if(p==q){", "        return a[p];", "      }", "      else{", "        int i=rpart(a,p,q);", "        int j=i-p+1;", "        if(k<=j){", "        return quickselect(a,p,i,k);", "      }", "      else{", "          return quickselect(a,i+1,q,k-j);", "      }", "}", "\n", "}", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "想问问我这个代码需要改进什么地方", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "你的main函数中的k没有给他new一个数组，所以你cin的时候程序就崩了", "Konwledge_Point": "归并排序", "Question": ["尝试数据结构中的mergesearch失败", ["最近在学数据结构和算法，想简单模拟一下向量的归并排序", "\n\n", "#include<iostream>\nusing namespace std;\nclass vector\n{\n    int* num;\n    public:\n        vector(int *k)\n        {\n            num=k;\n        }\n        void mergesort(int,int);\n        void merge(int,int,int);\n        void display()\n        {\n            for(int i=0;i<10;i++)\n            cout<<num[i]<<endl;\n        }\n};\nvoid vector::mergesort(int low,int high)\n{\n    if(high-low<2)return;\n    int mi=(low+high)/2;\n    mergesort(low,mi);\n    mergesort(mi,high);\n    merge(low,mi,high);\n}\nvoid vector::merge(int low,int mi,int high)\n{\n    int* A=num+low;\n    int lenb=mi-low;\n    int *B=new int[lenb];\n    for(int i=0;i<lenb;i++)B[i]=A[i];\n    int lenc=high-mi;\n    int *C=num+mi;\n    for(int i=0,j=0,k=0;(j<lenb)||(k<lenc);)\n    {\n        if((j<lenb)&&(lenc<=k||(B[j]<=C[k])))A[i++]=B[j++];\n        if((k<lenc)&&(lenb<=j||(C[k]<B[j])))A[i++]=C[k++];\n    }\n    delete[]B;\n}\nint main()\n{\n    int *k;\n    for(int i=0;i<10;i++)\n        cin>>k[i];\n    cout<<\"一开始\"<<endl;\n    for(int i=0;i<10;i++)\n        cout<<\" \"<<k[i];\n    cout<<endl;\n    vector v(k);\n    v.mergesort(0,10);\n    v.display();\n}\n", "\n\n", "\n\n", "出现了一些错误"]], "Tag": "算法设计"}
{"Answer": "http://www.codeproject.com/Articles/418776/How-to-replace-recursive-functions-using-stack-and", "Konwledge_Point": "归并排序", "Question": ["排序的递归问题：能否用函数指针以及栈代替递归？？", ["最近学习排序，对于快排，归并等处理海量数据效率高的算法很钟意，但是其自身的递归特性有很多缺点，譬如数据量过大时存在溢出的风险，也影响了算法的效率，故想到用栈代替递归这一过程。大致想法就是创建个函数指针类型的栈，然后将每个子排序的函数指针压入其中，然后再一个一个用*解引用来运行函数。当然我知道改成非递归有别的方法，但是可能会比这复杂，就想考虑用栈来实现。我想知道的是，对于快排和归并等递归排序算法，用以上方法实现的话，算法的开销（时间复杂度和空间复杂度），以及实际效率会是如何，有实际意义么。问题描述不全，毕竟第一次在CSDN提问，望前辈们多看看。本人大二，学了c++ java。"]], "Tag": "算法设计"}
{"Answer": "不管什么结构，插入到表尾就是了，只要表空间够用\r\n如果是需要排序，\r\n先各自排序，再插入排序\r\n如果是已经有序，也是插入排序", "Konwledge_Point": "归并排序", "Question": ["[C++]线性表的合并问题", ["设计线性表的接口函数int MergeList(LIST&L1 ,LIST L2); \n把线性表L2中的数据全部合并到线性表L1的尾部。\n不用排序,直接合并\n如下所示：\nL1中有数据{1,2,3,4,5}，L2中有数据 {6,7,8,9,10}；\n合并的结果为L1中包含数据 {1,2,3,4,5,6,7,8,9,10}。\n\n\n'#include <iostream>\nusing namespace std;\n'#define LISTSIZE 100\ntypedef struct \n{\n    int items[LISTSIZE];\n    int length;\n}sqlist;\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如果假定一个有序一个无序&amp;#xff0c;是不是就相当于求逆序对个数O(nlogn)&lt;br /&gt;实现这个假定的时间复杂度是O(n)&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["排序算法题（有关逆序对）", ["首先，题目如下", "\n", "我的想法是利用归并，分别将两个数组逆序对存到两个哈希集合中，然后再遍历其中一个求出相同逆序对个数，得到答案。但最终超时。求问是否有更好的思路，或者提供相关资料，感谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题目里给出的条件是&amp;#xff1a;L1和L2是给定的带头结点的单链表&amp;#xff0c;List Merge( List L1, List L2 ); 函数里的操作要注意&amp;#xff0c;修改如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ElementType;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Node&lt;/span&gt;* PtrToNode;\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Node&lt;/span&gt; {\n    ElementType Data;\n    PtrToNode   Next;\n};\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; PtrToNode List;\n&lt;span class=\"hljs-function\"&gt;List &lt;span class=\"hljs-title\"&gt;Read&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;/* 细节在此不表 */&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(List L)&lt;/span&gt;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;/* 细节在此不表&amp;#xff1b;空链表将输出NULL */&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;List &lt;span class=\"hljs-title\"&gt;Merge&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(List L1, List L2)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    List L1 &amp;#61; &lt;span class=\"hljs-literal\"&gt;nullptr&lt;/span&gt;, L2 &amp;#61; &lt;span class=\"hljs-literal\"&gt;nullptr&lt;/span&gt;, L;\n    &lt;span class=\"hljs-built_in\"&gt;srand&lt;/span&gt;((&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;)&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;(&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;));\n    L1 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;Read&lt;/span&gt;();\n    L2 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;Read&lt;/span&gt;();\n    L &amp;#61; &lt;span class=\"hljs-built_in\"&gt;Merge&lt;/span&gt;(L1, L2);\n    &lt;span class=\"hljs-built_in\"&gt;Print&lt;/span&gt;(L);\n    &lt;span class=\"hljs-built_in\"&gt;Print&lt;/span&gt;(L1);\n    &lt;span class=\"hljs-built_in\"&gt;Print&lt;/span&gt;(L2);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;span class=\"hljs-function\"&gt;List &lt;span class=\"hljs-title\"&gt;Read&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    List p, q, tmp;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, n;\n    p &amp;#61; q &amp;#61; (List)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Node));\n    p-&amp;gt;Next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入链表的长度:&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n    {\n        tmp &amp;#61; (List)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Node));\n        tmp-&amp;gt;Next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n        tmp-&amp;gt;Data &amp;#61; &lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;() % &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        \n        p-&amp;gt;Next &amp;#61; tmp;\n        p &amp;#61; tmp;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; q;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(List L)&lt;/span&gt;\n&lt;/span&gt;{\n    List p &amp;#61; L-&amp;gt;Next;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, p-&amp;gt;Data);\n        p &amp;#61; p-&amp;gt;Next;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;cmpfunc&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;* a, &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;* b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; (*(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*)a - *(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*)b);\n}\n\n&lt;span class=\"hljs-function\"&gt;List &lt;span class=\"hljs-title\"&gt;Merge&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(List L1, List L2)&lt;/span&gt;\n&lt;/span&gt;{\n    List p, q, s, L;\n                         &lt;span class=\"hljs-comment\"&gt;//L &amp;#61; (List)malloc(sizeof(List));&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, num &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n                         &lt;span class=\"hljs-comment\"&gt;//临时变量yyds&lt;/span&gt;\n    p &amp;#61; L1-&amp;gt;Next, q &amp;#61; L2-&amp;gt;Next;\n                        &lt;span class=\"hljs-comment\"&gt;//s &amp;#61; L;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)   &lt;span class=\"hljs-comment\"&gt;//while (p-&amp;gt;Next !&amp;#61; NULL)&lt;/span&gt;\n    {\n        a[i&amp;#43;&amp;#43;] &amp;#61; p-&amp;gt;Data;\n        p &amp;#61; p-&amp;gt;Next;\n        num&amp;#43;&amp;#43;;\n    }\n                         &lt;span class=\"hljs-comment\"&gt;//p-&amp;gt;Next &amp;#61; q;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (q !&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;//while (q-&amp;gt;Next !&amp;#61; NULL)&lt;/span&gt;\n    {\n        a[i&amp;#43;&amp;#43;] &amp;#61; q-&amp;gt;Data;\n        q &amp;#61; q-&amp;gt;Next;\n        num&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;qsort&lt;/span&gt;(a, num, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;), cmpfunc);\n\n    s &amp;#61; L &amp;#61; (List)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Node));\n    L-&amp;gt;Next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; num; i&amp;#43;&amp;#43;)\n    {    \n        L-&amp;gt;Next&amp;#61;(List)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Node));&lt;span class=\"hljs-comment\"&gt;//L-&amp;gt;Next&amp;#61;(List)malloc(sizeof(List));&lt;/span&gt;\n        L-&amp;gt;Next-&amp;gt;Data &amp;#61; a[i];\n        L-&amp;gt;Next-&amp;gt;Next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n        L &amp;#61; L-&amp;gt;Next;\n    }\n    &lt;span class=\"hljs-comment\"&gt;//L1-&amp;gt;Next &amp;#61; NULL;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//L2-&amp;gt;Next &amp;#61; NULL;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; s;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["关于新链表创建的具体问题", ["原题是PTA02-线性结构1 两个有序链表序列的合并", "本题要求实现一个函数，将两个链表表示的递增整数序列合并为一个非递减的整数序列。", "函数接口定义：", "List Merge( List L1, List L2 );", "其中List结构定义如下：", "\n", "typedef struct Node ", "PtrToNode;", "struct Node {", "    ElementType Data; /", " 存储结点数据 ", "/", "    PtrToNode   Next; /", " 指向下一个结点的指针 ", "/", "};", "typedef PtrToNode List; /", " 定义单链表类型 */", "L1和L2是给定的带头结点的单链表，其结点存储的数据是递增有序的；函数Merge要将L1和L2合并为一个非递减的整数序列。应直接使用原序列中的结点，返回归并后的带头结点的链表头指针。", "\n", "裁判测试程序样例：", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n\n", "typedef", " ", "int", " ElementType;\n", "typedef", " ", "struct", " ", "Node", " *PtrToNode;\n", "struct", " ", "Node", " {\n    ElementType Data;\n    PtrToNode   Next;\n};\n", "typedef", " PtrToNode List;\n\n", "List ", "Read", "()", "; ", "/* 细节在此不表 */", "\n", "void", " ", "Print", "( List L )", "; ", "/* 细节在此不表；空链表将输出NULL */", "\n\n", "List ", "Merge", "( List L1, List L2 )", ";\n\n", "int", " ", "main", "()", "\n", "{\n    List L1, L2, L;\n    L1 = ", "Read", "();\n    L2 = ", "Read", "();\n    L = ", "Merge", "(L1, L2);\n    ", "Print", "(L);\n    ", "Print", "(L1);\n    ", "Print", "(L2);\n    ", "return", " ", "0", ";\n}\n", "\n", "我写的函数部分如下:", "\n", "int", " cmpfunc (", "const", " ", "void", " * a, ", "const", " ", "void", " * b)\n{\n   ", "return", " ( *(", "int", "*)a - *(", "int", "*)b );\n}\n\n\n", "List", " Merge( ", "List", " L1, ", "List", " L2 )\n{\n    ", "List", " p,q,s,L;\n    \n    L=(", "List", ")malloc(sizeof(", "List", "));\n    ", "int", " i=", "0", ",num=", "1", ";\n    ", "int", " a[", "10000", "];\n    \n    ", "//临时变量yyds", "\n    p=L1,q=L2;\n    s=L;\n    \n    ", "while", "(p->Next!=", "NULL", ")\n    {\n        a[i++]=p->Data;\n        p=p->Next;\n        num++;\n    }\n    \n    p->Next=q;\n    \n    ", "while", "(q->Next!=", "NULL", ")\n    {\n        a[i++]=q->Data;\n        q=q->Next;\n        num++;\n    }\n    \n    qsort(a,num,sizeof(", "int", "),cmpfunc);\n    \n    ", "for", "(i=", "0", ";i<num;i++)\n    {\n        L->Data=a[i];\n", "//      L->Next=(List)malloc(sizeof(List));", "\n        L=L->Next;\n    }\n    \n    L1->Next=", "NULL", ";\n    L2->Next=", "NULL", ";\n    \n    ", "return", " s;\n}\n\n", "\n", "核心逻辑是将两个短的链表连起来,然后用一个数组放入所有的数据,再用c语言自带的qsort函数排序,但除了两个空链表的情况,永远都是段错误,我想过是否是我每增加一个新节点是否需要再次申请空间,在句中加入了 L->Next=(List)malloc(sizeof(List)); 但这样会全错,从新链表实际是否占有空间角度出发好像不对,思考了很久还是没想到问题出现在哪里", "\n", "此问题最快的O(n)算法我已经学习过了,但仍想找到自己的问题,所以来咨询大家!超级感谢!"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-section\"&gt;#include &lt;span class=\"language-xml\"&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;stdio.h&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-section\"&gt;#include &lt;span class=\"language-xml\"&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;stdlib.h&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;/\n/&lt;span class=\"hljs-emphasis\"&gt;* 链表实现的头文件&amp;#xff0c;文件名slnklist.h *&lt;/span&gt;/\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;/\ntypedef int datatype;\ntypedef struct link&lt;span class=\"hljs-emphasis\"&gt;_node {\n    datatype info;\n    struct link_&lt;/span&gt;node &lt;span class=\"hljs-emphasis\"&gt;*next;\n}node;\n\n\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;*&lt;/span&gt;/\n/&lt;span class=\"hljs-emphasis\"&gt;*  函数功能&amp;#xff1a;建立一个空的带头结点的单链表           *&lt;/span&gt;/\n/&lt;span class=\"hljs-emphasis\"&gt;*  函数参数&amp;#xff1a;空                                     *&lt;/span&gt;/\n/&lt;span class=\"hljs-emphasis\"&gt;*  函数返回值&amp;#xff1a;指向node类型变量的指针             *&lt;/span&gt;/\n/&lt;span class=\"hljs-emphasis\"&gt;*  文件名&amp;#xff1a;hlnklist.c&amp;#xff0c;函数名&amp;#xff1a;init()                    *&lt;/span&gt;/\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt; &lt;span class=\"hljs-emphasis\"&gt;*/\nnode *&lt;/span&gt;init()\n{\n&lt;span class=\"hljs-code\"&gt;    node *head;\n    head &amp;#61; (node*)malloc(sizeof(node));\n    head-&amp;gt;next &amp;#61; NULL;\n    return head;\n}\n&lt;/span&gt;\n\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  函数功能&amp;#xff1a;输出带头结点的单链表中各个结点的值     &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  函数参数&amp;#xff1a;指向node类型变量的指针head            &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt; 函数返回值&amp;#xff1a;无                          &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  文件名&amp;#xff1a;hlnklist.c&amp;#xff0c;函数名&amp;#xff1a;display()               &lt;span class=\"hljs-emphasis\"&gt;*/\n  /&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;*&lt;/span&gt;/\nvoid display(node &lt;span class=\"hljs-emphasis\"&gt;*head)\n{\n    node *&lt;/span&gt;p;\n&lt;span class=\"hljs-code\"&gt;    p &amp;#61; head-&amp;gt;next;/*从第一个&amp;#xff08;实际&amp;#xff09;结点开始*/\n    if (!p) printf(&amp;#34;\\n带头结点的单链表是空的!&amp;#34;);\n    else\n    {\n        printf(&amp;#34;\\n带头结点的单链表各个结点的值为&amp;#xff1a;\\n&amp;#34;);\n        while (p) { printf(&amp;#34;%5d&amp;#34;, p-&amp;gt;info); p &amp;#61; p-&amp;gt;next; }\n    }\n}\n&lt;/span&gt;\n\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  函数功能&amp;#xff1a;在带头结点的单链表中查找第i个结点地址 &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  函数参数&amp;#xff1a;指向node类型变量的指针head           &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;             int类型变量i                          &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  函数返回值&amp;#xff1a;指向node类型变量的指针head          &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  文件名hlnklist.c&amp;#xff0c;函数名find()                     &lt;span class=\"hljs-emphasis\"&gt;*/\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;*&lt;/span&gt;/\nnode &lt;span class=\"hljs-emphasis\"&gt;*find(node *&lt;/span&gt;head, int i)\n{\n&lt;span class=\"hljs-code\"&gt;    int j &amp;#61; 0;\n    node *p &amp;#61; head;\n    if (i &amp;lt; 0) { printf(&amp;#34;\\n带头结点的单链表中不存在第%d个结点&amp;#xff01;&amp;#34;, i); return NULL; }\n    else if (i &amp;#61;&amp;#61; 0) return p;/*此时p指向的是头结点*/\n    while (p&amp;amp;&amp;amp;i !&amp;#61; j)/*没有查找完并且还没有找到*/\n    {\n        p &amp;#61; p-&amp;gt;next; j&amp;#43;&amp;#43;;/*继续向后&amp;#xff08;左&amp;#xff09;查找&amp;#xff0c;计数器加1*/\n    }\n    return p;/*返回结果&amp;#xff0c;i&amp;#61;0时&amp;#xff0c;p指示的是头结点*/\n}\n&lt;/span&gt;\n\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;**&lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  函数功能&amp;#xff1a;在带头结点的单链表中第i个结点后插入一个值为x的新结点 &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  函数参数&amp;#xff1a;指向node类型变量的指针head                              &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;            datatype 类型变量x&amp;#xff0c;int型变量i                            &lt;span class=\"hljs-emphasis\"&gt;*/\n /*&lt;/span&gt;  函数返回值&amp;#xff1a;指向node类型变量的指针head                           &lt;span class=\"hljs-emphasis\"&gt;*/\n /*&lt;/span&gt; 文件名&amp;#xff1a;hlnklist.c&amp;#xff0c;函数名&amp;#xff1a;insert()                     &lt;span class=\"hljs-emphasis\"&gt;*/\n /&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;**&lt;span class=\"hljs-emphasis\"&gt;*/\nnode *&lt;/span&gt;insert(node &lt;span class=\"hljs-emphasis\"&gt;*head, datatype x, int i)\n{\n    node *&lt;/span&gt;p, &lt;span class=\"hljs-emphasis\"&gt;*q;\n    q &amp;#61; find(head, i);/*&lt;/span&gt;查找带头结点的单链表中的第i个结点&lt;span class=\"hljs-emphasis\"&gt;*/\n                            /*&lt;/span&gt;i&amp;#61;0&amp;#xff0c;表示新结点插入在头结点之后&amp;#xff0c;此时q指向的是头结点&lt;span class=\"hljs-emphasis\"&gt;*/\n    if (!q)/*&lt;/span&gt;没有找到&lt;span class=\"hljs-emphasis\"&gt;*/\n    {\n        printf(&amp;#34;\\n带头结点的单链表中不存在第%d个结点&amp;#xff01;不能插入%d&amp;#xff01;&amp;#34;, i, x); return head;\n    }\n    p &amp;#61; (node*&lt;/span&gt;)malloc(sizeof(node));/&lt;span class=\"hljs-emphasis\"&gt;*为准备插入的新结点分配空间*&lt;/span&gt;/\n    p-&amp;gt;info &amp;#61; x;/&lt;span class=\"hljs-emphasis\"&gt;*为新结点设置值x*&lt;/span&gt;/\n    p-&amp;gt;next &amp;#61; q-&amp;gt;next;/&lt;span class=\"hljs-emphasis\"&gt;*插入(1)*&lt;/span&gt;/\n    q-&amp;gt;next &amp;#61; p;/&lt;span class=\"hljs-emphasis\"&gt;*插入(2)&amp;#xff0c;当i&amp;#61;0时&amp;#xff0c;由于q指向的是头结点&amp;#xff0c;本语句等价于head&amp;gt;next&amp;#61;p *&lt;/span&gt;/\n    return head;\n}\n\n\nnode &lt;span class=\"hljs-emphasis\"&gt;*mergelist(node *&lt;/span&gt;head1, node &lt;span class=\"hljs-emphasis\"&gt;*head2)  /*&lt;/span&gt;本函数的作用是将两个有序表按结点值的大小合并成一个有序表&amp;#xff0c;将本函数补充完整&lt;span class=\"hljs-emphasis\"&gt;*/\n{\n    node *&lt;/span&gt;p, &lt;span class=\"hljs-emphasis\"&gt;*q, *&lt;/span&gt;s;\n    p &amp;#61; head1-&amp;gt;next;\n    q &amp;#61; head2-&amp;gt;next;\n    node &lt;span class=\"hljs-emphasis\"&gt;*head3;\n    head3 &amp;#61; head1;\n    head3-&amp;gt;next &amp;#61; NULL;\n    free(head2);\n    while (p !&amp;#61; NULL &amp;amp;&amp;amp; q !&amp;#61; NULL) {\n        if (p-&amp;gt;info &amp;lt; q-&amp;gt;info) {\n            s &amp;#61; p;\n            p &amp;#61; p-&amp;gt;next;\n        }\n        else {\n            s &amp;#61; q;\n            q &amp;#61; q-&amp;gt;next;\n        }\n        s-&amp;gt;next &amp;#61; head3-&amp;gt;next;\n        head3-&amp;gt;next &amp;#61; s;\n    }\n    if (p &amp;#61;&amp;#61; NULL) {\n        p &amp;#61; q;\n    }\n    while (p !&amp;#61; NULL) {\n        s &amp;#61; p;\n        p &amp;#61; p-&amp;gt;next;\n        s-&amp;gt;next &amp;#61; head3-&amp;gt;next;\n        head3-&amp;gt;next &amp;#61; s;\n    }\n    node *&lt;/span&gt;ans &amp;#61; init();\n    p &amp;#61; head3-&amp;gt;next;\n    while (p !&amp;#61; NULL) {\n        s &amp;#61; p;\n        p &amp;#61; p-&amp;gt;next;\n        s-&amp;gt;next &amp;#61; ans-&amp;gt;next;\n        ans-&amp;gt;next &amp;#61; s;\n    }\n    return ans;\n}\nint main()\n{\n    node &lt;span class=\"hljs-emphasis\"&gt;*L1, *&lt;/span&gt;L2;\n    datatype y;\n    int j, n;\n\n    L1 &amp;#61; init();  L2 &amp;#61; init();\n\n    /&lt;span class=\"hljs-emphasis\"&gt;*建表*&lt;/span&gt;/\n    printf(&amp;#34;请输入带头结点单链表A的结点个数&amp;#xff1a;&amp;#34;);  scanf(&amp;#34;%d&amp;#34;, &amp;amp;n);\n    printf(&amp;#34;请输入带头结点单链表A的结点值&amp;#xff1a;&amp;#34;);\n    for (j &amp;#61; 0; j &amp;lt; n; j&amp;#43;&amp;#43;)\n    {\n        scanf(&amp;#34;%d&amp;#34;, &amp;amp;y);  L1 &amp;#61; insert(L1, y, j);\n    }\n    display(L1);\n    printf(&amp;#34;\\n&amp;#34;);\n    printf(&amp;#34;请输入带头结点单链表B的结点个数&amp;#xff1a;&amp;#34;);  scanf(&amp;#34;%d&amp;#34;, &amp;amp;n);\n    printf(&amp;#34;请输入带头结点单链表B的结点值&amp;#xff1a;&amp;#34;);\n    for (j &amp;#61; 0; j &amp;lt; n; j&amp;#43;&amp;#43;)\n    {\n        scanf(&amp;#34;%d&amp;#34;, &amp;amp;y);  L2 &amp;#61; insert(L2, y, j);\n    }\n    display(L2);\n    printf(&amp;#34;\\n&amp;#34;);\n\n    /&lt;span class=\"hljs-emphasis\"&gt;*在此处完成对mergelist函数的调用&amp;#xff0c;并进行测试*&lt;/span&gt;/\n    node &lt;span class=\"hljs-emphasis\"&gt;*L3 &amp;#61; mergelist(L1, L2);\n    printf(&amp;#34;输出合并后的链表&amp;#xff1a;&amp;#34;);\n    display(L3);\n}\n\n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["各位善良的学长学姐们  帮学妹看看如何写出一个完整的有序表合并的代码吧", ["#include", "using namespace std;", "\n", "template", "struct LNode", "{ DT data;", "  LNode ", "next;", "};", "//初始化单链表", "template", "bool InitList(LNode", "&L)", "{  L=new LNode;", "   if(!L)exit(1);", "   L->next=NULL;", "   return true;", "}", "//创建单链表", "template", "  //尾插法", "bool CreateList(LNode*&L,int n)", "{ LNode *p;", "    p=L;", "LNode ", "s;", "for(int i=1;i<=n;i++)", "    {", "    s=new LNode", ";", "    if(!s)", "     return false;", "    cin>>s->data;", "    s->next=p->next ;", "    p->next=s;", "    p=s;", "    }", "    return true;", "}", "//销毁单链表", "template", "void DestroyList(LNode", "&L)", "{", "    LNode", " *p;", " while(L)", " {  p=L;", "       L=L->next;", "    delete p;", " }", " L=NULL;", "}", "//遍历输出表", "template", "void DispList(LNode *&L)", "{", "LNode *p;", "p=L->next ;", "  while(p)", "  {", "   cout<", "data;", "   p=p->next;", "  }", "}", "//从小到大排序", "template", "void sort(LNode *&L)", "{", "    LNode *p,*q,*min;", "    for(p=L->next;p!=NULL;p=p->next)", "    {", "        min=p;", "        for(q=p->next;q!=NULL;q=q->next)", "        {", "            if(q->data", "data)", "                min=q;", "\n", "    }\n    ", "if", "(min!=p)\n    {\n        ", "int", " temp=p->", "data", ";\n        ", "p", "->", "data", "=min->", "data", ";\n        ", "min", "->", "data", "=temp;\n    }\n}\n", "\n", "}", "\n", "int main()", "{  int i;", "   LNode", "  *LA;", "   LNode", "  *LB;", "   LNode", "  *LC;", "   InitList(LA);", "   InitList(LB);", "   InitList(LC);", "\n", "cout", "<<", "\"请输入创建链表LA的元素个数：\"", ";\n", "cin", ">>i;\n", "cout", "<<", "\"请依次输入集合A元素为：\"", ";\n", "CreateList", "(", "LA", ",i);\n", "cout", "<<", "\"有序表LA= \"", ";\n", "sort", "(", "LA", ");\n", "DispList", "(", "LA", ");\n\n", "cout", "<<endl;\n", "cout", "<<", "\"请输入创建链表LB的元素个数：\"", ";\n", "cin", ">>i;\n", "cout", "<<", "\"请依次输入集合B元素为：\"", ";\n", "CreateList", "(", "LB", ",i);\n", "cout", "<<", "\"有序表LB= \"", ";    \n", "sort", "(", "LB", ");\n", "DispList", "(", "LB", ");\n\n", "LNode", "<int> *pa=", "LA", "->next;\n", "LNode", "<int> *pb=", "LB", "->next;\n    \n", "if", "(", "LB", "->next==", "NULL", ")\n    ", "DispList", "(", "LA", ");\n", "if", "(", "LA", "->next==", "NULL", ")\n    ", "DispList", "(", "LB", ");\n        \n", "LNode", "<int> *pc=", "LC", ";          \n    while(pa && pb)\n    {        \n    ", "if", "(pa ->", "data", " <= pb->", "data", ")", "\n      {\n        pc->", "data", " = pa->", "data", " ;", "\n        pa = pa->next;\n      }\n    ", "else", "\n      {\n        pc->", "data", " =pb->", "data", ";", "\n        pb = pb->next;\n      }\n    }\n\n    while(pa)\n    {            \n        pc->next = pa;\n        pc= pa;\n        pa = pa->next;\n    }\n    while(pb)\n    {      \n        pc->next = pb;\n        pc= pb;\n        pb = pb->next;\n    }\n\n\n", "CreateList", "(", "LC", ",pc->", "data", ");", "\n", "cout", "<<", "\"有序表归并表LC= \"", ";\n", "for", "(pc=", "LC", "->next;pc!=", "NULL", ";pc=pc->next)\n    {\n        cout<<pc->", "data", ";", "\n    }\n\n    \n", "cout", "<<endl;\n", "\n", "   return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "1 3\r\n1 4\r\n首先1和1比，得到1 1\r\n然后3和1(这里的1是指第二个1)比，得到1 1 3\r\n最后3和4比，得到1 1 3 4\r\n后一个类似\r\n\r\n再举一个例子\r\n1 3 6和2 7 8归并\r\n首先1 2比得到1 2（此时可以得知第二个数组没有比2小的数字，但是第一个数组不一定，所以下面用第一个数组的3和2比）\r\n然后3 2比，得到1 2 3（此时可以得知第一个数组没有比3小的，但是第二个数组不一定，所以下面用3 7比）\r\n然后3 7比，得到1 2 3 7\r\n然后6 7比，得到1 2 3 6 7（此时第一个数组比完了，不会再有比6大的，输出第二个数组剩下的）\r\n结束，得到1 2 3 6 7 8", "Konwledge_Point": "归并排序", "Question": ["归并排序比较次数问题", ["第二趟排序，为什么前半部分比较次数和后半部门比较次数都是3，是那些数在比较，求大神。百度了很久都没找到"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你可以参考如下链接&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://www.cnblogs.com/942267027wzmblog/p/6882267.html\" id=\"textarea_1631786425244_1631786474087_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;C语言归并排序&amp;#xff08;合并排序&amp;#xff09;算法及代码 - Alex_ShineSky - 博客园&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;归并排序也称合并排序&amp;#xff0c;其算法思想是将待排序序列分为两部分&amp;#xff0c;依次对分得的两个部分再次使用归并排序&amp;#xff0c;之后再对其进行合并。仅从算法思想上了解归并排序会觉得很抽象&amp;#xff0c;接下来就以对序列A[0], A[l]…, A&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://common.cnblogs.com/favicon.svg\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.cnblogs.com/942267027wzmblog/p/6882267.html&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;br /&gt;如果对你有帮助&amp;#xff0c;可以给我个采纳吗&amp;#xff0c;谢谢!! 点击我这个回答右上方的&lt;strong&gt;【采纳】&lt;/strong&gt;按钮&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["使用C++归并排序的方法", ["使用C++", "通过奥运举重比赛运动员出场顺序的案例分析，掌握分而治之归并排序算法的应用 。", "输入：", "8个运动员参加比赛，每个运动员试举重量分次输入，如下：", "姓名    A    B    C    D    E    F    G    H", "试举1    98    95    95    93    92    90    100    96", "试举2    99    101    103    94    107    91    102    97", "试举3    100    102    104    105    108    109    104    101", "输出：形式如下", "出场顺序号    姓名    试举次数    试举重量", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24            "]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/yinheyi/p/10840465.html", "Konwledge_Point": "归并排序", "Question": ["关于C++算法中归并排序的问题", ["求助大神，我写的这个归并排序的代码有什么问题，为什么程序运行后什么也不输出呢？", "\n\n", "#include<iostream>\nusing namespace std;\nvoid erfen(int A[],int low,int high);\nvoid paixu(int A[],int low,int mid,int high);\n\nint main()\n{\n    int num[2] = {3,4};\n    erfen(num, 0,1);\n    for (int i = 0; i < 2; i++)\n        cout << num[i] << endl;\n\n    return 0;\n}\nvoid paixu(int A[], int low, int mid, int high)\n{\n    int* B = new int[high - low + 1];\n    int i = low;\n    int j = mid + 1;\n    int k = 0;\n    while (i <= mid && j <= high)\n    {\n        if (A[i] <= A[j])B[k++] = A[i++];\n        else B[k++] = A[j++];\n    }\n    while (i <= mid)B[k++] = A[i++];\n    while (j <= high) B[k++] = A[j++];\n    //填充原数组\n    for (int x = low, k = 0; x <= high; i++)\n        A[i] = B[k++];\n    delete [] B;\n}\nvoid erfen(int A[], int low, int high)\n{\n\n    if (low < high)\n    {\n        int mid = (low + high) / 2;\n        erfen(A,low,mid);\n        erfen(A, mid + 1,high);\n        paixu(A, low, mid, high);\n    }\n}\n\n", "\n\n", "程序运行后，先是卡住几秒，然后输出“请按任意键继续...”"]], "Tag": "算法设计"}
{"Answer": "找到两处问题\r\n1.t应该从l开始\r\n2.l中间已经修改了\r\n修改后代码如下\r\n\r\n\r\n```\r\n #include&lt;stdio.h&gt;\r\n#include &lt;iostream&gt;\r\nusing namespace std;\r\nint a[100]; \r\nvoid merge(int m[],int l,int r,int rightend);\r\nvoid sort(int m[],int l,int r);\r\nvoid msort();\r\nint n;\r\nint main()\r\n{\r\n  cin&gt;&gt;n;\r\n  for(int i=0;i &lt;n;++i)\r\n  {\r\n    cin&gt;&gt;a[i];\r\n  }\r\n  msort();\r\n  for(int i=0;i&lt;n;i++)\r\n  {\r\n    cout&lt;&lt;a[i]&lt;&lt;\" \";\r\n  }\r\n}\r\nvoid sort(int m[],int l, int r)\r\n{\r\n  int center;\r\n  if(l&lt;r)\r\n  {\r\n    center=(l+r)/2;\r\n    sort(m,l,center);\r\n    sort(m,center+1,r);\r\n    merge(m,l,center+1,r);\r\n  }\r\n}\r\nvoid merge(int m[],int l,int r,int rightend)\r\n{\r\n  //这里的t应该从该l开始而不是从0 开始\r\n  int t=l;\r\n  //这里要将l保存下来\r\n  int start = l;\r\n  int leftend=r-1;\r\n  while(l&lt;=leftend &amp;&amp; r&lt;=rightend)\r\n  {\r\n    if(a[l]&lt;=a[r])\r\n    {\r\n      m[t++]=a[l++];\r\n    }\r\n    else\r\n    {\r\n      m[t++]=a[r++];\r\n    }\r\n  }\r\n  while(l&lt;=leftend) m[t++]=a[l++];\r\n  while(r&lt;=rightend) m[t++]=a[r++];\r\n\r\n  //因为上面的l++,已经将l加到了leftend\r\n  //这里应该从开始start 到 最后的 t 都应该修改\r\n  for(int i=start;i&lt;t;i++)\r\n  {\r\n    a[i]=m[i];\r\n  }\r\n}\r\nvoid msort()\r\n{\r\n  int temp[100];\r\n  sort(temp,0,n-1);\r\n}\r\n\r\n```", "Konwledge_Point": "归并排序", "Question": ["用c++实现归并排序的问题", ["打算用递归法实现归并排序，但结果总是不对，找不到问题，求大佬解答", "\n#include", "\nusing namespace std;", "\nint a[100]; ", "\nvoid merge(int m[],int l,int r,int rightend);", "\nvoid sort(int m[],int l,int r);", "\nvoid msort();", "\nint n;", "\nint main()", "\n{", "\n    cin>>n;", "\n    for(int i=0;i\n    {", "\n        cin>>a[i];", "\n    }", "\n    msort();", "\n    for(int i=0;i<n;i++)", "\n    {", "\n        cout<<a[i]<<\" \";", "\n    }", "\n}", "\nvoid sort(int m[],int l, int r)", "\n{", "\n    int center;", "\n    if(l<r)", "\n    {", "\n      center=(l+r)/2;", "\n      sort(m,l,center);", "\n      sort(m,center+1,r);", "\n      merge(m,l,center+1,r);", "\n    }", "\n}", "\nvoid merge(int m[],int l,int r,int rightend)", "\n{", "\n    int t=0;", "\n    int leftend=r-1;", "\n    while(l<=leftend&&r<=rightend)", "\n    {", "\n        if(a[l]<=a[r])", "\n        {", "\n            m[t++]=a[l++];", "\n        }", "\n        else", "\n        {", "\n            m[t++]=a[r++];", "\n        }", "\n    }", "\n    while(l<=leftend) m[t++]=a[l++];", "\n    while(r<=rightend) m[t++]=a[r++];", "\n    for(int i=0;i<t;i++)", "\n    {", "\n        a[l+i]=m[i];", "\n    }", "\n}", "\nvoid msort()", "\n{", "\n    int temp[100];", "\n    sort(temp,0,n-1);", "\n}"]], "Tag": "算法设计"}
{"Answer": "排序效率根本就不能单纯的说哪种比哪种高吧，建议看看算法导论", "Konwledge_Point": "归并排序", "Question": ["测试排序的效率,为什么:希尔排序>归并排序>快速排序?", ["我看看几篇排序的算法的文章,大家都说效率一般都是:快速排序>归并排序>希尔排序", "\n\n", "然后就用java自己动手测了一下,测试结果却是:希尔排序>归并排序>快速排序", "\n\n", "而且当数据量过大时,归并排序 和 快速排序 会出现栈溢出.", "\n\n", " ", "\n\n", "以下是我写的源代码,请帮我分析一下是什么原因?", "\n\n", " ", "\n\n", "package com.test;\n\nimport java.util.Arrays;\nimport java.util.Random;\n\npublic class Sort {\n    public static void main(String[] args) {\n        int[] arr = new int[400000];\n        Random r = new Random();\n\n        long start, end;\n\n        init(arr, r);\n        System.out.print(\"希尔排序...\");\n        start = System.currentTimeMillis();\n        sort1(arr);\n        end = System.currentTimeMillis();\n        System.out.println(\"完成\" + (end - start));\n        //System.out.println(Arrays.toString(arr));\n\n        init(arr, r);\n        System.out.print(\"归并排序...\");\n        start = System.currentTimeMillis();\n        arr = sort2(arr, 0, arr.length - 1);\n        end = System.currentTimeMillis();\n        System.out.println(\"完成\" + (end - start));\n        //System.out.println(Arrays.toString(arr));\n\n        init(arr, r);\n        System.out.print(\"快速排序...\");\n        start = System.currentTimeMillis();\n        sort3(arr, 0, arr.length - 1);\n        end = System.currentTimeMillis();\n        System.out.println(\"完成\" + (end - start));\n        //System.out.println(Arrays.toString(arr));\n\n    }\n\n    /**\n     * 初始化\n     */\n    private static void init(int[] arr, Random r) {\n        System.out.print(\"\\n初始化...\");\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] = r.nextInt(100);\n        }\n        //System.out.println(\"\\n\" + Arrays.toString(arr));\n    }\n\n    /**\n     * 希尔排序\n     */\n    private static void sort1(int[] a) {\n        int i, j, temp, increment;\n        // increment增量缩短，当增量为1时，即把整个数组进行插入排序\n        for (increment = a.length / 3; increment > 0; increment /= 3) {\n            for (i = increment; i < a.length; i++) {\n                temp = a[i];\n                for (j = i - increment; j >= 0 && temp < a[j]; j -= increment) {\n                    a[j + increment] = a[j];\n                }\n                a[j + increment] = temp;\n            }\n\n        }\n    }\n\n    /**\n     * 归并排序\n     * left,right参数表示:把a数组中fist--right之间的元素排序\n     * 排序结果以新数组返回.\n     */\n    private static int[] sort2(int[] a, int left, int right) {\n            //判断递归结束条件\n            if (right <= left) return new int[] { a[left] };\n            \n            //从数组中间切成左右两部分,mid为右边部分的起始下标\n            int mid = (left + right + 1) / 2;\n            //第一步:用递归把数组左边排序\n            int[] a1 = sort2(a, left, mid - 1);\n            //第二步:用递归把数组右边排序\n            int[] a2 = sort2(a, mid, right);\n            \n            //第三步:归并操作,把左右两边序列合并到新的数组\n            int[] result = new int[right - left + 1];\n            int i = 0, j = 0, k = 0;\n            while (i < a1.length && j < a2.length) {\n                if (a1[i] < a2[j])\n                    result[k++] = a1[i++];\n                else\n                    result[k++] = a2[j++];\n            }\n            while (j < a2.length) {\n                result[k++] = a2[j++];\n            }\n            while (i < a1.length) {\n                result[k++] = a1[i++];\n            }\n            return result;\n    }\n\n    /**\n     * 快速排序\n     * left,right参数表示:把a数组中left--right之间的元素排序\n     */\n    private static void sort3(int[] a, int left, int right) {\n        // 第四步:判断结束递归的条件\n        if(left>=right) return;\n        \n        // 第一步:以left为基数,把a分成左右两部分,使左边部分小于右边部分\n        int i = left;//最终i==j;\n        for (int b=1,j=right; i < j;) {// 最初b=1,表示以left为基数\n            if (a[i] > a[j]) {//交换位置\n                int temp = a[i];\n                a[i] = a[j];\n                a[j] = temp;\n                if (b==1) i++; else j--;//应基数位置不同,处理也不同\n                b = -b;//交换位置后,基数位置变化,b=1,表示以left为基数\n            } else {\n                if (b==1) j--; else i++;//应基数位置不同,处理也不同\n            }\n        }\n        // 第二步:递归排序左部分(left到i-1)\n        sort3(a,left,i-1);\n        // 第三步:递归排序右部分(i+1到right)\n        sort3(a,i+1,right);\n    }\n}\n", "\n\n", " 运行结果如下:", "\n\n", " ", "\n\n", "初始化...希尔排序...完成40", "初始化...归并排序...完成53", "初始化...快速排序...完成1411", "\n\n", " ", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "```\r\nwhile (i &lt; list1_size &amp;&amp; j &lt; list2_size)\r\n\t{\r\n\t\tif (list1[i] &lt; list2[j])   //把j写成i了\r\n\t\t{\r\n\t\t\ttemp[k++] = list1[i++];\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\ttemp[k++] = list2[j++];\r\n\t\t}\r\n\t}\r\n```", "Konwledge_Point": "归并排序", "Question": ["C语言归并排序问题 求解答", ["请大家帮我看一下这段代码的问题，谢谢了", "\n\n", "/*先拆分，再两两归并!*/\n\n#include<stdio.h>\n#define MAXSIZE 10\n\n/*归并后的数据存入list1*/\n\n\nvoid merging(int *list1, int list1_size, int *list2, int list2_size)//归并代码\n{\n    int temp[MAXSIZE];\n    int i, j, k;\n    int m;\n    i =j =k =0;\n\n\n    while(i < list1_size && j < list2_size)\n    {\n        if(list1[i] < list2[i])\n        {\n            temp[k++] = list1[i++];\n        }\n        else\n        {\n            temp[k++] = list2[j++];\n        }\n    }\n    while(i < list1_size)\n    {\n        temp[k++] = list1[i++];\n    }\n    while(j < list2_size)\n    {\n        temp[k++] = list2[j++];\n    }\n    for(m=0; m < (list1_size + list2_size); m++)\n    {\n        list1[m] = temp[m];\n    }\n}\n\n\n\nvoid MergeSort(int k[] , int n)//递归拆分代码\n{\n    if (n > 1)\n    {\n        int *list1 = k;\n        int list1_size = n/2;\n        int *list2 = k + n/2;\n        int list2_size = n - list1_size; \n\n        MergeSort(list1, list1_size);\n        MergeSort(list2, list2_size);\n\n        merging(list1, list1_size, list2, list2_size);//归并\n    }\n\n\n}\nint main()\n{\n    int i, a[10]={2,4,6,8,0,9,7,5,3,1};\n\n    MergeSort(a,10);\n\n    printf(\"排序后的结果是：\");\n\n    for(i=0;i<10;i++)\n    {\n        printf(\"%d \",a[i]);\n    }\n\n    printf(\"\\n\");\n\n    return 0;\n}\n\n", "\n\n", "图片说明"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;#include &amp;lt;iostream&amp;gt;\nusing namespace std;\n    void merge(int arr[], int start, int mid,int end)\n    { \n        mid &amp;#61; (start &amp;#43; end) / 2;\n        int mi &amp;#61; mid &amp;#43; 1;\n        int k &amp;#61; 0;\n        int  *tmp &amp;#61; new int[end-start&amp;#43;1];\n        int s &amp;#61; start;//下面start&amp;#43;&amp;#43;自增&amp;#xff0c;改变start的值&amp;#xff0c;s为start备份 \n        while (start &amp;lt;&amp;#61; mid &amp;amp;&amp;amp; mi &amp;lt;&amp;#61; end)\n        {\n            if (arr[start] &amp;lt;&amp;#61; arr[mi])//这里mid应该改为mi \n            {\n                tmp[k&amp;#43;&amp;#43;] &amp;#61; arr[start&amp;#43;&amp;#43;];\n            }\n            else \n            {\n                tmp[k&amp;#43;&amp;#43;] &amp;#61; arr[mi&amp;#43;&amp;#43;];\n            }\n           \n        }\n        //若其中一个没排完&amp;#xff0c;把剩下的元素放进tmp\n        while (start &amp;lt;&amp;#61; mid) \n            tmp[k&amp;#43;&amp;#43;] &amp;#61; arr[start&amp;#43;&amp;#43;];\n        while (mi&amp;lt;&amp;#61; end)  \n            tmp[k&amp;#43;&amp;#43;] &amp;#61; arr[mi&amp;#43;&amp;#43;];\n \n        for (int i &amp;#61; s, j &amp;#61; 0; i &amp;lt;&amp;#61; end; i&amp;#43;&amp;#43;, j&amp;#43;&amp;#43;) {//用start的备份s&amp;#xff0c;start已自增 \n            arr[i] &amp;#61; tmp[j];\n            cout &amp;lt;&amp;lt; tmp[j] &amp;lt;&amp;lt; &amp;#34; &amp;#34;;\n        }\n        cout&amp;lt;&amp;lt;endl;\n        delete []tmp;\n        tmp &amp;#61; nullptr;\n    }\n \n    void merge_sort(int arr[], int start, int end)//递归\n    {\n        \n        if (arr&amp;#61;&amp;#61;nullptr||end &amp;#61;&amp;#61; 0 || ( end-start)&amp;#61;&amp;#61;0)\n        {\n            return;\n        }\n        if(end-start &amp;#61;&amp;#61; 1){//少了一步 \n        \tif(arr[start]&amp;gt;arr[end]){\n        \t\tint temp &amp;#61; arr[start];\n        \t\tarr[start] &amp;#61; arr[end];\n        \t\tarr[end] &amp;#61; temp;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n       \n        if (start &amp;lt; end)\n        {\n            int mid &amp;#61; (start &amp;#43; end) / 2;\n            int middle &amp;#61; mid &amp;#43; 1;\n           \n            merge_sort(arr, start, mid);\n            merge_sort(arr, middle , end);\n            merge(arr, start, mid, end);//将两个有序子数组合并操作\n        }\n      \n       \n    }\n   \n \nint main()\n{\n    int a[] &amp;#61; {3,2,9,20,8,15,18};\n    int length &amp;#61; sizeof(a) / sizeof(a[0]);\n    merge_sort(a, 0, length-1);\n    for (int i &amp;#61; 0; i &amp;lt; length; i&amp;#43;&amp;#43;)\n        cout &amp;lt;&amp;lt; a[i] &amp;lt;&amp;lt; &amp;#34; &amp;#34;;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["关于归并排序的一些BUG", ["\n", "#include <iostream>\nusing namespace std;\n\n /**\n   * 归并排序\n   * 简介:将两个（或两个以上）\"有序\"表合并成一个新的有序表 即把待排序序列分为若干个子序列，\n   *     每个子序列是有序的。然后再把有序子序列合并为整体有序序列\n   * 时间复杂度为O(nlogn)\n   * 稳定排序方式\n   * @param nums 待排序数组\n    @return 输出有序数组\n   **/\n    void merge(int arr[], int start, int mid,int end)\n    { \n        mid = (start + end) / 2;\n        int mi = mid + 1;\n        int k = 0;\n        int  *tmp = new int[end+1];\n        \n        while (start <= mid && mi <= end)\n        {\n            if (arr[start] <= arr[mid])\n            {\n                tmp[k++] = arr[start++];\n            }\n            else \n            {\n                tmp[k++] = arr[mi++];\n            }\n           \n        }\n        //若其中一个没排完，把剩下的元素放进tmp\n        while (start <= mid) \n            tmp[k++] = arr[start++];\n        while (mi<= end)  \n            tmp[k++] = arr[mi++];\n\n        for (int i = start, j = 0; i <= end; i++, j++) {\n            arr[i] = tmp[j];\n        }\n        delete []tmp;\n        tmp = nullptr;\n    }\n\n    void merge_sort(int arr[], int start, int end)//递归\n    {\n        \n        if (arr==nullptr||end == 0 || ( end-start)<=1)\n        {\n            return;\n        }\n       \n        if (start < end)\n        {\n            int mid = (start + end) / 2;\n            int middle = mid + 1;\n           \n            merge_sort(arr, start, mid);\n            merge_sort(arr, middle , end);\n            merge(arr, start, mid, end);//将两个有序子数组合并操作\n        }\n      \n       \n    }\n   \n\nint main()\n{\n    int a[] = {3,2,9,20,8,15,18};\n    int length = sizeof(a) / sizeof(a[0]);\n    merge_sort(a, 0, length-1);\n    for (int i = 0; i < length; i++)\n        cout << a[i] << \" \";\n}\n\n", "\n\n", "输出的时候发现排序不成功，有没有大佬帮忙看一下是哪里的问题？"]], "Tag": "算法设计"}
{"Answer": "结果没变化的原因![图片说明](https://img-ask.csdn.net/upload/202003/25/1585145095_87678.png)", "Konwledge_Point": "归并排序", "Question": ["关于归并排序的输出问题", ["使用归并排序后输出的数组还是原来的形式，没有变化，求大佬解决", "\n\n", "#include<stdio.h>\nvoid merge(int arr[],int L,int M,int R)\n{\n    int left[M-L];\n    int right[R-M+1];\n    for(int i=L;i<M;i++)\n    {\n        left[i-L] = arr[i];\n    }\n    for(int i=M;i<=R;i++)\n    {\n        right[i-M] = arr[i];\n    }\n    int i=0,j=0,k=0;\n    while(i < M-L && j < R-M+1)\n    {\n        if(left[i] < right[j])\n        {\n        left[i] = arr[k];\n        i++;\n        k++;\n        }\n        else\n        {\n        right[j] = arr[k];\n        j++;\n        k++;\n        }\n    }\n    while(j < R-M+1)\n    {\n        right[j] = arr[k];\n        j++;\n        k++;\n    }\n\n    while(i < M-L)\n    {\n        left[i] = arr[k];\n        i++;\n        k++;\n    }\n}\n\nvoid merge_sort(int arr[],int L,int R)\n{\n    if(L == R)\n    return;\n    else \n    {   \n        int M = (L+R)/2;\n        merge_sort(arr,L,M); \n        merge_sort(arr,M+1,R); \n        merge(arr,L,M+1,R); \n    }\n}\n\nint main(void)\n{\n    int arr[] = {2,7,8,10,3,5,6,9}; \n    int L = 0;\n    int R = 7;\n    merge_sort(arr,L,R);\n    for(int i=0;i<=R;i++)\n    {\n        printf(\"%d \",arr[i]);\n    }\n    return 0;\n} \n"]], "Tag": "算法设计"}
{"Answer": "```\r\n#include&lt;stdlib.h&gt;\r\n#include&lt;string.h&gt;\r\n#include&lt;stdio.h&gt;\r\n//归并排序 先划分 分别排序 然后归并 \r\nint helper[100];\r\nvoid merger(int arr[], int left, int mid, int right, int *temp){\r\n\tint i = left;\r\n\tint j = mid + 1;\r\n\tint k = left;\r\n\twhile (i &lt;= mid&amp;&amp;j &lt;= right){\r\n\t\tif (arr[i] &lt; arr[j]){\r\n\t\t\ttemp[k++] = arr[i++];\r\n\t\t}\r\n\t\telse{\r\n\t\t\ttemp[k++] = arr[j++];\r\n\t\t}\r\n\t}\r\n\twhile (i &lt;= mid){\r\n\t\ttemp[k++] = arr[i++];\r\n\t}\r\n\twhile (j &lt;= right){\r\n\t\ttemp[k++] = arr[j++];\r\n\t}\r\n\tmemcpy(arr + left, temp + left, sizeof(int)*(right - left+1));\r\n}\r\nvoid mergesort(int arr[],int left,int right,int *temp){\r\n\tint mid = 0;\r\n\tif (left &lt; right){\r\n\t\tmid = left + (right - left) / 2;\r\n\t\tmergesort(arr, left, mid, temp);\r\n\t\tmergesort(arr, mid + 1, right, temp);\r\n\t\tmerger(arr, left, mid, right, temp);\r\n\t}\r\n}\r\nint main()\r\n{\r\nint a[]={1,3,5,7,9,2};\r\nmergesort(a,0,5,helper);\r\nfor(int i=0;i&lt;6;i++)\r\nprintf(\"%d \",a[i]);\r\n}\r\n\r\n```", "Konwledge_Point": "归并排序", "Question": ["请大神帮我看看 这归并排序哪里写错了", ["#include", "\n#include", "\n#include", "\n//归并排序  先划分 分别排序 然后归并 ", "\nint helper[100];", "\n\n", "void merger(int*a,int p,int mid,int r)", "\n{", "\n\n", "memcpy(helper,a,sizeof(int)*(r-p+1));\n\nint left=p;//左侧队伍头部指针，指向带比较的元素 \nint right=mid+1;//右侧 \nint current=p;//原数组指针，指向代填入数据的位置; \nwhile(left<=mid&&right<=r)\n{\n    if(helper[left]<=helper[right])\n    { a[current]=helper[left];\n       current++;\n       left++;\n    }else{\n        a[current]=helper[left];\n       current++;\n       right++;\n    }\n}\nwhile(left<=mid)\n{\n    a[current]=helper[left];\n    current++;\n    left++;\n}\n", "\n\n", "}", "\nvoid mergersort(int*a,int p,int r)", "\n{", "\n    if(p<r)", "\n    {", "\n        int mid=(p+r)/2;", "\n        mergersort(a,p,mid);", "\n        for(int i=0;i<3;i++)", "\n\n", "    mergersort(a,mid+1,r);\n    for(int i=3;i<6;i++)\n\n    merger(a,p,mid,r);\n}\n", "\n\n", "} ", "\nmain()", "\n{", "\n    int a[]={1,3,5,7,9,2};", "\n    mergersort(a,0,5);", "\n    for(int i=0;i<6;i++)", "\n    printf(\"%d\",a[i]);", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;像这种递归的排序一部都有三个参数&amp;#xff0c;数组&amp;#xff0c;开始位置&amp;#xff0c;结束位置&amp;#xff0c;你这就两个参数&amp;#xff0c;明显不对&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["C语言利用归并排序法实现数据从小到大排列，最后执行时没有结果，想问一下大家这段代码问题出在哪里？", ["\n"]], "Tag": "算法设计"}
{"Answer": "在针对java对象排序时，两个对象顺序一样，也只是一些key值一样，但是其他的成员变量不一样，这时就需要稳定的排序，保证原先在前面的对象排序后还是在前面。\r\n对于基本类型，如int, char，一样就是一样，没有先后顺序的区别。", "Konwledge_Point": "归并排序", "Question": ["java 针对基本类型设计了“快速排序”，针对对象设计的“稳定归并排序”为什么？", ["如题。为什么用两种不同方式？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;结束条件应该是 if(lo&amp;gt;&amp;#61;hi) return;&lt;br /&gt;否则一开始的时候lo&amp;#61;1,hi&amp;#61;19&amp;#xff0c;满足条件就结束了&lt;br /&gt;调试了一下&amp;#xff0c;改成 if(lo&amp;gt;&amp;#61;hi) return;后排序正确&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["归并排序未成功排序，求指正代码", ["编译器未报错，但是为什么没有正确由小到大的排序呢？", "\n", "#", "include", " <stdio.h>\n#", "include", " <stdbool.h>\n", "bool", " less(", "int", " a,", "int", " b);\nvoid ", "Merge(", "int", " ", "*", "a", ",", "int", " ", "lo", ",", "int", " ", "mid", ",", "int", " ", "hi", ")", ";", "//lo相当于left，hi相当于right。", "\nvoid ", "Sort(", "int", " ", "*", "a", ",", "int", " ", "lo", ",", "int", " ", "hi", ")", ";\n", "int", " main", "()", "\n{\n    ", "int", " i;\n    ", "int", " a", "[", "20", "]", "={", "1", ",", "4", ",", "3", ",", "5", ",", "7", ",", "8", ",", "5", ",", "4", ",", "7", ",", "9", ",", "11", ",", "43", ",", "54", ",", "32", ",", "56", ",", "234", ",", "6434", ",", "34", ",", "323", ",", "76", ",};\n    ", "int", " length=", "20", ";\n    ", "int", " lo=", "0", ";\n    ", "int", " hi=length-", "1", ";\n    ", "Sort(", "a", ",", "lo", ",", "hi", ")", ";\n    ", "for", "(i=", "0", ";i<length;i++)\n        printf(", "\"%d \"", ",a", "[", "i", "]", ");\n    return ", "0", ";\n}\n", "bool", " less(", "int", " a,", "int", " b)\n{\n    return a<=b;\n}\n \nvoid ", "Merge(", "int", " ", "*", "a", ",", "int", " ", "lo", ",", "int", " ", "mid", ",", "int", " ", "hi", ")", "\n{\n    ", "int", " aux", "[", "20", "]", ";\n    ", "int", " k;\n    ", "int", " i=lo;\n    ", "int", " j=mid+", "1", ";\n    ", "for", "(k=lo;k<=hi;k++)\n        aux", "[", "k", "]", "=a", "[", "k", "]", ";\n    ", "for", "(k=lo;k<=hi;k++){\n        ", "if", "(i>mid){\n            a", "[", "k", "]", "=aux", "[", "j", "++", "]", ";\n        }", "else", " ", "if", "(j>hi){\n            a", "[", "k", "]", "=aux", "[", "i", "++", "]", ";\n        }", "else", " ", "if", "(less(aux", "[", "j", "]", ",aux", "[", "i", "]", ")){\n            a", "[", "k", "]", "=aux", "[", "j", "++", "]", ";\n        }", "else", "{\n            a", "[", "k", "]", "=aux", "[", "i", "++", "]", ";\n        }      \n    }\n    return;\n}\nvoid ", "Sort(", "int", " ", "*", "a", ",", "int", " ", "lo", ",", "int", " ", "hi", ")", "\n{\n    ", "if", "(lo<=hi) return;\n    ", "int", " mid=lo+(hi-lo)/", "2", ";\n    ", "Sort(", "a", ",", "lo", ",", "mid", ")", ";", "//左半边排序", "\n    ", "Sort(", "a", ",", "mid", "+1,", "hi", ")", ";", "//右半边排序", "\n    ", "Merge(", "a", ",", "lo", ",", "mid", ",", "hi", ")", ";\n    return;\n}\n\n", "\n", "最后的输出仍然是原数组a的初始化数据，我甚至在想是不是根本没有比较。求指正。"]], "Tag": "算法设计"}
{"Answer": "我看到你这个问题，刚开始还以为是二分法，摸了半天瞎。后来发现时归并排序，然后我发现我也不会，就调你的程序，查资料什么事归并排序。\r\n然后发现其实问题很简单，\r\n\twhile(i&lt;=mid) {\r\n\t\ts[k++]=a[i++];\r\n\t}\r\n\twhile(j&lt;=end) {\r\n\t\ts[k++]=a[j++];\r\n\t}\r\n这个地方粗一看觉得是对的，但是后来我细想，要是1个排序的数组：4 5 3。然后经过你的这段程序，\r\nwhile(i&lt;=mid &amp;&amp; j&lt;=end) {\r\n\t\tif(a[i]&lt;a[j]) {\r\n\t\t\ts[k++]=a[i++];\r\n\t\t} else {\r\n\t\t\ts[k++]=a[j++];\r\n\t\t}\r\n\t}\r\n\r\nEnter 5 nimbers:\r\n5 4 3 2 1\r\n\r\n0-4\r\n0-2\r\n0-1\r\n0-0\r\n1-1\r\n 0 0 1\r\n    4    5    0    0    0\r\n2-2\r\n 0 1 2\r\n    3    4    0    0    0\r\n3-4\r\n3-3\r\n4-4\r\n 3 3 4\r\n    3    4    0    1    2\r\n 0 2 4\r\n    1    2    3    0    0\r\nThe sorted order is:\r\n    1    2    3    0    0\r\n第一次，把三排到最开始，i ++ 了，while就退出了，这是还有4 5没有合并，然后你下面的是if（），这就造成，最多只能加一个元素的情况，把5给\r\n丢了。现在是3 4，然后合并了 1 2，成了 3 4 0 1 2，在排序的时候，把 1 2 先拍， 这时候while退出，然后 就合并了一个 3 ， 4 给丢了。换成 while\r\n就行了。还有，定义数组要规范，然后还要初始化，这是规范化操作。我贴上了测试的数据。不知道你看不看得懂。", "Konwledge_Point": "归并排序", "Question": ["哪位大神知道我这个归并排序的代码究竟哪里出了问题？", ["代码如下：", "\n找了好久，实在找不出哪里的问题：", "\n\n", " #include<stdio.h>\nvoid merge(int s[],int a[],int start,int mid,int end) \n{\n    int i=start;\n    int j=mid+1;\n    int k=start;\n    while(i<=mid && j<=end) {\n        if(a[i]<a[j]) {\n            s[k++]=a[i++];\n        } else {\n            s[k++]=a[j++];\n        }\n    }\n    if(i<=mid) {\n        s[k++]=a[i++];\n    }\n    if(j<=end) {\n        s[k++]=a[j++];\n    }\n}\n\nvoid merge_sort(int s[],int a[],int start,int end) \n{\n    int t[20]; \n    int mid; \n    if(start==end) {\n        s[start]=a[start];\n    } else {\n        mid=(start+end)/2;\n        merge_sort(t,a,start,mid);\n        merge_sort(t,a,mid+1,end);\n        merge(s,t,start,mid,end);\n    }\n}\n\nint main()\n{\n    int i;\n    int n=5;\n    int a[n],s[n];\n    printf(\"Enter %d nimbers: \\n\",n);\n    for(i=0;i<n;i++) {\n        scanf(\"%d\",&a[i]);\n    }\n    printf(\"\\n\");\n    merge_sort(s,a,0,n-1);\n    printf(\"The sorted order is: \\n\");\n    for(i=0;i<n;i++) {\n        printf(\"%5d\",s[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n"]], "Tag": "算法设计"}
{"Answer": "while(i&lt;list2_size)\r\n    {\r\n        temp[k++]=list2[j++];\r\n    } \r\n\t\t\r\n这句中i改为j", "Konwledge_Point": "归并排序", "Question": ["归并排序问题，代码是按照教学视频打的，为什么会出错，显示一些奇奇怪怪的数字", ["如题，不知道是哪里疏漏了，请各位大神指教", "\n\n", "#include<stdio.h>\n#include<stdlib.h>\n\nvoid merging(int list1[],int list1_size,int list2[],int list2_size)\n{\n    int temp[8],i=0,j=0,k=0;\n    while(i<list1_size&&j<list2_size)\n    {\n        if(list1[i]<list2[j])\n        {\n            temp[k++]=list1[i++];\n        }\n        else\n        {\n            temp[k++]=list2[j++];\n        }\n    }\n    while(i<list1_size)\n    {\n        temp[k++]=list1[i++];\n    }   \n    while(i<list2_size)\n    {\n        temp[k++]=list2[j++];\n    }   \n    for(int m=0;m<(list1_size+list2_size);m++)\n    {\n        list1[m]=temp[m];\n    }\n}\nvoid merge_sort(int k[],int n)\n{\n    if(n>1)\n    {\n    int *list1=k;\n    int list1_size=n/2;\n    int *list2=k+n/2;\n    int list2_size=n/2;\n    merge_sort(list1,list1_size);\n    merge_sort(list2,list2_size);\n    merging(list1,list1_size,list2,list2_size);\n    }\n}\n\nint main()\n{\n    int a[8]={3,41,52,26,38,57,9,49};\n    merge_sort(a,8);\n    for(int i=0;i<8;i++)\n        printf(\"%d \",a[i]);\n    return 0;\n}\n"]], "Tag": "算法设计"}
{"Answer": "首先，int m=0; 这条语句有问题，应该是 int m=low;\r\n\r\n其次，\r\nfor(int i=0;i&lt;=len;++i){\r\n\t\t data[i]=data2[i];\r\n}\r\n这条语句有问题，应该是\r\n\r\nfor( int i = 0; i &lt; len; ++i,)\r\n\t\t data[ i + low ] = data2[ i ];\r\n}", "Konwledge_Point": "归并排序", "Question": ["归并排序中合并总是少一些数，那个排序的函数已经写好了。", ["int post_sort2(int data[] , int low   , int mid , int high)", "\n{", "\n    int len=high-low+1;", "\n    int data2[len];", "\n    int m=0;", "\n    int loc=0;", "\n    int n=mid+1;", "\n    while (m<=mid && n<=high)", "\n    {    if (data[m]<=data[n])", "\n        {    data2[loc]=data[m];", "\n            m=m+1;", "\n            loc=loc+1;", "\n        }", "\n        else", "\n        {    data2[loc]=data[n];", "\n            n=n+1;", "\n            loc=loc+1;", "\n        }", "\n    }", "\n    while (m<=mid)", "\n    {    data2[loc]=data[m];", "\n        loc=loc+1;", "\n        m=m+1;", "\n    }", "\n    while(n<=high)", "\n    {    data2[loc]=data[n];", "\n        loc=loc+1;", "\n        n=n+1;", "\n    }", "\n    for(int i=0;i<=len;++i)", "\n    {", "\n        data[i]=data2[i];", "\n    }", "\n    return 0;", "\n}"]], "Tag": "算法设计"}
{"Answer": "我说的是，在待排序数据本身有序的情况下，归并更快，我什么时候说“归并排序比快速排序快”了。", "Konwledge_Point": "归并排序", "Question": ["link能不能改变排序算法？link如何实现归并排序？", ["听说归并排序比快速排序快，有没有办法使用归并排序代替快速排序？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&amp;#xff08;1&amp;#xff09;原因分析&lt;br /&gt;第9行的递归不会陷入死循环&amp;#xff0c;因为它们都会递归到if(l&amp;#61;&amp;#61;r)的情形然后return返回。&lt;br /&gt;&amp;#xff08;2&amp;#xff09;分析验证&lt;br /&gt;下面给出了一个用于验证的递归二叉树图&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/895920400166188.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;上图表明初始(l,r)&amp;#61;(1,10)或(l,r)&amp;#61;(1,5)的情形最终都会递归到if(l&amp;#61;&amp;#61;r)的情形然后return返回&amp;#xff0c;因此不会陷入死循环。&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["这个归并排序第8行不会死循环吗？", ["这个归并排序第8行不会死循环吗？这个归并排序第8行不会死循环吗？为什么这个归并排序第8行不会死循环吗？"]], "Tag": "算法设计"}
{"Answer": "http://blog.sina.com.cn/s/blog_a80fd6510101b5u4.html", "Konwledge_Point": "归并排序", "Question": ["Big String                     ", ["We will construct an infinitely long string from two short strings: A = \"^__^\" (four characters), and B = \"T.T\" (three characters). Repeat the following steps:", "\nConcatenate A after B to obtain a new string C. For example, if A = \"^__^\" and B = \"T.T\", then C = BA = \"T.T^__^\".", "\nLet A = B, B = C -- as the example above A = \"T.T\", B = \"T.T^__^\".", "\nYour task is to find out the n-th character of this infinite string.", "\n\n", "Input", "\n\n", "The input contains multiple test cases, each contains only one integer N (1 <= N <= 2^63 - 1). Proceed to the end of file.", "\n\n", "Output", "\n\n", "For each test case, print one character on each line, which is the N-th (index begins with 1) character of this infinite string.", "\n\n", "Sample Input", "\n\n", "1", "\n2", "\n4", "\n8", "\n\n", "Sample Output", "\n\n", "T", "\n.", "\n^", "\nT"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;望采纳&amp;#xff01;点击左下方的解决即可采纳&amp;#xff01;可以参考一下我的代码&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdlib.h&amp;gt;\n\n&lt;span class=\"hljs-comment\"&gt;// 归并两个有序子数组&lt;/span&gt;\nvoid merge(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;* arr, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;* temp, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; left, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; mid, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; right)\n{\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; left, j &amp;#61; mid &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt;&amp;#61; mid&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;j &amp;lt;&amp;#61; right)\n{\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;lt; arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;)\n{\ntemp&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n}\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n{\ntemp&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n}\n}\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt;&amp;#61; mid)\n{\ntemp&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n}\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (j &amp;lt;&amp;#61; right)\n{\ntemp&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n}\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; l &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; l &amp;lt; k; l&amp;#43;&amp;#43;)\n{\narr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;left&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-identifier\"&gt;l&lt;/span&gt;]&lt;/span&gt; &amp;#61; temp&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;l&lt;/span&gt;]&lt;/span&gt;;\n}\n}\n\n&lt;span class=\"hljs-comment\"&gt;// 递归归并排序&lt;/span&gt;\nvoid merge&lt;span class=\"hljs-constructor\"&gt;_sort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;temp&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;)&lt;/span&gt;\n{\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (left &amp;lt; right)\n{\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; mid &amp;#61; left &amp;#43; (right - left)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\nmerge&lt;span class=\"hljs-constructor\"&gt;_sort(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;temp&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;)&lt;/span&gt;;\nmerge&lt;span class=\"hljs-constructor\"&gt;_sort(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;temp&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt; &amp;#43; 1, &lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;)&lt;/span&gt;;\nmerge(arr, temp, left, mid, right);\n}\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt; &amp;#61; { &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt; };\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; len &amp;#61; sizeof(arr)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;);\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;* temp &amp;#61; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;*)malloc(sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;)&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;len);\nmerge&lt;span class=\"hljs-constructor\"&gt;_sort(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;temp&lt;/span&gt;, 0, &lt;span class=\"hljs-params\"&gt;len&lt;/span&gt; - 1)&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; len; i&amp;#43;&amp;#43;)\n{\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n}\nreturn &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;上面的代码包含了两个函数&amp;#xff1a;merge和merge_sort。merge函数用于归并两个有序子数组&amp;#xff0c;merge_sort函数用于递归调用merge函数实现归&lt;/p&gt;\n&lt;p&gt;上面的代码包含了两个函数&amp;#xff1a;merge和merge_sort。merge函数用于归并两个有序子数组&amp;#xff0c;merge_sort函数用于递归调用merge函数实现归并排序&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["一个归并排序的问题！", ["归并排序，为什么没有运行排序，数组里的数据还是原封不动的顺序，求赐！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;提个建议&amp;#xff1a;问问题要有诚意&amp;#xff0c;图都是模糊的&amp;#xff0c;问题还要大家来猜吗&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["最近在练习归并排序的算法，出现了一些问题怎么解决呢", ["\n", "\n", "最近在练习归并排序的算法，出现了一些问题怎么解决呢最近在练习归并排序的算法，出现了一些问题怎么解决"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;修改完善如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;\n#define MAX &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;\ntypedef &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; Status;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; e;\ntypedef &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; data&lt;span class=\"hljs-literal\"&gt;[MAX]&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; length;\n}Slist;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; insert(Slist* L, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; e) {\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i&amp;lt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;i&amp;gt;L-&amp;gt;length &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; L-&amp;gt;length; j &amp;gt;&amp;#61; i; j--)\n        L-&amp;gt;data&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt; &amp;#61; L-&amp;gt;data&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;;\n    L-&amp;gt;data&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt; &amp;#61; e;\n    L-&amp;gt;length&amp;#43;&amp;#43;;\n    return &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n}\nStatus &lt;span class=\"hljs-constructor\"&gt;GetElem(Slist&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; L, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&amp;amp; &lt;span class=\"hljs-params\"&gt;e&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;i&amp;gt;L-&amp;gt;length)\n        return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    e &amp;#61; L-&amp;gt;data&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;;\n    return e;\n}\nStatus locate(Slist L, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; e) {\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;data&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;e)\n            return i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; length(Slist L) {\n    return &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length;\n}\nStatus  rank(Slist a, Slist b, Slist* c) {  &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    Status ea, eb, ia &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, ib &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, ic &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (ia &amp;lt; a.length&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;ib &amp;lt; b.length) \n    {\n        &lt;span class=\"hljs-constructor\"&gt;GetElem(&amp;amp;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;ia&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;ea&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-constructor\"&gt;GetElem(&amp;amp;&lt;span class=\"hljs-params\"&gt;b&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;ib&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;eb&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (ea &amp;lt;&amp;#61; eb){\n            insert(c, ic, ea);\n            ia&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            insert(c, ic, eb);\n            ib&amp;#43;&amp;#43;;\n        }\n        ic&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (ia &amp;lt; a.length) {\n        &lt;span class=\"hljs-constructor\"&gt;GetElem(&amp;amp;&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;ia&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;ea&lt;/span&gt;)&lt;/span&gt;;\n        insert(c, ic, ea);\n        ia&amp;#43;&amp;#43;; ic&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (ib &amp;lt; b.length) {\n        &lt;span class=\"hljs-constructor\"&gt;GetElem(&amp;amp;&lt;span class=\"hljs-params\"&gt;b&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;ib&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;eb&lt;/span&gt;)&lt;/span&gt;;\n        insert(c, ic, eb);\n        ib&amp;#43;&amp;#43;; ic&amp;#43;&amp;#43;;\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;//Slist c{};&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//c.length &amp;#61; 0;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//for (int k &amp;#61; 0; k &amp;lt; (a.length &amp;#43; b.length); k&amp;#43;&amp;#43;) {&lt;!-- --&gt;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    GetElem(&amp;amp;a, k, ea);&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    GetElem(&amp;amp;b, k, eb);&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    if (ea &amp;lt;&amp;#61; eb);&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    insert(&amp;amp;c, k &amp;#43; 1, ea);&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    insert(&amp;amp;c, k &amp;#43; 2, eb);&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    return 0;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//}&lt;/span&gt;\n}\nvoid print(Slist L)   &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length; i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;data&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; {\n    Slist La{};\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;La&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    Slist Lb{};\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Lb&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    Slist Lc{};\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Lc&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n    insert(&amp;amp;La, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    insert(&amp;amp;La, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;);\n    insert(&amp;amp;La, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;);\n    insert(&amp;amp;Lb, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n    insert(&amp;amp;Lb, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;);\n    insert(&amp;amp;Lb, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;);\n    insert(&amp;amp;Lb, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;);\n    insert(&amp;amp;Lb, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);\n    insert(&amp;amp;Lb, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;);\n\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;La:&amp;#34;&lt;/span&gt;);\n    print(La);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Lb:&amp;#34;&lt;/span&gt;);\n    print(Lb);\n\n    rank(La, Lb, &amp;amp;Lc);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Lc:&amp;#34;&lt;/span&gt;);\n    print(Lc);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["已知线性表La和Lb中的数据元素按值非递减有序排列，现要求La和Lb归并排序为Lc\n我想知道我这段rank中a和b表的元素为什么只传递了1和2给c，后续就不在执行了?", ["已知线性表La和Lb中的数据元素按值非递减有序排列，现要求La和Lb归并排序为Lc", "我想知道我这段rank中a和b表的元素为什么只传递了1和2给c，后续就不在执行了?", "代码如下", "#include <stdio.h>", "\n", "\n#define MAX 100\ntypedef int Status;\nint e;\ntypedef struct {\n    int data[MAX];\n    int ", "length", ";\n}Slist;\nint ", "insert", "(Slist ", "*L, int i, int e) {\n    if (i<1 || i>L->length + 1)\n        return 0;", "\n    for (int j = L->", "length", "; j >= i; j--)\n        L->data[j] = L->data[j-1];\n    L->data[i - 1] = e;\n    L->", "length", "++;\n    ", "return", " true;\n}\nStatus GetElem(Slist", "* L, int i,int& e){\n        if (i<0 || i>L->length)\n            return 0;", "\n    e = L->data[i];\n    ", "return", " e;\n}\nStatus locate(Slist L,int e) {\n    for (int i = 0; i < L.", "length", "; i++)\n        ", "if", " (L.data[i] == e)\n            ", "return", " i + 1;\n    ", "return", " 0;\n}\nint ", "length", "(Slist L){\n    ", "return", " L.", "length", ";\n}\nStatus  ", "rank", "(Slist a,Slist b ) {\n    int ea;\n    int eb;\n    Slist c{};\n    c.", "length", " = 0;\n    for (int k = 0; k < (a.", "length", "+b.", "length", "); k++) {\n        GetElem(", "&a", ", k, ea);\n        GetElem(", "&b", ", k, eb);\n        ", "if", " (ea <= eb);\n        ", "insert", "(", "&c", ", k+1, ea);\n        ", "insert", "(", "&c", ", k+2, eb);\n        ", "return", " 0;\n    }\n}\nint mai", "n", "() {\n    Slist La{};\n    La.", "length", " = 0;\n    Slist Lb{};\n    Slist Lc{};\n    Lb.", "length", " = 0;\n    Lc.", "length", " = 0;\n    ", "insert", "(", "&La", ", 1, 1);\n    ", "insert", "(", "&La", ", 2, 7);\n    ", "insert", "(", "&La", ", 3, 8);\n    ", "insert", "(", "&Lb", ", 1, 2);\n    ", "insert", "(", "&Lb", ", 2, 4);\n    ", "insert", "(", "&Lb", ", 3, 6);\n    ", "insert", "(", "&Lb", ", 4, 8);\n    ", "insert", "(", "&Lb", ", 5, 10);\n    ", "insert", "(", "&Lb", ", 6, 11);\n    ", "rank", "(La,Lb);\n}\n", "\n", "rank函数的运行结果：", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;sort 中最后for循环应该i&amp;lt;&amp;#61;t吧&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["关于归并排序求逆序对数", ["利用归并排序求逆序对数，但是结果是错误的，帮忙看看哪里出错了", "\n", "\n", "#include<stdio.h>", "\n", "int", " ", "index", " = ", "0", ";\n", "int", " main() {\n    ", "void", " Merge(", "int", " a[], ", "int", " a1[], ", "int", " s, ", "int", " m, ", "int", " t);\n    ", "void", " MergeSort(", "int", " a[], ", "int", " s, ", "int", " t);\n    ", "int", " a[", "6", "];\n    ", "for", " (", "int", " i = ", "0", "; i < ", "6", "; i++) {\n        scanf(\"%d\", &a[i]);\n    }\n    printf(\"\\n\");\n    MergeSort(a, ", "0", ", ", "5", ");\n    printf(\"%d\", ", "index", ");\n}\n", "void", " Merge(", "int", " a[], ", "int", " a1[], ", "int", " s, ", "int", " m, ", "int", " t) {\n    ", "int", " i = s;\n    ", "int", " j = m + ", "1", ";\n    ", "int", " k = s;\n    ", "while", " (i <= m && j <= t) {\n        ", "if", " (a[i] <= a[j]) {\n            a1[k] = a[i];\n            k++;\n            i++;\n        }\n        ", "else", " {\n            a1[k] = a[j];\n            k++;\n            j++;\n            ", "index", " += m - i + ", "1", ";\n        }\n    }\n    ", "while", " (i <= m) a1[k++] = a[i++];\n    ", "while", " (j <= t) a1[k++] = a[j++];\n}\n", "void", " MergeSort(", "int", " a[], ", "int", " s, ", "int", " t) {\n    ", "int", " a1[", "1000", "];\n    ", "int", " m;\n    ", "if", "(s < t) {\n        m = (s + t) / ", "2", ";\n        MergeSort(a, s, m);\n        MergeSort(a, m + ", "1", ", t);\n        Merge(a, a1, s, m, t);\n    }\n    ", "for", " (", "int", " i = s; i < t; i++) {\n        a[i] = a1[i];\n    }\n}\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不能&amp;lt;&amp;#61;L.end()的&amp;#xff0c;end()已经是结束符&amp;#xff0c;没有对象了。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;vector&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;cstdio&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;iostream&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;algorithm&amp;gt;\nusing namespace std;\nvoid mergesort(vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;&amp;amp;T,&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; left,&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; right)\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; mid&amp;#61;(right-left)/&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n    vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;L;\n    vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;R;\n    vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;ans;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;insert(&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;,&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;T&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;&amp;#43;left,&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;T&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;&amp;#43;left&amp;#43;mid);\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;R&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;insert(&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;R&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;,&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;T&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;&amp;#43;left&amp;#43;mid&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;T&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;&amp;#43;right);\n    vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;::iterator i&amp;#61;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;::iterator j&amp;#61;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;R&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i&amp;lt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;&amp;amp;&amp;amp;j&amp;lt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;R&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;)\n    {\n         &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((*i)&amp;lt;&amp;#61;(*j))\n         {\n              ans.push&lt;span class=\"hljs-constructor\"&gt;_back((&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;)&lt;/span&gt;);\n              i&amp;#43;&amp;#43;;\n         }\n         &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((*i)&amp;gt;&amp;#61;(*j))\n         {\n            ans.push&lt;span class=\"hljs-constructor\"&gt;_back((&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;j&lt;/span&gt;)&lt;/span&gt;);\n            j&amp;#43;&amp;#43;;    \n         }    \n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;lt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i&amp;lt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;)\n        {\n            ans.push&lt;span class=\"hljs-constructor\"&gt;_back((&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;)&lt;/span&gt;);\n            i&amp;#43;&amp;#43;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j&amp;lt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;R&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;)\n    {    \n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(j&amp;lt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;R&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;)\n        {\n            ans.push&lt;span class=\"hljs-constructor\"&gt;_back((&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;j&lt;/span&gt;)&lt;/span&gt;);\n            j&amp;#43;&amp;#43;;\n        }\n    }\n     vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;::iterator k&amp;#61;ans.&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(;k&amp;lt;ans.&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;k&amp;#43;&amp;#43;)\n    {\n        cout&amp;lt;&amp;lt;(*k)&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n    }\n}\n &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n {\n     &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i;\n     vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;T;\n     &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;;i&amp;#43;&amp;#43;)\n     {\n         &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n;\n         cin&amp;gt;&amp;gt;n;\n         &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;T&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;push&lt;span class=\"hljs-constructor\"&gt;_back(&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;)&lt;/span&gt;;\n    }\n    mergesort(T,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n }\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["C++二路归并排序（非递归）", ["C++二路归并排序（非递归）", "输入10个数组成的局部有序的数组，对所有数据进行二路归并排序再输出", "输入：0 2 4 7 9 1 3 4 5 0", "输出：0 0 1 2 3 4 4 5 7 9", "错误输出：0123445-1700（DEVC++）", "代码如下：", "\n", "\n```c++\n#", "include", "<vector>\n#", "include", "<cstdio>\n#", "include", "<iostream>\n#", "include", "<algorithm>\nusing namespace std;\nvoid mergesort(vector<", "int", ">&T,", "int", " left,", "int", " right)\n{\n    ", "int", " mid=(right-left)/", "2", ";\n    vector<", "int", ">L;\n    vector<", "int", ">R;\n    vector<", "int", ">ans;\n    ", "L", ".", "insert(", "L", ".", "begin", "()", ",", "T", ".", "begin", "()", "+left,", "T", ".", "begin", "()", "+left+mid);\n    ", "R", ".", "insert(", "R", ".", "begin", "()", ",", "T", ".", "begin", "()", "+left+mid+", "1", ",", "T", ".", "begin", "()", "+right);\n    vector<", "int", ">::iterator i=", "L", ".", "begin", "()", ";\n    vector<", "int", ">::iterator j=", "R", ".", "begin", "()", ";\n    ", "while", "(i<=", "L", ".", "end", "()", "&&j<=", "R", ".", "end", "()", ")\n    {\n     ", "if", "((*i)<=(*j))\n     {\n          ans.push", "_back((", "*", "i", ")", ");\n          i++;\n     }\n     ", "if", "((*i)>=(*j))\n     {\n        ans.push", "_back((", "*", "j", ")", ");\n        j++;    \n     }    \n    }\n    ", "if", "(i<=", "L", ".", "end", "()", ")\n    {\n        ", "while", "(i<=", "L", ".", "end", "()", ")\n        {\n            ans.push", "_back((", "*", "i", ")", ");\n            i++;\n        }\n    }\n    ", "else", " ", "if", "(j<=", "R", ".", "end", "()", ")\n    {    \n        ", "while", "(j<=", "R", ".", "end", "()", ")\n        {\n            ans.push", "_back((", "*", "j", ")", ");\n            j++;\n        }\n    }\n     vector<", "int", ">::iterator k=ans.", "begin", "()", ";\n    ", "for", "(;k<=ans.", "end", "()", ";k++)\n    {\n        cout<<(*k);\n    }\n}\n ", "int", " main", "()", "\n {\n     ", "int", " i;\n     vector<", "int", ">T;\n     ", "for", "(i=", "0", ";i<=", "9", ";i++)\n     {\n         ", "int", " n;\n         cin>>n;\n         ", "T", ".", "push", "_back(", "n", ")", ";\n    }\n    mergesort(T,", "0", ",", "9", ");\n    return ", "0", ";\n }\n\n", "\n", "```"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你别发图片 发代码吧&amp;#xff0c;发图片分成几张 眼睛都看花了&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["为什么C语言归并排序失败了", ["如下是VS2022的C语言代码", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<math.h>", "\n", "#", "define", " N 10", "\n", "int", " ", "main", "(", "void", ")", "\n", "{\n    ", "int", " I, alx, alxEnd, blx, blxEnd, clx, glx, size;\n    _Bool CopyA, CopyB;\n    ", "int", " arr[N];\n    ", "int", " temp[N] = { ", "0", " };\n    ", "printf", "(", "\"Define a random number group:\\n\"", ");\n    ", "for", " (I = ", "0", "; I < N; ++I)      ", "/*给数组赋值随机变量*/", "\n    {\n        arr[I] = (", "int", ")(", "rand", "() % ", "100", ");\n        ", "printf", "(", "\"%d \"", ", arr[I]);\n    }\n    ", "printf", "(", "\"\\n\"", ");\n    ", "for", " (size = ", "1", "; size < N; size += size);   ", "//归并排序", "\n    {\n        ", "for", " (glx = ", "0", "; glx < N; glx += ", "2", " * size)\n        {\n            alx = glx;\n            alxEnd = (N < (alx + size)) ? N : (alx + size);\n            blx = glx + size;\n            blxEnd = (N < (blx + size)) ? N : (blx + size);\n            clx = glx;\n            ", "while", " ((alx < alxEnd) || (blx < blxEnd))\n            {\n                CopyA = ", "0", ";\n                CopyB = ", "0", ";\n                ", "if", " ((alx < alxEnd) && (blx < blxEnd))\n                {\n                    CopyA = (arr[alx] < arr[blx]);\n                    CopyB = !CopyA;\n                }\n                ", "else", "\n                {\n                    ", "if", " (alx >= alxEnd)\n                    {\n                        CopyB = ", "1", ";\n                    }\n                    ", "else", "\n                    {\n                        CopyA = ", "1", ";\n                    }\n                }\n                ", "if", " (CopyA == ", "1", ")\n                {\n                    temp[clx] = arr[alx];\n                    alx++;\n                }\n                ", "if", " (CopyB == ", "1", ")\n                {\n                    temp[clx] = arr[blx];\n                    blx++;\n                }\n                clx++;\n            }\n        }\n        ", "for", " (I = ", "0", "; I < N; ++I)\n        {\n            arr[I] = temp[I];\n        }\n    }\n    ", "printf", "(", "\"Here is the group that has been arranged:\\n\"", ");\n    ", "for", " (I = ", "0", "; I < N; ++I)\n    {\n        ", "printf", "(", "\"%d \"", ", arr[I]);\n    }\n    ", "return", " ", "0", ";\n}\n\n", "\n", "\n", "我用X-program就成功了", "\n", "\n", "这是为什么呀？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;sort是先快排1.5*log2(n)次&amp;#xff0c;若长度大于32&amp;#xff0c;则改用堆排。C&amp;#43;&amp;#43;有个partial_sort堆排&amp;#xff0c;和他的sort用的时间差不多一样&amp;#xff0c;可以确定就是用的堆排&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["对1000000个随机数的数组进行排序，测试c++库里的sort()用时比自己写的归并排序用时长，是出了什么问题吗？", ["我想要比较sort和归并对同一个数组排序的用时长短，觉得应该sort（）比自己写的快，但实验结果却相反。1000000左右的排序似乎其他人测试的sort用时大概在0.15左右，但我运行的却是0.5以上。是代码有问题还是运行出了问题呢？", "\n", "#", "include", " <iostream>\n#", "include", "<algorithm>\n#", "include", " <random>\n#", "include", "<ctime>\nusing namespace std;\ntemplate<", "class", " T1>\nvoid ", "Merge(T1 ", "a", "[], ", "int", " ", "l", ", ", "int", " ", "m", ", ", "int", " ", "r", ", T1 ", "c", "[])", "\n{\n    ", "//已知a[l]<=…<=a[m];a[m+1]<=a[r]", "\n    ", "//归并到c[l]~c[r]，并复制到a[l]~a[r]", "\n    ", "int", " i = l;\n    ", "int", " j = m + ", "1", ";\n    ", "int", " k = l;\n    ", "while", " (i <= m", " && ", "j <= r)\n    {\n        ", "if", " (a", "[", "i", "]", " < a", "[", "j", "]", ")\n        {\n            c", "[", "k", "]", " = a", "[", "i", "]", ";\n            i++;\n            k++;\n        }\n        ", "else", "\n        {\n            c", "[", "k", "++", "]", " = a", "[", "j", "++", "]", ";\n        }\n    }\n    ", "while", " (i <= m)\n    {\n        c", "[", "k", "++", "]", " = a", "[", "i", "++", "]", ";\n    }\n    ", "while", " (j <= r)\n    {\n        c", "[", "k", "++", "]", " = a", "[", "j", "++", "]", ";\n    }\n    k = l;\n    ", "while", " (k <= r)\n    {\n        a", "[", "k", "]", " = c", "[", "k", "]", ";\n        k++;\n    }\n}\ntemplate<", "class", " T11>\nvoid ", "MergeSort(T11 ", "a", "[], ", "int", " ", "l", ", ", "int", " ", "r", ", T11 ", "c", "[])", "\n{\n    ", "//a[l]~a[r]进行排序", "\n    ", "if", " (l >= r)\n    {\n        return;\n    }\n    ", "int", " m = (l + r)", " / ", "2", ";\n    ", "MergeSort(", "a", ", ", "l", ", ", "m", ", ", "c", ")", ";\n    ", "MergeSort(", "a", ", ", "m", " + 1, ", "r", ", ", "c", ")", ";\n    ", "Merge(", "a", ", ", "l", ", ", "m", ", ", "r", ", ", "c", ")", ";\n}\n\nvoid main", "()", "\n{\n    ", "int", " n;\n    n = ", "1000000", ";\n    ", "float", "* a = ", "new", " ", "float", "[", "n", "]", ";\n    ", "float", "* b = ", "new", " ", "float", "[", "n", "]", ";\n    ", "float", "* c = ", "new", " ", "float", "[", "n", "]", ";\n    ", "for", " (", "int", " i = ", "0", "; i < n; i++)\n    {\n        ", "//cout << \"随机生成a[\" << i << \"]的值为\";", "\n        a", "[", "i", "]", " = rand", "()", " % ", "100000000", ";\n        b", "[", "i", "]", " = a", "[", "i", "]", ";\n        ", "//cout << a[i] << endl;", "\n    }\n\n    clock_t start1, end1, start2, end2;\n    start1 = clock", "()", ";\n    ", "MergeSort(", "a", ", 0, 999999, ", "c", ")", ";\n    end1 = clock", "()", ";\n    cout << start1 << ", "\" \"", " << end1;\n    cout << ", "\"归并排序用时为\"", " <<(double)( end1 - start1)/CLOCKS_PER_SEC << endl;\n\n    start2 = clock", "()", ";\n    sort(b, b + ", "1000000", ");\n    end2 = clock", "()", ";\n    cout << start2 << ", "\" \"", " << end2;;\n    cout << ", "\"sort函数用时为\"", " << (double)(end2 - start2) /CLOCKS_PER_SEC << endl;\n\n    ", "for", " (", "int", " i = ", "0", "; i < ", "1000000", "; i++)\n    {\n        ", "if", " (a", "[", "i", "]", " != b", "[", "i", "]", ")\n            cout << ", "\"error!\"", " << endl;\n    }\n\n    delete", "[]", " a;\n    delete", "[]", " b;\n    delete", "[]", " c;\n\n}\n", "\n", "代码大概就是这样，通过前两个函数进行归并排序，并用了模板类。之后用rand（）随机产生随机数。a数组和b数组完全一样。对a数组进行归并排序，对b数组进行sort排序。c数组是为了辅助归并排序的数组。之后用clock（）进行计时，输出得到用时。最后那个循环是为了检测是否归并排序出错。", "\n", "运行结果及报错内容", "\n", "\n", "我的运行结果大概是这样的，归并0.15左右，而sort0.5以上。", "\n", "我的解答思路和尝试过的方法", "\n", "我尝试用不同的函数获取用时，timeGetTime（），GetTickCourt（）。但结果都是这样的", "\n", "我想要达到的结果", "\n", "我想要得到sort（）和归并到底谁更快，以及为什么我的实验结果sort（）运行有0.5s以上这么久？", "\n", "求高人指点！"]], "Tag": "算法设计"}
{"Answer": "你的递归函数跑到main函数里面去了。还在用记事本编辑java呢？ :lol:", "Konwledge_Point": "归并排序", "Question": ["初学，请帮小弟. 运行结果已经写出帮看一下原因。万分感谢", ["import java.util.Scanner;", "\n\n", "public class UseRecursion", "\n{", "\n    public static void main(String[] args)", "\n    {", "\n        Scanner scanner =new Scanner(System.in);", "\n\n", "    System.out.println(\"输入两数：\");\n    System.out.print(\"m=\");\n    int m = scanner.nextInt();\n\n    System.out.print(\"n=\");\n    int n = scanner.nextInt();\n\n    System.out.println(\"GCD：\"+ gcd(m, n));\n\nprivate static int gcd(int m, int n)//辗转相除法球最大公因式\n{\n     if(n == 0)\n        return m;\n     else\n        return gcd(n, m % n);\n    }\n}\n", "\n\n", "}", "\n     /*等价于下面的循环调用：", "\n     private static int gcd(int m,int n)", "\n     {", "\n      int r;", "\n      while(n!=0)", "\n      {", "\n        r = m % n;", "\n        m=n;", "\n        n=r;", "\n      }", "\n      return m;", "\n     }", "\n     */", "\n\n", "结果：", "\nUseRecursion.java:24: 非法的表达式开始", "\n    private static int gcd(int m, int n)//辗转相除法球最大公因式", "\n    ^", "\nUseRecursion.java:24: 非法的表达式开始", "\n    private static int gcd(int m, int n)//辗转相除法球最大公因式", "\n            ^", "\nUseRecursion.java:24: 需要 ';'", "\n    private static int gcd(int m, int n)//辗转相除法球最大公因式", "\n                  ^", "\nUseRecursion.java:24: 需要 \".class\"", "\n    private static int gcd(int m, int n)//辗转相除法球最大公因式", "\n                               ^", "\nUseRecursion.java:24: 需要 ';'", "\n    private static int gcd(int m, int n)//辗转相除法球最大公因式", "\n                                ^", "\nUseRecursion.java:24: 需要 ';'", "\n    private static int gcd(int m, int n)//辗转相除法球最大公因式", "\n                                       ^"]], "Tag": "算法设计"}
{"Answer": "```\r\n int lo, int mid, int hi\r\n分别是待归并的两部分数组的起始位置，第一个是lo~mid，第二个是mid+1~hi\r\n\r\n        int i = lo;\r\n        int j = mid + 1;\r\n开始的时候，i和j分别指向两部分数组的开始位置\r\n\r\nfor (int k = lo; k &lt; hi + 1; k++) {\r\n            b[k] = a[k];\r\n        }\r\n首先复制一份拷贝到b里面，而原来的a数组的相应位置则保存排序后的结果\r\n\r\nfor (int k = lo; k &lt; hi + 1; k++) {\r\n\r\n            if (i &gt; mid) { //i &gt; mid说明第一个数组中的数据都已经插入到a里面了，而第二个数组是有序的，所以照着复制就可以\r\n                a[k] = b[j++];\r\n            } else if (j &gt; hi) { //j&gt;h说明第二个数组已经都插入进去了，而第一个数组是有序的，所以照着复制\r\n                a[k] = b[i++];\r\n            } else if (less(b[i], b[j])) { //第一个数组的当前元素比第二个小，那么先插入第一个数组的（插入后i往后移动一个），第二个不动。\r\n                a[k] = b[i++];\r\n            } else { //第一个数组比第二个大，那么先插入第二个的，第一个不动\r\n                a[k] = b[j++];\r\n            }\r\n        }\r\n\r\n```", "Konwledge_Point": "归并排序", "Question": ["关于java归并排序的问题", ["下面是代码 我的问题是 Merge方法里面的那四种判断是根据什么来的？j>hi是怎么回事，", "\n\n", " public class Merge {\n\n    private static Comparable[] b;\n\n    public static boolean less(Comparable v, Comparable w) {\n        return v.compareTo(w) < 0;\n    }\n\n    public static void merge(Comparable[] a, int lo, int mid, int hi) {\n        int i = lo;\n        int j = mid + 1;\n\n        for (int k = lo; k < hi + 1; k++) {\n            b[k] = a[k];\n        }\n        for (int k = lo; k < hi + 1; k++) {\n\n            if (i > mid) {\n                a[k] = b[j++];\n            } else if (j > hi) {\n                a[k] = b[i++];\n            } else if (less(b[i], b[j])) {\n                a[k] = b[i++];\n            } else {\n                a[k] = b[j++];\n            }\n        }\n    }\n\n    /**\n     * 自顶向下和自底向上\n     *\n     * @param a\n     */\n    public static void sort(Comparable[] a) {\n        b = new Comparable[a.length];\n        // 自顶向下\n        sort(a, 0, a.length - 1);\n\n        //自底向上\n//        for (int i = 1; i < a.length; i++) {\n//            for (int lo = 0; lo < a.length - i; lo += i + i) {\n//                merge(a, lo, lo + i - 1, Math.min(lo + i + i - 1, a.length - 1));\n//            }\n//        }\n    }\n\n    public static void sort(Comparable[] a, int lo, int hi) {\n        if (hi <= lo) {\n            return;\n        }\n        int mid = lo + (hi - lo) / 2;\n        sort(a, lo, mid);\n        sort(a, mid + 1, hi);\n        merge(a, lo, mid, hi);\n    }\n\n    public static void show(Comparable[] a) {\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i] + \" \");\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        Integer[] a = new Integer[10];\n        for (int i = 0; i < 10; i++) {\n            a[i] = (int) (Math.random() * 10 + 1);\n        }\n        show(a);\n        sort(a);\n        show(a);\n    }\n\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的merge代码没有考虑left和right数组元素数目不等的情况。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;iostream&amp;gt;\nusing namespace std;\n\nvoid &lt;span class=\"hljs-constructor\"&gt;Merge(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;A, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;q&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n1 &amp;#61; q - p &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n2 &amp;#61; r - q;\n\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; *L &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;n1&lt;/span&gt;]&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; *R &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;n2&lt;/span&gt;]&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n1; i&amp;#43;&amp;#43;)\n        L&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;p&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n2; j&amp;#43;&amp;#43;)\n        R&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt; &amp;#61; A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;q&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;;\n\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k &amp;#61; p;\n\n    &lt;span class=\"hljs-comment\"&gt;// Merge L[] and R[] into A[]&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt; n1&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;j &amp;lt; n2)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (L&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;lt;&amp;#61; R&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;)\n            A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; L&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; R&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;// Copy the remaining element of L[], if there are any&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt; n1)\n        A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; L&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;// Copy the remaining element of R[], if there are any&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (j &amp;lt; n2)\n        A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; R&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n\n    delete&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt; L;\n    delete&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt; R;\n}\n\nvoid &lt;span class=\"hljs-constructor\"&gt;Merge_Sort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;A, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;low&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;high&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; mid;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (low &amp;lt; high)\n    {\n        mid &amp;#61; (low &amp;#43; high)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        &lt;span class=\"hljs-constructor\"&gt;Merge_Sort(A, &lt;span class=\"hljs-params\"&gt;low&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-constructor\"&gt;Merge_Sort(A, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt; &amp;#43; 1, &lt;span class=\"hljs-params\"&gt;high&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-constructor\"&gt;Merge(A, &lt;span class=\"hljs-params\"&gt;low&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;high&lt;/span&gt;)&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]&lt;/span&gt; &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;};\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; low &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; high &amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; mid &amp;#61; (low &amp;#43; high)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;Merge(A, &lt;span class=\"hljs-params\"&gt;low&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;high&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;Merge_Sort(A, 0, 9)&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; m &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; m &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; m&amp;#43;&amp;#43;)\n    {\n        cout &amp;lt;&amp;lt; A&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;m&lt;/span&gt;]&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n    }\n\n    cout &amp;lt;&amp;lt; endl;\n\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["<算法导论第三版>的伪代码写的C++的归并排序", ["问题遇到的现象和发生背景", "\n", "这是一个归并排序,是根据<算法导论第三版> 的伪代码写的,可是最终得到的结果总是错误的,不知道怎么回事总会访问到特定的数组外但是也没有发生编译过程的错误.", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n\n\n", "我想要达到的结果", "\n", "#", "include", "<iostream>\nusing namespace std;\n\nvoid ", "Merge(", "int", " ", "*", "A,", "int", " ", "p", ",", "int", " ", "q", ",", "int", " ", "r", ")", "\n{\n    ", "int", " n1 = q - p;\n    ", "int", " n2 = r - q;\n    \n    cout << ", "\"q-p=\"", " << q - p << endl;\n    ", "int", "* L = ", "new", " ", "int", "[", "n1", "+", "1", "]", ";\n    ", "int", "* R = ", "new", " ", "int", "[", "n2", "]", ";\n\n    ", "for", " (", "int", " i = ", "0", "; i <= n1; i++)\n    {\n        L", "[", "i", "]", " = A", "[", "p", " + ", "i", "]", ";\n        \n    }\n    \n    ", "for", " (", "int", " j = ", "0", "; j < n2; j++)\n    {\n        R", "[", "j", "]", " = A", "[", "q", " + ", "j", " + ", "1", "]", ";\n    }\n    ", "int", " i = ", "0", ";\n    ", "int", " j = ", "0", ";\n\n    ", "for", " (", "int", " k = p; k < r; k++)\n    {\n        ", "if", " (L", "[", "i", "]", " <= R", "[", "j", "]", ")\n        {\n            A", "[", "k", "]", " = L", "[", "i", "]", ";\n            i++;\n        }\n        ", "else", "\n        {\n                A", "[", "k", "]", " = R", "[", "j", "]", ";\n                j++;\n        }\n    }\n\n}\n\n\nvoid ", "Merge_Sort(", "int", "*", " A, ", "int", " ", "low", ", ", "int", " ", "high", ")", "\n{\n    ", "int", " mid;\n    ", "if", " (low < high)\n    {\n        mid = ((low + high)", " / ", "2", ");\n        ", "Merge_Sort(A, ", "low", ", ", "mid", ")", ";\n        ", "Merge_Sort(A, ", "mid", " + 1, ", "high", ")", ";\n        ", "Merge(A, ", "low", ", ", "mid", ", ", "high", ")", ";\n    }\n\n}\n\n\n", "int", " main", "()", "\n{\n    ", "int", " A", "[", "10", "]", " = {", "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3", ",", "2", ",", "1", "};\n    ", "int", " low = ", "0", ";\n    ", "int", " high = ", "9", ";\n    ", "int", " mid = (low + high)", " / ", "2", ";\n    ", "Merge(A, ", "low", ", ", "mid", ", ", "high", ")", ";\n    ", "Merge_Sort(A, 0, 9)", ";\n\n    ", "for", " (", "int", " m = ", "0", "; m < ", "10", "; m++)\n    {\n        cout << A", "[", "m", "]", " << ", "\" \"", ";\n    }\n\n    cout << endl;\n    \n    return ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可参考博文&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/qq_42589613/article/details/110431662\" id=\"textarea_1669367169568_1669367386549_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/qq_42589613/article/details/110431662&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n# -*- coding: utf-&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt; -*-\ndef merge(&lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt;):\n    # 合并两个有序列表\n    &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &amp;#61; []\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt;) &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt;) &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;lt; &lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]:\n            &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;pop&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;))\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;pop&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;))\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;extend&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;extend&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;\n\ndef mergeSort(arr):\n    # 归并函数\n    n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(arr)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n &amp;lt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; arr\n    middle &amp;#61; n // &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt; &amp;#61; arr[:middle] # 取序列左边部分\n    &lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt; &amp;#61; arr[middle:]# 取序列右边部分\n    # 对左边部分序列递归调用归并函数\n    left_sort &amp;#61; mergeSort(&lt;span class=\"hljs-keyword\"&gt;left&lt;/span&gt;)\n    # 对右边部分序列递归调用归并函数\n    right_sort &amp;#61; mergeSort(&lt;span class=\"hljs-keyword\"&gt;right&lt;/span&gt;)\n    #\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; merge(left_sort, right_sort)\narr &amp;#61; [&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;]\n&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#61; mergeSort(arr)\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["python实现归并排序时，输出“[0, 0, 0, 0, 0, 0, 0, 0]”", ["问题遇到的现象和发生背景", "\n", "python实现归并排序时 ，单独调用merge可以输出正确，但是sort、merge一起调用输出结果 ", "\n", "[0, 0, 0, 0, 0, 0, 0, 0]", "\n", "自学数据结构到归并排序，不知道哪里有错误", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "import", " sys\nsys.setrecursionlimit(", "100000", ") ", "#例如这里设置为十万", "\n\n", "def", " ", "sort", "(", "arr,low,high", "):\n    ", "if", " low < high :\n        mid = ", "int", "((low+high)/", "2", ")\n        sort(arr,low,mid)\n        sort(arr,mid+", "1", ",high)\n        merge(arr,low,mid,high)\n    ", "return", " arr\n\n\n", "def", " ", "merge", "(", "arr,low,mid,high", "):\n    temp1 = [", "0", "]*", "len", "(arr)\n    \n    x = low\n    y = mid + ", "1", "\n    i = ", "0", "\n    ", "while", " x<mid ", "and", " y<high:\n        ", "if", " arr[x] <= arr[y]:\n            ", "'''print(x)'''", "\n            temp1[i] = arr[x]\n            i += ", "1", "\n            x += ", "1", "\n        ", "else", ":\n            ", "''' print(y)'''", "\n            temp1[i] = arr[y]\n            i += ", "1", "\n            y += ", "1", "\n    ", "while", " y<=high:\n        temp1[i] = arr[y]\n        i += ", "1", "\n        y += ", "1", "\n\n    ", "while", " x<=mid:\n        temp1[i] = arr[x]\n        i += ", "1", "\n        x += ", "1", "\n    a = ", "0", "\n    b = ", "0", "\n    ", "while", " a < ", "len", "(arr):\n        arr[a] = temp1[b]\n        a += ", "1", "\n        b += ", "1", "\n    ", "return", " arr\n        \n\n\narr = [", "7", ",", "1", ",", "4", ",", "9", ",", "3", ",", "5", ",", "2", ",", "8", "]\nlow = ", "0", "\nhigh = ", "len", "(arr)-", "1", "\nmid =", "int", "((low+high)/", "2", ")\n\n", "print", " (sort(arr,low,high))\n\n", "\n", "运行结果及报错内容", "\n", "运行结果：[0, 0, 0, 0, 0, 0, 0, 0]", "\n", "我的解答思路和尝试过的方法", "\n", "\n", "def", " ", "merge", "(", "arr,low,mid,high", "):\n    temp1 = [", "0", "]*", "len", "(arr)\n    \n    x = low\n    y = mid + ", "1", "\n    i = ", "0", "\n    ", "while", " x<mid ", "and", " y<high:\n        ", "if", " arr[x] <= arr[y]:\n            ", "'''print(x)'''", "\n            temp1[i] = arr[x]\n            i += ", "1", "\n            x += ", "1", "\n        ", "else", ":\n            ", "''' print(y)'''", "\n            temp1[i] = arr[y]\n            i += ", "1", "\n            y += ", "1", "\n    ", "while", " y<=high:\n        temp1[i] = arr[y]\n        i += ", "1", "\n        y += ", "1", "\n\n    ", "while", " x<=mid:\n        temp1[i] = arr[x]\n        i += ", "1", "\n        x += ", "1", "\n    a = ", "0", "\n    b = ", "0", "\n    ", "while", " a < ", "len", "(arr):\n        arr[a] = temp1[b]\n        a += ", "1", "\n        b += ", "1", "\n    ", "return", " arr\n\narr = [", "1", ",", "4", ",", "7", ",", "9", ",", "2", ",", "3", ",", "5", ",", "8", "]\nlow = ", "0", "\nhigh = ", "len", "(arr)-", "1", "\nmid =", "int", "((low+high)/", "2", ")\n\n", "print", " (merge(arr,low,mid,high))\n", "\n", "运行结果及报错内容", "\n", "运行结果：[1, 2, 3, 4, 5, 8, 7, 9]"]], "Tag": "算法设计"}
{"Answer": "你的代码中merge函数的while循环里，这个判断Right数组的下标错了，应该是Right[j]\r\n```\r\n if (Left[i] &lt; Right[i])\r\n        {\r\n            arr[k] = Left[i];\r\n            i++;\r\n            k++;\r\n        }\r\n```", "Konwledge_Point": "归并排序", "Question": ["求问归并排序代码哪里有问题，请大家指教，谢谢！", ["代码如下所示：", "\n测试后结果排序不正确，不知哪里写错了，请大家指教，谢谢", "\n\n", "#include <stdio.h>\n#include <malloc.h>\n#include <stdlib.h>\n\nvoid mergeSort(int arr[], int L, int R);\n\nint main( )\n{\n    int arr[6] = { 12,24,22,14,18,91 };\n    mergeSort(arr, 0, 5);\n    for (int i = 0;i < 6;i++)\n    {\n        printf_s(\"%d\\n\", arr[i]);\n    }\n}\n//L和R都是index，注意\nvoid merge(int arr[], int L, int M, int R)\n{\n    int Left_Size = M - L;\n    int Right_Size = R - M + 1;\n    //int Left[Left_Size];\n    int* Left = (int*)malloc(sizeof(int) * Left_Size);\n    if (Left == nullptr) { exit(-1); }\n    int* Right = (int*)malloc(sizeof(int) * Right_Size);\n    if (Right == nullptr) { exit(-1); }\n    //int i; \n    for (int i = L;i < M;i++)\n    {\n        Left[i - L] = arr[i];\n    }\n    for (int i = M;i <= R;i++)\n    {\n        Right[i-M] = arr[i];\n    }\n\n    int i = 0,j = 0,k = L;\n    while (i < Left_Size && j < Right_Size)\n    {\n        if (Left[i] < Right[i])\n        {\n            arr[k] = Left[i];\n            i++;\n            k++;\n        }\n        else\n        {\n            arr[k] = Right[j];\n            j++;\n            k++;\n        }\n    }\n    while (i < Left_Size)\n    {\n        arr[k] = Left[i];\n        i++;\n        k++;\n    }\n    while (j < Right_Size)\n    {\n        arr[k] = Right[j];\n        j++;\n        k++;\n    }\n\n}\n//L和R都是index，注意\nvoid mergeSort(int arr[], int L,int R)\n{\n    if (L == R)\n    {\n        return;\n    }\n    else\n    {\n    int M = (L + R) / 2;\n    mergeSort(arr, L, M);\n    mergeSort(arr, M + 1, R);\n    //这里第二个参数表示的是第二个数组第一个开头元素，所以我们要传入M+1\n    merge(arr, L, M+1, R);\n    }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我测试了下&amp;#xff0c;可以正常排序的&amp;#xff0c;&lt;code class=\"language-javascript\"&gt;mergeSort(a, 0, a.length);&lt;/code&gt;你是这样调用的吗&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["归并排序法数组中的最后一个数字总是不能进入排序是怎么回事", ["代码如下", "\n", "public", " ", "void", " mergeSort(", "int", " f[], ", "int", " l, ", "int", " u) {\n        // the algorithm ", "of", " merge sorting\n        ", "if", " (l + ", "1", " < u) {\n            ", "int", " mid = (l + u) / ", "2", ";\n            mergeSort(f, l, mid);\n            mergeSort(f, mid, u);\n            merge(f, l, mid, u);\n        }\n    }\n", "public", " ", "void", " merge(", "int", " arr[], ", "int", " l, ", "int", " m, ", "int", " r) {\n        // the algorithm ", "of", " merging\n        ", "int", "[] ", "temp", " = ", "new", " ", "int", "[r - l + ", "1", "];\n        ", "int", " i = ", "0", ", j = ", "0", ", k = ", "0", ";\n        // ", "declare", " variable ", "for", " counting\n\n        ", "if", " (r - l == ", "1", ") {\n            ", "int", " min = Math.min(arr[l], arr[r]);\n            ", "int", " max = Math.max(arr[l], arr[r]);\n            arr[l] = min;\n            arr[r] = max;\n        }\n        // the situation that there are ", "only", " two numbers\n\n        ", "else", " {\n            ", "while", " (l + i < m && m + j < r) {\n                ", "if", " (arr[l + i] < arr[m + j]) {\n                    ", "temp", "[k] = arr[l + i];\n                    k += ", "1", ";\n                    i += ", "1", ";\n                } ", "else", " {\n                    ", "temp", "[k] = arr[m + j];\n                    k += ", "1", ";\n                    j += ", "1", ";\n                }\n            }\n            ", "while", " (l + i < m) {\n                ", "temp", "[k] = arr[l + i];\n                k += ", "1", ";\n                i += ", "1", ";\n            }\n            ", "while", " (m + j < r) {\n                ", "temp", "[k] = arr[m + j];\n                k += ", "1", ";\n                j += ", "1", ";\n            }\n            ", "for", " (", "int", " n = ", "0", "; n < ", "temp", ".length - ", "1", "; n++) {\n                arr[l + n] = ", "temp", "[n];\n            }\n        }\n    }\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;每个记录是一个区间&amp;#xff0c;可以理解成一个块&amp;#xff0c;比较顺序如图中虚线隔开的部分。不知道这样你能不能理解题目代码中两城记录什么时候&amp;#43;&amp;#43;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/583169711066128.jpg\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["归并排序问题，信息技术", ["这个题目怎么想才能思路清晰啊😭感觉看了很久还是觉得有点乱，主要的思路是怎么样的？", "\n", "\n\n", " ", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;import java.util.Arrays;\npublic class HelloWorld {\npublic void merge_sort(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;q[]&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; l, &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; r){\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (l &amp;#61;&amp;#61; r) {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; mid &amp;#61; (l&amp;#43;r)&amp;gt;&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    merge_sort(&lt;span class=\"hljs-keyword\"&gt;q&lt;/span&gt;, l, mid);\n    merge_sort(&lt;span class=\"hljs-keyword\"&gt;q&lt;/span&gt;, mid &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, r);\n\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; temp[] &amp;#61; new &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;[r-l&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i &amp;#61; l, j &amp;#61; mid &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt;&amp;#61; mid &amp;amp;&amp;amp; j &amp;lt;&amp;#61; r) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;q[i]&lt;/span&gt; &amp;lt; &lt;span class=\"hljs-string\"&gt;q[j]&lt;/span&gt;) {\n            temp[k&amp;#43;&amp;#43;] &amp;#61; &lt;span class=\"hljs-string\"&gt;q[i&amp;#43;&amp;#43;]&lt;/span&gt;;\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            temp[k&amp;#43;&amp;#43;] &amp;#61; &lt;span class=\"hljs-string\"&gt;q[j&amp;#43;&amp;#43;]&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt;&amp;#61; mid) {\n        temp[k&amp;#43;&amp;#43;] &amp;#61; &lt;span class=\"hljs-string\"&gt;q[i&amp;#43;&amp;#43;]&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (j &amp;lt;&amp;#61; r) {\n        temp[k&amp;#43;&amp;#43;] &amp;#61; &lt;span class=\"hljs-string\"&gt;q[j&amp;#43;&amp;#43;]&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; p &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; p &amp;lt; temp.length; p&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-string\"&gt;q[l&amp;#43;p]&lt;/span&gt; &amp;#61; temp[p];\n    }\n}\n\npublic static void main(String[] args) {\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; []qwe &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;};\n    HelloWorld demo &amp;#61; new HelloWorld();\n    demo.merge_sort(qwe, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, qwe.length-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    System.out.println(Arrays.toString(qwe));\n}\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在线测试通过&amp;#xff08;因为在线平台的限制&amp;#xff0c;我把主类类名略微修改了。&amp;#xff09;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/906319856086119.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["Java归并排序结果不对应", ["归并排序出现错误，", "\n", "public class demo1 {\n    static ", "int", "[] a=new ", "int", "[", "11000", "];\n    public void merge_sort(", "int", " ", "q[]", ", ", "int", " l, ", "int", " r){\n        ", "if", " (l == r) ", "return", ";", "//", "若数组中只有一个或没有数，就直接返回了\n        ", "int", " mid = (l+r)>>", "1", ";\n        merge_sort(", "q", ", l, mid);\n        merge_sort(", "q", ",mid +", "1", " ,r);\n        ", "int", " k = l, i = l, j = mid + ", "1", ";\n        ", "int", " temp[] = new ", "int", "[q.length];\n        ", "while", " (i<=mid && j<=r){\n            ", "if", " (", "q[i]", " < ", "q[j]", ") temp[k++] = ", "q[i++]", ";\n            ", "else", " temp[k++] = ", "q[j++]", ";\n        }\n        ", "while", " (i <= mid) temp[k++] = ", "q[i++]", ";\n        ", "while", " (j <= r) temp[k++] = ", "q[j++]", ";\n        ", "for", " (i = ", "1", ", j = ", "0", "; i <= r; i++, j++) ", "q[i]", " = temp[j];\n    }\n\n    public static void main(String[] args) {\n        ", "int", " []qwe = {", "3", ",", "2", ",", "1", ",", "1", "};\n        demo1 demo = new demo1();\n        demo.merge_sort(qwe,", "0", ", qwe.length-", "1", ");\n        System.out.println(Arrays.toString(qwe));\n    }\n\n}\n", "\n", "运行结果却是：", "\n", "求解惑"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的代码实现了归并排序的思想&amp;#xff0c;但是有一个小错误。在while循环结束后&amp;#xff0c;你应该把result的赋值语句放在循环外面&amp;#xff0c;否则会导致每次只返回一个元素。我修改了一下&amp;#xff0c;你可以参考一下。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;shu &lt;/span&gt;&amp;#61; [&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;]\ndef test(&lt;span class=\"hljs-keyword\"&gt;shu):\n&lt;/span&gt;    if len(&lt;span class=\"hljs-keyword\"&gt;shu) &lt;/span&gt;&amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        return &lt;span class=\"hljs-keyword\"&gt;shu\n&lt;/span&gt;    mid &amp;#61; int(len(&lt;span class=\"hljs-keyword\"&gt;shu)/2)\n&lt;/span&gt;    &lt;span class=\"hljs-keyword\"&gt;llist, &lt;/span&gt;rlist &amp;#61; test(&lt;span class=\"hljs-keyword\"&gt;shu[:mid]), &lt;/span&gt;test(&lt;span class=\"hljs-keyword\"&gt;shu[mid:])\n&lt;/span&gt;    result &amp;#61; []\n    i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    while i &amp;lt; len(&lt;span class=\"hljs-keyword\"&gt;llist) &lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;and &lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;lt; len(rlist):\n        if rlist[&lt;span class=\"hljs-keyword\"&gt;j] &lt;/span&gt;&amp;lt; &lt;span class=\"hljs-keyword\"&gt;llist[i]:\n&lt;/span&gt;            result.append(rlist[&lt;span class=\"hljs-keyword\"&gt;j])\n&lt;/span&gt;            &lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;        else:&lt;/span&gt;\n            result.append(&lt;span class=\"hljs-keyword\"&gt;llist[i])\n&lt;/span&gt;            i &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 把result的赋值语句放在循环外面&lt;/span&gt;\n    result &amp;#61; result &amp;#43; &lt;span class=\"hljs-keyword\"&gt;llist[i:] &lt;/span&gt;&amp;#43; rlist[&lt;span class=\"hljs-keyword\"&gt;j:]\n&lt;/span&gt;    return result\nprint(test(&lt;span class=\"hljs-keyword\"&gt;shu))\n&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["关于归并排序问题，如何解决？", ["shu ", "= [", "5", ", ", "3", ", ", "7", ", ", "2", ", ", "4", ", ", "6", ", ", "1", ", ", "8", "]\ndef test(", "shu):\n", "    if len(", "shu) ", "<= ", "1", ":\n        return ", "shu\n", "    mid = int(len(", "shu)/2)\n", "    ", "llist, ", "rlist = test(", "shu[:mid]), ", "test(", "shu[mid:])\n", "    result = []\n    i = ", "0", "\n    ", "j ", "= ", "0", "\n    while i < len(", "llist) ", "and ", "j ", "< len(rlist):\n        if rlist[", "j] ", "< ", "llist[i]:\n", "            result.append(rlist[", "j])\n", "            ", "j ", "= ", "j ", "+ ", "1", "\n", "        else:", "\n            result.append(", "llist[i])\n", "            i = i + ", "1", "\n        result = result + ", "llist[i:] ", "+ rlist[", "j:]\n", "        return result\nprint(test(", "shu))", "\n", "\n", "\n", "为什么结果错误", "​"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;#define _CRT_SECURE_NO_WARNINGS &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;malloc.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;windows.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;memory.h&amp;gt;\n&lt;span class=\"hljs-comment\"&gt;//归并排序&amp;#xff1a;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;/*\narr:指定数组\nleft:判定左边界\nright:判断右边界\nmid:判断中点\n*/&lt;/span&gt;\nvoid &lt;span class=\"hljs-constructor\"&gt;Merge(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; *p &amp;#61; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;*)malloc((right - left &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;));\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; *temp &amp;#61; p;\n    memset(p, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, (right - left &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;));\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; L &amp;#61; left;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; R &amp;#61; mid &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (L &amp;lt;&amp;#61; mid&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;R &amp;lt;&amp;#61; right)\n    {\n        *p&amp;#43;&amp;#43; &amp;#61; arr&lt;span class=\"hljs-literal\"&gt;[L]&lt;/span&gt; &amp;lt; arr&lt;span class=\"hljs-literal\"&gt;[R]&lt;/span&gt; ? arr&lt;span class=\"hljs-literal\"&gt;[L&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; : arr&lt;span class=\"hljs-literal\"&gt;[R&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (L &amp;lt;&amp;#61; mid)\n    {\n        *p&amp;#43;&amp;#43; &amp;#61; arr&lt;span class=\"hljs-literal\"&gt;[L&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (R &amp;lt;&amp;#61; right)\n    {\n        *p&amp;#43;&amp;#43; &amp;#61; arr&lt;span class=\"hljs-literal\"&gt;[R&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    }\n \n    memcpy(arr &amp;#43; left, temp, (right - left &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;sizeof(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;));\n \n    free(temp);\n    temp &amp;#61; NULL;\n}\n \nvoid &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (left&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;right)\n        return;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; mid &amp;#61; left &amp;#43; ((right - left)&amp;gt;&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n \n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;)&lt;/span&gt;;            &lt;span class=\"hljs-comment\"&gt;//左半边&lt;/span&gt;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt; &amp;#43; 1, &lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;)&lt;/span&gt;;        &lt;span class=\"hljs-comment\"&gt;//右半边&lt;/span&gt;\n    &lt;span class=\"hljs-constructor\"&gt;Merge(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;left&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;right&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;mid&lt;/span&gt;)&lt;/span&gt;;        &lt;span class=\"hljs-comment\"&gt;//排序&lt;/span&gt;\n}\n \n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]&lt;/span&gt; &amp;#61; { &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;};\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;, 0, &lt;span class=\"hljs-params\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;)&lt;/span&gt;/ sizeof(arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&lt;/span&gt;) - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; sizeof(arr)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;sizeof(arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&lt;/span&gt;); i&amp;#43;&amp;#43;)\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, arr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n \n    system(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["我想问问，这归并排序为什么排不了啊😭", ["排序完的数组出现0，-1，和原来的数组不同，为什么会这样呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;溢出问题单点调试下&amp;#xff0c;你看看right&amp;gt;arr长度的情况&amp;#xff0c;修改下第一个循环&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;void merge(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;* arr, const &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;, const &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt;, const &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt;)\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    const &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt; &amp;#61; (&lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt; - &lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;* temp &amp;#61; new &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;];\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n   while (i &amp;lt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt; &amp;amp;&amp;amp; j &amp;lt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt; &amp;amp;&amp;amp; k &amp;lt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;)\n    temp[k&amp;#43;&amp;#43;] &amp;#61; arr[i] &amp;lt; arr[j] ? arr[i&amp;#43;&amp;#43;] &lt;span class=\"hljs-symbol\"&gt;:&lt;/span&gt; arr[j&amp;#43;&amp;#43;];\n    while (i &amp;lt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;mid&lt;/span&gt;)\n        temp[k&amp;#43;&amp;#43;] &amp;#61; arr[i&amp;#43;&amp;#43;];\n    while (j &amp;lt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt;)\n        temp[k&amp;#43;&amp;#43;] &amp;#61; arr[j&amp;#43;&amp;#43;];//缓冲区溢出&amp;#xff1f;\n    for (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;; &amp;#43;&amp;#43;i)\n        arr[&lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt; &amp;#43; i] &amp;#61; temp[i];//未初始化内存&amp;#xff1f;\n    delete[]temp;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["C++归并排序产生缓冲区溢出和未初始化内存的警告", ["写了一个简单的归并排序，产生了警告C6386写入 \"temp\" 时缓冲区溢出和警告C6001使用未初始化的内存“*temp”。", "\n", "void merge(", "int", "* arr, const ", "int", "& ", "left", ", const ", "int", "& ", "mid", ", const ", "int", "& ", "right", ")\n{\n    ", "int", " i = ", "left", ";\n    ", "int", " j = ", "mid", " + ", "1", ";\n    const ", "int", " ", "len", " = (", "right", " - ", "left", ") + ", "1", ";\n    ", "int", "* temp = new ", "int", "[", "len", "];\n    ", "int", " k = ", "0", ";\n    while (i <= ", "mid", " && j <= ", "right", ")\n        temp[k++] = arr[i] < arr[j] ? arr[i++] ", ":", " arr[j++];\n    while (i <= ", "mid", ")\n        temp[k++] = arr[i++];\n    while (j <= ", "right", ")\n        temp[k++] = arr[j++];//缓冲区溢出？\n    for (", "int", " i = ", "0", "; i < ", "len", "; ++i)\n        arr[", "left", " + i] = temp[i];//未初始化内存？\n    delete[]temp;\n}\n\nvoid mergeSort(", "int", "* arr, const ", "int", "& ", "left", ", const ", "int", "& ", "right", ")\n{\n    ", "if", " (", "left", " == ", "right", ")\n        return;\n    ", "int", " ", "mid", " = (", "left", " + ", "right", ") >> ", "1", ";\n    mergeSort(arr, ", "left", ", ", "mid", ");\n    mergeSort(arr, ", "mid", " + ", "1", ", ", "right", ");\n    merge(arr, ", "left", ", ", "mid", ", ", "right", ");\n}\n\nvoid MergeSo", "rt:", ":so", "rt(", "int", "* arr, const ", "int", "& ", "len", ")\n{\n    cout << ", "\"归并排序\"", " << endl;\n    mergeSort(arr, ", "0", ", ", "len", " - ", "1", ");\n}\n\n\n", "\n", "找了半天没发现警告的原因，经过测试程序是能正常运行的。"]], "Tag": "算法设计"}
{"Answer": "改了三处：\r\n1.多传入了一个参数int c[]作为目标数组\r\n2.guibing函数里k初始成start\r\n3.guibing函数最后的for循环改成了for(i=start; i&lt;=end; i++)a[i] = c[i];\r\n```\r\n #include&lt;iostream&gt;\r\nusing namespace std; \r\nvoid fenkai(int a[], int c[], int l, int r);\r\nvoid guibing(int a[], int c[], int start, int mid, int end);\r\nint main(){\r\n\tint a[20], c[20];\r\n\tfor (int i = 0; i &lt; 20; i++){\r\n\t\ta[i] = rand() % 100;\r\n\t\tcout &lt;&lt; a[i] &lt;&lt; \" \";\r\n\t}\r\n\tcout &lt;&lt; endl;\r\n\tfenkai(a, c, 0,19);\r\n\tfor (int i = 0; i &lt; 20; i++)\r\n\t\tcout &lt;&lt; c[i] &lt;&lt; \" \";\r\n}\r\nvoid guibing(int a[], int c[], int start, int mid, int end){\r\n\tint i, j, k;\r\n\ti = start, j = mid + 1, k = start;\r\n\t//int *c=new int[end-start+1];\r\n\twhile (i &lt;= mid&amp;&amp;j &lt;= end){\r\n\t\tif (a[i] &lt; a[j])\r\n\t\t\tc[k++] = a[i++];\r\n\t\telse\r\n\t\t\tc[k++] = a[j++];\r\n\t}\r\n\twhile (i&lt;=mid)\r\n\t\t\tc[k++] = a[i++];\r\n\twhile (j&lt;=end)\r\n\t\t\tc[k++] = a[j++];\r\n\t//for (int i = start, k = 0; i&lt;(end-start+1); i++, k++)\r\n\tfor(i=start; i&lt;=end; i++)\r\n\t\ta[i] = c[i];\r\n\t//delete[] c;\r\n}\r\nvoid fenkai(int a[],int c[], int l,int r){\r\n\tif (l &lt; r){\r\n\t\tint m = (l + r) / 2;\r\n\t\tfenkai(a, c, l, m);\r\n\t\tfenkai(a, c, m+1, r);\r\n\t\tguibing(a, c, l, m, r);\r\n\t}\r\n}\r\n```\r\n![图片说明](https://img-ask.csdn.net/upload/201605/24/1464083785_511567.png)", "Konwledge_Point": "归并排序", "Question": ["大神们帮我看看这个归并排序代码，谢了。", ["#include", "\nusing namespace std; ", "\nvoid fenkai(int a[], int l, int r);", "\nvoid guibing(int a[], int start, int mid, int end);", "\nint main(){", "\n    int a[20];", "\n    for (int i = 0; i < 20; i++){", "\n        a[i] = rand() % 100;", "\n        cout << a[i] << \" \";", "\n    }", "\n    cout << endl;", "\n    fenkai(a, 0,19);", "\n    for (int i = 0; i < 20; i++)", "\n        cout << a[i] << \" \";", "\n}", "\nvoid guibing(int a[], int start, int mid, int end){", "\n    int i, j, k;", "\n    i = start, j = mid + 1, k = 0;", "\n    int *c=new int[end-start+1];", "\n    while (i <= mid&&j <= end){", "\n        if (a[i] < a[j])", "\n            c[k++] = a[i++];", "\n        else", "\n            c[k++] = a[j++];", "\n    }", "\n    while (i<=mid)", "\n            c[k++] = a[i++];", "\n    while (j<=end)", "\n            c[k++] = a[j++];", "\n    for (int i = start, k = 0; i<(end-start+1); i++, k++)", "\n        a[i] = c[k];", "\n    delete[] c;", "\n}", "\nvoid fenkai(int a[],int l,int r){", "\n    if (l < r){", "\n        int m = (l + r) / 2;", "\n        fenkai(a, l, m);", "\n        fenkai(a, m+1, r);", "\n        guibing(a, l, m, r);", "\n    }", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;归并排序的空间复杂度是O(n)&amp;#xff0c;即需要一个额外的数组来进行合并操作。而快速排序的空间复杂度是O(logn)。所以要求内存量最大的排序方法应该是归并排序&amp;#xff0c;答案为D。&lt;/p&gt;\n&lt;p&gt;如果对您有帮助&amp;#xff0c;请给与采纳&amp;#xff0c;谢谢。&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["下述几种排序方法中，要求内存量最大的", ["要求内存量最大的，这个怎么是归并排序，归并排序是O(n),而快速排序是O(nlogn),"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://www.cnblogs.com/plain8/p/8093052.html\" id=\"textarea_1632453228601_1632453240577_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;C语言&amp;#xff1a;归并排序 - plain8 - 博客园&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;归并排序&amp;#xff08;C语言&amp;#xff09;。 先上代码&amp;#xff0c;理论会后面一起总结。 1. 递归 2. 非递归&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://common.cnblogs.com/favicon.svg\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.cnblogs.com/plain8/p/8093052.html&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["不知道这个归并排序错在哪了，没有用动态内存分配。", ["\n#include<stdio.h>\n#include<stdlib.h>\n\n\nvoid merge(", "int", "* arr,", "int", " ", "left", ",", "int", " ", "right", ",", "int", " ", "mid", "){\n    ", "int", " Arr[", "20", "];\n    ", "int", " M=", "right", "-", "left", ";\n    ", "int", " k=", "0", ";\n    ", "int", " ", "t", "=", "mid", "+", "1", ";\n    while(", "left", "<=", "mid", "&&", "t", "<=", "right", "){\n        ", "if", "(arr[", "left", "]<arr[", "t", "]){\n            Arr[k++]=arr[", "left", "++];\n        }else{\n            Arr[k++]=arr[", "t", "++];\n        }\n    }\n    while(", "left", "<=", "mid", ")\n        Arr[k++]=arr[", "left", "++];\n    while(", "t", "<=", "right", ")\n        Arr[k++]=arr[", "t", "++];\n    \n    ", "int", " i;\n    for(i=", "0", ";i<=M;i++){\n        arr[i]=Arr[i];\n    }\n}\n\nvoid merge_sort(", "int", "* arr,", "int", " ", "left", ",", "int", " ", "right", "){\n    ", "if", "(", "right", "==", "left", ")\n        return ;\n        \n    ", "int", " ", "mid", "=(", "right", "+", "left", ")/", "2", ";\n    merge_sort(arr,", "left", ",", "mid", ");\n    merge_sort(arr,", "mid", "+", "1", ",", "right", ");\n    \n    merge(arr,", "left", ",", "right", ",", "mid", ");\n}\n\nvoid print(", "int", "* arr,", "int", " ", "n", "){\n    ", "int", " i;\n    for(i=", "0", ";i<", "n", ";i++)\n        printf(", "\"%d\"", ",arr[i]);\n}\n\n", "int", " main(){\n    ", "int", " arr[", "5", "]={", "5", ",", "4", ",", "3", ",", "2", ",", "1", "};\n    merge_sort(arr,", "0", ",", "4", ");\n    print(arr,", "5", ");\n    \n    return ", "0", "; \n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;越界后, and的短路特性使得第二个条件没被执行. 另外我觉得没必要写这么复杂的条件, 可以在最后把剩下的放进去, 代码比较对称, 逻辑比较清晰:&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;def merge(s1, s2, s):\n    i &amp;#61; j &amp;#61; 0\n    while i &amp;lt; len(s1) and j &amp;lt; len(s2):\n        if s1[i] &amp;lt; s2[j]:\n            s[i&amp;#43;j] &amp;#61; s1[i]\n            i &amp;#43;&amp;#61; 1\n        elif s1[i] &amp;gt;&amp;#61; s2[j]:\n            s[i&amp;#43;j] &amp;#61; s2[j]\n            j &amp;#43;&amp;#61; 1\n    while i &amp;lt; len(s1):\n        s[i&amp;#43;j] &amp;#61; s1[i]\n        i &amp;#43;&amp;#61; 1\n    while j &amp;lt; len(s2):\n        s[i&amp;#43;j] &amp;#61; s2[j]\n        j &amp;#43;&amp;#61; 1&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;或者直接舍弃指标i和j, 用列表的pop移动.&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["python实现二归并排序时，为什么只是交换了and两边条件的位置，一个能出结果，一个就报错？", ["\n", "def merge(s1,s2,s):\n    i = j = 0\n    while i+j<len(s):\n        if j==len(s2) or (i<len(s1) and s1[i]<s2[j]):\n            s[i+j] = s1[i]\n            i += 1\n        else:\n            s[i+j] = s2[j]\n            j += 1\n\ndef merge_sort(s):\n    n = len(s)\n    if n < 2:\n        return\n    mid = n // 2\n    s1 = s[0:mid]\n    s2 = s[mid:n]\n    merge_sort(s1)\n    merge_sort(s2)\n    merge(s1,s2,s)\n\n\ns = [24,17,40,28,13,14,22,32,40,21,48,4,47,8,37,18,88,56,79,35,0,66,156]\nmerge_sort(s)\nprint(s)\n", "\n\n", "这个代码是能正常运行的，结果是：", "\n\n", "\n", "[0, 4, 8, 13, 14, 17, 18, 21, 22, 24, 28, 32, 35, 37, 40, 40, 47, 48, 56, 66, 79, 88, 156]", "\n\n", "但是我只是改变了if 语句中 and两边语句 的位置，结果就报错了", "\n\n", "\n", " if j==len(s2) or (s1[i]<s2[j] and i<len(s1)):", "\n\n", "\n", "---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n<ipython-input-9-5ac2ee75fd0c> in <module>()\n     22 \n     23 s = [24,17,40,28,13,14,22,32,40,21,48,4,47,8,37,18,88,56,79,35,0,66,156]\n---> 24 merge_sort(s)\n     25 print(s)\n\n<ipython-input-9-5ac2ee75fd0c> in merge_sort(s)\n     16     s1 = s[0:mid]\n     17     s2 = s[mid:n]\n---> 18     merge_sort(s1)\n     19     merge_sort(s2)\n     20     merge(s1,s2,s)\n\n<ipython-input-9-5ac2ee75fd0c> in merge_sort(s)\n     16     s1 = s[0:mid]\n     17     s2 = s[mid:n]\n---> 18     merge_sort(s1)\n     19     merge_sort(s2)\n     20     merge(s1,s2,s)\n\n<ipython-input-9-5ac2ee75fd0c> in merge_sort(s)\n     18     merge_sort(s1)\n     19     merge_sort(s2)\n---> 20     merge(s1,s2,s)\n     21 \n     22 \n\n<ipython-input-9-5ac2ee75fd0c> in merge(s1, s2, s)\n      2     i = j = 0\n      3     while i+j<len(s):\n----> 4         if j==len(s2) or (s1[i]<s2[j] and i<len(s1)):\n      5             s[i+j] = s1[i]\n      6             i += 1\n\nIndexError: list index out of range\n"]], "Tag": "算法设计"}
{"Answer": "找了一个描述： \r\n例如，需要归并文件A、B，则按固定长度从文件A、B中分别读取一小段AS、BS，将AS、BS的归并结果记录在CS中，如果AS先比较完（反之类似），则将CS追加写入文件C并清空CS内存，并从文件A中读取下一段保存在AS中，再运行归并函数，直到文件A或B完全读取完，再把剩下的AS或BS写入文件C\r\n好好理解一下", "Konwledge_Point": "归并排序", "Question": ["海量数据多路归并的问题，求指点～", ["归并排序我知道：就是把两个有序序列归并为一个有序序列", "\n\n", "海量数据的多路归并的思想我也看了，就是有一点不明白，它是一小段一小段归并的，那他是怎么做到整体有序的呢？", "\n\n", "多路归并排序并不是把所有数据都读取到内存中，而是从每个文件中读取一小块数据，归并好就保存一小块，再读取下一小块", "\n\n", "比方说1～2000 和2001～4000归并，10个10个归并", "\n\n", "那结果就是：1，2，。。。，9，10，2001，2002，。。。，2009，2010", "\n\n", "11，12，。。。，19，20，2011，2012，.。。，2019，2020", "\n\n", ".。。。。。。。。。。。。。。", "\n\n", "后面也是一样", "\n\n", "那他怎么做到 整体的有序呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;对于第一个问题&amp;#xff0c;根据题目中描述的第一趟排序结果为{14&amp;#xff0c;5&amp;#xff0c;19&amp;#xff0c;20&amp;#xff0c;11&amp;#xff0c;19}&amp;#xff0c;可以确定采用的排序算法是简单选择排序&amp;#xff0c;因为简单选择排序的每一趟排序都会选择当前未排序部分中的最小元素&amp;#xff0c;并将其与未排序部分的第一个元素进行交换&amp;#xff0c;使得前面部分有序&amp;#xff0c;而第一趟排序的结果与题目中给出的结果一致。&lt;/p&gt;\n&lt;p&gt;对于第二个问题&amp;#xff0c;若从节省存储空间的角度考虑&amp;#xff0c;则应该首选快速排序&amp;#xff0c;因为它的空间复杂度为O(log n)&amp;#xff0c;而堆排序和归并排序的空间复杂度分别为O(n)和O(n log n)。其次选取堆排序&amp;#xff0c;因为它的空间复杂度与数据规模无关&amp;#xff0c;而归并排序的空间复杂度与数据规模成正比。&lt;/p&gt;\n&lt;p&gt;但是&amp;#xff0c;如果同时从最坏情况和节省内存的角度考虑&amp;#xff0c;那么归并排序可能是更好的选择&amp;#xff0c;因为它的时间复杂度为O(n log n)&amp;#xff0c;且空间复杂度为O(n)&amp;#xff0c;而快速排序在最坏情况下的时间复杂度为O(n^2)&amp;#xff0c;且空间复杂度为O(log n)。因此&amp;#xff0c;如果要同时考虑最坏情况和节省内存&amp;#xff0c;应该选取归并排序方法。&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["对给出的一组关键若按关键字非递减排序", ["对给出的一组关键字。若按关键字非递减排序问采用的排序算法是", "A）简单选择排序", "\n", "\n", "这个应首选快速排序吧，它的空间复杂度是nlogn，堆是n²", "．在堆排序、快速排序和归并排序中，若从节省存储空间考虑，则应首先选取（）方法，其次选取()方法；若", "从最坏并且节省内存，不应该是归并排序吗", "\n", "若只从最坏情况下排序最快并且要节省内存考虑，则应选取__方法。，"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;所谓稳定的排序方法&lt;br /&gt;不是说有时候能排序成功&amp;#xff0c;有时候不会成功&lt;br /&gt;是说在排序之后&amp;#xff0c;能够使得具有相同大小的键值的记录前后位置没有发生变化&lt;br /&gt;那你想&amp;#xff0c;两个链表要合并成一个链表&amp;#xff0c;两个链表里有相同的项x&amp;#xff0c;一开始肯定是较短的链表里x比较靠前&amp;#xff0c;较长的链表里x比较靠后&amp;#xff0c;而合并的时候到底谁在前就看你外层循环和内层循环是哪个&amp;#xff0c;跟x原来的位置无关&amp;#xff0c;所以x的相对位置就可能发生变化&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["数据结构排序B选项为啥不选", ["选项B为啥不对？基数排序和归并排序不都应该是稳定的算法吗？求！！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;各种算法的时间空间复杂度如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/765063837776163.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;br /&gt;原理参考链接&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/YUBANGSHUANGYUER/article/details/114377566\" id=\"textarea_1677738261737_1677738379539_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1 md_link_url\"&gt;\n         https://blog.csdn.net/YUBANGSHUANGYUER/article/details/114377566\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;p&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;有帮助的话&amp;#xff0c;请点采纳~&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "归并排序", "Question": ["下列四种排序中（  ）的空间复杂度最大。", ["14、下列四种排序中（  ）的空间复杂度最大。", "(A) 插入排序    (B) 冒泡排序    (C) 堆排序      (D) 归并排序", "为啥答案选择D选项，不是堆的空间复杂度为O（n^2)吗"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;是否可以理解为对数组排序呢&amp;#xff1f;分别用不同排序方法。&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["java学生成绩排序", ["【问题描述】", " 对本班所有学生的上学期的各科平均成绩进行从高到低排序，学生的平均成绩可按照上学期真实平均成绩设计，也可利用随机数自动生成，并对这些平均成绩进行多种方法进行排序。", "【基本要求】", "请用Java语言编写程序，满足以下要求：", "（1）至少采用四种方法实现上述问题求解（提示，可采用的方法有插入排序、希尔排序、起泡排序、快速排序、选择排序、堆排序、归并排序），并把排序后的结果写出到不同的文本文件中，文件名自行设计。", "（2）统计每一种排序方法的性能（以上机运行程序所花费的时间为准进行对比），并分析各个排序算法的优劣。", "【测试数据】", "（1）要求使用全部合法数据，整体非法数据，局部非法数据进行程序测试，以保证程序的稳定。", "（2）若平均成绩随机生成，生成的范围为：[60 - 100]。", "【实现提示】", "成绩的排序可利用学过的排序算法实现，对于结果的写出可利用java的缓冲输入输出字符流进行实现。", "__"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;试试我这个呢,从结果看还是快排快些&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/391827503946120.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;你可以按照自己的需求修改测试程序。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdlib.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;time.h&amp;gt;\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr1&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr2&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;2000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr3&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;3000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr4&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;4000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr5&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;5000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr6&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;6000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr7&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;7000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr8&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;8000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr9&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;9000&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr10&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;]&lt;/span&gt;;\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; brr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;]&lt;/span&gt;;\n\nvoid init&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n    srand((unsigned &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;)time(NULL));\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr1&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;2000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr1&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr2&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;3000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr3&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr1&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;4000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr4&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;5000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr5&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;6000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr6&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;7000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr7&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;8000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr8&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;9000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr9&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        arr10&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; rand&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    }\n}\n\nvoid quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;number&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;first&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;last&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i, j, pivot;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; temp;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (first&amp;lt;last) {\n        pivot &amp;#61; first;\n        i &amp;#61; first;\n        j &amp;#61; last;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i&amp;lt;j) {\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;lt;&amp;#61; number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;pivot&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;i&amp;lt;last)\n                i&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;&amp;gt;number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;pivot&lt;/span&gt;]&lt;/span&gt;)\n                j--;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i&amp;lt;j) {\n                temp &amp;#61; number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;;\n                number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;;\n                number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt; &amp;#61; temp;\n            }\n        }\n        temp &amp;#61; number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;pivot&lt;/span&gt;]&lt;/span&gt;;\n        number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;pivot&lt;/span&gt;]&lt;/span&gt; &amp;#61; number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;;\n        number&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt; &amp;#61; temp;\n        quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;number&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;first&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;j&lt;/span&gt; - 1)&lt;/span&gt;;\n        quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;number&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;j&lt;/span&gt; &amp;#43; 1, &lt;span class=\"hljs-params\"&gt;last&lt;/span&gt;)&lt;/span&gt;;\n    }\n}\n\nvoid &lt;span class=\"hljs-constructor\"&gt;Merge(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;sourceArr&lt;/span&gt;[],&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;tempArr&lt;/span&gt;[], &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;startIndex&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;midIndex&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;endIndex&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; startIndex, j&amp;#61;midIndex&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, k &amp;#61; startIndex;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i!&amp;#61;midIndex&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;j!&amp;#61;endIndex&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(sourceArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;gt; sourceArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;)\n            tempArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; sourceArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            tempArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; sourceArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i !&amp;#61; midIndex&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        tempArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; sourceArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(j !&amp;#61; endIndex&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        tempArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt; &amp;#61; sourceArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;]&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;startIndex; i&amp;lt;&amp;#61;endIndex; i&amp;#43;&amp;#43;)\n        sourceArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; tempArr&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;;\n}\n \n&lt;span class=\"hljs-comment\"&gt;//内部使用递归&lt;/span&gt;\nvoid &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;sourceArr&lt;/span&gt;[], &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;tempArr&lt;/span&gt;[], &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;startIndex&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;endIndex&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; midIndex;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(startIndex &amp;lt; endIndex)\n    {\n        midIndex &amp;#61; startIndex &amp;#43; (endIndex-startIndex)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//避免溢出int&lt;/span&gt;\n        &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;sourceArr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;tempArr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;startIndex&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;midIndex&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;sourceArr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;tempArr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;midIndex&lt;/span&gt;&amp;#43;1, &lt;span class=\"hljs-params\"&gt;endIndex&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-constructor\"&gt;Merge(&lt;span class=\"hljs-params\"&gt;sourceArr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;tempArr&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;startIndex&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;midIndex&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;endIndex&lt;/span&gt;)&lt;/span&gt;;\n    }\n}\nvoid test&lt;span class=\"hljs-constructor\"&gt;Merge()&lt;/span&gt;\n{\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 1000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr2&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 2000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr3&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 3000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr4&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 4000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr5&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 5000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr6&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 6000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr7&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 7000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr8&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 8000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr9&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 9000)&lt;/span&gt;;\n    &lt;span class=\"hljs-constructor\"&gt;MergeSort(&lt;span class=\"hljs-params\"&gt;arr10&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;brr&lt;/span&gt;, 0, 10000)&lt;/span&gt;;\n}\nvoid test&lt;span class=\"hljs-constructor\"&gt;Qsort()&lt;/span&gt;\n{\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr1&lt;/span&gt;,0,1000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr2&lt;/span&gt;,0,2000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr3&lt;/span&gt;,0,3000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr4&lt;/span&gt;,0,4000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr5&lt;/span&gt;,0,5000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr6&lt;/span&gt;,0,6000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr7&lt;/span&gt;,0,7000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr8&lt;/span&gt;,0,8000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr9&lt;/span&gt;,0,9000)&lt;/span&gt;;\n    quick&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;arr10&lt;/span&gt;,0,10000)&lt;/span&gt;;\n}\n\nvoid print&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr1:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr1[%d]:%d &amp;#34;&lt;/span&gt;,i,arr1&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr2:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;2000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr2[%d]:%d &amp;#34;&lt;/span&gt;,i,arr2&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr3:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;3000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr3[%d]:%d &amp;#34;&lt;/span&gt;,i,arr3&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr4:\\n&amp;#34;&lt;/span&gt;);    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;4000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr4[%d]:%d &amp;#34;&lt;/span&gt;,i,arr4&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr5:\\n&amp;#34;&lt;/span&gt;);    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;5000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr5[%d]:%d &amp;#34;&lt;/span&gt;,i,arr5&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr6:\\n&amp;#34;&lt;/span&gt;);    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;6000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr6%d]:%d &amp;#34;&lt;/span&gt;,i,arr6&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr7:\\n&amp;#34;&lt;/span&gt;);    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;7000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr7[%d]:%d &amp;#34;&lt;/span&gt;,i,arr7&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr8:\\n&amp;#34;&lt;/span&gt;);    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;8000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr8[%d]:%d &amp;#34;&lt;/span&gt;,i,arr8&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr9:\\n&amp;#34;&lt;/span&gt;);    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;9000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr9[%d]:%d &amp;#34;&lt;/span&gt;,i,arr9&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n        \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\narr10:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;arr10[%d]:%d &amp;#34;&lt;/span&gt;,i,arr10&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    \n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main(void) \n{ \n    init&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    \n    &lt;span class=\"hljs-comment\"&gt;/*归并排序时间记录*/&lt;/span&gt;\n    \n    clock_t &lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;;\n    double time_cost;\n    &lt;span class=\"hljs-comment\"&gt;// 开始记录&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt; &amp;#61; clock&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;/*这里输入待测试程序段*/&lt;/span&gt;\n    test&lt;span class=\"hljs-constructor\"&gt;Merge()&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;// 结束记录&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt; &amp;#61; clock&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    time_cost &amp;#61; (double)(&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt; - &lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;CLOCKS_PER_SEC;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;testMerge cost : %lf s\\n&amp;#34;&lt;/span&gt;, CLOCKS_PER_SEC, time_cost);\n    \n    \n     init&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n\n    &lt;span class=\"hljs-comment\"&gt;/*快速排序时间记录*/&lt;/span&gt;\n    \n    clock_t begin1, end1;\n    double time_cost1;\n    &lt;span class=\"hljs-comment\"&gt;// 开始记录&lt;/span&gt;\n    begin1 &amp;#61; clock&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;/*这里输入待测试程序段*/&lt;/span&gt;\n    test&lt;span class=\"hljs-constructor\"&gt;Qsort()&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;// 结束记录&lt;/span&gt;\n    end1 &amp;#61; clock&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    time_cost1 &amp;#61; (double)(end1 - begin1)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;CLOCKS_PER_SEC;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;testQsort cost : %lf s\\n&amp;#34;&lt;/span&gt;, CLOCKS_PER_SEC, time_cost1);\n    \n    print&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["关于#排序算法#的问题，如何用c++解决？", ["题目是：用大小分别为1000 2000 3000 4000 5000 6000 7000 8000 9000和10000的10个数组的排列来统计归并排序算法和快速排序算法的时间复杂性。", "我尝试使用随机数生成10个数组中的数据，但是每次排列结束都会时间超限。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1, A&lt;br /&gt;2, B&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["关于#线性回归#的问题：如果只想得到1000个元素组成的序列中第5个最小元素之前的部分排序的序列", ["如果只想得到1000个元素组成的序列中第5个最小元素之前的部分排序的序列，用（    ）方法最快。", "A．堆排序                                B．快速排序", "C．插入排序                                D．归并排序", "广义表满足Head(A)=Tail(A)，则A为（   ）。", "A．（）                                 B．（（））", "C．（（），（））                           D．（（），（），（））"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-attribute\"&gt;def&lt;/span&gt; merge_sort(alist):\n    &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; len(alist) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-attribute\"&gt;return&lt;/span&gt; alist\n    &lt;span class=\"hljs-attribute\"&gt;mid&lt;/span&gt; &amp;#61; len(alist) // &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;left&lt;/span&gt; &amp;#61; merge_sort(alist[:mid])\n    &lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt; &amp;#61; merge_sort(alist[mid:])\n    &lt;span class=\"hljs-attribute\"&gt;result&lt;/span&gt; &amp;#61;&lt;span class=\"hljs-meta\"&gt; []&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;while&lt;/span&gt; len(left) &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; and len(right) &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; left[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;lt;&amp;#61; right[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]:\n            &lt;span class=\"hljs-attribute\"&gt;result&lt;/span&gt;.append(left.pop(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;))\n        &lt;span class=\"hljs-attribute\"&gt;else&lt;/span&gt;:\n            &lt;span class=\"hljs-attribute\"&gt;result&lt;/span&gt;.append(right.pop(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;))\n    &lt;span class=\"hljs-attribute\"&gt;result&lt;/span&gt; &amp;#43;&amp;#61; left\n    &lt;span class=\"hljs-attribute\"&gt;result&lt;/span&gt; &amp;#43;&amp;#61; right\n    &lt;span class=\"hljs-attribute\"&gt;return&lt;/span&gt; result\n\n\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(merge_sort([&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;99&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;33&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;69&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;77&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;88&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;55&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;33&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;36&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;39&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;66&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;44&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["请问这个程序的代码该怎么写", ["编写函数merge_sort(alist)使用“归并排序算法”对参数列表alist的各元素进行升序排序，排序后，", "alist的各元素按升序有序。"]], "Tag": "算法设计"}
{"Answer": "&lt;h5 id=\"h5_可以创建中、英文标点码表字典&amp;#xff0c;轮询字符输入文本字符串中、英标点替换就好。_1669093665245\"&gt;  可以创建中、英文标点码表字典&amp;#xff0c;轮询字符输入文本字符串中、英标点替换就好。&lt;/h5&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#!/usr/bin/nve python&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# coding: utf-8&lt;/span&gt;\n\nen_punc &amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;,;.:!? &amp;#39;&lt;/span&gt;\nch_punc &amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#xff0c;&amp;#xff1b;。&amp;#xff1a;&amp;#xff01;&amp;#xff1f; &amp;#39;&lt;/span&gt;\nen_punc_dict &amp;#61; &lt;span class=\"hljs-built_in\"&gt;dict&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;zip&lt;/span&gt;(en_punc, ch_punc))\nch_punc_dict &amp;#61; &lt;span class=\"hljs-built_in\"&gt;dict&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;zip&lt;/span&gt;(ch_punc, en_punc))\n\n\ntext &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&amp;#39;\n排序算法一:冒泡排序。 排序算法二:快速排序。 排序算法三:堆排序。 排序算法四:归并排序 排序算法五:插入排序 排序算法六:基数排序 排序算法七:选择排序 排序算法八:堆排序。 排序算法九:希尔排序 排序算法十:快速排序(FIFO)。 排序算法十一:树结构排序……\n&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 输入中文&amp;#xff1a;&amp;#xff0c;代码默认&amp;#61;:(英文)&amp;#xff0c;反之一样&lt;/span&gt;\n\ntext2 &amp;#61; []\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; text:\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; en_punc:\n        i &amp;#61; en_punc_dict.get(i)\n    &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; ch_punc:\n        i &amp;#61; ch_punc_dict.get(i)\n\n    text2.append(i)\n\ntext2 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;.join(text2)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#34;\\n\\n输入文本&amp;#xff1a;\\n&lt;span class=\"hljs-subst\"&gt;{text}&lt;/span&gt;\\n\\n代码处理后&amp;#xff1a;\\n&lt;span class=\"hljs-subst\"&gt;{text2}&lt;/span&gt;\\n&amp;#34;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/703983390966166.jpg\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;hr /&gt;\n\n&lt;h4 id=\"h4_如果输入文本只有中、英文一种标点&amp;#xff0c;只须轮询相反标点列表&amp;#xff0c;用strreplace、resub任一个方法替换输入文本的标点为另一类标点。这样子&amp;#xff0c;比轮询输入文本高效&amp;#xff0c;特别是输入文本很大。_1669093665359\"&gt;如果输入文本只有中、英文一种标点&amp;#xff0c;只须轮询相反标点列表&amp;#xff0c;用str.replace()、re.sub()任一个方法替换输入文本的标点为另一类标点。这样子&amp;#xff0c;比轮询输入文本高效&amp;#xff0c;特别是输入文本“很大“。&lt;/h4&gt;", "Konwledge_Point": "归并排序", "Question": ["全角半角切换，input输入中文：标点，代码默认=:(英文)，反之一样？", ["# 输入，标点符号默认中英文相互切换", "\n\n", "# 编号①②③   ord( '①' ): 9312", "\nz=", "input", "(", "''''''", ")\nb= ", "input", "(", "'''请输入切片位置：'''", ")\nd= ", "input", "(", "'''请输入回车位置：'''", ")\nz_list = z.strip().split(d)\n", "for", " index,value ", "in", " ", "enumerate", "(z_list):\n    ", "print", "(", "'{}.{}'", ".", "format", "(  ", "chr", "( ", "9312", "+index ) , value.split(b)[", "1", "] ))\n\n\n", "'''\n排序算法一:冒泡排序 排序算法二:快速排序 排序算法三:堆排序 排序算法四:归并排序 排序算法五:插入排序 排序算法六:基数排序 排序算法七:选择排序 排序算法八:堆排序 排序算法九:希尔排序 排序算法十:快速排序(FIFO) 排序算法十一:树结构排序\n'''", "\n\n", "# 输入中文：，代码默认=:(英文)，反之一样", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/613827320966118.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;br /&gt;望采纳&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["CSDN反馈中心在哪里？", ["CSDN反馈中心在哪里？", "我在私信中发了一张图片，是一幅讲解归并排序的动图为什么它说内容含有敏感信息，还把它删了，我想到CSDN反馈中心反馈。", "用的是电脑"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;运算符优先级的问题&amp;#xff0c;优先级比较如下&amp;#xff1a;&lt;/p&gt;\n\n&lt;p&gt;除运算符 &amp;gt; 加运算符 &amp;gt; 位移运算符&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["求中点的问题：为什么会栈溢出", ["归并排序求中点时，为什么我写右移就会报栈溢出，而除以2就可以呢？"]], "Tag": "算法设计"}
{"Answer": "scanf_s需要指定每个输入字符串长度\r\n```\r\n scanf_s(\"%s %s\", inf[i].sName,8 ,inf[i].sTele,11);\r\n```", "Konwledge_Point": "归并排序", "Question": ["VS2013使用scanf_s过界", ["无法运行，代码如", "\n\n", "// info.cpp : Defines the entry point for the console application.\n//\n\n#include \"stdafx.h\"\n#include <stdio.h>\n#include <string.h>\n//infomation\n//technology\n//IT\n//冒泡 选择 插入排序\n//快速排序 归并排序\nstruct SInfo\n{\n    char sName[20];\n    char sTele[20];\n};\n\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    SInfo inf[5];\n#define COUNT sizeof(inf)/sizeof(inf[0])\n    int i = 0;\n    while (i < COUNT)\n    {\n        printf(\"请输入第%d个学生姓名和电话：【以空格间隔】\", i + 1);\n        fflush(stdin);\n        scanf_s(\"%s %s\", inf[i].sName, inf[i].sTele);       //调试到这错误\n        ++i;\n    }\n    //ccc aaa ddd bbb eee\n    i = 0;\n    unsigned int j = 0;\n    while (i < COUNT - i)\n    {\n        j = 0;\n        while (j < COUNT - i)\n        {\n            if (strcmp(inf[j].sName, inf[j + 1].sName) > 0)\n            {\n                SInfo t = inf[j];\n                inf[j] = inf[j + 1];\n                inf[j + 1] = t;\n            }\n            ++j;\n        }\n        ++i;\n    }\n    i = 0;\n    while (i < COUNT)\n    {\n        printf(\"%s\\t%s\\n\", inf[i].sName, inf[i].sTele);\n        ++i;\n    }\n    return 0;\n}\n\n", "\n\n", "调试之后出现", "\nUnhandled exception at 0xFEFEFEFE in info.exe: 0xC0000005: Access violation executing location 0xFEFEFEFE.", "\n麻烦大神讲解下，谢谢"]], "Tag": "算法设计"}
{"Answer": "```\r\n 因为是递归\r\n if (hi&lt;=lo) return;\r\n    int mid=lo+(hi-lo)/2;\r\n    sort(a,lo,mid);\r\n    sort(a,mid+1,hi);\r\n你跳出的是sort(a,lo,mid);这一步函数调用，这个函数调用return返回后就是执行sort(a,mid+1,hi);\r\n```", "Konwledge_Point": "归并排序", "Question": ["java递归 if（） return返回到哪里？", ["学习归并排序时，遇到递归的思想。", "\n测试输入 mergesortexample", "\n单步调试到，if (hi<=lo) return;当hi=0，lo=0时，执行return，在我理解中，return就是退出方法了，为何会跳到 sort(a,mid+1,hi);而且此时，lo=0，hi=1？", "\n\n", "private static void sort(Comparable[] a,int lo,int hi){", "\n        //将数组a【lo hi】排序", "\n        if (hi<=lo) return;", "\n        int mid=lo+(hi-lo)/2;", "\n        sort(a,lo,mid);", "\n        sort(a,mid+1,hi);", "\n        merge(a,lo,mid,hi);", "\n    }", "\n\n", "import java.util.Scanner;", "\n\n", "public class Merge {", "\n    private static Comparable[] aux;", "\n\n", "public static void sort(Comparable[] a){\n\n    aux=new Comparable[a.length];\n    sort(a,0,a.length-1);\n}\n\nprivate static boolean less(Comparable v,Comparable w){\n    return v.compareTo(w)<0;\n}\n\npublic static void merge(Comparable[] a,int lo,int mid,int hi){\n    //将a【lo mid】与a【mid+1，hi】归并\n    int i=lo;\n    int j=mid+1;\n\n    for(int k=lo;k<=hi;k++){\n        aux[k]=a[k];\n    }\n\n    for(int k=lo;k<=hi;k++){\n        if(i>mid)                          a[k]=aux[j++];\n        else if(j>hi)                      a[k]=aux[i++];\n             else if(less(aux[j],aux[i]))  a[k]=aux[j++];\n                  else                     a[k]=aux[i++];\n    }\n}\n\nprivate static void sort(Comparable[] a,int lo,int hi){\n    //将数组a【lo hi】排序\n    if (hi<=lo) return;\n    int mid=lo+(hi-lo)/2;\n    sort(a,lo,mid);\n    sort(a,mid+1,hi);\n    merge(a,lo,mid,hi);\n}\nprivate static void show(Comparable[] a){\n    //在单行中打印数组\n    for(int i=0; i<a.length;i++)\n        System.out.print(a[i]+\"\");\n    System.out.println();\n\n}\npublic static boolean isSorted(Comparable[] a){\n    //测试数组是否有序\n    for(int i=1;i<a.length;i++)\n        if(less(a[i],a[i-1])) return false;\n    return true;\n}\npublic static void main(String[] args){\n    //从标准输入读取字符串，将它们排序并输出\n     System.out.print(\"输入\");\n     Scanner s = new Scanner(System.in);\n     String line=s.nextLine();\n     System.out.println(\"输入的是\"+line);                \n\n    char [] charArr =line.toCharArray();    \n    String[] strArr = new String[charArr.length];\n\n    for(int i = 0; i < strArr.length; i++) {\n        strArr[i] = String.valueOf(charArr[i]);\n    }\n\n    sort(strArr);\n    assert isSorted(strArr);\n    show(strArr);\n}\n", "\n\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题目呢&amp;#xff1f;另外快排时间复杂度也是O(nlogn)啊&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["OJ时间超限问题，代码能改进什么地方", ["问题遇到的现象和发生背景", "\n", "题目是输出数组第k大元素，要求多组输入，第一行是k,第二行是数组，要求时间复杂度为O(n)，用数据分区+递归查找加随机选取基准就可以,我明明用的是归并排序但oj老是时间超限。", "\n", "问题相关代码，请勿粘贴截图", "\n", "#include<stdio.h>", "#include<stdlib.h>", "int main(){", "    int n;", "    int a[10000];", "    char c;", "    int k;", "    while(scanf(\"%d\",&k)!=EOF){", "    while(scanf(\"%d\",&a[0])!=EOF){", "        int n=0;", "        while(scanf(\"%d\",&a[++n])){", "            if(c=getchar()=='\\n')", "            break;", "        }", "       int result=quickselect(a,0,n,k);", "       printf(\"%d\\n\",result);", "    }", "   }", "    return 0;", "}", "void swap(int a[],int i,int j){", "    int t=a[i];", "    a[i]=a[j];", "    a[j]=t;", "}", "int random(int p,int q){", "    return rand()%(q-p+1)+p;", "}", "int rpart(int a[],int p,int q){", "    int r=random(p,q);", "    swap(a,p,r);", "    int i=part(a,p,q);", "    return i;", "}", "\n", "int part(int a[],int p,int q){", "    int x=a[p];", "    int i=p,j;", "    for(j=p+1;j<=q;j++){", "        if(a[j]>=x){", "            i++;", "            swap(a,i,j);", "        }", "    }", "    swap(a,p,i);", "    return i;", "}", "int quickselect(int a[],int p,int q,int k){", "    if(p==q){", "        return a[p];", "      }", "      else{", "        int i=rpart(a,p,q);", "        int j=i-p+1;", "        if(k<=j){", "        return quickselect(a,p,i,k);", "      }", "      else{", "          return quickselect(a,i+1,q,k-j);", "      }", "}", "\n", "}", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "想问问我这个代码需要改进什么地方", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "你的main函数中的k没有给他new一个数组，所以你cin的时候程序就崩了", "Konwledge_Point": "归并排序", "Question": ["尝试数据结构中的mergesearch失败", ["最近在学数据结构和算法，想简单模拟一下向量的归并排序", "\n\n", "#include<iostream>\nusing namespace std;\nclass vector\n{\n    int* num;\n    public:\n        vector(int *k)\n        {\n            num=k;\n        }\n        void mergesort(int,int);\n        void merge(int,int,int);\n        void display()\n        {\n            for(int i=0;i<10;i++)\n            cout<<num[i]<<endl;\n        }\n};\nvoid vector::mergesort(int low,int high)\n{\n    if(high-low<2)return;\n    int mi=(low+high)/2;\n    mergesort(low,mi);\n    mergesort(mi,high);\n    merge(low,mi,high);\n}\nvoid vector::merge(int low,int mi,int high)\n{\n    int* A=num+low;\n    int lenb=mi-low;\n    int *B=new int[lenb];\n    for(int i=0;i<lenb;i++)B[i]=A[i];\n    int lenc=high-mi;\n    int *C=num+mi;\n    for(int i=0,j=0,k=0;(j<lenb)||(k<lenc);)\n    {\n        if((j<lenb)&&(lenc<=k||(B[j]<=C[k])))A[i++]=B[j++];\n        if((k<lenc)&&(lenb<=j||(C[k]<B[j])))A[i++]=C[k++];\n    }\n    delete[]B;\n}\nint main()\n{\n    int *k;\n    for(int i=0;i<10;i++)\n        cin>>k[i];\n    cout<<\"一开始\"<<endl;\n    for(int i=0;i<10;i++)\n        cout<<\" \"<<k[i];\n    cout<<endl;\n    vector v(k);\n    v.mergesort(0,10);\n    v.display();\n}\n", "\n\n", "\n\n", "出现了一些错误"]], "Tag": "算法设计"}
{"Answer": "http://www.codeproject.com/Articles/418776/How-to-replace-recursive-functions-using-stack-and", "Konwledge_Point": "归并排序", "Question": ["排序的递归问题：能否用函数指针以及栈代替递归？？", ["最近学习排序，对于快排，归并等处理海量数据效率高的算法很钟意，但是其自身的递归特性有很多缺点，譬如数据量过大时存在溢出的风险，也影响了算法的效率，故想到用栈代替递归这一过程。大致想法就是创建个函数指针类型的栈，然后将每个子排序的函数指针压入其中，然后再一个一个用*解引用来运行函数。当然我知道改成非递归有别的方法，但是可能会比这复杂，就想考虑用栈来实现。我想知道的是，对于快排和归并等递归排序算法，用以上方法实现的话，算法的开销（时间复杂度和空间复杂度），以及实际效率会是如何，有实际意义么。问题描述不全，毕竟第一次在CSDN提问，望前辈们多看看。本人大二，学了c++ java。"]], "Tag": "算法设计"}
{"Answer": "不管什么结构，插入到表尾就是了，只要表空间够用\r\n如果是需要排序，\r\n先各自排序，再插入排序\r\n如果是已经有序，也是插入排序", "Konwledge_Point": "归并排序", "Question": ["[C++]线性表的合并问题", ["设计线性表的接口函数int MergeList(LIST&L1 ,LIST L2); \n把线性表L2中的数据全部合并到线性表L1的尾部。\n不用排序,直接合并\n如下所示：\nL1中有数据{1,2,3,4,5}，L2中有数据 {6,7,8,9,10}；\n合并的结果为L1中包含数据 {1,2,3,4,5,6,7,8,9,10}。\n\n\n'#include <iostream>\nusing namespace std;\n'#define LISTSIZE 100\ntypedef struct \n{\n    int items[LISTSIZE];\n    int length;\n}sqlist;\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如果假定一个有序一个无序&amp;#xff0c;是不是就相当于求逆序对个数O(nlogn)&lt;br /&gt;实现这个假定的时间复杂度是O(n)&lt;/p&gt;", "Konwledge_Point": "归并排序", "Question": ["排序算法题（有关逆序对）", ["首先，题目如下", "\n", "我的想法是利用归并，分别将两个数组逆序对存到两个哈希集合中，然后再遍历其中一个求出相同逆序对个数，得到答案。但最终超时。求问是否有更好的思路，或者提供相关资料，感谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题目里给出的条件是&amp;#xff1a;L1和L2是给定的带头结点的单链表&amp;#xff0c;List Merge( List L1, List L2 ); 函数里的操作要注意&amp;#xff0c;修改如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ElementType;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Node&lt;/span&gt;* PtrToNode;\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Node&lt;/span&gt; {\n    ElementType Data;\n    PtrToNode   Next;\n};\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; PtrToNode List;\n&lt;span class=\"hljs-function\"&gt;List &lt;span class=\"hljs-title\"&gt;Read&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;/* 细节在此不表 */&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(List L)&lt;/span&gt;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;/* 细节在此不表&amp;#xff1b;空链表将输出NULL */&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;List &lt;span class=\"hljs-title\"&gt;Merge&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(List L1, List L2)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    List L1 &amp;#61; &lt;span class=\"hljs-literal\"&gt;nullptr&lt;/span&gt;, L2 &amp;#61; &lt;span class=\"hljs-literal\"&gt;nullptr&lt;/span&gt;, L;\n    &lt;span class=\"hljs-built_in\"&gt;srand&lt;/span&gt;((&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;)&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;(&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;));\n    L1 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;Read&lt;/span&gt;();\n    L2 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;Read&lt;/span&gt;();\n    L &amp;#61; &lt;span class=\"hljs-built_in\"&gt;Merge&lt;/span&gt;(L1, L2);\n    &lt;span class=\"hljs-built_in\"&gt;Print&lt;/span&gt;(L);\n    &lt;span class=\"hljs-built_in\"&gt;Print&lt;/span&gt;(L1);\n    &lt;span class=\"hljs-built_in\"&gt;Print&lt;/span&gt;(L2);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;span class=\"hljs-function\"&gt;List &lt;span class=\"hljs-title\"&gt;Read&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    List p, q, tmp;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, n;\n    p &amp;#61; q &amp;#61; (List)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Node));\n    p-&amp;gt;Next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入链表的长度:&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n    {\n        tmp &amp;#61; (List)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Node));\n        tmp-&amp;gt;Next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n        tmp-&amp;gt;Data &amp;#61; &lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;() % &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        \n        p-&amp;gt;Next &amp;#61; tmp;\n        p &amp;#61; tmp;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; q;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(List L)&lt;/span&gt;\n&lt;/span&gt;{\n    List p &amp;#61; L-&amp;gt;Next;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, p-&amp;gt;Data);\n        p &amp;#61; p-&amp;gt;Next;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;cmpfunc&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;* a, &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;* b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; (*(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*)a - *(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*)b);\n}\n\n&lt;span class=\"hljs-function\"&gt;List &lt;span class=\"hljs-title\"&gt;Merge&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(List L1, List L2)&lt;/span&gt;\n&lt;/span&gt;{\n    List p, q, s, L;\n                         &lt;span class=\"hljs-comment\"&gt;//L &amp;#61; (List)malloc(sizeof(List));&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, num &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n                         &lt;span class=\"hljs-comment\"&gt;//临时变量yyds&lt;/span&gt;\n    p &amp;#61; L1-&amp;gt;Next, q &amp;#61; L2-&amp;gt;Next;\n                        &lt;span class=\"hljs-comment\"&gt;//s &amp;#61; L;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)   &lt;span class=\"hljs-comment\"&gt;//while (p-&amp;gt;Next !&amp;#61; NULL)&lt;/span&gt;\n    {\n        a[i&amp;#43;&amp;#43;] &amp;#61; p-&amp;gt;Data;\n        p &amp;#61; p-&amp;gt;Next;\n        num&amp;#43;&amp;#43;;\n    }\n                         &lt;span class=\"hljs-comment\"&gt;//p-&amp;gt;Next &amp;#61; q;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (q !&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;//while (q-&amp;gt;Next !&amp;#61; NULL)&lt;/span&gt;\n    {\n        a[i&amp;#43;&amp;#43;] &amp;#61; q-&amp;gt;Data;\n        q &amp;#61; q-&amp;gt;Next;\n        num&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;qsort&lt;/span&gt;(a, num, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;), cmpfunc);\n\n    s &amp;#61; L &amp;#61; (List)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Node));\n    L-&amp;gt;Next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; num; i&amp;#43;&amp;#43;)\n    {    \n        L-&amp;gt;Next&amp;#61;(List)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Node));&lt;span class=\"hljs-comment\"&gt;//L-&amp;gt;Next&amp;#61;(List)malloc(sizeof(List));&lt;/span&gt;\n        L-&amp;gt;Next-&amp;gt;Data &amp;#61; a[i];\n        L-&amp;gt;Next-&amp;gt;Next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n        L &amp;#61; L-&amp;gt;Next;\n    }\n    &lt;span class=\"hljs-comment\"&gt;//L1-&amp;gt;Next &amp;#61; NULL;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//L2-&amp;gt;Next &amp;#61; NULL;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; s;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["关于新链表创建的具体问题", ["原题是PTA02-线性结构1 两个有序链表序列的合并", "本题要求实现一个函数，将两个链表表示的递增整数序列合并为一个非递减的整数序列。", "函数接口定义：", "List Merge( List L1, List L2 );", "其中List结构定义如下：", "\n", "typedef struct Node ", "PtrToNode;", "struct Node {", "    ElementType Data; /", " 存储结点数据 ", "/", "    PtrToNode   Next; /", " 指向下一个结点的指针 ", "/", "};", "typedef PtrToNode List; /", " 定义单链表类型 */", "L1和L2是给定的带头结点的单链表，其结点存储的数据是递增有序的；函数Merge要将L1和L2合并为一个非递减的整数序列。应直接使用原序列中的结点，返回归并后的带头结点的链表头指针。", "\n", "裁判测试程序样例：", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n\n", "typedef", " ", "int", " ElementType;\n", "typedef", " ", "struct", " ", "Node", " *PtrToNode;\n", "struct", " ", "Node", " {\n    ElementType Data;\n    PtrToNode   Next;\n};\n", "typedef", " PtrToNode List;\n\n", "List ", "Read", "()", "; ", "/* 细节在此不表 */", "\n", "void", " ", "Print", "( List L )", "; ", "/* 细节在此不表；空链表将输出NULL */", "\n\n", "List ", "Merge", "( List L1, List L2 )", ";\n\n", "int", " ", "main", "()", "\n", "{\n    List L1, L2, L;\n    L1 = ", "Read", "();\n    L2 = ", "Read", "();\n    L = ", "Merge", "(L1, L2);\n    ", "Print", "(L);\n    ", "Print", "(L1);\n    ", "Print", "(L2);\n    ", "return", " ", "0", ";\n}\n", "\n", "我写的函数部分如下:", "\n", "int", " cmpfunc (", "const", " ", "void", " * a, ", "const", " ", "void", " * b)\n{\n   ", "return", " ( *(", "int", "*)a - *(", "int", "*)b );\n}\n\n\n", "List", " Merge( ", "List", " L1, ", "List", " L2 )\n{\n    ", "List", " p,q,s,L;\n    \n    L=(", "List", ")malloc(sizeof(", "List", "));\n    ", "int", " i=", "0", ",num=", "1", ";\n    ", "int", " a[", "10000", "];\n    \n    ", "//临时变量yyds", "\n    p=L1,q=L2;\n    s=L;\n    \n    ", "while", "(p->Next!=", "NULL", ")\n    {\n        a[i++]=p->Data;\n        p=p->Next;\n        num++;\n    }\n    \n    p->Next=q;\n    \n    ", "while", "(q->Next!=", "NULL", ")\n    {\n        a[i++]=q->Data;\n        q=q->Next;\n        num++;\n    }\n    \n    qsort(a,num,sizeof(", "int", "),cmpfunc);\n    \n    ", "for", "(i=", "0", ";i<num;i++)\n    {\n        L->Data=a[i];\n", "//      L->Next=(List)malloc(sizeof(List));", "\n        L=L->Next;\n    }\n    \n    L1->Next=", "NULL", ";\n    L2->Next=", "NULL", ";\n    \n    ", "return", " s;\n}\n\n", "\n", "核心逻辑是将两个短的链表连起来,然后用一个数组放入所有的数据,再用c语言自带的qsort函数排序,但除了两个空链表的情况,永远都是段错误,我想过是否是我每增加一个新节点是否需要再次申请空间,在句中加入了 L->Next=(List)malloc(sizeof(List)); 但这样会全错,从新链表实际是否占有空间角度出发好像不对,思考了很久还是没想到问题出现在哪里", "\n", "此问题最快的O(n)算法我已经学习过了,但仍想找到自己的问题,所以来咨询大家!超级感谢!"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-section\"&gt;#include &lt;span class=\"language-xml\"&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;stdio.h&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-section\"&gt;#include &lt;span class=\"language-xml\"&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;stdlib.h&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;/\n/&lt;span class=\"hljs-emphasis\"&gt;* 链表实现的头文件&amp;#xff0c;文件名slnklist.h *&lt;/span&gt;/\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;/\ntypedef int datatype;\ntypedef struct link&lt;span class=\"hljs-emphasis\"&gt;_node {\n    datatype info;\n    struct link_&lt;/span&gt;node &lt;span class=\"hljs-emphasis\"&gt;*next;\n}node;\n\n\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;*&lt;/span&gt;/\n/&lt;span class=\"hljs-emphasis\"&gt;*  函数功能&amp;#xff1a;建立一个空的带头结点的单链表           *&lt;/span&gt;/\n/&lt;span class=\"hljs-emphasis\"&gt;*  函数参数&amp;#xff1a;空                                     *&lt;/span&gt;/\n/&lt;span class=\"hljs-emphasis\"&gt;*  函数返回值&amp;#xff1a;指向node类型变量的指针             *&lt;/span&gt;/\n/&lt;span class=\"hljs-emphasis\"&gt;*  文件名&amp;#xff1a;hlnklist.c&amp;#xff0c;函数名&amp;#xff1a;init()                    *&lt;/span&gt;/\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt; &lt;span class=\"hljs-emphasis\"&gt;*/\nnode *&lt;/span&gt;init()\n{\n&lt;span class=\"hljs-code\"&gt;    node *head;\n    head &amp;#61; (node*)malloc(sizeof(node));\n    head-&amp;gt;next &amp;#61; NULL;\n    return head;\n}\n&lt;/span&gt;\n\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  函数功能&amp;#xff1a;输出带头结点的单链表中各个结点的值     &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  函数参数&amp;#xff1a;指向node类型变量的指针head            &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt; 函数返回值&amp;#xff1a;无                          &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  文件名&amp;#xff1a;hlnklist.c&amp;#xff0c;函数名&amp;#xff1a;display()               &lt;span class=\"hljs-emphasis\"&gt;*/\n  /&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;*&lt;/span&gt;/\nvoid display(node &lt;span class=\"hljs-emphasis\"&gt;*head)\n{\n    node *&lt;/span&gt;p;\n&lt;span class=\"hljs-code\"&gt;    p &amp;#61; head-&amp;gt;next;/*从第一个&amp;#xff08;实际&amp;#xff09;结点开始*/\n    if (!p) printf(&amp;#34;\\n带头结点的单链表是空的!&amp;#34;);\n    else\n    {\n        printf(&amp;#34;\\n带头结点的单链表各个结点的值为&amp;#xff1a;\\n&amp;#34;);\n        while (p) { printf(&amp;#34;%5d&amp;#34;, p-&amp;gt;info); p &amp;#61; p-&amp;gt;next; }\n    }\n}\n&lt;/span&gt;\n\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  函数功能&amp;#xff1a;在带头结点的单链表中查找第i个结点地址 &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  函数参数&amp;#xff1a;指向node类型变量的指针head           &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;             int类型变量i                          &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  函数返回值&amp;#xff1a;指向node类型变量的指针head          &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  文件名hlnklist.c&amp;#xff0c;函数名find()                     &lt;span class=\"hljs-emphasis\"&gt;*/\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;*&lt;/span&gt;/\nnode &lt;span class=\"hljs-emphasis\"&gt;*find(node *&lt;/span&gt;head, int i)\n{\n&lt;span class=\"hljs-code\"&gt;    int j &amp;#61; 0;\n    node *p &amp;#61; head;\n    if (i &amp;lt; 0) { printf(&amp;#34;\\n带头结点的单链表中不存在第%d个结点&amp;#xff01;&amp;#34;, i); return NULL; }\n    else if (i &amp;#61;&amp;#61; 0) return p;/*此时p指向的是头结点*/\n    while (p&amp;amp;&amp;amp;i !&amp;#61; j)/*没有查找完并且还没有找到*/\n    {\n        p &amp;#61; p-&amp;gt;next; j&amp;#43;&amp;#43;;/*继续向后&amp;#xff08;左&amp;#xff09;查找&amp;#xff0c;计数器加1*/\n    }\n    return p;/*返回结果&amp;#xff0c;i&amp;#61;0时&amp;#xff0c;p指示的是头结点*/\n}\n&lt;/span&gt;\n\n/&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;**&lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  函数功能&amp;#xff1a;在带头结点的单链表中第i个结点后插入一个值为x的新结点 &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;  函数参数&amp;#xff1a;指向node类型变量的指针head                              &lt;span class=\"hljs-emphasis\"&gt;*/\n/*&lt;/span&gt;            datatype 类型变量x&amp;#xff0c;int型变量i                            &lt;span class=\"hljs-emphasis\"&gt;*/\n /*&lt;/span&gt;  函数返回值&amp;#xff1a;指向node类型变量的指针head                           &lt;span class=\"hljs-emphasis\"&gt;*/\n /*&lt;/span&gt; 文件名&amp;#xff1a;hlnklist.c&amp;#xff0c;函数名&amp;#xff1a;insert()                     &lt;span class=\"hljs-emphasis\"&gt;*/\n /&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;****&lt;/span&gt;&lt;span class=\"hljs-strong\"&gt;**&lt;span class=\"hljs-emphasis\"&gt;*/\nnode *&lt;/span&gt;insert(node &lt;span class=\"hljs-emphasis\"&gt;*head, datatype x, int i)\n{\n    node *&lt;/span&gt;p, &lt;span class=\"hljs-emphasis\"&gt;*q;\n    q &amp;#61; find(head, i);/*&lt;/span&gt;查找带头结点的单链表中的第i个结点&lt;span class=\"hljs-emphasis\"&gt;*/\n                            /*&lt;/span&gt;i&amp;#61;0&amp;#xff0c;表示新结点插入在头结点之后&amp;#xff0c;此时q指向的是头结点&lt;span class=\"hljs-emphasis\"&gt;*/\n    if (!q)/*&lt;/span&gt;没有找到&lt;span class=\"hljs-emphasis\"&gt;*/\n    {\n        printf(&amp;#34;\\n带头结点的单链表中不存在第%d个结点&amp;#xff01;不能插入%d&amp;#xff01;&amp;#34;, i, x); return head;\n    }\n    p &amp;#61; (node*&lt;/span&gt;)malloc(sizeof(node));/&lt;span class=\"hljs-emphasis\"&gt;*为准备插入的新结点分配空间*&lt;/span&gt;/\n    p-&amp;gt;info &amp;#61; x;/&lt;span class=\"hljs-emphasis\"&gt;*为新结点设置值x*&lt;/span&gt;/\n    p-&amp;gt;next &amp;#61; q-&amp;gt;next;/&lt;span class=\"hljs-emphasis\"&gt;*插入(1)*&lt;/span&gt;/\n    q-&amp;gt;next &amp;#61; p;/&lt;span class=\"hljs-emphasis\"&gt;*插入(2)&amp;#xff0c;当i&amp;#61;0时&amp;#xff0c;由于q指向的是头结点&amp;#xff0c;本语句等价于head&amp;gt;next&amp;#61;p *&lt;/span&gt;/\n    return head;\n}\n\n\nnode &lt;span class=\"hljs-emphasis\"&gt;*mergelist(node *&lt;/span&gt;head1, node &lt;span class=\"hljs-emphasis\"&gt;*head2)  /*&lt;/span&gt;本函数的作用是将两个有序表按结点值的大小合并成一个有序表&amp;#xff0c;将本函数补充完整&lt;span class=\"hljs-emphasis\"&gt;*/\n{\n    node *&lt;/span&gt;p, &lt;span class=\"hljs-emphasis\"&gt;*q, *&lt;/span&gt;s;\n    p &amp;#61; head1-&amp;gt;next;\n    q &amp;#61; head2-&amp;gt;next;\n    node &lt;span class=\"hljs-emphasis\"&gt;*head3;\n    head3 &amp;#61; head1;\n    head3-&amp;gt;next &amp;#61; NULL;\n    free(head2);\n    while (p !&amp;#61; NULL &amp;amp;&amp;amp; q !&amp;#61; NULL) {\n        if (p-&amp;gt;info &amp;lt; q-&amp;gt;info) {\n            s &amp;#61; p;\n            p &amp;#61; p-&amp;gt;next;\n        }\n        else {\n            s &amp;#61; q;\n            q &amp;#61; q-&amp;gt;next;\n        }\n        s-&amp;gt;next &amp;#61; head3-&amp;gt;next;\n        head3-&amp;gt;next &amp;#61; s;\n    }\n    if (p &amp;#61;&amp;#61; NULL) {\n        p &amp;#61; q;\n    }\n    while (p !&amp;#61; NULL) {\n        s &amp;#61; p;\n        p &amp;#61; p-&amp;gt;next;\n        s-&amp;gt;next &amp;#61; head3-&amp;gt;next;\n        head3-&amp;gt;next &amp;#61; s;\n    }\n    node *&lt;/span&gt;ans &amp;#61; init();\n    p &amp;#61; head3-&amp;gt;next;\n    while (p !&amp;#61; NULL) {\n        s &amp;#61; p;\n        p &amp;#61; p-&amp;gt;next;\n        s-&amp;gt;next &amp;#61; ans-&amp;gt;next;\n        ans-&amp;gt;next &amp;#61; s;\n    }\n    return ans;\n}\nint main()\n{\n    node &lt;span class=\"hljs-emphasis\"&gt;*L1, *&lt;/span&gt;L2;\n    datatype y;\n    int j, n;\n\n    L1 &amp;#61; init();  L2 &amp;#61; init();\n\n    /&lt;span class=\"hljs-emphasis\"&gt;*建表*&lt;/span&gt;/\n    printf(&amp;#34;请输入带头结点单链表A的结点个数&amp;#xff1a;&amp;#34;);  scanf(&amp;#34;%d&amp;#34;, &amp;amp;n);\n    printf(&amp;#34;请输入带头结点单链表A的结点值&amp;#xff1a;&amp;#34;);\n    for (j &amp;#61; 0; j &amp;lt; n; j&amp;#43;&amp;#43;)\n    {\n        scanf(&amp;#34;%d&amp;#34;, &amp;amp;y);  L1 &amp;#61; insert(L1, y, j);\n    }\n    display(L1);\n    printf(&amp;#34;\\n&amp;#34;);\n    printf(&amp;#34;请输入带头结点单链表B的结点个数&amp;#xff1a;&amp;#34;);  scanf(&amp;#34;%d&amp;#34;, &amp;amp;n);\n    printf(&amp;#34;请输入带头结点单链表B的结点值&amp;#xff1a;&amp;#34;);\n    for (j &amp;#61; 0; j &amp;lt; n; j&amp;#43;&amp;#43;)\n    {\n        scanf(&amp;#34;%d&amp;#34;, &amp;amp;y);  L2 &amp;#61; insert(L2, y, j);\n    }\n    display(L2);\n    printf(&amp;#34;\\n&amp;#34;);\n\n    /&lt;span class=\"hljs-emphasis\"&gt;*在此处完成对mergelist函数的调用&amp;#xff0c;并进行测试*&lt;/span&gt;/\n    node &lt;span class=\"hljs-emphasis\"&gt;*L3 &amp;#61; mergelist(L1, L2);\n    printf(&amp;#34;输出合并后的链表&amp;#xff1a;&amp;#34;);\n    display(L3);\n}\n\n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "归并排序", "Question": ["各位善良的学长学姐们  帮学妹看看如何写出一个完整的有序表合并的代码吧", ["#include", "using namespace std;", "\n", "template", "struct LNode", "{ DT data;", "  LNode ", "next;", "};", "//初始化单链表", "template", "bool InitList(LNode", "&L)", "{  L=new LNode;", "   if(!L)exit(1);", "   L->next=NULL;", "   return true;", "}", "//创建单链表", "template", "  //尾插法", "bool CreateList(LNode*&L,int n)", "{ LNode *p;", "    p=L;", "LNode ", "s;", "for(int i=1;i<=n;i++)", "    {", "    s=new LNode", ";", "    if(!s)", "     return false;", "    cin>>s->data;", "    s->next=p->next ;", "    p->next=s;", "    p=s;", "    }", "    return true;", "}", "//销毁单链表", "template", "void DestroyList(LNode", "&L)", "{", "    LNode", " *p;", " while(L)", " {  p=L;", "       L=L->next;", "    delete p;", " }", " L=NULL;", "}", "//遍历输出表", "template", "void DispList(LNode *&L)", "{", "LNode *p;", "p=L->next ;", "  while(p)", "  {", "   cout<", "data;", "   p=p->next;", "  }", "}", "//从小到大排序", "template", "void sort(LNode *&L)", "{", "    LNode *p,*q,*min;", "    for(p=L->next;p!=NULL;p=p->next)", "    {", "        min=p;", "        for(q=p->next;q!=NULL;q=q->next)", "        {", "            if(q->data", "data)", "                min=q;", "\n", "    }\n    ", "if", "(min!=p)\n    {\n        ", "int", " temp=p->", "data", ";\n        ", "p", "->", "data", "=min->", "data", ";\n        ", "min", "->", "data", "=temp;\n    }\n}\n", "\n", "}", "\n", "int main()", "{  int i;", "   LNode", "  *LA;", "   LNode", "  *LB;", "   LNode", "  *LC;", "   InitList(LA);", "   InitList(LB);", "   InitList(LC);", "\n", "cout", "<<", "\"请输入创建链表LA的元素个数：\"", ";\n", "cin", ">>i;\n", "cout", "<<", "\"请依次输入集合A元素为：\"", ";\n", "CreateList", "(", "LA", ",i);\n", "cout", "<<", "\"有序表LA= \"", ";\n", "sort", "(", "LA", ");\n", "DispList", "(", "LA", ");\n\n", "cout", "<<endl;\n", "cout", "<<", "\"请输入创建链表LB的元素个数：\"", ";\n", "cin", ">>i;\n", "cout", "<<", "\"请依次输入集合B元素为：\"", ";\n", "CreateList", "(", "LB", ",i);\n", "cout", "<<", "\"有序表LB= \"", ";    \n", "sort", "(", "LB", ");\n", "DispList", "(", "LB", ");\n\n", "LNode", "<int> *pa=", "LA", "->next;\n", "LNode", "<int> *pb=", "LB", "->next;\n    \n", "if", "(", "LB", "->next==", "NULL", ")\n    ", "DispList", "(", "LA", ");\n", "if", "(", "LA", "->next==", "NULL", ")\n    ", "DispList", "(", "LB", ");\n        \n", "LNode", "<int> *pc=", "LC", ";          \n    while(pa && pb)\n    {        \n    ", "if", "(pa ->", "data", " <= pb->", "data", ")", "\n      {\n        pc->", "data", " = pa->", "data", " ;", "\n        pa = pa->next;\n      }\n    ", "else", "\n      {\n        pc->", "data", " =pb->", "data", ";", "\n        pb = pb->next;\n      }\n    }\n\n    while(pa)\n    {            \n        pc->next = pa;\n        pc= pa;\n        pa = pa->next;\n    }\n    while(pb)\n    {      \n        pc->next = pb;\n        pc= pb;\n        pb = pb->next;\n    }\n\n\n", "CreateList", "(", "LC", ",pc->", "data", ");", "\n", "cout", "<<", "\"有序表归并表LC= \"", ";\n", "for", "(pc=", "LC", "->next;pc!=", "NULL", ";pc=pc->next)\n    {\n        cout<<pc->", "data", ";", "\n    }\n\n    \n", "cout", "<<endl;\n", "\n", "   return 0;", "}"]], "Tag": "算法设计"}
