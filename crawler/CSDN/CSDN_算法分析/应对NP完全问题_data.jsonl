{"Answer": "怎样证明一个问题C是NP完全问题呢？首先，要证明C是NP问题，也就是C的解的正确性容易验证；然后要证明有一个NP完全问题B，能够在多项式时间内归约到C。这就要求必须先存在至少一个NPC问题。Cook证明了NP完全问题的祖先就是SAT。SAT问题是指给定一个包含n个布尔变量的逻辑式，问是否存在一个取值组合，使得该式被满足。Cook证明了SAT是一个NPC问题，如果SAT容易解决，那么所有NP都容易解决。", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么说旅行商问题是NP Hard的？", ["为什么说旅行商问题是NP Hard的？网上看了很多文章还是比较迷糊，有谁能清晰地讲解下。怎么样判断一个算法是不是NP Hard？"]], "Tag": "算法设计"}
{"Answer": "np.where(a == 1)返回的是a=1对应的位置，需要用“行”和“列”表示，原矩阵a是个一维矩阵（行数只有一行）。\r\n第一行的[ 0 0 0 0 0 0 0 0 0 0 0]代表的是对应点的行下标\r\n第二行的[ 5 6 13 19 28 29 34 44 45 46 48]代表的是列下标\r\n合起来，就是（0，5），（0，6），（0，13）.......", "Konwledge_Point": "应对NP完全问题", "Question": ["np.where的用法 np.array(np.where(a == 1))的输出问题", ["y - 实际的标签 p - 预测", "\n\n", "    p = [[1. 1. 1. 1. 1. 1. 0. 1. 1. 1. 1. 1. 1. 1. 0. 1. 0. 1. 1. 0. 1. 0. 0. 1.\n1. 1. 1. 0. 0. 1. 1. 1. 1. 1. 1. 0. 0. 1. 0. 0. 1. 1. 1. 0. 1. 1. 0. 1.\n0. 0.]]\n  y=[[1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1 1 1 0 0\n0 1 0 0 1 1 1 0 0 0 1 1 1 0]]\n  a = [[2. 2. 2. 2. 2. 1. 1. 2. 2. 2. 2. 2. 2. 1. 0. 2. 0. 2. 2. 1. 2. 0. 0. 2.\n2. 2. 2. 0. 1. 1. 2. 2. 2. 2. 1. 0. 0. 2. 0. 0. 2. 2. 2. 0. 1. 1. 1. 2.\n1. 0.]]\n    a = p + y\nmislabeled_indices = np.array(np.where(a == 1))\n", "\n\n", "为什么输出的mislabeled_indices = [[ 0  0  0  0  0  0  0  0  0  0  0]", "\n [ 5  6 13 19 28 29 34 44 45 46 48]]", "\n 怎么是（2，x）的列表？ 第0行为什么都是0？"]], "Tag": "算法设计"}
{"Answer": "没有返回值，可以检查一下源或者在调用之前先判断一下是否为空", "Konwledge_Point": "应对NP完全问题", "Question": ["在python中运行image = image.astype(np.float32)时候发生错误。", ["AttributeError: 'NoneType' object has no attribute 'astype'请问下这是什么原因呢？有什么解决办法"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\nwaveData &amp;#61; np.frombuffer(strData, dtype&amp;#61;&amp;#39;int16&amp;#39;)&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python中声音信号导入后显示出问题（函数fromstring和frombuffer的使用区别）", ["\n", "关于Python中声音信号的导入及显示；", "\n", "相关代码：", "\n", "import wave     # 导入音频处理包\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nf = wave.open(r'D:\\1.wav', 'rb')\nparams = f.getparams()\nnchannels, sampwidth, framerate, nframes = params[:4]\n# nchannels:声道数;sampwidth:量化位数（byte）;framerate:采样频率;nframes:采样点数\nprint('channel:', nchannels, 'sampwidth:', sampwidth, 'framerate:', framerate, 'numframes:', nframes)\n\nstrData = f.readframes(nframes)  # 读取音频，字符串格式\nf.close()\n\n# waveData = np.frombuffer(strData, dtype='S1', offset=0)  \nwaveData = np.fromstring(strData, dtype=np.short)  # 将字符串转化为int\n\nwaveData.shape = -1,2   # 将waveData数组改为2列，行数自动匹配。\nwaveData = waveData.T\ntime = np.arange(0, nframes) * (1.0 / framerate)\n\nplt.figure(1)\nplt.subplot(2,1,1)\nplt.plot(time, waveData[0])\nplt.subplot(2,1,2)\nplt.plot(time, waveData[1], c='r')\nplt.xlabel(\"Time(s)\")\nplt.show()\n\n", "\n\n", "\n", "报错信息：", "\nDeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead", "\nwaveData = np.fromstring(strData, dtype=np.short)  # 将字符串转化为int", "\n", "系统建议改用frombuffer，因为fromstring提示将会被弃用，但是使用frombuffer后得出的数组经过转换后不能和time的维度相匹配，而fromstring后的数据是左右声道的数据。想要知道如何使用frombuffer来代替fromstring！", "\n", "图像可以正常显示，不会报错但是会报警告，多谢大神的帮忙", "\n", "声音信号 1.wav", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这里提示错误是因为数组的长度为19429344 分割后的五维数组为(53018,1,17,25,25) 原始数组不能达到这个分割后的数组长度,所以不能分割.你需要检查x_1_25_final_array_new.npy是否在内部加载了文件或者数组,或者你加载的文件数组数据是否符合要求&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["np.load报错 ValueError: cannot reshape array", ["问题遇到的现象和发生背景", "\n", "就简简单单一句加载npy文件代码，不知道为啥报错了reshape？", "\n", "问题相关代码，请勿粘贴截图", "\n", "import", " os\n", "from", " osgeo ", "import", " gdal\n", "from", " osgeo ", "import", " ogr\n", "import", " sys\n", "import", " random\n", "import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n\n", "x_train_array", " = np.load('../x_1_25_final_array_new.npy')\n", "\n", "运行结果及报错内容", "\n", "Traceback (most recent ", "call", " last):\n  File \"/home/wangweiming/下载/FirePredict1031/me/test.py\", ", "line", " ", "10", ", ", "in", " <module>\n    x_train_array = np.", "load", "(", "'../x_1_25_final_array_new.npy'", ")\n  File \"/home/wangweiming/anaconda3/lib/python3.8/site-packages/numpy/lib/npyio.py\", ", "line", " ", "440", ", ", "in", " ", "load", "\n    ", "return", " ", "format", ".read_array(fid, allow_pickle=allow_pickle,\n  File \"/home/wangweiming/anaconda3/lib/python3.8/site-packages/numpy/lib/format.py\", ", "line", " ", "783", ", ", "in", " read_array\n    ", "array", ".shape = shape\nValueError: cannot reshape ", "array", " ", "of", " size ", "19429344", " ", "into", " shape (", "53018", ",", "1", ",", "17", ",", "25", ",", "25", ")\n", "\n", "我的解答思路和尝试过的方法", "\n", "我并没有使用reshape语句，检查了源文件，我也没有修改过文件或查到reshape语句", "\n", "我想要达到的结果", "\n", "要怎么解决或避开这问题成功加载npy文件"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;构建一个 512&lt;em&gt;512&lt;/em&gt;3的数组&amp;#xff0c;每个值都是0&lt;br /&gt;相当于生成了一张黑色的 512*512大小的图片。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["opencv中np的有关数组的问题", ["img=np.zeros((512,512,3),np.uint8）这个咋理解 ，求解"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你生成了一个二维数值A&lt;br /&gt;array([[10, 11, 12],&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;       [13, 14, 15],&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;       [16, 17, 18]])&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;A[[2,1]]&amp;#xff1a;取了A中的第三行和第三行&lt;br /&gt;array([[16, 17, 18],&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;       [13, 14, 15]])&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;A[[2,1],[1,2]]&amp;#xff1a;取了A中的第三行的第二个元素和第三行第三个元素&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["A=np.array输出问题", ["A", "=np.array([[", "10", ",", "11", ",", "12", "],[", "13", ",", "14", ",", "15", "],[", "16", ",", "17", ",", "18", "]]),A[[[", "2", ",", "1", "],[", "1", ",", "2", "]]]的输出结果是（）\n\n", "\n", "array([17, 15])", "\n", "为什么？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个问题你可以去看看np.arange的官方文档&amp;#xff0c;里面提到说如果step不是整数时&amp;#xff0c;建议使用np.linespace函数&amp;#xff0c;因为此时np.arange函数存在着数值不稳定的问题。实际上np.arange函数采用的step是dtype(start&amp;#43;step)-dtype(start)&amp;#xff0c;当dtype参数没有显式给出的时候会根据其他输入参数进行推断&amp;#xff0c;输入的为float类型&amp;#xff0c;计算出的实际step就也为float型&amp;#xff0c;且不稳定一般不等于原始输入step。见下述代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attribute\"&gt;float&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;58&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)-float(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;58&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;Out&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;]: &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;10000000000000009&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;官方文档&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://numpy.org/doc/stable/reference/generated/numpy.arange.html\" id=\"textarea_1650631474639_1650631761852_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://numpy.org/doc/stable/reference/generated/numpy.arange.html&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python 的numpy中arange()函数终值包含问题", ["import numpy as np", "ab=np.arange(1.58,1.61,0.01)", "abc=np.arange(1.58,1.65,0.01)", "print(ab)", "print(abc)", "\n", "结果：", "[1.58 1.59 1.6  1.61]", "[1.58 1.59 1.6  1.61 1.62 1.63 1.64]", "\n", "问题：arange()函数一个包含终值，一个不包含终值，是为啥呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;会报错,改成;  或者A&amp;#61;np.array([[10,11,12],[13,14,15],[16,17,18]])和A[[[2,1],[1,2]]]分成两行。&lt;br /&gt;A&amp;#61;np.array([[10,11,12],[13,14,15],[16,17,18]])得到一个二维数组A&lt;br /&gt;array([[10, 11, 12],&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;       [13, 14, 15],&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;       [16, 17, 18]])&lt;/span&gt;&lt;br /&gt;A[[2,1]]得到的是&lt;br /&gt;array([[16, 17, 18],&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;       [13, 14, 15]])&lt;/span&gt;&lt;br /&gt;A[[2,1],[1,2]]得到的是&lt;br /&gt;array([17, 15])&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["A=np.array的输出结果是（）", ["\n", "A", "=np.array([[", "10", ",", "11", ",", "12", "],[", "13", ",", "14", ",", "15", "],[", "16", ",", "17", ",", "18", "]]),A[[[", "2", ",", "1", "],[", "1", ",", "2", "]]]\n", "\n", "的输出结果是（）"]], "Tag": "算法设计"}
{"Answer": "1维数组叫矢量，2维数组叫矩阵，3维及大于3维的数组就叫多维数组了", "Konwledge_Point": "应对NP完全问题", "Question": ["np.zeros((2,2,3))为什么是三个参数，怎么理解？用在哪里？", ["array([[[ 0.,  0.,  0.],", "\n        [ 0.,  0.,  0.]],", "\n       [[ 0.,  0.,  0.],", "\n        [ 0.,  0.,  0.]]])", "\n    产生2个2行3列矩阵？一直不理解。"]], "Tag": "算法设计"}
{"Answer": "可以将这段代码改下\r\nx = np.linspace(-4,4,num=50,dtype=np.complex)\r\ny = np.linspace(-4,4,num=50,dtype=np.complex)\r\n不改dtype的话，在出现负数的根时会出现问题。", "Konwledge_Point": "应对NP完全问题", "Question": ["Python的运算符的一类问题，Z = np.cos((X**3+Y**3)**(1/3))", ["import numpy as np", "\nx = np.linspace(-4,4,num=50)", "\ny = np.linspace(-4,4,num=50)", "\nX,Y = np.meshgrid(x,y)", "\nZ = np.cos((X**3+Y**3)**(1/3))", "\n程序提示报错：", "\nD:\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:5: RuntimeWarning: invalid value encountered in power", "\n  \"\"\"", "\n\n", "但是当我将程序中的Z = np.cos((X**3+Y**3)**(1/3))改成Z = np.cos((X**2+Y**2)**(1/3))，程序就能正常运行，请问各位这是怎么回事啊？\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;a&amp;#61;np.arange(2)&amp;#61;[0,1]&lt;br /&gt;b&amp;#61;np.arange(3,5)&amp;#61;[3,4]&lt;br /&gt;np.lexsort([a,b])&amp;#61;[0,1]&lt;br /&gt;np.lexsort是对b先进行排序&amp;#xff0c;排序好的索引有相同的再按a的顺序进行排序&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"https://blog.csdn.net/Mxeron/article/details/113405566\" id=\"textarea_1657675721258_1657675818445_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/Mxeron/article/details/113405566&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"https://blog.csdn.net/weixin_38145317/article/details/90370558\" id=\"textarea_1657675721258_1657675818445_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_38145317/article/details/90370558&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["a=np.arange(2)，b=np.arange(3,5)，print(np.lexsort([a,b]))的输出结果是()。", ["a=np.arange(2)，b=np.arange(3,5)，print(np.lexsort([a,b]))的输出结果是()。"]], "Tag": "算法设计"}
{"Answer": "作用：求两个数组相同的个数。\r\n这段代码可以简单的求IOU，利用元素个数求取。当然正常的做法是按照区域求取。", "Konwledge_Point": "应对NP完全问题", "Question": ["np.sum(np.array(test_labels)==np.array(test_labels_copy)）求解释代码意思", ["np.sum(np.array(test_labels)==np.array(test_labels_copy))", "\n有大佬能解释一下这行代码的意思吗？感激不尽"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;NumPy source code can be tricky to navigate, because it has so many functions for so many data types. You can find the C-level source code for the absolute value function in the file &lt;a href=\"https://github.com/numpy/numpy/blob/v1.16.1/numpy/core/src/umath/scalarmath.c.src#L505-L554\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;scalarmath.c.src&lt;/code&gt;&lt;/a&gt;. This file is actually a template with function definitions that are later replicated by the build system for several data types. Note each function is the \"kernel\" that is run for each element of the array (looping through the array is done somewhere else). The functions are always called &lt;code&gt;&amp;lt;name of the type&amp;gt;_ctype_absolute&lt;/code&gt;, where &lt;code&gt;&amp;lt;name of the type&amp;gt;&lt;/code&gt; is the data type it applies to and is generally templated. Let's go through them.&lt;/p&gt;\n\n&lt;pre class=\"lang-c prettyprint-override\"&gt;&lt;code&gt;/**begin repeat\n * #name = ubyte, ushort, uint, ulong, ulonglong#\n */\n\n#define @name@_ctype_absolute @name@_ctype_positive\n\n/**end repeat**/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This one is for unsigned types. In this case, the absolute value is the same as &lt;a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.positive.html\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;np.positive&lt;/code&gt;&lt;/a&gt;, which just copies the value without doing anything (it is what you get if you have an array &lt;code&gt;a&lt;/code&gt; and you do &lt;code&gt;+a&lt;/code&gt;).&lt;/p&gt;\n\n&lt;pre class=\"lang-c prettyprint-override\"&gt;&lt;code&gt;/**begin repeat\n * #name = byte, short, int, long, longlong#\n * #type = npy_byte, npy_short, npy_int, npy_long, npy_longlong#\n */\nstatic void\n@name@_ctype_absolute(@type@ a, @type@ *out)\n{\n    *out = (a &amp;lt; 0 ? -a : a);\n}\n/**end repeat**/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This one is for signed integers. Pretty straightforward.&lt;/p&gt;\n\n&lt;pre class=\"lang-c prettyprint-override\"&gt;&lt;code&gt;/**begin repeat\n * #name = float, double, longdouble#\n * #type = npy_float, npy_double, npy_longdouble#\n * #c = f,,l#\n */\nstatic void\n@name@_ctype_absolute(@type@ a, @type@ *out)\n{\n    *out = npy_fabs@c@(a);\n}\n/**end repeat**/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is for floating-point values. Here &lt;code&gt;npy_fabsf&lt;/code&gt;, &lt;code&gt;npy_fabs&lt;/code&gt; and &lt;code&gt;npy_fabsl&lt;/code&gt; functions are used. These are declared in &lt;a href=\"https://github.com/numpy/numpy/blob/v1.16.1/numpy/core/include/numpy/npy_math.h\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;npy_math.h&lt;/code&gt;&lt;/a&gt;, but defined through templated C code in &lt;a href=\"https://github.com/numpy/numpy/blob/v1.16.1/numpy/core/src/npymath/npy_math_internal.h.src#L455-L471\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;npy_math_internal.h.src&lt;/code&gt;&lt;/a&gt;, essentially calling the &lt;a href=\"https://en.cppreference.com/w/c/numeric/math/fabs\" rel=\"nofollow noreferrer\"&gt;C/C99 counterparts&lt;/a&gt; (unless C99 is not available, &lt;a href=\"https://github.com/numpy/numpy/blob/v1.16.1/numpy/core/src/npymath/npy_math_internal.h.src#L353-L396\" rel=\"nofollow noreferrer\"&gt;in which case &lt;code&gt;fabsf&lt;/code&gt; and &lt;code&gt;fabsl&lt;/code&gt; are emulated with &lt;code&gt;fabs&lt;/code&gt;&lt;/a&gt;). You might think that the previous code should work as well for floating-point types, but actually these are more complicated, since they have things like NaN, infinity or signed zeros, so it is better to use the standard C functions that deal with everything reliably.&lt;/p&gt;\n\n&lt;pre class=\"lang-c prettyprint-override\"&gt;&lt;code&gt;static void\nhalf_ctype_absolute(npy_half a, npy_half *out)\n{\n    *out = a&amp;amp;0x7fffu;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is actually not templated, it is the absolute value function for &lt;a href=\"https://en.wikipedia.org/wiki/Half-precision_floating-point_format\" rel=\"nofollow noreferrer\"&gt;half-precision floating-point values&lt;/a&gt;. Turns out you can change sign by just doing that bitwise operation (set the first bit to 0), since half-precision is simpler (if more limited) than other floating-point types (it's usually the same for those, but with special cases).&lt;/p&gt;\n\n&lt;pre class=\"lang-c prettyprint-override\"&gt;&lt;code&gt;/**begin repeat\n * #name = cfloat, cdouble, clongdouble#\n * #type = npy_cfloat, npy_cdouble, npy_clongdouble#\n * #rtype = npy_float, npy_double, npy_longdouble#\n * #c = f,,l#\n */\nstatic void\n@name@_ctype_absolute(@type@ a, @rtype@ *out)\n{\n    *out = npy_cabs@c@(a);\n}\n/**end repeat**/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This last one is for complex types. These use &lt;code&gt;npy_cabsf&lt;/code&gt;, &lt;code&gt;npycabs&lt;/code&gt; and &lt;code&gt;npy_cabsl&lt;/code&gt; functions, again declared in &lt;a href=\"https://github.com/numpy/numpy/blob/v1.16.1/numpy/core/include/numpy/npy_math.h\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;npy_math.h&lt;/code&gt;&lt;/a&gt; but in this case template-implemented in &lt;a href=\"https://github.com/numpy/numpy/blob/v1.16.1/numpy/core/src/npymath/npy_math_complex.c.src#L1776-L1789\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;npy_math_complex.c.src&lt;/code&gt;&lt;/a&gt; using &lt;a href=\"https://en.cppreference.com/w/c/numeric/complex/cabs\" rel=\"nofollow noreferrer\"&gt;C99 functions&lt;/a&gt; (unless that is not available, in which case it is &lt;a href=\"https://github.com/numpy/numpy/blob/v1.16.1/numpy/core/src/npymath/npy_math_complex.c.src#L153-L159\" rel=\"nofollow noreferrer\"&gt;emulated with &lt;code&gt;np.hypot&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy：np.abs到底是如何工作的？", ["\n\n", "I'm trying to implement my own absolute function for gonum dense vectors in Go. I'm wandering if there's a better way of getting the absolute value of an array than squaring and then square rooting?", "\n\n", "My main issue is that I've had to implement my own element wise Newtonian square-root function on these vectors and there's a balance between implementation speed and accuracy. If I could avoid using this square-root function I'd be happy.", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;运行下就知道了&lt;br /&gt;输出结果是 [0.5 2.5]&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/240153646756113.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import numpy as np\n\n&lt;span class=\"hljs-attribute\"&gt;x&lt;/span&gt;&amp;#61;np.arange(4).reshape(2,2)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(np.mean(x,&lt;span class=\"hljs-attribute\"&gt;axis&lt;/span&gt;&amp;#61;1))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["x=np.arange(4).reshape(2,2)，print(np.mean(x,axis=1))的输出结果是（）", ["x=np.arange(4).reshape(2,2)，print(np.mean(x,axis=1))的输出结果是（）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;将图片保存为png格式就可以了&amp;#xff0c;jpg使用的一种失真压缩标准方法&amp;#xff0c;多次上传下载jpg图片会逐渐失真&amp;#xff0c;这也是为什么两次数据矩阵不一样的缘故&amp;#xff0c;而png则是无损的压缩方式&amp;#xff0c;不会出现上述情况&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy.array()读取图片不准确问题", ["需求：", "将信息按像素存储在图片里，再完整地读出来（矩阵、图片互转）", "\n", "代码：", "\n", "    # 随机生成一个", "3", "*", "3", "的矩阵,保存到图片里\n    ", "data", " = np.random.randint(1, 255, (3, 3, 3), dtype='uint8')", "\n    print(", "\"image1: \"", ",", "data", ")", "\n    im = ", "Image", ".fromarray(", "data", ")", "\n    im.save(", "\"picture1.jpg\"", ")\n\n    # 再读出来\n    im = ", "Image", ".open(", "\"picture1.jpg\"", ")\n    ", "data", " = np.array(", "im", ")", "\n    print(", "\"image2: \"", ",", "data", ")", "\n\n    # 为了直观对比，再写入新图片\n    im = ", "Image", ".fromarray(", "data", ")", "\n    im.save(", "\"picture2.jpg\"", ")\n", "\n", "结果：", "两次print的矩阵天差地别！", "两次的图片仔细看能发现差别", "\n", "其他尝试：", "\n", "将上述第一行代码换成：", "\n", " ", "data", " = np.full((", "3", ",", "3", ",", "3", "),", "255", ",dtype='uint8')\n ", "data2", " = np.zeros((", "3", ",", "3", ",", "3", "),dtype='uint8')\n ", "data", " = np.concatenate((data,data2),axis = ", "1", ")\n", "\n", "结果如下：", "读取的值不准确", "\n", "将上述读取图片代码换成：", "\n", " ", "im", " = Image.", "open", "(", "\"picture1.jpg\"", ").convert(", "'RGB'", ")\n ", "for", " i in ", "range", " (", "0", ",", "3", "):\n     ", "for", " ", "j", " in ", "range", " (", "0", ",", "3", "):\n         ", "print", "(", "im", ".getpixel((i, ", "j", ")))\n", "\n", "同样不行", "\n", "将上述读取图片代码换成：", "\n", "im = cv2.cvt", "Color(", "np", ".", "array", "(", "im", ")", ",cv2.COLOR_RGB2BGR)\n", "\n", "同样不行，结果跟直接np.array()一样，说明可能问题就出在np.array()上", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第一个导入的是np&amp;#xff0c;使用要加上np&amp;#xff0c;比如要np.int32;&lt;br /&gt;第二个相当于from numpy import int32,double&amp;#xff0c;float16(...),所以可以直接使用int32&amp;#xff0c;float16等等&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么import numpy as np和from numpy import *在定义数组时会有差异呢", ["\n", "为什么import numpy as np和from numpy import *在定义数组时会有差异呢。", "import numpy as np 定义np.array时输入dtyp(dtype)不能自动补全。", "而from numpy import * 定义数组array(),就能自动补全", "有没有朋友指点一下"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;数组&amp;#xff0c;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/010571137236130.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["np.mgrid[-1:1 : 2j][:, np.newaxis]运算结果是啥", ["np.mgrid[-1:1 : 2j][:, np.newaxis]的运算结果是啥 用到了python的numpy库"]], "Tag": "算法设计"}
{"Answer": "就在第一幅图头导入numpy模块，没错的。\r\n还是行不通的原因应该是：之前使用MyTransformer时，会在对应目录下生成一个对应的缓存文件，下次调用的时候会直接调用该缓存文件，\r\n所以你即使你改过源码，还是没用的，删除掉机器学习实践目录下MyTransformer模块的缓存文件就ok了。", "Konwledge_Point": "应对NP完全问题", "Question": ["调用另一个ipynb中的函数，NameError: name 'np' is not defined", ["在MyTransformer.ipynb中定义了一个Class", "\n在另外一个ipynb中导入该文件，并调用该Class中定义的transform函数报错", "\n第二个图片的ipynb在上面导入了 numpy", "\n\n", "求大神帮忙看看什么问题"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I just found out that there is nothing like np.where() in gocv. \nAll I have to do is:\n1. get []byte using Mat.ToBytes()\n2. writing a for loop to check each pixel in []byte and changing it if meet the condition.\n3. get Mat from gocv.NewMatFromBytes()&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["在gocv中是否有类似python中的np.where（）的类似功能？", ["\n\n", "Is there any similar function in Gocv like np.where() in Python? I want to specify some specific pixel values to 0, and others to 255. As follows, in Python I can do:", "\n\n", "        img = cv2.imread(\"test.png\", cv2.IMREAD_GRAYSCALE)\n        img_ = np.where(img == 144 , img*0, np.where(img == 170 , img*0, np.where(img == 178 , img*0, np.where(img == 187 , img*0, 255))))\n", "\n\n", "the pixel values which are 187, 178, 170, 144 will be set to 0, and others to 255. How can I do this job in Golang with Gocv?", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;删除线表达的是函数在未来的版本的中会被弃用,鼠标悬停会有对应的提示,会提示你目前推荐的方式&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["np.matrix在Python中有取消线无法使用怎么办", ["np.matrix在Python中添加", "import numpy as np", "import xlrd的情况下依然显示有取消线无法使用怎么办"]], "Tag": "算法设计"}
{"Answer": "![图片说明](https://img-ask.csdn.net/upload/201908/05/1564983890_378193.png)\r\n-2147483648是32位系统里int类型的下界\r\nnp.nan是浮点数，而arange生成的array里是整数。\r\n应该是整型转成浮点型出问题了", "Konwledge_Point": "应对NP完全问题", "Question": ["python新手 np.nan赋值后显示具体数字", ["\n不知道怎么回事啊"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;升级sklearn和numpy 到新版本&amp;#xff0c;经测试版本分别为0.24.2 和1.21.2运行正常&amp;#xff0c;没有弃用提示信息。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["在一个py文件中导入一个算法库，然后运行np.array()就出现如下警告，怎么解决求解？（如果不导入算法库，只导入numpy就不会有警告）", ["from sklearn", ".neighbors", " import NearestNeighbors\nimport numpy as np\n\nX = np", ".array", "(", "[[-1, -1]", ", ", "[-2, -1]", ", ", "[-3, -2]", ", ", "[1, 1]", ", ", "[2, 1]", ", ", "[3, 2]", "])\n", "print", "(X)", "\n", "\n", "运行结果：", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:30: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  method='lar', copy_X=True, eps=np.finfo(np.float).eps,", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:167: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  method='lar', copy_X=True, eps=np.finfo(np.float).eps,", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:284: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  eps=np.finfo(np.float).eps, copy_Gram=True, verbose=0,", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:862: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1101: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1127: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  eps=np.finfo(np.float).eps, positive=False):", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1362: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1602: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1738: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  eps=np.finfo(np.float).eps, copy_X=True, positive=False):", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\decomposition\\online_lda.py:29: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "\n", "\n", "EPS", " = np.finfo(np.float).eps\n", "[[-1 -1]", "\n ", "[-2 -1]", "\n ", "[-3 -2]", "\n ", "[ 1  1]", "\n ", "[ 2  1]", "\n ", "[ 3  2]]", "\n", "\n", "Process finished with exit code 0"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;multiply能这样接受三个参数么&lt;br /&gt;你这样写是不是只是前两个矩阵做了对应元素的相乘的操作&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中np.dot与np.multiply 的使用问题", ["python中np.dot与np.multiply 的使用问题", "三个矩阵相乘，两个是单位矩阵，另一个不是单位矩阵，但为什么得到的结果还是个单位矩阵？", "我试了试使用np.dot与np.multiply得到的都是这个结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;要你的电脑里面有这个包呐&amp;#xff0c;numpy好像是拓展包&amp;#xff0c;要你自己下的来着&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么我输入import numpy as np会报错？说电脑中不存在numpy 这个模块？", []], "Tag": "算法设计"}
{"Answer": "用photoshop打开png看下你的图像有没有alpha通道，也就是有没有透明图层。", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy.array()打开图片时像素点表示问题", ["在应用numpy.array()打开图片", "\n代码如下：", "\n\n", "i = Image.open('images/numbers/0.1.png')\niar = np.array(i, dtype='int64')\nprint(iar)\n", "\n\n", "输出结果中大部分为", "\n[[[255 255 255 255]", "\n ......", "\n (即alpha数值有表示出来)", "\n 而另一张图片，可能就会输出", "\n[[[255 255 255]", "\n......", "\n(即alpha数值没有表示出来)", "\n想请教一下这是为什么呢，有没有什么办法可以把它们统一起来吗？"]], "Tag": "算法设计"}
{"Answer": "np.random.random((a,b))     （a,b）是形状   返回的是 a行 b列的array          每个元素的取值服从[0.0, 1.0)的均匀分布\r\n例如 \r\n\r\n\r\n```\r\nnp.random.random((3, 4))\r\narray([[ 0.08968149,  0.73049827,  0.90173847,  0.052132  ],\r\n             [ 0.89645737,  0.09354475,  0.85583081,  0.96655849],\r\n             [ 0.43413746,  0.12536754,  0.94566403,  0.07564477]])\r\n \r\n```\r\n\r\n\r\n\r\n\r\n[参考自](https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.random.html \"\")", "Konwledge_Point": "应对NP完全问题", "Question": ["python中的Random问题", ["np.random.random((layers[i-1]+1,layers[i]+1))其中layers是数组。求问这句话的语法是什么？没看到有", "\nrandom.random的这种函数形式哇？求解"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;import numpy as np\nn &amp;#61; int(&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;())\nx &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.linspace&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*np&lt;span class=\"hljs-selector-class\"&gt;.pi&lt;/span&gt;, n)\ny &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.sin&lt;/span&gt;(x)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(y)&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python 利用numpy求sin函数值", ["\n", "我的解答", "import numpy as np", "\n", "x = np.linspace(0, 2*np.pi, 10)", "\n", "对数组x中的每个元素进行正弦计算，返回一个同样大小的新数组", "\n", "y = np.sin(x)", "print(y", "不正确怎么改"]], "Tag": "算法设计"}
{"Answer": "题主你的报错原因是map函数的第二个参数应该是列表，而你传入的四列数据相当于是一个二维的dataframe，这样每列就相当于一个Series,而函数接受的参数应该是四个数字组成的列表，也就是一行数据，就是说你一次性传入所有的数据是不行的。必须一行一行的计算，每行数据计算得到一个距离，针对你的问题，我们可以使用pandas的apply函数每次传一行数据进入函数，具体可以将代码改成如下（题主你的sin cos sqrt函数都没有加np.这个我不知道是为什么，应该是要加的）：\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\n\r\ndef haversine(df):   # 经度1，纬度1，经度2，纬度2\r\n    \"\"\"函数作用：计算两个经纬度之间的距离\"\"\"\r\n    # 将十进制度数转化为弧度\r\n\t\t# df.tolist()作用是将传入的一行数据转化为列表\r\n    lon1, lat1, lon2, lat2 = map(np.radians, df.tolist())\r\n    # haversine公式\r\n    dlon = lon2 - lon1\r\n    dlat = lat2 - lat1\r\n    a = np.sin(dlat/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon/2)**2\r\n    c = 2 * a * np.sin(np.sqrt(a))\r\n    r = 6371  # 地球平均半径，单位为公里\r\n    return c * r * 1000\r\n\r\n\r\ntest_data = pd.read_excel(\"test.xlsx\")\r\n# 这里的apply函数作用是将dataframe中每行的四个值传入函数haversine，然后计算距离，这样每行数据能返回一个距离\r\ntest_data[\"距离（米）\"] = test_data[['经度', '纬度', 'Longitude', 'Latitude']].apply(haversine, axis=1)\r\nprint(test_data)", "Konwledge_Point": "应对NP完全问题", "Question": ["python pandas用函数算距离时报错", ["在网上copy来的一个算经纬度的方法，但在实际操作运行到  lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2]) 的时候到报错：”TypeError: cannot convert the series to <class 'float'》，显示series不能转换为float，请问下各位大佬这个问题怎么解决  需要怎么修改脚本。", "\n\n", "import numpy as np\nimport pandas as pd \n\ntest_data = pd.DataFrame(pd.read_excel(\"test.xlsx\"))\n\ndef haversine(lon1, lat1, lon2, lat2):   # 经度1，纬度1，经度2，纬度2 \n  \"\"\"函数作用：计算两个经纬度之间的距离\"\"\"\n  # 将十进制度数转化为弧度\n  lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n\n  # haversine公式\n  dlon = lon2 - lon1 \n  dlat = lat2 - lat1 \n  a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n  c = 2 * asin(sqrt(a)) \n  r = 6371 # 地球平均半径，单位为公里\n  return c * r * 1000\n\ntest_data[\"距离（米）\"] = test_data.eval('@haversine(经度,纬度,Longitude,Latitude)')\n\n\n\"\"\"\n表内容举例：\nname    经度  纬度  Longitude   Latitude\nA   113.545761  23.106667   113.09461   23.39367\nB   113.545761  23.106667   113.173833  23.336054\nC   113.545761  23.106667   113.1799    23.43946\nD   113.545761  23.106667   113.1975278 23.38591667\nE   113.545761  23.106667   113.1975278 23.38591667\nF   113.545761  23.106667   113.219664  23.100377\nG   113.545761  23.106667   113.219664  23.100377\nH   113.545761  23.106667   113.22253   23.18483\nI   113.545761  23.106667   113.22253   23.18483\n\n\"\"\"\n", "\n\n", "程序运行到"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np\n&amp;gt;&amp;gt;&amp;gt; x &amp;#61; np.array([1,2,3,4,5,6])\n&amp;gt;&amp;gt;&amp;gt; r &amp;#61; np.random.choice(np.arange(x.size), 3, replace&amp;#61;False) # 从x中随机无重复地抽取3个数\n&amp;gt;&amp;gt;&amp;gt; r # 这次选中的是0&amp;#xff0c;2&amp;#xff0c;4\narray([0, 2, 4])\n&amp;gt;&amp;gt;&amp;gt; x[r] &amp;#43;&amp;#61; 1 # 选中的数字加1\n&amp;gt;&amp;gt;&amp;gt; x\narray([2, 2, 4, 4, 6, 6])&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何让一个np数组中随机几个数字+1", ["比如我现在有[1,2,3,4,5,6]这个数组，", "\n\n", "如何将该数组中随机n个数字都+1，", "\n\n", "比如将原有数组变成[2,2,4,4,5,6],", "\n\n", "这里面就随机到了第0第2个数加一了。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如有帮助请给个采纳&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np\n&amp;gt;&amp;gt;&amp;gt; np.linspace(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;, num&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\narray([&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;.        , &lt;span class=\"hljs-number\"&gt;1.88888889&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2.77777778&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3.66666667&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4.55555556&lt;/span&gt;,\n       &lt;span class=\"hljs-number\"&gt;5.44444444&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6.33333333&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7.22222222&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8.11111111&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;.        ])\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["使用np.linspace函数在1-9区间内生成10个包含9的等间隔数，不显示间隔", ["使用np.linspace函数在1-9区间内生成10个包含9的等间隔数，不显示间隔"]], "Tag": "算法设计"}
{"Answer": "labels=np.empty((0,5))", "Konwledge_Point": "应对NP完全问题", "Question": ["python中numpy格式数组维度", ["##python中numpy格式数组维度问题", "\n\n", "labels = np.empty((0,4))\nxml_names = os.listdir(path)\nfor xml_name in xml_names:\n        image_path, label = parse_xml(os.path.join(path, xml_name))\n        print(label)\n        label = np.array(label)\n        print(label)\n        labels = np.append(labels, label, axis=0)\n", "\n\n", "label是这个格式：", "\n\n", "[[128 230 188 328   0]", "\n\n", "[297 199 366 299   0]]", "\n\n", "然后和labels   append的时候报错，提示维度不匹配，请问为什么"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/315595669136113.png\" /&gt;&lt;/p&gt;&lt;br /&gt;这个是取倒数第7个数到倒数第一个数&amp;#xff0c;所以输出这个&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["a=np.arange(12)  a[-7:-1]", ["a=np.arange(12)", "\n", "a[-7:-1]", "这个结果是多少"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;运行下就知道了&lt;br /&gt;输出结果是[7 5 3]&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n\n&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;np.arange(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;][::-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/992442646756110.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["a=np.arange(1,10)，print(a[2:8:2][::-1])输出结果是（）", ["a=np.arange(1,10)，print(a[2:8:2][::-1])输出结果是多少？[7，5，3]", "为啥呢？为啥能输出三个数？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://zhuanlan.zhihu.com/p/148743842\" id=\"textarea_1629540531111_1629540575159_0\" class=\"md_link_card\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n  &lt;span class=\"md_link_title\"&gt;Pandas-df.apply() - 知乎&lt;/span&gt;\n  &lt;span class=\"md_link_desc\" style=\"\"&gt;批量操作&amp;#xff1a;df.apply()关于可以在数据表上进行批量操作的函数&amp;#xff1a; &amp;#xff08;1&amp;#xff09;有些函数是元素级别的操作&amp;#xff0c;比如求平方 np.square()&amp;#xff0c;针对的是每个元素。有些函数则是对元素集合级别的操作&amp;#xff0c;这里元素集合指的是以列为单位&amp;#xff0c;或…&lt;/span&gt;\n  &lt;span class=\"md_flex_card\"&gt;\n  &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://static.zhihu.com/heifetz/favicon.ico\" /&gt;\n    &lt;span class=\"flex-1\"&gt;\n      &lt;span class=\"md_link_url\"&gt;https://zhuanlan.zhihu.com/p/148743842&lt;/span&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;&lt;/a&gt;&lt;br /&gt;df.apply参数规定只写函数名即可&amp;#xff0c;调用的函数参数写在后面&lt;br /&gt;有帮助望采纳&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么np.sum后没有加（）？", []], "Tag": "算法设计"}
{"Answer": "&lt;ol&gt;&lt;li&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  [7,5,3]&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  1&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  5s&lt;/span&gt;&lt;/li&gt;&lt;li&gt;[&amp;#39;toyota&amp;#39;, &amp;#39;subaru&amp;#39;, &amp;#39;bmw&amp;#39;, &amp;#39;audi&amp;#39;]&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;[&lt;span class=\"hljs-symbol\"&gt;&amp;#39;bmw&lt;/span&gt;&amp;#39;, &lt;span class=\"hljs-symbol\"&gt;&amp;#39;audi&lt;/span&gt;&amp;#39;, &lt;span class=\"hljs-symbol\"&gt;&amp;#39;toyota&lt;/span&gt;&amp;#39;, &lt;span class=\"hljs-symbol\"&gt;&amp;#39;subaru&lt;/span&gt;&amp;#39;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python函数问题，人工智能问题，请给出解答过程", ["1、a=np.arange(1,10)，print(a[2:8:2][::-1])输出结果是（）", "\n", "2、np.exp(x).round(5)的结果是2.71828，x的值是（）", "\n", "3、为了充分发挥GPU算力，需要尽可能多的将任务交给GPU执行。现在有一个任务数组T=[1,2,3,4,5]，数组元素表示在这1秒内新增的任务个数，且每秒都有新增任务，直到数结束。假设GPU最多一次执行N=3个任务，一次执行耗时1秒，在保证GPU尽量不空闲的情况下，一个GPU最少需要多长时间执行完成？", "\n", "4、在Python中，令cars=['bmw','audi','toyota','subaru']", "运行cars.sort(reverse=True)后，cars的值为（）；运行sorted(cars,reverse=True)后，cars的值为（）", "\n", "请给出解答过程！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你说的是大数因式分解&amp;#xff1f;大质数的判定是NP Hard问题。这个是现代密钥算法体系的基石。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["大数分解问题是NP问题吗？", ["现在对于大数分解问题是否是NP问题，非专业人员依据NP问题的定义回答是。资深人员在小心地寻找公式确定性的证明。请问这种证明己经有了吗？"]], "Tag": "算法设计"}
{"Answer": "numpy.ndarray 没有append这个方法\r\n试试这个命令\r\nprint(np.concatenate((a,b),axis = 0))", "Konwledge_Point": "应对NP完全问题", "Question": ["想把两个13维数组合并成一个26维数组，用np.append之后报错，用extend和append好像也不行，为什么？", ["Expected binary or unicode string, got tf.Tensor 'Relu_30:0' shape=(1, 13) dtype=float32", "\n\n", "我是在用tensorflow把两个网络各自生成的13维数组合并之后输入到另一个神经网络里面时遇到的问题，大家都是怎么解决的？", "\n\n", "Weights0 = tf.Variable(tf.random_normal([12, 13]))", "\nbiases0 = tf.Variable(tf.zeros([1, 13]) + 0.1)", "\nWx_plus_b0 = tf.matmul(xs0, Weights0) + biases0", "\nl0 = tf.nn.relu(Wx_plus_b0)", "\n\n", "Weights1 = tf.Variable(tf.random_normal([12, 13]))", "\nbiases1 = tf.Variable(tf.zeros([1, 13]) + 0.1)", "\nWx_plus_b1 = tf.matmul(xs1, Weights1) + biases1", "\nl1 = tf.nn.relu(Wx_plus_b1)", "\n\n", "L1 = np.append(l0,l1)", "\n\n", "隐层2", "\n\n", "Weights2 = tf.Variable(tf.random_normal([26, 10]))", "\nbiases2 = tf.Variable(tf.zeros([1, 10]) + 0.1)", "\nWx_plus_b2 = tf.matmul(L1, Weights2) + biases2", "\nl2 = tf.nn.relu(Wx_plus_b2)"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好,这里a是rehshape成了(2,3)的形式&amp;#xff0c;使用a[i]应该是不行的&amp;#xff0c;可以调试看看indix的结构是什么&amp;#xff0c;然后进行调整&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy的argwhere,索引的使用错误", ["刚学习玩numpy的argwhere的用法,根据字面意思返回的应当是符合条件的索引即", "\n", "a", " = np", ".arange", "(", "6", ")", ".reshape", "(", "2", ",", "3", ")\nindix = np", ".argwhere", "(a>", "3", ")\n\n#输出的应该是", "[1,1]", ",", "[1,2]", "\n", "\n", "问题是在已知索引的情况下如何根据索引来寻找到对应的元素", "\n", "import numpy as np\n\n", "a", " = np", ".arange", "(", "6", ")", ".reshape", "(", "2", ",", "3", ")\nindix = np", ".argwhere", "(a>", "3", ")\n", "for", " ", "i", " ", "in", " indix:\n    print(i)\n    print(", "a", "[i]", ")\n\n", "\n", "结果报错，正常情况下应当如何根据索引寻找元素？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;return最为常见&amp;#xff0c;十分简单&amp;#xff0c;其返回运行一次函数所得到的结果&amp;#xff0c;且在return语句之后python解释器会直接跳出函数&amp;#xff0c;函数剩下的其它所有语句或者循环都不再被运行。&lt;br /&gt;yield是返回一个生成器(generator)对象。python中的生成器&amp;#xff0c;可以使用next()来逐个获取yield返回的值。同时运行机制为在运行包含有生成器的函数的时候&amp;#xff0c;只要碰到yield就暂停&amp;#xff0c;这时候会保存当前运行的信息&amp;#xff0c;也就是之前所产生的变量等都不会改变。&lt;br /&gt;yileld和return的区别就是一个函数不在运行&amp;#xff0c;一个函数暂停运行&amp;#xff0c;用next()方法继续运行&amp;#xff0c;看自己的需求&lt;br /&gt;在上面的代码中&amp;#xff0c;换为return&amp;#xff0c;返回的是遍历完以后的整个运行结果&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["yield 实现什么功能？", ["请问一下，这里的yied实现什么功能呢？     两个yield np.array(imgs_list), np.array(labels_list)都返回到哪里的呢？", "可以不用yield么？", "\n", "# 定义数据生成器，返回批次数据\ndef data_generator():\n    imgs_list = []\n    labels_list = []\n    ", "for", " i ", "in", " index_list:\n        # 将数据处理成希望的类型\n        img = ", "np", ".", "array", "(imgs[i]).astype('float32')\n        ", "label", " = ", "np", ".", "array", "(", "labels", "[i]).astype('float32')\n        imgs_list.", "append", "(img) \n        labels_list.", "append", "(", "label", ")\n        ", "if", " len(imgs_list) == BATCHSIZE:\n            # 获得一个batchsize的数据，并返回\n            yield ", "np", ".", "array", "(imgs_list), ", "np", ".", "array", "(labels_list)\n            # 清空数据读取列表\n            imgs_list = []\n            labels_list = []\n\n    # 如果剩余数据的数目小于BATCHSIZE，\n    # 则剩余数据一起构成一个大小为len(imgs_list)的mini-", "batch", "\n    ", "if", " len(imgs_list) > ", "0", ":\n        yield ", "np", ".", "array", "(imgs_list), ", "np", ".", "array", "(labels_list)\n    ", "return", " data_generator\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;np.append(b81[i][&amp;#39;标题&amp;#39;])  这个np是什么&amp;#xff1f; 不会是numpy吧&amp;#xff1f; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["列表添加项时出错：TypeError: _append_dispatcher() missing 1 required positional argument: 'values'", ["代码：\nnb = ", "[", "'离开'", "]", "\nb81 = c寻找邮件({", "'发件人'", ":", "'老吴'", "})\n", "print", "(b81[", "0", "][", "'标题'", "])", "\n", "i", " = ", "0", "\n", "for", " ", "i", " ", "in", " range(len(b81)):\n    np", ".append", "(b81", "[i]", "[", "'标题'", "]", ")\n    a1", ".buttonbox", "(", "'我的邮箱'", ",np)\n\n", "\n", "报错：\nnp.", "append", "(b81[i][", "'标题'", "])\n  File ", "\"<__array_function__ internals>\"", ", ", "line", " ", "4", ", in ", "append", "\nTypeError: _append_dispatcher() missing ", "1", " required positional ", "argument", ": ", "'values'", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;有一种pandas的方法可以实现&amp;#xff08;你问的应该是rank&amp;#xff09;,需要先转换为dataframe&amp;#xff0c;再用rank解决&amp;#xff1a;&lt;br /&gt;arr&amp;#61;np.array(pd.DataFrame(array).rank(axis&amp;#61;0,method&amp;#61;&amp;#39;min&amp;#39;))&lt;br /&gt;这是从1-n的排序&amp;#xff0c;如果想从0开始&amp;#xff0c;后面直接减去一即可&lt;br /&gt;目前我还没有搜查到numpy有直接的方法&amp;#xff0c;需要再查一下&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["使用numpy的argsort函数对二维数组按行（列）排序，返回排序索引时出错", ["问题遇到的现象和发生背景", "\n", "版本：numpy    1.22.3    。使用numpy的argsort函数对二维数组按行（列）排序，返回排序索引时出错", "\n", "问题相关代码，请勿粘贴截图", "\n", ">>> array = ", "[[0, 1, 2, 3, 4, 5], \n         [444, 4, 8, 3, 1, 10], \n         [2, 5, 8, 999, 1, 4]]", "\n>>> np.argsort(array, axis=", "0", ")\narray(", "[[0, 0, 0, 0, 1, 2],\n       [2, 1, 1, 1, 2, 0],\n       [1, 2, 2, 2, 0, 1]]", ", dtype=int64)\n", "\n", "运行结果及报错内容", "\n", "\n", "没有报错，但是，第五、六列按列排序的索引有很明显的问题", "\n", "我的解答思路和尝试过的方法", "\n", "我的思路，以第六列为例：", "\n", "\n", "我尝试过转置之后一行一行地执行再拼接，但仍然有问题", "\n", "我想要达到的结果", "\n", "返回正确的排序索引"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;倒数第二行&amp;nbsp;im2=Image.fromarray(a2,np.astype(&amp;quot;uint8&amp;quot;))&lt;/p&gt;\n\n&lt;p&gt;fromarray后面指的是Mode参数，比如&amp;#39;rgb&amp;#39;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["module 'numpy' has no attribute 'astype'", ["源代码：", "\n\n", "\n", "from PIL import Image\nimport numpy as np\nvec_el=np.pi/2.2\nvec_az=np.pi/4\ndepth=10\nim=Image.open(\"D:/视频源/graphics/python/aniya.jpg\").convert(\"L\")\na=np.asarray(im).astype(\"float\")\ngrad=np.gradient(a)\ngrad_x,grad_y=grad\ngrad_x=grad_x*depth/100\ngrad_y=grad_y*depth/100\ndx=np.cos(vec_el)*np.cos(vec_az)\ndy=np.cos(vec_el)*np.sin(vec_az)\ndz=np.sin(vec_el)\nA=np.sqrt(grad_x**2+grad_y**2+1)\nuni_x=grad_x/A\nuni_y=grad_y/A\nuni_z=1/A\na2=255*(dx*uni_x+dy*uni_y+dz*uni_z)\na2=a2.clip(0,255)\nim2=Image.fromarray(a2,np.astype(\"uint8\"))\nim2.save(\"draw_aniya.jpg\")", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;delimiter 参数&lt;/p&gt;\n&lt;p&gt;一旦文件被定义并打开阅读&amp;#xff0c;genfromtxt将每个非空行拆分为一个字符串序列。刚刚跳过空行或注释行。delimiter关键字用于定义拆分应如何进行。&lt;/p&gt;\n&lt;p&gt;通常&amp;#xff0c;单个字符标记列之间的间隔。例如&amp;#xff0c;逗号分隔文件&amp;#xff08;CSV&amp;#xff09;使用逗号&amp;#xff08;,&amp;#xff09;或分号&amp;#xff08;;&amp;#xff09;作为分隔符&amp;#xff1a;&lt;br /&gt;Numpy 切片操作,将从第一行&amp;#xff08;在skip_header之后&amp;#xff09;读取名称.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/350469705136155.png\" width=\"600px\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中np.genfromtxt的使用小问题", ["\nsnapshots = [\n    np.genfromtxt(", "'data/velocity0.{}.csv'", ".format(i), ", "delimiter", "=", "','", ", ", "skip_header", "=1)[:, 0]\n    ", "for", " i ", "in", " range(20, 40)\n]\n\npts = np.genfromtxt(", "'data/velocity0.20.csv'", ", ", "delimiter", "=", "','", ", ", "skip_header", "=1)[:, -3:-1]\n", "\n", "这段代码中的[:, 0]与[:, -3:-1]代表什么意思呀"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;官方给的说法是&lt;br /&gt;np.ones是生成一个矩阵&amp;#xff0c;所有值初始化为1&amp;#xff0c;&lt;br /&gt;np.empty一般大家都说是生成一个空矩阵。但是要注意这里的空不是咱们生活中理解的什么都没有的空&amp;#xff0c;是不进行初始化&amp;#xff0c;原来这块内存是什么就是什么&amp;#xff0c;不进行任何处理&amp;#xff0c;理论上可以是任何值。&amp;#xff08;当然这种操作是不应该的&amp;#xff09;&lt;/p&gt;\n&lt;p&gt;比如我在np.zero后面调用他就全是0&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/316466474856125.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/847876474856120.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;但是我直接调用empty就是随机数值&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/803757474856166.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/264147474856111.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么我的np.empty输出和np.ones一样啊？", ["为什么我的np.empty输出和np.ones一样啊？按理说np.empty不应该不赋值吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;一般情况下reset()就是重新初始化环境&amp;#xff0c;除非你需要获取初始化时产生的某些参数&amp;#xff0c;那就要有返回值&amp;#xff0c;如果仅仅是初始化的话&amp;#xff0c;完全可以不设返回值&amp;#xff0c;你这4个随机数就更没必要了&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["强化学习，gym.reset（）重置环境为什么不是返回一组为0 的数据，而是返回一定范围的数组？", ["在学习强化学习，为什么强化学习的gym.reset() 返回的是一个不为零的数组，我理解的重置不就是归零吗？ 比如", "CartPole-v0 环境。为什么def reset()那儿要返回4个-0.05到0.05的随机数呢？", "def reset(", "        self,", "        *,", "        seed: Optional[int] = None,", "        return_info: bool = False,", "        options: Optional[dict] = None,", "    ):", "        super().reset(seed=seed)", "**        self.state = self.np_random.uniform(low=-0.05, high=0.05, size=(4,))", "**        self.steps_beyond_done = None", "        if not return_info:", "            return np.array(self.state, dtype=np.float32)", "        else:", "            return np.array(self.state, dtype=np.float32), {}", "\n", "\"\"\"\nClassic cart-pole system implemented by Rich Sutton et al.\nCopied from http://incompleteideas.net/sutton/book/code/pole.c\npermalink: https://perma.cc/C9ZM-652R\n\"\"\"", "\n", "import", " math\n", "from", " typing ", "import", " ", "Optional", ", ", "Union", "\n\n", "import", " numpy ", "as", " np\n\n", "import", " gym\n", "from", " gym ", "import", " logger, spaces\n", "from", " gym.error ", "import", " DependencyNotInstalled\n\n\n", "class", " ", "CartPoleEnv", "(gym.Env[np.ndarray, ", "Union", "[", "int", ", np.ndarray]]):\n    ", "\"\"\"\n    ### Description\n\n    This environment corresponds to the version of the cart-pole problem described by Barto, Sutton, and Anderson in\n    [\"Neuronlike Adaptive Elements That Can Solve Difficult Learning Control Problem\"](https://ieeexplore.ieee.org/document/6313077).\n    A pole is attached by an un-actuated joint to a cart, which moves along a frictionless track.\n    The pendulum is placed upright on the cart and the goal is to balance the pole by applying forces\n     in the left and right direction on the cart.\n\n    ### Action Space\n\n    The action is a `ndarray` with shape `(1,)` which can take values `{0, 1}` indicating the direction\n     of the fixed force the cart is pushed with.\n\n    | Num | Action                 |\n    |-----|------------------------|\n    | 0   | Push cart to the left  |\n    | 1   | Push cart to the right |\n\n    **Note**: The velocity that is reduced or increased by the applied force is not fixed and it depends on the angle\n     the pole is pointing. The center of gravity of the pole varies the amount of energy needed to move the cart underneath it\n\n    ### Observation Space\n\n    The observation is a `ndarray` with shape `(4,)` with the values corresponding to the following positions and velocities:\n\n    | Num | Observation           | Min                 | Max               |\n    |-----|-----------------------|---------------------|-------------------|\n    | 0   | Cart Position         | -4.8                | 4.8               |\n    | 1   | Cart Velocity         | -Inf                | Inf               |\n    | 2   | Pole Angle            | ~ -0.418 rad (-24°) | ~ 0.418 rad (24°) |\n    | 3   | Pole Angular Velocity | -Inf                | Inf               |\n\n    **Note:** While the ranges above denote the possible values for observation space of each element,\n        it is not reflective of the allowed values of the state space in an unterminated episode. Particularly:\n    -  The cart x-position (index 0) can be take values between `(-4.8, 4.8)`, but the episode terminates\n       if the cart leaves the `(-2.4, 2.4)` range.\n    -  The pole angle can be observed between  `(-.418, .418)` radians (or **±24°**), but the episode terminates\n       if the pole angle is not in the range `(-.2095, .2095)` (or **±12°**)\n\n    ### Rewards\n\n    Since the goal is to keep the pole upright for as long as possible, a reward of `+1` for every step taken,\n    including the termination step, is allotted. The threshold for rewards is 475 for v1.\n\n    ### Starting State\n\n    All observations are assigned a uniformly random value in `(-0.05, 0.05)`\n\n    ### Episode Termination\n\n    The episode terminates if any one of the following occurs:\n    1. Pole Angle is greater than ±12°\n    2. Cart Position is greater than ±2.4 (center of the cart reaches the edge of the display)\n    3. Episode length is greater than 500 (200 for v0)\n\n    ### Arguments\n\n    ```\n    gym.make('CartPole-v1')\n    ```\n\n    No additional arguments are currently supported.\n    \"\"\"", "\n\n    metadata = {", "\"render_modes\"", ": [", "\"human\"", ", ", "\"rgb_array\"", "], ", "\"render_fps\"", ": ", "50", "}\n\n    ", "def", " ", "__init__", "(", "self", "):\n        self.gravity = ", "9.8", "\n        self.masscart = ", "1.0", "\n        self.masspole = ", "0.1", "\n        self.total_mass = self.masspole + self.masscart\n        self.length = ", "0.5", "  ", "# actually half the pole's length", "\n        self.polemass_length = self.masspole * self.length\n        self.force_mag = ", "10.0", "\n        self.tau = ", "0.02", "  ", "# seconds between state updates", "\n        self.kinematics_integrator = ", "\"euler\"", "\n\n        ", "# Angle at which to fail the episode", "\n        self.theta_threshold_radians = ", "12", " * ", "2", " * math.pi / ", "360", "\n        self.x_threshold = ", "2.4", "\n\n        ", "# Angle limit set to 2 * theta_threshold_radians so failing observation", "\n        ", "# is still within bounds.", "\n        high = np.array(\n            [\n                self.x_threshold * ", "2", ",\n                np.finfo(np.float32).", "max", ",\n                self.theta_threshold_radians * ", "2", ",\n                np.finfo(np.float32).", "max", ",\n            ],\n            dtype=np.float32,\n        )\n\n        self.action_space = spaces.Discrete(", "2", ")\n        self.observation_space = spaces.Box(-high, high, dtype=np.float32)\n\n        self.screen = ", "None", "\n        self.clock = ", "None", "\n        self.isopen = ", "True", "\n        self.state = ", "None", "\n\n        self.steps_beyond_done = ", "None", "\n\n    ", "def", " ", "step", "(", "self, action", "):\n        err_msg = ", "f\"", "{action!r}", " (", "{", "type", "(action)}", ") invalid\"", "\n        ", "assert", " self.action_space.contains(action), err_msg\n        ", "assert", " self.state ", "is", " ", "not", " ", "None", ", ", "\"Call reset before using step method.\"", "\n        x, x_dot, theta, theta_dot = self.state\n        force = self.force_mag ", "if", " action == ", "1", " ", "else", " -self.force_mag\n        costheta = math.cos(theta)\n        sintheta = math.sin(theta)\n\n        ", "# For the interested reader:", "\n        ", "# https://coneural.org/florian/papers/05_cart_pole.pdf", "\n        temp = (\n            force + self.polemass_length * theta_dot**", "2", " * sintheta\n        ) / self.total_mass\n        thetaacc = (self.gravity * sintheta - costheta * temp) / (\n            self.length * (", "4.0", " / ", "3.0", " - self.masspole * costheta**", "2", " / self.total_mass)\n        )\n        xacc = temp - self.polemass_length * thetaacc * costheta / self.total_mass\n\n        ", "if", " self.kinematics_integrator == ", "\"euler\"", ":\n            x = x + self.tau * x_dot\n            x_dot = x_dot + self.tau * xacc\n            theta = theta + self.tau * theta_dot\n            theta_dot = theta_dot + self.tau * thetaacc\n        ", "else", ":  ", "# semi-implicit euler", "\n            x_dot = x_dot + self.tau * xacc\n            x = x + self.tau * x_dot\n            theta_dot = theta_dot + self.tau * thetaacc\n            theta = theta + self.tau * theta_dot\n\n        self.state = (x, x_dot, theta, theta_dot)\n\n        done = ", "bool", "(\n            x < -self.x_threshold\n            ", "or", " x > self.x_threshold\n            ", "or", " theta < -self.theta_threshold_radians\n            ", "or", " theta > self.theta_threshold_radians\n        )\n\n        ", "if", " ", "not", " done:\n            reward = ", "1.0", "\n        ", "elif", " self.steps_beyond_done ", "is", " ", "None", ":\n            ", "# Pole just fell!", "\n            self.steps_beyond_done = ", "0", "\n            reward = ", "1.0", "\n        ", "else", ":\n            ", "if", " self.steps_beyond_done == ", "0", ":\n                logger.warn(\n                    ", "\"You are calling 'step()' even though this \"", "\n                    ", "\"environment has already returned done = True. You \"", "\n                    ", "\"should always call 'reset()' once you receive 'done = \"", "\n                    ", "\"True' -- any further steps are undefined behavior.\"", "\n                )\n            self.steps_beyond_done += ", "1", "\n            reward = ", "0.0", "\n\n        ", "return", " np.array(self.state, dtype=np.float32), reward, done, {}\n\n    ", "def", " ", "reset", "(", "\n        self,\n        *,\n        seed: ", "Optional", "[", "int", "] = ", "None", ",\n        return_info: ", "bool", " = ", "False", ",\n        options: ", "Optional", "[", "dict", "] = ", "None", ",\n    ", "):\n        ", "super", "().reset(seed=seed)\n        self.state = self.np_random.uniform(low=-", "0.05", ", high=", "0.05", ", size=(", "4", ",))\n        self.steps_beyond_done = ", "None", "\n        ", "if", " ", "not", " return_info:\n            ", "return", " np.array(self.state, dtype=np.float32)\n        ", "else", ":\n            ", "return", " np.array(self.state, dtype=np.float32), {}\n\n    ", "def", " ", "render", "(", "self, mode=", "\"human\"", "):\n        ", "try", ":\n            ", "import", " pygame\n            ", "from", " pygame ", "import", " gfxdraw\n        ", "except", " ImportError:\n            ", "raise", " DependencyNotInstalled(\n                ", "\"pygame is not installed, run `pip install gym[classic_control]`\"", "\n            )\n\n        screen_width = ", "600", "\n        screen_height = ", "400", "\n\n        world_width = self.x_threshold * ", "2", "\n        scale = screen_width / world_width\n        polewidth = ", "10.0", "\n        polelen = scale * (", "2", " * self.length)\n        cartwidth = ", "50.0", "\n        cartheight = ", "30.0", "\n\n        ", "if", " self.state ", "is", " ", "None", ":\n            ", "return", " ", "None", "\n\n        x = self.state\n\n        ", "if", " self.screen ", "is", " ", "None", ":\n            pygame.init()\n            pygame.display.init()\n            self.screen = pygame.display.set_mode((screen_width, screen_height))\n        ", "if", " self.clock ", "is", " ", "None", ":\n            self.clock = pygame.time.Clock()\n\n        self.surf = pygame.Surface((screen_width, screen_height))\n        self.surf.fill((", "255", ", ", "255", ", ", "255", "))\n\n        l, r, t, b = -cartwidth / ", "2", ", cartwidth / ", "2", ", cartheight / ", "2", ", -cartheight / ", "2", "\n        axleoffset = cartheight / ", "4.0", "\n        cartx = x[", "0", "] * scale + screen_width / ", "2.0", "  ", "# MIDDLE OF CART", "\n        carty = ", "100", "  ", "# TOP OF CART", "\n        cart_coords = [(l, b), (l, t), (r, t), (r, b)]\n        cart_coords = [(c[", "0", "] + cartx, c[", "1", "] + carty) ", "for", " c ", "in", " cart_coords]\n        gfxdraw.aapolygon(self.surf, cart_coords, (", "0", ", ", "0", ", ", "0", "))\n        gfxdraw.filled_polygon(self.surf, cart_coords, (", "0", ", ", "0", ", ", "0", "))\n\n        l, r, t, b = (\n            -polewidth / ", "2", ",\n            polewidth / ", "2", ",\n            polelen - polewidth / ", "2", ",\n            -polewidth / ", "2", ",\n        )\n\n        pole_coords = []\n        ", "for", " coord ", "in", " [(l, b), (l, t), (r, t), (r, b)]:\n            coord = pygame.math.Vector2(coord).rotate_rad(-x[", "2", "])\n            coord = (coord[", "0", "] + cartx, coord[", "1", "] + carty + axleoffset)\n            pole_coords.append(coord)\n        gfxdraw.aapolygon(self.surf, pole_coords, (", "202", ", ", "152", ", ", "101", "))\n        gfxdraw.filled_polygon(self.surf, pole_coords, (", "202", ", ", "152", ", ", "101", "))\n\n        gfxdraw.aacircle(\n            self.surf,\n            ", "int", "(cartx),\n            ", "int", "(carty + axleoffset),\n            ", "int", "(polewidth / ", "2", "),\n            (", "129", ", ", "132", ", ", "203", "),\n        )\n        gfxdraw.filled_circle(\n            self.surf,\n            ", "int", "(cartx),\n            ", "int", "(carty + axleoffset),\n            ", "int", "(polewidth / ", "2", "),\n            (", "129", ", ", "132", ", ", "203", "),\n        )\n\n        gfxdraw.hline(self.surf, ", "0", ", screen_width, carty, (", "0", ", ", "0", ", ", "0", "))\n\n        self.surf = pygame.transform.flip(self.surf, ", "False", ", ", "True", ")\n        self.screen.blit(self.surf, (", "0", ", ", "0", "))\n        ", "if", " mode == ", "\"human\"", ":\n            pygame.event.pump()\n            self.clock.tick(self.metadata[", "\"render_fps\"", "])\n            pygame.display.flip()\n\n        ", "if", " mode == ", "\"rgb_array\"", ":\n            ", "return", " np.transpose(\n                np.array(pygame.surfarray.pixels3d(self.screen)), axes=(", "1", ", ", "0", ", ", "2", ")\n            )\n        ", "else", ":\n            ", "return", " self.isopen\n\n    ", "def", " ", "close", "(", "self", "):\n        ", "if", " self.screen ", "is", " ", "not", " ", "None", ":\n            ", "import", " pygame\n\n            pygame.display.quit()\n            pygame.quit()\n            self.isopen = ", "False", "\n\n\n"]], "Tag": "算法设计"}
{"Answer": "![图片说明](https://img-ask.csdn.net/upload/201807/30/1532881307_117357.gif)", "Konwledge_Point": "应对NP完全问题", "Question": ["用random.randint()方法定义一个整数型随机二维矩阵，返回布尔值。", ["用np.random.randint()方法定义一个整数型随机二维矩阵，并判断其中有没有一整列数为0，返回布尔值,写成一个函数，求大神指点。", "\n用python写，谢谢。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可能是内存速度瓶颈&amp;#xff0c;也可能是其他因素导致的。在多核并行计算中&amp;#xff0c;除了CPU核心数和内存大小外&amp;#xff0c;还有很多因素会影响计算速度&amp;#xff0c;比如硬盘速度、缓存大小、算法复杂度等等。因此&amp;#xff0c;要想准确分析速度瓶颈&amp;#xff0c;需要对整个系统进行综合评估&amp;#xff0c;包括硬件和软件方面。&lt;/p&gt;\n&lt;p&gt;另外&amp;#xff0c;从1核到10核速度增加不是成倍增加&amp;#xff0c;这也是正常现象。多核并行计算的速度增加并不是线性的&amp;#xff0c;随着核心数的增加&amp;#xff0c;计算效率会逐渐降低&amp;#xff0c;因为多核并行计算需要更多的协调和同步&amp;#xff0c;而这些操作也需要消耗一定的时间和资源。&lt;/p&gt;\n&lt;p&gt;总之&amp;#xff0c;要想提高多核并行计算的速度&amp;#xff0c;需要从多个方面入手&amp;#xff0c;包括优化算法、提高硬件性能、合理调整系统参数等等。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python多进程与np数组与talib计算金融指标问题", ["cpu24核心笔记本电脑2个内存条16g 3200m x2，用1核运行速度是50+每秒it。用10个应该是500+。但是只有170+，我尝试从1核到10核测试，发现到3核后就不是成倍增加了，后面增加核心速度变快的很少。是不是内存速度瓶颈。", "\n", " with Pool(", "processes", "=workers) as pool:  #\n            # 使用并行批量获得<class ", "'list'", ">\n            results = pool.imap_unordered(\n                # 先测试单个核心一秒多少个，用于设置chunksize参数\n                partial(calculate_by_one_loop, ", "duo_lock", "=duo_lock), para_list, ", "chunksize", "=50)\n            # 显示进度条\n            ", "for", " i, result ", "in", " tqdm(enumerate(results),\n                                  ", "total", "=total, ", "desc", "=", "'总任务进度'", ", ", "mininterval", "=1, ", "maxinterval", "=1):\n                df_list.append(result)\n\n", "\n", "其中calculate_by_one_loop是目标函数，里面就执行np数组的计算", "\n", "x = talib.SMA(close, timeperiod=", "10", ")\n\n", "@jit(", "'float64[:,:](float64[:], float64[:], float64[:], float64[:])'", ")", "\n", "def", " ", "numpy_chaoji_qushi", "(", "atr, close, high, low", "):\n    ", "\"\"\"\n    超级趋势计算\n\n    :param atr: 真实波动幅度\n    :param close: 收盘\n    :param high: 最高\n    :param low: 最低\n    :return: 超级趋势\n    \"\"\"", "\n\n    src = np.full_like(close, np.nan, dtype=", "'float64'", ")  ", "# 生成空白的数组，结构和close一样", "\n    up = np.full_like(close, np.nan, dtype=", "'float64'", ")  ", "# 生成空白的数组，结构和close一样", "\n\n    dn = np.full_like(close, np.nan, dtype=", "'float64'", ")  ", "# 生成空白的数组，结构和close一样", "\n\n    ", "for", " i ", "in", " ", "range", "(close.shape[", "0", "]):\n        ", "# 价格源hlc3", "\n        src[i] = (close[i] + high[i] + low[i]) / ", "3", "\n        ", "# 计算超级趋势指标的上涨趋势线", "\n        up[i] = src[i] - atr[i]\n        ", "# 过去的收盘价 大于 up[1]", "\n        ", "if", " close[i - ", "1", "] > up[i - ", "1", "]:\n            ", "# up就等于 up 与up1 中最大的", "\n            up[i] = ", "max", "(up[i], up[i - ", "1", "])\n        ", "else", ":  ", "# 不是就返回up自己", "\n            up[i] = up[i]\n        ", "# 计算超级趋势指标的下跌趋势线", "\n        dn[i] = src[i] + atr[i]\n        ", "# 过去的收盘价 大于 up[1]", "\n        ", "if", " close[i - ", "1", "] < dn[i - ", "1", "]:\n            ", "# up就等于 up 与up1 中最大的", "\n            dn[i] = ", "min", "(dn[i], dn[i - ", "1", "])\n        ", "else", ":  ", "# 不是就返回up自己", "\n            dn[i] = dn[i]\n\n    ", "return", " np.vstack((up, dn))\n", "\n", "很多这种使用talib的代码，基本用5列数组会生成几十上百列。再循环判断逻辑。我测试过单次计算50多ms", "之前我是使用pandas的df", "例如：df['x'] = talib.SMA(df['close'], timeperiod=10)", "后面改成np数组，没使用一点df。速度提升了一点点。我重新写了一个只计算数学问题的程序，速度是随着进程数成倍增加的。我20核全开速度就比1核快将近20倍。所以我怀疑内存速度，但是我不知道怎么优化，已经从df数据改成np数组了。每计算一个金融指标（均线这些）就有一个单独的变量存起来。我看别人用服务器cpu和主板和内存，开几十上百个线程，速度飞快", "帮我优化一下"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;反向传播部分计算公式是对的&lt;br /&gt;&lt;a href=\"https://blog.nowcoder.net/n/c4635a8beeb84e7e91986b8c0da7a313?from&amp;#61;nowcoder_improve\" id=\"textarea_1647475497856_1647475687345_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;吴恩达深度学习第二次作业_牛客博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;带有一个隐藏层的平面数据分类 解释一下&amp;#xff0c;就是一个二维平面有两种不同的花色&amp;#xff0c;我们通过花色将这个平面进行划分 预备知识 我们先来看一下我们需要的包 import numpy as npimport ma&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.nowcoder.net/n/c4635a8beeb84e7e91986b8c0da7a313?from&amp;#61;nowcoder_improve&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python BP神经网络两分类 反向传播代码问题", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "import pandas as pd", "import numpy as np", "import datetime", "import matplotlib.pyplot as plt", "from pandas.plotting import radviz", "'''", "    构建一个具有1个隐藏层的神经网络，隐层的大小为10", "    输入层为4个特征，输出层为3个分类", "    (1,0,0)为第一类，(0,1,0)为第二类，(0,0,1)为第三类", "'''", "\n", "1.初始化参数", "\n", "def initialize_parameters(n_x, n_h, n_y):", "    np.random.seed(2)", "\n", "# 权重和偏置矩阵", "\nw1 = np.", "random", ".randn(n_h, n_x) * ", "0.01", "\nb1 = np.zeros(shape=(n_h, ", "1", "))\nw2 = np.", "random", ".randn(n_y, n_h) * ", "0.01", "\nb2 = np.zeros(shape=(n_y, ", "1", "))\n\n", "# 通过字典存储参数", "\nparameters = {", "'w1'", ": w1, ", "'b1'", ": b1, ", "'w2'", ": w2, ", "'b2'", ": b2}\n\n", "return", " parameters\n", "\n", "2.前向传播", "\n", "def forward_propagation(X, parameters):", "    w1 = parameters['w1']", "    b1 = parameters['b1']", "    w2 = parameters['w2']", "    b2 = parameters['b2']", "\n", "# 通过前向传播来计算a2", "\nz1 = np.dot(w1, X) + b1     ", "# 这个地方需注意矩阵加法：虽然(w1*X)和b1的维度不同，但可以相加", "\na1 = np.tanh(z1)            ", "# 使用tanh作为第一层的激活函数", "\nz2 = np.dot(w2, a1) + b2\na2 = ", "1", " / (", "1", " + np.", "exp", "(-z2))  ", "# 使用sigmoid作为第二层的激活函数", "\n\n", "# 通过字典存储参数", "\ncache = {", "'z1'", ": z1, ", "'a1'", ": a1, ", "'z2'", ": z2, ", "'a2'", ": a2}\n\n", "return", " a2, cache\n", "\n", "3.计算代价函数", "\n", "def compute_cost(a2, Y):", "    m = Y.shape[1]      # Y的列数即为总的样本数", "\n", "# 采用交叉熵（cross-entropy）作为代价函数\nlogprobs = ", "np", ".multiply(", "np", ".", "log", "(a2), Y) + ", "np", ".multiply(", "np", ".", "log", "(", "1", " - a2),(", "1", " - Y))\ncost = - ", "np", ".", "sum", "(logprobs) / m\n\n", "return", " cost\n", "\n", "4.反向传播（计算代价函数的导数）", "\n", "def backward_propagation(parameters, cache, X, Y):", "    m = Y.shape[1]", "\n", "w2 = ", "parameters", "[", "'w2'", "]\n\na1 ", "= cache[", "'a1'", "]", "\na2 ", "= cache[", "'a2'", "]", "\n\n# 反向传播，计算dw1、db1、dw2、db2\ndz2 ", "= a2 - Y", "\ndw2 ", "= (1", " / m) * np.dot(dz2, a1.T)\ndb2 = (", "1", " / ", "m) * np.sum(dz2, axis=1, keepdims=True)", "\ndz1 ", "= np.multiply(np.dot(w2.T, dz2), 1 - np.power(a1, 2))", "\ndw1 ", "= (1", " / m) * np.dot(dz1, X.T)\ndb1 = (", "1", " / ", "m) * np.sum(dz1, axis=1, keepdims=True)", "\n\ngrads ", "= {", "'dw1'", ": dw1,", " ", "'db1'", ": db1,", " ", "'dw2'", ": dw2,", " ", "'db2'", ": db2}", "\n\nreturn ", "grads", "\n", "\n", "5.更新参数", "\n", "def update_parameters(parameters, grads, learning_rate=0.4):", "    w1 = parameters['w1']", "    b1 = parameters['b1']", "    w2 = parameters['w2']", "    b2 = parameters['b2']", "\n", "dw1 = grads[", "'dw1'", "]\ndb1 = grads[", "'db1'", "]\ndw2 = grads[", "'dw2'", "]\ndb2 = grads[", "'db2'", "]\n\n# 更新参数\nw1 = w1 - dw1 * learning_rate\nb1 = b1 - db1 * learning_rate\nw2 = w2 - dw2 * learning_rate\nb2 = b2 - db2 * learning_rate\n\nparameters = {", "'w1'", ": w1, ", "'b1'", ": b1, ", "'w2'", ": w2, ", "'b2'", ": b2}\n\nreturn parameters\n", "\n", "建立神经网络", "\n", "def nn_model(X, Y, n_h, n_input, n_output, num_iterations=10000, print_cost=False):", "    np.random.seed(3)", "\n", "n_x = n_input           ", "# 输入层节点数", "\nn_y = n_output          ", "# 输出层节点数", "\n\n", "# 1.初始化参数", "\n", "parameters", " = initialize_parameters(n_x, n_h, n_y)\n\n", "# 梯度下降循环", "\n", "for", " i ", "in", " range(", "0", ", num_iterations):\n    ", "# 2.前向传播", "\n    a2, cache = forward_propagation(X, ", "parameters", ")\n    ", "# 3.计算代价函数", "\n    cost = compute_cost(a2, Y)\n    ", "# 4.反向传播", "\n    grads = backward_propagation(", "parameters", ", cache, X, Y)\n    ", "# 5.更新参数", "\n    ", "parameters", " = update_parameters(", "parameters", ", grads)\n\n    ", "# 每1000次迭代，输出一次代价函数", "\n    ", "if", " print_cost and i % ", "1000", " == ", "0", ":\n        ", "print", "('迭代第%i次，代价函数为：%f' % (i, cost))\n\n", "return", " ", "parameters", "\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "想问一下各位这个代码的反向传播部分里面的计算公式是对的嘛，尤其是dw1，dw2部分，现在需要学习率很高才能快速收敛", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用ChatGPT &lt;/p&gt;\n&lt;p&gt;在 Python 中&amp;#xff0c;如果你想进行对应位置相乘&amp;#xff0c;可以使用 Numpy 提供的 multiply 函数。例如&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;\nimport numpy as np\n\na &amp;#61; np.array(&lt;span class=\"hljs-string\"&gt;[[1, 2], [3, 4]]&lt;/span&gt;)\nb &amp;#61; np.array(&lt;span class=\"hljs-string\"&gt;[[5, 6], [7, 8]]&lt;/span&gt;)\n\n# 对应位置相乘\nc &amp;#61; np.multiply(a, b)\n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(c)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这段代码将输出一个2x2的矩阵&amp;#xff0c;每个元素都是对应位置相乘的结果。&lt;/p&gt;\n&lt;p&gt;至于将数组转化为一维的方法&amp;#xff0c;你可以使用 Numpy 的 flatten 方法&amp;#xff0c;例如&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;\n\nimport numpy as np\n\na &amp;#61; np.array(&lt;span class=\"hljs-string\"&gt;[[1, 2], [3, 4]]&lt;/span&gt;)\n\n# 将数组展平为一维\nb &amp;#61; a.flatten()\n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(b)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这段代码将输出一个包含所有元素的一维数组。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["np.mat()生成的矩阵问题", ["请问生成的矩阵没有对应位置相乘的方法吗？只能转化为ndarray才行吗？有没有类似matlab的", "a(:)直接输出a所有元素的办法呢？（除了np.reshape(a,-1)这种有点长的）"]], "Tag": "算法设计"}
{"Answer": "原来是我安装的nagios-plugins版本是2.2.1，而yum安装的OpenSSL的版本只有1.0.1e，而1.0.1e是一个比较落后的版本，一些新功能函数没包含。\r\n所以我升级了我的OpenSSL到1.1.1b之后就正常安装了。", "Konwledge_Point": "应对NP完全问题", "Question": ["nagios在make过程中报错", ["libnpcommon.a(sslutils.o): In function `np_net_ssl_init_with_hostname_version_and_cert':\n/root/nagios-plugins-2.2.1/plugins/sslutils.c:125: undefined reference to `SSLv23_client_method'\n/root/nagios-plugins-2.2.1/plugins/sslutils.c:129: undefined reference to `SSL_library_init'\n/root/nagios-plugins-2.2.1/plugins/sslutils.c:130: undefined reference to `SSL_load_error_strings'\n/root/nagios-plugins-2.2.1/plugins/sslutils.c:131: undefined reference to `OPENSSL_add_all_algorithms_conf'\n/root/nagios-plugins-2.2.1/plugins/sslutils.c:68: undefined reference to `SSLv3_client_method'\n/root/nagios-plugins-2.2.1/plugins/sslutils.c:60: undefined reference to `SSLv2_client_method'\ncollect2: ld returned 1 exit status\n", "\n\n", "已经执行过yum -y gd gd-devel *openssl*", "\n\n", "但重新编译任然报上述错误。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-html\"&gt;np.poly1d方法生成的多项式本身带有求导的方法deriv\n\nn &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.poly1d&lt;/span&gt;(&lt;span class=\"hljs-selector-attr\"&gt;[2,3,5,7]&lt;/span&gt;) \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n.deriv()&lt;/span&gt;&lt;/span&gt;)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n.deriv()&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的知识点：关于求得拟合曲线函数的斜率的问题", ["最近在学Python，现在遇到一个问题。由一组数据绘出一条曲线，再通过numpy的poly1d函数拟合出曲线的多元式函数，现在想对函数求导得到各个点的斜率，但sympy的diff函数好像无法作用于numpy类型的函数，有什么方法可以将numpy类型函数转化成sympy函数。或者有其他求得曲线上各点斜率的方法。因为数据有波动，根据相邻两点dy/dx来求斜率的方法不太行，希望寻找到更佳方法"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;打印row[&amp;#39;open&amp;#39;], row[&amp;#39;high&amp;#39;] 看看&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["arange 遍历数据报错", ["def get_history_data(self):", "    bar_path = 'e:\\600036.csv'", "    history_data = pd.read_csv(bar_path)", "    for index, row in history_data.iterrows():", "        step = 0.01", "        arr = np.arange(row['open'], row['high'], step)", "        arr = np.append(arr, row['high'])", "        arr = np.append(arr, np.arange(row['open'] - step, row['low'], -step))", "        arr = np.append(arr, row['close'])", "        dt = parser.parse(row['datetime'])", "        i = 0", "        tick = []", "        for item in arr:", "            tick.append(((dt + timedelta(seconds=1 * i)) , item))", "            i += 1", "\n", "arr = np", ".arange", "(row", "[", "'open'", "]", ", row", "[", "'high'", "]", ", step)\n", "\n", "ValueError: arange: cannot compute length"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;This is the new best way to &lt;a href=\"https://github.com/felixrieseberg/npm-windows-upgrade\" rel=\"noreferrer\"&gt;upgrade &lt;strong&gt;npm&lt;/strong&gt; on Windows&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Run PowerShell as Administrator&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Set-ExecutionPolicy Unrestricted -Scope CurrentUser -Force\nnpm install -g npm-windows-upgrade\nnpm-windows-upgrade\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note: Do not run &lt;code&gt;npm i -g npm&lt;/code&gt;. Instead use &lt;code&gt;npm-windows-upgrade&lt;/code&gt; to update npm going forward. Also if you run the NodeJS installer, it will replace the node version.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Upgrades npm in-place, where node installed it.&lt;/li&gt;\n&lt;li&gt;Easy updating, update to the latest by running &lt;code&gt;npm-windows-upgrade -p -v latest&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Does not modify the default path.&lt;/li&gt;\n&lt;li&gt;Does not change the default global package location.&lt;/li&gt;\n&lt;li&gt;Allows easy upgrades and downgrades.&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/npm/npm/wiki/Troubleshooting#upgrading-on-windows\" rel=\"noreferrer\"&gt;Officially recommended by the NPM team&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;A list of versions matched between NPM and NODE (&lt;a href=\"https://nodejs.org/en/download/releases/\" rel=\"noreferrer\"&gt;https://nodejs.org/en/download/releases/&lt;/a&gt;) - but you will need to download NODE INSTALLER and run that to update node (&lt;a href=\"https://nodejs.org/en/\" rel=\"noreferrer\"&gt;https://nodejs.org/en/&lt;/a&gt;) &lt;/li&gt;\n&lt;/ul&gt;\n    &lt;/div&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何在 Windows 上更新 npm？", ["\n\n", "I tried ", "this", ":", "\n\n", "sudo npm cache clean -f\nsudo npm install -g n\nsudo n stable\n", "\n\n", "...but it didn't work.", "\n\n", "How do I do this on Windows?", "\n    ", "\n\n", "转载于:https://stackoverflow.com/questions/18412129/how-can-i-update-npm-on-windows"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;A &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; [&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;]\nB &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; [&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; for &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; in A if &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;!&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;max&lt;/span&gt;(A) &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;!&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;min&lt;/span&gt;(A)]\nprint(B)\n#或者&amp;#xff1a;\nC &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; [&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; for &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; in A if &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; not in [&lt;span class=\"hljs-keyword\"&gt;max&lt;/span&gt;(A)&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;min&lt;/span&gt;(A)]]\nprint(C)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何删除列表中的最大值和最小值", ["想要删除D列表中的最大值和最小值  尝试了np.remove和np.delete(D,argmax())都报错了"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;元组的索引越界&amp;#xff0c;打印一下len(dataset)&amp;#xff0c;n取值已经超过了a,b元组元素个数。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python运行层次聚类Agnes算法报错", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "#描述: 基于组平均的AGNES算法，支持多维数组，距离用欧式距离", "\n\n\n", "import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n", "from", " scipy.cluster.hierarchy ", "import", " dendrogram,linkage\n", "from", " scipy.spatial.distance ", "import", " squareform\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " pylab ", "as", " pl\n\n\n", "#从excel中读取数据并转换为矩阵", "\ndatA=pd.read_excel(", "r'C:\\Users\\49175\\Desktop\\jzgb.xlsx'", ")\ndata=np.array(datA,dtype=np.int64)\n\n\n", "#数据处理 dataset是样本的列表", "\na = np.array_split(datA,", "78", ",axis=", "0", ")\ndataset = [(a[i], a[i+", "1", "]) ", "for", " i ", "in", " ", "range", "(", "1", ", ", "len", "(a)-", "1", ", ", "44", ")]\n\n\n", "#计算欧几里得距离,a,b分别为两个元组", "\n", "def", " ", "dist", "(", "a, b", "):\n    t = ", "0", "\n    n=", "44", "\n    ", "for", " i ", "in", " ", "range", "(n):\n        t = t + np.power(a[i]-b[i], ", "2", ")\n    ", "return", " np.sqrt(t)\n\n", "#dist_min", "\n", "def", " ", "dist_min", "(", "Ci, Cj", "):\n    ", "return", " ", "min", "(dist(i, j) ", "for", " i ", "in", " Ci ", "for", " j ", "in", " Cj)\n", "#dist_max", "\n", "def", " ", "dist_max", "(", "Ci, Cj", "):\n    ", "return", " ", "max", "(dist(i, j) ", "for", " i ", "in", " Ci ", "for", " j ", "in", " Cj)\n", "#dist_avg", "\n", "def", " ", "dist_avg", "(", "Ci, Cj", "):\n    ", "return", " ", "sum", "(dist(i, j) ", "for", " i ", "in", " Ci ", "for", " j ", "in", " Cj)/(", "len", "(Ci)*", "len", "(Cj))\n\n", "#找到距离最小的下标", "\n", "def", " ", "find_Min", "(", "M", "):\n    ", "min", " = ", "1000", "\n    x = ", "0", "; y = ", "0", "\n    ", "for", " i ", "in", " ", "range", "(", "len", "(M)):\n        ", "for", " j ", "in", " ", "range", "(", "len", "(M[i])):\n            ", "if", " i != j ", "and", " M[i][j] < ", "min", ":\n                ", "min", " = M[i][j];x = i; y = j\n    ", "return", " (x, y, ", "min", ")\n\n", "#算法模型", "\n", "def", " ", "AGNES", "(", "dataset, dist, k", "):\n    ", "#初始化C和M", "\n    C = [];M = []\n    ", "for", " i ", "in", " dataset:\n        Ci = []\n        Ci.append(i)\n        C.append(Ci)\n    ", "for", " i ", "in", " C:\n        Mi = []\n        ", "for", " j ", "in", " C:\n            Mi.append(dist(i, j))\n        M.append(Mi)\n    q = ", "len", "(dataset)\n    ", "#合并更新", "\n    ", "while", " q > k:\n        x, y, ", "min", " = find_Min(M)\n        C[x].extend(C[y])\n        C.remove(C[y])\n        M = []\n        ", "for", " i ", "in", " C:\n            Mi = []\n            ", "for", " j ", "in", " C:\n                Mi.append(dist(i, j))\n            M.append(Mi)\n        q -= ", "1", "\n    ", "return", " C\n", "#画图", "\n", "def", " ", "draw", "(", "C", "):\n    colValue = [", "'r'", ", ", "'y'", ", ", "'g'", ", ", "'b'", ", ", "'c'", ", ", "'k'", ", ", "'m'", "]\n    ", "for", " i ", "in", " ", "range", "(", "len", "(C)):\n        coo_X = []    ", "#x坐标列表", "\n        coo_Y = []    ", "#y坐标列表", "\n        ", "for", " j ", "in", " ", "range", "(", "len", "(C[i])):\n            coo_X.append(C[i][j][", "0", "])\n            coo_Y.append(C[i][j][", "1", "])\n        pl.scatter(coo_X, coo_Y, marker=", "'x'", ", color=colValue[i%", "len", "(colValue)], label=i)\n\n    pl.legend(loc=", "'upper right'", ")\n    pl.show()\n\nC = AGNES(dataset, dist_avg, ", "8", ")\ndraw(C)\n\n\n\n\n", "\n", "运行结果及报错内容", "\n", "Traceback (most recent call last):\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 91, ", "in", " <module>\n    C = AGNES(dataset, dist_avg, 8)\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 61, ", "in", " AGNES\n    Mi.", "append", "(dist(i, j))\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 38, ", "in", " dist_avg\n    ", "return", " ", "sum", "(dist(i, j) ", "for", " i ", "in", " ", "Ci", " ", "for", " j ", "in", " Cj)/(len(", "Ci", ")*len(Cj))\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 38, ", "in", " <genexpr>\n    ", "return", " ", "sum", "(dist(i, j) ", "for", " i ", "in", " ", "Ci", " ", "for", " j ", "in", " Cj)/(len(", "Ci", ")*len(Cj))\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 27, ", "in", " dist\n    t = t + np.power(a[i]-b[i], 2)\nIndexError: tuple index ", "out", " of ", "range", "\n\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;为了满足框架中模型的输入格式要求&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["机器学习自制数据集，关于将图片处理成数值过程中array数组reshape的问题", ["训练集有60000张图片，测试集10000，图片大小是28×28=784", "关于代码中    x_train_save = np.reshape(x_train, (len(x_train), -1))这句", "我不明白为什么还要对x_train进行形状重塑，这个x_train在函数generateds()中就已经被弄成array类型的二维数组了（60000×784）", "\n", "\n", "\n", "import", " tensorflow as tf\nfrom PIL ", "import", " Image\n", "import", " numpy as np\n", "import", " os\n\n", "train_path", " = './mnist_image_label/mnist_train_jpg_60000/'\n", "train_txt", " = './mnist_image_label/mnist_train_jpg_60000.txt'\n", "x_train_savepath", " = './mnist_image_label/mnist_x_train.npy'\n", "y_train_savepath", " = './mnist_image_label/mnist_y_train.npy'\n\n", "test_path", " = './mnist_image_label/mnist_test_jpg_10000/'\n", "test_txt", " = './mnist_image_label/mnist_test_jpg_10000.txt'\n", "x_test_savepath", " = './mnist_image_label/mnist_x_test.npy'\n", "y_test_savepath", " = './mnist_image_label/mnist_y_test.npy'\n\n\ndef generateds(path, txt):\n    ", "f", " = open(txt, 'r')  ", "# 以只读形式打开txt文件", "\n    ", "contents", " = f.readlines()  ", "# 读取文件中所有行", "\n    f.close()  ", "# 关闭txt文件", "\n    x, ", "y_", " = [], []  ", "# 建立空列表", "\n    for content ", "in", " contents:  ", "# 逐行取出", "\n        ", "value", " = content.split()  ", "# 以空格分开，图片路径为value[0] , 标签为value[1] , 存入列表", "\n        ", "img_path", " = path + value[", "0", "]  ", "# 拼出图片路径和文件名", "\n        ", "img", " = Image.open(img_path)  ", "# 读入图片", "\n        ", "img", " = np.array(img.convert('L'))  ", "# 图片变为8位宽灰度值的np.array格式", "\n        ", "img", " = img / ", "255", ".  ", "# 数据归一化 （实现预处理）", "\n        x.append(img)  ", "# 归一化后的数据，贴到列表x", "\n        y_.append(value[", "1", "])  ", "# 标签贴到列表y_", "\n        print('loading : ' + content)  ", "# 打印状态提示", "\n\n    ", "x", " = np.array(x)  ", "# 变为np.array格式", "\n    ", "y_", " = np.array(y_)  ", "# 变为np.array格式", "\n    ", "y_", " = y_.astype(np.int64)  ", "# 变为64位整型", "\n    return x, y_  ", "# 返回输入特征x，返回标签y_", "\n\n\n", "if", " os.path.exists(x_train_savepath) ", "and", " os.path.exists(y_train_savepath) ", "and", " os.path.exists(\n        x_test_savepath) ", "and", " os.path.exists(y_test_savepath):\n    print('-------------Load Datasets-----------------')\n    ", "x_train_save", " = np.load(x_train_savepath)\n    ", "y_train", " = np.load(y_train_savepath)\n    ", "x_test_save", " = np.load(x_test_savepath)\n    ", "y_test", " = np.load(y_test_savepath)\n    ", "x_train", " = np.reshape(x_train_save, (len(x_train_save), ", "28", ", ", "28", "))\n    ", "x_test", " = np.reshape(x_test_save, (len(x_test_save), ", "28", ", ", "28", "))\n", "else", ":\n    print('-------------Generate Datasets-----------------')\n    x_train, ", "y_train", " = generateds(train_path, train_txt)\n    x_test, ", "y_test", " = generateds(test_path, test_txt)\n\n    print('-------------Save Datasets-----------------')\n    ", "x_train_save", " = np.reshape(x_train, (len(x_train), -", "1", "))  ", "# 此处-1表示列数由行数连带确定", "\n    ", "x_test_save", " = np.reshape(x_test, (len(x_test), -", "1", "))\n    np.save(x_train_savepath, x_train_save)\n    np.save(y_train_savepath, y_train)\n    np.save(x_test_savepath, x_test_save)\n    np.save(y_test_savepath, y_test)\n\n", "model", " = tf.keras.models.Sequential([\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(", "128", ", ", "activation='relu'),", "\n    tf.keras.layers.Dense(", "10", ", ", "activation='softmax')", "\n])\n\nmodel.compile(", "optimizer='adam',", "\n              ", "loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),", "\n              ", "metrics=['sparse_categorical_accuracy'])", "\n\nmodel.fit(x_train, y_train, ", "batch_size=32,", " ", "epochs=5,", " ", "validation_data=(x_test,", " y_test), ", "validation_freq=1)", "\nmodel.summary()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码第二行&amp;#xff0c;路径写错了&amp;#xff0c;不是环境的问题&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["已经安装numpy，却 显示No module named 'numpy'", ["用gprMax产生bp成像结果。源代码如下：", "\n", "import", " sys \nsys.path.append(", "'D:/mygprmax/gprMax'", ") ", "# 把 gprMax 安装路径添加至系统，使 import 可以找到 gprMax 模块 ", "\n", "import", " numpy ", "as", " np\n", "from", " tools.plot_Bscan ", "import", " get_output_data, mpl_plot \n", "import", " matplotlib.pyplot ", "as", " plt \n", "from", " numba ", "import", " jit\n\nfilename_target = ", "r\"D:\\soil_cylinder_merged.out\"", "#获取有目标回波数据文件 ", "\nrxnumber = ", "1", " \nrxcomponent = ", "'Ez'", " \n", "# 获取回波数据", "\n\noutputdata_t, dt = get_output_data(filename_target, rxnumber, rxcomponent) \nplt.imshow(outputdata_t, \nextent=[", "0", ", outputdata_t.shape[", "1", "], outputdata_t.shape[", "0", "], ", "0", "], \ninterpolation=", "'nearest'", ", \n                aspect=", "'auto'", ", cmap=", "'gray'", ", \n                vmin=-np.amax(np.", "abs", "(outputdata_t)), \nvmax=np.amax(np.", "abs", "(outputdata_t))) \nplt.show()\n\nfilename_back = ", "r\"D:\\soil_background_merged.out\"", "#获取背景回波数据文件 ", "\nrxnumber = ", "1", " \nrxcomponent = ", "'Ez'", " \n", "# 获取回波数据 ", "\noutputdata_b, dt = get_output_data(filename_back, rxnumber, rxcomponent) \nplt.imshow(outputdata_b, extent=[", "0", ", outputdata_b.shape[", "1", "], outputdata_b.shape[", "0", "], ", "0", "], \ninterpolation=", "'nearest'", ", \n                aspect=", "'auto'", ", cmap=", "'gray'", ", \n                vmin=-np.amax(np.", "abs", "(outputdata_b)), \nvmax=np.amax(np.", "abs", "(outputdata_b))) \nplt.show()\n\ntarget_back = outputdata_t-outputdata_b", "#有目标的数据减去背景数据，去除直达波 ", "\nplt.imshow(target_back, extent=[", "0", ", target_back.shape[", "1", "], target_back.shape[", "0", "], ", "0", "], \ninterpolation=", "'nearest'", ", \n                aspect=", "'auto'", ", cmap=", "'gray'", ", \n                vmin=-np.amax(np.", "abs", "(target_back)), \nvmax=np.amax(np.", "abs", "(target_back))) \nplt.show()\n\n", "@jit(", "nopython=", "True", ") ", "\n", "def", " ", "bp", "(", "outputdata, soil, timewindow, cell, exception", "):", "#BP 成像算法 ", "\n    ", "''' \n    :param outputdata: B-scan 数据 \n    :param soil: 探测区域介质相对介电常数 \n    :param timewindow: 时窗:param cell: 单元格大小，一般是 dx \n    :param exception: 默认为 0 \n    :return: BP 结果 \n    '''", " \n    ", "# time_rows -- 时间维采样点数 scans -- 扫描次数 ", "\n    time_rows, scans = outputdata.shape \n    ", "# 时间维步进 ", "\n    dt = timewindow / time_rows \n    ", "# 电磁波 ", "\n    c = ", "3e8", " \n    v = c / np.sqrt(soil) \n    ", "# 实际探测区域的 x 长度 cell -- 天线步进，作为成像区域划分单位 ", "\n    domain_x = cell * scans \n    x_vec = np.arange(", "0", ", domain_x, cell) \n    ", "# 根据时窗和波速算出 y 的实际长度 ", "\n    domain_y = cell * np.ceil(timewindow * v / ", "2", " / cell) \n    y_vec = np.arange(", "0", ", domain_y, cell) \n    rows = y_vec.shape[", "0", "] ", "# 成像区域行数 ", "\n    cols = x_vec.shape[", "0", "] ", "# 成像区域列数 ", "\n    ans = np.zeros((rows, cols)) ", "# 存储 bp 结果，空矩阵 ", "\n    ", "for", " row ", "in", " ", "range", "(rows): \n        ", "for", " col ", "in", " ", "range", "(cols): \n            ascan_curve = ", "0", " ", "# 存储当前单元格幅值和 ", "\n            ", "for", " scan ", "in", " ", "range", "(scans): \n                d = ", "2", " * np.sqrt(np.power((y_vec[row] - ", "0", "), ", "2", ") + np.power((x_vec[col] - x_vec[scan]), ", "2", ")) \n                time = d / v ", "# 双程传播时间 ", "\n                serie = time / dt + exception ", "# 时间索引 ", "\n                fix = ", "int", "(serie) \n                ceil = ", "int", "(np.ceil(serie)) \n                ", "if", " serie < time_rows - ", "1", " ", "and", " serie > ", "0", ": \n                    ascan_curve += outputdata[fix][scan] + outputdata[ceil][scan] - (serie - fix) * outputdata[fix][scan] \n            ans[row][col] = ascan_curve \n    ", "return", " ans\n\ntarget_back_bp = bp(target_back,", "80", ",", "5e-9", ",", "0.002", ",", "50", ")", "#对去除直达波的数据进行 BP 成像 ", "\nplt.imshow(target_back_bp, extent=[", "0", ", target_back_bp.shape[", "1", "], target_back_bp.shape[", "0", "], ", "0", "], \ninterpolation=", "'nearest'", ", \n                aspect=", "'auto'", ", cmap=", "'gray'", ", \n                vmin=-np.amax(np.", "abs", "(target_back_bp)), \nvmax=np.amax(np.", "abs", "(target_back_bp))) \nplt.show()\n", "\n", "在命令窗口运行，返回错误", "\n", "重装numpy", "\n", "\n", "出现冲突，尚未解决", "\n", "抱着试一试的想法重新运行，于是出现了这种错误，找不到numpy包，又无法安装因为已存在", "\n", "使用pip list查看", "\n", "请问该如何解决？"]], "Tag": "算法设计"}
{"Answer": "极点？你想求这个边缘的坐标吗？pos = np.where(img)这个函数返回就是所有的x,y坐标 min(pos[0])就是最小的x坐标，以此类推", "Konwledge_Point": "应对NP完全问题", "Question": ["python-opencv如何寻找二值图的极点？", ["如图，已经弄得了图片的边缘，想知道上下左右的极点，请问该如何实现"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/507028240726172.png\" /&gt;&lt;br /&gt;对Python列表使用乘法&amp;#xff0c;对于不可变对象&amp;#xff08;如数字、字符串&amp;#xff09;而言是复制值&amp;#xff0c;但对可变对象&amp;#xff08;如列表、字典&amp;#xff09;而言则是复制引用&amp;#xff0c;因此对于包含可变对象的列表切莫使用列表乘法&amp;#xff0c;可使用列表生成式代替。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何给变量批量赋值ndarray数组？", ["\n", "如图，这样批量赋值的话，改变a的大小为什么会同步改变b的大小？", "\n", "a,b = np.ones(2) , np.ones(2)", "这样写的话就没有上述问题了，但我要是想同时赋值10个变量，这样写代码会很冗长，有没有什么办法呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;time_inc&amp;#61;[[]] 生成二维数组&lt;br /&gt;time_inc&amp;#43;&amp;#61;[[i,ss]]就是在二维数组中添加新的一维数组[i,ss]&lt;br /&gt;相当于&lt;code class=\"language-html\"&gt;time_inc.append([i,ss])&lt;/code&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["time_inc+=[[i,ss]]是什么意思", ["time_inc=", "[[]", "]   #时间不连续节点\nspeedU=", "[]", "   #加速不合要求 Vup>", "100", "/", "7", "\nspeedD=", "[]", "   #减速不合要求 Vdn>", "28.8", "\ndata1 = pd", ".read_excel", "(", "'文件1.xlsx'", ") #原始数据\n\ndata1 = pd", ".DataFrame", "(data1)\ndata1 = np", ".array", "(data1)\ndata1_out=copy", ".deepcopy", "(data1) #原始数据副本（记录处理后最终数据）\n#寻找断续时间节点\n", "for", " ", "i", " ", "in", " range(data1", ".shape", "[0]", "-", "1", "):  ", "#shape", "[0]", "行数； range（", "10", "）：", "0", "-", "9", "； i从", "0", "到data行-", "1", "\n  date1 = datetime", ".datetime", ".strptime", "(data1", "[i]", "[0]", ".replace", "(", "'.000.'", ",", "''", "),", "'%Y/%m/%d %H:%M:%S'", ")\n  date2 = datetime", ".datetime", ".strptime", "(data1", "[i+1]", "[0]", ".replace", "(", "'.000.'", ",", "''", "),", "'%Y/%m/%d %H:%M:%S'", ")\n  ss=(date2-date1)", ".seconds", "\n  ", "if", " ss!=", "1", ":\n        time_inc+=", "[[i,ss]", "]\n        time_inc=np", ".array", "(time_inc)\n        time_inc=time_inc+np", ".array", "(", "[1,0]", "*time_inc", ".shape", "[0]", ")", ".reshape", "(", "[time_inc.shape[0]", ",", "2", "])\n        time_inc = pd", ".DataFrame", "(time_inc)\n        time_inc", ".to_excel", "(", "'time_inc.xlsx'", ") #输出断续时间节点\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;timedelta64&lt;br /&gt;你是不是多打了一个m&lt;br /&gt;timemdelta64&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["module 'numpy' has no attribute 'timemdelta64'", ["在使用np.timemdelta64时出现错误：", "\n", "rfm['R'] = abs(rfm['order_dt'] - rfm['order_dt'].max())/np.timemdelta64(1,'D')", "\n", "报错如下：", "\n", "重装了numpy后仍然没有得到解决", "\n", "谢谢大家的解答！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可能的原因&amp;#xff1a;浮点数太大&amp;#xff0c;需要精度限制&amp;#xff0c;将小数点进行限制后&amp;#xff0c;才可求得&amp;#xff01;&lt;br /&gt;根号下必须为正数&amp;#xff0c;如以下修改&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["RunitmeWarning:invalid value encountered in double_scalars", ["问题遇到的现象和发生背景", "\n", "读取栅格数据转换为了数组，然后传入该数组调用函数的时候，发出警告并一直在重复运行", "Warning (from warnings module):", "    File \"C: \\Python27\\AreGIS10. 7\\lib\\site-packages\\scipy\\stats", "_stats_mstats_ common.py\", line97", "                 sterrest=np.sqrt((1 - r**2) * ssym 1/ssxm / df)", "RunitmeWarning:invalid value encountered in double_scalars", "\n", "问题相关代码，请勿粘贴截图", "\n", "-", "- coding:utf-8 -", "-", "\n", "import glob, os, sys", "import numpy as np", "import numpy.ma as ma", "import time", "import datetime", "from osgeo import gdal                     #导入osgeo包的gdal模块,GDAL用于读栅格数据，函数返回Dataset对象", "from scipy import stats, linalg", "from scipy.stats import mstats", "\n", "import pandas as pd", "\n", "import matplotlib.pyplot as plt", "\n", "def Calculate_trend(inFol, outFol, factor='p', inFormat = \".tif\"):", "\n", "factor_finList = []\nfor files in os.listdir(inFol):                                                 ", "#", "listdir", "(", "path", ")", ":列举目录下的所有文件\n    for year in range(1988, 1990):\n        if (factor in files) and (inFormat== files[-4:]) and (str(year) in files):            \n            fileIn =  os.path.join(inFol, files)                                  #加入目录下的所有栅格文件\n            dataset = gdal.Open(fileIn, gdal.GA_ReadOnly)                         #读取栅格数据\n            #print\"fileIn是：\",fileIn\n            #print\"dataset是：\",dataset\n\n            if dataset is None:\n                print ('Could not open raster file'), fileIn\n                sys.exit(1)                                                         ", "#", "exit", "(1)", "：有错误退出           \n            factor_array = dataset.ReadAsArray().astype(np.float32)              # 将这个数组转化为 float32 位的数组\n            print\"factor_array是：\",factor_array\n            factor_array = factor_array.astype('float')                \n            factor_finList.append(factor_array)                               ", "#", "append", "()", "方法用于在列表末尾添加新的对象\n            print\"factor_finList是：\",factor_finList\n    factor_array = np.array(factor_finList)                                   #创建数组\n    #print\"factor_array是：\",factor_array\n\nkwargs = {\"fillvalue\": -9999.0, \"plot\": False}                              #\noutArray= np.apply_along_axis(Func_single_linear_reg, 0, factor_array, **kwargs)    #np.apply_along_axis将一个函数沿一个轴作用到数组中 调用“Func_single_linear_reg”\n", "#", "export_array_trend", "(", "outFol", ", ", "outArray", ", ", "geoTran", ", ", "geoProj", ", ", "cols", ", ", "rows", ",  ", "variable", " = '", "lineareg", "', ", "factor", " = ", "factor", ", ", "fillvalue", "= -9999.0, ", "driverName", "='", "GTiff", "')", "   #调用“export_array_trend”\n", "\n", "inFol = r\"D:\\py\" #读入的文件夹路径", "outFol = r\"D:\\py\\r\"    #输出的新文件的路径", "if not os.path.exists(outFol):                             #os.path.exists()函数用来检验给出的路径是否真地存在 返回bool", "    os.makedirs(outFol)                                    #makedirs(path):递归式的创建文件夹，注：创建已存在的文件夹将异常", "\n", "get raster tiff infomation(GeoTransform, Projection)", "\n", "global geoTran, geoProj, cols, rows, nodatav   ", "\n", "for allRasters in os.listdir(inFol):                      #listdir(path):列举目录下的所有文件", "    print\"第一个栅格数据：\",allRasters", "    if allRasters.endswith(\".tif\"):", "        firstRasPath = os.path.join(inFol, allRasters)    #加入目录下的所有栅格文件", "        break", "\n", "print\"第一个栅格数据的路径：\",firstRasPath", "\n", "firstdataset = gdal.Open(firstRasPath, gdal.GA_ReadOnly)          #读取栅格数据", "print\"栅格数据：\",firstdataset", "cols= firstdataset.RasterXSize                                   #读取列数", "print\"列数：\",cols", "rows= firstdataset.RasterYSize                                   #读取行数", "print\"行数：\",rows", "bandnum =  firstdataset.RasterCount                              #读取波段数", "print\"波段数：\",bandnum", "driver = firstdataset.GetDriver()                                #读取驱动（返回当前的磁盘驱动器？）", "print\"驱动器：\",driver", "geoTran = firstdataset.GetGeoTransform()                         #读取坐标转换参数", "print\"坐标转换参数：\",geoTran", "geoProj= firstdataset.GetProjection()                            #读取空间参照系", "print\"空间坐标系：\",geoProj", "nodatav = firstdataset.GetRasterBand(1).GetNoDataValue()         #栅格数值替换？？？", "print\"nodata值：\",nodatav", "\n", "Calculate_trend(inFol, outFol, factor='p', inFormat = \".tif\")", "\n", "运行结果及报错内容", "\n", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "是因为数据精度的问题嘛", "\n", "我想要达到的结果", "\n", "不报错"]], "Tag": "算法设计"}
{"Answer": "- 什么是索引？\r\n\r\n假设有一个二维数组，给定** i **行和**j**列，这才是索引。比如numpy.where()\r\n\r\n- 为什么numpy的arg系列不能索引？\r\n\r\n你可以把arg打印出来就知道了，这是一个相对值，在axis上的索引。numpy argmax argmin argsort......\r\n要么你直接排序获得排序的数组，要么你去每一行的索引（这时可以使用arg的值了）", "Konwledge_Point": "应对NP完全问题", "Question": ["根据numpy的argsort（）得到的结果，索引得到的数据是否正确？", ["x = np.array([[1, 5, 7], [3, 2, 4]])", "\nindex = np.argsort(x, axis=0)", "\nprint(x[index])", "\n\n", "[[[1 5 7]", "\n  [3 2 4]", "\n  [3 2 4]]", "\n\n", "[[3 2 4]", "\n  [1 5 7]", "\n  [1 5 7]]]", "\n\n", "index既然得到的是索引。那么根据索引可以得到原数组X的从小到大的值，为什么输出的是一个看不懂的数据 ，哪儿操作有失误或是理解不对吗？"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/a197p/article/details/46336235", "Konwledge_Point": "应对NP完全问题", "Question": ["Being a Predictor                        ", ["问题描述 :", "\n\n", "Let A(x) = Sigma(Ai * x^i) (0<=i<=N-1). Given A(1), A(2),…, A(N), You are asked to calculate A(N+1) mod 112233.", "\nIt is guaranteed that A(1), A(2), …, A(N), A(N+1) are all integers. ", "\n输入:", "\n\n", "There are multiple test cases, ended with an EOF.", "\nFor each case:", "\nLine 1 contains a positive integer N (N <= 10^6).", "\nLine 2 to Line N+1: each contains a non-negative integer less than 65536. The integer in Line i is A(i-1). ", "\n输出:", "\n\n", "There are multiple test cases, ended with an EOF.", "\nFor each case:", "\nLine 1 contains a positive integer N (N <= 10^6).", "\nLine 2 to Line N+1: each contains a non-negative integer less than 65536. The integer in Line i is A(i-1).", "\n样例输入:", "\n\n", "1", "\n18605", "\n5", "\n19543", "\n19998", "\n12266", "\n27854", "\n2103", "\n样例输出:", "\n\n", "18605", "\n110887"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;选B&lt;br /&gt;筛选切片后每一行的最小值对应的index,因为每一行的最小值都是在0的位置,所以最终生成打的array为[0,0,0]&lt;br /&gt;&lt;strong&gt;有帮助望采纳~&lt;/strong&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#arr数组#的问题，如何解决？", ["定义 arr 数组, arr = np.array([[1,2,3],[4,5,6],[7,8,9]]) np.argmin(arr[1:],axis=0) 怎么看输出结果", "A、 array([0, 1, 0], dtype=int64)", "B、 array([0, 0, 0], dtype=int64)", "C、 array([1, 1, 1], dtype=int64)", "D、 array([0, 1, 1], dtype=int64)"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;空值是 np.NaN&amp;#xff0c;不是 &amp;#39;&amp;#39;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python替换replace及空值fillna填充问题", ["使用python处理数据时，第一步将df指定列2中含有G字母使用replace替换为空值；", "\n\n", "第二步，替换的空值使用fillna进行填充，实际运行结果没有填充，还是显示空值", "\n\n", "\n", "df[2].str.replace('G(.*)','',regex = True)\n\ndf[2].fillna(df[1],inplace=True)\n", "\n\n", "这是什么情况呢？", "\n\n", "最终的目的就是df中第2列数据包含字母G的数据填充为第1列的数据"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我自己知道了谢谢&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为啥我的j和lat_index和lon-index都是0呀", ["extract variable(given region by coord) from .nc4 file", "\n", "import numpy as np", "from netCDF4 import Dataset", "import os", "import pandas as pd", "\n", "import time", "\n", "import re", "\n", "def extract_nc(path, coord_path, variable_name, precision=2):", "    \"\"\"extract variable(given region by coord)from.nc file", "    input:", "        path: path of the source nc file", "        coord_path: path of the coord extracted by fishnet:OID,lat,lon", "        variable_name: name of the variable need to read", "        precision: the minimum precision of lat/lon,to match the lat/lon of source nc file", "\n", "output：\n    {variable_name}.txt [i,", "j", "]:i(", "file", " ", "number", ") ", "j", "(grid point ", "number", ")\n    lat_index.txt/lon_index.txt\n    coord.txt\n", "\"\"", "\"", "\n", "print", "(", "f", "\"variable:{variable_name}\"", ")\ncoord = pd.read_csv(coord_path, sep=", "\",\"", ")  # ", "read", " coord(extract by fishnet)\n", "print", "(", "f", "\"grid point number:{len(coord)}\"", ")\ncoord = coord.", "round", "(precision)  # coord precision correlating with .nc ", "file", " ", "lat", "/lon\nresult = [path + ", "\"/\"", " + d ", "for", " d in os.listdir(path) ", "if", " d[-", "4", ":] == ", "\".nc4\"", "]\n", "print", "(", "f", "\"file number:{len(result)}\"", ")\nvariable = np.zeros((", "len", "(result), ", "len", "(coord) + ", "1", "))  # save the path correlated with ", "read", " order\n\n# calculate the ", "index", " of ", "lat", "/lon in coord from ", "source", " nc ", "file", "\nf1 = Dataset(result[", "0", "], ", "'r'", ")\nDataset.set_auto_mask(f1, False)\nlat_index = []\nlon_index = []\n", "lat", " = f1.variables[", "\"lat\"", "][:]\nlon = f1.variables[", "\"lon\"", "][:]\n", "count", " = ", "len", "(coord)\nindexs = ", "range", "(", "count", ")\n", "for", " ", "j", " in indexs:\n    lat_index.", "append", "(np.where(", "lat", " == coord[", "\"lat\"", "][", "j", "])[", "0", "][", "0", "])\n    lon_index.", "append", "(np.where(lon == coord[", "\"lon\"", "][", "j", "])[", "0", "][", "0", "])\nf1.", "close", "()\n", "\n", "到这一步运行完显示错误：", " lat_index.append(np.where(lat == coord[\"lat\"][j])[0][0])", "IndexError: index 0 is out of bounds for axis 0 with size 0", "\n", "Process finished with exit code 1", "\n", "一直到for j in indexs之前的语句都能正常运行，这一句理论上j应该是跟count一样是92671，但是就显示是0", "\n", "我的coord是四列92671行，四列分别是FID_ OID lat lon "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以用numpy的column_stack和where函数来获取像素点在某阈值范围内的坐标。例子&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; numpy as np\nfrom PIL &lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; Image \n\n&lt;span class=\"hljs-attr\"&gt;image&lt;/span&gt; &amp;#61; Image.open(&lt;span class=\"hljs-string\"&gt;&amp;#34;tqc.jpg&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-attr\"&gt;pixels&lt;/span&gt; &amp;#61; np.asarray(image)\n&lt;span class=\"hljs-comment\"&gt;# Set threshold level&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;threshold_level&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# Find coordinates of all pixels below threshold&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;coords&lt;/span&gt; &amp;#61; np.column_stack(np.where(pixels &amp;lt; threshold_level))\nprint(coords)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;或者要获取每个像素点坐标&amp;#xff0c;参考这里的代码&amp;#xff1a;&lt;a href=\"https://link.csdn.net/?target&amp;#61;https://stackoverflow.com/questions/60782965/extract-x-y-coordinates-of-each-pixel-from-an-image-in-python\" id=\"md_link_card\" class=\"md_link_card\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n  &lt;span class=\"md_link_title\"&gt;https://stackoverflow.com/questions/60782965/extract-x-y-coordinates-of-each-pixel-from-an-image-in-python&lt;/span&gt;\n  \n  &lt;span class=\"md_flex_card\"&gt;\n  &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n    &lt;span class=\"flex-1\"&gt;\n      &lt;span class=\"md_link_url\"&gt;https://stackoverflow.com/questions/60782965/extract-x-y-coordinates-of-each-pixel-from-an-image-in-python&lt;/span&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;如果对你有帮助&amp;#xff0c;请点击我回答的右上角采纳按钮给予采纳。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python如何提取图片像素点坐标值？", ["Python提问，Python如何提取图片像素点坐标值？。给个代码例子，各位！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;x_train[&amp;#39;abstract2&amp;#39;]&amp;#xff0c;可作为字典键取值或者选取数据框的列。如果x_train是一个数组&amp;#xff08;或列表&amp;#xff09;&amp;#xff0c;不能用字符去作为索引&amp;#xff0c;应该是整数或切片。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何解决IndexError: only integers, slices这类问题", ["想用Roberta进行文本分类，找到了代码代入后，出现了下面问题。我的数据集里的x_train设定为文本的'abstract2', y_train 是Label，进行分类。", "\n", "x_train[0]", "\"['inflammation', 'constitute', 'concerted', 'series', 'cellular', 'molecular', 'response', 'follow', 'disturbance', 'systemic', 'homeostasis', 'either', 'toxin']\"", "\n", "X_train是这种tokenize的文本，进入下面后出现了问题：", "\n", "seqlen = x_train['abstract2'].apply(lambda x: len(x.split()))", "\n", "sns.set_style(\"darkgrid\")", "plt.figure(figsize=(8,5))", "sns.distplot(seqlen)", "\n", "IndexError: only integers, slices (", ":", "), ellipsis (", "...", "), numpy.newaxis (", "None", ") and integer or boolean arrays are valid indices.", "\n", "不知道如何解决？请大家不吝赐教！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;np.where返回的就是坐标了啊&lt;/p&gt;\n\n&lt;p&gt;import numpy as np&lt;/p&gt;\n\n&lt;p&gt;a &amp;#61; np.array([[1,2,3],[4,5,6]])&lt;/p&gt;\n\n&lt;p&gt;print(np.where(a&amp;#61;&amp;#61;2))&lt;/p&gt;\n\n&lt;p&gt;返回&lt;/p&gt;\n\n&lt;p&gt;(array([0], dtype&amp;#61;int64), array([1], dtype&amp;#61;int64))就是第2行第1列&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python如何使用numpy.where在图片上提取某一位置的坐标", ["遍历所有点耗费太耗费时间了，怎样通过nump.where获取图片的某一位置坐标"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;ubuntu联网后输入打开控制台输入&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;sudo apt-&lt;span class=\"hljs-built_in\"&gt;get&lt;/span&gt; install &lt;span class=\"hljs-keyword\"&gt;python&lt;/span&gt;-pip\nsudo apt-&lt;span class=\"hljs-built_in\"&gt;get&lt;/span&gt; install &lt;span class=\"hljs-keyword\"&gt;python&lt;/span&gt;-numpy &lt;span class=\"hljs-keyword\"&gt;python&lt;/span&gt;-scipy &lt;span class=\"hljs-keyword\"&gt;python&lt;/span&gt;-matplotlib ipython ipython-notebook &lt;span class=\"hljs-keyword\"&gt;python&lt;/span&gt;-pandas &lt;span class=\"hljs-keyword\"&gt;python&lt;/span&gt;-sympy &lt;span class=\"hljs-keyword\"&gt;python&lt;/span&gt;-nose\n\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["ImportError: No module named numpy", ["ImportError: No module named numpy", "\n", "python使用过程中出现", "import numpy as np", "ImportError: No module named numpy"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码46行&lt;/p&gt;\n\n&lt;p&gt;for idx in range(x.size)改for idx in range(x.shape[0]):&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python错误解决", ["\n", "class Net:\n    def __init__(self,input_size,hidden_size,output_size,weight_init_std=0.001):\n        self.params={}\n        self.params['W1']=weight_init_std* \\\n                          np.random.randn(input_size,hidden_size)#高斯分布初始化\n        self.params['W2']=weight_init_std* \\\n                          np.random.randn(hidden_size,output_size)\n        self.params['b1']=np.zeros(hidden_size)\n        self.params['b2']=np.zeros(output_size)\n    def sigmoid(self,x):\n        x=np.array(x)\n        return 1/(1+np.exp(-x))\n\n    def softmax(self,x):\n        c=np.max(x)\n        exp_a=np.exp(x-c)#溢出对策\n        sum_exp=np.sum(exp_a)\n        y=exp_a/sum_exp\n        return y\n    def predict(self,x):\n        W1,W2=self.params['W1'],self.params['W2']\n        b1,b2=self.params['b1'],self.params['b2']\n        a1=np.dot(x,W1)+b1\n        z1=self.sigmoid(a1)\n        a2=np.dot(z1,W2)+b2\n        z2=self.sigmoid(a2)\n        y=self.softmax(z2)\n        return y\n    def loss(self,x,t):\n        y=self.predict(x)\n        if y.ndim==1:\n            t=t.reshape(1,t.size)\n            y=y.reshape(1,y.size)\n        batch_size=y.shape[0]\n        return -np.sum(t*np.log(y+1e-7))/batch_size\n    def accuracy(self,x,t):\n        y=self.predict(x)\n        y=np.argmax(y,axis=1)\n        t=np.argmax(t,axis=1)\n        accuracy=np.sum(y==t)/float(x.shape[0])\n        return accuracy\n    def numerical_gradient(self,f,x):#求偏导\n        h=1e-4\n        grad=np.zeros_like(x)\n        tmp_val=np.zeros_like(x[0])\n        for idx in range(x.size):\n            tmp_val=x[idx]#初始值\n            x[idx]=tmp_val+h\n            fxh1=f(x)\n            x[idx]=tmp_val-h\n            fxh2=f(x)\n            grad[idx]=(fxh1-fxh2)/(2*h)\n            x[idx]=tmp_val#还原x\n        return grad\n    def ng(self,x,t):\n        f=lambda w:self.loss(x,t)\n        grads={}\n        grads['W1']=self.numerical_gradient(f,self.params['W1'])\n        grads['b1']=self.numerical_gradient(f,self.params['b1'])\n        grads['W2']=self.numerical_gradient(f,self.params['W2'])\n        grads['b2']=self.numerical_gradient(f,self.params['b2'])\n        return grads\nnet=Net(input_size=784,hidden_size=225,output_size=15)\nx=np.random.rand(100,784)\ny=net.predict(x)\nt=np.random.rand(100,15)\ngrads=net.ng(x,t)", "\n\n", "错误提示：", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;需要使用Numpy自带的方法np.isnan()&amp;#xff0c;is表达式&amp;#xff0c;in表达式进行判断&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\nnp.&lt;span class=\"hljs-keyword\"&gt;nan&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;is&lt;/span&gt; np.&lt;span class=\"hljs-keyword\"&gt;nan&lt;/span&gt; # &lt;span class=\"hljs-keyword\"&gt;True&lt;/span&gt;\nnp.isnan(np.&lt;span class=\"hljs-keyword\"&gt;nan&lt;/span&gt;) # &lt;span class=\"hljs-keyword\"&gt;True&lt;/span&gt;\nnp.&lt;span class=\"hljs-keyword\"&gt;nan&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; [np.&lt;span class=\"hljs-keyword\"&gt;nan&lt;/span&gt;] # &lt;span class=\"hljs-keyword\"&gt;True&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何判断dataframe里某一位置元素为NAN", ["如何判断dataframe里某一位置元素为NAN？求指点一下", "尝试：data.iloc[0,0] is np.nan不行", "尝试代码：", "\n", "import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n", "data", " = pd.", "DataFrame", "(", "data", "=", "np", ".", "ones", "([4,4]))", "\n", "data", ".iloc[0,0] =np.nan", "\n", "print", "(", "data", ".iloc[0,0])", "\n", "print", "(", "data", ".iloc[0,0] is np.nan)", "\n", "print", "(np.nan is np.nan)\n", "\n", "运行结果：", "nan", "False", "True"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这是因为在执行函数时&amp;#xff0c;没有左键单击时&amp;#xff0c;程序就开始执行第二条if 语句&amp;#xff0c;读取参数a时因没有定义和赋值&amp;#xff0c;当然会报错&amp;#xff0c;应该将第一个判断语句块后面的if...elif...整个代码块缩进一个tab&amp;#xff0c;作为第一个判断语句的一部分&amp;#xff0c;这样就不会报错了。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["openCV绘画变量异常", ["import cv2", "\n\n", "import numpy as np", "\n\n", "thickness=-1", "\n\n", "mode=1", "\n\n", "d=400", "\n\n", "def draw_circle(event,x,y,flags,param):", "\n\n", "    if event==cv2.EVENT_LBUTTONDOWN:", "\n\n", "        a=np.random.randint(1,d-50)", "\n\n", "        r=np.random.randint(1,d/5)", "\n\n", "        angle = np.random.randint(0,361)", "\n\n", "        color = np.random.randint(0,high = 256,size = (3,)).tolist()", "\n\n", "    if mode==1:", "\n\n", "        cv2.rectangle(img,(x,y),(a,a),color,thickness)", "\n\n", "    elif mode==2:", "\n\n", "        cv2.circle(img,(x,y),r,color,thickness)", "\n\n", "    elif mode==3:", "\n\n", "        cv2.line(img,(a,a),(x,y),color,3) ", "\n\n", "    elif mode==4:", "\n\n", "        cv2.ellipse(img, (x,y), (100,150), angle, 0, 360,color,thickness) ", "\n\n", "    elif mode==5:", "\n\n", "        cv2.putText(img,'OpenCV',(0,round(d/2)), ", "\n\n", "            cv2.FONT_HERSHEY_SIMPLEX, 2,color,5) ", "\n\n", "img=np.ones((d,d,3),np.uint8)*255", "\n\n", "cv2.namedWindow('image')", "\n\n", "cv2.setMouseCallback('image',draw_circle)", "\n\n", "while(1):", "\n\n", "    cv2.imshow('image',img)", "\n\n", "    k=cv2.waitKey(1)&0xFF", "\n\n", "    if k==ord('r'):", "\n\n", "        mode=1", "\n\n", "    elif k==ord('c'):", "\n\n", "        mode=2", "\n\n", "    elif k==ord('l'):", "\n\n", "        mode=3", "\n\n", "    elif k==ord('e'):", "\n\n", "        mode=4", "\n\n", "    elif k==ord('t'):", "\n\n", "        mode=5", "\n\n", "    elif k==27:", "\n\n", "        break ", "\n\n", "cv2.destroyAllWindows()"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码没问题&amp;#xff0c;你的w, h错了&amp;#xff0c;根据这个图数一下&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/903402492646145.JPG\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于用python实现张正友标定法中的设置棋盘格的点，换成其他的h*w的矩阵就会报错，应该如何解决这个问题", ["问题遇到的现象和发生背景", "\n", "我觉得是在ret的角点提取的地方，我试着打印出来结果是false，只有一张图片可以使用，换成其他的图片ret都是false", "\n", "有问题的代码", "\n", "criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, ", "30", ", ", "0.001", ")\n#棋盘格模板规格\nw = ", "9", "\nh = ", "9", "\n# 世界坐标系中的棋盘格点,例如(", "0", ",", "0", ",", "0", "), (", "1", ",", "0", ",", "0", "), (", "2", ",", "0", ",", "0", ") ....,(", "8", ",", "5", ",", "0", ")，去掉Z坐标，记为二维矩阵\nobjp = np.zeros((w*h,", "3", "), np.float32)\nobjp", "[:,:", "2", "]", " = np.mgrid", "[", "0", ":", "w", ",", "0", ":", "h", "]", ".", "T", ".", "reshape(-", "1", ",", "2", ")\n# 储存棋盘格角点的世界坐标和图像坐标对\nobjpoints = ", "[]", " # 在世界坐标系中的三维点\nimgpoints = ", "[]", " # 在图像平面的二维点\n#images = cv2.imread('D:\\\\postgraduate\\\\Python\\\\learnpython\\\\picture_1.jpg')\nimages = glob.glob('D:\\\\postgraduate\\\\Python\\\\learnpython\\\\picture_9.jpg')\n", "for", " fname ", "in", " images:\n    img = cv2.imread(fname)\n    gray = cv2.cvt", "Color(", "img", ",", "cv2", ".COLOR_BGR2GRAY)", "\n    # 找到棋盘格角点\n    ret, corners = cv2.find", "ChessboardCorners(", "gray", ", (", "w", ",", "h", ")", ",None)\n    print(ret)\n    # 如果找到足够点对，将其存储起来\n    ", "if", " ret", " == ", "True:\n        cv2.corner", "SubPix(", "gray", ",", "corners", ",(11,11)", ",(-", "1", ",-", "1", "),criteria)\n        objpoints.append(objp)\n        imgpoints.append(corners)\n        # 将角点在图像上显示\n        cv2.draw", "ChessboardCorners(", "img", ", (", "w", ",", "h", ")", ", corners, ret)\n        cv2.named", "Window(", "\"findCorners\"", ", ", "cv2", ".WINDOW_NORMAL)", "\n        cv2.resize", "Window('", "findCorners", "', 600, 600)", "\n        cv2.imshow('findCorners',img)\n        cv2.wait", "Key(0)", "\ncv2.destroy", "AllWindows()", "\nret, mtx, dist, rvecs, tvecs = cv2.calibrate", "Camera(", "objpoints", ", ", "imgpoints", ", ", "gray", ".", "shape", "[::-1], None, None)", "\n", "\n", "运行结果及报错内容", "\n", "calibration.cpp_3694_ error_ (-", "215", "_Assertion failed) nimages _ ", "0", " ", "in", " ", "function", " ", "'cv__calibrateCameraRO'", "\nFalse\n\nProcess finished with ", "exit", " code ", "1", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "希望给一张图片就可以对其进行标定和处理"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;改为float64就正常了&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import numpy as np\na&amp;#61;np&lt;span class=\"hljs-selector-class\"&gt;.float64&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;495853088.0&lt;/span&gt;)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a)&lt;/span&gt;&lt;/span&gt;\nb&amp;#61;f&lt;span class=\"hljs-string\"&gt;&amp;#39;{a}&amp;#39;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(b)&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/592172392236151.png\" width=\"600px\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python np.float32类型转str为什么数据会变", ["比如a=np.float32(495853088.0)", "    b=f'{a}'", "结果a=495853100.0", "   b='495853088.0'", "问题1:b为什么不是'495853100.0'", "问题2: 请问这里的x可以填多少  495853088.0=np.float32(x)", "小白提问  谢谢各位大佬  好人一生平安"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;上次那个不好用么&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的问题：import matplotlib.pyplot as plt", ["\n \n", "import", " matplotlib\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " numpy ", "as", " np\n", "def", " ", "main", "():\n    matplotlib.rcParams[", "'font.family'", "] = ", "'SimHei'", "\n    stuScore = np.loadtxt(", "'student_score.csv'", ", delimiter=", "','", ")  ", "# 读入成绩文件,返回数组", "\n    sumEach = np.", "sum", "(stuScore[:, ", "1", ":], axis=", "1", ")  ", "# 返回每个学生3门课程总分", "\n    avgEach = np.average(stuScore[:, ", "1", ":], axis=", "0", ")  ", "# 返回每个学生每门课程平均分", "\n    ", "# 取出各科成绩", "\n    mathScore = stuScore[:, ", "1", "]\n    engScore = stuScore[:, ", "2", "]\n    pythonScore = stuScore[:, ", "3", "]\n    ", "# Performanceanalysis(avgEach, stuScore, sumEach)", "\n    ", "while", " ", "True", ":\n        ", "print", "(", "\"\"\"成绩分析与可视化系统  \n 1: 基本信息显示      \n 2: 成绩分析          \n 3: 可视化         \n 4: 退出系统\"\"\"", ")\n        operation = ", "input", "(", "\"请输入你的操作\"", ")\n        ", "if", " operation.isdigit():\n            operation = ", "int", "(operation)\n            ", "if", " operation == ", "1", ":\n                ", "print", "(", "\" 学号  高数  英语  python\"", ")\n                ", "for", " i ", "in", " stuScore:\n                    ", "print", "(", "f\"", "{", "int", "(i[", "0", "])}", " ", "{i[", "1", "]}", " ", "{i[", "2", "]}", " ", "{i[", "3", "]}", "\"", ")\n            ", "elif", " operation == ", "2", ":\n                Performanceanalysis(avgEach, stuScore, sumEach)\n            ", "elif", " operation == ", "3", ":\n                ", "# name= input(\"请输入课程名\")", "\n                ", "# if name=='xxx':", "\n                ", "# 由于不清楚你的课程名是啥,你这里自己填 if elif else结构就可以", "\n                Highnumberhistogram(mathScore)\n                Englishhistogram(engScore)\n                Scorehistogram(pythonScore)\n            ", "elif", " operation == ", "4", ":\n                ", "import", " sys\n                sys.exit(", "0", ")\n            ", "else", ":\n                ", "print", "(", "\"输入错误,请重新输入\"", ")\n", "def", " ", "Performanceanalysis", "(", "avgEach, stuScore, sumEach", "):\n    ", "# 返回最高分和最低分", "\n    maxMath = np.", "max", "(stuScore[:, ", "1", "])\n    maxEng = np.", "max", "(stuScore[:, ", "2", "])\n    maxPython = np.", "max", "(stuScore[:, ", "3", "])\n    minMath = np.", "max", "(stuScore[:, ", "1", "])\n    minEng = np.", "max", "(stuScore[:, ", "2", "])\n    minPython = np.", "max", "(stuScore[:, ", "3", "])\n    ", "print", "(", "\"个人总分情况是：\"", ")\n    ", "print", "(sumEach)\n    ", "print", "(", "\"个人平均分情况是：\"", ")\n    ", "print", "(avgEach)\n    ", "print", "(", "\"班级每门课程最高分：\"", ")\n    ", "print", "(maxMath, maxEng, maxPython)\n    ", "print", "(", "\"班级每门课程最低分：\"", ")\n    ", "print", "(minMath, minEng, minPython)\n", "def", " ", "Highnumberhistogram", "(", "mathScore", "):\n    ", "# 绘制高数直方图", "\n    plt.suptitle(", "\"成绩分布直方图\"", ")\n    plt.subplot(", "3", ", ", "1", ", ", "1", ")\n    plt.hist(mathScore, bins=", "10", ", ", "range", "=(", "0", ", ", "100", "), color=", "'red'", ")  ", "# 0-100分,分成10段", "\n    plt.xlabel(", "\"高数成绩分数段\"", ")  ", "# 设置x轴标签", "\n    plt.ylabel(", "\"人数\"", ")  ", "# 设置y轴标签", "\n    plt.xlim(", "0", ", ", "100", ")  ", "# 设置x轴区间", "\n    plt.xticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置x轴刻度", "\n    plt.yticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置y轴刻度", "\n    ", "# plt.grid()", "\n    plt.show()\n", "def", " ", "Englishhistogram", "(", "engScore", "):\n    ", "# 绘制英语直方图", "\n    plt.subplot(", "3", ", ", "1", ", ", "2", ")\n    plt.hist(engScore, bins=", "10", ", ", "range", "=(", "0", ", ", "100", "), color=", "'blue'", ")  ", "# 0-100分,分成10段", "\n    plt.xlabel(", "\"英语成绩分数段\"", ")  ", "# 设置x轴标签", "\n    plt.ylabel(", "\"人数\"", ")  ", "# 设置y轴标签", "\n    plt.xlim(", "0", ", ", "10", ")  ", "# 设置x轴区间", "\n    plt.xticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置x轴刻度", "\n    plt.yticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置y轴刻度", "\n    ", "# plt.grid()", "\n    plt.show()\n", "def", " ", "Scorehistogram", "(", "pythonScore", "):\n    ", "# 绘制python直方图", "\n    plt.suptitle(", "\"成绩分布直方图\"", ")\n    plt.subplot(", "3", ", ", "1", ", ", "3", ")\n    plt.hist(pythonScore, bins=", "10", ", ", "range", "=(", "0", ", ", "100", "), color=", "'green'", ")  ", "# 0-100分,分成10段", "\n    plt.xlabel(", "\"Python成绩分数段\"", ")  ", "# 设置x轴标签", "\n    plt.ylabel(", "\"人数\"", ")  ", "# 设置y轴标签", "\n    plt.xlim(", "0", ", ", "100", ")  ", "# 设置x轴区间", "\n    plt.xticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置x轴刻度", "\n    plt.yticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置y轴刻度", "\n    ", "# plt.grid()", "\n    plt.show()\n", "if", " __name__ == ", "'__main__'", ":\n    main()\n \n\n\n", "\n", "加一个python的饼图 不要重复的", "\n", "就要最后一列的那列数字  加到饼图里"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;是不是σΔp[i] &amp;#61; np.std(((Δp[i])), ddof&amp;#61;1)这一句里的Δp[i]格式不对啊&amp;#xff0c;我看你前一行转float来着&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python求标准差返回NAN", ["问题遇到的现象和发生背景", "\n", "对列表求标准差的时候为什么返回NAN，应该是正常的数值呀", "\n", "问题相关代码，请勿粘贴截图", "\n", "\nΔ", "p", " = pd", ".read_csv", "(", "\"C:/Users/DELL/Desktop/dt3.csv\"", ", header=", "0", ", usecols=", "[", "'Δp'", "]", ")\nΔp= np", ".array", "(Δp)\n\nσΔp=", "[]", "\n", "for", " ", "i", " ", "in", " range(len(Δp)):\n    σΔ", "p", ".append", "((", "float", "(Δp[i])))  \n    σΔ", "p", "[i]", " = np", ".std", "(", "float", "((Δp[i])), ddof=", "1", ")\n", "print", "(σΔp)", "\n", "\n", "运行结果及报错内容", "\n", "\n", "返回结果全为nan", "\n", "我的解答思路和尝试过的方法"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;个人习惯问题&amp;#xff0c;或者说国外跟国内的写法也不一样&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["正态分布是np模块的还是nd模块的", ["为什么CSDN中都是np模块而书上是nd模块?"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/kingbeful/article/details/3078306?locationNum=14", "Konwledge_Point": "应对NP完全问题", "Question": ["Sending Gift                ", ["Sending company has to send gift in the coming Christmas. One of the building of HangZhou which has 100 floors, there are many people working in the building will recieve gift in the coming Christmas. One of the staffer in the Sending company is dispatched to send gift to the tall building. It's so tired to send so many gift(but he has to do for money). Even worse there has no lift. Go up one floor cost 5 calories energy, Go down one floor cost 3 calories energy. The sending company aways use column to pack the gift, you can only fetch the gift at the two end of the column. Now the company pack these gift which sending to the tall building in two columns. Given the position(which floor) every gift has to send, now you are to find the min energy the staffer has to consume. ", "\n\n", "The staffer at the first floor at start.", "\n\n", "Input", "\n\n", "The first line if one integer P which is the test case. ", "\nThen P test follows,each test the first line if one integer N(N<=30) which is the number of gifts packed in the first column, the next line is N integers(between 1 and 100) which is the floor every gift (from one end to another) in the first column has to send.The next is one integer M(M<=30)which is the number of gifts packed in the second column, then next line is M integers (between 1 and 100) which is the floor every gift(from one end to another) in the second column has to send. ", "\n\n", "Output", "\n\n", "Just one integer the min energy(calories) the staffer has to consume. ", "\n\n", "Sample Input", "\n\n", "1 ", "\n2 ", "\n1 2 ", "\n3 ", "\n1 2 3 ", "\n\n", "Sample Output", "\n\n", "10 "]], "Tag": "算法设计"}
{"Answer": "array = N.loadtxt(csvdir,delimiter = ',',usecols = (3),skiprows = 1)\r\nnp.sum(array[1000:5000], axis=0)", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy 范围 求和 sum，条件如何编写", ["array = N.loadtxt(csvdir,delimiter = ',',usecols = (3),skiprows = 1)\n\n", "\n\n", "问题：", "\narray里面都是数据，想对array的数据进行区间求和，获得1000<x<5000的x的和", "\n\n", "请问用Numpy,sum()如何进行条件编写？", "\n\n", "在线等！"]], "Tag": "算法设计"}
{"Answer": "怎样证明一个问题C是NP完全问题呢？首先，要证明C是NP问题，也就是C的解的正确性容易验证；然后要证明有一个NP完全问题B，能够在多项式时间内归约到C。这就要求必须先存在至少一个NPC问题。Cook证明了NP完全问题的祖先就是SAT。SAT问题是指给定一个包含n个布尔变量的逻辑式，问是否存在一个取值组合，使得该式被满足。Cook证明了SAT是一个NPC问题，如果SAT容易解决，那么所有NP都容易解决。", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么说旅行商问题是NP Hard的？", ["为什么说旅行商问题是NP Hard的？网上看了很多文章还是比较迷糊，有谁能清晰地讲解下。怎么样判断一个算法是不是NP Hard？"]], "Tag": "算法设计"}
{"Answer": "np.where(a == 1)返回的是a=1对应的位置，需要用“行”和“列”表示，原矩阵a是个一维矩阵（行数只有一行）。\r\n第一行的[ 0 0 0 0 0 0 0 0 0 0 0]代表的是对应点的行下标\r\n第二行的[ 5 6 13 19 28 29 34 44 45 46 48]代表的是列下标\r\n合起来，就是（0，5），（0，6），（0，13）.......", "Konwledge_Point": "应对NP完全问题", "Question": ["np.where的用法 np.array(np.where(a == 1))的输出问题", ["y - 实际的标签 p - 预测", "\n\n", "    p = [[1. 1. 1. 1. 1. 1. 0. 1. 1. 1. 1. 1. 1. 1. 0. 1. 0. 1. 1. 0. 1. 0. 0. 1.\n1. 1. 1. 0. 0. 1. 1. 1. 1. 1. 1. 0. 0. 1. 0. 0. 1. 1. 1. 0. 1. 1. 0. 1.\n0. 0.]]\n  y=[[1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1 1 1 0 0\n0 1 0 0 1 1 1 0 0 0 1 1 1 0]]\n  a = [[2. 2. 2. 2. 2. 1. 1. 2. 2. 2. 2. 2. 2. 1. 0. 2. 0. 2. 2. 1. 2. 0. 0. 2.\n2. 2. 2. 0. 1. 1. 2. 2. 2. 2. 1. 0. 0. 2. 0. 0. 2. 2. 2. 0. 1. 1. 1. 2.\n1. 0.]]\n    a = p + y\nmislabeled_indices = np.array(np.where(a == 1))\n", "\n\n", "为什么输出的mislabeled_indices = [[ 0  0  0  0  0  0  0  0  0  0  0]", "\n [ 5  6 13 19 28 29 34 44 45 46 48]]", "\n 怎么是（2，x）的列表？ 第0行为什么都是0？"]], "Tag": "算法设计"}
{"Answer": "没有返回值，可以检查一下源或者在调用之前先判断一下是否为空", "Konwledge_Point": "应对NP完全问题", "Question": ["在python中运行image = image.astype(np.float32)时候发生错误。", ["AttributeError: 'NoneType' object has no attribute 'astype'请问下这是什么原因呢？有什么解决办法"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\nwaveData &amp;#61; np.frombuffer(strData, dtype&amp;#61;&amp;#39;int16&amp;#39;)&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python中声音信号导入后显示出问题（函数fromstring和frombuffer的使用区别）", ["\n", "关于Python中声音信号的导入及显示；", "\n", "相关代码：", "\n", "import wave     # 导入音频处理包\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nf = wave.open(r'D:\\1.wav', 'rb')\nparams = f.getparams()\nnchannels, sampwidth, framerate, nframes = params[:4]\n# nchannels:声道数;sampwidth:量化位数（byte）;framerate:采样频率;nframes:采样点数\nprint('channel:', nchannels, 'sampwidth:', sampwidth, 'framerate:', framerate, 'numframes:', nframes)\n\nstrData = f.readframes(nframes)  # 读取音频，字符串格式\nf.close()\n\n# waveData = np.frombuffer(strData, dtype='S1', offset=0)  \nwaveData = np.fromstring(strData, dtype=np.short)  # 将字符串转化为int\n\nwaveData.shape = -1,2   # 将waveData数组改为2列，行数自动匹配。\nwaveData = waveData.T\ntime = np.arange(0, nframes) * (1.0 / framerate)\n\nplt.figure(1)\nplt.subplot(2,1,1)\nplt.plot(time, waveData[0])\nplt.subplot(2,1,2)\nplt.plot(time, waveData[1], c='r')\nplt.xlabel(\"Time(s)\")\nplt.show()\n\n", "\n\n", "\n", "报错信息：", "\nDeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead", "\nwaveData = np.fromstring(strData, dtype=np.short)  # 将字符串转化为int", "\n", "系统建议改用frombuffer，因为fromstring提示将会被弃用，但是使用frombuffer后得出的数组经过转换后不能和time的维度相匹配，而fromstring后的数据是左右声道的数据。想要知道如何使用frombuffer来代替fromstring！", "\n", "图像可以正常显示，不会报错但是会报警告，多谢大神的帮忙", "\n", "声音信号 1.wav", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这里提示错误是因为数组的长度为19429344 分割后的五维数组为(53018,1,17,25,25) 原始数组不能达到这个分割后的数组长度,所以不能分割.你需要检查x_1_25_final_array_new.npy是否在内部加载了文件或者数组,或者你加载的文件数组数据是否符合要求&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["np.load报错 ValueError: cannot reshape array", ["问题遇到的现象和发生背景", "\n", "就简简单单一句加载npy文件代码，不知道为啥报错了reshape？", "\n", "问题相关代码，请勿粘贴截图", "\n", "import", " os\n", "from", " osgeo ", "import", " gdal\n", "from", " osgeo ", "import", " ogr\n", "import", " sys\n", "import", " random\n", "import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n\n", "x_train_array", " = np.load('../x_1_25_final_array_new.npy')\n", "\n", "运行结果及报错内容", "\n", "Traceback (most recent ", "call", " last):\n  File \"/home/wangweiming/下载/FirePredict1031/me/test.py\", ", "line", " ", "10", ", ", "in", " <module>\n    x_train_array = np.", "load", "(", "'../x_1_25_final_array_new.npy'", ")\n  File \"/home/wangweiming/anaconda3/lib/python3.8/site-packages/numpy/lib/npyio.py\", ", "line", " ", "440", ", ", "in", " ", "load", "\n    ", "return", " ", "format", ".read_array(fid, allow_pickle=allow_pickle,\n  File \"/home/wangweiming/anaconda3/lib/python3.8/site-packages/numpy/lib/format.py\", ", "line", " ", "783", ", ", "in", " read_array\n    ", "array", ".shape = shape\nValueError: cannot reshape ", "array", " ", "of", " size ", "19429344", " ", "into", " shape (", "53018", ",", "1", ",", "17", ",", "25", ",", "25", ")\n", "\n", "我的解答思路和尝试过的方法", "\n", "我并没有使用reshape语句，检查了源文件，我也没有修改过文件或查到reshape语句", "\n", "我想要达到的结果", "\n", "要怎么解决或避开这问题成功加载npy文件"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;构建一个 512&lt;em&gt;512&lt;/em&gt;3的数组&amp;#xff0c;每个值都是0&lt;br /&gt;相当于生成了一张黑色的 512*512大小的图片。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["opencv中np的有关数组的问题", ["img=np.zeros((512,512,3),np.uint8）这个咋理解 ，求解"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你生成了一个二维数值A&lt;br /&gt;array([[10, 11, 12],&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;       [13, 14, 15],&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;       [16, 17, 18]])&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;A[[2,1]]&amp;#xff1a;取了A中的第三行和第三行&lt;br /&gt;array([[16, 17, 18],&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;       [13, 14, 15]])&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;A[[2,1],[1,2]]&amp;#xff1a;取了A中的第三行的第二个元素和第三行第三个元素&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["A=np.array输出问题", ["A", "=np.array([[", "10", ",", "11", ",", "12", "],[", "13", ",", "14", ",", "15", "],[", "16", ",", "17", ",", "18", "]]),A[[[", "2", ",", "1", "],[", "1", ",", "2", "]]]的输出结果是（）\n\n", "\n", "array([17, 15])", "\n", "为什么？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个问题你可以去看看np.arange的官方文档&amp;#xff0c;里面提到说如果step不是整数时&amp;#xff0c;建议使用np.linespace函数&amp;#xff0c;因为此时np.arange函数存在着数值不稳定的问题。实际上np.arange函数采用的step是dtype(start&amp;#43;step)-dtype(start)&amp;#xff0c;当dtype参数没有显式给出的时候会根据其他输入参数进行推断&amp;#xff0c;输入的为float类型&amp;#xff0c;计算出的实际step就也为float型&amp;#xff0c;且不稳定一般不等于原始输入step。见下述代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attribute\"&gt;float&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;58&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)-float(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;58&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;Out&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;]: &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;10000000000000009&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;官方文档&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://numpy.org/doc/stable/reference/generated/numpy.arange.html\" id=\"textarea_1650631474639_1650631761852_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://numpy.org/doc/stable/reference/generated/numpy.arange.html&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python 的numpy中arange()函数终值包含问题", ["import numpy as np", "ab=np.arange(1.58,1.61,0.01)", "abc=np.arange(1.58,1.65,0.01)", "print(ab)", "print(abc)", "\n", "结果：", "[1.58 1.59 1.6  1.61]", "[1.58 1.59 1.6  1.61 1.62 1.63 1.64]", "\n", "问题：arange()函数一个包含终值，一个不包含终值，是为啥呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;会报错,改成;  或者A&amp;#61;np.array([[10,11,12],[13,14,15],[16,17,18]])和A[[[2,1],[1,2]]]分成两行。&lt;br /&gt;A&amp;#61;np.array([[10,11,12],[13,14,15],[16,17,18]])得到一个二维数组A&lt;br /&gt;array([[10, 11, 12],&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;       [13, 14, 15],&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;       [16, 17, 18]])&lt;/span&gt;&lt;br /&gt;A[[2,1]]得到的是&lt;br /&gt;array([[16, 17, 18],&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;       [13, 14, 15]])&lt;/span&gt;&lt;br /&gt;A[[2,1],[1,2]]得到的是&lt;br /&gt;array([17, 15])&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["A=np.array的输出结果是（）", ["\n", "A", "=np.array([[", "10", ",", "11", ",", "12", "],[", "13", ",", "14", ",", "15", "],[", "16", ",", "17", ",", "18", "]]),A[[[", "2", ",", "1", "],[", "1", ",", "2", "]]]\n", "\n", "的输出结果是（）"]], "Tag": "算法设计"}
{"Answer": "1维数组叫矢量，2维数组叫矩阵，3维及大于3维的数组就叫多维数组了", "Konwledge_Point": "应对NP完全问题", "Question": ["np.zeros((2,2,3))为什么是三个参数，怎么理解？用在哪里？", ["array([[[ 0.,  0.,  0.],", "\n        [ 0.,  0.,  0.]],", "\n       [[ 0.,  0.,  0.],", "\n        [ 0.,  0.,  0.]]])", "\n    产生2个2行3列矩阵？一直不理解。"]], "Tag": "算法设计"}
{"Answer": "可以将这段代码改下\r\nx = np.linspace(-4,4,num=50,dtype=np.complex)\r\ny = np.linspace(-4,4,num=50,dtype=np.complex)\r\n不改dtype的话，在出现负数的根时会出现问题。", "Konwledge_Point": "应对NP完全问题", "Question": ["Python的运算符的一类问题，Z = np.cos((X**3+Y**3)**(1/3))", ["import numpy as np", "\nx = np.linspace(-4,4,num=50)", "\ny = np.linspace(-4,4,num=50)", "\nX,Y = np.meshgrid(x,y)", "\nZ = np.cos((X**3+Y**3)**(1/3))", "\n程序提示报错：", "\nD:\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:5: RuntimeWarning: invalid value encountered in power", "\n  \"\"\"", "\n\n", "但是当我将程序中的Z = np.cos((X**3+Y**3)**(1/3))改成Z = np.cos((X**2+Y**2)**(1/3))，程序就能正常运行，请问各位这是怎么回事啊？\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;a&amp;#61;np.arange(2)&amp;#61;[0,1]&lt;br /&gt;b&amp;#61;np.arange(3,5)&amp;#61;[3,4]&lt;br /&gt;np.lexsort([a,b])&amp;#61;[0,1]&lt;br /&gt;np.lexsort是对b先进行排序&amp;#xff0c;排序好的索引有相同的再按a的顺序进行排序&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"https://blog.csdn.net/Mxeron/article/details/113405566\" id=\"textarea_1657675721258_1657675818445_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/Mxeron/article/details/113405566&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"https://blog.csdn.net/weixin_38145317/article/details/90370558\" id=\"textarea_1657675721258_1657675818445_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_38145317/article/details/90370558&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["a=np.arange(2)，b=np.arange(3,5)，print(np.lexsort([a,b]))的输出结果是()。", ["a=np.arange(2)，b=np.arange(3,5)，print(np.lexsort([a,b]))的输出结果是()。"]], "Tag": "算法设计"}
{"Answer": "作用：求两个数组相同的个数。\r\n这段代码可以简单的求IOU，利用元素个数求取。当然正常的做法是按照区域求取。", "Konwledge_Point": "应对NP完全问题", "Question": ["np.sum(np.array(test_labels)==np.array(test_labels_copy)）求解释代码意思", ["np.sum(np.array(test_labels)==np.array(test_labels_copy))", "\n有大佬能解释一下这行代码的意思吗？感激不尽"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;NumPy source code can be tricky to navigate, because it has so many functions for so many data types. You can find the C-level source code for the absolute value function in the file &lt;a href=\"https://github.com/numpy/numpy/blob/v1.16.1/numpy/core/src/umath/scalarmath.c.src#L505-L554\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;scalarmath.c.src&lt;/code&gt;&lt;/a&gt;. This file is actually a template with function definitions that are later replicated by the build system for several data types. Note each function is the \"kernel\" that is run for each element of the array (looping through the array is done somewhere else). The functions are always called &lt;code&gt;&amp;lt;name of the type&amp;gt;_ctype_absolute&lt;/code&gt;, where &lt;code&gt;&amp;lt;name of the type&amp;gt;&lt;/code&gt; is the data type it applies to and is generally templated. Let's go through them.&lt;/p&gt;\n\n&lt;pre class=\"lang-c prettyprint-override\"&gt;&lt;code&gt;/**begin repeat\n * #name = ubyte, ushort, uint, ulong, ulonglong#\n */\n\n#define @name@_ctype_absolute @name@_ctype_positive\n\n/**end repeat**/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This one is for unsigned types. In this case, the absolute value is the same as &lt;a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.positive.html\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;np.positive&lt;/code&gt;&lt;/a&gt;, which just copies the value without doing anything (it is what you get if you have an array &lt;code&gt;a&lt;/code&gt; and you do &lt;code&gt;+a&lt;/code&gt;).&lt;/p&gt;\n\n&lt;pre class=\"lang-c prettyprint-override\"&gt;&lt;code&gt;/**begin repeat\n * #name = byte, short, int, long, longlong#\n * #type = npy_byte, npy_short, npy_int, npy_long, npy_longlong#\n */\nstatic void\n@name@_ctype_absolute(@type@ a, @type@ *out)\n{\n    *out = (a &amp;lt; 0 ? -a : a);\n}\n/**end repeat**/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This one is for signed integers. Pretty straightforward.&lt;/p&gt;\n\n&lt;pre class=\"lang-c prettyprint-override\"&gt;&lt;code&gt;/**begin repeat\n * #name = float, double, longdouble#\n * #type = npy_float, npy_double, npy_longdouble#\n * #c = f,,l#\n */\nstatic void\n@name@_ctype_absolute(@type@ a, @type@ *out)\n{\n    *out = npy_fabs@c@(a);\n}\n/**end repeat**/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is for floating-point values. Here &lt;code&gt;npy_fabsf&lt;/code&gt;, &lt;code&gt;npy_fabs&lt;/code&gt; and &lt;code&gt;npy_fabsl&lt;/code&gt; functions are used. These are declared in &lt;a href=\"https://github.com/numpy/numpy/blob/v1.16.1/numpy/core/include/numpy/npy_math.h\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;npy_math.h&lt;/code&gt;&lt;/a&gt;, but defined through templated C code in &lt;a href=\"https://github.com/numpy/numpy/blob/v1.16.1/numpy/core/src/npymath/npy_math_internal.h.src#L455-L471\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;npy_math_internal.h.src&lt;/code&gt;&lt;/a&gt;, essentially calling the &lt;a href=\"https://en.cppreference.com/w/c/numeric/math/fabs\" rel=\"nofollow noreferrer\"&gt;C/C99 counterparts&lt;/a&gt; (unless C99 is not available, &lt;a href=\"https://github.com/numpy/numpy/blob/v1.16.1/numpy/core/src/npymath/npy_math_internal.h.src#L353-L396\" rel=\"nofollow noreferrer\"&gt;in which case &lt;code&gt;fabsf&lt;/code&gt; and &lt;code&gt;fabsl&lt;/code&gt; are emulated with &lt;code&gt;fabs&lt;/code&gt;&lt;/a&gt;). You might think that the previous code should work as well for floating-point types, but actually these are more complicated, since they have things like NaN, infinity or signed zeros, so it is better to use the standard C functions that deal with everything reliably.&lt;/p&gt;\n\n&lt;pre class=\"lang-c prettyprint-override\"&gt;&lt;code&gt;static void\nhalf_ctype_absolute(npy_half a, npy_half *out)\n{\n    *out = a&amp;amp;0x7fffu;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is actually not templated, it is the absolute value function for &lt;a href=\"https://en.wikipedia.org/wiki/Half-precision_floating-point_format\" rel=\"nofollow noreferrer\"&gt;half-precision floating-point values&lt;/a&gt;. Turns out you can change sign by just doing that bitwise operation (set the first bit to 0), since half-precision is simpler (if more limited) than other floating-point types (it's usually the same for those, but with special cases).&lt;/p&gt;\n\n&lt;pre class=\"lang-c prettyprint-override\"&gt;&lt;code&gt;/**begin repeat\n * #name = cfloat, cdouble, clongdouble#\n * #type = npy_cfloat, npy_cdouble, npy_clongdouble#\n * #rtype = npy_float, npy_double, npy_longdouble#\n * #c = f,,l#\n */\nstatic void\n@name@_ctype_absolute(@type@ a, @rtype@ *out)\n{\n    *out = npy_cabs@c@(a);\n}\n/**end repeat**/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This last one is for complex types. These use &lt;code&gt;npy_cabsf&lt;/code&gt;, &lt;code&gt;npycabs&lt;/code&gt; and &lt;code&gt;npy_cabsl&lt;/code&gt; functions, again declared in &lt;a href=\"https://github.com/numpy/numpy/blob/v1.16.1/numpy/core/include/numpy/npy_math.h\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;npy_math.h&lt;/code&gt;&lt;/a&gt; but in this case template-implemented in &lt;a href=\"https://github.com/numpy/numpy/blob/v1.16.1/numpy/core/src/npymath/npy_math_complex.c.src#L1776-L1789\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;npy_math_complex.c.src&lt;/code&gt;&lt;/a&gt; using &lt;a href=\"https://en.cppreference.com/w/c/numeric/complex/cabs\" rel=\"nofollow noreferrer\"&gt;C99 functions&lt;/a&gt; (unless that is not available, in which case it is &lt;a href=\"https://github.com/numpy/numpy/blob/v1.16.1/numpy/core/src/npymath/npy_math_complex.c.src#L153-L159\" rel=\"nofollow noreferrer\"&gt;emulated with &lt;code&gt;np.hypot&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy：np.abs到底是如何工作的？", ["\n\n", "I'm trying to implement my own absolute function for gonum dense vectors in Go. I'm wandering if there's a better way of getting the absolute value of an array than squaring and then square rooting?", "\n\n", "My main issue is that I've had to implement my own element wise Newtonian square-root function on these vectors and there's a balance between implementation speed and accuracy. If I could avoid using this square-root function I'd be happy.", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;运行下就知道了&lt;br /&gt;输出结果是 [0.5 2.5]&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/240153646756113.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import numpy as np\n\n&lt;span class=\"hljs-attribute\"&gt;x&lt;/span&gt;&amp;#61;np.arange(4).reshape(2,2)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(np.mean(x,&lt;span class=\"hljs-attribute\"&gt;axis&lt;/span&gt;&amp;#61;1))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["x=np.arange(4).reshape(2,2)，print(np.mean(x,axis=1))的输出结果是（）", ["x=np.arange(4).reshape(2,2)，print(np.mean(x,axis=1))的输出结果是（）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;将图片保存为png格式就可以了&amp;#xff0c;jpg使用的一种失真压缩标准方法&amp;#xff0c;多次上传下载jpg图片会逐渐失真&amp;#xff0c;这也是为什么两次数据矩阵不一样的缘故&amp;#xff0c;而png则是无损的压缩方式&amp;#xff0c;不会出现上述情况&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy.array()读取图片不准确问题", ["需求：", "将信息按像素存储在图片里，再完整地读出来（矩阵、图片互转）", "\n", "代码：", "\n", "    # 随机生成一个", "3", "*", "3", "的矩阵,保存到图片里\n    ", "data", " = np.random.randint(1, 255, (3, 3, 3), dtype='uint8')", "\n    print(", "\"image1: \"", ",", "data", ")", "\n    im = ", "Image", ".fromarray(", "data", ")", "\n    im.save(", "\"picture1.jpg\"", ")\n\n    # 再读出来\n    im = ", "Image", ".open(", "\"picture1.jpg\"", ")\n    ", "data", " = np.array(", "im", ")", "\n    print(", "\"image2: \"", ",", "data", ")", "\n\n    # 为了直观对比，再写入新图片\n    im = ", "Image", ".fromarray(", "data", ")", "\n    im.save(", "\"picture2.jpg\"", ")\n", "\n", "结果：", "两次print的矩阵天差地别！", "两次的图片仔细看能发现差别", "\n", "其他尝试：", "\n", "将上述第一行代码换成：", "\n", " ", "data", " = np.full((", "3", ",", "3", ",", "3", "),", "255", ",dtype='uint8')\n ", "data2", " = np.zeros((", "3", ",", "3", ",", "3", "),dtype='uint8')\n ", "data", " = np.concatenate((data,data2),axis = ", "1", ")\n", "\n", "结果如下：", "读取的值不准确", "\n", "将上述读取图片代码换成：", "\n", " ", "im", " = Image.", "open", "(", "\"picture1.jpg\"", ").convert(", "'RGB'", ")\n ", "for", " i in ", "range", " (", "0", ",", "3", "):\n     ", "for", " ", "j", " in ", "range", " (", "0", ",", "3", "):\n         ", "print", "(", "im", ".getpixel((i, ", "j", ")))\n", "\n", "同样不行", "\n", "将上述读取图片代码换成：", "\n", "im = cv2.cvt", "Color(", "np", ".", "array", "(", "im", ")", ",cv2.COLOR_RGB2BGR)\n", "\n", "同样不行，结果跟直接np.array()一样，说明可能问题就出在np.array()上", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第一个导入的是np&amp;#xff0c;使用要加上np&amp;#xff0c;比如要np.int32;&lt;br /&gt;第二个相当于from numpy import int32,double&amp;#xff0c;float16(...),所以可以直接使用int32&amp;#xff0c;float16等等&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么import numpy as np和from numpy import *在定义数组时会有差异呢", ["\n", "为什么import numpy as np和from numpy import *在定义数组时会有差异呢。", "import numpy as np 定义np.array时输入dtyp(dtype)不能自动补全。", "而from numpy import * 定义数组array(),就能自动补全", "有没有朋友指点一下"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;数组&amp;#xff0c;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/010571137236130.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["np.mgrid[-1:1 : 2j][:, np.newaxis]运算结果是啥", ["np.mgrid[-1:1 : 2j][:, np.newaxis]的运算结果是啥 用到了python的numpy库"]], "Tag": "算法设计"}
{"Answer": "就在第一幅图头导入numpy模块，没错的。\r\n还是行不通的原因应该是：之前使用MyTransformer时，会在对应目录下生成一个对应的缓存文件，下次调用的时候会直接调用该缓存文件，\r\n所以你即使你改过源码，还是没用的，删除掉机器学习实践目录下MyTransformer模块的缓存文件就ok了。", "Konwledge_Point": "应对NP完全问题", "Question": ["调用另一个ipynb中的函数，NameError: name 'np' is not defined", ["在MyTransformer.ipynb中定义了一个Class", "\n在另外一个ipynb中导入该文件，并调用该Class中定义的transform函数报错", "\n第二个图片的ipynb在上面导入了 numpy", "\n\n", "求大神帮忙看看什么问题"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I just found out that there is nothing like np.where() in gocv. \nAll I have to do is:\n1. get []byte using Mat.ToBytes()\n2. writing a for loop to check each pixel in []byte and changing it if meet the condition.\n3. get Mat from gocv.NewMatFromBytes()&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["在gocv中是否有类似python中的np.where（）的类似功能？", ["\n\n", "Is there any similar function in Gocv like np.where() in Python? I want to specify some specific pixel values to 0, and others to 255. As follows, in Python I can do:", "\n\n", "        img = cv2.imread(\"test.png\", cv2.IMREAD_GRAYSCALE)\n        img_ = np.where(img == 144 , img*0, np.where(img == 170 , img*0, np.where(img == 178 , img*0, np.where(img == 187 , img*0, 255))))\n", "\n\n", "the pixel values which are 187, 178, 170, 144 will be set to 0, and others to 255. How can I do this job in Golang with Gocv?", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;删除线表达的是函数在未来的版本的中会被弃用,鼠标悬停会有对应的提示,会提示你目前推荐的方式&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["np.matrix在Python中有取消线无法使用怎么办", ["np.matrix在Python中添加", "import numpy as np", "import xlrd的情况下依然显示有取消线无法使用怎么办"]], "Tag": "算法设计"}
{"Answer": "![图片说明](https://img-ask.csdn.net/upload/201908/05/1564983890_378193.png)\r\n-2147483648是32位系统里int类型的下界\r\nnp.nan是浮点数，而arange生成的array里是整数。\r\n应该是整型转成浮点型出问题了", "Konwledge_Point": "应对NP完全问题", "Question": ["python新手 np.nan赋值后显示具体数字", ["\n不知道怎么回事啊"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;升级sklearn和numpy 到新版本&amp;#xff0c;经测试版本分别为0.24.2 和1.21.2运行正常&amp;#xff0c;没有弃用提示信息。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["在一个py文件中导入一个算法库，然后运行np.array()就出现如下警告，怎么解决求解？（如果不导入算法库，只导入numpy就不会有警告）", ["from sklearn", ".neighbors", " import NearestNeighbors\nimport numpy as np\n\nX = np", ".array", "(", "[[-1, -1]", ", ", "[-2, -1]", ", ", "[-3, -2]", ", ", "[1, 1]", ", ", "[2, 1]", ", ", "[3, 2]", "])\n", "print", "(X)", "\n", "\n", "运行结果：", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:30: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  method='lar', copy_X=True, eps=np.finfo(np.float).eps,", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:167: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  method='lar', copy_X=True, eps=np.finfo(np.float).eps,", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:284: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  eps=np.finfo(np.float).eps, copy_Gram=True, verbose=0,", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:862: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1101: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1127: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  eps=np.finfo(np.float).eps, positive=False):", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1362: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1602: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1738: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "  eps=np.finfo(np.float).eps, copy_X=True, positive=False):", "D:\\Program Files\\Anaconda\\lib\\site-packages\\sklearn\\decomposition\\online_lda.py:29: DeprecationWarning: ", "np.float", " is a deprecated alias for the builtin ", "float", ". To silence this warning, use ", "float", " by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ", "np.float64", " here.", "Deprecated in NumPy 1.20; for more details and guidance: ", "\n  ", "NumPy 1.20.0 Release Notes — NumPy v1.22.dev0 Manual", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "\n    ", "\n  ", "\n", "\n", "EPS", " = np.finfo(np.float).eps\n", "[[-1 -1]", "\n ", "[-2 -1]", "\n ", "[-3 -2]", "\n ", "[ 1  1]", "\n ", "[ 2  1]", "\n ", "[ 3  2]]", "\n", "\n", "Process finished with exit code 0"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;multiply能这样接受三个参数么&lt;br /&gt;你这样写是不是只是前两个矩阵做了对应元素的相乘的操作&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中np.dot与np.multiply 的使用问题", ["python中np.dot与np.multiply 的使用问题", "三个矩阵相乘，两个是单位矩阵，另一个不是单位矩阵，但为什么得到的结果还是个单位矩阵？", "我试了试使用np.dot与np.multiply得到的都是这个结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;要你的电脑里面有这个包呐&amp;#xff0c;numpy好像是拓展包&amp;#xff0c;要你自己下的来着&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么我输入import numpy as np会报错？说电脑中不存在numpy 这个模块？", []], "Tag": "算法设计"}
{"Answer": "用photoshop打开png看下你的图像有没有alpha通道，也就是有没有透明图层。", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy.array()打开图片时像素点表示问题", ["在应用numpy.array()打开图片", "\n代码如下：", "\n\n", "i = Image.open('images/numbers/0.1.png')\niar = np.array(i, dtype='int64')\nprint(iar)\n", "\n\n", "输出结果中大部分为", "\n[[[255 255 255 255]", "\n ......", "\n (即alpha数值有表示出来)", "\n 而另一张图片，可能就会输出", "\n[[[255 255 255]", "\n......", "\n(即alpha数值没有表示出来)", "\n想请教一下这是为什么呢，有没有什么办法可以把它们统一起来吗？"]], "Tag": "算法设计"}
{"Answer": "np.random.random((a,b))     （a,b）是形状   返回的是 a行 b列的array          每个元素的取值服从[0.0, 1.0)的均匀分布\r\n例如 \r\n\r\n\r\n```\r\nnp.random.random((3, 4))\r\narray([[ 0.08968149,  0.73049827,  0.90173847,  0.052132  ],\r\n             [ 0.89645737,  0.09354475,  0.85583081,  0.96655849],\r\n             [ 0.43413746,  0.12536754,  0.94566403,  0.07564477]])\r\n \r\n```\r\n\r\n\r\n\r\n\r\n[参考自](https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.random.html \"\")", "Konwledge_Point": "应对NP完全问题", "Question": ["python中的Random问题", ["np.random.random((layers[i-1]+1,layers[i]+1))其中layers是数组。求问这句话的语法是什么？没看到有", "\nrandom.random的这种函数形式哇？求解"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;import numpy as np\nn &amp;#61; int(&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;())\nx &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.linspace&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*np&lt;span class=\"hljs-selector-class\"&gt;.pi&lt;/span&gt;, n)\ny &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.sin&lt;/span&gt;(x)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(y)&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python 利用numpy求sin函数值", ["\n", "我的解答", "import numpy as np", "\n", "x = np.linspace(0, 2*np.pi, 10)", "\n", "对数组x中的每个元素进行正弦计算，返回一个同样大小的新数组", "\n", "y = np.sin(x)", "print(y", "不正确怎么改"]], "Tag": "算法设计"}
{"Answer": "题主你的报错原因是map函数的第二个参数应该是列表，而你传入的四列数据相当于是一个二维的dataframe，这样每列就相当于一个Series,而函数接受的参数应该是四个数字组成的列表，也就是一行数据，就是说你一次性传入所有的数据是不行的。必须一行一行的计算，每行数据计算得到一个距离，针对你的问题，我们可以使用pandas的apply函数每次传一行数据进入函数，具体可以将代码改成如下（题主你的sin cos sqrt函数都没有加np.这个我不知道是为什么，应该是要加的）：\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\n\r\ndef haversine(df):   # 经度1，纬度1，经度2，纬度2\r\n    \"\"\"函数作用：计算两个经纬度之间的距离\"\"\"\r\n    # 将十进制度数转化为弧度\r\n\t\t# df.tolist()作用是将传入的一行数据转化为列表\r\n    lon1, lat1, lon2, lat2 = map(np.radians, df.tolist())\r\n    # haversine公式\r\n    dlon = lon2 - lon1\r\n    dlat = lat2 - lat1\r\n    a = np.sin(dlat/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon/2)**2\r\n    c = 2 * a * np.sin(np.sqrt(a))\r\n    r = 6371  # 地球平均半径，单位为公里\r\n    return c * r * 1000\r\n\r\n\r\ntest_data = pd.read_excel(\"test.xlsx\")\r\n# 这里的apply函数作用是将dataframe中每行的四个值传入函数haversine，然后计算距离，这样每行数据能返回一个距离\r\ntest_data[\"距离（米）\"] = test_data[['经度', '纬度', 'Longitude', 'Latitude']].apply(haversine, axis=1)\r\nprint(test_data)", "Konwledge_Point": "应对NP完全问题", "Question": ["python pandas用函数算距离时报错", ["在网上copy来的一个算经纬度的方法，但在实际操作运行到  lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2]) 的时候到报错：”TypeError: cannot convert the series to <class 'float'》，显示series不能转换为float，请问下各位大佬这个问题怎么解决  需要怎么修改脚本。", "\n\n", "import numpy as np\nimport pandas as pd \n\ntest_data = pd.DataFrame(pd.read_excel(\"test.xlsx\"))\n\ndef haversine(lon1, lat1, lon2, lat2):   # 经度1，纬度1，经度2，纬度2 \n  \"\"\"函数作用：计算两个经纬度之间的距离\"\"\"\n  # 将十进制度数转化为弧度\n  lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n\n  # haversine公式\n  dlon = lon2 - lon1 \n  dlat = lat2 - lat1 \n  a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n  c = 2 * asin(sqrt(a)) \n  r = 6371 # 地球平均半径，单位为公里\n  return c * r * 1000\n\ntest_data[\"距离（米）\"] = test_data.eval('@haversine(经度,纬度,Longitude,Latitude)')\n\n\n\"\"\"\n表内容举例：\nname    经度  纬度  Longitude   Latitude\nA   113.545761  23.106667   113.09461   23.39367\nB   113.545761  23.106667   113.173833  23.336054\nC   113.545761  23.106667   113.1799    23.43946\nD   113.545761  23.106667   113.1975278 23.38591667\nE   113.545761  23.106667   113.1975278 23.38591667\nF   113.545761  23.106667   113.219664  23.100377\nG   113.545761  23.106667   113.219664  23.100377\nH   113.545761  23.106667   113.22253   23.18483\nI   113.545761  23.106667   113.22253   23.18483\n\n\"\"\"\n", "\n\n", "程序运行到"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np\n&amp;gt;&amp;gt;&amp;gt; x &amp;#61; np.array([1,2,3,4,5,6])\n&amp;gt;&amp;gt;&amp;gt; r &amp;#61; np.random.choice(np.arange(x.size), 3, replace&amp;#61;False) # 从x中随机无重复地抽取3个数\n&amp;gt;&amp;gt;&amp;gt; r # 这次选中的是0&amp;#xff0c;2&amp;#xff0c;4\narray([0, 2, 4])\n&amp;gt;&amp;gt;&amp;gt; x[r] &amp;#43;&amp;#61; 1 # 选中的数字加1\n&amp;gt;&amp;gt;&amp;gt; x\narray([2, 2, 4, 4, 6, 6])&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何让一个np数组中随机几个数字+1", ["比如我现在有[1,2,3,4,5,6]这个数组，", "\n\n", "如何将该数组中随机n个数字都+1，", "\n\n", "比如将原有数组变成[2,2,4,4,5,6],", "\n\n", "这里面就随机到了第0第2个数加一了。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如有帮助请给个采纳&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np\n&amp;gt;&amp;gt;&amp;gt; np.linspace(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;, num&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\narray([&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;.        , &lt;span class=\"hljs-number\"&gt;1.88888889&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2.77777778&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3.66666667&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4.55555556&lt;/span&gt;,\n       &lt;span class=\"hljs-number\"&gt;5.44444444&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6.33333333&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7.22222222&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8.11111111&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;.        ])\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["使用np.linspace函数在1-9区间内生成10个包含9的等间隔数，不显示间隔", ["使用np.linspace函数在1-9区间内生成10个包含9的等间隔数，不显示间隔"]], "Tag": "算法设计"}
{"Answer": "labels=np.empty((0,5))", "Konwledge_Point": "应对NP完全问题", "Question": ["python中numpy格式数组维度", ["##python中numpy格式数组维度问题", "\n\n", "labels = np.empty((0,4))\nxml_names = os.listdir(path)\nfor xml_name in xml_names:\n        image_path, label = parse_xml(os.path.join(path, xml_name))\n        print(label)\n        label = np.array(label)\n        print(label)\n        labels = np.append(labels, label, axis=0)\n", "\n\n", "label是这个格式：", "\n\n", "[[128 230 188 328   0]", "\n\n", "[297 199 366 299   0]]", "\n\n", "然后和labels   append的时候报错，提示维度不匹配，请问为什么"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/315595669136113.png\" /&gt;&lt;/p&gt;&lt;br /&gt;这个是取倒数第7个数到倒数第一个数&amp;#xff0c;所以输出这个&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["a=np.arange(12)  a[-7:-1]", ["a=np.arange(12)", "\n", "a[-7:-1]", "这个结果是多少"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;运行下就知道了&lt;br /&gt;输出结果是[7 5 3]&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n\n&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;np.arange(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;][::-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/992442646756110.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["a=np.arange(1,10)，print(a[2:8:2][::-1])输出结果是（）", ["a=np.arange(1,10)，print(a[2:8:2][::-1])输出结果是多少？[7，5，3]", "为啥呢？为啥能输出三个数？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://zhuanlan.zhihu.com/p/148743842\" id=\"textarea_1629540531111_1629540575159_0\" class=\"md_link_card\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n  &lt;span class=\"md_link_title\"&gt;Pandas-df.apply() - 知乎&lt;/span&gt;\n  &lt;span class=\"md_link_desc\" style=\"\"&gt;批量操作&amp;#xff1a;df.apply()关于可以在数据表上进行批量操作的函数&amp;#xff1a; &amp;#xff08;1&amp;#xff09;有些函数是元素级别的操作&amp;#xff0c;比如求平方 np.square()&amp;#xff0c;针对的是每个元素。有些函数则是对元素集合级别的操作&amp;#xff0c;这里元素集合指的是以列为单位&amp;#xff0c;或…&lt;/span&gt;\n  &lt;span class=\"md_flex_card\"&gt;\n  &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://static.zhihu.com/heifetz/favicon.ico\" /&gt;\n    &lt;span class=\"flex-1\"&gt;\n      &lt;span class=\"md_link_url\"&gt;https://zhuanlan.zhihu.com/p/148743842&lt;/span&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;&lt;/a&gt;&lt;br /&gt;df.apply参数规定只写函数名即可&amp;#xff0c;调用的函数参数写在后面&lt;br /&gt;有帮助望采纳&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么np.sum后没有加（）？", []], "Tag": "算法设计"}
{"Answer": "&lt;ol&gt;&lt;li&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  [7,5,3]&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  1&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  5s&lt;/span&gt;&lt;/li&gt;&lt;li&gt;[&amp;#39;toyota&amp;#39;, &amp;#39;subaru&amp;#39;, &amp;#39;bmw&amp;#39;, &amp;#39;audi&amp;#39;]&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;[&lt;span class=\"hljs-symbol\"&gt;&amp;#39;bmw&lt;/span&gt;&amp;#39;, &lt;span class=\"hljs-symbol\"&gt;&amp;#39;audi&lt;/span&gt;&amp;#39;, &lt;span class=\"hljs-symbol\"&gt;&amp;#39;toyota&lt;/span&gt;&amp;#39;, &lt;span class=\"hljs-symbol\"&gt;&amp;#39;subaru&lt;/span&gt;&amp;#39;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python函数问题，人工智能问题，请给出解答过程", ["1、a=np.arange(1,10)，print(a[2:8:2][::-1])输出结果是（）", "\n", "2、np.exp(x).round(5)的结果是2.71828，x的值是（）", "\n", "3、为了充分发挥GPU算力，需要尽可能多的将任务交给GPU执行。现在有一个任务数组T=[1,2,3,4,5]，数组元素表示在这1秒内新增的任务个数，且每秒都有新增任务，直到数结束。假设GPU最多一次执行N=3个任务，一次执行耗时1秒，在保证GPU尽量不空闲的情况下，一个GPU最少需要多长时间执行完成？", "\n", "4、在Python中，令cars=['bmw','audi','toyota','subaru']", "运行cars.sort(reverse=True)后，cars的值为（）；运行sorted(cars,reverse=True)后，cars的值为（）", "\n", "请给出解答过程！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你说的是大数因式分解&amp;#xff1f;大质数的判定是NP Hard问题。这个是现代密钥算法体系的基石。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["大数分解问题是NP问题吗？", ["现在对于大数分解问题是否是NP问题，非专业人员依据NP问题的定义回答是。资深人员在小心地寻找公式确定性的证明。请问这种证明己经有了吗？"]], "Tag": "算法设计"}
{"Answer": "numpy.ndarray 没有append这个方法\r\n试试这个命令\r\nprint(np.concatenate((a,b),axis = 0))", "Konwledge_Point": "应对NP完全问题", "Question": ["想把两个13维数组合并成一个26维数组，用np.append之后报错，用extend和append好像也不行，为什么？", ["Expected binary or unicode string, got tf.Tensor 'Relu_30:0' shape=(1, 13) dtype=float32", "\n\n", "我是在用tensorflow把两个网络各自生成的13维数组合并之后输入到另一个神经网络里面时遇到的问题，大家都是怎么解决的？", "\n\n", "Weights0 = tf.Variable(tf.random_normal([12, 13]))", "\nbiases0 = tf.Variable(tf.zeros([1, 13]) + 0.1)", "\nWx_plus_b0 = tf.matmul(xs0, Weights0) + biases0", "\nl0 = tf.nn.relu(Wx_plus_b0)", "\n\n", "Weights1 = tf.Variable(tf.random_normal([12, 13]))", "\nbiases1 = tf.Variable(tf.zeros([1, 13]) + 0.1)", "\nWx_plus_b1 = tf.matmul(xs1, Weights1) + biases1", "\nl1 = tf.nn.relu(Wx_plus_b1)", "\n\n", "L1 = np.append(l0,l1)", "\n\n", "隐层2", "\n\n", "Weights2 = tf.Variable(tf.random_normal([26, 10]))", "\nbiases2 = tf.Variable(tf.zeros([1, 10]) + 0.1)", "\nWx_plus_b2 = tf.matmul(L1, Weights2) + biases2", "\nl2 = tf.nn.relu(Wx_plus_b2)"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好,这里a是rehshape成了(2,3)的形式&amp;#xff0c;使用a[i]应该是不行的&amp;#xff0c;可以调试看看indix的结构是什么&amp;#xff0c;然后进行调整&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy的argwhere,索引的使用错误", ["刚学习玩numpy的argwhere的用法,根据字面意思返回的应当是符合条件的索引即", "\n", "a", " = np", ".arange", "(", "6", ")", ".reshape", "(", "2", ",", "3", ")\nindix = np", ".argwhere", "(a>", "3", ")\n\n#输出的应该是", "[1,1]", ",", "[1,2]", "\n", "\n", "问题是在已知索引的情况下如何根据索引来寻找到对应的元素", "\n", "import numpy as np\n\n", "a", " = np", ".arange", "(", "6", ")", ".reshape", "(", "2", ",", "3", ")\nindix = np", ".argwhere", "(a>", "3", ")\n", "for", " ", "i", " ", "in", " indix:\n    print(i)\n    print(", "a", "[i]", ")\n\n", "\n", "结果报错，正常情况下应当如何根据索引寻找元素？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;return最为常见&amp;#xff0c;十分简单&amp;#xff0c;其返回运行一次函数所得到的结果&amp;#xff0c;且在return语句之后python解释器会直接跳出函数&amp;#xff0c;函数剩下的其它所有语句或者循环都不再被运行。&lt;br /&gt;yield是返回一个生成器(generator)对象。python中的生成器&amp;#xff0c;可以使用next()来逐个获取yield返回的值。同时运行机制为在运行包含有生成器的函数的时候&amp;#xff0c;只要碰到yield就暂停&amp;#xff0c;这时候会保存当前运行的信息&amp;#xff0c;也就是之前所产生的变量等都不会改变。&lt;br /&gt;yileld和return的区别就是一个函数不在运行&amp;#xff0c;一个函数暂停运行&amp;#xff0c;用next()方法继续运行&amp;#xff0c;看自己的需求&lt;br /&gt;在上面的代码中&amp;#xff0c;换为return&amp;#xff0c;返回的是遍历完以后的整个运行结果&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["yield 实现什么功能？", ["请问一下，这里的yied实现什么功能呢？     两个yield np.array(imgs_list), np.array(labels_list)都返回到哪里的呢？", "可以不用yield么？", "\n", "# 定义数据生成器，返回批次数据\ndef data_generator():\n    imgs_list = []\n    labels_list = []\n    ", "for", " i ", "in", " index_list:\n        # 将数据处理成希望的类型\n        img = ", "np", ".", "array", "(imgs[i]).astype('float32')\n        ", "label", " = ", "np", ".", "array", "(", "labels", "[i]).astype('float32')\n        imgs_list.", "append", "(img) \n        labels_list.", "append", "(", "label", ")\n        ", "if", " len(imgs_list) == BATCHSIZE:\n            # 获得一个batchsize的数据，并返回\n            yield ", "np", ".", "array", "(imgs_list), ", "np", ".", "array", "(labels_list)\n            # 清空数据读取列表\n            imgs_list = []\n            labels_list = []\n\n    # 如果剩余数据的数目小于BATCHSIZE，\n    # 则剩余数据一起构成一个大小为len(imgs_list)的mini-", "batch", "\n    ", "if", " len(imgs_list) > ", "0", ":\n        yield ", "np", ".", "array", "(imgs_list), ", "np", ".", "array", "(labels_list)\n    ", "return", " data_generator\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;np.append(b81[i][&amp;#39;标题&amp;#39;])  这个np是什么&amp;#xff1f; 不会是numpy吧&amp;#xff1f; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["列表添加项时出错：TypeError: _append_dispatcher() missing 1 required positional argument: 'values'", ["代码：\nnb = ", "[", "'离开'", "]", "\nb81 = c寻找邮件({", "'发件人'", ":", "'老吴'", "})\n", "print", "(b81[", "0", "][", "'标题'", "])", "\n", "i", " = ", "0", "\n", "for", " ", "i", " ", "in", " range(len(b81)):\n    np", ".append", "(b81", "[i]", "[", "'标题'", "]", ")\n    a1", ".buttonbox", "(", "'我的邮箱'", ",np)\n\n", "\n", "报错：\nnp.", "append", "(b81[i][", "'标题'", "])\n  File ", "\"<__array_function__ internals>\"", ", ", "line", " ", "4", ", in ", "append", "\nTypeError: _append_dispatcher() missing ", "1", " required positional ", "argument", ": ", "'values'", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;有一种pandas的方法可以实现&amp;#xff08;你问的应该是rank&amp;#xff09;,需要先转换为dataframe&amp;#xff0c;再用rank解决&amp;#xff1a;&lt;br /&gt;arr&amp;#61;np.array(pd.DataFrame(array).rank(axis&amp;#61;0,method&amp;#61;&amp;#39;min&amp;#39;))&lt;br /&gt;这是从1-n的排序&amp;#xff0c;如果想从0开始&amp;#xff0c;后面直接减去一即可&lt;br /&gt;目前我还没有搜查到numpy有直接的方法&amp;#xff0c;需要再查一下&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["使用numpy的argsort函数对二维数组按行（列）排序，返回排序索引时出错", ["问题遇到的现象和发生背景", "\n", "版本：numpy    1.22.3    。使用numpy的argsort函数对二维数组按行（列）排序，返回排序索引时出错", "\n", "问题相关代码，请勿粘贴截图", "\n", ">>> array = ", "[[0, 1, 2, 3, 4, 5], \n         [444, 4, 8, 3, 1, 10], \n         [2, 5, 8, 999, 1, 4]]", "\n>>> np.argsort(array, axis=", "0", ")\narray(", "[[0, 0, 0, 0, 1, 2],\n       [2, 1, 1, 1, 2, 0],\n       [1, 2, 2, 2, 0, 1]]", ", dtype=int64)\n", "\n", "运行结果及报错内容", "\n", "\n", "没有报错，但是，第五、六列按列排序的索引有很明显的问题", "\n", "我的解答思路和尝试过的方法", "\n", "我的思路，以第六列为例：", "\n", "\n", "我尝试过转置之后一行一行地执行再拼接，但仍然有问题", "\n", "我想要达到的结果", "\n", "返回正确的排序索引"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;倒数第二行&amp;nbsp;im2=Image.fromarray(a2,np.astype(&amp;quot;uint8&amp;quot;))&lt;/p&gt;\n\n&lt;p&gt;fromarray后面指的是Mode参数，比如&amp;#39;rgb&amp;#39;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["module 'numpy' has no attribute 'astype'", ["源代码：", "\n\n", "\n", "from PIL import Image\nimport numpy as np\nvec_el=np.pi/2.2\nvec_az=np.pi/4\ndepth=10\nim=Image.open(\"D:/视频源/graphics/python/aniya.jpg\").convert(\"L\")\na=np.asarray(im).astype(\"float\")\ngrad=np.gradient(a)\ngrad_x,grad_y=grad\ngrad_x=grad_x*depth/100\ngrad_y=grad_y*depth/100\ndx=np.cos(vec_el)*np.cos(vec_az)\ndy=np.cos(vec_el)*np.sin(vec_az)\ndz=np.sin(vec_el)\nA=np.sqrt(grad_x**2+grad_y**2+1)\nuni_x=grad_x/A\nuni_y=grad_y/A\nuni_z=1/A\na2=255*(dx*uni_x+dy*uni_y+dz*uni_z)\na2=a2.clip(0,255)\nim2=Image.fromarray(a2,np.astype(\"uint8\"))\nim2.save(\"draw_aniya.jpg\")", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;delimiter 参数&lt;/p&gt;\n&lt;p&gt;一旦文件被定义并打开阅读&amp;#xff0c;genfromtxt将每个非空行拆分为一个字符串序列。刚刚跳过空行或注释行。delimiter关键字用于定义拆分应如何进行。&lt;/p&gt;\n&lt;p&gt;通常&amp;#xff0c;单个字符标记列之间的间隔。例如&amp;#xff0c;逗号分隔文件&amp;#xff08;CSV&amp;#xff09;使用逗号&amp;#xff08;,&amp;#xff09;或分号&amp;#xff08;;&amp;#xff09;作为分隔符&amp;#xff1a;&lt;br /&gt;Numpy 切片操作,将从第一行&amp;#xff08;在skip_header之后&amp;#xff09;读取名称.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/350469705136155.png\" width=\"600px\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中np.genfromtxt的使用小问题", ["\nsnapshots = [\n    np.genfromtxt(", "'data/velocity0.{}.csv'", ".format(i), ", "delimiter", "=", "','", ", ", "skip_header", "=1)[:, 0]\n    ", "for", " i ", "in", " range(20, 40)\n]\n\npts = np.genfromtxt(", "'data/velocity0.20.csv'", ", ", "delimiter", "=", "','", ", ", "skip_header", "=1)[:, -3:-1]\n", "\n", "这段代码中的[:, 0]与[:, -3:-1]代表什么意思呀"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;官方给的说法是&lt;br /&gt;np.ones是生成一个矩阵&amp;#xff0c;所有值初始化为1&amp;#xff0c;&lt;br /&gt;np.empty一般大家都说是生成一个空矩阵。但是要注意这里的空不是咱们生活中理解的什么都没有的空&amp;#xff0c;是不进行初始化&amp;#xff0c;原来这块内存是什么就是什么&amp;#xff0c;不进行任何处理&amp;#xff0c;理论上可以是任何值。&amp;#xff08;当然这种操作是不应该的&amp;#xff09;&lt;/p&gt;\n&lt;p&gt;比如我在np.zero后面调用他就全是0&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/316466474856125.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/847876474856120.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;但是我直接调用empty就是随机数值&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/803757474856166.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/264147474856111.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么我的np.empty输出和np.ones一样啊？", ["为什么我的np.empty输出和np.ones一样啊？按理说np.empty不应该不赋值吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;一般情况下reset()就是重新初始化环境&amp;#xff0c;除非你需要获取初始化时产生的某些参数&amp;#xff0c;那就要有返回值&amp;#xff0c;如果仅仅是初始化的话&amp;#xff0c;完全可以不设返回值&amp;#xff0c;你这4个随机数就更没必要了&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["强化学习，gym.reset（）重置环境为什么不是返回一组为0 的数据，而是返回一定范围的数组？", ["在学习强化学习，为什么强化学习的gym.reset() 返回的是一个不为零的数组，我理解的重置不就是归零吗？ 比如", "CartPole-v0 环境。为什么def reset()那儿要返回4个-0.05到0.05的随机数呢？", "def reset(", "        self,", "        *,", "        seed: Optional[int] = None,", "        return_info: bool = False,", "        options: Optional[dict] = None,", "    ):", "        super().reset(seed=seed)", "**        self.state = self.np_random.uniform(low=-0.05, high=0.05, size=(4,))", "**        self.steps_beyond_done = None", "        if not return_info:", "            return np.array(self.state, dtype=np.float32)", "        else:", "            return np.array(self.state, dtype=np.float32), {}", "\n", "\"\"\"\nClassic cart-pole system implemented by Rich Sutton et al.\nCopied from http://incompleteideas.net/sutton/book/code/pole.c\npermalink: https://perma.cc/C9ZM-652R\n\"\"\"", "\n", "import", " math\n", "from", " typing ", "import", " ", "Optional", ", ", "Union", "\n\n", "import", " numpy ", "as", " np\n\n", "import", " gym\n", "from", " gym ", "import", " logger, spaces\n", "from", " gym.error ", "import", " DependencyNotInstalled\n\n\n", "class", " ", "CartPoleEnv", "(gym.Env[np.ndarray, ", "Union", "[", "int", ", np.ndarray]]):\n    ", "\"\"\"\n    ### Description\n\n    This environment corresponds to the version of the cart-pole problem described by Barto, Sutton, and Anderson in\n    [\"Neuronlike Adaptive Elements That Can Solve Difficult Learning Control Problem\"](https://ieeexplore.ieee.org/document/6313077).\n    A pole is attached by an un-actuated joint to a cart, which moves along a frictionless track.\n    The pendulum is placed upright on the cart and the goal is to balance the pole by applying forces\n     in the left and right direction on the cart.\n\n    ### Action Space\n\n    The action is a `ndarray` with shape `(1,)` which can take values `{0, 1}` indicating the direction\n     of the fixed force the cart is pushed with.\n\n    | Num | Action                 |\n    |-----|------------------------|\n    | 0   | Push cart to the left  |\n    | 1   | Push cart to the right |\n\n    **Note**: The velocity that is reduced or increased by the applied force is not fixed and it depends on the angle\n     the pole is pointing. The center of gravity of the pole varies the amount of energy needed to move the cart underneath it\n\n    ### Observation Space\n\n    The observation is a `ndarray` with shape `(4,)` with the values corresponding to the following positions and velocities:\n\n    | Num | Observation           | Min                 | Max               |\n    |-----|-----------------------|---------------------|-------------------|\n    | 0   | Cart Position         | -4.8                | 4.8               |\n    | 1   | Cart Velocity         | -Inf                | Inf               |\n    | 2   | Pole Angle            | ~ -0.418 rad (-24°) | ~ 0.418 rad (24°) |\n    | 3   | Pole Angular Velocity | -Inf                | Inf               |\n\n    **Note:** While the ranges above denote the possible values for observation space of each element,\n        it is not reflective of the allowed values of the state space in an unterminated episode. Particularly:\n    -  The cart x-position (index 0) can be take values between `(-4.8, 4.8)`, but the episode terminates\n       if the cart leaves the `(-2.4, 2.4)` range.\n    -  The pole angle can be observed between  `(-.418, .418)` radians (or **±24°**), but the episode terminates\n       if the pole angle is not in the range `(-.2095, .2095)` (or **±12°**)\n\n    ### Rewards\n\n    Since the goal is to keep the pole upright for as long as possible, a reward of `+1` for every step taken,\n    including the termination step, is allotted. The threshold for rewards is 475 for v1.\n\n    ### Starting State\n\n    All observations are assigned a uniformly random value in `(-0.05, 0.05)`\n\n    ### Episode Termination\n\n    The episode terminates if any one of the following occurs:\n    1. Pole Angle is greater than ±12°\n    2. Cart Position is greater than ±2.4 (center of the cart reaches the edge of the display)\n    3. Episode length is greater than 500 (200 for v0)\n\n    ### Arguments\n\n    ```\n    gym.make('CartPole-v1')\n    ```\n\n    No additional arguments are currently supported.\n    \"\"\"", "\n\n    metadata = {", "\"render_modes\"", ": [", "\"human\"", ", ", "\"rgb_array\"", "], ", "\"render_fps\"", ": ", "50", "}\n\n    ", "def", " ", "__init__", "(", "self", "):\n        self.gravity = ", "9.8", "\n        self.masscart = ", "1.0", "\n        self.masspole = ", "0.1", "\n        self.total_mass = self.masspole + self.masscart\n        self.length = ", "0.5", "  ", "# actually half the pole's length", "\n        self.polemass_length = self.masspole * self.length\n        self.force_mag = ", "10.0", "\n        self.tau = ", "0.02", "  ", "# seconds between state updates", "\n        self.kinematics_integrator = ", "\"euler\"", "\n\n        ", "# Angle at which to fail the episode", "\n        self.theta_threshold_radians = ", "12", " * ", "2", " * math.pi / ", "360", "\n        self.x_threshold = ", "2.4", "\n\n        ", "# Angle limit set to 2 * theta_threshold_radians so failing observation", "\n        ", "# is still within bounds.", "\n        high = np.array(\n            [\n                self.x_threshold * ", "2", ",\n                np.finfo(np.float32).", "max", ",\n                self.theta_threshold_radians * ", "2", ",\n                np.finfo(np.float32).", "max", ",\n            ],\n            dtype=np.float32,\n        )\n\n        self.action_space = spaces.Discrete(", "2", ")\n        self.observation_space = spaces.Box(-high, high, dtype=np.float32)\n\n        self.screen = ", "None", "\n        self.clock = ", "None", "\n        self.isopen = ", "True", "\n        self.state = ", "None", "\n\n        self.steps_beyond_done = ", "None", "\n\n    ", "def", " ", "step", "(", "self, action", "):\n        err_msg = ", "f\"", "{action!r}", " (", "{", "type", "(action)}", ") invalid\"", "\n        ", "assert", " self.action_space.contains(action), err_msg\n        ", "assert", " self.state ", "is", " ", "not", " ", "None", ", ", "\"Call reset before using step method.\"", "\n        x, x_dot, theta, theta_dot = self.state\n        force = self.force_mag ", "if", " action == ", "1", " ", "else", " -self.force_mag\n        costheta = math.cos(theta)\n        sintheta = math.sin(theta)\n\n        ", "# For the interested reader:", "\n        ", "# https://coneural.org/florian/papers/05_cart_pole.pdf", "\n        temp = (\n            force + self.polemass_length * theta_dot**", "2", " * sintheta\n        ) / self.total_mass\n        thetaacc = (self.gravity * sintheta - costheta * temp) / (\n            self.length * (", "4.0", " / ", "3.0", " - self.masspole * costheta**", "2", " / self.total_mass)\n        )\n        xacc = temp - self.polemass_length * thetaacc * costheta / self.total_mass\n\n        ", "if", " self.kinematics_integrator == ", "\"euler\"", ":\n            x = x + self.tau * x_dot\n            x_dot = x_dot + self.tau * xacc\n            theta = theta + self.tau * theta_dot\n            theta_dot = theta_dot + self.tau * thetaacc\n        ", "else", ":  ", "# semi-implicit euler", "\n            x_dot = x_dot + self.tau * xacc\n            x = x + self.tau * x_dot\n            theta_dot = theta_dot + self.tau * thetaacc\n            theta = theta + self.tau * theta_dot\n\n        self.state = (x, x_dot, theta, theta_dot)\n\n        done = ", "bool", "(\n            x < -self.x_threshold\n            ", "or", " x > self.x_threshold\n            ", "or", " theta < -self.theta_threshold_radians\n            ", "or", " theta > self.theta_threshold_radians\n        )\n\n        ", "if", " ", "not", " done:\n            reward = ", "1.0", "\n        ", "elif", " self.steps_beyond_done ", "is", " ", "None", ":\n            ", "# Pole just fell!", "\n            self.steps_beyond_done = ", "0", "\n            reward = ", "1.0", "\n        ", "else", ":\n            ", "if", " self.steps_beyond_done == ", "0", ":\n                logger.warn(\n                    ", "\"You are calling 'step()' even though this \"", "\n                    ", "\"environment has already returned done = True. You \"", "\n                    ", "\"should always call 'reset()' once you receive 'done = \"", "\n                    ", "\"True' -- any further steps are undefined behavior.\"", "\n                )\n            self.steps_beyond_done += ", "1", "\n            reward = ", "0.0", "\n\n        ", "return", " np.array(self.state, dtype=np.float32), reward, done, {}\n\n    ", "def", " ", "reset", "(", "\n        self,\n        *,\n        seed: ", "Optional", "[", "int", "] = ", "None", ",\n        return_info: ", "bool", " = ", "False", ",\n        options: ", "Optional", "[", "dict", "] = ", "None", ",\n    ", "):\n        ", "super", "().reset(seed=seed)\n        self.state = self.np_random.uniform(low=-", "0.05", ", high=", "0.05", ", size=(", "4", ",))\n        self.steps_beyond_done = ", "None", "\n        ", "if", " ", "not", " return_info:\n            ", "return", " np.array(self.state, dtype=np.float32)\n        ", "else", ":\n            ", "return", " np.array(self.state, dtype=np.float32), {}\n\n    ", "def", " ", "render", "(", "self, mode=", "\"human\"", "):\n        ", "try", ":\n            ", "import", " pygame\n            ", "from", " pygame ", "import", " gfxdraw\n        ", "except", " ImportError:\n            ", "raise", " DependencyNotInstalled(\n                ", "\"pygame is not installed, run `pip install gym[classic_control]`\"", "\n            )\n\n        screen_width = ", "600", "\n        screen_height = ", "400", "\n\n        world_width = self.x_threshold * ", "2", "\n        scale = screen_width / world_width\n        polewidth = ", "10.0", "\n        polelen = scale * (", "2", " * self.length)\n        cartwidth = ", "50.0", "\n        cartheight = ", "30.0", "\n\n        ", "if", " self.state ", "is", " ", "None", ":\n            ", "return", " ", "None", "\n\n        x = self.state\n\n        ", "if", " self.screen ", "is", " ", "None", ":\n            pygame.init()\n            pygame.display.init()\n            self.screen = pygame.display.set_mode((screen_width, screen_height))\n        ", "if", " self.clock ", "is", " ", "None", ":\n            self.clock = pygame.time.Clock()\n\n        self.surf = pygame.Surface((screen_width, screen_height))\n        self.surf.fill((", "255", ", ", "255", ", ", "255", "))\n\n        l, r, t, b = -cartwidth / ", "2", ", cartwidth / ", "2", ", cartheight / ", "2", ", -cartheight / ", "2", "\n        axleoffset = cartheight / ", "4.0", "\n        cartx = x[", "0", "] * scale + screen_width / ", "2.0", "  ", "# MIDDLE OF CART", "\n        carty = ", "100", "  ", "# TOP OF CART", "\n        cart_coords = [(l, b), (l, t), (r, t), (r, b)]\n        cart_coords = [(c[", "0", "] + cartx, c[", "1", "] + carty) ", "for", " c ", "in", " cart_coords]\n        gfxdraw.aapolygon(self.surf, cart_coords, (", "0", ", ", "0", ", ", "0", "))\n        gfxdraw.filled_polygon(self.surf, cart_coords, (", "0", ", ", "0", ", ", "0", "))\n\n        l, r, t, b = (\n            -polewidth / ", "2", ",\n            polewidth / ", "2", ",\n            polelen - polewidth / ", "2", ",\n            -polewidth / ", "2", ",\n        )\n\n        pole_coords = []\n        ", "for", " coord ", "in", " [(l, b), (l, t), (r, t), (r, b)]:\n            coord = pygame.math.Vector2(coord).rotate_rad(-x[", "2", "])\n            coord = (coord[", "0", "] + cartx, coord[", "1", "] + carty + axleoffset)\n            pole_coords.append(coord)\n        gfxdraw.aapolygon(self.surf, pole_coords, (", "202", ", ", "152", ", ", "101", "))\n        gfxdraw.filled_polygon(self.surf, pole_coords, (", "202", ", ", "152", ", ", "101", "))\n\n        gfxdraw.aacircle(\n            self.surf,\n            ", "int", "(cartx),\n            ", "int", "(carty + axleoffset),\n            ", "int", "(polewidth / ", "2", "),\n            (", "129", ", ", "132", ", ", "203", "),\n        )\n        gfxdraw.filled_circle(\n            self.surf,\n            ", "int", "(cartx),\n            ", "int", "(carty + axleoffset),\n            ", "int", "(polewidth / ", "2", "),\n            (", "129", ", ", "132", ", ", "203", "),\n        )\n\n        gfxdraw.hline(self.surf, ", "0", ", screen_width, carty, (", "0", ", ", "0", ", ", "0", "))\n\n        self.surf = pygame.transform.flip(self.surf, ", "False", ", ", "True", ")\n        self.screen.blit(self.surf, (", "0", ", ", "0", "))\n        ", "if", " mode == ", "\"human\"", ":\n            pygame.event.pump()\n            self.clock.tick(self.metadata[", "\"render_fps\"", "])\n            pygame.display.flip()\n\n        ", "if", " mode == ", "\"rgb_array\"", ":\n            ", "return", " np.transpose(\n                np.array(pygame.surfarray.pixels3d(self.screen)), axes=(", "1", ", ", "0", ", ", "2", ")\n            )\n        ", "else", ":\n            ", "return", " self.isopen\n\n    ", "def", " ", "close", "(", "self", "):\n        ", "if", " self.screen ", "is", " ", "not", " ", "None", ":\n            ", "import", " pygame\n\n            pygame.display.quit()\n            pygame.quit()\n            self.isopen = ", "False", "\n\n\n"]], "Tag": "算法设计"}
{"Answer": "![图片说明](https://img-ask.csdn.net/upload/201807/30/1532881307_117357.gif)", "Konwledge_Point": "应对NP完全问题", "Question": ["用random.randint()方法定义一个整数型随机二维矩阵，返回布尔值。", ["用np.random.randint()方法定义一个整数型随机二维矩阵，并判断其中有没有一整列数为0，返回布尔值,写成一个函数，求大神指点。", "\n用python写，谢谢。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可能是内存速度瓶颈&amp;#xff0c;也可能是其他因素导致的。在多核并行计算中&amp;#xff0c;除了CPU核心数和内存大小外&amp;#xff0c;还有很多因素会影响计算速度&amp;#xff0c;比如硬盘速度、缓存大小、算法复杂度等等。因此&amp;#xff0c;要想准确分析速度瓶颈&amp;#xff0c;需要对整个系统进行综合评估&amp;#xff0c;包括硬件和软件方面。&lt;/p&gt;\n&lt;p&gt;另外&amp;#xff0c;从1核到10核速度增加不是成倍增加&amp;#xff0c;这也是正常现象。多核并行计算的速度增加并不是线性的&amp;#xff0c;随着核心数的增加&amp;#xff0c;计算效率会逐渐降低&amp;#xff0c;因为多核并行计算需要更多的协调和同步&amp;#xff0c;而这些操作也需要消耗一定的时间和资源。&lt;/p&gt;\n&lt;p&gt;总之&amp;#xff0c;要想提高多核并行计算的速度&amp;#xff0c;需要从多个方面入手&amp;#xff0c;包括优化算法、提高硬件性能、合理调整系统参数等等。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python多进程与np数组与talib计算金融指标问题", ["cpu24核心笔记本电脑2个内存条16g 3200m x2，用1核运行速度是50+每秒it。用10个应该是500+。但是只有170+，我尝试从1核到10核测试，发现到3核后就不是成倍增加了，后面增加核心速度变快的很少。是不是内存速度瓶颈。", "\n", " with Pool(", "processes", "=workers) as pool:  #\n            # 使用并行批量获得<class ", "'list'", ">\n            results = pool.imap_unordered(\n                # 先测试单个核心一秒多少个，用于设置chunksize参数\n                partial(calculate_by_one_loop, ", "duo_lock", "=duo_lock), para_list, ", "chunksize", "=50)\n            # 显示进度条\n            ", "for", " i, result ", "in", " tqdm(enumerate(results),\n                                  ", "total", "=total, ", "desc", "=", "'总任务进度'", ", ", "mininterval", "=1, ", "maxinterval", "=1):\n                df_list.append(result)\n\n", "\n", "其中calculate_by_one_loop是目标函数，里面就执行np数组的计算", "\n", "x = talib.SMA(close, timeperiod=", "10", ")\n\n", "@jit(", "'float64[:,:](float64[:], float64[:], float64[:], float64[:])'", ")", "\n", "def", " ", "numpy_chaoji_qushi", "(", "atr, close, high, low", "):\n    ", "\"\"\"\n    超级趋势计算\n\n    :param atr: 真实波动幅度\n    :param close: 收盘\n    :param high: 最高\n    :param low: 最低\n    :return: 超级趋势\n    \"\"\"", "\n\n    src = np.full_like(close, np.nan, dtype=", "'float64'", ")  ", "# 生成空白的数组，结构和close一样", "\n    up = np.full_like(close, np.nan, dtype=", "'float64'", ")  ", "# 生成空白的数组，结构和close一样", "\n\n    dn = np.full_like(close, np.nan, dtype=", "'float64'", ")  ", "# 生成空白的数组，结构和close一样", "\n\n    ", "for", " i ", "in", " ", "range", "(close.shape[", "0", "]):\n        ", "# 价格源hlc3", "\n        src[i] = (close[i] + high[i] + low[i]) / ", "3", "\n        ", "# 计算超级趋势指标的上涨趋势线", "\n        up[i] = src[i] - atr[i]\n        ", "# 过去的收盘价 大于 up[1]", "\n        ", "if", " close[i - ", "1", "] > up[i - ", "1", "]:\n            ", "# up就等于 up 与up1 中最大的", "\n            up[i] = ", "max", "(up[i], up[i - ", "1", "])\n        ", "else", ":  ", "# 不是就返回up自己", "\n            up[i] = up[i]\n        ", "# 计算超级趋势指标的下跌趋势线", "\n        dn[i] = src[i] + atr[i]\n        ", "# 过去的收盘价 大于 up[1]", "\n        ", "if", " close[i - ", "1", "] < dn[i - ", "1", "]:\n            ", "# up就等于 up 与up1 中最大的", "\n            dn[i] = ", "min", "(dn[i], dn[i - ", "1", "])\n        ", "else", ":  ", "# 不是就返回up自己", "\n            dn[i] = dn[i]\n\n    ", "return", " np.vstack((up, dn))\n", "\n", "很多这种使用talib的代码，基本用5列数组会生成几十上百列。再循环判断逻辑。我测试过单次计算50多ms", "之前我是使用pandas的df", "例如：df['x'] = talib.SMA(df['close'], timeperiod=10)", "后面改成np数组，没使用一点df。速度提升了一点点。我重新写了一个只计算数学问题的程序，速度是随着进程数成倍增加的。我20核全开速度就比1核快将近20倍。所以我怀疑内存速度，但是我不知道怎么优化，已经从df数据改成np数组了。每计算一个金融指标（均线这些）就有一个单独的变量存起来。我看别人用服务器cpu和主板和内存，开几十上百个线程，速度飞快", "帮我优化一下"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;反向传播部分计算公式是对的&lt;br /&gt;&lt;a href=\"https://blog.nowcoder.net/n/c4635a8beeb84e7e91986b8c0da7a313?from&amp;#61;nowcoder_improve\" id=\"textarea_1647475497856_1647475687345_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;吴恩达深度学习第二次作业_牛客博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;带有一个隐藏层的平面数据分类 解释一下&amp;#xff0c;就是一个二维平面有两种不同的花色&amp;#xff0c;我们通过花色将这个平面进行划分 预备知识 我们先来看一下我们需要的包 import numpy as npimport ma&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.nowcoder.net/n/c4635a8beeb84e7e91986b8c0da7a313?from&amp;#61;nowcoder_improve&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python BP神经网络两分类 反向传播代码问题", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "import pandas as pd", "import numpy as np", "import datetime", "import matplotlib.pyplot as plt", "from pandas.plotting import radviz", "'''", "    构建一个具有1个隐藏层的神经网络，隐层的大小为10", "    输入层为4个特征，输出层为3个分类", "    (1,0,0)为第一类，(0,1,0)为第二类，(0,0,1)为第三类", "'''", "\n", "1.初始化参数", "\n", "def initialize_parameters(n_x, n_h, n_y):", "    np.random.seed(2)", "\n", "# 权重和偏置矩阵", "\nw1 = np.", "random", ".randn(n_h, n_x) * ", "0.01", "\nb1 = np.zeros(shape=(n_h, ", "1", "))\nw2 = np.", "random", ".randn(n_y, n_h) * ", "0.01", "\nb2 = np.zeros(shape=(n_y, ", "1", "))\n\n", "# 通过字典存储参数", "\nparameters = {", "'w1'", ": w1, ", "'b1'", ": b1, ", "'w2'", ": w2, ", "'b2'", ": b2}\n\n", "return", " parameters\n", "\n", "2.前向传播", "\n", "def forward_propagation(X, parameters):", "    w1 = parameters['w1']", "    b1 = parameters['b1']", "    w2 = parameters['w2']", "    b2 = parameters['b2']", "\n", "# 通过前向传播来计算a2", "\nz1 = np.dot(w1, X) + b1     ", "# 这个地方需注意矩阵加法：虽然(w1*X)和b1的维度不同，但可以相加", "\na1 = np.tanh(z1)            ", "# 使用tanh作为第一层的激活函数", "\nz2 = np.dot(w2, a1) + b2\na2 = ", "1", " / (", "1", " + np.", "exp", "(-z2))  ", "# 使用sigmoid作为第二层的激活函数", "\n\n", "# 通过字典存储参数", "\ncache = {", "'z1'", ": z1, ", "'a1'", ": a1, ", "'z2'", ": z2, ", "'a2'", ": a2}\n\n", "return", " a2, cache\n", "\n", "3.计算代价函数", "\n", "def compute_cost(a2, Y):", "    m = Y.shape[1]      # Y的列数即为总的样本数", "\n", "# 采用交叉熵（cross-entropy）作为代价函数\nlogprobs = ", "np", ".multiply(", "np", ".", "log", "(a2), Y) + ", "np", ".multiply(", "np", ".", "log", "(", "1", " - a2),(", "1", " - Y))\ncost = - ", "np", ".", "sum", "(logprobs) / m\n\n", "return", " cost\n", "\n", "4.反向传播（计算代价函数的导数）", "\n", "def backward_propagation(parameters, cache, X, Y):", "    m = Y.shape[1]", "\n", "w2 = ", "parameters", "[", "'w2'", "]\n\na1 ", "= cache[", "'a1'", "]", "\na2 ", "= cache[", "'a2'", "]", "\n\n# 反向传播，计算dw1、db1、dw2、db2\ndz2 ", "= a2 - Y", "\ndw2 ", "= (1", " / m) * np.dot(dz2, a1.T)\ndb2 = (", "1", " / ", "m) * np.sum(dz2, axis=1, keepdims=True)", "\ndz1 ", "= np.multiply(np.dot(w2.T, dz2), 1 - np.power(a1, 2))", "\ndw1 ", "= (1", " / m) * np.dot(dz1, X.T)\ndb1 = (", "1", " / ", "m) * np.sum(dz1, axis=1, keepdims=True)", "\n\ngrads ", "= {", "'dw1'", ": dw1,", " ", "'db1'", ": db1,", " ", "'dw2'", ": dw2,", " ", "'db2'", ": db2}", "\n\nreturn ", "grads", "\n", "\n", "5.更新参数", "\n", "def update_parameters(parameters, grads, learning_rate=0.4):", "    w1 = parameters['w1']", "    b1 = parameters['b1']", "    w2 = parameters['w2']", "    b2 = parameters['b2']", "\n", "dw1 = grads[", "'dw1'", "]\ndb1 = grads[", "'db1'", "]\ndw2 = grads[", "'dw2'", "]\ndb2 = grads[", "'db2'", "]\n\n# 更新参数\nw1 = w1 - dw1 * learning_rate\nb1 = b1 - db1 * learning_rate\nw2 = w2 - dw2 * learning_rate\nb2 = b2 - db2 * learning_rate\n\nparameters = {", "'w1'", ": w1, ", "'b1'", ": b1, ", "'w2'", ": w2, ", "'b2'", ": b2}\n\nreturn parameters\n", "\n", "建立神经网络", "\n", "def nn_model(X, Y, n_h, n_input, n_output, num_iterations=10000, print_cost=False):", "    np.random.seed(3)", "\n", "n_x = n_input           ", "# 输入层节点数", "\nn_y = n_output          ", "# 输出层节点数", "\n\n", "# 1.初始化参数", "\n", "parameters", " = initialize_parameters(n_x, n_h, n_y)\n\n", "# 梯度下降循环", "\n", "for", " i ", "in", " range(", "0", ", num_iterations):\n    ", "# 2.前向传播", "\n    a2, cache = forward_propagation(X, ", "parameters", ")\n    ", "# 3.计算代价函数", "\n    cost = compute_cost(a2, Y)\n    ", "# 4.反向传播", "\n    grads = backward_propagation(", "parameters", ", cache, X, Y)\n    ", "# 5.更新参数", "\n    ", "parameters", " = update_parameters(", "parameters", ", grads)\n\n    ", "# 每1000次迭代，输出一次代价函数", "\n    ", "if", " print_cost and i % ", "1000", " == ", "0", ":\n        ", "print", "('迭代第%i次，代价函数为：%f' % (i, cost))\n\n", "return", " ", "parameters", "\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "想问一下各位这个代码的反向传播部分里面的计算公式是对的嘛，尤其是dw1，dw2部分，现在需要学习率很高才能快速收敛", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用ChatGPT &lt;/p&gt;\n&lt;p&gt;在 Python 中&amp;#xff0c;如果你想进行对应位置相乘&amp;#xff0c;可以使用 Numpy 提供的 multiply 函数。例如&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;\nimport numpy as np\n\na &amp;#61; np.array(&lt;span class=\"hljs-string\"&gt;[[1, 2], [3, 4]]&lt;/span&gt;)\nb &amp;#61; np.array(&lt;span class=\"hljs-string\"&gt;[[5, 6], [7, 8]]&lt;/span&gt;)\n\n# 对应位置相乘\nc &amp;#61; np.multiply(a, b)\n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(c)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这段代码将输出一个2x2的矩阵&amp;#xff0c;每个元素都是对应位置相乘的结果。&lt;/p&gt;\n&lt;p&gt;至于将数组转化为一维的方法&amp;#xff0c;你可以使用 Numpy 的 flatten 方法&amp;#xff0c;例如&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;\n\nimport numpy as np\n\na &amp;#61; np.array(&lt;span class=\"hljs-string\"&gt;[[1, 2], [3, 4]]&lt;/span&gt;)\n\n# 将数组展平为一维\nb &amp;#61; a.flatten()\n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(b)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这段代码将输出一个包含所有元素的一维数组。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["np.mat()生成的矩阵问题", ["请问生成的矩阵没有对应位置相乘的方法吗？只能转化为ndarray才行吗？有没有类似matlab的", "a(:)直接输出a所有元素的办法呢？（除了np.reshape(a,-1)这种有点长的）"]], "Tag": "算法设计"}
{"Answer": "原来是我安装的nagios-plugins版本是2.2.1，而yum安装的OpenSSL的版本只有1.0.1e，而1.0.1e是一个比较落后的版本，一些新功能函数没包含。\r\n所以我升级了我的OpenSSL到1.1.1b之后就正常安装了。", "Konwledge_Point": "应对NP完全问题", "Question": ["nagios在make过程中报错", ["libnpcommon.a(sslutils.o): In function `np_net_ssl_init_with_hostname_version_and_cert':\n/root/nagios-plugins-2.2.1/plugins/sslutils.c:125: undefined reference to `SSLv23_client_method'\n/root/nagios-plugins-2.2.1/plugins/sslutils.c:129: undefined reference to `SSL_library_init'\n/root/nagios-plugins-2.2.1/plugins/sslutils.c:130: undefined reference to `SSL_load_error_strings'\n/root/nagios-plugins-2.2.1/plugins/sslutils.c:131: undefined reference to `OPENSSL_add_all_algorithms_conf'\n/root/nagios-plugins-2.2.1/plugins/sslutils.c:68: undefined reference to `SSLv3_client_method'\n/root/nagios-plugins-2.2.1/plugins/sslutils.c:60: undefined reference to `SSLv2_client_method'\ncollect2: ld returned 1 exit status\n", "\n\n", "已经执行过yum -y gd gd-devel *openssl*", "\n\n", "但重新编译任然报上述错误。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-html\"&gt;np.poly1d方法生成的多项式本身带有求导的方法deriv\n\nn &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.poly1d&lt;/span&gt;(&lt;span class=\"hljs-selector-attr\"&gt;[2,3,5,7]&lt;/span&gt;) \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n.deriv()&lt;/span&gt;&lt;/span&gt;)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n.deriv()&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的知识点：关于求得拟合曲线函数的斜率的问题", ["最近在学Python，现在遇到一个问题。由一组数据绘出一条曲线，再通过numpy的poly1d函数拟合出曲线的多元式函数，现在想对函数求导得到各个点的斜率，但sympy的diff函数好像无法作用于numpy类型的函数，有什么方法可以将numpy类型函数转化成sympy函数。或者有其他求得曲线上各点斜率的方法。因为数据有波动，根据相邻两点dy/dx来求斜率的方法不太行，希望寻找到更佳方法"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;打印row[&amp;#39;open&amp;#39;], row[&amp;#39;high&amp;#39;] 看看&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["arange 遍历数据报错", ["def get_history_data(self):", "    bar_path = 'e:\\600036.csv'", "    history_data = pd.read_csv(bar_path)", "    for index, row in history_data.iterrows():", "        step = 0.01", "        arr = np.arange(row['open'], row['high'], step)", "        arr = np.append(arr, row['high'])", "        arr = np.append(arr, np.arange(row['open'] - step, row['low'], -step))", "        arr = np.append(arr, row['close'])", "        dt = parser.parse(row['datetime'])", "        i = 0", "        tick = []", "        for item in arr:", "            tick.append(((dt + timedelta(seconds=1 * i)) , item))", "            i += 1", "\n", "arr = np", ".arange", "(row", "[", "'open'", "]", ", row", "[", "'high'", "]", ", step)\n", "\n", "ValueError: arange: cannot compute length"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;This is the new best way to &lt;a href=\"https://github.com/felixrieseberg/npm-windows-upgrade\" rel=\"noreferrer\"&gt;upgrade &lt;strong&gt;npm&lt;/strong&gt; on Windows&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Run PowerShell as Administrator&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Set-ExecutionPolicy Unrestricted -Scope CurrentUser -Force\nnpm install -g npm-windows-upgrade\nnpm-windows-upgrade\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note: Do not run &lt;code&gt;npm i -g npm&lt;/code&gt;. Instead use &lt;code&gt;npm-windows-upgrade&lt;/code&gt; to update npm going forward. Also if you run the NodeJS installer, it will replace the node version.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Upgrades npm in-place, where node installed it.&lt;/li&gt;\n&lt;li&gt;Easy updating, update to the latest by running &lt;code&gt;npm-windows-upgrade -p -v latest&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Does not modify the default path.&lt;/li&gt;\n&lt;li&gt;Does not change the default global package location.&lt;/li&gt;\n&lt;li&gt;Allows easy upgrades and downgrades.&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/npm/npm/wiki/Troubleshooting#upgrading-on-windows\" rel=\"noreferrer\"&gt;Officially recommended by the NPM team&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;A list of versions matched between NPM and NODE (&lt;a href=\"https://nodejs.org/en/download/releases/\" rel=\"noreferrer\"&gt;https://nodejs.org/en/download/releases/&lt;/a&gt;) - but you will need to download NODE INSTALLER and run that to update node (&lt;a href=\"https://nodejs.org/en/\" rel=\"noreferrer\"&gt;https://nodejs.org/en/&lt;/a&gt;) &lt;/li&gt;\n&lt;/ul&gt;\n    &lt;/div&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何在 Windows 上更新 npm？", ["\n\n", "I tried ", "this", ":", "\n\n", "sudo npm cache clean -f\nsudo npm install -g n\nsudo n stable\n", "\n\n", "...but it didn't work.", "\n\n", "How do I do this on Windows?", "\n    ", "\n\n", "转载于:https://stackoverflow.com/questions/18412129/how-can-i-update-npm-on-windows"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;A &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; [&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;]\nB &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; [&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; for &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; in A if &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;!&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;max&lt;/span&gt;(A) &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;!&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;min&lt;/span&gt;(A)]\nprint(B)\n#或者&amp;#xff1a;\nC &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; [&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; for &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; in A if &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; not in [&lt;span class=\"hljs-keyword\"&gt;max&lt;/span&gt;(A)&lt;span class=\"hljs-punctuation\"&gt;,&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;min&lt;/span&gt;(A)]]\nprint(C)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何删除列表中的最大值和最小值", ["想要删除D列表中的最大值和最小值  尝试了np.remove和np.delete(D,argmax())都报错了"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;元组的索引越界&amp;#xff0c;打印一下len(dataset)&amp;#xff0c;n取值已经超过了a,b元组元素个数。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python运行层次聚类Agnes算法报错", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "#描述: 基于组平均的AGNES算法，支持多维数组，距离用欧式距离", "\n\n\n", "import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n", "from", " scipy.cluster.hierarchy ", "import", " dendrogram,linkage\n", "from", " scipy.spatial.distance ", "import", " squareform\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " pylab ", "as", " pl\n\n\n", "#从excel中读取数据并转换为矩阵", "\ndatA=pd.read_excel(", "r'C:\\Users\\49175\\Desktop\\jzgb.xlsx'", ")\ndata=np.array(datA,dtype=np.int64)\n\n\n", "#数据处理 dataset是样本的列表", "\na = np.array_split(datA,", "78", ",axis=", "0", ")\ndataset = [(a[i], a[i+", "1", "]) ", "for", " i ", "in", " ", "range", "(", "1", ", ", "len", "(a)-", "1", ", ", "44", ")]\n\n\n", "#计算欧几里得距离,a,b分别为两个元组", "\n", "def", " ", "dist", "(", "a, b", "):\n    t = ", "0", "\n    n=", "44", "\n    ", "for", " i ", "in", " ", "range", "(n):\n        t = t + np.power(a[i]-b[i], ", "2", ")\n    ", "return", " np.sqrt(t)\n\n", "#dist_min", "\n", "def", " ", "dist_min", "(", "Ci, Cj", "):\n    ", "return", " ", "min", "(dist(i, j) ", "for", " i ", "in", " Ci ", "for", " j ", "in", " Cj)\n", "#dist_max", "\n", "def", " ", "dist_max", "(", "Ci, Cj", "):\n    ", "return", " ", "max", "(dist(i, j) ", "for", " i ", "in", " Ci ", "for", " j ", "in", " Cj)\n", "#dist_avg", "\n", "def", " ", "dist_avg", "(", "Ci, Cj", "):\n    ", "return", " ", "sum", "(dist(i, j) ", "for", " i ", "in", " Ci ", "for", " j ", "in", " Cj)/(", "len", "(Ci)*", "len", "(Cj))\n\n", "#找到距离最小的下标", "\n", "def", " ", "find_Min", "(", "M", "):\n    ", "min", " = ", "1000", "\n    x = ", "0", "; y = ", "0", "\n    ", "for", " i ", "in", " ", "range", "(", "len", "(M)):\n        ", "for", " j ", "in", " ", "range", "(", "len", "(M[i])):\n            ", "if", " i != j ", "and", " M[i][j] < ", "min", ":\n                ", "min", " = M[i][j];x = i; y = j\n    ", "return", " (x, y, ", "min", ")\n\n", "#算法模型", "\n", "def", " ", "AGNES", "(", "dataset, dist, k", "):\n    ", "#初始化C和M", "\n    C = [];M = []\n    ", "for", " i ", "in", " dataset:\n        Ci = []\n        Ci.append(i)\n        C.append(Ci)\n    ", "for", " i ", "in", " C:\n        Mi = []\n        ", "for", " j ", "in", " C:\n            Mi.append(dist(i, j))\n        M.append(Mi)\n    q = ", "len", "(dataset)\n    ", "#合并更新", "\n    ", "while", " q > k:\n        x, y, ", "min", " = find_Min(M)\n        C[x].extend(C[y])\n        C.remove(C[y])\n        M = []\n        ", "for", " i ", "in", " C:\n            Mi = []\n            ", "for", " j ", "in", " C:\n                Mi.append(dist(i, j))\n            M.append(Mi)\n        q -= ", "1", "\n    ", "return", " C\n", "#画图", "\n", "def", " ", "draw", "(", "C", "):\n    colValue = [", "'r'", ", ", "'y'", ", ", "'g'", ", ", "'b'", ", ", "'c'", ", ", "'k'", ", ", "'m'", "]\n    ", "for", " i ", "in", " ", "range", "(", "len", "(C)):\n        coo_X = []    ", "#x坐标列表", "\n        coo_Y = []    ", "#y坐标列表", "\n        ", "for", " j ", "in", " ", "range", "(", "len", "(C[i])):\n            coo_X.append(C[i][j][", "0", "])\n            coo_Y.append(C[i][j][", "1", "])\n        pl.scatter(coo_X, coo_Y, marker=", "'x'", ", color=colValue[i%", "len", "(colValue)], label=i)\n\n    pl.legend(loc=", "'upper right'", ")\n    pl.show()\n\nC = AGNES(dataset, dist_avg, ", "8", ")\ndraw(C)\n\n\n\n\n", "\n", "运行结果及报错内容", "\n", "Traceback (most recent call last):\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 91, ", "in", " <module>\n    C = AGNES(dataset, dist_avg, 8)\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 61, ", "in", " AGNES\n    Mi.", "append", "(dist(i, j))\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 38, ", "in", " dist_avg\n    ", "return", " ", "sum", "(dist(i, j) ", "for", " i ", "in", " ", "Ci", " ", "for", " j ", "in", " Cj)/(len(", "Ci", ")*len(Cj))\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 38, ", "in", " <genexpr>\n    ", "return", " ", "sum", "(dist(i, j) ", "for", " i ", "in", " ", "Ci", " ", "for", " j ", "in", " Cj)/(len(", "Ci", ")*len(Cj))\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 27, ", "in", " dist\n    t = t + np.power(a[i]-b[i], 2)\nIndexError: tuple index ", "out", " of ", "range", "\n\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;为了满足框架中模型的输入格式要求&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["机器学习自制数据集，关于将图片处理成数值过程中array数组reshape的问题", ["训练集有60000张图片，测试集10000，图片大小是28×28=784", "关于代码中    x_train_save = np.reshape(x_train, (len(x_train), -1))这句", "我不明白为什么还要对x_train进行形状重塑，这个x_train在函数generateds()中就已经被弄成array类型的二维数组了（60000×784）", "\n", "\n", "\n", "import", " tensorflow as tf\nfrom PIL ", "import", " Image\n", "import", " numpy as np\n", "import", " os\n\n", "train_path", " = './mnist_image_label/mnist_train_jpg_60000/'\n", "train_txt", " = './mnist_image_label/mnist_train_jpg_60000.txt'\n", "x_train_savepath", " = './mnist_image_label/mnist_x_train.npy'\n", "y_train_savepath", " = './mnist_image_label/mnist_y_train.npy'\n\n", "test_path", " = './mnist_image_label/mnist_test_jpg_10000/'\n", "test_txt", " = './mnist_image_label/mnist_test_jpg_10000.txt'\n", "x_test_savepath", " = './mnist_image_label/mnist_x_test.npy'\n", "y_test_savepath", " = './mnist_image_label/mnist_y_test.npy'\n\n\ndef generateds(path, txt):\n    ", "f", " = open(txt, 'r')  ", "# 以只读形式打开txt文件", "\n    ", "contents", " = f.readlines()  ", "# 读取文件中所有行", "\n    f.close()  ", "# 关闭txt文件", "\n    x, ", "y_", " = [], []  ", "# 建立空列表", "\n    for content ", "in", " contents:  ", "# 逐行取出", "\n        ", "value", " = content.split()  ", "# 以空格分开，图片路径为value[0] , 标签为value[1] , 存入列表", "\n        ", "img_path", " = path + value[", "0", "]  ", "# 拼出图片路径和文件名", "\n        ", "img", " = Image.open(img_path)  ", "# 读入图片", "\n        ", "img", " = np.array(img.convert('L'))  ", "# 图片变为8位宽灰度值的np.array格式", "\n        ", "img", " = img / ", "255", ".  ", "# 数据归一化 （实现预处理）", "\n        x.append(img)  ", "# 归一化后的数据，贴到列表x", "\n        y_.append(value[", "1", "])  ", "# 标签贴到列表y_", "\n        print('loading : ' + content)  ", "# 打印状态提示", "\n\n    ", "x", " = np.array(x)  ", "# 变为np.array格式", "\n    ", "y_", " = np.array(y_)  ", "# 变为np.array格式", "\n    ", "y_", " = y_.astype(np.int64)  ", "# 变为64位整型", "\n    return x, y_  ", "# 返回输入特征x，返回标签y_", "\n\n\n", "if", " os.path.exists(x_train_savepath) ", "and", " os.path.exists(y_train_savepath) ", "and", " os.path.exists(\n        x_test_savepath) ", "and", " os.path.exists(y_test_savepath):\n    print('-------------Load Datasets-----------------')\n    ", "x_train_save", " = np.load(x_train_savepath)\n    ", "y_train", " = np.load(y_train_savepath)\n    ", "x_test_save", " = np.load(x_test_savepath)\n    ", "y_test", " = np.load(y_test_savepath)\n    ", "x_train", " = np.reshape(x_train_save, (len(x_train_save), ", "28", ", ", "28", "))\n    ", "x_test", " = np.reshape(x_test_save, (len(x_test_save), ", "28", ", ", "28", "))\n", "else", ":\n    print('-------------Generate Datasets-----------------')\n    x_train, ", "y_train", " = generateds(train_path, train_txt)\n    x_test, ", "y_test", " = generateds(test_path, test_txt)\n\n    print('-------------Save Datasets-----------------')\n    ", "x_train_save", " = np.reshape(x_train, (len(x_train), -", "1", "))  ", "# 此处-1表示列数由行数连带确定", "\n    ", "x_test_save", " = np.reshape(x_test, (len(x_test), -", "1", "))\n    np.save(x_train_savepath, x_train_save)\n    np.save(y_train_savepath, y_train)\n    np.save(x_test_savepath, x_test_save)\n    np.save(y_test_savepath, y_test)\n\n", "model", " = tf.keras.models.Sequential([\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(", "128", ", ", "activation='relu'),", "\n    tf.keras.layers.Dense(", "10", ", ", "activation='softmax')", "\n])\n\nmodel.compile(", "optimizer='adam',", "\n              ", "loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),", "\n              ", "metrics=['sparse_categorical_accuracy'])", "\n\nmodel.fit(x_train, y_train, ", "batch_size=32,", " ", "epochs=5,", " ", "validation_data=(x_test,", " y_test), ", "validation_freq=1)", "\nmodel.summary()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码第二行&amp;#xff0c;路径写错了&amp;#xff0c;不是环境的问题&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["已经安装numpy，却 显示No module named 'numpy'", ["用gprMax产生bp成像结果。源代码如下：", "\n", "import", " sys \nsys.path.append(", "'D:/mygprmax/gprMax'", ") ", "# 把 gprMax 安装路径添加至系统，使 import 可以找到 gprMax 模块 ", "\n", "import", " numpy ", "as", " np\n", "from", " tools.plot_Bscan ", "import", " get_output_data, mpl_plot \n", "import", " matplotlib.pyplot ", "as", " plt \n", "from", " numba ", "import", " jit\n\nfilename_target = ", "r\"D:\\soil_cylinder_merged.out\"", "#获取有目标回波数据文件 ", "\nrxnumber = ", "1", " \nrxcomponent = ", "'Ez'", " \n", "# 获取回波数据", "\n\noutputdata_t, dt = get_output_data(filename_target, rxnumber, rxcomponent) \nplt.imshow(outputdata_t, \nextent=[", "0", ", outputdata_t.shape[", "1", "], outputdata_t.shape[", "0", "], ", "0", "], \ninterpolation=", "'nearest'", ", \n                aspect=", "'auto'", ", cmap=", "'gray'", ", \n                vmin=-np.amax(np.", "abs", "(outputdata_t)), \nvmax=np.amax(np.", "abs", "(outputdata_t))) \nplt.show()\n\nfilename_back = ", "r\"D:\\soil_background_merged.out\"", "#获取背景回波数据文件 ", "\nrxnumber = ", "1", " \nrxcomponent = ", "'Ez'", " \n", "# 获取回波数据 ", "\noutputdata_b, dt = get_output_data(filename_back, rxnumber, rxcomponent) \nplt.imshow(outputdata_b, extent=[", "0", ", outputdata_b.shape[", "1", "], outputdata_b.shape[", "0", "], ", "0", "], \ninterpolation=", "'nearest'", ", \n                aspect=", "'auto'", ", cmap=", "'gray'", ", \n                vmin=-np.amax(np.", "abs", "(outputdata_b)), \nvmax=np.amax(np.", "abs", "(outputdata_b))) \nplt.show()\n\ntarget_back = outputdata_t-outputdata_b", "#有目标的数据减去背景数据，去除直达波 ", "\nplt.imshow(target_back, extent=[", "0", ", target_back.shape[", "1", "], target_back.shape[", "0", "], ", "0", "], \ninterpolation=", "'nearest'", ", \n                aspect=", "'auto'", ", cmap=", "'gray'", ", \n                vmin=-np.amax(np.", "abs", "(target_back)), \nvmax=np.amax(np.", "abs", "(target_back))) \nplt.show()\n\n", "@jit(", "nopython=", "True", ") ", "\n", "def", " ", "bp", "(", "outputdata, soil, timewindow, cell, exception", "):", "#BP 成像算法 ", "\n    ", "''' \n    :param outputdata: B-scan 数据 \n    :param soil: 探测区域介质相对介电常数 \n    :param timewindow: 时窗:param cell: 单元格大小，一般是 dx \n    :param exception: 默认为 0 \n    :return: BP 结果 \n    '''", " \n    ", "# time_rows -- 时间维采样点数 scans -- 扫描次数 ", "\n    time_rows, scans = outputdata.shape \n    ", "# 时间维步进 ", "\n    dt = timewindow / time_rows \n    ", "# 电磁波 ", "\n    c = ", "3e8", " \n    v = c / np.sqrt(soil) \n    ", "# 实际探测区域的 x 长度 cell -- 天线步进，作为成像区域划分单位 ", "\n    domain_x = cell * scans \n    x_vec = np.arange(", "0", ", domain_x, cell) \n    ", "# 根据时窗和波速算出 y 的实际长度 ", "\n    domain_y = cell * np.ceil(timewindow * v / ", "2", " / cell) \n    y_vec = np.arange(", "0", ", domain_y, cell) \n    rows = y_vec.shape[", "0", "] ", "# 成像区域行数 ", "\n    cols = x_vec.shape[", "0", "] ", "# 成像区域列数 ", "\n    ans = np.zeros((rows, cols)) ", "# 存储 bp 结果，空矩阵 ", "\n    ", "for", " row ", "in", " ", "range", "(rows): \n        ", "for", " col ", "in", " ", "range", "(cols): \n            ascan_curve = ", "0", " ", "# 存储当前单元格幅值和 ", "\n            ", "for", " scan ", "in", " ", "range", "(scans): \n                d = ", "2", " * np.sqrt(np.power((y_vec[row] - ", "0", "), ", "2", ") + np.power((x_vec[col] - x_vec[scan]), ", "2", ")) \n                time = d / v ", "# 双程传播时间 ", "\n                serie = time / dt + exception ", "# 时间索引 ", "\n                fix = ", "int", "(serie) \n                ceil = ", "int", "(np.ceil(serie)) \n                ", "if", " serie < time_rows - ", "1", " ", "and", " serie > ", "0", ": \n                    ascan_curve += outputdata[fix][scan] + outputdata[ceil][scan] - (serie - fix) * outputdata[fix][scan] \n            ans[row][col] = ascan_curve \n    ", "return", " ans\n\ntarget_back_bp = bp(target_back,", "80", ",", "5e-9", ",", "0.002", ",", "50", ")", "#对去除直达波的数据进行 BP 成像 ", "\nplt.imshow(target_back_bp, extent=[", "0", ", target_back_bp.shape[", "1", "], target_back_bp.shape[", "0", "], ", "0", "], \ninterpolation=", "'nearest'", ", \n                aspect=", "'auto'", ", cmap=", "'gray'", ", \n                vmin=-np.amax(np.", "abs", "(target_back_bp)), \nvmax=np.amax(np.", "abs", "(target_back_bp))) \nplt.show()\n", "\n", "在命令窗口运行，返回错误", "\n", "重装numpy", "\n", "\n", "出现冲突，尚未解决", "\n", "抱着试一试的想法重新运行，于是出现了这种错误，找不到numpy包，又无法安装因为已存在", "\n", "使用pip list查看", "\n", "请问该如何解决？"]], "Tag": "算法设计"}
{"Answer": "极点？你想求这个边缘的坐标吗？pos = np.where(img)这个函数返回就是所有的x,y坐标 min(pos[0])就是最小的x坐标，以此类推", "Konwledge_Point": "应对NP完全问题", "Question": ["python-opencv如何寻找二值图的极点？", ["如图，已经弄得了图片的边缘，想知道上下左右的极点，请问该如何实现"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/507028240726172.png\" /&gt;&lt;br /&gt;对Python列表使用乘法&amp;#xff0c;对于不可变对象&amp;#xff08;如数字、字符串&amp;#xff09;而言是复制值&amp;#xff0c;但对可变对象&amp;#xff08;如列表、字典&amp;#xff09;而言则是复制引用&amp;#xff0c;因此对于包含可变对象的列表切莫使用列表乘法&amp;#xff0c;可使用列表生成式代替。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何给变量批量赋值ndarray数组？", ["\n", "如图，这样批量赋值的话，改变a的大小为什么会同步改变b的大小？", "\n", "a,b = np.ones(2) , np.ones(2)", "这样写的话就没有上述问题了，但我要是想同时赋值10个变量，这样写代码会很冗长，有没有什么办法呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;time_inc&amp;#61;[[]] 生成二维数组&lt;br /&gt;time_inc&amp;#43;&amp;#61;[[i,ss]]就是在二维数组中添加新的一维数组[i,ss]&lt;br /&gt;相当于&lt;code class=\"language-html\"&gt;time_inc.append([i,ss])&lt;/code&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["time_inc+=[[i,ss]]是什么意思", ["time_inc=", "[[]", "]   #时间不连续节点\nspeedU=", "[]", "   #加速不合要求 Vup>", "100", "/", "7", "\nspeedD=", "[]", "   #减速不合要求 Vdn>", "28.8", "\ndata1 = pd", ".read_excel", "(", "'文件1.xlsx'", ") #原始数据\n\ndata1 = pd", ".DataFrame", "(data1)\ndata1 = np", ".array", "(data1)\ndata1_out=copy", ".deepcopy", "(data1) #原始数据副本（记录处理后最终数据）\n#寻找断续时间节点\n", "for", " ", "i", " ", "in", " range(data1", ".shape", "[0]", "-", "1", "):  ", "#shape", "[0]", "行数； range（", "10", "）：", "0", "-", "9", "； i从", "0", "到data行-", "1", "\n  date1 = datetime", ".datetime", ".strptime", "(data1", "[i]", "[0]", ".replace", "(", "'.000.'", ",", "''", "),", "'%Y/%m/%d %H:%M:%S'", ")\n  date2 = datetime", ".datetime", ".strptime", "(data1", "[i+1]", "[0]", ".replace", "(", "'.000.'", ",", "''", "),", "'%Y/%m/%d %H:%M:%S'", ")\n  ss=(date2-date1)", ".seconds", "\n  ", "if", " ss!=", "1", ":\n        time_inc+=", "[[i,ss]", "]\n        time_inc=np", ".array", "(time_inc)\n        time_inc=time_inc+np", ".array", "(", "[1,0]", "*time_inc", ".shape", "[0]", ")", ".reshape", "(", "[time_inc.shape[0]", ",", "2", "])\n        time_inc = pd", ".DataFrame", "(time_inc)\n        time_inc", ".to_excel", "(", "'time_inc.xlsx'", ") #输出断续时间节点\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;timedelta64&lt;br /&gt;你是不是多打了一个m&lt;br /&gt;timemdelta64&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["module 'numpy' has no attribute 'timemdelta64'", ["在使用np.timemdelta64时出现错误：", "\n", "rfm['R'] = abs(rfm['order_dt'] - rfm['order_dt'].max())/np.timemdelta64(1,'D')", "\n", "报错如下：", "\n", "重装了numpy后仍然没有得到解决", "\n", "谢谢大家的解答！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可能的原因&amp;#xff1a;浮点数太大&amp;#xff0c;需要精度限制&amp;#xff0c;将小数点进行限制后&amp;#xff0c;才可求得&amp;#xff01;&lt;br /&gt;根号下必须为正数&amp;#xff0c;如以下修改&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["RunitmeWarning:invalid value encountered in double_scalars", ["问题遇到的现象和发生背景", "\n", "读取栅格数据转换为了数组，然后传入该数组调用函数的时候，发出警告并一直在重复运行", "Warning (from warnings module):", "    File \"C: \\Python27\\AreGIS10. 7\\lib\\site-packages\\scipy\\stats", "_stats_mstats_ common.py\", line97", "                 sterrest=np.sqrt((1 - r**2) * ssym 1/ssxm / df)", "RunitmeWarning:invalid value encountered in double_scalars", "\n", "问题相关代码，请勿粘贴截图", "\n", "-", "- coding:utf-8 -", "-", "\n", "import glob, os, sys", "import numpy as np", "import numpy.ma as ma", "import time", "import datetime", "from osgeo import gdal                     #导入osgeo包的gdal模块,GDAL用于读栅格数据，函数返回Dataset对象", "from scipy import stats, linalg", "from scipy.stats import mstats", "\n", "import pandas as pd", "\n", "import matplotlib.pyplot as plt", "\n", "def Calculate_trend(inFol, outFol, factor='p', inFormat = \".tif\"):", "\n", "factor_finList = []\nfor files in os.listdir(inFol):                                                 ", "#", "listdir", "(", "path", ")", ":列举目录下的所有文件\n    for year in range(1988, 1990):\n        if (factor in files) and (inFormat== files[-4:]) and (str(year) in files):            \n            fileIn =  os.path.join(inFol, files)                                  #加入目录下的所有栅格文件\n            dataset = gdal.Open(fileIn, gdal.GA_ReadOnly)                         #读取栅格数据\n            #print\"fileIn是：\",fileIn\n            #print\"dataset是：\",dataset\n\n            if dataset is None:\n                print ('Could not open raster file'), fileIn\n                sys.exit(1)                                                         ", "#", "exit", "(1)", "：有错误退出           \n            factor_array = dataset.ReadAsArray().astype(np.float32)              # 将这个数组转化为 float32 位的数组\n            print\"factor_array是：\",factor_array\n            factor_array = factor_array.astype('float')                \n            factor_finList.append(factor_array)                               ", "#", "append", "()", "方法用于在列表末尾添加新的对象\n            print\"factor_finList是：\",factor_finList\n    factor_array = np.array(factor_finList)                                   #创建数组\n    #print\"factor_array是：\",factor_array\n\nkwargs = {\"fillvalue\": -9999.0, \"plot\": False}                              #\noutArray= np.apply_along_axis(Func_single_linear_reg, 0, factor_array, **kwargs)    #np.apply_along_axis将一个函数沿一个轴作用到数组中 调用“Func_single_linear_reg”\n", "#", "export_array_trend", "(", "outFol", ", ", "outArray", ", ", "geoTran", ", ", "geoProj", ", ", "cols", ", ", "rows", ",  ", "variable", " = '", "lineareg", "', ", "factor", " = ", "factor", ", ", "fillvalue", "= -9999.0, ", "driverName", "='", "GTiff", "')", "   #调用“export_array_trend”\n", "\n", "inFol = r\"D:\\py\" #读入的文件夹路径", "outFol = r\"D:\\py\\r\"    #输出的新文件的路径", "if not os.path.exists(outFol):                             #os.path.exists()函数用来检验给出的路径是否真地存在 返回bool", "    os.makedirs(outFol)                                    #makedirs(path):递归式的创建文件夹，注：创建已存在的文件夹将异常", "\n", "get raster tiff infomation(GeoTransform, Projection)", "\n", "global geoTran, geoProj, cols, rows, nodatav   ", "\n", "for allRasters in os.listdir(inFol):                      #listdir(path):列举目录下的所有文件", "    print\"第一个栅格数据：\",allRasters", "    if allRasters.endswith(\".tif\"):", "        firstRasPath = os.path.join(inFol, allRasters)    #加入目录下的所有栅格文件", "        break", "\n", "print\"第一个栅格数据的路径：\",firstRasPath", "\n", "firstdataset = gdal.Open(firstRasPath, gdal.GA_ReadOnly)          #读取栅格数据", "print\"栅格数据：\",firstdataset", "cols= firstdataset.RasterXSize                                   #读取列数", "print\"列数：\",cols", "rows= firstdataset.RasterYSize                                   #读取行数", "print\"行数：\",rows", "bandnum =  firstdataset.RasterCount                              #读取波段数", "print\"波段数：\",bandnum", "driver = firstdataset.GetDriver()                                #读取驱动（返回当前的磁盘驱动器？）", "print\"驱动器：\",driver", "geoTran = firstdataset.GetGeoTransform()                         #读取坐标转换参数", "print\"坐标转换参数：\",geoTran", "geoProj= firstdataset.GetProjection()                            #读取空间参照系", "print\"空间坐标系：\",geoProj", "nodatav = firstdataset.GetRasterBand(1).GetNoDataValue()         #栅格数值替换？？？", "print\"nodata值：\",nodatav", "\n", "Calculate_trend(inFol, outFol, factor='p', inFormat = \".tif\")", "\n", "运行结果及报错内容", "\n", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "是因为数据精度的问题嘛", "\n", "我想要达到的结果", "\n", "不报错"]], "Tag": "算法设计"}
{"Answer": "- 什么是索引？\r\n\r\n假设有一个二维数组，给定** i **行和**j**列，这才是索引。比如numpy.where()\r\n\r\n- 为什么numpy的arg系列不能索引？\r\n\r\n你可以把arg打印出来就知道了，这是一个相对值，在axis上的索引。numpy argmax argmin argsort......\r\n要么你直接排序获得排序的数组，要么你去每一行的索引（这时可以使用arg的值了）", "Konwledge_Point": "应对NP完全问题", "Question": ["根据numpy的argsort（）得到的结果，索引得到的数据是否正确？", ["x = np.array([[1, 5, 7], [3, 2, 4]])", "\nindex = np.argsort(x, axis=0)", "\nprint(x[index])", "\n\n", "[[[1 5 7]", "\n  [3 2 4]", "\n  [3 2 4]]", "\n\n", "[[3 2 4]", "\n  [1 5 7]", "\n  [1 5 7]]]", "\n\n", "index既然得到的是索引。那么根据索引可以得到原数组X的从小到大的值，为什么输出的是一个看不懂的数据 ，哪儿操作有失误或是理解不对吗？"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/a197p/article/details/46336235", "Konwledge_Point": "应对NP完全问题", "Question": ["Being a Predictor                        ", ["问题描述 :", "\n\n", "Let A(x) = Sigma(Ai * x^i) (0<=i<=N-1). Given A(1), A(2),…, A(N), You are asked to calculate A(N+1) mod 112233.", "\nIt is guaranteed that A(1), A(2), …, A(N), A(N+1) are all integers. ", "\n输入:", "\n\n", "There are multiple test cases, ended with an EOF.", "\nFor each case:", "\nLine 1 contains a positive integer N (N <= 10^6).", "\nLine 2 to Line N+1: each contains a non-negative integer less than 65536. The integer in Line i is A(i-1). ", "\n输出:", "\n\n", "There are multiple test cases, ended with an EOF.", "\nFor each case:", "\nLine 1 contains a positive integer N (N <= 10^6).", "\nLine 2 to Line N+1: each contains a non-negative integer less than 65536. The integer in Line i is A(i-1).", "\n样例输入:", "\n\n", "1", "\n18605", "\n5", "\n19543", "\n19998", "\n12266", "\n27854", "\n2103", "\n样例输出:", "\n\n", "18605", "\n110887"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;选B&lt;br /&gt;筛选切片后每一行的最小值对应的index,因为每一行的最小值都是在0的位置,所以最终生成打的array为[0,0,0]&lt;br /&gt;&lt;strong&gt;有帮助望采纳~&lt;/strong&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#arr数组#的问题，如何解决？", ["定义 arr 数组, arr = np.array([[1,2,3],[4,5,6],[7,8,9]]) np.argmin(arr[1:],axis=0) 怎么看输出结果", "A、 array([0, 1, 0], dtype=int64)", "B、 array([0, 0, 0], dtype=int64)", "C、 array([1, 1, 1], dtype=int64)", "D、 array([0, 1, 1], dtype=int64)"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;空值是 np.NaN&amp;#xff0c;不是 &amp;#39;&amp;#39;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python替换replace及空值fillna填充问题", ["使用python处理数据时，第一步将df指定列2中含有G字母使用replace替换为空值；", "\n\n", "第二步，替换的空值使用fillna进行填充，实际运行结果没有填充，还是显示空值", "\n\n", "\n", "df[2].str.replace('G(.*)','',regex = True)\n\ndf[2].fillna(df[1],inplace=True)\n", "\n\n", "这是什么情况呢？", "\n\n", "最终的目的就是df中第2列数据包含字母G的数据填充为第1列的数据"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我自己知道了谢谢&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为啥我的j和lat_index和lon-index都是0呀", ["extract variable(given region by coord) from .nc4 file", "\n", "import numpy as np", "from netCDF4 import Dataset", "import os", "import pandas as pd", "\n", "import time", "\n", "import re", "\n", "def extract_nc(path, coord_path, variable_name, precision=2):", "    \"\"\"extract variable(given region by coord)from.nc file", "    input:", "        path: path of the source nc file", "        coord_path: path of the coord extracted by fishnet:OID,lat,lon", "        variable_name: name of the variable need to read", "        precision: the minimum precision of lat/lon,to match the lat/lon of source nc file", "\n", "output：\n    {variable_name}.txt [i,", "j", "]:i(", "file", " ", "number", ") ", "j", "(grid point ", "number", ")\n    lat_index.txt/lon_index.txt\n    coord.txt\n", "\"\"", "\"", "\n", "print", "(", "f", "\"variable:{variable_name}\"", ")\ncoord = pd.read_csv(coord_path, sep=", "\",\"", ")  # ", "read", " coord(extract by fishnet)\n", "print", "(", "f", "\"grid point number:{len(coord)}\"", ")\ncoord = coord.", "round", "(precision)  # coord precision correlating with .nc ", "file", " ", "lat", "/lon\nresult = [path + ", "\"/\"", " + d ", "for", " d in os.listdir(path) ", "if", " d[-", "4", ":] == ", "\".nc4\"", "]\n", "print", "(", "f", "\"file number:{len(result)}\"", ")\nvariable = np.zeros((", "len", "(result), ", "len", "(coord) + ", "1", "))  # save the path correlated with ", "read", " order\n\n# calculate the ", "index", " of ", "lat", "/lon in coord from ", "source", " nc ", "file", "\nf1 = Dataset(result[", "0", "], ", "'r'", ")\nDataset.set_auto_mask(f1, False)\nlat_index = []\nlon_index = []\n", "lat", " = f1.variables[", "\"lat\"", "][:]\nlon = f1.variables[", "\"lon\"", "][:]\n", "count", " = ", "len", "(coord)\nindexs = ", "range", "(", "count", ")\n", "for", " ", "j", " in indexs:\n    lat_index.", "append", "(np.where(", "lat", " == coord[", "\"lat\"", "][", "j", "])[", "0", "][", "0", "])\n    lon_index.", "append", "(np.where(lon == coord[", "\"lon\"", "][", "j", "])[", "0", "][", "0", "])\nf1.", "close", "()\n", "\n", "到这一步运行完显示错误：", " lat_index.append(np.where(lat == coord[\"lat\"][j])[0][0])", "IndexError: index 0 is out of bounds for axis 0 with size 0", "\n", "Process finished with exit code 1", "\n", "一直到for j in indexs之前的语句都能正常运行，这一句理论上j应该是跟count一样是92671，但是就显示是0", "\n", "我的coord是四列92671行，四列分别是FID_ OID lat lon "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以用numpy的column_stack和where函数来获取像素点在某阈值范围内的坐标。例子&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; numpy as np\nfrom PIL &lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; Image \n\n&lt;span class=\"hljs-attr\"&gt;image&lt;/span&gt; &amp;#61; Image.open(&lt;span class=\"hljs-string\"&gt;&amp;#34;tqc.jpg&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-attr\"&gt;pixels&lt;/span&gt; &amp;#61; np.asarray(image)\n&lt;span class=\"hljs-comment\"&gt;# Set threshold level&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;threshold_level&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# Find coordinates of all pixels below threshold&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;coords&lt;/span&gt; &amp;#61; np.column_stack(np.where(pixels &amp;lt; threshold_level))\nprint(coords)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;或者要获取每个像素点坐标&amp;#xff0c;参考这里的代码&amp;#xff1a;&lt;a href=\"https://link.csdn.net/?target&amp;#61;https://stackoverflow.com/questions/60782965/extract-x-y-coordinates-of-each-pixel-from-an-image-in-python\" id=\"md_link_card\" class=\"md_link_card\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n  &lt;span class=\"md_link_title\"&gt;https://stackoverflow.com/questions/60782965/extract-x-y-coordinates-of-each-pixel-from-an-image-in-python&lt;/span&gt;\n  \n  &lt;span class=\"md_flex_card\"&gt;\n  &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n    &lt;span class=\"flex-1\"&gt;\n      &lt;span class=\"md_link_url\"&gt;https://stackoverflow.com/questions/60782965/extract-x-y-coordinates-of-each-pixel-from-an-image-in-python&lt;/span&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;如果对你有帮助&amp;#xff0c;请点击我回答的右上角采纳按钮给予采纳。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python如何提取图片像素点坐标值？", ["Python提问，Python如何提取图片像素点坐标值？。给个代码例子，各位！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;x_train[&amp;#39;abstract2&amp;#39;]&amp;#xff0c;可作为字典键取值或者选取数据框的列。如果x_train是一个数组&amp;#xff08;或列表&amp;#xff09;&amp;#xff0c;不能用字符去作为索引&amp;#xff0c;应该是整数或切片。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何解决IndexError: only integers, slices这类问题", ["想用Roberta进行文本分类，找到了代码代入后，出现了下面问题。我的数据集里的x_train设定为文本的'abstract2', y_train 是Label，进行分类。", "\n", "x_train[0]", "\"['inflammation', 'constitute', 'concerted', 'series', 'cellular', 'molecular', 'response', 'follow', 'disturbance', 'systemic', 'homeostasis', 'either', 'toxin']\"", "\n", "X_train是这种tokenize的文本，进入下面后出现了问题：", "\n", "seqlen = x_train['abstract2'].apply(lambda x: len(x.split()))", "\n", "sns.set_style(\"darkgrid\")", "plt.figure(figsize=(8,5))", "sns.distplot(seqlen)", "\n", "IndexError: only integers, slices (", ":", "), ellipsis (", "...", "), numpy.newaxis (", "None", ") and integer or boolean arrays are valid indices.", "\n", "不知道如何解决？请大家不吝赐教！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;np.where返回的就是坐标了啊&lt;/p&gt;\n\n&lt;p&gt;import numpy as np&lt;/p&gt;\n\n&lt;p&gt;a &amp;#61; np.array([[1,2,3],[4,5,6]])&lt;/p&gt;\n\n&lt;p&gt;print(np.where(a&amp;#61;&amp;#61;2))&lt;/p&gt;\n\n&lt;p&gt;返回&lt;/p&gt;\n\n&lt;p&gt;(array([0], dtype&amp;#61;int64), array([1], dtype&amp;#61;int64))就是第2行第1列&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python如何使用numpy.where在图片上提取某一位置的坐标", ["遍历所有点耗费太耗费时间了，怎样通过nump.where获取图片的某一位置坐标"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;ubuntu联网后输入打开控制台输入&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;sudo apt-&lt;span class=\"hljs-built_in\"&gt;get&lt;/span&gt; install &lt;span class=\"hljs-keyword\"&gt;python&lt;/span&gt;-pip\nsudo apt-&lt;span class=\"hljs-built_in\"&gt;get&lt;/span&gt; install &lt;span class=\"hljs-keyword\"&gt;python&lt;/span&gt;-numpy &lt;span class=\"hljs-keyword\"&gt;python&lt;/span&gt;-scipy &lt;span class=\"hljs-keyword\"&gt;python&lt;/span&gt;-matplotlib ipython ipython-notebook &lt;span class=\"hljs-keyword\"&gt;python&lt;/span&gt;-pandas &lt;span class=\"hljs-keyword\"&gt;python&lt;/span&gt;-sympy &lt;span class=\"hljs-keyword\"&gt;python&lt;/span&gt;-nose\n\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["ImportError: No module named numpy", ["ImportError: No module named numpy", "\n", "python使用过程中出现", "import numpy as np", "ImportError: No module named numpy"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码46行&lt;/p&gt;\n\n&lt;p&gt;for idx in range(x.size)改for idx in range(x.shape[0]):&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python错误解决", ["\n", "class Net:\n    def __init__(self,input_size,hidden_size,output_size,weight_init_std=0.001):\n        self.params={}\n        self.params['W1']=weight_init_std* \\\n                          np.random.randn(input_size,hidden_size)#高斯分布初始化\n        self.params['W2']=weight_init_std* \\\n                          np.random.randn(hidden_size,output_size)\n        self.params['b1']=np.zeros(hidden_size)\n        self.params['b2']=np.zeros(output_size)\n    def sigmoid(self,x):\n        x=np.array(x)\n        return 1/(1+np.exp(-x))\n\n    def softmax(self,x):\n        c=np.max(x)\n        exp_a=np.exp(x-c)#溢出对策\n        sum_exp=np.sum(exp_a)\n        y=exp_a/sum_exp\n        return y\n    def predict(self,x):\n        W1,W2=self.params['W1'],self.params['W2']\n        b1,b2=self.params['b1'],self.params['b2']\n        a1=np.dot(x,W1)+b1\n        z1=self.sigmoid(a1)\n        a2=np.dot(z1,W2)+b2\n        z2=self.sigmoid(a2)\n        y=self.softmax(z2)\n        return y\n    def loss(self,x,t):\n        y=self.predict(x)\n        if y.ndim==1:\n            t=t.reshape(1,t.size)\n            y=y.reshape(1,y.size)\n        batch_size=y.shape[0]\n        return -np.sum(t*np.log(y+1e-7))/batch_size\n    def accuracy(self,x,t):\n        y=self.predict(x)\n        y=np.argmax(y,axis=1)\n        t=np.argmax(t,axis=1)\n        accuracy=np.sum(y==t)/float(x.shape[0])\n        return accuracy\n    def numerical_gradient(self,f,x):#求偏导\n        h=1e-4\n        grad=np.zeros_like(x)\n        tmp_val=np.zeros_like(x[0])\n        for idx in range(x.size):\n            tmp_val=x[idx]#初始值\n            x[idx]=tmp_val+h\n            fxh1=f(x)\n            x[idx]=tmp_val-h\n            fxh2=f(x)\n            grad[idx]=(fxh1-fxh2)/(2*h)\n            x[idx]=tmp_val#还原x\n        return grad\n    def ng(self,x,t):\n        f=lambda w:self.loss(x,t)\n        grads={}\n        grads['W1']=self.numerical_gradient(f,self.params['W1'])\n        grads['b1']=self.numerical_gradient(f,self.params['b1'])\n        grads['W2']=self.numerical_gradient(f,self.params['W2'])\n        grads['b2']=self.numerical_gradient(f,self.params['b2'])\n        return grads\nnet=Net(input_size=784,hidden_size=225,output_size=15)\nx=np.random.rand(100,784)\ny=net.predict(x)\nt=np.random.rand(100,15)\ngrads=net.ng(x,t)", "\n\n", "错误提示：", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;需要使用Numpy自带的方法np.isnan()&amp;#xff0c;is表达式&amp;#xff0c;in表达式进行判断&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\nnp.&lt;span class=\"hljs-keyword\"&gt;nan&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;is&lt;/span&gt; np.&lt;span class=\"hljs-keyword\"&gt;nan&lt;/span&gt; # &lt;span class=\"hljs-keyword\"&gt;True&lt;/span&gt;\nnp.isnan(np.&lt;span class=\"hljs-keyword\"&gt;nan&lt;/span&gt;) # &lt;span class=\"hljs-keyword\"&gt;True&lt;/span&gt;\nnp.&lt;span class=\"hljs-keyword\"&gt;nan&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; [np.&lt;span class=\"hljs-keyword\"&gt;nan&lt;/span&gt;] # &lt;span class=\"hljs-keyword\"&gt;True&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何判断dataframe里某一位置元素为NAN", ["如何判断dataframe里某一位置元素为NAN？求指点一下", "尝试：data.iloc[0,0] is np.nan不行", "尝试代码：", "\n", "import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n", "data", " = pd.", "DataFrame", "(", "data", "=", "np", ".", "ones", "([4,4]))", "\n", "data", ".iloc[0,0] =np.nan", "\n", "print", "(", "data", ".iloc[0,0])", "\n", "print", "(", "data", ".iloc[0,0] is np.nan)", "\n", "print", "(np.nan is np.nan)\n", "\n", "运行结果：", "nan", "False", "True"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这是因为在执行函数时&amp;#xff0c;没有左键单击时&amp;#xff0c;程序就开始执行第二条if 语句&amp;#xff0c;读取参数a时因没有定义和赋值&amp;#xff0c;当然会报错&amp;#xff0c;应该将第一个判断语句块后面的if...elif...整个代码块缩进一个tab&amp;#xff0c;作为第一个判断语句的一部分&amp;#xff0c;这样就不会报错了。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["openCV绘画变量异常", ["import cv2", "\n\n", "import numpy as np", "\n\n", "thickness=-1", "\n\n", "mode=1", "\n\n", "d=400", "\n\n", "def draw_circle(event,x,y,flags,param):", "\n\n", "    if event==cv2.EVENT_LBUTTONDOWN:", "\n\n", "        a=np.random.randint(1,d-50)", "\n\n", "        r=np.random.randint(1,d/5)", "\n\n", "        angle = np.random.randint(0,361)", "\n\n", "        color = np.random.randint(0,high = 256,size = (3,)).tolist()", "\n\n", "    if mode==1:", "\n\n", "        cv2.rectangle(img,(x,y),(a,a),color,thickness)", "\n\n", "    elif mode==2:", "\n\n", "        cv2.circle(img,(x,y),r,color,thickness)", "\n\n", "    elif mode==3:", "\n\n", "        cv2.line(img,(a,a),(x,y),color,3) ", "\n\n", "    elif mode==4:", "\n\n", "        cv2.ellipse(img, (x,y), (100,150), angle, 0, 360,color,thickness) ", "\n\n", "    elif mode==5:", "\n\n", "        cv2.putText(img,'OpenCV',(0,round(d/2)), ", "\n\n", "            cv2.FONT_HERSHEY_SIMPLEX, 2,color,5) ", "\n\n", "img=np.ones((d,d,3),np.uint8)*255", "\n\n", "cv2.namedWindow('image')", "\n\n", "cv2.setMouseCallback('image',draw_circle)", "\n\n", "while(1):", "\n\n", "    cv2.imshow('image',img)", "\n\n", "    k=cv2.waitKey(1)&0xFF", "\n\n", "    if k==ord('r'):", "\n\n", "        mode=1", "\n\n", "    elif k==ord('c'):", "\n\n", "        mode=2", "\n\n", "    elif k==ord('l'):", "\n\n", "        mode=3", "\n\n", "    elif k==ord('e'):", "\n\n", "        mode=4", "\n\n", "    elif k==ord('t'):", "\n\n", "        mode=5", "\n\n", "    elif k==27:", "\n\n", "        break ", "\n\n", "cv2.destroyAllWindows()"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码没问题&amp;#xff0c;你的w, h错了&amp;#xff0c;根据这个图数一下&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/903402492646145.JPG\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于用python实现张正友标定法中的设置棋盘格的点，换成其他的h*w的矩阵就会报错，应该如何解决这个问题", ["问题遇到的现象和发生背景", "\n", "我觉得是在ret的角点提取的地方，我试着打印出来结果是false，只有一张图片可以使用，换成其他的图片ret都是false", "\n", "有问题的代码", "\n", "criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, ", "30", ", ", "0.001", ")\n#棋盘格模板规格\nw = ", "9", "\nh = ", "9", "\n# 世界坐标系中的棋盘格点,例如(", "0", ",", "0", ",", "0", "), (", "1", ",", "0", ",", "0", "), (", "2", ",", "0", ",", "0", ") ....,(", "8", ",", "5", ",", "0", ")，去掉Z坐标，记为二维矩阵\nobjp = np.zeros((w*h,", "3", "), np.float32)\nobjp", "[:,:", "2", "]", " = np.mgrid", "[", "0", ":", "w", ",", "0", ":", "h", "]", ".", "T", ".", "reshape(-", "1", ",", "2", ")\n# 储存棋盘格角点的世界坐标和图像坐标对\nobjpoints = ", "[]", " # 在世界坐标系中的三维点\nimgpoints = ", "[]", " # 在图像平面的二维点\n#images = cv2.imread('D:\\\\postgraduate\\\\Python\\\\learnpython\\\\picture_1.jpg')\nimages = glob.glob('D:\\\\postgraduate\\\\Python\\\\learnpython\\\\picture_9.jpg')\n", "for", " fname ", "in", " images:\n    img = cv2.imread(fname)\n    gray = cv2.cvt", "Color(", "img", ",", "cv2", ".COLOR_BGR2GRAY)", "\n    # 找到棋盘格角点\n    ret, corners = cv2.find", "ChessboardCorners(", "gray", ", (", "w", ",", "h", ")", ",None)\n    print(ret)\n    # 如果找到足够点对，将其存储起来\n    ", "if", " ret", " == ", "True:\n        cv2.corner", "SubPix(", "gray", ",", "corners", ",(11,11)", ",(-", "1", ",-", "1", "),criteria)\n        objpoints.append(objp)\n        imgpoints.append(corners)\n        # 将角点在图像上显示\n        cv2.draw", "ChessboardCorners(", "img", ", (", "w", ",", "h", ")", ", corners, ret)\n        cv2.named", "Window(", "\"findCorners\"", ", ", "cv2", ".WINDOW_NORMAL)", "\n        cv2.resize", "Window('", "findCorners", "', 600, 600)", "\n        cv2.imshow('findCorners',img)\n        cv2.wait", "Key(0)", "\ncv2.destroy", "AllWindows()", "\nret, mtx, dist, rvecs, tvecs = cv2.calibrate", "Camera(", "objpoints", ", ", "imgpoints", ", ", "gray", ".", "shape", "[::-1], None, None)", "\n", "\n", "运行结果及报错内容", "\n", "calibration.cpp_3694_ error_ (-", "215", "_Assertion failed) nimages _ ", "0", " ", "in", " ", "function", " ", "'cv__calibrateCameraRO'", "\nFalse\n\nProcess finished with ", "exit", " code ", "1", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "希望给一张图片就可以对其进行标定和处理"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;改为float64就正常了&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import numpy as np\na&amp;#61;np&lt;span class=\"hljs-selector-class\"&gt;.float64&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;495853088.0&lt;/span&gt;)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a)&lt;/span&gt;&lt;/span&gt;\nb&amp;#61;f&lt;span class=\"hljs-string\"&gt;&amp;#39;{a}&amp;#39;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(b)&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/592172392236151.png\" width=\"600px\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python np.float32类型转str为什么数据会变", ["比如a=np.float32(495853088.0)", "    b=f'{a}'", "结果a=495853100.0", "   b='495853088.0'", "问题1:b为什么不是'495853100.0'", "问题2: 请问这里的x可以填多少  495853088.0=np.float32(x)", "小白提问  谢谢各位大佬  好人一生平安"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;上次那个不好用么&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的问题：import matplotlib.pyplot as plt", ["\n \n", "import", " matplotlib\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " numpy ", "as", " np\n", "def", " ", "main", "():\n    matplotlib.rcParams[", "'font.family'", "] = ", "'SimHei'", "\n    stuScore = np.loadtxt(", "'student_score.csv'", ", delimiter=", "','", ")  ", "# 读入成绩文件,返回数组", "\n    sumEach = np.", "sum", "(stuScore[:, ", "1", ":], axis=", "1", ")  ", "# 返回每个学生3门课程总分", "\n    avgEach = np.average(stuScore[:, ", "1", ":], axis=", "0", ")  ", "# 返回每个学生每门课程平均分", "\n    ", "# 取出各科成绩", "\n    mathScore = stuScore[:, ", "1", "]\n    engScore = stuScore[:, ", "2", "]\n    pythonScore = stuScore[:, ", "3", "]\n    ", "# Performanceanalysis(avgEach, stuScore, sumEach)", "\n    ", "while", " ", "True", ":\n        ", "print", "(", "\"\"\"成绩分析与可视化系统  \n 1: 基本信息显示      \n 2: 成绩分析          \n 3: 可视化         \n 4: 退出系统\"\"\"", ")\n        operation = ", "input", "(", "\"请输入你的操作\"", ")\n        ", "if", " operation.isdigit():\n            operation = ", "int", "(operation)\n            ", "if", " operation == ", "1", ":\n                ", "print", "(", "\" 学号  高数  英语  python\"", ")\n                ", "for", " i ", "in", " stuScore:\n                    ", "print", "(", "f\"", "{", "int", "(i[", "0", "])}", " ", "{i[", "1", "]}", " ", "{i[", "2", "]}", " ", "{i[", "3", "]}", "\"", ")\n            ", "elif", " operation == ", "2", ":\n                Performanceanalysis(avgEach, stuScore, sumEach)\n            ", "elif", " operation == ", "3", ":\n                ", "# name= input(\"请输入课程名\")", "\n                ", "# if name=='xxx':", "\n                ", "# 由于不清楚你的课程名是啥,你这里自己填 if elif else结构就可以", "\n                Highnumberhistogram(mathScore)\n                Englishhistogram(engScore)\n                Scorehistogram(pythonScore)\n            ", "elif", " operation == ", "4", ":\n                ", "import", " sys\n                sys.exit(", "0", ")\n            ", "else", ":\n                ", "print", "(", "\"输入错误,请重新输入\"", ")\n", "def", " ", "Performanceanalysis", "(", "avgEach, stuScore, sumEach", "):\n    ", "# 返回最高分和最低分", "\n    maxMath = np.", "max", "(stuScore[:, ", "1", "])\n    maxEng = np.", "max", "(stuScore[:, ", "2", "])\n    maxPython = np.", "max", "(stuScore[:, ", "3", "])\n    minMath = np.", "max", "(stuScore[:, ", "1", "])\n    minEng = np.", "max", "(stuScore[:, ", "2", "])\n    minPython = np.", "max", "(stuScore[:, ", "3", "])\n    ", "print", "(", "\"个人总分情况是：\"", ")\n    ", "print", "(sumEach)\n    ", "print", "(", "\"个人平均分情况是：\"", ")\n    ", "print", "(avgEach)\n    ", "print", "(", "\"班级每门课程最高分：\"", ")\n    ", "print", "(maxMath, maxEng, maxPython)\n    ", "print", "(", "\"班级每门课程最低分：\"", ")\n    ", "print", "(minMath, minEng, minPython)\n", "def", " ", "Highnumberhistogram", "(", "mathScore", "):\n    ", "# 绘制高数直方图", "\n    plt.suptitle(", "\"成绩分布直方图\"", ")\n    plt.subplot(", "3", ", ", "1", ", ", "1", ")\n    plt.hist(mathScore, bins=", "10", ", ", "range", "=(", "0", ", ", "100", "), color=", "'red'", ")  ", "# 0-100分,分成10段", "\n    plt.xlabel(", "\"高数成绩分数段\"", ")  ", "# 设置x轴标签", "\n    plt.ylabel(", "\"人数\"", ")  ", "# 设置y轴标签", "\n    plt.xlim(", "0", ", ", "100", ")  ", "# 设置x轴区间", "\n    plt.xticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置x轴刻度", "\n    plt.yticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置y轴刻度", "\n    ", "# plt.grid()", "\n    plt.show()\n", "def", " ", "Englishhistogram", "(", "engScore", "):\n    ", "# 绘制英语直方图", "\n    plt.subplot(", "3", ", ", "1", ", ", "2", ")\n    plt.hist(engScore, bins=", "10", ", ", "range", "=(", "0", ", ", "100", "), color=", "'blue'", ")  ", "# 0-100分,分成10段", "\n    plt.xlabel(", "\"英语成绩分数段\"", ")  ", "# 设置x轴标签", "\n    plt.ylabel(", "\"人数\"", ")  ", "# 设置y轴标签", "\n    plt.xlim(", "0", ", ", "10", ")  ", "# 设置x轴区间", "\n    plt.xticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置x轴刻度", "\n    plt.yticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置y轴刻度", "\n    ", "# plt.grid()", "\n    plt.show()\n", "def", " ", "Scorehistogram", "(", "pythonScore", "):\n    ", "# 绘制python直方图", "\n    plt.suptitle(", "\"成绩分布直方图\"", ")\n    plt.subplot(", "3", ", ", "1", ", ", "3", ")\n    plt.hist(pythonScore, bins=", "10", ", ", "range", "=(", "0", ", ", "100", "), color=", "'green'", ")  ", "# 0-100分,分成10段", "\n    plt.xlabel(", "\"Python成绩分数段\"", ")  ", "# 设置x轴标签", "\n    plt.ylabel(", "\"人数\"", ")  ", "# 设置y轴标签", "\n    plt.xlim(", "0", ", ", "100", ")  ", "# 设置x轴区间", "\n    plt.xticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置x轴刻度", "\n    plt.yticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置y轴刻度", "\n    ", "# plt.grid()", "\n    plt.show()\n", "if", " __name__ == ", "'__main__'", ":\n    main()\n \n\n\n", "\n", "加一个python的饼图 不要重复的", "\n", "就要最后一列的那列数字  加到饼图里"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;是不是σΔp[i] &amp;#61; np.std(((Δp[i])), ddof&amp;#61;1)这一句里的Δp[i]格式不对啊&amp;#xff0c;我看你前一行转float来着&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python求标准差返回NAN", ["问题遇到的现象和发生背景", "\n", "对列表求标准差的时候为什么返回NAN，应该是正常的数值呀", "\n", "问题相关代码，请勿粘贴截图", "\n", "\nΔ", "p", " = pd", ".read_csv", "(", "\"C:/Users/DELL/Desktop/dt3.csv\"", ", header=", "0", ", usecols=", "[", "'Δp'", "]", ")\nΔp= np", ".array", "(Δp)\n\nσΔp=", "[]", "\n", "for", " ", "i", " ", "in", " range(len(Δp)):\n    σΔ", "p", ".append", "((", "float", "(Δp[i])))  \n    σΔ", "p", "[i]", " = np", ".std", "(", "float", "((Δp[i])), ddof=", "1", ")\n", "print", "(σΔp)", "\n", "\n", "运行结果及报错内容", "\n", "\n", "返回结果全为nan", "\n", "我的解答思路和尝试过的方法"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;个人习惯问题&amp;#xff0c;或者说国外跟国内的写法也不一样&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["正态分布是np模块的还是nd模块的", ["为什么CSDN中都是np模块而书上是nd模块?"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/kingbeful/article/details/3078306?locationNum=14", "Konwledge_Point": "应对NP完全问题", "Question": ["Sending Gift                ", ["Sending company has to send gift in the coming Christmas. One of the building of HangZhou which has 100 floors, there are many people working in the building will recieve gift in the coming Christmas. One of the staffer in the Sending company is dispatched to send gift to the tall building. It's so tired to send so many gift(but he has to do for money). Even worse there has no lift. Go up one floor cost 5 calories energy, Go down one floor cost 3 calories energy. The sending company aways use column to pack the gift, you can only fetch the gift at the two end of the column. Now the company pack these gift which sending to the tall building in two columns. Given the position(which floor) every gift has to send, now you are to find the min energy the staffer has to consume. ", "\n\n", "The staffer at the first floor at start.", "\n\n", "Input", "\n\n", "The first line if one integer P which is the test case. ", "\nThen P test follows,each test the first line if one integer N(N<=30) which is the number of gifts packed in the first column, the next line is N integers(between 1 and 100) which is the floor every gift (from one end to another) in the first column has to send.The next is one integer M(M<=30)which is the number of gifts packed in the second column, then next line is M integers (between 1 and 100) which is the floor every gift(from one end to another) in the second column has to send. ", "\n\n", "Output", "\n\n", "Just one integer the min energy(calories) the staffer has to consume. ", "\n\n", "Sample Input", "\n\n", "1 ", "\n2 ", "\n1 2 ", "\n3 ", "\n1 2 3 ", "\n\n", "Sample Output", "\n\n", "10 "]], "Tag": "算法设计"}
{"Answer": "array = N.loadtxt(csvdir,delimiter = ',',usecols = (3),skiprows = 1)\r\nnp.sum(array[1000:5000], axis=0)", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy 范围 求和 sum，条件如何编写", ["array = N.loadtxt(csvdir,delimiter = ',',usecols = (3),skiprows = 1)\n\n", "\n\n", "问题：", "\narray里面都是数据，想对array的数据进行区间求和，获得1000<x<5000的x的和", "\n\n", "请问用Numpy,sum()如何进行条件编写？", "\n\n", "在线等！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;注释//换成#号。&lt;/strong&gt;&lt;br /&gt;python中的注释是#号&amp;#xff0c;不是//&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/62536189563617.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么我引用  import pandas as pd后，运行程序 这一句有invalid syntax 错误呢（头痛）", []], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; matplotlib.pyplot as plt\n&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; matplotlib.patches as pc\n&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n&lt;span class=\"hljs-comment\"&gt;# 创建窗口&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;fig1&lt;/span&gt; &amp;#61; plt.figure()\n&lt;span class=\"hljs-attribute\"&gt;ax1&lt;/span&gt; &amp;#61; fig1.add_subplot(&lt;span class=\"hljs-number\"&gt;121&lt;/span&gt;) # 创建子图&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.xlim(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.ylim(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.axis(&lt;span class=\"hljs-string\"&gt;&amp;#34;equal&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-comment\"&gt;# 定义圆心&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;center&lt;/span&gt; &amp;#61; np.array([&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;])\n&lt;span class=\"hljs-attribute\"&gt;ax1&lt;/span&gt;.add_patch(pc.Circle(center,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)) # 画圆\n&lt;span class=\"hljs-attribute\"&gt;ax2&lt;/span&gt; &amp;#61; fig1.add_subplot(&lt;span class=\"hljs-number\"&gt;122&lt;/span&gt;) # 创建子图&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 画等边三角形的过程就是确定3个点,然后画直线即可&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 设左下角的点为(5,5),变成为10&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 可推测右下角的点(15,5)&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 顶点(10,sqrt(10**2 - 5 ** 2))&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;p1&lt;/span&gt; &amp;#61; (&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;p2&lt;/span&gt; &amp;#61; (&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;p3&lt;/span&gt; &amp;#61; (&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; ** &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; ** &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) ** &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\n&lt;span class=\"hljs-comment\"&gt;# 画四条直线,根据三个顶点&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;triangleX&lt;/span&gt; &amp;#61;&lt;span class=\"hljs-meta\"&gt; [p1[0],p2[0],p3[0],p1[0]] \ntriangleY &amp;#61; [p1[1],p2[1],p3[1],p1[0]]&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.axis(&lt;span class=\"hljs-string\"&gt;&amp;#34;equal&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.plot(triangleX,triangleY,&lt;span class=\"hljs-string\"&gt;&amp;#34;green&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.show() # 显示\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1 id=\"结果\"&gt;结果:&lt;/h1&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/17054739063616.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;h4 id=\"如果觉得答案对你有帮助请点击下采纳谢谢\"&gt;&lt;code class=\"language-javascript\"&gt;如果觉得答案对你有帮助,请点击下采纳,谢谢~&lt;/code&gt;&lt;/h4&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["要求在下面图片中，需要有注释", ["越简单越好，写下注释。谢谢。如果对一定及时采纳，感谢各位。一定采纳的我。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我怀疑是这里问题if ((c-&amp;gt;a) &amp;lt; 0 || (c-&amp;gt;b) &amp;gt; 100)输入错误应该是重新输入&amp;#xff0c;而不是返回&amp;#xff0c;你试试。\n    &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["数据结构入门题，计算a+b的值", ["输入n组数据；", "下面n组，每组两个数a，b；（0<=a,b<=100）", "输出a+b的值。", "\n", "代码是在visual studio 2019上写的也能运行起来，但是没过OJ，不知道哪个地方出了问题，谢谢！", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n\n ", "struct", " ", "arrye", " {\n    ", "int", " a;\n    ", "int", " b;\n    ", "struct", " ", "arrye", "* next;\n};\n ", "typedef", " ", "struct", " ", "arrye", "   arry;\n ", "typedef", " arry* link;\n\n ", "int", " ", "main", "(", "void", ")", "\n ", "{\n     link ab = ", "NULL", ";\n     link c = ", "NULL", ";\n     ", "int", " i=", "0", ";\n     ", "int", " n=", "0", ";\n     ab = (link)", "malloc", "(", "sizeof", "(arry));\n     ", "if", " (ab == ", "NULL", ")\n         ", "return", " ", "0", ";\n     ab->next = ", "NULL", ";\n           c = ab;\n     ", "scanf_s", "(", "\"%d\"", ", &n);", "//这个已经改成了scanf", "\n    \n     ", "while", " (i < n) \n     {\n         c->next = (link)", "malloc", "(", "sizeof", "(arry));\n         c = c->next;\n         c->next = ", "NULL", ";\n         ", "scanf_s", "(", "\"%d %d\"", ", &c->a, &c->b);\n         ", "if", " ((c->a) < ", "0", " || (c->b) > ", "100", ")\n             ", "return", " ", "0", ";\n         i++;\n\n     }\n     c = ab->next;\n     i = ", "1", ";\n     ", "while", " (c != ", "NULL", ")\n     {\n         ", "printf", "(", "\"case #%d:\\n\"", ", i);\n         ", "printf", "(", "\"%d\\n\"", ", c->a + c->b);\n         c = c->next;\n         i++;\n      }\n    \n     ", "while", " (ab != ", "NULL", ")\n     {\n         c = ab->next;\n         ", "free", "(ab);\n         ab = c;\n\n     }\n         ", "return", " ", "0", ";\n }\n\n"]], "Tag": "算法设计"}
{"Answer": "暂时没有解决方法。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。", "Konwledge_Point": "应对NP完全问题", "Question": ["跪求大神帮我检查一下BP算法计算异或问题程序的错误", ["感觉是权值更新部分出错了 ", "\n            运行出来都是0.5左右  不知道为啥", "\n\n", "import math\nimport numpy as np\nimport random as rd\ndef sigmoid(x):\n    f = 1/(1+np.exp(-1*x))\n    return f\n\ndef sigmoid_(x):\n\n    f = [[sigmoid(x[i][j])*(1-sigmoid(x[i][j]))  for j in range(len(x[i]))] for i in range(len(x))]\n    return f\n\ndef differentail_matrix(x):\n    f = np.diag(x[0])\n    return f\n\ninput_X = np.array([[0,0],[1,0],[0,1],[1,1]])\n#print(input_X.shape)\ninput_Y = np.array([[0],[1],[1],[0]])\n#print(input_Y.shape)\n\nW1 = np.random.rand(2,2) #later input,former output\nb1 = np.zeros([2,1])\n#W1 = np.array([[2,2],[-1,-1]])\n#b1 = np.array([[-1],[1.5]])\nW2 = np.random.rand(1,2)\nb2 = np.random.rand(1,1)\n# W2 = np.array([1,1])\n# W2.shape = 1,2\n# b2 = np.array([-1.0])\n#print(W1,b1)\n\nalpha = 0.05 #learn rate\nfor k in range(10000):\n\n    r = rd.sample([0,1,2,3], 1)           #随机抽取\n\n\n\n    X = np.array(input_X[r])\n    X.shape = 2,1                        #transpose\n    Y = np.array(input_Y[r])\n\n    out1 = sigmoid(np.dot(W1,X) + b1)\n    pred_y = sigmoid(np.dot(W2,out1) + b2)\n    #print('predy:',pred_y)\n    err = Y-pred_y\n    #print('err:',err)\n\n\n    #back propagation\n\n    s2 = -2*sigmoid(pred_y)*(1-sigmoid(pred_y))*err         #计算敏感度\n\n    temp = sigmoid_(out1)\n\n    temp = np.array(temp)\n    temp.shape = 1, 2\n    temp2 = np.array(differentail_matrix(temp))\n    s1 = np.dot(temp2, W2.T)*s2\n\n    W2 = W2-alpha*s2*np.transpose(out1)               #权值更新\n    b2 = b2 - alpha*s2\n\n    W1 = W1 - alpha*np.dot(s1,np.transpose(X))\n    b1 = b1 - alpha*s1\n\n\n    #print('第:',i,'次迭代','\\n','权值1',W1,'\\n',b1)\n    #print()\n\n\n    if k%500 == 0:\n        out1 = sigmoid(np.dot(W1,np.transpose(input_X)) + b1)\n        pred_y = sigmoid(np.dot(W2,out1) + b2)\n        print(pred_y)\n"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/ThorKing01/article/details/97512228", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么Python和C++对同一矩阵进行SVD得到结果的V不同？", ["使用Pyhon对一个8*9的矩阵进行SVD得到的V是9*9的，但是为什么用C++的Eigen的SVD处理同一矩阵得到的V是9*8的？", "\nPyhon中：", "\n[U,S,V] = np.linalg.svd(A)", "\nC++中：", "\nEigen::JacobiSVD", "Eigen::MatrixXf", " svd(A, Eigen::ComputeThinU | Eigen::ComputeThinV);", "\ncout<<svd.matrixV()<<endl;"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;num&amp;#43;1改成num&amp;#43;&amp;#61;1,要不然知识第一张图片添加了6次&amp;#xff0c;其次你调试的时候直接打印出列表而不是列表的值会更好&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["训练识别器时候出的问题，报错是样本和标签不匹配，都是我用print（len（））打出来是一个结果", ["训练识别器时候出的问题，报错是样本和标签不匹配，都是我用print（len（））打出来是一个结果，样本和标签数量都是6.", "\n", "import pymysql\nimport cv2\nimport numpy ", "as", " np\n", "from", " cv2 import face\nimport os\nimport pymysql\n", "#连接数据库", "\nconnect = pymysql.connect(host=", "\"localhost\"", ", user=", "\"root\"", ", password=", "\"root\"", ", database=", "\"face\"", ")\n", "#创建一个游标", "\ncur = connect.cursor()\n", "#查询MySQL中的face表格", "\nuserid = ", "\"123\"", "\nsql = ", "\"select ids,sname from face\"", "\ncur.execute(sql)\n", "#获取face表中的数据", "\n", "result", "= cur.fetchall()\n", "#将从MySQL中读取的数据元组转为字典", "\n", "result", "=dict(", "result", ")\n", "#提取字典中的key值并转化为列表", "\nkeyvalues = list(map(int,", "result", ".", "keys", "()))\n", "#样本图像列表", "\nphotos =list()\n", "#标签列表", "\nlables =list()\nwenjianjia = os.listdir(", "\"D:/python/opencv/shuju\"", ")\n", "num", "=", "1", "\n", "for", " ids ", "in", " wenjianjia:\n    ", "if", " ", "num", "<", "len", "(ids)+", "1", ":\n        photos.append(cv2.imread(", "\"D:/python/opencv/shuju/\"", "+ids+", "\"/\"", "+str(", "num", ")+", "\".png\"", ",", "0", "))\n        lables.append(keyvalues)\n        ", "num", "+", "1", "\nprint(", "len", "(lables))\nprint(", "len", "(photos))\n", "#加载识别器（LBPH）", "\nrecognizer=cv2.face.LBPHFaceRecognizer_create()\n", "#识别器训练", "\nrecognizer.train(photos,np.array(lables))\n", "#训练结果录入", "\nrecognizer.", "write", "(", "'./trainer_face.yml'", ")\n\n\n运行结果：\nrecognizer.train(photos,np.array(lables))\ncv2.error: OpenCV(", "4.5", ".4", ") D:\\", "a", "\\opencv-python\\opencv-python\\opencv_contrib\\modules\\face\\src\\lbph_faces.cpp:", "375", ": error: (", "-5", ":Bad argument) The ", "number", " ", "of", " samples (src) must equal ", "the", " ", "number", " ", "of", " labels (labels). Was ", "len", "(samples)=", "6", ", ", "len", "(labels)=", "0.", " ", "in", " ", "function", " ", "'cv::face::LBPH::train'", "\n", "6", "\n", "6", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;毫无关系&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["这个是不是检测模拟器的代码", ["帮忙看一下这个代码是不是检测模拟器的，我用模拟器玩游戏闪退拦截了这个代码", "\n", "//\n// Decompiled by Jadx (from NP Manager)\n//\npackage com.unity3d.player;\n\n", "import", " java.lang.Thread.UncaughtExceptionHandler;\n\nfinal class m implements UncaughtExceptionHandler {\n    ", "private volatile UncaughtExceptionHandler a;\n\n    m() {\n    }\n\n    final synchronized boolean a() {\n        boolean z;\n        m defaultUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();\n        if (defaultUncaughtExceptionHandler == this) {\n            z = false;\n        } else {\n            this.a = defaultUncaughtExceptionHandler;\n            Thread.setDefaultUncaughtExceptionHandler(this);\n            z = true;\n        }\n        return z;\n    }\n\n    /*  JADX ERROR", ": NullPointerException in pass: BlockSplitter\n        java", ".lang", ".NullPointerException", ": Attempt to invoke virtual method 'boolean jadx", ".core", ".dex", ".nodes", ".BlockNode", ".contains", "(jadx", ".core", ".dex", ".attributes", ".AType", ")' on a null object reference\n            at jadx", ".core", ".dex", ".visitors", ".blocksmaker", ".BlockSplitter", ".connectExceptionHandlers", "(Unknown Source:64)\n            at jadx", ".core", ".dex", ".visitors", ".blocksmaker", ".BlockSplitter", ".setupConnections", "(Unknown Source:58)\n            at jadx", ".core", ".dex", ".visitors", ".blocksmaker", ".BlockSplitter", ".splitBasicBlocks", "(Unknown Source:23)\n            at jadx", ".core", ".dex", ".visitors", ".blocksmaker", ".BlockSplitter", ".visit", "(Unknown Source:13)\n            at jadx", ".core", ".dex", ".visitors", ".DepthTraversal", ".visit", "(Unknown Source:9)\n            at jadx", ".core", ".dex", ".visitors", ".DepthTraversal", ".visit", "(Unknown Source:41)\n            at jadx", ".core", ".ProcessClass", ".process", "(Unknown Source:54)\n            at jadx", ".api", ".JadxDecompiler", ".processClass", "(Unknown Source:4)\n            at jadx", ".api", ".JavaClass", ".decompile", "(Unknown Source:19)\n        */\n    public final synchronized void uncaughtException(java", ".lang", ".Thread", " r8, java", ".lang", ".Throwable", " r9) {\n        /*\n        r7 = this;\n        ", "return r0;\n        monitor-enter(r7);\n        r0 = new java.lang.Error;     Catch", ":{ Throwable -> 0x0066 }\n        r1 = new java", ".lang", ".StringBuilder", ";     ", "Catch", ":{ Throwable -> 0x0066 }\n        r1.<init>();     ", "Catch", ":{ Throwable -> 0x0066 }\n        r2 = \"FATAL EXCEPTION [%s]\\n\";     ", "Catch", ":{ Throwable -> 0x0066 }\n        r3 = 1;     ", "Catch", ":{ Throwable -> 0x0066 }\n        r4 = new java", ".lang", ".Object", "[r3];     ", "Catch", ":{ Throwable -> 0x0066 }\n        r5 = r8", ".getName", "();     ", "Catch", ":{ Throwable -> 0x0066 }\n        r6 = 0;     ", "Catch", ":{ Throwable -> 0x0066 }\n        r4[r6] = r5;     ", "Catch", ":{ Throwable -> 0x0066 }\n        r2 = java", ".lang", ".String", ".format", "(r2, r4);     ", "Catch", ":{ Throwable -> 0x0066 }\n        r1", ".append", "(r2);     ", "Catch", ":{ Throwable -> 0x0066 }\n        r2 = \"Unity version     : %s\\n\";     ", "Catch", ":{ Throwable -> 0x0066 }\n        r4 = new java", ".lang", ".Object", "[r3];     ", "Catch", ":{ Throwable -> 0x0066 }\n        r5 = \"2018.4.30f1\";     ", "Catch", ":{ Throwable -> 0x0066 }\n        r4[r6] = r5;     ", "Catch", ":{ Throwable -> 0x0066 }\n        r2 = java", ".lang", ".String", ".format", "(r2, r4);     ", "Catch", ":{ Throwable -> 0x0066 }\n        r1", ".append", "(r2);     ", "Catch", ":{ Throwable -> 0x0066 }\n        r2 = \"Device model      : %s %s\\n\";     ", "Catch", ":{ Throwable -> 0x0066 }\n        r4 = 2;     ", "Catch", ":{ Throwable -> 0x0066 }\n        r4 = new java", ".lang", ".Object", "[r4];     ", "Catch", ":{ Throwable -> 0x0066 }\n        r5 = android", ".os", ".Build", ".MANUFACTURER", ";     ", "Catch", ":{ Throwable -> 0x0066 }\n        r4[r6] = r5;     ", "Catch", ":{ Throwable -> 0x0066 }\n        r5 = android", ".os", ".Build", ".MODEL", ";     ", "Catch", ":{ Throwable -> 0x0066 }\n        r4[r3] = r5;     ", "Catch", ":{ Throwable -> 0x0066 }\n        r2 = java", ".lang", ".String", ".format", "(r2, r4);     ", "Catch", ":{ Throwable -> 0x0066 }\n        r1", ".append", "(r2);     ", "Catch", ":{ Throwable -> 0x0066 }\n        r2 = \"Device fingerprint: %s\\n\";     ", "Catch", ":{ Throwable -> 0x0066 }\n        r3 = new java", ".lang", ".Object", "[r3];     ", "Catch", ":{ Throwable -> 0x0066 }\n        r4 = android", ".os", ".Build", ".FINGERPRINT", ";     ", "Catch", ":{ Throwable -> 0x0066 }\n        r3[r6] = r4;     ", "Catch", ":{ Throwable -> 0x0066 }\n        r2 = java", ".lang", ".String", ".format", "(r2, r3);     ", "Catch", ":{ Throwable -> 0x0066 }\n        r1", ".append", "(r2);     ", "Catch", ":{ Throwable -> 0x0066 }\n        r1 = r1", ".toString", "();     ", "Catch", ":{ Throwable -> 0x0066 }\n        r0.<init>(r1);     ", "Catch", ":{ Throwable -> 0x0066 }\n        r1 = new java", ".lang", ".StackTraceElement", "[r6];     ", "Catch", ":{ Throwable -> 0x0066 }\n        r0", ".setStackTrace", "(r1);     ", "Catch", ":{ Throwable -> 0x0066 }\n        r0", ".initCause", "(r9);     ", "Catch", ":{ Throwable -> 0x0066 }\n        r1 = r7", ".a", ";     ", "Catch", ":{ Throwable -> 0x0066 }\n        r1", ".uncaughtException", "(r8, r0);     ", "Catch", ":{ Throwable -> 0x0066 }\n        monitor-exit(r7);\n        ", "return;\n        r8 = move-exception;\n        goto L_0x006d;\n    L_0x0066", ":\n        r0 = r7", ".a", ";     ", "Catch", ":{ all -> 0x0064 }\n        r0", ".uncaughtException", "(r8, r9);     ", "Catch", ":{ all -> 0x0064 }\n        monitor-exit(r7);\n        ", "return;\n    L_0x006d", ":\n        monitor-exit(r7);\n        ", "throw r8;\n        */\n        throw new UnsupportedOperationException(\"Method not decompiled", ": com", ".unity", "3d", ".player", ".m", ".uncaughtException", "(java", ".lang", ".Thread", ", java", ".lang", ".Throwable", "):void\");\n    }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "labels = [left,right,top,bottom]，左右上下\r\n\r\nlabels=[1,1,0,1]即labels=[true,true,false,true]\r\n即经纬度标签标识地图位置，在地图的左右上下进行标识\r\n\r\n实例代码是说在地图左右和下方标识纬度label信息\r\n\r\n\r\n以下是 Jeffrey Whitaker的源码：\r\n\r\n\r\n```\r\nfrom mpl_toolkits.basemap import Basemap\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n# setup Lambert Conformal basemap.\r\nm = Basemap(width=12000000,height=9000000,projection='lcc',\r\n            resolution='c',lat_1=45.,lat_2=55,lat_0=50,lon_0=-107.)\r\n# draw coastlines.\r\nm.drawcoastlines()\r\n# draw a boundary around the map, fill the background.\r\n# this background will end up being the ocean color, since\r\n# the continents will be drawn on top.\r\nm.drawmapboundary(fill_color='aqua')\r\n# fill continents, set lake color same as ocean color.\r\nm.fillcontinents(color='coral',lake_color='aqua')\r\n# draw parallels and meridians.\r\n# label parallels on right and top\r\n# meridians on bottom and left\r\nparallels = np.arange(0.,81,10.)\r\n# labels = [left,right,top,bottom]\r\nm.drawparallels(parallels,labels=[False,True,True,False])\r\nmeridians = np.arange(10.,351.,20.)\r\nm.drawmeridians(meridians,labels=[True,False,False,True])\r\nplt.show()\r\n\r\n```", "Konwledge_Point": "应对NP完全问题", "Question": ["python 画经纬度的函数drawparallel", ["我想知道里面的label是怎么用的？这里的【1，1，0，1】是什么意思", "\n\n", "m.drawparallels(np.arange(24,41,0.05),labels=[1,1,0,1])\n"]], "Tag": "算法设计"}
{"Answer": "没有发现修改的地方，推荐使用第二种方式，pickle模块在python3内置，不需要传递额外的参数", "Konwledge_Point": "应对NP完全问题", "Question": ["python numpy 中ndarry转成string后怎么转回来", ["我用request.post（）发送请求，data中数组不会传，所以想把数组转成string，得知", "\nndarray可以通过方式tostring将ndarry形式的数据转成string ,但不知道怎么转回来。，", "\n求大神指教"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;else if(index2 &amp;#61; 0)&lt;/p&gt;\n&lt;p&gt;改为&lt;br /&gt;else if(index2 &amp;#61;&amp;#61; 0)&lt;/p&gt;\n&lt;p&gt;&amp;#61;&amp;#61;才是判断是否相等。&amp;#61;是赋值。&lt;br /&gt;由于if(index2 &amp;#61; 0)是赋值&amp;#xff0c;所以index的值就被改为0啦。任何数的0次方都是1&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么这个函数power（）不能计算 负幂？", ["double power(double dot2 , int index2);", "int main(void)", "{", "    double dot1;", "    int index1;", "\n", "double answer", ";", "\n\nscanf(", "\"%Lf%d\"", ",", "&dot1", ",", "&index1", ")", ";", "\nanswer = power(", "dot1", ",index1)", ";", "\nprintf(", "\"%.3g\"", ",answer)", ";", "\n\nreturn ", "0", ";", "\n", "\n", "}", "\n", "double power(double dot2 , int index2)", "{", "    int num;", "    double answer2 = 1;", "\n", "if(index2 > ", "0", " )\n    for(num ", "=", " ", "0", " ", "; num < index2 ; num ++)", "\n        answer2 *", "=", " dot2", ";", "\n\nelse if(index2 ", "=", " ", "0", ")\n    answer2 ", "=", " ", "1", ";", "\n    \nelse(index2 < ", "0", ")\n    for(num ", "=", " ", "0", " ", "; num < -index2 ; num ++)", "\n        answer2 *", "=", " ", "1", "/dot2", ";", "\n\nreturn answer2", ";", "\n", "\n", "}", "\n", "为什么这个函数power（）不能计算 负幂？", "每次第二个数输入负数总数输出1又是为什么？"]], "Tag": "算法设计"}
{"Answer": "当调用 setTypeface() 你可以设置外观：\r\n\r\n    textView.setTypeface(APP_FONT_REGULAR, Typeface.BOLD);", "Konwledge_Point": "应对NP完全问题", "Question": ["在 xml 中以程序化的方式设置 Typeface 和 text style", ["我在xml中定义了一个textview，我按照下面的方法设置了Typeface", "\n\n", "textView.setTypeface(APP_FONT_REGULAR); // 在 assests 中自定义字体 (.ttf file).\n", "\n\n", "在xml中设置了 ", "android:textStyle=\"bold\"", "\n但是为什么没有变成粗体字？", "\n\n", "如何给字体设置粗体？"]], "Tag": "算法设计"}
{"Answer": "http://hant.ask.helplib.com/mip/12821422", "Konwledge_Point": "应对NP完全问题", "Question": ["keras自定义metric计算精确率和召回率", ["在keras中，在model compile的时候可以通过设置metrics的方式确定预测指标，但是keras已经写好的函数中没有精确率和召回率的实现，因此需要自定义这两个指标，哪位大大能帮忙实现一下？拜谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;Quadratic&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;定义二次函数&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * x ** &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; * x &amp;#43; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;\n\n\nx &amp;#61; np.linspace(-&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 将积分区间30等分&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(x)\ny &amp;#61; Quadratic(x)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(y)\nplt.plot(x, y)  &lt;span class=\"hljs-comment\"&gt;# 绘制函数曲线&lt;/span&gt;\nplt.plot(x, [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]*&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(x), color&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;b&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(x)):  &lt;span class=\"hljs-comment\"&gt;# 绘制x轴&lt;/span&gt;\n    plt.plot([x[i], x[i]], [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, y[i]])  &lt;span class=\"hljs-comment\"&gt;# 绘制梯形的上底和下底&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(x) - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    plt.plot([x[i], x[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]], [y[i], y[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]])  &lt;span class=\"hljs-comment\"&gt;# 将梯形的斜腰连起来&lt;/span&gt;\nplt.show()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/011703075666125.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["matplotlib画图题", ["\n", "这两个空要填写什么(ﾟoﾟ;看不懂，是要填写范围还是什么东西"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;img1,img2从gpu拿到cpu还是tensor&amp;#xff0c;要img.cpu().numpy(),然后进行格式转换。如果有帮助请采纳。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pytorch中计算灰度图的psnr", ["\n", "\n\n######这里是计算psnr方式\ndef calc_psnr(img1,img2):   \n    img1 = Variable( img1, requires_grad=False)    \n    img2 = Variable( img2, requires_grad = False)\n    img1 = img1.cpu()\n    img1 = np.array(img1).astype(np.float32)\n\n    img1 = torch.from_numpy(img1).float().unsqueeze(0)\n   \n    img2 = img2.cpu()\n    img2 = np.array(img2).astype(np.float32)\n   \n    img2 = torch.from_numpy(img2).float().unsqueeze(0)\n\n    PSNR = peak_signal_noise_ratio(img1,img2).item()\n\n    return PSNR\n\n\n\n#####提示错误\nAttributeError: 'torch.dtype' object has no attribute 'type'\n\n\n\n\n########这里是前面训练过程中调用psnr更新，不会出错\nepoch_psnr.update(calc_psnr(preds, labels), len(inputs))", "\n\n", "我在训练神经网络时，需要用灰度图数据集，使用传统的RGB转ycbcr的方法，psnr会输出nan。使用from skimage.metrics import peak_signal_noise_ratio计算的话，经过测试两幅图片可以计算。但是在训练过程中，给对应的preds和lable训练时，会出现numpy数组很tensor张量转换之间的问题，萌新不太懂，请问各位大佬这里应该怎么改呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我使用的是循环遍历列表&amp;#xff0c;然后逐个判断是否需要添加到相应列表来完成题目要求。代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;参考链接&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"https://blog.csdn.net/weixin_42577243/article/details/112864277\" id=\"textarea_1660187444678_1660187468945_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;python中的array是什么意思_python中数组&amp;#xff08;numpy.array&amp;#xff09;的基本操作_BE东欲的博客-CSDN博客&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/u010292470/article/details/121090914\" id=\"textarea_1660187444678_1660187468945_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;Python教程&amp;#xff1a;在Python中遍历列表详解_站长在线的博客-CSDN博客_python 遍历列表&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=\"https://www.jianshu.com/p/3a7ffd6884d8\" id=\"textarea_1660187444678_1660187468945_2\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np  #https://blog.csdn.net/weixin_42577243/article/details/&lt;span class=\"hljs-number\"&gt;112864277&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;]\n&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;np.array(a)\n\n&lt;span class=\"hljs-comment\"&gt;#print(a)&lt;/span&gt;\n\n&lt;span class=\"hljs-attribute\"&gt;c&lt;/span&gt;&amp;#61;[]  #存放最终结果的列表\n&lt;span class=\"hljs-attribute\"&gt;t&lt;/span&gt;&amp;#61;[] #存放被&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;分隔的数字的列表t\n\n&lt;span class=\"hljs-comment\"&gt;#https://blog.csdn.net/u010292470/article/details/121090914&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; i in a:  #遍历原始列表\n    \n    &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt;(i!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;):   #如果原始列表当前值不是&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#xff0c;则添加到分隔数字的列表t\n        &lt;span class=\"hljs-attribute\"&gt;t&lt;/span&gt;.append(i)\n        &lt;span class=\"hljs-comment\"&gt;#print(&amp;#34;t.append(i)&amp;#34;,i)&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;else&lt;/span&gt; :  #如果当前是数字是&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#xff0c;则判断与执行是否将分隔数字的列表t添加到最终结果列表c\n    &lt;span class=\"hljs-comment\"&gt;#https://www.jianshu.com/p/3a7ffd6884d8&lt;/span&gt;\n        &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; len(t)!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;: #如果分隔数字的列表c有值&amp;#xff0c;则添加到最终结果列表&amp;#xff0c;同时将分隔数字的列表t置为空列表&amp;#xff0c;以存放下一组数字\n            &lt;span class=\"hljs-comment\"&gt;#print(t)&lt;/span&gt;\n            \n            &lt;span class=\"hljs-attribute\"&gt;c&lt;/span&gt;.append(t)\n            &lt;span class=\"hljs-attribute\"&gt;t&lt;/span&gt;&amp;#61;[]\n            \n&lt;span class=\"hljs-comment\"&gt;#判断最后一组分隔数字列表t是否有值&amp;#xff0c;有值则将最后一组数字添加到最终结果列表c&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; len(t)!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n    &lt;span class=\"hljs-attribute\"&gt;c&lt;/span&gt;.append(t)\n    \n&lt;span class=\"hljs-comment\"&gt;#打印结果    &lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(c)\n    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/733144781066137.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python，运用np，内置函数的切片", ["a是可变的数组，给a，或者b切片。", "\n", "a", "=[", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "6", ",", "0", ",", "0", ",", "0", ",", "0", ",", "7", ",", "0", ",", "8", ",", "9", "]\n", "b", "=np.array(a)\n", "\n", "输出结果是：被0隔开的非0数组。", "例，a的输出结果是：", "\n", "c", "=[[", "1", ",", "2", "],[", "4", ",", "5", ",", "6", "],[", "7", "],[", "8", ",", "9", "]]\n"]], "Tag": "算法设计"}
{"Answer": "if flag then\r\n\t V_PRO := 'select * from table_name t where t.name like '%_% ';\r\n\t else \r\n\t  V_PRO := 'select * from table_name t where t.name like  '%escape%';\r\n      EXECUTE IMMEDIATE V_PRO;\r\n\t\t\t\r\n\t\t\t你看这样行么。动态语句", "Konwledge_Point": "应对NP完全问题", "Question": ["SQL问题求解决！！！！！！！！！！", ["模糊查询带下划线和普通模糊查询能公用一条SQL吗？怎么写？（下面的只能查到带下划线的）", "\n\n", "                select * from table_name t where t.name like '%\\_%'escape'\\'\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;data1.append((start_num[i], end_num[i], data[i][75]))&lt;br /&gt;中data[i][75]是取每行的第76个字段, 你数据库中有76个字段吗&lt;br /&gt;没有就是tuple index out of range元组的下标75超过了索引的范围&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python运行问题IndexError: tuple index out of range", ["IndexError: tuple index out of range", "\n", "\n", "import pymysql\nimport operator\n", "''", "'创建数据库'", "''", "\nimport pymysql\nimport numpy as np\n#  打开数据库连接，不需要指定数据库，因为需要创建数据库\n#  conn = pymysql.connect(", "'localhost'", ",user = ", "\"root\"", ",passwd = ", "\"639801\"", ",db=", "'maintenance'", ")\nconn = pymysql.connect(host=", "\"127.0.0.1\"", ", user=", "\"root\"", ", password=", "\"639801\"", ", database=", "\"user1\"", ", port=", "3306", ", autocommit=", "True", ")\n#  获取游标\ncursor=conn.cursor()\n#  cursor.execute()\n#  查询数据\ncursor.execute(", "\"select * from maintenance1\"", ")\ndata = cursor.fetchall()\nrow = cursor.rowcount  # 取得记录个数，用于设置表格的行数\nvol = len(data[", "0", "])  # 取得字段数，用于设置表格的列数\nprint(row)\nstart_num=[", "0.0", "]*row\nend_num=[", "0.0", "]*row\ndata1=[]\nfor i in range(row):\n    if data[i][", "1", "] != ", "None", " and ", "\"+\"", " in data[i][", "1", "]:\n        start_str=str(data[i][", "1", "])\n        if ", "\"k\"", " in start_str:\n            start_int1 = start_str[start_str.index(", "\"k\"", ") + ", "1", ":start_str.index(", "\"+\"", ")]\n        if ", "\"K\"", " in start_str:\n            start_int1 = start_str[start_str.index(", "\"K\"", ") + ", "1", ":start_str.index(", "\"+\"", ")]\n        start_int2 = start_str[start_str.index(", "\"+\"", ") + ", "1", ":]\n        start_num1 = float(start_int1)*", "1000", "+float(start_int2)\n    else:\n        start_num1 = data[i][", "1", "]\n\n    if data[i][", "2", "]!= ", "None", " and ", "\"+\"", " in data[i][", "2", "]:\n        end_str = str(data[i][", "2", "])\n        if ", "\"k\"", " in end_str:\n            end_int1 = end_str[end_str.index(", "\"k\"", ") + ", "1", ":end_str.index(", "\"+\"", ")]\n        if ", "\"K\"", " in end_str:\n            end_int1 = end_str[end_str.index(", "\"K\"", ") + ", "1", ":end_str.index(", "\"+\"", ")]\n        end_int2 = end_str[end_str.index(", "\"+\"", ") + ", "1", ":]\n        end_num1 = float(end_int1)*", "1000", "+float(end_int2)\n    else:\n        end_num1 = data[i][", "2", "]\n    start_num[i] = start_num1\n    end_num[i] = end_num1\n    data1.append((start_num[i], end_num[i], data[i][", "75", "]))\n\nprint(data1)\nsql=", "\"UPDATE maintenance1 SET start_number=(%s),end_number =(%s) WHERE id=(%s)\"", "\n\ncursor.executemany(sql, data1)\ncursor.close()\nconn.commit()\nconn.close()\nprint(", "'sql执行成功'", ")\n\n", "\n", "执行结果", "\n", " 928", "Traceback (most recent call last):", "  File \"E:/python1xuexi/pythonProject5/zhuanghao2.py\", line 45, in ", "    data1.append((start_num[i], end_num[i], data[i][75]))", "IndexError: tuple index out of range", "\n", "Process finished with exit code 1", "\n", "换一个数据库连接就行了，很奇怪，找不到解决方案，求帮助啊", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "```\r\n(*L).next=LL;\r\n优先级的问题。\r\n\r\n比如\r\nint a[10];\r\nint * p = &amp;a[0];\r\na[0] = 10;\r\na[1] = 20;\r\n*p++; //这是 *(p++)而不是(*p)++\r\nprintf(\"%d\", *p); //20，如果是 (*p)++，输出应该是11\r\n```", "Konwledge_Point": "应对NP完全问题", "Question": ["这是数据结构一个简单的链表问题", ["\n#include<iostream>\n#include<conio.h>\n#include<string.h>\n#define OK 1\n#define MAXSIZE 100\nusing namespace std;\ntypedef  int Status;\n\ntypedef  struct  \n{\nchar name[5];\nfloat price;    \n}Book;\ntypedef Book ElemType;\n\ntypedef  struct LNode\n{\nElemType data;\nstruct LNode *next;\n\n\n}LNode,*LinkList;\n\nint main()\n{\n\n\n\nLNode *L=new LNode();\nLNode *LL;\n*L.next=LL;\n\n\n\n\n\n\ngetch();\n\n\nreturn 0;\n}\n\n", "\n\n", "我想弄个含两个结点的单链表，*L是第一个，*LL是第二个，但是在写地址相连代码的时候（即*L.next=LL;），报了这个错误", "\n\n", "\n\n", "我感觉很奇怪，定义的指针L也开辟空间了，然后选取了地址next属性，完成对另一个指针的赋值，代码应该没毛病啊。求教"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;要把两个拟合并的数据从ndarray转成dataframe,,df&amp;#61;pd.DataFrame(array)再合并。示例&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;import pandas as pd \nimport numpy as np\ndfa&amp;#61;pd.DataFrame(np.random.rand(10,7),columns&amp;#61;list(&amp;#39;abcdefg&amp;#39;))\nprint(type(dfa.values))\nprint(dfa)\ndfb&amp;#61;pd.DataFrame({&amp;#39;h&amp;#39;:np.random.randint(10,20,10)})\ndf&amp;#61;pd.concat([dfa,dfb],axis&amp;#61;1)\nprint(df.shape)\n\n\n#结果是&amp;#xff08;10&amp;#xff0c;8&amp;#xff09;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pandas 两个Dataframe 如何合并", ["第一个dataframe：A", "\n\n", "\n\n", "第二个dataframe：B", "\n\n", "\n\n", " ", "\n\n", "尝试用了concat和append都没成功", "\n\n", "concat码： result = pd.concat([A,B],axis=1)", "\n\n", "出来的数据是33960x33960", "\n\n", "不是很懂", "\n\n", "希望大佬不吝赐教"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;从命令行显示信息看python版本信息及系统信息正常&amp;#xff0c;建议选择对应的numpy版本重新安装。也可从这里下载安装&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy\" id=\"textarea_1644648566633_1644648931292_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;-&amp;gt;&amp;gt;numpy‑1.22.2&amp;#43;mkl‑cp310‑cp310‑win_amd64.whl&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python安装numpy时报错，如何解决？", ["问题遇到的现象和发生背景 ：开始显示pip版本需要更新，然后成功更新了，到import numpy as np这一步时报错", "\n", "问题相关代码，请勿粘贴截图", "\n", ">>>", " ", "import", " numpy ", "as", " np", "\n", "\n", "运行结果及报错内容", "\n", "Traceback", " (most recent call last):\n  ", "File", " ", "\"<stdin>\"", ", line ", "1", ", in <", "module", ">\n  ", "File", " ", "\"D:\\Appilication\\Python\\lib\\site-packages\\numpy\\__init__.py\"", ", line ", "138", ", in <", "module", ">\n    from . ", "import", " _distributor_init\n  ", "File", " ", "\"D:\\Appilication\\Python\\lib\\site-packages\\numpy\\_distributor_init.py\"", ", line ", "26", ", in <", "module", ">\n    ", "WinDLL", "(os.path.", "abspath", "(filename))\n  ", "File", " ", "\"D:\\Appilication\\Python\\lib\\ctypes\\__init__.py\"", ", line ", "374", ", in __init__\n    self._handle = _dlopen(self._name, mode)\nOSError: [WinError ", "193", "] %", "1", " 不是有效的 Win32 应用程序。\n>>>\n", "\n", "我的解答思路和尝试过的方法 ：想过会不会是因为安装的python是64位的哪里版本不一致，还怀疑我电脑是不是32位的然后看了电脑系统是64位", "\n", "为什么cmd里安装的python显示：", "C:\\Users\\Oreo>python", "Python 3.10.2 (tags/v3.10.2:a58ebcc, Jan 17 2022, 14:12:15) [MSC v.1929 64 bit (AMD64)] on win32  ", "\n", "我想要达到的结果 只想要安装个numpy库，属实是有些不知道该咋搞了，求指教！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个证明不了&amp;#xff0c;别费心思了。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如果证明了大数分解问题存在多项式时间的算法，是否相当于证明了P=NP？", ["    关于大数分解问题，有人认为是", "P", "问频，有人认为不是", "P", "问题。同样有趣的是，有人认为这一问题是NP问题，也有人认为不是NP问题。大多数人认为大数分解问是NP问题，并在信息安全系统广泛使用，充分的理由是分解大数的过程与NP问题的定义是一致的。事实上，这仅仅是通过语言的表述性说明大数分解问题是NP问题，并没有通过公式的确定性来证明这一问题。也许是本人的阅读范围有限，因而未看到证明的过程，请求有相关资源的老师能提供帮助。\n     谢谢大家！\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;python矩阵坐标一般是0开始的。调用了numpy库&amp;#xff0c;如下示意代码请参考。 &lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;import numpy as np\n\narr&amp;#61;np.array([[0, 0, 0, 0, 1],\n              [1, 1, 0, 1, 0],\n              [1, 0, 1, 1, 0],\n              [1, 0, 0, 1, 0],\n              [1, 0, 0, 0, 1]])\nidx&amp;#61;np.array(np.where(arr&amp;#61;&amp;#61;1))\nif idx.shape[1]&amp;gt;0:\n    print(&amp;#39;where arr&amp;#61;&amp;#61;1, index is: &amp;#39;)\n    for i in range(idx.shape[1]):\n        print((idx[0,i],idx[1,i]))\nelse:\n    print(&amp;#39;no exits index where arr&amp;#61;&amp;#61;1&amp;#39;)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何获取dataframe或array中 值为1的元素的坐标", ["例如我有一个5*5的矩阵", "\n\n", "\narray([[0, 0, 0, 0, 1],\n       [1, 1, 0, 1, 0],\n       [1, 0, 1, 1, 0],\n       [1, 0, 0, 1, 0],\n       [1, 0, 0, 0, 1]])", "\n\n", "第一行第五列的元素值就为1，那么把它的坐标记成（1，5），", "\n\n", "第二行第一列的元素值也为1，记为（2，1）我想要获取矩阵中所有值为1的元素的坐标要怎么做。或者用pandas做也行"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你可以再试一下&amp;#xff0c;是不是不小心写成zeros了&amp;#xff0c;我的是可以的&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/189563327936178.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么np.empty((3,2))元素不是随机的？", ["\n", "唯独只有(3,2)传进去就不是随机元素", "我重复运行了几遍np.empty((3,2))", "但是里面的元素始终只有0", "这是为何？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;max([len(x.split(&amp;#34; &amp;#34;)) for x in x_data])&amp;#xff0c;你的x的数据类型可能是numpy&amp;#xff0c;她是没有.split属性的&amp;#xff0c;你把x转换为字符串&amp;#xff0c;如str(x)&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["AttributeError: 'numpy.ndarray' object has no attribute 'split'", ["问题遇到的现象和发生背景", "\n", "AttributeError: 'numpy.ndarray' object has no attribute 'split'", "\n", "问题相关代码，请勿粘贴截图", "\n", "max_document_length = max([len(x.split(\" \")) for x in x_data])", "vocab_processor = learn.preprocessing.VocabularyProcessor(max_document_length)", "\n", "运行结果及报错内容", "\n", "AttributeError: 'numpy.ndarray' object has no attribute 'split'", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "```\r\nimport  numpy as np\r\nimport  matplotlib.pyplot as plt\r\n\r\n\r\nx=np.random.uniform(-2,2,500)\r\ny=np.random.uniform(-3,3,500)\r\ne=(x**2/4+y**2/9)&lt;1\r\nratio=e.sum()/len(e)\r\nratio=\"ratio:%.2f\" % ratio\r\n\r\n\r\ncoler=e.astype(np.str)\r\ncoler[coler=='True']='r'\r\ncoler[coler=='False']='g'\r\nplt.scatter(x,y,c=coler)\r\nplt.title(ratio)\r\n\r\nplt.show()\r\n\r\n```", "Konwledge_Point": "应对NP完全问题", "Question": ["国外大学编程题，求助", ["小弟国外大学大一，有几道python编程题实在不会了，恳请", "\n各位大佬能帮忙。如果采纳，必有重谢。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答通过自己思路及引用到GPTᴼᴾᴱᴺᴬᴵ搜索,得到内容具体如下&amp;#xff1a;&lt;br /&gt;&lt;code class=\"language-javascript\"&gt;np.arange&lt;/code&gt; 函数用于生成一个等差数列&amp;#xff0c;左闭右开区间&amp;#xff0c;即终点值通常不会被包含在内。但是由于浮点数的精度问题&amp;#xff0c;有时候会出现终点值被包含在内的情况。&lt;/p&gt;\n&lt;p&gt;在第一个例子中&amp;#xff0c;使用 &lt;code class=\"language-javascript\"&gt;np.arange(0.91, 0.93, 0.01)&lt;/code&gt; 生成的等差数列应该是 &lt;code class=\"language-javascript\"&gt;[0.91, 0.92]&lt;/code&gt;&amp;#xff0c;但是由于浮点数的精度问题&amp;#xff0c;&lt;code class=\"language-javascript\"&gt;0.92&lt;/code&gt; 这个数可能会被表示成 &lt;code class=\"language-javascript\"&gt;0.9199999999999999&lt;/code&gt;&amp;#xff0c;从而导致 &lt;code class=\"language-javascript\"&gt;0.93&lt;/code&gt; 也被包含在内。这就是为什么 &lt;code class=\"language-javascript\"&gt;0.93&lt;/code&gt; 会被输出的原因。&lt;/p&gt;\n&lt;p&gt;在第二个例子中&amp;#xff0c;使用 &lt;code class=\"language-javascript\"&gt;np.arange(0.91, 0.99, 0.02)&lt;/code&gt; 生成的等差数列应该是 &lt;code class=\"language-javascript\"&gt;[0.91, 0.93, 0.95, 0.97]&lt;/code&gt;&amp;#xff0c;这个结果是正确的&amp;#xff0c;因为终点值 &lt;code class=\"language-javascript\"&gt;0.99&lt;/code&gt; 不会被包含在内。&lt;/p&gt;\n&lt;p&gt;在第三个例子中&amp;#xff0c;使用 &lt;code class=\"language-javascript\"&gt;np.arange(0.91, 0.99, 0.01)&lt;/code&gt; 生成的等差数列应该是 &lt;code class=\"language-javascript\"&gt;[0.91, 0.92, 0.93, ..., 0.98]&lt;/code&gt;&amp;#xff0c;但是由于浮点数的精度问题&amp;#xff0c;&lt;code class=\"language-javascript\"&gt;0.98&lt;/code&gt; 这个数可能会被表示成 &lt;code class=\"language-javascript\"&gt;0.9799999999999999&lt;/code&gt;&amp;#xff0c;从而导致 &lt;code class=\"language-javascript\"&gt;0.99&lt;/code&gt; 也被包含在内。这就是为什么 &lt;code class=\"language-javascript\"&gt;0.99&lt;/code&gt; 会被输出的原因。&lt;/p&gt;\n&lt;p&gt;在第四个例子中&amp;#xff0c;使用 &lt;code class=\"language-javascript\"&gt;np.arange(99.91, 99.93, 0.01)&lt;/code&gt; 生成的等差数列应该是 &lt;code class=\"language-javascript\"&gt;[99.91, 99.92]&lt;/code&gt;&amp;#xff0c;但是由于浮点数的精度问题&amp;#xff0c;&lt;code class=\"language-javascript\"&gt;99.92&lt;/code&gt; 这个数可能会被表示成 &lt;code class=\"language-javascript\"&gt;99.91999999999999&lt;/code&gt;&amp;#xff0c;从而导致 &lt;code class=\"language-javascript\"&gt;99.93&lt;/code&gt; 也被包含在内。这就是为什么 &lt;code class=\"language-javascript\"&gt;99.93&lt;/code&gt; 会被输出的原因。&lt;/p&gt;\n&lt;p&gt;为了避免这种精度问题&amp;#xff0c;可以使用 &lt;code class=\"language-javascript\"&gt;np.linspace&lt;/code&gt; 函数代替 &lt;code class=\"language-javascript\"&gt;np.arange&lt;/code&gt; 函数&amp;#xff0c;它可以生成指定数量的等分数列&amp;#xff0c;可以避免出现终点值被包含的问题。例如&amp;#xff0c;可以使用 &lt;code class=\"language-javascript\"&gt;np.linspace(0.91, 0.93, 3)&lt;/code&gt; 生成 &lt;code class=\"language-javascript\"&gt;[0.91, 0.92, 0.93]&lt;/code&gt;&amp;#xff0c;这样可以确保终点值不会被包含在内。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;如果以上回答对您有所帮助&amp;#xff0c;点击一下采纳该答案&amp;#xff5e;谢谢&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["np.arange输出结果异常", ["使用np.arange，终点值应该不被输出，但是如图所示：", "\n", "import", " numpy as np\n", "M", " = np.arange(", "0", ".", "91", ", ", "0", ".", "93", ", ", "0", ".", "01", ")\n", "print", "(M)\n", "\n", "\n", "import", " numpy as np\n", "M", " = np.arange(", "0", ".", "91", ", ", "0", ".", "99", ", ", "0", ".", "02", ")\n", "print", "(M)\n", "\n", "\n", "终点值0.99又没有被输出，很奇怪的问题，不太懂为啥。", "\n", "import", " numpy as np\n", "M", " = np.arange(", "0", ".", "91", ", ", "0", ".", "99", ", ", "0", ".", "01", ")\n", "print", "(M)\n", "\n", "\n", "但是有的组合就是会出现问题:", "\n", "import", " numpy as np\n", "M", " = np.arange(", "99", ".", "91", ", ", "99", ".", "93", ", ", "0", ".", "01", ")\n", "print", "(M)\n", "\n", "99.93又被输出：", "\n", "\n", "感觉很奇怪的问题"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;仅供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;                        &lt;span class=\"hljs-attr\"&gt;image&lt;/span&gt; &amp;#61; imagedata.reshape((height, width, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)) &lt;span class=\"hljs-comment\"&gt;#3 is Actually channels&lt;/span&gt;\n\n                        &lt;span class=\"hljs-attr\"&gt;imagebin&lt;/span&gt;&amp;#61;base64.b64decode(base64str)\n                        &lt;span class=\"hljs-attr\"&gt;imagedata&lt;/span&gt;&amp;#61;np.frombuffer((imagebin), dtype&amp;#61;(np.uint8))\n                        &lt;span class=\"hljs-attr\"&gt;image&lt;/span&gt; &amp;#61; cv2.imdecode(imagedata, cv2.IMREAD_COLOR)\n\n                        &lt;span class=\"hljs-attr\"&gt;base64str&lt;/span&gt; &amp;#61; base64.b64encode(imagedata.tobytes()).decode(&lt;span class=\"hljs-string\"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;ignore&amp;#34;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python中如何将数组类型的图片转换成BASE64格式", ["问题遇到的现象和发生背景", "\n", "我想使用百度智能云上的人脸识别api", "自己在本地试了几种方法调用api，均有返回结果", "\n", "\n", "于是我想把调用这个api的方法应用替换到别的程序里,却发现程序提供的image变量输出出来的是数组，不明白为什么。有点搞不懂这个程序，所以想问下该怎么把这个数组变成BASE64格式的图片", "\n", "\n", "人脸识别SDK地址: ", "https://cloud.baidu.com/doc/FACE/s/ek37c1qiz"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;从没有这样写过&amp;#xff0c;我猜题主的困惑应该是numpy数组的shape属性吧。shape为(10,)&amp;#xff0c;表示一个长度为10的一维数组&amp;#xff1b;shape为(10,1)&amp;#xff0c;表示一个10行1列的二维数组。比如&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;import numpy as np\n&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.arange&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;)&lt;span class=\"hljs-selector-class\"&gt;.reshape&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,)\n&lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt; &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.arange&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;)&lt;span class=\"hljs-selector-class\"&gt;.reshape&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.shape&lt;/span&gt;, &lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.shape&lt;/span&gt;\n((&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,), (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["在python里面，np array (10,)和（10,1），这两个有区别么", ["在python里面，np array (10,)和（10,1），这两个有区别么？为什么不都写成一样的？读写起来有区别么？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;结合的代码&amp;#xff0c;在计算2月时&amp;#xff0c;没有根据年份判断是否是有闰月的年份&amp;#xff0c;少加了条件. 应该是少了 两个if判断&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; i in years1:\n  &lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; k in range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;29&lt;/span&gt;):\n      &lt;span class=\"hljs-attribute\"&gt;pass&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; i in years2:\n  &lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; k in range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;):\n      &lt;span class=\"hljs-attribute\"&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中if,elif,else循环遇到问题,不知如何解决", [" Python中想要利用一个方程计算1-12月各个月份的热扩散值，但是现只会分别计算2月份和其他除2月外月份的值，这是我分别计算的代码，是可以正常运行的，先放上数据格式", "\n", "\n", "下面是我计算1、3-12月的代码", "\n", "[]([](", "\n", "import pandas as pd\nimport numpy as np\n\ncsv=pd", ".read_csv", "(", "\"C:\\\\Users\\86139\\Desktop/NADORS.csv\"", ",header=", "0", ",encoding=", "\"unicode_escape\"", ")\ncsv= csv", ".values", "\nyear=np", ".array", "(csv", "[:, 0]", ")\nmonth=np", ".array", "(csv", "[:, 1]", ")\nday=np", ".array", "(csv", "[:, 2]", ")\ntem20=np", ".array", "(csv", "[:, 3]", ")\ntem50=np", ".array", "(csv", "[:, 4]", ")\ntem100=np", ".array", "(csv", "[:, 5]", ")\ntem200=np", ".array", "(csv", "[:, 6]", ")\n\ndep=", "[0.2,0.5,1.0,2.0]", " \nd2050=", "[]", " \nd50100=", "[]", " \nd100200=", "[]", " \nyears=np", ".arange", "(", "2010", ",", "2017", ")\nyears1=", "[2010,2011,2013,2014,2015]", "\nyears2=", "[2012,2016]", "\nmonths=np", ".arange", "(", "1", ",", "13", ")\ndays=np", ".arange", "(", "1", ",", "32", ")\na=", "[1,3,5,7,8,10,12]", "\nb=", "[4,6,9,11]", "\nc=", "[2]", "\n\nyears\n\n", "for", " ", "i", " ", "in", " years: \n    ", "for", " j ", "in", " range(", "1", ",", "13", "): \n        temm20=", "[]", "\n        temm50=", "[]", " \n        temm100=", "[]", " \n        temm200=", "[]", "\n        ", "if", " j ", "in", " ", "a", " :\n            ", "for", " k ", "in", " range(", "1", ",", "32", "):\n                temm20", ".append", "(np", ".mean", "(tem20", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm50", ".append", "(np", ".mean", "(tem50", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm100", ".append", "(np", ".mean", "(tem100", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm200", ".append", "(np", ".mean", "(tem200", "[np.where((year==i)&(month==j)&(day==k))]", "))\n            d2050", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm50)-np", ".min", "(temm50))/(np", ".max", "(temm20)-np", ".min", "(temm20)))/(-", "1", ")/(dep", "[1]", "-dep", "[0]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d50100", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm100)-np", ".min", "(temm100))/(np", ".max", "(temm50)-np", ".min", "(temm50)))/(-", "1", ")/(dep", "[2]", "-dep", "[1]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d100200", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm200)-np", ".min", "(temm200))/(np", ".max", "(temm100)-np", ".min", "(temm100)))/(-", "1", ")/(dep", "[3]", "-dep", "[2]", "))**", "2", ")*(", "10", "**", "6", "))\n        ", "if", " j ", "in", " ", "b", ":\n            ", "for", " k ", "in", " range(", "1", ",", "31", "):\n                temm20", ".append", "(np", ".mean", "(tem20", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm50", ".append", "(np", ".mean", "(tem50", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm100", ".append", "(np", ".mean", "(tem100", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm200", ".append", "(np", ".mean", "(tem200", "[np.where((year==i)&(month==j)&(day==k))]", "))\n            d2050", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm50)-np", ".min", "(temm50))/(np", ".max", "(temm20)-np", ".min", "(temm20)))/(-", "1", ")/(dep", "[1]", "-dep", "[0]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d50100", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm100)-np", ".min", "(temm100))/(np", ".max", "(temm50)-np", ".min", "(temm50)))/(-", "1", ")/(dep", "[2]", "-dep", "[1]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d100200", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm200)-np", ".min", "(temm200))/(np", ".max", "(temm100)-np", ".min", "(temm100)))/(-", "1", ")/(dep", "[3]", "-dep", "[2]", "))**", "2", ")*(", "10", "**", "6", "))\n\nframe2={", "'d20-50'", ":d2050,", "'d50-100'", ":d50100,", "'d100-200'", ":d100200} \ndataframe2=pd", ".DataFrame", "(frame2)\ndataframe2\ndataframe2", ".to_csv", "(", "\"C:\\\\Users\\\\86139\\\\Desktop/NADORSdataframeWITHOUT2.csv\"", ")\n```))\n\n下面是我计算", "2", "月份的代码后边的计算部分\n```python\n", "for", " ", "i", " ", "in", " years: \n    ", "for", " j ", "in", " c: \n        temm20=", "[]", "\n        temm50=", "[]", " \n        temm100=", "[]", " \n        temm200=", "[]", " \n        ", "if", " ", "i", " ", "in", " years1 :\n            ", "for", " k ", "in", " range(", "1", ",", "29", "):\n                temm20", ".append", "(np", ".mean", "(tem20", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm50", ".append", "(np", ".mean", "(tem50", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm100", ".append", "(np", ".mean", "(tem100", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm200", ".append", "(np", ".mean", "(tem200", "[np.where((year==i)&(month==j)&(day==k))]", "))\n            d2050", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm50)-np", ".min", "(temm50))/(np", ".max", "(temm20)-np", ".min", "(temm20)))/(-", "1", ")/(dep", "[1]", "-dep", "[0]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d50100", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm100)-np", ".min", "(temm100))/(np", ".max", "(temm50)-np", ".min", "(temm50)))/(-", "1", ")/(dep", "[2]", "-dep", "[1]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d100200", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm200)-np", ".min", "(temm200))/(np", ".max", "(temm100)-np", ".min", "(temm100)))/(-", "1", ")/(dep", "[3]", "-dep", "[2]", "))**", "2", ")*(", "10", "**", "6", "))\n        ", "if", " ", "i", " ", "in", " years2:\n            ", "for", " k ", "in", " range(", "1", ",", "30", "):\n                temm20", ".append", "(np", ".mean", "(tem20", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm50", ".append", "(np", ".mean", "(tem50", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm100", ".append", "(np", ".mean", "(tem100", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm200", ".append", "(np", ".mean", "(tem200", "[np.where((year==i)&(month==j)&(day==k))]", "))\n            d2050", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm50)-np", ".min", "(temm50))/(np", ".max", "(temm20)-np", ".min", "(temm20)))/(-", "1", ")/(dep", "[1]", "-dep", "[0]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d50100", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm100)-np", ".min", "(temm100))/(np", ".max", "(temm50)-np", ".min", "(temm50)))/(-", "1", ")/(dep", "[2]", "-dep", "[1]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d100200", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm200)-np", ".min", "(temm200))/(np", ".max", "(temm100)-np", ".min", "(temm100)))/(-", "1", ")/(dep", "[3]", "-dep", "[2]", "))**", "2", ")*(", "10", "**", "6", "))\n\nframe3={", "'d20-50'", ":d2050,", "'d50-100'", ":d50100,", "'d100-200'", ":d100200} \ndataframe3=pd", ".DataFrame", "(frame3)\ndataframe3\ndataframe3", ".to_csv", "(", "\"C:\\\\Users\\\\86139\\\\Desktop/newNADORSdataframe2.csv\"", ")\n", "\n", "下面是我想结合到一起写的代码，前面是一致的，后边计算的部分我改成了如下", "\n", "for", " ", "i", " ", "in", " years: \n    ", "for", " j ", "in", " range(", "1", ",", "13", "): \n        temm20=", "[]", "\n        temm50=", "[]", " \n        temm100=", "[]", " \n        temm200=", "[]", "\n        ", "if", " j ", "in", " ", "a", " :\n            ", "for", " k ", "in", " range(", "1", ",", "32", "):\n               temm20", ".append", "(np", ".mean", "(tem20", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm50", ".append", "(np", ".mean", "(tem50", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm100", ".append", "(np", ".mean", "(tem100", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm200", ".append", "(np", ".mean", "(tem200", "[np.where((year==i)&(month==j)&(day==k))]", "))\n            d2050", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm50)-np", ".min", "(temm50))/(np", ".max", "(temm20)-np", ".min", "(temm20)))/(-", "1", ")/(dep", "[1]", "-dep", "[0]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d50100", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm100)-np", ".min", "(temm100))/(np", ".max", "(temm50)-np", ".min", "(temm50)))/(-", "1", ")/(dep", "[2]", "-dep", "[1]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d100200", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm200)-np", ".min", "(temm200))/(np", ".max", "(temm100)-np", ".min", "(temm100)))/(-", "1", ")/(dep", "[3]", "-dep", "[2]", "))**", "2", ")*(", "10", "**", "6", "))\n        elif j ", "in", " ", "b", ":\n            ", "for", " k ", "in", " range(", "1", ",", "31", "):\n               temm20", ".append", "(np", ".mean", "(tem20", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm50", ".append", "(np", ".mean", "(tem50", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm100", ".append", "(np", ".mean", "(tem100", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm200", ".append", "(np", ".mean", "(tem200", "[np.where((year==i)&(month==j)&(day==k))]", "))\n            d2050", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm50)-np", ".min", "(temm50))/(np", ".max", "(temm20)-np", ".min", "(temm20)))/(-", "1", ")/(dep", "[1]", "-dep", "[0]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d50100", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm100)-np", ".min", "(temm100))/(np", ".max", "(temm50)-np", ".min", "(temm50)))/(-", "1", ")/(dep", "[2]", "-dep", "[1]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d100200", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm200)-np", ".min", "(temm200))/(np", ".max", "(temm100)-np", ".min", "(temm100)))/(-", "1", ")/(dep", "[3]", "-dep", "[2]", "))**", "2", ")*(", "10", "**", "6", "))\n        ", "else", ":\n            ", "for", " k ", "in", " range(", "1", ",", "29", "):\n                temm20", ".append", "(np", ".mean", "(tem20", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm50", ".append", "(np", ".mean", "(tem50", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm100", ".append", "(np", ".mean", "(tem100", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm200", ".append", "(np", ".mean", "(tem200", "[np.where((year==i)&(month==j)&(day==k))]", "))\n            d2050", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm50)-np", ".min", "(temm50))/(np", ".max", "(temm20)-np", ".min", "(temm20)))/(-", "1", ")/(dep", "[1]", "-dep", "[0]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d50100", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm100)-np", ".min", "(temm100))/(np", ".max", "(temm50)-np", ".min", "(temm50)))/(-", "1", ")/(dep", "[2]", "-dep", "[1]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d100200", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm200)-np", ".min", "(temm200))/(np", ".max", "(temm100)-np", ".min", "(temm100)))/(-", "1", ")/(dep", "[3]", "-dep", "[2]", "))**", "2", ")*(", "10", "**", "6", "))\n            ", "for", " k ", "in", " range(", "1", ",", "30", "):\n                temm20", ".append", "(np", ".mean", "(tem20", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm50", ".append", "(np", ".mean", "(tem50", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm100", ".append", "(np", ".mean", "(tem100", "[np.where((year==i)&(month==j)&(day==k))]", ")) \n                temm200", ".append", "(np", ".mean", "(tem200", "[np.where((year==i)&(month==j)&(day==k))]", "))\n            d2050", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm50)-np", ".min", "(temm50))/(np", ".max", "(temm20)-np", ".min", "(temm20)))/(-", "1", ")/(dep", "[1]", "-dep", "[0]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d50100", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm100)-np", ".min", "(temm100))/(np", ".max", "(temm50)-np", ".min", "(temm50)))/(-", "1", ")/(dep", "[2]", "-dep", "[1]", "))**", "2", ")*(", "10", "**", "6", ")) \n            d100200", ".append", "((", "2", "*np.pi/", "86400", "./", "365", ".)/", "2", "./((np", ".log", "((np", ".max", "(temm200)-np", ".min", "(temm200))/(np", ".max", "(temm100)-np", ".min", "(temm100)))/(-", "1", ")/(dep", "[3]", "-dep", "[2]", "))**", "2", ")*(", "10", "**", "6", "))\n\nframe2={", "'d20-50'", ":d2050,", "'d50-100'", ":d50100,", "'d100-200'", ":d100200} \ndataframe2=pd", ".DataFrame", "(frame2)\ndataframe2\ndataframe2", ".to_csv", "(", "\"C:\\\\Users\\\\86139\\\\Desktop/123NADORSdataframe.csv\"", ")\n", "\n", "倒是可以运行出来 但运行结果显示如下", "正确结果应如", "想请问问题究竟出在哪里呢？若能得到解答，感激不尽"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;imported but unused 是说你导入了模块, 但代码中没有使用到这个模块&lt;br /&gt;这个导入的模块是多于的.你把导入模块的import 删除即可&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pyflakes E：imported but unused", ["import 模块但是显示imported but unused，这个问题怎么解决呀？谢谢🙏"]], "Tag": "算法设计"}
{"Answer": "你好！还是不知怎么改啊？", "Konwledge_Point": "应对NP完全问题", "Question": ["‘PTHREAD_MUTEX_RECURSIVE’ undeclared ", ["报错‘PTHREAD_MUTEX_RECURSIVE’ undeclared (first use in this function)：", "\n\n", "程序如下：", "\n\n", "1 #include ", "\n  2 #include ", "\n  3 #include ", "\n  4 #include ", "\n  5", "\n  6 int main(int argc,char *argv[]){", "\n  7     pthread_mutex_t  mutex;", "\n  8", "\n  9     if(argc < 2){", "\n 10         printf(\"-usage:%s [error|normal|recursive]\\n\",argv[0]);", "\n 11         exit(1);", "\n 12     }", "\n 13     pthread_mutexattr_t    mutexattr;", "\n 14     pthread_mutexattr_init(&mutexattr);", "\n 15     if(!strcmp(argv[1],\"error\")){", "\n 16         pthread_mutexattr_settype(&mutexattr,PTHREAD_MUTEX_RECURSIVE);", "\n 17     }/*else if(!strcmp(argv[1],\"normal\")){", "\n 18         pthread_mutexattr_settype(&mutexattr,PTHREAD_MUTEX_NORMAL);", "\n 19     }else if(!strcmp(argv[1],\"recursive\")){", "\n 20         pthread_mutexattr_settype(&mutexattr,PTHREAD_MUTEX_RECURSIVE);", "\n 21     }", "\n 22     pthread_mutex_init(&mutex,&mutexattr);", "\n 23     if(pthread_mutex_lock(&mutex) != 0){", "\n 24         printf(\"lock failure\\n\");", "\n 25     }else {", "\n 26         printf(\"lock success\\n\");", "\n 27     }", "\n 28     if(pthread_mutex_lock(&mutex) != 0){", "\n 29         printf(\"lock failure\\n\");", "\n 30     }else {", "\n 31         printf(\"lock success\\n\");", "\n 32     }", "\n 33 ", "\n 34     pthread_mutex_unlock(&mutex);", "\n 35     pthread_mutex_unlock(&mutex);", "\n 36     pthread_mutexattr_destroy(&mutexattr);", "\n 37     pthread_mutex_destroy(&mutex);     */", "\n 38 ", "\n 39 ", "\n 40     return 0;", "\n 41 }", "\n\n", "请问怎么回事啊？谢谢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;Mat 好像有个reshape()成员函数&amp;#xff0c;具体的你可以查一查API&amp;#xff0c;是可以用的。&lt;br /&gt;但是你的这个你确定没有问题吗&amp;#xff1f;经过opencv的blob之后一般都是NCHW的输入,也就是你的blob是&amp;#xff08;batch&amp;#xff0c;channel,28,28&amp;#xff09;&amp;#xff0c;如果你再执行reshape&amp;#xff0c;你的就变成了CHWN了&amp;#xff0c;你确定你的这输入正确&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何在C++中实现python的np.reshape", ["在python下实现了一个模型识别28，28的数字数据集，预处理如下", "\n", "blob", " = cv2.dnn.blobFromImage(x, scalefactor=", "1", ".", "0", "/", "255", ".", "0", ", size=(", "28", ", ", "28", "), crop=False, swapRB=False)\n", "input_blob", " = blob.reshape(-", "1", ", ", "28", ", ", "28", ", ", "1", ")\n", "net", ".setInput(input_blob)  # 设置模型输入\n", "out", " = net.forward()\n\n", "\n", "现在的问题是想在C中用opencvdnn部署，但是应该如何实现同样的预处理，C++中有等效于reshape的方法吗"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于Monster 组和GPT的调写&amp;#xff1a;&lt;/p&gt;\n&lt;ul&gt;&lt;li&gt;大概率就是因为这个浮点数的精度问题&lt;/li&gt;&lt;/ul&gt;\n&lt;ul&gt;&lt;li&gt;浮点数采用二进制表示&amp;#xff0c;而在二进制中无限循环小数是无法准确表示的&amp;#xff0c;所以会出现精度误差。&lt;/li&gt;&lt;/ul&gt;\n&lt;ul&gt;&lt;li&gt;在你的第二个例子中&amp;#xff0c;0.15的二进制表示是一个无限循环小数&amp;#xff0c;而计算机只能用一个近似值来表示它&amp;#xff0c;所以在输出时会出现一个很小的误差。&lt;/li&gt;&lt;/ul&gt;\n&lt;ul&gt;&lt;li&gt;如果你需要更精确的计算&amp;#xff0c;可以使用 Python 的 Decimal 类型或者 NumPy 提供的 decimal128 数据类型。&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["疑惑np.arange（）函数", ["\n", "b", "=np.arange(", "0", ".", "05", ", ", "0", ".", "20", ", ", "0", ".", "05", ")\n", "print", "(b)\n", "\n", "为什么输出是0.05  0.1  0.15  0.2 呢？", "还有：", "\n", "for", " ff in np.arange(", "0", ".", "05", ", ", "0", ".", "20", ", ", "0", ".", "05", "):  ##", "3", "\n    ", "print", "(ff)\n\n", "\n", "这样输出的是", "0.05", "0.1", "0.15000000000000002", "0.2", "这是为什么呢？疑惑的是 这个函数不是不包括终止值吗？", "如果是", "\n", "a", "=np.arange(", "5", ", ", "20", ", ", "5", ")\n\n", "\n", "输出是5 10 15 就正常了"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n \n&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#61; mean(getnum())\nprint(&lt;span class=\"hljs-string\"&gt;&amp;#34;平均值&amp;#xff1a;{},标准差&amp;#xff1a;{:.2}&amp;#34;&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;format&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;,biaozhuncha(&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;))))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python求标准差，值一直为0", ["Python求平均值和标准差，平均值可以求出来了，标准差运行结果一直为0，也不报错，哪里出问题了这是，希望小伙伴指出错误，给出正确解答，谢谢啦", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个应该是精度问题吧&lt;br /&gt;试试math.fsum&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python：对dataframe拆分使用透视表的np.sum之后，小数位数改变了", ["我想得到不同城市不同产品的年产量，现在我有企业所在城市、产品类型和月产量的数据，所以我想用透视表呈现", "sj=pd.read_csv('2015.csv',dtype={'ycl':str}).loc[:,['city','type','ycl']]", "pt=pd.pivot_table(sj,values='ycl',index=['city','type'],aggfunc=np.sum)", "但是这样，我最初读取的数据和透视表分别对总产量求和，小数位数会发生改变", "\n", "有没有什么办法能让透视表的总和和最初读取的数据一致"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;请题主补充一下遇到了什么问题&amp;#xff0c;有没有运行出错的信息提示&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["这个Python怎么回事？", []], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;重装tqdm就好&amp;#xff0c;看一下这个要和python版本吻合的&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["AttributeError: tqdm的错误，该如何解决？", ["问题遇到的现象和发生背景", "\n", "运用了一个网上找的网络，结果出现了 AttributeError", "\n", "问题相关代码，请勿粘贴截图", "\n", "  File \"E:\\python\\lib\\site-packages\\tqdm", "_tqdm.py\", line 835, in ", "del", "    self.close()", "  File \"E:\\python\\lib\\site-packages\\tqdm", "_tqdm.py\", line 1053, in close", "    pos = self.pos", "AttributeError: 'tqdm' object has no attribute 'pos'", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "尝试重装了tqdm包，但也没达到想要的效果", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不知道你是不是这个意思&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;z &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;\n短视频&amp;#xff1a;20.5\n唱歌&amp;#xff1a;30\n网心云&amp;#xff1a;19\nb站&amp;#xff1a;2\n头条&amp;#xff1a;10.5\n写小说&amp;#xff1a;270\n&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n\nday &amp;#61; {}\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; row &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; z.strip(&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;).split(&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;):\n    name, price &amp;#61; row.split(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#xff1a;&amp;#39;&lt;/span&gt;)\n    day[name] &amp;#61; float(price)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;名称&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\t\\t&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; k &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; day.keys():\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(k, &lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\t\\t&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;()\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; title, rate &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; zip([&lt;span class=\"hljs-string\"&gt;&amp;#39;每年&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;每月&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;每日&amp;#39;&lt;/span&gt;], [365, 30, 1]):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(title, &lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\t\\t&amp;#39;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; k, v &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; day.items():\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(v * rate, &lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\t\\t&amp;#39;&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["不怎么使用np，怎么使用字符串转多行列表，完成年月日的赚多少银子的数组运算？", ["不怎么使用np，\n怎么使用字符串转多行列表，\n完成年月日的赚多少银子的数组运算？\n\nz = ", "'''\n短视频：20.5\n唱歌：30\n网心云：19\nb站：2\n头条：10.5\n写小说：270\n'''", "\n\n", "# 分别计算年月日，与时薪", "\n\n名称  短视频 唱歌 网心云 b站 头条 写小说\n每年\n每月\n每天\n....\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;python中abs函数的参数是复数的返回值 是 复数的模&lt;/p&gt;\n&lt;p&gt;设复数z&amp;#61;a&amp;#43;bi(a,b∈R) 则复数z的模|z|&amp;#61;√(a²&amp;#43;b²)&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中abs函数的参数是复数的返回值", ["这个abs函数返回的不是绝对值吗？那上面的那个是怎么得到10.0的呀？看不懂它是怎么转化的，求一个解析"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;灰度值拉伸&amp;#xff0c;把 通道 2&amp;#xff08;如果 RGB 格式则是 蓝色分量 B&amp;#xff09;的颜色分量 从现有的 [0,maxGray] 拉伸到 [0,255]&amp;#xff0c;是该颜色分量的区分度更大。&lt;/p&gt;\n&lt;p&gt;例如&amp;#xff0c;现有图片中的颜色&amp;#xff08;如蓝色&amp;#xff09;分量的最大值只有 50&amp;#xff0c;即所有蓝色分量都在 [0,50] 之间&amp;#xff0c;这样很起来蓝色的差异不大&amp;#xff0c;不容易分辨。对其进行线性拉伸&amp;#xff0c;将颜色分量拉伸到 [0,255]&amp;#xff0c;看起来颜色的深浅就会更明显。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["label是json生成的标签图片label.png   请问这段代码是什么意思啊：label = label / np.max(label[:, :, 2]) * 255", ["label是json生成的标签图片label.png   请问这段代码是什么意思啊：", "\n", "######label = label / np.max(label[:, :, 2]) * 255  "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个代码的问题可能是缺少必要的依赖库&amp;#xff0c;建议先检查是否安装了必要的库&amp;#xff0c;如networkx、matplotlib和numpy等。如果没有安装&amp;#xff0c;请在终端中使用pip install命令安装。&lt;/p&gt;\n&lt;p&gt;另外&amp;#xff0c;在运行代码时需要注意&amp;#xff0c;代码中存在一些中文字符&amp;#xff0c;可能会导致编码问题。如果出现编码问题&amp;#xff0c;可以将代码中的中文字符转换为英文字符&amp;#xff0c;或者在文件开头添加# coding&amp;#61;utf-8&amp;#xff0c;以指定编码格式。&lt;/p&gt;\n&lt;p&gt;关于如何出现节点图&amp;#xff0c;你可以在代码中添加以下代码来显示节点图&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;pos &amp;#61; nx.spring&lt;span class=\"hljs-constructor\"&gt;_layout(&lt;span class=\"hljs-params\"&gt;infected_graph&lt;/span&gt;)&lt;/span&gt;\nnx.draw&lt;span class=\"hljs-constructor\"&gt;_networkx_nodes(&lt;span class=\"hljs-params\"&gt;infected_graph&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;pos&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;node_color&lt;/span&gt;&amp;#61;&amp;#39;&lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;&amp;#39;, &lt;span class=\"hljs-params\"&gt;node_size&lt;/span&gt;&amp;#61;100)&lt;/span&gt;\nnx.draw&lt;span class=\"hljs-constructor\"&gt;_networkx_edges(&lt;span class=\"hljs-params\"&gt;infected_graph&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;pos&lt;/span&gt;)&lt;/span&gt;\nnx.draw&lt;span class=\"hljs-constructor\"&gt;_networkx_labels(&lt;span class=\"hljs-params\"&gt;infected_graph&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;pos&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;font_size&lt;/span&gt;&amp;#61;10, &lt;span class=\"hljs-params\"&gt;font_family&lt;/span&gt;&amp;#61;&amp;#39;Arial&amp;#39;)&lt;/span&gt;\nplt.axis(&amp;#39;off&amp;#39;)\nplt.show&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这段代码使用了networkx库中的spring_layout函数来生成节点的布局&amp;#xff0c;然后使用draw_networkx_nodes、draw_networkx_edges和draw_networkx_labels函数来绘制节点、边和标签&amp;#xff0c;最后使用plt.show()函数显示节点图。请注意&amp;#xff0c;这段代码应该在for循环中的plt.show()函数之后添加。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["遇到这种问题应该如何解决，代码来自xiao黄，但是复制后放到我的编译器中，同时我的import numpy as np，已经安装numpy，但还是灰色状态显示", ["想问一下，遇到这种问题应该如何解决", "代码来自xiao黄，但是复制后放到我的编译器中，却运行不了，同时我的import numpy as np，已经安装numpy，但还是灰色状态显示", "\n", "\n", "import", " random\n\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " networkx ", "as", " nx\n", "import", " numpy ", "as", " np\n\nmax_iter_num = ", "5", " ", "# 模拟的次数", "\nG = nx.karate_club_graph() ", "# 空手道俱乐部", "\n\n", "for", " edge ", "in", " G.edges:\n    G.add_edge(edge[", "0", "], edge[", "1", "], weight=random.uniform(", "0", ",", "1", ")) ", "# 可不可以作为权值 病毒的感染能力", "\n", "for", " node ", "in", " G:\n    G.add_node(node, state = ", "0", ") ", "# 用state标识状态 state=0 未激活，state=1 激活", "\n\nseed = ", "33", " ", "# 选定33作为传染源", "\nG.node[seed][", "'state'", "] = ", "1", " ", "# 表示33是感染的", "\n\nall_infect_nodes = [] ", "# 所有被感染的节点放在这里", "\nall_infect_nodes.append(seed)\n\ninfected_graph = nx.Graph() ", "# 被激活的图", "\ninfected_graph.add_node(seed)\n\n", "for", " i ", "in", " ", "range", "(max_iter_num):\n    new_infect = ", "list", "() ", "# 新被感染的", "\n    t1 = ", "'%s time'", " % i + ", "' %s nodes'", " % ", "len", "(all_infect_nodes)\n    ", "print", "(t1) ", "# 当前有多少个节点被感染", "\n    \n    ", "# 画图", "\n    plt.title(t1)\n    nx.draw(infected_graph, with_labels=", "True", ")\n    plt.show()\n\n    ", "# 感染的机会不止一次", "\n    ", "for", " v ", "in", " all_infect_nodes:\n        ", "for", " nbr ", "in", " G.neighbors(v):\n            ", "if", " G.node[nbr][", "'state'", "] == ", "0", ": ", "# 如果这个邻居节点没被感染", "\n                edge_data = G.get_edge_data(v, nbr)\n                ", "if", " random.uniform(", "0", ", ", "1", ") < edge_data[", "'weight'", "]:\n                    G.node[nbr][", "'state'", "] = ", "1", "\n                    new_infect.append(nbr)\n                    infected_graph.add_edge(v, nbr) ", "# 画图 添加边", "\n    \n    all_infect_nodes.extend(new_infect) ", "# 将新感染的添加到", "\n    ", "print", "(", "'all_active_nodes:'", ", all_infect_nodes)\n\n", "\n", "同时还想请教如何出现节点图，谢谢Thanks♪(･ω･)ﾉ"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;a &amp;#61; [1, 2, 3]&lt;/p&gt;\n\n&lt;p&gt;b &amp;#61; [i*-1 for i in a]&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python列表怎么快速的使其中的元素都乘上（-1）", ["python列表怎么快速的使其中的元素都乘上（-1）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;直接切片&amp;#xff0c;或者用np.hsplit()函数&amp;#xff0c;都可以吧。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np\n&amp;gt;&amp;gt;&amp;gt; a &amp;#61; np.random.random((5,20))\n&amp;gt;&amp;gt;&amp;gt; a.shape\n(5, 20)\n&amp;gt;&amp;gt;&amp;gt; a[:,0] # 直接切片示例&amp;#xff0c;这是第0列\narray([0.35594877, 0.23039528, 0.12543397, 0.44093741, 0.87915851])\n&amp;gt;&amp;gt;&amp;gt; b &amp;#61; np.hsplit(a, 20) # 一次性切出20列&amp;#xff0c;返回list\n&amp;gt;&amp;gt;&amp;gt; type(b)\n&amp;lt;class &amp;#39;list&amp;#39;&amp;gt;\n&amp;gt;&amp;gt;&amp;gt; len(b)\n20\n&amp;gt;&amp;gt;&amp;gt; type(b[0])\n&amp;lt;class &amp;#39;numpy.ndarray&amp;#39;&amp;gt;\n&amp;gt;&amp;gt;&amp;gt; b[0].shape\n(5, 1)\n&amp;gt;&amp;gt;&amp;gt; b[0]\narray([[0.35594877],\n       [0.23039528],\n       [0.12543397],\n       [0.44093741],\n       [0.87915851]])\n&amp;gt;&amp;gt;&amp;gt; b[0].ravel() # 展平\narray([0.35594877, 0.23039528, 0.12543397, 0.44093741, 0.87915851])&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何在python中将矩阵按列分割为数个矩阵", ["我想将一个矩阵按列分割为不同的矩阵，即从n*20的矩阵变为20个n*1的矩阵。请问要怎么实现呢？", "\n\n", " ", "\n\n", "这是我的部分数据，一共有数千行，20列，数据为浮点数", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;data_file_1.readlines()[1:0]这是什么操作&amp;#xff0c;从下标为1的位置开始直到下标为0的位置&amp;#xff1f;&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python追加扩增数据代码无法写入文件的问题", ["\n", "【不报错但却写不进文件】", "\n", "这段目的是使用文件追加扩增数据，数据采样范围在(mean-STDEV, mean+STDEV)。东拼西凑了代码运行后没有报错但却无法写入文件，恳求帮助我改一下代码", "\n", "\n", "import", " csv\n", "import", " random\n", "import", " numpy as np\n", "import", " pandas as pd\n", "# load the total data CSV file into a list", "\n", "data_file_1", " = open('RSDS_AI_10.csv', 'rb') \n", "data_list_1", " = data_file_1.readlines()[", "1", ":", "0", "]\ndata_file_1.close()\n", "# augment training datasets", "\nfor record ", "in", " data_list_1:\n    ", "# split the record by the ',' commas", "\n    ", "record", " = record.decode()\n    type(record)\n    ", "array", " = record.split(',')\n    ", "all_values", " = record.split(',')\n    ", "arr_std1", " = np.std(float(all_values[", "1", "]))   ", "#标准差", "\n    ", "arr_std2", " = np.std(float(all_values[", "2", "])) \n    ", "arr_std3", " = np.std(float(all_values[", "3", "])) \n    ", "arr_std4", " = np.std(float(all_values[", "4", "])) \n    ", "arr_std5", " = np.std(float(all_values[", "5", "])) \n    ", "arr_std6", " = np.std(float(all_values[", "6", "]))\n    ", "arr_std7", " = np.std(float(all_values[", "7", "])) \n    ", "arr_std8", " = np.std(float(all_values[", "8", "])) \n    ", "arr_std9", " = np.std(float(all_values[", "9", "])) \n    ", "arr_std10", " = np.std(float(all_values[", "10", "])) \n    ", "arr_std11", " = np.std(float(all_values[", "11", "]))\n    ", "arr_std12", " = np.std(float(all_values[", "12", "]))  \n    ", "arr_std13", " = np.std(float(all_values[", "13", "])) \n    ", "arr_std14", " = np.std(float(all_values[", "14", "])) \n    ", "arr_std15", " = np.std(float(all_values[", "15", "])) \n    ", "arr_std16", " = np.std(float(all_values[", "16", "])) \n    ", "arr_std17", " = np.std(float(all_values[", "17", "]))\n    ", "arr_std18", " = np.std(float(all_values[", "18", "])) \n    ", "arr_std19", " = np.std(float(all_values[", "19", "])) \n    ", "arr_std20", " = np.std(float(all_values[", "20", "])) \n    ", "arr_std21", " = np.std(float(all_values[", "21", "])) \n    ", "arr_std22", " = np.std(float(all_values[", "22", "]))\n    ", "arr_std23", " = np.std(float(all_values[", "23", "]))\n    ", "arr_std24", " = np.std(float(all_values[", "24", "]))  \n    ", "arr_std25", " = np.std(float(all_values[", "25", "])) \n    ", "arr_std26", " = np.std(float(all_values[", "26", "])) \n    ", "arr_std27", " = np.std(float(all_values[", "27", "])) \n    ", "arr_std28", " = np.std(float(all_values[", "28", "])) \n    ", "arr_std29", " = np.std(float(all_values[", "29", "]))\n    ", "arr_std30", " = np.std(float(all_values[", "30", "])) \n    ", "arr_std31", " = np.std(float(all_values[", "31", "])) \n    ", "arr_std32", " = np.std(float(all_values[", "32", "])) \n    ", "arr_std33", " = np.std(float(all_values[", "33", "])) \n    ", "arr_std34", " = np.std(float(all_values[", "34", "]))\n  \n    ", "arr_mean1", " = np.mean(float(all_values[", "1", "]))   ", "#平均值", "\n    ", "arr_mean2", " = np.mean(float(all_values[", "2", "])) \n    ", "arr_mean3", " = np.mean(float(all_values[", "3", "])) \n    ", "arr_mean4", " = np.mean(float(all_values[", "4", "])) \n    ", "arr_mean5", " = np.mean(float(all_values[", "5", "])) \n    ", "arr_mean6", " = np.mean(float(all_values[", "6", "]))\n    ", "arr_mean7", " = np.mean(float(all_values[", "7", "])) \n    ", "arr_mean8", " = np.mean(float(all_values[", "8", "])) \n    ", "arr_mean9", " = np.mean(float(all_values[", "9", "])) \n    ", "arr_mean10", " = np.mean(float(all_values[", "10", "])) \n    ", "arr_mean11", " = np.mean(float(all_values[", "11", "]))\n    ", "arr_mean12", " = np.mean(float(all_values[", "12", "]))  \n    ", "arr_mean13", " = np.mean(float(all_values[", "13", "])) \n    ", "arr_mean14", " = np.mean(float(all_values[", "14", "])) \n    ", "arr_mean15", " = np.mean(float(all_values[", "15", "])) \n    ", "arr_mean16", " = np.mean(float(all_values[", "16", "])) \n    ", "arr_mean17", " = np.mean(float(all_values[", "17", "]))\n    ", "arr_mean18", " = np.mean(float(all_values[", "18", "])) \n    ", "arr_mean19", " = np.mean(float(all_values[", "19", "])) \n    ", "arr_mean20", " = np.mean(float(all_values[", "20", "])) \n    ", "arr_mean21", " = np.mean(float(all_values[", "21", "])) \n    ", "arr_mean22", " = np.mean(float(all_values[", "22", "]))\n    ", "arr_mean23", " = np.mean(float(all_values[", "23", "]))\n    ", "arr_mean24", " = np.mean(float(all_values[", "24", "]))  \n    ", "arr_mean25", " = np.mean(float(all_values[", "25", "])) \n    ", "arr_mean26", " = np.mean(float(all_values[", "26", "])) \n    ", "arr_mean27", " = np.mean(float(all_values[", "27", "])) \n    ", "arr_mean28", " = np.mean(float(all_values[", "28", "])) \n    ", "arr_mean29", " = np.mean(float(all_values[", "29", "]))\n    ", "arr_mean30", " = np.mean(float(all_values[", "30", "])) \n    ", "arr_mean31", " = np.mean(float(all_values[", "31", "])) \n    ", "arr_mean32", " = np.mean(float(all_values[", "32", "])) \n    ", "arr_mean33", " = np.mean(float(all_values[", "33", "])) \n    ", "arr_mean34", " = np.mean(float(all_values[", "34", "]))\n    ", "# build new CSV file to save new data", "\n    ", "p", " = open('D:fansile.csv', 'ab', ", "encoding='utf-8',", " ", "newline='')", "\n    ", "csv_writer", " = csv.writer(p)\n    for i ", "in", " range(", "10", "): ", "# generate 10 times training data", "\n        ", "input1", " = np.random.uniform(arr_mean1 - arr_std1, arr_mean1 + arr_std1) ", "# randomly sampling from (mean-STDEV, mean+STDEV)", "\n        ", "input2", " = np.random.uniform(arr_mean2 - arr_std2, arr_mean2 + arr_std2)\n        ", "input3", " = np.random.uniform(arr_mean3 - arr_std3, arr_mean3 + arr_std3)\n        ", "input4", " = np.random.uniform(arr_mean4 - arr_std4, arr_mean4 + arr_std4)\n        ", "input5", " = np.random.uniform(arr_mean5 - arr_std5, arr_mean5 + arr_std5)\n        ", "input6", " = np.random.uniform(arr_mean6 - arr_std6, arr_mean6 + arr_std6)\n        ", "input7", " = np.random.uniform(arr_mean7 - arr_std7, arr_mean7 + arr_std7)\n        ", "input8", " = np.random.uniform(arr_mean8 - arr_std8, arr_mean8 + arr_std8)\n        ", "input9", " = np.random.uniform(arr_mean9 - arr_std9, arr_mean9 + arr_std9)\n        ", "input10", " = np.random.uniform(arr_mean10 - arr_std10, arr_mean10 + arr_std10)\n        ", "input11", " = np.random.uniform(arr_mean11 - arr_std11, arr_mean11 + arr_std11)\n        ", "input12", " = np.random.uniform(arr_mean12 - arr_std12, arr_mean12 + arr_std12)\n        ", "input13", " = np.random.uniform(arr_mean13 - arr_std13, arr_mean13 + arr_std13)\n        ", "input14", " = np.random.uniform(arr_mean14 - arr_std14, arr_mean14 + arr_std14)\n        ", "input15", " = np.random.uniform(arr_mean15 - arr_std15, arr_mean15 + arr_std15)\n        ", "input16", " = np.random.uniform(arr_mean16 - arr_std16, arr_mean16 + arr_std16)\n        ", "input17", " = np.random.uniform(arr_mean17 - arr_std17, arr_mean17 + arr_std17)\n        ", "input18", " = np.random.uniform(arr_mean18 - arr_std18, arr_mean18 + arr_std18)\n        ", "input19", " = np.random.uniform(arr_mean19 - arr_std19, arr_mean19 + arr_std19)\n        ", "input20", " = np.random.uniform(arr_mean20 - arr_std20, arr_mean20 + arr_std20)\n        ", "input21", " = np.random.uniform(arr_mean21 - arr_std21, arr_mean21 + arr_std21)\n        ", "input22", " = np.random.uniform(arr_mean22 - arr_std22, arr_mean22 + arr_std22)\n        ", "input23", " = np.random.uniform(arr_mean23 - arr_std23, arr_mean23 + arr_std23)\n        ", "input24", " = np.random.uniform(arr_mean24 - arr_std24, arr_mean24 + arr_std24)\n        ", "input25", " = np.random.uniform(arr_mean25 - arr_std25, arr_mean25 + arr_std25)\n        ", "input26", " = np.random.uniform(arr_mean26 - arr_std26, arr_mean26 + arr_std26)\n        ", "input27", " = np.random.uniform(arr_mean27 - arr_std27, arr_mean27 + arr_std27)\n        ", "input28", " = np.random.uniform(arr_mean28 - arr_std28, arr_mean28 + arr_std28)\n        ", "input29", " = np.random.uniform(arr_mean29 - arr_std29, arr_mean29 + arr_std29)\n        ", "input30", " = np.random.uniform(arr_mean30 - arr_std30, arr_mean30 + arr_std30)\n        ", "input31", " = np.random.uniform(arr_mean31 - arr_std31, arr_mean31 + arr_std31)\n        ", "input32", " = np.random.uniform(arr_mean32 - arr_std32, arr_mean32 + arr_std32)\n        ", "input33", " = np.random.uniform(arr_mean33 - arr_std33, arr_mean33 + arr_std33)\n        ", "input34", " = np.random.uniform(arr_mean34 - arr_std34, arr_mean34 + arr_std34)\n        csv_writer.writerow([input1, input2, input3, input4, input5, input6, input7, input8, input9, input10,input11,input12,\n                             input13,input14,input15,input16,input17,input18,input19,input20,input21,input22,input23,input24\n                             ,input25,input26,input27,input28,input29,input30,input31,input32,input33,input34]) ", "# decided by your structure of dataset", "\n    p.close()\n", "\n", "\n", "无报错但写不进去", "\n", "问了一个人他说我是把一个文件用两个权限不同的指针去指，每个指针有着不同的操作，不能这样写，需要借助临时文件，但具体怎么做没有说", "\n", "最终想要数据扩增迭代10次，并追加到csv文件中"]], "Tag": "算法设计"}
{"Answer": "没看到你history输出的代码，感觉曲线图是可信的，而你输出val_loss的时候输出错了。", "Konwledge_Point": "应对NP完全问题", "Question": ["使用keras进行分类问题时，验证集loss,accuracy 显示0.0000e+00，但是最后画图像时能显示出验证曲线", ["data_train, data_test, label_train, label_test = train_test_split(data_all, label_all, test_size= 0.2, random_state = 1)", "\n\n", "data_train, data_val, label_train, label_val = train_test_split(data_train,label_train, test_size = 0.25)", "\n\n", "data_train = np.asarray(data_train, np.float32)", "\ndata_test = np.asarray(data_test, np.float32)", "\ndata_val = np.asarray(data_val, np.float32)", "\nlabel_train = np.asarray(label_train, np.int32)", "\nlabel_test = np.asarray(label_test, np.int32)", "\nlabel_val = np.asarray(label_val, np.int32)", "\n\n", "training = model.fit_generator(datagen.flow(data_train, label_train_binary, batch_size=200,shuffle=True), validation_data=(data_val,label_val_binary), samples_per_epoch=len(data_train)*8, nb_epoch=30, verbose=1)", "\n\n", "def plot_history(history):", "\n    plt.plot(training.history['acc'])", "\n    plt.plot(training.history['val_acc'])", "\n    plt.title('model accuracy')", "\n    plt.xlabel('epoch')", "\n    plt.ylabel('accuracy')", "\n    plt.legend(['acc', 'val_acc'], loc='lower right')", "\n    plt.show()", "\n    plt.plot(training.history['loss'])", "\n    plt.plot(training.history['val_loss'])", "\n    plt.title('model loss')", "\n    plt.xlabel('epoch')", "\n    plt.ylabel('loss')", "\n    plt.legend(['loss', 'val_loss'], loc='lower right')", "\n    plt.show()", "\n\n", "plot_history(training)", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这个变量是在另一个方法里面定义的&amp;#xff0c;你把df在main函数里定义就好了&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["用Jupyter出现了name 'df' is not defined的问题", ["\n", "import numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.io as sio\nimport seaborn as sb\nimport pandas as pd\nfrom scipy.io import loadmat#abc\nfrom scipy import stats\nfrom ipykernel import kernelapp as app\nfrom scipy.optimize import minimize", "\n\n", "\n", "def load_data():\n    df = loadmat('C:/Users/fiq/Desktop/ex5data1.mat')#载入数据\n    return df['X'],df['y'],df['Xval'],df['yval'],df['Xtest'],df['ytest']", "\n\n", "\n", "X,y,Xval,yval,Xtest,ytest = load_data()", "\n\n", "\n", "def computeCost (X,y,theta):\n    inner=np.power((X*theta.T)-y,2)\n    #theta.T就是矩阵theta的转置矩阵\n    #np.power(A,B)   ## 对A中的每个元素求B次方\n    return np.sum(inner)/(2*len(X))\ndf.insert(0,'ONE',1)  #在第0列插入表头为“ONE”的列，数值为1\n", "\n\n", "\n", "df.insert(0,'ONE',1)  #在第0列插入表头为“ONE”的列，数值为1\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n<ipython-input-242-e766ad7db43f> in <module>\n----> 1 df.insert(0,'ONE',1)  #在第0列插入表头为“ONE”的列，数值为1\n\nNameError: name 'df' is not defined\n", "\n\n", "这里出现了NameError: name 'df' is not defined", "\n\n", "请问如何解决"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/lzdcsdn/article/details/9491677", "Konwledge_Point": "应对NP完全问题", "Question": ["关于mpi集群的，在mpirun -np 6 -f nodes ./cpi 出现这样的错误，图示", []], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;试试这样写&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;import numpy as np\nimport matplotlib.pyplot as plt\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; matplotlib.animation import FuncAnimation\nimport pyaudio\n\nCHUNK &amp;#61; 1024\nFORMAT &amp;#61; pyaudio.paInt16\nCHANNELS &amp;#61; 1\nRATE &amp;#61; 44100\n\np &amp;#61; pyaudio.PyAudio()\nstream &amp;#61; p.open(\n    &lt;span class=\"hljs-attribute\"&gt;format&lt;/span&gt;&amp;#61;FORMAT,\n    &lt;span class=\"hljs-attribute\"&gt;channels&lt;/span&gt;&amp;#61;CHANNELS,\n    &lt;span class=\"hljs-attribute\"&gt;rate&lt;/span&gt;&amp;#61;RATE,\n    &lt;span class=\"hljs-attribute\"&gt;input&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;,\n    &lt;span class=\"hljs-attribute\"&gt;output&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;,\n    &lt;span class=\"hljs-attribute\"&gt;frames_per_buffer&lt;/span&gt;&amp;#61;CHUNK\n)\n\nfig, ax &amp;#61; plt.subplots()\n \nx &amp;#61; np.arange(CHUNK)\nline, &amp;#61; ax.plot(x, np.random.rand(CHUNK), &lt;span class=\"hljs-attribute\"&gt;lw&lt;/span&gt;&amp;#61;1, &lt;span class=\"hljs-attribute\"&gt;animated&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;)\nax.set_ylim(0, 255)\nax.set_xlim(0, CHUNK)\n\ndef update_data(i):\n    data &amp;#61; stream.read(CHUNK)\n    data &amp;#61; np.frombuffer(data, &lt;span class=\"hljs-attribute\"&gt;dtype&lt;/span&gt;&amp;#61;np.int16)\n    plt.setp(line, &lt;span class=\"hljs-string\"&gt;&amp;#39;ydata&amp;#39;&lt;/span&gt;, data[:CHUNK])\n    return [line]\n\nani &amp;#61; FuncAnimation(fig, update_data, &lt;span class=\"hljs-attribute\"&gt;blit&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;, &lt;span class=\"hljs-attribute\"&gt;interval&lt;/span&gt;&amp;#61;25, &lt;span class=\"hljs-attribute\"&gt;frames&lt;/span&gt;&amp;#61;1000)\nplt.show()\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img title=\"图片.png\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/697390721926112.png\" /&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["接上一个问题，出不来图像", ["import", " struct\n", "import", " numpy as np\n", "import", " matplotlib.pyplot as plt\n", "CHUNK", " = ", "1024", " * ", "4", "\n", "FORMAT", " = pyaudio.paInt16\n", "CHANNELS", " = ", "1", "\n", "RATE", " = ", "44100", "\n", "p", " = pyaudio.PyAudio()\n", "stream", " = p.open(\n    ", "format=FORMAT,", "\n    ", "channels=CHANNELS,", "\n    ", "rate=RATE,", "\n    ", "input=True,", "\n    ", "output=True,", "\n    ", "frames_per_buffer=CHUNK", "\n)\n\nfig, ", "ax", " = plt.subplots()\n\n\n", "x", " = np.arange(", "0", ", ", "2", " * CHUNK, ", "2", ")\nline, = ax.plot(x, np.random.rand(CHUNK))\nax.set_ylim(", "0", ", ", "255", ")\nax.set_xlim(", "0", ", CHUNK)\n\nwhile True:\n    ", "data", " = stream.read(CHUNK)\n    ", "data_int", " = np.array(struct.unpack(str(", "2", " * CHUNK) + 'B', data), ", "dtype='b')[::2]", " + ", "127", "\n    line.set_ydata(data_int)\n    fig.canvas.draw()\n    fig.canvas.flush_events()\n\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可能是pandas版本的问题&amp;#xff0c;get不到版本属性。你可以在pycharm用的python环境中重新安装以下pandas试一试。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["一段机器学习的Python代码，放在Jupyter Notebook上运行没什么问题，但是放在PyCharm上就报错了。", ["一段机器学习的代码，具体是回归方面的：", "import numpy as np", "import pandas as pd", "import matplotlib.pyplot as plt", "\n", "import matplotlib.pyplot as plt", "plt.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签", "plt.rcParams['axes.unicode_minus']=False #用来正常显示负号", "\n", "path='data/regress_data1.csv'", "data=pd.read_csv(path)", "data.head()", "data.describe()", "\n", "这是Jupyter Notebook上的运行结果", "\n", "但是放在PyCharm上，就出现了下面的错误：", "\n", "\n", "值得一提的是，我已经在PyCharm中配置了机器学习的环境：", "我搜了搜解决方法，和我这个相关的是说Python文件命名的问题。我看了看我也没用Python的保留字，命名也符合规范。", "\n", "所以就僵住了好久。", "求指点！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;错在这行&amp;#xff0c;y_distance &amp;#61; ([0, 1, 2, 3, 4])&amp;#xff0c;这个是一个列表&amp;#xff0c;应该是y_distance &amp;#61; choice([0, 1, 2, 3, 4])&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python报错unsupported operand type for+int and list", ["求问python使用matplotlib时遇到的问题", "\n\n", "\n", "from random import choice\n\n\n\nclass RandomWalk:\n\t\"\"\"一个随机生成漫步数据的类\"\"\"\n\tdef __init__(self, num_points=5000):\n\t\t\"\"\"初始化要漫步的属性\"\"\"\n\t\tself.num_points = num_points\n\n\t\t#所有随机漫步都始于(0,0)\n\t\tself.x_values = [0]\n\t\tself.y_values = [0]\n\n\tdef fill_walk(self):\n\t\t\"\"\"计算随机漫步包含的所有点\"\"\"\n\n\t\t#不断漫步直到列表达到指定的长度\n\t\twhile len(self.x_values) < self.num_points:\n\n\t\t\t#决定前进方向以及沿着这个方向前进的距离\n\t\t\tx_direction = choice([1, -1])\n\n\t\t\tx_distance = choice([0, 1, 2, 3, 4])\n\t\t\tx_step = x_direction * x_distance\n\n\t\t\ty_direction = choice([1, -1])\n\t\t\ty_distance = ([0, 1, 2, 3, 4])\n\t\t\ty_step = y_direction * y_distance\n\n\t\t\t#拒绝原地踏步\n\t\t\tif x_step == 0 and y_step == 0:\n\t\t\t\tcontinue\n\n\t\t\t#计算下一个点的x和y值\n\t\t\tx = self.x_values[-1] + x_step\n\t\t\ty = self.y_values[-1] + y_step\n\n\t\t\tself.x_values.append(x)\n\t\t\tself.y_value.append(y)\n", "\n\n", " 调用上图代码", "\n\n", "\n", "import matplotlib.pyplot as plt\n\nfrom aaaaaa import RandomWalk\n\nrw = RandomWalk()\nrw.fill_walk()\n\nplt.style.use('classic')\nfig, ax = plt.subplots()\nax.scatter(rw.x_values, rw.y_values, s=15)\n\nplt.show()", "\n\n", "运行出现Traceback (most recent call last):", "\n  File \"C:\\Users\\86199\\Desktop\\rw_visual.py\", line 6, in <module>", "\n    rw.fill_walk()", "\n  File \"C:\\Users\\86199\\Desktop\\aaaaaa.py\", line 37, in fill_walk", "\n    y = self.y_values[-1] + y_step", "\nTypeError: unsupported operand type(s) for +: 'int' and 'list'"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;用print(pyglet.version)检查一下pyglet版本&amp;#xff0c;使用1.5.19版本测试题中代码运行正常&amp;#xff0c;无题中的报错信息。尝试更改pyglet版本。&lt;br /&gt;如有帮助&amp;#xff0c;请采纳。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pyglet批处理添加中出现的问题。", ["错误：", "\n", "Traceback (most recent call last):\n  File ", "\"D:\\SoftWare\\AI\\Python3.7\\lib\\site-packages\\pyglet\\graphics\\__init__.py\"", ", line 511, ", "in", " _get_domain\n    domain = domain_map[key]\nKeyError: ((", "'v2f'", ", ", "'c3B'", "), 7, ", "False", ", 4)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File ", "\"D:/SoftWare/Project/Python/robot_arm/env/env.py\"", ", line 148, ", "in", " <module>\n    env.render()\n  File ", "\"D:/SoftWare/Project/Python/robot_arm/env/env.py\"", ", line 53, ", "in", " render\n    self.viewer = Viewer(self.arm_info, self.goal)\n  File ", "\"D:/SoftWare/Project/Python/robot_arm/env/env.py\"", ", line 85, ", "in", " __init__\n    (", "'c3B'", ", (86, 109, 249)", "*4", "))  # color\n  File ", "\"D:\\SoftWare\\AI\\Python3.7\\lib\\site-packages\\pyglet\\graphics\\__init__.py\"", ", line 425, ", "in", " ", "add", "\n    domain = self._get_domain(", "False", ", mode, group, formats)\n  File ", "\"D:\\SoftWare\\AI\\Python3.7\\lib\\site-packages\\pyglet\\graphics\\__init__.py\"", ", line 514, ", "in", " _get_domain\n    domain = vertexdomain.create_domain(shader_program, ", "*f", "ormats, ", "indexed", "=indexed)\n  File ", "\"D:\\SoftWare\\AI\\Python3.7\\lib\\site-packages\\pyglet\\graphics\\vertexdomain.py\"", ", line 131, ", "in", " create_domain\n    attribute_usages = [create_attribute_usage(shader_program, f) ", "for", " f ", "in", " attribute_usage_formats]\n  File ", "\"D:\\SoftWare\\AI\\Python3.7\\lib\\site-packages\\pyglet\\graphics\\vertexdomain.py\"", ", line 131, ", "in", " <listcomp>\n    attribute_usages = [create_attribute_usage(shader_program, f) ", "for", " f ", "in", " attribute_usage_formats]\n  File ", "\"D:\\SoftWare\\AI\\Python3.7\\lib\\site-packages\\pyglet\\graphics\\vertexdomain.py\"", ", line 113, ", "in", " create_attribute_usage\n    attribute = vertexattribute.create_attribute(shader_program, attribute_format)\n  File ", "\"D:\\SoftWare\\AI\\Python3.7\\lib\\site-packages\\pyglet\\graphics\\vertexattribute.py\"", ", line 225, ", "in", " create_attribute\n    assert attribute_meta, f", "\"No '{name}' attribute found in {shader_program}.\\n\"", "\\\nAssertionError: ", "No", " ", "'v'", " attribute found ", "in", " ShaderProgram(", "id", "=4).\nValid attibutes are: {", "'colors'", ": Attribute(", "'colors'", ", ", "program", "=4, ", "location", "=1, ", "count", "=4, ", "format", "=f), ", "'position'", ": Attribute(", "'position'", ", ", "program", "=4, ", "location", "=0, ", "count", "=3, ", "format", "=f), ", "'tex_coords'", ": Attribute(", "'tex_coords'", ", ", "program", "=4, ", "location", "=2, ", "count", "=3, ", "format", "=f)}\n\n", "\n", "源代码为下", "\n", "\n", "\n", "\n", "import", " pyglet\n", "import", " numpy ", "as", " np\n\n", "class", " ", "ArmEnv", "(", "object", "):\n    viewer = ", "None", "\n    dt = ", "0.1", "                                ", "# 转动的速度和 dt 有关", "\n    action_bound = [-", "1", ", ", "1", "]                  ", "# 转动的角度范围", "\n    goal = {", "'x'", ": ", "100.", ", ", "'y'", ": ", "100.", ", ", "'l'", ": ", "40", "}  ", "# 蓝色 goal 的 x,y 坐标和长度 l", "\n    state_dim = ", "2", "                           ", "# 两个观测值 两个角度", "\n    action_dim = ", "2", "                          ", "# 两个动作 两个关节", "\n\n    ", "def", " ", "__init__", "(", "self", "):\n        self.arm_info = np.zeros(\n            ", "2", ", dtype=[(", "'l'", ", np.float32), (", "'r'", ", np.float32)])\n        ", "# 生成出 (2,2) 的矩阵", "\n        self.arm_info[", "'l'", "] = ", "100", "        ", "# 两段手臂都 100 长", "\n        self.arm_info[", "'r'", "] = np.pi/", "6", "    ", "# 两段手臂的端点角度", "\n\n    ", "def", " ", "step", "(", "self, action", "):\n        done = ", "False", "\n        r = ", "0.", "\n\n        ", "# 计算单位时间 dt 内旋转的角度, 将角度限制在360度以内", "\n        action = np.clip(action, *self.action_bound)\n        self.arm_info[", "'r'", "] += action * self.dt\n        self.arm_info[", "'r'", "] %= np.pi * ", "2", "  ", "# normalize", "\n\n        ", "# 我们可以将两截手臂的角度信息当做一个 state (之后会变)", "\n        s = self.arm_info[", "'r'", "]\n\n        ", "# 如果手指接触到蓝色的 goal, 我们判定结束回合 (done)", "\n        ", "# 所以需要计算 finger 的坐标", "\n        (a1l, a2l) = self.arm_info[", "'l'", "]  ", "# radius, arm length", "\n        (a1r, a2r) = self.arm_info[", "'r'", "]  ", "# radian, angle", "\n        a1xy = np.array([", "200.", ", ", "200.", "])  ", "# a1 start (x0, y0)", "\n        a1xy_ = np.array([np.cos(a1r), np.sin(a1r)]) * a1l + a1xy  ", "# a1 end and a2 start (x1, y1)", "\n        finger = np.array([np.cos(a1r + a2r), np.sin(a1r + a2r)]) * a2l + a1xy_  ", "# a2 end (x2, y2)", "\n\n        ", "# 根据 finger 和 goal 的坐标得出 done and reward", "\n        ", "if", " self.goal[", "'x'", "] - self.goal[", "'l'", "] / ", "2", " < finger[", "0", "] < self.goal[", "'x'", "] + self.goal[", "'l'", "] / ", "2", ":\n            ", "if", " self.goal[", "'y'", "] - self.goal[", "'l'", "] / ", "2", " < finger[", "1", "] < self.goal[", "'y'", "] + self.goal[", "'l'", "] / ", "2", ":\n                done = ", "True", "\n                r = ", "1.", "  ", "# finger 在 goal 以内", "\n        ", "return", " s, r, done\n\n    ", "def", " ", "reset", "(", "self", "):\n        ", "# reset转角信息", "\n        self.arm_info[", "'r'", "] = ", "2", " * np.pi * np.random.rand(", "2", ")\n        ", "return", " self.arm_info[", "'r'", "]\n\n    ", "def", " ", "render", "(", "self", "):\n        ", "if", " self.viewer ", "is", " ", "None", ":\n            self.viewer = Viewer(self.arm_info, self.goal)\n        self.viewer.render()\n\n    ", "def", " ", "sample_action", "(", "self", "):\n        ", "return", " np.random.rand(", "2", ")-", "0.5", "    ", "# two radians", "\n\n\n", "class", " ", "Viewer", "(pyglet.window.Window):\n    bar_thc = ", "5", "     ", "# 手臂的厚度", "\n\n    ", "def", " ", "__init__", "(", "self, arm_info, goal", "):\n        ", "# 创建窗口的继承", "\n        ", "# vsync 如果是 True, 按屏幕频率刷新, 反之不按那个频率", "\n        ", "super", "(Viewer, self).__init__(width=", "400", ", height=", "400", ", resizable=", "False", ", caption=", "'Arm'", ", vsync=", "False", ")\n\n        ", "# 窗口背景颜色", "\n        pyglet.gl.glClearColor(", "1", ", ", "1", ", ", "1", ", ", "1", ")\n\n        ", "# 添加 arm 信息", "\n        self.arm_info = arm_info\n        ", "# 添加窗口中心点, 手臂的根", "\n        self.center_coord = np.array([", "200", ", ", "200", "])\n        ", "# 将手臂的作图信息放入这个 batch", "\n        self.batch = pyglet.graphics.Batch()  ", "# display whole batch at once", "\n\n        ", "# 蓝色 goal 的信息包括他的 x, y 坐标, goal 的长度 l", "\n        self.point = self.batch.add(\n            ", "4", ", pyglet.gl.GL_QUADS, ", "None", ",  ", "# 4 corners", "\n            (", "'v2f'", ", [goal[", "'x'", "] - goal[", "'l'", "] / ", "2", ", goal[", "'y'", "] - goal[", "'l'", "] / ", "2", ",\n                     goal[", "'x'", "] - goal[", "'l'", "] / ", "2", ", goal[", "'y'", "] + goal[", "'l'", "] / ", "2", ",\n                     goal[", "'x'", "] + goal[", "'l'", "] / ", "2", ", goal[", "'y'", "] + goal[", "'l'", "] / ", "2", ",\n                     goal[", "'x'", "] + goal[", "'l'", "] / ", "2", ", goal[", "'y'", "] - goal[", "'l'", "] / ", "2", "]),\n            (", "'c3B'", ", (", "86", ", ", "109", ", ", "249", ")*", "4", "))  ", "# color", "\n\n        ", "# 添加一条手臂", "\n        self.arm1 = self.batch.add(\n            ", "4", ", pyglet.gl.GL_QUADS, ", "None", ",\n            (", "'v2f'", ", [", "250", ", ", "250", ",              ", "# 同上, 点信息", "\n                     ", "250", ", ", "300", ",\n                     ", "260", ", ", "300", ",\n                     ", "260", ", ", "250", "]),\n            (", "'c3B'", ", (", "249", ", ", "86", ", ", "86", ") * ", "4", ",))    ", "# color", "\n\n        ", "# 按理添加第二条手臂...", "\n        self.arm2 = self.batch.add(\n            ", "4", ", pyglet.gl.GL_QUADS, ", "None", ",\n            (", "'v2f'", ", [", "100", ", ", "250", ",  ", "# 同上, 点信息", "\n                     ", "100", ", ", "160", ",\n                     ", "200", ", ", "160", ",\n                     ", "200", ", ", "150", "]),\n            (", "'c3B'", ", (", "249", ", ", "86", ", ", "86", ") * ", "4", ",))  ", "# color", "\n\n\n\n    ", "def", " ", "render", "(", "self", "):\n        self._update_arm()  ", "# 更新手臂内容 (暂时没有变化)", "\n        self.switch_to()\n        self.dispatch_events()\n        self.dispatch_event(", "'on_draw'", ")\n        self.flip()\n\n    ", "def", " ", "on_draw", "(", "self", "):\n        self.clear()        ", "# 清屏", "\n        self.batch.draw()   ", "# 画上 batch 里面的内容", "\n\n    ", "def", " ", "_update_arm", "(", "self", "):\n        ", "# 更新手臂的位置信息", "\n        (a1l, a2l) = self.arm_info[", "'l'", "]  ", "# radius, arm length", "\n        (a1r, a2r) = self.arm_info[", "'r'", "]  ", "# radian, angle", "\n        a1xy = self.center_coord  ", "# a1 start (x0, y0)", "\n        a1xy_ = np.array([np.cos(a1r), np.sin(a1r)]) * a1l + a1xy  ", "# a1 end and a2 start (x1, y1)", "\n        a2xy_ = np.array([np.cos(a1r + a2r), np.sin(a1r + a2r)]) * a2l + a1xy_  ", "# a2 end (x2, y2)", "\n\n        ", "# 第一段手臂的4个点信息", "\n        a1tr, a2tr = np.pi / ", "2", " - self.arm_info[", "'r'", "][", "0", "], np.pi / ", "2", " - self.arm_info[", "'r'", "].", "sum", "()\n        xy01 = a1xy + np.array([-np.cos(a1tr), np.sin(a1tr)]) * self.bar_thc\n        xy02 = a1xy + np.array([np.cos(a1tr), -np.sin(a1tr)]) * self.bar_thc\n        xy11 = a1xy_ + np.array([np.cos(a1tr), -np.sin(a1tr)]) * self.bar_thc\n        xy12 = a1xy_ + np.array([-np.cos(a1tr), np.sin(a1tr)]) * self.bar_thc\n\n        ", "# 第二段手臂的4个点信息", "\n        xy11_ = a1xy_ + np.array([np.cos(a2tr), -np.sin(a2tr)]) * self.bar_thc\n        xy12_ = a1xy_ + np.array([-np.cos(a2tr), np.sin(a2tr)]) * self.bar_thc\n        xy21 = a2xy_ + np.array([-np.cos(a2tr), np.sin(a2tr)]) * self.bar_thc\n        xy22 = a2xy_ + np.array([np.cos(a2tr), -np.sin(a2tr)]) * self.bar_thc\n\n        ", "# 将点信息都放入手臂显示中", "\n        self.arm1.vertices = np.concatenate((xy01, xy02, xy11, xy12))\n        self.arm2.vertices = np.concatenate((xy11_, xy12_, xy21, xy22))\n\n", "if", " __name__ == ", "\"__main__\"", ":\n    env = ArmEnv()\n    ", "while", " ", "True", ":\n        s = env.reset()\n        ", "for", " i ", "in", " ", "range", "(", "40", "):\n            env.render()\n            env.step(env.sample_action())\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这个其实近似是单位矩阵了&amp;#xff0c;因为e-17近似为0&amp;#xff0c;之所以出现这个现象&amp;#xff0c;主要原因的话&amp;#xff0c;应该是数据精度的问题&amp;#xff0c;用decimal试一下。&lt;/p&gt;\n&lt;p&gt;望点一下下采纳&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中矩阵与其逆相乘并不是单位矩阵", ["如下图，将矩阵的逆与矩阵相乘，并没有得到单位矩阵", "\n", "\n", "这行代码是照书上敲的，但是书上跑出来又是单位矩阵，请问这是为啥呀？", "\n"]], "Tag": "算法设计"}
{"Answer": "```\r\nint N,i,j,r,a[N][N],b[N][N],t; //这样写是错的，a和b的数组分配内存错了\r\nscanf(\"%d\",&amp;N);\r\n```\r\n\r\n```\r\n#include \"stdio.h\"\r\n#include \"stdlib.h\"\r\nint main ()\r\n{\r\n\tint N,i,j,r,a[100][100],b[100][100],t;\r\n\tscanf(\"%d\",&amp;N);\r\n\tif(N&gt;2&amp;&amp;N&lt;130)\r\n\t{\r\n\t\tfor(i=0;i&lt;N;i++)\r\n\t\t\tfor(j=0;j&lt;N;j++)\r\n\t\t\t\tscanf(\"%d\",&amp;a[i][j]);\r\n\t\tfor(i=0;i&lt;=N;i++)\r\n\t\t\tfor(j=0;j&lt;=N;j++)\r\n\t\t\t\tb[i][j]=a[j][i];\r\n\t\tfor(i=0;i&lt;N;i++)\r\n\t\t{\r\n\t\t\tfor(j=0;j&lt;N;j++)\r\n\t\t\t{\r\n\t\t\t\tif(j&lt;N-1)\r\n\t\t\t\t\tprintf(\"%d \",b[i][j]);\r\n\t\t\t\telse\r\n\t\t\t\t\tprintf(\"%d \",b[i][j]);\r\n\t\t\t}\r\n\t\t\tprintf(\"\\n\");\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n```", "Konwledge_Point": "应对NP完全问题", "Question": ["请问为什么我的矩阵输出全为0？", ["把矩阵 A 的行换成相应的列，得到的新矩阵称为 A 的转置矩阵。现在给定任意的一个 n 阶方阵 S , 求出其转置矩阵.", "\n\n", "输入描述第一行给定一个正整数 n (2 < n < 100). 接下来有 n 行，每行 n 个整数，代表方阵中第 i 行第 j 列的数.", "\n\n", "输出描述", "\n输出该方阵的转置矩阵.", "\n\n", "注意数字与数字之间用空格分开，每行最后一个数字后面仅跟换行符.", "\n\n", "样例输入", "\n3", "\n1 2 3", "\n4 5 6", "\n7 8 9", "\n样例输出", "\n1 4 7", "\n2 5 8", "\n3 6 9", "\n#include", "\n#define N130", "\nint main ()", "\n{", "\nint N,i,j,r,a[N][N],b[N][N],t;", "\nscanf(\"%d\",&N);", "\nif(N>2&&N<130)", "\n{", "\nfor(i=0;i<N;i++)", "\nfor(j=0;j<N;j++)", "\nscanf(\"%d\",&a[i][j]);", "\nfor(i=0;i<=N;i++)", "\nfor(j=0;j<=N;j++)", "\nb[i][j]=a[j][i];", "\nfor(i=0;i<N;i++)", "\n{", "\n    for(j=0;j<N;j++)", "\n    {", "\nif(j<N-1) ", "\n    printf(\"%d \",b[i][j]);", "\n    else", "\n    printf(\"%d \",b[i][j]);", "\n}", "\n    printf(\"\\n\");", "\n}", "\n}", "\nreturn 0;", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你执行的是1021.py这个脚本&amp;#xff0c;这里面只是定义了函数&amp;#xff0c;并没有调用执行函数&amp;#xff0c;肯定不会显示图片啊&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#numpy#的问题，如何解决？", ["想做频谱变换，代码都没问题，但是就是不出图，想不明白哪里错了", "\n", "import", " cv2 ", "as", " cv\n", "import", " numpy ", "as", " np\n", "from", " matplotlib ", "import", " pyplot ", "as", " plt\n\n", "# 显示中文", "\nplt.rcParams[", "'font.family'", "] = [", "'sans-serif'", "]\nplt.rcParams[", "'font.sans-serif'", "] = [", "'SimHei'", "]\n\nnp.seterr(divide=", "'ignore'", ", invalid=", "'ignore'", ")\nimg = cv.imread(", "'high.jpg'", ", ", "0", ")  ", "# 读入第一张图片", "\nimg2 = cv.imread(", "'low.jpg'", ", ", "0", ")  ", "# 读入第二张图片", "\nf = np.fft.fft2(img, axes=(", "0", ", ", "1", "))\nfshift = np.fft.fftshift(f)\nres = np.log(np.", "abs", "(fshift))  ", "# 幅度谱", "\nag = np.angle(fshift)  ", "# 相位谱", "\n\nishift1 = np.fft.ifftshift(res)  ", "# 利用幅度谱逆变化", "\niimg1 = np.fft.ifft2(ishift1)\niimg1 = np.", "abs", "(iimg1)\n\nishift = np.fft.ifftshift(ag)  ", "# 利用相位谱逆变换", "\niimg = np.fft.ifft2(ishift)\niimg = np.", "abs", "(iimg)\n\nishift2 = np.fft.ifftshift(fshift)  ", "# 整体逆变换", "\niimg2 = np.fft.ifft2(ishift2)\niimg2 = np.", "abs", "(iimg2)\n\nf2 = np.fft.fft2(iimg2, axes=(", "0", ", ", "1", "))\nfshift2 = np.fft.fftshift(f2)\nres2 = np.log(np.", "abs", "(fshift2))  ", "# 幅度谱", "\nag2 = np.angle(fshift2)  ", "# 相位谱", "\n\n\n", "# 分离", "\n", "def", " ", "magnitude_phaes_split", "(", "img", "):\n    ", "# 分离幅度谱与相位谱", "\n    dft = np.fft.fft2(img)\n    dft_shift = np.fft.fftshift(dft)\n    ", "# 幅度谱", "\n    magnitude_spectrum = np.bs(dft_shift)\n    ", "# 相位谱", "\n    phase_spectrum = np.angle(dft_shift)\n    ", "return", " magnitude_spectrum, phase_spectrum\n\n\n", "# 交换相位", "\n", "def", " ", "magnitude_phase_combine", "(", "img_m, img_p", "):\n    ", "# 幅度谱与相位谱结合", "\n    img_mandp = img_m * np.e ** (", "1j", " * img_p)\n    img_mandp = np.uint8(np.", "abs", "(np.fft.ifft2(img_mandp)))\n    img_mandp = img_mandp / np.", "max", "(img_mandp) * ", "225", "\n    ", "return", " img_mandp\n    img1_m, img1_p = magnitude_phase_split(img)\n    img2_m, img2_p = magnitude_phase_split(img2)\n    ", "# 将图像1的幅度谱与图像2的相位谱结合", "\n    img_1mAnd2p = magnitude_phaes_combine(img1_m, img1_p)\n    ", "# 将图像2的幅度谱与图像1的相位谱结合", "\n    img_2mAnd1p = magnitude_phase_combine(img2_m, img1_p)\n\n    plt.subplot(", "421", "), plt.imshow(img, ", "'gray'", "), plt.title(", "'原图'", ")  ", "# 原图", "\n    plt.axis(", "'off'", ")\n    plt.subplot(", "422", "), plt.imshow(res, ", "'grey'", "), plt.title(", "'幅度谱变换'", ")  ", "# 幅度谱变换", "\n    plt.axis(", "'off'", ")\n    plt.subplot(", "423", "), plt.imshow(ag, ", "'grey'", "), plt.title(", "'相位谱变换'", ")  ", "# 相位谱变换", "\n    plt.axis(", "'off'", ")\n    plt.subplot(", "424", "), plt.imshow(iimg, ", "'gray'", "), plt.title(", "'相位谱逆变换'", ")  ", "# 相位谱逆变换", "\n    plt.axis(", "'off'", ")\n    plt.subplot(", "425", "), plt.imshow(iimg1, ", "'gray'", "), plt.title(", "'幅度谱逆变换'", ")  ", "# 幅度谱逆变换", "\n    plt.axis(", "'off'", ")\n    plt.subplot(", "426", "), plt.imshow(iimg2, ", "'gray'", "), plt.title(", "'整体逆变换'", ")  ", "# 整体逆变换", "\n    plt.axis(", "'off'", ")\n    plt.subplot(", "427", "), plt.imshow(img_1mAnd2p, ", "'gray'", "), plt.title(", "'1幅度加2相位'", ")  ", "# 1幅度加2相位", "\n    plt.axis(", "'off'", ")\n    plt.subplot(", "428", "), plt.imshow(img_2mAnd1p, ", "'gray'", "), plt.title(", "'2幅度加1相位'", ")  ", "# 2幅度加1相位", "\n    plt.axis(", "'off'", ")\n    plt.show()\n\n\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在server这个目录下 有 package.json这个文件吗&amp;#xff1f;npm install 是根据项目目录下的 package.json来下载插件的&amp;#xff0c;如果没有这个文件就没办法下载插件&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["npm install 出现问题 npm err code enoent npm err syscall open等", ["出现的问题大概如下", "\n", "\n", "确定不是路径的问题；也不是在myapp上的npm install ；而是在server上的npm install；查看了网上的很多说法；都是说的在前端的myapp出现问题怎么办。", "而且执行此命令以后；server文件夹下边会出现package-lock.json", "\n"]], "Tag": "算法设计"}
{"Answer": "把代码中这句plt.xticks(rotation=50)改成下面，\r\n\r\n```\r\n for xtick in ax1.get_xticklabels():\r\n    xtick.set_rotation(50)\r\n```\r\nx轴的坐标就rotate了", "Konwledge_Point": "应对NP完全问题", "Question": ["matplotlib共用x轴标签旋转问题", ["目标是把这个图的x轴标签数字全部旋转90度。", "\n\n", " import numpy as np\nimport matplotlib.pyplot as plt\n\nt = np.arange(0.01, 10.0, 0.01)\ndata1 = np.exp(t)\ndata2 = np.sin(2 * np.pi * t)\n\nfig, ax1 = plt.subplots()\n\ncolor = 'tab:red'\nax1.set_xlabel('time (s)')\nax1.set_ylabel('exp', color=color)\nax1.plot(t, data1, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  \n\ncolor = 'tab:blue'\nax2.set_ylabel('sin', color=color)  \nax2.plot(t, data2, color=color)\nax2.tick_params(axis='y', labelcolor=color)\nplt.xticks(rotation=50) #如果不是共用轴，就可以设置。现在共用X轴就无法使用xticks的rotation来对x周标签旋转\nfig.tight_layout()  \nplt.show()\n"]], "Tag": "算法设计"}
{"Answer": "你要明白c == 3表示什么，这里c = [3,6] ，那么c == 3 的结果是[True, False]，所以b[c==3] 等价于 b[[True, False]]，结果嘛很明显了", "Konwledge_Point": "应对NP完全问题", "Question": ["python中numpy有问题不懂，求帮助？", ["import numpy as np\na=np.array([(1,2,3),(4,5,6)])\nb=a[:,0:2]\nc=a[:,2]\nd=b[c==3]\n", "\n\n", "这是结果", "\n\n", "\n\n", "我不懂b这个矩阵里都没有c这列，它是怎么做到输出结果的"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如果传给np.dstack()的参数是一个空的列表或元组&amp;#xff0c;就会抛出题主给出的错误信息。建议在数组深度合并前&amp;#xff0c;检查一下X的长度&amp;#xff0c;大概率是空的。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np\n&amp;gt;&amp;gt;&amp;gt; np.dstack([])\nTraceback (most recent call last):\n  File &amp;#34;&amp;lt;pyshell#65&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt;\n    np.dstack([])\n  File &amp;#34;&amp;lt;__array_function__ internals&amp;gt;&amp;#34;, line 6, in dstack\n  File &amp;#34;C:\\Users\\xufive\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\numpy\\lib\\shape_base.py&amp;#34;, line 723, in dstack\n    return _nx.concatenate(arrs, 2)\n  File &amp;#34;&amp;lt;__array_function__ internals&amp;gt;&amp;#34;, line 6, in concatenate\nValueError: need at least one array to concatenate&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python :need at least one array to concatenate", ["#!/usr/bin/python", "\n#-*- coding:cp936 -*-", "\nimport pandas as pd", "\nimport numpy as np", "\nimport matplotlib.pyplot as plt", "\nimport os", "\ndef load_file(filepath):", "\n    dataframe = pd.read_csv(filepath, header=None, delim_whitespace=True)", "\n    return dataframe.values", "\n\n", "def load_dataset(data_rootdir, dirname, group):", "\n    '''", "\n    该函数实现将训练数据或测试数据文件列表堆叠为三维数组", "\n    '''", "\n    filename_list = []", "\n    filepath_list = []", "\n    X = []", "\n    ", "\n    # os.walk() 方法是一个简单易用的文件、目录遍历器，可以高效的处理文件、目录。", "\n    for rootdir, dirnames, filenames in os.walk(data_rootdir + dirname):", "\n        for filename in filenames:", "\n            filename_list.append(filename)", "\n            filepath_list.append(os.path.join(rootdir, filename))", "\n        #print(filename_list)", "\n        #print(filepath_list)", "\n    ", "\n    # 遍历根目录下的文件，并读取为DataFrame格式；", "\n    for filepath in filepath_list:", "\n        X.append(load_file(filepath))", "\n    ", "\n    X = np.dstack(X) # dstack沿第三个维度叠加，两个二维数组叠加后，前两个维度尺寸不变，第三个维度增加；", "\n    y = load_file(data_rootdir+'/y_'+group+'.txt')", "\n    print('{}_X.shape:{},{}_y.shape:{}\\n'.format(group,X.shape,group,y.shape))", "\n    return X, y", "\n\n", "train_rootdir = 'F:/桌面/毕设/python/wanzheng/data/train/'", "\ntest_rootdir = 'F:/桌面/毕设/python/wanzheng/data/test/'", "\ndata_dirname = '/Inertial Signals/'", "\ntrainX, trainy = load_dataset(train_rootdir, data_dirname, 'train')", "\ntestX, testy = load_dataset(test_rootdir, data_dirname, 'test')", "\n\n", " ", "\n\n", " ", "\n\n"]], "Tag": "算法设计"}
{"Answer": "此类问题要么单步自己调试，要么做成可下载工程。。\r\n\r\n问答已经把代码给完全破坏了，代码也太长了。。。码农都习惯编译 --调试---解决BUG！！！！", "Konwledge_Point": "应对NP完全问题", "Question": ["c++openmp问题 程序正常运行可以，放在openmp中不运行！！急急急", ["#pragma hdrstop", "\n\n", "//---------------------------------------------------------------------------", "\n\n", "//#pragma argsused", "\n#include ", "\n#include ", "\n#include ", "\n#include ", "\n#include ", "\n#include", "\n//#include ", "\n#define PI 3.1415926535", "\n#define e 2.718281828", "\n\n", "float ", "space2d(int nr, int nc);", "\nfloat ***space3d(int nr, int ny, int nc);", "\nvoid free_space2d(float **a, int nr);", "\nvoid free_space3d(float ***b, int nr, int ny);", "\nvoid wfile(char filename[], float **data, int nr, int nc);", "\nvoid wfile3d(char filename[], float ", "**data, int nr, int ny, int nc);", "\nvoid wfile4d(char filename[], float *", "*data, int nr, int ny, int nc);", "\nvoid create_model(float ", "**vp, float *", "*vs, float ", "**rho, float *", "*vf, float ", "**rhof, float *", "*lamda, float ", "**lamda2u, float *", "*mu, float", "*por, int nr, int ny, int nc);", "\n\n", "float ", "**extmodel(float *", "*init_model, int nr, int ny, int nc, int np);", "\n\n", "int main()", "\n{", "\n    //给定参数", "\n\n", "int NX = 100;       //x方向网格点数%%%%%\nint NY = 100;     //y方向网格点数%%%%%\nint NZ = 300;       //z方向网格点数%%%%\nint NP = 20;        //pml层网格点数\nint i = 0;\n\nint sx = NX / 2 + NP;           //震源坐标点号\nint sy = NY / 2 + NP;\nint sz = NZ /6 + NP;\n\nint NX_ext = NX + 2 * NP;    //\nint NY_ext = NY + 2 * NP;\nint NZ_ext = NZ + 2 * NP;\n\nint NT = 8000;       //空间步长5%%%\nfloat H = 0.01f;\nfloat RC = 0.000001f;\nfloat DP = NP*H;\n\n//  double DT=0.0002;       //时间步长\ndouble DT = 1.0*pow(10, -6);        //时间步长%%%%\n                                    //  double F0=30.0;     //震源主频\ndouble F0 = 3.0*pow(10, 3);     //震源主频,主频太高会造成频散\n                                    //double T0=1.2/F0;  \nfloat T0 = 1.0 / F0;\ndouble Vpmax = 4270.0;    //模型最大纵波速度,用于稳定性计算\ndouble Vpmin = 1500.0;     //模型最小纵波速度,用于控制数值频散\ndouble Vsmax = 2650.0;\ndouble Vsmin = 1500.0;\n\nfloat ***vs;        //初始模型横波速度\nfloat ***vp;        //初始模型纵波速度\nfloat ***rho;      //初始模型密度\nfloat ***vf;        //孔隙流体速度\nfloat ***rhof;  //孔隙流体密度\nfloat ***mu;        //剪切模量\nfloat ***lamda;  //拉梅系数\nfloat ***lamda2u;\n//float **Q;\n//float **R;\nfloat ***por;\n//  float **D11,**D12,**D22;\n//  float **b;\nfloat **sis_x;  //地震记录x分量     波形记录-二维数据\nfloat **sis_y;  //地震记录y分量\nfloat **sis_z;  //地震记录z分量\n\n\n\nfloat ***vx;\nfloat ***vxx;\n\nfloat ***vy;\n\nfloat ***vz;\n/*float **Vx_x;//流相速度\nfloat **Vx_z;\nfloat **Vx;\nfloat **Vz_x;\nfloat **Vz_z;\nfloat **Vz;\n*/\n\nfloat ***txx;//应力分量\n\nfloat ***tyy;//应力分量\n\n\nfloat ***tzz;\n\nfloat ***txy;\nfloat ***txz;\nfloat ***tyz;\nfloat ***source;\n/*float **ssx;//流体应力\nfloat **ssz;\nfloat **dxi,**dxi2;\nfloat **dzj,**dzj2;\n*/\n//  double Kb,Ks,Kf,a,D;\nfloat tt, x, y, z, xoleft, xoright, yoleft, yoright, zoleft, zoright, d0=0.0f;\nfloat v0, y5, y6 , y7 , y8, y9 , y10, y11, y12, y13, rho_tempx, rho_tempy, rho_tempz, muxz, muxy, muyz, lamda2u_temp, lamda_temp;\n//  double D11_tempx,D12_tempx,D22_tempx,R_temp,D11_tempz,D12_tempz,D22_tempz;\nfloat xx1, xy1, xz1, yx2 , yy2, yz2 , zx3, zy3, zz3 , best_dt;\nint ix, iy, iz, it;\n\n\nvs = space3d(NZ, NY, NX);\nvp = space3d(NZ, NY, NX);\nrho = space3d(NZ, NY, NX);\nvf = space3d(NZ, NY, NX);\nrhof = space3d(NZ, NY, NX);\n//Q=space2d(NZ,NX);\n//R=space2d(NZ,NX);\npor = space3d(NZ, NY, NX);\n//D11=space2d(NZ,NX);D12=space2d(NZ,NX);D22=space2d(NZ,NX);\n//  b=space2d(NZ,NX);\nmu = space3d(NZ, NY, NX);\nlamda = space3d(NZ, NY, NX);\nlamda2u = space3d(NZ, NY, NX);\ncreate_model(vp, vs, rho, vf, rhof, lamda, lamda2u, mu, por, NZ, NY, NX);\n\nchar vp_name[] = \"vp_ext.dat\";\nfloat ***vs_ext;\nfloat ***vp_ext;\nfloat ***rho_ext;\nfloat ***mu_ext;\nfloat ***lamda_ext;\nfloat ***lamda2u_ext;\n// float ***Q_ext;\n//  float ***R_ext;\nfloat ***vf_ext;\nfloat ***rhof_ext;\nfloat ***por_ext;\nfloat ***dxi;\nfloat ***dxi2;\nfloat ***dyj;\nfloat ***dyj2;\nfloat ***dzk;\nfloat ***dzk2;\n//float ***b_ext;\n//  float **D11_ext,**D12_ext,**D22_ext;\n\n\n//数据扩充，加上吸收边界\nvs_ext = extmodel(vs, NZ, NY, NX, NP);\nvp_ext = extmodel(vp, NZ, NY, NX, NP);\nrho_ext = extmodel(rho, NZ, NY, NX, NP);\nmu_ext = extmodel(mu, NZ, NY, NX, NP);\nlamda_ext = extmodel(lamda, NZ, NY, NX, NP);\nlamda2u_ext = extmodel(lamda2u, NZ, NY, NX, NP);\nvf_ext = extmodel(vf, NZ, NY, NX, NP);\nrhof_ext = extmodel(rhof, NZ, NY, NX, NP);\n//Q_ext=extmodel(Q,NZ,NX,NP);\n//R_ext=extmodel(R,NZ,NX,NP);\npor_ext = extmodel(por, NZ, NY, NX, NP);\n//  b_ext=extmodel(b,NZ,NX,NP);\n//  D11_ext=extmodel(D11,NZ,NX,NP);D12_ext=extmodel(D12,NZ,NX,NP);\n//  D22_ext=extmodel(D22,NZ,NX,NP);\n\nwfile3d(vp_name, vp_ext, NZ_ext, NY_ext, NX_ext);  //建立文件\n\n                                                   //申请空间\n\nvx = space3d(NZ_ext, NY_ext, NX_ext);\n\n\nvy = space3d(NZ_ext, NY_ext, NX_ext);\nvxx= space3d(NT/200,NZ_ext/2,  NX_ext/2);\n\nvz = space3d(NZ_ext, NY_ext, NX_ext);\n/*Vx_x=space2d(NZ_ext,NX_ext);\nVx_z=space2d(NZ_ext,NX_ext);\nVx=space2d(NZ_ext,NX_ext);\nVz_x=space2d(NZ_ext,NX_ext);\nVz_z=space2d(NZ_ext,NX_ext);\nVz=space2d(NZ_ext,NX_ext);*/\ntxx = space3d(NZ_ext, NY_ext, NX_ext);\n\n\ntyy = space3d(NZ_ext, NY_ext, NX_ext);\n\ntzz = space3d(NZ_ext, NY_ext, NX_ext);\n\ntxy = space3d(NZ_ext, NY_ext, NX_ext);\n\ntxz = space3d(NZ_ext, NY_ext, NX_ext);\n\ntyz = space3d(NZ_ext, NY_ext, NX_ext);\nsource= space3d(NZ_ext, NY_ext, NX_ext);\n\n/*  tzz_x=space2d(NZ_ext,NX_ext);\ntzz_z=space2d(NZ_ext,NX_ext);\ntxz_x=space2d(NZ_ext,NX_ext);\ntxz_z=space2d(NZ_ext,NX_ext);\nssx=space2d(NZ_ext,NX_ext);\nssz=space2d(NZ_ext,NX_ext);*/\n\ndxi = space3d(NZ_ext, NY_ext, NX_ext);\ndxi2 = space3d(NZ_ext, NY_ext, NX_ext);\ndyj = space3d(NZ_ext, NY_ext, NX_ext);\ndyj2 = space3d(NZ_ext, NY_ext, NX_ext);\ndzk = space3d(NZ_ext, NY_ext, NX_ext);\ndzk2 = space3d(NZ_ext, NY_ext, NX_ext);\nchar dxi_name[] = \"dxi.dat\";\nchar dzk_name[] = \"dzk.dat\";\n//(xoleft,xoright)模型的物理边界—不算PML\nxoleft = DP;\nxoright = (NX_ext-1)*H - DP;\nyoleft = DP;\nyoright = (NY_ext-1 )*H - DP;\nzoleft = DP;\nzoright = (NZ_ext-1 )*H - DP;\n\n\n//用于对vx_x[iz][ix]等的求解，加入吸收边界，使数值衰减\nfor (iz = 0; iz < NZ_ext; iz++)\n{\n    for (iy = 0; iy < NY_ext; iy++)\n    {\n        for (ix = 0; ix < NX_ext; ix++)\n        {\n            x = ix*H; y = iy*H; z = iz*H;\n            if ((x>=0&&x < xoleft)&&(y>=0&&y<NY_ext*H)&& (z >= 0 && z<NZ_ext*H))\n            {\n                v0 = 1500.0f;\n                d0 = 3.0*v0*log(1.0 / RC) / (2.0*DP);\n                dxi[iz][iy][ix] = d0*pow(((xoleft - x) / DP), 2);\n                dxi2[iz][iy][ix] = d0*pow(((xoleft - x - 0.5*H) / DP), 2);\n            }\n            if ((x >= xoright && x < NX_ext*H) && (y >= 0 && y<NY_ext*H) && (z >= 0 && z<NZ_ext*H))\n            {\n                v0 = 1500.0f;\n                d0 = 3.0*v0*log(1.0 / RC) / (2.0*DP);\n                dxi[iz][iy][ix] = d0*pow(((x - xoright) / DP), 2);\n                dxi2[iz][iy][ix] = d0*pow(((x + 0.5*H - xoright) / DP), 2);\n            }\n\n            {\n                if ((x >= 0 && x<NX_ext*H) && (y >= 0 && y < yoleft) && (z >= 0 && z<NZ_ext*H))\n                {\n                    v0 = 1500.0f;\n                    d0 = 3.0*v0*log(1.0 / RC) / (2.0*DP);\n                    //d0=3.0*v0*(8.0/15.0-3.0/100.0*NP+NP*NP/1500.0)/H; \n                    dyj[iz][iy][ix] = d0*pow(((yoleft - y) / DP), 2);\n                    dyj2[iz][iy][ix] = d0*pow(((yoleft - y - 0.5*H) / DP), 2);\n                }\n                if ((x >= 0 && x<NX_ext*H) && (y >= yoright && y < NY_ext*H) &&(z >= 0 && z<NZ_ext*H))\n                {\n                    v0 = 1500.0f;\n                    d0 = 3.0*v0*log(1.0 / RC) / (2.0*DP);\n                    dyj[iz][iy][ix] = d0*pow(((y - yoright) / DP), 2);\n                    dyj2[iz][iy][ix] = d0*pow(((y + 0.5*H - yoright) / DP), 2);\n                }\n\n                if ((x >= 0 && x<NX_ext*H) && (y >= 0 && y<NY_ext*H) && (z >= 0 && z < zoleft) )\n                {\n                    v0 = 1500.0f;\n                    d0 = 3.0*v0*log(1.0 / RC) / (2.0*DP);\n                    //d0=3.0*v0*(8.0/15.0-3.0/100.0*NP+NP*NP/1500.0)/H; \n                    dzk[iz][iy][ix] = d0*pow(((zoleft - z) / DP), 2);\n                    dzk2[iz][iy][ix] = d0*pow(((zoleft - z - 0.5*H) / DP), 2);\n                }\n                if ((x >= 0 && x<NX_ext*H) && (y >= 0 && y<NY_ext*H) && (z >= zoright && z < NZ_ext*H) )\n                {\n                    v0 = 1500.0f;\n                    d0 = 3.0*v0*log(1.0 / RC) / (2.0*DP);\n                    dzk[iz][iy][ix] = d0*pow(((z - zoright) / DP), 2);\n                    dzk2[iz][iy][ix] = d0*pow(((z + 0.5*H - zoright) / DP), 2);\n                }\n\n            }\n        }\n    }\n}\n\n\n/*for (iz = 0; iz<NZ_ext; iz++)\n{\n    for (iy = 0; iy<NY_ext; iy++)\n    {\n        y = iy*H;\n        for (ix = 0; ix<NX_ext; ix++)\n        {\n            if (y < yoleft)\n            {\n                v0 = 1500.0;\n                d0 = 3.0*v0*log(1.0 / RC) / (2.0*DP);\n                //d0=3.0*v0*(8.0/15.0-3.0/100.0*NP+NP*NP/1500.0)/H; \n                dyj[iz][iy][ix] = d0*pow(((yoleft - y) / DP), 2);\n                dyj2[iz][iy][ix] = d0*pow(((yoleft - y - 0.5*H) / DP), 2);\n            }\n            else if (y >= 0.9999*yoright)\n            {\n                v0 = 1500.0;\n                d0 = 3.0*v0*log(1.0 / RC) / (2.0*DP);\n                dyj[iz][iy][ix] = d0*pow(((y - yoright) / DP), 2);\n                dyj2[iz][iy][ix] = d0*pow(((y + 0.5*H - yoright) / DP), 2);\n            }\n            else\n            {\n                dyj[iz][iy][ix] = 0.; dyj2[iz][iy][ix] = 0.;\n            }\n        }\n    }\n}\n\nfor (iz = 0; iz<NZ_ext; iz++)\n{\n    z = iz*H;\n    for (iy = 0; iy<NY_ext; iy++)\n    {\n\n        for (ix = 0; ix<NX_ext; ix++)\n        {\n            if (z < zoleft)\n            {\n                v0 = 1500.0;\n                d0 = 3.0*v0*log(1.0 / RC) / (2.0*DP);\n                //d0=3.0*v0*(8.0/15.0-3.0/100.0*NP+NP*NP/1500.0)/H; \n                dzk[iz][iy][ix] = d0*pow(((zoleft - z) / DP), 2);\n                dzk2[iz][iy][ix] = d0*pow(((zoleft - z - 0.5*H) / DP), 2);\n            }\n            else if (z >= 0.9999*zoright)\n            {\n                v0 = 1500.0;\n                d0 = 3.0*v0*log(1.0 / RC) / (2.0*DP);\n                dzk[iz][iy][ix] = d0*pow(((z - zoright) / DP), 2);\n                dzk2[iz][iy][ix] = d0*pow(((z + 0.5*H - zoright) / DP), 2);\n            }\n            else\n            {\n                dzk[iz][iy][ix] = 0.; dzk2[iz][iy][ix] = 0.;\n            }\n        }\n    }\n}*/\nwfile3d(dxi_name, dxi, NZ_ext, NY_ext, NX_ext);\nwfile3d(dzk_name, dzk, NZ_ext, NY_ext, NX_ext);//建立文件\n                                                 //开始时间递推\nfloat a1 = 9.0 / 8.0;\nfloat a2 = -1.0 / 24.0;\n//pml初始参数\n\nfloat xFHalfTemp1;\nfloat xFHalfTemp2 , xFIntTemp1, xFIntTemp2, yFHalfTemp1, yFHalfTemp2, yFIntTemp1, yFIntTemp2, zFHalfTemp1, zFHalfTemp2, zFIntTemp1, zFIntTemp2 ;\nfloat ***pmlxSxx, ***pmlySxy, ***pmlzSxz, ***pmlxSxy, ***pmlySyy, ***pmlzSyz, ***pmlxSxz, ***pmlySyz, ***pmlzSzz;\npmlxSxx= space3d(NZ_ext, NY_ext, NX_ext);\npmlySxy= space3d(NZ_ext, NY_ext, NX_ext);\npmlzSxz= space3d(NZ_ext, NY_ext, NX_ext);\npmlxSxy= space3d(NZ_ext, NY_ext, NX_ext);\npmlySyy= space3d(NZ_ext, NY_ext, NX_ext);\npmlzSyz= space3d(NZ_ext, NY_ext, NX_ext);\npmlxSxz= space3d(NZ_ext, NY_ext, NX_ext);\npmlySyz= space3d(NZ_ext, NY_ext, NX_ext);\npmlzSzz= space3d(NZ_ext, NY_ext, NX_ext);\nfloat ***pmlxVx, ***pmlyVy, ***pmlzVz, ***pmlzVx, ***pmlxVz, ***pmlyVx, ***pmlxVy, ***pmlzVy, ***pmlyVz;\npmlxVx = space3d(NZ_ext, NY_ext, NX_ext);\npmlyVy = space3d(NZ_ext, NY_ext, NX_ext);\npmlzVz = space3d(NZ_ext, NY_ext, NX_ext);\npmlzVx = space3d(NZ_ext, NY_ext, NX_ext);\npmlxVz = space3d(NZ_ext, NY_ext, NX_ext);\npmlyVx = space3d(NZ_ext, NY_ext, NX_ext);\npmlxVy = space3d(NZ_ext, NY_ext, NX_ext);\npmlzVy = space3d(NZ_ext, NY_ext, NX_ext);\npmlyVz = space3d(NZ_ext, NY_ext, NX_ext);\nfloat ***DxSxxPre, ***DySxyPre, ***DzSxzPre, ***DxSxyPre, ***DySyyPre, ***DzSyzPre, ***DxSxzPre, ***DySyzPre, ***DzSzzPre;\nDxSxxPre = space3d(NZ_ext, NY_ext, NX_ext);\nDySxyPre = space3d(NZ_ext, NY_ext, NX_ext);\nDzSxzPre = space3d(NZ_ext, NY_ext, NX_ext);\nDxSxyPre = space3d(NZ_ext, NY_ext, NX_ext);\nDySyyPre = space3d(NZ_ext, NY_ext, NX_ext);\nDzSyzPre = space3d(NZ_ext, NY_ext, NX_ext);\nDxSxzPre = space3d(NZ_ext, NY_ext, NX_ext);\nDySyzPre = space3d(NZ_ext, NY_ext, NX_ext);\nDzSzzPre = space3d(NZ_ext, NY_ext, NX_ext);\nfloat ***DxVxPre, ***DyVyPre, ***DzVzPre, ***DzVxPre, ***DxVzPre, ***DyVxPre, ***DxVyPre, ***DzVyPre, ***DyVzPre;\nDxVxPre = space3d(NZ_ext, NY_ext, NX_ext);\nDyVyPre = space3d(NZ_ext, NY_ext, NX_ext);\nDzVzPre = space3d(NZ_ext, NY_ext, NX_ext);\nDzVxPre = space3d(NZ_ext, NY_ext, NX_ext);\nDxVzPre = space3d(NZ_ext, NY_ext, NX_ext);\nDyVxPre = space3d(NZ_ext, NY_ext, NX_ext);\nDxVyPre = space3d(NZ_ext, NY_ext, NX_ext);\nDzVyPre = space3d(NZ_ext, NY_ext, NX_ext);\nDyVzPre = space3d(NZ_ext, NY_ext, NX_ext);\n\n//这里的代码应该修正一下，应该从数据里面提取最大最小速度\n\n//控制网格频散\nif (Vsmin / (F0*H) < 15)\n    printf(\"1\\n\");\n\n//检查稳定性条件\nbest_dt = 6.0*H / (7.0*sqrt(2.0)*Vpmax);\nif (DT >= best_dt)\n    printf(\"2 %f\\n\", best_dt);\n\nclock_t start, finish;\nstart = clock();\n\nsis_x = space2d(NZ, NT);\nsis_y = space2d(NZ, NT);\nsis_z = space2d(NZ, NT);\n    omp_set_num_threads(16);\n#pragma omp parallel private(ix, iy,iz,rho_tempx,rho_tempy,rho_tempz,xx1 , xy1, xz1, yx2, yy2 , yz2, zx3,zy3, zz3,xFHalfTemp1,yFHalfTemp1,zFHalfTemp1,xFIntTemp1,yFIntTemp1,zFIntTemp1,xFHalfTemp2,yFHalfTemp2,zFHalfTemp2,xFIntTemp2,yFIntTemp2,zFIntTemp2,muxz,muyz,muxy,lamda2u_temp,lamda_temp,y5,y6,y7,y8,y9,y10,y11,y12,y13) \n{//$OMP PARALLEL DEFAULT(SHARED) PRIVATE(x, y, z, &\n    //$OMP                                  VxSource, VySource, VzSource, SxxSource, SyySource, SzzSource, SxySource, SxzSource, SyzSource, &\n    //$OMP                                  DenOReciprocal, DenXReciprocal, DenYReciprocal, DenZReciprocal, LambdaO, MuO, MuXY, MuXZ, MuYZ, &\n    //$OMP                                  DxSxx, DySxy, DzSxz, DxSxy, DySyy, DzSyz, DxSxz, DySyz, DzSzz, &\n    //$OMP                                  xAttFactorHalfTemp1, xAttFactorIntTemp1, yAttFactorHalfTemp1, yAttFactorIntTemp1, zAttFactorHalfTemp1, zAttFactorIntTemp1, &\n    //$OMP                                  xAttFactorHalfTemp2, xAttFactorIntTemp2, yAttFactorHalfTemp2, yAttFactorIntTemp2, zAttFactorHalfTemp2, zAttFactorIntTemp2, &\n    //$OMP                                  BoolTemp1, BoolTemp2, BoolTemp3, BoolTemp4, BoolTemp5, BoolTemp6, &\n    //$OMP                                  DxVx, DyVy, DzVz, DxVz, DzVx, DxVy, DyVx, DyVz, DzVy)\n\n\n    for (it = 0; it < NT; it++)\n    {\n        tt = it*DT;\n        if (it % 100 == 0) printf(\"it=%d\\n\", it);\n\n        //计算质点速度v\n       #pragma omp for\n        for (iz = 2; iz < NZ_ext - 2; iz++)\n            for (iy = 2; iy < NY_ext - 2; iy++)\n                for (ix = 2; ix < NX_ext - 2; ix++)\n                {\n                    rho_tempx = 2 / (rho_ext[iz][iy][ix] + rho_ext[iz][iy][ix + 1]);\n                    rho_tempy = 2 / (rho_ext[iz][iy][ix] + rho_ext[iz][iy + 1][ix]);\n                    rho_tempz = 2 / (rho_ext[iz][iy][ix] + rho_ext[iz + 1][iy][ix]);\n\n                   //4阶\n                    /*xx1 = ((a1*(txx[iz][iy][ix + 1] - txx[iz][iy][ix]) +\n                        a2*(txx[iz][iy][ix + 2] - txx[iz][iy][ix - 1]))) / H;\n                    xy1 = ((a1*(txy[iz][iy][ix] - txy[iz][iy - 1][ix]) +\n                        a2*(txy[iz][iy + 1][ix] - txy[iz][iy - 2][ix]))) / H;\n                    xz1 = ((a1*(txz[iz][iy][ix] - txz[iz - 1][iy][ix]) +\n                        a2*(txz[iz + 1][iy][ix] - txz[iz - 2][iy][ix]))) / H;\n\n                    yx2 = ((a1*(txy[iz][iy][ix] - txy[iz][iy][ix - 1]) +\n                        a2*(txy[iz][iy][ix + 1] - txy[iz][iy][ix - 2]))) / H;\n                    yy2 = ((a1*(tyy[iz][iy + 1][ix] - tyy[iz][iy][ix]) +\n                        a2*(tyy[iz][iy + 2][ix] - tyy[iz][iy - 1][ix]))) / H;\n                    yz2 = ((a1*(tyz[iz][iy][ix] - tyz[iz - 1][iy][ix]) +\n                        a2*(tyz[iz + 1][iy][ix] - tyz[iz - 2][iy][ix]))) / H;\n\n                    zx3 = ((a1*(txz[iz][iy][ix] - txz[iz][iy][ix - 1]) +\n                        a2*(txz[iz][iy][ix + 1] - txz[iz][iy][ix - 2]))) / H;\n                    zy3 = ((a1*(tyz[iz][iy][ix] - tyz[iz][iy - 1][ix]) +\n                        a2*(tyz[iz][iy + 1][ix] - tyz[iz][iy - 2][ix]))) / H;\n                    zz3 = ((a1*(tzz[iz + 1][iy][ix] - tzz[iz][iy][ix]) +\n                        a2*(tzz[iz + 2][iy][ix] - tzz[iz - 1][iy][ix]))) / H;*/\n                    //二阶\n                    xx1 = (txx[iz][iy][ix + 1] - txx[iz][iy][ix]) / H;\n                    xy1 = (txy[iz][iy][ix] - txy[iz][iy - 1][ix]) / H;\n                    xz1 = (txz[iz][iy][ix] - txz[iz - 1][iy][ix]) / H;\n                    yx2 = (txy[iz][iy][ix] - txy[iz][iy][ix - 1]) / H;\n                    yy2 = (tyy[iz][iy + 1][ix] - tyy[iz][iy][ix]) / H;\n                    yz2 = (tyz[iz][iy][ix] - tyz[iz - 1][iy][ix]) / H;\n                    zx3 = (txz[iz][iy][ix] - txz[iz][iy][ix - 1]) / H;\n                    zy3 = (tyz[iz][iy][ix] - tyz[iz][iy - 1][ix]) / H;\n                    zz3 = (tzz[iz + 1][iy][ix] - tzz[iz][iy][ix]) / H;\n\n                    /*x = ix*H; y = iy*H; z = iz*H;\n                    if(((x >= 0 && x < xoleft) && (y >= 0 && y<NY_ext*H) && (z >= 0 && z<NZ_ext*H))\n\n                    ||((x >= xoright && x < NX_ext*H) && (y >= 0 && y<NY_ext*H) && (z >= 0 && z<NZ_ext*H))\n\n                        ||((x >= 0 && x<NX_ext*H) && (y >= 0 && y < yoleft) && (z >= 0 && z<NZ_ext*H))\n\n                        ||((x >= 0 && x<NX_ext*H) && (y >= yoright && y < NY_ext*H) && (z >= 0 && z<NZ_ext*H))\n\n\n                        ||((x >= 0 && x<NX_ext*H) && (y >= 0 && y<NY_ext*H) && (z >= 0 && z < zoleft))\n\n                        ||((x >= 0 && x<NX_ext*H) && (y >= 0 && y<NY_ext*H) && (z >= zoright && z < NZ_ext*H)))*/\n                                            if((ix<NP||ix>=(NX_ext-1-NP))||(iy<NP||iy>=(NY_ext-1-NP))||(iz<NP||iz>=(NZ_ext-1-NP)))\n                    {\n                        xFHalfTemp1 = exp(-(dxi2[iz][iy][ix])*DT); xFIntTemp1 = exp(-(dxi[iz][iy][ix])*DT);\n                        yFHalfTemp1 = exp(-(dyj2[iz][iy][ix])*DT); yFIntTemp1 = exp(-(dyj[iz][iy][ix])*DT);\n                        zFHalfTemp1 = exp(-(dzk2[iz][iy][ix])*DT); zFIntTemp1 = exp(-(dzk[iz][iy][ix])*DT);\n                        xFHalfTemp2 = -DT*dxi2[iz][iy][ix] * 0.5; xFIntTemp2 = -DT*dxi[iz][iy][ix] * 0.5;\n                        yFHalfTemp2 = -DT*dyj2[iz][iy][ix] * 0.5; yFIntTemp2 = -DT*dyj[iz][iy][ix] * 0.5;\n                        zFHalfTemp2 = -DT*dzk2[iz][iy][ix] * 0.5; zFIntTemp2 = -DT*dzk[iz][iy][ix] * 0.5;\n                        pmlxSxx[iz][iy][ix] = xFHalfTemp1*pmlxSxx[iz][iy][ix] + xFHalfTemp2*(xFHalfTemp1*DxSxxPre[iz][iy][ix] + xx1);\n                        pmlySxy[iz][iy][ix] = yFIntTemp1*pmlySxy[iz][iy][ix] + yFIntTemp2*(yFIntTemp1*DySxyPre[iz][iy][ix] + xy1);\n                        pmlzSxz[iz][iy][ix] = zFIntTemp1*pmlzSxz[iz][iy][ix] + zFIntTemp2*(zFIntTemp1*DzSxzPre[iz][iy][ix] + xz1);\n                        DxSxxPre[iz][iy][ix] = xx1; DySxyPre[iz][iy][ix] = xy1; DzSxzPre[iz][iy][ix] = xz1;\n                        xx1 = xx1 + pmlxSxx[iz][iy][ix];\n                        xy1 = xy1 + pmlySxy[iz][iy][ix];\n                        xz1 = xz1 + pmlzSxz[iz][iy][ix];\n\n                        pmlxSxy[iz][iy][ix] = xFIntTemp1*pmlxSxy[iz][iy][ix] + xFIntTemp2*(xFIntTemp1*DxSxyPre[iz][iy][ix] + yx2);\n                        pmlySyy[iz][iy][ix] = yFHalfTemp1*pmlySyy[iz][iy][ix] + yFHalfTemp2*(yFHalfTemp1*DySyyPre[iz][iy][ix] + yy2);\n                        pmlzSyz[iz][iy][ix] = zFIntTemp1*pmlzSyz[iz][iy][ix] + zFIntTemp2*(zFIntTemp1*DzSyzPre[iz][iy][ix] + yz2);\n                        DxSxyPre[iz][iy][ix] = yx2; DySyyPre[iz][iy][ix] = yy2; DzSyzPre[iz][iy][ix] = yz2;\n                        yx2 = yx2 + pmlxSxy[iz][iy][ix];\n                        yy2 = yy2 + pmlySyy[iz][iy][ix];\n                        yz2 = yz2 + pmlzSyz[iz][iy][ix];\n\n                        pmlxSxz[iz][iy][ix] = xFIntTemp1*pmlxSxz[iz][iy][ix] + xFIntTemp2*(xFIntTemp1*DxSxzPre[iz][iy][ix] + zx3);\n                        pmlySyz[iz][iy][ix] = yFIntTemp1*pmlySyz[iz][iy][ix] + yFIntTemp2*(yFIntTemp1*DySyzPre[iz][iy][ix] + zy3);\n                        pmlzSzz[iz][iy][ix] = zFHalfTemp1*pmlzSzz[iz][iy][ix] + zFHalfTemp2*(zFHalfTemp1*DzSzzPre[iz][iy][ix] + zz3);\n                        DxSxzPre[iz][iy][ix] = zx3; DySyzPre[iz][iy][ix] = zy3; DzSzzPre[iz][iy][ix] = zz3;\n                        zx3 = zx3 + pmlxSxz[iz][iy][ix];\n                        zy3 = zy3 + pmlySyz[iz][iy][ix];\n                        zz3 = zz3 + pmlzSzz[iz][iy][ix];\n                    }\n\n                    vx[iz][iy][ix] = vx[iz][iy][ix] + (DT*rho_tempx)*(xx1 + xy1 + xz1);\n                    vy[iz][iy][ix] = vy[iz][iy][ix] + (DT*rho_tempy)*(yx2 + yy2 + yz2);\n                    vz[iz][iy][ix] = vz[iz][iy][ix] + (DT*rho_tempz)*(zx3 + zy3 + zz3);\n\n\n\n                }\n\n           #pragma omp barrier\n\n        //计算应力\n         #pragma omp for\n        for (iz = 2; iz < NZ_ext - 2; iz++)\n            for (iy = 2; iy < NY_ext - 2; iy++)\n                for (ix = 2; ix < NX_ext - 2; ix++)\n                {\n\n                    if (mu_ext[iz][iy][ix] == 0 || mu_ext[iz][iy][ix + 1] == 0 || mu_ext[iz + 1][iy][ix] == 0 || mu_ext[iz + 1][iy][ix + 1] == 0)\n                        muxz = 0.0;\n                    else\n                        muxz = 1 / (0.25*(1 / mu_ext[iz][iy][ix] + 1 / mu_ext[iz][iy][ix + 1] + 1 / mu_ext[iz + 1][iy][ix] + 1 / mu_ext[iz + 1][iy][ix + 1]));\n                    if (mu_ext[iz][iy][ix] == 0 || mu_ext[iz][iy + 1][ix] == 0 || mu_ext[iz + 1][iy][ix] == 0 || mu_ext[iz + 1][iy + 1][ix] == 0)\n                        muyz = 0.0;\n                    else\n                        muyz = 1 / (0.25*(1 / mu_ext[iz][iy][ix] + 1 / mu_ext[iz][iy + 1][ix] + 1 / mu_ext[iz + 1][iy][ix] + 1 / mu_ext[iz + 1][iy + 1][ix]));\n                    if (mu_ext[iz][iy][ix] == 0 || mu_ext[iz][iy][ix + 1] == 0 || mu_ext[iz][iy + 1][ix] == 0 || mu_ext[iz][iy + 1][ix + 1] == 0)\n                        muxy = 0.0;\n                    else\n                        muxy = 1 / (0.25*(1 / mu_ext[iz][iy][ix] + 1 / mu_ext[iz][iy][ix + 1] + 1 / mu_ext[iz][iy + 1][ix] + 1 / mu_ext[iz][iy + 1][ix + 1]));\n\n\n                    lamda2u_temp = lamda2u_ext[iz][iy][ix];\n                    lamda_temp = lamda_ext[iz][iy][ix];\n                    //  muxz=0.0;\n                    if ( i==0&&ix == sx&&iy == sy&&iz == sz)\n                    {\n                        source[iz][iy][ix] = (1 - 2 * PI*PI*F0*F0*(tt - T0)*(tt - T0))*exp(-PI*PI*F0*F0*(tt - T0)*(tt - T0));\n                    }\n                    else if(i==1&&(ix == (sx+1)&&iy == sy&&iz == sz))\n                    {\n                        source[iz][iy][ix] = -(1 - 2 * PI*PI*F0*F0*(tt - T0)*(tt - T0))*exp(-PI*PI*F0*F0*(tt - T0)*(tt - T0));\n                    }\n                    else if (i == 1 && (ix == (sx - 1) && iy == sy&&iz == sz))\n                    {\n                        source[iz][iy][ix] = (1 - 2 * PI*PI*F0*F0*(tt - T0)*(tt - T0))*exp(-PI*PI*F0*F0*(tt - T0)*(tt - T0));\n                    }\n\n                    //  Qz=Q_ext[iz][ix];R_temp=R_ext[iz][ix];lamda2u_temp=lamda2u_ext[iz][ix];lamda_temp=lamda_ext[iz][ix];\n\n                    /*y5 = (a1*(vx[iz][iy][ix] - vx[iz][iy][ix - 1]) +\n                        a2*(vx[iz][iy][ix + 1] - vx[iz][iy][ix - 2])) / H;\n\n                    y6 = (a1*(vy[iz][iy][ix] - vy[iz][iy - 1][ix]) +\n                        a2*(vy[iz][iy + 1][ix] - vy[iz][iy - 2][ix])) / H;\n\n                    y7 = (a1*(vz[iz][iy][ix] - vz[iz - 1][iy][ix]) +\n                        a2*(vz[iz + 1][iy][ix] - vz[iz - 2][iy][ix])) / H;\n\n                    y8 = ((a1*(vx[iz][iy + 1][ix] - vx[iz][iy][ix]) +\n                        a2*(vx[iz][iy + 2][ix] - vx[iz][iy - 1][ix]))) / H;\n\n                    y9 = ((a1*(vy[iz][iy][ix + 1] - vy[iz][iy][ix]) +\n                        a2*(vy[iz][iy][ix + 2] - vy[iz][iy][ix - 1]))) / H;\n\n                    y10 = ((a1*(vx[iz + 1][iy][ix] - vx[iz][iy][ix]) +\n                        a2*(vx[iz + 2][iy][ix] - vx[iz - 1][iy][ix]))) / H;\n\n                    y11 = ((a1*(vz[iz][iy][ix + 1] - vz[iz][iy][ix]) +\n                        a2*(vz[iz][iy][ix + 2] - vz[iz][iy][ix - 1]))) / H;\n\n                    y12 = ((a1*(vy[iz + 1][iy][ix] - vy[iz][iy][ix]) +\n                        a2*(vy[iz + 2][iy][ix] - vy[iz - 1][iy][ix]))) / H;\n\n                    y13 = ((a1*(vz[iz][iy + 1][ix] - vz[iz][iy][ix]) +\n                        a2*(vz[iz][iy + 2][ix] - vz[iz][iy - 1][ix]))) / H;*/\n                    y5 = (vx[iz][iy][ix] - vx[iz][iy][ix - 1]) / H;\n                    y6 = (vy[iz][iy][ix] - vy[iz][iy - 1][ix]) / H;\n                    y7 = (vz[iz][iy][ix] - vz[iz - 1][iy][ix]) / H;\n                    y8 = (vx[iz][iy + 1][ix] - vx[iz][iy][ix]) / H;\n                    y9 = (vy[iz][iy][ix + 1] - vy[iz][iy][ix]) / H;\n                    y10 = (vx[iz + 1][iy][ix] - vx[iz][iy][ix]) / H;\n                    y11 = (vz[iz][iy][ix + 1] - vz[iz][iy][ix]) / H;\n                    y12 = (vy[iz + 1][iy][ix] - vy[iz][iy][ix]) / H;\n                    y13 = (vz[iz][iy + 1][ix] - vz[iz][iy][ix]) / H;\n                    //x = ix*H; y = iy*H; z = iz*H;\n                    /*if (((x >= 0 && x < xoleft) && (y >= 0 && y<NY_ext*H) && (z >= 0 && z<NZ_ext*H))\n\n                        || ((x >= xoright && x < NX_ext*H) && (y >= 0 && y<NY_ext*H) && (z >= 0 && z<NZ_ext*H))\n\n                        || ((x >= 0 && x<NX_ext*H) && (y >= 0 && y < yoleft) && (z >= 0 && z<NZ_ext*H))\n\n                        || ((x >= 0 && x<NX_ext*H) && (y >= yoright && y < NY_ext*H) && (z >= 0 && z<NZ_ext*H))\n\n\n                        || ((x >= 0 && x<NX_ext*H) && (y >= 0 && y<NY_ext*H) && (z >= 0 && z < zoleft))\n\n                        || ((x >= 0 && x<NX_ext*H) && (y >= 0 && y<NY_ext*H) && (z >= zoright && z < NZ_ext*H)))*/\n                                             if((ix<NP||ix>=(NX_ext-1-NP))||(iy<NP||iy>=(NY_ext-1-NP))||(iz<NP||iz>=(NZ_ext-1-NP)))\n                    {\n                        xFHalfTemp1 = exp(-(dxi2[iz][iy][ix])*DT); xFIntTemp1 = exp(-(dxi[iz][iy][ix])*DT);\n                        yFHalfTemp1 = exp(-(dyj2[iz][iy][ix])*DT); yFIntTemp1 = exp(-(dyj[iz][iy][ix])*DT);\n                        zFHalfTemp1 = exp(-(dzk2[iz][iy][ix])*DT); zFIntTemp1 = exp(-(dzk[iz][iy][ix])*DT);\n                        xFHalfTemp2 = -DT*dxi2[iz][iy][ix] * 0.5; xFIntTemp2 = -DT*dxi[iz][iy][ix] * 0.5;\n                        yFHalfTemp2 = -DT*dyj2[iz][iy][ix] * 0.5; yFIntTemp2 = -DT*dyj[iz][iy][ix] * 0.5;\n                        zFHalfTemp2 = -DT*dzk2[iz][iy][ix] * 0.5; zFIntTemp2 = -DT*dzk[iz][iy][ix] * 0.5;\n                        pmlxVx[iz][iy][ix] = xFIntTemp1*pmlxVx[iz][iy][ix] + xFIntTemp2*(xFIntTemp1*DxVxPre[iz][iy][ix] + y5);\n                        pmlyVy[iz][iy][ix] = yFIntTemp1*pmlyVy[iz][iy][ix] + yFIntTemp2*(yFIntTemp1*DyVyPre[iz][iy][ix] + y6);\n                        pmlzVz[iz][iy][ix] = zFIntTemp1*pmlzVz[iz][iy][ix] + zFIntTemp2*(zFIntTemp1*DzVzPre[iz][iy][ix] + y7);\n                        DxVxPre[iz][iy][ix] = y5; DyVyPre[iz][iy][ix] = y6; DzVzPre[iz][iy][ix] = y7;\n                        y5 = y5 + pmlxVx[iz][iy][ix];\n                        y6 = y6 + pmlyVy[iz][iy][ix];\n                        y7 = y7 + pmlzVz[iz][iy][ix];\n\n                        pmlzVx[iz][iy][ix] = zFHalfTemp1*pmlzVx[iz][iy][ix] + zFHalfTemp2*(zFHalfTemp1*DzVxPre[iz][iy][ix] + y10);\n                        pmlxVz[iz][iy][ix] = xFHalfTemp1*pmlxVz[iz][iy][ix] + xFHalfTemp2*(xFHalfTemp1*DxVzPre[iz][iy][ix] + y11);\n                        DzVxPre[iz][iy][ix] = y10; DxVzPre[iz][iy][ix] = y11;\n                        y10 = y10 + pmlzVx[iz][iy][ix];\n                        y11 = y11 + pmlxVz[iz][iy][ix];\n\n                        pmlyVx[iz][iy][ix] = yFHalfTemp1*pmlyVx[iz][iy][ix] + yFHalfTemp2*(yFHalfTemp1*DyVxPre[iz][iy][ix] + y8);\n                        pmlxVy[iz][iy][ix] = xFHalfTemp1*pmlxVy[iz][iy][ix] + xFHalfTemp2*(xFHalfTemp1*DxVyPre[iz][iy][ix] + y9);\n                        DyVxPre[iz][iy][ix] = y8; DxVyPre[iz][iy][ix] = y9;\n                        y8 = y8 + pmlyVx[iz][iy][ix];\n                        y9 = y9 + pmlxVy[iz][iy][ix];\n\n                        pmlzVy[iz][iy][ix] = zFHalfTemp1*pmlzVy[iz][iy][ix] + zFHalfTemp2*(zFHalfTemp1*DzVyPre[iz][iy][ix] + y12);\n                        pmlyVz[iz][iy][ix] = yFHalfTemp1*pmlyVz[iz][iy][ix] + yFHalfTemp2*(yFHalfTemp1*DyVzPre[iz][iy][ix] + y13);\n                        DzVyPre[iz][iy][ix] = y12; DyVzPre[iz][iy][ix] = y13;\n                        y12 = y12 + pmlzVy[iz][iy][ix];\n                        y13 = y13 + pmlyVz[iz][iy][ix];\n                    }\n\n                    txx[iz][iy][ix] = txx[iz][iy][ix] + (lamda2u_temp*DT)*y5 + (lamda_temp*DT)*y6 + (lamda_temp*DT)*y7 + source[iz][iy][ix];\n                    tyy[iz][iy][ix] = tyy[iz][iy][ix] + (lamda_temp*DT)*y5 + (lamda2u_temp*DT)*y6 + (lamda_temp*DT)*y7 + source[iz][iy][ix];\n                    tzz[iz][iy][ix] = tzz[iz][iy][ix] + (lamda_temp*DT)*y5 + (lamda_temp*DT)*y6 + (lamda2u_temp*DT)*y7 + source[iz][iy][ix];\n                    txz[iz][iy][ix] = txz[iz][iy][ix] + (muxz*DT)*(y10 + y11);\n                    txy[iz][iy][ix] = txy[iz][iy][ix] + (muxy*DT)*(y8 + y9);\n                    tyz[iz][iy][ix] = tyz[iz][iy][ix] + (muyz*DT)*(y12 + y13);\n\n                    //加震源—单极子\n                    if (i == 0)\n                    {\n                        tzz[sz][sy][sx] =(1 -2 * PI*PI*F0*F0*(tt - T0)*(tt - T0))*exp(-PI*PI*F0*F0*(tt - T0)*(tt - T0)); //对正应力加爆炸源\n                        tyy[sz][sy][sx] = (1-2 * PI*PI*F0*F0*(tt - T0)*(tt - T0))*exp(-PI*PI*F0*F0*(tt - T0)*(tt - T0));\n                        txx[sz][sy][sx] =(1 -2 * PI*PI*F0*F0*(tt - T0)*(tt - T0))*exp(-PI*PI*F0*F0*(tt - T0)*(tt - T0));\n                    }\n                    //加震源—偶极子 \n\n                    if (i == 1)\n                    {\n                        tzz[sz][sy][sx + 1] = tzz[sz][sy][sx + 1] - (1 - 2 * PI*PI*F0*F0*(tt - T0)*(tt - T0))*exp(-PI*PI*F0*F0*(tt - T0)*(tt - T0));; //对正应力加爆炸源\n                        tyy[sz][sy][sx + 1] = tyy[sz][sy][sx + 1] - (1 - 2 * PI*PI*F0*F0*(tt - T0)*(tt - T0))*exp(-PI*PI*F0*F0*(tt - T0)*(tt - T0));;\n                        txx[sz][sy][sx + 1] = txx[sz][sy][sx + 1] - (1 - 2 * PI*PI*F0*F0*(tt - T0)*(tt - T0))*exp(-PI*PI*F0*F0*(tt - T0)*(tt - T0));;\n                        tzz[sz][sy][sx - 1] = tzz[sz][sy][sx - 1] + (1 - 2 * PI*PI*F0*F0*(tt - T0)*(tt - T0))*exp(-PI*PI*F0*F0*(tt - T0)*(tt - T0));; //对正应力加爆炸源\n                        tyy[sz][sy][sx - 1] = tyy[sz][sy][sx - 1] + (1 - 2 * PI*PI*F0*F0*(tt - T0)*(tt - T0))*exp(-PI*PI*F0*F0*(tt - T0)*(tt - T0));;\n                        txx[sz][sy][sx - 1] = txx[sz][sy][sx - 1] + (1 - 2 * PI*PI*F0*F0*(tt - T0)*(tt - T0))*exp(-PI*PI*F0*F0*(tt - T0)*(tt - T0));;\n                    }\n\n                }\n\n       #pragma omp barrier\n       #pragma omp master\n                {\n\n\n                    //  tzz_z[sz][sx]=tzz_z[sz][sx]-2*PI*PI*F0*F0*(tt-T0)*exp(-PI*PI*F0*F0*(tt-T0)*(tt-T0));\n                    //sis_y[1][it] = tzz[sz][sy][sx];\n\n                    //记录地震记录\n                    if (i == 0)\n                    {\n                        for (iz = NP; iz < NP + NZ; iz++)\n                        {\n                            sis_z[iz - NP][it] = tzz[iz][sy][sx];\n\n                            sis_x[iz - NP][it] = txx[iz][sy][sx];\n                            //sis_z[iz-NP][it]=vz_x[iz][NX_ext-iz]+vz_z[iz][NX_ext-iz]; \n                            //  sis_x[iz-NP][it]=vx_x[iz][NX_ext-iz]+vx_z[iz][NX_ext-iz];\n                        }\n                    }\n                    if (i == 1)\n                    {\n                        for (iz = NP; iz < NP + NZ; iz++)\n                        {\n                            sis_z[iz - NP][it] = tzz[iz][sy][sx];\n\n                            sis_x[iz - NP][it] = txx[iz][sy][sx+1];\n                            //sis_z[iz-NP][it]=vz_x[iz][NX_ext-iz]+vz_z[iz][NX_ext-iz]; \n                            //  sis_x[iz-NP][it]=vx_x[iz][NX_ext-iz]+vx_z[iz][NX_ext-iz];\n                        }\n                    }\n                    if (it % 200 == 0)\n                    {\n                        int n = it / 200;\n                        for (iz = 2; iz < NZ_ext - 2; iz = iz + 2)\n                        {\n                            int a = iz / 2;\n                            for (ix = 2; ix < NX_ext - 2; ix = ix + 2)\n                            {\n                                int b = ix / 2;\n\n                                vxx[n][a][b] = txx[iz][sy][ix];\n                            }\n                        }\n                    }\n                }\n   #pragma omp barrier\n    }\n}\nfinish = clock();\nprintf(\"%f seconds\\n\", (double)(finish - start) / CLOCKS_PER_SEC);\n\n//输出波场快照\nchar vzname[] = \"vz.dat\";\nchar vxname[] = \"vx.dat\";\nchar vxxname[] = \"vxx.dat\";\nchar vyname[] = \"vy.dat\";\nchar txx_xname[] = \"txx_x.dat\";\nchar pmlxSxxname[] = \"pmlxSxx.dat\";\nchar DxSxxPrename[] = \"DxSxxPre.dat\";\n/*  for (iz=0; iz<NZ_ext; iz++)\n{\nfor (iy=0; iy<NY_ext; iy++)\nfor (ix=0; ix<NX_ext; ix++)\n{\nvx[iz][iy][ix]=vx_x[iz][iy][ix]+vx_y[iz][iy][ix]+vx_z[iz][iy][ix];\nvy[iz][iy][ix]=vy_x[iz][iy][ix]+vy_y[iz][iy][ix]+vy_z[iz][iy][ix];\nvz[iz][iy][ix]=vz_x[iz][iy][ix]+vz_y[iz][iy][ix]+vz_z[iz][iy][ix];\n\n}\n}*/\nprintf(\"NZ_ext = %d NY_ext = %d NX_ext = %d\\n\", NZ_ext, NY_ext, NX_ext);\nwfile3d(vxname, vx, NZ_ext, NY_ext, NX_ext);\nwfile4d(vxxname, vxx, NT/200, NZ_ext/2, NX_ext/2);\nwfile3d(vzname, vz, NZ_ext, NY_ext, NX_ext);\nwfile3d(vyname, vy, NZ_ext, NY_ext, NX_ext);\nwfile3d(pmlxSxxname, pmlxSxx, NZ_ext, NY_ext, NX_ext);\nwfile3d(DxSxxPrename, DxSxxPre, NZ_ext, NY_ext, NX_ext);\n//wfile(ssxname, ssx, NZ_ext, NX_ext);\n\n//输出地震记录\nchar sisxname[] = \"sisx.dat\";\nchar sisyname[] = \"sisy.dat\";\nchar siszname[] = \"sisz.dat\";\n\nprintf(\"NZ = %d  NT = %d\\n\", NZ, NT);\nwfile(sisxname, sis_x, NZ, NT);\nwfile(sisyname, sis_y, 1, NT);\nwfile(siszname, sis_z, NZ, NT);\n\n\nfree_space3d(tzz, NZ_ext, NY_ext);\n//  free_space3d(tzz_y,NZ_ext,NY_ext);\n//  free_space3d(tzz_z,NZ_ext,NY_ext);\nfree_space3d(tyy, NZ_ext, NY_ext);\n//  free_space3d(tyy_y,NZ_ext,NY_ext);\n//  free_space3d(tyy_z,NZ_ext,NY_ext);\nfree_space3d(txx, NZ_ext, NY_ext);\n//  free_space3d(txx_y,NZ_ext,NY_ext);\n//  free_space3d(txx_z,NZ_ext,NY_ext);\nfree_space3d(txy, NZ_ext, NY_ext);\n//  free_space3d(txy_y,NZ_ext,NY_ext);\nfree_space3d(txz, NZ_ext, NY_ext);\n//  free_space3d(txz_z,NZ_ext,NY_ext);\nfree_space3d(tyz, NZ_ext, NY_ext);\n//      free_space3d(tyz_z,NZ_ext,NY_ext);\n\nfree_space3d(vx, NZ_ext, NY_ext);\n//  free_space3d(vx_y,NZ_ext,NY_ext);\n//  free_space3d(vx_z,NZ_ext,NY_ext);\nfree_space3d(vy, NZ_ext, NY_ext);\n//  free_space3d(vy_y,NZ_ext,NY_ext);\n//  free_space3d(vy_z,NZ_ext,NY_ext);\nfree_space3d(vz, NZ_ext, NY_ext);\n//  free_space3d(vz_y,NZ_ext,NY_ext);\n//  free_space3d(vz_z,NZ_ext,NY_ext);\n\nfree_space3d(vs_ext, NZ_ext, NY_ext);\nfree_space3d(vp_ext, NZ_ext, NY_ext);\nfree_space3d(rho_ext, NZ_ext, NY_ext);\n\nfree_space3d(vs, NZ, NY);\nfree_space3d(vp, NZ, NY);\nfree_space3d(mu, NZ, NY);\nfree_space3d(mu_ext, NZ_ext, NY_ext);\nfree_space3d(lamda, NZ, NY);\nfree_space3d(lamda2u, NZ, NY);\nfree_space3d(lamda_ext, NZ_ext, NY_ext);\nfree_space3d(lamda2u_ext, NZ_ext, NY_ext);\nfree_space3d(rho, NZ, NY);\n\nfree_space3d(dxi, NZ_ext, NY_ext);\nfree_space3d(dxi2, NZ_ext, NY_ext);\nfree_space3d(dyj, NZ_ext, NY_ext);\nfree_space3d(dyj2, NZ_ext, NY_ext);\nfree_space3d(dzk, NZ_ext, NY_ext);\nfree_space3d(dzk2, NZ_ext, NY_ext);\nfree_space3d(pmlxSxx, NZ_ext, NY_ext);\nfree_space3d(pmlySxy, NZ_ext, NY_ext);\nfree_space3d(pmlzSxz, NZ_ext, NY_ext);\nfree_space3d(DxSxxPre, NZ_ext, NY_ext);\nfree_space3d(DySxyPre, NZ_ext, NY_ext);\nfree_space3d(DzSxzPre, NZ_ext, NY_ext);\nfree_space3d(pmlxSxy, NZ_ext, NY_ext);\nfree_space3d(pmlySyy, NZ_ext, NY_ext);\nfree_space3d(pmlzSyz, NZ_ext, NY_ext);\nfree_space3d(DxSxyPre, NZ_ext, NY_ext);\nfree_space3d(DySyyPre, NZ_ext, NY_ext);\nfree_space3d(DzSyzPre, NZ_ext, NY_ext);\nfree_space3d(pmlxSxz, NZ_ext, NY_ext);\nfree_space3d(pmlySyz, NZ_ext, NY_ext);\nfree_space3d(pmlzSzz, NZ_ext, NY_ext);\nfree_space3d(DxSxzPre, NZ_ext, NY_ext);\nfree_space3d(DySyzPre, NZ_ext, NY_ext);\nfree_space3d(DzSzzPre, NZ_ext, NY_ext);\nfree_space3d(pmlxVx, NZ_ext, NY_ext);\nfree_space3d(pmlyVy, NZ_ext, NY_ext);\nfree_space3d(pmlzVz, NZ_ext, NY_ext);\nfree_space3d(DxVxPre, NZ_ext, NY_ext);\nfree_space3d(DyVyPre, NZ_ext, NY_ext);\nfree_space3d(DzVzPre, NZ_ext, NY_ext);\nfree_space3d(pmlxVz, NZ_ext, NY_ext);\nfree_space3d(pmlzVx, NZ_ext, NY_ext);\nfree_space3d(DxVzPre, NZ_ext, NY_ext);\nfree_space3d(DzVxPre, NZ_ext, NY_ext);\nfree_space3d(pmlyVz, NZ_ext, NY_ext);\nfree_space3d(pmlzVy, NZ_ext, NY_ext);\nfree_space3d(DyVzPre, NZ_ext, NY_ext);\nfree_space3d(DzVyPre, NZ_ext, NY_ext);\nfree_space3d(pmlxVy, NZ_ext, NY_ext);\nfree_space3d(pmlyVx, NZ_ext, NY_ext);\nfree_space3d(DxVyPre, NZ_ext, NY_ext);\nfree_space3d(DyVxPre, NZ_ext, NY_ext);\nfree_space3d(source, NZ_ext, NY_ext);\nfree_space3d(vxx, NT/200, NZ_ext/2);\nfree_space2d(sis_x, NZ);\nfree_space2d(sis_z, NZ);\nfree_space2d(sis_y, NZ);\nprintf(\"\\\\Press any key to exit program...\");\n//getch();\nreturn 0;\n", "\n\n", "}", "\n\n", "//申请二维动态数组", "\nfloat **space2d(int nr, int nc)", "\n{", "\n\n", "float **a;\nint i;\na = (float **)calloc(nr, sizeof(float *));\nfor (i = 0; i<nr; i++)\n{\n    a[i] = (float *)calloc(nc, sizeof(float));\n}\n\n\nreturn a;\n", "\n\n", "}", "\n//申请三维动态数组", "\n/*float ", "**space3d(int nr,int ny,int nc)", "\n{", "\nfloat *", "*a;", "\nint i,j;", "\na=(float ***)calloc(nr,sizeof(float **));", "\nfor(i=0;i<nr;i++)", "\n{", "\na[i]=(float **)calloc(ny,sizeof(float ", "));", "\n}", "\nfor(i=0;i<nr;i++)", "\n{", "\nfor(j=0;j<ny;j++)", "\n{", "\na[i][j]=(float *)calloc(nc,sizeof(float));//sizeof(float) nc改为sizeof(float)*nc", "\n}}", "\nreturn a;", "\n}", "/", "\n/*float ***space3d(int nr,int ny,int nc)", "\n\n", "{", "\nfloat ***a;", "\n\n", "a = new float **[nr];", "\n\n", "for(int i=0;i<nr;i++)", "\n{", "\na[i] = new float *[ny];", "\n\n", "for(int j=0;j<ny;j++)", "\n{", "\na[i][j]=new float [nc];", "\n}}", "\nreturn a;", "\n}*/", "\n\n", "float ", "**space3d(int nr, int ny, int nc)", "\n{", "\n    float *", "*a;", "\n    int i, j, k;", "\n    a = (float ***)malloc(sizeof(float **)*nr);", "\n    for (i = 0; i<nr; i++)", "\n    {", "\n\n", "    a[i] = (float **)malloc(sizeof(float *)*ny);\n}\nfor (i = 0; i<nr; i++)\n{\n    for (j = 0; j<ny; j++)\n    {\n        a[i][j] = (float *)malloc(sizeof(float)*nc);//sizeof(float) nc改为sizeof(float)*nc\n    }\n}\nfor (i = 0; i<nr; i++)\n    for (j = 0; j<ny; j++)\n        for (k = 0; k<nc; k++)\n        {\n            a[i][j][k] = 0.0f;\n        }\n\nreturn a;\n", "\n\n", "}", "\n//释放二维动态数组", "\nvoid free_space2d(float **a, int nr)", "\n{", "\n    int i;", "\n    for (i = 0; i<nr; i++)", "\n        free(a[i]);", "\n    free(a);", "\n}", "\n//释放三维动态数组", "\n/*void free_space3d(float ", "**a,int nr,int ny)", "\n{", "\nfor(int i=0;i<nr;i++)", "\n{", "\nfor(int j=0;j<ny;j++)", "\n{", "\ndelete [] a[i][j];", "\n}", "\ndelete [] a[i];", "\n}", "\ndelete [] a;", "\na=NULL;", "\n}", "\n*/", "\nvoid free_space3d(float *", "*a, int nr, int ny)", "\n{", "\n    int i, j;", "\n    for (i = 0; i<nr; i++)", "\n    {", "\n        for (j = 0; j<ny; j++)", "\n        {", "\n            free(a[i][j]);", "\n        }", "\n    }", "\n    for (i = 0; i<nr; i++)", "\n    {", "\n        free(a[i]);", "\n    }", "\n    free(a);", "\n}", "\n\n", "//将二进制数据写入文件—二维", "\n\n", "void wfile(char filename[], float **data, int nr, int nc)", "\n{", "\n    int i, j;", "\n    FILE ", "fp = fopen(filename, \"wt\");", "\n    /", "\n    for(int i=0;i<nr;i++)", "\n    {", "\n    fwrite(data[i],sizeof(float),nc,fp);", "\n    }", "\n    */", "\n\n", "for (i = 0; i<nr; i++)\n{\n    for (j = 0; j<nc; j++)\n    {\n        fprintf(fp, \"%e \", data[i][j]);\n        if ((j + 1) % nc == 0)\n            fprintf(fp, \"\\n\");\n    }\n    fprintf(fp, \"\\n\");\n}\n//          fwrite(&data[i][j],1,sizeof(float),fp);\nfclose(fp);\n", "\n\n", "}", "\n\n", "//将二进制数据写入文件—三维", "\n\n", "void wfile3d(char filename[], float ***data, int nr, int ny, int nc)", "\n{", "\n    int i, j, k;", "\n    FILE ", "fp = fopen(filename, \"wt\");", "\n    /", "\n    for(int i=0;i<nr;i++)", "\n    {", "\n    fwrite(data[i],sizeof(float),nc,fp);", "\n    }", "\n    */", "\n\n", "{\n    for (i = 0; i<nr; i++)\n    {\n        for (k = 0; k<nc; k++)\n        {\n            j =70;\n            fprintf(fp, \"%e \", data[i][j][k]);\n            if ((k + 1) % nc == 0)\n                fprintf(fp, \"\\n\");\n        }\n        fprintf(fp, \"\\n\");\n    }\n}\n//          fwrite(&data[i][j],1,sizeof(float),fp);\nfclose(fp);\n", "\n\n", "}", "\nvoid wfile4d(char filename[], float ***data, int nr, int ny, int nc)", "\n{", "\n    int i, j, k;", "\n    FILE ", "fp = fopen(filename, \"wt\");", "\n    /", "\n    for(int i=0;i<nr;i++)", "\n    {", "\n    fwrite(data[i],sizeof(float),nc,fp);", "\n    }", "\n    */", "\n\n", "{\n    for (i = 0; i < nr; i ++)\n    {\n        for (j = 0; j < ny; j++)\n        {\n            for (k = 0; k < nc; k++)\n            {\n\n                fprintf(fp, \"%e \", data[i][j][k]);\n                if ((k + 1) % nc == 0)\n                    fprintf(fp, \"\\n\");\n            }\n        }\n        fprintf(fp, \"\\n\");\n\n    }\n}\n//          fwrite(&data[i][j],1,sizeof(float),fp);\nfclose(fp);\n", "\n\n", "}", "\n//建立地质模型", "\nvoid create_model(float ", "**vp, float *", "*vs, float ", "**rho, float *", "*vf, float ", "**rhof, float *", "*lamda, float ", "**lamda2u, float *", "*mu, float ***por, int nr, int ny, int nc)", "\n{", "\n    //这里进行修改，最好是可视化设计或从文件读入", "\n    int ix, iy, iz;", "\n    //  double por1,Ks1,Kb1,Kf1,a1,D1,tao,rou11,rou12,rou22,eta;", "\n    //  eta=58.0;", "\n    for (iz = 0; iz < nr; iz++)", "\n    {", "\n        for (iy = 0; iy < ny; iy++)", "\n        {", "\n            for (ix = 0; ix < nc; ix++)", "\n            {", "\n\n", "            if (((ix - nc / 2)*(ix - nc / 2) + (iy - ny / 2)*(iy - ny / 2)) <= 100)//竖直井孔%%%%%%\\\n", "\n\n", "//      if(iz<(nr-14-ix)||iz>=(nr+14-ix))//45度倾斜井孔", "\n//if (iz>= 50)", "\n                //if(ix>=50)", "\n                {", "\n                    vp[iz][iy][ix] = 1500.0f;", "\n                    vs[iz][iy][ix] = 0.0f;", "\n                    vf[iz][iy][ix] = 1500.0f;", "\n                    rho[iz][iy][ix] = 1000.0f;", "\n                    rhof[iz][iy][ix] = 1000.0f;", "\n                    por[iz][iy][ix] = 1.0f;", "\n                    //  b[iz][ix]=0.0;", "\n\n", "                mu[iz][iy][ix] = rho[iz][iy][ix] * vs[iz][iy][ix] * vs[iz][iy][ix];\n                lamda2u[iz][iy][ix] = rho[iz][iy][ix] * vp[iz][iy][ix] * vp[iz][iy][ix];\n                lamda[iz][iy][ix] = lamda2u[iz][iy][ix] - 2 * mu[iz][iy][ix];\n                /*  Kb1=rho[iz][ix]*(1-por[iz][ix])*(vp[iz][ix]*vp[iz][ix]-vs[iz][ix]*vs[iz][ix]*4.0/3.0);//骨架压缩模量，声波测井原理与应用，P39\n                Ks1=rho[iz][ix]*(vp[iz][ix]*vp[iz][ix]-vs[iz][ix]*vs[iz][ix]*4.0/3.0);//岩石固态颗粒的体积模量\n                Kf1=rhof[iz][ix]*vf[iz][ix]*vf[iz][ix];//孔隙流体的体积压缩模量\n                a1=1-Kb1/Ks1;\n                D1=a1-por[iz][ix]+por[iz][ix]*Ks1/Kf1;\n                Q[iz][ix]=(a1-por[iz][ix])*por[iz][ix]*Ks1/D1;\n                R[iz][ix]=por[iz][ix]*por[iz][ix]*Ks1/D1;\n\n                tao=0.5*(1+1/por[iz][ix]);//孔隙弯曲度\n                rou11=(1-por[iz][ix])*rho[iz][ix]-(1-tao)*por[iz][ix]*rhof[iz][ix];\n                rou12=(1-tao)*por[iz][ix]*rhof[iz][ix];\n                rou22=tao*por[iz][ix]*rhof[iz][ix];\n\n                D11[iz][ix]=rou11/(rou11*rou22-rou12*rou12);\n                D12[iz][ix]=rou12/(rou11*rou22-rou12*rou12);\n                D22[iz][ix]=rou22/(rou11*rou22-rou12*rou12);*/\n            }\n            else\n            {\n\n                vp[iz][iy][ix] = 4000.0f;   //纵波\n                vs[iz][iy][ix] = 2340.0f;   //横波\n                rho[iz][iy][ix] = 2500.0f; //密度\n                vf[iz][iy][ix] = 1500.0f;\n                rhof[iz][iy][ix] = 1000.0f;\n                por[iz][iy][ix] = 0.2f;\n                //b[iz][ix]=0.2*pow(10,-3);// b=eta*por*por/perm*pow(10,-3);\n\n                mu[iz][iy][ix] = rho[iz][iy][ix] * vs[iz][iy][ix] * vs[iz][iy][ix];\n                lamda2u[iz][iy][ix] = rho[iz][iy][ix] * vp[iz][iy][ix] * vp[iz][iy][ix];\n                lamda[iz][iy][ix] = lamda2u[iz][iy][ix] - 2.0*mu[iz][iy][ix];\n\n            }\n\n        }\n    }\n\n}\n", "\n\n", "}", "\n\n", "/*", "\n//将模型扩边,用于PML", "\n//具体的操作过程是将实际模型参数放置在扩边后的数据中央，四周的数据用", "\n//最外缘的数据填充", "\nfloat **extmodel(float **inqit_model,int nz,int nx,int np)", "\n{", "\nfloat **p;", "\nint i,j;", "\nint nx2=nx+2*np;", "\nint nz2=nz+2*np;", "\n\n", "p=space2d(nz2,nx2);", "\nfor (i=np; i<nz+np; i++)", "\nfor (j=0; j<np; j++)", "\np[i][j]=init_model[i-np][0];", "\nfor (i=np; i<nz+np; i++)", "\nfor (j=nx+np; j<nx2; j++)", "\np[i][j]=init_model[i-np][nx-1];", "\nfor (i=nz; i<nz2; i++)", "\nfor (j=np; j<np+nx; j++)", "\np[i][j]=init_model[nz-1][j-np];", "\nfor(i=0; i<np; i++)", "\nfor(j=np; j<np+nx; j++)", "\np[i][j]=init_model[0][j-np];", "\nfor(i=0; i<np; i++)", "\nfor(j=0; j<np; j++)", "\np[i][j]=init_model[0][0];", "\nfor(i=0; i<np; i++)", "\nfor(j=nx+np; j<nx2; j++)", "\np[i][j]=init_model[0][nx-1];", "\nfor (i=nz+np; i<nz2; i++)", "\nfor (j=0; j<np; j++)", "\np[i][j]=init_model[nz-1][0];", "\nfor (i=nz+np; i<nz2; i++)", "\nfor (j=nx+np; j<nx2; j++)", "\np[i][j]=init_model[nz-1][nx-1];", "\nfor (i=np; i<nz+np; i++)", "\nfor (j=np; j<nx+np; j++)", "\np[i][j]=init_model[i-np][j-np];", "\n\n", "return p;", "\n}*/", "\n\n", "//将模型扩边,用于PML", "\n//具体的操作过程是将实际模型参数放置在扩边后的数据中央，四周的数据用", "\n//最外缘的数据填充_3D", "\nfloat ", "**extmodel(float *", "*init_model, int nz, int ny, int nx, int np)", "\n{", "\n    float ***p;", "\n    int i, j, k;", "\n    int nx2 = nx + 2 * np;", "\n    int ny2 = ny + 2 * np;", "\n    int nz2 = nz + 2 * np;", "\n\n", "p = space3d(nz2, ny2, nx2);\n\n\nfor (i = 0; i<np; i++)\n    for (k = 0; k<np; k++)\n        for (j = 0; j<np; j++)\n            p[i][k][j] = init_model[0][0][0];\nfor (i = 0; i<np; i++)\n    for (k = np; k<np + ny; k++)\n        for (j = 0; j<np; j++)\n            p[i][k][j] = init_model[0][k - np][0];\nfor (i = 0; i<np; i++)\n    for (k = np + ny; k<ny2; k++)\n        for (j = 0; j<np; j++)\n            p[i][k][j] = init_model[0][ny - 1][0];\n\nfor (i = np; i<nz + np; i++)\n    for (k = 0; k<np; k++)\n        for (j = 0; j<np; j++)\n            p[i][k][j] = init_model[i - np][0][0];\nfor (i = np; i<nz + np; i++)\n    for (k = np; k<np + ny; k++)\n        for (j = 0; j<np; j++)\n            p[i][k][j] = init_model[i - np][k - np][0];\nfor (i = np; i<nz + np; i++)\n    for (k = ny + np; k<ny2; k++)\n        for (j = 0; j<np; j++)\n            p[i][k][j] = init_model[i - np][ny - 1][0];\n\nfor (i = nz + np; i<nz2; i++)\n    for (k = 0; k<np; k++)\n        for (j = 0; j<np; j++)\n            p[i][k][j] = init_model[nz - 1][0][0];\nfor (i = nz + np; i<nz2; i++)\n    for (k = np; k<np + ny; k++)\n        for (j = 0; j<np; j++)\n            p[i][k][j] = init_model[nz - 1][k - np][0];\nfor (i = nz + np; i<nz2; i++)\n    for (k = ny + np; k<ny2; k++)\n        for (j = 0; j<np; j++)\n            p[i][k][j] = init_model[nz - 1][ny - 1][0];\n\n\n\nfor (i = 0; i<np; i++)\n    for (k = 0; k<np; k++)\n        for (j = np; j<np + nx; j++)\n            p[i][k][j] = init_model[0][0][j - np];\nfor (i = 0; i<np; i++)\n    for (k = np; k<np + ny; k++)\n        for (j = np; j<np + nx; j++)\n            p[i][k][j] = init_model[0][k - np][j - np];\nfor (i = 0; i<np; i++)\n    for (k = ny + np; k<ny2; k++)\n        for (j = np; j<np + nx; j++)\n            p[i][k][j] = init_model[0][ny - 1][j - np];\n\nfor (i = np; i<nz + np; i++)\n    for (k = 0; k<np; k++)\n        for (j = np; j<np + nx; j++)\n            p[i][k][j] = init_model[i - np][0][j - np];\nfor (i = np; i<nz + np; i++)\n    for (k = np; k<np + ny; k++)\n        for (j = np; j<np + nx; j++)\n            p[i][k][j] = init_model[i - np][k - np][j - np];\nfor (i = np; i<nz + np; i++)\n    for (k = ny + np; k<ny2; k++)\n        for (j = np; j<np + nx; j++)\n            p[i][k][j] = init_model[i - np][ny - 1][j - np];\n\nfor (i = nz + np; i<nz2; i++)\n    for (k = 0; k<np; k++)\n        for (j = np; j<np + nx; j++)\n            p[i][k][j] = init_model[nz - 1][0][j - np];\nfor (i = nz + np; i<nz2; i++)\n    for (k = np; k<np + ny; k++)\n        for (j = np; j<np + nx; j++)\n            p[i][k][j] = init_model[nz - 1][k - np][j - np];\nfor (i = nz + np; i<nz2; i++)\n    for (k = ny + np; k<ny2; k++)\n        for (j = np; j<np + nx; j++)\n            p[i][k][j] = init_model[nz - 1][ny - 1][j - np];\n\n\nfor (i = 0; i<np; i++)\n    for (k = 0; k<np; k++)\n        for (j = np + nx; j<nx2; j++)\n            p[i][k][j] = init_model[0][0][nx - 1];\nfor (i = 0; i<np; i++)\n    for (k = np; k<np + ny; k++)\n        for (j = np + nx; j<nx2; j++)\n            p[i][k][j] = init_model[0][k - np][nx - 1];\nfor (i = 0; i<np; i++)\n    for (k = ny + np; k<ny2; k++)\n        for (j = np + nx; j<nx2; j++)\n            p[i][k][j] = init_model[0][ny - 1][nx - 1];\n\nfor (i = np; i<nz + np; i++)\n    for (k = 0; k<np; k++)\n        for (j = np + nx; j<nx2; j++)\n            p[i][k][j] = init_model[i - np][0][nx - 1];\nfor (i = np; i<nz + np; i++)\n    for (k = np; k<np + ny; k++)\n        for (j = np + nx; j<nx2; j++)\n            p[i][k][j] = init_model[i - np][k - np][nx - 1];\nfor (i = np; i<nz + np; i++)\n    for (k = ny + np; k<ny2; k++)\n        for (j = np + nx; j<nx2; j++)\n            p[i][k][j] = init_model[i - np][ny - 1][nx - 1];\n\nfor (i = nz + np; i<nz2; i++)\n    for (k = 0; k<np; k++)\n        for (j = np + nx; j<nx2; j++)\n            p[i][k][j] = init_model[nz - 1][0][nx - 1];\nfor (i = nz + np; i<nz2; i++)\n    for (k = np; k<np + ny; k++)\n        for (j = np + nx; j<nx2; j++)\n            p[i][k][j] = init_model[nz - 1][k - np][nx - 1];\nfor (i = nz + np; i<nz2; i++)\n    for (k = ny + np; k<ny2; k++)\n        for (j = np + nx; j<nx2; j++)\n            p[i][k][j] = init_model[nz - 1][ny - 1][nx - 1];\n\n\nreturn p;\n", "\n\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;ol start=\"10\"&gt;&lt;li&gt;你注意看 10后面有个点&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python spyder 画手绘风出现 invalid syntax 问题", ["python spyder 画手绘风出现 invalid syntax 问题", "\n", "from PIL import Image", "import numpy as np", "\n", "a = np.asarray(Image.open(\"D:/data/ipython/LiuYifei.jpg\").convert('L').astype('float')", "\n", "depth = 10.#虚拟深度值", "grad = np.gradient(a)#去图像灰度的梯度值", "grad_x, grad_y = grad #分别取横纵图像的梯度值", "grad_x = grad_x", "depth/100.", "grad_y = grad_y", "depth/100.", "A = np.sqrt(grad_x", "2 + grad_y", "2 + 1.)", "uni_x = grad_x/A", "uni_y = grad_y/A", "uni_z = 1./A", "\n", "vec_el = np.pi/2.2 #光源的俯视角度，弧度值", "vec_az = np.pi/4. #光源的方位角度，弧度值", "dx = np.cos(vec_el)*np.cos(vec_az) #光源对X 轴我的影响", "dy = np.cos(vec_el)*np.sin(vec_az) #光源对Y 轴的影响", "dz = np.sin(vec_el) #光源对z 轴的影响", "\n", "b = 255*(dx", "uni_x + dy", "uni_y + dz*uni_z) #光源归一化", "b = b.clip(0,255) ", "\n", "im = Image.fromarray(b.astype('uint8')) #重构图像", "im.save(\"D:\\data\\ipython\\lyfHD.jpg\")", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你都没有输出打印&amp;#xff0c;怎么会有值显现嘛&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pycharm的问题", ["import numpy as np", "def AND(x1,x2):", "    x=np.array([x1,x2])", "    w=np.array([0.5,0.5])", "    b=-0.7", "    tmp=np.sum(w*x)+b", "    if tmp<=0:", "        return 0", "    else:", "        return 1", "AND(1,1)", "\n", "\n", "为什么点了运行没有显示结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;出错在第62行&amp;#xff0c;重点检查flash_lat,flash_lon数组的值&amp;#xff0c;是不是符合函数参数要求&amp;#xff0c;在concatenate时&amp;#xff0c;如果横向合并的话要加参数axis&amp;#61;1,另外再检查hexbin函数参数使用是否有问题。&lt;br /&gt;&lt;a href=\"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hexbin.html\" id=\"textarea_1630398906716_1630399764542_0\" class=\"md_link_card\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n  &lt;span class=\"md_link_title\"&gt;matplotlib.pyplot.hexbin — Matplotlib 3.4.3 documentation&lt;/span&gt;\n  &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n  &lt;span class=\"md_flex_card\"&gt;\n  &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n    &lt;span class=\"flex-1\"&gt;\n      &lt;span class=\"md_link_url\"&gt;https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hexbin.html&lt;/span&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中出现“ ValueError: zero-size array to reduction operation maximum which has no identity”错误", ["以下是我编写的程序，最终想要绘出闪电的图", "\n", "尝试运行后报错", "\n", "请问这个问题应该怎么解决呢？以及我编写的程序中是不是还有其他错误啊？谢谢啦"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;【简单叙述】你装的是python3.9&amp;#xff0c;我也是原来装的python3.9&amp;#xff0c;在import pandas时&amp;#xff0c;就没有用&amp;#xff0c;都出现你这个问题。&lt;/p&gt;\n&lt;p&gt;【解决办法】卸载python3.9&amp;#xff0c;装回python3.7&amp;#xff0c;就不再出现这个问题。希望能帮到你!&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&lt;span class=\"hljs-built_in\"&gt;Traceback&lt;/span&gt; (most recent call last):\n  &lt;span class=\"hljs-built_in\"&gt;File&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;E:\\pythonlearn\\learn\\learn.py&amp;#34;&lt;/span&gt;, line &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, in &amp;lt;&lt;span class=\"hljs-keyword\"&gt;module&lt;/span&gt;&amp;gt;\n    &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas as pd\n  &lt;span class=\"hljs-built_in\"&gt;File&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;D:\\python3.9.0a4(64-bit)\\lib\\site-packages\\pandas\\__init__.py&amp;#34;&lt;/span&gt;, line &lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;, in &amp;lt;&lt;span class=\"hljs-keyword\"&gt;module&lt;/span&gt;&amp;gt;\n    &lt;span class=\"hljs-function\"&gt;raise &lt;span class=\"hljs-title\"&gt;ImportError&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(\nImportError: Unable to &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; required dependencies:\nnumpy: DLL load failed &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; importing mtrand: 找不到指定的程序。&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pandas\\__init__.py报错", ["这是我想爬某乎的程序", "\n\n", " ", "\n\n", "\n", "import requests\nimport json\nimport time\nimport re\nimport datetime\nimport pandas as pd\n\n\ndef get_data(url):\n    '''\n    功能：访问 url 的网页，获取网页内容并返回\n    参数：\n        url ：目标网页的 url\n    返回：目标网页的 html 内容\n    '''\n    headers = {\n        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36',\n    }\n\n    try:\n        r = requests.get(url, headers=headers)\n        r.raise_for_status()\n        return r.text\n\n    except requests.HTTPError as e:\n        print(e)\n        print(\"HTTPError\")\n    except requests.RequestException as e:\n        print(e)\n    except:\n        print(\"Unknown Error !\")\n\n\ndef parse_data(html):\n    '''\n    功能：提取 html 页面信息中的关键信息，并整合一个数组并返回\n    参数：html 根据 url 获取到的网页内容\n    返回：存储有 html 中提取出的关键信息的数组\n    '''\n    json_data = json.loads(html)['data']\n    comments = []\n\n    try:\n        for item in json_data:\n            comment = []\n            comment.append(item['author']['name'])  # 姓名\n            comment.append(item['author']['gender'])  # 性别\n            # comment.append(item['author']['url'])     # 个人主页\n            comment.append(item['voteup_count'])  # 点赞数\n            comment.append(item['comment_count'])  # 评论数\n            # comment.append(item['url'])               # 回答链接\n            comments.append(comment)\n\n        return comments\n\n    except Exception as e:\n        print(comment)\n        print(e)\n\n\ndef save_data(comments):\n    '''\n    功能：将comments中的信息输出到文件中/或数据库中。\n    参数：comments 将要保存的数据\n    '''\n    filename = 'Data/comments.csv'\n\n    dataframe = pd.DataFrame(comments)\n\n    dataframe.to_csv(filename, mode='a', index=False, sep=',', header=False)\n    # dataframe.to_csv(filename, mode='a', index=False, sep=',', header=['name','gender','user_url','voteup','cmt_count','url'])\n\n\ndef main():\n    url = 'https://www.zhihu.com/api/v4/questions/440710739/answers?include=data%5B%2A%5D.is_normal%2Cadmin_closed_comment%2Creward_info%2Cis_collapsed%2Cannotation_action%2Cannotation_detail%2Ccollapse_reason%2Cis_sticky%2Ccollapsed_by%2Csuggest_edit%2Ccomment_count%2Ccan_comment%2Ccontent%2Ceditable_content%2Cattachment%2Cvoteup_count%2Creshipment_settings%2Ccomment_permission%2Ccreated_time%2Cupdated_time%2Creview_info%2Crelevant_info%2Cquestion%2Cexcerpt%2Cis_labeled%2Cpaid_info%2Cpaid_info_content%2Crelationship.is_authorized%2Cis_author%2Cvoting%2Cis_thanked%2Cis_nothelp%2Cis_recognized%3Bdata%5B%2A%5D.mark_infos%5B%2A%5D.url%3Bdata%5B%2A%5D.author.follower_count%2Cbadge%5B%2A%5D.topics%3Bdata%5B%2A%5D.settings.table_of_content.enabled&limit=3&offset=3&platform=desktop&sort_by=default'\n\n    # get total cmts number\n    html = get_data(url)\n    totals = json.loads(html)['paging']['totals']\n\n    print(totals)\n    print('---' * 10)\n\n    page = 0\n\n    while (page < totals):\n        url = 'https://www.zhihu.com/api/v4/questions/440710739/answers?include=data%5B%2A%5D.is_normal%2Cadmin_closed_comment%2Creward_info%2Cis_collapsed%2Cannotation_action%2Cannotation_detail%2Ccollapse_reason%2Cis_sticky%2Ccollapsed_by%2Csuggest_edit%2Ccomment_count%2Ccan_comment%2Ccontent%2Ceditable_content%2Cattachment%2Cvoteup_count%2Creshipment_settings%2Ccomment_permission%2Ccreated_time%2Cupdated_time%2Creview_info%2Crelevant_info%2Cquestion%2Cexcerpt%2Cis_labeled%2Cpaid_info%2Cpaid_info_content%2Crelationship.is_authorized%2Cis_author%2Cvoting%2Cis_thanked%2Cis_nothelp%2Cis_recognized%3Bdata%5B%2A%5D.mark_infos%5B%2A%5D.url%3Bdata%5B%2A%5D.author.follower_count%2Cbadge%5B%2A%5D.topics%3Bdata%5B%2A%5D.settings.table_of_content.enabled&limit=3&offset=' + str(\n            page) + '&platform=desktop&sort_by=default'\n\n        html = get_data(url)\n        comments = parse_data(html)\n        save_data(comments)\n\n        print(page)\n        page += 3\n\n\nif __name__ == '__main__':\n    main()\n    print(\"完成！！\")\n\n", "\n\n", "#以下是我的报错", "\n\n", "\nTraceback (most recent call last):", "\n  File \"E:\\pythonlearn\\learn\\learn.py\", line 6, in <module>", "\n    import pandas as pd", "\n  File \"D:\\python3.9.0a4(64-bit)\\lib\\site-packages\\pandas\\__init__.py\", line 16, in <module>", "\n    raise ImportError(", "\nImportError: Unable to import required dependencies:", "\nnumpy: DLL load failed while importing mtrand: 找不到指定的程序。", "\n\n", " ", "\n\n", "下面是__init__py", "\n\n", "\n", "# flake8: noqa\n\n__docformat__ = \"restructuredtext\"\n\n# Let users know if they're missing any of our hard dependencies\nhard_dependencies = (\"numpy\", \"pytz\", \"dateutil\")\nmissing_dependencies = []\n\nfor dependency in hard_dependencies:\n    try:\n        __import__(dependency)\n    except ImportError as e:\n        missing_dependencies.append(f\"{dependency}: {e}\")\n\nif missing_dependencies:\n    raise ImportError(\n        \"Unable to import required dependencies:\\n\" + \"\\n\".join(missing_dependencies)\n    )\ndel hard_dependencies, dependency, missing_dependencies\n\n# numpy compat\nfrom pandas.compat.numpy import (\n    np_version_under1p17 as _np_version_under1p17,\n    np_version_under1p18 as _np_version_under1p18,\n    is_numpy_dev as _is_numpy_dev,\n)\n\ntry:\n    from pandas._libs import hashtable as _hashtable, lib as _lib, tslib as _tslib\nexcept ImportError as e:  # pragma: no cover\n    # hack but overkill to use re\n    module = str(e).replace(\"cannot import name \", \"\")\n    raise ImportError(\n        f\"C extension: {module} not built. If you want to import \"\n        \"pandas from the source directory, you may need to run \"\n        \"'python setup.py build_ext --force' to build the C extensions first.\"\n    ) from e\n\nfrom pandas._config import (\n    get_option,\n    set_option,\n    reset_option,\n    describe_option,\n    option_context,\n    options,\n)\n\n# let init-time option registration happen\nimport pandas.core.config_init\n\nfrom pandas.core.api import (\n    # dtype\n    Int8Dtype,\n    Int16Dtype,\n    Int32Dtype,\n    Int64Dtype,\n    UInt8Dtype,\n    UInt16Dtype,\n    UInt32Dtype,\n    UInt64Dtype,\n    Float32Dtype,\n    Float64Dtype,\n    CategoricalDtype,\n    PeriodDtype,\n    IntervalDtype,\n    DatetimeTZDtype,\n    StringDtype,\n    BooleanDtype,\n    # missing\n    NA,\n    isna,\n    isnull,\n    notna,\n    notnull,\n    # indexes\n    Index,\n    CategoricalIndex,\n    Int64Index,\n    UInt64Index,\n    RangeIndex,\n    Float64Index,\n    MultiIndex,\n    IntervalIndex,\n    TimedeltaIndex,\n    DatetimeIndex,\n    PeriodIndex,\n    IndexSlice,\n    # tseries\n    NaT,\n    Period,\n    period_range,\n    Timedelta,\n    timedelta_range,\n    Timestamp,\n    date_range,\n    bdate_range,\n    Interval,\n    interval_range,\n    DateOffset,\n    # conversion\n    to_numeric,\n    to_datetime,\n    to_timedelta,\n    # misc\n    Flags,\n    Grouper,\n    factorize,\n    unique,\n    value_counts,\n    NamedAgg,\n    array,\n    Categorical,\n    set_eng_float_format,\n    Series,\n    DataFrame,\n)\n\nfrom pandas.core.arrays.sparse import SparseDtype\n\nfrom pandas.tseries.api import infer_freq\nfrom pandas.tseries import offsets\n\nfrom pandas.core.computation.api import eval\n\nfrom pandas.core.reshape.api import (\n    concat,\n    lreshape,\n    melt,\n    wide_to_long,\n    merge,\n    merge_asof,\n    merge_ordered,\n    crosstab,\n    pivot,\n    pivot_table,\n    get_dummies,\n    cut,\n    qcut,\n)\n\nimport pandas.api\nfrom pandas.util._print_versions import show_versions\n\nfrom pandas.io.api import (\n    # excel\n    ExcelFile,\n    ExcelWriter,\n    read_excel,\n    # parsers\n    read_csv,\n    read_fwf,\n    read_table,\n    # pickle\n    read_pickle,\n    to_pickle,\n    # pytables\n    HDFStore,\n    read_hdf,\n    # sql\n    read_sql,\n    read_sql_query,\n    read_sql_table,\n    # misc\n    read_clipboard,\n    read_parquet,\n    read_orc,\n    read_feather,\n    read_gbq,\n    read_html,\n    read_json,\n    read_stata,\n    read_sas,\n    read_spss,\n)\n\nfrom pandas.io.json import _json_normalize as json_normalize\n\nfrom pandas.util._tester import test\nimport pandas.testing\nimport pandas.arrays\n\n# use the closest tagged version if possible\nfrom ._version import get_versions\n\nv = get_versions()\n__version__ = v.get(\"closest-tag\", v[\"version\"])\n__git_version__ = v.get(\"full-revisionid\")\ndel get_versions, v\n\n\n# GH 27101\ndef __getattr__(name):\n    import warnings\n\n    if name == \"datetime\":\n        warnings.warn(\n            \"The pandas.datetime class is deprecated \"\n            \"and will be removed from pandas in a future version. \"\n            \"Import from datetime module instead.\",\n            FutureWarning,\n            stacklevel=2,\n        )\n\n        from datetime import datetime as dt\n\n        return dt\n\n    elif name == \"np\":\n\n        warnings.warn(\n            \"The pandas.np module is deprecated \"\n            \"and will be removed from pandas in a future version. \"\n            \"Import numpy directly instead\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        import numpy as np\n\n        return np\n\n    elif name in {\"SparseSeries\", \"SparseDataFrame\"}:\n        warnings.warn(\n            f\"The {name} class is removed from pandas. Accessing it from \"\n            \"the top-level namespace will also be removed in the next version\",\n            FutureWarning,\n            stacklevel=2,\n        )\n\n        return type(name, (), {})\n\n    elif name == \"SparseArray\":\n\n        warnings.warn(\n            \"The pandas.SparseArray class is deprecated \"\n            \"and will be removed from pandas in a future version. \"\n            \"Use pandas.arrays.SparseArray instead.\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        from pandas.core.arrays.sparse import SparseArray as _SparseArray\n\n        return _SparseArray\n\n    raise AttributeError(f\"module 'pandas' has no attribute '{name}'\")\n\n\n# module level doc-string\n__doc__ = \"\"\"\npandas - a powerful data analysis and manipulation library for Python\n=====================================================================\n\n**pandas** is a Python package providing fast, flexible, and expressive data\nstructures designed to make working with \"relational\" or \"labeled\" data both\neasy and intuitive. It aims to be the fundamental high-level building block for\ndoing practical, **real world** data analysis in Python. Additionally, it has\nthe broader goal of becoming **the most powerful and flexible open source data\nanalysis / manipulation tool available in any language**. It is already well on\nits way toward this goal.\n\nMain Features\n-------------\nHere are just a few of the things that pandas does well:\n\n  - Easy handling of missing data in floating point as well as non-floating\n    point data.\n  - Size mutability: columns can be inserted and deleted from DataFrame and\n    higher dimensional objects\n  - Automatic and explicit data alignment: objects can be explicitly aligned\n    to a set of labels, or the user can simply ignore the labels and let\n    `Series`, `DataFrame`, etc. automatically align the data for you in\n    computations.\n  - Powerful, flexible group by functionality to perform split-apply-combine\n    operations on data sets, for both aggregating and transforming data.\n  - Make it easy to convert ragged, differently-indexed data in other Python\n    and NumPy data structures into DataFrame objects.\n  - Intelligent label-based slicing, fancy indexing, and subsetting of large\n    data sets.\n  - Intuitive merging and joining data sets.\n  - Flexible reshaping and pivoting of data sets.\n  - Hierarchical labeling of axes (possible to have multiple labels per tick).\n  - Robust IO tools for loading data from flat files (CSV and delimited),\n    Excel files, databases, and saving/loading data from the ultrafast HDF5\n    format.\n  - Time series-specific functionality: date range generation and frequency\n    conversion, moving window statistics, date shifting and lagging.\n\"\"\"\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参数值过大了数值溢出&amp;#xff0c;把规模缩小&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何解决RuntimeWarning: overflow encountered in exp？", ["显示错误提示如下：", "Flsf.py:92: RuntimeWarning: overflow encountered in exp", "  RP += (np.exp(M_PS[row_C, n]) - np.exp(-M_PS[row_C, n])) / (np.exp(M_PS[row_C, n]) + np.exp(-M_PS[row_C, n]))", "Flsf.py:92: RuntimeWarning: invalid value encountered in double_scalars", "  RP += (np.exp(M_PS[row_C, n]) - np.exp(-M_PS[row_C, n])) / (np.exp(M_PS[row_C, n]) + np.exp(-M_PS[row_C, n]))"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;把print(computeCost((x, y, theta))改成print(computeCost(x, y, theta)&amp;#xff09;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python程序的报错小问题", ["刚开始学做机器学习的时候遇到的问题", "\n", "问题相关代码 python", "\n", "def computeCost(x, y, theta):#代价函数\n    ", "inner", "=np.power(((x*theta.T)-y),2)\n    return np.sum(inner)/(2*len(x))\ndata.insert(0,", "'ones'", ",1)#data加一列1\n", "#print(data.head())", "\n", "cols", "=data.shape[1]#", "cols", "=data列数\n", "X", "=data.iloc[:,0:cols-1]#pandas iloc提取前两列\n", "Y", "=data.iloc[:,cols-1:cols]#pandas iloc提取后1列\n", "x", "=np.matrix(X.values)\n", "y", "=np.matrix(Y.values)\n", "theta", "=np.matrix(np.array([0,0]))\n", "#print(x.shape,theta.shape,y.shape)#看矩阵维度", "\n", "print", "(computeCost((x, y, theta)))\n", "\n", "运行结果及报错内容", "\n", "Traceback (most recent ", "call", " ", "last", "):\n  File ", "\"D:\\pythonProject\\ml\\work1.py\"", ", ", "line", " ", "24", ", in ", "<module>", "\n    ", "print", "(computeCost((", "x", ", ", "y", ", theta)))\nTypeError: computeCost() missing ", "2", " required positional arguments: ", "'y'", " ", "and", " ", "'theta'", "\n", "\n", "\n", "函数computeCost缺少 2 个必需 位置参数", "我这里不是已经定义了y和theta了吗？", "想请教一下是哪里出了问题"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你调用的库里是封装了函数的&amp;#xff0c;肯定不能简单的计算时间复杂度为1&amp;#xff0c;至于这个函数需要时间复杂度是多久&amp;#xff0c;需要你思考其内部是否必须有for循环才能实现&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于时间复杂度计算的问题", ["gudinjuzhen_1 = ", "np", ".ones(((math.", "factorial", "(", "num", "-", "2", ")),", "1", "),dtype=", "np", ".int32) \ngudinjuzhen_0 = ", "np", ".zeros(((math.", "factorial", "(", "num", "-", "2", ")),", "num", "-", "2", "),dtype=", "np", ".int32)\ngudinjuzhen = ", "np", ".column_stack((gudinjuzhen_1,gudinjuzhen_0))\n", "\n", "这样时间复杂度能算作3吗，我代码里面很多单步运算时间都不同的，我能把每个单步都算作1去计算时间复杂度吗"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;pd.merge(a.fillna(b), b.fillna(a), on&amp;#61;[&amp;#39;药品名&amp;#39;,&amp;#39;商品号&amp;#39;,&amp;#39;条形码&amp;#39;])&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pandas的merge函数多键合并的问题", ["\n", "a = pd.DataFrame({'药品名':['感康','感冒灵','皮炎平'], '商品号':[np.nan,'0023','0045'],'条形码':['69000000001',np.nan,'69000000003'], '规格':['12片','8袋','15克']})\nb = pd.DataFrame({'药品名':['感康','感冒灵','皮炎平'], '商品号':['0012','0023',np.nan,],'条形码':['69000000001','69000000002','69000000003'], '零售价':[10, 9, 7.5]})", "\n\n", "\n\n", "我想通过‘商品号’和‘条形码’这两列，合并这两个表格", "\n但这两列，只要其中一列相等即可合并，我要的结果如下：", "\n\n", "\n\n", "如何用最少的代码，实现这个结果？"]], "Tag": "算法设计"}
{"Answer": "暂时没有解决方法 。。。。。。。。。。。。。。。。。。。。。。。。。。。。。", "Konwledge_Point": "应对NP完全问题", "Question": ["跪求大神帮我检查一下BP算法计算异或问题程序的错误", ["感觉是权值更新部分出错了 ", "\n            运行出来都是0.5左右  不知道为啥", "\n\n", "import math\nimport numpy as np\nimport random as rd\ndef sigmoid(x):\n    f = 1/(1+np.exp(-1*x))\n    return f\n\ndef sigmoid_(x):\n\n    f = [[sigmoid(x[i][j])*(1-sigmoid(x[i][j]))  for j in range(len(x[i]))] for i in range(len(x))]\n    return f\n\ndef differentail_matrix(x):\n    f = np.diag(x[0])\n    return f\n\ninput_X = np.array([[0,0],[1,0],[0,1],[1,1]])\n#print(input_X.shape)\ninput_Y = np.array([[0],[1],[1],[0]])\n#print(input_Y.shape)\n\nW1 = np.random.rand(2,2) #later input,former output\nb1 = np.zeros([2,1])\n#W1 = np.array([[2,2],[-1,-1]])\n#b1 = np.array([[-1],[1.5]])\nW2 = np.random.rand(1,2)\nb2 = np.random.rand(1,1)\n# W2 = np.array([1,1])\n# W2.shape = 1,2\n# b2 = np.array([-1.0])\n#print(W1,b1)\n\nalpha = 0.05 #learn rate\nfor k in range(10000):\n\n    r = rd.sample([0,1,2,3], 1)           #随机抽取\n\n\n\n    X = np.array(input_X[r])\n    X.shape = 2,1                        #transpose\n    Y = np.array(input_Y[r])\n\n    out1 = sigmoid(np.dot(W1,X) + b1)\n    pred_y = sigmoid(np.dot(W2,out1) + b2)\n    #print('predy:',pred_y)\n    err = Y-pred_y\n    #print('err:',err)\n\n\n    #back propagation\n\n    s2 = -2*sigmoid(pred_y)*(1-sigmoid(pred_y))*err         #计算敏感度\n\n    temp = sigmoid_(out1)\n\n    temp = np.array(temp)\n    temp.shape = 1, 2\n    temp2 = np.array(differentail_matrix(temp))\n    s1 = np.dot(temp2, W2.T)*s2\n\n    W2 = W2-alpha*s2*np.transpose(out1)               #权值更新\n    b2 = b2 - alpha*s2\n\n    W1 = W1 - alpha*np.dot(s1,np.transpose(X))\n    b1 = b1 - alpha*s1\n\n\n    #print('第:',i,'次迭代','\\n','权值1',W1,'\\n',b1)\n    #print()\n\n\n    if k%500 == 0:\n        out1 = sigmoid(np.dot(W1,np.transpose(input_X)) + b1)\n        pred_y = sigmoid(np.dot(W2,out1) + b2)\n        print(pred_y)\n"]], "Tag": "算法设计"}
{"Answer": "按照你这个方位地址来看，这个index.xhtml文件应该直接位于你的webContent目录下才能这样访问。404说明这个文件路径不是直接在这个目录下的。\r\n检查下你的文件路径，不介意的话贴出来看看。", "Konwledge_Point": "应对NP完全问题", "Question": ["这个错误怎么解决，谢谢！", []], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;最后一句data.loc[data[&amp;#39;质量等级&amp;#39;&amp;#61;&amp;#61;&amp;#39;优&amp;#39;,:]]写错了&amp;#xff0c;&amp;#39;质量等级&amp;#39;&amp;#61;&amp;#61;&amp;#39;优&amp;#39;不能作为索引。要使用布尔索引&amp;#xff0c;这样改写一下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(data.loc[data[&lt;span class=\"hljs-string\"&gt;&amp;#39;质量等级&amp;#39;&lt;/span&gt;]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;优&amp;#39;&lt;/span&gt;,:])&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如对你有帮助&amp;#xff0c;请点击下采纳。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于数据集的抽样问题", ["问题遇到的现象和发生背景", "\n", "导入excel北京空气质量数据，然后用numpy抽样", "\n", "问题相关代码，请勿粘贴截图", "\n", "import numpy as np", "import pandas as pd", "data=pd.read_excel(r'C:\\Users\\18464\\Desktop\\北京市空气质量数据.xlsx')", "np.random.seed(123)", "sampler=np.random.randint(0,len(data),10)", "print(sampler)", "sample=np.random.permutation(len(data))[:10]", "print(sample)", "data.take(sampler)", "data.loc[data['质量等级'=='优',:]]", "\n", "运行结果及报错内容", "\n", "TypeError: '(False, slice(None, None, None))' is an invalid key", "\n", "我的解答思路和尝试过的方法", "\n", "不是很懂为什么会出错", "\n", "我想要达到的结果", "\n", "得到随机抽样的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;原代码错在这行&amp;#xff1a;AN &amp;#61; map(list, AN)&amp;#xff0c;原代码的本意是想&amp;#xff0c;用map整体映射功能,能将列表或者元组转化为每个元素都为列表样式的列表,但是这行代码执行后只能返回一个映射对象,需要将其转换为列表。将其改为&amp;#xff1a;AN &amp;#61; list(map(list, AN))就行了。&lt;/p&gt;\n\n&lt;p&gt;如有帮助请点采纳。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python报错“too many indices for array”", ["在做基于tdoa的chan算法做室内定位的东西", "\n\n", "从网上找了一篇代码，稍微修改了一下导入相关库的操作和开根号的代码，但拿来跑了一下出现了一个错误“too many indices for array”", "\n\n", "代码链接：", "http://www.doczj.com/doc/88a625c4710abb68a98271fe910ef12d2af9a98c.html", "\n\n", "有没有大神帮忙看看！！谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[21, 2.5 , -23.2, 8.4, -4, 3, -1.03]&lt;/span&gt;\n\n#遍历列表\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(len(a)):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:  #发现负数元素就取反\n        &lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt; &amp;#61; -&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a)&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/439225636236187.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python怎么将转换列表里的负数,转换为正数", ["a = [21, 2.5 , -23.2, 8.4, -4, 3,  -1.03] "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;Union 是 Python 的类型提示库中的一个类型&amp;#xff0c;用来表示可能是多种类型之一。在这里&amp;#xff0c;Union[Tuple[np.ndarray, np.ndarray], Tuple[float, float]] 表示返回值可能是一个包含两个 numpy 数组的元组&amp;#xff0c;或者是一个包含两个浮点数的元组。&lt;br /&gt;talib.MAX(self.high, n) 和 talib.MIN(self.low, n) 是调用的 TA-Lib 库中的函数&amp;#xff0c;这些函数会返回一个 numpy 数组&amp;#xff0c;所以可以直接赋值给 np.ndarray 类型的变量。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于python中的一些语法问题", ["def donchian(\n        self, n: int, array: bool = False\n    ) -> ", "Union", "[\n        ", "Tuple", "[np.ndarray, np.ndarray],\n        ", "Tuple", "[float, float]\n    ]:\n        ", "\"\"\"\n        Donchian Channel.\n        \"\"\"", "\n        up: np.ndarray = talib.MAX(self.high, n)\n        down: np.ndarray = talib.MIN(self.low, n)\n\n        ", "if", " array:\n            ", "return", " up, down\n        ", "return", " up[-", "1", "], down[-", "1", "]\n", "\n", "在vn.py看到的一段代码，关于donchian的定义，想请教", "1.对于donchian后的-> Union， Union不是一个类吗，在这里代表什么呢？", "2.对于up: np.ndarray = talib.MAX(self.high, n)，为什么np.ndarray作为已定义的类，可以被talib.MAX/MIN赋值？", "谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import pandas as pd\nimport numpy as np\ndata&amp;#61;{\n&lt;span class=\"hljs-string\"&gt;&amp;#39;AUD/USD&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-selector-attr\"&gt;[1.72,1.74,np.nan,168,1.75,1.71,]&lt;/span&gt;,\n&lt;span class=\"hljs-string\"&gt;&amp;#39;EUR/AUD&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-selector-attr\"&gt;[0.62,0.63,0.59,0.64,np.nan,0.61,]&lt;/span&gt;,}\nindex &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;2022-10-1&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;2022-10-2&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;2022-10-3&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;2032-10-4&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;2022-10-7&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;2022-10-8&amp;#39;&lt;/span&gt;]&lt;/span&gt;\ndf &amp;#61;pd&lt;span class=\"hljs-selector-class\"&gt;.DataFrame&lt;/span&gt;(data,index)\n\nsel_q1&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;2022-10-1&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;2022-10-7&amp;#39;&lt;/span&gt;]&lt;/span&gt;\nq1&amp;#61;df&lt;span class=\"hljs-selector-class\"&gt;.loc&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[sel_q1]&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(q1)&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n\\n&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;\n\n(start_q2,stop_q2)&amp;#61;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\nq2&amp;#61;df&lt;span class=\"hljs-selector-class\"&gt;.iloc&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[start_q2:stop_q2]&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(q2)&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n\\n&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;\n\n(start_q3,stop_q3)&amp;#61;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\nq3&amp;#61;df&lt;span class=\"hljs-selector-attr\"&gt;[start_q3:stop_q3]&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(q3)&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n\\n&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;\n\nrow_sel_q4&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;2022-10-1&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;2022-10-2&amp;#39;&lt;/span&gt;]&lt;/span&gt;\ncol_sel_q4&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;AUD/USD&amp;#39;&lt;/span&gt;]&lt;/span&gt;\nq4&amp;#61;df&lt;span class=\"hljs-selector-class\"&gt;.loc&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[row_sel_q4,col_sel_q4]&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(q4)&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["根据提供的DataFrame df回的下列问题", ["import pandas as pd", "import numpy as np", "\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "https://www.jb51.net/article/152595.htm", "Konwledge_Point": "应对NP完全问题", "Question": ["python通过初等行变换求逆矩阵的问题", ["从线代角度来看感觉没什么问题，但是测试的时候发现对4阶以下的矩阵能够正确求得其逆矩阵，但是高于5阶就只能偶尔正确，不知道出现了什么问题"]], "Tag": "算法设计"}
{"Answer": "把plt.bar  中的left 换成x就可以了", "Konwledge_Point": "应对NP完全问题", "Question": ["关于python matplotlib的问题", ["import matplotlib.pyplot as plt\nimport numpy as np\nbar_width = 0.4\nplt.bar(left = np.arange(len(school)),height = group_ms,label = 'MS', color = 'steelblue',width = bar_width)\nplt.bar(left = np.arange(len(school))+bar_width,height = group_gp,label = 'GP', color = 'indianred',width = bar_width)\nplt.xticks(np.arange(3)+0.2,school)\nplt.legend()\nplt.show()\n", "\n\n", "错误代码是：", "\n\n", "TypeError                                 Traceback (most recent call last)\n<ipython-input-80-f63fd0192e45> in <module>\n      2 import numpy as np\n      3 bar_width = 0.4\n----> 4 plt.bar(left = np.arange(len(school)),height = group_ms,label = 'MS', color = 'steelblue',width = bar_width)\n      5 plt.bar(left = np.arange(len(school))+bar_width,height = group_gp,label = 'GP', color = 'indianred',width = bar_width)\n      6 plt.xticks(np.arange(3)+0.2,school)\n\nTypeError: bar() missing 1 required positional argument: 'x'\n\n", "\n\n", "数据是", "\n\n", "需要将两个学校的数据进行对比"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;MiniGoogLeNet的代码有点问题&amp;#xff0c;参考下面这个。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-py\"&gt;\n# import the necessary packages\nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import AveragePooling2D\nfrom tensorflow.keras.layers import MaxPooling2D\nfrom tensorflow.keras.layers import Activation\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import concatenate\nfrom tensorflow.keras import backend &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; K\n \n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; MiniGoogLeNet:\n    &amp;#64;staticmethod\n    def conv&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, K, &lt;span class=\"hljs-params\"&gt;kX&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;kY&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;stride&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;chanDim&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;padding&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;same&amp;#34;&lt;/span&gt;)&lt;/span&gt;:\n        # define a CONV &amp;#61;&amp;gt; BN &amp;#61;&amp;gt; RELU pattern\n        x &amp;#61; &lt;span class=\"hljs-constructor\"&gt;Conv2D(K, (&lt;span class=\"hljs-params\"&gt;kX&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;kY&lt;/span&gt;)&lt;/span&gt;, strides&amp;#61;stride, padding&amp;#61;padding)(x)\n        x &amp;#61; &lt;span class=\"hljs-constructor\"&gt;BatchNormalization(&lt;span class=\"hljs-params\"&gt;axis&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;chanDim&lt;/span&gt;)&lt;/span&gt;(x)\n        x &amp;#61; &lt;span class=\"hljs-constructor\"&gt;Activation(&lt;span class=\"hljs-string\"&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;)&lt;/span&gt;(x)\n        # return the block\n        return x\n \n    &amp;#64;staticmethod\n    def inception&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;numK1x1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;numK3x3&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;chanDim&lt;/span&gt;)&lt;/span&gt;:\n        # define two CONV modules, &lt;span class=\"hljs-keyword\"&gt;then&lt;/span&gt; concatenate across the\n        # channel dimension\n        conv_1x1 &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;MiniGoogLeNet&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;conv&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;numK1x1&lt;/span&gt;, 1, 1, (1, 1)&lt;/span&gt;, chanDim)\n        conv_3x3 &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;MiniGoogLeNet&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;conv&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;numK3x3&lt;/span&gt;, 3, 3, (1, 1)&lt;/span&gt;, chanDim)\n        x &amp;#61; concatenate(&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;conv_1x1&lt;/span&gt;, &lt;span class=\"hljs-identifier\"&gt;conv_3x3&lt;/span&gt;]&lt;/span&gt;, axis&amp;#61;chanDim)\n        # return the block\n        return x\n \n    &amp;#64;staticmethod\n    def downsample&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, K, &lt;span class=\"hljs-params\"&gt;chanDim&lt;/span&gt;)&lt;/span&gt;:\n        # define the CONV &lt;span class=\"hljs-keyword\"&gt;module&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; POOL, &lt;span class=\"hljs-keyword\"&gt;then&lt;/span&gt; concatenate\n        # across the channel dimensions\n        conv_3x3 &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;MiniGoogLeNet&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;conv&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, K, 3, 3, (2, 2)&lt;/span&gt;, chanDim, padding&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;valid&amp;#34;&lt;/span&gt;)\n        pool &amp;#61; &lt;span class=\"hljs-constructor\"&gt;MaxPooling2D((3, 3)&lt;/span&gt;, strides&amp;#61;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;))(x)\n        x &amp;#61; concatenate(&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;conv_3x3&lt;/span&gt;, &lt;span class=\"hljs-identifier\"&gt;pool&lt;/span&gt;]&lt;/span&gt;, axis&amp;#61;chanDim)\n        # return the block\n        return x\n \n    &amp;#64;staticmethod\n    def build(width, height, depth, classes):\n        # initialize the input shape &lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt; be &lt;span class=\"hljs-string\"&gt;&amp;#34;channels last&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; the\n        # channels dimension itself\n        inputShape &amp;#61; (height, width, depth)\n        chanDim &amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n \n        # &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; we are using &lt;span class=\"hljs-string\"&gt;&amp;#34;channels first&amp;#34;&lt;/span&gt;, update the input shape\n        # &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; channels dimension\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;K&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;image&lt;span class=\"hljs-constructor\"&gt;_data_format()&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;channels_first&amp;#34;&lt;/span&gt;:\n            inputShape &amp;#61; (depth, height, width)\n            chanDim &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        # define the model input &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; first CONV &lt;span class=\"hljs-keyword\"&gt;module&lt;/span&gt;\n        inputs &amp;#61; &lt;span class=\"hljs-constructor\"&gt;Input(&lt;span class=\"hljs-params\"&gt;shape&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-params\"&gt;inputShape&lt;/span&gt;)&lt;/span&gt;\n        x &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;MiniGoogLeNet&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;conv&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;inputs&lt;/span&gt;, 96, 3, 3, (1, 1)&lt;/span&gt;, chanDim)\n        # two Inception modules followed by a downsample &lt;span class=\"hljs-keyword\"&gt;module&lt;/span&gt;\n        x &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;MiniGoogLeNet&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;inception&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, 32, 32, &lt;span class=\"hljs-params\"&gt;chanDim&lt;/span&gt;)&lt;/span&gt;\n        x &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;MiniGoogLeNet&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;inception&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, 32, 48, &lt;span class=\"hljs-params\"&gt;chanDim&lt;/span&gt;)&lt;/span&gt;\n        x &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;MiniGoogLeNet&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;downsample&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, 80, &lt;span class=\"hljs-params\"&gt;chanDim&lt;/span&gt;)&lt;/span&gt;\n \n        # four Inception modules followed by a downsample &lt;span class=\"hljs-keyword\"&gt;module&lt;/span&gt;\n        x &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;MiniGoogLeNet&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;inception&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, 112, 48, &lt;span class=\"hljs-params\"&gt;chanDim&lt;/span&gt;)&lt;/span&gt;\n        x &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;MiniGoogLeNet&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;inception&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, 96, 64, &lt;span class=\"hljs-params\"&gt;chanDim&lt;/span&gt;)&lt;/span&gt;\n        x &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;MiniGoogLeNet&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;inception&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, 80, 80, &lt;span class=\"hljs-params\"&gt;chanDim&lt;/span&gt;)&lt;/span&gt;\n        x &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;MiniGoogLeNet&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;inception&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, 48, 96, &lt;span class=\"hljs-params\"&gt;chanDim&lt;/span&gt;)&lt;/span&gt;\n        x &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;MiniGoogLeNet&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;downsample&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, 96, &lt;span class=\"hljs-params\"&gt;chanDim&lt;/span&gt;)&lt;/span&gt;\n \n        # two Inception modules followed by global POOL &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; dropout\n        x &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;MiniGoogLeNet&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;inception&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, 176, 160, &lt;span class=\"hljs-params\"&gt;chanDim&lt;/span&gt;)&lt;/span&gt;\n        x &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;MiniGoogLeNet&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;inception&lt;span class=\"hljs-constructor\"&gt;_module(&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, 176, 160, &lt;span class=\"hljs-params\"&gt;chanDim&lt;/span&gt;)&lt;/span&gt;\n        x &amp;#61; &lt;span class=\"hljs-constructor\"&gt;AveragePooling2D((7, 7)&lt;/span&gt;)(x)\n        x &amp;#61; &lt;span class=\"hljs-constructor\"&gt;Dropout(0.5)&lt;/span&gt;(x)\n \n        # softmax classifier\n        x &amp;#61; &lt;span class=\"hljs-constructor\"&gt;Flatten()&lt;/span&gt;(x)\n        x &amp;#61; &lt;span class=\"hljs-constructor\"&gt;Dense(&lt;span class=\"hljs-params\"&gt;classes&lt;/span&gt;)&lt;/span&gt;(x)\n        x &amp;#61; &lt;span class=\"hljs-constructor\"&gt;Activation(&lt;span class=\"hljs-string\"&gt;&amp;#34;softmax&amp;#34;&lt;/span&gt;)&lt;/span&gt;(x)\n \n        # create the model\n        model &amp;#61; &lt;span class=\"hljs-constructor\"&gt;Model(&lt;span class=\"hljs-params\"&gt;inputs&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;googlenet&amp;#34;&lt;/span&gt;)&lt;/span&gt;\n \n        # return the constructed network architecture\n        return model\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python使用model.compile方法的时候，遇到AttributeError: 'NoneType' object has no attribute 'compile'这个问题", ["在跑《deep learning for computer vision with python》第二本第11章的googlenet程序时候，遇到使用model.compile方法出现bug。'NoneType' object has no attribute 'compile'", "\n", "\n", "import", " matplotlib\n\nmatplotlib.use(", "\"Agg\"", ")\n\n", "from", " sklearn.preprocessing ", "import", " LabelBinarizer\n", "from", " pyimagesearch.nn.conv ", "import", " MiniGoogLeNet\n", "from", " pyimagesearch.callbacks ", "import", " TrainingMonitor\n", "from", " keras.preprocessing.image ", "import", " ImageDataGenerator\n", "from", " keras.callbacks ", "import", " LearningRateScheduler\n", "from", " keras.optimizers ", "import", " SGD\n", "from", " keras.datasets ", "import", " cifar10\n", "import", " numpy ", "as", " np\n", "import", " argparse\n", "import", " os\n\nNUM_EPOCHS = ", "70", "\nINIT_LR = ", "5e-3", "\n\n\n", "def", " ", "poly_decay", "(", "epoch", "):\n    maxEpochs = NUM_EPOCHS\n    baseLR = INIT_LR\n    power = ", "1.0", "\n\n    alpha = baseLR * (", "1", " - (epoch / ", "float", "(maxEpochs))) ** power\n\n    ", "return", " alpha\n\n\nap = argparse.ArgumentParser()\nap.add_argument(", "\"-m\"", ", ", "\"--model\"", ", required=", "True", ",\n                ", "help", "=", "\"path to output model\"", ")\nap.add_argument(", "\"-o\"", ", ", "\"--output\"", ", required=", "True", ",\n                ", "help", "=", "\"path to output directory (logs, plots, etc.)\"", ")\nargs = ", "vars", "(ap.parse_args())\n\n", "print", "(", "\"[INFO] loading CIFAR-10 data...\"", ")\n((trainX, trainY), (testX, testY)) = cifar10.load_data()\ntrainX = trainX.astype(", "\"float\"", ")\ntestX = testX.astype(", "\"float\"", ")\n\nmean = np.mean(trainX, axis=", "0", ")\ntrainX -= mean\ntestX -= mean\n\nlb = LabelBinarizer()\ntrainY = lb.fit_transform(trainY)\ntestY = lb.transform(testY)\n\naug = ImageDataGenerator(width_shift_range=", "0.1", ", height_shift_range=", "0.1", ",\n                         horizontal_flip=", "True", ",\n                         fill_mode=", "\"nearest\"", ")\n\nfigPath = os.path.sep.join([args[", "\"output\"", "], ", "\"{}.png\"", ".", "format", "(os.getpid())])\njsonPath = os.path.sep.join([args[", "\"output\"", "], ", "\"{}.json\"", ".", "format", "(os.getpid())])\ncallbacks = [TrainingMonitor(figPath, jsonPath=jsonPath),\n             LearningRateScheduler(poly_decay)]\n\n", "print", "(", "\"[INFO] compiling model...\"", ")\nopt = SGD(lr=INIT_LR, momentum=", "0.9", ")\nmodel = MiniGoogLeNet.build(width=", "32", ", height=", "32", ", depth=", "3", ", classes=", "10", ")\nmodel.", "compile", "(loss=", "\"categorical_crossentropy\"", ", optimizer=opt,\n              metrics=[", "\"accuracy\"", "])\n\n", "print", "(", "\"[INFO] training network...\"", ")\nmodel.fit_generator(aug.flow(trainX, trainY, batch_size=", "64", "),\n                    validation_data=(testX, testY), steps_per_epoch=", "len", "(trainX) // ", "64", ",\n                    epochs=NUM_EPOCHS, callbacks=callbacks, verbose=", "1", ")\n", "print", "(", "\"[INFO] serializing network...\"", ")\nmodel.save(args[", "\"model\"", "])\n\n", "\n", "在terminal端输入 python googlenet_cifar10.py 指令的时候 出现'NoneType' object has no attribute 'compile'的bug"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;内存错误&amp;#xff0c;一般是运行时内存占用超过了内存配置&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python编译出现MemoryError问题，救", ["问题遇到的现象和发生背景", "\n", "用Jupyter学习纽约出租车运行情况分析建模时，在聚类的时候，运行下列代码出现MemoryError报错。", "\n", "问题相关代码", "\n", "kmeans = KMeans(n_clusters=", "15", ", random_state=", "2", ", n_init = ", "10", ")", ".fit", "(loc_df)\nloc_df", "[", "'label'", "]", " = kmeans", ".labels_", "\n\nloc_df = loc_df", ".sample", "(", "200000", ")\nplt", ".figure", "(figsize = (", "10", ",", "10", "))\n", "for", " ", "label", " ", "in", " loc_df", ".label", ".unique", "():\n    plt", ".plot", "(loc_df", ".longitude", "[loc_df.label == label]", ",loc_df", ".latitude", "[loc_df.label == label]", ",", "'.'", ",alpha = ", "0.3", ", markersize = ", "0.3", ")\n    \nplt", ".title", "(", "'NewYork Clusters'", ")\nplt", ".show", "()\n\n", "\n", "运行结果及报错内容", "\n", "---------------------------------------------------------------------------\nMemoryError                               Traceback (most recent call last)\n<ipython-input-16-06a5f4870f57> ", "in", " <module>()\n----> 1 kmeans = KMeans(", "n_clusters", "=15, ", "random_state", "=2, n_init = 10).fit(loc_df)\n      2 loc_df[", "'label'", "] = kmeans.labels_\n      3 \n      4 loc_df = loc_df.sample(200000)\n      5 plt.figure(figsize = (10,10))\n\nD:\\Anaconda3\\lib\\site-packages\\sklearn\\cluster\\k_means_.py ", "in", " fit(self, X, y)\n    894                 ", "tol", "=self.tol, ", "random_state", "=random_state, ", "copy_x", "=self.copy_x,\n    895                 ", "n_jobs", "=self.n_jobs, ", "algorithm", "=self.algorithm,\n--> 896                 ", "return_n_iter", "=", "True", ")\n    897         return self\n    898 \n\nD:\\Anaconda3\\lib\\site-packages\\sklearn\\cluster\\k_means_.py ", "in", " k_means(X, n_clusters, init, precompute_distances, n_init, max_iter, verbose, tol, random_state, copy_x, n_jobs, algorithm, return_n_iter)\n    344                 X, n_clusters, ", "max_iter", "=max_iter, ", "init", "=init, ", "verbose", "=verbose,\n    345                 ", "precompute_distances", "=precompute_distances, ", "tol", "=tol,\n--> 346                 ", "x_squared_norms", "=x_squared_norms, ", "random_state", "=random_state)\n    347             # determine ", "if", " these results are the best so far\n    348             ", "if", " best_inertia is None ", "or", " inertia < best_inertia:\n\nD:\\Anaconda3\\lib\\site-packages\\sklearn\\cluster\\k_means_.py ", "in", " _kmeans_single_elkan(X, n_clusters, max_iter, init, verbose, x_squared_norms, random_state, tol, precompute_distances)\n    398         ", "print", "(", "'Initialization complete'", ")\n    399     centers, labels, n_iter = k_means_elkan(X, n_clusters, centers, ", "tol", "=tol,\n--> 400                                             ", "max_iter", "=max_iter, ", "verbose", "=verbose)\n    401     inertia = np.sum((X - centers[labels]) ** 2, ", "dtype", "=np.float64)\n    402     return labels, inertia, centers, n_iter\n\nsklearn\\cluster\\_k_means_elkan.pyx ", "in", " sklearn.cluster._k_means_elkan.k_means_elkan()\n\nMemoryError: \n\n", "\n", "请问这个怎么解决吖", "\n", "读取文件用的是", "\n", "df", " = pd.read_csv(", "'yellow_tripdata_2012-01.csv'", ")\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个应该是线程回归&amp;#xff0c;m是回归系数。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["谁知道这串代码求的是什么东西啊？", ["m=(((np.mean(x)", "np.mean(y))-np.mean(x", "y))/((np.mean(x)", "np.mean(x))-np.mean(x", "x)))"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不知道你说的是不是这个&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;from numpy &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; *\n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(pi)\n# &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sin&lt;/span&gt;())\n# &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;cos&lt;/span&gt;())\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python从库里导入后如何定义", ["import numpy as np", "print(np.pi)", "a=np.array([[0，pi]，[pi/2，-pi/4])", "np.sin", "np.cos"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;安装numpy包&amp;#xff0c;在命令行执行&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-bash\"&gt;pip install numpy&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python代码问题", ["运行import numpy as np", "\n\n", "显示ModuleNotFoundError: No module named 'numpy'"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1、你下载的文件是否能被通用的解压缩工具打开并解压&amp;#xff0c; 比如winrar&lt;br /&gt;2、用普通的解压缩文件&amp;#xff0c;做一个测试zip文件&amp;#xff0c;来测试你的代码。&lt;/p&gt;\n&lt;p&gt;有的时候&amp;#xff0c; 文件后缀是zip 不是真的zip格式。 &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python使用zipfile模块，解压已有的zip文件时，报错File is not a zip file", ["问题遇到的现象和发生背景", "\n", "就是在接API的时候，需要将数据以zip格式下载保存到本地，然后再解压，解析上传到数据库，但是在用zipfile，按照网上的方法，传入路径、传入文件名，最终都会报错：zipfile.BadZipFile: File is not a zip file", "\n", "问题相关代码，请勿粘贴截图", "\n", "def unzip_file(zip_file,target_dir):", "    with zipfile.ZipFile(zip_file, \"r\") as zfile:", "        for file in zfile.namelist():", "            zfile.extract(file, target_dir)", "\n", "运行结果及报错内容", "\n", "Traceback (most recent call last):", "  File \"/Users/micra/PycharmProjects/pythonProject2/搜狗API.py\", line 92, in ", "    run()", "  File \"/Users/micra/PycharmProjects/pythonProject2/搜狗API.py\", line 87, in run", "    unzip_file(\"demo1.zip\", \"demo\")", "  File \"/Users/micra/PycharmProjects/pythonProject2/搜狗API.py\", line 65, in unzip_file", "    z =  zipfile.ZipFile(zip_file, \"r\")", "  File \"/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/zipfile.py\", line 1269, in ", "init", "    self._RealGetContents()", "  File \"/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/zipfile.py\", line 1336, in _RealGetContents", "    raise BadZipFile(\"File is not a zip file\")", "zipfile.BadZipFile: File is not a zip file", "\n", "进程已结束，退出代码为 1", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;直接原因是 imdb_w2v[word] 这里的 word 是 Word2Vec 类型对象&amp;#xff0c;不能用来做 imdb_w2v 的切片脚标&amp;#xff0c;检查下 imdb_w2v 的定义。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["第五十行大家看看为啥报错啊，弄了好久了", ["\n\n", "\n", "Traceback (most recent call last):\n  File \"E:/python/spider/svm&lstm/svm/train_svm.py\", line 130, in <module>\n    get_train_vecs(x_train, x_test)  # 计算词向量并保存为train_vecs.npy,test_vecs.npy\n  File \"E:/python/spider/svm&lstm/svm/train_svm.py\", line 70, in get_train_vecs\n    train_vecs = np.concatenate([buildWordVector(z, n_dim, imdb_w2v) for z in x_train])\n  File \"E:/python/spider/svm&lstm/svm/train_svm.py\", line 70, in <listcomp>\n    train_vecs = np.concatenate([buildWordVector(z, n_dim, imdb_w2v) for z in x_train])\n  File \"E:/python/spider/svm&lstm/svm/train_svm.py\", line 49, in buildWordVector\n    t = imdb_w2v[word].reshape((1, size))\nTypeError: 'Word2Vec' object is not subscriptable"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/924870683966123.jpg\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\nimport pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\nimport numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\ndtr&amp;#61;pd.date_&lt;span class=\"hljs-meta\"&gt;range&lt;/span&gt;(start&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;2016-5-20&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;2020-9-7&amp;#39;&lt;/span&gt;,freq&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;)\ndf&amp;#61;pd.DataFrame({},&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;&amp;#61;dtr.year)\ndf[&lt;span class=\"hljs-string\"&gt;&amp;#39;营业额&amp;#39;&lt;/span&gt;]&amp;#61; np.random.rand&lt;span class=\"hljs-meta\"&gt;int&lt;/span&gt;(200,1000, size&amp;#61;(le&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(dtr)))\nmax_year &amp;#61; df[&lt;span class=\"hljs-string\"&gt;&amp;#39;营业额&amp;#39;&lt;/span&gt;].idx&lt;span class=\"hljs-meta\"&gt;max&lt;/span&gt;()\npr&lt;span class=\"hljs-meta\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;每年营业额&amp;#xff1a;&amp;#34;&lt;/span&gt;)\npr&lt;span class=\"hljs-meta\"&gt;int&lt;/span&gt;(df)\npr&lt;span class=\"hljs-meta\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;营业额最大的年份&amp;#xff1a;{}&amp;#34;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;format&lt;/span&gt;(max_year))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于数据框的问题如何解决", ["部分代码，这个问题怎么实现图片上的结果", "\n", "\n", "import", " pandas ", "as", " pd\n", "import", " numpy ", "as", " np\ndtr=pd.date_range(start=", "'2016-5-20'", ",end=", "'2020-9-7'", ",freq=", "'5d'", ")\ndf=pd.DataFrame({},", "index", "=dtr)\ndf[", "'营业额'", "]= np.random.randint(", "200", ",", "1000", ", size=(len(dtr)))\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;astype() 对数据类型进行转换&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/weixin_42036641/article/details/86064700\" id=\"textarea_1658568385481_1658568881928_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_42036641/article/details/86064700&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;np.random.random()函数&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/qq_40108803/article/details/107523991\" id=\"textarea_1658568385481_1658568881928_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/qq_40108803/article/details/107523991&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;np.random.randint()函数&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/qq_40643699/article/details/107986176\" id=\"textarea_1658568385481_1658568881928_2\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/qq_40643699/article/details/107986176&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["paddle，dataset问题", ["请问  image = np.random.random([784]).astype('float32')", "        label = np.random.randint(0, 9, (1, )).astype('int64')什么意思呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;少了两个右括号&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/497548950246189.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;修改如下&amp;#xff1a;&lt;/strong&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;s &amp;#61; abs(&lt;span class=\"hljs-name\"&gt;np&lt;/span&gt;.sin((&lt;span class=\"hljs-name\"&gt;ang1-ang2&lt;/span&gt;)/180*np.pi)*l*h)&amp;#43;abs(&lt;span class=\"hljs-name\"&gt;np&lt;/span&gt;.cos((&lt;span class=\"hljs-name\"&gt;ang1-ang2&lt;/span&gt;)/180*np.pi)*w*h)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["plt.figure() 报错SyntaxError: invalid syntax", ["问题遇到的现象和发生背景", "\n", "jupyter notebook", "\n", "问题相关代码，请勿粘贴截图", "\n", "from matplotlib import pyplot as plt\nimport numpy as np\nplt", ".rcParams", "[", "'font.sans-serif'", "]", "=", "[", "'SimHei'", "]", "\nplt", ".rcParams", "[", "'axes.unicode_minus'", "]", "=False\n\n\nl = np", ".linspace", "(", "1", ",", "15", ",", "100", ")\nh = ", "10", "\nw = ", "10", "\nang1 = ", "30", "\nang2 = ", "45", "\n\n\ns = abs(np", ".sin", "((ang1-ang2)/", "180", "*np.pi)*l*h+abs(np", ".cos", "((ang1-ang2)/", "180", "*np.pi)*w*h\n\n\nplt", ".figure", "()\nplt", ".xlabel", "(", "\"长度\"", ")\nplt", ".ylabel", "(", "\"面积\"", ")\nplt", ".title", "(", "\"面积\"", ")\nplt", ".ylim", "(", "0", ",", "20", ")\nplt", ".xlim", "(", "0", ",", "20", ")\nplt", ".plot", "(l,s)\nplt", ".show", "()\n\n", "\n", "运行结果及报错内容", "\n", "  ", "File", " ", "\"<ipython-input-1-1aa313df8cd6>\"", ", ", "line", " 16\n    plt.figure()\n    ^\nSyntaxError: invalid ", "syntax", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "这个该怎么解决"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在代码中&amp;#xff0c;&lt;code class=\"language-javascript\"&gt;np.floor(5*np.random.random((2, 4)))&lt;/code&gt; 表示生成一个 $2\\times4$ 的随机数组并向下取整&amp;#xff0c;其中的 5 是一个系数&amp;#xff0c;用于控制随机数的范围。类似地&amp;#xff0c;&lt;code class=\"language-javascript\"&gt;np.ceil(6*np.random.random((4, 2)))&lt;/code&gt; 表示生成一个 $4\\times2$ 的随机数组并向上取整&amp;#xff0c;其中的 6 是一个系数。&lt;/p&gt;\n&lt;p&gt;具体来说&amp;#xff0c;&lt;code class=\"language-javascript\"&gt;np.random.random()&lt;/code&gt; 函数会生成一个形状为给定参数的随机浮点数数组&amp;#xff0c;数值的范围在 [0, 1) 之间。通过将生成的随机数组乘以系数&amp;#xff0c;可以控制随机数的范围和精度。&lt;code class=\"language-javascript\"&gt;np.floor()&lt;/code&gt; 和 &lt;code class=\"language-javascript\"&gt;np.ceil()&lt;/code&gt; 函数可以将数组中的每个元素向下或向上取整&amp;#xff0c;以保证数据的整数性。&lt;/p&gt;\n&lt;p&gt;在这个例子中&amp;#xff0c; &lt;code class=\"language-javascript\"&gt;np.floor(5*np.random.random((2, 4)))&lt;/code&gt; 和 &lt;code class=\"language-javascript\"&gt;np.ceil(6*np.random.random((4, 2)))&lt;/code&gt; 主要用于生成一些随机数据&amp;#xff0c;方便演示矩阵合并和分割操作。在实际应用中&amp;#xff0c;这些数字需要根据具体情况进行调整。&lt;/p&gt;\n&lt;p&gt;总之&amp;#xff0c;这里的 5 和 6 只是一些系数&amp;#xff0c;用于控制随机数的范围和精度&amp;#xff0c;并无特殊意义。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy库中矩阵的合并与分割", ["\nimport numpy as np\n", "a", " = np", ".arange", "(", "16", ")", ".reshape", "(", "4", ",", "4", ")  #生成", "4", "行", "4", "列的数组\n", "b", " = np", ".floor", "(", "5", "*np", ".random", ".random", "((", "2", ", ", "4", ")))\nc = np", ".ceil", "(", "6", "*np", ".random", ".random", "((", "4", ", ", "2", ")))\nd = np", ".vstack", "(", "[a, b]", ")  #上下合并矩阵\ne = np", ".hstack", "(", "[a, c]", ")  #左右合并矩阵\n", "\n", "b = np.floor(5", "np.random.random((2, 4)))", "c = np.ceil(6", "np.random.random((4, 2)))中的5", "和6", "是什么意思或作用"]], "Tag": "算法设计"}
{"Answer": "这个并不是错误，指示剂警告。告诉你这个API有变化，以后建议用新的API", "Konwledge_Point": "应对NP完全问题", "Question": ["PYTHON使用statsmodels库失败", ["#代码", "\nimport numpy", "\nfrom statsmodels.tsa.stattools import adfuller", "\nadfuller(numpy.random.rand(100))", "\n\n", "提示的错误为", "\nWarning (from warnings module):", "\n  File \"C:\\Python27\\lib\\site-packages\\statsmodels\\compat\\pandas.py\", line 56", "\n    from pandas.core import datetools", "\nFutureWarning: The pandas.core.datetools module is deprecated and will be removed in a future version. Please use the pandas.tseries module instead."]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;&amp;#61;np.random.randn(1000)  #生成数据&lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;hist1&lt;/span&gt;,edges1&amp;#61;np.histogram(&lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;) #是一个生成直方图的函数&lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;(hist1)\n&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;(edges1)\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\n\n&lt;span class=\"hljs-title\"&gt;plt&lt;/span&gt;.figure() #创建展示的结构\n&lt;span class=\"hljs-title\"&gt;plt&lt;/span&gt;.bar(edges1[:-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;],hist1,width&amp;#61;edges1[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:]-edges1[:-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n&lt;span class=\"hljs-meta\"&gt;#格式  plt.bar(x, height, width&amp;#61;0.8, bottom&amp;#61;None,color)&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;# x → 为一个标量序列&amp;#xff0c;确定x轴刻度数目&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;# height → 确定y轴的刻度&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;# width → 单个直方图的宽度&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;# bottom → 设置y边界坐标轴起点&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;# color → 设置直方图颜色&amp;#xff08;只给出一个值表示全部使用该颜色&amp;#xff0c;若赋值颜色列表则会逐一染色&amp;#xff0c;若给出颜色列表数目少于直方图数目则会循环利用&amp;#xff09;&lt;/span&gt;\n\n&lt;span class=\"hljs-title\"&gt;plt&lt;/span&gt;.show() #画图\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python的直方图问题", ["创建具有1000随机数的人工数据集，并画出其条形图", "\n", "书上给出的代码", "import numpy as np", "data=np.random.randn(1000)", "import matplotlib.pyplot as plt", "plt.figure()", "hist1,edges1=np.histogram(datal)", "plt.bar(edges1[:-1],hist1,width=edges1[1:]-edgesq[:-1]", "\n", "但是我不是很理解，也不知道顺序，望解答"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;axis表示折叠第几维度&lt;br /&gt;你是三维列表&amp;#xff0c;所以axis&amp;#61;0就是折叠0号维度。reshape(3,4,2)&amp;#xff0c;或者方括号从外向内数&amp;#xff0c;依次为0,1,2号维度。&lt;br /&gt;所以折叠0号维度&amp;#xff0c;就是变成4行2列的二维列表&amp;#xff0c;所有数据在0号维度上求和&amp;#xff0c;比如0&amp;#43;8&amp;#43;16&amp;#61;24,1&amp;#43;9&amp;#43;17&amp;#61;27&lt;br /&gt;同样地&amp;#xff0c;还可以折叠1号或2号维度&amp;#xff0c;变成3行2列&amp;#xff0c;或3行4列的二维列表&amp;#xff0c;所有数据在被折叠的维度上求和&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&amp;gt;&amp;gt;&amp;gt; c.sum(axis&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\narray(&lt;span class=\"hljs-string\"&gt;[[24, 27],\n       [30, 33],\n       [36, 39],\n       [42, 45]]&lt;/span&gt;)\n&amp;gt;&amp;gt;&amp;gt; \n&amp;gt;&amp;gt;&amp;gt; c.sum(axis&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\narray(&lt;span class=\"hljs-string\"&gt;[[12, 16],\n       [44, 48],\n       [76, 80]]&lt;/span&gt;)\n&amp;gt;&amp;gt;&amp;gt; \n&amp;gt;&amp;gt;&amp;gt; c.sum(axis&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\narray(&lt;span class=\"hljs-string\"&gt;[[ 1,  5,  9, 13],\n       [17, 21, 25, 29],\n       [33, 37, 41, 45]]&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy库中axis的有关问题", ["import numpy as np", "c= np.arange(24).reshape(3,4,2)", "它的c.sum(axis=0)的结果为：", "是如何计算出来的？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;c&amp;#61;a 相当于将符号c指向符号a的内容&amp;#xff0c;所以本质上c和a是相同的&lt;br /&gt;对于d&amp;#61;b[:]&amp;#xff0c;numpy对于切片拷贝的处理是不对相同数据进行复制&amp;#xff0c;以确保处理大量数据时节省空间&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/grey_csdn/article/details/69053476\" id=\"textarea_1629256689614_1629256855010_0\" class=\"md_link_card\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n  &lt;span class=\"md_link_title\"&gt;numpy中数组元素的切片复制_小灰笔记-CSDN博客&lt;/span&gt;\n  &lt;span class=\"md_link_desc\" style=\"\"&gt;代码1&amp;#xff1a;#!/usr/bin/pythonimport numpy as nparr1 &amp;#61; np.arange(10)print(arr1)slice_data &amp;#61; arr1[3:5]print(slice_data)slice_data[0] &amp;#61; 123print(slice_data)print(arr1)类似的代&lt;/span&gt;\n  &lt;span class=\"md_flex_card\"&gt;\n  &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n    &lt;span class=\"flex-1\"&gt;\n      &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/grey_csdn/article/details/69053476&lt;/span&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;&lt;/a&gt;&lt;br /&gt;由此得出来的结论是&amp;#xff1a;切片后的变量与原始的数据共享同一数据存储。而这种特点是专门针对大数据的处理而定制的。&lt;br /&gt;有帮助望采纳&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python numpy的向量赋值的问题", ["import numpy as np\na=np", ".array", "(", "[1,2,3]", ")\nb=np", ".array", "(", "[4,5,7]", ")\n\nc=", "a", "\nd=", "b", "[:]", "\n\nc", "[-1]", "=", "100", "\nd", "[-1]", "=", "100", "\n\n", "print", "(a)", "\n", "print", "(id(c)", ",id(a))\n", "print", "(b)", "\n", "print", "(id(d)", ",id(b))\n\n", "\n", "输出是：", "\n", "\n", "为什么d和c的id已经不一样了，给一个赋值另外一个还是会变化"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;np.where(pd.isnull(a), b, a) &lt;/strong&gt;就是把a里面是空的用b对应的值替换&amp;#xff0c;不然还是用a的值&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python where函数问题", ["import pandas as pd", "\nfrom pandas import Series, DataFrame", "\nimport numpy as np", "\n", "\na = pd.Series([np.nan, 2.5, 0.0, 3.5, 4.5, np.nan],", "\n              index = ['f', 'e', 'd', 'c', 'b', 'a'])", "\nb = pd.Series([0, np.nan, 2., np.nan, np.nan, 5.],", "\n              index = ['a', 'b', 'c', 'd', 'e', 'f'])", "\n", "\na", "\nOut[11]:", "\nf    NaN", "\ne    2.5", "\nd    0.0", "\nc    3.5", "\nb    4.5", "\na    NaN", "\ndtype: float64", "\n", "\nb", "\nOut[12]:", "\na    0.0", "\nb    NaN", "\nc    2.0", "\nd    NaN", "\ne    NaN", "\nf    5.0", "\ndtype: float64", "\n", "\nnp.where(pd.isnull(a), b, a)", "\nOut[13]: array([0. , 2.5, 0. , 3.5, 4.5, 5. ])", "\n", "\nnp.where(pd.isnull(b), b, a)", "\nOut[14]: array([nan, nan,  0., nan, nan, nan])", "\n", "\n", "\n", "谁帮忙解释一下np.where(pd.isnull(a), b, a) 和 np.where(pd.isnull(b), b, a)  是什么意思啊？谢谢。"]], "Tag": "算法设计"}
{"Answer": "或者 x' = x/ max(fabs(x)) ； \r\n或者 x' = 2 * ( x -  ( max(x) + min(x) ) * 0.5 )  / ( max(x) - min(x))， 但是变号，归一化到[-1, 1]；\r\n或者以均值为0计算sigma, x' = x / sigma, 归一化到 N~【0, sigma】分布", "Konwledge_Point": "应对NP完全问题", "Question": ["含负数数据如何标准化", ["如何对既有正数又有负数的数据标准化？且标准化后数据的正负号不变。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;t.reshape(3,2)&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python3矩阵问题", ["import numpy as np \nlist=", "[[1,2]", ",", "[3,4]", ",", "[5,6]", "] \nt=np", ".array", "(list)\n", "print", "(t)", "\nt=np", ".arange", "(", "24", ")", ".reshape", "(", "4", ",", "6", ")\n", "print", "(t)", "\n", "print", "(t.ndim)", "\n", "print", "(t.size)", "\n", "print", "(t.shape)", "\nt.shape=(", "3", ",", "2", ")\n", "print", "(t)", "\n", "\n", "t.shape=(3,2)这里报错了，为什么改变矩阵失败了？应该怎么改变？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;d&amp;#61;d.replace(&amp;#39;-&amp;#39;,0)&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#数据清洗#的问题，如何解决？", ["\n", "import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n", "#1利用read_csv导入9healthy_lifestyle_city_2021.csv", "\nd=pd.read_csv(", "r'C:\\Users\\ASUS\\Desktop\\毕设代码\\fangjia2019.csv'", ",sep=", "','", ")\npd.set_option(", "'display.max_columns'", ", ", "None", ")", "#显示所有列", "\nd.info()", "#快速浏览数据,查看所有列数据类型以及每列中非空值的数量", "\n", "print", "(d)", "#打印数据", "\n", "#2用均值填充缺失值NaN", "\nd.fillna(d.mean(),inplace=", "True", ")", "#要不要在源数据填充", "\n", "print", "(d.isnull().", "any", "())", "#统计data里每一列是否有空值,出现空值就删除", "\n", "#3保存至新数据表 数据清洗后数据.csv", "\nd.to_csv(", "\"fangjia2019_清洗.csv\"", ",sep=", "','", ",encoding=", "'utf_8_sig'", ")\n", "\n", "怎么可以把横杠去除，我只会删除空值"]], "Tag": "算法设计"}
{"Answer": "参照网上的这个解决方案：http://zhidao.baidu.com/link?url=bLoKrFv9OfTzkqeQVzK5JsMOYXJWxzBN3U_Ca9KUGj1hxK1CMwirBkuG8_MbvyP0qIZRAjntyWeZxsffU_SRq-8iwzrprxBCNBoDHEV4cEy", "Konwledge_Point": "应对NP完全问题", "Question": ["flash air NativeProcess 相关问题", ["先附上源码", "\nimport flash.desktop.NativeApplication;", "\nimport flash.desktop.NativeProcess;", "\nimport flash.desktop.NativeProcessStartupInfo;", "\nimport flash.filesystem.File;", "\nimport flash.events.MouseEvent;", "\n\n", "var process:NativeProcess = new NativeProcess;", "\nNativeApplication.nativeApplication.autoExit = true;", "\n\n", "var file:File = new File;", "\nfile = file.resolvePath(\"C:/Windows/System32/cmd.exe\");", "\n\n", "var processArg:Vector. = new Vector.();", "\nprocessArg.push(\"/c\");", "\nprocessArg.push(\"start C:/Windows/System32/osk.exe\");", "\n\n", "var npsi:NativeProcessStartupInfo = new NativeProcessStartupInfo();", "\nnpsi.executable = file;", "\nnpsi.arguments = processArg;", "\n\n", "stop();", "\n\n", "stage.addEventListener(MouseEvent.CLICK, click_handler );", "\n\n", "function click_handler( e : MouseEvent ) : void", "\n{", "\n    if( process.running )", "\n    {", "\n        return;", "\n    }", "\n\n", "process.start(npsi);\n", "\n\n", "}", "\n\n", "这段源码在flash编译器里调试运行的时候没有任何问题，点击舞台可以弹出系统软键盘，但是很奇怪的是我发不成exe安装包后，点击安装，然后运行程序，点击应用就调不出软键盘了；   Air 3.2，配置文件中 desktop extendedDesktop已添加"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;shape是数组的属性&amp;#xff0c;不能对其赋值——即便可以&amp;#xff0c;对于24个元素的数组&amp;#xff0c;怎么可以变成3行2列呢&amp;#xff1f;想要改变数组的shape&amp;#xff0c;请使用resize函数。resize和reshape的区别在于&amp;#xff0c;前者改变了数组的shape但没有返回值&amp;#xff0c;后者不会改变数组的shape但返回一个新的视图。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;import numpy as np\nt &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.arange&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;)\nt&lt;span class=\"hljs-selector-class\"&gt;.shape&lt;/span&gt;\n(&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;,)\n&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; t&lt;span class=\"hljs-selector-class\"&gt;.reshape&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;)\n&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.shape&lt;/span&gt;\n(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;)\nt&lt;span class=\"hljs-selector-class\"&gt;.shape&lt;/span&gt;\n(&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;,)\nt&lt;span class=\"hljs-selector-class\"&gt;.resize&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;)\nt&lt;span class=\"hljs-selector-class\"&gt;.shape&lt;/span&gt;\n(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python3关于矩阵的问题", ["import numpy as np ", "\n", "list=", "[[1,2]", ",", "[3,4]", ",", "[5,6]", "] \nt=np", ".array", "(list)\n", "print", "(t)", "\nt=np", ".arange", "(", "24", ")", ".reshape", "(", "4", ",", "6", ")\n", "print", "(t)", "\n", "print", "(t.ndim)", "\n", "print", "(t.size)", "\n", "print", "(t.shape)", "\nt.shape=(", "3", ",", "2", ")\n", "print", "(t)", "\n", "\n", "第九行改变矩阵的代码为什么显示错误？正确的方法是什么？"]], "Tag": "算法设计"}
{"Answer": "model.add(LSTM(50, input_shape=(train_x1.shape[1], train_x1.shape[2])))\r\n-&gt;\r\nmodel.add(LSTM(50, input_shape=(train_x1.shape[0],, train_x1.shape[1], train_x1.shape[2])))\r\n\r\n或者还有一个办法就是不用input_shape，而是指定下timesteps=1\r\n\r\n具体看下keras的文档。", "Konwledge_Point": "应对NP完全问题", "Question": ["LSTM输入数据格式问题", ["输入样本train_x1 标签train_y1 ", "\n样本与标签都是（20000，10）", "\n然后我reshape变成三维（20000，1，10）报错 求该如何修改格式", "\n输入十个数值，输出十个数值。", "\n\n", "train_x1 = np.reshape(train_x1, (train_x1.shape[0],1，train_x1.shape[1]))", "\ntrain_y1 = np.reshape(train_y1, (train_y1.shape[0],1，train_y1.shape[1]))", "\n\n", "model = Sequential()", "\n\n", "model.add(LSTM(50, input_shape=(train_x1.shape[1], train_x1.shape[2])))", "\n\n", "model.add(Dense(10))", "\n\n", "model.compile(loss='mse', optimizer='adam')", "\n\n", "model.fit(train_x1, train_y1, nb_epoch = 300, batch_size = 10)", "\n\n", "model.save_weights('LSTM.model')"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你在 ax.plot_surface(X, Y, Z, rstride&amp;#61;1, cstride&amp;#61;1, cmap&amp;#61;plt.get_cmap(&amp;#39;rainbow&amp;#39;)) 前面加上一句&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attr\"&gt;ax&lt;/span&gt;&amp;#61;plt.axes(projection&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;3d&amp;#39;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;或者是加&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attr\"&gt;ax&lt;/span&gt; &amp;#61; fig.gca(projection&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;3d&amp;#39;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的问题：我想问一下 为什么我的电脑不会显示出3d图形", ["我想问一下 为什么我的电脑不会显示出3d图形，只有空白", "\n", "\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = Axes3D(fig)\n# ", "X", ", ", "Y", " value\n", "X", " = np.arange(", "-4", ", ", "4", ", ", "0", ".25", ")\n", "Y", " = np.arange(", "-4", ", ", "4", ", ", "0", ".25", ")\n", "X", ", ", "Y", " = np.meshgrid(", "X", ", ", "Y", ")\n", "R", " = np.sqrt(", "X", " ** ", "2", " + ", "Y", " ** ", "2", ")\n# height value\n", "Z", " = np.sin(", "R", ")\n\nax.plot_surface(", "X", ", ", "Y", ", ", "Z", ", rstride=", "1", ", cstride=", "1", ", cmap=plt.get_cmap(", "'rainbow'", "))\nax.contourf(", "X", ", ", "Y", ", ", "Z", ", zdir=", "'z'", ", offset=", "-2", ", cmap=plt.get_cmap(", "'rainbow'", "))\n#zdir 等高线沿z轴 offset 将等高线图放到沿该轴距离为", "-2", "的面上\nax.set_zlim(", "-2", ", ", "2", ")\n\nplt.show()\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;使用az的plot_trace方法&amp;#xff1a;&lt;br /&gt;import arviz as az&lt;br /&gt;...&lt;br /&gt;with basic_model:&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    az.plot_trace(trace)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    display(az.summary(trace, round_to&amp;#61;2))&lt;/span&gt;&lt;br /&gt;参考文档&lt;br /&gt;&lt;a href=\"https://docs.pymc.io/en/v3/pymc-examples/examples/getting_started.html\" id=\"textarea_1647013253443_1647013740890_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://docs.pymc.io/en/v3/pymc-examples/examples/getting_started.html&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;参考如下可完整运行代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; arviz as az\n&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; matplotlib.pyplot as plt\n&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; numpy as np\n&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; pymc3 as pm\nfrom IPython.display &lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; display\nprint(f&lt;span class=\"hljs-string\"&gt;&amp;#34;Running on PyMC3 v{pm.__version__}&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-attr\"&gt;RANDOM_SEED&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;8927&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;rng&lt;/span&gt; &amp;#61; np.random.default_rng(RANDOM_SEED)\naz.style.use(&lt;span class=\"hljs-string\"&gt;&amp;#34;arviz-darkgrid&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-comment\"&gt;# True parameter values&lt;/span&gt;\nalpha, &lt;span class=\"hljs-attr\"&gt;sigma&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;beta&lt;/span&gt; &amp;#61; [&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2.5&lt;/span&gt;]\n\n&lt;span class=\"hljs-comment\"&gt;# Size of dataset&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;size&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# Predictor variable&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;X1&lt;/span&gt; &amp;#61; np.random.randn(size)\n&lt;span class=\"hljs-attr\"&gt;X2&lt;/span&gt; &amp;#61; np.random.randn(size) * &lt;span class=\"hljs-number\"&gt;0.2&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# Simulate outcome variable&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;Y&lt;/span&gt; &amp;#61; alpha &amp;#43; beta[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] * X1 &amp;#43; beta[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] * X2 &amp;#43; rng.normal(&lt;span class=\"hljs-attr\"&gt;size&amp;#61;size)&lt;/span&gt; * sigma\n&lt;span class=\"hljs-attr\"&gt;basic_model&lt;/span&gt; &amp;#61; pm.Model()\n\n&lt;span class=\"hljs-keyword\"&gt;with&lt;/span&gt; basic_model:\n\n    &lt;span class=\"hljs-comment\"&gt;# Priors for unknown model parameters&lt;/span&gt;\n    &lt;span class=\"hljs-attr\"&gt;alpha&lt;/span&gt; &amp;#61; pm.Normal(&lt;span class=\"hljs-string\"&gt;&amp;#34;alpha&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;mu&amp;#61;0,&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;sigma&amp;#61;10)&lt;/span&gt;\n    &lt;span class=\"hljs-attr\"&gt;beta&lt;/span&gt; &amp;#61; pm.Normal(&lt;span class=\"hljs-string\"&gt;&amp;#34;beta&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;mu&amp;#61;0,&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;sigma&amp;#61;10,&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;shape&amp;#61;2)&lt;/span&gt;\n    &lt;span class=\"hljs-attr\"&gt;sigma&lt;/span&gt; &amp;#61; pm.HalfNormal(&lt;span class=\"hljs-string\"&gt;&amp;#34;sigma&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;sigma&amp;#61;1)&lt;/span&gt;\n\n    &lt;span class=\"hljs-comment\"&gt;# Expected value of outcome&lt;/span&gt;\n    &lt;span class=\"hljs-attr\"&gt;mu&lt;/span&gt; &amp;#61; alpha &amp;#43; beta[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] * X1 &amp;#43; beta[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] * X2\n\n    &lt;span class=\"hljs-comment\"&gt;# Likelihood (sampling distribution) of observations&lt;/span&gt;\n    &lt;span class=\"hljs-attr\"&gt;Y_obs&lt;/span&gt; &amp;#61; pm.Normal(&lt;span class=\"hljs-string\"&gt;&amp;#34;Y_obs&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;mu&amp;#61;mu,&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;sigma&amp;#61;sigma,&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;observed&amp;#61;Y)&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# By default,BFGS,method&amp;#61;&amp;#34;powell&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;map_estimate&lt;/span&gt; &amp;#61; pm.find_MAP(&lt;span class=\"hljs-attr\"&gt;model&amp;#61;basic_model,&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;method&amp;#61;&amp;#34;powell&amp;#34;)&lt;/span&gt;\nprint(map_estimate)\n&lt;span class=\"hljs-keyword\"&gt;with&lt;/span&gt; basic_model:\n    &lt;span class=\"hljs-comment\"&gt;# draw 500 posterior samples&lt;/span&gt;\n    &lt;span class=\"hljs-attr\"&gt;trace&lt;/span&gt; &amp;#61; pm.sample(&lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;return_inferencedata&amp;#61;False)&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;with&lt;/span&gt; basic_model:\n    &lt;span class=\"hljs-comment\"&gt;# instantiate sampler&lt;/span&gt;\n    &lt;span class=\"hljs-attr\"&gt;step&lt;/span&gt; &amp;#61; pm.Slice()\n    &lt;span class=\"hljs-attr\"&gt;trace&lt;/span&gt; &amp;#61; pm.sample(&lt;span class=\"hljs-number\"&gt;5000&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;step&amp;#61;step,&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;return_inferencedata&amp;#61;False)&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;with&lt;/span&gt; basic_model:\n    az.plot_trace(trace)\n    display(az.summary(trace, &lt;span class=\"hljs-attr\"&gt;round_to&amp;#61;2))&lt;/span&gt;\nplt.show()\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何使用pymc3时，pm.traceplot(trace)出现问题？(语言-python)", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "import numpy as np", "import pymc3 as pm", "import matplotlib.pyplot as plt", "from mpl_toolkits.mplot3d import Axes3D", "from scipy import optimize", "import sys", "\n", "def main_1():", "    # 设置随机数种子", "    np.random.seed(123)", "\n", "alpha", " = ", "1", "\n", "sigma", " = ", "1", "\n", "beta", " = [", "1", ", ", "2.5", "]\n\n", "N", " = ", "100", "\n\n", "X1", " = np.random.randn(N)\n", "X2", " = np.random.randn(N)\n\n", "Y", " = alpha + beta[", "0", "] * X1 + beta[", "1", "] * X2 + np.random.randn(N) * sigma\n\n\n\n", "basic_model", " = pm.Model()\n", "with", " basic_model:\n    ", "alpha", " = pm.Normal('alpha', ", "mu=0,", " ", "sd=10)", "\n    ", "beta", " = pm.Normal('beta', ", "mu=0,", " ", "sd=10,", " ", "shape=2)", "\n    ", "sigma", " = pm.HalfNormal('sigma', ", "sd=1)", "\n\n    ", "mu", " = alpha + beta[", "0", "] * X1 + beta[", "1", "] * X2\n\n    ", "Y_obs", " = pm.Normal('Y_obs', ", "mu=mu,", " ", "sd=sigma,", " ", "observed=Y)", "\n\n", "with", " basic_model:\n    ", "# 用MAP获得初始点", "\n    ", "start", " = pm.find_MAP(", "method='BFGS')", "\n\n    ", "# 实例化采样器", "\n    ", "step", " = pm.Slice(", "vars=[sigma])", "\n\n    ", "# 对后验分布进行5000次采样", "\n    ", "trace", " = pm.sample(", "5000", ", ", "step=step,", " ", "start=start)", "\n\npm.traceplot(trace)\n", "\n", "if ", "name", " == '", "main", "':", "    sys.exit(main_1())", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;numpy没有repeats的属性&amp;#xff0c;你是不是想用repeat属性呀&amp;#xff1f;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n&lt;span class=\"hljs-attribute\"&gt;arr71&lt;/span&gt; &amp;#61; np.array([&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;065&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;148&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;217&lt;/span&gt;, -&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;126&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;089&lt;/span&gt;])\n&lt;span class=\"hljs-attribute\"&gt;arr72&lt;/span&gt; &amp;#61; np.array([&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;23&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;])\n&lt;span class=\"hljs-attribute\"&gt;arr73&lt;/span&gt; &amp;#61; np.dot(arr71, arr72)\n&lt;span class=\"hljs-attribute\"&gt;arr74&lt;/span&gt; &amp;#61; np.repeat(arr73,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(arr74)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python 矩阵的repeat问题", ["要用Repeat ()替代Numpy.dot()，我写的代码报错没看懂", "我写的是：", "\n", "import", " numpy as np\n", "arr71", " = np.array([", "0", ".", "065", ", ", "0", ".", "148", ", ", "0", ".", "217", ", -", "0", ".", "126", ", ", "0", ".", "089", "])\n", "arr72", " = np.array([", "0", ".", "15", ", ", "0", ".", "30", ", ", "0", ".", "22", ", ", "0", ".", "23", ", ", "0", ".", "10", "])\n", "arr73", " = np.dot(arr71, arr72)\n", "arr74", " = np.repeats(arr73)\n", "print", "(arr74)\n", "\n", "但是arr74出现报错，显示的是这个：", "\n", "---------------------------------------------------------------------------", "\nAttributeError                            Traceback (most recent ", "call", " last)\n~\\AppData\\", "Local", "\\", "Temp", "/ipykernel_150896/", "859011211.", "py ", "in", " <module>\n      ", "1", " # d. ", "Write", " your code here\n", "----> 2 arr74 = np.repeats(arr73)", "\n      ", "3", " print(arr74)\n\nE:\\python\\lib\\site-packages\\numpy\\__init__.py ", "in", " __getattr__(attr)\n    ", "301", "                 ", "return", " Tester\n    ", "302", " \n", "--> 303             raise AttributeError(\"module {!r} has no attribute \"", "\n    ", "304", "                                  \"{!r}\".format(__name__, attr))\n    ", "305", " \n\nAttributeError: module ", "'numpy'", " has ", "no", " ", "attribute", " ", "'repeats'", "\n\n", "\n", "请问怎么解决"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;from PIL import Image&lt;br /&gt;Image的首字母要大写&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["真不知道这种问题该怎么改", ["今天编代码 ，就很突然的出了问题 (Python)", "代码如下", "\n", "import", "  numpy ", "as", " np\n", "from", " ", "PIL", " ", "import", " image\n......\n", "im", " = np.dstack((r,g,b))\n", "\n", "这还不是完整的代码", "在这里的底下还有一个 ", "\n", "image", ".", "show", "()\n", "\n", "不知道怎么办，加了一个image.show()运行出错", "\n", "Importerror : cannot ", "import", " ", "name", " ", "'image'", "  ", "from", " ", "'PIL'", "\n", "\n", "看代码之后发现", "有了这行代码'image'不属于模块！", "没有这行代码'image'属于模块！", "真的求解决办法"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;“Devil组”引证GPT后的撰写&amp;#xff1a;&lt;/p&gt;\n&lt;ul&gt;&lt;li&gt;用Matplotlib中的子图&amp;#xff08;subplot&amp;#xff09;功能。在这种情况下&amp;#xff0c;可以创建一个具有单个图形的子图网格&amp;#xff0c;然后将所有数据绘制在同一个网格中。可以使用该subplot()函数定义子图网格&amp;#xff0c;以及其他Matplotlib函数来绘制图形。&lt;/li&gt;&lt;/ul&gt;\n&lt;p&gt;下面是示例代码&amp;#xff0c;其中假设数据存储在三个Numpy数组strike&amp;#xff0c;dip和rake中&amp;#xff0c;每个数组包含多个值&amp;#xff0c;希望将它们绘制在同一张图上。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import matplotlib.pyplot as plt\nimport numpy as np\n\n&lt;span class=\"hljs-comment\"&gt;# 创建一个具有单个图形的子图网格&lt;/span&gt;\nfig, ax &amp;#61; plt.subplots()\n\n&lt;span class=\"hljs-comment\"&gt;# 调用函数以获取数据&lt;/span&gt;\nn_1 &amp;#61; np.zeros([np.size(strike),3])\nu_1 &amp;#61; np.zeros([np.size(strike),3])\n&lt;span class=\"hljs-comment\"&gt;# ... 其他变量的计算&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 绘制数据&lt;/span&gt;\nax.scatter(x_values, y_values, &lt;span class=\"hljs-attribute\"&gt;label&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;data1&amp;#39;&lt;/span&gt;)\nax.scatter(x_values, y_values, &lt;span class=\"hljs-attribute\"&gt;label&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;data2&amp;#39;&lt;/span&gt;)\nax.scatter(x_values, y_values, &lt;span class=\"hljs-attribute\"&gt;label&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;data3&amp;#39;&lt;/span&gt;)\n\n&lt;span class=\"hljs-comment\"&gt;# 添加标签和图例&lt;/span&gt;\nax.set_xlabel(&lt;span class=\"hljs-string\"&gt;&amp;#39;x label&amp;#39;&lt;/span&gt;)\nax.set_ylabel(&lt;span class=\"hljs-string\"&gt;&amp;#39;y label&amp;#39;&lt;/span&gt;)\nax.legend()\n\n&lt;span class=\"hljs-comment\"&gt;# 显示图形&lt;/span&gt;\nplt.show()\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python如何将所有数据画在一张图上", ["这是定义的函数（这个函数是没问题的，一个软件包里的，但是我需要用他画图）", "\n", "def", " plot_P_T_axes(strike,dip,rake):\n    \n    ", "import", " matplotlib.pyplot as plt\n    ", "import", " numpy as np\n    \n    ", "n_1", " = np.zeros([np.size(strike),", "3", "])\n    ", "u_1", " = np.zeros([np.size(strike),", "3", "])\n    \n    ", "n_1", "[:,", "0", "] = -np.sin(dip*np.pi/", "180", ")*np.sin(strike*np.pi/", "180", ")\n    ", "n_1", "[:,", "1", "] =  np.sin(dip*np.pi/", "180", ")*np.cos(strike*np.pi/", "180", ")\n    ", "n_1", "[:,", "2", "] = -np.cos(dip*np.pi/", "180", ")\n    \n    ", "u_1", "[:,", "0", "] =  np.cos(rake*np.pi/", "180", ")*np.cos(strike*np.pi/", "180", ") + np.cos(dip*np.pi/", "180", ")*np.sin(rake*np.pi/", "180", ")*np.sin(strike*np.pi/", "180", ")\n    ", "u_1", "[:,", "1", "] =  np.cos(rake*np.pi/", "180", ")*np.sin(strike*np.pi/", "180", ") - np.cos(dip*np.pi/", "180", ")*np.sin(rake*np.pi/", "180", ")*np.cos(strike*np.pi/", "180", ")\n    ", "u_1", "[:,", "2", "] = -np.sin(rake*np.pi/", "180", ")*np.sin(dip*np.pi/", "180", ")\n    \n    ", "N", " = np.size(strike)\n    ", "#--------------------------------------------------------------------------", "\n    ", "# lower hemisphere equal-area projection", "\n    ", "#--------------------------------------------------------------------------", "\n    ", "projection", " = -", "1", "  \n\n    \n    ", "#--------------------------------------------------------------------------", "\n    ", "# P/T axes", "\n    ", "#--------------------------------------------------------------------------", "\n    ", "P_osa", " = np.zeros([N,", "3", "])\n    ", "T_osa", " = np.zeros([N,", "3", "])\n    \n    ", "P_azimuth", " = np.zeros(N)\n    ", "T_azimuth", " = np.zeros(N)\n    \n    ", "P_theta", " = np.zeros(N)\n    ", "T_theta", " = np.zeros(N)\n    \n    ", "P_x", " = np.zeros(N)\n    ", "P_y", " = np.zeros(N)\n    ", "T_x", " = np.zeros(N)\n    ", "T_y", " = np.zeros(N)\n    \n    ", "for", " i in range(N):\n        ", "P_osa", "[i,:] = (n_1[i,:]-u_1[i,:])/np.linalg.norm(n_1[i,:]-u_1[i,:],", "2", ")\n        ", "T_osa", "[i,:] = (n_1[i,:]+u_1[i,:])/np.linalg.norm(n_1[i,:]+u_1[i,:],", "2", ")\n        \n        ", "if", " (P_osa[i,", "2", "]>", "0", "): P_osa[i,", "0", "]=-P_osa[i,", "0", "]; P_osa[i,", "1", "]=-P_osa[i,", "1", "]; P_osa[i,", "2", "]=-P_osa[i,", "2", "]; \n        ", "if", " (T_osa[i,", "2", "]>", "0", "): T_osa[i,", "0", "]=-T_osa[i,", "0", "]; T_osa[i,", "1", "]=-T_osa[i,", "1", "]; T_osa[i,", "2", "]=-T_osa[i,", "2", "]; \n    \n        ", "fi", " = np.arctan(np.abs(P_osa[i,", "0", "]/P_osa[i,", "1", "]))*", "180", "/np.pi\n    \n        ", "if", " (P_osa[i,", "0", "]>", "0", " and P_osa[i,", "1", "]>", "0", "): P_azimuth[i] = fi;       # ", "1", ". kvadrant\n        ", "if", " (P_osa[i,", "0", "]>", "0", " and P_osa[i,", "1", "]<", "0", "): P_azimuth[i] = ", "180", "-fi;   # ", "2", ". kvadrant\n        ", "if", " (P_osa[i,", "0", "]<", "0", " and P_osa[i,", "1", "]<", "0", "): P_azimuth[i] = fi+", "180", ";   # ", "3", ". kvadrant\n        ", "if", " (P_osa[i,", "0", "]<", "0", " and P_osa[i,", "1", "]>", "0", "): P_azimuth[i] = ", "360", "-fi;   # ", "4", ". kvadrant\n    \n        ", "P_theta", "[i] = np.arccos(np.abs(P_osa[i,", "2", "]))*", "180", "/np.pi\n    \n        ", "fi", " = np.arctan(np.abs(T_osa[i,", "0", "]/T_osa[i,", "1", "]))*", "180", "/np.pi\n        \n        ", "if", " (T_osa[i,", "0", "]>", "0", " and T_osa[i,", "1", "]>", "0", "): T_azimuth[i] = fi;       # ", "1", ". kvadrant\n        ", "if", " (T_osa[i,", "0", "]>", "0", " and T_osa[i,", "1", "]<", "0", "): T_azimuth[i] = ", "180", "-fi;   # ", "2", ". kvadrant\n        ", "if", " (T_osa[i,", "0", "]<", "0", " and T_osa[i,", "1", "]<", "0", "): T_azimuth[i] = fi+", "180", ";   # ", "3", ". kvadrant\n        ", "if", " (T_osa[i,", "0", "]<", "0", " and T_osa[i,", "1", "]>", "0", "): T_azimuth[i] = ", "360", "-fi;   # ", "4", ". kvadrant\n            \n        ", "T_theta", "[i] = np.arccos(np.abs(T_osa[i,", "2", "]))*", "180", "/np.pi\n            \n        ", "P_x", "[i] = np.sqrt(", "2", ".)*projection*np.sin(P_theta[i]*np.pi/", "360", ")*np.sin(P_azimuth[i]*np.pi/", "180", ")\n        ", "P_y", "[i] = np.sqrt(", "2", ".)*projection*np.sin(P_theta[i]*np.pi/", "360", ")*np.cos(P_azimuth[i]*np.pi/", "180", ")\n    \n        ", "T_x", "[i] = np.sqrt(", "2", ".)*projection*np.sin(T_theta[i]*np.pi/", "360", ")*np.sin(T_azimuth[i]*np.pi/", "180", ")\n        ", "T_y", "[i] = np.sqrt(", "2", ".)*projection*np.sin(T_theta[i]*np.pi/", "360", ")*np.cos(T_azimuth[i]*np.pi/", "180", ")\n    \n    \n    ", "plt", ".plot(P_y,P_x,'ro', markeredgecolor='r', markerfacecolor='none', markersize=", "8", ", markeredgewidth=", "1", ".", "5", ")\n    ", "plt", ".plot(T_y,T_x,'b+', markersize=", "8", ", markeredgewidth=", "1", ".", "5", ")\n\n", "\n", "但是只使用这个函数画出来是直角坐标：", "\n", "\n", "然后在函数定义中加入下面代码", "\n", "    ", "#--------------------------------------------------------------------------", "\n    ", "# boundary circle and the centre of the circle", "\n    ", "#--------------------------------------------------------------------------", "\n    ", "fi", " = np.arange(", "0", ",", "360", ", ", "0", ".", "1", ")\n    ", "plt", ".plot(np.cos(fi*np.pi/", "180", ".),np.sin(fi*np.pi/", "180", ".),'k-', linewidth = ", "2", ".", "0", ")\n    ", "plt", ".plot(", "0", ",", "0", ",'k+', markersize = ", "10", ");\n\n", "\n", "图片变成了这样", "\n", "再在函数定义中加入代码：", "\n", "    ", "#--------------------------------------------------------------------------", "\n    ", "# plotting the stress directions in the focal sphere", "\n    ", "#--------------------------------------------------------------------------", "\n    ", "fig", ", ax = plt.subplots()\n    ", "ax", ".set_title('Principal stress and P/T axes',fontsize = ", "16", ")\n    \n    ", "ax", ".axis('equal')\n    ", "ax", ".axis([-", "1", ".", "05", ",  ", "1", ".", "70", ", -", "1", ".", "05", ", ", "1", ".", "05", "])\n    ", "ax", ".axis('", "off", "')\n    ", "#ax.axis()", "\n", "\n", "\n", "变成了一堆这样的图片，但是这个图片的样子是我要的，只是变成一组数据一张图了，要怎么让所有数据都在一张图上呢", "\n", "调用函数的代码如下：", "\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " plot_stress ", "as", " plots\n", "from", " openpyxl ", "import", " load_workbook\nwb = load_workbook(", "r'satsi_output.xlsx'", ") ", "# 获取已存在的工作簿", "\nws = wb[", "'DC_50'", "]", "# 获取工作表", "\n", "for", " i ", "in", " ", "range", "(", "2", ",", "30", "):\n    strike = ws.cell(row=i, column=", "39", ").value\n    dip = ws.cell(row=i, column=", "40", ").value\n    rake = ws.cell(row=i, column=", "41", ").value\n    plots.plot_P_T_axes(strike, dip, rake)\nplt.show()\n\n"]], "Tag": "算法设计"}
{"Answer": "因为这是在循环内部创建的变量，作用域仅限于本轮循环，把它放在  i=0.8 的前面，while 循环外面试试。", "Konwledge_Point": "应对NP完全问题", "Question": ["python创建创建数组的问题", ["i = 0.8", "\nwhile i <2:", "\n    temp= []", "\n    d = np.random.choice([3,i],size = 10, replace=True,p =[0.5,0.5])", "\n    temp.append(d)", "\n    i+= 0.1", "\n\n", "我想要把每次循环创建的数组纵向合并，为什么这个temp只有一个数组出来， 求解答！"]], "Tag": "算法设计"}
{"Answer": "![图片说明](https://img-ask.csdn.net/upload/201905/09/1557370643_321074.png)", "Konwledge_Point": "应对NP完全问题", "Question": ["小白问题--在python中for循环结束位置在哪里呢？", ["不确定python中for循环每次的结束位置。和C语言不一样，python的for循环没有括号（）之类的约束，怎么看他的边界在哪里吖？是看他代码开头的空格是否与for对齐吗？", "\n\n", "size = 100\ntheta0Vals = np.linspace(-10, 10,  size)  \n# 前两个参数分别是数列的开头与结尾。第三个参数，表示数列的元素个数\ntheta1Vals = np.linspace(-1, 4, size)   \nJVals = np.zeros((size, size))\nfor i in range(size):\n    for j in range(size):\n        col = np.array([ [theta0Vals[i]], [theta1Vals[j]] ]).reshape(-1,1) \n                #不知道z的shape属性，想让z变成只有一列，行数管，\n                #通过`z.reshape(-1,1)，Numpy自动计算出有16行\n        JVals[i,j] = compute_cost(X, y, col)\n\ntheta0Vals, theta1Vals = np.meshgrid(theta0Vals,  theta1Vals)  \n# 产生一个以向量x为行，向量y为列的矩阵，\n#X、Y必定是行数、列数相等的，且X、Y的行数都等\n# 于输入参数y中元素的总个数，X、Y的列数都等于输入参数x中元素总个数；形成网格\nJVals = JVals.T\nprint (JVals.shape, JVals[0, 0], JVals[1, 1] ) # test correct\n\nfig = plt.figure()\nax = Axes3D(fig)\nax.plot_surface(theta0Vals, theta1Vals, JVals)     # 绘制一个三维曲面\nax.set_xlabel(r'$\\theta_0$')\nax.set_ylabel(r'$\\theta_1$')\nax.set_zlabel(r'$J(\\theta)$')\nplt.show()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以将aggfunc参数写成函数的列表形式&amp;#xff0c; aggfunc&amp;#61;[&amp;#39;count&amp;#39;,np.mean,np.sum],参考&lt;a href=\"https://www.cnblogs.com/Yanjy-OnlyOne/p/11195621.html\"&gt;https://www.cnblogs.com/Yanjy-OnlyOne/p/11195621.html&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pandas pivot_table aggfunc问题", ["请教大佬们一个问题pandas pivot_table aggfunc(df,values=［value］index=［u\"test\"］,columns=［item］,aggfunc=\"count\")", "我想计算value的平均数，可是代入np.mean始终不可以，但是count记数的始终可以很奇怪"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff0c;您可以尝试使用torch.where()函数&amp;#xff0c;而不是用np.where()函数&amp;#xff0c;这可以使您在GPU上并行化处理&amp;#xff0c;从而提高您的计算速度。具体来说&amp;#xff0c;您可以使用torch.where()函数来创建一个bool类型的掩码张量&amp;#xff0c;该张量的形状与输入张量相同&amp;#xff0c;但是只有掩码中的值为True时&amp;#xff0c;才会计算损失。这样就不必将掩码扁平化并使用for循环逐个读取坐标&amp;#xff0c;而是可以使用张量的广播机制&amp;#xff0c;使每个掩码元素与相应的预测值和目标值相匹配&amp;#xff0c;从而并行计算损失。&lt;/p&gt;\n&lt;p&gt;下面是使用torch.where()函数修改您的smooth_l1函数的示例&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;def smooth_l1(y_pred, y, mask, &lt;span class=\"hljs-built_in\"&gt;beta&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    loss_item &amp;#61; torch.&lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(y_pred - y)\n    loss_item &amp;#61; torch.where(loss_item &amp;lt; &lt;span class=\"hljs-built_in\"&gt;beta&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0.5&lt;/span&gt; * torch.pow(loss_item, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) / &lt;span class=\"hljs-built_in\"&gt;beta&lt;/span&gt;, loss_item - &lt;span class=\"hljs-number\"&gt;0.5&lt;/span&gt; * &lt;span class=\"hljs-built_in\"&gt;beta&lt;/span&gt;)\n    loss &amp;#61; torch.&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(loss_item * mask) / torch.&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(mask)\n    &lt;span class=\"hljs-built_in\"&gt;return&lt;/span&gt; loss\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在这个版本的smooth_l1函数中&amp;#xff0c;我们首先计算了预测值与目标值之间的差异&amp;#xff0c;然后使用torch.where()函数来计算smooth L1损失。最后&amp;#xff0c;我们将掩码应用于损失&amp;#xff0c;并在返回之前求出平均值。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["用自写的loss计算很慢的问题", ["背景：一个图像预测任务，图像并不是指常见的jpg等格式的图片，其实就是网格内每个像素点有数值的那种类似于热点图的图像，如下图", "\n", "\n", "问题：如上图所示，一张图里其实有很大一片区域是0值。但搭的网络输入输出是整图，维度为（32，224，224）。最近意识到计算loss不可以将整图放入计算，只想要关注body内有值的区域，所以就用上自写的loss function，出现了", "计算极其缓慢", "的现象。", "——", "train预测过程：x为输入，y为GT，y_pred为预测结果，b是与y维度相同的、只有0或1的mask，b==1就是body内区域。我的做法是把b展平成一维，再用np.where读取b==1的坐标到BODY，同时y，y_pred也展平成一维。放入自写的smooth_L1计算loss", "\n", "        x = np", ".array", "(inputList)\n        y = np", ".array", "(labelList)\n        ", "b", " = np", ".array", "(bodyList)\n        ", "b", " = ", "b", ".flatten", "()\n        BODY = np", ".where", "(", "b", " == ", "1", ")\n        BODY = np", ".array", "(BODY)\n        BODY = BODY", ".flatten", "()\n        x = np", ".float32", "(x)\n        y = np", ".float32", "(y)\n        x = torch", ".tensor", "(x)\n        y = torch", ".tensor", "(y)\n        BODY = torch", ".tensor", "(BODY)\n        x = x", ".to", "(device)\n        y = y", ".to", "(device)\n        BODY = BODY", ".to", "(device)\n        optimizer", ".zero_grad", "()\n        y_pred = model(x)\n        y_pred = y_pred", ".view", "(-", "1", ")\n        y = y", ".view", "(-", "1", ")\n        train_loss = smooth_l1(y_pred, y, BODY)\n        print(f", "\"第 {t + 1}/{epoch} epoch, 第 {i + 1}/{batch_train} batch, train_loss: {train_loss.item()}\"", ")\n        train_loss", ".backward", "()\n        optimizer", ".step", "()\n", "\n", "自写的loss：就是一个smoothL1 Loss，但是我只想计算body内区域。所以用了一个for循环读取mask里（也就是BODY里）存好的坐标。", "\n", "# 定义损失函数", "\ndef ", "smooth_item", "(x, ", "beta", "):\n    ", "if", " x < ", "beta", ":\n        loss_item = (", "0.5", "*torch.square(x))/", "beta", "\n    ", "else", ":\n        loss_item = x", "-0.5", "*", "beta", "\n    ", "return", " loss_item\ndef ", "smooth_l1", "(y_pred, y, mask, ", "beta", "=", "1", "):\n    n = ", "len", "(mask)\n    loss = ", "0", "\n    ", "for", " i in mask:\n        loss += smooth_item(torch.", "abs", "(y_pred[i]-y[i]), ", "beta", ")\n    return loss/n\n\n", "\n", "debug发现这样子计算loss好慢好慢，有什么方法优化吗？要说用GPU加速，但这样子一个个坐标读取再累加也不是一个并行过程呀"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;贴个代码更能准确定位问题&amp;#xff01;&lt;/p&gt;\n&lt;p&gt;没有传入self。类对象调用类内部函数时&amp;#xff0c;会自动传入self参数&amp;#xff0c;而代码中没有给self留位置&amp;#xff0c;所以就会报错了。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["使用预训练权重，运行predict.py出现问题怎么解决啊", ["发生异常: TypeError", "array", "() takes 1 positional argument but 2 were given", "  File \"G:\\maskrcnn\\faster-rcnn-pytorch-master\\frcnn.py\", line 118, in detect_image", "    photo = np.transpose(np.array(image,dtype = np.float32)/255, (2, 0, 1))", "  File \"G:\\maskrcnn\\faster-rcnn-pytorch-master\\predict.py\", line 53, in ", "    r_image = frcnn.detect_image(image)"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这段代码是用来找到a中最小的无重复元素。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;a&amp;#61;np.array([&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;])&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;b&amp;#61;np.unique(a,return_counts&amp;#61;&lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;b&lt;/span&gt;\n(array([1, 2, 3, 4, 5]), array([2, 1, 2, 2, 1], dtype&amp;#61;int64))\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;&lt;span class=\"hljs-built_in\"&gt;type&lt;/span&gt;(b[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]),&lt;span class=\"hljs-built_in\"&gt;type&lt;/span&gt;(b[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])&lt;/span&gt;\n(&amp;lt;class &amp;#39;numpy.ndarray&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;numpy.ndarray&amp;#39;&amp;gt;)\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;&lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;(b[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]).index(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;/span&gt;\n1\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;b[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][&lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;(b[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]).index(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)]&lt;/span&gt;\n2\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;首先&amp;#xff0c;np.unique用来去掉a中所有的重复元素&amp;#xff0c;并从小到大排序&amp;#xff0c;也就是b[0]。同时return_counts参数设为True&amp;#xff0c;则会统计b[0]中每个元素重复了几次。&lt;br /&gt;然后&amp;#xff0c;list(b[1]).index(1)把b[1]转换成list列表&amp;#xff0c;用list的index方法找出b[1]中第一个值为1的元素的下标1&amp;#xff0c;这里值1表示没有重复&amp;#xff0c;下标1对应b[0][1]&amp;#xff0c;也就是2。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的问题，如何解决？(语言-python)", ["import", " numpy as np\n", "a", "=np.array([", "1", ",", "1", ",", "2", ",", "3", ",", "3", ",", "4", ",", "4", "])\n", "b", "=np.unique(a,return_counts=True)\n", "print", "(b[", "0", "][list(b[", "1", "]).index(", "1", ")])\n", "\n", "想问一下代码中print()里面的是怎么计算的。", "b[0][list(b[1]).index(1)]结果为什么是2，运算步骤是啥。"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;没有查到对应的files方法&amp;#xff0c;不知你要的是不是tofile()方法&lt;/li&gt;&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/280666617966157.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的问题：data.files", ["#建立模型", "\n", "import", " numpy ", "as", " np\n", "import", " tensorflow ", "as", " tf\n", "#读取数据", "\ndata = np.load(", "'mnist.npz'", ")\ndata.files\ntrain_images, train_labels, test_images, test_labels = data[", "'x_train'", "], data[", "'y_train'", "], data[", "'x_test'", "],data[", "'y_test'", "]\n", "print", "(train_images.shape)\n", "print", "(train_labels.shape)\n", "print", "(test_images.shape)\n", "print", "(test_labels.shape)\n", "#交叉熵", "\ntarget_y = np.array([", "1", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", "])\npredicted_y1 = np.array([", "0.4", ", ", "0.5", ", ", "0.1", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", "])\npredicted_y2 = np.array([", "0.1", ", ", "0.2", ", ", "0.7", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", "])\n-np.", "sum", "( target_y * np.log(predicted_y1+", "0.0000001", "))\n-np.", "sum", "( target_y * np.log(predicted_y2+", "0.0000001", "))\n", "#搭建网络结构", "\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten(input_shape=(", "28", ",", "28", ")))\nmodel.add(tf.keras.layers.Dense(", "128", ", activation = ", "'relu'", "))\nmodel.add(tf.keras.layers.Dense(", "10", ", activation = ", "'softmax'", "))\n", "#编译模型", "\nmodel.", "compile", "(optimizer = ", "'adam'", ", loss = ", "'sparse_categorical_crossentropy'", ", metrics = [", "'accuracy'", "])\n", "#训练", "\nmodel.fit(train_images, train_labels, verbose = ", "1", ", epochs = ", "20", ", validation_data = (test_images,test_labels))\n", "#模型保存", "\nmodel.save(", "'model_mnist.h5'", ")\n", "#用模型进行预测", "\n", "import", " tensorflow ", "as", " tf\n", "import", " matplotlib.pyplot ", "as", " plt\nmodel = tf.keras.models.load_model(", "'model_mnist.h5'", ")\nmodel.summary()\n", "for", " i ", "in", " ", "range", "(", "30", "):\n    image = plt.imread(", "'testimages/'", " + ", "str", "(i)+ ", "'.jpg'", ")\n    image_new = image.reshape([", "1", ", ", "28", ", ", "28", "])\n    result = model.predict(image_new)[", "0", "].argmax()\n    ", "print", "(", "'The'", ", i + ", "1", ", ", "'th picture shows:'", ", result)\n\n\n", "\n", "\n", "这是为什么啊？怎么改啊？谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;a &amp;#61; np.array&amp;#xff0c;这不是都写对了吗&lt;br /&gt;b &amp;#61; np.arary&amp;#xff0c;这么明显的拼写错误&amp;#xff0c;错误信息都给你打印出来了&amp;#xff0c;你是对字母有多不敏感&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python代码运行错误", ["a = np.array([[80, 86],", "[82, 80],", "[85, 78],", "[90, 90],", "[86, 82],", "[82, 90],", "[78, 80],", "[92, 94]])", "b = np.arary([0.7],[0.3])", "np.matmul(a, b)", "np.dot(a,b)", "这段代码跑出来报错如下，请问是哪里出了问题：", "\n", "AttributeError                            Traceback (most recent call last)", " in ()", "      7 [78, 80],", "      8 [92, 94]])", " 9 b = np.arary([0.7],[0.3])", "     10 np.matmul(a, b)", "     11 np.dot(a,b)", "\n", "AttributeError: module 'numpy' has no attribute 'arary'"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;说实话没理解 &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python for 循环columns问题", ["我的数据是一个excel ，下表附我筛选目标字段数据，下图是我数据中要筛选的字段， 图为筛选条件", "\n", "\n", "\n", "问题相关代码，请勿粘贴截图 \n", "cabg", "=ss_name[", "'ASD'", "].tolist()\n", "print", "(cabg)\n", "while", " np.nan ", "in", " cabg:\n    cabg.", "remove", "(np.nan)\ngm = data[data[", "'SSJCZMC1'", "].str.replace(", "\".\"", ",", "\"\"", ").str.contains(", "'|'", ".join(cabg))]\ngm.", "columns", "=name.columns\ngm.to_excel(", "\"ASD.xlsx\"", ", ", "index", "=", "False", ")\n", "\n", "我的解答思路和尝试过的方法", "\n", "for", " i ", "in", " data.columns:\n    ", "ss", "=dbz_ss[i].tolist()\n    ", "while", " np.nan ", "in", " ss:\n        ss.", "remove", "(np.nan)\n    gm = data[data[", "'SSJCZMC1'", "].str.replace(", "\".\"", ",", "\"\"", ").str.contains(", "'|'", ".join(ss))]\n    gm.", "columns", "=name.columns\n    gm.to_excel(ss.xlsx, ", "index", "=", "False", ")\n\n", "\n", "运行结果及报错内容", "\n", "\n", "我想要达到的结果", "\n", "按照筛选条件得到各个名字的excel 表", "\n", "| SSJCZMC1 |", "| ------ | ------ |", "\n", "SSJCZMC1", "颈内静脉穿刺中心静脉置管术", "腹腔镜左半结肠切除术", "颈内静脉穿刺中心静脉置管术", "腹腔镜左半结肠切除术", "腹腔镜下胃病损切除术", "股静脉穿刺置管术", "经导管颅内动脉瘤栓塞术", "后入路玻璃体切割术", "纤维支气管镜检查伴肺泡灌洗术", "上颌骨病损切除术", "胃-十二指肠镜检查", "胸腔镜下肺叶切除术", "主动脉瓣机械瓣膜置换术", "全髋关节置换"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;已解决&amp;#xff0c;标签图没有读进去&amp;#xff0c;数据集的路径出错&amp;#xff0c;一定要检查好图片路径&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["TypeError: '>=' not supported between instances of 'NoneType' and 'float'", ["问题遇到的现象和发生背景", "\n", "在服务器用python3.7跑代码时报错", "\n", "问题相关代码，请勿粘贴截图", "\n", "\n", "def", " ", "own_loader", "(", "id", ", root", "):  ", "# 这里只导入了原始数据的，用的就是这个", "\n    img = cv2.imread(os.path.join(root, ", "'{}_sat.png'", ").", "format", "(", "id", "))\n    mask = cv2.imread(os.path.join(root + ", "'{}_mask.png'", ").", "format", "(", "id", "), cv2.IMREAD_GRAYSCALE)\n    mask = np.expand_dims(mask, axis=", "2", ")\n    ", "# img = np.array(img, np.float32).transpose(2,0,1)/255.0 * 3.2 - 1.6", "\n    ", "# mask = np.array(mask, np.float32).transpose(2,0,1)/255.0", "\n    mask[mask >= ", "0.5", "] = ", "1", "\n    mask[mask <= ", "0.5", "] = ", "0", "\n    img = np.array(img, np.float32).transpose(", "2", ", ", "0", ", ", "1", ")\n    mask = np.array(mask, np.float32).transpose(", "2", ", ", "0", ", ", "1", ")\n    ", "return", " img, mask\n\n", "class", " ", "ImageFolder", "(data.Dataset):\n\n    ", "def", " ", "__init__", "(", "self, trainlist, root", "):\n        self.ids = trainlist\n        ", "# self.loader = default_loader  #原始的", "\n        self.loader = own_loader  ", "# 用了自己的数据导入", "\n        self.root = root\n        ", "# self.trans = transforms.Compose([transforms.ToTensor()])", "\n        ", "# self.trans = transforms.Compose([transforms.ToTensor(),transforms.Normalize(mean=(0.5,0.5,0.5),std=(0.5,0.5,0.5))])", "\n\n    ", "def", " ", "__getitem__", "(", "self, index", "):\n        ", "id", " = ", "list", "(self.ids)[index]\n        img, mask = self.loader(", "id", ", self.root)\n        ", "# img = np.transpose(img, (1,2,0))", "\n        ", "# img = self.trans(img)", "\n        img = torch.Tensor(img)\n        mask = torch.Tensor(mask)\n        ", "return", " img, mask\n\n    ", "def", " ", "__len__", "(", "self", "):\n        ", "return", " ", "len", "(", "list", "(self.ids))\n\n", "\n", "运行结果及报错内容", "\n", "line 132, in own_loader", "    mask[mask >= 0.5] = 1", "TypeError: '>=' not supported between instances of 'NoneType' and 'float'", "\n", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;浮点数的一个普遍问题是它们并不能精确的表示十进制数。 并且&amp;#xff0c;即使是最简单的数学运算也会产生小的误差&amp;#xff0c;比如&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;a &amp;#61; &lt;span class=\"hljs-number\"&gt;4.2&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;b &amp;#61; &lt;span class=\"hljs-number\"&gt;2.1&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;a &amp;#43; b&lt;/span&gt;\n\n6.300000000000001\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中numpy有关问题，在for中用arange函数得到意外结果", ["python初学者，写的一段代码中用到了for i in np.arange(2.0, 2.4, 0.1)，发现i的值与预想的有偏差，试验后发现如下现象，求问为何会这样，如何解决？", "代码如下：", "\n", "a", " = np", ".arange", "(", "2.0", ", ", "2.4", ", ", "0.1", ")\n", "b", " = np", ".array", "(", "[2.0, 2.1, 2.2, 2.3]", ")\n", "print", "(a)", "\n", "print", "(b)", "\n", "print", "(a.tolist()", ")\n", "print", "(b.tolist()", ")\n", "\n", "结果如下："]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;只有aa.data[0]列表本是是内存地址不会变&amp;#xff0c;变得是内部元素的引用&amp;#xff0c;修改其中某一项元素的值&amp;#xff0c;或者添加几个元素&amp;#xff0c;不会改变其本身的地址&amp;#xff0c;只会改变其内部元素的地址引用&amp;#xff0c;但是如果对其进行重新赋值操作时&amp;#xff0c;就会给列表重新赋予一个地址&amp;#xff0c;来覆盖之前的地址这时列表地址会发生改变。其余的变量只是保存了一个引用&amp;#xff0c;并不是指值本身&amp;#xff0c;变量的每一次初始化&amp;#xff0c;都开辟了一个新的空间&amp;#xff0c;将新内容的地址赋值给变量&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于ndarray的问题", ["import numpy as np\naa=np", ".array", "(", "[1,2]", ")\naa", ".data", "\nOut", "[278]", ": <memory at ", "0", "x000001BED39961C0>\n", "id", "(aa[", "0", "])", "\nOut", "[279]", ": ", "1919105783888", "\n", "id", "(aa[", "0", "])", "\nOut", "[280]", ": ", "1919105781968", "\n", "id", "(aa.data[", "0", "])", "\nOut", "[281]", ": ", "140709382463232", "\n", "id", "(aa.data[", "0", "])", "\nOut", "[282]", ": ", "140709382463232", "\naa.__array_interface__", "[", "'data'", "]", "[0]", "\nOut", "[283]", ": ", "1919049863168", "\n", "\n", "我有3个问题：", "\n", "aa.data的值 0x000001BED39961C0是数据所在内存地址吗？", "为什么两次输出id(aa[0])的结果不一样，而同样两次输出id(aa.data[0])结果却是相同的？", "id(aa.data[0])和aa.", "array_interface", "['data'][0]的值为什么不一样？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你确定传进去的theta和X都是DataFrame类型吗&amp;#xff1f;这个错误说明两个数据里面至少有一个不是DataFrame类型&amp;#xff08;可能是ndarray&amp;#xff09;&amp;#xff0c;而且形状不同&amp;#xff0c;不能转换。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python矩阵计算问题", ["#在计算损失函数时，总是报错", "#已有：X 为（97, 2)的dataframe", "#y为（97，1）的dataframe", "#theta为（1，2）的dataframe", "\n", "#代码如下：", "\n", "def", " ", "Compute_cost", "(", "theta, X, y", "):\n    total_cost = (X*theta.T-y)**", "2", "\n    m = ", "len", "(y)\n    J = total_cost/(", "2", "*m)\n    ", "return", " J\n    \n\n", "\n", "print(", "Compute_cost(", "theta", ",X,", "y", ")", ")\n\n", "\n", "#运行结果及报错内容", "Unable to coerce to DataFrame, shape must be (97, 2): given (2, 1)", "\n", "#猜测可能是dataframe的type问题，用np.mat()转换theta 后问题依然存在"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;pip install --upgrade matplotlib&lt;br /&gt;升级或者降级matplotlib&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["jupyter notebook中的matplotlib导入问题", ["问题遇到的现象和发生背景", "\n", "在pycharm中可以正常导入matplotlib库，但是在jupyter中总显示导入错误，想问一下这个到底是咋回事，怎么解决", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "import pandas as pd", "import numpy as np", "import matplotlib.pyplot as plt", "from datetime import datetime", "\n", "运行结果及报错内容", "\n", "ModuleNotFoundError: No module named 'matplotlib.artist'"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;没问题啊&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;import numpy as np\n\n&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;281&lt;/span&gt;):\n    &lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(np&lt;span class=\"hljs-selector-class\"&gt;.array&lt;/span&gt;(&lt;span class=\"hljs-selector-attr\"&gt;[[[0]&lt;/span&gt;*&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;))\n\n&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.array&lt;/span&gt;(a)\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a.shape)&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].shape)&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;输出&amp;#xff1a;&lt;br /&gt;(281, 50, 50, 50)&lt;br /&gt;(50, 50, 50)&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["使用numpy.array把列表转换成数组的问题，求解答", ["#问题代码如下", "a = []", "for i in range(281):", "        a.append(一个(50 * 50 * 50)的numpy数组)", "a = np.array(a)", "#经过这个代码之后，a应该是一个(281 * 50 * 50 * 50)的numpy数组，但实际是一个(281, )的数组", "#当我把循环改成了28之后，得到的a是一个(28 * 50 * 50 * 50)的数组，就没有问题了", "#之前一直这么用的，不知道为什么281就出了问题，我实在不能理解，求佬们解答"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个不就是正确的吗?你可以看看这篇博客:&lt;a href=\"https://vimsky.com/examples/usage/python-numpy.take.html\" id=\"textarea_1658597948989_1658598440890_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;Python numpy.take用法及代码示例 - 纯净天空&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#numpy#的问题，如何解决？(语言-python)", ["import numpy as np", "x = np.array([[11, 12, 13, 14, 15],", "              [16, 17, 18, 19, 20],", "              [21, 22, 23, 24, 25],", "              [26, 27, 28, 29, 30],", "              [31, 32, 33, 34, 35]])", "r = [0, 1, 2]", "c = [2, 3, 4]", "y = np.take(x, [r, c])", "print(y)", "\n", "[[11 12 13]", "\n", "[13 14 15]]", "\n", "结果为什么是这个。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;这里的tight_layout参数不需要指定对象&amp;#xff0c;只需要设置pad大小就可以。&lt;br /&gt;通过查看matplotlib文档&amp;#xff0c;&lt;br /&gt;&lt;a href=\"https://matplotlib.org/3.5.3/api/_as_gen/matplotlib.pyplot.tight_layout.html\" id=\"textarea_1664942862408_1664942881709_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://matplotlib.org/3.5.3/api/_as_gen/matplotlib.pyplot.tight_layout.html&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;找到对应函数&amp;#xff1a;&lt;br /&gt;matplotlib.pyplot.tight_layout(*, pad&amp;#61;1.08, h_pad&amp;#61;None, w_pad&amp;#61;None, rect&amp;#61;None)&lt;br /&gt;根据函数定义&amp;#xff0c;只需要对应关键字参数即可。&lt;br /&gt;因此&amp;#xff0c;你这里可以直接写&amp;#xff1a;&lt;br /&gt;plt.tight_layout(rect&amp;#61;(0, 0, 1, 0.95))&lt;br /&gt;也可以&lt;br /&gt;plt.tight_layout(pad&amp;#61;2, w_pad&amp;#61;0.5, h_pad&amp;#61;1.0)&lt;br /&gt;此外&amp;#xff0c;还可能会碰到无法显示中文的问题&amp;#xff0c;下载simhei字体&amp;#xff0c;按照如下博客操作即可解决。&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/u012744245/article/details/119735461\" id=\"textarea_1664942862408_1664942881709_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/u012744245/article/details/119735461&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;最后结果&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/170906049466162.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python问题：Tight _ layout ( )接受0个位置参数，但给出了1个位置参数(和1个仅关键字的参数)", ["程序运行之后出现这样的错误：", "plt.tight_layout()使用", "该怎么解决！", "\n", "\nTraceback (most recent ", "call", " ", "last", "):\n  File ", "\"D:\\Program Files\\Python310\\lib\\code.py\"", ", ", "line", " ", "90", ", in runcode\n    exec(code, self.locals)\n  File ", "\"<input>\"", ", ", "line", " ", "1", ", in ", "<module>", "\n  File ", "\"D:\\PyCharm2022\\PyCharm 2022.1.3\\plugins\\python\\helpers\\pydev\\_pydev_bundle\\pydev_umd.py\"", ", ", "line", " ", "198", ", in runfile\n    pydev_imports.execfile(filename, global_vars, local_vars)  # ", "execute", " the script\n  File ", "\"D:\\PyCharm2022\\PyCharm 2022.1.3\\plugins\\python\\helpers\\pydev\\_pydev_imps\\_pydev_execfile.py\"", ", ", "line", " ", "18", ", in execfile\n    exec(compile(contents+", "\"\\n\"", ", ", "file", ", ", "'exec'", "), ", "glob", ", ", "loc", ")\n  File ", "\"E:\\PyCharm\\Python project\\demo\\5.3..py\"", ", ", "line", " ", "110", ", in ", "<module>", "\n    plt.tight_layout(", "1", ", rect=(", "0", ", ", "0", ", ", "1", ", ", "0.95", "))\nTypeError: tight_layout() takes ", "0", " positional arguments but ", "1", " positional ", "argument", " (", "and", " ", "1", " keyword-", "only", " ", "argument", ") were given\n", "\n", "代码如下：", "\n", "\nimport numpy as np\n", "from", " sklearn.linear_model import LinearRegression, RidgeCV, LassoCV, ElasticNetCV\n", "from", " sklearn.preprocessing import PolynomialFeatures\n", "from", " sklearn.pipeline import Pipeline\n", "from", " sklearn.exceptions import ConvergenceWarning\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport warnings\n", "# import seaborn", "\n\n\ndef xss(y, y_hat):\n    y = y.ravel()\n    y_hat = y_hat.ravel()\n    # Version 1\n    tss = ((y - np.average(y)) ** 2).sum()\n    rss = ((y_hat - y) ** 2).sum()\n    ess = ((y_hat - np.average(y)) ** 2).sum()\n    r2 = 1 - rss / tss\n    # ", "print", " ", "'RSS:'", ", rss, ", "'\\t ESS:'", ", ess\n    # ", "print", " ", "'TSS:'", ", tss, ", "'RSS + ESS = '", ", rss + ess\n    tss_list.append(tss)\n    rss_list.append(rss)\n    ess_list.append(ess)\n    ess_rss_list.append(rss + ess)\n    # Version 2\n    # tss = np.var(y)\n    # rss = np.average((y_hat - y) ** 2)\n    # r2 = 1 - rss / tss\n    corr_coef = np.corrcoef(y, y_hat)[0, 1]\n    return r2, corr_coef\n\n\n", "if", " __name__ == ", "\"__main__\"", ":\n    warnings.filterwarnings(", "action", "=", "'ignore'", ", ", "category", "=ConvergenceWarning)\n    np.random.seed(0)\n    np.set_printoptions(", "linewidth", "=300, ", "suppress", "=", "True", ")\n    N = 9\n    x = np.linspace(0, 6, N) + np.random.randn(N)\n    x = np.sort(x)\n    y = x*", "*2", " - 4*x - 3 + np.random.randn(N)\n    x.shape = -1, 1\n    y.shape = -1, 1\n\n    models = [Pipeline([\n        (", "'poly'", ", PolynomialFeatures()),\n        (", "'linear'", ", LinearRegression(", "fit_intercept", "=", "False", "))]),\n        Pipeline([\n            (", "'poly'", ", PolynomialFeatures()),\n            (", "'linear'", ", RidgeCV(", "alphas", "=np.logspace(-3, 2, 10), ", "fit_intercept", "=", "False", "))]),\n        Pipeline([\n            (", "'poly'", ", PolynomialFeatures()),\n            (", "'linear'", ", LassoCV(", "alphas", "=np.logspace(-3, 2, 10), ", "fit_intercept", "=", "False", "))]),\n        Pipeline([\n            (", "'poly'", ", PolynomialFeatures()),\n            (", "'linear'", ", ElasticNetCV(", "alphas", "=np.logspace(-3, 2, 10), l1_ratio=[.1, .5, .7, .9, .95, .99, 1],\n                                    ", "fit_intercept", "=", "False", "))])\n    ]\n    mpl.rcParams[", "'font.sans-serif'", "] = [", "'simHei'", "]\n    mpl.rcParams[", "'axes.unicode_minus'", "] = ", "False", "\n\n    plt.figure(figsize=(15, 10), ", "facecolor", "=", "'w'", ")\n    d_pool = np.arange(1, N, 1)  # 阶\n    m = d_pool.size\n    clrs = []  # 颜色\n    ", "for", " c ", "in", " np.linspace(16711680, 255, m, ", "dtype", "=int):\n        clrs.append(", "'#%06x'", " % c)\n    line_width = np.linspace(5, 2, m) * 0.7\n    titles = ", "'线性回归'", ", ", "'Ridge回归'", ", ", "'LASSO'", ", ", "'ElasticNet'", "\n    tss_list = []\n    rss_list = []\n    ess_list = []\n    ess_rss_list = []\n    ", "for", " t ", "in", " range(4):\n        model = models[t]\n        plt.subplot(2, 2, t+1)\n        plt.plot(x, y, ", "'ro'", ", ", "markersize", "=7, ", "zorder", "=N, ", "mec", "=", "'k'", ")\n        ", "for", " i, d ", "in", " enumerate(d_pool):\n            model.set_params(", "poly__degree", "=d)\n            model.fit(x, y.ravel())\n            lin = model.get_params(", "'linear'", ")[", "'linear'", "]\n            output = ", "'%s：%d阶，系数为：'", " % (titles[t], d)\n            ", "if", " hasattr(lin, ", "'alpha_'", "):\n                idx = output.", "find", "(", "'系数'", ")\n                output = output[:idx] + (", "'alpha=%.6f，'", " % lin.alpha_) + output[idx:]\n            ", "if", " hasattr(lin, ", "'l1_ratio_'", "):   # 根据交叉验证结果，从输入l1_ratio(list)中选择的最优l1_ratio_(float)\n                idx = output.", "find", "(", "'系数'", ")\n                output = output[:idx] + (", "'l1_ratio=%.6f，'", " % lin.l1_ratio_) + output[idx:]\n            ", "print", "(output, lin.coef_.ravel())\n            x_hat = np.linspace(x.min(), x.max(), ", "num", "=100)\n            x_hat.shape = -1, 1\n            y_hat = model.predict(x_hat)\n            s = model.score(x, y)\n            r2, corr_coef = xss(y, model.predict(x))\n            # ", "print", " ", "'R2和相关系数：'", ", r2, corr_coef\n            # ", "print", " ", "'R2：'", ", s, ", "'\\n'", "\n            z = N - 1 ", "if", " (d == 2) ", "else", " 0\n            label = ", "'%d阶，$R^2$=%.3f'", " % (d, s)\n            ", "if", " hasattr(lin, ", "'l1_ratio_'", "):\n                label += ", "'，L1 ratio=%.2f'", " % lin.l1_ratio_\n            plt.plot(x_hat, y_hat, ", "color", "=clrs[i], ", "lw", "=line_width[i], ", "alpha", "=0.75, ", "label", "=label, ", "zorder", "=z)\n        plt.legend(", "loc", "=", "'upper left'", ")\n        plt.grid(", "True", ")\n        plt.title(titles[t], ", "fontsize", "=18)\n        plt.xlabel(", "'X'", ", ", "fontsize", "=16)\n        plt.ylabel(", "'Y'", ", ", "fontsize", "=16)\n    plt.tight_layout(1, rect=(0, 0, 1, 0.95))\n    plt.suptitle(", "'多项式曲线拟合比较'", ", ", "fontsize", "=22)\n    plt.show()\n\n    y_max = max(max(tss_list), max(ess_rss_list)) * 1.05\n    plt.figure(figsize=(9, 7), ", "facecolor", "=", "'w'", ")\n    t = np.arange(len(tss_list))\n    plt.plot(t, tss_list, ", "'ro-'", ", ", "lw", "=2, ", "label", "=", "'TSS(Total Sum of Squares)'", ", ", "mec", "=", "'k'", ")\n    plt.plot(t, ess_list, ", "'mo-'", ", ", "lw", "=1, ", "label", "=", "'ESS(Explained Sum of Squares)'", ", ", "mec", "=", "'k'", ")\n    plt.plot(t, rss_list, ", "'bo-'", ", ", "lw", "=1, ", "label", "=", "'RSS(Residual Sum of Squares)'", ", ", "mec", "=", "'k'", ")\n    plt.plot(t, ess_rss_list, ", "'go-'", ", ", "lw", "=2, ", "label", "=", "'ESS+RSS'", ", ", "mec", "=", "'k'", ")\n    plt.ylim((0, y_max))\n    plt.legend(", "loc", "=", "'center right'", ")\n    plt.xlabel(", "'实验：线性回归/Ridge/LASSO/Elastic Net'", ", ", "fontsize", "=15)\n    plt.ylabel(", "'XSS值'", ", ", "fontsize", "=15)\n    plt.title(", "'总平方和TSS=？'", ", ", "fontsize", "=18)\n    plt.grid(", "True", ")\n    plt.show()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;你看下这篇博客吧, 应该有用&amp;#x1f449; &amp;#xff1a;&lt;a href=\"https://blog.csdn.net/z099164/article/details/122379538\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;Pandas中Apply函数加速百倍的技巧&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pandas中apply函数的参数问题", ["\n", "import", " pandas ", "as", " pd\n", "import", " numpy ", "as", " np\n\nmatrix = [\n    [", "1", ",", "2", ",", "3", "],\n    [", "4", ",", "5", ",", "6", "],\n    [", "7", ",", "8", ",", "9", "]\n]\n\ndf = pd.DataFrame(matrix, ", "columns", "=list(", "'xyz'", "), ", "index", "=list(", "'abc'", "))\ndf.apply(np.square)\n\ndf.apply(lambda x : np.square(x) ", "if", " x.name == ", "'a'", " ", "else", " x, axis=", "1", ")\n", "\n", "就是关于最后一行代码的，对于Name属性我了解到的是会返回元素的列标签，但是运行上面会把第一行全部平方，其它不变，加上这个axis=1就是表示获取name属性后，不再返回列标签而是行标签名？？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;要建一个别名字典&amp;#xff0c;然后apply 替换&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["dataframe中，怎样实现old列按照new列名字重新命名，然后把结果放在第三列", ["以 new 列中的名字为标准，把 old 列中的名字全部替换，然后放在第三列，两列中虽然名字不一样，但其实是同一个物质，如图中标示颜色所示，", "\n", "\n", "代码如下：", "\n", "import", "  pandas  ", "as", "  pd\n", "import", "  numpy  ", "as", "  np\ndf = pd.DataFrame({\n", "'old'", ": [", "'醋酸铵'", ", ", "'氨水（5mol/L氨溶液）'", ", ", "'甘油'", ", ", "'盐酸萘乙二胺'", ", ", "'氨水'", ", ", "'硫酸铜'", ", ", "'钙紫红素'", ", ", "'冰醋酸'", ",np.", "nan", ", np.", "nan", ", np.", "nan", ", np.", "nan", ", np.", "nan", ", np.", "nan", ", np.", "nan", ", np.", "nan", ", np.", "nan", ", np.", "nan", ", np.", "nan", ", np.", "nan", ", np.", "nan", ",np.", "nan", "], \n", "'new'", ": [", "'乙酸铵'", ", ", "'十二水合硫酸铝钾'", ", ", "'硫酸铵'", ", ", "'百里香酚蓝（溴酚蓝）'", ", ", "'钙紫红素'", ", ", "'间甲酚紫'", ", ", "'硫酸钙(无水)'", ",", "'氢氧化氨(氨水)'", ", ", "'磷酸氢二钾'", ", ", "'盐酸萘乙二胺'", ", ", "'乙二胺四乙酸二钠盐，二水'", ", ", "'冰醋酸（冰乙酸）'", ",", "'抗坏血酸（维生素C）'", ", ", "'氨水（5mol/L氨溶液）'", ", ", "'无水硫酸镁'", ", ", "'丙三醇(甘油)'", ", ", "'四水合，酒石酸钾钠'", ",", "'邻苯二甲酸氢钾'", ", ", "'磷酸二氢钾'", ", ", "'亚铁氰化钾'", ", ", "'硫酸钾'", ", ", "'五水合硫酸铜'", "]})\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;别人的好像和你的不太一样&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/472044791856161.png\" /&gt;&lt;/p&gt;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/weixin_43669978/article/details/120914852\" id=\"textarea_1658197309678_1658197444052_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_43669978/article/details/120914852&lt;/span&gt;&lt;/a&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python使用model.compile方法的时候，遇到AttributeError: 'NoneType' object has no attribute 'compile'这个问题", ["在跑《deep learning for computer vision with python》第一本第15章的mvggnet程序时候，遇到使用model.compile方法出现bug。'NoneType' object has no attribute 'compile'", "\n", "import matplotlib\n\nmatplotlib.use(", "\"Agg\"", ")\n\n", "from", " sklearn.preprocessing import LabelBinarizer\n", "from", " sklearn.metrics import classification_report\n", "from", " pyimagesearch.nn.conv import minivggnet\n", "from", " keras.optimizers import SGD\n", "from", " keras.datasets import cifar10\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport argparse\n\nap = argparse.ArgumentParser()\nap.add_argument(", "\"-o\"", ", ", "\"--output\"", ", ", "required", "=", "True", ",\n                ", "help", "=", "\"path to the output loss/accuracy plot\"", ")\nargs = vars(ap.parse_args())\n\n", "print", "(", "\"[INFO] loading CIFAR-10 data...\"", ")\n((trainX, trainY), (testX, testY)) = cifar10.load_data()\ntrainX = trainX.astype(", "\"float\"", ") / 255.0\ntestX = testX.astype(", "\"float\"", ") / 255.0\n\nlb = LabelBinarizer()\ntrainY = lb.fit_transform(trainY)\ntestY = lb.transform(testY)\n\nlabelNames = [", "\"airplane\"", ", ", "\"automobile\"", ", ", "\"bird\"", ", ", "\"cat\"", ", ", "\"deer\"", ",\n              ", "\"dog\"", ", ", "\"frog\"", ", ", "\"horse\"", ", ", "\"ship\"", ", ", "\"truck\"", "]\n\n", "print", "(", "\"[INFO] compiling model...\"", ")\nopt = SGD(", "lr", "=0.01, ", "decay", "=0.01 / 40, ", "momentum", "=0.9, ", "nesterov", "=", "True", ")\nmodel = minivggnet.build(", "width", "=32, ", "height", "=32, ", "depth", "=3, ", "classes", "=10)\nmodel.compile(", "loss", "=", "'categorical_crossentropy'", ", ", "optimizer", "=opt,\n              metrics=[", "\"accuracy\"", "])\n\n", "print", "(", "\"[INFO] training network...\"", ")\nH = model.fit(trainX, trainY, validation_data=(testX, testY), ", "batch_size", "=64,\n              ", "epydoc", "=40, ", "verbose", "=1)\n\n", "print", "(", "\"[INFO] evaluating network...\"", ")\npredictions = model.predict(testX, ", "batch_size", "=64)\n", "print", "(classification_report(testY.argmax(", "axis", "=1),\n                            predictions.argmax(", "axis", "=1),\n                            ", "target_names", "=labelNames))\n\nplt.style.use(", "\"ggplot\"", ")\nplt.figure()\nplt.plot(np.arange(0, 40), H.history[", "\"loss\"", "], ", "label", "=", "\"train_loss\"", ")\nplt.plot(np.arange(0, 40), H.history[", "\"val_loss\"", "], ", "label", "=", "\"val_loss\"", ")\nplt.plot(np.arange(0, 40), H.history[", "\"accuracy\"", "], ", "label", "=", "\"train_accuracy\"", ")\nplt.plot(np.arange(0, 40), H.history[", "\"val_accuracy\"", "], ", "label", "=", "\"val_accuracy\"", ")\nplt.title(", "\"Training Loss and Accuracy on CIFAR-10\"", ")\nplt.xlabel(", "\"Epoch #\"", ")\nplt.ylabel(", "\"Loss/Accuracy\"", ")\nplt.legend()\nplt.savefig(args[", "\"output\"", "])\n\n", "\n", "AttributeError: 'NoneType' object has no attribute 'compile'", "\n", "有无帅哥美女帮忙解决一下问题哭了", "\n", "我想要达到的结果", "\n", "\n", "\n", "\n\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的数据中有非数值型的字符串型数据&amp;#xff0c;你检查一下新使用的数据&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python聚类问题", ["问题遇到的现象和发生背景", "\n", "部分数据集", "d=[[1994.0, 9.6], [1957.0, 9.5], [1997.0, 9.5], [1994.0, 9.4], [1993.0, 9.4], [2012.0, 9.4], [1993.0, 9.4], [1997.0, 9.4], [2013.0, 9.4], [1994.0, 9.4], [2003.0, 9.3], [2016.0, 9.3], [2009.0, 9.3], [2009.0, 9.3], [2008.0, 9.3], [2008.0, 9.3], [1957.0, 9.3], [2008.0, 9.3], [2001.0, 9.2], [2009.0, 9.2], [1931.0, 9.2], [1961.0, 9.2], [2010.0, 9.2], [2004.0, 9.2], [1998.0, 9.2]]", "\n", "import", " random\n", "import", " pandas as pd\n", "import", " numpy as np\n", "import", " matplotlib.pyplot as plt\n\n", "# 计算欧拉距离", "\ndef calcDis(dataSet, centroids, k):\n    ", "clalist=[]", "\n    for data ", "in", " dataSet:\n        ", "diff", " = np.tile(data, (k, ", "1", ")) - centroids  ", "#相减   (np.tile(a,(2,1))就是把a先沿x轴复制1倍，即没有复制，仍然是 [0,1,2]。 再把结果沿y方向复制2倍得到array([[0,1,2],[0,1,2]]))", "\n        ", "squaredDiff", " = diff ** ", "2", "     ", "#平方", "\n        ", "squaredDist", " = np.sum(squaredDiff, ", "axis=1)", "   ", "#和  (axis=1表示行)", "\n        ", "distance", " = squaredDist ** ", "0.5", "  ", "#开根号", "\n        clalist.append(distance) \n    ", "clalist", " = np.array(clalist)  ", "#返回一个每个点到质点的距离len(dateSet)*k的数组", "\n    return clalist\n\n", "# 计算质心", "\ndef classify(dataSet, centroids, k):\n    ", "# 计算样本到质心的距离", "\n    ", "clalist", " = calcDis(dataSet, centroids, k)\n    ", "# 分组并计算新的质心", "\n    ", "minDistIndices", " = np.argmin(clalist, ", "axis=1)", "    ", "#axis=1 表示求出每行的最小值的下标", "\n    ", "newCentroids", " = pd.DataFrame(dataSet).groupby(minDistIndices).mean() ", "#DataFramte(dataSet)对DataSet分组，groupby(min)按照min进行统计分类，mean()对分类结果求均值", "\n    ", "newCentroids", " = newCentroids.values\n \n    ", "# 计算变化量", "\n    ", "changed", " = newCentroids - centroids\n \n    return changed, newCentroids\n\n", "# 使用k-means分类", "\ndef kmeans(dataSet, k):\n    ", "# 随机取质心", "\n    ", "centroids", " = random.sample(dataSet, k)\n    \n    ", "# 更新质心 直到变化量全为0", "\n    changed, ", "newCentroids", " = classify(dataSet, centroids, k)\n    while np.any(changed != ", "0", "):\n        changed, ", "newCentroids", " = classify(dataSet, newCentroids, k)\n \n    ", "centroids", " = sorted(newCentroids.tolist())   ", "#tolist()将矩阵转换成列表 sorted()排序", "\n \n    ", "# 根据质心计算每个集群", "\n    ", "cluster", " = []\n    ", "clalist", " = calcDis(dataSet, centroids, k) ", "#调用欧拉距离", "\n    ", "minDistIndices", " = np.argmin(clalist, ", "axis=1)", "  \n    for i ", "in", " range(k):\n        cluster.append([])\n    for i, j ", "in", " enumerate(minDistIndices):   ", "#enymerate()可同时遍历索引和遍历元素", "\n        cluster[j].append(dataSet[i])\n        \n    return centroids, cluster\n \n", "# 创建数据集", "\ndef createDataSet():\n   \n    return d\n    \n", "if", " ", "__name__=='__main__':", " \n    ", "dataset", " = createDataSet()\n    \n    centroids, ", "cluster", " = kmeans(dataset, ", "3", ")\n    print('质心为：%s' % centroids)\n    print('集群为：%s' % cluster)\n    for i ", "in", " range(len(dataset)):\n        ", "label_pred", " = estimator.labels_  ", "# 获取聚类标签", "\n        ", "# 绘制k-means结果", "\n        ", "x0", " = X[", "label_pred", " == ", "0", "]\n        ", "x1", " = X[", "label_pred", " == ", "1", "]\n        ", "x2", " = X[", "label_pred", " == ", "2", "]\n        plt.scatter(x0[:, ", "0", "], x0[:, ", "1", "], ", "c=\"deeppink\",", " ", "marker='o',", " ", "label='label0')", "\n        plt.scatter(x1[:, ", "0", "], x1[:, ", "1", "], ", "c=\"green\",", " ", "marker='*',", " ", "label='label1')", "\n        plt.scatter(x2[:, ", "0", "], x2[:, ", "1", "], ", "c=\"blue\",", " ", "marker='+',", " ", "label='label2')", "\n      \n        for j ", "in", " range(len(centroids)):\n            plt.scatter(centroids[j][", "0", "],centroids[j][", "1", "],", "marker='x',color='red',s=70,label='质心')", "\n        \n    plt.show()\n\n\n", "\n", "运行结果及详细报错内容", "\n", "想知道错在哪里，怎么修改"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;检查一下传入的tokenizer参数&amp;#xff0c;导致抛出None值无encode_plus属性错误。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何解决XLnet分类存在的问题？", ["使用XLnet进行文本分类，出现了下面的问题：", "\n", "def", " ", "get_inputs", "(", "content, tokenizer, max_len=", "120", "):\n    ", "\"\"\" Gets tensors from text using the tokenizer provided\"\"\"", "\n    inps = [tokenizer.encode_plus(t, max_length=maxlen, pad_to_max_length=", "False", ", add_special_tokens=", "True", ") ", "for", " t ", "in", " content]\n    inp_tok = np.array([a[", "'input_ids'", "] ", "for", " a ", "in", " inps])\n    ids = np.array([a[", "'attention_mask'", "] ", "for", " a ", "in", " inps])\n    segments = np.array([a[", "'token_type_ids'", "] ", "for", " a ", "in", " inps])\n    ", "return", " inps, inp_tok, ids, segments\n\n", "def", " ", "warmup", "(", "epoch, lr", "):\n    ", "\"\"\"Used for increasing the learning rate slowly, this tends to achieve better convergence.\n    However, as we are finetuning for few epoch it's not crucial.\n    \"\"\"", "\n    ", "return", " ", "max", "(lr +", "1e-6", ", ", "2e-5", ")\n\n", "def", " ", "plot_metrics", "(", "pred, true_labels", "):\n    ", "\"\"\"Plots a ROC curve with the accuracy and the AUC\"\"\"", "\n    acc = accuracy_score(true_labels, np.array(pred.flatten() >= ", ".5", ", dtype=", "'int'", "))\n    fpr, tpr, thresholds = roc_curve(true_labels, pred)\n    auc = roc_auc_score(true_labels, pred)\n\n    fig, ax = plt.subplots(", "1", ", figsize=(", "8", ",", "8", "))\n    ax.plot(fpr, tpr, color=", "'red'", ")\n    ax.plot([", "0", ",", "1", "], [", "0", ",", "1", "], color=", "'black'", ", linestyle=", "'--'", ")\n    ax.set_title(", "f\"AUC: ", "{auc}", "\\nACC: ", "{acc}", "\"", ");\n    ", "return", " fig\n\ninps, inp_tok, ids, segments = get_inputs(x_train_text, xlnet_tokenizer)\n", "\n", "AttributeError                            Traceback (most recent call last)\n/tmp/ipykernel_18279/2457827602.py ", "in", " <module>\n----> 1 inps, inp_tok, ids, segments = get_inputs(x_train_text, xlnet_tokenizer)\n\n/tmp/ipykernel_18279/3374919276.py ", "in", " get_inputs(content, tokenizer, max_len)\n      1 def get_inputs(content, tokenizer, ", "max_len", "=120):\n      2     ", "\"\"", "\" Gets tensors from text using the tokenizer provided\"", "\"\"", "\n----> 3     inps = [tokenizer.encode_plus(t, ", "max_length", "=max_len, ", "pad_to_max_length", "=", "False", ", ", "add_special_tokens", "=", "True", ") ", "for", " t ", "in", " content]\n      4     inp_tok = np.array([a[", "'input_ids'", "] ", "for", " a ", "in", " inps])\n      5     ids = np.array([a[", "'attention_mask'", "] ", "for", " a ", "in", " inps])\n\n/tmp/ipykernel_18279/3374919276.py ", "in", " <listcomp>(.0)\n      1 def get_inputs(content, tokenizer, ", "max_len", "=120):\n      2     ", "\"\"", "\" Gets tensors from text using the tokenizer provided\"", "\"\"", "\n----> 3     inps = [tokenizer.encode_plus(t, ", "max_length", "=max_len, ", "pad_to_max_length", "=", "False", ", ", "add_special_tokens", "=", "True", ") ", "for", " t ", "in", " content]\n      4     inp_tok = np.array([a[", "'input_ids'", "] ", "for", " a ", "in", " inps])\n      5     ids = np.array([a[", "'attention_mask'", "] ", "for", " a ", "in", " inps])\n\nAttributeError: ", "'NoneType'", " object has ", "no", " attribute ", "'encode_plus'", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这么改就行了&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; mpl_toolkits.mplot3d &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; Axes3D\n\nfig &amp;#61; plt.figure()\n&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&amp;#39;让下面的都在一个框框里面&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;\nax &amp;#61; Axes3D(fig,auto_add_to_figure&amp;#61;&lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;)\nfig.add_axes(ax)\n&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&amp;#39;绘制3D空间&amp;#xff08;坐标轴&amp;#xff09;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;\nX &amp;#61; np.arange(-&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0.25&lt;/span&gt;)\nY &amp;#61; np.arange(-&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0.25&lt;/span&gt;)\nX, Y &amp;#61; np.meshgrid(X, Y)\n&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&amp;#39;把x,y绘制对应到底面的面上去&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;\nR &amp;#61; np.sqrt(X ** &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#43; Y ** &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#43; np.exp(np.pi))\nZ &amp;#61; np.tanh(R)\nax.plot_surface(X, Y, Z, rstride&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, cstride&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, cmap&amp;#61;plt.get_cmap(&lt;span class=\"hljs-string\"&gt;&amp;#39;rainbow&amp;#39;&lt;/span&gt;))\n&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&amp;#39;绘制3D cmap又一种方法&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;\nax.contourf(X, Y, Z, zdir&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;, offset&amp;#61;&lt;span class=\"hljs-number\"&gt;0.99987&lt;/span&gt;, cmap&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;summer&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&amp;#39;顺便在某平面画个等高线 zdir是决定从哪个方向压下去&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;\nplt.show()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img title=\"image.png\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/186266767926113.png\" /&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["matplotlib 3D绘图一个警告 请问怎么解决？", ["代码内容", "\n", "\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " numpy ", "as", " np\n", "from", " mpl_toolkits.mplot3d ", "import", " Axes3D\n\n\nfig = plt.figure()\n", "'''让下面的都在一个框框里面'''", "\nax = Axes3D(fig)\n\n", "'''绘制3D空间（坐标轴）'''", "\nX = np.arange(-", "4", ",", "4", ",", "0.25", ")\nY = np.arange(-", "4", ",", "4", ",", "0.25", ")\nX,Y = np.meshgrid(X,Y)\n", "'''把x,y绘制对应到底面的面上去'''", "\nR = np.sqrt(X**", "2", " + Y**", "2", " + np.exp(np.pi))\n\nZ = np.tanh(R)\n\nax.plot_surface(X,Y,Z,rstride=", "1", ",cstride=", "1", ",cmap=plt.get_cmap(", "'rainbow'", "))\n", "'''绘制3D cmap又一种方法'''", "\nax.contourf(X,Y,Z,zdir=", "'z'", ",offset=", "0.99987", ",cmap=", "'summer'", ")\n", "'''顺便在某平面画个等高线 zdir是决定从哪个方向压下去'''", "\n\nplt.show()\n", "\n", "图顺利出来，警告内容：", "\n", "\n", "MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6.  This is consistent with other Axes classes.", "  ax = Axes3D(fig)", "\n", "\n", "如何解决警告的内容？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我改写了一下&amp;#xff0c;效果一样速度应该可以快100倍吧&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;__init_params&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;self&lt;/span&gt;, grayFrame)&lt;/span&gt;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; k &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-keyword\"&gt;self&lt;/span&gt;.__defaultNbSamples):\n            c &amp;#61; np.random.randint(-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,size&amp;#61;(&lt;span class=\"hljs-keyword\"&gt;self&lt;/span&gt;.__Height,&lt;span class=\"hljs-keyword\"&gt;self&lt;/span&gt;.__Width))\n            &lt;span class=\"hljs-keyword\"&gt;self&lt;/span&gt;.__samples[k] &amp;#61; np.maximum(grayFrame &amp;#43; c, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python运行vibe算法过慢", ["现在在做毕设，有一部分要用到前景目标提取，我打算用VIBE算法来做，但是同样的算法，Python运行时初始化都要20-50s，我朋友用matlab基本就是1s内最多1s多一点就能完成初始化，虽然Python运行慢，但是也不至于慢这么多吧，而且理论上vibe算法的运行速度应该是比较快的，大佬们看一下是不是写的代码的问题。。。", "\n\n", "def initial_background(I_gray, N):\n    t1 = cv2.getTickCount()\n    I_pad = np.pad(I_gray, 1, 'symmetric')#对称填充\n    height = I_pad.shape[0]\n    width = I_pad.shape[1]\n    samples = np.zeros((height, width, N))\n    t2 = cv2.getTickCount()\n    time = (t2 - t1) * 1000 / cv2.getTickFrequency()\n    print(time)\n    for i in range(1, height - 1):\n        for j in range(1, width - 1):\n            for n in range(N):\n                x, y = 0, 0\n                while (x == 0 and y == 0):\n                    x = np.random.randint(-1, 1)\n                    y = np.random.randint(-1, 1)\n                ri = i + x\n                rj = j + y\n                samples[i, j, n] = I_pad[ri, rj]\n    t3 = cv2.getTickCount()\n    time2 = (t3 - t1) * 1000 / cv2.getTickFrequency()\n    print(time2)\n    samples = samples[1:height - 1, 1:width - 1]\n    return samples\n", "\n\n", "上面是Python的初始化部分代码，大佬们帮忙看看这部分代码有哪些可以优化的。matlab代码我看不懂，也不知道该发哪个，第一次在CSDN上问问题，不知道会不会有人回答。。。"]], "Tag": "算法设计"}
{"Answer": "首先\r\n1 2 3 4\r\n5 6 7 8\r\n按照列得到序列\r\n1 5 2 6 3 7 4 8\r\n然后按照f reshape成4 2\r\n1 5 2 6 \r\n3 7 4 8\r\n上下对齐得到\r\n1 3\r\n5 7\r\n2 4\r\n6 8\r\n深入的解释\r\nhttps://stackoverflow.com/questions/45973722/how-does-numpy-reshape-with-order-f-work", "Konwledge_Point": "应对NP完全问题", "Question": ["关于Python中的reshape,order相关问题", ["import numpy as np", "\nA = np.array([[1,2,3,4],[5,6,7,8]])", "\nA.reshape((4,2),order=\"F\")", "\n为什么显示的是", "\n\n", "Out[5]:", "\narray([[1, 3],", "\n       [5, 7],", "\n       [2, 4],", "\n       [6, 8]])", "\n\n", "        我知道order=\"F\"代表列优先，但是我实在搞不明白最后的结果顺序是经过怎样的排序后得出的\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;data为二维数组&amp;#xff0c;axis&amp;#61;0求每一列的标准差&amp;#xff0c;输出为一行&amp;#xff1b;axis&amp;#61;1求每一行的标准差。输出为一列。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy 很基础的问题", ["data = [[1, 2], [3, 4]]", "std1 = np.std(data, axis=0)", "print(\"std1:\", std1)", "\n", "data = [[1, 2], [4, 3]]", "std2 = np.std(data, axis=0)", "print(\"std2:\", std2)", "\n", "结果：", "std1: [1. 1.]", "std2: [1.5 0.5]", "\n", "为什么这两段代码运行结果不一样？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以看一下我的博客&lt;br /&gt;&lt;a id=\"textarea_1659764235766_1659764267917_0\"&gt;http://t.csdn.cn/2TE4K&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的问题：问题遇到的现象和发生背景", ["问题遇到的现象和发生背景", "\n", "\n\n\n", "我的解答思路和尝试过的方法", "\n", "\n", "\n", "我想要达", "\n", "```python", "import numpy as np", "import cv2", "cap=cv2.VideoCapture(0)", "\n", "while(True):", "    ret,frame=cap.read()", "    frame=cv2.flip(frame,1)", "    gray=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)", "    cv2.imshow('frame',frame)", "    cv2.imshow('gray',gray)", "    if cv2.waitKey(1)&0xFF==ord('q'):", "        break", "\n", "cap.release()", "cv2.destroyAllWindows()", "\n", "```到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt; 设置&lt;br /&gt;import matplotlib as mpl&lt;br /&gt;mpl.use(&amp;#39;module://backend_interagg&amp;#39;) &lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; mpl_toolkits.mplot3d &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; Axes3D\n\n# 保留到磁盘&amp;#xff0c;需要设置 mpl.use(&lt;span class=\"hljs-string\"&gt;&amp;#39;Agg&amp;#39;&lt;/span&gt;) 同时注释掉plt.show()\n# 设置 mpl.use(&lt;span class=\"hljs-string\"&gt;&amp;#39;module://backend_interagg&amp;#39;&lt;/span&gt;) plt.show才能显示\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; mpl\nprint(mpl.get_backend())\n# mpl.use(&lt;span class=\"hljs-string\"&gt;&amp;#39;Agg&amp;#39;&lt;/span&gt;) # 保留图片到png pdf等需要设置&amp;#xff0c;并且注释掉plt.show()\nmpl.use(&lt;span class=\"hljs-string\"&gt;&amp;#39;module://backend_interagg&amp;#39;&lt;/span&gt;) # plt.show()需要设置\n\nx &amp;#61; np.random.uniform(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;)\ny &amp;#61; np.random.uniform(&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;)\nz &amp;#61; np.random.uniform(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;)\n\nfig &amp;#61; plt.figure()\nax3d &amp;#61; Axes3D(fig)\nax3d.scatter(x, y, z, c&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, marker&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;*&amp;#34;&lt;/span&gt;)\nplt.show()\n# plt.savefig(&lt;span class=\"hljs-string\"&gt;&amp;#39;plot_axe3D.png&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Pycharm中Axes3D库调用不显示图片", ["问题遇到的现象和发生背景", "\n", "最近在研究一个遗传算法的代码，结果能跑通，但是配套的图片没有出来，原链接有一个3D的二元函数图片。", "后来发现，问题应该是出在from mpl_toolkits.mplot3d import Axes3D", "可能是这个没有被正确调用，然后测试了一下代码，也没有图片。", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "import numpy as np\nimport matplotlib", ".pyplot", " as plt\nfrom mpl_toolkits", ".mplot3d", " import Axes3D\n\n\nx = np", ".random", ".uniform", "(", "10", ",", "40", ",", "30", ")\ny = np", ".random", ".uniform", "(", "100", ",", "200", ",", "30", ")\nz = np", ".random", ".uniform", "(", "10", ",", "20", ",", "30", ")\n\n\nfig = plt", ".figure", "()\nax3d = Axes3D(fig)\nax3d", ".scatter", "(x,y,z,c=", "\"b\"", ",marker=", "\"*\"", ")\n\nplt", ".show", "()\n\n", "\n", "运行结果及报错内容", "\n", "没有生成图片，按理来说会生成3D图片", "\n", "我的解答思路和尝试过的方法", "\n", "我不知道 Axes3D 这个库是包含在matplotlib 这个库里面的还是单独的一个库，matplotlib 和numpy 库都有正确安装，也没有搜索到Axes3D这个库，不知道问题出现在哪里。", "\n", "我想要达到的结果", "\n", "刚学python，请问有知道的朋友，这个问题如何解决，感谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;需要知道的是python的下标从0开始的&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;def&lt;/span&gt; ThomasAGiven(N):\n    &lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n    &lt;span class=\"hljs-attribute\"&gt;Num&lt;/span&gt; &amp;#61; N &amp;#43; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;h&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;/(Num-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n \n    &lt;span class=\"hljs-attribute\"&gt;x0&lt;/span&gt; &amp;#61; np.ones(Num)\n    &lt;span class=\"hljs-attribute\"&gt;x1&lt;/span&gt; &amp;#61; np.ones(Num-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    &lt;span class=\"hljs-attribute\"&gt;A&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;*np.eye(Num)-(np.diag(-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*x0)&amp;#43;np.diag(x1,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&amp;#43;np.diag(x1,-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))/(h*h)\n    &lt;span class=\"hljs-attribute\"&gt;A&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,:] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;A&lt;/span&gt;[Num-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,:] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;A&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;A&lt;/span&gt;[Num-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,Num-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt; &amp;#61; np.zeros((Num,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\n    &lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;[Num-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;x&lt;/span&gt; &amp;#61; np.linspace(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,Num)\n    &lt;span class=\"hljs-attribute\"&gt;ui&lt;/span&gt; &amp;#61; np.linalg.inv(A)*b\n    &lt;span class=\"hljs-attribute\"&gt;AA&lt;/span&gt; &amp;#61; (-&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;/((np.exp(-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)-np.exp(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;))))*np.exp(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*x)&amp;#43;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;/((np.exp(-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)-np.exp(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;))))*np.exp(-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*x)\n    &lt;span class=\"hljs-attribute\"&gt;ua&lt;/span&gt; &amp;#61; AA\n    &lt;span class=\"hljs-attribute\"&gt;single_err&lt;/span&gt; &amp;#61; np.diag(ui-ua)\n    &lt;span class=\"hljs-attribute\"&gt;sqr_err&lt;/span&gt; &amp;#61; single_err**&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;err&lt;/span&gt; &amp;#61; np.sqrt(np.sum(sqr_err))\n    &lt;span class=\"hljs-attribute\"&gt;return&lt;/span&gt; err\n&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; matplotlib.pyplot as plt \n&lt;span class=\"hljs-attribute\"&gt;N&lt;/span&gt; &amp;#61; np.array([&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;])\n&lt;span class=\"hljs-attribute\"&gt;err&lt;/span&gt; &amp;#61; np.zeros(&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; i in range(len(N)):\n    &lt;span class=\"hljs-attribute\"&gt;err&lt;/span&gt;[i] &amp;#61; ThomasAGiven(N[i])\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.plot(np.log(N),np.log(err))\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.show()\n&lt;span class=\"hljs-attribute\"&gt;p&lt;/span&gt; &amp;#61; np.polyfit(np.log(N),np.log(err),&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)%线性拟合\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(&amp;#39;斜率是&amp;#39;, p[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;结果&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/734770294546147.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;斜率是 0.5244323436897312&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Matlab转成python码 一直在报错 请问能帮我改一下吗？", ["问题遇到的现象和发生背景", "\n", "原要求是用托马斯算法写一个公式", "4u - d2u/dx2 = 0,", "boundary是 u(0) =0, u(1) = 10", "要求算N = 10 20 40 80分别的analytical solution (ua)  和 central difference solution (ui)", "然后求两个解的error", "err=sqrt(sum(diag(ui-ua).^2));", "\n", "问题相关代码，请勿粘贴截图", "\n", "这是我原先的matlab码 ", "\n", "N = ", "10", "; %10, 20, 40,  80", "\nNum = N+2", ";", "\nh = ", "1.0", "/(", "Num-1", ")", ";", "\nx0=ones(", "Num", ",", "1", ")", ";", "\nx1=ones(", "Num-1", ",", "1", ")", ";", "\nA=4*eye(", "Num", ")-(", "diag", "(", "-2*x0", ")+diag(", "x1", ",", "1", ")+diag(", "x1", ",", "-1", "))/(", "h*h", ")", ";", "\nA(", "1", ",:)=0", ";", "\nA(", "Num", ",:)=0", ";", "\nA(", "1", ",", "1", ")=1", ";", "\nA(", "Num", ",Num)=1", ";", "\nb=zeros(", "Num", ",", "1", ")", ";", "\nb(", "1", ")=0", ";", "\nb(", "Num", ")=10", ";", "\nx=linspace(", "0", ",", "1", ",Num)", ";", "\nui=inv(", "A", ")*b", ";", "\nAA=(", "-10/", "((", "exp", "(", "-2", ")-exp(", "2", "))))*exp(", "2", "*x)+(10/((exp(-2)-exp(2))))*exp(", "-2*x", ")", ";", "\nua=AA\nplot(", "x", ",ui,x,ua,'Marker','*')\nsingle_err=diag(", "ui-ua", ")", ";", "\nsqr_err=single_err.^", "2", ";", "\nerr=sqrt(", "sum", "(", "sqr_err", "))", ";", "\nerr", ";", "\n%now I'll try to convert everything to horizontal format and export ua, ui,\n%and x onto the same sheet. %\nsheet = [x", ";ui';ua];", "\n", "\n", "最后可以对每一个N（10，20，40，80）画出一个ua ui的线图，同时给出对应的error值。我想把这个码改写成python形式。 ", "\n", "运行结果及报错内容", "\n", "ValueError                                Traceback (most recent call last)", " in ", "----> 1 ThomasAGiven(10)", "\n", " in ThomasAGiven(N)", "      7     x0 = np.ones((Num,1))", "      8     x1 = np.ones((Num-1,1))", "----> 9     A = 4", "np.eye(Num)-(np.diag(-2", "x0)+np.diag(x1,1)+np.diag(x1,-1))/(h*h)", "     10     A[1,:] = 0", "     11     A[Num,:] = 0", "\n", "ValueError: operands could not be broadcast together with shapes (12,12) (0,) ", "\n", "我的解答思路和尝试过的方法", "\n", "以下是我当前改的，但一直说我operand有问题，向量/矩阵格式不对", "\n", "def", " ThomasAGiven(N):\n    ", "import", " numpy as np\n    ", "import", " matplotlib.pyplot as plt \n    ", "Num", " = N + ", "2", "\n    ", "h", " = ", "1", "/(Num-", "1", ")\n\n    ", "x0", " = np.ones((Num,", "1", "))\n    ", "x1", " = np.ones((Num-", "1", ",", "1", "))\n    ", "A", " = ", "4", "*np.eye(Num)-(np.diag(-", "2", "*x0)+np.diag(x1,", "1", ")+np.diag(x1,-", "1", "))/(h*h)\n    ", "A", "[", "1", ",:] = ", "0", "\n    ", "A", "[Num,:] = ", "0", "\n    ", "A", "[", "1", ",", "1", "] = ", "1", "\n    ", "A", "[Num,Num] = ", "1", "\n    ", "b", " = np.zeros[Num,", "1", "]\n    ", "b", "[", "1", "] = ", "0", "\n    ", "b", "[Num] = ", "10", "\n    ", "x", " = np.linspace(", "0", ",", "1", ",Num)\n    ", "ui", " = np.linalg.inv(A)*b\n\n    ", "AA", " = (-", "10", "/((np.exp(-", "2", ")-np.exp(", "2", "))))*np.exp(", "2", "*x)+(", "10", "/((np.exp(-", "2", ")-np.exp(", "2", "))))*np.exp(-", "2", "*x)\n    ", "ua", " = AA\n    ", "single_err", " = np.diag(ui-ua)\n    ", "sqr_err", " = single_err**", "2", "\n    ", "err", " = np.sqrt(np.sum(sqr_err))\n    ", "return", " err\n", "\n", "我想要达到的结果", "\n", "改成python码，同时把每一个N对应的error值写入注明斜率的loglog图。", "（log每一个N值，同时log每一个对应的error值，然后插入图表，这个线状图应该用matplotlib的哪一个图呢？） "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;将int型转化为float形,方便与后面的numpy公式进行运算&lt;br /&gt;可以简单理解为数字1和2&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python书写数学公式中的疑惑", ["下为两个数学公式 非常疑惑1.与2.代表的含义", "\n", "def f1(x,t): \n    ", "return", " ", "1", "./", "np", ".", "cosh", "(x+", "3", ")*", "np", ".", "exp", "(", "2.", "3j*t)\n\ndef f2(x,t):\n    ", "return", " ", "2", "./", "np", ".", "cosh", "(x)*", "np", ".", "tanh", "(x)*", "np", ".", "exp", "(", "2.", "8j*t)\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;实际上&amp;#xff0c;Python自带的列表list&amp;#xff0c;也是这样倒序的。&lt;br /&gt;在list或numpy的array后面&amp;#xff0c;有三种情况&amp;#xff08;以下x为list类型或array类型&amp;#xff09;&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;x[a]表示x中第a项&amp;#xff08;以0开始&amp;#xff09;&amp;#xff0c;如x[0]表示x中的第一项&amp;#xff0c;x[5]表示x中的第六项&amp;#xff0c;以此类推。&lt;br /&gt;特殊用法&amp;#xff1a;x[-1]表示x中的最后一项&amp;#xff0c;以此类推。&lt;/li&gt;&lt;li&gt;x[a:b]表示将x中从a开始到b这个部分&amp;#xff08;不包括b&amp;#xff09;&amp;#xff0c;即由x[a],x[a&amp;#43;1],x[a&amp;#43;2],...,x[b]这个部分组成的列表复制一份。&lt;br /&gt;特殊用法&amp;#xff1a;x[:b]表示从x开头一直到b这个部分&amp;#xff08;不包括b&amp;#xff09;&amp;#xff0c;同理&amp;#xff0c;x[a:]表示x的a一直到结尾这个部分&amp;#xff0c;而x[:]则是将x列表完全复制一份。&lt;strong&gt;注意&amp;#xff01;不能直接将x赋值给其他变量&amp;#xff01;否则&amp;#xff0c;其中一个列表发生变化&amp;#xff0c;另一个列表也会跟着发生相同的变化&amp;#xff0c;只能使用x[:]的方法将副本赋值给另一个变量。&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;x[a:b:k]表示与2的用法几乎相同的作用&amp;#xff0c;但是它是从a开始&amp;#xff0c;每隔k个元素地选取。如设x为[0,1,2,3,4,5]&amp;#xff0c;则x[::2]表示从开头开始&amp;#xff0c;到结尾&amp;#xff0c;选特定的值[0,2,4]&amp;#xff08;到5之后因为没有值了就忽略&amp;#xff09;。&lt;br /&gt;&lt;em&gt;特殊用法&amp;#xff1a;即问题所述&amp;#xff0c;a[::-1]&amp;#xff0c;表示从最后开始&amp;#xff0c;到最前面&amp;#xff0c;因为每个值是列表&amp;#xff0c;而里层列表还是不变的顺序&amp;#xff0c;只改变外层列表的顺序。因此为[[3 4][2 3][1 2]]。这也是翻转列表的一种常用方式。&lt;/em&gt;&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的问题：如何理解numpy倒序", ["给出下列代码：", "\n", "import numpy as np\n", "a", " = np", ".array", "(", "[[1, 2]", ",", "[2, 3]", ",", "[3, 4]", "])\n", "a", " = ", "a", "[::-1]", "\n", "print", "(a)", "\n", "\n", "输出：", "\n", "[[3 4]\n [2 3]\n [1 2]]", "\n", "\n", "a = a[::-1]中第一个：如何理解？感谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;K-Means算法从随机初始化簇质心开始。每次运行KMeans时&amp;#xff0c;此选择都会有所不同&amp;#xff0c;可能会产生不同的结果。为了得到可再现的结果&amp;#xff0c;可以在KMeans中使用random_state参数&amp;#xff0c;这将修复簇中心线的初始选择&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attr\"&gt;model&lt;/span&gt; &amp;#61; KMeans(n_clusters&amp;#61;number_of_clusters, \n               &lt;span class=\"hljs-attr\"&gt;init&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;k-means&amp;#43;&amp;#43;&amp;#39;&lt;/span&gt;, \n               &lt;span class=\"hljs-attr\"&gt;max_iter&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;, \n               &lt;span class=\"hljs-attr\"&gt;n_init&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;, \n               &lt;span class=\"hljs-attr\"&gt;random_state&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;123&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的问题，如何解决？", ["python在跑k均值聚类时候的时候，每次运行结果都不一样，求帮忙瞅瞅是哪出问题了？", "\n", "import numpy as np\n", "from", " sklearn.datasets import load_iris\niris = load_iris()\nx,y =iris.data,iris.target\n", "#x=np.array([[1,1,1,1],[10,10,10,10],[20,20,20,20],[5,5,5,5],[3,3,3,3],[6,6,6,6],[25,25,25,25]])", "\ncentroids_a=[]\nlist1=[]\n", "#聚类中心", "\ndef init_random_centroids(k,x):\n    ", "data1", "=x.shape[0]\n    suiji_a =np.random.choice(data1,k,", "replace", "=", "False", ")\n    ", "for", " i ", "in", " suiji_a:\n        xlist = x[i]\n        centroids_a.append(xlist)\n        centroids =np.array(centroids_a)\n    return centroids\n\n\n", "#计算距离", "\ndef euclidean_distance(one_sample, x):\n    #", "print", "(", "\"中心点\"", ",x)\n    #", "print", "(", "\"样本\"", ",one_sample)\n    #", "print", "(", "\"单个样本\"", ",one_sample)\n    #", "print", "(", "\"中心\"", ",x)\n    distances= np.sum((x-one_sample)*", "*2", ")\n    #", "print", "(", "\"距离\"", ",distances)\n    return distances\n\n\n", "#返回离样本最近的中心索引", "\ndef _closest_centroid(sample, centroids):\n    k = centroids.shape[0]\n    #", "print", "(", "\"k\"", ",k)\n    #", "print", "(", "\"聚类中心\"", ",centroids)\n    list_distance =[]\n    ", "for", " i ", "in", " range(k):\n        ", "a", "=euclidean_distance(one_sample=sample, ", "x", "=centroids[i])\n        list_distance.append(a)\n        # ", "print", "(", "\"list\"", ",list_distance)\n        ", "distance_list", "=np.array(list_distance)\n        id =np.argmin(distance_list)\n    #", "print", "(", "\"单个样本与聚类中心的距离：\"", ",distance_list)\n    #", "print", "(", "\"距离最近的中心索引\"", ",id)\n    return id\n\n", "#将所有样本进行归类，归类规则就是将该样本归类到与其最近的中心", "\ndef create_clusters(k,centroids, x):\n    clusters = [[] ", "for", " _ ", "in", " range(k)]\n    #", "print", "(", "\"cen\"", ",centroids)\n    ", "for", " sample ", "in", " x:\n        ", "ys", "=_closest_centroid(sample, centroids)\n        #", "print", "(ys)\n        clusters[ys].append(sample)\n    #", "print", "(", "\"0\"", ",clusters[0])\n    #", "print", "(", "\"1\"", ",clusters[1])\n    #", "print", "(", "\"2\"", ",clusters[2])\n    return clusters\n\n", "#中心点更新", "\ndef update_centroids(k,clusters):\n    #", "print", "(k)\n    # ", "print", "(", "\"类型0\"", ",clusters[0])\n    # ", "print", "(", "\"类型1\"", ",clusters[1])\n    # ", "print", "(", "\"类型2\"", ",clusters[2])\n    ", "for", " i ", "in", " range(k):\n        centroid = np.mean(clusters[i], ", "axis", "=0)\n        #", "print", "(", "\"平均聚点\"", ",centroid)\n        centroids[i] = centroid\n    ", "print", "(", "\"新聚类中心\"", ",centroids)\n    return centroids\n\n\n", "# 将所有样本进行归类，其所在的类别的索引就是其类别标签", "\ndef get_cluster_labels(clusters, x):\n    #", "print", "(clusters)\n    y_pred = []\n    ", "for", " sample ", "in", " x:\n        ", "ys", "=_closest_centroid(sample=sample, ", "centroids", "=centroids)\n        y_pred.append(ys)\n    ", "print", "(y_pred)\n    return y_pred\n\n\n\n", "#随机选取k个聚类中心", "\ncentroids = init_random_centroids(3, x)\n", "for", " number ", "in", " range(20000000):\n    #样本归类\n    cluster = create_clusters(", "k", "=3,centroids=centroids,x=x)\n    former_centroids = centroids\n    #更新新的聚类中心\n    clusters = update_centroids(", "k", "=3,clusters=cluster)\n    diff = centroids - former_centroids\n    ", "if", " diff.any() <0.000001:\n        get_cluster_labels(", "clusters", "=cluster,x=x)\n        break\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Student&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; num; &lt;span class=\"hljs-comment\"&gt;//学号&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; name[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;]; &lt;span class=\"hljs-comment\"&gt;//姓名&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; sex; &lt;span class=\"hljs-comment\"&gt;//性别&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; score; &lt;span class=\"hljs-comment\"&gt;//成绩&lt;/span&gt;\n};\n\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;SLink&lt;/span&gt;\n{\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Student&lt;/span&gt; s;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;SLink&lt;/span&gt;* next;\n} *np;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;createLink&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    np &amp;#61; &lt;span class=\"hljs-literal\"&gt;nullptr&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;insertData&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Student s)&lt;/span&gt; \n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (np &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;nullptr&lt;/span&gt;){\n        np &amp;#61; (&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; SLink*)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; SLink));\n        np-&amp;gt;s &amp;#61; s;\n        np-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;nullptr&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    SLink* pPrevNode &amp;#61; &lt;span class=\"hljs-literal\"&gt;nullptr&lt;/span&gt;;\n    SLink* pNode &amp;#61; np;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (pNode) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (s.num &amp;lt;&amp;#61; pNode-&amp;gt;s.num) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (pPrevNode &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;nullptr&lt;/span&gt;) {\n                np &amp;#61; (&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; SLink*)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; SLink));\n                np-&amp;gt;s &amp;#61; s;\n                np-&amp;gt;next &amp;#61; pNode;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n                pPrevNode-&amp;gt;next &amp;#61; (&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; SLink*)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; SLink));\n                pPrevNode-&amp;gt;next-&amp;gt;s &amp;#61; s;\n                pPrevNode-&amp;gt;next-&amp;gt;next &amp;#61; pNode;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (pNode-&amp;gt;next &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;nullptr&lt;/span&gt;){\n            pNode-&amp;gt;next &amp;#61; (&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; SLink*)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; SLink));\n            pNode-&amp;gt;next-&amp;gt;s &amp;#61; s;\n            pNode-&amp;gt;next-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;nullptr&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        pPrevNode &amp;#61; pNode;\n        pNode &amp;#61; pNode-&amp;gt;next;\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;deleteData&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; num)&lt;/span&gt;\n&lt;/span&gt;{\n    SLink* pPrevNode &amp;#61; &lt;span class=\"hljs-literal\"&gt;nullptr&lt;/span&gt;;\n    SLink* pNode &amp;#61; np;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (pNode){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (num &amp;#61;&amp;#61; pNode-&amp;gt;s.num){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (pPrevNode &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;nullptr&lt;/span&gt;){\n                np &amp;#61; pNode-&amp;gt;next;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n                pPrevNode-&amp;gt;next &amp;#61; pNode-&amp;gt;next;\n            }\n            &lt;span class=\"hljs-comment\"&gt;//SLink* pNext &amp;#61; pNode-&amp;gt;next;&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(pNode);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n           &lt;span class=\"hljs-comment\"&gt;// pNode &amp;#61; pNext;&lt;/span&gt;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n            pPrevNode &amp;#61; pNode;\n            pNode &amp;#61; pNode-&amp;gt;next;\n        }\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;printStudent&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Student&amp;amp; stud)&lt;/span&gt;\n&lt;/span&gt;{\n    cout &amp;lt;&amp;lt; stud.num &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;\\t&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; stud.name &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;\\t&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; (stud.sex ? &lt;span class=\"hljs-string\"&gt;&amp;#34;male&amp;#34;&lt;/span&gt; : &lt;span class=\"hljs-string\"&gt;&amp;#34;female&amp;#34;&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;\\t&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; stud.score &amp;lt;&amp;lt; endl;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;printLink&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; \n&lt;/span&gt;{\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;num\\t&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;name\\t&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;sex\\t&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;score&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    SLink* pNode &amp;#61; np;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (pNode) {\n        &lt;span class=\"hljs-built_in\"&gt;printStudent&lt;/span&gt;(pNode-&amp;gt;s);\n        pNode &amp;#61; pNode-&amp;gt;next;\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;createLink&lt;/span&gt;();\n\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Student&lt;/span&gt; a {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;,  &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;};\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Student&lt;/span&gt; b {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;,  &lt;span class=\"hljs-number\"&gt;90&lt;/span&gt;};\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Student&lt;/span&gt; c {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;c&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;,  &lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;};\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Student&lt;/span&gt; d {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;d&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;,  &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;};\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Student&lt;/span&gt; e {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;43&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;e&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;,  &lt;span class=\"hljs-number\"&gt;99&lt;/span&gt;};\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Student&lt;/span&gt; f {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;f&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;,  &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;};\n\n    &lt;span class=\"hljs-built_in\"&gt;insertData&lt;/span&gt;(a);\n    &lt;span class=\"hljs-built_in\"&gt;insertData&lt;/span&gt;(b);\n    &lt;span class=\"hljs-built_in\"&gt;insertData&lt;/span&gt;(c);\n    &lt;span class=\"hljs-built_in\"&gt;insertData&lt;/span&gt;(d);\n    &lt;span class=\"hljs-built_in\"&gt;insertData&lt;/span&gt;(e);\n    &lt;span class=\"hljs-built_in\"&gt;insertData&lt;/span&gt;(f);\n\n    &lt;span class=\"hljs-built_in\"&gt;printLink&lt;/span&gt;();\n    &lt;span class=\"hljs-built_in\"&gt;deleteData&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printLink&lt;/span&gt;();\n\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    cin &amp;gt;&amp;gt; i;\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/781147411846141.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["建立某链表的有关问题", ["‎建立一个链表，链表节点用于存储如下结构体：", "\n", "‍", "‎        struct Student", "\n", "‍", "‎ { long num;            //学号", "\n", "‍", "‎ char name[20];    //姓名", "\n", "‍", "‎ char sex;              //性别", "\n", "‍", "‎ float score;          //成绩", "\n", "‍", "‎ };", "\n", "‍", "‎要求：使用函数和指针进行合理的编程，", "\n", "‍", "‎    建立链表", "\n", "‍", "         struct SLink", "\n", "‍", "         {     struct Student s;", "\n", "‍", "               struct SLink *next;", "\n", "‍", "         } *np;", "\n", "‍", "‎    ，并设计如下函数：", "\n", "‍", "‎    1）createLink()生成一个空链表；", "\n", "‍", "‎    2）insertData(struct Student s)按学生学号由小到大的顺序，将s插入到链表合适的位置；", "\n", "‍", "‎      提示：使用np=(struct SLink *) malloc(sizeof(struct SLink)开辟内存以建立新节点。", "\n", "‍", "‎    3）deleteData(long num)删除学号为num的节点。", "\n", "‍", "‎      提示：使用free(np)释放被删除节点的内存; ", "\n", "‍", "‎    4）printLink()顺序打印输出链表各节点的内容。", "\n", "‍"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;extract_features在哪里调用呗&amp;#xff0c;路径就是在调用的时候输入的&amp;#xff0c;例如Matcher.match(image_path,5),这里的imgpath就是图像的路径。&lt;br /&gt;或者你可以像我这样在调用里面print一下路径&amp;#xff0c;就知道每次调用的图像在哪里&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;def extract_features(image_path, &lt;span class=\"hljs-attribute\"&gt;vector_size&lt;/span&gt;&amp;#61;32):\n    image &amp;#61; imread(image_path, &lt;span class=\"hljs-attribute\"&gt;mode&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;RGB&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(image_path)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["没有添加路径 不知道问题在哪 也没有报错 可否讲下代码", ["没有报错 不知道哪里有问题 程序是github上找的", "import cv2", "import numpy as np", "import pickle as pk", "import random", "import os", "import matplotlib.pyplot as plt", "from imageio import imread", "\n", "def extract_features(image_path, vector_size=32):", "    image = imread(image_path, mode=\"RGB\")", "    try:", "        alg = cv2.SIFT_create()", "        kps = alg.detect(image)", "        kps = sorted(kps, key=lambda x: -x.response)[:vector_size]", "        kps, dsc = alg.compute(image, kps)", "        dsc = dsc.flatten()", "        needed_size = (vector_size * 64)", "        if dsc.size < needed_size:", "            dsc = np.concatenate([dsc, np.zeros(needed_size - dsc.size)])", "    except cv2.error as e:", "        print('Error: ', e)", "        return None", "\n", "return", " dsc\n", "\n", "def batch_extractor(images_path, pickled_db_path):", "    files = [os.path.join(images_path, p) for p in sorted(os.listdir(images_path))]", "\n", "result", " = {}\n", "for", " f ", "in", " files:\n    print('Extracting features ", "from", " image %s' % f)\n    ", "name", " = f.split('/')[", "-1", "].lower()\n    ", "result", "[", "name", "] = extract_features(f)\n\n", "# saving all our feature vectors in pickled file", "\n", "with", " open(pickled_db_path, 'w') ", "as", " fp:\n    pickle.dump(", "result", ", fp)\n", "\n", "class Matcher(object):", "\n", "def", " ", "__init__", "(", "self, pickled_db_path=", "\"features.pck\"", "):\n    ", "with", " ", "open", "(pickled_db_path) ", "as", " fp:\n        self.data = pickle.load(fp)\n    self.names = []\n    self.matrix = []\n    ", "for", " k, v ", "in", " self.data.iteritems():\n        self.names.append(k)\n        self.matrix.append(v)\n    self.matrix = np.array(self.matrix)\n    self.names = np.array(self.names)\n\n", "def", " ", "cos_cdist", "(", "self, vector", "):\n    ", "# getting cosine distance between search image and images database", "\n    v = vector.reshape(", "1", ", -", "1", ")\n    ", "return", " scipy.spatial.distance.cdist(self.matrix, v, ", "'cosine'", ").reshape(-", "1", ")\n\n", "def", " ", "match", "(", "self, image_path, topn=", "5", "):\n    features = extract_features(image_path)\n    img_distances = self.cos_cdist(features)\n    ", "# getting top 5 records", "\n    nearest_ids = np.argsort(img_distances)[:topn].tolist()\n    nearest_img_paths = self.names[nearest_ids].tolis\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/723502006666155.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;int是什么鬼&amp;#xff1f;改成__init__&amp;#xff0c;不然你都没有初始化model&amp;#xff0c;导致你的model就是空的&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["实现pytorch时出现空参数问题", ["\n", "import", " torch\n", "import", " torch.nn ", "as", " nn\n", "import", " numpy ", "as", " np\n\n", "x_train", " = [i for i ", "in", " range(", "10", ")]\n", "x_train", " = np.array(x_train, dtype=np.float32)\n", "x_train", ".reshape(-", "1", ", ", "1", ")\n", "y_train", " = [", "2", " * i + ", "1", " for i ", "in", " range(", "10", ")]\n", "y_train", " = np.array(y_train, dtype=np.float32)\n", "y_train", ".reshape(-", "1", ", ", "1", ")\n", "\n\n", "class", " ", "MyModule", "(", "nn", ".", "Module", "):\n    def __int__(", "self", ", ", "input_dim", ", ", "output_dim", "):\n        super(", "MyModule", ", ", "self", ").__int__()\n        self.linear = nn.", "Linear", "(1, 1)\n\n    def forward(", "self", ", ", "x", "):\n        return self.linear(", "x", ")\n\n\n# 定义网络结果，损失函数，优化器\nif torch.cuda.is_available():\n    model = ", "MyModule", "().cuda()\nelse:\n    model = ", "MyModule", "()\nlea = 0.0001\noptimizer = torch.optim.", "SGD", "(", "model", ".", "parameters", "(), lr=lea)\ncriterion = nn.", "MSELoss", "()\nepochs = 10\nfor epoch in range(", "epochs", "):\n    optimizer.zero_grad()\n    if torch.cuda.is_available():\n        inputs = torch.from_numpy(", "x_train", ").cuda()\n        labels = torch.from_numpy(", "y_train", ").cuda()\n    else:\n        inputs = torch.from_numpy(", "x_train", ")\n        labels = torch.from_numpy(", "y_train", ")\n    outs = model(", "x_train", ")\n    loss = criterion(", "labels", ", ", "y_train", ")\n    loss.backward()\n    optimizer.step()\n    print('", "epoch", " {}\\", "tloss", " {}'.", "format", "(", "epoch", ", ", "loss", "))\n\n", "\n", "\n", "pytorch版本   1.12.1+cu116", "代码如上，优化器那行报错了，如下。", "ValueError: optimizer got an empty parameter list"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;本身jpg就没有alpha通道&amp;#xff0c;换句话说jpg没有透明度&amp;#xff0c;麻烦采纳一下哟&amp;#xff0c;谢谢๑•́₃•̀๑&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["用matplotlib画图保存出来后，为什么png格式坐标轴及标题的背景区域是透明的", ["用matplotlib画图保存，以png格式输出的图片，坐标轴背景为透明，改成jpg后背景就是白色的了，这是为什么呢", "\n", "import numpy as np\nimport matplotlib", ".pyplot", " as plt\n\nnp", ".random", ".seed", "(", "19680801", ")\nN=", "50", "\nx=np", ".random", ".rand", "(N)\ny=np", ".random", ".rand", "(N)\ncolors=np", ".random", ".rand", "(N)\narea=(", "30", "*np", ".random", ".rand", "(N))**", "2", "\nplt", ".title", "(", "'random'", ")\nplt", ".scatter", "(x,y,s=area,c=colors,alpha=", "0.5", ")\n\nplt", ".savefig", "(", "'E:\\jupyter notebook learning./test5.jpg'", ", dpi=", "600", ")\nplt", ".show", "()\n\n", "\n", "这样的图片：", "\n", "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnp.random.seed(19680801)\n", "N", "=50\n", "x", "=np.random.rand(N)\n", "y", "=np.random.rand(N)\n", "colors", "=np.random.rand(N)\narea=(30*np.random.rand(N))*", "*2", "\nplt.title(", "'random'", ")\nplt.scatter(x,y,", "s", "=area,c=colors,alpha=0.5)\n\nplt.savefig(", "fname", "=", "'C:\\\\bubble\\\\HH.png'", ", ", "dpi", "=600)\nplt.show() \n", "\n", "这样的图片："]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;scanf_s&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;a)&lt;/span&gt;&lt;/span&gt;  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;改成&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;scanf_s&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;, &amp;amp;a)&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;double是双精度类型要用 %lf 输入  不能用 %f 输入 , 输出时用%f和%lf都可以&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main(void)\n{\n    double a;\n\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Enter a floating-point value:&amp;#34;&lt;/span&gt;);\n    scanf_s(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;, &amp;amp;a); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; %f 改成 %lf\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n fixed-point notation: %lf&amp;#34;&lt;/span&gt;, a);  &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; %f 改成 %lf\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n exponential notation: %le&amp;#34;&lt;/span&gt;, a);  &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; %e 改成 %le\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\np notation: %a&amp;#34;&lt;/span&gt;, a);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["数据类型用float无问题，double则结果错误，如何解决？", ["问题遇到的现象和发生背景", "\n", "如果a数据类型用double不能正确显示结果，如果用float则无问题", "编译器VS2022", "\n", "问题相关代码，请勿粘贴截图", "\n", "#", "include", "<stdio.h>", "\n\n", "int", " ", "main", "(", "void", ")", "\n", "{\n    ", "double", " a;\n\n    ", "printf", "(", "\"Enter a floating-point value:\"", ");\n    ", "scanf_s", "(", "\"%f\"", ", &a);\n    ", "printf", "(", "\"\\n fixed-point notation: %f\"", ", a);\n    ", "printf", "(", "\"\\n exponential notation: %e\"", ", a);\n    ", "printf", "(", "\"\\np notation: %a\"", ", a);\n\n    ", "return", " ", "0", ";\n}\n", "\n", "运行结果及报错内容", "\n", "如图为数据类型设为double时结果", "\n", "\n", "如图为数据类型为float时的结果", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;目前来看难度较大&amp;#xff0c;socrecardpy只能应用线性模型&amp;#xff0c;你可以试试xgb回归与sgd回归&amp;#xff0c;必须带有.coef_指令的模型&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["scorecardpy的模型改写问题", ["我用了scorecardpy包来做一个评分卡模型，现在问题是，我想将它自带的逻辑回归预测模型替换为我自己的autogluon模型，但是报错了，代码是这样的", "\n", "import pandas as pd\nimport numpy as np\nimport scorecardpy as sc\n\n\ndat=pd", ".read_csv", "(", "\"dat.csv\"", ",index_col=", "0", ")\ndat\n\ndt_s = sc", ".var_filter", "(dat, y=", "\"isDefault\"", ")\n\ndt_s", ".info", "()\n\ntrain, test = sc", ".split_df", "(dt_s,", "'isDefault'", ",ratio=", "0.8", ")", ".values", "()\nbins = sc", ".woebin", "(dt_s, y=", "'isDefault'", ",method=", "\"chimerge\"", ")\nsc", ".woebin_plot", "(bins)\ntrain_woe = sc", ".woebin_ply", "(train, bins)\ntest_woe = sc", ".woebin_ply", "(test, bins)\ny_train = train_woe", ".loc", "[:,", "'isDefault'", "]", "\nX_train = train_woe", ".loc", "[:,train_woe.columns != ", "'isDefault'", "]", "\ny_test = test_woe", ".loc", "[:,", "'isDefault'", "]", "\nX_test = test_woe", ".loc", "[:,train_woe.columns != ", "'isDefault'", "]", "\nmport autogluon\nfrom autogluon", ".tabular", " import TabularDataset,TabularPredictor  \nimport pandas as pd\nimport numpy as np\nlabel=", "'isDefault'", "\ntrain_data=TabularDataset(train_woe )\nmetric = ", "'roc_auc'", "\ntime_limit=", "60", "\npredictor=TabularPredictor(label=", "label", ",eval_metric=metric)", ".fit", "(train_data,presets=", "'best_quality'", ",time_limit=time_limit,auto_stack=True)\ntest_data=TabularDataset(test_woe)\npredictor", ".predict_proba", "(train_data)\ntrain_proba=predictor", ".predict_proba", "(train_data)\ntrain_proba=train_proba", ".values", "[:,1]", "\ntrain_proba = np", ".array", "(train_proba)", ".flatten", "() \ntrain_proba\npredictor", ".predict_proba", "(test_data)\nauto_proba=predictor", ".predict_proba", "(test_data)\nauto_proba=auto_proba", ".values", "[:,1]", "\nauto_proba = np", ".array", "(auto_proba)", ".flatten", "() \nauto_proba\nimport toad\nfrom toad", ".metrics", " import KS, AUC\n\n\n\n", "print", "(", "'Training error'", ")", "\n", "print", "(", "'KS:'", ", KS(train_proba,y_train)", ")\n", "print", "(", "'AUC:'", ", AUC(train_proba,y_train)", ")\n\n\n\n\n", "print", "(", "'\\nTest error'", ")", "\n", "print", "(", "'KS:'", ", KS(auto_proba,y_test)", ")\n", "print", "(", "'AUC:'", ", AUC(auto_proba,y_test)", ")\n\ncard = sc", ".scorecard", "(bins,predictor, X_train.", "columns", ")\n", "\n", "问题出在这个最后一句，我将我的模型predictor替换了scorecard包自带的lr，就显示报错", "'TabularPredictor' object has no attribute 'coef_'", "这个怎么解决？", "谢谢各位了"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;哦不好意思大家&amp;#xff01;我解决了&amp;#xff0c;是在声明model时没有传入相关的参数&amp;#xff0c;把第五行改成我定义的&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;    &lt;span class=\"hljs-attribute\"&gt;model&lt;/span&gt; &amp;#61; FCN.get_fcn8s_model(input_shape&amp;#61;(&lt;span class=\"hljs-number\"&gt;256&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;256&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;), class_no&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;就好啦&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于Keras模型导出遇到Model expects 0 top-level weight(s). Received 1 saved top-level weight(s)的问题！", ["问题遇到的现象和发生背景", "\n", "Keras训练模型结束后想要直接使用保存好的weights来预测模型，结果遇到了标题所示的错误", "\n", "问题相关代码", "\n", "if", " __name__ == ", "\"__main__\"", ":\n    ", "# Use VOC 2012 Dataset", "\n    ", "horse_path", " = 'membrane'\n    ", "batch_size", " = ", "2", "\n    ", "model", " = FCN.get_fcn8s_model()\n    ", "print", "('======== Start Test ===========')\n    ", "model", ".load_weights('fcn32s.h5')\n    ", "# 取val图片，测试一下效果", "\n    ", "val_gen2", " = horse_test_gen.get_horse_generator(horse_path, batch_size=", "1", ", input_hw=(", "256", ", ", "256", ", ", "3", "),\n                                                  ", "mask_hw", "=(", "256", ", ", "256", ", ", "2", "))\n    ", "i", " = ", "0", "\n    ", "for", " val_images in val_gen2:\n        ", "img_np", " = val_images[", "0", "]\n        ", "img_np", " = (img_np + ", "1", ".) * ", "128", "\n        ", "im0", " = Image.fromarray(np.uint8(img_np))\n        ", "im0", ".save('output/{}_img.jpg'.format(i))\n\n        ", "res", " = model.predict(val_images)[", "0", "]\n        ", "pred_label", " = res.argmax(axis=", "2", ")\n        ", "pred_label", "[pred_label == ", "1", "] = ", "255", "\n        ", "im1", " = Image.fromarray(np.uint8(pred_label))\n        ", "im1", ".save('output/{}_pred.png'.format(i))\n\n        ", "i", " += ", "1", "\n        ", "if", " i == ", "3", ":\n            ", "print", "('End test')\n            ", "sys", ".exit(", "0", ")\n", "\n", "运行结果及报错内容", "\n", "======== ", "Start", " Test ===========\nTraceback (most recent ", "call", " last):\n  File \"E:/PycharmProjects/CloudInn/image_segmentation-master/main.py\", ", "line", " ", "42", ", ", "in", " <module>\n    model.load_weights(", "'fcn32s.h5'", ")\n  File \"E:\\PycharmProjects\\CloudInn\\venv\\lib\\site-packages\\keras\\engine\\training_v1.py\", ", "line", " ", "214", ", ", "in", " load_weights\n    ", "return", " super(Model, self).load_weights(filepath, by_name, skip_mismatch)\n  File \"E:\\PycharmProjects\\CloudInn\\venv\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", ", "line", " ", "67", ", ", "in", " error_handler\n    ", "raise", " e.with_traceback(filtered_tb) ", "from", " ", "None", "\n  File \"E:\\PycharmProjects\\CloudInn\\venv\\lib\\site-packages\\keras\\saving\\hdf5_format.py\", ", "line", " ", "748", ", ", "in", " load_weights_from_hdf5_group\n    ", "raise", " ValueError(\nValueError: Weight count mismatch ", "for", " top-", "level", " weights ", "when", " loading weights ", "from", " file. Model expects ", "0", " top-", "level", " weight(s). Received ", "1", " saved top-", "level", " weight(s)\n", "\n", "自己去网上搜索也没有找到个所以然，为什么会说“模型要求0个顶级权重。收到1个已保存的顶级权重。”，这个要怎么解决？", "错误报在“model.load_weights('fcn32s.h5')”这里"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;对&amp;#xff0c;你在&lt;br /&gt;wb&amp;#61;xlwt.Workbook()&lt;br /&gt;ws&amp;#61;wb.add_sheet(&amp;#39;明细&amp;#39;)&lt;br /&gt;style &amp;#61; xlwt.XFStyle()&lt;br /&gt;font &amp;#61; xlwt.Font()&lt;br /&gt;font.name &amp;#61; &amp;#39;微软雅黑&amp;#39; # 设置字体&lt;br /&gt;font.height &amp;#61; 20*8 #设置字号为10号&lt;br /&gt;style.font &amp;#61; font&lt;br /&gt;ws.write(0, 10, 10,style)&lt;br /&gt;wb.save(&amp;#39;D:/python/数据.xlsx&amp;#39;)&lt;br /&gt;这里设置了格式&lt;br /&gt;但你&lt;br /&gt;df1&amp;#61;pd.read_excel(&amp;#39;D:/python/df1.xlsx&amp;#39;)&lt;br /&gt;df1.to_excel(&amp;#39;D:/python/数据.xlsx&amp;#39;)&lt;br /&gt;你读取了一个文件&amp;#xff0c;然后保存&amp;#xff0c;新保存的将以前的覆盖掉了&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pandas to excel 修改单元格格式问题", ["各位巨佬好，我现在遇到一个问题。就是用pandas数据处理做个一个dataframe，现在想导入到excel里，并且设置下单元格的格式，字体8号和微软雅黑等，但是用了下面的代码后，格式并没有修改，", "代码如下：", "import warnings", "warnings.filterwarnings('ignore', category=UserWarning, module='openpyxl')", "import pandas as pd", "import numpy as np", "import xlwt", "\n", "wb=xlwt.Workbook()", "ws=wb.add_sheet('明细')", "style = xlwt.XFStyle()", "font = xlwt.Font()", "font.name = '微软雅黑' # 设置字体", "font.height = 20*8 #设置字号为10号", "style.font = font", "ws.write(0, 10, 10,style)", "wb.save('D:/python/数据.xlsx')", "\n", "df1=pd.read_excel('D:/python/df1.xlsx')", "df1.to_excel('D:/python/数据.xlsx')", "\n", "麻烦各位看下，我这个代码有什么问题吗，为啥最后单元格的格式并没有修改，谢谢各位了"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;路径而且建议不要文件夹带有空格&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/328705897466128.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么会报错啊，代码应该没有问题吧", ["代码：", "from PIL import Image", "import numpy as np", "import matplotlib.pyplot as plt", "img=np.array(Image.open(\"C:\\Users\\lenovo\\Pictures\\Saved Pictures\\u=2404042546,574440023&fm=26&fmt=auto.webp\").convert(\"L\"))", "plt.imshow(img,plt.cm.gray)", "print(img)", "row=(img.shape[0])", "print(row)"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;使用where函数进行条件判断&amp;#xff0c;代码这样写&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt; &amp;#61; np.array([[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;],[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;],[&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;]])\n&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt; &amp;#61; np.array([[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;],[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;],[&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;]])\n&lt;span class=\"hljs-attribute\"&gt;c&lt;/span&gt; &amp;#61; np.array([[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;],[&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;],[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;]])\n&lt;span class=\"hljs-attribute\"&gt;d&lt;/span&gt;&amp;#61;np.where(c&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,a&amp;#43;b,a)\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(d)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-string\"&gt;[[ 1  4  3]\n [ 4 10 12]\n [14  8  9]]&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如有帮助 &amp;#xff0c;请点采纳 。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于python numpy ndarray 遍历太慢的问题", ["假设有三个矩阵，如下", "\n", "a", " = np.array([[", "1", ",", "2", ",", "3", "],[", "4", ",", "5", ",", "6", "],[", "7", ",", "8", ",", "9", "]])\n", "b", " = np.array([[", "1", ",", "2", ",", "3", "],[", "4", ",", "5", ",", "6", "],[", "7", ",", "8", ",", "9", "]])\n", "c", " = np.array([[", "1", ",", "0", ",", "6", "],[", "8", ",", "0", ",", "0", "],[", "0", ",", "2", ",", "5", "]])\n", "\n", "想通过判断c矩阵相应位置的值，来决定a相应位置的值是否与b相应位置的值相加，直接想到的做法是遍历，如下：", "\n", "for", " ", "i", " ", "in", " range(", "3", "):\n    ", "for", " j ", "in", " range(", "3", "):\n        ", "if", " c", "[i]", "[j]", "==", "0", ":\n            ", "a", "[i]", "[j]", " = ", "a", "[i]", "[j]", " + ", "b", "[i]", "[j]", "\n", "\n", "但当a,b,c都很大时运算相当慢，有没有这种运算的矢量写法来提升效率？不用for循环"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;python中按数字切片的时候, 是包含前面不包含后面. 类似于数学中的  [1:4)&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于numpy切片的问题的疑惑", ["我在学习numpy切片的时候碰到一个疑惑", "\n\n", "\n", "import numpy as np\na = np.array([[11, 12, 13, 14, 15],\n              [16, 17, 18, 19, 20],\n              [21, 22, 23, 24, 25],\n              [26, 27, 28 ,29, 30],\n              [31, 32, 33, 34, 35]])\nprint(a[0, 1:4])", "\n\n", "结果为什么是", "\n\n", "\n", "[12 13 14]", "\n\n", "而不是", "\n\n", "\n", "[12 13 14 15]", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/kevinelstri/article/details/52937236", "Konwledge_Point": "应对NP完全问题", "Question": ["python分组绘制箱线图的问题 ", ["初学者。我现在有这样一张类似以下形式的excel表：", "\n编号 性别 工资", "\n1 男 5000", "\n2 女 4000", "\n3 男 8000", "\n4 男 7000", "\n5 女 1000", "\n6 男 6000", "\n7 女 3000", "\n我已经用pandas读入excel表了，用groupby对性别分组，现在想要用matplotlib在一张图上分别绘制男和女的工资的箱线图，但是好像出现了问题，不知道应该怎么解决.", "\nPS：这里原始表格包含中文", "\n我编的代码如下：", "\n\n", "import pandas as pd", "\nimport matplotlib.pyplot as plt", "\nimport numpy as np", "\n\n", "data = pd.read_excel('XXX.xlsx')", "\ndata1 = data.groupby('性别')", "\nplt.boxplot(data1['工资]) "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;使用groupby方法。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;import numpy as np\nimport pandas as pd\n \ndf &amp;#61; pd.DataFrame()\nn &amp;#61; 200\ndf[&amp;#39;category&amp;#39;] &amp;#61; np.random.choice((&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;), n)\ndf[&amp;#39;data1&amp;#39;] &amp;#61; np.random.randint(1, 100, len(df))\ndf[&amp;#39;data2&amp;#39;] &amp;#61; np.random.randint(1, 100, len(df))\nprint(df)\n\nrowIndex &amp;#61; pd.Series()\nfor name, group in df.groupby(&amp;#39;category&amp;#39;):\n\theading &amp;#61; group[group[&amp;#39;data1&amp;#39;]&amp;lt;group[&amp;#39;data2&amp;#39;].max()].sort_values(by&amp;#61;&amp;#39;data2&amp;#39;, ascending&amp;#61;False).head(4)\n\trowIndex &amp;#61; pd.concat([rowIndex, pd.Series(heading.index)])\nout &amp;#61; df.loc[rowIndex]\nprint(out)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-R\"&gt;    category  data1  data2\n71         A     23     99\n115        A     58     96\n167        A     87     95\n174        A     12     95\n119        B     12     99\n135        B     12     98\n117        B     90     98\n88         B     19     97&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["dataframe 分类排序问题2", ["我之前问过类似的问题，见链接： ", "https://ask.csdn.net/questions/7409644", "\n\n", "现在碰到更复杂的问题，我需要对dataframe按照类分类，每类按照该类data2的值最大的时候的data1值过滤该类，然后排序，请问该如何优化？", "\n\n", "我把整数改成浮点数，更精确一点 ，代码如下：", "\n\n", "\n", "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame()\nn = 200\ndf['category'] = np.random.choice(('A', 'B'), n)\ndf['data1'] = np.random.rand(len(df))*100\ndf['data2'] = np.random.rand(len(df))*100\n\na = df[df['category'] == 'A']\nc = a[a['data2'] == a.data2.max()].data1.max()\na = a[a['data1'] <= c]\na = a.sort_values(by='data2', ascending=False).head(4)\n\nb = df[df['category'] == 'B']\nc = b[b['data2'] == b.data2.max()].data1.max()\nb = b[b['data1'] <= c]\nb = b.sort_values(by='data2', ascending=False).head(4)\n\ndf = pd.concat([a, b]).sort_values(by=['category', 'data1'], ascending=[True, False]).reset_index(drop=True)\nprint(df)", "\n\n", "结果为：", "\n\n", "\n", "  category      data1      data2\n0        A  77.453241  98.628388\n1        A  54.786469  97.470081\n2        A  19.618200  96.261181\n3        A   9.031004  97.067451\n4        B  50.751809  99.219009\n5        B  47.546003  96.488705\n6        B  32.735357  98.565826\n7        B  14.092039  95.359450"]], "Tag": "算法设计"}
{"Answer": "&lt;blockquote&gt;\n&lt;p&gt;data[&amp;#39; &amp;#39;] data是一个字典,data[&amp;#39;**&amp;#39;]代表取data字典中的一个数据,如&lt;br /&gt;data[&amp;#39;captions&amp;#39;].shape[0]表示取data[&amp;#39;captions&amp;#39;]的数据,看样子取出来的数据是个矩阵列表,shape[0]是取这个矩阵列表一维列表的长度&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;font style=\"color:#f00\"&gt;有帮助请采纳,有问题继续交流,你的采纳是对我回答的最大的肯定和动力&lt;/font&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["学习中遇到的问题，关于tensorflow中的问题。", ["n_examples = data['captions'].shape[0]", "n_iters_per_epoch = int(np.ceil(float(n_examples) / batch_size))", "captions = data['captions']", "这个data[' ']整体是什么意思啊？求解答一下。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt;  numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-title\"&gt;np&lt;/span&gt;.random.seed(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)  # 随机数种子为&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt; &amp;#61; np.random.randn(7,4)    #随机生成一个a*b维的标准正态分布数组&amp;#xff0c;浮点型&lt;/span&gt;\n&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;点击采纳该回答哦 谢谢&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于python中用numpy求正态分布问题", ["题目从name名单['Bob','Joe','Will','Bob','will','Joe','Joe' ]抽调出对应'Joe'的数据data", "\n", "其中data用np.random生成一组7*4符合标准正态分布的数据。（设置随机种子为0）", "\n", "要实现用np.random生成一组7", "4符合标准正态分布的数据", "题目对应截图：", "其中，我对于要求生成一组7", "4的数据却生成的是3*4的数据的地方不理解，请求指点"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;fread(&amp;amp;pname, sizeof(pname), 1, np);&lt;br /&gt;你这个结构最后有个next指针&amp;#xff0c;与文本的行信息不一致啊&lt;br /&gt;建议修改&amp;#xff1a;&lt;br /&gt;char buf[200];&lt;br /&gt;fgets(buf,200,np);&lt;br /&gt;sscanf(buf,&amp;#34;%s %d %s %s %s %d %d %d %s %s&amp;#34;,pname.name,&amp;amp;pname-&amp;gt;age,pname.sex,pname.tele,.....);&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["从文件里读取数据调试发现字符串中的字符无效", ["//我定义的链表", "typedef struct stuffsystem", "{", "    char name[name1];", "    int age;", "    char sex[sex1];", "    char tele[tele1];", "    char sectionname[name1];", "    int latawork;//迟到早退的数量", "    int workextra;//加班的数量", "    int achieve;//个人创收", "    char addr[addr1];", "    char educ[educ1];", "    struct stuffsystem* next;", "}linklist;", "\n", "//相关函数", "int judgename(char name[name1])", "{", "    int input = 0;", "    FILE* np;", "    linklist pname;", "    if ((np = fopen(\"stuff.txt\", \"r\")) == NULL)", "    {", "        printf(\"警告！员工信息数据库丢失，请尽快找回\\n\");", "        exit(0);", "    }", "    fread(&pname, sizeof(pname), 1, np);", "    while (!feof(np))", "    {", "        if (!strcmp(pname.name, name))", "        {", "            input = 0;", "            fclose(np);", "            return input;", "        }", "        fread(&pname, sizeof(pname), 1, np);", "    }", "    fclose(np);", "    return input;", "}", "\n", "//调试截图", "\n", "\n", "//被读取的文件", "\n", "\n", "想知道问题出在哪里呀"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff1a;你可以使用scipy.spatial.distance.cdist函数来计算两个array之间的距离&amp;#xff0c;并使用argsort函数和切片来找到表1每个点与表2中距离最近的40个点。以下是一个示例代码&amp;#xff0c;它使用分块计算来加快速度&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import numpy as np\nfrom &lt;span class=\"hljs-keyword\"&gt;scipy.spatial.distance &lt;/span&gt;import cdist\n\n&lt;span class=\"hljs-comment\"&gt;# 假设points1和points2是两个array&amp;#xff0c;每一行代表一个点的坐标&lt;/span&gt;\npoints1 &amp;#61; np.random.rand(&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\npoints2 &amp;#61; np.random.rand(&lt;span class=\"hljs-number\"&gt;200000&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n\n&lt;span class=\"hljs-comment\"&gt;# 将points2划分成多个块&amp;#xff0c;每个块包含1000个点&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;block_size &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;blocks2 &lt;/span&gt;&amp;#61; [points2[i:i&amp;#43;&lt;span class=\"hljs-keyword\"&gt;block_size] &lt;/span&gt;for i in range(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, len(points2), &lt;span class=\"hljs-keyword\"&gt;block_size)]\n&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 计算每个点在points1中与所有块中的点的距离&amp;#xff0c;并找到每个点距离最近的40个点的索引&lt;/span&gt;\nk &amp;#61; &lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;distances &lt;/span&gt;&amp;#61; []\nfor &lt;span class=\"hljs-keyword\"&gt;block2 &lt;/span&gt;in &lt;span class=\"hljs-keyword\"&gt;blocks2:\n&lt;/span&gt;    &lt;span class=\"hljs-keyword\"&gt;dist &lt;/span&gt;&amp;#61; cdist(points1, &lt;span class=\"hljs-keyword\"&gt;block2)\n&lt;/span&gt;    indices &amp;#61; np.argpartition(&lt;span class=\"hljs-keyword\"&gt;dist, &lt;/span&gt;k&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)[:, :k]\n    &lt;span class=\"hljs-keyword\"&gt;distances.append((dist, &lt;/span&gt;indices))\n&lt;span class=\"hljs-keyword\"&gt;distances &lt;/span&gt;&amp;#61; np.concatenate(&lt;span class=\"hljs-keyword\"&gt;distances, &lt;/span&gt;axis&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\nnearest_indices &amp;#61; np.argsort(&lt;span class=\"hljs-keyword\"&gt;distances, &lt;/span&gt;axis&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)[:, :k]\n\n&lt;span class=\"hljs-comment\"&gt;# 最近的40个点在points2中的坐标&lt;/span&gt;\nnearest_points2 &amp;#61; np.concatenate([&lt;span class=\"hljs-keyword\"&gt;blocks2[i][nearest_indices[:, &lt;/span&gt;i]] for i in range(len(&lt;span class=\"hljs-keyword\"&gt;blocks2))])\n&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 计算表1每个点与最近的40个点的距离&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;distances &lt;/span&gt;&amp;#61; np.linalg.&lt;span class=\"hljs-keyword\"&gt;norm(points1[:, &lt;/span&gt;np.newaxis] - nearest_points2, axis&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这个代码首先将points2划分成多个块&amp;#xff0c;并分别计算每个点在points1中与所有块中的点的距离&amp;#xff0c;然后找到每个点距离最近的40个点的索引。最后&amp;#xff0c;它计算最近的40个点在points2中的坐标&amp;#xff0c;并计算表1每个点与最近的40个点的距离。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#Python#的问题，如何解决？", ["问题遇到的现象和发生背景", "\n", "想利用Python计算两个array之间的距离", "points1是表1的array，points2是表2的array", "\n", "points1", " ", "=", " dfA.values\n", "points2", " ", "=", " dfe1.values\n", "\n", "我的解答思路和尝试过的方法", "\n", "使用过分块计算和np.sqrt计算，但是不支持float类型的计算，出错了", "\n", "我想要达到的结果", "\n", "下面两个表每一列代表坐标x,y,z，想计算表1和表2两两点的距离并筛选出表1每个点与表2中距离最近的40个点", "注：每个表基本上都有几十万行，所以计算速度是个问题，而且每一列的数据类型都是float，最好能够使用分块计算", "表1", "\n", "表2"]], "Tag": "算法设计"}
{"Answer": "按这个形式写， 应该能达到你的要求\r\n```\r\ncheck_flag = 'A'\r\nfor i in range(数据总量)\r\n    if check_flag == 'A':\r\n\t\t    if 满足条件A:\r\n\t\t\t\t    check_flag = 'B'\r\n\t\t\t\t\t\tprint('FIND A index', i )\r\n\t\t\t\t    #你要做的操作\r\n    else:\r\n\t\t    if 满足条件B:\r\n\t\t\t\t    check_flag = 'A'\r\n\t\t\t\t\t\tprint('FIND B index', i )\r\n\t\t\t\t    #你要做的操作\t\t    \r\n\r\n\r\n\r\n```", "Konwledge_Point": "应对NP完全问题", "Question": ["关于pandas,python,循环问题？", ["希望实现这样一种效果：", "\n从第一行开始，找到满足if条件A的某行（比如index是3），然后从index是3这行向下，找到满足if条件B的某行比如index是25，接着从index是25这行这行向下，找到满足if条件A的某行，如此循环下去。", "\n\n", "import pandas as pd\nimport numpy as np\n\nnp.random.seed(20200324)\nnum = np.random.rand(400).round(2)\ndata = np.array(num).reshape(100, 4)\ndf = pd.DataFrame(data, columns=list('ABCD'))\n\ntemp_i = 0\nfor i in range(temp_i, df.shape[0]):\n    if df.at[i, 'A'] > df.at[i, 'D']:\n        df.at[i, 'Signal'] = 'num_up'\n        for i2 in range(i+1, df.shape[0]):\n            if df.at[i2, 'A'] < df.at[i2, 'D'] * 0.5:\n                df.at[i2, 'Signal_2'] = 'num_down'\n                temp_i = i2\n                break\n        break\n\n\nprint df\n", "\n\n", "目前只能写出一次的循环，不知道是否有办法可以把现在的代码循环下去，目前我只能用野办法就是把，循环一次的复制了很多很多次，想求问各位高手这种循环怎么去写呢？", "\n\n", "import pandas as pd\nimport numpy as np\n\nnp.random.seed(20200324)\nnum = np.random.rand(400).round(2)\ndata = np.array(num).reshape(100, 4)\ndf = pd.DataFrame(data, columns=list('ABCD'))\n\ntemp_i = 0\nfor i in range(temp_i, df.shape[0]):\n    if df.at[i, 'A'] > df.at[i, 'D']:\n        df.at[i, 'Signal'] = 'num_up'\n        for i2 in range(i+1, df.shape[0]):\n            if df.at[i2, 'A'] < df.at[i2, 'D'] * 0.5:\n                df.at[i2, 'Signal_2'] = 'num_down'\n                temp_i = i2\n                break\n        break\n\nfor i in range(temp_i, df.shape[0]):\n    if df.at[i, 'A'] > df.at[i, 'D']:\n        df.at[i, 'Signal'] = 'num_up'\n        for i2 in range(i+1, df.shape[0]):\n            if df.at[i2, 'A'] < df.at[i2, 'D'] * 0.5:\n                df.at[i2, 'Signal_2'] = 'num_down'\n                temp_i = i2\n                break\n        break\n\nfor i in range(temp_i, df.shape[0]):\n    if df.at[i, 'A'] > df.at[i, 'D']:\n        df.at[i, 'Signal'] = 'num_up'\n        for i2 in range(i+1, df.shape[0]):\n            if df.at[i2, 'A'] < df.at[i2, 'D'] * 0.5:\n                df.at[i2, 'Signal_2'] = 'num_down'\n                temp_i = i2\n                break\n        break\n\n\n\nprint df\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用gpt&amp;#xff1a;&lt;br /&gt;这是一个使用numpy库中的where函数的语句&amp;#xff0c;其中X是一个二维的numpy数组&amp;#xff0c;Y是一个一维的numpy数组&amp;#xff0c;w是一个浮点数&amp;#xff0c;ch_i和c是两个整数。&lt;/p&gt;\n&lt;p&gt;这句语句的作用是&amp;#xff1a;如果X数组的第i列的元素等于ch_i&amp;#xff0c;且Y数组的元素等于c&amp;#xff0c;那么将w赋值给新的数组的相应位置&amp;#xff0c;否则赋值为0。其中&amp;#xff0c;新的数组是通过where函数生成的。&lt;/p&gt;\n&lt;p&gt;具体来说&amp;#xff0c;where函数的用法是&amp;#xff1a;np.where(condition, x, y)&amp;#xff0c;其中condition是一个bool型的numpy数组&amp;#xff0c;x和y是两个相同形状的numpy数组&amp;#xff0c;如果condition中对应的元素为True&amp;#xff0c;则新的数组对应位置的元素为x中对应位置的元素&amp;#xff0c;否则为y中对应位置的元素。&lt;/p&gt;\n&lt;p&gt;在这句语句中&amp;#xff0c;condition的值是(X[:,i] &amp;#61;&amp;#61; ch_i) * (Y &amp;#61;&amp;#61; c)&amp;#xff0c;即X数组的第i列的元素等于ch_i且Y数组的元素等于c的位置为True&amp;#xff0c;其余位置为False。因此&amp;#xff0c;新的数组中只有这些True对应的位置的元素才会被赋值为w&amp;#xff0c;其余位置的元素为0。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python 统计学习方法 分类问题", ["np.where((X[:,i] == ch_i) * (Y == c), w, 0.0)这句是什么意思呀？", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;axis&amp;#61;-1&amp;#xff0c;其实也就等于axis&amp;#61;2。因为这是个三维矩阵&amp;#xff0c;所以axis可能的取值为0,1,2&amp;#xff0c;所以最后一个就是2。你可以自己试试看两个取值结果是否相同。望采纳哦&amp;#xff01;&amp;#xff01;&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy基础问题数组拼接", ["times=np.concatenate((time0,time1),-1)", "这个是数组拼接，那么-1是按行还是列拼接啊？我没有查到"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;因为linspace方法的第三个参数表示要生成的个数&amp;#xff0c;应该是一个整数&amp;#xff0c;而你的是小数。所以报错。建议使用&amp;#xff1a;&lt;br /&gt;np.arange(0,3.6,0.7)&lt;br /&gt;望采纳下。谢谢&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#numpy#的问题，如何解决？", ["numpy模块", "在3.5公里的路段每隔0.7公里设置一路桩，创建路桩的位置数组。", "\n", "import numpy ", "as", " np\narr3=np.linspace(", "0", ",", "3.5", ",", "0.7", ")\n", "print", "(arr3)\n\nTypeError                                 Traceback (most recent ", "call", " ", "last", ")\n~\\AppData\\Local\\Temp\\ipykernel_58568\\", "2770250342", ".", "py", " in ", "<module>", "\n----> ", "1", " arr3=np.linspace(", "0", ",", "3.5", ",", "0.7", ")\n      ", "2", " ", "print", "(arr3)\n\n<__array_function__ internals> in linspace(*", "args", ", **kwargs)\n\nD:\\Anoconda3\\lib\\site-packages\\numpy\\core\\function_base.", "py", " in linspace(start, ", "stop", ", num, endpoint, retstep, dtype, axis)\n    ", "118", " \n    ", "119", "     ", "\"\"", "\"", "\n--> ", "120", "     num = operator.", "index", "(num)\n    ", "121", "     ", "if", " num < ", "0", ":\n    ", "122", "         raise ValueError(", "\"Number of samples, %s, must be non-negative.\"", " % num)\n\nTypeError: ", "'float'", " object cannot ", "be", " interpreted ", "as", " ", "an", " integer\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;clf &amp;#61; self.estimator.fit(&lt;span class=\"hljs-built_in\"&gt;np&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;(x_train),&lt;span class=\"hljs-built_in\"&gt;np&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;(y_train))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这个返回的是个History类型的对象&lt;br /&gt;而History里面没有predict这个方法&lt;br /&gt;你是不是搞错了&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["AttributeError: 'History' object has no attribute 'predict'           做集成时碰到这个问题怎么办呢？", ["问题遇到的现象和发生背景", "\n", "做集成算法时出现了下列错误，求帮忙", "\n", "问题相关代码，请勿粘贴截图", "\n", "def ", "TrainPredict(", "self", ",", "x_train", ",", "y_train", ",", "x_test", ")", ":          #训练基础模型，并返回模型预测结果\n    clf = self.estimator.fit(np.", "array", "(x_train),np.", "array", "(y_train))\n    result = clf.predict(x_test)\n    return result\n\ndef ", "Bagging_clf(", "self", ", ", "x_train", ", ", "x_test", ", ", "y_train", ", ", "y_test", ", ", "sample_type", "=", "\"RepetitionRandomSampling\"", ")", ":\n    print(", "\"self.Bagging single_basemodel\"", ")\n    result = ", "()", "\n\n    ", "if", " sample_type", " == ", "\"RepetitionRandomSampling\"", ":\n        print(", "\"选择的采样方法：\"", ", sample_type)\n        sample_function = self.RepetitionRandomSampling\n    elif sample_type", " == ", "\"UnderSampling\"", ":\n        print(", "\"选择的采样方法：\"", ", sample_type)\n        sample_function = self.UnderSampling\n        print(", "\"采样率\"", ", self.rate)\n    elif sample_type", " == ", "\"IF_SubSample\"", ":\n        print(", "\"选择的采样方法：\"", ", sample_type)\n        sample_function = self.IF_SubSample\n        print(", "\"采样率\"", ", (", "1.0", " - self.rate))\n    print(sample", "_function(", "train", ", ", "len", "(", "train", ")", "))\n    ", "for", " i ", "in", " range(self.n_estimators):\n        sample = sample", "_function(", "train", ", ", "len", "(", "train", ")", ")  # 构建数据集\n        x_train = np.", "array", "(sample)", "[:, :, ", "0", ":-", "1", "]", "\n        y_train = np.", "array", "(sample)", "[:, :, -", "1", "]", "\n        ", "list", "(result).append(self.", "TrainPredict(", "x_train", ", ", "y_train", ", ", "x_test", ")", ")  # 训练模型 返回每个模型的输出\n    print(np.", "array", "(result))\n    score = self.", "Voting(", "result", ")", "\n    recall, precision = self.", "Metrics(", "score", ", ", "y_test", ")", "\n    return recall, precision\n\nrecall_self,precision_self = clf_self.", "Bagging_clf(", "x_train", ", ", "x_test", ", ", "y_train", ", ", "y_test", ")", "\nprint(", "\"recall:\"", ",", "'\\n'", ",recall_self)\nprint(", "\"precision\"", ",", "'\\n'", ",precision_self)\n", "\n", "运行结果及报错内容", "\n", "Traceback (most recent call last):", "  File \"D:\\pycharm\\practice\\待改进(smote与模仿github中的自写bagging).py\", line 236, in ", "    recall_self,precision_self = clf_self.Bagging_clf(x_train, x_test, y_train, y_test)", "  File \"D:\\pycharm\\practice\\待改进(smote与模仿github中的自写bagging).py\", line 170, in Bagging_clf", "    list(result).append(self.TrainPredict(x_train, y_train, x_test))  # 训练模型 返回每个模型的输出", "  File \"D:\\pycharm\\practice\\待改进(smote与模仿github中的自写bagging).py\", line 133, in TrainPredict", "    result = clf.predict(x_test)", "AttributeError: 'History' object has no attribute 'predict'", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;text是个str呀&amp;#xff0c;你不要给它赋值一个float&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["txt数据输出给docx出现问题", ["我把txt文件数据输入Word表格中出现这种情况，还会出现名称可以写入表格，但是数据写入不了，请问该怎么改？", "这是部分数据", "205c    -4248.7840194", "127n    11.095004310167", "23a    11.2456067097867", "\n", "import numpy as ", "np", "\nimport docx\nfrom docx import Document\nfile = 's.energy.txt'\nf = open(file)\nlines = f.readlines()\nlist1 = []\nlist2 = []\n\nline_data = []\n", "for", " line ", "in", " lines:\n    a = line.", "split", "()\n    line_data.", "append", "(a)\ndata = ", "np", ".", "array", "(line_data)\nneed_data = data[", "0", ":", "14", ",", "1", "]\nneed_name = data[", "0", ":", "14", ",", "0", "]\nf.", "close", "()\n", "for", " j ", "in", " need_name:\n    list1.", "append", "(j)\n", "for", " i ", "in", " need_data:\n\n    list2.", "append", "(i)\n\n", "file_name", " = 'ca.docx'\ndoc = docx.Document(", "file_name", ")\ntable = doc.add_table(rows=len(need_name)*", "3", ", cols=", "4", ")\ncells = table.rows[", "0", "].cells\n\n\n\n\n\n", "for", " ", "col", " ", "in", " ", "range", "(", "4", "):\n    ", "for", " ", "row", " ", "in", " ", "range", "(len(need_name) * ", "3", "):\n        ", "for", " x ", "in", " list1:\n            ", "for", " y ", "in", " list2:\n                ", "if", " (", "row", "+", "1", ")", "%", "3", "==", "0", ":\n                    a=", "row", "+", "1", "\n                    table.cell(", "row", ",", "col", ").text = ", "np", ".", "round", "(", "float", "(y),", "2", ")#这行出现问题，其他正常运行，有时候不报错但是文件里没有数据\n                    ", "if", " ", "row", "==a-", "1", ":\n                        table.cell(", "row", ",", "col", ").text = x\ndoc.", "save", "('", "1", "'+", "file_name", ")\n\n", "\n", "```"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这是numpy自动导入了numbers模块导致的, 而这个numbers模块可能是你自己写的, 文件是numbers.py, 而且在sys.path目录下, 会被numpy自动检测到。&lt;br /&gt;先在python脚本的目录下找numbers.py, 改成其他名字。&lt;br /&gt;如果找不到, 运行这行代码: &lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;import sys\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(sys.path)&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后把各个sys.path下的numbers.py改成其他名字, 即可。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy相关的运行问题", ["刚开始学习，现在学习numpy模块相关的内容，根据网上公开课程学习，", "\n", "用pip install numpy，显示Requirement already satisfied: numpy in c:\\users\\lsl\\appdata\\roaming\\python\\python38\\site-packages (1.23.0)，这不是已经安装成功的意思吗？", "\n", "在pycharm 写了如下几行简单的代码：", "\n", "import numpy as np", "arr1 = np.array([11,22,33,22,33,44,33,44,55])", "print(arr1) ", "\n", "运行结果：", "\n", "1", "\n", "1000000", "\n", "500000500000", "\nTraceback (most recent call last):\n  省略\nAttributeError: ", "module", " ", "'numbers'", " has no attribute ", "'Integral'", "\n\n######到底哪里出错了???\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;W要大写&amp;#xff0c;是destroyAllWindows&amp;#xff0c;不是destroyAllwindows&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python-opencvan使用问题", ["问题遇到的现象和发生背景", "\n", "用的python3.9,anaconda3,opencv4.6.0.66版本，opencv-contrib-python和opencv都安装成功，代码可以跑但是报错", "\n", "问题相关代码，请勿粘贴截图", "\n", "import cv2 as cv", "import matplotlib.pyplot as plt", "import numpy as np", "img = cv.imread(\"1.jpg\")", "print(img)", "cv.imshow(\"img\", img)", "cv.waitKey(10000)", "cv.destroyAllwindows()", "print(img.shape)", "\n", "运行结果及报错内容", "\n", "在 '", "init", ".py' 中找不到引用 'imread'", "在 '", "init", ".py' 中找不到引用 'imshow'", "在 '", "init", ".py' 中找不到引用 'waitKey'", "在 '", "init", ".py' 中找不到引用 'destroyAllwindows'", "运行结果", "AttributeError: module 'cv2' has no attribute 'destroyAllwindows'", "\n", "我的解答思路和尝试过的方法", "\n", "有反复重新安装过但是没有用", "\n", "我想要达到的结果", "\n", "不报错"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;img_shift&lt;/span&gt; &amp;#61; np.float32([&amp;#xff08;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#xff09;,&amp;#xff08;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#xff0c;h_move&amp;#xff09;])\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["使用opencv2的warpAffine使用问题", ["在使用opencv2的warpAffine函数对照片进行平移处理的时候宽高颠倒", "\n", "def Image_traslation(img):\n    h_move = ", "random", ".randint(", "0", ", ", "200", ")\n    rows, cols = img.shape[:", "2", "]\n    ", "print", "(rows, cols)\n    img_shift = np.float32(", "[[0, 1, 0], [1, 0, h_move]]", ")\n    img_new = cv2.warpAffine(img, img_shift, (cols, rows))\n    ", "return", " img_new\n", "\n", "请问该如何解决这个问题"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可使用set_xlim来设置&amp;#xff1a;&lt;br /&gt;ax.set_xlim(0, df.shape[0])&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python 绘图的问题：去掉两边的空白部分。", ["问题遇到的现象和发生背景", "\n", "\n", "问题相关代码，请勿粘贴截图", "\n", "蓝色部分，我不需要，请问如何去掉。让数据显示的紧凑点。", "简单来说：有多余的空白部分。我想让数据与纵轴相交，而不是保持一定的距离。", "代码如下：", "\n", "    plt.style.use(", "'dark_background'", ")\n    ", "df", "=日线接口(开始日期='20210505')\n    ", "fig", "=plt.figure(figsize=(12,7))\n    ", "ax", "=fig.add_subplot(111)\n    显示中文()\n    #开始绘制折线图\n    # 绘制K线金融图()\n    ax.plot(df[", "'High'", "].values,", "label", "=", "'最高价'", ")\n    plt.legend(", "loc", "=", "'best'", ")\n    #设置日期\n    ax.set_xticks(np.arange(0,df.shape[0],15))\n    plt.show()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;dd&amp;#61;ts.get_k_data(&amp;#39;002466&amp;#39;,start&amp;#61;&amp;#39;2010-01-01&amp;#39;,end&amp;#61;&amp;#39;2021-07-18&amp;#39;)[&amp;#39;close&amp;#39;]&lt;br /&gt;dd.sort_index(inplace&amp;#61;True)&lt;br /&gt;可以看出dd不是list类型 list没有.sort_index&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于python的2个小问题", ["\n问题", "1", "：\nimport tushare as ts\nimport numpy as np\nimport pandas as pd\nimport warnings\nwarnings.simplefilter(", "\"ignore\"", ")\nfrom matplotlib import pyplot as plt\n\nimport seaborn\n%matplotlib inline\ndd=ts.get_k_data(", "'002466'", ",start=", "'2010-01-01'", ",end=", "'2021-07-18'", ")[", "'close'", "]\ndd.sort_index(inplace=True)\ndd_returns=dd.pct_change()\ndd_returns.dropna(inplace=True)\nd_mu_1=dd_returns.mean()\nd_sigma_1=dd_returns.std()\n", "# VaR_1=d_mu_1-2.33*d_sigma_1", "\nds_0=dd[-", "1", "]\n\n为什么最后一行位置函数使用-", "1", "不行\n![img](https:", "//img", "-mid.csdnimg.cn", "/release/", "static", "/image/mi", "d", "/ask/", "438498095626177", ".png)\n\n改成", "1", "又可以\n![img](https:", "//img", "-mid.csdnimg.cn", "/release/", "static", "/image/mi", "d", "/ask/", "445589095626179", ".png)\n\n问题", "2", "：\ndef ZQ(ds_0,d_mu_1,d_sigma_1,T,n):\n    delta_1=T/n\n    sim_price=[ds_0]\n    ", "for", " i ", "in", " range(n):\n        start_price=sim_price[i]\n        epsilon=np.random.normal()\n        end_price=start_price+start_price*(d_mu_1*delta_1+d_sigma_1*epsilon*np.sqrt(delta_1))                                  \n        end_price = max(", "0", ",end_price)                               \n        sim_price.append(end_price)   \n                                             \n    return sim_price\n\nzq1=ZQ(ds_0,d_mu_1,d_sigma_1,", "1000", ",", "1000", ")\n", "# zq1=np.array(zq1)", "\nzq1=pd.Series(zq1)\nzq2=[ZQ(ds_0,d_mu_1,d_sigma_1,", "1000", ",", "1000", ") ", "for", " iu ", "in", " range(", "100", ")]\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nimport matplotlib.cm as cmx\nimport numpy as np\nimport matplotlib\nimport seaborn as sns\n", "# 设置图像风格", "\nsns.set_style(", "'whitegrid'", ")\n", "# 设置绘图参数", "\n", "# for ii in range(len(zq2)):", "\nfig = plt.figure(figsize=(", "9", ",", "9", "))\nax = fig.add_subplot(", "111", ")\nlines = []\n", "for", " ii ", "in", " range(len(zq2)):\n    line = zq2[ii]\n    retLine, = ax.plot(line,\n                       color=", "'cornflowerblue'", ",\n                       alpha=", "0.8", ",\n                       linewidth=", "0.6", ")\n\nplt.xlabel(", "'stock_price'", ", fontsize=", "'large'", ")\nplt.ylabel(", "'steps'", ", fontsize=", "'large'", ")\nplt.title(", "'Monte Carlo Simulation'", ", fontsize=", "'large'", ")\nplt.show()        \nplt.plot(zq1)\n\n为什么在定义zq2时引用zq1和不引用zq1画出的效果不同？\nzq2=[zq1 ", "for", " iu ", "in", " range(", "100", ")]\n![img](https:", "//img", "-mid.csdnimg.cn", "/release/", "static", "/image/mi", "d", "/ask/", "818303195626188", ".png)\n\nzq2=[ZQ(ds_0,d_mu_1,d_sigma_1,", "1000", ",", "1000", ") ", "for", " iu ", "in", " range(", "100", ")]\n![img](https:", "//img", "-mid.csdnimg.cn", "/release/", "static", "/image/mi", "d", "/ask/", "853014195626184", ".png)\n\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;原因&amp;#xff1a; markers生成的是numpy数组&amp;#xff0c;不是List&amp;#xff0c;需要先转换为list才能使用里面的元素做为index&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python3.8.8运行遇到问题", ["代码：", "\n\n", "\n", "for cnt, x in enumerate(data):\n    # getting the winner\n    w = som.winner(x)\n    # place a marker on the winning position for the sample xx\n    wx, wy = som.convert_map_to_euclidean(w) \n    wy = wy * np.sqrt(3) / 2\n    plt.plot(wx, wy, \n             markers[t[cnt]-1], \n             markerfacecolor='None',\n             markeredgecolor=colors[t[cnt]-1], \n             markersize=12, \n             markeredgewidth=2)\n\nxrange = np.arange(weights.shape[0])\nyrange = np.arange(weights.shape[1])\nplt.xticks(xrange-.5, xrange)\nplt.yticks(yrange * np.sqrt(3) / 2, yrange)", "\n\n", "在markers[t[cnt]-1]这一行报错，不知道该如何解决。", "\n\n", "\n", "Traceback (most recent call last):\n  File \"naqu.py\", line 67, in <module>\n    markers[t[cnt]-1],\nTypeError: list indices must be integers or slices, not numpy.float64", "\n\n", "\n\n", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "a要是numpy.uint8类型，还有一件事，你用这个矩阵的，看不出效果的..........", "Konwledge_Point": "应对NP完全问题", "Question": ["在用opencv中resize函数时遇到的问题。", ["import cv2\nimport numpy as np\n\na = np.array([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]])\norign = a.copy()\n\ncv_r = cv2.resize(a, None,fx = 0.5,fy = 0.5,interpolation=cv2.INTER_LINEAR)\n", "\n\n", "为了测试下resize的作用，自己敲了上述代码，会出现下面的错误：", "\n\n", "error: OpenCV(4.2.0) C:\\projects\\opencv-python\\opencv\\modules\\imgproc\\src\\resize.cpp:3863: error: (-215:Assertion failed) func != 0 in function 'cv::hal::resize'\n", "\n\n", "望高手解答"]], "Tag": "算法设计"}
{"Answer": "目测是一种切片操作的简写，‘...’是指出指定之外的所有纬度的所有索引，如[....,1]是指选取最后一维的索引为1，其他纬度 不加限定，\r\n在你的实例中I[...,1]和I[:,:,1]等价", "Konwledge_Point": "应对NP完全问题", "Question": ["请问[...,0],[...,1]是什么意思？", ["import numpy as np", "\nI=np.random.randint(0,2,(16,16,3)).astype(np.ubyte)", "\nF=I[...,0]*(256*256)+I[...,1]*256+I[...,2]", "\nn=len(np.unique(F))", "\nprint(n)", "\n\n", "第3行的代码没看懂，向大佬们请教一下"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;尝试方法2&amp;#xff1a;Matplotlib中文乱码的两种详细解决方案&amp;#xff0c;&lt;a href=\"https://www.jb51.net/article/255051.htm%EF%BC%8C%E7%BB%93%E5%90%88%E6%96%B9%E6%B3%951%E5%92%8C2%EF%BC%8C%E7%94%A8%E6%96%B9%E6%B3%952%E6%B5%8B%E8%AF%95%E6%97%B6%E6%9C%89%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF%EF%BC%9A\" id=\"textarea_1657713633216_1657713788182_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.jb51.net/article/255051.htm%EF%BC%8C%E7%BB%93%E5%90%88%E6%96%B9%E6%B3%951%E5%92%8C2%EF%BC%8C%E7%94%A8%E6%96%B9%E6%B3%952%E6%B5%8B%E8%AF%95%E6%97%B6%E6%9C%89%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF%EF%BC%9A&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/580607596756186.png\" /&gt;&lt;/p&gt;&lt;br /&gt;下午打开Spyder &amp;#xff0c;matplotlib库无法正常使用&amp;#xff0c;提示:FileNotFoundError: [Errno 2] No such file or directory: &amp;#39;D:\\programFiles\\ANACONDA\\lib\\site-packages\\matplotlib\\mpl-data\\matplotlibrc&amp;#39;。所以配置文件不要乱改啊&amp;#xff0c;改的话也要备份啊&amp;#xff0c;所以参考&amp;#xff1a;anaconda卸载重装matplotlib&amp;#xff0c;进行matplotlib的重装。&lt;br /&gt;已解决&amp;#xff1a;中文无法正常显示&amp;#xff0c;是因为书写错误&amp;#xff0c;不是 fontpropertise  是fontproperties 啊&amp;#xff01;&amp;#xff01;&amp;#xff01;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["用fontpropertise中文乱码", ["spyder中用pyploth画图，图像显示不出来；用fontpropertise中文乱码，小方框。", "\n", "import numpy as np", "import matplotlib.pyplot as plt", "\n", "a=np.arange(0.0,5.0,0.02)", "\n", "plt.xlabel('横轴：时间', fontproperties='SimHei',fontsize=20)", "plt.ylabel('纵轴：振幅', fontpropertise='SimSum',fontsize=20)", "plt.plot(a, np.cos(2", "np.pi", "a),'r--')", "plt.show() ", "\n", "\n", "是不是我电脑的问题啊，因为昨天可以显示中文，今天运行代码就开始出问题乱码；也尝试用这个方法：matplotlib中文乱码的两种解决方案，但是按照步骤做到最后一步的时候，又发生错误：", "\n", "为什么昨天运行好好地，今天就中文乱码，图像也显示不出来，难道是因为我reset Spyder吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你只要保证seed值是固定的&amp;#xff0c;那概率肯定是相同的呀&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python怎么生成相同概率的随机数", ["\n", "\n", "np", ".", "random", ".seed(", "0", ")\nx1 = ", "np", ".", "random", ".randint(", "10", ",size=", "100", ")\nx1\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以看XY的值&amp;#xff0c;XY的范围都是-1到1&amp;#xff0c;每次跨度为0.2&amp;#xff0c;所以XY都是10个元素的数组&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/940799466256122.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;嵌套for循环就是输出一个10*10个二维数组,因为输出的索引都是&lt;code class=\"language-javascript\"&gt;i&lt;/code&gt;&amp;#xff0c;而且X Y是相同的&amp;#xff0c;所以&lt;code class=\"language-javascript\"&gt;输出的值一直是一样的&lt;/code&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中for套for的用法。", ["import numpy as np", "X = np.arange(-1.0, 1.0, 0.2)", "Y = np.arange(-1.0, 1.0, 0.2)", "\n", "for i in range(10):", "    for j in range(10):", "        s = np.array([X[i], Y[i]])", "        print(s)", "\n", "对这个循环的输出该怎么解释？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;文件发我&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的问题：import matplotlib.pyplot as plt", ["\n \n", "import", " matplotlib\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " numpy ", "as", " np\n \n", "def", " ", "main", "():\n    matplotlib.rcParams[", "'font.family'", "] = ", "'SimHei'", "\n    stuScore = np.loadtxt(", "'student_score.csv'", ", delimiter=", "','", ")  ", "# 读入成绩文件,返回数组", "\n    sumEach = np.", "sum", "(stuScore[:, ", "1", ":], axis=", "1", ")  ", "# 返回每个学生3门课程总分", "\n    avgEach = np.average(stuScore[:, ", "1", ":], axis=", "0", ")  ", "# 返回每个学生每门课程平均分", "\n    ", "# 取出各科成绩", "\n    mathScore = stuScore[:, ", "1", "]\n    engScore = stuScore[:, ", "2", "]\n    pythonScore = stuScore[:, ", "3", "]\n    ", "# Performanceanalysis(avgEach, stuScore, sumEach)", "\n    ", "while", " ", "True", ":\n        ", "print", "(", "\"\"\"成绩分析与可视化系统  \n 1: 基本信息显示      \n 2: 成绩分析          \n 3: 可视化         \n 4: 退出系统\"\"\"", ")\n        operation = ", "input", "(", "\"请输入你的操作\"", ")\n        ", "if", " operation.isdigit():\n            operation = ", "int", "(operation)\n            ", "if", " operation == ", "1", ":\n                ", "print", "(", "\" 学号  高数  英语  python\"", ")\n                ", "for", " i ", "in", " stuScore:\n                    ", "print", "(", "f\"", "{", "int", "(i[", "0", "])}", " ", "{i[", "1", "]}", " ", "{i[", "2", "]}", " ", "{i[", "3", "]}", "\"", ")\n            ", "elif", " operation == ", "2", ":\n                Performanceanalysis(avgEach, stuScore, sumEach)\n            ", "elif", " operation == ", "3", ":\n                ", "# name= input(\"请输入课程名\")", "\n                ", "# if name=='xxx':", "\n                ", "# 由于不清楚你的课程名是啥,你这里自己填 if elif else结构就可以", "\n                Highnumberhistogram(mathScore)\n                Englishhistogram(engScore)\n                Scorehistogram(pythonScore)\n            ", "elif", " operation == ", "4", ":\n                ", "import", " sys\n                sys.exit(", "0", ")\n            ", "else", ":\n                ", "print", "(", "\"输入错误,请重新输入\"", ")\n \n", "def", " ", "Performanceanalysis", "(", "avgEach, stuScore, sumEach", "):\n    ", "# 返回最高分和最低分", "\n    maxMath = np.", "max", "(stuScore[:, ", "1", "])\n    maxEng = np.", "max", "(stuScore[:, ", "2", "])\n    maxPython = np.", "max", "(stuScore[:, ", "3", "])\n    minMath = np.", "max", "(stuScore[:, ", "1", "])\n    minEng = np.", "max", "(stuScore[:, ", "2", "])\n    minPython = np.", "max", "(stuScore[:, ", "3", "])\n    ", "print", "(", "\"个人总分情况是：\"", ")\n    ", "print", "(sumEach)\n    ", "print", "(", "\"个人平均分情况是：\"", ")\n    ", "print", "(avgEach)\n    ", "print", "(", "\"班级每门课程最高分：\"", ")\n    ", "print", "(maxMath, maxEng, maxPython)\n    ", "print", "(", "\"班级每门课程最低分：\"", ")\n    ", "print", "(minMath, minEng, minPython)\n \n", "def", " ", "Highnumberhistogram", "(", "mathScore", "):\n    ", "# 绘制高数直方图", "\n    plt.suptitle(", "\"成绩分布直方图\"", ")\n    plt.subplot(", "3", ", ", "1", ", ", "1", ")\n    plt.hist(mathScore, bins=", "10", ", ", "range", "=(", "0", ", ", "100", "), color=", "'red'", ")  ", "# 0-100分,分成10段", "\n    plt.xlabel(", "\"高数成绩分数段\"", ")  ", "# 设置x轴标签", "\n    plt.ylabel(", "\"人数\"", ")  ", "# 设置y轴标签", "\n    plt.xlim(", "0", ", ", "100", ")  ", "# 设置x轴区间", "\n    plt.xticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置x轴刻度", "\n    plt.yticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置y轴刻度", "\n    ", "# plt.grid()", "\n    plt.show()\n \n", "def", " ", "Englishhistogram", "(", "engScore", "):\n    ", "# 绘制英语直方图", "\n    plt.subplot(", "3", ", ", "1", ", ", "2", ")\n    plt.hist(engScore, bins=", "10", ", ", "range", "=(", "0", ", ", "100", "), color=", "'blue'", ")  ", "# 0-100分,分成10段", "\n    plt.xlabel(", "\"英语成绩分数段\"", ")  ", "# 设置x轴标签", "\n    plt.ylabel(", "\"人数\"", ")  ", "# 设置y轴标签", "\n    plt.xlim(", "0", ", ", "10", ")  ", "# 设置x轴区间", "\n    plt.xticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置x轴刻度", "\n    plt.yticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置y轴刻度", "\n    ", "# plt.grid()", "\n    plt.show()\n \n", "def", " ", "Scorehistogram", "(", "pythonScore", "):\n    ", "# 绘制python直方图", "\n    plt.suptitle(", "\"成绩分布直方图\"", ")\n    plt.subplot(", "3", ", ", "1", ", ", "3", ")\n    plt.hist(pythonScore, bins=", "10", ", ", "range", "=(", "0", ", ", "100", "), color=", "'green'", ")  ", "# 0-100分,分成10段", "\n    plt.xlabel(", "\"Python成绩分数段\"", ")  ", "# 设置x轴标签", "\n    plt.ylabel(", "\"人数\"", ")  ", "# 设置y轴标签", "\n    plt.xlim(", "0", ", ", "100", ")  ", "# 设置x轴区间", "\n    plt.xticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置x轴刻度", "\n    plt.yticks([", "0", ", ", "10", ", ", "20", ", ", "30", ", ", "40", ", ", "50", ", ", "60", ", ", "70", ", ", "80", ", ", "90", ", ", "100", "])  ", "# 设置y轴刻度", "\n    ", "# plt.grid()", "\n    plt.show()\n \n", "if", " __name__ == ", "'__main__'", ":\n    main()\n\n\n\n", "\n", "在这个python成绩后面画一个python成绩的饼图"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; math\ndf&amp;#61;pd.DataFrame({&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;:[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,np.&lt;span class=\"hljs-keyword\"&gt;nan&lt;/span&gt;],\n&lt;span class=\"hljs-string\"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;:[&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;,np.&lt;span class=\"hljs-keyword\"&gt;nan&lt;/span&gt;]})\n\ns1&amp;#61;&lt;span class=\"hljs-keyword\"&gt;set&lt;/span&gt;(df[&lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;])\ns2&amp;#61;&lt;span class=\"hljs-keyword\"&gt;set&lt;/span&gt;(df[&lt;span class=\"hljs-string\"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;])\ns1 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;set&lt;/span&gt;([x &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; x &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; s1 &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; math.isnan(x)])\nprint(s1)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python集合空值删除", ["如何把python集合中的空值删除", "\n", "import pandas as pd", "import numpy as np", "df=pd.DataFrame({'a':[1,np.nan],", "                 'b':['x',np.nan]})", "\n", "s1=set(df['a'])", "s2=set(df['b'])", "\n", "s1.remove(np.nan)", "s2.remove(np.nan)", "\n", "print(s1,s2)", "\n", "集合s1 的空值跟整数一列,运行remove(np.nan) 报错,但是s2可以正常删除", "\n", "我已经试过几种方法,如remove(None)等,都无法解决删除s1中的空值", "\n", "我想要达到的结果: 不提前用df.fillna()的方法, 直接删除s1中的空值"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;out &amp;#61; x.copy这一句copy后面少了小括号&amp;#xff0c;应该是out &amp;#61; x.copy()&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["使用Python建立ReLU层时遇到的问题", ["在学习Python建立ReLU层时，看到书上的一串代码，大意是设置一个mask作为判断输入的numpy.array中的值是否大于0的标志，若大于0则mask为False，小于等于0则mask为True，并将所有mask为True的输出值置0。代码如下：", "\n", "import numpy ", "as", " np\n\n\n", "class", " ", "ReLU", ":", "\n    ", "def", " ", "__init__", "(", "self", "):\n        ", "self", ".mask = None\n\n    ", "def", " ", "forward", "(", "self", ",  x):\n        ", "self", ".mask = (x <= ", "0", ")\n        ", "out", " = x.copy\n        ", "out", "[", "self", ".mask] = ", "0", "\n        ", "return", " ", "out", "\n\n    ", "def", " ", "backward", "(", "self", ", dout):\n        dout[", "self", ".mask] = ", "0", "\n        ", "return", " dout\n\nre = ReLU()\nx = np.array([[-", "1", ", ", "1", "], [", "3", ", -", "2", "]])\noutput = re.forward(x)\nprint(output)\n", "\n", "但是运行之后的报错信息如下：", "\n", "Traceback (most recent call last):\n  File ", "\"路径\"", ", line ", "20", ", ", "in", " <module>\n    output = re.forward(x)\n  File ", "\"路径\"", ", line ", "11", ", ", "in", " forward\n    out[self.mask] = ", "0", "\nTypeError: ", "'builtin_function_or_method'", " object does not support item assignment\n\nProcess finished with ", "exit", " code ", "1", "\n\n", "\n", "请教一下如何解决问题"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;open()和with open() 语句都是打开文件。&lt;br /&gt;需要的参数都是文件路径&lt;br /&gt;你应该将 path &amp;#61; &amp;#39;C:\\Users\\Administrator\\Desktop\\实训\\data\\anhui.txt&amp;#39;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["TypeError: expected str, bytes or os.PathLike object, not TextIOWrapper", ["读取txt文件时报错", "\n", "import", " csv\n", "import", " io\n", "import", " numpy ", "as", " np\n", "from", " numpy.matlib ", "import", " repmat\n", "path", "=", "open", "(", "'C:\\\\Users\\\\Administrator\\\\Desktop\\\\实训\\\\data\\\\anhui.txt'", ",", "'r'", ",encoding=", "'utf-8'", ")\n", "#a=np.loadtxt('C:\\\\Users\\\\Administrator\\\\Desktop\\\\实训\\\\data\\\\anhui.txt',encoding='utf-8')", "\n", "#b=np.reshape(a,(17,10))   ", "\n", "with", " ", "open", "(", "path", ",", "'r'", ",encoding=", "'utf-8'", ")", "as", " f1:\n    data=f1.", "read", "()\nprint(data)\n"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The usual approach here is to write a predictive parser. For you, this could mean using regular expressions to match either a noun, verb or predicate and then deciding what production to use. You are correct that parsing a grammar requires the computational power of a push-down automata (ie more than what a regular expression alone can achieve). Simulating a push-down automaton is one approach and is what parser generators like yacc/bison often do. For a small grammar like that though, you can use the call stack implicitly. &lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何使用PHP preg_match_all实现简单的CFG解析器？", ["\n\n", "I am using preg_match_all to make a simple parser. Note that since it will parse only few sentences, the performance does not matter. Would it be possible to make a parser which parse through below Context free grammer?", "\n\n", "S -> NP VP\nPP -> P NP\nNP -> 'the' N | N PP | 'the' N PP\nVP -> V NP | V PP | V NP PP\nN -> 'cat'\nN -> 'dog'\nN -> 'rug'\nV -> 'chased'\nV -> 'sat'\nP -> 'in'\nP -> 'on'\n", "\n\n", "The problem here that I couldn't resolve was loop. ", "\n\n", "For example, do you see loop where there can be PP -> NP -> PP and so on?", "\n\n", "Is there anything in PHP that works like Push-down automata that can solve this problem?", "\n\n", "Example input: 'the cat chased the dog'", "\n\n", "Example output:", "\n\n", "(S (NP the (N cat)) (VP (V chased) (NP the (N dog))))", "\n\n", "Example input: 'the cat chased the dog on the rug'", "\n\n", "Example output(s):", "\n\n", "(S\n  (NP the (N cat))\n  (VP (V chased) (NP the (N dog) (PP (P on) (NP the (N rug))))))", "\n\n", "(S\n  (NP the (N cat))\n  (VP (V chased) (NP the (N dog)) (PP (P on) (NP the (N rug)))))", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我仔细思考了一下终于解决啦&amp;#xff01;&lt;br /&gt;我的数据为sigmoid函数映射到0和1之间分布的点数&amp;#xff0c;我想把他以大于0.5和小于0.5分别预测为1和0&amp;#xff0c;输出的结果为0 1分布&amp;#xff0c;但是新版tensorflow没有predict_classes属性&amp;#xff0c;所以我做了如下操作&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;y_train_predict &amp;#61; mlp&lt;span class=\"hljs-selector-class\"&gt;.predict&lt;/span&gt;(X_train)\n&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.ones&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;630&lt;/span&gt;)\n&lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt; &amp;#61; a/&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\nc &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.insert&lt;/span&gt;(y_train_predict,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt;,axis&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\ny_train_predict &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.argmax&lt;/span&gt;(c,axis&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\ny_train_predict &amp;#61; y_train_predict&lt;span class=\"hljs-selector-class\"&gt;.reshape&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;630&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(y_train_predict)&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;生成一列0.5加入到第0列&amp;#xff0c;再用np.argmax按行索引判断最大值的位置&amp;#xff0c;如果0.5是最大的就返回0&amp;#xff0c;如果0.5是最小的就返回1&lt;br /&gt;再转化为二维数组格式&amp;#xff0c;输出结果为&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/873894556846156.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;和之前的predict_class结果基本一样&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于新版tensorflow 'Sequential' object has no attribute 'predict_classes'的问题", ["在Tensorflow2.6之前的版本中拥有predict_class属性", "在结果预测时可以自动将结果变成0 1分布", "\n", "y_train_predict = mlp", ".predict_classes", "(X_train)\n", "print", "(y_train_predict)", "\n\n", "\n", "输出结果为", "\n", "\n", "而新版本的经上网查询只能用下面代码替代", "\n", "y_train_predict = mlp", ".predict", "(X_train)\ny_train_predict = np", ".argmax", "(y_train_predict, axis=", "1", ")\n", "print", "(y_train_predict)", "\n\n", "\n", "而打印出的预测结果确实这样", "\n", "\n", "结果变成一维数据并且预测全为0，有什么办法可以解决？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;最后的return语句要拿到for循环外面&amp;#xff0c;不然循环一次就结束了&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中for循环range（）的问题", ["在python中遇到一共for循环和range的问题", "为啥结果d=0呀？不应该是0 1 2 吗？哪里出问题了？", "\n", "def euclidean_distance(one_sample, x):\n    ", "k", "=x.shape[0]\n    ", "print", "(k)\n    ", "print", "(", "\"中心点\"", ",x)\n    ", "print", "(", "\"样本\"", ",one_sample)\n    ", "for", " d ", "in", " range(k):\n        ", "print", "(", "\"d\"", ",d)\n        ", "print", "(", "\"单个样本\"", ",one_sample)\n        ", "print", "(", "\"中心\"", ",x[d])\n        distances= np.sum((x[d]-one_sample)*", "*2", ")\n        ", "print", "(", "\"距离\"", ",distances)\n        return distances\n\n运行结果是：\n3\n中心点 [[4.8 3.1 1.6 0.2]\n [6.7 3.  5.  1.7]\n [5.1 3.5 1.4 0.2]]\n样本 [5.9 3.  5.1 1.8]\nd 0\n单个样本 [5.9 3.  5.1 1.8]\n中心 [4.8 3.1 1.6 0.2]\n距离 16.029999999999998\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;27749492/300无法整除啊&amp;#xff0c;也就是reshape到300列&amp;#xff0c;你的行数不对&amp;#xff0c;最后一行少几个参数&amp;#xff0c;所以会报错。&lt;br /&gt;[:, 300]是切片&amp;#xff0c;相当于将列号为300列的这一列切分出来。&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/077888789566187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["出现cannot reshape array of size 27749792 into shape (300,1)", ["\n", "# 转numpy数组,打乱顺序", "\n    ", "dataSet", " = np.array(dataSet).reshape(-", "1", ", ", "300", ")\n    ", "lableSet", " = np.array(lableSet).reshape(-", "1", ", ", "1", ")\n    ", "train_ds", " = np.hstack((dataSet, lableSet))\n    ", "np", ".random.shuffle(train_ds)\n\n    ", "# 数据集及其标签集", "\n    ", "X", " = train_ds.reshape(-", "1", ", ", "300", ", ", "1", ")\n    ", "Y", " = train_ds\n", "\n", "这样就会出这个报错", "然后我把改成这样，就能运行", "\n", "\n    ", "X", " = train_ds[:, ", "300", "].reshape(-", "1", ", ", "300", ", ", "1", ")\n    ", "Y", " = train_ds[:, ", "300", "]\n\n", "\n", "想问问这个[:, 300]是什么意思？有没有人来解答一下"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;res &amp;#61; requests.&lt;span class=\"hljs-built_in\"&gt;get&lt;/span&gt;(url)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(res.text)#打印内容看下&amp;#xff0c;应该是缺少参数或者不正确导致返回了错误信息&amp;#xff0c;没有result属性。根据返回的错误看下api需要什么参数\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["利用百度Api将经纬度转地址时，出现“ KeyError: 'result' ”怎么解决", ["代码如下：", "\n", "from bs4 import BeautifulSoup\nimport requests\nimport json\nlat1 = np", ".array", "(df2", "[", "'经度'", "]", ")\nlng1 = np", ".array", "(df2", "[", "'纬度'", "]", ")\n\naddress1 = ", "[]", "\n", "for", " ", "i", " ", "in", " range(len(lat1)):\n    AK = ", "'tBB0SG06vj3MWDjHj7X1shMxXVgvZOCm'", "\n    url = ", "'http://api.map.baidu.com/reverse_geocoding/v3/?ak={}&output=json&coordtype=wgs84ll&location={},{}'", ".format", "(AK,lat1", "[i]", ",lng1", "[i]", ")\n    res = requests", ".get", "(url)\n    address_ = json", ".loads", "(res.text)", "[", "'result'", "]", "[", "'formatted_address'", "]", "\n    address1", ".append", "(address_)\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;print(type(arrl).arrl)&lt;/p&gt;\n&lt;p&gt;应该是&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;print(type(arrl),arrl)&lt;/p&gt;\n&lt;p&gt;点号改成逗号&amp;#xff0c;希望采纳&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["根据报错提示修改了变量", ["友友们这是出了什么问题，根据报错提示修改了变量，可是仍然报错，怎么修改，忘提示", "\n", "\n", "import", " numpy ", "as", " np\n", "lst", "=[", "11", ",", "22", ",", "33", "]\n", "print", "(", "type", "(lst),lst)\n\n", "arrl", " = np.array(lst)\n", "print", "(", "type", "(arrl).arrl)\n\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/040989123236187.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#arr数组#的问题，如何解决？", ["arr1=np.array([[1,2,3],[4,5,6],[7,8,9]])", "arr2=np.array([[True, False, False ],[False, True, False],[False,False, True]])", "print(arr1)", "print(arr2)", "运行 arr1[arr2]的结果是?", "A、 array([1, 4, 9])", "B、 array([1, 4, 8])", "C、 array([1, 5, 9])", "D、 array([2, 4, 9])"]], "Tag": "算法设计"}
{"Answer": "因为你原来有10000个元素，你reshape只有6000\r\n![图片说明](https://img-ask.csdn.net/upload/201909/07/1567823128_375982.jpg)", "Konwledge_Point": "应对NP完全问题", "Question": ["如何解决 cannot reshape array of size 10000 into shape (1000,6)", ["我把excel数据（纯数字）导入datamatrix，但是在np.array(x).reshape((len(x),6)) 的时候报错了，有哪位大佬可以解释一下吗", "\n\n", "import numpy as np\nimport urllib.request\nimport pandas as pd\nfrom pandas import DataFrame\nimport numpy as np\nimport pandas as pd\nimport xlrd\nfrom sklearn import preprocessing\ndef excel_to_matrix(path):\n    table = xlrd.open_workbook(path).sheets()[0]  # 获取第一个sheet表\n    row = table.nrows  # 行数\n    col = table.ncols  # 列数\n    datamatrix = np.zeros((row, col))\n    for x in range(col):\n        cols = np.matrix(table.col_values(x))\n\n        datamatrix[:, x] = cols\n    return datamatrix\n\n\ndatafile = u'C:\\\\Users\\\\asus\\\\PycharmProjects\\\\2\\\\venv\\\\Lib\\\\附件2：数据.xls'\ndatamatrix=excel_to_matrix(datafile)\ndata=pd.DataFrame(datamatrix)\n\ny=data[10]\ndata=data.drop(10,1)\nx=data\n\nfrom sklearn import preprocessing\nx_MinMax=preprocessing.MinMaxScaler()\ny_MinMax=preprocessing.MinMaxScaler()\n\ny.as_matrix(y)\ny=np.array(y).reshape((len(y),1))\nx=np.array(x).reshape((len(x),6))\nx=x_MinMax.fit_transform(x)\ny=y_MinMax.fit_transform(y)\nx.mean(axis=0)\n\nimport random\nfrom sklearn.cross_validation import train_test_split\nnp.random.seed(2016)\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)\n\nfrom sknn.mlp import Regressor,Layer #预测模型\nw_train=x_train[:,0]\nw_train[y_train==0]=1\nw_train[y_train==1]=1.10\nfit3=Regressor(layers=[Layer('Tanh',units=45),Layer('Tanh',units=18),\n                       Layer('Tanh',units=18),\n                       Layer('softmax')],\n               learning_rate=0.02,\n               random_state=2016,\n               valid_size=0.25,\n               dropout_rate=0.2,\n               learning_momentum=0.30,\n               batch_size=35,\n               n_iter=10\n               )\nfit3.fit(x_train,y_train,w_train)\n\nfrom sklearn.metrics import confusion_matrix\npredict3_train=fit3.predict(x_train)\nscore3=fit3.score(x_train,y_train)\nconfu3=confusion_matrix(y_train,predict3_train)\nprint(confu3)\nscore_text3=fit3.score(x_test,y_test)\nprint(score_text3)\npredict3_test=fit3.predict(x_test)\nconfu3_test=confusion_matrix(y_test,predict3_test)\nprint(confu3_test)\n\n"]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/pinard/p/11114748.html", "Konwledge_Point": "应对NP完全问题", "Question": ["Python中XGBoost库Param使用问题。", ["在学习使用xgboost的过程中，编写param传入xgboost.cv等函数过程中jupyter一直提示Parameters: { xxx } might not be used.想请问出现的原因以及解决办法，代码应该是没问题的。", "\n\n", "from xgboost import XGBRegressor as XGBR\nfrom sklearn.ensemble import RandomForestRegressor as RFR\nfrom sklearn.linear_model import LinearRegression as LinearR\nfrom sklearn.datasets import load_boston\nfrom sklearn.model_selection import KFold, cross_val_score as CVS, train_test_split as TTS\nfrom sklearn.metrics import mean_squared_error as MSE\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom time import time\nimport datetime\nimport xgboost as xgb\nfrom sklearn.datasets import load_breast_cancer\ndata2 = load_breast_cancer()\nx2 = data2.data\ny2 = data2.target\ndfull2 = xgb.DMatrix(x2,y2)\nparam1 = {'silent':True,'obj':'binary:logistic',\"gamma\":0,\"nfold\":5}\nparam2 = {'silent':True,'obj':'binary:logistic',\"gamma\":2,\"nfold\":5}\nnum_round = 100\ntime0 = time()\ncvresult1 = xgb.cv(params=param1,dtrain=dfull2, num_boost_round=num_round,metrics=(\"error\"))\nprint(datetime.datetime.fromtimestamp(time()-time0).strftime(\"%M:%S:%f\"))\ntime0 = time()\ncvresult2 = xgb.cv(params=param2,dtrain=dfull2, num_boost_round=num_round,metrics=(\"error\"))\nprint(datetime.datetime.fromtimestamp(time()-time0).strftime(\"%M:%S:%f\"))\nplt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(range(1,101),cvresult1.iloc[:,0],c=\"red\",label=\"train,gamma=0\")\nplt.plot(range(1,101),cvresult1.iloc[:,2],c=\"orange\",label=\"test,gamma=0\")\nplt.plot(range(1,101),cvresult2.iloc[:,0],c=\"green\",label=\"train,gamma=2\")\nplt.plot(range(1,101),cvresult2.iloc[:,2],c=\"blue\",label=\"test,gamma=2\")\nplt.legend()\nplt.show()\n", "\n\n", "结果显示如下", "\n\n", "WARNING: C:\\Users\\Administrator\\workspace\\xgboost-win64_release_1.2.0\\src\\learner.cc:516: \nParameters: { nfold, obj, silent } might not be used.\n\n  This may not be accurate due to some parameters are only used in language bindings but\n  passed down to XGBoost core.  Or some parameters are not used but slip through this\n  verification. Please open an issue if you find above cases.\n\n\n[20:18:40] WARNING: C:\\Users\\Administrator\\workspace\\xgboost-win64_release_1.2.0\\src\\learner.cc:516: \nParameters: { nfold, obj, silent } might not be used.\n\n  This may not be accurate due to some parameters are only used in language bindings but\n  passed down to XGBoost core.  Or some parameters are not used but slip through this\n  verification. Please open an issue if you find above cases.\n\n\n[20:18:40] WARNING: C:\\Users\\Administrator\\workspace\\xgboost-win64_release_1.2.0\\src\\learner.cc:516: \nParameters: { nfold, obj, silent } might not be used.\n\n  This may not be accurate due to some parameters are only used in language bindings but\n  passed down to XGBoost core.  Or some parameters are not used but slip through this\n  verification. Please open an issue if you find above cases.\n\n\n00:00:104294\n[20:18:41] WARNING: C:\\Users\\Administrator\\workspace\\xgboost-win64_release_1.2.0\\src\\learner.cc:516: \nParameters: { nfold, obj, silent } might not be used.\n\n  This may not be accurate due to some parameters are only used in language bindings but\n  passed down to XGBoost core.  Or some parameters are not used but slip through this\n  verification. Please open an issue if you find above cases.\n\n\n[20:18:41] WARNING: C:\\Users\\Administrator\\workspace\\xgboost-win64_release_1.2.0\\src\\learner.cc:516: \nParameters: { nfold, obj, silent } might not be used.\n\n  This may not be accurate due to some parameters are only used in language bindings but\n  passed down to XGBoost core.  Or some parameters are not used but slip through this\n  verification. Please open an issue if you find above cases.\n\n\n[20:18:41] WARNING: C:\\Users\\Administrator\\workspace\\xgboost-win64_release_1.2.0\\src\\learner.cc:516: \nParameters: { nfold, obj, silent } might not be used.\n\n  This may not be accurate due to some parameters are only used in language bindings but\n  passed down to XGBoost core.  Or some parameters are not used but slip through this\n  verification. Please open an issue if you find above cases.\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;data &amp;#61; torch.cat(data, 0)  这一行后data是个tensor对象了&amp;#xff0c;后面再for循环时候不是list 也就不能append&amp;#xff0c;可以等for结束后再执行这个拼接&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于张量存储到list中报错：AttributeError: 'Tensor' object has no attribute 'append'", ["代码部分", "\n", "\n        data = []\n        ", "for", " n ", "in", " ", "range", "(", "3", ", ", "11", ", ", "2", "):\n            ", "for", " i ", "in", " ", "range", "(", "0", ", n, ", "2", "):\n                ", "image", " = Image.open(img_path_list[i]).", "convert", "('RGB')\n                data.", "append", "(torch.unsqueeze(self.transforms(", "image", "), ", "dim", "=", "0", "))\n            ", "for", " i ", "in", " ", "range", "(", "1", ", n - ", "1", ", ", "2", "):\n                ", "image", " = Image.open(img_path_list[i]).", "convert", "('", "1", "')\n                ", "image", " = ", "np", ".", "array", "(", "image", ")\n                ", "image", " = ", "np", ".expand_dims(", "image", ",axis=", "2", ")\n                ", "image", " = ", "np", ".concatenate((", "image", ", ", "image", ", ", "image", "), axis=-", "1", ")\n                data.", "append", "(torch.unsqueeze(self.transforms(", "image", "), ", "dim", "=", "0", "))\n            data = torch.cat(data, ", "0", ")  # torch.cat是将两个张量（tensor）拼接在一起\n            ", "label", " = Image.open(img_path_list[n])\n            ", "label", " = torch.squeeze(self.transforms(", "label", "))\n        sample = {'data': data, '", "label", "': ", "label", "}\n        ", "return", " sample\n", "\n", "报错", "\n", "AttributeError: ", "'Tensor'", " ", "object", " has ", "no", " ", "attribute", " ", "'append'", " \n", "\n", "是哪里的问题？如何解决这个报错呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我费劲给你写了朋友&amp;#xff0c;采纳给我不过分把&amp;#xff1f;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;import pandas as pd\nimport numpy as np\n\n\ndf &amp;#61; pd.DataFrame([[1,np.nan,3],[4,np.nan,6],[7,8,9]])\n\nprint(df)\n\n# 转层矩阵&amp;#xff0c;让NAN右移动&amp;#xff0c;行遍历\nmatrix &amp;#61; df.values\nfor m in range(len(matrix)):\n    row &amp;#61; matrix[m]\n    for x in range(len(row)):\n        if np.isnan(row[x]):\n            if x &amp;#61;&amp;#61; len(row)-1:\n                pass\n            else:\n                matrix[m] &amp;#61; np.concatenate([row[:x], row[x&amp;#43;1:] , row[x:x&amp;#43;1]],axis&amp;#61;0)\ndf_ &amp;#61; pd.DataFrame(matrix)\ndf_.columns &amp;#61; df.columns\nprint(df_)\n\n# 替换nan\ndf_ &amp;#61; df_.fillna(&amp;#39;否&amp;#39;)\nprint(df_)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;输出展示&amp;#xff1a;&lt;/p&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"235\" src=\"https://img-ask.csdnimg.cn/upload/1612429183783.png\" width=\"214\" /&gt;&lt;/p&gt;\n\n&lt;p&gt;请关注公众号「机器学习炼丹术」&amp;#xff5e;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["dataframe 数据列错位，后一列替换前一列", ["\n", "import pandas as pd\nimport numpy as np\ndf = pd.DataFrame([[1,np.nan,3],[4,np.nan,6],[7,8,9]])\nprint(df)\n", "\n\n", "\n\n", "期望的结果：", "\n\n", "3和6移到前一列，并用“否”替换之", "\n\n", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n\n\ndf &amp;#61; pd.DataFrame({&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;收益率&amp;#39;&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0.5&lt;/span&gt;, np.NAN, &lt;span class=\"hljs-number\"&gt;0.36&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0.45678&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;0.345&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;]})\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(df)\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;astype_percent&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;data&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;isinstance&lt;/span&gt;(data,&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; np.isnan(data):\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; data\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;%.2f%%&amp;#39;&lt;/span&gt; % (data * &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;isinstance&lt;/span&gt;(data,&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;%.2f%%&amp;#39;&lt;/span&gt; % (data * &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;isinstance&lt;/span&gt;(data,&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt;:\n            data &amp;#61; &lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;(data)\n        &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; np.NAN\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;%.2f%%&amp;#39;&lt;/span&gt; % (&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;(data) * &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;)\n\n\ndf[&lt;span class=\"hljs-string\"&gt;&amp;#39;收益率&amp;#39;&lt;/span&gt;] &amp;#61; df[&lt;span class=\"hljs-string\"&gt;&amp;#39;收益率&amp;#39;&lt;/span&gt;].apply(astype_percent)\n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/264823637556151.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["【python, append】将一列数据改为百分比、并解决append替换前面数据的问题", ["如何将一列混合数据改为百分比、并解决append替换前面数据问题", "\n", "df为一个有多行多列的dataframe，其中一列df['收益率']包含多种类型(float、NAN、以及string)，希望把df['收益率']中的float转为百分比格式，其他数据不变。", "\n", "代码如下：", "\n", "def", " ", "astype_percent", "(", "df", "):\n    t = []      \n    ", "for", " i ", "in", " df:\n        use_dict = {}\n        ", "if", " ", "type", "(i) == ", "float", ":\n            ", "if", " ", "not", " np.isnan(i):\n                i = ", "'%.2f%%'", " % (i * ", "100", ")\n        ", "if", " ", "type", "(i) == ", "str", ":\n            use_dict = ", "str", "(i)        \n        t.append(use_dict)\n    ", "return", " pd.Series(t)\n\ndf[", "'收益率'", "] = astype_percent(df[", "'收益率'", "])\n", "\n", "然后发现df['收益率'] 这列整体往前移动了一行，导致错位、最后一行缺值。", "查了如何解决append替换前面数据的问题，但没有起作用"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;import math&lt;br /&gt;pi&amp;#61;math.pi&lt;br /&gt;这样后面就可以用这个pi了&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pi从库里导入后如何定义。(语言-python)", ["a=（[[0，pi]，[pi/2，-pi/4]）", "np.cos", "np.sin"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码有两个问题。&lt;/p&gt;\n&lt;p&gt;首先&amp;#xff0c;你在更新坐标点时&amp;#xff0c;有时候会尝试将点移动到超出100*100的边界之外&amp;#xff0c;这可能导致程序停止。你可以在移动之前添加一个条件判断&amp;#xff0c;如果点移动到边界之外&amp;#xff0c;就跳过当前的循环。&lt;/p&gt;\n&lt;p&gt;其次&amp;#xff0c;你在选择下一个步骤时&amp;#xff0c;使用的是option数组&amp;#xff0c;但是在处理边界情况时&amp;#xff0c;你分别使用了option_r、option_l、option_u、option_d数组。这会导致在某些情况下无法正确处理点的移动方向。你可以在处理边界情况时&amp;#xff0c;使用option数组来确保正确处理点的移动方向。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["我试图用上述代码模拟   在100*100 中  50*50的位置有一个激活点 \n之后的1000次 每次从边界随机选取一个位置放置一个点 点进行随机移动直到周围也有激活点从而使它也被激活", ["\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\ntuples_1 = ", "[(x, y) for x in range(1, 101) for y in range(1, 101)]", "\ncoordinate = {t: 0 for t in tuples_1}\ncoordinate", "[(50,50)]", " = 1\ntuples_2 = ", "[(x, y) for x in (1,100) for y in range(1, 101)]", "\ntuples_3 = ", "[(x, y) for x in range(1,101) for y in (1, 100)]", "\ntuples_4=tuples_2 + tuples_3\nboundary = {t: 0 for t in tuples_4}\ncore = 1\nwhile core <= 999:\n    item = random.sample(boundary.keys(), 1)\n    state = boundary.get(item", "[0]", ")\n    if state == 1:\n        continue\n    if state == 0:\n        item_list=list(item", "[0]", ")\n        x = item_list", "[0]", "\n        y = item_list", "[1]", "\n        print(x, y)\n        option = np.array(", "[", "[0, 1]", ", ", "[1, 0]", ", ", "[0, -1]", ", ", "[-1, 0]", "]", ")\n        option_r = np.array(", "[", "[0, 1]", ", ", "[0, -1]", ", ", "[-1, 0]", "]", ")\n        option_l = np.array(", "[", "[0, 1]", ", ", "[0, -1]", ", ", "[1, 0]", "]", ")\n        option_u = np.array(", "[", "[1, 0]", ", ", "[0, -1]", ", ", "[-1, 0]", "]", ")\n        option_d = np.array(", "[", "[0, 1]", ", ", "[1, 0]", ", ", "[-1, 0]", "]", ")\n        flag = 0\n        while flag == 0:\n            if x == 1:\n                next_steps = np.random.randint(len(option_l))\n                x += np.array(option", "[next_steps]", ")", "[0]", "\n                y += np.array(option", "[next_steps]", ")", "[1]", "\n            elif x == 100:\n                next_steps = np.random.randint(len(option_r))\n                x += np.array(option", "[next_steps]", ")", "[0]", "\n                y += np.array(option", "[next_steps]", ")", "[1]", "\n            elif y == 1:\n                next_steps = np.random.randint(len(option_d))\n                x += np.array(option", "[next_steps]", ")", "[0]", "\n                y += np.array(option", "[next_steps]", ")", "[1]", "\n            elif y == 100:\n                next_steps = np.random.randint(len(option_u))\n                x += np.array(option", "[next_steps]", ")", "[0]", "\n                y += np.array(option", "[next_steps]", ")", "[1]", "\n            else:\n                next_steps = np.random.randint(len(option))\n                x += np.array(option", "[next_steps]", ")", "[0]", "\n                y += np.array(option", "[next_steps]", ")", "[1]", "\n            if x>100 or x<1 or y>100 or y<1:\n                continue\n            print(x, y)\n            right = coordinate.get((x+1,y))\n            right = int(0 if right ", "is", " None else right)\n            left = coordinate.get((x-1,y))\n            left = int(0 if left ", "is", " None else left)\n            up = coordinate.get((x,y+1))\n            up = int(0 if up ", "is", " None else up)\n            down = coordinate.get((x,y-1))\n            down = int(0 if down ", "is", " None else down)\n            if right + left + up + down >= 1:\n                flag = 1\n        print(x,y)\n        coordinate", "[(x, y)]", " = 1\n        boundary", "[(x, y)]", " = 1\n        core += 1\nx_list, y_list = ", "[]", ", ", "[]", "\nfor k, v in coordinate.items():\n    if v == 1:\n        x_list.append(k", "[0]", ")\n        y_list.append(k", "[1]", ")\nplt.scatter(x_list, y_list)\nplt.xlim(0, 100)\nplt.ylim(0, 100)\nplt.xticks()\nplt.yticks()\nplt.grid(True)\nplt.show()\n\n", "\n", "我试图用上述代码模拟   在100", "100 中  50", "50的位置有一个激活点", "之后的1000次 每次从边界随机选取一个位置放置一个点 点进行随机移动直到周围也有激活点从而使它也被激活", "不知道代码哪里出现了问题，每次到了某个点就会停止 我用的pycharm"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;好吧&amp;#xff0c;换了python37可以跑&amp;#xff0c;老版本需要手动引入。&lt;br /&gt;你的r作为全局变量&amp;#xff0c;赋值只操作了一次&amp;#xff0c;后续每次test送入的range1,anchors都是不会变动值的变量&amp;#xff0c;全是固定值的变量&amp;#xff0c;结果当然都一样。。。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何让一个函数循环执行100次生成不同的结果并存入列表？", ["如图，我想让这个程序运行100次，并把100次定位的结果存到列表中以进行数据分析，请大神帮忙看看怎么弄！", "我当前的代码只能打印出一百个相同的结果，不知道为什么！", "\n", "\n", "import", " numpy ", "as", " np\n", "import", " matplotlib.pyplot ", "as", " plt\n", "from", " scipy.optimize ", "import", " minimize\n", "import", " numpy ", "as", " np\n", "from", " math ", "import", " *\n", "import", " matplotlib.pyplot ", "as", " plt\n", "from", " scipy.optimize ", "import", " minimize\n", "from", " numpy ", "import", " *\n", "from", " numpy.linalg ", "import", " inv, qr\n\nNoise = ", "1", "        ", "#噪声方差", "\na = random.random(", "3", ")\nr = np.zeros(", "3", ")\n", "for", " i ", "in", " ", "range", "(", "0", ",", "3", "):\n    r[i]=", "2", "*a[i]-", "1", "                                   ", "#随机生成一个-1到1的数", "\n\n", "def", " ", "opt_location", "(", "range1, anchors", "):               ", "#range1是真实测得的toa", "\n\n    ", "def", " ", "con", "():\n        ", "# 约束条件 分为eq 和ineq", "\n        ", "# eq表示 函数结果等于0 ； ineq 表示 表达式大于等于0", "\n        x1min, x1max, x2min, x2max = -", "5", ", ", "15", ", -", "5", ", ", "15", "\n        cons = ({", "'type'", ": ", "'ineq'", ", ", "'fun'", ": ", "lambda", " x: x[", "0", "] - x1min},              ", "#x[0]-x1min >= 0", "\n                {", "'type'", ": ", "'ineq'", ", ", "'fun'", ": ", "lambda", " x: -x[", "0", "] + x1max},\n                {", "'type'", ": ", "'ineq'", ", ", "'fun'", ": ", "lambda", " x: x[", "1", "] - x2min},\n                {", "'type'", ": ", "'ineq'", ", ", "'fun'", ": ", "lambda", " x: -x[", "1", "] + x2max})\n        ", "return", " cons                ", "# ", "\n\n    ", "def", " ", "cost", "(", "pos", "):", "#***************", "\n        ref = np.sqrt(np.", "sum", "((anchors-pos.reshape(", "1", ",", "2", "))**", "2", ", axis=", "1", "))         ", "#anchors为四个基站的位置，pos为要优化的位置", "\n        ref0 = ref[", "1", ":] - ref[", "0", "]\n        ref1 = ref[", "2", ":] - ref[", "1", "]\n        ref2 = ref[", "3", ":] - ref[", "2", "]                            ", "#tdoa", "\n        Ri_0 = range1[", "1", ":] - range1[", "0", "] + ", "3", "*Noise*r[", "0", "]\n        Ri_1 = range1[", "2", ":] - range1[", "1", "] + ", "2", "*Noise*r[", "1", "]               \n        Ri_2 = range1[", "3", ":] - range1[", "2", "] + Noise*r[", "2", "]                       ", "#真实测得的tdoa", "\n        ", "return", " np.", "sum", "((Ri_0 - ref0)**", "2", ") + np.", "sum", "((Ri_1 - ref1)**", "2", ") + np.", "sum", "((Ri_2 - ref2)**", "2", ")    ", "#目标函数的目的是要求所估计位置和各基站的tdoa", "\n                                                                                                  ", "#和真实测得的tdoa相差最小", "\n\n    x0 = np.array([", "5", ", ", "5", "])\n    res = minimize(cost, x0, constraints=con()).x\n    ", "return", " res\n", "def", " ", "test", "():\n    ", "#pos = np.array([0,4])", "\n    z = opt_location(range1, anchors)\n    ", "return", " z\n    \nanchors = np.array([[", "0", ",", "0", "],[", "0", ",", "10", "],[", "10", ",", "10", "],[", "10", ",", "0", "]])\n", "#range = np.array([7.07106781,7.07106781,7.07106781,7.07106781])", "\nrangetoa = np.array([", "0.00000002358654336", " , ", "0.00000002358654336", " ,", "0.00000002358654336", " ,", "0.00000002358654336", "])  ", "#移动台为5 5的toa", "\n", "#rangetoa = np.array([0.00000001886923469 , 0.00000002405364897,0.00000002830385204 ,0.00000002405364897])#移动台为4 4 的toa", "\nrangetoa = np.array([", "0.00000002540348465", ", ", "0.00000001415192602", ",", "0.00000002540348465", " ,", "0.00000003302116071", "])", "#移动台为3 7 的toa", "\n", "#rangetoa = np.array([0.00000002028991179, 0.00000001375319997,0.00000003285225341 ,0.00000003608047346])  #移动台为1 6的toa", "\nrange1 = rangetoa * ", "299792458", "\n\nposition = np.zeros((", "100", ",", "2", "),dtype = ", "float", ")\n", "for", " i ", "in", " ", "range", " (", "0", ",", "100", "):\n    position[i] = test()\n    \n", "print", "(position)\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你参数名称写错了&amp;#xff0c;有用记得采纳&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;camp&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;plt.cm.gray\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;改成&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;cmap&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;plt.cm.gray\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于pytorch的一个小问题。", ["import numpy as np", "import torch", "import torch.nn as nn", "import matplotlib.pyplot as plt", "from PIL import Image", "myim = Image.open(\"D:/Lenna.png\")", "myimgray=np.array(myim.convert(\"L\"),dtype=np.float32)", "imh,imw=myimgray.shape", "myimgray_t=torch.from_numpy(myimgray.reshape(1,1,imh,imw))", "myimgray_t.shape", "kersize=5", "ker=torch.ones(kersize,kersize,dtype=torch.float32)*-1", "ker[2,2]=24", "ker=ker.reshape((1,1,kersize,kersize))", "conv2d=nn.Conv2d(1,2,(kersize,kersize),bias=False)", "conv2d.weight.data[0]=ker", "imconv2dout=conv2d(myimgray_t)", "imconv2dout_im=imconv2dout.data.squeeze()", "print(\"卷积后尺寸：\",imconv2dout_im.shape)", "plt.figure(figsize=(12,6))", "plt.subplot(1,2,1)", "plt.imshow(imconv2dout_im[0],camp=plt.cm.gray)", "plt.axis(\"off\")", "plt.subplot(1,2,2)", "plt.imshow(imconv2dout_im[1],camp=plt.cm.gray)", "plt.axis(\"off\")", "plt.show()", "\n", "请问为什么会出现以下报错？", "environment:vsc", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;您好&amp;#xff0c;我是有问必答小助手&amp;#xff0c;您的问题已经有小伙伴解答了&amp;#xff0c;您看下是否解决&amp;#xff0c;可以追评进行沟通哦~&lt;br /&gt;\n&lt;br /&gt;\n如果有您比较满意的答案 / 帮您提供解决思路的答案&amp;#xff0c;可以点击【采纳】按钮&amp;#xff0c;给回答的小伙伴一些鼓励哦&amp;#xff5e;&amp;#xff5e;&lt;br /&gt;\n&lt;br /&gt;\nps:问答VIP仅需29元&amp;#xff0c;即可享受5次/月 有问必答服务&amp;#xff0c;了解详情&amp;gt;&amp;gt;&amp;gt;&lt;a href=\"https://vip.csdn.net/askvip?utm_source&amp;#61;1146287632\"&gt;https://vip.csdn.net/askvip?utm_source&amp;#61;1146287632&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["纯小白，求教numpy一个矩阵计算的问题，挺急的，谢过了！", ["已知有矩阵nu 和 Q,应该怎么写程序才能得到如图所示的矩阵 ek ？", "\n\n", "\n\n", "之前实在matlab上做的，现在想转到numpy上但不知道程序怎么写（就是个简单的循环但是不知道在numpy是什么格式）", "\n\n", "自己写的numpy报错：", "\n\n", "ek=np.zeros([6,4]);", "\n\n", "q=np.array([2.588 2.964 4.029 1.4]);", "\n\n", "nu=np.array([[1,0,1,0],[1,1,2,0],[1,1,1,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]);", "\nQ=np.array([0.848,0.54,1.2,1.224,0.901,1.4]);", "\nQ_trans=np.transpose(Q);", "\n\n", "\nfor i in range(6): ", "\nek[:,1]= np.multiply(nu[:,1]*Q_trans) ", "\n\n", "附原来matlab上写的（运行顺利）", "\n\n", "ek=zeros(6,4);", "\n\n", "q=[2.588 2.964 4.029 1.4];", "\n\n", "nu = [1 0 1 0 ; 1 1 2 0 ; 1 1 1 0  ; 0 1 0 0 ; 0 0 1 0 ; 0 0 0 1];", "\n\n", "for i = 1:6", "\nek(i,:) = nu(i,:)*Q(i)./q;", "\nend", "\n\n", "如果可以的话，我能给各位发matlab的程序，然后大神帮我翻译成numpy的格式吗"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第15行写错了 plt.slow() -&amp;gt; plt.show()&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["这是咋回事，需要qt吗，我已经下载了呀", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "import", " numpy as np\n", "import", " mpl_toolkits.axisartist as ast\n", "from", " matplotlib import pyplot as plt\n\n", "x1", "=[", "2", ",", "5", ",", "3", ",", "1", "]\n", "y1", "=[", "4", ",", "7", ",", "3", ",", "4", "]\n\n", "x2", "=[", "1", ",", "2", ",", "3", ",", "4", "]\n", "y2", "=[", "2", ",", "3", ",", "4", ",", "5", "]\n\n", "x3", "=np.random.randint(", "0", ",", "5", ",", "8", ")\n", "y3", "=np.random.randint(", "0", ",", "5", ",", "8", ")\n\n", "plt", ".scatter(x1,y1,marker='o',color='red',s=", "40", ",label='面包')\n", "plt", ".slow()\n\n\n\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;你可以参考下这个问题的回答, 看看是否对你有帮助, 链接: &lt;a href=\"https://ask.csdn.net/questions/7798826\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;https://ask.csdn.net/questions/7798826&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;这篇博客你也可以参考下&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/Cyril_KI/article/details/108589078\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;粒子群算法(PSO)的Python实现&amp;#xff08;求解多元函数的极值&amp;#xff09;&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;这篇博客也不错, 你可以看下&lt;a href=\"https://blog.csdn.net/Cyril_KI/article/details/108589078\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;粒子群算法(PSO)的Python实现&amp;#xff08;求解多元函数的极值&amp;#xff09;&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的问题：python PSO 粒子群算法 多元函数求极小值问题 运行结果和迭代次数每次都不一样", ["python PSO 粒子群算法 多元函数求极小值问题 运行结果和迭代次数每次都不一样", "\n", "\n", "\n", "# -*- coding: utf-8 -*-", "\n\n", "import", " math\n", "import", " random\n", "import", " numpy ", "as", " np\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " pylab ", "as", " mpl\nmpl.rcParams[", "'font.sans-serif'", "] = [", "'SimHei'", "]\n\n\n", "class", " ", "PSO", ":\n    ", "def", " ", "__init__", "(", "self, dimension, time, size, low, up, v_low, v_high, a, b", "):\n        ", "# 初始化", "\n        self.dimension = dimension  ", "# 变量个数", "\n        self.time = time  ", "# 迭代的代数", "\n        self.size = size  ", "# 种群大小", "\n        self.bound = []  ", "# 变量的约束范围", "\n        self.bound.append(low)\n        self.bound.append(up)\n        self.v_low = v_low\n        self.v_high = v_high\n        self.x = np.zeros((self.size, self.dimension))  ", "# 所有粒子的位置", "\n        self.v = np.zeros((self.size, self.dimension))  ", "# 所有粒子的速度", "\n        self.p_best = np.zeros((self.size, self.dimension))  ", "# 每个粒子最优的位置", "\n        self.g_best = np.zeros((", "1", ", self.dimension))[", "0", "]  ", "# 全局最优的位置", "\n        self.a = a\n        self.b = b\n\n        ", "# 初始化第0代初始全局最优解", "\n        temp = ", "1000000", "\n        ", "for", " i ", "in", " ", "range", "(self.size):\n            ", "for", " j ", "in", " ", "range", "(self.dimension):\n                self.x[i][j] = random.uniform(self.bound[", "0", "][j], self.bound[", "1", "][j])\n                self.v[i][j] = random.uniform(self.v_low, self.v_high)\n            self.p_best[i] = self.x[i]  ", "# 储存最优的个体", "\n            fit = self.fitness(self.p_best[i])\n            ", "# 做出修改", "\n            ", "if", " fit < temp:\n                self.g_best = self.p_best[i]\n                temp = fit\n\n    ", "def", " ", "fitness", "(", "self, x", "):\n        ", "\"\"\"\n        个体适应值计算\n        \"\"\"", "\n        x1 = x[", "0", "]\n        x2 = x[", "1", "]\n        x3 = x[", "2", "]\n        x4 = x[", "3", "]\n        ", "for", " i ", "in", " ", "range", "(", "11", "):\n            y = (a[i] - (x1 * (", "1", " + b[i] * x2))/(", "1", " + b[i] * x3 + x4 * b[i] * b[i]))**", "2", "\n        ", "# print(y)", "\n        ", "return", " y\n\n    ", "def", " ", "update", "(", "self, size", "):\n        c1 = ", "1.5", "  ", "# 学习因子", "\n        c2 = ", "1.5", "\n        w = ", "0.8", "  ", "# 自身权重因子", "\n        ", "for", " i ", "in", " ", "range", "(size):\n            ", "# 更新速度(核心公式)", "\n            self.v[i] = w * self.v[i] + c1 * random.uniform(", "0", ", ", "1", ") * (\n                    self.p_best[i] - self.x[i]) + c2 * random.uniform(", "0", ", ", "1", ") * (self.g_best - self.x[i])\n            ", "# 速度限制", "\n            ", "for", " j ", "in", " ", "range", "(self.dimension):\n                ", "if", " self.v[i][j] < self.v_low:\n                    self.v[i][j] = self.v_low\n                ", "if", " self.v[i][j] > self.v_high:\n                    self.v[i][j] = self.v_high\n\n            ", "# 更新位置", "\n            self.x[i] = self.x[i] + self.v[i]\n            ", "# 位置限制", "\n            ", "for", " j ", "in", " ", "range", "(self.dimension):\n                ", "if", " self.x[i][j] < self.bound[", "0", "][j]:\n                    self.x[i][j] = self.bound[", "0", "][j]\n                ", "if", " self.x[i][j] > self.bound[", "1", "][j]:\n                    self.x[i][j] = self.bound[", "1", "][j]\n            ", "# 更新p_best和g_best", "\n            ", "if", " self.fitness(self.x[i]) < self.fitness(self.p_best[i]):\n                self.p_best[i] = self.x[i]\n            ", "if", " self.fitness(self.x[i]) < self.fitness(self.g_best):\n                self.g_best = self.x[i]\n\n    ", "def", " ", "pso", "(", "self", "):\n        best = []\n        self.final_best = np.array([", "1", ", ", "2", ", ", "3", ", ", "4", "])\n        ", "for", " gen ", "in", " ", "range", "(self.time):\n            self.update(self.size)\n            ", "if", " self.fitness(self.g_best) < self.fitness(self.final_best):\n                self.final_best = self.g_best.copy()\n            ", "print", "(", "'当前最佳位置：{}'", ".", "format", "(self.final_best))\n            temp = self.fitness(self.final_best)\n            ", "print", "(", "'当前的最佳适应度：{}'", ".", "format", "(temp))\n            best.append(temp)\n        t = [i ", "for", " i ", "in", " ", "range", "(self.time)]\n        plt.figure()\n        plt.plot(t, best, color=", "'red'", ", marker=", "'.'", ", ms=", "15", ")\n        plt.rcParams[", "'axes.unicode_minus'", "] = ", "False", "\n        plt.margins(", "0", ")\n        plt.xlabel(", "u\"迭代次数\"", ")  ", "# X轴标签", "\n        plt.ylabel(", "u\"适应度\"", ")  ", "# Y轴标签", "\n        plt.title(", "u\"迭代过程\"", ")  ", "# 标题", "\n        plt.show()\n\n\n", "if", " __name__ == ", "'__main__'", ":\n    time = ", "100", "\n    size = ", "100", "\n    dimension = ", "4", "\n    v_low = -", "0.5", "\n    v_high = ", "0.5", "\n    low = [-", "5", ", -", "5", ", -", "5", ", -", "5", "]\n    up = [", "5", ", ", "5", ", ", "5", ", ", "5", "]\n    a = [", "0.1957", ", ", "0.1947", ", ", "0.1735", ", ", "0.16", ", ", "0.0844", ", ", "0.0627", ", ", "0.0456", ", ", "0.0342", ", ", "0.0323", ", ", "0.0235", ", ", "0.0246", "]\n    b = [", "0.25", ", ", "0.5", ", ", "1", ", ", "2", ", ", "4", ", ", "6", ", ", "8", ", ", "10", ", ", "12", ", ", "14", ", ", "16", "]\n    pso = PSO(dimension, time, size, low, up, v_low, v_high, a, b)\n    pso.pso()\n\n", "\n", "\n", "\n", "\n", "是代码哪里错误了吗，还是粒子群算法结果就是这样的，希望能给出错误地方或者解决这个问题的代码。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code&gt;创建的数组1为&amp;#xff1a;\n &lt;span class=\"hljs-comment\"&gt;[&lt;span class=\"hljs-comment\"&gt;[1. 0. 0.]&lt;/span&gt;\n &lt;span class=\"hljs-comment\"&gt;[0. 1. 0.]&lt;/span&gt;\n &lt;span class=\"hljs-comment\"&gt;[0. 0. 1.]&lt;/span&gt;]&lt;/span&gt;\n创建的数组2为&amp;#xff1a;\n &lt;span class=\"hljs-comment\"&gt;[&lt;span class=\"hljs-comment\"&gt;[1. 1. 1.]&lt;/span&gt;\n &lt;span class=\"hljs-comment\"&gt;[1. 1. 1.]&lt;/span&gt;\n &lt;span class=\"hljs-comment\"&gt;[1. 1. 1.]&lt;/span&gt;]&lt;/span&gt;\n叠放后的数组为&amp;#xff1a;\n &lt;span class=\"hljs-comment\"&gt;[&lt;span class=\"hljs-comment\"&gt;[1. 0. 0.]&lt;/span&gt;\n &lt;span class=\"hljs-comment\"&gt;[0. 1. 0.]&lt;/span&gt;\n &lt;span class=\"hljs-comment\"&gt;[0. 0. 1.]&lt;/span&gt;\n &lt;span class=\"hljs-comment\"&gt;[1. 1. 1.]&lt;/span&gt;\n &lt;span class=\"hljs-comment\"&gt;[1. 1. 1.]&lt;/span&gt;\n &lt;span class=\"hljs-comment\"&gt;[1. 1. 1.]&lt;/span&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["数据分析 答案是什么 求解", ["请把三行的输出结果写出来\narr1 = np.eye(3)\narr2 = np. ones(3,3)\nprint('创建的数组1为：＼n',arr1)\nprint('创建的数组2为：＼n',np.ones(3,3))\nprint('叠放后的数组为：＼n',np.vstack((arr1,arr2)))"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码中数据导入是通过读取xslx表格数据为数据框&amp;#xff0c;然后取数据框中第一列后面所有列的数组赋值给X,把第一列数组赋值给y。因X是一个numpy数组&amp;#xff0c;不是dataframe,没有to_excel方法&amp;#xff0c;所以报错。numpy数组的保存方法&amp;#xff0c;参考一下这里&lt;a href=\"https://blog.csdn.net/leilei7407/article/details/107511187\"&gt;https://blog.csdn.net/leilei7407/article/details/107511187&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["想问一下决策树模型中如何导入做出的数据", ["#模型输出y", "\nChurn_y=np.array(Churn).reshape(-1,1)", "\n\n", "#模型输入x", "\nSeniorCitizen_x=np.array(SeniorCitizen).reshape(-1,1)", "\nContract_x=Contract_dummies.values", "\nInternetService_x=InternetService_dummies.values", "\nPaymentMethod_x=np.array(PaymentMethod).reshape(-1,1)", "\nOnlineSecurity_x=np.array(OnlineSecurity).reshape(-1,1)", "\nOnlineBackup_x=np.array(OnlineBackup).reshape(-1,1)", "\nDeviceProtection_x=np.array(DeviceProtection).reshape(-1,1)", "\nTechSupport_x=np.array(TechSupport).reshape(-1,1)", "\ntenure_x=tenure_dummies.values", "\nMonthlyCharges_x=MonthlyCharges_dummies.values", "\n\n", "X=np.concatenate([SeniorCitizen_x,Contract_x,InternetService_x,PaymentMethod_x,OnlineSecurity_x,\\ OnlineBackup_x,DeviceProtection_x,TechSupport_x,tenure_x,MonthlyCharges_x],axis=1)", "\n#数据导入", "\nimport pandas as pd", "\nimport numpy as np", "\ndata_frame=pd.read_excel(\"Save_X.xlsx\")", "\nX=np.array(data_frame.values[:,1:])", "\ndata_frame2=pd.read_excel(\"Save_y.xlsx\")", "\ny=np.array(data_frame2.values[:,1])", "\n#模型训练", "\nfrom sklearn.model_selection import train_test_split", "\nfrom sklearn.tree import DecisionTreeClassifier", "\nx_train, x_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=42)", "\ntree = DecisionTreeClassifier(max_depth=6,random_state=0)", "\ntree.fit(x_train,y_train)", "\nprint(\"training set score:{:.3f}\".format(tree.score(x_train, y_train)))", "\nprint(\"test set score:{:.3f}\".format(tree.score(x_test, y_test)))", "\nprint(\"Feature importances : \\n{}\".format(tree.feature_importances_))", "\n ", "\n\n", "这里的data_frame=pd.read_excel(\"Save_X.xlsx\")", "\n\n", "data_frame2=pd.read_excel(\"Save_y.xlsx\")是怎么导入进去的", "\n\n", "使用X.to_excel的时候会出现问题：", "\n\n", "AttributeError: 'numpy.ndarray' object has no attribute 'to_excel'"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你现在画的图应该纵坐标是[0,30,60,90,120,150,180,150,120,90,60,30]&amp;#xff0c;你的目标是要在后面加上W和E&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python坐标轴设置", ["python", "怎么设置y轴为指定经纬度？就像这幅图一样。这是代码", "\n", "\n", "我用的python版本为3.9", "\n", "import os\nos.environ[", "'PROJ_LIB'", "]=", "'D:\\\\Anaconda\\\\Library\\\\share'", "\nos.chdir(", "\"D:\\硕士研究生\"", ")\nos.getcwd()\n", "from", " netCDF4 import Dataset\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mticker\n\n", "#def colormap():", "\n", "#    import matplotlib.colors as colors", "\n", "#    cdict=[(1,1,1),(0,1,1),(0,157/255,1),(0,0,1),(9/255,130/255,175/255),(0,1,0),(8/255,175/255,20/255),(1,214/255,0),(1,152/255,0),(1,0,0),(221/255,0,27/255),(188/255,0,54/255),(121/255,0,109/255),(121/255,51/255,160/255),(195/255,163/255,212/255),]", "\n", "#    return (colors.ListedColormap(cdict,'indexed'))", "\n\n", "data_file", "=", "'201412-100.nc'", "\n", "nc_file", "=Dataset(data_file)\n", "#print(nc_file)", "\n", "var_names", "=nc_file.variables.keys()\n", "#print(var_names)", "\n", "all_vars", "=nc_file.variables.items()\n", "#print(all_vars)", "\n", "#print(nc_file.variables['u'])", "\n", "lev", "=nc_file.variables[", "'t'", "]\n", "#print(lev)", "\n", "lev1", "=nc_file.variables[", "'latitude'", "]\n", "#print(lev1)", "\n\n", "U", "=nc_file.variables[", "\"u\"", "][:,:,:,:]\n", "T", "=nc_file.variables[", "\"t\"", "][:,:,:,:]\n\n", "shape_U", "=np.shape(U)\n", "print", "(shape_U)\n", "lat_U2hPa", "=np.zeros((31,91),dtype='f')\n", "lat_U2hPa100_130", "=np.zeros((31,91),dtype='f')\n", "lon_U2hPa", "=np.zeros((31,360),dtype='f')\n", "lon_U2hPa35_70", "=np.zeros((31,360),dtype='f')\n", "lon_U2hPareal", "=np.zeros((360,31),dtype='f')\n", "lon_U2hPa35_70real", "=np.zeros((360,31),dtype='f')\n", "sum", "=np.zeros(31,dtype='f')\n", "sum1", "=np.zeros(31,dtype='f')\n", "lat_T2hPa", "=np.zeros((31,91),dtype='d')\n", "lat_T2hPa100_130", "=np.zeros((31,91),dtype='d')\n", "lon_T2hPa", "=np.zeros((31,360),dtype='d')\n", "lon_T2hPa35_70", "=np.zeros((31,360),dtype='d')\n", "lon_T2hPareal", "=np.zeros((360,31),dtype='f')\n", "lon_T2hPa35_70real", "=np.zeros((360,31),dtype='f')\n\n", "for", " i ", "in", " np.arange(shape_U[0]):\n    ", "for", " j ", "in", " np.arange(shape_U[2]):\n        ", "for", " k ", "in", " np.arange(shape_U[3]):\n            lat_U2hPa[i,j]+=U[i,1,j,k]\n            lat_T2hPa[i,j]+=T[i,1,j,k]\n        lat_U2hPa[i,j]=lat_U2hPa[i,j]/shape_U[3]\n        lat_T2hPa[i,j]=lat_T2hPa[i,j]/shape_U[3]\n", "for", " i ", "in", " np.arange(shape_U[0]):\n    ", "for", " j ", "in", " np.arange(shape_U[2]):\n        ", "for", " k ", "in", " np.arange(280,310):\n            lat_U2hPa100_130[i,j]+=U[i,1,j,k]\n            lat_T2hPa100_130[i,j]+=T[i,1,j,k]\n        lat_U2hPa100_130[i,j]=lat_U2hPa100_130[i,j]/30\n        lat_T2hPa100_130[i,j]=lat_T2hPa100_130[i,j]/30\n\n", "lat_U2hPa", "=lat_U2hPa100_130-lat_U2hPa\n", "lat_T2hPa", "=lat_T2hPa100_130-lat_T2hPa\n", "lat_U2hPa", "=lat_U2hPa.transpose(1,0)\n", "lat_T2hPa", "=lat_T2hPa.transpose(1,0)\n\n", "for", " i ", "in", " np.arange(shape_U[0]):\n    ", "for", " j ", "in", " np.arange(shape_U[3]):\n        ", "for", " k ", "in", " np.arange(20,55):\n            lon_U2hPa35_70[i,j]+=U[i,1,k,j]\n            lon_T2hPa35_70[i,j]+=T[i,1,k,j]\n        lon_U2hPa35_70[i,j]=lon_U2hPa35_70[i,j]/35\n        lon_T2hPa35_70[i,j]=lon_T2hPa35_70[i,j]/35\n", "for", " i ", "in", " np.arange(shape_U[0]):\n    ", "for", " j ", "in", " np.arange(shape_U[3]):\n        sum[i]+=lon_U2hPa35_70[i,j]\n        sum1[i]+=lon_T2hPa35_70[i,j]\n    sum[i]=sum[i]/shape_U[3]\n    sum1[i]=sum1[i]/shape_U[3]\n    ", "for", " j ", "in", " np.arange(shape_U[3]):\n        lon_U2hPa[i,j]=lon_U2hPa35_70[i,j]-sum[i]\n        lon_T2hPa[i,j]=lon_T2hPa35_70[i,j]-sum1[i]\n        \n", "lon_U2hPa", "=lon_U2hPa.transpose(1,0)\n", "lon_T2hPa", "=lon_T2hPa.transpose(1,0)\n\n", "for", " i ", "in", " np.arange(0,31):\n    ", "for", " j ", "in", " np.arange(0,360):\n        ", "if", " j <180:\n            lon_U2hPareal[j,i]=lon_U2hPa[j+180,i]\n            lon_T2hPareal[j,i]=lon_T2hPa[j+180,i]\n        lon_U2hPareal[j,i]=lon_U2hPa[j-180,i]\n        lon_T2hPareal[j,i]=lon_T2hPa[j-180,i]\n\n", "print", "(np.shape(lon_U2hPa))\n", "print", "(np.shape(lon_T2hPareal))\n\n", "#绘图", "\n", "#print(np.shape(lat_U))", "\n", "x", "=np.arange(1,32)\n", "#print(np.shape(Y))", "\n", "y", "=nc_file.variables[", "\"latitude\"", "][:]\n", "y1", "=nc_file.variables[", "\"longitude\"", "][:]\n", "print", "(np.shape(y1))\n\n", "#print(np.shape(X))", "\nX,", "Y", "=np.meshgrid(x,y)\nX1,", "Y1", "=np.meshgrid(x,y1)\nfg,", "axes", "=plt.subplots(2,1)\nfg.set_size_inches(5,8)\n", "lvl", "=np.arange(-45,55,5)\n", "lv2", "=np.arange(-20,30,5)\n", "im1", "=axes[0].contourf(X,Y,lat_U2hPa,", "levels", "=lvl,cmap='jet',extend='both')\n", "im2", "=axes[0].contour(X,Y,lat_T2hPa,", "levels", "=lv2,colors='k')\naxes[0].set_xlabel(", "'date'", ",", "fontsize", "=10)\naxes[0].clabel(im2,", "fontsize", "=8)\naxes[0].yaxis.set_major_formatter(mticker.FormatStrFormatter(", "'%.0f°N'", "))\n\n", "lv3", "=np.arange(-20,30,5)\n", "im3", "=axes[1].contourf(X1,Y1,lon_U2hPareal,", "levels", "=lvl,cmap='jet',extend='both')\n", "im4", "=axes[1].contour(X1,Y1,lon_T2hPareal,", "levels", "=lv3,colors='k')\naxes[1].clabel(im4,", "fontsize", "=8)\naxes[1].set_xlabel(", "'date'", ",", "fontsize", "=10)\n", "c1", "=np.arange(181)\n", "c2", "=np.arange(180)\n", "c3", "=c2[::-1]\n", "pallels", "=np.concatenate((c1,c3),axis=0)\ncolum_y=[0,30,60,90,120,150,180,150,120,90,60,30]\naxes[1].set_yticks(pallels,colum_y)\naxes[1].yaxis.set_major_formatter(mticker.FormatStrFormatter(", "'%.0f°E'", "))\n\nfg.text(0.15,0.5,", "'Dec'", ",", "fontsize", "=10,horizontalalignment='right')\nfg.text(0.15,0.08,", "'Dec'", ",", "fontsize", "=10,horizontalalignment='right')\n", "cbar", "=fg.colorbar(im1,ax=axes)\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;img_src 是 3通道&amp;#xff0c;label 是 单通道&amp;#xff0c;根本就不能复制&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attribute\"&gt;img_src&lt;/span&gt; &amp;#61; np.zeros((&lt;span class=\"hljs-number\"&gt;960&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;575&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;), np.uint8)\n&lt;span class=\"hljs-attribute\"&gt;label&lt;/span&gt; &amp;#61; np.zeros((&lt;span class=\"hljs-number\"&gt;160&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;), np.uint8)\n\n&lt;span class=\"hljs-attribute\"&gt;label&lt;/span&gt; &amp;#61; img_src[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;861&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;938&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#OPENCV# #OCR#设定区域无效的问题", ["哪位能帮忙解决下，我用OPENCV 和paddleOCR尝试写一个 识别游戏画面的文字，我设定的区域是屏幕右上角的一小块，label = img_src[6:20, 861:938]，但是运行中貌似这个命令没有用，每次OCR都识别的是全图的所有文字，哪位能帮忙看下是哪里出错了，谢谢啦 ", "\n", "import", " cv2\n", "import", " numpy ", "as", " np\n", "from", " PIL ", "import", " ImageGrab\n", "from", " win32 ", "import", " win32gui\n", "import", " mss\n", "from", " paddleocr ", "import", " PaddleOCR, draw_ocr\n", "import", " threading\n", "from", " PIL ", "import", " ImageGrab, Image\n\n", "global", " label\n", "global", " img_src\n", "global", " cut\n", "global", " bboxes\n\n\nimg_src = np.zeros((", "960", ", ", "575", ", ", "3", "), np.uint8)\nlabel = np.zeros((", "160", ", ", "50", "), np.uint8)\nbboxes = np.array([])\ncut = ", "False", "\n\n\n", "def", " ", "getScreenshot", "():\n    hwnd = win32gui.FindWindow(", "\"LDPlayerMainFrame\"", ", ", "\"雷电模拟器\"", ")\n    x0, y0, x1, y1 = win32gui.GetWindowRect(hwnd)\n    mtop, mbot = ", "30", ", ", "1", "\n    ", "# print(x0, y0, x1, y1)", "\n    monitor = {", "\"left\"", ": x0, ", "\"top\"", ": y0, ", "\"width\"", ": x1-x0, ", "\"height\"", ": y1-y0}\n    img_src = np.array(mss.mss().grab(monitor))\n    img_src = img_src[:, :, :", "3", "]\n    img_src = img_src[mtop:-mbot]\n    ", "return", " img_src, [x0, y0, x1, y1, mtop, mbot]\n\n", "# ocr-----------------------------------------", "\nocr = PaddleOCR(use_angle_cls=", "False", ", lang=", "\"ch\"", ", show_log=", "False", ")\n\n", "def", " ", "getMonitor", "():\n    ", "global", " img_src, label, cut\n    ", "while", " ", "True", ":\n        img_src, _ = getScreenshot()\n        label = img_src[", "6", ":", "20", ", ", "861", ":", "938", "]\n        \n", "def", " ", "getOcrText", "(", "img", "):\n    img = img_src.copy()\n    img, _ = getScreenshot()\n    ", "print", "(", "\"img::::\"", " + ", "str", "(img))\n    result = ocr.ocr(img, cls=", "False", ")\n    ", "return", " result\n\n\n", "def", " ", "getLabelExist", "(", "img,name", "):\n    result = getOcrText(img)\n    ", "print", "(result)\n    ", "for", " re ", "in", " result:\n        text = re[", "1", "][", "0", "]\n        ", "if", " name == text:\n            ", "return", " ", "True", "\n    ", "return", " ", "False", "\n\n", "def", " ", "checkLabel", "():\n    ", "global", " label\n    ", "global", " cut\n   \n    ", "while", " ", "True", ":\n        cut = getLabelExist(label, ", "'一层'", ")\n        ", "if", " cut:\n            ", "print", "(", "\"找到\"", ")\n         \n        ", "else", ":\n            ", "print", "(", "\"未找到\"", ")\n       \n\n\n\n\n", "if", " __name__ == ", "'__main__'", ":\n    t1 = threading.Thread(target=getMonitor,args=(),daemon=", "True", ")\n    t1.start()\n    t2 = threading.Thread(target=checkLabel,args=(),daemon=", "True", ")\n    t2.start()\n   \n\n", "while", " ", "True", ":\n        img = img_src.copy()\n        img, _ = getScreenshot()\n        ", "# 按比例缩小-------------------------------------------", "\n        x, y = img.shape[", "0", ":", "2", "]\n        imgs = cv2.resize(img, (", "0", ", ", "0", "), fx=", "0.5", ", fy=", "0.5", ", interpolation=cv2.INTER_NEAREST)\n        ", "# ------------------------------------------------", "\n        ", "# bboxes = getDetection(img)", "\n        ", "# img = drawBBox(img.copy(),bboxes)", "\n        cv2.imshow(", "\"1234\"", ", imgs)\n        cv2.imshow(", "\"\"", ",label)\n        ", "if", " cv2.waitKey(", "1", ") & ", "0xFF", " == ", "27", ":\n            cv2.destroyAllWindows()\n            ", "break", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;因为train_y[i]一直都是0&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["使用matplotlib画图，为什么我的颜色不变？", ["问题遇到的现象和发生背景", "\n", "使用matplotlib画图，为什么我的颜色不变？", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "%matplotlib inline", "\n", "import numpy as np", "import matplotlib.pyplot as plt", "import matplotlib as mpl", "\n", "np.random.seed(314)", "data_size1=100", "x1=np.random.randn(data_size,2)+np.array([4,4])", "y1=[0 for _ in range(data_size)]", "data_size2=100", "x2=np.random.randn(data_size,2)+np.array([10,10])", "y2=[0 for _ in range(data_size)]", "\n", "x=np.concatenate((x1,x2),axis=0)", "y=np.concatenate((y1,y2),axis=0)", "\n", "data_all_size=data_size1+data_size2", "shuff_index=np.random.permutation(data_all_size)", "x=x[shuff_index]", "y=y[shuff_index]", "\n", "train_size=int(data_all_size*0.7)", "train_x=x[:train_size]", "train_y=y[:train_size]", "test_x=x[train_size:]", "test_y=y[train_size:]", "\n", "for i in range(train_size):", "    if train_y[i]==0:", "        plt.scatter(train_x[i,0],train_x[i,1],s=38,c='g',marker='*')", "    else:", "        plt.scatter(train_x[i,0],train_x[i,1],s=38,c='r',marker='.')", "mpl.rcParams['font.family'] = 'SimHei'", "plt.title(\"训练数据\")", "plt.savefig(\"fig-res-knn-traindata.pdf\")", "plt.show()", "\n", "运行结果及报错内容", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.arange&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n&amp;gt;&amp;gt;&amp;gt; np&lt;span class=\"hljs-selector-class\"&gt;.where&lt;/span&gt;((&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;&amp;lt;&amp;#61;a)&amp;amp;(a&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;), -&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;, a)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;array&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;([ &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,  &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, -&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, -&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, -&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, -&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, -&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, -&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;, -&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;])&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy 按条件翻转 无法正确实现", ["# 创建一个包含1-10中所有整数的向量，并对3-8之间的元素取相反数，即输出[1,2,-3,-4,-5,-6,-7,-8,9]", "\nimport numpy ", "as", " np\n\n", "a", " = np.arange(", "1", ", ", "10", ")\n", "a", " = np.where(", "3", " <= ", "a", " <= ", "9", ", -", "a", ", ", "a", ")\nprint(", "a", ")\n", "\n", "要求如注释,报错如下", "写成", "a = np.where((3 <= a), -a, a)", "就不会报错,但与题目要求不符", "想知道如何使用np.where完成如上题目"]], "Tag": "算法设计"}
{"Answer": "你是在串口中断中输入信息？你试试在命令结尾加\\n\\r", "Konwledge_Point": "应对NP完全问题", "Question": ["关于继电器232控制协议编辑问题", ["AMX的NP-Rel8继电器的232协议命令，在最后必须敲一下回车键，请问用哪个指令能代替它。现在我手上的这个中控不支持敲回车命令。十万火急，希望大神多多照顾。"]], "Tag": "算法设计"}
{"Answer": "#include &lt;stdio.h&gt;\r\nint clength(int i, int count)\r\n{\r\n    if(i == 1) {\r\n        count++;\r\n        return count;\r\n    }\r\n    if(i &amp; 1) {\r\n        count++;\r\n        return clength(3 * i + 1, count);\r\n    } else {\r\n        count++;\r\n        return clength(i &gt;&gt; 1, count);\r\n    }\r\n}\r\nint main()\r\n{\r\n    int i, j, s, max;\r\n    while(scanf(\"%d %d\", &amp;i, &amp;j) != EOF) {\r\n        max = 0;\r\n        for(int k = i; k &lt;= j; k++) {\r\n            s = clength(k, 0);\r\n            if(s &gt; max) {\r\n                max = s;\r\n            }\r\n        }\r\n        printf(\"%d %d %d\\n\", i, j, max);\r\n    }\r\n\r\n    return 0;\r\n}", "Konwledge_Point": "应对NP完全问题", "Question": ["The 3n + 1 problem           ", ["Problem Description", "\nProblems in Computer Science are often classified as belonging to a certain class of problems (e.g., NP, Unsolvable, Recursive). In this problem you will be analyzing a property of an algorithm whose classification is not known for all possible inputs.", "\n\n", "Consider the following algorithm: ", "\n\n", "1.      input n\n\n2.      print n\n\n3.      if n = 1 then STOP\n\n4.           if n is odd then n <- 3n + 1\n\n5.           else n <- n / 2\n\n6.      GOTO 2\n", "\n\n", "Given the input 22, the following sequence of numbers will be printed 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 ", "\n\n", "It is conjectured that the algorithm above will terminate (when a 1 is printed) for any integral input value. Despite the simplicity of the algorithm, it is unknown whether this conjecture is true. It has been verified, however, for all integers n such that 0 < n < 1,000,000 (and, in fact, for many more numbers than this.) ", "\n\n", "Given an input n, it is possible to determine the number of numbers printed (including the 1). For a given n this is called the cycle-length of n. In the example above, the cycle length of 22 is 16. ", "\n\n", "For any two numbers i and j you are to determine the maximum cycle length over all numbers between i and j. ", "\n\n", "Input", "\nThe input will consist of a series of pairs of integers i and j, one pair of integers per line. All integers will be less than 1,000,000 and greater than 0. ", "\n\n", "You should process all pairs of integers and for each pair determine the maximum cycle length over all integers between and including i and j. ", "\n\n", "You can assume that no opperation overflows a 32-bit integer.", "\n\n", "Output", "\nFor each pair of input integers i and j you should output i, j, and the maximum cycle length for integers between and including i and j. These three numbers should be separated by at least one space with all three numbers on one line and with one line of output for each line of input. The integers i and j must appear in the output in the same order in which they appeared in the input and should be followed by the maximum cycle length (on the same line). ", "\n\n", "Sample Input", "\n1 10", "\n100 200", "\n201 210", "\n900 1000", "\n\n", "Sample Output", "\n1 10 20", "\n100 200 125", "\n201 210 89", "\n900 1000 174"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;需要转化&amp;#xff0c;拟合函数需要是线性的时候才可以使用最小二乘法&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["y=a*exp(b*x)这个式子怎么在python中作为条件编写（使用最小二乘法拟合的参数估计程序）", ["问题遇到的现象和发生背景", "\n", "y=a", "exp(b", "x)这个式子怎么在python中作为条件编写，这是一个使用最小二乘法拟合的参数估计程序。", "\n", "问题相关代码，请勿粘贴截图", "\n", "import numpy as np\nimport matplotlib", ".pylab", " as plt\nimport statsmodels", ".api", " as sm\nimport math\n\nexp=np", ".loadtxt", "(", "'5.dat'", ",delimiter=", "','", ")\n\nn=len(exp", "[:,0]", ")\nave_x=np", ".average", "(exp", "[:,0]", ")\nave_y=np", ".average", "(exp", "[:,1]", ")\n\nSxx=np", ".sum", "((exp", "[:,0]", "-ave_x)*(exp", "[:,0]", "-ave_x))/n\nSyy=np", ".sum", "((exp", "[:,1]", "-ave_y)*(exp", "[:,1]", "-ave_y))/n\nSxy=np", ".sum", "((exp", "[:,0]", "-ave_x)*(exp", "[:,1]", "-ave_y))/n\n\nS=np", ".cov", "(exp,rowvar=False, bias=True)\n\n", "print", "(Sxx,S[", "0", ",", "0", "])", "\n", "print", "(Syy,S[", "1", ",", "1", "])", "\n", "print", "(Sxy,S[", "0", ",", "1", "])", "\n\nb=Sxy/Sxx\na=ave_y-b*ave_x\n\nx=np", ".sort", "(exp", "[:,0]", ")\ny=a*exp(b*x) #这里出错了\n\nplt", ".plot", "(exp", "[:,0]", ",exp", "[:,1]", ",linestyle=", "'None'", ",marker=", "'x'", ")\nplt", ".plot", "(x,y,", "color", "=", "'r'", ")\nplt", ".show", "()\n\nres_exp=Syy*n\nres_model=np", ".sum", "((y-ave_y)*(y-ave_y))\nR2=res_model/res_exp\n\nsigma_y=np", ".sqrt", "(np", ".sum", "((exp", "[:,1]", "-a-b*exp", "[:,0]", ")*(exp", "[:,1]", "-a-b*exp", "[:,0]", "))/(n-", "2", "))\nsigma_b=sigma_y/np", ".sqrt", "(n*Sxx)\nsigma_a=sigma_y*np", ".sqrt", "((ave_x*ave_x+Sxx)/(n*Sxx))\n\n", "print", "(sigma_a,sigma_b)", "\n\nx_add_const=sm", ".add_constant", "(exp", "[:,0]", ")\nresult=sm", ".OLS", "(exp", "[:,1]", ",x_add_const)", ".fit", "()\n\n", "print", "(result.summary()", ")\n\n", "print", "(", "'Parameters: '", ",result.params)", "\n", "print", "(", "'Standard error: '", ",result.bse)", "\n", "print", "(", "'Coefficient of determination '", ",result.rsquared)", "\n\ny=result", ".params", "[0]", "+result", ".params", "[1]", "*x\nplt", ".plot", "(exp", "[:,0]", ",exp", "[:,1]", ",linestyle=", "'None'", ",marker=", "'x'", ")\nplt", ".plot", "(x,y,", "color", "=", "'r'", ")\nplt", ".show", "()\n\n", "\n", "运行结果及报错内容", "\n", "Traceback (most recent call last):", "  File \"E:/python practice/555/5-1.py\", line 26, in ", "    y=a", "exp(b", "x)", "TypeError: 'numpy.ndarray' object is not callable", "\n", "我的解答思路和尝试过的方法", "\n", "是否要化成这样来写程序？", "ln(𝑦) = ln(𝑎exp 𝑏𝑥 )", "ln 𝑦 = ln 𝑎 + ln exp 𝑏𝑥 = ln 𝑎 + 𝑏𝑥", "𝑦́ = 𝑎́ + 𝑏𝑥", "𝑎 ± 𝜎6 = exp 𝑎G± 𝜎6́ = exp 𝑎́ ± exp 𝑎́ 𝜎6", "\n", "我想要达到的结果", "\n", "我想要在y=aexp(bx)的条件下完成a、b误差的计算。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;import matplotlib&lt;span class=\"hljs-selector-class\"&gt;.pyplot&lt;/span&gt; as plt\nimport numpy as np\nfig&amp;#61;plt&lt;span class=\"hljs-selector-class\"&gt;.figure&lt;/span&gt;()\naxes3d&amp;#61; fig&lt;span class=\"hljs-selector-class\"&gt;.add_subplot&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;111&lt;/span&gt;, projection&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;3d&amp;#39;&lt;/span&gt;)\nzs &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[1, 5, 10, 15, 20]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; z &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; zs:\n    x &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.arange&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n    y &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.random&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.randint&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;, size&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n    axes3d&lt;span class=\"hljs-selector-class\"&gt;.bar&lt;/span&gt;(x, y,zs&amp;#61;z, zdir&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-attribute\"&gt;color&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-string\"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;])\n    axes3d&lt;span class=\"hljs-selector-class\"&gt;.set_xlabel&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;X Label&amp;#39;&lt;/span&gt;)\n    axes3d&lt;span class=\"hljs-selector-class\"&gt;.set_ylabel&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;Y Label&amp;#39;&lt;/span&gt;)\n    axes3d&lt;span class=\"hljs-selector-class\"&gt;.set_zlabel&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;Z Label&amp;#39;&lt;/span&gt;)\nplt&lt;span class=\"hljs-selector-class\"&gt;.show&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Spyder画3D柱形图只显示figure size 432*288 with 0Axe,却没有图片s", ["代码", "import matplotlib.pyplot as plt", "from mpl_toolkits.mplot3d.axes3d import Axes3D", "import numpy as np", "fig=plt.figure()", "axes3d=Axes3D(fig)", "zs = [1, 5, 10, 15, 20]", "for z in zs:", "    x = np.arange(0, 10)", "    y = np.random.randint(0, 30, size=10)", "    axes3d.bar(x, y,zs=z, zdir='x', color=['r', 'green', 'yellow', 'c'])", "结果", "<Figure size 432x288 with 0 Axes>"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python的if   else问题", ["\n        ", "if", " username == ", "\"\"", " or password == ", "\"\"", ":\n            wx", ".MessageBox", "(", "'用户名和密码不能为空！'", ")\n        ", "else", ":\n            ", "for", " ", "i", " ", "in", " np:\n                ", "if", " (", "i", "[1]", " == username) and (", "i", "[2]", " == password):\n                    login_sign = ", "1", "\n                    break\n", "\n", "可以这样在else后接入for吗"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;其实是同样的原理&amp;#xff0c;zip会把可迭代对象对应位置的元素组合成一个元组&amp;#xff0c;你这里的zip里面第二个参数虽然是二维的&amp;#xff0c;但也可以看作是一维数组的数组&amp;#xff0c;每个元素是一个一维数组&amp;#xff0c;这样子应该就好理解了吧。zip把第一个可迭代对象的值和第二个可迭代对象对应位置的一维数组组合成元组&amp;#xff0c;结果是一个元组列表&amp;#xff0c;再传递给dict&amp;#xff0c;生成一个字典&amp;#xff0c;字典的key为元组第一个元素&amp;#xff0c;其value为相应元组的第二个元素&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/740668127366179.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pandas 中zip的使用", ["最后一行代码啥意思，zip里面，users_ratings.index不是就一维吗，后面np.random.rand(len(users_ratings),10).astype(np.float32) 应该是二维，调用zip发生了啥，然后外面再套一层就是把这个转换为字典是吧？主要是调用zip时发生了啥，我以前用zip函数都是同样的维度", "\n", "dtype=[(", "'userId'", ",np.", "int32", "),(", "'movieId'", ",np.", "int32", "),(", "'rating'", ",np.", "float32", ")]\ndataset=pd.read_csv(DATA_PATH,usecols=", "range", "(", "3", "),dtype=dtype) # 读取csv文件\nusers_ratings=dataset.groupby(", "'userId'", ").agg([list])\nP = dict(zip(users_ratings.index,np.random.rand(", "len", "(users_ratings),", "10", ").astype(np.", "float32", ")\n        ))\n", "\n", "print(users_ratings)，对于users_ratings输出如下", "\n", "\n", "csv文件数据如下", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你只是定义了函数,但是没有使用&lt;br /&gt;在下面添加&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;content_l_numpy&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;content_l_math&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;两行调用即可&lt;br /&gt;&lt;strong&gt;有帮助望采纳~&lt;/strong&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["计算0到10之间数的正弦值没有输出", ["\n", "\nimport ", "time", "\nimport numpy as ", "np", "\nimport math\ndef content_l_numpy():\n    ", "for", " i ", "in", " ", "np", ".logspace(", "0", ",", "8", ",", "9", "):\n        t1 = ", "time", ".", "time", "()\n        ", "for", " j ", "in", " ", "np", ".linspace(", "0", ",", "10", ",int(i)):\n             ", "print", "(", "np", ".", "sin", "(j))\n             ", "print", "(", "\"取点数10^%d耗时→%s\"", "%", "(math.", "log", "(i,", "10", "),", "time", ".", "time", "()-t1))\n          \n            \ndef content_l_math():\n    ", "for", " i ", "in", " ", "np", ".logspace(", "0", ",", "8", ",", "9", "):\n        t2 = ", "time", ".", "time", "()\n        x = ", "np", ".arange(", "0", ",", "10", ",", "10", "/i)\n        math.", "sin", "(x)\n        ", "print", "(", "\"取点数10^%d耗时→%s\"", "%", "(math.", "log", "(i,", "10", "),", "time", ".", "time", "()-t2))\n"]], "Tag": "算法设计"}
{"Answer": "path = '16.png'\r\ndef compute(path):\r\n    \r\n    image_Rmean = []\r\n    image_Gmean = []\r\n    image_Bmean = []\r\n    img = cv2.imread(path, 1)\r\n    image_Bmean.append(np.mean(img[:,:,0]))\r\n    image_Gmean.append(np.mean(img[:,:,1]))\r\n    image_Rmean.append(np.mean(img[:,:,2]))\r\n    R_mean = np.mean(image_Rmean)\r\n    G_mean = np.mean(image_Gmean)\r\n    B_mean = np.mean(image_Bmean)\r\n    return R_mean, G_mean, B_mean\r\n \r\nif __name__ == '__main__':\r\n    R, G, B= compute(path)\r\n    Y = 0.299*R+0.587*G+0.114*B\r\n    print(\"目标图片亮度为\"+str(round(Y,2)))", "Konwledge_Point": "应对NP完全问题", "Question": ["Python实现计算图像RGB均值,怎么只读一张图片？", ["网上用python实现计算图像RGB均值都是批量的，而我只想得到一张图片的rgb均值（即整张图片三个通道的三个均值）如下的代码是一位大神的代码，对于刚学python的小白不会修改，求大神帮助。总之就是将下面代码从批量变为只分析一张图片的。问题应该简单，原谅我的无知。这是源码地址：", "https://blog.csdn.net/yql_617540298/article/details/83617512", "\n\n", "-*- coding: utf-8 -*-", "\n\n", "\"\"\"", "\nCreated on Thu Nov  1 10:43:29 2018", "\n@author: Administrator", "\n\"\"\"", "\n\n", "import os", "\nimport cv2", "\nimport numpy as np", "\n\n", "path = 'C:/Users/Administrator/Desktop/rgb'", "\ndef compute(path):", "\n    file_names = os.listdir(path)", "\n    per_image_Rmean = []", "\n    per_image_Gmean = []", "\n    per_image_Bmean = []", "\n    for file_name in file_names:", "\n        img = cv2.imread(os.path.join(path, file_name), 1)", "\n        per_image_Bmean.append(np.mean(img[:,:,0]))", "\n        per_image_Gmean.append(np.mean(img[:,:,1]))", "\n        per_image_Rmean.append(np.mean(img[:,:,2]))", "\n    R_mean = np.mean(per_image_Rmean)", "\n    G_mean = np.mean(per_image_Gmean)", "\n    B_mean = np.mean(per_image_Bmean)", "\n    return R_mean, G_mean, B_mean", "\n\n", "if ", "name", " == '__main__':", "\n    R, G, B= compute(path)", "\n    print(R, G ,B)"]], "Tag": "算法设计"}
{"Answer": "https://www.zhihu.com/question/27022786", "Konwledge_Point": "应对NP完全问题", "Question": ["关于SimpleCV和opencv的问题", ["环境为mac下的py2.7，在使用simplecv的时候出现提示：ImportError: Cannot load OpenCV library which is required by SimpleCV", "\njupyter的提示为：", "\n“", "\n/Users/sapphire/_Work space/颈动脉/图像分类代码/featuresHOG.py in ()", "\n      5 import numpy as np", "\n      6 import cv2  # opencv 2", "\n----> 7 from SimpleCV import *", "\n      8 import skimage", "\n      9 ", "\n\n", "/Users/sapphire/anaconda/envs/python27/lib/python2.7/site-packages/SimpleCV/__init__.py in ()", "\n      1 ", "version", " = '1.3.0'", "\n      2 ", "\n----> 3 from SimpleCV.base import *", "\n      4 from SimpleCV.Camera import *", "\n      5 from SimpleCV.Color import *", "\n\n", "/Users/sapphire/anaconda/envs/python27/lib/python2.7/site-packages/SimpleCV/base.py in ()", "\n     57         import cv", "\n     58     except ImportError:", "\n---> 59         raise ImportError(\"Cannot load OpenCV library which is required by SimpleCV\")", "\n     60 ", "\n     61 #optional libraries", "\n\n", "ImportError: Cannot load OpenCV library which is required by SimpleCV", "\n”", "\n请问该如何解决这个问题？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;赋值的0.6改为1&amp;#xff0c;把最后一个else改为 if a &amp;gt; b:&amp;#xff0c;条件清晰明了&amp;#xff0c;有用记得采纳&lt;/strong&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n\n&lt;span class=\"hljs-comment\"&gt;# Evaluator1 - Repeatability&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# Deviation&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;Device1_deviation&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;06&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;05&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;Device2_deviation&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;06&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;05&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;Device3_deviation&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;05&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;NumberOfCandidateDevices&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;DeviceEvaluatorList&lt;/span&gt; &amp;#61;&lt;span class=\"hljs-meta\"&gt; []&lt;/span&gt;\n\n&lt;span class=\"hljs-attribute\"&gt;DeviceEvaluatorList&lt;/span&gt;.append(Device1_deviation)\n&lt;span class=\"hljs-attribute\"&gt;DeviceEvaluatorList&lt;/span&gt;.append(Device2_deviation)\n&lt;span class=\"hljs-attribute\"&gt;DeviceEvaluatorList&lt;/span&gt;.append(Device3_deviation)\n&lt;span class=\"hljs-attribute\"&gt;B&lt;/span&gt; &amp;#61; np.empty((NumberOfCandidateDevices, NumberOfCandidateDevices))\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; i in range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, NumberOfCandidateDevices &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    &lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; j in range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, NumberOfCandidateDevices &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt; &amp;#61; DeviceEvaluatorList[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n        &lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt; &amp;#61; DeviceEvaluatorList[j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n        &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; a &amp;lt; b:\n            &lt;span class=\"hljs-attribute\"&gt;B&lt;/span&gt;[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; a &amp;#61;&amp;#61; b:\n            &lt;span class=\"hljs-attribute\"&gt;B&lt;/span&gt;[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;\n        &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; a &amp;gt; b:\n            &lt;span class=\"hljs-attribute\"&gt;B&lt;/span&gt;[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(B)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python 矩阵运算出问题", ["NumberOfCandidateDevices = 3", "python矩阵运算出问题。 按照代码逻辑， 应该会得到这样的矩阵", "\n", "\n", "#Evaluator1 - Repeatability", "\n", "#Deviation", "\n", "Device1_deviation", " = ", "0", ".", "06", " - ", "0", ".", "05", "\n", "Device2_deviation", " = ", "0", ".", "06", " - ", "0", ".", "05", "\n", "Device3_deviation", " = ", "0", ".", "3", " - ", "0", ".", "05", "\n\n", "DeviceEvaluatorList", " =", " []", "\n", "DeviceEvaluatorList", ".append(Device1_deviation)\n", "DeviceEvaluatorList", ".append(Device2_deviation)\n", "DeviceEvaluatorList", ".append(Device3_deviation)\n", "B", " =np.empty((NumberOfCandidateDevices,NumberOfCandidateDevices))\n", "for", " i in range(", "1", ", NumberOfCandidateDevices+", "1", "):\n    ", "for", " j in range(", "1", ", NumberOfCandidateDevices+", "1", "):\n        ", "a", " = DeviceEvaluatorList[i-", "1", "]\n        ", "b", " = DeviceEvaluatorList[j-", "1", "]\n        ", "if", " a < b:\n            ", "B", "[i-", "1", ",j-", "1", "] = ", "0", ".", "6", "\n        ", "if", " a == b:\n            ", "B", "[i-", "1", ",j-", "1", "] = ", "0", ".", "5", "\n        ", "else", ":\n            ", "B", "[i-", "1", ",j-", "1", "] = ", "0", "\n", "B", "\n", "\n", "但是实际运算出的矩阵如下。即最右边前两行应该为1，但是算出来却为0. 可否解释下原因，并修正下代码", "\n", "\n", "除此之外想把生成 的B 转换成矩阵，如何操作？"]], "Tag": "算法设计"}
{"Answer": "N/2会被算成小数，你看看用的是不是python3.7。只有2.7会按整数算，后面的都是按浮点数算，应该写成N//2，这样是取整的意思。", "Konwledge_Point": "应对NP完全问题", "Question": ["sorted 函数bug，有没有大神帮忙指点下这是什么错误", ["import numpy as np", "\n\n", "c = np.loadtxt('data.csv', delimiter = ',', usecols = (6, ), unpack = True)", "\nprint (\"median =\", np.median(c))", "\nsorted = np.msort(c)", "\nprint (\"sorted =\", sorted)", "\n\n", "N = len(c)", "\nprint(\"middle =\", sorted[(N - 1)/2])", "\nprint(\"average middle =\", (sorted[N / 2] + sorted[(N - 1) / 2]) / 2)", "\n\n", "print(\"variance =\", np.var(c))", "\nprint(\"variance from definition =\", np.mean((c - c.mean()) ** 2))", "\n\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;从你输出的数据来看&amp;#xff0c;你的all_tag不是一个纯粹的np数据&amp;#xff0c;里面的一些元素是list对象&amp;#xff0c;所以才导致不能用1-all_tag。所以&amp;#xff0c;你只能是通过两个for循环来实现 self.tags[&amp;#39;empty&amp;#39;] 的计算&amp;#xff0c;或者可以尝试一下下面的代码&amp;#xff1a;&lt;br /&gt; self.tags[&amp;#39;empty&amp;#39;] &amp;#61; [1-np.array(v) for k, v in self.tags.items() if len(v) &amp;gt; 0 ]&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["TypeError: unsupported operand type(s) for -: 'int' and 'list'", ["python 已转换为np.ndarray类型，仍然报错TypeError: unsupported operand type(s) for -: 'int' and 'list'", "\n", "源代码如下", "\n", "        all_tag = np", ".array", "(", "[v for k, v in self.tags.items() if len(v) > 0 ]", ")\n        self", ".tags", "[", "'empty'", "]", " = np", ".all", "(", "1", " - all_tag, axis=", "1", ")", ".astype", "(np.int32)", ".tolist", "()\n", "\n", "报错如下", "\n", "Traceback (most recent ", "call", " ", "last", "):\n  File ", "\"../../tools/eval.py\"", ", ", "line", " ", "36", ", in ", "<module>", "\n    dataset = VOTDataset(", "args", ".dataset, root)\n  File ", "\"/home/cao/桌面/Code/SiamMask/utils/pysot/datasets/vot.py\"", ", ", "line", " ", "127", ", in __init__\n    meta_data[video][", "'height'", "])\n  File ", "\"/home/cao/桌面/Code/SiamMask/utils/pysot/datasets/vot.py\"", ", ", "line", " ", "52", ", in __init__\n    self.", "tags", "[", "'empty'", "] = np.", "all", "(", "1", " - all_tag, axis=", "1", ").astype(np.int32).tolist()\nTypeError: unsupported operand ", "type", "(s) ", "for", " -: ", "'int'", " ", "and", " ", "'list'", "\n", "\n", "明明已经转换为ndarray类型了为什么报错仍然是int和list类型错误，np的广播机制为什么没有见效？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/272505151666111.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;调用文件时使用绝对路径&amp;#xff0c;引号前加r&amp;#xff0c;比如文件test.txt在D盘test文件夹&amp;#xff0c;调用的时候用r&amp;#34;D:\\test\\test.txt&amp;#34;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["文件明明存在在路径中，为什么还会报错？", ["遇到报错：tensorflow.python.framework.errors_impl.NotFoundError: E:\\pcrnet-master\\utils\\pc_distance\\tf_nndistance_so.so not found", "\n", "具体报错如下：", "\n", "Connected to pydev debugger (build ", "201.8743", ".20", ")\n", "D", ":\\anaconda\\envs\\p37\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.", "py", ":", "516", ": ", "FutureWarning", ": Passing (", "type", ", ", "1", ") ", "or", " ", "'1type'", " as a synonym of ", "type", " is deprecated; ", "in", " a future version of numpy, it will be understood as (", "type", ", (", "1", ",)) / ", "'(1,)type'", ".\n  _np_qint8 = np.dtype([(", "\"qint8\"", ", np.int8, ", "1", ")])\n", "D", ":\\anaconda\\envs\\p37\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.", "py", ":", "517", ": ", "FutureWarning", ": Passing (", "type", ", ", "1", ") ", "or", " ", "'1type'", " as a synonym of ", "type", " is deprecated; ", "in", " a future version of numpy, it will be understood as (", "type", ", (", "1", ",)) / ", "'(1,)type'", ".\n  _np_quint8 = np.dtype([(", "\"quint8\"", ", np.uint8, ", "1", ")])\n", "D", ":\\anaconda\\envs\\p37\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.", "py", ":", "518", ": ", "FutureWarning", ": Passing (", "type", ", ", "1", ") ", "or", " ", "'1type'", " as a synonym of ", "type", " is deprecated; ", "in", " a future version of numpy, it will be understood as (", "type", ", (", "1", ",)) / ", "'(1,)type'", ".\n  _np_qint16 = np.dtype([(", "\"qint16\"", ", np.int16, ", "1", ")])\n", "D", ":\\anaconda\\envs\\p37\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.", "py", ":", "519", ": ", "FutureWarning", ": Passing (", "type", ", ", "1", ") ", "or", " ", "'1type'", " as a synonym of ", "type", " is deprecated; ", "in", " a future version of numpy, it will be understood as (", "type", ", (", "1", ",)) / ", "'(1,)type'", ".\n  _np_quint16 = np.dtype([(", "\"quint16\"", ", np.uint16, ", "1", ")])\n", "D", ":\\anaconda\\envs\\p37\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.", "py", ":", "520", ": ", "FutureWarning", ": Passing (", "type", ", ", "1", ") ", "or", " ", "'1type'", " as a synonym of ", "type", " is deprecated; ", "in", " a future version of numpy, it will be understood as (", "type", ", (", "1", ",)) / ", "'(1,)type'", ".\n  _np_qint32 = np.dtype([(", "\"qint32\"", ", np.int32, ", "1", ")])\n", "D", ":\\anaconda\\envs\\p37\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.", "py", ":", "525", ": ", "FutureWarning", ": Passing (", "type", ", ", "1", ") ", "or", " ", "'1type'", " as a synonym of ", "type", " is deprecated; ", "in", " a future version of numpy, it will be understood as (", "type", ", (", "1", ",)) / ", "'(1,)type'", ".\n  np_resource = np.dtype([(", "\"resource\"", ", np.ubyte, ", "1", ")])\n", "D", ":\\anaconda\\envs\\p37\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.", "py", ":", "541", ": ", "FutureWarning", ": Passing (", "type", ", ", "1", ") ", "or", " ", "'1type'", " as a synonym of ", "type", " is deprecated; ", "in", " a future version of numpy, it will be understood as (", "type", ", (", "1", ",)) / ", "'(1,)type'", ".\n  _np_qint8 = np.dtype([(", "\"qint8\"", ", np.int8, ", "1", ")])\n", "D", ":\\anaconda\\envs\\p37\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.", "py", ":", "542", ": ", "FutureWarning", ": Passing (", "type", ", ", "1", ") ", "or", " ", "'1type'", " as a synonym of ", "type", " is deprecated; ", "in", " a future version of numpy, it will be understood as (", "type", ", (", "1", ",)) / ", "'(1,)type'", ".\n  _np_quint8 = np.dtype([(", "\"quint8\"", ", np.uint8, ", "1", ")])\n", "D", ":\\anaconda\\envs\\p37\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.", "py", ":", "543", ": ", "FutureWarning", ": Passing (", "type", ", ", "1", ") ", "or", " ", "'1type'", " as a synonym of ", "type", " is deprecated; ", "in", " a future version of numpy, it will be understood as (", "type", ", (", "1", ",)) / ", "'(1,)type'", ".\n  _np_qint16 = np.dtype([(", "\"qint16\"", ", np.int16, ", "1", ")])\n", "D", ":\\anaconda\\envs\\p37\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.", "py", ":", "544", ": ", "FutureWarning", ": Passing (", "type", ", ", "1", ") ", "or", " ", "'1type'", " as a synonym of ", "type", " is deprecated; ", "in", " a future version of numpy, it will be understood as (", "type", ", (", "1", ",)) / ", "'(1,)type'", ".\n  _np_quint16 = np.dtype([(", "\"quint16\"", ", np.uint16, ", "1", ")])\n", "D", ":\\anaconda\\envs\\p37\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.", "py", ":", "545", ": ", "FutureWarning", ": Passing (", "type", ", ", "1", ") ", "or", " ", "'1type'", " as a synonym of ", "type", " is deprecated; ", "in", " a future version of numpy, it will be understood as (", "type", ", (", "1", ",)) / ", "'(1,)type'", ".\n  _np_qint32 = np.dtype([(", "\"qint32\"", ", np.int32, ", "1", ")])\n", "D", ":\\anaconda\\envs\\p37\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.", "py", ":", "550", ": ", "FutureWarning", ": Passing (", "type", ", ", "1", ") ", "or", " ", "'1type'", " as a synonym of ", "type", " is deprecated; ", "in", " a future version of numpy, it will be understood as (", "type", ", (", "1", ",)) / ", "'(1,)type'", ".\n  np_resource = np.dtype([(", "\"resource\"", ", np.ubyte, ", "1", ")])\nTraceback (most recent call last):\n  File ", "\"<frozen importlib._bootstrap>\"", ", line ", "983", ", ", "in", " _find_and_load\n  File ", "\"<frozen importlib._bootstrap>\"", ", line ", "967", ", ", "in", " _find_and_load_unlocked\n  File ", "\"<frozen importlib._bootstrap>\"", ", line ", "677", ", ", "in", " _load_unlocked\n  File ", "\"<frozen importlib._bootstrap_external>\"", ", line ", "728", ", ", "in", " exec_module\n  File ", "\"<frozen importlib._bootstrap>\"", ", line ", "219", ", ", "in", " _call_with_frames_removed\n  File ", "\"E:\\点云配准\\神经网络\\PCRNet\\pcrnet-master\\models\\pcr_model.py\"", ", line ", "12", ", ", "in", " <", "module", ">\n    ", "import", " tf_util_loss\n  File ", "\"E:\\pcrnet-master\\utils\\tf_util_loss.py\"", ", line ", "2", ", ", "in", " <", "module", ">\n    ", "from", " pc_distance ", "import", " tf_nndistance, tf_approxmatch\n  File ", "\"E:\\pcrnet-master\\utils\\pc_distance\\tf_nndistance.py\"", ", line ", "5", ", ", "in", " <", "module", ">\n    nn_distance_module=tf.load_op_library(", "os", ".path.join(BASE_DIR, ", "'tf_nndistance_so.so'", "))\n  File ", "\"D:\\anaconda\\envs\\p37\\lib\\site-packages\\tensorflow\\python\\framework\\load_library.py\"", ", line ", "61", ", ", "in", " load_op_library\n    lib_handle = py_tf.TF_LoadLibrary(library_filename)\ntensorflow.python.framework.errors_impl.", "NotFoundError", ": ", "E", ":\\点云配准\\神经网络\\PCRNet\\pcrnet-master\\utils\\pc_distance\\tf_nndistance_so.so ", "not", " found\n\nProcess finished with exit code ", "1", "\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我复现了你的问题&amp;#xff0c;是matplotlib版本问题&amp;#xff0c;你的版本太高了。我测试的另一个版本3.3.4可以显示结果。&lt;/p&gt;\n&lt;p&gt;3.3.4可以显示。&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/876286393866173.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;3.5.0不能显示&lt;br /&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/576886393866138.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["机器学习方法自动分类遇到plt显示空白图的问题", ["在完成题目时遇到这个问题，代码跟答案给出的一模一样，但就是画不出来图，而且刻度还有重叠", "\n", "这些小数的刻度不知道从哪里冒出来的", "整段代码如下：", "\n", "import", " numpy as np\n", "import", " matplotlib\n", "import", " matplotlib.pyplot as plt\n", "from", " sklearn.linear_model import LogisticRegression\n", "from", " sklearn.model_selection import train_test_split\n", "from", " sklearn.datasets import make_classification\n", "X", ",y=make_classification(n_samples=", "100", ",n_features=", "2", ",n_redundant=", "0", ",random_state=", "42", ")\n", "train_X", ",test_X,train_y,test_y=train_test_split(X,y,random_state=", "42", ")\n", "model", "=LogisticRegression()\n", "model", ".fit(train_X,train_y)\n", "pred_y", "=model.predict(test_X)\n", "print", "(model.score(test_X,test_y))\n\n", "plt", ".scatter(X[:,", "0", "],X[:,", "1", "],c=y,marker='.',cmap=matplotlib.cm.get_cmap(name='bwr'),alpha=", "0", ".", "7", ")\n", "Xi", "=np.linspace(-", "10", ",", "10", ")\n", "Y", "=-model.coef_[", "0", "][", "0", "]/model.coef_[", "0", "][", "1", "]* Xi-model.intercept_/model.coef_[", "0", "][", "1", "]\n", "plt", ".plot(Xi,Y)\n", "print", "(model.coef_)\n", "print", "(model.intercept_)\n", "print", "(model.coef_[", "0", "][", "0", "])\n", "print", "(model.coef_[", "0", "][", "1", "])\n\n", "plt", ".xlim(min(X[:,", "0", "])-", "0", ".", "5", ",max(X[:,", "0", "])+", "0", ".", "5", ")\n", "plt", ".ylim(min(X[:,", "1", "])-", "0", ".", "5", ",max(X[:,", "1", "])+", "0", ".", "5", ")\n", "plt", ".axes().set_aspect(", "\"equal\"", ",", "\"datalim\"", ")\n", "plt", ".title(", "\"classification data using LogisticRegression\"", ")\n", "plt", ".xlabel('x-axis')\n", "plt", ".ylabel('y-axis')\n", "plt", ".show()\n\n", "\n", "问题大概如上，已经被困扰很久了，希望能有人帮忙找出问题所在，感激不尽！！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;复制的路径中存在不可见字符&amp;#xff0c;将路径删除后手动输入一下试试&amp;#xff0c;看下可否消除非法字符读取到文件。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python图像处理疑问", ["这段代码是我学习numpy库的时候直接抄的代码，但是粘贴到anaconda的notebook后系统报错，想问一下为什么", "这个是错误", "OSError                                   Traceback (most recent call last)", " in ", "      2 import numpy as np", "      3", "----> 4 a = np.asarray(Image.open('‪D:/desktop/hqh.JPG').convert('L')).astype('float')", "      5", "      6 depth = 10. # (0-100)", "\n", "D:\\Anaconda\\lib\\site-packages\\PIL\\Image.py in open(fp, mode, formats)", "   2910", "   2911     if filename:", "-> 2912         fp = builtins.open(filename, \"rb\")", "   2913         exclusive_fp = True", "   2914 ", "\n", "OSError: [Errno 22] Invalid argument: '\\u202aD:/desktop/hqh.JPG'", "\n", "代码如下", "\n", "from PIL ", "import", " Image\n", "import", " numpy as np\n", "a", " = np.asarray(Image.open('‪D:/desktop/hqh.JPG').convert('L')).astype('float')\n", "depth", " = ", "10", ". ", "# (0-100)", "\n", "grad", " = np.gradient(a)", "#取图像灰度的梯度值", "\ngrad_x, ", "grad_y", " = grad ", "#分别取横纵图像梯度值", "\n", "grad_x", " = grad_x*depth/", "100", ".\n", "grad_y", " = grad_y*depth/", "100", ".\n", "A", " = np.sqrt(grad_x**", "2", " + grad_y**", "2", " + ", "1", ".)\n", "uni_x", " = grad_x/A\n", "uni_y", " = grad_y/A\n", "uni_z", " = ", "1", "./A\n\n", "vec_el", " = np.pi/", "2.2", " ", "# 光源的俯视角度，弧度值", "\n", "vec_az", " = np.pi/", "4", ". ", "# 光源的方位角度，弧度值", "\n", "dx", " = np.cos(vec_el)*np.cos(vec_az) ", "#光源对x 轴的影响", "\n", "dy", " = np.cos(vec_el)*np.sin(vec_az) ", "#光源对y 轴的影响", "\n", "dz", " = np.sin(vec_el) ", "#光源对z 轴的影响", "\n\n", "b", " = ", "255", "*(dx*uni_x + dy*uni_y + dz*uni_z) ", "#光源归一化", "\n", "b", " = b.clip(", "0", ",", "255", ")\n\n", "im", " = Image.fromarray(b.astype('uint8')) ", "#重构图像", "\nim.save('‪D:/desktop/hqhHD.JPG')\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;rand是随机生成值在0-1之间的函数&amp;#xff1b;&lt;br /&gt;randn是随机生成均值为0&amp;#xff0c;方差为1的正态分布上的数值。&lt;br /&gt;看这个图体会下区别&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/884400295876173.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;有帮助的话&amp;#xff0c;请点采纳该答案~&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中pandas库生成二维数组的使用", ["\ndates = pd.date_range(", "start", "=", "'20191101'", ", ", "end", "=", "'20191124'", ", ", "freq", "=", "'D'", ")              \na1 = pd.DataFrame(np.random.randn(24, 4), ", "index", "=dates, ", "columns", "=list('ABCD'))   \na2 = pd.DataFrame(np.random.rand(24, 4))                                       \n", "\n", "(np.random.randn(24, 4)和(np.random.rand(24, 4))  中的randn与rand有什么区别"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;转换后的data前面的1,2,3事行号吗?&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;outdata&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; list(data):\n    &lt;span class=\"hljs-meta\"&gt;# 转换为字符串&lt;/span&gt;\n    outdata&amp;#43;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;,&amp;#34;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;([&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(s) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; s &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; i])\n    &lt;span class=\"hljs-meta\"&gt;# 末尾添加逗号&amp;#43;换行&lt;/span&gt;\n    outdata&amp;#43;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;,\\n&amp;#39;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python使用pandas库读取数据格式转换问题", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "\n#从excel中读取数据并转换为矩阵\ndatA=pd.read_excel(r'C:\\Users\\", "49175", "\\Desktop\\jzgb.xlsx')\ndata=np.array(datA,dtype=np.int64)\nprint(data)\n#上述代码读取数据在python中的结果如下所示\n#[[", "41703072", "       ", "85", "       ", "83", " ...       ", "92", "       ", "91", "       ", "79", "]\n [", "41703100", "       ", "78", "       ", "83", " ...       ", "87", "       ", "75", "       ", "84", "]\n [", "41707033", "       ", "91", "       ", "79", " ...       ", "88", "       ", "83", "       ", "77", "]\n ...\n [", "41724096", "       ", "83", "       ", "73", " ...       ", "61", "       ", "93", "       ", "78", "]\n [", "41724098", "       ", "88", "       ", "83", " ...       ", "70", "       ", "64", "       ", "78", "]\n [", "41724099", "       ", "87", "       ", "73", " ...       ", "65", "       ", "75", "       ", "64", "]]\n\n#如何在python中把上面代码读取出来的excel数据转换成下面这种数值格式\n\n\n#数据集：\ndata = \"\"\"\n", "1,88,89,85", ",", "79,98,95,82", ",", "45,95,65,59", ",", "88,49,67,85", ",", "75,72,73,71", ",", "88,89,89,87", ",", "85,84,86,86", ",", "85,85,85,85", ",", "85,85,85,85", ",", "84,81,84,82", ",\n", "2,71,72,73", ",", "74,75,76,84", ",", "89,95,91,70", ",", "64,52,85,14", ",", "16,74,95,84", ",", "89,45,65,85", ",", "75,95,44,61", ",", "60,84,59,65", ",", "87,91,99,98", ",", "54,67,88,72", ",\n", "3,89,85,65", ",", "44,85,75,86", ",", "67,95,84,67", ",", "95,75,78,78", ",", "76,84,81,89", ",", "85,88,95,96", ",", "94,73,85,78", ",", "85,86,84,89", ",", "92,87,86,88", ",", "81,91,66,84", ",\"\"\"\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的函数没有返回值&amp;#xff0c;没有return ,res 就是None&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Flask接口处理post时出现问题", ["Flask接口post请求之后另一边只能收到None", "\n", "代码能够正确运行，并且使用在接口代码中加入print能够正确输出内容，但是使用测试接口的代码时只能收到None，而且在最后会出现一个\"POST / HTTP/1.1\" 500 -的信息", "\n", "\n", "这是接口的代码：\n", "import", " json\n", "import", " cv2\n", "from", " PIL ", "import", " Image\n", "import", " numpy ", "as", " np\n", "from", " modelscope.pipelines ", "import", " pipeline\n", "from", " modelscope.utils.constant ", "import", " Tasks\n", "from", " modelscope.outputs ", "import", " OutputKeys\n", "from", " flask ", "import", " request\n", "from", " flask ", "import", " jsonify\n", "from", " flask ", "import", " Flask,make_response\n", "import", " base64\n\nface_recognition = pipeline(Tasks.face_recognition, model=", "'damo/cv_ir101_facerecognition_cfglint'", ")\n\n", "# def face_recognition(image1,image2):", "\n", "#     emb1 = face_recognition(image1)[OutputKeys.IMG_EMBEDDING]", "\n", "#     emb2 = face_recognition(image2)[OutputKeys.IMG_EMBEDDING]", "\n", "#     sim = np.dot(emb1[0], emb2[0])", "\n", "#     sim=face_recognition(image1, image2)", "\n", "#     return jsonify(sim)", "\n", "#     return (f'Face cosine similarity={sim:.3f}, get_img1:{image1}  get_img2:{image2}')", "\n\n\napp = Flask(__name__)\napp.config[", "\"JSON_AS_ASCII\"", "] = ", "False", "\n", "def", " ", "making_response", "(", "json_data", "):\n    response = make_response(jsonify(json_data))\n    response.headers[", "'Content-Type'", "] = ", "'application/json;charset=UTF-8'", "\n    ", "return", " response\n\n", "@app.route(", "\"/\"", ",methods=[", "\"POST\"", "]", ")", "\n", "def", " ", "first_post", "():\n    my_json = {", "\"msg\"", ": ", "None", ",\n               ", "\"sim\"", ": ", "None", "\n                }\n    data = request.get_data()\n    ", "if", " ", "not", " data:\n        my_json[", "\"msg\"", "] = ", "\"No data obtained!\"", "\n    ", "try", ":\n        data=json.loads(data)\n        image1 = base64.b64decode(data[", "\"image1\"", "].encode())\n        image2 = base64.b64decode(data[", "\"image2\"", "].encode())\n        ", "# image1_base64 = data[\"image1\"].encode()", "\n        ", "# image2_base64 = data[\"image2\"].encode()", "\n        image1 = cv2.imdecode(np.frombuffer(image1, np.uint8), cv2.IMREAD_ANYCOLOR) ", "#cv2.IMREAD_UNCHANGED", "\n        image2 = cv2.imdecode(np.frombuffer(image2, np.uint8), cv2.IMREAD_ANYCOLOR)\n\n        emb1 = face_recognition(image1)[OutputKeys.IMG_EMBEDDING]\n        emb2 = face_recognition(image2)[OutputKeys.IMG_EMBEDDING]\n        sim = np.dot(emb1[", "0", "], emb2[", "0", "])\n        ", "print", "(sim)\n        my_json[", "\"msg\"", "] = ", "\"successful!\"", "\n        my_json[", "\"sim\"", "] = sim\n\n        ", "# face_recognition(image1,image2)", "\n    ", "except", " Exception ", "as", " e:\n        ", "print", "(e)\n        my_json[", "\"msg\"", "] = ", "\"出错了，请检查是否正确访问!\"", "\n        response = making_response(my_json)\n        ", "return", " response\n\n    response = make_response(jsonify(my_json))\n    response.headers[", "'Content-Type'", "] = ", "'application/json;charset=UTF-8'", "\n    ", "return", " response\n\n", "if", " __name__ == ", "\"__main__\"", ":\n    app.run(host=", "'0.0.0.0'", ", port=", "12000", ", debug=", "True", ", use_reloader=", "False", ")\n\n这是我测试用的代码：\n", "import", " os\n", "import", " time\n", "import", " json\n", "import", " base64\n", "import", " random\n", "import", " requests\n\n\nIMG_FORMATS = [", "'bmp'", ", ", "'jpg'", ", ", "'jpeg'", ", ", "'png'", ", ", "'tif'", ", ", "'tiff'", ", ", "'dng'", ", ", "'webp'", ", ", "'mpo'", "]\n\n\n", "# 文件目录遍历，返回[fileP, fileN]", "\n", "def", " ", "get_filepaths", "(", "path", "):\n    pathlists = []\n    ", "for", " root, dirs, files ", "in", " os.walk(path):\n        ", "for", " file ", "in", " files:\n            pathlists.append([os.path.join(root, file), file])\n    ", "return", " pathlists\n\n\n", "class", " ", "api_test", ":\n    ", "def", " ", "__init__", "(", "self", "):\n        self.url = ", "\"http://0.0.0.0:12000/\"", "  ", "# nginx url", "\n\n", "    @staticmethod", "\n    ", "def", " ", "read_img_base64", "(", "p", "):\n        ", "with", " ", "open", "(p, ", "'rb'", ") ", "as", " f:\n            imgString = base64.b64encode(f.read())\n            base64_data = imgString.decode()\n        ", "return", " base64_data\n\n    ", "def", " ", "send_post", "(", "self, img_path1,img_path2", "):\n        base64_data1 = self.read_img_base64(img_path1)\n        base64_data2 = self.read_img_base64(img_path2)\n        ", "#image_name = str(img_path)", "\n        data = {\n            ", "\"image1\"", ": base64_data1,\n            ", "\"image2\"", ": base64_data2\n        }\n\n        session = requests.session()\n        start_time = time.time()\n        response = session.post(self.url, json.dumps(data))  ", "# Json格式请求", "\n        end_time = time.time()\n        run_time = end_time - start_time\n        ", "# logger.info('接口调用时间为：%s' % run_time)", "\n        ", "# logger.info(response.status_code)", "\n        ", "# logger.info(response.text)", "\n        session.close()\n        response.close()\n\n\n", "if", " __name__ == ", "\"__main__\"", ":\n    ", "# 开始单元测试", "\n    api = api_test()\n\n\n    ", "# 单张图片测试", "\n    img_path1 = ", "'./样本.jpg'", "\n    img_path2 = ", "'./样本1.jpg'", "\n    res = api.send_post(img_path1,img_path2)\n    ", "print", "(res)\n\n", "###### ", "\nPress CTRL+C to quit\n/opt/conda/lib/python3", ".7", "/site-packages/mmdet/core/anchor/anchor_generator.py:", "333", ": UserWarning: ``grid_anchors`` would be deprecated soon. Please use ``grid_priors`` \n  warnings.warn(", "'``grid_anchors`` would be deprecated soon. '", "\n/opt/conda/lib/python3", ".7", "/site-packages/mmdet/core/anchor/anchor_generator.py:", "370", ": UserWarning: ``single_level_grid_anchors`` would be deprecated soon. Please use ``single_level_grid_priors`` \n  ", "'``single_level_grid_anchors`` would be deprecated soon. '", "\n", "127.0", ".0", ".1", " - - [", "29", "/Dec/", "2022", " ", "11", ":", "20", ":", "27", "] ", "\"POST / HTTP/1.1\"", " ", "500", " -\n这是", "print", "输出的结果：-", "0.11088603", "\n这是测试代码得到的结果：", "None", "\n\n", "\n", "一头雾水。不知道是哪出了问题", "\n", "我想要测试代码访问时 能把输出的结果也就是代码中的sim这个值返回给访问的那一端", "\n", "PS：", "这个模型是魔塔社区的模型 我用来练习使用的，如果各位需要测试使用的话可以直接去", "https://www.modelscope.cn/models/damo/cv_ir101_facerecognition_cfglint/summary", " 打开使用测试"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不是停不下来&amp;#xff0c;而是你代码运行时长太长了。&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/028223293436187.png\" /&gt;&lt;/p&gt;&lt;br /&gt;直到第一个函数运行完&amp;#xff0c;第二个函数报错&amp;#xff0c;已经跑了我一个多小时了&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["按要求编写程序，运行结果停不下来", ["\n", "\n", "import ", "time", "\nimport numpy as np\nimport math\ndef content_l_numpy():\n    for i in np.", "logspace", "(", "0", ",", "8", ",", "9", "):\n        t1 = time.", "time", "()\n        for j in np.", "linspace", "(", "0", ",", "10", ",", "int", "(i)):\n             ", "print", "(np.", "sin", "(j))\n             ", "print", "(", "\"取点数10^%d耗时→%s\"", "%(math.", "log", "(i,", "10", "),time.", "time", "()-t1))\n         \n def ", "content_l_math", "():\n    for i in np.", "logspace", "(", "0", ",", "8", ",", "9", "):\n        t2 = time.", "time", "()\n        x = np.", "arange", "(", "0", ",", "10", ",", "10", "/i)\n        math.", "sin", "(x)\n        ", "print", "(", "\"取点数10^%d耗时→%s\"", "%(math.", "log", "(i,", "10", "),time.", "time", "()-t2))\n", "content_l_numpy", "()\n", "content_l_math", "()\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff01;&lt;br /&gt;一&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-string\"&gt;[[ 7, 10, 13],\n[21, 24, 27]]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;二&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-string\"&gt;[[ 2,  2,  4,  7],\n       [11, 11,  5,  3]]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;三&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-string\"&gt;[21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["这些题目的结果是多少", ["第一题：y = np.arange(35).reshape(5,7)", "\n", "y[1:5:2,::3]", "第二题：a=np.arange(12)", "\n", "j=np.array([[2,2,4,7],[-1,-1,5,3]])", "\n", "a[j]", "第三题：y = np.arange(35).reshape(5,7)", "\n", "c=y>20", "\n", "y[c]"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;前后括号数量没对上&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/125406581846125.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#Python#绘制多条折线图的问题，如何解决？", ["图片点开看，不糊的！", "n=input(\"请输入要查询的省份数：\")", "n=int(n)", "chnprovince=np.arange(n)", "c=np.arange(n)", "chnprovince=list(map(lambda x:str(x),chnprovince))", "\n", "chnprovince=input(\"请输入省份的拼音全称：\").split(\",\")", "c=(", "    Line(", "        init_opts=opts.InitOpts(bg_color='#282853',", "                                 width='1280px',", "                                 height='800px',", "                                 page_title='疫情数据',", "                                 theme=ThemeType.WONDERLAND,", " #WONDERLAND", "    )", "    )", "    .add_xaxis(xaxis_data=pd.to_datetime(y['Date']).dt.strftime('%Y-%m-%d').drop_duplicates().to_list(),", "              )", "    i=0", "    while(i<n):", "       .add_yaxis(chnprovince[i],y_axis=y['Confirmed'].loc[y['Province_State']==chnprovince[0]].to_list())", "       .set_global_opts(title_opts=opts.TitleOpts(title=chnprovince[i]+\"数据\"),xaxis_opts=opts.AxisOpts(name_rotate=90, axislabel_opts={\"rotate\":30}))", "       i=i+1", "\n", ")   ", "\n", "c.render_notebook()", "\n", "总是出现报错，在想是不是缩进的问题？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;试试这个&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;temp  &amp;#61; df.groupby(&amp;#39;category&amp;#39;)[&amp;#39;data&amp;#39;].nlargest(4).reset_index()\ntemp.drop(&amp;#39;level_1&amp;#39;,axis&amp;#61;1)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["dataframe分类排序优化问题", ["我想取dataframe 'category'列两个字母中，另外一列'data'的最大4个，并按照一定的规则排序，代码如下，请问有什么更简单的方法么？", "\n\n", "\n", "import numpy as np\nfrom time import time\nimport pandas as pd\n\ndf = pd.DataFrame()\nn = 200\ndf['category'] = np.random.choice(('A', 'B'), n)\ndf['data'] = np.random.randint(1, 10000, len(df))\na = df[df['category'] == 'A'].sort_values(by='data', ascending=False).head(4)\nb = df[df['category'] == 'B'].sort_values(by='data', ascending=False).head(4)\ndf = pd.concat([a, b]).sort_values(by=['category','data'],ascending=[True,False]).reset_index(drop=True)\nprint(df)\n", "\n\n", "结果如下", "\n\n", "\n", "  category  data\n0        A  9889\n1        A  9879\n2        A  9873\n3        A  9822\n4        B  9909\n5        B  9855\n6        B  9775\n7        B  9689"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我理解的是&amp;#xff0c;应该在写入之前&amp;#xff0c;也就是DataFrame 之前就把数据的“元”去掉&lt;/p&gt;\n&lt;p&gt;因为收入的键的值是个list,所以可以变量list之后&amp;#xff0c;将“元”替换为空&amp;#xff0c;replace()方法&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的问题：df = pd.DataFrame({'姓名':['张强','李小强','牛新','牛增强','张强','张强发'],", ["python数据框正则表达式怎么去除元", "\n", "import pandas as pd\n \nimport numpy as np\n \npd", ".set_option", "(", "'display.unicode.east_asian_width'", ", True)\n \ndf = pd", ".DataFrame", "({", "'姓名'", ":", "[", "'张强'", ",", "'李小强'", ",", "'牛新'", ",", "'牛增强'", ",", "'张强'", ",", "'张强发'", "]", ",\n \n                   ", "'收入'", ":", "[", "'500元'", ",", "'530元'", ",", "'470元'", ",", "'600元'", ",np.nan,", "'560元'", "]", "})\ndf=df", ".dropna", "(axis=", "0", ")\n", "print", "(df)", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;python是弱类型的&amp;#xff0c;2-0.0001会是个小数而不会自动给你取整&lt;br /&gt;而numpy.array是有类型的&amp;#xff0c;你传入的是整数&amp;#xff0c;那么它的类型就是整型&amp;#xff0c;你传入的是小数&amp;#xff0c;它的类型就是浮点型&lt;br /&gt;你像整型数组里传入小数&amp;#xff0c;会进行强制转换&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["2减去一个微小值，得到了1", ["问题描述", "\n", "神奇，这里 2 - 0.0001 居然得到的结果是 1 ？而且我不明确这种问题会在什么情况下发生，我感到很害怕。", "x_grad = numerical_gradient_no_batch(function_1, x)", " 这里如果我传入的x是小数，则是程序是符合预期的。若 x 为整数，就会发生上述问题。", "\n", "x为整数的运行结果", "\n", "\n", "x为小数的运行结果", "\n", "\n", "环境", "\n", "python3.8，jupyter notebook，win10操作系统", "\n", "相关代码", "\n", "import", " numpy ", "as", " np\n", "import", " matplotlib.pylab ", "as", " plt\n", "from", " mpl_toolkits.mplot3d ", "import", " Axes3D\n\n", "def", " ", "function_1", "(", "x", "):\n    ", "if", " x.ndim == ", "1", ":\n        ", "return", " np.", "sum", "(x**", "2", ")\n    ", "return", " np.", "sum", "(x**", "2", ", axis=", "1", ")\n\n", "# 数值法求函数 f 在某点 x（一个向量） 处的梯度", "\n", "def", " ", "numerical_gradient_no_batch", "(", "f, x", "):\n    h = ", "1e-4", "\n    grad = np.zeros_like(x)\n    ", "for", " idx ", "in", " ", "range", "(x.size):\n        tmp_x = x[idx]\n        x[idx] = tmp_x + h\n        fh1 = f(x)\n        ", "print", "(tmp_x, h, tmp_x + h, x[idx], fh1)\n    \n        x[idx] = tmp_x - h\n        fh2 = f(x)\n        ", "print", "(tmp_x, h, tmp_x - h, x[idx], fh2)\n        \n        grad[idx] = (fh1 - fh2) / (h *  ", "2", ")\n        x[idx] = tmp_x\n        ", "print", "(grad)\n    ", "return", " grad\n\nx = np.array([", "2", "])\nx_grad = numerical_gradient_no_batch(function_1, x)\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-title\"&gt;df&lt;/span&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;]&amp;#61;df[&lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;].&lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;type&lt;/span&gt;(&amp;#39;int64&amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pandas转换object为int失败了,有人能解答吗", ["用pandas创建了一个dataframe，第1,2,3列是数字，第4列是字符串。dataframe自动将所有列都转换成了object属性。", "\n", "import numpy as np\nimport pandas as pd\nmytype =", "[", "'A'", ",", "'B'", ",", "'C'", "]", "\ndata1 = np", ".random", ".randint", "(", "0", ",", "10", ",(", "20", ",", "3", "))\ndata2 = np", ".random", ".choice", "(mytype,(", "20", ",", "1", "))\ndata = np", ".hstack", "((data1,data2))\ndf = pd", ".DataFrame", "(data,", "columns", "=[", "'a'", ",", "'b'", ",", "'c'", ",", "'type'", "])\n\n", "\n", "dtype: object", "a       object", "b       object", "c       object", "type    object", "dtype: object", "\n", "我想让前三列保持int类型，该怎么操作？", "查阅了相关文档，使用的infer_object可以转换，但是我这里并没有实现成功，不知道为什么。", "\n", "\n", "import numpy as np\nimport pandas as pd\nmytype =", "[", "'A'", ",", "'B'", ",", "'C'", "]", "\ndata1 = np", ".random", ".randint", "(", "0", ",", "10", ",(", "20", ",", "3", "))\ndata2 = np", ".random", ".choice", "(mytype,(", "20", ",", "1", "))\ndata = np", ".hstack", "((data1,data2))\ndf = pd", ".DataFrame", "(data,", "columns", "=[", "'a'", ",", "'b'", ",", "'c'", ",", "'type'", "])\n", "print", "(df.dtypes)", "\ndf", ".infer_objects", "()\n", "print", "(df.dtypes)", "\n", "print", "(df)", "\n\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;tensorflow 版本 这个应该是要使用2.x的&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["树莓派调用tensorflow时出现no module named compat.v1", ["\n", "\n", "import", " numpy as np\n", "import", " os\n", "import", " sys\n", "import", " tarfile\n", "import", " tensorflow as tf\n", "import", " cv2\n", "import", " time\nfrom collections ", "import", " defaultdict\n\nsys.path.append(", "\"../..\"", ")\n\nfrom object_detection.utils ", "import", " label_map_util\nfrom object_detection.utils ", "import", " visualization_utils as vis_util\n\n\n", "MODEL_NAME", " = 'ssd_mobilenet_v1_coco_2018_01_28'\n\n", "PATH_TO_CKPT", " = MODEL_NAME + '/frozen_inference_graph.pb'\n\n", "PATH_TO_LABELS", " = os.path.join('/home/pi/models/research/object_detection/data', 'mscoco_label_map.pbtxt')\n\n", "model_path", " = ", "\"/home/pi/models/research/object_detection/models/ssd_mobilenet_v1_coco_2018_01_28/model.ckpt\"", "\n\n", "start", " = time.clock()\n", "NUM_CLASSES", " = ", "90", "\n\n", "end=", " time.clock()\nprint('load the model' ,(end -start))\n", "detection_graph", " = tf.Graph()\n", "with", " detection_graph.as_default():\n    ", "od_graph_def", " = tf.GraphDef()\n", "with", " tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:\n    ", "serialized_graph", " = fid.read()\n    od_graph_def.ParseFromString(serialized_graph)\n    tf.import_graph_def(od_graph_def, ", "name='')", "\n\n", "label_map", " = label_map_util.load_labelmap(PATH_TO_LABELS)\n\n", "categories", " = label_map_util.convert_label_map_to_categories(label_map, ", "max_num_classes=NUM_CLASSES,", " ", "use_display_name=True)", "\n", "category_index", " = label_map_util.create_category_index(categories)\n\n", "cap", " = cv2.VideoCapture(", "0", ")\n", "with", " detection_graph.as_default():\n    ", "with", " tf.Session(", "graph=detection_graph)", " as sess:\n        ", "writer", " = tf.summary.FileWriter(", "\"logs/\"", ", sess.graph)\n        sess.run(tf.global_variables_initializer())\n\n        ", "loader", " = tf.train.import_meta_graph(model_path + '.meta')\n        loader.restore(sess, model_path)\n        while(", "1", "):\n            ", "start", " = time.clock()\n            ret, ", "frame", " = cap.read()\n            ", "if", " cv2.waitKey(", "1", ") & ", "0", "xFF", " == ord('q'):\n                break\n            ", "image_np", " =frame\n\n            ", "image_np_expanded", " = np.expand_dims(image_np, ", "axis=0)", "\n            ", "image_tensor", " = detection_graph.get_tensor_by_name('image_tensor:", "0", "')\n            ", "boxes", " = detection_graph.get_tensor_by_name('detection_boxes:", "0", "')\n            ", "scores", " = detection_graph.get_tensor_by_name('detection_scores:", "0", "')\n            ", "classes", " = detection_graph.get_tensor_by_name('detection_classes:", "0", "')\n            ", "num_detections", " = detection_graph.get_tensor_by_name('num_detections:", "0", "')\n\n            (boxes, scores, classes, num_detections) = sess.run(\n                [boxes, scores, classes, num_detections],\n                ", "feed_dict={image_tensor:", " image_np_expanded})\n\n            vis_util.visualize_boxes_and_labels_on_image_array(\n                image_np, np.squeeze(boxes),\n                np.squeeze(classes).astype(np.int32),\n                np.squeeze(scores),\n                category_index,\n                ", "use_normalized_coordinates=True,", "\n                ", "line_thickness=6)", "\n            ", "end", " = time.clock()\n\n            print('One frame detect take time:' ,end - start)\n\n            cv2.imshow(", "\"capture\"", ", image_np)\n            print('after cv2 show')\n            cv2.waitKey(", "1", ")\ncap.release()\ncv2.destroyAllWindows()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;已经告诉你了&amp;#xff0c;第三行&amp;#xff0c;前面%是什么意思呢&amp;#xff1f;并且前面带了空格&amp;#xff0c;肯定会有缩进问题啊&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["出现了缩进问题，可是改了后依然报错", ["import matplotlib", ".pyplot", " as plt\nimport numpy as np\n %matplotlib inline\ndef quadratic(", "var", "):\n    return ", "2", "*", "pow", "(var,", "2", ")\nx=np.", "arrange", "(", "0", ",.", "5", ",.", "1", ")\nplt.", "plot", "(x,", "quadratic", "(x))\npli.", "plot", "([", "1", ",", "4", "],[", "qoadratic", "(", "1", "),", "quadratic", "(", "4", ")],linewidth=", "2.0", ")\npli.", "plot", "([", "1", ",", "4", "],[", "qoadratic", "(", "1", "),", "quadratic", "(", "1", ")],linewidth=", "3.0", ",label=", "\"Change in x\"", ")\npli.", "plot", "([", "4", ",", "4", "],[", "qoadratic", "(", "1", "),", "quadratic", "(", "4", ")],linewidth=", "3.0", ",label=", "\"Change in y\"", ")\nplt.", "plot", "(x,", "10", "*x-", "8", ")\nplt.", "plot", "()\n\n", "\n", "\n\n  ", "File", " ", "\"C:\\Users\\zhaoxin_pc\\.spyder-py3\\temp.py\"", ", line ", "9", "\n    %matplotlib ", "inline", "\n    ^\nIndentationError: unexpected indent\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个需要建立字典封装起来&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何将训练好的BP神经网络模型保存并可以在其他py文件中直接调用？", ["下面是我写的BP神经网络代码，问问如何将训练好的神经网络模型保存并可以在其他py文件中直接调用？请老师给出详细的代码，谢谢", "\n\n", "\n", "import pandas as pd\nimport numpy as np\nimport datetime\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import radviz\n\n'''\n    构建一个具有1个隐藏层的神经网络，隐层的大小为10\n    输入层为4个特征，输出层为3个分类\n    (1,0,0)为第一类，(0,1,0)为第二类，(0,0,1)为第三类\n'''\n\n\n# 1.初始化参数\ndef initialize_parameters(n_x, n_h, n_y):\n    np.random.seed(2)\n\n    # 权重和偏置矩阵\n    w1 = np.random.randn(n_h, n_x) * 0.01\n    b1 = np.zeros(shape=(n_h, 1))\n    w2 = np.random.randn(n_y, n_h) * 0.01\n    b2 = np.zeros(shape=(n_y, 1))\n\n    # 通过字典存储参数\n    parameters = {'w1': w1, 'b1': b1, 'w2': w2, 'b2': b2}\n\n    return parameters\n\n\n# 2.前向传播\ndef forward_propagation(X, parameters):\n    w1 = parameters['w1']\n    b1 = parameters['b1']\n    w2 = parameters['w2']\n    b2 = parameters['b2']\n\n    # 通过前向传播来计算a2\n    z1 = np.dot(w1, X) + b1  # 这个地方需注意矩阵加法：虽然(w1*X)和b1的维度不同，但可以相加\n    a1 = np.tanh(z1)  # 使用tanh作为第一层的激活函数\n    z2 = np.dot(w2, a1) + b2\n    a2 = 1 / (1 + np.exp(-z2))  # 使用sigmoid作为第二层的激活函数\n\n    # 通过字典存储参数\n    cache = {'z1': z1, 'a1': a1, 'z2': z2, 'a2': a2}\n\n    return a2, cache\n\n\n# 3.计算代价函数\ndef compute_cost(a2, Y, parameters):\n    m = Y.shape[1]  # Y的列数即为总的样本数\n\n    # 采用交叉熵（cross-entropy）作为代价函数\n    logprobs = np.multiply(np.log(a2), Y) + np.multiply((1 - Y), np.log(1 - a2))\n    cost = - np.sum(logprobs) / m\n\n    return cost\n\n\n# 4.反向传播（计算代价函数的导数）\ndef backward_propagation(parameters, cache, X, Y):\n    m = Y.shape[1]\n\n    w2 = parameters['w2']\n\n    a1 = cache['a1']\n    a2 = cache['a2']\n\n    # 反向传播，计算dw1、db1、dw2、db2\n    dz2 = a2 - Y\n    dw2 = (1 / m) * np.dot(dz2, a1.T)\n    db2 = (1 / m) * np.sum(dz2, axis=1, keepdims=True)\n    dz1 = np.multiply(np.dot(w2.T, dz2), 1 - np.power(a1, 2))\n    dw1 = (1 / m) * np.dot(dz1, X.T)\n    db1 = (1 / m) * np.sum(dz1, axis=1, keepdims=True)\n\n    grads = {'dw1': dw1, 'db1': db1, 'dw2': dw2, 'db2': db2}\n\n    return grads\n\n\n# 5.更新参数\ndef update_parameters(parameters, grads, learning_rate=0.06):\n    w1 = parameters['w1']\n    b1 = parameters['b1']\n    w2 = parameters['w2']\n    b2 = parameters['b2']\n\n    dw1 = grads['dw1']\n    db1 = grads['db1']\n    dw2 = grads['dw2']\n    db2 = grads['db2']\n\n    # 更新参数\n    w1 = w1 - dw1 * learning_rate\n    b1 = b1 - db1 * learning_rate\n    w2 = w2 - dw2 * learning_rate\n    b2 = b2 - db2 * learning_rate\n\n    parameters = {'w1': w1, 'b1': b1, 'w2': w2, 'b2': b2}\n\n    return parameters\n\n\n# 6.模型评估\ndef predict(parameters, x_test, y_test):\n    w1 = parameters['w1']\n    b1 = parameters['b1']\n    w2 = parameters['w2']\n    b2 = parameters['b2']\n\n    z1 = np.dot(w1, x_test) + b1\n    a1 = np.tanh(z1)\n    z2 = np.dot(w2, a1) + b2\n    a2 = 1 / (1 + np.exp(-z2))\n\n    # 结果的维度\n    n_rows = y_test.shape[0]\n    n_cols = y_test.shape[1]\n\n    # 预测值结果存储\n    output = np.empty(shape=(n_rows, n_cols), dtype=int)\n\n    # for i in range(n_rows):\n    #     for j in range(n_cols):\n    #         if a2[i][j] > 0.5:\n    #             output[i][j] = 1\n    #         else:\n    #             output[i][j] = 0\n\n    for i in range(n_cols):\n        # 将每条测试数据的预测结果（概率）存为一个行向量\n        temp = np.zeros(shape=n_rows)\n        for j in range(n_rows):\n            temp[j] = a2[j][i]\n\n        # 将每条结果（概率）从小到大排序，并获得相应下标\n        sorted_dist = np.argsort(temp)\n        length = len(sorted_dist)\n\n        # 将概率最大的置为1，其它置为0\n        for k in range(length):\n            if k == sorted_dist[length - 1]:\n                output[k][i] = 1\n            else:\n                output[k][i] = 0\n\n    print('预测结果：')\n    print(output)\n    print('真实结果：')\n    print(y_test)\n\n    count = 0\n    for k in range(0, n_cols):\n        if output[0][k] == y_test[0][k] and output[1][k] == y_test[1][k] and output[2][k] == y_test[2][k]:\n            count = count + 1\n        else:\n            print(k)\n\n    acc = count / int(y_test.shape[1]) * 100\n    print('准确率：%.2f%%' % acc)\n\n    return output\n\n\n# 建立神经网络\ndef nn_model(X, Y, n_h, n_input, n_output, num_iterations=10000, print_cost=False):\n    np.random.seed(3)\n\n    n_x = n_input  # 输入层节点数\n    n_y = n_output  # 输出层节点数\n\n    # 1.初始化参数\n    parameters = initialize_parameters(n_x, n_h, n_y)\n\n    # 梯度下降循环\n    for i in range(0, num_iterations):\n        # 2.前向传播\n        a2, cache = forward_propagation(X, parameters)\n        # 3.计算代价函数\n        cost = compute_cost(a2, Y, parameters)\n        # 4.反向传播\n        grads = backward_propagation(parameters, cache, X, Y)\n        # 5.更新参数\n        parameters = update_parameters(parameters, grads)\n\n        # 每1000次迭代，输出一次代价函数\n        if print_cost and i % 1000 == 0:\n            print('迭代第%i次，代价函数为：%f' % (i, cost))\n\n    return parameters\n\n\n\n# 结果可视化\n# 特征有4个维度，类别有1个维度，一共5个维度，故采用了RadViz图\n# def result_visualization(x_test, y_test, result):\n#     cols = y_test.shape[1]\n#     y = []\n#     pre = []\n#\n#     # 反转换类别的独热编码\n#     for i in range(cols):\n#         if y_test[0][i] == 0 and y_test[1][i] == 0 and y_test[2][i] == 1:\n#             y.append('setosa')\n#         elif y_test[0][i] == 0 and y_test[1][i] == 1 and y_test[2][i] == 0:\n#             y.append('versicolor')\n#         elif y_test[0][i] == 1 and y_test[1][i] == 0 and y_test[2][i] == 0:\n#             y.append('virginica')\n#\n#     for j in range(cols):\n#         if result[0][j] == 0 and result[1][j] == 0 and result[2][j] == 1:\n#             pre.append('setosa')\n#         elif result[0][j] == 0 and result[1][j] == 1 and result[2][j] == 0:\n#             pre.append('versicolor')\n#         elif result[0][j] == 1 and result[1][j] == 0 and result[2][j] == 0:\n#             pre.append('virginica')\n#         else:\n#             pre.append('unknown')\n#\n#     # 将特征和类别矩阵拼接起来\n#     real = np.column_stack((x_test.T, y))\n#     prediction = np.column_stack((x_test.T, pre))\n#\n#     # 转换成DataFrame类型，并添加columns\n#     df_real = pd.DataFrame(real, index=None,\n#                            columns=['Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width', 'Species'])\n#     df_prediction = pd.DataFrame(prediction, index=None,\n#                                  columns=['Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width', 'Species'])\n#\n#     # 将特征列转换为float类型，否则radviz会报错\n#     df_real[['Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width']] = df_real[\n#         ['Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width']].astype(float)\n#     df_prediction[['Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width']] = df_prediction[\n#         ['Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width']].astype(float)\n#\n#     # 绘图\n#     plt.figure('真实分类')\n#     radviz(df_real, 'Species', color=['blue', 'green', 'red', 'yellow'])\n#     plt.figure('预测分类')\n#     radviz(df_prediction, 'Species', color=['blue', 'green', 'red', 'yellow'])\n#     plt.show()\n\n\nif __name__ == \"__main__\":\n    # 读取数据\n    data_set = pd.read_csv('C:/Users/29291/Desktop/sjwl.csv', header=None)\n\n    # # 第1种取数据方法：\n    # X = data_set.iloc[0:671, 0:269].values  # 前四列是特征，T表示转置\n    # Y = data_set.iloc[672:674, 0:269].values  # 后三列是标签\n\n    # 第2种取数据方法：\n    # X = data_set.ix[0:671, 0:269].values\n    # Y = data_set.ix[672:674, 0:269].values\n\n    # 第3种取数据方法：\n    X = data_set.loc[0:671, 0:269].values\n    x_mean = np.mean(X, axis=0)\n    x_std = np.std(X, axis=0)\n    X = (X - x_mean) / x_std\n    Y = data_set.loc[672:674, 0:269].values\n    # X = data_set.loc[1:670, 1:270].values\n    # Y = data_set.loc[672:674, 0:269].values\n    # 第4种取数据方法：\n    # X = data_set[data_set.columns[0:671, 0:269].values.T\n    # Y = data_set[data_set.columns[672:674, 0:269]].values.T\n    Y = Y.astype('uint8')\n\n    # 开始训练\n    start_time = datetime.datetime.now()\n    # 输入4个节点，隐层10个节点，输出3个节点，迭代10000次\n    parameters = nn_model(X, Y, n_h=30, n_input=672, n_output=3, num_iterations=10000, print_cost=True)\n    end_time = datetime.datetime.now()\n    print(\"用时：\" + str((end_time - start_time).seconds) + 's' + str(\n        round((end_time - start_time).microseconds / 1000)) + 'ms')\n    # 对模型进行测试\n    data_test = pd.read_csv('C:/Users/29291/Desktop/sjwl.csv', header=None)\n    # x_test = data_test.iloc[0:671, 270:299].values\n    # y_test = data_test.iloc[672:674, 270:299].values\n    x_test =data_set.loc[0:671, 270:299].values\n    x_mean = np.mean(x_test , axis=0)\n    x_std = np.std(x_test , axis=0)\n    x_test  = (x_test  - x_mean) / x_std\n    y_test =data_set.loc[672:674, 270:299].values\n    y_test = y_test.astype('uint8')\n    result = predict(parameters, x_test, y_test)"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;唉&amp;#xff0c;终究是解决了&amp;#xff0c;求均值的时候X[y_pred&amp;#61;&amp;#61;i].mean()没加axis&amp;#61;0&lt;br /&gt;顺便把新实现的代码贴一下吧&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.datasets &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; make_blobs\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Kmeans&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;__init__&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, k, init&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;pp-soft&amp;#39;&lt;/span&gt;, max_iter&amp;#61;&lt;span class=\"hljs-number\"&gt;300&lt;/span&gt;, thresh&amp;#61;&lt;span class=\"hljs-number\"&gt;1e-5&lt;/span&gt;&lt;/span&gt;):\n        self.k &amp;#61; k\n        self.thresh &amp;#61; thresh\n        self.max_iter &amp;#61; max_iter\n        self.init &amp;#61; init\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;random_centroid_init&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self,X&lt;/span&gt;):\n        &lt;span class=\"hljs-comment\"&gt;# 随机选取K个样本作为聚类中心&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; X[np.random.choice(X.shape[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], size&amp;#61;self.k)]\n    \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;max_centroid_init&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self,X&lt;/span&gt;):\n        centroids &amp;#61; []\n        centroids.append(X[np.random.choice(X.shape[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])])\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(self.k-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n            index &amp;#61; np.argmax([np.&lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(self.dist(x)) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; x &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; X])\n            centroids.append(X[index])\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; np.array(centroids)\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;soft_centroid_init&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self,X&lt;/span&gt;):\n        centroids &amp;#61; []\n        centroids.append(X[np.random.choice(X.shape[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])])\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(self.k-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n            D &amp;#61; [np.&lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(self.dist(x)) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; x &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; X]\n            number &amp;#61; np.random.choice(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(np.&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(D)))\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i,d &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;enumerate&lt;/span&gt;(D):\n                number -&amp;#61; d\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; number&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n                    centroids.append(X[i])\n                    &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; np.array(centroids)\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;dist&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, x&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; [np.linalg.norm(x - c) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; c &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; self.centroids]\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;fit_predict&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, X&lt;/span&gt;):\n        &lt;span class=\"hljs-comment\"&gt;# 初始化聚类中心&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; self.init &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;random&amp;#39;&lt;/span&gt;:\n            self.centroids &amp;#61; self.random_centroid_init(X)\n        &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; self.init &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;pp-max&amp;#39;&lt;/span&gt;:\n            self.centroids &amp;#61; self.max_centroid_init(X)\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            self.centroids &amp;#61; self.soft_centroid_init(X)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; _ &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(self.max_iter):\n            &lt;span class=\"hljs-comment\"&gt;# 涂色&lt;/span&gt;\n            y_pred &amp;#61; np.array([np.argmin(self.dist(x)) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; x &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; X])\n            \n            &lt;span class=\"hljs-comment\"&gt;# 计算新的聚类中心&lt;/span&gt;\n            new_centroids &amp;#61; self.centroids.copy()\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(self.k):\n                new_centroids[i] &amp;#61; np.mean(X[y_pred&amp;#61;&amp;#61;i],axis&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            \n            &lt;span class=\"hljs-comment\"&gt;# 如果聚类中心位置基本没有变化&amp;#xff0c;那么终止&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; np.&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(np.&lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(new_centroids - self.centroids)) &amp;lt; self.thresh:\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n            \n            &lt;span class=\"hljs-comment\"&gt;# 否则更新聚类中心&amp;#xff0c;重复上述步骤&lt;/span&gt;\n            self.centroids &amp;#61; new_centroids\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; y_pred\n    \nX, y &amp;#61; make_blobs(n_samples&amp;#61;&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;, n_features&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, centers&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n\nmodel &amp;#61; Kmeans(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\ny_pred &amp;#61; model.fit_predict(X)\n\nplt.figure()\nplt.subplot(&lt;span class=\"hljs-number\"&gt;121&lt;/span&gt;)\nplt.scatter(X[:, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], X[:, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], c&amp;#61;y)\nplt.subplot(&lt;span class=\"hljs-number\"&gt;122&lt;/span&gt;)\nplt.scatter(X[:, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], X[:, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], c&amp;#61;y_pred)\nplt.show()\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["kmeans++聚类聚成这样合理吗", ["kmeans++聚类聚成这样合理吗", "聚类的算法代码如下", "\n", "class", " ", "Kmeans", ":\n    ", "def", " ", "__init__", "(", "self, k, threshold=", "1e-5", "):\n        self.k = k\n        self.threshold = threshold\n    \n    ", "def", " ", "centroid_init", "(", "self,X", "):\n        centroids = []\n        centroids.append(X[np.random.choice(X.shape[", "0", "])])\n        ", "for", " i ", "in", " ", "range", "(self.k-", "1", "):\n            D = []\n            ", "for", " x ", "in", " X:\n                D.append(np.", "min", "([np.linalg.norm(x - c) ", "for", " c ", "in", " centroids]))\n            centroids.append(X[np.argmax(D)])\n        ", "return", " np.array(centroids)\n                              \n    ", "def", " ", "train", "(", "self, X", "):\n        ", "# 初始化聚类中心", "\n        self.centroids = self.centroid_init(X)\n        y_pred = np.zeros(shape=(X.shape[", "0", "],))\n        ", "while", " ", "True", ":\n            ", "# 涂色", "\n            ", "for", " i, x ", "in", " ", "enumerate", "(X):\n                y_pred[i] = self.predict(x)\n            \n            ", "# 计算新的聚类中心", "\n            new_centroids = self.centroids.copy()\n            ", "for", " i ", "in", " ", "range", "(self.k):\n                new_centroids[i] = X[y_pred==i].mean()\n            \n            ", "# 如果聚类中心位置基本没有变化，那么终止", "\n            ", "if", " np.", "max", "(np.", "abs", "(new_centroids - self.centroids)) < self.threshold:\n                ", "break", "\n            \n            ", "# 否则更新聚类中心，重复上述步骤", "\n            self.centroids = new_centroids\n        ", "return", " y_pred\n\n    ", "def", " ", "predict", "(", "self, x", "):\n        dis = []\n        ", "# 计算每个样本与中心的距离", "\n        ", "for", " c ", "in", " self.centroids:\n            dis.append(np.linalg.norm(x - c))\n        ", "# 将样本索引添加到距离最小的中心对应的分类中", "\n        ", "return", " np.argmin(dis)\n", "\n", "下图左边是原数据分布，右边是上面的算法生成的聚类分布"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;问题在后面的 model(data[0])&amp;#xff0c;data 和 x 不匹配&amp;#xff0c;设置错误.&lt;/p&gt;\n&lt;p&gt;可以打印和追踪矩阵的形状&amp;#xff0c;是开始设置时就不匹配&amp;#xff0c;还是中间被修改了&amp;#xff0c;在哪里发生修改的。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#神经网络#的问题：RuntimeError: mat1 and mat2 shapes cannot be multiplied (64x64 and 128x64)", ["RuntimeError: mat1 and mat2 shapes cannot be multiplied (64x64 and 128x64)", "近期在调试一个四层的BP神经网络，报出了这样的错误：", "\n", "\n", "大概知道问题出在这里：", "\n", "    def forward(self, x):\n        x = F.", "relu", "(self.", "hidden_1", "(x))\n        x = self.", "dropout", "(self.", "bn1", "(x))\n        x = F.", "relu", "(self.", "hidden_2", "(x))\n        x = self.", "dropout", "(self.", "bn2", "(x))\n        x = F.", "relu", "(self.", "hidden_3", "(x))\n        x = self.", "dropout", "(self.", "bn3", "(x))\n        x = F.", "relu", "(self.", "hidden_4", "(x))%问题所在\n        x = self.", "dropout", "(self.", "bn4", "(x))\n        x = self.", "out", "(x)\n        return x\n", "\n", "目前已经尝试过添加", "\n", "x", " = torch.flatten(x,", "1", ")\n", "\n", "不能解决/(ㄒoㄒ)/~~，感觉也不是池化层输出形状的问题叭，因为打印在def forward(self, x)中print(x.shape)输出是([64,64])，唉，神经网络小菜请教如何解决🙇‍", "下面贴出相关代码：", "\n", "class", " ", "Classifier(", "torch", ".", "nn", ".Module)", ":\n    def ", "__init__(", "self", ", ", "n_feature", ", ", "n_hidden", ", ", "n_output", ", ", "dropout", "=0.5)", ":\n        super(Classifier, self).", "__init__()", "\n        self.dropout = torch.nn.", "Dropout(", "dropout", ")", "\n\n        self.hidden_1 = torch.nn.", "Linear(", "n_feature", ", ", "n_hidden", ")", "\n        self.bn1 = torch.nn.", "BatchNorm1d(", "n_hidden", ")", "\n\n        self.hidden_2 = torch.nn.", "Linear(", "n_hidden", ", ", "n_hidden", "/", "/", "4)", "\n        self.bn2 = torch.nn.", "BatchNorm1d(", "n_hidden", "/", "/", "4)", "\n\n        self.hidden_3 = torch.nn.", "Linear(", "n_hidden", "/", "/", "4, ", "n_hidden", "/", "/", "8)", "\n        self.bn3 = torch.nn.", "BatchNorm1d(", "n_hidden", "/", "/", "8)", "\n        #三层卷积与四层卷积\n        self.hidden_4 = torch.nn.", "Linear(", "n_hidden", " ", "/", "/", " 4, ", "n_hidden", " ", "/", "/", " 8)", "\n        self.bn4 = torch.nn.", "BatchNorm1d(", "n_hidden", " ", "/", "/", " 8)", "\n\n        self.out = torch.nn.", "Linear(", "n_hidden", "/", "/", "8, ", "n_output", ")", "\n\n    def forward(self, x):\n        x = ", "F", ".", "relu(self.hidden", "_1(", "x", ")", ")\n        x = self.dropout(self.bn1(x))\n        x = ", "F", ".", "relu(self.hidden", "_2(", "x", ")", ")\n        x = self.dropout(self.bn2(x))\n        x = ", "F", ".", "relu(self.hidden", "_3(", "x", ")", ")\n        x = self.dropout(self.bn3(x))\n        x = ", "F", ".", "relu(self.hidden", "_4(", "x", ")", ")\n        x = self.dropout(self.bn4(x))\n        x = self.out(x)\n        return x\n", "\n", " ", "for", " ", "i", ", data ", "in", " enumerate(train_loader):\n            optimizer", ".zero_grad", "() \n            train_pred = model(data", "[0]", ")\n            batch_loss = loss(train_pred, data", "[1]", ") \n\n            batch_loss", ".backward", "()  \n            optimizer", ".step", "()  \n\n            train_acc += np", ".sum", "(np", ".argmax", "(train_pred", ".cpu", "()", ".data", ".numpy", "(), axis=", "1", ") == data", "[1]", ".numpy", "())\n            train_loss += batch_loss", ".item", "()\n"]], "Tag": "算法设计"}
{"Answer": "comment表示注释，解析时不把它当成真正的数据，也就是把那行忽略掉\r\n\r\napi里面的解释：\r\n```\r\n comments : str, optional\r\n        The character used to indicate the start of a comment.\r\n        All the characters occurring on a line after a comment are discarded\r\n```\r\n\r\n如果data:开头的是数据，就该把comments设为None（如有注释行，就该是注释行标记符）\r\n要么在读取文本前把前面的data处理掉，要么在得到数组后把第一个元素(data:编程了nan，表示非数字)去掉", "Konwledge_Point": "应对NP完全问题", "Question": ["关于numpy中的genfromtxt方法的参数设定问题？", ["请教一下，现在我想把一个utf-8编码的txt文件导入为一个numpy数组，txt文件内容如下：", "\n\n", "导入数据如下：", "\ndata:1,10,100,1000,10000,100000,1000000,10000000", "\ndata:1,2,4,8,16,32,64,128", "\n请找出数据的递增规则", "\n\n", "我写的代码如下：", "\n\n", "a=np.genfromtxt('data.txt',delimiter=',',comments='data:',skip_header=1,skip_footer=1,encoding='utf-8')\na\n", "\n\n", "输出结果是：array([], dtype=float64) 看上去应该是一个空数组，我尝试把中间两条数据记录前面的data：去掉即可正常读取数据，推测是comments参数设置的问题，可否指导一下应该怎么修改啊？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;因为确实没有rank函数&lt;br /&gt;你可能是想&lt;br /&gt;&lt;a href=\"https://jingyan.baidu.com/article/0eb457e51003cb42f1a90586.html\" id=\"textarea_1633952982876_1633953089139_0\"&gt;https://jingyan.baidu.com/article/0eb457e51003cb42f1a90586.html&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python一直出现错误提示", ["代码：", "\n", "np", ".", "rank", "(myArray)\n\n", "\n", "错误提示：", "\n", "AttributeError                            Traceback (most recent ", "call", " last)\n<ipython-", "input", "-1", "-e6b9ab052145> ", "in", " <module>\n      ", "1", " ", "import", " numpy ", "as", " np\n", "----> 2 np.rank(myArray)", "\n\nD:\\anaconda\\lib\\site-packages\\numpy\\__init__.py ", "in", " __getattr__(attr)\n    ", "301", "                 ", "return", " Tester\n    ", "302", " \n", "--> 303             raise AttributeError(\"module {!r} has no attribute \"", "\n    ", "304", "                                  \"{!r}\".format(__name__, attr))\n    ", "305", " \n\n", "\n", "AttributeError: module 'numpy' has no attribute 'rank'", "想知道这个问题怎么解决呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;是不是你的训练数据太少了&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["写了一个人脸识别，准确度一直有问题，是不是我的训练思路出问题了？", ["每个人一个文件夹，每个文件夹里面有3张人脸照片", "\n", "\n", "import", " cv2\n", "import", " numpy ", "as", " np\n", "from", " cv2 ", "import", " face\n", "import", " os\n", "import", " pymysql\n", "def", " ", "face_xunlian", "():\n    \n    ", "#提取字典中的key值并转化为列表", "\n    keyvalues = ", "list", "(", "map", "(", "int", ",result.keys()))\n\n    ", "#样本图像列表", "\n    photos =", "list", "()\n    ", "#标签列表", "\n    lables =", "list", "()\n    ", "#定位文件夹", "\n    wenjianjia = os.listdir(", "\"D:/python/opencv/shuju\"", ")\n\n    ", "print", "(wenjianjia)\n    num=", "1", "\n    ", "#遍历文件夹", "\n    ", "for", " ids ", "in", " wenjianjia:\n        ", "#定位文件夹中的图片", "\n        tupin_id=os.listdir(", "\"D:/python/opencv/shuju/\"", "+ids)\n        ", "#遍历文件夹中的图片", "\n        ", "for", " tupin_local ", "in", " tupin_id:\n            photos.append(cv2.imread(", "\"D:/python/opencv/shuju/\"", "+ids+", "\"/\"", "+tupin_local,", "0", "))\n            ", "print", "(ids)\n            ", "print", "(", "\"D:/python/opencv/shuju/\"", "+ids+", "\"/\"", "+tupin_local)\n            ", "print", "(cv2.imread(", "\"D:/python/opencv/shuju/\"", "+ids+", "\"/\"", "+tupin_local,", "0", "))\n            ", "if", " num<", "len", "(ids)+", "1", ":\n                ", "for", " kk ", "in", " keyvalues:\n                    num+", "1", "\n                    s=kk,kk,kk\n                    ", "for", " numnber ", "in", " s:\n                        ", "print", "(numnber)\n                        lables.append(numnber)\n                        num+=", "1", "\n\n\n\n\n    ", "#加载识别器（LBPH）", "\n    recognizer=cv2.face.LBPHFaceRecognizer_create()\n    ", "#识别器训练", "\n    recognizer.train(photos,np.array(lables))\n    ", "#训练结果录入", "\n    recognizer.write(", "'./trainer_face.yml'", ")\n\n\n\n\nface_xunlian()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;float() argument must be a string or a number&lt;br /&gt;报错的意思float(A)&amp;#xff0c;要求A是一个字符串数字或者数字&amp;#xff0c;但是你的是空的&amp;#xff0c;你在哪里用float转换数值的地方出问题了&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["TypeError: float() argument must be a string or a number, not '_NoValueType'", ["def imshow(img):", "    img = img / 2 + 0.5     # unnormalize", "    npimg = img.numpy()", "    plt.imshow(np.transpose(npimg, (1, 2, 0)))", "    plt.show()", "\n", "随机获取训练图片", "\n", "dataiter", " = iter(trainloader)\nimages, ", "labels", " = dataiter.next()\n", "\n", "显示图片", "\n", "imshow", "(torchvision.utils.make_grid(images)", ")\n", "\n", "打印图片标签", "\n", "pr", "int", "(", "' '", ".joi", "n", "(", "'%5s'", " % classes[labels[j]] for j ", "in", " ", "range", "(4)))\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个错误提示表明&amp;#xff0c;在计算距离的时候使用了字符串类型的数据&amp;#xff0c;而距离计算一般是针对数值型数据的。你需要检查你的数据&amp;#xff0c;看看是否有些特征是字符串类型的&amp;#xff0c;如果有&amp;#xff0c;你需要进行相应的处理&amp;#xff0c;将其转换为数值类型&amp;#xff0c;比如使用独热编码等方式。答案来自 我点评开发社区 &lt;a href=\"https://www.wodianping.com/\" id=\"textarea_1678606064893_1678606097686_0\"&gt;https://www.wodianping.com/&lt;/a&gt; 你也可以考虑在 KNN 模型中使用其他距离度量方式&amp;#xff0c;比如 Jaccard 相似度、余弦相似度等&amp;#xff0c;这些度量方式可以适用于一些非数值型数据。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#机器学习#的问题，如何解决？(语言-python)", ["TypeError                                 Traceback (most recent ", "call", " ", "last", ")\n~\\AppData\\Local\\Temp\\ipykernel_2024\\", "4008345267", ".", "py", " in ", "<module>", "\n      ", "9", " knn = KNN(", "k", "=", "2", ")\n     ", "10", " knn.fit(train_X,train_y)\n---> ", "11", " result = knn.predict(test_X)\n     ", "12", " ", "display", "(result)\n\n~\\AppData\\Local\\Temp\\ipykernel_2024\\", "1590028057", ".", "py", " in predict(self, ", "X", ")\n     ", "11", "         #每次取一行样本当作一个点\n     ", "12", "         ", "for", " ", "x", " in ", "X", ":\n---> ", "13", "             dis=np.", "sqrt", "(np.sum((", "x", " - self.", "X", ") ** ", "2", ",axis=", "1", "))\n     ", "14", "             ", "index", "=dis.argsort()\n     ", "15", "             ", "index", "=", "index", "[:self.", "k", "]\n\nTypeError: unsupported operand ", "type", "(s) ", "for", " -: ", "'str'", " ", "and", " ", "'str'", "\n\n"]], "Tag": "算法设计"}
{"Answer": "对于单个频率的波形，取频谱的峰值,np.argmax()可以取到下标值，根据freq=下标*N/fs,获得频率值， 对于含有多个频率的波形，我是做一个区分，判断频谱中\r\n振幅大于某个数，就为信号，小于某个数就为噪声。这样不准确，最好用信噪比判断，然后同样获取下标，获得频率值，相应还能得到幅度。", "Konwledge_Point": "应对NP完全问题", "Question": ["python：对一个波形做傅里叶变换，能得到整个频谱，怎么提取其中的频率分量呢？", ["import wave", "\nimport struct", "\nimport numpy as np", "\n\n", "if ", "name", " == '__main__':", "\n    data_size = 40000", "\n    fname = \"test.wav\"", "\n    frate = 11025.0", "\n    wav_file = wave.open(fname, 'r')", "\n    data = wav_file.readframes(data_size)", "\n    wav_file.close()", "\n    data = struct.unpack('{n}h'.format(n=data_size), data)", "\n    data = np.array(data)", "\n\n", "w = np.fft.fft(data)\nfreqs = np.fft.fftfreq(len(w))\nprint(freqs.min(), freqs.max())\n# (-0.5, 0.499975)\n\n# Find the peak in the coefficients\nidx = np.argmax(np.abs(w))\nfreq = freqs[idx]\nfreq_in_hertz = abs(freq * frate)\nprint(freq_in_hertz)\n# 439.8975\n", "\n\n", "这个是对于单个data_size,frate已知的情况，真实情况是未知，且有多个频率的信号。求解。。。"]], "Tag": "算法设计"}
{"Answer": "？什么意思，128754个元素要怎么转成 1 x 1118的格式啊？", "Konwledge_Point": "应对NP完全问题", "Question": ["麻烦大家帮我debug一个reshape array的问题", ["def plot_LSA(test_data, test_labels, savepath=\"PCA_demo.csv\", plot=True):\n        lsa = TruncatedSVD(n_components=2) # Truncated SVD works on term count/tf-idf matrices as returned by the vectorizers in sklearn.feature_extraction.text. In that context, it is known as latent semantic analysis (LSA).\n        lsa.fit(np.array(test_data).reshape(1,1118))\n        lsa_scores = lsa.transform(np.array(test_data).reshape(1,1118))\n        color_mapper = {label:idx for idx,label in enumerate(set(test_labels))}\n        color_column = [color_mapper[label] for label in test_labels]\n        print ('colormapper=',color_mapper)\n        #print ('colorColumn=',color_column)\n        colors = ['blue','green','red']\n        if plot:\n            plt.scatter(lsa_scores[:,0], lsa_scores[:,1], s=8, alpha=.8, c=test_labels, cmap=matplotlib.colors.ListedColormap(colors))\n            red_patch = mpatches.Patch(color='red', label='Negative')\n            blue_patch = mpatches.Patch(color='blue', label='Neutral')\n            green_patch = mpatches.Patch(color='green', label='Positive')\n            plt.legend(handles=[red_patch, green_patch, blue_patch], prop={'size': 30})\n\n\n```fig = plt.figure(figsize=(16, 16))          \nplot_LSA(X_train, y_train)\nplt.show()\n\n", "\n\n", "ValueError                                Traceback (most recent call last)\n<ipython-input-101-f45ff1a9f7db> in <module>\n     22 \n     23 fig = plt.figure(figsize=(5, 5))\n---> 24 plot_LSA(X_train, y_train)\n     25 plt.show()\n     26 \n\n<ipython-input-101-f45ff1a9f7db> in plot_LSA(test_data, test_labels, savepath, plot)\n      7 def plot_LSA(test_data, test_labels, savepath=\"PCA_demo.csv\", plot=True):\n      8         lsa = TruncatedSVD(n_components=2) # Truncated SVD works on term count/tf-idf matrices as returned by the vectorizers in sklearn.feature_extraction.text. In that context, it is known as latent semantic analysis (LSA).\n----> 9         lsa.fit(np.array(test_data).reshape(1,1118))\n     10         lsa_scores = lsa.transform(np.array(test_data).reshape(1,1118))\n     11         color_mapper = {label:idx for idx,label in enumerate(set(test_labels))}\n\nValueError: cannot reshape array of size 128764 into shape (1,1118)\n\n<Figure size 360x360 with 0 Axes>\n\n\n\n之前出现的问题是python是1D array,没有办法显示2D array,然后我按照网上的指导解决了，但是以上错误不知道怎么修改，麻烦大家给我一点建议。谢谢！\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;保存地址里\\U被转义了呗&amp;#xff0c;可改为&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;plt.savefig(&lt;span class=\"hljs-string\"&gt;r&amp;#39;C:\\Users\\30575\\Desktop\\daima-tu&amp;#39;&lt;/span&gt;, dpi&amp;#61;&lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;, bbox_inches&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;tight&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-comment\"&gt;# or&lt;/span&gt;\nplt.savefig(&lt;span class=\"hljs-string\"&gt;&amp;#39;C:\\\\Users\\\\30575\\\\Desktop\\\\daima-tu&amp;#39;&lt;/span&gt;, dpi&amp;#61;&lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;, bbox_inches&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;tight&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["plt.savefig()使用时报错", ["问题遇到的现象和发生背景", "\n", "plt.savefig()使用时报错", "\n", "问题相关代码，请勿粘贴截图", "\n", "[](", "\n", "plt.plot(np.array(plt_beta), np.array(plt_k))\nplt.xlabel(r", "'$\\eta$'", ",", "fontsize", "=12)\nplt.ylabel(", "'Iterations'", ",", "fontsize", "=12)\nplt.savefig(", "'C:\\Users\\30575\\Desktop\\daima-tu'", ", ", "dpi", "=500, ", "bbox_inches", "=", "'tight'", ") #保存高清图片\nplt.show()\n\n\n\n```)\n\n", "###### 运行结果及报错内容 ", "\n请问为什么会报错：(unicode error) ", "'unicodeescape'", " codec can", "'t decode bytes in position\n2-3: truncated \\UXXXXXXXX escape\n\n\n###### 我的解答思路和尝试过的方法 \n\n###### 我想要达到的结果\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;直接改一改就能用了&amp;#xff0c;YOLOV5本身就是opencv格式读写的&amp;#xff0c;opencv本身就是numpy格式的数据&amp;#xff0c;只不过输入读取的不是而已&amp;#xff0c;你可以直接将读取接口换成numpy就可以了&lt;br /&gt;具体可以修改这里面的东西&amp;#xff0c;copy一份&amp;#xff0c;然后将里面的imread读取换成直接复赋值numpy矩阵就可以了&amp;#xff0c;但是后面的一些像自适应缩放啥的还是要的&amp;#xff0c;或者你可以都不要这些&amp;#xff0c;直接自己参考这个数据加载的方式自己实现一个&amp;#xff0c;只要能保证返回的结果里面的值格式一致即可&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/458536683176152.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["yolov5传入numpy矩阵视频流", ["问题遇到的现象和发生背景", "\n", "最近接手一个项目，用yolov5和工业相机实现目标检测。", "目前已经用python调用海康工业相机得到numpy数组类型的视频。", "但是想要将这种格式的视频传入yolov5的detect.py就出现了问题。", "yolov5目前支持的格式为：", "1.mp4、avi等视频格式的文件；", "2.RTSP、HTTP等视频流；", "3.电脑自带相机以及其他免驱动相机；", "\n", "所以，yolov5不支持传入numpy数组格式的视频", "\n", "temp", " = np.asarray(data_buf)  #", "temp", "是工业相机得到的numpy视频流\n", "temp", " = ", "temp", ".reshape((img_h, img_w, img_c))\n", "temp", " = cv2.cvtColor(", "temp", ", cv2.COLOR_BGR2RGB)\ncv2.namedWindow(\"temp\", cv2.WINDOW_NORMAL)\ncv2.imshow(", "'temp'", ",", "temp", ")\n\n", "\n", "我尝试将numpy数组转换成图片", "\n", "import", " numpy as np\n", "from", " PIL import Image\n\n", "# 将numpy数组转换成图片", "\n", "def", " array2img(arr):\n    ", "# 将numpy数组转换为PIL图片", "\n    ", "img", " = Image.fromarray(np.uint8(arr))\n    ", "# 显示图片", "\n    ", "img", ".show()\n\n", "# 创建一个3x3的numpy数组", "\n", "arr", " = np.array([[", "1", ",", "2", ",", "3", "],[", "4", ",", "5", ",", "6", "],[", "7", ",", "8", ",", "9", "]], dtype=np.uint8)\n", "# 调用函数将numpy数组转换成图片", "\n", "array2img", "(arr)\n\n", "\n", "但是这种方法会保存图片，", "对于实施检测来说，就会保存大量图片", "\n", "实现目标：", "将numpy视频流能传入yolov5"]], "Tag": "算法设计"}
{"Answer": "这句话改成常见写法是：\r\nfor sp in range(3)：\r\n    Q[s, a] += T[s, a, sp] * (R[s, a, sp] + discount_rate * np.max(Q_prev[sp]))\r\n\r\n举个例子：\r\nt = [i for i in range(3)]\r\n相当于：\r\nt = []\r\nfor i in range(3):\r\n    t.append(i)\r\n这是一种非常方便的写法。", "Konwledge_Point": "应对NP完全问题", "Question": ["一个在python句子里面的for循环", ["新手学python，我遇到一个python在句子里面，我不能理解这个for循环是什么意思。", "\n如果改成常见的那种for循环应该怎么写。", "\n我看不懂的代码是这一句", "\n\n", " Q[s, a] = np.sum([T[s, a, sp] * (R[s, a, sp] + discount_rate * np.max(Q_prev[sp]))    for sp in range(3)])\n", "\n\n", "这是完整的代码，运行的环境是jupyter，python版本是3.6.5", "\n\n", " import numpy as np\nnan = np.nan\nT = np.array([[[0.7,0.3,0.0],[1.0,0.0,0.0],[0.8,0.2,0.0]],\n              [[0.0,1.0,0.0],[nan,nan,nan],[0.0,0.0,1.0]],\n              [[nan,nan,nan],[0.8,0.1,0.1],[nan,nan,nan]]\n             ])\nR = np.array([[[10.,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0]],\n              [[10.,0.0,0.0],[nan,nan,nan],[0.0,0.0,-50.0]],\n              [[nan,nan,nan],[40.0,0.0,0.0],[nan,nan,nan]]\n             ])\npossible_actions = [[0,1,2],[0,2],[1]]\n\nQ = np.full((3, 3), -np.inf)  # -inf 对应着不可能的动作 \nfor state, actions in enumerate(possible_actions):    \n    Q[state, actions] = 0.0  # 对所有可能的动作初始化为0.0\nlearning_rate = 0.01 \ndiscount_rate = 0.95 \nn_iterations = 100\nfor iteration in range(n_iterations):   \n    Q_prev = Q.copy()    \n    for s in range(3):        \n        for a in possible_actions[s]:            \n            Q[s, a] = np.sum([T[s, a, sp] * (R[s, a, sp] + discount_rate * np.max(Q_prev[sp]))  \n            for sp in range(3)])\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我感觉你写得不对&amp;#xff0c;以下代码供你参考&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as  plt\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.metrics import multilabel_confusion_matrix\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.metrics import classification_report,roc_auc_score\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.ensemble import RandomForestClassifier\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.ensemble import RandomForestRegressor\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.datasets import make_blobs\n\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn import svm\n\n&lt;span class=\"hljs-comment\"&gt;#使用最初的X和y&amp;#xff0c;样本不均衡的这个模型&lt;/span&gt;\nclass_1 &amp;#61; 500 #类别1有500个样本\nclass_2 &amp;#61; 50 #类别2只有50个\ncenters &amp;#61; [[0.0, 0.0], [2.0, 2.0]] #设定两个类别的中心\nclusters_std &amp;#61; [1.5, 0.5] #设定两个类别的方差&amp;#xff0c;通常来说&amp;#xff0c;样本量比较大的类别会更加松散\nX, y &amp;#61; make_blobs(n_samples&amp;#61;[class_1, class_2],\n                  &lt;span class=\"hljs-attribute\"&gt;centers&lt;/span&gt;&amp;#61;centers,\n                  &lt;span class=\"hljs-attribute\"&gt;cluster_std&lt;/span&gt;&amp;#61;clusters_std,\n                  &lt;span class=\"hljs-attribute\"&gt;random_state&lt;/span&gt;&amp;#61;0, &lt;span class=\"hljs-attribute\"&gt;shuffle&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;)\n\nplt.scatter(X[:, 0], X[:, 1], &lt;span class=\"hljs-attribute\"&gt;c&lt;/span&gt;&amp;#61;y, &lt;span class=\"hljs-attribute\"&gt;cmap&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;rainbow&amp;#34;&lt;/span&gt;,s&amp;#61;10)\n\n\nclf_proba &amp;#61; RandomForestClassifier(n_estimators &amp;#61; 8).fit(X,y)\ny_predict &amp;#61; clf_proba.predict(X)\nypredict &amp;#61; clf_proba.predict_proba(X)\n\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.metrics import roc_curve\nFPR, recall, thresholds &amp;#61; roc_curve(y,ypredict[:,1], &lt;span class=\"hljs-attribute\"&gt;pos_label&lt;/span&gt;&amp;#61;1)\n\n\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.metrics import roc_auc_score as AUC&lt;span class=\"hljs-built_in\"&gt;\narea &lt;/span&gt;&amp;#61; AUC(y,ypredict[:,1])\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(area)\n\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.metrics import confusion_matrix\ncm&amp;#61; confusion_matrix(y, y_predict)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(cm)\n\nplt.figure()\nplt.plot(FPR, recall, &lt;span class=\"hljs-attribute\"&gt;color&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;,\n         &lt;span class=\"hljs-attribute\"&gt;label&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;ROC curve (area &amp;#61; %0.4f)&amp;#39;&lt;/span&gt; % area)\nplt.plot([0, 1], [0, 1], &lt;span class=\"hljs-attribute\"&gt;color&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;black&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-attribute\"&gt;linestyle&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;--&amp;#39;&lt;/span&gt;)\nplt.xlim([-0.05, 1.05])\nplt.ylim([-0.05, 1.05])\nplt.xlabel(&lt;span class=\"hljs-string\"&gt;&amp;#39;False Positive Rate&amp;#39;&lt;/span&gt;)\nplt.ylabel(&lt;span class=\"hljs-string\"&gt;&amp;#39;Recall&amp;#39;&lt;/span&gt;)\nplt.title(&lt;span class=\"hljs-string\"&gt;&amp;#39;Receiver operating characteristic example&amp;#39;&lt;/span&gt;)\nplt.legend(&lt;span class=\"hljs-attribute\"&gt;loc&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;lower right&amp;#34;&lt;/span&gt;)\nplt.show()\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["ROC曲线画出来混乱线", ["问题遇到的现象和发生背景", "\n", "\n", "今天在做建模分析的时候，用到随机森林处理多分类问题，最后画出的ROC曲线很奇怪，想知道这是什么原因造成的。", "\n", "\n", "问题相关代码", "\n", "import numpy as np\n", "from", " sklearn.metrics import multilabel_confusion_matrix\n", "from", " sklearn.metrics import classification_report,roc_auc_score\n\npred_y_quant = rf.predict_proba(Xtest)\ncon = multilabel_confusion_matrix(Ytest,rf.predict(Xtest),labels=[1.0,2.0,3.0,4.0,5.0])\n", "print", "(classification_report(Ytest,rf.predict(Xtest),labels=[1.0,2.0,3.0,4.0,5.0]))\n", "# macro avg       0.52      0.40      0.42      4646 weighted avg       0.71      0.72      0.70      4646", "\n", "#AUC", "\nAUC = roc_auc_score(np.array(Ytest),np.array(pred_y_quant),", "multi_class", "=", "'ovo'", ")\n", "print", "(", "'AUC:'", ",auc)\npred_y_score = []\n", "for", " i ", "in", " pred_y_quant:\n    pred_y_score.append(max(i))\n", "#ROC", "\nplt.figure()\nlw = 2\nplt.plot(np.array(Ytest),np.array(pred_y_score),", "color", "=", "'darkorange'", ",\n         ", "lw", "=lw,label = ", "'randomforest'", ")\nplt.plot(", "color", "=", "'navy'", ", ", "lw", "=lw, ", "linestyle", "=", "'--'", ")\nplt.xlim([0.0, 5.0])\n", "#plt.ylim([0.0, 1.05])", "\nplt.xlabel(", "'False Positive Rate'", ")\nplt.ylabel(", "'True Positive Rate'", ")\nplt.title(", "'Receiver operating characteristic example'", ")\nplt.legend(", "loc", "=", "\"lower right\"", ")\nplt.show()\n", "\n", "运行结果及报错内容", "\n", "\n", "我想要达到的结果", "\n", "\n", "画出正确的ROC曲线", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;发布/订阅&lt;br /&gt;sensor_msgs::Image&lt;br /&gt;或&lt;br /&gt;sensor_msgs::CompressedImage&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["ROS编写服务问题：图像处理相关", ["这是我写的图像处理python代码，基于opencv。现在想把它封装成一个ros服务。请问各位该如何去改呢？", "以下是源码。", "\n", " \nimport cv2\nimport numpy ", "as", " np\nimport os\n \n \ndef imgdetect(image):\n    blue_lower = np.", "array", "(", "[", "100", ", ", "50", ", ", "50", "]", ")\n    blue_upper = np.", "array", "(", "[", "124", ", ", "255", ", ", "255", "]", ")\n    hsv = cv2.cvt", "Color(", "image", ", ", "cv2", ".COLOR_BGR2HSV)", "\n    mask = cv2.", "in", "Range(", "hsv", ", ", "lowerb", "=", "blue_lower", ", ", "upperb", "=", "blue_upper", ")", "\n    Canny = cv2.", "Canny(", "mask", ", 9, 9)", "\n    circle = cv2.", "HoughCircles(Canny, ", "cv2", ".HOUGH_GRADIENT, 1, 100, ", "param1", "=100, ", "param2", "=30, ", "minRadius", "=100, ", "maxRadius", "=200)", "\n    return circle\n \n \nmyList = os.listdir('ImagesQuery')\n \ncap = cv2.", "VideoCapture(0)", "\n \n", "while", " True:\n    success, image = cap.read", "()", "\n    imgOriginal = image.copy", "()", "\n    cir = imgdetect(image)\n    ", "if", " not cir is None:\n        cir = np.uint16(np.around(cir))\n        max_r, max_i = ", "0", ", ", "0", "\n        ", "for", " i ", "in", " range(len(cir", "[:, :, ", "2", "]", "[", "0", "]", ")):\n            ", "if", " cir", "[:, :, ", "2", "]", "[", "0", "]", "[", "i", "]", " > ", "50", " ", "and", " cir", "[:, :, ", "2", "]", "[", "0", "]", "[", "i", "]", " > max_r:\n                max_i = i\n                max_r = cir", "[:, :, ", "2", "]", "[", "0", "]", "[", "i", "]", "\n        x, y, r = cir", "[:, :, :]", "[", "0", "]", "[", "max_i", "]", "\n        ", "if", " y > r ", "and", " x > r:\n            square = imgOriginal", "[", "y", " - ", "r", ":", "y", " + ", "r", ", ", "x", " - ", "r", ":", "x", " + ", "r", "]", "\n            img_gray = cv2.cvt", "Color(", "square", ", ", "cv2", ".COLOR_BGR2GRAY)", "\n            cv2.imshow('img_gray', img_gray)\n            ", "for", " i ", "in", " range(", "4", "):\n                template = cv2.imread('ImagesQuery/' + myList", "[", "i", "]", ")\n                template = cv2.cvt", "Color(", "template", ", ", "cv2", ".COLOR_BGR2GRAY)", "\n                res = cv2.", "match", "Template(", "img_gray", ", ", "template", ", ", "cv2", ".TM_CCORR_NORMED)", "\n                (_, score, _, _) = cv2.min", "MaxLoc(", "res", ")", "\n                threshold = ", "0.8", "\n                h, w = template.shape", "[:", "2", "]", "\n                ", "if", " score > ", "0.93", ":\n                    cv2.rectangle(imgOriginal, (x - r - ", "5", ", y - r - ", "5", "), (x + r + ", "5", ", y + r + ", "5", "), (", "0", ", ", "255", ", ", "0", "), ", "2", ")\n                    ", "if", " i", " == ", "0", ":\n                        cv2.put", "Text(", "imgOriginal", ", 'Back', (", "x", ", ", "y", " + ", "r", " + 10)", ", cv2.FONT_HERSHEY_DUPLEX, ", "1", ", (", "255", ", ", "0", ", ", "0", "), ", "2", ")\n                    ", "if", " i", " == ", "1", ":\n                        cv2.put", "Text(", "imgOriginal", ", 'Forward', (", "x", ", ", "y", " + ", "r", " + 10)", ", cv2.FONT_HERSHEY_DUPLEX, ", "1", ", (", "255", ", ", "0", ", ", "0", "), ", "2", ")\n                    ", "if", " i", " == ", "2", ":\n                        cv2.put", "Text(", "imgOriginal", ", 'Left', (", "x", ", ", "y", " + ", "r", " + 10)", ", cv2.FONT_HERSHEY_DUPLEX, ", "1", ", (", "255", ", ", "0", ", ", "0", "), ", "2", ")\n                    ", "if", " i", " == ", "3", ":\n                        cv2.put", "Text(", "imgOriginal", ", 'Right', (", "x", ", ", "y", " + ", "r", " + 10)", ", cv2.FONT_HERSHEY_DUPLEX, ", "1", ", (", "255", ", ", "0", ", ", "0", "), ", "2", ")\n    cv2.imshow('img', imgOriginal)\n    cv2.wait", "Key(1)", "\n \n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;lst&amp;#61;[]\nfor &lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;in contours:\n    &lt;span class=\"hljs-comment\"&gt;# 显示图片&lt;/span&gt;\n    lst.append(temp)\n&lt;span class=\"hljs-keyword\"&gt;both &lt;/span&gt;&amp;#61; np.hstack(lst)\ncv2.imshow(&lt;span class=\"hljs-string\"&gt;&amp;#39;line&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;both)\n&lt;/span&gt;cv2.&lt;span class=\"hljs-keyword\"&gt;waitKey()&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["想用for循环遍历图中的两个轮廓，但是只能显示一半", ["问题遇到的现象和发生背景", "\n", "\n", "问题相关代码，请勿粘贴截图", "\n", "import", " cv2\n", "import", " numpy as np\n\n", "imagepath", " = 'E:/", "149", "_v4.png'\n", "# imagepath = ''", "\n", "img", " = cv2.imread(imagepath, ", "1", ")\n", "gray", " = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n", "# 二值化", "\nret, ", "thresh", " = cv2.threshold(gray, ", "127", ", ", "255", ", cv2.THRESH_BINARY)\n", "# 图片轮廓", "\nimage, contours, ", "hierarchy", " = cv2.findContours(thresh, ", "2", ", ", "1", ")\n\nprint(len(contours))\nfor i ", "in", " range(len(contours)):\n    ", "if", " len(contours[i]) < ", "10", ":        ", "# 删除图中可能存在的独立小凸包", "\n        contours.remove(contours[i])\n\nfor j ", "in", " contours:\n    ", "cnt", " = j\n\n    ", "# 寻找凸包并绘制凸包（轮廓）", "\n    ", "hull", " = cv2.convexHull(cnt)\n    ", "# hull = np.asarray(hull)", "\n\n    ", "length", " = len(hull)-", "1", "\n    ", "# print(length)", "\n    ", "dis_list", " = []\n    for k ", "in", " range(length):\n        ", "dis", " = np.linalg.norm(hull[k] - hull[k + ", "1", "])\n        ", "if", " dis < ", "100", ":\n            dis_list.append(hull[k])\n            length ", "-=", " ", "1", "\n        ", "# new_hull = np.delete(hull, k + 1, axis=0)", "\n        ", "# print(dis)", "\n\n        ", "# dis_list.append(dis)", "\n    ", "dis_list", " = np.asarray(dis_list)\n\n    ", "temp", " = np.zeros(img.shape, np.uint8)        ", "# 创建一个黑色的背景图", "\n    cv2.polylines(temp, [dis_list], True, (", "255", ", ", "255", ", ", "2", "), ", "2", ")\n    ", "# cv2.polylines(temp, [s_dis_list], True, (255, 5, 255), 2)", "\n    ", "# cv2.polylines(img, [hull], True, (0, 255, 0), 2)", "\n    ", "# 显示图片", "\n    cv2.imshow('line', temp)\n    cv2.waitKey()\n", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "如何能让两个轮廓在一起显示"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个是生成网格点矩阵的。&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/818302064646195.png\" /&gt;&lt;/p&gt;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/lllxxq141592654/article/details/81532855\" id=\"textarea_1646460038521_1646460218147_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/lllxxq141592654/article/details/81532855&lt;/span&gt;&lt;/a&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["matplotlib三位绘图的中meshgrid()函数的使用", ["import matplotlib", ".pyplot", " as plt\nimport numpy as np\n\nplt", ".rcParams", "[", "'font.sans-serif'", "]", " = ", "[", "'Simhei'", "]", "\nplt", ".rcParams", "[", "'axes.unicode_minus'", "]", " = False\n\nax = plt", ".axes", "(projection=", "'3d'", ")\n\nx = np", ".linspace", "(-", "10", ", ", "10", ", ", "500", ")\ny = np", ".linspace", "(-", "10", ", ", "10", ", ", "300", ")\nX, Y = np", ".meshgrid", "(x, y)\nz = (", "1", "/", "4", ")*X**", "2", "-(", "1", "/", "2", ")*Y**", "2", "\n\nax", ".plot_surface", "(X, Y, z, cmap=", "'cool'", ")\nplt", ".axis", "(", "'off'", ")\n\nplt", ".show", "()\n\n", "\n", "如图 制作三维表面图像时为什么需要进行", "\n", "\n", "\n", "X", ", ", "Y", " = np.meshgrid(x, y)\n\n", "\n", "的操作"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;导包的代码我省略了&amp;#xff0c;里面主要修改的是数据需要归一化、权重系统weight_init_std&amp;#61;0.01修改为了1、学习率降低(修改为0.05)。如果想做的更好一些&amp;#xff0c;可以增加dropout&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-comment\"&gt;# 显示图形&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;img_show&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;img&lt;/span&gt;):\n    pil_img &amp;#61; Image.fromarray(np.uint8(img))\n    pil_img.show()\n \n \n&lt;span class=\"hljs-comment\"&gt;# 2层神经网络的类&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;TwoLayerNet&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;__init__&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, input_size, hidden_size, output_size, weight_init_std&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;/span&gt;):\n        self.params &amp;#61; {}\n        self.params[&lt;span class=\"hljs-string\"&gt;&amp;#39;w1&amp;#39;&lt;/span&gt;] &amp;#61; weight_init_std * np.random.randn(input_size, hidden_size)\n        self.params[&lt;span class=\"hljs-string\"&gt;&amp;#39;b1&amp;#39;&lt;/span&gt;] &amp;#61; np.zeros(hidden_size)\n        self.params[&lt;span class=\"hljs-string\"&gt;&amp;#39;w2&amp;#39;&lt;/span&gt;] &amp;#61; weight_init_std * np.random.randn(hidden_size, output_size)\n        self.params[&lt;span class=\"hljs-string\"&gt;&amp;#39;b2&amp;#39;&lt;/span&gt;] &amp;#61; np.zeros(output_size)\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;predict&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, x&lt;/span&gt;):  &lt;span class=\"hljs-comment\"&gt;# x&amp;#61;输入&lt;/span&gt;\n        w1, w2 &amp;#61; self.params[&lt;span class=\"hljs-string\"&gt;&amp;#39;w1&amp;#39;&lt;/span&gt;], self.params[&lt;span class=\"hljs-string\"&gt;&amp;#39;w2&amp;#39;&lt;/span&gt;]&lt;span class=\"hljs-comment\"&gt;#权重&lt;/span&gt;\n        b1, b2 &amp;#61; self.params[&lt;span class=\"hljs-string\"&gt;&amp;#39;b1&amp;#39;&lt;/span&gt;], self.params[&lt;span class=\"hljs-string\"&gt;&amp;#39;b2&amp;#39;&lt;/span&gt;]&lt;span class=\"hljs-comment\"&gt;#偏移&lt;/span&gt;\n        a1 &amp;#61; np.dot(x, w1) &amp;#43; b1\n        z1 &amp;#61; sigmoid(a1)&lt;span class=\"hljs-comment\"&gt;#第一层输出&lt;/span&gt;\n        a2 &amp;#61; np.dot(z1, w2) &amp;#43; b2\n        z2 &amp;#61; softmax(a2)&lt;span class=\"hljs-comment\"&gt;#第二层输出&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; z2\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;loss&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, x, t&lt;/span&gt;):  &lt;span class=\"hljs-comment\"&gt;# x&amp;#61;输入&amp;#xff0c;t&amp;#61;监督数据&lt;/span&gt;\n        y &amp;#61; self.predict(x)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; cross_entropy_error(y, t)\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;accuracy&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, x, t&lt;/span&gt;):\n        y &amp;#61; self.predict(x)\n        y &amp;#61; np.argmax(y, axis&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        t &amp;#61; np.argmax(t, axis&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        accuracy &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(y &amp;#61;&amp;#61; t) / &lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;(x.shape[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; accuracy\n \n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;numerical_gradient&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, x, t&lt;/span&gt;):\n        loss_w &amp;#61; &lt;span class=\"hljs-keyword\"&gt;lambda&lt;/span&gt; w: self.loss(x, t)&lt;span class=\"hljs-comment\"&gt;#损失函数&lt;/span&gt;\n        grads &amp;#61; {\n            &lt;span class=\"hljs-string\"&gt;&amp;#39;w1&amp;#39;&lt;/span&gt;: numerical_gradient(loss_w, self.params[&lt;span class=\"hljs-string\"&gt;&amp;#39;w1&amp;#39;&lt;/span&gt;]),\n            &lt;span class=\"hljs-string\"&gt;&amp;#39;b1&amp;#39;&lt;/span&gt;: numerical_gradient(loss_w, self.params[&lt;span class=\"hljs-string\"&gt;&amp;#39;b1&amp;#39;&lt;/span&gt;]),\n            &lt;span class=\"hljs-string\"&gt;&amp;#39;w2&amp;#39;&lt;/span&gt;: numerical_gradient(loss_w, self.params[&lt;span class=\"hljs-string\"&gt;&amp;#39;w2&amp;#39;&lt;/span&gt;]),\n            &lt;span class=\"hljs-string\"&gt;&amp;#39;b2&amp;#39;&lt;/span&gt;: numerical_gradient(loss_w, self.params[&lt;span class=\"hljs-string\"&gt;&amp;#39;b2&amp;#39;&lt;/span&gt;])\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; grads\n \n \n&lt;span class=\"hljs-comment\"&gt;# 梯度函数&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;numerical_gradient&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;f, x&lt;/span&gt;):\n    h &amp;#61; &lt;span class=\"hljs-number\"&gt;1e-4&lt;/span&gt;\n    grad &amp;#61; np.zeros_like(x)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; idx &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(x.shape[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]):\n        tmp_val &amp;#61; x[idx]\n        x[idx] &amp;#61; tmp_val &amp;#43; h\n        fxh1 &amp;#61; f(x)\n        x[idx] &amp;#61; tmp_val - h\n        fxh2 &amp;#61; f(x)\n        grad[idx] &amp;#61; (fxh1 - fxh2) / (&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * h)&lt;span class=\"hljs-comment\"&gt;#求梯度&lt;/span&gt;\n        x[idx] &amp;#61; tmp_val&lt;span class=\"hljs-comment\"&gt;#还原x&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; grad\n \n \n&lt;span class=\"hljs-comment\"&gt;# 误差函数cross entropy error&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;cross_entropy_error&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;y, t&lt;/span&gt;):\n    delta &amp;#61; &lt;span class=\"hljs-number\"&gt;1e-7&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; -np.&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(t * np.log(y &amp;#43; delta))\n \n \n&lt;span class=\"hljs-comment\"&gt;# softmax函数&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;softmax&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;):\n    c &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(a)\n    exp_a &amp;#61; np.exp(a - c)  &lt;span class=\"hljs-comment\"&gt;# 防止溢出&lt;/span&gt;\n    sum_exp_a &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(exp_a)\n    y &amp;#61; exp_a / sum_exp_a\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; y\n \n \n&lt;span class=\"hljs-comment\"&gt;# sigmoid函数&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;sigmoid&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;):\n    out &amp;#61; a.copy()\n    sel &amp;#61; ((a &amp;gt; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;) &amp;amp; (a &amp;lt; -&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;))\n    out &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; / (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;#43; np.exp(-a))&lt;span class=\"hljs-comment\"&gt;#sigmoid计算&lt;/span&gt;\n    out[sel] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; / (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;#43; np.exp(-&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;))&lt;span class=\"hljs-comment\"&gt;#防止指数爆炸&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; out\n \n \n&lt;span class=\"hljs-comment\"&gt;# 验证集转one-hot&lt;/span&gt;\n(x_train, y_train), (x_test, y_test) &amp;#61; mnist.load_data()\ny_train &amp;#61; keras.utils.to_categorical(y_train)\ny_test &amp;#61; keras.utils.to_categorical(y_test)\n \n&lt;span class=\"hljs-comment\"&gt;# 数据改为60000*784浮点格式&lt;/span&gt;\nx_train &amp;#61; x_train.reshape(x_train.shape[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], &lt;span class=\"hljs-number\"&gt;784&lt;/span&gt;).astype(&lt;span class=\"hljs-string\"&gt;&amp;#39;float&amp;#39;&lt;/span&gt;)\nx_train &amp;#61; x_train / &lt;span class=\"hljs-number\"&gt;255.0&lt;/span&gt;\n \ntrain_loss_list &amp;#61; []\n \n&lt;span class=\"hljs-comment\"&gt;# 参数初始化&lt;/span&gt;\niters_num &amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 循环次数&lt;/span&gt;\ntrain_size &amp;#61; x_train.shape[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]  &lt;span class=\"hljs-comment\"&gt;# 总数据量&lt;/span&gt;\nbatch_size &amp;#61; &lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 每次取出的数据量&lt;/span&gt;\nlearning_rate &amp;#61; &lt;span class=\"hljs-number\"&gt;0.05&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 学习率&lt;/span&gt;\nnetwork &amp;#61; TwoLayerNet(input_size&amp;#61;&lt;span class=\"hljs-number\"&gt;784&lt;/span&gt;, hidden_size&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;, output_size&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 创建对象&lt;/span&gt;\n \n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(iters_num):\n    &lt;span class=\"hljs-comment\"&gt;# 获取mini_batch&lt;/span&gt;\n    batch_mask &amp;#61; np.random.choice(train_size, batch_size)\n    x_batch &amp;#61; x_train[batch_mask]\n    y_batch &amp;#61; y_train[batch_mask]\n \n    &lt;span class=\"hljs-comment\"&gt;# 计算梯度&lt;/span&gt;\n    grad &amp;#61; network.numerical_gradient(x_batch, y_batch)\n    &lt;span class=\"hljs-comment\"&gt;# 更新参数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; key &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#39;w1&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;b1&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;w2&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;b2&amp;#39;&lt;/span&gt;):\n        network.params[key] &amp;#61; network.params[key] - learning_rate * grad[key]\n    &lt;span class=\"hljs-comment\"&gt;# 损失量&lt;/span&gt;\n    loss &amp;#61; network.loss(x_batch, y_batch)\n    train_loss_list.append(loss)\n \n&lt;span class=\"hljs-comment\"&gt;# 损失量图像&lt;/span&gt;\nx &amp;#61; np.arange(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, iters_num / &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0.1&lt;/span&gt;)\ny &amp;#61; np.array(train_loss_list)\nplt.plot(x, y)\nplt.show()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/697929195956189.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Mnist两层神经网络梯度一直为零", ["  最近开始学习机器学习，在编写简单的二层神经网络的过程中，发现损失函数一直居高不下，然后看了一下损失函数的梯度，发现梯度一直都是零。", "  我在途中试着改变损失函数，将cross entropy error函数换成mean_squared_error函数；又试着改变激活函数:sigmoid函数，Relu函数，softmax函数都试着用过了；然后又试着改变训练次数，mini_batch的大小，学习率，可惜都无济于事，我希望能够找到问题所在。以下是我的完整代码。希望有大佬能指点一下迷津。", "\n", "from", " keras.datasets ", "import", " mnist\n", "import", " keras\n", "import", " numpy ", "as", " np\n", "from", " PIL ", "import", " Image\n", "import", " matplotlib.pylab ", "as", " plt\n\n\n", "# 显示图形", "\n", "def", " ", "img_show", "(", "img", "):\n    pil_img = Image.fromarray(np.uint8(img))\n    pil_img.show()\n\n\n", "# 2层神经网络的类", "\n", "class", " ", "TwoLayerNet", ":\n    ", "def", " ", "__init__", "(", "self, input_size, hidden_size, output_size, weight_init_std=", "0.01", "):\n        self.params = {}\n        self.params[", "'w1'", "] = weight_init_std * np.random.randn(input_size, hidden_size)\n        self.params[", "'b1'", "] = np.zeros(hidden_size)\n        self.params[", "'w2'", "] = weight_init_std * np.random.randn(hidden_size, output_size)\n        self.params[", "'b2'", "] = np.zeros(output_size)\n\n    ", "def", " ", "predict", "(", "self, x", "):  ", "# x=输入", "\n        w1, w2 = self.params[", "'w1'", "], self.params[", "'w2'", "]", "#权重", "\n        b1, b2 = self.params[", "'b1'", "], self.params[", "'b2'", "]", "#偏移", "\n        a1 = np.dot(x, w1) + b1\n        z1 = sigmoid(a1)", "#第一层输出", "\n        a2 = np.dot(z1, w2) + b2\n        z2 = softmax(a2)", "#第二层输出", "\n        ", "return", " z2\n\n    ", "def", " ", "loss", "(", "self, x, t", "):  ", "# x=输入，t=监督数据", "\n        y = self.predict(x)\n        ", "return", " cross_entropy_error(y, t)\n\n    ", "def", " ", "accuracy", "(", "self, x, t", "):\n        y = self.predict(x)\n        y = np.argmax(y, axis=", "1", ")\n        t = np.argmax(t, axis=", "1", ")\n        accuracy = np.", "sum", "(y == t) / ", "float", "(x.shape[", "0", "])\n        ", "return", " accuracy\n\n    ", "def", " ", "numerical_gradient", "(", "self, x, t", "):\n        loss_w = ", "lambda", " w: self.loss(x, t)", "#损失函数", "\n        grads = {\n            ", "'w1'", ": numerical_gradient(loss_w, self.params[", "'w1'", "]),\n            ", "'b1'", ": numerical_gradient(loss_w, self.params[", "'b1'", "]),\n            ", "'w2'", ": numerical_gradient(loss_w, self.params[", "'w2'", "]),\n            ", "'b2'", ": numerical_gradient(loss_w, self.params[", "'b2'", "])\n        }\n        ", "return", " grads\n\n\n", "# 梯度函数", "\n", "def", " ", "numerical_gradient", "(", "f, x", "):\n    h = ", "1e-4", "\n    grad = np.zeros_like(x)\n    ", "for", " idx ", "in", " ", "range", "(x.shape[", "0", "]):\n        tmp_val = x[idx]\n        x[idx] = tmp_val + h\n        fxh1 = f(x)\n        x[idx] = tmp_val - h\n        fxh2 = f(x)\n        grad[idx] = (fxh1 - fxh2) / (", "2", " * h)", "#求梯度", "\n        x[idx] = tmp_val", "#还原x", "\n    ", "return", " grad\n\n\n", "# 误差函数cross entropy error", "\n", "def", " ", "cross_entropy_error", "(", "y, t", "):\n    delta = ", "1e-7", "\n    ", "return", " -np.", "sum", "(t * np.log(y + delta))\n\n\n", "# softmax函数", "\n", "def", " ", "softmax", "(", "a", "):\n    c = np.", "max", "(a)\n    exp_a = np.exp(a - c)  ", "# 防止溢出", "\n    sum_exp_a = np.", "sum", "(exp_a)\n    y = exp_a / sum_exp_a\n    ", "return", " y\n\n\n", "# sigmoid函数", "\n", "def", " ", "sigmoid", "(", "a", "):\n    out = a.copy()\n    sel = ((a > ", "100", ") & (a < -", "100", "))\n    out = ", "1", " / (", "1", " + np.exp(-a))", "#sigmoid计算", "\n    out[sel] = ", "1", " / (", "1", " + np.exp(-", "100", "))", "#防止指数爆炸", "\n    ", "return", " out\n\n\n", "# 验证集转one-hot", "\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\ny_train = keras.utils.to_categorical(y_train)\ny_test = keras.utils.to_categorical(y_test)\n\n", "# 数据改为60000*784浮点格式", "\nx_train = x_train.reshape(x_train.shape[", "0", "], ", "784", ").astype(", "'float'", ")\n\ntrain_loss_list = []\n\n", "# 参数初始化", "\niters_num = ", "100", "  ", "# 循环次数", "\ntrain_size = x_train.shape[", "0", "]  ", "# 总数据量", "\nbatch_size = ", "32", "  ", "# 每次取出的数据量", "\nlearning_rate = ", "0.1", "  ", "# 学习率", "\nnetwork = TwoLayerNet(input_size=", "784", ", hidden_size=", "100", ", output_size=", "10", ")  ", "# 创建对象", "\n\n", "for", " i ", "in", " ", "range", "(iters_num):\n    ", "# 获取mini_batch", "\n    batch_mask = np.random.choice(train_size, batch_size)\n    x_batch = x_train[batch_mask]\n    y_batch = y_train[batch_mask]\n\n    ", "# 计算梯度", "\n    grad = network.numerical_gradient(x_batch, y_batch)\n    ", "# 更新参数", "\n    ", "for", " key ", "in", " (", "'w1'", ", ", "'b1'", ", ", "'w2'", ", ", "'b2'", "):\n        network.params[key] = network.params[key] - learning_rate * grad[key]\n    ", "# 损失量", "\n    loss = network.loss(x_batch, y_batch)\n    train_loss_list.append(loss)\n\n", "# 损失量图像", "\nx = np.arange(", "0", ", iters_num / ", "10", ", ", "0.1", ")\ny = np.array(train_loss_list)\nplt.plot(x, y)\nplt.show()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这个没用输出啊&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于正态性检验的问题，如何解决？", ["正态性检验", "import pandas as pd", "import numpy as np", "from scipy.stats import shapiro", "from pandas import Series, DataFrame", "data=pd.read_excel('D:/trial/data.xlsx')", "shapiro(data.ALT)", "代码如上，运行后无报错，但也无任何结果显示，请问错在那里？感谢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;相当于一个没有名字的变量&amp;#xff0c;举几个例子&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;a &amp;#61; [&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;_, b &amp;#61; a&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;b&lt;/span&gt;\n2\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;&lt;span class=\"hljs-comment\"&gt;#相当于 b&amp;#61;a[1]&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;a &amp;#61; [&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;]&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;_, *b &amp;#61; a&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;b&lt;/span&gt;\n[2, 3, 4]\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;_,_, *b &amp;#61; a&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;b&lt;/span&gt;\n[3, 4]\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;_,_,_,b &amp;#61; a&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;b&lt;/span&gt;\n4\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["函数里面下划线逗号   _,    有什么作用啊？", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "def", " buy_lower(stock):\n    ", "#设置一个一行两列的可视化图表", "\n    ", "_", ", axs=plt.subplots(nrows=", "1", ",ncols=", "2", ",figsize=(", "16", ",", "5", "))\n\n    ", "#绘制前450天的股票走势图，np.cumsum():序列连续求和", "\n    ", "axs", "[", "0", "].plot(np.arange(", "0", ",days-keep_days),\n               ", "stock_day_train", "[stock].cumsum())\n\n\n", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "没有加下划线逗号   _,   就出现上面的报错，加了就能正常运行打印出来图，所以下划线逗号到底是代表什么意思呢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;所谓信息熵描述了信息源各可能事件发生的不确定性。试想若某人仅在一家药店购药&amp;#xff0c;则他的行为是确定的&amp;#xff1b;而若在多家药店购药&amp;#xff0c;则存在一定的不确定性&amp;#xff0c;需要通过博主上面给出的公式计算。以上就是对这道题的理解。&lt;/p&gt;\n&lt;p&gt;解题思路&amp;#xff1a;&lt;br /&gt;首先&amp;#xff0c;判断每一个buyer&amp;#xff08;BID00i&amp;#xff09;是否在一家药店购药&amp;#xff0c;也就是是判断每一列的非零值是否不唯一&amp;#xff1b;&lt;br /&gt;第二&amp;#xff0c;若buyer仅在一家药店购药&amp;#xff0c;则范围信息熵值为0&amp;#xff1b;&lt;br /&gt;第三&amp;#xff0c;若buyer在多家药店购药&amp;#xff0c;则按上述公式计算。给一个简单的编程思路&amp;#xff1a;首先循环遍历每列&amp;#xff0c;把非零值找出来&amp;#xff0c;代入np.log2(a) * a * (-1)计算&amp;#xff0c;然后将本列所有计算好的值求sum&amp;#xff0c;即为该列对应的buyer的信息熵值。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python/pandas 计算 数值 信息熵值", ["想计算信息熵值，结果 output的是 nan", "问题准备：", "图为sheet_new dataframe 格式", "\n", "举例：", "若某甲仅在一家药店留有购药记录，其信息熵值为0，因其p=1。", "若某甲在不同药店的购药金额为[10,30,60]，其信息熵值为", "'''-(0.1 * np.log2(0.1) + 0.3 * np.log2(0.3) + 0.6 * np.log2(0.6))'''，即1.295461844238322。", "\n", "思路：", "\n", "#想计算每一个 Buyer 的信息熵值", "\n", "#想定义 信息熵值", "\ndef infor(sheet_new):\n    ", "a", " = sheet_new.values / ", "100", "\n    ", "return", " ", "sum", "(np.", "log2", "(", "a", ") * ", "a", " * (", "-1", "))\n", "\n", "#尝试计算BID0001 的信息熵值", "\n", "print", "(infor(sheet_new.BID0001))\n", "#输出结果为   nan 并有警告 但没报错", "\n", "\n", "可能我的思路有误", "希望大家帮忙解答", "谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;zip(list1,list2)是返回一个迭代对象, 每次迭代时会同时读取list1,list2两个列表中的各个元素打包成一个元组,&lt;br /&gt;元组中有两个元素分别是list1,list2两个列表中相同下标的元素,比如&amp;#xff1a;&lt;br /&gt;list1 &amp;#61; [&amp;#34;key1&amp;#34;,&amp;#34;key2&amp;#34;,&amp;#34;key3&amp;#34;]&lt;br /&gt;list2 &amp;#61; [&amp;#34;value1&amp;#34;,&amp;#34;value2&amp;#34;,&amp;#34;value3&amp;#34;]&lt;br /&gt;print(list( zip(list1,list2)))&lt;br /&gt;结果为&lt;br /&gt;[(&amp;#39;key1&amp;#39;, &amp;#39;value1&amp;#39;), (&amp;#39;key2&amp;#39;, &amp;#39;value2&amp;#39;), (&amp;#39;key3&amp;#39;, &amp;#39;value3&amp;#39;)]&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;d &amp;#61; {n:v for n,v in zip(list1,list2)}&lt;br /&gt;是字典生成式,遍历zip(list1,list2)返回的迭代对象&amp;#xff0c;&lt;br /&gt;每次遍历将之前打包成的元组中的两个元素拆开分别赋值给n和v&amp;#xff0c;&lt;br /&gt;n:v是用n做为字典的键&amp;#xff0c;用v做为字典的值&amp;#xff0c;生成字典。&lt;br /&gt;d的结果为&lt;br /&gt;{&amp;#39;key1&amp;#39;: &amp;#39;value1&amp;#39;, &amp;#39;key2&amp;#39;: &amp;#39;value2&amp;#39;, &amp;#39;key3&amp;#39;: &amp;#39;value3&amp;#39;}\n &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python在机器学习中的循环的语法问题", ["print(\"Sample counts per class:\\n{}\".format(", "     {n: v for n, v in zip(cancer.target_names, np.bincount(cancer.target))}))", "\n", "中的  n:v for n,v in zip() 这句语法怎么理解  ", "\n", "尤其是其中的 n:v 这里"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你题目的解答代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; os\n&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; matplotlib\n&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; matplotlib.pyplot as plt\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.rcParams[&amp;#39;axes.labelsize&amp;#39;] &amp;#61; &lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.rcParams[&amp;#39;xtick.labelsize&amp;#39;] &amp;#61; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.rcParams[&amp;#39;ytick.labelsize&amp;#39;] &amp;#61; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;np&lt;/span&gt;.random.seed(&lt;span class=\"hljs-number\"&gt;42&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; warnings\n&lt;span class=\"hljs-attribute\"&gt;warnings&lt;/span&gt;.filterwarnings(&amp;#39;ignore&amp;#39;)\n\n&lt;span class=\"hljs-attribute\"&gt;x&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*np.random.uniform(-&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, size&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;X&lt;/span&gt; &amp;#61; x.reshape(&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;y&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;*X**&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#43;X&amp;#43;np.random.randn(&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.scatter(x, y)\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.axis([-&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,-&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;])\n\n&lt;span class=\"hljs-attribute\"&gt;X_poly&lt;/span&gt; &amp;#61; np.hstack([X, X**&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])\n\n\n&lt;span class=\"hljs-attribute\"&gt;from&lt;/span&gt; sklearn.linear_model import LinearRegression\n\n&lt;span class=\"hljs-attribute\"&gt;lin_reg&lt;/span&gt; &amp;#61; LinearRegression()\n&lt;span class=\"hljs-attribute\"&gt;lin_reg&lt;/span&gt;.fit(X_poly, y)\n&lt;span class=\"hljs-attribute\"&gt;y_predict&lt;/span&gt; &amp;#61; lin_reg.predict(X_poly)\n\n&lt;span class=\"hljs-comment\"&gt;# 由于x是乱的&amp;#xff0c;所以应该进行排序&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.plot(np.sort(x), y_predict[np.argsort(x)], color&amp;#61;&amp;#39;r&amp;#39;)\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.show()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/514557029156142.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["补全代码生成一个多项式回归曲线 并对代码进行简单的注释", ["import numpy as np", "import os", "import matplotlib", "import matplotlib.pyplot as plt", "plt.rcParams['axes.labelsize'] = 14", "plt.rcParams['xtick.labelsize'] = 12", "plt.rcParams['ytick.labelsize'] = 12", "np.random.seed(42)", "import warnings", "warnings.filterwarnings('ignore')", "\n", "x = 2", "np.random.uniform(-3, 3, size=100)", "X = x.reshape(100, 1)", "y = 0.5", "X**2+X+np.random.randn(100,1)", "\n", "plt.scatter(x, y)", "plt.axis([-3,3,-10,10])", "plt.show()", "\n", "X_poly = np.hstack([X, X**2])", "\n", "补全代码生成一个多项式回归曲线 并对上述各行代码进行简单的注释"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;看出问题了吗&amp;#xff1f;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/941090876046112.jpg\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python 大小写字母变量会影响迭代吗", ["问题遇到的现象和发生背景", "\n", "第一段代码其中变量x,y1,y2都是大写 能正常运行 没有报错", "\n", "问题相关代码，请勿粘贴截图", "\n", "import matplotlib.pyplot as plt\nimport numpy as np\nn=", "12", "\n", "X", "=np.arange(n)\n", "Y", "1", "=(", "1", "-", "X", "/float(n))*np.random.uniform(", "0", ".5", ",", "1", ".0", ",n)\n", "Y", "2", "=(", "1", "-", "X", "/float(n))*np.random.uniform(", "0", ".5", ",", "1", ".0", ",n)\nplt.bar(", "X", ",+", "Y", "1", ",facecolor=", "'#9966ff'", ",edgecolor=", "'white'", ")\nplt.bar(", "X", ",-", "Y", "2", ",facecolor=", "'#ff9966'", ",edgecolor=", "'white'", ")\nplt.xlim(", "-.5", ",n)\nplt.ylim(", "-1.25", ",", "1", ".25", ")\nfor x,y in zip(", "X", ",", "Y", "1", "):\n        plt.text(x,y+", "0", ".05", ",", "'%.2f'", "%y,ha=", "'center'", ",va=", "'bottom'", ")\nfor x,y in zip(", "X", ",", "Y", "2", "):\n        plt.text(x,-y", "-0.05", ",", "'%.2f'", "%y,ha=", "'center'", ",va=", "'top'", ")\nprint(", "Y", "1", ")\nprint(", "Y", "2", ")\nplt.show()\n\n", "\n", "但是如果把x，y1，y2改成小写 就会报错代码如下", "\n", "import", " matplotlib.pyplot as plt\n", "import", " numpy as np\n", "n", "=", "12", "\n", "x", "=np.arange(n)\n", "y1", "=(", "1", "-x/float(n))*np.random.uniform(", "0", ".", "5", ",", "1", ".", "0", ",n)\n", "y2", "=(", "1", "-x/float(n))*np.random.uniform(", "0", ".", "5", ",", "1", ".", "0", ",n)\n", "plt", ".bar(x,+y1,facecolor='#", "9966", "ff',edgecolor='white')\n", "plt", ".bar(x,-y2,facecolor='#ff9966',edgecolor='white')\n", "plt", ".xlim(-.", "5", ",n)\n", "plt", ".ylim(-", "1", ".", "25", ",", "1", ".", "25", ")\n", "for", " x,y in zip(x,y1):\n        ", "plt", ".text(x,y+", "0", ".", "05", ",'%.", "2", "f'%y,ha='center',va='bottom')\n", "for", " x,y in zip(x,y2):\n        ", "plt", ".text(x,-y-", "0", ".", "05", ",'%.", "2", "f'%y,ha='center',va='top')\n\n", "plt", ".show()\n\n", "\n", "报错如下", "\n", "\n    for ", "x", ",", "y in zip(", "x", ",", "y", "2", "):\nTypeError: zip argument ", "#1", " must support iteration\n"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;This should work for you:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$np = $_POST[\"np\"]; // `sky` for example\n$a = \"inc/\" . $np . \".php\";\n$new = fopen($a, \"w\") or die(\"Unable to open file!\");\n$str='$np = \\'' . $np . \"';\";\nfwrite($new, $str);\nfclose($new);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The problem was that you are using &lt;code&gt;\"&lt;/code&gt; to define the string &lt;code&gt;$str&lt;/code&gt;. Therefore, the &lt;strong&gt;content&lt;/strong&gt; of &lt;code&gt;$np&lt;/code&gt; was printed instead of the string &lt;code&gt;'$np'&lt;/code&gt;.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何在新的php文件中编写php代码", ["\n\n", "$np = $_POST[\"np\"]; // `sky` for example\n$a = \"inc/\" . $np . \".php\";\n$new = fopen($a, \"w\") or die(\"Unable to open file!\");\n$str=\"$np='\" . $np . \"';\";\nfwrite($new, $str);\nfclose($new);\n", "\n\n", "I need to create a new ", "inc/.sky.php", " file and write the following inside it:", "\n\n", "$np = 'sky';\n", "\n\n", "But what I get is:", "\n\n", "sky='sky';\n", "\n\n", "Any idea?", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;下有代码&amp;#xff0c;可直接复制使用。如有帮助&amp;#xff0c;敬请采纳&amp;#xff0c;你的采纳是我前进的动力&amp;#xff0c;O(∩_∩)O谢谢&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff01;&lt;br /&gt;路过的朋友也可以点个赞~(≧▽≦)/~&lt;/strong&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n\ndf &amp;#61; pd.read_csv(&lt;span class=\"hljs-string\"&gt;r&amp;#39;C:\\Users\\Administrator\\Desktop\\1.csv&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(df, &lt;span class=\"hljs-built_in\"&gt;type&lt;/span&gt;(df))\nx &amp;#61; df.iloc[:&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;][&lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;]\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(x, &lt;span class=\"hljs-built_in\"&gt;type&lt;/span&gt;(x))\n\nx &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;.join(x.tolist()).replace(&lt;span class=\"hljs-string\"&gt;&amp;#39;][&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;).replace(&lt;span class=\"hljs-string\"&gt;&amp;#39;]&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;).replace(&lt;span class=\"hljs-string\"&gt;&amp;#39;[&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)\nx_np &amp;#61; np.fromstring(x, dtype&amp;#61;&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;, sep&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;).reshape(-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(x_np &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy.core._exceptions._UFuncNoLoopError: ufunc 'add' did not contain a loop with signature", ["想要给以下表格的每个数字都加上1", "\n", "代码如下", "\n", "from datetime import datetime", "import pandas as pd", "import numpy as np", "import math", "df = pd.read_csv(r'C:\\Users\\Administrator\\Desktop\\1.csv')", "print(df, type(df))", "x = df.iloc[:3]['A']", "print(x, type(x))", "print(np.array(list(x))+1)", "\n", "出现以下错误提示，尝试用各种方法将字符转为数字，但均未成功，该如何解决？"]], "Tag": "算法设计"}
{"Answer": "array_P=[np.random.randint(0,2,10)]\r\narray_A=[np.random.randint(0,2,10)]\r\n-&gt;\r\narray_P=np.random.randint(0,2,10).tolist()\r\narray_A=np.random.randint(0,2,10).tolist()\r\n加上方括号把array变成数组的数组了", "Konwledge_Point": "应对NP完全问题", "Question": ["python随机产生0和1，得出F1-score的问题，求大神帮忙", ["import numpy as np", "\narray_P=[np.random.randint(0,2,10)]", "\narray_A=[np.random.randint(0,2,10)]", "\n代码如下", "\nprint(array_P)", "\nprint(array_A)", "\nTP=0", "\nFP=0", "\nFN=0", "\nfor i in range(10):", "\n    if array_P[i]==1 and array_A[i]==1:", "\n        TP+=1", "\n    elif array_P[i]==1 and array_A[i]==1:", "\n        FP+=1", "\n    elif array_P[i]==0 and array_A[i]==1:", "\n        FN+=1", "\nprint(TP)", "\nprint(FP)", "\nprint(FN)", "\nP=TP/(TP+FP)", "\nR=TP/(TP+FN)", "\nfl_score = (2*R*P)/(R+P)", "\nprint('name:', fl_score)", "\n报错", "\nrunfile('D:/python/files/未命名0.py')", "\n[array([1, 0, 1, 1, 0, 0, 0, 0, 1, 0])]", "\n[array([1, 1, 0, 1, 1, 0, 1, 0, 0, 1])]", "\nTraceback (most recent call last):", "\n\n", "File \"D:\\python\\files\\未命名0.py\", line 30, in ", "\n    if array_P[i]==1 and array_A[i]==1:", "\n\n", "ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;new BusinessCerts()对象,并传递这三个参数&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:\n  img&amp;#61;&amp;#39;&amp;#39;\n  ocr_recognition &amp;#61; &lt;span class=\"hljs-constructor\"&gt;OCRRecognition()&lt;/span&gt;\n  dbnet_det &amp;#61; &lt;span class=\"hljs-constructor\"&gt;DbNetInfer()&lt;/span&gt;\n  certs &amp;#61; &lt;span class=\"hljs-constructor\"&gt;BusinessCerts(&lt;span class=\"hljs-params\"&gt;img&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;dbnet_det&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;ocr_recognition&lt;/span&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["OCR的学习，在探索代码的时候遇到问题", ["在学习OCR识别时，我拿到一串代码，但是看不出来要怎么让它跑起来拿到结果（只是一个类，原本是通过接口访问的代码）", "\n", "import", " re\n\n", "import", " numpy ", "as", " np\n", "from", " PIL ", "import", " Image\n\n", "from", " utils ", "import", " order_point, crop_image, calc_distance\n\n\n", "class", " ", "BusinessCerts", ":\n\n    ", "def", " ", "__init__", "(", "self, img=", "''", ", dbnet_det=", "''", ", ocr_recognition=", "''", "):\n        self.img = img\n        self.dbnet_det = dbnet_det\n        self.ocr_recognition = ocr_recognition\n        self.det_result = []\n        self.box_result = []\n        self.left_uppers = []\n        self.line_space = -", "1", "\n        self.line_height = -", "1", "\n\n        self.box_detect()\n        self.ocr_recognize()\n\n        self.left_uppers = np.array([[point[", "'pts'", "][", "0", "], point[", "'pts'", "][", "1", "]] ", "for", " point ", "in", " self.box_result])\n        self.left_lowers = np.array([[point[", "'pts'", "][", "6", "], point[", "'pts'", "][", "7", "]] ", "for", " point ", "in", " self.box_result])\n        self.results = {", "'名称'", ": ", "''", ", ", "'统一社会信用代码'", ": ", "''", ", ", "'住所'", ": ", "''", "}\n\n        self.ocr_pipline()\n\n    ", "# DBNet文字检测", "\n    ", "def", " ", "box_detect", "(", "self", "):\n        det_result = self.dbnet_det.predict(self.img)\n        det_result = det_result.reshape(-", "1", ", ", "8", ")\n        self.det_result = det_result[det_result[:, ", "1", "].argsort()]\n        ", "return", " det_result[det_result[:, ", "1", "].argsort()]\n\n    ", "# 识别文字", "\n    ", "def", " ", "ocr_recognize", "(", "self", "):\n        box_result = []\n\n        ", "for", " i ", "in", " ", "range", "(self.det_result.shape[", "0", "]):\n            box_dict = {}\n            pts = order_point(self.det_result[i])\n            image_crop = crop_image(self.img, pts)\n            image_crop = Image.fromarray(image_crop)\n            result = self.ocr_recognition.rec(image_crop)\n            pts = pts.reshape(-", "1", ").astype(", "int", ")\n            box_dict[", "'pts'", "] = pts\n            box_dict[", "'text'", "] = result\n            box_result.append(box_dict)\n\n        self.box_result = box_result\n\n    ", "# 根据标签索引，通过计算距离确定对应值", "\n    ", "def", " ", "get_item_value", "(", "self, key_idx", "):\n        curr_pts = self.box_result[key_idx][", "'pts'", "]\n        curr_right_upper = np.array([curr_pts[", "2", "], curr_pts[", "3", "]])\n\n        dists = calc_distance(curr_right_upper, self.left_uppers)\n        dists[key_idx] = ", "float", "(", "'inf'", ")\n\n        value_idx = np.argmin(dists)\n        ", "return", " value_idx, self.box_result[value_idx][", "'text'", "]\n\n    ", "# 获取名称对应Box索引", "\n    ", "def", " ", "get_name_index", "(", "self", "):\n        index = -", "1", "\n        ", "for", " i, temp ", "in", " ", "enumerate", "(self.box_result):\n            ", "if", " ", "'名称'", " == temp[", "'text'", "] ", "or", " ", "'称'", " == temp[", "'text'", "]:\n                index = i\n        ", "return", " index\n\n    ", "def", " ", "get_credit_code_index", "(", "self", "):\n        index = -", "1", "\n        ", "for", " i, temp ", "in", " ", "enumerate", "(self.box_result):\n            ", "if", " ", "'统一社会信用代码'", " == temp[", "'text'", "] ", "or", " ", "'信用代码'", " == temp[", "'text'", "] ", "or", " ", "'代码'", " == temp[", "'text'", "]:\n                index = i\n        ", "return", " index\n\n    ", "def", " ", "get_address_index", "(", "self", "):\n        index = -", "1", "\n        ", "for", " i, temp ", "in", " ", "enumerate", "(self.box_result):\n            ", "if", " ", "'住所'", " == temp[", "'text'", "] ", "or", " ", "'经营场所'", " == temp[", "'text'", "]:\n                index = i\n        ", "return", " index\n\n    ", "def", " ", "ocr_pipline", "(", "self", "):\n        address_index = self.get_address_index()\n        ", "if", " address_index != -", "1", ":\n            address_value_idx, address_result = self.get_item_value(address_index)\n\n            address_value_pts = self.box_result[address_value_idx][", "'pts'", "]\n            self.line_height = address_value_pts[", "7", "] - address_value_pts[", "1", "]\n\n            address_value_left_lower = np.array([address_value_pts[", "6", "], address_value_pts[", "7", "]])\n            ", "# 计算两行之间的距离，住所Box左下角点和其他Box左上角点的距离", "\n            line_space_dists = calc_distance(address_value_left_lower, self.left_uppers)\n            line_space_dists[address_value_idx] = ", "float", "(", "'inf'", ")\n\n            ", "# 计算行距", "\n            left_lowers = [[point[", "'pts'", "][", "6", "], point[", "'pts'", "][", "7", "]] ", "for", " point ", "in", " self.box_result]\n            left_upper = np.array([address_value_pts[", "0", "], address_value_pts[", "1", "]])\n            line_height_dists = calc_distance(left_upper, left_lowers)\n            line_height_dists[address_value_idx] = ", "float", "(", "'inf'", ")\n            self.line_space = ", "min", "(line_height_dists)\n\n            ", "# 如果最小行距小于正常行距的 1/2 ，认为有换行", "\n            ", "if", " ", "min", "(line_space_dists) < (self.line_space / ", "2", "):\n                min_idx = np.argmin(line_space_dists)\n                next_line = self.box_result[min_idx][", "'text'", "]\n                address_result += next_line\n\n            self.results[", "'住所'", "] = address_result\n\n        name_index = self.get_name_index()\n\n        ", "if", " name_index != -", "1", ":\n            name_value_idx, name_result = self.get_item_value(name_index)\n\n            name_value_pts = self.box_result[name_value_idx][", "'pts'", "]\n            name_value_left_lower = np.array([name_value_pts[", "6", "], name_value_pts[", "7", "]])\n\n            ", "# 计算两行之间的距离，名称Box左下角点和其他Box左上角点的距离", "\n            line_space_dists = calc_distance(name_value_left_lower, self.left_uppers)\n            line_space_dists[name_value_idx] = ", "float", "(", "'inf'", ")\n\n            ", "# 如果最小行距小于正常行距的 1/2 ，认为有换行", "\n            ", "if", " ", "min", "(line_space_dists) < (self.line_space / ", "2", "):\n                min_idx = np.argmin(line_space_dists)\n                next_line = self.box_result[min_idx][", "'text'", "]\n                address_result += next_line\n\n            self.results[", "'名称'", "] = name_result\n        credit_code_index = self.get_credit_code_index()\n        ", "if", " credit_code_index != -", "1", ":\n            _, credit_code_result = self.get_item_value(credit_code_index)\n            re_result = re.findall(", "r'[0-9A-Z]{15,}'", ", credit_code_result)\n            ", "if", " re_result:\n                self.results[", "'统一社会信用代码'", "] = re_result[", "0", "]\n            ", "else", ":\n                ", "for", " box ", "in", " self.box_result:\n                    re_result = re.findall(", "r'[0-9A-Z]{15,}'", ", box[", "'text'", "])\n                    ", "if", " re_result:\n                        self.results[", "'统一社会信用代码'", "] = re_result[", "0", "]\n                        ", "break", "\n", "if", " __name__ == ", "\"__main__\"", ":\n    \n", "\n", "我的IF后要怎么写才能单独把这串代码运行起来？", "\n", "我想到达成的目的就是把这个类给它实例化，然后运行拿到结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的代码中&amp;#xff0c;使用QImage对象替换了QPixmap对象来显示图片&amp;#xff0c;由于QImage对象是只读的&amp;#xff0c;因此您无法在QImage对象上执行操作。你需要将QImage对象转换为QPixmap对象&amp;#xff0c;然后再将其设置为标签的图像。这是修改以后的代码&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-css\"&gt;from PyQt5 import QtCore, QtGui, QtWidgets\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Ui_Form(&lt;span class=\"hljs-params\"&gt;object&lt;/span&gt;)&lt;/span&gt;:\n    def setup&lt;span class=\"hljs-constructor\"&gt;Ui(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, Form)&lt;/span&gt;:\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Form&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;set&lt;span class=\"hljs-constructor\"&gt;ObjectName(&lt;span class=\"hljs-string\"&gt;&amp;#34;Form&amp;#34;&lt;/span&gt;)&lt;/span&gt;\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Form&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;resize(&lt;span class=\"hljs-number\"&gt;400&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;300&lt;/span&gt;)\n        self.label &amp;#61; QtWidgets.&lt;span class=\"hljs-constructor\"&gt;QLabel(Form)&lt;/span&gt;\n        self.label.set&lt;span class=\"hljs-constructor\"&gt;Geometry(QtCore.QRect(60, 90, 261, 151)&lt;/span&gt;)\n        self.label.set&lt;span class=\"hljs-constructor\"&gt;StyleSheet(&lt;span class=\"hljs-string\"&gt;&amp;#34;background-color:rgb(85, 170, 255)&amp;#34;&lt;/span&gt;)&lt;/span&gt;\n        self.label.set&lt;span class=\"hljs-constructor\"&gt;ObjectName(&lt;span class=\"hljs-string\"&gt;&amp;#34;label&amp;#34;&lt;/span&gt;)&lt;/span&gt;\n        self.pushButton &amp;#61; QtWidgets.&lt;span class=\"hljs-constructor\"&gt;QPushButton(Form)&lt;/span&gt;\n        self.pushButton.set&lt;span class=\"hljs-constructor\"&gt;Geometry(QtCore.QRect(50, 30, 75, 23)&lt;/span&gt;)\n        self.pushButton.set&lt;span class=\"hljs-constructor\"&gt;ObjectName(&lt;span class=\"hljs-string\"&gt;&amp;#34;pushButton&amp;#34;&lt;/span&gt;)&lt;/span&gt;\n\n        self.retranslate&lt;span class=\"hljs-constructor\"&gt;Ui(Form)&lt;/span&gt;\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;QtCore&lt;/span&gt;.&lt;/span&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;QMetaObject&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;connect&lt;span class=\"hljs-constructor\"&gt;SlotsByName(Form)&lt;/span&gt;\n\n    def retranslate&lt;span class=\"hljs-constructor\"&gt;Ui(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;, Form)&lt;/span&gt;:\n        _translate &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;QtCore&lt;/span&gt;.&lt;/span&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;QCoreApplication&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;translate\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Form&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;set&lt;span class=\"hljs-constructor\"&gt;WindowTitle(&lt;span class=\"hljs-params\"&gt;_translate&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Form&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;Form&amp;#34;&lt;/span&gt;)&lt;/span&gt;)\n        self.label.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-params\"&gt;_translate&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Form&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;Label&amp;#34;&lt;/span&gt;)&lt;/span&gt;)\n        self.pushButton.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-params\"&gt;_translate&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Form&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;PushButton&amp;#34;&lt;/span&gt;)&lt;/span&gt;)\n\nimport sys\n\nfrom PIL import Image, ImageQt\nfrom PyQt5 import QtGui, QtCore, QtWidgets\nfrom PyQt5.QtWidgets import QMainWindow\nimport numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n\nfrom testLabel import Ui_Form\nimport cv2\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;MyMainForm(QMainWindow, Ui_Form)&lt;/span&gt;:\n    def &lt;span class=\"hljs-constructor\"&gt;__init__(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;)&lt;/span&gt;:\n        super&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;.&lt;span class=\"hljs-constructor\"&gt;__init__()&lt;/span&gt;\n        self.setup&lt;span class=\"hljs-constructor\"&gt;Ui(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;)&lt;/span&gt;\n        self.pushButton.clicked.connect(self.openPicture)\n\n\n    def &lt;span class=\"hljs-keyword\"&gt;open&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;Picture(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;)&lt;/span&gt;:\n\n        # pix &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Image&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;open&lt;/span&gt;(&amp;#39;result.jpg&amp;#39;)\n        # pix &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;ImageQt&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;toqpixmap(pix)\n        # img &amp;#61; cv2.imread(&amp;#39;result.jpg&amp;#39;)\n        # pix &amp;#61; QtGui.&lt;span class=\"hljs-constructor\"&gt;QPixmap(&amp;#39;&lt;span class=\"hljs-params\"&gt;result&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;jpg&lt;/span&gt;&amp;#39;)&lt;/span&gt;\n        # self.label.set&lt;span class=\"hljs-constructor\"&gt;ScaledContents(True)&lt;/span&gt;\n        img &amp;#61; np.random.randint(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;255&lt;/span&gt;, &lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]&lt;/span&gt;, np.uint8)\n        img &amp;#61; img.astype(&lt;span class=\"hljs-string\"&gt;&amp;#34;uint8&amp;#34;&lt;/span&gt;)\n        img &amp;#61; cv2.cvt&lt;span class=\"hljs-constructor\"&gt;Color(&lt;span class=\"hljs-params\"&gt;img&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;cv2&lt;/span&gt;.COLOR_BGR2RGB)&lt;/span&gt;\n        img &amp;#61; QtGui.&lt;span class=\"hljs-constructor\"&gt;QImage(&lt;span class=\"hljs-params\"&gt;img&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;img&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;shape&lt;/span&gt;[1], &lt;span class=\"hljs-params\"&gt;img&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;shape&lt;/span&gt;[0], &lt;span class=\"hljs-params\"&gt;img&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;shape&lt;/span&gt;[1] &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; 3, QtGui.QImage.Format_RGB888)&lt;/span&gt;\n\n        pixmap &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;QtGui&lt;/span&gt;.&lt;/span&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;QPixmap&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;from&lt;span class=\"hljs-constructor\"&gt;Image(&lt;span class=\"hljs-params\"&gt;img&lt;/span&gt;)&lt;/span&gt;\n        self.label.set&lt;span class=\"hljs-constructor\"&gt;Pixmap(&lt;span class=\"hljs-params\"&gt;pixmap&lt;/span&gt;)&lt;/span&gt;\n\n\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&amp;#39;__main__&amp;#39;:\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;QtCore&lt;/span&gt;.&lt;/span&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;QCoreApplication&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;set&lt;span class=\"hljs-constructor\"&gt;Attribute(QtCore.Qt.AA_EnableHighDpiScaling)&lt;/span&gt;\n    app &amp;#61; QtWidgets.&lt;span class=\"hljs-constructor\"&gt;QApplication(&lt;span class=\"hljs-params\"&gt;sys&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;argv&lt;/span&gt;)&lt;/span&gt;\n    my &amp;#61; &lt;span class=\"hljs-constructor\"&gt;MyMainForm()&lt;/span&gt;\n    my.show&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n    sys.exit(app.exec&lt;span class=\"hljs-constructor\"&gt;_()&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果能解决问题&amp;#xff0c;望采纳&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python， Pyqt5的图像显示问题", ["我想使用python的pyqt5编写一个QLabel显示图片，直接读取图片为QPixmap后用setPixmap显示图片的时候正常，在使用PIL.image读取图片为PIL.Image类型后再用ImageQt.toqpixmap转换为QPixmap后就无法显示图片了，程序跑了直接退出也不报错，debug也是直接退出。这个有什么解决方案吗。ps:不直接使用Qpixmap是因为某个项目里面用到PIL.Image进行运算，运算后需要转换为Qpixmap进行显示", "补充，我自己在找解决办法的时候发现，我将PIL.Image类型转化为ndarray后直接用matplotlib进行显示是可以的，但是转换为Pixmap又不行了。后面我尝试随机生成一个RGB数据数组转换为Pixmap发现也无法显示。由于程序直接退出不报错，不知道问题所在，下面是我的测试代码。", "\n", "from PyQt5 import QtCore, QtGui, QtWidgets\n", "class", " ", "Ui_Form(", "object", ")", ":\n    def setup", "Ui(", "self", ", Form)", ":\n        ", "Form", ".", "set", "ObjectName(", "\"Form\"", ")", "\n        ", "Form", ".", "resize(", "400", ", ", "300", ")\n        self.label = QtWidgets.", "QLabel(Form)", "\n        self.label.set", "Geometry(QtCore.QRect(60, 90, 261, 151)", ")\n        self.label.set", "StyleSheet(", "\"background-color:rgb(85, 170, 255)\"", ")", "\n        self.label.set", "ObjectName(", "\"label\"", ")", "\n        self.pushButton = QtWidgets.", "QPushButton(Form)", "\n        self.pushButton.set", "Geometry(QtCore.QRect(50, 30, 75, 23)", ")\n        self.pushButton.set", "ObjectName(", "\"pushButton\"", ")", "\n\n        self.retranslate", "Ui(Form)", "\n        ", "QtCore", ".", "QMetaObject", ".", "connect", "SlotsByName(Form)", "\n\n    def retranslate", "Ui(", "self", ", Form)", ":\n        _translate = ", "QtCore", ".", "QCoreApplication", ".", "translate\n        ", "Form", ".", "set", "WindowTitle(", "_translate", "(", "\"Form\"", ", ", "\"Form\"", ")", ")\n        self.label.set", "Text(", "_translate", "(", "\"Form\"", ", ", "\"Label\"", ")", ")\n        self.pushButton.set", "Text(", "_translate", "(", "\"Form\"", ", ", "\"PushButton\"", ")", ")\n\n", "\n", "import sys\n\nfrom PIL import Image, ImageQt\nfrom PyQt5 import QtGui, QtCore, QtWidgets\nfrom PyQt5.QtWidgets import QMainWindow\nimport numpy ", "as", " np\n\nfrom testLabel import Ui_Form\nimport cv2\n\n", "class", " ", "MyMainForm(QMainWindow, Ui_Form)", ":\n    def ", "__init__(", "self", ")", ":\n        super", "()", ".", "__init__()", "\n        self.setup", "Ui(", "self", ")", "\n        self.pushButton.clicked.connect(self.openPicture)\n\n\n    def ", "open", "Picture(", "self", ")", ":\n\n        # pix = ", "Image", ".", "open", "('result.jpg')\n        # pix = ", "ImageQt", ".", "toqpixmap(pix)\n        # img = cv2.imread('result.jpg')\n        # pix = QtGui.", "QPixmap('", "result", ".", "jpg", "')", "\n        # self.label.set", "ScaledContents(True)", "\n        img = np.random.randint(", "0", ", ", "255", ", ", "[", "10", ", ", "60", ", ", "3", "]", ", np.uint8)\n        img = img.astype(", "\"uint8\"", ")\n        img = cv2.cvt", "Color(", "img", ", ", "cv2", ".COLOR_BGR2RGB)", "\n        img = QtGui.", "QImage(", "img", ", ", "img", ".", "shape", "[1], ", "img", ".", "shape", "[0], ", "img", ".", "shape", "[1] ", "*", " 3, QtGui.QImage.Format_RGB888)", "\n\n\n        self.label.set", "Pixmap(", "img", ")", "\n\n\n", "if", " __name__", " == ", "'__main__':\n    ", "QtCore", ".", "QCoreApplication", ".", "set", "Attribute(QtCore.Qt.AA_EnableHighDpiScaling)", "\n    app = QtWidgets.", "QApplication(", "sys", ".", "argv", ")", "\n    my = ", "MyMainForm()", "\n    my.show", "()", "\n    sys.exit(app.exec", "_()", ")\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;试了下 可以啊&lt;br /&gt;点击到每个蓝色点才会展示新的figure&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/881446366036151.png\" width=\"600px\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请采纳哦~&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["matplotlib通过event事件使图表可交互失败", ["源代码", "\n", "import numpy as np\nimport matplotlib.pyplot as plt\n\n\n", "# Fixing random state for reproducibility", "\nnp.random.seed(19680801)\n\nX = np.random.rand(100, 1000)\nxs = np.mean(X, ", "axis", "=1)\nys = np.std(X, ", "axis", "=1)\n\nfig, ax = plt.subplots()\nax.set_title(", "'click on point to plot time series'", ")\nline, = ax.plot(xs, ys, ", "'o'", ", ", "picker", "=", "True", ", ", "pickradius", "=5)\n\n\ndef onpick(event):\n\n    ", "if", " event.artist != line:\n        return ", "True", "\n\n    N = len(event.ind)\n    ", "if", " ", "not", " N:\n        return ", "True", "\n\n    figi, axs = plt.subplots(N, ", "squeeze", "=", "False", ")\n    ", "for", " ax, dataind ", "in", " zip(axs.flat, event.ind):\n        ax.plot(X[dataind])\n        ax.text(.05, .9, ", "'mu=%1.3f\\nsigma=%1.3f'", " % (xs[dataind], ys[dataind]),\n                ", "transform", "=ax.transAxes, ", "va", "=", "'top'", ")\n        ax.set_ylim(-0.5, 1.5)\n    figi.show()\n    return ", "True", "\n\nfig.canvas.mpl_connect(", "'pick_event'", ", onpick)\n\nplt.show()\n\n", "\n", "生成的图表", "\n", "鼠标点击并没有产生交互", "请问问题出在了哪里"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我大概猜到了&amp;#xff0c;因为精度很小的时候&amp;#xff0c;在靠近0的地方类似于无穷小&amp;#xff0c;然后1/无穷小就得到了无穷大。\n然后接着y轴为了显示出无穷大的数据&amp;#xff0c;就被无限地拉伸&amp;#xff0c;然后图像看起来就是错误的了。\ny轴的刻度值验证了我的这一猜想。\n\n应该可以用设置xy等比例或者设置值域的方法来解决。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Matplotlib为什么无法绘制高精度的反比例函数？", ["我用Python的matplotlib库绘制了反比例函数，当x步长很小时，得出的图像是错误的，请问这是为什么？", "\n\n", "代码：", "\n\n", "步长为0.001（错误图像）", "\n\n", "\n", "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(-10, 10, 0.001)\ny = 1/x\nplt.plot(x, y)\nplt.show()", "\n\n", "\n\n", "步长为0.5（正确图像）：", "\n\n", "\n", "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(-10, 10, 0.5)\ny = 1/x\nplt.plot(x, y)\nplt.show()", "\n\n", "\n\n", "\n", " ", "\n"]], "Tag": "算法设计"}
{"Answer": "```\r\neval('bay_' + str(x_1[1]))[np.where(eval('bay_' + str(x_1[1]))[:, 0]==x_1[0])]=x_1\r\n```", "Konwledge_Point": "应对NP完全问题", "Question": ["python（numpy）中，如何根据条件来修改某个矩阵中的值？", ["假设有一变量 x_1，x_1的值为[1:10]中的某一个。还有bay_1,bay_2,...bay_10.共10个矩阵。", "\n\n", "我想让x_1=1时，对bay_1矩阵进行操作（更新数据），x_1=2时，对bay_2矩阵进行操作，其余同理。", "\n\n", "下面代码是其中的一部分，以此举例。（python3.7）", "\n\n", "    import numpy as np\n    bay_7 = [[121, 7, 1, 1, 1], [122, 7, 2, 1, 1], [123, 7, 3, 1, 1], [124, 7, 4, 1, 1], [125, 7, 5, 1, 1], [126, 7, 1, 2, 0], [127, 7, 2, 2, 1],\n         [128, 7, 3, 2, 1], [129, 7, 4, 2, 1], [130, 7, 5, 2, 1], [131, 7, 1, 3, 0], [132, 7, 2, 3, 1], [133, 7, 3, 3, 1], [134, 7, 4, 3, 1],\n         [135, 7, 5, 3, 1], [136, 7, 1, 4, 0], [137, 7, 2, 4, 0], [138, 7, 3, 4, 1], [139, 7, 4, 4, 0], [140, 7, 5, 4, 0]]\n    bay_7 = np.array(bay_7)\n    x_1 = [133, 7, 3, 3, 0]\n", "\n\n", "如果我用下面这行代码来对bay_7进行修改，倒是可行，", "\n\n", "    bay_7[np.where(bay_7[:, 0]==x_1[0])]=x_1\n", "\n\n", "其他的矩阵也可以用if，elif语句逐个进行判断，但是我想用eval这类的函数对它进行操作，就是为了简化代码。然后我自己写的eval代码如下：", "\n\n", "    eval('bay_'+str(x_1[1])+'[np.where(bay_'+str(x_1[1])+'[:,0]==x_1[0])] = x_1')\n", "\n\n", "然后他就提示我如下错误：", "\n\n", "eval('bay_'+str(x_1[1])+'[np.where(bay_'+str(x_1[1])+'[:,0]==x_1[0])] = x_1')", "\n  File \"\", line 1", "\n    bay_7[np.where(bay_7[:,0]==x_1[0])] = x_1", "\n                                        ^", "\nSyntaxError: invalid syntax", "\n请问，这种问题要怎么修改才可行？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第4行temp_col &amp;#61; a[:,i]并没有新申请内存&amp;#xff0c;temp_col和a[:,i]指向同一存储地址&amp;#xff0c;因此对temp_col的修改&amp;#xff0c;其实就是对a的修改&amp;#xff1b;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python值的传到", ["import numpy as np\ndef fill(", "a", "):\n    for i in ", "range", "(a.shape[", "1", "]):\n        temp_col = a[:,i]\n        nan_num = np.", "count_nonzero", "(np.", "isnan", "(temp_col))\n        if nan_num != ", "0", ":\n            temp_not_nan_col = temp_col[temp_col == temp_col]\n            temp_col[np.", "isnan", "(temp_col)] = temp_not_nan_col.", "mean", "()\n            a[:,i] = temp_col\n    return a\n\nif __name__ == ", "\"__main__\"", ":\n    a = np.", "arange", "(", "24", ").", "reshape", "(", "4", ", ", "6", ").", "astype", "(float)\n    a[", "1", ", ", "2", ":] = np.nan\n    ", "print", "(a)\n    a = ", "fill", "(a)\n    ", "print", "(a)\n", "\n", "上面是修改nan位置的值，请问第9行代码去了为什么a的值也改变了，没有第9行（a[:,i] = temp_col），都没对a做修改，但最后a的值也变了，很疑惑"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;首先&amp;#xff0c;手写识别的关键是特征描述&amp;#xff0c;如果这一步没有做好&amp;#xff0c;用什么方法&amp;#xff0c;怎么调参&amp;#xff0c;也不会有好的结果。&lt;br /&gt;将图像像素值直接作为输入向量&amp;#xff0c;原则上是不适当的。&lt;br /&gt;推荐实现方法如下&amp;#xff1a;&lt;br /&gt;&amp;#xff08;1&amp;#xff09;首先&amp;#xff0c;样本均匀&amp;#xff0c;标准化&amp;#xff0c;归一化&amp;#xff0c;这些必要的准备工作就不说了&amp;#xff0c;&lt;br /&gt;&amp;#xff08;2&amp;#xff09;特征提取&amp;#xff0c;或者说特征向量构造&amp;#xff0c;将字符图像转换为特征向量作为模型的输入&amp;#xff0c;&lt;br /&gt;&amp;#xff08;3&amp;#xff09;KNN&amp;#xff0c;可以选择不同的K值&amp;#xff0c;2&amp;#xff5e;5之间有些影响&amp;#xff0c;5 以上没必要。&lt;br /&gt;关于特征构造&amp;#xff0c;推荐两种方法&amp;#xff1a;&lt;br /&gt;1&amp;#xff0c;HOG&amp;#xff0c;方向梯度直方图&lt;br /&gt;2&amp;#xff0c;小波特征&amp;#xff0c;例如Haar&lt;br /&gt;我查了一下以前的程序&amp;#xff0c;检验集识别准确率大约 80&amp;#xff5e;90%。&lt;br /&gt;给出一段 HOG 特征描述符的构造例程&amp;#xff0c;这类似于SIFT的特征描述符&amp;#xff0c;效果不错。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; cv2 as cv\n\n    &lt;span class=\"hljs-comment\"&gt;# (2) 构造 HOG 描述符&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# HOGDescriptor&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;winSize&lt;/span&gt; &amp;#61; (&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;)\n    &lt;span class=\"hljs-attribute\"&gt;blockSize&lt;/span&gt; &amp;#61; (&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n    &lt;span class=\"hljs-attribute\"&gt;blockStride&lt;/span&gt; &amp;#61; (&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\n    &lt;span class=\"hljs-attribute\"&gt;cellSize&lt;/span&gt; &amp;#61; (&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\n    &lt;span class=\"hljs-attribute\"&gt;nbins&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;derivAperture&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;winSigma&lt;/span&gt; &amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;.\n    &lt;span class=\"hljs-attribute\"&gt;histogramNormType&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;L2HysThreshold&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;gammaCorrection&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;nlevels&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;signedGradients&lt;/span&gt; &amp;#61; True\n    &lt;span class=\"hljs-attribute\"&gt;hog&lt;/span&gt; &amp;#61; cv.HOGDescriptor(winSize, blockSize, blockStride, cellSize, nbins,\n                           &lt;span class=\"hljs-attribute\"&gt;derivAperture&lt;/span&gt;, winSigma, histogramNormType,\n                           &lt;span class=\"hljs-attribute\"&gt;L2HysThreshold&lt;/span&gt;, gammaCorrection, nlevels)\n    &lt;span class=\"hljs-attribute\"&gt;p&lt;/span&gt; &amp;#61; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#43;(&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)//&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)*(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#43;(&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)//&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)*(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;//&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)*(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;//&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)*&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;  # 特征描述符长度&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;288&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;参考结果&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;Recognition of handwritten digits by KNN-HOG\n&lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;2, &lt;span class=\"hljs-attribute\"&gt;correct&lt;/span&gt;&amp;#61;938, &lt;span class=\"hljs-attribute\"&gt;accuracy&lt;/span&gt;&amp;#61;93.80%\n&lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;3, &lt;span class=\"hljs-attribute\"&gt;correct&lt;/span&gt;&amp;#61;939, &lt;span class=\"hljs-attribute\"&gt;accuracy&lt;/span&gt;&amp;#61;93.90%\n&lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;4, &lt;span class=\"hljs-attribute\"&gt;correct&lt;/span&gt;&amp;#61;940, &lt;span class=\"hljs-attribute\"&gt;accuracy&lt;/span&gt;&amp;#61;94.00%\n&lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;5, &lt;span class=\"hljs-attribute\"&gt;correct&lt;/span&gt;&amp;#61;938, &lt;span class=\"hljs-attribute\"&gt;accuracy&lt;/span&gt;&amp;#61;93.80%\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["提升knn算法的准确率", ["不使用 sklearn写的knn算法，识别mnist数据集，准确率只有百分之六十， 如何进一步提高识别的准确率", "已经尝试过使用不同的k值和对图片进行归一化处理", "\n", "\n\ndef load_mnist():\n    ", "X_train", " = np.fromfile('mnist_data/train-images-idx3-ubyte', ", "dtype=np.uint8,", " ", "offset=16)", "\n    ", "X_train", " = X_train.reshape(int(", "6", "e4), ", "28", ", ", "28", ")\n    ", "X_test", " = np.fromfile('mnist_data/t10k-images-idx3-ubyte', ", "dtype=np.uint8,", " ", "offset=16)", "\n    ", "X_test", " = X_test.reshape(int(", "1", "e4), ", "28", ", ", "28", ")\n    ", "y_train", " = np.fromfile('mnist_data/train-labels-idx1-ubyte', ", "dtype=np.uint8,", " ", "offset=8)", "\n    ", "y_train", " = y_train.reshape(int(", "6", "e4))\n    ", "y_test", " = np.fromfile('mnist_data/t10k-labels-idx1-ubyte', ", "dtype=np.uint8,", " ", "offset=8)", "\n    ", "y_test", " = y_test.reshape(int(", "1", "e4))\n\n\nclass Knn(object):\n\n    def __init__(self, ", "k=3):", "\n        self.", "k", " = k\n\n    def fit(self, X, y):\n        self.", "X", " = X\n        self.", "y", " = y\n\n    def predict(self, X):\n        ", "dataset", " = self.X\n        ", "labels", " = self.y\n        ", "k", " = self.k\n        ", "predict_labels", " = []\n        ", "X", " = np.reshape(X, (X.shape[", "0", "], -", "1", "))\n        ", "dataset", " = np.reshape(dataset, (dataset.shape[", "0", "], -", "1", "))\n\n        ", "scalar", " = MaxAbsScaler()\n        scalar.fit(dataset)\n        ", "dataset", " = scalar.transform(dataset)\n        ", "X", " = scalar.transform(X)\n\n        print(dataset[", "0", "])\n\n        ", "dataset_size", " = dataset.shape[", "0", "]\n        for i ", "in", " tqdm(range(X.shape[", "0", "])):\n            ", "diff_mat", " = np.tile(X[i], (dataset_size, ", "1", ")) - dataset\n            ", "sq_diff_mat", " = diff_mat ** ", "2", "\n            ", "sq_distances", " = sq_diff_mat.sum(", "axis=1)", "\n            ", "distances", " = sq_distances ** ", "0.5", "\n            ", "sorted_dist_indicies", " = distances.argsort()\n            ", "class_count", " = {}\n            for j ", "in", " range(k):\n                ", "vote_label", " = labels[sorted_dist_indicies[i]]\n                class_count[vote_label] = class_count.get(vote_label, ", "0", ") + ", "1", "\n            ", "sorted_class_count", " = sorted(class_count.items(), ", "key=operator.itemgetter(1),", " ", "reverse=True)", "\n            predict_labels.append(sorted_class_count[", "0", "][", "0", "])\n        ", "predict_labels", " = np.array(predict_labels)\n        return predict_labels\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;改成np.power()试试&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import numpy as &lt;span class=\"hljs-built_in\"&gt;np&lt;/span&gt;\na&amp;#61;&lt;span class=\"hljs-built_in\"&gt;np&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;([&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;])\nb&amp;#61;&lt;span class=\"hljs-built_in\"&gt;np&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;([&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;np&lt;/span&gt;.power(a,b))\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python进行层次聚类时数据读取出现问题", ["问题遇到的现象和发生背景", "\n", "从excel中导入数据进行层次聚类分析，导入数据类型不对，无法进行计算", "\n", "问题相关代码，请勿粘贴截图", "\n", "#描述: 基于组平均的AGNES算法，支持多维数组，距离用欧式距离", "\n", "import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n", "from", " scipy.cluster.hierarchy ", "import", " dendrogram,linkage\n", "from", " scipy.spatial.distance ", "import", " squareform\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " math\n", "import", " pylab ", "as", " pl\n", "#从excel中读取数据并转换为矩阵", "\ndatA=pd.read_excel(", "r'C:\\Users\\49175\\Desktop\\jzgb.xlsx'", ")\ndata=np.array(datA,dtype=np.int64)\n", "#数据处理 dataset是样本的列表", "\na = np.array_split(datA,", "78", ",axis=", "0", ")\ndataset = [(a[i], a[i+", "1", "]) ", "for", " i ", "in", " ", "range", "(", "1", ", ", "len", "(a)-", "1", ", ", "3", ")]\n", "#计算欧几里得距离,a,b分别为两个元组", "\n", "def", " ", "dist", "(", "a, b", "):\n    t = ", "0", "\n    n=", "44", "\n    ", "for", " i ", "in", " ", "range", "(n):\n        t = t + math.", "pow", "(a[i]-b[i], ", "2", ")\n    ", "return", " math.sqrt(t)\n", "#dist_min", "\n", "def", " ", "dist_min", "(", "Ci, Cj", "):\n    ", "return", " ", "min", "(dist(i, j) ", "for", " i ", "in", " Ci ", "for", " j ", "in", " Cj)\n", "#dist_max", "\n", "def", " ", "dist_max", "(", "Ci, Cj", "):\n    ", "return", " ", "max", "(dist(i, j) ", "for", " i ", "in", " Ci ", "for", " j ", "in", " Cj)\n", "#dist_avg", "\n", "def", " ", "dist_avg", "(", "Ci, Cj", "):\n    ", "return", " ", "sum", "(dist(i, j) ", "for", " i ", "in", " Ci ", "for", " j ", "in", " Cj)/(", "len", "(Ci)*", "len", "(Cj))\n", "#找到距离最小的下标", "\n", "def", " ", "find_Min", "(", "M", "):\n    ", "min", " = ", "1000", "\n    x = ", "0", "; y = ", "0", "\n    ", "for", " i ", "in", " ", "range", "(", "len", "(M)):\n        ", "for", " j ", "in", " ", "range", "(", "len", "(M[i])):\n            ", "if", " i != j ", "and", " M[i][j] < ", "min", ":\n                ", "min", " = M[i][j];x = i; y = j\n    ", "return", " (x, y, ", "min", ")\n", "#算法模型：", "\n", "def", " ", "AGNES", "(", "dataset, dist, k", "):\n    ", "#初始化C和M", "\n    C = [];M = []\n    ", "for", " i ", "in", " dataset:\n        Ci = []\n        Ci.append(i)\n        C.append(Ci)\n    ", "for", " i ", "in", " C:\n        Mi = []\n        ", "for", " j ", "in", " C:\n            Mi.append(dist(i, j))\n        M.append(Mi)\n    q = ", "len", "(dataset)\n    ", "#合并更新", "\n    ", "while", " q > k:\n        x, y, ", "min", " = find_Min(M)\n        C[x].extend(C[y])\n        C.remove(C[y])\n        M = []\n        ", "for", " i ", "in", " C:\n            Mi = []\n            ", "for", " j ", "in", " C:\n                Mi.append(dist(i, j))\n            M.append(Mi)\n        q -= ", "1", "\n    ", "return", " C\n", "#画图", "\n", "def", " ", "draw", "(", "C", "):\n    colValue = [", "'r'", ", ", "'y'", ", ", "'g'", ", ", "'b'", ", ", "'c'", ", ", "'k'", ", ", "'m'", "]\n    ", "for", " i ", "in", " ", "range", "(", "len", "(C)):\n        coo_X = []    ", "#x坐标列表", "\n        coo_Y = []    ", "#y坐标列表", "\n        ", "for", " j ", "in", " ", "range", "(", "len", "(C[i])):\n            coo_X.append(C[i][j][", "0", "])\n            coo_Y.append(C[i][j][", "1", "])\n        pl.scatter(coo_X, coo_Y, marker=", "'x'", ", color=colValue[i%", "len", "(colValue)], label=i)\n\n    pl.legend(loc=", "'upper right'", ")\n    pl.show()\nC = AGNES(dataset, dist_avg, ", "3", ")\ndraw(C)\n\n", "\n", "运行结果及报错内容", "\n", "Traceback (most recent call last):\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 92, ", "in", " <module>\n    C = AGNES(dataset, dist_avg, 3)\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 62, ", "in", " AGNES\n    Mi.", "append", "(dist(i, j))\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 39, ", "in", " dist_avg\n    ", "return", " ", "sum", "(dist(i, j) ", "for", " i ", "in", " ", "Ci", " ", "for", " j ", "in", " Cj)/(len(", "Ci", ")*len(Cj))\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 39, ", "in", " <genexpr>\n    ", "return", " ", "sum", "(dist(i, j) ", "for", " i ", "in", " ", "Ci", " ", "for", " j ", "in", " Cj)/(len(", "Ci", ")*len(Cj))\n  ", "File", " ", "\"C:/各种东西练习/1/4.py\"", ", ", "line", " 28, ", "in", " dist\n    t = t + math.pow(a[i]-b[i], 2)\nTypeError: must be real number, not DataFrame\n\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "能帮我看一看代码中是否有其他问题", "并实现层次聚类Agnes算法", "能够从excel表格中读取数据，并以每一行为单位，进行层次聚类", "数据样式如图", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;布尔数组colindex用于索引时&amp;#xff0c;等效于元素为True的索引下标所组成的数组&amp;#xff0c;即np.array([0, 1, 4])&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy花式索引，不写newaxis的结果，搞不明白怎么计算的", ["twodim=np.arange(20).reshape(4,5)", "rowindex=np.array([0,2,1])", "colindex=np.array([1,1,0,0,1],dtype=bool)", "twoarr=twodim[rowindex,colindex]", "print(twoarr)", "\n", "结果为：", "[ 0 11  9]", "\n", "搞不明白为什么是这样的结果。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你 from skimage.io import imread 是直接引入了imread函数&lt;/p&gt;\n\n&lt;p&gt;要&lt;/p&gt;\n\n&lt;p&gt;img &amp;#61; imread(file)&lt;/p&gt;\n\n&lt;p&gt;这样调用&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["在使用函数时显示NameError: name 'skimage' is not defined", ["\n", "from pathlib import Path\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn import svm, metrics, datasets\nfrom sklearn.utils import Bunch\nfrom sklearn.model_selection import  train_test_split\nfrom skimage.io import imread# abc\nfrom skimage.transform import resize\n\n\ndef load_image_files(container_path, dimension=(64, 64)):  \n    image_dir = Path(container_path)\n    folders = [directory for directory in image_dir.iterdir() if directory.is_dir()]\n    categories = [fo.name for fo in folders]\n\n    descr = \"A image classification dataset\"\n    images = []\n    flat_data = []\n    target = []\n    for i, direc in enumerate(folders):\n        for file in direc.iterdir():\n            img = skimage.io.imread(file)\n            img_resized = resize(img, dimension, anti_aliasing=True, mode='reflect')\n            flat_data.append(img_resized.flatten()) \n            images.append(img_resized)\n            target.append(i)\n    flat_data = np.array(flat_data)\n    target = np.array(target)\n    images = np.array(images)\n\n    return Bunch(data=flat_data,\n                 target=target,\n                 target_names=categories,\n                 images=images,\n                 DESCR=descr)\n\nimage_dataset = load_image_files(\"G:\\images\")\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n\n&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt; &amp;#61; np.arange(&lt;span class=\"hljs-number\"&gt;64&lt;/span&gt;).reshape(&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(a)\n\n&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt; &amp;#61;&lt;span class=\"hljs-meta\"&gt; [1,3,6]&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;a_del&lt;/span&gt; &amp;#61; np.delete(a, b, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) # 删除a的第&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(a_del)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/289807822766183.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python3矩阵删除的问题", ["有一个矩阵a，和一个列表b，列表b里面记录了矩阵a的几个行数，怎么把矩阵a的列表b的所有行数删除", "\n", "#实例", "\n", "a", "=np.zeros((", "25", ",", "10", "))#一个", "25", "行", "10", "列的矩阵\n", "b", "=[", "1", ",", "3", ",", "6", ",", "8", ",", "10", ",", "14", ",", "19", ",", "23", "]#行数\n", "#删除a的第1，3，6，8，10，14，19，23行后结果是多少怎么求", "\n"]], "Tag": "算法设计"}
{"Answer": "这个原因是对于圆形的物体使用正方形的核去做膨胀和腐蚀就会变的像四边形，只要修改kernel变成圆形就好了；\r\n\r\n```\r\nimport cv2 as cv\r\n    import numpy as np\r\n    import math\r\n\r\n    pie = cv.imread('0000.png')\r\n    kernel = np.ones((7, 7), np.uint8)\r\n    kernel_re = []\r\n    rows, cols = kernel.shape\r\n    for i in range(rows):\r\n        result = [0 if math.sqrt((i-3)**2+(j-3)**2) &gt; 3 else 1 for j in range(cols)]\r\n        kernel_re.append(result)\r\n    kernel_re = np.array(kernel_re, np.uint8)\r\n    print(kernel_re, kernel)\r\n    print(type(kernel_re), type(kernel))\r\n    print(kernel_re.shape, kernel.shape)\r\n    dilate = cv.dilate(pie, kernel, iterations=10)\r\n    erosion = cv.erode(pie, kernel_re, iterations=10)\r\n    res = np.hstack((pie, dilate, erosion))\r\n    cv.imshow('res', res)\r\n    cv.waitKey(0)\r\n    cv.destroyAllWindows()\r\n```\r\n![图片说明](https://img-ask.csdn.net/upload/202009/21/1600667194_310167.png)", "Konwledge_Point": "应对NP完全问题", "Question": ["关于opencv（）中的腐蚀操作，我操作过后会让原来的圆变形，怎么让圆腐蚀后不变形依旧保持圆形？", ["代码：", "\nimport cv2 as cv", "\nimport numpy as np", "\npie=cv.imread('d:/pic/pie.png')", "\nkernel=np.ones((7,7),np.uint8)", "\ndilate=cv.dilate(pie,kernel,iterations=10)", "\nerosion=cv.erode(pie,kernel,iterations=10)", "\nres=np.hstack((pie,dilate,erosion))", "\ncv.imshow('res',res)", "\ncv.waitKey(0)", "\ncv.destroyAllWindows()", "\n\n", "结果："]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\ndf &amp;#61; pd.read_excel(&lt;span class=\"hljs-string\"&gt;r&amp;#39;C:\\Users\\jackey\\Desktop\\CSDN/test.xlsx&amp;#39;&lt;/span&gt;)\ndf &amp;#61; df.pivot_table(index&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;产品&amp;#39;&lt;/span&gt;,columns&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;月份&amp;#39;&lt;/span&gt;,values&amp;#61;[&lt;span class=\"hljs-string\"&gt;&amp;#39;销量&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;金额&amp;#39;&lt;/span&gt;],aggfunc&amp;#61;np.&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;)\ndf&amp;#61;df.swaplevel(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, axis&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\ndf&amp;#61;df.sort_values(by&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;月份&amp;#39;&lt;/span&gt;,axis&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;月份    1月        2月        3月        4月        5月&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;      金额  销量    金额  销量    金额  销量    金额  销量    金额  销量&lt;/span&gt;&lt;br /&gt;产品&lt;br /&gt;A    100   1   200   2   300   3   400   4   500   5&lt;br /&gt;B   1300  13  1400  14  1500  15  1600  16  1700  17&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pandas pivot table的columns和values上下顺序", ["问题遇到的现象和发生背景", "\n", "\n", "\n", "\n", "问题相关代码，请勿粘贴截图", "\n", "import numpy as np", "import pandas as pd", "df = pd.read_excel('111.xlsx', sheet_name='test')", "df = df.pivot_table(index='产品',columns='月份',values=['销量','金额'],aggfunc=np.sum)", "print(df)", "\n", "运行结果及报错内容", "\n", "希望把pivot table 的效果做成月份在上,不知道怎么填写参数", "\n", "我的解答思路和尝试过的方法", "\n", "反复测试了除了几种方法,都不成功", "\n", "我想要达到的结果", "\n", "希望把pivot table 的效果做成月份在上,不知道怎么填写参数"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;运行挺正常的呀&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/116000738766146.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;你看看控制台有没有其他的报错信息&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["tkinter继承问题", ["在写第二个analyse类是总是写到了它的父类上就是主界面上，直接把home类中的菜单覆盖了，可能是继承出现了问题，我把all_datas类的内容放到analyse下却是正常的，", "另外，time.sleep(4)  win_about.destroy()到时无法自动退出。", "\n", "class First_Page(object):\n    def __init__(self, master):\n        self.root = master\n        self.root.geometry(", "\"%dx%d\"", " % (700, 600))\n        self.root.title(", "'复盘'", ")  # 背景颜色\n        self.createPage()\n    def createPage(self, ", "cur_dirt", "=None):\n        self.page = tkinter.Frame(self.root, ", "width", "=600, ", "height", "=480, )\n        img1 = Image.open(", "\"股票图片.png\"", ")\n        img1 = img1.resize((700, 600)) \n        photo1 = ImageTk.PhotoImage(img1)  \n        label1 = tk.Label(self.page, ", "image", "=photo1, ", "borderwidth", "=0)\n        label1.img = photo1 \n        label1.grid(", "row", "=0, ", "column", "=1, ", "sticky", "=", "\"n\"", ")  \n        tkinter.Label(self.page, ", "text", "=", "'股票数据分析'", ", font=(", "'宋体'", ", 28)).place(", "x", "=240, ", "y", "=60)\n        tkinter.Label(self.page, ", "text", "=", "'请先爬取数据，等待5秒后再进入软件'", ", font=(", "'宋体'", ", 15)).place(", "x", "=200, ", "y", "=200)\n        tkinter.Button(self.page, ", "text", "=", "'爬取今日市场数据'", ", ", "command", "=scrapy,width=15, ", "height", "=3,).place(x=200, ", "y", "=300)\n        tkinter.Button(self.page, ", "text", "=", "'进入软件'", ", ", "width", "=15, ", "height", "=3, ", "command", "=self.success_tip).place(x=400, ", "y", "=300)\n        self.page.pack()\n    def success_tip(self):\n        ", "if", " os.path.isfile(", "\"今日股票趋势.csv\"", "):\n            self.page.destroy()\n            Home(self.root)\n        ", "else", ":\n            win_about = tk.Tk()\n            win_about.geometry(", "\"400x200\"", ")\n            win_about.title(", "\"提示\"", ")\n            tk.Label(win_about, ", "text", "=", "'请先爬取数据，等待5秒后再进入软件'", ", font=(", "'宋体'", ", 15)).place()\n            win_about.mainloop()\n            time.sleep(4)\n            win_about.destroy()\nclass Home(object):\n    def __init__(self, master: tkinter.Tk):\n        self.root = master\n        self.root.geometry(", "\"%dx%d\"", " % (1000,800))\n        self.root.title(", "'主界面'", ")\n        self.creat_page()\n    def creat_page(self):\n        # 市场数据页面\n        self.all_datas_frame = all_datas(self.root)\n        #分析页面\n        self.analyse_frame = analyse(self.root)\n        # 关于页面\n        self.about_frame = tkinter.Frame(self.root)\n        mesg = ", "\"xxx\"", "\n        tkinter.Label(self.about_frame, ", "text", "=mesg, font=(", "'宋体'", ", 10)).pack()\n        menubar = tkinter.Menu(self.root)\n        menubar.add_command(", "label", "=", "'市场数据'", ", ", "command", "=self.show_all_datas)\n        menubar.add_command(", "label", "=", "'个股数据'", ",command=self.show_analyse)\n        menubar.add_command(", "label", "=", "'修改'", ")\n        menubar.add_command(", "label", "=", "'关于'", ", ", "command", "=self.show_about)\n        self.root[", "'menu'", "] = menubar\n    def show_about(self):\n        self.about_frame.pack()\n        self.all_datas_frame.pack_forget()\n        self.analyse_frame.pack_forget()\n    def show_analyse(self):\n        self.analyse_frame.pack()\n        self.all_datas_frame.pack_forget()\n        self.about_frame.pack_forget()\n    def show_all_datas(self):\n        self.all_datas_frame.pack()\n        self.about_frame.pack_forget()\n        self.analyse_frame.pack_forget()\nclass all_datas(tkinter.Frame):\n    def __init__(self, root):\n        super().__init__(root)\n        self.table_vawe = tkinter.Frame()\nclass analyse(tkinter.Frame):\n    def __init__(self,root):\n        super().__init__(root)\n        self.plot = tkinter.Frame()\n        self.name = tkinter.Frame()\n        self.name.pack()\n        self.plot.pack(", "side", "=tkinter.TOP, ", "fill", "=tkinter.BOTH, ", "expand", "=1)\n        self.code = tkinter.StringVar()\n        self.create_matplotlib()\n        self.createWidget(self.figure)\n        self.master.mainloop()\n    def createWidget(self, figure):\n        tkinter.Label(self.name, ", "text", "=", "'请输入股票代码（请带后缀）'", ", ", "width", "=30).grid(row=0, ", "column", "=0)\n        tkinter.Entry(self.name, ", "textvariable", "=self.code, ", "width", "=30, ", "bd", "=5).grid(row=0, ", "column", "=1)\n        self.canvas = FigureCanvasTkAgg(figure, self.plot)\n        self.canvas.draw()\n        self.canvas.get_tk_widget().pack(", "side", "=tkinter.TOP, ", "fill", "=tkinter.BOTH, ", "expand", "=1)\n        toolbar = NavigationToolbar2Tk(self.canvas, self.plot)\n        toolbar.update()\n        self.canvas._tkcanvas.pack(", "side", "=tkinter.TOP, ", "fill", "=tkinter.BOTH, ", "expand", "=1)\n        self.button = tkinter.Entry(self, )\n        self.button.pack(", "side", "=tkinter.BOTTOM)\n    def create_matplotlib(self):\n        mpl.rcParams[", "'font.sans-serif'", "] = [", "'SimHei'", "] \n        mpl.rcParams[", "'axes.unicode_minus'", "] = ", "False", " \n        self.figure = plt.figure(", "num", "=2, figsize=(7, 4), ", "dpi", "=80, ", "facecolor", "=", "\"gold\"", ", ", "edgecolor", "=", "'green'", ", ", "frameon", "=", "True", ")\n        fig1 = plt.subplot(1, 1, 1) \n        x = np.arange(-2 * np.pi, 2 * np.pi, 0.1)\n        y1 = np.sin(x)\n        y2 = np.cos(x)\n        line1 = fig1.plot(x, y1, ", "color", "=", "'red'", ", ", "linewidth", "=2, ", "label", "=", "'y=sin(x)'", ", ", "linestyle", "=", "'--'", ") \n        line2 = fig1.plot(x, y2, ", "color", "=", "'green'", ", ", "label", "=", "'y=cos(x)'", ")\n        plt.setp(line2, ", "linewidth", "=1, ", "linestyle", "=", "'-'", ", ", "alpha", "=0.7)  \n        fig1.set_title(", "\"数学曲线图\"", ", ", "loc", "=", "'center'", ", ", "pad", "=20, ", "fontsize", "=", "'xx-large'", ", ", "color", "=", "'red'", ")\n        fig1.legend([", "'正弦'", ", ", "'余弦'", "], ", "loc", "=", "'lower right'", ", ", "facecolor", "=", "'orange'", ", ", "frameon", "=", "True", ", ", "shadow", "=", "True", ", ", "framealpha", "=0.7)\n        # ,", "fontsize", "=", "'xx-large'", "\n        fig1.set_xlabel(", "'(x)横坐标'", ")  \n        fig1.set_ylabel(", "\"(y)纵坐标\"", ")\n        fig1.set_yticks([-1, -1 / 2, 0, 1 / 2, 1]) \n        fig1.grid(", "which", "=", "'major'", ", ", "axis", "=", "'x'", ", ", "color", "=", "'gray'", ", ", "linestyle", "=", "'-'", ", ", "linewidth", "=0.5, ", "alpha", "=0.2)  \n", "if", " __name__ == ", "'__main__'", ":\n    root = tkinter.Tk()\n    First_Page(root)\n    root.mainloop()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;数值溢出啊&amp;#xff0c;你的结果值太大了就会这样&amp;#xff0c;但是按理来说你的x和y才等于2页不会啊&amp;#xff0c;除非你的矩阵里面本身就有很大的数值&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["使用numpy时遇到运行时错误", ["两个运行时警告了，而且在我完整的代码里没有相关计算结果", "overflow encountered in multiply", "invalid value encountered in add", "指向下面这条语句，一开始定义的x=2，y=2，然后其它3个变量都是numpy.ndarray类型", "predicRate= np.dot(user_vector, x * movie_lfm_vector + y * movie_bert_vector)", "然后改成下面语句就没有这两个警告了", "err = np.float32(realRate - np.dot(user_vector, x * movie_lfm_vector + y * movie_bert_vector))", "不知道是不是因为加了np.float32的原因"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;send_post方法没有return &amp;#xff0c;导致打印的结果为None&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Flask接口处理post请求时出现问题", ["Flask接口post请求之后另一边只能收到None", "\n", "代码能够正确运行，并且使用在接口代码中加入print能够正确输出内容，但是使用测试接口的代码时只能收到None", "\n", "而且在最后会出现一个\"POST / HTTP/1.1\" 500 -的信息", "\n", "\n", "这是接口的代码：\n", "import", " json\n", "import", " cv2\n", "from", " PIL ", "import", " Image\n", "import", " numpy ", "as", " np\n", "from", " modelscope.pipelines ", "import", " pipeline\n", "from", " modelscope.utils.constant ", "import", " Tasks\n", "from", " modelscope.outputs ", "import", " OutputKeys\n", "from", " flask ", "import", " request\n", "from", " flask ", "import", " jsonify\n", "from", " flask ", "import", " Flask,make_response\n", "import", " base64\n\nface_recognition = pipeline(Tasks.face_recognition, model=", "'damo/cv_ir101_facerecognition_cfglint'", ")\n\n", "# def face_recognition(image1,image2):", "\n", "#     emb1 = face_recognition(image1)[OutputKeys.IMG_EMBEDDING]", "\n", "#     emb2 = face_recognition(image2)[OutputKeys.IMG_EMBEDDING]", "\n", "#     sim = np.dot(emb1[0], emb2[0])", "\n", "#     sim=face_recognition(image1, image2)", "\n", "#     return jsonify(sim)", "\n", "#     return (f'Face cosine similarity={sim:.3f}, get_img1:{image1}  get_img2:{image2}')", "\n\n\napp = Flask(__name__)\napp.config[", "\"JSON_AS_ASCII\"", "] = ", "False", "\n", "def", " ", "making_response", "(", "json_data", "):\n    response = make_response(jsonify(json_data))\n    response.headers[", "'Content-Type'", "] = ", "'application/json;charset=UTF-8'", "\n    ", "return", " response\n\n", "@app.route(", "\"/\"", ",methods=[", "\"POST\"", "]", ")", "\n", "def", " ", "first_post", "():\n    my_json = {", "\"msg\"", ": ", "None", ",\n               ", "\"sim\"", ": ", "None", "\n                }\n    data = request.get_data()\n    ", "if", " ", "not", " data:\n        my_json[", "\"msg\"", "] = ", "\"No data obtained!\"", "\n    ", "try", ":\n        data=json.loads(data)\n        image1 = base64.b64decode(data[", "\"image1\"", "].encode())\n        image2 = base64.b64decode(data[", "\"image2\"", "].encode())\n        ", "# image1_base64 = data[\"image1\"].encode()", "\n        ", "# image2_base64 = data[\"image2\"].encode()", "\n        image1 = cv2.imdecode(np.frombuffer(image1, np.uint8), cv2.IMREAD_ANYCOLOR) ", "#cv2.IMREAD_UNCHANGED", "\n        image2 = cv2.imdecode(np.frombuffer(image2, np.uint8), cv2.IMREAD_ANYCOLOR)\n\n        emb1 = face_recognition(image1)[OutputKeys.IMG_EMBEDDING]\n        emb2 = face_recognition(image2)[OutputKeys.IMG_EMBEDDING]\n        sim = np.dot(emb1[", "0", "], emb2[", "0", "])\n        ", "print", "(sim)\n        my_json[", "\"msg\"", "] = ", "\"successful!\"", "\n        my_json[", "\"sim\"", "] = sim\n\n        ", "# face_recognition(image1,image2)", "\n    ", "except", " Exception ", "as", " e:\n        ", "print", "(e)\n        my_json[", "\"msg\"", "] = ", "\"出错了，请检查是否正确访问!\"", "\n        response = making_response(my_json)\n        ", "return", " response\n\n    response = make_response(jsonify(my_json))\n    response.headers[", "'Content-Type'", "] = ", "'application/json;charset=UTF-8'", "\n    ", "return", " response\n\n", "if", " __name__ == ", "\"__main__\"", ":\n    app.run(host=", "'0.0.0.0'", ", port=", "12000", ", debug=", "True", ", use_reloader=", "False", ")\n\n这是我测试用的代码：\n", "import", " os\n", "import", " time\n", "import", " json\n", "import", " base64\n", "import", " random\n", "import", " requests\n\n\nIMG_FORMATS = [", "'bmp'", ", ", "'jpg'", ", ", "'jpeg'", ", ", "'png'", ", ", "'tif'", ", ", "'tiff'", ", ", "'dng'", ", ", "'webp'", ", ", "'mpo'", "]\n\n\n", "# 文件目录遍历，返回[fileP, fileN]", "\n", "def", " ", "get_filepaths", "(", "path", "):\n    pathlists = []\n    ", "for", " root, dirs, files ", "in", " os.walk(path):\n        ", "for", " file ", "in", " files:\n            pathlists.append([os.path.join(root, file), file])\n    ", "return", " pathlists\n\n\n", "class", " ", "api_test", ":\n    ", "def", " ", "__init__", "(", "self", "):\n        self.url = ", "\"http://0.0.0.0:12000/\"", "  ", "# nginx url", "\n\n", "    @staticmethod", "\n    ", "def", " ", "read_img_base64", "(", "p", "):\n        ", "with", " ", "open", "(p, ", "'rb'", ") ", "as", " f:\n            imgString = base64.b64encode(f.read())\n            base64_data = imgString.decode()\n        ", "return", " base64_data\n\n    ", "def", " ", "send_post", "(", "self, img_path1,img_path2", "):\n        base64_data1 = self.read_img_base64(img_path1)\n        base64_data2 = self.read_img_base64(img_path2)\n        ", "#image_name = str(img_path)", "\n        data = {\n            ", "\"image1\"", ": base64_data1,\n            ", "\"image2\"", ": base64_data2\n        }\n\n        session = requests.session()\n        start_time = time.time()\n        response = session.post(self.url, json.dumps(data))  ", "# Json格式请求", "\n        end_time = time.time()\n        run_time = end_time - start_time\n        ", "# logger.info('接口调用时间为：%s' % run_time)", "\n        ", "# logger.info(response.status_code)", "\n        ", "# logger.info(response.text)", "\n        session.close()\n        response.close()\n\n\n", "if", " __name__ == ", "\"__main__\"", ":\n    ", "# 开始单元测试", "\n    api = api_test()\n\n\n    ", "# 单张图片测试", "\n    img_path1 = ", "'./样本.jpg'", "\n    img_path2 = ", "'./样本1.jpg'", "\n    res = api.send_post(img_path1,img_path2)\n    ", "print", "(res)\n\n", "###### ", "\nPress CTRL+C to quit\n/opt/conda/lib/python3", ".7", "/site-packages/mmdet/core/anchor/anchor_generator.py:", "333", ": UserWarning: ``grid_anchors`` would be deprecated soon. Please use ``grid_priors`` \n  warnings.warn(", "'``grid_anchors`` would be deprecated soon. '", "\n/opt/conda/lib/python3", ".7", "/site-packages/mmdet/core/anchor/anchor_generator.py:", "370", ": UserWarning: ``single_level_grid_anchors`` would be deprecated soon. Please use ``single_level_grid_priors`` \n  ", "'``single_level_grid_anchors`` would be deprecated soon. '", "\n", "127.0", ".0", ".1", " - - [", "29", "/Dec/", "2022", " ", "11", ":", "20", ":", "27", "] ", "\"POST / HTTP/1.1\"", " ", "500", " -\n这是", "print", "输出的结果：-", "0.11088603", "\n这是测试代码得到的结果：", "None", "\n\n", "\n", "Press CTRL+C to quit", "\n", "/opt/conda/lib/python3.7/site-packages/mmdet/core/anchor/anchor_generator.py:333: UserWarning: ", "grid_anchors", " would be deprecated soon. Please use ", "grid_priors", "  warnings.warn('", "grid_anchors", " would be deprecated soon. '", "/opt/conda/lib/python3.7/site-packages/mmdet/core/anchor/anchor_generator.py:370: UserWarning: ", "single_level_grid_anchors", " would be deprecated soon. Please use ", "single_level_grid_priors", "  '", "single_level_grid_anchors", " would be deprecated soon. '", "127.0.0.1 - - [29/Dec/2022 11:20:27] \"POST / HTTP/1.1\" 500 -", "这是print输出的结果：-0.11088603", "这是测试代码得到的结果：None", "\n", "一头雾水。不知道是哪出了问题", "\n", "我想要测试代码访问时 能把输出的结果也就是代码中的sim这个值返回给访问的那一端", "\n", "PS：这个模型是魔塔社区的模型 我用来练习使用的，如果各位需要测试使用的话可以直接去", "https://www.modelscope.cn/models/damo/cv_ir101_facerecognition_cfglint/summary", " 打开使用测试"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这样&amp;#xff1f;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\nimport re\nimport os\nimport numpy as np\nfiles &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\nx&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\ny&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\ni&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\nj&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\ndir_file_path &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;xukka&amp;#39;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; file &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; os&lt;span class=\"hljs-selector-class\"&gt;.listdir&lt;/span&gt;(dir_file_path):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; re&lt;span class=\"hljs-selector-class\"&gt;.findall&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;.*?txt&amp;#39;&lt;/span&gt;,file):\n        files&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(file)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; name &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; files:\n    &lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.loadtxt&lt;/span&gt;(dir_file_path&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&amp;#43;name)\n    x&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[:,0]&lt;/span&gt;)\n    y&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[:,1]&lt;/span&gt;)\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(len(x)): #这里让x变成x1&amp;#xff0c;x2,x3\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        x1&amp;#61;x&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt;\n    elif i&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        x2&amp;#61;x&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        x3&amp;#61;x&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt;\n        \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(x1)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(x2)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(x3)&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的问题：我希望可以通过循环让x变成x1=[],x2=[],x3=[]比如说第一次循环是x1", ["我希望可以通过循环让x变成x1=[],x2=[],x3=[]", "比如说第一次循环是x1，第二次变成x2", "\n", "\n```python\nimport re\nimport os\nimport numpy as np\n\nfiles = ", "[]", "\nx=", "[]", "\ny=", "[]", "\n\ni=", "0", "\nj=", "0", "\ndir_file_path = ", "'xukka'", "\n", "for", " file ", "in", " os", ".listdir", "(dir_file_path):\n    ", "if", " re", ".findall", "(", "'.*?txt'", ",file):\n        files", ".append", "(file)\n", "for", " name ", "in", " files:\n    ", "a", " = np", ".loadtxt", "(name)\n    x", ".append", "(", "a", "[:,0]", ")\n    y", ".append", "(", "a", "[:,1]", ")\n", "print", "(x)", "\n", "for", " ", "i", " ", "in", " len(x): #这里让x变成x1，x2,x3\n\n", "print", "(x)", "\n\n", "\n", "```"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这个结果直接滤波下不就是了吗。。。来上几次闭操作&amp;#xff0c;或者用findcontours把面积区域小的直接去掉就是了。如果能保证绿色区域最大&amp;#xff0c;那直接找最大的区域就是了。&lt;/p&gt;\n\n&lt;p&gt;还有一个方法就是将低的那个绿色阈值改大点&amp;#xff0c;像你这种的绿色这么亮&amp;#xff0c;阈值设定高点试试。&lt;/p&gt;\n\n&lt;p&gt;其实你这个图片不建议使用hsv&amp;#xff0c;直接bgr通道就能做&amp;#xff0c;提取g通道&amp;#xff0c;直接二值化&amp;#xff0c;阈值设定高点&amp;#xff0c;比如200左右&amp;#xff0c;直接就出来了&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["OpenCV提取HSV颜色范围问题", ["\n", "src = cv.imread(\"D://1.jpg\")\nhsv = cv.cvtColor(src, cv.COLOR_BGR2HSV)\nlower_hsv = np.array([35, 43, 46])\nupper_hsv = np.array([77, 255, 255])\nmask = cv.inRange(hsv, lowerb=lower_hsv, upperb=upper_hsv)\ncv.imshow(\"video\", src)\ncv.imshow(\"mask\", mask)", "\n\n", "代码如上，提取的是绿色的，那个HSV范围是网上的表格里的。想提取绿色的球，可结果也太夸张了。", "\n\n", "\n\n", "结果", "\n\n", "\n\n", "即使没有进行滤波，这结果好像也有点夸张，我看其它地方的颜色也不怎么绿啊。进行滤波后一样有很多干扰，提取不出绿色的球。能帮我看看怎么提取出绿色的球吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;对 a 进行遍历&lt;br /&gt;每个元素的值翻倍&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["这个numpy里for循环的代码什么意思", ["为什么这样可以修改数组a", "\n", "\nimport numpy as np\n", "a", " = np", ".arange", "(", "0", ",", "60", ",", "5", ")\n", "a", " = ", "a", ".reshape", "(", "3", ",", "4", ") \nprint (", "\"原数组是:\"", ",a)\n", "for", " x ", "in", " np", ".nditer", "(", "a", ", op_flags=", "[", "'readwrite'", "]", "):\n    x", "[...]", "=", "2", "*x\nprint (", "'修改后的数组是：'", ",a)\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;以下答案由GPT-3.5大模型与博主波罗歌共同编写&amp;#xff1a;&lt;br /&gt;根据您提供的代码&amp;#xff0c;可以发现训练出来的 LSTM 模型在预测时的表现并不理想。在分析时需要注意以下几点&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;数据归一化&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;由于 LSTM 模型的特点&amp;#xff0c;输入数据需要进行归一化。在您的代码中已经使用了 &lt;code class=\"language-javascript\"&gt;sklearn&lt;/code&gt; 的 &lt;code class=\"language-javascript\"&gt;MinMaxScaler&lt;/code&gt; 进行数据归一化&amp;#xff0c;这是正确的。&lt;/p&gt;\n&lt;ol start=\"2\"&gt;&lt;li&gt;数据集生成方式&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;在您的代码中&amp;#xff0c;数据集是通过将连续的若干行数据合并为一个训练/测试数据&amp;#xff0c;这种方式虽然能够将序列信息传给模型&amp;#xff0c;但是容易造成信息丢失。而在实际物流预测的应用场景中&amp;#xff0c;时间序列的填充方式可能不太合适。因此&amp;#xff0c;建议您使用一些其他的方法&amp;#xff0c;例如滑动窗口法等&amp;#xff0c;来生成数据集。&lt;/p&gt;\n&lt;ol start=\"3\"&gt;&lt;li&gt;模型参数的选择&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;您的代码中选择了 2 层 LSTM&amp;#xff0c;hidden state 的维度&amp;#xff0c;hidden_dim 是 32&amp;#xff0c;学习率 lr 是 0.01。这些参数的选择可能不太合适。建议您通过一定的试验&amp;#xff0c;调整模型参数&amp;#xff0c;比如可以尝试调整 LSTM 层数、隐藏节点数等参数&amp;#xff0c;从而得到更好的模型。此外&amp;#xff0c;建议您在模型训练过程中使用交叉验证等技术&amp;#xff0c;对模型进行评估和调优。&lt;/p&gt;\n&lt;ol start=\"4\"&gt;&lt;li&gt;模型训练过程中的问题&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;在您的代码中&amp;#xff0c;训练过程中使用了 &lt;code class=\"language-javascript\"&gt;y_train_lstm&lt;/code&gt; 进行训练和误差计算&amp;#xff0c;但是未调用 &lt;code class=\"language-javascript\"&gt;model.eval()&lt;/code&gt; 方法以使用 &lt;code class=\"language-javascript\"&gt;y_test_lstm&lt;/code&gt; 进行测试。此外&amp;#xff0c;代码中使用了 &lt;code class=\"language-javascript\"&gt;torch.nn.MSELoss()&lt;/code&gt; 作为损失函数&amp;#xff0c;但是可以尝试使用其他的损失函数来进行训练&amp;#xff0c;比如说 Huber Loss&amp;#xff0c;MAE 等&amp;#xff0c;从而提高模型的鲁棒性。&lt;/p&gt;\n&lt;p&gt;综上所述&amp;#xff0c;建议您参考一些 LSTM 预测模型的开源项目&amp;#xff0c;尝试使用其他的数据集&amp;#xff0c;并调整模型参数&amp;#xff0c;从而得到更好的预测结果。以下是一个 LSTM 预测模型的示例代码&amp;#xff0c;仅供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; torch\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; torch.nn.functional &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; F\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; MinMaxScaler\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; mean_squared_error\n\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;LSTMModel&lt;/span&gt;(torch.nn.Module):\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;__init__&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, input_size, hidden_size, num_layers, output_size&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;super&lt;/span&gt;().__init__()\n        self.hidden_size &amp;#61; hidden_size\n        self.num_layers &amp;#61; num_layers\n        self.lstm &amp;#61; torch.nn.LSTM(input_size&amp;#61;input_size, hidden_size&amp;#61;hidden_size, num_layers&amp;#61;num_layers, batch_first&amp;#61;&lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;)\n        self.fc &amp;#61; torch.nn.Linear(in_features&amp;#61;hidden_size, out_features&amp;#61;output_size)\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;forward&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, x&lt;/span&gt;):\n        h_0 &amp;#61; torch.zeros(self.num_layers, x.size(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;), self.hidden_size).to(x.device)\n        c_0 &amp;#61; torch.zeros(self.num_layers, x.size(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;), self.hidden_size).to(x.device)\n        _, (h, _) &amp;#61; self.lstm(x, (h_0, c_0))\n        out &amp;#61; self.fc(h[-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, :, :])\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; out\n\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Trainer&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;__init__&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, model, loss_fn, optimizer&lt;/span&gt;):\n        self.model &amp;#61; model\n        self.loss_fn &amp;#61; loss_fn\n        self.optimizer &amp;#61; optimizer\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;train&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, x, y&lt;/span&gt;):\n        self.model.train()\n        self.optimizer.zero_grad()\n        out &amp;#61; self.model(x)\n        loss &amp;#61; self.loss_fn(out.view(-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;), y.view(-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\n        loss.backward()\n        self.optimizer.step()\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; loss.item()\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;validate&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, x, y&lt;/span&gt;):\n        self.model.&lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;()\n        &lt;span class=\"hljs-keyword\"&gt;with&lt;/span&gt; torch.no_grad():\n            out &amp;#61; self.model(x)\n            loss &amp;#61; self.loss_fn(out.view(-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;), y.view(-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; loss.item()\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;predict&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, x&lt;/span&gt;):\n        self.model.&lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;()\n        &lt;span class=\"hljs-keyword\"&gt;with&lt;/span&gt; torch.no_grad():\n            out &amp;#61; self.model(x)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; out.view(-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;save&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, epoch, model_path&lt;/span&gt;):\n        torch.save({\n            &lt;span class=\"hljs-string\"&gt;&amp;#39;epoch&amp;#39;&lt;/span&gt;: epoch,\n            &lt;span class=\"hljs-string\"&gt;&amp;#39;state_dict&amp;#39;&lt;/span&gt;: self.model.state_dict(),\n            &lt;span class=\"hljs-string\"&gt;&amp;#39;optimizer_state_dict&amp;#39;&lt;/span&gt;: self.optimizer.state_dict(),\n        }, model_path)\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;load&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, model_path&lt;/span&gt;):\n        checkpoint &amp;#61; torch.load(model_path)\n        self.model.load_state_dict(checkpoint[&lt;span class=\"hljs-string\"&gt;&amp;#39;state_dict&amp;#39;&lt;/span&gt;])\n        self.optimizer.load_state_dict(checkpoint[&lt;span class=\"hljs-string\"&gt;&amp;#39;optimizer_state_dict&amp;#39;&lt;/span&gt;])\n        epoch &amp;#61; checkpoint[&lt;span class=\"hljs-string\"&gt;&amp;#39;epoch&amp;#39;&lt;/span&gt;]\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; epoch\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;preprocess_data&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;data, train_ratio&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n    :param data: pandas.DataFrame, raw data with column &amp;#39;T-A11&amp;#39;\n    :param train_ratio: float, ratio of training set to validation set\n    :return: tuple, (train_data, val_data), each of which contain numpy.ndarray of shape (num_data, num_features)\n    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    scaler &amp;#61; MinMaxScaler()\n    data_norm &amp;#61; scaler.fit_transform(data)\n\n    train_size &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(data_norm) * train_ratio)\n    train_data &amp;#61; data_norm[:train_size, :]\n    val_data &amp;#61; data_norm[train_size:, :]\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; train_data, val_data\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;create_dataset&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;data, lookback&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n    :param data: numpy.ndarray of shape (num_data, num_features)\n    :param lookback: int, number of past time steps to use for next time step prediction\n    :return: tuple, (x, y) numpy.ndarray of shapes (num_samples, lookback, num_features) and (num_samples, 1)\n    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    x, y &amp;#61; [], []\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(lookback, &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(data)):\n        x_ &amp;#61; data[i-lookback:i, :]\n        y_ &amp;#61; data[i, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]  &lt;span class=\"hljs-comment\"&gt;# predict only first column (T-A11)&lt;/span&gt;\n        x.append(x_)\n        y.append(y_)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; np.array(x), np.array(y).reshape(-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;train_model&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;train_data, val_data, lookback, hidden_size, num_layers, num_epochs, lr&lt;/span&gt;):\n    train_x, train_y &amp;#61; create_dataset(train_data, lookback)\n    val_x, val_y &amp;#61; create_dataset(val_data, lookback)\n\n    device &amp;#61; torch.device(&lt;span class=\"hljs-string\"&gt;&amp;#39;cuda&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; torch.cuda.is_available() &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;cpu&amp;#39;&lt;/span&gt;)\n\n    model &amp;#61; LSTMModel(input_size&amp;#61;train_x.shape[-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], hidden_size&amp;#61;hidden_size, num_layers&amp;#61;num_layers,\n                      output_size&amp;#61;train_y.shape[-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]).to(device)\n    loss_fn &amp;#61; torch.nn.MSELoss()\n    optimizer &amp;#61; torch.optim.Adam(model.parameters(), lr&amp;#61;lr, weight_decay&amp;#61;&lt;span class=\"hljs-number\"&gt;1e-5&lt;/span&gt;)\n    trainer &amp;#61; Trainer(model, loss_fn, optimizer)\n\n    train_losses, val_losses &amp;#61; [], []\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果我的回答解决了您的问题&amp;#xff0c;请采纳&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#LSTM#的问题，如何解决？", ["毕业论文，物流方向的，想做一个LSTM的预测，在b站上找了个教程，训练出的结果绘图符合预期，但是需要预测的目标数据范围从22.2-23.6变成了0-120。", "因为之前从未接触过python和机器学习，所以就把全部代码放出来：", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "这里得出的RMSE也不符合预期，找正常数据来说跨度不可能这么大", "\n", "在这里的结果中，y轴数据范围变成了0-120，但是图形符合预期", "\n", "\n", "在最后的汇总图里面，y轴数据仍然和原来的不一样，图形仍符合预期", "训练过程和代码如上，使用的是jupyter，求知道怎么让训练结果的y轴和实际数据相同，且RMSE符合预期，谢谢各位。", "jupyter上复制下来的代码在这下面：", "\n", "\n", "# In[1]:", "\n\n\nimport numpy as np\nimport pandas as pd\n\n\n", "# In[2]:", "\n\n\nfilepath = ", "'C:/Users/本子怪/Desktop/论文/实验数据/分析用数据/DATA10.01.csv'", "\ndata = pd.read_csv(filepath)\ndata = data.sort_values(", "'Time'", ")\ndata.head()\n\n\n", "# In[3]:", "\n\n\ndata.shape\n\n\n", "# In[4]:", "\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns. set_style(", "\"darkgrid\"", ")\nplt. figure(figsize = (21, 9))\nplt. plot(data[[", "'T-A11'", "]])\nplt. xticks (range(0,data.shape[0],150), data[", "'Time'", "].loc[::150],", "rotation", "=45)\nplt. title(", "\"ee Stock Price\"", ",", "fontsize", "=18, ", "fontweight", "=", "'bold'", ")\nplt. xlabel(", "'Time'", ",", "fontsize", "=18)\nplt. ylabel(", "'T-A11'", ",", "fontsize", "=18)\nplt. show()\n\n\n", "# In[5]:", "\n\n\nprice = data[[", "'T-A11'", ",", "'Twr'", ",", "'PreCool'", ",", "'Tpre'", ",", "'Cmen'", ",", "'Aopen'", "]]\nprice\n\n\n", "# In[6]:", "\n\n\n", "from", " sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range=(-1,1))\nprice[", "'T-A11'", "] = scaler.fit_transform(price[", "'T-A11'", "].values.reshape(-1,1))\n\n\n", "# In[7]:", "\n\n\nprice[", "'Twr'", "] = scaler.fit_transform(price[", "'Twr'", "].values.reshape(-1,1))\n\n\n", "# In[8]:", "\n\n\nprice[", "'PreCool'", "] = scaler.fit_transform(price[", "'PreCool'", "].values.reshape(-1,1))\n\n\n", "# In[9]:", "\n\n\nprice[", "'Tpre'", "] = scaler.fit_transform(price[", "'Tpre'", "].values.reshape(-1,1))\n\n\n", "# In[10]:", "\n\n\nprice[", "'Cmen'", "] = scaler.fit_transform(price[", "'Cmen'", "].values.reshape(-1,1))\n\n\n", "# In[11]:", "\n\n\nprice[", "'Aopen'", "] = scaler.fit_transform(price[", "'Aopen'", "].values.reshape(-1,1))\nprice\n\n\n", "# In[12]:", "\n\n\ndef split_data(stock, lookback):\n    data_raw = stock.to_numpy() \n    data = []\n    \n", "# you can free play (seqlength)", "\n    ", "for", " index ", "in", " range(len(data_raw) - lookback):\n        data.append(data_raw[index: index + lookback])\n\n    data = np.array(data);\n    test_set_size = int(np.round(0.2 * data.shape[0])) \n    train_set_size = data.shape[0] - (test_set_size)\n\n    x_train = data[:train_set_size,:-1,:]\n    y_train = data[:train_set_size,-1,0:1]\n\n    x_test = data[train_set_size:,:-1,:] \n    y_test = data[train_set_size:,-1,0:1]\n\n    return [x_train, y_train, x_test, y_test]\n\n\n", "# In[13]:", "\n\n\nlookback = 20\nx_train, y_train, x_test, y_test = split_data(price, lookback) \n", "print", "(", "'x_train.shape = '", ",x_train.shape) \n", "print", "(", "'y_train.shape = '", ",y_train.shape) \n", "print", "(", "'x_test.shape = '", ",x_test.shape) \n", "print", "(", "'y_test.shape = '", ",y_test.shape)\n\n\n", "# In[14]:", "\n\n\nimport torch\nimport torch.nn as nn\n\nx_train = torch.from_numpy (x_train).type(torch.Tensor) \nx_test = torch.from_numpy(x_test).type(torch.Tensor)\ny_train_lstm = torch.from_numpy(y_train).type(torch.Tensor) \ny_test_lstm = torch.from_numpy(y_test).type(torch.Tensor) \ny_train_gru = torch.from_numpy(y_train).type(torch.Tensor) \ny_test_gru = torch.from_numpy(y_test).type(torch.Tensor)\n\n\n", "# In[15]:", "\n\n\ninput_dim = 6\nhidden_dim = 32\nnum_layers = 2\noutput_dim = 1\nnum_epochs = 100\n\n\n", "# In[16]:", "\n\n\nclass LSTM(nn.Module):\n    def __init__(self, input_dim, hidden_dim, num_layers, output_dim):\n        super(LSTM, self). __init__() \n        self.hidden_dim = hidden_dim \n        self.num_layers = num_layers\n\n        self.lstm = nn.LSTM(input_dim, hidden_dim, num_layers, ", "batch_first", "=", "True", ") \n        self.fc = nn.Linear(hidden_dim, output_dim)\n\n    def forward(self, x):\n        h0 = torch.zeros(self.num_layers, x.size(0), self.hidden_dim).requires_grad_() \n        c0 = torch.zeros(self.num_layers, x.size(0), self.hidden_dim).requires_grad_() \n        out, (hn,cn)= self.lstm(x, (h0.detach(), c0.detach()))\n        out = self.fc(out[:,-1, :]) \n        return out\n\n\n", "# In[17]:", "\n\n\nmodel = LSTM(", "input_dim", "=input_dim, hidden_dim = hidden_dim, num_layers = num_layers, output_dim = output_dim) \ncriterion = torch.nn.MSELoss()\noptimiser = torch.optim.Adam(model.parameters(),", "lr", "=0.01)\n\n\n", "# In[18]:", "\n\n\nimport time\n\nhist = np.zeros(num_epochs) \nstart_time = time.time() \nlstm = []\n\n", "for", " t ", "in", " range(num_epochs):\n    y_train_pred = model(x_train)\n\n    loss = criterion(y_train_pred, y_train_lstm) \n    ", "print", "(", "\"Epoch \"", ", t,", "\"MSE:\"", ", loss.item()) \n    hist[t] = loss.item()\n\n    optimiser.zero_grad() \n    loss.backward()\n    optimiser.", "step", "()\n\ntraining_time = time.time()-start_time\n", "print", "(", "\"Training time: {}\"", ".format(training_time))\n\n\n", "# In[19]:", "\n\n\npredict = pd.DataFrame(scaler.inverse_transform(y_train_pred.detach().numpy())) \noriginal = pd.DataFrame(scaler.inverse_transform(y_train_lstm.detach().numpy()))\n\n\n", "# In[20]:", "\n\n\nimport seaborn as sns\nsns.set_style(", "\"darkgrid\"", ")\n\nfig = plt.figure()\nfig.subplots_adjust(", "hspace", "=0.2, ", "wspace", "=0.2)\n\nplt.subplot(1,2,1)\nax = sns.lineplot(x = original.index, y = original[0], ", "label", "=", "\"Data\"", ", ", "color", "=", "'royalblue'", ")\nax = sns.lineplot(x = predict.index, y = predict[0], ", "label", "=", "\"Training Prediction (LSTM)\"", ", ", "color", "=", "'tomato'", ")\nax.set_title(", "'Stock price'", ", size = 14, ", "fontweight", "=", "'bold'", ") \nax.set_xlabel(", "\"Time\"", ",size = 14)\nax.set_ylabel(", "\"T-A11\"", ",size = 14) \nax.set_xticklabels(", "''", ", ", "size", "=10)\n", "#手动更改标签以及刻度", "\n", "#ax.set_yticklabels([22.2,22.4,22.6,22.8,23.0,23.2,23.4,23.6])", "\n\nplt.subplot(1,2,2)\nax = sns.lineplot(", "data", "=hist, ", "color", "=", "'royalblue'", ") \nax.set_xlabel(", "\"Epoch\"", ", size = 14) \nax.set_ylabel(", "\"Loss\"", ", size =14)\nax.set_title(", "\"Training Loss\"", ", size = 14, fontweight= ", "'bold'", ") \nfig.set_figheight(6) \nfig.set_figwidth(16)\n\n\n", "# In[21]:", "\n\n\nimport math, time\n", "from", " sklearn.metrics import mean_squared_error\n\n", "# make predictions", "\ny_test_pred = model(x_test)\n\n", "# invert predictions", "\ny_train_pred = scaler.inverse_transform(y_train_pred.detach().numpy()) \ny_train = scaler.inverse_transform(y_train_lstm.detach().numpy())\ny_test_pred = scaler.inverse_transform(y_test_pred.detach().numpy()) \ny_test = scaler.inverse_transform(y_test_lstm.detach().numpy())\n\n", "# calculate root mean squared error", "\ntrainScore = math.sqrt(mean_squared_error(y_train[:,0], y_train_pred[:,0])) \n", "print", "(", "'Train Score: %.2f RMSE'", " % (trainScore))\ntestScore = math.sqrt(mean_squared_error(y_test[:,0], y_test_pred[:,0])) \n", "print", "(", "'Test Score: %.2f RMSE'", " % (testScore)) \nlstm.append(trainScore) \nlstm.append(testScore)\nlstm.append(training_time)\n\n\n", "# In[22]:", "\n\n\nnew_price = price[[", "'T-A11'", "]]\nnew_price\n\n\n", "# In[23]:", "\n\n\ntrainPredictPlot = np.empty_like(new_price)\ntrainPredictPlot[:,0] = np.nan\ntrainPredictPlot[lookback", ":len", "(y_train_pred)+lookback, :] = y_train_pred\n\n\n", "# In[24]:", "\n\n\ntestPredictPlot = np.empty_like(new_price)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(y_train_pred)+lookback-1", ":len", "(price)-1, :] = y_test_pred\n\n\n", "# In[25]:", "\n\n\noriginal = scaler.inverse_transform(price[", "'T-A11'", "].values.reshape(-1,1))\n\npredictions = np.append(trainPredictPlot,testPredictPlot, ", "axis", "=1) \npredictions = np.append(predictions, original,", "axis", "=1) \nresult = pd.DataFrame(predictions)\n\n\n", "# In[26]:", "\n\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(go.Scatter(", "x", "=result.index, ", "y", "=result[0],\n                    ", "mode", "=", "'lines'", ",\n                    ", "name", "=", "'Train prediction'", ")))\nfig.add_trace(go.Scatter(", "x", "=result.index, ", "y", "=result[1],\n                    ", "mode", "=", "'lines'", ",\n                    ", "name", "=", "'Test prediction'", "))\nfig.add_trace(go.Scatter(go.Scatter(", "x", "=result.index, ", "y", "=result[2],\n                   ", "mode", "=", "'lines'", ",\n                   ", "name", "=", "'Actual Value'", ")))\nfig.update_layout(\n    ", "xaxis", "=dict(\n        ", "showline", "=", "True", ", \n        ", "showgrid", "=", "True", ",\n        ", "showticklabels", "=", "False", ", \n        ", "linecolor", "=", "'white'", ", \n        ", "linewidth", "=2\n    ),\n    ", "yaxis", "=dict(\n        ", "title_text", "=", "'当前温度 (T-A11)'", ", \n        ", "titlefont", "=dict(\n            ", "family", "=", "'Rockwell'", ", \n            ", "size", "=12,\n            ", "color", "=", "'white'", ",\n        ),\n        ", "showline", "=", "True", ", \n        ", "showgrid", "=", "True", ",\n        ", "showticklabels", "=", "True", ", \n        ", "linecolor", "=", "'white'", ", \n        ", "linewidth", "=2,\n        ", "ticks", "=", "'outside'", ",\n        ", "tickfont", "=dict(\n            ", "family", "=", "'Rockwell'", ", \n            ", "size", "=12,\n            ", "color", "=", "'white'", ",\n        ),\n    ),\n    ", "showlegend", "=", "True", ",\n    template =", "'plotly_dark'", "\n\n)\n\n\n\nannotations = []\nannotations.append(dict(", "xref", "=", "'paper'", ", ", "yref", "=", "'paper'", ", ", "x", "=0.0, ", "y", "=1.05,\n                              ", "xanchor", "=", "'left'", ", ", "yanchor", "=", "'bottom'", ", \n                              ", "text", "=", "'Results (LSTM)'", ",\n                              ", "font", "=dict(family='Rockwell',\n                                        ", "size", "=26,\n                                        ", "color", "=", "'white'", "),\n                              ", "showarrow", "=", "False", "))\nfig.update_layout(", "annotations", "=annotations)\n\nfig.show()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;矩阵形状错误了&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["学习OpenCV时遇到如下问题：error: (-5:Bad argument) Wrong shapes for given matrices. 怎么解决？", ["问题遇到的现象和发生背景", "\n", "刚刚学习openCV，打算调用笔记本电脑上的摄像头来简单实现人脸识别，输出身份。但在进行识别时报错，一时无法解决，前来请教。传入识别器的图片和训练用图片都一样是640*480大小，3通道。将图像转化为灰度图像后程序可以运行，但彩色该怎么办？", "\n", "问题相关代码，请勿粘贴截图", "\n", "import cv2\nimport numpy as np\nfrom cv2 import VideoCapture\n\nphotos=list()\nlables=list()\nphotos", ".append", "(cv2", ".imread", "(", "\"a1.jpg\"", "))\nphotos", ".append", "(cv2", ".imread", "(", "\"a2.jpg\"", "))\nphotos", ".append", "(cv2", ".imread", "(", "\"a3.jpg\"", "))\nlables", ".append", "(", "0", ")\nlables", ".append", "(", "0", ")\nlables", ".append", "(", "0", ")\n\nphotos", ".append", "(cv2", ".imread", "(", "\"lb1.jpg\"", "))\nphotos", ".append", "(cv2", ".imread", "(", "\"b2.jpg\"", "))\nphotos", ".append", "(cv2", ".imread", "(", "\"b3.jpg\"", "))\nlables", ".append", "(", "1", ")\nlables", ".append", "(", "1", ")\nlables", ".append", "(", "1", ")\n\nnames={", "\"0\"", ":", "\"a\"", ",", "\"1\"", ":", "\"b\"", "}\nrecognizer=cv2", ".face", ".EigenFaceRecognizer_create", "()\nrecognizer", ".train", "(photos,np", ".array", "(lables))\n\ncapture=VideoCapture(", "0", ")\nwhile capture", ".isOpened", "():\n    retval,image=capture", ".read", "()\n    faceCascade = cv2", ".CascadeClassifier", "(", "\"haarcascade_frontalface_default.xml\"", ")\n    faces = faceCascade", ".detectMultiScale", "(image, ", "1.15", ")\n    ", "for", " (x, y, w, h) ", "in", " faces:\n\n        cv2", ".rectangle", "(image, (x, y), (x + w, y + h), (", "0", ", ", "0", ", ", "255", "), ", "5", ")\n        #image=cv2", ".putText", "(image,names", "[str(lable)]", ",(x,y),cv2", ".FONT_HERSHEY_DUPLEX", ",", "2", ",(", "0", ",", "255", ",", "0", "),", "5", ")\n    cv2", ".imshow", "(", "\"Video\"", ",image)\n    key=cv2", ".waitKey", "(", "1", ")\n    ", "if", " key==", "32", ":\n        lable, confidence = recognizer", ".predict", "(image)\n        print(names", "[str(lable)]", ")\n    ", "if", " key==", "27", ":\n        print(image.shape)\n        break\n\ncapture", ".release", "()\ncv2", ".destroyAllWindows", "()\n", "\n", "运行结果及报错内容", "\n", "cv2.error: OpenCV(4.6.0) D:\\a\\opencv-python\\opencv-python\\opencv\\modules\\core\\src\\lda.cpp:183: error: (-5:Bad argument) Wrong shapes for given matrices. Was size(src) = (1,921600), size(W) = (307200,6). in function 'cv::LDA::subspaceProject'"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;按列试试  axis&amp;#61;0&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何使用python对excel做归一化处理并保存？", ["使用python对excel做归一化处理并保存", "\n", "df=pd.read_excel('data/testdata_2.xlsx')", "max_min_scaler = lambda x : (x-np.min(x))/(np.max(x)-np.min(x))", "df1=df.apply(max_min_scaler, axis=1)", "df1.to_excel('data/testdata_2n.xlsx',index=False)", "\n", "运行结果及报错内容", "\n", "没报错就是按行的 我不要", "\n", "我的解答思路和尝试过的方法", "\n", "这个代码是按行做归一化我需要按列做归一化", "\n", "我想要达到的结果", "\n", "按列做归一化"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;创建的时候加个 dtype &amp;#61; int  看看&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy 中空白向量数据类型异常", ["背景问题说明：**python  3中引用numpy  ，生成一个数组，但最终数组为啥不是整数型，而是如图这种类型，辛苦帮忙看下，感激；", "*", "问题相关代码:**", "import  numpy as np", "data=np.empty(10)", "data[4]=1", "print(\"对应的数组为 \",data)", "\n", "**运行结果及报错内容 :**没有报错，就是最后出来的值格式不对 ，不是整数型，而是一个很复杂的计数", "\n", "\n", "**我的解答思路和尝试过的方法 **： 未尝试过其他方案，第一次练习，没有思路", "\n", "** 我想要达到的结果**：变成整数型"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在第11行代码后加一行就行了。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;ax1,ax2,ax3,ax4,ax5,ax6,ax7,ax8,ax9,ax10,ax11,ax12 &amp;#61; ax&lt;span class=\"hljs-selector-class\"&gt;.flatten&lt;/span&gt;()\nax9&lt;span class=\"hljs-selector-class\"&gt;.set_axis_off&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;是这样的效果吗&amp;#xff1f;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/417125153436127.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["matplotlib多图状态下雷达图是否可去掉矩形框", ["matplotlib雷达图与其他图形共存时，如何设置可将雷达图外的矩形框隐藏或去除（左下图）", "\n", "\n", "\n```python\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\n\n\n", "#图形设置", "\nfig,ax = plt.subplots(", "nrows", "=3,ncols=4,figsize=(20,10),dpi=80)\nax1,ax2,ax3,ax4,ax5,ax6,ax7,ax8,ax9,ax10,ax11,ax12 = ax.flatten()\n\n", "#中文设置", "\nplt.rcParams[", "'font.sans-serif'", "] = [", "'SimHei'", "]  # 用于显示中文\nplt.rcParams[", "'axes.unicode_minus'", "] = ", "False", "  # 用于解决保存图像是负号‘-’显示为方框的问题\n\n\n", "#设置随机数据源", "\na = []\nb = []\nc = []\n", "for", " i ", "in", " a,b,c:\n    ", "for", " j ", "in", " random.choices(range(1,6),", "k", "=5):\n        i.append(j)\n        ", "if", " len(c) == 5:\n            break\n", "#极轴刻度", "\nlabels = [", "'var1'", ",", "'var2'", ",", "'var3'", ",", "'var4'", ",", "'var5'", "]\n", "# labels.append(labels[0])                    #要么这里闭合，要么下面闭合", "\n", "#轴径", "\nN = len(a)\n", "#设置雷达图的角度", "\nangles = np.linspace(0,2*np.pi,N,", "endpoint", "=", "False", ")\n", "#封闭雷达图", "\na = np.concatenate((a,[a[0]]))\nb = np.concatenate((b,[b[0]]))\nc = np.concatenate((c,[c[0]]))\nangles = np.concatenate((angles,[angles[0]]))\nlabels = np.concatenate((labels,[labels[0]]))           #要么这里闭合，要么上面闭合\n", "#设置为极坐标格式", "\nax9 = fig.add_subplot(349,", "polar", "=", "True", ")\n", "#绘制折线图", "\nax9.plot(angles,a,", "'b.'", ",", "lw", "=1,label='A',alpha=0.8)\nax9.plot(angles,b,", "'r.'", ",", "lw", "=1,label='B',alpha=0.8)\nax9.plot(angles,c,", "'g.'", ",", "lw", "=1,label='C',alpha=0.8)\n", "#填充颜色", "\nax9.fill(angles,a,", "'b'", ",", "alpha", "=0.5)\nax9.fill(angles,b,", "'r'", ",", "alpha", "=0.5)\nax9.fill(angles,c,", "'g'", ",", "alpha", "=0.5)\n", "#添加特征标签", "\nax9.set_thetagrids(angles", "*180", "/np.pi,labels)\n", "# ax9.set_xticks(angles*180/np.pi,labels)", "\n", "# ax9.set_xticks(angles*180/np.pi)", "\n", "# ax9.set_xticks(angles[:-1],labels)", "\n", "#设置极轴范围", "\nax9.set_ylim(0,6)\n", "#设置极轴方向", "\nax9.set_theta_zero_location(", "'N'", ")\n", "#设置网格线", "\nax9.grid(", "True", ")\n", "#设置图例", "\nax9.legend(", "loc", "=3)\n", "#设置标题", "\nax9.set_title(", "'雷达图'", ")\n\nplt.show()\n", "\n", "```"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;你看下这篇博客吧, 应该有用&amp;#x1f449; &amp;#xff1a;&lt;a href=\"https://blog.csdn.net/weixin_38392627/article/details/116805877\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;pytorch&amp;#43;cnn&amp;#43;lstm&amp;#43;词向量&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pytorch搭建的cnn-lstm的Tensor问题", ["\nimport torch\n", "from", " torch import nn\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n", "from", " sklearn.preprocessing import MinMaxScaler\n", "from", " torch.nn import MaxPool2d, Conv2d, Dropout, ReLU\n", "from", " torch.utils.data import DataLoader, Dataset\n\n", "#准备数据集", "\n", "df", "=pd.read_csv(\"train.csv\",parse_dates=[", "\"Date\"", "],index_col=[0])\n", "print", "(df.shape)\n", "train_data_size", "=round(len(df)*0.8)\n", "test_data_size", "=round(len(df)*0.2)\n", "print", "(", "\"训练数据集的长度为：{}\"", ".format(train_data_size))\n", "print", "(", "\"测试数据集的长度为：{}\"", ".format(test_data_size))\n\n", "# df[['Open']].plot()", "\n", "# plt.ylabel(\"stock price\")", "\n", "# plt.xlabel(\"times\")", "\n", "# plt.show()", "\n\nsel_col = [", "'Open'", ", ", "'High'", ", ", "'Low'", ", ", "'Close'", "]\n", "df", "=df[sel_col]\n\n", "df_close_max", "=df[", "'Close'", "].max()\n", "df_close_min", "=df[", "'Close'", "].min()\n", "print", "(", "\"最高价=\"", ", df_close_max)\n", "print", "(", "\"最低价=\"", ", df_close_min)\n", "print", "(", "\"波动值=\"", ", df_close_max-df_close_min)\n", "print", "(", "\"上涨率=\"", ", (df_close_max-df_close_min)/df_close_min)\n", "print", "(", "\"下跌率=\"", ", (df_close_max-df_close_min)/df_close_max)\n\n", "df", "=df.apply(lambda x:(x-min(x))/(max(x)-min(x)))\n", "print", "(df)\n\n", "total_len", "=df.shape[0]\n", "print", "(", "\"df.shape=\"", ",df.shape)\n", "print", "(", "\"df_len=\"", ", total_len)\n\n", "sequence", "=10\nx=[]\ny=[]\n\n", "for", " i ", "in", " range(total_len-sequence):\n\n    x.append(np.array(df.iloc[i:(i+sequence),].values,", "dtype", "=np.float32))\n    y.append(np.array(df.iloc[(i+sequence),1],", "dtype", "=np.float32))\n", "print", "(", "\"train data  of item  0: \\n\"", ", x[0])\n", "print", "(", "\"train label of item  0: \\n\"", ", y[0])\n\n", "print", "(", "\"\\n序列化后的数据形状：\"", ")\nX = np.array(x)\nY = np.array(y)\nY = np.expand_dims(Y, 1)\n", "print", "(", "\"X.shape =\"", ",X.shape)\n", "print", "(", "\"Y.shape =\"", ",Y.shape)\n\ntrain_x = X[:int(0.7 * total_len)]\ntrain_y = Y[:int(0.7 * total_len)]\n\n\n", "# 数据集前70%后的数据（30%）作为验证集", "\nvalid_x = X[int(0.7 * total_len):]\nvalid_y = Y[int(0.7 * total_len):]\n\n", "print", "(", "\"训练集x的形状是：\"", ",train_x.shape)\n", "print", "(", "\"测试集y的形状是：\"", ",train_y.shape)\n", "print", "(", "\"测试集x的形状是：\"", ",valid_x.shape)\n", "print", "(", "\"测试集y的形状是：\"", ",valid_y.shape)\n\n\nclass Mydataset(Dataset):\n\n    def __init__(self, x, y, ", "transform", "=None):\n        self.x = x\n        self.y = y\n\n    def __getitem__(self, index):\n        x1 = self.x[index]\n        y1 = self.y[index]\n        return x1, y1\n\n    def __len__(self):\n        return len(self.x)\n\ndataset_train = Mydataset(train_x, train_y)\ndataset_valid = Mydataset(valid_x, valid_y)\n\n", "train_dataloader", "=DataLoader(dataset_train,batch_size=64)\n", "valid_dataloader", "=DataLoader(dataset_valid,batch_size=64)\n", "# print(train_dataloader)", "\n", "# print(valid_dataloader)", "\nclass cnn_lstm(nn.Module):\n    def __init__(self,window_size,feature_number):\n        super(cnn_lstm, self).__init__()\n        self.", "window_size", "=window_size\n        self.", "feature_number", "=feature_number\n        self.conv1 = Conv2d(", "in_channels", "=1, ", "out_channels", "=64, ", "kernel_size", "=3, ", "stride", "=1, ", "padding", "=2)\n        self.relu1 = ReLU()\n        self.maxpooling1 = MaxPool2d(2, ", "stride", "=1, ", "padding", "=", "\"same\"", ")\n        self.dropout1 = Dropout(0.3)\n        self.lstm1 = nn.LSTM(", "input_size", "=64 * feature_number, ", "hidden_size", "=128, ", "num_layers", "=1, ", "batch_first", "=", "True", ")\n        self.lstm2 = nn.LSTM(", "input_size", "=128, ", "hidden_size", "=64, ", "num_layers", "=1, ", "batch_first", "=", "True", ")\n        self.fc = nn.Linear(", "in_features", "=64, ", "out_features", "=32)\n        self.relu2 = nn.ReLU()\n        self.head = nn.Linear(", "in_features", "=32, ", "out_features", "=1)\n\n    def forward(self, x):\n\n            # x = x.reshape([x.shape[0], 1, self.window_size, self.feature_number])\n            x = x.transpose(-1, -2)\n            x = self.conv1(x)\n            x = self.relu1(x)\n            x = self.pool(x)\n            x = self.dropout(x)\n\n            # x = x.reshape([x.shape[0], self.window_size, -1])\n            x = x.transpose(-1, -2)  #\n            x, (h, c) = self.lstm1(x)\n            x, (h, c) = self.lstm2(x)\n            x = x[:, -1, :]  # 最后一个LSTM只要窗口中最后一个特征的输出\n            x = self.fc(x)\n            x = self.relu2(x)\n            x = self.head(x)\n\n            return x\n\n", "#创建网络模型", "\n", "cnn_lstm", "=cnn_lstm(window_size=10,feature_number=4)\n\n", "#定义损失函数", "\n", "loss_fn", "=nn.MSELoss(size_average=True)\n\n", "#定义优化器", "\n", "learning_rate", "=0.01\n", "opitmizer", "=torch.optim.Adam(cnn_lstm.parameters(),learning_rate)\n\n", "#设置训练网络参数", "\n", "total_train_step", "=0\n", "total_valid_step", "=0\n\n", "#训练论数", "\n", "epoch", "=10\n\n", "for", " i ", "in", " range(epoch):\n    ", "print", "(", "\"______第{}轮训练开始________\"", ".format((i + 1)))\n    ", "y_train_pred", "=cnn_lstm(train_x)\n    ", "loss", "=loss_fn(train_x,train_y)\n\n    #优化器优化模型\n    opitmizer.zero_gard()\n    loss.backward()\n    opitmizer.", "step", "()\n\n    total_train_step = total_train_step + 1\n    ", "if", " total_train_step % 100 == 0:\n        ", "print", "(", "\"训练次数：{}，loss:{}\"", ".format(total_train_step, loss.item()))\n\n", "\n", "请问在这个数据集划分的部分，在哪里可以添加 将数据类型转化为totensor的格式"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我这边把你的代码测试了一下&amp;#xff0c;结果是可以正常显示的。&lt;br /&gt;根据你的图片展示&amp;#xff0c;个人分析是包没导入&amp;#xff08;因为numpy都是红波浪线&amp;#xff09;。检查下你的python解释器是否是你包含PIL的那一个。&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/00086227976619.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中PIL库的导入和下载", ["问题遇到的现象和发生背景", "\n", "在python3.10版本下，安装PIL库，在pycharm里面不能用，在IDLE里面能用，怎么回事", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "from", " PIL ", "import", " Image\n", "#", "\n", "import", " numpy ", "as", " np\n", "#", "\nim = np.array(Image.", "open", "(", "r\"C:\\Users\\伊迪斯\\OneDrive\\桌面\\core\\222.jpg\"", "))\n", "#", "\n", "print", "(im.shape,im.dtype)\n\n\n", "\n", "运行结果及报错内容", "\n", "在pycharm里面是这样的", "\n", "\n", "在IDLE里面正常", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;p指针用于访问结构体内的x变量&lt;br /&gt;np中的next指针是用于指向下一个node的&lt;br /&gt;因为np本身就是一个指针,所以直接把np的地址值赋值给np-&amp;gt;next即可&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["第三个空为什么不是取p指针的地址", ["答案是np为什么最后一条汇编指令是把p指针的地址送给⭐next对吧，然后p指针指向x的地址。如果想指向np的话我觉得应该要把p指针本身送给next。"]], "Tag": "算法设计"}
{"Answer": "把OpenCV 降级成3.4.3.18 就可以了，在终端输入pip install  opencv-python==3.4.3.18", "Konwledge_Point": "应对NP完全问题", "Question": ["python调用cv2.findContours时报错：ValueError: not enough values to unpack (expected 3, got 2)", ["完整代码如下：", "\n\n", "import cv2\nimport numpy as np\n\nimg = np.zeros((200, 200), dtype=np.uint8)\nimg[50:150, 50:150] = 255\n\nret, thresh = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY)\nimage, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\ncolor = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)\nimg = cv2.drawContours(color, contours, -1, (0,255,0), 2)\n\ncv2.imshow(\"contours\", color)\ncv2.waitKey()\ncv2.destroyAllWindows()\n", "\n\n", "但是cv2.findContours报如下错误：", "\nValueError: not enough values to unpack (expected 3, got 2)", "\n\n", "python版本为3.6，opencv为4.0.0"]], "Tag": "算法设计"}
{"Answer": "从你所问一系列问题，感觉你基本一窍不通，程序运行不了，应该先看 readme.md / readme.txt 文档，搞清楚环境\r\n然后下载作者提供的原始数据集，先跑通程序，然后再让你的数据集的格式、维度和它的一致，然后再修改。", "Konwledge_Point": "应对NP完全问题", "Question": ["如何解决Layer type `softmax` is not implemented", ["第一个问题：我在编译的时候发现", "softmax", " is not implemented的问题，不知道怎么编写softmax和编写好之后把softmax文件放在哪", "\n第二个问题：如果我把Layer('softmax')删了，编译的时候会显示Mismatch between dataset size and units in output layer.我不知道哪个维数出问题了，大佬可以帮忙解答吗", "\n\n", "import numpy as np\nimport urllib.request\nimport pandas as pd\nfrom pandas import DataFrame\nimport numpy as np\nimport pandas as pd\nimport xlrd\nfrom sklearn import preprocessing\ndef excel_to_matrix(path):\n    table = xlrd.open_workbook(path).sheets()[0]  # 获取第一个sheet表\n    row = table.nrows  # 行数\n    col = table.ncols  # 列数\n    datamatrix = np.zeros((row, col))\n    for x in range(col):\n        cols = np.matrix(table.col_values(x))\n\n        datamatrix[:, x] = cols\n    return datamatrix\n\n\ndatafile = u'C:\\\\Users\\\\asus\\\\PycharmProjects\\\\2\\\\venv\\\\Lib\\\\附件2：数据.xls'\ndatamatrix=excel_to_matrix(datafile)\ndata=pd.DataFrame(datamatrix)\n\ny=data[10]\ndata=data.drop(10,1)\nx=data\n# print(y.shape)\nfrom sklearn import preprocessing\nx_MinMax=preprocessing.MinMaxScaler()\ny_MinMax=preprocessing.MinMaxScaler()\n\ny.as_matrix(y)\ny=np.array(y).reshape((len(y),1))\nx=np.array(x).reshape((len(x),10))\nx=x_MinMax.fit_transform(x)\ny=y_MinMax.fit_transform(y)\nx.mean(axis=0)\n\nimport random\nfrom sklearn.cross_validation import train_test_split\nnp.random.seed(2016)\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)\n\nfrom sknn.mlp import Regressor,Layer #预测模型\n\nfit3=Regressor(layers=[Layer('Tanh',units=45),Layer('Tanh',units=18),\n\n                       Layer('softmax')],\n               learning_rate=0.02,\n               random_state=2016,\n               valid_size=0.25,\n               dropout_rate=0.2,\n               learning_momentum=0.30,\n               batch_size=35,\n               n_iter=10\n               )\nfit3.fit(x_train,y_train)\n\nfrom sklearn.metrics import confusion_matrix\npredict3_train=fit3.predict(x_train)\nscore3=fit3.score(x_train,y_train)\nconfu3=confusion_matrix(y_train,predict3_train)\nprint(confu3)\nscore_text3=fit3.score(x_test,y_test)\nprint(score_text3)\npredict3_test=fit3.predict(x_test)\nconfu3_test=confusion_matrix(y_test,predict3_test)\nprint(confu3_test)\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;第一个问题&amp;#xff1a;&lt;/strong&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        根据soft voting和hard voting的定义来看&amp;#xff0c;soft是将所有模型预测样本为某一类别的概率的平均值作为标准&amp;#xff0c;概率最高的对应的类型为最终的预测结果&amp;#xff1b;而hard是根据少数服从多数来定最终结果。&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;       如果某一子模型在这个问题上表现不好&amp;#xff0c;那使用soft就会将这个子模型的结果也考虑进去&amp;#xff0c;这就会大大影响整个集成模型的效果。此时如果使用hard&amp;#xff0c;那就会直接忽略掉这个效果不好的子模型&amp;#xff0c;从而使整个集成模型的效果变好。&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;第二个问题&amp;#xff1a;&lt;/strong&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        在这个问题中&amp;#xff0c;楼主可能对模型存在一定误解&amp;#xff0c;认为模型越多就越好&amp;#xff0c;其实不然。举个简单的例子&amp;#xff0c;当你的数据集较少时&amp;#xff0c;你的决策树子树个数增加&amp;#xff0c;这可能导致不同子树使用到的数据是相似甚至是相似的&amp;#xff0c;这种情况下&amp;#xff0c;增加子树就没有任何意义&amp;#xff0c;甚至会出现过拟合现象。&lt;/span&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;    对于模型而言&amp;#xff0c;没有绝对的谁好谁坏&amp;#xff0c;需要针对不同的数据集&amp;#xff0c;不同的特征来选取合适的模型&amp;#xff0c;这样才能得到比较好的效果。\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["sklearn集成学习 关于 算法准确率的两个问题", ["在学习sklearn中的集成学习中遇到了两个问题：", "\n", "集成学习中soft voting的准确率低于hard voting。", "代码如下：", "\n", "import", " numpy ", "as", " np\n", "import", " matplotlib.pyplot ", "as", " plt\n", "from", " sklearn ", "import", " datasets\nx,y = datasets.make_moons(n_samples = ", "500", ",noise = ", "0.3", ", random_state = ", "42", ")\n", "from", " sklearn.model_selection ", "import", " train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,random_state = ", "42", ")\n", "from", " sklearn.ensemble ", "import", " VotingClassifier\nvoting_clf = VotingClassifier(estimators = [\n    (", "'log_clf'", ",LogisticRegression()),\n    (", "'svm_clf'", ",SVC()),\n    (", "'dt_clf'", ",DecisionTreeClassifier())\n],voting = ", "'hard'", ")\nvoting_clf.fit(x_train,y_train)\nvoting_clf.score(x_test,y_test)\nvoting_clf2 = VotingClassifier(estimators = [\n    (", "'log_clf'", ",LogisticRegression()),\n    (", "'svm_clf'", ",SVC(probability = ", "True", ")), #修改SVC参数\n    (", "'dt_clf'", ",DecisionTreeClassifier(random_state = ", "666", "))],voting = ", "'soft'", ")\nvoting_clf2.fit(x_train,y_train)\nvoting_clf2.score(x_test,y_test)# soft 与hard 的结果都是", "0.904", " 很奇怪\n\n", "\n", "集成学习中采用决策树的数量增多，准确率并没有提高。", "代码如下：", "import", " numpy as np\n", "import", " matplotlib.pyplot as plt\nfrom sklearn ", "import", " datasets\nx,", "y", " = datasets.make_moons(", "n_samples", " = ", "500", ",", "noise", " = ", "0.3", ", ", "random_state", " = ", "42", ")\nfrom sklearn.model_selection ", "import", " train_test_split\nx_train,x_test,y_train,", "y_test", " = train_test_split(x,y,", "random_state", " = ", "42", ")\n", "bagging_clf", " = BaggingClassifier(DecisionTreeClassifier(),\n                            ", "n_estimators", " =", "500", ", ", "max_samples", " = ", "100", ",", "bootstrap", " = True)\n", "# n_estimator 多少个子模型 max_samples看多少样本 bootstrap是否放回", "\n%%time\nbagging_clf.fit(x_train,y_train)", "# 500个决策树", "\nbagging_clf.score(x_test,y_test)\n", "single_dec_tree", " = DecisionTreeClassifier()\nsingle_dec_tree.fit(x_train,y_train)", "# 1个决策树", "\nsingle_dec_tree.score(x_test,y_test)\n", "bagging_clf5000", " = BaggingClassifier(DecisionTreeClassifier(),\n                                ", "n_estimators", " = ", "5000", ",", "max_samples", " = ", "100", ",", "bootstrap", " = True)\n", "# 5000个决策树", "\n%%time\nbagging_clf5000.fit(x_train,y_train)\nbagging_clf5000.score(x_test,y_test)\n", "# 单个决策树的准确率为0.88，500个是0.928，5000个是0.912", "\n", "\n", "\n", "这两个问题类似，因为从算法的原理上讲，soft的结果至少不会比hard的差，为啥结果会这样呢？", "第二个问题中，子模型的数目增多，一定会使得整体的准确率提高，但是为啥决策树的数目增多，准确率不升反降？", "难道存在一些子模型的准确率低于平均准确率吗？很奇怪"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;查到了&amp;#xff0c;这个好像是纯注释。。没有任何实际意义&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["#python#代码不理解，请求解释", ["请问第8行的‘：’，‘-> float’是什么意思是这个库的指定格式还是通用的格式，有什么意义", "\n", "问题相关代码，请勿粘贴截图", "\n", "\nimport cv2\nimport os\nimport math\nimport numpy as ", "np", "\nimport imutils\n\ndef lef_rig_margin_ratio(", "image", ": ", "np", ".ndarray) -> ", "float", ":\n    ", "if", " len(", "image", ".shape) > ", "2", " ", "and", " ", "image", ".shape[", "2", "] > ", "1", ":\n        ", "image", " = cv2.cvtColor(", "image", ", cv2.COLOR_BGR2GRAY)\n    left = ", "0", "\n    right = ", "0", "\n    \n    ", "for", " x ", "in", " ", "range", "(", "image", ".shape[", "0", "]):\n        ", "col", " = ", "np", ".argwhere(", "image", "[x, :] < ", "128", ")\n        ", "if", " ", "col", ".shape[", "0", "] > ", "0", ":\n            left += ", "col", "[", "0", ", ", "0", "]\n            right += ", "image", ".shape[", "1", "] - ", "1", " - ", "col", "[-", "1", ", ", "0", "]\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&amp;#xff08;argmax只能返回第一个最大值&amp;#xff09;继续循环迭代下去.&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;first &amp;#61; np.argmax(counts)\n\nmaxCount &amp;#61; counts.count(counts[first]) # 先数一下最大值有几个&amp;#xff0c;大于1个就迭代\ndef findC(i, li):\n    if maxCount &amp;gt; 1:\n        nextMax &amp;#61; np.argmax(counts[first &amp;#43; 1: ])\n        print(first, nextMax)\n        findC(nextMax, counts)\n    else:\n        return\nfindC(first, maxCount)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy数组求众数，对于有多个众数的情况应该如何处理呢？", ["import numpy as np", "\n\n", "from scipy import stats", "\n\n", "data=np.array([23,28,34,17,69,28,28,80,36,97,58,58,58])", "\n\n", "方法一：", "\n\n", "counts=np.bincount(data)", "\n\n", "np.argmax(counts)", "\n\n", "方法二：", "\n\n", "stats.mode(data)[0][0] #使用stats函数中的mode方法可以获取众数", "\n\n", "这两种方法都只能求出28为众数，实际上58也是众数，这个要怎么才能获取出来呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;你看下这篇博客吧, 应该有用&amp;#x1f449; &amp;#xff1a;&lt;a href=\"https://blog.csdn.net/qq_55016379/article/details/114803279?utm_source&amp;#61;csdn_ai_ada_ask_robot\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;python math库函数&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python的numpy和math库的调用", ["为什么用了numpy库的函数 却还要从math库里调用sqrt sin cos这三个函数 不能直接用np.sin np.cos这样调用出来吗 不是很懂第一行调用math库的函数的作用"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;np.where最简单&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;import pandas as pd\nimport numpy as np\n\n\ndef main():\n    condition &amp;#61; {&amp;#34;condition&amp;#34;: np.random.randn(200)}\n    df &amp;#61; pd.DataFrame(condition)\n    df[&amp;#39;data1&amp;#39;] &amp;#61; np.random.randint(1, 100, len(df))\n    df[&amp;#39;data2&amp;#39;] &amp;#61; np.random.randint(1, 100, len(df))\n    df[&amp;#39;result&amp;#39;] &amp;#61; np.where(df[&amp;#39;condition&amp;#39;] &amp;gt; 0, df[&amp;#39;data1&amp;#39;], df[&amp;#39;data2&amp;#39;])\n    print(df.head(10))\n    return\n\n\nmain()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["我如何根据某列的条件来赋值？", ["我在学习dataframe的时候碰到一个基本的问题，", "\n\n", "如果data列>0，我需要把a列的相同行的值赋给data2列，如果data2列<0，我需要把b列的相同行的值赋给data2，我尝试了好几种办法，都没成功", "\n\n", "代码如下(python 3.8)：", "\n\n", "\n", "import pandas as pd\nimport numpy as np\n\ndata = {\"data\": np.random.randn(200)}\ndf = pd.DataFrame(data)\ndf['a']=np.random.randint(1,100, len(df))\ndf['b']=np.random.randint(1,100, len(df))\ndf['data2']=0", "\n\n", "上面的df和我的数据类似，我想到一个方法，感觉很粗糙，有没有更优的方法？", "\n\n", "\n", "df['data2'].loc[df['data']>0]=df[df['data']>0]['a']\ndf['data2'].loc[df['data']<0]=df[df['data']<0]['b']"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的数据中有非数值型的字符串类型数据&amp;#xff0c;你检查一下新使用的数据&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python聚类问题", ["问题遇到的现象和发生背景", "\n", "部分数据集", "d=[[1994.0, 9.6], [1957.0, 9.5], [1997.0, 9.5], [1994.0, 9.4], [1993.0, 9.4], [2012.0, 9.4], [1993.0, 9.4], [1997.0, 9.4], [2013.0, 9.4], [1994.0, 9.4], [2003.0, 9.3], [2016.0, 9.3], [2009.0, 9.3], [2009.0, 9.3], [2008.0, 9.3], [2008.0, 9.3], [1957.0, 9.3], [2008.0, 9.3], [2001.0, 9.2], [2009.0, 9.2], [1931.0, 9.2], [1961.0, 9.2], [2010.0, 9.2], [2004.0, 9.2], [1998.0, 9.2], [2009.0, 9.2], [1972.0, 9.2], [1939.0, 9.2], [2001.0, 9.2], [2015.0, 9.2], [1946.0, 9.2], [2011.0, 9.2], [2011.0, 7.0], [2010.0, 9.2], [1997.0, 9.2], [2010.0, 9.2], [2009.0, 9.2], [2013.0, 9.2], [1982.0, 9.2], [1960.0, 9.2], [2006.0, 9.2], [2012.0, 7.4], [2010.0, 8.5], [2008.0, 9.2], [2006.0, 9.2], [1988.0, 9.2], [1993.0, 8.0], [2013.0, 9.1], [2002.0, 9.1], [2016.0, 5.6], [2013.0, 9.1], [2011.0, 9.1], [2013.0, 8.6], [1995.0, 9.1], [1996.0, 5.7], [1995.0, 9.1], [1984.0, 9.0]]", "\n", "用代码块功能插入代码，请勿粘贴截图。 不用代码块回答率下降 50%", "\n", "# encoding:utf-8", "\nimport matplotlib.pyplot ", "as", " plt\nimport ", "random", "\nimport numpy ", "as", " np\nimport math\nimport matplotlib\n\n\n", "# 计算两个点之间的欧式距离，参数为两个元组", "\ndef dist(t1, t2):\n    dis = math.", "sqrt", "((np.power((t1[", "0", "] - t2[", "0", "]), ", "2", ") + np.power((t1[", "1", "] - t2[", "1", "]), ", "2", ")))\n    ", "return", " dis\n\n", "# DBSCAN算法，参数为数据集，Eps为指定半径参数，MinPts为制定邻域密度阈值", "\ndef dbscan(Data, Eps, MinPts):\n    ", "num", " = ", "len", "(Data)  ", "# 点的个数", "\n    unvisited = [i ", "for", " i ", "in", " range(", "num", ")]  ", "# 没有访问到的点的列表", "\n    visited = []  ", "# 已经访问的点的列表", "\n    C = [", "-1", " ", "for", " i ", "in", " range(", "num", ")]  ", "# C为输出结果，默认是一个长度为num的值全为-1的列表        ", "\n    k = ", "-1", "  ", "# 用k来标记不同的簇，k = -1表示噪声点", "\n    ", "while", " ", "len", "(unvisited) > ", "0", ":        \n        p = ", "random", ".choice(unvisited)  ", "# 随机选择一个unvisited对象", "\n        unvisited.remove(p)\n        visited.append(p)        \n        N = []  ", "# N为p的epsilon邻域中的对象的集合", "\n        ", "for", " i ", "in", " range(", "num", "):\n            ", "if", " (dist(Data[i], Data[p]) <= Eps):  ", "# and (i!=p):", "\n                N.append(i)\n        ", "# 如果p的epsilon邻域中的对象数大于指定阈值，说明p是一个核心对象", "\n        ", "if", " ", "len", "(N) >= MinPts:\n            k = k + ", "1", "\n            C[p] = k\n            ", "# 对于p的epsilon邻域中的每个对象pi", "\n            ", "for", " ", "pi", " ", "in", " N:\n                ", "if", " ", "pi", " ", "in", " unvisited:\n                    unvisited.remove(", "pi", ")\n                    visited.append(", "pi", ")\n                    ", "# 找到pi的邻域中的核心对象，将这些对象放入N中", "\n                    ", "# M是位于pi的邻域中的点的列表", "\n                    M = []\n                    ", "for", " j ", "in", " range(", "num", "):\n                        ", "if", " (dist(Data[j], Data[", "pi", "]) <= Eps):  \n                            M.append(j)\n                    ", "if", " ", "len", "(M) >= MinPts:\n                        ", "for", " t ", "in", " M:\n                            ", "if", " t ", "not", " ", "in", " N:\n                                N.append(t)\n                ", "# 若pi不属于任何簇，C[pi] == -1说明C中第pi个值没有改动", "\n                ", "if", " C[", "pi", "] == ", "-1", ":\n                    C[", "pi", "] = k\n        ", "# 如果p的epsilon邻域中的对象数小于指定阈值，说明p是一个噪声点", "\n        ", "else", ":\n            C[p] = ", "-1", "\n    ", "return", " C\n\n", "if", " __name__ == ", "'__main__'", ":\n    ", "# 数据集二：788个点", "\n\n    dataSet =d\n    C = dbscan(dataSet,", "0.3", ",", "4", ")\n    x, y = [], []\n    ", "for", " data ", "in", " dataSet:\n        x.append(data[", "0", "])\n        y.append(data[", "1", "])\n    plt.figure(figsize=(", "8", ", ", "6", "), dpi=", "70", ")\n    plt.scatter(x, y, c=C, marker=", "'o'", ")\n    plt.show()\n\n\n", "\n", "运行结果及详细报错内容", "\n", "\n", "我的解答思路和尝试过的方法，不写自己思路的，回答率下降 60%", "\n", "我用过这个代码，可以运行，但换了一个文件中的数据，就有错误"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;检查输入数据是否正确&amp;#xff1a;确保您的输入数据已经被正确地预处理和标准化&amp;#xff0c;使其能够适应网络的要求。还要确保您的输入数据与您的问题域相匹配。&lt;/p&gt;\n&lt;p&gt;检查网络结构&amp;#xff1a;确认您的神经网络结构是否正确并满足您的问题要求。特别是在使用DDPG算法时&amp;#xff0c;Actor网络通常采用全连接网络或卷积神经网络。您可以尝试增加或减少网络的深度和宽度&amp;#xff0c;以看看是否有任何改善。&lt;/p&gt;\n&lt;p&gt;检查超参数&amp;#xff1a;确保您的优化器和学习率等超参数已正确设置&amp;#xff0c;尝试使用其他优化器和学习率值&amp;#xff0c;观察是否会对网络性能产生影响。&lt;/p&gt;\n&lt;p&gt;检查目标函数和奖励函数&amp;#xff1a;请确保您的目标函数和奖励函数与您的问题域相匹配&amp;#xff0c;同时考虑使用不同的目标函数和奖励函数来比较其性能。&lt;/p&gt;\n&lt;p&gt;调试代码&amp;#xff1a;检查您的代码是否存在错误&amp;#xff0c;可能有语法错误或者实现有误。&lt;/p&gt;\n&lt;p&gt;如果以上方法都没有解决问题&amp;#xff0c;您可能需要深入分析问题所在&amp;#xff0c;比如可视化激活层的输出和权重&amp;#xff0c;来查找问题的根源。&lt;/p&gt;\n&lt;p&gt;至于您提供的Actor神经网络的模型&amp;#xff0c;我发现它使用了ReLU激活函数&amp;#xff0c;这是一个常用的激活函数&amp;#xff0c;但在某些情况下可能会导致梯度消失的问题。您可以尝试使用其他激活函数&amp;#xff0c;例如LeakyReLU或ELU&amp;#xff0c;看看是否有任何改善。此外&amp;#xff0c;您的输出层使用了tanh激活函数&amp;#xff0c;这意味着输出值将始终在-1和1之间。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["神经网络输出多维向量的值都一样是什么问题呀", ["最近在用DDPG算法解决无人机的轨迹优化问题 遇到了个问题——神经网络不管输入是什么 输出都一模一样 不变", "结果一直是（0.5 0.5 0.5 0.5）（输入数据维度是46 输出是4）", "研究了好多天了 减少神经元数量，改变优化器、损失函数种类 ，降低输入维度 都试过啦 还是不行 实在是不知道问题出在哪里啦 有知道的可以帮忙解决一下嘛 谢谢大家啦！", "\n", "这是actor神经网络的模型：", "\n", "class", " ", "ActorNetwork", "(", "object", "):\n    ", "\"\"\"\n    Implements actor network\n    \"\"\"", "\n    ", "def", " ", "__init__", "(", "self,sess,state_dim,action_dim,lr,tau", "):\n        self.sess = sess\n        K.set_session(sess)\n        K.set_learning_phase(", "1", ")\n        self.state_dim = state_dim\n        self.action_dim = action_dim\n        self.lr = lr\n        self.tau = tau\n        self.mainModel, self.mainModel_weights, self.mainModel_state = self._build_model()\n        self.targetModel, self.targetModel_weights, _ = self._build_model()\n        self.action_gradient = tf.placeholder(tf.float32, [", "None", ", self.action_dim])\n        self.params_grad = tf.gradients(self.mainModel.output, self.mainModel_weights, -self.action_gradient)\n        grads = ", "zip", "(self.params_grad, self.mainModel_weights)\n        self.optimize = tf.train.AdamOptimizer(self.lr).apply_gradients(grads)\n        self.sess.run(tf.global_variables_initializer())\n \n    ", "def", " ", "_build_model", "(", "self", "):\n        input_obs = Input(shape=(self.state_dim,))  ", "# 输入层 返回一个维度为self.state_dim的张量", "\n        h = BatchNormalization()(input_obs)\n        h = Dense(", "400", ", kernel_initializer = ", "'random_uniform'", ")(h)  ", "# 全连接层 400个神经元（即该层的输出维度）", "\n        h = LeakyReLU(alpha=", "0.1", ")(h)\n        h = Dense(", "300", ", kernel_initializer = ", "'random_uniform'", ")(h)  ", "# 全连接层 输出维度300", "\n        h = LeakyReLU(alpha=", "0.1", ")(h)\n        h = Dense(self.action_dim, kernel_initializer = ", "'random_uniform'", ")(h)  ", "# 全连接层 输出维度self.action_dim", "\n        h = Activation(", "'tanh'", ")(h)  ", "# softmax 改为 tanh", "\n        pred = Lambda(", "lambda", " h: (h+", "1", ")/", "2", ")(h)\n \n        ", "# RelaxedOneHotCategorical() 函数的作用？？？ 网络最终输出结果的范围？？？", "\n        ", "# pred = Lambda(lambda h: tf.contrib.distributions.RelaxedOneHotCategorical(0.5, probs=h).sample())(h)", "\n \n        ", "# 给定输入张量和输出张量 生成一个函数型模型 这里包括一个输入层和3个全连接层", "\n        model = Model(inputs=input_obs, outputs=pred)\n \n        ", "# 用于配置训练模型 优化器：Adam 损失函数：categorical_crossentropy", "\n        model.", "compile", "(optimizer=", "'Adam'", "(), loss=", "'categorical_crossentropy'", ")\n \n        ", "return", " model, model.trainable_weights, input_obs\n \n    ", "def", " ", "act", "(", "self, state", "):\n        act = self.mainModel.predict(state)\n        ", "return", " act\n\n", "\n", "这是使用该神经网络获取动作值的部分：", "\n", "\n```python\n        ", "for", " stp ", "in", " range(int(args[", "'max_episode_len'", "])):\n            ", "a", " = []\n            ", "for", " i ", "in", " range(env.num_UAVs):\n                actor = actors[i]\n                ", "a", ".append(actor.act(np.reshape(s[i], (", "-1", ", actor.state_dim))).reshape(actor.action_dim, ))  ", "# 输入状态 输出动作", "\n                ", "# reshape 在不改变数据内容的情况下，改变一个数组的格式", "\n                ", "# (-1,actor.state_dim) 表示将智能体i的状态信息转化为列数为actor.state_dim的矩阵 行数自适应", "\n                ", "# 输入到actor网络的输出结果（动作）再reshape为行数为actor.action_dim的矩阵", "\n \n            ", "for", " i ", "in", " range(env.num_UAVs):\n                ", "# 增加探索扰动, 输出限制在 [0, 1] 范围内", "\n                ", "a", "[i] = np.clip(np.", "random", ".", "normal", "(", "a", "[i], NOISE), ", "0", ", ", "1", ")\n \n            s2, r, done = env.step(", "a", ")\n            replayMemory.", "add", "(s, ", "a", ", r, done, s2)\n            s = s2\n\n", "\n", "```"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码在哪个路径下&lt;br /&gt;wb.save(&amp;#39;data.xlsx&amp;#39;)  就保存在哪个路径&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["运行不报错但是也没有结果，能找找问题吗", ["\n", "import", " glob  # 引用glob\n", "import", " numpy ", "as", " np  # 引用numpy\n", "import", " openpyxl\n", "from", " openpyxl ", "import", " load_workbook  # 引用openpyxl的load_workbook\n\nflist = glob.glob(", "'G:\\\\data2py\\\\*.txt'", ")  # 读取当前文件夹所有txt，并存入列表\nwb = load_workbook(", "'G:\\\\data2py\\\\data.xlsx'", ")  # 打开要保存数据的excel\nsheet = wb[", "'Sheet1'", "]  # 打开要保存数据的sheet\nj = ", "1", "  # 序数，用来将从txt提取的数据存储（放）到excel的不同行\n\nfor filename ", "in", " flist:  # 利用for循环逐个读取txt文件\n    array = np.loadtxt(filename, dtype=str, delimiter=", "'\\t'", ")  # 将当前读取的txt文件数据存储矩阵，定界符为‘\\t’\n    number_col = array.shape[", "1", "]  # 获取数据矩阵列数\n    for i ", "in", " range(number_col):\n        sheet.cell(j, i+", "1", ").value = array[", "1", "][i]  # 将需要用的第一行数据存储在excel中,就是", "'sheet1'", "\n    j = j + ", "1", "    #行叠加 ，开始第二行        #             #行不变，列要变化（i+", "1", "）\n\nwb.save(", "'data.xlsx'", ")  # 保存excel文件并退出\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;202-03-07 08:00   是2020&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python的numpy库，关于时间增量timedelta64", ["\n", "import numpy as np\n\na = np.datetime64('2020-03-08') - np.datetime64('2020-03-07')\nb = np.datetime64('2020-03-08') - np.datetime64('202-03-07 08:00')\nc = np.datetime64('2020-03-08') - np.datetime64('2020-03-07 23:00', 'D')\n\nprint(a, a.dtype)  # 1 days timedelta64[D]\nprint(b, b.dtype)  # 956178240 minutes timedelta64[m]\nprint(c, c.dtype)  # 1 days timedelta64[D]", "\n\n", "为什么，b输出的会是956178240分钟呢？", "\n\n", "明明2020-03-08 00:00与2020-03-07 08:00相差了16个小时，", "\n\n", "怎么得到的是956178240分钟呢？", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/541643158366118.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1, 25 &amp;#43; 1):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i, &lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\t&amp;#39;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i % 5 &amp;#61;&amp;#61; 0:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python如何创建如何创建1到25的数组？要是5X5形式", ["如何创建1到25的数组？要是5X5形式，不是只一排", "要有规律1,2,3,4到25，不要用np.random.randn(),不要用np.random.randn()"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以先导入所需的库&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后可以定义一个函数来实现序贯概率比检验 (SPRT) 算法。这个函数接受一组观察数据和两个阈值 $\\alpha$ 和 $\\beta$ 作为参数&amp;#xff0c;并返回是否应该拒绝假设。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;def sprt(&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;, alpha, beta):\n    n &amp;#61; len(&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;)\n    p_hat &amp;#61; &lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;.mean()\n    z &amp;#61; p_hat / (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; - p_hat)\n    a &amp;#61; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; - beta) / alpha\n    b &amp;#61; beta / (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; - alpha)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(n):\n        z *&amp;#61; &lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;[i] / (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; - &lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;[i])\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; z &amp;lt; a:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Reject H0&amp;#34;&lt;/span&gt;\n        elif z &amp;gt; b:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Reject H1&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Fail to reject&amp;#34;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后可以使用蒙特卡罗方法来模拟数据生成过程。假设已经实现了一个函数来计算几何分布的概率密度函数&amp;#xff08;pdf&amp;#xff09;和累积分布函数&amp;#xff08;cdf&amp;#xff09;&amp;#xff0c;这里就不再赘述。&lt;/p&gt;\n&lt;p&gt;接下来&amp;#xff0c;可以定义一个函数来生成符合几何分布的观察数据。这个函数接受几何分布的唯一参数 $\\theta$ 和要生成的数据点数量 $n$ 作为参数&amp;#xff0c;并返回一组符合几何分布的观察数据。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-title\"&gt;def&lt;/span&gt; generate_data(theta, n):\n    p &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; - theta\n    &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt; &amp;#61; np.random.geometric(&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;, &lt;span class=\"hljs-title\"&gt;n&lt;/span&gt;)&lt;/span&gt;\n    return &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后可以使用这个函数来生成大量的符合几何分布的观察数据&amp;#xff0c;并使用 SPRT 算法对这些数据进行检验。可以记录每次检验的结果&amp;#xff0c;并统计错误类型 I 和 II 的次数。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;# 设置参数&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;theta&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0.5&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;alpha&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0.05&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;beta&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0.1&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;n_trials&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 记录错误类型 I 和 II 的次数&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;error_I&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;error_II&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 运行多次模拟&lt;/span&gt;\nfor i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(n_trials):\n    &lt;span class=\"hljs-comment\"&gt;# 生成符合几何分布的观察数据&lt;/span&gt;\n    &lt;span class=\"hljs-attr\"&gt;data&lt;/span&gt; &amp;#61; generate_data(theta, n)\n    &lt;span class=\"hljs-comment\"&gt;# 进行序贯概率比检验&lt;/span&gt;\n    &lt;span class=\"hljs-attr\"&gt;result&lt;/span&gt; &amp;#61; sprt(data, alpha, beta)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;result&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;Reject H0&amp;#34;&lt;/span&gt;:\n        error_I &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    elif &lt;span class=\"hljs-attr\"&gt;result&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;Reject H1&amp;#34;&lt;/span&gt;:\n        error_II &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 计算错误概率&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;error_I_prob&lt;/span&gt; &amp;#61; error_I / n_trials\n&lt;span class=\"hljs-attr\"&gt;error_II_prob&lt;/span&gt; &amp;#61; error_II / n_trials\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;可以使用计算出的错误概率来估计条件预期样本大小。可以通过计算错误概率与假设接近度之间的依赖关系来估计条件预期样本大小。这里假设已经定义了一个函数 expected_sample_size 来计算条件预期样本大小。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;# 计算条件预期样本大小\nn_0 &amp;#61; expected&lt;span class=\"hljs-constructor\"&gt;_sample_size(&lt;span class=\"hljs-params\"&gt;error_I_prob&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;alpha&lt;/span&gt;)&lt;/span&gt;\nn_1 &amp;#61; expected&lt;span class=\"hljs-constructor\"&gt;_sample_size(&lt;span class=\"hljs-params\"&gt;error_II_prob&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;beta&lt;/span&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;望采纳。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["使用蒙特卡洛方法对几何分布进行序贯概率比检验 (SPRT)", ["问题遇到的现象和发生背景", "\n", "在 2 个复合假设的情况下，用计算机实施广义顺序测试，", "使用蒙特卡洛方法估计其错误类型 I 和 II 的概率，以及条件预期样本量。", "\n", "实现：几何分布，$\\theta$ 是它唯一的参数。", "\n", "分析错误概率和“假设接近度”和“大小”的预期样本大小的依赖关系。", "将 $\\alpha$ 和 $\\beta$ 用于您选择的阈值计算。", "\n", "我的解答思路和尝试过的方法，不写自己思路的，回答率下降 60%", "\n", "我找到的方法代码如下，但是仅仅只是实现几何分布的蒙特卡洛方法，不知道该怎样实现使用蒙特卡洛方法对几何分布进行序贯概率比检验 (SPRT)。", "\n", "import", " numpy as np\n", "import", " matplotlib.pyplot as plt\n\n", "np", ".random.seed(", "222", ")\n\n", "# 把计算得到的函数写成一个函数", "\n", "def", " distribution_z(z, p, max_k=", "200", "):\n    ", "import", " math\n    ", "j", " = int(math.floor(z))\n    ", "A", " = ", "0", "\n    ", "for", " m in range(", "1", ", j + ", "1", "):\n        ", "A", " += (", "1", " - p) ** (m - ", "1", ")\n    ", "A", " *= p\n\n    ", "B", " = ", "0", "\n    ", "for", " k in range(j + ", "1", ", max_k + ", "1", "):\n        ", "a", " = (", "1", " - p) ** (k - ", "1", ")\n        ", "a", " /= k\n        ", "B", " += a\n    ", "B", " *= z * p\n\n    ", "return", " A + B\n\n\n", "def", " pdf_z(z, p, max_k=", "200", "):\n    ", "import", " math\n    ", "j", " = int(math.floor(z))\n    ", "B", " = ", "0", "\n    ", "for", " k in range(j + ", "1", ", max_k + ", "1", "):\n        ", "a", " = (", "1", " - p) ** (k - ", "1", ")\n        ", "a", " /= k\n        ", "B", " += a\n    ", "return", " B * p\n\n\n", "p", " = ", "0", ".", "1", "\n", "# 选取数据点，点越多越精确", "\n", "dataPoints", " = ", "10000", "\n\n", "Unit", " = np.random.rand(dataPoints)\n", "Geom", " = np.random.geometric(p, dataPoints)\n", "distri_of_Monte", " = Geom * Unit\n\n", "# 概率密度函数 PDF", "\n", "plt", ".hist(distri_of_Monte, bins=", "40", ", range=(", "0", ", ", "40", "))\n", "points_of_z", " = np.arange(", "0", ", ", "41", ", ", "0", ".", "01", ")\n", "pdf_of_z", " = np.array([pdf_z(zi, p) for zi in points_of_z]) * dataPoints\n", "plt", ".plot(points_of_z, pdf_of_z)\n", "# print(pdf_of_z)", "\n", "plt", ".show()\n\n", "hist", ", bin_edges = np.histogram(distri_of_Monte, bins=", "40", ", range=(", "0", ", ", "40", "))\n\n", "# 概率分布函数 CDF", "\n", "hist_list", " = np.cumsum(hist) / dataPoints\n\n", "plt", ".plot(bin_edges[", "1", ":], hist_list)\n\n", "points_of_z", " = np.arange(", "1", ", ", "41", ", ", "0", ".", "1", ")\n", "distri_of_z", " =", " [distribution_z(zi, p) for zi in points_of_z]", "\n\n", "plt", ".plot(points_of_z, distri_of_z)\n\n", "plt", ".show()\n", "\n", "\n", "import", " sprt as sprt\n", "import", " numpy as np\n\n", "# Null value", "\n", "h0", " = ", "0.5", "\n", "# Alternative value", "\n", "h1", " = ", "0.55", "\n", "# Type I error rate = 0.05", "\n", "alpha", " = ", "0.05", "\n", "# Type II error rate = 0.2", "\n", "beta", " = ", "0.2", "\n", "# Values", "\n", "values", " = np.random.binomial(", "1", ", ", "0.55", ", ", "100", ")\n", "test", " = sprt.SPRTBinomial(", "h0", " = h0, ", "h1", " = h1, ", "alpha", " = alpha, ", "beta", " = beta, ", "values", " = values)\n\ntest.plot()\n\n", "# Plot the data and boundary but without fill the color", "\ntest.plot(", "fill", " = False)\n\n", "\n", "\n", "\n", "我想要达到的结果，如果你需要快速回答，请尝试 “付费悬赏”", "\n", "使用蒙特卡洛方法，对几何分布进行序贯概率比检验 (SPRT)，同时满足题目的要求。使用Python编写代码。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;import numpy as np\n \nX0 &amp;#61; np.arange(-1, 101, 1.0)  # 炮检距&amp;#xff08;中心点即目标点&amp;#xff09;&amp;#xff0c;-1-100\nX &amp;#61; np.zeros(90)  # 射线经过的水平距离\nag &amp;#61; np.zeros((5, 101))  # 找到适合水平距离的粗始入射角变量&amp;#xff0c;5行101列适用于4层100个炮检距\nagi &amp;#61; np.arange(0, 90, 1.0)  # 设置入射角数组&amp;#xff0c;1度为步长&amp;#xff0c;0-89\na &amp;#61; np.zeros((5, 101))  # 反射点处的入射角&amp;#xff0c;5行101列适用于4层100个炮检距\nVp &amp;#61; [0, 3700, 2400, 3000, 2000]  # 层状速度数组\nH &amp;#61; [0, 60, 20, 40, 20]  # 层厚度数组\n \ndef angle_function(m, n):  # 定义子函数&amp;#xff0c;计算层数为n、炮检距为m的入射角\n    for j in range(90):\n        for i in range(m &amp;#43; 1):\n            P &amp;#61; np.sin(agi[j] * np.pi / 180) / Vp[1]\n            # print(P*Vp[i], 1 - (P * Vp[i]) ** 2)\n            X[j] &amp;#43;&amp;#61; 2 * H[i] * P * Vp[i] / np.sqrt(1 - (P * Vp[i]) ** 2)\n        if X[j - 1] &amp;lt; X0[n] &amp;lt; X[j]:  # 适合水平距离时停止增加入射角角度\n            for l in range(50):  # 二分法精确化入射角\n                ag[m][n] &amp;#61; (agi[j - 1] &amp;#43; agi[j]) / 2.0\n                for k in range(m &amp;#43; 1):\n                    P &amp;#61; np.sin(ag[m][1] * np.pi / 180) / Vp[1]\n                    X[l] &amp;#43;&amp;#61; 2 * H[k] * P * Vp[k] / np.sqrt(1 - (P * Vp[k]) ** 2)\n                if abs(X[l] - X0[n]) &amp;gt; 0.5:\n                    if X[l] &amp;gt; X0[n]:\n                        agi[j - 1] &amp;#61; agi[j - 1]\n                        agi[j] &amp;#61; ag[m][n]\n                    if X[l] &amp;lt; X0[n]:\n                        agi[j - 1] &amp;#61; ag[m][n]\n                        agi[j] &amp;#61; agi[j]\n                else:\n                    return ag\n            return ag\n        \n\n# 循环调用子函数\nfor i in range(100,92,-1):\n    ag &amp;#61; angle_function(4, i)\nprint(ag)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;把你的break换成return ag&amp;#xff0c;这样有返回值&amp;#xff0c;就可以在上一步的基础上进行继续迭代运算&amp;#xff0c;这里调用&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;for i in range(100,92,-1):\n    ag &amp;#61; angle_function(4, i)\nprint(ag)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;等同于你的&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;angle_function(4, 100)\nangle_function(4, 99)\nangle_function(4, 98)\nangle_function(4, 97)\nangle_function(4, 96)\nangle_function(4, 95)\nangle_function(4, 94)\nangle_function(4, 93)\n\nprint(ag)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;你可以换成你之前那个循环就可以实现了&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["请问大佬们，Python自定义的函数不可以循环调用吗o(╥﹏╥)o", ["\n", "import numpy as np\n\nX0 = np.arange(-1, 101, 1.0)  # 炮检距（中心点即目标点），-1-100\nX = np.zeros(90)  # 射线经过的水平距离\nag = np.zeros((5, 101))  # 找到适合水平距离的粗始入射角变量，5行101列适用于4层100个炮检距\nagi = np.arange(0, 90, 1.0)  # 设置入射角数组，1度为步长，0-89\na = np.zeros((5, 101))  # 反射点处的入射角，5行101列适用于4层100个炮检距\nVp = [0, 3700, 2400, 3000, 2000]  # 层状速度数组\nH = [0, 60, 20, 40, 20]  # 层厚度数组\n\n\ndef angle_function(m, n):  # 定义子函数，计算层数为n、炮检距为m的入射角\n    for j in range(90):\n        for i in range(m + 1):\n            P = np.sin(agi[j] * np.pi / 180) / Vp[1]\n            # print(P*Vp[i], 1 - (P * Vp[i]) ** 2)\n            X[j] += 2 * H[i] * P * Vp[i] / np.sqrt(1 - (P * Vp[i]) ** 2)\n        if X[j - 1] < X0[n] < X[j]:  # 适合水平距离时停止增加入射角角度\n            for l in range(50):  # 二分法精确化入射角\n                ag[m][n] = (agi[j - 1] + agi[j]) / 2.0\n                for k in range(m + 1):\n                    P = np.sin(ag[m][1] * np.pi / 180) / Vp[1]\n                    X[l] += 2 * H[k] * P * Vp[k] / np.sqrt(1 - (P * Vp[k]) ** 2)\n                if abs(X[l] - X0[n]) > 0.5:\n                    if X[l] > X0[n]:\n                        agi[j - 1] = agi[j - 1]\n                        agi[j] = ag[m][n]\n                    if X[l] < X0[n]:\n                        agi[j - 1] = ag[m][n]\n                        agi[j] = agi[j]\n                else:\n                    break\n            break\n\n# 循环调用子函数\nfor p in range(5):\n    for q in range(101):\n        angle_function(p, q)\nprint(ag)", "\n\n", "如上，循环调用子函数，结果大部分为零", "\n\n", "\n", "import numpy as np\n\nX0 = np.arange(-1, 101, 1.0)  # 炮检距（中心点即目标点），-1-100\nX = np.zeros(90)  # 射线经过的水平距离\nag = np.zeros((5, 101))  # 找到适合水平距离的粗始入射角变量，5行101列适用于4层100个炮检距\nagi = np.arange(0, 90, 1.0)  # 设置入射角数组，1度为步长，0-89\na = np.zeros((5, 101))  # 反射点处的入射角，5行101列适用于4层100个炮检距\nVp = [0, 3700, 2400, 3000, 2000]  # 层状速度数组\nH = [0, 60, 20, 40, 20]  # 层厚度数组\n\n\ndef angle_function(m, n):  # 定义子函数，计算层数为n、炮检距为m的入射角\n    for j in range(90):\n        for i in range(m + 1):\n            P = np.sin(agi[j] * np.pi / 180) / Vp[1]\n            # print(P*Vp[i], 1 - (P * Vp[i]) ** 2)\n            X[j] += 2 * H[i] * P * Vp[i] / np.sqrt(1 - (P * Vp[i]) ** 2)\n        if X[j - 1] < X0[n] < X[j]:  # 适合水平距离时停止增加入射角角度\n            for l in range(50):  # 二分法精确化入射角\n                ag[m][n] = (agi[j - 1] + agi[j]) / 2.0\n                for k in range(m + 1):\n                    P = np.sin(ag[m][1] * np.pi / 180) / Vp[1]\n                    X[l] += 2 * H[k] * P * Vp[k] / np.sqrt(1 - (P * Vp[k]) ** 2)\n                if abs(X[l] - X0[n]) > 0.5:\n                    if X[l] > X0[n]:\n                        agi[j - 1] = agi[j - 1]\n                        agi[j] = ag[m][n]\n                    if X[l] < X0[n]:\n                        agi[j - 1] = ag[m][n]\n                        agi[j] = agi[j]\n                else:\n                    break\n            break\n\n\nangle_function(4, 100)\nangle_function(4, 99)\nangle_function(4, 98)\nangle_function(4, 97)\nangle_function(4, 96)\nangle_function(4, 95)\nangle_function(4, 94)\nangle_function(4, 93)\n\nprint(ag)", "\n\n", "这样一行一行调用，就能正常计算出ag。难道真的要一行一行的调用吗o(╥﹏╥)oo(╥﹏╥)o"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;请看&amp;#x1f449; &amp;#xff1a;&lt;a href=\"https://blog.csdn.net/gfdgfhsds/article/details/104775336\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;推荐系统之LFM算法详解&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["LFM（隐语义模型）算法的实现", ["做推荐系统的，下面是部分数据集", "\n", "dtype=[(", "'userId'", ",np.int32),(", "'movieId'", ",np.int32),(", "'rating'", ",np.float32)]\ndataset=pd.read_csv(DATA_PATH,usecols=", "range", "(", "3", "),dtype=dtype) ", "# 读取csv文件", "\nusers_ratings=dataset.groupby(", "'userId'", ").agg([", "list", "])\nitems_ratings=dataset.groupby(", "'movieId'", ").agg([", "list", "])\n", "# User-LF  10 代表 隐含因子个数是10个", "\nP = ", "dict", "(", "zip", "(users_ratings.index,np.random.rand(", "len", "(users_ratings),", "10", ").astype(np.float32)\n        ))\n", "# Item-LF", "\nQ = ", "dict", "(", "zip", "(items_ratings.index,np.random.rand(", "len", "(items_ratings),", "10", ").astype(np.float32)\n        ))\n\n", "# 梯度下降优化损失函数", "\n", "for", " i ", "in", " ", "range", "(", "15", "):\n        ", "print", "(", "'*'", " * ", "10", ", i)\n        ", "for", " uid, iid, real_rating ", "in", " dataset.itertuples(index=", "False", "):\n                ", "# 遍历 用户 物品的评分数据 通过用户的id 到用户矩阵中获取用户向量", "\n                v_puk = P[uid]\n                ", "# 通过物品的uid 到物品矩阵里获取物品向量", "\n                v_qik = Q[iid]\n                ", "# 计算损失", "\n                error = real_rating - np.dot(v_puk, v_qik)\n                ", "# 0.02学习率 0.01正则化系数", "\n                v_puk += ", "0.02", " * (error * v_qik - ", "0.01", " * v_puk)\n                v_qik += ", "0.02", " * (error * v_puk - ", "0.01", " * v_qik)\n\n                P[uid] = v_puk\n                Q[iid] = v_qik\n", "\n", "v_puk += 0.02 * (error * v_qik - 0.01 * v_puk)  主要是这个向量的更新我不明白，为啥这么更新的"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;我是有问必答小助手&amp;#xff0c;非常抱歉&amp;#xff0c;本次您提出的有问必答问题&amp;#xff0c;技术专家团超时未为您做出解答&lt;br /&gt; &lt;br /&gt;&lt;br /&gt;本次提问扣除的有问必答次数&amp;#xff0c;已经为您补发到账户&amp;#xff0c;我们后续会持续优化&amp;#xff0c;扩大我们的服务范围&amp;#xff0c;为您带来更好地服务。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["计算机视觉的卷积及Dr的代码，上课没有听懂，需要超级详细讲解", ["问题遇到的现象和发生背景", "\n", "Practical task 1: Developing a correlation filter.", "Developing a correlation filter.", "\n", "It is necessary to develop a function - a filter based on correlation. without using ready-made implementations and using only numpy library functions.", "\n", "It is necessary to use the following types of kernels for filters with normalization:", "\n", "1 1 1 1 1       2) -1 -1 -1 -1 -1     3) -1 -1 -1 -1 -1", "\n", " 1 1 1 1 1            0   0  0   0  0         0   0  1   0  0", "\n", " 1 1 1 1 1             1  1   1   1  1         1  1   1  1   1", "\n", "\n", "For test Image please use picture boat1_resize.jpg.", "\n", "Plese, Save your Result as the processed image and code to the report file and subscribe it to answer of this task", "\n", "\n", "问题相关代码，请勿粘贴截图", "\n", "import numpy as np\nimport cv2 as cv\nimg=cv", ".imread", "(", "\"D:/boat1_resize.jpg\"", ",", "0", ")\ncv", ".imshow", "(", "\"1\"", ",img)\ncv", ".waitKey", "(", "0", ")\nkernel1=np", ".array", "(", "[[1,1,1]", ",                   \n                   ", "[0,0,0]", ",\n                   ", "[-1,-1,-1]", "])\nimg=cv", ".copyMakeBorder", "(", "img", ",", "1", ",", "1", ",", "2", ",", "2", ",cv.BORDER_REPLICATE)\nimg2=", "img", ".copy", "()\n", "for", " ", "i", " ", "in", " range(", "0", ",", "321", ",", "1", "):\n    ", "for", " j ", "in", " range(", "0", ",", "492", ",", "1", "):\n        a=np", ".abs", "(np", ".sum", "(np", ".multiply", "(", "img", "[i:i+3,j:j+3]", ",kernel1)))\n        img2", "[i+1,j+2]", "=", "a", "\nimg=", "img", "[1:323,2:495]", "\ncv", ".imshow", "(", "\"1\"", ",img2)\ncv", ".waitKey", "(", "0", ")\ncv", ".destroyAllWindows", "()\n\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-shell\"&gt;# grab方法返回的就是Image对象 \n# 直接传入 grab方法返回值 我这里不会出错\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; PIL &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; ImageGrab &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; ig,Image&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pytesseract&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;img &amp;#61; ig.grab(bbox&amp;#61;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;))&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;img.show()&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;content &amp;#61; pytesseract.image_to_string(img)&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=\"language-python\"&gt;&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(content)&lt;/span&gt;\n*Python 3.\nEile Edit.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;是不是 pytesseract 的安装和配置问题&amp;#xff1f;&lt;br /&gt;&lt;a href=\"https://www.jianshu.com/p/2db541800418\" id=\"textarea_1651421095626_1651421849625_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;参考&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Image.open（img）必须是本地文件吗？", ["问题遇到的现象和发生背景", "\n", "想通过Image.grab（）函数抓取截图然后用pytesseract.image_to_string()识别图中内容，如果要将抓取的图片保存到本地再打开的话将大大降低效率。", "\n", "问题相关代码，请勿粘贴截图", "\n", "from", " PIL ", "import", " ImageGrab ", "as", " ig,Image\n", "import", " numpy ", "as", " np\n", "import", " pytesseract\n\nimg = ig.grab()\nimage = Image.", "open", "(img)\ncontent = pytesseract.image_to_string(image)   ", "# 识别图片", "\n", "print", "(content)\n\n", "\n", "我的解答思路和尝试过的方法", "\n", "尝试过直接使用image.grab()抓取的结果传入报错，转换成np.array(img)数组形式也报错", "\n", "我想要达到的结果", "\n", "如何不保存直接传入image对象进行识别？求解释一下原因"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;用进程池吧&amp;#xff0c;还能控制并发量&amp;#xff0c;多香&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-built_in\"&gt;from&lt;/span&gt; concurrent.futures import ProcessPoolExecutor, &lt;span class=\"hljs-built_in\"&gt;wait&lt;/span&gt;\n\n\ndef run1(&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;):\n    &lt;span class=\"hljs-literal\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n\n\ndef main():\n    pool &amp;#61; ProcessPoolExecutor(max_workers&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;process&lt;/span&gt; &amp;#61; []\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;):\n        p &amp;#61; pool.submit(run1, i)\n        &lt;span class=\"hljs-built_in\"&gt;process&lt;/span&gt;.append(p)\n    &lt;span class=\"hljs-built_in\"&gt;wait&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;process&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; p &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;process&lt;/span&gt;:\n        r1, r2 &amp;#61; p.&lt;span class=\"hljs-built_in\"&gt;result&lt;/span&gt;()\n        print(r1, r2)\n\n\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__ &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:\n    main()\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何获取进程的返回值", ["问题遇到的现象和发生背景", "\n", "我想使用多进程来处理并行工作，但是不知道如何获取进程的返回值。", "我需要保存这些返回值用于后续的处理。", "\n", "问题相关代码，请勿粘贴截图", "\n", "from", " multiprocessing import Process\n\ndef run1(N):\n    trajlen1 = np.", "empty", "(shape=(", "0", ", ", "1", "))\n    etaODAVG1 = np.", "empty", "(shape=(", "0", ", ", "1", "))\n    for i in N:\n        trajOD, etaODavg = ", "traj_judge", "(link_start[i], link_start5, link_end[i], link_end5, eta2)\n        if ", "len", "(trajOD) == ", "1", ":\n            etaODavg1 = simple_eta1[i]\n        else:\n            etaODavg1 = etaODavg\n        etaODAVG1=np.", "append", "(etaODAVG1, [[etaODavg1]], axis=", "0", ")\n        trajlen1=np.", "append", "(trajlen1, [[", "len", "(trajOD)]], axis=", "0", ")\n        ", "print", "(", "'write:'", ", i, ", "'trajlen:'", ",", "len", "(trajOD),", "'etaODAVG'", ",etaODavg1,", "'simpale_eta:'", ", simple_eta1[i], ", "'eta1:'", ", eta1[i])\n    return etaODAVG1,trajlen1\n\ndef ", "main", "():\n    p1=", "Process", "(target=run1,args=(l2[", "0", "],))\n    p1.", "start", "()\n    p1.", "join", "()\n    \nif __name__ == ", "'__main__'", ":\n    ", "main", "()\n\n", "\n", "我想要达到的结果", "\n", "我需要在main（）中获取并保存etaODAVG1,trajlen1这两个返回值。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以使用pandas的apply函数来实现对整个DataFrame的操作。&lt;/p&gt;\n&lt;ul&gt;&lt;li&gt;定义一个函数extract_numbers&amp;#xff0c;用于提取字符串中的数字&amp;#xff0c;然后使用apply函数将这个函数应用于DataFrame的每一行&amp;#xff0c;最后将提取出的数字存到一个新的DataFrame中。实现如下&amp;#xff1a;&lt;/li&gt;&lt;/ul&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; re\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;extract_numbers&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;提取字符串中的数字&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;, re.findall(&lt;span class=\"hljs-string\"&gt;r&amp;#39;\\d&amp;#43;.\\d&amp;#43;&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(s))))\n\ndf0 &amp;#61; pd.DataFrame([[&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#61;6.2&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#61;6.3&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;z&amp;#61;6.7&amp;#39;&lt;/span&gt;], [&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#61;7.2&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#61;8.3&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#61;9.5&amp;#39;&lt;/span&gt;]])\ndf1 &amp;#61; df0.apply(extract_numbers, axis&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\ndf1_np &amp;#61; np.array(df1.to_list())\n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(df1_np)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;输出&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-string\"&gt;[[6.2 6.3 6.7]\n [7.2 8.3 9.5]]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/957905308276179.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["使用pandas快速提取表中的数字", ["有一个类似这样的pandas表：", "\n", "df0 = pd.", "DataFrame", "([[", "'x=6.2'", ", ", "'y=6.3'", ", ", "'z=6.7'", "], [", "'x=7.2'", ", ", "'x=8.3'", ",", "'x=9.5'", "]])\n", "\n", "希望获得其中的所有数字，并存到numpy中。目前所使用的方法如下：", "\n", "df0_np = np", ".zeros", "(", "[df0.shape[0]", ", ", "3", "])\n", "for", " ", "i", " ", "in", " range(df0_np", ".shape", "[0]", "):\n    df0_np", "[i, :]", " = df0", ".iloc", "[i, :]", ".str", ".extract", "(r", "'(\\d+.\\d+)'", ")", ".transpose", "()\n", "print", "(df0_np)", "\n", "\n", "得到结果如下：", "\n", "[[6.2 6.3 6.7]\n [7.2 8.3 9.5]]", "\n", "\n", "由于str.extract()方法只能应用于series，不知道有什么更快捷的方法能够一次性应用于所有的dataframe，因此采用循环的方法解决。希望能够直接应用于dataframe对象获得最终的numpy数组，感谢。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;那试试这样:&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;import pandas as pd\nimport numpy as np\n\nA &amp;#61; np.arange(10,100,10)\nB &amp;#61; np.arange(0.1,1,0.1)\nC &amp;#61; np.arange(2,16,2)\n\ni_re &amp;#61; 10\nj_re &amp;#61; 0.1\nk_re &amp;#61; 2\nv_re &amp;#61; -9.8\n\nfor i in A:\n    for j in B:\n        for k in C:\n            V &amp;#61; j*k-i\n            if V&amp;gt;v_re:\n                i_re,j_re,k_re,v_re &amp;#61; i,j,k,V\n                \nprint(i_re,j_re,k_re,v_re)    &lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何找到for循环中的参数", ["\nA = np.arange(10,100,10)\nB = np.arange(0.1,1,0.1)\nC = np.arange(2,16,2)\nfor i in A:\n    for j in B:\n        for k in C:\n            V = j*k-i\n如何找到V的最大值很简单但如何找到得到最大值时的ijk分别是多少 求大神告知"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的data是想要表示什么内容呢&amp;#xff1f;&lt;br /&gt;w是一个小数&amp;#xff0c;year是一个列表&amp;#xff0c;这两者不能相乘&amp;#xff0c;只能通过列表推导式把列表的每个元素和w相乘&amp;#xff0c;再生成一个列表&amp;#xff1a;&lt;br /&gt;data&amp;#61;[w&lt;em&gt;i for i in year]&lt;br /&gt;但我觉得逻辑上好像应该把列表放在循环里&amp;#xff0c;把每个w&lt;/em&gt;year的值保存起来&amp;#xff0c;所以先描述一下你的需求&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;data2&amp;#61;[]\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;):\n    &lt;span class=\"hljs-comment\"&gt;# 代码省略&lt;/span&gt;\n    data2.append(w*year[i])\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python代码问题", ["\n", "import", " matplotlib.pyplot as plt\n", "import", " numpy as np\n\n", "plt", ".title(", "\"year-olders Function\"", ",fontsize=", "12", ")\n", "plt", ".xlabel(", "\"year\"", ")\n", "plt", ".ylabel(", "\"olders\"", ")\n\n", "year", "=[", "2000", ",", "2001", ",", "2002", ",", "2003", ",", "2004", ",", "2005", ",", "2006", ",", "2007", ",", "2008", ",", "2009", "]\n", "older", "=[", "88274022", ",", "90615170", ",", "93770690", ",", "96920250", ",", "98790880", ",", "100682120", ",", "103843920", ",", "107024490", ",", "110225660", ",", "113432500", "]\n", "plt", ".scatter(year,older)\n", "w", "=", "0", ".", "5", "\n", "for", " i in range(", "10", "):\n    ", "x", "=year[i] #x=", "1", "\n    ", "y", "=older[i] #y=", "0", ".", "89", "\n    ", "data", "=w*x #y_pre=", "0", ".", "5", "*", "1", "=", "0", ".", "5", "\n    ", "e", "=y-data #e=", "0", ".", "39", "\n    ", "alpha", "=", "0", ".", "05", "\n    ", "w", "=w+alpha*e*x #w=", "0", ".", "5", "+", "0", ".", "05", "*", "0", ".", "39", "*", "1", "=", "0", ".", "5195", "\n", "data", "=w*year\n", "plt", ".plot(year,data)\n", "plt", ".show()\n", "\n", "这段代码是哪里出错了呢，”data=w*year“这一行一直在报TypeError: can't multiply sequence by non-int of type 'float'错误，请赐教。"]], "Tag": "算法设计"}
{"Answer": "&lt;h2 id=\"h2_该回答引用gptᴼᴾᴱᴺᴬᴵ_1676958174611\"&gt;该回答引用GPTᴼᴾᴱᴺᴬᴵ&lt;/h2&gt;\n&lt;h2 id=\"h2_从您提供的代码看&amp;#xff0c;图片已经被读入&amp;#xff0c;reshape-成为-n_samples-n_features-的二维数组-z&amp;#xff0c;再转化为一维数组-whw_df。但是在这里&amp;#xff0c;一维数组-whw_df-中的每个元素又被包装成一个列表&amp;#xff0c;这一步看上去没有必要。因此&amp;#xff0c;可以直接把-whw_df-的元素改成三个维度&amp;#xff0c;即-whw_df--whw_dfreshape-1-1-3。_1676958174611\"&gt;从您提供的代码看&amp;#xff0c;图片已经被读入&amp;#xff0c;reshape 成为 (n_samples, n_features) 的二维数组 Z&amp;#xff0c;再转化为一维数组 whw_df。但是在这里&amp;#xff0c;一维数组 whw_df 中的每个元素又被包装成一个列表&amp;#xff0c;这一步看上去没有必要。因此&amp;#xff0c;可以直接把 whw_df 的元素改成三个维度&amp;#xff0c;即 whw_df &amp;#61; whw_df.reshape(-1, 1, 3)。&lt;/h2&gt;\n&lt;h2 id=\"h2_此外&amp;#xff0c;聚类算法在图像分割中通常使用-rgb-颜色空间&amp;#xff0c;而不是将每个像素的-r、g、b-三个分量分开考虑。因此&amp;#xff0c;将-z-按行展平为一维数组后&amp;#xff0c;应该将其转化为一个二维数组&amp;#xff0c;即-z--imgreshape-1-3。_1676958174611\"&gt;此外&amp;#xff0c;聚类算法在图像分割中通常使用 RGB 颜色空间&amp;#xff0c;而不是将每个像素的 R、G、B 三个分量分开考虑。因此&amp;#xff0c;将 Z 按行展平为一维数组后&amp;#xff0c;应该将其转化为一个二维数组&amp;#xff0c;即 Z &amp;#61; img.reshape((-1, 3))。&lt;/h2&gt;\n&lt;p&gt;修改后的代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attr\"&gt;img&lt;/span&gt; &amp;#61; cv2.imread(&amp;#39;/content/drive/MyDrive/no-fog vs fog/&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;_8_1.jpg&amp;#39;)\n&lt;span class=\"hljs-attr\"&gt;Z&lt;/span&gt; &amp;#61; img.reshape((-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;))\n&lt;span class=\"hljs-attr\"&gt;whw_df&lt;/span&gt; &amp;#61; np.float32(Z).reshape(-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n\n&lt;span class=\"hljs-comment\"&gt;# 利用SSE选择k&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;whw_SSE&lt;/span&gt; &amp;#61; []  &lt;span class=\"hljs-comment\"&gt;# 存放每次结果的误差平方和&lt;/span&gt;\nfor i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;):  &lt;span class=\"hljs-comment\"&gt;# 尝试要聚成的类数&lt;/span&gt;\n    &lt;span class=\"hljs-attr\"&gt;whw_estimator&lt;/span&gt; &amp;#61; KMeans(&lt;span class=\"hljs-attr\"&gt;n_clusters&amp;#61;i)&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 构造聚类器&lt;/span&gt;\n    whw_estimator.fit(whw_df)  &lt;span class=\"hljs-comment\"&gt;# 存入数组&amp;#xff08;数据的列名标签&amp;#xff09;&lt;/span&gt;\n    whw_SSE.append(whw_estimator.inertia_)\n\n&lt;span class=\"hljs-attr\"&gt;X&lt;/span&gt; &amp;#61; range(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 跟k值要一样&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;fig&lt;/span&gt; &amp;#61; plt.figure(&lt;span class=\"hljs-attr\"&gt;figsize&amp;#61;(8,6))&lt;/span&gt;\nplt.xlabel(&amp;#39;聚类数目&amp;#39;)\nplt.ylabel(&amp;#39;SSE&amp;#39;)\nplt.plot(X, whw_SSE,&amp;#39;o-&amp;#39;)\nplt.title(&lt;span class=\"hljs-string\"&gt;&amp;#34;K值在肘关节处最优&amp;#34;&lt;/span&gt;)\nplt.show()  &lt;span class=\"hljs-comment\"&gt;# 画出图&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;希望这能解决您的问题。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["想用肘关节法看图片最优聚类  输入维度有问题怎么解决？", ["\n", "img=cv2.imread('/content/drive/MyDrive/no-fog", " vs fog/", "8", "_8_1.jpg')\n", "Z", " = img.reshape((-", "1", ", ", "3", "))\n", "Z", " = np.array(Z).reshape(", "1", ", -", "1", ")\n", "whw_df", " = np.float32(Z)\n", "whw_df", " = [[i] for i ", "in", " whw_df]\n", "##KMeans进行选取聚类数目", "\n", "#分别利用手肘法和轮廓系数对聚类的数目进行探索：", "\n", "#手肘法", "\n", "# 利用SSE选择k", "\n", "whw_SSE", " = []  ", "# 存放每次结果的误差平方和", "\nfor i ", "in", " range(", "2", ", ", "8", "):  ", "# 尝试要聚成的类数", "\n    ", "whw_estimator", " = KMeans(", "n_clusters=i)", "  ", "# 构造聚类器", "\n    whw_estimator.fit(whw_df) ", "#存入数组（数据的列名标签）", "\n    whw_SSE.append(whw_estimator.inertia_)\n", "X", " = range(", "2", ", ", "8", ")  ", "# 跟k值要一样", "\n", "fig", " = plt.figure(", "figsize=(8,6))", "\nplt.xlabel('聚类数目')\nplt.ylabel('SSE')\nplt.plot(X, whw_SSE,'o-' )\nplt.title(", "\"K值在肘关节处最优\"", ")\nplt.show()  ", "# 画出图", "\n"]], "Tag": "算法设计"}
{"Answer": "模型的定义没有看到，另外你epochs=10是不是太小了，还没有效果。", "Konwledge_Point": "应对NP完全问题", "Question": ["基于keras，使用imagedatagenerator.flow函数读入数据，训练集ACC极低", ["在做字符识别的神经网络，数据集是用序号标好名称的图片，标签取图片的文件名。想用Imagedatagenrator", "\n函数和flow函数，增加样本的泛化性，然后生成数据传入网络，可是这样acc=1/类别数，基本为零。请问哪里出了问题", "\n\n", "datagen = ImageDataGenerator(\n       width_shift_range=0.1,\n       height_shift_range=0.1\n       )\ndef read_train_image(self, name):\n       myimg = Image.open(name).convert('RGB')\n       return np.array(myimg)\n\ndef train(self):\n       #训练集\n       train_img_list = []\n       train_label_list = []\n       #测试集\n       test_img_list = []\n       test_label_list = []\n       for file in os.listdir('train'):\n           files_img_in_array = self.read_train_image(name='train/' + file)\n           train_img_list.append(files_img_in_array)  # Image list add up\n           train_label_list.append(int(file.split('_')[0]))  # lable list addup\n       for file in os.listdir('test'):\n            files_img_in_array = self.read_train_image(name='test/' + file)\n            test_img_list.append(files_img_in_array)  # Image list add up\n            test_label_list.append(int(file.split('_')[0]))  # lable list addup\n\n        train_img_list = np.array(train_img_list)\n        train_label_list = np.array(train_label_list)\n        test_img_list = np.array(train_img_list)\n        test_label_list = np.array(train_label_list)\n        train_label_list = np_utils.to_categorical(train_label_list, 5788)\n        test_label_list = np_utils.to_categorical(test_label_list, 5788)\n        train_img_list = train_img_list.astype('float32')\n        test_img_list = test_img_list.astype('float32')\n        test_img_list /= 255.0\n        train_img_list /= 255.0\n", "\n\n", "这是图片数据的处理，图片和标签都存到list里。下面是用fit_genrator训练", "\n\n", "model.fit_generator(\n            self.datagen.flow(x=train_img_list, y=train_label_list, batch_size=2),\n            samples_per_epoch=len(train_img_list),\n            epochs=10,\n            validation_data=(test_img_list,test_label_list),\n            )\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a id=\"textarea_1665996553407_1665996562842_0\"&gt;http://t.csdn.cn/zj6sG&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["出现cannot reshape array of size 27749792 into shape (300,1)", ["\n ", "# 转numpy数组,打乱顺序", "\n    ", "dataSet", " = np.array(dataSet).reshape(-", "1", ", ", "300", ")\n    ", "lableSet", " = np.array(lableSet).reshape(-", "1", ", ", "1", ")\n    ", "train_ds", " = np.hstack((dataSet, lableSet))\n    ", "np", ".random.shuffle(train_ds)\n\n    ", "# 数据集及其标签集", "\n    ", "X", " = train_ds.reshape(-", "1", ", ", "300", ", ", "1", ")\n    ", "Y", " = train_ds\n", "\n", "为什么这样就会出现", "\n", "把", "X = train_ds.reshape(-1, 300, 1)", "Y = train_ds", "改成", "X = train_ds[:, 300].reshape(-1, 300, 1)", "Y = train_ds[:, 300]", "就能运行出来了呢？那个[:, 300]是什么意思，看不懂"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;samples_generator模块在新版本scikit-learn中已被移除。&lt;br /&gt;samples_generator模块中相应的类/函数直接从sklearn.datasets中导入即可。&lt;/p&gt;\n&lt;p&gt;from sklearn.datasets import make_circles&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于PyCharm编译器中的报错问题", ["\n", "import", " numpy ", "as", " np\n", "import", " matplotlib.pyplot ", "as", " plt\n", "from", " sklearn.svm ", "import", " SVC\n", "from", " sklearn.datasets.samples_generator ", "import", " make_circles\n", "X", ", y=make_circles(", "100", ",factor=.", "1", ",noise=.", "1", ")\n", "plt", ".scatter(", "X", "[:,", "0", "],", "X", "[:,", "1", "],c=y,s=", "50", ",cmap='autumn')\n", "\n", "这一段代码中的from sklearn.datasets.samples_generator import make_circles运行出错。sklearn也安装了。错误报告是：ModuleNotFoundError: No module named 'sklearn.datasets.samples_generator'   编译器使用的是PyCharm。请问有人知道要怎么弄吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;strip 不改变原来的字符串&amp;#xff0c;你需要把返回值赋值给原来的字符串&amp;#xff0c;或者直接输出strip的结果&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python输出结果有空格", ["问题遇到的现象和发生背景", "\n", "最近在用python编写一个机器人的正解程序，通过读取数据进行正解计算，并将计算出的数据输出到文档", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "import", " numpy ", "as", " np\n", "import", " math\n", "import", " csv\n", "with", " ", "open", "(\"tjx.csv\", mode=\"r\", encoding=\"utf-8\") ", "as", " f,\\\n        ", "open", "(\"tt.txt\", mode=\"w\", encoding=\"utf-8\") ", "as", " f1:\n    ", "for", " ", "row", " ", "in", " csv.reader(f, skipinitialspace=", "True", "):\n        c1 = ", "float", "(", "row", "[", "0", "])\n        c2 = ", "float", "(", "row", "[", "1", "])\n        c3 = ", "float", "(", "row", "[", "2", "])\n        c4 = ", "float", "(", "row", "[", "3", "])\n        c5 = ", "float", "(", "row", "[", "4", "])\n        c6 = ", "float", "(", "row", "[", "5", "])\n\n        T1 = np.mat([[round(math.cos(c1)), -round(math.sin(c1)), ", "0", ", ", "0", "],\n                     [round(math.sin(c1)), round(math.cos(c1)), ", "0", ", ", "0", "],\n                     [", "0", ", ", "0", ", ", "1", ", ", "187", "],\n                     [", "0", ", ", "0", ", ", "0", ", ", "1", "]])\n        T2 = np.mat([[round(math.cos(c2), ", "4", "), ", "0", ", round(math.sin(c2), ", "4", "), ", "0", "],\n                     [round(math.sin(c2), ", "4", "), ", "0", ", -round(math.cos(c2), ", "4", "), ", "0", "],\n                     [", "0", ", ", "1", ", ", "0", ", ", "6", "],\n                     [", "0", ", ", "0", ", ", "0", ", ", "1", "]])\n        T3 = np.mat([[round(math.cos(c3), ", "4", "), -round(math.sin(c3), ", "4", "), ", "0", ", ", "210", "*(round(math.cos(c3), ", "4", "))],\n                     [round(math.sin(c3), ", "4", "), round(math.cos(c3), ", "4", "), ", "0", ", ", "210", "*(round(math.sin(c3), ", "4", "))],\n                     [", "0", ", ", "0", ", ", "1", ", ", "0", "],\n                     [", "0", ", ", "0", ", ", "0", ", ", "1", "]])\n        T4 = np.mat([[round(math.cos(c4), ", "4", "), ", "0", ", -round(math.sin(c4), ", "4", "), ", "0", "],\n                     [round(math.sin(c4), ", "4", "), ", "0", ", round(math.cos(c4), ", "4", "), ", "0", "],\n                     [", "0", ", ", "-1", ", ", "0", ", ", "210.5", "],\n                     [", "0", ", ", "0", ", ", "0", ", ", "1", "]])\n        T5 = np.mat([[round(math.cos(c5), ", "4", "), ", "0", ", round(math.sin(c5), ", "4", "), ", "0", "],\n                     [round(math.sin(c5), ", "4", "), ", "0", ", -round(math.cos(c5), ", "4", "), ", "0", "],\n                     [", "0", ", ", "1", ", ", "0", ", ", "0", "],\n                     [", "0", ", ", "0", ", ", "0", ", ", "1", "]])\n        T6 = np.mat([[round(math.cos(c6), ", "4", "), ", "0", ", -round(math.sin(c6), ", "4", "), ", "0", "],\n                     [round(math.sin(c6), ", "4", "), ", "0", ", round(math.cos(c6), ", "4", "), ", "0", "],\n                     [", "0", ", ", "-1", ", ", "0", ", ", "159.3", "],\n                     [", "0", ", ", "0", ", ", "0", ", ", "1", "]])\n\n        T01 = np.dot(T1, T2)\n        T12 = np.dot(T01, T3)\n        T23 = np.dot(T12, T4)\n        T34 = np.dot(T23, T5)\n        T45 = np.dot(T34, T6)\n        ", "for", " i ", "in", " range(len(T45)):\n            f1.", "write", "(str(T45[i]) + ", "'\\n'", ")\n\n\n", "\n", "运行结果及报错内容", "\n", "程序能够正常运行，结果可以正常输出，但是运行结果前有空格。", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "使用 strip 但是未能清楚两端空格", "\n", "我想要达到的结果", "\n", "输出的结果没有空格存在", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;angles 这个ndarray 有7个元素&amp;#xff0c;而radar_labels 只有6个&amp;#xff0c;不匹配&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["霍兰德人格分析代码运行", ["\n", "#HollandPersonalityAnalysis.py", "\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\nmatplotlib.rcParams[", "'font.family'", "]=", "'SimHei'", "\nradar_labels = np.array([", "'研究型(I)'", ",", "'艺术型(A)'", ",", "'社会型(S)'", ",\\\n                         ", "'企业型(E)'", ",", "'常规型(C)'", ",", "'现实型(R)'", "]) #雷达标签\nnAttr = 6\ndata = np.array([[0.40, 0.32, 0.35, 0.30, 0.30, 0.88],\n                 [0.85, 0.35, 0.30, 0.40, 0.40, 0.30],\n                 [0.43, 0.89, 0.30, 0.28, 0.22, 0.30],\n                 [0.30, 0.25, 0.48, 0.85, 0.45, 0.40],\n                 [0.20, 0.38, 0.87, 0.45, 0.32, 0.28],\n                 [0.34, 0.31, 0.38, 0.40, 0.92, 0.28]]) #数据值\ndata_labels = (", "'艺术家'", ", ", "'实验员'", ", ", "'工程师'", ", ", "'推销员'", ", ", "'社会工作者'", ",", "'记事员'", ")\nangles = np.linspace(0, 2*np.pi, nAttr, ", "endpoint", "=", "False", ")\ndata = np.concatenate((data, [data[0]]))\nangles = np.concatenate((angles, [angles[0]]))\nfig = plt.figure(", "facecolor", "=", "\"white\"", ")\nplt.subplot(111, ", "polar", "=", "True", ")\nplt.plot(angles,data,", "'o-'", ", ", "linewidth", "=1, ", "alpha", "=0.2)\nplt.fill(angles,data, ", "alpha", "=0.25)\nplt.thetagrids(angles", "*180", "/np.pi, radar_labels,frac = 1.2)\nplt.figtext(0.52, 0.95, ", "'霍兰德人格分析'", ", ", "ha", "=", "'center'", ", ", "size", "=20)\nlegend = plt.legend(data_labels, loc=(0.94, 0.80), ", "labelspacing", "=0.1)\nplt.setp(legend.get_texts(), ", "fontsize", "=", "'large'", ")\nplt.grid(", "True", ")\nplt.savefig(", "'holland_radar.jpg'", ")\nplt.show()\n\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; logging  # 引入logging模块\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; os.path\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;\n# 第一步&amp;#xff0c;创建一个logger\nlogger &amp;#61; logging.getLogger()\nlogger.setLevel(logging.&lt;span class=\"hljs-keyword\"&gt;INFO&lt;/span&gt;)  # &lt;span class=\"hljs-keyword\"&gt;Log&lt;/span&gt;等级总开关\n# 第二步&amp;#xff0c;创建一个&lt;span class=\"hljs-keyword\"&gt;handler&lt;/span&gt;&amp;#xff0c;用于写入日志文件\nrq &amp;#61; &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;.strftime(&lt;span class=\"hljs-string\"&gt;&amp;#39;%Y%m%d%H%M&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;localtime&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;time&lt;/span&gt;.time()))\nlog_path &amp;#61; os.path.dirname(os.getcwd()) &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;/Logs/&amp;#39;&lt;/span&gt;\nlog_name &amp;#61; log_path &amp;#43; rq &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;.log&amp;#39;&lt;/span&gt;\nlogfile &amp;#61; log_name\nfh &amp;#61; logging.FileHandler(logfile, mode&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)\nfh.setLevel(logging.&lt;span class=\"hljs-keyword\"&gt;DEBUG&lt;/span&gt;)  # 输出到file的&lt;span class=\"hljs-keyword\"&gt;log&lt;/span&gt;等级的开关\n# 第三步&amp;#xff0c;定义&lt;span class=\"hljs-keyword\"&gt;handler&lt;/span&gt;的输出格式\nformatter &amp;#61; logging.Formatter(&amp;#34;%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s&amp;#34;)\nfh.setFormatter(formatter)\n# 第四步&amp;#xff0c;将logger添加到&lt;span class=\"hljs-keyword\"&gt;handler&lt;/span&gt;里面\nlogger.addHandler(fh)\n# 日志\nlogger.&lt;span class=\"hljs-keyword\"&gt;debug&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;this is a logger debug message&amp;#39;&lt;/span&gt;)\nlogger.&lt;span class=\"hljs-keyword\"&gt;info&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;this is a logger info message&amp;#39;&lt;/span&gt;)\nlogger.&lt;span class=\"hljs-built_in\"&gt;warning&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;this is a logger warning message&amp;#39;&lt;/span&gt;)\nlogger.error(&lt;span class=\"hljs-string\"&gt;&amp;#39;this is a logger error message&amp;#39;&lt;/span&gt;)\nlogger.critical(&lt;span class=\"hljs-string\"&gt;&amp;#39;this is a logger critical message&amp;#39;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["您好！请问您在之前遇到的下面的这个问题解决了么，我也遇到了这个问题", ["import logging\nimport logging.config, configparser, numpy ", "as", " np, random, codecs\nfrom collections import OrderedDict\n#导入日志配置文件\nlogging.config.fileConfig(", "\"logging.conf\"", ")\n#创建日志对象\nloggerInfo = logging.getLogger(", "\"TimeInfoLogger\"", ")\nConsolelogger = logging.getLogger(", "\"ConsoleLogger\"", ")\n#导入配置文件\n", "conf", " = configparser.configparser()\n", "conf", ".", "read", "(", "\"setting.conf\"", ")\nTraceback (most recent ", "call", " ", "last", "):\n\nFile ", "\"<ipython-input-3-000cd5757360>\"", ", ", "line", " ", "5", ", in ", "<module>", "\nlogging.config.fileConfig(", "\"logging.conf\"", ")\n\nFile ", "\"C:\\Users\\Anaconda3\\lib\\logging\\config.py\"", ", ", "line", " ", "76", ", in fileConfig\nformatters = _create_formatters(", "cp", ")\n\nFile ", "\"C:\\Users\\Anaconda3\\lib\\logging\\config.py\"", ", ", "line", " ", "109", ", in _create_formatters\nflist = ", "cp", "[", "\"formatters\"", "][", "\"keys\"", "]\n\nFile ", "\"C:\\Users\\Anaconda3\\lib\\configparser.py\"", ", ", "line", " ", "956", ", in __getitem__\nraise KeyError(key)\n\nKeyError: ", "'formatters'", "\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;望采纳&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[1,2,3,4]&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a[::-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/81247618205616.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["下面代码得到的结果怎么倒置", ["a 的 列表 怎么倒置呢？【0.08 0.11 ..nan】", "代码怎么写", "\n", "\n", "from", " talib import abstract\nimport numpy as np\nMACD = abstract.Function(", "'MACD'", ")\nDIFF,DEA,MACDHIST = MACD(df.close,", "fastperiod", "=12,slowperiod=26,signalperiod=9)\n", "a", "=np.around(DIFF,decimals=2)\n", "b", "=np.around(DEA,decimals=2)\n", "print", "(a[-1])\n", "print", "(a)\n\n0.08\n[ nan  nan  nan ", "..", ". 0.11 0.11 0.08]\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;看起来这个代码只做了二次多项式回归&amp;#xff0c;并且在图像中绘制了回归曲线。如果你想更改degree&amp;#xff0c;你需要更改以下代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;&lt;span class=\"hljs-attr\"&gt;poly_reg&lt;/span&gt;&amp;#61;PolynomialFeatures(degree&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)   &lt;span class=\"hljs-comment\"&gt;##reset degree&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;把degree的值设置为你想要的数值。&lt;/p&gt;\n&lt;p&gt;然而&amp;#xff0c;每次运行代码所得到的MSE值都不一样是正常的。因为训练数据和测试数据是随机选取的&amp;#xff0c;如果每次运行代码都选取了不同的训练数据和测试数据&amp;#xff0c;则每次的MSE值都会有所不同。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["多项式回归，matplob绘图", ["机器学习，用的Polynomial Regression，在jupyter运行，思路是先从excel读数据，再用LabelEncoder重新排序并索引，最后进行regression", "问题：不管怎么改degree的数值，只能输出degree=2的图像，但是每次MSE都不一样", "\n", "\n", "\nimport numpy as np  \nimport sklearn.linear_model as lm    \nimport matplotlib.pyplot as plt \nimport pandas as pd\n", "from", " sklearn.model_selection import train_test_split\n", "from", " sklearn.preprocessing import PolynomialFeatures\n", "from", " sklearn import preprocessing\n", "from", " sklearn.preprocessing import LabelEncoder\n", "from", " sklearn.metrics import mean_squared_error\n\n", "df", "=pd.read_excel('data.xlsx',sheet_name='T5',header=9,nrows=1)\ndf.isnull()\n", "data", "=df.iloc[0]    #read 2022 ", "to", " 1950 into data\n", "Y", "=data[1:]\n", "le", "=LabelEncoder()\n", "X", "=le.fit_transform(df.columns[1:])\n\n", "datasets_X", "=np.arange(1950,2014,step=1)\n", "dataset_length", "=len(datasets_X)\n", "datasets_Y", "=data[2023-datasets_X]\n", "datasets_Y", "=np.array(datasets_Y)\n", "datasets_X", "=np.array(datasets_X).reshape([dataset_length,1])\n", "test_X", "=np.arange(2014,2023,step=1)\n", "test_length", "=len(test_X)\n", "test_X", "=np.array(test_X).reshape([test_length,1])\n\n", "poly_reg", "=PolynomialFeatures(degree=2)   ##reset degree\n", "X_poly", "=poly_reg.fit_transform(datasets_X)\n", "lin_reg", "=lm.LinearRegression()\nlin_reg.fit(X_poly,datasets_Y)\n", "data1", "=poly_reg.fit_transform(test_X)\n", "pred", "=lin_reg.predict(data1)\nTEST=[5469724,5535002,5607283,5612253,5638676,5703569,5685807,5453566,5637022]\n", "mse", "=mean_squared_error(TEST, pred)\n\nplt.scatter(datasets_X,datasets_Y,", "s", "=10)\n", "my_x_ticks", "=np.arange(1950,2023,10)\nplt.xticks(my_x_ticks)\n", "X", "=np.arange(1950,2023).reshape([-1,1])\nplt.plot(X,lin_reg.predict(poly_reg.fit_transform(X)),", "color", "=", "'black'", ")\nplt.xlabel(", "\"Year\"", ")\nplt.ylabel(", "\"Total Population(*", "$10", "^6)$\"", ")\nplt.title(", "\"Multiple Regression\"", ")\nplt.scatter(test_X,TEST,", "s", "=10)\nplt.show()\n", "print", "(mse)\n"]], "Tag": "算法设计"}
{"Answer": "问题已解决， 将算法中求幂的过程有 ** 改为 math.pow(row,3)即可", "Konwledge_Point": "应对NP完全问题", "Question": ["python numpy整型数据溢出", ["在计算图像矩的过程中，发现数据溢出了，与调用openCV库中的函数算出的结果不同。", "\n目前使用的是numpy数组储存数据，数据类型设为int64，但是他的范围还是不够大，数值会在10的16 次方的数量级。应该怎么设置这个数组的类型呀？", "\n\n", "# 计算p+q阶图像矩\ndef img_m(img):\n    # 用于存放图像矩计算结果\n    result = np.zeros([4,4],dtype='float')\n    # 获取图像大小\n    height = img.shape[0]\n    width = img.shape[1]\n    # 遍历图像内的像素点，进行图像矩计算\n    for row in range(height):\n        for col in range(width):\n            result[0, 0] += img[row,col]\n            result[0, 1] += row * img[row, col]\n            result[1, 0] += col * img[row, col]\n            result[1, 1] += row * col * img[row, col]\n            result[0, 2] += row ** 2 * img[row, col]\n            result[2, 0] += col ** 2 * img[row, col]\n            result[0, 3] += row ** 3 * img[row, col]\n            result[3, 0] += col ** 3 * img[row, col]\n            result[2, 1] += row * col ** 2 * img[row, col]\n            result[1, 2] += row ** 2 * col * img[row, col]\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以将高度值 z 转换成二维数组的形式&amp;#xff0c;然后再使用 plt.contour 函数绘制等高图。&lt;/p&gt;\n&lt;p&gt;比如&amp;#xff0c;可以使用 numpy.meshgrid 函数将横坐标和纵坐标列表转换成网格坐标矩阵&amp;#xff0c;然后将这两个网格坐标矩阵广播相乘得到一个矩形网格坐标矩阵&amp;#xff0c;再将高度值列表转换成与网格坐标矩阵大小相同的矩阵&amp;#xff0c;最后将矩阵传入 plt.contour 函数即可。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; numpy as np\n&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; matplotlib.pyplot as plt\n\n&lt;span class=\"hljs-comment\"&gt;# 数据准备&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;x&lt;/span&gt; &amp;#61; [&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;300&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;400&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;]  &lt;span class=\"hljs-comment\"&gt;# 横坐标&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;y&lt;/span&gt; &amp;#61; [&lt;span class=\"hljs-number\"&gt;300&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;]  &lt;span class=\"hljs-comment\"&gt;# 纵坐标&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;z&lt;/span&gt; &amp;#61; [&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;120&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;110&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;150&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;180&lt;/span&gt;]  &lt;span class=\"hljs-comment\"&gt;# 高度值&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 将横坐标和纵坐标列表转换成网格坐标矩阵&lt;/span&gt;\nxx, &lt;span class=\"hljs-attr\"&gt;yy&lt;/span&gt; &amp;#61; np.meshgrid(x, y)\n\n&lt;span class=\"hljs-comment\"&gt;# 将高度值列表转换成与网格坐标矩阵大小相同的矩阵&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;zz&lt;/span&gt; &amp;#61; np.array(z).reshape(xx.shape)\n\n&lt;span class=\"hljs-comment\"&gt;# 绘制等高图&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;C&lt;/span&gt; &amp;#61; plt.contour(xx, yy, zz, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;colors&amp;#61;&amp;#39;black&amp;#39;)&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 添加标题&lt;/span&gt;\nplt.title(f&lt;span class=\"hljs-string\"&gt;&amp;#34;测试&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;fontsize&amp;#61;20,&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;fontname&amp;#61;&amp;#34;SimHei&amp;#34;)&lt;/span&gt;   &lt;span class=\"hljs-comment\"&gt;# &amp;#34;SimHei&amp;#34;黑体字体可确保中文正常显示&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 等值线间添加过渡色&lt;/span&gt;\nplt.contourf(xx, yy, zz, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;)\n\n&lt;span class=\"hljs-comment\"&gt;# colorbar()可在右侧显示颜色值&lt;/span&gt;\nplt.colorbar()\n\n&lt;span class=\"hljs-comment\"&gt;# clabel用于标记等高线&lt;/span&gt;\nplt.clabel(C,&lt;span class=\"hljs-attr\"&gt;inline&amp;#61;1,fontsize&amp;#61;10)&lt;/span&gt;\n\nplt.show()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;仅供参考&amp;#xff0c;望采纳&amp;#xff0c;谢谢。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于python中matplotlib绘制等高图的问题", ["用matplotlib的plt.contour(x,y,z,8,colors='black')绘制等高图，其高度值z得是二维数组，但我手里高度值只是一组列表，要怎样才能绘制出等高图呢？", "\n", "代码如下：", "\n", "import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n", "import", " matplotlib.pyplot ", "as", " plt\n\n", "#数据准备", "\nx=[", "100", ",", "200", ",", "300", ",", "400", ",", "500", "]  ", "#横坐标", "\ny=[", "300", ",", "500", ",", "100", ",", "200", ",", "500", "]  ", "#纵坐标", "\nz=[", "100", ",", "120", ",", "110", ",", "150", ",", "180", "]  ", "#高度值，运行时这里出错，提示“Input z must be 2D, not 1D”，", "\n                         ", "#问题是如何转换成二维数组？？？？？", "\n\n", "'''添加标题'''", "\nplt.title(", "f\"测试\"", ", fontsize=", "20", ", fontname=", "\"SimHei\"", ")   ", "#\"SimHei\"黑体字体可确保中文正常显示", "\n\n", "'''contour()函数可生成三维结构表面的等值线图'''", "\nC = plt.contour(x,y,z,", "8", ",colors=", "'black'", ")\n\n", "'''cmap=plt.cm.hot为等值线添加过渡色'''", "\nplt.contour(x,y,z,", "8", ",cmap=plt.cm.hot)\n\n", "'''等值线间添加过渡色'''", "\nplt.contourf(x,y,z, ", "8", ")\n\n", "'''colorbar()可在右侧显示颜色值'''", "\nplt.colorbar()\n\n", "'''clabel用于标记等高线'''", "\nplt.clabel(C,inline=", "1", ",fontsize=", "10", ")\n\nplt.show()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;ol&gt;&lt;li&gt;使用nditer在数组上迭代可以将原始数组的单元格视为0维数组。对于非对象数组&amp;#xff0c;这几乎等同于生成标量&amp;#xff0c;因为0维数组的行为通常类似于标量&amp;#xff0c;但这不适用于对象数组&lt;/li&gt;&lt;li&gt;用flat遍历对象数组只会直接得到对象&lt;/li&gt;&lt;li&gt;nditer是numpy中的一个方法&amp;#xff0c;且默认是只读对象&amp;#xff0c;而flat方法是数组对象的方法。&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy flat函数和nditer函数有啥区别", ["都可以遍历每一个元素，那他们区别在哪", "a=np.arange(5)", "for i in np.nditer(a):", "    print(i)", "print('分割线')", "for i in a.flat:", "    print(i)"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;超时错误&amp;#xff0c;输入数据input_data的维度必须是三维&amp;#xff0c;检查下数据&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["遇到RuntimeError报错该怎么处理？", ["遇到报错：", "line 57, in forward", "    input_data = input_data.permute(2, 1, 0)", "RuntimeError: number of dims don't match in permute", "\n", "报错部分代码：", "\n", "    ", "def", " ", "forward", "(", "self, input_data", "):\n        ", "# input_data:         Point Cloud having shape input_shape.", "\n        ", "# output:            PointNet features (Batch x emb_dims)", "\n        ", "if", " self.input_shape == ", "\"bnc\"", ":\n            num_points = input_data.shape[", "1", "]\n            input_data = input_data.permute(", "0", ", ", "2", ", ", "1", ")          ", "#报错地方", "\n        ", "else", ":\n            num_points = input_data.shape[", "2", "]\n        ", "if", " input_data.shape[", "1", "] != ", "3", ":\n            ", "raise", " RuntimeError(", "\"shape of x must be of [Batch x 3 x NumInPoints]\"", ")\n\n        output = input_data\n        ", "for", " idx, layer ", "in", " ", "enumerate", "(self.layers):\n            output = layer(output)\n\n        ", "return", " output\n\n", "\n", "查看了input_data的维数，得到torch.Size([1, 3]) 确实是三维的", "\n", "读取数据部分代码", "\n", "    ", "if", " args.user_data:\n        source_path = os.path.join(", "r'E:\\bunny\\data\\bun000.ply'", ")  ", "# The source point cloud is a rotated and offset defect", "\n        ", "# source=s3.float()", "\n        source_data = o3d.io.read_point_cloud(source_path)\n        points1 = np.array(source_data.points)\n        idx1 = np.arange(points1.shape[", "0", "])\n        np.random.shuffle(idx1)\n        source = points1[idx1[:args.num_points]]\n\n        template_path = os.path.join(", "r'E:\\bunny\\data\\bun045.ply'", ")  ", "# Template point cloud is complete", "\n        ", "# template=s5.float()", "\n        template_data = o3d.io.read_point_cloud(template_path)\n        points2 = np.array(template_data.points)\n        idx2 = np.arange(points2.shape[", "0", "])\n        np.random.shuffle(idx2)\n        template = points2[idx2[:args.num_points]]\n        testset = UserData(template=template, source=source, tpcc=", "None", ", igt=", "None", ")\n\n", "\n", "source和template都是三维的（如下所示）", " [ 0.0585     0.0808363  0.0858177]", " [ 0.0465     0.0650293  0.0904855]", " [-0.00725    0.126023   0.0352551]", "\n", "if", " __name__ == ", "'__main__'", ":\n    # Test the code.\n    x = torch.rand((10,1024,3))\n\n    pn = PointNet(", "use_bn", "=", "True", ")\n    y = pn(x)\n    ", "print", "(", "\"Network Architecture: \"", ")\n    ", "print", "(pn)\n    ", "print", "(", "\"Input Shape of PointNet: \"", ", x.shape, ", "\"\\nOutput Shape of PointNet: \"", ", y.shape)\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;遗漏对象未予封闭&lt;br /&gt;参考&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/iprobobo/article/details/123215345\" id=\"textarea_1662026944522_1662027249728_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/iprobobo/article/details/123215345&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["这是霍兰德人格分析图的代码，但解析器显示我有错误，请哪位看一下我哪里错了？", ["这是错误类型", "\n", "这是我的代码", "\n", "HollandRadarDraw", "\n", "import numpy as np", "import matplotlib.pyplot as plt", "import matplotlib", "\n", "matplotlib.rcParams['font.family'] = 'SimHei'", "radar_labels = np.array(['研究型(I)', '艺术型(A)', '社会型(S)',", "                         '企业型(E)', '常规型(C)', '现实型(R)'])", "data = np.array([[0.40, 0.32, 0.35, 0.30, 0.30, 0.88],", "                 [0.85, 0.35, 0.30, 0.40, 0.40, 0.30],", "                 [0.43, 0.89, 0.30, 0.28, 0.22, 0.30],", "                 [0.30, 0.25, 0.48, 0.85, 0.45, 0.40],", "                 [0.20, 0.38, 0.87, 0.45, 0.32, 0.28],", "                 [0.34, 0.31, 0.38, 0.40, 0.92, 0.28]])  # 数据值", "data_labels = ('艺术家', '实验员', '工程师', '推销员', '社会工作者', '记事员')", "angles = np.linspace(0, 2 * np.pi, 6, endpoint=False)", "data = np.concatenate((data, [data[0]]))", "angles = np.concatenate((angles, [angles[0]]))", "fig = plt.figure(facecolor=\"white\")", "plt.subplot(111, polar=True)", "plt.plot(angles, data, 'o-', linewidth=1, alpha=0.2)", "plt.fill(angles, data, alpha=0.25)", "plt.thetagrids(angles * 180 / np.pi, radar_labels, frac=1.2)", "plt.figtext(0.52, 0.95, '霍兰德人格分析', ha='center', size=20)", "legend = plt.legend(data_labels, loc=(0.94, 0.80), labelspacing=0.1)", "plt.setp(legend.get_texts(), fontsize='large')", "plt.grid(True)", "plt.savefig('holland_radar.jpg')", "plt.show()"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;cv2.pointPolygonTest(contour, pt, measureDist)就是了啊&amp;#xff0c;这个函数当measureDist设置为false时&amp;#xff0c;返回 -1、0、1三个固定值。若返回值为&amp;#43;1&amp;#xff0c;表示点在多边形内部&amp;#xff0c;返回值为-1&amp;#xff0c;表示在多边形外部&amp;#xff0c;返回值为0&amp;#xff0c;表示在多边形上。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["判断点是否在最大轮廓内的python函数是什么", ["cnts, hierarchy  = cv2.findContours(edged, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)#查找轮廓", "area = []", "for k in range(len(cnts)):", "   area.append(cv2.contourArea(cnts[k]))#轮廓面积数列", "max_id = np.argmax(np.array(area))#最大面积轮廓序号", "cnt = cnts[max_id]#最大轮廓", "x=20", "y=30", "point = np.array([x,y], dtype=\"int\")", "point = np.int0(point)", "        if (pointPolygonTest(cnt, point, false) == -1):#判断point这个点是否在轮廓外部python函数是什么", "            #在图像img上把point这个点置黑怎么写"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;len(data) 和len(index)长度不一致&amp;#xff0c;检查一下长度&amp;#xff0c;大概率是index出错&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Length of values does not match length of index", ["\n", "用上证50做蒙特卡洛模拟分析有效前沿", "\n", "出现了如下错误：", "\n", "---------------------------------------------------------------------------", "\nValueError                                Traceback (most recent ", "call", " last)\nC:\\Users\\ADMINI~", "1", "\\AppData\\", "Local", "\\", "Temp", "/ipykernel_8100/", "1740976838.", "py ", "in", " <module>\n", "----> 1 PORT_WEIGHTS,PORT_RETURNS,PORT_SIGMAS,PORT_SR = montecarlo_portfolios(SH50_CODE_LIST,PORT_NUM,START_DATE,END_DATE,RF)", "\n\nC:\\Users\\ADMINI~", "1", "\\AppData\\", "Local", "\\", "Temp", "/ipykernel_8100/", "2484461405.", "py ", "in", " montecarlo_portfolios(stock_list, number, start_date, end_date, risk_free, trade_days)\n     ", "10", "         weights_i_array = np.random.random(len(stock_list))\n     ", "11", "         weights_i_array /=np.sum(weights_i_array)\n", "---> 12         port_i_year_return,port_i_year_sigma,port_i_year_sr = get_return_risk(weights_i_array,his_prices_df,risk_free)", "\n     ", "13", "         port_weights_list.append(weights_i_array)\n     ", "14", "         port_returns_list.append(port_i_year_return)\n\nC:\\Users\\ADMINI~", "1", "\\AppData\\", "Local", "\\", "Temp", "/ipykernel_8100/", "3548710514.", "py ", "in", " get_return_risk(port_i_weights_array, his_prices_df, risk_free, trade_days)\n      ", "1", " def get_return_risk(port_i_weights_array,his_prices_df,risk_free,trade_days=", "250", "):\n      ", "2", "     his_day_returns = np.log(his_prices_df/his_prices_df.shift(", "-1", "))\n", "----> 3     port_i_year_return = np.sum(his_day_returns.mean()*trade_days*port_i_weights_array)", "\n      ", "4", "     port_i_year_sigma = np.sqrt(np.dot(port_i_weights_array,np.dot(his_day_returns.cov()*trade_days,port_i_weights_array.T)))\n      ", "5", "     port_i_year_sr=(port_i_year_return-risk_free)/port_i_year_sigma\n\nD:\\p\\lib\\site-packages\\pandas\\core\\ops\\common.py ", "in", " new_method(self, other)\n     ", "67", "         other = item_from_zerodim(other)\n     ", "68", " \n", "---> 69         return method(self, other)", "\n     ", "70", " \n     ", "71", "     ", "return", " new_method\n\nD:\\p\\lib\\site-packages\\pandas\\core\\arraylike.py ", "in", " __mul__(self, other)\n    ", "106", "     @unpack_zerodim_and_defer(\"__mul__\")\n    ", "107", "     def __mul__(self, other):\n", "--> 108         return self._arith_method(other, operator.mul)", "\n    ", "109", " \n    ", "110", "     @unpack_zerodim_and_defer(\"__rmul__\")\n\nD:\\p\\lib\\site-packages\\pandas\\core\\series.py ", "in", " _arith_method(self, other, op)\n   ", "5526", "             result = ops.arithmetic_op(lvalues, rvalues, op)\n   ", "5527", " \n-> ", "5528", "         ", "return", " self._construct_result(result, ", "name", "=res_name)\n   ", "5529", " \n   ", "5530", " \n\nD:\\p\\lib\\site-packages\\pandas\\core\\series.py ", "in", " _construct_result(self, result, ", "name", ")\n   ", "2943", "         # We ", "do", " ", "not", " pass dtype ", "to", " ensure that the Series constructor\n   ", "2944", "         #  does inference ", "in", " the ", "case", " ", "where", " `result` has ", "object", "-dtype.\n-> ", "2945", "         ", "out", " = self._constructor(result, ", "index", "=self.", "index", ")\n   ", "2946", "         ", "out", " = ", "out", ".__finalize__(self)\n   ", "2947", " \n\nD:\\p\\lib\\site-packages\\pandas\\core\\series.py ", "in", " __init__(self, data, ", "index", ", dtype, ", "name", ", ", "copy", ", fastpath)\n    ", "428", "                 ", "index", " = ibase.default_index(len(data))\n    ", "429", "             elif is_list_like(data):\n", "--> 430                 com.require_length_match(data, index)", "\n    ", "431", " \n    ", "432", "             # ", "create", "/", "copy", " the manager\n\nD:\\p\\lib\\site-packages\\pandas\\core\\common.py ", "in", " require_length_match(data, ", "index", ")\n    ", "529", "     \"\"\"\n    530     if len(data) != len(index):\n--> 531         raise ValueError(\n    532             \"Length ", "of", " ", "values", " \"\n    533             f\"({len(data)}) \"\n\nValueError: Length of values (50) does not match length of index (1)\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;L大写&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["convert将RGBA转为L会报错", ["conversion from RGB to l not supported", "我想将图片从RGBA转为L，但是会出现上述报错", "具体代码如下：", "\n", "\n```python\nimport pytesseract\nfrom PIL import Image\nimport numpy as np\n\nim = Image.open(", "\"D:\\captcha.png\"", ")\nim = im.convert(", "\"l\"", ")\nthreshold = 50", "\narray ", "= np.array(im)", "\narray ", "= np.where(array > threshold, 255, 0)\nim = Image.fromarray(array.astype(", "\"unit8\"", "))\n\n\n\n", "\n", "```"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;import pandas as pd\n\ndf&amp;#61;pd.DataFrame()\ndf[&amp;#39;输入&amp;#39;]&amp;#61;input_number\ndf[&amp;#39;target&amp;#39;]&amp;#61;output_number\ndf[&amp;#39;输出&amp;#39;]&amp;#61;target_number&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;直接这样就可以吧&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python中pandas的DataFrame，给列赋值出现错误的问题", ["我的题目是从一个txt中读取一些数据，经过某个函数，得到想要的结果：", "\n\n", "三组数据分别存放在了input_number、target_number、output_number三个list中，并且长度均为3", "\n\n", "\n\n", "但是创建dataframe并且赋值后，出现了如下错误：", "\n\n", "\n", "import pandas as pd\n\ncontents=[\"输入\",\"target\",\"输出\"]\n\ndf=pd.DataFrame(columns=contents)\ndf.iloc[:,0]=input_number\ndf.iloc[:,1]=target_number\ndf.iloc[:,2]=output_number", "\n\n", "错误：", "\n\n", "\n", "ValueError                                Traceback (most recent call last)\n<ipython-input-81-e33a778f90ec> in <module>()\n     23 df.iloc[:,0]=input_number\n     24 df.iloc[:,1]=target_number\n---> 25 df.iloc[:,2]=output_number\n\nD:\\Anaconda\\lib\\site-packages\\pandas\\core\\indexing.py in __setitem__(self, key, value)\n    192             key = com._apply_if_callable(key, self.obj)\n    193         indexer = self._get_setitem_indexer(key)\n--> 194         self._setitem_with_indexer(indexer, value)\n    195 \n    196     def _has_valid_type(self, k, axis):\n\nD:\\Anaconda\\lib\\site-packages\\pandas\\core\\indexing.py in _setitem_with_indexer(self, indexer, value)\n    581                     value = np.array(value, dtype=object)\n    582                     if len(labels) != value.shape[1]:\n--> 583                         raise ValueError('Must have equal len keys and value '\n    584                                          'when setting with an ndarray')\n    585 \n\nValueError: Must have equal len keys and value when setting with an ndarray", "\n\n", "然后我尝试了将最后一行代码放在第二位，或者第一位：", "\n\n", "\n", "import pandas as pd\n\ncontents=[\"输入\",\"target\",\"输出\"]\n\ndf=pd.DataFrame(columns=contents)\ndf.iloc[:,2]=output_number\ndf.iloc[:,0]=input_number\ndf.iloc[:,1]=target_number", "\n\n", "\n", "import pandas as pd\n\ncontents=[\"输入\",\"target\",\"输出\"]\n\ndf=pd.DataFrame(columns=contents)\ndf.iloc[:,0]=input_number\ndf.iloc[:,2]=output_number\ndf.iloc[:,1]=target_number", "\n\n", "都是可以执行成功的：", "\n\n", "\n\n", "请问这是什么原因呢？找了一下发现有类似的，都是迭代之类的问题，但是我这个好像不是啊....", "\n\n", "谢谢各位！！"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/hlx371240/article/details/40861667?utm_source=blogxgwz7", "Konwledge_Point": "应对NP完全问题", "Question": ["感知机的实现（二分类）——模拟出来的直线斜率没问题，但是截距有问题", ["问题：模拟出来的函数拟不上数据，恳请大佬告知哪儿出了问题！！！", "\n\n", "损失函数：L（w1,w2,b）=-∑（w1*x1+w2*x2+b）y", "\n                 w1的梯度：-∑y*x1", "\n                                 w2的梯度:    -∑y*x2", "\n                                  b的梯度:    -∑y", "\n                 学习率为 0.01", "\n                                 使用梯度下降法进行优化", "\n\n", "import pandas\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef ganzhiji(data_x1,data_x2,data_y):\n    w_1 = 0   # 参数w1\n    w_2 = 0   # 参数w2   \n    b = 0     # 偏置\n    step = 0.01\n    threshold = 0.1\n    f_pre = -0.2\n    re_num = 0  # 循环次数\n    f_current = loss_function(w_1, w_2, b, data_x1, data_x2, data_y)\n    while abs(f_current - f_pre) > threshold and re_num <= 40000:\n        w_1, w_2, b = update(data_x1, data_x2, data_y, w_1, w_2, b, step)\n        f_pre = f_current\n        f_current = loss_function(w_1, w_2, b, data_x1, data_x2, data_y)\n        re_num = re_num + 1\n\n    # 训练完毕后计算精度\n    num = 0\n    for a in range(len(data_x1)):\n        if (w_1 * data_x1[a] + w_2 * data_x2[a] + b) * data_y[a] < 0:\n            num = num + 1\n    print(\"w1={},w2={},b={},精度为：{}\".format(w_1, w_2, b, 1 - num/len(data_x1)))\n    return w_1,w_2,b\n\ndef loss_function(w_1, w_2, b, data_x1, data_x2, data_y):  # 计算参数更新后损失函数的值\n   sum = 0\n   for a in range(len(data_x1)):\n       if (w_1 * data_x1[a] + w_2 * data_x2[a] + b) * data_y[a] < 0:\n           sum = sum - (w_1 * data_x1[a] + w_2 * data_x2[a] + b) * data_y[a]\n   return sum\n\ndef tidu(data_x1, data_x2, data_y, b):  # 参数的梯度\n    t_w1 = 0\n    t_w2 = 0\n    t_b = 0\n    for a in range(len(data_x1)):\n        t_w1 = t_w1 - data_y[a] * data_x1[a]\n        t_w2 = t_w2 - data_y[a] * data_x2[a]\n        t_b =t_b - data_y[a]\n    return t_w1, t_w2, t_b\n\ndef update(data_x1, data_x2, data_y, w_1, w_2, b, step):  # 将参数进行梯度下降\n    t_w1 , t_w2, t_b = tidu(data_x1, data_x2, data_y, b)\n    w_1 = w_1 - step * t_w1\n    w_2 =w_2 - step * t_w2\n    b = b - step * t_b\n    return w_1, w_2, b\n\nif __name__=='__main__':\n    data = pandas.read_csv(r'C:\\Users\\科德的帝国\\Desktop\\ML_data.csv',engine='python')\n    data_x1 = data['x1']\n    data_x2 = data['x2']\n    data_y = data['y']\n\n    data_x1 = [a /10 for a in data_x1]         # 将数据放缩\n    data_x2 = [a/10 for a in data_x2]\n    data_y = [a for a in data_y]\n    for a in range(len(data_y)):               # 将数据文件中的类别y为0的值改为-1，以符合符号函数的输出 \n       if data_y[a] == 0:\n          data_y[a] = -1\n\n    # 配置\n    plt.rcParams['font.sans-serif']=['SimHei'] # 显示中文\n    plt.rcParams['axes.unicode_minus']=False #用来正常显示负号\n\n    # 画散点图\n    for a in range(len(data_x1)):\n       if data_y[a] == 1:\n            plt.scatter(data_x1[a], data_x2[a],color='red')\n       else:\n            plt.scatter(data_x1[a], data_x2[a],color='blue')\n\n    # 画训练完毕的函数        \n    w_1,w_2,b=ganzhiji(data_x1,data_x2,data_y)\n    x= np.arange(0,10,0.1)\n    y = [-(w_1*i+b)/w_2 for i in x]\n    plt.plot(x,y)\n    plt.show()\n", "\n\n", "执行结果："]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; scipy &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; optimize\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;func&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;x, k, b&lt;/span&gt;):\n  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; k * x &amp;#43; b\n\nk, b &amp;#61; optimize.curve_fit(func, height, weight)[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n\nh &amp;#61; &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;身高&amp;#34;&lt;/span&gt;)\nw &amp;#61; k * h &amp;#43; b \n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;体重为&amp;#34;&lt;/span&gt;, w)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["给定一个身高体重数据集，如何利用python计算数据集通过输入身高预测体重呢", ["import pandas as pd", "import numpy as np", "p=pd.read_excel('D:\\zip\\zip.xlsx',sheet_name='Sheet1')", "m=np.array(p)", "height=m[:,0]", "weight=m[:,1]"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;已解决&lt;br /&gt;for j in range(k):&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            # np.mean(r,g,b,label)&amp;#xff0c;属性和label都求个平均值&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            one_cluster &amp;#61; img_new[img_new[:, 3] &amp;#61;&amp;#61; j] # 找到所有label为j的像素,其中img_new.shape &amp;#61; (269180,4)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            if len(con_cluster) !&amp;#61; 0:&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                cluster_center[j] &amp;#61; np.mean(one_cluster, axis&amp;#61;0) # 通过img_new[:, 3] &amp;#61;&amp;#61; j找到所有label为j的行索引(?, 4)&amp;#xff0c;&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;加上这句if就行了&amp;#xff0c;mean方法不允许传入空数组&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["kmeans 图像切割。 py-opencv，报错", ["\n", "import", " numpy as np\n", "import", " matplotlib.pyplot as plt\n \n", "img", " = plt.imread('G:/Experiment/Machine Learning/boat.jpg')\n", "img_row", " = img.shape[", "0", "]\n", "img_col", " = img.shape[", "1", "]\n \ndef knn(img, iter, k):\n    ", "img", " = img.reshape(-", "1", ",", "3", ") ", "# 使二维空间，变成一维空间，避免后面计算距离时使用双层循环, 这样每一行代表不同空间的像素", "\n    ", "img_new", " = np.column_stack((img, np.ones(img_row*img_col))) ", "# 加一列", "\n \n    ", "# (1) 随机选择k个像素作为初始聚类中心", "\n    ", "cluster_orientation", " = np.random.choice(img_row*img_col, k, ", "replace=False)", " ", "# 产生k索引坐标，即k个中心的位置", "\n    ", "cluster_center", " = img_new[cluster_orientation, :] ", "# shape =（5,4）根据索引坐标，找到对应的聚类中心的rgb像素值", "\n \n    ", "# 迭代", "\n    ", "distance", " = [ [] for i ", "in", " range(k)] ", "# [ [], [], [], [], []]生成list,每个元素是一个列向量，该列向量保存的是所有像素距离中心j的距离", "\n    for i ", "in", " range(iter):\n        ", "# (2) 计算所有像素与聚类中心j的颜色距离", "\n        print(", "\"迭代次数：%d\"", " % i)\n        for j ", "in", " range(k):\n            distance[j] = np.sqrt(np.sum(np.square(img_new - cluster_center[j]), ", "axis=1))", " ", "# data_new.shape = (269180,4)，一行的和", "\n \n        ", "# (3) 在当前像素与k个中心的颜色距离中，找到最小那个中心，更新图像所有像素label", "\n        ", "# np.array(distance).shape = (5, 269180) ，返回一列中最小值对应的索引,范围是 [0, 4], 代表不同的label", "\n        ", "orientation_min_dist", " = np.argmin(np.array(distance), ", "axis=0)", "   ", "# np.array(distance).shape = (5, 269180) 一列中最小值", "\n        img_new[:, ", "3", "] = orientation_min_dist ", "# shape = (269180, ), 将返回的索引列向量赋值给第4维，即保存label的第3列", "\n        ", "# (4) 更新第j个聚类中心", "\n        for j ", "in", " range(k):\n            ", "# np.mean(r,g,b,label)，属性和label都求个平均值", "\n            ", "one_cluster", " = img_new[img_new[:, ", "3", "] == j] ", "# 找到所有label为j的像素,其中img_new.shape = (269180,4)", "\n            cluster_center[j] = np.mean(one_cluster, ", "axis=0)", " ", "# 通过img_new[:, 3] == j找到所有label为j的行索引(?, 4)，", "\n            ", "# 求一列均值，这样mean_r ,mean_g_, mean_b, mean_label,一次循环得到(1,4)", "\n \n    return img_new\n \n", "if", " ", "__name__", " == '__main__':\n    ", "labels_vector", " = knn(img, ", "100", ", ", "5", ")\n    ", "labels_img", " = labels_vector[:,", "3", "].reshape(img_row, img_col)\n    plt.imshow(labels_img)\n    plt.show()\n", "\n", "当我使用2880x1920的图片进行测试时，程序正常执行。", "当我使用1440x960的图片进行测试，程序在第一次迭代就报错，RuntimeWarning: Mean of empty slice.", "\n", "查了一下没找到解决方案，请问这个该怎么解决。"]], "Tag": "算法设计"}
{"Answer": "调用df.plot方法时，如果不指定ax参数，每次都会生成一个新的图，所以你第二次不会线没了，是根本就没有数据换图，建议：\r\n用医用变量保存第一次的画图，然后对图进行设置修改：\r\ntmp=df.plt()\r\ntmp.set_xticklabels(list(range(2007,2019)))", "Konwledge_Point": "应对NP完全问题", "Question": ["ply作图坐标轴刻度问题", ["\n上面这个图标，我用df.plot(),显示的图如下：", "\n我想看到横坐标所有的年份，所以对于命令进行如下修改：", "\ndf1.plot(xticks = np.arange(2007, 2019, 1),xlim = (2007,2019))", "\n这两个参数使用都是看了说明加上去的，但是结果却变成了这样", "\n年份都有了，但是线没了，啥情况，望指点"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你把11行的image打印出来看看&amp;#xff0c;这里有问题&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["TypeError: 'NoneType' object is not subscriptable这个错误如何解决呀", ["\n", "import numpy as np", "import cv2", "from matplotlib import pyplot as plt", "\n", "def conv(image, kernel, mode='same'):", "    if mode == 'fill':  # 选择是否进行边缘填充", "        h = kernel.shape[0] // 2  # 卷积核的列除以2取整", "        w = kernel.shape[1] // 2  # 卷积核的行除以2取整", "        # 在原始图像边缘进行填充，常数填充，填数值0，假设原始图像600", "600，卷积核大小5", "5，则填充后图像大小604*604", "        img = np.pad(image, ((h, h), (w, w), (0, 0)), 'constant')", "\n", "    # 进行卷积运算\nconv_b = ", "_convolve(", "image", "[:, :, 0], ", "kernel", ")", "\nconv_g = ", "_convolve(", "image", "[:, :, 1], ", "kernel", ")", "\nconv_r = ", "_convolve(", "image", "[:, :, 2], ", "kernel", ")", "\nres = np.dstack(", "[", "conv_b", ", ", "conv_g", ", ", "conv_r", "]", ")\nreturn res\n", "\n", "def _convolve(image, kernel):", "    h_kernel, w_kernel = kernel.shape  # 获取卷积核的长宽，也就是行数和列数", "\n", "h_image, w_image = image.", "shape ", " ", "# 获取欲处理图片的长宽", "\n\n", "# 计算卷积核中心点开始运动的点，因为图片边缘不能为空", "\nres_h = h_image - h_kernel + ", "1", "\nres_w = w_image - w_kernel + ", "1", "\n\n", "# 生成一个0矩阵，用于保存处理后的图片", "\nres = np.zeros((res_h, res_w), np.uint8)\n\nfor i in range(res_h):  ", "# 行", "\n    for ", "j ", "in range(res_w):  ", "# 列", "\n        ", "# image处传入的是一个与卷积核一样大小矩阵，这个矩阵取自于欲处理图片的一部分", "\n        ", "# 这个矩阵与卷核进行运算，用i与j来进行卷积核滑动", "\n        res[i, ", "j] ", "= ", "normal(image[i:i ", "+ h_kernel, ", "j:j ", "+ w_kernel], kernel)\n\nreturn res\n", "\n", "def normal(image, kernel):", "    # np.multiply()函数：数组和矩阵对应位置相乘，输出与相乘数组/矩阵的大小一致（点对点相乘）", "\n", "res", " = np.multiply(image, kernel).sum()  # 点对点相乘后进行累加\n", "if", " ", "res", " > ", "255", ":\n    ", "return", " ", "255", "\nelif ", "res", " < ", "0", ":\n    ", "return", " ", "0", "\n", "else", ":\n    ", "return", " ", "res", "\n", "\n", "if ", "name", " == '", "main", "':", "    path = 'qie原图.jpg   '  # 原图像路径", "    image = cv2.imread(path)", "\n", "# kernel1 是一个", "3", "x3的边缘特征提取器，可以提取各个方向上的边缘\n# kernel2 是一个", "5", "x5的浮雕特征提取器。\n\nkernel1 = np.array([\n    [", "1", ", ", "1", ", ", "1", "],\n    [", "1", ", ", "-7.5", ", ", "1", "],\n    [", "1", ", ", "1", ", ", "1", "]\n])\nkernel2 = np.array([[", "-1", ", ", "-1", ", ", "-1", ", ", "-1", ", ", "0", "],\n                    [", "-1", ", ", "-1", ", ", "-1", ", ", "0", ", ", "1", "],\n                    [", "-1", ", ", "-1", ", ", "0", ", ", "1", ", ", "1", "],\n                    [", "-1", ", ", "0", ", ", "1", ", ", "1", ", ", "1", "],\n                    [", "0", ", ", "1", ", ", "1", ", ", "1", ", ", "1", "]])\nres = conv(image, kernel2, ", "'same'", ")\nplt.axis(", "'off'", ")  # 画图不显示坐标轴\nplt.imshow(res)\nplt.savefig(", "'./out/filtered_picdoramon01.jpg'", ", dpi=", "600", ")\nplt.show()\n", "\n", "运行中出现了错误", "谢谢大家"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; cv2\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy as np\ncap &amp;#61; cv2.VideoCapture(&lt;span class=\"hljs-string\"&gt;&amp;#39;./cheliang.MP4&amp;#39;&lt;/span&gt;)\n\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;True&lt;/span&gt;:\n  ret, frame &amp;#61; cap.&lt;span class=\"hljs-keyword\"&gt;read&lt;/span&gt;()\n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ret &amp;#61;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;True&lt;/span&gt;:\n  frame &amp;#61; cv.flip(frame,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n  cv2.imshow(&lt;span class=\"hljs-string\"&gt;&amp;#39;video&amp;#39;&lt;/span&gt;, frame)\n  key &amp;#61; cv2.waitKey(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n  \n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; key &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;27&lt;/span&gt;:\n  &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n\ncap.release()\ncv2.destroyAllWindows()\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何解决opencv打开视频上下颠倒", ["问题遇到的现象和发生背景", "\n", "opencv打开视频是颠倒的", "\n", "问题相关代码，请勿粘贴截图", "\n", "import cv2", "import numpy as np", "cap = cv2.VideoCapture('./cheliang.MP4')", "\n", "while True:", "    ret, frame = cap.read()", "    if ret == True:", "        cv2.imshow('video', frame)", "\n", "key", " = cv2.waitKey(", "1", ")\n", "if", " ", "key", " == ", "27", ":\n    ", "break", "\n", "\n", "cap.release()", "cv2.destroyAllWindows()", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "解决不了问题", "\n", "我想要达到的结果", "\n", "让视频不在颠倒"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个跟keras还是pytorch没有任何关系&amp;#xff0c;这就是个one hot&amp;#xff0c;无非就是把类别标签都转为one hot&amp;#xff0c;和框架没有任何关系&amp;#xff0c;比如你有[0,1,2,3]四个类&amp;#xff0c;那么0会由[1,0,0,0]表示&amp;#xff0c; 1由[0,1,0,0]表示&amp;#xff0c;如果是只有[0,1]两个类&amp;#xff0c;则0由[1,0]表示&amp;#xff0c;1由[0,1]表示&amp;#xff0c;不知道楼主懂了吗&amp;#xff1f;并且由于该方法与框架无关&amp;#xff0c;楼主可以选择这部分就用keras的这个函数&amp;#xff0c;也不会影响什么&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["tensorflow转pytorch实现", ["关于这篇文章：语音分类任务（基于UrbanSound8K数据集）", "地址不让打", "\n", "y_train = np.array(keras.utils.to_categorical(y_train, 10))", "y_test = np.array(keras.utils.to_categorical(y_test, 10))", "这两句代码怎么用pytorch框架实现？", "我看其他文章写出来的不知道对不对？", "labels=[]", "for i in range(len(train)):", "    labels.append(train[\"classID\"].iloc[i])", "y_train = np.array(labels)", "\n", "labels2=[]", "for i in range(len(test)):", "    labels2.append(test[\"classID\"].iloc[i])", "y_test = np.array(labels2)"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You need to use the type &lt;code&gt;attachment&lt;/code&gt; instead of &lt;code&gt;media&lt;/code&gt;. This should work:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  add_action( 'rest_api_init', 'np_register_extra_field' );\n  function np_register_extra_field() {\n      register_rest_field( 'attachment',\n          'extra_media_field',\n          array(\n              'get_callback'    =&amp;gt; 'np_get_extra_field',\n              'update_callback' =&amp;gt; null,\n              'schema'          =&amp;gt; null,\n          )\n      );\n  }\n  function np_get_extra_field( $object, $field_name, $request ) {\n    return 'foobar';\n  }\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何修改wp json api媒体响应", ["\n\n", "I'm trying to add an extra field to the wp json api reponse for the '/media' endpoint.\nFollowing the ", "doc", ", I have it working for '/posts' or '/pages', but I cannot figure out how to add a field for the '/media' endpoint.", "\n\n", "So (for '/posts' or '/pages') this works :", "\n\n", "add_action( 'rest_api_init', 'np_register_extra_field' );\nfunction np_register_extra_field() {\n    register_rest_field( 'post',\n    // register_rest_field( 'page', // this works too\n        'extra_media_field',\n        array(\n          'get_callback'    => 'np_get_extra_field',\n          'update_callback' => null,\n          'schema'          => null,\n        )\n    );\n}\nfunction np_get_extra_field( $object, $field_name, $request ) {\n    return 'foobar';\n}\n", "\n\n", "For media, this does not work, so far I've tried like this :", "\n\n", "  add_action( 'rest_api_init', 'np_register_extra_field' );\n  function np_register_extra_field() {\n      register_rest_field( 'media',\n          'extra_media_field',\n          array(\n              'get_callback'    => 'np_get_extra_field',\n              'update_callback' => null,\n              'schema'          => null,\n          )\n      );\n  }\n  function np_get_extra_field( $object, $field_name, $request ) {\n    return 'foobar';\n  }\n", "\n\n", "I also tried 'hooking' into other filters (is that a correct way to say that ?)", "\n\n", "add_action( 'rest_media_query', 'np_register_extra_field' );\nadd_action( 'rest_pre_insert_media', 'np_register_extra_field' );\nadd_action( 'rest_prepare_attachment', 'np_register_extra_field' );\n", "\n\n", "None of those seems to do the trick.", "\n\n", "the endgoal is to add the field 'srcset' to the media response", "\n\n", "Using ", "\n\n", "wp json api : Version 2.0-beta12", "\n\n", "wordrpess : version 4.4.2", "\n\n", "Any help would be appreciated.", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n使用numpy.array()函数创建三维数组&amp;#xff1a;\nimport numpy as np\na &amp;#61; np.array(&lt;span class=\"hljs-string\"&gt;[[[1, 2, 3], [4, 5, 6]]&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;[[7, 8, 9], [10, 11, 12]]&lt;/span&gt;])\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(a.shape) # (&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(a)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#python#的问题，请各位专家解答！", ["\n{X = np.array(\n    ", "[", "[4,3,0, 2]", ", ", "[5,2,2, 0]", ", ", "[3,4,4.5, 0]", ", ", "[9,6,4.5, 3]", ", ", "[2,7,3, 4.5]", ", ", "[4,2,2, 1]", ",\n     ", "[-7,-3,-3, -1]", ", ", "[5,2,4, 6]", ", ", "[-3,-5,-4, 0]", "]", ")}\n", "\n", "这产生的应该是三维数据了吧？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/837437189936190.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;缩进&amp;#xff1f;&lt;br /&gt;你缩进不对的话就会导致你的str——encode是空的&amp;#xff0c;这也就是报错里面提示你说图片为空不能imshow&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python+opencv实现文件的读取", [" 想实现局域网下不同设备的视频流通信，决定采用socket实现，由于socket无法直接实现图片通讯，采用将编码的字符串写入文件再读取写出拿来模拟socket通信，在解码端代码一直报bug，请求指点", "\n", "\n", "编码段", "\n", "import", " cv2\n", "import", " win32gui \n", "from", " PIL ", "import", " ImageGrab\n", "import", " numpy ", "as", " np\n\nim = cv2.imread(", "'bus.jpg'", ")\nimg_encode = cv2.imencode(", "'.jpg'", ", im，[cv.IMWRITE_JPEG_QUALITY, ", "50", "])[", "1", "]\ndata_encode = np.array(img_encode)\nimage_binary = data_encode.tobytes()  # transform bytes stream\n#send_data = ", "\"send\"", ".encode(", "'utf-8'", ") + (len(image_binary)).to_bytes(", "4", ", byteorder=", "'little'", ") + image_binary\nsend_data=str(image_binary)\n\n", "with", " open(", "'img_encode.txt'", ", ", "'w'", ") ", "as", " f:\n    f.write(send_data)\n    f.flush\n\n", "\n", "解码端", "\n", "import", " cv2\n", "import", " numpy ", "as", " np\n\n\n", "with", " ", "open", "(", "'img_encode.txt'", ", ", "'r'", ") ", "as", " f:\n    str_encode = f.read()\n\nstr_encode = ", "bytes", "(str_encode,encoding=", "'utf-8'", ")\nimage_np = np.frombuffer(str_encode, np.uint8)  ", "# transform image to np.uint8 format", "\nimage = cv2.imdecode(image_np, cv2.IMREAD_COLOR)  ", "# decode image to the type of opencv", "\ncv2.imshow(", "\"img_decode\"", ",image)\ncv2.waitKey(", "0", ")\n\n", "\n", "\n", "报错内容", "\n", "Traceback (most recent ", "call", " ", "last", "):\n  File ", "\"C:\\Users\\pc\\Desktop\\new\\decode.py\"", ", ", "line", " ", "11", ", in ", "<module>", "\n    cv2.imshow(", "\"img_decode\"", ",image)\ncv2.error: OpenCV(", "4.5", ".", "4", ") D:\\", "a", "\\opencv-", "python", "\\opencv-", "python", "\\opencv\\modules\\imgproc\\src\\color.cpp:", "182", ": error: (-", "215", ":Assertion failed) !_src.", "empty", "() in ", "function", " ", "'cv::cvtColor'", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;因为第一个数不是1&amp;#xff0c;只是因为print显示的小数点位数不够约成了1&amp;#xff0c;你用int转类型直接截取的整数部分0。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;((M*I)&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[0,0]&lt;/span&gt;)\n&lt;span class=\"hljs-number\"&gt;0.9999999999999986&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["浮点数转整型的疑惑，单位矩阵", ["问题遇到的现象和发生背景", "\n", "\n", "M", "=", "np.mat(", "\"1 22 44 5;1 0 -3 6;-9 -3 8 1;1 3 4 9\"", ")\n", "I", "=", "np.linalg.inv(M)\n", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "现在的疑惑是转成整型的时候，为什么结果是", "(M*I).astype(int)", "matrix([[0, 0, 0, 0],", "        [0, 1, 0, 0],", "        [0, 0, 0, 0],", "        [0, 0, 0, 0]])", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "正确结果应该是", "array([[1., 0., 0., 0.],", "       [0., 1., 0., 0.],", "       [0., 0., 1., 0.],", "       [0., 0., 0., 1.]])", "这样才对啊，请问大家是哪里出了问题"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;关于该问题&amp;#xff0c;我找了一篇非常好的博客&amp;#xff0c;你可以看看是否有帮助&amp;#xff0c;链接&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/TQCAI666/article/details/105745132\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;初步理解hyperopt源码&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于HyperOpt的分类使用问题", ["我想用Hyperopt进行数据的分类，但是遇见一个错误。", "\n", "from", " hpsklearn import HyperoptEstimator\nimport pandas as pd\n", "# 加载训练数据", "\ntrain = pd.read_csv(", "'train.csv'", ", ", "index_col", "=", "'id'", ")\n", "# 加载验证数据", "\ntest = pd.read_csv(", "'test.csv'", ", ", "index_col", "=", "'id'", ")\n", "x_train", "=train.loc[:,", "\"fixed acidity\"", ":", "\"alcohol\"", "]\n", "y_train", "=train.loc[:,", "\"quality\"", "]\n", "x_test", "=test.loc[:,", "\"fixed acidity\"", ":", "\"alcohol\"", "]\n", "y_test", "=test.loc[:,", "\"quality\"", "]\n\nimport numpy as np\n", "# Load Data", "\n", "# ...", "\n\n", "# Create the estimator object", "\nestim = HyperoptEstimator()\n\n", "# Search the space of classifiers and preprocessing steps and their", "\n", "# respective hyperparameters in sklearn to fit a model to the data", "\n\nestim.fit(x_train,y_train)\n\n", "# Make a prediction using the optimized model", "\nprediction = estim.predict(y_train)\n\n", "# Report the accuracy of the classifier on a given set of data", "\nscore = estim.score(x_test, y_test)\n\n", "# Return instances of the classifier and preprocessing steps", "\nmodel = estim.best_model()\n", "\n", "问题出在(", "\n", "\nestim.fit(x_train,y_train)\n\n```)\n这串代码上\n\n\n显示的错误为\n", "'numpy.random.mtrand.RandomState'", " ", "object", " has ", "no", " ", "attribute", " ", "'integers'", "\n不知道该怎么办，我搜索网上说是numpy版本不对，我尝试下载", "1.14", ".5", "版本numpy失败了，请问还有别的办法避免这个错误吗？数据集用的红酒数据集，或者大佬们有别的写代码方式用HyperOp方法跑出来吗？\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你代码的第11行漏写了df&amp;#xff0c;你直接给df1赋值了一个list&amp;#xff0c;修改后的完整代码如下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;%matplotlib inline\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; seaborn &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; sns\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; warnings\nwarnings.filterwarnings(&lt;span class=\"hljs-string\"&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;)\nplt.rc(&lt;span class=\"hljs-string\"&gt;&amp;#34;font&amp;#34;&lt;/span&gt;,family&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;SimHei&amp;#34;&lt;/span&gt;,size&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;15&amp;#34;&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;#解决中文乱码问题&lt;/span&gt;\nexcelFile&amp;#61;&lt;span class=\"hljs-string\"&gt;r&amp;#39;E:\\计算机大作业\\nmicrobiology图表复现\\COPD_multiomics-main\\COPD_multiomics-main\\6-Figure scripts\\Fig E2 Source Data.xlsx&amp;#39;&lt;/span&gt;\ndf&amp;#61;pd.DataFrame(pd.read_excel(excelFile,sheet_name&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Bacterial load&amp;#39;&lt;/span&gt;))\ndf1&amp;#61;df[[&lt;span class=\"hljs-string\"&gt;&amp;#39;Group_Site&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;log10cpn&amp;#39;&lt;/span&gt;]]\ndf2&amp;#61;df1.loc[df1[&lt;span class=\"hljs-string\"&gt;&amp;#39;Group_Site&amp;#39;&lt;/span&gt;]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Guangzhou_C&amp;#39;&lt;/span&gt;]\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(df2)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#AttributeError#的问题，如何解决？", ["AttributeError: 'list' object has no attribute 'loc'怎么解决", "\n", "%matplotlib inline\n", "import", " pandas ", "as", " pd\n", "import", " numpy ", "as", " np\n", "import", " seaborn ", "as", " sns\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " warnings\nwarnings.filterwarnings(", "'ignore'", ")\nplt.rc(", "\"font\"", ",family=", "\"SimHei\"", ",size=", "\"15\"", ")  ", "#解决中文乱码问题", "\nexcelFile=", "r'E:\\计算机大作业\\nmicrobiology图表复现\\COPD_multiomics-main\\COPD_multiomics-main\\6-Figure scripts\\Fig E2 Source Data.xlsx'", "\ndf=pd.DataFrame(pd.read_excel(excelFile,sheet_name=", "'Bacterial load'", "))\ndf1=[[", "'Group_Site'", ",", "'log10cpn'", "]]\ndf2=df1.loc[df1[", "'Group_Site'", "]==", "'Guangzhou_C'", "]\n", "print", "(df2)\n\n", "\n", "报错：AttributeError                            Traceback (most recent call last)", "Cell In[12], line 12", "     10 df=pd.DataFrame(pd.read_excel(excelFile,sheet_name='Bacterial load'))", "     11 df1=[['Group_Site','log10cpn']]", "   -> 12 df2=df1.loc[df1['Group_Site']=='Guangzhou_C']", "     13 print(df2)", "\n", "AttributeError: 'list' object has no attribute 'loc'"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;numpy的T&amp;#xff0c;表示转置矩阵&amp;#xff0c;最简单的就是列向量变行向量&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["请问这句代码中T是什么意思", ["\nxx = 223.iloc[np.r_[3480:3660, 7140:7320, 10800:10980]].T.corr()", "\n\n", "解释一下iloc函数读np函数连接的行数据做相关性检验，不知道为什么会有个大写字母T"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;值错误:包含一个以上元素的数组的真值是不明确的&amp;#xff0c;要使用a.any()或a.all()&lt;br /&gt;183行改成&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    if ((x1 &amp;#43; x2 &amp;#43; x3 &amp;#43; x4 &amp;#43; x5 &amp;#43; x6 &amp;#43; x7 &amp;#43; x8 &amp;#43; x9 &amp;#43; x10) / 0.6 &amp;#43; (x11 &amp;#43; x12 &amp;#43; x13 &amp;#43; x14 &amp;#43; x15 &amp;#43; x16 &amp;#43; x17 &amp;#43; x18 &amp;#43; x19 &amp;#43; x20) / 0.66 &amp;#43; (x21 &amp;#43; x22 &amp;#43; x23 &amp;#43; x24 &amp;#43; x25 &amp;#43; x26 &amp;#43; x27 &amp;#43; x28 &amp;#43; x29 &amp;#43; x30) / 0.72 &amp;lt;&amp;#61; 56400).all():&lt;/span&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python遗传算法", ["\n", "import", " numpy as np\n\n", "DNA_size", " = ", "24", "\n", "pops", " = ", "100", "\n", "jiaohuan", " = ", "0", ".", "7", "\n", "bianyi", " = ", "0", ".", "03", "\n", "gen", " = ", "100", "\n", "# x_bound=[-3,3]", "\n", "# y_bound=[-3,3]", "\n", "x1_bound", " =", " [0, 3147]", "\n", "x2_bound", " =", " [0, 30977]", "\n", "x3_bound", " =", " [0, 1724]", "\n", "x4_bound", " =", " [0, 966]", "\n", "x5_bound", " =", " [0, 971]", "\n", "x6_bound", " =", " [0, 7661]", "\n", "x7_bound", " =", " [0, 9385]", "\n", "x8_bound", " =", " [0, 2521]", "\n", "x9_bound", " =", " [0, 699]", "\n", "x10_bound", " =", " [0, 36972]", "\n", "x11_bound", " =", " [0, 7885]", "\n", "x12_bound", " =", " [0, 10207]", "\n", "x13_bound", " =", " [0, 1181]", "\n", "x14_bound", " =", " [0, 9768]", "\n", "x15_bound", " =", " [0, 8181]", "\n", "x16_bound", " =", " [0, 1014]", "\n", "x17_bound", " =", " [0, 21293]", "\n", "x18_bound", " =", " [0, 2081]", "\n", "x19_bound", " =", " [0, 2816]", "\n", "x20_bound", " =", " [0, 21267]", "\n", "x21_bound", " =", " [0, 1788]", "\n", "x22_bound", " =", " [0, 736]", "\n", "x23_bound", " =", " [0, 922]", "\n", "x24_bound", " =", " [0, 595]", "\n", "x25_bound", " =", " [0, 15114]", "\n", "x26_bound", " =", " [0, 23695]", "\n", "x27_bound", " =", " [0, 5398]", "\n", "x28_bound", " =", " [0, 342]", "\n", "x29_bound", " =", " [0, 2005]", "\n", "x30_bound", " =", " [0, 381]", "\n\n\n", "def", " fun(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24,\n        ", "x25", ", x26, x27, x28, x29, x30):\n    ", "return", " ", "1", ".", "2", " * (x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10) + ", "1", ".", "1", " * (\n            ", "x11", " + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 + x20) + (\n                   ", "x21", " + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30)\n\n\n", "def", " get_fitness(pop):\n    ", "x1", ", x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30 = trans(\n        ", "pop", ")\n    ", "pred", " = fun(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23,\n               ", "x24", ", x25, x26, x27, x28, x29, x30)\n    ", "return", " pred\n\n\n", "def", " trans(pop):\n    ", "x1_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x2_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x3_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x4_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x5_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x6_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x7_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x8_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x9_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x10_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x11_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x12_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x13_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x14_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x15_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x16_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x17_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x18_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x19_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x20_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x21_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x22_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x23_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x24_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x25_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x26_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x27_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x28_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x29_pop", " = pop[:, ", "0", ":DNA_size]\n    ", "x30_pop", " = pop[:, ", "0", ":DNA_size]\n\n    ", "x1", " = x1_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x1_bound[", "1", "] - x1_bound[", "0", "]) + x1_bound[\n        ", "0", "]\n    ", "x2", " = x2_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x2_bound[", "1", "] - x2_bound[", "0", "]) + x2_bound[\n        ", "0", "]\n    ", "x3", " = x3_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x3_bound[", "1", "] - x3_bound[", "0", "]) + x3_bound[\n        ", "0", "]\n    ", "x4", " = x4_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x4_bound[", "1", "] - x4_bound[", "0", "]) + x4_bound[\n        ", "0", "]\n    ", "x5", " = x5_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x5_bound[", "1", "] - x5_bound[", "0", "]) + x5_bound[\n        ", "0", "]\n    ", "x6", " = x6_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x6_bound[", "1", "] - x6_bound[", "0", "]) + x6_bound[\n        ", "0", "]\n    ", "x7", " = x7_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x7_bound[", "1", "] - x7_bound[", "0", "]) + x7_bound[\n        ", "0", "]\n    ", "x8", " = x8_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x8_bound[", "1", "] - x8_bound[", "0", "]) + x8_bound[\n        ", "0", "]\n    ", "x9", " = x9_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x9_bound[", "1", "] - x9_bound[", "0", "]) + x9_bound[\n        ", "0", "]\n    ", "x10", " = x10_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x10_bound[", "1", "] - x10_bound[", "0", "]) + \\\n          ", "x10_bound", "[", "0", "]\n    ", "x11", " = x11_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x11_bound[", "1", "] - x11_bound[", "0", "]) + \\\n          ", "x11_bound", "[", "0", "]\n    ", "x12", " = x12_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x12_bound[", "1", "] - x12_bound[", "0", "]) + \\\n          ", "x12_bound", "[", "0", "]\n    ", "x13", " = x13_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x13_bound[", "1", "] - x13_bound[", "0", "]) + \\\n          ", "x13_bound", "[", "0", "]\n    ", "x14", " = x14_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x14_bound[", "1", "] - x14_bound[", "0", "]) + \\\n          ", "x14_bound", "[", "0", "]\n    ", "x15", " = x15_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x15_bound[", "1", "] - x15_bound[", "0", "]) + \\\n          ", "x15_bound", "[", "0", "]\n    ", "x16", " = x16_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x16_bound[", "1", "] - x16_bound[", "0", "]) + \\\n          ", "x16_bound", "[", "0", "]\n    ", "x17", " = x17_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x17_bound[", "1", "] - x17_bound[", "0", "]) + \\\n          ", "x17_bound", "[", "0", "]\n    ", "x18", " = x18_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x18_bound[", "1", "] - x18_bound[", "0", "]) + \\\n          ", "x18_bound", "[", "0", "]\n    ", "x19", " = x19_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x19_bound[", "1", "] - x19_bound[", "0", "]) + \\\n          ", "x19_bound", "[", "0", "]\n    ", "x20", " = x20_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x20_bound[", "1", "] - x20_bound[", "0", "]) + \\\n          ", "x20_bound", "[", "0", "]\n    ", "x21", " = x21_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x21_bound[", "1", "] - x21_bound[", "0", "]) + \\\n          ", "x21_bound", "[", "0", "]\n    ", "x22", " = x22_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x22_bound[", "1", "] - x22_bound[", "0", "]) + \\\n          ", "x22_bound", "[", "0", "]\n    ", "x23", " = x23_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x23_bound[", "1", "] - x23_bound[", "0", "]) + \\\n          ", "x23_bound", "[", "0", "]\n    ", "x24", " = x24_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x24_bound[", "1", "] - x24_bound[", "0", "]) + \\\n          ", "x24_bound", "[", "0", "]\n    ", "x25", " = x25_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x25_bound[", "1", "] - x25_bound[", "0", "]) + \\\n          ", "x25_bound", "[", "0", "]\n    ", "x26", " = x26_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x26_bound[", "1", "] - x26_bound[", "0", "]) + \\\n          ", "x26_bound", "[", "0", "]\n    ", "x27", " = x27_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x27_bound[", "1", "] - x27_bound[", "0", "]) + \\\n          ", "x27_bound", "[", "0", "]\n    ", "x28", " = x28_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x28_bound[", "1", "] - x28_bound[", "0", "]) + \\\n          ", "x28_bound", "[", "0", "]\n    ", "x29", " = x29_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x29_bound[", "1", "] - x29_bound[", "0", "]) + \\\n          ", "x29_bound", "[", "0", "]\n    ", "x30", " = x30_pop.dot(", "2", " ** np.arange(DNA_size)[::-", "1", "]) / float(", "2", " ** DNA_size - ", "1", ") * (x30_bound[", "1", "] - x30_bound[", "0", "]) + \\\n          ", "x30_bound", "[", "0", "]\n\n    ", "return", " x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30\n\n\n", "def", " crossover(pop):\n    ", "new_pop", " =", " []", "\n    ", "pred", " = get_fitness(pop)\n    ", "index", " = np.argmax(pred)\n    ", "index2", " = np.argmin(pred)\n    ", "for", " father in pop:\n        ", "if", " (father == pop[index2]).", "all", "() == True:\n            ", "child", " = pop[index]\n        ", "else", ":\n            ", "child", " = father\n        ", "if", " np.random.rand() < jiaohuan:\n            ", "mother", " = pop[np.random.randint(pops)]\n            ", "cross_point", " = np.random.randint(low=", "0", ", high=DNA_size * ", "2", ")\n            ", "child", "[cross_point:] = mother[cross_point:]\n        ", "child", " = mutation(child)\n        ", "new_pop", ".append(child)\n    ", "return", " new_pop\n\n\n", "def", " mutation(child):\n    ", "if", " np.random.rand() < bianyi:\n        ", "mutate_point", " = np.random.randint(", "0", ", DNA_size)\n        ", "child", "[mutate_point] = child[mutate_point] ^ ", "1", "\n    ", "return", " child\n\n\n", "def", " select(pop, fitness):\n    ", "x1", ", x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30 = trans(\n        ", "pop", ")\n    ", "if", " (x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10) / ", "0", ".", "6", " + (\n            ", "x11", " + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 + x20) / ", "0", ".", "66", " + (\n            ", "x21", " + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30) / ", "0", ".", "72", " <= ", "56400", ":\n        ", "if", " (x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10) <= ", "4642", ":\n            ", "if", " (x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 + x20) <= ", "23833", ":\n                ", "if", " (x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30) <= ", "8155", ":\n                    ", "idx", " = np.random.choice(np.arange(pops), size=pops, replace=True,\n                                           ", "p", "=(fitness) / (fitness.sum()))\n                    ", "return", " pop[idx]\n\n\n", "def", " print_info(pop):\n    ", "fitness", " = get_fitness(pop)\n    ", "max_index", " = np.argmax(fitness)\n    ", "print", "(", "\"最优解：\"", ", fitness[max_index])\n    ", "x1", ", x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30 = trans(\n        ", "pop", ")\n    ", "print", "(", "\"最优基因型：\"", ", pop[max_index])\n    ", "print", "(", "\"最优解的x,y :\"", ", x1[max_index], x2[max_index], x3[max_index], x4[max_index], x5[max_index], x6[max_index],\n          ", "x7", "[max_index], x8[max_index], x9[max_index], x10[max_index], x11[max_index], x12[max_index], x13[max_index],\n          ", "x14", "[max_index], x15[max_index], x16[max_index], x17[max_index], x18[max_index], x19[max_index],\n          ", "x20", "[max_index], x21[max_index], x22[max_index], x23[max_index], x24[max_index], x25[max_index],\n          ", "x26", "[max_index], x27[max_index], x28[max_index], x29[max_index], x30[max_index])\n\n\n", "if", " __name__ == ", "\"__main__\"", ":\n    ", "pop", " = np.random.randint(", "2", ", size=(pops, DNA_size * ", "2", "))\n    ", "fitness", " = get_fitness(pop)\n    ", "for", " i in range(gen):\n        ", "pop", " = np.array(crossover(pop))\n        ", "fitness", " = get_fitness(pop)\n        ", "pop", " = select(pop, fitness)\n    ", "print_info", "(pop)\n\n", "\n", "我想加入约束条件，是应该加到select函数里吗", "\n", "\n", "为什么会报这样的错啊", "\n"]], "Tag": "算法设计"}
{"Answer": "采用np.isnan()方法\r\n\r\n```\r\nIn [3]: import pandas as pd  \r\n\r\nIn [4]: import numpy as np   \r\n\r\nIn [5]: a_df = pd.DataFrame([[1, 3, np.nan], [3, 4, 5]]) \r\n\r\nIn [6]: a_df  \r\nOut[6]: \r\n   0  1    2\r\n0  1  3  NaN\r\n1  3  4  5.0\r\n\r\nIn [7]: a_df.iloc[0, 2]  \r\nOut[7]: nan\r\n\r\nIn [8]: np.isnan(a_df.iloc[0,2])   \r\nOut[8]: True\r\n\r\nIn [9]: a_df.iloc[0, 1]\r\nOut[9]: 3\r\n\r\nIn [10]: np.isnan(a_df.iloc[0,1])\r\nOut[10]: False\r\n\r\n```", "Konwledge_Point": "应对NP完全问题", "Question": ["数据显示是NaN，却不能通过判断是否是nan来选中", ["数据在数据框中显示为NaN，输出结果也是nan，却无法根据is np.nan选中。", "\n\n", "input:data.iloc[1,:].mission_complete\noutput: nan\ninput: data.iloc[1,:].mission_complete == np.nan\noutput: False\ninput: data.iloc[1,:].mission_complete is np.nan\noutput:False\ninput: data.iloc[1,:].mission_complete == 'nan'\noutput: False\n", "\n\n", "\n我想要做的是，能够根据根据是否是NaN值来筛选：", "\n\n", "data['if_mission_complete'] = data.apply(lambda x: 0 if x['mission_complete'] is np.nan or x['mission_complete'] >= 0.9 else 1, axis=1)\n", "\n\n", "但是因为选中nan的值为False导致输出结果不正确。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;把你的第7行代码&amp;#xff0c;data.files删除&lt;/p&gt;\n&lt;p&gt;望采纳&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python这是哪里的错误啊？", ["\n", "\n", "#建立模型", "\n", "import", " numpy ", "as", " np\n", "import", " tensorflow ", "as", " tf\n", "#读取数据", "\ndata = np.load(", "'mnist.npz'", ")\ndata.files\ntrain_images, train_labels, test_images, test_labels = data[", "'x_train'", "], data[", "'y_train'", "], data[", "'x_test'", "],\ndata[", "'y_test'", "]\n", "print", "(train_images.shape)\n", "print", "(train_labels.shape)\n", "print", "(test_images.shape)\n", "print", "(test_labels.shape)\n", "#交叉熵", "\ntarget_y = np.array([", "1", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", "])\npredicted_y1 = np.array([", "0.4", ", ", "0.5", ", ", "0.1", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", "])\npredicted_y2 = np.array([", "0.1", ", ", "0.2", ", ", "0.7", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", ", ", "0", "])\n-np.", "sum", "( target_y * np.log(predicted_y1+", "0.0000001", "))\n-np.", "sum", "( target_y * np.log(predicted_y2+", "0.0000001", "))\n", "#搭建网络结构", "\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten(input_shape=(", "28", ",", "28", ")))\nmodel.add(tf.keras.layers.Dense(", "128", ", activation = ", "'relu'", "))\nmodel.add(tf.keras.layers.Dense(", "10", ", activation = ", "'softmax'", "))\n", "#编译模型", "\nmodel.", "compile", "(optimizer = ", "'adam'", ", loss = ", "'sparse_categorical_crossentropy'", ", metrics = [", "'accuracy'", "])\n", "#训练", "\nmodel.fit(train_images, train_labels, verbose = ", "1", ", epochs = ", "20", ", validation_data = (test_images,\ntest_labels))\n", "#模型保存", "\nmodel.save(", "'model_mnist.h5'", ")\n", "#用模型进行预测", "\n", "import", " tensorflow ", "as", " tf\n", "import", " matplotlib.pyplot ", "as", " plt\nmodel = tf.keras.models.load_model(", "'model_mnist.h5'", ")\nmodel.summary()\n", "for", " i ", "in", " ", "range", "(", "30", "):\n    image = plt.imread(", "'testimages/'", " + ", "str", "(i) + ", "'.jpg'", ")\n    image_new = image.reshape([", "1", ", ", "28", ", ", "28", "])\n    result = model.predict(image_new)[", "0", "].argmax()\n    ", "print", "(", "'The'", ", i + ", "1", ", ", "'th picture shows:'", ", result)\n\n"]], "Tag": "算法设计"}
{"Answer": "试试看 pip install keras==1.2.2\r\n或者\r\npip install --upgrade --user keras\r\n\r\nkeras分为1和2两个版本np_utils和你的不兼容", "Konwledge_Point": "应对NP完全问题", "Question": ["python2.7安装keras时报错，什么原因呢？", ["安装Keras时出错，np__utils是什么模块？", "\n\n", " Traceback (most recent call last):\n  File \"<pyshell#28>\", line 1, in <module>\n    import keras\n  File \"C:\\Python27\\lib\\site-packages\\keras\\__init__.py\", line 3, in <module>\n    from . import utils\n  File \"C:\\Python27\\lib\\site-packages\\keras\\utils\\__init__.py\", line 2, in <module>\n    from . import np_utils\nImportError: cannot import name np_utils\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;iloc方法是使用位置进行索引&amp;#xff0c;参数为位置。pandas自带的索引&amp;#xff0c;也是可以的。只是&amp;#xff0c;以该例为例&amp;#xff0c;写为&amp;#xff0c;z[a][b]形式&amp;#xff0c;其中对DataFrame使用单个索引z[a]&amp;#xff0c;a必须是列名&amp;#xff0c;不能是索引值。z[a]得到一个Series。然后再对这个Series进行索引&amp;#xff0c;该索引的方式默认优先标签索引&amp;#xff0c;如果标签不存在&amp;#xff0c;则尝试位置索引。相比使用loc和iloc这样稍有麻烦。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pandas中iloc函数的使用", ["\nimport numpy as np\nimport matplotlib", ".pyplot", " as plt\nimport pandas as pd\n\nx = np", ".linspace", "(", "0", ", ", "50", "*", "873", ", ", "874", ")\ny = np", ".linspace", "(", "0", ", ", "50", "*", "1164", ", ", "1165", ")\nz = np", ".zeros", "((", "1165", ", ", "874", ")) \n", "a", " = pd", ".read_excel", "(", "'程序及数据\\\\程序及数据\\\\02第2章  数据处理与可视化\\\\附件1：区域高程数据.xlsx'", ", sheet_name=", "'Sheet1'", ", header=None)\n", "b", " = ", "a", ".drop", "(", "[874, 875]", ", axis=", "0", ")\n", "print", "(b[", "1", "][", "1", "])", "\n", "for", " ", "i", " ", "in", " range(", "0", ", ", "874", "):\n    ", "for", " j ", "in", " range(", "0", ", ", "1165", "):\n        z", "[j, i]", " = int(", "b", ".iloc", "[i, j]", ")\n\nax = plt", ".axes", "(projection=", "'3d'", ")\nX, Y = np", ".meshgrid", "(x, y)\nax", ".plot_surface", "(X, Y, z, cmap=", "'viridis'", ")\nplt", ".show", "()\n\n", "\n", "请问", "\n", "\nz", "[j, i]", " = int(", "b", ".iloc", "[i, j]", ")\n", "\n", "将b中的值赋给z矩阵为什么必须使用iloc（）函数 而不能用pandas自带的索引"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;分类&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;km &amp;#61; &lt;span class=\"hljs-constructor\"&gt;KMeans(&lt;span class=\"hljs-params\"&gt;n_clusters&lt;/span&gt;&amp;#61;4)&lt;/span&gt;\nkm.fit&lt;span class=\"hljs-constructor\"&gt;_predict(&lt;span class=\"hljs-params\"&gt;data&lt;/span&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;分完类之后得到了聚类中心&amp;#xff0c;也就是km.cluster_centers_&amp;#xff0c;你可以print出来&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;[[&lt;span class=\"hljs-number\"&gt;1525&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;81533333&lt;/span&gt;  &lt;span class=\"hljs-number\"&gt;478.672&lt;/span&gt;       &lt;span class=\"hljs-number\"&gt;322&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;88266667&lt;/span&gt;  &lt;span class=\"hljs-number\"&gt;232&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;         &lt;span class=\"hljs-number\"&gt;236.41866667&lt;/span&gt;\n   &lt;span class=\"hljs-number\"&gt;457&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;53133333&lt;/span&gt;  &lt;span class=\"hljs-number\"&gt;344&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;81866667&lt;/span&gt;  &lt;span class=\"hljs-number\"&gt;190.21933333&lt;/span&gt;]\n [&lt;span class=\"hljs-number\"&gt;2549.658&lt;/span&gt;       &lt;span class=\"hljs-number\"&gt;582.118&lt;/span&gt;       &lt;span class=\"hljs-number\"&gt;488.366&lt;/span&gt;       &lt;span class=\"hljs-number\"&gt;268.998&lt;/span&gt;       &lt;span class=\"hljs-number\"&gt;397.442&lt;/span&gt;\n   &lt;span class=\"hljs-number\"&gt;618&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;92&lt;/span&gt;        &lt;span class=\"hljs-number\"&gt;477.946&lt;/span&gt;       &lt;span class=\"hljs-number\"&gt;295.172&lt;/span&gt;     ]\n [&lt;span class=\"hljs-number\"&gt;2004.785&lt;/span&gt;       &lt;span class=\"hljs-number\"&gt;429&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;48&lt;/span&gt;        &lt;span class=\"hljs-number\"&gt;347.8925&lt;/span&gt;      &lt;span class=\"hljs-number\"&gt;190.955&lt;/span&gt;       &lt;span class=\"hljs-number\"&gt;287.66625&lt;/span&gt;\n   &lt;span class=\"hljs-number\"&gt;581.16125&lt;/span&gt;     &lt;span class=\"hljs-number\"&gt;437.2375&lt;/span&gt;      &lt;span class=\"hljs-number\"&gt;233.09625&lt;/span&gt;   ]\n [&lt;span class=\"hljs-number\"&gt;3242&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;22333333&lt;/span&gt;  &lt;span class=\"hljs-number\"&gt;544&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;92&lt;/span&gt;        &lt;span class=\"hljs-number\"&gt;735&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;78&lt;/span&gt;        &lt;span class=\"hljs-number\"&gt;405&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;51333333&lt;/span&gt;  &lt;span class=\"hljs-number\"&gt;602&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;\n  &lt;span class=\"hljs-number\"&gt;1016&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;62&lt;/span&gt;        &lt;span class=\"hljs-number\"&gt;760&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;52333333&lt;/span&gt;  &lt;span class=\"hljs-number\"&gt;446&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;82666667&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;至于之后的np.sum是对聚类中心的8个值进行了求和&amp;#xff0c;axis是用来指定行还是列的&amp;#xff0c;求和的结果是expenses&amp;#61;[3788.758      5678.62       4512.27375    7754.65666667]&lt;br /&gt;聚类还是按照八个特征来聚类的&amp;#xff0c;分为四类&amp;#xff0c;只不过最后对四个聚类的聚类中心的值消费水平进行求和&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Kmeans聚类算法应用问题，八维数据的分类", ["这是我看到别人写的根据消费水平划分城市的代码，我理解K-means的作用应该是根据数据八个维度的表现，去划分出4个比较相似的类，但是这个作者在代码中指定了np.sum(),是按照总分高低去进行划分了吗？而且用np.sum()和np.average()的分类结果并不一样，如果np.average()是按平均分高低去划分，那python里的k-means应用解决不就只是计算量问题了吗？如何实现自动迭代聚类呢？", "\n", "原始数据：", "北京,2959.19,730.79,749.41,513.34,467.87,1141.82,478.42,457.64", "天津,2459.77,495.47,697.33,302.87,284.19,735.97,570.84,305.08", "河北,1495.63,515.90,362.37,285.32,272.95,540.58,364.91,188.63", "山西,1406.33,477.77,290.15,208.57,201.50,414.72,281.84,212.10", "内蒙古,1303.97,524.29,254.83,192.17,249.81,463.09,287.87,192.96", "辽宁,1730.84,553.90,246.91,279.81,239.18,445.20,330.24,163.86", "吉林,1561.86,492.42,200.49,218.36,220.69,459.62,360.48,147.76", "黑龙江,1410.11,510.71,211.88,277.11,224.65,376.82,317.61,152.85", "上海,3712.31,550.74,893.37,346.93,527.00,1034.98,720.33,462.03", "江苏,2207.58,449.37,572.40,211.92,302.09,585.23,429.77,252.54", "浙江,2629.16,557.32,689.73,435.69,514.66,795.87,575.76,323.36", "安徽,1844.78,430.29,271.28,126.33,250.56,513.18,314.00,151.39", "福建,2709.46,428.11,334.12,160.77,405.14,461.67,535.13,232.29", "江西,1563.78,303.65,233.81,107.90,209.70,393.99,509.39,160.12", "山东,1675.75,613.32,550.71,219.79,272.59,599.43,371.62,211.84", "河南,1427.65,431.79,288.55,208.14,217.00,337.76,421.31,165.32", "湖南,1942.23,512.27,401.39,206.06,321.29,697.22,492.60,226.45", "湖北,1783.43,511.88,282.84,201.01,237.60,617.74,523.52,182.52", "广东,3055.17,353.23,564.56,356.27,811.88,873.06,1082.82,420.81", "广西,2033.87,300.82,338.65,157.78,329.06,621.74,587.02,218.27", "海南,2057.86,186.44,202.72,171.79,329.65,477.17,312.93,279.19", "重庆,2303.29,589.99,516.21,236.55,403.92,730.05,438.41,225.80", "四川,1974.28,507.76,344.79,203.21,240.24,575.10,430.36,223.46", "贵州,1673.82,437.75,461.61,153.32,254.66,445.59,346.11,191.48", "云南,2194.25,537.01,369.07,249.54,290.84,561.91,407.70,330.95", "西藏,2646.61,839.70,204.44,209.11,379.30,371.04,269.59,389.33", "陕西,1472.95,390.89,447.95,259.51,230.61,490.90,469.10,191.34", "甘肃,1525.57,472.98,328.90,219.86,206.65,449.69,249.66,228.19", "青海,1654.69,437.77,258.78,303.00,244.93,479.53,288.56,236.51", "宁夏,1375.46,480.89,273.84,317.32,251.08,424.75,228.73,195.93", "新疆,1608.82,536.05,432.46,235.82,250.28,541.30,344.85,214.40", "\n", "版权声明：本文为CSDN博主「L_imbo」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。", "原文链接：", "\n      \n        ", "机器学习——K-Means聚类算法及其应用_L_imbo的博客-CSDN博客", "\n        \n      ", "概括首先说一下聚类，多用于机器学习中的无监督学习，通俗来说是将具有相似性的数据分为多类（在相似的基础上收集数据来分类）。由聚类所生成的簇是一组数据对象的集合，这些对象与同一个簇中的对象彼此相似，与其他簇中的对象相异。这里采用传统的聚类划分方法：k-means算法。k-means算法以k为参数，把n个对象分成k个簇，使簇内具有较高的相似度，而簇间的相似度较低。算法步骤1.随机选取k个点作为初始聚类中心。2.对于剩下的点，根据其余聚类中心的距离，将其归入最近的簇。3.对每个簇，计算所有点的均值作为", "\n      ", "\n      ", "\n        ", "\n          ", "https://blog.csdn.net/qq_43662165/article/details/108057598", "\n        ", "\n      ", "\n", "\n", "# 31省市居民家庭消费调查", "\n", "# 1.建立工程，导入sklearn相关包", "\n", "import", " numpy ", "as", " np\n", "from", " sklearn.cluster ", "import", " KMeans\n\n", "# 2.加载数据data，创建K-Means算法实例，并进行训练，获得标签label：", "\n", "# a.利用loadData方法读取数据", "\n", "# b.创建实例", "\n", "# c.调用Kmeans（）和fit_predict()方法进行计算", "\n\n", "if", " __name__ == ", "'__main__'", ":\n\n    ", "def", " ", "loadData", "(", "filePath", "):\n        fr = ", "open", "(filePath, ", "'r+'", ")  ", "# r+读写打开一个文本文件", "\n        lines = fr.readlines()     ", "# readlines（）一次读取整个文件", "\n        retData = []\n        retCityName = []\n        ", "for", " line ", "in", " lines:\n            items = line.strip().split(", "\",\"", ")\n            retCityName.append(items[", "0", "])\n            retData.append([", "float", "(items[i]) ", "for", " i ", "in", " ", "range", "(", "1", ", ", "len", "(items))])\n        ", "return", " retData, retCityName\n\n    data, cityName = loadData(", "'city.txt'", ")\n    km = KMeans(n_clusters=", "4", ")  ", "# n_clusters用于指定聚类中心的个数，init初始聚类中心的初始化方法，max_iter最大的迭代次数，init默认是k-means++ max_iter默认300", "\n    label = km.fit_predict(data)  ", "# 计算簇中心以及为簇分配序号", "\n    expenses = np.", "sum", "(km.cluster_centers_, axis=", "1", ")  ", "# 平均消费水平", "\n    ", "# print(expenses)", "\n    CityCluster = [[], [], [], []] ", "# 将城市按label分成设定的簇", "\n    ", "for", " i ", "in", " ", "range", "(", "len", "(cityName)): ", "# 将每个簇的城市输出", "\n        CityCluster[label[i]].append(cityName[i]) \n    ", "for", " i ", "in", " ", "range", "(", "len", "(CityCluster)): ", "# 将每个簇的平均花费输出", "\n        ", "print", "(", "\"Expenses:%.2f\"", " % expenses[i])\n        ", "print", "(CityCluster[i])\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我现在写给你&amp;#xff0c;望采纳&amp;#xff01;&amp;#xff01;点击该回答右侧的“采纳”按钮即可采纳&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["使用蒙特卡洛方法对几何分布进行序贯概率比检验 (SPRT)", ["问题遇到的现象和发生背景", "\n", "在 2 个简单假设的情况下，用计算机实施序贯概率比检验 (SPRT)。", "\n", "使用蒙特卡洛方法估计其错误类型 I 和 II 的概率，以及条件预期样本大小（运行测试 10 000 次，$H_0$ 为真，", "计算有利于 $H_1$ 的 FALSE 决策的数量，除以 10 000 -> 你得到 $\\alpha$ 的估计值；启动一个计数器，", "将你停止测试的观察次数添加到一个计数器，每次运行时 $H_0$ 为真，然后除以 10 000 ->", "你将得到 $ 的估计值t_0$；$\\beta$ 和 $t_1$ 的估计是相似的）。", "\n", "实现：几何分布，$\\theta$ 是它唯一的参数。", "\n", "分析错误概率和假设接近度的预期样本大小的依赖关系。将 $\\alpha$ 和 $\\beta$ 用于您选择的阈值计算。", "\n", "我的解答思路和尝试过的方法，不写自己思路的，回答率下降 60%", "\n", "我找到的方法代码如下，但是仅仅只是实现几何分布的蒙特卡洛方法，不知道该怎样实现使用蒙特卡洛方法对几何分布进行序贯概率比检验 (SPRT)。", "\n", "import", " numpy as np\n", "import", " matplotlib.pyplot as plt\n\n", "np", ".random.seed(", "222", ")\n\n", "# 把计算得到的函数写成一个函数", "\n", "def", " distribution_z(z, p, max_k=", "200", "):\n    ", "import", " math\n    ", "j", " = int(math.floor(z))\n    ", "A", " = ", "0", "\n    ", "for", " m in range(", "1", ", j + ", "1", "):\n        ", "A", " += (", "1", " - p) ** (m - ", "1", ")\n    ", "A", " *= p\n\n    ", "B", " = ", "0", "\n    ", "for", " k in range(j + ", "1", ", max_k + ", "1", "):\n        ", "a", " = (", "1", " - p) ** (k - ", "1", ")\n        ", "a", " /= k\n        ", "B", " += a\n    ", "B", " *= z * p\n\n    ", "return", " A + B\n\n\n", "def", " pdf_z(z, p, max_k=", "200", "):\n    ", "import", " math\n    ", "j", " = int(math.floor(z))\n    ", "B", " = ", "0", "\n    ", "for", " k in range(j + ", "1", ", max_k + ", "1", "):\n        ", "a", " = (", "1", " - p) ** (k - ", "1", ")\n        ", "a", " /= k\n        ", "B", " += a\n    ", "return", " B * p\n\n\n", "p", " = ", "0", ".", "1", "\n", "# 选取数据点，点越多越精确", "\n", "dataPoints", " = ", "10000", "\n\n", "Unit", " = np.random.rand(dataPoints)\n", "Geom", " = np.random.geometric(p, dataPoints)\n", "distri_of_Monte", " = Geom * Unit\n\n", "# 概率密度函数 PDF", "\n", "plt", ".hist(distri_of_Monte, bins=", "40", ", range=(", "0", ", ", "40", "))\n", "points_of_z", " = np.arange(", "0", ", ", "41", ", ", "0", ".", "01", ")\n", "pdf_of_z", " = np.array([pdf_z(zi, p) for zi in points_of_z]) * dataPoints\n", "plt", ".plot(points_of_z, pdf_of_z)\n", "# print(pdf_of_z)", "\n", "plt", ".show()\n\n", "hist", ", bin_edges = np.histogram(distri_of_Monte, bins=", "40", ", range=(", "0", ", ", "40", "))\n\n", "# 概率分布函数 CDF", "\n", "hist_list", " = np.cumsum(hist) / dataPoints\n\n", "plt", ".plot(bin_edges[", "1", ":], hist_list)\n\n", "points_of_z", " = np.arange(", "1", ", ", "41", ", ", "0", ".", "1", ")\n", "distri_of_z", " =", " [distribution_z(zi, p) for zi in points_of_z]", "\n\n", "plt", ".plot(points_of_z, distri_of_z)\n\n", "plt", ".show()\n", "\n", "\n", "import", " sprt as sprt\n", "import", " numpy as np\n\n", "# Null value", "\n", "h0", " = ", "0.5", "\n", "# Alternative value", "\n", "h1", " = ", "0.55", "\n", "# Type I error rate = 0.05", "\n", "alpha", " = ", "0.05", "\n", "# Type II error rate = 0.2", "\n", "beta", " = ", "0.2", "\n", "# Values", "\n", "values", " = np.random.binomial(", "1", ", ", "0.55", ", ", "100", ")\n", "test", " = sprt.SPRTBinomial(", "h0", " = h0, ", "h1", " = h1, ", "alpha", " = alpha, ", "beta", " = beta, ", "values", " = values)\n\ntest.plot()\n\n", "# Plot the data and boundary but without fill the color", "\ntest.plot(", "fill", " = False)\n\n", "\n", "\n", "\n", "我想要达到的结果，如果你需要快速回答，请尝试 “付费悬赏”", "\n", "使用蒙特卡洛方法，对几何分布进行序贯概率比检验 (SPRT)，同时满足题目的要求。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;把.int改成.int32或者.int64试试&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["AttributeError: module 'numpy' has no attribute 'int'", ["今天在学习yolov5训练模型时，发生错误  AttributeError: module 'numpy' has no attribute 'int'", "\n", "\n", "Traceback (most recent ", "call", " ", "last", "):\n  File ", "\"D:\\yolov5\\train.py\"", ", ", "line", " ", "543", ", in ", "<module>", "\n    train(hyp, ", "opt", ", device, tb_writer)\n  File ", "\"D:\\yolov5\\train.py\"", ", ", "line", " ", "189", ", in train\n    dataloader, dataset = create_dataloader(train_path, imgsz, batch_size, gs, ", "opt", ",\n  File ", "\"D:\\yolov5\\utils\\datasets.py\"", ", ", "line", " ", "63", ", in create_dataloader\n    dataset = LoadImagesAndLabels(path, imgsz, batch_size,\n  File ", "\"D:\\yolov5\\utils\\datasets.py\"", ", ", "line", " ", "411", ", in __init__\n    bi = np.", "floor", "(np.arange(n) / batch_size).astype(np.", "int", ")  # batch ", "index", "\n  File ", "\"D:\\ProgramData\\Anaconda3\\envs\\yolov5\\lib\\site-packages\\numpy\\__init__.py\"", ", ", "line", " ", "284", ", in __getattr__\n    raise AttributeError(", "\"module {!r} has no attribute \"", "\nAttributeError: module ", "'numpy'", " ", "has", " ", "no", " attribute ", "'int'", "\n\n", "\n", "在之前没有安装numpy，只是用CPU进行训练时未发生错误。今天换成GPU，安装numpy后在运行train.py就发生了该错误，不知道如何解决", "\n", "提示发生错误的文件：", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "你只是赋值,没显示呀\r\nplt.show()看看", "Konwledge_Point": "应对NP完全问题", "Question": ["用vscope编写python程序，运行后无结果显示？", ["import numpy as np", "\nimport matplotlib.pyplot as plt ", "\nt = np.arange(0, 4, 0.1)", "\nplt.plot(t,t,t,t+2,t,t**2)", "\n\n", "numpy包和matplotlib都安装到最新版本。\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;torch.from_numpy 函数需要传输的对象是np.ndarry 类型的东西&amp;#xff0c;你现在传输的sourceR  他的对象类型是PlyData&lt;br /&gt;需要进行更改&lt;a href=\"https://blog.csdn.net/weixin_42445581/article/details/105069655\" id=\"textarea_1665319865440_1665320563291_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_42445581/article/details/105069655&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["请问这个问题该怎么解决？", ["遇到报错：", "TypeError: expected np.ndarray (got PlyData)", "\n", "报错部分：", "\n", "def", " ", "main", "():\n    args = options()\n    torch.backends.cudnn.deterministic = ", "True", "\n\n    ", "if", " args.user_data:\n        sourceR = PlyData.read(", "r'E:\\bunny\\data\\bun000.ply'", ")  ", "# The source point cloud is a rotated and offset defect", "\n        ", "# source=s3.float()", "\n\n        templateR = PlyData.read(", "r'E:\\bunny\\data\\bun045.ply'", ")  ", "# Template point cloud is complete", "\n        ", "# template=s5.float()", "\n\n\n        source = torch.from_numpy(sourceR)      ", "#此处报错", "\n        template = torch.from_numpy(templateR)\n\n      testset = UserData(template=template, source=source, tpcc=", "None", ", igt=", "None", ")\n\n"]], "Tag": "算法设计"}
{"Answer": "[参数写错了](https://scikit-neuralnetwork.readthedocs.io/en/latest/module_mlp.html#sknn.mlp.Regressor)\r\n\r\nLayers=\r\n换成\r\nlayers", "Konwledge_Point": "应对NP完全问题", "Question": ["解决python __init__() missing 1 required positional argument: 'layers'", ["运行的时候出现了__init__() missing 1 required positional argument: 'layers'，有大佬知道怎么解决吗", "\n\n", "from sklearn import datasets\nboston=datasets.load_boston()\nx,y=boston.data, boston.target\n\nfrom sklearn import preprocessing\nx_MinMax=preprocessing.MinMaxScaler()\ny_MinMax=preprocessing.MinMaxScaler()\n\nimport numpy as np\ny=np.array(y).reshape((len(y),1)) #np.array确保y是numpy数组\nx=x_MinMax.fit_transform(x) #fit_transform先拟合数据，然后转化它将其转化为标准形式\ny=y_MinMax.fit_transform(y)\nx.mean(axis=0) #均值为0\n\nimport random\nfrom sklearn.cross_validation import train_test_split\nnp.random.seed(2016)\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)\n\nfrom sknn.mlp import Regressor,Layer #预测模型\nfit1=Regressor(Layers=[Layer('Sigmoid',units=6),Layer('Sigmoid',units=14),\n                       Layer('Linear')],learning_rate=0.02,\n               random_state=2016,\n               n_iter=10\n               )\nfit1.fit(x_train,y_train)\npredict_train=fit1.predict(x_train)\n\nfrom sklearn.metrics import mean_squared_error\nmse_1=mean_squared_error(predict_train,y_train)\nprint(mse_1)\n"]], "Tag": "算法设计"}
{"Answer": "我知道了..\r\ntabPanel.frames[frmid]\r\n这肯定不对啦\r\n\r\n1.tabpanel是一个ext的组件,他没有什么frames的属性\r\n2.你是iframe,也不该是用frames[]的方法来取\r\n\r\n试着windowB.document.getElementById('myIfrId').src=\"http://www.g.cn\"\r\n之类的方法找下.\r\n\r\n或者你给出a和b的一些关键代码,不然我们是没办法本地测试", "Konwledge_Point": "应对NP完全问题", "Question": ["请问如何实现点击按钮刷新已打开页面的功能", ["用ExtJs实现如下：", "\n\n", "A.jsp中点击“显示”按钮弹出B.jsp窗口，若在没有关闭B页面前提下再次点击A的“显示”按钮实现B页面整个刷新并自动切换到B页面", "\n\n", "如何实现？？", "\n\n", "我写的代码", "\n\n", "[code=\"java\"]", "\nvar tabPanel = window.parent.tabs;", "\nvar lp = tabPanel.getComponent(id);", "\n\n", "if(!np){", "\n    tabPanel.add({", "\n    id: id,", "\n    title: name,", "\n    html: '',", "\n    closable: true", "\n    }).show();", "\n}", "\nelse{", "\n    var frmid = tabPanel.items.indexOf(np);", "\n\n", "tabPanel.frames[frmid].location.reload();\nnp.show();\n", "\n\n", "}", "\n[/code]", "\n\n", "在第二次点击时总是提示“frames为空或不为对象”，可是这个页面明明已经有了啊？为什么？请指教", "\n[b]问题补充：[/b]", "\nnp就是lp手误了", "\n其次我取得是下标 用下标也能定位的吧 不一定要id的", "\n[b]问题补充：[/b]", "\n而且用id我也试过了 还是同样的错误", "\n[b]问题补充：[/b]", "\n这些代码是写在a.jsp中的 要弹出的就是iframe中的b.jsp页面 a页面最外层还有个frame", "\n\n", "用Ext.get方法也取不到这个iframe啊 我做tabPanel.frames[frmid]其实就是为了获取这个内嵌的iframe，但是代码跑到frames这边就报错了，请问除了我写的这种方法 还能用什么方法获取这个iframe？加id或name我都试过了 还是同样错", "\n\n", "还有，我并没有点击关闭按钮，close应该还没调到吧", "\n[b]问题补充：[/b]", "\n代码太多我不可能全部贴出来的 其实我就是想知道如何获取一个tabPanel里面的iframe整个页面啊。取到了这个页面我才能去做刷新", "\n[b]问题补充：[/b]", "\n对了 说错了一点 tabPanel部分我是单独写在c.jsp中的，这个a.jsp也是c生成的一个iframe中，a和b其实是同级的，应该说c每次生成一个新的iframe。现在a想通过操作父页面c来增加一个兄弟页面b就是这样"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You can't access a constant like you do with a static property, the &lt;a href=\"http://www.php.net/manual/en/function.constant.php\"&gt;constant&lt;/a&gt; function is your solution :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$type = constant('NP_PostTypeType::' . $postType);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But be careful, your &lt;code&gt;$postType&lt;/code&gt; case must match your &lt;code&gt;NP_PostTypeType&lt;/code&gt; constant names (currently not the case), you should update your NP_PostType class to :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;abstract class NP_PostType extends BasicEnum {\n    const Event = \"Event\";\n    const Job = \"Job\";\n    const Quote = \"Quote\";\n    const Status = \"Status\";\n    const Video = \"Video\";\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["具有可变索引的枚举", ["\n\n", "I'm not sure what the correct wording of my question is, but I added an ", "enum", " (", "NP_PostTypeType", ") because I need to know what the type of each item in my initial enum (", "NP_PostType", ") is.", "\n\n", "I store the current PostType in ", "$postType", " which gets fed into a method and now in that method I need to extract the type for each type.", "\n\n", "What I tried doing was: ", "switch(NP_PostTypeType::$type)", ", but this yields: ", "Fatal error: Access to undeclared static property: NP_PostTypeType::$type", "\n\n", "These are my 2 enums:", "\n\n", "abstract class NP_PostType extends BasicEnum {\n    const Event = \"event\";\n    const Job = \"job\";\n    const Quote = \"quote\";\n    const Status = \"status\";\n    const Video = \"video\";\n}\n\nabstract class NP_PostTypeType extends BasicEnum {\n    const Event = \"type\";\n    const Job = \"type\";\n    const Quote = \"format\";\n    const Status = \"format\";\n    const Video = \"format\";\n}\n", "\n\n", "How do I go about this?", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;while count &amp;lt;&amp;#61; np:&lt;br /&gt;count 的值一直是0&amp;#xff0c;np一直是500&lt;br /&gt;你这不是死循环嘛。&lt;br /&gt;都没出循环&amp;#xff0c;plt.show()都没执行&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["matplotlib随机漫步", ["import", " matplotlib.pyplot ", "as", " plt\n", "import", " time\n", "import", " random ", "as", " rd\nplt.style.use(", "'seaborn'", ")\nfig, ax = plt.subplots()\n", "class", " ", "RandomWalk", ":\n    ", "\"\"\"生成一个随机漫步\"\"\"", "\n    ", "def", " ", "__init__", "(", "self,np = ", "500", "):\n\n        \n        self.x = [", "0", "]\n        self.y = [", "0", "]\n\n    ", "def", " ", "fill", "(", "self,np = ", "500", "):\n        self.np = np\n        count = ", "0", "\n        \n\n        plt.style.use(", "'seaborn'", ")\n        fig, ax = plt.subplots()\n        ", "while", " count <= np:\n            xf = rd.choice([", "1", ",-", "1", "])\n            xb = rd.choice([", "1", ",", "2", ",", "3", ",", "4", ",", "5", "])\n            xz = xf*xb\n\n            yf = rd.choice([", "1", ",-", "1", "])\n            yb = rd.choice([", "1", ",", "2", ",", "3", ",", "4", ",", "5", "])\n            yz = yf*yb\n            \n            ax.scatter(self.x[-", "1", "],self.y[-", "1", "])\n            self.x.append(xz)\n            self.y.append(yz)\n        plt.show()\n\n\na = RandomWalk()\na.fill()\n\n", "\n", "一个随机漫步的类，各位看一下，为什么我的一直显示不出来？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;24行  # 1&amp;#xff1a;30之后&lt;br /&gt;改成这样&amp;#xff1a;&lt;br /&gt;a&amp;#61;[lcal[i] for i in range(0,2920,8)]&lt;br /&gt;print(a)&lt;/p&gt;\n&lt;p&gt;测试结果&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/290445801176140.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python列表赋值", ["python列表赋值", "\n", "对列表赋值时，全部赋值为同一元素，这里问题为：列表a的所有元素都赋值为了lca1[2912]是错的", "\n", "\n", "import", " numpy as np\n", "from", " os import listdir\n", "from", " os.path import join   \n", "import", " netCDF4           \n", "import", " xarray as xr\n", "import", " pandas as pd\n", "import", " math\n", "import", " netCDF4 as nc \n", "f0", " = xr.open_dataset(r", "\"E:/1/DATA1/CERES_SYN1deg-3H_Terra-Aqua-MODIS_Ed4.1_Subset_20150101-20151231.nc\"", ")\n", "lca", " = f0['cldarea_low_3h']\n", "v0_p1_d", " = lca.sel(lat=slice(", "35", ".", "5", ",", "35", ".", "5", "),\n                ", "lon", "=slice(", "103", ".", "5", ",", "103", ".", "5", "))\n", "v1", "=np.array(v0_p1_d)\n", "v0_p2_d", " = lca.sel(lat=slice(", "36", ".", "5", ",", "36", ".", "5", "),\n                ", "lon", "=slice(", "103", ".", "5", ",", "103", ".", "5", "))\n", "v2", "=np.array(v0_p2_d)\n", "v0_p3_d", " = lca.sel(lat=slice(", "35", ".", "5", ",", "35", ".", "5", "),\n                ", "lon", "=slice(", "104", ".", "5", ",", "104", ".", "5", "))\n", "v3", "=np.array(v0_p3_d)\n", "v0_p4_d", " = lca.sel(lat=slice(", "36", ".", "5", ",", "36", ".", "5", "),\n                ", "lon", "=slice(", "104", ".", "5", ",", "104", ".", "5", "))\n", "v4", "=np.array(v0_p4_d)\n", "lca1", " = (v1+v2+v3+v4)/", "4", "\n", "# 1：30", "\n", "a", "=[", "0", "]*", "365", "\n", "for", " j in range(len(a)):\n    ", "for", " i in range(", "0", ",", "2920", ",", "8", "):\n        ", "a", "[j]=lca1[i]\n", "print", "(a)\n\n", "\n", "\n", "\n", "我想要达到的结果是，lca1数组里从第一个数据开始每隔8个数据赋值到列表a"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;##你的函数中参数传错了&amp;#xff0c;而且你并没有返回计算相似度的结果。我没有你的模型&amp;#xff0c;用的自己的计算可以正常返回&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/640276417176161.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;修改后的你试一下。有问题再看下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-comment\"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;\n\n\nimport json\nimport cv2\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; PIL import Image\nimport numpy as np\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; modelscope.pipelines import pipeline\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; modelscope.utils.constant import Tasks\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; modelscope.outputs import OutputKeys\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; flask import request\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; flask import jsonify\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; flask import Flask,make_response\nimport base64\nface_recognition &amp;#61; pipeline(Tasks.face_recognition, &lt;span class=\"hljs-attribute\"&gt;model&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;damo/cv_ir101_facerecognition_cfglint&amp;#39;&lt;/span&gt;)\ndef face_recognition(image1,image2):\n    get_img1 &amp;#61; image1\n    get_img2 &amp;#61; image2\n    emb1 &amp;#61; face_recognition(get_img1)[OutputKeys.IMG_EMBEDDING]\n    emb2 &amp;#61; face_recognition(get_img2)[OutputKeys.IMG_EMBEDDING]\n    sim &amp;#61; np.dot(emb1[0], emb2[0])\n    return (f&lt;span class=\"hljs-string\"&gt;&amp;#39;Face cosine similarity&amp;#61;{sim:.3f}, get_img1:{get_img1}  get_img2:{get_img2}&amp;#39;&lt;/span&gt;)\napp &amp;#61; Flask(__name__)\n&amp;#64;app.route(&lt;span class=\"hljs-string\"&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,methods&amp;#61;[&lt;span class=\"hljs-string\"&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;])\ndef first_post():\n    my_json &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;: None\n                }\n    data &amp;#61; request.get_data()\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; data:\n        my_json[&lt;span class=\"hljs-string\"&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;No data obtained!&amp;#34;&lt;/span&gt;\n        return jsonify(&lt;span class=\"hljs-attribute\"&gt;msg&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;缺少参数&amp;#34;&lt;/span&gt;)\n    try:\n        &lt;span class=\"hljs-attribute\"&gt;data&lt;/span&gt;&amp;#61;json.loads(data)\n        &lt;span class=\"hljs-attribute\"&gt;image1&lt;/span&gt;&amp;#61;data[&lt;span class=\"hljs-string\"&gt;&amp;#34;image1&amp;#34;&lt;/span&gt;].encode()\n        &lt;span class=\"hljs-attribute\"&gt;image2&lt;/span&gt;&amp;#61;data[&lt;span class=\"hljs-string\"&gt;&amp;#34;image2&amp;#34;&lt;/span&gt;].encode()\n        return face_recognition(image1,image2)\n    except Exception as e:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(e)\n        return jsonify(&lt;span class=\"hljs-attribute\"&gt;msg&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;出错了&amp;#xff0c;请查看是否正确访问&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__ &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:\n    app.&lt;span class=\"hljs-built_in\"&gt;run&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;host&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-attribute\"&gt;port&lt;/span&gt;&amp;#61;6000, &lt;span class=\"hljs-attribute\"&gt;debug&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;, &lt;span class=\"hljs-attribute\"&gt;use_reloader&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;)\napi文件\nimport os\nimport sys\nimport time\nimport json\nimport base64\nimport requests\nurl &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;http://0.0.0.0:6000&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;base64_data&lt;/span&gt;&amp;#61;None\nbase64_data &amp;#61; base64.b64encode(base64_data,&lt;span class=\"hljs-attribute\"&gt;encoding&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;)\nbase64_data &amp;#61; base64_data.decode()\ndata&amp;#61;{\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;image1&amp;#39;&lt;/span&gt;:None,\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;image2&amp;#39;&lt;/span&gt;:None\n}\nstart_time &amp;#61; time.time()\nresponse &amp;#61; requests.post(url, &lt;span class=\"hljs-attribute\"&gt;data&lt;/span&gt;&amp;#61;json.dumps(data))\nend_time &amp;#61; time.time()\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;time:&amp;#34;&lt;/span&gt;, end_time-start_time)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(response.text)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["在编写flask接口封装人脸识别能力的时候，出现了一些问题", ["在写一个flask的接口时，我调用post的图片为我实现功能（两张图片的相似度比对），但是我有点想不到我应该怎么写才能调用到", "\n", "\n", "\n", "import json\nimport cv2\n", "from", " PIL import Image\nimport numpy as np\n", "from", " modelscope.pipelines import pipeline\n", "from", " modelscope.utils.constant import Tasks\n", "from", " modelscope.outputs import OutputKeys\n", "from", " flask import request\n", "from", " flask import jsonify\n", "from", " flask import Flask,make_response\nimport base64\nface_recognition = pipeline(Tasks.face_recognition, ", "model", "=", "'damo/cv_ir101_facerecognition_cfglint'", ")\ndef face_recognition(get_img1,get_img2):\n    get_img1 = image1\n    get_img2 = image2\n    emb1 = face_recognition(get_img1)[OutputKeys.IMG_EMBEDDING]\n    emb2 = face_recognition(get_img2)[OutputKeys.IMG_EMBEDDING]\n    sim = np.dot(emb1[0], emb2[0])\n    return (f", "'Face cosine similarity={sim:.3f}, get_img1:{get_img1}  get_img2:{get_img2}'", ")\napp = Flask(__name__)\n@app.route(", "\"/\"", ",methods=[", "\"POST\"", "])\ndef first_post():\n    my_json = {", "\"msg\"", ": None\n                }\n    data = request.get_data()\n    ", "if", " ", "not", " data:\n        my_json[", "\"msg\"", "] = ", "\"No data obtained!\"", "\n        return jsonify(", "msg", "=", "\"缺少参数\"", ")\n    try:\n        ", "data", "=json.loads(data)\n        ", "image1", "=data[", "\"image1\"", "].encode()\n        ", "image2", "=data[", "\"image2\"", "].encode()\n    except Exception as e:\n        ", "print", "(e)\n        return jsonify(", "msg", "=", "\"出错了，请查看是否正确访问\"", ")\n", "if", " __name__ == ", "\"__main__\"", ":\n    app.", "run", "(", "host", "=", "'0.0.0.0'", ", ", "port", "=6000, ", "debug", "=", "True", ", ", "use_reloader", "=", "False", ")\n\napi文件\nimport os\nimport sys\nimport time\nimport json\nimport base64\nimport requests\nurl = ", "\"http://0.0.0.0:6000\"", "\n", "base64_data", "=None\nbase64_data = base64.b64encode(base64_data,", "encoding", "=", "\"utf-8\"", ")\nbase64_data = base64_data.decode()\ndata={\n    ", "'image1'", ":None,\n    ", "'image2'", ":None\n}\nstart_time = time.time()\nresponse = requests.post(url, ", "data", "=json.dumps(data))\nend_time = time.time()\n", "print", "(", "\"time:\"", ", end_time-start_time)\n", "print", "(response.text)\n", "\n", "face_recognition中的两个image爆红  但是程序可以跑，只是就算给它post了两张图片，最后依然会显示“出错了，请查看是否正确访问\"", "\n", "暂时没什么思路 可以做成全局变量的方式吗？", "\n", "给它post的两张图片能够正确接受并且给我返回我需要的相似度的值"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;写个简单的测试下就知道了。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;import cv2\nimport numpy as np\nimg&amp;#61;np.ones((9,9),dtype&amp;#61;np.uint8)\ntemp&amp;#61;img.copy().astype(np.int8)\ncv2.circle(temp,(5,5),3,-100,1)\ntest&amp;#61;[temp&amp;#61;&amp;#61;-100]\nprint(test)\n\n#output:\n[[False, False, False, False, False, False, False, False, False],\n[False, False, False, False, False, False, False, False, False],\n[False, False, False, False, False,  True, False, False, False],\n[False, False, False,  True,  True, False,  True,  True, False],\n[False, False, False,  True, False, False, False,  True, False],\n[False, False,  True, False, False, False, False, False,  True],\n[False, False, False,  True, False, False, False,  True, False],\n[False, False, False,  True,  True, False,  True,  True, False],\n[False, False, False, False, False,  True, False, False, False]]&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;所以&amp;#xff0c;这个函数的作用就很明显了。如果图片是单通道的图片&amp;#xff0c;那么处理后的img就只有在画圆的地方的位置是true&amp;#xff0c;其他为false &amp;#xff1b;如果是三通道的话&amp;#xff0c;那就是蓝色通道的圆为true&amp;#xff0c;其他为false。&lt;/p&gt;\n\n&lt;p&gt;根据这段代码和你的描述&amp;#xff0c;这应该是用来产生掩膜用的&amp;#xff0c;如果thickness&amp;#61;-1&amp;#xff0c;那么叠加在圆原图像上面的话就是将圆内的区域显示出来&amp;#xff0c;圆外的区域为黑色。如果thickness&amp;gt;&amp;#61;1,那么就只会显示在圆上的点&amp;#xff0c;其他区域为黑色。&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["OpenCV的一段代码问题", ["这是在学习一位博主的一段代码，旨在获取中心⚪部分的色域集，最后两行的目的是什么意思非常疑惑，求求各位好哥哥姐姐指导一下！", "\n\n", "\n", "def get_circle_field_color(img,center,r,thickness):\n    '''获取中心圆形区域的色值集'''\n    temp=img.copy().astype(np.int)\n    cv2.circle(temp,center,r,-100,thickness=thickness)\n    return img[temp == -100]"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不同的类都实现了相同的方法而已。用哪一个要看你当前用的是二维数组还是numpy库了。用二维数组的时候&amp;#xff0c;就没必要用numpy库去搞了。&lt;br /&gt;世界上很多事都不止一种办法&amp;#xff0c;很正常。条条道路通罗马。用哪个方法好&amp;#xff0c;要看你当时的具体场景&amp;#xff0c;选择最合适和方便的才是最好的&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["这两种写法有什么不同吗，为什么有的函数有这样两种写法，有的函数就不行", ["a.reshape（2，10）", "np.reshape（a，（2，10））", "其中a是一个二维数组，np是numpy库，这两种方法都能将数组的形状改成两行十列，但是有什么区别吗，记起来好麻烦"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第十行代码你把time包覆盖了。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["我想将代码的计算时间存进列表，然后输出图，但是不知道为什么这段代码会报错，求指导。", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "for", " i ", "in", " ", "range", "(", "10", "):\n    ni=", "4", "+i*", "4", "\n    nj=", "3", "+i*", "3", "\n    criterion1=", "0.001", "*", "np", ".ones((ni,nj))\n    criterion2=", "0.001", "*", "np", ".ones((nj,ni))\n    plt_num.", "append", "(ni+nj)\n    start = ", "time", ".", "time", "()\n    plt_k.", "append", "(fun1(ni,nj,", "gamma", ",eta,phi))#保存迭代次数\n    end = ", "time", ".", "time", "()\n    ", "time", "=end-start\n    plt_time.", "append", "(", "time", ")\n\n", "\n", "运行结果及报错内容", "\n", "Traceback (most recent ", "call", " last):\n  File \"C:\\Users\\30575\\Desktop\\21个参与者.py\", ", "line", " ", "78", ", ", "in", " <module>\n    start = ", "time", ".time()\nAttributeError: ", "'float'", " ", "object", " has ", "no", " ", "attribute", " ", "'time'", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;copy&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;df, row, exist&lt;/span&gt;):  &lt;span class=\"hljs-comment\"&gt;# 自定义函数&amp;#xff0c;用以根据计算结果进行行的复制任务&lt;/span&gt;\n    idx &amp;#61; []\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; r &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(exist):\n        idx.append(row)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; df.iloc[idx, :]\n\n\nDF &amp;#61; pd.read_csv(&lt;span class=\"hljs-string\"&gt;&amp;#34;test.csv&amp;#34;&lt;/span&gt;, header&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\ntau &amp;#61; np.array(DF[[&lt;span class=\"hljs-string\"&gt;&amp;#39;tau&amp;#39;&lt;/span&gt;]])\n&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n源文件的内容是这样的\n   date  time     tau\n0     1    11  [1, 3]\n1     2    22  [3, 4]\n2     3    33  [5, 5]\n&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n\ndfs &amp;#61; []\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; t &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(tau)):  &lt;span class=\"hljs-comment\"&gt;# 遍历每一行&amp;#xff0c;计算应产生几个表&amp;#xff0c;然后将各部分存在dfs列表里&lt;/span&gt;\n    left &amp;#61; &lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;(tau[t][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n    right &amp;#61; &lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;(tau[t][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n    compare &amp;#61; right - left\n    EXIST &amp;#61; compare &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    dfs.append(copy(DF, t, EXIST))\n\nresult &amp;#61; dfs[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; index &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(dfs)):  &lt;span class=\"hljs-comment\"&gt;# 拼接每个在dfs中的子结构&lt;/span&gt;\n    step &amp;#61; dfs[index]\n    result &amp;#61; pd.concat([result, step])\n\nresult.reset_index(drop &amp;#61; &lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;, inplace &amp;#61; &lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 结果是拼凑而成的&amp;#xff0c;所以可以重置以消除重复的索引&lt;/span&gt;\n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(result)  &lt;span class=\"hljs-comment\"&gt;# to_csv()也可以写&lt;/span&gt;\n&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n运行后的结果是这样的\n   date  time     tau\n0     1    11  [1, 3]\n1     1    11  [1, 3]\n2     1    11  [1, 3]\n3     2    22  [3, 4]\n4     2    22  [3, 4]\n5     3    33  [5, 5]\n&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["根据条件向dataframe中增加行", ["问题遇到的现象和发生背景", "\n", "这里，对tau这一列，如果tau里面，右边的-左边的=1则增加一行，并且增加的一行为重复本行的值。", "即对第一个数据[1,3]，3-1=2，所以重复两行数据。变成下图", "\n", "\n", "问题相关代码，请勿粘贴截图", "\n", "import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n", "import", " csv\n", "from", " scipy.stats ", "import", " norm\n", "from", " pandas ", "import", " DataFrame\ntau = pd.read_csv(\"C:/Users/DELL/Desktop/dthu.csv\", ", "header", "=", "0", ", usecols=[", "'tau'", "])\ntau = np.", "array", "(tau)\n\nbuck=[]\n", "for", " x,y ", "in", " range(len(tau)):\n    ", "if", " y-x==", "0", ":\n        ", "continue", "\n    ", "if", " y-x!=", "0", ":\n\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;It looks like you'll need to use &lt;code&gt;AND&lt;/code&gt; instead of the comma.&lt;/p&gt;\n\n\n\n&lt;pre&gt;&lt;code&gt;\"... AND NP.P_ID=NM.P_ID AND N.N_ID='\".$_GET['nurse_id'].\"';\");\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If the nurse id is an integer, you don't need the single quotes:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\"... AND NP.P_ID=NM.P_ID AND N.N_ID=\".$_GET['nurse_id'].\";\");\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I &lt;em&gt;strongly&lt;/em&gt; recommend that you sanitize &lt;code&gt;$_GET&lt;/code&gt; values before using them to query the database. Even better, use &lt;a href=\"http://www.php.net/manual/en/mysqli.quickstart.prepared-statements.php\" rel=\"nofollow\"&gt;prepared statements&lt;/a&gt;.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何使用PHP将HTML输入与mysql数据库进行比较？  [关闭]", ["\n\n", "$query = \"\nSELECT N.N_ID\n     , P.P_ID\n     , P.P_F_NAME\n     , P.P_L_NAME\n     , P.P_ADDR\n     , NP.VISIT_TIME\n     , N.N_LN_NAME\n     , N.N_SPEC\n     , M.M_DESC\n     , NM.M_DOSE \n  FROM NURSE N\n     , patient P\n     , n_visit_p NP\n     , MEDIC M\n     , n_provide_m NM \n WHERE N.N_ID  = NP.N_ID \n   AND P.P_ID  = NP.P_ID \n   AND M.M_ID  = NM.M_ID \n   AND NP.N_ID = NM.N_ID \n   AND NP.P_ID = NM.P_ID\n     , **N.N_ID='{$_GET[\"nurse_id\"]}'**;\n     \");\n\n $result = mysqli_query($con,$query);\n", "\n\n", "This is a part of my code, where i tried to compare the HTML input through $_GET....\n\"nurse_id\" is the form name in HTML through which i am receiving input..\nI even tried it with ", "$N_ID= $_GET[\"nurse_id\"]\"", "\nbut its not working either way... \nthe result that i am getting is all nurse details but not the specific selected nurse...", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;版本问题&amp;#xff0c;参考&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://www.thinbug.com/q/49375927\" id=\"textarea_1664119441424_1664119548150_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;python - AttributeError&amp;#xff1a;&amp;#39;GMM&amp;#39;对象没有属性&amp;#39;covariances_&amp;#39;|| AttributeError&amp;#xff1a;&amp;#39;module&amp;#39;对象没有属性&amp;#39;GaussianMixture&amp;#39; - Thinbug&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;我有一段代码可以适合我的数据的guassian模型。我从sklearn进口了混合物。然而&amp;#xff0c;即使我使用mixture.GaussianM&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.thinbug.com/q/49375927&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["'GaussianMixture' object has no attribute 'covariances_'", ["'GaussianMixture' object has no attribute 'covariances_'", "\n", "gmm = GaussianMixture(5)", "gmm.means_ = np.array([[10], [20], [60], [80], [110]])", "gmm.covars_ = np.array([[3], [3], [2], [2], [1]]) ** 2", "gmm.weights_ = np.array([0.2, 0.2, 0.2, 0.2, 0.2])", "\n", "X = gmm.sample(200000)", "然后就报错 'GaussianMixture' object has no attribute 'covariances_'，请问这个怎么解决"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你改一下散点的z坐标会发现,无论怎么改z的坐标都是0&lt;br /&gt;scatter函数z坐标默认是0&amp;#xff0c;要先指定z为一个标量&amp;#xff0c;即指定一个s&amp;#xff0c;zs才能代表z轴坐标&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.scatter(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,zs&amp;#61;&lt;span class=\"hljs-number\"&gt;45&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;715999999999994&lt;/span&gt;,s&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["matplotib出3D图后，再做一个散点，发现散点并不在曲面上", ["哪位帮我看看，我刚学matplotlib", "\n", "import", " matplotlib.pyplot as plt\n", "import", " numpy as np\n", "X", " = np.linspace(", "0", ",", "4", ",", "100", ")\n", "Y", " = np.linspace(", "0", ",", "4", ",", "100", ")\n", "X", ",Y = np.meshgrid(X,Y) #没加这个就报错，不是二维数组\n", "# Z = 5.99 + 17.438*X + 29.787*Y - 3.558*X*X + 0.357*X*Y -8.070*Y*Y ", "\n", "Z", " = -", "48", ".", "810", "+", "37", ".", "557", "*X + ", "130", ".", "130", "*Y +", "8", ".", "389", "*X*X - ", "33", ".", "166", "*X*Y - ", "62", ".", "740", "*Y*Y - ", "4", ".", "133", "*X*X*X +", "6", ".", "138", "*X*X*Y + ", "2", ".", "566", "*X*Y*Y+", "9", ".", "785", "*Y*Y*Y\n", "ax", " = plt.figure().add_subplot(projection='", "3", "d')\n", "tick", " = np.linspace(", "0", ",", "4", ",", "8", ")\n", "# Plot the 3D surface", "\n", "ax", ".plot_surface(X, Y,Z,cmap = 'rainbow')\n", "plt", ".xticks(tick)\n", "plt", ".yticks(tick)\n", "plt", ".scatter(", "1", ",", "1", ",", "45", ".", "715999999999994", ")#图上某个点的坐标\n", "plt", ".show()\n", "\n", "一开始没加x,y = np.meshgrid(x,y）报错", "加上之后就出了图", "然后我就想看看这图对不对，", "就在图上做了一个点的位置，", "然后我看图那个点并不在曲面上，", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于Monster 组和GPT的调写&amp;#xff1a;&lt;br /&gt;这段代码是在实现从数组a中取出指定索引位置的元素&amp;#xff0c;其中索引位置由数组index中的元素确定。具体来说&amp;#xff0c;index是一个包含3个随机整数的一维数组&amp;#xff0c;每个整数都是在0到a数组长度之间随机生成的&amp;#xff0c;因此它表示了a数组中任意3个元素的索引位置。a[index]的结果是一个一维数组&amp;#xff0c;其中的元素分别是a数组中对应索引位置上的元素&amp;#xff0c;也就是a[0]、a[2]和a[3]。因此&amp;#xff0c;这行代码输出的是a数组中索引位置为0、2、3的元素&amp;#xff0c;即[1, 3, 4]。&lt;/p&gt;\n&lt;p&gt;需要注意的是&amp;#xff0c;这里的乘法符号 * 并不是表示两个数组相乘&amp;#xff0c;而是表示将index数组作为a数组的索引来取值&amp;#xff0c;这种操作在numpy中称为“花式索引”&amp;#xff08;fancy indexing&amp;#xff09;。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["向您请教：数组的访问", ["请问index    #  array([0,2,3])", "a[index]    #    array([1,3,4])", "这是在干什么？", "index和a数组相乘？什么意思？", "\n", "\n", "#数组的访问与其他语言类似，但是支持同时访问多个元素。", "\n", "a", "=np.array(", "1", ",", "2", ",", "3", ",", "4", ",", "5", ")\n", "index", "=np.array(np.random.randint(", "0", ",len(a),", "3", "))\n", "index", "    #  array([", "0", ",", "2", ",", "3", "])\n", "a", "[index]    #    array([", "1", ",", "3", ",", "4", "])\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考一下这里的解决方法&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/liangjiu2009/article/details/104371329\" id=\"textarea_1637139706020_1637139980106_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/liangjiu2009/article/details/104371329&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["concatenate()出错：ValueError: all the input arrays must have same number of dimensions", ["\nu_c_new = clf1.predict(u_d)  ", "# 这里直接使用有标签数据训练得到的SVM模型对无标签数据进行分类，将其分类结果作为无标签数据的类别", "\ncu, cl = 0.0001, 1           ", "# 初始化有标签数据无标签数据重要程度的折中【参数】", "\nsample_weight = np.ones(n)   ", "# 样本权重， 直接让有标签数据的权重为Cl,无标签数据的权重为Cu", "\n", "print", "(u_c_new.shape)\n", "print", "(", "type", "(u_c_new))\n", "print", "(l_c.shape)\n", "print", "(", "type", "(l_c))\n", "# sample_weight[len(l_c):] = cu", "\n", "# id_set = np.arange(len(u_d))", "\nlu_c = np.concatenate((l_c, u_c_new))\n", "\n", "结果为：", "\n", "(113, 1)\n<class 'numpy.ndarray'>\n(60, 1)\n<class 'numpy.ndarray'>\nTraceback (most recent call last):\n  File ", "\"E:/PYTHON/PYCHARM/Demo/TSVM2.py\"", ", line 48, in <module>\n    lu_c = np.concatenate((l_c, u_c_new))\n  File ", "\"<__array_function__ internals>\"", ", line 6, in concatenate\nValueError: all the input arrays must have same number of dimensions, but the", " array ", "at index 0 has 2 dimension(s)", " and ", "the", " array ", "at index 1 has 1 dimension(s)\n", "\n", "从Debugger中看到u_c_new：{ndarray:(113,)}   ; 而l_c：{ndarray:(60,1)} ,这是为什么呀？怎么解决呀？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\nimport numpy as np\nimport matplotlib&lt;span class=\"hljs-selector-class\"&gt;.pyplot&lt;/span&gt; as plt\n\nnp&lt;span class=\"hljs-selector-class\"&gt;.random&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.seed&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\nmu, sigma &amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;\n&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.random&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.normal&lt;/span&gt;(mu,sigma,size&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;)\n\nplt&lt;span class=\"hljs-selector-class\"&gt;.hist&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;,histtype&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;stepfilled&amp;#39;&lt;/span&gt;,facecolor&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;,alpha&amp;#61;&lt;span class=\"hljs-number\"&gt;0.75&lt;/span&gt;)\nplt&lt;span class=\"hljs-selector-class\"&gt;.title&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;Histogram&amp;#39;&lt;/span&gt;)\n\nplt&lt;span class=\"hljs-selector-class\"&gt;.show&lt;/span&gt;()\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["plt.hist()测试", ["matplotlip.pyplot画图，图像标题无法显示出来", "\n", "import numpy as np", "import matplotlib.pyplot as plt", "\n", "np.random.seed(0)", "mu, sigma = 100, 20", "a = np.random.normal(mu,sigma,size=100)", "\n", "plt.hist(a, 20,normed=1,histtype='stepfilled',facecolor='b',alpha=0.75)", "plt.title('Histogram')", "\n", "plt.show()", "\n", "参照这个解决了", "https://www.freesion.com/article/46451414816/", "\n", "normed=1 表示归一化？将频数转化成频率？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;astype全部小写&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["AttributeError: 'numpy.ndarray' object has no attribute 'asType'", ["AttributeError: 'numpy.ndarray' object has no attribute 'asType'", "\n", "topHat = cv2.morphology", "Ex(", "gray", ", ", "cv2", ".MORPH_TOPHAT, ", "rectKernel", ")", "\ngradX = cv2.", "Sobel(", "topHat", ", ", "ddepth", "=", "cv2", ".CV_32F, ", "dx", "=1, ", "dy", "=0,", "ksize", "=-1)", " \ngradX = np.absolute(gradX)\n(minVal, maxVal) = (np.min(gradX), np.max(gradX))\ngradX = (", "255", "*((gradX - minVal)", " / ", "(maxVal - minVal)))\ngradX = gradX.", "as", "Type(", "\"uint8\"", ")", "\n\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;39行的array改成全局的再运行看看&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;array&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; [[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] * &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] * &lt;span class=\"hljs-number\"&gt;165312&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python 栈溢出 Process finished with exit code -1073741571 (0xC00000FD)", ["问题遇到的现象和发生背景", "\n", "运行时出现栈溢出的现象，试过网上大家说的修改栈大小、深度等，但都没有解决问题。我的数据有16万多条，不知道是不是数据太大的问题，还是其他问题。", "\n", "问题相关代码，请勿粘贴截图", "\n", "import", " numpy ", "as", " np\n", "import", " sys\n", "import", " os\n", "from", " osgeo ", "import", " gdal\n", "from", " sklearn ", "import", " ensemble\n", "from", " sklearn.model_selection ", "import", " train_test_split\n", "import", " joblib\n", "from", " tqdm ", "import", " tqdm\n", "import", " time\n\n", "# 显示进度条", "\ntext = ", "\"\"", "\n", "for", " char ", "in", " tqdm([", "\"a\"", ", ", "\"b\"", "]):\n    text = text + char\n    time.sleep(", "0.5", ")\n\n\n", "# 读取tif数据", "\n", "def", " ", "Read_img2array", "(", "img_file_path", "):\n    ", "\"\"\"\n    读取栅格数据，将其转换成对应数组\n    img_file_path: 栅格数据路径\n    :return: 返回投影，几何信息，和转换后的数组\n    \"\"\"", "\n    dataset = gdal.Open(img_file_path)  ", "# 读取栅格数据", "\n    ", "print", "(", "'处理图像波段数总共有：'", ", dataset.RasterCount)\n    ", "# 判断是否读取到数据", "\n    ", "if", " dataset ", "is", " ", "None", ":\n        ", "print", "(", "'Unable to open *.tif'", ")\n        sys.exit(", "1", ")  ", "# 退出", "\n   ", "# 直接读取dataset", "\n    img_array = dataset.ReadAsArray()\n    ", "return", " img_array\n\n", "# tif -> array", "\n", "def", " ", "read_tif_array", "(", "path, filetype", "):\n    pathDir = os.listdir(path)  ", "# 文件放置在当前文件夹中，用来获取当前文件夹内所有文件目录", "\n    i = ", "0", "\n    array = [[", "0", "] * ", "1", "] * ", "165312", "\n    array = np.array(array)\n    array = array.reshape(-", "2", ", ", "1", ")\n    ", "for", " x ", "in", " pathDir:\n        index = x.rfind(", "'.'", ")\n        ", "if", " x[index:] == filetype:\n            img_array = Read_img2array(path + ", "\"/\"", " + x)\n            mul = np.array(img_array).reshape(-", "2", ", ", "1", ")\n            array = np.column_stack((array, mul))\n            i = i + ", "1", "\n        ", "else", ":\n            i = i\n    array = array[:, ", "1", ":]\n    ", "return", " array\n\n", "# 读取特征值", "\nfeature = read_tif_array(", "\"D:/Personality/paper/GBDT/train\"", ", ", "'.tif'", ")\n", "# print(feature.shape)  # 一共有15个特征值", "\n\n", "# 读取地质类为标签", "\nlabel = read_tif_array(", "\"D:/Personality/paper/GBDT/label\"", ", ", "'.tif'", ")\nlabel = label.ravel()\n\n", "print", "(feature.shape, label.shape)\n\nX, y = feature, label\nlabels, y = np.unique(y, return_inverse=", "True", ")  ", "# 标签", "\nX_train, X_test, y_train, y_test = train_test_split(X, y)  ", "# 创建数据集", "\n\noriginal_params = {\n    ", "\"n_estimators\"", ": ", "400", ",\n    ", "\"max_leaf_nodes\"", ": ", "4", ",\n    ", "\"max_depth\"", ": ", "6", ",\n    ", "\"random_state\"", ": ", "2", ",\n    ", "\"min_samples_split\"", ": ", "5", ",\n}  ", "# 设置树的基本参数，用于后面计算", "\nsetting = {", "\"learning_rate\"", ": ", "0.2", ", ", "\"subsample\"", ": ", "1.0", "}\nparams = ", "dict", "(original_params)  ", "# 转化为字典", "\nparams.update(setting)  ", "# 更新字典键值对", "\nclf = ensemble.GradientBoostingClassifier(**params)  ", "# 梯度", "\nclf.fit(X_train, y_train)  ", "# 训练数据集", "\njoblib.dump(clf, ", "'train_model_result.m'", ")   ", "# 保存模型", "\n\ny_gbr = clf.predict(X_train)\ny_gbr1 = clf.predict(X_test)\nacc_train = clf.score(X_train, y_train)\nacc_test = clf.score(X_test, y_test)\n", "print", "(acc_train)\n", "print", "(acc_test)\n\n\n", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不要用tf.cast&amp;#xff0c;用np的函数&lt;a href=\"https://blog.csdn.net/yulanf/article/details/104494492\" id=\"textarea_1649066549007_1649066951977_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;解决Cannot convert a symbolic Tensor to a numpy array._yulanf的博客-CSDN博客_symbolic tensor&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;今天做Tensorflow的手写体识别模型&amp;#xff0c;用的Lenet5,跑完之后想自己输入个图片测试一下&amp;#xff0c;处理图片并导入数据的时候一直报错&amp;#xff0c;Cannot convert a symbolic Tensor to a numpy array.最后发现reshaped_xs &amp;#61; np.reshape(xs_c, (BATCH_SIZE, mnist_inference_Lenet5_update.IMAGE...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/yulanf/article/details/104494492&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["NotImplementedError: Cannot convert a symbolic Tensor (truediv:0) to a numpy array.", ["用训练好的模型识别自己手写的图片时报错", "def load_preprosess_image(path):", "    img_raw = tf.io.read_file(path)", "    img_tensor = tf.cast(tf.image.decode_jpeg(img_raw, channels=1), tf.float32)", "    img_tensor = tf.image.resize(img_tensor, [28, 28])", "    img = img_tensor / 255.0", "    return img", "\n", "if ", "name", " == '", "main", "':", "    app = Painter('./img/')", "    app.run()", "    ID = []", "    for count in range(app.count):", "        img = load_preprosess_image('./img/' + str(count) + '.jpg')", "\n", "    np.expand_dims(img, ", "axis", "=-1)\n\n    model = tf.keras.models.load_model(", "'./model.h5'", ")\n    prediction = model.predict(img.numpy().reshape(1, 28, 28, 1))\n    result = np.argmax(prediction)\n    ID.append(result)\n", "print", "(", "'识别的数字为：'", ", ", "end", "=", "''", ")\n", "for", " item ", "in", " ID:\n    ", "print", "(item, ", "end", "=", "''", ")\n", "\n", "环境Python3.6，tensorflow1.15，看到网上说是numpy版本的问题，我卸载分别重新装了1.17，1.18，1.19版本，还是报错，"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;看到这里遇到了 TypeError: unsupported operand type(s) for &amp;#43;: &amp;#39;builtin_function_or_method&amp;#39; and &amp;#39;builtin_function_or_method&amp;#39; 的错误。&lt;/p&gt;\n&lt;p&gt;这个错误通常是由于在代码中使用了不支持的操作符导致的。在这种情况下&amp;#xff0c;可以试试使用加号&amp;#xff08;&amp;#43;&amp;#xff09;操作符来进行某些操作&amp;#xff0c;但是操作数的类型不支持这个操作。&lt;/p&gt;\n&lt;p&gt;在代码中&amp;#xff0c;这个错误发生在下列代码的第 31 行&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;s&lt;span class=\"hljs-selector-attr\"&gt;[i,j]&lt;/span&gt;,_,r&lt;span class=\"hljs-selector-attr\"&gt;[i,j]&lt;/span&gt;,&lt;span class=\"hljs-selector-tag\"&gt;p&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[i,j]&lt;/span&gt;,_,_ &amp;#61; linregress(sst&lt;span class=\"hljs-selector-attr\"&gt;[:,i,j]&lt;/span&gt;,nao1&lt;span class=\"hljs-selector-attr\"&gt;[:]&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;看起来 linregress 函数中的参数 x 和 y 都是 NumPy 数组&amp;#xff0c;但是它们的类型并不是数组&amp;#xff0c;而是 builtin_function_or_method。这就是为什么会发生错误的原因。&lt;/p&gt;\n&lt;p&gt;要解决这个问题&amp;#xff0c;需要检查 nao1 变量的类型&amp;#xff0c;并确保它是一个 NumPy 数组。可能是因为忘记使用括号调用了 mean 函数&amp;#xff0c;导致 nao1 的类型是函数。&lt;/p&gt;\n&lt;p&gt;要修复这个问题&amp;#xff0c;可以试试使用括号来调用 mean 函数&amp;#xff0c;例如&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;naod&lt;/span&gt;.append(nao[&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;*i:&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;*i].mean())\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这样 nao1 就应该是一个 NumPy 数组&amp;#xff0c;不会再出现错误。&lt;br /&gt;望采纳。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["【python】TypeError: unsupported operand type(s) for +: 'builtin_function_or_method' and", ["问题", "写代码的错误TypeError: unsupported operand type(s) for +: 'builtin_function_or_method' and 'builtin_function_or_method'", "\n", "源代码", "\n", "import", " xarray ", "as", " xr\n", "import", " pandas ", "as", " pd\n", "import", " scipy.signal\n", "import", " numpy ", "as", " np\n", "import", " datetime ", "as", " dt\n\n", "from", " scipy.stats ", "import", " linregress\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " cartopy.crs ", "as", " ccrs\n\n", "# 读取海温sst========", "\nds = xr.open_dataset(", "r'E:\\huibao\\task3\\HadISST_sst.nc'", ")\nds\nsst = ds[", "'sst'", "]\nsst = sst.loc[sst.time.dt.month.isin([", "12", ",", "1", ",", "2", "])].loc[", "'1979-12-01'", ":", "'2020-03-01'", ",", "'80'", ":", "'30'", ",", "'-100'", ":", "'40'", "]\nsst = sst.to_numpy()\nsst = sst[:,:,:].reshape(", "41", ",", "3", ",sst.shape[", "1", "],sst.shape[", "2", "]).mean(", "1", ")\n", "# 读取nao指数=========", "\nnaom = pd.read_csv(", "r'E:\\huibao\\task3\\NAO_monthly.txt'", ",header=", "None", ") \nnao = scipy.signal.detrend(naom,", "type", "=", "'linear'", ")", "#去趋势化", "\nnaod=[]\n", "for", " i ", "in", " ", "range", "(", "41", "):\n    naod.append(nao[", "11", "+", "12", "*i:", "13", "+", "12", "*i].mean)\nnao1 = np.array(naod)\nsst = np.array(sst)\ns,r,p=np.zeros((sst.shape[", "1", "],sst.shape[", "2", "])),np.zeros((sst.shape[", "1", "],sst.shape[", "2", "])),np.zeros((sst.shape[", "1", "],sst.shape[", "2", "]))\n", "# print(type(sst))", "\n", "for", " i ", "in", " ", "range", "(sst.shape[", "1", "]):\n    ", "for", " j ", "in", " ", "range", "(sst.shape[", "2", "]):\n        s[i,j],_,r[i,j],p[i,j],_,_ = linregress(sst[:,i,j],nao1[:])\n\n", "\n", "出错代码", "\n", "for", " ", "i", " ", "in", " range(sst", ".shape", "[1]", "):\n    ", "for", " j ", "in", " range(sst", ".shape", "[2]", "):\n        s", "[i,j]", ",_,r", "[i,j]", ",", "p", "[i,j]", ",_,_ = linregress(sst", "[:,i,j]", ",nao1", "[:]", ")\n", "\n", "出现错误", "\n", "TypeError                                 Traceback (most recent call last)\n", "Input", " ", "In", " [17], ", "in", " <cell ", "line", ": 29>()\n     29 ", "for", " i ", "in", " ", "range", "(sst.shape[1]):\n     30     ", "for", " j ", "in", " ", "range", "(sst.shape[2]):\n---> 31         s[i,j],_,r[i,j],p[i,j],_,_ = linregress(sst[:,i,j],nao1[:])\n\n", "File", " ", "D", ":\\anacconda\\envs\\myenv1\\lib\\site-packages\\scipy\\stats\\_stats_mstats_common.py:155, ", "in", " linregress(x, y, alternative)\n    153 ", "n", " = len(x)\n    154 xmean = np.", "mean", "(x, None)\n--> 155 ymean = np.", "mean", "(y, None)\n    157 # Average sums of square differences from the ", "mean", "\n    158 #   ssxm = ", "mean", "( (x-", "mean", "(x))^2 )\n    159 #   ssxym = ", "mean", "( (x-", "mean", "(x)) * (y-", "mean", "(y)) )\n    160 ssxm, ssxym, _, ssym = np.cov(x, y, ", "bias", "=1).flat\n\n", "File", " <__array_function__ internals>:180, ", "in", " ", "mean", "(*", "args", ", **kwargs)\n\n", "File", " ", "D", ":\\anacconda\\envs\\myenv1\\lib\\site-packages\\numpy\\core\\fromnumeric.py:3474, ", "in", " ", "mean", "(a, axis, dtype, ", "out", ", keepdims, where)\n   3471     ", "else", ":\n   3472         ", "return", " ", "mean", "(axis=axis, dtype=dtype, ", "out", "=", "out", ", **kwargs)\n-> 3474 ", "return", " _methods._mean(a, axis=axis, dtype=dtype,\n   3475                       ", "out", "=", "out", ", **kwargs)\n\n", "File", " ", "D", ":\\anacconda\\envs\\myenv1\\lib\\site-packages\\numpy\\core\\_methods.py:179, ", "in", " _mean(a, axis, dtype, ", "out", ", keepdims, where)\n    176         dtype = mu.dtype('f4')\n    177         is_float16_result = True\n--> 179 ", "ret", " = umr_sum(arr, axis, dtype, ", "out", ", keepdims, where=where)\n    180 ", "if", " isinstance(", "ret", ", mu.ndarray):\n    181     ", "ret", " = um.true_divide(\n    182             ", "ret", ", rcount, ", "out", "=", "ret", ", casting='unsafe', subok=False)\n\nTypeError: unsupported operand ", "type", "(s) ", "for", " +: 'builtin_function_or_method' and 'builtin_function_or_method'\n", "\n", "开始时，以为产生上述错误的原因是：虽python变量没有提前声明，但定义了nao1 = np.array(naod)", "sst = np.array(sst)后仍产生相同错误，实在不清楚应该如何解决，希望可以有人帮忙指点一下，感激不尽。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1&amp;#xff09;你可以自己用简单的几何问题&amp;#xff0c;下图只是一个例子&amp;#xff08;&lt;strong&gt;不全面&lt;/strong&gt;&amp;#xff09;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/50023432274615.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;2&amp;#xff09;你也可以完全用用opencv的功能&amp;#xff0c;下图来自Stack Overflow&lt;br /&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/03097832274614.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["左右倾斜图像 两种情况下 都得出w大于h angle大于0", ["问题遇到的现象和发生背景", "\n", "左右倾斜图像 最小矩形框绘制正确", "两种情况下 都得出w大于h angle大于0", "原理上 根据下面的图 左斜应该w<h 右斜w>h angle在[-90,0）之间", "\n", "问题相关代码，请勿粘贴截图", "\n", "import cv2", "import numpy as np", "\n", "读取原图像", "\n", "img = cv2.imread('C:/Users/1.png')", "\n", "读取灰度图像", "\n", "img1 = cv2.imread('C:/Users/1.png', 0)", "\n", "使用中值滤波", "\n", "img2 = cv2.medianBlur(img1, 15)", "\n", "二值化", "\n", "ret, thresh1 = cv2.threshold(img2, 127, 255, cv2.THRESH_BINARY)", "\n", "形态学运算中的开运算（opening）:先腐蚀再膨胀", "\n", "kernel = np.ones((5, 5), np.uint8)", "opening = cv2.morphologyEx(thresh1, cv2.MORPH_OPEN, kernel)", "\n", "opening = ~opening", "\n", "contours, hierarchy = cv2.findContours(opening, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)", "cnt = contours[0]", "rect = cv2.minAreaRect(cnt)", "box = cv2.boxPoints(rect)", "box = np.int0(box)", "cv2.drawContours(img, [box], 0, (0, 0, 255), 2)", "x, y, w, h = cv2.boundingRect(cnt)  # （x,y）是旋转的边界矩形左上角的点，w ,h分别是宽和高", "\n", "angle = int(rect[2])", "print(angle)", "print(w, h)", "\n", "运行结果及报错内容", "\n", "4", "1014 327", "\n", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "参考 ", "https://blog.csdn.net/vansbred/article/details/112312409", "\n", "我想要达到的结果", "\n", "希望可以分辨出左右斜"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\nnumpy 造成的&amp;#xff0c;重装 numpy, 试试。&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["tensorflow运行问题", ["有大佬遇到过这个问题吗，望指点", "\n\n", "\n\n", "\nAttributeError                            Traceback (most recent call last)\n<ipython-input-13-41389fad42b5> in <module>()\n----> 1 import tensorflow as tf\n\nF:\\Program Files (x86)\\anaconda3\\lib\\site-packages\\tensorflow\\__init__.py in <module>()\n     26 \n     27 # pylint: disable=g-bad-import-order\n---> 28 from tensorflow.python import pywrap_tensorflow  # pylint: disable=unused-import\n     29 from tensorflow.python.tools import module_util as _module_util\n     30 \n\nF:\\Program Files (x86)\\anaconda3\\lib\\site-packages\\tensorflow\\python\\__init__.py in <module>()\n     45 # pylint: disable=wildcard-import,g-bad-import-order,g-import-not-at-top\n     46 \n---> 47 import numpy as np\n     48 \n     49 from tensorflow.python import pywrap_tensorflow\n\nF:\\Program Files (x86)\\anaconda3\\lib\\site-packages\\numpy\\__init__.py in <module>()\n    140     from . import _distributor_init\n    141 \n--> 142     from . import core\n    143     from .core import *\n    144     from . import compat\n\nF:\\Program Files (x86)\\anaconda3\\lib\\site-packages\\numpy\\core\\__init__.py in <module>()\n     55 from . import umath\n     56 from . import _internal  # for freeze programs\n---> 57 from . import numerictypes as nt\n     58 multiarray.set_typeDict(nt.sctypeDict)\n     59 from . import numeric\n\nF:\\Program Files (x86)\\anaconda3\\lib\\site-packages\\numpy\\core\\numerictypes.py in <module>()\n    109 )\n    110 \n--> 111 from ._type_aliases import (\n    112     sctypeDict,\n    113     sctypeNA,\n\nF:\\Program Files (x86)\\anaconda3\\lib\\site-packages\\numpy\\core\\_type_aliases.py in <module>()\n     61         _concrete_typeinfo[k] = v\n     62 \n---> 63 _concrete_types = {v.type for k, v in _concrete_typeinfo.items()}\n     64 \n     65 \n\nF:\\Program Files (x86)\\anaconda3\\lib\\site-packages\\numpy\\core\\_type_aliases.py in <setcomp>(.0)\n     61         _concrete_typeinfo[k] = v\n     62 \n---> 63 _concrete_types = {v.type for k, v in _concrete_typeinfo.items()}\n     64 \n     65 \n\nAttributeError: 'tuple' object has no attribute 'type'\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;思路其实有多种&amp;#xff0c;如你所说用户数据现在是可以上传了的&amp;#xff0c;也就是说实际上你现在需要的是读取用户数据和你的数据&amp;#xff0c;展示到同一个图表中&amp;#xff0c;这个有很多种方案&amp;#xff1a;&lt;br /&gt;1、类似于你现在的方案&amp;#xff0c;把数据绘图保存图片&amp;#xff0c;然后把图片展示到前端&amp;#xff0c;这个不是很推荐&lt;br /&gt;2、利用pyecharts库&amp;#xff0c;在后端把数据封装成option对象&amp;#xff0c;然后给前端展示&lt;br /&gt;3、把后端数据处理一下&amp;#xff0c;直接发到前端&amp;#xff0c;前端用echarts组件展示&lt;br /&gt;以下是第3种方案的一个简单例子&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; json\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; random &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; randint\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; flask &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; Flask, render_template\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\napp &amp;#61; Flask(__name__)\n\n&lt;span class=\"hljs-meta\"&gt;&amp;#64;app.route(&lt;span class=\"hljs-params\"&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;index&lt;/span&gt;():\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; render_template(&lt;span class=\"hljs-string\"&gt;&amp;#39;show.html&amp;#39;&lt;/span&gt;)\n\n&lt;span class=\"hljs-meta\"&gt;&amp;#64;app.route(&lt;span class=\"hljs-params\"&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;/getdata&amp;#34;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;getData&lt;/span&gt;():\n    y1 &amp;#61; [randint(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)]\n    y2 &amp;#61; [randint(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)]\n    x &amp;#61; [&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;]\n    data &amp;#61; {}\n    data[&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;] &amp;#61; x\n    data[&lt;span class=\"hljs-string\"&gt;&amp;#39;y1&amp;#39;&lt;/span&gt;] &amp;#61; y1\n    data[&lt;span class=\"hljs-string\"&gt;&amp;#39;y2&amp;#39;&lt;/span&gt;] &amp;#61; y2\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(data)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; json.dumps(data,ensure_ascii&amp;#61;&lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__ &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:\n    app.run()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;show.html&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-html\"&gt;&lt;span class=\"hljs-meta\"&gt;&amp;lt;!DOCTYPE &lt;span class=\"hljs-keyword\"&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;html&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;lang&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;meta&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;charset&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Title&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;script&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;src&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&amp;#34;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;script&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;src&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;https://cdn.bootcdn.net/ajax/libs/echarts/5.3.3/echarts.min.js&amp;#34;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"language-javascript\"&gt;\n        $(&lt;span class=\"hljs-variable language_\"&gt;document&lt;/span&gt;).&lt;span class=\"hljs-title function_\"&gt;ready&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; (&lt;span class=\"hljs-params\"&gt;&lt;/span&gt;) {\n            &lt;span class=\"hljs-keyword\"&gt;var&lt;/span&gt; main &amp;#61; echarts.&lt;span class=\"hljs-title function_\"&gt;init&lt;/span&gt;(&lt;span class=\"hljs-variable language_\"&gt;document&lt;/span&gt;.&lt;span class=\"hljs-title function_\"&gt;getElementById&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;main&amp;#34;&lt;/span&gt;))\n            $.&lt;span class=\"hljs-title function_\"&gt;get&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;/getdata&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; (&lt;span class=\"hljs-params\"&gt;resp&lt;/span&gt;) {\n                data &amp;#61; &lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &amp;#43; resp &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;)&amp;#34;&lt;/span&gt;)\n                option &amp;#61; {\n                    &lt;span class=\"hljs-attr\"&gt;title&lt;/span&gt;: {\n                        &lt;span class=\"hljs-attr\"&gt;text&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#39;Line&amp;#39;&lt;/span&gt;\n                    },\n                    &lt;span class=\"hljs-attr\"&gt;tooltip&lt;/span&gt;: {\n                        &lt;span class=\"hljs-attr\"&gt;trigger&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#39;axis&amp;#39;&lt;/span&gt;\n                    },\n                    &lt;span class=\"hljs-attr\"&gt;legend&lt;/span&gt;: {\n                        &lt;span class=\"hljs-attr\"&gt;data&lt;/span&gt;: [&lt;span class=\"hljs-string\"&gt;&amp;#39;y1&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;y2&amp;#39;&lt;/span&gt;]\n                    },\n                    &lt;span class=\"hljs-attr\"&gt;xAxis&lt;/span&gt;: {\n                        &lt;span class=\"hljs-attr\"&gt;type&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;,\n                        &lt;span class=\"hljs-attr\"&gt;boundaryGap&lt;/span&gt;: &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;,\n                        &lt;span class=\"hljs-attr\"&gt;data&lt;/span&gt;: data[&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;]\n                    },\n                    &lt;span class=\"hljs-attr\"&gt;yAxis&lt;/span&gt;: {\n                        &lt;span class=\"hljs-attr\"&gt;type&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;\n                    },\n                    &lt;span class=\"hljs-attr\"&gt;series&lt;/span&gt;: [\n                        {\n                            &lt;span class=\"hljs-attr\"&gt;name&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#39;y1&amp;#39;&lt;/span&gt;,\n                            &lt;span class=\"hljs-attr\"&gt;type&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#39;line&amp;#39;&lt;/span&gt;,\n                            &lt;span class=\"hljs-attr\"&gt;stack&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#39;Total&amp;#39;&lt;/span&gt;,\n                            &lt;span class=\"hljs-attr\"&gt;data&lt;/span&gt;: data[&lt;span class=\"hljs-string\"&gt;&amp;#39;y1&amp;#39;&lt;/span&gt;]\n                        },\n                        {\n                            &lt;span class=\"hljs-attr\"&gt;name&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#39;y2&amp;#39;&lt;/span&gt;,\n                            &lt;span class=\"hljs-attr\"&gt;type&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#39;line&amp;#39;&lt;/span&gt;,\n                            &lt;span class=\"hljs-attr\"&gt;stack&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#39;Total&amp;#39;&lt;/span&gt;,\n                            &lt;span class=\"hljs-attr\"&gt;data&lt;/span&gt;: data[&lt;span class=\"hljs-string\"&gt;&amp;#39;y2&amp;#39;&lt;/span&gt;]\n                        }\n                    ]\n                };\n                main.&lt;span class=\"hljs-title function_\"&gt;setOption&lt;/span&gt;(option);\n            });\n        });\n    &lt;/span&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;div&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;id&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;main&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;style&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;width: 800px;height:500px&amp;#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/75827427855613.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["请问如何在网页上利用数据库的数据作图并展示出来", ["目前设计了一个网页，用户可以通过excel上传数据到数据库，下一步我想在网页上增加一个按钮，点击这个按钮，用户可以把他所上传的数据与我的数据通过图片进行对比（python代码已经写好，就是不知道怎么应用到flask框架中在网页展示出来）。或者还有没有其他的解决办法，如果解决必定采纳！感谢！！（下面是我写的代码，其实就是机械地和路由结合起来，想的是作图保存好以后，一点击按钮，展示图片）", "\n", "from", " flask ", "import", " Flask, render_template, request\n", "import", " pymysql\n", "import", " xlrd\n", "import", " numpy ", "as", " np\n", "import", " matplotlib ", "as", " mp\n", "\n", "@app.route(", "\"/seedling/sevendays/figure1\"", ")\ndef index6():\n    kwargs = {\n        ", "\"host\"", ": ", "\"localhost\"", ",\n        ", "\"port\"", ": 3306,\n        ", "\"user\"", ": ", "\"root\"", ",\n        ", "\"passwd\"", ": ", "\"10868325\"", ",\n        ", "\"database\"", ": ", "\"lxd\"", ",\n        ", "\"charset\"", ": ", "\"utf8\"", "\n    }\n    db = pymysql.connect(**kwargs)\n    cur = db.cursor()\n    sql1 = ", "\"select R400,R401 from four_ss_seven where id=1;\"", "\n    cur.execute(sql1)\n    a = []\n    ", "for", " row ", "in", " cur:\n        a.append(np.array(row))\n    arr1 = np.array(a).T\n    # ", "print", "(arr1)\n    # ", "print", "(arr1.shape)\n    sql2 = ", "\"SELECT R400,R401 FROM four_ss_seven ORDER BY id DESC LIMIT 1;\"", "\n    cur.execute(sql2)\n    b = []\n    ", "for", " row ", "in", " cur:\n        b.append(np.array(row))\n    arr2 = np.array(b).T\n    # ", "print", "(arr2)\n    # ", "print", "(arr2.shape)\n    com = np.array([arr1, arr2]).T\n    com1 = np.reshape(com, (601, 2))\n    # ", "print", "(com1)\n    # ", "print", "(com1.shape)\n    arr3 = np.arange(400, 1001)\n    mp.figure(figsize=(8, 6), ", "dpi", "=100)\n    mp.plot(arr3, com1, ", "linestyle", "=", "'-'", ")\n    mp.xlabel(", "s", "=", "'wavelength'", ", ", "fontsize", "=18)\n    mp.ylabel(", "s", "=", "'reflectance'", ", ", "fontsize", "=18)\n    mp.title(", "s", "=", "'spectral reflectance curve'", ", ", "fontsize", "=25)\n    mp.savefig(", "'./static/img/1.png'", ")\n    return render_template(", "\"sd_seven_fig1.html\"", ")\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的矩阵是numpy 格式吧。用这个函数试试&amp;#xff1f;这个是我的例子&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;d1&amp;#61;np.array([[1,2,3,4,5,1],[1,2,3,4,5,2],[1,2,3,4,5,3],[1,2,3,4,5,4],[1,2,3,4,5,5],[1,2,3,4,5,6],[1,2,3,4,5,7],[1,2,3,4,5,8]])\nd2&amp;#61;np.array([[1,2,3,4,5,1],[1,2,3,4,5,2],[1,2,3,4,5,3]])\nprint(&amp;#34;原始&amp;#xff1a;&amp;#34;)\nprint(d1)\nprint(d2)\ndef reshape(d):\n    m,n&amp;#61;d.shape\n    if m&amp;gt;&amp;#61;5:\n        return d[0:5,:]\n    else:\n        return np.row_stack((d,[[0]*n]*(5-m)))\n        \nd1&amp;#61;reshape(d1)\nd2&amp;#61;reshape(d2)\nprint(&amp;#34;转换后&amp;#xff1a;&amp;#34;)\nprint(d1)\nprint(d2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"362\" src=\"https://img-ask.csdnimg.cn/upload/1610006356296.png\" width=\"230\" /&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["矩阵的维数问题（想统一不同市场音频mfcc的维数）。", ["\n", "def get_wav_mfcc(wav_path):#(wav_path)\n    y,sr = librosa.load(wav_path)\n    wav_feature = mfcc( y, sr, numcep=13, winlen=0.025, winstep=0.01,\n                       nfilt=26, nfft=1024, lowfreq=0, highfreq=None, preemph=0.97)\n    print(wav_feature.shape)\n 输出：由于自己音频有的市场不同，所以shape有（80，13）、（99，13）（122，13）等\n    total_mfcc = []\n    d_mfcc_feat = delta(wav_feature, 1)\n    print('一阶差分mfcc:', d_mfcc_feat.shape)\n 输出：shape同上：（80，13）、（99，13）（122 ，13）等\n    d_mfcc_feat2 = delta(wav_feature, 2)\n    print('二阶差分mfcc:', d_mfcc_feat2.shape)\n 输出：shape同上：（80，13）、（99，13）（122，13）等\n    feature = np.hstack((wav_feature, d_mfcc_feat, d_mfcc_feat2))\n    print(feature.shape)\n 输出：shape：（80，39）（99，39）（122，39）等\n    total_mfcc.extend(feature)\n    total_mfcc = np.array(total_mfcc)\n    print(total_mfcc)\n 输出：（80，39）（99，39）（122，39）等形式的矩阵\n\n最终想要实现，通过补0或者其他方式，使得输出的矩阵统一成（99，39），需要接下来加些什么代 码？？？？？？\n下面是本人代码，想补0，没有成功\n    data = list(np.array( total_mfcc))\n    print('list:',data)#根据整个输出\n    while len(data)>122:#修改此数值\n        del data[len(waveData[0])-1]\n        del data[0]\n    # print(len(data))\n    while len(data)<122:\n        data.append(0)\n    print('add0:',data)\n    data=np.array(data)\n    return data\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以参照以下代码&amp;#xff0c;&amp;#xff08;cmap参数: 为调整显示颜色  viridis是一种颜色组合&amp;#xff0c;加_r取反&amp;#xff09;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;    ax1.imshow(I1, &lt;span class=\"hljs-attribute\"&gt;cmap&lt;/span&gt;&amp;#61;plt.cm.viridis_r)\n    ax2.imshow(I2, &lt;span class=\"hljs-attribute\"&gt;cmap&lt;/span&gt;&amp;#61;plt.cm.viridis_r)\n    ax3.imshow(I3, &lt;span class=\"hljs-attribute\"&gt;cmap&lt;/span&gt;&amp;#61;plt.cm.viridis_r)\n    ax4.imshow(I4, &lt;span class=\"hljs-attribute\"&gt;cmap&lt;/span&gt;&amp;#61;plt.cm.viridis_r)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["这个matplotlib图表，能不能把这个螺旋的颜色换一下（就是亮的地方变成暗的，暗的地方变成亮的）", ["看看这个图片，我们来看第一个螺旋，中心是紫的，如何把它变成黄的，并且其他螺旋的颜色都把它们颠倒一下。", "这是我的代码", "\n", "\n", "import", " math as m\n", "import", " numpy as np \n", "import", " matplotlib.pyplot as plt \n\ndef intensity(x, y, ", "R=1.343,", " ", "lamd=589.3e-9,", " ", "Delta_d=0):", "\n    ", "r2", " = x**", "2", " + y**", "2", "\n    ", "theta", " = m.pi*r2/(R*lamd) + (", "2", "*m.pi*Delta_d)/lamd\n    l, ", "c", " = np.shape(theta)\n    ", "i", " = np.zeros((l, c))\n    ", "i", " = np.array([[m.sin(theta[i, j]) for j ", "in", " range(c)] for i ", "in", " range(l)])\n    print('", "1", "',i,type(i))\n    return i\n\ndef CalculateI(width, N):\n    ", "x", " = np.linspace(-width, width, N)\n    ", "y", " = np.linspace(-width, width, N)\n    [X, Y] = np.meshgrid(x, y)\n    ", "I", " = intensity(-X, -Y)\n    print('", "2", "',I,type(I))\n    return I \n\ndef MakePlot():\n    ", "# 建立子图", "\n    ", "fig", " = plt.figure()\n    ", "ax1", " = fig.add_subplot(", "221", ")\n    ", "ax2", " = fig.add_subplot(", "222", ")\n    ", "ax3", " = fig.add_subplot(", "223", ")\n    ", "ax4", " = fig.add_subplot(", "224", ")\n\n    ", "# 计算四种环的光强分布", "\n    ", "I1", " = CalculateI(", "0.004", ", ", "1000", ")\n    ", "I2", " = CalculateI(", "0.003", ", ", "1000", ")\n    ", "I3", " = CalculateI(", "0.002", ", ", "1000", ")\n    ", "I4", " = CalculateI(", "0.001", ", ", "1000", ")\n    ", "#print(I1,I2,I3,I4)", "\n\n    ", "# 作图", "\n    ax1.imshow(I1)\n    ax2.imshow(I2)\n    ax3.imshow(I3)\n    ax4.imshow(I4)\n    plt.show()\n\nMakePlot()\n\n\n", "\n", "能帮我改一下吗，谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;以下答案引用自GPT-3大模型,请合理使用&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; cv2\n&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n \n&lt;span class=\"hljs-attribute\"&gt;img&lt;/span&gt; &amp;#61; np.zeros([&lt;span class=\"hljs-number\"&gt;580&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;],np.uint8)\n&lt;span class=\"hljs-attribute\"&gt;x&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;150&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;while&lt;/span&gt; True:\n    &lt;span class=\"hljs-attribute\"&gt;cv2&lt;/span&gt;.rectangle(img,(&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;&amp;#43;x,&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;),(&lt;span class=\"hljs-number\"&gt;350&lt;/span&gt;&amp;#43;x,&lt;span class=\"hljs-number\"&gt;300&lt;/span&gt;),(&lt;span class=\"hljs-number\"&gt;255&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;),&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n    &lt;span class=\"hljs-attribute\"&gt;cv2&lt;/span&gt;.rectangle(img,(&lt;span class=\"hljs-number\"&gt;150&lt;/span&gt;&amp;#43;x,&lt;span class=\"hljs-number\"&gt;150&lt;/span&gt;),(&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;&amp;#43;x,&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;),(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;255&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;),&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n    &lt;span class=\"hljs-attribute\"&gt;cv2&lt;/span&gt;.imshow(&amp;#39;img&amp;#39;, img)\n    &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; (cv2.waitKey(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)&amp;#61;&amp;#61;ord(&amp;#39;q&amp;#39;)): break\n    &lt;span class=\"hljs-attribute\"&gt;x&lt;/span&gt;&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;     #循环移动步长&amp;#xff0c;可以调节\n    &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; (x&amp;gt;&lt;span class=\"hljs-number\"&gt;350&lt;/span&gt;): x&amp;#61;&lt;span class=\"hljs-number\"&gt;150&lt;/span&gt;  #控制矩形框在显示区域中不间断移动\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果我的回答解决了您的问题&amp;#xff0c;请采纳我的回答&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["opencv图形移动", ["条件：实现绿色矩形框从界面最左端移动到最右端，循环不间断移动，基础代码不能大改", "\n", "\n", "import", " cv2\n", "import", " numpy as np\n\n", "img", "=np.zeros([", "580", ",", "500", ",", "3", "],np.uint8)\n\n", "cv2", ".rectangle(img,(", "200", ",", "200", "),(", "350", ",", "300", "),(", "255", ",", "0", ",", "0", "),", "2", ")\n", "cv2", ".rectangle(img,(", "150", ",", "150", "),(", "200", ",", "200", "),(", "0", ",", "255", ",", "0", "),", "2", ")\n\n\n\n\n", "cv2", ".imshow('img',img)\n", "cv2", ".waitKey(", "0", ")\n", "cv2", ".destroyAllWindows()\n", "\n", "\n", "\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;逐行解释一下是干什么的。&lt;/p&gt;\n\n&lt;p&gt;def intersectionAndUnion(imPred, imLab, numClass):&lt;/p&gt;\n\n&lt;p&gt;定义一个计算交集和并集的函数&amp;#xff0c;这里的交集和并集是针对每个类别而言的。&lt;/p&gt;\n\n&lt;p&gt;imPred &amp;#61; np.asarray(imPred).copy()&lt;/p&gt;\n\n&lt;p&gt;复制一个预测值的拷贝副本。&lt;/p&gt;\n\n&lt;p&gt;imLab &amp;#61; np.asarray(imLab).copy()&lt;/p&gt;\n\n&lt;p&gt;复制一个真实值的拷贝副本。&lt;br /&gt;\n&lt;br /&gt;\n &lt;/p&gt;\n\n&lt;p&gt;# 开始&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;\n\n&lt;p&gt;imPred &amp;#61; imPred * (imLab &amp;gt; 0)&lt;/p&gt;\n\n&lt;p&gt;imLab&amp;gt;0返回一个bool类型的矩阵变量&amp;#xff0c;然后与imPred进行逐个元素乘积的运算。&lt;br /&gt;\n由于是逐个元素进行的乘积运算&amp;#xff0c;bool值为真的地方&amp;#xff0c;Pred的数值被保留&amp;#xff1b;为假的地方&amp;#xff0c;Pred位置被置零。&lt;br /&gt;\n也就是说&amp;#xff0c;只保留imPred中&amp;#xff0c;与imLab&amp;gt;0处于同一位置的元素。&lt;/p&gt;\n\n&lt;p&gt;intersection &amp;#61; imPred * (imPred &amp;#61;&amp;#61; imLab)&lt;/p&gt;\n\n&lt;p&gt;imPred&amp;#61;&amp;#61;imLab同样也是返回bool类型的矩阵变量&amp;#xff0c;然后做逐元素的乘法运算。&lt;br /&gt;\n这里intersection是保留了imPred预测值中&amp;#xff0c;那些预测值与真实值相同的矩阵&amp;#xff0c;对应位置的元素。&lt;br /&gt;\n &lt;/p&gt;\n\n&lt;p&gt;(area_intersection, _) &amp;#61; np.histogram(intersection, bins&amp;#61;numClass, range&amp;#61;(1, numClass))&lt;/p&gt;\n\n&lt;p&gt;直方图运算&amp;#xff0c;注意bins&amp;#61;numClass&amp;#xff0c;将数据分为了class类别&amp;#xff0c;实际上就是对每个类别元素进行了一个统计&amp;#xff0c;计算每一个类别的元素&amp;#xff0c;被正确分类的有多少个。&lt;/p&gt;\n\n&lt;p&gt;area_intersection是一个行向量&amp;#xff0c;长度与类别的数目相等&amp;#xff0c;每个元素的数值是对应类别被正确分类的个数。&lt;/p&gt;\n\n&lt;p&gt;(area_pred, _) &amp;#61; np.histogram(imPred, bins&amp;#61;numClass, range&amp;#61;(1, numClass))&lt;/p&gt;\n\n&lt;p&gt;同理&amp;#xff0c;直方图运算&amp;#xff0c;统计的是每个类别&amp;#xff0c;被预测得到的数目。&lt;/p&gt;\n\n&lt;p&gt;(area_lab, _) &amp;#61; np.histogram(imLab, bins&amp;#61;numClass, range&amp;#61;(1, numClass))&lt;/p&gt;\n\n&lt;p&gt;直方图运算&amp;#xff0c;统计的是每个类别&amp;#xff0c;真实值所对应的数目。&lt;/p&gt;\n\n&lt;p&gt;# 结束&lt;/p&gt;\n\n&lt;p&gt;&lt;br /&gt;\n&lt;br /&gt;\n &lt;/p&gt;\n\n&lt;p&gt;area_union &amp;#61; area_pred &amp;#43; area_lab - area_intersection&lt;/p&gt;\n\n&lt;p&gt;这里就是一个并集运算了&amp;#xff0c;A并B&amp;#61;A&amp;#43;B-A交B。&lt;/p&gt;\n\n&lt;p&gt;return (area_intersection, area_union)&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["计算语义分割结果IoU的函数，有几行不太理解，求解释", ["Github上的代码，作用是求语义分割结果的IoU，和IoU计算公式对比着看了实在不懂，请逐行解释开始结束注释之间的语句，谢谢", "\n\n", "\n", "def intersectionAndUnion(imPred, imLab, numClass):\n    imPred = np.asarray(imPred).copy()\n    imLab = np.asarray(imLab).copy()\n\n# 开始\n    imPred = imPred * (imLab > 0)\n\n    intersection = imPred * (imPred == imLab)\n\n    (area_intersection, _) = np.histogram(intersection, bins=numClass, range=(1, numClass))\n    (area_pred, _) = np.histogram(imPred, bins=numClass, range=(1, numClass))\n    (area_lab, _) = np.histogram(imLab, bins=numClass, range=(1, numClass))\n# 结束\n\n    area_union = area_pred + area_lab - area_intersection\n    return (area_intersection, area_union)"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码用控件提交&amp;#xff0c;你这代码乱的.&lt;br /&gt;这个报错你要检查下是不是你优化器中loss的问题&amp;#xff0c;你的数据标签是什么样子的&amp;#xff0c;直接类别id的话不能用CategoricalCrossentropy()&lt;br /&gt;换成SparseCategoricalCrossentropy()或者binary_crossentropy试试看&amp;#xff0c;如果你真的要用的话&amp;#xff0c;要对标签进行编码才行。至于两者的区别&amp;#xff0c;你可以看下链接&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/qq_40212975/article/details/108245786\" id=\"textarea_1649731234613_1649731246734_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/qq_40212975/article/details/108245786&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["tensorflow怎么解决这个问题，是什么问题，解决方法？", ["问题遇到的现象和发生背景 模型无法按照我想的运行，不知道是否是shape还是什么没搞好？", "\n", "问题相关代码，请勿粘贴截图", "\n", "from tensorflow.keras.applications.vgg16 import VGG16", "from tensorflow.keras.models import Sequential", "from tensorflow.keras.layers import Conv2D,MaxPool2D,Activation,Dropout,Flatten,Dense", "from tensorflow.keras.optimizers import SGD", "from tensorflow.keras.preprocessing.image import ImageDataGenerator,img_to_array,load_img", "import numpy as np", "import tensorflow as tf", "import pathlib", "data_dir = tf.keras.utils.get_file(origin='", "https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz'", ",", "                                         fname='flower_photos', untar=True)", "data_root = pathlib.Path(data_dir)", "print(data_root)", "import random", "all_image_paths=list(data_root.glob('", "/", "'))", "all_image_paths=[str(path) for path in all_image_paths]", "random.shuffle(all_image_paths)", "print(len(all_image_paths))", "label_names = sorted(item.name for item in data_root.glob('*/') if item.is_dir())#读取目录并排序为类别名", "label_to_index = dict((name, index) for index, name in enumerate(label_names))#创建类别字典", "all_image_labels = [label_to_index[pathlib.Path(path).parent.name]", "                    for path in all_image_paths] #图像parent path 对应类", "@tf.function", "def preprocess_image(path):", "    image_size=224", "    image = tf.io.read_file(path)", "    image = tf.image.decode_jpeg(image, channels=3)", "    image = tf.image.resize(image, [image_size, image_size])", "\n", "# 数据增强", "\n", "\n", "x=tf.image.random_brightness(x, 1)#亮度调整", "\n", "x = tf.image.random_flip_up_down(x) #上下颠倒", "\n", "x= tf.image.random_flip_left_right(x) # 左右镜像", "\n", "x = tf.image.random_crop(x, [image_size, image_size, 3]) # 随机裁剪", "\n", "image", " /= ", "255", ".", "0", "  # normalize to", " [0,1] range", "\n", "\n", "image= normalize(image) # 标准化", "\n", "return", " image\n", "\n", "ds = tf.data.Dataset.from_tensor_slices((all_image_paths, all_image_labels))", "def load_and_preprocess_from_path_label(path, label):", "    return preprocess_image(path), label", "\n", "image_label_ds = ds.map(load_and_preprocess_from_path_label)", "image_label_ds", "AUTOTUNE = tf.data.experimental.AUTOTUNE", "BATCH_SIZE = 16", "image_count = len(all_image_paths)", "\n", "设置一个和数据集大小一致的 shuffle buffer size（随机缓冲区大小）以保证数据", "\n", "被充分打乱。", "\n", "ds = image_label_ds.shuffle(buffer_size=image_count) # buffer_size等于数据集大小确保充分打乱", "ds = ds.repeat() #repeat 适用于next(iter(ds))", "ds = ds.batch(BATCH_SIZE)", "\n", "当模型在训练的时候，", "prefetch", " 使数据集在后台取得 batch。", "\n", "ds = ds.prefetch(buffer_size=AUTOTUNE)#随机缓冲区相关", "vgg16_model = VGG16(weights='imagenet',include_top=False, input_shape=(224,224,3))", "vgg16_model.summary()", "\n", "搭建全连接层", "\n", "top_model = Sequential()", "top_model.add(Flatten(input_shape=vgg16_model.output_shape[1:]))", "top_model.add(Dense(256,activation='relu'))", "top_model.add(Dropout(0.5))", "top_model.add(Dense(5,activation='softmax'))", "\n", "model = Sequential()", "model.add(vgg16_model)", "model.add(top_model)", "def change_range(image,label):", "  return 2*image-1, label", "keras_ds = ds.map(change_range)", "\n", "数据集可能需要几秒来启动，因为要填满其随机缓冲区。", "\n", "image_batch, label_batch = next(iter(keras_ds))", "feature_map_batch = vgg16_model(image_batch)", "print(feature_map_batch.shape)", "\n", "定义优化器，代价函数，训练过程中计算准确率", "\n", "model.compile(optimizer=SGD(lr=1e-3,momentum=0.9),loss='categorical_crossentropy',metrics=['accuracy'])", "\n", "model.fit(ds, epochs=1, steps_per_epoch=3)", "\n", "运行结果及报错内容", "\n", "model.compile(optimizer=SGD(lr=1e-3,momentum=0.9),loss='categorical_crossentropy',metrics=['accuracy'])", "\n", "model.fit(ds, epochs=1, steps_per_epoch=3)", "    ValueError: Shapes (None, 1) and (None, 5) are incompatible", "\n", "我的解答思路和尝试过的方法 将全连接层改了", "\n", "top_model.add(Dense(5,activation='softmax'))改成top_model.add(Dense(1,activation='softmax'))", "可以运行- 8s 347ms/step - loss: 0.0000e+00 - accuracy: 0.2083", "<keras.callbacks.History at 0x209a21a4c18>", "但我想要输出5个分类", "\n", "我想要达到的结果可以对图片进行预测输出5个类别中的一个，就是全连接层输出为5个分类可以运行，可以预测，可以输出准确率，召回率，损失率三率"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你用np.isnan(y_train).all()检查一下&amp;#xff0c;看是否有空值&amp;#xff0c;再作处理。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["valueerror: input contains nan, infinity", ["数据没有空值，不过用np.isfinite(y_train).all()和np.isinf(y_train).all()对训练集标签进行检测，两个函数检测出来都是False，想问下这是什么情况"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;感觉是len(train_data) // batch_size&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Tensorflow相关问题", ["我的代码如下所示：", "\n", "import tensorflow as tf\nimport numpy as np\nimport cv2\nimport os\n\n", "#全局变量", "\nclasses = {", "'grass'", ":0,", "'soldiers'", ":1}#数据分类\n", "path_grass", "=", "'D:/AIR_space/data/grass'", " #草丛图片路径\n", "path_soldiers", "=", "'D:/AIR_space/data/soldiers'", " #士兵图片路径\npicture=[] #存放图片\nlabels=[] #存放标签\n", "files_grass", "=os.listdir(path_grass)\n", "files_soldiers", "=os.listdir(path_soldiers)\n\n", "#读取图片数据并且将其存入到图片和标签变量中", "\ndef read_image(path,files,shape=(32,32)):\n    ", "for", " f ", "in", " files:\n        ", "f_path", "=path+'/'+f\n        ", "img", "=cv2.imread(f_path)\n        ", "img", "=cv2.resize(img,shape)\n        ", "img", "=img.astype(np.float32)\n        picture.append(img)\n        ", "split_f", "=f.split('_')\n        ", "label_f", "=int(classes[split_f[0]])\n        labels.append(label_f)\n\n\n", "#建立dataset", "\ndef data_set(data,label):\n    ", "train_data", "=tf.data.Dataset.from_tensor_slices(data)\n    ", "train_labels", "=tf.data.Dataset.from_tensor_slices(label).map(lambda z: tf.one_hot(z,len(classes)))\n    ", "train_dataset", "=tf.data.Dataset.zip((train_data,train_labels)).shuffle(1000).repeat(10).batch(256)\n    return train_dataset\n\n", "#建立CNN模型", "\ndef build_model():\n    ", "model", "=tf.keras.Sequential()\n    #第一层卷积\n    model.", "add", "(tf.keras.layers.Conv2D(64,(3,3),", "padding", "=", "'same'", ",activation='relu',input_shape=(32,32,3)))\n    model.", "add", "(tf.keras.layers.MaxPooling2D(", "padding", "=", "'same'", "))\n    #第二层卷积\n    model.", "add", "(tf.keras.layers.Conv2D(128,(3,3),", "padding", "=", "'same'", ",activation='relu'))\n    model.", "add", "(tf.keras.layers.Conv2D(256,(3,3),", "padding", "=", "'same'", ",activation='relu'))\n    model.", "add", "(tf.keras.layers.MaxPooling2D(", "padding", "=", "'same'", "))\n    #全连接层\n    model.", "add", "(tf.keras.layers.Flatten())\n    model.", "add", "(tf.keras.layers.Dense(64,", "activation", "=", "'relu'", "))\n    model.", "add", "(tf.keras.layers.Dense(32,", "activation", "=", "'relu'", "))\n    model.", "add", "(tf.keras.layers.Dropout(0.3))\n    model.", "add", "(tf.keras.layers.Dense(2,", "activation", "=", "'softmax'", "))\n    return model\n\n\n", "#主函数部分", "\nread_image(path_grass,files_grass)\nread_image(path_soldiers,files_soldiers)\n", "train_data", "=data_set(picture,labels)\n", "print", "(train_data)\n", "model_cnn", "=build_model()\n", "#model_cnn.build(input_shape=[None,32,32,3])", "\nmodel_cnn.summary()\nmodel_cnn.compile(", "optimizer", "=tf.keras.optimizers.Adam(0.001),loss='binary_crossentropy',metrics=[", "'accuracy'", "])\nmodel_cnn.fit(train_data,", "batch_size", "=19,epochs=20)\n\n", "\n", "数据集是192张图片，小兵96张，对应soldiers,草丛96张，对应grass，然后我在训练的时候，发现输出如下图：", "\n", "我很不理解epoch下面那个x/8的那个8表示什么，哪里来的，看参考书说表示训练集数量，可我加载的数据集是192张，求解释那个8是怎么回事，如何修改，谢谢啦"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;类似于这样操作&amp;#xff0c;参考一下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; pandas as pd \n\n&lt;span class=\"hljs-attribute\"&gt;df&lt;/span&gt;&amp;#61;pd.DataFrame({&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;1&amp;#34;&lt;/span&gt;:[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;3524&lt;/span&gt;,-&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;3124&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;2257&lt;/span&gt;,-&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;1214&lt;/span&gt;],&lt;span class=\"hljs-string\"&gt;&amp;#34;2&amp;#34;&lt;/span&gt;:[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;6214&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;3217&lt;/span&gt;,-&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;2111&lt;/span&gt;,-&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;2389&lt;/span&gt;],&lt;span class=\"hljs-string\"&gt;&amp;#34;3&amp;#34;&lt;/span&gt;:[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;0124&lt;/span&gt;,-&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;01478&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;2013&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;1624&lt;/span&gt;],&lt;span class=\"hljs-string\"&gt;&amp;#34;4&amp;#34;&lt;/span&gt;:[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;3333&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;2222&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;1111&lt;/span&gt;,-&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;2131&lt;/span&gt;]},index&amp;#61;range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;))\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(df)\n&lt;span class=\"hljs-attribute\"&gt;df0&lt;/span&gt;&amp;#61;[]\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; x in df.index:\n    &lt;span class=\"hljs-attribute\"&gt;df0&lt;/span&gt;.append(df.loc[x,:])\n&lt;span class=\"hljs-attribute\"&gt;d&lt;/span&gt;&amp;#61;pd.concat(df0,keys&amp;#61;df.index)\n\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(d)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attribute\"&gt;1&lt;/span&gt;  &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;    &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;35240&lt;/span&gt;\n   &lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;    &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;62140&lt;/span&gt;\n   &lt;span class=\"hljs-attribute\"&gt;3&lt;/span&gt;    &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;01240&lt;/span&gt;\n   &lt;span class=\"hljs-attribute\"&gt;4&lt;/span&gt;    &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;33330&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;  &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;   -&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;31240&lt;/span&gt;\n   &lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;    &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;32170&lt;/span&gt;\n   &lt;span class=\"hljs-attribute\"&gt;3&lt;/span&gt;   -&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;01478&lt;/span&gt;\n   &lt;span class=\"hljs-attribute\"&gt;4&lt;/span&gt;    &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;22220&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;3&lt;/span&gt;  &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;    &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;22570&lt;/span&gt;\n   &lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;   -&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;21110&lt;/span&gt;\n   &lt;span class=\"hljs-attribute\"&gt;3&lt;/span&gt;    &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;20130&lt;/span&gt;\n   &lt;span class=\"hljs-attribute\"&gt;4&lt;/span&gt;    &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;11110&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;4&lt;/span&gt;  &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;   -&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;12140&lt;/span&gt;\n   &lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;   -&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;23890&lt;/span&gt;\n   &lt;span class=\"hljs-attribute\"&gt;3&lt;/span&gt;    &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;16240&lt;/span&gt;\n   &lt;span class=\"hljs-attribute\"&gt;4&lt;/span&gt;   -&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;21310&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["输出的相关矩阵转换为一列", ["我的问题很简单 就是如何将输出的相关矩阵", "\n", " 变成下列形式", "\n", "\n", "代码附上 求修改", "import numpy as np", "import pandas as pd", "df = pd.read_csv(r'C:\\Users\\wxy\\Desktop\\re\\444.csv')", "a=df.corr()", "print(a)"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;建议百度查看下pandas的read_csv()函数参数的意思就知道了。&lt;br /&gt;前面的是路径&amp;#xff0c;后面的index_col是将原来的列名设置为&amp;#34;ssn&amp;#34;&lt;br /&gt;至于coding换成点不行&amp;#xff0c;那就是路径不对&amp;#xff0c;这个涉及到相对路径&amp;#xff0c;也就是相对于你运行目前代码的py文件所在的路径&amp;#xff0c;习题那么写2的话&amp;#xff0c;py文件就是datasets这个文件夹同一级&amp;#xff0c;而你这么写你是在coding这个文件夹同一级&amp;#xff0c;你的coding下面一级才是datasets。如果你搞不懂就设置绝对路径&amp;#xff0c;也就是从盘符开始写起&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["jupyter notebook  AI人工智能数据预处理中 数据脱敏 碰到的问题", ["import numpy as np\nimport pandas as pd \nimport datetime\ndfraw=pd", ".read_csv", "(", "'coding/datasets/contacts.csv'", ",index_col=", "'ssn'", ")\ndfraw", ".head", "()\n\ndf", "[", "'ssn'", "]", "=dfraw", "[", "'ssn'", "]", ".apply", "(\n    lambda ssn:ssn", "[:6]", " + ", "'*'", "*", "8", " + ssn", "[14:]", ")\ndf", ".head", "()\n", "\n", "然后会提示出错KeyError: 'ssn'", "这是为什么呢？", "还有我想知道路径('coding/datasets/contacts.csv',index_col='ssn')代表了什么含义？ 为什么把coding换成 . 不可以。因为习题里面原路径是('./datasets/contacts.csv',index_col='ssn')，但是会报错"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你直说了剩一个数字的情况&amp;#xff0c;如果剩余两个或多个数字呢&amp;#xff1f;想要怎么排列&amp;#xff1f;排列几行&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python生成一个想要的矩阵array", ["问题遇到的现象和发生背景", "\n", "我有N个数字和K个组，我想把这N个数字随机分配到每个K组内，形成一个[K * N/K]的矩阵array。比如我有1000个数字我想将这1000个数字随机并均匀的分配到20个组内，组成一个20*50的矩阵数组。", "\n", "但是问题是N不能经常被N整除，比如我有27个N和13个K组，27就除不开13余1，余下了1个数字无法被分配。我想把这1个数组也成为一行array，做成一个3*13的矩阵，但是最后一行只包含这1个被剩下的数。", "\n", "没太多头绪，所以请求一个好的思路达到这个结果。十分感谢", "\n", "\n", "new", "_N", " = np.arange(N)\nnp.random.shuffle(", "new", "_N", ")\n", "return", " ", "new", "_N", ".reshape((K, int(N/K))).\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;建议你把报错提示 以文本的形式复制出来大家解答&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["使用pyqtgraph无法在子窗口和父窗口都绘制3D图", ["在使用pyqt5和pyqtgraph绘制3D散点图的时候，我设置了两个窗口，实现在父窗口中根据读取文件绘制了3D图，在父窗口中成功启动子窗口。但是，当我想在子窗口中根据父窗口中读取的文件绘制3D图时报错。即，父窗口中绘制了3D图，子窗口报错；子窗口绘制了3D图，父窗口报错。", "部分代码：", "\n", "\n", "class MainWindow(QtWidgets.QMainWindow,Ui_zhibeichuli):#主界面", "\n", "def", " ", "__init__", "(", "self,parent=", "None", "):\n    ", "super", "(MainWindow,self).__init__(parent)\n    self.setupUi(self)\n    ", "'''定义信号槽'''", "\n\n    self.actionfile_PcdLas_open.triggered.connect(self.open_file_pointCloud_pcd_las)\n    ", "#self.action_exit.triggered.connect(MainWindow.close)", "\n\n    self.action_save.triggered.connect(self.save_point_cloud)\n    self.action_slope_chuli.triggered.connect(self.open_son_slope)\n    ", "'''初始化显示布局'''", "\n    self.pointView = GLViewWidget()\n    self.gridLayout.addWidget(self.pointView, ", "0", ", ", "1", ")\n    self.grid_item = gl.GLGridItem(QVector3D(", "100", ", ", "100", ", ", "1", "))", "#生成网格", "\n    self.pointView.addItem(self.grid_item)\n    ", "'''初始三维坐标'''", "\n    self.x_axis_item = gl.GLLinePlotItem(pos=np.array([[", "0", ", ", "0", ", ", "0", "], [", "10", ", ", "0", ", ", "0", "]], dtype=np.float32),\n                                         color=(", "1", ", ", "0", ", ", "0", ", ", "1", "),\n                                         width=", "2", ")\n    self.pointView.addItem(self.x_axis_item)\n    self.y_axis_item = gl.GLLinePlotItem(pos=np.array([[", "0", ", ", "0", ", ", "0", "], [", "0", ", ", "10", ", ", "0", "]], dtype=np.float32),\n                                         color=(", "0", ", ", "1", ", ", "0", ", ", "1", "),\n                                         width=", "2", ")\n    self.pointView.addItem(self.y_axis_item)\n    self.z_axis_item = gl.GLLinePlotItem(pos=np.array([[", "0", ", ", "0", ", ", "0", "], [", "0", ", ", "0", ", ", "10", "]], dtype=np.float32),\n                                         color=(", "0", ", ", "0", ", ", "1", ", ", "1", "),\n                                         width=", "2", ")\n    self.pointView.addItem(self.z_axis_item)\n", "\n", "打开文件部分（父窗口）：", "'''槽函数，打开点云文件，*.pcd *.las'''", "    def open_file_pointCloud_pcd_las(self):", "        global slope_pos_pcd_las#存储xyz坐标", "\n", "    ", "from", " PyQt5.QtWidgets ", "import", " QFileDialog\n    ", "dir", "=QFileDialog()", "#创建文件对话框", "\n    ", "dir", ".setFileMode(QFileDialog.ExistingFiles)", "#设置多选", "\n    ", "#设置只显示的文件类型", "\n    ", "dir", ".setNameFilter(", "'点云文件(*.pcd *.las)'", ")\n\n    ", "if", " ", "dir", ".exec_():", "#判断是否选择了文件", "\n\n        (raod_pcd_las_name, extension) = os.path.splitext(", "dir", ".selectedFiles()[", "0", "])", "#获取文件后缀", "\n        ", "if", " extension==", "'.pcd'", ":\n            pcd = o3d.io.read_point_cloud(", "dir", ".selectedFiles()[", "0", "])", "#根据文件地址读取文件", "\n            xyz_pcd = np.array(pcd.points)", "#转为np数组", "\n            ", "#Point_Cloud_chuli().show_point_before(xyz_pcd)#显示pcd", "\n            slope_pos_pcd_las=xyz_pcd", "#全局变量存储，用于坡度处理调用", "\n            self.pointView.clear()", "#清除布局", "\n            ", "'''重新添加布局'''", "\n            self.pointView = GLViewWidget()\n            self.gridLayout.addWidget(self.pointView, ", "0", ", ", "1", ")\n            self.grid_item = gl.GLGridItem(QVector3D(", "100", ", ", "100", ", ", "1", "))\n            self.pointView.addItem(self.grid_item)\n            points = xyz_pcd\n            ", "'''用于点云的坐标变换'''", "\n            x_list = points[..., ", "0", "]\n            y_list = points[..., ", "1", "]\n            z_list = points[..., ", "2", "]\n            ", "# x, y, z = points[0, 0], points[0, 1], points[0, 2]", "\n            x, y, z = ", "min", "(x_list), ", "min", "(y_list), ", "min", "(z_list)\n            x_trans = x_list - x\n            y_trans = y_list - y\n            z_trans = z_list - z\n            n = ", "len", "(x_trans)\n            points_trans = np.zeros((n, ", "3", "))\n            points_trans[..., ", "0", "] = x_trans\n            points_trans[..., ", "1", "] = y_trans\n            points_trans[..., ", "2", "] = z_trans\n            ", "'''坐标轴xyz'''", "\n            self.x_axis_item = gl.GLLinePlotItem(pos=np.array([[", "0", ", ", "0", ", ", "0", "], [", "10", ", ", "0", ", ", "0", "]], dtype=np.float32),\n                                                 color=(", "1", ", ", "0", ", ", "0", ", ", "1", "),\n                                                 width=", "2", ")\n            self.pointView.addItem(self.x_axis_item)\n            self.y_axis_item = gl.GLLinePlotItem(pos=np.array([[", "0", ", ", "0", ", ", "0", "], [", "0", ", ", "10", ", ", "0", "]], dtype=np.float32),\n                                                 color=(", "0", ", ", "1", ", ", "0", ", ", "1", "),\n                                                 width=", "2", ")\n            self.pointView.addItem(self.y_axis_item)\n            self.z_axis_item = gl.GLLinePlotItem(pos=np.array([[", "0", ", ", "0", ", ", "0", "], [", "0", ", ", "0", ", ", "10", "]], dtype=np.float32),\n                                                 color=(", "0", ", ", "0", ", ", "1", ", ", "1", "),\n                                                 width=", "2", ")\n            self.pointView.addItem(self.z_axis_item)\n            ", "'''点云显示样式'''", "\n            colors = np.ones((n, ", "4", "))\n            size = np.zeros(shape=points.shape[", "0", "])\n            self.points_plot_item = gl.GLScatterPlotItem(pos=points_trans,\n                                                         color=colors,\n                                                         size=size,\n                                                         pxMode=", "False", ")\n            self.pointView.addItem(self.points_plot_item)\n", "\n", "打开子窗口：", "    def open_son_slope(self):", "\n", "    self.", "op", "=Son_slopeWindow()\n    self.", "op", ".", "show", "()\n", "\n", "子窗口：", "class Son_slopeWindow(QtWidgets.QMainWindow,Ui_slope_chuli):", "    def ", "init", "(self):", "        super(Son_slopeWindow,self).", "init", "()", "        self.setupUi(self)", "        self.pushButton.clicked.connect(self.slope_show)", "        '''----------'''", "        pcd = o3d.io.read_point_cloud(\"D:/desk/002.pcd\")", "\n", "    filtered_cloud = Point_Cloud_chuli().slope_chuli(pcd, ", "2", ", ", "0.5", ",", "1", ")\n\n    points = np.array(filtered_cloud.points)\n\n    ", "'''用于点云的坐标变换'''", "\n    x_list = points[..., ", "0", "]\n    y_list = points[..., ", "1", "]\n    z_list = points[..., ", "2", "]\n    ", "# x, y, z = points[0, 0], points[0, 1], points[0, 2]", "\n    x, y, z = ", "min", "(x_list), ", "min", "(y_list), ", "min", "(z_list)\n    x_trans = x_list - x\n    y_trans = y_list - y\n    z_trans = z_list - z\n    n = ", "len", "(x_trans)\n\n    points_trans = np.zeros((n, ", "3", "))\n    points_trans[..., ", "0", "] = x_trans\n    points_trans[..., ", "1", "] = y_trans\n    points_trans[..., ", "2", "] = z_trans\n\n    ", "'''--------'''", "\n\n    self.points_afterView=GLViewWidget()\n    self.gridLayout_2.addWidget(self.points_afterView,", "0", ",", "1", ")\n\n    self.grid_ite=gl.GLGridItem(QVector3D(", "100", ",", "100", ",", "1", "))\n    self.points_afterView.addItem(self.grid_ite)\n\n    self.x_axis=gl.GLLinePlotItem(pos=np.array([[", "0", ",", "0", ",", "0", "],[", "10", ",", "0", ",", "0", "]]),\n                                  color=(", "1", ",", "0", ",", "0", ",", "1", "),\n                                  width=", "2", ")\n    self.points_afterView.addItem(self.x_axis)\n    self.y_axis = gl.GLLinePlotItem(pos=np.array([[", "0", ", ", "0", ", ", "0", "], [", "0", ", ", "10", ", ", "0", "]]),\n                                    color=(", "0", ", ", "1", ", ", "0", ", ", "1", "),\n                                    width=", "2", ")\n    self.points_afterView.addItem(self.y_axis)\n    self.z_axis = gl.GLLinePlotItem(pos=np.array([[", "0", ", ", "0", ", ", "0", "], [", "0", ", ", "0", ", ", "10", "]]),\n                                    color=(", "0", ", ", "0", ", ", "1", ", ", "1", "),\n                                    width=", "2", ")\n    self.points_afterView.addItem(self.z_axis)\n    ", "'''-----'''", "\n    colors = np.ones((n, ", "4", "))\n    size = np.zeros(n)\n\n    self.points_plot_after = gl.GLScatterPlotItem(pos=points_trans,\n                                                  color=colors,\n                                                  size=size,\n                                                  pxMode=", "False", ")\n    self.points_afterView.addItem(self.points_plot_after)\n", "\n", "报错类型：", "\n", "\n", "可以说明的是，文件及处理后的文件的数据没问题。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;看着是1.wav 的原文件被损坏了&amp;#xff0c;换个文件试试&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["求各位解答一下，没有动过包，之前还可以运行，后面打开就不能运行了", ["目的是提取语音文件，并且画图", "代码如下：", "\n", "import wave\nimport numpy ", "as", " np\n", "from", " matplotlib import pyplot ", "as", " plt\n\npath = ", "\"E:/voice/1.wav\"", "\nf = wave.", "open", "(path, ", "\"rb\"", ")  ", "# 打开需要处理的内容", "\n", "params", " = f.getparams()\nnchannels, sampwidth, framerate, nframes = ", "params", "[:", "4", "]\nstr_data = f.readframes(nframes)\nwave_data = np.frombuffer(str_data, dtype=np.", "short", ")\nprint(", "len", "(wave_data))\nprint(wave_data)\nprint(", "\"len of wave_data:\"", ", ", "len", "(wave_data))\nf.", "close", "()\n", "time", " = np.arange(", "0", ", nframes) * (", "1.0", " / framerate)\nprint(", "len", "(", "time", "))\nplt.plot(", "time", ", wave_data, ", "\"r-\"", ")\nplt.xlabel(", "'Time/s'", ")\nplt.ylabel(", "'Ampltitude'", ")\nplt.title(", "'waveform of voice'", ")\nplt.show()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;建议使用代码插入功能重新写一遍问题&amp;#xff0c;markdown会吞格式&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["大lao，这个为啥出不来图像啊#python", ["import pyaudio", "import struct", "import numpy as np", "import matplotlib.pyplot as plt", "CHUNK = 1024 * 4", "FORMAT = pyaudio.paInt16", "CHANNELS = 1", "RATE = 44100", "p = pyaudio.PyAudio()", "stream = p.open(", "    format=FORMAT,", "    channels=CHANNELS,", "    rate=RATE,", "    input=True,", "    output=True,", "    frames_per_buffer=CHUNK", ")", "\n", "fig, ax = plt.subplots()", "\n", "x = np.arange(0, 2 * CHUNK, 2)", "line, = ax.plot(x, np.random.rand(CHUNK))", "ax.set_ylim(0, 255)", "ax.set_xlim(0, CHUNK)", "\n", "while True:", "    data = stream.read(CHUNK)", "    data_int = np.array(struct.unpack(str(2 * CHUNK) + 'B', data), dtype='b')[::2] + 127", "    line.set_ydata(data_int)", "    fig.canvas.draw()", "    fig.canvas.flush_events()"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不知道下面代码能否满足你的要求&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;import numpy as np\n&lt;span class=\"hljs-title\"&gt;data&lt;/span&gt; &amp;#61; np.array([[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;],[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;20000&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;],[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;]])\n&lt;span class=\"hljs-comment\"&gt;# 以列为基础求每一列的均值与标准差&lt;/span&gt;\nmean_value &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;mean&lt;/span&gt;(&lt;span class=\"hljs-title\"&gt;data&lt;/span&gt;, axis&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\nstd_value &amp;#61; np.std(&lt;span class=\"hljs-title\"&gt;data&lt;/span&gt;, axis&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n\n&lt;span class=\"hljs-built_in\"&gt;floor&lt;/span&gt; &amp;#61; mean_value - &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;*std_value\nupper &amp;#61; mean_value &amp;#43; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;*std_value\n\ncolumns &amp;#61; &lt;span class=\"hljs-title\"&gt;data&lt;/span&gt;.shape[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n&lt;span class=\"hljs-built_in\"&gt;rows&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-title\"&gt;data&lt;/span&gt;.shape[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n&lt;span class=\"hljs-comment\"&gt;# 遍历每一列&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;col&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(columns):\n    column &amp;#61; &lt;span class=\"hljs-title\"&gt;data&lt;/span&gt;[:,&lt;span class=\"hljs-built_in\"&gt;col&lt;/span&gt;]\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;row&lt;/span&gt;, val &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; enumerate(column):\n        &lt;span class=\"hljs-comment\"&gt;# 用该列均值替换异常值&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; val &amp;lt; &lt;span class=\"hljs-built_in\"&gt;floor&lt;/span&gt;[&lt;span class=\"hljs-built_in\"&gt;col&lt;/span&gt;] or val &amp;gt; upper[&lt;span class=\"hljs-built_in\"&gt;col&lt;/span&gt;]:\n            &lt;span class=\"hljs-title\"&gt;data&lt;/span&gt;[&lt;span class=\"hljs-built_in\"&gt;row&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;col&lt;/span&gt;] &amp;#61; mean_value[&lt;span class=\"hljs-built_in\"&gt;col&lt;/span&gt;]\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-title\"&gt;data&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["二维数组异常值替换均值", ["问题遇到的现象和发生背景", "\n", "在写二维数组异常值替换代码中，遇到一个问题，如何将数组中的异常值使用该列的均值进行替换，需要逐列进行。异常值判断已找到了解决办法。目前查阅文献资料，发现都是针对一维数组或list进行的操作，没有对二维数组的这类操作（异常值替换为均值）。", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "mean = np.mean(data_array, axis=1)", "std = np.std(data_array, axis=1)", "\n", "floor = mean - 3", "std", "upper = mean + 3", "std", "\n", "for i, val in enumerate(data_array):  #这个代码是对一维数组的操作，对二维数组如何修改？", "    data_array[i] = float(np.where(((val<floor)|(val>upper)), mean, val)) #这个代码是对一维数组的操作，对二维数组如何修改？", "\n", "运行结果及报错内容", "\n", "ValueError: operands could not be broadcast together with shapes (4,) (3,) ", "\n", "我的解答思路和尝试过的方法", "\n", "按列求均值和标准差，对异常值（偏离3倍标准差）使用该列均值替换。使用上述代码进行运算，但没有通过。", "\n", "我想要达到的结果", "\n", "修改优化代码或给出更好的解决方案，最终达到异常值由该列均值替代。代码要通用的。谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这道题是求给定函数的 &lt;strong&gt;傅里叶级数&lt;/strong&gt;&amp;#xff0c;其中采用 &lt;strong&gt;复化辛普森数值积分公式&lt;/strong&gt; 计算傅里叶系数。下面索性倒着往前解答。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;h2&gt;傅里叶级数&lt;/h2&gt;\n&lt;p&gt;记不住傅里叶级数也没关系&amp;#xff0c;随手搜一下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"center\" style=\"display:inline-block;\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/927737835136143.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&amp;#xff08;1&amp;#xff09;式对应最后一空&amp;#xff0c;只不过这题只需取前 &lt;em&gt;N&lt;/em&gt; 项&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;# Fourier series &lt;span class=\"hljs-built_in\"&gt;at&lt;/span&gt; order N (over &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; periods)\ntt &amp;#61; &lt;span class=\"hljs-built_in\"&gt;np&lt;/span&gt;.linspace(a-T,b&amp;#43;T,&lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;)\nff &amp;#61; &lt;span class=\"hljs-built_in\"&gt;np&lt;/span&gt;.ones(&lt;span class=\"hljs-built_in\"&gt;np&lt;/span&gt;.size(tt))\nff &amp;#61; an[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] * ff\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; k &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,N&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    ff &amp;#43;&amp;#61; an[k]*&lt;span class=\"hljs-built_in\"&gt;np&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;cos&lt;/span&gt;(k*w*tt) &amp;#43; bn[k]*&lt;span class=\"hljs-built_in\"&gt;np&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;sin&lt;/span&gt;(k*w*tt)   # &amp;lt;- 填空\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;继续往前&amp;#xff0c;我们需要求解傅里叶系数 &lt;em&gt;an&lt;/em&gt; 和 &lt;em&gt;bn&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"center\" style=\"display:inline-block;\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/99634093513616.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;以 &lt;em&gt;an&lt;/em&gt; &amp;#xff08;系数数组的第 &lt;strong&gt;n&lt;/strong&gt; 项&amp;#xff09;为例&amp;#xff0c;它是一个积分式&amp;#xff0c;被积函数 &lt;code class=\"language-javascript\"&gt;f(t) * cos(nwt)&lt;/code&gt;&amp;#xff0c;积分区间 [a, b]。结合题意&amp;#xff0c;采用辛普森方法进行数值积分&amp;#xff0c;也就是前面定义的 &lt;code class=\"language-javascript\"&gt;SimpsonMethodValues()&lt;/code&gt;函数。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-comment\"&gt;# Fourier coefficients an and bn :&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;an&lt;/span&gt; &amp;#61; np.zeros(N&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\nbn &amp;#61; np.zeros(N&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;an&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; SimpsonMethodValues(ft, &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;, b) / T\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; k &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,N&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    ft_cos &amp;#61; ft * np.&lt;span class=\"hljs-built_in\"&gt;cos&lt;/span&gt;(k*w*t)    &lt;span class=\"hljs-comment\"&gt;# &amp;lt;- 填空&lt;/span&gt;\n    ft_sin &amp;#61; ft * np.&lt;span class=\"hljs-built_in\"&gt;sin&lt;/span&gt;(k*w*t)      &lt;span class=\"hljs-comment\"&gt;# &amp;lt;- 填空&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;an&lt;/span&gt;[k] &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;/T * SimpsonMethodValues(ft_cos, &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;, b)  &lt;span class=\"hljs-comment\"&gt;# &amp;lt;- 填空&lt;/span&gt;\n    bn[k] &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;/T * SimpsonMethodValues(ft_sin, &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;, b)   &lt;span class=\"hljs-comment\"&gt;# &amp;lt;- 填空&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;复化辛普森数值积分公式&lt;/h2&gt;\n&lt;p&gt;自然地&amp;#xff0c;来到了辛普森数值积分函数的实现部分。辛普森方法是一种机械求积方式&amp;#xff0c;通过复化&amp;#xff08;细分&amp;#xff09;积分区间的方式提升精度&amp;#xff0c;具体参考百度百科的描述&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"center\" style=\"display:inline-block;\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/673989935136165.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;根据不同的表述方式&amp;#xff0c;上图表达式稍微有所差异&amp;#xff0c;但含义完全一致。注意这里采用的表述方式是&amp;#xff1a;分为 &lt;em&gt;2n&lt;/em&gt; 个子区间。于是&amp;#xff0c;参数 &lt;em&gt;fvalues&lt;/em&gt; 表示这 &lt;em&gt;2n&lt;/em&gt; 个子区间的共计 &lt;strong&gt;2n&amp;#43;1&lt;/strong&gt; 个端点&amp;#xff0c;也就是 &lt;code class=\"language-javascript\"&gt;N &amp;#61; 2n&amp;#43;1 &amp;#61; len(fvalues)&lt;/code&gt;&amp;#xff0c;即 &lt;code class=\"language-javascript\"&gt;n &amp;#61; (N-1)/2&lt;/code&gt;&amp;#xff0c;进而 &lt;code class=\"language-javascript\"&gt;h &amp;#61; (b-a)/h &amp;#61; 2(b-a)/(N-1)&lt;/code&gt;。&lt;/p&gt;\n&lt;p&gt;结合已知的代码和上图&amp;#xff0c;表达式右侧归纳为三部分&amp;#xff1a;&lt;/p&gt;\n&lt;ul&gt;&lt;li&gt;S&amp;#xff1a;  两个端点对应的函数值&lt;/li&gt;&lt;li&gt;S1&amp;#xff1a;端点除外的所有偶数编号子节点对应函数值&lt;/li&gt;&lt;li&gt;S2&amp;#xff1a;端点除外的所有奇数编号子节点对应函数值&lt;/li&gt;&lt;/ul&gt;\n&lt;p&gt;借助 Python 列表的切片表达式&amp;#xff0c;很容易写出留空的部分&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;SimpsonMethodValues&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;fvalues, a, b&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34; Simpson method for determining an approximation of\n    the integral of a function over the interval [a, b]\n    The function is known by its sampling &amp;#34;fvalues&amp;#34;\n    Input : fvalues &amp;#61; sampling of the function to be integrated (array)\n    : a,b &amp;#61; bounds of the interval\n    Output : S &amp;#61; Simpson approximation of the integral\n    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    N &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(fvalues)\n    h &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * (b-a) / (N-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    &lt;span class=\"hljs-comment\"&gt;# partial sum S1&lt;/span&gt;\n    S1 &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(fvalues[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:N-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])    &lt;span class=\"hljs-comment\"&gt;# &amp;lt;- 填空&lt;/span&gt;\n    S1 &amp;#61; S1 / &lt;span class=\"hljs-number\"&gt;3.&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# partial sum S2&lt;/span&gt;\n    S2 &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(fvalues[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:N-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])     &lt;span class=\"hljs-comment\"&gt;# &amp;lt;- 填空&lt;/span&gt;\n    S2 &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*S2 / &lt;span class=\"hljs-number\"&gt;3.&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# sum S&lt;/span&gt;\n    S &amp;#61; (fvalues[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#43; fvalues[-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]) / &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;   &lt;span class=\"hljs-comment\"&gt;# &amp;lt;- 填空&lt;/span&gt;\n    S &amp;#61; S &amp;#43; S1 &amp;#43; S2\n    S *&amp;#61; h\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; S\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;结果&lt;/h2&gt;\n&lt;p&gt;填完空了&amp;#xff0c;顺便跑一下结果吧。整个流程大意是用 &lt;em&gt;N&amp;#61;7&lt;/em&gt; 阶傅里叶级数来近似原函数&amp;#xff0c;然后在3个周期内画出对比图像。对了&amp;#xff0c;最后加一个 &lt;code class=\"language-javascript\"&gt;plt.show()&lt;/code&gt;才能显示结果。以最后一个&amp;#xff0c;[0, 1] 区间的平方根函数 &lt;code class=\"language-javascript\"&gt;f &amp;#61; √ x&lt;/code&gt; 为例&amp;#xff1a;&lt;/p&gt;\n&lt;ul&gt;&lt;li&gt;红线为原函数&lt;/li&gt;&lt;li&gt;蓝线为傅里叶级数近似曲线&lt;/li&gt;&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"canter\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/028053145136199.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何使用Python用辛普森方法确定一个函数在区间[a, b]上的积分的近似值", ["要求将代码的“-----”部分补充完整，救救孩子的作业吧啊啊啊啊", "以下为代码", "\n", "import numpy as np", "import matplotlib.pyplot as plt", "\n", "#####################################################", "\n", "FUNCTIONS", "\n", "#####################################################", "def SimpsonMethodValues(fvalues, a, b):", "    \"\"\" Simpson method for determining an approximation of", "        the integral of a function over the interval [a, b]", "        The function is known by its sampling \"fvalues\"", "        Input : fvalues = sampling of the function to be integrated (array)", "              : a,b = bounds of the interval", "        Output : S = Simpson approximation of the integral", "    \"\"\"", "    N = len(fvalues)", "    h = 2 * (b-a) / (N-1)", "    # partial sum S1", "    S1 = -----", "    S1 = S1 / 3.", "    # partial sum S2", "    S2 = -----", "    S2 = 2*S2 / 3.", "    # sum S", "    S = -----", "    S = S + S1 + S2", "    S *= h", "    return S", "\n", "functions to be approximated :", "\n", "def g0(x):", "    return np.ceil(x) # on ]-1,1]", "def g1(x):", "    return x", "def g2(x):", "    return x**2", "def g3(x):", "    return np.abs(x)", "def g4(x):", "    return np.sqrt(x)", "\n", "#####################################################", "\n", "MAIN", "\n", "#####################################################", "plt.cla()", "plt.grid()", "\n", "eps = 1e-10", "\n", "Choice of a function :", "\n", "f = g0; a =  -1+eps; b = 1;", "#f = g1; a =  0; b = 1;", "#f = g2; a = -1; b = 1;", "#f = g3; a = -1; b = 1;", "#f = g4; a = 0; b = 1;", "\n", "Period and pulsation", "\n", "T = b-a;", "w = 2*np.pi / T", "\n", "Plot of the function to be approximated :", "\n", "n = 8   # ==> 2^n+1 evaluation points (odd number of points)", "t = np.linspace(a,b,2**n + 1) # for graph plotting", "ft = f(t)", "plt.plot(t-T,ft,'r')", "plt.plot(t,  ft,'r')", "plt.plot(t+T,ft,'r')", "\n", "N = 7", "\n", "Fourier coefficients an and bn :", "\n", "an = np.zeros(N+1)", "bn = np.zeros(N+1)", "an[0] = SimpsonMethodValues(ft, a, b) / T", "for k in range(1,N+1):", "    -----", "    -----", "    -----", "    -----", "\n", "Fourier series at order N (over 3 periods)", "\n", "tt = np.linspace(a-T,b+T,500)", "ff = np.ones(np.size(tt))", "ff = an[0] * ff", "for k in range(1,N+1):", "    -----", "\n", "plt.plot(tt,ff)"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;u1 , b是啥呀&amp;#xff0c;只有u1&amp;#61;&amp;#61;max(b)成立才会进入到里面的&amp;#xff0c;而且max函数要传入至少俩参数&amp;#xff0c;才能实现大小比较的功能&lt;br /&gt;看看你的完整程序&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python输出的结果不对", ["您好，想请教一下下面这个问题", "for m in np.arange(0.1,1,0.01):", "if u1==max(b):", "                m1=m", "    print(m1)", "将m的值赋给m1，为啥输出的m1的值是0，m是从0.1开始呀？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;应该是这个吧&amp;#xff0c;你训练之后得到的模型是H&amp;#xff0c;prediction &amp;#61; H.predict(img)  &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["keras 二分类预测结果几乎全是一个值", ["程序是用来对蜜蜂(bee)和黄蜂(wasp)分类的，用的模型是在vgg16上拼接的，代码如下", "\n\n", "\n", "from keras.applications.vgg16 import VGG16\nfrom keras.layers import Dense, Flatten, Activation, Dropout\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\nimport keras\nimport shutil\nimport os\n\ndef creatDataGenerator(train_dir, test_dir):\n    train_data_generator = ImageDataGenerator(rescale=.1/255)\n    test_data_generator = ImageDataGenerator(rescale=.1/255)\n\n    train_generator = train_data_generator.flow_from_directory(train_dir,\n                                                            target_size=(150,150),\n                                                            batch_size=32,\n                                                            class_mode='binary')\n    test_generator = test_data_generator.flow_from_directory(test_dir,\n                                                            target_size=(150,150),\n                                                            batch_size=32,\n                                                            class_mode='binary')\n    return train_generator, test_generator\n\nvgg_model = VGG16(weights='imagenet', include_top=False, input_shape=(150,150,3))\n\ncla_model = Sequential()\ncla_model.add(Flatten())\ncla_model.add(Dense(512, activation='relu'))\ncla_model.add(Dropout(0.5))\ncla_model.add(Dense(1, activation='sigmoid'))\n\nmodel = Sequential()\nmodel.add(vgg_model)\nmodel.add(cla_model)\n\nmodel.compile(loss='binary_crossentropy', optimizer='RMSprop', metrics=['accuracy'])\n\ntrain_generator, test_generator = creatDataGenerator(train_dir=r'C:\\Users\\ayana\\.keras\\datasets\\bee-vs-wasp\\train',\n                                                    test_dir=r'C:\\Users\\ayana\\.keras\\datasets\\bee-vs-wasp\\test')\nH = model.fit(train_generator,\n              steps_per_epoch=50,\n              epochs=30,\n              validation_data=test_generator,\n              validation_steps=50)", "\n\n", "然后训练以后进行预测，选择的是黄蜂的10张图（蜜蜂预测出来也是同样的结果）", "\n\n", "顺便训练的准确率也比较低，不到0.6，也一直不知道怎么能高一些", "\n\n", "\n", "from keras.preprocessing.image import load_img, img_to_array\nimport numpy as np\n\ndef predict(i):\n    img_path = os.listdir(r'C:\\Users\\ayana\\.keras\\datasets\\bee-vs-wasp\\test\\wasp')[i]\n    img = load_img(path='C:\\\\Users\\\\ayana\\\\.keras\\\\datasets\\\\bee-vs-wasp\\\\test\\\\wasp\\\\'+img_path, \n                    target_size=(150,150))\n    img = np.expand_dims(img, axis=0)/255\n    prediction = model.predict(img)\n    return prediction\n\nfor i in range(10):\n    print(predict(i))\n\n#>>>[[0.4714901]]\n#    [[0.4714901]]\n#    [[0.4714901]]\n#    [[0.4714901]]\n#    [[0.4714901]]\n#    [[0.4714901]]\n#    [[0.4714901]]\n#    [[0.4714901]]\n#    [[0.4714901]]\n#    [[0.4714901]]", "\n\n", "再用np.argmax()的话就都是0了", "\n\n", "被困了一天了，#求救"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;data_origin[&amp;#39;q&amp;#39;]赋值语句后面不要用单引号&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python怎么把循环得到的列表写入dataframe", ["问题遇到的现象和发生背景", "\n", "通过循环得到p，q。结果截图里显示了尝试写入的结果，发现写入的是固定的值而不是每个p，q的值", "\n", "问题相关代码，请勿粘贴截图", "\n", "import numpy as np\nimport pandas as pd\ndata = pd.read_csv(", "\"C:/Users/DELL/Desktop/dt1.csv\"", ", ", "header", "=0, usecols=[", "'v'", "])\ndata = np.array(data)\n\nT=[] #定义为列表\n", "V", "=0   #初始成交量\n", "p", "=0\np=[]\nq=[]\n", "A", "=326881602  #每个交易篮子的交易量\n", "for", " i ", "in", " range(len(data)):\n    ", "V", "=V+data[i]   #迭代，成交量=上一时刻成交量+这一时刻的成交量\n    ", "k", "=np.ceil(V/A)  #对篮子数向上取整\n    T.append(k)\n    T[i]=k    #第i时刻所需要的篮子数\n    p.append(0)\n    p[i]=0\n    ", "if", " np.ceil(V/A)-V/", "A", "==0:  #篮子数为整数\n        p.append(1)\n        p[i]=1  # p[i]=1#如果篮子数为整数，那么下一时刻从新的交易篮子开始填充\n    q.append(T[i])\n    q[0]=[1,T[0]]  #第一个时刻对应的篮子编号\n", "for", " i ", "in", " range(len(data)):\n    ", "if", " i>=1:\n        q[i] = [T[i - 1] + p[i - 1], T[i]]\n\n", "print", "(T)\n", "print", "(p)\n", "print", "(q)\n", "print", "(type(p))\n", "print", "(type(q))\n\nfilepath = ", "'C:/Users/DELL/Desktop/dt1.csv'", "\ndataheader = [", "'date'", ",", "'time'", ",", "'v'", ",", "'p'", ",", "'vum'", "]\ndata_original = pd.read_csv(filepath, ", "sep", "=", "','", " ,", "header", "=0, ", "names", "=dataheader, ", "skip_blank_lines", "=", "True", ")\n", "print", "(data_original)\ndata_original[", "'e'", "]=", "'p'", "\ndata_original[", "'q'", "]=", "'[T[i - 1] + p[i -  1], T[i]]'", "\n", "print", "(data_original)\n", "\n", "运行结果及报错内容", "\n", "\n", "\n", "我想要达到的结果", "\n", "想把q这个list写进dataframe里应该怎么办"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;img&amp;#61;np.zeros((8,8),dtype&amp;#61;np.uint8)&lt;br /&gt;使用无符号的才是0-255&amp;#xff0c;你的int8取值是[-128,127]&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["为什么这个跑出来img[0,3]=-1,而且窗口上看不到白点", ["\nimport cv2\nimport numpy as np\nimg=np", ".zeros", "((", "8", ",", "8", "),dtype=np.int8)\n", "print", "(", "\"img=\\n\"", ",img)", "\ncv2", ".imshow", "(", "'one'", ",img)\n", "print", "(", "\"读取像素点img[0,3]=\"", ",img[", "0", ",", "3", "])", "\n", "img", "[0,3]", "=", "255", "\n", "print", "(", "\"修改后img=\\n\"", ",img)", "\n", "print", "(", "\"读取修改后的像素点img[0,3]=\"", ",img[", "0", ",", "3", "])", "\ncv2", ".imshow", "(", "\"two\"", ",img)\ncv2", ".waitKey", "()\ncv2", ".destroyAllWindows", "()\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不是bug&lt;br /&gt;atoms2 &amp;#61; atoms1&amp;#xff0c;166行&lt;br /&gt;这里两个变量指向了同一个地址&amp;#xff0c;所以他俩改一个另外一个也会改&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python对一个变量进行修改时，会同时对另外一个变量做同样的修改操作，是不是bug", ["下边是我的代码", "运行时，对变量atoms2进行赋值操作时，会同时修改atoms1的内容", "按理说不应该这样的啊，是我写的不对吗", "\n", "import numpy as np\nimport random\nimport math\nimport scipy.optimize as opt\n\n\n\ncount = ", "0", "\nre = ", "0.1564", "\nu_exp =  ", "3.07", "\na_f = ", "1.3", "\na_ca = ", "4.4", "\nx = []\nwrites = []\nresult = ", "''", "\n\n\ndef calc_x2(atoms):\n    x = ", "0", "\n    y = ", "0", "\n    z  = ", "0", "\n    a2d = ", "2.542", "  \n    b2a = ", "0.529177249", "\n\n    for atom in atoms:\n        x += (atom[", "'site'", "][", "0", "]/b2a )* atom[", "'q'", "]\n\n        y += (atom[", "'site'", "][", "1", "]/b2a )* atom[", "'q'", "]\n        z += (atom[", "'site'", "][", "2", "]/b2a )* atom[", "'q'", "]\n    x,y,z =x*a2d, y*a2d,z*a2d\n    u = math.sqrt(x**", "2", "+y**", "2", "+z**", "2", ")\n    x2 = (u ", "-3.07", ") ** ", "2", "\n    return x2\n\ndef make_atoms(atoms,x0):\n    #x0 = [q_ca,beta_ca]\n    q_ca = x0[", "0", "]\n    beta_ca = x0[", "1", "]\n    \n    atoms[", "4", "][", "'q'", "] = q_ca\n    atoms[", "5", "][", "'q'", "] = -(q_ca", "-2", ")\n    \n    atoms[", "4", "][", "'beta'", "] = beta_ca\n    atoms[", "5", "][", "'beta'", "] = beta_ca\n\n    return atoms\n \ndef cacl_ener(x0,atoms):\n    k = ", "1", "/(", "4", "*math.pi*", "0.08854187818", ")\n    v_sum = ", "0", "\n    atoms[", "1", "][", "'site'", "] = np.array([x0[", "0", "],x0[", "1", "],x0[", "2", "]])\n    atoms[", "3", "][", "'site'", "] = np.array([x0[", "3", "],x0[", "4", "],x0[", "5", "]])\n    atoms[", "5", "][", "'site'", "] = np.array([x0[", "6", "],x0[", "7", "],x0[", "8", "]])\n    atom = [", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]\n    for i in range(", "0", ",", "5", "):\n        atom = atom[", "1", ":]\n        bi = atoms[i][", "'beta'", "]\n        qi = atoms[i][", "'q'", "]\n        for j in atom:\n            \n            bj = atoms[j][", "'beta'", "]\n            \n            \n            qj = atoms[j][", "'q'", "]\n\n            r = np.linalg.norm(atoms[i][", "'site'", "] - atoms[j][", "'site'", "])\n            bij = (bi * bj) /(math.sqrt(bi*bi+bj*bj))            \n            erf= math.erf(bij * r)\n\n            e_coul = k * qi * qj *erf /r\n            v_sum += e_coul\n\n\n    r_f_1 = np.linalg.norm(atoms[", "0", "][", "'site'", "] - atoms[", "1", "][", "'site'", "])\n    r_f_2 = np.linalg.norm(atoms[", "2", "][", "'site'", "] - atoms[", "3", "][", "'site'", "])\n    r_ca= np.linalg.norm(atoms[", "4", "][", "'site'", "] - atoms[", "5", "][", "'site'", "])\n    v_pol_f_1 = k * (atoms[", "1", "][", "'q'", "]**", "2", "/(", "2", "*a_f)) * r_f_1**", "2", "\n    v_pol_f_2 = k * (atoms[", "3", "][", "'q'", "]**", "2", "/(", "2", "*a_f)) * r_f_2**", "2", "\n    v_pol_ca = k * (atoms[", "5", "][", "'q'", "]**", "2", "/(", "2", "*a_ca)) * r_ca**", "2", "\n    v_sum = v_sum + v_pol_f_1+ v_pol_ca   + v_pol_f_2\n    return(v_sum)\n\ndef p_min(delta_x2,t):\n    probability = np.exp(-delta_x2/t)\n    return probability\n\ndef deal(atoms1,atoms2,delta_x2,t):\n    if delta_x2 < ", "0", ":\n        return atoms2\n    else:\n        return atoms1\n\ndef solve():\n    atoms1 = atoms\n    count = ", "0", "\n    skl = ", "0", "\n    t = ", "1000", "\n    t_min = ", "1", "\n    jishu = ", "0", "\n    r = ", "1000", "\n    count_skl_1 = ", "0", "\n    count_skl_2 = ", "0", "\n    while t >= t_min:\n        jishu += ", "1", "\n        t *= ", "0.95", "\n    t = ", "1000", "\n    x0 =([", "0", ", ", "1", ", ", "-0.461", ",", "0", ", ", "-1.669", ", ", "-0.561", ",", "0.", ", ", "0.", "    , ", "0.355", "])\n    with open(", "'x2.txt'", ",", "'w'", ") as f:\n        f.write(", "''", ")\n    while t >= t_min:\n        for i in range(", "0", ",r): \n            \n            write = {", "'id'", ":", "0", ",", "'x2'", ":", "''", ",", "'atoms'", ":atoms1}\n            if skl == ", "1", ":\n                count_skl_1 += ", "1", "\n            elif skl == ", "2", ":\n                count_skl_2 += ", "1", "\n            if count ", "% jishu == 0:", "\n                count_1 = (count/jishu) /(r/", "100", ")\n                s = str(count) + ", "'|'", " + str(jishu*", "100", ")\n                print(count_1,", "':'", ",", "'  1:'", ",count_skl_1,", "'  2:'", ",count_skl_2)\n                count_skl_1 = ", "0", "\n                count_skl_2 = ", "0", "\n                if count == jishu * ", "100", " ", "-1", ":\n                    print(", "'\\n'", ")\n            count += ", "1", "\n            if count ==  ", "1", ":\n                result = opt.minimize(cacl_ener,x0,method=", "'L-BFGS-B'", ",args = atoms1)\n                x0 = (result[", "'x'", "][", "0", "],result[", "'x'", "][", "1", "],result[", "'x'", "][", "2", "],result[", "'x'", "][", "3", "],result[", "'x'", "][", "4", "],result[", "'x'", "][", "5", "],result[", "'x'", "][", "6", "],result[", "'x'", "][", "7", "],result[", "'x'", "][", "8", "])\n                atoms1[", "1", "][", "'site'", "] = np.array([result[", "'x'", "][", "0", "],result[", "'x'", "][", "1", "],result[", "'x'", "][", "2", "]])\n                atoms1[", "3", "][", "'site'", "] = np.array([result[", "'x'", "][", "3", "],result[", "'x'", "][", "4", "],result[", "'x'", "][", "5", "]])\n                atoms1[", "5", "][", "'site'", "] = np.array([result[", "'x'", "][", "6", "],result[", "'x'", "][", "7", "],result[", "'x'", "][", "8", "]])\n                x2_1 = calc_x2(atoms1)\n        \n            q_ca = atoms1[", "4", "][", "'q'", "]\n            beta_ca = atoms1[", "4", "][", "'beta'", "]\n\n            delta_q_ca = random.uniform(", "-0.1", ",", "0.1", ")\n            if q_ca + delta_q_ca > ", "20", " or q_ca + delta_q_ca < ", "2", ":\n                q_ca = q_ca - delta_q_ca\n            else:\n                q_ca = q_ca + delta_q_ca\n            \n            delta_beta_ca = random.uniform(", "-0.1", ",", "0.1", ")\n            if beta_ca + delta_beta_ca >", "20", " or beta_ca + delta_beta_ca < ", "0", ":\n                beta_ca -= delta_beta_ca\n            else:\n                beta_ca += delta_beta_ca\n\n\n            delta_atoms = [q_ca,beta_ca]\n            atoms2 = make_atoms(atoms1,delta_atoms)\n\n\n            result = opt.minimize(cacl_ener,x0,method=", "'L-BFGS-B'", ",args = atoms2)\n            x0 = (result[", "'x'", "][", "0", "],result[", "'x'", "][", "1", "],result[", "'x'", "][", "2", "],result[", "'x'", "][", "3", "],result[", "'x'", "][", "4", "],result[", "'x'", "][", "5", "],result[", "'x'", "][", "6", "],result[", "'x'", "][", "7", "],result[", "'x'", "][", "8", "])\n            atoms2[", "1", "][", "'site'", "] = np.array([result[", "'x'", "][", "0", "],result[", "'x'", "][", "1", "],result[", "'x'", "][", "2", "]])\n            atoms2[", "3", "][", "'site'", "] = np.array([result[", "'x'", "][", "3", "],result[", "'x'", "][", "4", "],result[", "'x'", "][", "5", "]])\n            atoms2[", "5", "][", "'site'", "] = np.array([result[", "'x'", "][", "6", "],result[", "'x'", "][", "7", "],result[", "'x'", "][", "8", "]])\n            x2_2 = calc_x2(atoms2)\n            delta_x2 = x2_2 - x2_1\n            print(delta_x2)\n            atoms1 = deal(atoms1,atoms2,delta_x2,t)\n\n            if atoms1 == atoms2:                \n                skl = ", "2", "\n                print(skl)\n                x2_1 = x2_2\n            else:\n                skl = ", "1", "\n            write[", "'id'", "] = count\n            write[", "'x2'", "] =x2_1\n            write[", "'atoms'", "] = atoms1\n            writes.append(write)\n            with open(", "'x2.txt'", ",", "'a'", ") as f:\n                f.write(str(write) + ", "'\\n'", ")\n        t = t * ", "0.95", "\n    result = atoms1\n            \n\nif ", "__name__", " == ", "\"__main__\"", ":\n    atoms = [{", "'beta'", ": ", "9.139", ", ", "'q'", ": ", "5.590", ", ", "'site'", ": np.array([", "0", ", ", "1.869", ", ", "-0.361", "])}, \\\n                  {", "'beta'", ": ", "9.139", ", ", "'q'", ": ", "-6.590", ", ", "'site'", ": np.array([", "-0.23324962", ",  ", "0.16647118", ",  ", "0.29554485", "])}, \\\n                  {", "'beta'", ": ", "9.139", ", ", "'q'", ": ", "5.590", ", ", "'site'", ": np.array([", "0", ", ", "-1.869", ", ", "-0.361", "])}, \\\n                  {", "'beta'", ": ", "9.139", ", ", "'q'", ": ", "-6.590", ", ", "'site'", ": np.array([", "-0.23324962", ",  ", "0.16647118", ",  ", "0.29554485", "])}, \\\n                  {", "'beta'", ": ", "13.772", ", ", "'q'", ": ", "20", ", ", "'site'", ": np.array([", "0.", ", ", "0.", "    , ", "0.325", "    ])}, \\\n                  {", "'beta'", ": ", "13.772", ", ", "'q'", ": ", "-22", ", ", "'site'", ": np.array([", "0.15000612", ", ", "0.0927579", " , ", "0.29707778", "])}]\n    count = ", "0", "\n    re = ", "0.1564", "\n    u_exp =  ", "3.07", "\n    a_f = ", "1.3", "\n    a_ca = ", "4.4", "\n    x = []\n    writes = []\n    result = ", "''", "\n    solve()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The original Rules field changes because pointers and slices (which are references as well) are used.&lt;/p&gt;\n\n&lt;p&gt;Before calling OstarCF, the ChainsTo method is called. It uses the grammar object by value, so a copy is done, but the Rules field is a slice of pointers on Rules. So when this field is copied, it still points to the data of the original object.&lt;/p&gt;\n\n&lt;p&gt;Then, in method ChainsTo, there is a loop on the Rules field. It copies the Right field which is a slice of strings (so it still points to data of the original object):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;rhs := rule.Right\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Finally, a ns variable is declared by slicing rhs:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ns := rhs[:i]\nns = append(ns, rhs[i+1:]...)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;At this stage, the ns variable still points to the buffer containing the slice of strings of the original object. Initially, i=0, so ns is an empty slice reusing the buffer. When items are appended, they replace the original data.&lt;/p&gt;\n\n&lt;p&gt;That's why your data are changed.&lt;/p&gt;\n\n&lt;p&gt;You can fix this problem by explicitly making a copy, for instance by replacing the above lines by:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ns := make( []string, 0, len(rhs) )\nns = append( ns, rhs[:i]...)\nns = append( ns, rhs[i+1:]...)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Go slices have replaced C pointer arithmetic, but they can be almost as dangerous/misleading in some cases.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["非常令人困惑的变量更改", ["\n\n", "http://play.golang.org/p/Vd3meom5VF", "\n\n", "I have this code for some context free grammar in Go", "\n\n", "And I am looking at this code so many times and still don't see any reason for the struct values to be changed. Could anybody see why the change like the following happens?", "\n\n", "Rules:", "\nS -> . [DP VP]", "\nVP -> . [V DP]", "\nVP -> . [V DP AdvP]", "\n\n", "After I run some functions as in the line ", "\n\n", " or2 = append(or2, OstarCF([]QRS{q}, []string{\"sees\"}, g2.Nullables(), g2.ChainsTo(g2.Nullables()))...)\n", "\n\n", "Somehow my struct value is changed... I don't know why...", "\n\n", "Rules:", "\nS -> . [VP VP]", "\nVP -> . [DP DP]", "\nVP -> . [AdvP AdvP AdvP]", "\n\n", "This should have been same as above.", "\n\n", " Rules:\n S -> DP,VP\n VP -> V,DP\n VP -> V,DP,AdvP\n\n or2 := []QRS{}\n g2 := ToGrammar(cfg2)\n fmt.Printf(\"%s\n\", g2)\n\n for _, rule := range g2.Rules {\n        q := QRS{\n            one:   rule.Src,\n            two:   []string{},\n            three: rule.Right,\n        }\n        or2 = append(or2, OstarCF([]QRS{q}, []string{\"sees\"}, g2.Nullables(), g2.ChainsTo(g2.Nullables()))...)\n    }\n\n    fmt.Printf(\"%s\n\", g2)\n", "\n\n", "As you see, I do not use any pointer the variable ", "rule", ", and they are only used to instantiate another struct value, but how come the original struct field ", "rule", " has changed? The function OstarCF does not do anything about this field ", "rule", "\n\n", " func OstarCF(Qs []QRS, R []string, nD map[string]bool, cD map[string][]string) []QRS {\n    symbols := []string{}\n    for _, r := range R {\n        symbols = append(symbols, cD[r]...)\n    }\n    product := []QRS{}\n    for _, Q := range Qs {\n        a := Q.one\n        b := Q.two\n        c := Q.three\n        if len(c) > 0 && CheckStr(c[0], symbols) {\n            b = append(b, c[0])\n            np := QRS{\n                one:   a,\n                two:   b,\n                three: c[1:],\n            }\n            product = append(product, np)\n\n            for len(np.three) > 0 && nD[np.three[0]] == true {\n                np.two = append(np.two, np.three[0])\n                np = QRS{\n                    one:   np.one,\n                    two:   np.two,\n                    three: np.three[1:],\n                }\n                product = append(product, np)\n            }\n        }\n    }\n    return product\n }\n", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;都一樣的&amp;#xff0c;第二種只是第一種的合并寫法。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["请问这么计算银行的本息是可以吗？哪个是对？", ["问题：谭浩强《C程序设计》（第四版）3-2习题", "\n", "用的是编译器是devC++", "\n", "大一新生，和室友，磨了俩小时出来的", "\n", "这是第一版", "\n", "\n", "#include <stdio.h>", "\n", "#include<math.h>", "\n", "int", " main()\n{\n    float ", "p0", "=1000", ",", "r1", ",", "r2", ",", "r3", ",", "r5", ",", "r0", ",", "p1", ",", "p2", ",", "p3", ",", "p4", ",", "p5", ",w2,w3,w4,w5,i", ";", "\n    ", "r1", "=4", ".", "14", "/", "100", ",", "r2", "=4", ".", "68", "/", "100", ",", "r3", "=5", ".", "4", "/", "100", ",", "r5", "=5", ".", "85", "/", "100", ",", "r0", "=0", ".", "72", "/", "100", ",i", "=1", ";", "\n    \n    ", "p1", "=(", "1", "+", "r5", "*", "5", ")*", "p0", ";", "\n    \n    w2=(", "1", "+", "r2", "*", "2", ")*", "p0", ";", "\n    ", "p2", "=(", "1", "+", "r3", "*", "3", ")*w2", ";", "\n    \n    w3=(", "1", "+", "r3", "*", "3", ")*", "p0", ";", "\n    ", "p3", "=(", "1", "+", "r2", "*", "2", ")*w3", ";", "\n    \n    \n    ", "p4", "=(", "1", ".", "0", "+", "r1", ")*", "p0", ";", "\n    ", "while", "(i<", "5", ")\n    {\n    ", "p4", "=(", "1", ".", "0", "+", "r1", ")*", "p4", ";", "\n    i", "=i", "+", "1", ";    ", "\n    }\n    \n    ", "p5", "=(", "1", "+", "r0", "/", "4", ")*", "p0", ";", "\n    ", "while", "(i<", "20", ")\n    {\n        ", "p5", "=(", "1", "+", "r0", "/", "4", ")*", "p5", ";", "\n        i", "=i", "+", "1", ";", "\n    }\n    \n    printf(", "\"p1=%f\\np2=%f\\np3=%f\\np4=%f\\np5=%f\"", ",", "p1", ",", "p2", ",", "p3", ",", "p4", ",", "p5", ")", ";", "\n    return ", "0", ";", "\n}\n", "\n", "这是第二版", "\n", "#include <stdio.h>", "\n", "#include<math.h>", "\n", "int", " main()\n{\n    float ", "p0", "=1000", ",", "r1", ",", "r2", ",", "r3", ",", "r5", ",", "r0", ",", "p1", ",", "p2", ",", "p3", ",", "p4", ",", "p5", ",n", ";", "\n    ", "r1", "=4", ".", "14", "/", "100", ",", "r2", "=4", ".", "68", "/", "100", ",", "r3", "=5", ".", "4", "/", "100", ",", "r5", "=5", ".", "85", "/", "100", ",", "r0", "=0", ".", "72", "/", "100", ",n", "=5", ";", "\n    \n    ", "p1", "=(", "1", "+", "r5", "*n)*", "p0", ";", "\n    \n    ", "p2", "=(", "1", "+", "r2", "*", "2", ")*(", "1", "+", "r3", "*", "3", ")*", "p0", ";", "\n    \n    ", "p3", "=(", "1", "+", "r2", "*", "2", ")*(", "1", "+", "r3", "*", "3", ")*", "p0", ";", "\n    \n    \n    ", "p4", "=p0", "*pow((", "r1", "+", "1", "),n)", ";", "\n    \n    ", "p5", "=p0", "*pow((", "r0", "/", "4", "+", "1", "),", "4", "*n)", ";", "\n    \n    printf(", "\"p1=%f\\np2=%f\\np3=%f\\np4=%f\\np5=%f\"", ",", "p1", ",", "p2", ",", "p3", ",", "p4", ",", "p5", ")", ";", "\n    return ", "0", ";", "\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我破了这个报错了家人们&amp;#xff01;&amp;#xff01;&lt;br /&gt;我看了一下fbank函数的解释&amp;#xff0c;fbank的函数返回是个元组&amp;#xff0c;这个元组应该是有俩元素&amp;#xff0c;一个是特征向量一个是每一帧的对数能量。我把fbank函数全换成logfbank函数就行啦&amp;#xff01;因为logfbank函数返回的只有一个特征向量&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["报错'tuple' object has no attribute 'shape'原因是元组不可改变？应该怎么破？", ["这是我的代码，是提取fbank特征的", "\n", "代码如下：", "\n", "\n", "# -*- coding: utf-8 -*-", "\n", "#导入相关的库", "\n", "from", " keras.models ", "import", " Model\n", "from", " keras.layers ", "import", " Input, Activation, Conv1D, Lambda, Add, Multiply, BatchNormalization\n", "from", " keras.optimizers ", "import", " Adam, SGD\n", "from", " keras ", "import", " backend ", "as", " K\n", "from", " keras.callbacks ", "import", " ModelCheckpoint, ReduceLROnPlateau\n\n", "import", " numpy ", "as", " np\n", "import", " matplotlib.pyplot ", "as", " plt\n", "from", " mpl_toolkits.axes_grid1 ", "import", " make_axes_locatable\n\n", "import", " random\n", "import", " pickle\n", "import", " glob\n", "from", " tqdm ", "import", " tqdm\n", "import", " os\n\n", "from", " python_speech_features ", "import", " fbank\n", "import", " scipy.io.wavfile ", "as", " wav\n", "import", " librosa\n", "from", " IPython.display ", "import", " Audio\n\n\n\n", "#读取数据集文件", "\ntext_paths = glob.glob(", "'E:\\叶儿\\课程课程\\毕设\\data2try/*.trn'", ")\ntotal = ", "len", "(text_paths)\n", "print", "(total)\n\n", "with", " ", "open", "(text_paths[", "0", "], ", "'r'", ", encoding=", "'utf8'", ") ", "as", " fr:\n    lines = fr.readlines()\n    ", "print", "(lines)\n\n\n\n", "#数据集文件trn内容读取保存到数组中", "\ntexts = []\npaths = []\n", "for", " path ", "in", " text_paths:\n    ", "with", " ", "open", "(path, ", "'r'", ", encoding=", "'utf8'", ") ", "as", " fr:\n        lines = fr.readlines()\n        line = lines[", "0", "].strip(", "'\\n'", ").replace(", "' '", ", ", "''", ")\n        texts.append(line)\n        paths.append(path.rstrip(", "'.trn'", "))\n\n", "print", "(paths[", "0", "], texts[", "0", "])\n\n\n\n\n\n", "#根据数据集标定的音素读入", "\n", "def", " ", "load_and_trim", "(", "path", "):\n    audio, sr = librosa.load(path)\n    energy = librosa.feature.rms(audio)\n    frames = np.nonzero(energy >= np.", "max", "(energy) / ", "5", ")\n    indices = librosa.core.frames_to_samples(frames)[", "1", "]\n    audio = audio[indices[", "0", "]:indices[-", "1", "]] ", "if", " indices.size ", "else", " audio[", "0", ":", "0", "]\n\n    ", "return", " audio, sr\n\n", "#可视化，显示语音文件的Fbank图", "\n", "def", " ", "visualize", "(", "index", "):\n    path = paths[index]\n    text = texts[index]\n    ", "print", "(", "'Audio Text:'", ", text)\n\n    audio, sr = load_and_trim(path)\n    plt.figure(figsize=(", "12", ", ", "3", "))\n    plt.plot(np.arange(", "len", "(audio)), audio)\n    plt.title(", "'Raw Audio Signal'", ")\n    plt.xlabel(", "'Time'", ")\n    plt.ylabel(", "'Audio Amplitude'", ")\n    plt.show()\n\n    feature = fbank(audio, sr,nfft=", "512", ")\n    ", "print", "(", "'Shape of Fbank:'", ", feature.shape)\n\n", "\n", "就是最后一行代码有报错，报错如下：", "\n", "  File \"", "\", line 91, in ", "    Audio(visualize(0))", "\n", "  File \"", "\", line 76, in visualize", "    print('Shape of Fbank:', feature.shape)", "\n", "AttributeError: 'tuple' object has no attribute 'shape'", "\n", "这个no attribute 要怎么办啊？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;说明你arr里存的有str有float&amp;#xff0c;必须类型一致&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["can only concatenate str (not \"float\") to str", ["运行这个命令提示类型报错", "mean = np.array(arr).mean()"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1.建立系统环境变量 变量名填PYTHONPATH&lt;br /&gt;变量值为安装后的库地址。&lt;br /&gt;2.在解决方案管理器中&amp;#xff0c;右击搜索路径&amp;#xff0c;点击将PYTHONPATH添加到搜索路径。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["用vs2022写python代码，导入的第三方库经常莫名失效。有时显示未导入却能用。", ["问题遇到的现象和发生背景", "\n", "本来用vs2022编写c语言，用的挺舒服的，想着偷懒，直接也用vs2022编写python了。但是遇到了很奇怪的问题，导入的第三方库，经常性出现失效。本来编的好好的，关闭了vs2022然后重新打开一样的文件，没有其它操作，import后面就是绿色波浪线了。这种现象随机出现，可能再重启一下vs就好了。除此之外，还会可能与到一种情况，虽然显示导入不成功，但库中包含的内容却能用，只是函数不高亮。", "\n", "错误信息", "\n", "\n", "第一张图，左边python环境里显示了我安装了numpy，然而import还是显示绿色波浪线。 这问题太折磨人了，莫名其妙的，有人能指点一下这是vs2022的问题还是其他的呢。", "第二张图，显示导入未成功，但是opencv的功能却实现了。", "\n", "代码块", "\n", "import cv2", "import numpy as np", "import random", "import matplotlib.pyplot as plt", "import time", "\n", "我的解答思路和尝试过的方法。", "\n", "一、考虑到可能是包的问题，我删掉了所有包并重新下载，没能解决问题。", "二、之前总报错UnicodeDecodeError: ‘utf-8‘ codec can‘t decode byte 0xc5 in position 13: invalid continuation byte，觉得是字的编码问题，我就把保存方式改成utf-8了，不知道和字的编码有没有关系。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这好多变量看不到定义&amp;#xff0c;不知道格式不好分析啊&lt;br /&gt;按照你的代码&lt;br /&gt;GHI是一个24xdays的矩阵&amp;#xff0c;GHI[hour]是一个长度为days的数组&amp;#xff0c;但是houston_monthly[houston_monthly[&amp;#39;Hour&amp;#39;] &amp;#61;&amp;#61; hour]按houston_monthly[&amp;#39;Hour&amp;#39;] &amp;#61;&amp;#61; hour取出来的行数明显与days是不同的&amp;#xff0c;一个是28&amp;#xff0c;一个是31&amp;#xff0c;因为没有数据&amp;#xff0c;也不知道你的意图&amp;#xff0c;无法判断应该怎么改&amp;#xff0c;两个长度一个是最大天数&amp;#xff0c;一个是按小时数取的&amp;#xff0c;除非你的数据中一个月每天每小时都有唯一一条数据&amp;#xff0c;这两个数才会相等&amp;#xff0c;否则的话总是会有偏差的&amp;#xff0c;你可以按照这个思路去检查一下你的数据和代码&amp;#xff0c;如果搞不明白&amp;#xff0c;那请把数据附上来&amp;#xff0c;把你的具体的目的描述一下&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["取每个月的最大天数报错", ["我希望取每个月的最大天数代入下一个循环，但是取出来的只有一个最大值31，报错", "\n", "###### ```python\n\n我的代码\n {for month in range(1,13):\n    houston_monthly=houston", "[houston", "['Month']", "==month]", "\n    X=houston_monthly", "[", "['GHI','DNI','Temperature','Price']", "]", "\n    C=X.corr()\n    days = max(houston_monthly", "['Day']", ")\n    GHI = np.zeros(", "[24, days]", ")\n    Temp = np.zeros(", "[24, days]", ")\n    DNI=np.zeros(", "[24, days]", ")\n    rtp=np.zeros(", "[24, days]", ")\n    c=np.zeros(", "[24,3,3]", ")\n    for hour in range(24):\n            GHI", "[hour]", " = houston_monthly", "[houston_monthly", "['Hour']", " == hour]", "['GHI']", "/1000\n            Temp", "[hour]", " = houston_monthly", "[houston_monthly", "['Hour']", " == hour]", "['Temperature']", "\n            DNI", "[hour]", " = houston_monthly", "[houston_monthly", "['Hour']", " == hour]", "['DNI']", " / 1000\n            rtp", "[hour]", " = houston_monthly", "[houston_monthly", "['Hour']", " == hour]", "['Price']", "\n            c = np.corrcoef(np.array(", "[GHI", "[hour]", ",Temp", "[hour]", ",DNI", "[hour]", ",rtp", "[hour]", "]", "))}\n```，\n\n", "\n", "\n", "{---------------------------------------------------------------------------\n", "ValueError", "                                ", "Traceback", " (most recent call last)\n/var/folders/", "1", "t/mwj66mvx0mv00rs70yc3hgk40000gn/", "T", "/ipykernel_14153/", "1750111386.", "py in <module>\n     ", "17", "     c=np.zeros([", "24", ",", "3", ",", "3", "])\n     ", "18", "     for hour in range(", "24", "):\n---> ", "19", "             ", "GHI", "[hour] = houston_monthly[houston_monthly[", "'Hour'", "] == hour][", "'GHI'", "]/", "1000", "\n     ", "20", "             ", "Temp", "[hour] = houston_monthly[houston_monthly[", "'Hour'", "] == hour][", "'Temperature'", "]\n     ", "21", "             ", "DNI", "[hour] = houston_monthly[houston_monthly[", "'Hour'", "] == hour][", "'DNI'", "] / ", "1000", "\n\n", "ValueError", ": could not broadcast input array from shape (", "28", ",) into shape (", "31", ",)} \n\n", "\n", "求指教应该怎么改？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;main&lt;/span&gt;():\n    matplotlib.rcParams[&lt;span class=\"hljs-string\"&gt;&amp;#39;font.family&amp;#39;&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;SimHei&amp;#39;&lt;/span&gt;\n    stuScore &amp;#61; np.loadtxt(&lt;span class=\"hljs-string\"&gt;&amp;#39;student_score.csv&amp;#39;&lt;/span&gt;, delimiter&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 读入成绩文件,返回数组&lt;/span&gt;\n    sumEach &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(stuScore[:, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:], axis&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 返回每个学生3门课程总分&lt;/span&gt;\n    avgEach &amp;#61; np.average(stuScore[:, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:], axis&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 返回每个学生每门课程平均分&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 取出各科成绩&lt;/span&gt;\n    mathScore &amp;#61; stuScore[:, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n    engScore &amp;#61; stuScore[:, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]\n    pythonScore &amp;#61; stuScore[:, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]\n    &lt;span class=\"hljs-comment\"&gt;# Performanceanalysis(avgEach, stuScore, sumEach)&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;成绩分析与可视化系统  \n 1: 基本信息显示      \n 2: 成绩分析          \n 3: 可视化         \n 4: 退出系统&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;)\n        operation &amp;#61; &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入你的操作&amp;#34;&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; operation.isdigit():\n            operation &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(operation)\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; operation &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n                &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; 学号  高数  英语  python&amp;#34;&lt;/span&gt;)\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; stuScore:\n                    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#34;&lt;span class=\"hljs-subst\"&gt;{&lt;!-- --&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(i[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])}&lt;/span&gt; &lt;span class=\"hljs-subst\"&gt;{i[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]}&lt;/span&gt; &lt;span class=\"hljs-subst\"&gt;{i[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]}&lt;/span&gt; &lt;span class=\"hljs-subst\"&gt;{i[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]}&lt;/span&gt;&amp;#34;&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; operation &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n                Performanceanalysis(avgEach, stuScore, sumEach)\n            &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; operation &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n                &lt;span class=\"hljs-comment\"&gt;# name&amp;#61; input(&amp;#34;请输入课程名&amp;#34;)&lt;/span&gt;\n                &lt;span class=\"hljs-comment\"&gt;# if name&amp;#61;&amp;#61;&amp;#39;xxx&amp;#39;:&lt;/span&gt;\n                &lt;span class=\"hljs-comment\"&gt;# 由于不清楚你的课程名是啥,你这里自己填 if elif else结构就可以&lt;/span&gt;\n                Highnumberhistogram(mathScore)\n                Englishhistogram(engScore)\n                Scorehistogram(pythonScore)\n            &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; operation &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:\n                &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; sys\n                sys.exit(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n                &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入错误,请重新输入&amp;#34;&lt;/span&gt;)\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;Performanceanalysis&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;avgEach, stuScore, sumEach&lt;/span&gt;):\n    &lt;span class=\"hljs-comment\"&gt;# 返回最高分和最低分&lt;/span&gt;\n    maxMath &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(stuScore[:, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n    maxEng &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(stuScore[:, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])\n    maxPython &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(stuScore[:, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;])\n    minMath &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(stuScore[:, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n    minEng &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(stuScore[:, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;])\n    minPython &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(stuScore[:, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;])\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;个人总分情况是&amp;#xff1a;&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(sumEach)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;个人平均分情况是&amp;#xff1a;&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(avgEach)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;班级每门课程最高分&amp;#xff1a;&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(maxMath, maxEng, maxPython)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;班级每门课程最低分&amp;#xff1a;&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(minMath, minEng, minPython)\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;Highnumberhistogram&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;mathScore&lt;/span&gt;):\n    &lt;span class=\"hljs-comment\"&gt;# 绘制高数直方图&lt;/span&gt;\n    plt.suptitle(&lt;span class=\"hljs-string\"&gt;&amp;#34;成绩分布直方图&amp;#34;&lt;/span&gt;)\n    plt.subplot(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    plt.hist(mathScore, bins&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;&amp;#61;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;), color&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 0-100分,分成10段&lt;/span&gt;\n    plt.xlabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;高数成绩分数段&amp;#34;&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 设置x轴标签&lt;/span&gt;\n    plt.ylabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;人数&amp;#34;&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 设置y轴标签&lt;/span&gt;\n    plt.xlim(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 设置x轴区间&lt;/span&gt;\n    plt.xticks([&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;70&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;90&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;])  &lt;span class=\"hljs-comment\"&gt;# 设置x轴刻度&lt;/span&gt;\n    plt.yticks([&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;70&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;90&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;])  &lt;span class=\"hljs-comment\"&gt;# 设置y轴刻度&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# plt.grid()&lt;/span&gt;\n    plt.show()\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;Englishhistogram&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;engScore&lt;/span&gt;):\n    &lt;span class=\"hljs-comment\"&gt;# 绘制英语直方图&lt;/span&gt;\n    plt.subplot(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n    plt.hist(engScore, bins&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;&amp;#61;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;), color&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 0-100分,分成10段&lt;/span&gt;\n    plt.xlabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;英语成绩分数段&amp;#34;&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 设置x轴标签&lt;/span&gt;\n    plt.ylabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;人数&amp;#34;&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 设置y轴标签&lt;/span&gt;\n    plt.xlim(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 设置x轴区间&lt;/span&gt;\n    plt.xticks([&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;70&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;90&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;])  &lt;span class=\"hljs-comment\"&gt;# 设置x轴刻度&lt;/span&gt;\n    plt.yticks([&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;70&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;90&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;])  &lt;span class=\"hljs-comment\"&gt;# 设置y轴刻度&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# plt.grid()&lt;/span&gt;\n    plt.show()\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;Scorehistogram&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;pythonScore&lt;/span&gt;):\n    &lt;span class=\"hljs-comment\"&gt;# 绘制python直方图&lt;/span&gt;\n    plt.suptitle(&lt;span class=\"hljs-string\"&gt;&amp;#34;成绩分布直方图&amp;#34;&lt;/span&gt;)\n    plt.subplot(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n    plt.hist(pythonScore, bins&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;&amp;#61;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;), color&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 0-100分,分成10段&lt;/span&gt;\n    plt.xlabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;Python成绩分数段&amp;#34;&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 设置x轴标签&lt;/span&gt;\n    plt.ylabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;人数&amp;#34;&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 设置y轴标签&lt;/span&gt;\n    plt.xlim(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 设置x轴区间&lt;/span&gt;\n    plt.xticks([&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;70&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;90&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;])  &lt;span class=\"hljs-comment\"&gt;# 设置x轴刻度&lt;/span&gt;\n    plt.yticks([&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;70&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;90&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;])  &lt;span class=\"hljs-comment\"&gt;# 设置y轴刻度&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# plt.grid()&lt;/span&gt;\n    plt.show()\n\n\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__ &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;有帮助请点一下右上角的采纳,谢谢&lt;br /&gt;&lt;img src=\"https://gitee.com/xxhaadyq/image/raw/master/picture/307778716936171.jpg\" class=\"md_img\" /&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["某班有30名学生的3门课程成绩，请统计每个学生课程的总分、平均分，每门课程的最高分、最低分，并绘制图形，统计成绩分布。", ["                 成绩分析及可视化实例\n", "\n", "【功能要求】某班有30名学生的3门课程成绩，请统计每个学生课程的总分、平均分，每门课程的最高分、最低分，并绘制图形，统计成绩分布。", "【教学目标】强化numpy和matplotlib的应用能力，numpy读取csv。", "1.模块化（菜单1分）", "\n", "\n", " ", "成绩分析与可视化系统  \n 1", ":", " ", "基本信息显示      ", "\n ", "2", ":", " ", "成绩分析          ", "\n ", "3", ":", " ", "可视化         ", "\n ", "4", ":", " ", "退出系统           ", "\n", "\n", "\n", "2.显示：打开文件显示全部信息（3分）", "3.成绩分析：显示各科最高分、最低分、平均分，每个学生的总分（3分）", "4.可视化：成绩直方图：输入某门课程名，显示对应的直方图（3分）", "【参考代码】", "#成绩分析及可视化实例", "import numpy as np", "import matplotlib", "import matplotlib.pyplot as plt", "matplotlib.rcParams['font.family'] = 'SimHei'", "stuScore = np.loadtxt('student_score.csv',delimiter = ',')#读入成绩文件,返回数组", "sumEach = np.sum(stuScore[:,1:],axis = 1)#返回每个学生3门课程总分", "avgEach = np.average(stuScore[:,1:],axis = 0)#返回每个学生每门课程平均分", "#返回最高分和最低分", "maxMath = np.max(stuScore[:,1])", "maxEng = np.max(stuScore[:,2])", "maxPython = np.max(stuScore[:,3])", "minMath = np.max(stuScore[:,1])", "minEng = np.max(stuScore[:,2])", "minPython = np.max(stuScore[:,3])", "print(\"个人总分情况是：\")", "print(sumEach)", "print(\"个人平均分情况是：\")", "print(avgEach)", "print(\"班级每门课程最高分：\")", "print(maxMath,maxEng,maxPython)", "print(\"班级每门课程最低分：\")", "print(minMath,minEng,minPython)", "#取出各科成绩", "mathScore = stuScore[:,1]", "engScore = stuScore[:,2]", "pythonScore = stuScore[:,3]", "#绘制高数直方图", "plt.suptitle(\"成绩分布直方图\")", "plt.subplot(3,1,1)", "plt.hist(mathScore,bins=10,range=(0,100),color='red')#0-100分,分成10段", "plt.xlabel(\"高数成绩分数段\")#设置x轴标签", "plt.ylabel(\"人数\")#设置y轴标签", "plt.xlim(0,100)#设置x轴区间", "plt.xticks([0,10,20,30,40,50,60,70,80,90,100])#设置x轴刻度", "plt.yticks([0,10,20,30,40,50,60,70,80,90,100]) #设置y轴刻度", "plt.grid()", "#绘制英语直方图", "plt.subplot(3,1,2)", "plt.hist(engScore,bins=10,range=(0,100),color='blue')#0-100分,分成10段", "plt.xlabel(\"英语成绩分数段\")#设置x轴标签", "plt.ylabel(\"人数\")#设置y轴标签", "plt.xlim(0,10)#设置x轴区间", "plt.xticks([0,10,20,30,40,50,60,70,80,90,100])#设置x轴刻度", "plt.yticks([0,10,20,30,40,50,60,70,80,90,100]) #设置y轴刻度", "plt.grid()", "#绘制python直方图", "plt.suptitle(\"成绩分布直方图\")", "plt.subplot(3,1,3)", "plt.hist(pythonScore,bins=10,range=(0,100),color='green')#0-100分,分成10段", "plt.xlabel(\"Python成绩分数段\")#设置x轴标签", "plt.ylabel(\"人数\")#设置y轴标签", "plt.xlim(0,100)#设置x轴区间", "plt.xticks([0,10,20,30,40,50,60,70,80,90,100])#设置x轴刻度", "plt.yticks([0,10,20,30,40,50,60,70,80,90,100]) #设置y轴刻度", "plt.grid()", "plt.show()"]], "Tag": "算法设计"}
{"Answer": "```\r\ndef loadDataSet(self,fileName):\r\n```", "Konwledge_Point": "应对NP完全问题", "Question": ["python类内部的方法调用", ["class Adaboosting中demo_train方法中要调用同个类中的loadDataSet方法，但是根本没进到程序之中，求教是什么原因，谢谢大佬们了", "\ndemo_train的代码如下", "\n\n", "        def demo_train(self):\n                print(\"已进入到了内部函数\")\n                print(self.model)\n                if self.model==None:\n                        self.model=\"test.txt\"\n                dataArr, LabelArr = self.loadDataSet(self.model)\n                weakClassArr, aggClassEst = Adaboosting.adaBoostTrainDS(dataArr, LabelArr)\n                # from my_adaboosting_SVM_ROC import adaClassify\n                print(\"正在训练模型...\")\n                predictions = self.adaClassify(dataArr, weakClassArr)\n                errArr = np.mat(np.ones((len(dataArr), 1)))\n                number=1-float(errArr[predictions != np.mat(LabelArr).T].sum() / len(dataArr) * 100)\n                print('训练集的错误率:%.3f%%' % float(errArr[predictions != np.mat(LabelArr).T].sum() / len(dataArr) * 100))\n                # print(\"33333333\")\n                print(self.train)\n                if self.train==None:\n                        self.train=\"test6.txt\"\n                # print(\"444444444\")\n                print(self.train)\n                # train = \"test6.txt\"\n                testArr, testLabelArr = self.loadDataSet(self.train)\n                predictions = self.adaClassify(testArr, weakClassArr)\n                print(predictions)\n                errArr = np.mat(np.ones((len(testArr), 1)))\n                number1=1-float(errArr[predictions != np.mat(testLabelArr).T].sum() / len(testArr) * 100)\n                print('测试集的错误率:%.3f%%' % float(errArr[predictions != np.mat(testLabelArr).T].sum() / len(testArr) * 100))\n                from my_adaboosting_SVM_ROC import plotROC\n                plotROC(aggClassEst.T, LabelArr)\n                return number ,number1\n", "\n\n", "loadDataSet的代码如下", "\n\n", "        # 导入数据\n        def loadDataSet(fileName):\n                print(\"hhhhhhhhhhhhhhhhh\")\n                numFeat = len((open(fileName).readline().split('\\t')))\n                dataMat = [];\n                labelMat = []\n                fr = open(fileName)\n                for line in fr.readlines():\n                        lineArr = []\n                        curLine = line.strip().split('\\t')\n                        for i in range(numFeat - 1):\n                                lineArr.append(float(curLine[i]))\n                        dataMat.append(lineArr)\n                        labelMat.append(float(curLine[-1]))\n\n                return dataMat, labelMat\n", "\n\n", "运行结果："]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在dx&amp;#61;(t[1]-t[0])/2之前&amp;#xff0c;加print(t)&lt;br /&gt;输出t看看是不是只有1个维度&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["matplotlib.colors.LogNorm代码设置横纵参数报错", ["问题遇到的现象和发生背景", "\n", "matplotlib.colors.LogNorm代码设置横纵参数的时候出错", "\n", "问题相关代码，请勿粘贴截图", "\n", "    ", "nm", "= matplotlib.colors.LogNorm(vmin=psd.min(),vmax=psd.max())\n    ", "dx", "=(t[", "1", "]-t[", "0", "])/", "2", "\n    ", "dy", "=(f[", "1", "]-f[", "0", "])/", "2", "\n    ", "xmesh", "=t-dx\n    ", "xmesh", "=np.append(xmesh,t[-", "1", "]+dx)\n    ", "ymesh", "=f-dy\n    ", "ymesh", "=np.append(ymesh,f[-", "1", "]+dy)\n\n", "\n", "运行结果及报错内容", "\n", "warnings", ".warn('nperseg = {", "0", ":d} is greater than input length '\n", "UserWarning", ": nperseg = ", "256", " is greater than input length  = ", "100", ", using nperseg = ", "100", "\n", "Traceback", " (most recent call last):\n  ", "File", " ", "\"E:\\python practice\\1234\\plmi.py\"", ", line ", "83", ", in <module>\n    ", "dx", "=(t[", "1", "]-t[", "0", "])/", "2", "\n", "IndexError", ": index ", "1", " is out of bounds for axis ", "0", " with size ", "1", "\n\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码是用于读取tif图形文件立体呈现地形&amp;#xff0c;在用数据文件data\\alaska\\clipped_elev.tif正常显示&amp;#xff0c;使用其他数据文件显示不正常&amp;#xff0c;说明代码没有问题&amp;#xff0c;是数据文件本身问题&amp;#xff0c;检查数据格式是否符合要求。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["mayvai使用tif绘制地形图", ["问题遇到的现象和发生背景", "\n", "使用在国家地理云数据平台下载的DEM高程数据绘制地形图时，x与y轴似乎合在了一起", "\n", "问题相关代码，请勿粘贴截图", "\n", "\n", "import", " numpy ", "as", " np\n", "from", " mayavi ", "import", " mlab\n", "from", " osgeo ", "import", " gdal\ngdal.UseExceptions()\n\ndef ", "read", "(filename):\n    ds = gdal.", "Open", "(filename)\n    elev = ds.ReadAsArray()\n\n    # ", "True", " x, y coordinates\n    x0, dx, dxdy, y0, dydx, dy = ds.GetGeoTransform()\n    i, j = np.mgrid[:elev.shape[", "0", "], :elev.shape[", "1", "]]\n    x = x0 + dx * j + dxdy * i\n    y = y0 + dy * i + dydx * j\n\n    ", "return", " ds.ReadAsArray(), x, y\n\nz, x, y = ", "read", "(", "'ASTGTMV003_N02W064_dem.tif'", ")\n\n\nfig = mlab.figure()\nmlab.mesh(x, y, z, colormap=", "'gist_earth'", ")\nmlab.axes()\nmlab.", "show", "()\n", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "使用原GitHub中的tif文件则可绘出地形图 ", "https://github.com/joferkington/scipy2015-3d_printing", "\n", "我想要达到的结果", "\n", "问题出在哪"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;截取前10个字符就行了啊&amp;#xff0c;望采纳&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["首次发言，请各位帮助一下，excel导入后显示的年月日问题", ["1.问题遇到的现象和发生背景", "经过学习开始了第一次的编程尝试，目的是做一个按年月日显示温度的表格，目前目标是显示一个区域的温度。", "最终目标是显示3个区域的温度以及从网络实时读取当日的温度，并且X轴显示的日期为间隔10天或者20天。", "目前遇到的问题是，在导入excel中的时间和温度以后，时间的显示出现了问题，一直显示为：2021-12-11 00:00:00。", "这种带有后面时间的数据，导致生成的表格X轴显示不正确。", "\n", "2.问题相关代码，请勿粘贴截图", "以下为我的详细代码", "import openpyxl as op", "import numpy as np", "import pandas as pd", "import matplotlib.pyplot as plt", "import datetime", "import xlrd", "\n", "wb = op.load_workbook('R&D温度湿度_2021.xlsx')", "sheet = wb['Sheet1']", "date_1 = []", "temp_1 = []", "n = 4", "while 1:", "    p_date = 'A'+str(n)", "    p_temp = 'B'+str(n)", "    if sheet[p_date].value == None:", "        break", "    date_1.append(sheet[p_date].value)", "    temp_1.append(sheet[p_temp].value)", "    n = n + 1", "for i in  range(len(date_1)):", "    print(date_1[i],' ',temp_1[i])", "\n", "x = date_1", "y = temp_1", "plt.figure(figsize=(30,8),dpi=720)", "plt.plot(x,y,color=\"r\",linestyle='-.',label='wenshidu')", "plt.legend()", "x_lable=[\"{}月30日\".format(i)for i in x]", "plt.xticks(x[::5],x_lable[::5])#设置横轴大小", "plt.yticks(range(0,40,5)) #y轴温度范围", "plt.grid(linestyle='--',alpha=0.5)#添加网格显示", "plt.xlabel('riqi')#X轴标题", "plt.ylabel('wendu')#Y轴标题", "plt.title('tianqi')#表头", "plt.show", "\n", "3.运行结果及报错内容", "部分运行结果如下所示：", "2021-09-29 00:00:00   21.6", "2021-09-30 00:00:00   24.6", "2021-10-01 00:00:00   23.2", "2021-10-02 00:00:00   23", "2021-10-03 00:00:00   21.4", "2021-10-04 00:00:00   22.1", "2021-10-05 00:00:00   20.5", "2021-10-06 00:00:00   19.6", "2021-10-07 00:00:00   24.8", "2021-10-08 00:00:00   23.4", "\n", "excel部分数据如下所示：", "    1F回风", "日付    温度    湿度", "2021/9/29    21.6    76.6", "2021/9/30    24.6    68.4", "2021/10/1    23.2    75.3", "2021/10/2    23    61.5", "2021/10/3    21.4    85.8", "2021/10/4    22.1    48.2", "2021/10/5    20.5    48.7", "2021/10/6    19.6    54.1", "\n", "4.我的解答思路和尝试过的方法", "尝试了使用datetime.date 但是没有成功，转换的方式还没有掌握", "也可能是从一开始思路错误，自己无法判断", "\n", "5.我想要达到的结果", "想要正确的将时间显示为年/月/日 并且可以在图表中反应出来", "\n", "最后，感谢各位的协助。", "谢谢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;请采纳&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;import datetime\nimport &lt;span class=\"hljs-keyword\"&gt;time&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# time&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(time.strftime(&lt;span class=\"hljs-string\"&gt;&amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;&lt;/span&gt;, time.localtime()))\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(time.strftime(&lt;span class=\"hljs-string\"&gt;&amp;#34;%Y-%m-%d&amp;#34;&lt;/span&gt;, time.localtime()))\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(time.strftime(&lt;span class=\"hljs-string\"&gt;&amp;#34;%H:%M:%S&amp;#34;&lt;/span&gt;, time.localtime()))\n&lt;span class=\"hljs-comment\"&gt;# datetime&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(datetime.datetime.now().strftime(&lt;span class=\"hljs-string\"&gt;&amp;#34;%Y-%m-%d&amp;#34;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["datetime.datetime'>怎么去掉时分秒", ["\nimport numpy as np\nimport pandas as pd\nimport datetime\nfrom dateutil", ".parser", " import parse\n\ndata1 = pd", ".read_csv", "(", "'result.txt'", ",sep=", "'\\t'", ")\ndata1 = pd", ".DataFrame", "(data1)\ndata1 = np", ".array", "(data1)\n\n", "print", "(data1[", "0", "][", "3", "])", "\ndata1", "[0]", "[3]", " = parse(data1", "[0]", "[3]", ")\n", "print", "(type(data1[", "0", "][", "3", "])", ")\n"]], "Tag": "算法设计"}
{"Answer": "CV_EXPORTS_W void inRange(InputArray src, InputArray lowerb,\r\n                          InputArray upperb, OutputArray dst);\r\nCV_THRESH_BINARY_INV\r\n你查下python中你对应opencv版本定义的代码，看这个常量参数，有没有，就可以反向把区间外的东西置白", "Konwledge_Point": "应对NP完全问题", "Question": ["python-opencv2的cv2.inRange把特定颜色提取到白色背景", ["    lower=np.array(lower,dtype=\"uint8\")\n    upper=np.array(upper,dtype=\"uint8\")\n    hsv=cv2.cvtColor(image,cv2.COLOR_RGB2HSV)\n    cv2.imshow(\"hsv\",hsv)\n    mask=cv2.inRange(hsv,lower,upper)\n", "\n\n", "这里mask得到了在lower和upper之间的颜色，但是还是在原图里面的，如何把它提取到一张白色的背景里面呢，或者怎么把原图其他部分变成白色？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1.image要求是CV_8UC1或者CV_8UC3&amp;#xff0c;你这个numpy操作之后变成浮点数了&amp;#xff0c;canny不支持的。&lt;br /&gt;2.改成edges &amp;#61; cv.Canny(image, threshold1&amp;#61;50, threshold2&amp;#61;200, apertureSize&amp;#61;3)&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["OpenCv cv.Canny函数总是报错", ["import", " cv2 as cv\n", "import", " numpy as np\n\n", "def", " line_detect(image):\n\n    ", "edges", " = cv.Canny(image, ", "50", ", ", "200", ", apertureSize=", "3", ")\n    ", "print", "(", "\"edges\"", ", edges)\n    ", "lines", " = cv.HoughLines(edges, ", "1", ", np.pi/", "180", ", ", "150", ")\n    ", "for", " line in lines:\n        ", "rho", ", theta = line[", "0", "]\n        ", "a", " = np.cos(theta)\n        ", "b", " = np.sin(theta)\n        ", "x0", " = a * rho\n        ", "y0", " = b * rho\n        ", "x1", " = int(x0 + ", "1000", " * (-b))\n        ", "y1", " = int(y0 + ", "1000", " * (a))\n        ", "x2", " = int(x0 - ", "1000", " * (-b))\n        ", "y2", " = int(y0 - ", "1000", " * (a))\n        ", "cv", ".line(image, (x1, y1), (x2, y2), (", "0", ", ", "0", ", ", "255", "), ", "2", ")\n    ", "cv", ".imshow(", "\"image_lines\"", ", image)\n\n", "print", "(", "\"Hello\"", ")\n", "src", " = cv.imread(", "\"F:/2.png\"", ")\n\n", "src1", " = np.array(src)\n\n", "src1", "[..., ", "0", "] = src1[..., ", "0", "] * ", "0", ".", "299", "\n", "src1", "[..., ", "1", "] = src1[..., ", "1", "] * ", "0", ".", "587", "\n", "src1", "[..., ", "2", "] = src1[..., ", "2", "] * ", "0", ".", "114", "\n\n", "src1", " = np.sum(src1, axis=-", "1", ")\n\n", "line_detect", "(src1)\n\n", "cv", ".waitKey(", "0", ")\n", "\n", "Hello", "Traceback (most recent call last):", "  File \"E:/PycharmProjects/learnPython/venv/test.py\", line 33, in ", "    line_detect(src1)", "  File \"E:/PycharmProjects/learnPython/venv/test.py\", line 6, in line_detect", "    edges = cv.Canny(image, 50, 200, apertureSize=3)", "cv2.error: OpenCV(4.5.2) :-1: error: (-5:Bad argument) in function 'Canny'", "\n", "\n", "Overload resolution failed:", "\n", "image data type = 8 is not supported", "Expected Ptrcv::UMat for argument 'image'", "Required argument 'threshold2' (pos 4) not found", "Required argument 'threshold2' (pos 4) not found", "\n", "\n", "![img]("]], "Tag": "算法设计"}
{"Answer": "解决了。。。。。。。", "Konwledge_Point": "应对NP完全问题", "Question": ["bp神经网络怎么实际应用啊？Python", ["原始数据输入，但是输出节点使用激活函数之后结果都是小于一的数，求出来的误差很大，而且误差会先减小后变大，感觉错误好多但不知道在哪 ", "\n\n", "\n import numpy as np\n\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\n\ndef main():\n    # 14条数据\n    data = np.array([\n        [1, 0, 0, 1, 0, 1, 1, 1],\n        [0, 0, 1, 1, 0, 0, 1, 0],\n        [1, 1, 0, 1, 1, 1, 0, 1],\n        [0, 1, 0, 1, 0, 0, 1, 1],\n        [1, 0, 1, 1, 0, 1, 1, 1],\n        [1, 1, 0, 0, 1, 1, 1, 0],\n        [0, 0, 0, 1, 0, 0, 1, 1],\n        [1, 0, 1, 1, 0, 1, 1, 1],\n        [1, 1, 0, 1, 0, 1, 0, 1],\n        [1, 0, 0, 0, 1, 0, 1, 1],\n        [1, 0, 0, 1, 0, 1, 1, 0],\n        [0, 0, 1, 1, 0, 1, 0, 1],\n        [1, 0, 0, 1, 0, 0, 1, 1],\n        [0, 1, 0, 1, 0, 1, 1, 1]])\n    print(\"原始数据：\\n\", data)\n    # 十四条数据的跳高成绩\n    highJump = np.array(\n        [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0])\n    print(\"十四条数据的跳高成绩：\\n\", highJump)\n    # 第十五条数据的输入\n    data15 = np.array([0, 1, 0, 1, 1, 0, 1, 0])\n    print(\"第十五条数据的输入：\\n\", data15)\n    # 设置输入层与隐藏层之间的权值和阈值\n    wInput = np.random.random(size=(6, 8))/10\n    print(\"输入层与隐藏层之间的六组权值:\\n\", wInput)\n    bInput = np.random.random(size=(6, 8))/10\n    print(\"输入层与隐藏层之间的六组阈值:\\n\", bInput)\n    # 设置隐藏层与输出层之间的权值和阈值\n    wOutput = np.random.random(size=6)/10\n    print(\"隐藏层与输出层之间的一组权值\", wOutput)\n    bOutput = np.random.random(size=6)/10\n    print(\"隐藏层与输出层之间的一组阈值\", bOutput)\n    loss = 1\n    count = 0\n    while loss > 0.1:\n        count = count + 1\n        loss = 0\n        outputNode = []\n        for i in range(0, 14):\n\n            # 正向传播\n            # 计算隐藏层节点输入\n            hide = []\n            for j in range(0, 6):\n                hideNode = 0\n                for k in range(0, 8):\n                    hideNode = data[i, k] * wInput[j, k] + \\\n                        bInput[j, k] + hideNode\n                # print(hideNode)\n                hideNode = sigmoid(hideNode)  # 激活函数\n                hide.append(hideNode)\n            hide = np.array(hide)\n            # print(\"隐藏层结点\", hide)\n            output = 0\n            for j in range(0, 6):\n                output = hide[j] * wOutput[j] + bOutput[j] + output\n            output = sigmoid(output)\n            outputNode.append(output)\n            # print(\"输出层结点\", output)\n            loss = ((output - highJump[i]) * (output - highJump[i])) / 2 + loss\n        outputNode = np.array(outputNode)\n        # 反向传播\n        # print(\"隐藏层结点\", hide)\n        for i in range(0, 14):\n            # 隐藏层与输出层之间权值阈值更新\n            wOutputLoss = []\n            for j in range(0, 6):\n                wOutputLoss.append((outputNode[i] - highJump[i]) *\n                                   outputNode[i] * (1 - outputNode[i])\n                                   * hide[j])\n            wOutputLoss = np.array(wOutputLoss)\n            # print(\"wOutputLoss\", wOutputLoss)\n            bOutputLoss = []\n            for j in range(0, 6):\n                bOutputLoss.append((outputNode[i] - highJump[i]) *\n                                   outputNode[i] * (1 - outputNode[i]))\n            bOutputLoss = np.array(bOutputLoss)\n            # print(\"bOutputLoss\", bOutputLoss)\n            for j in range(0, 6):\n                wOutput[j] = wOutput[j] - 0.1 * wOutputLoss[j]\n                bOutput[j] = bOutput[j] - 0.1 * bOutputLoss[j]\n            # print(\"隐藏层与输出层更新后权值和阈值\", wOutput, bOutput)\n            # 输入层与隐藏层之间权值更新\n            wInputLoss = np.ones((6, 8)) * 0\n            for j in range(0, 6):\n                for k in range(0, 8):\n                    wInputLoss[j][k] = ((outputNode[i] - highJump[i]) *\n                                        outputNode[i] *\n                                        (1 - outputNode[i]) * wOutput[j]\n                                        * hide[j] * (1 - hide[j]) * data[i][k])\n            wInputLoss = np.array(wInputLoss)\n            # print(\"wIutputLoss\", wInputLoss)\n            bInputLoss = np.ones((6, 8)) * 0\n            for j in range(0, 6):\n                for k in range(0, 8):\n                    bInputLoss[j][k] = ((outputNode[i] - highJump[i]) *\n                                        outputNode[i] * (1 - outputNode[i]) *\n                                        wOutput[j] * hide[j] * (1 - hide[j]))\n            bInputLoss = np.array(bInputLoss)\n            # print(\"bIutputLoss\", bInputLoss)\n            for j in range(0, 6):\n                for k in range(0, 8):\n                    wInput[j][k] = wInput[j][k] - 0.1 * wInputLoss[j][k]\n                    bInput[j][k] = bInput[j][k] - 0.1 * bInputLoss[j][k]\n            # print(\"输入层与隐藏层之间更新后的权值和阈值\", wInput, bInput)\n            # print(\"输出\", output)\n        print(\"学习前的loss\", loss)\n        loss = 0\n        for i in range(0, 14):\n            # 正向传播\n            # 计算隐藏层节点输入\n            hide = []\n            for j in range(0, 6):\n                hideNode = 0\n                for k in range(0, 8):\n                    hideNode = data[i, k] * wInput[j, k] + \\\n                        bInput[j, k] + hideNode\n                hideNode = sigmoid(hideNode)  # 激活函数\n                hide.append(hideNode)\n            hide = np.array(hide)\n            output = 0\n            for j in range(0, 6):\n                output = hide[j] * wOutput[j] + bOutput[j] + output\n            output = sigmoid(output)\n            loss = ((output - highJump[i]) * (output - highJump[i])) / 2 + loss\n            # print(\"输出\", output)\n        print(\"学习后的loss\", loss)\n\n    # 预测\n    hide = []\n    for j in range(0, 6):\n        hideNode = 0\n        for k in range(0, 8):\n            hideNode = data15[k] * wInput[j, k] + \\\n                bInput[j, k] + hideNode\n            hideNode = sigmoid(hideNode)  # 激活函数\n        hide.append(hideNode)\n    hide = np.array(hide)\n    output = 0\n    for j in range(0, 6):\n        output = hide[j] * wOutput[j] + bOutput[j] + output\n    output = sigmoid(output)\n    print(output)\n    print(loss)\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;File &amp;#34;d:\\OneDrive - 东南大学\\python practice\\cs2.py&amp;#34;, line 37, in&lt;br /&gt;a&amp;#61;float(conversion_degree_total.pop(0))&lt;br /&gt;这个代码在哪里&amp;#xff0c;咋没看见你发的有&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于数据处理的问题，如何解决？", ["程序一直报错", "\n", "\n", "\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " math\n", "import", " pandas ", "as", " pd\n", "import", " numpy ", "as", " np\n", "import", " csv\n", "from", " scipy.optimize ", "import", " curve_fit\n\nplt.close(", "\"all\"", ")\n\n", "def", " ", "f_1", "(", "x, k, b", "):\n    ", "return", " k * x + b\n\nRa=", "8.314", "\n", "#源文件地址和目标文件夹", "\ndata_address=", "r'C:\\Users\\keyang\\Desktop\\test.csv'", "\nsave_floder=", "r'C:\\Users\\keyang\\Desktop'", "\n", "#生成文件的头部行", "\nhead_name = [", "'T_start'", ",", "'T_end'", ",", "'Conversion_degree'", ",", "'Activation_energy'", "]\n", "#写入CSV文件", "\n", "with", " ", "open", "(save_floder + ", "'\\\\'", " + ", "'result.csv'", ",", "'w'", ", newline=", "''", ",encoding=", "'utf-8-sig'", ") ", "as", " list_writer:\n    writer = csv.writer(list_writer)\n    writer.writerow(head_name)\n", "#指定转化率间隔", "\nconversion_value = ", "0.05", "\n", "#读取源文件", "\ndf = pd.read_csv(data_address)\nconversion_degree_total = df[", "'Degree'", "]\nTemperature_total = df[", "'Temp'", "]\n", "#循环次数", "\nnum = ", "int", "(", "0.9", "/conversion_value)\n", "for", " i ", "in", " ", "range", "(num):\n    x_range=[]\n    y_range=[]\n    Temperature_range=[]\n    Top=conversion_degree_total[", "0", "]\n    ", "while", " conversion_degree_total ", "is", " ", "not", " ", "None", ":\n        a=conversion_degree_total.pop(", "0", ")\n        t=Temperature_total.pop(", "0", ")\n        Temperature_range.append(t)\n        x_num=", "1", "/t\n        x_range.append(x_num)\n        y_num=math.log((-math.log(", "1", "-a))/(t**(", "2", ")))\n        y_range.append(y_num)\n        ", "if", " ", "float", "(conversion_degree_total.values[", "0", "]-Top)>conversion_value:\n            ", "break", "\n    ", "#x_array,y_array是我们要拟合的数据", "\n    x_array = np.array(x_range)\n    y_array = np.array(y_range)\n    k, b = curve_fit(f_1, x_array, y_array)[", "0", "]\n    Ea=-Ra*k\n    ", "with", " ", "open", "(save_floder +", "'\\\\'", "+ ", "'result.csv'", ",", "'a'", ", newline=", "''", ",encoding=", "'utf-8-sig'", ") ", "as", " list_writer:\n         writer = csv.writer(list_writer)\n         writer.writerow(Temperature_range[", "0", "],Temperature_range[-", "1", "],conversion_value*(i+", "1", "),Ea)\n", "\n", "运行结果及报错内容", "\n", "Traceback (most recent call last):", "  File \"D:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\", line 3361, in get_loc", "    return self._engine.get_loc(casted_key)", "  File \"pandas", "_libs\\index.pyx\", line 76, in pandas._libs.index.IndexEngine.get_loc", "  File \"pandas", "_libs\\index.pyx\", line 108, in pandas._libs.index.IndexEngine.get_loc", "  File \"pandas", "_libs\\hashtable_class_helper.pxi\", line 2131, in pandas._libs.hashtable.Int64HashTable.get_item", "  File \"pandas", "_libs\\hashtable_class_helper.pxi\", line 2140, in pandas._libs.hashtable.Int64HashTable.get_item", "KeyError: 0", "\n", "The above exception was the direct cause of the following exception:", "\n", "Traceback (most recent call last):", "  File \"d:\\OneDrive - 东南大学\\python practice\\cs2.py\", line 37, in ", "    a=float(conversion_degree_total.pop(0))", "  File \"D:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\series.py\", line 4850, in pop", "    return super().pop(item=item)", "  File \"D:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\", line 870, in pop", "    result = self[item]", "  File \"D:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\series.py\", line 942, in ", "getitem", "    return self._get_value(key)", "  File \"D:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\series.py\", line 1051, in _get_value", "    loc = self.index.get_loc(label)", "  File \"D:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\", line 3363, in get_loc", "    raise KeyError(key) from err", "KeyError: 0", "\n", "我的解答思路和尝试过的方法", "\n", "无", "\n", "excel表格里面有一列数据，想要每间隔固定的差值的一部分数据进行计算，然后将计算的结果写入一个新的csv文件", "\n", "数据实例", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;针对你提出的问题&amp;#xff0c;我来逐一回答&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;&lt;p&gt;AttributeError: module &amp;#39;paddle.fluid.dygraph&amp;#39; has no attribute &amp;#39;to_varlable&amp;#39;&lt;br /&gt;这个错误是因为拼写错误&amp;#xff0c;正确的应该是 to_variable&amp;#xff0c;将代码中 to_varlable 修改为 to_variable 即可。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;NameError: name &amp;#39;best_test_acc&amp;#39; is not defined&lt;br /&gt;这个错误是因为没有定义 best_test_acc 变量&amp;#xff0c;需要在模型训练前先定义这个变量。可以在代码前面加上一行 best_test_acc &amp;#61; 0。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;ValueError: Model saved directory &amp;#39;./work/24&amp;#39; is not exists.&lt;br /&gt;这个错误是因为模型保存路径不正确&amp;#xff0c;你需要检查一下模型保存路径是否正确&amp;#xff08;即模型训练部分的代码中是否有保存模型的代码&amp;#xff0c;以及你的模型保存目录是否存在&amp;#xff09;。&lt;/p&gt;\n&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;希望以上回答能够帮到你解决问题&amp;#xff0c;祝你成功实现手写数字识别&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["深度学习入门实践的典型例题-手写数字识别", ["深度学习入门实践-手写数字识别", "代码如下，是在aistudio上运行的，但是不知道怎么回事运行不了", "部分错误如下：", "模型训练部分出现的错误", "AttributeError: module 'paddle.fluid.dygraph' has no attribute 'to_varlable'", "\n", "模型验证部分出现的错误", "NameError: name 'best_test_acc' is not defined", "\n", "预测的问题", "ValueError: Model saved directory './work/24' is not exists.", "\n", "#导入需要的包", "\nimport numpy as np\nimport paddle as paddle\n", "from", " PIL import Image\nimport matplotlib.pyplot as plt\nimport os\n", "from", " paddle.fluid.dygraph import Linear\n", "#训练数据集准备", "\n", "BUF_SIZE", "=512\n", "BATCH_SIZE", "=128\ntrain_reader = paddle.batch(\n    paddle.reader.shuffle(paddle.dataset.mnist.train(),", "buf_size", "=BUF_SIZE),batch_size=BATCH_SIZE \n)\n\n", "#测试数据集准备", "\n", "#用于训练的数据提供器，每次从缓存中随机读取批次大小的数据", "\ntest_reader = paddle.batch(\n    paddle.reader.shuffle(paddle.dataset.mnist.test(),", "buf_size", "=BUF_SIZE),batch_size=BATCH_SIZE \n)\n", "#定义多层感知器", "\n", "#动态图定义多层感知器", "\nimport paddle.fluid as fluid #防止出现name fluid is ", "not", " defined\nclass multilayer_perceptron(fluid.dygraph.Layer):\n    def __init__(self):\n        super(multilayer_perceptron,self).__init__()\n        self.fc1 = Linear(", "input_dim", "=28*28,output_dim=100,act='relu')\n        self.fc2 = Linear(", "input_dim", "=100,output_dim=100,act='relu')\n        self.fc3 = Linear(", "input_dim", "=100,output_dim=10,act='softmax')\n    def forward(self,input_):\n        x = fluid.layers.reshape(input_,[input_.shape[0],-1])\n        x = self.fc1(x)\n        x = self.fc2(x)\n        y = self.fc3(x)\n        return y\n", "#模型训练", "\nwith fluid.dygraph.guard():\n    ", "model", "=multilayer_perceptron() #模型实例化\n    model.train() #训练模式\n    ", "opt", "=fluid.optimizer.Adam(learning_rate=fluid.dygraph.ExponentialDecay(\n        ", "learning_rate", "=0.01,\n        ", "decay_steps", "=4000,\n        ", "decay_rate", "=0.1,\n        ", "staircase", "=", "True", "\n    ),", "parameter_list", "=model.parameters())\n\n    ", "epochs_num", "=30 #选代次数\n    \n    ", "for", " pass_num ", "in", " range(epochs_num):\n        lr = opt.current_step_lr() \n        ", "print", "(", "\"learning-rate:\"", ",lr)\n\n        ", "for", " batch_id,date ", "in", " enumerate(train_reader()):\n            ", "images", "=np.array([x[0].reshape(1,28,28) ", "for", " x ", "in", " data],np.float32) \n\n            labels = np.array([x[1] ", "for", " x ", "in", " data]).astype(", "'int64'", ")\n            labels = labels[:,np.newaxis]\n            \n            ", "image", "=fluid.dygraph.to_variable(images) \n            ", "label", "=fluid.dygraph.to_varlable(labels) \n            ", "predict", "=model(image) #预测\n            #", "print", "(predict)\n            ", "loss", "=fluid.layers.cross_entropy(predict,label) \n            ", "avg_loss", "=fluid.layers.mean(loss)#获取loss\n            ", "acc", "=fluid.layers.eccuracy(predict,label)#计算精度 \n            avg_loss.backvard()\n            opt.minimize(avg_loss) \n            model.clear_gredients()\n\n            ", "all_train_iter", "=all_train_iter+256 \n            all_train_iters.append(all_train_iter) \n            all_train_costs.append(loss.numpy()[0]) \n            a1l_train_accs.append(acc,numpy()[0]) \n            \n            \n            ", "if", " batch_idlse ", "and", " batch_id%", "50", "==0:\n                prinf(", "\"train_pass:{},batch_id:{},train_loss:{},train_acc:{}\"", ",format(pass_num,batch_id,avg_loss.numpy(),acc.numpy())) \n\n", "#模型验证", "\nwith fluid.dygraph.guard():\n    accs = []\n    model.eval()#评估模式\n    ", "for", " batch_id,data ", "in", " enumerate(test_reader()):#测试集\n        ", "images", "=np.array([x[0].reshape(1,28,28) ", "for", " x ", "in", " data],np.float32)\n        labels = np.array([x[1] ", "for", " x ", "in", " data]).astype(", "'int64'", ")\n        labels = labels[:,np.newaxis]\n\n        ", "image", "=fluid.dygraph.to_variable(images)\n        ", "label", "=fluid.dygraph.to_variable(labels)\n\n        ", "predict", "=model(image)#预测\n        ", "acc", "=fluid.layers.accuracy(predict,label)\n        accs.append(acc.numpy()[0])\n        avg_acc = np.mean(accs)\n\n    \n    ", "if", " avg_acc >= best_test_acc:\n        best_test_acc = avg_acc\n        ", "if", " pass_num > 10:\n            fluid.save_dygraph(model.state_dict(),", "'./work/{}'", ".format(pass_num))#保存模型\n\n    ", "print", "(", "'Test:%d,Accuracy:%0.5f, Best: %0.5f'", "% (pass_num,avg_acc,best_test_acc))\n\n", "#图片预处理", "\ndef load_image(flie):\n    im = Image.open(flie).convert(", "'L'", ")\n    im = im.resize((28,28),Image.ANTIALIAS)\n    im = np.array(im).reshape(1,1,28,28).astype(np.float32)\n    #", "print", "(im)\n    im = im/255.0 * 2.0 - 1.0\n    return im\n\n", "#开始预测", "\n", "#构建预测动态图过程", "\nmodel_path = ", "'./work/24'", "\nwith fluid.dygraph.guard():\n    ", "model", "=multilayer_perceptron()#模型实例化\n    model_dict,", "_", "=fluid.load_dygraph(model_path)\n    model.load_dict(model_dict)\n    model.eval()\n    infer_img = load_image(infer_path)\n    ", "infer_img", "=np.array(infer_img).astype('float32')\n    ", "infer_img", "=infer_img[np.newaxis,:,:,:]\n    infer_img = fluid.dygraph.to_variable(infer_img)\n    ", "result", "=model(infer_img)\n\n    ", "print", "(", "\"infer results: %s\"", "% label_list[np.argmax(result.numpy())])\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这里的错误提示是说第107行self.conv_1(x)的输入x的维度不对&amp;#xff0c;输入x需要是1 channels而不是64 channels。x的维度应该是[64, 1, 28, 28]而不是[64, 28, 28]&amp;#xff0c;这里64是batch_size&amp;#xff0c;28是图片大小&amp;#xff0c;还需要一个channel的数目&amp;#xff08;和nn.Conv2d第一个参数对应&amp;#xff09;。你写的数据预处理的部分需要改一下。或者最简单的办法是在107行前面加一句对x的预处理&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;forward&lt;/span&gt;&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;self&lt;/span&gt;, x):\n        x &amp;#61; torch.unsqueeze(x,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;).&lt;span class=\"hljs-keyword\"&gt;type&lt;/span&gt;(torch.FloatTensor) &lt;span class=\"hljs-comment\"&gt;#增加一个channel的维度同时把tensor的数据类型改为float&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;#print(x.size(), x.type())&lt;/span&gt;\n        x &amp;#61; &lt;span class=\"hljs-keyword\"&gt;self&lt;/span&gt;.conv_1(x)\n        x &amp;#61; &lt;span class=\"hljs-keyword\"&gt;self&lt;/span&gt;.conv_2(x)\n        x &amp;#61; x.view(x.size(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;), -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-comment\"&gt;#将结果转化为向量&lt;/span&gt;\n        output &amp;#61; &lt;span class=\"hljs-keyword\"&gt;self&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;(x)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; output\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于#深度学习#的问题，如何解决？", ["问题遇到的现象和发生背景", "\n", "深度学习，模型训练遇到的问题", "\n", "\"\"\"\n卷积神经网络对MUIST数据集分类\n\"\"\"", "\n\n", "import", " torch\n", "from", " torch ", "import", " nn\n", "import", " numpy ", "as", " np\n", "import", " torch.optim ", "as", " optim\n", "from", " matplotlib ", "import", " pyplot\n", "import", " torch.nn.functional ", "as", " F\n", "from", " sklearn.model_selection ", "import", " train_test_split\n", "from", " torch.utils.data ", "import", " TensorDataset,DataLoader\n\n", "def", " ", "read_image", "(", "file_path", "):\n    ", "\"\"\"读取MNIST图片\n\n    Args:\n        file_path (str): 图片文件位置\n\n    Returns:\n        list: 图片列表\n    \"\"\"", "\n    ", "with", " ", "open", "(file_path,", "'rb'", ") ", "as", " f:\n        file = f.read()\n        img_num = ", "int", ".from_bytes(file[", "4", ":", "8", "],byteorder=", "'big'", ") ", "#图片数量", "\n        img_h = ", "int", ".from_bytes(file[", "8", ":", "12", "],byteorder=", "'big'", ") ", "#图片h", "\n        img_w = ", "int", ".from_bytes(file[", "12", ":", "16", "],byteorder=", "'big'", ") ", "#图片w", "\n        img_data = []\n        file = file[", "16", ":]\n        data_len = img_h*img_w\n\n        ", "for", " i ", "in", " ", "range", "(img_num):\n            data = [item/", "255", " ", "for", " item ", "in", " file[i*data_len:(i+", "1", ")*data_len]]\n            img_data.append(np.array(data).reshape(img_h,img_w))\n\n        ", "return", " img_data\n\n", "def", " ", "read_label", "(", "file_path", "):\n    ", "with", " ", "open", "(file_path,", "'rb'", ") ", "as", " f:\n        file = f.read()\n        label_num = ", "int", ".from_bytes(file[", "4", ":", "8", "],byteorder=", "'big'", ") ", "#label的数量", "\n        file = file[", "8", ":]\n        label_data = []\n        ", "for", " i ", "in", " ", "range", "(label_num):\n            label_data.append(file[i])\n        ", "return", " label_data\n\n\ntrain = read_image(", "\"data/mnist/train-images-idx3-ubyte/train-images.idx3-ubyte\"", ")\nlabel = read_label(", "\"data/mnist/train-labels-idx1-ubyte/train-labels.idx1-ubyte\"", ")\n", "# pyplot.imshow(train[0].reshape((28,28)),cmap=\"gray\")", "\n", "# pyplot.show()", "\n", "print", "(train[", "1", "].shape)\n\n", "#定义超参数", "\ninput_size = ", "28", " ", "#图像总尺寸28*28", "\nnum_classes = ", "10", " ", "#标签的种类", "\nnum_epochs = ", "3", " ", "#训练的总循环周期", "\nbatch_size = ", "64", " ", "#一个批次的大小，64张图片", "\n\n", "#划分数据集", "\ntrain_img,valid_img,train_label,valid_label = train_test_split(train,label,test_size=", "0.2", ",shuffle=", "True", ")\n", "# train_img,valid_img,train_label,valid_label = map(torch.tensor,(train_img,valid_img,train_label,valid_label))", "\n", "# print(type(train_img),type(train_label))", "\n\ntrain_img = np.array(train_img)\ntrain_label = np.array(train_label)\nvalid_img = np.array(valid_img)\nvalid_label = np.array(valid_label)\n\ntrain_img = torch.from_numpy(train_img)\ntrain_label = torch.from_numpy(train_label)\nvalid_img = torch.from_numpy(valid_img)\nvalid_label = torch.from_numpy(valid_label)\n\n", "#构建batch数据", "\ntrain_ds = TensorDataset(train_img,train_label)\ntrain_loader = DataLoader(dataset=train_ds,batch_size=batch_size,shuffle=", "True", ")\ntest_dl = TensorDataset(valid_img,valid_label)\ntest_loader = DataLoader(dataset=test_dl,batch_size=batch_size,shuffle=", "True", ")\n\n\n\n", "class", " ", "MyNet_CNN", "(nn.Module):\n    ", "def", " ", "__init__", "(", "self", "):\n        ", "super", "(MyNet_CNN, self).__init__()\n        self.conv_1 = nn.Sequential( ", "#输入 （1，28，28）", "\n            nn.Conv2d(\n                ", "1", ", ", "#输入的特征图数（原始图为灰度图一层）", "\n                ", "16", ",  ", "#得到16个特征图", "\n                kernel_size=", "5", ", ", "#卷积核的大小", "\n                stride=", "1", ", ", "#步长", "\n                padding=", "2", " ", "#图片填充层数", "\n            ), ", "#输出（16，28，28）", "\n            nn.ReLU(), ", "#relu层（激活函数）", "\n            nn.MaxPool2d(kernel_size=", "2", "), ", "#进行池化操作（2*2区域），输出结果为 （16，24，24）", "\n        )\n        self.conv_2 = nn.Sequential( ", "#进入下一个层 输入（16，24，24）", "\n            nn.Conv2d(", "16", ", ", "32", ", kernel_size=", "5", ", stride=", "1", ",padding=", "2", "), ", "#输出（32，14，14）", "\n            nn.ReLU(),\n            nn.MaxPool2d(", "2", "),", "#输出（32，7，7）", "\n        )\n        self.out = nn.Linear(", "32", "*", "7", "*", "7", ",", "10", ") ", "#全连接层的得到的结果", "\n\n    ", "\"\"\"前向传播\"\"\"", "\n    ", "def", " ", "forward", "(", "self, x", "):\n        x = self.conv_1(x)\n        x = self.conv_2(x)\n        x = x.view(x.size(", "0", "), -", "1", ") ", "#将结果转化为向量", "\n        output = self.out(x)\n        ", "return", " output\n\n", "\"\"\"准确率作为评估标准\"\"\"", "\n", "def", " ", "accuracy", "(", "predictions,labels", "):\n    pred = torch.", "max", "(predictions.data,", "1", ")[", "1", "]\n    rights = pred.eq(labels.data.view_as(pred)).", "sum", "()\n    ", "return", " rights,", "len", "(labels)\n\n", "\"\"\"训练网络模型\"\"\"", "\n", "#实例化", "\nnet = MyNet_CNN()\n", "#s损失函数", "\ncriterion = nn.CrossEntropyLoss()\n", "#优化器", "\noptimizer = optim.Adam(net.parameters(),lr=", "0.001", ")\n\n", "#开始训练循环", "\n", "for", " epoch ", "in", " ", "range", "(num_epochs):\n    ", "#当前的epoch结果(准确率)保存下来", "\n    train_rights = []\n\n    ", "for", " batch_idx,(data,target) ", "in", " ", "enumerate", "(test_loader):  ", "#针对容器的每一个批次进行循环", "\n        net.train()\n        output =net(data)\n        loss =criterion(output,target)\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        right = accuracy(output,target)\n        train_rights.append(right)\n\n        ", "if", " batch_idx % ", "100", " == ", "0", ":\n            net.", "eval", "()\n            val_rights = []\n\n            ", "for", " (bata,target) ", "in", " test_loader:\n                output = net(data)\n                right =accuracy(output,target)\n\n            ", "#准确率计算", "\n            train_r = (", "sum", "(tup[", "0", "] ", "for", " tup ", "in", " train_rights),", "sum", "(tup[", "1", "] ", "for", " tup ", "in", " train_rights))\n            val_r = (", "sum", "(tup[", "0", "] ", "for", " tup ", "in", " val_rights),", "sum", "(tup[", "1", "] ", "for", " tup ", "in", " val_rights))\n\n            ", "print", "(", "'当前epoch: {} [{}/{} ({:.0f}%)]\\t损失: {:.6f}\\t训练集准确率: {:.2f}%\\t测试集正确率: {:.2f}%'", ".", "format", "(\n                epoch,batch_idx*batch_size,", "len", "(train_loader.dataset),\n                ", "100.", " * batch_idx / ", "len", "(train_loader),\n                loss.data,\n                ", "100.", " * train_r[", "0", "].numpy() / train_r[", "1", "],\n                ", "100.", " * val_r[", "0", "].numpy() / val_r[", "1", "]\n            ))\n\n", "\n", "运行结果及报错内容", "\n", "RuntimeError                              Traceback (most recent call last)\nInput In [1], in <cell line: 128>()\n   ", " 132 ", "for batch_idx,(data,target) in enumerate(test_loader):  ", "#针对容器的每一个批次进行循环", "\n   ", " 133 ", "    net.train()\n-->", " 134 ", "    output =net(data)\n   ", " 135 ", "    loss =criterion(output,target)\n   ", " 136 ", "    optimizer.zero_grad()\n\nFile D:\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py:1130, in Module._call_impl(self, *input, **kwargs)\n  ", " 1126 ", "# If we don't have any hooks, we want to skip the rest of the logic in", "\n  ", " 1127 ", "# this function, and just call forward.", "\n  ", " 1128 ", "if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n  ", " 1129 ", "        or _global_forward_hooks or _global_forward_pre_hooks):\n->", " 1130 ", "    return forward_call(*input, **kwargs)\n  ", " 1131 ", "# Do not call functions when jit is used", "\n  ", " 1132 ", "full_backward_hooks, non_full_backward_hooks = [], []\n\nInput In [1], in MyNet_CNN.forward(self, x)\n   ", " 106 ", "def forward(self, x):\n-->", " 107 ", "    x = self.conv_1(x)\n   ", " 108 ", "    x = self.conv_2(x)\n   ", " 109 ", "    x = x.view(x.size(0), -1) ", "#将结果转化为向量", "\n\n\n```c\nFile D:\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py:1130, in Module._call_impl(self, *input, **kwargs)\n  ", " 1126 ", "# If we don't have any hooks, we want to skip the rest of the logic in", "\n  ", " 1127 ", "# this function, and just call forward.", "\n  ", " 1128 ", "if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n  ", " 1129 ", "        or _global_forward_hooks or _global_forward_pre_hooks):\n->", " 1130 ", "    return forward_call(*input, **kwargs)\n  ", " 1131 ", "# Do not call functions when jit is used", "\n  ", " 1132 ", "full_backward_hooks, non_full_backward_hooks = [], []\n\nFile D:\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\container.py:139, in Sequential.forward(self, input)\n   ", " 137 ", "def forward(self, input):\n   ", " 138 ", "    for module in self:\n-->", " 139 ", "        input = module(input)\n   ", " 140 ", "    return input\n\nFile D:\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py:1130, in Module._call_impl(self, *input, **kwargs)\n  ", " 1126 ", "# If we don't have any hooks, we want to skip the rest of the logic in", "\n  ", " 1127 ", "# this function, and just call forward.", "\n  ", " 1128 ", "if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n  ", " 1129 ", "        or _global_forward_hooks or _global_forward_pre_hooks):\n->", " 1130 ", "    return forward_call(*input, **kwargs)\n  ", " 1131 ", "# Do not call functions when jit is used", "\n  ", " 1132 ", "full_backward_hooks, non_full_backward_hooks = [], []\n\nFile D:\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\conv.py:457, in Conv2d.forward(self, input)\n   ", " 456 ", "def forward(self, input: Tensor) -> Tensor:\n-->", " 457 ", "    return self._conv_forward(input, self.weight, self.bias)\n\nFile D:\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\conv.py:453, in Conv2d._conv_forward(self, input, weight, bias)\n   ", " 449 ", "if self.padding_mode != 'zeros':\n   ", " 450 ", "    return F.conv2d(F.pad(input, self._reversed_padding_repeated_twice, mode=self.padding_mode),\n   ", " 451 ", "                    weight, bias, self.stride,\n   ", " 452 ", "                    _pair(0), self.dilation, self.groups)\n-->", " 453 ", "return F.conv2d(input, weight, bias, self.stride,\n   ", " 454 ", "                self.padding, self.dilation, self.groups)\n\nRuntimeError: Given groups=1, weight of size [16, 1, 5, 5], expected input[1, 64, 28, 28] to have", " 1 ", "channels, but got", " 64 ", "channels instead\n\n", "\n", "\n###### 我的解答思路和尝试过的方法 \n毫无思路，不知道错哪\n```typescript\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这样吗&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/03778212663617.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["程序没有输出结果是什么问题", ["#include<stdio.h>", "int main()", "{", "    int month,n;", "    float p,x,sum;", "    scanf(\"%d%d%f\",&month,&n,&p);", "    if(month==1||(month>=7&&month<=9))", "    {", "        if(n>=20)", "        {", "            x=p", "0.05", "n;", "            sum=n", "p", "0.95;", "            printf(\"%s,%.2f,%.2f\",'5%',x,sum);", "        }", "        else", "            printf(\"%s,%.2f,%.2f\",'0%',0,n*p);", "\n", "}\n", "else", " ", "if", "((month>=", "10", "&&month<=", "12", ")||(month>=", "2", "&&month<=", "6", "))\n{\n    ", "if", "(n>=", "20", ")\n    {\n        ", "x", "=p*", "0", ".", "2", "*n;\n        sum=n*p*", "0", ".", "8", ";\n        ", "printf", "(", "\"%s,%.2f,%.2f\"", ",", "'20%'", ",", "x", ",sum);\n    }\n    ", "else", "\n        ", "printf", "(", "\"%s,%.2f,%.2f\"", ",", "'0%'", ",", "0", ",n*p);\n}\n", "else", "\n    ", "printf", "(", "\"month error\"", ");\n", "return", " ", "0", ";\n", "\n", "}"]], "Tag": "算法设计"}
{"Answer": "增大p的取值100倍即可，我取p1=p2=2成功了", "Konwledge_Point": "应对NP完全问题", "Question": ["（simulink）永磁同步电机（S函数搭建）的转子位置动态面跟踪时改变给定频率>1，转子位置不正确,跟不上给定", ["永磁同步电动机永磁同步电机（S函数搭建）的转子位置动态面跟踪时改变给定频率，当角频率>1时，给定为2sin（2t），转子位置不正确,跟不上给定", "\n\n", "我认为是参数问题但不知道如何调。", "\n以下是建模：", "\n\n", "\n\n", "以下是S函数代码：", "\n\n", "function [sys,x0,str,ts,simStateCompliance] = controller20 (t,x,u,flag)", "\n\n", "switch flag,", "\n\n", "case 0,", "\n    [sys,x0,str,ts,simStateCompliance]=mdlInitializeSizes;", "\n\n", "case 1,", "\n    sys=mdlDerivatives(t,x,u);", "\n\n", "case 2,", "\n    sys=mdlUpdate(t,x,u);", "\n\n", "case 3,", "\n    sys=mdlOutputs(t,x,u);**", "\n\n", "case 4,", "\n    sys=mdlGetTimeOfNextVarHit(t,x,u);", "\n\n", "otherwise", "\n    DAStudio.error('Simulink:blocks:unhandledFlag', num2str(flag));", "\n\n", "end", "\n\n", "function [sys,x0,str,ts,simStateCompliance]=mdlInitializeSizes", "\n\n", "sizes = simsizes;", "\n\n", "sizes.NumContStates  = 4;", "\n\n", "sizes.NumDiscStates  = 0;", "\n\n", "sizes.NumOutputs     = 4;", "\n\n", "sizes.NumInputs      = 5;", "\n\n", "sizes.DirFeedthrough = 1;", "\n\n", "sizes.NumSampleTimes = 1;   ", "\n\n", "sys = simsizes(sizes);", "\n\n", "x0  = [0,0,0,0];", "\n\n", "str = [];", "\n\n", "ts  = [0 0];", "\n\n", "function sys=mdlDerivatives(t,x,u)", "\n%微分函数", "\n%以下系数皆可调", "\nk1=150;%动态面参数（主要调）", "\n\n", "k2=150;  %动态面参数（主要调）", "\n\n", "np=3;%极对数（不可调）", "\n\n", "B=0.001158;", "\n\n", "J=0.003798;", "\n\n", "Rs=0.68;", "\n\n", "y=0.1245;", "\n\n", "tt2=0.01;", "\n\n", "tt3=0.01;", "\n\n", "r1=2;", "\n\n", "r2=2;", "\n\n", "TL=1.5;", "\n\n", "p1=0.02;", "\n\n", "p2=0.02;", "\n\n", "Ld=0.00285;", "\n\n", "Lq=0.00315;", "\n\n", "%以下a-c为系数，不用管", "\n\n", "a1=1.5*np*y;", "\n\n", "a2=1.5*np*(Ld-Lq);", "\n\n", "b1=-Rs/Lq;", "\n\n", "b2=-np*Ld/Lq;", "\n\n", "b3=-np*y/Lq;", "\n\n", "b4=1/Lq;", "\n\n", "c1=-Rs/Ld;", "\n\n", "c2=np*Lq/Ld;", "\n\n", "c3=1/Ld;", "\n\n", "%以下为状态方程", "\n\n", "dx(1)=(-k1*u(1)+u(2)-x(1))/tt2;", "\n\n", "dx(2)=((-k2-1)*(u(3)-x(1))+x(3)*u(3)+x(4)*(-k1*u(1)+u(2)-x(1))/tt2-a1*x(2))/(a1*tt3);", "\n\n", "dx(3)=-r1*((u(3)-x(1))*u(3)+p1*x(3));", "\n\n", "dx(4)=-r2*((u(3)-x(1))*(-k1*u(1)+u(2)-x(1))/tt2+p2*x(4));", "\n\n", "sys=[dx(1);dx(2);dx(3);dx(4)];", "\n\n", "function sys=mdlUpdate(t,x,u)", "\n\n", "sys = [];", "\n\n", "function sys=mdlOutputs(t,x,u)", "\n%输出函数", "\n\n", "k1=150;%动态面参数（主要调）", "\n\n", "k2=150; %动态面参数（主要调）", "\n\n", "k3=10;%动态面参数（主要调）", "\n\n", "k4=5;%动态面参数（主要调）", "\n\n", "np=3;", "\n\n", "B=0.001158;", "\n\n", "J=0.003798;", "\n\n", "Rs=0.68;", "\n\n", "y=0.1245;", "\n\n", "tt2=0.01;", "\n\n", "tt3=0.01;", "\n\n", "r1=2;", "\n\n", "r2=2;", "\n\n", "TL=1.5;", "\n\n", "p1=0.02;", "\n\n", "p2=0.02;", "\n\n", "Ld=0.00285;", "\n\n", "Lq=0.00315;", "\n\n", "a1=1.5*np*y;", "\n\n", "a2=1.5*np*(Ld-Lq);", "\n\n", "b1=-Rs/Lq;", "\n\n", "b2=-np*Ld/Lq;", "\n\n", "b3=-np*y/Lq;", "\n\n", "b4=1/Lq;", "\n\n", "c1=-Rs/Ld;", "\n\n", "c2=np*Lq/Ld;", "\n\n", "c3=1/Ld;", "\n\n", "f1=b1*u(4)+b2*u(3)*u(5)+b3*u(3);", "\n\n", "f2=c1*u(5)+c2*u(3)*u(4)+a2*(u(3)-x(1))*u(4);", "\n\n", "a=((-k3-0.5)*(u(4)-x(2))-f1+((-k2-1)*(u(3)-x(1))+x(3)*u(3)+x(4)*(-k1*u(1)+u(2)-x(1))/tt2-a1*x(2))/(a1*tt3))/b4;", "\n\n", "b=((-k4-0.5)*u(5)-f2)/c3;", "\n\n", "sys=[a;b;f1;f2];"]], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;请看&amp;#x1f449; &amp;#xff1a;&lt;a href=\"https://blog.csdn.net/weixin_45812669/article/details/116167279\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;曲线拟合&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["曲线拟合  为什么拟合效果不好", ["为什么拟合效果不好", "\n", "from scipy.optimize import curve_fit", "import matplotlib.pyplot as plt", "import numpy as np", "import pandas as pd", "\n", "def func(x,a, b, c, d):", "    return ((-1)", "a", "(b**2)", "np.exp((-2)", "b", "x+2", "c))/(1+np.exp((-1)", "b", "x+c))**2", "if ", "name", "=='", "main", "':", "    data=pd.read_excel('C:/Users/admin/XX LDPM-and-GRM-main/1生长曲线.xlsx')", "    xdata=np.array(data['1Time'])", "    ydata =np.array(data['growth'])", "    #画出真实数据", "    plt.plot(xdata,ydata,'b-')", "\n", "#指数函数拟合\npopt, pcov = curve_fit(func, xdata, ydata,bounds=(-", "8", ", ", "[-0.5,-0.15, 2,100]", "))#popt数组中，三个值分别是待求参数", "a", ",", "b", ",c\n#预测值\ny_pred = ", "[func(i, popt[0]", ",popt", "[1]", ",popt", "[2]", ",popt", "[3]", ") ", "for", " ", "i", " ", "in", " xdata]\n#画图\nplt", ".plot", "(xdata,y_pred,", "'r--'", ")\n", "print", "(popt)", "\n\n#输出R方\nfrom sklearn", ".metrics", " import r2_score\nr2 = r2_score(ydata , y_pred )\n", "print", "(", "'指数函数拟合R方为:'", ",r2)", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答内容部分引用GPT&amp;#xff0c;GPT_Pro更好的解决问题&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import numpy as np \n&lt;span class=\"hljs-comment\"&gt;#二维数组&amp;#xff0c;用来存储7个区间的范围&lt;/span&gt;\nintervals &amp;#61; [[133445, 3344647621]] \n\n&lt;span class=\"hljs-comment\"&gt;# 选出四个不重复的区间&lt;/span&gt;\nselected_intervals &amp;#61; np.random.choice(intervals, &lt;span class=\"hljs-attribute\"&gt;size&lt;/span&gt;&amp;#61;4, &lt;span class=\"hljs-attribute\"&gt;replace&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;) \n\n&lt;span class=\"hljs-comment\"&gt;# 在这四个区间里随机抽取一个数&lt;/span&gt;\nrandom_number &amp;#61; np.random.choice(selected_intervals) \n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;随机选取的数字是&amp;#xff1a;&amp;#34;&lt;/span&gt;, random_number) \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;上面的代码实现了从7个区间中随机抽取4个不重复的区间&amp;#xff0c;然后再从这4个区间中随机抽取一个数的功能。具体步骤如下&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;首先&amp;#xff0c;我们使用numpy中的np.random.choice函数&amp;#xff0c;从7个区间中随机抽取4个不重复的区间&amp;#xff1b;&lt;/li&gt;&lt;li&gt;然后&amp;#xff0c;我们再使用numpy中的np.random.choice函数&amp;#xff0c;从这4个区间中随机抽取一个数&amp;#xff1b;&lt;/li&gt;&lt;li&gt;最后&amp;#xff0c;将结果打印出来。&lt;br /&gt;如果回答有帮助&amp;#xff0c;望采纳。&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python；挑战性；随机数", ["先用一个二维数组来存储区间范围[[1", "33145], [33146", "47621],]（一共7个区间）", "然后 np.random.choice(n, size=4, replace=False)选出四个不重复的区间", "最后再这四个区间里np.random.choice直接取一个数", "\n", "这种代码具体怎么写呢，研究一晚上老是报错"]], "Tag": "算法设计"}
{"Answer": "应该是torch版本的问题，不同torch对应的后缀不同，我正在尝试修改这个问题，推荐查一下torch英文手册\r\n\r\n我之前的问题是torch版本问题过低，我需要将data变成train_data\r\n把targets变成train_labels，就好了，希望对你有帮助~", "Konwledge_Point": "应对NP完全问题", "Question": ["运行mixmatch源码CIFAR10数据集时报错AttributeError: 'CIFAR10' object has no attribute 'targets'，是怎么回事？", ["\n", "在运行mixmatch程序的时候，用torchvision.datasets载入CIFAT10的时候出现AttributeError: 'CIFAR10' object has no attribute 'targets'，错误 ", "\n", "还有一个问题就是：由于用torchvision下载太慢，我先把数据集下下来了，然后放在了data目录下面，这个对结果会有影响嘛？", "\n希望大家可以给点建议和意见，谢谢。", "\n\n", "加载数据集的代码如下：", "\n\n", "def get_cifar10(root, n_labeled,\n                 transform_train=None, transform_val=None,\n                 download=True):\n\n    base_dataset = torchvision.datasets.CIFAR10(root, train=True, target_transform=True, download=download,)\n    train_labeled_idxs, train_unlabeled_idxs, val_idxs = train_val_split(base_dataset.targets, int(n_labeled/10))\n\n    train_labeled_dataset = CIFAR10_labeled(root, train_labeled_idxs, train=True, transform=transform_train)\n    train_unlabeled_dataset = CIFAR10_unlabeled(root, train_unlabeled_idxs, train=True, transform=TransformTwice(transform_train))\n    val_dataset = CIFAR10_labeled(root, val_idxs, train=True, transform=transform_val, download=True)\n    test_dataset = CIFAR10_labeled(root, train=False, transform=transform_val, download=True)\n\n    print (f\"#Labeled: {len(train_labeled_idxs)} #Unlabeled: {len(train_unlabeled_idxs)} #Val: {len(val_idxs)}\")\n    return train_labeled_dataset, train_unlabeled_dataset, val_dataset, test_dataset\n", "\n\n", "def train_val_split(labels, n_labeled_per_class):\n    labels = np.array(labels)\n    train_labeled_idxs = []\n    train_unlabeled_idxs = []\n    val_idxs = []\n\n    for i in range(10):\n        idxs = np.where(labels == i)[0]\n        np.random.shuffle(idxs)\n        train_labeled_idxs.extend(idxs[:n_labeled_per_class])\n        train_unlabeled_idxs.extend(idxs[n_labeled_per_class:-500])\n        val_idxs.extend(idxs[-500:])\n    np.random.shuffle(train_labeled_idxs)\n    np.random.shuffle(train_unlabeled_idxs)\n    np.random.shuffle(val_idxs)\n\n    return train_labeled_idxs, train_unlabeled_idxs, val_idxs\n", "\n\n", "错误信息如下", "\n(base) D:\\CSStudy\\PycharmProject\\MixMatch-pytorch-master>python train.py --gpu 0 --n-labeled 250 --out cifar10@250", "\n==> Preparing cifar10", "\nUsing downloaded and verified file: ./data\\cifar-10-python.tar.gz", "\nTraceback (most recent call last):", "\n  File \"train.py\", line 431, in ", "\n    main()", "\n  File \"train.py\", line 88, in main", "\n    train_labeled_set, train_unlabeled_set, val_set, test_set = dataset.get_cifar10('./data', args.n_labeled, transform_train=transform_train, transf", "\norm_val=transform_val)", "\n  File \"D:\\CSStudy\\PycharmProject\\MixMatch-pytorch-master\\dataset\\cifar10.py\", line 21, in get_cifar10", "\n    train_labeled_idxs, train_unlabeled_idxs, val_idxs = train_val_split(base_dataset.targets, int(n_labeled/10))", "\nAttributeError: 'CIFAR10' object has no attribute 'targets'"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;p[i] &amp;#61; 1这块就应该出问题了&amp;#xff0c;你的p是一个空的list 啊&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python提示list index out of range", ["\n", "不知道是哪里有问题，是因为原文件里v这一列有的数值为0吗？该怎么解决？", "代码如下：", "\n", "data", " = pd.read_excel(", "\"C:/Users/DELL/Desktop/dt1.xls\"", ", ", "header=0,", " ", "usecols=['v'])", "\n", "data", " = np.array(data)\n", "T=[]", " \n", "V=0", "   ", "#初始成交量", "\n", "p=0", "\n", "p=[", " ]\n", "A=326881602", "  ", "#每个交易篮子的交易量", "\nfor i ", "in", " range(len(data)):\n    ", "V=V+data[i]", "   ", "#迭代，成交量=上一时刻成交量+这一时刻的成交量", "\n    ", "k=np.ceil(V/A)", "  ", "#对篮子数向上取整", "\n    T.append(k)\n    T[i]=k    ", "#第i时刻所需要的篮子数", "\n    ", "if", " np.ceil(V/A)-V/", "A==0:", "  ", "#篮子数为整数", "\n        p[i]=", "1", "     ", "#如果篮子数为整数，那么下一时刻从新的交易篮子开始填充", "\n        q[", "0", "]=[", "1", ",T[", "0", "]]  ", "#第一个时刻对应的篮子编号", "\nfor i ", "in", " range(len(data)):\n    ", "if", " i>=", "1", ":\n        q[i]=[T[i-", "1", "]+p[i-", "1", "],T[i]]  ", "#第i个时刻对应的篮子编号", "\n\n``` 问题相关代码，请勿粘贴截图 \n\n", "###### 运行结果及报错内容 ", "\n\n    q[i]=[T[i-", "1", "]+p[i-", "1", "],T[i]]  ", "#第i个时刻对应的篮子编号", "\nIndexError: list index out of range\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;该回答引用GPTᴼᴾᴱᴺᴬᴵ&lt;br /&gt;这段代码的意思是&amp;#xff0c;如果当前文件是被当做主程序运行的&amp;#xff0c;则执行以下代码&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;对于列表[(0, 0), (1, 0), (0, 1), (1, 1)]中的每个元素xs&amp;#xff0c;调用函数AND(xs[0], xs[1])&amp;#xff0c;并将结果赋值给y。&lt;/p&gt;\n&lt;p&gt;将xs和y以特定的格式打印出来&amp;#xff0c;其中&amp;#43;号用于连接字符串。&lt;/p&gt;\n&lt;p&gt;所以程序的输出是&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;(0, 0) -&amp;gt; 0&lt;br /&gt;(1, 0) -&amp;gt; 0&lt;br /&gt;(0, 1) -&amp;gt; 0&lt;br /&gt;(1, 1) -&amp;gt; 1&lt;/p&gt;\n&lt;p&gt;这个程序是实现了与门&amp;#xff0c;它只有在x1和x2都为1时输出1&amp;#xff0c;否则输出0。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pycharm实现与门中有一串代码没看懂", ["在与门的实现过程中", "\n", "# coding: utf-8", "\n", "import", " numpy ", "as", " np\n\n\n", "def", " ", "AND", "(", "x1, x2", "):\n    x = np.array([x1, x2])\n    w = np.array([", "0.5", ", ", "0.5", "])\n    b = -", "0.7", "\n    tmp = np.", "sum", "(w*x) + b\n    ", "if", " tmp <= ", "0", ":\n        ", "return", " ", "0", "\n    ", "else", ":\n        ", "return", " ", "1", "\n\n", "if", " __name__ == ", "'__main__'", ":\n    ", "for", " xs ", "in", " [(", "0", ", ", "0", "), (", "1", ", ", "0", "), (", "0", ", ", "1", "), (", "1", ", ", "1", ")]:\n        y = AND(xs[", "0", "], xs[", "1", "])\n        ", "print", "(", "str", "(xs) + ", "\" -> \"", " + ", "str", "(y))\n\n\n\n\n", "\n", "这一串是什么意思呢，书上没有，我也没太搞懂", "\n", "\n\n", "if", " __name__ == ", "'__main__'", ":\n    ", "for", " xs ", "in", " [(", "0", ", ", "0", "), (", "1", ", ", "0", "), (", "0", ", ", "1", "), (", "1", ", ", "1", ")]:\n        y = AND(xs[", "0", "], xs[", "1", "])\n        ", "print", "(", "str", "(xs) + ", "\" -> \"", " + ", "str", "(y))\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;toad对于模型的改造收不容易的&amp;#xff0c;因为逻辑回归模型才带.coef_,你必须得根据线性模型才能应用于评分卡。你可以结合以下逻辑回归模型与自动机器学习&amp;#xff0c;这样容易改。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["toad评分卡构建与改写问题", ["我用toad包构建了一个评分卡模型，我想对他进行改造，我把里面用的逻辑回归模型换成了别的模型，但是我发现不管我运不运行这个a模型，toad都可以直接出一个评分卡结果，难道我这个改写是错误的吗？toad是内置的逻辑回归，我是没法简单改写吗？", "\n", "\n\nimport pandas as pd\n", "train", "=pd.read_csv(\"训练集.csv\",index_col=0)\n", "test", "=pd.read_csv(\"测试集.csv\",index_col=0)\n\n", "Xtr", "=train.loc[:,", "\"ficoRangeLow\"", ":", "\"n14\"", "]\n", "Ytr", "=train.loc[:,", "\"isDefault\"", "]\n\n", "Xts", "=test.loc[:,", "\"ficoRangeLow\"", ":", "\"n14\"", "]\n", "Yts", "=test.loc[:,", "\"isDefault\"", "]\n\n\ndata_tr = pd.concat([Xtr,Ytr],", "axis", "=1)\ndata_tr[", "'type'", "] = ", "'train'", "\n\ndata_ts = pd.concat([Xts,Yts],", "axis", "=1)\ndata_ts[", "'type'", "] = ", "'test'", "\nimport toad\ntoad.detector.detect(data_tr).columns\ntoad.detector.detect(data_tr)\n\nquality = toad.quality(data_tr,", "'isDefault'", ",", "iv_only", "=", "True", ")\nquality.sort_values(", "'iv'", ",", "ascending", "=", "False", ")\n\n\nselected_data, dropped = toad.selection.select(data_tr,target = ", "'isDefault'", ", empty = 0.5, iv = 0.02, corr = 0.9, ", "return_drop", "=", "True", ",exclude=[", "'type'", "])\n", "print", "(dropped)\n", "print", "(selected_data.shape)\n\n\n\nquality = toad.quality(selected_data,", "'isDefault'", ",", "iv_only", "=", "True", ")\nquality.sort_values(", "'iv'", ",", "ascending", "=", "False", ")\n\n\n\n", "ivzhi", "=quality.sort_values('iv',ascending=False)\nivzhi.to_csv(", "\"iv值排序.csv\"", ")\n\n\ncombiner = toad.transform.Combiner()\ncombiner.fit(selected_data, y = ", "'isDefault'", ", method = ", "'chi'", ", min_samples = 0.05) #empty_separate = ", "False", "\n\n\n", "from", " toad.plot import bin_plot\n", "for", " i ", "in", " range(0,14,1):\n    col = selected_data.columns[i]\n    bin_plot(combiner.transform(selected_data[[col,", "'isDefault'", "]], ", "labels", "=", "True", "), ", "x", "=col, ", "target", "=", "'isDefault'", ")\n\n\nbins = combiner.", "export", "()\nselected_test = data_ts[selected_data.columns]\ncombiner.set_rules(bins)\nbinned_data = combiner.transform(selected_data)\ntranser = toad.transform.WOETransformer()\ndata_tr_woe = transer.fit_transform(binned_data, binned_data[", "'isDefault'", "], exclude=[", "'isDefault'", ",", "'type'", "])\ndata_ts_woe = transer.transform(combiner.transform(selected_test))\nXtr_woe = data_tr_woe.drop([", "'isDefault'", ",", "'type'", "],", "axis", "=1)\nYtr_woe = data_tr_woe[", "'isDefault'", "]\nXts_woe = data_ts_woe.drop([", "'isDefault'", ",", "'type'", "],", "axis", "=1)\nYts_woe = data_ts_woe[", "'isDefault'", "]\n\nimport autogluon\n", "from", " autogluon.tabular import TabularDataset,TabularPredictor  \nimport pandas as pd\nimport numpy as np\n", "label", "=", "'isDefault'", "\n", "train_data", "=TabularDataset(data_tr_woe.drop([", "\"type\"", "],", "axis", "=1)  )\nmetric = ", "'roc_auc'", "\n", "time_limit", "=60\n", "predictor", "=TabularPredictor(label=label,eval_metric=metric).fit(train_data,presets='best_quality',time_limit=time_limit,auto_stack=True)\n\n", "test_data", "=TabularDataset(data_ts_woe.drop([", "'isDefault'", ",", "'type'", "],", "axis", "=1))\n\npredictor.predict_proba(train_data)\n", "train_proba", "=predictor.predict_proba(train_data)\n", "train_proba", "=train_proba.values[:,1]\ntrain_proba = np.array(train_proba).flatten() \n\npredictor.predict_proba(test_data)\n", "auto_proba", "=predictor.predict_proba(test_data)\n", "auto_proba", "=auto_proba.values[:,1]\nauto_proba = np.array(auto_proba).flatten() \n\npsi = toad.metrics.PSI(data_tr_woe,data_ts_woe)\npsi.sort_values(0,", "ascending", "=", "False", ")\n\n", "psizhi", "=psi.sort_values(0,ascending=False)\npsizhi.to_csv(", "\"psi值.csv\"", ")\n\n\ntr_bucket = toad.metrics.KS_bucket(train_proba,Ytr,", "bucket", "=10,method='quantile')\ntr_bucket\n\n\nselected_data\n", "x_card", "=selected_data.loc[:,", "\"ficoRangeLow\"", ":", "\"n14\"", "]\n", "y_card", "=selected_data.loc[:,", "\"isDefault\"", "]\n\ncard = ScoreCard(", "combiner", "=combiner, \n                 ", "transer", "=transer, \n                 ", "C", "=0.1, \n                 ", "class_weight", "=", "'balanced'", ", \n                 ", "base_score", "=600,\n                 ", "base_odds", "=1,\n                 ", "pdo", "=50,\n                 ", "rate", "=2)\n \n", "# 使用评分卡模型进行拟合", "\ncard.fit(x_card,y_card)\n\n\n", "\n", "最后评分卡生成的这一步和我上面调试的模型没有任何关系，请问该如何改写才能让评分卡的构建基于我的模型。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;DnCNN类在models模块中,需要这样导入from models import DnCNN&amp;#xff0c;另外项目里的所有文件要按照原来的目录结构排列&amp;#xff0c;然后进行操作。参考&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://github.com/SaoYan/DnCNN-PyTorch\" id=\"textarea_1652772139181_1652772694943_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://github.com/SaoYan/DnCNN-PyTorch&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["1,我想用CPU来处理DnCNN的去噪问题，请问有什么好的方法吗？ 2，为什么显示", ["问题遇到的现象和发生背景", "\n", "1,我想用CPU来处理DnCNN的去噪问题，请问有什么好的方法吗？ 2，为什么显示没有找到DnCNN model呢？如果想要添加DnCNNmodel应该在哪里添加呢？", "\n", "问题相关代码，请勿粘贴截图", "\n", "import os", "import numpy as np", "import argparse", "import tensorflow as tf", "import DnCNN", "\n", "os.environ[\"CUDA_DEVICE_ORDER\"] = \"PCI_BUS_ID\"", "os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0\"", "\n", "parser = argparse.ArgumentParser(decription=\"Tensorflow DnCNN Testing\")", "parser.add_argument(\"--epochs\", default=50, type=int, help=\"Testing epochs\")", "parser.add_argument(\"--patch-size\", default=40, type=int, help=\"patch size\")", "parser.add_argument(\"--c-dim\", default=1, type=int, help=\"#of channels\")", "parser.add_argument(\"--batch-size\", default=64, type=int, help=\"mini-batch size\")", "parser.add_argument(\"--lr\", default=1e-3, type=float, help=\"Learning rate\")", "parser.add_argument(\"--lr-decay\", default=30, type=int, help=\"Step of learning rate decay\")", "parser.add_argument(\"--weight-decay\", default=1e-4, type=float, help=\"weight decay\")", "parser.add_argument(\"--sigma\", default=25, type=int, help=\"noise level(default 25)\")", "parser.add_argument(\"--Testing-path\", default='./desktop/Training_BrainImages_256x256_100.tfrecords', type=str,", "                    help=\"path to Testingset\")", "parser.add_argument(\"--validate-dir\", default='C:/Users/13145', type=str, help=\"path to Testingset\")", "\n", "opt = parser.parse_args()", "opt.checkpoint_path = './' + opt.modale_name + '_checkpoints'", "\n", "def main():", "    model = DnCNN()", "    config = tf.ConfigProto()", "    config.gpu_options.allow_growth = True", "    with tf.Session(config=config) as sess:", "        model.Testing(sess, opt)", "\n", "if ", "name", " := '", "main", "':", "    var = tf.app.run", "\n", "运行结果及报错内容", "\n", "2022-05-16 08:03:48.333941: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'cudart64_110.dll'; dlerror: cudart64_110.dll not found", "2022-05-16 08:03:48.334140: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.", "Traceback (most recent call last):", "  File \"C:\\Users\\13145\\Desktop\\Test\\full noise.py\", line 29, in ", "    import DnCNN", "ModuleNotFoundError: No module named 'DnCNN'", "\n", "Process finished with exit code 1", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "用CPU来基于DnCNN的方法处理给mat文件去噪的问题"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;基于Monster 组和GPT的调写&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pickle\n\n&lt;span class=\"hljs-comment\"&gt;#回归模型&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;f&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;x, theta&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; np.dot(theta, x.T)\n\n&lt;span class=\"hljs-comment\"&gt;#评估函数&amp;#xff08;求均方误差&amp;#xff09;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;mse&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;x, y, theta&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; np.&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;((f(x, theta) - y)**&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) / &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(y)\n\n&lt;span class=\"hljs-comment\"&gt;#训练模型&lt;/span&gt;\nlearning_rate &amp;#61; &lt;span class=\"hljs-number\"&gt;0.00001&lt;/span&gt;\n\ndf[&lt;span class=\"hljs-string\"&gt;&amp;#39;RM2&amp;#39;&lt;/span&gt;] &amp;#61; df[&lt;span class=\"hljs-string\"&gt;&amp;#39;RM&amp;#39;&lt;/span&gt;]**&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\ndf[&lt;span class=\"hljs-string\"&gt;&amp;#39;RM_LSTAT&amp;#39;&lt;/span&gt;] &amp;#61; df[&lt;span class=\"hljs-string\"&gt;&amp;#39;RM&amp;#39;&lt;/span&gt;] * df[&lt;span class=\"hljs-string\"&gt;&amp;#39;LSTAT&amp;#39;&lt;/span&gt;]\ndf[&lt;span class=\"hljs-string\"&gt;&amp;#39;RM_LSTAT_PTRATIO&amp;#39;&lt;/span&gt;] &amp;#61; df[&lt;span class=\"hljs-string\"&gt;&amp;#39;RM&amp;#39;&lt;/span&gt;] * df[&lt;span class=\"hljs-string\"&gt;&amp;#39;LSTAT&amp;#39;&lt;/span&gt;] * df[&lt;span class=\"hljs-string\"&gt;&amp;#39;PTRATIO&amp;#39;&lt;/span&gt;]\ntrain_x &amp;#61; df[[&lt;span class=\"hljs-string\"&gt;&amp;#39;RM&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;LSTAT&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;PTRATIO&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;RM2&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;RM_LSTAT&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;RM_LSTAT_PTRATIO&amp;#39;&lt;/span&gt;]]\ntrain_x &amp;#61; (train_x - train_x.mean()) / train_x.std()  &lt;span class=\"hljs-comment\"&gt;#标准化&lt;/span&gt;\ntrain_x &amp;#61; np.insert(train_x.to_numpy(), &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, axis&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\ntrain_y &amp;#61; df[&lt;span class=\"hljs-string\"&gt;&amp;#39;MEDV&amp;#39;&lt;/span&gt;]\n\ntheta &amp;#61; np.random.rand(&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;)\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;):\n    theta &amp;#61; theta - learning_rate * np.dot(f(train_x, theta) - train_y, train_x)\n    metrics &amp;#61; mse(train_x, train_y, theta)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;第%d轮 均方误差为%.04f theta%s&amp;#39;&lt;/span&gt; % (i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, metrics, &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(theta)))\n\n&lt;span class=\"hljs-comment\"&gt;#保存模型&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;with&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;open&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;model.pickle&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; f:\n    pickle.dump(theta, f)\n\n&lt;span class=\"hljs-comment\"&gt;#加载模型&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;with&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;open&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;model.pickle&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; f:\n    theta &amp;#61; pickle.load(f)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;训练好的模型被保存到了名为&amp;#39;model.pickle&amp;#39;的文件中&amp;#xff0c;并通过pickle库进行了序列化。在加载模型时&amp;#xff0c;只需调用pickle库的load()函数即可将模型反序列化为一个Numpy数组。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何保存训练好的模型", ["请问如何保存训练好的模型？", "模型代码如下", "\n", "#RM,LSTAT-->MEDV", "\n", "#y=theta_0+theta_1*RM+theta_2*LSTAT+theta_3*PTRATIO+theta_4*RM^2+theta_5*RM*LSTAT+theta_6*RM*LSTAT*PTRATIO", "\n", "import", " numpy ", "as", " np\n\ntheta=np.random.rand(", "7", ",)\ntheta\n\n", "#回归模型", "\n", "def", " ", "f", "(", "x", "):\n    ", "return", " np.dot(theta,x.T)\n", "#dot():返回两个数组的点积，x.T为矩阵转置", "\n\n", "#评估函数（求均方误差）", "\n", "def", " ", "mse", "(", "x,y", "):\n    ", "return", " np.", "sum", "((f(x)-y)**", "2", ") / ", "len", "(y)\n\n", "\n", "#训练模型\nlearning_rate = ", "0.00001", "\n\ndf[", "'RM2'", "] = df[", "'RM'", "]**", "2", "\ndf[", "'RM_LSTAT'", "] = df[", "'RM'", "]*df[", "'LSTAT'", "]\ndf[", "'RM_LSTAT_PTRATIO'", "] = df[", "'RM'", "]*df[", "'LSTAT'", "]*df[", "'PTRATIO'", "]\ntrain_x = df[[", "'RM'", ",", "'LSTAT'", ",", "'PTRATIO'", ",", "'RM2'", ",", "'RM_LSTAT'", ",", "'RM_LSTAT_PTRATIO'", "]]\nprint(train_x)\ntrain_x = (train_x -train_x.mean()) / train_x.std()#标准化， mean()求平均值\ntrain_x = np.insert(train_x.to_numpy(),", "0", ",", "1", ",axis=", "1", ")\ntrain_y = df[", "'MEDV'", "]\n\nfor i in range(", "10000", "):\n    theta = theta - learning_rate * np.dot(f(train_x)-train_y,train_x)\n    metrics = mse(train_x,train_y)\n    print(", "'第%d轮 均方误差为%.04f theta%s'", " ", "% (i+1,metrics,str(theta)))", "\n \n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;python中base64串的长度为4的整数倍&amp;#xff0c;因此长度不为4整数倍的base64串需要用&amp;#34;&amp;#61;&amp;#39;补全&lt;br /&gt;代码稍微修改了下&amp;#xff0c;你再试试&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; obsws_python as obs\n&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; numpy as np\n&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; base64\n&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; cv2\n&lt;span class=\"hljs-built_in\"&gt;import&lt;/span&gt; sys\n\n&lt;span class=\"hljs-attr\"&gt;cl&lt;/span&gt; &amp;#61; obs.ReqClient(&lt;span class=\"hljs-attr\"&gt;host&amp;#61;&amp;#39;localhost&amp;#39;,&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;port&amp;#61;4444,&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;password&amp;#61;&amp;#34;931122&amp;#34;)&lt;/span&gt;\n\n&lt;span class=\"hljs-attr\"&gt;image_file_path&lt;/span&gt; &amp;#61; sys.path[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;\\Screenshot.png&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;source&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;Video Capture Device&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;Screenshot&lt;/span&gt; &amp;#61; cl.get_source_screenshot(source,&lt;span class=\"hljs-string\"&gt;&amp;#34;jpg&amp;#34;&lt;/span&gt;,None,None,&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;)\n&lt;span class=\"hljs-attr\"&gt;Screenshot&lt;/span&gt; &amp;#61; Screenshot.image_data\n\n&lt;span class=\"hljs-comment\"&gt;#长度不为4整数倍的base64串需要用&amp;#34;&amp;#61;&amp;#39;补全&lt;/span&gt;\n&lt;span class=\"hljs-attr\"&gt;num&lt;/span&gt; &amp;#61; len(Screenshot)%&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; num !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n   &lt;span class=\"hljs-attr\"&gt;Screenshot&amp;#61;Screenshot&lt;/span&gt; &amp;#43; &amp;#39;&amp;#61;&amp;#39; * (&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;-num)\n\n&lt;span class=\"hljs-attr\"&gt;img&lt;/span&gt; &amp;#61; base64.b64decode(Screenshot)\n&lt;span class=\"hljs-attr\"&gt;img_array&lt;/span&gt; &amp;#61; np.fromstring(img, np.uint8) &lt;span class=\"hljs-comment\"&gt;# 转换np序列&lt;/span&gt;\nprint(&amp;#39;numpy: &amp;#39;, img_array.shape)\ncv2.imshow(&lt;span class=\"hljs-string\"&gt;&amp;#34;img&amp;#34;&lt;/span&gt;, img_array)\ncv2.waitKey(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中如何将从obs-websocket获得的截图转化为opencv可以操作的图片。", ["问题遇到的现象和发生背景", "\n", "在python中通过obs websocket获取截图后想要将其转化为opencv可以操作的格式，但是试了很多办法都失败了", "OBS28.0.1更新后自带的obs-websocket 5", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "import obsws_python as obs", "import numpy as np", "import base64", "import cv2", "import sys", "\n", "cl = obs.ReqClient(host='localhost', port=4444, password=\"111111\") #连接到websocket服务器", "\n", "image_file_path = sys.path[0] + \"\\Screenshot.png\"", "source = \"Video Capture Device\" #这里填添加到OBS中的源的名字，显示在OBS主界面来源中的名字", "Screenshot = cl.get_source_screenshot(source,\"jpg\",None,None,100) #通过websocket从obs请求对源进行截图", "Screenshot = Screenshot.image_data", "\n", "img = base64.b64decode(Screenshot)", "img_array = np.fromstring(img, np.uint8)  # 转换np序列", "print('numpy: ', img_array.shape)", "cv2.imshow(\"img\", img_array)", "cv2.waitKey(0)", "\n", "运行结果及报错内容", "\n", "在b64decode处报错：Incorrect padding", "\n", "我的解答思路和尝试过的方法", "\n", "websocket官方说明书里面说这个image_data是“base64 encoded”，于是找了很多种base64转np array的方法，都以失败告终", "修改get_source_screenshot的图片格式，会出现不同的报错", "\n", "我想要达到的结果", "\n", "在python中通过obs websocket获取截图后想要将其转化为opencv可以操作的格式", "但是不希望用save_source_screenshot保存图片后读取的方式，因为我可能会要求程序循环获取截图，这样会严重降低硬盘寿命。", "\n", "OBS和obs-wesocket的安装和使用", "\n", "可能需要大家安装一下OBS进行调试，如果能直接看到cl.get_source_screenshot获取的数据应该能更快找到解决方法吧", "OBS下载：", "https://obsproject.com/", "obs-websocket 5 已经内置在该版本中，说明书：", "https://github.com/obsproject/obs-websocket/blob/master/docs/generated/protocol.md#getsourcescreenshot", "OBS安装好后：", "在OBS主界面上方 工具 - obs-websocket设置 - 开启WebSocket服务器，开启鉴权，设置服务器端口（int）和服务器密码(string)并将端口和密码填写到cl = obs.ReqClient(host='localhost', port=端口号, password=\"密码\")", "随便加个源，把自己设置的源名称填写到source中。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;isExists &amp;#61; &lt;span class=\"hljs-built_in\"&gt;os&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;path&lt;/span&gt;.exists(curDir&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\\\xls&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; isExists :\n            &lt;span class=\"hljs-built_in\"&gt;os&lt;/span&gt;.makedirs(curDir&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\\\xls&amp;#34;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这段代码&amp;#xff08;上述代码在第9、10行&amp;#xff09;是你每次都会多一次的原因所在&amp;#xff0c;由于是遍历所有子目录&amp;#xff0c;所以肯定不是每个文件夹都有xls这个子目录的&amp;#xff0c;这样就导致了你每次都会新建一个xls文件夹&amp;#xff0c;导致每次多输出一次。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于Python中os.walk(path)循环的问题", ["使用Python对文件夹中的  .sig 后缀文件进行操作，操作后转存到路径下的xls文件夹下，如果文件夹中没有.sig 后缀文件， 会输出  “所给路径不存在.sig文件”  ，但是每执行一次就会多输出一次，关终端、重启软件都无法制止它的增长。不懂其中奥妙，求解。。", "\n", "\n", "\n", "path = ", "\"E:\\\\数据\\\\scr2 - 副本\"", "\nhave_sig = ", "0", "\nisExists = os.path.", "exists", "(path)\n", "if", " not isExists:\n    ", "print", "(", "\"提供的存储.sig文件路径不存在\"", ")\n", "else", ":\n    ", "for", " curDir, dirs, ", "files", " in os.walk(path):\n        isExists = os.path.", "exists", "(curDir+", "\"\\\\xls\"", ")\n        ", "if", " not isExists :\n            os.makedirs(curDir+", "\"\\\\xls\"", ")\n        ", "for", " ", "file", " in ", "files", ":\n            ", "if", " ", "file", ".endswith(", "\".sig\"", "):\n                have_sig = have_sig+", "1", "\n                # ", "print", "(curDir+", "\"\\\\\"", "+", "file", ")\n                # ", "print", "(curDir+", "\"\\\\\"", "+", "file", "[:-", "3", "])\n                os.", "rename", "(curDir+", "\"\\\\\"+file,curDir+\"", "\\\\", "\"+file[:-3]+\"", "txt", "\")", "\n                pass\n                ", "fo", " = ", "open", "(curDir+", "\"\\\\\"+file[:-3]+\"", "txt", "\", \"", "r", "\")", "\n                date = ", "fo", ".", "read", "()\n                date = date.", "split", "(", "\"\\n\"", ")\n                datas = np.array(date[", "30", ":]) \n                code = np.", "empty", "(", "0", ")\n                ", "for", " i in datas:\n                    i = i.", "split", "()\n                    ", "for", " ", "j", " in i:\n                        code = np.", "append", "(code,float(", "j", "))\n                code = code.reshape(-", "1", ",", "4", ")\n                # ", "print", "(code.shape())#", "1023", ",", "4", "\n                ", "fo", ".", "close", "()\n\n                workbook = xlwt.Workbook(encoding = ", "'ascii'", ")\n                worksheet = workbook.add_sheet(", "'sheet'", ")\n                worksheet = workbook.get_sheet(", "'sheet'", ")\n                ", "for", " row in ", "range", "(", "0", ",", "len", "(code),", "1", "):\n                    ", "for", " column in ", "range", "(", "0", ",", "4", ",", "1", "):\n                        worksheet.", "write", "(row, column, code[row][column])\n                workbook.save(curDir+", "\"\\\\xls\\\\\"+file[:-3]+\"", "xls", "\")", "\n        ", "if", " have_sig == ", "0", ":\n            ", "print", "(", "\"所给路径不存在.sig文件\"", ")\n        ", "else", ":\n            ", "print", "(", "\"处理文件数量：\"", ",have_sig)\n \n\n", "\n", "运行结果及报错内容", "\n", "（18次）", "E:\\9-python\\opencv>python -u \"c:\\Users\\star\\Desktop\\Untitled-1.py\"", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "（19次）", "E:\\9-python\\opencv>python -u \"c:\\Users\\star\\Desktop\\Untitled-1.py\"", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "\n", "我的解答思路和尝试过的方法", "\n", "尝试输出print(os.walk(path))", "但是结果都一样：", "<generator object _walk at 0x0000022483B67350>", "\n", "我想要达到的结果", "\n", "应该是自己的知识盲区，望指导"]], "Tag": "算法设计"}
{"Answer": "我试了一下，如果你用window系统，在绝对路经中用双“\\\\\", 列如： srcImage = cv2.imread('C:\\\\\\\\Users\\\\\\\\fw\\\\\\\\Anaconda3\\\\\\\\Lib\\\\\\\\site-packages\\\\\\\\skimage\\\\\\\\data\\\\\\\\rocket.jpg')。 这因该没问题。", "Konwledge_Point": "应对NP完全问题", "Question": ["python opencv 图片前景与背景的分割，拜大神求如何改错", ["在网上找到了一个用Kmeans算法对图片前景与背景的分割的例子，很适合现在的学习，可一直有一个错误不会修改，跪求大神了。", "\n\n", "\n```# -*- coding: utf-8 -*-\nimport cv2\nimport numpy as np\nimport math\ndef panelAbstract(srcImage):\n    #   read pic shape\n    imgHeight,imgWidth = srcImage.shape[:2]\n    imgHeight = int(imgHeight);imgWidth = int(imgWidth)\n    # 均值聚类提取前景:二维转一维\n    imgVec = np.float32(srcImage.reshape((-1,3)))\n    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER,10,1.0)\n    flags = cv2.KMEANS_RANDOM_CENTERS \n    label,clusCenter = cv2.kmeans(imgVec,2,None,criteria,10,flags)\n    clusCenter = np.uint8(clusCenter)\n    clusResult = clusCenter[label.flatten()]\n    imgres = clusResult.reshape((srcImage.shape))\n    imgres = cv2.cvtColor(imgres,cv2.COLOR_BGR2GRAY)\n    bwThresh = int((np.max(imgres)+np.min(imgres))/2)\n    _,thresh = cv2.threshold(imgres,bwThresh,255,cv2.THRESH_BINARY_INV)\n    threshRotate = cv2.merge([thresh,thresh,thresh])\n# 确定前景外接矩形\n    #find contours\n    contours = cv2.findContours(thresh,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n    minvalx = np.max([imgHeight,imgWidth]);maxvalx = 0\n    minvaly = np.max([imgHeight,imgWidth]);maxvaly = 0\n    maxconArea = 0;maxAreaPos = -1\n    for i in range(len(contours)):\n        if maxconArea < cv2.contourArea(contours[i]):\n            maxconArea = cv2.contourArea(contours[i])\n            maxAreaPos = i\n    objCont = contours[maxAreaPos]\n    # 旋转校正前景\n    rect = cv2.minAreaRect(objCont)\n    for j in range(len(objCont)):\n        minvaly = np.min([minvaly,objCont[j][0][0]])\n        maxvaly = np.max([maxvaly,objCont[j][0][0]])\n        minvalx = np.min([minvalx,objCont[j][0][1]])\n        maxvalx = np.max([maxvalx,objCont[j][0][1]])\n    if rect[2] <=-45:\n        rotAgl = 90 +rect[2]\n    else:\n        rotAgl = rect[2]\n    if rotAgl == 0:\n        panelImg = srcImage[minvalx:maxvalx,minvaly:maxvaly,:]\n    else:\n        rotCtr = rect[0]\n        rotCtr = (int(rotCtr[0]),int(rotCtr[1]))\n        rotMdl = cv2.getRotationMatrix2D(rotCtr,rotAgl,1)\n        imgHeight,imgWidth = srcImage.shape[:2]\n        #图像的旋转\n        dstHeight = math.sqrt(imgWidth *imgWidth + imgHeight*imgHeight)\n        dstRotimg = cv2.warpAffine(threshRotate,rotMdl,(int(dstHeight),int(dstHeight)))\n        dstImage = cv2.warpAffine(srcImage,rotMdl,(int(dstHeight),int(dstHeight)))\n        dstRotimg = cv2.cvtColor(dstRotimg,cv2.COLOR_BGR2GRAY)\n        _,dstRotBW = cv2.threshold(dstRotimg,127,255,0)\n        contours = cv2.findContours(dstRotBW,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n        maxcntArea = 0;maxAreaPos = -1\n        for i in range(len(contours)):\n            if maxcntArea < cv2.contourArea(contours[i]):\n                maxcntArea = cv2.contourArea(contours[i])\n                maxAreaPos = i\n        x,y,w,h = cv2.boundingRect(contours[maxAreaPos])\n        #提取前景：panel\n        panelImg = dstImage[int(y):int(y+h),int(x):int(x+w),:]\n\n    return panelImg\nif __name__==\"__main__\":\n    srcImage = cv2.imread('11.jpg')\n    a=panelAbstract(srcImage)\n    cv2.imshow('figa',a)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()  \n\n\n这是原地址https://blog.csdn.net/Dawn__Z/article/details/82115160\n报错如下（知道错是什么意思就是不会改）：Traceback (most recent call last):\n  File \"D:\\Workspaces\\MyEclipse 2015\\pythonTest\\src\\cc.py\", line 70, in \n    a=panelAbstract(srcImage)\n  File \"D:\\Workspaces\\MyEclipse 2015\\pythonTest\\src\\cc.py\", line 7, in panelAbstract\n    imgHeight,imgWidth = srcImage.shape[:2]\nAttributeError: 'NoneType' object has no attribute 'shape'\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在计算复杂性理论中&amp;#xff0c;多项式时间归约是指假设已有解决一个问题的子程序&amp;#xff0c;利用它在多项式时间内&amp;#xff08;不考虑子程序运行所用时间&amp;#xff09;解决另一个问题的归约方法&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["简要地描述多项式时间约简的思想", ["Briefly describe the idea of the polynomial time reduction. Explain how to use it to", "prove a problem is NP-complete.", "\n", "4-SAT Problem: for a Boolean formula in CNF in which each clause has exactly 4", "literals, determine if there is an assignment of Boolean value to its variables so that", "the formula evaluates to true? (i.e., the formula is satisfiable). Prove 4-SAT Problem", "is NP-Complete.", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;select Date,Close from stock trading date where Date &amp;gt;&amp;#61; &amp;#39;2005-01-01&amp;#39; AND Date &amp;lt;&amp;#61; &amp;#39;2018-12-31&amp;#39; AND Stkcd &amp;#61; &amp;#39;000041&amp;#39;&lt;br /&gt;从报错看&amp;#xff0c;应该是这句查询语句错了&amp;#xff0c;然后select Data,Close(这是属性) from stock trading data(这3个单词应该是表吧&amp;#xff0c;你看下表的名称具体是什么&amp;#xff0c;应该不是这么写的&amp;#xff0c;至少应该是有下划线什么的连起来的) where。。。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["~_~ python读取数据库错误！！我实在是找不到问题在哪里了", ["import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n", "from", " sqlalchemy ", "import", " create_engine\n\nmysql_config = {", "'host'", ": ", "'59.78.102.118'", ",\n                ", "'port'", ": ", "23208", ",\n                ", "'user'", ": ", "'student'", ",\n                ", "'password'", ": ", "'Python_123456'", ",\n                ", "'dbname'", ": ", "'research'", "}\nmysql_engine = create_engine(", "'mysql+pymysql://student:Python_123456@59.78.102.118:23208/research'", ".format(**mysql_config), pool_pre_ping=", "True", ")\n\n", "sql", " = \"select Date,Close from stock trading date where Date >= '2005-01-01' AND Date <= '2018-12-31' AND Stkcd = '000041'\"\npd_data = pd.read_sql(", "sql", ",mysql_engine)\nprint(pd_data)\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;修改如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-symbol\"&gt;strss&lt;/span&gt; :&lt;span class=\"hljs-symbol\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-symbol\"&gt;strs&lt;/span&gt;      //目的&amp;#xff1a;构建一个&lt;span class=\"hljs-symbol\"&gt;strs&lt;/span&gt;类的对象的数组&amp;#xff0c;然后通过 创建&lt;span class=\"hljs-symbol\"&gt;strss&lt;/span&gt;类的对象完成所有创建 \n{\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; nums;\n    strs* arr;  &lt;span class=\"hljs-comment\"&gt;//这里声明一下&lt;/span&gt;\n    strss()\n    {\n        cin&amp;gt;&amp;gt;nums;\n        arr&amp;#61;new strs[nums];  &lt;span class=\"hljs-comment\"&gt;//这里去掉类型前缀&lt;/span&gt;\n        cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;strss构造&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;\n    }\n};\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["c++类的继承创建一个基类的数组", ["以下是我写的一段源码，主要问题是类strss中的动态创建与继承之间关系的问题，简单来说strs就是一个简单地字符串类，我想用strss继承strs，并动态的创建一个strs类的数组，整个代码的功能：输入整数，再输入相应个数个字符串，判断其是否符合，所有字符串判断完后一次性输出YES或者NO。", "代码报错arr不存在。", "另外可能有的小伙伴可能知道这个题，会说我题目没读对，我发现了，但是题的问题不难，主要是这个", "另外", "感谢各位的观看！", "c++路上加油！", "\n", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<string>", "\n", "using", " ", "namespace", " std;\n", "class", " ", "strs", "                     ", "//字符串类 ", "\n{\n    ", "public", ":\n        string str;            \n        ", "int", " np,nt;            ", "//分别记录PAT的数量，正常来说，PT只含有一个且有序，A无限制  ", "\n        ", "bool", " flag;\n        \n        ", "strs", "()                ", "//构造函数 ", "\n        {\n            cin>>str;\n            flag=", "true", ";\n            np=", "0", ";\n            nt=", "0", ";\n            ", "for", "(", "int", " i=", "0", ";i<str.", "size", "();i++)\n            {\n                ", "if", "(str[i]==", "'P'", ") np++;\n                ", "else", " ", "if", "(str[i]==", "'T'", ") nt++;\n                ", "else", " ", "if", "(str[i]==", "'A'", ") ", "continue", ";\n                ", "else", " flag=", "false", ";\n            }\n            cout<<", "\"strs构造函数\"", "<<endl;\n        } \n        \n        ", "void", " ", "judgeit", "()", "               ", "//判断函数 ：判断strs对象的str字符串是否满足条件 ", "\n        ", "{\n            ", "int", " nup=", "0", ",nut=", "0", ";\n            ", "if", "(np==", "1", "&&nt==", "1", "&&flag)   ", "//P和T智能存在一个 ，flag为true时字符串不含有PAT以外的字符 ", "\n            {\n                ", "for", "(", "int", " i=", "0", ";i<str.", "size", "();i++)\n                 {\n                    ", "if", "(str[i]==", "'P'", ") nup=i;\n                    ", "else", " ", "if", "(str[i]==", "'T'", ") nut=i;\n                     ", "else", " ", "continue", ";\n                }\n               ", "if", "(nup+", "1", "<nut) cout<<", "\"YES\"", "<<endl;\n               ", "else", " cout<<", "\"NO\"", "<<endl;\n            }\n            ", "else", "\n            cout<<", "\"NO\"", "<<endl;\n        }        \n};\n\n\n", "class", " ", "strss", " :", "public", " strs      ", "//目的：构建一个strs类的对象的数组，然后通过 创建strss类的对象完成所有创建 ", "\n{\n    ", "public", ":\n        ", "int", " nums;\n        ", "strss", "()\n        {\n            cin>>nums;\n            strs *arr=", "new", " strs[nums];  \n            cout<<", "\"strss构造\"", "<<endl;\n        }\n};\n\n\n\n", "int", " ", "main", "()", "\n", "{\n    strss a1;\n    ", "for", "(", "int", " j=", "0", ";j<a1.nums;j++)\n    {\n        a1.arr[j].", "judgeit", "();\n    }\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;.name取他的列名。觉得有帮助还请点采纳哦&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["DataFrame中的name属性值", ["a = pd.DataFrame(np.arange(12).reshape(3,4),index=list(\"abc\"),columns=list(\"vxyz\"))", "a = a.apply(lambda m:np.square(m) if m.name == \"x\" else m)", "print(a)", "\n", "m.name是什么意思，DataFrame中的name属性值是什么？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你现在有什么问题呢&amp;#xff1f;编译错误还是运行结果错误&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["可以帮我看一下登录进去之后浏览函数和借阅函数哪里出问题了吗", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <", "time", ".h>\n\ntypedef struct book\n{\n    char bnum[", "10", "];", "//书籍编号 ", "\n    char bname[", "30", "];", "//书名 ", "\n    char bauthor[", "20", "];", "//作者 ", "\n    char bclassfy[", "10", "];", "//类别编号 ", "\n    float bprice;", "//价格 ", "\n    int quantity;", "//数量 ", "\n    struct book* next;", "//链表指针 ", "\n }BookInfo;\n\n BookInfo* CreateBooksList();", "//创建链表", "\nvoid Insert(BookInfo* head);", "//插入", "\nvoid Delete(BookInfo* head);", "//删除", "\nvoid Print(BookInfo* head);", "//浏览 ", "\nvoid Search(BookInfo* head);", "//查询 ", "\nvoid Update(BookInfo* head);", "//修改 ", "\nvoid Save(BookInfo* head);", "//保存 ", "\nvoid Borrowedbooks();", "//图书借阅 ", "\ntypedef struct User\n{\n    char ", "name", "[", "10", "];", "//名字", "\n    char password[", "10", "];", "//密码", "\n    char book[", "10", "];", "//借的书 ", "\n    struct User* next;  ", "//下一位用户", "\n}user;\nstruct bk", "//查找 ", "\n{\n    char bnum[", "10", "];", "//书籍编号 ", "\n    char bname[", "30", "];", "//书名 ", "\n    char bauthor[", "20", "];", "//作者 ", "\n    char bclassfy[", "10", "];", "//类别编号 ", "\n    float bprice;", "//价格 ", "\n    int quantity;", "//数量 ", "\n};\nstruct ur", "//查找 ", "\n{\n    char ", "name", "[", "10", "];", "//名字", "\n    char password[", "10", "];", "//密码", "\n    char book[", "10", "];", "//借的书 ", "\n};\n\nuser* CreateusersList();", "//创建链表 ", "\nvoid userInsert(user* head);", "//注册用户信息 ", "\nvoid userDelete(user* head);", "//删除用户", "\nvoid userprint(user* head);", "//浏览用户 ", "\nuser* serch_username(char* ", "name", ");", "//根据名字查找用户 ", "\nvoid user_login();  ", "//用户登录", "\nvoid userUpdate(user* head);", "//更改用户信息 ", "\nvoid userSave(user* head);", "//保存用户信息 ", "\nint usermenu();", "//用户系统", "\nvoid adminlogin();", "//管理员登录 ", "\n\n", "//创建用户名单 ", "\nuser* CreateusersList()\n{\n    user* head;\n    head=(user*)malloc(sizeof(user));", "//为头结点分配空间 ", "\n    ", "head", "->", "next=NULL;", "//初始化头指针", "\n    return head; \n } \n ", "//注册用户信息 ", "\nvoid userInsert(user* head)\n{\n    user *b, *p;\n    char flag=", "'Y'", ";\n    p=head;\n    ", "while", " (p->", "next !=NULL)\n        ", "p", "=p->", "next;\n    ", "//开辟新空间，存储用户信息，并加入链表", "\n    ", "while", " (flag==", "'Y'", "||flag==", "'y'", ")\n    {\n        b=(user*)malloc(sizeof(user));", "//开辟新空间", "\n        printf(", "\"请输入用户名：\"", ");", "//获取名称信息 ", "\n        fflush(stdin); ", "//清空缓存区", "\n        ", "scanf", "(\"%s\",b->", "name", ");\n        printf(", "\"请输入密码：\"", ");\n        fflush(stdin);\n        ", "scanf", "(\"%s\",b->", "password);\n        ", "p", "->", "next=b;", "//将新增加的节点加入链表", "\n        p=b;", "//指针p向后移动，指向尾结点", "\n        ", "b", "->", "next=NULL;\n        printf(", "\"注册成功！\\n\"", ");\n        fflush(stdin);\n        break;\n     } \n     return;\n }\nuser* user_head;  ", "//用户头指针", "\nuser* serch_username(char* ", "name", ")  ", "//查找用户名", "\n{\n    ", "user", "* np = user_head->", "next;\n    ", "while", " (np)\n    {\n        ", "if", " (!strcmp(np->", "name", ", ", "name", ")) return np;\n        ", "np", " = np->", "next;\n    }\n    return NULL;\n}\n\n", "//用户登录 ", "\nvoid user_login()  ", "//用户登录", "\n{\n    char ", "name", "[", "30", "];\n    char password[", "30", "];\n    printf(", "\"请输入您的用户名(不超过10个字母)：\\n\"", ");\n    scanf(", "\"%s\"", ", ", "name", ");\n    printf(", "\"请输入您的账号密码(不超过10个字母)：\\n\"", ");\n    scanf(", "\"%s\"", ", password);\n    int i,j=", "0", ";\n    FILE* fp;\n    struct ur u;\n    fp=fopen(", "\"F:\\\\c语言课设\\\\userslist.txt\"", ",", "\"r\"", "); \n    ", "if", "(j=", "0", ")\n    {\n        ", "for", "(i=", "0", ";i<", "10", ";i++)\n    {\n        fscanf(fp,", "\"%s %s %s\\n\"", ",&u.", "name", ",&u.password,&u.book);\n        ", "if", "(strcmp(u.", "name", ",", "name", ")==", "0", "&&strcmp(u.password,password)==", "0", ")\n        {\n            printf(", "\"恭喜您登录成功,即将跳转用户界面...\\n\"", ");\n            system(", "\"cls\"", ");\n            j=", "1", ";\n            usermenu();\n        }\n    }\n    fclose(fp);\n    }\n    ", "if", "(j=", "0", ")\n    {\n        printf(", "\"用户名或密码错误\\n\"", ");\n    }\n    }\n\n", "//", "\n\n \n ", "//删除用户 ", "\nvoid userDelete(user* head)\n{\n    user *b, *p;\n    char tmp[", "30", "];\n    int flag;\n    flag=", "0", ";\n    b=head;\n    p=head;\n    printf(", "\"请输入要删除的用户名：\"", ");\n    fflush(stdin);\n    scanf(", "\"%s\"", ",tmp);\n    ", "//遍历链表", "\n    ", "while", " (p!=NULL)\n    {\n        ", "if", "(strcmp(p->", "name", ",tmp)==", "0", ")\n        {\n            flag=", "1", ";\n            break;\n        }\n        ", "p", "=p->", "next;\n     } \n    ", "if", " (flag==", "1", ")\n    {\n        ", "for", " (;b->", "next !=p;)\n        {\n            ", "b", "=b->", "next;\n        }\n        ", "b", "->", "next", "=p->", "next;\n        free(p);\n        printf(", "\"删除成功！\\n\"", ");\n    }\n    ", "else", "\n        printf(", "\"该用户不存在！\"", ");\n    return;\n  } \n", "//浏览用户 ", "\nvoid userprint(user* head)\n{\n    user *p;\n    FILE *fp;\n    fp=fopen(", "\"F:\\\\c语言课设\\\\userslist.txt\"", ",", "\"r\"", ");\n    rewind(fp);\n    char ch=fgetc(fp);\n    ", "while", "(ch!=-", "1", ")\n    {\n        putchar(ch);\n        ch=fgetc(fp);\n    }\n    fclose(fp);\n\n }\n", "//查找用户 ", "\nvoid userSearch(user* head)\n{\n    user *p;\n    char tmp[", "30", "];\n    int flag=", "0", ";\n    p=head;\n    ", "if", "(head==NULL||head->", "next==NULL)\n    {\n        printf(", "\"清单为空！\\n\"", ");\n    }\n    ", "else", "\n    {\n        printf(", "\"请输入用户名：\"", ");\n        fflush(stdin);\n        scanf(", "\"%s\"", ",tmp);\n        ", "while", "(p->", "next !=NULL)\n        {\n            ", "p", "=p->", "next;\n            ", "if", "(strcmp(p->", "name", ",tmp)==", "0", ")\n            {\n                flag=", "1", ";\n                ", "printf", "(\"用户名：%s\\n\",p->", "name", ");\n                return;\n            }\n            ", "if", "(p->", "next==NULL)\n            {\n                printf(", "\"\\n查询完毕！\"", ");\n            }\n            \n        }\n        ", "if", "(flag==", "0", ")\n        {\n            printf(", "\"没有找到该用户!\\n\"", ",tmp);\n        }\n    }\n    return;\n }\n \n", "//保存用户信息 ", "\nvoid userSave(user* head)\n{\n    user *p;\n    FILE *fp;\n    p=head;\n    ", "//以只写的方式打开文件", "\n    fp=fopen(", "\"F:\\\\c语言课设\\\\userslist.txt\"", ",", "\"a\"", ");\n    ", "while", " (p->", "next !=NULL)\n    {\n        ", "p", "=p->", "next;\n        ", "fprintf", "(fp,\"%-6s %-10s\\n\",p->", "name", ",p->", "password);\n    }\n    fclose(fp);\n    printf(", "\"保存成功！\\n\"", ");\n    printf(", "\"数据已成功保存到F:\\\\c语言课设\\\\userslist.txt\\n\"", ");\n     \n }   \nint menu();", "//菜单 ", "\n\n", "//创建书单", "\nBookInfo* CreateBooksList()\n{\n    BookInfo* head;\n    head=(BookInfo*)malloc(sizeof(BookInfo));", "//为头结点分配空间 ", "\n    ", "head", "->", "next=NULL;", "//初始化头指针", "\n    return head; \n } \n", "//插入记录", "\nvoid Insert(BookInfo* head)\n{\n    BookInfo *b, *p;\n    char flag=", "'Y'", ";\n    p=head;\n    ", "while", " (p->", "next !=NULL)\n        ", "p", "=p->", "next;\n    ", "//开辟新空间，存储书籍信息，并加入链表", "\n    ", "while", " (flag==", "'Y'", "||flag==", "'y'", ")\n    {\n        b=(BookInfo*)malloc(sizeof(BookInfo));", "//开辟新空间", "\n        printf(", "\"请输入图书编号：\"", ");", "//获取书籍信息 ", "\n        fflush(stdin); ", "//清空缓存区", "\n        ", "scanf", "(\"%s\",b->", "bnum);\n        printf(", "\"请输入书名：\"", ");\n        fflush(stdin);\n        ", "scanf", "(\"%s\",b->", "bname);\n        printf(", "\"请输入作者：\"", ");\n        fflush(stdin);\n        ", "scanf", "(\"%s\",b->", "bauthor);\n        printf(", "\"请输入类别编号：\"", ");\n        fflush(stdin);\n        ", "scanf", "(\"%s\",b->", "bclassfy);\n        printf(", "\"请输入图书价格：\"", ");\n        fflush(stdin);\n        ", "scanf", "(\"%f\",&b->", "bprice);\n        printf(", "\"请输入图书数量：\"", ");\n        fflush(stdin);\n        ", "scanf", "(\"%d\",&b->", "quantity);\n        ", "p", "->", "next=b;", "//将新增加的节点加入链表", "\n        p=b;", "//指针p向后移动，指向尾结点", "\n        ", "b", "->", "next=NULL;\n        printf(", "\"添加成功！\\n继续添加？(Y/N):\"", ");\n        fflush(stdin);\n        scanf(", "\"%c\"", ",&flag);\n        ", "if", "(flag==", "'N'", "||flag==", "'n'", ")break;\n        ", "else", " ", "if", " (flag==", "'Y'", "||flag==", "'y'", ")continue; \n     } \n     return;\n }\n", "//删除记录", "\nvoid Delete(BookInfo* head)\n{\n    BookInfo *b, *p;\n    char tmp[", "30", "];\n    int flag;\n    flag=", "0", ";\n    b=head;\n    p=head;\n    printf(", "\"请输入要删除的书籍名：\"", ");\n    fflush(stdin);\n    scanf(", "\"%s\"", ",tmp);\n    ", "//遍历链表", "\n    ", "while", " (p!=NULL)\n    {\n        ", "if", "(strcmp(p->", "bname,tmp)==", "0", ")\n        {\n            flag=", "1", ";\n            break;\n        }\n        ", "p", "=p->", "next;\n     } \n    ", "if", " (flag==", "1", ")\n    {\n        ", "for", " (;b->", "next !=p;)\n        {\n            ", "b", "=b->", "next;\n        }\n        ", "b", "->", "next", "=p->", "next;\n        free(p);\n        printf(", "\"删除成功！\\n\"", ");\n    }\n    ", "else", "\n        printf(", "\"该书不存在！\"", ");\n    return;\n  }  \n", "//浏览书单", "\nvoid print(BookInfo* head)\n{\n    BookInfo *p;\n    FILE *fp;\n    fp=fopen(", "\"F:\\\\c语言课设\\\\bookslist.txt\"", ",", "\"r\"", ");\n    rewind(fp);\n    printf(", "\"-----------------------------------------------------\\n\"", ");\n    printf(", "\"|编号   |书名   |作者    |类别编号   |价格   |数量  |\\n\"", ");\n    printf(", "\"-----------------------------------------------------\\n\"", ");\n    char ch=fgetc(fp);\n    ", "while", "(ch!=-", "1", ")\n    {\n        putchar(ch);\n        ch=fgetc(fp);\n    }\n    fclose(fp);\n\n } \n", "//查找书籍", "\nvoid Search(BookInfo* head)\n{\n    BookInfo *p;\n    char tmp[", "30", "];\n    int flag=", "0", ";\n    p=head;\n    ", "if", "(head==NULL||head->", "next==NULL)\n    {\n        printf(", "\"清单为空！\\n\"", ");\n    }\n    ", "else", "\n    {\n        printf(", "\"请输入书籍名：\"", ");\n        fflush(stdin);\n        scanf(", "\"%s\"", ",tmp);\n        ", "while", "(p->", "next !=NULL)\n        {\n            ", "p", "=p->", "next;\n            ", "if", "(strcmp(p->", "bname,tmp)==", "0", ")\n            {\n                flag=", "1", ";\n                ", "printf", "(\"编号：%s\\n 书名：《%s》\\n作者：%s\\n分类：%s\\n价格：%.2f\\n\",p->", "bnum", ",p->", "bname", ",p->", "bauthor", ",p->", "bclassfy", ",p->", "bprice);\n                return;\n            }\n            ", "if", "(p->", "next==NULL)\n            {\n                printf(", "\"\\n查询完毕！\"", ");\n            }\n            \n        }\n        ", "if", "(flag==", "0", ")\n        {\n            printf(", "\"没有找到《%s》!\\n\"", ",tmp);\n        }\n    }\n    return;\n }\nvoid creat_user_list(char* ", "name", ", char* password)  ", "//创建用户链表", "\n{\n    user* head;\n    user* np = (user*)malloc(sizeof(user));\n    np = user_head;\n    ", "while", " (np->", "next", ") np = np->", "next;\n    User* tp = (user*)malloc(sizeof(user));\n    ", "strcpy", "(tp->", "name", ", ", "name", ");\n    ", "strcpy", "(tp->", "password, password);\n    ", "tp", "->", "next = NULL;\n    ", "np", "->", "next = tp;\n    userSave(head);\n    \n}\n", "//修改信息", "\nvoid Update(BookInfo* head)\n{\n    BookInfo *p;\n    int flag=", "0", ";\n    char tmp[", "30", "];\n    p=head;\n    printf(", "\"请输入书名：\"", ");\n    fflush(stdin);\n    scanf(", "\"%s\"", ",tmp);\n    ", "while", "(p->", "next!=NULL)\n    {\n        ", "p", "=p->", "next;\n        ", "if", "(strcmp(p->", "bname,tmp)==", "0", ")\n        {\n            flag=", "1", ";", "//标志找到所要修改修改的书籍", "\n            printf(", "\"请输入编号：\"", ");\n            fflush(stdin);\n            ", "scanf", "(\"%s\",p->", "bnum);\n            printf(", "\"请输入书名：\"", ");\n            fflush(stdin);\n            ", "scanf", "(\"%s\",p->", "bname);\n            printf(", "\"请输入作者：\"", ");\n            fflush(stdin);\n            ", "scanf", "(\"%s\",p->", "bauthor);\n            printf(", "\"请输入类别编号：\"", ");\n            fflush(stdin);\n            ", "scanf", "(\"%s\",p->", "bclassfy);\n            printf(", "\"请输入价格：\"", ");\n            fflush(stdin);\n            ", "scanf", "(\"%s\",p->", "bprice);\n\n        }\n    }\n    ", "if", " (flag==", "0", ")\n    {\n        printf(", "\"没有找到《%s》!\\n\"", ",tmp);\n    }\n    return;\n } \n \n", "//保存书单到文件", "\nvoid Save(BookInfo* head)\n{\n    BookInfo *p;\n    FILE *fp;\n    p=head;\n    ", "//以只写的方式打开文件", "\n    fp=fopen(", "\"F:\\\\c语言课设\\\\bookslist.txt\"", ",", "\"a\"", ");\n    ", "while", " (p->", "next !=NULL)\n    {\n        ", "p", "=p->", "next;\n        ", "fprintf", "(fp,\"%-6s %-10s %-10s %-10s %.2lf %d\\n\",p->", "bnum", ",p->", "bname", ",p->", "bauthor", ",p->", "bclassfy", ",p->", "bprice", ",p->", "quantity);\n    }\n    fclose(fp);\n    printf(", "\"保存成功！\\n\"", ");\n    printf(", "\"数据已成功保存到F:\\\\c语言课设\\\\bookslist.txt\\n\"", ");\n     \n } \nvoid user_register()  ", "//用户注册", "\n{\n    char ", "name", "[", "30", "];\n    printf(", "\"请输入您需要注册的用户名(不超过25个字母)：\\n\"", ");\n    scanf(", "\"%s\"", ", ", "name", ");\n    User* account;\n    ", "while", " (account = serch_username(", "name", "), account != NULL)\n    {\n        printf(", "\"该用户名已存在，请重新输入！\\n\"", ");\n        scanf(", "\"%s\"", ", ", "name", ");\n    }\n    printf(", "\"请输入您的账号密码(不超过25个字母)：\\n\"", ");\n    char password[", "30", "];\n    scanf(", "\"%s\"", ", password);\n    creat_user_list(", "name", ", password);\n    printf(", "\"恭喜您注册成功！\\n\"", ");\n}\n", "//菜单", "\nvoid main_menu()  ", "//主菜单", "\n{\n    user *head;\n    BookInfo *headd;\n    int a,b,c,d;\n    head=NULL;\n    ", "while", " (", "1", ")\n    {\n        printf(", "\"+---------------------------------------------+\\n\"", ");\n        printf(", "\"*            欢迎进入本图书管理系统!          *\\n\"", ");\n        printf(", "\"*         请输入选项前的数字以确认操作！      *\\n\"", ");\n        printf(", "\"*               1、用户注册                   *\\n\"", ");\n        printf(", "\"*               2、用户登陆                   *\\n\"", ");\n        printf(", "\"*               3、管理员登陆                 *\\n\"", ");\n        printf(", "\"*               0、退出               *\\n\"", ");\n        printf(", "\"+---------------------------------------------+\\n\"", ");\n        int op; \n        scanf(", "\"%d\"", ", &op); \n        switch (op)\n        {\n        case ", "1", ": ", "if", "(head==NULL)\n                {\n                    head=CreateusersList();\n                }\n                userInsert(head);\n                userSave(head);\n                break;\n        case ", "2", ": user_login();\n                usermenu();\n                b=usermenu();\n                switch (b)\n                {\n                    case ", "1", ":print(headd); usermenu();\n                    case ", "2", ":Search(headd); usermenu();\n                    case ", "3", ":Borrowedbooks(); usermenu();\n                    case ", "4", ":\n                    case ", "5", ":userSave(head); usermenu();\n                    case ", "6", ":exit(", "0", "); break;\n                }\n                break;\n        case ", "3", ": adminlogin();  break;\n        case ", "0", ": exit(", "0", "); break;\n        default: printf(", "\"错误的指令，请重新输入！\\n\"", "); \n        }\n    }\n}\nint adminmenu()\n{\n    int sec;\n    user *head;\n    BookInfo *headd;\n    headd=NULL;\n    printf(", "\"                    管理员系统                     \\n\"", ");\n    printf(", "\"-----------------------------------------------------\\n\"", ");\n    printf(", "\"                   1-图书信息录入\\n\"", ");\n    printf(", "\"                   2-图书信息浏览\\n\"", ");\n    printf(", "\"                   3-图书信息查询\\n\"", ");\n    printf(", "\"                   4-图书信息修改\\n\"", ");\n    printf(", "\"                   5-图书信息删除\\n\"", ");\n    printf(", "\"                   6-图书信息保存\\n\"", ");\n    printf(", "\"                   7-删除用户\\n\"", ");\n    printf(", "\"                   8-浏览用户\\n\"", ");\n    printf(", "\"                   9-退出\\n\"", ");\n    printf(", "\"-----------------------------------------------------\\n\"", ");\n    printf(", "\"请选择：\"", ");\n    fflush(stdin);\n    scanf(", "\"%d\"", ",&sec);\n    switch (sec)\n    {\n        case ", "1", ":\n            ", "if", "(headd==NULL)\n            {\n                headd=CreateBooksList();\n            }\n            Insert(headd);\n            Save(headd); \n            break;\n        case ", "2", ":print(headd); break;\n        case ", "3", ":Search(headd); break;\n        case ", "4", ":Update(headd); break;\n        case ", "5", ":Delete(headd); break;\n        case ", "6", ":Save(headd); break;\n        case ", "7", ":\n        case ", "8", ":\n        case ", "9", ":exit(", "0", "); break;\n    }\n    ", "while", "(sec>", "7", "||sec<", "0", ")\n    {\n        printf(", "\"选择有误！\\n请重新输入：\"", ");\n        scanf(", "\"%d\"", ",&sec);\n     } \n    return sec;\n }\n ", "//管理员登录 ", "\nvoid adminlogin()\n{\n    char tmp[", "30", "];\n    char tmpp[", "30", "];\n    int flag=", "0", ";\n        printf(", "\"请输入用户名：\"", ");\n        fflush(stdin);\n        scanf(", "\"%s\"", ",tmp);\n        printf(", "\"请输入密码：\"", ");\n        fflush(stdin);\n        scanf(", "\"%s\"", ",tmpp);\n            ", "if", "(strcmp(", "\"dyq\"", ",tmp)==", "0", "&&strcmp(", "\"123\"", ",tmpp)==", "0", ")\n            {\n                flag=", "1", ";\n                printf(", "\"登陆成功\\n\"", ");\n                system(", "\"cls\"", ");\n                adminmenu();\n                \n            }\n            \n        ", "if", "(flag==", "0", ")\n        {\n            printf(", "\"用户名或密码错误!\\n\"", ",tmp);\n        }\n        \n    return;\n }\n int usermenu()\n {\n     int b;\n    printf(", "\"                    用户系统                     \\n\"", ");\n    printf(", "\"-----------------------------------------------------\\n\"", ");\n    printf(", "\"                   1-图书信息浏览\\n\"", ");\n    printf(", "\"                   2-图书信息查询\\n\"", ");\n    printf(", "\"                   3-图书借阅\\n\"", ");\n    printf(", "\"                   4-图书归还\\n\"", ");\n    printf(", "\"                   5-保存用户信息\\n\"", ");\n    printf(", "\"                   6-退出\\n\"", ");\n    printf(", "\"-----------------------------------------------------\\n\"", ");\n    printf(", "\"请选择：\"", ");\n    fflush(stdin);\n    scanf(", "\"%d\"", ",&b);\n    ", "while", "(b>", "6", "||b<", "0", ")\n    {\n        printf(", "\"选择有误！\\n请重新输入：\"", ");\n        scanf(", "\"%d\"", ",&b);\n     } \n    return b;    \n }\nint tjzs()", "//统计图书文本个数", "\n{\nFILE *fp;\nint n;\nfloat bprice=", "0", ";\nint quantity=", "0", ";\nchar bum[", "10", "]={", "'\\0'", "},bname[", "30", "]={", "'\\0'", "},bauthor[", "20", "]={", "'\\0'", "},bclassfy[", "10", "]={", "'\\0'", "};\nfp=fopen(", "\"library.txt\"", ",", "\"r\"", ");", "//打开文件", "\n", "for", " (n=", "0", ";!feof(fp);n++)", "//逐个读文件", "\nfscanf(fp,", "\"%-6s %-10s %-10s %-10s %.2lf %d\\n\"", ",bum,bname,bauthor,bclassfy,&bprice,&quantity);\nn--;\nfclose(fp);", "//关闭文件", "\nreturn (n);", "//返回个数", "\n}\n\nvoid Borrowedbooks()", "//借书函数", "\n{\n    FILE *fp,*fp3;\n    BookInfo *head=NULL;\n    BookInfo *p,*p1,*p2;\n    int i,", "loop", ",k,n=", "0", ",flag=", "0", ",s=", "0", ";\n    int quantity=", "0", ";\n    float bprice=", "0", ";\n    char bnum[", "10", "]={", "'\\0'", "},bname[", "30", "]={", "'\\0'", "},bauthor[", "20", "]={", "'\\0'", "},bclassfy[", "10", "]={", "'\\0'", "},\n         ", "name", "[", "30", "]={", "'\\0'", "},password[", "30", "]={", "'\\0'", "},riqi[", "20", "]={", "'\\0'", "},book[", "10", "];\n    char hit=", "0", ";\n        printf(", "\"\\n请输入借阅书名:\\n请输入:\"", ");\n        scanf(", "\"%s\"", ",book);\n    k= tjzs();", "//统计图书馆文件个数", "\n\n    ", "for", " (i=", "0", ";i<k;i++)", "//先将图书信息建立链表，更改库存", "\n        {\n            fscanf(fp,", "\"%-6s %-10s %-10s %-10s %.2lf %d\\n\"", ",bnum,bname,bauthor,bclassfy,&quantity,&bprice);\n            n++;\n            ", "if", "(n==", "1", ")\n            {\n                p1=p2=(BookInfo*)malloc(sizeof(BookInfo));\n                head=p1;\n            }\n            ", "else", "\n               {\n                ", "p2", "->", "next=p1;\n                p2=p1;\n                p1=(BookInfo*)malloc(sizeof(BookInfo));\n\n            }\n            ", "strcpy", "(p1->", "bnum,bnum);", "//复制书号", "\n            ", "strcpy", "(p1->", "bname,", "name", ");", "//复制书名", "\n            ", "strcpy", "(p1->", "bauthor,bauthor);", "//复制作者", "\n            ", "strcpy", "(p1->", "bclassfy,bclassfy);", "//复制出版社", "\n            ", "p1", "->", "quantity=quantity;", "//复制现存量", "\n            ", "p1", "->", "bprice=bprice;", "//复制单价", "\n        }\n        ", "if", "(n==", "0", ")\n         head=NULL;\n        ", "else", "\n         {\n             ", "p2", "->", "next=p1;\n             ", "p1", "->", "next=NULL;\n             fclose(fp);\n         }\n\n    p=head;\n    \n    ", "for", " (;p!=NULL;)\n    {\n        ", "if", "(!(strcmp(p->", "bname,book)))", "//判断要借书的是否存在，标记等于1，存在库存减一", "\n        {\n            \n            flag=", "1", ";\n             ", "loop", "=p->", "quantity;\n             (", "p", "->", "quantity)--;\n         }\n            ", "p", "=p->", "next;\n  }\n    ", "if", "(flag&&(", "loop", ">", "0", "))", "//存在被借的图书且现存量大于0，把库存量变化后的链表存入文件", "\n    {\n\n        fp=fopen(", "\"F:\\\\c语言课设\\\\bookslist.txt\"", ",", "\"w\"", ");\n        fclose(fp);\n        fp=fopen(", "\"F:\\\\c语言课设\\\\bookslist.txt\"", ",", "\"a\"", ");\n        p=head;\n\n        ", "for", "(;p !=NULL;)\n        {\n            ", "fprintf", "(fp,\"%-6s %-10s %-10s %-10s %.2lf %d\\n\",p->", "bnum", ",p->", "bname", ",p->", "bauthor", ",p->", "bclassfy", ",p->", "bprice", ",p->", "quantity);\n                  ", "p", "=p->", "next;\n        }\n        free(p);\n        fclose(fp);\n\n        ", "if", " ((fp3=fopen(", "\"F:\\\\c语言课设\\\\userslist.txt\"", ",", "\"r\"", "))==NULL)", "//建读者文件夹存入借书信息", "\n        {\n            fp3=fopen(", "\"F:\\\\c语言课设\\\\userslist.txt\"", ",", "\"w\"", ");", "//打开只读文件", "\n            fclose(fp3);\n        }\n        fp3=fopen(", "\"F:\\\\c语言课设\\\\userslist.txt\"", ",", "\"a\"", ");\n\n        printf(", "\"\\n请按以下格式输入读者信息:\\n姓名 密码 借书书名\\n请输入:\"", ");", "//录入读者信息", "\n         scanf(", "\"%d %s %s %s\"", ",&", "name", ",password,book);\n        fprintf(fp,", "\"%s %s %s\\n\"", ",", "name", ",password,book);\n        fclose(fp3);\n        printf(", "\"借书成功!请两个月内归还！！！按任意键返回\\n\"", ");\n        usermenu();", "//调用借阅系统", "\n   }\n    ", "else", "\n    {\n        ", "if", "(flag!=", "0", ")\n        printf(", "\"此书已被借完!按任意键返回!\"", ");", "//否则输出此书已被借完", "\n        ", "else", "\n        printf(", "\"查找无此书!按任意键返回\"", ");\n    }\n        usermenu();", "//调用借阅系统", "\n\n}\n\nint main()\n{\n    user *head;\n    BookInfo *headd;\n    int a,b,c,d;\n    head=NULL;\n    ", "for", " (;;)\n    {\n        main_menu();\n    }\n    return ", "0", ";\n}\n\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;name里用英文&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["利用numpy创建一个包含学生信息的数据类型", ["尝试创建stu1 数据类型，包括姓名，学号，身份证号码，手机号码，宿舍地址。数据类型自行确定，并采用该类型来初始化一个学生对象", "\n", "import numpy as np\nstu1=np", ".dtype", "(", "[(", "'name'", ", ", "'S20'", "),(", "'id'", ",", "'S20'", "),(", "'sfz'", ",", "'i1'", "),(", "'phone'", ",", "'i1'", "),(", "'address'", ",", "'S20'", ")]", ")\nstu1_1=np", ".array", "(", "[(", "'张三'", ",", "'10'", ",", "'12'", ",", "'13962'", ",", "'15502'", ")]", ",stu1)\n", "print", "(stu1)", "\n", "print", "(stu1_1)", "\n", "\n", "报错：'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;可变对象&amp;#xff0c;&amp;#43; 操作改变了值&amp;#xff0c;id肯定会变&amp;#xff0c;而&amp;#43;&amp;#61; 是本地操作&amp;#xff0c;其值原地修改&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;1.对于&amp;#43;号操作&amp;#xff0c;可变对象和不可变对象调用的都是__add__操作&lt;br /&gt;2.对于&amp;#43;&amp;#61;号操作&amp;#xff0c;可变对象调用__add__&amp;#xff0c;不可变对象调用的是__iadd__(不可变对象没有__iadd__)   __iadd__是原地修改&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["(python)函数接口里等价表示+=输出的结果却不同", ["move_on 函数dot的迭代那两个表达式应该是等价的,但为什么换了一次输出结果就变了", "问题背景是运动学迭代方程求轨迹,然后对固定轨迹搜索每一步的参数", "\n", "from", " PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\n", "#让图表显示出中文", "\nplt.rcParams[", "'font.sans-serif'", "]=[", "'SimHei'", "]\nplt.rcParams[", "'axes.unicode_minus'", "] = ", "False", "\nimport random\nimport math as m\ndef new():\n    x0,y0,vl,vr,", "theta", "=0.0,0.0,0.1,0.1,0.0\n    ", "dot", "=np.array([x0,y0,vl,vr,theta])\n    return dot\ndef move_on(dot,al,ar,dt):\n    ", "theta", "=dot[4]\n    ", "mid", "=np.mat(np.array([[m.cos(theta),m.sin(theta),0],[0,0,1]]))\n    ", "mid", "=np.transpose(mid)\n    ", "mid1", "=np.mat(np.array([[0.5,0.5],[1,-1]]))\n    ", "vm", "=np.transpose(np.mat([dot[3]+ar", "*d", "t,dot[2]+al", "*d", "t]))\n    ", "change", "=mid*mid1*vm\n    dot+=np.array([float(change[0])", "*d", "t,float(change[1])", "*d", "t,al", "*d", "t,ar", "*d", "t,float(change[2])", "*d", "t])\n    #", "dot", "=dot+np.array([float(change[0])", "*d", "t,float(change[1])", "*d", "t,al", "*d", "t,ar", "*d", "t,float(change[2])", "*d", "t])\n    return dot\n\ndef dif_one(dot1,dot2):\n    return (dot1[0]-dot2[0])*", "*2", "+(dot1[1]-dot2[1])*", "*2", "\ndef one_p_best(dot_pre,dot,a_max,N,dt):\n    ", "min_dif", "=1000000000\n    best_alr=[0,0,10000]\n    ", "for", " i ", "in", " range(2*N):\n        ", "for", " j ", "in", " range(2*N):\n            al,", "ar", "=a_max*(i-N)/N,a_max*(j-N)/N\n            #", "print", "(1)\n            ", "if", " dif_one(move_on(dot_pre,al,ar,dt),dot)<min_dif:\n                #", "print", "(123)\n                ", "min_dif", "=dif_one(move_on(dot_pre,al,ar,dt),dot)\n                best_alr=[a_max*(i-N)/N,a_max*(j-N)/N,min_dif]\n    ", "print", "((move_on(dot_pre,best_alr[0],best_alr[1],dt)[0],move_on(dot_pre,best_alr[0],best_alr[1],dt)[1]))\n    ", "print", "(best_alr)\n    ", "print", "(dif_one(move_on(dot_pre,best_alr[0],best_alr[1],dt),dot))\n    return best_alr\n\ndef one_by_search(dot,x_set,y_set,a_max,N,dt):\n    ", "n", "=len(x_set)\n    l_x=[];l_y=[];l_dif=[]\n    l_x.append(dot[0]);l_y.append(dot[1])\n    ", "for", " i ", "in", " range(1,n):\n        dot_true=[x_set[i],y_set[i]]\n        ", "l", "=one_p_best(dot,dot_true,a_max,N,dt)\n        al,ar,", "dif", "=l[0],l[1],l[2]\n        l_x.append(dot[0]);l_y.append(dot[1]);l_dif.append(dif)\n        ", "dot", "=move_on(dot,al,ar,dt)\n    plt.plot(x_set,y_set,", "label", "=", "'预设轨迹'", ",color='green')\n    plt.legend(", "loc", "=0)\n    plt.plot(l_x,l_y,", "label", "=", "'实际轨迹'", ",color='red')\n    plt.legend(", "loc", "=0)\n    plt.show()\n    plt.plot(x_set[1:],l_dif,", "label", "=", "'累积残差'", ")\n    plt.legend(", "loc", "=0)\n    plt.show()\nnew()\ntrue_x=[i/10 ", "for", " i ", "in", " range(10)]\ntrue_y=[m.sin(i) ", "for", " i ", "in", " true_x]\none_by_search(new(),true_x,true_y,1,10,0.1)\n", "#one_p_best(new(),[true_x[1],true_y[1]],1,100,0.1)", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;opencv或者numpy里面&amp;#xff0c;parsings &amp;#61;&amp;#61; idx&amp;#xff0c;idx是一个数字&amp;#xff0c;parsings 数组里面等于这个idx的数字全部是True&amp;#xff0c;而不等于的就会变成False&amp;#xff0c;parsings &amp;#61;&amp;#61; idx这句话的返回值&amp;#xff08;假设返回值为parsings_return&amp;#xff09;和parsings 的维度是一样的&amp;#xff0c;只不过数据由原来的parsings 的原始数据全部变成了True或者False。&lt;br /&gt;img[parsings &amp;#61;&amp;#61; idx] &amp;#61; 128这句话就表示将parsings_return 中为True的位置&amp;#xff08;x,y,z&amp;#xff09;上的img中的值改成128.&lt;br /&gt;举个例子来说&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n&lt;span class=\"hljs-attribute\"&gt;parsings&lt;/span&gt; &amp;#61;np.array([&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;])\n&lt;span class=\"hljs-attribute\"&gt;idx&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;img&lt;/span&gt;&amp;#61;np.array([&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;])\n&lt;span class=\"hljs-attribute\"&gt;parsings_return&lt;/span&gt;&amp;#61;parsings&amp;#61;&amp;#61;idx\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(parsings_return)\n&lt;span class=\"hljs-attribute\"&gt;imgs&lt;/span&gt;&amp;#61;img[parsings&amp;#61;&amp;#61;idx]\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(imgs)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/823389421246192.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;python下面的bool不像c&amp;#43;&amp;#43;下面可以使用0和非零表示的&amp;#xff0c;他就是True和False.&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python中一个三维数组等于一个数值，怎么理解？", ["  labels_to_mask = ", "[0,14,15,16,18]", "\n    ", "for", " idx ", "in", " labels_to_mask:\n        ", "img", "[parsings == idx]", " = ", "128", "\n", "\n", "img和parsings均是一个三维数组，parsing = np.array(parsing.getdata(), dtype=np.uint8).reshape(parsing.size[1], parsing.size[0], 3)", "谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;next()函数实际上调用了传入函数的.__next()__成员函数。所以&amp;#xff0c;如果传入的函数没有这个成员&amp;#xff0c;则会报错&lt;br /&gt;参考代码理解&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; torch\n&lt;span class=\"hljs-comment\"&gt;# 生成一些测试数据&lt;/span&gt;\nX &amp;#61; torch.normal(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, (&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)) &lt;span class=\"hljs-comment\"&gt;# x: sample size &amp;#61; 1000, feature_dim &amp;#61; 2&lt;/span&gt;\ny &amp;#61; torch.normal(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, (&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)) &lt;span class=\"hljs-comment\"&gt;# y: sample size &amp;#61; 1000, dim &amp;#61; 1&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 定义一个函数&amp;#xff0c;返回dataloader&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;load_array&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;data_and_label, batch_size, is_train&amp;#61;&lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;Construct a PyTorch data iterator.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    dataset &amp;#61; data.TensorDataset(*data_and_label)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; data.DataLoader(dataset, batch_size, shuffle&amp;#61;is_train)\n\nbatch_size &amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;\ndata_iter &amp;#61; load_array((X, y), batch_size)\n\n&lt;span class=\"hljs-comment\"&gt;#这句会报错&amp;#xff1a;next(data_iter)&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;next&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;iter&lt;/span&gt;(data_iter))\n&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n输出前10组数据\n&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这里&amp;#xff0c;为什么 next(data_iter) 报错&amp;#xff0c;而 next(iter(data_iter)) 可以返回数据呢&amp;#xff1f;这是因为&amp;#xff0c;pytorch的DataLoader函数没有 &lt;em&gt;next&lt;/em&gt; 成员&amp;#xff0c;但有 &lt;em&gt;iter&lt;/em&gt; 成员&amp;#xff08;见源文件&amp;#xff09;。所以&amp;#xff0c;需要首先通过 iter() 函数返回一个 &lt;em&gt;iter&lt;/em&gt; 成员&amp;#xff0c;再找这个 &lt;em&gt;iter&lt;/em&gt; 的 &lt;em&gt;next&lt;/em&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于pytorch中缺少next属性的报错", ["在pytorch学习深度学习时，按照官方文档尝试简单的分类器，但在运行的时候出现报错：（", "https://github.com/zergtant/pytorch-handbook/blob/master/chapter1/4_cifar10_tutorial.ipynb", "）", "\n", "\n", "import torch\nimport torchvision\nimport torchvision.transforms as transforms\n\ntransform = transforms.Compose(\n    [transforms.ToTensor(),\n     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n\ntrainset = torchvision.datasets.CIFAR10(", "root", "=", "'./data'", ", ", "train", "=", "True", ",\n                                        ", "download", "=", "True", ", ", "transform", "=transform)\ntrainloader = torch.utils.data.DataLoader(trainset, ", "batch_size", "=4,\n                                          ", "shuffle", "=", "True", ", ", "num_workers", "=2)\n\ntestset = torchvision.datasets.CIFAR10(", "root", "=", "'./data'", ", ", "train", "=", "False", ",\n                                       ", "download", "=", "True", ", ", "transform", "=transform)\ntestloader = torch.utils.data.DataLoader(testset, ", "batch_size", "=4,\n                                         ", "shuffle", "=", "False", ", ", "num_workers", "=2)\n\nclasses = (", "'plane'", ", ", "'car'", ", ", "'bird'", ", ", "'cat'", ",\n           ", "'deer'", ", ", "'dog'", ", ", "'frog'", ", ", "'horse'", ", ", "'ship'", ", ", "'truck'", ")\n", "\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " numpy ", "as", " np\n", "# 展示图像的函数", "\n", "def", " ", "imshow", "(", "img", "):\n    img = img / ", "2", " + ", "0.5", "     ", "# unnormalize", "\n    npimg = img.numpy()\n    plt.imshow(np.transpose(npimg, (", "1", ", ", "2", ", ", "0", ")))\n\n", "# 获取随机数据", "\ndataiter = ", "iter", "(trainloader)\nimages, labels = dataiter.", "next", "()\n\n", "# 展示图像", "\nimshow(torchvision.utils.make_grid(images))\n", "# 显示图像标签", "\n", "print", "(", "' '", ".join(", "'%5s'", " % classes[labels[j]] ", "for", " j ", "in", " ", "range", "(", "4", ")))\n", "\n", "运行结果及报错内容：", "\n", "AttributeError                            Traceback (most recent ", "call", " last)\n", "Input", " ", "In", " [", "3", "], ", "in", " <cell ", "line", ": ", "14", ">()\n     ", "12", " # 获取随机数据\n     ", "13", " dataiter = iter(trainloader)\n", "---> 14 images, labels = dataiter.next()", "\n     ", "16", " # 展示图像\n     ", "17", " imshow(torchvision.utils.make_grid(images))\n\nAttributeError: ", "'_MultiProcessingDataLoaderIter'", " ", "object", " has ", "no", " ", "attribute", " ", "'next'", "\n", "\n", "搜索发现", "\n", "_MultiProcessingDataLoaderIter作为DataLoader的iters，应该具有next属性啊", "\n", "请问是我环境安装出现什么问题了吗", "\n", "目前torch： 1.13.0+cu117    torchvision ： 0.14.0+cu117"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第一是B&amp;#xff0c;C&lt;br /&gt;第二是A,C&lt;br /&gt;第三是A,C&lt;br /&gt;第四是A,C&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["求答python数据分析题卷，大lao们做一下，万分ganxie！", ["二、 多选题 （共 4 题，20 分）", "1、给定多维数组 arr: arr =[[1 2 3] [4 5 6] [7 8 9]], 可以得到[[5 6] [8 9]]的操作是[2 分]（5.0）", "A、 arr[1:2,1:2] B、 arr[1:3,1:3] C、 arr[1:,1:] D、 arr[:,:] 正确答案： 解析：", "2、有 Series 结构数据 ser_obj = pd.Series([2,4,5,9,1,6]) ser_obj.index = ['a','b','c','d','e','f'] 能够获得[5,9,1]数据的操作是[2 分]（5.0）", "A、 print(ser_obj[2:5]) B、 print(ser_obj[1:6]) C、 print(ser_obj['c':'e']) D、 print(ser_obj['c':'f']) 正确答案： 解析：", "3、存在 Series 的结构数据 ser = pd.Series(['L', 'L', 'E', 'S','L']) ,将 ser 中的’L’替换为 None[2 分]（5.0）", "A、 ser=ser.replace({'L': None}) B、 ser=ser.replace({'L',None}) C、 ser= ser.replace(['L'],[None]) D、 ser= ser.replace('L',[None]) 正确答案： 解析：", "4、有 DataFrame 结构的 df_obj 数据,在水平方向上,对 df_obj 的每行进行后向填充,即水平方 向上进行后填充。 df_obj = pd.DataFrame(np.array([[1,3,5],[np.nan,np.nan,3],[2,np.nan,np.nan],[np.nan,2,np.na n]]))[2 分]（5.0）", "A、 df_obj.bfill(axis=1) B、 df_obj.bfill() C、 df_obj.fillna(method=\"bfill\",axis=1) D、 df_obj.fillna(method=\"bfill\") 正确答案： 解析："]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;np.sin 和plt.show 是函数后面少了()&lt;br /&gt;应该是这样&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/245486086356146.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n\nplt.rcParams[&lt;span class=\"hljs-string\"&gt;&amp;#39;axes.unicode_minus&amp;#39;&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-keyword\"&gt;False&lt;/span&gt;\n\nx&amp;#61;np.linspace(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;)\ny &amp;#61; (np.sin(x&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;)**&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) * (np.e**(-x**&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;))\n\nplt.plot(x,y)\nplt.&lt;span class=\"hljs-keyword\"&gt;show&lt;/span&gt;() #加上()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["利用matplotlib画出函数图像", ["大概是y=np.sin 那里出错了？f(x)函数的式子要怎么改？", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;加一个返回值应该可以&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt; \ndef options():\n    parser &amp;#61; argparse.ArgumentParser(&lt;span class=\"hljs-attribute\"&gt;description&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;tpccNet: A Fully-Convolutional Network For Inlier Estimation (Training)&amp;#39;&lt;/span&gt;)\n    parser.add_argument(&lt;span class=\"hljs-string\"&gt;&amp;#39;--exp_name&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-attribute\"&gt;type&lt;/span&gt;&amp;#61;str, &lt;span class=\"hljs-attribute\"&gt;default&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;exp_tpccnet&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-attribute\"&gt;metavar&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;N&amp;#39;&lt;/span&gt;,\n                        &lt;span class=\"hljs-attribute\"&gt;help&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Name of the experiment&amp;#39;&lt;/span&gt;)\n    \n    \n    #&lt;span class=\"hljs-built_in\"&gt; settings &lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; on training\n \n    parser.add_argument(&lt;span class=\"hljs-string\"&gt;&amp;#39;--seed&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-attribute\"&gt;type&lt;/span&gt;&amp;#61;int, &lt;span class=\"hljs-attribute\"&gt;default&lt;/span&gt;&amp;#61;1234)\n    return parser\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["请问我的代码哪里出问题了呢？", ["在运行代码的过程中遇到报错：", "AttributeError: 'NoneType' object has no attribute 'seed'", "\n", "报错部分代码：", "\n", "\ndef options():\n    parser = argparse.ArgumentParser(", "description", "=", "'tpccNet: A Fully-Convolutional Network For Inlier Estimation (Training)'", ")\n    parser.add_argument(", "'--exp_name'", ", ", "type", "=str, ", "default", "=", "'exp_tpccnet'", ", ", "metavar", "=", "'N'", ",\n                        ", "help", "=", "'Name of the experiment'", ")\n    \n    \n    #", " settings ", "for", " on training\n \n    parser.add_argument(", "'--seed'", ", ", "type", "=int, ", "default", "=1234)\n    \n    args = parser.parse_args()\n    return args\n", "\n", "def main", "()", ":\n    args = options", "()", "\n    torch.backends.cudnn.deterministic = True\n    torch.manual", "_seed(", "args", ".", "seed", ")", "                                  #此处报错\n    torch.cuda.manual", "_seed_all(", "args", ".", "seed", ")", "\n    np.random.seed(args.seed)\n \n    boardio = ", "SummaryWriter(", "log_dir", "='", "checkpoints", "/", "' + ", "args", ".", "exp_name", ")", "\n    ", "_init_(", "args", ")", "\n \n    textio = ", "IOStream('", "checkpoints", "/", "' + ", "args", ".", "exp_name", " + '", "/", "run", ".", "log", "')", "\n    textio.cprint(str(args))\n\n", "\n", "请问是什么原因呢？有没有什么解决方法？", "\n", "谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;说下个人看法&amp;#xff0c;如与你的观点不符&amp;#xff0c;以你的观点为主。&lt;br /&gt;python 不是比速度的&amp;#xff0c; 而是解决问题的高效&amp;#xff0c;即完成某些问题的解决方案时间比其他语言要好。&lt;br /&gt;其他库不知道&amp;#xff0c;我觉得pandas库倒是挺快&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/393352300056156.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["判断下列观点是否正确", ["众所周知，python是一个简单且低效的语言。关于速度深深困扰着实战派，一下观点是我的个人观点，求指点下。（所有数据都至少十万级）", "1、while 慢得离谱，海豹表达式作用不大", "2、for慢得离谱，但比while快一些。能用map用map，能用np用np", "3、pytorch（cpu）速度比numpy慢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;对于NumPy的ndarray对象来说&amp;#xff0c;不同长度的数组是无法垂直堆叠的。除了补齐长度&amp;#xff0c;似乎没有更好的方法。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python如何沿列堆叠不同维度的矩阵", ["我在创建不同长度RNA序列的独热编码，因为长度不同，所以不同序列生成的矩阵维度不同，但是我想沿列堆叠这些不同维度的矩阵，而这是np.vstack()函数不支持的，想问一下有什么方法可以解决这个问题吗？因为序列长度差异太大，所以我不想把短的序列补齐。", "\n\n", "这是我所用的代码：", "\n\n", "\n", "import numpy as np\n\nseq = []\n\nwith open('rna.fa', 'r') as f:\n    for line in f:\n        if line[0] == '>':\n            tokens = line[1:].split()\n            sequence = tokens[-1].strip().upper()\n            seq.append(sequence)\n        else:\n            pass\nf.close()\n\nprint(len(seq))\n\ndef one_hot_encode(seq):\n    mapping = dict(zip(\"ACGTN\", range(5)))    \n    seq2 = [mapping[i] for i in sequence]\n    \n    return np.eye(5)[seq2]\n\nfor i in range(1,5110):\n    xi = one_hot_encode(seq[i])\n    X = np.vstack((x,seq[i]))"]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/lzying/p/11364647.html", "Konwledge_Point": "应对NP完全问题", "Question": ["基于Python Opencv 更改指定矩阵数组", ["如何利用奇偶量化进行图像水印", "\n比如想要更改图片【1】【2】矩阵中的数字，将所有的1换为0，将所有的0换成1或者-1", "\n如何在下面调取出来这个【1】【2】矩阵", "\n\n", "import numpy as np\nfrom scipy import ndimage\nimport cv2\nimport random\nimport os\n#量子化テーブル\nQ = np.array(((16, 11, 10, 16, 24, 40, 51, 61),\n                (12, 12, 14, 19, 26, 58, 60, 55),\n                (14, 13, 16, 24, 40, 57, 69, 56),\n                (14, 17, 22, 29, 51, 87, 80, 62),\n                (18, 22, 37, 56, 68, 109, 103, 77),\n                (24, 35, 55, 64, 81, 104, 113, 92),\n                (49, 64, 78, 87, 103, 121, 120, 101),\n                (72, 92, 95, 98, 112, 100, 103, 99)), dtype=np.float32)\n\ny = cv2.imread(r'C:\\Users\\Owner\\Desktop\\so\\sample.jpg', 0)\ndef psnr1(img1, img2):\n   mse = np.mean((img1/1.0 - img2/1.0) ** 2 )\n   if mse < 1.0e-10:\n      return 100\n   return 10 * math.log10(255.0**2/mse)\n\ndef get_FileSize(filePath):\n\n    fsize = os.path.getsize(filePath)\n    fsize = fsize/float(1024 * 1024)\n\n    return round(fsize, 2)\n\ny1 = y.astype(np.float32)\n# print(y1.dtype)\nm, n = y1.shape\nhdata = np.vsplit(y1,n/8) # 縦方向から8個にする\nfor i in range(0, n//8):\n        blockdata = np.hsplit(hdata[i],m/8) \n     #水平方向にも８にする\n        for j in range(0, m//8):\n            block = blockdata[j]\n            #print(\"block[{},{}] data \\n{}\".format(i,j,blockdata[j]))\n            Yb = cv2.dct(block.astype(np.float))\n            F1 = Yb * Q\n            F = F1 // Q \n            #print(\"block[{},{}] data\\n{}\".format(i,j,F))\n            iblock = cv2.idct(Yb)\n            #print(iblock)\nY = cv2.dct(y1)\n\nprint(Y.shape)\ncv2.imshow(\"Dct\",Y)\n\n\n\ny2 = cv2.idct(Y)\nprint(psnr1(y,y2))\nsize1 = get_FileSize(r\"C:\\Users\\Owner\\Desktop\\so\\sample.jpg\")\nprint(\"文件大小：%.2f MB\"%(size1))\n\n\nsize = get_FileSize(r\"C:\\Users\\Owner\\Desktop\\so\\sample1.jpg\")\nprint(\"文件大小：%.2f MB\"%(size))\n\nprint(size/size1 - 1)\ncv2.imshow(\"iDCT\",y2.astype(np.uint8))\ncv2.waitKey(0)\ncv2.imwrite(r'C:\\Users\\Owner\\Desktop\\so\\sample1.jpg', y2)\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;它是csv不是scv&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; scipy.io &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; loadmat\n&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; scipy.stats &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; norm\n \nssec_daily &amp;#61; pd.read_csv(&lt;span class=\"hljs-string\"&gt;&amp;#39;1LShowData_SSEC_daily.csv&amp;#39;&lt;/span&gt;,encoding&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;GB2312&amp;#39;&lt;/span&gt;,usecols&amp;#61;[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;])\n \np_daily &amp;#61; ssec_daily[&lt;span class=\"hljs-string\"&gt;&amp;#39;收盘&amp;#39;&lt;/span&gt;].&lt;span class=\"hljs-keyword\"&gt;values&lt;/span&gt;()\nplt.plot(p_daily)\nplt.&lt;span class=\"hljs-keyword\"&gt;show&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/308571703646129.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["读取文件出现问题，这个怎么解决啊", ["import", " numpy ", "as", " np\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " pandas ", "as", " pd\n", "from", " scipy.io ", "import", " loadmat\n", "from", " scipy.stats ", "import", " norm\n\nssec_daily = pd.read_scv(", "'1LShowData_SSEC_daily.csv'", ",encoding=", "'GB2312'", ",usecols=[", "6", "])\n\np_daily = ssec_daily[", "'收盘'", "].", "values", "()\nplt.plot(p_daily)\nplt.", "show", "()\n", "\n", "显示：", "\n", "Traceback (most recent ", "call", " last):\n  File \"C:\\Users\\86135\\PycharmProjects\\pythonProject1\\pythonProject\\20220303-实验1.py\", ", "line", " ", "8", ", ", "in", " <module>\n    ssec_daily = pd.read_scv(", "'1LShowData_SSEC_daily.csv'", ",encoding=", "'GB2312'", ",usecols=[", "6", "])\n  File \"C:\\Users\\86135\\anaconda3\\envs\\pythonProject1\\lib\\site-packages\\pandas\\__init__.py\", ", "line", " ", "261", ", ", "in", " __getattr__\n    ", "raise", " AttributeError(f\"module 'pandas' has no attribute '{name}'\")\nAttributeError: module ", "'pandas'", " has ", "no", " ", "attribute", " ", "'read_scv'", "\n", "\n", "试过重新安装pandas，但没有用"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;就代码中词云图问题&amp;#xff0c;一是代码中wordlist是一个生成器对象&amp;#xff0c;需要遍历出来&amp;#xff0c;文本分割是全分割&amp;#xff0c;其中有很多标点符号和其他字符不是中文&amp;#xff0c;需要对其进行筛选剔除。wl&amp;#61;&amp;#39; &amp;#39;.join([x for x in wordlist if x!&amp;#61;&amp;#39;\\n&amp;#39; and x not in string.punctuation])&amp;#xff0c;你需要先导入内置模块 import string,用于处理标点符号。二是要对字体路径进行指定。在WordCloud函数中指定font_path&amp;#61;&amp;#39;simhei.ttf&amp;#39;&amp;#xff0c;用于显示中文。&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python词云出现KeyError问题", ["做包含中英文的txt的词云。", "\n\n", "开始是出不来图，词云图的黑色背景中显示类似这样一行<0x00000021FA66>的乱码", "\n\n", "\n\n", "我以为是字体问题，就找到wordcloud，用simhei.ttf替换了自带的DroidSansMono.ttf，同时修改了.py文件", "\n\n", "但是还是没有变化，黑色背景图里还是上面那个样子", "\n\n", "于是开始逐个排查发现2个问题：", "\n\n", "1.", "\n\n", "word_list无法打印出东西，print（）也不行。（见下图）", "\n\n", "\n\n", "后来百度看别人代码发现加上 wl = \" \".join(wordlist) 可以解决问题，但是不知道什么原理", "\n\n", "2.继续排查发现KeyError问题，但是我代码里好像没用字典，不知道是否是跟内置函数有冲突", "\n\n", "\n\n", "\n\n", "\n\n", "于是我就去.py找到了57行这个bigram，发现是一个分词函数但是我不知道这行代码是什么意思，他运行到第一个字“被”，就出现问题了，我该如何修改才能生成正确词频词云图？谢谢！", "\n\n", " ", "\n\n", "最后附一下全的代码：", "\n\n", "\nimport os", "\nimport re", "\nimport time", "\nimport random", "\n\n", "import requests", "\nimport jieba", "\nimport numpy as np", "\nfrom PIL import Image", "\nimport matplotlib.pyplot as plt", "\nfrom wordcloud import WordCloud", "\n\n", "# 生成Session对象，用于保存Cookie", "\ns = requests.Session()", "\n# 词云形状图片", "\nWC_MASK_IMG = 'K:/test.jpg'", "\n# 影评数据保存文件", "\nCOMMENTS_FILE_PATH = 'K:/douban_comments.txt'", "\n# 词云字体", "\nWC_FONT_PATH = '/Library/Fonts/Songti.ttc'", "\n# 统计词频", "\nfrom collections import defaultdict ", "\n\n", "def login_douban():", "\n    \"\"\"", "\n    登录豆瓣", "\n    :return:", "\n    \"\"\"", "\n    # 登录URL", "\n    login_url = 'https://accounts.douban.com/j/mobile/login/basic'", "\n    # 请求头", "\n    headers = {'user-agent': 'Mozilla/5.0', 'Referer': 'https://accounts.douban.com/passport/login?source=main'}", "\n    # 传递用户名和密码", "\n    data = {'name': '你的账号',", "\n            'password': '你的密码',", "\n            'remember': 'false'}", "\n    try:", "\n        r = s.post(login_url, headers=headers, data=data)", "\n        r.raise_for_status()", "\n    except:", "\n        print('登录请求失败')", "\n        return 0", "\n    # 打印请求结果", "\n    print(r.text)", "\n    return 1", "\n\n", "\ndef spider_comment(page=0):", "\n    \"\"\"", "\n    爬取某页影评", "\n    :param page: 分页参数", "\n    :return:", "\n    \"\"\"", "\n    print('开始爬取第%d页' % int(page))", "\n    start = int(page * 20)", "\n    comment_url = 'https://movie.douban.com/subject/3011091/comments?start=%d&limit=20&sort=new_score&status=P' % start", "\n    # 请求头", "\n    headers = {'user-agent': 'Mozilla/5.0'}", "\n    try:", "\n        r = s.get(comment_url, headers=headers)", "\n        r.raise_for_status()", "\n    except:", "\n        print('第%d页爬取请求失败' % page)", "\n        return 0", "\n    # 使用正则提取影评内容", "\n    comments = re.findall('<span class=\"short\">(.*)</span>', r.text)", "\n    if not comments:", "\n        return 0", "\n    # 写入文件", "\n    with open(COMMENTS_FILE_PATH, 'a+', encoding='utf-8') as file:", "\n        file.writelines('\\n'.join(comments))", "\n    return 1", "\n\n", "\ndef batch_spider_comment():", "\n    \"\"\"", "\n    批量爬取豆瓣影评", "\n    :return:", "\n    \"\"\"", "\n    # 写入数据前先清空之前的数据", "\n    if os.path.exists(COMMENTS_FILE_PATH):", "\n        os.remove(COMMENTS_FILE_PATH)", "\n    page = 0", "\n    while spider_comment(page):", "\n        page += 1", "\n        # 模拟用户浏览，设置一个爬虫间隔，防止ip被封", "\n        time.sleep(random.random() * 3)", "\n    print('爬取完毕')", "\n\n", "\ndef cut_word():", "\n    \"\"\"", "\n    对数据分词", "\n    :return: 分词后的数据", "\n    \"\"\"", "\n    with open(COMMENTS_FILE_PATH, encoding='utf-8') as file:", "\n        comment_txt = file.read()", "\n        wordlist = jieba.cut(comment_txt, cut_all=True)", "\n        wl = \" \".join(wordlist)", "\n        print(wl)", "\n        return wl", "\n\n", "\ndef create_word_cloud():", "\n    \"\"\"", "\n    生成词云", "\n    :return:", "\n    \"\"\"", "\n    ", "\n    # 设置词云形状图片", "\n    wc_mask = np.array(Image.open(WC_MASK_IMG))", "\n    # 数据清洗词列表", "\n    stop_words = ['就是', '不是', '但是', '还是', '只是', '这样', '这个', '一个', '什么', '电影', '没有']", "\n    # 设置词云的一些配置，如：字体，背景色，词云形状，大小", "\n    wc = WordCloud(background_color=\"white\", max_words=50, mask=wc_mask, scale=4,", "\n                   max_font_size=50, random_state=42, stopwords=stop_words, font_path=WC_FONT_PATH)", "\n    # 生成词云", "\n    wc.generate(cut_word())", "\n\n", "    # 在只设置mask的情况下,你将会得到一个拥有图片形状的词云", "\n    plt.imshow(wc, interpolation=\"bilinear\")", "\n    plt.axis(\"off\")", "\n    plt.figure()", "\n    plt.show()", "\n\n", "    ", "\nif __name__ == '__main__':", "\n    # 登录成功才爬取", "\n    # if login_douban():", "\n    #     # spider_comment(30)", "\n    batch_spider_comment()", "\n    create_word_cloud()"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;后面不是有个 -&amp;gt;吗&amp;#xff0c;它定义了返回类型&amp;#xff0c;你可以点进去看看&amp;#xff0c;不过直接看下面return的是什么就行。对象.属性 这就已经得到一个返回值了&amp;#xff0c;如果结果是如int类型这样的数字123&amp;#xff0c;那肯定123()不行&amp;#xff0c;但这里返回的是_LocIndexer处理实例化后的对象&amp;#xff0c;那它后面是能加括号的。 希望能帮助到你&amp;#xff0c;谢谢。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pandas里面loc方法是属性方法有@property装饰器，但是为什么df.loc()系统不报  \" is not callable\"的错？", ["代码如下;", "\n", "import", " pandas ", "as", " pd\n", "import", " numpy ", "as", " np\ndata = {", "'name'", ": [", "'Joe'", ", ", "'Mike'", ", ", "'Jack'", ", ", "'Rose'", ", ", "'David'", ", ", "'Marry'", ", ", "'Wansi'", ", ", "'Sidy'", ", ", "'Jason'", ", ", "'Even'", "],\n        ", "'age'", ": [", "25", ", ", "32", ", ", "18", ", np.", "nan", ", ", "15", ", ", "20", ", ", "41", ", np.", "nan", ", ", "37", ", ", "32", "],\n        ", "'gender'", ": [", "1", ", ", "0", ", ", "1", ", ", "1", ", ", "0", ", ", "1", ", ", "0", ", ", "0", ", ", "1", ", ", "0", "],\n        ", "'isMarried'", ": [", "'yes'", ", ", "'yes'", ", ", "'no'", ", ", "'yes'", ", ", "'no'", ", ", "'no'", ", ", "'no'", ", ", "'yes'", ", ", "'no'", ", ", "'no'", "]}\n\nlabels = [", "'name'", ", ", "'age'", ", ", "'c'", ", ", "'d'", ", ", "'e'", ", ", "'f'", ", ", "'g'", ", ", "'h'", ", ", "'i'", ", ", "'j'", "]\ndf = pd.DataFrame(data, ", "index", "=labels)\ndf.loc()\n", "\n", "按住CTRL鼠标点击loc，定位到loc函数，发现loc是属性方法，带有", "@property装饰器如图所示：", "\n", "\n", "问题：", "既然loc是属性方法，那代码中 ", "df.loc()", "应该报错 如“”", "* is not callable“才对吧？为什么系统不会报错？"]], "Tag": "算法设计"}
{"Answer": "是不是在Pycharm中启动的Jupyter，我也是这样的，当我使用Anaconda启动Jupyter进行交互式绘图不会出现这样的情况。", "Konwledge_Point": "应对NP完全问题", "Question": ["Jupyter 使用%matplotlib notebook 进行交互式绘图时异常显示?", ["当我在Jupyter中进行交互式绘图时，绘图窗口显示了，但只有左上角有显示。", "\n\n", "%matplotlib notebook\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.plot(np.random.randn(50).cumsum())\n", "\n\n", "\n\n", "对此，我感到很疑惑，在我使用其他的命令绘图时并不会出现这样的错误。", "\n\n", "大佬们能帮帮我吗T_T"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;看下是不是这个问题&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/qq_41185868/article/details/100942855?utm_source&amp;#61;app&amp;amp;app_version&amp;#61;4.16.0\" id=\"textarea_1633424053907_1633424084596_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;成功解决TypeError: &amp;#39;float&amp;#39; object cannot be interpreted as an integer_一个处女座的程序猿-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;成功解决TypeError: &amp;#39;float&amp;#39; object cannot be interpreted as an integer目录解决问题解决思路解决方法解决问题TypeError: &amp;#39;float&amp;#39; object cannot be interpreted as an integer解决思路类型错误&amp;#xff1a;“...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/qq_41185868/article/details/100942855?utm_source&amp;#61;app&amp;amp;app_version&amp;#61;4.16.0&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["TypeError: 'float' object cannot be interpreted as an integer这个是哪儿有问题呀", ["(IPdb [4]): runfile('E:/EDEM/Matrial Calculate/Static angle of repose test/Static_angle_of_repose_analyst.py', wdir='E:/EDEM/Matrial Calculate/Static angle of repose test')", "\n", "Loading: Static_angle_of_repose_example.dem", "\n", "\n", "Processing: Static_angle_of_repose_example.dem", "\n", "Traceback (most recent call last):", "\n", "  File \"E:\\EDEM\\Matrial Calculate\\Static angle of repose test\\Static_angle_of_repose_analyst.py\", line 62, in ", "    spacing=np.linspace(top_rad,base_rad,(base_rad-top_rad)/bin_size)", "\n", "  File \"<__array_function__ internals>\", line 5, in linspace", "\n", "  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\numpy\\core\\function_base.py\", line 120, in linspace", "    num = operator.index(num)", "\n", "TypeError: 'float' object cannot be interpreted as an integer"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先给个基础的例子&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;from cProfile import &lt;span class=\"hljs-selector-tag\"&gt;label&lt;/span&gt;\nimport matplotlib&lt;span class=\"hljs-selector-class\"&gt;.pyplot&lt;/span&gt; as plt\nimport numpy as np\nimport pandas as pd\n \nplt&lt;span class=\"hljs-selector-class\"&gt;.figure&lt;/span&gt;(figsize&amp;#61;(&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;),dpi&amp;#61;&lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;)\nplt&lt;span class=\"hljs-selector-class\"&gt;.rcParams&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;font.sans-serif&amp;#39;&lt;/span&gt;]&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;SimHei&amp;#39;&lt;/span&gt;]&lt;/span&gt;\nplt&lt;span class=\"hljs-selector-class\"&gt;.rcParams&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;axes.unicode_minus&amp;#39;&lt;/span&gt;]&lt;/span&gt; &amp;#61; False\n \nplt&lt;span class=\"hljs-selector-class\"&gt;.title&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;资产负债率&amp;#39;&lt;/span&gt;,fontsize&amp;#61;&lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;)\ndf&amp;#61;pd&lt;span class=\"hljs-selector-class\"&gt;.read_excel&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;源数据.xlsx&amp;#39;&lt;/span&gt;)\nx&amp;#61;df&lt;span class=\"hljs-selector-attr\"&gt;[(df[&lt;span class=\"hljs-string\"&gt;&amp;#39;股票代码&amp;#39;&lt;/span&gt;]&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)]&lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;截止日期&amp;#39;&lt;/span&gt;]&lt;/span&gt;\ny1&amp;#61;df&lt;span class=\"hljs-selector-attr\"&gt;[(df[&lt;span class=\"hljs-string\"&gt;&amp;#39;股票代码&amp;#39;&lt;/span&gt;]&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)]&lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;资产负债率&amp;#39;&lt;/span&gt;]&lt;/span&gt;\ny2&amp;#61;df&lt;span class=\"hljs-selector-attr\"&gt;[(df[&lt;span class=\"hljs-string\"&gt;&amp;#39;股票代码&amp;#39;&lt;/span&gt;]&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)]&lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;资产负债率&amp;#39;&lt;/span&gt;]&lt;/span&gt;\nplt&lt;span class=\"hljs-selector-class\"&gt;.xlabel&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;截止日期&amp;#39;&lt;/span&gt;)\nplt&lt;span class=\"hljs-selector-class\"&gt;.ylabel&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;资产负债率&amp;#39;&lt;/span&gt;)\nplt&lt;span class=\"hljs-selector-class\"&gt;.plot&lt;/span&gt;(x,y1,&lt;span class=\"hljs-string\"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;,label&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;000001&amp;#39;&lt;/span&gt;)\nplt&lt;span class=\"hljs-selector-class\"&gt;.plot&lt;/span&gt;(x,y2,&lt;span class=\"hljs-string\"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;,label&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;000002&amp;#39;&lt;/span&gt;)\nplt&lt;span class=\"hljs-selector-class\"&gt;.show&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/251038524656192.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于matplotlib导入excel表格数据的代码问题", ["代码的要求为：", "使用pandas的DataFrame进行数据绘图，形成一个画布1个子图。000001公司为红色线条，000002为蓝色线条，时间范围从2000年6月，到2019年12月。子图是关于“资产负债率”的折线图。", "\n", "我自己尝试写的代码：", "\n", "import matplotlib", ".pyplot", " as plt\nimport numpy as np\nimport pandas as pd\n\nplt", ".figure", "(figsize=(", "30", ",", "30", "),dpi=", "80", ")\n\nplt", ".rcParams", "[", "'font.sans-serif'", "]", " = ", "[", "'SimHei'", "]", "\nplt", ".rcParams", "[", "'axes.unicode_minus'", "]", " = False\n\nplt", ".subplot", "(", "2", ",", "2", ",", "1", ")\nplt", ".title", "(", "'资产负债率'", ",fontsize=", "10", ")\ndf=pd", ".read_excel", "(", "'F:\\\\源数据.xlsx'", ")\nx=df", "[", "'截止日期'", "]", "\ny1=df", ".loc", "[(df[", "'资产负债率'", "]", ") & (df", "[", "'股票代码'", "]", " == ", "'000001'", ")]\ny2=df", ".loc", "[(df[", "'资产负债率'", "]", ") & (df", "[", "'股票代码'", "]", " == ", "'000002'", ")]\nplt", ".xlabel", "(", "'截止日期'", ")\nplt", ".ylabel", "(", "'资产负债率'", ")\n\nplt", ".plot", "(df", "[", "\"x\"", "]", ",df", "[", "\"y1\"", "]", ")\nplt", ".plot", "(df", "[", "\"x\"", "]", ",df", "[", "\"y2\"", "]", ")\n\n", "\n", "运行结果及报错内容 ：", "\n", "\n", "\n", "希望能够完整按照要求生成结果"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你输入的 Tensor 是需要 rank &amp;gt;&amp;#61; 1 的。也就是&amp;#xff0c;Tensor 的维度应该&amp;gt;&amp;#61;1。代码中看来&amp;#xff0c;你的 y_train 是一个秩为0的 Tensor&amp;#xff0c;所以需要增加维度。&lt;/p&gt;\n&lt;p&gt;可以通过以下代码解决&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\ny_train &amp;#61; y_train[..., tf.&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;axis&lt;/span&gt;]\ny_test &amp;#61; y_test[..., tf.&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;axis&lt;/span&gt;]\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这样就不会再报错了。还有&amp;#xff0c;你需要对 y_test 做同样的处理。&lt;/p&gt;\n&lt;p&gt;而语法可能会随着 TensorFlow 的版本更新而变化。你要看看正在使用与你看到的教程相同版本的 TensorFlow是否相同。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["tensotflow中from_tensor_slices报错", ["在学习单层神经网络时使用from_tensor_slices，发生错误", "\n", "报错ValueError: Unbatching a tensor is only supported for rank >= 1", "\n", "\n", "import tensorflow as tf\nfrom sklearn import datasets\nfrom pandas import DataFrame\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx_data = datasets", ".load_iris", "()", ".data", "\ny_data = datasets", ".load_iris", "()", ".target", "\nnp", ".random", ".seed", "(", "116", ")\nnp", ".random", ".shuffle", "(x_data)\nnp", ".random", ".seed", "(", "116", ")\nnp", ".random", ".shuffle", "(y_data)\ntf", ".random", ".set_seed", "(", "116", ")\n\nx_train = x_data", "[:-30]", "\ny_train = y_data", "[:-30]", "\nx_test = x_data", "[-30:]", "\ny_test = y_data", "[-30]", "\nx_train = tf", ".cast", "(x_train, dtype=tf.float32)\nx_test = tf", ".cast", "(x_test, dtype=tf.float32)\n\ntrain_data = tf", ".data", ".Dataset", ".from_tensor_slices", "((x_train, y_train))", ".batch", "(", "32", ")\ntest_data = tf", ".data", ".Dataset", ".from_tensor_slices", "((x_test, y_test))", ".batch", "(", "32", ")\n\n", "\n", "运行结果及详细报错内容", "\n", "在这一行：", "\n", "train_data", " = tf.", "data", ".", "Dataset", ".from_tensor_slices((", "x_train", ", ", "y_train", ")).batch(32)", "\n\n", "\n", "报错ValueError: Unbatching a tensor is only supported for rank >= 1", "\n", "尝试去掉括号里的y_train再加上，train_data一行不再报错，但test_data一行无变化", "\n", "这一语法是否随版本更新而变化？我看的教程里用的是Python3.7，但我装的是3.10"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;在第11行&amp;#xff0c;两个列表可能有一个为空&amp;#xff0c;也有可能都是空&lt;br /&gt;你可以看看11行前面有什么错误&amp;#xff0c;或者看看你的csv文件有什么错误&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["zhouqi[0][0]=data1[0][5] IndexError: index 0 is out of bounds for axis 0 with size 0", ["\nimport numpy as np\nimport pandas as pd\ndata1 = pd", ".read_csv", "(", "'采暖制冷用户-采暖_日.csv'", ", encoding = ", "'gbk'", ")\ndata1 = pd", ".DataFrame", "(data1)\ndata1 = np", ".array", "(data1)\nj=", "0", "\nzhouqi =", "[[]", "]\nzhouqi = pd", ".DataFrame", "(zhouqi)\nzhouqi = np", ".array", "(zhouqi)\nzhouqi", "[0]", "[0]", "=data1", "[0]", "[5]", "\n", "for", " ", "i", " ", "in", " range(data1", ".shape", "[0]", "-", "1", "):\n    ", "if", " data1", "[i]", "[1]", " == data1", "[i+1]", "[1]", ":\n        zhouqi", "[j]", "[1]", "=data1", "[i+1]", "[5]", "\n    ", "else", ":\n        zhouqi", "[j+1]", "[0]", "=data1", "[i+1]", "[5]", "\n        j=j+", "1", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;def test(args, io):\n    all_true_cls &amp;#61; []\n    all_pred_cls &amp;#61; []\n    all_true_seg &amp;#61; []\n    all_pred_seg &amp;#61; []\n    for test_area in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;):\n        visual_file_index &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n        test_area &amp;#61; &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(test_area)\n        if os.path.&lt;span class=\"hljs-built_in\"&gt;exists&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;data/indoor3d_sem_seg_hdf5_data_test/room_filelist.txt&amp;#34;&lt;/span&gt;):\n            with &lt;span class=\"hljs-built_in\"&gt;open&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;data/indoor3d_sem_seg_hdf5_data_test/room_filelist.txt&amp;#34;&lt;/span&gt;) as f:\n                for line in f:\n                    if (line[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;]) &amp;#61;&amp;#61; test_area:\n                        break\n                    visual_file_index &amp;#61; visual_file_index &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        if (args.test_area &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;) or (test_area &amp;#61;&amp;#61; args.test_area):\n            test_loader &amp;#61; &lt;span class=\"hljs-built_in\"&gt;DataLoader&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;S3DIS&lt;/span&gt;(partition&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, num_points&amp;#61;args.num_points, test_area&amp;#61;test_area),\n                                     batch_size&amp;#61;args.test_batch_size, shuffle&amp;#61;False, drop_last&amp;#61;False)\n\n            device &amp;#61; torch.&lt;span class=\"hljs-built_in\"&gt;device&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cuda&amp;#34;&lt;/span&gt; if args.cuda else &lt;span class=\"hljs-string\"&gt;&amp;#34;cpu&amp;#34;&lt;/span&gt;)\n                        \n            #Try to load models\n            semseg_colors &amp;#61; test_loader.dataset.semseg_colors\n            if args.model &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;dgcnn&amp;#39;&lt;/span&gt;:\n                model &amp;#61; &lt;span class=\"hljs-built_in\"&gt;DGCNN_semseg&lt;/span&gt;(args).&lt;span class=\"hljs-built_in\"&gt;to&lt;/span&gt;(device)\n            else:\n                raise &lt;span class=\"hljs-built_in\"&gt;Exception&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Not implemented&amp;#34;&lt;/span&gt;)\n                \n            model &amp;#61; nn.&lt;span class=\"hljs-built_in\"&gt;DataParallel&lt;/span&gt;(model)\n            model.&lt;span class=\"hljs-built_in\"&gt;load_state_dict&lt;/span&gt;(torch.&lt;span class=\"hljs-built_in\"&gt;load&lt;/span&gt;(os.path.&lt;span class=\"hljs-built_in\"&gt;join&lt;/span&gt;(args.model_root, &lt;span class=\"hljs-string\"&gt;&amp;#39;model_%s.t7&amp;#39;&lt;/span&gt; % test_area)))\n            model &amp;#61; model.&lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;()\n            test_acc &amp;#61; &lt;span class=\"hljs-number\"&gt;0.0&lt;/span&gt;\n            count &amp;#61; &lt;span class=\"hljs-number\"&gt;0.0&lt;/span&gt;\n            test_true_cls &amp;#61; []\n            test_pred_cls &amp;#61; []\n            test_true_seg &amp;#61; []\n            test_pred_seg &amp;#61; []\n            with torch.&lt;span class=\"hljs-built_in\"&gt;no_grad&lt;/span&gt;():\n                for data, seg in test_loader:\n                    data, seg &amp;#61; data.&lt;span class=\"hljs-built_in\"&gt;to&lt;/span&gt;(device), seg.&lt;span class=\"hljs-built_in\"&gt;to&lt;/span&gt;(device)\n                    data &amp;#61; data.&lt;span class=\"hljs-built_in\"&gt;permute&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n                    batch_size &amp;#61; data.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;()[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n                    seg_pred &amp;#61; &lt;span class=\"hljs-built_in\"&gt;model&lt;/span&gt;(data)\n                    seg_pred &amp;#61; seg_pred.&lt;span class=\"hljs-built_in\"&gt;permute&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;).&lt;span class=\"hljs-built_in\"&gt;contiguous&lt;/span&gt;()\n                    pred &amp;#61; seg_pred.&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(dim&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n                    seg_np &amp;#61; seg.&lt;span class=\"hljs-built_in\"&gt;cpu&lt;/span&gt;().&lt;span class=\"hljs-built_in\"&gt;numpy&lt;/span&gt;()\n                    pred_np &amp;#61; pred.&lt;span class=\"hljs-built_in\"&gt;detach&lt;/span&gt;().&lt;span class=\"hljs-built_in\"&gt;cpu&lt;/span&gt;().&lt;span class=\"hljs-built_in\"&gt;numpy&lt;/span&gt;()\n                    test_true_cls.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(seg_np.&lt;span class=\"hljs-built_in\"&gt;reshape&lt;/span&gt;(-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\n                    test_pred_cls.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(pred_np.&lt;span class=\"hljs-built_in\"&gt;reshape&lt;/span&gt;(-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\n                    test_true_seg.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(seg_np)\n                    test_pred_seg.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(pred_np)\n                    # visiualization\n                    &lt;span class=\"hljs-built_in\"&gt;visualization&lt;/span&gt;(args.visu, args.visu_format, args.test_area, data, seg, pred, visual_file_index, semseg_colors)\n                    visual_file_index &amp;#61; visual_file_index &amp;#43; data.shape[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n                if visual_warning and args.visu !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;:\n                    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;Visualization Failed: You can only choose a room to visualize within the scope of the test area&amp;#39;&lt;/span&gt;)\n                test_true_cls &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;concatenate&lt;/span&gt;(test_true_cls)\n                test_pred_cls &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;concatenate&lt;/span&gt;(test_pred_cls)\n                test_acc &amp;#61; metrics.&lt;span class=\"hljs-built_in\"&gt;accuracy_score&lt;/span&gt;(test_true_cls, test_pred_cls)\n                avg_per_class_acc &amp;#61; metrics.&lt;span class=\"hljs-built_in\"&gt;balanced_accuracy_score&lt;/span&gt;(test_true_cls, test_pred_cls)\n                test_true_seg &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;concatenate&lt;/span&gt;(test_true_seg, axis&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                test_pred_seg &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;concatenate&lt;/span&gt;(test_pred_seg, axis&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                test_ious &amp;#61; &lt;span class=\"hljs-built_in\"&gt;calculate_sem_IoU&lt;/span&gt;(test_pred_seg, test_true_seg)\n                outstr &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;Test :: test area: %s, test acc: %.6f, test avg acc: %.6f, test iou: %.6f&amp;#39;&lt;/span&gt; % (test_area,\n                                                                                                        test_acc,\n                                                                                                        avg_per_class_acc,\n                                                                                                        np.&lt;span class=\"hljs-built_in\"&gt;mean&lt;/span&gt;(test_ious))\n                io.&lt;span class=\"hljs-built_in\"&gt;cprint&lt;/span&gt;(outstr)]\n#变动地方\n    all_true_cls &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(all_true_cls, test_true_cls)\n    all_pred_cls &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(all_pred_cls, test_pred_cls)\n    all_true_seg &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(all_true_seg, test_true_seg)\n    all_pred_seg &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(all_pred_seg, test_pred_seg)\n\n        if args.test_area &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;:\n            all_true_cls &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;concatenate&lt;/span&gt;(all_true_cls)\n            all_pred_cls &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;concatenate&lt;/span&gt;(all_pred_cls)\n            all_acc &amp;#61; metrics.&lt;span class=\"hljs-built_in\"&gt;accuracy_score&lt;/span&gt;(all_true_cls, all_pred_cls)\n            avg_per_class_acc &amp;#61; metrics.&lt;span class=\"hljs-built_in\"&gt;balanced_accuracy_score&lt;/span&gt;(all_true_cls, all_pred_cls)\n            all_true_seg &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;concatenate&lt;/span&gt;(all_true_seg, axis&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            all_pred_seg &amp;#61; np.&lt;span class=\"hljs-built_in\"&gt;concatenate&lt;/span&gt;(all_pred_seg, axis&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            all_ious &amp;#61; &lt;span class=\"hljs-built_in\"&gt;calculate_sem_IoU&lt;/span&gt;(all_pred_seg, all_true_seg)\n            outstr &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;Overall Test :: test acc: %.6f, test avg acc: %.6f, test iou: %.6f&amp;#39;&lt;/span&gt; % (all_acc,\n                                                                                             avg_per_class_acc,\n                                                                                             np.&lt;span class=\"hljs-built_in\"&gt;mean&lt;/span&gt;(all_ious))\n            io.&lt;span class=\"hljs-built_in\"&gt;cprint&lt;/span&gt;(outstr)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["DGCNN.pytorch在S3DIS上运行错误，如何解决？", ["报错如下:", "\n", "> Namespace(", "batch_size", "=32, ", "dataset", "=", "'S3DIS'", ", ", "dropout", "=0.5, ", "emb_dims", "=1024, ", "epochs", "=100, ", "eval", "=", "True", ", ", "exp_name", "=", "'semseg_eval'", ", ", "k", "=20, ", "lr", "=0.001, ", "model", "=", "'dgcnn'", ", ", "model_root", "=", "'outputs/semseg_6/models/'", ", ", "momentum", "=0.9, ", "no_cuda", "=", "False", ", ", "num_points", "=4096, ", "scheduler", "=", "'cos'", ",\n ", "seed", "=1, ", "test_area", "=", "'all'", ", ", "test_batch_size", "=16, ", "use_sgd", "=", "True", ", ", "visu", "=", "''", ", ", "visu_format", "=", "'ply'", ")\nUsing GPU : 0 ", "from", " 1 devices\nTest :: test area: 1, test acc: 0.893883, test avg acc: 0.805912, test iou: 0.702250\nOverall Test :: test acc: 0.893883, test avg acc: 0.805912, test iou: 0.702250\nTest :: test area: 2, test acc: 0.833375, test avg acc: 0.557771, test iou: 0.444156\nTraceback (most recent call last):\n  File ", "\"main_semseg.py\"", ", line 454, ", "in", " <module>\n    test(args, io)\n  File ", "\"main_semseg.py\"", ", line 369, ", "in", " test\n    all_true_cls.append(test_true_cls)\nAttributeError: ", "'numpy.ndarray'", " object has ", "no", " attribute ", "'append'", "\n", "\n", "代码如下：", "\n", "def test(args, io):\n    all_true_cls = []\n    all_pred_cls = []\n    all_true_seg = []\n    all_pred_seg = []\n    for test_area in ", "range", "(", "1", ", ", "7", "):\n        visual_file_index = ", "0", "\n        test_area = ", "str", "(test_area)\n        if os.path.", "exists", "(", "\"data/indoor3d_sem_seg_hdf5_data_test/room_filelist.txt\"", "):\n            with ", "open", "(", "\"data/indoor3d_sem_seg_hdf5_data_test/room_filelist.txt\"", ") as f:\n                for line in f:\n                    if (line[", "5", "]) == test_area:\n                        break\n                    visual_file_index = visual_file_index + ", "1", "\n        if (args.test_area == ", "'all'", ") or (test_area == args.test_area):\n            test_loader = ", "DataLoader", "(", "S3DIS", "(partition=", "'test'", ", num_points=args.num_points, test_area=test_area),\n                                     batch_size=args.test_batch_size, shuffle=False, drop_last=False)\n\n            device = torch.", "device", "(", "\"cuda\"", " if args.cuda else ", "\"cpu\"", ")\n\n            # Try to load models\n            semseg_colors = test_loader.dataset.semseg_colors\n            if args.model == ", "'dgcnn'", ":\n                model = ", "DGCNN_semseg", "(args).", "to", "(device)\n            else:\n                raise ", "Exception", "(", "\"Not implemented\"", ")\n\n            model = nn.", "DataParallel", "(model)\n            model.", "load_state_dict", "(torch.", "load", "(os.path.", "join", "(args.model_root, ", "'model_%s.t7'", " % test_area)))\n            model = model.", "eval", "()\n            test_acc = ", "0.0", "\n            count = ", "0.0", "\n            test_true_cls = []\n            test_pred_cls = []\n            test_true_seg = []\n            test_pred_seg = []\n            with torch.", "no_grad", "():\n                for data, seg in test_loader:\n                    data, seg = data.", "to", "(device), seg.", "to", "(device)\n                    data = data.", "permute", "(", "0", ", ", "2", ", ", "1", ")\n                    batch_size = data.", "size", "()[", "0", "]\n                    seg_pred = ", "model", "(data)\n                    seg_pred = seg_pred.", "permute", "(", "0", ", ", "2", ", ", "1", ").", "contiguous", "()\n                    pred = seg_pred.", "max", "(dim=", "2", ")[", "1", "]\n                    seg_np = seg.", "cpu", "().", "numpy", "()\n                    pred_np = pred.", "detach", "().", "cpu", "().", "numpy", "()\n                    test_true_cls.", "append", "(seg_np.", "reshape", "(-", "1", "))\n                    test_pred_cls.", "append", "(pred_np.", "reshape", "(-", "1", "))\n                    test_true_seg.", "append", "(seg_np)\n                    test_pred_seg.", "append", "(pred_np)\n                    # visiualization\n                    ", "visualization", "(args.visu, args.visu_format, args.test_area, data, seg, pred, visual_file_index,\n                                  semseg_colors)\n                    visual_file_index = visual_file_index + data.shape[", "0", "]\n                if visual_warning and args.visu != ", "''", ":\n                    ", "print", "(\n                        ", "'Visualization Failed: You can only choose a room to visualize within the scope of the test area'", ")\n                test_true_cls = np.", "concatenate", "(test_true_cls)\n                test_pred_cls = np.", "concatenate", "(test_pred_cls)\n                test_acc = metrics.", "accuracy_score", "(test_true_cls, test_pred_cls)\n                avg_per_class_acc = metrics.", "balanced_accuracy_score", "(test_true_cls, test_pred_cls)\n                test_true_seg = np.", "concatenate", "(test_true_seg, axis=", "0", ")\n                test_pred_seg = np.", "concatenate", "(test_pred_seg, axis=", "0", ")\n                test_ious = ", "calculate_sem_IoU", "(test_pred_seg, test_true_seg)\n                outstr = ", "'Test :: test area: %s, test acc: %.6f, test avg acc: %.6f, test iou: %.6f'", " % (test_area,\n                                                                                                        test_acc,\n                                                                                                        avg_per_class_acc,\n                                                                                                        np.", "mean", "(\n                                                                                                            test_ious))\n                io.", "cprint", "(outstr)\n                all_true_cls.", "append", "(test_true_cls)\n                all_pred_cls.", "append", "(test_pred_cls)\n                all_true_seg.", "append", "(test_true_seg)\n                all_pred_seg.", "append", "(test_pred_seg)\n\n        if args.test_area == ", "'all'", ":\n            all_true_cls = np.", "concatenate", "(all_true_cls)\n            all_pred_cls = np.", "concatenate", "(all_pred_cls)\n            all_acc = metrics.", "accuracy_score", "(all_true_cls, all_pred_cls)\n            avg_per_class_acc = metrics.", "balanced_accuracy_score", "(all_true_cls, all_pred_cls)\n            all_true_seg = np.", "concatenate", "(all_true_seg, axis=", "0", ")\n            all_pred_seg = np.", "concatenate", "(all_pred_seg, axis=", "0", ")\n            all_ious = ", "calculate_sem_IoU", "(all_pred_seg, all_true_seg)\n            outstr = ", "'Overall Test :: test acc: %.6f, test avg acc: %.6f, test iou: %.6f'", " % (all_acc,\n                                                                                             avg_per_class_acc,\n                                                                                             np.", "mean", "(all_ious))\n            io.", "cprint", "(outstr)\n", "\n", "请问该如何修改呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;语法错误&amp;#xff0c;第10行df[&amp;#39;语文&amp;#39;]&amp;#xff0c;&amp;#xff0c;df[&amp;#39;英语&amp;#39;]多了个逗号&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["excel的数据通过pyecharts生成柱型图表,图中需要显示EXCEL中多个列数据", ["现在有一学生各位成绩表格，需要通过pyecharts生成柱型图表,图中需要显示EXCEL中各科成绩列数据", "\n", "\n", "import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n", "from", " pyecharts.charts ", "import", " Bar\n\nfilepath = ", "r'/Users/allen/Downloads/my1stCharts.html'", "\ndf = pd.read_excel(", "\"/Users/allen/Downloads/Testresults1.xlsx\"", ", sheet_name=", "\"Sheet1\"", ", header=", "0", ")\ndf.head()\n\nx = np.array(df[", "'月份'", "])\ny = np.array(df[", "'数学'", "]，df[", "'语文'", "]，，df[", "'英语'", "]，df[", "'科学'", "]，df[", "'地理'", "])\n\nbar = Bar(", "'成绩'", ",", "'每月情况'", ")\nbar.add(", "'X学生数学情况'", ",x,y)\nbar\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;请在你的python里执行以下代码之后再进行后续计算&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;os&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;os&lt;/span&gt;.system(&lt;span class=\"hljs-string\"&gt;&amp;#39;pip install numpy&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["pathon import 模块名", ["\n", "\n", "刚刚", "学到这里的时候不大清楚是该提前创建np吗", "感觉这块不对后面from import 也是错的"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;x&amp;#61;nn.Conv2d(1, 256, kernel_size&amp;#61;7, stride&amp;#61;2, padding&amp;#61;3, bias&amp;#61;False)(input1)请问(input1)是什么&amp;#xff1f;python语法中好似没有这样的写法&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["conv2d(): argument 'input' (position 1) must be Tensor, not Tensor，不知道怎么解决。", ["import torch\nimport torch.nn as nn\n", "from", " tensorflow import keras\nimport torch.nn.functional as F\nimport numpy as np\n", "from", " torch.autograd import Variable\nimport tensorflow as tf\n", "from", " tensorflow import keras\nimport matplotlib.pyplot as plt\nimport paddle\nimport warnings\n", "from", " paddle.metric import Accuracy\n\n", "# 训练数据", "\n", "feature_name1", "=", "\"J:\\\\multi-scale\\\\data_test\\\\data_33.txt\"", "\n", "feature_data1", "=np.loadtxt(feature_name1)\n", "feature_data1", "=np.int_(feature_data1)\n", "train_X1", "=np.reshape(feature_data1,(100,32,32,1))\ntrain_X1 = torch.tensor(train_X1)\n", "print", "(train_X1.shape)\n", "feature_name2", "=", "\"J:\\\\multi-scale\\\\data_test\\\\data_17.txt\"", "\n", "feature_data2", "=np.loadtxt(feature_name2)\n", "feature_data2", "=np.int_(feature_data2)\n", "train_X2", "=np.reshape(feature_data2,(100,16,16,1))\n\ntrain_X2 = torch.tensor(train_X2)\n", "print", "(train_X2.shape)\n\n", "tag_name", "=", "\"J:\\\\multi-scale\\\\data_test\\\\ch_lable_33.txt\"", "\n", "tag_data", "=np.loadtxt(tag_name)\ntrain_Y = keras.utils.to_categorical(tag_data, ", "num_classes", "=8)\n", "print", "(train_Y.shape)\nclass Bottleneck(nn.Module):\n    expansion = 4\n\n    def __init__(self, in_planes, planes, ", "stride", "=1):\n        super(Bottleneck, self).__init__()\n        self.conv1 = nn.Conv2d(in_planes, planes, ", "kernel_size", "=1, ", "bias", "=", "False", ")\n        self.bn1 = nn.BatchNorm2d(planes)\n        self.conv2 = nn.Conv2d(planes, planes, ", "kernel_size", "=3, ", "stride", "=stride, ", "padding", "=1, ", "bias", "=", "False", ")\n        self.bn2 = nn.BatchNorm2d(planes)\n        self.conv3 = nn.Conv2d(planes, self.expansion*planes, ", "kernel_size", "=1, ", "bias", "=", "False", ")\n        self.bn3 = nn.BatchNorm2d(self.expansion*planes)\n\n        self.shortcut = nn.Sequential()\n        ", "if", " stride != 1 ", "or", " in_planes != self.expansion*planes:\n            self.shortcut = nn.Sequential(\n                nn.Conv2d(in_planes, self.expansion*planes, ", "kernel_size", "=1, ", "stride", "=stride, ", "bias", "=", "False", "),\n                nn.BatchNorm2d(self.expansion*planes)\n            )\n\n    def forward(self, x):\n        out = F.relu(self.bn1(self.conv1(x)))\n        out = F.relu(self.bn2(self.conv2(out)))\n        out = self.bn3(self.conv3(out))\n        out += self.shortcut(x)\n        out = F.relu(out)\n        return out\ndef _make_layer(in_planes, block, planes, num_blocks, stride):\n    strides = [stride] + [1]*(num_blocks-1)\n    layers = []\n    ", "for", " stride ", "in", " strides:\n        layers.append(block(in_planes, planes, stride))\n        in_planes = planes * block.expansion\n    return nn.Sequential(*layers)\n\n", "#定义网络", "\ninput1 = keras.Input(shape=(32, 32,1))\ninput2 = keras.Input(shape=(16, 16,1))\n\n", "# Stage 1", "\n", "x", "=nn.Conv2d(1, 256, ", "kernel_size", "=7, ", "stride", "=2, ", "padding", "=3, ", "bias", "=", "False", ")(input1)\n", "x", "=nn.BatchNorm2d(64)(x)\nc1 = F.relu(x)\nc1 =x= F.max_pool2d(c1, ", "kernel_size", "=3, ", "stride", "=2, ", "padding", "=1)(x)\n", "# Stage 2", "\n", "c2", "=_make_layer(Bottleneck, 128, 2, ", "stride", "=2)(c1)\n", "c3", "=_make_layer(Bottleneck, 128, 2, ", "stride", "=2)(c2)\n", "p2", "=nn.Conv2d( 512, 256, ", "kernel_size", "=1, ", "stride", "=1, ", "padding", "=0)(input2)\n", "#p3=nn.Conv2d( 512, 256, kernel_size=1, stride=1, padding=0)(input3)", "\n", "p2", "=nn.Conv2d( 256, 128, ", "kernel_size", "=1, ", "stride", "=1, ", "padding", "=0)(p2)\np3= keras.layers.concatenate([c2, p2])\n", "p3", "=keras.layers.Flatten()(p3)\np3 = keras.layers.Dense(64, ", "activation", "=", "'relu'", ")(p3)\noutput = keras.layers.Dense(8, ", "activation", "=", "'sigmoid'", ")(p3)\nmodel = keras.Model(inputs=[input1, input2], ", "outputs", "=output)\n\nmodel.summary()\nmodel.compile(", "optimizer", "=", "'adam'", ",\n              ", "loss", "=", "'sparse_categorical_crossentropy'", ",\n              metrics=[", "'accuracy'", "])\n\nhistory = model.fit([train_X1,train_X2],\n                    train_Y,\n                    ", "epochs", "=30, ", "validation_split", "=0.3)\n", "\n", "错误提示：", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你是在这里看的吗&lt;br /&gt; &lt;a href=\"https://blog.csdn.net/m0_37393514/article/details/81010587?utm_source&amp;#61;app&amp;amp;app_version&amp;#61;5.3.1\" id=\"textarea_1651242427857_1651242459553_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/m0_37393514/article/details/81010587?utm_source&amp;#61;app&amp;amp;app_version&amp;#61;5.3.1&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["tensorflow导入自己的数据集", ["问题遇到的现象和发生背景", "\n", "修改以下代码，导入自己的数据集（train和test文件，目录下各有十类图像），之后的训练要用到：train_images,train_labels,test_images,test_labels", "\n", "\n", "fashion_mnist=tf.keras.datasets.fashion_minst", "(train_images,train_labels),(test_images,test_labels)=fashion_minst.load_data()", "class_names={\"T-shirt/top\",'Trouser','Pullover','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle boot'}", "train_images=np.expend_dims(train_images,-1)/255", "test_images=np.expend_dims(train_images,-1)/255", "\n", "请教各位!万分感谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我测试代码是能运行和用filter处理的啊&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/898153338076116.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["不清楚这个为何不成功", ["\n", "import", " numpy ", "as", " np\n", "import", " cv2\n\n", "from", " scipy ", "import", " misc, ndimage, signal\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " numpy ", "as", " np\n", "from", " PIL ", "import", " Image\n\n\n", "def", " ", "plot_two", "(", "left, right", "):\n    fig = plt.figure()\n    ax1 = fig.add_subplot(", "121", ")\n    ax2 = fig.add_subplot(", "122", ")\n    ax1.imshow(left)\n    ax2.imshow(right)\n    plt.show()\n\n\n", "def", " ", "cv_2d_conv_lower_pass_filer", "(", "img_src", "):\n    ", "# prepare the 5x5 shaped filter", "\n    kernel = np.array([[", "1", ", ", "1", ", ", "1", ", ", "1", ", ", "1", "],\n                       [", "1", ", ", "1", ", ", "1", ", ", "1", ", ", "1", "],\n                       [", "1", ", ", "1", ", ", "1", ", ", "1", ", ", "1", "],\n                       [", "1", ", ", "1", ", ", "1", ", ", "1", ", ", "1", "],\n                       [", "1", ", ", "1", ", ", "1", ", ", "1", ", ", "1", "]])\n    kernel = kernel/", "sum", "(kernel)\n\n    ", "# filter the source image", "\n    img_rst = cv2.filter2D(img_src, -", "1", ", kernel)\n    ", "return", " img_rst\n\n\n", "def", " ", "cv_2d_conv_high_pass_filter", "(", "img_src", "):\n    ", "# edge detection filter", "\n    kernel = np.array([[", "0.0", ", -", "1.0", ", ", "0.0", "],\n                       [-", "1.0", ", ", "4.0", ", -", "1.0", "],\n                       [", "0.0", ", -", "1.0", ", ", "0.0", "]])\n\n    kernel = kernel//(np.", "sum", "(kernel) ", "if", " np.", "sum", "(kernel) != ", "0", " ", "else", " ", "1", ")\n\n    ", "# filter the source image", "\n    img_rst = cv2.filter2D(img_src, -", "1", ", kernel)\n    ", "return", " img_rst\n\n\n", "def", " ", "cv_2d_conv_customer_filter", "(", "img_src", "):\n    ", "# edge detection filter", "\n    kernel = np.array([[-", "1.0", ", -", "1.0", "],\n                       [", "2.0", ", ", "2.0", "],\n                       [-", "1.0", ", -", "1.0", "]])\n\n    kernel = kernel/(np.", "sum", "(kernel) ", "if", " np.", "sum", "(kernel) != ", "0", " ", "else", " ", "1", ")\n\n    ", "# filter the source image", "\n    img_rst = cv2.filter2D(img_src, -", "1", ", kernel)\n    ", "return", " img_rst\n\n\n", "def", " ", "select_filter", "(", "image", "):\n    ", "print", "(image.shape)\n    filters = [\n        {\n            ", "'option'", ": ", "'lcov'", ",\n            ", "'name'", ": ", "'2维卷积低通滤镜( filter2D )'", ",\n            ", "'filter'", ": ", "lambda", ": cv_2d_conv_lower_pass_filer(image)\n        },\n        {\n            ", "'option'", ": ", "'hcov'", ",\n            ", "'name'", ": ", "'2维卷积高通滤镜( filter2D )'", ",\n            ", "'filter'", ": ", "lambda", ": cv_2d_conv_high_pass_filter(image)\n        },\n        {\n            ", "'option'", ": ", "'ccov'", ",\n            ", "'name'", ": ", "'2维卷积自定义滤镜( filter2D )'", ",\n            ", "'filter'", ": ", "lambda", ": cv_2d_conv_customer_filter(image)\n        },\n    ]\n\n    ", "print", "(", "\"本迷你PS软件支持以下滤镜：\"", ")\n    filter_dict = {}\n    ", "for", " ", "filter", " ", "in", " filters:\n        filter_dict[", "filter", "[", "'option'", "]] = ", "filter", "\n        ", "print", "(", "\"* {} : {}\"", ".", "format", "(", "filter", "[", "'option'", "], ", "filter", "[", "'name'", "]))\n\n    options = ", "'/'", ".join(", "list", "(", "map", "(", "lambda", " f: f[", "'option'", "], filters)))\n\n    ", "while", " ", "True", ":\n        ret = ", "input", "(", "f\"请选择滤镜[ ", "{options}", "]:\"", ")\n        ", "filter", " = filter_dict.get(ret)\n        ", "if", " ", "filter", " ", "is", " ", "None", ":\n            ", "print", "(", "\"不支持的选项，请重新选择。\"", ")\n        ", "else", ":\n            ", "return", " ", "filter", "[", "'filter'", "]()\n\n\n", "if", " __name__ == ", "'__main__'", ":\n    image = misc.face()\n    blurred = select_filter(image)\n    plot_two(image, blurred)\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;出现错误在于这行&amp;#xff1a;xf &amp;#61; np.linspace(0.0, 1.0/(2.0*T), N/2)&amp;#xff0c;N/2是浮点数&amp;#xff0c;而点数应该是整数&amp;#xff0c;所以报错。将其改成&amp;#xff1a;N//2即可&amp;#xff0c;另外代码中还有些弃用的函数&amp;#xff0c;比如time.clock()要改成time.perf_counter()&lt;/p&gt;\n&lt;p&gt;如对你有帮助&amp;#xff0c;请点击采纳。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["有时间请大家给解惑下？ python一直出TypeError: 'numpy.float64' object cannot be interpreted as an integer，不知如何是好啊", ["版本：Python 3.9.1+numpy 1.21.3", "运行出错！！，求解惑。", "\n", "#Compute and Plot FFT", "\n", "tic", " = time.perf_counter()\n", "plt", ".figure(", "3", ")  \n", "xf", " = np.linspace(", "0", ".", "0", ", ", "1", ".", "0", "/(", "2", ".", "0", "*T), N/", "2", ")\n", "yf", " = fft(x)\n", "plt", ".plot(xf, ", "2", ".", "0", "/N * np.abs(yf[", "0", ":np.int(N/", "2", ")]))\n", "plt", ".grid()\n", "plt", ".xlabel('Frequency (Hz)')\n", "plt", ".ylabel('Accel (g)')\n", "plt", ".title('FFT - ' + file_path)\n", "toc", " = time.clock()\n", "print", "(", "\"FFT Time:\"", ",toc-tic)\n", "plt", ".show()\n", "\n", "Traceback (most recent call last):", "  File \"C:\\Users\\Administrator\\Desktop\\vibration analysis\\vibration-analysis-MATLAB-Python-functions\\Load_Plot_RMS_FFT.py\", line 58, in ", "    xf = np.linspace(0.0, 1.0/(2.0*T), N/2)", "  File \"<__array_function__ internals>\", line 5, in linspace", "  File \"D:\\python\\lib\\site-packages\\numpy\\core\\function_base.py\", line 120, in linspace", "    num = operator.index(num)", "TypeError: 'numpy.float64' object cannot be interpreted as an integer"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;源码中有一个弃用警告&amp;#xff0c;就是说pymc3中的有关plot函数的关键字参数varnames已经弃用&amp;#xff0c;改成了var_names&amp;#xff0c;用var_names&amp;#61;[&amp;#39;theta&amp;#39;]试试。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于pymc3报错问题", ["import pymc3 as pm", "\nimport numpy as np", "\nimport scipy.stats as stats", "\nimport matplotlib.pyplot as plt", "\nimport seaborn as sns", "\npalette = 'muted'", "\nsns.set_palette(palette); sns.set_color_codes(palette)", "\n\n", "np.random.seed(123)", "\nn_experiments = 4", "\ntheta_real = 0.35  # unkwon value in a real experiment", "\ndata = stats.bernoulli.rvs(p=theta_real, size=n_experiments)", "\n\n", "with pm.Model() as our_first_model:", "\n    # a priori", "\n    theta = pm.Beta('theta', alpha=1, beta=1)", "\n    # likelihood", "\n    y = pm.Bernoulli('y', p=theta, observed=data)", "\n    #y = pm.Binomial('theta',n=n_experimentos, p=theta, observed=sum(datos))", "\n    start = pm.find_MAP()", "\n    step = pm.Metropolis()", "\n    trace = pm.sample(1000, step=step, start=start,cores=1)", "\n\n", "with our_first_model:", "\n    step = pm.Metropolis()", "\n    multi_trace = pm.sample(1000, step=step,cores=1)", "\n\n", "if __name__ == '__main__':", "\n    burnin = 0  # no burnin", "\n    multi_chain = multi_trace[burnin:]", "\n    pm.traceplot(multi_chain, lines={'theta':theta_real})", "\n    plt.show()", "\n    # print(pm.gelman_rubin(multi_chain))", "\n    pm.forestplot(multi_chain, varnames=['theta'])", "\n    plt.show()", "\n\n", "总这样报错呢！？？？？？？？？？？？？？？？？？？？？？？？？？", "\n\n", "\nTypeError                                 Traceback (most recent call last)\n<ipython-input-1-88ae9a9ad243> in <module>\n     34     plt.show()\n     35     # print(pm.gelman_rubin(multi_chain))\n---> 36     pm.forestplot(multi_chain, varnames=['theta'])\n     37     plt.show()\n     38 \n\n~\\anaconda3\\lib\\site-packages\\pymc3\\plots\\__init__.py in wrapped(*args, **kwargs)\n     37         if \"varnames\" in kwargs:\n     38             raise DeprecationWarning(\n---> 39                 f\"The `varnames` kwarg was renamed to `var_names`.\", stacklevel=2\n     40             )\n     41         original = func.__name__\n\nTypeError: DeprecationWarning() takes no keyword arguments"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;得看你模型保存的方式&amp;#xff0c;如果是通过save_model函数保存的模型&amp;#xff0c;读取方法就得是model_lgb  &amp;#61; lgb.Booster(model_file_path)&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["lightgbm调用模型pkl，出现需要先调用拟合？", ["问题遇到的现象和发生背景", "\n", "joblib调用模型，预测数据时出现raise LGBMNotFittedError(\"Estimator not fitted, call fit before exploiting the model.\")", "sklearn.exceptions.NotFittedError: Estimator not fitted, call fit before exploiting the model.", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n", "import", " os\n", "import", " collections\n", "import", " lightgbm ", "as", " lgb\n", "import", " graphviz\n", "import", " joblib\n", "from", " lightgbm ", "import", " LGBMClassifier\n", "from", " tools ", "import", " globalTool ", "as", " gt\n", "from", " sklearn.metrics ", "import", " accuracy_score, confusion_matrix, cohen_kappa_score, f1_score, precision_score, recall_score, precision_recall_fscore_support\n", "from", " sklearn.model_selection ", "import", " train_test_split, KFold\n\n", "class", " ", "model", ":\n    ", "def", " ", "__init__", "(", "self, f_path", "):\n        ", "print", "(f_path)\n        self.data = ", "None", "\n        self.x_train = ", "None", "\n        self.x_test = ", "None", "\n        self.y_train = ", "None", "\n        self.y_test = ", "None", "\n        self.model_path = ", "''", "\n        self.row = ", "0", "\n        self.col = ", "0", "\n        self.data_columns = []  ", "# 列名", "\n        self.in_data(f_path)  ", "# 初始化部分类变量", "\n\n    ", "def", " ", "in_data", "(", "self,f_path", "):\n        self.data = pd.read_csv(f_path)  ", "# 读取数据", "\n        y_data = self.data[", "'oreClass'", "]  ", "#", "\n        x_data = self.data.drop(", "'oreClass'", ", axis=", "1", ")\n        ", "# x_data = gt.lgb_dropList(x_data)", "\n        self.data_columns = x_data.columns\n\n        self.data_split(x_data, y_data)\n\n    ", "def", " ", "data_split", "(", "self, x_data, y_data", "):\n        x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=", "0.4", ", random_state=", "2020", ")\n\n        self.x_train = np.asarray(x_train)\n        self.x_test = np.asarray(x_test)\n        self.y_train = np.asarray(y_train)\n        self.y_test = np.asarray(y_test)\n\n    ", "def", " ", "train", "(", "self", "):\n        x_train, y_train, x_test, y_test = self.x_train, self.y_train, self.x_test, self.y_test\n        kfolder = KFold(n_splits=", "5", ", shuffle=", "True", ", random_state=", "2020", ")  ", "# 5折交叉验证", "\n        kfold = kfolder.split(x_train, y_train)  ", "# 返回分类后数据集的index", "\n\n        oof_cb = np.zeros(", "len", "(x_train))\n        pred_cb = np.asarray([np.zeros(", "len", "(x_test))], dtype=np.int64)\n\n        param = {", "'boosting_type'", ": ", "'gbdt'", ",\n                 ", "'num_leaves'", ": ", "20", ",\n                 ", "'objective'", ": ", "'multiclass'", ",\n                 ", "'max_depth'", ": ", "3", ",\n                 ", "'learning_rate'", ": ", "0.1", ",\n                 ", "'num_class'", ": ", "45", ",  ", "# 一共45种矿物", "\n                 }  ", "# 设置模型参数", "\n        model_lgb = LGBMClassifier(**param)  ", "# 创建分类器", "\n\n        ", "for", " train_index, vali_index ", "in", " kfold:\n            k_x_train = x_train[train_index]\n            k_y_train = y_train[train_index]\n            k_x_vali = x_train[vali_index]\n            k_y_vali = y_train[vali_index]\n\n            model_lgb = model_lgb.fit(k_x_train, k_y_train, eval_set=[(k_x_vali, k_y_vali)], verbose=", "1", ",\n                                      early_stopping_rounds=", "15", ")  ", "# eval_set:评估数据集,list类型;verbose:True显示,False不显示", "\n            ", "# early_stopping_rounds:提前结束模型训练", "\n\n            oof_cb[vali_index] = model_lgb.predict(k_x_vali, num_iteration=model_lgb.best_iteration_)\n            tmp = model_lgb.predict(x_test, num_iteration=model_lgb.best_iteration_).ravel()\n            pred_cb = np.append(pred_cb, [tmp], axis=", "0", ")\n\n        pred_cb = pred_cb[", "1", ":].T  ", "# 去除第一行0值，得到最终的预测结果", "\n        result_pred, result_true = [], y_test\n        ", "for", " line ", "in", " pred_cb:\n            result_pred.append(np.argmax(np.bincount(line)))\n\n        ", "# 计算评价指标", "\n        acc_score = accuracy_score(result_true, result_pred)\n        kappa = cohen_kappa_score(result_true, result_pred)\n        macro_f1 = f1_score(result_true, result_pred, average=", "'macro'", ")\n        precision = precision_score(result_true, result_pred, average=", "'macro'", ")\n        recall = recall_score(result_true, result_pred, average=", "'macro'", ")\n\n        ", "print", "(", "'AC score: {:.3f} Kappa:{} macro_f1:{} precision:{} recall:{}'", "\n              .", "format", "(acc_score, kappa, macro_f1, precision, recall))\n\n        now = gt.timeTitle()\n        self.evaluate(result_true, result_pred, ", "'./分析结果/性能评价/'", " + now + ", "'.csv'", ")\n        joblib.dump(model_lgb,\n                    ", "'./model/saveModel_lgb/lgb_model'", " + now + ", "'ac'", " + ", "'{:.3f}'", ".", "format", "(acc_score) + ", "'.pkl'", ")  ", "# 保存模型", "\n\n        ", "# self.getImportance(model_lgb, now)", "\n        ", "# self.getCmat(result_true, result_pred, now)", "\n        ", "# self.getViewer(model_lgb)", "\n        ", "# self.getCmat(y_test, res)", "\n\n    ", "def", " ", "loadMod", "(", "self, f_path", "):\n        ", "for", " root, dirs, files ", "in", " os.walk(f_path):\n            m_path = ", "max", "(files)\n\n        ", "print", "(", "'lgb_model : '", ", m_path)\n        model_lgb = joblib.load(f_path + ", "'/'", " + m_path)\n        ", "return", " model_lgb\n\n    ", "def", " ", "classify", "(", "self, data", "):  ", "# 用准确率最大的模型预测数据形成一列数组", "\n        f_path = ", "'D:/Personality/paper/矿物识别/model/saveModel_lgb'", "\n        model_lgb = self.loadMod(f_path)\n\n        data = pd.DataFrame(data)\n        result = model_lgb.predict(data).ravel()\n        ", "return", " result\n\n    ", "def", " ", "getResult", "(", "self, f_path=", "'D:/Personality/paper/矿物识别/datasource/classData'", "):\n        Data = pd.DataFrame(columns=self.data_columns, dtype=", "float", ")  ", "# 用以存储所需样本的所有元素值", "\n        ", "# print(Data.columns)", "\n\n        files = []  ", "# 存储当前文件夹下的所有文件名", "\n        ", "for", " root, dirs, f ", "in", " os.walk(f_path):\n            files = f\n            ", "break", "\n\n        ", "for", " file ", "in", " files:\n            elem = file.split(", "'_'", ")[-", "1", "].split(", "'.'", ")[", "0", "]  ", "# 获取当前文件代表的元素", "\n            dtmp = pd.read_csv(f_path + ", "'/'", " + file, header=", "None", ")  ", "# 读取当前元素的csv", "\n            self.row, self.col = dtmp.shape  ", "# 将当前元素的行列号存储到row、col中", "\n            dtmp = np.asarray(dtmp).ravel()  ", "# 将当前元素的值变为一列", "\n            Data[elem] = dtmp  ", "# 将当前元素的值存储到Data对应的元素中", "\n\n        ", "# Data = gt.lgb_dropList(Data)", "\n        Data = np.array(Data)  ", "# 将dataframe转换为array", "\n        ", "# print(Data.shape)", "\n        ", "# print(self.classify_prob(Data))", "\n        result = self.classify(Data)  ", "# 对数据进行分类预测", "\n        ", "print", "(result,result.shape)\n\n\n\n\n\n\n\n    ", "# ---- 计算各类性能 ----#", "\n    ", "def", " ", "evaluate", "(", "self, y_true, y_pred, save_path", "):\n        dt_CSV = pd.DataFrame()\n        unique_Value = np.unique(", "list", "(y_true)+", "list", "(y_pred))\n        ", "print", "(", "\"当前种类数：\"", ", ", "len", "(unique_Value))\n        ", "print", "(", "'类别序号：'", ", ", "sorted", "(unique_Value))\n        dt_CSV[", "'oreClass'", "] = ", "sorted", "(unique_Value)\n\n        name = []\n        ", "for", " i ", "in", " ", "sorted", "(unique_Value):\n            name.append(gt.no_remap(i))\n        dt_CSV[", "'name'", "] = name\n\n        p_class, r_class, f_class, support_micro = precision_recall_fscore_support(y_true=y_true, y_pred=y_pred)\n        ", "print", "(", "len", "(p_class), ", "len", "(r_class), ", "len", "(f_class))\n        dt_CSV[", "'precision'", "], dt_CSV[", "'recall'", "], dt_CSV[", "'f1'", "] = p_class, r_class, f_", "class", "\n\n        ", "dt_CSV", ".to_csv(save_path, index=", "False", ", encoding=", "'utf_8_sig'", ")\n\n\n\n\nmodel_m = model(", "\"D:/Personality/paper/矿物识别/datasource/fullData/data20201101_160248.csv\"", ")\n\nre = model_m.getResult()\n\n\n", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "在网上查找时发现我的预测数据存在NAN，后续我将NAN转换为0，结果问题相同。还尝试将lightgbm3.3.2降到3.3.0，但问题还是存在。一直在说调用函数时要先调用拟合，但调用的模型是训练完成的pkl格式模型，这应该是没问题的。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你改的文件路径中 D之后的&amp;#xff1a;冒号写成了中文的&amp;#xff0c;要改成英文冒号:&lt;br /&gt;name &amp;#39;data&amp;#39; is not defined&amp;#xff0c;name &amp;#39;np&amp;#39; is not defined等错误是 data 和 np 等变量没定义&amp;#xff0c;可能是定义这些变量模块文件没有引入。&lt;br /&gt;比如缺少import numpy as np&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["jupyter运行别人的代码有三个问题：1.No such file or directory；2.出现很多name '某某' is not defined3.该出现的图表都不能出现但是并没有报错，", ["1.No such file or directory，而我明明已经改过了文件路径的名字，真的改过了；", "2.出现很多name '某某' is not defined", "3.该出现的图表都不能出现但是并没有报错，", "错误详情：", "错误1.No such file or directory: 'D：/Desktop/LSTM_PM2.5多步预测/PRSA_data_2010.1.1-2014.12.31.csv'", "错误2.name 'data' is not defined，name 'np' is not defined等等", "原作者的代码是可以运行出图表的，但是我怎么运行都没有图表出现，但是又没有这方面的报错。原作者联系不上……", "python小白求大家救命！"]], "Tag": "算法设计"}
{"Answer": "如果是该vc，那么就第二个参数也用LPSTR类型好了。再加一个int类型等做errorcode", "Konwledge_Point": "应对NP完全问题", "Question": ["关于VB.net调用C生成的dll，遇到的比字符集不匹配还纠结的问题", ["升级项目。从6.0到2012。", "\n升级后出现调用dll中c的方法：", "\nDLLEXPORT BOOL WINAPI InsUpdDel( LPSTR lpSqlStr, LPRTNINFO RtnInfo )", "\n其中 ", "LPSTR lpSqlStr", " 是_char × ", "类型，在API _winnt.h", "中定义：", "\nwinnt.h", "\n\n", "// ANSI (Multi-byte Character) types", "\n//", "\ntypedef ", "Null_terminated", " CHAR *NPSTR, *LPSTR, *PSTR;", "为传入的sql，LPRTNINFO RtnInfo 是自己在头文件中定义的构造体构造体：", "\ntypedef struct {", "\n       long ErrCode;", "\n       char ErrMsg[71];", "\n} RTN_INFO;", "\n\n", "typedef RTN_INFO* LPRTNINFO;", "\n_当ErrMsg 传入汉字时，报错：传递给系统调用的数据区域太小。HERSULT：0x8007007A。", "\n当lpSqlStr传入汉字时，却不会报错。 ", "\n求大神指点，这到底是怎么一回事？", "\nvb中如果要改，实在太麻烦，有没有什么能够在VC下修改的方法？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码这样这样写看是不是想要得到的结果&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import numpy as np\nclust&amp;#61;np&lt;span class=\"hljs-selector-class\"&gt;.zeros&lt;/span&gt;((&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;))\nresult&amp;#61;np&lt;span class=\"hljs-selector-class\"&gt;.matrix&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;1 3 5;2 7 7;6 5 3&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;  &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(result&lt;span class=\"hljs-selector-class\"&gt;.shape&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(result&lt;span class=\"hljs-selector-class\"&gt;.shape&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[1]&lt;/span&gt;):\n        index&amp;#61;result&lt;span class=\"hljs-selector-attr\"&gt;[i,j]&lt;/span&gt;\n        clust&lt;span class=\"hljs-selector-attr\"&gt;[index,j]&lt;/span&gt;&amp;#61;result&lt;span class=\"hljs-selector-attr\"&gt;[i,j]&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(clust)&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy数组变长度", ["代码如下", "要把上图改为clust=np.zeros（）", "\n", "想要得到如下图所示的效果"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\nimport os\n\ndef &lt;span class=\"hljs-constructor\"&gt;BatchProcessPointClouds(&lt;span class=\"hljs-params\"&gt;inputDir&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;outputDir&lt;/span&gt;)&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; file_name &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; os.listdir(inputDir):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; not file_name.endswith(&lt;span class=\"hljs-string\"&gt;&amp;#34;.pcd&amp;#34;&lt;/span&gt;):\n            continue\n        &lt;span class=\"hljs-constructor\"&gt;SimplifyPointClouds(&lt;span class=\"hljs-params\"&gt;inputDir&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;file_name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;outputDir&lt;/span&gt;)&lt;/span&gt;\n        &lt;span class=\"hljs-constructor\"&gt;RegulateData(&lt;span class=\"hljs-params\"&gt;file_name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;outputDir&lt;/span&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这个函数将遍历指定目录中的所有 .pcd 文件&amp;#xff0c;并对每个文件执行 SimplifyPointClouds() 和 RegulateData() 函数。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python pcd文件读取", ["别人给了一段代码，但是没有给传参设置，只有函数那部分，希望加一部分传参函数，进行批量读取点云数据（pcd格式）文件，将代码运行起来。", "\n", "def SimplifyPointClouds(inputDir, file_name, outputDir):\n    print(", "\"simplify point clouds\"", ", file_name)\n\n    ", "curFileName", " = inputDir + ", "\"/\"", " + file_name\n    print(", "\"processing\"", "+curFileName)\n    ", "# readfile", "\n    ", "pcd", " = o3d.geometry.PointCloud()\n\n    ", "if", " file_name.endswith(", "\".pcd\"", "):\n        ", "pcd", " = o3d.io.read_point_cloud(curFileName)\n    elif file_name.endswith(", "\".txt\"", "):\n        ", "pcdPts", " = np.loadtxt(curFileName)[:, ", "0", ":", "3", "]\n        pcd.", "points", " = o3d.utility.Vector3dVector(pcdPts)\n    print(", "\"The input point cloud has\"", ", pcd)\n\n    ", "'''# denoising\n    print(\"denoising...\")\n    cl, ind = pcd.remove_statistical_outlier(nb_neighbors=30,\n                                             std_ratio=2.0)\n    pcd = pcd.select_by_index(ind)\n    print(\"Denoised\", pcd)''", "'\n\n    ", "# down sampling", "\n    ", "pcd", " = pcd.voxel_down_sample(", "voxel_size=2.0)", "\n    print(", "\"Down_sampled\"", ", pcd)\n    o3d.io.write_point_cloud(outputDir+", "\"/_1Ds_\"", "+file_name, pcd)\n\ndef RegulateData(file_name, outputDir):\n    ", "pcd", " = o3d.io.read_point_cloud(outputDir+", "\"/_1Ds_\"", "+file_name)\n    ", "normal", " = [", "0.0", ", -", "1.0", ", ", "0.0", "]\n    ", "R", " = pyrsc.get_rotationMatrix_from_vectors(normal, [", "0", ", ", "0", ", ", "1", "])\n    ", "T", " = np.eye(", "4", ")\n    T[:", "3", ", :", "3", "] = R\n    ", "pcd_r", " = pcd.transform(T)\n\n    ", "# estimate bonding box", "\n    ", "aabb", " = pcd_r.get_axis_aligned_bounding_box()\n    ", "aabb_box_length", " = np.asarray(aabb.get_extent())\n    print(", "\"bonding box length: \"", ", aabb_box_length)\n    ", "# adjust x and y direction", "\n    ", "if", " aabb_box_length[", "1", "] > aabb_box_length[", "0", "]:\n        print(", "\"Rotate around Z-axis\"", ")\n        ", "R", " = o3d.geometry.get_rotation_matrix_from_axis_angle((", "0", ", ", "0", ", np.pi / ", "2", "))\n        ", "pcd_r", " = pcd_r.rotate(R)\n    o3d.io.write_point_cloud(outputDir+", "\"/_2Ms_\"", "+file_name, pcd_r) ", "# maize stands with ground", "\n\n    ", "# detect ground again, remove ground and translate maize canopy to 0 level height", "\n    ", "xyz", " = np.asarray(pcd_r.points)\n    ", "csf", " = CSF.CSF()\n\n    ", "# CSF算法的必要参数设置", "\n    csf.params.", "bSloopSmooth", " = False\n    csf.params.", "cloth_resolution", " = ", "1.0", "  ", "# 布料网格分辨率", "\n    csf.params.", "rigidness", " = ", "3", "  ", "# 布料刚性参数，只能是1、2、3", "\n    csf.params.", "time_step", " = ", "0.65", "\n    csf.params.", "class_threshold", " = ", "0.2", "  ", "# 点云与布料模拟点的距离阈值", "\n    csf.params.", "interations", " = ", "500", "  ", "# 最大迭代次数", "\n    ", "# 更多参数详细信息见: http://ramm.bnu.edu.cn/projects/CSF/download/", "\n    csf.setPointCloud(xyz)\n    ", "ground", " = CSF.VecInt()  ", "# 存储地面点索引的list列表", "\n    ", "non_ground", " = CSF.VecInt()  ", "# 存储非地面点的list列表", "\n    csf.do_filtering(ground, non_ground)  ", "# 执行CSF滤波", "\n    ", "ground_cloud", " = pcd.select_by_index(ground)  ", "# 保存地面点", "\n    ", "non_ground_cloud", " = pcd.select_by_index(non_ground)  ", "# 保存非地面点", "\n    ", "groundPts", " = np.asarray(ground_cloud.points)\n    ", "cur_Z", " = np.mean(groundPts[:, ", "2", "]) ", "# 这个值作为平移的依据（但是这个检测到的地面是最下面的，所以要加上thickness/2.0?）。", "\n    ", "thickness", " = ", "15.0", "  ", "# 地面厚度", "\n    ", "dists", " = non_ground_cloud.compute_point_cloud_distance(ground_cloud)\n    ", "dists", " = np.asarray(dists)\n    ", "ind", " = np.where(dists > thickness)[", "0", "]\n    ", "CanopyPcd", " = non_ground_cloud.select_by_index(ind)\n    ", "CanopyPts", " = np.asarray(CanopyPcd.points)\n    ", "ind", " = np.where(CanopyPts[:, ", "2", "] > cur_Z)[", "0", "]\n    ", "CanopyPcd", " = CanopyPcd.select_by_index(ind)\n    o3d.io.write_point_cloud(outputDir + ", "\"/_3Te_\"", " + file_name, CanopyPcd)\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;刚回答了你的另外一个问题&amp;#xff0c;这又一个加功能的问题&lt;br /&gt;&lt;strong&gt;下有代码&amp;#xff0c;可直接复制使用。如有帮助&amp;#xff0c;敬请采纳&amp;#xff0c;你的采纳是我前进的动力&amp;#xff0c;O(∩_∩)O谢谢&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff01;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/733589582856152.png\" class=\"md_img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; re\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\n&lt;span class=\"hljs-comment\"&gt;# 字符串&lt;/span&gt;\nsrc_str &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;[2724606325618536238,91530112343713723J,备注61],[2692025102277631266,91330482MA2BCAQRXE,备注et],[2748256921818730219,91430600MA4R1DQT25,备注59],[2701373294338164869,91500105569920960F,备注43],[2730012660790633301,91510100052546574C,备注2],[1590976417749808642,91110111MA04F5YY0G,备注88],[2702239201936713104,91440300MA5GT9NP45,备注66],&amp;#34;&lt;/span&gt;\nsrc_list &amp;#61; re.findall(&lt;span class=\"hljs-string\"&gt;&amp;#39;\\[(.*?)\\]&amp;#39;&lt;/span&gt;, src_str)\n\ndf_data &amp;#61; {}\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; src &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; src_list:\n    x &amp;#61; src.split(&lt;span class=\"hljs-string\"&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-comment\"&gt;# 需要订单号重复时&amp;#xff0c;取消下面代码注释,并注释掉下一行代码&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# df_data[x[0]] &amp;#61; x&lt;/span&gt;\n    df_data[x[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]] &amp;#61; x[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:]\ng_variPandasDfFpx &amp;#61; pd.DataFrame(df_data)\ng_variPandasDfFpx.to_csv(&lt;span class=\"hljs-string\"&gt;r&amp;#39;./字符串转df.csv&amp;#39;&lt;/span&gt;, encoding&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;GBK&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["字符串想转换成 pandas 的 df", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "字符串想转换成 pandas 的 df", "订单号，税号 ，备注信息", "[2724606325618536238,91530112343713723J,备注61],[2692025102277631266,91330482MA2BCAQRXE,备注et],[2748256921818730219,91430600MA4R1DQT25,备注59],[2701373294338164869,91500105569920960F,备注43],[2730012660790633301,91510100052546574C,备注2],[1590976417749808642,91110111MA04F5YY0G,备注88],[2702239201936713104,91440300MA5GT9NP45,备注66],", "希望订单号作为索引"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;将数据转换成Decimal型进行计算&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python编写的计算程序得不到正确答案", ["材料学中的几个计算公式我转换成了python程序想便于计算，但是出现重大偏差，这是怎么回事？万分感谢！", "\n", "import", " numpy as np\n\n", "for", " i in range(", "10", "):\n    ", "e", " = float(input('输入等效应变：'))\n    ", "first_number", " = float(input('输入Z非零部分：'))\n    ", "second_number", " = float(input('输入Z是", "10", "的几次方:'))\n    ", "z", " = first_number*", "10", "**second_number\n    ", "ee", " = ", "0", ".", "0016", "*", "30", ".", "0", "**", "0", ".", "2709", "*z**", "0", ".", "1147", "\n    ", "ddrx", " = ", "3", ".", "66", "*", "10", "**", "5", "*z**(-", "0", ".", "2218", ")\n\n    ", "dfin", " = (ddrx-", "30", ".", "0", ")*(", "1", ".", "0", "-np.exp(-np.log(", "2", ".", "0", "*(e/ee)**", "2", ".", "13", ")))+", "30", ".", "0", "\n    ", "print", "(dfin)\n\n\n", "\n", "重大计算偏差如下：", "\n", "\n", "原公式如下图：", "\n", "\n", "\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;数据类型错误&amp;#xff0c;检查一下histdict是什么类型数据&amp;#xff0c;sp12数据是否符合EMA参数传递要求&amp;#xff0c;可以输出一下看看&amp;#xff0c;print(sp12)。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python QMT系统引用talib遇到问题，帮看看怎么改？", ["hisdict = ContextInfo.get_history_data(ContextInfo.line1,'1d','close',dividend_type=1)", "\n", "sp12=np.array(hisdict)", "\n", "ema_list=talib.EMA(sp12,timeperiod=12)", "\n", "print(ema_list)", "\n", "【2021-10-22 15:00:39.172】 start trading mode", "\n", "【2021-10-22 15:00:39.172】 0D:\\python\\EMA.py_SH00030064Exception:real is not double", "\n", "【2021-10-22 15:00:39.173】 Traceback (most recent call last):", "\n", "File \"D:\\bin.x64\\lib\\site-packages\\talib_", "init", "_.py\", line 20, in wrapper", "\n", "StopIteration", "\n", "During handling of the above exception, another exception occurred:", "\n", "Traceback (most recent call last):", "\n", "File \"\", line 23, in handlebar", "\n", "File \"D:\\bin.x64\\lib\\site-packages\\talib_", "init", "_.py\", line 24, in wrapper", "\n", "File \"_func.pxi\", line 7076, in talib._ta_lib.EMA", "\n", "Exception: real is not double"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你在13行前面输出一下task_type看看值是什么啊。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python程序问题，传递参数", ["这个代码，为什么定义了 task_type = ‘multiclass', 但是最后一行打印出来的score 还是以", "这个得出来的呢？这个分数是 task_type =’regression‘时得出的分数", "    else:", "        assert task_type == 'regression'", "        score = sklearn.metrics.mean_squared_error(target, prediction) ** 0.5 * y_std", "    return score", "\n", "\n", "下面是源代码", "\n", "\n", "task_type", " = 'multiclass'\n\n@torch.no_grad()\ndef evaluate(part, task_type):\n    model.eval()\n    ", "prediction", " = []\n    for batch ", "in", " delu.iter_batches(X[part], ", "1024", "):\n        prediction.append(apply_model(batch))\n    ", "prediction", " = torch.cat(prediction).squeeze(", "1", ").cpu().numpy()\n    ", "target", " = y[part].cpu().numpy()\n\n    ", "if", " ", "task_type", " == 'binclass':\n        ", "prediction", " = np.round(scipy.special.expit(prediction))\n        ", "score", " = sklearn.metrics.accuracy_score(target, prediction)\n    elif ", "task_type", " == 'multiclass':\n        ", "prediction", " = prediction.argmax(", "1", ")\n        ", "score", " = sklearn.metrics.accuracy_score(target, prediction)\n    ", "else", ":\n        ", "assert", " ", "task_type", " == 'regression'\n        ", "score", " = sklearn.metrics.mean_squared_error(target, prediction) ** ", "0.5", " * y_std\n    return score\n\n\n", "# Create a dataloader for batches of indices", "\n", "# Docs: https://yura52.github.io/zero/reference/api/zero.data.IndexLoader.html", "\n", "batch_size", " = ", "256", "\n", "train_loader", " = delu.data.IndexLoader(len(X['train']), batch_size, ", "device=device)", "\n\n", "# Create a progress tracker for early stopping", "\n", "# Docs: https://yura52.github.io/zero/reference/api/zero.ProgressTracker.html", "\n", "progress", " = delu.ProgressTracker(", "patience=100)", "\nprint(f'Test score before training: {evaluate(", "\"test\"", ", task_type):.", "4", "f}')\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;一、&lt;br /&gt;1、检查你的pycharm 的解释器&amp;#xff08;interpreter&amp;#xff09;&lt;br /&gt;2、打开命令行模式&amp;#xff0c; 更换目录到 1 所在的目录&lt;br /&gt;3、运行  pip install numpy&lt;br /&gt;或者 pip install numpy -i &lt;a href=\"https://mirrors.aliyun.com/pypi/simple/\" id=\"textarea_1639034665652_1639035060073_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://mirrors.aliyun.com/pypi/simple/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;这样就可以确保你的pycharm 可以用numpy &lt;/p&gt;\n&lt;p&gt;二、&lt;br /&gt;或者你自己把你的pycharm 的解释器指向 改为你已经装了np 的python &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于pycharm安装Numpy出错", ["要怎么处理呢，（我的电脑有两个Python，...一个安了np一个没安）"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-built_in\"&gt;box&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;np&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;([x,y], dtype&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;int&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;box&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;np&lt;/span&gt;.int0(&lt;span class=\"hljs-built_in\"&gt;box&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;将[x,y]使用np.array转换&amp;#xff0c;然后np.int0转换&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["怎么构造opencv图象点的数据类型", ["我定义一个函数G01", "def G01(PointA,PointB):", "    XQ = int(tuple(Point0[0]))#起点x坐标", "    YQ = int(tuple(Point0[1]))#起点y坐标", "    XZ = int(tuple(PointA[0]))#终点x坐标", "    YZ = int(tuple(PointA[1]))#终点y坐标", "\n", "box = cv2.minAreaRect(cnt)#轮廓最小外接矩形", "box = cv2.boxPoints(box)#矩形四个角点", "box = np.array(box, dtype=\"int\")", "box = np.int0(box)", "G01(box[0],box[1])这样调用函数没有问题", "x=20", "y=30", "G01([x,y],box[0])这样调用函数出错，怎么把已知点的xy坐标值构造成和box[0]一样的数据类型"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;题主可以试着写下,提供下思路:&lt;/p&gt;\n\n&lt;ul&gt;&lt;li&gt;读取文件 pd.read_excel()&lt;/li&gt;&lt;li&gt;筛选前10行, data.iloc[:10]&lt;/li&gt;&lt;li&gt;一个图表中多个系列和多子图的做法, 下面这个写法可以参考下&lt;/li&gt;&lt;/ul&gt;\n\n&lt;pre&gt;\n&lt;code&gt;# 一个图多个系列模板\nplt.subplots(figsize&amp;#61;(8,4))\nx &amp;#61; np.arange(len(data[&amp;#39;姓名&amp;#39;]))\nplt.bar(x - 0.35/2, data[&amp;#39;2018年&amp;#39;], width&amp;#61;0.35, label&amp;#61;&amp;#39;2018年&amp;#39;)\nplt.bar(x &amp;#43; 0.35/2, data[&amp;#39;2019年&amp;#39;], width&amp;#61;0.35, label&amp;#61;&amp;#39;2019年&amp;#39;)\nplt.ylabel(&amp;#39;销售额&amp;#39;)\nplt.xlabel(&amp;#39;姓名&amp;#39;)\nplt.title(&amp;#39;不同年份销售额&amp;#39;)\nplt.xticks(np.arange(len(data[&amp;#39;姓名&amp;#39;])), data[&amp;#39;姓名&amp;#39;], rotation&amp;#61;0, fontsize&amp;#61;10) \n\n# 多子图模板\nfig,axes &amp;#61; plt.subplots(2,2,figsize&amp;#61;(12,8))\ndata[&amp;#39;A&amp;#39;].plot.pie( ax &amp;#61; axes[0,0],autopct &amp;#61; &amp;#39;%1.1f%%&amp;#39;,colormap&amp;#61;&amp;#39;Blues&amp;#39;)\ndata[&amp;#39;B&amp;#39;].plot.pie( ax &amp;#61; axes[0,1],autopct &amp;#61; &amp;#39;%1.1f%%&amp;#39;,colormap&amp;#61;&amp;#39;Blues&amp;#39;)\ndata[&amp;#39;C&amp;#39;].plot.pie( ax &amp;#61; axes[1,0],autopct &amp;#61; &amp;#39;%1.1f%%&amp;#39;,colormap&amp;#61;&amp;#39;Reds&amp;#39;)\ndata[&amp;#39;D&amp;#39;].plot.pie( ax &amp;#61; axes[1,1],autopct &amp;#61; &amp;#39;%1.1f%%&amp;#39;,colormap&amp;#61;&amp;#39;Reds&amp;#39;)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Matplotlib统计绘图 创建一个Python脚本，命名为test1.py，完成以下功能：？", ["（希望能把运行结果图和py文件发出）感谢！", "\n\n", "（1）今有2018年1月前半个月的猪肉价格和牛肉价格数据，他们存在于一个Excel表格中，如下表所示。将其读入Python中并用一个数据框变量df来保存。分别绘制前10天的猪肉价格和牛肉价格走势图在同一个figure中，用一个2*1的子图分别绘制2018年1月前半个月的猪肉价格和牛肉价格走势图。", "\n\n", "\n\n", "日期", "\n\n", "猪肉价格", "\n\n", "牛肉价格", "\n\n", "2018/1/1", "\n\n", "11", "\n\n", "38", "\n\n", "2018/1/2", "\n\n", "12", "\n\n", "39", "\n\n", "2018/1/3", "\n\n", "11.5", "\n\n", "41.3", "\n\n", "2018/1/4", "\n\n", "12", "\n\n", "40", "\n\n", "2018/1/5", "\n\n", "12", "\n\n", "43", "\n\n", "2018/1/6", "\n\n", "11.2", "\n\n", "44", "\n\n", "2018/1/7", "\n\n", "13", "\n\n", "47", "\n\n", "2018/1/8", "\n\n", "12.6", "\n\n", "43", "\n\n", "2018/1/9", "\n\n", "13.5", "\n\n", "42.3", "\n\n", "2018/1/10", "\n\n", "13.9", "\n\n", "42", "\n\n", "2018/1/11", "\n\n", "13.8", "\n\n", "43.1", "\n\n", "2018/1/12", "\n\n", "14", "\n\n", "42", "\n\n", "2018/1/13", "\n\n", "13.5", "\n\n", "39", "\n\n", "2018/1/14", "\n\n", "14.5", "\n\n", "38", "\n\n", "2018/1/15", "\n\n", "14.8", "\n\n", "37.5", "\n\n", "（希望能把运行结果图和py文件发出）感谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这么长的代码&amp;#xff0c;建立个py文件执行&amp;#xff0c;不要一行一行的粘进控制台里&lt;br /&gt;报错说&amp;#xff0c;你的函数里面啥都不写&amp;#xff0c;这就是个语法错误&amp;#xff0c;函数里必须写东西&lt;br /&gt;而前面函数报错&amp;#xff0c;没有粘成功&amp;#xff0c;后面代码又加了缩进&amp;#xff0c;后面肯定也错了&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["望请教：在stata中使用python程序报错（缩进问题）", ["在stata16中python接口时的报错信息：", "（显示def语句和return语句的缩进有问题，但该程序可以在pycharm中正常运行。望指点，我不是很明白。）", "\n", "程序：", "\n", "\nimport....\n\ndef status(x):\n    return pd.", "Series", "([x.", "count", "(),x.", "min", "(),x.", "idxmin", "(),x.", "quantile", "(.", "25", "),x.", "median", "(),x.", "quantile", "(.", "75", "),x.", "mean", "(),x.", "max", "(),x.", "idxmax", "(),x.", "mad", "(),x.", "var", "(),x.", "std", "(),x.", "skew", "(),x.", "kurt", "()],index=[", "'总数'", ",", "'最小值'", ",", "'最小值位置'", ",", "'25%分位数'", ", ", "'中位数'", ",", "'75%分位数'", ",", "'均值'", ",", "'最大值'", ",", "'最大值位数'", ",", "'平均绝对偏差'", ",", "'方差'", ",", "'标准差'", ",", "'偏度'", ",", "'峰度'", "])\ncomcon=pd.", "read_excel", "(", "'C:\\\\Users\\\\86135\\\\Desktop\\\\计量经济学\\\\课程数据库\\\\2comcon.xlsx'", ")\ny=comcon.comcon\nx=comcon.avgdp\n", "print", "(comcon)\n\ndf = pd.", "DataFrame", "(np.", "array", "([x,y]).T, columns=[", "'x'", ",", "'y'", "])\n", "print", "(df.", "apply", "(status))\nwdata=df.", "apply", "(status)\nxwf=pd.", "ExcelWriter", "(", "'C:\\\\Users\\\\86135\\\\Desktop\\\\计量经济学\\\\课程数据库\\\\2comdescribe(每次运行要新的，记得换名称）.xlsx'", ", engine=", "'xlsxwriter'", ")\nwdata.", "to_excel", "(xwf,sheet_name=", "'data'", ",index=True)\nxwf.", "close", "()\n\nsns.", "pairplot", "(comcon,x_vars=", "'avgdp'", ",y_vars=", "'comcon'", ",kind=", "'reg'", ")\nplt.", "title", "(", "'scatter'", ")\nplt.", "show", "()\n\nx=sm.", "add_constant", "(x)\nmodel=sm.", "OLS", "(y,x)\nresults=model.", "fit", "()\n", "print", "(results.", "summary", "())\n", "print", "(comcon.", "corr", "())\n\nx=sm.", "add_constant", "(x)\nmodel=sm.", "OLS", "(y,x)\nresults=model.", "fit", "()\n", "print", "(results.", "summary", "())\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;过大的list列表不建议直接放内存里呢&amp;#xff0c;列表里不是所有的值都需要同时处理的话建议存储磁盘。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如何在Python中存储二维大列表", ["比如我现在会生成近千万个向量，每个向量都是100维的，我先前都是用列表存储的，即使我不断的改，可这个内存占用依然很高，模拟代码如下，几十个g一下就用完了，要怎么处理了，", "\n", "import numpy as ", "np", "\ny = []\ndef f():\n    ", "return", " ", "np", ".", "random", ".rand(", "100", ")\n", "for", " i ", "in", " ", "range", "(", "10000000", "):\n    y.", "append", "(f())\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;根据报错信息可以看出&amp;#xff0c;输入数据的类型为 torch.FloatTensor&amp;#xff0c;而模型参数的类型为 torch.cuda.FloatTensor&amp;#xff0c;两者不匹配导致出现了错误。这通常是因为在模型和输入数据之间存在设备&amp;#xff08;CPU和GPU&amp;#xff09;不匹配的情况。&lt;/p&gt;\n&lt;p&gt;在加载模型时&amp;#xff0c;可以指定 map_location 参数来将模型加载到CPU上&amp;#xff0c;即使模型最初在GPU上训练。可以尝试如下代码来解决这个问题&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attr\"&gt;model&lt;/span&gt; &amp;#61; torch.load(&lt;span class=\"hljs-string\"&gt;&amp;#39;save_weights/savename&amp;#39;&lt;/span&gt;, map_location&amp;#61;torch.device(&lt;span class=\"hljs-string\"&gt;&amp;#39;cpu&amp;#39;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;此外&amp;#xff0c;还需要确保输入数据的类型与模型的输入匹配&amp;#xff0c;可以使用 to 方法将输入数据移动到相同的设备上&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-selector-tag\"&gt;img&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;img&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.to&lt;/span&gt;(device)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;最后再运行代码看看是否能够成功。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["在模型训练的最后一步写测试代码时出现问题", ["在学习使用自己的数据训练RenNet模型的最后一步 写测试代码时出现的问题", "\n", "import", " os\n", "import", " torch\n", "import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n", "from", " tqdm ", "import", " tqdm\n", "from", " PIL ", "import", " Image\n", "import", " torch.nn.functional ", "as", " F\n", "from", " torchvision ", "import", " datasets\n", "from", " torchvision ", "import", " transforms\n\ndevice = torch.device(", "'cuda:0'", " ", "if", " torch.cuda.is_available() ", "else", " ", "'cpu'", ")\n\nimg_path = ", "r\"D:\\workspace\\demo\\output\\val\\三管塔\\44010650000000043119111511_20181119111521_AaoMTR.jpg\"", "\ndataset_dir = ", "'output'", "\ntest_path = os.path.join(dataset_dir, ", "'val'", ")\ntest_transform = transforms.Compose([transforms.Resize(", "256", "),\n                                     transforms.CenterCrop(", "224", "),\n                                     transforms.ToTensor(),\n                                     transforms.Normalize(\n                                         mean=[", "0.485", ", ", "0.456", ", ", "0.406", "],\n                                         std=[", "0.229", ", ", "0.224", ", ", "0.225", "])\n                                     ])\ntest_dataset = datasets.ImageFolder(test_path, test_transform)\n\nclasses = [", "\"抱杆\"", ", ", "\"不确定增高架\"", ", ", "\"单管塔\"", ", ", "\"地面支撑杆\"", ", ", "\"角钢塔\"", ", ", "\"楼面增高架\"", ", ", "\"美化树\"", ", ", "\"美化天线\"", ", ", "\"美化外罩\"", ",\n           ", "\"三管塔\"", ", ", "\"市政路灯杆\"", "]\nframe = Image.", "open", "(img_path)\nimg = test_transform(frame)\nimg = torch.unsqueeze(img,dim=", "0", ")\nmodel = torch.load(", "'save_weights/savename'", ")\nmodel = model.", "eval", "().to(device)\n\n", "with", " torch.no_grad():\n    ", "# 前向传播", "\n    outputs = model(img)\n    ", "# 只有一张图就挤压掉batch维度", "\n    outputs = torch.squeeze(outputs)\n    ", "# 计算图片属于4个类别的概率", "\n    predict = torch.softmax(outputs, dim=", "0", ")\n    ", "# 得到类别索引", "\n    predict_cla = torch.argmax(predict).numpy()\n\n", "# 获取最大预测类别概率", "\npredict_score = ", "round", "(torch.", "max", "(predict).item(), ", "4", ")\n", "# 获取预测类别的名称", "\n\npredict_name = classes[predict_cla]\n\n", "\n", "上边是我的代码（还没有写完）但是运行时出现的问题是", "\n", "Traceback (most recent call last):\n  ", "File", " ", "\"D:\\workspace\\demo\\测试.py\"", ", ", "line", " 35, ", "in", " <module>\n    outputs = model(img)\n  ", "File", " ", "\"C:\\Users\\12301\\.conda\\envs\\cj-env\\lib\\site-packages\\torch\\nn\\modules\\module.py\"", ", ", "line", " 1130, ", "in", " _call_impl\n    ", "return", " forward_call(*", "input", ", **kwargs)\n  ", "File", " ", "\"D:\\workspace\\demo\\Model.py\"", ", ", "line", " 73, ", "in", " forward\n    ", "out", " = self.conv1(x)\n  ", "File", " ", "\"C:\\Users\\12301\\.conda\\envs\\cj-env\\lib\\site-packages\\torch\\nn\\modules\\module.py\"", ", ", "line", " 1130, ", "in", " _call_impl\n    ", "return", " forward_call(*", "input", ", **kwargs)\n  ", "File", " ", "\"C:\\Users\\12301\\.conda\\envs\\cj-env\\lib\\site-packages\\torch\\nn\\modules\\conv.py\"", ", ", "line", " 457, ", "in", " forward\n    ", "return", " self._conv_forward(", "input", ", self.weight, self.", "bias", ")\n  ", "File", " ", "\"C:\\Users\\12301\\.conda\\envs\\cj-env\\lib\\site-packages\\torch\\nn\\modules\\conv.py\"", ", ", "line", " 453, ", "in", " _conv_forward\n    ", "return", " F.conv2d(", "input", ", weight, ", "bias", ", self.stride,\nRuntimeError: ", "Input", " ", "type", " (torch.FloatTensor) and weight ", "type", " (torch.cuda.FloatTensor) should be the same or ", "input", " should be a MKLDNN tensor and weight is a dense tensor\n", "\n", "我的思路是将模型加载的GPU上  但是试了一下百度的方法解决不了", "我的python版本是3.9的"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1、是不真实存在的&lt;br /&gt;2、Series和DataFrame&lt;br /&gt;3、不对&amp;#xff0c;[0 1 2 3]&lt;br /&gt;4、对&lt;br /&gt;5、对&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["数据分析 求解 怎么做", ["1、在数组中,切片和索引只是数据的观测,不是真实存在吗？", "2、Pandas中引入了两种新的数据类型结构:", "和", "3、arr=np.arange(8) print('索引结果为:',arr[:4] 索引结果为_4", " 对吗？", "4、Python中,3**3的运算结果为_27_对吗？", "5、阅读下面的代码, 程序的执行结果是( A)import numpy as nparr2 = np.array([[1, 2, 3, 4],[4, 5, 6, 7], [7, 8, 9, 10]]) print(arr2.shape)print(arr2.size)（3.0）", "A、 (3,4 12 )", "B、 (4,3 12 )", "C、 (2,4 6 )", "选A对吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;thresh1 &amp;#61; np.array([190, 0.35, 0.3]) # 目标的低阈值&lt;br /&gt;thresh2 &amp;#61; np.array([245, 1, 1]) # 目标的高阈值 这2行代码的问题&amp;#xff0c;thresh1.dtype为float64&amp;#xff0c;但是thresh2.dtype为int32&amp;#xff0c;类型不一致导致的错误。要么把thresh1里的元素都改成整数型&amp;#xff0c;要么把thresh2里的某一个元素改成浮点型&amp;#xff0c;比如thresh2 &amp;#61; np.array([245, 1, 1.0])&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["cv报错，cv2.inRange函数调用报错", ["问题遇到的现象和发生背景", "\n", "定位到目标图像区域", "\n", "问题相关代码，请勿粘贴截图", "\n", "img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV) # 转化为 HSV 格式", "thresh1 = np.array([190, 0.35, 0.3]) # 目标的低阈值", "thresh2 = np.array([245, 1, 1]) # 目标的高阈值", "img_1 = cv2.inRange(img_hsv, lowerb = thresh1, upperb = thresh2)", "cv2.imshow('原始图像', img) # 显示图像", "cv2.imshow('截取图像', img_1)", "cv2.waitKey(0)", "cv2.destroyAllWindows()", "\n", "运行结果及报错内容", "\n", "Traceback (most recent call last):", "File \"D:/Program Files/pythonProject233/6.py\", line 12, in", "img_1 = cv2.inRange(img_hsv, lowerb = thresh1, upperb = thresh2)", "cv2.error: OpenCV(4.5.5) D:\\a\\opencv-python\\opencv-python\\opencv\\modules\\core\\src\\arithm.cpp:1782: error: (-215:Assertion failed) lb.type() == ub.type() in function 'cv::inRange'"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;只要报错信息里出现了NoneType&amp;#xff0c;肯定是你有变量值是None了&lt;br /&gt;具体你这个&amp;#xff0c;报错说None不是可迭代的对象&lt;br /&gt;那肯定就是lines是None了呗&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python报错，霍夫变化 'NoneType' object is not iterable，如何解决", ["lines = cv2.HoughLines(edges, 1, np.pi / 180, 110)", "for line in lines:", "TypeError: 'NoneType' object is not iterable"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;list没有values属性&amp;#xff0c;如果y_train已被转换成了一个列表&amp;#xff0c;可用pd.Series再转换成一维数组结构&amp;#xff0c;就可用values属性。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;x&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;]\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(pd.Series(x).values)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["'list' object has no attribute 'values'", ["运行fasttext形成文本的时候，出现了下面的问题：", "\n", "# coding=utf-8", "\n", "import", " pandas ", "as", " pd\n", "import", " numpy ", "as", " np\n", "import", " fasttext\n", "from", " sklearn ", "import", " metrics\n\n", "with", " ", "open", "(", "'train_abstract.txt'", ",", "'w'", ",encoding=", "'utf-8'", ") ", "as", " f:\n    ", "for", " i ", "in", " ", "range", "(", "len", "(X_train.todense())):\n        str1 = ", "str", "(X_train.todense()[i])+", "\"\\t\"", "+", "\"__label__\"", "+", "str", "(y_train.values[i])+", "'\\n'", "\n        f.write(str1)\n\n", "with", " ", "open", "(", "'test_abstract.txt'", ",", "'w'", ",encoding=", "'utf-8'", ") ", "as", " f:\n    ", "for", " i ", "in", " ", "range", "(", "len", "(X_test)):\n        str1 = ", "str", "(X_test.values[i])+", "\"\\t\"", "+", "\"__label__\"", "+", "str", "(y_test.values[i])+", "'\\n'", "\n        f.write(str1)\n\n", "\n", "AttributeError                            Traceback (most recent ", "call", " ", "last", ")\n", "<ipython-input-38-1b98cdb96387>", " in ", "<module>", "()\n      ", "7", " with ", "open", "(", "'train_abstract.txt'", ",", "'w'", ",encoding=", "'utf-8'", ") ", "as", " ", "f", ":\n      ", "8", "     ", "for", " i in ", "range", "(", "len", "(X_train.todense())):\n----> ", "9", "         str1 = str(X_train.todense()[i])+", "\"\\t\"", "+", "\"__label__\"", "+str(y_train.", "values", "[i])+", "'\\n'", "\n     ", "10", "         ", "f", ".", "write", "(str1)\n     ", "11", " \n\nAttributeError: ", "'list'", " object ", "has", " ", "no", " attribute ", "'values'", "\n\n", "\n", "请教大家如何解决这个问题。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; warnings\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;swapRows&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;A, i, j&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n    interchange two rows of A\n    operates on A in place\n    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    tmp &amp;#61; A[i].copy()\n    A[i] &amp;#61; A[j]\n    A[j] &amp;#61; tmp\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;relError&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;a, b&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n    compute the relative error of a and b\n    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;with&lt;/span&gt; warnings.catch_warnings():\n        warnings.simplefilter(&lt;span class=\"hljs-string\"&gt;&amp;#34;error&amp;#34;&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; np.&lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(a - b) / np.&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(np.&lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(np.array([a, b])))\n        &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0.0&lt;/span&gt;\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;rowReduce&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;A, i, j, pivot&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n    reduce row j using row i with pivot pivot, in matrix A\n    operates on A in place\n    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    factor &amp;#61; A[j][pivot] / A[i][pivot]\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; k &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(A[j])):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; np.isclose(A[j][k], factor * A[i][k]):\n            A[j][k] &amp;#61; &lt;span class=\"hljs-number\"&gt;0.0&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            A[j][k] &amp;#61; A[j][k] - factor * A[i][k]\n\n\n&lt;span class=\"hljs-comment\"&gt;# stage 1 (forward elimination)&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;forwardElimination&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;B&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n    Return the row echelon form of B\n    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    A &amp;#61; B.copy().astype(&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;)\n    m, n &amp;#61; np.shape(A)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(m - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-comment\"&gt;# Let lefmostNonZeroCol be the position of the leftmost nonzero value&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# in row i or any row below it&lt;/span&gt;\n        leftmostNonZeroRow &amp;#61; m\n        leftmostNonZeroCol &amp;#61; n\n        &lt;span class=\"hljs-comment\"&gt;## for each row below row i (including row i)&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; h &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(i, m):\n            &lt;span class=\"hljs-comment\"&gt;## search, starting from the left, for the first nonzero&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; k &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(i, n):\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (A[h][k] !&amp;#61; &lt;span class=\"hljs-number\"&gt;0.0&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; (k &amp;lt; leftmostNonZeroCol):\n                    leftmostNonZeroRow &amp;#61; h\n                    leftmostNonZeroCol &amp;#61; k\n                    &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# if there is no such position, stop&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; leftmostNonZeroRow &amp;#61;&amp;#61; m:\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# If the leftmostNonZeroCol in row i is zero, swap this row&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# with a row below it&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# to make that position nonzero. This creates a pivot in that position.&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (leftmostNonZeroRow &amp;gt; i):\n            swapRows(A, leftmostNonZeroRow, i)\n        &lt;span class=\"hljs-comment\"&gt;# Use row reduction operations to create zeros in all positions&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# below the pivot.&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; h &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, m):\n            rowReduce(A, i, h, leftmostNonZeroCol)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; A\n\n\n&lt;span class=\"hljs-comment\"&gt;####################&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# If any operation creates a row that is all zeros except the last element,&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# the system is inconsistent; stop.&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;inconsistentSystem&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;A&lt;/span&gt;):\n    temp &amp;#61; forwardElimination(A)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(np.nonzero(temp[:, :-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]) !&amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(np.nonzero(temp)[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])\n\n\n&lt;span class=\"hljs-comment\"&gt;# 判断一个矩阵是否是不相容的,只能用numpy的nonzero方法&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;##原文链接&amp;#xff1a;https://blog.csdn.net/mr_jjpolarbear/article/details/88649587&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;rsmat&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;arbmat&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34; Convert an arbitrary matrix to a simplest matrix &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    arbmat &amp;#61; arbmat.astype(&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;)\n    row_number, column_number &amp;#61; arbmat.shape\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; row_number &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; arbmat[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; (arbmat / arbmat[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; arbmat\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        rc_number &amp;#61; &lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(row_number, column_number)\n        anarbmat &amp;#61; arbmat.copy()\n        r &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; n &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(rc_number):\n            s_row &amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; arbmat[r:row_number, n]:\n                s_row &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(i) &amp;gt; &lt;span class=\"hljs-number\"&gt;1e-10&lt;/span&gt;:\n                    anarbmat[r, :] &amp;#61; arbmat[s_row &amp;#43; r, :]\n                    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(r, row_number):\n                        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; j &amp;lt; s_row &amp;#43; r:\n                            anarbmat[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, :] &amp;#61; arbmat[j, :]\n                    arbmat &amp;#61; anarbmat.copy()\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(anarbmat[r, n]) &amp;gt; &lt;span class=\"hljs-number\"&gt;1e-10&lt;/span&gt;:\n                anarbmat[r, :] &amp;#61; anarbmat[r, :] / anarbmat[r, n]\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(row_number):\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i !&amp;#61; r:\n                        anarbmat[i, :] -&amp;#61; \\\n                            anarbmat[i, n] * anarbmat[r, :]\n            arbmat &amp;#61; anarbmat.copy()\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(arbmat[r, n]) &amp;lt; &lt;span class=\"hljs-number\"&gt;1e-10&lt;/span&gt;:\n                r &amp;#61; r\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n                r &amp;#61; r &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; m &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(column_number):\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(arbmat[-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, m]) &amp;gt; &lt;span class=\"hljs-number\"&gt;1e-10&lt;/span&gt;:\n                arbmat[-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, :] &amp;#61; arbmat[-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, :] / arbmat[-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, m]\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(row_number - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n                    arbmat[i, :] -&amp;#61; \\\n                        arbmat[i, m] * arbmat[-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, :]\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; arbmat\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;backsubstitution&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;B&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n    return the reduced row echelon form matrix of B\n    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; inconsistentSystem(B):\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; rsmat(B)\n\n\n&lt;span class=\"hljs-comment\"&gt;#####################&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 测试的值&lt;/span&gt;\na &amp;#61; np.array([[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;24&lt;/span&gt;], [&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;24&lt;/span&gt;], [&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;]])\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(backsubstitution(a))\n&lt;span class=\"hljs-comment\"&gt;# 最后的结果应该是[1,0,0,-8],[0,1,0,1],[0,0,1,10]&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python 中numpy的矩阵函数", ["通过python判断一个矩阵是否是不相容的,并且再写一个backsubstitution函数,来解出矩阵.判断是否是不相容(inconsistent)需要用numpy.nonzero方法", "\n", "import", " numpy ", "as", " np\n", "import", " warnings\n\n", "def", " ", "swapRows", "(", "A, i, j", "):\n    ", "\"\"\"\n    interchange two rows of A\n    operates on A in place\n    \"\"\"", "\n    tmp = A[i].copy()\n    A[i] = A[j]\n    A[j] = tmp\n\n", "def", " ", "relError", "(", "a, b", "):\n    ", "\"\"\"\n    compute the relative error of a and b\n    \"\"\"", "\n    ", "with", " warnings.catch_warnings():\n        warnings.simplefilter(", "\"error\"", ")\n        ", "try", ":\n            ", "return", " np.", "abs", "(a-b)/np.", "max", "(np.", "abs", "(np.array([a, b])))\n        ", "except", ":\n            ", "return", " ", "0.0", "\n\n", "def", " ", "rowReduce", "(", "A, i, j, pivot", "):\n    ", "\"\"\"\n    reduce row j using row i with pivot pivot, in matrix A\n    operates on A in place\n    \"\"\"", "\n    factor = A[j][pivot] / A[i][pivot]\n    ", "for", " k ", "in", " ", "range", "(", "len", "(A[j])):\n        ", "if", " np.isclose(A[j][k], factor * A[i][k]):\n            A[j][k] = ", "0.0", "\n        ", "else", ":\n            A[j][k] = A[j][k] - factor * A[i][k]\n\n\n", "# stage 1 (forward elimination)", "\n", "def", " ", "forwardElimination", "(", "B", "):\n    ", "\"\"\"\n    Return the row echelon form of B\n    \"\"\"", "\n    A = B.copy().astype(", "float", ")\n    m, n = np.shape(A)\n    ", "for", " i ", "in", " ", "range", "(m-", "1", "):\n        ", "# Let lefmostNonZeroCol be the position of the leftmost nonzero value ", "\n        ", "# in row i or any row below it ", "\n        leftmostNonZeroRow = m\n        leftmostNonZeroCol = n\n        ", "## for each row below row i (including row i)", "\n        ", "for", " h ", "in", " ", "range", "(i,m):\n            ", "## search, starting from the left, for the first nonzero", "\n            ", "for", " k ", "in", " ", "range", "(i,n):\n                ", "if", " (A[h][k] != ", "0.0", ") ", "and", " (k < leftmostNonZeroCol):\n                    leftmostNonZeroRow = h\n                    leftmostNonZeroCol = k\n                    ", "break", "\n        ", "# if there is no such position, stop", "\n        ", "if", " leftmostNonZeroRow == m:\n            ", "break", "\n        ", "# If the leftmostNonZeroCol in row i is zero, swap this row ", "\n        ", "# with a row below it", "\n        ", "# to make that position nonzero. This creates a pivot in that position.", "\n        ", "if", " (leftmostNonZeroRow > i):\n            swapRows(A, leftmostNonZeroRow, i)\n        ", "# Use row reduction operations to create zeros in all positions ", "\n        ", "# below the pivot.", "\n        ", "for", " h ", "in", " ", "range", "(i+", "1", ",m):\n            rowReduce(A, i, h, leftmostNonZeroCol)\n    ", "return", " A\n\n", "#################### ", "\n\n", "# If any operation creates a row that is all zeros except the last element,", "\n", "# the system is inconsistent; stop.", "\n", "def", " ", "inconsistentSystem", "(", "A", "):\n    ", "# 判断一个矩阵是否是不相容的,只能用numpy的nonzero方法", "\n\n\n\n", "def", " ", "backsubstitution", "(", "B", "):\n    ", "\"\"\"\n    return the reduced row echelon form matrix of B\n    \"\"\"", "\n\n\n\n", "#####################", "\n", "# 测试的值", "\na = np.array([[", "1", ", ", "2", ", ", "3", ",", "24", "], [", "5", ", ", "4", ", ", "6", ",", "24", "], [", "10", ", ", "9", ", ", "8", ",", "9", "]])\nbacksubstitution(a)\n", "# 最后的结果应该是[1,0,0,-8],[0,1,0,1],[0,0,1,10]", "\n\n", "\n", "只用写最后两个函数就好了,之前写完了"]], "Tag": "算法设计"}
{"Answer": "也许是matplotlib图片引擎的问题，windos下没问题\r\n![图片说明](https://img-ask.csdn.net/upload/201704/15/1492264086_209484.png)", "Konwledge_Point": "应对NP完全问题", "Question": ["matplotlib库在ubuntu下的一个bug？", ["当我在Ubuntu 16.10下使用matplotlib绘制以下程序的图形时：", "\n程序是：", "\n\n", "# -*- coding: utf-8 -*-\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 10, 1000)\ny = np.sin(x)\nz = np.cos(x**2)\n\nplt.figure(figsize=(8,4))\nplt.plot(x,y,label=\"$sin(x)$\",color=\"red\",linewidth=2)\nplt.plot(x,z,\"b--\",label=\"$cos(x^2)$\")\nplt.xlabel(\"Time(s)\")\nplt.ylabel(\"Volt\")\nplt.title(\"PyPlot First Example\")\nplt.ylim(-1.2,1.2)\nplt.legend()\nplt.show()\n\n", "\n\n", "这是官方给出的win下的标准输出：", "\n\n", "然而，我在Ubuntu 16.10下得到的输出却是：", "\n\n", "右上角蓝色虚线后应该是上图一样显示cosx的平方的，但实际得到的却不一样，这是为何？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;看你取到的df数据是不是含有其他非数值的列&amp;#xff0c;或者你索引的时候就只取各科目列就行&amp;#xff0c;warning只要不报错也没关系&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python使用pd.mean()函数后出现Warning，请问该如何解决？", ["import", " pandas ", "as", " pd\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " numpy ", "as", " np\ndf = pd.read_excel(", "r'成绩表.xlsx'", ")\nplt.rcParams[", "'font.sans-serif'", "]=[", "'SimHei'", "]                     ", "# 解决中文乱码", "\nlabels = np.array([", "'语文'", ",", "'数学'", ",", "'英语'", ",", "'物理'", ",", "'化学'", ",", "'生物'", "])      ", "# 标签", "\ndataLenth = ", "6", "       ", "# 数据长度", "\n", "# 计算女生、男生各科平均成绩", "\ndf1 = df[df[", "'性别'", "]==", "'女'", "].mean().", "round", "(", "2", ")\ndf2 = df[df[", "'性别'", "]==", "'男'", "].mean().", "round", "(", "2", ")\n", "print", "(df1-df2)\n\n", "\n", "warning信息：", "\n", "D:/", "06.", "Differential analysis.py:", "9", ": FutureWarning: Dropping ", "of", " nuisance ", "columns", " ", "in", " DataFrame reductions (", "with", " ", "'numeric_only=None'", ") ", "is", " deprecated; ", "in", " a future ", "version", " this will ", "raise", " TypeError.  ", "Select", " ", "only", " ", "valid", " ", "columns", " ", "before", " calling the reduction.\n  df1 = df[df[", "'性别'", "]==", "'女'", "].mean().round(", "2", ")\nD:/", "06.", "Differential analysis.py:", "10", ": FutureWarning: Dropping ", "of", " nuisance ", "columns", " ", "in", " DataFrame reductions (", "with", " ", "'numeric_only=None'", ") ", "is", " deprecated; ", "in", " a future ", "version", " this will ", "raise", " TypeError.  ", "Select", " ", "only", " ", "valid", " ", "columns", " ", "before", " calling the reduction.\n  df2 = df[df[", "'性别'", "]==", "'男'", "].mean().round(", "2", ")  \n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;matlab是高度优化的软件&amp;#xff0c;你的A在matlab里面甚至可以储存为1k以下&amp;#xff0c;要是它只用压缩存储的话&amp;#xff0c;那么存储的东西就是&lt;br /&gt;&amp;#xff08;1&amp;#xff09;矩阵大小&amp;#xff1a;3个整型数[62, 500, 200]&amp;#xff1b;&lt;br /&gt;&amp;#xff08;2&amp;#xff09;矩阵值&amp;#xff1a;1个双精度实型[0]&lt;br /&gt;就储存三个整形加一个双精度实型变量就OK了&amp;#xff0c;这是因为你的matlab把全零的矩阵给压缩了。&lt;br /&gt;python只是仿造matlab&amp;#xff0c;得其形未得其神&amp;#xff0c;储存得mat文件完全按照62×500×200个双精度实型变量来存储&amp;#xff0c;没有数据压缩&amp;#xff0c;所以储存空间特别大。你可以计算出来这么多双精度实型储存下来的0&amp;#xff0c;需要占用多少空间&amp;#xff0c;下面是计算结果&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;62&lt;/span&gt;*&lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;*&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;*&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;/&lt;span class=\"hljs-number\"&gt;1024&lt;/span&gt;^&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;%单位M\n\n&lt;span class=\"hljs-attribute\"&gt;ans&lt;/span&gt; &amp;#61;\n\n  &lt;span class=\"hljs-attribute\"&gt;47&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;302246093750000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;47.3M啊&amp;#xff0c;跟你说的python运行后生成得文件大小差不多。&lt;/p&gt;\n&lt;p&gt;当然&amp;#xff0c;matlab压缩存储是建立在有很多重复元素的基础上面&amp;#xff0c;如果你把zeros命令改了&amp;#xff0c;改成rand(随机0-1的数字)&amp;#xff0c;那么matlab生成的mat文件储存空间也会特别大&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;A &amp;#61; rand(&lt;span class=\"hljs-number\"&gt;62&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\nsave(&amp;#39;matlabA.mat&amp;#39;, &amp;#39;A&amp;#39; )\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/619573939036131.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;整整44.9M啊&amp;#xff01;&amp;#xff01;&lt;strong&gt;可见matlab只是优化了简单重复元素的存储空间&amp;#xff0c;到了不重复杂乱无章的数据时&amp;#xff0c;压缩方法也是会失效的。哈哈&lt;/strong&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python保存的.mat文件过大", ["同一个矩阵A，用Matlab生成的.mat文件只有22KB，", "用Python中sio.savemat函数生成的.mat文件却有48MB。", "这是为什么呢?", "Matlab代码：", "A  = zeros(62, 500, 200);", "save('matlabA.mat', 'A' )", "\n", "Python代码:", "import numpy as np", "import scipy.io as sio", "A  = np.zeros([62, 500, 200])", "sio.savemat('pythonA.mat', {'A':A})", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;# 你数据中target应该是个分类变量吧, 直接用可以处理分类变量的作图就可以\n\n# 用pandas, 颜色需要是数值\nx_dr.plot.scatter(x&amp;#61;&amp;#39;x轴变量&amp;#39;,y&amp;#61;&amp;#39;y轴变量&amp;#39;,c&amp;#61;&amp;#39;颜色变量&amp;#39;)\n\n# 方法2 如果颜色是分类变量\nimport seaborn as sns\nsns.scatterplot(x&amp;#61;&amp;#34;x轴变量&amp;#34;, # x轴\n                y&amp;#61;&amp;#34;y轴变量&amp;#34;,# y轴\n                hue&amp;#61;&amp;#34;颜色变量&amp;#34;,   # 颜色分类\n                palette&amp;#61;&amp;#39;Spectral_r&amp;#39;, # 调色盘\n                sizes&amp;#61;(10, 200),      # 大小区间\n                data&amp;#61;x_dr)\n# 方法3\nimport pandas_bokeh\nx_dr.plot_bokeh.scatter(\n    x&amp;#61;&amp;#34;x轴变量&amp;#34;,\n    y&amp;#61;&amp;#34;y轴变量&amp;#34;,\n    category&amp;#61;&amp;#34;颜色&amp;#34;,  # 作为分类的字段列\n    title&amp;#61;&amp;#34;&amp;#34;)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;参考下这个:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://ask.csdn.net/questions/7413848\"&gt;matplotlib画点-Python-CSDN问答&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["关于python中plt制图的问题，如何将Bunch中高维度的数组可视化下？", ["\nx_dr.shape", "\n\n", "\n(24261, 2)", "\n\n", "数据其中 target有12类", "\n\n", "N = 12", "\ny = np.random.rand(N)", "\n\n", "\nplt.scatter(", "x_dr[:,0],x_dr[:,1],c=y", ")\nplt.show()\n\n报错'c' argument has 2 elements, which is not acceptable for use with 'x' with size 24261, 'y' with size 24261.", "\n\n", "  我已经将原高维度数组降维至2维数组，但是绘图时依旧需要我提供24261大小的Color值，有办法将color值设为target类型大小么？", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "这是因为你在倒数第五行有一句‘print(predict3\\_train)’啊，所以输出了它的维度", "Konwledge_Point": "应对NP完全问题", "Question": ["python深度学习分类后的 混淆矩阵的意义", ["有大佬可以解释混淆矩阵上面还有（200，2）是什么意思吗，我设置的目标值为1或者2，但不知道为什么200后面是2，这个2和设置的1，2有关系吗", "\n\n", "import numpy as np\nimport urllib.request\nimport pandas as pd\nfrom pandas import DataFrame\nimport numpy as np\nimport pandas as pd\nimport xlrd\nfrom sklearn import preprocessing\ndef excel_to_matrix(path):\n    table = xlrd.open_workbook(path).sheets()[0]  # 获取第一个sheet表\n    row = table.nrows  # 行数\n    col = table.ncols  # 列数\n    datamatrix = np.zeros((row, col))\n    for x in range(col):\n        cols = np.matrix(table.col_values(x))\n\n        datamatrix[:, x] = cols\n    return datamatrix\n\n\ndatafile = u'C:\\\\Users\\\\asus\\\\PycharmProjects\\\\2\\\\venv\\\\Lib\\\\附件2：数据.xls'\ndatamatrix=excel_to_matrix(datafile)\ndata=pd.DataFrame(datamatrix)\n\ny=data[10]\ndata=data.drop(10,1)\nx=data\n\n\nfrom sklearn import preprocessing\nx_MinMax=preprocessing.MinMaxScaler()\n\ny=np.array(y).reshape((len(y),1))\n\nx=x_MinMax.fit_transform(x)\nx.mean(axis=0)\nimport random\nfrom sklearn.cross_validation import train_test_split\nnp.random.seed(2016)\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)\n\nfrom sknn.mlp import Classifier,Layer #预测模型\n\nfit3=Classifier(layers=[Layer('Tanh',units=38),Layer('Tanh',units=45),\n                       Layer('Tanh', units=28),\n                       Layer('Softmax')],\n               learning_rate=0.02,\n               random_state=2016,\n               n_iter=100,\n               dropout_rate=0.05,\n                batch_size=50,\n                learning_rule=u'adadelta',\n                learning_momentum=0.005\n\n\n               )\nfit3.fit(x_train,y_train)\n\nfrom sklearn.metrics import confusion_matrix\npredict3_train=fit3.predict(x_train)\nprint(predict3_train)\n\npredict3_test=fit3.predict(x_test)\nconfu3_test=confusion_matrix(y_test,predict3_test)\nprint(confu3_test)\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;那就做两次筛选&amp;#xff0c;  不用切片&lt;br /&gt;用 isna 或者 isnull 函数&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/173986659146172.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["Python读取csv文件如何计算某列为空的另一列的和", ["怎样得出K列为空E列的和呢", "\n", "\n", "import", " pandas as pd\n", "import", " numpy as np\n", "import", " xlwt\n\n", "count", " = ", "0", "\nworkbook = xlwt.Workbook()\nsheet = workbook.add_sheet(", "\"Sheet Name1\"", ")\n\ndf = pd.read_csv(", "\"D:RULER_LINE_ABSOLUTE_PAVEMENT_EGDE_-distinct.csv\"", ")\nhad = df[[", "\"feature_length\"", "]]\nshen = df[[", "\"report_length\"", "]]\n\nsheet.", "write", "(", "count", ", ", "0", ", ", "int", "(df.iloc[", "2", "][", "\"order_id\"", "]))\nsheet.", "write", "(", "count", ", ", "1", ", ", "float", "(np.sum(shen)))\nsheet.", "write", "(", "count", ", ", "2", ", ", "float", "(np.sum(had)))\n\nworkbook.save( ", "'sum.xls'", ")\n", "\n", "我这里只会得出两列的总和，如何能得出图中框里的数据之和呢", "因为要处理大量的类似文件，所以不能确定是几行几列，只能确定对应的是空"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;import numpy as np\nimport more_itertools as mi\n\n\na&amp;#61;np&lt;span class=\"hljs-selector-class\"&gt;.array&lt;/span&gt;(&lt;span class=\"hljs-selector-attr\"&gt;[1,2,3,4,5,6,7,8,9,10]&lt;/span&gt;)\nb&amp;#61;np&lt;span class=\"hljs-selector-class\"&gt;.array&lt;/span&gt;(&lt;span class=\"hljs-selector-attr\"&gt;[3,7]&lt;/span&gt;)\n\nres &amp;#61; list(mi&lt;span class=\"hljs-selector-class\"&gt;.split_when&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;, lambda x, y: x &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; b))\nresult &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[res[i]&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-selector-attr\"&gt;[b[i-1]&lt;/span&gt;] &amp;#43; res&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(len(res ))]\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(result)&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python代码也不会写 numpy", ["假如我有个区间", "a=np.array([1,2,3,4,5,6,7,8,9,10])", "b=np.array([3,7])", "我怎么才可以把向量a分成三类", "一类为a1=[1,2,3] 一类为a2=[3,4,5,6,7]，最后一类为a3=[7,8,9,10]呢", "就是怎么用b来分割a呀？", "求解答"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; PIL &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; Image\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; plt\nimg&amp;#61;np.&lt;span class=\"hljs-keyword\"&gt;array&lt;/span&gt;(Image.&lt;span class=\"hljs-keyword\"&gt;open&lt;/span&gt;(&amp;#34;F:\\\\PythonDemo\\\\face.jpg&amp;#34;).convert(&amp;#34;L&amp;#34;))\n# plt.imshow(img,plt.cm.gray)\n\nprint(img)\n&lt;span class=\"hljs-keyword\"&gt;row&lt;/span&gt;&amp;#61;(img.shape[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])\nprint(&lt;span class=\"hljs-keyword\"&gt;row&lt;/span&gt;)\nimg1&amp;#61;img[::&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]\nprint(img1)\n\nimg3 &amp;#61; Image.fromarray(np.fliplr(img))\nplt.imshow(img3,plt.cm.gray)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/560435908466148.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["请问如何在此基础上写代码实现图片的水平翻转", ["代码", "from PIL import Image", "import numpy as np", "import matplotlib.pyplot as plt", "img=np.array(Image.open(\"C:\\Users\\lenovo\\Pictures\\a\\女孩.jpg\").convert(\"L\"))", "plt.imshow(img,plt.cm.gray)", "print(img)", "row=(img.shape[0])", "print(row)", "img1=img[::-1]", "print(img1)", "plt.imshow(img,plt.cm.gray)"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你是想把数据框转成列表吗&amp;#xff1f;digits.values.tolist()&lt;/p&gt;\n&lt;p&gt;如果你是划分特征和标签&amp;#xff0c;可以不用转列表&amp;#xff0c;直接数据框也是可以的。比如&amp;#xff1a;&lt;br /&gt;X&amp;#61;digits[[&amp;#39;x1&amp;#39;,&amp;#39;x2&amp;#39;,&amp;#39;x3&amp;#39;,&amp;#39;x4&amp;#39;]]&lt;br /&gt;Y&amp;#61;digits.y&lt;br /&gt;x_train, x_test, y_train, y_test &amp;#61; train_test_split(X, Y,test_size&amp;#61;0.3)&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["请问这种情况该怎么解决", ["问题遇到的现象和发生背景", "\n", "运行的时候出现了这个情况：AttributeError: 'DataFrame' object has no attribute 'data'", "\n", "问题相关代码", "\n", "import numpy as np", "import pandas as pd", "from sklearn.datasets import load_digits #手写数字数据集", "from sklearn.preprocessing import LabelBinarizer #标签二值化处理", "from sklearn.model_selection import train_test_split #训练和测试集分隔", "from sklearn.metrics import classification_report, confusion_matrix", "import matplotlib.pyplot as plt", "\n", "  载入数据", "digits = pd.read_csv('F:QQ/FileRecv/MobileFile/信贷.csv')", "print(digits.shape) #结果：", "\n", "  输入的数据", "X = digits.data.tolist()", "\n", "运行结果及报错内容", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;根据您的问题描述&amp;#xff0c;要分析甲型流感病毒的氨基酸分子进化树&amp;#xff0c;那你首先要下载甲型流感病毒的相关数据下来&amp;#xff0c;确保自己电脑上安装了MLGA分析工具&amp;#xff0c;然后使用mlga工具进行分析。然后通过bootstrap法进行检验&amp;#xff0c;bootstrap检验也叫自举法检验&amp;#xff0c;就是放回式抽样统计法&amp;#xff0c;通过对数据集多次重复取样&amp;#xff0c;构建多个进化树&amp;#xff0c;用来检查给定树的分枝可信度。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["如下所示， 给出解答过程", ["甲型流感病毒（ Inifasuza A vinus ）含有8个基因片段。分别编码多个酶或蛋白质。请在 ncbi 网站上查询 IHINI 的 aeuraminidee (N1）的氨基酸序列和 cDNA 序列【或 leuuagghutinin ( HI ）的氰基酸序到和 cDNA 序列。或 tmacleogeotoim ( NP ）的氨基酸序列和 cNDA 序列，任选一个］，利用 MLGA 分析工具。绘制基于 NI 氨基酸序列（或 HI 氨基酸序列，或 NP 氨基酸配序列，任选一个）的分子进化树并用 bootstrap 法评价可面性。委求地出完些的分析过程和说明。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;不要用math啦&amp;#xff0c;math下面的sin只能对单独的值进行求正弦。请改用np.sin&lt;br /&gt;&lt;code class=\"language-javascript\"&gt;math.sin(x)&lt;/code&gt;改成&lt;code class=\"language-javascript\"&gt;np.sin(x)&lt;/code&gt;即可&lt;br /&gt;&lt;strong&gt;有帮助望采纳&lt;/strong&gt;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["用logspace和linspace计算正弦值，报错", ["\nimport ", "time", "\nimport numpy as np\nimport ", "math", "\n\nt2 = ", "time", ".", "time", "()          \ndef content_l_math():\n    ", "for", " i ", "in", " np.logspace(", "0", ",", "8", ",", "9", "):\n        x = np.arange(", "0", ",", "10", ",", "10", "/i)\n        ", "math", ".", "sin", "(x)\n        ", "print", "(", "\"取点数10^%d耗时->%s\"", "%(", "math", ".", "log", "(i,", "10", "),", "time", ".", "time", "()-t2))\n        ", "print", "(", "math", ".", "sin", "(x))\ncontent_l_math()\n", "\n", "出现", "Traceback (most recent call last):", "\n", "  File \"C:\\Users\\zzw918", ".spyder-py3\\未命名0.py\", line 12, in ", "    content_l_math()", "\n", "  File \"C:\\Users\\zzw918", ".spyder-py3\\未命名0.py\", line 9, in content_l_math", "    math.sin(x)", "\n", "TypeError: only size-1 arrays can be converted to Python scalars"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The default backend is specified in the &lt;code&gt;matplotlibrc&lt;/code&gt; file -- you could try changing it there.&lt;/p&gt;\n\n&lt;p&gt;It may also be that whatever environment you are running python in may already import matplotlib and specify the backend as part of the configuration. Also, &lt;a href=\"https://stackoverflow.com/questions/15398920/php-and-importing-pylab\"&gt;some&lt;/a&gt; post suggest the following line may be needed:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;os.environ[ 'MPLCONFIGDIR' ] = '/tmp/'\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["在Web应用程序服务器（php）中使用matplotlib时出现问题", ["\n\n", "I have a python program that starts with: ", "\n\n", "from optparse import OptionParser\nimport math \n#import wx\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pylab import *\nfrom numpy import *\nimport scipy as scipy\nfrom scipy import *\nfrom scipy import constants\nimport scipy.signal as signal\nimport matplotlib.pyplot as plt\n", "\n\n", "It gives me error when I try to open it with php.\nI have googled and apparently if I do this before importing pylab or pyplot:", "\n\n", "import matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt\n", "\n\n", "Problem should be solved. But the error I get is:", "\n\n", "  /usr/lib/pymodules/python2.7/matplotlib/__init__.py:923:     UserWarning: This call to matplotlib.use() has no effect\nbecause the the backend has already been chosen;\nmatplotlib.use() must be called *before* pylab, matplotlib.pyplot,\nor matplotlib.backends is imported for the first time\n", "\n\n", "Any idea what's going on??", "\n    "]], "Tag": "算法设计"}
{"Answer": "# 采纳率太差，如果希望得到更多帮助，请及时采纳\r\n\r\n\r\nlog路径的输出为止，不要写 c:\\，因为是相对路径，而冒号是不允许的。", "Konwledge_Point": "应对NP完全问题", "Question": ["InvalidArgumentError: Failed to create a directory: log/C:; Invalid argument这是什么原因呀", ["tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed to create a directory: log/C:; Invalid argument", "\n这个代码我改了一点就运行不了了，提示无法创建文件夹是什么原因？", "\n我在123文件夹里建立了TO文件夹里面也建立了log 但是还是报这个错误", "\n\n", "# train_model.py\n\nimport numpy as np\nfrom alexnet import alexnet\nWIDTH = 214\nHEIGHT = 132\nLR = 1e-3\nEPOCHS = 10\nMODEL_NAME = 'C:/Users/Administrator/Desktop/123/pygta5-car-fast-{}-{}-{}-epochs-300K-data.model'.format(LR, 'alexnetv2',EPOCHS)\n\nmodel = alexnet(WIDTH, HEIGHT, LR)\n\nhm_data = 22\nfor i in range(EPOCHS):\n    for i in range(1,hm_data+1):\n        train_data = np.load('C:/Users/Administrator/Desktop/123/training_data-{}-balanced.npy'.format(i))\n\n        train = train_data[:-100]\n        test = train_data[-100:]\n\n        X = np.array([i[0] for i in train]).reshape(-1,WIDTH,HEIGHT,1)\n        Y = [i[1] for i in train]\n\n        test_x = np.array([i[0] for i in test]).reshape(-1,WIDTH,HEIGHT,1)\n        test_y = [i[1] for i in test]\n\n        model.fit({'input': X}, {'targets': Y}, n_epoch=1, validation_set=({'input': test_x}, {'targets': test_y}), \n            snapshot_step=500, show_metric=True, run_id=MODEL_NAME)\n\n        model.save(MODEL_NAME)\n\n\n\n# tensorboard --logdir=foo:C:/path/to/log\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你在自己电脑上面用的是链表吗&amp;#xff1f;还是你讲list当做链表了&amp;#xff1f;你看看lecode里面提示你的ListNode的数据结构&amp;#xff0c;人家提供给你就是要求你用这个数据结构来完成&amp;#xff0c;你这写法就没用到链表指针&amp;#xff0c;都是list。没有提供len的方法&amp;#xff0c;你要么自己实现&amp;#xff0c;要么去遍历才能知道链表的长度。&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["LeeCode21题合并有序链表报错？", ["\n", "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nimport numpy as np\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        l=l1\n        m = len(l)-1\n        for i in l2:\n            m = m + 1\n            l = np.insert(l,m,i)\n\n        l = np.sort(l)\n        return l ", "\n\n", "在做LeeCode简单题目21合并两个有序链表……在pycharm上跑没有问题，在网页上报错：", "\n\n", "\n", "TypeError: object of type 'ListNode' has no len()\n    m = len(l)-1\nLine 10 in mergeTwoLists (Solution.py)\n    ret = Solution().mergeTwoLists(param_1, param_2)\nLine 42 in _driver (Solution.py)\n    _driver()\nLine 53 in <module> (Solution.py)", "\n\n", "疯了，感觉自己python学了个寂寞！大神求救！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;shape会返回一个元组,因为你的a只有一行,形状为3,但是出于保留元组格式,在3后面加了一个逗号输出&lt;br /&gt;(3)和(3,)在python中代表不同含义&lt;br /&gt;有帮助望采纳&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["numpy.array().shape的解释,如下描述", ["a=np", ".array", "(", "[1,1,1]", ")\n", "print", "(a.shape)", "\n", "\n", "如何解释输出结果：（3，）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第一段代码直接和第二段合并&amp;#xff0c;第一段去掉 if __name__语句&amp;#xff0c;将open(r&amp;#39;C:\\Users\\wxy\\Desktop\\re\\555.csv&amp;#39;,&amp;#39;r&amp;#39;,encoding&amp;#61;&amp;#39;utf-8&amp;#39;)读取的文件名&amp;#xff0c;对应于图一中输出的文件outfo即可。&lt;br /&gt;补充&amp;#xff1a;如果读取多个csv,合并写入一个有格式要求的csv中&amp;#xff0c;合并多个df,一次写入文件&amp;#xff0c;可用如下代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; os\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; re\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; datetime\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\n\nfilenames_in &amp;#61; &lt;span class=\"hljs-string\"&gt;r&amp;#39;C:\\Users\\1\\Desktop\\111&amp;#39;&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 输入文件的文件地址&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#filenames_out &amp;#61; r&amp;#39;C:\\Users\\2\\Desktop\\444&amp;#39;  # 新文件的地址&lt;/span&gt;\npathDir &amp;#61; os.listdir(filenames_in)\ndfs&amp;#61;pd.DataFrame()\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i,allDir &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;enumerate&lt;/span&gt;(pathDir):\n    child &amp;#61; re.findall(&lt;span class=\"hljs-string\"&gt;r&amp;#34;(.&amp;#43;?).csv&amp;#34;&lt;/span&gt;, allDir)  &lt;span class=\"hljs-comment\"&gt;# 正则的方式读取文件名&amp;#xff0c;去扩展名&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(child) &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:  &lt;span class=\"hljs-comment\"&gt;# 去掉没用的系统文件&lt;/span&gt;\n        newfile &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n        needdate &amp;#61; child  &lt;span class=\"hljs-comment\"&gt;#### 这个就是所要的文件名&lt;/span&gt;\n    domain1 &amp;#61; os.path.abspath(filenames_in)  &lt;span class=\"hljs-comment\"&gt;# 待处理文件位置&lt;/span&gt;\n    info &amp;#61; os.path.join(domain1, allDir)  &lt;span class=\"hljs-comment\"&gt;# 拼接出待处理文件名字&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# ------------数据处理过程---------------&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(info, &lt;span class=\"hljs-string\"&gt;&amp;#34;开始处理&amp;#34;&lt;/span&gt;)\n    df &amp;#61; pd.DataFrame(pd.read_csv(info))\n    dfs&amp;#61;dfs.append(df,ignore_index&amp;#61;&lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(dfs)\n&lt;span class=\"hljs-keyword\"&gt;with&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;open&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;r&amp;#39;C:\\Users\\1\\Desktop\\666\\222.csv&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;, encoding&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; f1:\n    f1.write(&lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; * &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;)\n    f1.write(&lt;span class=\"hljs-string\"&gt;&amp;#39;# i j Corrcoef(c) Dist&amp;#61;sqrt(2(1-c))\\n&amp;#39;&lt;/span&gt;)\n    f1.write(&lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; * &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;)    \n    dfs.to_csv(f1, encoding&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;,index&amp;#61;&lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;写入不同文件&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; os\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; re\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; datetime\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; pandas &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; pd\n\nfilenames_in &amp;#61; &lt;span class=\"hljs-string\"&gt;r&amp;#39;C:\\Users\\1\\Desktop\\111&amp;#39;&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 输入文件的文件地址&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#filenames_out &amp;#61; r&amp;#39;C:\\Users\\2\\Desktop\\444&amp;#39;  # 新文件的地址&lt;/span&gt;\npathDir &amp;#61; os.listdir(filenames_in)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i,allDir &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;enumerate&lt;/span&gt;(pathDir):\n    child &amp;#61; re.findall(&lt;span class=\"hljs-string\"&gt;r&amp;#34;(.&amp;#43;?).csv&amp;#34;&lt;/span&gt;, allDir)  &lt;span class=\"hljs-comment\"&gt;# 正则的方式读取文件名&amp;#xff0c;去扩展名&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(child) &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:  &lt;span class=\"hljs-comment\"&gt;# 去掉没用的系统文件&lt;/span&gt;\n        newfile &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n        needdate &amp;#61; child  &lt;span class=\"hljs-comment\"&gt;#### 这个就是所要的文件名&lt;/span&gt;\n    domain1 &amp;#61; os.path.abspath(filenames_in)  &lt;span class=\"hljs-comment\"&gt;# 待处理文件位置&lt;/span&gt;\n    info &amp;#61; os.path.join(domain1, allDir)  &lt;span class=\"hljs-comment\"&gt;# 拼接出待处理文件名字&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# ------------数据处理过程---------------&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(info, &lt;span class=\"hljs-string\"&gt;&amp;#34;开始处理&amp;#34;&lt;/span&gt;)\n    df &amp;#61; pd.DataFrame(pd.read_csv(info))\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(df)\n    \n    &lt;span class=\"hljs-keyword\"&gt;with&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;open&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;C:/Users/1/Desktop/666/&lt;span class=\"hljs-subst\"&gt;{i}&lt;/span&gt;.csv&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;, encoding&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; f1:\n        f1.write(&lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; * &lt;span class=\"hljs-number\"&gt;24&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;)\n        f1.writelines(&lt;span class=\"hljs-string\"&gt;&amp;#39;# i  j  Corrcoef(c)  Dist&amp;#61;sqrt(2(1-c))\\n&amp;#39;&lt;/span&gt;)\n        f1.write(&lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; * &lt;span class=\"hljs-number\"&gt;24&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;)    \n        df.to_csv(f1, encoding&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;,index&amp;#61;&lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;,header&amp;#61;&lt;span class=\"hljs-literal\"&gt;None&lt;/span&gt;,line_terminator&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["py csv文件按行分解输出和 py文件整合问题", ["问题一：如何以等量的间隔输出多个文件 例如 第一个文件输出1-21 第二个文件输出21-42 以此类推", "问题二：如何将下列两程序整合到一起", "\n", "import", " os\n", "import", " re\n", "import", " datetime\n", "import", " numpy ", "as", " np\n", "import", " pandas ", "as", " pd\n\n", "if", " __name__ == ", "'__main__'", ":\n    filenames_in = ", "r'C:\\Users\\wxy\\Desktop\\111'", "  ", "# 输入文件的文件地址", "\n    filenames_out = ", "r'C:\\Users\\wxy\\Desktop\\333'", "  ", "# 新文件的地址", "\n    pathDir = os.listdir(filenames_in)\n    ", "for", " allDir ", "in", " pathDir:\n        child = re.findall(", "r\"(.+?).csv\"", ", allDir)  ", "# 正则的方式读取文件名，去扩展名", "\n        ", "if", " ", "len", "(child) >= ", "0", ":  ", "# 去掉没用的系统文件", "\n            newfile = ", "''", "\n            needdate = child  ", "#### 这个就是所要的文件名", "\n        domain1 = os.path.abspath(filenames_in)  ", "# 待处理文件位置", "\n        info = os.path.join(domain1, allDir)  ", "# 拼接出待处理文件名字", "\n\n        ", "# ------------数据处理过程---------------", "\n        ", "print", "(info, ", "\"开始处理\"", ")\n        df = pd.DataFrame(pd.read_csv(info))\n        a = df.corr()\n        a = ", "round", "(a, ", "4", ")  ", "# print(round(a, 4))", "\n        b = a.applymap(", "lambda", " x: (", "2", " * (", "1", " - x)) ** ", "0.5", ")\n        b = ", "round", "(b, ", "4", ")\n        ", "# print(a)", "\n        ", "# print(b)", "\n        df0 = []\n        ", "for", " x ", "in", " a.index:\n            df0.append(a.loc[x, :])\n        c = pd.concat(df0, keys=a.index).to_frame().reset_index()\n        c.columns = [", "'i'", ", ", "'j'", ", ", "'Corrcoef(c)'", "]\n        df1 = []\n        ", "for", " x ", "in", " b.index:\n            df1.append(b.loc[x, :])\n        d = pd.concat(df1, keys=b.index).to_frame().reset_index()\n        d.columns = [", "'i'", ", ", "'j'", ", ", "'Dist=sqrt(2(1-c))'", "]\n        d = d.drop([", "'i'", ", ", "'j'", "], axis=", "1", ")\n        df = pd.concat([c, d], axis=", "1", ", join=", "'inner'", ", ignore_index=", "False", ",\n                       keys=", "None", ", levels=", "None", ", names=[", "'i'", ", ", "'j'", ", ", "'Corrcoef(c)'", ", ", "'Dist=sqrt(2(1-c))'", "],\n                       verify_integrity=", "False", ")\n        domain2 = os.path.abspath(filenames_out)  ", "# 处理完文件保存地址", "\n        outfo = os.path.join(domain2, allDir)  ", "# 拼接出新文件名字", "\n        df.to_csv(outfo, encoding=", "'utf-8'", ",index=", "False", ")\n        ", "print", "(info, ", "\"处理完\"", ")\n\nendtime = datetime.datetime.now()\n\n\n\n\n", "\n", "和", "\n", "open", "(", "r'C:\\Users\\wxy\\Desktop\\re\\555.csv'", ",", "'r'", ",encoding=", "'utf-8'", ") ", "as", " f, ", "open", "(", "r'C:\\Users\\wxy\\Desktop\\re\\666.csv'", ",", "'w'", ",encoding=", "'utf-8'", ") ", "as", " f1:\n    a=f.readlines()\n    f1.write(", "'#'", "*", "10", "+", "'\\n'", ")\n    f1.write(", "'# i  j Corrcoef(c) Dist=sqrt(2(1-c))\\n'", ")\n    f1.write(", "'#'", "*", "10", "+", "'\\n'", ")\n    ", "for", " line ", "in", " a:\n        f1.write(", "' '", ".join(line.split(", "','", ")) + ", "'\\n'", ")\n\n", "\n", "代码二是处理代码一输出出来的文件的 如能帮助一定采纳谢谢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;试试看&lt;a id=\"textarea_1639621078417_1639621337239_0\" target=\"_blank\"&gt;&lt;span class=\"md_link_url\"&gt;http://192.168.1.102:8080/?action&amp;#61;stream&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;你传一个html不是一个网页吗&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["YOLOv5无法成功读取树莓派通过mjpg传来的视频流", ["使用树莓派做下位机获取视频图像，用在同一局域网下的电脑获取视频流并以YOLO进行目标检测的处理。实操中直接将mjpg地址传给detect.py显示读取失败，遂尝试用opencv进行帧处理后传给yolo，亦失败。附源码。", "\n", "下为直接传递：", "\n", "if", " __name__", " == ", "'__main__':\n    parser = argparse.", "ArgumentParser()", "\n    parser.add", "_argument('--", "weights", "', ", "nargs", "='+', ", "type", "=", "str", ", ", "default", "='", "yolov5s", ".", "pt", "', ", "help", "='", "model", ".", "pt", " ", "path", "(", "s", ")", "')\n    parser.add", "_argument('--", "source", "', ", "type", "=", "str", ", ", "default", "='", "http", ":", "/", "/", "192.168.1.102:8080", "/", "stream", ".", "html", "', ", "help", "='", "source", "')", "  # file/folder, ", "0", " ", "for", " webcam\n    parser.add", "_argument('--", "img", "-", "size", "', ", "type", "=", "int", ", ", "default", "=640, ", "help", "='", "inference", " ", "size", " (", "pixels", ")", "')\n    parser.add", "_argument('--", "conf", "-", "thres", "', ", "type", "=", "float", ", ", "default", "=0.25, ", "help", "='", "object", " ", "confidence", " ", "threshold", "')", "\n    parser.add", "_argument('--", "iou", "-", "thres", "', ", "type", "=", "float", ", ", "default", "=0.45, ", "help", "='IOU ", "threshold", " ", "for", " NMS')", "\n    parser.add", "_argument('--", "device", "', ", "default", "='', ", "help", "='", "cuda", " ", "device", ", ", "i", ".", "e", ". 0 ", "or", " 0,1,2,3 ", "or", " ", "cpu", "')", "\n    parser.add", "_argument('--", "view", "-", "img", "', ", "action", "='", "store_true", "', ", "help", "='", "display", " ", "results", "')", "\n    parser.add", "_argument('--", "save", "-", "txt", "', ", "action", "='", "store_true", "', ", "help", "='", "save", " ", "results", " ", "to", " ", "*", ".", "txt", "')", "\n    parser.add", "_argument('--", "save", "-", "conf", "', ", "action", "='", "store_true", "', ", "help", "='", "save", " ", "confidences", " ", "in", " --", "save", "-", "txt", " ", "labels", "')", "\n    parser.add", "_argument('--", "nosave", "', ", "action", "='", "store_true", "', ", "help", "='", "do", " ", "not", " ", "save", " ", "images", "/", "videos", "')", "\n    parser.add", "_argument('--", "classes", "', ", "nargs", "='+', ", "type", "=", "int", ", ", "help", "='", "filter", " ", "by", " ", "class", ": --", "class", " 0, ", "or", " --", "class", " 0 2 3')", "\n    parser.add", "_argument('--", "agnostic", "-", "nms", "', ", "action", "='", "store_true", "', ", "help", "='", "class", "-", "agnostic", " NMS')", "\n    parser.add", "_argument('--", "augment", "', ", "action", "='", "store_true", "', ", "help", "='", "augmented", " ", "inference", "')", "\n    parser.add", "_argument('--", "update", "', ", "action", "='", "store_true", "', ", "help", "='", "update", " ", "all", " ", "models", "')", "\n    parser.add", "_argument('--", "project", "', ", "default", "='", "runs", "/", "detect", "', ", "help", "='", "save", " ", "results", " ", "to", " ", "project", "/", "name", "')", "\n    parser.add", "_argument('--", "name", "', ", "default", "='", "exp", "', ", "help", "='", "save", " ", "results", " ", "to", " ", "project", "/", "name", "')", "\n    parser.add", "_argument('--", "exist", "-", "ok", "', ", "action", "='", "store_true", "', ", "help", "='", "existing", " ", "project", "/", "name", " ", "ok", ", ", "do", " ", "not", " ", "increment", "')", "\n    opt = parser.parse", "_args()", "\n    print(opt)\n    check", "_requirements(", "exclude", "=('", "pycocotools", "', '", "thop", "')", ")\n\n    ", "with", " torch.no", "_grad()", ":\n        ", "if", " opt.update:  # update all models (", "to", " fix SourceChangeWarning)\n            ", "for", " opt.weights ", "in", " ", "['", "yolov5s", ".", "pt", "', '", "yolov5m", ".", "pt", "', '", "yolov5l", ".", "pt", "', '", "yolov5x", ".", "pt", "']", ":\n                detect", "()", "\n                strip", "_optimizer(", "opt", ".", "weights", ")", "\n        ", "else", ":\n            detect", "()", "\n\n\n\n", "\n", "下为帧处理传递", "\n", "url = ", "\"http://192.168.1.102:8080/stream.html\"", "\n\ndef download", "Img()", ":\n    global url\n    ", "with", " request.urlopen(url) ", "as", " f:\n        data = f.read", "()", "\n        img1 = np.frombuffer(data, np.uint8)\n        #print(", "\"img1 shape \"", ", img1.shape) # (", "83653", ",)\n        img_cv = cv2.imdecode(img1, cv2.IMREAD_ANYCOLOR)\n        return img_cv\n", "if", " __name__", " == ", "'__main__':\n    parser = argparse.", "ArgumentParser()", "\n    parser.add", "_argument('--", "weights", "', ", "nargs", "='+', ", "type", "=", "str", ", ", "default", "='", "models", "/", "yolov5s", ".", "pt", "', ", "help", "='", "model", ".", "pt", " ", "path", "(", "s", ")", "')\n    parser.add", "_argument('--", "source", "', ", "type", "=", "str", ", ", "default", "=", "\"\"", ", ", "help", "='", "source", "')", "  # file/folder, ", "0", " ", "for", " webcam\n    parser.add", "_argument('--", "img", "-", "size", "', ", "type", "=", "int", ", ", "default", "=640, ", "help", "='", "inference", " ", "size", " (", "pixels", ")", "')\n    parser.add", "_argument('--", "conf", "-", "thres", "', ", "type", "=", "float", ", ", "default", "=0.25, ", "help", "='", "object", " ", "confidence", " ", "threshold", "')", "\n    parser.add", "_argument('--", "iou", "-", "thres", "', ", "type", "=", "float", ", ", "default", "=0.45, ", "help", "='IOU ", "threshold", " ", "for", " NMS')", "\n    parser.add", "_argument('--", "device", "', ", "default", "='', ", "help", "='", "cuda", " ", "device", ", ", "i", ".", "e", ". 0 ", "or", " 0,1,2,3 ", "or", " ", "cpu", "')", "\n    parser.add", "_argument('--", "view", "-", "img", "', ", "action", "='", "store_true", "', ", "help", "='", "display", " ", "results", "')", "\n    parser.add", "_argument('--", "save", "-", "txt", "', ", "action", "='", "store_true", "', ", "help", "='", "save", " ", "results", " ", "to", " ", "*", ".", "txt", "')", "\n    parser.add", "_argument('--", "save", "-", "conf", "', ", "action", "='", "store_true", "', ", "help", "='", "save", " ", "confidences", " ", "in", " --", "save", "-", "txt", " ", "labels", "')", "\n    parser.add", "_argument('--", "nosave", "', ", "action", "='", "store_true", "', ", "help", "='", "do", " ", "not", " ", "save", " ", "images", "/", "videos", "')", "\n    parser.add", "_argument('--", "classes", "', ", "nargs", "='+', ", "type", "=", "int", ", ", "help", "='", "filter", " ", "by", " ", "class", ": --", "class", " 0, ", "or", " --", "class", " 0 2 3')", "\n    parser.add", "_argument('--", "agnostic", "-", "nms", "', ", "action", "='", "store_true", "', ", "help", "='", "class", "-", "agnostic", " NMS')", "\n\n", "\n", "考虑用opencv保存帧读取图像再用YOLO处理，担心延迟过高，未果，请求指教"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;应该和插件无关&amp;#xff0c;你先测试一个简单的程序&amp;#xff0c;来确认是不是软件安装的问题&amp;#xff0c;直接上cv2&amp;#xff0c;也有可能是加载太慢造成的。&lt;br /&gt;另外就是终端是不是被关闭了也需要检查。&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["在jupyter notebook为什么运行没反应，安装了nbextensions_configurator之后第一次运行有反应，显示img没定义，之后再运行就没反应了", ["\n", "import", " cv2\n", "import", " matplotlib.pyplot ", "as", " plt\n", "import", " numpy ", "as", " np\n%matplotlib inline\n", "img", "=cv2.imread('style.jpg')\n\n", "\n", "img", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;已解决&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["python在多线程用cv2的imshow显示不出窗口的问题", ["代码如下，运行之后第一次可以显示图片，关闭之后再打开就显示不了了，但从打印信息来看是可以运行显示的线程的", "\n", "\nimport cv2\nimport numpy as np\nimport threading\n", "from", " easygui import *\nimg1 = cv2.imread(", "'01.png'", ")\nimg2 = cv2.imread(", "'02.png'", ")\nimg_show=[", "True", "]\ndef img1_method():\n    ", "print", "(", "'打开img1'", ")\n    ", "while", " img_show[0]:\n       cv2.imshow(", "\"img1\"", ",img1)\n       cv2.waitKey(5)\n    ", "print", "(", "'关闭img1'", ")\ndef img2_method():\n    ", "print", "(", "'打开img2'", ")\n    ", "while", " img_show[0]:\n       cv2.imshow(", "\"img2\"", ",img2)\n       cv2.waitKey(5)\n    ", "print", "(", "'关闭img2'", ")\ndef open_close():\n    ", "while", " ", "True", ":\n        choices = [", "'[1]打开'", ", ", "'[2]关闭'", ", ", "'[3]退出'", "]\n        ", "choice", "=buttonbox(msg='请选择', ", "title", "=", "'cv2测试'", ", ", "choices", "=choices,\n                  ", "default_choice", "=choices[2], ", "cancel_choice", "=choices[2], ", "callback", "=None, ", "run", "=", "True", ")\n        ", "choose", "=choices.index(choice)+1\n        ", "if", " ", "choose", "==1:\n            img_show[0]=", "True", "\n            threading.Thread(", "target", "=img1_method).start()\n            threading.Thread(", "target", "=img2_method).start()\n        elif ", "choose", "==2:\n            img_show[0]=", "False", "\n        ", "else", ":\n            break\n\nthreading.Thread(", "target", "=img1_method).start()\nthreading.Thread(", "target", "=img2_method).start()\nthreading.Thread(", "target", "=open_close).start()\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;过拟合了可能&lt;/p&gt;", "Konwledge_Point": "应对NP完全问题", "Question": ["利用梯度下降训练参数", ["error是一个和方差sse，如下所示，一开始随着训练次数的增加sse确实在减少，但是到了差不多300次的时候又开始增加了，这是为啥，如下是我写的梯度下降，损失函数如下", "\n", "loss", " = np.square(np.dot(u_vector, i_vector) - real_rating) - REG * (u_vector * u_vector + i_vector * i_vector)\n\n", "\n", "实现的梯度下降如下", "\n", "for epoch ", "in", " range(LFM_EPOCHS):\n    for uid, iid, real_rating ", "in", " train_data.itertuples(", "index=False):", "\n        ", "u_vector", " = user_matrix[uid]\n        ", "i_vector", " = movie_matrix[iid]\n        ", "err", " = np.float32(real_rating - np.dot(u_vector, i_vector))  ", "# 真实值和预测值的偏差", "\n        ", "# 更新梯度", "\n        ", "u_vector_cache", " = u_vector  ", "# 下面更新用户向量会覆盖掉，而更新物品向量需要用户向量旧值，所以这里得保存旧值", "\n        u_vector += LEARN * (err * i_vector - REG * u_vector)  ", "# 这是一个numpy对象", "\n        i_vector += LEARN * (err * u_vector_cache - REG * i_vector)  ", "# 这是一个Numpy对象", "\n        user_matrix[uid] = u_vector\n        movie_matrix[iid] = i_vector\n    ", "if", " epoch % ", "10", " == ", "0", ":  ", "# 每10次训练，计算一次sse", "\n        test_1(epoch)\n\n", "\n", "\n", "\n"]], "Tag": "算法设计"}
