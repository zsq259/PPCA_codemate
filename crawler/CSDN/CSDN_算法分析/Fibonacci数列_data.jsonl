{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;int(input())\n&lt;span class=\"hljs-attribute\"&gt;f1&lt;/span&gt;&amp;#61;0\n&lt;span class=\"hljs-attribute\"&gt;f2&lt;/span&gt;&amp;#61;1\nl&amp;#61;[str(f1),str(f2)]\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(2,n):\n    &lt;span class=\"hljs-attribute\"&gt;f3&lt;/span&gt;&amp;#61;f1&amp;#43;f2\n    f1,&lt;span class=\"hljs-attribute\"&gt;f2&lt;/span&gt;&amp;#61;f2,f3\n    l.append(str(f3))\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;.join(l))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列,这个数列从第3项开始，每一项都等于前两项之和。求斐波那契数列的前n项。", ["斐波那契数列，指的是这样一个数列，这个数列从第3项开始，每一项都等于前两项之和。求斐波那契数列的前n项。", "\n", "输入格式:", "输入一个n（n>=3）的值。", "\n", "输出格式:", "输出斐波那契数列的前n项。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f[&lt;span class=\"hljs-number\"&gt;10001&lt;/span&gt;];\n    f[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    f[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;i &amp;lt;&amp;#61; n;i&amp;#43;&amp;#43;){\n        f[i] &amp;#61; f[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43;f[i&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;];\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,f[n]);\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列例题11", ["斐波那契数列是指这样的数列：数列的第一个和第二个数都为 11，接下来每个数都等于前面 22 个数之和。", "\n", "给出一个正整数 kk，要求斐波那契数列中第 kk 个数是多少。", "\n", "输入格式", "输入一行，包含一个正整数 kk。（1 \\le k \\le 461≤k≤46）", "\n", "输出格式", "输出一行，包含一个正整数，表示斐波那契数列中的第 kk 个数。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;# -*- coding: UTF-8 -*-\n\n# Filename : test.py\n\n# 获取用户输入数据\nnterms &amp;#61; int(input(&amp;#39;请输入一个正整数:&amp;#39;))\n\n# 第一和第二项\nn1 &amp;#61; 1\nn2 &amp;#61; 1\ncount &amp;#61; 2\n\n# 判断输入的值是否合法\nif nterms &amp;lt;&amp;#61; 0:\n    print(&amp;#34;请输入一个正整数。&amp;#34;)\nelif nterms &amp;#61;&amp;#61; 1:\n    print(n1)\nelse:\n    print(n1, n2, end&amp;#61;&amp;#34; &amp;#34;)\n    while count &amp;lt; nterms:\n        nth &amp;#61; n1 &amp;#43; n2\n        print(nth, end&amp;#61;&amp;#34; &amp;#34;)\n        # 更新值\n        n1 &amp;#61; n2\n        n2 &amp;#61; nth\n        count &amp;#43;&amp;#61; 1&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"178\" src=\"https://img-ask.csdnimg.cn/upload/1624104517596.png\" width=\"912\" /&gt; &lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["Python斐波那契数列", ["斐波那契数列又称为兔子数列，因数学家列昂纳多·斐波那契以兔子繁殖为例子引入，这个数列中的数据满足以下公式：", "\nF(1)=1, F(2)=1, F(n)= F(n-1) + F(n-2) （n>=3，n∈N*）", "\n要求编写程序，实现根据用户输入的数字输出斐波那契数列的功能。", "\n ", "\n基本要求：根据题目描述中的公式，可以定义一个递归函数fibonacci (n)，该函数中n表示指定的斐波那契数，边界条件为n=1或n=2，递归公式为fibonacci (n-1)+ fibonacci (n-2)。", "\n\n", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; Fibonacci[&lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;];\n    Fibonacci[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    Fibonacci[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;39&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        Fibonacci[i] &amp;#61; Fibonacci[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; Fibonacci[i - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;];\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;39&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, Fibonacci[i]);\n        j&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;) {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n            j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["编写程序计算Fibonacci数列的前40项。（要求每行输出4个数）", ["include <stdio.h>", "\n", "int main()", "{", "    //在此处定义一个int类型的数组Fibonacci，大小为40", "    Fibonacci[0]=0;", "    Fibonacci[1]=1;", "    for()//在括号内填入从数组下标2到数组末尾的循环", "    {", "        //在此处填入计算当前下标下的斐波那契数的计算式", "    }", "    int j=1;", "    for(int i=0;i<=39;i++)", "    {", "        printf(\"%d  \",Fibonacci[i]);", "        j++;", "        if(j==4){", "            printf(\"\\n\");", "            j=1;", "        }", "    }", "    return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;使用分支条件一一判断当第几项该返回什么值即可实现递归求斐波那契数列某一项的值&amp;#xff0c;依据你给的代码及例子&amp;#xff0c;修改如下&amp;#xff1a;&lt;br /&gt;&lt;br /&gt; 参考链接&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/99145\" id=\"textarea_1666784632886_1666784645935_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;斐波那契数列_百度百科&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; F(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n);\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main(void){\n    \n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;,i;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    \n    &lt;span class=\"hljs-regexp\"&gt;//prin&lt;/span&gt;tf(&lt;span class=\"hljs-string\"&gt;&amp;#34;n&amp;#61;%d\\n&amp;#34;&lt;/span&gt;,n);\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;){ &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;从数列的第&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;项开始&amp;#xff0c;到输入的第n项结束 \n        &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;&amp;#61;F(i);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    \n}\n//https:&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;baike.baidu.com/item/%E6%96%9&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;%E5%88%97/&lt;span class=\"hljs-number\"&gt;99145&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; F(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n){\n    \n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;n&amp;#61;%d\\n&amp;#34;&lt;/span&gt;,n);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){ &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;如果是数列的第一项&amp;#xff0c;则返回&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; \n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;){ &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;如果是数列的第二项&amp;#xff0c;则返回&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; \n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{  &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;如果是数列的其他项&amp;#xff0c;则返回前面两项数列的和 \n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; F(n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&amp;#43;F(n-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n    }\n    \n\n}\n\n\n\n \n\n\n\n \n \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/899026487666192.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["输入整数N，打印Fibonacci数列的前N项，用递归函数", ["输入整数N，打印Fibonacci数列打印前N项", "测试输入7", "预期1 1 2 3 5 8 13 21"]], "Tag": "算法设计"}
{"Answer": "static变量和递归两者不要同时用\r\n\r\n用static的写法\r\n```\r\n#include &lt;iostream&gt;\r\n#include &lt;iomanip&gt;\r\nusing namespace std;\r\nint Fibonacci(int n)\r\n{\r\n\tstatic int a = 1;\r\n\tstatic int b = 1;\r\n\tif (n == 1 || n == 2) return 1;\r\n\tint c = a + b;\r\n\ta = b;\r\n\tb = c;\r\n\treturn c;\r\n}\r\nint main () {\r\n\tint n;\r\n\tcin&gt;&gt;n; \r\n\tfor(int i=1;i&lt;=n;i++){\r\n\tcout&lt;&lt;setw(10)&lt;&lt;setiosflags(ios::left)&lt;&lt;Fibonacci(i);\r\n\tif (i%4==0) cout&lt;&lt;endl;\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n```\r\n用递归的写法\r\n\r\n```\r\n#include &lt;iostream&gt;\r\n#include &lt;iomanip&gt;\r\nusing namespace std;\r\nint Fibonacci(int n)\r\n{\r\n\tif (n == 1 || n == 2) return 1;\r\n\treturn Fibonacci(n - 2) + Fibonacci(n - 1);\r\n}\r\nint main () {\r\n\tint n;\r\n\tcin&gt;&gt;n; \r\n\tfor(int i=1;i&lt;=n;i++){\r\n\tcout&lt;&lt;setw(10)&lt;&lt;setiosflags(ios::left)&lt;&lt;Fibonacci(i);\r\n\tif (i%4==0) cout&lt;&lt;endl;\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n```", "Konwledge_Point": "Fibonacci数列", "Question": ["6-5 输出Fibonacci数列的前n项 (15分)", ["已知Fibonacci数列的规律是1，1，2，3，5，8，…，即数列的前两项是1，其后的每一项都是其前两项的和。输出Fibonacci数列的前n（1<=n<=40）项。要求定义并调用含静态变量的函数Fibonacci(n)计算Fibonacci数列的第n项。", "\n输入格式:", "\n        输入n值", "\n输出格式:", "\n        以每行4个的格式输出Fibonacci数列的前n项。每项占10位列宽并左对齐。", "\n 我看不出来我的问题，还请哥哥们指教：", "\n#include ", "\n#include ", "\nusing namespace std;", "\nint f(int n)", "\n{", "\n    static int y;", "\n    if(n==1)", "\n     y=1;", "\n    if(n==2)", "\n     y=1;", "\n    else ", "\n     y=y+f(n-2);", "\n     return y; ", "\n\n", "}", "\nint main()", "\n{", "\n    int n,j=1;", "\n    cin>>n;", "\n    for(int i=1;i<=n;i++){", "\n        cout<<setw(10)<<setiosflags(ios::left)<<f(n);", "\n    j++;", "\n    while (j%4==0) cout<<endl;", "\n    }", "\n    return 0;", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\npublic &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; main(&lt;span class=\"hljs-built_in\"&gt;String&lt;/span&gt;[] args) {\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[] arr &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; arr.length; i&amp;#43;&amp;#43;) {\n            arr[i] &amp;#61; count(i);\n        }\n\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; : arr) {\n            System.out.&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;);\n        }\n    }\n\n    public &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; count(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) || (&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; count(&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#43; count(&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["用java数组求斐波那契数列前20项", ["题目描述", "创建一个数组，用来存放斐波拉契数列（0、1、1、2、3、5、8、13、21、34、……)的前20项，然后遍历数组，将该数列显示出来。", "\n", "输入描述", "无", "\n", "输出描述", "斐波拉契数列的前20项，项与项之间用空格分隔", "\n", "输出样例", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;n&amp;#61;int(&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;())\na&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[1,1]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,n):\n    &lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[i-1]&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[i-2]&lt;/span&gt;)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;.join([str(i)&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; a]))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["python求斐波那契数列Ⅰ，求前n项，n的值从键盘输入", ["求斐波纳契（Fibonacci）数列：1，1，2，3，5， 8的前n项，n的值从键盘输入"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\nl &amp;#61; []\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-keyword\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; or i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        l.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        l.&lt;span class=\"hljs-built_in\"&gt;append&lt;/span&gt;(l[&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;]&amp;#43;l[&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;])\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-keyword\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(l)):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) % &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(l[i])\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(l[i], end&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["编程显示Fibonacci数列", ["编程显示Fibonacci数列：1、1、2、3、5、8……的前20项。要求每行显示5项。"]], "Tag": "算法设计"}
{"Answer": "首先给出一个定理吧：\r\n(a+b)%d=(a%d+b%d)%d.\r\n所以如果你把每一次的运算修改成\r\na[i] = (a[i - 1] + a[i - 2])%10007;\r\n就会保证a[i]的数值恒在int范围内，并且可以支持比较大的n运行。", "Konwledge_Point": "Fibonacci数列", "Question": ["Fibonacci数列求第n项值，当n的数值比较大时，结果会变成负数，请问有没有更好的解决方法？如下，我在求Fibonacci数列求第n项值除以10007的余数，当输入的n为几十，结果就是负数了。", ["#define N 100000", "\n...", "\n\n", "int main()", "\n{", "\n    long qiujiecheng(long n);", "\n    long n;", "\n    scanf_s(\"%ld\", &n);", "\n    n = qiujiecheng(n);", "\n    printf(\"%ld\", n);", "\n    if (n < 10007)", "\n    {", "\n        printf(\"%d\", n);", "\n    }", "\n    else {", "\n        n %= 10007;", "\n        printf(\"%ld\", n);", "\n    }", "\n}", "\nlong qiujiecheng(long n)", "\n{", "\n    static int a[N];", "\n    a[1] = a[0] = 1;", "\n    for (int i = 2; i < n; i++)", "\n    {", "\n        a[i] = a[i - 1] + a[i - 2];", "\n    }", "\n    return a[n - 1];", "\n}"]], "Tag": "算法设计"}
{"Answer": "非递归实现：\r\n```\r\nint fb(int a1,int a2,int n);\r\n{\r\n\tint a[10000],s,i;\r\n\ta[0]=a1;\r\n\ta[1]=a2;\r\n\ts=a[0]+a[1];\r\n\tfor(i=2;i&lt;n;i++){\r\n\t\ta[i]=a[i-1]+a[i-2];\r\n\t\ts+=a[i];\r\n\t}\r\n\treturn s;\r\n}\r\n```\r\n递归实现：\r\n\r\n```\r\n#include\"stdio.h\"\r\nint fb(int a1,int a2,int s,int n); \r\nint main()\r\n{\r\n    int a,b,n,s;\r\n    scanf(\"%d%d%d\",&amp;a,&amp;b,&amp;n);\r\n    s=fb(a,b,a+b,n);\r\n    printf(\"%d\\n\",s);\r\n}\r\n\r\nint fb(int a1,int a2,int s,int n){\r\n\tint t=a1+a2;\r\n\tif(n==2) return s;\r\n    s=t+fb(a2,t,s,n-1);\r\n    return s;\r\n}\r\n```", "Konwledge_Point": "Fibonacci数列", "Question": ["求解答！C语言-斐波那契数列前n项和问题", ["斐波那契数列前n项和问题", "\n\n", "如果数列的前前两项不为1，而是a1和a2，那应该怎么设计这个函数呢？", "\n\n", "#include\"stdio.h\"\nint fb(int a1,int a2,int n); \nint main()\n{\n    int a,b,n,s;\n    scanf(\"%d%d%d\",&a,&b,&n);\n    s=fb(a,b,n);\n    printf(\"%d\\n\",s);\n}\n", "\n\n", "int fb(int a1,int a2,int n);\n{\n\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#请定义一个函数返回斐波那契数列的第n项&amp;#xff0c;并输出斐波那契数列的前10项。&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;fib&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; n\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; fib(n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#43; fib(n-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n\nn &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;斐波那契数列的第n项:&amp;#39;&lt;/span&gt;))\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;斐波那契数列的第{}项:{}&amp;#34;&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;format&lt;/span&gt;(n,fib(n)))\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(fib(i))\n    \n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["请定义一个函数返回斐波那契数列的第n项，并输出斐波那契数列的前10项。", ["请定义一个函数返回斐波那契数列的第n项，并输出斐波那契数列的前10项。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Fibonacci&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; *x, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n    {\n        *x &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; a, b;\n    &lt;span class=\"hljs-built_in\"&gt;Fibonacci&lt;/span&gt;(&amp;amp;a, n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;Fibonacci&lt;/span&gt;(&amp;amp;b, n - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n    *x &amp;#61; a &amp;#43; b;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; a, sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    cin &amp;gt;&amp;gt; n;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n    {\n        a &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;Fibonacci&lt;/span&gt;(&amp;amp;a, i);\n        &lt;span class=\"hljs-comment\"&gt;// cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;#34; &amp;#34;;&lt;/span&gt;\n        sum &amp;#43;&amp;#61; a;\n    }\n    &lt;span class=\"hljs-comment\"&gt;// cout &amp;lt;&amp;lt; endl;&lt;/span&gt;\n    cout &amp;lt;&amp;lt; sum;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["采用地址传递的方式编写一个递归函数，求斐波那契数列的第N项，并调用此函数求这个数列前N项的和", ["如何采用地址传递的方式", "编写一个递归函数，求斐波那契数列的第N项，并调用此函数求这个数列前N项的和", "\n", "地址传递与递归如何同时使用"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num[&lt;span class=\"hljs-number\"&gt;45&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m,k;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    num[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    num[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;45&lt;/span&gt;;i&amp;#43;&amp;#43;)&lt;span class=\"hljs-comment\"&gt;//算出斐波那契数列前45项&lt;/span&gt;\n    {\n        num[i]&amp;#61;num[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43;num[i&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;];\n    }\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;m,&amp;amp;k);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(m&amp;lt;&amp;#61;k&amp;amp;&amp;amp;m&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;amp;&amp;amp;k&amp;lt;&lt;span class=\"hljs-number\"&gt;45&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//满足条件计算和&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;m&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;lt;k;i&amp;#43;&amp;#43;)\n        {\n            sum&amp;#43;&amp;#61;num[i];\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;sum &amp;#61; %d&amp;#34;&lt;/span&gt;,sum);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;ERROR&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["利用数组生成斐波那契数列（1,1,2,3,.…）的前45项，然后求出 m 到 k 项之和，(0< m <= k <45)，包括 m 和 k 项的值。", ["利用数组生成斐波那契数列（1,1,2,3,.…）的前45项，然后求出 m 到 k 项之和，(0< m <= k <45)，包括 m 和 k 项的值。( m , k 指项，数组的下标是从0开始的，即第1项为 a [0])"]], "Tag": "算法设计"}
{"Answer": "char数组, 可以显示到100位\r\n\r\n如果感觉效率差可以用动态规划改一下\r\n\r\n```\r\n#include &lt;iostream&gt;\r\n#include &lt;algorithm&gt;\r\nusing namespace std;\r\n\r\nclass Number {\r\nprivate:\r\n\tchar storage[100];\r\n\tint length;\r\n\r\npublic:\r\n\tNumber(int n) {\r\n\t\tfor (int i = 0; i &lt; 100; i++) {\r\n\t\t\tthis-&gt;storage[i] = 0;\r\n\t\t}\r\n\t\tthis-&gt;length = 0;\r\n\r\n\t\tint cnt = 0;\r\n\t\tfor (; n &gt; 0; cnt++) {\r\n\t\t\tthis-&gt;storage[cnt] = n % 10;\r\n\t\t\tn = (n - this-&gt;storage[cnt]) / 10;\r\n\t\t}\r\n\t\tthis-&gt;length = cnt;\r\n\t}\r\n\r\n\tint GetLength() {\r\n\t\treturn this-&gt;length;\r\n\t}\r\n\r\n\tint GetDigit(int index) {\r\n\t\treturn this-&gt;storage[index];\r\n\t}\r\n\r\n\tvoid Print() {\r\n\t\tfor (int i = this-&gt;length - 1; i &gt;= 0; i--) {\r\n\t\t\tcout &lt;&lt; int(this-&gt;storage[i]);\r\n\t\t}\r\n\t\tcout &lt;&lt; endl;\r\n\t}\r\n\r\n\tvoid Add(Number that) {\r\n\t\tint length = max(this-&gt;length, that.GetLength());\r\n\t\tfor (int i = 0; i &lt; length; i++) {\r\n\t\t\tint sum = this-&gt;storage[i] + that.GetDigit(i);\r\n\t\t\tif (sum &lt; 10) {\r\n\t\t\t\tthis-&gt;storage[i] = sum;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis-&gt;storage[i] = sum - 10;\r\n\t\t\t\tthis-&gt;storage[i + 1]++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (int i = 99; i &gt;= this-&gt;length; i--) {\r\n\t\t\tif (this-&gt;storage[i] != 0) {\r\n\t\t\t\tthis-&gt;length = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nvoid f(int n) {\r\n\tif (n == 0 || n == 1) {\r\n\t\tcout &lt;&lt; 1 &lt;&lt; endl;\r\n\t\treturn;\r\n\t}\r\n\r\n\tauto a = Number(1);\r\n\tauto b = Number(1);\r\n\tfor (int i = 1; i &lt; n; i++) {\r\n\t\tif (i % 2 == 1) {\r\n\t\t\ta.Add(b);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tb.Add(a);\r\n\t\t}\r\n\t}\r\n\r\n\tif (n % 2 == 0) {\r\n\t\ta.Print();\r\n\t}\r\n\telse {\r\n\t\tb.Print();\r\n\t}\r\n}\r\n\r\n\r\nint main()\r\n{\r\n\tfor (int i = 0; i &lt; 80; i++) {\r\n\t\tf(i);\r\n\t}\r\n}\r\n```", "Konwledge_Point": "Fibonacci数列", "Question": ["请教一个问，写了斐波那契数列，想显示第80项，尝试了改为long没有效果，该怎么改进呢？谢谢大家！", ["#include <iostream>\nusing namespace std;\n\nlong f(int n)\n{\n    long f , g, v;\n    f = g = 1;\n\n    if (n == 0 || n == 1)\n        return 1;\n    else \n        while ( 0 < n--)\n        {\n            v = f + g;\n            g = f;\n            f = v;\n        }\n    return g;\n}\n\nint main()\n{\n    int n;\n    cin >> n;\n\n    while ( !(0 <= n && n <= 80) )\n    {\n        printf(\"重新输入！\\n\");\n        cin >> n;\n    }\n\n    cout << f(n) << \"\\n\";\n\n    system(\"pause\");\n    return 0;\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;因为数值过大超出了c语言的数值范围&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/172707783946159.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;改成unsigned long c&amp;#61;1可以计算到1002&amp;#xff0c;但再大还是会出错&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/556158783946190.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列想问一下为什么到输入到1002就变成负数了", ["为什么到输入到1002就变成负数了", "\n", "问题相关代码，请勿粘贴截图", "\n", "前1000都是正常输出", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "#include <iostream>", "\nusing namespace std;\n\nint main()\n{\n    int ", "a", "=0,b=0,c=1,n;\n    cin >> n;\n    ", "for", "(int ", "i", "=1;i<=n;i++)\n    {\n        ", "a", "=b;\n        ", "b", "=c;\n        ", "c", "=a+b;\n    }\n     cout << c << endl;\n } \n\n"]], "Tag": "算法设计"}
{"Answer": "http://www.2cto.com/kf/201306/222126.html", "Konwledge_Point": "Fibonacci数列", "Question": ["2、从键盘输入n（>2），计算斐波那契数列的前n项并按每行10个数据输出。", ["2、从键盘输入n（>2），计算斐波那契数列的前n项并按每行10个数据输出。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;a &amp;#61; 0\nb &amp;#61; 1\nf&amp;#61;[]\nfor i in range(50):\n    a, b &amp;#61; b, a &amp;#43; b\n    f.append(a)\nprint(f)\n\n#\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025]&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["N个斐波那契数列的输出，要列表", ["数学中有一个有名的数列，叫做斐波那契数列，它的第n项的值(n >= 0)：", "\n\n", "F(0)=1，F(1)=1，F(n)=F(n-1)+F(n-2) (n >=2)", "\n\n", "（要求：使用一个长度为50的列表存放斐波那契数列的前面50项，将这个列表打印出来）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;因为在中间运算的过程中&amp;#xff0c;比如说 a &amp;#43; b 算出来的数超过 int 的范围的话&amp;#xff0c;会导致存入 c 中的数出现错误&amp;#xff0c;从而导致接下来的计算出现错误&amp;#xff0c;所以需要在每一步都给他 % 上 10007&amp;#xff0c;这样才能保证数不会出现错误。&amp;#xff08;斐波那契在后面的增长速度非常快&amp;#xff09;&lt;br /&gt;tips &amp;#xff1a; 在每一步都 % 上 10007&amp;#xff0c;这样所以运算的数都在0 ~ 10007 &amp;#xff0c;只会在这个数范围内进行相加减&amp;#xff0c;不会爆范围问题。相当于只进行斐波那契数中的所有数在 0 ~ 10007 范围内的运算&amp;#xff0c;可以自己写几个数试试。&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["蓝桥杯基础练习--Fibonacci数列", ["问题遇到的现象和发生背景", "\n", "问题描述", "Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。", "当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。", "输入格式", "输入包含一个整数n。", "输出格式", "输出一行，包含一个整数，表示Fn除以10007的余数。", "**说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。", "**", "\n", "问题相关代码，请勿粘贴截图", "\n", "只通过部分用例：", "import java.util.*;", "\n", "public class Main {", "\n", "public", " static ", "void", " main(String[] args) {\n    // TODO Auto-", "generated", " ", "method", " stub\n    Scanner ", "in", " = ", "new", " Scanner(", "System", ".", "in", ");\n    ", "int", " n = ", "in", ".nextInt();\n    ", "int", " a = ", "1", ";\n    ", "int", " b = ", "1", ";\n    ", "int", " c = ", "0", ";\n    ", "if", "(n == ", "1", "||n==", "2", ")\n        c = ", "1", ";\n    ", "else", "\n        ", "for", "(", "int", " i = ", "3", ";i<=n;i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n    ", "System", ".", "out", ".println(c%", "10007", ");\n}\n", "\n", "}", "可以通过全部用例：", "import java.util.*;", "\n", "public class Main {", "\n", "public static void main(String[] args) {\n    Scanner ", "in", " = new Scanner(System.", "in", ");\n    int ", "n", " = ", "in", ".nextInt();\n    int ", "a", " = ", "1", ";\n    int ", "b", " = ", "1", ";\n    int ", "c", " = ", "0", ";\n    ", "if", "(", "n", " == ", "1", "||", "n", " == ", "2", ")\n        ", "c", " = ", "1", ";\n    ", "else", "\n        for(int ", "i", " = ", "3", ";i<=n;i++) {\n            ", "c", " = (a + b)%", "10007", ";\n            ", "a", " = b%", "10007", ";\n            ", "b", " = c%", "10007", ";\n        }\n    System.out.println(c);\n}\n", "\n", "}", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "在遇到本题后首先是想用递归先求出第n个斐波那契数，再对10007取余，但提交后显示运行超时。于是我想到可能是因为递归耗时过多，便采用了非递归，提交后只有部分测试用例通过。之后又仔细看了题目和说明，便直接在求斐波那契数列的过程中求出了该斐波那契数对10007取余的结果，提交后通过全部测试用例。", "\n", "我想要达到的结果", "\n", "之后在网上查找看了很多资料，但还是不太明白直接在过程中求余数和先算出斐波那契数在求余有什么区别，麻烦有知道的人解答一下，谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你是要存储到数组吗&amp;#xff1f;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;void f(int *a,int n)\n{\n    a[0] &amp;#61; 1;\n    a[1] &amp;#61; 1;\n\n    for(int k&amp;#61;2;k&amp;lt;&amp;#61;n;k&amp;#43;&amp;#43;)\n    {\n        a[k] &amp;#61; a[k-1] &amp;#43; a[k-2];\n    }\n}\n\nint main()\n{\n    int n;\n    scanf(&amp;#34;%d&amp;#34;,&amp;amp;n);\n    int *a &amp;#61; (int*)malloc(n*sizeof(int));\n    f(a,n);\n    for(int i&amp;#61;0;i&amp;lt;n;i&amp;#43;&amp;#43;)\n        printf(&amp;#34;%d &amp;#34;,a[i]);\n    return 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["用数组来处理求Fibonacci数列问题，要求结合调用函数来编写程序", ["不会写程序，数组和调用函数不知道如何结合起来处理这个问题，不知道怎么将数组和调用函数整合在一起"]], "Tag": "算法设计"}
{"Answer": "因为定义在函数内的系统默认类型变量是在栈中分配内存的，而全局变量是在堆中分配内存的，一般在栈中分配的内存远小于在堆中分配的内存，所以在函数中\r\n定于数组变量所占的内存大小大于所能容纳最大容许分配的栈空间，所以会出现运行错误。如果你把第二个函数中的数组大小改小就可以了。如果觉得解释的\r\n不错，请点赞，谢谢。", "Konwledge_Point": "Fibonacci数列", "Question": ["Fibonacci数列 (蓝桥杯试题集)", ["#include <iostream>\n\nusing namespace std;  \n\n#define mod 10007     //定义除数  \n#define max 1000001  //定义数组长度  \n\nint n,i,F[max];  \n\nint main()  \n{  \n    while(cin >> n)\n    {\n        F[1] = F[2] = 1;  \n        for(i = 3;i <= n;i ++)  \n        {  \n            F[i] = (F[i - 1] + F[i - 2]) % mod;  \n        }  \n        cout << F[n] << endl;\n    }\n\n    return 0;  \n}  \n\n\n", "\n\n", "这样就正确，下面这样就不能运行，为什么呢？求解", "\n\n", " #include <iostream>\n\nusing namespace std;  \n\n#define mod 10007     //定义除数  \n#define max 1000001  //定义数组长度  \n\n\n\nint main()  \n{  \n        int n,i,F[max];  \n    while(cin >> n)\n    {\n        F[1] = F[2] = 1;  \n        for(i = 3;i <= n;i ++)  \n        {  \n            F[i] = (F[i - 1] + F[i - 2]) % mod;  \n        }  \n        cout << F[n] << endl;\n    }\n\n    return 0;  \n}  \n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第21行方法名后面的点去掉&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列使用数组实现", ["这个报错了，应该怎么改正"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;public class Test {&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    public static void main(String[] args) {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        int arr[] &amp;#61; new int[100];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        arr[0] &amp;#61; arr[1] &amp;#61; 1;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        System.out.println(&amp;#34;斐波那契数列前20项为&amp;#xff1a;&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        System.out.print(arr[0] &amp;#43; &amp;#34;\\t&amp;#34; &amp;#43; arr[1] &amp;#43; &amp;#34;\\t&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        for (int i &amp;#61; 2; i &amp;lt; arr.length; i&amp;#43;&amp;#43;) {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            arr[i] &amp;#61; arr[i - 1] &amp;#43; arr[i - 2];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            System.out.print(arr[i] &amp;#43; &amp;#34;\\t&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            if ((i &amp;#43; 1) % 10 &amp;#61;&amp;#61; 0)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                System.out.println();&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        }  &lt;/span&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;}&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["输出斐波那契数列前100项，每10项换行输出", ["请各位大大帮帮忙", "输出斐波那契数列前100项，每10项换行输出"]], "Tag": "算法设计"}
{"Answer": "public static long CalcA(int n)\r\n{\r\n  if (n &lt;= 0) return 0;\r\n  if (n &lt;= 2) return 1;\r\n  return checked(CalcA(n - 2) + CalcA(n - 1));\r\n}", "Konwledge_Point": "Fibonacci数列", "Question": ["算法题求解Fibonacci数列", ["若有一只兔子每个月生一只小兔子，一个月后也开", "\n始生产。起初只有一只兔子，一个月后就有两只兔子，二个月后就有三只兔子，三个月后有五只兔子(小兔子投入", "\n生产)……"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;func&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(int n)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; n &amp;#43; &lt;span class=\"hljs-keyword\"&gt;func&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n}\n\nvoid main()\n{\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;func&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;)&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["如何用C++递归写出斐波那契数列呢？", ["刚学递归，请问如何用C++递归写出斐波那契数列呢？给点提示就行"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我用#CSDN#这个app发现了有技术含量的博客&amp;#xff0c;小伙伴们求同去《斐波那契数列 C语言 数组 非数组 函数》, 一起来围观吧 &lt;a href=\"https://blog.csdn.net/weixin_62264287/article/details/122829674?utm_source&amp;#61;app&amp;amp;app_version&amp;#61;5.0.1&amp;amp;code&amp;#61;app_1562916241&amp;amp;uLinkId&amp;#61;usr1mkqgl919blen\" id=\"textarea_1645887018863_1645887024424_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_62264287/article/details/122829674?utm_source&amp;#61;app&amp;amp;app_version&amp;#61;5.0.1&amp;amp;code&amp;#61;app_1562916241&amp;amp;uLinkId&amp;#61;usr1mkqgl919blen&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列  递推方法！", ["，斐波那契数列以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n - 1)+F(n - 2)（n≥3，n∈N*）【注意：n<=80】", "\n", "\n", "#", "include", " ", "<stdio.h>", "\n\n", "long", " ", "long", " ", "fib", "(", "int", " n)", ";\n", "int", " ", "main", "(", "void", ")", " ", "{\n    ", "int", " n;\n    ", "scanf", "(", "\"%d\"", ",&n);\n    ", "printf", "(", "\"fib(%d)=%lld\"", ",n,", "fib", "(n));\n    ", "return", " ", "0", ";\n}\n", "/*提交以下代码*/", "\n\n", "long", " ", "long", " ", "fib", "(", "int", " n)", " ", "{\n\n}\n"]], "Tag": "算法设计"}
{"Answer": "用turbo c写了一个\r\n\r\n```\r\n#include &lt;stdio.h&gt;\r\nint foo(int n)\r\n{\r\n  if (n &lt;= 2) return 1;\r\n  return foo(n - 1) + foo(n - 2);\r\n}\r\nmain()\r\n{\r\n  int i;\r\n  for (i = 1; i &lt; 10; i++)\r\n    printf(\"%d \", foo(i));\r\n  return 0;\r\n}\t\r\n```\r\n得到如下汇编（帮你注释了下）\r\n```\r\n\tifndef\t??version\r\n?debug\tmacro\r\n\tendm\r\n\tendif\r\n\t?debug\tS \"..\\project\\app1.c\"\r\n_TEXT\tsegment\tbyte public 'CODE'\r\nDGROUP\tgroup\t_DATA,_BSS\r\n\tassume\tcs:_TEXT,ds:DGROUP,ss:DGROUP\r\n_TEXT\tends\r\n_DATA\tsegment word public 'DATA'\r\nd@\tlabel\tbyte\r\nd@w\tlabel\tword\r\n_DATA\tends\r\n_BSS\tsegment word public 'BSS'\r\nb@\tlabel\tbyte\r\nb@w\tlabel\tword\r\n\t?debug\tC E9440EAA50112E2E5C70726F6A6563745C617070312E63\r\n\t?debug\tC E9A460A840122E2E5C696E636C7564655C737464696F2E68\r\n\t?debug\tC E9A460A840132E2E5C696E636C7564655C7374646172672E68\r\n_BSS\tends\r\n_TEXT\tsegment\tbyte public 'CODE'\r\n;\t?debug\tL 2\r\n_foo\tproc\tnear ;foo函数\r\n\tpush\tbp\r\n\tmov\tbp,sp\r\n\tpush\tsi\r\n\tmov\tsi,word ptr [bp+4] ;n参数放入si\r\n;\t?debug\tL 4\r\n\tcmp\tsi,2 ;判断n和2的大小\r\n\tjg\t@2 ;大于2跳转到后面\r\n\tmov\tax,1 ;n&lt;2则返回1\r\n\tjmp\tshort @1\r\n@2:\r\n;\t?debug\tL 5\r\n\tmov\tax,si\r\n\tdec\tax ;这里就是计算n-1\r\n\tpush\tax\r\n\tcall\tnear ptr _foo ;递归调用foo\r\n\tpop\tcx\r\n\tpush\tax\r\n\tmov\tax,si\r\n\tadd\tax,-2 ;这里是计算n-2\r\n\tpush\tax ;结果放在堆栈上\r\n\tcall\tnear ptr _foo ;递归调用foo\r\n\tpop\tcx\r\n\tmov\tdx,ax ;foo(n-2)的结果放在dx\r\n\tpop\tax ;从堆栈上得到 foo(n-1)的结果\r\n\tadd\tax,dx //相加放在ax上作为返回值\r\n\tjmp\tshort @1\r\n@1: ;这里是函数返回部分\r\n;\t?debug\tL 6\r\n\tpop\tsi\r\n\tpop\tbp\r\n\tret\t\r\n_foo\tendp\r\n_TEXT\tends\r\n_DATA\tsegment word public 'DATA'\r\n_DATA\tends\r\n_TEXT\tsegment\tbyte public 'CODE'\r\n;\t?debug\tL 7\r\n_main\tproc\tnear\r\n\tpush\tsi\r\n;\t?debug\tL 10\r\n\tmov\tsi,1 ;si保存的是循环变量i，这里是i=1\r\n\tjmp\tshort @7\r\n@6: ;循环开始\r\n;\t?debug\tL 11\r\n\tpush\tsi ;将i作为参数放入堆栈\r\n\tcall\tnear ptr _foo ;调用foo(i)\r\n\tpop\tcx\r\n\tpush\tax ;把结果放入堆栈\r\n\tmov\tax,offset DGROUP:s@ ;把\"%d \"放入堆栈\r\n\tpush\tax\r\n\tcall\tnear ptr _printf ;调用printf\r\n\tpop\tcx\r\n\tpop\tcx\r\n@5:\r\n\tinc\tsi ;i++\r\n@7:\r\n\tcmp\tsi,10 ;i == 10?\r\n\tjl\t@6 ;小于10返回循环开始处（6）\r\n@4:\r\n;\t?debug\tL 12\r\n\txor\tax,ax\r\n\tjmp\tshort @3\r\n@3:\r\n;\t?debug\tL 13\r\n\tpop\tsi\r\n\tret\t\r\n_main\tendp\r\n_TEXT\tends\r\n\t?debug\tC E9\r\n_DATA\tsegment word public 'DATA'\r\ns@\tlabel\tbyte\r\n\tdb\t37 ;%\r\n\tdb\t100 ;d\r\n\tdb\t32 ;空格\r\n\tdb\t0\r\n_DATA\tends\r\n_TEXT\tsegment\tbyte public 'CODE'\r\n\textrn\t_printf:near ;外部函数printf\r\n_TEXT\tends\r\n\tpublic\t_main\r\n\tpublic\t_foo\r\n\tend\r\n\t\r\n```\r\n你可以用tasm汇编得到exe\r\n\r\n运行\r\n![图片说明](https://img-ask.csdn.net/upload/202005/10/1589048096_205385.png)\r\n\r\n# 相关的工具程序下载\r\n# https://download.csdn.net/download/caozhy/12404953\r\n\r\n# 问题解决的话，请点采纳", "Konwledge_Point": "Fibonacci数列", "Question": ["汇编递归求斐波那契数列前N项", ["汇编怎么用递归求斐波那契数列啊", "\n救救孩子吧", "\n已经几天了还是对堆栈不够理解", "\n大佬最好别调用库做，萌新看不懂，", "\n比如 输入个4", "\n那么输出是 1 1 2 3 这四项"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;\n//先声明函数\nint fun(int n);\n\nint main()\n{\n    int n;\n    printf(&amp;#34;请输入要输出多少项&amp;#xff08;自然数&amp;#xff09;斐波那契数列&amp;#xff1a;&amp;#34;);\n    scanf(&amp;#34;%d&amp;#34;,&amp;amp;n);\n    //int *a &amp;#61; (int *)malloc((n&amp;#43;1)*sizeof(int));//如需存储&amp;#xff0c;使用动态内存分配n&amp;#43;1个空间进行存储\n    int i;\n    for (i &amp;#61; 0; i &amp;lt; n&amp;#43;1; i&amp;#43;&amp;#43;)         //输出所有项\n    {\n        printf(&amp;#34;%d, &amp;#34;, fun(i));\n        if (i !&amp;#61; 0 &amp;amp;&amp;amp; i%5 &amp;#61;&amp;#61; 0)     //每五项进行一次换行&amp;#xff08;第一行多一个第0项&amp;#xff09;\n            printf(&amp;#34;\\n&amp;#34;);\n    }\n    printf(&amp;#34;第 %d 项是&amp;#xff1a;%d\\n&amp;#34;, n, fun(n)); //输出要求的项\n    return 0;\n}\n\nint fun(int n)      //n代表第几项。特别指出&amp;#xff1a;0是第0项&amp;#xff0c;不是第1项。\n{\n    if (n &amp;lt;&amp;#61; 1)\n        return n;\n    else\n        return fun(n-1) &amp;#43; fun(n-2);\n}\n \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["使用C语言用递归法求斐波那契数列，（套用函数）", ["不知道怎么编写函数", "\n\n", "#include<stdio.h>", "\nint fun(int n)      //n代表第几项。特别指出：0是第0项，不是第1项。", "\n{", "\n    if (n <= 1)", "\n        return n;", "\n    else", "\n        return fun(n-1) + fun(n-2);", "\n}", "\n ", "\n", "int main()", "\n{", "\n    int n;", "\n    printf(\"请输入要输出多少项（自然数）斐波那契数列：\");", "\n    scanf(\"%d\",&n);", "\n    //int *a = (int *)malloc((n+1)*sizeof(int));//如需存储，使用动态内存分配n+1个空间进行存储", "\n    int i;", "\n    for (i = 0; i < n+1; i++)         //输出所有项", "\n    {", "\n        printf(\"%d, \", fun(i));", "\n        if (i != 0 && i%5 == 0)     //每五项进行一次换行（第一行多一个第0项）", "\n            printf(\"\\n\");", "\n    }", "\n    printf(\"第 %d 项是：%d\\n\", n, fun(n)); //输出要求的项", "\n    return 0;", "\n}", "\n如果把int main()放在头文件的下面这个程序该怎么改", "\n\n", "谢谢您"]], "Tag": "算法设计"}
{"Answer": "//递归算法\r\nlong long Fibonacci(unsigned int n)\r\n{\r\n\tif (n &lt; 0)\r\n\t\treturn 0;\r\n\tif (n == 1)\r\n\t\treturn 1;\r\n\treturn Fibonacci(n - 1) + Fibonacci(n - 2);\r\n}\r\n\r\n//非递归算法\r\nlong long Fibonacci(unsigned int n)\r\n{\r\n\tint result[2] = { 0,1 };\r\n\tif (n &lt; 2)\r\n\t\treturn result[n];\r\n\tlong long fibone = 1;\r\n\tlong long fibtwo = 0;\r\n\tlong long fibn = 0;\r\n\tfor (unsigned int i = 2; i &lt;= n; i++)\r\n\t{\r\n\t\tfibn = fibone + fibtwo;\r\n\t\tfibtwo = fibone;\r\n\t\tfibone = fibn;\r\n\t}\r\n\treturn fibn;\r\n}", "Konwledge_Point": "Fibonacci数列", "Question": ["Fibonacci数列大数处理", ["如何输出大数的fibonacci数列?分别用递推，递归的算法实现"]], "Tag": "算法设计"}
{"Answer": "用c++随便写的\r\n#include&lt;iostream&gt;\r\n#include &lt;vector&gt;\r\n#include &lt;numeric&gt;\r\nusing namespace std;\r\nint main()\r\n{\r\n\tint sum=1;\r\n\tint *a = new int[10];\r\n\tvector&lt;int&gt;v;\r\n\ta[0] = 0;\r\n\ta[1] = 1;\r\n\tfor (int i = 2; i &lt; 10; i++)\r\n\t{\r\n\t\ta[i] = a[i - 1] + a[i - 2];\r\n\t\tv.push_back(a[i]);\r\n\t}\r\n\tsum+=accumulate(v.begin(), v.end(), 0);\r\n\tcout &lt;&lt; sum &lt;&lt; endl;\r\n\treturn 0;\r\n}", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列求和～～～～～", ["如何用C语言程序求斐波那契数列的前10项和，哪位大牛帮帮忙。还有什么水仙花问题"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;对第一个&amp;#xff0c; 第二个单独判断&amp;#xff0c; 从第三个开始就要等于前两个的和。&lt;br /&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-C\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;func&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(num%&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f0&amp;#61;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, f1&amp;#61;&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; tmp;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || n&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1000000&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;no&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;no no&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;n; i&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;no &amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;no &amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            {\n                tmp &amp;#61; f0 &amp;#43; f1;\n                f0 &amp;#61; f1;\n                f1 &amp;#61; tmp;\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;func&lt;/span&gt;(f1)?&lt;span class=\"hljs-string\"&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;:&lt;span class=\"hljs-string\"&gt;&amp;#34;no&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i !&amp;#61; n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;);\n            }\n        }\n\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["程序设计   斐波那契数列", ["斐波那契数，亦称之为斐波那契数列，指的是这样一个数列：0、1、1、2、3、5、8、13、21、……，这个数列从第3项开始，每一项都等于前两项之和。这里我们定义另外一种斐波那契数列： F(0) = 7, F(1) = 11, F(n) = F(n-1) + F(n-2) (n>=2)。编程计算该数列的前n（n<1000000）项是否能被3整除。", "\n", "输入格式:", "输入为一个正整数n（n<1000000）。", "\n", "输出格式:", "输出上述数列前n项能否被3整除，能则输出“yes ”,否则输出\"no \"。注意：每个\"yes\"和\"no\"后面都有一个空格。", "\n", "输入样例1:", "2", "结尾无空行", "输出样例1:", "no no", "结尾无空行", "输入样例2:", "6", "结尾无空行", "输出样例2:", "no no yes no no no", "结尾无空行"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以&amp;#xff0c;这种方法没有问题&amp;#xff0c;只是用列表保存所有的值&amp;#xff0c;会占用内存空间。&lt;br /&gt;如果题目要求空间复杂度是O(1)的就不符合题目要求了&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["用python编写斐波那契数列的方法很多，这种方法有什么问题吗", ["用python编写斐波那契数列的方法很多，采用这种方式编写会有什么弊端吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\nstring line;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;( &lt;span class=\"hljs-built_in\"&gt;getline&lt;/span&gt;(cin, line)){\n    cout &amp;lt;&amp;lt; line &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;atoi&lt;/span&gt;(line.&lt;span class=\"hljs-built_in\"&gt;c_str&lt;/span&gt;());\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a1 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,a2 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,a3;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        a3 &amp;#61; a2&amp;#43;a1;\n        a1&amp;#61;a2;\n        a2&amp;#61;a3;\n    }\n    cout&amp;lt;&amp;lt;a3&amp;lt;&amp;lt;endl;\n}\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["如何用C++写出斐波那契数列", ["请问如何用C++写出斐波那契数列，F（0）=0；F（1）=1；F（n）=F（n-1）+F（n-2），n大于1", "例如input是5，output为5", "input为12，output 为144", "代码开头为", "#include ", "#include ", "using namespace std;", "\n", "int main() {", "   string line;", "   while( getline(cin, line)){", "        cout << line << endl;", "  }", "}"]], "Tag": "算法设计"}
{"Answer": "第一个问题，在for循环里，首先给i赋值为0，然后判断f[0]和m的大小关系，发现f[0]&lt;m 不成立，于是跳出for循环，顺序执行后面的代码\r\n第二个问题，最后一个for循环改成这样：\r\n```\r\n for (; f[i]&lt;=n; i++)\r\n        printf(\"%d \",f[i]);\r\n```", "Konwledge_Point": "Fibonacci数列", "Question": ["C语言问题求解答，帮忙看一下这个编程~~~~ ", ["输出[m,n]范围内的所有斐波那契（Fibonacci）数，m,n这两个数由键盘输入。", "\n【提示】", "\n1,1,2,3,5,8,13,21,34,……这是斐波那契（Fibonacci）数列的前几项。斐波那契数列的特点：前两项均为1，后面任意一项都是其前面两项之和。", "\n本实验虽然只要求输出在[m,n]范围内的斐波那契数，但是依然需要从第1个Fibonacci数开始依次得到下一个，并判断是否是需要输出的那个。", "\n#include", "\nint main()", "\n{", "\nint f[100];", "\nint m, n, i;", "\nf[0] = 1; f[1] = 1;", "\nfor (i = 2; i < 100; i++)", "\n{", "\n    f[i] = f[i - 1] + f[i - 2];", "\n}", "\nscanf(\"%d%d\", &m, &n);", "\nfor (i = 0; f[i] < m; i++);", "\nfor (; f[i]<n; i++) ", "\n    printf(\"%d \",f[i]);", "\n\n", "return 0;", "\n}", "\n两个疑问", "\n第一个疑问： 你看这个程序 ，我输入 1 3 ，也就是m是1，n是3，运行第二个for时，f[0]<m 不成立 那么程序会怎么样走呢，整个程序也就一个printf 但也要第三个for成立时候才能执行，那要是之前不成立呢，程序怎么运行？", "\n第二个疑问 ", "\n我输入 1 3 输出 1 1 2，怎么改能让他输出 1 1 2 3或者 1 2 3 呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;febo&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; febo(n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#43; febo(n - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;())&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(febo(i),end&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["求斐波那契数列的前n项", ["求斐波那契数列的前n项，n的值从键盘输入。例如，10", "1，1，2，3，5，8，13，21，34，55"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://www.cnblogs.com/zkfopen/p/11245857.html\" id=\"textarea_1636249679965_1636249999376_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;斐波那契数列 --- 四层优化 - zkfopen - 博客园&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;斐波那契数列 起源 兔子问题&amp;#xff1a;“假定一对大兔子每月能生一对小兔子&amp;#xff0c;且每对新生的小兔子经过一个月可以长成一对大兔子,具备繁殖能力&amp;#xff0c;如果不发生死亡&amp;#xff0c;且每次均生下一雌一雄&amp;#xff0c;问一年后共有多少对兔子&amp;#xff1f;” 分析:&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://common.cnblogs.com/favicon.svg\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.cnblogs.com/zkfopen/p/11245857.html&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["C语言 按以下要求编写程序 fibonacci数列", ["编写程序求fibonacci数列，有40阶楼梯，从底往上爬，每次爬1阶或2阶，编算法说明共有多少走法。"]], "Tag": "算法设计"}
{"Answer": "首先你要知道斐波那契数列的规律也就是0、1、1、2、3、5、8、13、21、……,通过这个就可以知道从第三个元素开始，他的值等于前面两个元素的和，下面分析代码\r\n\r\nlong fib[41] = {0,1};   定义了一个数组，设置了0 1 坐标元素的值为 0 1\r\n\r\nfor (i=2;i&lt;41;i++) fib[i] = fib[i-1]+fib[i-2];  这个循环是冲i等于2开始运算的，也就是数组的第三个元素，fib[i] = fib[i-1]+fib[i-2]  因为斐波那契数列的规律是从第三个元素开始等于前面两个相加，也就是fib[i-1]，fib[i-2]这两个\r\n\r\nfor (i=1;i&lt;41;i++) printf(\"F%d==%d\\n\",i,fib[i]); 这里是打印，上面的代码可以看出，数组第一个和第二个元素没有参与运算，但long fib[41] = {0,1};这里已经声明了，所以第一个第二个元素固定为0、1，第三个开始就是前面两个相加。\r\n\r\n不知道说的详细不详细，你明白不明白。", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列 利用循环输出前40项 （初学者）", ["我在查了资料之后找到以下解决方法：", "\n#include ", "\n　　int main()", "\n　　{", "\n　　long fib[41] = {0,1};", "\n　　int i;", "\n　　for (i=2;i<41;i++) fib[i] = fib[i-1]+fib[i-2];", "\n　　for (i=1;i<41;i++) printf(\"F%d==%d\\n\",i,fib[i]);", "\n　　getch();", "\n　　return 0;", "\n　　}", "\n\n", "有些看不懂，希望可以帮我详细分析一下运算过程，或者提供相关的知识点以供研究。", "\n谢谢。"]], "Tag": "算法设计"}
{"Answer": "public int fibonacci(int n){\r\n\tif(n&lt;=0){\r\n\t\tprintf(\"出错了\");\r\n\t\treturn -1;\r\n\t}\r\n\tif(n==1){\r\n\t\treturn 0;\r\n\t}\r\n\telse if(n==2){\r\n\t\treturn 1;\r\n\t}\r\n\telse{\r\n\t\treturn fibonacci(n-2)+fibonacci(n-1);\r\n\t}\r\n}\r\n如果不这样实现可以用递归实现的。\r\n你问的问题1和问题2请看下面的推导过程，你就会明白了。\r\nf(n+1)=f(n)+g(n);       g(n+1)= f(n+1)-g(n);  (数学中的数列，自己慢慢理解)  \r\n这样推导出来就是g(n+1)=f(n);\r\n当n变成n+1则变成f(n+2)=f(n+1)+g(n+1);即f(n+2)=f(n+1)+f(n);\r\n综上所述，即得出斐波那契数列。", "Konwledge_Point": "Fibonacci数列", "Question": ["Fibonacci数列 的疑问（一增一减的迭代法）", ["程序如下：", "\n        int f = 0;", "\n        int g = 1;", "\n        for (int i = 0; i <= 15; i++)", "\n        {", "\n            println(f);", "\n            f = f + g;", "\n            g = f - g;", "\n        }", "\n\n", "输出：0  1 1  2  3 5 8 13 21 34 55 89 144 233 377 610", "\n\n", "问题1：为什么是用一增一减实现的？", "\n问题2：还有关初值f和g是怎么设定的？", "\n\n", "谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你要边算边取余&amp;#xff0c;不是算到最后一起取余&lt;br /&gt;一个对n余数为a的数加一个对n余数b的数&amp;#xff0c;两数相加对n取余余数是a&amp;#43;b&amp;#xff0c;可以证明&lt;br /&gt;把第一个数记为xn&amp;#43;a,第二个数记为yn&amp;#43;b&lt;br /&gt;两数相加是xn&amp;#43;yn&amp;#43;a&amp;#43;b&amp;#xff0c;取余之后xn和yn都没了&amp;#xff0c;就是a&amp;#43;b&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列超大数用什么整型?", ["我要求斐波那契数列第100000000项的取余，但是用longlong或者double转int取余都不行，输出是负数，，还有更大的整型吗？还是说问题其实不在这里?"]], "Tag": "算法设计"}
{"Answer": "问题处在input的返回值上，在python2里边会根据你的输入返回不同的类型，如果你输入整数，这返回的是一个整型，但是eval需求的是str类型，所以会报错。\r\npython3中，input所有的数据都会转化为str返回，所以在python3中，eval不报错。\r\n\r\nint（）函数的参数可以是str，也可以是整型，所以使用int（）时没有报错。", "Konwledge_Point": "Fibonacci数列", "Question": ["python 求斐波那契数列，用int()和eval()得出来的结果为什么不同", ["一个求斐波那契数列的程序，报错说eval的参数不是string，我明明是string啊？？", "\n\n", "def fbnq(a):\n    n=eval(a)\n    if type(n)==type(1):\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return fbnq(n-1)+fbnq(n-2)\ndef main():\n    a=input('请输入求解第几项:')\n    print(fbnq(a))\nmain()\n\nTraceback (most recent call last):\nFile \"E:\\a python\\No.2\\1.py\", line 13, in <module>\nmain()\nFile \"E:\\a python\\No.2\\1.py\", line 12, in main\nprint(fbnq(a))\nFile \"E:\\a python\\No.2\\1.py\", line 9, in fbnq\nreturn fbnq(n-1)+fbnq(n-2)\nFile \"E:\\a python\\No.2\\1.py\", line 2, in fbnq\nn=eval(a)\nTypeError: eval() arg 1 must be a string, bytes or code object\n\n", "\n\n", "然后我把eval()换成int()就正常输出了，为什么？？", "\n\n", "def fbnq(a):\n    n=int(a)\n    if type(n)==type(1):\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return fbnq(n-1)+fbnq(n-2)\ndef main():\n    a=input('请输入求解第几项:')\n    print(fbnq(a))\nmain()\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-variable\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fib&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;n&lt;/span&gt;):\n    &lt;span class=\"hljs-variable\"&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;n&lt;/span&gt;&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n        &lt;span class=\"hljs-variable\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-variable\"&gt;&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;&lt;/span&gt;:\n        &lt;span class=\"hljs-variable\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fib&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;n&lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&amp;#43;&lt;span class=\"hljs-title\"&gt;fib&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;n&lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=\"hljs-variable\"&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;__name__&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-title\"&gt;fib&lt;/span&gt;(&lt;span class=\"hljs-title\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-title\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;输入n的值&amp;#39;&lt;/span&gt;))))&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/41203979563612.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["使用函数实现斐波那契数列的第n项，并在主程序中调用，用户从键盘输入n的数值，程序打印显示对于的斐波那契数列项", ["提示文本及输出文本要和样例一致，否则会被判错", "提示输入n的值8", "结果：21 "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;void fibo(int a[],int n )&lt;br /&gt;\n{&lt;!-- --&gt;&lt;br /&gt;\n    a[0]&amp;#61;1;&lt;br /&gt;\n    a[1]&amp;#61;1;&lt;br /&gt;\n    int s;&lt;br /&gt;\n    for(s&amp;#61;2;s&amp;lt;n;s&amp;#43;&amp;#43;)&lt;br /&gt;\n    {&lt;!-- --&gt;&lt;br /&gt;\n        a[s]&amp;#61;a[s-1]&amp;#43;a[s-2];&lt;br /&gt;\n    }&lt;br /&gt;\n    &lt;br /&gt;\n}&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["C++:本题要求实现求Fabonacci数列项的函数?", ["本题要求实现求Fabonacci数列项的函数。", "\n\n", "Fabonacci数列的定义如下：f(n)=f(n-2)+f(n-1) (n≥2)，其中：f(0)=1，f(1)=1。", "\n\n", "函数接口定义：", "\n\n", "\n", "void fibo(int a[],int n );\n", "\n\n", "其中数组 ", "a", "最终存储计算出的斐波那契数列的值。参数", "n", "是计算前n项。", "\n\n", "裁判测试程序样例：", "\n\n", "\n", "#include <iostream>\nusing namespace std;\nvoid fibo(int a[],int n ); \nint main()\n{\n    int a[20],n,i;\n    cout<<\"请输入n（<=20）：\";\n    cin>>n;\n    fibo(a,n);\n    for(i=0;i<n;i++)\n        cout<<a[i]<<\"  \";\n    cout<<endl;\n    return 0;\n}\n/* 你的代码将被嵌在这里 */", "\n\n", "输入样例：", "\n\n", "\n", "请输入n（<20）：5", "\n\n", "输出样例：", "\n\n", "\n", "1 1 2 3 5 "]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n#include&amp;lt;stdio.h&amp;gt;\n#define &lt;span class=\"hljs-symbol\"&gt;F1&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;300&lt;/span&gt;\n#define &lt;span class=\"hljs-symbol\"&gt;F2&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;\nint main()\n{\n    int &lt;span class=\"hljs-symbol\"&gt;F&lt;/span&gt;[&lt;span class=\"hljs-symbol\"&gt;F1&lt;/span&gt;][&lt;span class=\"hljs-symbol\"&gt;F2&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    int k;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;k);\n    &lt;span class=\"hljs-symbol\"&gt;F&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][&lt;span class=\"hljs-symbol\"&gt;F2&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-symbol\"&gt;F&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][&lt;span class=\"hljs-symbol\"&gt;F2&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    for(int d&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;d&amp;lt;k;d&amp;#43;&amp;#43;)\n    {\n        for(int i&amp;#61;&lt;span class=\"hljs-symbol\"&gt;F2&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i--)\n           {\n              &lt;span class=\"hljs-symbol\"&gt;F&lt;/span&gt;[d][i]&amp;#61;&lt;span class=\"hljs-symbol\"&gt;F&lt;/span&gt;[d&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][i]&amp;#43;&lt;span class=\"hljs-symbol\"&gt;F&lt;/span&gt;[d&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;][i];\n            }\n        int r&amp;#61;&lt;span class=\"hljs-symbol\"&gt;F2&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n        while(r&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n            if(&lt;span class=\"hljs-symbol\"&gt;F&lt;/span&gt;[d][r]&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-symbol\"&gt;F&lt;/span&gt;[d][r&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                &lt;span class=\"hljs-symbol\"&gt;F&lt;/span&gt;[d][r]&amp;#61;&lt;span class=\"hljs-symbol\"&gt;F&lt;/span&gt;[d][r]&lt;span class=\"hljs-number\"&gt;-10&lt;/span&gt;;\n            }\n            r--;\n            }\n    }\n    int j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    while(j&amp;lt;&lt;span class=\"hljs-symbol\"&gt;F2&lt;/span&gt;)\n    {\n        if(&lt;span class=\"hljs-symbol\"&gt;F&lt;/span&gt;[k&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j]!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            while(j&amp;lt;&lt;span class=\"hljs-symbol\"&gt;F2&lt;/span&gt;)\n            {\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-symbol\"&gt;F&lt;/span&gt;[k&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j]);\n                j&amp;#43;&amp;#43;;\n            }\n        }\n    j&amp;#43;&amp;#43;;\n    }\n     return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/497359959646169.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["用C语言（不是C++）求解Fibonacci数列的第110项、第200项的值。", ["用C语言（不是C++）求解Fibonacci数列的第110项、第200项的值。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;int i&amp;#61;0,j&amp;#61;1,这是数组的前两项&amp;#xff0c;k&amp;#61;几无所谓&amp;#xff0c;只要max-k&amp;#61;14就行&amp;#xff0c;循环里每次打印两项&amp;#xff0c;所以k &amp;#61; k&amp;#43;2&amp;#xff0c;然后i &amp;#61; i&amp;#43;j&amp;#xff0c;用当前两项计算下一项&amp;#xff0c;j&amp;#61;i&amp;#43;j&amp;#xff0c;用当前后一项和下一项求下下项&amp;#xff0c;其实你按逻辑单步调试一下就很明白了&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["计算Fibonacci序列的前16项。", ["为什么要int i=0,j=1,k=1，这个程序里的循环体也没有看懂，为什么要这样"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint main() {\n    int i,&lt;span class=\"hljs-attribute\"&gt;f1&lt;/span&gt;&amp;#61;0,f2&amp;#61;1,f3,cnt&amp;#61;0;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d &amp;#34;&lt;/span&gt;,f1,f2);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;3;i&amp;lt;&amp;#61;20;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-attribute\"&gt;f3&lt;/span&gt;&amp;#61;f1&amp;#43;f2;\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,f3);\n        cnt&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-attribute\"&gt;f1&lt;/span&gt;&amp;#61;f2;\n        &lt;span class=\"hljs-attribute\"&gt;f2&lt;/span&gt;&amp;#61;f3;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(cnt%&lt;span class=\"hljs-attribute\"&gt;5&lt;/span&gt;&amp;#61;&amp;#61;0)printf(&amp;#34;\\n&amp;#34;);\n    }\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["有关C语言的斐波那契数列", ["斐波纳契数列中的头两个数分别是0,1，从第3个数开始，每个数等于前两个数的和。即0,1,1,2,3…求该数列前20个数，要求每行输出5个。不能用数组。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;用递归方式解决&amp;#xff0c;f(n)&amp;#61;f(n-1)&amp;#43;f(n-2)&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt; &lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n \n&lt;span class=\"hljs-comment\"&gt;//Fibonacci数列递归解法 C&amp;#43;&amp;#43; 实现&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Fib&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt; \n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) \n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;Fib&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)&amp;#43;&lt;span class=\"hljs-built_in\"&gt;Fib&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k;\n    cin&amp;gt;&amp;gt;k;\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;Fib&lt;/span&gt;(k)&amp;lt;&amp;lt;endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["🎉️ 程序设计-斐波那契数列", ["小明最近学习了斐波那契数列。", "\n", "斐波那契数列是指这样的数列：数列的第一个和第二个数都为 1，接下来每个数都等于前面 2个数之和。", "\n", "给出一个正整数 k，要求斐波那契数列中第 k个数是多少。", "\n", "输入格式", "输入一行，包含一个正整数 k。（1≤k≤46）", "\n", "输出格式", "输出一行，包含一个正整数，表示斐波那契数列中的第 kk 个数。", "\n", "输入样例", "19", "输出样例", "4181"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://blog.csdn.net/cherrydreamsover/article/details/80026343\" id=\"textarea_1635063379002_1635063418472_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;斐波那契数列的四种实现方式&amp;#xff08;C语言&amp;#xff09;_cherrydreamsover的博客-CSDN博客_斐波那契数列c语言&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;斐波那契数列是一组第一位和第二位为1&amp;#xff0c;从第三位开始&amp;#xff0c;后一位是前两位和的一组递增数列&amp;#xff0c;像这样的&amp;#xff1a;1、1、2、3、5、8、13、21、34、55......今天&amp;#xff0c;我们用四种方式来进行实现&amp;#xff1a;1.递归int Fibon1(int n){\tif (n &amp;#61;&amp;#61; 1 || n &amp;#61;&amp;#61; 2)\t{\t\treturn 1;\t}\telse\t{\t\treturn Fibon1(n - 1) &amp;#43; Fibon1(n ...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/cherrydreamsover/article/details/80026343&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["看一下这个怎么做，斐波那契数列", ["C【语法基础】斐波那契数列", "时间限制 : 10000 MS   空间限制 : 65536 KB", "问题描述", "数列1,1,2,3,5,8,13,21,……称为非波拉楔数列。", "从键盘输入一整数N (2<N<40)，求出非波拉楔数列的第N项。", "\n", "输入格式", "一个整数N", "\n", "输出格式", "一个整数，表示数列的第N项", "\n", "样例输入", "6", "\n", "样例输出", "8", "时间限制 : 10000 MS   空间限制 : 65536 KB", "问题描述", "数列1,1,2,3,5,8,13,21,……称为非波拉楔数列。", "从键盘输入一整数N (2<N<40)，求出非波拉楔数列的第N项。", "\n", "输入格式", "一个整数N", "\n", "输出格式", "一个整数，表示数列的第N项", "\n", "样例输入", "6", "\n", "样例输出", "8"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;[] args)&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] arr &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;];\n        arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        arr[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            arr[i] &amp;#61; arr[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; arr[i - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;];\n        }\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            System.out.&lt;span class=\"hljs-built_in\"&gt;println&lt;/span&gt;(arr[i]);\n        }\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/724091533086141.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["输出前二十项斐波那契数列", ["输出前二十项斐波那契数列，运行底下出现了一行这个红色的是什么意思，应该怎么改才是对的呢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你的n不能超过20&amp;#xff0c;超过就内存越界了&amp;#xff0c;你说的随机数&lt;/p&gt;\n&lt;p&gt;用这个方法&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n    int &lt;span class=\"hljs-attribute\"&gt;count&lt;/span&gt;&amp;#61;70;\n    int &lt;span class=\"hljs-attribute\"&gt;N1&lt;/span&gt;&amp;#61;1,N2&amp;#61;1;\n    int &lt;span class=\"hljs-attribute\"&gt;res&lt;/span&gt;&amp;#61;0;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int &lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;3;i&amp;lt;&amp;#61;count;&amp;#43;&amp;#43;i)\n    {\n        res &amp;#61; N1&amp;#43;N2;\n        &lt;span class=\"hljs-attribute\"&gt;N1&lt;/span&gt;&amp;#61;N2;\n        &lt;span class=\"hljs-attribute\"&gt;N2&lt;/span&gt;&amp;#61;res;\n    }\n         \n         \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,res);\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["编写计算斐波那契数列的第n项（数组）", ["\n", "大神帮我看看我写的有啥问题，为啥输出要么是0，要么是个随机很大的数"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我算了一下&amp;#xff0c;第五十位斐波那契数列太大了&amp;#xff0c;已经超出了int 类型可以表示的范围了&amp;#xff0c;这个数太大了&amp;#xff0c;换成double都小&amp;#xff0c;int我这好像最多算到第44位数&amp;#xff0c;double最多算到49好像&amp;#xff0c;为啥要算这么大的数呢&amp;#xff0c;没有搞懂&amp;#xff0c;int四个字节32位&amp;#xff0c;加上一个符号位&amp;#xff0c;最多表示2的31次方&amp;#xff0c;这个已经超出了它可以表示的范围了建议重新算一位斐波那契数列&amp;#xff0c;哈哈&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["裴波那契数列的第五十项的求解", ["#include<stdio.h>", "int main()", "{", "    int a[50];", "    a[0]=1;", "    a[1]=1;", "    int i;", "    for(i=2;i<=50;i++)", "    {", "        a[i]=a[i-1]+a[i-2];", "    }", "     printf(\"%d\",a[50]);", "\n", "return", " ", "0", ";\n", "\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;迭代就是&amp;#xff0c;已知前两个月的数量求第三个月的数量&amp;#xff0c;为了节省空间&amp;#xff0c;前两个月的数量可以用2个变量来表示&amp;#xff0c;每次只要修改一下这两个变量。自己debug一下就懂了&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["python关于斐波那契数列的实现，举例计算小兔子的数量，用迭代的方法没搞明白", ["python关于斐波那契数列的实现，举例计算小兔子繁衍的数量，第一个月数量为1，第二个月数量为1，第三个月开始，当月数量等于前两个月数量之和，计算第20个月的时候一共多少只兔子。用递归的方法能想明白，但是用迭代的方法有些地方看不懂，请各位指教。", "\n", "\n", "# 递归方法实现", "\n", "def", " fab(n):\n    ", "if", " n < ", "1", ":\n        ", "print", "(", "\"输入有误\"", ")\n        ", "return", " -", "1", "\n\n    ", "if", " n == ", "1", " or n == ", "2", ":\n        ", "return", " ", "1", "\n    ", "else", ":\n        ", "return", " fab(n-", "1", ") + fab(n-", "2", ")\n\n", "result", " = fab(", "20", ")\n", "if", " result != -", "1", ":\n    ", "print", "(result)\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-bash\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fib&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;( &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n )&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//返回第几位的斐波那契数 &lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,a&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,b&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,c;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i&amp;lt;n)&lt;span class=\"hljs-comment\"&gt;//使用i来判断第几位 这里我们从0 1开始计数因此需要考虑特殊情况 这里的数字经过测试应该是没有第0个数字一说的。 &lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            c&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n             c&amp;#61;a&amp;#43;b;\n            a&amp;#61;b;\n            b&amp;#61;c;\n        }\n        i&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; c;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你看看可以不&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["关于c语言斐波那契数列的实现", ["\nunsigned long ", "Fibonacci(", "unsigned", " ", "n", ")", "\n{\n    ", "if", " (n > ", "2", ")\n        return ", "Fibonacci(", "n", " - 1)", " + ", "Fibonacci(", "n", " - 2)", ";\n    ", "else", "\n        return ", "1", ";\n}\n", "\n", "这是使用双递归的方法去实现斐波那契数列", "我想问一下，能不能用循环去实现呢，输入一个正整数，然后得到对应位置的斐波那契数"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;n大一点的时候&amp;#xff0c;数据会溢出。需要在循环里每次都进行取余操作。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-attr\"&gt;f3&lt;/span&gt; &amp;#61; (f1&amp;#43;f2)%&lt;span class=\"hljs-number\"&gt;10007&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["请问斐波那契数列对10007取余哪里有问题", []], "Tag": "算法设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;帮你找了个相似的问题, 你可以看下: &lt;a href=\"https://ask.csdn.net/questions/7618555\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;https://ask.csdn.net/questions/7618555&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;我还给你找了一篇非常好的博客&amp;#xff0c;你可以看看是否有帮助&amp;#xff0c;链接&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/renzijing/article/details/94465124\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;矩阵求斐波那契数列第n项&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["求斐波那契数列第n项是否为素数，一直报错，麻了", ["\n", "import", " java.util.Scanner;\n", "public", " ", "class", " Main {\n    ", "public", " static ", "void", " main(String[] args) {\n        Scanner sc = ", "new", " Scanner(", "System", ".", "in", ");\n        ", "int", " n = sc.nextInt();\n        ", "if", "(n < ", "3", ") ", "System", ".", "out", ".print(\"false\");\n        ", "else", " {\n            ", "int", " ans = ", "0", ";\n            ", "int", " ans2 = ", "0", ";\n            ", "int", " a[] = ", "new", " ", "int", "[", "1005", "];\n            a[", "1", "] = ", "1", ";\n            a[", "2", "] = ", "1", ";\n            ", "for", " (", "int", " i = ", "3", "; i <= n; i++) {\n                a[i] = a[i - ", "1", "] + a[i - ", "2", "];\n            }\n            ", "for", " (", "int", " i = ", "2", "; i < a[n]; i++) {\n                ", "if", " (a[n] % i != ", "0", ") ans++;\n            }\n            ", "for", " (", "int", " i = ", "2", "; i < a[n]; i++) {\n                ans2++;\n            }\n            ", "if", " (ans == ans2) ", "System", ".", "out", ".print(\"true\");\n            ", "else", " ", "System", ".", "out", ".print(\"false\");\n        }\n\n    }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;num才是你要找的数啊&amp;#xff0c;maxitem是下一个&amp;#xff0c;也就是大于5000的。所以打印num就可以了&lt;br /&gt;不过问题是你这输入的a和b都没用到啊&amp;#xff0c;反正初始值肯定是1和1是吗&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["若 Fibonacci 数列的第 n 项记为 fib(a,b,n)，求解", ["不知道这个程序出了什么问题，出现的结果非常离谱，希望解答，非常感谢", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;把y&amp;#61;fib(i)写进循环里&lt;br /&gt;否则你的y值一直不变啊&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["求解答！利用递归调用法求斐波那契数列前n个数（大一）", ["调用函数出错，但又不知道咋改，大佬们可以帮忙看看吗？谢谢啦！", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/253194958836162.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列的第100个项目", ["定义fib（）的函数", "用", "F1 = 1, F2 = 1,", "Fn+2 =Fn+1 +Fn的方式", "\n", "求f（100）的数"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;fib&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;):\n    f1,f2 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,n):\n        f1,f2 &amp;#61; f2,f1&amp;#43;f2\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; f1\n\nn &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;())\ni &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; fib(i)&amp;lt;&amp;#61;n:\n    i &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;第&lt;span class=\"hljs-subst\"&gt;{i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;}&lt;/span&gt;个,值为&lt;span class=\"hljs-subst\"&gt;{fib(i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数斐波那契数列1,2,3,5813根据这样的规律，编程求出输入的数以内最大的斐波那契数，并求出他是第几个斐波那契数", ["。", "输入格式:最大范围数值输出格式:第m个,值为n输入样例:1000输出样例：第十五个，值为987", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;因为那个for循环已经把 i 加到最大了&amp;#xff0c;所以最后输出的时候就是最大值&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["c语言递归，函数 斐波拉契函数问题", ["输入2以上的数字，则输出极大数？", "标题", "Fibonacci数列", "\n", "类别", "函数与递归", "\n", "时间限制", "2S", "\n", "内存限制", "1000Kb", "\n", "问题描述", "有一种形式的Fibonacci数列定义如下：", "F(0)=7", "F(1)=11", "F(n)=F(n-1)+F(n-2)（n>=2）", "\n", "按以下声明写一个函数fib", "int fib(int n);", "fib函数用来计算参数n对应的F(n)。", "fib(n)的返回值是F(n)", "\n", "输入说明", "函数参数为一个整数n（0<=n<40）。", "\n", "输出说明", "函数返回值为整数，表示n对应的F(n)值。", "\n", "输入样例", "2", "\n", "我所写的代码：", "\n", "\n", "#", "include", "<stdio.h>", "\n\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " fib[", "40", "];\n    ", "int", " n,i;\n    fib[", "0", "]=", "7", ";\n    fib[", "1", "]=", "11", ";\n    ", "scanf", "(", "\"%d\"", ",&n);\n    ", "if", "(n>", "1", ")\n    {\n     \n     ", "for", "(i=", "2", ";i<=n;i++)\n    {\n        fib[i]=fib[i", "-1", "]+fib[i", "-2", "];\n    }\n    }\n    ", "else", "\n    fib[i]=fib[n];\n    \n    ", "printf", "(", "\"%d\"", ",fib[i]);\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;num&amp;#61;0\nfor i in range(2,200):\n    k&amp;#61;True\n    for j in range(2,i):#for j in range(2,i/2&amp;#43;1)\n       if(i%j&amp;#61;&amp;#61;0):\n         k&amp;#61;False\n         break\n    if(k&amp;#61;&amp;#61;True):\n       print(&amp;#34;%d&amp;#34;%i)\n       num&amp;#61;num&amp;#43;1\nprint(&amp;#34;素数个数%d&amp;#34;%num)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;def Fibonacci(n):\n    if n &amp;#61;&amp;#61; 1:\n        return 1\n    elif n &amp;#61;&amp;#61; 2:\n        return 1\n    elif n &amp;gt; 2:\n        return Fibonacci(n - 1) &amp;#43; Fibonacci(n - 2)\n \ndef printFib():\n    n &amp;#61; eval(input(&amp;#34;请输入一个整数&amp;#xff1a;&amp;#34;))\n    print(Fibonacci(n))\n \nprintFib()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;def sprime(num):\n    try:\n        # 质数大于 1\n        if num &amp;gt; 1:\n            # 查看因子\n            for i in range(2, num):\n                if (num % i) &amp;#61;&amp;#61; 0:\n                    print(num, &amp;#34;不是质数&amp;#34;)\n                    print(i, &amp;#34;乘于&amp;#34;, num // i, &amp;#34;是&amp;#34;, num)\n                    break\n            else:\n                print(num, &amp;#34;是质数&amp;#34;)\n                return True\n    \n        # 如果输入的数字小于或等于 1&amp;#xff0c;不是质数\n        else:\n            print(num, &amp;#34;不是质数&amp;#34;)\n            return False\n    except:\n        pass&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["用python编程，，，", ["大一的程序设计，求求了，救救孩子吧，越简单越好\n1、编写函数，输出200以内的所有素数，以空格分割输出\n\n2、编写函数，参数为一个整数n。利用递归获取斐波那契数列中的第n个数并返回\n\n3、实 现sprime()函数，参数为整数，要有异常处理。如果整数是质数，返回True，否则返回False"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\ndef fib(n):\n    &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;, b &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;, b &amp;#61; b, &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;&amp;#43;b\n    &lt;span class=\"hljs-literal\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;\n\ndef get_res(x):\n    sum_a &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;item&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, x&amp;#43;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#61; fib(&lt;span class=\"hljs-keyword\"&gt;item&lt;/span&gt;) / fib(&lt;span class=\"hljs-keyword\"&gt;item&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)\n        sum_a &amp;#43;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;\n    &lt;span class=\"hljs-literal\"&gt;return&lt;/span&gt; sum_a\n\nres &amp;#61; get_res(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\nprint(res)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["python斐波那契数列及同步赋值", ["分子分母同时为斐波那契数列时，如何同步赋值？不要使用yield之类函数能否做到呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;把题目的意思转换为代码就可以了。&lt;br /&gt;一个实现&amp;#xff0c;仅供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;F&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;):\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:  &lt;span class=\"hljs-comment\"&gt;#当前n为0时&amp;#xff0c;返回0&lt;/span&gt;\n \n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;   \n \n    &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:  &lt;span class=\"hljs-comment\"&gt;#当n为1时&amp;#xff0c;返回1&lt;/span&gt;\n \n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;   \n \n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:   &lt;span class=\"hljs-comment\"&gt;#当大于1时就返回前两个斐波那契数的和&lt;/span&gt;\n \n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; F(n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#43; F(n-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n    \nn&amp;#61;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入一个正整数n&amp;#xff1a;&amp;#34;&lt;/span&gt;))\n\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):  &lt;span class=\"hljs-comment\"&gt;#打印斐波那契数的F(0) 到F(n)&lt;/span&gt;\n \n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(  F(i)  ,end&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;)  \n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入数据有误&amp;#34;&lt;/span&gt;)\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/391972601556185.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列输入正整数n，输出斐波纳契数列F(0)  F(1)  ……  F(n)，各项以空格分隔。", ["斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：0 1 1 2 3 5 8 13 21 34……在数学上，斐波纳契数列以如下递归的方法定义：F(0)=0，F(1)=1, F(n)=F(n-1)+F(n-2)。", "\n", "输入正整数n，输出斐波纳契数列F(0)  F(1)  ……  F(n)，各项以空格分隔。", "\n", "填入合适代码，使程序完整。", "\n", "def F(n):", "\n", "if", " ", "n", "==0:\n\n    ①   \n\nelif ", "n", "==1:\n\n    ②   \n\n", "else", ":\n\n    ③   \n", "\n", "n=int(input(\"输入一个正整数n：\"))", "\n", "if n>=0:", "\n", "for", " i ", "in", " range(n+1):\n\n    ", "print", "(  ④  ,", "end", "=", "\" \"", ")\n", "\n", "else:", "\n", "print", "(", "\"输入数据有误\"", ")", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;#include &amp;#34;stdio.h&amp;#34;\n/*\n编写函数fun&amp;#xff0c;它的功能是:求Fibonacci数 列中大于t的最小的一个数&amp;#xff0c;结果由函数返回。\n其中Fibonacci数列F (n)的定义为:F(0)&amp;#61;0&amp;#xff0c;F(1)&amp;#61; 1 , F(n)&amp;#61;F(n- 1) &amp;#43;F(n- 2) #include #include Int Fun(int n)\n*/\nint fun(int n){\n\tint f0 &amp;#61; 0;\n\tint f1 &amp;#61; 1;\n\tint f2&amp;#61;0;\n\twhile(f2&amp;lt;n){\n\t\tf2 &amp;#61; f1&amp;#43;f0;\n\t\tf0 &amp;#61; f1;\n\t\tf1 &amp;#61; f2;\t\t\n\t}\n\treturn f2;\n}\nvoid main()\n{\n\tint n;\n\tprintf(&amp;#34;请输入一个数:&amp;#34;);\n\tscanf(&amp;#34;%d&amp;#34;,&amp;amp;n);\n\tprintf(&amp;#34;大于%d的最小数是%d&amp;#34;,n,fun(n));\n    \n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["C语言编程题，救救孩子吧。这个math.h有啥用啊。难道不是多余的嘛。求大佬给个程序", ["编写函数fun，它的功能是:求Fibonacci数 列中大于t的最小的一个数，结果由函数返回。其中Fibonacci数列F (n)的定义为:F(0)=0，F(1)= 1 , F(n)=F(n- 1) +F(n- 2)\n #include \n#include \nInt Fun(int n)"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\ndef fbn&lt;span class=\"hljs-string\"&gt;q(n)&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a\n    elif n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; b\n    elif n &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; fbn&lt;span class=\"hljs-string\"&gt;q(n-2)&lt;/span&gt;&amp;#43;fbn&lt;span class=\"hljs-string\"&gt;q(n-1)&lt;/span&gt;\n\n\na &amp;#61;  &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(input(&lt;span class=\"hljs-string\"&gt;&amp;#34;Enter the first number &amp;#34;&lt;/span&gt;))\nb &amp;#61;  &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(input(&lt;span class=\"hljs-string\"&gt;&amp;#34;Enter the second number &amp;#34;&lt;/span&gt;))\nc &amp;#61;  &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(input(&lt;span class=\"hljs-string\"&gt;&amp;#34;Enter the number of iterations &amp;#34;&lt;/span&gt;))\nList &amp;#61; []\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,c&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    List.append(fbn&lt;span class=\"hljs-string\"&gt;q(i)&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(List)\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["使用递归显示斐波那契数列", ["接受一个number.", "接受第二次number.", "接受迭代次数", "根据输入的数字显示斐波那契数列。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以先定义一个函数求某一项的斐波那契数列的值&amp;#xff0c;然后在一个循环中调用这个函数&amp;#xff0c;判断其值是否超过5000&amp;#xff0c;如果没有超过则计算下一项斐波那契数列的值&amp;#xff0c;同时记录项数&amp;#xff0c;如果查过了&amp;#xff0c;则打印第几项超过了5000&amp;#xff0c;代码如下&amp;#xff1a;&lt;br /&gt;&lt;br /&gt;参考链接&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/pyh2358/article/details/105977440\" id=\"textarea_1669430400901_1669430409493_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;java斐波那契前100项以及求和_pyh2358的博客-CSDN博客_斐波那契数列前100项&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;fib&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;: &lt;span class=\"hljs-comment\"&gt;#如果项数为第1项或第2项&amp;#xff0c;则返回斐波那契数列的值为1&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;: &lt;span class=\"hljs-comment\"&gt;#否则&amp;#xff0c;返回前两项的斐波那契数列的和&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; fib(n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&amp;#43;fib(n-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__ &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:\n\n    i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;#初始项数为第1项&lt;/span&gt;\n    result&amp;#61;fib(i) &lt;span class=\"hljs-comment\"&gt;#计算第1项斐波那契数列的值&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; result&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;5000&lt;/span&gt;:  &lt;span class=\"hljs-comment\"&gt;#如果斐波那契数列的某一项的值小于等于5000&amp;#xff0c;则计算下一项斐波那契数列的值&lt;/span&gt;\n        i&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 项数变为下一项&lt;/span&gt;\n        result&amp;#61;fib(i)  &lt;span class=\"hljs-comment\"&gt;#计算下一项斐波那契数列的值&lt;/span&gt;\n\n &lt;span class=\"hljs-comment\"&gt;#当循环退出&amp;#xff0c;则计算出数列值超过5000的项数&amp;#xff0c;打印这个结果       &lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;第&amp;#34;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(i)&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;项的斐波那契数列其值超过5000&amp;#xff0c;其值是&amp;#34;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(result)&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)\n        \n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/69036492496618.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["python斐波那契数列相关问题", ["刚刚开始学，不太懂怎么写，求懂得人麻烦指教", "斐波那契数列相关的问题"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;clear&lt;br /&gt;sca x &amp;#61; 1&lt;br /&gt;sca y &amp;#61; 0&lt;br /&gt;sca k &amp;#61; 0&lt;br /&gt;sca i &amp;#61; 1&lt;br /&gt;while(i&amp;lt;11){&lt;!-- --&gt;&lt;br /&gt;di x&lt;br /&gt;sca k &amp;#61; x&lt;br /&gt;sca x &amp;#61; x&amp;#43;y&lt;br /&gt;sca y &amp;#61; k&lt;br /&gt;sca i&amp;#61;i&amp;#43;1&lt;br /&gt;}&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["如何在stata输出斐波那契数列前十项", [" 想要得到数据 然后赋值出现问题（朋友和我说不能赋值）", "generate x = 1", "generate y = 0", "generate k = 0", "local i =1", "while(", "i'<11){     display x     gen k = x     gen x = x+y     gen y = k     local i=", "i'+1", "}", "现在很苦恼哎"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff0c;后面附加了前15项的测试&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Fibonacci&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;){\n        c &amp;#61; a&amp;#43;b;\n        a &amp;#61; b;\n        b &amp;#61; c;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; c;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n); \n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;Fibonacci&lt;/span&gt;(n));\n    \n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;测试前15项&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;F(%d) &amp;#61; %d\\n&amp;#34;&lt;/span&gt;,i,&lt;span class=\"hljs-built_in\"&gt;Fibonacci&lt;/span&gt;(i));\n        \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["为啥我这个计算斐波那契数列的程序没有输出？", ["\n", "\n", "我这个程序意思大概是，先令前两项a和b，然后循环一次一下加两项，n也一下加二。然后看最后那个num是奇数还是偶数，要是偶数就输出b，奇数就输出a。可是最后没有输出，哪里卡住了？？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fib&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; fn1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; fn2 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; res &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n    {\n        res &amp;#61; fn1 &amp;#43; fn2;\n        fn1 &amp;#61; fn2;\n        fn2 &amp;#61; res;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; res;\n\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    std::cin &amp;gt;&amp;gt; n;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ans &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fib&lt;/span&gt;(n);\n    std::cout &amp;lt;&amp;lt; ans;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列2-递推方法", ["斐波那契数列在数学上，斐波那契数列以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n - 1)+F(n - 2)（n≥3，n∈N*）【注意：n<=80】", "\n", "#", "include", " ", "<stdio.h>", "\n\n", "long", " ", "long", " ", "fib", "(", "int", " n)", ";\n", "int", " ", "main", "(", "void", ")", " ", "{\n    ", "int", " n;\n    ", "scanf", "(", "\"%d\"", ",&n);\n    ", "printf", "(", "\"fib(%d)=%lld\"", ",n,", "fib", "(n));\n    ", "return", " ", "0", ";\n}\n", "/*提交以下代码*/", "\n\n", "long", " ", "long", " ", "fib", "(", "int", " n)", " ", "{\n\n}\n\n", "\n", "输入", "1行，第几项n", "输出", "见样例", "样例输入 Copy", "5", "样例输出 Copy", "fib(5)=5", "提示", "递推求解的时间复杂度比较低，是O（N）"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint main() {\n    int k1,k2;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;k1,&amp;amp;k2);\n    int &lt;span class=\"hljs-attribute\"&gt;f1&lt;/span&gt;&amp;#61;1,f2&amp;#61;1,s&amp;#61;0,f3,i;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;k1&lt;/span&gt;&amp;#61;&amp;#61;1) s&amp;#43;&amp;#61;f1;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(k2&amp;gt;&amp;#61;2) s&amp;#43;&amp;#61;f2;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;3;i&amp;lt;&amp;#61;k2;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-attribute\"&gt;f3&lt;/span&gt;&amp;#61;f1&amp;#43;f2;\n        &lt;span class=\"hljs-attribute\"&gt;f1&lt;/span&gt;&amp;#61;f2;\n        &lt;span class=\"hljs-attribute\"&gt;f2&lt;/span&gt;&amp;#61;f3;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;gt;&amp;#61;k1){\n            s&amp;#43;&amp;#61;f3;\n        }\n    } \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,s);\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列求和（按照格式来）", []], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j, sum;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cnt &amp;#61; &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;;        &lt;span class=\"hljs-comment\"&gt;// 需要输出的项数 &lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; fib[&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;}; &lt;span class=\"hljs-comment\"&gt;// int溢出&amp;#xff0c;需要把数组类型改为 double &lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt; cnt &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;){\n        fib[i] &amp;#61; fib[i&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;] &amp;#43; fib[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;];    \n    }\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; cnt &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;){\n        sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt; i; j&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i%j &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n                sum &amp;#43;&amp;#61; j;\n            }\n      }\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;#61;&amp;#61; sum){\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%12.0lf&amp;#34;&lt;/span&gt;,fib[i]);        &lt;span class=\"hljs-comment\"&gt;// 右对齐12字符 &lt;/span&gt;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["找出斐波那契数列中的不是完数的数", ["找出斐波那契数列前20项中不是完数的数。列如6的因子上1，2，3，而6=1+2+3，因此6是完数。"]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/peter-le/p/6055782.html", "Konwledge_Point": "Fibonacci数列", "Question": ["如何利用矩阵乘法快速幂求斐波那契数列前n项和？", ["【矩阵乘法】Fibonacci 前 n 项和 (Standard IO)", "\n\n", "题目描述", "\n\n", "\n\n", "输入", "\n输入n,m", "\n\n", "输出", "\n\n", "\n\n", "样例输入", "\n\n", "5 1000\n", "\n\n", "样例输出", "\n\n", "12\n", "\n\n", "n很大，要log（n）的时间才能过"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;#include&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;\nusing namespace std;\nint main()\n{\n\tios::sync_with_stdio(false);\n\tunsigned long long dp[51];\n\tdp[1]&amp;#61;dp[2]&amp;#61;1;\n\tint n;\n\tcin&amp;gt;&amp;gt;n;\n\tfor(int i&amp;#61;3;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n\t{\n\t\tdp[i]&amp;#61;dp[i-1]&amp;#43;dp[i-2];\n\t}\n\tcout&amp;lt;&amp;lt;dp[n];\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["c语言求图形Fibonacci", ["求Fibonacci数列的前40项。Fibonacci数列的特点是：  ", "\n第1项是1；  ", "\n第2项是1；  ", "\n以后各项都等于前两项的和。 ", "\n\n", "\n\n", "请编制程序输出Fibonacci数列的前40项，每行4列，第一列和第三列宽度为12个字符，第二列和第四列宽度为13个字符。最后一条输出后，不要再输出回车换行符。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先将数列存储到数组&amp;#xff0c;然后倒过来数10个数出来&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;t);\n    a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        a[n] &amp;#61; a[n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;] &amp;#43; a[n&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;];\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[n] &amp;gt; t)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        n&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;gt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n        i&amp;#61;n&lt;span class=\"hljs-number\"&gt;-10&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n        j&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j%&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列，输入一个个t，求小于t的最大十个数，每5个一行", ["斐波那契数列，输入一个个t，求小于t的最大十个数，每5个一行"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;#解法一&amp;#xff1a;用join函数\nlist &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    list&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(i)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;.join(list)&lt;/span&gt;&lt;/span&gt;)\n\n#解法二&amp;#xff1a;用strip函数\nout &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    out &amp;#43;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(out.strip(&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列的前n项", ["我的代码是这样的，怎样处理55后面的逗号可以去掉？", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;请问要输出几个数呢&amp;#xff1f; 我这里是输出31个的&amp;#xff0c;如果需要多少&amp;#xff0c;把代码中对应的31改成你需要的值即可、&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-comment\"&gt;// fib() 函数&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fib&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;31&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;31&lt;/span&gt; ; i&amp;#43;&amp;#43;) {\n        a[i] &amp;#61; a[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;] &amp;#43; a[i&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;];\n    }\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;31&lt;/span&gt; ; i&amp;#43;&amp;#43;){\n        cout &amp;lt;&amp;lt; a[i] &amp;lt;&amp;lt; endl;\n    }\n\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;fib&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["Fibonacci数列 改错", ["想问下这道Fibonacci数列这样编写哪里有问题呢，麻烦帮忙改错，谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;图片上的问题是fb没有给初始值&amp;#xff0c;所以编译器会报错。两个变量计算第n个斐波那契数的逻辑如下&amp;#xff1a;&lt;br /&gt;second &amp;#61; first&amp;#43;second;first &amp;#61; second - first;比如前三个&amp;#xff1a;1,1,2。&lt;br /&gt;首先first&amp;#61;1,second&amp;#61;1是&amp;#xff0c;计算第三个数的过程&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;将first&amp;#43;second 赋值新的second&amp;#xff0c;此时second相当于向后移动一位,second &amp;#61; 2;&lt;/li&gt;&lt;li&gt;second此时前一个数值等于当前second-first&amp;#61;2-1&amp;#61;1;将此值赋值于first;&lt;br /&gt;此后相当于first,second各向后推一位。循环此步骤&amp;#xff0c;就能求解第n个值。&lt;/li&gt;&lt;/ol&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;fb&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n) {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, first &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;second&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (i &amp;lt; n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;second&lt;/span&gt; &amp;#61; first&amp;#43;&lt;span class=\"hljs-built_in\"&gt;second&lt;/span&gt;;\n        first &amp;#61; &lt;span class=\"hljs-built_in\"&gt;second&lt;/span&gt; - first;\n        i&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;second&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;main&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;String&lt;/span&gt;[] args) {\n    System.&lt;span class=\"hljs-property\"&gt;out&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;println&lt;/span&gt;(&lt;span class=\"hljs-title function_\"&gt;fb&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;));\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["利用while编写斐波那契数列", ["麻烦请教如何仅使用2个储存变量利用while编写斐波那契数列 希望大家可以将不好理解的地方给予解释 我很多基础的东西都忘记了 麻烦大家指点一下", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "```\r\n int foo(int n)\r\n{\r\n    if (n == 1 || n == 2)\r\n        return 1;\r\n    return foo(n - 1) + foo(n - 2);\r\n}\r\n\r\nint main()\r\n{\r\n    for (int i = 1; i &lt; 20; i++)\r\n    {\r\n        cout &lt;&lt; foo(i) / (double)foo(i + 1) &lt;&lt; endl;\r\n    }\r\n}\r\n```\r\n\r\n1\r\n0.5\r\n0.666667\r\n0.6\r\n0.625\r\n0.615385\r\n0.619048\r\n0.617647\r\n0.618182\r\n0.617978\r\n0.618056\r\n0.618026\r\n0.618037\r\n0.618033\r\n0.618034\r\n0.618034\r\n0.618034\r\n0.618034\r\n0.618034", "Konwledge_Point": "Fibonacci数列", "Question": ["用C语言证明费波拉契数列中Fn/Fn+1等于黄金分割。要求有输入输", ["用C语言证明费波拉契数列中Fn/Fn+1等于黄金分割。要求有输入输出"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;网上有很多啊&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;  &lt;span class=\"hljs-title\"&gt;Fib&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n      &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n   &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;Fib&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;Fib&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n        sum &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;Fib&lt;/span&gt;(i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,sum);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["C语言编写一个递归函数 Fib，用于求Fabonacci的第n项数列。", ["题目描述:编写一个递归函数 Fib，用于求Fabonacci的第n项数列。", "如图所示"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;def fabo(x):\n    a,&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;1,1\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(2,x):\n        a,&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;b%10007,(a&amp;#43;b)%10007\n    return b\n        \ndef fabo1(x):\n    a,&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;1,1\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(2,x):\n        a,&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;b,(a&amp;#43;b)\n    return b\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,20000):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; fabo(i)!&amp;#61;fabo1(i):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i,fabo(i))\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i,fabo1(i))\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i-1,fabo(i-1))\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i-1,fabo1(i-1))\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i-2,fabo(i-2))\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i-2,fabo1(i-2))\n        break\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;21 939&lt;br /&gt;21 10946&lt;br /&gt;20 6765&lt;br /&gt;20 6765&lt;br /&gt;19 4181&lt;br /&gt;19 4181&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;6765&amp;#43;4181&lt;br /&gt;10946&lt;br /&gt;10946%10007&lt;br /&gt;939&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;x&amp;lt;21时&amp;#xff0c;两函数相等的&amp;#xff0c;&lt;br /&gt;x&amp;#61;21时 a&amp;#43;b&amp;gt;10007就不相等了&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["有关斐波那契数列Python", ["要求求斐波那契数列F（n）除以10007所得余数 n是整数", "\n", "def", " fabo(x):\n    ", "a", ",b=", "1", ",", "1", "\n    ", "for", " i in range(", "2", ",x):\n        ", "a", ",b=b%", "10007", ",(a+b)%", "10007", "\n    ", "return", " b\n        \n\n\n\n", "def", " fabo1(x):\n    ", "a", ",b=", "1", ",", "1", "\n    ", "for", " i in range(", "2", ",x):\n        ", "a", ",b=b,(a+b)\n    ", "return", " b\n\n", "\n", "在F(n)<10007这两个结果等价，但是F（n）>10007的时候这两个为什么等价（我运行一下结果一样），我感觉我用数学解释不来，请求指导"]], "Tag": "算法设计"}
{"Answer": "```\r\n#include &lt;iostream&gt;\r\n#include &lt;string&gt;\r\nusing namespace std;\r\nint main()\r\n{\r\n\tint n = 0;\r\n\tcin &gt;&gt; n;\r\n\tstring s(n, 'o');\r\n\tint a = 1, b = 1;\r\n\ts[0] = 'O';\r\n\twhile(true)\r\n\t{\r\n\t\tint tmp = a + b;\r\n\t\tif (tmp &gt; n)\r\n\t\t\tbreak;\r\n\t\ts[tmp - 1] = 'O';\r\n\t\ta = b;\r\n\t\tb = tmp;\r\n\t}\r\n\tcout &lt;&lt; s;\r\n\treturn 0;\r\n}\r\n```", "Konwledge_Point": "Fibonacci数列", "Question": ["求判断是否为斐波那切数列(含高精度)", ["输入n(1<=n<=1000)。", "\n\n", "输出n个o，如果i是斐波那契数列中的数，则第i个o为大写，否则为小写。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;51&lt;/span&gt;];\n    a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;; &amp;#43;&amp;#43;i)\n        a[i] &amp;#61; a[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; a[i - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;];\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;, a[&lt;span class=\"hljs-number\"&gt;49&lt;/span&gt;]);\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列求出第50项的值", ["F(1)=1，F(2)=1，F(n)=F(n-1)+F(n-2)，试求F(50)值"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;n &amp;#61; int(input(&amp;#34;Input N: &amp;#34;))\na &amp;#61; 0\nb &amp;#61; 1\nsum &amp;#61; 0\nfor i in range(n):\n    a, b &amp;#61; b, a &amp;#43; b\n    sum &amp;#43;&amp;#61; a\n    print(a)\nprint(&amp;#34;The sum of&amp;#34;, n, &amp;#34;FIB is&amp;#34;, sum,&amp;#34;!&amp;#34;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"177\" src=\"https://img-ask.csdnimg.cn/upload/1623839750142.png\" width=\"324\" /&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["利用Python编程", ["利用Python编程:", "\n\n", "（1）从键盘输入若干个整数，当输入某个特定的英文字母时，输入结束；计算并输出这些数中奇数的和、偶数的和，以及这些数的平均值。", "\n\n", "（2）利用列表计算斐波那契数列的前若干项及它们的和，并输出计算结果。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你提的俩问题 一起采纳下呗 谢谢您&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-attribute\"&gt;def&lt;/span&gt; feb(n):\n    &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; n&amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; or n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-attribute\"&gt;return&lt;/span&gt; n\n    &lt;span class=\"hljs-attribute\"&gt;return&lt;/span&gt; feb(n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#43; feb(n-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; i in range(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;):\n    &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; (i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) % &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(feb(i))\n        &lt;span class=\"hljs-attribute\"&gt;continue&lt;/span&gt;\n    &lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(feb(i), end &amp;#61;&amp;#39; &amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/697780619946199.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/67258061994617.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列用Python咋写", ["输出斐波那契数列前20项，每5个一行", "这个咋写问一下，不太明白怎么整这个斐波那契数列"]], "Tag": "算法设计"}
{"Answer": "child\r\ngrade_school", "Konwledge_Point": "Fibonacci数列", "Question": ["大家猜猜这个运行结果", ["父类：", "\npackage com.huawei.test;", "\n\n", "public class Parent {", "\n    protected String name = \"parent\";", "\n    protected String school = \"grade_school\";", "\n\n", "public void printName(){\n    System.out.println(name);\n}\n", "\n\n", "}", "\n\n", "子类：", "\npackage com.huawei.test;", "\n\n", "public class Child extends Parent{", "\n    private String name = \"child\";", "\n    private String school = \"colleage_school\";", "\n\n", "public static void main(String[] args) {\n    Parent parent = new Child();\n    parent.printName();\n    System.out.println(parent.school);\n}\n\npublic void printName(){\n    System.out.println(name);\n}\n", "\n\n", "}", "\n求打印结果是________?"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你想要看啥断点点在哪里&amp;#xff0c;debug就可以了&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["c＋＋中斐波那契数列项数", ["#include <stdio.h>", "\n", "double fib1(int n);    //非递归生成下标为n的斐波那契数列元素", "double fib2(int n);    //递归生成下标为n的斐波那契数列元素", "\n", "int main()", "{", "    int n;", "    printf(\"请输入斐波那契数列项数:\");", "    scanf(\"%d\", &n);", "    /", "printf(\"动态规划方法求解：第 %d 项斐波那契数列数值是 %.0f \\n\", n, fib1(n));", "/", "    printf(\"分治法求解：第 %d 项斐波那契数列数值是 %.0f \\n\", n, fib2(n));", "    return 0;", "}", "\n", "//动态规划方法求解", "\n", "double fib1(int n)", "{", "    int i = 0;", "    double a = 1;", "    double b = 1;", "    double result = 0;", "    if (n <= 0)", "    {", "        return 0;", "    }", "    else if (n <= 2)", "    {", "        return 1;", "    }", "    else", "    {", "        for (i = 3; i <= n; i++)", "        {", "            result = a + b;", "            a = b;", "            b = result;", "        }", "        return result;", "    }", "}", "\n", "//分治方法求解", "\n", "double fib2(int n)", "{", "    if (n <= 0)", "    {", "        return 0;", "    }", "    else if (n <= 2)", "    {", "        return 1;    //递归终止条件", "    }", "    else", "    {", "        return fib2(n - 1) + fib2(n - 2);    //递归", "    }", "}", "\n", "斐波那契数列（分治策略）", "这个代码如何加断点，求解斐波那契数列的第 40 项"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;F&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;span class=\"hljs-comment\"&gt;//斐波那契数列函数 递归形式&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-comment\"&gt;//初始化&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;F&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;F&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;);  &lt;span class=\"hljs-comment\"&gt;//如果n !&amp;#61; 1 &amp;amp;&amp;amp; n !&amp;#61; 2 进行递归运算&lt;/span&gt;\n}\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t,n;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;t);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(t--)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;F&lt;/span&gt;(n));\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["未输入就自己运行斐波那契数列", ["为什么这个我还没输入他就自己运行了", "想求的是斐波那契数列的第n项 用数组"]], "Tag": "算法设计"}
{"Answer": "&lt;a target='_blank' rel='nofollow' href='http://blog.csdn.net/jiankangshiye/article/details/6298092'&gt;C语言 -- 数学问题求解&lt;/a&gt;&lt;br/&gt;&lt;a target='_blank' rel='nofollow' href='http://blog.csdn.net/u011227986/article/details/46611859'&gt;黑马程序员--汉诺塔问题的递归求解C语言&lt;/a&gt;&lt;br/&gt;&lt;a target='_blank' rel='nofollow' href='http://blog.csdn.net/Zl1421169284/article/details/44777865'&gt;C语言数组初始化问题&lt;/a&gt;&lt;br/&gt;----------------------biu~biu~biu~~~在下问答机器人小D，这是我依靠自己的聪明才智给出的答案，如果不正确，你来咬我啊！", "Konwledge_Point": "Fibonacci数列", "Question": ["求解   C语言的数组问题", []], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;有两个小问题&amp;#xff0c;改正如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fibonacci1&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; m)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; pol, num[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; };\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (m &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)   &lt;span class=\"hljs-comment\"&gt;//将i&amp;gt;2换成m&amp;gt;&amp;#61; 2&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt;&amp;#61;m; i&amp;#43;&amp;#43;)   &lt;span class=\"hljs-comment\"&gt;//将i&amp;lt;m换成i&amp;lt;&amp;#61;m&lt;/span&gt;\n        {\n            pol &amp;#61; num[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#43; num[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n            num[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; num[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n            num[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; pol;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; pol;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["用循环计算斐波那契数列（fibonacci），我自己写了一个，找不出错误。", ["unsigned long fibonacci1(unsigned m)", "{", "    int i;", "    unsigned long pol,num[2]={1,1};", "\n", "if", "(i>", "2", ")\n{\n    ", "for", "(i=", "2", ";i<m;i++)\n    {\n        pol=", "num", "[", "0", "]+", "num", "[", "1", "];\n        ", "num", "[", "0", "]=", "num", "[", "1", "];\n        ", "num", "[", "1", "]=pol;\n    }\n    ", "return", " pol;    \n}\n", "else", " \n{\n    ", "return", " ", "1", ";\n}\n", "\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;n1 &amp;#61; 0\nn2 &amp;#61; 1\ncount &amp;#61; 1\nwhile True:\n    nth &amp;#61; n1 &amp;#43; n2\n    n1 &amp;#61; n2\n    n2 &amp;#61; nth\n    count &amp;#43;&amp;#61; 1\n    if nth&amp;gt;1000:\n        print(count)\n        break&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["兔子养殖场可饲养1000对兔子。如果有一对小兔子，按照斐波那契数列，求兔子在第几个月就放不下了。", ["你建了一个兔子养殖场，能同时饲养1000对兔子。如果你现在有一对小兔子，按照斐波那契数列，求兔子在第几个月就放不下了。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;溢出了&amp;#xff0c;就是超出了int的取值范围了啊&amp;#xff0c;把类型改成long long吧&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["C语言斐波那契数列第45个数错误", ["#include<stdio.h>", "int main()", "{", "int sum,f1=1,f2=1;", "int i;", "printf(\"%d\\n%d\\n\",f1,f2);", "for(i=1;i<=45;i++)", "{", "  sum=f1+f2;", "  f1=f2;", "  f2=sum;", "  printf(\"%d %d\\n\",i,sum);", "}", "return 0;", "｝", "\n", "run code后", "前面正确，后面第45个就开始不正确了", "44 1836311903", "45 -1323752223", "之前以为是超出了int的数值范围", "最后发现不是，不知道为什么"]], "Tag": "算法设计"}
{"Answer": "第一个数是1，第二个数是1，这是已经知道的，那么需要算出来的就是第三个到第n个数，总共算n-2次，for里面的i就是用来计数的。。。\r\n每次计算出的结果都是前面两个数的和，第一次计算就是求第一个数和第二个数的和作为第三个数，a=1,b=1,m=a+b=2,算出m以后，为了计算第四个数，那么就把a里面放上第二个数的值，所以放了b\r\nb里面再放上m，也就是第三个数的值，本轮计算结束，到第二次计算了，计算第二个数和第三个数的和作为第四个数，刚好a是第二个数，b是第三个数了，所以表达式还是m=a+b,算出第四个数，然后再往后推。。。直到计算完成", "Konwledge_Point": "Fibonacci数列", "Question": ["新手求助：关于菲波那契数问题怎么写？", ["菲波那契数", "\n\n", "【题目描述】", "\n菲波那契数列是指这样的数列: 数列的第一个和第二个数都为1，接下来每个数都等于前面2个数之和。给出一个正整数k，要求菲波那契数列中第k个数是多少。", "\n\n", "【输入】", "\n输入一行，包含一个正整数k。（1 ≤ k ≤ 46）", "\n\n", "【输出】", "\n输出一行，包含一个正整数，表示菲波那契数列中第k个数的大小。", "\n\n", "【输入样例】", "\n19", "\n【输出样例】", "\n4181", "\n\n", "#include<iostream>\nusing namespace std;\nint main()\n{int n,m,a=1,b=1;\ncin>>n;\nfor(int i=1;i<=n-2;i++)\n{\nm=a+b;\na=b;\nb=m;\n}\ncout<<b<<endl;\nreturn 0;\n}\n\n", "\n\n", "看不懂for语句里面的关系，求讲解"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;理解没问题&amp;#xff0c;i&amp;#61;3的时候就只是返回test&amp;#xff08;2&amp;#xff09;&amp;#43;test&amp;#xff08;1&amp;#xff09;&lt;br /&gt;i&amp;#61;3 的时候&lt;br /&gt;test(3)&lt;br /&gt;  --test&amp;#xff08;2&amp;#xff09;&amp;#43;test&amp;#xff08;1&amp;#xff09;&lt;br /&gt;&amp;#61;1&amp;#43;1&amp;#61;2&lt;/p&gt;\n&lt;p&gt;i&amp;#61;4&lt;br /&gt;test(4)&lt;br /&gt; -- test(3)&amp;#43;test(2)&lt;br /&gt;&amp;#61;3&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列中的return有疑问", ["def", " test(i):\n    ", "if", " i == ", "1", ":\n        ", "return", " ", "1", "\n    ", "if", " i == ", "2", ":\n        ", "return", " ", "1", "\n    ", "if", " i >= ", "3", ":\n        ", "return", " test(i - ", "1", ") + test(i - ", "2", ")\n\n", "\n", "这是求第i项的数字是多少的函数。", "\n", "这里对return有个疑问，如果函数参数i=1 返回1，然后退出函数。i=2，返回2，退出函数。", "\n", "如果i=3，他会返回一个test（2）+test（1）。重点是：我记得当执行return后，自动退出函数，所以函数不会再回到前两行找到test2与test1对应的数值，所有当i=3时候，只返回test（2）+test（1）。我不知道这样理解哪里错了，求各位指正，🙏！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;那就一边产生数列&amp;#xff0c;一边将数列存储到数组。&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["c语言，一个关于斐波那契数列的问题……", ["请问，有没有什么方法可以用数组来求斐波那契数列中的第n项？要用数组……"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;循环里每次相加都取余&amp;#xff0c;不要最后变成一个超大的数再取余&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列超长数字用什么整型?", ["我要求斐波那契数列的第100000000项取余，用longlong和double转int取余都不行，会输出负数……还有更长的整型吗？还是说其实问题不在这里？(p_q）"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; i, n&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, t1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, t2 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, nextTerm;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;; &amp;#43;&amp;#43;i)\n    {\n        n&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld &amp;#34;&lt;/span&gt;, t1);\n        nextTerm &amp;#61; t1 &amp;#43; t2;\n        t1 &amp;#61; t2;\n        t2 &amp;#61; nextTerm;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n%&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/84523355933613.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列前五十，每行五个", ["C语言打出斐波那西数列前五十个，每行五个怎么搞啊，磨半天了"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你可以参考一下&amp;#xff0c;希望采纳&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt;  &lt;span class=\"hljs-title class_\"&gt;Fibon&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* p;    &lt;span class=\"hljs-comment\"&gt;//数组首元素地址&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; len;   &lt;span class=\"hljs-comment\"&gt;//数组长度&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n    &lt;span class=\"hljs-built_in\"&gt;Fibon&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;  n &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n         &lt;span class=\"hljs-comment\"&gt;//这里用new定义长度为n的数组&lt;/span&gt;\n        len &amp;#61; n;\n        p &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[len];\n    }\n\n    ~&lt;span class=\"hljs-built_in\"&gt;Fibon&lt;/span&gt;()\n    {\n        &lt;span class=\"hljs-comment\"&gt;//这里释放数组内存空间&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;delete&lt;/span&gt; p;\n    }\n\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Disp&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;//计算斐波那契数列&amp;#xff0c;并打印数列&lt;/span&gt;\n};\n\n&lt;span class=\"hljs-comment\"&gt;//计算斐波那契数列&amp;#xff0c;并打印数列&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Fibon::Disp&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    p[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    p[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    cout &amp;lt;&amp;lt; p[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; p[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,cnt &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt; len; i&amp;#43;&amp;#43;) {\n        p[i] &amp;#61; p[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; p[i - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;];\n        cout &amp;lt;&amp;lt; p[i] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n        cnt&amp;#43;&amp;#43;;\n        \n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (cnt % &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)   &lt;span class=\"hljs-comment\"&gt;//每5个换行&amp;#xff0c;不需要可以删除&lt;/span&gt;\n            cout &amp;lt;&amp;lt; endl;\n    }\n    cout &amp;lt;&amp;lt; endl;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    cin &amp;gt;&amp;gt; n;\n    &lt;span class=\"hljs-function\"&gt;Fibon  &lt;span class=\"hljs-title\"&gt;f&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n)&lt;/span&gt;&lt;/span&gt;;\n    f.&lt;span class=\"hljs-built_in\"&gt;Disp&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/836598437356159.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["C++完善如下有关斐波那契数列的类Fibon，并在主函数中进行测试", ["class", "  ", "Fibon", "\n{   ", "int", " *p;    ", "//数组首元素地址", "\n    ", "int", " len;   ", "//数组长度", "\n  ", "public", ":\n", "Fibon", "( ", "int", "  n=", "1", ")\n{    …     ", "//这里用new定义长度为n的数组", "\n      }\n ~", "Fibon", "()\n  {    \n   … ", "//这里释放数组内存空间", "\n  }\n", "void", " ", "Disp", "()", ";  ", "//计算斐波那契数列，并打印数列", "\n};\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " n;\n    cin >> n;\n    ", "Fibon  ", "f", "(n)", ";\n    f.", "Disp", "();\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://www.cnblogs.com/panlq/p/9307203.html\"&gt;https://www.cnblogs.com/panlq/p/9307203.html&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列步骤不懂?", ["import sys", "\n", "def fibonacci(n): # 生成器函数 - 斐波那契", "    a, b, counter = 0, 1, 0", "    while True:", "        if (counter > n):", "            return", "        yield a", "        a, b = b, a + b", "        counter += 1", "f = fibonacci(10) # f 是一个迭代器，由生成器返回生成", "\n", "while True:", "    try:", "        print (next(f), end=\" \")", "    except StopIteration:", "        sys.exit()", "\n", "这个步骤不懂，哪里有详细教程嘛？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;fibonacci&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;index&lt;/span&gt;):\n  a,b &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; value &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(index):\n    a,b &amp;#61; b,a&amp;#43;b\n  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a\n\n&lt;span class=\"hljs-comment\"&gt;# while 循环查找小于t的最大数&lt;/span&gt;\nmax_num &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\nindex &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\nt &amp;#61; &lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;:\n  value &amp;#61; fibonacci(index)\n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; value &amp;gt; t:\n    &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n    max_num &amp;#61; value\n    index &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;小于&lt;span class=\"hljs-subst\"&gt;{t}&lt;/span&gt;的最大数&amp;#xff1a;&lt;span class=\"hljs-subst\"&gt;{max_num}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/856656029666154.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/019766029666136.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["请问要怎么用python写函数fun()，它的功能是求Fibonacci数列中小于t的最大的一个数，结果由函数返回。", ["请问要怎么用python写函数fun()，它的功能是求Fibonacci数列中小于t的最大的一个数，结果由函数返回。其中Fibonacci数列F(n)的定义为", "F(0)＝0，F(1)＝1", "F(n)=F(n-1)+F(n-2)", "例如：t=1000时，函数值为987。", "没有思路，请指导"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\ndef fab(&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;): &lt;span class=\"hljs-comment\"&gt;#&lt;/span&gt;\n    n,&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;,b&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# n 为循环次数&amp;#xff0c;ab为数列中两个连续值&lt;/span&gt;\n    fab_reasult&amp;#61;[] &lt;span class=\"hljs-comment\"&gt;# 存放结果的数组&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; n&amp;lt;&lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;:  &lt;span class=\"hljs-comment\"&gt;# 循环不够max次则继续&lt;/span&gt;\n        fab_reasult.append(b) &lt;span class=\"hljs-comment\"&gt;# 将第二个数放入结果里&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;,b&amp;#61;b,&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;&amp;#43;b  &lt;span class=\"hljs-comment\"&gt;# a,b &amp;#61; b,a&amp;#43;b  &amp;#xff0c;如 a,b&amp;#61;0,1&amp;#xff0c;运行后&amp;#xff0c;a&amp;#61;&amp;#61;1,b&amp;#61;&amp;#61;1&amp;#xff0c;再次运行则 a &amp;#61;&amp;#61; 1,b&amp;#61;&amp;#61;2&lt;/span&gt;\n        n&amp;#61;n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-comment\"&gt;# 循环次数加1&lt;/span&gt;\n    &lt;span class=\"hljs-literal\"&gt;return&lt;/span&gt; fab_reasult\nprint(fab(&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;))  &lt;span class=\"hljs-comment\"&gt;# 参数为9&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["python设计的斐波那契数列的程序", ["以下是用python设计的斐波那契数列的程序，请帮忙解答一下：", "1、fab(max)里的max是参数，但是下面的程序中只有n<max这个判断式用到了，但是并没有定义max是多少？这是为什么？", "2、函数中定义了变量n，但是n和a，b的关系并没有定义，所以n和a，b的关系是什么？", "3、要形成数列，a，b需要自增长，这里有没有定义，只有n的自加运算，请帮忙解释一下，谢谢", "\n", "\ndef fab(max):\n    n,a,", "b", "=0,0,1\n    fab_reasult=[]\n    ", "while", " n<max:\n        fab_reasult.append(b)\n        a,", "b", "=b,a+b\n        ", "n", "=n+1\n    return fab_reasult\n", "print", "(fab(9))\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;输出函数是什么&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["关于求斐波那契数列溢出的问题", ["关于求斐波那契数列的问题：", "\n", "我64位电脑，返回unsighed long long怎么才到47项就溢出了，不应该能算更多吗？谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,20&amp;#43;1):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;{:&amp;gt;8}&amp;#34;&lt;/span&gt;.format(fibo(i)), &lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i % 5 &amp;#61;&amp;#61; 0:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["用递归函数fibo求斐波拉且数列的第n项。程序中输出斐波拉且数列的前20项，要求每行输出5个数据，每个数据输出宽度为8并在宽度内右对齐。", ["def fibo(n):", "    if n==1 or n==2:", "        return 1", "    else:", "        return (fibo(n-1)+fibo(n-2))", "for i in range(1,20+1):", "    print(\"{:>8}\".format(fibo(i)), end=\" \",)", "\n", "我已经完成上面的代码了，但是不清楚如何每行输出五个", "效果图如下：", "\n", "   ", "1", "       ", "1", "       ", "2", "       ", "3", "       ", "5", "\n   ", "8", "      ", "13", "      ", "21", "      ", "34", "      ", "55", "\n  ", "89", "     ", "144", "     ", "233", "     ", "377", "     ", "610", "\n ", "987", "    ", "1597", "    ", "2584", "    ", "4181", "    ", "6765", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;首先def定义函数&amp;#xff0c;就是一个方法&amp;#xff0c;方便之后随便用这个方法的功能。蓝色的就是方法名字&amp;#xff0c;里面的n是一个参数&amp;#xff0c;必须要填&amp;#xff0c;而且根据后面的代码来看&amp;#xff0c;必须得是整数。&lt;br /&gt;&amp;#xff08;a&amp;#xff0c;b&amp;#xff09;&amp;#61;&amp;#xff08;0&amp;#xff0c;1&amp;#xff09;就是相当于 a &amp;#61; 0, b &amp;#61; 1&amp;#xff0c;定义了两个变量&amp;#xff0c; 分别赋予了值。&lt;br /&gt;while循环&amp;#xff0c;a&amp;lt;n就是直到a大于等于n之前&amp;#xff0c;这个循环里面包括的代码都会不停的被编译。&lt;br /&gt;print&amp;#xff0c;就是输出&amp;#xff0c;end &amp;#61; &amp;#34; &amp;#34;&amp;#xff0c;正常的print是会输出之后换行的&amp;#xff0c;就是默认end &amp;#61; &amp;#34;\\n&amp;#34;&amp;#xff0c;这里面改成了一个空格&amp;#xff0c;就是为了让输出排成一行。&lt;br /&gt;&amp;#xff08;a&amp;#xff0c;b&amp;#xff09;&amp;#61;&amp;#xff08;b&amp;#xff0c;a&amp;#43;b&amp;#xff09;就是斐波那契数列的运算方法&amp;#xff0c;这个数学方面&amp;#xff0c;不多解释。&lt;br /&gt;然后n &amp;#61; int(input())&amp;#xff0c; input就是获取你输入进来的东西&amp;#xff0c;因为input返回的是str类型&amp;#xff0c;而n需要是int&amp;#xff08;前面def说过&amp;#xff09;&amp;#xff0c;所以加一个int&amp;#xff0c;确保n是int&lt;br /&gt;最后就是调用&amp;#xff0c;方法&amp;#43;参数&amp;#xff0c;达到输出斐波那契数列的效果&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["这个斐波那契数列的代码怎么解释呀，哪位明白人给解释一下每一行的意思", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "\n", "这个斐波那契数列的代码怎么解释呀，哪位明白人给解释一下每一行的意思，谢谢大家"]], "Tag": "算法设计"}
{"Answer": "[quote]我可以只展示根节点下一级的节点，然后他点什么 我同过ajax 来实现 在下一个层次的节点展示，不知道这样是否合理？ [/quote]\r\n我觉得合理,EXJTS 就可以这么做..\r\n你的ID ,PID ,之前EXTJS项目也这么做过..", "Konwledge_Point": "Fibonacci数列", "Question": ["递归性能的提问", ["最近遇到了一个老问题，树状结构的无限级的分类，本来数据库设计的合理的话，其实也不是什么难题，但是数据库设计的定了，我也没有权利去修改，具体数据库设计室 id name url gif parentId，这样的设计大家应该很眼熟吧，呵呵，关键的字段就是id 和pid，这样的情况下，除了递归的求解，我实在想不出更好的解决办法，但是递归的问题对于性能的消耗是比较大的，递归来地归去，每次都是对象的在一起引用，大数据量的情况下，程序不死已经是万幸了。 ", "\n    由此，我就联想到了其他需要递归的api上，比如 xml的文件解析，json 传递 页面 js的eval解析，已经 后台的json.jar 的都是如何解析的？ ", "\n    我也看过一些源码，可是单步调我已经调晕了，朋友们谁有研究的，留下个思路，和解决办法。不必留源码，一个伪代码也可，只要能表明思路的就行，感谢大家。 ", "\n\n", "\n\n", "注： ", "\n\n", "我个人回头想了一下，关于无限级分类的问题，是不是不一定非得在后台把所有的数据都取出来呢？我可以只展示根节点下一级的节点，然后他点什么 我同过ajax 来实现 在下一个层次的节点展示，不知道这样是否合理？ \n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,b&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,n,i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,k&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;\n    cin&amp;gt;&amp;gt;n;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(n&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &amp;amp;&amp;amp; k&amp;lt;&amp;#61;n){\n        i&amp;#61;a&amp;#43;b;\n        a&amp;#61;b;\n        b&amp;#61;i;\n        k&amp;#43;&amp;#43;;\n    }\n    cout&amp;lt;&amp;lt;i;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列的第n项，哪里出错了？要用循环语句。", ["题目描述", "给定一个数列 1  1  2  3  5  8  13 求该数列的第n项", "\n", "输入", "一个整数n。", "输出", "一行，包含一个整数，表示该数列的第n项的值。", "\n", "样例输入 Copy", "1", "样例输出 Copy", "1", "\n", "写法如下，哪里有问题，最好能提供完整代码。", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Its compiler isn't as smart or mature as C's (at least not yet), but Go is still closer to C in its time performance than Python (space performance is a separate thing, and not what you asked about).  Just being a compiled language instead of an interpreted language gives it a major leg up in time performance over Python (and it is still faster than PyPy in general, but not as much faster).&lt;/p&gt;\n\n&lt;p&gt;Why compiled languages generally offer greater time performance than interpreted languages has been thoroughly covered elsewhere.  You can research this question on stackoverflow and elsewhere on the internet.  For example, here's the TL;DR in &lt;a href=\"https://stackoverflow.com/a/1694407/1964690\"&gt;one stackoverflow answer&lt;/a&gt; to that question:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Native programs run using instructions written for the processor they run on.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;And here's the TL;DR in &lt;a href=\"https://stackoverflow.com/a/1830215/1964690\"&gt;another answer&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Interpreted languages are slower because their method, object and global variable space model is dynamic&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You can also find plenty of benchmark case studies and results comparing implementations in different languages if you look for them.&lt;/p&gt;\n\n&lt;p&gt;Performance improvements to the Go compiler and Go toolchain are also frequently made, which you can read about in the release notes (and elsewhere) such as &lt;a href=\"https://golang.org/doc/go1.8#compiler\" rel=\"nofollow noreferrer\"&gt;this excerpt about version 1.8&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The new back end, based on static single assignment form (SSA), generates more compact, more efficient code and provides a better platform for optimizations such as bounds check elimination. The new back end reduces the CPU time required by our benchmark programs by 20-30% on 32-bit ARM systems.&lt;/p&gt;\n&lt;/blockquote&gt;\n    &lt;/div&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["Go如何如此快速地计算斐波那契递归？", ["\n\n", "This is not a correct version of it, I am just playing around Go but I was shocked how fast Go calculated the 42nd(43 actually) number in Fibonacci sequence.", "\n\n", "Can someone please explain how come it calculates it this fast? I tried comparing it to python(I know its slow compared to other languages) but python took > 1 minute and I had to break the recursion.", "\n\n", "package main\n\nimport \"fmt\"\n\nfunc fib(a uint) uint {\n    if a <= 1 {\n        return 1\n    }\n    return fib(a-1) + fib(a-2)\n}\n\nfunc main() {\n    fmt.Println(fib(42))\n}\n\n\n[ `go run Hello.go` | done: 2.316821835s ]\n433494437\n", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你试试unsigned long long看看&amp;#xff0c;范围更大些&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["用C语言打印斐波那契数列前50项", ["用C语言打印斐波那契数列前50项，最后几个是负数，如何解决。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;while循环内开始时将f1&amp;#61;f2&amp;#61;1;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["Fibonacci斐波那契数列求多组数据的时候就行不通了", ["#include<stdio.h>", "int main()", "{", "    int f0,f1,f2,f3;", "    int n,i;", "    f0=0;", "    f1=f2=1;", "    while(~scanf(\"%d\",&n)&&n!=-1){", "        if(n==0) printf(\"0\\n\");", "        else if(n==1||n==2) printf(\"1\\n\");", "        else", "        {", "            for(i=3;i<=n;i++)", "            {", "                f3=f1+f2;", "                f1=f2;", "                f2=f3;", "            }", "            printf(\"%d\\n\",f3);", "        }", "    }", "    return 0;", "}", "怎么改，拜托了这对我真的很重要"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;f[n]&amp;#61;f[n-2]&amp;#43;f[n-1]&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["C语言 按以下要求编写程序 fibonacci数列", ["编写程序求fibonacci数列，有40阶楼梯，从底往上爬，每次爬1阶或2阶，编算法说明共有多少走法。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;算加法别用double型&amp;#xff0c;用long long int&lt;br /&gt;double型有精度误差&amp;#xff0c;最后你跟1和2去判断总是不相等&amp;#xff0c;无限递归了&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列的代码运行结果", [" 用函数递归求斐波那契数列，发现数字一大就不能有结果了", "\n", "#", "include", "<stdio.h>\n#", "include", "<stdlib.h>\n", "int", " main", "()", "\n{\n    double ", "Fibonacci(", "double", " ", "a", ")", ";", "//声明Fibonacci函数", "\n    ", "int", " n = ", "0", ";\n    scanf", "_s(", "\"%d\"", ", &", "n", ")", ";\n    ", "Fibonacci(", "n", ")", ";", "//调用Fibonacci函数", "\n    printf(", "\"%.0f\\n\"", ", ", "Fibonacci(", "n", ")", ");\n    system(", "\"pause\"", ");\n    return ", "0", ";\n\n}\ndouble ", "Fibonacci(", "double", " ", "a", ")", "//定义Fibonacci函数", "\n{\n    double result = ", "0", ";\n    ", "if", " (a", " == ", "1", " || ", "a", " == ", "2", ") {\n        result = ", "1", ";\n    }\n    ", "else", " {\n        result = ", "Fibonacci(", "a", " - 1)", " + ", "Fibonacci(", "a", " - 2)", ";\n    }\n    return(result);\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;大佬要不来看看我写的这篇&lt;a id=\"textarea_1670805342615_1670805360384_0\"&gt;http://t.csdn.cn/sOeFe&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["关于#斐波那契数列#的问题，如何解决？", ["哎，搞了2个小时，面对斐波那契数列的问题以及一些基础概念还是不了解，有谁可以来讲解一下或者发个链接呀，困扰了我好长时间了"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;package&lt;/span&gt; com.wf.fx.demo01;\n\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; javafx.application.Application;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; javafx.event.EventType;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; javafx.scene.Scene;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; javafx.scene.control.Button;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; javafx.scene.control.Label;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; javafx.scene.control.TextField;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; javafx.stage.Stage;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.kordamp.bootstrapfx.scene.layout.Panel;\n\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; java.util.Arrays;\n\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;HelloApplication&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;extends&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Application&lt;/span&gt; {\n    &lt;span class=\"hljs-meta\"&gt;&amp;#64;Override&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;start&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Stage stage)&lt;/span&gt; {\n        &lt;span class=\"hljs-type\"&gt;Panel&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;panel&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Panel&lt;/span&gt;();\n        &lt;span class=\"hljs-type\"&gt;Label&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;label&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Label&lt;/span&gt;();\n        &lt;span class=\"hljs-type\"&gt;TextField&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;textField&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;TextField&lt;/span&gt;();\n        &lt;span class=\"hljs-type\"&gt;Button&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;button&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Button&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;计算&amp;#34;&lt;/span&gt;);\n        button.addEventHandler(EventType.ROOT,event -&amp;gt; {\n            label.setText(Arrays.toString(getF(Integer.parseInt(textField.getText()))));\n        });\n        panel.setBody(textField);\n        panel.setFooter(button);\n        panel.setHeading(label);\n        &lt;span class=\"hljs-type\"&gt;Scene&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;scene&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Scene&lt;/span&gt;(panel, &lt;span class=\"hljs-number\"&gt;320&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;240&lt;/span&gt;);\n        stage.setTitle(&lt;span class=\"hljs-string\"&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;);\n        stage.setScene(scene);\n        stage.show();\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(String[] args)&lt;/span&gt; {\n        launch();\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] getF(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; value) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;n&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; value;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] a &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;int&lt;/span&gt;[n];\n        a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n            a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt; a.length; i&amp;#43;&amp;#43;) {\n                a[i] &amp;#61; a[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; a[i - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;];\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a;\n    }\n\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列，求解答", ["必须在JavaFX技术框架下做，不可采用AWT或Swing技术。", "编写 GUI 程序。当用户在界面上输入任一个正整数 n 后，界面可显示 Fibonacci （斐波那契）数列第 n 项的值。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;应该是a&amp;#61;b*1.0/c&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/864763258746177.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["分数斐波那契数列求和，哪里错了？", ["题目描述 ", "\n", "给定一个数列 1/1  1/2  2/3  3/5  5/8  8/13  13/21  求该数列的前n项之和。 ", "\n", "输入 ", "\n", "一行，1个整数，表示要求和的总项数n (n>=1)。 ", "\n", "输出 ", "\n", "一行，包含1个浮点数，表示该数列的前n项之和。结果保留两位小数 ", "\n", "样例输入Copy", "2", "样例输出 Copy", "1.50", "\n", "写法如下，哪里不对？", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;def fib(m):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; m&amp;lt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; fib(m-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&amp;#43;fib(m-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n\nn &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(input())\n&lt;span class=\"hljs-built_in\"&gt;Sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\nfor i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    &lt;span class=\"hljs-built_in\"&gt;Sum&lt;/span&gt; &amp;#43;&amp;#61; fib(i)\n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;Sum&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["python提问 求Fibonacci数列前n项和", ["用递归方法编写求Fibonacci数列第m项值的函数fib(m)，并应用该函数求Fibonacci数列前n项的累加和，其中n由input输入。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, f2 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f &amp;#61; f1 &amp;#43; f2;\n            f1 &amp;#61; f2;\n            f2 &amp;#61; f;\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%8d&amp;#34;&lt;/span&gt;, f2);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i % &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列简单运用，简单运用", ["斐波那契数列是指这样的一个数列：1，1，2，3，5，8，13，21，...，", "\n", "这个数列从第3个数开始每个数都等于前两个数的和，请输出这个数列的前20项。", "\n", "输入格式:", "没有输入。", "\n", "输出格式:", "数据占域宽为8，每行输出5个数。", "\n", "输入样例:", "在这里给出一组输入。例如：", "\n", "输出样例:", "在这里给出相应的输出。例如：", "\n", "   ", "1", "       ", "1", "       ", "2", "       ", "3", "       ", "5", "\n   ", "8", "      ", "13", "      ", "21", "      ", "34", "      ", "55", "\n  ", "89", "     ", "144", "     ", "233", "     ", "377", "     ", "610", "\n ", "987", "    ", "1597", "    ", "2584", "    ", "4181", "    ", "6765", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;],s&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, n;\n    cin &amp;gt;&amp;gt; n;\n    a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n    {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;2&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n        {\n            a[i] &amp;#61; a[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; a[i - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;];\n            s &amp;#43;&amp;#61; a[i];\n        }\n        cout &amp;lt;&amp;lt; s&amp;#43;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列求和，可能是取模取不对", ["斐波那契数列，F1=F2=1，从第三项开始，每项等于前两项之和。约定S1=1，Sn<=Fn+1时，Sn+1=Sn+Fn+1，否则Sn+1=Sn-Fn+1。p=1000000007，因为结果可能很大，将计算过程中所有Fn和Sn取模。输入n，输出Sn。", "计算规则例如：S6=1+1+2-3+5+8=14。", "\n", "#include ", "using namespace std;", "int main()", "{", "    long int n;", "    long int p = 1000000007;", "    long int count;", "    long int a = 1;", "    long int b = 1;", "    long int sum = 1;", "    cin >> n;", "    for (count = 2; count <= n; count++) {", "        if (sum % p <= b % p) {", "            sum = sum + b;", "        } else if (sum % p > b % p) {", "            sum = sum - b;", "        }", "        b = b + a;", "        a = b - a;", "    }", "    cout << sum;", "    return 0;", "}", "不知道为什么总是不对，个人认为可能是取模的问题，求指点！🥺🥺"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我这里没什么问题啊&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/173487176736110.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/689997176736121.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列问题，求解答", ["  def fib(n):", "    ''' 生成并返回斐波那契数列的前n项组成的列表 '''", "    lt = [1, 1]", "    for i in range(2, n):", "        lt.append(lt[i-1] +lt[i-2])", "    return lt", "为什么我运行这行代码出现===？请问是哪里错了？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个看着没什么问题&amp;#xff0c;具体的题目是怎样的&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["使用数组编程计算Fibonacci数列前30个数", ["用数组计算Fibonacci数列的前30个数，并按每行五个数的格式输出。间隔为每个数据占8列，空格在后，“%-8d”.", "问题：总是提示输出格式错误", "\n", "#", "include", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{\n ", "int", " F[", "30", "] = { ", "1", ",", "1", " };\n ", "for", " (", "int", " i = ", "2", "; i < ", "30", "; i++)\n {\n  F[i] = F[i - ", "1", "] + F[i - ", "2", "];\n }\n ", "for", " (", "int", " i = ", "0", "; i < ", "30", "; i++)\n {\n  ", "printf", "(", "\"%-8d\\t\"", ", F[i]);\n    ", "if", "((i+", "1", ")%", "5", "==", "0", ")\n  {\n   ", "printf", "(", "\"\\n\"", ");\n  }\n }\n ", "return", " ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;循环&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;##  将斐波那契额序列&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;## 获取用户输入数据&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# nmber&amp;#61;input()&lt;/span&gt;\ndef fib_loop_while(n):\n    a, b &amp;#61; 0, 1\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(0, n):\n        a, b &amp;#61; b, a &amp;#43; b\n        yield a\n\n&lt;span class=\"hljs-comment\"&gt;#&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# for i in fib_loop_while(nmber):&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#     print(i, end&amp;#61;&amp;#39; &amp;#39;)&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; fib_loop_while(50):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i, &lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; fib_loop_while(100):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i, &lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; fib_loop_while(1000):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i, &lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;递归&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;# 递归&lt;/span&gt;\ndef rabbit2(n):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;&amp;#61;1 &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; &lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;&amp;#61;2):\n        return 1\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        return rabbit2(n-1)&amp;#43;rabbit2(n-2)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,50):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(rabbit2(i),&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,100):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(rabbit2(i),&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,1000):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(rabbit2(i),&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["2021.10.21 斐波那契数列", ["【每日一题】2021.10.21", "\n\n", "斐波那契数列F(1)=F(2)=1;n>2时 F(n)=F(n-1)+F(n-2)", "\n用递归和循环两种方法编程求F(50), F(100), F(1000)的值", "\n\n", "编程语言：包括但不限于Python"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;没有办法&amp;#xff0c;除非你求的是第n个斐波那契数是比较小的&amp;#xff08;n&amp;lt;50&amp;#xff09;可能50还大了&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/807780161366166.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;因为用递归的方式你进行了大量的重复计算。你可以在你函数中写个count 计数看你函数调用了多少次。&lt;br /&gt;斐波那契用迭代的方法是最佳选择&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["利用递推运算计算斐波那契数列超时", ["如题，在计算斐波那契数列时想到构造函数，但是报了超时错误。有没有办法使递归法不超时的写法，求指点"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Change your function to return res to this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; return func () int {\n\n    res := y\n    y = z\n    z = res + z\n\n    return res\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way you output the initial values first, and calculate the next values. Your current solution overwrites the initial values before they are returned.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["我应该在代码中进行哪些更改以生成从0 1 1开始的斐波那契数列", ["\n\n", "I've searched older questions, there are tons of them. However I couldn't find the answer to my case.", "\n\n", "\nfunc fibonacci() func() int {\n    y := 0\n    z := 1\n\n    return func () int {\n\n        res := y + z\n        y = z\n        z = res\n\n        return res\n\n    }\n}\n\nfunc main() {\n    f := fibonacci()\n    for i := 0; i < 10; i++ {\n        fmt.Println(f())\n    }\n}\n", "\n\n", "This produces 1 2 3 5 8 ", "\n\n", "What should I change (as little as possible) to get 0 1 1 2 3 5 8 ?", "\n\n", "Actually I managed to solve that if initial ", "y", " and ", "z", " were like this:", "\n\n", "    y := -1\n    z := 1\n", "\n\n", "But that's a fortunate hack, and I want a logical solution.", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;为什么是1&amp;#43;1&amp;#xff1f;&lt;br /&gt;还有return 需要先计算return后面的值啊&amp;#xff1f;所以说会先计算出n-1和n-2的斐波那契数列并加起来再返回&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["求解java斐波那契数列原理", ["public static long fibonacci(long number==5) {", " if ((number == 0) || (number == 1))", " return number;", " else", " return fibonacci(number - 1) + fibonacci(number - 2);", "}", "当递归完后是返回1+1吗 而且都已经return了 函数不应该结束吗"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;c&amp;#61;a&lt;br /&gt;a&amp;#61;b&lt;br /&gt;b&amp;#61;c&lt;br /&gt;这三句表示&amp;#xff0c;a和b交换数值&amp;#xff0c;c就是一个临时变量&lt;/p&gt;\n&lt;p&gt;第1次循环&amp;#xff1a; a &amp;#61; a&amp;#43;b &amp;#61; 2, 交换值后 a&amp;#61;1,b&amp;#61;2 输出c&amp;#61;2&lt;br /&gt;第2次循环&amp;#xff1a; a &amp;#61; a&amp;#43;b &amp;#61; 3, 交换值后 a&amp;#61;2,b&amp;#61;3 输出c&amp;#61;3&lt;br /&gt;第3次循环&amp;#xff1a; a &amp;#61; a&amp;#43;b &amp;#61; 5, 交换值后 a&amp;#61;3,b&amp;#61;5 输出c&amp;#61;5&lt;br /&gt;第4次循环&amp;#xff1a; a &amp;#61; a&amp;#43;b &amp;#61; 8, 交换值后 a&amp;#61;5,b&amp;#61;8 输出c&amp;#61;8&lt;br /&gt;....&lt;/p&gt;\n&lt;p&gt;另外在python中不用临时变量&amp;#xff0c;只要 a,b &amp;#61; b,a 就可以交换了&lt;br /&gt;所以这些代码可以简化成&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;):\n    print(b)\n    &lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;,b&amp;#61;a&amp;#43;&lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt;,a\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["Python斐波那契数列不引用函数怎么搞", ["\n", "求大佬解释一下这串代码什么意思（ﾟдﾟlll）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;最后一行的意思是&amp;#xff0c;把back2的值赋值给back1, 再把back1&amp;#43;back2的和赋值给back2。&lt;br /&gt;&lt;br /&gt;fib()函数是一个生成器函数&amp;#xff0c;它的作用是&amp;#xff0c;当每次调用next()方法&amp;#xff0c;就可以返回这个函数计算出的当前项的斐波那契数列的值。&lt;br /&gt;&lt;br /&gt;测试代码如下&amp;#xff1a;&lt;br /&gt;&lt;br /&gt;参考链接&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://www.codenong.com/41615756/\" id=\"textarea_1680833794629_1680833894613_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1 md_link_url\"&gt;\n         https://www.codenong.com/41615756/\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/weixin_44992737/article/details/125860953\" id=\"textarea_1680833794629_1680833894613_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1 md_link_url\"&gt;\n         https://blog.csdn.net/weixin_44992737/article/details/125860953\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=\"https://qb.zuoyebang.com/xfe-question/question/b1565033a69fae0837095a71193fcdee.html\" id=\"textarea_1680833794629_1680833894613_2\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1 md_link_url\"&gt;\n         https://qb.zuoyebang.com/xfe-question/question/b1565033a69fae0837095a71193fcdee.html\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\ndef fib():  &lt;span class=\"hljs-meta\"&gt;# 生成器函数&amp;#xff0c;用于返回当前项斐波那契数列的值&lt;/span&gt;\n    &lt;span class=\"hljs-meta\"&gt;#  https:&lt;span class=\"hljs-comment\"&gt;//www.codenong.com/41615756/&lt;/span&gt;&lt;/span&gt;\n    back1, back2 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-meta\"&gt;# back1赋值第一个值&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#xff0c;back2赋值为第二个值&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; True:\n        \n        &lt;span class=\"hljs-keyword\"&gt;yield&lt;/span&gt; back1  &lt;span class=\"hljs-meta\"&gt;# 返回back1的值&amp;#xff0c;但是函数不会退出&amp;#xff0c;等待下一次调用next()方法&lt;/span&gt;\n        &lt;span class=\"hljs-meta\"&gt;#  下面的作用相当于&amp;#xff0c;把back2的值赋值给back1, back1&amp;#43;back2的和赋值给back2&lt;/span&gt;\n        &lt;span class=\"hljs-meta\"&gt;#  back1  back2  back1&amp;#43;back2&lt;/span&gt;\n        &lt;span class=\"hljs-meta\"&gt;#     &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;     &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;      &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&lt;/span&gt;\n        &lt;span class=\"hljs-meta\"&gt;# print(&lt;span class=\"hljs-string\"&gt;&amp;#34;before: back1&amp;#61;&amp;#34;&lt;/span&gt;,back1,&lt;span class=\"hljs-string\"&gt;&amp;#34;,back2&amp;#61;&amp;#34;&lt;/span&gt;,back2)&lt;/span&gt;\n        back1,back2 &amp;#61; back2,back1&amp;#43;back2\n        &lt;span class=\"hljs-meta\"&gt;# print(&lt;span class=\"hljs-string\"&gt;&amp;#34;after: back1&amp;#61;&amp;#34;&lt;/span&gt;,back1,&lt;span class=\"hljs-string\"&gt;&amp;#34;,back2&amp;#61;&amp;#34;&lt;/span&gt;,back2)&lt;/span&gt;\n        \n\nfibNum &amp;#61; fib()\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in range(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;):\n    \n    &lt;span class=\"hljs-meta\"&gt;# https:&lt;span class=\"hljs-comment\"&gt;//blog.csdn.net/weixin_44992737/article/details/125860953&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=\"hljs-meta\"&gt;# https:&lt;span class=\"hljs-comment\"&gt;//qb.zuoyebang.com/xfe-question/question/b1565033a69fae0837095a71193fcdee.html&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=\"hljs-meta\"&gt;# 调用next()方法来获取一项斐波那契数列的值&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;斐波那契数列第&amp;#34;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-keyword\"&gt;str&lt;/span&gt;(i)&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;项为&amp;#xff1a;&amp;#34;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-keyword\"&gt;str&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;(fibNum)))\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/669323338086185.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["python生成器实现斐波那契数列", ["\n", "以上是生成斐波那契数列的代码，问最后一行是什么意思", "并解释一下代码"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;有具体的&amp;#xff0c;if(n&amp;#61;&amp;#61;0||n&amp;#61;&amp;#61;1) return 1&lt;br /&gt;这部分有具体实现了&amp;#xff0c;然后&lt;br /&gt;f(2)&amp;#61;f(1)&amp;#43;f(0)&amp;#61;2&lt;br /&gt;f(3)&amp;#61;f(2)&amp;#43;f(1)&amp;#61;3&lt;br /&gt;以此类推&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列，采用递归时", ["为啥最后return返回的是两个函数相加的结果呢，那个函数没有具体，可是那个函数没有具体运算呀！不应该返回的是(n-1)+(n-2)吗"]], "Tag": "算法设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I assume you are talking about improving the time complexity (and not the code complexity).&lt;/p&gt;\n\n&lt;p&gt;Your solution computes the Fibonacci numbers in O(n) time. Interestingly, there exists an O(log n) solution as well. &lt;/p&gt;\n\n&lt;p&gt;The algorithm is simple enough: Find the nth power of matrix A using a Divide and Conquer approach and report (0,0)th element, where&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; A = |1     1 |\n     |1     0 |\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The recursion being &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; A^n = A^(n/2) * A^(n/2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Time complexity:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;T(n) = T(n/2) + O(1) = O(logn)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you think about it with a piece of paper, you'd find that the proof is simple and is based upon the principle of induction.\nIf you still need help, refer to &lt;a href=\"http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibformproof.html\" rel=\"nofollow\"&gt;this link&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;NOTE: Of course, the O(logn) time is true only if you want to find the nth Fibonacci number. If, however, you intend to print ALL of the &lt;em&gt;n&lt;/em&gt; fib numbers, theoretically, you can not have a better time complexity than you already have.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["转到斐波那契数列生成器", ["\n\n", "This is my fibonacci generator:", "\n\n", "package main\n\nimport \"fmt\"\n\nfunc main() {\n    for i, j := 0, 1; j < 100; i, j = i+j,i {\n        fmt.Println(i)\n    }\n}\n", "\n\n", "It's working, but I don't know how can I improve it, I'd like more expert approaches about it, Thanks...", "\n    "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;解题思路&amp;#xff1a;先写一个方法&amp;#xff0c;判断是否是合数&amp;#xff1b;然后再写一个方法&amp;#xff0c;用于获取要求的值&amp;#xff1b;最后在主方法中调用即可。&lt;br /&gt;所以我是由下至上的写的&amp;#xff0c;如果有所帮助的话&amp;#xff0c;希望博主采纳。&lt;br /&gt;运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/268351387336148.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Test01&lt;/span&gt; {\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(String args[])&lt;/span&gt; {\n        &lt;span class=\"hljs-type\"&gt;Scanner&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;sc&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Scanner&lt;/span&gt;(System.in);\n        System.out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入一个整数&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;num&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; sc.nextInt();\n\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;result&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; returnNUmber(num);\n        System.out.println(result);\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;//返回最后的结果值&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;returnNUmber&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt; {\n        &lt;span class=\"hljs-comment\"&gt;//设置合数个数变量&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;k&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;num1&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;num2&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;num3&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-comment\"&gt;//设置循环&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (k !&amp;#61; n) {\n            num3 &amp;#61; num1 &amp;#43; num2;\n            num1 &amp;#61; num2;\n            num2 &amp;#61; num3;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (ifNumber(num3)&amp;#61;&amp;#61;&lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;){\n                k&amp;#43;&amp;#43;;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; num3;\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;//判断该数是否是合数&amp;#xff0c;合数&amp;#xff1a;除1和它本身以外&amp;#xff0c;还能被其他正整数整除&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;boolean&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;ifNumber&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n % i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["java写斐波那契数列求合数", ["import java. util. * ;", "public class Fibonacci{", "      public static void main(String args[ ]){", "            Scanner in=new Scanner(System.in);", "            int n=in.nextInt( );", "            int k1=1,k2=1,k3;", "            for(int i=3;i<n;i++){", "                  k3=k1+k2;", "                  k1=k2;", "                  k2=k3;0000", "                  int sqrt=(int)Math.sqrt(n);", "                  for(int j=2;i<=sqrt;i++)", "                  {", "                        if(k3 % i != 0)", "                  System.out.printf(\"%d\",k3);", "                  }", "}      }}", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;函数最后你要加上return s;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["递归求斐波那契数列：,为何会造成这？为何呀", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "###### 我想要达到的结果\n```c\n", "#", "include", " ", "<stdio.h>", "\n", "int", " ", "f", "(", "int", " n)", ";\n", "int", " ", "main", "()", "\n", "{\n  ", "int", " n;\n", "scanf", "(", "\"%d\"", ",&n);\n", "f", "(n);\n", "return", " ", "0", ";\n}\n", "int", " ", "f", "(", "int", " n)", "\n", "{\n  ", "int", " s;\n  ", "if", "(n==", "0", ")\n      s=", "0", ";\n  ", "if", "(n==", "1", ")\n      s=", "1", ";\n   ", "if", "(n>=", "2", ")\n        s=", "f", "(n", "-2", ")+", "f", "(n", "-1", ");\n", "printf", "(", "\"%d  \"", ",s);\n}\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第一个循环里面把a[0]和a[1]的值改变了&amp;#xff0c;可以试试下面这样改&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;},i,t;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;19&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        a[i]&amp;#61;a[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43;a[i&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i%&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%12d&amp;#34;&lt;/span&gt;, a[i]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}  \n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["用数组元素输出斐波那契数列", ["\n", "哪里写错了吗？为什么第一项和第二项不正确啊？程序和结果都附上了，帮忙看一下子。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;range范围把40改成N&amp;#43;1&amp;#xff0c;可以参考下面代码&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;N &amp;#61; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;input&lt;/span&gt;())\nf &amp;#61; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] * &lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;\nf[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], f[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\nprint(f&amp;#34;{f[0]}\\t{f[1]}&amp;#34;, end&amp;#61;&amp;#34;\\t&amp;#34;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, N &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n    f[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;] &amp;#61; f[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; f[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]\n    print(f[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;], end&amp;#61;&amp;#34;\\t&amp;#34;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["python循环输出斐波那契数列串", ["麻烦大家帮我看看，请问要如何输出N个斐波那契数？要如何在f里面切出N个数？谢谢大家！不胜感激", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;因为你定义的Fibonacci()函数是返回空类型&amp;#xff0c;你想表达的意思应该是通过这个函数来实现对num[]数组的计算。&lt;br /&gt;但是函数就相当于是一个盒子&amp;#xff0c;在一个盒子里面的定义的变量就只有这个盒子可见&amp;#xff0c;所以说main()函数里面的num[]数组和你在Fibonacci()函数中定义的num[]数组其实不是同一个数组&amp;#xff0c;他们只不过是有相同的名字罢了。&lt;br /&gt;这里如果你想利用自己定义的函数解题的话可能会涉及到指针相关的知识&amp;#xff0c;不知道同学有没有学习到指针。提前了解一下没有坏处&amp;#xff0c;指针可是C语言的灵魂&amp;#xff0c;有一句话叫做“没学指针&amp;#xff0c;就是没学C语言”。建议自己翻翻书&amp;#xff0c;或者搜搜相关的博客&amp;#xff0c;当然我自己写的也有一篇关于指针的博客&amp;#xff0c;欢迎观看哦  嘿嘿嘿&lt;br /&gt;下面是我在你的代码上进行的修改&amp;#xff0c;不出意外的话应该就是你想表达的意思&amp;#xff0c;自己慢慢琢磨&amp;#xff0c;指针还是有一定难度的&lt;br /&gt;值得赞同的是思路没问题&amp;#xff0c;剩下的就交给知识储备了&amp;#xff0c;慢慢来&lt;br /&gt;快期末考试了   加油加油  一起进步  &lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Fibonacci&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *num,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,num[&lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;],i;\n    num[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    num[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    &lt;span class=\"hljs-built_in\"&gt;Fibonacci&lt;/span&gt;(num,n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i%&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%4d&amp;#34;&lt;/span&gt;,num[i]);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Fibonacci&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *num,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        num[i]&amp;#61;num[i&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;]&amp;#43;num[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;];\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["为什么运行不起来?斐波那契数列", ["求菲波拉契数列的前N（小于40）项；在main函数中定义数组，用数组做函数参数。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你定义了febnaqi(m)函数并没有调用它&amp;#xff0c;而且fib(m - 1) 和fib(m - 2) 肯定会出现小于1的情况&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;def &lt;span class=\"hljs-built_in\"&gt;fib&lt;/span&gt;(n):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n &amp;lt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Error&amp;#34;&lt;/span&gt;);\n    elif n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;fib&lt;/span&gt;(n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;fib&lt;/span&gt;(n - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &amp;#61; int(input());\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, n &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;fib&lt;/span&gt;(i), end&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;  &amp;#34;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;望采纳&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["用Python写斐波那契数列，为啥报错啊", ["Python 写斐波那契数列，出现报错，返回相加那里出现报错，说是不可操作类型。", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第15行输出数列这里&amp;#xff0c;每个数之间最好有间隔。&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["fibonacci数列这样写算不算正确写法（指数组由数组计算赋值）", ["考研需要标准写法，问一下这样的写法符不符合规范", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n\n", "int", " ", "main", "()", "\n", "{\n", "int", " a[", "40", "],i;\na[", "0", "]=", "1", ";\na[", "1", "]=", "1", ";\n", "for", "(i=", "2", ";i<", "40", ";i++)\n{\n    a[i]=a[i", "-1", "]+a[i", "-2", "];\n}\n", "for", "(i=", "0", ";i<", "40", ";i++)\n{\n    ", "printf", "(", "\"%d\"", ",a[i]);\n}\n", "return", " ", "0", ";\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;或&amp;#xff0c;11行是||&lt;br /&gt;(m&amp;lt;0 || m&amp;gt;k || k&amp;gt;&amp;#61;45)&lt;br /&gt;其他的看起来像没问题。&lt;br /&gt;有帮助的话采纳一下哦&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["求m与k项之间的斐波那契数列之和", ["哪里有错?实在看不出来，大一一枚，初学者刚刚接触数组，还望各位神仙行行好教我一下"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;n是输入参数n&amp;#xff0c;为啥结果也用n&amp;#xff0c;这样可能会导致fac传参错误&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fac&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        n &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fac&lt;/span&gt;(n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;fac&lt;/span&gt;(n - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; n;\n}\n修改为\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fac&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n       &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;fac&lt;/span&gt;(n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;fac&lt;/span&gt;(n - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["对斐波那契数列进行前n项和求解", ["\n", "#", "include", "<stdio.h>", "\n", "int", " ", "fac", "(", "int", " n)", "\n", "{\n    ", "if", " (n == ", "1", " || n == ", "2", ")\n        n = ", "1", ";\n    ", "else", "\n        n = ", "fac", "(n - ", "1", ") + ", "fac", "(n - ", "2", ");\n    ", "return", " n;\n}\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " n, i, c = ", "0", ";\n    ", "printf", "(", "\"输入项数：\"", ");\n    ", "scanf", "(", "\"%d\"", ", &n);\n    ", "for", " (i = n; i > ", "1", "; i--)\n    {\n        c = c + ", "fac", "(i) + ", "fac", "(i - ", "1", ");\n    }\n    ", "printf", "(", "\"和为%d\"", ", c/", "2", "+(", "fac", "(", "1", ")+", "fac", "(n))/", "2", ");\n}\n\n", "\n", "如上所示，我准备通过该代码实现对斐波那契数列进行前n项和求解", "首先，我通过递归函数实现对斐波那契数列的第n项求值，其后，通过一个for循环实现求取n项和。", "但根据分析，for函数输出的值应是前n项和的两倍（除去首项与尾项）", "如：输入4，即n，i被赋值为4，进入for循环，当i=4时，c=fac（4）+fac（3），随即i减一，i=3，将多加一次fac（3），以此类推，除去首项尾项，其它项都多加了一次。", "故最后输出时用c/2+（fac（1）+fac（n））/2来消去多加的中间项，得出的答案即为斐波那契数列的前n项和。", "如图", "\n", "\n", "但当我验证时，却发现有一种情况不符合我的猜想，当输入3的倍数时得出的值不符，如输入3，应得4，输出却为3，输入6应得20，但输出值却是19，输入9，应得88，输出却为87，但输入除3倍数的其它值均正常，为正确结果，符合预期。", "研究了半天，终究没有找到问题所在，故来寻求帮助。", "\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;if(n&amp;#61;&amp;#61;1)&lt;br /&gt;if(n&amp;#61;&amp;#61;2)&lt;br /&gt;你只写了一个等号啊&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["请问我这代码哪里错了（山寨斐波那契数列）", ["这是题目：", "这是我粗写的代码：", "\n", "这是不是得调用函数啊", "刚学函数不知道怎么运用"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;需要分数结果吗&amp;#xff1f;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; fractions import Fraction\n\n&lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;int(input())\n&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;a&amp;#61;1\n&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;2\n&lt;span class=\"hljs-attribute\"&gt;s&lt;/span&gt;&amp;#61;Fraction(b,a)\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; i&amp;lt;n:\n    a,&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;b,a&amp;#43;b\n    s&amp;#43;&amp;#61;Fraction(b,a)\n    i&amp;#43;&amp;#61;1\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(0) &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n&amp;lt;&amp;#61;0 &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(s)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列多项式求和", ["问题遇到的现象和发生背景", "\n", "有一个分数序列： 2/1   3/2    5/3    8/5   13/8    21/13等等。求出这个数列的前 n 项之 和， n 由键盘输入 。", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, b &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,c;\n    c &amp;#61; a &amp;#43; b;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; c &amp;lt;&amp;#61; t; i&amp;#43;&amp;#43;)\n    {\n        c &amp;#61; a &amp;#43; b;\n        a &amp;#61; b;\n        b &amp;#61; c;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; c;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Input n please:&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;n&amp;#61;%d,f&amp;#61;%d\\n&amp;#34;&lt;/span&gt;, n, &lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(n));\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["用自定义函数求出斐波那契数列的下一项", ["明明是很基础的东西，但我还是觉得C语言好难学啊", "凑够三十个字好难啊"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;一个问题是你这结果肯定不行&amp;#xff0c;第60项int类型肯定不够用&amp;#xff0c;也用double类型吧。&lt;br /&gt;如果超时&amp;#xff0c;建议不要用递归&amp;#xff0c;用迭代吧。递归消耗比较大&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["C语言 函数斐波那契数列", ["n=60的时候运行超时了，有什么优化的方法嘛", "#include <stdio.h>", "int F(double n);", "int main()", "{", "    double n;", "    scanf(\"%lf\",&n);", "    printf(\"%d\",F(n));", "    return 0;", "}", "int F(double n)", "{", "    int result;", "    if(n==1) result = 1;", "    else if(n==2) result = 1;", "    else result = F(n-1)+F(n-2);", "    return result;", " }"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, f2 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, f3;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%12d \\n%12d \\n&amp;#34;&lt;/span&gt;, f1, f2);\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;38&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        f3 &amp;#61; f1 &amp;#43; f2;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%12d \\n&amp;#34;&lt;/span&gt;, f3);\n        f1 &amp;#61; f2;\n        f2 &amp;#61; f3;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列不知道哪里有问题", ["斐波那契数列不知道哪里有问题看了好多次的就是想不明白问题出在哪里"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个可能你对scanf的理解有误。输入-1&amp;#xff0c;只会使n的值等于-1&amp;#xff0c;而scanf函数的返回值是1。因为scanf返回值表示接收到了几个数&amp;#xff0c;而不是输入的是什麽值。因此你应该先scanf(&amp;#34;%d&amp;#34;,&amp;amp;n)&amp;#xff0c;然后判断n!&amp;#61;-1&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f[&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;],n;\n    f[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; f[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    cin&amp;gt;&amp;gt;n;   &lt;span class=\"hljs-comment\"&gt;//既然是C&amp;#43;&amp;#43;语言&amp;#xff0c;还是用cin比较好&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(n!&amp;#61;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;j&amp;lt;&amp;#61;n;j&amp;#43;&amp;#43;)\n              f[j] &amp;#61; f[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43; f[j&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;];\n        cout&amp;lt;&amp;lt;f[n]&amp;lt;&amp;lt;endl;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列求和1111", ["当输入-1时 循环不应该结束了吗 为什么还会继续输出呢  哪里错了呀", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;优化&amp;#xff1a;if 循环一般是if……elif……else  &amp;#xff0c;不是if……if……if&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["【提问】斐波那契数列", ["def ", "test", "(", "n", "):\n    x = []\n    ", "for", " i ", "in", " ", "range", "(1, ", "n", " + 1):\n        ", "if", " i == 1:\n            ", "return", " 1\n        ", "if", " i == 2:\n            ", "return", " 1\n        ", "if", " i >= 3:\n            ", "return", " ", "test", "(i - 1) + ", "test", "(i - 2)\n```css\n\n\n\n\n```        x.", "append", "(", "test", "(i))\n    ", "if", " ", "n", " == 1:\n        ", "return", " 1\n    ", "if", " ", "n", " == 2:\n        ", "return", " 1\n    ", "if", " ", "n", " >= 3:\n        ", "return", " ", "test", "(", "n", " - 1) + ", "test", "(", "n", " - 2)\n\n\n", "print", "(", "test", "(5))\n\n", "\n", "执行test（5）结果是1", "（用i控制数列中的每项数字，将其放入f数组。n为第n项数字）希望最后，x数组存入前n项的数字，n现实第n项的数字。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\nL&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[1,1]&lt;/span&gt;\nwhile len(L)&amp;lt;&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;:\n    L&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(L&lt;span class=\"hljs-selector-attr\"&gt;[-1]&lt;/span&gt;&amp;#43;L&lt;span class=\"hljs-selector-attr\"&gt;[-2]&lt;/span&gt;)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(L)&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["Python列表的相关简单问题", ["我会求斐波那契数列，但是不会用列表的形势输出", "。asddwosjdhdbdksiwjsnzjwjskebxgukenz"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这fun函数只有一个输入参数&amp;#xff0c;没法用n-1项来计算第n项&amp;#xff0c;但是仍然可以用递归。运行结果如下&amp;#xff1a;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/802127041156114.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; x)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, b &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; tm &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; fi &amp;#61; (&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;)a / b * &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(x, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * tm);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (fi &amp;lt; &lt;span class=\"hljs-number\"&gt;1.0e-6&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; sum;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (tm % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            sum &amp;#61; sum &amp;#43; fi;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            sum &amp;#61; sum - fi;\n        tm&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t &amp;#61; a &amp;#43; b;\n        a &amp;#61; b;\n        b &amp;#61; t;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(x);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; sum;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; x;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        cin &amp;gt;&amp;gt; x;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (x &amp;gt; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; &amp;amp;&amp;amp; x &amp;lt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            cout &amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;f(x)&amp;#61;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(x) &amp;lt;&amp;lt; endl;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;输入参数错误&amp;#34;&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n            \n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["递归求级数问题，cosx的幂级数", ["如何将斐波那契数列和后面的x结合，是否可以使用迭代法，比如n项待等于n-1项乘以一个式子"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, b &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, n, k &amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;)\n    {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;n &amp;#61; &amp;#34;&lt;/span&gt;;\n        cin &amp;gt;&amp;gt; n;\n\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (n &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &amp;amp;&amp;amp; k &amp;lt;&amp;#61; n) {\n            i &amp;#61; a &amp;#43; b;\n            a &amp;#61; b;\n            b &amp;#61; i;\n            k&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-comment\"&gt;//sum &amp;#43;&amp;#61; i;&lt;/span&gt;\n        }\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;num &amp;#61; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;\n    }\n    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列求和，看着简单，就是写不对。", ["题目描述", "给定一个数列 1  1  2  3  5  8  13  21求该数列的前n项之和。 ", "\n", "输入", "一行，1个整数，表示要求和的总项数n (n>=1)。", "输出", "一行，包含1个整数，表示该数列的前n项之和。 ", "\n", "样例输入 Copy", "4", "样例输出 Copy", "7", "\n", "写法如下，谁帮我看下哪里不对，谢谢啦。", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,b,c,i;\n   a &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n   b &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n   &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;1 1 &amp;#34;&lt;/span&gt;);\n   &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i &amp;lt; &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;;i&amp;#43;&amp;#43;){\n       c &amp;#61; a &amp;#43; b;\n       &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,c);\n       a &amp;#61; b;\n       b &amp;#61; c;\n   }\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["求数列 1 1 2 3 5 8 13 21…的前30个数", ["用for循环语句输出斐波那契数列的前三十个数…………………………………………"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;加一句int n;&lt;br /&gt;printf(&amp;#34;%d&amp;#34;,i);改成scanf(&amp;#34;%d&amp;#34;,&amp;amp;n);&lt;br /&gt;最后一个for循环拿掉&amp;#xff0c;最后return前加一句printf(&amp;#34;%d&amp;#34;,a[n]);&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["求斐波那契数列，求解!", ["哪儿错了，求解答!谢谢", "\n", "这是题目", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; fib(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;) {\n  &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n   return &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;;\n\n  &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, b &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n  for (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n   a &amp;#61; a &amp;#43; b;\n   b &amp;#61; a - b;\n   a %&amp;#61; &lt;span class=\"hljs-number\"&gt;1000000007&lt;/span&gt;;\n  }\n  return a;\n }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列实现问题，不知道哪儿错了", ["int", " fib(", "int", " ", "n", ") {\n    ", "if", " (", "n", " == ", "0", " )\n        return ", "n", ";\n\n    ", "int", " a = ", "1", ", b = ", "0", ";\n    for (", "int", " i = ", "1", "; i < ", "n", "; i++) {\n        a = a + b;\n        b = a - b;\n        a %= ", "1000000007", ";\n    }\n    return a;\n}\n"]], "Tag": "算法设计"}
{"Answer": "非递归的话是不断更新两个斐波那契数来实现求n个斐波那契数，递归的话是不断的把一个斐波那契数表示成两个斐波那契数的和的形式，然后找到最低端的斐波那契数，然后不断的回溯。", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列的递归和非递归法两种表示方法能解释一下是为什么呢？", ["非递归法", "\n    unsigned long long Fibonacci(unsigned long long n)", "\n    {", "\n    int n1, n2, temp, i;", "\n    if (n > 2)", "\n        for (n1 = 1, n2 = 1, i = 3; i <= n; i++)", "\n        {", "\n            temp = n1 + n2;", "\n            n1 = n2;", "\n            n2 = temp;", "\n        }", "\n    else n2 = 1;", "\n\n", "return n2;\n", "\n\n", "}", "\n递归法", "\n    unsigned long long Fibonacci(unsigned long long n)", "\n    {", "\n        if(n > 2)", "\n                return Fibonacci(n - 1) + Fibonacci(n - 2);", "\n            else", "\n                return 1;", "\n    }"]], "Tag": "算法设计"}
{"Answer": "数组的，顺带把前面的几个问题都采纳了吧。\r\n```\r\n  #include &lt;stdio.h&gt;\r\n\r\nint main()\r\n{\r\nint f[100];\r\nf[0]=1,f[1]=1,f[2]=2;\r\nint m,n;\r\nscanf(\"%d%d\",&amp;m,&amp;n);\r\n//获取输入的m，n的值\r\nint i=2;\r\nwhile(f[i]&lt;n){\r\n    if(f[i]&gt;m)\r\n        printf(\"%d ,\",f[i]);\r\n        f[i+1]=f[i]+f[i-1];\r\n        i+=1;\r\n}\r\n\r\n   return 0;\r\n}\r\n```", "Konwledge_Point": "Fibonacci数列", "Question": ["C语言问题新人求解 一道编程题目 ", ["输出[m,n]范围内的所有斐波那契（Fibonacci）数，m,n这两个数由键盘输入。", "\n【提示】", "\n1,1,2,3,5,8,13,21,34,……这是斐波那契（Fibonacci）数列的前几项。斐波那契数列的特点：前两项均为1，后面任意一项都是其前面两项之和。", "\n本实验虽然只要求输出在[m,n]范围内的斐波那契数，但是依然需要从第1个Fibonacci数开始依次得到下一个，并判断是否是需要输出的那个。", "\n\n", "用一维数组的？怎么写   要有一维数组啊！！！！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;通过多次提交&amp;#xff0c;我发现有三个问题&amp;#xff0c;一是没有多次循环&amp;#xff0c;二是没用long long&amp;#xff0c;三是不用判断是否为1或2&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列求解C++，提交后W了", ["Description", "已知a[1]=1,a[2]=1,a[n]=a[n-1]+a[n-2]，求解a[n]的值，n<=90", "\n", "Input", "多组输入，每组一行，输入n，n<=90", "\n", "Output", "一行一个a[n]", "\n", "#", "include", "<iostream>", "\n", "using", " ", "namespace", " std;\n", "int", " ", "main", "()", " ", "{\n    ", "int", " n;\n    ", "while", " (cin >> n) {\n        ", "int", " a[", "100", "];\n        ", "for", " (", "int", " i = ", "3", "; i <= n; i++) {\n\n            a[", "1", "] = ", "1", ";\n            a[", "2", "] = ", "1", ";\n            a[i] = a[i - ", "1", "] + a[i - ", "2", "];\n        }\n        cout << a[n];\n    }\n    ", "return", " ", "0", ";\n}\n\n", "\n", "OJ提交后结果：", "Wrong Answer50%    "]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Power&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; x, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;( n &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; )\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;n ;i&amp;#43;&amp;#43;)\n        {\n            sum *&amp;#61; x;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; sum;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Fi&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;( &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n )&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;  &lt;span class=\"hljs-built_in\"&gt;Fi&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;Fi&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;) ;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;{\n     &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; t&amp;#61;x;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;( n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; t;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;){\n\n            t&amp;#43;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;Power&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;,i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)*&lt;span class=\"hljs-built_in\"&gt;Fi&lt;/span&gt;(i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;) * &lt;span class=\"hljs-built_in\"&gt;Fi&lt;/span&gt;(i)*&lt;span class=\"hljs-built_in\"&gt;Power&lt;/span&gt;(x,i*&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;);\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; t;\n\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; x;\n    cin &amp;gt;&amp;gt; x&amp;gt;&amp;gt;n;\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(n,x);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契级数和的计算", ["如何将斐波那契数列和后面的x级数结合递归求和，是否能通过一个函数完成，还是需要将斐波那契单独为一个函数"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这是递归调用。&lt;br /&gt;调用过程是&amp;#xff0c;首先 System.out.println(fib(4));调用fib(4)&lt;br /&gt;在fib(4)中n&amp;#61;4&amp;#xff0c;&lt;br /&gt;执行到 fib1&amp;#61;fib(n-1);时等于是调用fib(3)&lt;br /&gt;在fib(3)中n&amp;#61;3&amp;#xff0c;&lt;br /&gt;又执行到 fib1&amp;#61;fib(n-1);时等于是调用fib(2)&lt;br /&gt;在fib(2)中 直接return 1;&lt;br /&gt;又回到在fib(3)中执行到 fib2&amp;#61;fib(n-2);时等于是调用fib(1)&lt;br /&gt;在fib(1)中也是直接return 1;&lt;br /&gt;又回到在fib(3)中继承执行 fib2&amp;#61;fib(n-2);之后的代码&amp;#xff0c;输出:&lt;br /&gt;n&amp;#61;3&lt;br /&gt;n1:2&lt;br /&gt;n2:1&lt;br /&gt;fib1&amp;#61;1:fib2&amp;#61;1&lt;br /&gt;fib3&amp;#61;2&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;等执行到return fib3;会回到fib(4)中又执行 fib2&amp;#61;fib(n-2);等于是又调用fib(2)一次。&lt;br /&gt;在fib(2)中return 1;&lt;br /&gt;又回到在fib(4)中继承执行 fib2&amp;#61;fib(n-2);之后的代码&amp;#xff0c;输出:&lt;br /&gt;n&amp;#61;4&lt;br /&gt;n1:3&lt;br /&gt;n2:2&lt;br /&gt;fib1&amp;#61;2:fib2&amp;#61;1&lt;br /&gt;fib3&amp;#61;3&lt;/p&gt;\n&lt;hr /&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["java关于不死神兔子的繁殖理解（斐波那契数列--兔子繁殖）", ["第一次发贴求解，自学java，关于不死神兔代码的理解卡壳了，原理基本懂:f(n)=f(n-1)+f(n-2);", "代码如下：", "\n", "public", " ", "class", " DiGui {\n    \n    ", "public", " static ", "void", " main(String[] args) {\n        ", "System", ".", "out", ".println(fib(", "4", "));\n        \n    }\n    ", "public", " static ", "int", " fib(", "int", " n) {\n        ", "if", "(n == ", "1", " || n == ", "2", ") {\n            ", "return", " ", "1", ";\n        }", "else", " {\n            ", "int", " fib1,fib2,fib3;\n            fib1=fib(n", "-1", ");\n                        fib2=fib(n", "-2", ");\n                        fib3=fib1+fib2;\n            ", "System", ".", "out", ".println(\"n=\"+n);\n            ", "System", ".", "out", ".println(\"n1:\"+(n", "-1", "));\n            ", "System", ".", "out", ".println(\"n2:\"+(n", "-2", "));\n            ", "System", ".", "out", ".println(\"fib1=\"+fib1+\":\"+\"fib2=\"+fib2);\n            ", "System", ".", "out", ".println(\"fib3=\"+fib3);\n            ", "System", ".", "out", ".println(\"--------------------\");\n            ", "return", " fib3;\n        \n        }\n    }\n\n}\n\n\n", "\n", "运行的如果如下：", "\n", "n=3\nn1:2\nn2:1\nfib1=1:fib2=1\n", "fib3=2\n--------------------", "\nn=4\nn1:3\nn2:2\nfib1=2:fib2=1\n", "fib3=3\n--------------------", "\n3\n\n", "\n", "不理解的地方是：fib(n-1)和fib(n-2)，输出的结果是：", "                                           fib1=fib(n-1); 当n=4时：fib1=2、当n=3时：fib1=1", "                                           fib2=fib(n-2); 当n=4时：fib2=1、当n=3时：fib2=1", "请问该如何理解？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;],s,i;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;],&amp;amp;a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d &amp;#34;&lt;/span&gt;,a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;],a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        a[i]&amp;#61;a[i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#43;a[i-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;];\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;br /&gt; 觉得有用的话&lt;font color=\"red\"&gt;&lt;strong&gt;采纳&lt;/strong&gt;&lt;/font&gt;一下哈&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["Fibonacci数列在c 语言中的算法", []], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;应该是‘\\t’&lt;br /&gt;&amp;#39;/t&amp;#39;会输出12148&amp;#xff0c;&amp;#39;/u&amp;#39;会输出12149&amp;#xff0c;对应acall码发现不对&amp;#xff0c;暂时不知道为什么&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["水平制表符怎么使用（c++）", ["输出斐波那契数列的前20项，想水平制表，并且每5个数字换一行，可是使用了'/t'之后整体就都不对了", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;实际来说这可不止是两个scanf&amp;#xff0c;因为还有一个scanf在循环里边&amp;#xff0c;执行多少次取决于你第一次输入的值&amp;#xff0c;第一次scanf是为了确定你后边输入的次数。后边循环的scanf 是为了接收你后边输入的值&amp;#xff0c;比如第一次输入3&amp;#xff0c;你后边就得输入三次&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/540800993666125.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列输入格式问题", ["问题遇到的现象和发生背景", "\n", "\n", "有点读不懂题目和输入格式，为什么要用两个scanf。", "\n", "用代码块功能插入代码，请勿粘贴截图"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;PTA  oj的特色 不用管&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["C语言，忽略了scanf返回值", ["题目如下：", "斐波那契数，亦称之为斐波那契数列，指的是这样一个数列：0、1、1、2、3、5、8、13、21、……，这个数列从第3项开始，每一项都等于前两项之和。这里我们定义另外一种斐波那契数列： F(0) = 7, F(1) = 11, F(n) = F(n-1) + F(n-2) (n>=2)。编程计算该数列的前n（n<1000000）项是否能被3整除。", "我的代码如图：", "\n", "\n", "问题如图：", "\n", "请问忽略了返回值是什么意思，我的问题该怎么处理呢？谢谢解答"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;def fqn_list(n):\n    list1 &amp;#61; []\n    a, b &amp;#61; 1, 1\n    for i in range(n-1):\n        a, b &amp;#61; b, a&amp;#43;b\n        list1.append(a)\n    list1.append(b)\n    return list1\n\nprint(fqn_list(10))&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["小白来提问！Python", ["写一个函数实现斐波那契数列(1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377…)。要求：接收一个参数，返回一个存着等量值的列表。如接收的参数值为5，则返回斐波那契数列前5个数的列表。"]], "Tag": "算法设计"}
{"Answer": "```\r\nwhile(f[i]&lt;n){\r\n       f[i+1]=f[i]+f[i-1];\r\n        i+=1;\r\n}\r\nfor(int j=0;j&lt;f.length;j++){\r\nif(f[i]&gt;m){\r\n        printf(\"%d ,\",f[i]);\r\n}else{\r\nbreak;}\r\n}\r\n \r\n```", "Konwledge_Point": "Fibonacci数列", "Question": ["一道C语言编程问题求解答如何写呢", ["输出[m,n]范围内的所有斐波那契（Fibonacci）数，m,n这两个数由键盘输入。", "\n【提示】", "\n1,1,2,3,5,8,13,21,34,……这是斐波那契（Fibonacci）数列的前几项。斐波那契数列的特点：前两项均为1，后面任意一项都是其前面两项之和。", "\n本实验虽然只要求输出在[m,n]范围内的斐波那契数，但是依然需要从第1个Fibonacci数开始依次得到下一个，并判断是否是需要输出的那个。", "\n用一维数组的？怎么写 要有一维数组啊！！！！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这个可以把第一项改成1&amp;#xff0c;提高速度&lt;br /&gt;而且 n 是全局变量&amp;#xff0c;在 gcd() 和 main() 中又定义了&lt;br /&gt;修改代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;gcd&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;gcd&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)&amp;#43;&lt;span class=\"hljs-built_in\"&gt;gcd&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    cin&amp;gt;&amp;gt;n;\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;gcd&lt;/span&gt;(n)&amp;lt;&amp;lt;endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["程序设计 -- 斐波那契数列", ["观察数列规律，求这个数列的第 ", "n", "个数。", "1", "、", "1", "、", "2", "、", "3", "、", "5", "、", "8", "、", "13", "、…\n输入格式\n一行，一个整数 ", "n", "\n输出格式\n一行， 一个整数\n输入样例", "1", "\n", "5", "\n输出样例", "1", "\n", "5", "\n输入样例", "2", "\n", "12", "\n输出样例", "2", "\n", "144", "\n能改一改这下面吗\n", "\n", "#", "include", "<iostream>", "\n", "using", " ", "namespace", " std;\n", "int", " n;\n", "int", " ", "gcd", "(", "int", " n)", "{\n    ", "if", "(n==", "1", ")    ", "return", " ", "0", ";\n    ", "if", "(n==", "2", ")    ", "return", " ", "1", ";\n    ", "else", "    ", "return", " ", "gcd", "(n", "-1", ")+", "gcd", "(n", "-2", ");\n}\n", "int", " ", "main", "()", "{\n    ", "int", " n;\n    cin>>n;\n    cout<<", "gcd", "(n+", "1", ")<<endl;\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "首先先开一个数组，把斐波那契数列存到数组里，然后再读入两个数字m和n，寻找数组中满足条件数字，输出来\r\n\r\n```\r\n #include&lt;stdio.h&gt;\r\nint main()\r\n{\r\n\tint f[100];\r\n\tint m, n, i;\r\n\r\n\tf[0] = 1; f[1] = 1;\r\n\tfor (i = 2; i &lt; 100; i++)f[i] = f[i - 1] + f[i - 2];\r\n\r\n\tscanf(\"%d%d\", &amp;m, &amp;n);\r\n\t\r\n\tfor (i = 0; f[i] &lt; m; i++);\r\n\tfor (; f[i]&lt;n; i++) printf(\"%d \",f[i]);\r\n\r\n\treturn 0;\r\n}\r\n```\r\n程序有些小毛病没有太细致的修改。比如斐波那契数列后续的数目越来越大，int很有可能存不下，如果m和n比较大的话会出错。如果出现这种情况，建议你用long或者更大的数来存。再有，我默认了m比较小而n比较大。如果程序有其他要求或条件的话，需要进行相应的修改", "Konwledge_Point": "Fibonacci数列", "Question": ["新人求解一道C语言问题！！！！", ["输出[m,n]范围内的所有斐波那契（Fibonacci）数，m,n这两个数由键盘输入。", "\n【提示】", "\n1,1,2,3,5,8,13,21,34,……这是斐波那契（Fibonacci）数列的前几项。斐波那契数列的特点：前两项均为1，后面任意一项都是其前面两项之和。", "\n本实验虽然只要求输出在[m,n]范围内的斐波那契数，但是依然需要从第1个Fibonacci数开始依次得到下一个，并判断是否是需要输出的那个。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;假设重复输入一个大数&amp;#xff0c;那么每次都会对这个大数进行F(n)求解&amp;#xff0c;即每一次你都是从0开始&amp;#xff0c;所以你可以用数组arr暂存F(n)的解&amp;#xff0c;如果arr[n] &amp;#61; 0&amp;#xff0c;则求解arr[n]&amp;#61;arr[n-1]&amp;#43;arr[n-2]&amp;#xff0c;否则返回arr[n]&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["代码输出时间超限怎么解决？", ["问题:", "小D这几天喜欢上了斐波那契数列！我们都知道，斐波那契数列的递归定义是：", " (F1=1，F2=1，Fn=Fn-1+Fn-2(n≥3))，现在他想知道数列的第n项是奇数还是偶数，请你帮他算一算。", "输入", "输入数据包含多组测试数据，每个测试实例占一行，每行为一个数，表示斐波那契数列的第n项(1≤n<10^9)", "输出", "输出斐波那契数列的第n项是奇数还是偶数，奇数输出even，偶数输出odd，对于每个测试实例，输出一行。", "代码:", "#include <stdio.h>", "int F(int n)", "{", "    if(n==1||n==2)", "        return 1;", "    else", "        return F(n-1)+F(n-2);", "}", "\n", "int main()", "{", "    int n;", "    while(scanf(\"%d\",&n)!=EOF)", "    {", "        if(F(n)%2!=0)", "            printf(\"even\\n\");", "        else", "            printf(\"odd\\n\");", "    }", "    return 0;", "}", "这个代码时间超限，有什么解决办法吗？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如果我的回答对你有帮助&amp;#xff0c;可以点击【采纳】按钮&amp;#xff0c;给采纳一下吗&amp;#xff0c;谢谢。&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["求大佬帮忙解答这个python斐波那契数列代码怎么续", ["\n", "def fib(n):\n    if n==1:\n        print(1)\n    elif n==2:\n        print(1,1)\n    elif n>2:\n        print(1,1,end=\" \")\n    count = 0\n    n1 = 1\n    n2 = 1\n    while count < n-2:\n        nth = n1 + n2\n        print(nth,end=\" \")\n        # add your program here to complete it"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;fib_n&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:        \n        a &amp;#61; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]        \n        i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;:\n            t &amp;#61;  a[i-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#43; a[i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(t)) &amp;#61;&amp;#61; n:\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; t, i\n            a.append(t)\n            i &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\nb &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;#34;&lt;/span&gt;))\ns,j &amp;#61; fib_n(b)\n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#34;Fib(&lt;span class=\"hljs-subst\"&gt;{j}&lt;/span&gt;) &amp;#61; &lt;span class=\"hljs-subst\"&gt;{s}&lt;/span&gt;&amp;#34;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["python如何寻找第一个n位的斐波那契数", ["自定义函数Fib_n(n)计算斐波那契数列中第一次出现n位数字的是哪一项，返回项的序号及该数。输入待寻找的斐波那契数列中第一次出现的位数n，调用Fib_n()函数计算并输出满足要求的项的序号及数。", "输入", "[1,1000]范围内的一个整数", "输出", "第一次出现的该数长度的斐波那契数", "样例输入", "10", "样例输出", "Fib(45)=1134903170", "\n", "我的问题是 如何递归？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;条件改为a[i]&amp;#43;a[i&amp;#43;1] &amp;gt; 100&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["输出小于100的斐波那契数列，为啥总是多一个", ["代码如下：", "a=[1,1]", "for i in range(100):", "    if a[-1]>100:", "        break", "    a.append(a[i]+a[i+1])", "for i in a:", "    print(i)", "总是多一个144"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;就是右对齐输出 你可以百度c语言右对齐输出&amp;#xff0c;如果编译器不支持&amp;#xff0c;可以试试其他设置方案喽&amp;#xff0c;应该还是设置printf的输出&amp;#xff0c;&lt;br /&gt;感觉是你这个编译器不支持吧&amp;#xff0c;我在vs2019上测试是可以的&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/256950496746173.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["c语言 数列分行输出格式", ["要求是分行输出斐波那契数列", "这种格式怎么输出啊？", "好像是右对齐，又不是右对齐？？", "请教各位", "我的意思是怎么输出这种要求格式，第一行前两个右对齐，但后三个不是右对齐？好难弄", "(图像: auto-orient,1)"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;换行的决定在这个语句&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt;((i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)%&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)/*每输出&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;个数就换行*/\n    &lt;span class=\"hljs-attribute\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果你不想换行可以将其删除&lt;br /&gt;如果你想改变换行数可以改变%后面的数字,现在是5,你可以将其改变为任何&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;font style=\"color:#f00\"&gt;有帮助请采纳,有问题继续交流,你的采纳是对我回答的最大的肯定和动力&lt;/font&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["为什么每输入五个就要换行啊", ["#include<stdio.h>", "int main (void)", "{", "    int i;", "    int fib[10]={1,1};//数组初始化，生成斐波那契数列前两个数", "    //动态数组未初始化，其余元素不能确定", "\n", "/*计算斐波那契数列剩余的8个数*/", "\n", "for", "(i=", "2", ";i<", "10", ";i++){\n", "fib", "[i]=", "fib", "[i-", "1", "]+", "fib", "[i-", "2", "];}\n\n", "/*输出斐波那契数列*/", "\n ", "for", "(i=", "0", ";i<", "10", ";i++){\n    ", "printf", "(", "\"%d \"", ",", "fib", "[i]);\n    ", "if", "((i+", "1", ")", "%", "5", "==", "0", ")", "/*每输出5个数就换行*/", "\n    ", "printf", "(", "\"\\n\"", ");\n}\n", "return", " ", "0", ";\n", "\n", "}"]], "Tag": "算法设计"}
{"Answer": "修改后的代码如下：\r\n```asm\r\n.model small\r\n.stack \r\n.data\r\n\ttotal equ 10\r\n\tcount dw 0\t;count=0相当于宏替换，不是在内存中的，不能给值\r\n\tid    dw 0  ;id=0问题同count\r\n\tFibonacci dw total dup(0)\r\n.code\r\nstart: \r\n\tmov ax,@data\r\n\tmov ds,ax\r\n\tmov ax,1\r\n\tmov bx,0\r\n\tmov cx,total\r\n\t;mov count,0\t      ;变量不能做索引\t  \r\n\tmov si,0              ;因此，我们用si做索引\r\nagain:\r\n\tmov Fibonacci[si],ax  ;变量不能做索引\r\n\tmov id,ax\r\n\tadd ax,bx\r\n\tmov bx,id\r\n\t;inc count\r\n\tinc si\r\n\tinc si\t\t\t\t   ;dw为字长，索引增长2\r\n\tloop again\r\n\t;mov ah,4ch或mov ax,4c00h才是退出\r\n\t;原先的mov ax,4ch相当于mov al,4ch，没有选择功能号，无意义\r\n\tmov ax,4c00h\t\t\t\t\r\n\tint 21h\r\nend start\r\n```\r\n问题已在注释中说明，主要是语法错误，经检验算法正确，运行结果如下：\r\n![运行情况](https://img-ask.csdn.net/upload/201711/13/1510585833_343114.png)\r\n\r\n即\r\n&gt; 1 1 2 3 5 8 13 21 34 55\r\n\r\n主要语法问题：\r\n- `=`和`equ`都是宏替换，汇编器不为为二者开辟内存空间，向此处赋值不予通过\r\n- 某块内存不能作索引，可作索引的有`bx`，`si`，`di`以及栈指针寄存器`bp`和`sp`\r\n- 数组每个元素为字长，因此`si`作索引每次循环后加2\r\n- `ah`赋值`4ch`才是调用`int 21h`的`4ch号`功能，而不是给`ax`赋值4ch", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波契那数列，汇编问题，求找出问题。急急急", [" .model small\n\n.stack \n\n.data\n\ntotal equ 10\n\ncount = 0\nid    =0\nFibonacci  dw total dup(0)\n\n\n.code\n\nstart: \n\n          mov ax,@data\n\n            mov ds,ax\n\n            mov ax,1\n\n            mov bx,0\n\n            mov cx,total\n\n            mov count,0\n\n\nwhile:      mov Fibonacci[count], ax\n\n            mov id,ax\n\n            add ax,bx\n\n            mov bx,id\n\n            inc count\n\n            loop while\n\n            mov ax,4ch\n\n            int 21h\n\n            end start\n", "\n\n", "出现好几个错误，汇编新手，急用，谢谢。求告知问题所在。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;for(b&amp;#61;1;b&amp;lt;&amp;#61;n;b&amp;#43;&amp;#43;)&lt;br /&gt;z定义为long long&amp;#xff0c;那么建议x,d也定义成long long&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["斐波那契数列求第n项这样写为什么不对？", ["#include <stdio.h>", "#include <stdlib.h>", "int main(void)", "{", "int n,b=0,x=1,d=0;", "long long z=0;", "scanf(\"%d\",&n);", "for(b=0;b<=n;b++)", " {", "z=x+d;", "x=d;", "d=z;", " }", "printf(\"%lld\",z);", "return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "兔子的规律为数列，1，1，2，3，5，8，13，21 \r\npublic class Fobonacci1 {  \r\n    public static void main(String[]args){       int f1 = 1;      int f2 = 1;      int sum = 0; \r\n     for(int i = 3; i &lt;= 12; i++){       sum = f1 + f2;       f1 = f2;       f2 = sum;      \r\n \r\n     } \r\nSystem.out.println(\"一对兔子一年内（12个月）能繁殖成\" + sum + \"对。\"); \r\n } }", "Konwledge_Point": "Fibonacci数列", "Question": ["JAVA初学者，学了，if  while for 了，有个人想知道，一年之内一对兔子能繁殖多少对？", ["有个人想知道，一年之内一对兔子能繁殖多少对？于是就筑了一道围墙把一对兔子关在里面。已知一对兔子每个月可以生一对小兔子，而一对兔子从出生后第3个月起每月生一对小兔子。假如一年内没有发生死亡现象，那么，一对兔子一年内（12个月）能繁殖成多少对？（提示：斐波那契数列）", "\n顺便说下思路数！感谢》"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;printf(&amp;#34;s&amp;#61;%lf&amp;#34;,s);&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["有关斐波那契数列的1000项加减 求纠正       求s=2/1-3/2+5/3-...", ["#include<stdio.h>", "#include<math.h>", "int main()", "{", "    int a=1,b=1,i=1,e,n=1000;", "    double d,s=0;", "    for(i=1;i<=n;i++)", "        {", "            d=(a+b)/b;", "            s+=((i%2)*2-1)*d;", "            e=a+b;", "            a=b;", "            b=e;", "        }", "    printf(\"s=%lf\",&s);", "    return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "# 如果问题得到解决，请点我回答左上角的采纳和向上的箭头，谢谢\r\n\r\n```\r\n#include &lt;iostream&gt;\r\nusing namespace std;\r\n\r\nclass A\r\n{\r\nprivate:\r\n\tint n;\r\npublic:\r\n\tA(int x) { n = x; }\r\n\tvoid print()\r\n\t{\r\n\t\tint a = 1;\r\n\t\tint b = 1;\r\n\t\tfor (int i = 0; i &lt; n; i++)\r\n\t\t{\r\n\t\t\tcout &lt;&lt; a &lt;&lt; endl;\r\n\t\t\tb = b + a;\r\n\t\t\ta = b - a;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nint main()\r\n{\r\n\tA a(10);\r\n\ta.print();\r\n\treturn 0;\r\n}\r\n```\r\n![图片说明](https://img-ask.csdn.net/upload/201811/28/1543384825_150413.gif)", "Konwledge_Point": "Fibonacci数列", "Question": ["这个题目啥意思，看不懂", ["题目:请编写一个类，这个类需要有一个正整数的私有属性，并且有一个公有方法能够求出并打印属性值所斐波那契数列对应的项目，比如这个类的整数属性为n，则该方法需更找出斐波那契数列的n项。需要编写主函数验证。(斐波那契数列为f1=1", "\n,f2=1,f3=2,fn=fn-1+fn+1"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n &amp;#61; Convert.&lt;span class=\"hljs-constructor\"&gt;ToInt32(Console.ReadLine()&lt;/span&gt;);\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; x &amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;; x &amp;lt; n; x&amp;#43;&amp;#43;)\n{\nj &amp;#61; i &amp;#43; j;\ni &amp;#61; j - i;\n}\nConsole.&lt;span class=\"hljs-constructor\"&gt;WriteLine(&lt;span class=\"hljs-params\"&gt;j&lt;/span&gt;)&lt;/span&gt;;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;纯手工一笔一划写的。可能也就只有我一个人手工回答了&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["没啥思路，给点思路吧", ["本关任务：编写一个程序,计算斐波那契数列前N项的和。N由键盘输入。"]], "Tag": "算法设计"}
{"Answer": "你好。\r\n首先，mun的值没有变成mun1+mun2。因为，先将mun2的值复制给了mun,此处仅仅是把mun2的值复制给mun,随后mun 和mun2便没有任何联系了。\r\n对于上述三行代码：斐波那契数列是：1、1、2、3、5、8、13、21、34....开始时，mun1=1,mun2=2    然后经过一次循环上述三行代码后，mun1=1,mun2=2\r\n再经过一次循环后，mun1=2,mun2=3  由此可见这三行代码是将mun1,mun2依次后移\r\n由斐波那契数列公式可知：f(n)=f(n-1)+f(n-2)\r\n希望能够帮助你理解", "Konwledge_Point": "Fibonacci数列", "Question": ["求解答《斐波那契数列算法》的代码注释— 题目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？", ["public static void rabbit() {\n        int mun1=1,mun2=1;\n        int mun;\n        int month=10;\n        for(int i=1;i<=month;i++) {\n        if(i<=2) {\n        System.out.println(\"第\"+i+\"个月的兔子总数量是1对\");\n                 }else {\n                mun=mun2;\n                mun2=mun1+mun2;\n                mun1=mun;\n        System.out.println(\"第\"+i+\"个月的兔子\n            总数量是\"+mun2+\"对\");\n            }\n        }\n", "\n\n", "```重点解答一下\n", "\n\n", "                mun=mun2;\n                mun2=mun1+mun2;\n                mun1=mun;\n            System.out.println(\"第\"+i+\"个月的兔子\n            总数量是\"+mun2+\"对\");\n", "\n\n", "这串代码的意思，数学不好搞了一个小时没搞明白为什么是这样子写，\n**mun**的值在**mun2=mun1+mun2**这串代码里是否也变成**了mun1+mun2?**\n"]], "Tag": "算法设计"}
{"Answer": "使用System.nanoTime()要比System.currentTimeMillis()精确：\r\nlong start = System.nanoTime();\r\nFuction A  process.........\r\nlong end = System.nanoTime();\r\nLog.e(\"TimeCost: \", String.valueOf(end - start));", "Konwledge_Point": "Fibonacci数列", "Question": ["Java Eclipse  怎么来对代码执行时间计时呢？", ["我写了一段求斐波那契数列的java代码，没有用递归   想和使用递归的方式求斐波那契数列进行一个计算时间对比。     Eclipse有工具可以计时代码执行时间吗？  如果没有的话，应该插入什么来进行计时呢？", "\n\n", "貌似可以用系统时间来进行计时，开始和结束的时候都输出系统时间。但是有没有更好的方式呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, n, t1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, t2 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, nextTerm;\n \n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输出几项: &amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n \n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;斐波那契数列: &amp;#34;&lt;/span&gt;);\n \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; &amp;#43;&amp;#43;i)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, t1);\n        nextTerm &amp;#61; t1 &amp;#43; t2;\n        t1 &amp;#61; t2;\n        t2 &amp;#61; nextTerm;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["再来看看这一个测试题", ["编程输出斐波那契数列的前n项。隻波那契数列是前两项为1，从第3项开始，每项都是前两项之和。输入正整数n (n<=30)，输出斐波那契数列的前n项。项之间用一个空格分隔，最后一项之后也有一个空格，", "输入", "10", "输出"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;public static Integer getNumF(List&amp;lt;Integer&amp;gt; list){\n        if (list.size() &amp;#61;&amp;#61; 40){\n            return list.get(list.size() - 1);\n        }else{\n            if (list.size() &amp;lt; 2){\n                list.add(1);\n                return getNumF(list);\n            }else{\n                Integer integer &amp;#61; list.get(list.size() - 1);\n                Integer integer2 &amp;#61; list.get(list.size() - 2);\n                list.add(integer &amp;#43; integer2);\n                return getNumF(list);\n            }\n        }\n    }&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["求Fibonacci数列：1,1,2,3,5,8…第四十个数的值，（使用递归）", ["求解答，必定采纳。求解答，必定采纳。求解求解"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; fib &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, a &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, b &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %ld\\n&amp;#34;&lt;/span&gt;,i, fib);\n\n        b &amp;#61; fib;\n        fib &amp;#43;&amp;#61; a;\n        a &amp;#61; b;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["这两个问题的代码 以及分析过程和算法", ["求Fibonacci数列的前10项中奇数项的累和（显示项序号和项值）", "求Fibonacci数列的前十项中第一个值超过10的的项（显示项序号和项值）"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;#include &amp;lt;stdio.h&amp;gt;\n \nint main()\n{\n    int i, n, t1 &amp;#61; 0, t2 &amp;#61; 1, nextTerm;\n \n    printf(&amp;#34;输出几项: &amp;#34;);\n    scanf(&amp;#34;%d&amp;#34;, &amp;amp;n);\n \n    printf(&amp;#34;斐波那契数列: &amp;#34;);\n \n    for (i &amp;#61; 1; i &amp;lt;&amp;#61; n; &amp;#43;&amp;#43;i)\n    {\n        printf(&amp;#34;%d, &amp;#34;, t1);\n        nextTerm &amp;#61; t1 &amp;#43; t2;\n        t1 &amp;#61; t2;\n        t2 &amp;#61; nextTerm;\n    }\n    return 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p style=\"text-align:center\"&gt;&lt;img alt=\"\" src=\"https://img-ask.csdnimg.cn/upload/1622589203951.gif\" /&gt;&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["帮忙看看，谢谢了，马上要期末考试了", ["斐波那契数列在c语言中有几种方法可以做出来呀，可以列举出来嘛"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;test&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(len)&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;let&lt;/span&gt; fibonacciArr &amp;#61; [&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n        &lt;span class=\"hljs-keyword\"&gt;let&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fibonacci&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(len)&lt;/span&gt; {\n            &lt;span class=\"hljs-keyword\"&gt;let&lt;/span&gt; leng &amp;#61; fibonacciArr.length\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (leng &amp;lt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;) {\n                fibonacciArr.push(fibonacciArr[i] &amp;#43; fibonacciArr[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n                i&amp;#43;&amp;#43;\n            } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; fibonacciArr\n            }\n            fibonacci(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;)\n        }\n        fibonacci(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; fibonacciArr\n    }\n    console.&lt;span class=\"hljs-built_in\"&gt;log&lt;/span&gt;(test(&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;))\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; test(&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["JavaScript如何在全局拿到函数作用域内的变量", ["以下是求斐波那契数列的一个函数，我想", "return", "出新的数组，但是似乎只能", "return", "出函数\n", "\n", "let", " fibonacciArr = [", "1", ", ", "1", "]\n", "let", " i = ", "0", "\n", "function", " ", "fibonacci", "(", "quantity", ") {\n  ", "let", " leng = fibonacciArr.", "length", "\n  ", "if", " (leng < quantity) {\n    fibonacciArr.", "push", "(fibonacciArr[i] + fibonacciArr[i + ", "1", "])\n    i++\n  } ", "else", " {\n    ", "// return console.log(fibonacciArr)", "\n    ", "return", " (", "function", " (", "newArr", ") { ", "return", " ", "console", ".", "log", "(newArr) }(fibonacciArr))\n  }\n  ", "fibonacci", "(quantity)\n}\n", "fibonacci", "(", "8", ")\n", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/597697583536136.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["for嵌套循环为何不执行", ["建立一个一维数组a，数组要预留足够的长度，以完成以下任务：", "（1）    自动生成斐波那契数列前10项的值，存入数组a，并输出。（斐波那契数列前两项的值为1，从第三项开始，每一项的值是前两项值的和）；", "（2）    插入操作：将键盘输入的一个整数插入数组a，使得数组a中的元素仍有序。要求可重复插入数据直到数组空间用完，或者用户不再需要插入数据为止", "\n", "代码如下：", "\n", "#include\"stdio.h\"", "\n\nint main()\n{\n    int a[100],", "i", "=0,b=0,j=0,k=0,o,n;char m;\n    a[0]=1;a[1]=1;\n    ", "for", "(", "i", "=1;i<=8;i++)\n        a[i+1]=a[i-1]+a[i];\n    ", "for", "(", "i", "=0;i<=9;i++)\n        printf(", "\"%d \"", ",a[i]);\n    ", "for", "(", "n", "=10;;n++)\n    {\n    printf(", "\"请输入待插入的数据：\"", ");\n    scanf(", "\"%d\"", ",&b);\n    a[n]=b;\n    ", "for", "(", "i", "=0;i<n-1;i++)\n        ", "for", "(", "j", "=0;j<=n-i;j++)\n        ", "if", "(a[j+1]>a[j]){", "k", "=a[j];a[j]=a[j+1];a[j]=k;}\n    printf(", "\"插入数据%d后的有序数列：\\n\"", ",b);\n    ", "for", "(", "o", "=0;o<=n;o++)\n        printf(", "\"%d \"", ",a[o]);\n    putchar(", "'\\n'", ");\n    printf(", "\"是否继续插入数据？（y/n）:\"", ");\n    scanf(", "\"%c\"", ",&m);\n    ", "if", "(", "m", "=", "'y'", ")continue;\n    ", "else", " break;\n    }\n}\n\n", "\n", "为什么第四个for循环不执行？？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;n&amp;#61;1 n&amp;#61;2&amp;#xff0c;你看你结果是什么&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["请问我哪还有错，为什么还是部分正确", ["我的代码；", "#include<stdio.h>", "int main(){", "    int n;", "    scanf(\"%d\",&n);", "    int a=1,b=1,c=2;", "    int i=1;", "    while(i<=n)", "        {", "        if(i==1||i==2){", "        printf(\"1,\");}", "        else{", "            c=a+b;", "            a=b;", "            b=c;", "            if(i<n){", "        printf(\"%d,\",c);}", "            if(i>=n){", "                printf(\"%d\",c);}", "    }", "    i++;", "    }", "    return 0;", "}", "题；Fibonacci数列的递推公式为：", "3333333333.png", "\n", "编程读入整数n(1<=n<=40)，输出Fibonacci数列的前n项。", "\n", "输入样例:", "1", "输出样例:", "1", "输入样例:", "2", "输出样例:", "1,1", "输入样例:", "5", "输出样例:", "1,1,2,3,5", "输入样例:", "10", "输出样例:", "1,1,2,3,5,8,13,21,34,55"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;经典的斐波那契数列&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;nterms &amp;#61; int(input(&lt;span class=\"hljs-string\"&gt;&amp;#34;你需要几项&amp;#xff1f;&amp;#34;&lt;/span&gt;))\n \n&lt;span class=\"hljs-comment\"&gt;# 第一和第二项&lt;/span&gt;\nn1 &amp;#61; 0\nn2 &amp;#61; 1\ncount &amp;#61; 2\n \n&lt;span class=\"hljs-comment\"&gt;# 判断输入的值是否合法&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; nterms &amp;lt;&amp;#61; 0:\n   &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入一个正整数。&amp;#34;&lt;/span&gt;)\nelif nterms &amp;#61;&amp;#61; 1:\n   &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;斐波那契数列&amp;#xff1a;&amp;#34;&lt;/span&gt;)\n   &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(n1)\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n   &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;斐波那契数列&amp;#xff1a;&amp;#34;&lt;/span&gt;)\n   &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(n1,&lt;span class=\"hljs-string\"&gt;&amp;#34;,&amp;#34;&lt;/span&gt;,n2,&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34; , &amp;#34;&lt;/span&gt;)\n   &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; count &amp;lt; nterms:\n       nth &amp;#61; n1 &amp;#43; n2\n       &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(nth,&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34; , &amp;#34;&lt;/span&gt;)\n       # 更新值\n       n1 &amp;#61; n2\n       n2 &amp;#61; nth\n       count &amp;#43;&amp;#61; 1\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["Python 一个计算题，这个怎么计算", ["题目如下：斐波那契数列指的是这样一个数列 0, 1, 1, 2, 3, 5, 8, 13,特别指出：第0项是0，第1项是第一个1。从第三项开始，每一项都等于前两项之和。", "麻烦给个能跑的代码"]], "Tag": "算法设计"}
{"Answer": "```\r\n不要用递归\r\nint main()\r\n{\r\n    int n;\r\n    cin &gt;&gt; n;\r\n    if (n == 1 || n== 2) cout &lt;&lt; 1;\r\n\t\tint a = 1;\r\n\t\tint b = 1;\r\n\t\tfor (int i = 2; i &lt; n; i++)\r\n\t\t{\r\n\t\tb = a + b;\r\n\t\ta = b - a;\r\n\t\t}\r\n\t\tcout &lt;&lt; b % 10007;\r\n    return 0;\r\n}\r\n```", "Konwledge_Point": "Fibonacci数列", "Question": ["怎样的做法才能做到运行不超时？所以这道题不能用递归吗？", ["\n//Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。", "\n当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。", "\n\n", "#include <iostream>\nusing namespace std;\nint fun(int n)\n{\n    if (n == 1 || n == 2)\n        return 1;\n    else\n        return fun(n - 1) + fun(n - 2);\n}\nint main()\n{\n    int n;\n    cin >> n;\n    cout << (fun(n) % 10007);\n    return 0;\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;调整一下显示层级&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\nfunction fun&lt;span class=\"hljs-params\"&gt;(i,j)&lt;/span&gt;{&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;//&lt;/span&gt;转换图片函数&amp;#xff0c;就是把透明度改了一下\n    lik[i]&lt;span class=\"hljs-string\"&gt;.style.opacity&amp;#61;1&lt;/span&gt;;\n    lik[j]&lt;span class=\"hljs-string\"&gt;.style.opacity&amp;#61;0&lt;/span&gt;;\n\n   lik[i]&lt;span class=\"hljs-string\"&gt;.style.zIndex&amp;#61;10&lt;/span&gt;;\n    lik[j]&lt;span class=\"hljs-string\"&gt;.style.zIndex&amp;#61;0&lt;/span&gt;;\n\n    lik[i&amp;#43;5]&lt;span class=\"hljs-string\"&gt;.style.backgroundColor&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;#ffffff&amp;#34;&lt;/span&gt;;&lt;span class=\"hljs-string\"&gt;//&lt;/span&gt;改一下小图标\n    lik[j&amp;#43;5]&lt;span class=\"hljs-string\"&gt;.style.backgroundColor&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;#00000000&amp;#34;&lt;/span&gt;\n  }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["轮播图片为什么每张都链接到同一个网页？", ["如题。", "\n", "代码如下。代码是", "@学习是人类进化的阶梯 ", "的，我在粘贴代码的过程中遇到了这个问题。", "\n", "\n", "<", "script", ">", "\n", "window", ".", "onload", " = ", "function", "(", "){\n  ", "var", " box=", "this", ".", "document", ".", "getElementsByClassName", "(", "\"re\"", ")[", "0", "];\n  ", "var", " lik=box.", "getElementsByTagName", "(", "\"li\"", ");\n  ", "function", " ", "fun", "(", "i,j", "){", "//转换图片函数，就是把透明度改了一下", "\n    lik[i].", "style", ".", "opacity", "=", "1", ";\n    lik[j].", "style", ".", "opacity", "=", "0", ";\n    lik[i+", "5", "].", "style", ".", "backgroundColor", "=", "\"#ffffff\"", ";", "//改一下小图标", "\n    lik[j+", "5", "].", "style", ".", "backgroundColor", "=", "\"#00000000\"", "\n  }\n  ", "fun", "(", "0", ",", "1", ");", "//初始化下", "\n  ", "var", " i =", "0", ";\n  ", "function", " ", "auto", "(", "){", "//轮播循环函数", "\n    ", "if", "(++i>=", "5", "){\n      i=", "0", ";\n      ", "fun", "(", "0", ",", "4", ");\n    }\n    ", "else", " ", "fun", "(i,i-", "1", ");\n  }\n  timer=", "this", ".", "setInterval", "(auto,", "2000", ");\n  box.", "onmouseover", " = ", "function", " (", ") { ", "//鼠标划上去，停止轮播", "\n    ", "console", ".", "log", "(", "'good'", ");\n    ", "clearInterval", "(timer);\n  }\n  box.", "onmouseout", " = ", "function", " (", ") { ", "//鼠标划出，继续轮播", "\n    timer = ", "setInterval", "(auto, ", "2000", "); ", "//调用定时器", "\n  }\n  ", "var", " j =", "0", ";\n  ", "for", "(;j<", "5", ";j++){", "//点击小图标也可以转换图片", "\n    lik[j+", "5", "].", "ind", "=j;\n    lik[j+", "5", "].", "onclick", "=", "function", "(", "){\n      ", "fun", "(", "this", ".", "ind", ",i)\n      i=", "this", ".", "ind", ";\n    }\n  }\n\n}", "</", "script", ">", "\n", "<", "style", ">", "\n", "#max", "{\n  ", "width", ": ", "900px", ";\n  ", "height", ": ", "500px", ";\n  ", "align-items", ": center;\n  ", "margin", ": ", "5%", " auto;\n  ", "margin-top", ": ", "0%", ";\n  ", "position", ": absolute;\n  ", "left", ": ", "190px", ";\n  ", "top", ": ", "130px", ";\n}\n", ".re", "{\n  ", "position", ": relative;\n  ", "height", ": ", "400px", ";\n}\n", ".re", " ", "ul", "{\n  ", "list-style-type", ":none ;\n}\n", ".re", " ", "ul", ">", "li", "{\n  ", "width", ": ", "600px", ";\n  ", "height", ": ", "300px", ";\n  ", "position", ": absolute;\n\n  ", "transition", ": ", "1s", ";\n  ", "opacity", ": ", "0", ";\n}\n", ".re", " ", "ul", ">", "li", " ", "img", "{\n  ", "width", ": ", "900px", ";\n  ", "height", ": ", "500px", ";\n  ", "border-radius", ": ", "10%", ";\n  ", "border", ": ", "15px", " solid ", "#fffbd6", ";\n}\n", "#max", " ", "ol", " {\n  ", "position", ": relative;\n  ", "display", ": grid;\n  grid-template-", "columns", ": ", "repeat", "(", "5", ",", "75px", ");\n  grid-template-rows: auto;\n  grid-gap: ", "1em", ";\n  ", "float", ": right;\n  ", "margin-top", ": ", "450px", ";\n  ", "list-style", ": none;\n  ", "top", ":", "0", ";", "left", ":", "0", ";\n}\n", "#max", " ", "ol", " ", "li", " {\n  ", "width", ": ", "25px", ";\n  ", "height", ": ", "10px", ";\n  ", "font-size", ": ", "15px", ";\n  ", "line-height", ": ", "20px", ";\n  ", "float", ": left;\n  ", "text-align", ": center;\n  ", "border-radius", ": ", "2em", ";\n  ", "border", ": ", "5px", " solid ", "#999999", ";\n}\n", "</", "style", ">", "\n", "<", "body", ">", "\n", "<", "div", " ", "id", "=", "\"max\"", ">", "\n        ", "<", "div", " ", "class", "=", "\"re\"", ">", "\n            ", "<", "ul", ">", "\n                ", "<", "li", ">", "<", "a", " ", "href", "=", "\"Fibonacci数列.html\"", ">", "<", "img", " ", "src", "=", "\"file:///C|Users/Lenovo/Desktop/数学/图片/我的数学笔记002.png\"", " ", "alt", "=", "\"\"", " ", "title", "=", "\"Fibonacci数列\"", ">", "</", "a", ">", "</", "li", ">", "\n                ", "<", "li", ">", "<", "a", " ", "href", "=", "\"Euler常数.html\"", ">", "<", "img", " ", "src", "=", "\"file:///C|Users/Lenovo/Desktop/数学/图片/我的数学笔记015.png\"", " ", "alt", "=", "\"\"", " ", "title", "=", "\"Euler常数\"", ">", "</", "a", ">", "</", "li", ">", "\n                ", "<", "li", ">", "<", "a", " ", "href", "=", "\"Wallis公式.html\"", ">", "<", "img", " ", "src", "=", "\"file:///C|Users/Lenovo/Desktop/数学/图片/我的数学笔记037.png\"", " ", "alt", "=", "\"\"", " ", "title", "=", "\"Wallis公式\"", "</", "a", ">", ">", "</", "li", ">", "\n                ", "<", "li", ">", "<", "a", " ", "href", "=", "\"Newton-Leibniz公式.html\"", ">", "<", "img", " ", "src", "=", "\"file:///C|Users/Lenovo/Desktop/数学/图片/我的数学笔记061.png\"", " ", "alt", "=", "\"\"", " ", "title", "=", "\"Newton-Leibniz公式\"", "</", "a", ">", ">", "</", "li", ">", "\n                ", "<", "li", ">", "<", "a", " ", "href", "=", "\"Ceva定理.html\"", ">", "<", "img", " ", "src", "=", "\"file:///C|Users/Lenovo/Desktop/数学/图片/我的数学笔记154.png\"", " ", "alt", "=", "\"\"", " ", "title", "=", "\"Ceva定理\"", ">", "</", "a", ">", "</", "li", ">", "\n            ", "</", "ul", ">", "\n            ", "<", "ol", ">", "\n                ", "<", "li", ">", "</", "li", ">", "\n                ", "<", "li", ">", "</", "li", ">", "\n                ", "<", "li", ">", "</", "li", ">", "\n                ", "<", "li", ">", "</", "li", ">", "\n                ", "<", "li", ">", "</", "li", ">", "\n            ", "</", "ol", ">", "\n        ", "</", "div", ">", "\n    ", "</", "div", ">", "\n", "</", "body", ">", "\n", "\n", "运行结果如下", "\n", "\n", "我实在不会了。麻烦大家帮帮我。谢谢。", "\n", "我希望让图片轮播到那一张就链接到哪一个相应的网页。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;因为题目是要计算前20项的和&amp;#xff0c;你写的是数组&amp;#xff0c;数组下标从0开始所以&amp;#xff0c;所以要从2开始&amp;#xff1b;&lt;br /&gt;从0开始也是同理&amp;#xff0c;你写的是以i为下标计算&amp;#xff0c;所以要从0开始。&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["#C语言 数组 为什么循环从2和0开始", ["图片里第7和10行 为什么i的初始值是2和0？", "第一个for不是要从f[3]开始循环吗，怎么i=2呢？", "#include <stdio.h>", "/", "使用[数组]输出Fibonacci数列前20项中的偶数之和。", "从第三项开始后一项是前两项之和（和值为3382）。", "/", "int fib(int f[],int n)", "{", "    int s=0,i;", "    for(i=2;i<n;i++)//求第三项开始的其他元素的值", "    f[i]=f[i-1]+f[i-2];", "\n", "for", "(i=", "0", ";i<", "20", ";i++)\n", "if", "(f[i]%", "2", "==", "0", ")//逐一判断数值为偶数的数组元素\n", "s", "+=f[i];\n", "return", " s;\n", "\n", "}", "void main()", "{", "    int f[20]={1,1};", "    printf(\"%d\",fib(f,20));", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;从图可以看出后位是前1位或前2位的和&amp;#xff0c;以及二分法查找&amp;#xff0c;以及数组左右移位&amp;#xff0c;共4种算法。&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["求用数组和循环解决该问题", ["现在不知道该如何解决，只知道斐波那契数列如何输出其余的不会，希望有人能将注释写清楚些，谢谢了", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;fib&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; fib(i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&amp;#43;fib(i-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n\nn &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入你要得到项&amp;#xff1a;&amp;#34;&lt;/span&gt;))\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;第%d项为%d&amp;#39;&lt;/span&gt; % (n,fib(n)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/045477573766166.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["请问各位朋友可以帮我解决一下么？", ["请问为什么用这个编码解决不了斐波那契数列，运行出来就是打出数字就是数字几？"]], "Tag": "算法设计"}
{"Answer": "&lt;h2 id=\"h2_望采纳_1670404481724\"&gt;望采纳&lt;/h2&gt;\n&lt;p&gt;这是一个简单的递归函数&amp;#xff0c;用来求解斐波那契数列的某一项的值&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;def &lt;span class=\"hljs-title function_\"&gt;fibonacci&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(n)&lt;/span&gt;:\n  &lt;span class=\"hljs-type\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;n&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n  &lt;span class=\"hljs-type\"&gt;elif&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;n&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; fibonacci(n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#43; fibonacci(n - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;下面是一个使用该函数的测试程序&amp;#xff0c;它从键盘输入指定项&amp;#xff0c;并输出斐波那契数列指定项的值&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-comment\"&gt;# Get the n-th item in the Fibonacci sequence&lt;/span&gt;\nn &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Enter the item number in the Fibonacci sequence: &amp;#34;&lt;/span&gt;))\n\n&lt;span class=\"hljs-comment\"&gt;# Compute the value of the n-th item in the sequence&lt;/span&gt;\nvalue &amp;#61; fibonacci(n)\n\n&lt;span class=\"hljs-comment\"&gt;# Print the result&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#34;The value of the &lt;span class=\"hljs-subst\"&gt;{n}&lt;/span&gt;-th item in the Fibonacci sequence is &lt;span class=\"hljs-subst\"&gt;{value}&lt;/span&gt;.&amp;#34;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;请注意&amp;#xff0c;上面的代码假定斐波那契数列的第一项为0&amp;#xff0c;第二项为1。如果需要&amp;#xff0c;可以修改函数的定义来更改这个假定。&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["python问题求解", ["编写一个递归函数，求解Fibonacci数的问题的某项的值，编写测试程序从键盘输入指负项，并输出Fibonacci数列指定项的值"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;整合代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; _CRT_SECURE_NO_WARNINGS 1&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//求平均数&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;average&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a, b, c;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入3个数&amp;#xff0c;以空格隔开&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf %lf %lf&amp;#34;&lt;/span&gt;, &amp;amp;a, &amp;amp;b, &amp;amp;c);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;平均值&amp;#61;%g\\n&amp;#34;&lt;/span&gt;, (a &amp;#43; b &amp;#43; c) / &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;);\n}\n&lt;span class=\"hljs-comment\"&gt;//乘法表&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;cfb&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; i; j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d*%d&amp;#61;%-4d&amp;#34;&lt;/span&gt;, i, j, (i * j));\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n}\n\n&lt;span class=\"hljs-comment\"&gt;//最大公约数&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;gys&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, b, i;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入2个整数&amp;#xff0c;以空格隔开&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;, &amp;amp;a, &amp;amp;b);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;gt; b)\n        i &amp;#61; b;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        i &amp;#61; a;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i--)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a % i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; b % i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d和%d的最大公约数是%d\\n&amp;#34;&lt;/span&gt;, a, b, i);\n}\n\n&lt;span class=\"hljs-comment\"&gt;//Fibonacci&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Fib&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        a[i] &amp;#61; a[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; a[i - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;];\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Fibonacci的第40个数是%d\\n&amp;#34;&lt;/span&gt;, a[&lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;]); &lt;span class=\"hljs-comment\"&gt;//a[0]没有&amp;#xff0c;从a[1]开始&amp;#xff0c;所有第40个数就是a[40]&lt;/span&gt;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//中位数&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;midNmb&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, j, n &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, t;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入数组元素个数&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入%d个数&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;, n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a[i]);\n    &lt;span class=\"hljs-comment\"&gt;//排序&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; - i; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[j] &amp;gt; a[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]) &lt;span class=\"hljs-comment\"&gt;//从小到大排序&lt;/span&gt;\n            {\n                t &amp;#61; a[j];\n                a[j] &amp;#61; a[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                a[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; t;\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;中位数是%d&amp;#34;&lt;/span&gt;, a[n / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]); &lt;span class=\"hljs-comment\"&gt;//奇数个时&amp;#xff0c;中位数是中间的值&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;中位数是%.2f&amp;#34;&lt;/span&gt;, (a[n / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#43; a[n / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]) / &lt;span class=\"hljs-number\"&gt;2.0&lt;/span&gt;); &lt;span class=\"hljs-comment\"&gt;//数组元素偶数个时&amp;#xff0c;中位数是中间两个数的平均值&amp;#xff0c;保留2位小数&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; op;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;1.求3个数的平均数\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;2.输出九九乘法表\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;3.求公约数\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;4.求序数的第40个数\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;5.求中位数\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;0.退出\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;op);\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (op)\n        {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;average&lt;/span&gt;(); &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;cfb&lt;/span&gt;(); &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;gys&lt;/span&gt;(); &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;Fib&lt;/span&gt;(); &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;midNmb&lt;/span&gt;(); &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["怎样编写一个程序来实现以下功能", ["写一个多功能程序，用多函数进行设计，需实现如下功能：", "（1）计算3个数的平均值；", "（2）输出九九乘法表；", "（3）求两个正整数的最大公约数；", "（4）计算Fibonacci数列的第40个数；", "（5）找一组整数的中位数。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;第一张图片已经初始化了&amp;#xff0c;后面再重复那样写的错误的&lt;br /&gt;第二张图是对的但是你int类型有点小了&lt;br /&gt;超出整形范围了所以为负数了  你可以用long long类型定义这个数组存放的数就不是负数了&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["大一c语言，99我啦", ["VC6.0  题目是输出斐波那契数列前50位", "1.为什么我像图一第五行那样初始化数组就会报错，而像图二第六行那样初始化数组就能运行呢？", "2.为什么图二的输出结果会有负数呢？", "\n", "\n", "\n"]], "Tag": "算法设计"}
{"Answer": "可以在基类里定义 IsError 抽象方法\r\n\r\n三个类重载这个方法,把各自的判断写里面。", "Konwledge_Point": "Fibonacci数列", "Question": ["不同类型的error应该怎么输出呢", ["需要三个class", "\n1.Reverse.cpp", "\n包含两个函数一个反转正整数，一个反转字符，需要使用递归的方法", "\nint reverseDigit(int value)", "\nstring reverseString(string letters)", "\n2.Fibonacci.cpp", "\n用递归法计算斐波那契的数列", "\n3.EfficientFibonacci.cpp", "\n用优化的方法计算斐波那契数列", "\n\n", "输入四个值", "\n第一个i是非零正整数。如果输入是负数或者是字符就输出ERROR", "\n第二个s是字符串，如何输入时数字就输出ERROR", "\n第三个n1是非零正整数，使用Fibonacci.cpp计算的,如果输入不是非零正整数就输出ERROR", "\n第四个n2是非零正整数，使用EfficientFibonacci.cpp计算的，如果输入不是非零正整数就输出ERROR", "\n\n", "Sample input 1:  12345 apple 6 6", "\nSample output 1:  54321 elppa 8 8", "\nSample input 2:  -1 appa 20 3", "\nSample output 2:  ERROR appa 6765 2", "\nSample input 3:  11900 Beer sa 11", "\nSample output 3:  911 reeB ERROR 89", "\n\n", "写了的三个函数", "\n\n", "Fibonacci::Fibonacci(int n)\n{\n    if(n==1||n==2)\n    {\n        return 1;\n\n    }else \n    {\n        return Fibonacci(n-1)+Fibonacci(n-2);\n    }\n};\n", "\n\n", "int EfficientFibonacci::calculate(int n)\n{\n    if (n <= 2 && top == 0)\n    {\n      top = 2;\n      arr[0] = 1;\n      arr[1] = 1;\n      return arr[n - 1];\n    }\n    if (top == n - 1)\n    {\n      top = n;\n      arr[n - 1] = arr[n - 2] + arr[n - 3];\n      return arr[n - 1];\n    }\n      else if (top > n - 1)\n    {\n      return arr[n - 1];\n    }\n    return Fibonacci(n - 2) + Fibonacci(n - 3);\n};\n", "\n\n", "int Reverse::reverseDigital(int value)\n{\n    if(value<10&&value>0)\n    {\n        printf(\"%d\",n);\n        return;\n    }else if(value>=10)\n    {\n        printf(\"%d\",n%10);\n        inverted(n/10);\n\n    }else   \n    {\n        printf(\"%s\\n\",\"ERROR\");  \n    }\n    return;\n\n\n};\n"]], "Tag": "算法设计"}
{"Answer": "这个程序完全符合要求了，不要再问了。。\r\n```\r\n #include &lt;stdio.h&gt;\r\n \r\nint main()\r\n{\r\n  int f[100];\r\nint m, n, i;\r\nf[0] = 1; f[1] = 1;\r\nscanf(\"%d,%d\", &amp;m, &amp;n);\r\n\r\nfor (i = 2; i &lt; 100; i++)\r\n{\r\n    f[i] = f[i - 1] + f[i - 2];\r\n    if(f[i]&gt;n){\r\n        break;\r\n    }\r\n}\r\n\r\nfor (i=0; f[i]&lt;=n; i++){\r\n    if(m&lt;=f[i]&amp;&amp;f[i]&lt;=n){\r\n    printf(\"%d \",f[i]);\r\n    }\r\n}\r\n  return 0;\r\n}\r\n```", "Konwledge_Point": "Fibonacci数列", "Question": ["C语言问题求解答，帮忙看一下这个编程~~~~", ["输出[m,n]范围内的所有斐波那契（Fibonacci）数，m,n这两个数由键盘输入。", "\n【提示】", "\n1,1,2,3,5,8,13,21,34,……这是斐波那契（Fibonacci）数列的前几项。斐波那契数列的特点：前两项均为1，后面任意一项都是其前面两项之和。", "\n本实验虽然只要求输出在[m,n]范围内的斐波那契数，但是依然需要从第1个Fibonacci数开始依次得到下一个，并判断是否是需要输出的那个。", "\n#include", "\nint main()", "\n{", "\n    int f[100];", "\n    int m, n, i;", "\n\n", "f[0] = 1; f[1] = 1;\nfor (i = 2; i < 100; i++)\n{\n    f[i] = f[i - 1] + f[i - 2];\n}\nscanf(\"%d%d\", &m, &n);\nfor (i = 0; f[i] < m; i++);\nfor (; f[i]<n; i++) \n    printf(\"%d \",f[i]);\n\nreturn 0;\n", "\n\n", "}", "\n两个疑问", "\n第一个疑问： 你看这个程序 ，我输入 1 3 ，也就是m是1，n是3，运行第二个for时，f[0]<m 不成立 那么程序会怎么样走呢，整个程序也就一个printf 但也要第三个for成立时候才能执行，那要是之前不成立呢，程序怎么运行？", "\n第二个疑问 ", "\n我输入 1 3 输出 1 1  2，怎么改能让他输出 1  1  2  3或者 1  2  3 呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;C语言代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;math.h&amp;gt;&lt;/span&gt;\nint main()\n{\n    int a,b,i;\n    long long &lt;span class=\"hljs-attribute\"&gt;a_b&lt;/span&gt;&amp;#61;0,a_0&amp;#61;0,a_1&amp;#61;1;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;b);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;0;i&amp;lt;&amp;#61;60;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;&amp;#61;a)\n        &lt;span class=\"hljs-attribute\"&gt;a_0&lt;/span&gt;&amp;#61;a_1;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;&amp;#61;b)\n        &lt;span class=\"hljs-attribute\"&gt;a_b&lt;/span&gt;&amp;#61;a_1;\n        &lt;span class=\"hljs-attribute\"&gt;a_1&lt;/span&gt;&amp;#61;a_0&amp;#43;a_1;\n        &lt;span class=\"hljs-attribute\"&gt;a_0&lt;/span&gt;&amp;#61;a_1-a_0;\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld\\n&amp;#34;&lt;/span&gt;,a_0&amp;#43;a_b);\n    return 0;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;看起来程序的代码逻辑是正确的。但是&amp;#xff0c;有一些小的问题。&lt;/p&gt;\n&lt;p&gt;数组的定义不正确&amp;#xff1a;您定义的数组大小为 60&amp;#xff0c;而斐波那契数列的项数较多&amp;#xff0c;因此定义数组的大小要足够大。&lt;/p&gt;\n&lt;p&gt;数组的遍历不正确&amp;#xff1a;您的代码中的循环语句有些不对。第 4 行的循环只会执行一次&amp;#xff0c;因为在第 9 行您递增了 i。第 10 行的数组 b 是不需要的&amp;#xff0c;请将其删除。&lt;/p&gt;\n&lt;p&gt;输出格式不正确&amp;#xff1a;您需要输出 Fibonacci 数列中任意两项之和&amp;#xff0c;而不是所有项之和。&lt;/p&gt;\n&lt;p&gt;修正以上问题后的代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, b;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;, &amp;amp;a, &amp;amp;b);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fmax&lt;/span&gt;(a, b);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f[n];\n    f[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    f[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n    {\n        f[i] &amp;#61; f[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;] &amp;#43; f[i&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;];\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, f[a&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;] &amp;#43; f[b&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["请问我写的有什么问题，要怎么改", ["任务描述", "输出Fibonacci数列中任意两项之和。", "\n", "输入格式:", "两个整数a,b(大于0小于 等于60的正整数)，以空格分隔。", "\n", "输出格式:", "输出Fibonacci数列中第a项和第b项之和。", "\n", "输入样例:", "4 6", "输出样例:", "11", "输入样例:", "20 30", "输出样例:", "838805", "输入样例:", "56 52", "输出样例:", "258802713816", "\n", "\n", "#include<stdio.h>", "\nint main(){\n    int ", "c", "=0,d=0,e=0,f=0,sum=0,k=0,i;\n    int a[60],b[60];\n    scanf(", "\"%d %d\"", ",&c,&d);\n    a[0]=1;\n    a[1]=1;\n    ", "for", "(", "i", "=0;i<60;i++){\n        a[i]=a[i-1]+a[i-2];\n        b[k++]=a[i++];\n    }\n    ", "for", "(", "i", "=1;i<=k;i++){\n        ", "if", "(", "i", "==c)\n            ", "e", "=b[i];\n        ", "if", "(", "i", "==d)\n            ", "f", "=b[i];\n    }\n    ", "sum", "=e+f;\n    printf(", "\"%d\"", ",sum);\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;拿i&amp;#43;1模5就行了&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["对教材例题的一点改动", ["这个表示的是，斐波那契数列", "f(x+2)＝f(x＋1)＋f（x）", "f（2）=f（1）＝1", "然后要求每输出五个数字，换一行。", "我感觉我就是换了一个表达，可是为什么会和教材的结果不一样呀"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; a1&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,a2 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,an;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;lt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n    {\n        an &amp;#61; a1 &amp;#43; a2;\n        a1 &amp;#61; a2;\n        a2 &amp;#61; an;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; an;\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *p;\n    cin &amp;gt;&amp;gt; n;\n    p &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[n];\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n        cin &amp;gt;&amp;gt; p[i];\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(p[i]) &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;delete&lt;/span&gt;[] p;\n    p &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["用C++完成菲波数小程序", ["问题：", "斐波那契数列，定义如下", "\n", "f(1)=f(2)=1", "f(n)=f(n-1)+f(n-2) n>=3", "计算第n项菲波数值", "\n", "输入第一行为一个整数N，接下来N行为整数Pi（1<=Pi<=60）", "输出为N行，每行为对应的f（Pi）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;就是迭代的时候把数值存进一个list&amp;#xff0c;然后return list就好了。python的return没有限制&amp;#xff0c;return啥都行&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["这道斐波那契题怎么实现？（python）", ["问题遇到的现象和发生背景", "\n", "“求列表 递归函数return必须直接是列表 刚才那题也是，都不需要考虑本身跟n比较大小，但必须是递归函数return一个列表或集合", "不可以是递归一个数，然后再设计个函数或者在函数外部用for之类的组合成列表”", "这是要求", "\n", "问题相关代码，请勿粘贴截图", "\n", "编写函数，使用递归函数f(n)实现斐波那契数列中前n个值（递归函数返回值要求是列表）。", "\n", "我的解答思路和尝试过的方法", "\n", "正常的递归都是直接返回一个数，但是这里要求返回列表，有点懵逼了"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/220726440766168.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["求斐波那契数列，用数组求，不知道错哪了。", ["此处凑一下字数，请忽略额西，啊加无，以，额，打，哭，求不呀不洗可以"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint main() {\n    int i,&lt;span class=\"hljs-attribute\"&gt;f1&lt;/span&gt;&amp;#61;1,f2&amp;#61;1,f3;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;3; i&amp;lt;&amp;#61;30; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-attribute\"&gt;f3&lt;/span&gt;&amp;#61;f1&amp;#43;f2;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;gt;&amp;#61;20){\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;第%d项%d与第%d项%d的商为%.12lf\\n&amp;#34;&lt;/span&gt;,i-1,f2,i,f3,f2&lt;span class=\"hljs-number\"&gt;*1&lt;/span&gt;.0/f3);\n        }\n        &lt;span class=\"hljs-attribute\"&gt;f1&lt;/span&gt;&amp;#61;f2;\n        &lt;span class=\"hljs-attribute\"&gt;f2&lt;/span&gt;&amp;#61;f3;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;br /&gt;\n\n&lt;p&gt;觉得有用的话&lt;font color=\"red\"&gt;&lt;strong&gt;采纳&lt;/strong&gt;&lt;/font&gt;一下哈&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["c语言问题求完整代码", ["Fibonacci数列的前两项为1，1，以后每项的值是它前两项的和。输出其20项到30项中，每一项的前一项与该项的商，看是否越来越接近黄金分割比例0.618。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;int类型不能直接转list&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;s&amp;#61;[]\ndef getFibonacci(n):\n       &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n&amp;lt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; \n       &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; getFibonacci(n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&amp;#43;getFibonacci (n-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;N&lt;/span&gt; &amp;#61;&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;())\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;N&lt;/span&gt;):\n    &lt;span class=\"hljs-built_in\"&gt;line&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-keyword\"&gt;list&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;, &amp;#34;&lt;/span&gt;)))\n    n&amp;#61;&lt;span class=\"hljs-built_in\"&gt;line&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n    d&amp;#61;&lt;span class=\"hljs-built_in\"&gt;line&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt; in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n):\n     s.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(getFibonacci(&lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt;))\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;gt;&amp;#61;d &lt;span class=\"hljs-built_in\"&gt;and&lt;/span&gt; d!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,n-d,-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(s[&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;],end&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;, &amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(s[n-d-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\nelif(d&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;()\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;invalid&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["写Python程序遇到的问题", ["问题遇到的现象和发生背景", "\n", "我想写一个Python程序输出一个指定长度的斐波那契数列然后在得到他的倒数几项，写的时候出现了一个问题我不知道如何解决", "\n", "遇到的现象和发生背景，请写出第一个错误信息", "\n", "def getFibonacci(n):\n       ", "if", " n<", "3", ":\n        ", "return", " ", "1", " \n       ", "else", ":", "return", " getFibonacci(n-", "1", ")+getFibonacci (n-", "2", ")\n\n", "N", " =", "int", "(", "input", "())\n", "for", " i in ", "range", "(", "N", "):\n    ", "line", " = ", "list", "(", "map", "(", "int", ",", "input", "().", "split", "(", "\", \"", ")))\n    n=", "line", "[", "0", "]\n    d=", "line", "[", "1", "]\n", "for", " ", "j", " in ", "range", "(n):\n     s = ", "list", "(getFibonacci(", "j", "))\n", "if", "(n>=d ", "and", " d!=", "0", "):\n    ", "for", " ", "x", " in ", "range", "(n-", "1", ",n-d,-", "1", "):\n        ", "print", "(s[", "x", "],end=", "\", \"", ")\n    ", "print", "(s[n-d-", "1", "])\nelif(d==", "0", "):\n    ", "print", "()\n", "else", ":\n    ", "print", "(", "'invalid'", ")\n\n\n\n", "\n", "用代码块功能插入代码，请勿粘贴截图。 不用代码块回答率下降 50%", "\n", "运行结果及详细报错内容", "\n", "显示的异常是：", "'int' object is not iterable", "  File \"C:\\Users\\admin\\Desktop\\新建文件夹 (3)\\Untitled-1.py\", line 12, in ", "    s = list(getFibonacci(j))", "\n", "我的解答思路和尝试过的方法，不写自己思路的，回答率下降 60%", "\n", "我想要达到的结果，如果你需要快速回答，请尝试 “付费悬赏”"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;print缩进不对&amp;#xff0c;还有你的n要输入的&amp;#xff0c;你要定义。修改后的代码如下&amp;#xff0c;有帮助的话记得采纳一下哦&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;fib&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; fib(i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&amp;#43;fib(i-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n \nn &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入你要得到项&amp;#xff1a;&amp;#34;&lt;/span&gt;))\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;第%d项为%d&amp;#39;&lt;/span&gt; % (n,fib(n)))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["请各位朋友们帮我解决下问题", ["请问为什么用这个编码解决不了斐波那契数列，运行出来就是打出数字就是数字几？"]], "Tag": "算法设计"}
{"Answer": "int fun(int n)\r\n{\r\n    if (n == 1 || n == 2)\r\n        return 1;\r\n    else\r\n        return fun(n - 1) + fun(n - 2);\r\n}\r\n这个方法最慢\r\n可以用\r\nint fun(int n)\r\n{\r\nint a = 1;\r\nint b = 1;\r\nfor (int i = 1; i &lt; n; i++)\r\n{\r\nb = a + b;\r\na = b - a;\r\n}\r\nreturn b % 10007;\r\n}", "Konwledge_Point": "Fibonacci数列", "Question": ["用什么方法才能不超时？不求和要怎样直接求余数？", ["\n\n", "/*Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。\n当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。*/\n#include <iostream>\n#include <cmath>\n#define M 10007\nusing namespace std;\nint fun(int n)\n{\n    if (n == 1 || n == 2)\n        return 1;\n    else\n        return fun(n - 1) + fun(n - 2);\n}\nint main()\n{\n    int n;\n    cin >> n;\n    cout << fun(n)%M << endl;\n    return 0;\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;简单粗暴系列&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;list1&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[6,8,10,20]&lt;/span&gt;\nnumbers&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\nlists&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[1,1]&lt;/span&gt;\ni&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\nwhile i!&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;:\n    numbers\n    lists&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(lists&lt;span class=\"hljs-selector-attr\"&gt;[-2]&lt;/span&gt;&amp;#43;lists&lt;span class=\"hljs-selector-attr\"&gt;[-1]&lt;/span&gt;)\n    i&amp;#61;i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; list &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; list1:\n    numbers&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(lists&lt;span class=\"hljs-selector-attr\"&gt;[list-1]&lt;/span&gt;)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(numbers)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n***********************\\n&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["运用python程序编写下面的的代码", ["第1题-斐波那契数列", "在数学上，斐波那契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n - 1)+F(n - 2)（n ≥ 3，n ∈ N*）斐波那契", "请完成求第n项斐波那契数的程序并输出结果", "\n", "\n\n\n```list1=[", "6", ",", "8", ",", "10", ",", "20", "] #n的取值列表list1\nnumbers = [] #用来存放结果的 \n#for n ", "in", " list1:  #依次从列表中取出数据赋值给n，求第n项的结果并保存到numbers[]列表中   \n#请在下面编写代码\n# ********** Begin ********** #\n\n\n\n\n     \n\n     \n    \n# ********** End ********** #\n#请不要修改下面的代码\nprint(numbers)\nprint(", "'\\n***********************\\n'", ")\n\n```python\n\n\n"]], "Tag": "算法设计"}
{"Answer": "![图片说明](https://img-ask.csdn.net/upload/202006/22/1592834285_730672.png)\r\n\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Data;\r\nusing System.Drawing;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Windows.Forms;\r\n\r\nnamespace Q1086908\r\n{\r\n    public partial class Form1 : Form\r\n    {\r\n        public Form1()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        private int f(int n)\r\n        {\r\n            if (n == 1 || n == 2) return 1;\r\n            return f(n - 2) + f(n - 1);\r\n        }\r\n\r\n        private void button1_Click(object sender, EventArgs e)\r\n        {\r\n            label1.Text = f(int.Parse(textBox1.Text)).ToString();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n# 问题解决的话，请点下采纳", "Konwledge_Point": "Fibonacci数列", "Question": ["C#构建窗体类应用程序", ["如何在C#中构建窗体类应用程序，实现计算斐波那契数列的第n项。。。。。。。。。。。。。。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k, &lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;;\n    cin &amp;gt;&amp;gt; k;\n    for (&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; &amp;lt; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;; &amp;#43;&amp;#43;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt; &amp;#61; f(&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt; (k &amp;#61;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;;\n            break;\n        }\n        else &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt; &amp;gt; k) // &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;装不下&lt;span class=\"hljs-number\"&gt;46&lt;/span&gt;项之后的数&amp;#xff0c;数列值超过k后没必要再找了。\n            break;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;)\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; &amp;lt;&amp;lt; endl;\n\n    else\n        cout &amp;lt;&amp;lt; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["循环避免判断多次的问题", ["\n", "#", "include", "<iostream>", "\n", "using", " ", "namespace", " std;\n", "int", " ", "f", "(", "int", " n)", "\n", "{\n ", "if", " (n == ", "1", ") ", "return", " ", "1", ";\n ", "if", " (n == ", "2", ") ", "return", " ", "1", ";\n ", "else", "\n     ", "return", "  ", "f", "(n - ", "1", ") + ", "f", "(n - ", "2", ");\n}\n", "int", " ", "main", "()", " \n", "{\n ", "int", " k;\n ", "int", " n;\n cin>>k; \n ", "for", "(n=", "2", ";n<", "100", ";++n)\n {", "if", " (k== ", "f", "(n)) {\n cout << n;\n ", "break", ";}\n ", "else", " {\n cout<<", "-1", ";} \n }\n}\n\n", "\n", "我想判断输入的数是不是斐波那契数列里的，但else里的-1每次输入都会判断一次", "如何让他只判断一次呢？我加入n>100也不行"]], "Tag": "算法设计"}
{"Answer": "斐波那契数列吗？有什么理解不了的拿出来讲讲\r\n至于为什么不直接用公式，因为现在是考你程序知识，而不是数学知识", "Konwledge_Point": "Fibonacci数列", "Question": ["c语言100道题中，兔子生兔子程序怎么理解", ["这个程序完全理解不了，这100道题有很多关于数列的，为什么不是求数列公式直接输出啊，是要我练习什么吗"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff0c;如有帮助&amp;#xff0c;请采纳一下&amp;#xff0c;谢谢。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"hljs\"&gt;#include &amp;lt;stdio.h&amp;gt;\n\nint func(int n)\n{\n\tif (n &amp;#61;&amp;#61;0)\n\t{\n\t\treturn 0;\n\t}else if (n &amp;#61;&amp;#61; 1)\n\t{\n\t\treturn 1;\n\t}else if (n &amp;gt;1)\n\t{\n\t\treturn func(n-1)&amp;#43;func(n-2);\n\t}else\n\t\treturn -1;\n}\n\nvoid main()\n{\n\tint n;\n\twhile(1)\n\t{\n\t\tprintf(&amp;#34;请输入n:&amp;#34;);\n\t\tscanf(&amp;#34;%d&amp;#34;,&amp;amp;n);\n\t\tint d &amp;#61; func(n);\n\n\t\tprintf(&amp;#34;总数&amp;#61;%d\\n&amp;#34;,d);\n\t}\n\t\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["求求大佬们救救孩子吧", ["编写功能函数fun( )，计算并返回Fibonacci数列(生兔子问题)的第n项的值。Fibonacci数列：1  1  2  3  5  8  13  21……‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬\n\n注：必须使用递归函数法\n\n#include \nint fun(int n)\n{//必须使用递归函数\n补全\n\n\n}\nint main()\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\",fun(n));\n\treturn 0;\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;//有1、2、3、4个数字&amp;#xff0c;能组成多少个互不相同且无重复数字的三位数&amp;#xff1f;都是多少&amp;#xff1f;&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j, k;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    { &lt;span class=\"hljs-comment\"&gt;// 以下为三重循环,百位&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; j&amp;#43;&amp;#43;)\n        { &lt;span class=\"hljs-comment\"&gt;//十位&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; k &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; k&amp;#43;&amp;#43;)\n            { &lt;span class=\"hljs-comment\"&gt;// 个位&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i !&amp;#61; k &amp;amp;&amp;amp; i !&amp;#61; j &amp;amp;&amp;amp; j !&amp;#61; k)\n                { &lt;span class=\"hljs-comment\"&gt;//确保i、j、k三位互不相同&lt;/span&gt;\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d%d &amp;#34;&lt;/span&gt;, i, j, k);\n                }\n            }\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;2.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;int main()\n{\n    int a, &lt;span class=\"hljs-keyword\"&gt;b, &lt;/span&gt;c, d, i;\n    &lt;span class=\"hljs-keyword\"&gt;scanf(&amp;#34;%d&amp;#34;, &lt;/span&gt;&amp;amp;i);\n    for (d &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; d &amp;lt;&amp;#61; i; d&amp;#43;&amp;#43;)&lt;/span&gt;\n        for (a &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; a &amp;lt;&amp;#61; 100; a&amp;#43;&amp;#43;)&lt;/span&gt;\n            for (&lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;&amp;#61; a&lt;span class=\"hljs-comment\"&gt;; b &amp;lt;&amp;#61; 100; b&amp;#43;&amp;#43;)&lt;/span&gt;\n                for (c &amp;#61; &lt;span class=\"hljs-keyword\"&gt;b; &lt;/span&gt;c &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; c&amp;#43;&amp;#43;)&lt;/span&gt;\n                    if (d * d * d &amp;#61;&amp;#61; a * a * a &amp;#43; &lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;* &lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;* &lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;&amp;#43; c * c * c)\n                        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Cube &amp;#61; %d, Triple &amp;#61; (%d,%d,%d)\\n&amp;#34;&lt;/span&gt;, d, a, &lt;span class=\"hljs-keyword\"&gt;b, &lt;/span&gt;c);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;3.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n \nint main()\n{\n    int i, n, &lt;span class=\"hljs-built_in\"&gt;t1&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;t2&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, nextTerm,sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;scanf(&amp;#34;%d&amp;#34;, &lt;/span&gt;&amp;amp;n);\n    for (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt;&amp;#61; n; &amp;#43;&amp;#43;i)&lt;/span&gt;\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;t1&lt;/span&gt;);\n        sum &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;t1&lt;/span&gt;;\n        nextTerm &amp;#61; &lt;span class=\"hljs-built_in\"&gt;t1&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-built_in\"&gt;t2&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;t1&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;t2&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;t2&lt;/span&gt; &amp;#61; nextTerm;\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n%d&amp;#34;&lt;/span&gt;,sum);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;4.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n; &lt;span class=\"hljs-comment\"&gt;// 用户输入的整数&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i; &lt;span class=\"hljs-comment\"&gt;// 循环标志&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#61;&amp;#34;&lt;/span&gt;, n);\n    &lt;span class=\"hljs-comment\"&gt;// n&amp;gt;&amp;#61;2才执行下面的循环&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (n !&amp;#61; i)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n % i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d*&amp;#34;&lt;/span&gt;, i);\n                n &amp;#61; n / i;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, n);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["大家看看这几个题怎么整", ["1题", "有1,2,3,4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？输出每一个数。", "\n", "有1,2,3,4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？按照从小到大的顺序输出每一个数，数之间用空格分隔，最后一个数的后面也要有空格。", "2题", "形如a3= b3 + c3 + d3的等式被称为完美立方等式。例如123= 63 + 83 + 103 。编写一个程序，对任给的正整数N (N≤100)，寻找所有的四元组(a, b, c, d)，使得a3 = b3 + c3 + d3，其中a,b,c,d 大于 1, 小于等于N，且b<=c<=d。", "\n", "输入", "\n", "一个正整数N (N≤100)。", "\n", "输出", "\n", "每行输出一个完美立方。输出格式为：", "\n", "Cube = a, Triple = (b,c,d)", "\n", "其中a,b,c,d所在位置分别用实际求出四元组值代入。", "\n", "请按照a的值，从小到大依次输出。当两个完美立方等式中a的值相同，则b值小的优先输出、仍相同则c值小的优先输出、再相同则d值小的先输出。", "\n", "样例输入", "\n", "24", "\n", "样例输出", "\n", "Cube = 6, Triple = (3,4,5)", "\n", "Cube = 12, Triple = (6,8,10)", "\n", "Cube = 18, Triple = (2,12,16)", "\n", "Cube = 18, Triple = (9,12,15)", "\n", "Cube = 19, Triple = (3,10,18)", "\n", "Cube = 20, Triple = (7,14,17)", "\n", "Cube = 24, Triple = (12,16,20)", "\n", "3题", "斐波那契数列。", "\n", "描述", "\n", "斐波那契数列是一组第一位和第二位为1，从第三位开始，后一位是前两位和的一组递增数列，像这样的：1、1、2、3、5、8、13、21、34、55......。从键盘输入正整数N，输出斐波那契数列的前N项以及前N项的和。", "\n", "输入", "\n", "一个正整数N 。", "\n", "输出", "\n", "输出两行，第一行为斐波那契数列的前N项，每项之间用空格隔开，最后一项后面也要有空格，第二行为斐波那契数列前N项的和", "\n", "样例输入", "\n", "6", "\n", "样例输出", "\n", "1 1 2 3 5 8 ", "\n", "20", "\n", "4题", "分解质因数。", "\n", "描述", "\n", "每一个大于等于2的自然数，均可写成一个或多个质数的乘积，例如：20=2", "2", "5；90=2", "3", "3*5。这种将一个整数分割成若干个质数之积的操作叫做分解质因数。现在，给你一个整数N，请你编写一个程序，对其分解质因数。", "\n", "输入", "\n", "输入为一行，正整数N。", "\n", "输出", "\n", "输出N的质因数分解形式。", "\n", "样例输入", "\n", "20", "\n", "样例输出", "\n", "20=2", "2", "5"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;\\t代表一个制表符&amp;#xff0c;也就是一个tab键&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["怎么对齐啊  \\t 到底怎么用啊", ["public class Homework13 {", "    public static void main(String[] args) {", "        //斐波那契数列的第1和第2个数分别为1和1，从第三个数开始，", "        // 每个数等于其前两个数之和（1 1 2 3 5 8 13）。", "        // 编写一个程序输出斐波那契数列中的前20个数，要求每行输出5个数。", "        int a = 1", "        int b = 1", "        int c = 0", "        System.out.print(a+\"\\t\\t\"+b+\"\\t\\t\");", "        for(int i=3;i<=20;i++){", "            c = a + b", "            a = b", "            b = c", "            System.out.print(c+\"\\t\\t\")", "            if(i%5==0){", "                System.out.println()", "            }", "        }", "    }", "}", "怎么就对其不了啊  \\t咋用啊"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;# 第一题\nd &amp;#61; {&amp;#39;k1&amp;#39;: [], &amp;#39;k2&amp;#39;: []}\nfor i in [6,29,32,45,50,60,77,80,100,90]:\n    if i &amp;gt;&amp;#61; 60:\n        d[&amp;#39;k1&amp;#39;].append(i)\n    else:\n        d[&amp;#39;k2&amp;#39;].append(i)\nprint(d)\n\n# 第二题\ndef fun(n):\n   if n &amp;#61;&amp;#61; 1:\n       return [0]\n   elif n &amp;#61;&amp;#61; 2:\n       return [0, 1]\n   l &amp;#61; [0, 1] \n   for i in range(2, n):\n       l.append(l[-2] &amp;#43; l[-1])\n   return l\n\nprint(fun(15))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["有关Python的基础问答题", ["1、有如下值的列表[6,29,32,45,50,60,77,80,100,90]，请编程实现：构造字典将所有大于60的值保存至字典的第一个key中，将小于60值保存至第二个key的值中，并打印字典数据，即打印结果：{'k1': [6, 29, 32, 45, 50], 'k2': [77, 80, 100, 90]}。", "\n\n", " ", "\n\n", "2、定义一个类Myclasss及方法factorial，实例化类对象并调用方法factorial打印用户输入的数n的斐波那契数列。斐波那契数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n>=2，n∈N*）。如用户输入10， 则打印结果：1,1,2,3,5,8,13,21,34,55， 请编程实现", "\n\n", " ", "\n\n", " ", "\n\n", "3、定义一个教师类Teacher，教师对象有teac_id、teac_name、age三个成员变量，成员方法display_info用于显示教师的基本信息。定义完类Teacher后，创建一个教师对象，并输出该教师的基本信息。", "\n\n", " ", "\n\n", "4. 利用random库随机产生2个整数列表，每个列表10个元素，元素取值范围1~100，判断两个列表中是否存在相同元素，若存在，则打印出所有相同元素及其在两个列表中的下标，若不存在，将两个列表合并为一个列表后打印出来。", "\n\n", " ", "\n\n", " ", "\n\n", "5.利用jieba和wordcloud库，绘制出文件“中国共产党十九届五中全会公报.txt”中前1000个热点词云。", "\n\n", "【提示】词云形状自选，中国共产党十九届五中全会公报.txt文件及可能用到的其它文件见文件夹data。", "\n\n", " ", "\n\n", "6．输入两个数x 和y，如果x 或y 小于等于0，提示请输入正整数，求这两个数的最大公约数和最小公倍数。", "\n\n", "注意：可以采用欧几里得辗转相除算法来求最大公约数。最小公倍数的计算方法是两数的乘积除以两数最大公约数的结果。", "\n\n", " ", "\n\n", " ", "\n\n", "7．定义一个函数fsum，求1+2+3……+n-1+n的值。用此函数计算机n=1000的值", "\n\n", " ", "\n\n", "8. 编写一个程序，打印出如下图所示的金字塔。", "\n\n", " ", "\n\n", "下图附第八题", "\n\n", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "递归实现斐波那契数列的时候，递归式类似下面的式子：\r\n[align=center][/align]f(n) = f(n-1) + f(n-2)\r\n所以对于每一项f(i)，都可视为一棵二叉树的根节点，层层向下扩展。整个递归树有许多重复的节点，也就意味着许多重复的运算。递归运算本来就存在入栈出栈时间空间消耗的问题，所以重复运算多的时候，开销就大了。\r\n  而循环实现斐波那契数列的时候，不存在重复运算的问题。\r\n\r\n  递归实现阶乘的时候，类似下面的式子：\r\n[align=center][/align]f(n) = n * f(n-1)\r\n  不存在每次递归多出一项的问题，跟循环其实没啥区别。", "Konwledge_Point": "Fibonacci数列", "Question": ["关于递归的一个小疑惑", ["总共有四个方法, 两个递归方法, 两个循环方法.", "我分别用递归A和循环A实现斐波那契数列, 递归B和循环B实现阶乘计算.", "可是我很好奇, 同样是计算:", "前者中,递归的实现明显比循环实现的性能要低很多(或者说慢很多), 但是后者所用的时间几乎相当(甚至循环还要高点) ?"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;直接写sql不好搞&amp;#xff0c;除非是存储过程。&lt;br /&gt;用其它语言生成sql语句是最简单&amp;#xff0c;比如用python:&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-xml\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Fibonacci&lt;/span&gt;(&lt;span class=\"hljs-title class_ inherited__\"&gt;object&lt;/span&gt;):\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; __init__(self, n):\n        self.n &amp;#61; n\n        self.current &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n        self.a &amp;#61; &lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;\n        self.b &amp;#61; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; __next__(self):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; self.current &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n            self.current &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; self.a\n\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; self.current &amp;lt; self.n:\n            self.a, self.b &amp;#61; self.b, self.a &amp;#43; self.b\n            self.current &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; self.a\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;raise&lt;/span&gt; StopIteration\n\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; __iter__(self):\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; self\n\n\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__ &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:\n    day &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    fib &amp;#61; Fibonacci(&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;)\n    &lt;span class=\"hljs-comment\"&gt;# INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; num &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; fib:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#34;insert into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (6, &lt;span class=\"hljs-subst\"&gt;{day}&lt;/span&gt;, &lt;span class=\"hljs-subst\"&gt;{num}&lt;/span&gt;);&amp;#34;&lt;/span&gt;)\n        day &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;结果是&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-xml\"&gt;&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;52&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;82&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;134&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;216&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;350&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;566&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;916&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1482&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2398&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3880&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6278&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10158&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;17&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;16436&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;18&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;26594&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;19&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;43030&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;69624&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;112654&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;182278&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;23&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;294932&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;24&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;477210&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;772142&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;26&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1249352&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;27&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2021494&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;28&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3270846&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;29&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5292340&lt;/span&gt;);\n&lt;span class=\"hljs-attribute\"&gt;insert&lt;/span&gt; into oth.power (month&amp;#xff0c;day&amp;#xff0c;fee) values (&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8563186&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后把生成好的sql去数据库执行一下就好了&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["postgresql如何循环读取填充同一张表", ["例如我现在在oth模式下有一张表oth.power", "有三个属性month，day，fee", "目前有两行数据：6 1 14", "               6 2 8", "这张表格第一第二列的规律分别是：第一列永远是6，第二列每到一行就+1", "而第三列的规律是满足斐波那契数列关系，从第三行开始，每一行的fee值都是上面两行的fee值之和", "可以推断，第三行的数据为：6 3 22， 第四行为：6 4 30。。。。。。依次类推", "现在需要我在这两行数据的基础上把这张表填充到共有30行为止。", "虽然我可以类推，但是这样需要我人工去一行一行的用insert 的语句去插入数据，请问能否写一个sql语言使得可以自动进行这个插入的步骤？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;他写了个数组,用来模拟整数&lt;br /&gt;数组中的每一个元素代表了长整数中的某一位,比如数组第一项代表长整数的个位,第二项代表十位等&lt;br /&gt;如果数组中的某一位超过10,则将其-10并进位到数组的下一项&lt;br /&gt;计算完毕后输出数组中每个元素,合起来就是一个长整数&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["想要解决斐波拉契数列输出数据过大问题", ["第3关：兔子问题", "\n", "题目描述：", "\n", "求解Fibonacci数列的第110项、第200项的值。", "\n", "测试输入: 110", "\n", "预期输出： 26925748508234281076009", "\n", "提示：", "注意溢出及大数问题", "第一项为 0 ，第二项为1", "\n", "求解思路是 直接使用递归 ，但是数字过大会直接溢出", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<math.h>", "\n", "#", "include", "<stdlib.h>", "\n", "int", " ", "Fibonacci", "(", "int", " n)", "; \n", "int", " ", "main", "()", "\n", "{\n    ", "int", " n;\n    ", "int", " f;\n    ", "scanf", "(", "\"%d\"", ",&n);\n    f = ", "Fibonacci", "(n);\n    ", "printf", "(", "\"%d\"", ",f);\n ", "return", " ", "0", ";\n}\n\n", "int", " ", "Fibonacci", "(", "int", " n)", " ", "{\n    ", "if", "(n == ", "1", ") \n    {\n        ", "return", " ", "0", ";\n    }\n    ", "else", " ", "if", " (n == ", "2", ") \n    {\n        ", "return", " ", "1", ";\n    } \n    ", "else", " {\n        ", "return", " ", "Fibonacci", "(n", "-1", ")+", "Fibonacci", "(n", "-2", ");\n    }\n\n}\n\n\n", "\n", "找到了运行成功的代码，但是实在看不太懂，求问有没有人够解释一下", "\n", "\n", "#", "include", "<stdio.h>", "\n", "#", "define", " F1 300", "\n", "#", "define", " F2 1000", "\n", "int", " ", "main", "()", "\n", "{\n    ", "//设置二维数组 ", "\n    ", "int", " F[F1][F2]={", "0", "};\n    ", "int", " k;\n    ", "//输入较大值 ", "\n    ", "scanf", "(", "\"%d\"", ",&k); \n    F[", "0", "][F2", "-1", "]=", "0", ";", "//第0行第299个为0 ", "\n    F[", "1", "][F2", "-1", "]=", "1", ";", "//第1行第299个为1 ", "\n    ", "for", "(", "int", " d=", "2", ";d<k;d++) ", "//需要相加的个数 ", "\n    {\n        ", "for", "(", "int", " i=F2", "-1", ";i>=", "0", ";i--)\n           {\n              F[d][i]=F[d", "-1", "][i]+F[d", "-2", "][i];\n", "//              printf(\"%d\\n\",F[d][i]);", "\n            }\n            \n        ", "int", " r=F2", "-1", ";\n    ", "//将其一个一个放入数组? ", "\n        ", "while", "(r>=", "0", "){\n            ", "if", "(F[d][r]>=", "10", ")\n            {\n                F[d][r", "-1", "]+=", "1", ";\n                F[d][r]=F[d][r]", "-10", ";\n            }\n            r--;\n            }\n    }\n    \n    ", "for", "(", "int", " i = ", "0", "; i <= F1; i++){\n        ", "for", "(", "int", " j = ", "0", "; j <= F2; j++) {\n            ", "printf", "(", "\"%d \"", ",F[i][j]);\n        }\n        ", "printf", "(", "\"\\n\"", ");\n    }\n    \n    ", "int", " j=", "0", ";\n    ", "while", "(j<F2)\n    {\n        ", "if", "(F[k", "-1", "][j]!=", "0", ")\n        {\n            ", "while", "(j<F2)\n            {\n                ", "printf", "(", "\"%d\"", ",F[k", "-1", "][j]);\n                j++;\n            }\n        }\n        j++;\n    \n    }\n     ", "return", " ", "0", ";\n}\n\n", "\n", "原文链接：", "https://blog.csdn.net/xingcheng12345/article/details/115910547?ops_request_misc=&request_id=&biz_id=102&utm_term=%E7%AC%AC3%E5%85%B3%EF%BC%9A%E5%85%94%E5%AD%90%E9%97%AE%E9%A2%98%20%E6%B1%82%E8%A7%A3Fibonacci%E6%95%B0%E5%88%97%E7%9A%84%E7%AC%AC110%E9%A1%B9%E3%80%81%E7%AC%AC&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-115910547.pc_search_result_control_group&spm=1018.2226.3001.4187"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;l&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[1,1]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;):\n    l&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(l&lt;span class=\"hljs-selector-attr\"&gt;[i-1]&lt;/span&gt;&amp;#43;l&lt;span class=\"hljs-selector-attr\"&gt;[i-2]&lt;/span&gt;)\nn&amp;#61;int(&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;())\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(l[n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["用python语言解决列表问题", ["裴波那契数列也称兔子数列 ，它的第一项是一 ，第二项是一 ，从第三项开始 每项为前两项之和。", "计算斐波那契数列的前20项的值 ，并保存到列表中 ，用户输入一个整数n，输出列表中第n项值。"]], "Tag": "算法设计"}
{"Answer": "f3是作为临时变量的，只在for循环中使用，f1，f2记录前两轮计算的结果，而且需要考虑int长度不足问题，建议使用long类型。\r\n完整的代码示例：\r\n\r\n```\r\n \tpublic static long fabonacci(int date){\r\n\t\tlong f1 = 0;\r\n\t\tlong f2 = 1;\r\n\t\tfor (int i = 3; i &lt;= date; i++) {\r\n\t        long f3;\r\n\t        f3 = f2;\r\n\t        f2 = f1 + f2;\r\n\t        f1 = f3;\r\n\t        System.out.println(\"第\" + i + \"月的兔子数量是：\" + f2);\r\n\t    }\r\n\r\n\t\treturn f2;\r\n\t}\r\n```", "Konwledge_Point": "Fibonacci数列", "Question": ["古典问题，斐波那契兔子的问题", ["for (int i = 3; i < date; i++) {\n        int f3;\n        f3 = f2;\n        f2 = f1 + f2;\n        f1 = f3;\n        System.out.println(\"第\" + i + \"月的兔子数量是：\" + f2);\n    }\n\n我这样写的一串判断，为什么 f1 = f3;  f3=f1就不行吗，能讲解下吗\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你数组越界了&amp;#xff0c;定义的时候定义了数组包含2个&amp;#xff0c;也就是数组下标最大就是1&amp;#xff0c;你后面都越界了。&lt;/p&gt;\n\n&lt;p&gt;你可以直接定义一个大一点的数组 类似这样 int a[30] &amp;#61; {0};&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["C语言问题，这个程序段输出结果发生错误（错误的原因是数组元素的计算和输出不能同时进行吗？）", [" ", "\n\n", "程序段先要实现输出斐波那契数列，就是输出1,1,2,3,5,8.。。。。", "\n\n", "错误程序段", "\n\n", " #include<stdio.h>", "\nint main()", "\n{", "\n    int i,a[]={1,1};//此处定义数组大小是为了防止内存冲突的发生，有可能内存用来做其他事", "\n    for(i=0;i<20;i++)", "\n    {", "\n        printf(\"%d \",a[i]);", "\n        a[i+2]=a[i]+a[i+1];", "\n    }", "\n    return 0;", "\n}", "\n\n", " 输出结果", "\n\n", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", " "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;缩进和输出倒数第几项代码逻辑都有问题&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\ndef getFibonacci(n):\n       &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n&amp;lt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; \n       &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; getFibonacci(n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&amp;#43;getFibonacci (n-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;N&lt;/span&gt; &amp;#61;&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;())\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;N&lt;/span&gt;):\n    &lt;span class=\"hljs-built_in\"&gt;line&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-keyword\"&gt;list&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;, &amp;#34;&lt;/span&gt;)))\n    n&amp;#61;&lt;span class=\"hljs-built_in\"&gt;line&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n    d&amp;#61;&lt;span class=\"hljs-built_in\"&gt;line&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n    s&amp;#61;[]\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt; in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,n):\n         s.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(getFibonacci(&lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt;))\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;gt;&amp;#61;d &lt;span class=\"hljs-built_in\"&gt;and&lt;/span&gt; d!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(str,s[-d:])))#取后n项直接切片就行了&amp;#xff0c;题主原来的代码会越界\n    elif(d&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;()\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;invalid&amp;#39;&lt;/span&gt;)\n\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["Python程序输出结果不正确", ["问题遇到的现象和发生背景", "\n", "我在用Python写一个得到一个指定长度的斐波那契数列的倒数几项时，发现我的程序要输出的结果不对，我一时看不出哪里有问题，希望能帮我看看", "input：", "4", "5, 3", "7, 0", "7, 7", "7, 8", "expected output", "5, 3, 2", "\n", "13, 8, 5, 3, 2, 1, 1", "invalid", "\n", "遇到的现象和发生背景，请写出第一个错误信息", "\n", "s=[]\ndef getFibonacci(n):\n       ", "if", " n<", "3", ":\n        ", "return", " ", "1", " \n       ", "else", ":", "return", " getFibonacci(n-", "1", ")+getFibonacci (n-", "2", ")\n\n", "N", " =", "int", "(", "input", "())\n", "for", " i in ", "range", "(", "N", "):\n    ", "line", " = ", "list", "(", "map", "(", "int", ",", "input", "().", "split", "(", "\", \"", ")))\n    n=", "line", "[", "0", "]\n    d=", "line", "[", "1", "]\n", "for", " ", "j", " in ", "range", "(", "1", ",n):\n     s.", "append", "(getFibonacci(", "j", "))\n", "if", "(n>=d ", "and", " d!=", "0", "):\n    ", "for", " ", "x", " in ", "range", "(n-", "1", ",n-d,-", "1", "):\n        ", "print", "(s[", "x", "],end=", "\", \"", ")\n    ", "print", "(s[n-d-", "1", "])\nelif(d==", "0", "):\n    ", "print", "()\n", "else", ":\n    ", "print", "(", "'invalid'", ")\n\n\n\n", "\n", "用代码块功能插入代码，请勿粘贴截图。 不用代码块回答率下降 50%", "\n", "运行结果及详细报错内容", "\n", "我的输入和我输出来的结果：", "4", "5, 3", "7, 0", "7, 7", "7, 8", "invalid", "我有点不明白是为啥只输出最后一行的结果", "\n", "我的解答思路和尝试过的方法，不写自己思路的，回答率下降 60%", "\n", "我想要达到的结果，如果你需要快速回答，请尝试 “付费悬赏”"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;printf(&amp;#34;%d %d&amp;#34;, fib(a),i); 参数从右往左入栈&amp;#xff0c;入栈时i为0.&lt;br /&gt;把2个参数调换一下试试&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["C语言printf输出不显示", ["如题 我在用递归写 斐波那契数列的时候", "想知道他一共重复过几次 第一位和第二位", "于是我创建了这个代码：", "\n", "int", " i = ", "0", ";\n", "int", " ", "fib", "(", "int", " n)", "\n", "{\n    ", "if", " (n > ", "2", ")\n        ", "return", " ", "fib", "(n - ", "1", ") + ", "fib", "(n - ", "2", ");\n    ", "else", "\n    {\n        ++i;  ", "//我用这一行来计算重复过几次 第一位和第二位", "\n        ", "return", " ", "1", ";\n    }\n}\n\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " a = ", "0", ";\n    ", "scanf", "(", "\"%d\"", ", &a);\n    ", "printf", "(", "\"%d %d\"", ", ", "fib", "(a),i);\n    ", "return", " ", "0", ";\n}\n", "\n", "结果无论输入什么 最后打印的fib(a)都是正确的 打印出的“i”却一直是0", "于是我选择了监视“i”", "但监视里\"i\"又有了正确的值 并非打印出的0", "于是我把主函数改成了这样", "\n", "int", " main()\n{\n    ", "int", " a = ", "0", ";\n    scanf(", "\"%d\"", ", &a);\n    ", "printf", "(", "\"%d\\n\"", ", fib(a));\n    ", "printf", "(", "\"%d\"", ",i);  ", "//", "就是把 fit(a) 和 i 分两条打印\n    ", "return", " ", "0", ";\n}\n", "\n", "当我把\"fib(a)\",\"i\"用两个printf打印之后", "他们两个打印的效果又正常了", "\n", "想知道为什么刚刚一个printf打印两个值的时候  后者会一直变成0"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;CD明显不对&amp;#xff0c;去摸了运算不会溢出&amp;#xff0c;更不会访问无效内存&lt;br /&gt;看AB&lt;br /&gt;递归层数过多没有跳出会因为系统分配栈空间溢出&amp;#xff0c;导致错误&lt;br /&gt;所以选择B&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["CSP初赛模拟笔试题递归函数报错原因", ["求本题答案及方法", "小恺编写了如下函数，希望计算斐波那契数列 f(n)第 n 项对 10000 取余数的值：", "\n", "int", " ", "f", "(", "int", " x)", " ", "{\n  ", "if", "(x <= ", "2", ")\n    ", "return", " ", "1", ";\n  ", "int", " ans = ", "f", "(x - ", "1", ") + ", "f", "(x - ", "2", ");\n  ans %= ", "10000", ";\n  ", "return", " ans;\n}\n", "\n", "在运行空间限制 128MB、栈空间不超过空间限制、运行时限 1 秒的情况", "下，在主函数中运行函数 f(12345)，则最有可能首先发生什么问题？", "A. 运行时间超时 B. 栈溢出", "C. 访问无效内存 D. 返回错误的答案"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n &amp;lt;script&amp;gt;\n      &lt;span class=\"hljs-comment\"&gt;// 等待页面加载完毕后&amp;#xff0c;执行JS代码。&lt;/span&gt;\n      window.onload &amp;#61; function(){\n        &lt;span class=\"hljs-comment\"&gt;// 获取class&amp;#61;&amp;#34;re&amp;#34;的第一个元素&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;var&lt;/span&gt; box&amp;#61;&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;.document.getElementsByClassName(&lt;span class=\"hljs-string\"&gt;&amp;#34;re&amp;#34;&lt;/span&gt;)[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n        &lt;span class=\"hljs-comment\"&gt;// 获取标签名称为li的元素&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;var&lt;/span&gt; lik&amp;#61;box.getElementsByTagName(&lt;span class=\"hljs-string\"&gt;&amp;#34;li&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-comment\"&gt;//转换图片函数&amp;#xff0c;就是把透明度改了一下&lt;/span&gt;\n        function &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(i,j)&lt;/span&gt;&lt;/span&gt;{\n          &lt;span class=\"hljs-comment\"&gt;// lik[i]的透明度变为不透明&lt;/span&gt;\n          lik[i].style.opacity&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n          &lt;span class=\"hljs-comment\"&gt;// lik[j]的透明度变为透明&lt;/span&gt;\n          lik[j].style.opacity&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n          &lt;span class=\"hljs-comment\"&gt;// lik[i]的z轴变为10&lt;/span&gt;\n          lik[i].style.zIndex&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n          &lt;span class=\"hljs-comment\"&gt;// lik[j]的z轴变为0&lt;/span&gt;\n          lik[j].style.zIndex&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n          &lt;span class=\"hljs-comment\"&gt;// lik[i&amp;#43;5]的背景颜色变为#ffffff&lt;/span&gt;\n          lik[i&amp;#43;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;].style.backgroundColor&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;#ffffff&amp;#34;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//改一下小图标&lt;/span&gt;\n          &lt;span class=\"hljs-comment\"&gt;// lik[j&amp;#43;5]的背景颜色变为#00000000&lt;/span&gt;\n          lik[j&amp;#43;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;].style.backgroundColor&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;#00000000&amp;#34;&lt;/span&gt;\n        }\n        &lt;span class=\"hljs-comment\"&gt;//初始化下&lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n        \n        &lt;span class=\"hljs-keyword\"&gt;var&lt;/span&gt; i &amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        function auto(){&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//轮播循环函数&lt;/span&gt;\n          &lt;span class=\"hljs-comment\"&gt;// 当i比5大的时候&amp;#xff0c;执行fun函数&amp;#xff0c;li变换第1个和第5个的透明度、z轴和背景色&lt;/span&gt;\n          &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&amp;#43;&amp;#43;i&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;){\n            i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n          }\n          &lt;span class=\"hljs-comment\"&gt;// 当i在0~5之间的时候&amp;#xff0c;执行fun函数&amp;#xff0c;li变换第1个和第5个的透明度、z轴和背景色&lt;/span&gt;\n          &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(i,i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-comment\"&gt;// 每2秒执行一次auto函数&lt;/span&gt;\n        timer&amp;#61;&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;.setInterval(auto,&lt;span class=\"hljs-number\"&gt;2000&lt;/span&gt;);\n        &lt;span class=\"hljs-comment\"&gt;// 鼠标划上去&amp;#xff0c;停止轮播&lt;/span&gt;\n        box.onmouseover &amp;#61; function () { \n          console.log(&lt;span class=\"hljs-string\"&gt;&amp;#39;good&amp;#39;&lt;/span&gt;);\n          clearInterval(timer);\n        }\n        &lt;span class=\"hljs-comment\"&gt;//鼠标划出&amp;#xff0c;继续轮播&lt;/span&gt;\n        box.onmouseout &amp;#61; function () { \n          timer &amp;#61; setInterval(auto, &lt;span class=\"hljs-number\"&gt;2000&lt;/span&gt;); &lt;span class=\"hljs-comment\"&gt;//调用定时器&lt;/span&gt;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;var&lt;/span&gt; j &amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(;j&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;j&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//点击小图标也可以转换图片&lt;/span&gt;\n          lik[j&amp;#43;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;].ind&amp;#61;j;\n          lik[j&amp;#43;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;].onclick&amp;#61;function(){\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(this.ind,i)&lt;/span&gt;&lt;/span&gt;\n            i&amp;#61;&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;.ind;\n          }\n        }\n\n      }\n\n    &amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["html javascript这串代码每句话都是什么意思？", ["如题。 我是一个初学者，没学过js,能告诉我每句话都是什么意思吗？", "\n", "<", "script", ">", "\n", "window", ".", "onload", " = ", "function", "(", "){\n  ", "var", " box=", "this", ".", "document", ".", "getElementsByClassName", "(", "\"re\"", ")[", "0", "];\n  ", "var", " lik=box.", "getElementsByTagName", "(", "\"li\"", ");\n  ", "function", " ", "fun", "(", "i,j", "){", "//转换图片函数，就是把透明度改了一下", "\n    lik[i].", "style", ".", "opacity", "=", "1", ";\n    lik[j].", "style", ".", "opacity", "=", "0", ";\n \n   lik[i].", "style", ".", "zIndex", "=", "10", ";\n    lik[j].", "style", ".", "zIndex", "=", "0", ";\n \n    lik[i+", "5", "].", "style", ".", "backgroundColor", "=", "\"#ffffff\"", ";", "//改一下小图标", "\n    lik[j+", "5", "].", "style", ".", "backgroundColor", "=", "\"#00000000\"", "\n  }\n  ", "fun", "(", "0", ",", "1", ");", "//初始化下", "\n  ", "var", " i =", "0", ";\n  ", "function", " ", "auto", "(", "){", "//轮播循环函数", "\n    ", "if", "(++i>=", "5", "){\n      i=", "0", ";\n      ", "fun", "(", "0", ",", "4", ");\n    }\n    ", "else", " ", "fun", "(i,i-", "1", ");\n  }\n  timer=", "this", ".", "setInterval", "(auto,", "2000", ");\n  box.", "onmouseover", " = ", "function", " (", ") { ", "//鼠标划上去，停止轮播", "\n    ", "console", ".", "log", "(", "'good'", ");\n    ", "clearInterval", "(timer);\n  }\n  box.", "onmouseout", " = ", "function", " (", ") { ", "//鼠标划出，继续轮播", "\n    timer = ", "setInterval", "(auto, ", "2000", "); ", "//调用定时器", "\n  }\n  ", "var", " j =", "0", ";\n  ", "for", "(;j<", "5", ";j++){", "//点击小图标也可以转换图片", "\n    lik[j+", "5", "].", "ind", "=j;\n    lik[j+", "5", "].", "onclick", "=", "function", "(", "){\n      ", "fun", "(", "this", ".", "ind", ",i)\n      i=", "this", ".", "ind", ";\n    }\n  }\n\n}\n", "</", "script", ">", "\n", "<", "style", ">", "\n", "#max", "{\n  ", "width", ": ", "900px", ";\n  ", "height", ": ", "500px", ";\n  ", "align-items", ": center;\n  ", "margin", ": ", "5%", " auto;\n  ", "margin-top", ": ", "0%", ";\n  ", "position", ": absolute;\n  ", "left", ": ", "190px", ";\n  ", "top", ": ", "130px", ";\n}\n", ".re", "{\n  ", "position", ": relative;\n  ", "height", ": ", "400px", ";\n}\n", ".re", " ", "ul", "{\n  ", "list-style-type", ":none ;\n}\n", ".re", " ", "ul", ">", "li", "{\n  ", "width", ": ", "600px", ";\n  ", "height", ": ", "300px", ";\n  ", "position", ": absolute;\n  ", "left", ": ", "100px", ";\n  ", "top", ": ", "30px", ";\n  ", "transition", ": ", "1s", ";\n  ", "opacity", ": ", "0", ";\n}\n", ".re", " ", "ul", ">", "li", " ", "img", "{\n  ", "width", ": ", "700px", ";\n  ", "height", ": ", "370px", ";\n  ", "border-radius", ": ", "10%", ";\n  ", "border", ": ", "15px", " solid ", "#fffbd6", ";\n}\n", "#max", " ", "ol", " {\n  ", "position", ": relative;\n  ", "display", ": grid;\n  grid-template-", "columns", ": ", "repeat", "(", "5", ",", "75px", ");\n  grid-template-rows: auto;\n  grid-gap: ", "1em", ";\n  ", "float", ": right;\n  ", "margin-top", ": ", "450px", ";\n  ", "list-style", ": none;\n  ", "top", ":", "0", ";", "left", ":-", "150px", ";\n}\n", "#max", " ", "ol", " ", "li", " {\n  ", "width", ": ", "25px", ";\n  ", "height", ": ", "10px", ";\n  ", "font-size", ": ", "15px", ";\n  ", "line-height", ": ", "20px", ";\n  ", "float", ": left;\n  ", "text-align", ": center;\n  ", "border-radius", ": ", "2em", ";\n  ", "border", ": ", "5px", " solid ", "#999999", ";\n}\n", "</", "style", ">", "\n", "<", "body", ">", "\n", "<", "div", " ", "id", "=", "\"max\"", ">", "\n        ", "<", "div", " ", "class", "=", "\"re\"", ">", "\n            ", "<", "ul", ">", "\n                ", "<", "li", ">", "<", "a", " ", "href", "=", "\"Fibonacci数列.html\"", ">", "<", "img", " ", "src", "=", "\"../images/我的数学笔记002.png\"", " ", "alt", "=", "\"\"", " ", "title", "=", "\"Fibonacci数列\"", " ", "class", "=", "\"imgd\"", ">", "</", "a", ">", "</", "li", ">", "\n                ", "<", "li", ">", "<", "a", " ", "href", "=", "\"Euler常数.html\"", ">", "<", "img", " ", "src", "=", "\"../images/我的数学笔记015.png\"", " ", "alt", "=", "\"\"", " ", "title", "=", "\"Euler常数\"", " ", "class", "=", "\"imgd\"", ">", "</", "a", ">", "</", "li", ">", "\n                ", "<", "li", ">", "<", "a", " ", "href", "=", "\"Wallis公式.html\"", ">", "<", "img", " ", "src", "=", "\"../images/我的数学笔记037.png\"", " ", "alt", "=", "\"\"", " ", "title", "=", "\"Wallis公式\"", " ", "class", "=", "\"imgd\"", ">", "</", "a", ">", ">", "</", "li", ">", "\n                ", "<", "li", ">", "<", "a", " ", "href", "=", "\"Newton-Leibniz公式.html\"", ">", "<", "img", " ", "src", "=", "\"../images/我的数学笔记061.png\"", " ", "alt", "=", "\"\"", " ", "title", "=", "\"Newton-Leibniz公式\"", " ", "class", "=", "\"imgd\"", ">", "</", "a", ">", ">", "</", "li", ">", "\n                ", "<", "li", ">", "<", "a", " ", "href", "=", "\"Ceva定理.html\"", ">", "<", "img", " ", "src", "=", "\"../images/我的数学笔记154.png\"", " ", "alt", "=", "\"\"", " ", "title", "=", "\"Ceva定理\"", " ", "class", "=", "\"imgd\"", ">", "</", "a", ">", "</", "li", ">", "\n            ", "</", "ul", ">", "\n            ", "<", "ol", ">", "\n                ", "<", "li", ">", "</", "li", ">", "\n                ", "<", "li", ">", "</", "li", ">", "\n                ", "<", "li", ">", "</", "li", ">", "\n                ", "<", "li", ">", "</", "li", ">", "\n                ", "<", "li", ">", "</", "li", ">", "\n            ", "</", "ol", ">", "\n        ", "</", "div", ">", "\n    ", "</", "div", ">", "\n", "</", "body", ">", "\n", "\n", "这是效果图。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;int(input())\n&lt;span class=\"hljs-attribute\"&gt;f1&lt;/span&gt;&amp;#61;f2&amp;#61;1\n&lt;span class=\"hljs-attribute\"&gt;f3&lt;/span&gt;&amp;#61;f1&amp;#43;f2\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; n&amp;gt;f3:\n    &lt;span class=\"hljs-attribute\"&gt;f1&lt;/span&gt;&amp;#61;f2\n    &lt;span class=\"hljs-attribute\"&gt;f2&lt;/span&gt;&amp;#61;f3\n    &lt;span class=\"hljs-attribute\"&gt;f3&lt;/span&gt;&amp;#61;f1&amp;#43;f2\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(f3)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["请问这个该怎么解决呢", ["输入一个自然数，输出不小于该自然数的最小的一个Fibonacci数。（Fibonacci数列：1，1，2，3，5，8，13，······  前面相邻两项之和，构成了后一项。）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;if后边加上大括号&amp;#xff0c;不然你这个else就是无用的&amp;#xff0c;会报错&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["else后面应该加什么，还有什么要修改的吗", ["求公式1- 1/1+ 1 /2- 1/3十1/ 5+·…的结果，要求每一项的绝对值大于10的-6次方（提示：每", "的分母的绝对值来自于Fibonacci数列)", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;不知道题目具体要求&amp;#xff0c;但是可以通过代码的逻辑猜测出它的行为。&lt;br /&gt;使用[:n]的时候&amp;#xff0c;当n小于给定列表的长度时&amp;#xff0c;它会将列表的前n项切片出来&amp;#xff0c;然后利用这前n项的后三项计算n-3次泰波那契数&amp;#xff0c;所以生成的列表长度应为n&amp;#43;(n-3)&amp;#61;2n-3&lt;br /&gt;如果删去该行&amp;#xff0c;当n小于给定列表的长度时&amp;#xff0c;它会直接利用传入列表的后三项计算n-3次泰波那契数&amp;#xff0c;生成的列表长度应为len(signature)&amp;#43;(n-3)其中n&amp;lt;len(signature)&amp;#xff0c;同时因为取的三项数在列表不同位置&amp;#xff0c;生成的n-3个数也基本不同&amp;#xff08;除非signature[:n][-3:]&amp;#61;signature[-3:]&amp;#xff09;&lt;br /&gt;当n大于等于给定列表的长度时&amp;#xff0c;使用[:n]进行切片不会影响原列表&amp;#xff0c;所以结果一样&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["关于Tribonacci的题，解释代码", ["Tribonacci数列,它的工作原理基本上类似于斐波那契数列，", "但将序列的最后 3 个（而不是 2 个）数字相加以生成下一个。", "为什么要用[:n]", "\n", "def", " tribonacci(signature, n):\n  ", "signature", " = signature[:n]\n  ", "for", " i in range(n - ", "3", "):\n      ", "signature", ".append(sum(signature[-", "3", ":]))\n  ", "return", " signature\n", "print", "(tribonacci([", "1", ",", "1", ",", "1", "], ", "10", "))\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;malloc.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,i,dp[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;};\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *s;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    s&amp;#61;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;)*(n&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n        s[i]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;;\n    }\n    s[n]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;dp[i]&amp;lt;&amp;#61;n;i&amp;#61;!i){\n        s[dp[i]&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;O&amp;#39;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//dp[i]为斐波那契数 &lt;/span&gt;\n        dp[i]&amp;#61;dp[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#43;dp[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,s);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["不会做，谁能帮个忙嘛", ["题目描述", "斐波那契数列以如下递推的形式定义：F(0)=1，F(1)=1,F(n)=F(n−1)+F(n−2)（n≥2，n∈N∗）。", "\n", "如果一个数出现在斐波那契数列之中，那么我们就称这个数为斐波那契数。", "\n", "现在，给定一个整数 n，请你构造一个长度为 n 的字符串 s1s2…sn。", "\n", "对于字符串中的第 i 个字符 si：", "\n", "如果 i 是斐波那契数，则 si 为大写字母 O。 如果 i 不是斐波那契数，则 si 为小写字母 o。 输出构造好的字符串。", "\n", "注意，字符下标从 1 到 n。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#  问题1&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;lst1&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;78&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;]\n&lt;span class=\"hljs-attribute\"&gt;lst2&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;55&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;56&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;]\n&lt;span class=\"hljs-attribute\"&gt;lst&lt;/span&gt;&amp;#61;[]\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; i in lst1:\n    &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; not i in lst2:\n        &lt;span class=\"hljs-attribute\"&gt;lst&lt;/span&gt;.append(i)\n&lt;span class=\"hljs-attribute\"&gt;lst&lt;/span&gt;.sort()\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(lst)\n&lt;span class=\"hljs-comment\"&gt;# 问题2&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;nums&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;151&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;54&lt;/span&gt;]\n&lt;span class=\"hljs-attribute\"&gt;nums1&lt;/span&gt;&amp;#61;[]\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; i in nums:\n    &lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;nums.count(i)\n    &lt;span class=\"hljs-attribute\"&gt;nums1&lt;/span&gt;.append(a)\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(max(nums1))\n&lt;span class=\"hljs-comment\"&gt;#  问题4&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;l&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;34&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;55&lt;/span&gt;]\n&lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;int(input())\n&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;while&lt;/span&gt; i &amp;lt;n:\n    &lt;span class=\"hljs-attribute\"&gt;x&lt;/span&gt;&amp;#61;l[i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#43;l[i-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]\n    &lt;span class=\"hljs-attribute\"&gt;l&lt;/span&gt;.append(x)\n    &lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(x)\n&lt;span class=\"hljs-comment\"&gt;#  问题5&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;int(input())\n&lt;span class=\"hljs-attribute\"&gt;m&lt;/span&gt;&amp;#61;int(input())\n&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;n\n&lt;span class=\"hljs-attribute\"&gt;l1&lt;/span&gt;&amp;#61;[]\n&lt;span class=\"hljs-attribute\"&gt;while&lt;/span&gt; i &amp;lt;m:\n    &lt;span class=\"hljs-attribute\"&gt;l1&lt;/span&gt;.append(i)\n    &lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(l1)\n&lt;span class=\"hljs-comment\"&gt;#  问题5&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n&lt;span class=\"hljs-attribute\"&gt;message&lt;/span&gt;&amp;#61;{&amp;#39;姓名&amp;#39;:&amp;#39;&amp;#39;,&amp;#39;性别&amp;#39;:&amp;#39;&amp;#39;,&amp;#39;平均成绩&amp;#39;:&amp;#39;&amp;#39;}\n&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;input(&amp;#39;请输入姓名&amp;#xff1a;&amp;#39;)\n&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;input(&amp;#39;请输入性别&amp;#xff1a;&amp;#39;)\n&lt;span class=\"hljs-attribute\"&gt;c&lt;/span&gt;&amp;#61;input(&amp;#39;请输入成绩&amp;#xff1a;&amp;#39;)\n&lt;span class=\"hljs-attribute\"&gt;d&lt;/span&gt;&amp;#61;c.split(&amp;#39; &amp;#39;)\n&lt;span class=\"hljs-attribute\"&gt;e&lt;/span&gt;&amp;#61;[]\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(d)\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; i in d:\n    &lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;int(i)\n    &lt;span class=\"hljs-attribute\"&gt;e&lt;/span&gt;.append(i)\n&lt;span class=\"hljs-attribute\"&gt;message&lt;/span&gt;[&amp;#39;姓名&amp;#39;]&amp;#61;a\n&lt;span class=\"hljs-attribute\"&gt;message&lt;/span&gt;[&amp;#39;性别&amp;#39;]&amp;#61;b\n&lt;span class=\"hljs-attribute\"&gt;message&lt;/span&gt;[&amp;#39;平均成绩&amp;#39;]&amp;#61;np.mean(e)\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(message)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["请问以下几问怎么写呀？", ["1、给定两个整型列表，找出不是两者共有的元素。这些元素不重复的放入新的列表，并升序排列。输出结果列表", "2、对于一个包含自然数的列表nums，计算他的度。列表的度定义为列表里任一元素出现的频率的最大值。", "3、给定两个整型列表，找出不是两者共有的元素。这些元素不重复的放入新的列表，并升序排列。输出结果列表", "4、编写函数获得第n项斐波那契数列的值。斐波那契数列前10项如下：[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]。第1项为1，第二项为1，从第三项开始，每一项等于前两项之和。", "5、输入两个数，n,m。n是奇数，产生n和m之间的奇数列。不包含m。输出奇数列表", "6、录入学生的基本信息，取得学生的姓名、性别和平均成绩（科目数量不确定,但至少有一项）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;我用#CSDN#这个app发现了有技术含量的博客&amp;#xff0c;小伙伴们求同去《C&amp;#43;&amp;#43;---006---斐波那契数列与哥德巴赫猜想》, 一起来围观吧 &lt;a href=\"https://blog.csdn.net/m0_62469100/article/details/125264945?utm_source&amp;#61;app&amp;amp;app_version&amp;#61;5.5.0&amp;amp;code&amp;#61;app_1562916241&amp;amp;uLinkId&amp;#61;usr1mkqgl919blen\" id=\"textarea_1655380395778_1655380402292_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/m0_62469100/article/details/125264945?utm_source&amp;#61;app&amp;amp;app_version&amp;#61;5.5.0&amp;amp;code&amp;#61;app_1562916241&amp;amp;uLinkId&amp;#61;usr1mkqgl919blen&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["c＋＋入门函数组成问题", ["1.", "用递归函数求Fibonacci数列。", "#include<stdio.h>", "longf((1)){", "long   s;", "if(n==1||n==2)return(2);", "s=", "(3)", "+", "(4)", ";", "returns;", "}", "intmain(void){", "int", "n;", "printf(\"pleaseinputn:\");", "scanf(\"%d\",&n);", "if(n<0)", "printf(\"error!\\n\");", "else", "printf(\"第%d项Fibonacci数列的值为%ld\",n,f(n));", "return0;", "}", "答案：(1)int", "n", "(2)1", "(3)f(n-1)", "(4)f(n-2)", "想请问一下return后面的数字是如何确定的"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;],i;\n    a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        a[i] &amp;#61; a[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43;a[i&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; i%&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["C语言定义数组和数组元素赋值", ["1、定义一个大小为30的整型一维数组x，并将该数组的前2个元素初始化为1，使用循环语句将Fibonacci(斐波那契)数列的前30项依次赋给x[0]、x[1]、x[2]……。(Fibonacci数列为：数列的第1项、第2项均为1，从第3项开始，后一项是前两项之和。对应数组，则：　x[0]=1，x[1]=1，x[2]=x[0]+x[1]，　x[3]=x[1]+x[2]，依此类推。", "2、输出数组x(指数组x的元素)，要求每行只输出5个元素，相邻两个数之间至少有一个空格。", "按以上要求编写程序。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;# 获取用户输入数据&lt;/span&gt;\nnmber&amp;#61;&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;()\n&lt;span class=\"hljs-comment\"&gt;# 第一和第二项&lt;/span&gt;\nn1 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\nn2 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n\n\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(n2)\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;:\n        nth &amp;#61; n1 &amp;#43; n2\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; nth&amp;lt;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(nmber):\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(nth)\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 更新值&lt;/span&gt;\n        n1 &amp;#61; n2\n        n2 &amp;#61; nth\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;font style=\"color:#f00\"&gt;有帮助请采纳,有问题继续交流,你的采纳是对我回答的最大的肯定和动力&lt;/font&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["将斐波那契额序列输出？", ["写一个程序输出菲波那切数列直到最大的数字。", "输出格式：", "1", "1", "2", "3", "5", "8", "13", "21", "34", "55", "89", "144", "233", "377", "610", "987"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;OK了&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["有一题我不会写，各位帮帮忙", ["破解密码 【问题描述】 一个侦探来到罪犯的据点，发现了一个密码锁。密码锁旁写着几行字：此锁的密码会不断变化，每次要输入时，密码锁会随机给出六个数s,t,a,b,c,d（1<=s<=t<=500,1<=a,b,c,d<=10000)。在第s个斐波那契数到第t个斐波那契数之间（包括第s个和第t个）所有不能被a，b，c，d任一数整除的斐波那契数所组成的数列就是密码。 斐波那契数(Fibonacci数)是组合数学中非常重要的一个数列，它的递推公式是： F(1)=0，F(2)=1 F(n)=F(n-1)+F(n-2) 请你编一个程序，读入s,t,a,b,c,d六个数，然后求出密码锁的密码。  【输入格式】 第一行有s，t（1<=s<=t<=500)两个数； 第二行有a,b,c,d(1<=a,b,c,d<=10000)四个数。  【输出格式】 依次输出组成密码的每个斐波那契数（相邻的数用空格隔开）。  【样例输入】 1 5 2 3 5 7  【样例输出】 1 1  注：有两个斐波拉契数1、1，中间是用空格隔开。  【注释】 对于30%的数据，每个斐波那契数小于215-1。 对于50%的数据，每个斐波那契数小于263-1。 对于100%的数据，每个斐波那契数小于10200-1。 "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, n;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; list[&lt;span class=\"hljs-number\"&gt;31&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; };\n    list[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    list[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;lt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || n &amp;gt;&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;input error!&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n            list[i] &amp;#61; list[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; list[i - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;];\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%-8d&amp;#34;&lt;/span&gt;, list[i]);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!(i % &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;) &amp;amp;&amp;amp; i !&amp;#61; n)\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["c语言编程中遇到的疑惑", ["请问怎样定义数组才能使其不错误？", "\n", "对应以下实例", "首先，提示用户：“您想计算斐波那契数列的项数（1~30）：”，并将用户输入的数值存放到变量n中。", "然后，判断用户输入数据是否正确，如果不正确则输出错误信息并终止程序运行。", "接着，计算斐波那契数列的前n项，并存放到数组list中。", "最后，输出计算结果，每个结果输出域宽为8，左对齐，每行最多输出5个结果(不能出现首行为空的情况)。", "\n", "我找不到对应的确定值定义数组，请问该怎样处理？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;FibonacciX&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || x&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;FibonacciX&lt;/span&gt;(x&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;FibonacciX&lt;/span&gt;(x&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;);\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,n;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;FibonacciX&lt;/span&gt;(i);\n        sum &amp;#43;&amp;#61; n;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d,&amp;#34;&lt;/span&gt;,n);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\nSum &amp;#61;%d&amp;#34;&lt;/span&gt;,sum);\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["利用c++循环与嵌套", ["c++编程实现：求斐波那契（Fibonacci）数列，1，1，2，3，5，8，… …的前20项及前20项和。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你写的form  不是from &amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["无法导入head.py", ["我的使用的vsCode中无法导入我自定义的模块head.py，如图 ", "\n", "虽然不能使用form [模块名] import*但是可以使用import", "如图：", "\n", "另外，我的Python版本为Python3.11.0", "head.py代码：", "\n", "## head.py", "\n", "## Pyhton 3 语法代码文件", "\n", "## 版权所有 Copyright ©", "\n", "## Copyright © 2022 高宇涵.330205201010157010 All Rights Reserved.", "\n", "import", " sys\n", "import", " os\n", "import", " time\n", "import", " math\n", "import", " cmath\n", "import", " ctypes\n", "import", " copy\n", "import", " cmd\n", "import", " string\n", "import", " abc\n", "import", " random\n", "import", " collections\n", "from", " collections ", "import", " Counter,OrderedDict ", "as", " Ordir\n", "import", " json\n", "import", " csv\n", "import", " datetime\n", "import", " threading\n", "import", " enum\n", "from", " enum ", "import", " Enum,IntEnum\n", "import", " const\n", "try", ":\n    ", "import", " urllib2\n", "except", " ImportError:\n    ", "import", " urllib\n\n", "try", ":\n    ", "import", " pygame\n", "except", " ImportError:\n    ", "pass", "\n\n", "try", ":\n    ", "import", " pygal\n", "except", " ImportError:\n    ", "pass", "\n\n", "try", ":\n    ", "import", " matplotlib\n", "except", " ImportError:\n    ", "pass", "\n\n", "try", ":\n    ", "import", " requests\n", "except", " ImportError:\n    ", "pass", "\n\n\n", "def", " ", "printf", "(", "*strings, sep:", "str", "=", "''", ",end:", "str", "=", "''", "):\n    ", "\"\"\"\n    默认末尾没有换行符的输出\n    \"\"\"", "\n    sept = sep\n    cstr:", "str", " = ", "''", "\n    ", "for", " ", "str", " ", "in", " strings:\n        cstr += ", "str", "\n    cstr += end\n    ", "print", "(cstr,sep=sept, end=", "''", ")\n    ", "return", " ", "0", "\n\n", "def", " ", "fac", "(", "number:", "int", "):\n    ", "\"\"\"\n    返回斐波那契（Fibonacci）数列中的第{number}员\n    \"\"\"", "\n    ", "if", " number == ", "1", ":\n        ", "return", " ", "1", "\n    ", "if", " number == ", "2", ":\n        ", "return", " ", "1", "\n    ", "if", " number <= ", "0", ":\n        ", "return", " ", "None", "\n    ", "else", ":\n        ", "# number -= 1", "\n        ", "return", " fac(number-", "2", ") + fac(number-", "1", ")\n\n", "def", " ", "Type_int", "(", "num:", "any", "):\n    ", "\"\"\"int()的升级版\"\"\"", "\n    ", "try", ":\n        ", "return", " ", "int", "(num)\n    ", "except", " ValueError:\n        ", "return", " ", "int", "(", "float", "(num))\n\n", "def", " ", "Type_float", "(", "n:", "any", "):\n    ", "\"\"\"给float()取别名\"\"\"", "\n    ", "return", " ", "float", "(n)\n\n", "def", " ", "Type_bool", "(", "n:", "any", "):\n    ", "\"\"\"给bool()取别名\"\"\"", "\n    ", "return", " ", "bool", "(n)\n\n", "def", " ", "Input", "(", "str", ":", "str", "):\n    ", "\"\"\"\n    兼容Python2与Python3的input()版本\n    \"\"\"", "\n    l:", "str", "\n    ", "try", ":\n        l = raw_input(", "str", ")\n    ", "except", " NameError:\n        l = ", "input", "(", "str", ")\n    ", "return", " l\n\n", "def", " ", "colorRGB", "(", "color_text=", "''", "):\n    ", "\"\"\"\n    返回RGB颜色\n    \"\"\"", "\n    ", "if", " color_text.lower() == ", "'white'", ":\n        ", "return", " (", "0", ",", "0", ",", "0", ")\n    ", "if", " color_text.lower() == ", "'black'", ":\n        ", "return", " (", "255", ",", "255", ",", "255", ")\n    ", "if", " color_text.lower() == ", "'yellow'", ":\n        ", "return", " (", "255", ",", "255", ",", "0", ")\n    ", "if", " color_text.lower() == ", "'blue'", ":\n        ", "return", " (", "0", ",", "0", ",", "255", ")\n    ", "if", " color_text.lower() == ", "'green'", ":\n        ", "return", " (", "0", ",", "255", ",", "0", ")\n    ", "if", " color_text.lower() == ", "'orange'", ":\n        ", "return", " (", "255", ",", "128", ",", "0", ")\n    ", "if", " color_text.lower() == ", "'purple'", ":\n        ", "return", " (", "255", ",", "0", ",", "255", ")\n    ", "if", " color_text.lower() == ", "'orange red'", ":\n        ", "return", " (", "255", ",", "69", ",", "0", ")\n    ", "if", " color_text.lower() == ", "'orange yellow'", ":\n        ", "return", " (", "254", ",", "183", ",", "42", ")\n    ", "if", " color_text.lower() == ", "'yellow green'", ":\n        ", "return", " (", "128", ",", "255", ",", "0", ")\n    ", "if", " color_text.lower() == ", "'green blue'", ":\n        ", "return", " (", "17", ",", "100", ",", "180", ")\n    ", "if", " color_text.lower() == ", "'blue purple'", ":\n        ", "return", " (", "50", ",", "74", ",", "178", ")\n    ", "if", " color_text.lower() == ", "'red purple'", ":\n        ", "return", " (", "9", ",", "164", ",", "174", ")\n    ", "else", ":\n       ", "return", " (", "None", ",", "None", ",", "None", ")\n", "\n", "const.py源代码：", "\n", "\n", "import", " sys\n", "from", " threading ", "import", " RLock\n\n\nsingle_lock = RLock()\n\n\n", "def", " ", "Singleton", "(", "cls", "):\n    instance = {}\n\n    ", "def", " ", "_singleton_wrapper", "(", "*args, **kargs", "):\n        ", "with", " single_lock:\n            ", "if", " cls ", "not", " ", "in", " instance:\n                instance[cls] = cls(*args, **kargs)\n        ", "return", " instance[cls]\n\n    ", "return", " _singleton_wrapper\n\n", "@Singleton", "\n", "class", " ", "Const", ":\n    ", "# 自定义异常处理", "\n    ", "class", " ", "ConstValueError", "(", "PermissionError", "):\n        ", "pass", "\n    ", "class", " ", "ConstCaseError", "(", "PermissionError", "):\n        ", "pass", "\n\n    ", "def", " ", "__setattr__", "(", "self, name, value", "):\n        ", "if", " name ", "in", " self.__dict__:\n            ", "raise", " self.ConstValueError(", "\"不能修改常量 {0} 的值 \"", ".", "format", "(name))\n\n        ", "if", " ", "not", " name.isupper():\n            ", "raise", " self.ConstCaseError(", "\"常量名称 {0} 必须大写\"", ".", "format", "(name))\n\n        self.__dict__[name] = value\n\n\nsys.modules[__name__] = Const()\n", "\n", "各位广大网友，请求回答，谢谢！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你不能最后输出才求余啊&amp;#xff0c;那已经完了。在k &amp;#61; m&amp;#43;j之后&amp;#xff0c;就需要对k进行求余了&lt;/p&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["请大家看看这怎么错了？", ["输入n，求斐波那契（Fibonacci）数列的第n项", " (n>2)", "\n", "由于结果可能会非常大，请输出结果对1000000007取模后的值。", "#include <stdio.h>", "int main()", "{", "    int n;", "    scanf(\"%d\",&n);", "    int m=1,j=1,i,k=1;", "    for(i=3;i<=n;i++){", "        k=m+j;", "        m=j;", "        j=k;", "\n", "}\n", "printf", "(", "\"%d\"", ",k%1000000007);\n", "return", " ", "0", ";\n", "\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;参考一下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;请输入项数 n&amp;#xff1a;&amp;#34;&lt;/span&gt;;\n    cin &amp;gt;&amp;gt; n;\n\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, b &amp;#61; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 类斐波那契数列的前两项为2和4&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; numerator &amp;#61; i * &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 分子为奇数项&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; denominator &amp;#61; b; &lt;span class=\"hljs-comment\"&gt;// 分母为类斐波那契数列的当前项&lt;/span&gt;\n        sum &amp;#43;&amp;#61; numerator / denominator; &lt;span class=\"hljs-comment\"&gt;// 累加当前项的值&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c &amp;#61; a &amp;#43; b; &lt;span class=\"hljs-comment\"&gt;// 计算类斐波那契数列的下一项&lt;/span&gt;\n        a &amp;#61; b;\n        b &amp;#61; c;\n    }\n\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;前 &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; 项的和为&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "Fibonacci数列", "Question": ["递推求合  鸡丁咯爹咪！！", ["计算数列二分之一，四分之三，六分之五，十分之七，的前n项和，分母为类斐波那契数列，前两项为2和4"]], "Tag": "算法设计"}
{"Answer": "不知道你这个问题是否已经解决, 如果还没有解决的话: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;你可以参考下这个问题的回答, 看看是否对你有帮助, 链接: &lt;a href=\"https://ask.csdn.net/questions/7563685?utm_source&amp;#61;csdn_ai_ada_ask_robot\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;https://ask.csdn.net/questions/7563685&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;如果你已经解决了该问题, 非常希望你能够分享一下解决方案, 写成博客, 将相关链接放在评论区, 以帮助更多的人 ^-^", "Konwledge_Point": "Fibonacci数列", "Question": ["怎么减少运行时间且能正确运行", ["\n", "斐波那契数列递归调用计算次数", "\n", "斐波那契数列用递归方式计算f(n)=f(n-1)+f(n-2)，重复子问题会进行大量的重复计算，给定n和m，求计算f(n)时计算f(m)的次数。f(0)和f(1)已知，不需递归。", "\n", "输入格式：", "\n", "每一行两个整数n和m（0<=n-m<=40，m>2），两个数之间有一个空格", "\n", "直至“0 0”，这一行不用计算", "\n", "输出格式：", "\n", "一行对应一个结果", "\n", "输入样例：", "\n", "5 3", "\n", "6 3", "\n", "0 0", "\n", "输出样例：", "\n", "2", "\n", "3", "\n", "图1在平台上提交时间长了，图二是我想着减少运行时间，但是却直接没有输出了，想问题在哪里"]], "Tag": "算法设计"}
