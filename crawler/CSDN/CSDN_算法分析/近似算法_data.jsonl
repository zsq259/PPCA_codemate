{"Answer": "&lt;pre&gt;\n&lt;code&gt;while 1:\n    n &amp;#61; int(input(&amp;#34;输入数值&amp;#34;))\n    if n&amp;lt;1:\n        break\n    else:\n        print(&amp;#39;n的平方根为:&amp;#39;, n**0.5)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"88\" src=\"https://img-ask.csdnimg.cn/upload/1622106847866.png\" width=\"308\" /&gt;&lt;/p&gt;\n\n&lt;p&gt;直接用x的0.5平方就得到平方根的值&amp;#xff0c;没必要这么复杂&amp;#xff0c;如有帮助&amp;#xff0c;望采纳&amp;#xff0c;谢谢&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["求大家帮我看一下这道pyython的while题，新手真的卡住了呜呜呜", ["用while语句完成程序逻辑，求如下算法可以求根号x的近似值。（例如，x为3时，算法输出约为1.7320508）。\n\n算法如下：\n\n输入x，若x为负数，则输出“无实数解”，算法结束；\n\n令g=x/2；\n\n通过如下公式计算误差值，如果\n∣x−g∗g∣<10 \n−6\n ，输出g，算法结束；\n\n否则，将（g+x/g）/2作为新的猜测值，仍记为g。\n\n重复步骤3和4"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; PI &amp;#61; &lt;span class=\"hljs-built_in\"&gt;acos&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;-1.0&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;听懂掌声&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["求圆周率的近似值的代码", ["题目要求如下：", "\n", "\n", "我根据公式写的算法是这样的：", "\n", "\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "<iomanip>", "\n", "using", " ", "namespace", " std;\n\n", "double", " ", "jiecheng", "(", "int", " k)", "\n", "{\n    ", "double", " s = ", "1", ";\n    ", "for", "(", "int", " i = ", "1", "; i <= k; i++)\n    {\n        s *= i;\n    }\n    ", "return", " s;\n}\n", "double", " ", "fenmu", "(", "int", " k)", "\n", "{\n    ", "int", " s = ", "1", ";\n    ", "for", "(", "int", " i = ", "1", "; k >= ", "0", "; k--, i += ", "2", ")\n    {\n        s *= i;\n    }\n    ", "return", " s;\n}\n", "int", " ", "main", "()", "\n", "{\n    ", "double", " temp1 = ", "1", ", temp2 = ", "1", ";\n    ", "int", " k = ", "0", ";\n    ", "double", " s = ", "0", ";\n    ", "double", " u;\n    cin >> u;\n    ", "while", "(temp1 / temp2 >= u)\n    {\n    \n        s += temp1 / temp2;\n        k++;\n        temp1 = ", "jiecheng", "(k);\n        temp2 = ", "fenmu", "(k);\n        \n    \n    }\n    cout << ", "setprecision", "(", "6", ") << ", "2.0", " * s;\n    ", "return", " ", "0", ";\n}\n", "\n", "得出的结果接近题目给出的输出要求，但是不一样，请问是我的算法不够准确吗", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\ndef &lt;span class=\"hljs-keyword\"&gt;fac&lt;/span&gt;(x):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; x &amp;#61;&amp;#61; 1 or x &amp;#61;&amp;#61; 0:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; x\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; x * &lt;span class=\"hljs-keyword\"&gt;fac&lt;/span&gt;(x - 1)\n\n\ni &amp;#61; 1\ns &amp;#61; 1\na &amp;#61; eval(&lt;span class=\"hljs-keyword\"&gt;input&lt;/span&gt;()) #精度\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; 1 / &lt;span class=\"hljs-keyword\"&gt;fac&lt;/span&gt;(i) &amp;gt;&amp;#61; a:\n    s &amp;#61; s &amp;#43; 1 / &lt;span class=\"hljs-keyword\"&gt;fac&lt;/span&gt;(i)\n    i &amp;#43;&amp;#61; 1\ns &amp;#61; s &amp;#43; 1 / &lt;span class=\"hljs-keyword\"&gt;fac&lt;/span&gt;(i)\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(s)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "近似算法", "Question": ["写了个输入计算精度，求e近似值的算法，请问下为什么会在第八行报错，及如何修改", ["写了个输入计算精度，求e近似值的算法，请问下为什么会在第八行报错，及如何修改", "\n", "原算法：", "\n", "def", " ", "factorial", "(", "a", "):\n    ", "if", " ", "a", " == ", "1", ":\n        ", "return", " ", "a", "\n    ", "else", ":\n        ", "return", " (", "a", " * ", "factorial", "(", "a", " - ", "1", "))", "\n", "b", " = ", "1", "\n", "c", " = ", "1", "\n", "while", " ", "b", " <= ", "int", "(", "input", "()):\n    ", "c", " = ", "c", " + ", "1", " / ", "factorial", "(", "b", ")", "\n    ", "b", " = ", "b", " + ", "1", "\n", "print", "(", "c", ")", "\n\n", "\n", "报错结果：", "\n", "line", " ", "8", ", ", "in", " <module>\n    ", "while", " b <= ", "int", "(", "input", "()):\nValueError: invalid literal ", "for", " ", "int", "() ", "with", " base ", "10", ": ", "''", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/525587660566180.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/159697660566185.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码如下&amp;#xff0c;供参考&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; x, s, a;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入x\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;x);\n    a &amp;#61; x;\n    s &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(a) &amp;gt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-8&lt;/span&gt;); i&amp;#43;&amp;#43;)\n    {\n        s &amp;#61; s &amp;#43; a;\n        a &amp;#61; -a * &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(x, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) / (&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * i * (&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;sinx &amp;#61; %.1f\\n&amp;#34;&lt;/span&gt;, s);\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "近似算法", "Question": ["常用数值计算算法及其程序设计", ["1．采用递推法计算sinx幂级数展开式的近似值，当通项绝对值小于10-8时停止累加。", "【测试数据】", "\n", "当输入x=3.1415926时输出0.0,，当输入x=1.5707963时输出1.0"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/rosone/article/details/7796535", "Konwledge_Point": "近似算法", "Question": ["求任意凸多边形的最大内接正交矩形", ["正交矩形就是四个边平行于坐标轴的矩形。请问这个用什么算法实现呀？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先求平均数&amp;#xff0c;平均数乘以4&amp;#xff0c;得到一个基准数。然后把所有数从小到大排序&amp;#xff0c;因为是均分&amp;#xff0c;所以每组四个数&amp;#xff0c;和近似相等&amp;#xff0c;那么只能是最小数和最大数在一组&amp;#xff0c;可以尝试前1后三&amp;#xff0c;前2后2&amp;#xff0c;前3后1这几种组合哪种跟基准数的偏差最小&amp;#xff0c;取偏差最小的方案&amp;#xff0c;其它分组同样的处理方式&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["一道算法题，把28个数均分为7组，使每组和近似相等，要求使用c/c++", ["把28个数均分为7组，使每组和近似相等。", "\n", "  如果可以适用于任意数更好。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;安利wolfram&lt;br /&gt;&lt;a href=\"https://www.wolframalpha.com/input/?i&amp;#61;plot&amp;#43;20%2Bx1*cos%28x2%29%2Bx2*sin%28x1%29&amp;#43;x1&amp;#43;from&amp;#43;0&amp;#43;to&amp;#43;10%2C&amp;#43;&amp;#43;x2&amp;#43;from&amp;#43;-10&amp;#43;to&amp;#43;0\" id=\"textarea_1633169926407_1633170219963_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;plot 20&amp;#43;x1*cos(x2)&amp;#43;x2*sin(x1) x1 from 0 to 10,  x2 from -10 to 0 - Wolfram|Alpha&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;Compute answers using Wolfram&amp;#39;s breakthrough technology &amp;amp; knowledgebase, relied on by millions of students &amp;amp; professionals. For math, science, nutrition, history, geography, engineering, mathematics, linguistics, sports, finance, music…&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.wolframalpha.com/input/?i&amp;#61;plot&amp;#43;20%2Bx1*cos%28x2%29%2Bx2*sin%28x1%29&amp;#43;x1&amp;#43;from&amp;#43;0&amp;#43;to&amp;#43;10%2C&amp;#43;&amp;#43;x2&amp;#43;from&amp;#43;-10&amp;#43;to&amp;#43;0&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/009612071336192.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["布置了一个题目，用一个算法计算以下函数的最大值", ["有没有啥网站能画出这种函数的图像的，或者能计算出这个函数的最大值的近似值，我做一个参考", "\n"]], "Tag": "算法设计"}
{"Answer": "这是除号性质的问题，即使这个函数中的返回值是double类型的，但是你在return的时候是进行一个计算，也就是1除以2, 1/2得到的结果是0，即使在计算完1/2之后返回调用点的时候，返回的也是0而不是你想要的0.5", "Konwledge_Point": "近似算法", "Question": ["递归问题。。。。。。。", ["\n请问下为什么第6行写1/2得到的是n-1应该得到的答案，而写了0.5得到的就是正确的呢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;同学你好&amp;#xff0c;代码供参考&amp;#xff0c;如有帮助还麻烦题主给个宝贵的采纳支持一下答题呢&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;s &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;%初始s&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;%初始i&lt;/span&gt;\nds &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;%初始ds&lt;/span&gt;\nflag &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;%初始符号&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(ds)&amp;gt;&lt;span class=\"hljs-number\"&gt;1e-4&lt;/span&gt;)\n    s &amp;#61; s&amp;#43;ds;\n    &lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n    flag &amp;#61; -flag; &lt;span class=\"hljs-comment\"&gt;%符号每次换一下&lt;/span&gt;\n    ds &amp;#61; flag/&lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\nfprintf(&lt;span class=\"hljs-string\"&gt;&amp;#39;pi的近似值%f \\n&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;*s)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;结果&amp;#xff1a;&lt;br /&gt;pi的近似值3.141393 &lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["用matlab利用格里高利公式求pi的近似值，要求精确到最后一项的绝对值小于10^-4（用while语句来实现））", ["网上查到的相关算法不能运行，希望大神可以帮忙指点一下！"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-xml\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; prev1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;,n,error,prev;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f %f&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;error);\n    prev &amp;#61; &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt; / &lt;span class=\"hljs-number\"&gt;2.0&lt;/span&gt; * (prev1 &amp;#43; n / prev1);\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(prev - prev1) &amp;gt; error){\n        prev1 &amp;#61; prev;\n        prev &amp;#61; &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt; / &lt;span class=\"hljs-number\"&gt;2.0&lt;/span&gt; * (prev1 &amp;#43; n / prev1);\n    }\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.2f&amp;#34;&lt;/span&gt;,prev);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/1625367682409image.png\" /&gt;&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["求计算n的平方根 的计算方法", ["Heron方法是古希腊人用于计算一个数n的平方根的方法。该方法产生一系列值不断逼近√", "​n", "​", "​​ 。序列中的第一个值是一个任意的猜测值，其他值根据前一个值prev计算获得，计算公式如下：", "\n", "​2", "​", "​1", "​​ (prev+", "​prev", "​", "​n", "​​ )", "\n", "输入两个数：n和error，初始猜测值为1.0，重复计算其更好的近似值，直到两次相邻的近似值之差（绝对值）小于或等于error。输出n的平方根。", "\n", "输入格式:", "输入n和error", "\n", "输出格式:", "输出n的平方根", "\n", "输入样例1:", "在这里给出一组输入。例如：", "\n", "4.0", "0.5", "输出样例1:", "在这里给出相应的输出。例如：", "\n", "2.05"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;math.h&amp;gt;\nint main()\n{\nfloat x0,x1,x2,y0,y1,y2;\nprintf(&amp;#34;please input x1,x2:\\n&amp;#34;);\nloop: scanf(&amp;#34;%lf %lf&amp;#34;,&amp;amp;x1,&amp;amp;x2);\ny1&amp;#61;2*pow(x1,3)-4*pow(x1,2)&amp;#43;3*x1-6;\ny2&amp;#61;2*pow(x2,3)-4*pow(x2,2)&amp;#43;3*x2-6; if (y1&amp;#43;y2&amp;gt;&amp;#61;y1)\n{\nprintf(&amp;#34;请重新输入&amp;#34;);\ngoto loop;\n}\nelse\n{\ndo\n{ x0&amp;#61;(x1*y2-x2*y1)/(y2-y1);\ny0&amp;#61;2*pow(x0,3)-4*pow(x0,2)&amp;#43;3*x0-6; if(y0*y1&amp;gt;0)\n{\nx1&amp;#61;x0;\ny1&amp;#61;y0;\n}\nelse\n{\nx2&amp;#61;x0;\ny2&amp;#61;y0;\n}\n}\nwhile(fabs(y0)&amp;gt;1e-4);\nprintf(&amp;#34;%f&amp;#34;,x0) ;\n}\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"264\" src=\"https://img-ask.csdnimg.cn/upload/1623466110249.png\" width=\"467\" /&gt;&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["用弦截法求程2x3-4x2+3x-6=0在(0,3)内的近似根，直到|f(x)|<0.0001为止。", ["C语言程序。用弦截法求程2x3-4x2+3x-6=0在(0,3)内的近似根，直到|f(x)|<0.0001为止。"]], "Tag": "算法设计"}
{"Answer": "相关文章的原理：\r\n\r\n每一篇文字发布时，从其中抽取几个关键词（tag），\r\n相关文章即是具有相同关键词的最近的几篇。\r\n每一篇文章的各个tag可以给一个权重，也可以按各个关键词的权重和来作为文章相似度的指标。\r\n\r\n（比如：本文的tag为 lunece 0.5,文章 0.2,查找 0.2...", "Konwledge_Point": "近似算法", "Question": ["lunece查找 近似文章的问题", ["我正在做一个网站的垂直搜索模块，现在碰到了以下问题。 ", "请注意：根据字符串查询相关内容的方法我已经写好了，所以我不是问查找相关文章的算法。 ", "我要问的是： ", "我的查找相关文章的方法 要求我传一个代表文章内容的字符串作为对比参数。 ", "难道我在显示每篇文章之前都要先把 该文章的所有内容传给 查找相关文章的方法，然后获得相关文章列表吗？ ", "如果文章的内容很多，这种传输会不会造成性能问题呢？ ", "javaeye生成相关文章列表的凭据数据是什么呢？也是拿整篇文章的内容去求得相关文章列表？还是有其他更改好的方法？ ", "如果 javaeye也是把文章的所有内容作为查找相关文章的凭据，那么这些内容是如何传到后台的呢，通过url参数吗？ ", "小弟不才，还请各位大大帮助。", "附上查询方法：", "package com.jdtqn.module.tools.search;\n\n", "import java.io.StringReader;", "\nimport java.util.ArrayList;", "\nimport java.util.List;", "\n\n", "import jeasy.analysis.MMAnalyzer;", "\n\n", "import org.apache.lucene.index.IndexReader;", "\nimport org.apache.lucene.search.Hits;", "\nimport org.apache.lucene.search.IndexSearcher;", "\nimport org.apache.lucene.search.Query;", "\nimport org.apache.lucene.search.similar.MoreLikeThis;", "\n\n", "import com.jdtqn.module.tools.SearchResult;", "\nimport com.jdtqn.module.tools.SearchResults;", "\n\n", "public class MoreLikeThisSearcher implements Seacher{", "\n\n", "private String index_path=\"D:\\\\work\\\\resin-pro-3.0.26\\\\deploy\\\\jdtqn_final\\\\anthemIndex\";\n\npublic void setIndex_path(String index_path){\n    this.index_path=index_path;\n}\npublic SearchResults search(String queryWord) throws Exception {\n\n    IndexReader r = IndexReader.open(index_path); \n    MoreLikeThis mlt = new MoreLikeThis(r); //传入IndexReader对象提供查询\n    mlt.setAnalyzer(new MMAnalyzer());//设置使用的分词器\n    mlt.setFieldNames(new String[]{\"htmlTitle\",\"htmlContent\"}); //设置需要比较的field字段\n    mlt.setMinWordLen(0);\n    mlt.setMinDocFreq(2);//出现词的频率小于二，则该词不作为关键词被纳入搜索\n    mlt.setMinTermFreq(3);\n    mlt.setBoost(true);\n    Query query = null;\n    query = mlt.like(new StringReader(queryWord)); //创建查询,传入查询内容可为任意的Reader子类\n    IndexSearcher searcher = new IndexSearcher(index_path);\n    Hits hits = searcher.search(query); //根据查询返回相似文档\n    int len = hits.length();\n    System.out.println(len);\n    SearchResult searchResult;\n    SearchResults searchResults = new SearchResults();\n    searchResults.setHitsCount(len);\n    List&lt;searchresult&gt; searchList = new ArrayList&lt;searchresult&gt;();\n    for (int i = 0; i &lt; Math.min(7, len); i++) //如果比7大就只返回前7条\n    {\n        searchResult = new SearchResult();\n        System.out.println(hits.score(i));\n        searchResult.setHtmlName(hits.doc(i).get(\"htmlName\"));\n        System.out.println(hits.doc(i).get(\"htmlName\"));\n        searchResult.setHtmlTitle(hits.doc(i).get(\"htmlTitle\"));\n        searchList.add(searchResult);\n        System.out.println(\"*****************\");\n    }\n    r.close(); //关闭索引\n    return searchResults;\n}\n", "\n\n", "}", "\n\n", "问题补充", "难道就没人知道吗？没人做相似文章推荐这个功能吗？", "自己顶下"]], "Tag": "算法设计"}
{"Answer": "有没有人哪,给其他解决方案也行.如果可以直接采纳了.", "Konwledge_Point": "近似算法", "Question": ["三维装箱(Java)求优化或给出更好的代码方案", ["代码效率太低,货品一多会导致内存溢出.求优化或给出更好的解决方案", "\n\n", "package com.example.demo.box;\n\n\nimport java.util.*;\n\npublic class GoodsInBox {\n    /*箱子的型号,盛放空间*/\n    private Map<Integer,Map<String,Object>> boxTypeArr;\n    /*订单中的商品*/\n    private Map<Integer,Map<String,Integer>> orderItemArr;\n    /*计算结果*/\n    private Map<String /*箱子型号*/,Integer/*需要几个*/> result=new HashMap<String,Integer>();\n    /*计算过程数据,有效的空间列表*/\n    private List<String> inboxinfo=new ArrayList<String>();\n\n    /**\n     * 根据箱型以及订单中的商品，返回每个箱型需要箱子多少只。如果没有任何的箱子能装下某一款超大商品的时候，抛出异常\n     *\n     * @param linkedHashMap\n     * @param orderItemArr\n     * @return\n     */\n    public GoodsInBox(LinkedHashMap<Integer, Map<String, Object>> linkedHashMap, Map<Integer, Map<String, Integer>> orderItemArr){\n        this.boxTypeArr = linkedHashMap;\n        this.orderItemArr=orderItemArr;\n        //开始执行\n        run();\n    }\n\n\n    /**\n     * boxType.get(boxkey)  value{boxcode=1, l=100, w=100, h=120}\n     * boxType.get(boxkey) {boxcode=2, l=200, w=150, h=180}\n     * boxType.get(boxkey) {boxcode=3, l=500, w=600, h=700}\n     */\n    //执行装箱\n    private void run(){\n        Integer[] boxkeys=boxTypeArr.keySet().toArray(new Integer[]{});\n        aBoxType: for (Integer boxkey : boxkeys) {\n            tryInSpance(boxTypeArr.get(boxkey), orderItemArr);\n        }\n    }\n\n    /**\n     * 每次测试1块空间,和全部商品,将商品一次向空间转移,放进去后产生新的3块空间,同时商品的数量再减少,直到商品全部转移;\n     * @param boxMap\n     * @param products\n     */\n    private void tryInSpance(Map<String/* 长l宽w高h */, Object/* 厘米 */> boxMap/* 某1个盒子或者是1个剩餘空間 */,\n                             Map<Integer, Map<String, Integer>> products/* 多件商品，装进去一件，删除一件，直到删没了为止 */){\n        if (null == boxMap || null == products) {\n            return;\n        }\n        java.util.Iterator<Integer> gks = products.keySet().iterator();    //对存储商品的Map进行遍历\n        while (gks.hasNext()) {\n            Integer oid = gks.next();                      //oid就是products的Key\n            Map<String, Integer> g = products.get(oid);    //g是具体的商品属性\n            // 商品数量\n            Integer num = g.get(\"n\");     //获取某种商品的数量\n            if (0 == num) {\n                return;\n            }\n            // 多少件商品就循环多少次，每次处理一件；\n            for (int i = num; i > 0; i--) {\n                String boxcode = boxMap.get(\"boxcode\").toString().concat(\":\").concat(oid.toString());   //箱的Kye:商品的Key    1:1\n                Integer bl = Integer.valueOf(boxMap.get(\"l\").toString());       //箱的长\n                Integer bw = Integer.valueOf(boxMap.get(\"w\").toString());       //箱的宽\n                Integer bh = Integer.valueOf(boxMap.get(\"h\").toString());       //箱的高\n                Integer gl = g.get(\"l\");                                        //商品的长\n                Integer gw = g.get(\"w\");                                        //商品的宽\n                Integer gh = g.get(\"h\");                                        //商品的高\n                // 正面放置商品\n                if ((bl - gl) >= 0 && (bw - gw) >= 0 && (bh - gh) >= 0) {\n                    // 可以放入的情况下先减少商品的数量；\n                    g.put(\"n\", i - 1);\n                    // 加入统计\n                    inboxinfo.add(boxcode);\n                    // 正放的3块剩余空间\n                    Map<String, Object> leftover;\n                    // 第一块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-1:\").concat(oid.toString()));\n                    leftover.put(\"l\", gl);\n                    leftover.put(\"w\", gw);\n                    leftover.put(\"h\", bh - gh);\n                    tryInSpance(leftover, products);\n                    // 第二块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-2:\").concat(oid.toString()));\n                    leftover.put(\"l\", gl);\n                    leftover.put(\"w\", bw - gw);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n                    // 第三块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-3:\").concat(oid.toString()));\n                    leftover.put(\"l\", bl - gl);\n                    leftover.put(\"w\", bw);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n\n                    // 侧面放置商品\n                } else if ((bl - gw) >= 0 && (bw - gl) >= 0 && (bh - gh) >= 0) {\n                    // 可以放入的情况下先减少商品的数量；\n                    g.put(\"n\", i - 1);\n                    // 加入统计\n                    inboxinfo.add(boxcode);\n                    // 侧放的3块剩余空间\n                    Map<String, Object> leftover;\n                    // 第一块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-1:\").concat(oid.toString()));\n                    leftover.put(\"l\", gl);\n                    leftover.put(\"w\", gw);\n                    leftover.put(\"h\", bh - gh);\n                    tryInSpance(leftover, products);\n                    // 第二块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-2:\").concat(oid.toString()));\n                    leftover.put(\"l\", bw - gl);\n                    leftover.put(\"w\", gw);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n\n                    // 第三块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-3:\").concat(oid.toString()));\n                    leftover.put(\"l\", bl - gw);\n                    leftover.put(\"w\", bw);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n\n                    // 卧倒放置商品\n                } else if (g.get(\"t\") == 1 && (bl - gh) >= 0 && (bw - gw) >= 0 && (bw - gl) >= 0) {\n                    // 可以放入的情况下先减少商品的数量；\n                    g.put(\"n\", i - 1);\n                    // 加入统计\n                    inboxinfo.add(boxcode);\n                    // 侧放的3块剩余空间\n                    Map<String, Object> leftover;\n                    // 第一块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-1:\").concat(oid.toString()));\n                    leftover.put(\"l\", gh);\n                    leftover.put(\"w\", gw);\n                    leftover.put(\"h\", bh - gh);\n                    tryInSpance(leftover, products);\n\n                    // 第二块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-2:\").concat(oid.toString()));\n                    leftover.put(\"l\", bw - gw);\n                    leftover.put(\"w\", gh);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n\n                    // 第三块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-3:\").concat(oid.toString()));\n                    leftover.put(\"l\", bl - gh);\n                    leftover.put(\"w\", bw);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n\n                    // 侧卧放置商品\n                } else if (g.get(\"t\") == 1 && (bl - gw) >= 0 && (bh - gl) >= 0 && (bw - gh) >= 0) {\n                    // 可以放入的情况下先减少商品的数量；\n                    g.put(\"n\", i - 1);\n                    // 加入统计\n                    inboxinfo.add(boxcode);\n                    // 侧放的3块剩余空间\n                    Map<String, Object> leftover;\n                    // 第一块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-1:\").concat(oid.toString()));\n                    leftover.put(\"l\", gw);\n                    leftover.put(\"w\", gh);\n                    leftover.put(\"h\", bh - gl);\n                    tryInSpance(leftover, products);\n                    // 第二块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-2:\").concat(oid.toString()));\n                    leftover.put(\"l\", bw - gh);\n                    leftover.put(\"w\", gw);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n                    // 第三块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-3:\").concat(oid.toString()));\n                    leftover.put(\"l\", bl - gw);\n                    leftover.put(\"w\", bw);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n\n                }\n            }\n        }\n    }\n\n    /**\n     * 返回计算后得到的结果\n     * @return\n     */\n    public Map<String/* 箱子的型号 */, Integer/* 需要几个 */> getResult(){\n        result.clear();\n        // 这里开始数数了！\n        // 所有装入盒子的商品都放到列表中了，\n        // length为特定长度（3）的为商品第一次装入箱子，其它过长（>3）的都是小件商品塞到之前的箱子里的。\n        // 以上运行的结果应该是：最少需要1号箱两个，3号箱1个，\n        for (String code : inboxinfo) {\n            if (code.length() == 3) {\n                String boxno = String.valueOf(code.split(\":\")[0]);\n                Integer num = result.get(boxno);\n                if (null == num)\n                    num = 0;\n                num = num + 1;\n                result.put(boxno + \"\", num);\n            }\n        }\n        return this.result;\n    }\n\n    public static void main(String[] arproducts) {\n        GoodsInBox gb = new GoodsInBox(/* 箱子的规格 */new LinkedHashMap<Integer, Map<String, Object>>() {\n            {\n                // 假设有大中小三种型号的箱子,如下描述：\n                /*-\n                 *  要求数据从数据库中取出来的时候是按照 箱子型号大小系数 (l长+w款+h高) 从小到大的顺序排好序的。這樣裝箱后可以得到近似合理的解\n                 */\n                // 1,小箱\n                this.put(1, new LinkedHashMap<String, Object>() {\n                    {\n                        // 小箱 长 100厘米，宽100厘米，高120厘米；\n                        this.put(\"boxcode\", 1);\n                        this.put(\"l\", 100);\n                        this.put(\"w\", 100);\n                        this.put(\"h\", 120);\n                    }\n                });\n                // 2,中箱\n                this.put(2, new LinkedHashMap<String, Object>() {\n                    {\n                        // 中箱 长200厘米，宽150厘米，高180厘米\n                        this.put(\"boxcode\", 2);\n                        this.put(\"l\", 200);\n                        this.put(\"w\", 150);\n                        this.put(\"h\", 180);\n                    }\n                });\n                // 3,大箱\n                this.put(3, new LinkedHashMap<String, Object>() {\n                    {\n                        // 大箱长500厘米宽600厘米高700厘米\n                        this.put(\"boxcode\", 3);\n                        this.put(\"l\", 500);\n                        this.put(\"w\", 600);\n                        this.put(\"h\", 700);\n                    }\n                });\n\n            }\n        }, /* 订单 */ new LinkedHashMap<Integer, Map<String, Integer>>() {\n            {\n                /*-\n                 *  要求数据从数据库中取出来的时候是按照 商品大小系数 (l长+w款+h高) 从大到小的顺序排好序的。這樣裝箱后可以得到近似合理的解\n                 */\n                // 1,卧室用的小冰箱1个\n                this.put(1, new LinkedHashMap<String, Integer>() {\n                    {\n                        // 长 400厘米，宽500厘米，高600厘米；\n                        this.put(\"l\", 400);\n                        this.put(\"w\", 500);\n                        this.put(\"h\", 600);\n                        this.put(\"n\", 10);\n                        this.put(\"t\", 0);// 是否可以躺着放，0，否；1，是，这个不能躺着放，而且所有商品均不能倒置，而且倒置和正着放置所占用空间一样。\n                    }\n                });\n                // 1,电脑主机箱2台\n                this.put(2, new LinkedHashMap<String, Integer>() {\n                    {\n                        // 长 57厘米，宽21厘米，高52厘米；\n                        this.put(\"l\", 1);\n                        this.put(\"w\", 1);\n                        this.put(\"h\", 1);\n                        this.put(\"n\", 5);\n                        this.put(\"t\", 1);// 是否可以躺着放，0，否；1，是\n                    }\n                });\n                // 2,苹果笔记本电脑10台\n                this.put(3, new LinkedHashMap<String, Integer>() {\n                    {\n                        // 长 33厘米，宽24厘米，高6厘米；\n                        this.put(\"l\", 1);\n                        this.put(\"w\", 1);\n                        this.put(\"h\", 1);\n                        this.put(\"n\", 5);\n                        this.put(\"t\", 1);// 是否可以躺着放，0，否；1，是\n                    }\n                });\n\n            }\n        });\n\n        // 1号箱子 2只,分别装笔记本和小键盘； 3号箱子：1只用来装冰箱\n        System.out.println(gb.getResult().toString());\n    }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;数组前三个元素取中间的一个就行了&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["关于#算法#的问题：第一题时间复杂度需要O（1）的话，可不可以直接用if判断来进行输出第二题真不懂求解惑(语言-c语言)", ["求解惑", "1.令A[1...n]为整数数组，n>2,请设计一个O（1）时间的算法，它在A中找出一个既不是最大值也不是最小值得元素", "2.证明", " n", "Σ  j log j   = θ（n²logn）", "j=1", "①用代数方法", "②用积分近似求和的方法", "\n", "第一题时间复杂度需要O（1）的话，可不可以直接用if判断来进行输出", "第二题真不懂求解惑"]], "Tag": "算法设计"}
{"Answer": "这不很简单吗。\r\n理论上：先生成n个随机数，求总和得S，每个数都除以S，就保证和为1。\r\n实现上：\r\n1)除之前先判断一下S是否为0（随机算法太妖了吧），是0就重来。\r\n2)考虑到小数的精度问题，最后一个数修正为 1-(前n-1个数的和)。", "Konwledge_Point": "近似算法", "Question": ["求给出一个生成n个和为1，且每个数都在[0,1]间的随机数的算法", ["同题，有伪码就好了，或者其他什么代码都可以。要求生成的随机数分布不会有明显的集中，比如最后几个随机数总是近似为零"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;堆排序吧&amp;#xff0c;或者二叉排序树&amp;#xff0c;也就是你说的红黑树&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["如何使用数据结构与算法优雅地实现边统计边排序？", ["我感觉对于关键字的统计和排序很多情况都是基于已经知道所有关键字的情况下进行哈希表统计然后排序。", "但是假如我并不能事先知道有哪些关键字我只能一次一次得像开盲盒一样去获取关键字，并且每一次获取后我都要更新排序结果。", "我想过如果用数组，每次获取关键词后查找倒是可以用二分查找实现O(logn)，当然也可以添加一个哈希表实现近似O(1)实现查找。如果关键字存在还好，顶多就是交换关键字位置，要是不存在就要进行新增元素并且移动了。", "然后我就想用链表，每次获取一个关键字要么就是在链表头部增一个节点，要么就是把原来存在的关键字节点移动到出现次数加一的位置，至少新增或者移动复杂度是相较于数组是降低了。但是要找到存在的关键字节点的复杂度变成了O(n)。我觉得还是可以使用哈希表存储关键字和节点地址或者引用实现O(1)查找。", "我还想到了个方案，用红黑树，但是红黑树我没听说过有更新操作，但可以用删除和新增两个操作来代替，但是感觉十分不优雅。", "我想问到底最优雅的方法是啥？是不是本身就存在一个我还不了解的方案解决这个问题。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1、举例&amp;#xff1a;1亿条数据分成6份&lt;br /&gt;sql&amp;#xff1a;&lt;br /&gt;select t.*,ntile(6)over(order by null) num from tablea t;&lt;/p&gt;\n&lt;p&gt;2、把1亿数据的表取1000万条分成5份&lt;br /&gt;select t.*,ntile(6)over(order by null) num&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   from&lt;/span&gt;&lt;br /&gt;(select * from tablea  wehre rownum&amp;lt;&amp;#61;10000000) t;&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["oracle主键id分布不均匀的大表怎么均匀等分多份", ["最近项目要做新老系统的数据割接，大表几千万数上亿的数据，不好一次性割接，想近似等分N份。开始我用id平均一下，结果发现主键id分布不均匀，相同间隔区间里，有的一两百万，有的五六百万数据，我还要等最多的那个区间割接完，做不到耗时差不多。并且表还挺多的，就有点伤脑筋，请教一下有啥妙招！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;假设原始特征为ABCD&amp;#xff0c;存在冗余后变成AaBbCcDd。&lt;br /&gt;那么ABCD,abcd,ABcd,abCD,Abcd........等等都是AaBbCcDd近似性能的特征子集。&lt;br /&gt;作者说影响的稳定性是指提升稳定性&amp;#xff0c;在只有4个特征时(ABCD)&amp;#xff0c;但凡缺一个就会导致判断失误&amp;#xff1b;而存在冗余特征时(AaBbCcDd)&amp;#xff0c;缺了部分特征对判断失误影响不大&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["冗余特征的存在是提高了特征选择的稳定性还是降低了稳定性？", ["能不能帮我解释一下这句话：", "“当特征集里含有大量的冗余特征时，由于冗余特征之间的关联性较强，具有相似的（分类）性能，也会产生多个具有近似性能的特征子集，从而影响算法的稳定性。”（出处：", "https://tech.hqew.com/fangan_1573971", "）", "这里说也会产生多个具有近似性能的特征子集是什么意思？影响稳定性在这里是说降低了稳定性吗，然而我在一篇名为《Comparison of Stability for Different Families of Filter-Based and Wrapper-Based Feature Selection》的文献里看到说冗余直接提高了稳定性，这应该怎么理解呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如果大小不一致的话&amp;#xff0c;看看sift算法&amp;#xff0c;大小一致的话直接模板匹配&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["如何用Python+NumPy实现比较两张图片重叠的部分？", ["问题背景", "\n", "如果两张图片", "只存在上下的偏移", "，并且重叠的部分是", "近似相等", "，并且", "不能用缩图", "的方式进行“近似”比较，那么使用Python+Numpy库，有没有什么办法能比对出这两张图片的上下错位的偏移量？", "\n", "例如这两张图：", "\n", "\n", "相关代码", "\n", "我已经实现了一种找到偏移量的方法，是从偏移量-h/2到h/2进行逐行搜寻，依次计算每次的像素差异值的大小之后找到差异最小的那次，算作两张图片的偏移量。", "\n", "但是由于循环次数较多，所以运行速度较慢，能否有", "更快的速度", "可以计算出结果的算法？", "\n", "import", " cv2\n", "import", " numpy ", "as", " np\n\n", "def", " ", "overlay", "(", "d1, d2, d", "):\n    ", "'''计算重叠部分差异绝对值的平均值'''", "\n    L1 = d1.shape[", "0", "]\n    L2 = d2.shape[", "0", "]\n    dd1 = d1[", "max", "(", "0", ",  d):", "min", "(L1, L2+d)]\n    dd2 = d2[", "max", "(-d, ", "0", "):", "min", "(L1-d, L2)]\n    ", "return", " np.", "abs", "(- ", "1", " * dd2 + dd1).mean()\n\n", "def", " ", "offset", "(", "img1, img2", "):\n    ", "'''计算两张图片的平移偏移量'''", "\n    height = img1.shape[", "0", "]\n    avg = np.inf\n    ", "for", " h ", "in", " ", "range", "(- height // ", "2", ", height // ", "2", "): ", "# 搜寻范围", "\n        avg1 = overlay(img1, img2, h)\n        ", "if", " avg > avg1:\n            avg = avg1\n            dh = h\n    ", "return", " dh, avg\n\nimg1 = cv2.imread(file1)\nimg2 = cv2.imread(file2)\n", "print", "(offset(img1, img2))\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;erfen1&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;erfen2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;  &lt;span class=\"hljs-title\"&gt;f1&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;  &lt;span class=\"hljs-title\"&gt;f2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;erfen1&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;) &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;erfen2&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;erfen1&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; m;\n    &lt;span class=\"hljs-comment\"&gt;//解位于(a,b)区间内&amp;#xff0c;如果两者距离小于1.0*&amp;#xff08;1e-2&amp;#xff09;/2。那么a,b已经满足所需精度&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; &lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(a - b) &amp;gt; &lt;span class=\"hljs-number\"&gt;1e-2&lt;/span&gt;;)\n    {\n        m &amp;#61; (a &amp;#43; b) / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        &lt;span class=\"hljs-comment\"&gt;//结果&amp;lt;1.0*&amp;#xff08;1e-2&amp;#xff09;/2,满足精度&amp;#xff0c;直接输出&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;f1&lt;/span&gt;(m)) &amp;lt; &lt;span class=\"hljs-number\"&gt;1e-2&lt;/span&gt;)&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; m;\n        &lt;span class=\"hljs-comment\"&gt;//根据零点定理&amp;#xff0c;若区间[a,b]内&amp;#xff0c;有f1(a)*f1(b)&amp;lt;0&amp;#xff0c;则解位于此区间&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//解位于(a,m)&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;f1&lt;/span&gt;(a) * &lt;span class=\"hljs-built_in\"&gt;f1&lt;/span&gt;(m) &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)b &amp;#61; m;\n        &lt;span class=\"hljs-comment\"&gt;//解位于(m,b)&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;f1&lt;/span&gt;(m) * &lt;span class=\"hljs-built_in\"&gt;f1&lt;/span&gt;(b) &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)a &amp;#61; m;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;erfen2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; m;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; &lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(a - b) &amp;gt; &lt;span class=\"hljs-number\"&gt;1e-3&lt;/span&gt;;)\n    {\n        m &amp;#61; (a &amp;#43; b) / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;f2&lt;/span&gt;(m)) &amp;lt; &lt;span class=\"hljs-number\"&gt;1e-6&lt;/span&gt;)&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; m;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;f2&lt;/span&gt;(a) * &lt;span class=\"hljs-built_in\"&gt;f2&lt;/span&gt;(m) &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)b &amp;#61; m;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;f2&lt;/span&gt;(m) * &lt;span class=\"hljs-built_in\"&gt;f2&lt;/span&gt;(b) &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)a &amp;#61; m;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;  &lt;span class=\"hljs-title\"&gt;f1&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; x)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; x * x * x * x * x &amp;#43; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; * x - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;  &lt;span class=\"hljs-title\"&gt;f2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; x)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; x * x * x - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * x * x - &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; * x - &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "近似算法", "Question": ["使用C++求解区间二分法求根这一问题", ["区间二分法求根", "\n", "用区间二分法求方程x^5+3x-1=0的最小正根，要求误差不超过1/2×10^(-2)，x^3-2x^2-4x-7=0在[3,4]的近似根，要求精度|x^*-x_k |<10^(-3)", "\n", "运行结果及报错内容", "\n", "使用C++语言解决", "\n", "完整可运行代码"]], "Tag": "算法设计"}
{"Answer": "&lt;h4 id=\"h4_以下内容部分参考chatgpt模型&amp;#xff1a;_1681225627647\"&gt;以下内容部分参考ChatGPT模型&amp;#xff1a;&lt;/h4&gt;\n&lt;hr /&gt;\n&lt;p&gt;可以将分母赋值为double类型的1.0&amp;#xff0c;然后在求阶乘时&amp;#xff0c;在循环中将1.0乘上i&amp;#xff0c;这样就可以避免出现运行错误而没有输出的问题。&lt;/p&gt;\n&lt;p&gt;以下是修改后的代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;cosx&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; x, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; result &amp;#61; &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; numerator &amp;#61; &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        numerator *&amp;#61; -x * x;\n        result &amp;#43;&amp;#61; numerator / (&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;)(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * i * (&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr /&gt;\n&lt;h3 id=\"h3_如果我的建议对您有帮助、请点击采纳、祝您生活愉快_1681225627673\"&gt;如果我的建议对您有帮助、请点击采纳、祝您生活愉快&lt;/h3&gt;", "Konwledge_Point": "近似算法", "Question": ["我通过2种方式对分母赋值，一种是通过中间变量再赋值给分母，一种是直接对分母赋1对其求阶乘这是通过中间变量赋值（运行错误没有输出，如何解决？", ["这是一个求cosx近似值的函数，分母的值为阶乘；我通过2种方式对分母赋值，一种是通过中间变量再赋值给分母，一种是直接对分母赋1对其求阶乘", "这是通过中间变量赋值（运行错误没有输出）", "\n", "这是主函数", "\n", "这个是最初的求分母的方式（运行错误）", "\n", "这个是更改过的方式（正确运行）", "\n", "\n", "为什么同样的逻辑第一种只是增加了个中间变量赋值就错误没有输出呢"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;while 1:\n    n &amp;#61; int(input(&amp;#34;输入数值&amp;#34;))\n    if n&amp;lt;1:\n        break\n    else:\n        print(&amp;#39;n的平方根为:&amp;#39;, n**0.5)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"88\" src=\"https://img-ask.csdnimg.cn/upload/1622106847866.png\" width=\"308\" /&gt;&lt;/p&gt;\n\n&lt;p&gt;直接用x的0.5平方就得到平方根的值&amp;#xff0c;没必要这么复杂&amp;#xff0c;如有帮助&amp;#xff0c;望采纳&amp;#xff0c;谢谢&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["求大家帮我看一下这道pyython的while题，新手真的卡住了呜呜呜", ["用while语句完成程序逻辑，求如下算法可以求根号x的近似值。（例如，x为3时，算法输出约为1.7320508）。\n\n算法如下：\n\n输入x，若x为负数，则输出“无实数解”，算法结束；\n\n令g=x/2；\n\n通过如下公式计算误差值，如果\n∣x−g∗g∣<10 \n−6\n ，输出g，算法结束；\n\n否则，将（g+x/g）/2作为新的猜测值，仍记为g。\n\n重复步骤3和4"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; PI &amp;#61; &lt;span class=\"hljs-built_in\"&gt;acos&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;-1.0&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;听懂掌声&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["求圆周率的近似值的代码", ["题目要求如下：", "\n", "\n", "我根据公式写的算法是这样的：", "\n", "\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "<iomanip>", "\n", "using", " ", "namespace", " std;\n\n", "double", " ", "jiecheng", "(", "int", " k)", "\n", "{\n    ", "double", " s = ", "1", ";\n    ", "for", "(", "int", " i = ", "1", "; i <= k; i++)\n    {\n        s *= i;\n    }\n    ", "return", " s;\n}\n", "double", " ", "fenmu", "(", "int", " k)", "\n", "{\n    ", "int", " s = ", "1", ";\n    ", "for", "(", "int", " i = ", "1", "; k >= ", "0", "; k--, i += ", "2", ")\n    {\n        s *= i;\n    }\n    ", "return", " s;\n}\n", "int", " ", "main", "()", "\n", "{\n    ", "double", " temp1 = ", "1", ", temp2 = ", "1", ";\n    ", "int", " k = ", "0", ";\n    ", "double", " s = ", "0", ";\n    ", "double", " u;\n    cin >> u;\n    ", "while", "(temp1 / temp2 >= u)\n    {\n    \n        s += temp1 / temp2;\n        k++;\n        temp1 = ", "jiecheng", "(k);\n        temp2 = ", "fenmu", "(k);\n        \n    \n    }\n    cout << ", "setprecision", "(", "6", ") << ", "2.0", " * s;\n    ", "return", " ", "0", ";\n}\n", "\n", "得出的结果接近题目给出的输出要求，但是不一样，请问是我的算法不够准确吗", "\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\ndef &lt;span class=\"hljs-keyword\"&gt;fac&lt;/span&gt;(x):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; x &amp;#61;&amp;#61; 1 or x &amp;#61;&amp;#61; 0:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; x\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; x * &lt;span class=\"hljs-keyword\"&gt;fac&lt;/span&gt;(x - 1)\n\n\ni &amp;#61; 1\ns &amp;#61; 1\na &amp;#61; eval(&lt;span class=\"hljs-keyword\"&gt;input&lt;/span&gt;()) #精度\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; 1 / &lt;span class=\"hljs-keyword\"&gt;fac&lt;/span&gt;(i) &amp;gt;&amp;#61; a:\n    s &amp;#61; s &amp;#43; 1 / &lt;span class=\"hljs-keyword\"&gt;fac&lt;/span&gt;(i)\n    i &amp;#43;&amp;#61; 1\ns &amp;#61; s &amp;#43; 1 / &lt;span class=\"hljs-keyword\"&gt;fac&lt;/span&gt;(i)\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(s)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "近似算法", "Question": ["写了个输入计算精度，求e近似值的算法，请问下为什么会在第八行报错，及如何修改", ["写了个输入计算精度，求e近似值的算法，请问下为什么会在第八行报错，及如何修改", "\n", "原算法：", "\n", "def", " ", "factorial", "(", "a", "):\n    ", "if", " ", "a", " == ", "1", ":\n        ", "return", " ", "a", "\n    ", "else", ":\n        ", "return", " (", "a", " * ", "factorial", "(", "a", " - ", "1", "))", "\n", "b", " = ", "1", "\n", "c", " = ", "1", "\n", "while", " ", "b", " <= ", "int", "(", "input", "()):\n    ", "c", " = ", "c", " + ", "1", " / ", "factorial", "(", "b", ")", "\n    ", "b", " = ", "b", " + ", "1", "\n", "print", "(", "c", ")", "\n\n", "\n", "报错结果：", "\n", "line", " ", "8", ", ", "in", " <module>\n    ", "while", " b <= ", "int", "(", "input", "()):\nValueError: invalid literal ", "for", " ", "int", "() ", "with", " base ", "10", ": ", "''", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/525587660566180.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/159697660566185.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码如下&amp;#xff0c;供参考&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; x, s, a;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入x\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;x);\n    a &amp;#61; x;\n    s &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(a) &amp;gt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-8&lt;/span&gt;); i&amp;#43;&amp;#43;)\n    {\n        s &amp;#61; s &amp;#43; a;\n        a &amp;#61; -a * &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(x, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) / (&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * i * (&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;sinx &amp;#61; %.1f\\n&amp;#34;&lt;/span&gt;, s);\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "近似算法", "Question": ["常用数值计算算法及其程序设计", ["1．采用递推法计算sinx幂级数展开式的近似值，当通项绝对值小于10-8时停止累加。", "【测试数据】", "\n", "当输入x=3.1415926时输出0.0,，当输入x=1.5707963时输出1.0"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/rosone/article/details/7796535", "Konwledge_Point": "近似算法", "Question": ["求任意凸多边形的最大内接正交矩形", ["正交矩形就是四个边平行于坐标轴的矩形。请问这个用什么算法实现呀？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先求平均数&amp;#xff0c;平均数乘以4&amp;#xff0c;得到一个基准数。然后把所有数从小到大排序&amp;#xff0c;因为是均分&amp;#xff0c;所以每组四个数&amp;#xff0c;和近似相等&amp;#xff0c;那么只能是最小数和最大数在一组&amp;#xff0c;可以尝试前1后三&amp;#xff0c;前2后2&amp;#xff0c;前3后1这几种组合哪种跟基准数的偏差最小&amp;#xff0c;取偏差最小的方案&amp;#xff0c;其它分组同样的处理方式&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["一道算法题，把28个数均分为7组，使每组和近似相等，要求使用c/c++", ["把28个数均分为7组，使每组和近似相等。", "\n", "  如果可以适用于任意数更好。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;安利wolfram&lt;br /&gt;&lt;a href=\"https://www.wolframalpha.com/input/?i&amp;#61;plot&amp;#43;20%2Bx1*cos%28x2%29%2Bx2*sin%28x1%29&amp;#43;x1&amp;#43;from&amp;#43;0&amp;#43;to&amp;#43;10%2C&amp;#43;&amp;#43;x2&amp;#43;from&amp;#43;-10&amp;#43;to&amp;#43;0\" id=\"textarea_1633169926407_1633170219963_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;plot 20&amp;#43;x1*cos(x2)&amp;#43;x2*sin(x1) x1 from 0 to 10,  x2 from -10 to 0 - Wolfram|Alpha&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;Compute answers using Wolfram&amp;#39;s breakthrough technology &amp;amp; knowledgebase, relied on by millions of students &amp;amp; professionals. For math, science, nutrition, history, geography, engineering, mathematics, linguistics, sports, finance, music…&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.wolframalpha.com/input/?i&amp;#61;plot&amp;#43;20%2Bx1*cos%28x2%29%2Bx2*sin%28x1%29&amp;#43;x1&amp;#43;from&amp;#43;0&amp;#43;to&amp;#43;10%2C&amp;#43;&amp;#43;x2&amp;#43;from&amp;#43;-10&amp;#43;to&amp;#43;0&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/009612071336192.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["布置了一个题目，用一个算法计算以下函数的最大值", ["有没有啥网站能画出这种函数的图像的，或者能计算出这个函数的最大值的近似值，我做一个参考", "\n"]], "Tag": "算法设计"}
{"Answer": "这是除号性质的问题，即使这个函数中的返回值是double类型的，但是你在return的时候是进行一个计算，也就是1除以2, 1/2得到的结果是0，即使在计算完1/2之后返回调用点的时候，返回的也是0而不是你想要的0.5", "Konwledge_Point": "近似算法", "Question": ["递归问题。。。。。。。", ["\n请问下为什么第6行写1/2得到的是n-1应该得到的答案，而写了0.5得到的就是正确的呢"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;同学你好&amp;#xff0c;代码供参考&amp;#xff0c;如有帮助还麻烦题主给个宝贵的采纳支持一下答题呢&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;s &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;%初始s&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;%初始i&lt;/span&gt;\nds &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;%初始ds&lt;/span&gt;\nflag &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;%初始符号&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;abs&lt;/span&gt;(ds)&amp;gt;&lt;span class=\"hljs-number\"&gt;1e-4&lt;/span&gt;)\n    s &amp;#61; s&amp;#43;ds;\n    &lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n    flag &amp;#61; -flag; &lt;span class=\"hljs-comment\"&gt;%符号每次换一下&lt;/span&gt;\n    ds &amp;#61; flag/&lt;span class=\"hljs-built_in\"&gt;i&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;\nfprintf(&lt;span class=\"hljs-string\"&gt;&amp;#39;pi的近似值%f \\n&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;*s)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;结果&amp;#xff1a;&lt;br /&gt;pi的近似值3.141393 &lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["用matlab利用格里高利公式求pi的近似值，要求精确到最后一项的绝对值小于10^-4（用while语句来实现））", ["网上查到的相关算法不能运行，希望大神可以帮忙指点一下！"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-xml\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; prev1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;,n,error,prev;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f %f&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;error);\n    prev &amp;#61; &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt; / &lt;span class=\"hljs-number\"&gt;2.0&lt;/span&gt; * (prev1 &amp;#43; n / prev1);\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(prev - prev1) &amp;gt; error){\n        prev1 &amp;#61; prev;\n        prev &amp;#61; &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt; / &lt;span class=\"hljs-number\"&gt;2.0&lt;/span&gt; * (prev1 &amp;#43; n / prev1);\n    }\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.2f&amp;#34;&lt;/span&gt;,prev);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/1625367682409image.png\" /&gt;&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["求计算n的平方根 的计算方法", ["Heron方法是古希腊人用于计算一个数n的平方根的方法。该方法产生一系列值不断逼近√", "​n", "​", "​​ 。序列中的第一个值是一个任意的猜测值，其他值根据前一个值prev计算获得，计算公式如下：", "\n", "​2", "​", "​1", "​​ (prev+", "​prev", "​", "​n", "​​ )", "\n", "输入两个数：n和error，初始猜测值为1.0，重复计算其更好的近似值，直到两次相邻的近似值之差（绝对值）小于或等于error。输出n的平方根。", "\n", "输入格式:", "输入n和error", "\n", "输出格式:", "输出n的平方根", "\n", "输入样例1:", "在这里给出一组输入。例如：", "\n", "4.0", "0.5", "输出样例1:", "在这里给出相应的输出。例如：", "\n", "2.05"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;math.h&amp;gt;\nint main()\n{\nfloat x0,x1,x2,y0,y1,y2;\nprintf(&amp;#34;please input x1,x2:\\n&amp;#34;);\nloop: scanf(&amp;#34;%lf %lf&amp;#34;,&amp;amp;x1,&amp;amp;x2);\ny1&amp;#61;2*pow(x1,3)-4*pow(x1,2)&amp;#43;3*x1-6;\ny2&amp;#61;2*pow(x2,3)-4*pow(x2,2)&amp;#43;3*x2-6; if (y1&amp;#43;y2&amp;gt;&amp;#61;y1)\n{\nprintf(&amp;#34;请重新输入&amp;#34;);\ngoto loop;\n}\nelse\n{\ndo\n{ x0&amp;#61;(x1*y2-x2*y1)/(y2-y1);\ny0&amp;#61;2*pow(x0,3)-4*pow(x0,2)&amp;#43;3*x0-6; if(y0*y1&amp;gt;0)\n{\nx1&amp;#61;x0;\ny1&amp;#61;y0;\n}\nelse\n{\nx2&amp;#61;x0;\ny2&amp;#61;y0;\n}\n}\nwhile(fabs(y0)&amp;gt;1e-4);\nprintf(&amp;#34;%f&amp;#34;,x0) ;\n}\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"264\" src=\"https://img-ask.csdnimg.cn/upload/1623466110249.png\" width=\"467\" /&gt;&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["用弦截法求程2x3-4x2+3x-6=0在(0,3)内的近似根，直到|f(x)|<0.0001为止。", ["C语言程序。用弦截法求程2x3-4x2+3x-6=0在(0,3)内的近似根，直到|f(x)|<0.0001为止。"]], "Tag": "算法设计"}
{"Answer": "相关文章的原理：\r\n\r\n每一篇文字发布时，从其中抽取几个关键词（tag），\r\n相关文章即是具有相同关键词的最近的几篇。\r\n每一篇文章的各个tag可以给一个权重，也可以按各个关键词的权重和来作为文章相似度的指标。\r\n\r\n（比如：本文的tag为 lunece 0.5,文章 0.2,查找 0.2...", "Konwledge_Point": "近似算法", "Question": ["lunece查找 近似文章的问题", ["我正在做一个网站的垂直搜索模块，现在碰到了以下问题。 ", "请注意：根据字符串查询相关内容的方法我已经写好了，所以我不是问查找相关文章的算法。 ", "我要问的是： ", "我的查找相关文章的方法 要求我传一个代表文章内容的字符串作为对比参数。 ", "难道我在显示每篇文章之前都要先把 该文章的所有内容传给 查找相关文章的方法，然后获得相关文章列表吗？ ", "如果文章的内容很多，这种传输会不会造成性能问题呢？ ", "javaeye生成相关文章列表的凭据数据是什么呢？也是拿整篇文章的内容去求得相关文章列表？还是有其他更改好的方法？ ", "如果 javaeye也是把文章的所有内容作为查找相关文章的凭据，那么这些内容是如何传到后台的呢，通过url参数吗？ ", "小弟不才，还请各位大大帮助。", "附上查询方法：", "package com.jdtqn.module.tools.search;\n\n", "import java.io.StringReader;", "\nimport java.util.ArrayList;", "\nimport java.util.List;", "\n\n", "import jeasy.analysis.MMAnalyzer;", "\n\n", "import org.apache.lucene.index.IndexReader;", "\nimport org.apache.lucene.search.Hits;", "\nimport org.apache.lucene.search.IndexSearcher;", "\nimport org.apache.lucene.search.Query;", "\nimport org.apache.lucene.search.similar.MoreLikeThis;", "\n\n", "import com.jdtqn.module.tools.SearchResult;", "\nimport com.jdtqn.module.tools.SearchResults;", "\n\n", "public class MoreLikeThisSearcher implements Seacher{", "\n\n", "private String index_path=\"D:\\\\work\\\\resin-pro-3.0.26\\\\deploy\\\\jdtqn_final\\\\anthemIndex\";\n\npublic void setIndex_path(String index_path){\n    this.index_path=index_path;\n}\npublic SearchResults search(String queryWord) throws Exception {\n\n    IndexReader r = IndexReader.open(index_path); \n    MoreLikeThis mlt = new MoreLikeThis(r); //传入IndexReader对象提供查询\n    mlt.setAnalyzer(new MMAnalyzer());//设置使用的分词器\n    mlt.setFieldNames(new String[]{\"htmlTitle\",\"htmlContent\"}); //设置需要比较的field字段\n    mlt.setMinWordLen(0);\n    mlt.setMinDocFreq(2);//出现词的频率小于二，则该词不作为关键词被纳入搜索\n    mlt.setMinTermFreq(3);\n    mlt.setBoost(true);\n    Query query = null;\n    query = mlt.like(new StringReader(queryWord)); //创建查询,传入查询内容可为任意的Reader子类\n    IndexSearcher searcher = new IndexSearcher(index_path);\n    Hits hits = searcher.search(query); //根据查询返回相似文档\n    int len = hits.length();\n    System.out.println(len);\n    SearchResult searchResult;\n    SearchResults searchResults = new SearchResults();\n    searchResults.setHitsCount(len);\n    List&lt;searchresult&gt; searchList = new ArrayList&lt;searchresult&gt;();\n    for (int i = 0; i &lt; Math.min(7, len); i++) //如果比7大就只返回前7条\n    {\n        searchResult = new SearchResult();\n        System.out.println(hits.score(i));\n        searchResult.setHtmlName(hits.doc(i).get(\"htmlName\"));\n        System.out.println(hits.doc(i).get(\"htmlName\"));\n        searchResult.setHtmlTitle(hits.doc(i).get(\"htmlTitle\"));\n        searchList.add(searchResult);\n        System.out.println(\"*****************\");\n    }\n    r.close(); //关闭索引\n    return searchResults;\n}\n", "\n\n", "}", "\n\n", "问题补充", "难道就没人知道吗？没人做相似文章推荐这个功能吗？", "自己顶下"]], "Tag": "算法设计"}
{"Answer": "有没有人哪,给其他解决方案也行.如果可以直接采纳了.", "Konwledge_Point": "近似算法", "Question": ["三维装箱(Java)求优化或给出更好的代码方案", ["代码效率太低,货品一多会导致内存溢出.求优化或给出更好的解决方案", "\n\n", "package com.example.demo.box;\n\n\nimport java.util.*;\n\npublic class GoodsInBox {\n    /*箱子的型号,盛放空间*/\n    private Map<Integer,Map<String,Object>> boxTypeArr;\n    /*订单中的商品*/\n    private Map<Integer,Map<String,Integer>> orderItemArr;\n    /*计算结果*/\n    private Map<String /*箱子型号*/,Integer/*需要几个*/> result=new HashMap<String,Integer>();\n    /*计算过程数据,有效的空间列表*/\n    private List<String> inboxinfo=new ArrayList<String>();\n\n    /**\n     * 根据箱型以及订单中的商品，返回每个箱型需要箱子多少只。如果没有任何的箱子能装下某一款超大商品的时候，抛出异常\n     *\n     * @param linkedHashMap\n     * @param orderItemArr\n     * @return\n     */\n    public GoodsInBox(LinkedHashMap<Integer, Map<String, Object>> linkedHashMap, Map<Integer, Map<String, Integer>> orderItemArr){\n        this.boxTypeArr = linkedHashMap;\n        this.orderItemArr=orderItemArr;\n        //开始执行\n        run();\n    }\n\n\n    /**\n     * boxType.get(boxkey)  value{boxcode=1, l=100, w=100, h=120}\n     * boxType.get(boxkey) {boxcode=2, l=200, w=150, h=180}\n     * boxType.get(boxkey) {boxcode=3, l=500, w=600, h=700}\n     */\n    //执行装箱\n    private void run(){\n        Integer[] boxkeys=boxTypeArr.keySet().toArray(new Integer[]{});\n        aBoxType: for (Integer boxkey : boxkeys) {\n            tryInSpance(boxTypeArr.get(boxkey), orderItemArr);\n        }\n    }\n\n    /**\n     * 每次测试1块空间,和全部商品,将商品一次向空间转移,放进去后产生新的3块空间,同时商品的数量再减少,直到商品全部转移;\n     * @param boxMap\n     * @param products\n     */\n    private void tryInSpance(Map<String/* 长l宽w高h */, Object/* 厘米 */> boxMap/* 某1个盒子或者是1个剩餘空間 */,\n                             Map<Integer, Map<String, Integer>> products/* 多件商品，装进去一件，删除一件，直到删没了为止 */){\n        if (null == boxMap || null == products) {\n            return;\n        }\n        java.util.Iterator<Integer> gks = products.keySet().iterator();    //对存储商品的Map进行遍历\n        while (gks.hasNext()) {\n            Integer oid = gks.next();                      //oid就是products的Key\n            Map<String, Integer> g = products.get(oid);    //g是具体的商品属性\n            // 商品数量\n            Integer num = g.get(\"n\");     //获取某种商品的数量\n            if (0 == num) {\n                return;\n            }\n            // 多少件商品就循环多少次，每次处理一件；\n            for (int i = num; i > 0; i--) {\n                String boxcode = boxMap.get(\"boxcode\").toString().concat(\":\").concat(oid.toString());   //箱的Kye:商品的Key    1:1\n                Integer bl = Integer.valueOf(boxMap.get(\"l\").toString());       //箱的长\n                Integer bw = Integer.valueOf(boxMap.get(\"w\").toString());       //箱的宽\n                Integer bh = Integer.valueOf(boxMap.get(\"h\").toString());       //箱的高\n                Integer gl = g.get(\"l\");                                        //商品的长\n                Integer gw = g.get(\"w\");                                        //商品的宽\n                Integer gh = g.get(\"h\");                                        //商品的高\n                // 正面放置商品\n                if ((bl - gl) >= 0 && (bw - gw) >= 0 && (bh - gh) >= 0) {\n                    // 可以放入的情况下先减少商品的数量；\n                    g.put(\"n\", i - 1);\n                    // 加入统计\n                    inboxinfo.add(boxcode);\n                    // 正放的3块剩余空间\n                    Map<String, Object> leftover;\n                    // 第一块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-1:\").concat(oid.toString()));\n                    leftover.put(\"l\", gl);\n                    leftover.put(\"w\", gw);\n                    leftover.put(\"h\", bh - gh);\n                    tryInSpance(leftover, products);\n                    // 第二块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-2:\").concat(oid.toString()));\n                    leftover.put(\"l\", gl);\n                    leftover.put(\"w\", bw - gw);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n                    // 第三块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-3:\").concat(oid.toString()));\n                    leftover.put(\"l\", bl - gl);\n                    leftover.put(\"w\", bw);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n\n                    // 侧面放置商品\n                } else if ((bl - gw) >= 0 && (bw - gl) >= 0 && (bh - gh) >= 0) {\n                    // 可以放入的情况下先减少商品的数量；\n                    g.put(\"n\", i - 1);\n                    // 加入统计\n                    inboxinfo.add(boxcode);\n                    // 侧放的3块剩余空间\n                    Map<String, Object> leftover;\n                    // 第一块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-1:\").concat(oid.toString()));\n                    leftover.put(\"l\", gl);\n                    leftover.put(\"w\", gw);\n                    leftover.put(\"h\", bh - gh);\n                    tryInSpance(leftover, products);\n                    // 第二块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-2:\").concat(oid.toString()));\n                    leftover.put(\"l\", bw - gl);\n                    leftover.put(\"w\", gw);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n\n                    // 第三块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-3:\").concat(oid.toString()));\n                    leftover.put(\"l\", bl - gw);\n                    leftover.put(\"w\", bw);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n\n                    // 卧倒放置商品\n                } else if (g.get(\"t\") == 1 && (bl - gh) >= 0 && (bw - gw) >= 0 && (bw - gl) >= 0) {\n                    // 可以放入的情况下先减少商品的数量；\n                    g.put(\"n\", i - 1);\n                    // 加入统计\n                    inboxinfo.add(boxcode);\n                    // 侧放的3块剩余空间\n                    Map<String, Object> leftover;\n                    // 第一块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-1:\").concat(oid.toString()));\n                    leftover.put(\"l\", gh);\n                    leftover.put(\"w\", gw);\n                    leftover.put(\"h\", bh - gh);\n                    tryInSpance(leftover, products);\n\n                    // 第二块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-2:\").concat(oid.toString()));\n                    leftover.put(\"l\", bw - gw);\n                    leftover.put(\"w\", gh);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n\n                    // 第三块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-3:\").concat(oid.toString()));\n                    leftover.put(\"l\", bl - gh);\n                    leftover.put(\"w\", bw);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n\n                    // 侧卧放置商品\n                } else if (g.get(\"t\") == 1 && (bl - gw) >= 0 && (bh - gl) >= 0 && (bw - gh) >= 0) {\n                    // 可以放入的情况下先减少商品的数量；\n                    g.put(\"n\", i - 1);\n                    // 加入统计\n                    inboxinfo.add(boxcode);\n                    // 侧放的3块剩余空间\n                    Map<String, Object> leftover;\n                    // 第一块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-1:\").concat(oid.toString()));\n                    leftover.put(\"l\", gw);\n                    leftover.put(\"w\", gh);\n                    leftover.put(\"h\", bh - gl);\n                    tryInSpance(leftover, products);\n                    // 第二块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-2:\").concat(oid.toString()));\n                    leftover.put(\"l\", bw - gh);\n                    leftover.put(\"w\", gw);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n                    // 第三块空间\n                    leftover = new HashMap<String, Object>();\n                    leftover.put(\"boxcode\", boxcode.concat(\"-3:\").concat(oid.toString()));\n                    leftover.put(\"l\", bl - gw);\n                    leftover.put(\"w\", bw);\n                    leftover.put(\"h\", bh);\n                    tryInSpance(leftover, products);\n\n                }\n            }\n        }\n    }\n\n    /**\n     * 返回计算后得到的结果\n     * @return\n     */\n    public Map<String/* 箱子的型号 */, Integer/* 需要几个 */> getResult(){\n        result.clear();\n        // 这里开始数数了！\n        // 所有装入盒子的商品都放到列表中了，\n        // length为特定长度（3）的为商品第一次装入箱子，其它过长（>3）的都是小件商品塞到之前的箱子里的。\n        // 以上运行的结果应该是：最少需要1号箱两个，3号箱1个，\n        for (String code : inboxinfo) {\n            if (code.length() == 3) {\n                String boxno = String.valueOf(code.split(\":\")[0]);\n                Integer num = result.get(boxno);\n                if (null == num)\n                    num = 0;\n                num = num + 1;\n                result.put(boxno + \"\", num);\n            }\n        }\n        return this.result;\n    }\n\n    public static void main(String[] arproducts) {\n        GoodsInBox gb = new GoodsInBox(/* 箱子的规格 */new LinkedHashMap<Integer, Map<String, Object>>() {\n            {\n                // 假设有大中小三种型号的箱子,如下描述：\n                /*-\n                 *  要求数据从数据库中取出来的时候是按照 箱子型号大小系数 (l长+w款+h高) 从小到大的顺序排好序的。這樣裝箱后可以得到近似合理的解\n                 */\n                // 1,小箱\n                this.put(1, new LinkedHashMap<String, Object>() {\n                    {\n                        // 小箱 长 100厘米，宽100厘米，高120厘米；\n                        this.put(\"boxcode\", 1);\n                        this.put(\"l\", 100);\n                        this.put(\"w\", 100);\n                        this.put(\"h\", 120);\n                    }\n                });\n                // 2,中箱\n                this.put(2, new LinkedHashMap<String, Object>() {\n                    {\n                        // 中箱 长200厘米，宽150厘米，高180厘米\n                        this.put(\"boxcode\", 2);\n                        this.put(\"l\", 200);\n                        this.put(\"w\", 150);\n                        this.put(\"h\", 180);\n                    }\n                });\n                // 3,大箱\n                this.put(3, new LinkedHashMap<String, Object>() {\n                    {\n                        // 大箱长500厘米宽600厘米高700厘米\n                        this.put(\"boxcode\", 3);\n                        this.put(\"l\", 500);\n                        this.put(\"w\", 600);\n                        this.put(\"h\", 700);\n                    }\n                });\n\n            }\n        }, /* 订单 */ new LinkedHashMap<Integer, Map<String, Integer>>() {\n            {\n                /*-\n                 *  要求数据从数据库中取出来的时候是按照 商品大小系数 (l长+w款+h高) 从大到小的顺序排好序的。這樣裝箱后可以得到近似合理的解\n                 */\n                // 1,卧室用的小冰箱1个\n                this.put(1, new LinkedHashMap<String, Integer>() {\n                    {\n                        // 长 400厘米，宽500厘米，高600厘米；\n                        this.put(\"l\", 400);\n                        this.put(\"w\", 500);\n                        this.put(\"h\", 600);\n                        this.put(\"n\", 10);\n                        this.put(\"t\", 0);// 是否可以躺着放，0，否；1，是，这个不能躺着放，而且所有商品均不能倒置，而且倒置和正着放置所占用空间一样。\n                    }\n                });\n                // 1,电脑主机箱2台\n                this.put(2, new LinkedHashMap<String, Integer>() {\n                    {\n                        // 长 57厘米，宽21厘米，高52厘米；\n                        this.put(\"l\", 1);\n                        this.put(\"w\", 1);\n                        this.put(\"h\", 1);\n                        this.put(\"n\", 5);\n                        this.put(\"t\", 1);// 是否可以躺着放，0，否；1，是\n                    }\n                });\n                // 2,苹果笔记本电脑10台\n                this.put(3, new LinkedHashMap<String, Integer>() {\n                    {\n                        // 长 33厘米，宽24厘米，高6厘米；\n                        this.put(\"l\", 1);\n                        this.put(\"w\", 1);\n                        this.put(\"h\", 1);\n                        this.put(\"n\", 5);\n                        this.put(\"t\", 1);// 是否可以躺着放，0，否；1，是\n                    }\n                });\n\n            }\n        });\n\n        // 1号箱子 2只,分别装笔记本和小键盘； 3号箱子：1只用来装冰箱\n        System.out.println(gb.getResult().toString());\n    }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;数组前三个元素取中间的一个就行了&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["关于#算法#的问题：第一题时间复杂度需要O（1）的话，可不可以直接用if判断来进行输出第二题真不懂求解惑(语言-c语言)", ["求解惑", "1.令A[1...n]为整数数组，n>2,请设计一个O（1）时间的算法，它在A中找出一个既不是最大值也不是最小值得元素", "2.证明", " n", "Σ  j log j   = θ（n²logn）", "j=1", "①用代数方法", "②用积分近似求和的方法", "\n", "第一题时间复杂度需要O（1）的话，可不可以直接用if判断来进行输出", "第二题真不懂求解惑"]], "Tag": "算法设计"}
{"Answer": "这不很简单吗。\r\n理论上：先生成n个随机数，求总和得S，每个数都除以S，就保证和为1。\r\n实现上：\r\n1)除之前先判断一下S是否为0（随机算法太妖了吧），是0就重来。\r\n2)考虑到小数的精度问题，最后一个数修正为 1-(前n-1个数的和)。", "Konwledge_Point": "近似算法", "Question": ["求给出一个生成n个和为1，且每个数都在[0,1]间的随机数的算法", ["同题，有伪码就好了，或者其他什么代码都可以。要求生成的随机数分布不会有明显的集中，比如最后几个随机数总是近似为零"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;堆排序吧&amp;#xff0c;或者二叉排序树&amp;#xff0c;也就是你说的红黑树&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["如何使用数据结构与算法优雅地实现边统计边排序？", ["我感觉对于关键字的统计和排序很多情况都是基于已经知道所有关键字的情况下进行哈希表统计然后排序。", "但是假如我并不能事先知道有哪些关键字我只能一次一次得像开盲盒一样去获取关键字，并且每一次获取后我都要更新排序结果。", "我想过如果用数组，每次获取关键词后查找倒是可以用二分查找实现O(logn)，当然也可以添加一个哈希表实现近似O(1)实现查找。如果关键字存在还好，顶多就是交换关键字位置，要是不存在就要进行新增元素并且移动了。", "然后我就想用链表，每次获取一个关键字要么就是在链表头部增一个节点，要么就是把原来存在的关键字节点移动到出现次数加一的位置，至少新增或者移动复杂度是相较于数组是降低了。但是要找到存在的关键字节点的复杂度变成了O(n)。我觉得还是可以使用哈希表存储关键字和节点地址或者引用实现O(1)查找。", "我还想到了个方案，用红黑树，但是红黑树我没听说过有更新操作，但可以用删除和新增两个操作来代替，但是感觉十分不优雅。", "我想问到底最优雅的方法是啥？是不是本身就存在一个我还不了解的方案解决这个问题。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1、举例&amp;#xff1a;1亿条数据分成6份&lt;br /&gt;sql&amp;#xff1a;&lt;br /&gt;select t.*,ntile(6)over(order by null) num from tablea t;&lt;/p&gt;\n&lt;p&gt;2、把1亿数据的表取1000万条分成5份&lt;br /&gt;select t.*,ntile(6)over(order by null) num&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   from&lt;/span&gt;&lt;br /&gt;(select * from tablea  wehre rownum&amp;lt;&amp;#61;10000000) t;&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["oracle主键id分布不均匀的大表怎么均匀等分多份", ["最近项目要做新老系统的数据割接，大表几千万数上亿的数据，不好一次性割接，想近似等分N份。开始我用id平均一下，结果发现主键id分布不均匀，相同间隔区间里，有的一两百万，有的五六百万数据，我还要等最多的那个区间割接完，做不到耗时差不多。并且表还挺多的，就有点伤脑筋，请教一下有啥妙招！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;假设原始特征为ABCD&amp;#xff0c;存在冗余后变成AaBbCcDd。&lt;br /&gt;那么ABCD,abcd,ABcd,abCD,Abcd........等等都是AaBbCcDd近似性能的特征子集。&lt;br /&gt;作者说影响的稳定性是指提升稳定性&amp;#xff0c;在只有4个特征时(ABCD)&amp;#xff0c;但凡缺一个就会导致判断失误&amp;#xff1b;而存在冗余特征时(AaBbCcDd)&amp;#xff0c;缺了部分特征对判断失误影响不大&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["冗余特征的存在是提高了特征选择的稳定性还是降低了稳定性？", ["能不能帮我解释一下这句话：", "“当特征集里含有大量的冗余特征时，由于冗余特征之间的关联性较强，具有相似的（分类）性能，也会产生多个具有近似性能的特征子集，从而影响算法的稳定性。”（出处：", "https://tech.hqew.com/fangan_1573971", "）", "这里说也会产生多个具有近似性能的特征子集是什么意思？影响稳定性在这里是说降低了稳定性吗，然而我在一篇名为《Comparison of Stability for Different Families of Filter-Based and Wrapper-Based Feature Selection》的文献里看到说冗余直接提高了稳定性，这应该怎么理解呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;如果大小不一致的话&amp;#xff0c;看看sift算法&amp;#xff0c;大小一致的话直接模板匹配&lt;/p&gt;", "Konwledge_Point": "近似算法", "Question": ["如何用Python+NumPy实现比较两张图片重叠的部分？", ["问题背景", "\n", "如果两张图片", "只存在上下的偏移", "，并且重叠的部分是", "近似相等", "，并且", "不能用缩图", "的方式进行“近似”比较，那么使用Python+Numpy库，有没有什么办法能比对出这两张图片的上下错位的偏移量？", "\n", "例如这两张图：", "\n", "\n", "相关代码", "\n", "我已经实现了一种找到偏移量的方法，是从偏移量-h/2到h/2进行逐行搜寻，依次计算每次的像素差异值的大小之后找到差异最小的那次，算作两张图片的偏移量。", "\n", "但是由于循环次数较多，所以运行速度较慢，能否有", "更快的速度", "可以计算出结果的算法？", "\n", "import", " cv2\n", "import", " numpy ", "as", " np\n\n", "def", " ", "overlay", "(", "d1, d2, d", "):\n    ", "'''计算重叠部分差异绝对值的平均值'''", "\n    L1 = d1.shape[", "0", "]\n    L2 = d2.shape[", "0", "]\n    dd1 = d1[", "max", "(", "0", ",  d):", "min", "(L1, L2+d)]\n    dd2 = d2[", "max", "(-d, ", "0", "):", "min", "(L1-d, L2)]\n    ", "return", " np.", "abs", "(- ", "1", " * dd2 + dd1).mean()\n\n", "def", " ", "offset", "(", "img1, img2", "):\n    ", "'''计算两张图片的平移偏移量'''", "\n    height = img1.shape[", "0", "]\n    avg = np.inf\n    ", "for", " h ", "in", " ", "range", "(- height // ", "2", ", height // ", "2", "): ", "# 搜寻范围", "\n        avg1 = overlay(img1, img2, h)\n        ", "if", " avg > avg1:\n            avg = avg1\n            dh = h\n    ", "return", " dh, avg\n\nimg1 = cv2.imread(file1)\nimg2 = cv2.imread(file2)\n", "print", "(offset(img1, img2))\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;erfen1&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;erfen2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;  &lt;span class=\"hljs-title\"&gt;f1&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;  &lt;span class=\"hljs-title\"&gt;f2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;erfen1&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;) &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;erfen2&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;erfen1&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; m;\n    &lt;span class=\"hljs-comment\"&gt;//解位于(a,b)区间内&amp;#xff0c;如果两者距离小于1.0*&amp;#xff08;1e-2&amp;#xff09;/2。那么a,b已经满足所需精度&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; &lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(a - b) &amp;gt; &lt;span class=\"hljs-number\"&gt;1e-2&lt;/span&gt;;)\n    {\n        m &amp;#61; (a &amp;#43; b) / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        &lt;span class=\"hljs-comment\"&gt;//结果&amp;lt;1.0*&amp;#xff08;1e-2&amp;#xff09;/2,满足精度&amp;#xff0c;直接输出&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;f1&lt;/span&gt;(m)) &amp;lt; &lt;span class=\"hljs-number\"&gt;1e-2&lt;/span&gt;)&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; m;\n        &lt;span class=\"hljs-comment\"&gt;//根据零点定理&amp;#xff0c;若区间[a,b]内&amp;#xff0c;有f1(a)*f1(b)&amp;lt;0&amp;#xff0c;则解位于此区间&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//解位于(a,m)&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;f1&lt;/span&gt;(a) * &lt;span class=\"hljs-built_in\"&gt;f1&lt;/span&gt;(m) &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)b &amp;#61; m;\n        &lt;span class=\"hljs-comment\"&gt;//解位于(m,b)&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;f1&lt;/span&gt;(m) * &lt;span class=\"hljs-built_in\"&gt;f1&lt;/span&gt;(b) &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)a &amp;#61; m;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;erfen2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; m;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; &lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(a - b) &amp;gt; &lt;span class=\"hljs-number\"&gt;1e-3&lt;/span&gt;;)\n    {\n        m &amp;#61; (a &amp;#43; b) / &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;f2&lt;/span&gt;(m)) &amp;lt; &lt;span class=\"hljs-number\"&gt;1e-6&lt;/span&gt;)&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; m;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;f2&lt;/span&gt;(a) * &lt;span class=\"hljs-built_in\"&gt;f2&lt;/span&gt;(m) &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)b &amp;#61; m;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;f2&lt;/span&gt;(m) * &lt;span class=\"hljs-built_in\"&gt;f2&lt;/span&gt;(b) &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)a &amp;#61; m;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;  &lt;span class=\"hljs-title\"&gt;f1&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; x)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; x * x * x * x * x &amp;#43; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; * x - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;  &lt;span class=\"hljs-title\"&gt;f2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; x)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; x * x * x - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * x * x - &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; * x - &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "近似算法", "Question": ["使用C++求解区间二分法求根这一问题", ["区间二分法求根", "\n", "用区间二分法求方程x^5+3x-1=0的最小正根，要求误差不超过1/2×10^(-2)，x^3-2x^2-4x-7=0在[3,4]的近似根，要求精度|x^*-x_k |<10^(-3)", "\n", "运行结果及报错内容", "\n", "使用C++语言解决", "\n", "完整可运行代码"]], "Tag": "算法设计"}
{"Answer": "&lt;h4 id=\"h4_以下内容部分参考chatgpt模型&amp;#xff1a;_1681225627647\"&gt;以下内容部分参考ChatGPT模型&amp;#xff1a;&lt;/h4&gt;\n&lt;hr /&gt;\n&lt;p&gt;可以将分母赋值为double类型的1.0&amp;#xff0c;然后在求阶乘时&amp;#xff0c;在循环中将1.0乘上i&amp;#xff0c;这样就可以避免出现运行错误而没有输出的问题。&lt;/p&gt;\n&lt;p&gt;以下是修改后的代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;cosx&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; x, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; result &amp;#61; &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; numerator &amp;#61; &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n        numerator *&amp;#61; -x * x;\n        result &amp;#43;&amp;#61; numerator / (&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;)(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * i * (&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr /&gt;\n&lt;h3 id=\"h3_如果我的建议对您有帮助、请点击采纳、祝您生活愉快_1681225627673\"&gt;如果我的建议对您有帮助、请点击采纳、祝您生活愉快&lt;/h3&gt;", "Konwledge_Point": "近似算法", "Question": ["我通过2种方式对分母赋值，一种是通过中间变量再赋值给分母，一种是直接对分母赋1对其求阶乘这是通过中间变量赋值（运行错误没有输出，如何解决？", ["这是一个求cosx近似值的函数，分母的值为阶乘；我通过2种方式对分母赋值，一种是通过中间变量再赋值给分母，一种是直接对分母赋1对其求阶乘", "这是通过中间变量赋值（运行错误没有输出）", "\n", "这是主函数", "\n", "这个是最初的求分母的方式（运行错误）", "\n", "这个是更改过的方式（正确运行）", "\n", "\n", "为什么同样的逻辑第一种只是增加了个中间变量赋值就错误没有输出呢"]], "Tag": "算法设计"}
