{"Answer": "&lt;p&gt;设置一个变量&amp;#xff0c;保存最优解&amp;#xff0c;在得到解的过程中设置判断&amp;#xff0c; 一旦比最优解更差&amp;#xff0c;则停止计算&amp;#xff0c;继续下一组&amp;#xff0c;如果计算出比之前的解更优&amp;#xff0c;则把最优解改成当前的解&amp;#xff0c;然后继续循环&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["穷举法最优解的比较方式", ["穷举法的最优解的得到方式", "我是采用生成可能所得结果的全排列并存储。最终调用再一个一个比较。", "如何修改成在得到排列的过程中比较，即生成一个解就与前一个比较，直至到最终求得最优解。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main() {\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; m,n,i,j,k,s;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;m,&amp;amp;n);\n    s&amp;#61;n-m; \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;s;i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;做对&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;题的人有i个 \n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&amp;#61;&lt;span class=\"hljs-regexp\"&gt;s/2;j&amp;#43;&amp;#43;){//&lt;/span&gt;做对&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;题的人有j个 \n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&amp;#61;&lt;span class=\"hljs-regexp\"&gt;s/3;k&amp;#43;&amp;#43;){//&lt;/span&gt;做对&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;题的人有k个 \n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;#43;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*j&amp;#43;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;*k&amp;#61;&amp;#61;s){\n                    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d\\n&amp;#34;&lt;/span&gt;,i,j,k);\n                }    \n            }    \n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;br /&gt;\n\n&lt;p&gt;觉得有用的话&lt;font color=\"red\"&gt;&lt;strong&gt;采纳&lt;/strong&gt;&lt;/font&gt;一下哈&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["穷举算法问题，求助大佬", ["计算导论与程序设计某次上机考试共出了4道题，其中每名同学都至少做对了一道题。根据已知条件求做对了2、3、4题的可能的人数。。", "输入格式:", "只有一行，为两个用空格分隔的正整数m和n，分别代表参加考试的总人数和总的解题数。", "输出格式:", "有若干行，每一行为一组解，格式均为用空格分隔的三个整数，依次代表解2题的人数，解3题的人数和解4题的人数。多组解的输出顺序按解2题人数由小到大排序，如果解2题的人数相同则按解3题的人数由小到大排序。所有测试数据保证可以用int存储。", "输入样例:", "15 20", "输出样例:", "0 1 1", "1 2 0", "2 0 1", "3 1 0", "5 0 0"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1.题目说的很明白。就是汉字和数字游戏&amp;#xff0c;先说一下人怎么思考&amp;#xff1a;&lt;/p&gt;\n\n&lt;p&gt;       范邓韩王&lt;/p&gt;\n\n&lt;p&gt;&lt;u&gt;&amp;#43;   &lt;/u&gt;&lt;u&gt; 范邓李王 &lt;/u&gt;&lt;/p&gt;\n\n&lt;p&gt;  李王韩范王&lt;/p&gt;\n\n&lt;p&gt;比如两个加数个位是王&amp;#43;王&amp;#xff0c;最终的和个位也还是王&amp;#xff0c;那说明王是0,因为只有0&amp;#43;0才等于0&lt;/p&gt;\n\n&lt;p&gt;       范邓韩0&lt;/p&gt;\n\n&lt;p&gt;&lt;u&gt;&amp;#43;   &lt;/u&gt;&lt;u&gt; 范邓李0 &lt;/u&gt;&lt;/p&gt;\n\n&lt;p&gt;   李0韩范0&lt;/p&gt;\n\n&lt;p&gt;题目就变成这样了。&lt;/p&gt;\n\n&lt;p&gt;比如李是进了一位&amp;#xff0c;两个数相加只可能进1&amp;#xff0c;所以李是1&lt;/p&gt;\n\n&lt;p&gt;       范邓韩0&lt;/p&gt;\n\n&lt;p&gt;&lt;u&gt;&amp;#43;   &lt;/u&gt;&lt;u&gt; 范邓1  0 &lt;/u&gt;&lt;/p&gt;\n\n&lt;p&gt;      10韩范0&lt;/p&gt;\n\n&lt;p&gt;千位&amp;#xff1a;范&amp;#43;范&amp;#61; 10&amp;#xff0c;可以退出范为5&amp;#xff0c;因为如果百位有进位的话&amp;#xff0c;两个相同的数结果为偶数加上进位不可能是10所以百位没有进位&amp;#xff0c;百位没有进位的话&amp;#xff0c;千位两个一样的数相加为10就只能是5&amp;#43;5&lt;/p&gt;\n\n&lt;p&gt;       5邓韩0&lt;/p&gt;\n\n&lt;p&gt;&lt;u&gt;&amp;#43;   &lt;/u&gt;&lt;u&gt; 5邓1 0 &lt;/u&gt;&lt;/p&gt;\n\n&lt;p&gt;     10韩50&lt;/p&gt;\n\n&lt;p&gt;十位&amp;#xff0c;韩&amp;#43;1&amp;#61;5所以韩是4,  邓&amp;#43;邓&amp;#61;韩&amp;#xff0c;韩是4&amp;#xff0c;邓是2&lt;/p&gt;\n\n&lt;p&gt;       5240&lt;/p&gt;\n\n&lt;p&gt;&lt;u&gt;&amp;#43;   &lt;/u&gt;&lt;u&gt; 521 0 &lt;/u&gt;&lt;/p&gt;\n\n&lt;p&gt;     10450&lt;/p&gt;\n\n&lt;p&gt;2.编程解决的话&amp;#xff0c;最简单的就是多级循环。用穷举的办法试出结果。&lt;/p&gt;\n\n&lt;p&gt;邓、王、范、韩、李分别从0-9循环&amp;#xff0c;&lt;/p&gt;\n\n&lt;p&gt;当这五个数都不相等&amp;#xff0c;并且 &amp;#xff08;1000*范&amp;#43;100*邓&amp;#43;10*韩&amp;#43;王&amp;#xff09; &amp;#43; &amp;#xff08;1000*范&amp;#43;100*邓&amp;#43;10*李&amp;#43;王&amp;#xff09;等于&amp;#xff08;10000 * 李 &amp;#43; 1000*王&amp;#43;100*韩&amp;#43;10*范&amp;#43;王&amp;#xff09;时。&lt;/p&gt;\n\n&lt;p&gt;就可以得出结果。&lt;/p&gt;\n\n&lt;p&gt;希望对你有帮助。&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["c++穷举法的一个题目，题干在👇", ["题目：", "\n\n", "奔跑吧兄弟成员：邓超、王祖蓝、范冰冰、韩庚、李晨的加法如下：", "\n\n", "范邓韩王", "\n\n", "+", " 范邓李王 ", "\n\n", "李王韩范王", "\n\n", "其中邓、王、范、韩、李均为1位数字（0-9），编写程序求邓、王、范、韩、李的取值。", "\n\n", "我的程序：", "\n\n", "\n\n", "出现错误：输出答案是这样：", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=1", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=2", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=3", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=4", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=5", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=6", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=7", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=8", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=9", "\n\n", "李=0", "\n\n", "Program ended with exit code: 0", "\n\n", "可以帮我改一下程序，告诉我错误在哪里么，谢谢各位"]], "Tag": "算法设计"}
{"Answer": "修改了3个地方：\r\n 1.  数组改成static，这样才能保存每次递归出来产生的数\r\n 2.  在递归函数中，让m++，否则无法结束递归\r\n 3.  调整了下边界，让最终输出结果是5位以内的二进制。\r\n代码如下：\r\n\r\nint n;\r\nvoid f(int m)\r\n{\r\n    int i = 0;\r\n    static int a[20];\r\n    m++;\r\n    if(m == n)\r\n    {\r\n        for(i = 1; i &lt; n; i++)\r\n        {\r\n            printf(\"%d\",a[i]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n    else\r\n    {\r\n        a[m] = 0;\r\n        f(m);\r\n        a[m] = 1;\r\n        f(m);\r\n    }\r\n}\r\nint main(void)\r\n{\r\n    int m = 0;\r\n    // scanf(\"%d\",&amp;n);\r\n    n = 5 + 1;\r\n    f(m);\r\n    return 0;\r\n}", "Konwledge_Point": "智能穷举搜索", "Question": ["我要穷举m位的二进制数，但是出错了，调试时候也没发现问题~~望指教", ["enter code here\n", "\n\n", "include ", "\n\n", "int n;", "\n\n", "void  f(int m)", "\n{", "\n    int i = 0;", "\n    int a[20];", "\n    if(m==n)", "\n    {", "\n        for(i = 0; i < n; i++)", "\n        {", "\n            printf(\"%d\",a[i]);", "\n        }", "\n        printf(\"\\n\");", "\n    }", "\n    else", "\n    {", "\n        a[m] = 0;", "\n        f(m);", "\n        a[m] = 1;", "\n        f(m);", "\n    }", "\n}", "\n\n", "int main(void)", "\n{", "\n    int m = 0;", "\n//  scanf(\"%d\",&n);", "\n    n = 5;", "\n    f(m);", "\n    return 0;", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个问题的详细论述&amp;#xff0c;请参考这个文章&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://mp.weixin.qq.com/s?__biz&amp;#61;MzIzODAxNjE1OQ&amp;#61;&amp;#61;&amp;amp;mid&amp;#61;2247484908&amp;amp;idx&amp;#61;1&amp;amp;sn&amp;#61;f65249db53819e13e51facf833fca6a0&amp;amp;chksm&amp;#61;e93e861cde490f0a92cdceb4aedb529acb5a54f3fa5f20974c5be0cc576edc9c2b64b5a5ad4a&amp;amp;token&amp;#61;1187079490&amp;amp;lang&amp;#61;zh_CN#rd\"&gt;https://mp.weixin.qq.com/s?__biz&amp;#61;MzIzODAxNjE1OQ&amp;#61;&amp;#61;&amp;amp;mid&amp;#61;2247484908&amp;amp;idx&amp;#61;1&amp;amp;sn&amp;#61;f65249db53819e13e51facf833fca6a0&amp;amp;chksm&amp;#61;e93e861cde490f0a92cdceb4aedb529acb5a54f3fa5f20974c5be0cc576edc9c2b64b5a5ad4a&amp;amp;token&amp;#61;1187079490&amp;amp;lang&amp;#61;zh_CN#rd&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["鸡兔同笼穷举法哪错了", ["#include\"stdio.h\" ", "\nint main()", "\n{", "\nint a,b,c,d;", "\nscanf(\"%d%d\",&a,&b);", "\nfor(c=0;c<=a;c++)", "\n{", "\nfor(d=0;d<=a;d++)", "\n    {", "\n    if(c*2+d*4==b&&c+d==a)    ", "\n{", "\n    printf(\"%d%d\",c,d);", "\n}", "\nelse", "\n{", "\nprintf(\"error\");    ", "\n}", "\n        ", "\n    }    ", "\n    ", "\n}    ", "\n    return 0;", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;有一个数i, 从2开始到sqrt(i)挨个跟i取模%&amp;#xff0c;也就是求余数&amp;#xff0c;余数为0&amp;#xff0c;说明能被整除&amp;#xff0c;i不是质数。&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["请问穷举法找质数的算法思路是什么样的", []], "Tag": "算法设计"}
{"Answer": "假设1元，2元，5元硬币分别为a,b,c个\r\n\r\n```\r\n求满足约束条件\r\na + b + c = n            (1)         \r\n的情况下，\r\na + 2*b + 5*c = m    (2)\r\n解的个数。\r\n```\r\n直接用(1) - (2), 得到公式(3)\r\n\r\n\r\n```\r\n b + 4c = m-n        (3)\r\n a被消去了，因为\r\n 0 &lt;= a &lt;= n\r\n 所以约束条件变为,\r\n 0 &lt;= b + c &lt;= n\r\n```\r\n\r\n最终就变成了求\r\nb+4c = m - n\r\n有多少组整数解的问题\r\n\r\n\r\n```\r\nint resolve(int n, int m) {\r\n\tint b = 0, c = 0;\r\n\tint temp = m - n;\r\n\tint sum = 0;\r\n\t  \r\n\tif ((temp % 4) &gt; n) return 0;\r\n\t\r\n\tfor (int c = (temp/4); c &gt;= 0; --c) {\r\n\t\tb = temp - (c * 4);\r\n\t\tif (b + c &lt;= n)\r\n\t\t\tsum += 1;\r\n\t\telse\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn sum;\r\n\r\n}\r\n \r\n```\r\n\r\n思路大概这样，代码随手写得...", "Konwledge_Point": "智能穷举搜索", "Question": ["acm 里硬币问题 具体题目见下，采用穷举法时间超限，请问怎么修改", ["主页  讨论版   问题  名次  状态  统计", "\n问题 L: 还是硬币问题", "\n时间限制: 1 Sec  内存限制: 128 MB", "\n提交: 183  解决: 30", "\n状态", "\n题目描述", "\n给你无限多个1元的硬币和2元的硬币，还有5元的硬币。", "\n\n", "现在要你从这3种硬币中取n个硬币，使得他们的价值和为m", "\n\n", "输入", "\n多组输入", "\n\n", "每组n ， m ", "\n\n", "n < 1e6 , m <1e6 ", "\n\n", "输出", "\n总的方案数目", "\n\n", "样例输入", "\n2 3", "\n样例输出", "\n1", "\n\n", "#include", "\nint main()", "\n{", "\n    int n,m;", "\n    int x,y,z,i,k,j;", "\n    i=0;", "\n    while(scanf(\"%d%d\",&n,&m)!=EOF)", "\n    {", "\n        for(x=0; x<=n; x++)", "\n        {", "\n            for(y=0; y<=n-x; y++)", "\n            {", "\n                for(z=0; z<=n-x-y; z++)", "\n                {", "\n                    if((x+y+z==n)&&(x+2*y+5*z==m))", "\n                    {", "\n                        i++;", "\n                    }", "\n\n", "            }\n        }\n    }\n    printf(\"%d\\n\",i);\n}\nreturn 0;\n", "\n\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n用&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;&amp;#xff1a;\n&amp;#96;&amp;#96;&amp;#96;c\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,b&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,c&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (a&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;33&lt;/span&gt;){\n       b&amp;#61;  &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(b&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;){\n            c &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(c&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;){\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;*a&amp;#43;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*b&amp;#43;&lt;span class=\"hljs-number\"&gt;0.5&lt;/span&gt;*c&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&amp;amp;&amp;amp;a&amp;#43;b&amp;#43;c&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;){\n                   i&amp;#43;&amp;#43;;\n                }\n               c&amp;#43;&amp;#43;;\n            }\n            b&amp;#43;&amp;#43;;\n        }\n        a&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,i);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["c语言while穷举法", ["c语言穷举法，100 匹马驮 100 担货，大马一匹驮了担，中马一匹驮2担，小马两匹驮一担。有多少种方法？", "用三个for嵌套可以做，用while的话为什么我这么写不行呢？", "用for：", "\n", "\n```c\n", "#include<stdio.h>", "\n\nint main(){\n    int a,b,c,d,", "i", "=0;\n    ", "for", "(", "a", "=1;a<=33;a++){\n        ", "for", "(", "b", "=1;b<=50;b++){\n            ", "for", "(", "c", "=1;c<=200;c++){\n                ", "if", "(3", "*a", "+2", "*b", "+0.5", "*c", "==100&&a+b+", "c", "==100){\n                    i++;\n                }\n            }\n        }\n    }\nprintf(", "\"%d\"", ",i);\n\nreturn 0;\n\n}\n\n\n", "\n", "用", "while", "：\n\n```c\n", "#", "include", "<stdio.h>", "\n", "int", " ", "main", "()", "{\n    ", "int", " a=", "1", ",b=", "1", ",c=", "1", ",i=", "0", ";\n    ", "while", " (a<=", "33", "){\n        ", "while", "(b<=", "50", "){\n            ", "while", "(c<=", "100", "){\n                ", "if", "(", "3", "*a+", "2", "*b+", "0.5", "*c==", "100", "&&a+b+c==", "100", "){\n                   i++;\n                }\n               c++;\n            }\n            b++;\n        }\n        a++;\n    }\n    ", "printf", "(", "\"%d\"", ",i);\n    ", "return", " ", "0", ";\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;import itertools &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; it \n\ns &amp;#61; &lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;#34;&lt;/span&gt;).&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;,&amp;#34;&lt;/span&gt;))\ns &amp;#61; &lt;span class=\"hljs-keyword\"&gt;set&lt;/span&gt;(s)\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(s) &amp;lt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;不足三位数&amp;#xff01;&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &amp;#61; it.permutations(s, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)    \n    &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &amp;#61; [&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(str, i)) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n    &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;sort&lt;/span&gt;()\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(str, &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;)))\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;f&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;共{len(res)}个&amp;#34;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["关于python 特殊的穷举三位数", ["请问像这样的题目，数字由用户输入，怎么实现穷举三位数呢 请问详细的代码是什么呢", "谢谢解答"]], "Tag": "算法设计"}
{"Answer": "你可以用 ArrayList，不用考虑长度，用add动态添加，最后一次性\r\nfor (int i = al.length - 1; i &gt;= 0; i--)  逆序遍历 a;[i];\r\n单个数字转换内存不足有点夸张了，你的数字能有多大？100位？1000位？宇宙中的所有原子的个数应该也没有10的1000次方。", "Konwledge_Point": "智能穷举搜索", "Question": ["如何解决数组的空间不足的问题", ["\n", "在一个进制转换的问题上卡了很久，十六进制转八进制，我是想先将十六进制转换成十进制，再将十进制转换成八进制。十六进制转十进制我可以很好实现，就是将字符串逐一取出求出权值就行。问题在十进制转八进制上。因为在数学上，", "\n", "十进制转八进制就是该数求余再倒序，问题就出在这。", "\n", "为实现将数倒序，我得先将数放在数组里，再将数组进行逆向输出。可是数组是创建时就初始化好空间大小的，当所转换的数非常大时数组都无法满足时就错了，想请问是否有更好的方法解决？或者当数组的使用遇到空间上的问题是有没有什么好的处置方法？求教~~~", "\n", "以下献上十六进制转八进制代码（请大家对我的代码多多指正，初学者比较生疏，谢谢~）：", "\n\n", "//多次运算十六进制转八进制\nimport java.util.*;\npublic class BASIC_12_3_3 {\n    public static void main(String args[]){\n        int n,tag=0;\n        long sum=0,b,tmp=1,k,c; \n        String H[] = new String[11];\n        Scanner sc = new Scanner(System.in);\n        n = sc.nextInt();\n        for(int i=0;i < n;i++){\n            H[i] = sc.next();\n        }\n        for(int z=0;z < n;z++){\n            int i = 0;\n            //十六进制转成十进制\n            for(int j=H[z].length()-1;j >= 0;j--){\n                b = H[z].charAt(j);\n                if(b>='0' && b<='9'){\n                    b = (b - '0') * tmp;\n                    sum = sum + b;\n                    tmp = tmp * 16;\n                }\n                else if(b>='A' && b<='F'){\n                    b = (b - 'A' + 10) * tmp;\n                    sum = sum + b;\n                    tmp = tmp * 16;\n                }\n            }\n            //此处得出该数的十进制sum，以下是十进制转八进制\n            if(sum>=0 && sum<8){\n                System.out.print(sum);\n            }\n            else if(sum >= 8){\n                k = sum;\n                long list[] = new long[20];//此处用数组进行逆序输出，但容易出现数据溢出\n                while(k != 0){\n                    c = k % 8;\n                    list[i] = c;\n                    k = k / 8;\n                    i ++;\n                }\n                if(k == 0){\n                    list[i] = k;\n                }\n                //以上数制转换完毕，以下是进行逆向输出\n                for(int j=list.length - 1;j >= 0;j--){\n                    if(list[j] == 0){\n\n                    }else if(list[j] != 0){\n                        tag = 1;\n                    }\n                    if(tag == 1){\n                        System.out.print(list[j]);\n                    }\n                }\n                System.out.println();\n            }\n            sum = 0;//sum置零!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n            tag = 0;\n            tmp = 1;\n        }\n    }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;就是把A、B、C、D说的话当成一个逻辑表达式&amp;#xff0c;然后判断四个表达式中只有一个是FALSE的情况&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["关于穷举法的应用，如何按课件中得方法解决问题", ["\n", "如何用课件中这种穷举的方法完成这个问题？"]], "Tag": "算法设计"}
{"Answer": "# 问题解决的话，请点下`采纳`，谢谢\r\n```\r\n// Q1051673.cpp : Defines the entry point for the console application.\r\n//\r\n\r\n#include \"stdafx.h\"\r\n\r\n\r\n#include &lt;stdio.h&gt;\r\n#include &lt;string.h&gt;\r\n\r\nvoid solve(int * seed, int nseed, int * cand, int ncand, int target)\r\n{\r\n\tif (target == 0)\r\n\t{\r\n\t\tfor (int i = 0; i &lt; nseed; i++)\r\n\t\t{\r\n\t\t\tprintf(\"%d \", seed[i]);\r\n\t\t}\r\n\t\tprintf(\"\\n\");\r\n\t\treturn;\r\n\t}\r\n\tfor (int i = 0; i &lt; ncand; i++)\r\n\t{\r\n\t\tif (target &gt;= cand[i] &amp;&amp; cand[i] &lt;= seed[nseed - 1])\r\n\t\t{\r\n\t\t\tint * seed1 = new int[nseed + 1];\r\n\t\t\tmemcpy(seed1, seed, nseed * sizeof(int));\r\n\t\t\tseed1[nseed] = cand[i];\r\n\t\t\tsolve(seed1, nseed + 1, cand, ncand, target - cand[i]);\r\n\t\t\tdelete[] seed1;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nint main()\r\n{\r\n\tint cand[4] = { 10, 5, 2, 1 };\r\n\tint target = 25; //钱数\r\n\tfor (int i = 0; i &lt; 4; i++)\r\n\t{\r\n\t\tint * seed = new int[1];\r\n\t\tseed[0] = cand[i];\r\n\t\tsolve(seed, 1, cand, 4, target - seed[0]);\r\n\t\tdelete[] seed;\r\n\t}\r\n}\r\n```\r\n10 10 5\r\n10 10 2 2 1\r\n10 10 2 1 1 1\r\n10 10 1 1 1 1 1\r\n10 5 5 5\r\n10 5 5 2 2 1\r\n10 5 5 2 1 1 1\r\n10 5 5 1 1 1 1 1\r\n10 5 2 2 2 2 2\r\n10 5 2 2 2 2 1 1\r\n10 5 2 2 2 1 1 1 1\r\n10 5 2 2 1 1 1 1 1 1\r\n10 5 2 1 1 1 1 1 1 1 1\r\n10 5 1 1 1 1 1 1 1 1 1 1\r\n10 2 2 2 2 2 2 2 1\r\n10 2 2 2 2 2 2 1 1 1\r\n10 2 2 2 2 2 1 1 1 1 1\r\n10 2 2 2 2 1 1 1 1 1 1 1\r\n10 2 2 2 1 1 1 1 1 1 1 1 1\r\n10 2 2 1 1 1 1 1 1 1 1 1 1 1\r\n10 2 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n10 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n5 5 5 5 5\r\n5 5 5 5 2 2 1\r\n5 5 5 5 2 1 1 1\r\n5 5 5 5 1 1 1 1 1\r\n5 5 5 2 2 2 2 2\r\n5 5 5 2 2 2 2 1 1\r\n5 5 5 2 2 2 1 1 1 1\r\n5 5 5 2 2 1 1 1 1 1 1\r\n5 5 5 2 1 1 1 1 1 1 1 1\r\n5 5 5 1 1 1 1 1 1 1 1 1 1\r\n5 5 2 2 2 2 2 2 2 1\r\n5 5 2 2 2 2 2 2 1 1 1\r\n5 5 2 2 2 2 2 1 1 1 1 1\r\n5 5 2 2 2 2 1 1 1 1 1 1 1\r\n5 5 2 2 2 1 1 1 1 1 1 1 1 1\r\n5 5 2 2 1 1 1 1 1 1 1 1 1 1 1\r\n5 5 2 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n5 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n5 2 2 2 2 2 2 2 2 2 2\r\n5 2 2 2 2 2 2 2 2 2 1 1\r\n5 2 2 2 2 2 2 2 2 1 1 1 1\r\n5 2 2 2 2 2 2 2 1 1 1 1 1 1\r\n5 2 2 2 2 2 2 1 1 1 1 1 1 1 1\r\n5 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1\r\n5 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1\r\n5 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n5 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n5 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n2 2 2 2 2 2 2 2 2 2 2 2 1\r\n2 2 2 2 2 2 2 2 2 2 2 1 1 1\r\n2 2 2 2 2 2 2 2 2 2 1 1 1 1 1\r\n2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1\r\n2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1\r\n2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1\r\n2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\nPress any key to continue . . .", "Konwledge_Point": "智能穷举搜索", "Question": ["新手c语言编程穷举问题", ["有四种面值不一样的货币分别是10元，5元，2元，1元。现在给你一个钱数你能求求它的组成方法都有多少吗？", "\n\n", "运行时间尽可能短"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\nScanner input = new Scanner(System.in);\nint i = input.nextInt();\nboolean flag = false;\nfor (int a=0;a&amp;lt;9;a++){\n    for(int b=0;b&amp;lt;8;b++){\n        int ab = a*10+b;\n        int ba = b*10+a;\n        if(ab*ba==i){\n            System.out.println(&amp;quot;a===&amp;quot;+a);\n            System.out.println(&amp;quot;b===&amp;quot;+b);\n            flag = true;\n            break;\n        }\n    }\n}\nif(!flag){\n    System.out.println(&amp;quot;No Answer&amp;quot;);\n}&lt;/pre&gt;\n\n&lt;p&gt;用Java写的&amp;nbsp; 把Scanner input = new Scanner(System.in); int i = input.nextInt();换成scanf输入&lt;/p&gt;\n\n&lt;p&gt;System.out.println（）换成print输出就行 算法是正确的 试过&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["c语言迭代穷举问题。", ["输入三位数字N，求两位数AB（其中个位数字为B，十位数字为A，且有0 < A < B ≤9）。使得下列等式成立：", "\n AB x BA = N", "\n其中BA是把AB中个、十位数字交换所得的两位数。", "\n ", "\n编写程序，接收控制台输入的三位整数N，求解A，B并输出。", "\n如果没有解则输出“No Answer”。求大佬jie'da"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/076168862666195.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;br /&gt;sum &amp;#61; sum1 * 1 &amp;#43; sum3 * 3;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["为什么我这样用穷举法不对", ["我的思路应该很好看出来，就是穷举，如果卡片1和卡片3能组成总精美程度的一半，那就可以平分，可是我输入2和1后居然输出yes就不知道哪有问题", "问题", "\n", "\n", "我的代码", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<stdlib.h>", "\n", "int", " ", "main", "(", "void", ")", "\n", "{\n    ", "int", " sum1;\n    ", "int", " sum3;\n    ", "int", " half;\n    ", "int", " sum;\n    ", "int", " i;\n    ", "int", " x;\n    ", "scanf", "(", "\"%d %d\"", ",&sum1, &sum3);\n\n    sum = sum1*", "1", " + sum*", "3", ";\n    ", "if", "(sum%", "2", " == ", "1", ")\n    {\n        ", "printf", "(", "\"No\"", ");\n        ", "exit", "(", "0", ");\n    }\n    half = sum/", "2", ";\n    ", "for", "(i=", "0", "; i<=sum1; i++){\n        ", "for", "(x=", "0", "; x<=sum3; x++){\n            ", "if", "(i*", "1", "+x*", "3", "==half)\n            {\n                ", "printf", "(", "\"Yes\"", ");\n                ", "exit", "(", "0", ");\n            }\n\n\n        }\n\n\n\n    }\n    ", "printf", "(", "\"No\"", ");\n", "return", " ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\ndef &lt;span class=\"hljs-title function_ invoke__\"&gt;get_pwd&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;str&lt;/span&gt;, num):\n    &lt;span class=\"hljs-title function_ invoke__\"&gt;if&lt;/span&gt;(num &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;x&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;str&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;yield&lt;/span&gt; x\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;x&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;str&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;y&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-title function_ invoke__\"&gt;get_pwd&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;str&lt;/span&gt;, num-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n                &lt;span class=\"hljs-keyword\"&gt;yield&lt;/span&gt; x&amp;#43;y\n\nstrKey&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;abcdefghijklmnopqrstuvwxyz0123456789&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;x&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-title function_ invoke__\"&gt;get_pwd&lt;/span&gt;(strKey,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;):\n    &lt;span class=\"hljs-title function_ invoke__\"&gt;print&lt;/span&gt;(x)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;可以根据给定字典&amp;#xff0c;穷举规定长度所有字符串&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["如何用Python穷举出四位的数字与小写字母组合", [" 我想要做一个密码的暴力破解，想要输出所有的四位的数字与小写字母组合，请问用Python该怎么写呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n\n&amp;#96;&amp;#96;&amp;#96;python\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; math\n\ncity &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: [&lt;span class=\"hljs-number\"&gt;87&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;91&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;83&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;71&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;64&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;68&lt;/span&gt;], &lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: [&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;38&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;46&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;44&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;58&lt;/span&gt;]}\nn &amp;#61; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\nx &amp;#61; city[&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;]\ny &amp;#61; city[&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;]\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n\n&lt;span class=\"hljs-comment\"&gt;# 计算距离&lt;/span&gt;\na &amp;#61; np.zeros((n, n))\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;):\n        a[i, j] &amp;#61; math.sqrt(&lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(x[i] - x[j], &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(y[i] - y[j], &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;))\n&lt;span class=\"hljs-comment\"&gt;# 生成6个城市的全部排列&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; itertools\n\nv &amp;#61; &lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;(itertools.permutations([&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;], n))\n&lt;span class=\"hljs-comment\"&gt;# 计算最短总距离&lt;/span&gt;\nm &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(v)\njuli &amp;#61; []\nmin_sum &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# &amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;初始化min_sum为正无穷&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(m):\n    &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#43; a[v[i][j] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, v[i][j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n        &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#43; a[v[i][j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, v[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n        if sum &amp;lt; min_sum:\n            min_sum &amp;#61; sun &amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61; 在计算出结果后&amp;#xff0c;前一个结果和后一个结果直接比较\n        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    juli.append(&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;最小距离&amp;#xff1a;&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(juli))\nzuiyou &amp;#61; &lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(juli)   &lt;span class=\"hljs-comment\"&gt;# &amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;这行可以注释&lt;/span&gt;\nc &amp;#61; juli.index(&lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(juli))\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;最短路径&amp;#xff1a;&amp;#39;&lt;/span&gt;, v[c])\n&lt;span class=\"hljs-comment\"&gt;# 原问题采用先生成全部可能结果的排列&amp;#xff0c;存下来&amp;#xff0c;在比较的方法&amp;#xff1b;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 如何修改为不依赖存储的排列结果&amp;#xff0c;换句话说&amp;#xff0c;一个一个比较&amp;#xff0c;算一个&amp;#xff0c;比较一个的方法呢&amp;#xff1f;&lt;/span&gt;\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&amp;#96;&amp;#96;&amp;#96;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["穷举法的结果比较方法", ["#输入6个城市坐标，字典形式", "city={'x':[87,91,83,71,64,68],'y':[7,38,46,44,60,58]}", "n=6", "x=city['x']", "y=city['y']", "import numpy as np", "#计算距离", "a=np.zeros((n,n))", "for i in range(6):", "    for j in range(6):", "        a[i,j] = math.sqrt(pow(x[i]-x[j],2)+pow(y[i]-y[j],2))", "#生成6个城市的全部排列", "import itertools", "v=list(itertools.permutations([1,2,3,4,5,6],n))", "#计算最短总距离", "m=len(v)", "juli=[]", "for i in range(m):", "    sum=0", "    for j in range(n-1):", "        sum=sum+a[v[i][j]-1,v[i][j+1]-1]", "    sum=sum+a[v[i][j+1]-1,v[i][0]-1]", "    juli.append(sum)", "print('最小距离：',min(juli))", "zuiyou=min(juli)", "c=juli.index(min(juli))", "print('最短路径：',v[c])", "我是先生成全排列之后再把全排列存起来，然后再一个一个比较的；", "能否修改成不依赖存储的排列结果，换句话说，一个一个比较，算一个，比较一个的方法呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt; 将输入数据放于&amp;#34;read.txt&amp;#34;文件中&amp;#xff0c;编译运行程序即可。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;#include&amp;lt;stdio.h&amp;gt;\n\nint main(void){\n\tFILE *fp&amp;#61;NULL;\n\tchar c[200000],x;\n\tint i&amp;#61;0,n&amp;#61;0,j&amp;#61;0;\n\t\n\tfp&amp;#61;fopen(&amp;#34;read.txt&amp;#34;,&amp;#34;r&amp;#34;); //读取txt文件数据 \n\twhile((x&amp;#61;fgetc(fp))!&amp;#61;EOF){\n\t\tc[i]&amp;#61;x;\n\t\ti&amp;#43;&amp;#43;;\n\t}\n\tn&amp;#61;i;\n\tc[n]&amp;#61;&amp;#39;\\0&amp;#39;;\n\tfclose(fp);\n\t\n\tchar f[20]&amp;#61;&amp;#34;write00.txt&amp;#34;;\n\tfor(i&amp;#61;1;i&amp;lt;&amp;#61;26;i&amp;#43;&amp;#43;){\n\t\tif(f[6]&amp;#61;&amp;#61;&amp;#39;9&amp;#39;){  //将输出文件从01至26排序 \n\t\t\tf[6]&amp;#61;&amp;#39;0&amp;#39;;\n\t\t\tf[5]&amp;#43;&amp;#43;;\n\t\t}\n\t\telse\n\t\t\tf[6]&amp;#43;&amp;#43;;\n\t\n\t\tfor(j&amp;#61;0;j&amp;lt;n;j&amp;#43;&amp;#43;){  //进行暴力破解&amp;#xff0c;一次将所有字母往后移动一位 \n\t\t\tif(c[j]&amp;gt;&amp;#61;&amp;#39;a&amp;#39;&amp;amp;&amp;amp;c[j]&amp;lt;&amp;#39;z&amp;#39;)\n\t\t\t\tc[j]&amp;#43;&amp;#61;1;\n\t\t\telse if(c[j]&amp;#61;&amp;#61;&amp;#39;z&amp;#39;)\n\t\t\t\tc[j]&amp;#61;&amp;#39;a&amp;#39;;\n\t\t\tif(c[j]&amp;gt;&amp;#61;&amp;#39;A&amp;#39;&amp;amp;&amp;amp;c[j]&amp;lt;&amp;#39;Z&amp;#39;)\n\t\t\t\tc[j]&amp;#43;&amp;#61;1;\n\t\t\telse if(c[j]&amp;#61;&amp;#61;&amp;#39;Z&amp;#39;)\n\t\t\t\tc[j]&amp;#61;&amp;#39;A&amp;#39;;\n\t\t}\n\t\t\n\t\tfp&amp;#61;fopen(f,&amp;#34;w&amp;#34;);//输出文件 \n\t\tfputs(c,fp);\n\t\tfclose(fp);\n\t}\n\treturn 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["如何用C语言实现凯撒密码对文本文件(.txt)的读取穷举暴力破解？", ["用C语言实现对文本文件中凯撒密码穷举破解 并把26次结果 输出为二十六个文本文件（.txt）"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,b,t,f;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;b);\n    &lt;span class=\"hljs-comment\"&gt;//1、先判断a,b大小&amp;#xff0c;若a&amp;gt;b,交换a和b&amp;#xff1b;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a&amp;gt;b){\n        t&amp;#61;a;\n        a&amp;#61;b;\n        b&amp;#61;t;\n    } \n    &lt;span class=\"hljs-comment\"&gt;//2、for循环遍历从a到b的每一个整数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;a;i&amp;lt;&amp;#61;b;i&amp;#43;&amp;#43;){\n        f&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//f&amp;#61;1表示假设i是素数 &lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//3、若该整数是素数&amp;#xff0c;则输出。&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;j&amp;lt;i;j&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i%j&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//i%j&amp;#61;&amp;#61;0表示i有除了1和它本身的因子 &lt;/span&gt;\n                f&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//假设不成立 &amp;#xff0c;i不是素数 &lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-comment\"&gt;//如果i未被改为0&amp;#xff0c;表示假设成立&amp;#xff0c;即i是素数 &lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(f) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,i);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["C语言-8-穷举法C++", ["#include  <stdio.h>", "int main()", "{", "    Begin", "     End", "return0;", "}", "任务描述", "本关任务：从键盘读入两个大于5的正整数，打印出这两个数之间（包含这两个数）的所有素数，一行打印5个。", "编程要求", "输出格式用 %4d", "注意：输入的第一个数有可能比第二个数大。", "测试说明", "平台会对你编写的代码进行测试：", "测试输入：", "100 200", "预期输出：", "101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199", "测试输入：", "100 20", "预期输出：", "23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;判断式有很多种写法&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,300):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i%&lt;span class=\"hljs-attribute\"&gt;3&lt;/span&gt;&amp;#61;&amp;#61;0 &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; i%&lt;span class=\"hljs-attribute\"&gt;5&lt;/span&gt;&amp;#61;&amp;#61;0 &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; i%&lt;span class=\"hljs-attribute\"&gt;7&lt;/span&gt;&amp;#61;&amp;#61;0:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i)\n\n        \n105\n210\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,300):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; all([i%&lt;span class=\"hljs-attribute\"&gt;3&lt;/span&gt;&amp;#61;&amp;#61;0,i%5&amp;#61;&amp;#61;0,i%7&amp;#61;&amp;#61;0]):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i)\n\n        \n105\n210\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,300):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; all([&lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; i%3,&lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; i%5, &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; i%7]):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i)\n\n        \n105\n210\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,300):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; any([i%3,i%5,i%7]):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i)\n\n        \n105\n210\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,300):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; i%(3&lt;span class=\"hljs-number\"&gt;*5&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;*7&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i)\n\n        \n105\n210\n&amp;gt;&amp;gt;&amp;gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;最后一种方法有前提&amp;#xff1a;三个数都是质数&amp;#xff0c;且互质&lt;/p&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请采纳。谢谢!&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["一个小数学的穷举问题", ["找出1到300以内所有能同时被3，5，7整除的正整数。要求每行打印一个数"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;傻一点的办法就是穷举了&amp;#xff0c;把8位数都遍历一遍。分解出8位数字&amp;#xff0c;判断是否符合条件。题目的时间限制是多长&amp;#xff1f;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;int2arr&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *a)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(n&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        a[i--] &amp;#61; n%&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        n/&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;isprime&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;lt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sqrt&lt;/span&gt;(n*&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&amp;#61;k;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n%&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{ \n    &lt;span class=\"hljs-comment\"&gt;/*有7个人在一起玩猜电话号码的游戏。\n这是一个8位的电话号码。\n甲说&amp;#xff0c;这个数字的千万位数字比百万位数字大。\n乙说&amp;#xff0c;这个数字的百位数字与十位数字相同。\n丙说&amp;#xff0c;这个数字的百万位、十万位、万位数字相乘的结果与百位、十位、个位数字相乘的结果相同&amp;#xff0c;并且这个乘积不为0。\n丁说&amp;#xff0c;把这个数字的十万位、万位、千位、百位数字看作一个四位数&amp;#xff0c;这个四位数是一个非负整数的平方。\n戊说&amp;#xff0c;把这个数字的千万位、千位、个位数字相加&amp;#xff0c;和是一个质数。\n己说&amp;#xff0c;把这个数字的所有数位相加&amp;#xff0c;和是10的整数倍。\n你是庚&amp;#xff0c;请列出所有满足条件的8位数字。*/&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;10000000&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;99999999&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;];\n        &lt;span class=\"hljs-built_in\"&gt;int2arr&lt;/span&gt;(i,a);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;lt;&amp;#61; a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;] !&amp;#61; a[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;])\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;] !&amp;#61; a[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;])\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt; &amp;#43; a[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; &amp;#43; a[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; a[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;];\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; p &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sqrt&lt;/span&gt;(k*&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(p*p-k*&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;) &amp;gt; &lt;span class=\"hljs-number\"&gt;0.00001&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!&lt;span class=\"hljs-built_in\"&gt;isprime&lt;/span&gt;(a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#43;a[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#43; a[&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;]))\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;;j&amp;#43;&amp;#43;)\n            sum &amp;#43;&amp;#61; a[j];\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(sum %&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,i);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;  &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["C语言用穷举循环判断实现猜字游戏", ["问题遇到的现象和发生背景", "\n", "有7个人在一起玩猜电话号码的游戏。", "这是一个8位的电话号码。", "甲说，这个数字的千万位数字比百万位数字大。", "乙说，这个数字的百位数字与十位数字相同。", "丙说，这个数字的百万位、十万位、万位数字相乘的结果与百位、十位、个位数字相乘的结果相同，并且这个乘积不为0。", "丁说，把这个数字的十万位、万位、千位、百位数字看作一个四位数，这个四位数是一个非负整数的平方。", "戊说，把这个数字的千万位、千位、个位数字相加，和是一个质数。", "己说，把这个数字的所有数位相加，和是10的整数倍。", "你是庚，请列出所有满足条件的8位数字。", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "我的解答思路和尝试过的方法", "\n", "用循环和判断", "\n", "我想要达到的结果", "\n", "庚：53846446", "甲：5>3", "乙：4=4", "丙：3", "8", "4=4", "4", "6", "丁：8464=92*92", "戊：5+6+6=17", "己：5+3+8+4+6+4+4+6=40"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你有结果就在循环里输出&amp;#xff0c;没结果才在循环外输出无结果&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["鸡兔同笼问题为什么我输出的数都是我输入的头数，输出数不正确怎么办", ["\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;曲线拟合也是一种最优化算法&amp;#xff0c;有成熟的数值优化算法&amp;#xff0c;如trust-region-reflective&amp;#39;和 &amp;#39;levenberg-marquardt&amp;#xff0c;这些成熟的算法在python中实现&amp;#xff0c;要想自己写出程序&amp;#xff0c;首先需要理解算法。&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["请问python curve_fit函数的搜索原理是什么呢，为什么它可以迅速搜索出最优解呢", ["请问python curve_fit函数的搜索原理是什么呢，为什么它可以迅速搜索出最优解呢，而我自己手写最小二乘法暴力穷举最优解确需要搜索很久"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-symbol\"&gt;&amp;amp;head&lt;/span&gt;, &lt;span class=\"hljs-symbol\"&gt;&amp;amp;feet&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["鸡兔同笼C++，想用穷举法但失败了，SOS", ["最普通的鸡兔同笼，但我想用穷举法来做，结果为什么没有输出勒？，求大家指点。", "#include<stdio.h>", "int main()", "{", "    int chicken,rabbit;", "    int head,feet;", "    printf(\"请输入头数和脚数：\");", "    scanf(\"%d %d\",head,feet);", "    for (chicken=0;chicken<=head;chicken++)", "    {", "        for (rabbit=0;rabbit<=head;rabbit++)", "        {", "            if (rabbit+chicken==head && rabbit", "4+chicken", "2==feet)", "                {", "                printf(\"%d %d\",chicken,rabbit);", "                return 0;}", "            else", "                {", "                printf(\"Worry!\");", "                return 0;", "            }", "    }", "    }", "    return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;ab至少有一个参与&amp;#xff0c;那应该是a或b&amp;#61;&amp;#61;1&lt;br /&gt;你为什么用a*b&amp;#xff0c;那ab都是0也成立呀&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["c语言循环用穷举查作案嫌疑人", ["\n", "请问为什么我if里面的条件是不对的，问题出在哪里呢？这里运行的结果不对，应该是最后AC那个条件写错了，但是不知道错哪里了，是小白菜鸡", "\n"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/haut_ykc/article/details/52154202", "Konwledge_Point": "智能穷举搜索", "Question": ["Euclid's Game               ", ["Problem Description", "\nTwo players, Stan and Ollie, play, starting with two natural numbers. Stan, the first player, subtracts any positive multiple of the lesser of the two numbers from the greater of the two numbers, provided that the resulting number must be nonnegative. Then Ollie, the second player, does the same with the two resulting numbers, then Stan, etc., alternately, until one player is able to subtract a multiple of the lesser number from the greater to reach 0, and thereby wins. For example, the players may start with (25,7): ", "\n\n", "25 7", "\n11 7", "\n4 7", "\n4 3", "\n1 3", "\n1 0 ", "\n\n", "an Stan wins. ", "\n\n", "Input", "\nThe input consists of a number of lines. Each line contains two positive integers giving the starting two numbers of the game. Stan always starts.", "\n\n", "Output", "\nFor each line of input, output one line saying either Stan wins or Ollie wins assuming that both of them play perfectly. The last line of input contains two zeroes and should not be processed. ", "\n\n", "Sample Input", "\n34 12", "\n15 24", "\n0 0", "\n\n", "Sample Output", "\nStan wins", "\nOllie wins"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;参考地址&amp;#xff1a;&lt;/strong&gt;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/RViewSonic/article/details/107127807\" id=\"textarea_1634020973858_1634021018676_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;一个自然数的七进制表达式是一个三位数&amp;#xff0c;而这个自然数的九进制表示也是一个三位数&amp;#xff0c;且这两个三位数的数码顺序正好相反&amp;#xff0c;求这个三位数。_RViewSonic的博客-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;这又是一个数字问题的代码化,首先解释里面的几个概念并用数学的方法将这个三位数推导出来.数码:数的基本单元,也就是数字.例如123和321二者分别含有三个数码,且数码顺序相反。进制:可看作是特殊进制转换为默认进制(10进制)时的底数。数学推导:由上述数学推导过程可知,函数体内的判断条件即是七进制和九进制化为十进制时二者相等,而这需要在所有符合七进制(七和九取并集)的三位数内进行筛选,而七进制遇七进一的特点就是突破口.\tfor(i&amp;#61;1;i&amp;lt;7;i&amp;#43;&amp;#43;)\tfor(j&amp;#61;0;j&amp;lt;7;j&amp;#43;&amp;#43;)&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/RViewSonic/article/details/107127807&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint main()\n{\n    int i,j,k;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;1;i&amp;lt;7;i&amp;#43;&amp;#43;)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;0;j&amp;lt;7;j&amp;#43;&amp;#43;)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;1;k&amp;lt;7;k&amp;#43;&amp;#43;)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;#43;j&lt;span class=\"hljs-number\"&gt;*7&lt;/span&gt;&amp;#43;k&lt;span class=\"hljs-number\"&gt;*7&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;*7&lt;/span&gt;&amp;#61;&amp;#61;i&lt;span class=\"hljs-number\"&gt;*9&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;*9&lt;/span&gt;&amp;#43;j&lt;span class=\"hljs-number\"&gt;*9&lt;/span&gt;&amp;#43;k)\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,i&lt;span class=\"hljs-number\"&gt;*9&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;*9&lt;/span&gt;&amp;#43;j&lt;span class=\"hljs-number\"&gt;*9&lt;/span&gt;&amp;#43;k);\n    }\n } \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/422169020436196.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["大一C语言课，7进制9进制的三位数，求解", ["大一学生c语言课", "不明白10进制和9进制和7进制的关系，求解", "怎么写程序才能判断他是7或者9进制的三位数啊"]], "Tag": "算法设计"}
{"Answer": "import java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\n\r\npublic class Coin {\r\n\r\n    public static int getNums(int n){\r\n   \r\n        List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\r\n        \r\n        for(int i=0;i&lt;1000;i++){\r\n            for(int j=0; j &lt; 1000; j++) {\r\n                for(int z=0; z &lt; 1000; z++) {\r\n                    if(25*i+10*j+z==n){\r\n                        list.add(i+j+z);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Collections.sort(list);\r\n        return list.get(0);\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n       int a = getNums(34);\r\n       System.out.println(\"---&gt;\" + a);\r\n    }\r\n}\r\njava版穷举法", "Konwledge_Point": "智能穷举搜索", "Question": ["用Python写这个作业，谢谢", ["Part I ( points)", "\n\n", "“找硬币问题”：设有3种硬币，面值分别为25分，10分和1分。编写程序，输入n（分钱），用穷举法或者回溯法求解，求最少需要找多少个硬币。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n&lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; main(String[] args) {\n        Scanner &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; Scanner(&lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;鸡兔同笼&amp;#xff1a;请输入头和脚数量&amp;#xff1a;&amp;#34;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; h &amp;#61; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;.nextInt();\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f &amp;#61; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;.nextInt();\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; chicken&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,rabbit &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(;chicken&amp;lt;&amp;#61;h;chicken&amp;#43;&amp;#43;){\n            rabbit &amp;#61; h-chicken;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((chicken*&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)&amp;#43;(rabbit*&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;) &amp;#61;&amp;#61; f){\n                &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(String.format(&amp;#34;鸡&amp;#xff1a;%d,兔&amp;#xff1a;%d&amp;#34;,chicken,rabbit));\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;没有解&amp;#34;);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/158437316356146.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["鸡兔同笼问题 （穷举法)", ["已知 鸡兔共35只 共94支脚  那么鸡兔各几只?！～-=.：$……～%", "@＼* ", "            "]], "Tag": "算法设计"}
{"Answer": "&lt;h5 id=\"温馨提醒&amp;#xff1a;如果我的回答对你有帮助&amp;#xff0c;请点击旁边的采纳按钮&amp;#xff0c;谢谢\"&gt;温馨提醒&amp;#xff1a;如果我的回答对你有帮助&amp;#xff0c;请点击旁边的采纳按钮&amp;#xff0c;谢谢&lt;/h5&gt;\n&lt;p&gt;&amp;#xff08;1&amp;#xff09;子序列&amp;#xff1a;一个序列X &amp;#xff1d; x1x2...xn,中任意删除若干项&amp;#xff0c;剩余的序列叫做A的一个子序列。也可以认为是从序列A按原顺序保留任意若干项得到的序列。&lt;br /&gt;      例如&amp;#xff1a;对序列 1,3,5,4,2,6,8,7来说&amp;#xff0c;序列3,4,8,7 是它的一个子序列。对于一个长度为n的序列&amp;#xff0c;它一共有2^n 个子序列&amp;#xff0c;有(2^n – 1)个非空子序列。在这里需要提醒大家&amp;#xff0c;子序列不是子集&amp;#xff0c;它和原始序列的元素顺序是相关的。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#xff09;公共子序列&amp;#xff1a;如果序列&lt;span class=\"hljs-keyword\"&gt;Z&lt;/span&gt;既是序列&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;的子序列&amp;#xff0c;同时也是序列&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的子序列&amp;#xff0c;则称它为序列&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;和序列&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的公共子序列。空序列是任何两个序列的公共子序列。\n\n &amp;#xff08;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;&amp;#xff09;最长公共子序列&amp;#xff1a;&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;和&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的公共子序列中长度最长的&amp;#xff08;包含元素最多的&amp;#xff09;叫做&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;和&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的最长公共子序列。\n\n  这个问题如果用穷举法时间&amp;#xff0c;最终求出最长公共子序列时&amp;#xff0c;时间复杂度是Ο&amp;#xff08;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;mn&amp;#xff09;&amp;#xff0c;是指数级别的复杂度&amp;#xff0c;对于长序列是不适用的。因此我们使用动态规划法来求解。\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;刻画最长公共子序列问题的最优子结构&lt;br /&gt;      设X&amp;#61;x1x2…xm和Y&amp;#61;y1y2…yn是两个序列&amp;#xff0c;Z&amp;#61;z1z2…zk是这两个序列的一个最长公共子序列。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;  1.      如果xm&amp;#61;yn&amp;#xff0c;那么zk&amp;#61;xm&amp;#61;yn&amp;#xff0c;且Zk&lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;是Xm&lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;&amp;#xff0c;Yn&lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;的一个最长公共子序列&amp;#xff1b;\n\n  2.      如果xm≠yn&amp;#xff0c;那么zk≠xm&amp;#xff0c;意味着Z是Xm&lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;&amp;#xff0c;Y的一个最长公共子序列&amp;#xff1b;\n\n  3.      如果xm≠yn&amp;#xff0c;那么zk≠yn&amp;#xff0c;意味着Z是X&amp;#xff0c;Yn&lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;的一个最长公共子序列。\n\n  从上面三种情况可以看出&amp;#xff0c;两个序列的LCS包含两个序列的前缀的LCS。因此&amp;#xff0c;LCS问题具有最优子结构特征。\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;递归的定义最优值&lt;br /&gt;      从最优子结构可以看出&amp;#xff0c;如果xm&amp;#61;yn&amp;#xff0c;那么我们应该求解Xm-1&amp;#xff0c;Yn-1的一个LCS&amp;#xff0c;并且将xm&amp;#61;yn加入到这个LCS的末尾&amp;#xff0c;这样得到的一个新的LCS就是所求。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;  如果xm≠yn&amp;#xff0c;我们需要求解两个子问题&amp;#xff0c;分别求Xm&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;&amp;#xff0c;&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的一个LCS和&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;&amp;#xff0c;Yn&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;的一个LCS。两个LCS中较长者就是&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;和&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的一个LCS。\n\n  可以看出LCS问题具有重叠子问题性质。为了求&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;和&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的一个LCS&amp;#xff0c;我们需要分别求出Xm&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;&amp;#xff0c;&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的一个LCS和&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;&amp;#xff0c;Yn&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;的一个LCS&amp;#xff0c;这几个字问题又包含了求出Xm&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;&amp;#xff0c;Yn&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;的一个LCS的子子问题。&amp;#xff08;有点绕了。。。晕没晕。。。。&amp;#xff09;\n\n   根据上面的分析&amp;#xff0c;我们可以得出下面的公式&amp;#xff1b;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img title=\"搜狗截图20210825171155.png\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/127527288926131.png\" /&gt;&lt;/p&gt;\n&lt;p&gt;所以&amp;#xff1a;S1和S2的LCS就等于&amp;#xff1a;{S1减去最后一个元素}与S2的LCS&amp;#xff0c; {S2减去最后一个元素}与S1的 LCS 中的最大的那个序列&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["最长公共子序列求解DP", ["题目", " 字符序列的子序列是指从给定字符序列中随意地（不一定连续）去掉若干个字符（可能一个也不去掉）后所形成的字符序列。令给定的字符序列X和Y，使得对所有的", "j", "=", "0", ",", "1", ",", "⋯", " ", ",", "k", "−", "1", "j=0,1,⋯,k−1 ，有", "x", "i", "j", "=", "y", "j", "x", "ij", "​", " =y", "j", "​", "  。例如，", "X", "=", "\"ABCBDAB\"", "X=\"ABCBDAB\" ，", "Y", "=", "\"BCDB\"", "Y=\"BCDB\" 是 X 的一个子序列。对给定的两个字符序列，求出他们最长的公共子序列长度，以及最长公共子序列个数。X 的一个子序列。对给定的两个字符序列，求出他们最长的公共子序列长度，以及最长公共子序列个数。", "##**这道题的解析里面假如S1的最后一个元素与S2的最后一个元素相等，那么S1和S2的LCS就等于{S1减去最 后一个元素}与{S2减去最后一个元素} 的LCS再加上S1和S2相等的最后一个元素（如下图）", "\n", "S1 A B C B D A B S2 B D C A B A", "\n", "假如S1的最后一个元素与S2的最后一个元素不等（本例子就是属于这种情况），那么 S1和S2的LCS就等于：{S1减去最后一个元素}与S2的LCS， {S2减去最后一个元素}与S1的 LCS 中的最大的那个序列。**请问啥意思啊？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; math\n\ncity &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: [&lt;span class=\"hljs-number\"&gt;87&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;91&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;83&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;71&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;64&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;68&lt;/span&gt;], &lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: [&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;38&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;46&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;44&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;58&lt;/span&gt;]}\nn &amp;#61; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\nx &amp;#61; city[&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;]\ny &amp;#61; city[&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;]\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n\n&lt;span class=\"hljs-comment\"&gt;# 计算距离&lt;/span&gt;\na &amp;#61; np.zeros((n, n))\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;):\n        a[i, j] &amp;#61; math.sqrt(&lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(x[i] - x[j], &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(y[i] - y[j], &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;))\n&lt;span class=\"hljs-comment\"&gt;# 生成6个城市的全部排列&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; itertools\n\nv &amp;#61; &lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;(itertools.permutations([&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;], n))\n&lt;span class=\"hljs-comment\"&gt;# 计算最短总距离&lt;/span&gt;\nm &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(v)\njuli &amp;#61; []\nmin_sum &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# &amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;初始化min_sum为正无穷&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(m):\n    &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#43; a[v[i][j] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, v[i][j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n        &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#43; a[v[i][j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, v[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n        if sum &amp;lt; min_sum:\n            min_sum &amp;#61; sun &amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61; 在计算出结果后&amp;#xff0c;前一个结果和后一个结果直接比较\n        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    juli.append(&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;最小距离&amp;#xff1a;&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(juli))\nzuiyou &amp;#61; &lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(juli)   &lt;span class=\"hljs-comment\"&gt;# &amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;这行可以注释&lt;/span&gt;\nc &amp;#61; juli.index(&lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(juli))\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;最短路径&amp;#xff1a;&amp;#39;&lt;/span&gt;, v[c])\n&lt;span class=\"hljs-comment\"&gt;# 原问题采用先生成全部可能结果的排列&amp;#xff0c;存下来&amp;#xff0c;在比较的方法&amp;#xff1b;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 如何修改为不依赖存储的排列结果&amp;#xff0c;换句话说&amp;#xff0c;一个一个比较&amp;#xff0c;算一个&amp;#xff0c;比较一个的方法呢&amp;#xff1f;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["穷举法的排列比较，比较方式的改变", ["#从其中的某一城市出发，不重复地走完其余5个并回到原出发点，在所有可能的路径中求出路径长度最短的一条。", "\n", "六个市坐标为：1(87,7).2(91,38)、3(83,46).4(71,44).5(64,60)、6(68,58)", "\n", "import math", "city={'x':[87,91,83,71,64,68],'y':[7,38,46,44,60,58]}", "n=6", "x=city['x']", "y=city['y']", "import numpy as np", "#计算距离", "a=np.zeros((n,n))", "for i in range(6):", "    for j in range(6):", "        a[i,j] = math.sqrt(pow(x[i]-x[j],2)+pow(y[i]-y[j],2))", "#生成6个城市的全部排列", "import itertools", "v=list(itertools.permutations([1,2,3,4,5,6],n))", "#计算最短总距离", "m=len(v)", "juli=[]", "for i in range(m):", "    sum=0", "    for j in range(n-1):", "        sum=sum+a[v[i][j]-1,v[i][j+1]-1]", "    sum=sum+a[v[i][j+1]-1,v[i][0]-1]", "    juli.append(sum)", "print('最小距离：',min(juli))", "zuiyou=min(juli)", "c=juli.index(min(juli))", "print('最短路径：',v[c])", "原问题采用先生成全部可能结果的排列，存下来，在比较的方法；", "如何修改为不依赖存储的排列结果，换句话说，一个一个比较，算一个，比较一个的方法呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以尝试用itertools这个模块进行迭代&amp;#xff0c;这个模块里面有很多创建迭代器的函数。&lt;/p&gt;\n\n&lt;p&gt;给一个思路&amp;#xff1a;&lt;/p&gt;\n\n&lt;p&gt;第一组的元素个数最多可能有8个&amp;#xff0c;取值范围为1-10。&lt;/p&gt;\n\n&lt;p&gt;当第一个组为1个元素的时候&amp;#xff0c;第二组的元素个数最多可能为8个&amp;#xff1b;&lt;/p&gt;\n\n&lt;p&gt;当第一个组为2个元素的时候&amp;#xff0c;第二组的元素个数最多可能为7个&amp;#xff1b;&lt;/p&gt;\n\n&lt;p&gt;以此类推&amp;#xff0c;当第一个组为i个元素的时候&amp;#xff0c;第二组的元素个数最可能为9-i&amp;#xff0c;取值范围为1-10&amp;#xff0c;并减去第一组的元素&amp;#xff0c;剩余记为rem。&lt;/p&gt;\n\n&lt;p&gt;第三组的元素则为rem减去第二组中的元素。&lt;/p&gt;\n\n&lt;p&gt;itertools.combinations可以对一个集合的元素按照个数进行不同的组合&amp;#xff0c;例如&amp;#xff0c;从1-10中任取2个数字&amp;#xff0c;可能有以下组合。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;import itertools\nL1 &amp;#61; itertools.combinations(range(1,11), 2)\nprint(list(L1))&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre&gt;\n[(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (7, 8), (7, 9), (7, 10), (8, 9), (8, 10), (9, 10)]&lt;/pre&gt;\n\n&lt;p&gt;所以&amp;#xff0c;可以按照如下方式写代码&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;import itertools\n\ncount&amp;#61;0\n\nset_all&amp;#61;set(range(1,11))\n\nfor i in range(1,9):\n    for L1 in itertools.combinations(range(1,11), i):\n        rem&amp;#61;set_all-set(L1)\n        for j in range(1,10-i):\n            for L2 in itertools.combinations(rem, j):\n                L3&amp;#61;rem-set(L2)\n                count&amp;#43;&amp;#61;1\n                print(count,end&amp;#61;&amp;#39; &amp;#39;)\n                print(set(L1),set(L2),L3)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["python 穷举10个人划分到三个组的所有组合", ["我想10个人划分到3个组（A,B,C）中，也就是每个人都有三种选择，所以一共有3**10=59049种，想最终得出来的结果是", "\n\n", "A=[1],B=[2],C=[3，4，5，6，7,8，9，10]", "\n\n", "A=[1],B=[3],C=[2，4，5，6，7,8，9，10]", "\n\n", "A=[1],B=[4],C=[2，3，5，6，7,8，9，10]", "\n\n", "························································", "\n\n", "A=[3，4，5，6，7,8，9，10],B=[2], C=[1]"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, k, t, s;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;i);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;)\n    {\n        t &amp;#61; i; k &amp;#61; i * i; s &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (t) { s *&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; t /&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((k % s) &amp;#61;&amp;#61; i)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;No&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d out of range&amp;#34;&lt;/span&gt;,i);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["同构数的问题，可以用穷举法写写么", ["所谓“同构数”是指这样的数，它出现在它的平方数的右边，例如5的平方数是25, 25的平方数是625，所以5和25都是同构数。你的任务是判断整数x是否是同构数。若是同构数，输出“Yes”，否则输出“No”。x的取值范围是(1<=x<=10000),如果输入的x不在允许范围内，则输出错误提示信息“x out of range”。", "输入格式:", "只有一个整数。测试用例保证所有输入可以用int存储。", "输出格式:", "只有一行，为判断结果。", "输入样例:", "20000", "输出样例:", "20000 out of range", "\n", "\n", "```", "\n", "\n\n", "\n", "```"]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/handsomecui/p/5233812.html", "Konwledge_Point": "智能穷举搜索", "Question": ["Necklace of Beads这个除了用穷举还有更好的算法么", ["Problem Description", "\nBeads of red, blue or green colors are connected together into a circular necklace of n beads ( n < 40 ). If the repetitions that are produced by rotation around the center of the circular necklace or reflection to the axis of symmetry are all neglected, how many different forms of the necklace are there? ", "\n\n", "\n\n", "Input", "\nThe input has several lines, and each line contains the input data n. ", "\n-1 denotes the end of the input file. ", "\n\n", "Output", "\nThe output should contain the output data: Number of different forms, in each line correspondent to the input data.", "\n\n", "Sample Input", "\n4", "\n5", "\n-1", "\n\n", "Sample Output", "\n21", "\n39"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;增加去重步骤&amp;#xff0c;答案是10种&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attribute\"&gt;color&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-string\"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;]\nres &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; m &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;):\n            a&amp;#61;&lt;span class=\"hljs-attribute\"&gt;color&lt;/span&gt;[i]\n            b&amp;#61;&lt;span class=\"hljs-attribute\"&gt;color&lt;/span&gt;[j]\n            c&amp;#61;&lt;span class=\"hljs-attribute\"&gt;color&lt;/span&gt;[m]\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; a!&amp;#61;&lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt; and b!&amp;#61;c and a!&amp;#61;c:\n                res&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(&lt;span class=\"hljs-selector-attr\"&gt;[a,b,c]&lt;/span&gt;)\n\ncount &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(len(res)):\n    res&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt;&amp;#61;sorted(res&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; res:\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; not &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; count:\n        count&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(i)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(len(count)&lt;/span&gt;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["python用穷举法时怎么才能不考虑顺序对最后结果的影响啊", ["这个是题目要求：", "一个看不见的袋子中装有若干红、橙、黄、绿、蓝五种颜色的小球，每次随意摸出三个小球，输出三个小球颜色都不一样的所有可能的方案总数。", "【提示】不计算取求顺序的区别，例如红橙黄与黄橙红为一个方案。", "这是我写的代码：", "\n", "color=[", "'red'", ",", "'orange'", ",", "'yellow'", ",", "'green'", ",", "'blue'", "]\n", "n", "=0\n", "for", " i ", "in", " range(0,5):\n    ", "for", " j ", "in", " range(0,5):\n        ", "for", " m ", "in", " range(0,5):\n            ", "a", "=color[i]\n            ", "b", "=color[j]\n            ", "c", "=color[m]\n            ", "if", " a!=b ", "and", " b!=c ", "and", " a!=c:\n                n+=1\n", "print", "(n)\n", "\n", "但是这样求的话就考虑了顺序，所以要怎么改啊"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/078599113436120.png\" /&gt;&lt;/p&gt;&lt;br /&gt;最近在学Python&amp;#xff0c;就做了一下&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["使用穷举法将0.1.2.3输出全部互不相同且无重复数字的三位数", ["请问怎么样才能使用python实现这个程序?"]], "Tag": "算法设计"}
{"Answer": "Directory.GetFiles\r\nhttps://msdn.microsoft.com/zh-cn/library/wz42302f.aspx\r\n\r\n\r\n\r\n\r\n```\r\n Imports System\r\nImports System.IO\r\n\r\nPublic Class Test\r\n    Public Shared Sub Main()\r\n        Try\r\n            ' Only get files that begin with the letter \"c.\"\r\n            Dim dirs As String() = Directory.GetFiles(\"c:\\\", \"c*\") '列出C:\\下c开头的文件，你需要稍微修改，你的路径，列出所有文件是*.*\r\n            Console.WriteLine(\"The number of files starting with c is {0}.\", dirs.Length)\r\n            Dim dir As String\r\n            For Each dir In dirs\r\n                Console.WriteLine(dir)\r\n            Next\r\n        Catch e As Exception\r\n            Console.WriteLine(\"The process failed: {0}\", e.ToString())\r\n        End Try\r\n    End Sub\r\nEnd Class\r\n```", "Konwledge_Point": "智能穷举搜索", "Question": ["vb.net如何获取指定文件夹内所有文件的名称", ["最近vb2005写了个WinCE的程序,需要采集器读取本机指定文件夹内的文件名，并通过文件名处理每个文件里的内容。", "\n请各位高手指点一下，这个问题困扰我好几天了，一直找不到好的解决办法，再次谢过。", "\n比较着急，有此类开发经验的高手指点一二，谢谢。。。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;maxgys&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; r &amp;#61; m&amp;gt;n?m:n;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(r)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(m%r&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; n%r&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//最大的可以同时整除二者的数&amp;#xff0c;即为最大公约数。&lt;/span&gt;\n        r--;\n    } \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; r;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;  m,n, c;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;m, &amp;amp;n);\n    c &amp;#61; &lt;span class=\"hljs-built_in\"&gt;maxgys&lt;/span&gt;(m, n);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, c);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["求两个数的最大公约数用穷举法怎么写呀，按初学者最好理解的写", ["求两个数的最大公约数：", "int maxgys(int m,int n）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;scanf(&amp;#34;%d %d&amp;#34;,&amp;amp;m,&amp;amp;n);&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["鸡兔同笼问题用穷举法解决，为啥输出不了东西，错在哪里了呀", []], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;牛客网 &amp;#xff0c;很多题&amp;#xff0c;可以在线编程测试。&lt;br /&gt;&lt;a href=\"https://www.nowcoder.com/finalexam\" id=\"textarea_1637289624281_1637289699635_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.nowcoder.com/finalexam&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["有没有适合C语言的初学者做的题，在PTA上发的很少，想多做点，穷举，递推，迭代，的算法题", ["有没有什么网站，或者题库也行，我只想练练手，马上要考试了，思路不行，总是想不对"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;因为两个队列都是有序的&amp;#xff0c;所以可以记录上次比较的位置&amp;#xff0c;然后下次比较接着往后比较就行&lt;br /&gt;例如&amp;#xff1a;我先取 dfmopsyz 中的d ,然后往后遍历abcegikint&amp;#xff0c;d比a大&amp;#xff0c;接着往后取b,d比b大&amp;#xff0c;接着取c&amp;#xff0c;d比c大&amp;#xff0c;接着取e&amp;#xff0c;d比e小&amp;#xff0c;d插在e前面&amp;#xff0c;然后记录下e&amp;#xff0c;此时d应该放的位置找到了&amp;#xff1b;&lt;br /&gt;第二次接着取f&amp;#xff0c;现在直接用f和e比&amp;#xff0c;f比e大&amp;#xff0c;取g&amp;#xff0c;f比g小&amp;#xff0c;此时记录下f的位置&amp;#xff0c;g放f前&amp;#xff0c;g应该插哪里也知道了。&lt;br /&gt;第三次取m&amp;#xff0c;就是m&amp;gt;h,m&amp;gt;i,m&amp;gt;j,m&amp;gt;K,m&amp;gt;l,m&amp;lt;n&amp;#xff0c;此时记录下n的位置&amp;#xff0c;m在n前&amp;#xff0c;m的位置也找到了&lt;br /&gt;以此类推&amp;#xff0c;直到两个队列其中一个遍历完成&amp;#xff0c;剩下一个队列未遍历的直接接在后面就可以&amp;#xff1b;&lt;br /&gt;可以搜搜归并排序看看思路&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["各位，看看这个排序如何实现，我有穷举法可以求，但是我想要更简单的方法来求这个，支个招。", ["这个结果代码怎么实现啊，书没写。各位帮忙看看，帮我想想更简单的方法，一定采纳正确的答案"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;for men in range(16):\n    for women in range(23):\n        child&amp;#61;45-women-men\n        if (men * 3&amp;#43;women * 2&amp;#43; child * 0.5 &amp;#61;&amp;#61; 45):\n            print men, women, child\n\n结果&amp;#xff1a;\nmen&amp;#61;0 women&amp;#61;15 child&amp;#61;30\nmen&amp;#61;3 women&amp;#61;10 child&amp;#61;32\nmen&amp;#61;6 women&amp;#61;5 child&amp;#61;34\nmen&amp;#61;9 women&amp;#61;0 child&amp;#61;36&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;由于最多只有45块砖&amp;#xff0c;男人的数量不会超过15人&amp;#xff0c;女人的数量不会超过22人&amp;#xff0c;一旦男人和女人的数量确定下来后&amp;#xff0c;小孩的人数应该是45-男人数-女人数。&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["python搬砖问题", ["某工地需要搬运砖块，已知男人一人可以搬3块，女人一人可以搬2块，小孩两人可以搬1块。用45个人正好搬45块砖，问有多少种搬法？‪‬‪‬‪‬‪‬‪‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‭‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‭‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‭‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‭‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‭‬‫‬‭‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬\n输出所有可能组合，即男人、女人、小孩的人数（人数可以为0）。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; a &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;168&lt;/span&gt;; a&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;)&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; / &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt; * a &amp;#43; (&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;)&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; / &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; * (&lt;span class=\"hljs-number\"&gt;168&lt;/span&gt; - a) &amp;#61;&amp;#61; (&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;)&lt;span class=\"hljs-number\"&gt;76&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a&amp;#61;%d,b&amp;#61;%d&amp;#34;&lt;/span&gt;, a, &lt;span class=\"hljs-number\"&gt;168&lt;/span&gt; - a);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["穷举法甲、乙两数的和为168，甲数的八分之一与乙数的四分之三的和 为76，求甲、乙两数各是多少？", ["甲、乙两数的和为168，甲数的八分之一与乙数的四分之三的和", "为76，求甲、乙两数各是多少？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;n ** 0.5是求n的二分之一幂&amp;#xff0c;也就是求根号n&lt;br /&gt;n//i是整数除法&amp;#xff0c;比如9/2&amp;#61;4.5   9//2&amp;#61;4&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["用python去求一个数的所有约数", ["为什么这里要n", "0.5? n", "0.5之后不就取不到他本身和他的一半了吗", "然后还有那个d.add(n//i)是什么意思  "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;三重循环就行了&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint main()\n{\n    int n,&lt;span class=\"hljs-attribute\"&gt;count&lt;/span&gt;&amp;#61;0;\n    int a,b,c;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;0;a&amp;lt;&amp;#61;n/3;a&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;0;b&amp;lt;&amp;#61;n/2;b&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;c&lt;/span&gt;&amp;#61;0;c&amp;lt;&amp;#61;n*2;c&amp;#43;&amp;#43;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a&amp;#43;b&amp;#43;c &amp;#61;&amp;#61; n &amp;amp;&amp;amp; c%&lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;0 &amp;amp;&amp;amp; 3&lt;span class=\"hljs-number\"&gt;*a&lt;/span&gt;&amp;#43;2&lt;span class=\"hljs-number\"&gt;*b&lt;/span&gt;&amp;#43;c/&lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;n )\n                    count&amp;#43;&amp;#43;;\n            }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,count);\n    return 0;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["某工地需要搬运砖块，已知男人一人搬3块，女人一人搬2块，小孩两人搬1块。从键盘输入正整数N，用N人正好搬N块，问有多少种搬法？", ["C语言", "示例：", "思路：穷举法。与学生植树类似", "输入格式：100", "输出格式：7"]], "Tag": "算法设计"}
{"Answer": "用subprocess模块就可以不输出在日志中\r\n\r\n到后面使用管道的时候，再使用输出，详细的\r\n\r\n官方文档里说明了：[https://docs.python.org/zh-cn/3/library/subprocess.html](https://docs.python.org/zh-cn/3/library/subprocess.html \"\")\r\n\r\n当然，我的博客也有说明：[https://blog.csdn.net/oSuiYing12/article/details/106192075](https://blog.csdn.net/oSuiYing12/article/details/106192075 \"\")", "Konwledge_Point": "智能穷举搜索", "Question": ["如何让os.system结果不输出在日志里?", ["最近在搞个调用7z的穷举密码解压的脚本, 但是每次调用os.system(cmd), 日志就会疯狂打印密码错误, 有什么办法吗?"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;二分法&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/weixin_45740510/article/details/121100694\" id=\"textarea_1665903637941_1665903693581_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_45740510/article/details/121100694&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;模拟&amp;#xff1a;就是按照题目的要求和步骤来写程序&lt;br /&gt;贪心&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/weixin_49370884/article/details/126247776\" id=\"textarea_1665903637941_1665903693581_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_49370884/article/details/126247776&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;穷举&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/qq_44836294/article/details/108246866\" id=\"textarea_1665903637941_1665903693581_2\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/qq_44836294/article/details/108246866&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["程序设计竞赛中的问题", ["二分，模拟，贪心，穷举分别是什么意思，不是很了解，希望大家帮助"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;穷举法就设置几个循环即可&amp;#xff0c;这里有三个变量设置三个循环&amp;#xff0c;不过这个时间可能有点多&amp;#xff0c;需要执行60w次循环体&amp;#xff0c;不满足约束条件的可以直接continue即可&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["请问这种问题怎么写代码比较好？", ["求目标函数的最小值，X为整数，YZ精度0.1即可。穷举法不知道怎么弄"]], "Tag": "算法设计"}
{"Answer": "for i = 0 to 9\r\nfor j = 0 to 9\r\nprint \"12\" &amp; i &amp; \"5\" &amp; j\r\nnext\r\nnext", "Konwledge_Point": "智能穷举搜索", "Question": ["VB语言一个关于字符串组合的程序", ["这样的数字构成的字符串在VB中怎么穷举？", "\n12*5*", "\n输出12051 12052 ... 12959 "]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;/* Note:Your choice is C IDE */\n#include &amp;#34;stdio.h&amp;#34;\nvoid OutputPrimeFactor(int i);\nvoid main()\n{\n    /*\n    \t调用函数解决&amp;#xff0c;在主函数中穷举90 ~ 100间所有整数&amp;#xff0c;对每个整数调用函数OutputPrimeFactor( )进行求解&amp;#xff0c;\n    \t该函数没有返回值&amp;#xff0c;函数类型可以定义为void。\n    */\n    int i;\n    printf(&amp;#34;90~100以内的数如下&amp;#xff1a;\\n&amp;#34;);\n    for(i&amp;#61;90;i&amp;lt;&amp;#61;100;i&amp;#43;&amp;#43;)\n    {\n   \t\tOutputPrimeFactor(i);\n    }\n}\n\nvoid OutputPrimeFactor(int i){\n\tint a&amp;#61;0;\n\tint j&amp;#61;0;\n\t//求i对应的所有的因子\n\tprintf(&amp;#34;%d&amp;#61;&amp;#34;,i);\n\tfor(j&amp;#61;i;j&amp;gt;1;j--)\n\t{\n\t\tif(i%j&amp;#61;&amp;#61;0)\n\t\t{\n\t\t\t\n\t\t\ta&amp;#61;i/j;\n\t\t\tprintf(&amp;#34;%d*&amp;#34;,a);\n\t\t}\n\t\t\n\t}\n\tprintf(&amp;#34;\\n&amp;#34;);\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["对90 ~ 100以内的所有整数，逐一对其进行质因子分解，并按照质数因子从小到大顺序以乘积形式输出，", ["调用函数解决，在主函数中穷举90 ~ 100间所有整数，对每个整数调用函数OutputPrimeFactor( )进行求解，该函数没有返回值，函数类型可以定义为void。\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;穷举法可以这么做&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; j &amp;#61; i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; k &amp;#61; j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; l &amp;#61; k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt;( i&amp;#43;j&amp;#43;k&amp;#43;l&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;disp&lt;/span&gt;([i,j,k,l])\n&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;结果比较长&amp;#xff0c;就不显示出来啦&lt;br /&gt;有帮助望采纳&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["matlab关于for循环的问题", ["从1--100中选择四个整数，使得这四个数之和等于100，用for_loop穷举法，找出所有的可能组合"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;math.h&amp;gt;&lt;/span&gt;\nint main() {\n    int a,b,c,d,s1,s2,t;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;0;a&amp;lt;&amp;#61;9;a&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;0;b&amp;lt;&amp;#61;9;b&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-attribute\"&gt;s1&lt;/span&gt;&amp;#61;100&amp;#43;a*10&amp;#43;2;\n            &lt;span class=\"hljs-attribute\"&gt;s2&lt;/span&gt;&amp;#61;30&amp;#43;b;\n            &lt;span class=\"hljs-attribute\"&gt;t&lt;/span&gt;&amp;#61;s1*s2;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t/1000&amp;gt;0&amp;amp;&amp;amp;t/100%&lt;span class=\"hljs-attribute\"&gt;10&lt;/span&gt;&amp;#61;&amp;#61;7&amp;amp;&amp;amp;t/10%10&amp;#61;&amp;#61;5){\n                &lt;span class=\"hljs-attribute\"&gt;c&lt;/span&gt;&amp;#61;t/1000;\n                &lt;span class=\"hljs-attribute\"&gt;d&lt;/span&gt;&amp;#61;t%10;\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d %d\\n&amp;#34;&lt;/span&gt;,a,b,c,d);\n            }\n        }\n    } \n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["请看一下这个应该怎么写啊谢蟹！", ["有一个乘法算式，1A2*3B=C75D，该算式在四个字母所在处缺四个数，利用穷举法找出这四个数"]], "Tag": "算法设计"}
{"Answer": "http://blog.chinaunix.net/uid-24753924-id-177343.html", "Konwledge_Point": "智能穷举搜索", "Question": ["VB编码的排列问题，怎么代入变量呢？", ["VB编码的排列问题，1xyz2345，其中x y z必须都不同，也可能是1 x y 345，总之变量个数也不确定，所以不能直接循环，请问这种情况下怎么穷举呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先把数码管点亮&amp;#xff0c;注意位选和段选&amp;#xff0c;然后做按键检测&amp;#xff0c;最后按下了就让数码管数字加1就行了&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["如何用动态数码管来显示按键按下次数的记录", ["调用P3_0口", "不用穷举法", "如何才能实现这个功能。。‧⁺◟( ᵒ̴̶̥́ ·̫ ᵒ̴̶̣̥̀ )ꈨຶꎁꈨຶ꒦ິ^꒦ິ •᷄ࡇ•᷅ ˃ ˄ ˂̥̥ "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;使用k-均值算法进行聚类&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["matlab关于排列组合的一个问题,求大佬们指点", ["课题是已知十个点,坐标已知,要求将十个点分为两组,每组5个点,并用循环的形式表达出所有组合可能。题主只会穷举法列出，对循环毫无思路，请大家指教一下"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以利用n位二进制数中有C&amp;#xff08;k&amp;#xff0c;n&amp;#xff09;个含有k个1的数&amp;#xff0c;例如四位二进制数里含有2个1的数为C&amp;#xff08;2&amp;#xff0c;4&amp;#xff09;&amp;#61;4*3/2&amp;#61;6个。&lt;br /&gt;这样可以利用这个规律来提高效率&amp;#xff0c;比如1-18这个范围就减少到16-18&amp;#xff0c;算这个范围即可。&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["#C语言题目 #二进制", ["想问下这个题目有没有什么好的思路？", "穷举法的话会超出题目给的时间限制", "一开始想的是设置一个数组来存放二进制的01，然后通过类似于全排列的算法来解决", "不知道大家有没有什么更好的解决方法"]], "Tag": "算法设计"}
{"Answer": "```\r\nint main()\r\n{\r\n\tint x, g, m;\r\n\tfor (x = 3; x &lt;= 100; x += 3) {\r\n\t\tfor (g = 1; g &lt;= 100; g++) {\r\n\t\t\tfor (m = 1; m &lt;= 100; m++) {\r\n\t\t\t\tif ((x + g + m == 100) &amp;&amp; (x * 3 + g + m / 3 == 100) &amp;&amp; (m % 3 == 0)) {\r\n\t\t\t\t\tprintf(\"小鸡，公鸡，母鸡的个数分别是：%d,%d,%d\\n\", x, g, m);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n} \r\n```", "Konwledge_Point": "智能穷举搜索", "Question": ["初学者百元买百鸡程序问题", ["题目是小鸡3元一只，公鸡1元一只，母鸡1元3只，一百元买一百只鸡，要用穷举法 ", "这是我打的程序，好像没什么问题，当运行一直无限循环的？"]], "Tag": "算法设计"}
{"Answer": "老实说，这代码问题太多，判断i是否是素数的循环里，Target范围不用从2到达i，到达i平方根即可，其次，i跟1,2的比较没用，\r\n再次，target不用累加，如果i是素数，判断到i的平方根即可确定是素数，如果i不是素数，则必然可以由素数的乘积构成，所以target\r\n的取值只需全部取素数即可", "Konwledge_Point": "智能穷举搜索", "Question": ["一个简单程序出错了求纠错，谢谢", ["我写了一个求1000-10000素数的程序，代码去图片，但为什么求出的从是9701后的所有数？", "\n\n", "#include \"stdafx.h\"", "\n#include ", "\n#include ", "\n\n", "int calculate(int i)", "\n{", "\n    int judge;", "\n    for (judge = 2; judge < i; judge++)    //穷举i的所有除数", "\n    {", "\n        if (i%judge == 0)", "\n        {", "\n            return 0;                   //不是素数", "\n        }", "\n        else if (i!=judge+1)                  //判断i有没有被所有除数除完   如果除完都没有余数就返回1  即这个数十素数！  如果没有除完继续循环除！", "\n            continue;", "\n        else", "\n            return 1;", "\n    }", "\n}", "\n\n", "int main()", "\n{", "\n    int i;", "\n    for (i = 1000; i < 10000; i++)      //穷举所有i ", "\n        if (calculate(i) == 1)", "\n            printf(\"%d\\n\", i);         //输出素数！", "\n    system(\"pause\");"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这个while 的判断条件不应该是n&amp;#xff01;&amp;#61;6174&amp;#xff0c;应该是别的&amp;#xff0c;不然你的while循环就没有跳出了&amp;#xff0c;当你的值是1000的时候就会卡在里面&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["用python验证卡普雷卡尔黑洞问题时运行不正常", ["问题遇到的现象和发生背景", "\n", "尝试用for循环在1000~9999内验证卡普雷卡尔黑洞问题时程序无终止(最终期望得到数值：6174）", "\n", "问题相关代码", "\n", "#Main exe", "\n", "def", " ", "main", "():\n    ", "for", " n ", "in", " ", "range", "(", "1000", ",", "10000", "):\n        check(", "str", "(n))\n        ", "if", " check(", "str", "(n)):\n            blackhole(", "str", "(n))\n        ", "else", ":\n            ", "print", "(", "'Illegal'", ")\n\n", "#Check the number", "\n", "def", " ", "check", "(", "n", "):\n    ", "if", " ", "not", " n.isnumeric():\n        ", "return", " ", "False", "\n    ", "elif", " ", "len", "(n)!=", "4", ":\n        ", "return", " ", "False", "\n    ", "elif", " n==n[", "0", "]*", "4", ":\n        ", "return", " ", "False", "\n    ", "else", ":\n        ", "return", " ", "True", "\n\n", "#Blackhole transform", "\n", "def", " ", "blackhole", "(", "n", "):\n    rom=n\n    ", "while", " n!=", "'6174'", ":\n        a=", "list", "(n)\n        b=max_number(a)\n        c=min_number(a)\n        n=", "str", "(b-c)          ", "#The type of n is string instead of int", "\n    ", "print", "(", "'{} OK'", ".", "format", "(rom))\n\n", "def", " ", "max_number", "(", "a", "):\n    a.sort(reverse=", "True", ")\n    ", "return", " ", "int", "(", "''", ".join(a))\n", "def", " ", "min_number", "(", "a", "):\n    a.sort()\n    ", "return", " ", "int", "(", "''", ".join(a))\n\n", "#Exe entrance", "\n", "if", " __name__==", "'__main__'", ":\n    main()\n", "\n", "运行结果及报错内容", "\n", "Traceback (most recent call last):", "  File \"G:/程序/数字黑洞穷举验证.py\", line 40, in ", "    main()", "  File \"G:/程序/数字黑洞穷举验证.py\", line 6, in main", "    blackhole(str(n))", "  File \"G:/程序/数字黑洞穷举验证.py\", line 26, in blackhole", "    b=max_number(a)", "KeyboardInterrupt", "运行时一直没有print的任何显示，只好手动终止程序。", "使用键盘手动终止程序时正在执行的位置也不同。", "\n", "我的解答思路和尝试过的方法", "\n", "怀疑过计算量较大，尝试过缩小验证范围（1000~1005），但没有用，好奇为什么。", "\n", "我想要达到的结果", "\n", "在1000~9999内验证卡普雷卡尔黑洞问题"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;只用了些基础的方式&amp;#xff0c;算法很简单&amp;#xff0c;只要计算一下位置正确且数字正确的个数和数字正确的个数&amp;#xff0c;然后和你给的条件暴力枚举即可&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;[] args)&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=\"hljs-comment\"&gt;// 枚举法 out: 0518 3510&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; str1 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;3628&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; str2 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;7019&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; str3 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;1429&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; str4 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;4576&amp;#34;&lt;/span&gt;;\n\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9999&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-comment\"&gt;// 补0&lt;/span&gt;\n            &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; cur &amp;#61; &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;.format(&lt;span class=\"hljs-string\"&gt;&amp;#34;%04d&amp;#34;&lt;/span&gt;, i);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-built_in\"&gt;check&lt;/span&gt;(cur, str1, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-built_in\"&gt;check&lt;/span&gt;(cur, str2, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-built_in\"&gt;check&lt;/span&gt;(cur, str3, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-built_in\"&gt;check&lt;/span&gt;(cur, str4, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n            System.out.&lt;span class=\"hljs-built_in\"&gt;println&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;密码&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; cur);\n        }\n    }\n\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;boolean&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;check&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; target, &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; condition, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; targetPos, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; targetSame)&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] cnt1 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] cnt2 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n        &lt;span class=\"hljs-comment\"&gt;// 位置正确且数字正确个数&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; posCnt &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c1 &amp;#61; target.&lt;span class=\"hljs-built_in\"&gt;charAt&lt;/span&gt;(i);\n            &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c2 &amp;#61; condition.&lt;span class=\"hljs-built_in\"&gt;charAt&lt;/span&gt;(i);\n            cnt1[c1 - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;]&amp;#43;&amp;#43;;\n            cnt2[c2 - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;]&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-comment\"&gt;// 重复数字直接返回false&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (cnt1[c1 - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;] &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c1 &amp;#61;&amp;#61; c2) posCnt &amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-comment\"&gt;// 数字正确个数&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sameCnt &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            sameCnt &amp;#43;&amp;#61; Math.&lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(cnt1[i], cnt2[i]);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; posCnt &amp;#61;&amp;#61; targetPos &amp;amp;&amp;amp; sameCnt &amp;#61;&amp;#61; targetSame;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;输出&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;密码&amp;#xff1a;0518\n密码&amp;#xff1a;3510\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["如何用java猜四位数密码？", ["猜密码:", "3 6 2 8 其中一个数字正确且位置正确", "7 0 1 9 其中两个数字正确，一个位置正确，一个位置不对", "1 4 2 9 一个数字正确，位置不对", "4 5 7 6 一个数字正确且位置正确", "以上条件成立，且四位密码数字不重复，实用java程序实现。", "有点类似力扣里的猜数字问题，这个问题仅用java基础进行编写(数组或者字符串，哈希和list不能用)，大概都是暴力穷举，希望网友们多多参与讨论。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i, j, k, l, s &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; k &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; k&amp;#43;&amp;#43;)\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (l &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; l &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; l&amp;#43;&amp;#43;)\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;#43; j &amp;#43; k &amp;#43; l &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;){\n                        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d,%d,%d,%d\\n&amp;#34;&lt;/span&gt;, i, j, k, l);\n                        s&amp;#43;&amp;#43;;\n                    }\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,s);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["问一下这题怎么做（Devc++）", ["这题穷举不会请大家教我一下越初级越好", "\n", "#include<iostream>", "\n", "using", " ", "namespace", " std;\n", "int", " main(){\n    ", "int", " a,b,c,", "sum", "=", "0", ";\n    ", "for", "(", "int", " i=", "1", ";i<", "10000", ";i++){    \n        a++;\n        b++;\n        c++;\n        ", "if", "(a+b+c+i==", "9", "){\n            ", "sum", "=", "sum", "+", "1", ";\n        }\n    \n    }\n    cout<<", "sum", ";\n    \n    \n    ", "return", " ", "0", ";\n} \n\n", "\n", "这是错的不知道怎么改", "\n", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://blog.csdn.net/SPESEG/article/details/126900190\" id=\"textarea_1663924541394_1663924611951_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;spark基本数据处理之推荐数据movielens_小李飞刀李寻欢的博客-CSDN博客&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["spark-sql如何按用户对time排序，序号为新增的一列", ["问题遇到的现象和发生背景", "\n", "怎么给dataset增加一列并按照用户编号啊？", "比如", "uid，movieid，time", "1   1009      20220101", "1     1002  20220104", "2   1019     20220203", "2   1012   20220209", "要求：按用户uid对time进行倒排序，序号增加一列", "\n", "我想要达到的结果", "\n", "增加后", "uid movieid   time      order", "1   1009     20220101 1", "1    1002    20220104  2", "2   1019     20220203  1", "2   1012     20220209 2", "\n", "uid很多很多，不能用穷举的方法（一个一个写的那种）"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;n&amp;#61;eval(input())\ni&amp;#61;1\nfor i in range(1,n&amp;#43;1):\n    if i%3&amp;#61;&amp;#61;2 and i%5&amp;#61;&amp;#61;1 and i%7&amp;#61;&amp;#61;0:\n        print(i,end&amp;#61;&amp;#39; &amp;#39;)\n    i&amp;#61;i&amp;#43;1\n &lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["关于#python#的问题：要求全列举出来）【输入形式】人数上限 n【输出形式】士兵人数【样例输入】60【样例输出】56 【样例输入】300【样例输出】56 161 266", ["有一群士兵，人数不超过n。韩信将其按照一行3人排队，余2人；按照一行5人排队，余1人；按照一行7人排队，刚好排成若干行。编写程序 计算士兵的人数。", "（提示：可以采用穷举法求解。当人数上限比较大时，会有多种结果，要求全列举出来）", "【输入形式】", "人数上限 n", "【输出形式】", "士兵人数", "【样例输入】", "60", "【样例输出】", "56", " ", "【样例输入】", "300", "【样例输出】", "56 161 266"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1.当然是正确的&lt;br /&gt;不能被素数整除&amp;#xff0c;必然也不能被合数整除&amp;#xff0c;因为合数是素数相乘得到的呀&amp;#xff0c;这还用写程序论证&amp;#xff1f;&lt;br /&gt;问题是在求素数的过程中如果还要顺带求比它小的素数&amp;#xff0c;反而复杂化了&amp;#xff0c;所以写程序一般都不考虑是素数还是合数&amp;#xff0c;直接遍历。&lt;br /&gt;如果你不是要验证一个数是质数还是合数&amp;#xff0c;而是要求N以内的所有质数&amp;#xff0c;那么筛法才是最效率的。&lt;br /&gt;2.穷举当然是可以破解的&amp;#xff0c;问题是需要花多长时间呢&amp;#xff1f;如果你花600年能破解&amp;#xff0c;跟破解不了有多大区别呢&lt;br /&gt;实际上&amp;#xff0c;算法也是在不断迭代的&amp;#xff0c;最早RSA算法只有128位&amp;#xff0c;现在512位也不止了吧&amp;#xff0c;好像已经有2048位的RSA了&lt;br /&gt;所以实际应用中你不需要600年破解&amp;#xff0c;只要3年不被破解基本上就等于永远不会被破解了&amp;#xff0c;因为3年之后算法提升&amp;#xff0c;破解难度又变大了&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["素数与RSA算法的疑问", ["我有几点思考，个人能力有限想不明白，望有人指点下：", "1、找素数的时候，我在想：不能被比他小的素数整除的数就是素数。请各位指正该推理成立吗？1亿以内的素数我都写程序论证过了，没有问题。", "2、都说RSA很难破译，是真的吗？人类目前找到的素数是个有限集合，公钥里面包含了两个大素数的乘积，如果进行穷举，是不是就可以破解了？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-C&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt; &lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stack&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;set&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iomanip&amp;gt;&lt;/span&gt; &lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; result &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;];\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;output&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;#43;&amp;#43;)\n     {\n          &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;lt; n - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; a[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; a[i &amp;#43; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;#61;&amp;#61; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            result&amp;#43;&amp;#43;;\n        }\n     }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;search&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;                                     \n&lt;/span&gt;{\n     &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(m&amp;#61;&amp;#61;n)\n     {\n          &lt;span class=\"hljs-built_in\"&gt;output&lt;/span&gt;(n);\n     }\n     &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n     {\n          &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;#43;&amp;#43;)\n          {\n               a[m]&amp;#61;i;\n               &lt;span class=\"hljs-built_in\"&gt;search&lt;/span&gt;(m&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,n);\n          }\n     }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; array[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;65&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;114&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;351&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;616&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1081&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1897&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3329&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5842&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10252&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;17991&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;31572&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;55405&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;97229&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;170625&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;299426&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;525456&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;922111&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1618192&lt;/span&gt;};\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    cin&amp;gt;&amp;gt;n;\n    &lt;span class=\"hljs-built_in\"&gt;search&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,n);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(array[n] !&amp;#61; result)cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;error&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;\n    cout&amp;lt;&amp;lt;result&amp;lt;&amp;lt;endl;\n    result &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;源码给你你继续研究吧&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["取数游戏 Description", ["题目描述", "我们来玩一个游戏：自然数1到N，按顺序列成一排，你可以从中取走任意个数，但是间隔一个的不能同时被取走，如果1表示取走，0表示不取走，则不能出现101的连续串。", "如果你能算出一共有多少种取法，那么你会被天神小泰泰奖励。", "输入", "输入仅包含一个数n（1≤ n ≤ 25）。", "输出", "输出仅包含一个数你的答案。", "样例", "输入  复制", "4", "输出  复制", "12", "提示", "递归穷举即可。答案在2147483647以内。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;机器学习里面回归拟合啊&amp;#xff0c;至于逻辑回归还是线性&amp;#xff0c;这个看你的数据了&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["【毕不了业了】这玩意除了神经网络还有什么别的好的算法吗？", ["​接了个方向，现在毕不了业了……", "\n", "如下：", "\n", "A到L是12个变量，其中前5个是输入，后7个是输出；", "\n", "Q1:  我现在知道这12个变量的范围，比如A（100~400）；我现在要建立输入与输出之间的关系。", "        我需要去了解什么算法呢？除了神经网络还有好的办法吗？", "​", "\n", "\n", "Q2:  现在输出区间里有个最优的数值，但是我不知道它是多少，也不知道该怎么去取得它。怎么搞呢？在Q1的基础上直接穷举法吗？", "\n", "恳请回答，万分感谢"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint main()\n{\nint j,i[5];\nint sign;\nint result;\nint &lt;span class=\"hljs-attribute\"&gt;count&lt;/span&gt;&amp;#61;0;\nint num[6];\nint left,right;\nchar oper[5]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;};\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;1;j&amp;lt;&amp;#61;5;j&amp;#43;&amp;#43;)\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;num[j]);\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;result);\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i[1]&amp;#61;1;i[1]&amp;lt;&amp;#61;4;i[1]&amp;#43;&amp;#43;)\n{\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((i[1]&amp;lt;4)||(num[2]!&amp;#61;0))\n{\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i[2]&amp;#61;1;i[2]&amp;lt;&amp;#61;4;i[2]&amp;#43;&amp;#43;)\n{\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((i[2]&amp;lt;4)||(num[3]!&amp;#61;0))\n{\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i[3]&amp;#61;1;i[3]&amp;lt;&amp;#61;4;i[3]&amp;#43;&amp;#43;)\n{\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((i[3]&amp;lt;4)||(num[4]!&amp;#61;0))\n{\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i[4]&amp;#61;1;i[4]&amp;lt;&amp;#61;4;i[4]&amp;#43;&amp;#43;)\n{\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((i[4]&amp;lt;4)||(num[5]!&amp;#61;0))\n{\n&lt;span class=\"hljs-attribute\"&gt;left&lt;/span&gt;&amp;#61;0;\n&lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;num[1];\n&lt;span class=\"hljs-attribute\"&gt;sign&lt;/span&gt;&amp;#61;1;\n\n                                        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;1;j&amp;lt;&amp;#61;4;j&amp;#43;&amp;#43;)\n                                            {\n                                                switch(oper[i[j]])\n                                                {\n                                                    case &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n                                                    &lt;span class=\"hljs-attribute\"&gt;left&lt;/span&gt;&amp;#61;left&amp;#43;sign*right;\n                                                    &lt;span class=\"hljs-attribute\"&gt;sign&lt;/span&gt;&amp;#61;1;\n                                                    &lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;num[j&amp;#43;1];\n                                                    break;\n                                                    case &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n                                                    &lt;span class=\"hljs-attribute\"&gt;left&lt;/span&gt;&amp;#61;left&amp;#43;sign*right;\n                                                    &lt;span class=\"hljs-attribute\"&gt;sign&lt;/span&gt;&amp;#61;-1;\n                                                    &lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;num[j&amp;#43;1];\n                                                    break;\n                                                    case &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n                                                    &lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;right*num[j&amp;#43;1];\n                                                    break;\n                                                    case &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n                                                    &lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;right/num[j&amp;#43;1];\n                                                    break;\n                                                }\n                                             }\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(left&amp;#43;sign*&lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;&amp;#61;result)\n                    {\n                        count&amp;#43;&amp;#43;;\n                        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;1;j&amp;lt;&amp;#61;4;j&amp;#43;&amp;#43;)  \n                            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c &amp;#34;&lt;/span&gt;,oper[i[j]]);\n                    }\n                                    }\n                                }\n                        }\n                }\n            }\n        }\n    }\n}\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;count&lt;/span&gt;&amp;#61;&amp;#61;0)\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;No solution&amp;#34;&lt;/span&gt;);\n    getchar();\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["C语言编程填入运算符", ["问题描述：输入 5 个数与一个结果，设计程序在 5 个数中填入运算符（ + - * /）使其与结果相等，或回答做不到。5个数顺序固定，运算顺序固定为从左向右，不考虑运算符优先性。除法按整数除法来运算，保证有解的输入都是有唯一解的。", "输入形式：5个整数a, b, c, d, e和一个结果整数result。0<a,b,c,d,e<=50。", "输出形式：依次输出4个运算符，以空格隔开；没有解时输出\"No solution\"。", "如何遍历各种情况呢？一共64种填入可能，如何穷举完全？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先排序&amp;#xff0c;再去除重复数字&amp;#xff0c;然后遍历一遍&amp;#xff0c;若前后两个数据之差为1&amp;#xff0c;则符合题目要求&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["如何用C语言完成，希望大家给于思路", ["提示用户输入数据规模N，然后随机生成N个正整数（所有整数均小于10000），输出其中包含的所有相邻数对（数值相差为1的两个整数）以及相邻数对的总数。例如，若N=7，随机生成7个数据{2,0,3,6,1,0,4}，其中一共包括4个相邻数对，即（1,0）、（1,2）、（2,3）和（4,3）。注意，（0,1）和（1,0）是相同的相邻数对，不要重复统计和输出显示。要求：不允许使用双重循环穷举的方式查找相邻数对。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1、内循环上增加 sum &amp;#61; 0; temp &amp;#61; i;&lt;br /&gt;2、内循环内部只需要 sum &amp;#43;&amp;#61; pow(temp % 10, n); temp /&amp;#61; 10;&lt;br /&gt;代码参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, min, max, t, sum;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Enter n(2&amp;lt;n&amp;lt;8):&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    min &amp;#61; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    max &amp;#61; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; min; i &amp;lt; max; i&amp;#43;&amp;#43;) {\n        t &amp;#61; i;\n        sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; n; j&amp;#43;&amp;#43;) {\n            sum &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(t % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, n);\n            t /&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum &amp;#61;&amp;#61; i) {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, i);\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["关于水仙花数如何解决", ["输出n位数全部的水仙花数", "\n", "#", "include", "<math.h>", "\n", "int", " ", "main", "(", "void", ")", "\n", "{\n    ", "int", " n,min,max,k,i,bit,temp,sum=", "0", ";\n    ", "printf", "(", "\"Enter n(2<n<8):\"", ");", "/*输入n*/", " \n    ", "scanf", "(", "\"%d\"", ",&n);\n    min=", "pow", "(", "10", ",n);", "/*下限，比如n==3，min=100*/", " \n    max=", "pow", "(", "10", ",n+", "1", ");", "/*上限限，比如n==3，max=1000*/", "\n    ", "for", "(i=min;i<max;i++)", "/*穷举min~max中的数*/", "\n    {\n        ", "for", "(k=", "1", ";k<=n;k++)", "/*判断水仙花数*/", "\n        {\n            temp=i;\n            bit=i%", "10", ";\n            i=i/", "10", ";\n            sum=sum+", "pow", "(bit,n);\n        }\n        ", "if", "(sum==i)\n        {\n            ", "printf", "(", "\"%d \"", ",i);\n        }\n    }\n    \n    \n    \n    ", "return", " ", "0", ";\n } \n\n", "\n", "运行结果及报错内容", "\n", "可以通过编译，没有输出"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/wind__chaser/article/details/91386065", "Konwledge_Point": "智能穷举搜索", "Question": ["网络博客回溯法素数环问题疑惑？", ["#include<cstdio>\n#include<iostream>\n#include<cstdlib>\n#include<cmath>\nusing namespace std;\nbool b[11]= {0};\nint total=0,a[11]= {0};\nint search(int);//回溯过程\nint print();//输出方案\nbool pd(int,int);//判断素数\nint main()\n{\n    search(1);\n    cout<<total<<endl;//输出总方案数\n}\nint search(int t)\n{\n    int i;\n    for (i=1; i<=10; i++)//有20个数可选\n        if (pd(a[t-1],i)&&(!b[i]))//判断与前一个数是否构成素数及该数是否可用\n        {\n            a[t]=i;\n            b[i]=1;//跟着i标记\n            if (t==10)\n            {\n                if (pd(a[10],a[1]))\n                    print();\n            }\n            else\n                search(t+1);\n            b[i]=0;\n        }\n}\nint print()\n{\n    total++;\n    cout<<\"<\"<<total<<\">\";\n    for (int j=1; j<=10; j++)\n        cout<<a[j]<<\" \";\n    cout<<endl;\n}\nbool pd(int x,int y)\n{\n    int k=2,i=x+y;\n    while (k<=sqrt(i)&&i%k!=0)//判断相邻数的和是否是素数\n        k++;\n    if (k>sqrt(i))\n        return 1;\n    else\n        return 0;\n}\n", "\n\n", "以上是网上博客解决素数环的问题，我一直比较疑惑的点是最终的输出结果为什么只有1，2，3，5，7开头的，4，6，8，9，10开头的呢", "\n当前结果6 1 10 7 4 9 2 3 8 5", "\n当前结果6 1 10 7 4 9 8 3 2 5", "\n当前结果6 1 10 9 2 5 8 3 4 7", "\n当前结果6 1 10 9 8 5 2 3 4 7", "\n比如以上也是满足的", "\n另外一个穷举法", "\n\n", "#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nint A[100], isp[100], n;//isp是素数表，用于存放素数 \n\nint is_prime(int x){\n    for(int i = 2; i < x; i++){\n        if(x % i == 0) return 0;\n    }\n    return 1;\n}\n\nvoid printPrime(){\n    //生成第一个排列，顺序排列， A[1] = 1 A[2] = 2 \n    for(int i = 1; i <= n; i++){\n        A[i] = i;\n    }\n    do{\n        bool ok = true;\n        for(int i = 1; i < n; i++){\n            int index = A[i]+A[i+1];\n            if(!isp[index]){\n                ok = false;\n                break;\n            }\n        }\n        //第一个和最后一个数的和 \n        if(!isp[A[1] + A[n]]){\n            ok = false;\n        }\n        if(ok){\n            cout << \"当前结果\"; \n            for(int i = 1; i <= n; i++){\n                cout << A[i] << \" \";\n            }\n            cout << endl;\n        }\n    } while(next_permutation(A+2, A+n+1));//第一个一定为1不变，只更新第2个到最后1个的排列\n}   //因为A[0]=0,A[1]=1\n\nint main(){\n    cin >> n;\n    //记录1~n*2的值是否为素数 \n    for(int i = 2; i <= n*2; i++){\n        isp[i] = is_prime(i);\n    }\n    printPrime();\n}\n", "\n\n", "穷举法却可以有1到10开头的都有，我想不明白第一个程序为什么不能输出全部，实在想不明白，希望大佬指点一下，"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1.多了个分号&lt;br /&gt;2.if没括号&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/365955960276196.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["c语言程序设计函数章节课后习题", ["c语言程序设计课后题目搞不懂", "\n", "遇到一个错误翻译过来也看不懂", "\n", "\n", "#include <stdio.h>", "\n//穷举法\n\n", "int", " gcd(", "int", " a,", "int", " b)\n{    \n ", "if", "(a==", "0", ");\n    ", "return", " b;\n    ", "if", " (b==", "0", ")\n    ", "return", " a;\n    ", "if", " (a==b)\n    ", "return", " a;\n    ", "int", " gcd_res = a > b?b : a;\n    ", "while", "(gcd_res > ", "1", ")\n    {\n        ", "if", "(a%gcd_res==", "0", ")&& (b%gcd_res==", "0", ")\n        ", "return", " gcd_res;\n            gcd_res--;\n        }\n    ", "return", " gcd_res;\n}\n", "int", " main()\n{\n    ", "int", " a , b;\n    ", "printf", "(", "\"请输入a和b\"", ");\n    scanf(", "\"%d %d\"", ",&a,&b);\n    \n    ", "//", "最大公约数\n    ", "int", " gcd_result = gcd(a,b);\n    ", "printf", "(", "\"%d 和 %d的最大公约数为：>%d\\n\"", ",a,b,gcd_result);\n    ", "return", " ", "0", ";\n    }\n\n", "\n", "[Error] expected identifier before '(' token", "\n", "我用#define，再找了一下同学，同学说我这个少个中括号，但是我每次审查都发现不了错在哪", "\n", "我想要明白这个问题出在哪里"]], "Tag": "算法设计"}
{"Answer": "因为x,y,z均是没有初始值的变量，但你把它们作为了循环的条件", "Konwledge_Point": "智能穷举搜索", "Question": ["小白看着大神：内心渴望满满：千言万语归为一句话：哪位大神帮我看看这个程序", ["题目内容：", "\nn块砖( 27<n<=77 )，36人搬，男搬4，女搬3，两个小孩抬一块砖，要求一次搬完，问男人、女人和小孩各需多少人？请用穷举法编程求解,n的值要求从键盘输入。输出结果按照男人数量升序给出（见下面示例3）。", "\n\n", "程序的运行结果示例1：", "\n\n", "Input n(27<n<=77):", "\n28↙", "\nmen=0,women=4,children=32", "\n\n", "程序的运行结果示例2：", "\nInput n(27<n<=77):", "\n36↙", "\nmen=3,women=3,children=30", "\n\n", "程序的运行结果示例3：", "\nInput n(27<n<=77):", "\n60↙", "\nmen=2,women=14,children=20", "\nmen=7,women=7,children=22", "\nmen=12,women=0,children=24", "\n\n", "输入提示： \"Input n(27\n输入格式: \"%d\"  ", "\n输出格式：\"men=%d,women=%d,children=%d\\n\"", "\n为避免出现格式错误，请直接拷贝粘贴题目中给的格式字符串和提示信息到你的程序中。", "\n我的代码：", "\n#include", "\nint main()", "\n{", "\nint n,x,y,z;", "\nprintf(\"Input n(27\nscanf(\"%d\",&n);", "\nwhile(x>=0&&x<=20)", "\n{", "\nwhile(y>=0&&y<=25)", "\n{", "\nwhile(z>=0&&z<=150)", "\n{", "\nif(x*4+y*3+z/2==n)", "\nprintf(\"men=%d,women=%d,children=%d\\n\",x,y,z);", "\n}", "\n}", "\n}", "\nreturn 0;", "\n}", "\n那么问题来了，为啥我按下回车键它没有反应"]], "Tag": "算法设计"}
{"Answer": "![图片说明](https://img-ask.csdn.net/upload/202010/12/1602471631_269551.png)\r\n基本功啊基本功\r\n首先告诉我你的参数d是干嘛用的？ 是没用的\r\n然后我明白你是想每次都用当前的利润总和与当前最大利润对比，但是你仔细看看，每次比较，当前最大利润都是m = 0，这还有比较的必要吗？\r\n为什么是这样呢？因为你没有把每次计算好的m传递出来，回溯什么的不明白就自己拿笔把每一次的结果都写出来，多练多写\r\n好了回到正题，既然要保持一个最大利润参数作为每次比较的依据，你得把它传递出来!\r\n[图片说明](https://img-ask.csdn.net/upload/202010/12/1602472698_275202.png)\r\n代码结构我就不动了，增加一个m参数传递\r\n结果你自己看看对不对，第一个return是为了em.回溯的参数传递，第二个return传出最终结果\r\n![图片说明](https://img-ask.csdn.net/upload/202010/12/1602472886_26278.png)", "Konwledge_Point": "智能穷举搜索", "Question": ["小白搞不懂回溯啊 求大佬指教", ["问题是这样的：", "\n有一个行李箱", "\n给出最多能装_多少kg__的限制（w_limit)", "\n，又给了一个货物利润的array1和对应货物重量的array2", "\n，要求output利润的最大值", "\n\n", "然后这是我写的代码", "\n\n", "def subset(S,sub,array1,array2,n,d):\n    m=0\n    if len(S) == 0:\n        pft_sum=0\n        wgt_sum=0\n        for i in sub:\n            pft_sum += array1[i]\n            wgt_sum += array2[i]\n            if wgt_sum <= n:\n                if pft_sum > m:\n                    m = pft_sum\n        return \n    subset(S[1:],sub,array1,array2,n,d)\n    subset(S[1:],sub+[S[0]],array1,array2,n,d)\n    return m\n\n\n\n\n\n\nw_limit=25\nwgt=[2, 8, 5, 6, 15, 3, 7]\npft=[30, 100, 10, 120, 280, 50, 40]\n\nS=[]\nfor i in range(len(wgt)):\n    S.append(i)\n\n\nd=subset(S,[],pft,wgt,w_limit,[])\nprint(d)\n\n", "\n\n", "但是这样子算出来的d一直是0，是因为输出的m每一个回溯都会=0一下吗", "\n求解！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先说你代码问题再给你ac的代码。&lt;br /&gt;问题1. sr太小了&amp;#xff0c;而且这个数组没必要。这种算法题不必等着读入完毕再处理&amp;#xff0c;可以输入一个处理一个&lt;br /&gt;问题2. 生成小于pd的所有素数这个for循环&amp;#xff0c;只需要执行一次&amp;#xff0c;应该放在main中就行了&amp;#xff0c;放在PD函数里面&amp;#xff0c;每次执行太浪费时间&lt;br /&gt;问题3. 判断是不是素数只需要i&lt;em&gt;i&amp;lt;&amp;#61; n就行了&amp;#xff0c;因为如果n%i&amp;#61;&amp;#61;0&amp;#xff0c;那么n%(n/i)&amp;#61;&amp;#61;也可以。就相当于i&lt;/em&gt;(n/i)&amp;#61;n&lt;br /&gt;问题4 and在C&amp;#43;&amp;#43;是关键字&amp;#xff0c;虽然在C不是关键字&amp;#xff0c;但是也要注意一下&lt;br /&gt;另外你代码太多冗余了&amp;#xff0c;我就你代码的基础上进行了优化&amp;#xff0c;思路还是你的思路&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;ac的代码在下面&amp;#xff0c;没问题的话&amp;#xff0c;请点击采纳答案&lt;/strong&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; su[&lt;span class=\"hljs-number\"&gt;1229&lt;/span&gt;], sum, q; &lt;span class=\"hljs-comment\"&gt;//小于10000的所有素数有1229个, and在C&amp;#43;&amp;#43;中是关键字&amp;#xff0c;改成了Sum&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;PD&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; pd)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; number &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, w;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; r &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; r &amp;lt; q; r&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-comment\"&gt;//穷举法&amp;#xff0c;用number标出该数的所有分解方式&lt;/span&gt;\n        sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (w &amp;#61; r; w &amp;lt; q; w&amp;#43;&amp;#43;) {\n            sum &amp;#61; sum &amp;#43; su[w];\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum &amp;#61;&amp;#61; pd) {\n                number&amp;#43;&amp;#43;;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum &amp;gt; pd)\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, number);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; n &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;; n&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-comment\"&gt;//生成小于pd的所有素数,并安置在su数组中&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i * i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-comment\"&gt;// i只需要枚举到 根号n即可&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n % i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i * i &amp;gt; n) su[q&amp;#43;&amp;#43;] &amp;#61; n;\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;x), x) {\n        &lt;span class=\"hljs-built_in\"&gt;PD&lt;/span&gt;(x);\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["c语言 我的代码出现问题但是我找不到，如何解决？", ["本人c语言初学者，在pta上做题过程中，我的代码符合题目要求也能运行，但是最后出现了", "段错误", "，但是找不到错误在哪。", "\n", "题目", "：", "(有一些正整数可以分解为一个或连续多个素数的和。给定一个正整数，有多少种可能的分解方式？例如，53可以分解为 5 + 7 + 11 + 13 + 17和53。整数41有三种分解方式，即2+3+5+7+11+13, 11+13+17和41。而整数3只有一种分解方式，即3。整数20无法分解为连续素数的和。 注意：在分解一个整数时，素数必须是连续的, 因此7 + 13 和 3 + 5 + 5 + 7 都不是20的有效分解方式，因为7和13之间有一个素数11，而 3 + 5 + 5 + 7这种分解方式中5重复出现了。)", "\n", "请编写一个程序，对于给定的一个正整数，输出其有效的分解方式有多少。", "\n", "输入：", "每行给出一个正整数，其值在2到10000之间，包括2和10000。遇到0时代表输入结束，并且0不用分解。", "\n", "输出：", "输出由多行组成。每行对应输入的一行（输入中由0结束的行除外），该行的值对应输入中整数的有效素数分解的个数，行尾不得有多余的符号", "。", "\n", "输入样例", "：", "2", "3", "17", "41", "20", "666", "12", "53", "0", "\n", "输出样例", "：", "1", "1", "2", "3", "0", "0", "1", "2", "\n", "代码", "：(变量设置的有点乱 请见谅)", "\n", "#", "include", " ", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " ", "PD", "(", "int", " pd)", ";", "//声明函数", "\n    ", "int", " o;\n    ", "int", " sr[", "30", "],x=", "0", ";\n    ", "for", "(;;)\n        {\n            ", "if", "(", "scanf", "(", "\"%d\"", ",&sr[x])==", "1", ")\n            {\n            ", "if", "(sr[x]==", "0", ")\n                ", "break", ";\n            x++;\n            }\n        }", "//输入一组数据储存在名为sr的数组中", "\n    ", "for", "(", "int", " a=", "0", ";a<x;a++)\n    {\n        o=sr[a];\n        ", "PD", "(o);\n    }", "//调用PD函数", "\n    ", "return", " ", "0", ";\n}\n\n", "int", " ", "PD", "(", "int", " pd)", "\n", "{\n    ", "int", " su[", "1229", "],", "and", ",q=", "0", ",number=", "0", ",w;", "//小于10000的所有素数有1229个", "\n    ", "for", "(", "int", " n=", "1", ";n<=pd;n++)\n    {\n        ", "for", "(", "int", " i=", "2", ";i<=n;i++)\n        {\n            ", "if", "(i==n)\n            {\n             su[q]=n;\n             q++;\n            }\n            ", "else", " ", "if", "(n%i==", "0", ")\n                ", "break", ";\n        }\n    }   ", "//生成小于pd的所有素数,并安置在su数组中", "\n    ", "for", "(", "int", " r=", "0", ";r<q;r++)\n    {\n        ", "and", "=", "0", ";\n        ", "for", "(w=r;w<q;w++)\n        {\n            ", "and", "=", "and", "+su[w];\n            ", "if", "(", "and", "==pd)\n            {\n                number++;\n            }\n            ", "if", "(", "and", ">pd)\n            ", "break", ";\n        }\n    }   ", "//穷举法，用number标出该数的所有分解方式", "\n        ", "printf", "(", "\"%d\\n\"", ",number);\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;\n#define MAXSTRLEN 20\ntypedef struct SString {\n    int leng;\n    char data[MAXSTRLEN&amp;#43;1];   //第一个位置不使用\n}SString;\n\nvoid InitSString(SString &amp;amp;S, int le){\n    printf(&amp;#34;Init(%d): &amp;#34;,le);\n    S.leng &amp;#61; le;\n    for(int i&amp;#61;1;i&amp;lt;&amp;#61;S.leng;i&amp;#43;&amp;#43;) scanf(&amp;#34;%c&amp;#34;,&amp;amp;S.data[i]);\n    getchar();\n}\n\n//简单模式匹配\nint Index(SString S, SString T, int pos){\n    //返回  模式串T  在主串S中第pos个字符之后 的位置。如果不存在&amp;#xff0c;返回0\n    //T非空  1&amp;lt;&amp;#61;pos&amp;lt;&amp;#61;S.leng\n    int i&amp;#61;pos, j&amp;#61;1;\n    while(i&amp;lt;&amp;#61;S.leng &amp;amp;&amp;amp; j&amp;lt;&amp;#61;T.leng){\n        if(S.data[i]&amp;#61;&amp;#61;T.data[j]) {i&amp;#43;&amp;#43;;j&amp;#43;&amp;#43;;}\n        else{i &amp;#61; i-j&amp;#43;2; j&amp;#61;1;}\n    }\n    if(j&amp;gt;T.leng) return i-T.leng;\n    else return 0;\n}\n\n\n//KMP算法\nint Index_KMP(SString S, SString T, int pos, int next[]){\n    //T非空&amp;#xff0c;1&amp;lt;&amp;#61;pos&amp;lt;&amp;#61;S.leng\n    int i&amp;#61;pos,j&amp;#61;1;\n    while(i&amp;lt;&amp;#61;S.leng &amp;amp;&amp;amp; j&amp;lt;&amp;#61;T.leng)\n        if(j&amp;#61;&amp;#61;0||S.data[i]&amp;#61;&amp;#61;T.data[j]) {i&amp;#43;&amp;#43;;j&amp;#43;&amp;#43;;}\n        else j &amp;#61; next[j];\n    if(j&amp;gt;T.leng) return i-T.leng;\n    else return 0;\n}\n//next的计算方法\nvoid get_next(SString T, int next[]){\n    int i&amp;#61;1,j&amp;#61;0;\n    next[1]&amp;#61;0;\n    while(i&amp;lt;T.leng)\n        if(j&amp;#61;&amp;#61;0 || T.data[i]&amp;#61;&amp;#61;T.data[j]) {i&amp;#43;&amp;#43;;j&amp;#43;&amp;#43;;next[i]&amp;#61;j;}\n        else j &amp;#61; next[j];\n}\n//next的计算方法的修正\nvoid get_nextval(SString T, int *nextval){\n    int i&amp;#61;1,j&amp;#61;0;\n    nextval[1]&amp;#61;0;\n    while(i&amp;lt;T.leng)\n        if(j&amp;#61;&amp;#61;0 || T.data[i]&amp;#61;&amp;#61;T.data[j]) {\n            i&amp;#43;&amp;#43;;j&amp;#43;&amp;#43;;\n            if(T.data[i]!&amp;#61;T.data[j]) nextval[i]&amp;#61;j;\n            else nextval[i] &amp;#61; nextval[j];\n        }\n        else j &amp;#61; nextval[j];\n}\nint main(){\n    SString S,T;\n    InitSString(S,10);\n    InitSString(T,5);\n    printf(&amp;#34;Easy_Index:%d\\n&amp;#34;,Index(S,T,1));\n\n    int next[T.leng&amp;#43;1];\n    get_nextval(T,next);\n    printf(&amp;#34;KMP_next:%d\\n&amp;#34;,Index_KMP(S,T,1,next));\n\n    get_next(T,next);\n    printf(&amp;#34;KMP_nextval:%d\\n&amp;#34;,Index_KMP(S,T,1,next));\n\n    return 1;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;C语言描述简单模式匹配和KMP算法。&lt;/p&gt;\n\n&lt;p&gt;定长顺序存储SString串&amp;#xff1a;一个结构体中&amp;#xff1a;一个数组存储字符串&amp;#xff0c;一个整型存储长度&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["kmp函数代码填空 字符串匹配", ["\n", "#include <stdio.h>\n#include <malloc.h>\n#define N 100\n#include<string.h>\nint lengthStr(char str[])\n{\n    int i;\n    int len;\n    len = 0;\n    i = 0;\n    while (str[i] != '\\0')\n    {\n        i ++;\n    }\n    len = i;\n    return len;\n}\nint strMatchBF(char mainStr[], char subStr[])\n{\n    // 穷举法进行字符串匹配\n    // 返回子串subStr与主串mainStr相匹配的第一个位置\n    int  lenMS,lenSS;\n    int i,j;\n    int isOK;\n    lenMS = lengthStr(mainStr); // 计算主串的长度\n    lenSS = lengthStr(subStr); // 计算子串（模式串）的长度\n    i = 0;\n    isOK = 0;\n    while (i<lenMS){\n        isOK = 1;\n        for (j = 0; j < lenSS; ++j) {\n            if(subStr[j] != mainStr[i+j] )\n            {\n                isOK = 0;\n                break;\n            }\n        }\n        if (!isOK)\n            i++;\n        else\n            return i;     // 匹配成果，返回相匹配的第一个字符的位置\n    }\n    return -1;   // 匹配不成功，返回-1\n}\n\nvoid copyStrTo(char str[],char strcopy[],int startp,int endp)\n{\n    int i;\n    int j;\n    // 清空 strcopy 字符串\n    j = lengthStr(strcopy);\n    for (i = 0;i<j;i++){\n        strcopy[i] = '\\0';\n    }\n    if (startp > endp) return ;\n    for(i = startp,j=0;i<=endp;i++,j++){\n        strcopy[j] = str[i];\n    }\n}\n\nint isEqual(char s1[], char s2[])\n{\n    // 判断两个字符串是否相等\n    int len1,len2;\n    int i;\n    len1 = lengthStr(s1);\n    len2 = lengthStr(s2);\n    if (len1 != len2)\n    {\n        return 0;\n    }\n    for (i=0;i<len1;i++){\n        if (s1[i] != s2[i])\n            return 0;\n    }\n    return 1;\n}\nint computePrefixLen(char str[],int startp,int endp)\n{\n    // 计算字符串str的最大相等前缀后缀长度\n    char *s1, *s2;\n    int len;\n    int i;\n\n    if(startp == endp) return 0;\n    s1 = (char*)malloc(sizeof (char) * (endp - startp+1));\n    s2 = (char*)malloc(sizeof (char) * (endp - startp+1));\n\n    i = 1;\n    do {\n        copyStrTo(str,s1,startp,endp-i);\n        copyStrTo(str,s2,startp+i,endp);\n        if (isEqual(s1,s2))\n            return lengthStr(s1);\n        else\n            i = i+1;\n    } while (startp <= endp-i);\n    return 0;\n}\nvoid computeNext(char str[], int next[])\n{\n    // 计算字符串的next数组\n    int i,j;\n    int len;\n    int preLen;\n    len = lengthStr(str);\n    // 初始化 next 数组\n    for (i = 0; i < len; ++i) {\n        next[i] = -2;\n    }\n    // 将所有与 str[0] 相等的字符的位置设置为 -1\n    for (i = 0; i < len; ++i){\n        if (str[i] == str[0])\n            next[i] = -1;\n    }\n    // 对于 next[i]==-2的位置，计算匹配失败时，下一个需要匹配的位置，使用相等最大前缀和后缀\n    for (i = 0; i < len; ++i){\n        if (next[i] == -2){\n            preLen = computePrefixLen(str,0,i);  // 计算字符串str[0]-str[i]的最大相等前缀后缀长度\n            next[i] = preLen;\n        }\n    }\n\n}\nint strMatchKMP(char mainStr[], char subStr[])\n{\n    // KMP法进行字符串匹配\n    // 返回子串subStr与主串mainStr相匹配的第一个位置\n\n    int * next;\n    int lenSS,lenMS;\n    int i,j;\n    lenSS = lengthStr(subStr);\n    next = (int *)malloc(sizeof (int ) * lenSS);\n    computeNext(subStr,next);\n    lenMS = lengthStr(mainStr);\n    i = 0;\n    j = 0;\n    while (i<lenMS-lenSS+1){\n        while (j<lenSS)\n        {\n            if (mainStr[i] == subStr[j]){\n                i++;\n                j++;\n            } else{\n                j = next[j];\n                if (j == -1) {j = 0;i = i+1;}\n            }\n        }\n        return i-j;\n    }\n    return -1;\n}\nint searchAllMatchingStr(char mainS[],char subS[],int pos[])\n{\n   \n\n\n\n    // 编写代码来搜索主串 mainS 中所有与子串 subS 相匹配的位置，将每个匹配串的起始位置存入 pos中。\n    // 同时，返回主串 mainS 中与子串 subS相匹配的个数\n\n\n    return 0;\n}\nvoid fuzzyMatching(char mainS[], char subS[], int pos[])\n{\n    // 模糊匹配，搜索在主串 mainS 中，与子串 subS中，'*'符号前后两个字符串相匹配的位置，将与'*'符号前面字符串相匹配的\n    // 字符串的第一个位置存储 pos[0] 中，与'*'符号后面字符串相匹配的最后一个位置存储 pos[1]中。\n\n}\nint main() {\n    char mainS[30] = {'a','r','b','c','d','p','w','d','p','a','r','p','d','p','w','a','o','d','p','w','d','p','a','y'};\n    char subS[10] = {'d','p','w','d','p','a'};\n    char subS2[10] = {'p','a','*','p','a'};\n    int pos[10];\n    int matchLen;\n    matchLen = searchAllMatchingStr(mainS,subS,pos);\n    for (int i = 0; i < matchLen; ++i) {\n        printf(\"\\n matching is ok. the %d substring position is %d\",i,pos[i]);\n    }\n\n    fuzzyMatching(mainS,subS2,pos);\n    printf(\"\\n matching is ok. the start position is %d, and the last position is %d\",pos[0],pos[1]);\n\n    return 0;\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;初学者常犯错误  if(a&amp;#61;0)...&lt;br /&gt;这种写法并没有语法错误&amp;#xff08;正是因为如此&amp;#xff0c;所以更容易犯错&amp;#xff09;&amp;#xff0c;但是实际的作用和你想的可能完全不一样。不过不管怎么样&amp;#xff0c;那几个IO操作应该是不会被跳过的&amp;#xff0c;不知道你是怎么判断代码直接跳到return的。&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["关于Keil5中，函数不执行问题", ["最近在学51单片机，在矩阵键盘时，我想用穷举法扫描所有的矩阵键盘，然后用return返回，但是一直不成功，去调试函数的时候，发现都是跳过return语句，没有执行到。", "\n\n", "\n", "#include <REGX52.H>\n#include \"Delay1.h\"\n\nunsigned char MatrixKey()\n{\n\tunsigned char KeyNumber=0;\n\tP1=0xFF;\n\tP1_3=0;\n\tif(P1_7=0){Delay(20);while(P1_7=0);Delay(20);KeyNumber=1;} //扫描矩阵键盘\n\tif(P1_6=0){Delay(20);while(P1_6=0);Delay(20);KeyNumber=5;}\n\tif(P1_5=0){Delay(20);while(P1_5=0);Delay(20);KeyNumber=9;}\n\tif(P1_4=0){Delay(20);while(P1_4=0);Delay(20);KeyNumber=13;}\n\t\n\tP1=0xFF;\n\tP1_2=0;\n\tif(P1_7=0){Delay(20);while(P1_7=0);Delay(20);KeyNumber=2;}\n\tif(P1_6=0){Delay(20);while(P1_6=0);Delay(20);KeyNumber=6;}\n\tif(P1_5=0){Delay(20);while(P1_5=0);Delay(20);KeyNumber=10;}\n\tif(P1_4=0){Delay(20);while(P1_4=0);Delay(20);KeyNumber=14;}\n\t\n\tP1=0xFF;\n\tP1_1=0;\n\tif(P1_7=0){Delay(20);while(P1_7=0);Delay(20);KeyNumber=3;}\n\tif(P1_6=0){Delay(20);while(P1_6=0);Delay(20);KeyNumber=7;}\n\tif(P1_5=0){Delay(20);while(P1_5=0);Delay(20);KeyNumber=11;}\n\tif(P1_4=0){Delay(20);while(P1_4=0);Delay(20);KeyNumber=15;}\n\t\n\tP1=0xFF;\n\tP1_0=0;\n\tif(P1_7=0){Delay(20);while(P1_7=0);Delay(20);KeyNumber=4;}\n\tif(P1_6=0){Delay(20);while(P1_6=0);Delay(20);KeyNumber=8;}\n\tif(P1_5=0){Delay(20);while(P1_5=0);Delay(20);KeyNumber=12;}\n\tif(P1_4=0){Delay(20);while(P1_4=0);Delay(20);KeyNumber=16;}\n\t\n\treturn KeyNumber;\n}\n\n\n#include <REGX52.H>// 这下面是主函数\n\n#include \"Delay1.h\"\n#include \"LCD1602.h\"\n#include \"MatrixKey.h\"\n\nunsigned char KeyNum;\n\nvoid main()\n{\n\tLCD_Init();\n\tLCD_ShowString(2,1,\"CHINA\");\n\twhile(1)\n\t{\n\t\tKeyNum=MatrixKey();\n\t\tif(KeyNum!=0)\n\t\t{\n\t\t\tLCD_ShowNum(1,1,KeyNum,2);\n\t\t}\n\t}\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;发完整代码出来看看&amp;#xff0c;现在代码不完整&amp;#xff0c;看不到问题。&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["语法错误说:种类前少一个分号,但是我觉得我并没有错", ["VC++ 6.0 C语言问题", "报错语法错误，说我种类前少一个分号，但是我看报错的那一行并没有错呀，该定义的都在最开始的地方定义了，唯一需要分号的就是在结尾，但是结尾我已经打了呀，其他地方好像并没有需要封号的地方。", "以下是代码:", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<string.h>", " ", "\n", "#", "include", "<stdlib.h>", "\n", "struct", " ", "canhui", "//定义结构体", "\n    {\n        ", "char", " name[", "40", "];\n        ", "char", " tel[", "11", "];\n        ", "char", " id[", "18", "];\n        ", "char", " unit[", "60", "];\n        ", "char", " room[", "6", "];\n    }huiyuan;\n\n", "int", " ", "MENU", "()", "//第6组总领菜单，包含3大题", "\n", "{\n    ", "printf", "(", "\"**************************************************\\n\"", ");\n    ", "printf", "(", "\"          《第6组    参会人员管理系统》            \\n\"", ");\n    ", "printf", "(", "\"                                                  \\n\"", ");\n    ", "printf", "(", "\"                1.勾股数                          \\n\"", ");\n    ", "printf", "(", "\"                2.大赛现场统分                    \\n\"", ");\n    ", "printf", "(", "\"                3.参会人员管理系统                \\n\"", ");", "//4.看书上的班级管理系统3.0以及相关知识点", "\n    ", "printf", "(", "\"                4.退出                            \\n\"", ");\n    ", "printf", "(", "\"                                                  \\n\"", ");\n    ", "printf", "(", "\"           请选择对应序号查看相应问题求解         \\n\"", ");\n    ", "printf", "(", "\"**************************************************\\n\"", ");\n    ", "printf", "(", "\"                                                  \\n\"", ");\n    }\n\n\n\n", "void", " ", "gougushu", "(", "int", " a,", "int", " b)", "//给定区间，三循环穷举求勾股数", "\n", "{\n    ", "int", " x,y,z;\n    ", "for", "(x=a;x<=b;x++)\n        ", "for", "(y=a;y<=b;y++)\n            ", "for", "(z=a;z<=b;z++)\n            {\n                ", "if", "(x*x+y*y==z*z&&x<=y&&x<z&&y<z)\n                    ", "printf", "(", "\"%d*%d+%d*%d=%d*%d\\n\"", ",x,x,y,y,z,z);\n            }\n}\n\n\n", "void", " ", "daoli_gougushu", "(", "int", " a,", "int", " b)", "//给定区间，三循环穷举求勾股数", "\n", "{\n    ", "int", " x,y,z;\n    ", "for", "(z=a;z<=b;z++)\n        ", "for", "(y=a;y<=b;y++)\n            ", "for", "(x=a;x<=b;x++)\n            {\n                ", "if", "((x*x+y*y)*z*z==x*x*y*y&&x>y&&y>z&&x>z)\n                    ", "printf", "(", "\"1/(%d*%d)+1/(%d*%d)=1/(%d*%d)\\n\"", ",x,x,y,y,z,z);\n            }\n}\n\n\n\n", "int", " max,min;\n", "int", " max2[", "20", "],min2[", "20", "];\n", "void", " ", "max_min", "(", "int", " a[", "20", "][", "20", "],", "int", " p,", "int", " q)", "//求二维数组每一行的最大值和最小值，并分别存入最大值数组和最小值数组", "\n", "{\n    ", "int", " i,j;\n    ", "for", "(j=", "0", ";j<p;j++)\n    {", "for", "(i=", "0", ";i<q;i++)\n        {\n            ", "if", "(a[j][i]>max)\n                max=a[j][i];\n            ", "if", "(a[j][i]<min)\n                min=a[j][i];\n            max2[j]=max;\n            min2[j]=min;\n        }\n    }\n}\n\n\n\n\n\n\n", "void", " ", "menu", "()", "//第三题的菜单", "\n", "{\n    ", "printf", "(", "\"*******************************************************\\n\"", ");\n    ", "printf", "(", "\"                    《参会人员管理系统》               \\n\"", ");\n    ", "printf", "(", "\"                                                       \\n\"", ");\n    ", "printf", "(", "\"                1.查找某个参会人员的房间号             \\n\"", ");\n    ", "printf", "(", "\"                2.修改某个参会人员的房间号             \\n\"", ");\n    ", "printf", "(", "\"                3.删除某个参会人员的相关信息           \\n\"", ");\n    ", "printf", "(", "\"                4.插入某个参会人员的相关信息           \\n\"", ");\n    ", "printf", "(", "\"                5.统计某指定单位的参会人员人数         \\n\"", ");\n    ", "printf", "(", "\"                6.退出                                 \\n\"", ");\n    ", "printf", "(", "\"                                                       \\n\"", ");\n    ", "printf", "(", "\"*******************************************************\\n\"", ");\n    ", "printf", "(", "\"                                                  \\n\"", ");\n    }\n\n\n", "void", " ", "searchByID", "(", "struct", " canhui huiyuan[", "20", "],", "int", " m)", "//对应第三题的第2问，查找房间号", "\n", "{\n    \n    ", "char", " ID[", "20", "];\n    ", "int", " i;\n    ", "int", " counter=", "0", ";\n    ", "scanf", "(", "\"%s\"", ",&ID);\n    ", "if", "(m!=", "0", ")\n    {\n        ", "printf", "(", "\"请输入要查询会员的身份证号码\"", ");\n        ", "scanf", "(", "\"%s\"", ",&ID);\n        ", "printf", "(", "\"姓名    电话     单位     房间号\\n\"", ");\n        ", "for", "(i=", "0", ";i<m;i++)\n        {\n            ", "if", "(", "strcmp", "(huiyuan[i].id,ID)==", "0", ")\n            {   \n                ", "//判断名字是否相同，相同则输出人员信息", "\n                ", "printf", "(", "\"%s\\t\"", ",huiyuan[i].name);\n                ", "printf", "(", "\"%s\\t\"", ",huiyuan[i].tel);\n                ", "printf", "(", "\"%s\\t\"", ",huiyuan[i].unit);\n                ", "printf", "(", "\"%s\\t\"", ",huiyuan[i].room);\n                ", "printf", "(", "\"\\n\"", ");\n                counter++;\n            }\n   \n        }\n    ", "if", "(counter==", "0", ") ", "//查找的人还没参会", "\n    ", "printf", "(", "\"\\n%s 这个人没有参会！\\n\"", ",ID);\n  \n    }\n ", "else", "\n  ", "printf", "(", "\"无人参会\\n\"", "); \n}\n\n\n", "void", " ", "edit", "(", "struct", " canhui huiyuan[],", "int", " m)", "//对应第三题的第3问，修改信息", "\n", "{\n    ", "char", " room_num[", "10", "];\n    ", "int", " i,k;\n    ", "if", "(m!=", "0", ")\n    {\n        ", "printf", "(", "\"输入要修改参会人员的房间号:\"", ");\n        ", "scanf", "(", "\"%s\"", ",&room_num);\n        ", "for", "(i=", "0", ";i<m;i++)\n        {\n            ", "if", "(", "strcmp", "(huiyuan[i].room,room_num)==", "0", ")\n                {\n                    ", "printf", "(", "\"请选择你的房间号:\"", ");\n                    ", "scanf", "(", "\"%s\"", ",&room_num);\n                    ", "for", "(k=", "0", ";k<m;k++)\n                        {   \n                            ", "if", "(k==i) ", "continue", "; ", "//可以选择原来的房间", "\n            ", "if", "(", "strcmp", "(room_num,huiyuan[k].room)==", "0", ")", "//申请的房间已经有人", "\n                                {   \n                                    ", "printf", "(", "\"你选择的房间已满，请选择其他房间\\n\"", ");\n                                    ", "printf", "(", "\"请重新选择你的房间号:\"", ");\n                                    ", "scanf", "(", "\"%s\"", ",&room_num); ", "//提示选择别的空房间", "\n                                    k=", "-1", "; ", "//为检验新的房间是否为空作准备", "\n                                }\n                        }\n                }\n        }\n    }\n}\n\n\n", "int", " ", "Delete", "(", "struct", " canhui huiyuan[],", "int", " m)", "//对应第三题第4问，删除数据", "\n", "{\n    ", "int", " i,k;\n    ", "int", " counter=m;\n    ", "char", " room_num[", "10", "];\n    ", "if", "(m!=", "0", ")\n    {\n        ", "printf", "(", "\"请你选择要删除参会人员房间的号码:\"", ");\n        ", "scanf", "(", "\"%s\"", ",&room_num);\n        ", "for", "(i=", "0", ";i<m;i++)\n        {\n            ", "if", "(", "strcmp", "(huiyuan[i].room,room_num)==", "0", ")", "//删除人员", "\n                {   \n                    ", "for", "(k=i;k<m", "-1", ";k++)\n                    huiyuan[k]=huiyuan[k+", "1", "]; ", "//把该人员的信息覆盖掉", "\n                    ", "printf", "(", "\"删除成功！！！\"", ");\n                    m--;   \n                }\n        }\n        ", "if", "(counter==", "0", ") \n        ", "printf", "(", "\"你要删除的人还没有参会！\\n\"", "); \n    }\n    ", "else", "\n    ", "printf", "(", "\"没有人员参会！\\n\"", ");\n    ", "return", " m;\n}\n\n", "int", " ", "tongji", "(", "struct", " canhui huiyuan[],", "int", " m)", "\n", "{\n    ", "int", " i;\n    ", "int", " counter=", "0", ";\n    ", "char", " uname[", "20", "];\n    ", "scanf", "(", "\"%s\"", ",&uname);\n    ", "if", "(m!=", "0", ")\n    {\n        ", "printf", "(", "\"请输入要统计的单位名称\"", ");\n        ", "scanf", "(", "\"%s\"", ",&uname);\n        ", "for", "(i=", "0", ";i<m;i++)\n        {\n            ", "if", "(", "strcmp", "(huiyuan[i].unit,uname)==", "0", ")", "//判断名字是否相同，相同则输出人员信息", "\n                counter++;\n   \n        }\n    ", "printf", "(", "\"\\n%d人\\n\"", ",counter);\n    }\n ", "else", "\n  ", "printf", "(", "\"无人参会\\n\"", "); \n}\n\n\n", "int", " ", "main", "()", "//主函数", "\n", "{\n    ", "int", " m;\n    ", "int", " sum=", "0", ";\n    ", "int", " ti_hao;\n    ", "int", " a,b,x,y,z;\n    ", "int", " n,i,j,pinfen[", "20", "][", "20", "],zuizhongfen[", "20", "],t,xuanshou_biaohao[", "20", "],d,e;\n    ", "int", " xuhao,counter,ID[", "20", "];\n\n    ", "struct", " ", "canhui", " huiyuan[", "40", "];\n    ", "char", " xuanshou_bianhao[", "20", "];\n    ", "printf", "(", "\"               欢迎来到第6组题目                  \\n\"", ");\n    \n    ", "while", "(", "1", ")\n    {\n    ", "MENU", "();", "//第6组总领菜单，包含3大题", "\n    ", "scanf", "(", "\"%d\"", ",&ti_hao);", "//输入题号查看相应问题求解", "\n    ", "switch", "(ti_hao)\n    {\n        ", "case", " ", "1", ":", "printf", "(", "\"\\n你选择了问题 一\\n\"", ");\n               biaohao1:", "//做标记，方便goto跳转", "\n               ", "printf", "(", "\"(1)输入区间【a,b】可求出该范围内所有勾股数组 \\n\"", ");\n               ", "printf", "(", "\"请输入a=\"", ");\n               ", "scanf", "(", "\"%d\"", ",&a);\n               ", "printf", "(", "\"请输入b=\"", ");\n               ", "scanf", "(", "\"%d\"", ",&b);\n               ", "if", "(a>=b)", "//输入的区间需符合要求", "\n               {\n                    ", "printf", "(", "\"\\n区间输入错误，请重新输入!\\n\"", ");\n                    ", "goto", " biaohao1;\n               }\n               ", "gougushu", "(a,b);", "//用于寻找勾股数的函数", "\n               ", "printf", "(", "\"第一问第1小题求解完成！\\n\"", ");\n               ", "//1.做一个判定，若无输出，则输出无结果2.若输入小数，负数如何反映，反正考虑输入情况！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！", "\n               biaohao2:", "//做标记，方便goto跳转", "\n               ", "printf", "(", "\"\\n(2)输入区间【a,b】可求出该范围内所有的倒立勾股数组\\n\"", ");\n               ", "printf", "(", "\"请输入a=\"", ");\n               ", "scanf", "(", "\"%d\"", ",&a);\n               ", "printf", "(", "\"请输入b=\"", ");\n               ", "scanf", "(", "\"%d\"", ",&b);\n               ", "if", "(a>=b)", "//输入的区间需符合要求", "\n               {\n                    ", "printf", "(", "\"\\n区间输入错误，请重新输入!\\n\"", ");\n                    ", "goto", " biaohao2;\n               }\n               ", "daoli_gougushu", "(a,b);", "//用于寻找倒立勾股数的函数", "\n               ", "printf", "(", "\"第一问第2小题求解完成！\\n\"", ");\n               ", "break", ";", "//3.完成后反应？", "\n        ", "case", " ", "2", ":", "printf", "(", "\"\\n你选择了问题 二\\n\"", ");\n               ", "//5.过程操作可视化", "\n               ", "printf", "(", "\"某大奖赛有n个选手参赛，m(m>2)个评委为依次参赛的选手评判打分：最高10分，最低0分。\\n\"", ");\n               ", "printf", "(", "\"统分规则：每个选手所得m个评分中，去掉一个最高分和一个最低分，然后将计算的平均值作为最后得分。\\n\"", ");\n               ", "printf", "(", "\"根据n个选手的最后得分，从高到低排出名次，以便确定获奖名单。\\n\"", ");\n               ", "printf", "(", "\"\\n\"", ");\n               ", "printf", "(", "\"请确定参赛选手人数n和评委人数m\\n\"", ");\n               ", "printf", "(", "\"选手人数n=\"", ");\n               ", "scanf", "(", "\"%d\"", ",&n);\n               ", "printf", "(", "\"评委人数m=\"", ");\n               ", "scanf", "(", "\"%d\"", ",&m);\n               ", "for", "(i=", "0", ";i<=n", "-1", ";i++)\n                   xuanshou_bianhao[i]=", "65", "+i;\n               ", "printf", "(", "\"\\n%d名参赛选手依次编号为：A\"", ",n);\n               ", "for", "(a=", "66", ";a<=", "64", "+n;a++)\n                   ", "printf", "(", "\",%c\"", ",a);\n               ", "printf", "(", "\"\\n\"", ");\n               ", "printf", "(", "\"\\n请依次输入参赛选手的评委打分\\n\"", ");\n               ", "for", "(i=", "0", ";i<=n", "-1", ";i++)\n               {\n                    ", "printf", "(", "\"第%d个选手评分：\"", ",i+", "1", ");\n                    ", "for", "(j=", "0", ";j<=m", "-1", ";j++)\n                        ", "scanf", "(", "\"%d\"", ",&pinfen[i][j]);\n               }", "//8.scanf无法同tab结束输入", "\n               ", "printf", "(", "\"\\n输入数据如下：\\n\"", ");\n               ", "for", "(i=", "0", ";i<=n", "-1", ";i++)\n               {\n                    ", "printf", "(", "\"第%d个选手评分    \"", ",i+", "1", ");\n                    ", "for", "(j=", "0", ";j<=m", "-1", ";j++)\n                        ", "printf", "(", "\"%-5d\"", ",pinfen[i][j]);", "//i选手j", "\n                    ", "printf", "(", "\"\\n\"", ");\n               }", "//9.输入结果可视化？", "\n               ", "for", "(i=", "0", ";i<n;i++)\n               {", "for", "(j=", "0", ";j<m;j++)\n                       sum=pinfen[i][j]+sum;\n                zuizhongfen[i]=sum;\n                sum=", "0", ";}\n\n                ", "max_min", "(pinfen,n,m);\n\n                ", "for", "(i=", "0", ";i<n;i++)\n                    zuizhongfen[i]=(zuizhongfen[i]-max2[i]-min2[i])/(m", "-2", ");\n\n                ", "for", "(i=", "0", ";i<n;i++)\n                    ", "for", "(j=", "0", ";j<n-i;j++)\n                    {\n                        ", "if", "(zuizhongfen[j]>zuizhongfen[j+", "1", "])\n                        {\n                            e=zuizhongfen[j+", "1", "];\n                            zuizhongfen[j+", "1", "]=zuizhongfen[j];\n                            zuizhongfen[j]=e;\n\n                            d=xuanshou_biaohao[j+", "1", "];\n                            xuanshou_biaohao[j+", "1", "]=xuanshou_biaohao[j];\n                            xuanshou_biaohao[j]=d;\n                        }\n                    }\n                ", "printf", "(", "\"结果如下\\n\"", ");\n                ", "for", "(i=", "0", ";i<n;i++)\n                    ", "printf", "(", "\"%c%d\\t\"", ",xuanshou_biaohao[i],zuizhongfen[i]);\n               ", "break", ";\n        ", "case", " ", "3", ":", "while", "(", "1", ")\n               {\n                    ", "printf", "(", "\"你选择了题目 3\\n\"", ");\n                    ", "printf", "(", "\"请输入参会人员人数：\"", ");\n                    ", "scanf", "(", "\"%d\"", ",&m);", "//参会人数", "\n                    ", "printf", "(", "\"请依次输入参会人员信息:\\n\"", ");\n                    ", "for", "(i=", "0", ";i<m;i++)\n                    {\n                        ", "printf", "(", "\"姓名：\"", ");\n                            ", "scanf", "(", "\"%s\"", ",&huiyuan[i].name);\n                        ", "printf", "(", "\"电话：\"", ");\n                            ", "scanf", "(", "\"%s\"", ",&huiyuan[i].tel);\n                        ", "printf", "(", "\"身份证号码：\"", ");\n                            ", "scanf", "(", "\"%s\"", ",&huiyuan[i].id);\n                        ", "printf", "(", "\"单位：\"", ");\n                            ", "scanf", "(", "\"%s\"", ",&huiyuan[i].unit);\n                        ", "printf", "(", "\"房间号：\"", ");\n                            ", "scanf", "(", "\"%s\"", ",&huiyuan[i].room);\n                    }\n                    ", "menu", "();\n                    ", "scanf", "(", "\"%d\"", ",&xuhao);\n                    ", "switch", "(xuhao)\n                    {\n                    ", "case", " ", "1", ":", "void", " ", "searchByID", "(", "struct", " canhui huiyuan[", "20", "],m)", ";\n                           ", "break", ";\n                    ", "case", " ", "2", ":", "edit", "(huiyuan,m);", "break", ";\n                    ", "case", " ", "3", ":m=", "Delete", "(huiyuan,m);", "break", ";\n                    ", "case", " ", "4", ":", "for", "(m=", "0", ";huiyuan[m].name!=", "0", ";m++);\n                           ", "printf", "(", "\"请输入相关信息\"", ");\n                           ", "scanf", "(", "\"%s\"", ",&huiyuan[m+", "1", "].name);\n                           ", "scanf", "(", "\"%s\"", ",&huiyuan[m+", "1", "].tel);\n                           ", "scanf", "(", "\"%s\"", ",&huiyuan[m+", "1", "].id);\n                           ", "scanf", "(", "\"%s\"", ",&huiyuan[m+", "1", "].unit);\n                           ", "scanf", "(", "\"%s\"", ",&huiyuan[m+", "1", "].room);\n                           ", "break", ";\n                    ", "case", " ", "5", ":", "tongji", "(huiyuan,m);\n                           ", "break", ";\n                    ", "case", " ", "6", ":", "exit", " (", "0", ");", "break", ";\n                }\n               ", "break", ";\n        ", "case", " ", "4", ":", "exit", "(", "0", ");", "break", ";\n        ", "default", ":", "printf", "(", "\"错误！\"", ");", "//6.循环输入或选择？", "\n                ", "//7.输入出错如何反映", "\n                ", "break", ";\n    }\n    }\n}\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "下面这句话引起的，你以400的线粗画了个矩形，但是没有fill. 中间就是黑的类，bitmap尺寸小的时候，线把所有bitmap的地方都占据了，所以没有问题\r\ng.DrawRectangle(new Pen(Color.White, 400), 0, 0, img.Width, img.Height); //矩形 底色\r\n\r\n要填充底色用下面的语句\r\ng.FillRectangle(new SolidBrush(Color.White), 0, 0, img.Width, img.Height);", "Konwledge_Point": "智能穷举搜索", "Question": ["C#画图：用C#画图的时候遇到了问题", [" using System;\nusing System.Data;\nusing System.Configuration;\nusing System.Collections;\nusing System.Web;\nusing System.Web.Security;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\nusing System.Web.UI.HtmlControls;\nusing System.Text;\nusing System.Drawing;\nusing System.Text.RegularExpressions;\nusing System.Reflection;\nusing System.Collections.Generic;\nusing Tools;\nusing DBAPI;\nusing Functions;\nusing System.Web.Script.Serialization;\nusing System.IO;//文件存取\nusing System.Drawing;//画图基本功能\nusing System.Drawing.Drawing2D;//二维画图\nusing System.Drawing.Imaging;//高级功能\n\npublic partial class V2_NodeState_AirCleaner2_Chart2 : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        Bitmap img = new Bitmap(400, 200);//创建Bitmap对象\n        MemoryStream stream = draw();\n\n        img.Save(stream, ImageFormat.Jpeg);          //保存绘制的图片\n        Response.Clear();\n        Response.ContentType = \"image/jpeg\";\n        Response.BinaryWrite(stream.ToArray());\n    }\n    public MemoryStream draw()\n    {\n        Bitmap img = new Bitmap(400, 200);//创建Bitmap对象\n        Graphics g = Graphics.FromImage(img);//创建Graphics对象\n\n        Pen Bp = new Pen(Color.Black); //定义黑色画笔\n        Pen Rp = new Pen(Color.Red);//红色画笔\n        Pen Sp = new Pen(Color.Blue);//蓝色\n        SolidBrush redBrush = new SolidBrush(Color.Red);\n        AdjustableArrowCap aac;  //定义箭头帽\n\n        aac = new System.Drawing.Drawing2D.AdjustableArrowCap(4, 4);\n        Sp.CustomStartCap = aac;  //开始端箭头帽\n        //Sp.CustomEndCap = aac;\n\n        Font Bfont = new Font(\"Arial\", 12, FontStyle.Bold);//大标题字体\n        Font font = new Font(\"Arial\", 6);//一般字\n        Font Tfont = new Font(\"Arial\", 9);//较大字体\n\n        float w = 1.5F;\n        float h = 1.5F;\n        g.DrawRectangle(new Pen(Color.White, 400), 0, 0, img.Width, img.Height); //矩形 底色\n\n\n        //黑色过度型笔刷\n        LinearGradientBrush brush = new LinearGradientBrush(new Rectangle(0, 0, img.Width, img.Height), Color.Black, Color.Black, 1.2F, true);\n\n\n        //蓝色过度型笔刷\n        LinearGradientBrush Bluebrush = new LinearGradientBrush(new Rectangle(0, 0, img.Width, img.Height), Color.Blue, Color.Blue, 1.2F, true);\n\n        //g.DrawString(\"我的实验\",Bfont,brush,40,5); //绘制大标题\n\n        g.DrawRectangle(Bp, 0, 0, img.Width - 100, img.Height - 40); //绘制矩形与上面的矩形即是边框\n\n        //原点坐标（150,90），一个单位坐标=8px\n        g.DrawLine(Sp, 150, 10, 150, 150);//纵坐标\n        g.DrawLine(Sp, 300, 90, 20, 90);//横坐标\n\n\n        g.DrawString(\"5\", font, brush, 188, 91); //横坐标数字\n        g.DrawString(\"10\", font, brush, 226, 91);\n        g.DrawString(\"15\", font, brush, 266, 91);\n\n        //g.DrawString(\"0.5\", font, brush, 135, 86); //纵坐标数字\n        g.DrawString(\"1\", font, brush, 135, 78);\n        //g.DrawString(\"1.5\", font, brush, 135, 78);\n        g.DrawString(\"2\", font, brush, 135, 70);\n        g.DrawString(\"3\", font, brush, 135, 62);\n\n        g.DrawLine(Bp, 190, 85, 190, 90); //横坐标刻度线\n        g.DrawLine(Bp, 230, 85, 230, 90);\n        g.DrawLine(Bp, 270, 85, 270, 90);\n\n        g.DrawLine(Bp, 155, 82, 150, 82);//纵坐标刻度线\n        g.DrawLine(Bp, 155, 74, 150, 74);\n        g.DrawLine(Bp, 155, 66, 150, 66);\n\n        //画函数曲线   这样以   y=x^2  为例   用穷举函数曲线中的两点画曲线\n        //画0-2中的点，步长为0.1\n        for (double i = 0; i <= 2; )\n        {\n            double Write11 = (150 + 8 * i);\n            double Write12 = 90 - 8 * (Math.Pow(i, 2));\n\n            double Write21 = (150 + 8 * (i + 0.1));\n            double Write22 = 90 - 8 * (Math.Pow(i + 0.1, 2));\n\n            g.DrawLine(Bp, (float)Write11, (float)Write12, (float)Write21, (float)Write22);\n            //img.SetPixel((int)Write11, (int)Write12, Color.Red);\n            g.FillEllipse(redBrush,(float)Write11,(float)Write12, w, h);\n\n\n            i = i + 0.1;\n        }\n\n        for (double i = -2; i <= 0; )\n        {\n            double Write11 = (150 + 8 * i);\n            double Write12 = 90 - 8 * (Math.Pow(i, 2));\n\n            double Write21 = (150 + 8 * (i + 0.1));\n            double Write22 = 90 - 8 * (Math.Pow(i + 0.1, 2));\n\n            g.DrawLine(Bp, (float)Write11, (float)Write12, (float)Write21, (float)Write22);\n            i = i + 0.1;\n        }\n\n        MemoryStream stream = new MemoryStream();   //保存绘制的图片\n        img.Save(stream, ImageFormat.Jpeg);          //保存绘制的图片\n        return stream;\n    }\n\n}\n\n Bitmap img = new Bitmap(1000, 500);//创建Bitmap对象\n将new Bitmap(400, 200)中的值修改为（1000，500）就会在图片中出现一个黑色的矩形框\n而且经过尝试，发现只要改大，就会出现黑色的框，同时这个框也会随着修改的值而变。\n", "\n\n", "如下图所示："]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;已回答&amp;#xff0c;莫辜负&lt;br /&gt;————————————————————————————————————————&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;大括号不配对&amp;#xff1a;在第6行和第12行之间&amp;#xff0c;大括号没有配对。这会导致编译错误。&lt;/li&gt;&lt;li&gt;输出错误&amp;#xff1a;在第20行&amp;#xff0c;缺少一个大括号&amp;#xff0c;导致“Count”只会输出一次。&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;改了一下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main() {\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, i, j, k, a, b, z;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; j&amp;#43;&amp;#43;) {\n            a &amp;#61; j * &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; k &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; k&amp;#43;&amp;#43;) {\n                b &amp;#61; k * &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;#43; a &amp;#43; b &amp;#61;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; &amp;amp;&amp;amp; i &amp;#43; j &amp;#43; k &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;) {\n                    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;fen1:%d张 fen2:%d张 fen3:%d张\\n&amp;#34;&lt;/span&gt;, i, j, k);\n                    &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;&amp;#43;&amp;#43;;\n                }\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Count&amp;#61;%d(%d元有%d种支付方式)&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["关于#c语言#的问题：为什么运行起来输出的值是0", ["为什么运行起来输出的值是0？", "\n", "取1元、2元和5元的纸币共10张，现要支付15元。编写程序输出所有的付法。针对每一种付法，输出各种面额的纸币数量。要求将1元、2元和5元设置在最合理的取值范围内。\n提示：利用穷举的法来求解该问题。\n", "\n", "#include <stdio.h>", "\n\nint main() {\n    int x, y = ", "0", ", i, ", "j, ", "k, a, ", "b, ", "z;\n    ", "scanf(\"%d\", ", "&x);\n    for (i = ", "0", "; i <= 10; i++) {", "\n        for (", "j ", "= ", "0", "; j <= 10; j++)", "\n            a = ", "j ", "* ", "2", ";\n        {\n            for (k = ", "0", "; k <= 10; k++) {", "\n                ", "b ", "= k * ", "5", ";\n                if ( i + a + ", "b ", "== x && i + ", "j ", "+ ", "b ", "== ", "10", ") {\n                    printf(", "\"fen1:%d张 fen2:%d张 fen3:%d张\\n\"", ", i, ", "j, ", "k);\n                    y++;\n                }\n            }\n        }\n        printf(", "\"Count=%d(%d元有%d种支付方式)\"", ", y, x, y);\n        return ", "0", ";\n    }\n\n}\n    }\n\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;设置一个变量&amp;#xff0c;保存最优解&amp;#xff0c;在得到解的过程中设置判断&amp;#xff0c; 一旦比最优解更差&amp;#xff0c;则停止计算&amp;#xff0c;继续下一组&amp;#xff0c;如果计算出比之前的解更优&amp;#xff0c;则把最优解改成当前的解&amp;#xff0c;然后继续循环&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["穷举法最优解的比较方式", ["穷举法的最优解的得到方式", "我是采用生成可能所得结果的全排列并存储。最终调用再一个一个比较。", "如何修改成在得到排列的过程中比较，即生成一个解就与前一个比较，直至到最终求得最优解。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main() {\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; m,n,i,j,k,s;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;m,&amp;amp;n);\n    s&amp;#61;n-m; \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;s;i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;做对&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;题的人有i个 \n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&amp;#61;&lt;span class=\"hljs-regexp\"&gt;s/2;j&amp;#43;&amp;#43;){//&lt;/span&gt;做对&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;题的人有j个 \n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&amp;#61;&lt;span class=\"hljs-regexp\"&gt;s/3;k&amp;#43;&amp;#43;){//&lt;/span&gt;做对&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;题的人有k个 \n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;#43;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*j&amp;#43;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;*k&amp;#61;&amp;#61;s){\n                    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d\\n&amp;#34;&lt;/span&gt;,i,j,k);\n                }    \n            }    \n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;br /&gt;\n\n&lt;p&gt;觉得有用的话&lt;font color=\"red\"&gt;&lt;strong&gt;采纳&lt;/strong&gt;&lt;/font&gt;一下哈&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["穷举算法问题，求助大佬", ["计算导论与程序设计某次上机考试共出了4道题，其中每名同学都至少做对了一道题。根据已知条件求做对了2、3、4题的可能的人数。。", "输入格式:", "只有一行，为两个用空格分隔的正整数m和n，分别代表参加考试的总人数和总的解题数。", "输出格式:", "有若干行，每一行为一组解，格式均为用空格分隔的三个整数，依次代表解2题的人数，解3题的人数和解4题的人数。多组解的输出顺序按解2题人数由小到大排序，如果解2题的人数相同则按解3题的人数由小到大排序。所有测试数据保证可以用int存储。", "输入样例:", "15 20", "输出样例:", "0 1 1", "1 2 0", "2 0 1", "3 1 0", "5 0 0"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1.题目说的很明白。就是汉字和数字游戏&amp;#xff0c;先说一下人怎么思考&amp;#xff1a;&lt;/p&gt;\n\n&lt;p&gt;       范邓韩王&lt;/p&gt;\n\n&lt;p&gt;&lt;u&gt;&amp;#43;   &lt;/u&gt;&lt;u&gt; 范邓李王 &lt;/u&gt;&lt;/p&gt;\n\n&lt;p&gt;  李王韩范王&lt;/p&gt;\n\n&lt;p&gt;比如两个加数个位是王&amp;#43;王&amp;#xff0c;最终的和个位也还是王&amp;#xff0c;那说明王是0,因为只有0&amp;#43;0才等于0&lt;/p&gt;\n\n&lt;p&gt;       范邓韩0&lt;/p&gt;\n\n&lt;p&gt;&lt;u&gt;&amp;#43;   &lt;/u&gt;&lt;u&gt; 范邓李0 &lt;/u&gt;&lt;/p&gt;\n\n&lt;p&gt;   李0韩范0&lt;/p&gt;\n\n&lt;p&gt;题目就变成这样了。&lt;/p&gt;\n\n&lt;p&gt;比如李是进了一位&amp;#xff0c;两个数相加只可能进1&amp;#xff0c;所以李是1&lt;/p&gt;\n\n&lt;p&gt;       范邓韩0&lt;/p&gt;\n\n&lt;p&gt;&lt;u&gt;&amp;#43;   &lt;/u&gt;&lt;u&gt; 范邓1  0 &lt;/u&gt;&lt;/p&gt;\n\n&lt;p&gt;      10韩范0&lt;/p&gt;\n\n&lt;p&gt;千位&amp;#xff1a;范&amp;#43;范&amp;#61; 10&amp;#xff0c;可以退出范为5&amp;#xff0c;因为如果百位有进位的话&amp;#xff0c;两个相同的数结果为偶数加上进位不可能是10所以百位没有进位&amp;#xff0c;百位没有进位的话&amp;#xff0c;千位两个一样的数相加为10就只能是5&amp;#43;5&lt;/p&gt;\n\n&lt;p&gt;       5邓韩0&lt;/p&gt;\n\n&lt;p&gt;&lt;u&gt;&amp;#43;   &lt;/u&gt;&lt;u&gt; 5邓1 0 &lt;/u&gt;&lt;/p&gt;\n\n&lt;p&gt;     10韩50&lt;/p&gt;\n\n&lt;p&gt;十位&amp;#xff0c;韩&amp;#43;1&amp;#61;5所以韩是4,  邓&amp;#43;邓&amp;#61;韩&amp;#xff0c;韩是4&amp;#xff0c;邓是2&lt;/p&gt;\n\n&lt;p&gt;       5240&lt;/p&gt;\n\n&lt;p&gt;&lt;u&gt;&amp;#43;   &lt;/u&gt;&lt;u&gt; 521 0 &lt;/u&gt;&lt;/p&gt;\n\n&lt;p&gt;     10450&lt;/p&gt;\n\n&lt;p&gt;2.编程解决的话&amp;#xff0c;最简单的就是多级循环。用穷举的办法试出结果。&lt;/p&gt;\n\n&lt;p&gt;邓、王、范、韩、李分别从0-9循环&amp;#xff0c;&lt;/p&gt;\n\n&lt;p&gt;当这五个数都不相等&amp;#xff0c;并且 &amp;#xff08;1000*范&amp;#43;100*邓&amp;#43;10*韩&amp;#43;王&amp;#xff09; &amp;#43; &amp;#xff08;1000*范&amp;#43;100*邓&amp;#43;10*李&amp;#43;王&amp;#xff09;等于&amp;#xff08;10000 * 李 &amp;#43; 1000*王&amp;#43;100*韩&amp;#43;10*范&amp;#43;王&amp;#xff09;时。&lt;/p&gt;\n\n&lt;p&gt;就可以得出结果。&lt;/p&gt;\n\n&lt;p&gt;希望对你有帮助。&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["c++穷举法的一个题目，题干在👇", ["题目：", "\n\n", "奔跑吧兄弟成员：邓超、王祖蓝、范冰冰、韩庚、李晨的加法如下：", "\n\n", "范邓韩王", "\n\n", "+", " 范邓李王 ", "\n\n", "李王韩范王", "\n\n", "其中邓、王、范、韩、李均为1位数字（0-9），编写程序求邓、王、范、韩、李的取值。", "\n\n", "我的程序：", "\n\n", "\n\n", "出现错误：输出答案是这样：", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=1", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=2", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=3", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=4", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=5", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=6", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=7", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=8", "\n\n", "李=0", "\n\n", "邓=0", "\n\n", "王=0", "\n\n", "范=0", "\n\n", "韩=9", "\n\n", "李=0", "\n\n", "Program ended with exit code: 0", "\n\n", "可以帮我改一下程序，告诉我错误在哪里么，谢谢各位"]], "Tag": "算法设计"}
{"Answer": "修改了3个地方：\r\n 1.  数组改成static，这样才能保存每次递归出来产生的数\r\n 2.  在递归函数中，让m++，否则无法结束递归\r\n 3.  调整了下边界，让最终输出结果是5位以内的二进制。\r\n代码如下：\r\n\r\nint n;\r\nvoid f(int m)\r\n{\r\n    int i = 0;\r\n    static int a[20];\r\n    m++;\r\n    if(m == n)\r\n    {\r\n        for(i = 1; i &lt; n; i++)\r\n        {\r\n            printf(\"%d\",a[i]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n    else\r\n    {\r\n        a[m] = 0;\r\n        f(m);\r\n        a[m] = 1;\r\n        f(m);\r\n    }\r\n}\r\nint main(void)\r\n{\r\n    int m = 0;\r\n    // scanf(\"%d\",&amp;n);\r\n    n = 5 + 1;\r\n    f(m);\r\n    return 0;\r\n}", "Konwledge_Point": "智能穷举搜索", "Question": ["我要穷举m位的二进制数，但是出错了，调试时候也没发现问题~~望指教", ["enter code here\n", "\n\n", "include ", "\n\n", "int n;", "\n\n", "void  f(int m)", "\n{", "\n    int i = 0;", "\n    int a[20];", "\n    if(m==n)", "\n    {", "\n        for(i = 0; i < n; i++)", "\n        {", "\n            printf(\"%d\",a[i]);", "\n        }", "\n        printf(\"\\n\");", "\n    }", "\n    else", "\n    {", "\n        a[m] = 0;", "\n        f(m);", "\n        a[m] = 1;", "\n        f(m);", "\n    }", "\n}", "\n\n", "int main(void)", "\n{", "\n    int m = 0;", "\n//  scanf(\"%d\",&n);", "\n    n = 5;", "\n    f(m);", "\n    return 0;", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;这个问题的详细论述&amp;#xff0c;请参考这个文章&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://mp.weixin.qq.com/s?__biz&amp;#61;MzIzODAxNjE1OQ&amp;#61;&amp;#61;&amp;amp;mid&amp;#61;2247484908&amp;amp;idx&amp;#61;1&amp;amp;sn&amp;#61;f65249db53819e13e51facf833fca6a0&amp;amp;chksm&amp;#61;e93e861cde490f0a92cdceb4aedb529acb5a54f3fa5f20974c5be0cc576edc9c2b64b5a5ad4a&amp;amp;token&amp;#61;1187079490&amp;amp;lang&amp;#61;zh_CN#rd\"&gt;https://mp.weixin.qq.com/s?__biz&amp;#61;MzIzODAxNjE1OQ&amp;#61;&amp;#61;&amp;amp;mid&amp;#61;2247484908&amp;amp;idx&amp;#61;1&amp;amp;sn&amp;#61;f65249db53819e13e51facf833fca6a0&amp;amp;chksm&amp;#61;e93e861cde490f0a92cdceb4aedb529acb5a54f3fa5f20974c5be0cc576edc9c2b64b5a5ad4a&amp;amp;token&amp;#61;1187079490&amp;amp;lang&amp;#61;zh_CN#rd&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["鸡兔同笼穷举法哪错了", ["#include\"stdio.h\" ", "\nint main()", "\n{", "\nint a,b,c,d;", "\nscanf(\"%d%d\",&a,&b);", "\nfor(c=0;c<=a;c++)", "\n{", "\nfor(d=0;d<=a;d++)", "\n    {", "\n    if(c*2+d*4==b&&c+d==a)    ", "\n{", "\n    printf(\"%d%d\",c,d);", "\n}", "\nelse", "\n{", "\nprintf(\"error\");    ", "\n}", "\n        ", "\n    }    ", "\n    ", "\n}    ", "\n    return 0;", "\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;有一个数i, 从2开始到sqrt(i)挨个跟i取模%&amp;#xff0c;也就是求余数&amp;#xff0c;余数为0&amp;#xff0c;说明能被整除&amp;#xff0c;i不是质数。&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["请问穷举法找质数的算法思路是什么样的", []], "Tag": "算法设计"}
{"Answer": "假设1元，2元，5元硬币分别为a,b,c个\r\n\r\n```\r\n求满足约束条件\r\na + b + c = n            (1)         \r\n的情况下，\r\na + 2*b + 5*c = m    (2)\r\n解的个数。\r\n```\r\n直接用(1) - (2), 得到公式(3)\r\n\r\n\r\n```\r\n b + 4c = m-n        (3)\r\n a被消去了，因为\r\n 0 &lt;= a &lt;= n\r\n 所以约束条件变为,\r\n 0 &lt;= b + c &lt;= n\r\n```\r\n\r\n最终就变成了求\r\nb+4c = m - n\r\n有多少组整数解的问题\r\n\r\n\r\n```\r\nint resolve(int n, int m) {\r\n\tint b = 0, c = 0;\r\n\tint temp = m - n;\r\n\tint sum = 0;\r\n\t  \r\n\tif ((temp % 4) &gt; n) return 0;\r\n\t\r\n\tfor (int c = (temp/4); c &gt;= 0; --c) {\r\n\t\tb = temp - (c * 4);\r\n\t\tif (b + c &lt;= n)\r\n\t\t\tsum += 1;\r\n\t\telse\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn sum;\r\n\r\n}\r\n \r\n```\r\n\r\n思路大概这样，代码随手写得...", "Konwledge_Point": "智能穷举搜索", "Question": ["acm 里硬币问题 具体题目见下，采用穷举法时间超限，请问怎么修改", ["主页  讨论版   问题  名次  状态  统计", "\n问题 L: 还是硬币问题", "\n时间限制: 1 Sec  内存限制: 128 MB", "\n提交: 183  解决: 30", "\n状态", "\n题目描述", "\n给你无限多个1元的硬币和2元的硬币，还有5元的硬币。", "\n\n", "现在要你从这3种硬币中取n个硬币，使得他们的价值和为m", "\n\n", "输入", "\n多组输入", "\n\n", "每组n ， m ", "\n\n", "n < 1e6 , m <1e6 ", "\n\n", "输出", "\n总的方案数目", "\n\n", "样例输入", "\n2 3", "\n样例输出", "\n1", "\n\n", "#include", "\nint main()", "\n{", "\n    int n,m;", "\n    int x,y,z,i,k,j;", "\n    i=0;", "\n    while(scanf(\"%d%d\",&n,&m)!=EOF)", "\n    {", "\n        for(x=0; x<=n; x++)", "\n        {", "\n            for(y=0; y<=n-x; y++)", "\n            {", "\n                for(z=0; z<=n-x-y; z++)", "\n                {", "\n                    if((x+y+z==n)&&(x+2*y+5*z==m))", "\n                    {", "\n                        i++;", "\n                    }", "\n\n", "            }\n        }\n    }\n    printf(\"%d\\n\",i);\n}\nreturn 0;\n", "\n\n", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n用&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;&amp;#xff1a;\n&amp;#96;&amp;#96;&amp;#96;c\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,b&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,c&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (a&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;33&lt;/span&gt;){\n       b&amp;#61;  &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(b&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;){\n            c &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(c&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;){\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;*a&amp;#43;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*b&amp;#43;&lt;span class=\"hljs-number\"&gt;0.5&lt;/span&gt;*c&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&amp;amp;&amp;amp;a&amp;#43;b&amp;#43;c&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;){\n                   i&amp;#43;&amp;#43;;\n                }\n               c&amp;#43;&amp;#43;;\n            }\n            b&amp;#43;&amp;#43;;\n        }\n        a&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,i);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["c语言while穷举法", ["c语言穷举法，100 匹马驮 100 担货，大马一匹驮了担，中马一匹驮2担，小马两匹驮一担。有多少种方法？", "用三个for嵌套可以做，用while的话为什么我这么写不行呢？", "用for：", "\n", "\n```c\n", "#include<stdio.h>", "\n\nint main(){\n    int a,b,c,d,", "i", "=0;\n    ", "for", "(", "a", "=1;a<=33;a++){\n        ", "for", "(", "b", "=1;b<=50;b++){\n            ", "for", "(", "c", "=1;c<=200;c++){\n                ", "if", "(3", "*a", "+2", "*b", "+0.5", "*c", "==100&&a+b+", "c", "==100){\n                    i++;\n                }\n            }\n        }\n    }\nprintf(", "\"%d\"", ",i);\n\nreturn 0;\n\n}\n\n\n", "\n", "用", "while", "：\n\n```c\n", "#", "include", "<stdio.h>", "\n", "int", " ", "main", "()", "{\n    ", "int", " a=", "1", ",b=", "1", ",c=", "1", ",i=", "0", ";\n    ", "while", " (a<=", "33", "){\n        ", "while", "(b<=", "50", "){\n            ", "while", "(c<=", "100", "){\n                ", "if", "(", "3", "*a+", "2", "*b+", "0.5", "*c==", "100", "&&a+b+c==", "100", "){\n                   i++;\n                }\n               c++;\n            }\n            b++;\n        }\n        a++;\n    }\n    ", "printf", "(", "\"%d\"", ",i);\n    ", "return", " ", "0", ";\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;import itertools &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; it \n\ns &amp;#61; &lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;#34;&lt;/span&gt;).&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;,&amp;#34;&lt;/span&gt;))\ns &amp;#61; &lt;span class=\"hljs-keyword\"&gt;set&lt;/span&gt;(s)\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(s) &amp;lt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;不足三位数&amp;#xff01;&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &amp;#61; it.permutations(s, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)    \n    &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &amp;#61; [&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(str, i)) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n    &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;sort&lt;/span&gt;()\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(str, &lt;span class=\"hljs-keyword\"&gt;res&lt;/span&gt;)))\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;f&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;共{len(res)}个&amp;#34;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["关于python 特殊的穷举三位数", ["请问像这样的题目，数字由用户输入，怎么实现穷举三位数呢 请问详细的代码是什么呢", "谢谢解答"]], "Tag": "算法设计"}
{"Answer": "你可以用 ArrayList，不用考虑长度，用add动态添加，最后一次性\r\nfor (int i = al.length - 1; i &gt;= 0; i--)  逆序遍历 a;[i];\r\n单个数字转换内存不足有点夸张了，你的数字能有多大？100位？1000位？宇宙中的所有原子的个数应该也没有10的1000次方。", "Konwledge_Point": "智能穷举搜索", "Question": ["如何解决数组的空间不足的问题", ["\n", "在一个进制转换的问题上卡了很久，十六进制转八进制，我是想先将十六进制转换成十进制，再将十进制转换成八进制。十六进制转十进制我可以很好实现，就是将字符串逐一取出求出权值就行。问题在十进制转八进制上。因为在数学上，", "\n", "十进制转八进制就是该数求余再倒序，问题就出在这。", "\n", "为实现将数倒序，我得先将数放在数组里，再将数组进行逆向输出。可是数组是创建时就初始化好空间大小的，当所转换的数非常大时数组都无法满足时就错了，想请问是否有更好的方法解决？或者当数组的使用遇到空间上的问题是有没有什么好的处置方法？求教~~~", "\n", "以下献上十六进制转八进制代码（请大家对我的代码多多指正，初学者比较生疏，谢谢~）：", "\n\n", "//多次运算十六进制转八进制\nimport java.util.*;\npublic class BASIC_12_3_3 {\n    public static void main(String args[]){\n        int n,tag=0;\n        long sum=0,b,tmp=1,k,c; \n        String H[] = new String[11];\n        Scanner sc = new Scanner(System.in);\n        n = sc.nextInt();\n        for(int i=0;i < n;i++){\n            H[i] = sc.next();\n        }\n        for(int z=0;z < n;z++){\n            int i = 0;\n            //十六进制转成十进制\n            for(int j=H[z].length()-1;j >= 0;j--){\n                b = H[z].charAt(j);\n                if(b>='0' && b<='9'){\n                    b = (b - '0') * tmp;\n                    sum = sum + b;\n                    tmp = tmp * 16;\n                }\n                else if(b>='A' && b<='F'){\n                    b = (b - 'A' + 10) * tmp;\n                    sum = sum + b;\n                    tmp = tmp * 16;\n                }\n            }\n            //此处得出该数的十进制sum，以下是十进制转八进制\n            if(sum>=0 && sum<8){\n                System.out.print(sum);\n            }\n            else if(sum >= 8){\n                k = sum;\n                long list[] = new long[20];//此处用数组进行逆序输出，但容易出现数据溢出\n                while(k != 0){\n                    c = k % 8;\n                    list[i] = c;\n                    k = k / 8;\n                    i ++;\n                }\n                if(k == 0){\n                    list[i] = k;\n                }\n                //以上数制转换完毕，以下是进行逆向输出\n                for(int j=list.length - 1;j >= 0;j--){\n                    if(list[j] == 0){\n\n                    }else if(list[j] != 0){\n                        tag = 1;\n                    }\n                    if(tag == 1){\n                        System.out.print(list[j]);\n                    }\n                }\n                System.out.println();\n            }\n            sum = 0;//sum置零!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n            tag = 0;\n            tmp = 1;\n        }\n    }\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;就是把A、B、C、D说的话当成一个逻辑表达式&amp;#xff0c;然后判断四个表达式中只有一个是FALSE的情况&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["关于穷举法的应用，如何按课件中得方法解决问题", ["\n", "如何用课件中这种穷举的方法完成这个问题？"]], "Tag": "算法设计"}
{"Answer": "# 问题解决的话，请点下`采纳`，谢谢\r\n```\r\n// Q1051673.cpp : Defines the entry point for the console application.\r\n//\r\n\r\n#include \"stdafx.h\"\r\n\r\n\r\n#include &lt;stdio.h&gt;\r\n#include &lt;string.h&gt;\r\n\r\nvoid solve(int * seed, int nseed, int * cand, int ncand, int target)\r\n{\r\n\tif (target == 0)\r\n\t{\r\n\t\tfor (int i = 0; i &lt; nseed; i++)\r\n\t\t{\r\n\t\t\tprintf(\"%d \", seed[i]);\r\n\t\t}\r\n\t\tprintf(\"\\n\");\r\n\t\treturn;\r\n\t}\r\n\tfor (int i = 0; i &lt; ncand; i++)\r\n\t{\r\n\t\tif (target &gt;= cand[i] &amp;&amp; cand[i] &lt;= seed[nseed - 1])\r\n\t\t{\r\n\t\t\tint * seed1 = new int[nseed + 1];\r\n\t\t\tmemcpy(seed1, seed, nseed * sizeof(int));\r\n\t\t\tseed1[nseed] = cand[i];\r\n\t\t\tsolve(seed1, nseed + 1, cand, ncand, target - cand[i]);\r\n\t\t\tdelete[] seed1;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nint main()\r\n{\r\n\tint cand[4] = { 10, 5, 2, 1 };\r\n\tint target = 25; //钱数\r\n\tfor (int i = 0; i &lt; 4; i++)\r\n\t{\r\n\t\tint * seed = new int[1];\r\n\t\tseed[0] = cand[i];\r\n\t\tsolve(seed, 1, cand, 4, target - seed[0]);\r\n\t\tdelete[] seed;\r\n\t}\r\n}\r\n```\r\n10 10 5\r\n10 10 2 2 1\r\n10 10 2 1 1 1\r\n10 10 1 1 1 1 1\r\n10 5 5 5\r\n10 5 5 2 2 1\r\n10 5 5 2 1 1 1\r\n10 5 5 1 1 1 1 1\r\n10 5 2 2 2 2 2\r\n10 5 2 2 2 2 1 1\r\n10 5 2 2 2 1 1 1 1\r\n10 5 2 2 1 1 1 1 1 1\r\n10 5 2 1 1 1 1 1 1 1 1\r\n10 5 1 1 1 1 1 1 1 1 1 1\r\n10 2 2 2 2 2 2 2 1\r\n10 2 2 2 2 2 2 1 1 1\r\n10 2 2 2 2 2 1 1 1 1 1\r\n10 2 2 2 2 1 1 1 1 1 1 1\r\n10 2 2 2 1 1 1 1 1 1 1 1 1\r\n10 2 2 1 1 1 1 1 1 1 1 1 1 1\r\n10 2 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n10 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n5 5 5 5 5\r\n5 5 5 5 2 2 1\r\n5 5 5 5 2 1 1 1\r\n5 5 5 5 1 1 1 1 1\r\n5 5 5 2 2 2 2 2\r\n5 5 5 2 2 2 2 1 1\r\n5 5 5 2 2 2 1 1 1 1\r\n5 5 5 2 2 1 1 1 1 1 1\r\n5 5 5 2 1 1 1 1 1 1 1 1\r\n5 5 5 1 1 1 1 1 1 1 1 1 1\r\n5 5 2 2 2 2 2 2 2 1\r\n5 5 2 2 2 2 2 2 1 1 1\r\n5 5 2 2 2 2 2 1 1 1 1 1\r\n5 5 2 2 2 2 1 1 1 1 1 1 1\r\n5 5 2 2 2 1 1 1 1 1 1 1 1 1\r\n5 5 2 2 1 1 1 1 1 1 1 1 1 1 1\r\n5 5 2 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n5 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n5 2 2 2 2 2 2 2 2 2 2\r\n5 2 2 2 2 2 2 2 2 2 1 1\r\n5 2 2 2 2 2 2 2 2 1 1 1 1\r\n5 2 2 2 2 2 2 2 1 1 1 1 1 1\r\n5 2 2 2 2 2 2 1 1 1 1 1 1 1 1\r\n5 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1\r\n5 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1\r\n5 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n5 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n5 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n2 2 2 2 2 2 2 2 2 2 2 2 1\r\n2 2 2 2 2 2 2 2 2 2 2 1 1 1\r\n2 2 2 2 2 2 2 2 2 2 1 1 1 1 1\r\n2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1\r\n2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1\r\n2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1\r\n2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\nPress any key to continue . . .", "Konwledge_Point": "智能穷举搜索", "Question": ["新手c语言编程穷举问题", ["有四种面值不一样的货币分别是10元，5元，2元，1元。现在给你一个钱数你能求求它的组成方法都有多少吗？", "\n\n", "运行时间尽可能短"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\nScanner input = new Scanner(System.in);\nint i = input.nextInt();\nboolean flag = false;\nfor (int a=0;a&amp;lt;9;a++){\n    for(int b=0;b&amp;lt;8;b++){\n        int ab = a*10+b;\n        int ba = b*10+a;\n        if(ab*ba==i){\n            System.out.println(&amp;quot;a===&amp;quot;+a);\n            System.out.println(&amp;quot;b===&amp;quot;+b);\n            flag = true;\n            break;\n        }\n    }\n}\nif(!flag){\n    System.out.println(&amp;quot;No Answer&amp;quot;);\n}&lt;/pre&gt;\n\n&lt;p&gt;用Java写的&amp;nbsp; 把Scanner input = new Scanner(System.in); int i = input.nextInt();换成scanf输入&lt;/p&gt;\n\n&lt;p&gt;System.out.println（）换成print输出就行 算法是正确的 试过&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["c语言迭代穷举问题。", ["输入三位数字N，求两位数AB（其中个位数字为B，十位数字为A，且有0 < A < B ≤9）。使得下列等式成立：", "\n AB x BA = N", "\n其中BA是把AB中个、十位数字交换所得的两位数。", "\n ", "\n编写程序，接收控制台输入的三位整数N，求解A，B并输出。", "\n如果没有解则输出“No Answer”。求大佬jie'da"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/076168862666195.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;br /&gt;sum &amp;#61; sum1 * 1 &amp;#43; sum3 * 3;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["为什么我这样用穷举法不对", ["我的思路应该很好看出来，就是穷举，如果卡片1和卡片3能组成总精美程度的一半，那就可以平分，可是我输入2和1后居然输出yes就不知道哪有问题", "问题", "\n", "\n", "我的代码", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<stdlib.h>", "\n", "int", " ", "main", "(", "void", ")", "\n", "{\n    ", "int", " sum1;\n    ", "int", " sum3;\n    ", "int", " half;\n    ", "int", " sum;\n    ", "int", " i;\n    ", "int", " x;\n    ", "scanf", "(", "\"%d %d\"", ",&sum1, &sum3);\n\n    sum = sum1*", "1", " + sum*", "3", ";\n    ", "if", "(sum%", "2", " == ", "1", ")\n    {\n        ", "printf", "(", "\"No\"", ");\n        ", "exit", "(", "0", ");\n    }\n    half = sum/", "2", ";\n    ", "for", "(i=", "0", "; i<=sum1; i++){\n        ", "for", "(x=", "0", "; x<=sum3; x++){\n            ", "if", "(i*", "1", "+x*", "3", "==half)\n            {\n                ", "printf", "(", "\"Yes\"", ");\n                ", "exit", "(", "0", ");\n            }\n\n\n        }\n\n\n\n    }\n    ", "printf", "(", "\"No\"", ");\n", "return", " ", "0", ";\n}\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\ndef &lt;span class=\"hljs-title function_ invoke__\"&gt;get_pwd&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;str&lt;/span&gt;, num):\n    &lt;span class=\"hljs-title function_ invoke__\"&gt;if&lt;/span&gt;(num &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;x&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;str&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;yield&lt;/span&gt; x\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;x&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;str&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;y&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-title function_ invoke__\"&gt;get_pwd&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;str&lt;/span&gt;, num-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n                &lt;span class=\"hljs-keyword\"&gt;yield&lt;/span&gt; x&amp;#43;y\n\nstrKey&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;abcdefghijklmnopqrstuvwxyz0123456789&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;x&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-title function_ invoke__\"&gt;get_pwd&lt;/span&gt;(strKey,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;):\n    &lt;span class=\"hljs-title function_ invoke__\"&gt;print&lt;/span&gt;(x)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;可以根据给定字典&amp;#xff0c;穷举规定长度所有字符串&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["如何用Python穷举出四位的数字与小写字母组合", [" 我想要做一个密码的暴力破解，想要输出所有的四位的数字与小写字母组合，请问用Python该怎么写呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n\n&amp;#96;&amp;#96;&amp;#96;python\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; math\n\ncity &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: [&lt;span class=\"hljs-number\"&gt;87&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;91&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;83&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;71&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;64&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;68&lt;/span&gt;], &lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: [&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;38&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;46&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;44&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;58&lt;/span&gt;]}\nn &amp;#61; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\nx &amp;#61; city[&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;]\ny &amp;#61; city[&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;]\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n\n&lt;span class=\"hljs-comment\"&gt;# 计算距离&lt;/span&gt;\na &amp;#61; np.zeros((n, n))\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;):\n        a[i, j] &amp;#61; math.sqrt(&lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(x[i] - x[j], &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(y[i] - y[j], &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;))\n&lt;span class=\"hljs-comment\"&gt;# 生成6个城市的全部排列&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; itertools\n\nv &amp;#61; &lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;(itertools.permutations([&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;], n))\n&lt;span class=\"hljs-comment\"&gt;# 计算最短总距离&lt;/span&gt;\nm &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(v)\njuli &amp;#61; []\nmin_sum &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# &amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;初始化min_sum为正无穷&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(m):\n    &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#43; a[v[i][j] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, v[i][j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n        &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#43; a[v[i][j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, v[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n        if sum &amp;lt; min_sum:\n            min_sum &amp;#61; sun &amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61; 在计算出结果后&amp;#xff0c;前一个结果和后一个结果直接比较\n        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    juli.append(&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;最小距离&amp;#xff1a;&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(juli))\nzuiyou &amp;#61; &lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(juli)   &lt;span class=\"hljs-comment\"&gt;# &amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;这行可以注释&lt;/span&gt;\nc &amp;#61; juli.index(&lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(juli))\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;最短路径&amp;#xff1a;&amp;#39;&lt;/span&gt;, v[c])\n&lt;span class=\"hljs-comment\"&gt;# 原问题采用先生成全部可能结果的排列&amp;#xff0c;存下来&amp;#xff0c;在比较的方法&amp;#xff1b;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 如何修改为不依赖存储的排列结果&amp;#xff0c;换句话说&amp;#xff0c;一个一个比较&amp;#xff0c;算一个&amp;#xff0c;比较一个的方法呢&amp;#xff1f;&lt;/span&gt;\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&amp;#96;&amp;#96;&amp;#96;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["穷举法的结果比较方法", ["#输入6个城市坐标，字典形式", "city={'x':[87,91,83,71,64,68],'y':[7,38,46,44,60,58]}", "n=6", "x=city['x']", "y=city['y']", "import numpy as np", "#计算距离", "a=np.zeros((n,n))", "for i in range(6):", "    for j in range(6):", "        a[i,j] = math.sqrt(pow(x[i]-x[j],2)+pow(y[i]-y[j],2))", "#生成6个城市的全部排列", "import itertools", "v=list(itertools.permutations([1,2,3,4,5,6],n))", "#计算最短总距离", "m=len(v)", "juli=[]", "for i in range(m):", "    sum=0", "    for j in range(n-1):", "        sum=sum+a[v[i][j]-1,v[i][j+1]-1]", "    sum=sum+a[v[i][j+1]-1,v[i][0]-1]", "    juli.append(sum)", "print('最小距离：',min(juli))", "zuiyou=min(juli)", "c=juli.index(min(juli))", "print('最短路径：',v[c])", "我是先生成全排列之后再把全排列存起来，然后再一个一个比较的；", "能否修改成不依赖存储的排列结果，换句话说，一个一个比较，算一个，比较一个的方法呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt; 将输入数据放于&amp;#34;read.txt&amp;#34;文件中&amp;#xff0c;编译运行程序即可。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;#include&amp;lt;stdio.h&amp;gt;\n\nint main(void){\n\tFILE *fp&amp;#61;NULL;\n\tchar c[200000],x;\n\tint i&amp;#61;0,n&amp;#61;0,j&amp;#61;0;\n\t\n\tfp&amp;#61;fopen(&amp;#34;read.txt&amp;#34;,&amp;#34;r&amp;#34;); //读取txt文件数据 \n\twhile((x&amp;#61;fgetc(fp))!&amp;#61;EOF){\n\t\tc[i]&amp;#61;x;\n\t\ti&amp;#43;&amp;#43;;\n\t}\n\tn&amp;#61;i;\n\tc[n]&amp;#61;&amp;#39;\\0&amp;#39;;\n\tfclose(fp);\n\t\n\tchar f[20]&amp;#61;&amp;#34;write00.txt&amp;#34;;\n\tfor(i&amp;#61;1;i&amp;lt;&amp;#61;26;i&amp;#43;&amp;#43;){\n\t\tif(f[6]&amp;#61;&amp;#61;&amp;#39;9&amp;#39;){  //将输出文件从01至26排序 \n\t\t\tf[6]&amp;#61;&amp;#39;0&amp;#39;;\n\t\t\tf[5]&amp;#43;&amp;#43;;\n\t\t}\n\t\telse\n\t\t\tf[6]&amp;#43;&amp;#43;;\n\t\n\t\tfor(j&amp;#61;0;j&amp;lt;n;j&amp;#43;&amp;#43;){  //进行暴力破解&amp;#xff0c;一次将所有字母往后移动一位 \n\t\t\tif(c[j]&amp;gt;&amp;#61;&amp;#39;a&amp;#39;&amp;amp;&amp;amp;c[j]&amp;lt;&amp;#39;z&amp;#39;)\n\t\t\t\tc[j]&amp;#43;&amp;#61;1;\n\t\t\telse if(c[j]&amp;#61;&amp;#61;&amp;#39;z&amp;#39;)\n\t\t\t\tc[j]&amp;#61;&amp;#39;a&amp;#39;;\n\t\t\tif(c[j]&amp;gt;&amp;#61;&amp;#39;A&amp;#39;&amp;amp;&amp;amp;c[j]&amp;lt;&amp;#39;Z&amp;#39;)\n\t\t\t\tc[j]&amp;#43;&amp;#61;1;\n\t\t\telse if(c[j]&amp;#61;&amp;#61;&amp;#39;Z&amp;#39;)\n\t\t\t\tc[j]&amp;#61;&amp;#39;A&amp;#39;;\n\t\t}\n\t\t\n\t\tfp&amp;#61;fopen(f,&amp;#34;w&amp;#34;);//输出文件 \n\t\tfputs(c,fp);\n\t\tfclose(fp);\n\t}\n\treturn 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["如何用C语言实现凯撒密码对文本文件(.txt)的读取穷举暴力破解？", ["用C语言实现对文本文件中凯撒密码穷举破解 并把26次结果 输出为二十六个文本文件（.txt）"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,b,t,f;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;b);\n    &lt;span class=\"hljs-comment\"&gt;//1、先判断a,b大小&amp;#xff0c;若a&amp;gt;b,交换a和b&amp;#xff1b;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a&amp;gt;b){\n        t&amp;#61;a;\n        a&amp;#61;b;\n        b&amp;#61;t;\n    } \n    &lt;span class=\"hljs-comment\"&gt;//2、for循环遍历从a到b的每一个整数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;a;i&amp;lt;&amp;#61;b;i&amp;#43;&amp;#43;){\n        f&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//f&amp;#61;1表示假设i是素数 &lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//3、若该整数是素数&amp;#xff0c;则输出。&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;j&amp;lt;i;j&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i%j&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//i%j&amp;#61;&amp;#61;0表示i有除了1和它本身的因子 &lt;/span&gt;\n                f&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//假设不成立 &amp;#xff0c;i不是素数 &lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-comment\"&gt;//如果i未被改为0&amp;#xff0c;表示假设成立&amp;#xff0c;即i是素数 &lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(f) &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,i);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["C语言-8-穷举法C++", ["#include  <stdio.h>", "int main()", "{", "    Begin", "     End", "return0;", "}", "任务描述", "本关任务：从键盘读入两个大于5的正整数，打印出这两个数之间（包含这两个数）的所有素数，一行打印5个。", "编程要求", "输出格式用 %4d", "注意：输入的第一个数有可能比第二个数大。", "测试说明", "平台会对你编写的代码进行测试：", "测试输入：", "100 200", "预期输出：", "101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199", "测试输入：", "100 20", "预期输出：", "23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;判断式有很多种写法&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,300):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i%&lt;span class=\"hljs-attribute\"&gt;3&lt;/span&gt;&amp;#61;&amp;#61;0 &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; i%&lt;span class=\"hljs-attribute\"&gt;5&lt;/span&gt;&amp;#61;&amp;#61;0 &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; i%&lt;span class=\"hljs-attribute\"&gt;7&lt;/span&gt;&amp;#61;&amp;#61;0:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i)\n\n        \n105\n210\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,300):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; all([i%&lt;span class=\"hljs-attribute\"&gt;3&lt;/span&gt;&amp;#61;&amp;#61;0,i%5&amp;#61;&amp;#61;0,i%7&amp;#61;&amp;#61;0]):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i)\n\n        \n105\n210\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,300):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; all([&lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; i%3,&lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; i%5, &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; i%7]):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i)\n\n        \n105\n210\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,300):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; any([i%3,i%5,i%7]):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i)\n\n        \n105\n210\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(1,300):\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; i%(3&lt;span class=\"hljs-number\"&gt;*5&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;*7&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(i)\n\n        \n105\n210\n&amp;gt;&amp;gt;&amp;gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;最后一种方法有前提&amp;#xff1a;三个数都是质数&amp;#xff0c;且互质&lt;/p&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请采纳。谢谢!&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["一个小数学的穷举问题", ["找出1到300以内所有能同时被3，5，7整除的正整数。要求每行打印一个数"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;傻一点的办法就是穷举了&amp;#xff0c;把8位数都遍历一遍。分解出8位数字&amp;#xff0c;判断是否符合条件。题目的时间限制是多长&amp;#xff1f;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;int2arr&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *a)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(n&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        a[i--] &amp;#61; n%&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        n/&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;isprime&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;lt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sqrt&lt;/span&gt;(n*&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&amp;#61;k;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n%&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{ \n    &lt;span class=\"hljs-comment\"&gt;/*有7个人在一起玩猜电话号码的游戏。\n这是一个8位的电话号码。\n甲说&amp;#xff0c;这个数字的千万位数字比百万位数字大。\n乙说&amp;#xff0c;这个数字的百位数字与十位数字相同。\n丙说&amp;#xff0c;这个数字的百万位、十万位、万位数字相乘的结果与百位、十位、个位数字相乘的结果相同&amp;#xff0c;并且这个乘积不为0。\n丁说&amp;#xff0c;把这个数字的十万位、万位、千位、百位数字看作一个四位数&amp;#xff0c;这个四位数是一个非负整数的平方。\n戊说&amp;#xff0c;把这个数字的千万位、千位、个位数字相加&amp;#xff0c;和是一个质数。\n己说&amp;#xff0c;把这个数字的所有数位相加&amp;#xff0c;和是10的整数倍。\n你是庚&amp;#xff0c;请列出所有满足条件的8位数字。*/&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;10000000&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;99999999&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;];\n        &lt;span class=\"hljs-built_in\"&gt;int2arr&lt;/span&gt;(i,a);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;lt;&amp;#61; a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;] !&amp;#61; a[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;])\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;] !&amp;#61; a[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;]*a[&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;])\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt; &amp;#43; a[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; &amp;#43; a[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;]*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; a[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;];\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; p &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sqrt&lt;/span&gt;(k*&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(p*p-k*&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;) &amp;gt; &lt;span class=\"hljs-number\"&gt;0.00001&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!&lt;span class=\"hljs-built_in\"&gt;isprime&lt;/span&gt;(a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#43;a[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#43; a[&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;]))\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;;j&amp;#43;&amp;#43;)\n            sum &amp;#43;&amp;#61; a[j];\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(sum %&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,i);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;  &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["C语言用穷举循环判断实现猜字游戏", ["问题遇到的现象和发生背景", "\n", "有7个人在一起玩猜电话号码的游戏。", "这是一个8位的电话号码。", "甲说，这个数字的千万位数字比百万位数字大。", "乙说，这个数字的百位数字与十位数字相同。", "丙说，这个数字的百万位、十万位、万位数字相乘的结果与百位、十位、个位数字相乘的结果相同，并且这个乘积不为0。", "丁说，把这个数字的十万位、万位、千位、百位数字看作一个四位数，这个四位数是一个非负整数的平方。", "戊说，把这个数字的千万位、千位、个位数字相加，和是一个质数。", "己说，把这个数字的所有数位相加，和是10的整数倍。", "你是庚，请列出所有满足条件的8位数字。", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "我的解答思路和尝试过的方法", "\n", "用循环和判断", "\n", "我想要达到的结果", "\n", "庚：53846446", "甲：5>3", "乙：4=4", "丙：3", "8", "4=4", "4", "6", "丁：8464=92*92", "戊：5+6+6=17", "己：5+3+8+4+6+4+4+6=40"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你有结果就在循环里输出&amp;#xff0c;没结果才在循环外输出无结果&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["鸡兔同笼问题为什么我输出的数都是我输入的头数，输出数不正确怎么办", ["\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;曲线拟合也是一种最优化算法&amp;#xff0c;有成熟的数值优化算法&amp;#xff0c;如trust-region-reflective&amp;#39;和 &amp;#39;levenberg-marquardt&amp;#xff0c;这些成熟的算法在python中实现&amp;#xff0c;要想自己写出程序&amp;#xff0c;首先需要理解算法。&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["请问python curve_fit函数的搜索原理是什么呢，为什么它可以迅速搜索出最优解呢", ["请问python curve_fit函数的搜索原理是什么呢，为什么它可以迅速搜索出最优解呢，而我自己手写最小二乘法暴力穷举最优解确需要搜索很久"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-symbol\"&gt;&amp;amp;head&lt;/span&gt;, &lt;span class=\"hljs-symbol\"&gt;&amp;amp;feet&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["鸡兔同笼C++，想用穷举法但失败了，SOS", ["最普通的鸡兔同笼，但我想用穷举法来做，结果为什么没有输出勒？，求大家指点。", "#include<stdio.h>", "int main()", "{", "    int chicken,rabbit;", "    int head,feet;", "    printf(\"请输入头数和脚数：\");", "    scanf(\"%d %d\",head,feet);", "    for (chicken=0;chicken<=head;chicken++)", "    {", "        for (rabbit=0;rabbit<=head;rabbit++)", "        {", "            if (rabbit+chicken==head && rabbit", "4+chicken", "2==feet)", "                {", "                printf(\"%d %d\",chicken,rabbit);", "                return 0;}", "            else", "                {", "                printf(\"Worry!\");", "                return 0;", "            }", "    }", "    }", "    return 0;", "}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;ab至少有一个参与&amp;#xff0c;那应该是a或b&amp;#61;&amp;#61;1&lt;br /&gt;你为什么用a*b&amp;#xff0c;那ab都是0也成立呀&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["c语言循环用穷举查作案嫌疑人", ["\n", "请问为什么我if里面的条件是不对的，问题出在哪里呢？这里运行的结果不对，应该是最后AC那个条件写错了，但是不知道错哪里了，是小白菜鸡", "\n"]], "Tag": "算法设计"}
{"Answer": "http://blog.csdn.net/haut_ykc/article/details/52154202", "Konwledge_Point": "智能穷举搜索", "Question": ["Euclid's Game               ", ["Problem Description", "\nTwo players, Stan and Ollie, play, starting with two natural numbers. Stan, the first player, subtracts any positive multiple of the lesser of the two numbers from the greater of the two numbers, provided that the resulting number must be nonnegative. Then Ollie, the second player, does the same with the two resulting numbers, then Stan, etc., alternately, until one player is able to subtract a multiple of the lesser number from the greater to reach 0, and thereby wins. For example, the players may start with (25,7): ", "\n\n", "25 7", "\n11 7", "\n4 7", "\n4 3", "\n1 3", "\n1 0 ", "\n\n", "an Stan wins. ", "\n\n", "Input", "\nThe input consists of a number of lines. Each line contains two positive integers giving the starting two numbers of the game. Stan always starts.", "\n\n", "Output", "\nFor each line of input, output one line saying either Stan wins or Ollie wins assuming that both of them play perfectly. The last line of input contains two zeroes and should not be processed. ", "\n\n", "Sample Input", "\n34 12", "\n15 24", "\n0 0", "\n\n", "Sample Output", "\nStan wins", "\nOllie wins"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;参考地址&amp;#xff1a;&lt;/strong&gt;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/RViewSonic/article/details/107127807\" id=\"textarea_1634020973858_1634021018676_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;一个自然数的七进制表达式是一个三位数&amp;#xff0c;而这个自然数的九进制表示也是一个三位数&amp;#xff0c;且这两个三位数的数码顺序正好相反&amp;#xff0c;求这个三位数。_RViewSonic的博客-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;这又是一个数字问题的代码化,首先解释里面的几个概念并用数学的方法将这个三位数推导出来.数码:数的基本单元,也就是数字.例如123和321二者分别含有三个数码,且数码顺序相反。进制:可看作是特殊进制转换为默认进制(10进制)时的底数。数学推导:由上述数学推导过程可知,函数体内的判断条件即是七进制和九进制化为十进制时二者相等,而这需要在所有符合七进制(七和九取并集)的三位数内进行筛选,而七进制遇七进一的特点就是突破口.\tfor(i&amp;#61;1;i&amp;lt;7;i&amp;#43;&amp;#43;)\tfor(j&amp;#61;0;j&amp;lt;7;j&amp;#43;&amp;#43;)&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/RViewSonic/article/details/107127807&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint main()\n{\n    int i,j,k;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;1;i&amp;lt;7;i&amp;#43;&amp;#43;)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;0;j&amp;lt;7;j&amp;#43;&amp;#43;)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;k&lt;/span&gt;&amp;#61;1;k&amp;lt;7;k&amp;#43;&amp;#43;)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;#43;j&lt;span class=\"hljs-number\"&gt;*7&lt;/span&gt;&amp;#43;k&lt;span class=\"hljs-number\"&gt;*7&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;*7&lt;/span&gt;&amp;#61;&amp;#61;i&lt;span class=\"hljs-number\"&gt;*9&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;*9&lt;/span&gt;&amp;#43;j&lt;span class=\"hljs-number\"&gt;*9&lt;/span&gt;&amp;#43;k)\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,i&lt;span class=\"hljs-number\"&gt;*9&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;*9&lt;/span&gt;&amp;#43;j&lt;span class=\"hljs-number\"&gt;*9&lt;/span&gt;&amp;#43;k);\n    }\n } \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/422169020436196.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["大一C语言课，7进制9进制的三位数，求解", ["大一学生c语言课", "不明白10进制和9进制和7进制的关系，求解", "怎么写程序才能判断他是7或者9进制的三位数啊"]], "Tag": "算法设计"}
{"Answer": "import java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\n\r\npublic class Coin {\r\n\r\n    public static int getNums(int n){\r\n   \r\n        List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\r\n        \r\n        for(int i=0;i&lt;1000;i++){\r\n            for(int j=0; j &lt; 1000; j++) {\r\n                for(int z=0; z &lt; 1000; z++) {\r\n                    if(25*i+10*j+z==n){\r\n                        list.add(i+j+z);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Collections.sort(list);\r\n        return list.get(0);\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n       int a = getNums(34);\r\n       System.out.println(\"---&gt;\" + a);\r\n    }\r\n}\r\njava版穷举法", "Konwledge_Point": "智能穷举搜索", "Question": ["用Python写这个作业，谢谢", ["Part I ( points)", "\n\n", "“找硬币问题”：设有3种硬币，面值分别为25分，10分和1分。编写程序，输入n（分钱），用穷举法或者回溯法求解，求最少需要找多少个硬币。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n&lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; main(String[] args) {\n        Scanner &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; Scanner(&lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;鸡兔同笼&amp;#xff1a;请输入头和脚数量&amp;#xff1a;&amp;#34;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; h &amp;#61; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;.nextInt();\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; f &amp;#61; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;.nextInt();\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; chicken&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,rabbit &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(;chicken&amp;lt;&amp;#61;h;chicken&amp;#43;&amp;#43;){\n            rabbit &amp;#61; h-chicken;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((chicken*&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)&amp;#43;(rabbit*&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;) &amp;#61;&amp;#61; f){\n                &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(String.format(&amp;#34;鸡&amp;#xff1a;%d,兔&amp;#xff1a;%d&amp;#34;,chicken,rabbit));\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;没有解&amp;#34;);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/158437316356146.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["鸡兔同笼问题 （穷举法)", ["已知 鸡兔共35只 共94支脚  那么鸡兔各几只?！～-=.：$……～%", "@＼* ", "            "]], "Tag": "算法设计"}
{"Answer": "&lt;h5 id=\"温馨提醒&amp;#xff1a;如果我的回答对你有帮助&amp;#xff0c;请点击旁边的采纳按钮&amp;#xff0c;谢谢\"&gt;温馨提醒&amp;#xff1a;如果我的回答对你有帮助&amp;#xff0c;请点击旁边的采纳按钮&amp;#xff0c;谢谢&lt;/h5&gt;\n&lt;p&gt;&amp;#xff08;1&amp;#xff09;子序列&amp;#xff1a;一个序列X &amp;#xff1d; x1x2...xn,中任意删除若干项&amp;#xff0c;剩余的序列叫做A的一个子序列。也可以认为是从序列A按原顺序保留任意若干项得到的序列。&lt;br /&gt;      例如&amp;#xff1a;对序列 1,3,5,4,2,6,8,7来说&amp;#xff0c;序列3,4,8,7 是它的一个子序列。对于一个长度为n的序列&amp;#xff0c;它一共有2^n 个子序列&amp;#xff0c;有(2^n – 1)个非空子序列。在这里需要提醒大家&amp;#xff0c;子序列不是子集&amp;#xff0c;它和原始序列的元素顺序是相关的。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#xff09;公共子序列&amp;#xff1a;如果序列&lt;span class=\"hljs-keyword\"&gt;Z&lt;/span&gt;既是序列&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;的子序列&amp;#xff0c;同时也是序列&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的子序列&amp;#xff0c;则称它为序列&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;和序列&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的公共子序列。空序列是任何两个序列的公共子序列。\n\n &amp;#xff08;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;&amp;#xff09;最长公共子序列&amp;#xff1a;&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;和&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的公共子序列中长度最长的&amp;#xff08;包含元素最多的&amp;#xff09;叫做&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;和&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的最长公共子序列。\n\n  这个问题如果用穷举法时间&amp;#xff0c;最终求出最长公共子序列时&amp;#xff0c;时间复杂度是Ο&amp;#xff08;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;mn&amp;#xff09;&amp;#xff0c;是指数级别的复杂度&amp;#xff0c;对于长序列是不适用的。因此我们使用动态规划法来求解。\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;刻画最长公共子序列问题的最优子结构&lt;br /&gt;      设X&amp;#61;x1x2…xm和Y&amp;#61;y1y2…yn是两个序列&amp;#xff0c;Z&amp;#61;z1z2…zk是这两个序列的一个最长公共子序列。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;  1.      如果xm&amp;#61;yn&amp;#xff0c;那么zk&amp;#61;xm&amp;#61;yn&amp;#xff0c;且Zk&lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;是Xm&lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;&amp;#xff0c;Yn&lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;的一个最长公共子序列&amp;#xff1b;\n\n  2.      如果xm≠yn&amp;#xff0c;那么zk≠xm&amp;#xff0c;意味着Z是Xm&lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;&amp;#xff0c;Y的一个最长公共子序列&amp;#xff1b;\n\n  3.      如果xm≠yn&amp;#xff0c;那么zk≠yn&amp;#xff0c;意味着Z是X&amp;#xff0c;Yn&lt;span class=\"hljs-string\"&gt;-1&lt;/span&gt;的一个最长公共子序列。\n\n  从上面三种情况可以看出&amp;#xff0c;两个序列的LCS包含两个序列的前缀的LCS。因此&amp;#xff0c;LCS问题具有最优子结构特征。\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;递归的定义最优值&lt;br /&gt;      从最优子结构可以看出&amp;#xff0c;如果xm&amp;#61;yn&amp;#xff0c;那么我们应该求解Xm-1&amp;#xff0c;Yn-1的一个LCS&amp;#xff0c;并且将xm&amp;#61;yn加入到这个LCS的末尾&amp;#xff0c;这样得到的一个新的LCS就是所求。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;  如果xm≠yn&amp;#xff0c;我们需要求解两个子问题&amp;#xff0c;分别求Xm&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;&amp;#xff0c;&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的一个LCS和&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;&amp;#xff0c;Yn&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;的一个LCS。两个LCS中较长者就是&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;和&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的一个LCS。\n\n  可以看出LCS问题具有重叠子问题性质。为了求&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;和&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的一个LCS&amp;#xff0c;我们需要分别求出Xm&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;&amp;#xff0c;&lt;span class=\"hljs-keyword\"&gt;Y&lt;/span&gt;的一个LCS和&lt;span class=\"hljs-keyword\"&gt;X&lt;/span&gt;&amp;#xff0c;Yn&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;的一个LCS&amp;#xff0c;这几个字问题又包含了求出Xm&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;&amp;#xff0c;Yn&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;的一个LCS的子子问题。&amp;#xff08;有点绕了。。。晕没晕。。。。&amp;#xff09;\n\n   根据上面的分析&amp;#xff0c;我们可以得出下面的公式&amp;#xff1b;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img title=\"搜狗截图20210825171155.png\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/127527288926131.png\" /&gt;&lt;/p&gt;\n&lt;p&gt;所以&amp;#xff1a;S1和S2的LCS就等于&amp;#xff1a;{S1减去最后一个元素}与S2的LCS&amp;#xff0c; {S2减去最后一个元素}与S1的 LCS 中的最大的那个序列&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["最长公共子序列求解DP", ["题目", " 字符序列的子序列是指从给定字符序列中随意地（不一定连续）去掉若干个字符（可能一个也不去掉）后所形成的字符序列。令给定的字符序列X和Y，使得对所有的", "j", "=", "0", ",", "1", ",", "⋯", " ", ",", "k", "−", "1", "j=0,1,⋯,k−1 ，有", "x", "i", "j", "=", "y", "j", "x", "ij", "​", " =y", "j", "​", "  。例如，", "X", "=", "\"ABCBDAB\"", "X=\"ABCBDAB\" ，", "Y", "=", "\"BCDB\"", "Y=\"BCDB\" 是 X 的一个子序列。对给定的两个字符序列，求出他们最长的公共子序列长度，以及最长公共子序列个数。X 的一个子序列。对给定的两个字符序列，求出他们最长的公共子序列长度，以及最长公共子序列个数。", "##**这道题的解析里面假如S1的最后一个元素与S2的最后一个元素相等，那么S1和S2的LCS就等于{S1减去最 后一个元素}与{S2减去最后一个元素} 的LCS再加上S1和S2相等的最后一个元素（如下图）", "\n", "S1 A B C B D A B S2 B D C A B A", "\n", "假如S1的最后一个元素与S2的最后一个元素不等（本例子就是属于这种情况），那么 S1和S2的LCS就等于：{S1减去最后一个元素}与S2的LCS， {S2减去最后一个元素}与S1的 LCS 中的最大的那个序列。**请问啥意思啊？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; math\n\ncity &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: [&lt;span class=\"hljs-number\"&gt;87&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;91&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;83&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;71&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;64&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;68&lt;/span&gt;], &lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: [&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;38&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;46&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;44&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;58&lt;/span&gt;]}\nn &amp;#61; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\nx &amp;#61; city[&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;]\ny &amp;#61; city[&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;]\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n\n&lt;span class=\"hljs-comment\"&gt;# 计算距离&lt;/span&gt;\na &amp;#61; np.zeros((n, n))\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;):\n        a[i, j] &amp;#61; math.sqrt(&lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(x[i] - x[j], &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(y[i] - y[j], &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;))\n&lt;span class=\"hljs-comment\"&gt;# 生成6个城市的全部排列&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; itertools\n\nv &amp;#61; &lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;(itertools.permutations([&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;], n))\n&lt;span class=\"hljs-comment\"&gt;# 计算最短总距离&lt;/span&gt;\nm &amp;#61; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(v)\njuli &amp;#61; []\nmin_sum &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# &amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;初始化min_sum为正无穷&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(m):\n    &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#43; a[v[i][j] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, v[i][j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n        &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#43; a[v[i][j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, v[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n        if sum &amp;lt; min_sum:\n            min_sum &amp;#61; sun &amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61; 在计算出结果后&amp;#xff0c;前一个结果和后一个结果直接比较\n        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    juli.append(&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;最小距离&amp;#xff1a;&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(juli))\nzuiyou &amp;#61; &lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(juli)   &lt;span class=\"hljs-comment\"&gt;# &amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;这行可以注释&lt;/span&gt;\nc &amp;#61; juli.index(&lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(juli))\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;最短路径&amp;#xff1a;&amp;#39;&lt;/span&gt;, v[c])\n&lt;span class=\"hljs-comment\"&gt;# 原问题采用先生成全部可能结果的排列&amp;#xff0c;存下来&amp;#xff0c;在比较的方法&amp;#xff1b;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 如何修改为不依赖存储的排列结果&amp;#xff0c;换句话说&amp;#xff0c;一个一个比较&amp;#xff0c;算一个&amp;#xff0c;比较一个的方法呢&amp;#xff1f;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["穷举法的排列比较，比较方式的改变", ["#从其中的某一城市出发，不重复地走完其余5个并回到原出发点，在所有可能的路径中求出路径长度最短的一条。", "\n", "六个市坐标为：1(87,7).2(91,38)、3(83,46).4(71,44).5(64,60)、6(68,58)", "\n", "import math", "city={'x':[87,91,83,71,64,68],'y':[7,38,46,44,60,58]}", "n=6", "x=city['x']", "y=city['y']", "import numpy as np", "#计算距离", "a=np.zeros((n,n))", "for i in range(6):", "    for j in range(6):", "        a[i,j] = math.sqrt(pow(x[i]-x[j],2)+pow(y[i]-y[j],2))", "#生成6个城市的全部排列", "import itertools", "v=list(itertools.permutations([1,2,3,4,5,6],n))", "#计算最短总距离", "m=len(v)", "juli=[]", "for i in range(m):", "    sum=0", "    for j in range(n-1):", "        sum=sum+a[v[i][j]-1,v[i][j+1]-1]", "    sum=sum+a[v[i][j+1]-1,v[i][0]-1]", "    juli.append(sum)", "print('最小距离：',min(juli))", "zuiyou=min(juli)", "c=juli.index(min(juli))", "print('最短路径：',v[c])", "原问题采用先生成全部可能结果的排列，存下来，在比较的方法；", "如何修改为不依赖存储的排列结果，换句话说，一个一个比较，算一个，比较一个的方法呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以尝试用itertools这个模块进行迭代&amp;#xff0c;这个模块里面有很多创建迭代器的函数。&lt;/p&gt;\n\n&lt;p&gt;给一个思路&amp;#xff1a;&lt;/p&gt;\n\n&lt;p&gt;第一组的元素个数最多可能有8个&amp;#xff0c;取值范围为1-10。&lt;/p&gt;\n\n&lt;p&gt;当第一个组为1个元素的时候&amp;#xff0c;第二组的元素个数最多可能为8个&amp;#xff1b;&lt;/p&gt;\n\n&lt;p&gt;当第一个组为2个元素的时候&amp;#xff0c;第二组的元素个数最多可能为7个&amp;#xff1b;&lt;/p&gt;\n\n&lt;p&gt;以此类推&amp;#xff0c;当第一个组为i个元素的时候&amp;#xff0c;第二组的元素个数最可能为9-i&amp;#xff0c;取值范围为1-10&amp;#xff0c;并减去第一组的元素&amp;#xff0c;剩余记为rem。&lt;/p&gt;\n\n&lt;p&gt;第三组的元素则为rem减去第二组中的元素。&lt;/p&gt;\n\n&lt;p&gt;itertools.combinations可以对一个集合的元素按照个数进行不同的组合&amp;#xff0c;例如&amp;#xff0c;从1-10中任取2个数字&amp;#xff0c;可能有以下组合。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;import itertools\nL1 &amp;#61; itertools.combinations(range(1,11), 2)\nprint(list(L1))&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre&gt;\n[(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (7, 8), (7, 9), (7, 10), (8, 9), (8, 10), (9, 10)]&lt;/pre&gt;\n\n&lt;p&gt;所以&amp;#xff0c;可以按照如下方式写代码&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;import itertools\n\ncount&amp;#61;0\n\nset_all&amp;#61;set(range(1,11))\n\nfor i in range(1,9):\n    for L1 in itertools.combinations(range(1,11), i):\n        rem&amp;#61;set_all-set(L1)\n        for j in range(1,10-i):\n            for L2 in itertools.combinations(rem, j):\n                L3&amp;#61;rem-set(L2)\n                count&amp;#43;&amp;#61;1\n                print(count,end&amp;#61;&amp;#39; &amp;#39;)\n                print(set(L1),set(L2),L3)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["python 穷举10个人划分到三个组的所有组合", ["我想10个人划分到3个组（A,B,C）中，也就是每个人都有三种选择，所以一共有3**10=59049种，想最终得出来的结果是", "\n\n", "A=[1],B=[2],C=[3，4，5，6，7,8，9，10]", "\n\n", "A=[1],B=[3],C=[2，4，5，6，7,8，9，10]", "\n\n", "A=[1],B=[4],C=[2，3，5，6，7,8，9，10]", "\n\n", "························································", "\n\n", "A=[3，4，5，6，7,8，9，10],B=[2], C=[1]"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, k, t, s;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;i);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;)\n    {\n        t &amp;#61; i; k &amp;#61; i * i; s &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (t) { s *&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; t /&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((k % s) &amp;#61;&amp;#61; i)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;No&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d out of range&amp;#34;&lt;/span&gt;,i);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["同构数的问题，可以用穷举法写写么", ["所谓“同构数”是指这样的数，它出现在它的平方数的右边，例如5的平方数是25, 25的平方数是625，所以5和25都是同构数。你的任务是判断整数x是否是同构数。若是同构数，输出“Yes”，否则输出“No”。x的取值范围是(1<=x<=10000),如果输入的x不在允许范围内，则输出错误提示信息“x out of range”。", "输入格式:", "只有一个整数。测试用例保证所有输入可以用int存储。", "输出格式:", "只有一行，为判断结果。", "输入样例:", "20000", "输出样例:", "20000 out of range", "\n", "\n", "```", "\n", "\n\n", "\n", "```"]], "Tag": "算法设计"}
{"Answer": "https://www.cnblogs.com/handsomecui/p/5233812.html", "Konwledge_Point": "智能穷举搜索", "Question": ["Necklace of Beads这个除了用穷举还有更好的算法么", ["Problem Description", "\nBeads of red, blue or green colors are connected together into a circular necklace of n beads ( n < 40 ). If the repetitions that are produced by rotation around the center of the circular necklace or reflection to the axis of symmetry are all neglected, how many different forms of the necklace are there? ", "\n\n", "\n\n", "Input", "\nThe input has several lines, and each line contains the input data n. ", "\n-1 denotes the end of the input file. ", "\n\n", "Output", "\nThe output should contain the output data: Number of different forms, in each line correspondent to the input data.", "\n\n", "Sample Input", "\n4", "\n5", "\n-1", "\n\n", "Sample Output", "\n21", "\n39"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;增加去重步骤&amp;#xff0c;答案是10种&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attribute\"&gt;color&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-string\"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;]\nres &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; j &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; m &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;):\n            a&amp;#61;&lt;span class=\"hljs-attribute\"&gt;color&lt;/span&gt;[i]\n            b&amp;#61;&lt;span class=\"hljs-attribute\"&gt;color&lt;/span&gt;[j]\n            c&amp;#61;&lt;span class=\"hljs-attribute\"&gt;color&lt;/span&gt;[m]\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; a!&amp;#61;&lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt; and b!&amp;#61;c and a!&amp;#61;c:\n                res&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(&lt;span class=\"hljs-selector-attr\"&gt;[a,b,c]&lt;/span&gt;)\n\ncount &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(len(res)):\n    res&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt;&amp;#61;sorted(res&lt;span class=\"hljs-selector-attr\"&gt;[i]&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; res:\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; not &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; count:\n        count&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(i)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(len(count)&lt;/span&gt;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["python用穷举法时怎么才能不考虑顺序对最后结果的影响啊", ["这个是题目要求：", "一个看不见的袋子中装有若干红、橙、黄、绿、蓝五种颜色的小球，每次随意摸出三个小球，输出三个小球颜色都不一样的所有可能的方案总数。", "【提示】不计算取求顺序的区别，例如红橙黄与黄橙红为一个方案。", "这是我写的代码：", "\n", "color=[", "'red'", ",", "'orange'", ",", "'yellow'", ",", "'green'", ",", "'blue'", "]\n", "n", "=0\n", "for", " i ", "in", " range(0,5):\n    ", "for", " j ", "in", " range(0,5):\n        ", "for", " m ", "in", " range(0,5):\n            ", "a", "=color[i]\n            ", "b", "=color[j]\n            ", "c", "=color[m]\n            ", "if", " a!=b ", "and", " b!=c ", "and", " a!=c:\n                n+=1\n", "print", "(n)\n", "\n", "但是这样求的话就考虑了顺序，所以要怎么改啊"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/078599113436120.png\" /&gt;&lt;/p&gt;&lt;br /&gt;最近在学Python&amp;#xff0c;就做了一下&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["使用穷举法将0.1.2.3输出全部互不相同且无重复数字的三位数", ["请问怎么样才能使用python实现这个程序?"]], "Tag": "算法设计"}
{"Answer": "Directory.GetFiles\r\nhttps://msdn.microsoft.com/zh-cn/library/wz42302f.aspx\r\n\r\n\r\n\r\n\r\n```\r\n Imports System\r\nImports System.IO\r\n\r\nPublic Class Test\r\n    Public Shared Sub Main()\r\n        Try\r\n            ' Only get files that begin with the letter \"c.\"\r\n            Dim dirs As String() = Directory.GetFiles(\"c:\\\", \"c*\") '列出C:\\下c开头的文件，你需要稍微修改，你的路径，列出所有文件是*.*\r\n            Console.WriteLine(\"The number of files starting with c is {0}.\", dirs.Length)\r\n            Dim dir As String\r\n            For Each dir In dirs\r\n                Console.WriteLine(dir)\r\n            Next\r\n        Catch e As Exception\r\n            Console.WriteLine(\"The process failed: {0}\", e.ToString())\r\n        End Try\r\n    End Sub\r\nEnd Class\r\n```", "Konwledge_Point": "智能穷举搜索", "Question": ["vb.net如何获取指定文件夹内所有文件的名称", ["最近vb2005写了个WinCE的程序,需要采集器读取本机指定文件夹内的文件名，并通过文件名处理每个文件里的内容。", "\n请各位高手指点一下，这个问题困扰我好几天了，一直找不到好的解决办法，再次谢过。", "\n比较着急，有此类开发经验的高手指点一二，谢谢。。。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;maxgys&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; r &amp;#61; m&amp;gt;n?m:n;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(r)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(m%r&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; n%r&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//最大的可以同时整除二者的数&amp;#xff0c;即为最大公约数。&lt;/span&gt;\n        r--;\n    } \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; r;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;  m,n, c;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;m, &amp;amp;n);\n    c &amp;#61; &lt;span class=\"hljs-built_in\"&gt;maxgys&lt;/span&gt;(m, n);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, c);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["求两个数的最大公约数用穷举法怎么写呀，按初学者最好理解的写", ["求两个数的最大公约数：", "int maxgys(int m,int n）"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;scanf(&amp;#34;%d %d&amp;#34;,&amp;amp;m,&amp;amp;n);&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["鸡兔同笼问题用穷举法解决，为啥输出不了东西，错在哪里了呀", []], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;牛客网 &amp;#xff0c;很多题&amp;#xff0c;可以在线编程测试。&lt;br /&gt;&lt;a href=\"https://www.nowcoder.com/finalexam\" id=\"textarea_1637289624281_1637289699635_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.nowcoder.com/finalexam&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["有没有适合C语言的初学者做的题，在PTA上发的很少，想多做点，穷举，递推，迭代，的算法题", ["有没有什么网站，或者题库也行，我只想练练手，马上要考试了，思路不行，总是想不对"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;因为两个队列都是有序的&amp;#xff0c;所以可以记录上次比较的位置&amp;#xff0c;然后下次比较接着往后比较就行&lt;br /&gt;例如&amp;#xff1a;我先取 dfmopsyz 中的d ,然后往后遍历abcegikint&amp;#xff0c;d比a大&amp;#xff0c;接着往后取b,d比b大&amp;#xff0c;接着取c&amp;#xff0c;d比c大&amp;#xff0c;接着取e&amp;#xff0c;d比e小&amp;#xff0c;d插在e前面&amp;#xff0c;然后记录下e&amp;#xff0c;此时d应该放的位置找到了&amp;#xff1b;&lt;br /&gt;第二次接着取f&amp;#xff0c;现在直接用f和e比&amp;#xff0c;f比e大&amp;#xff0c;取g&amp;#xff0c;f比g小&amp;#xff0c;此时记录下f的位置&amp;#xff0c;g放f前&amp;#xff0c;g应该插哪里也知道了。&lt;br /&gt;第三次取m&amp;#xff0c;就是m&amp;gt;h,m&amp;gt;i,m&amp;gt;j,m&amp;gt;K,m&amp;gt;l,m&amp;lt;n&amp;#xff0c;此时记录下n的位置&amp;#xff0c;m在n前&amp;#xff0c;m的位置也找到了&lt;br /&gt;以此类推&amp;#xff0c;直到两个队列其中一个遍历完成&amp;#xff0c;剩下一个队列未遍历的直接接在后面就可以&amp;#xff1b;&lt;br /&gt;可以搜搜归并排序看看思路&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["各位，看看这个排序如何实现，我有穷举法可以求，但是我想要更简单的方法来求这个，支个招。", ["这个结果代码怎么实现啊，书没写。各位帮忙看看，帮我想想更简单的方法，一定采纳正确的答案"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;for men in range(16):\n    for women in range(23):\n        child&amp;#61;45-women-men\n        if (men * 3&amp;#43;women * 2&amp;#43; child * 0.5 &amp;#61;&amp;#61; 45):\n            print men, women, child\n\n结果&amp;#xff1a;\nmen&amp;#61;0 women&amp;#61;15 child&amp;#61;30\nmen&amp;#61;3 women&amp;#61;10 child&amp;#61;32\nmen&amp;#61;6 women&amp;#61;5 child&amp;#61;34\nmen&amp;#61;9 women&amp;#61;0 child&amp;#61;36&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;由于最多只有45块砖&amp;#xff0c;男人的数量不会超过15人&amp;#xff0c;女人的数量不会超过22人&amp;#xff0c;一旦男人和女人的数量确定下来后&amp;#xff0c;小孩的人数应该是45-男人数-女人数。&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["python搬砖问题", ["某工地需要搬运砖块，已知男人一人可以搬3块，女人一人可以搬2块，小孩两人可以搬1块。用45个人正好搬45块砖，问有多少种搬法？‪‬‪‬‪‬‪‬‪‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‭‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‭‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‭‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‭‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‭‬‫‬‭‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬\n输出所有可能组合，即男人、女人、小孩的人数（人数可以为0）。"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; a &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;168&lt;/span&gt;; a&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;)&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; / &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt; * a &amp;#43; (&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;)&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; / &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; * (&lt;span class=\"hljs-number\"&gt;168&lt;/span&gt; - a) &amp;#61;&amp;#61; (&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;)&lt;span class=\"hljs-number\"&gt;76&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a&amp;#61;%d,b&amp;#61;%d&amp;#34;&lt;/span&gt;, a, &lt;span class=\"hljs-number\"&gt;168&lt;/span&gt; - a);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["穷举法甲、乙两数的和为168，甲数的八分之一与乙数的四分之三的和 为76，求甲、乙两数各是多少？", ["甲、乙两数的和为168，甲数的八分之一与乙数的四分之三的和", "为76，求甲、乙两数各是多少？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;n ** 0.5是求n的二分之一幂&amp;#xff0c;也就是求根号n&lt;br /&gt;n//i是整数除法&amp;#xff0c;比如9/2&amp;#61;4.5   9//2&amp;#61;4&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["用python去求一个数的所有约数", ["为什么这里要n", "0.5? n", "0.5之后不就取不到他本身和他的一半了吗", "然后还有那个d.add(n//i)是什么意思  "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;三重循环就行了&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint main()\n{\n    int n,&lt;span class=\"hljs-attribute\"&gt;count&lt;/span&gt;&amp;#61;0;\n    int a,b,c;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;0;a&amp;lt;&amp;#61;n/3;a&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;0;b&amp;lt;&amp;#61;n/2;b&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;c&lt;/span&gt;&amp;#61;0;c&amp;lt;&amp;#61;n*2;c&amp;#43;&amp;#43;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a&amp;#43;b&amp;#43;c &amp;#61;&amp;#61; n &amp;amp;&amp;amp; c%&lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;0 &amp;amp;&amp;amp; 3&lt;span class=\"hljs-number\"&gt;*a&lt;/span&gt;&amp;#43;2&lt;span class=\"hljs-number\"&gt;*b&lt;/span&gt;&amp;#43;c/&lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;n )\n                    count&amp;#43;&amp;#43;;\n            }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,count);\n    return 0;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["某工地需要搬运砖块，已知男人一人搬3块，女人一人搬2块，小孩两人搬1块。从键盘输入正整数N，用N人正好搬N块，问有多少种搬法？", ["C语言", "示例：", "思路：穷举法。与学生植树类似", "输入格式：100", "输出格式：7"]], "Tag": "算法设计"}
{"Answer": "用subprocess模块就可以不输出在日志中\r\n\r\n到后面使用管道的时候，再使用输出，详细的\r\n\r\n官方文档里说明了：[https://docs.python.org/zh-cn/3/library/subprocess.html](https://docs.python.org/zh-cn/3/library/subprocess.html \"\")\r\n\r\n当然，我的博客也有说明：[https://blog.csdn.net/oSuiYing12/article/details/106192075](https://blog.csdn.net/oSuiYing12/article/details/106192075 \"\")", "Konwledge_Point": "智能穷举搜索", "Question": ["如何让os.system结果不输出在日志里?", ["最近在搞个调用7z的穷举密码解压的脚本, 但是每次调用os.system(cmd), 日志就会疯狂打印密码错误, 有什么办法吗?"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;二分法&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/weixin_45740510/article/details/121100694\" id=\"textarea_1665903637941_1665903693581_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_45740510/article/details/121100694&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;模拟&amp;#xff1a;就是按照题目的要求和步骤来写程序&lt;br /&gt;贪心&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/weixin_49370884/article/details/126247776\" id=\"textarea_1665903637941_1665903693581_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_49370884/article/details/126247776&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;穷举&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/qq_44836294/article/details/108246866\" id=\"textarea_1665903637941_1665903693581_2\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/qq_44836294/article/details/108246866&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["程序设计竞赛中的问题", ["二分，模拟，贪心，穷举分别是什么意思，不是很了解，希望大家帮助"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;穷举法就设置几个循环即可&amp;#xff0c;这里有三个变量设置三个循环&amp;#xff0c;不过这个时间可能有点多&amp;#xff0c;需要执行60w次循环体&amp;#xff0c;不满足约束条件的可以直接continue即可&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["请问这种问题怎么写代码比较好？", ["求目标函数的最小值，X为整数，YZ精度0.1即可。穷举法不知道怎么弄"]], "Tag": "算法设计"}
{"Answer": "for i = 0 to 9\r\nfor j = 0 to 9\r\nprint \"12\" &amp; i &amp; \"5\" &amp; j\r\nnext\r\nnext", "Konwledge_Point": "智能穷举搜索", "Question": ["VB语言一个关于字符串组合的程序", ["这样的数字构成的字符串在VB中怎么穷举？", "\n12*5*", "\n输出12051 12052 ... 12959 "]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;/* Note:Your choice is C IDE */\n#include &amp;#34;stdio.h&amp;#34;\nvoid OutputPrimeFactor(int i);\nvoid main()\n{\n    /*\n    \t调用函数解决&amp;#xff0c;在主函数中穷举90 ~ 100间所有整数&amp;#xff0c;对每个整数调用函数OutputPrimeFactor( )进行求解&amp;#xff0c;\n    \t该函数没有返回值&amp;#xff0c;函数类型可以定义为void。\n    */\n    int i;\n    printf(&amp;#34;90~100以内的数如下&amp;#xff1a;\\n&amp;#34;);\n    for(i&amp;#61;90;i&amp;lt;&amp;#61;100;i&amp;#43;&amp;#43;)\n    {\n   \t\tOutputPrimeFactor(i);\n    }\n}\n\nvoid OutputPrimeFactor(int i){\n\tint a&amp;#61;0;\n\tint j&amp;#61;0;\n\t//求i对应的所有的因子\n\tprintf(&amp;#34;%d&amp;#61;&amp;#34;,i);\n\tfor(j&amp;#61;i;j&amp;gt;1;j--)\n\t{\n\t\tif(i%j&amp;#61;&amp;#61;0)\n\t\t{\n\t\t\t\n\t\t\ta&amp;#61;i/j;\n\t\t\tprintf(&amp;#34;%d*&amp;#34;,a);\n\t\t}\n\t\t\n\t}\n\tprintf(&amp;#34;\\n&amp;#34;);\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["对90 ~ 100以内的所有整数，逐一对其进行质因子分解，并按照质数因子从小到大顺序以乘积形式输出，", ["调用函数解决，在主函数中穷举90 ~ 100间所有整数，对每个整数调用函数OutputPrimeFactor( )进行求解，该函数没有返回值，函数类型可以定义为void。\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;穷举法可以这么做&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; j &amp;#61; i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; k &amp;#61; j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; l &amp;#61; k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt;( i&amp;#43;j&amp;#43;k&amp;#43;l&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;disp&lt;/span&gt;([i,j,k,l])\n&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;结果比较长&amp;#xff0c;就不显示出来啦&lt;br /&gt;有帮助望采纳&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["matlab关于for循环的问题", ["从1--100中选择四个整数，使得这四个数之和等于100，用for_loop穷举法，找出所有的可能组合"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;math.h&amp;gt;&lt;/span&gt;\nint main() {\n    int a,b,c,d,s1,s2,t;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;0;a&amp;lt;&amp;#61;9;a&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;0;b&amp;lt;&amp;#61;9;b&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-attribute\"&gt;s1&lt;/span&gt;&amp;#61;100&amp;#43;a*10&amp;#43;2;\n            &lt;span class=\"hljs-attribute\"&gt;s2&lt;/span&gt;&amp;#61;30&amp;#43;b;\n            &lt;span class=\"hljs-attribute\"&gt;t&lt;/span&gt;&amp;#61;s1*s2;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t/1000&amp;gt;0&amp;amp;&amp;amp;t/100%&lt;span class=\"hljs-attribute\"&gt;10&lt;/span&gt;&amp;#61;&amp;#61;7&amp;amp;&amp;amp;t/10%10&amp;#61;&amp;#61;5){\n                &lt;span class=\"hljs-attribute\"&gt;c&lt;/span&gt;&amp;#61;t/1000;\n                &lt;span class=\"hljs-attribute\"&gt;d&lt;/span&gt;&amp;#61;t%10;\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d %d\\n&amp;#34;&lt;/span&gt;,a,b,c,d);\n            }\n        }\n    } \n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["请看一下这个应该怎么写啊谢蟹！", ["有一个乘法算式，1A2*3B=C75D，该算式在四个字母所在处缺四个数，利用穷举法找出这四个数"]], "Tag": "算法设计"}
{"Answer": "http://blog.chinaunix.net/uid-24753924-id-177343.html", "Konwledge_Point": "智能穷举搜索", "Question": ["VB编码的排列问题，怎么代入变量呢？", ["VB编码的排列问题，1xyz2345，其中x y z必须都不同，也可能是1 x y 345，总之变量个数也不确定，所以不能直接循环，请问这种情况下怎么穷举呢？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先把数码管点亮&amp;#xff0c;注意位选和段选&amp;#xff0c;然后做按键检测&amp;#xff0c;最后按下了就让数码管数字加1就行了&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["如何用动态数码管来显示按键按下次数的记录", ["调用P3_0口", "不用穷举法", "如何才能实现这个功能。。‧⁺◟( ᵒ̴̶̥́ ·̫ ᵒ̴̶̣̥̀ )ꈨຶꎁꈨຶ꒦ິ^꒦ິ •᷄ࡇ•᷅ ˃ ˄ ˂̥̥ "]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;使用k-均值算法进行聚类&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["matlab关于排列组合的一个问题,求大佬们指点", ["课题是已知十个点,坐标已知,要求将十个点分为两组,每组5个点,并用循环的形式表达出所有组合可能。题主只会穷举法列出，对循环毫无思路，请大家指教一下"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;可以利用n位二进制数中有C&amp;#xff08;k&amp;#xff0c;n&amp;#xff09;个含有k个1的数&amp;#xff0c;例如四位二进制数里含有2个1的数为C&amp;#xff08;2&amp;#xff0c;4&amp;#xff09;&amp;#61;4*3/2&amp;#61;6个。&lt;br /&gt;这样可以利用这个规律来提高效率&amp;#xff0c;比如1-18这个范围就减少到16-18&amp;#xff0c;算这个范围即可。&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["#C语言题目 #二进制", ["想问下这个题目有没有什么好的思路？", "穷举法的话会超出题目给的时间限制", "一开始想的是设置一个数组来存放二进制的01，然后通过类似于全排列的算法来解决", "不知道大家有没有什么更好的解决方法"]], "Tag": "算法设计"}
{"Answer": "```\r\nint main()\r\n{\r\n\tint x, g, m;\r\n\tfor (x = 3; x &lt;= 100; x += 3) {\r\n\t\tfor (g = 1; g &lt;= 100; g++) {\r\n\t\t\tfor (m = 1; m &lt;= 100; m++) {\r\n\t\t\t\tif ((x + g + m == 100) &amp;&amp; (x * 3 + g + m / 3 == 100) &amp;&amp; (m % 3 == 0)) {\r\n\t\t\t\t\tprintf(\"小鸡，公鸡，母鸡的个数分别是：%d,%d,%d\\n\", x, g, m);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n} \r\n```", "Konwledge_Point": "智能穷举搜索", "Question": ["初学者百元买百鸡程序问题", ["题目是小鸡3元一只，公鸡1元一只，母鸡1元3只，一百元买一百只鸡，要用穷举法 ", "这是我打的程序，好像没什么问题，当运行一直无限循环的？"]], "Tag": "算法设计"}
{"Answer": "老实说，这代码问题太多，判断i是否是素数的循环里，Target范围不用从2到达i，到达i平方根即可，其次，i跟1,2的比较没用，\r\n再次，target不用累加，如果i是素数，判断到i的平方根即可确定是素数，如果i不是素数，则必然可以由素数的乘积构成，所以target\r\n的取值只需全部取素数即可", "Konwledge_Point": "智能穷举搜索", "Question": ["一个简单程序出错了求纠错，谢谢", ["我写了一个求1000-10000素数的程序，代码去图片，但为什么求出的从是9701后的所有数？", "\n\n", "#include \"stdafx.h\"", "\n#include ", "\n#include ", "\n\n", "int calculate(int i)", "\n{", "\n    int judge;", "\n    for (judge = 2; judge < i; judge++)    //穷举i的所有除数", "\n    {", "\n        if (i%judge == 0)", "\n        {", "\n            return 0;                   //不是素数", "\n        }", "\n        else if (i!=judge+1)                  //判断i有没有被所有除数除完   如果除完都没有余数就返回1  即这个数十素数！  如果没有除完继续循环除！", "\n            continue;", "\n        else", "\n            return 1;", "\n    }", "\n}", "\n\n", "int main()", "\n{", "\n    int i;", "\n    for (i = 1000; i < 10000; i++)      //穷举所有i ", "\n        if (calculate(i) == 1)", "\n            printf(\"%d\\n\", i);         //输出素数！", "\n    system(\"pause\");"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;你这个while 的判断条件不应该是n&amp;#xff01;&amp;#61;6174&amp;#xff0c;应该是别的&amp;#xff0c;不然你的while循环就没有跳出了&amp;#xff0c;当你的值是1000的时候就会卡在里面&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["用python验证卡普雷卡尔黑洞问题时运行不正常", ["问题遇到的现象和发生背景", "\n", "尝试用for循环在1000~9999内验证卡普雷卡尔黑洞问题时程序无终止(最终期望得到数值：6174）", "\n", "问题相关代码", "\n", "#Main exe", "\n", "def", " ", "main", "():\n    ", "for", " n ", "in", " ", "range", "(", "1000", ",", "10000", "):\n        check(", "str", "(n))\n        ", "if", " check(", "str", "(n)):\n            blackhole(", "str", "(n))\n        ", "else", ":\n            ", "print", "(", "'Illegal'", ")\n\n", "#Check the number", "\n", "def", " ", "check", "(", "n", "):\n    ", "if", " ", "not", " n.isnumeric():\n        ", "return", " ", "False", "\n    ", "elif", " ", "len", "(n)!=", "4", ":\n        ", "return", " ", "False", "\n    ", "elif", " n==n[", "0", "]*", "4", ":\n        ", "return", " ", "False", "\n    ", "else", ":\n        ", "return", " ", "True", "\n\n", "#Blackhole transform", "\n", "def", " ", "blackhole", "(", "n", "):\n    rom=n\n    ", "while", " n!=", "'6174'", ":\n        a=", "list", "(n)\n        b=max_number(a)\n        c=min_number(a)\n        n=", "str", "(b-c)          ", "#The type of n is string instead of int", "\n    ", "print", "(", "'{} OK'", ".", "format", "(rom))\n\n", "def", " ", "max_number", "(", "a", "):\n    a.sort(reverse=", "True", ")\n    ", "return", " ", "int", "(", "''", ".join(a))\n", "def", " ", "min_number", "(", "a", "):\n    a.sort()\n    ", "return", " ", "int", "(", "''", ".join(a))\n\n", "#Exe entrance", "\n", "if", " __name__==", "'__main__'", ":\n    main()\n", "\n", "运行结果及报错内容", "\n", "Traceback (most recent call last):", "  File \"G:/程序/数字黑洞穷举验证.py\", line 40, in ", "    main()", "  File \"G:/程序/数字黑洞穷举验证.py\", line 6, in main", "    blackhole(str(n))", "  File \"G:/程序/数字黑洞穷举验证.py\", line 26, in blackhole", "    b=max_number(a)", "KeyboardInterrupt", "运行时一直没有print的任何显示，只好手动终止程序。", "使用键盘手动终止程序时正在执行的位置也不同。", "\n", "我的解答思路和尝试过的方法", "\n", "怀疑过计算量较大，尝试过缩小验证范围（1000~1005），但没有用，好奇为什么。", "\n", "我想要达到的结果", "\n", "在1000~9999内验证卡普雷卡尔黑洞问题"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;只用了些基础的方式&amp;#xff0c;算法很简单&amp;#xff0c;只要计算一下位置正确且数字正确的个数和数字正确的个数&amp;#xff0c;然后和你给的条件暴力枚举即可&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;[] args)&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=\"hljs-comment\"&gt;// 枚举法 out: 0518 3510&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; str1 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;3628&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; str2 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;7019&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; str3 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;1429&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; str4 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;4576&amp;#34;&lt;/span&gt;;\n\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9999&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-comment\"&gt;// 补0&lt;/span&gt;\n            &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; cur &amp;#61; &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;.format(&lt;span class=\"hljs-string\"&gt;&amp;#34;%04d&amp;#34;&lt;/span&gt;, i);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-built_in\"&gt;check&lt;/span&gt;(cur, str1, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-built_in\"&gt;check&lt;/span&gt;(cur, str2, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-built_in\"&gt;check&lt;/span&gt;(cur, str3, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-built_in\"&gt;check&lt;/span&gt;(cur, str4, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n            System.out.&lt;span class=\"hljs-built_in\"&gt;println&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;密码&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;#43; cur);\n        }\n    }\n\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;boolean&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;check&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; target, &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; condition, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; targetPos, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; targetSame)&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] cnt1 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] cnt2 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n        &lt;span class=\"hljs-comment\"&gt;// 位置正确且数字正确个数&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; posCnt &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c1 &amp;#61; target.&lt;span class=\"hljs-built_in\"&gt;charAt&lt;/span&gt;(i);\n            &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c2 &amp;#61; condition.&lt;span class=\"hljs-built_in\"&gt;charAt&lt;/span&gt;(i);\n            cnt1[c1 - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;]&amp;#43;&amp;#43;;\n            cnt2[c2 - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;]&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-comment\"&gt;// 重复数字直接返回false&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (cnt1[c1 - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;] &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c1 &amp;#61;&amp;#61; c2) posCnt &amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-comment\"&gt;// 数字正确个数&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sameCnt &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n            sameCnt &amp;#43;&amp;#61; Math.&lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(cnt1[i], cnt2[i]);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; posCnt &amp;#61;&amp;#61; targetPos &amp;amp;&amp;amp; sameCnt &amp;#61;&amp;#61; targetSame;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;输出&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;密码&amp;#xff1a;0518\n密码&amp;#xff1a;3510\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["如何用java猜四位数密码？", ["猜密码:", "3 6 2 8 其中一个数字正确且位置正确", "7 0 1 9 其中两个数字正确，一个位置正确，一个位置不对", "1 4 2 9 一个数字正确，位置不对", "4 5 7 6 一个数字正确且位置正确", "以上条件成立，且四位密码数字不重复，实用java程序实现。", "有点类似力扣里的猜数字问题，这个问题仅用java基础进行编写(数组或者字符串，哈希和list不能用)，大概都是暴力穷举，希望网友们多多参与讨论。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i, j, k, l, s &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; k &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; k&amp;#43;&amp;#43;)\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (l &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; l &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; l&amp;#43;&amp;#43;)\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;#43; j &amp;#43; k &amp;#43; l &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;){\n                        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d,%d,%d,%d\\n&amp;#34;&lt;/span&gt;, i, j, k, l);\n                        s&amp;#43;&amp;#43;;\n                    }\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,s);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["问一下这题怎么做（Devc++）", ["这题穷举不会请大家教我一下越初级越好", "\n", "#include<iostream>", "\n", "using", " ", "namespace", " std;\n", "int", " main(){\n    ", "int", " a,b,c,", "sum", "=", "0", ";\n    ", "for", "(", "int", " i=", "1", ";i<", "10000", ";i++){    \n        a++;\n        b++;\n        c++;\n        ", "if", "(a+b+c+i==", "9", "){\n            ", "sum", "=", "sum", "+", "1", ";\n        }\n    \n    }\n    cout<<", "sum", ";\n    \n    \n    ", "return", " ", "0", ";\n} \n\n", "\n", "这是错的不知道怎么改", "\n", "\n\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://blog.csdn.net/SPESEG/article/details/126900190\" id=\"textarea_1663924541394_1663924611951_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;spark基本数据处理之推荐数据movielens_小李飞刀李寻欢的博客-CSDN博客&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["spark-sql如何按用户对time排序，序号为新增的一列", ["问题遇到的现象和发生背景", "\n", "怎么给dataset增加一列并按照用户编号啊？", "比如", "uid，movieid，time", "1   1009      20220101", "1     1002  20220104", "2   1019     20220203", "2   1012   20220209", "要求：按用户uid对time进行倒排序，序号增加一列", "\n", "我想要达到的结果", "\n", "增加后", "uid movieid   time      order", "1   1009     20220101 1", "1    1002    20220104  2", "2   1019     20220203  1", "2   1012     20220209 2", "\n", "uid很多很多，不能用穷举的方法（一个一个写的那种）"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;n&amp;#61;eval(input())\ni&amp;#61;1\nfor i in range(1,n&amp;#43;1):\n    if i%3&amp;#61;&amp;#61;2 and i%5&amp;#61;&amp;#61;1 and i%7&amp;#61;&amp;#61;0:\n        print(i,end&amp;#61;&amp;#39; &amp;#39;)\n    i&amp;#61;i&amp;#43;1\n &lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["关于#python#的问题：要求全列举出来）【输入形式】人数上限 n【输出形式】士兵人数【样例输入】60【样例输出】56 【样例输入】300【样例输出】56 161 266", ["有一群士兵，人数不超过n。韩信将其按照一行3人排队，余2人；按照一行5人排队，余1人；按照一行7人排队，刚好排成若干行。编写程序 计算士兵的人数。", "（提示：可以采用穷举法求解。当人数上限比较大时，会有多种结果，要求全列举出来）", "【输入形式】", "人数上限 n", "【输出形式】", "士兵人数", "【样例输入】", "60", "【样例输出】", "56", " ", "【样例输入】", "300", "【样例输出】", "56 161 266"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1.当然是正确的&lt;br /&gt;不能被素数整除&amp;#xff0c;必然也不能被合数整除&amp;#xff0c;因为合数是素数相乘得到的呀&amp;#xff0c;这还用写程序论证&amp;#xff1f;&lt;br /&gt;问题是在求素数的过程中如果还要顺带求比它小的素数&amp;#xff0c;反而复杂化了&amp;#xff0c;所以写程序一般都不考虑是素数还是合数&amp;#xff0c;直接遍历。&lt;br /&gt;如果你不是要验证一个数是质数还是合数&amp;#xff0c;而是要求N以内的所有质数&amp;#xff0c;那么筛法才是最效率的。&lt;br /&gt;2.穷举当然是可以破解的&amp;#xff0c;问题是需要花多长时间呢&amp;#xff1f;如果你花600年能破解&amp;#xff0c;跟破解不了有多大区别呢&lt;br /&gt;实际上&amp;#xff0c;算法也是在不断迭代的&amp;#xff0c;最早RSA算法只有128位&amp;#xff0c;现在512位也不止了吧&amp;#xff0c;好像已经有2048位的RSA了&lt;br /&gt;所以实际应用中你不需要600年破解&amp;#xff0c;只要3年不被破解基本上就等于永远不会被破解了&amp;#xff0c;因为3年之后算法提升&amp;#xff0c;破解难度又变大了&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["素数与RSA算法的疑问", ["我有几点思考，个人能力有限想不明白，望有人指点下：", "1、找素数的时候，我在想：不能被比他小的素数整除的数就是素数。请各位指正该推理成立吗？1亿以内的素数我都写程序论证过了，没有问题。", "2、都说RSA很难破译，是真的吗？人类目前找到的素数是个有限集合，公钥里面包含了两个大素数的乘积，如果进行穷举，是不是就可以破解了？"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-C&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt; &lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stack&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;set&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iomanip&amp;gt;&lt;/span&gt; &lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; result &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;];\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;output&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;#43;&amp;#43;)\n     {\n          &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;lt; n - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; a[i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; a[i &amp;#43; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;#61;&amp;#61; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            result&amp;#43;&amp;#43;;\n        }\n     }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;search&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;                                     \n&lt;/span&gt;{\n     &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(m&amp;#61;&amp;#61;n)\n     {\n          &lt;span class=\"hljs-built_in\"&gt;output&lt;/span&gt;(n);\n     }\n     &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n     {\n          &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;#43;&amp;#43;)\n          {\n               a[m]&amp;#61;i;\n               &lt;span class=\"hljs-built_in\"&gt;search&lt;/span&gt;(m&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,n);\n          }\n     }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; array[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;65&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;114&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;351&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;616&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1081&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1897&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3329&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5842&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10252&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;17991&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;31572&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;55405&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;97229&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;170625&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;299426&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;525456&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;922111&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1618192&lt;/span&gt;};\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    cin&amp;gt;&amp;gt;n;\n    &lt;span class=\"hljs-built_in\"&gt;search&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,n);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(array[n] !&amp;#61; result)cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;error&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;\n    cout&amp;lt;&amp;lt;result&amp;lt;&amp;lt;endl;\n    result &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;源码给你你继续研究吧&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["取数游戏 Description", ["题目描述", "我们来玩一个游戏：自然数1到N，按顺序列成一排，你可以从中取走任意个数，但是间隔一个的不能同时被取走，如果1表示取走，0表示不取走，则不能出现101的连续串。", "如果你能算出一共有多少种取法，那么你会被天神小泰泰奖励。", "输入", "输入仅包含一个数n（1≤ n ≤ 25）。", "输出", "输出仅包含一个数你的答案。", "样例", "输入  复制", "4", "输出  复制", "12", "提示", "递归穷举即可。答案在2147483647以内。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;机器学习里面回归拟合啊&amp;#xff0c;至于逻辑回归还是线性&amp;#xff0c;这个看你的数据了&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["【毕不了业了】这玩意除了神经网络还有什么别的好的算法吗？", ["​接了个方向，现在毕不了业了……", "\n", "如下：", "\n", "A到L是12个变量，其中前5个是输入，后7个是输出；", "\n", "Q1:  我现在知道这12个变量的范围，比如A（100~400）；我现在要建立输入与输出之间的关系。", "        我需要去了解什么算法呢？除了神经网络还有好的办法吗？", "​", "\n", "\n", "Q2:  现在输出区间里有个最优的数值，但是我不知道它是多少，也不知道该怎么去取得它。怎么搞呢？在Q1的基础上直接穷举法吗？", "\n", "恳请回答，万分感谢"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint main()\n{\nint j,i[5];\nint sign;\nint result;\nint &lt;span class=\"hljs-attribute\"&gt;count&lt;/span&gt;&amp;#61;0;\nint num[6];\nint left,right;\nchar oper[5]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;};\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;1;j&amp;lt;&amp;#61;5;j&amp;#43;&amp;#43;)\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;num[j]);\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;result);\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i[1]&amp;#61;1;i[1]&amp;lt;&amp;#61;4;i[1]&amp;#43;&amp;#43;)\n{\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((i[1]&amp;lt;4)||(num[2]!&amp;#61;0))\n{\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i[2]&amp;#61;1;i[2]&amp;lt;&amp;#61;4;i[2]&amp;#43;&amp;#43;)\n{\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((i[2]&amp;lt;4)||(num[3]!&amp;#61;0))\n{\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i[3]&amp;#61;1;i[3]&amp;lt;&amp;#61;4;i[3]&amp;#43;&amp;#43;)\n{\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((i[3]&amp;lt;4)||(num[4]!&amp;#61;0))\n{\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i[4]&amp;#61;1;i[4]&amp;lt;&amp;#61;4;i[4]&amp;#43;&amp;#43;)\n{\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((i[4]&amp;lt;4)||(num[5]!&amp;#61;0))\n{\n&lt;span class=\"hljs-attribute\"&gt;left&lt;/span&gt;&amp;#61;0;\n&lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;num[1];\n&lt;span class=\"hljs-attribute\"&gt;sign&lt;/span&gt;&amp;#61;1;\n\n                                        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;1;j&amp;lt;&amp;#61;4;j&amp;#43;&amp;#43;)\n                                            {\n                                                switch(oper[i[j]])\n                                                {\n                                                    case &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n                                                    &lt;span class=\"hljs-attribute\"&gt;left&lt;/span&gt;&amp;#61;left&amp;#43;sign*right;\n                                                    &lt;span class=\"hljs-attribute\"&gt;sign&lt;/span&gt;&amp;#61;1;\n                                                    &lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;num[j&amp;#43;1];\n                                                    break;\n                                                    case &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n                                                    &lt;span class=\"hljs-attribute\"&gt;left&lt;/span&gt;&amp;#61;left&amp;#43;sign*right;\n                                                    &lt;span class=\"hljs-attribute\"&gt;sign&lt;/span&gt;&amp;#61;-1;\n                                                    &lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;num[j&amp;#43;1];\n                                                    break;\n                                                    case &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n                                                    &lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;right*num[j&amp;#43;1];\n                                                    break;\n                                                    case &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n                                                    &lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;right/num[j&amp;#43;1];\n                                                    break;\n                                                }\n                                             }\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(left&amp;#43;sign*&lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;&amp;#61;result)\n                    {\n                        count&amp;#43;&amp;#43;;\n                        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;1;j&amp;lt;&amp;#61;4;j&amp;#43;&amp;#43;)  \n                            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c &amp;#34;&lt;/span&gt;,oper[i[j]]);\n                    }\n                                    }\n                                }\n                        }\n                }\n            }\n        }\n    }\n}\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;count&lt;/span&gt;&amp;#61;&amp;#61;0)\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;No solution&amp;#34;&lt;/span&gt;);\n    getchar();\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["C语言编程填入运算符", ["问题描述：输入 5 个数与一个结果，设计程序在 5 个数中填入运算符（ + - * /）使其与结果相等，或回答做不到。5个数顺序固定，运算顺序固定为从左向右，不考虑运算符优先性。除法按整数除法来运算，保证有解的输入都是有唯一解的。", "输入形式：5个整数a, b, c, d, e和一个结果整数result。0<a,b,c,d,e<=50。", "输出形式：依次输出4个运算符，以空格隔开；没有解时输出\"No solution\"。", "如何遍历各种情况呢？一共64种填入可能，如何穷举完全？"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先排序&amp;#xff0c;再去除重复数字&amp;#xff0c;然后遍历一遍&amp;#xff0c;若前后两个数据之差为1&amp;#xff0c;则符合题目要求&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["如何用C语言完成，希望大家给于思路", ["提示用户输入数据规模N，然后随机生成N个正整数（所有整数均小于10000），输出其中包含的所有相邻数对（数值相差为1的两个整数）以及相邻数对的总数。例如，若N=7，随机生成7个数据{2,0,3,6,1,0,4}，其中一共包括4个相邻数对，即（1,0）、（1,2）、（2,3）和（4,3）。注意，（0,1）和（1,0）是相同的相邻数对，不要重复统计和输出显示。要求：不允许使用双重循环穷举的方式查找相邻数对。"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1、内循环上增加 sum &amp;#61; 0; temp &amp;#61; i;&lt;br /&gt;2、内循环内部只需要 sum &amp;#43;&amp;#61; pow(temp % 10, n); temp /&amp;#61; 10;&lt;br /&gt;代码参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, min, max, t, sum;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Enter n(2&amp;lt;n&amp;lt;8):&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    min &amp;#61; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    max &amp;#61; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; min; i &amp;lt; max; i&amp;#43;&amp;#43;) {\n        t &amp;#61; i;\n        sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; n; j&amp;#43;&amp;#43;) {\n            sum &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(t % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, n);\n            t /&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum &amp;#61;&amp;#61; i) {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, i);\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["关于水仙花数如何解决", ["输出n位数全部的水仙花数", "\n", "#", "include", "<math.h>", "\n", "int", " ", "main", "(", "void", ")", "\n", "{\n    ", "int", " n,min,max,k,i,bit,temp,sum=", "0", ";\n    ", "printf", "(", "\"Enter n(2<n<8):\"", ");", "/*输入n*/", " \n    ", "scanf", "(", "\"%d\"", ",&n);\n    min=", "pow", "(", "10", ",n);", "/*下限，比如n==3，min=100*/", " \n    max=", "pow", "(", "10", ",n+", "1", ");", "/*上限限，比如n==3，max=1000*/", "\n    ", "for", "(i=min;i<max;i++)", "/*穷举min~max中的数*/", "\n    {\n        ", "for", "(k=", "1", ";k<=n;k++)", "/*判断水仙花数*/", "\n        {\n            temp=i;\n            bit=i%", "10", ";\n            i=i/", "10", ";\n            sum=sum+", "pow", "(bit,n);\n        }\n        ", "if", "(sum==i)\n        {\n            ", "printf", "(", "\"%d \"", ",i);\n        }\n    }\n    \n    \n    \n    ", "return", " ", "0", ";\n } \n\n", "\n", "运行结果及报错内容", "\n", "可以通过编译，没有输出"]], "Tag": "算法设计"}
{"Answer": "https://blog.csdn.net/wind__chaser/article/details/91386065", "Konwledge_Point": "智能穷举搜索", "Question": ["网络博客回溯法素数环问题疑惑？", ["#include<cstdio>\n#include<iostream>\n#include<cstdlib>\n#include<cmath>\nusing namespace std;\nbool b[11]= {0};\nint total=0,a[11]= {0};\nint search(int);//回溯过程\nint print();//输出方案\nbool pd(int,int);//判断素数\nint main()\n{\n    search(1);\n    cout<<total<<endl;//输出总方案数\n}\nint search(int t)\n{\n    int i;\n    for (i=1; i<=10; i++)//有20个数可选\n        if (pd(a[t-1],i)&&(!b[i]))//判断与前一个数是否构成素数及该数是否可用\n        {\n            a[t]=i;\n            b[i]=1;//跟着i标记\n            if (t==10)\n            {\n                if (pd(a[10],a[1]))\n                    print();\n            }\n            else\n                search(t+1);\n            b[i]=0;\n        }\n}\nint print()\n{\n    total++;\n    cout<<\"<\"<<total<<\">\";\n    for (int j=1; j<=10; j++)\n        cout<<a[j]<<\" \";\n    cout<<endl;\n}\nbool pd(int x,int y)\n{\n    int k=2,i=x+y;\n    while (k<=sqrt(i)&&i%k!=0)//判断相邻数的和是否是素数\n        k++;\n    if (k>sqrt(i))\n        return 1;\n    else\n        return 0;\n}\n", "\n\n", "以上是网上博客解决素数环的问题，我一直比较疑惑的点是最终的输出结果为什么只有1，2，3，5，7开头的，4，6，8，9，10开头的呢", "\n当前结果6 1 10 7 4 9 2 3 8 5", "\n当前结果6 1 10 7 4 9 8 3 2 5", "\n当前结果6 1 10 9 2 5 8 3 4 7", "\n当前结果6 1 10 9 8 5 2 3 4 7", "\n比如以上也是满足的", "\n另外一个穷举法", "\n\n", "#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nint A[100], isp[100], n;//isp是素数表，用于存放素数 \n\nint is_prime(int x){\n    for(int i = 2; i < x; i++){\n        if(x % i == 0) return 0;\n    }\n    return 1;\n}\n\nvoid printPrime(){\n    //生成第一个排列，顺序排列， A[1] = 1 A[2] = 2 \n    for(int i = 1; i <= n; i++){\n        A[i] = i;\n    }\n    do{\n        bool ok = true;\n        for(int i = 1; i < n; i++){\n            int index = A[i]+A[i+1];\n            if(!isp[index]){\n                ok = false;\n                break;\n            }\n        }\n        //第一个和最后一个数的和 \n        if(!isp[A[1] + A[n]]){\n            ok = false;\n        }\n        if(ok){\n            cout << \"当前结果\"; \n            for(int i = 1; i <= n; i++){\n                cout << A[i] << \" \";\n            }\n            cout << endl;\n        }\n    } while(next_permutation(A+2, A+n+1));//第一个一定为1不变，只更新第2个到最后1个的排列\n}   //因为A[0]=0,A[1]=1\n\nint main(){\n    cin >> n;\n    //记录1~n*2的值是否为素数 \n    for(int i = 2; i <= n*2; i++){\n        isp[i] = is_prime(i);\n    }\n    printPrime();\n}\n", "\n\n", "穷举法却可以有1到10开头的都有，我想不明白第一个程序为什么不能输出全部，实在想不明白，希望大佬指点一下，"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;1.多了个分号&lt;br /&gt;2.if没括号&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/365955960276196.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["c语言程序设计函数章节课后习题", ["c语言程序设计课后题目搞不懂", "\n", "遇到一个错误翻译过来也看不懂", "\n", "\n", "#include <stdio.h>", "\n//穷举法\n\n", "int", " gcd(", "int", " a,", "int", " b)\n{    \n ", "if", "(a==", "0", ");\n    ", "return", " b;\n    ", "if", " (b==", "0", ")\n    ", "return", " a;\n    ", "if", " (a==b)\n    ", "return", " a;\n    ", "int", " gcd_res = a > b?b : a;\n    ", "while", "(gcd_res > ", "1", ")\n    {\n        ", "if", "(a%gcd_res==", "0", ")&& (b%gcd_res==", "0", ")\n        ", "return", " gcd_res;\n            gcd_res--;\n        }\n    ", "return", " gcd_res;\n}\n", "int", " main()\n{\n    ", "int", " a , b;\n    ", "printf", "(", "\"请输入a和b\"", ");\n    scanf(", "\"%d %d\"", ",&a,&b);\n    \n    ", "//", "最大公约数\n    ", "int", " gcd_result = gcd(a,b);\n    ", "printf", "(", "\"%d 和 %d的最大公约数为：>%d\\n\"", ",a,b,gcd_result);\n    ", "return", " ", "0", ";\n    }\n\n", "\n", "[Error] expected identifier before '(' token", "\n", "我用#define，再找了一下同学，同学说我这个少个中括号，但是我每次审查都发现不了错在哪", "\n", "我想要明白这个问题出在哪里"]], "Tag": "算法设计"}
{"Answer": "因为x,y,z均是没有初始值的变量，但你把它们作为了循环的条件", "Konwledge_Point": "智能穷举搜索", "Question": ["小白看着大神：内心渴望满满：千言万语归为一句话：哪位大神帮我看看这个程序", ["题目内容：", "\nn块砖( 27<n<=77 )，36人搬，男搬4，女搬3，两个小孩抬一块砖，要求一次搬完，问男人、女人和小孩各需多少人？请用穷举法编程求解,n的值要求从键盘输入。输出结果按照男人数量升序给出（见下面示例3）。", "\n\n", "程序的运行结果示例1：", "\n\n", "Input n(27<n<=77):", "\n28↙", "\nmen=0,women=4,children=32", "\n\n", "程序的运行结果示例2：", "\nInput n(27<n<=77):", "\n36↙", "\nmen=3,women=3,children=30", "\n\n", "程序的运行结果示例3：", "\nInput n(27<n<=77):", "\n60↙", "\nmen=2,women=14,children=20", "\nmen=7,women=7,children=22", "\nmen=12,women=0,children=24", "\n\n", "输入提示： \"Input n(27\n输入格式: \"%d\"  ", "\n输出格式：\"men=%d,women=%d,children=%d\\n\"", "\n为避免出现格式错误，请直接拷贝粘贴题目中给的格式字符串和提示信息到你的程序中。", "\n我的代码：", "\n#include", "\nint main()", "\n{", "\nint n,x,y,z;", "\nprintf(\"Input n(27\nscanf(\"%d\",&n);", "\nwhile(x>=0&&x<=20)", "\n{", "\nwhile(y>=0&&y<=25)", "\n{", "\nwhile(z>=0&&z<=150)", "\n{", "\nif(x*4+y*3+z/2==n)", "\nprintf(\"men=%d,women=%d,children=%d\\n\",x,y,z);", "\n}", "\n}", "\n}", "\nreturn 0;", "\n}", "\n那么问题来了，为啥我按下回车键它没有反应"]], "Tag": "算法设计"}
{"Answer": "![图片说明](https://img-ask.csdn.net/upload/202010/12/1602471631_269551.png)\r\n基本功啊基本功\r\n首先告诉我你的参数d是干嘛用的？ 是没用的\r\n然后我明白你是想每次都用当前的利润总和与当前最大利润对比，但是你仔细看看，每次比较，当前最大利润都是m = 0，这还有比较的必要吗？\r\n为什么是这样呢？因为你没有把每次计算好的m传递出来，回溯什么的不明白就自己拿笔把每一次的结果都写出来，多练多写\r\n好了回到正题，既然要保持一个最大利润参数作为每次比较的依据，你得把它传递出来!\r\n[图片说明](https://img-ask.csdn.net/upload/202010/12/1602472698_275202.png)\r\n代码结构我就不动了，增加一个m参数传递\r\n结果你自己看看对不对，第一个return是为了em.回溯的参数传递，第二个return传出最终结果\r\n![图片说明](https://img-ask.csdn.net/upload/202010/12/1602472886_26278.png)", "Konwledge_Point": "智能穷举搜索", "Question": ["小白搞不懂回溯啊 求大佬指教", ["问题是这样的：", "\n有一个行李箱", "\n给出最多能装_多少kg__的限制（w_limit)", "\n，又给了一个货物利润的array1和对应货物重量的array2", "\n，要求output利润的最大值", "\n\n", "然后这是我写的代码", "\n\n", "def subset(S,sub,array1,array2,n,d):\n    m=0\n    if len(S) == 0:\n        pft_sum=0\n        wgt_sum=0\n        for i in sub:\n            pft_sum += array1[i]\n            wgt_sum += array2[i]\n            if wgt_sum <= n:\n                if pft_sum > m:\n                    m = pft_sum\n        return \n    subset(S[1:],sub,array1,array2,n,d)\n    subset(S[1:],sub+[S[0]],array1,array2,n,d)\n    return m\n\n\n\n\n\n\nw_limit=25\nwgt=[2, 8, 5, 6, 15, 3, 7]\npft=[30, 100, 10, 120, 280, 50, 40]\n\nS=[]\nfor i in range(len(wgt)):\n    S.append(i)\n\n\nd=subset(S,[],pft,wgt,w_limit,[])\nprint(d)\n\n", "\n\n", "但是这样子算出来的d一直是0，是因为输出的m每一个回溯都会=0一下吗", "\n求解！"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;先说你代码问题再给你ac的代码。&lt;br /&gt;问题1. sr太小了&amp;#xff0c;而且这个数组没必要。这种算法题不必等着读入完毕再处理&amp;#xff0c;可以输入一个处理一个&lt;br /&gt;问题2. 生成小于pd的所有素数这个for循环&amp;#xff0c;只需要执行一次&amp;#xff0c;应该放在main中就行了&amp;#xff0c;放在PD函数里面&amp;#xff0c;每次执行太浪费时间&lt;br /&gt;问题3. 判断是不是素数只需要i&lt;em&gt;i&amp;lt;&amp;#61; n就行了&amp;#xff0c;因为如果n%i&amp;#61;&amp;#61;0&amp;#xff0c;那么n%(n/i)&amp;#61;&amp;#61;也可以。就相当于i&lt;/em&gt;(n/i)&amp;#61;n&lt;br /&gt;问题4 and在C&amp;#43;&amp;#43;是关键字&amp;#xff0c;虽然在C不是关键字&amp;#xff0c;但是也要注意一下&lt;br /&gt;另外你代码太多冗余了&amp;#xff0c;我就你代码的基础上进行了优化&amp;#xff0c;思路还是你的思路&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;ac的代码在下面&amp;#xff0c;没问题的话&amp;#xff0c;请点击采纳答案&lt;/strong&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; su[&lt;span class=\"hljs-number\"&gt;1229&lt;/span&gt;], sum, q; &lt;span class=\"hljs-comment\"&gt;//小于10000的所有素数有1229个, and在C&amp;#43;&amp;#43;中是关键字&amp;#xff0c;改成了Sum&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;PD&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; pd)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; number &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, w;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; r &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; r &amp;lt; q; r&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-comment\"&gt;//穷举法&amp;#xff0c;用number标出该数的所有分解方式&lt;/span&gt;\n        sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (w &amp;#61; r; w &amp;lt; q; w&amp;#43;&amp;#43;) {\n            sum &amp;#61; sum &amp;#43; su[w];\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum &amp;#61;&amp;#61; pd) {\n                number&amp;#43;&amp;#43;;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sum &amp;gt; pd)\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, number);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; n &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;; n&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-comment\"&gt;//生成小于pd的所有素数,并安置在su数组中&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i * i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-comment\"&gt;// i只需要枚举到 根号n即可&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n % i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i * i &amp;gt; n) su[q&amp;#43;&amp;#43;] &amp;#61; n;\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;x), x) {\n        &lt;span class=\"hljs-built_in\"&gt;PD&lt;/span&gt;(x);\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["c语言 我的代码出现问题但是我找不到，如何解决？", ["本人c语言初学者，在pta上做题过程中，我的代码符合题目要求也能运行，但是最后出现了", "段错误", "，但是找不到错误在哪。", "\n", "题目", "：", "(有一些正整数可以分解为一个或连续多个素数的和。给定一个正整数，有多少种可能的分解方式？例如，53可以分解为 5 + 7 + 11 + 13 + 17和53。整数41有三种分解方式，即2+3+5+7+11+13, 11+13+17和41。而整数3只有一种分解方式，即3。整数20无法分解为连续素数的和。 注意：在分解一个整数时，素数必须是连续的, 因此7 + 13 和 3 + 5 + 5 + 7 都不是20的有效分解方式，因为7和13之间有一个素数11，而 3 + 5 + 5 + 7这种分解方式中5重复出现了。)", "\n", "请编写一个程序，对于给定的一个正整数，输出其有效的分解方式有多少。", "\n", "输入：", "每行给出一个正整数，其值在2到10000之间，包括2和10000。遇到0时代表输入结束，并且0不用分解。", "\n", "输出：", "输出由多行组成。每行对应输入的一行（输入中由0结束的行除外），该行的值对应输入中整数的有效素数分解的个数，行尾不得有多余的符号", "。", "\n", "输入样例", "：", "2", "3", "17", "41", "20", "666", "12", "53", "0", "\n", "输出样例", "：", "1", "1", "2", "3", "0", "0", "1", "2", "\n", "代码", "：(变量设置的有点乱 请见谅)", "\n", "#", "include", " ", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " ", "PD", "(", "int", " pd)", ";", "//声明函数", "\n    ", "int", " o;\n    ", "int", " sr[", "30", "],x=", "0", ";\n    ", "for", "(;;)\n        {\n            ", "if", "(", "scanf", "(", "\"%d\"", ",&sr[x])==", "1", ")\n            {\n            ", "if", "(sr[x]==", "0", ")\n                ", "break", ";\n            x++;\n            }\n        }", "//输入一组数据储存在名为sr的数组中", "\n    ", "for", "(", "int", " a=", "0", ";a<x;a++)\n    {\n        o=sr[a];\n        ", "PD", "(o);\n    }", "//调用PD函数", "\n    ", "return", " ", "0", ";\n}\n\n", "int", " ", "PD", "(", "int", " pd)", "\n", "{\n    ", "int", " su[", "1229", "],", "and", ",q=", "0", ",number=", "0", ",w;", "//小于10000的所有素数有1229个", "\n    ", "for", "(", "int", " n=", "1", ";n<=pd;n++)\n    {\n        ", "for", "(", "int", " i=", "2", ";i<=n;i++)\n        {\n            ", "if", "(i==n)\n            {\n             su[q]=n;\n             q++;\n            }\n            ", "else", " ", "if", "(n%i==", "0", ")\n                ", "break", ";\n        }\n    }   ", "//生成小于pd的所有素数,并安置在su数组中", "\n    ", "for", "(", "int", " r=", "0", ";r<q;r++)\n    {\n        ", "and", "=", "0", ";\n        ", "for", "(w=r;w<q;w++)\n        {\n            ", "and", "=", "and", "+su[w];\n            ", "if", "(", "and", "==pd)\n            {\n                number++;\n            }\n            ", "if", "(", "and", ">pd)\n            ", "break", ";\n        }\n    }   ", "//穷举法，用number标出该数的所有分解方式", "\n        ", "printf", "(", "\"%d\\n\"", ",number);\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;\n#define MAXSTRLEN 20\ntypedef struct SString {\n    int leng;\n    char data[MAXSTRLEN&amp;#43;1];   //第一个位置不使用\n}SString;\n\nvoid InitSString(SString &amp;amp;S, int le){\n    printf(&amp;#34;Init(%d): &amp;#34;,le);\n    S.leng &amp;#61; le;\n    for(int i&amp;#61;1;i&amp;lt;&amp;#61;S.leng;i&amp;#43;&amp;#43;) scanf(&amp;#34;%c&amp;#34;,&amp;amp;S.data[i]);\n    getchar();\n}\n\n//简单模式匹配\nint Index(SString S, SString T, int pos){\n    //返回  模式串T  在主串S中第pos个字符之后 的位置。如果不存在&amp;#xff0c;返回0\n    //T非空  1&amp;lt;&amp;#61;pos&amp;lt;&amp;#61;S.leng\n    int i&amp;#61;pos, j&amp;#61;1;\n    while(i&amp;lt;&amp;#61;S.leng &amp;amp;&amp;amp; j&amp;lt;&amp;#61;T.leng){\n        if(S.data[i]&amp;#61;&amp;#61;T.data[j]) {i&amp;#43;&amp;#43;;j&amp;#43;&amp;#43;;}\n        else{i &amp;#61; i-j&amp;#43;2; j&amp;#61;1;}\n    }\n    if(j&amp;gt;T.leng) return i-T.leng;\n    else return 0;\n}\n\n\n//KMP算法\nint Index_KMP(SString S, SString T, int pos, int next[]){\n    //T非空&amp;#xff0c;1&amp;lt;&amp;#61;pos&amp;lt;&amp;#61;S.leng\n    int i&amp;#61;pos,j&amp;#61;1;\n    while(i&amp;lt;&amp;#61;S.leng &amp;amp;&amp;amp; j&amp;lt;&amp;#61;T.leng)\n        if(j&amp;#61;&amp;#61;0||S.data[i]&amp;#61;&amp;#61;T.data[j]) {i&amp;#43;&amp;#43;;j&amp;#43;&amp;#43;;}\n        else j &amp;#61; next[j];\n    if(j&amp;gt;T.leng) return i-T.leng;\n    else return 0;\n}\n//next的计算方法\nvoid get_next(SString T, int next[]){\n    int i&amp;#61;1,j&amp;#61;0;\n    next[1]&amp;#61;0;\n    while(i&amp;lt;T.leng)\n        if(j&amp;#61;&amp;#61;0 || T.data[i]&amp;#61;&amp;#61;T.data[j]) {i&amp;#43;&amp;#43;;j&amp;#43;&amp;#43;;next[i]&amp;#61;j;}\n        else j &amp;#61; next[j];\n}\n//next的计算方法的修正\nvoid get_nextval(SString T, int *nextval){\n    int i&amp;#61;1,j&amp;#61;0;\n    nextval[1]&amp;#61;0;\n    while(i&amp;lt;T.leng)\n        if(j&amp;#61;&amp;#61;0 || T.data[i]&amp;#61;&amp;#61;T.data[j]) {\n            i&amp;#43;&amp;#43;;j&amp;#43;&amp;#43;;\n            if(T.data[i]!&amp;#61;T.data[j]) nextval[i]&amp;#61;j;\n            else nextval[i] &amp;#61; nextval[j];\n        }\n        else j &amp;#61; nextval[j];\n}\nint main(){\n    SString S,T;\n    InitSString(S,10);\n    InitSString(T,5);\n    printf(&amp;#34;Easy_Index:%d\\n&amp;#34;,Index(S,T,1));\n\n    int next[T.leng&amp;#43;1];\n    get_nextval(T,next);\n    printf(&amp;#34;KMP_next:%d\\n&amp;#34;,Index_KMP(S,T,1,next));\n\n    get_next(T,next);\n    printf(&amp;#34;KMP_nextval:%d\\n&amp;#34;,Index_KMP(S,T,1,next));\n\n    return 1;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;C语言描述简单模式匹配和KMP算法。&lt;/p&gt;\n\n&lt;p&gt;定长顺序存储SString串&amp;#xff1a;一个结构体中&amp;#xff1a;一个数组存储字符串&amp;#xff0c;一个整型存储长度&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["kmp函数代码填空 字符串匹配", ["\n", "#include <stdio.h>\n#include <malloc.h>\n#define N 100\n#include<string.h>\nint lengthStr(char str[])\n{\n    int i;\n    int len;\n    len = 0;\n    i = 0;\n    while (str[i] != '\\0')\n    {\n        i ++;\n    }\n    len = i;\n    return len;\n}\nint strMatchBF(char mainStr[], char subStr[])\n{\n    // 穷举法进行字符串匹配\n    // 返回子串subStr与主串mainStr相匹配的第一个位置\n    int  lenMS,lenSS;\n    int i,j;\n    int isOK;\n    lenMS = lengthStr(mainStr); // 计算主串的长度\n    lenSS = lengthStr(subStr); // 计算子串（模式串）的长度\n    i = 0;\n    isOK = 0;\n    while (i<lenMS){\n        isOK = 1;\n        for (j = 0; j < lenSS; ++j) {\n            if(subStr[j] != mainStr[i+j] )\n            {\n                isOK = 0;\n                break;\n            }\n        }\n        if (!isOK)\n            i++;\n        else\n            return i;     // 匹配成果，返回相匹配的第一个字符的位置\n    }\n    return -1;   // 匹配不成功，返回-1\n}\n\nvoid copyStrTo(char str[],char strcopy[],int startp,int endp)\n{\n    int i;\n    int j;\n    // 清空 strcopy 字符串\n    j = lengthStr(strcopy);\n    for (i = 0;i<j;i++){\n        strcopy[i] = '\\0';\n    }\n    if (startp > endp) return ;\n    for(i = startp,j=0;i<=endp;i++,j++){\n        strcopy[j] = str[i];\n    }\n}\n\nint isEqual(char s1[], char s2[])\n{\n    // 判断两个字符串是否相等\n    int len1,len2;\n    int i;\n    len1 = lengthStr(s1);\n    len2 = lengthStr(s2);\n    if (len1 != len2)\n    {\n        return 0;\n    }\n    for (i=0;i<len1;i++){\n        if (s1[i] != s2[i])\n            return 0;\n    }\n    return 1;\n}\nint computePrefixLen(char str[],int startp,int endp)\n{\n    // 计算字符串str的最大相等前缀后缀长度\n    char *s1, *s2;\n    int len;\n    int i;\n\n    if(startp == endp) return 0;\n    s1 = (char*)malloc(sizeof (char) * (endp - startp+1));\n    s2 = (char*)malloc(sizeof (char) * (endp - startp+1));\n\n    i = 1;\n    do {\n        copyStrTo(str,s1,startp,endp-i);\n        copyStrTo(str,s2,startp+i,endp);\n        if (isEqual(s1,s2))\n            return lengthStr(s1);\n        else\n            i = i+1;\n    } while (startp <= endp-i);\n    return 0;\n}\nvoid computeNext(char str[], int next[])\n{\n    // 计算字符串的next数组\n    int i,j;\n    int len;\n    int preLen;\n    len = lengthStr(str);\n    // 初始化 next 数组\n    for (i = 0; i < len; ++i) {\n        next[i] = -2;\n    }\n    // 将所有与 str[0] 相等的字符的位置设置为 -1\n    for (i = 0; i < len; ++i){\n        if (str[i] == str[0])\n            next[i] = -1;\n    }\n    // 对于 next[i]==-2的位置，计算匹配失败时，下一个需要匹配的位置，使用相等最大前缀和后缀\n    for (i = 0; i < len; ++i){\n        if (next[i] == -2){\n            preLen = computePrefixLen(str,0,i);  // 计算字符串str[0]-str[i]的最大相等前缀后缀长度\n            next[i] = preLen;\n        }\n    }\n\n}\nint strMatchKMP(char mainStr[], char subStr[])\n{\n    // KMP法进行字符串匹配\n    // 返回子串subStr与主串mainStr相匹配的第一个位置\n\n    int * next;\n    int lenSS,lenMS;\n    int i,j;\n    lenSS = lengthStr(subStr);\n    next = (int *)malloc(sizeof (int ) * lenSS);\n    computeNext(subStr,next);\n    lenMS = lengthStr(mainStr);\n    i = 0;\n    j = 0;\n    while (i<lenMS-lenSS+1){\n        while (j<lenSS)\n        {\n            if (mainStr[i] == subStr[j]){\n                i++;\n                j++;\n            } else{\n                j = next[j];\n                if (j == -1) {j = 0;i = i+1;}\n            }\n        }\n        return i-j;\n    }\n    return -1;\n}\nint searchAllMatchingStr(char mainS[],char subS[],int pos[])\n{\n   \n\n\n\n    // 编写代码来搜索主串 mainS 中所有与子串 subS 相匹配的位置，将每个匹配串的起始位置存入 pos中。\n    // 同时，返回主串 mainS 中与子串 subS相匹配的个数\n\n\n    return 0;\n}\nvoid fuzzyMatching(char mainS[], char subS[], int pos[])\n{\n    // 模糊匹配，搜索在主串 mainS 中，与子串 subS中，'*'符号前后两个字符串相匹配的位置，将与'*'符号前面字符串相匹配的\n    // 字符串的第一个位置存储 pos[0] 中，与'*'符号后面字符串相匹配的最后一个位置存储 pos[1]中。\n\n}\nint main() {\n    char mainS[30] = {'a','r','b','c','d','p','w','d','p','a','r','p','d','p','w','a','o','d','p','w','d','p','a','y'};\n    char subS[10] = {'d','p','w','d','p','a'};\n    char subS2[10] = {'p','a','*','p','a'};\n    int pos[10];\n    int matchLen;\n    matchLen = searchAllMatchingStr(mainS,subS,pos);\n    for (int i = 0; i < matchLen; ++i) {\n        printf(\"\\n matching is ok. the %d substring position is %d\",i,pos[i]);\n    }\n\n    fuzzyMatching(mainS,subS2,pos);\n    printf(\"\\n matching is ok. the start position is %d, and the last position is %d\",pos[0],pos[1]);\n\n    return 0;\n}"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;初学者常犯错误  if(a&amp;#61;0)...&lt;br /&gt;这种写法并没有语法错误&amp;#xff08;正是因为如此&amp;#xff0c;所以更容易犯错&amp;#xff09;&amp;#xff0c;但是实际的作用和你想的可能完全不一样。不过不管怎么样&amp;#xff0c;那几个IO操作应该是不会被跳过的&amp;#xff0c;不知道你是怎么判断代码直接跳到return的。&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["关于Keil5中，函数不执行问题", ["最近在学51单片机，在矩阵键盘时，我想用穷举法扫描所有的矩阵键盘，然后用return返回，但是一直不成功，去调试函数的时候，发现都是跳过return语句，没有执行到。", "\n\n", "\n", "#include <REGX52.H>\n#include \"Delay1.h\"\n\nunsigned char MatrixKey()\n{\n\tunsigned char KeyNumber=0;\n\tP1=0xFF;\n\tP1_3=0;\n\tif(P1_7=0){Delay(20);while(P1_7=0);Delay(20);KeyNumber=1;} //扫描矩阵键盘\n\tif(P1_6=0){Delay(20);while(P1_6=0);Delay(20);KeyNumber=5;}\n\tif(P1_5=0){Delay(20);while(P1_5=0);Delay(20);KeyNumber=9;}\n\tif(P1_4=0){Delay(20);while(P1_4=0);Delay(20);KeyNumber=13;}\n\t\n\tP1=0xFF;\n\tP1_2=0;\n\tif(P1_7=0){Delay(20);while(P1_7=0);Delay(20);KeyNumber=2;}\n\tif(P1_6=0){Delay(20);while(P1_6=0);Delay(20);KeyNumber=6;}\n\tif(P1_5=0){Delay(20);while(P1_5=0);Delay(20);KeyNumber=10;}\n\tif(P1_4=0){Delay(20);while(P1_4=0);Delay(20);KeyNumber=14;}\n\t\n\tP1=0xFF;\n\tP1_1=0;\n\tif(P1_7=0){Delay(20);while(P1_7=0);Delay(20);KeyNumber=3;}\n\tif(P1_6=0){Delay(20);while(P1_6=0);Delay(20);KeyNumber=7;}\n\tif(P1_5=0){Delay(20);while(P1_5=0);Delay(20);KeyNumber=11;}\n\tif(P1_4=0){Delay(20);while(P1_4=0);Delay(20);KeyNumber=15;}\n\t\n\tP1=0xFF;\n\tP1_0=0;\n\tif(P1_7=0){Delay(20);while(P1_7=0);Delay(20);KeyNumber=4;}\n\tif(P1_6=0){Delay(20);while(P1_6=0);Delay(20);KeyNumber=8;}\n\tif(P1_5=0){Delay(20);while(P1_5=0);Delay(20);KeyNumber=12;}\n\tif(P1_4=0){Delay(20);while(P1_4=0);Delay(20);KeyNumber=16;}\n\t\n\treturn KeyNumber;\n}\n\n\n#include <REGX52.H>// 这下面是主函数\n\n#include \"Delay1.h\"\n#include \"LCD1602.h\"\n#include \"MatrixKey.h\"\n\nunsigned char KeyNum;\n\nvoid main()\n{\n\tLCD_Init();\n\tLCD_ShowString(2,1,\"CHINA\");\n\twhile(1)\n\t{\n\t\tKeyNum=MatrixKey();\n\t\tif(KeyNum!=0)\n\t\t{\n\t\t\tLCD_ShowNum(1,1,KeyNum,2);\n\t\t}\n\t}\n}\n"]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;发完整代码出来看看&amp;#xff0c;现在代码不完整&amp;#xff0c;看不到问题。&lt;/p&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["语法错误说:种类前少一个分号,但是我觉得我并没有错", ["VC++ 6.0 C语言问题", "报错语法错误，说我种类前少一个分号，但是我看报错的那一行并没有错呀，该定义的都在最开始的地方定义了，唯一需要分号的就是在结尾，但是结尾我已经打了呀，其他地方好像并没有需要封号的地方。", "以下是代码:", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<string.h>", " ", "\n", "#", "include", "<stdlib.h>", "\n", "struct", " ", "canhui", "//定义结构体", "\n    {\n        ", "char", " name[", "40", "];\n        ", "char", " tel[", "11", "];\n        ", "char", " id[", "18", "];\n        ", "char", " unit[", "60", "];\n        ", "char", " room[", "6", "];\n    }huiyuan;\n\n", "int", " ", "MENU", "()", "//第6组总领菜单，包含3大题", "\n", "{\n    ", "printf", "(", "\"**************************************************\\n\"", ");\n    ", "printf", "(", "\"          《第6组    参会人员管理系统》            \\n\"", ");\n    ", "printf", "(", "\"                                                  \\n\"", ");\n    ", "printf", "(", "\"                1.勾股数                          \\n\"", ");\n    ", "printf", "(", "\"                2.大赛现场统分                    \\n\"", ");\n    ", "printf", "(", "\"                3.参会人员管理系统                \\n\"", ");", "//4.看书上的班级管理系统3.0以及相关知识点", "\n    ", "printf", "(", "\"                4.退出                            \\n\"", ");\n    ", "printf", "(", "\"                                                  \\n\"", ");\n    ", "printf", "(", "\"           请选择对应序号查看相应问题求解         \\n\"", ");\n    ", "printf", "(", "\"**************************************************\\n\"", ");\n    ", "printf", "(", "\"                                                  \\n\"", ");\n    }\n\n\n\n", "void", " ", "gougushu", "(", "int", " a,", "int", " b)", "//给定区间，三循环穷举求勾股数", "\n", "{\n    ", "int", " x,y,z;\n    ", "for", "(x=a;x<=b;x++)\n        ", "for", "(y=a;y<=b;y++)\n            ", "for", "(z=a;z<=b;z++)\n            {\n                ", "if", "(x*x+y*y==z*z&&x<=y&&x<z&&y<z)\n                    ", "printf", "(", "\"%d*%d+%d*%d=%d*%d\\n\"", ",x,x,y,y,z,z);\n            }\n}\n\n\n", "void", " ", "daoli_gougushu", "(", "int", " a,", "int", " b)", "//给定区间，三循环穷举求勾股数", "\n", "{\n    ", "int", " x,y,z;\n    ", "for", "(z=a;z<=b;z++)\n        ", "for", "(y=a;y<=b;y++)\n            ", "for", "(x=a;x<=b;x++)\n            {\n                ", "if", "((x*x+y*y)*z*z==x*x*y*y&&x>y&&y>z&&x>z)\n                    ", "printf", "(", "\"1/(%d*%d)+1/(%d*%d)=1/(%d*%d)\\n\"", ",x,x,y,y,z,z);\n            }\n}\n\n\n\n", "int", " max,min;\n", "int", " max2[", "20", "],min2[", "20", "];\n", "void", " ", "max_min", "(", "int", " a[", "20", "][", "20", "],", "int", " p,", "int", " q)", "//求二维数组每一行的最大值和最小值，并分别存入最大值数组和最小值数组", "\n", "{\n    ", "int", " i,j;\n    ", "for", "(j=", "0", ";j<p;j++)\n    {", "for", "(i=", "0", ";i<q;i++)\n        {\n            ", "if", "(a[j][i]>max)\n                max=a[j][i];\n            ", "if", "(a[j][i]<min)\n                min=a[j][i];\n            max2[j]=max;\n            min2[j]=min;\n        }\n    }\n}\n\n\n\n\n\n\n", "void", " ", "menu", "()", "//第三题的菜单", "\n", "{\n    ", "printf", "(", "\"*******************************************************\\n\"", ");\n    ", "printf", "(", "\"                    《参会人员管理系统》               \\n\"", ");\n    ", "printf", "(", "\"                                                       \\n\"", ");\n    ", "printf", "(", "\"                1.查找某个参会人员的房间号             \\n\"", ");\n    ", "printf", "(", "\"                2.修改某个参会人员的房间号             \\n\"", ");\n    ", "printf", "(", "\"                3.删除某个参会人员的相关信息           \\n\"", ");\n    ", "printf", "(", "\"                4.插入某个参会人员的相关信息           \\n\"", ");\n    ", "printf", "(", "\"                5.统计某指定单位的参会人员人数         \\n\"", ");\n    ", "printf", "(", "\"                6.退出                                 \\n\"", ");\n    ", "printf", "(", "\"                                                       \\n\"", ");\n    ", "printf", "(", "\"*******************************************************\\n\"", ");\n    ", "printf", "(", "\"                                                  \\n\"", ");\n    }\n\n\n", "void", " ", "searchByID", "(", "struct", " canhui huiyuan[", "20", "],", "int", " m)", "//对应第三题的第2问，查找房间号", "\n", "{\n    \n    ", "char", " ID[", "20", "];\n    ", "int", " i;\n    ", "int", " counter=", "0", ";\n    ", "scanf", "(", "\"%s\"", ",&ID);\n    ", "if", "(m!=", "0", ")\n    {\n        ", "printf", "(", "\"请输入要查询会员的身份证号码\"", ");\n        ", "scanf", "(", "\"%s\"", ",&ID);\n        ", "printf", "(", "\"姓名    电话     单位     房间号\\n\"", ");\n        ", "for", "(i=", "0", ";i<m;i++)\n        {\n            ", "if", "(", "strcmp", "(huiyuan[i].id,ID)==", "0", ")\n            {   \n                ", "//判断名字是否相同，相同则输出人员信息", "\n                ", "printf", "(", "\"%s\\t\"", ",huiyuan[i].name);\n                ", "printf", "(", "\"%s\\t\"", ",huiyuan[i].tel);\n                ", "printf", "(", "\"%s\\t\"", ",huiyuan[i].unit);\n                ", "printf", "(", "\"%s\\t\"", ",huiyuan[i].room);\n                ", "printf", "(", "\"\\n\"", ");\n                counter++;\n            }\n   \n        }\n    ", "if", "(counter==", "0", ") ", "//查找的人还没参会", "\n    ", "printf", "(", "\"\\n%s 这个人没有参会！\\n\"", ",ID);\n  \n    }\n ", "else", "\n  ", "printf", "(", "\"无人参会\\n\"", "); \n}\n\n\n", "void", " ", "edit", "(", "struct", " canhui huiyuan[],", "int", " m)", "//对应第三题的第3问，修改信息", "\n", "{\n    ", "char", " room_num[", "10", "];\n    ", "int", " i,k;\n    ", "if", "(m!=", "0", ")\n    {\n        ", "printf", "(", "\"输入要修改参会人员的房间号:\"", ");\n        ", "scanf", "(", "\"%s\"", ",&room_num);\n        ", "for", "(i=", "0", ";i<m;i++)\n        {\n            ", "if", "(", "strcmp", "(huiyuan[i].room,room_num)==", "0", ")\n                {\n                    ", "printf", "(", "\"请选择你的房间号:\"", ");\n                    ", "scanf", "(", "\"%s\"", ",&room_num);\n                    ", "for", "(k=", "0", ";k<m;k++)\n                        {   \n                            ", "if", "(k==i) ", "continue", "; ", "//可以选择原来的房间", "\n            ", "if", "(", "strcmp", "(room_num,huiyuan[k].room)==", "0", ")", "//申请的房间已经有人", "\n                                {   \n                                    ", "printf", "(", "\"你选择的房间已满，请选择其他房间\\n\"", ");\n                                    ", "printf", "(", "\"请重新选择你的房间号:\"", ");\n                                    ", "scanf", "(", "\"%s\"", ",&room_num); ", "//提示选择别的空房间", "\n                                    k=", "-1", "; ", "//为检验新的房间是否为空作准备", "\n                                }\n                        }\n                }\n        }\n    }\n}\n\n\n", "int", " ", "Delete", "(", "struct", " canhui huiyuan[],", "int", " m)", "//对应第三题第4问，删除数据", "\n", "{\n    ", "int", " i,k;\n    ", "int", " counter=m;\n    ", "char", " room_num[", "10", "];\n    ", "if", "(m!=", "0", ")\n    {\n        ", "printf", "(", "\"请你选择要删除参会人员房间的号码:\"", ");\n        ", "scanf", "(", "\"%s\"", ",&room_num);\n        ", "for", "(i=", "0", ";i<m;i++)\n        {\n            ", "if", "(", "strcmp", "(huiyuan[i].room,room_num)==", "0", ")", "//删除人员", "\n                {   \n                    ", "for", "(k=i;k<m", "-1", ";k++)\n                    huiyuan[k]=huiyuan[k+", "1", "]; ", "//把该人员的信息覆盖掉", "\n                    ", "printf", "(", "\"删除成功！！！\"", ");\n                    m--;   \n                }\n        }\n        ", "if", "(counter==", "0", ") \n        ", "printf", "(", "\"你要删除的人还没有参会！\\n\"", "); \n    }\n    ", "else", "\n    ", "printf", "(", "\"没有人员参会！\\n\"", ");\n    ", "return", " m;\n}\n\n", "int", " ", "tongji", "(", "struct", " canhui huiyuan[],", "int", " m)", "\n", "{\n    ", "int", " i;\n    ", "int", " counter=", "0", ";\n    ", "char", " uname[", "20", "];\n    ", "scanf", "(", "\"%s\"", ",&uname);\n    ", "if", "(m!=", "0", ")\n    {\n        ", "printf", "(", "\"请输入要统计的单位名称\"", ");\n        ", "scanf", "(", "\"%s\"", ",&uname);\n        ", "for", "(i=", "0", ";i<m;i++)\n        {\n            ", "if", "(", "strcmp", "(huiyuan[i].unit,uname)==", "0", ")", "//判断名字是否相同，相同则输出人员信息", "\n                counter++;\n   \n        }\n    ", "printf", "(", "\"\\n%d人\\n\"", ",counter);\n    }\n ", "else", "\n  ", "printf", "(", "\"无人参会\\n\"", "); \n}\n\n\n", "int", " ", "main", "()", "//主函数", "\n", "{\n    ", "int", " m;\n    ", "int", " sum=", "0", ";\n    ", "int", " ti_hao;\n    ", "int", " a,b,x,y,z;\n    ", "int", " n,i,j,pinfen[", "20", "][", "20", "],zuizhongfen[", "20", "],t,xuanshou_biaohao[", "20", "],d,e;\n    ", "int", " xuhao,counter,ID[", "20", "];\n\n    ", "struct", " ", "canhui", " huiyuan[", "40", "];\n    ", "char", " xuanshou_bianhao[", "20", "];\n    ", "printf", "(", "\"               欢迎来到第6组题目                  \\n\"", ");\n    \n    ", "while", "(", "1", ")\n    {\n    ", "MENU", "();", "//第6组总领菜单，包含3大题", "\n    ", "scanf", "(", "\"%d\"", ",&ti_hao);", "//输入题号查看相应问题求解", "\n    ", "switch", "(ti_hao)\n    {\n        ", "case", " ", "1", ":", "printf", "(", "\"\\n你选择了问题 一\\n\"", ");\n               biaohao1:", "//做标记，方便goto跳转", "\n               ", "printf", "(", "\"(1)输入区间【a,b】可求出该范围内所有勾股数组 \\n\"", ");\n               ", "printf", "(", "\"请输入a=\"", ");\n               ", "scanf", "(", "\"%d\"", ",&a);\n               ", "printf", "(", "\"请输入b=\"", ");\n               ", "scanf", "(", "\"%d\"", ",&b);\n               ", "if", "(a>=b)", "//输入的区间需符合要求", "\n               {\n                    ", "printf", "(", "\"\\n区间输入错误，请重新输入!\\n\"", ");\n                    ", "goto", " biaohao1;\n               }\n               ", "gougushu", "(a,b);", "//用于寻找勾股数的函数", "\n               ", "printf", "(", "\"第一问第1小题求解完成！\\n\"", ");\n               ", "//1.做一个判定，若无输出，则输出无结果2.若输入小数，负数如何反映，反正考虑输入情况！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！", "\n               biaohao2:", "//做标记，方便goto跳转", "\n               ", "printf", "(", "\"\\n(2)输入区间【a,b】可求出该范围内所有的倒立勾股数组\\n\"", ");\n               ", "printf", "(", "\"请输入a=\"", ");\n               ", "scanf", "(", "\"%d\"", ",&a);\n               ", "printf", "(", "\"请输入b=\"", ");\n               ", "scanf", "(", "\"%d\"", ",&b);\n               ", "if", "(a>=b)", "//输入的区间需符合要求", "\n               {\n                    ", "printf", "(", "\"\\n区间输入错误，请重新输入!\\n\"", ");\n                    ", "goto", " biaohao2;\n               }\n               ", "daoli_gougushu", "(a,b);", "//用于寻找倒立勾股数的函数", "\n               ", "printf", "(", "\"第一问第2小题求解完成！\\n\"", ");\n               ", "break", ";", "//3.完成后反应？", "\n        ", "case", " ", "2", ":", "printf", "(", "\"\\n你选择了问题 二\\n\"", ");\n               ", "//5.过程操作可视化", "\n               ", "printf", "(", "\"某大奖赛有n个选手参赛，m(m>2)个评委为依次参赛的选手评判打分：最高10分，最低0分。\\n\"", ");\n               ", "printf", "(", "\"统分规则：每个选手所得m个评分中，去掉一个最高分和一个最低分，然后将计算的平均值作为最后得分。\\n\"", ");\n               ", "printf", "(", "\"根据n个选手的最后得分，从高到低排出名次，以便确定获奖名单。\\n\"", ");\n               ", "printf", "(", "\"\\n\"", ");\n               ", "printf", "(", "\"请确定参赛选手人数n和评委人数m\\n\"", ");\n               ", "printf", "(", "\"选手人数n=\"", ");\n               ", "scanf", "(", "\"%d\"", ",&n);\n               ", "printf", "(", "\"评委人数m=\"", ");\n               ", "scanf", "(", "\"%d\"", ",&m);\n               ", "for", "(i=", "0", ";i<=n", "-1", ";i++)\n                   xuanshou_bianhao[i]=", "65", "+i;\n               ", "printf", "(", "\"\\n%d名参赛选手依次编号为：A\"", ",n);\n               ", "for", "(a=", "66", ";a<=", "64", "+n;a++)\n                   ", "printf", "(", "\",%c\"", ",a);\n               ", "printf", "(", "\"\\n\"", ");\n               ", "printf", "(", "\"\\n请依次输入参赛选手的评委打分\\n\"", ");\n               ", "for", "(i=", "0", ";i<=n", "-1", ";i++)\n               {\n                    ", "printf", "(", "\"第%d个选手评分：\"", ",i+", "1", ");\n                    ", "for", "(j=", "0", ";j<=m", "-1", ";j++)\n                        ", "scanf", "(", "\"%d\"", ",&pinfen[i][j]);\n               }", "//8.scanf无法同tab结束输入", "\n               ", "printf", "(", "\"\\n输入数据如下：\\n\"", ");\n               ", "for", "(i=", "0", ";i<=n", "-1", ";i++)\n               {\n                    ", "printf", "(", "\"第%d个选手评分    \"", ",i+", "1", ");\n                    ", "for", "(j=", "0", ";j<=m", "-1", ";j++)\n                        ", "printf", "(", "\"%-5d\"", ",pinfen[i][j]);", "//i选手j", "\n                    ", "printf", "(", "\"\\n\"", ");\n               }", "//9.输入结果可视化？", "\n               ", "for", "(i=", "0", ";i<n;i++)\n               {", "for", "(j=", "0", ";j<m;j++)\n                       sum=pinfen[i][j]+sum;\n                zuizhongfen[i]=sum;\n                sum=", "0", ";}\n\n                ", "max_min", "(pinfen,n,m);\n\n                ", "for", "(i=", "0", ";i<n;i++)\n                    zuizhongfen[i]=(zuizhongfen[i]-max2[i]-min2[i])/(m", "-2", ");\n\n                ", "for", "(i=", "0", ";i<n;i++)\n                    ", "for", "(j=", "0", ";j<n-i;j++)\n                    {\n                        ", "if", "(zuizhongfen[j]>zuizhongfen[j+", "1", "])\n                        {\n                            e=zuizhongfen[j+", "1", "];\n                            zuizhongfen[j+", "1", "]=zuizhongfen[j];\n                            zuizhongfen[j]=e;\n\n                            d=xuanshou_biaohao[j+", "1", "];\n                            xuanshou_biaohao[j+", "1", "]=xuanshou_biaohao[j];\n                            xuanshou_biaohao[j]=d;\n                        }\n                    }\n                ", "printf", "(", "\"结果如下\\n\"", ");\n                ", "for", "(i=", "0", ";i<n;i++)\n                    ", "printf", "(", "\"%c%d\\t\"", ",xuanshou_biaohao[i],zuizhongfen[i]);\n               ", "break", ";\n        ", "case", " ", "3", ":", "while", "(", "1", ")\n               {\n                    ", "printf", "(", "\"你选择了题目 3\\n\"", ");\n                    ", "printf", "(", "\"请输入参会人员人数：\"", ");\n                    ", "scanf", "(", "\"%d\"", ",&m);", "//参会人数", "\n                    ", "printf", "(", "\"请依次输入参会人员信息:\\n\"", ");\n                    ", "for", "(i=", "0", ";i<m;i++)\n                    {\n                        ", "printf", "(", "\"姓名：\"", ");\n                            ", "scanf", "(", "\"%s\"", ",&huiyuan[i].name);\n                        ", "printf", "(", "\"电话：\"", ");\n                            ", "scanf", "(", "\"%s\"", ",&huiyuan[i].tel);\n                        ", "printf", "(", "\"身份证号码：\"", ");\n                            ", "scanf", "(", "\"%s\"", ",&huiyuan[i].id);\n                        ", "printf", "(", "\"单位：\"", ");\n                            ", "scanf", "(", "\"%s\"", ",&huiyuan[i].unit);\n                        ", "printf", "(", "\"房间号：\"", ");\n                            ", "scanf", "(", "\"%s\"", ",&huiyuan[i].room);\n                    }\n                    ", "menu", "();\n                    ", "scanf", "(", "\"%d\"", ",&xuhao);\n                    ", "switch", "(xuhao)\n                    {\n                    ", "case", " ", "1", ":", "void", " ", "searchByID", "(", "struct", " canhui huiyuan[", "20", "],m)", ";\n                           ", "break", ";\n                    ", "case", " ", "2", ":", "edit", "(huiyuan,m);", "break", ";\n                    ", "case", " ", "3", ":m=", "Delete", "(huiyuan,m);", "break", ";\n                    ", "case", " ", "4", ":", "for", "(m=", "0", ";huiyuan[m].name!=", "0", ";m++);\n                           ", "printf", "(", "\"请输入相关信息\"", ");\n                           ", "scanf", "(", "\"%s\"", ",&huiyuan[m+", "1", "].name);\n                           ", "scanf", "(", "\"%s\"", ",&huiyuan[m+", "1", "].tel);\n                           ", "scanf", "(", "\"%s\"", ",&huiyuan[m+", "1", "].id);\n                           ", "scanf", "(", "\"%s\"", ",&huiyuan[m+", "1", "].unit);\n                           ", "scanf", "(", "\"%s\"", ",&huiyuan[m+", "1", "].room);\n                           ", "break", ";\n                    ", "case", " ", "5", ":", "tongji", "(huiyuan,m);\n                           ", "break", ";\n                    ", "case", " ", "6", ":", "exit", " (", "0", ");", "break", ";\n                }\n               ", "break", ";\n        ", "case", " ", "4", ":", "exit", "(", "0", ");", "break", ";\n        ", "default", ":", "printf", "(", "\"错误！\"", ");", "//6.循环输入或选择？", "\n                ", "//7.输入出错如何反映", "\n                ", "break", ";\n    }\n    }\n}\n}\n\n\n"]], "Tag": "算法设计"}
{"Answer": "下面这句话引起的，你以400的线粗画了个矩形，但是没有fill. 中间就是黑的类，bitmap尺寸小的时候，线把所有bitmap的地方都占据了，所以没有问题\r\ng.DrawRectangle(new Pen(Color.White, 400), 0, 0, img.Width, img.Height); //矩形 底色\r\n\r\n要填充底色用下面的语句\r\ng.FillRectangle(new SolidBrush(Color.White), 0, 0, img.Width, img.Height);", "Konwledge_Point": "智能穷举搜索", "Question": ["C#画图：用C#画图的时候遇到了问题", [" using System;\nusing System.Data;\nusing System.Configuration;\nusing System.Collections;\nusing System.Web;\nusing System.Web.Security;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\nusing System.Web.UI.HtmlControls;\nusing System.Text;\nusing System.Drawing;\nusing System.Text.RegularExpressions;\nusing System.Reflection;\nusing System.Collections.Generic;\nusing Tools;\nusing DBAPI;\nusing Functions;\nusing System.Web.Script.Serialization;\nusing System.IO;//文件存取\nusing System.Drawing;//画图基本功能\nusing System.Drawing.Drawing2D;//二维画图\nusing System.Drawing.Imaging;//高级功能\n\npublic partial class V2_NodeState_AirCleaner2_Chart2 : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        Bitmap img = new Bitmap(400, 200);//创建Bitmap对象\n        MemoryStream stream = draw();\n\n        img.Save(stream, ImageFormat.Jpeg);          //保存绘制的图片\n        Response.Clear();\n        Response.ContentType = \"image/jpeg\";\n        Response.BinaryWrite(stream.ToArray());\n    }\n    public MemoryStream draw()\n    {\n        Bitmap img = new Bitmap(400, 200);//创建Bitmap对象\n        Graphics g = Graphics.FromImage(img);//创建Graphics对象\n\n        Pen Bp = new Pen(Color.Black); //定义黑色画笔\n        Pen Rp = new Pen(Color.Red);//红色画笔\n        Pen Sp = new Pen(Color.Blue);//蓝色\n        SolidBrush redBrush = new SolidBrush(Color.Red);\n        AdjustableArrowCap aac;  //定义箭头帽\n\n        aac = new System.Drawing.Drawing2D.AdjustableArrowCap(4, 4);\n        Sp.CustomStartCap = aac;  //开始端箭头帽\n        //Sp.CustomEndCap = aac;\n\n        Font Bfont = new Font(\"Arial\", 12, FontStyle.Bold);//大标题字体\n        Font font = new Font(\"Arial\", 6);//一般字\n        Font Tfont = new Font(\"Arial\", 9);//较大字体\n\n        float w = 1.5F;\n        float h = 1.5F;\n        g.DrawRectangle(new Pen(Color.White, 400), 0, 0, img.Width, img.Height); //矩形 底色\n\n\n        //黑色过度型笔刷\n        LinearGradientBrush brush = new LinearGradientBrush(new Rectangle(0, 0, img.Width, img.Height), Color.Black, Color.Black, 1.2F, true);\n\n\n        //蓝色过度型笔刷\n        LinearGradientBrush Bluebrush = new LinearGradientBrush(new Rectangle(0, 0, img.Width, img.Height), Color.Blue, Color.Blue, 1.2F, true);\n\n        //g.DrawString(\"我的实验\",Bfont,brush,40,5); //绘制大标题\n\n        g.DrawRectangle(Bp, 0, 0, img.Width - 100, img.Height - 40); //绘制矩形与上面的矩形即是边框\n\n        //原点坐标（150,90），一个单位坐标=8px\n        g.DrawLine(Sp, 150, 10, 150, 150);//纵坐标\n        g.DrawLine(Sp, 300, 90, 20, 90);//横坐标\n\n\n        g.DrawString(\"5\", font, brush, 188, 91); //横坐标数字\n        g.DrawString(\"10\", font, brush, 226, 91);\n        g.DrawString(\"15\", font, brush, 266, 91);\n\n        //g.DrawString(\"0.5\", font, brush, 135, 86); //纵坐标数字\n        g.DrawString(\"1\", font, brush, 135, 78);\n        //g.DrawString(\"1.5\", font, brush, 135, 78);\n        g.DrawString(\"2\", font, brush, 135, 70);\n        g.DrawString(\"3\", font, brush, 135, 62);\n\n        g.DrawLine(Bp, 190, 85, 190, 90); //横坐标刻度线\n        g.DrawLine(Bp, 230, 85, 230, 90);\n        g.DrawLine(Bp, 270, 85, 270, 90);\n\n        g.DrawLine(Bp, 155, 82, 150, 82);//纵坐标刻度线\n        g.DrawLine(Bp, 155, 74, 150, 74);\n        g.DrawLine(Bp, 155, 66, 150, 66);\n\n        //画函数曲线   这样以   y=x^2  为例   用穷举函数曲线中的两点画曲线\n        //画0-2中的点，步长为0.1\n        for (double i = 0; i <= 2; )\n        {\n            double Write11 = (150 + 8 * i);\n            double Write12 = 90 - 8 * (Math.Pow(i, 2));\n\n            double Write21 = (150 + 8 * (i + 0.1));\n            double Write22 = 90 - 8 * (Math.Pow(i + 0.1, 2));\n\n            g.DrawLine(Bp, (float)Write11, (float)Write12, (float)Write21, (float)Write22);\n            //img.SetPixel((int)Write11, (int)Write12, Color.Red);\n            g.FillEllipse(redBrush,(float)Write11,(float)Write12, w, h);\n\n\n            i = i + 0.1;\n        }\n\n        for (double i = -2; i <= 0; )\n        {\n            double Write11 = (150 + 8 * i);\n            double Write12 = 90 - 8 * (Math.Pow(i, 2));\n\n            double Write21 = (150 + 8 * (i + 0.1));\n            double Write22 = 90 - 8 * (Math.Pow(i + 0.1, 2));\n\n            g.DrawLine(Bp, (float)Write11, (float)Write12, (float)Write21, (float)Write22);\n            i = i + 0.1;\n        }\n\n        MemoryStream stream = new MemoryStream();   //保存绘制的图片\n        img.Save(stream, ImageFormat.Jpeg);          //保存绘制的图片\n        return stream;\n    }\n\n}\n\n Bitmap img = new Bitmap(1000, 500);//创建Bitmap对象\n将new Bitmap(400, 200)中的值修改为（1000，500）就会在图片中出现一个黑色的矩形框\n而且经过尝试，发现只要改大，就会出现黑色的框，同时这个框也会随着修改的值而变。\n", "\n\n", "如下图所示："]], "Tag": "算法设计"}
{"Answer": "&lt;p&gt;已回答&amp;#xff0c;莫辜负&lt;br /&gt;————————————————————————————————————————&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;大括号不配对&amp;#xff1a;在第6行和第12行之间&amp;#xff0c;大括号没有配对。这会导致编译错误。&lt;/li&gt;&lt;li&gt;输出错误&amp;#xff1a;在第20行&amp;#xff0c;缺少一个大括号&amp;#xff0c;导致“Count”只会输出一次。&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;改了一下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main() {\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, i, j, k, a, b, z;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; j&amp;#43;&amp;#43;) {\n            a &amp;#61; j * &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; k &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; k&amp;#43;&amp;#43;) {\n                b &amp;#61; k * &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;#43; a &amp;#43; b &amp;#61;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; &amp;amp;&amp;amp; i &amp;#43; j &amp;#43; k &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;) {\n                    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;fen1:%d张 fen2:%d张 fen3:%d张\\n&amp;#34;&lt;/span&gt;, i, j, k);\n                    &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;&amp;#43;&amp;#43;;\n                }\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Count&amp;#61;%d(%d元有%d种支付方式)&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "智能穷举搜索", "Question": ["关于#c语言#的问题：为什么运行起来输出的值是0", ["为什么运行起来输出的值是0？", "\n", "取1元、2元和5元的纸币共10张，现要支付15元。编写程序输出所有的付法。针对每一种付法，输出各种面额的纸币数量。要求将1元、2元和5元设置在最合理的取值范围内。\n提示：利用穷举的法来求解该问题。\n", "\n", "#include <stdio.h>", "\n\nint main() {\n    int x, y = ", "0", ", i, ", "j, ", "k, a, ", "b, ", "z;\n    ", "scanf(\"%d\", ", "&x);\n    for (i = ", "0", "; i <= 10; i++) {", "\n        for (", "j ", "= ", "0", "; j <= 10; j++)", "\n            a = ", "j ", "* ", "2", ";\n        {\n            for (k = ", "0", "; k <= 10; k++) {", "\n                ", "b ", "= k * ", "5", ";\n                if ( i + a + ", "b ", "== x && i + ", "j ", "+ ", "b ", "== ", "10", ") {\n                    printf(", "\"fen1:%d张 fen2:%d张 fen3:%d张\\n\"", ", i, ", "j, ", "k);\n                    y++;\n                }\n            }\n        }\n        printf(", "\"Count=%d(%d元有%d种支付方式)\"", ", y, x, y);\n        return ", "0", ";\n    }\n\n}\n    }\n\n}\n\n"]], "Tag": "算法设计"}
