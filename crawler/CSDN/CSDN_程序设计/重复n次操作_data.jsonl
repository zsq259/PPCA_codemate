{"Answer": "要注意两个问题\r\n一个 / 1000是整除。\r\n一个rand返回0~RAND_MAX的随机数，RAND_MAX通常是32787。\r\n假设如此，那么它会产生一个0~32的随机数，但是请注意，0~31有相等的概率，但是32的概率要低。", "Konwledge_Point": "重复n次操作", "Question": ["关于随机数的问题。。", ["\n这两句代码是什么意思。。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;先按行读取&amp;#xff0c;然后用in判断&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;list_line &amp;#61; &lt;span class=\"hljs-keyword\"&gt;file&lt;/span&gt;.readlines()  #有\\n\n# 无\\n: &lt;span class=\"hljs-keyword\"&gt;file&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;read&lt;/span&gt;().&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; in list_line:\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;数据重复&amp;#xff01;&amp;#39;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;判断输入格式是否为大写字母&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;string&lt;/span&gt; !&amp;#61; &lt;span class=\"hljs-keyword\"&gt;string&lt;/span&gt;.upper():  &lt;span class=\"hljs-comment\"&gt;#小写转化为大写&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;格式错误&amp;#xff01;&amp;#39;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在except后面继续写&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n    &lt;span class=\"hljs-meta\"&gt;# 无需再次判断类型&amp;#xff0c;不出错即为整数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;-50&lt;/span&gt; &amp;lt;&amp;#61; w_d &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; and &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt;&amp;#61; f_l &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;:\n        ...\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;数据超限&amp;#xff01;&amp;#39;&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["python 文件操作 如何判断写入数据前是否存在相同数据.判断输入操作是否格式正确", ["\"\"\"\ndata.txt文件如下\n\nid  date        city     temp   wind\n0   03/01/2016   BJ      8      5\n1   17/01/2016   BJ      12     2\n2   31/01/2016   BJ      19     2\n3   14/02/2016   BJ      -3     3\n4   28/02/2016   BJ      19     2\n5   13/03/2016   BJ      5      3\n6   27/03/2016   SH      -4     4\n7   10/04/2016   SH      19     3\n\"\"\"", "\n", "\n", "import", " time\n", "import", " re\n\n\n", "def", " ", "write", "(", "dataset", "):\n    c = ", "open", "(dataset, ", "\"a+\"", ")\n    c.seek(", "0", ")\n    ", "for", " line ", "in", " c.readlines()[", "1", ":]:  ", "# 8行 到 12行 是获取数据id值", "\n        ", "if", " ", "len", "(line.split()) == ", "0", ":\n            ", "continue", "\n        j = re.split(", "r\"\\s+\"", ", line.strip())\n    b = ", "int", "(j[", "0", "])\n    ", "print", "(", "\"输入日期   格式'日/月/年' \"", ")\n    ", "while", " ", "True", ":\n        r_q = ", "input", "(", "\"日期:\"", ")\n        ", "if", " ", "not", " r_q:\n            c.close()  ", "# 日期为空时退出", "\n            ", "break", "\n        ", "try", ":\n            time.strptime(r_q, ", "\"%d/%m/%Y\"", ")\n        ", "except", ":\n            ", "print", "(", "\"格式不正确,请重新输入.\\n格式'日/月/年' \"", ")\n            ", "continue", "\n        ", "else", ":\n            c_s = ", "input", "(", "\"城市:\"", ")\n            ", "try", ":\n                w_d = ", "int", "(", "input", "(", "\"温度:\"", "))\n                f_l = ", "int", "(", "input", "(", "\"风力:\"", "))\n            ", "except", ":\n                ", "print", "(", "\"输入错误 温度和风力只能输入数字\"", ")\n                ", "continue", "\n            b += ", "1", "\n            c.seek(", "2", ")\n            c.write(", "f\"", "{b}", "   ", "{r_q}", "   ", "{c_s}", "   ", "{w_d}", "   ", "{f_l}", "\\n\"", ")\n\nc = ", "\"data.txt\"", "\nwrite(c)\n", "\n", "问题:", "1.如何在 -4 行 写入前判断 txt 文件 是否存在相同的数据(日期 和 城市相同)，存在则停止写入 跳回 15 行 进行重新输入", "2. 给 -13 行 (输入城市名), 判断输入格式是否为大写字母,输入错误则重新输入", "3. 给 温度和风力添加一个限制的值 如 温度  -50到100度之间   风力 1 到 9 之间 整数类型"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你这里为空判断无法生效&amp;#xff0c;是因为delete后&amp;#xff0c;n变成0xDDDDDDDD &amp;#xff0c; 自然NULL无法判断&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-html\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Example&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *n;\n        &lt;span class=\"hljs-built_in\"&gt;Example&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *n):&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;(n){}\n        ~&lt;span class=\"hljs-built_in\"&gt;Example&lt;/span&gt;(){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n !&amp;#61; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *)&lt;span class=\"hljs-number\"&gt;0xDDDDDDDD&lt;/span&gt;)\n            {\n            &lt;span class=\"hljs-keyword\"&gt;delete&lt;/span&gt; n;  &lt;span class=\"hljs-comment\"&gt;// if(n !&amp;#61; NULL)并不管用, 有啥其他检查方法吗&amp;#xff1f; &lt;/span&gt;\n            n &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;已释放内存\\n&amp;#34;&lt;/span&gt;);\n            }\n            \n        }\n};\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *x &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;666&lt;/span&gt;);\n    Example *a &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;Example&lt;/span&gt;(x);  &lt;span class=\"hljs-comment\"&gt;//... &lt;/span&gt;\n    Example *b &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;Example&lt;/span&gt;(x);  &lt;span class=\"hljs-comment\"&gt;//两个类中的指针指向同一块内存 &lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a-&amp;gt;n: %p, b-&amp;gt;n: %p, x: %d\\n&amp;#34;&lt;/span&gt;, a-&amp;gt;n, b-&amp;gt;n, *x);\n    &lt;span class=\"hljs-keyword\"&gt;delete&lt;/span&gt; a;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a-&amp;gt;n: %p, b-&amp;gt;n: %p, x: %d\\n&amp;#34;&lt;/span&gt;, a-&amp;gt;n, b-&amp;gt;n, *x);\n    &lt;span class=\"hljs-keyword\"&gt;delete&lt;/span&gt; b;  &lt;span class=\"hljs-comment\"&gt;//对 x 指向的内存进行了二次释放&amp;#xff01; &lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;但是这样还是有问题&amp;#xff0c;第二次析构&amp;#xff0c;又无法判断了&amp;#xff0c;还是会对损坏。&lt;br /&gt;最好的还是&amp;#xff0c;不进行地址的指向&amp;#xff0c;仅仅是数据的赋值。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-html\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Example&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *n;\n        &lt;span class=\"hljs-built_in\"&gt;Example&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *n):&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;()){*n &amp;#61; *n;}\n        ~&lt;span class=\"hljs-built_in\"&gt;Example&lt;/span&gt;(){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n !&amp;#61; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *)&lt;span class=\"hljs-number\"&gt;0xDDDDDDDD&lt;/span&gt; || n!&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n            {\n            &lt;span class=\"hljs-keyword\"&gt;delete&lt;/span&gt; n;  &lt;span class=\"hljs-comment\"&gt;// if(n !&amp;#61; NULL)并不管用, 有啥其他检查方法吗&amp;#xff1f; &lt;/span&gt;\n            n &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;已释放内存\\n&amp;#34;&lt;/span&gt;);\n            }\n        }\n};\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *x &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;666&lt;/span&gt;);\n    Example *a &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;Example&lt;/span&gt;(x);  &lt;span class=\"hljs-comment\"&gt;//... &lt;/span&gt;\n    Example *b &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;Example&lt;/span&gt;(x);  &lt;span class=\"hljs-comment\"&gt;//两个类中的指针指向同一块内存 &lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a-&amp;gt;n: %p, b-&amp;gt;n: %p, x: %d\\n&amp;#34;&lt;/span&gt;, a-&amp;gt;n, b-&amp;gt;n, *x);\n    &lt;span class=\"hljs-keyword\"&gt;delete&lt;/span&gt; a;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a-&amp;gt;n: %p, b-&amp;gt;n: %p, x: %d\\n&amp;#34;&lt;/span&gt;, a-&amp;gt;n, b-&amp;gt;n, *x);\n    &lt;span class=\"hljs-keyword\"&gt;delete&lt;/span&gt; b;  &lt;span class=\"hljs-comment\"&gt;//对 x 指向的内存进行了二次释放&amp;#xff01; &lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a-&amp;gt;n: %p, b-&amp;gt;n: %p, x: %d\\n&amp;#34;&lt;/span&gt;, a-&amp;gt;n, b-&amp;gt;n, *x);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["C++内存管理 怎么避免内存重复释放？", ["#", "include", " ", "<cstdio>", "\n", "class", " ", "Example", "{\n    ", "public", ":\n        ", "int", " *n;\n        ", "Example", "(", "int", " *n):", "n", "(n){}\n        ~", "Example", "(){\n            ", "delete", " n;  ", "// if(n != NULL)并不管用, 有啥其他检查方法吗？ ", "\n            n = ", "NULL", ";\n            ", "printf", "(", "\"已释放内存\\n\"", ");\n        }\n};\n\n", "int", " ", "main", "()", "{\n    ", "int", " *x = ", "new", " ", "int", "(", "666", ");\n    Example *a = ", "new", " ", "Example", "(x);  ", "//... ", "\n    Example *b = ", "new", " ", "Example", "(x);  ", "//两个类中的指针指向同一块内存 ", "\n    ", "printf", "(", "\"a->n: %p, b->n: %p, x: %d\\n\"", ", a->n, b->n, *x);\n    ", "delete", " a;\n    ", "printf", "(", "\"a->n: %p, b->n: %p, x: %d\\n\"", ", a->n, b->n, *x);\n    ", "delete", " b;  ", "//对 x 指向的内存进行了二次释放！ ", "\n    ", "return", " ", "0", ";\n}\n", "\n", "运行结果:↓", "\n", "a", "->", "n", ": 00B12E20, b->", "n: ", "00", "B12E20, x: ", "666", "\n已释放内存\n", "a", "->", "n", ": 00B12E20, b->", "n: ", "00", "B12E20, x: ", "11611744", "\n已释放内存\n", "\n", "两个实例的成员变量指向了同一块内存，当我要销毁这两个实例时，同一块的内存被释放了两次。", "重复释放内存是个很危险的操作，那我现在该怎么解决这个问题？", "\n", "我的理想办法是在析构函数那加一条“内存是否为空”的判断，但就一直找不到实现方法。。", "还是说这就是C++内存管理的难点，只能通过合理的设计结构来避免？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;每行的p的地址都是首地址&amp;#xff0c;每次malloc后&amp;#xff0c;由系统重新分配内存&amp;#xff0c;所以p也会随着改变&amp;#xff0c;直到没有内存可以分配&amp;#xff08;程序会崩溃&amp;#xff09;。&lt;br /&gt;没有free的空间还保留在程序中&amp;#xff0c;但是因为已经让p指向了新申请的内存&amp;#xff0c;所以先申请的内存已经丢失&amp;#xff0c;无法再使用&amp;#xff0c;这就会造成内存泄露。之前申请的那些内存空间&amp;#xff0c;只会在程序结束的时候&amp;#xff0c;由系统回收。&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["【提问】多次使用malloc函数的内存分配问题。", ["刚刚学到malloc，然后试着写了串代码看看重复对p用malloc，malloc的地址和程序运行的结果是什么。", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<stdlib.h>", "\n", "int", " ", "main", "()", "\n", "{\n         ", "int", "* p=", "0", ";\n         p = (", "int", "*)", "malloc", "(", "1024", " * ", "1024", " * ", "100", "); \n         ", "printf", "(", "\"%p\\n\"", ", p);\n         ", "while", " (p != ", "NULL", ")\n         {\n             p = (", "int", "*)", "malloc", "(", "1024", " * ", "1024", " * ", "100", ");\n             ", "printf", "(", "\"%p\\n\"", ", p);\n         }\n    ", "printf", "(", "\"%p\\n\"", ", p);\n}\n", "\n", "\n", "p的地址一直增大直到超出分配空间会返回0这我知道。", "\n", "疑惑的是：p的地址一直增大是不是因为重复做malloc之前没有free？", "\n", "不理解的是：每行的p的地址都是首地址吗（我想毕竟它重新分配了，所以首地址也跟着重新变换了？）？如果是的话那之前分配过的没有free的空间去哪了？p还指向那些地方吗？"]], "Tag": "程序设计"}
{"Answer": "![](https://sites.google.com/site/pengtian85/09040200-full.jpg)", "Konwledge_Point": "重复n次操作", "Question": ["link如何解决如下矩阵生成难题", ["将1~N*N放入一个N*N的矩阵，要求矩阵每行每列以及对角线的和相等。请问怎么实现？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;运算次数是随皇后数量指数递增的&amp;#xff0c;你确定程序执行完了没结果吗&amp;#xff0c;还是花了好久好久根本没有执行完呢&lt;br /&gt;把所有皇后遍历的丢进数组里效率是非常低的&lt;br /&gt;你想皇后不攻击&amp;#xff0c;那么至少要保证每行每列都只能有一个皇后&amp;#xff0c;然后再判断都不在同一条斜线上即可&lt;br /&gt;那么你放置皇后的时候&amp;#xff0c;第一行只能放一个&amp;#xff0c;第二行也只能放一个&amp;#xff0c;且列号不能与第一行相同&amp;#xff0c;以此类推&amp;#xff0c;写个递归就可以放好n行了&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["n皇后问题，n大于9无结果", ["如题，程序输入n个皇后的n，输出有多少种情况（不考虑重复），此段代码从9开始没有结果，我想知道没有结果的原因", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<string.h>", "\n", "#", "include", "<stdbool.h>", "\n", "int", " a[", "20", "],count=", "0", ";\n", "bool", " ", "check", "(", "int", " a[],", "int", " x)", "{", "//判断前x行是否满足皇后不能互相攻击,x为检查到第几行", "\n", "int", " i,j;\n", "for", "(i=", "1", ";i<=x;i++){\n        ", "for", "(j=", "1", ";j<i;j++){\n            ", "if", "(a[j]==a[i]) ", "return", " ", "false", ";\n            ", "if", "(a[j]-j==a[i]-i) ", "return", " ", "false", ";\n            ", "if", "(a[j]+j==a[i]+i) ", "return", " ", "false", ";\n        }\n}\n", "return", " ", "true", ";\n}\n", "void", " ", "bahuanghou", "(", "int", " x,", "int", " n)", "{", "//x为a[i]中的i(也就是行)，x代表进行到第几行了，n为n皇后", "\n", "if", "(a[", "1", "]>n) ", "return", ";", "//要想象最后一种情况时会如何作为结束条件", "\n", "else", " ", "if", "(a[x]>n){\n    a[x", "-1", "]++;\n    a[x]=", "1", ";\n    ", "bahuanghou", "(x", "-1", ",n);\n}", "//先判断如果列超界，退行并重置列", "\n", "else", "{", "//尤其注意此处else与上面的关系", "\n", "if", "(x==n){\n    ", "if", "(", "check", "(a,x)){\n        count++;\n    }\n}", "//如果已经放置了n个皇后（皇后个数满了），看看它是否需要计数", "\n", "if", "(", "check", "(a,x)&&x!=n)", "//不管上面记不记数都进行如下操作", "\n    ", "bahuanghou", "(x+", "1", ",n);", "//如果皇后未满且皇后都不能互相攻击，进行下一行", "\n", "else", "{\n    a[x]++;\n    ", "bahuanghou", "(x,n);\n    }", "//皇后能互相攻击，换列并重新进行该行", "\n}\n}\n", "int", " ", "main", "()", "{\n", "int", " i;\n", "for", "(i=", "0", ";i<=", "19", ";i++){\n    a[i]=", "1", ";\n}\n", "scanf", "(", "\"%d\"", ",&i);\n", "bahuanghou", "(", "1", ",i);\n", "printf", "(", "\"%d\\n\"", ",count);\n}\n \n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;h1 id=\"h1_题目好多啊对答案满意的话。麻烦给采纳一下&amp;#xff01;谢谢-你之前的题目都没有采纳--也请采纳一下&amp;#xff01;_1655052235074\"&gt;题目好多啊,对答案满意的话。麻烦给采纳一下&amp;#xff01;谢谢! 你之前的题目都没有采纳,  也请采纳一下&amp;#xff01;&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;iostream&amp;gt;\nusing namespace std;\n\nvoid &lt;span class=\"hljs-constructor\"&gt;Hanoi(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; N,&lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; Src,&lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;tmp&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; Dst)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(N&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;){\n        cout&amp;lt;&amp;lt; Src &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;gt;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; Dst&amp;lt;&amp;lt;endl;\n        return;\n    }\n\n    &lt;span class=\"hljs-constructor\"&gt;Hanoi(N-1,Src,Dst,&lt;span class=\"hljs-params\"&gt;tmp&lt;/span&gt;)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//先将A-&amp;gt;B&amp;#xff0c;用C中转&lt;/span&gt;\n    cout &amp;lt;&amp;lt; Src &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;gt;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; Dst&amp;lt;&amp;lt;endl; &lt;span class=\"hljs-comment\"&gt;//再将 A-&amp;gt;C&lt;/span&gt;\n    &lt;span class=\"hljs-constructor\"&gt;Hanoi(N-1,&lt;span class=\"hljs-params\"&gt;tmp&lt;/span&gt;,Src,Dst)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//最后将B-&amp;gt;C,用A中转&lt;/span&gt;\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n;\n    &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; a,b,c;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %c %c %c&amp;#34;&lt;/span&gt;, &amp;amp;n, &amp;amp;a, &amp;amp;b, &amp;amp;c);\n    &lt;span class=\"hljs-constructor\"&gt;Hanoi(&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;b&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;c&lt;/span&gt;)&lt;/span&gt;;\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/660224740556193.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "重复n次操作", "Question": ["全都要用简单的递归完成，不能出现特别高级的东西", ["#40. hanoi(汉诺塔)", "ID: 40", "传统题", "1000ms", "256MiB", "上传者:", "\n", "root", "题目描述", "汉诺塔由三根柱子（分别用A、B、C表示）和n个大小互不相同的空心盘子组成。", "\n", "一开始n个盘子都摞在柱子A上，大的在下面，小的在上面，形成了一个塔状的锥形体。", "\n", "对汉诺塔的一次合法的操作是指：从一根柱子的最上层拿一个盘子放到另一根柱子的最上层，同时要保证被移动的盘子一定放在比它更大的盘子上面（如果移动到空柱子上就不需要满足这个要求）。我们可以用两个字母j加一个箭头来描述一次操作：第一个字母代表起始柱子，第二个字母代表目标柱子。例如，A->B就是把柱子A最上面的那个盘子移到柱子B。汉诺塔的游戏目标是将所有的盘子从第一根柱子移动到第三根柱子上面。", "\n", "输入格式", "一行 ，4个变量，分别表示 汉诺塔层数 n，第一根柱子A，第二根柱子B，第三根柱子C，其中n不大于10，A,B,C是不重复的大写字母", "\n", "输出格式", "若干行，每一行表示移动一次的步骤，直到将所有的盘子从第一根柱子移动到第三根柱子上面。", "\n", "样例", "输入样例1", "3 A B C", "输出样例1", "A->C", "A->B", "C->B", "A->C", "B->A", "B->C", "A->C", "输入样例2", "2 Q W E", "输出样例2", "Q->W", "Q->E", "W->E", "\n", "#41. 输出公式1", "ID: 41", "传统题", "1000ms", "256MiB", "上传者:", "\n", "root", "题目描述", "输出n+n-1+n-2一直加到+1", "\n", "输入格式", "一行，一个数字n", "\n", "输出格式", "一行，n+n-1+n-2一直加到+1", "\n", "样例", "输入样例1", "7", "输出样例1", "7+6+5+4+3+2+1", "\n", "#42. 输出公式2", "ID: 42", "传统题", "1000ms", "256MiB", "上传者:", "\n", "root", "题目描述", "输出 1+2+3+4一直加到n", "\n", "输入格式", "一行，一个数字n", "\n", "输出格式", "一行，1+2+3一直加到n", "\n", "样例", "输入样例1", "7", "输出样例1", "1+2+3+4+5+6+7", "\n", "#43. 递归生成字典", "ID: 43", "传统题", "1000ms", "256MiB", "上传者:", "\n", "root", "题目描述", "输出一个深度为n的字典", "\n", "输入格式", "一个整数n，且n>1", "\n", "输出格式", "一个深度为n的字典；字典{1: {}} 的深度为2，字典{1: {2: {}}} 的深度为3，以此类推", "\n", "样例", "输入样例：", "3", "输出样例：", "{1: {2: {}}}", "\n", "#44. 小码君的进制转换", "ID: 44", "传统题", "1000ms", "256MiB", "上传者:", "\n", "root", "题目描述", "小码君在今天新学了一招进制转换，通过数组和递归的结合，在一瞬间就能求出十进制转成任何进制，你也来试试吧。", "\n", "以上为本题原版本，后来因为xx在课堂中讲解了此题，故此题正确版本如下", "\n", "小码君在今天新学了一招进制转换，通过数组和递归的结合，在一瞬间就能求出任何进制转成十进制（<=16），你也来试试吧。", "\n", "仁慈的程在考虑后，选择再次降低题目难度，修改为如下", "\n", "小码君在今天新学了一招进制转换，通过数组和递归的结合，在一瞬间就能求出任何进制转成十进制（<9），你也来试试吧。", "\n", "仁慈的程在考虑后，发现可能班上没几个做得出来，决定按照最初的题目，将其公布供大家测试。", "\n", "小码君在今天新学了一招进制转换，通过数组和递归的结合，在一瞬间就能求出十进制转成任何进制，你也来试试吧。", "\n", "输入格式", "一行两个数，第一个十进制数X，第二个为进制M。", "\n", "输出格式", "输出结果。", "\n", "样例", "样例输出", "31 16", "样例输出", "1F", "数据范围与提示", "超过10进制的表示方法，10用大写字母A来表示，11用大写字母B来表示，后面依次类推", "对于 100%100% 的数据，2 \\leq n \\leq 2^{31}2≤n≤2", "31", " 。", "对于 100%100% 的数据，1 \\leq m \\leq 161≤m≤16。", "\n", "#45. 小码君的F91函数", "ID: 45", "传统题", "1000ms", "256MiB", "上传者:", "\n", "root", "题目描述", "小码君是一个很出名的计算机科学家。有一天，他研究出一个有趣的函数，叫\"F91\"。然而小码君的电脑坏了，所以你来编一个程序来研究这个神奇的函数。", "函数功能如下：", "如果 n≤100 则 f91(n)=f91(f91(n+11))", "如果 n≥101 则 f91(n)=n-10", "\n", "输入格式", "输入若干个正整数n(n≤250000) 直到n=0停止", "\n", "输出格式", "每行对于每个n，输出 f91(n) = （等号两边有空格）", "\n", "样例", "输入样例", "500", "91", "0", "输出样例", "f91(500) = 490", "f91(91) = 91", "\n", "#46. 小码君跳楼梯", "ID: 46", "传统题", "1000ms", "256MiB", "上传者:", "\n", "root", "题目描述", "山上有一洞,小码君每次采取跳1阶或者跳3阶的办法从山下跳跃上台阶进洞。编程实现：输入台阶数n，输出共有多少种不同的跳法？", "\n", "输入格式", "只有一行且只有一个正整数：n ，代表台阶数。( 1 <= n <= 50 )", "\n", "输出格式", "只有一行且只有一个整数，代表有多少种跳法。", "\n", "样例", "输入样例", "7", "输出样例", "9"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;修改如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;stdlib.h&amp;gt;\ntypedef struct List {\n    int value;\n    struct List* next;\n    struct List* pre;\n}list;\nlist* add(list* head, int n);\nlist* Delete(list* head);  &lt;span class=\"hljs-comment\"&gt;//, int n);&lt;/span&gt;\nint main()\n{\n    int n;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    list* head &amp;#61; NULL;\n    head &amp;#61; add(head, n);\n    head &amp;#61; Delete(head);&lt;span class=\"hljs-comment\"&gt;//head &amp;#61; Delete(head, n);&lt;/span&gt;\n    list* p3 &amp;#61; head;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;while&lt;/span&gt; (p3-&amp;gt;&lt;/span&gt;next !&amp;#61; NULL) {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;printf&lt;/span&gt;(&amp;#34;%d &amp;#34;, p3-&amp;gt;&lt;/span&gt;value);\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p3&lt;/span&gt; &amp;#61; p3-&amp;gt;&lt;/span&gt;next;\n    }\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;printf&lt;/span&gt;(&amp;#34;%d&amp;#34;, p3-&amp;gt;&lt;/span&gt;value);\n}\nlist* add(list* head, int n)\n{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;) {\n        list* p &amp;#61; (list*)malloc(sizeof(list));\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;scanf&lt;/span&gt;(&amp;#34;%d&amp;#34;, &amp;amp;p-&amp;gt;&lt;/span&gt;value);\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; NULL;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;pre &amp;#61; NULL;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (head &amp;#61;&amp;#61; NULL) {\n            head &amp;#61; p;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            list* last &amp;#61; head;\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;while&lt;/span&gt; (last-&amp;gt;&lt;/span&gt;next !&amp;#61; NULL) {\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;last&lt;/span&gt; &amp;#61; last-&amp;gt;&lt;/span&gt;next;\n            }\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;last&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; p;\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;pre &amp;#61; last;\n        }\n    }\n    return head;\n}\nlist* Delete(list* head)   &lt;span class=\"hljs-comment\"&gt;//, int n)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;list&lt;/span&gt;* last; //&amp;#61; head-&amp;gt;&lt;/span&gt;next;\n    list* p &amp;#61; head;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;while&lt;/span&gt; (p) {  //(p-&amp;gt;&lt;/span&gt;next !&amp;#61; NULL) {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;last&lt;/span&gt; &amp;#61; p-&amp;gt;&lt;/span&gt;next;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;while&lt;/span&gt; (last){  //last-&amp;gt;&lt;/span&gt;next !&amp;#61; NULL) {\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (last-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;value&lt;/span&gt; &amp;#61;&amp;#61; p-&amp;gt;&lt;/span&gt;value) {\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;list&lt;/span&gt;* p1 &amp;#61; last;  //last-&amp;gt;&lt;/span&gt;pre;\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;last&lt;/span&gt; &amp;#61; p1-&amp;gt;&lt;/span&gt;pre;\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;last&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt; &amp;#61; p1-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;;//p1-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt; &amp;#61; last-&amp;gt;&lt;/span&gt;next;\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (p1-&amp;gt;&lt;/span&gt;next !&amp;#61; NULL)\n                    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p1&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pre&lt;/span&gt; &amp;#61; last;//last-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;-&amp;gt;&lt;/span&gt;pre &amp;#61; p1;\n                free(p1);&lt;span class=\"hljs-comment\"&gt;//free(last);&lt;/span&gt;\n            }\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;last&lt;/span&gt; &amp;#61; last-&amp;gt;&lt;/span&gt;next;\n        }\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt; &amp;#61; p-&amp;gt;&lt;/span&gt;next;\n    }\n    return head;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["删除链表中的重复元素（链表为随机排列，请使用C语言）", ["请编写程序删除链表中的多余节点，即：若链表中有多个节点具有相同的值，则只保留其中的一个节点即可，使得处理后的链表中的值各不相同。", "【输入】第一行整数n(1<=n)", "第二行为单链表中的n个整数", "【输出】删除链表中的重复元素后的单链表信息", "例如：", "【输入】", "9", "3 6 9 10 6 1 3 10 6", "【输出】", "3 6 9 10 1", "\n", "我想创建一个双向链表，然后包含两个循环，第一个循环把n-1个元素取一遍，第二个循环把第一个循环取出的元素与他之后的所有元素进行比较，如果所指的值相等就删除节点，但是运行后我的删除操作好像没有起作用？最好帮我看看我的程序哪里出了问题我直接改就可以，当然我代码不太规范如果看不懂的话另附上代码也可以（大一，刚看到链表，请使用链表及之前的知识）。", "\n", "#include <stdio.h>", "\n", "#include <stdlib.h>", "\ntypedef struct List{\n    int value;\n    struct List* next;\n    struct List* pre;\n}list;\nlist* ", "add", "(list* head,int n);\nlist* delete(list* head,int n);\nint main()\n{\n    int n;\n    scanf(", "\"%d\"", ",&n);\n    list* ", "head", "=", "NULL", ";\n    ", "head", "=add(head, n);\n    ", "head", "=delete(head, n);\n    list *", "p3", "=head;\n    ", "while", " (p3->next!=", "NULL", ") {\n        printf(", "\"%d \"", ",p3->value);\n        ", "p3", "=p3->next;\n    }\n    printf(", "\"%d\"", ",p3->value);\n}\nlist* ", "add", "(list* head,int n)\n{\n    ", "for", " (int ", "i", "=0; i<n; i++) {\n        list* p=(list*)malloc(sizeof(list));\n        scanf(", "\"%d\"", ",&p->value);\n        p->", "next", "=", "NULL", ";\n        p->", "pre", "=", "NULL", ";\n        ", "if", " (", "head", "==NULL) {\n            ", "head", "=p;\n        }\n        ", "else", "{\n            list* ", "last", "=head;\n            ", "while", " (last->next!=", "NULL", ") {\n                ", "last", "=last->next;\n            }\n            last->", "next", "=p;\n            p->", "pre", "=last;\n        }\n    }\n    return head;\n}\nlist* delete(list* head,int n)\n{\n    list* ", "last", "=head->next;\n    list* ", "p", "=head;\n    ", "while", "(p->next!=", "NULL", ") {\n        ", "while", "(last->next!=", "NULL", "){\n        ", "if", " (last->", "value", "==p->value) {\n            list* ", "p1", "=last->pre;\n            p1->", "next", "=last->next;\n            last->next->", "pre", "=p1;\n            free(last);\n        }\n            ", "last", "=last->next;\n        }\n        ", "p", "=p->next;\n    }\n    return head;\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;是否要求哨兵节点&amp;#xff1f;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;_Node&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;word&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; count;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;_Node&lt;/span&gt; * next;\n}Node;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;AddNode&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Node *head,&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *&lt;span class=\"hljs-type\"&gt;word&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    Node *p &amp;#61; head;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(p-&amp;gt;next !&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(p-&amp;gt;next-&amp;gt;&lt;span class=\"hljs-type\"&gt;word&lt;/span&gt;,&lt;span class=\"hljs-type\"&gt;word&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            p-&amp;gt;next-&amp;gt;count&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n        }\n        p &amp;#61; p-&amp;gt;next;\n    }\n    Node *q &amp;#61; (Node*)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(Node));\n    q-&amp;gt;next&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    p-&amp;gt;next&amp;#61; q;\n    q-&amp;gt;count &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;strcpy&lt;/span&gt;(q-&amp;gt;&lt;span class=\"hljs-type\"&gt;word&lt;/span&gt;,&lt;span class=\"hljs-type\"&gt;word&lt;/span&gt;);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    Node head;\n    head.next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    head.count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;//&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入单词数量:&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;word&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-type\"&gt;word&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;AddNode&lt;/span&gt;(&amp;amp;head,&lt;span class=\"hljs-type\"&gt;word&lt;/span&gt;);\n    }\n    Node *p &amp;#61; head.next;\n    Node *q &amp;#61; p;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(p !&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(p-&amp;gt;count &amp;gt; q-&amp;gt;count)\n            q &amp;#61; p;\n        p &amp;#61; p-&amp;gt;next;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;出现次数最多单词为&amp;#xff1a;%s\\n&amp;#34;&lt;/span&gt;,q-&amp;gt;&lt;span class=\"hljs-type\"&gt;word&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["数据结构的第一次任务 以下是全部要求", ["线性表的应用", "实验目的：掌握线性表的基本结构和操作方法，培养学生灵活使用表解决实际问题的能力。", "实验内容： 键盘输入英语单词的个数n及n个单词，编写程序，建立一个单向链表，实现： （1）如果单词重复出现，则只在链表上保留一个。", "（2）除满足（1）的要求外。链表结点还应有一个计数域，记录该单词重复出现的次数，然后输出出现次数最多的前k(k<=n，需键盘输入)个单词。", "注：次数并列的情况考虑、不考虑均可。提示：本题链表结点的数据域存放英文单词，可用字符数组表示，单词重复出现时，链表中只保留一个，单词是否相等的判断使用strcmp函数，结点中增设计数域，统计单词重复出现的次数。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;修改处见注释&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; x, y;       &lt;span class=\"hljs-comment\"&gt;//int x, y;&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a, b;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;plus&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.5f &amp;#43; %.5f&amp;#61;%.5f\\n&amp;#34;&lt;/span&gt;, a, b, a &amp;#43; b);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;minus&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.5f - %.5f&amp;#61;%.5f\\n&amp;#34;&lt;/span&gt;, a, b, a - b);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;multiply&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.5f * %.5f&amp;#61;%.5f\\n&amp;#34;&lt;/span&gt;, a, b, a * b);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;divide&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)                  &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.5f / %.5f&amp;#61;%.5f\\n&amp;#34;&lt;/span&gt;, a, b, a / b);\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;intput error\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Interface&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;--------------------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;|          实用计算器          |\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;|            1-加法            |\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;|            2-减法            |\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;|            3-乘法            |\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;|            4-除法            |\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;|            0-退出            |\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;--------------------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;    你想要进行哪一种计算&amp;#xff08;0-4&amp;#xff09; \\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;input&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入第一个数字&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;, &amp;amp;a);         &lt;span class=\"hljs-comment\"&gt;//scanf(&amp;#34;%lf\\n&amp;#34;, &amp;amp;a);&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入第二个数字&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;, &amp;amp;b);         &lt;span class=\"hljs-comment\"&gt;//scanf(&amp;#34;%lf\\n&amp;#34;, &amp;amp;b);&lt;/span&gt;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;//Interface(); &lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-built_in\"&gt;Interface&lt;/span&gt;(); &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt;\n        {\n          &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;x);\n        } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (x &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || x&amp;gt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (x &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (x &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;();\n            &lt;span class=\"hljs-built_in\"&gt;plus&lt;/span&gt;(a, b);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (x &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;();    &lt;span class=\"hljs-comment\"&gt;//input(a, b);&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;minus&lt;/span&gt;(a, b);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (x &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(); &lt;span class=\"hljs-comment\"&gt;//input(a, b);&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;multiply&lt;/span&gt;(a, b);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(); &lt;span class=\"hljs-comment\"&gt;//input(a, b);&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;divide&lt;/span&gt;(a, b);\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否继续计算&amp;#xff1f;y 继续 n 退出\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; %c&amp;#34;&lt;/span&gt;, &amp;amp;y);    &lt;span class=\"hljs-comment\"&gt;//scanf(&amp;#34;%d&amp;#34;, &amp;amp;y);&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (y &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;)\n            c &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (y &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (c);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["简单计算器的运行 在操作完一次后可以继续再次运行/退出", ["问题遇到的现象和发生背景", "\n", "运行程序出现错误 但是不知道该如何解决", "\n", "问题相关代码，请勿粘贴截图", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n", "#", "include", " ", "<math.h>", "\n", "int", " x,y;\n", "double", " a,b;\n", "void", " ", "plus", "(", "double", " a,", "double", " b)", "\n", "{\n    ", "printf", "(", "\"%.5f + %.5f=%.5f\\n\"", ",a,b,a+b);\n}\n", "void", " ", "minus", "(", "double", " a,", "double", " b)", "\n", "{\n    ", "printf", "(", "\"%.5f - %.5f=%.5f\\n\"", ",a,b,a-b);\n}\n", "void", " ", "multiply", "(", "double", " a,", "double", " b)", "\n", "{\n    ", "printf", "(", "\"%.5f * %.5f=%.5f\\n\"", ",a,b,a*b);\n}\n", "void", " ", "divide", "(", "double", " a,", "double", " b)", "\n", "{\n    ", "printf", "(", "\"%.5f / %.5f=%.5f\\n\"", ",a,b,a/b);\n}\n", "void", " ", "Interface", "()", "\n", "{\n    ", "printf", "(", "\"--------------------------------\\n\"", ");\n    ", "printf", "(", "\"|          实用计算器          |\\n\"", ");\n    ", "printf", "(", "\"|            1-加法            |\\n\"", ");\n    ", "printf", "(", "\"|            2-减法            |\\n\"", ");\n    ", "printf", "(", "\"|            3-乘法            |\\n\"", ");\n    ", "printf", "(", "\"|            4-除法            |\\n\"", ");\n    ", "printf", "(", "\"|            0-退出            |\\n\"", ");\n    ", "printf", "(", "\"--------------------------------\\n\"", ");\n    ", "printf", "(", "\"    你想要进行哪一种计算（0-4） \\n\"", ");\n}\n", "void", " ", "input", "()", "\n", "{\n    ", "printf", "(", "\"请输入第一个数字：\"", ");\n    ", "scanf", "(", "\"%lf\\n\"", ",&a);\n    ", "printf", "(", "\"请输入第二个数字：\"", ");\n    ", "scanf", "(", "\"%lf\\n\"", ",&b);\n}\n", "int", " ", "main", "(", "void", ")", "\n", "{\n    ", "int", " c=", "0", ";\n    ", "Interface", "();\n    ", "do", "\n    {\n\n        ", "do", "\n        {\n            ", "scanf", "(", "\"%d\"", ",&x);\n        }\n        ", "while", "(x<", "0", "||x>", "4", ");\n        ", "if", "(x==", "0", ")\n            ", "break", ";\n        ", "else", " ", "if", "(x==", "1", ")\n            {\n                ", "input", "();\n                ", "plus", "(a,b);\n            }\n        ", "else", " ", "if", "(x==", "2", ")\n            {\n                ", "input", "(a,b);\n                ", "minus", "(a,b);\n            }\n        ", "else", " ", "if", "(x==", "3", ")\n            {\n                ", "input", "(a,b);\n                ", "multiply", "(a,b);\n            }\n        ", "else", "\n            {\n                ", "input", "(a,b);\n                ", "divide", "(a,b);\n            }\n        ", "printf", "(", "\"是否继续计算？y 继续 n 退出\\n\"", ");\n        ", "scanf", "(", "\"%d\"", ",&y);\n        ", "if", "(y==", "'y'", ")\n            c=", "1", ";\n        ", "else", " ", "if", "(y==", "'n'", ")\n            ", "break", ";\n    }\n    ", "while", "(c);\n    ", "return", " ", "0", ";\n\n}\n\n\n", "\n", "运行结果及报错内容", "\n", "死循环  请输入第一个数字处会连续输入两次", "\n", "我想要达到的结果", "\n", "解决代码问题 正确运行"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/810609399246156.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["探究realloc用法，realloc函数对同一个地址重复操作会返回NULL！", ["一、在程序设计中，某次意外操作realloc操作同一个地址，造成了其返回NULL异常。", "realloc传入的指针与pCommandTemp指针所赋值不一致，在第三次realloc时必出现异常，", "重启10次，现象稳定。", "\n", "for", "(StopActionChild=mxmlFindElement(AutoChild,tree,", "\"command\"", ",NULL,NULL,MXML_DESCEND);\n                        StopActionChild!=NULL;\n                        StopActionChild=StopActionChild->next->next)\n                    {\n                        ", "pCommandTemp", " = ", "(CommandInfo_t *)", "realloc", "((m_ProcInfos + m_ProcInfoNum)->ProcStopActions,sizeof(CommandInfo_t)*(CommandNum+", "1", "))", ";\n                        ", "if", "(!pCommandTemp)", "\n                        {\n                            ", "LOG_ERR", "(", "\"[appAutoProcLoadConfig-->realloc] pCommandTemp realloc error.\\n\"", ")", ";\n                            ", "free", "(m_ProcInfos)", ";\n                            ", "m_ProcInfos", "=", "NULL", ";\n                            ", "mxmlDelete", "(tree)", ";                                /*删除", "xml", "文件句柄*/\n                            ", "fclose", "(fp)", ";                                        /*关闭文件*/    \n                            ", "return", " -1;\n                        }\n                        ", "(m_ProcInfos+m_ProcInfoNum)", "->", "JudgeParamInfos->StopCommands = pCommandTemp;\n                        memcpy", "(((m_ProcInfos+m_ProcInfoNum)->JudgeParamInfos->StopCommands+CommandNum)->Name, mxmlElementGetAttr(StopActionChild,", "\"name\"", "),", "30", ")", ";\n                        ", "memcpy", "(((m_ProcInfos+m_ProcInfoNum)->JudgeParamInfos->StopCommands+CommandNum)->Type, mxmlElementGetAttr(StopActionChild,", "\"type\"", "),", "30", ")", ";\n                        ", "((m_ProcInfos+m_ProcInfoNum)->JudgeParamInfos->StopCommands+CommandNum)", "->", "Tab = atoi(mxmlElementGetAttr(StopActionChild,", "\"tab\"", "));\n                        ", "((m_ProcInfos+m_ProcInfoNum)->JudgeParamInfos->StopCommands+CommandNum)", "->", "Code = atoi(mxmlElementGetAttr(StopActionChild,", "\"code\"", "));\n                        CommandNum++;", "/*停止动作计数递增*/", "\n                    }\n                    ", "(m_ProcInfos+m_ProcInfoNum)", "->", "JudgeParamInfos->StopCmdNum = CommandNum;\n\n", "\n", "调试结果：", "\n", "\n", "二、编写独立realloc测试程序，首先malloc一个commad结构体，然后重复用commad地址realloc，会在第三个循环出现异常，重启10次，故障现象稳定。", "\n", "void exam_01()\n{\n       CommandInfo_t * pCommandTemp=NULL;\n       CommandInfo_t *  command=(CommandInfo_t *  )malloc(sizeof(CommandInfo_t *));\n       ", "int", " i;\n       ", "for", "(i=", "0", ";i<", "100", ";i++)\n        {\n              pCommandTemp=(CommandInfo_t *)realloc(command,sizeof(CommandInfo_t )*(i+", "1", "));\n              LOG_WARN(", "\"\\n<>realloc test: < pCommandTemp:0x%x,m_ProcInfoNum:%d,CommandNum:%d>\n              \\n\"", ",pCommandTemp,", "0", ",i);\n             ", "if", "(!pCommandTemp)\n              {\n                        LOG_ERR(", "\"pCommandTemp realloc error.\\n\"", ");\n                        ", "return", ";\n              }\n        }\n}\n", "\n", "调试结果：", "\n", "\n", "关于realloc对同一个地址重复操作会出现返回NULL结果疑问，目前寻找资料未能找到合理解释，该种现象的原理？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;解答如下&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/215812622356174.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;del&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; s[])&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; tem[&lt;span class=\"hljs-number\"&gt;150&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; p&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;s[i]!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((s[i]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;s[i]&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)||(s[i]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;s[i]&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;))\n        {\n            tem[p&amp;#43;&amp;#43;]&amp;#61;s[i];\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;p;i&amp;#43;&amp;#43;)\n    {\n        s[i]&amp;#61;tem[i];\n    }\n    s[p]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; t[&lt;span class=\"hljs-number\"&gt;150&lt;/span&gt;];\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    &lt;span class=\"hljs-built_in\"&gt;fflush&lt;/span&gt;(stdin);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(n--)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;gets&lt;/span&gt;(t);\n        &lt;span class=\"hljs-built_in\"&gt;del&lt;/span&gt;(t);\n        &lt;span class=\"hljs-built_in\"&gt;puts&lt;/span&gt;(t);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["【C语言】 编写一个函数del(s)，将字符串s中非字母字符删除，只保留字母字符（大小写均可）。", ["【问题描述】", "    编写一个函数del(s)，将字符串s中非字母字符删除，只保留字母字符（大小写均可）。main()函数完成从键盘输入若干个（小于10个）以回车结束的字符串（最长不超过80个字符），然后调用该函数进行删除操作，将删除后的结果打印到屏幕上。", "【输入形式】", "  第一行输入字符串个数，其他行再输入n个字符串。", "【输出形式】", "  在屏幕上分行输出仅有字母字符的n个字符串。", "【输入样例】", "2", "12Ab3Cd*aAbcdEeF", "&dfg9)%", "\n", "【输出样例】", "AbCdaAbcdEeF", "dfg", "【样例说明】以输入样例为例，可以先输入两行字符串，然后输出两个处理后的字符串；也可以输入1个字符串，输出一个处理后的字符串，再输入1个字符串，输出一个处理后的字符串。   "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Just change&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$data = json_decode(file_get_contents(\"php://input\"));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$data = json_decode(file_get_contents(\"php://input\"), true);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will give you a full-fledged array. Obligatory man link: &lt;a href=\"http://php.net/manual/en/function.json-decode.php\" rel=\"nofollow noreferrer\"&gt;json decode&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "重复n次操作", "Question": ["如何在PHP中访问嵌套数组的stdClass对象[重复]", ["\n\n", "\n    ", "This question already has an answer here:", "\n    ", "\n", "\n            ", "How can I access an array/object?", "\n                \n                    4 answers\n                \n        ", "\n    ", "\n", "\n\n", "I have php array like ", "\n\n", "Array \n( \n[0] => stdClass Object \n    ( [type] => MILESTONE\n      [creator] => xyz \n      [tpid] => abc \n      [docname] => STS \n      [items] => stdClass Object \n        ( \n            [MILESTONE_CODE] => ARPOD \n            [MILESTONE_TYPE] => ACT \n            [MILESTONE_DESCRIPTION] => Arrival at Port of Discharge \n            [TRIGGER_EVENT] => Y [ENVIRONMENT] => T \n        ) \n    ) \n[1] => stdClass Object \n    ( \n        [type] => MILESTONE \n        [creator] => xyz \n        [tpid] => abc \n        [docname] => STS \n        [items] => stdClass Object \n        ( \n            [MILESTONE_CODE] => BKD \n            [MILESTONE_TYPE] => EST \n            [MILESTONE_DESCRIPTION] => Booking created \n            [TRIGGER_EVENT] => N \n            [ENVIRONMENT] => P \n        ) \n    ) \n)\n", "\n\n", "There are 2 php files written", "\n\n", "File 1: In this file I am decoding my json data and got above array", "\n\n", "$data = json_decode(file_get_contents(\"php://input\"));\n\n // print_r($data);exit;\n\nforeach ($data as $value){\n\n$TP->createTPConfig($data);  // Here I am calling method for each index of array\n} \n", "\n\n", "File 2: In this file I have written method to insert data into oracle database.", "\n\n", "function createTPConfig($dataToBeInsert){\n\n// print_r($dataToBeInsert);exit; // till here I am getting above array\n\n// written insert query here \n\n}\n", "\n\n", "Now in File 2, I want to access array values of", "\n\n", "[type]", ", ", "[creator]", ", ", "[tpid]", ", ", "[docname]", " ", "\n\n", "and again ", "\n\n", "I want to ", "foreach(repeat)", " loop for ", "[items]", " ", "\n\n", "and want to access keys and values of ", "\n\n", "[MILESTONE_CODE]", ", ", "[MILESTONE_TYPE]", ", ", "[MILESTONE_DESCRIPTION]", " and ", "[TRIGGER_EVENT]", "\n\n", "and insert both keys and values into database", "\n\n", "Can anyone help ... your help would be appreciated!", "\n\n", "</div>\n", "\n"]], "Tag": "程序设计"}
{"Answer": "当然可以了。\r\n比如订单实体和用户实体。订单有买方和卖方，都关联到用户表。", "Konwledge_Point": "重复n次操作", "Question": ["ER图中，两个实体类之间是否可以有多个关系？", ["ER图中，两个实体类之间是否可以有多个关系？", "\n\n", "比如说博客系统中用户可以发布博客，也可以点赞博客。", "\n\n", "博客系统数据库中有用户表、点赞表和评论表。", "\n\n", "那用户实体和博客实体之间有发布和点赞两种关系了。", "\n\n", "发布是1：n，点赞是n：m，因为点赞是多对多关系，就可以抽一个单独的表出来，也符合数据库中有点赞表的要求。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;//有1、2、3、4个数字&amp;#xff0c;能组成多少个互不相同且无重复数字的三位数&amp;#xff1f;都是多少&amp;#xff1f;&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j, k;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    { &lt;span class=\"hljs-comment\"&gt;// 以下为三重循环,百位&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; j&amp;#43;&amp;#43;)\n        { &lt;span class=\"hljs-comment\"&gt;//十位&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; k &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; k&amp;#43;&amp;#43;)\n            { &lt;span class=\"hljs-comment\"&gt;// 个位&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i !&amp;#61; k &amp;amp;&amp;amp; i !&amp;#61; j &amp;amp;&amp;amp; j !&amp;#61; k)\n                { &lt;span class=\"hljs-comment\"&gt;//确保i、j、k三位互不相同&lt;/span&gt;\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d%d &amp;#34;&lt;/span&gt;, i, j, k);\n                }\n            }\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;2.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;int main()\n{\n    int a, &lt;span class=\"hljs-keyword\"&gt;b, &lt;/span&gt;c, d, i;\n    &lt;span class=\"hljs-keyword\"&gt;scanf(&amp;#34;%d&amp;#34;, &lt;/span&gt;&amp;amp;i);\n    for (d &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; d &amp;lt;&amp;#61; i; d&amp;#43;&amp;#43;)&lt;/span&gt;\n        for (a &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; a &amp;lt;&amp;#61; 100; a&amp;#43;&amp;#43;)&lt;/span&gt;\n            for (&lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;&amp;#61; a&lt;span class=\"hljs-comment\"&gt;; b &amp;lt;&amp;#61; 100; b&amp;#43;&amp;#43;)&lt;/span&gt;\n                for (c &amp;#61; &lt;span class=\"hljs-keyword\"&gt;b; &lt;/span&gt;c &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; c&amp;#43;&amp;#43;)&lt;/span&gt;\n                    if (d * d * d &amp;#61;&amp;#61; a * a * a &amp;#43; &lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;* &lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;* &lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;&amp;#43; c * c * c)\n                        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Cube &amp;#61; %d, Triple &amp;#61; (%d,%d,%d)\\n&amp;#34;&lt;/span&gt;, d, a, &lt;span class=\"hljs-keyword\"&gt;b, &lt;/span&gt;c);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;3.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n \nint main()\n{\n    int i, n, &lt;span class=\"hljs-built_in\"&gt;t1&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;t2&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, nextTerm,sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;scanf(&amp;#34;%d&amp;#34;, &lt;/span&gt;&amp;amp;n);\n    for (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt;&amp;#61; n; &amp;#43;&amp;#43;i)&lt;/span&gt;\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;t1&lt;/span&gt;);\n        sum &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;t1&lt;/span&gt;;\n        nextTerm &amp;#61; &lt;span class=\"hljs-built_in\"&gt;t1&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-built_in\"&gt;t2&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;t1&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;t2&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;t2&lt;/span&gt; &amp;#61; nextTerm;\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n%d&amp;#34;&lt;/span&gt;,sum);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;4.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n; &lt;span class=\"hljs-comment\"&gt;// 用户输入的整数&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i; &lt;span class=\"hljs-comment\"&gt;// 循环标志&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#61;&amp;#34;&lt;/span&gt;, n);\n    &lt;span class=\"hljs-comment\"&gt;// n&amp;gt;&amp;#61;2才执行下面的循环&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (n !&amp;#61; i)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n % i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d*&amp;#34;&lt;/span&gt;, i);\n                n &amp;#61; n / i;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, n);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["大家看看这几个题怎么整", ["1题", "有1,2,3,4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？输出每一个数。", "\n", "有1,2,3,4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？按照从小到大的顺序输出每一个数，数之间用空格分隔，最后一个数的后面也要有空格。", "2题", "形如a3= b3 + c3 + d3的等式被称为完美立方等式。例如123= 63 + 83 + 103 。编写一个程序，对任给的正整数N (N≤100)，寻找所有的四元组(a, b, c, d)，使得a3 = b3 + c3 + d3，其中a,b,c,d 大于 1, 小于等于N，且b<=c<=d。", "\n", "输入", "\n", "一个正整数N (N≤100)。", "\n", "输出", "\n", "每行输出一个完美立方。输出格式为：", "\n", "Cube = a, Triple = (b,c,d)", "\n", "其中a,b,c,d所在位置分别用实际求出四元组值代入。", "\n", "请按照a的值，从小到大依次输出。当两个完美立方等式中a的值相同，则b值小的优先输出、仍相同则c值小的优先输出、再相同则d值小的先输出。", "\n", "样例输入", "\n", "24", "\n", "样例输出", "\n", "Cube = 6, Triple = (3,4,5)", "\n", "Cube = 12, Triple = (6,8,10)", "\n", "Cube = 18, Triple = (2,12,16)", "\n", "Cube = 18, Triple = (9,12,15)", "\n", "Cube = 19, Triple = (3,10,18)", "\n", "Cube = 20, Triple = (7,14,17)", "\n", "Cube = 24, Triple = (12,16,20)", "\n", "3题", "斐波那契数列。", "\n", "描述", "\n", "斐波那契数列是一组第一位和第二位为1，从第三位开始，后一位是前两位和的一组递增数列，像这样的：1、1、2、3、5、8、13、21、34、55......。从键盘输入正整数N，输出斐波那契数列的前N项以及前N项的和。", "\n", "输入", "\n", "一个正整数N 。", "\n", "输出", "\n", "输出两行，第一行为斐波那契数列的前N项，每项之间用空格隔开，最后一项后面也要有空格，第二行为斐波那契数列前N项的和", "\n", "样例输入", "\n", "6", "\n", "样例输出", "\n", "1 1 2 3 5 8 ", "\n", "20", "\n", "4题", "分解质因数。", "\n", "描述", "\n", "每一个大于等于2的自然数，均可写成一个或多个质数的乘积，例如：20=2", "2", "5；90=2", "3", "3*5。这种将一个整数分割成若干个质数之积的操作叫做分解质因数。现在，给你一个整数N，请你编写一个程序，对其分解质因数。", "\n", "输入", "\n", "输入为一行，正整数N。", "\n", "输出", "\n", "输出N的质因数分解形式。", "\n", "样例输入", "\n", "20", "\n", "样例输出", "\n", "20=2", "2", "5"]], "Tag": "程序设计"}
{"Answer": "max=b&gt;max?b:max\r\n的意思是\r\nif (b &gt; max)\r\nmax = b;\r\nelse\r\nmax = max;\r\n也就是如果b比max还大，那么用b作为新的max", "Konwledge_Point": "重复n次操作", "Question": ["一道C语言题目 看一下这个编程有些疑惑", ["大概意思就是输入一组成绩 求最大 最小 平均值 ", "\n看下这道提", "\n有个地方不明白", "  看一下有 问号的那两个地方", "\n\n", "就拿一个问号那句来说", "\n\n", "我不理解这程序是怎么一个运算顺序", "\n\n", "比如 b大于max不成立", "\n那么输出max"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n#include&amp;lt;stdio.h&amp;gt;\n#include&amp;lt;math.h&amp;gt;\n#include&amp;lt;string.h&amp;gt;\n#include&amp;lt;stdlib.h&amp;gt;\nstruct books_list {\n    char writer[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//作者名&lt;/span&gt;\n    char &lt;span class=\"hljs-built_in\"&gt;title&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    char ISBN[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//书名&lt;/span&gt;\n    char publishinghouse[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//出版单位&lt;/span&gt;\n    int  price,borrowed;&lt;span class=\"hljs-comment\"&gt;//价格&lt;/span&gt;\n    struct books_list * next;&lt;span class=\"hljs-comment\"&gt;//链表的指针域&lt;/span&gt;\n};\nstruct books_list * Create_Books_Doc();&lt;span class=\"hljs-comment\"&gt;//新建链表&lt;/span&gt;\nvoid InsertDoc(struct books_list * head);&lt;span class=\"hljs-comment\"&gt;//插入&lt;/span&gt;\nvoid sort_maopao(struct books_list * head );&lt;span class=\"hljs-comment\"&gt;//排序&lt;/span&gt;\nvoid DeleteDoc(struct books_list * head );&lt;span class=\"hljs-comment\"&gt;//删除&lt;/span&gt;\nvoid Print_Book_Doc(struct books_list * head);&lt;span class=\"hljs-comment\"&gt;//浏览&lt;/span&gt;\nvoid search_book(struct books_list * head);&lt;span class=\"hljs-comment\"&gt;//查询&lt;/span&gt;\nvoid info_change(struct books_list * head);&lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\nvoid save(struct books_list * head);&lt;span class=\"hljs-comment\"&gt;//保存数据至文件&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;/*新建链表头节点*/&lt;/span&gt;\nstruct books_list * Create_Books_Doc() {\n    struct books_list * head;\n    head&amp;#61;(struct books_list *)malloc(sizeof(struct books_list));&lt;span class=\"hljs-comment\"&gt;//分配头节点空间&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;head&lt;/span&gt;-&amp;gt;&lt;/span&gt;next&amp;#61;NULL;&lt;span class=\"hljs-comment\"&gt;//头节点指针域初始化&amp;#xff0c;定为空&lt;/span&gt;\n    return head;\n} &lt;span class=\"hljs-comment\"&gt;/*保存数据至文件*/&lt;/span&gt; void save(struct books_list * head) {\n    struct books_list *p;\n    FILE *fp;\n    p&amp;#61;head;\n    fp&amp;#61;fopen(&lt;span class=\"hljs-string\"&gt;&amp;#34;data.txt&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;w&amp;#43;&amp;#34;&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//以写方式新建并打开 data.txt文件&lt;/span&gt;\n    fprintf(fp,&lt;span class=\"hljs-string\"&gt;&amp;#34; --------编号-------书  名---------------作    者----------出版社-----------价格    \\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-comment\"&gt;/*指针从头节点开始移动&amp;#xff0c;遍历至尾结点&amp;#xff0c;依次输出图书信息*/&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;while&lt;/span&gt;(p-&amp;gt;&lt;/span&gt;next!&amp;#61; NULL) {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;&amp;#61;p-&amp;gt;&lt;/span&gt;next;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fprintf&lt;/span&gt;(fp,&amp;#34;%-6.6s %-15.10s %-10.10s %-10.10s %-10.10d\\n&amp;#34;,p-&amp;gt;&lt;/span&gt;ISBN,&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;title&lt;/span&gt;,p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;writer&lt;/span&gt;,p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;publishinghouse&lt;/span&gt;,p-&amp;gt;&lt;/span&gt;price);\n    }\n    fprintf(fp,&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    fclose(fp);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;    已将图书数据保存到 data.txt 文件\\n&amp;#34;&lt;/span&gt;);\n}\nvoid sort_maopao(struct books_list * head ) {\n    struct books_list *tail,*p,*q,*p1,*t; &lt;span class=\"hljs-comment\"&gt;//p1等于head t等于head q保存p的next节点&lt;/span&gt;\n    p1&amp;#61;(struct books_list *)malloc(sizeof (struct books_list));\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;for&lt;/span&gt;(t&amp;#61;head-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;; t!&amp;#61;NULL; t&amp;#61;t-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(p&amp;#61;head-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;,p1&amp;#61;head; p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;!&amp;#61;NULL; p&amp;#61;p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;,p1&amp;#61;p1-&amp;gt;&lt;/span&gt;next) {\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;(strcmp(p-&amp;gt;&lt;/span&gt;ISBN,&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;-&amp;gt;&lt;/span&gt;ISBN)&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt;&amp;#61;p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;-&amp;gt;&lt;/span&gt;next;\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;tail&lt;/span&gt;&amp;#61;p-&amp;gt;&lt;/span&gt;next;\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;tail&lt;/span&gt;-&amp;gt;&lt;/span&gt;next&amp;#61;NULL;\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;next&amp;#61;q;\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p1&lt;/span&gt;-&amp;gt;&lt;/span&gt;next&amp;#61;tail;\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;tail&lt;/span&gt;-&amp;gt;&lt;/span&gt;next&amp;#61;p;\n                p&amp;#61;p1;\n            }\n        }\n    save(head);  &lt;span class=\"hljs-comment\"&gt;//保存文件&lt;/span&gt;\n}\n&lt;span class=\"hljs-comment\"&gt;/*插入*/&lt;/span&gt;\nvoid InsertDoc(struct books_list *head) {\n    &lt;span class=\"hljs-comment\"&gt;/*定义结构体指针变量 s指向开辟的新结点首地址 p为中间变量*/&lt;/span&gt;\n    struct books_list *s, *p;\n    char flag&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;/*定义flag,方便用户选择重复输入*/&lt;/span&gt;\n    p&amp;#61;head;\n    &lt;span class=\"hljs-comment\"&gt;/*遍历到尾结点&amp;#xff0c;p指向尾结点*/&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;while&lt;/span&gt;(p-&amp;gt;&lt;/span&gt;next!&amp;#61; NULL) {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;&amp;#61;p-&amp;gt;&lt;/span&gt;next;\n    }\n    &lt;span class=\"hljs-comment\"&gt;/*开辟新空间,存入数据,添加进链表*/&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(flag&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;||flag&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;) {\n        system(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;borrowed&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        s&amp;#61;(struct books_list *)malloc(sizeof(struct books_list));\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                    请输入图书编号:&amp;#34;&lt;/span&gt;);\n        fflush(stdin);\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;scanf&lt;/span&gt;(&amp;#34;%s&amp;#34;,s-&amp;gt;&lt;/span&gt;ISBN);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                    请输入图书书名:&amp;#34;&lt;/span&gt;);\n        fflush(stdin);\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;scanf&lt;/span&gt;(&amp;#34;%s&amp;#34;,s-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-built_in\"&gt;title&lt;/span&gt;);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                    请输入图书作者名:&amp;#34;&lt;/span&gt;);\n        fflush(stdin);\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;scanf&lt;/span&gt;(&amp;#34;%s&amp;#34;,s-&amp;gt;&lt;/span&gt;writer);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                    请输入图书出版社:&amp;#34;&lt;/span&gt;);\n        fflush(stdin);\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;scanf&lt;/span&gt;(&amp;#34;%s&amp;#34;,s-&amp;gt;&lt;/span&gt;publishinghouse);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                    请输入图书价格:&amp;#34;&lt;/span&gt;);\n        fflush(stdin);\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;scanf&lt;/span&gt;(&amp;#34;%d&amp;#34;,&amp;amp;s-&amp;gt;&lt;/span&gt;price);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;next&amp;#61;s;\n        &lt;span class=\"hljs-comment\"&gt;/*将新增加的节点添加进链表*/&lt;/span&gt;\n        p&amp;#61;s;\n        &lt;span class=\"hljs-comment\"&gt;/*p指向尾节点&amp;#xff0c;向后移*/&lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;next&amp;#61;NULL;\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                  ━━━━ 添加成功&amp;#xff01;━━━━&amp;#34;&lt;/span&gt;);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                          继续添加&amp;#xff1f;(Y/N):&amp;#34;&lt;/span&gt;);\n        fflush(stdin);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;,&amp;amp;flag);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;N&amp;#39;&lt;/span&gt;||flag&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;) {\n            break;\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;||flag&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;) {\n            continue;\n        }\n    }\n    save(head);\n    &lt;span class=\"hljs-comment\"&gt;/*保存数据至文件*/&lt;/span&gt;\n    system(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n    return;\n}\n&lt;span class=\"hljs-comment\"&gt;/*查询操作*/&lt;/span&gt;\nvoid search_book(struct books_list *head) {\n    struct books_list * p;\n    char temp[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    p&amp;#61;head;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;(head&amp;#61;&amp;#61;NULL || head-&amp;gt;&lt;/span&gt;next&amp;#61;&amp;#61;NULL) { &lt;span class=\"hljs-comment\"&gt;/*判断数据库是否为空*/&lt;/span&gt;\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                      ━━━━ 图书库为空&amp;#xff01;━━━━\\n&amp;#34;&lt;/span&gt;);\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入您要查找的书名: &amp;#34;&lt;/span&gt;);\n        fflush(stdin);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,temp);\n        &lt;span class=\"hljs-comment\"&gt;/*指针从头节点开始移动&amp;#xff0c;遍历至尾结点&amp;#xff0c;查找书目信息*/&lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;while&lt;/span&gt;(p-&amp;gt;&lt;/span&gt;next!&amp;#61; NULL) {\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;&amp;#61;p-&amp;gt;&lt;/span&gt;next;\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;(strcmp(p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-built_in\"&gt;title&lt;/span&gt;,temp)&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n图书已找到!\\n&amp;#34;&lt;/span&gt;);\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;printf&lt;/span&gt;(&amp;#34;编号: %s\\t\\n&amp;#34;,p-&amp;gt;&lt;/span&gt;ISBN);\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;printf&lt;/span&gt;(&amp;#34;书名: %s\\t\\n&amp;#34;,p-&amp;gt;&lt;/span&gt;writer);\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;printf&lt;/span&gt;(&amp;#34;作者名: %s\\t\\n&amp;#34;,p-&amp;gt;&lt;/span&gt;writer);\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;printf&lt;/span&gt;(&amp;#34;出版单位: %s\\t\\n&amp;#34;,p-&amp;gt;&lt;/span&gt;publishinghouse);\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;printf&lt;/span&gt;(&amp;#34;价格: %.2d\\t\\n&amp;#34;,p-&amp;gt;&lt;/span&gt;price);\n            }\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;(p-&amp;gt;&lt;/span&gt;next&amp;#61;&amp;#61;NULL) {\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n查询完毕!\\n&amp;#34;&lt;/span&gt;);\n            }\n        }\n    }\n    return;\n}\n&lt;span class=\"hljs-comment\"&gt;/*浏览操作*/&lt;/span&gt;\nvoid Print_Book_Doc(struct books_list * head) {\n    struct books_list * p;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;(head&amp;#61;&amp;#61;NULL || head-&amp;gt;&lt;/span&gt;next&amp;#61;&amp;#61;NULL) { &lt;span class=\"hljs-comment\"&gt;/*判断数据库是否为空*/&lt;/span&gt;\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                      ━━━━  没有图书记录!  ━━━━\\n\\n&amp;#34;&lt;/span&gt;);\n        return;\n    }\n    p&amp;#61;head;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\n\\n\\t\\t编号    书 名        作 者    出版单位    价格  \\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-comment\"&gt;/*指针从头节点开始移动&amp;#xff0c;遍历至尾结点&amp;#xff0c;依次输出图书信息*/&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;while&lt;/span&gt;(p-&amp;gt;&lt;/span&gt;next!&amp;#61; NULL) {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;&amp;#61;p-&amp;gt;&lt;/span&gt;next;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;printf&lt;/span&gt;(&amp;#34;\\t\\t%-7.6s %-13.10s %-10.10s %-10.10s %d \\n&amp;#34;,p-&amp;gt;&lt;/span&gt;ISBN,&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;title&lt;/span&gt;,p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;writer&lt;/span&gt;,p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;publishinghouse&lt;/span&gt;,p-&amp;gt;&lt;/span&gt;price);\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-comment\"&gt;/*修改操作*/&lt;/span&gt;\nvoid info_change(struct books_list * head) {\n    struct books_list * p;\n    int panduan&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;/*此变量用于判断是否找到书目*/&lt;/span&gt;\n    char temp[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    p&amp;#61;head;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要修改的书名:&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,temp);\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;while&lt;/span&gt;(p-&amp;gt;&lt;/span&gt;next!&amp;#61; NULL) {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;&amp;#61;p-&amp;gt;&lt;/span&gt;next;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;(strcmp(p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-built_in\"&gt;title&lt;/span&gt;,temp)&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                    请输入图书编号:&amp;#34;&lt;/span&gt;);\n            fflush(stdin);\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;scanf&lt;/span&gt;(&amp;#34;%d&amp;#34;,p-&amp;gt;&lt;/span&gt;ISBN);\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                    请输入图书书名:&amp;#34;&lt;/span&gt;);\n            fflush(stdin);\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;scanf&lt;/span&gt;(&amp;#34;%s&amp;#34;,p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-built_in\"&gt;title&lt;/span&gt;);\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                    请输入图书作者名:&amp;#34;&lt;/span&gt;);\n            fflush(stdin);\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;scanf&lt;/span&gt;(&amp;#34;%s&amp;#34;,p-&amp;gt;&lt;/span&gt;writer);\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                    请输入图书出版社:&amp;#34;&lt;/span&gt;);\n            fflush(stdin);\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;scanf&lt;/span&gt;(&amp;#34;%s&amp;#34;,p-&amp;gt;&lt;/span&gt;publishinghouse);\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                    请输入图书价格:&amp;#34;&lt;/span&gt;);\n            fflush(stdin);\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;scanf&lt;/span&gt;(&amp;#34;%d&amp;#34;,&amp;amp;p-&amp;gt;&lt;/span&gt;price);\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n            panduan&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(panduan&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                      ━━━━  没有图书记录!  ━━━━\\n\\n&amp;#34;&lt;/span&gt;);\n    }\n    return;\n}\nvoid book_borrow(struct books_list * head) {\n    struct books_list * p;\n    int panduan&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;/*此变量用于判断是否找到书目*/&lt;/span&gt;\n    char temp[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    p&amp;#61;head;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要借的书名:&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,temp);\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;while&lt;/span&gt;(p-&amp;gt;&lt;/span&gt;next!&amp;#61; NULL) {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;&amp;#61;p-&amp;gt;&lt;/span&gt;next;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;((strcmp(p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;title&lt;/span&gt;,temp)&amp;#61;&amp;#61;0)&amp;amp;&amp;amp;(p-&amp;gt;&lt;/span&gt;borrowed&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)) {\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;borrowed&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            panduan&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;图书已经成功借出\\n&amp;#34;&lt;/span&gt;);\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(panduan&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                      ━━━━  没有要借阅的图书!  ━━━━\\n\\n&amp;#34;&lt;/span&gt;);\n    }\n    return;\n}\n&lt;span class=\"hljs-comment\"&gt;/*删除操作*/&lt;/span&gt;\nvoid DeleteDoc(struct books_list * head) {\n    struct books_list *s,*p;\n    &lt;span class=\"hljs-comment\"&gt;/*s为中间变量&amp;#xff0c;p为遍历时使用的指针*/&lt;/span&gt;\n    char temp[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    int panduan;\n    &lt;span class=\"hljs-comment\"&gt;/*此变量用于判断是否找到了书目*/&lt;/span&gt;\n    panduan&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    p&amp;#61;s&amp;#61;head;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                    [请输入您要删除的书名]:&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,temp);\n    &lt;span class=\"hljs-comment\"&gt;/*遍历到尾结点*/&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(p!&amp;#61; NULL) {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;(strcmp(p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-built_in\"&gt;title&lt;/span&gt;,temp)&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            panduan&amp;#43;&amp;#43;;\n            break;\n        }\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;&amp;#61;p-&amp;gt;&lt;/span&gt;next;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(panduan&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;for&lt;/span&gt;(; s-&amp;gt;&lt;/span&gt;next!&amp;#61;p;) {  &lt;span class=\"hljs-comment\"&gt;/*找到所需删除卡号结点的上一个结点*/&lt;/span&gt;\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;&amp;#61;s-&amp;gt;&lt;/span&gt;next;\n        }\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;&amp;#61;p-&amp;gt;&lt;/span&gt;next;\n        &lt;span class=\"hljs-comment\"&gt;/*将后一节点地址赋值给前一节点的指针域*/&lt;/span&gt; free(p);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n                      ━━━━  删除成功!  ━━━━\\n&amp;#34;&lt;/span&gt;);\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; { &lt;span class=\"hljs-comment\"&gt;/*未找到相应书目*/&lt;/span&gt;\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                    您输入的书目不存在&amp;#xff0c;请确认后输入!\\n&amp;#34;&lt;/span&gt;);\n    }\n    return;\n}\nint main(void) {\n    struct books_list * head;\n    int choice;\n    head&amp;#61;NULL;\n    &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                                                              \\n&amp;#34;&lt;/span&gt;);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;          -------------------- 图书管理系统-------------------\\n\\n&amp;#34;&lt;/span&gt;);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                              [1]图书信息录入                \\n\\n&amp;#34;&lt;/span&gt;);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                              [2]图书信息浏览                \\n\\n&amp;#34;&lt;/span&gt;);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                              [3]图书信息查询                \\n\\n&amp;#34;&lt;/span&gt;);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                              [4]图书信息修改                \\n\\n&amp;#34;&lt;/span&gt;);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                              [5]图书信息删除                \\n\\n&amp;#34;&lt;/span&gt;);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                              [6]图书排序                    \\n\\n&amp;#34;&lt;/span&gt;);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                              [7]图书借阅                    \\n\\n&amp;#34;&lt;/span&gt;);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                              [0]退出系统                    \\n\\n&amp;#34;&lt;/span&gt;);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                              请选择:&amp;#34;&lt;/span&gt;);\n        fflush(stdin);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;choice);\n        switch(choice) {\n            case &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(head&amp;#61;&amp;#61;NULL) {\n                    head&amp;#61;Create_Books_Doc();\n                }\n                InsertDoc(head);\n                break;\n            case &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n                Print_Book_Doc(head);\n                break;\n            case &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n                search_book(head);\n                break;\n            case &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; :\n                info_change(head);\n                break;\n            case &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:\n                DeleteDoc(head);\n                break;\n            case &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;:\n                sort_maopao(head);\n                break;\n            case &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;:\n                book_borrow(head);\n                break;\n            case &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; :\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;          ━━━━━━━━  感谢使用图书管理系统  ━━━━━━━━\\n&amp;#34;&lt;/span&gt;);\n                break;\n            default :\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;                      ━━━━ 输入错误&amp;#xff0c;请重新输入&amp;#xff01;━━━━&amp;#34;&lt;/span&gt;);\n        }\n    } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(choice!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["谁能帮我排列这个C语言", ["#include<stdio.h>", "#include<math.h>", " #include<string.h>", " #include<stdlib.h>", "struct books_list  {  char writer[20];             /", "作者名", "/  char title[20];  char ISBN[20];                      /", "书名", "/  char publishinghouse[20];          /", "出版单位", "/  int  price,borrowed;                        /", "价格", "/", "struct books_list * next;  /", "链表的指针域", "/  };", "struct books_list * Create_Books_Doc();              /", "新建链表", "/  void InsertDoc(struct books_list * head);            /", "插入", "/  void sort_maopao(struct books_list * head );          // 排序  void DeleteDoc(struct books_list * head , int num);  /", "删除", "/  void Print_Book_Doc(struct books_list * head);        /", "浏览", "/  void search_book(struct books_list * head);          /", "查询", "/  void info_change(struct books_list * head);          /", "修改", "/  void save(struct books_list * head);                  /", "保存数据至文件", "/  /", "新建链表头节点", "/  struct books_list * Create_Books_Doc()  {  struct books_list * head;  head=(struct books_list *)malloc(sizeof(struct books_list)); /", "分配头节点空间", "/  head->next=NULL;  /", "头节点指针域初始化，定为空", "/  return head;  }  /", "保存数据至文件", "/  void save(struct books_list * head)  {  struct books_list *p;  FILE *fp;  p=head;  fp=fopen(\"data.txt\",\"w+\"); /", "以写方式新建并打开 data.txt文件", "/  fprintf(fp,\" --------编号-------书  名---------------作    者----------出版社-----------价格    \\n\");   /", "指针从头节点开始移动，遍历至尾结点，依次输出图书信息", "/  while(p->next!= NULL)  {  p=p->next;  fprintf(fp,\"%-6.6s %-15.10s %-10.10s %-10.10s %-10.10d\\n\",p->ISBN,p->title,p->writer,p->publishinghouse,p->price);  }  fprintf(fp,\"\\n\");  fclose(fp);  printf(\"    已将图书数据保存到 data.txt 文件\\n\");  }  void sort_maopao(struct books_list * head )  {  struct books_list *tail,*p,*q,*p1,*t; //p1等于head t等于head q保存p的next节点  p1=(struct books_list *)malloc(sizeof (struct books_list));  for(t=head->next;t!=NULL;t=t->next)  for(p=head->next,p1=head;p->next!=NULL;p=p->next,p1=p1->next)  {  if(strcmp(p->ISBN,p->next->ISBN)>0)  {   q=p->next->next;  tail=p->next;  tail->next=NULL;  p->next=q;  p1->next=tail;  tail->next=p;  p=p1;  }  }  save(head);  //保存文件  }  /", "插入", "/  void InsertDoc(struct books_list *head)  {  /", "定义结构体指针变量 s指向开辟的新结点首地址 p为中间变量", "/  struct books_list *s, *p;  char flag='Y'; /", "定义flag,方便用户选择重复输入", "/  p=head;  /", "遍历到尾结点，p指向尾结点", "/  while(p->next!= NULL)  {  p=p->next;  }   /", "开辟新空间,存入数据,添加进链表", "/  while(flag=='Y'||flag=='y')  {  system(\"cls\");  p->borrowed=0;  s=(struct books_list *)malloc(sizeof(struct books_list));  printf(\"\\n                    请输入图书编号:\");  fflush(stdin);  scanf(\"%s\",s->ISBN);  printf(\"\\n                    请输入图书书名:\");  fflush(stdin);  scanf(\"%s\",s->title);  printf(\"\\n                    请输入图书作者名:\");  fflush(stdin);  scanf(\"%s\",s->writer);  printf(\"\\n                    请输入图书出版社:\");  fflush(stdin);  scanf(\"%s\",s->publishinghouse);  printf(\"\\n                    请输入图书价格:\");  fflush(stdin);  scanf(\"%d\",&s->price);  printf(\"\\n\");  p->next=s;  /", "将新增加的节点添加进链表", "/  p=s;  /", "p指向尾节点，向后移", "/  s->next=NULL;  printf(\"                  ━━━━ 添加成功！━━━━\");  printf(\"\\n                          继续添加？(Y/N):\");  fflush(stdin);  scanf(\"%c\",&flag);  printf(\"\\n\");  if(flag=='N'||flag=='n')  {break;}  else if(flag=='Y'||flag=='y')  {continue;}  }  save(head);  /", "保存数据至文件", "/  system(\"cls\");  return;  }  /", "查询操作", "/  void search_book(struct books_list *head)  {  struct books_list * p;  char temp[20];  p=head;  if(head==NULL || head->next==NULL) /", "判断数据库是否为空", "/  {  printf(\"                      ━━━━ 图书库为空！━━━━\\n\");  }  else  {  printf(\"请输入您要查找的书名: \");  fflush(stdin);  scanf(\"%s\",temp);  /", "指针从头节点开始移动，遍历至尾结点，查找书目信息", "/  while(p->next!= NULL)  {  p=p->next;  if(strcmp(p->title,temp)==0)  {  printf(\"\\n图书已找到!\\n\");  printf(\"\\n\");  printf(\"编号: %s\\t\\n\",p->ISBN);  printf(\"书名: %s\\t\\n\",p->writer);  printf(\"作者名: %s\\t\\n\",p->writer);  printf(\"出版单位: %s\\t\\n\",p->publishinghouse);  printf(\"价格: %.2d\\t\\n\",p->price);  }  if(p->next==NULL)  {  printf(\"\\n查询完毕!\\n\");  }  }  }  return;  }  /", "浏览操作", "/  void Print_Book_Doc(struct books_list * head)  {  struct books_list * p;  if(head==NULL || head->next==NULL)  /", "判断数据库是否为空", "/  {  printf(\"\\n                      ━━━━  没有图书记录!  ━━━━\\n\\n\");  return;  }  p=head;  printf(\"\\n\\n\\n\\t\\t编号    书 名        作 者    出版单位    价格  \\n\");  /", "指针从头节点开始移动，遍历至尾结点，依次输出图书信息", "/  while(p->next!= NULL)  {  p=p->next;  printf(\"\\t\\t%-7.6s %-13.10s %-10.10s %-10.10s %d \\n\",p->ISBN,p->title,p->writer,p->publishinghouse,p->price);  }  printf(\"\\n\");  }  /", "修改操作", "/  void info_change(struct books_list * head)  {  struct books_list * p;  int panduan=0; /", "此变量用于判断是否找到书目", "/  char temp[20];  p=head;  printf(\"请输入要修改的书名:\");  scanf(\"%s\",temp);  while(p->next!= NULL)  {  p=p->next;  if(strcmp(p->title,temp)==0)  {  printf(\"\\n                    请输入图书编号:\");  fflush(stdin);  scanf(\"%d\",p->ISBN);  printf(\"\\n                    请输入图书书名:\");  fflush(stdin);  scanf(\"%s\",p->title);  printf(\"\\n                    请输入图书作者名:\");  fflush(stdin);  scanf(\"%s\",p->writer);  printf(\"\\n                    请输入图书出版社:\");  fflush(stdin);  scanf(\"%s\",p->publishinghouse);  printf(\"\\n                    请输入图书价格:\");  fflush(stdin);  scanf(\"%d\",&p->price);  printf(\"\\n\");  panduan=1;  }  }  if(panduan==0)  {  printf(\"\\n                      ━━━━  没有图书记录!  ━━━━\\n\\n\");  }  return;  }  void book_borrow(struct books_list * head)  {  struct books_list * p;  int panduan=0; /", "此变量用于判断是否找到书目", "/  char temp[20];  p=head;  printf(\"请输入要借的书名:\");  scanf(\"%s\",temp);  while(p->next!= NULL)  {  p=p->next;  if((strcmp(p->title,temp)==0)&&(p->borrowed==0))  {  p->borrowed=1;  panduan=1;  printf(\"图书已经成功借出\\n\");  }  }  if(panduan==0)  {  printf(\"\\n                      ━━━━  没有要借阅的图书!  ━━━━\\n\\n\");  }  return;  }  /", "删除操作", "/  void DeleteDoc(struct books_list * head)  {  struct books_list *s,*p;    /", "s为中间变量，p为遍历时使用的指针", "/  char temp[20];  int panduan; /", "此变量用于判断是否找到了书目", "/  panduan=0;  p=s=head;  printf(\"                    [请输入您要删除的书名]:\");  scanf(\"%s\",temp);  /", "遍历到尾结点", "/  while(p!= NULL)  {  if(strcmp(p->title,temp)==0)  {  panduan++;  break;  }  p=p->next;  }  if(panduan==1)  {  for(;s->next!=p;)    /", "找到所需删除卡号结点的上一个结点", "/  {  s=s->next;  }  s->next=p->next; /", "将后一节点地址赋值给前一节点的指针域", "/  free(p);  printf(\"\\n                      ━━━━  删除成功!  ━━━━\\n\");  }  else /", "未找到相应书目", "/  {  printf(\"                    您输入的书目不存在，请确认后输入!\\n\");  }  return;  }  int main(void)  {  struct books_list * head;  int choice;  head=NULL;  do{  printf(\"                                                              \\n\");   printf(\"          -------------------- 图书管理系统-------------------\\n\\n\");  printf(\"                              [1]图书信息录入                \\n\\n\");  printf(\"                              [2]图书信息浏览                \\n\\n\");  printf(\"                              [3]图书信息查询                \\n\\n\");  printf(\"                              [4]图书信息修改                \\n\\n\");  printf(\"                              [5]图书信息删除                \\n\\n\");  printf(\"                              [6]图书排序                    \\n\\n\");  printf(\"                              [7]图书借阅                    \\n\\n\");  printf(\"                                [0]退出系统                    \\n\\n\");  printf(\"                              请选择:\");  fflush(stdin);  scanf(\"%d\",&choice);  switch(choice)  {  case 1:  if(head==NULL)  {  head=Create_Books_Doc();  }  InsertDoc(head);  break;  case 2:  Print_Book_Doc(head);  break;  case 3:  search_book(head);  break;  case 4 : info_change(head);  break;   case 5:  DeleteDoc(head);  break;  case 6:  sort_maopao(head);  break;  case 7: book_borrow(head);  break;     case 0 :  printf(\"\\n\");  printf(\"          ━━━━━━━━  感谢使用图书管理系统  ━━━━━━━━\\n\");  break;  default :  printf(\"                      ━━━━ 输入错误，请重新输入！━━━━\");  }  }while(choice!=0);  return 0;  }"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;17行为啥先加1呢&amp;#xff1f;加1的话&amp;#xff0c;uuid_list_index 就有可能为NUM&amp;#xff0c;memcpy复制时就越界了。&lt;br /&gt;把 17和18行交换一下吧&lt;br /&gt;另外第9行也不需要比较到NUM-1啊&amp;#xff0c;只需要for (int n &amp;#61; 0; n &amp;lt; uuid_list_index-1; n&amp;#43;&amp;#43;)就可以了&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["想通过 二维数组 去不重复的存储 设备扫描到的 UUID（16位）。", ["问题遇到的现象和发生背景", "\n", "二维数组范例：", "UUID_LIST[NUM][16]； //NUM是扫描到的UUID的个数", "int uuid_list_index = 0; ///UUID List Index", "\n", "问题相关代码，请勿粘贴截图", "\n", "    ", "if", " (uuid_list_index >= NUM)\n    {\n       uuid_list_index = ", "0", ";\n       ", "break", ";\n    }\n\n     ", "if", " (uuid_list_index <NUM)\n    {\n          ", "for", " (", "int", " n = ", "0", "; n < NUM; n++)\n        {\n            ", "if", " (", "memcmp", "(uuid_list_array[n], p_dev_info.dev_uuid, MESH_DEV_UUID_LEN) == ", "0", ")\n            {\n            ", "break", ";\n            }\n            ", "else", "\n            {\n                uuid_list_index = uuid_list_index + ", "1", ";\n                ", "memcpy", "(uuid_list_array[uuid_list_index], p_dev_info.dev_uuid, MESH_DEV_UUID_LEN);\n            }\n        }\n", "\n", "运行结果及报错内容", "\n", "无法实现UUID的 不重复 的存储。", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "每扫描到一个UUID，会先在二维数组里遍历是否存在。 存在的话，不做任何操作，不存在的话，将UUID存储到二维数组中（尾插）。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(x&amp;#61;st.lower&lt;span class=\"hljs-constructor\"&gt;_bound(&lt;span class=\"hljs-params\"&gt;m&lt;/span&gt;)&lt;/span&gt;;x!&amp;#61;st.upper&lt;span class=\"hljs-constructor\"&gt;_bound(&lt;span class=\"hljs-params\"&gt;m&lt;/span&gt;)&lt;/span&gt;;x&amp;#43;&amp;#43;,j&amp;#43;&amp;#43;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你这句for循环是用来做什么的&amp;#xff1f;为什么后面加个分号&amp;#xff1f;只是循环什么也不干&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["oj上的一道题    其他操作应该没问题，但不知为什么“del”的操作删除了一个数据后程序就无法进行下去了，若“del”没有删除数据则没有问题", ["现有一整数集（允许有重复元素），初始为空。我们定义如下操作：", "add x 把x加入集合", "del x 把集合中所有与x相等的元素删除", "ask x 对集合中元素x的情况询问", "对每种操作，我们要求进行如下输出。", "add 输出操作后集合中x的个数", "del 输出操作前集合中x的个数", "ask 先输出0或1表示x是否曾被加入集合（0表示不曾加入），再输出当前集合中x的个数，中间用空格格开。", "输入", "第一行是一个整数n，表示命令数。0<=n<=100000。", "后面n行命令，如Description中所述。", "输出", "共n行，每行按要求输出。", "样例输入", "7", "add 1", "add 1", "ask 1", "ask 2", "del 2", "del 1", "ask 1", "样例输出", "1", "2", "1 2", "0 0", "0", "2", "1 0", "提示", "Please use STL’s set and multiset to finish the task", "\n", "以下是我的代码，求大家帮忙看看", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<cstring>", "\n", "#", "include", "<set>", "\n", "using", " ", "namespace", " std;\n", "int", " ", "main", "()", "{\n    ", "int", " n,m;\n    ", "char", " f[", "10", "];\n    cin>>n;\n    multiset<", "int", "> st,ps;\n    multiset<", "int", ">::iterator x;\n    ", "for", "(", "int", " p=", "0", ";p<n;p++){\n        cin>>f>>m;\n        ", "if", "(", "strcmp", "(f,", "\"add\"", ")==", "0", "){\n            ", "int", " j=", "0", ";\n            st.", "insert", "(m);\n            ps.", "insert", "(m);\n        ", "for", "(x=st.", "lower_bound", "(m);x!=st.", "upper_bound", "(m);x++,j++);\n            cout<<j<<endl;\n        }\n        ", "else", " ", "if", "(", "strcmp", "(f,", "\"del\"", ")==", "0", "){\n            ", "int", " j=", "0", ";\n        ", "for", "(x=st.", "lower_bound", "(m);x!=st.", "upper_bound", "(m);x++,j++);\n            cout<<j<<endl;\n            ", "while", "(st.", "find", "(m)!=st.", "end", "())\n            st.", "erase", "(x);\n        }\n        ", "else", " ", "if", "(", "strcmp", "(f,", "\"ask\"", ")==", "0", "){\n            ", "int", " j=", "0", ";\n            x=ps.", "find", "(m);\n            ", "if", "(x!=ps.", "end", "())\n            cout<<", "1", "<<", "\" \"", ";\n            ", "else", " ", "if", "(x==ps.", "end", "())\n            cout<<", "0", "<<", "\" \"", ";\n            ", "for", "(x=st.", "lower_bound", "(m);x!=st.", "upper_bound", "(m);x++,j++);\n            cout<<j<<endl;\n        }\n    }\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;通过 static 关键字&lt;br /&gt;静态局部变量使用static修饰符定义&amp;#xff0c;即使在声明时未赋初值&amp;#xff0c;编译器也会把它初始化为0。且静态局部变量存储于进程的全局数据区&amp;#xff0c;即使函数返回&amp;#xff0c;它的值也会保持不变。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;void &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;\n{\n    static bool first &amp;#61; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//赋初值&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(first)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//只执行一次&lt;/span&gt;\n    }\n    first &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n&lt;span class=\"hljs-comment\"&gt;//接下来实现自己想要实现的过程内容&lt;/span&gt;\n}\n&amp;#96;&amp;#96;&amp;#96;c&amp;#43;&amp;#43;\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["C++链表调用两次遍历，结果却只输出一次", ["在主函数中调用了两次调用但是下面输出窗口只有一次", "代码输出结果如下，请大家帮我看看哪里出了问题", "\n", "截屏2022-10-04 21.33.05.png", "Node.h", "\n", "template ", "<class T3>", "\nstruct ", "Node", "\n", "{\n    T3", " data;\n    ", "Node", "<T3", "> *next;\n};\n\n", "\n", "linklist.h", "\n", "#", "include", " ", "\"Node.h\"", "\ntemplate<", "class", " T>\n", "class", " LinkList\n{\npublic:\n    ", "LinkList()", ";", "//无参构造函数", "\n    ", "LinkList(T ", "a", "[],", "int", " ", "n", ")", ";", "//有参构造函数(头插法)", "\n    ", "LinkList(", "int", " ", "n", ",T ", "a", "[])", ";", "//有参构造函数(尾插法)", "\n    ~", "LinkList()", ";", "//析构函数", "\n    ", "int", " ", "Length()", ";", "//获取链表长度", "\n    T ", "Get(", "int", " ", "i", ")", ";", "//按位查找", "\n    ", "int", " ", "Locate(T ", "x", ")", ";", "//按值查找", "\n    void ", "Insert(", "int", " ", "i", ",T ", "x", ")", ";", "//插入", "\n    T ", "Delete(", "int", " ", "i", ")", ";", "//删除", "\n    void ", "Set(", "int", " ", "i", ",T ", "x", ")", ";", "//设置数据域的值", "\n    void ", "PrintList()", ";", "//遍历链表", "\n", "private", ":\n    Node<T>*first;", "//头指针", "\n};\n\n\n", "\n", "linklist.cpp", "\n", "#include \"linkList.h\"", "\n", "#include <iostream>", "\nusing namespace std;\n", "//", "按位查找\ntemplate<class T>\nT LinkList<T>::Get(int i)\n{\n    Node<T>*p = first;", "//", "创建工作指针,指向头结点\n    int j = ", "0", ";", "//", "计数\n    ", "while", "(p&&j<i)", "//", "p指针指向的位置不为空并且没有到第i个结点\n    {\n        p = p->", "next", ";", "//", "工作指针p指向下一个位置\n        j++;", "//", "到下一个结点\n    }\n    ", "if", "(!p)throw ", "\"位置不对\"", ";", "//", "p指向的位置为空\n    ", "else", " return p->data;", "//", "找到了\n}\n\n", "//", "插入,由于单链表带头结点，表头、表中、表位三种情况的操作语句一致\ntemplate<class T>\nvoid LinkList<T>::Insert(int i,T x)\n{\n    Node<T> *p = first;", "//", "创建工作指针\n    Node<T> *s;", "//", "创建指向新结点的指针\n    int j = ", "0", ";", "//", "计数\n    ", "while", "(p&&j<i-", "1", ")", "//", "p指向的位置不为空并且没要到第i-", "1", "个结点\n    {\n        p = p->", "next", ";", "//", "p指向下一个结点\n        j++;", "//", "迭代器增加\n    }\n    ", "if", "(!p) throw", "\"位置错误\"", ";", "//", "p指向的位置为空抛出异常\n    ", "else", "\n    {\n        s = new Node<T>;", "//", "创建一个结点,让s指针指向它\n        s->data = x;", "//", "将需要插入的值存入新快结点的数据域\n        s->", "next", " = p->", "next", ";", "//", "将原来第i个节点的地址存入新结点的指针域\n        p->", "next", " = s;", "//", "将新结点的地址存入第i-", "1", "个结点的指针域\n    }\n}\n\n", "//", "删除,最后一个结点没有后继结点（需要两个工作指针）\ntemplate<class T>\nT LinkList<T>::Delete(int i)\n{\n    Node<T> *p = first;", "//", "创建工作指针\n    Node<T> *q;", "//", "创建工作指针", "2", "\n    int j = ", "0", ";", "//", "计数\n    T x;", "//", "存储需要删除的结点数据域的值\n    ", "while", "(p&&j<i-", "1", ")", "//", "p指向的位置不为空并且没要到第i-", "1", "个结点\n    {\n        p = p->", "next", ";", "//", "p指向下一个结点\n        j++;", "//", "迭代器增加\n    }\n    ", "if", "(!p||!p->", "next", ") throw", "\"位置异常\"", ";\n    ", "else", "\n    {\n        q = p->", "next", ";", "//", "q指向需要删除的结点\n        x = q->data;", "//", "将需要删除的结点的数据域的内容存入x\n        p->", "next", " = q->", "next", ";", "//", "将第i-", "1", "个结点和原来第i+", "1", "个结点连接起来\n        ", "delete", " q;", "//", "释放第i个结点的空间\n        return x;", "//", "返回删除结点数据域中的内容\n    }\n}\n\n", "//", "无参数构造函数\ntemplate<class T>\nLinkList<T>::LinkList()\n{\n    first = new Node<T>;\n    first->", "next", " = NULL;", "//", "将头结点的指针域设置为空\n}\n\n", "//", "有参数构造函数（头插法）\ntemplate<class T>\nLinkList<T>::LinkList(T a[],int n)\n{\n    Node<T> *s;", "//", "指向待插入结点的指针\n    first = new Node<T>;", "//", "创建一个头结点\n    first->", "next", " = NULL;\n    ", "for", "(int i = ", "0", ";i<n;i++)\n    {\n        s = new Node<T>;", "//", "s指向待插入结点\n        s->data = a[i];\n        s->", "next", " = first->", "next", ";", "//", "将新结点与第一个结点连接\n        first->", "next", " = s;", "//", "将插入的结点与头结点相连接\n    }\n}\n\n", "//", "有参数的构造函数（尾插法）\ntemplate<class T>\nLinkList<T>::LinkList(int n,T a[])\n{\n    first = new Node<T>;", "//", "创建头结点\n    Node<T> *rear=first,*s;", "//", "创建工作指针和指向待插入结点的指针\n    ", "for", "(int i = ", "0", ";i<n;i++)\n    {\n        s = new Node<T>;", "//", "创建待插入的结点\n        s->data = a[i];", "//", "给数据域赋值\n        rear->", "next", " = s;", "//", "连接最后一个结点和新插入的结点\n        rear = s;", "//", "rear指向最后一个结点\n    }\n    rear->", "next", " = NULL;\n}\n\n", "//", "析构函数\ntemplate<class T>\nLinkList<T>::~LinkList()\n{\n    Node<T> *p = first;", "//", "用于移位的工作指针\n    Node<T> *q;", "//", "用于释放空间的工作指针\n    ", "while", "(p)", "//", "p指向的位置不为空\n    {\n        q = p;", "//", "q指向p指向的结点\n        p = p->", "next", ";", "//", "p移动到下一个结点\n        ", "delete", " q;\n    }\n}\n\n", "//", "计算链表的长度\ntemplate<class T>\nint LinkList<T>::Length()\n{\n    Node<T> *p = first;", "//", "用于移位的工作指针\n    int j = ", "0", ";\n    ", "while", "(p->", "next", ")\n    {\n        p = p->", "next", ";", "//", "p移动到下一个结点\n        j++;\n    }\n    return j;\n}\n\n", "//", "按值查找\ntemplate<class T>\nint LinkList<T>::Locate(T x)\n{\n    Node<T> *p = first;", "//", "用于移位的工作指针\n    int j = ", "0", ";", "//", "计数\n    ", "while", "(p)\n    {\n        p = p->", "next", ";", "//", "p移动到下一个结点\n        j++;\n        ", "if", "(x==p->data)\n            return j;\n    }\n}\n\n", "//", "遍历链表\ntemplate<class T>\nvoid LinkList<T>::PrintList()\n{\n    Node<T> *p = first;", "//", "用于移位的工作指针\n    ", "while", "(p) {\n        p = p->", "next", ";", "//", "p移动到下一个结点\n        cout << p->data << endl;", "//", "输出p当前指向的结点的数据域的值\n    }\n}\n\n", "//", "设置数据域的值\ntemplate<class T>\nvoid LinkList<T>::Set(int i,T x)\n{\n    Node<T> *p = first;\n    int j = ", "0", ";\n    ", "while", "(p&&j<i)\n    {\n        p = p->", "next", ";", "//", "P指向下一个结点\n        j++;\n    }\n    ", "if", "(!p)throw", "\"位置错误\"", ";\n    ", "else", "\n    {\n        p->data = x;\n    }\n\n}\n\n\n\n", "\n", "main.cpp", "\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "\"linkList.cpp\"", "\n", "using", " ", "namespace", " std;\n", "int", " ", "main", "()", " ", "{\n\n    ", "int", " a[", "5", "] = {", "1", ",", "2", ",", "3", ",", "4", ",", "5", "};\n    ", "LinkList<", "int", "> ", "L1", "(", "5", ",a)", ";", "//头插法创建单链表", "\n    ", "LinkList<", "int", "> ", "L2", "(a,", "5", ")", ";", "//尾插法创建单链表", "\n    ", "try", "\n    {\n        cout<<", "\"单链表L1的长度为：\"", "<<L1.", "Length", "()<<endl;\n        cout<<", "\"遍历L1链表\"", "<<endl;\n        L1.", "PrintList", "();\n        cout<<", "\"单链表L2的长度为:\"", "<<L2.", "Length", "()<<endl;\n        cout<<", "\"遍历L2链表\"", "<<endl;\n        L2.", "PrintList", "();\n    }\n    ", "catch", "(", "const", " ", "char", " *msg){cout<<msg<<endl;}\n\n    ", "return", " ", "0", ";\n}\n\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;第9行的while(1)是死循环&amp;#xff0c;你没有结束循环的条件&lt;br /&gt;代码修改如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#include&amp;lt;stdio.h&amp;gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main()\n{\n\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;  &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;);\n    while (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;;\n        while (&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n            &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; /&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        }\n        i&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; * &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d:%d\\n&amp;#34;&lt;/span&gt;, i, &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;t&lt;/span&gt;) {\n            break;\n        }\n    }\n\n\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["为什么我的这个循环出不去呀，哪里出问题了呢", ["问题遇到的现象和发生背景", "\n", "对任意一个自然数N", "0", "​", " ，先将其各位数字相加求和，再将其和乘以3后加上1，变成一个新自然数N", "1", "​", " ；然后对N", "1", "​", " 重复这种操作，可以产生新自然数N", "2", "​", " ；……多次重复这种操作，运算结果最终会得到一个固定不变的数N", "k", "​", " ，就像掉入一个数字“陷阱”。", "\n", "本题要求对输入的自然数，给出其掉入“陷阱”的过程。", "\n", "问题相关代码，请勿粘贴截图", "\n", "# include<stdio.h>\n", "int", " main()\n{\n    \n    ", "int", " ", "sum", "=", "0", ";\n    ", "int", " i=", "0", ";\n    ", "int", " ", "N", "[", "100", "]={};\n    scanf(", "\"%d\"", ",&", "N", "[", "0", "]);\n    while(", "1", "){\n        while(", "N", "[i]!=", "0", "){\n        ", "sum", "+=", "N", "[i]%", "10", ";\n        ", "N", "[i]/=", "10", ";\n    }\n       i++;\n       ", "N", "[i]=", "sum", "*", "3", "+", "1", ";\n       printf(", "\"%d:%d\\n\"", ",i,", "N", "[i]);\n       ", "sum", "=", "0", ";\n       ", "if", "(", "N", "[i]==", "N", "[i-", "1", "]){\n           break;\n       }\n   }\n \n    \n    return ", "0", ";\n}\n\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;687行&amp;#xff0c;head&amp;#61;p1;改成head&amp;#61;p2;&lt;br /&gt;688-693行的p1都改成p2&lt;br /&gt;698行的 p2&amp;#61;p1放在for循环的最后一句&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;// 686 - 711行代码修改如下&amp;#xff1a;&lt;/span&gt;\np1&amp;#61;p2&amp;#61;(BookInfo*)malloc(sizeof(BookInfo));\n    head&amp;#61;p2;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;strcpy&lt;/span&gt;(p2-&amp;gt;&lt;/span&gt;bnum,bnum);&lt;span class=\"hljs-comment\"&gt;//复制书号&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;strcpy&lt;/span&gt;(p2-&amp;gt;&lt;/span&gt;bname,bname);&lt;span class=\"hljs-comment\"&gt;//复制书名&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;strcpy&lt;/span&gt;(p2-&amp;gt;&lt;/span&gt;bauthor,bauthor);&lt;span class=\"hljs-comment\"&gt;//复制作者&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;strcpy&lt;/span&gt;(p2-&amp;gt;&lt;/span&gt;bclassfy,bclassfy);&lt;span class=\"hljs-comment\"&gt;//复制出版社&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p2&lt;/span&gt;-&amp;gt;&lt;/span&gt;br&amp;#61;br;&lt;span class=\"hljs-comment\"&gt;//复制书的状态 &lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p2&lt;/span&gt;-&amp;gt;&lt;/span&gt;bprice&amp;#61;bprice;&lt;span class=\"hljs-comment\"&gt;//复制单价&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;k;i&amp;#43;&amp;#43;)&lt;span class=\"hljs-comment\"&gt;//先将图书信息建立链表&amp;#xff0c;更改库存&lt;/span&gt;\n    {\n        fscanf(fp,&lt;span class=\"hljs-string\"&gt;&amp;#34;%s%s%s%s%f%d\\n&amp;#34;&lt;/span&gt;,bnum,bname,bauthor,bclassfy,&amp;amp;bprice,&amp;amp;br);\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p2&lt;/span&gt;-&amp;gt;&lt;/span&gt;next&amp;#61;p1;\n        &lt;span class=\"hljs-comment\"&gt;//p2&amp;#61;p1; //放在最后面&lt;/span&gt;\n        p1&amp;#61;(BookInfo*)malloc(sizeof(BookInfo));\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;strcpy&lt;/span&gt;(p1-&amp;gt;&lt;/span&gt;bnum,bnum);&lt;span class=\"hljs-comment\"&gt;//复制书号&lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;strcpy&lt;/span&gt;(p1-&amp;gt;&lt;/span&gt;bname,bname);&lt;span class=\"hljs-comment\"&gt;//复制书名&lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;strcpy&lt;/span&gt;(p1-&amp;gt;&lt;/span&gt;bauthor,bauthor);&lt;span class=\"hljs-comment\"&gt;//复制作者&lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;strcpy&lt;/span&gt;(p1-&amp;gt;&lt;/span&gt;bclassfy,bclassfy);&lt;span class=\"hljs-comment\"&gt;//复制出版社&lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p1&lt;/span&gt;-&amp;gt;&lt;/span&gt;br&amp;#61;br;&lt;span class=\"hljs-comment\"&gt;//复制书的状态 &lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p1&lt;/span&gt;-&amp;gt;&lt;/span&gt;bprice&amp;#61;bprice;&lt;span class=\"hljs-comment\"&gt;//复制单价&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//p2-&amp;gt;next&amp;#61;p1;//这一句重复了&amp;#xff0c;删掉即可&lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p1&lt;/span&gt;-&amp;gt;&lt;/span&gt;next&amp;#61;NULL;\n\n        p2&amp;#61;p1;\n    }\n    fclose(fp);\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["借阅函数（668-791行）更改用户信息之后，无法存入文件，或者存很多重复的", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <", "time", ".h>\n \ntypedef struct book\n{\n    char bnum[", "10", "];", "//书籍编号 ", "\n    char bname[", "30", "];", "//书名 ", "\n    char bauthor[", "20", "];", "//作者 ", "\n    char bclassfy[", "10", "];", "//类别编号 ", "\n    float bprice;", "//价格 ", "\n    int br;", "//书的状态（1库中0借出） ", "\n    struct book* next;", "//链表指针 ", "\n }BookInfo;\n \n BookInfo* CreateBooksList();", "//创建链表", "\nvoid Insert(BookInfo* head);", "//插入", "\nvoid Delete(BookInfo* head);", "//删除", "\nvoid Print(BookInfo* head);", "//浏览 ", "\nvoid Search(BookInfo* head);", "//查询 ", "\nvoid Update(BookInfo* head);", "//修改 ", "\nvoid Save(BookInfo* head);", "//保存 ", "\nvoid Borrowedbooks();", "//图书借阅 ", "\ntypedef struct User\n{\n    char ", "name", "[", "10", "];", "//名字", "\n    char password[", "10", "];", "//密码", "\n    char book[", "10", "];", "//借的书 ", "\n    struct User* next;  ", "//下一位用户", "\n}user;\nstruct bk", "//查找 ", "\n{\n    char bnum[", "10", "];", "//书籍编号 ", "\n    char bname[", "30", "];", "//书名 ", "\n    char bauthor[", "20", "];", "//作者 ", "\n    char bclassfy[", "10", "];", "//类别编号 ", "\n    float bprice;", "//价格 ", "\n    int quantity;", "//数量 ", "\n};\nstruct ur", "//查找 ", "\n{\n    char ", "name", "[", "10", "];", "//名字", "\n    char password[", "10", "];", "//密码", "\n    char book[", "10", "];", "//借的书 ", "\n};\n \nuser* CreateusersList();", "//创建链表 ", "\nvoid userInsert(user* head);", "//注册用户信息 ", "\nvoid userDelete(user* head);", "//删除用户", "\nvoid userprint(user* head);", "//浏览用户 ", "\nuser* serch_username(char* ", "name", ");", "//根据名字查找用户 ", "\nvoid user_login();  ", "//用户登录", "\nvoid userUpdate(user* head);", "//更改用户信息 ", "\nvoid userSave(user* head);", "//保存用户信息 ", "\nint usermenu();", "//用户系统", "\nvoid adminlogin();", "//管理员登录 ", "\n \n", "//创建用户名单 ", "\nuser* CreateusersList()\n{\n    user* head;\n    head=(user*)malloc(sizeof(user));", "//为头结点分配空间 ", "\n    ", "head", "->", "next=NULL;", "//初始化头指针", "\n    return head; \n } \n ", "//注册用户信息 ", "\nvoid userInsert(user* head)\n{\n    user *b, *p;\n    char flag=", "'Y'", ";\n    p=head;\n    ", "while", " (p->", "next !=NULL)\n        ", "p", "=p->", "next;\n    ", "//开辟新空间，存储用户信息，并加入链表", "\n    ", "while", " (flag==", "'Y'", "||flag==", "'y'", ")\n    {\n        b=(user*)malloc(sizeof(user));", "//开辟新空间", "\n        printf(", "\"请输入用户名：\"", ");", "//获取名称信息 ", "\n        fflush(stdin); ", "//清空缓存区", "\n        ", "scanf", "(\"%s\",b->", "name", ");\n        printf(", "\"请输入密码：\"", ");\n        fflush(stdin);\n        ", "scanf", "(\"%s\",b->", "password);\n        ", "p", "->", "next=b;", "//将新增加的节点加入链表", "\n        p=b;", "//指针p向后移动，指向尾结点", "\n        ", "b", "->", "next=NULL;\n        printf(", "\"注册成功！\\n\"", ");\n        fflush(stdin);\n        break;\n     } \n     return;\n }\nuser* user_head;  ", "//用户头指针", "\nuser* serch_username(char* ", "name", ")  ", "//查找用户名", "\n{\n    ", "user", "* np = user_head->", "next;\n    ", "while", " (np)\n    {\n        ", "if", " (!strcmp(np->", "name", ", ", "name", ")) return np;\n        ", "np", " = np->", "next;\n    }\n    return NULL;\n}\n \n", "//用户登录 ", "\nvoid user_login()  ", "//用户登录", "\n{\n    char ", "name", "[", "30", "];\n    char password[", "30", "];\n    printf(", "\"请输入您的用户名(不超过10个字母)：\\n\"", ");\n    scanf(", "\"%s\"", ", ", "name", ");\n    printf(", "\"请输入您的账号密码(不超过10个字母)：\\n\"", ");\n    scanf(", "\"%s\"", ", password);\n    int i,j=", "0", ";\n    FILE* fp;\n    struct ur u;\n    fp=fopen(", "\"F:\\\\c语言课设\\\\userslist.txt\"", ",", "\"r\"", "); \n    ", "if", "(j==", "0", ")\n    {\n        ", "for", "(i=", "0", ";i<", "10", ";i++)\n    {\n        fscanf(fp,", "\"%s %s %s\\n\"", ",&u.", "name", ",&u.password,&u.book);\n        ", "if", "(strcmp(u.", "name", ",", "name", ")==", "0", "&&strcmp(u.password,password)==", "0", ")\n        {\n            printf(", "\"恭喜您登录成功,即将跳转用户界面...\\n\"", ");\n            system(", "\"cls\"", ");\n            j=", "1", ";\n            usermenu();\n        }\n    }\n    fclose(fp);\n    }\n    ", "if", "(j==", "0", ")\n    {\n        printf(", "\"用户名或密码错误\\n\"", ");\n    }\n    }\n \n", "//", "\n \n \n ", "//删除用户 ", "\nvoid userDelete(user* head)\n{\n    user *b, *p;\n    char tmp[", "30", "];\n    int flag;\n    flag=", "0", ";\n    b=head;\n    p=head;\n    printf(", "\"请输入要删除的用户名：\"", ");\n    fflush(stdin);\n    scanf(", "\"%s\"", ",tmp);\n    ", "//遍历链表", "\n    ", "while", " (p!=NULL)\n    {\n        ", "if", "(strcmp(p->", "name", ",tmp)==", "0", ")\n        {\n            flag=", "1", ";\n            break;\n        }\n        ", "p", "=p->", "next;\n     } \n    ", "if", " (flag==", "1", ")\n    {\n        ", "for", " (;b->", "next !=p;)\n        {\n            ", "b", "=b->", "next;\n        }\n        ", "b", "->", "next", "=p->", "next;\n        free(p);\n        printf(", "\"删除成功！\\n\"", ");\n    }\n    ", "else", "\n        printf(", "\"该用户不存在！\"", ");\n    return;\n  } \n", "//浏览用户 ", "\nvoid userprint(user* head)\n{\n    user *p;\n    FILE *fp;\n    fp=fopen(", "\"F:\\\\c语言课设\\\\userslist.txt\"", ",", "\"r\"", ");\n    rewind(fp);\n    char ch=fgetc(fp);\n    ", "while", "(ch!=-", "1", ")\n    {\n        putchar(ch);\n        ch=fgetc(fp);\n    }\n    fclose(fp);\n \n }\n", "//查找用户 ", "\nvoid userSearch(user* head)\n{\n    user *p;\n    char tmp[", "30", "];\n    int flag=", "0", ";\n    p=head;\n    ", "if", "(head==NULL||head->", "next==NULL)\n    {\n        printf(", "\"清单为空！\\n\"", ");\n    }\n    ", "else", "\n    {\n        printf(", "\"请输入用户名：\"", ");\n        fflush(stdin);\n        scanf(", "\"%s\"", ",tmp);\n        ", "while", "(p->", "next !=NULL)\n        {\n            ", "p", "=p->", "next;\n            ", "if", "(strcmp(p->", "name", ",tmp)==", "0", ")\n            {\n                flag=", "1", ";\n                ", "printf", "(\"用户名：%s\\n\",p->", "name", ");\n                return;\n            }\n            ", "if", "(p->", "next==NULL)\n            {\n                printf(", "\"\\n查询完毕！\"", ");\n            }\n            \n        }\n        ", "if", "(flag==", "0", ")\n        {\n            printf(", "\"没有找到该用户!\\n\"", ",tmp);\n        }\n    }\n    return;\n }\n \n", "//保存用户信息 ", "\nvoid userSave(user* head)\n{\n    user *p;\n    FILE *fp;\n    p=head;\n    ", "//以只写的方式打开文件", "\n    fp=fopen(", "\"F:\\\\c语言课设\\\\userslist.txt\"", ",", "\"a\"", ");\n    ", "while", " (p->", "next !=NULL)\n    {\n        ", "p", "=p->", "next;\n        ", "fprintf", "(fp,\"%-6s %-10s\\n\",p->", "name", ",p->", "password);\n    }\n    fclose(fp);\n    printf(", "\"保存成功！\\n\"", ");\n    printf(", "\"数据已成功保存到F:\\\\c语言课设\\\\userslist.txt\\n\"", ");\n     \n }   \nint menu();", "//菜单 ", "\n \n", "//创建书单", "\nBookInfo* CreateBooksList()\n{\n    BookInfo* head;\n    head=(BookInfo*)malloc(sizeof(BookInfo));", "//为头结点分配空间 ", "\n    ", "head", "->", "next=NULL;", "//初始化头指针", "\n    return head; \n } \n", "//插入记录", "\nvoid Insert(BookInfo* head)\n{\n    BookInfo *b, *p;\n    char flag=", "'Y'", ";\n    p=head;\n    ", "while", " (p->", "next !=NULL)\n        ", "p", "=p->", "next;\n    ", "//开辟新空间，存储书籍信息，并加入链表", "\n    ", "while", " (flag==", "'Y'", "||flag==", "'y'", ")\n    {\n        b=(BookInfo*)malloc(sizeof(BookInfo));", "//开辟新空间", "\n        printf(", "\"请输入图书编号：\"", ");", "//获取书籍信息 ", "\n        fflush(stdin); ", "//清空缓存区", "\n        ", "scanf", "(\"%s\",b->", "bnum);\n        printf(", "\"请输入书名：\"", ");\n        fflush(stdin);\n        ", "scanf", "(\"%s\",b->", "bname);\n        printf(", "\"请输入作者：\"", ");\n        fflush(stdin);\n        ", "scanf", "(\"%s\",b->", "bauthor);\n        printf(", "\"请输入类别编号：\"", ");\n        fflush(stdin);\n        ", "scanf", "(\"%s\",b->", "bclassfy);\n        printf(", "\"请输入图书价格：\"", ");\n        fflush(stdin);\n        ", "scanf", "(\"%f\",&b->", "bprice);\n        ", "b", "->", "br=", "1", ";\n        ", "p", "->", "next=b;", "//将新增加的节点加入链表", "\n        p=b;", "//指针p向后移动，指向尾结点", "\n        ", "b", "->", "next=NULL;\n        printf(", "\"添加成功！\\n继续添加？(Y/N):\"", ");\n        fflush(stdin);\n        scanf(", "\"%c\"", ",&flag);\n        ", "if", "(flag==", "'N'", "||flag==", "'n'", ")break;\n        ", "else", " ", "if", " (flag==", "'Y'", "||flag==", "'y'", ")continue; \n     } \n     return;\n }\n", "//删除记录", "\nvoid Delete(BookInfo* head)\n{\n    BookInfo *b, *p;\n    char tmp[", "30", "];\n    int flag;\n    flag=", "0", ";\n    b=head;\n    p=head;\n    printf(", "\"请输入要删除的书籍名：\"", ");\n    fflush(stdin);\n    scanf(", "\"%s\"", ",tmp);\n    ", "//遍历链表", "\n    ", "while", " (p!=NULL)\n    {\n        ", "if", "(strcmp(p->", "bname,tmp)==", "0", ")\n        {\n            flag=", "1", ";\n            break;\n        }\n        ", "p", "=p->", "next;\n     } \n    ", "if", " (flag==", "1", ")\n    {\n        ", "for", " (;b->", "next !=p;)\n        {\n            ", "b", "=b->", "next;\n        }\n        ", "b", "->", "next", "=p->", "next;\n        free(p);\n        printf(", "\"删除成功！\\n\"", ");\n    }\n    ", "else", "\n        printf(", "\"该书不存在！\"", ");\n    return;\n  }  \n", "//浏览书单", "\nvoid print(BookInfo* head)\n{\n    BookInfo *p;\n    FILE *fp;\n    fp=fopen(", "\"F:\\\\c语言课设\\\\bookslist.txt\"", ",", "\"r\"", ");\n    rewind(fp);\n    printf(", "\"-----------------------------------------------------\\n\"", ");\n    printf(", "\"|编号   |书名   |作者    |类别编号   |价格   |数量  |\\n\"", ");\n    printf(", "\"-----------------------------------------------------\\n\"", ");\n    char ch=fgetc(fp);\n    ", "while", "(ch!=-", "1", ")\n    {\n        putchar(ch);\n        ch=fgetc(fp);\n    }\n    fclose(fp);\n \n } \n", "//查找书籍", "\nvoid Search(BookInfo* head)\n{\n    BookInfo *p;\n    char tmp[", "30", "];\n    int flag=", "0", ";\n    p=head;\n    ", "if", "(head==NULL||head->", "next==NULL)\n    {\n        printf(", "\"清单为空！\\n\"", ");\n    }\n    ", "else", "\n    {\n        printf(", "\"请输入书籍名：\"", ");\n        fflush(stdin);\n        scanf(", "\"%s\"", ",tmp);\n        ", "while", "(p->", "next !=NULL)\n        {\n            ", "p", "=p->", "next;\n            ", "if", "(strcmp(p->", "bname,tmp)==", "0", ")\n            {\n                flag=", "1", ";\n                ", "printf", "(\"编号：%s\\n 书名：《%s》\\n作者：%s\\n分类：%s\\n价格：%.2f\\n\",p->", "bnum", ",p->", "bname", ",p->", "bauthor", ",p->", "bclassfy", ",p->", "bprice);\n                return;\n            }\n            ", "if", "(p->", "next==NULL)\n            {\n                printf(", "\"\\n查询完毕！\"", ");\n            }\n            \n        }\n        ", "if", "(flag==", "0", ")\n        {\n            printf(", "\"没有找到《%s》!\\n\"", ",tmp);\n        }\n    }\n    return;\n }\nvoid creat_user_list(char* ", "name", ", char* password)  ", "//创建用户链表", "\n{\n    user* head;\n    user* np = (user*)malloc(sizeof(user));\n    np = user_head;\n    ", "while", " (np->", "next", ") np = np->", "next;\n    User* tp = (user*)malloc(sizeof(user));\n    ", "strcpy", "(tp->", "name", ", ", "name", ");\n    ", "strcpy", "(tp->", "password, password);\n    ", "tp", "->", "next = NULL;\n    ", "np", "->", "next = tp;\n    userSave(head);\n    \n}\n", "//修改信息", "\nvoid Update(BookInfo* head)\n{\n    BookInfo *p;\n    int flag=", "0", ";\n    char tmp[", "30", "];\n    p=head;\n    printf(", "\"请输入书名：\"", ");\n    fflush(stdin);\n    scanf(", "\"%s\"", ",tmp);\n    ", "while", "(p->", "next!=NULL)\n    {\n        ", "p", "=p->", "next;\n        ", "if", "(strcmp(p->", "bname,tmp)==", "0", ")\n        {\n            flag=", "1", ";", "//标志找到所要修改修改的书籍", "\n            printf(", "\"请输入编号：\"", ");\n            fflush(stdin);\n            ", "scanf", "(\"%s\",p->", "bnum);\n            printf(", "\"请输入书名：\"", ");\n            fflush(stdin);\n            ", "scanf", "(\"%s\",p->", "bname);\n            printf(", "\"请输入作者：\"", ");\n            fflush(stdin);\n            ", "scanf", "(\"%s\",p->", "bauthor);\n            printf(", "\"请输入类别编号：\"", ");\n            fflush(stdin);\n            ", "scanf", "(\"%s\",p->", "bclassfy);\n            printf(", "\"请输入价格：\"", ");\n            fflush(stdin);\n            ", "scanf", "(\"%s\",p->", "bprice);\n \n        }\n    }\n    ", "if", " (flag==", "0", ")\n    {\n        printf(", "\"没有找到《%s》!\\n\"", ",tmp);\n    }\n    return;\n } \n \n", "//保存书单到文件", "\nvoid Save(BookInfo* head)\n{\n    BookInfo *p;\n    FILE *fp;\n    p=head;\n    ", "//以只写的方式打开文件", "\n    fp=fopen(", "\"F:\\\\c语言课设\\\\bookslist.txt\"", ",", "\"a\"", ");\n    ", "while", " (p->", "next !=NULL)\n    {\n        ", "p", "=p->", "next;\n        ", "fprintf", "(fp,\"%-6s %-10s %-10s %-10s %.2f %d\\n\",p->", "bnum", ",p->", "bname", ",p->", "bauthor", ",p->", "bclassfy", ",p->", "bprice", ",p->", "br);\n    }\n    fclose(fp);\n    printf(", "\"保存成功！\\n\"", ");\n    printf(", "\"数据已成功保存到F:\\\\c语言课设\\\\bookslist.txt\\n\"", ");\n     \n } \nvoid user_register()  ", "//用户注册", "\n{\n    char ", "name", "[", "30", "];\n    printf(", "\"请输入您需要注册的用户名(不超过25个字母)：\\n\"", ");\n    scanf(", "\"%s\"", ", ", "name", ");\n    User* account;\n    ", "while", " (account = serch_username(", "name", "), account != NULL)\n    {\n        printf(", "\"该用户名已存在，请重新输入！\\n\"", ");\n        scanf(", "\"%s\"", ", ", "name", ");\n    }\n    printf(", "\"请输入您的账号密码(不超过25个字母)：\\n\"", ");\n    char password[", "30", "];\n    scanf(", "\"%s\"", ", password);\n    creat_user_list(", "name", ", password);\n    printf(", "\"恭喜您注册成功！\\n\"", ");\n}\n", "//菜单", "\nvoid main_menu()  ", "//主菜单", "\n{\n    user *head;\n    BookInfo *headd;\n    int a,b,c,d;\n    head=NULL;\n    ", "while", " (", "1", ")\n    {\n        printf(", "\"+---------------------------------------------+\\n\"", ");\n        printf(", "\"*            欢迎进入本图书管理系统!          *\\n\"", ");\n        printf(", "\"*         请输入选项前的数字以确认操作！      *\\n\"", ");\n        printf(", "\"*               1、用户注册                   *\\n\"", ");\n        printf(", "\"*               2、用户登陆                   *\\n\"", ");\n        printf(", "\"*               3、管理员登陆                 *\\n\"", ");\n        printf(", "\"*               0、退出               *\\n\"", ");\n        printf(", "\"+---------------------------------------------+\\n\"", ");\n        int op; \n        scanf(", "\"%d\"", ", &op); \n        switch (op)\n        {\n        case ", "1", ": ", "if", "(head==NULL)\n                {\n                    head=CreateusersList();\n                }\n                userInsert(head);\n                userSave(head);\n                break;\n        case ", "2", ": user_login();\n                \n                break;\n        case ", "3", ": adminlogin();  break;\n        case ", "0", ": exit(", "0", "); break;\n        default: printf(", "\"错误的指令，请重新输入！\\n\"", "); \n        }\n    }\n}\nint adminmenu()\n{\n    int sec;\n    user *head;\n    BookInfo *headd;\n    headd=NULL;\n    printf(", "\"                    管理员系统                     \\n\"", ");\n    printf(", "\"-----------------------------------------------------\\n\"", ");\n    printf(", "\"                   1-图书信息录入\\n\"", ");\n    printf(", "\"                   2-图书信息浏览\\n\"", ");\n    printf(", "\"                   3-图书信息查询\\n\"", ");\n    printf(", "\"                   4-图书信息修改\\n\"", ");\n    printf(", "\"                   5-图书信息删除\\n\"", ");\n    printf(", "\"                   6-图书信息保存\\n\"", ");\n    printf(", "\"                   7-删除用户\\n\"", ");\n    printf(", "\"                   8-浏览用户\\n\"", ");\n    printf(", "\"                   9-退出\\n\"", ");\n    printf(", "\"-----------------------------------------------------\\n\"", ");\n    printf(", "\"请选择：\"", ");\n    fflush(stdin);\n    scanf(", "\"%d\"", ",&sec);\n    switch (sec)\n    {\n        case ", "1", ":\n            ", "if", "(headd==NULL)\n            {\n                headd=CreateBooksList();\n            }\n            Insert(headd);\n            Save(headd); \n            break;\n        case ", "2", ":print(headd); break;\n        case ", "3", ":Search(headd); break;\n        case ", "4", ":Update(headd); break;\n        case ", "5", ":Delete(headd); break;\n        case ", "6", ":Save(headd); break;\n        case ", "7", ":\n        case ", "8", ":\n        case ", "9", ":exit(", "0", "); break;\n    }\n    ", "while", "(sec>", "7", "||sec<", "0", ")\n    {\n        printf(", "\"选择有误！\\n请重新输入：\"", ");\n        scanf(", "\"%d\"", ",&sec);\n     } \n    return sec;\n }\n ", "//管理员登录 ", "\nvoid adminlogin()\n{\n    char tmp[", "30", "];\n    char tmpp[", "30", "];\n    int flag=", "0", ";\n        printf(", "\"请输入用户名：\"", ");\n        fflush(stdin);\n        scanf(", "\"%s\"", ",tmp);\n        printf(", "\"请输入密码：\"", ");\n        fflush(stdin);\n        scanf(", "\"%s\"", ",tmpp);\n            ", "if", "(strcmp(", "\"dyq\"", ",tmp)==", "0", "&&strcmp(", "\"123\"", ",tmpp)==", "0", ")\n            {\n                flag=", "1", ";\n                printf(", "\"登陆成功\\n\"", ");\n                system(", "\"cls\"", ");\n                adminmenu();\n                \n            }\n            \n        ", "if", "(flag==", "0", ")\n        {\n            printf(", "\"用户名或密码错误!\\n\"", ",tmp);\n        }\n        \n    return;\n }\n int usermenu()\n {\n    user *head;\n    BookInfo *headd;\n    int b;\n    printf(", "\"                    用户系统                     \\n\"", ");\n    printf(", "\"-----------------------------------------------------\\n\"", ");\n    printf(", "\"                   1-图书信息浏览\\n\"", ");\n    printf(", "\"                   2-图书信息查询\\n\"", ");\n    printf(", "\"                   3-图书借阅\\n\"", ");\n    printf(", "\"                   4-图书归还\\n\"", ");\n    printf(", "\"                   5-保存用户信息\\n\"", ");\n    printf(", "\"                   6-退出\\n\"", ");\n    printf(", "\"-----------------------------------------------------\\n\"", ");\n    printf(", "\"请选择：\"", ");\n    fflush(stdin);\n    scanf(", "\"%d\"", ",&b);\n    switch (b)\n                {\n                    case ", "1", ":print(headd); usermenu();\n                    case ", "2", ":Search(headd); usermenu();\n                    case ", "3", ":Borrowedbooks(); usermenu();\n                    case ", "4", ":\n                    case ", "5", ":userSave(head); usermenu();\n                    case ", "6", ":exit(", "0", "); break;\n                }\n    ", "while", "(b>", "6", "||b<", "0", ")\n    {\n        printf(", "\"选择有误！\\n请重新输入：\"", ");\n        scanf(", "\"%d\"", ",&b);\n     } \n    return b;    \n }\nint tjzs()", "//统计图书文本个数", "\n{\n    char f[", "10", "]={", "0", "},ch;\n    int cap=", "0", ";", "//行数", "\n    FILE *fp;\n    fp=fopen(", "\"F:\\\\c语言课设\\\\bookslist.txt\"", ",", "\"r\"", ");\n    gets(f);\n    ", "while", "(!feof(fp))\n    {\n        ", "if", "((ch=getc(fp))!=EOF)\n        {\n            ", "if", "((ch=getc(fp))==", "'\\n'", ")\n                cap++;\n        }\n    }\n    cap++;\n    fclose(fp);\n    return cap;\n}\nint tjyh()", "//统计图书文本个数", "\n{\n    char f[", "10", "]={", "0", "},ch;\n    int cap=", "0", ";", "//行数", "\n    FILE *fp;\n    fp=fopen(", "\"F:\\\\c语言课设\\\\userslist.txt\"", ",", "\"r\"", ");\n    gets(f);\n    ", "while", "(!feof(fp))\n    {\n        ", "if", "((ch=getc(fp))!=EOF)\n        {\n            ", "if", "((ch=getc(fp))==", "'\\n'", ")\n                cap++;\n        }\n    }\n    cap++;\n    fclose(fp);\n    return cap;\n}\n \nvoid Borrowedbooks()", "//借书函数", "\n{\n    FILE *fp,*fp3;\n    user *headd=NULL;\n    user *p3,*p4,*p5;\n    BookInfo *head=NULL;\n    BookInfo *p,*p1,*p2;\n    fp=fopen(", "\"F:\\\\c语言课设\\\\bookslist.txt\"", ",", "\"r\"", ");\n    int i,", "loop", ",k,h,n=", "0", ",flag=", "0", ",s=", "0", ";\n    int br=", "0", ";\n    float bprice=", "0", ";\n    char bnum[", "10", "]={", "'\\0'", "},bname[", "30", "]={", "'\\0'", "},bauthor[", "20", "]={", "'\\0'", "},bclassfy[", "10", "]={", "'\\0'", "},\n         ", "name", "[", "30", "]={", "'\\0'", "},password[", "30", "]={", "'\\0'", "},book[", "10", "]={", "'\\0'", "};", "//book书的编号 ", "\n    char hit=", "0", ";\n        printf(", "\"\\n请输入要借阅书的编号:\\n请输入:\"", ");\n        scanf(", "\"%s\"", ",book);\n    k=tjzs()-", "2", ";", "//统计图书馆文件个数", "\n    fscanf(fp,", "\"%s%s%s%s%f%d\\n\"", ",bnum,bname,bauthor,bclassfy,&bprice,&br);\n    p1=p2=(BookInfo*)malloc(sizeof(BookInfo));\n    head=p1;\n    ", "strcpy", "(p1->", "bnum,bnum);", "//复制书号", "\n    ", "strcpy", "(p1->", "bname,bname);", "//复制书名", "\n    ", "strcpy", "(p1->", "bauthor,bauthor);", "//复制作者", "\n    ", "strcpy", "(p1->", "bclassfy,bclassfy);", "//复制出版社", "\n    ", "p1", "->", "br=br;", "//复制书的状态 ", "\n    ", "p1", "->", "bprice=bprice;", "//复制单价", "\n    ", "for", " (i=", "0", ";i<k;i++)", "//先将图书信息建立链表，更改库存", "\n        {\n            fscanf(fp,", "\"%s%s%s%s%f%d\\n\"", ",bnum,bname,bauthor,bclassfy,&bprice,&br);\n            ", "p2", "->", "next=p1;\n            p2=p1;\n            p1=(BookInfo*)malloc(sizeof(BookInfo));\n            ", "strcpy", "(p1->", "bnum,bnum);", "//复制书号", "\n            ", "strcpy", "(p1->", "bname,bname);", "//复制书名", "\n            ", "strcpy", "(p1->", "bauthor,bauthor);", "//复制作者", "\n            ", "strcpy", "(p1->", "bclassfy,bclassfy);", "//复制出版社", "\n            ", "p1", "->", "br=br;", "//复制书的状态 ", "\n            ", "p1", "->", "bprice=bprice;", "//复制单价", "\n            ", "p2", "->", "next=p1;\n            ", "p1", "->", "next=NULL;\n         }\n        fclose(fp);\n        p=head;\n    \n    ", "for", " (;p!=NULL;)\n    {\n        ", "if", "(!(strcmp(p->", "bnum", ",book))&&p->", "br==", "1", ")", "//判断要借书的是否存在，标记等于1，存在库存减一", "\n        {\n            \n            flag=", "1", ";\n            ", "p", "->", "br=", "0", ";\n         }\n        ", "p", "=p->", "next;\n  }\n    ", "if", "(flag)", "//把状态变化后的链表存入文件", "\n    {\n \n        fp=fopen(", "\"F:\\\\c语言课设\\\\bookslist.txt\"", ",", "\"w\"", ");\n        fclose(fp);\n        fp=fopen(", "\"F:\\\\c语言课设\\\\bookslist.txt\"", ",", "\"a\"", ");\n        p=head;\n \n        ", "for", "(;p !=NULL;)\n        {\n            ", "fprintf", "(fp,\"%-10s %-10s %-10s %-10s %.2f %d\\n\",p->", "bnum", ",p->", "bname", ",p->", "bauthor", ",p->", "bclassfy", ",p->", "bprice", ",p->", "br);\n            ", "p", "=p->", "next;\n        }\n        free(p);\n        fclose(fp);\n        \n \n", "//建读者文件夹存入借书信息", "\n    fp3=fopen(", "\"F:\\\\c语言课设\\\\userslist.txt\"", ",", "\"r\"", ");\n    fscanf(fp3,", "\"%s%s%s\\n\"", ",", "name", ",password,book);\n    p4=p5=(user*)malloc(sizeof(user));\n    headd=p4;\n    ", "strcpy", "(p4->", "name", ",", "name", ");", "//复制用户名 ", "\n    ", "strcpy", "(p4->", "password,password);", "//复制密码 ", "\n    ", "strcpy", "(p4->", "book,book);", "//复制借阅情况 ", "\n    h=tjyh()-", "1", ";\n    ", "for", " (i=", "1", ";i<h;i++)", "//先将用户信息建立链表，更改借阅情况 ", "\n        {\n            fscanf(fp3,", "\"%s%s%s\\n\"", ",", "name", ",password,book);\n            ", "p5", "->", "next=p4;\n            p5=p4;\n            p4=(user*)malloc(sizeof(user));\n            ", "strcpy", "(p4->", "name", ",", "name", ");", "//复制用户名 ", "\n            ", "strcpy", "(p4->", "password,password);", "//复制密码 ", "\n            ", "strcpy", "(p4->", "book,book);", "//复制借阅情况 ", "\n            ", "p5", "->", "next=p4;\n            ", "p4", "->", "next=NULL;\n         }\n        fclose(fp3);\n        p3=headd;\n    \n    ", "for", " (;p3!=NULL;)\n    {\n        fp3=fopen(", "\"F:\\\\c语言课设\\\\userslist.txt\"", ",", "\"w\"", ");\n        fclose(fp);\n        fp=fopen(", "\"F:\\\\c语言课设\\\\userslist.txt\"", ",", "\"a\"", ");\n        p3=headd;\n \n        ", "for", "(;p3!=NULL;)\n        {\n            ", "fprintf", "(fp,\"%-10s %-10s %-10s\\n\",p3->", "name", ",p3->", "password", ",p3->", "book);\n            ", "p3", "=p3->", "next;\n        }\n        free(p3);\n        fclose(fp3);\n\n  }\n        printf(", "\"借书成功!请两个月内归还！！！按任意键返回\\n\"", ");\n        usermenu();\n   }\n    ", "else", "\n    {\n        ", "if", "(flag!=", "0", ")\n        printf(", "\"此书已被借完!按任意键返回!\"", ");", "//否则输出此书已被借完", "\n        ", "else", "\n        printf(", "\"查找无此书!按任意键返回\"", ");\n    }\n        usermenu();", "//调用借阅系统", "\n \n}\n \nint main()\n{\n    user *head;\n    BookInfo *headd;\n    int a,b,c,d;\n    head=NULL;\n    ", "for", " (;;)\n    {\n        main_menu();\n    }\n    return ", "0", ";\n}\n\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我试过把tjyh函数的结果+1或者-1，都没用", "\n", "我想要达到的结果", "\n", "借阅函数可以正常运行，现在借阅完书单里是正常的，用户信息不正常"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;首先建立链表结构&amp;#xff0c;按照输入格式&amp;#xff0c;初始化链表&lt;br /&gt;然后根据查询的方式&amp;#xff0c;以及输入的搜索信息&amp;#xff0c;在链表中搜索&amp;#xff0c;找到信息进行输出&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["表的操作——查找（用链表完成）", ["有一线性表List，假设表中无重复值，现要根据命令执行相应的查找操作。 若读入的是数值1，则按位查找，查找成功时返回指定位置的值，否者输出“data error”; 若读入的是数值2，则按值查找，查找成功时返回指定值所在的位置，否者输出“data error”。", "\n", "输入格式:", "有多组数据，每组数据占三行，代表一次查找操作。 每组第一行为数值1或2，表示相应的命令； 第二行有两个整数，第一个为表长n（0<n<50），第二个为位置i或者值x； 第三行为表的各元素值。", "\n", "输出格式:", "每组数据的输出占一行，具体输出如题。", "\n", "输入样例:", "在这里给出一组输入。例如：", "\n", "1", "5 4", "1 3 5 8 16", "2", "5 8", "1 3 5 8 16", "结尾无空行", "输出样例:", "在这里给出相应的输出。例如：", "\n", "8", "4", "结尾无空行"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://blog.csdn.net/u013561603/article/details/39394257\" id=\"textarea_1629546458518_1629546526379_0\" class=\"md_link_card\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n  &lt;span class=\"md_link_title\"&gt;C/C&amp;#43;&amp;#43;实现螺旋方阵算法_u013561603的专栏-CSDN博客_c&amp;#43;&amp;#43;螺旋方阵&lt;/span&gt;\n  &lt;span class=\"md_link_desc\" style=\"\"&gt;Description下面是一个5*5螺旋方阵。你的任务是输出按逆时针方向旋进的n*n螺旋方阵。1 2 3 4 516 17 18 19 615 24 25 20 714 23 22 21 813 12 11 10 9Input输入有多行&amp;#xff0c;每行有1个整数n&amp;#xff0c;&amp;#xff08;1n&amp;#61;100&amp;#xff09;。&lt;/span&gt;\n  &lt;span class=\"md_flex_card\"&gt;\n  &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n    &lt;span class=\"flex-1\"&gt;\n      &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/u013561603/article/details/39394257&lt;/span&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["螺旋方阵🤢≡(▔﹏▔)≡≡(▔﹏▔)≡", ["题目描述", "一个n行n列的螺旋方阵按照如下方法生成：从方阵的左下角（第n行第1列）出发，初始时向右移动；如果前方是未曾经过的格子，则继续前进，否则左转。重复上述操作直至经过方阵中所有格子。根据经过顺序，在格子中依次填入1,2,3,n便构成一个螺旋访问。下面是一个n=4的螺旋方阵。", "\n", "编程输入一个正整数n，生成一个n×n的螺旋方阵。", "输入", "一行一个正整数n，1≤n≤20", "输出", "共n行 每行n个正整数 每个正整数占5列", "样例输入 Copy", "4", "样例输出 Copy", "   10    9    8    7", "   11   16   15    6", "   12   13   14    5", "    1    2    3    4", "请问怎么做"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;isExists &amp;#61; &lt;span class=\"hljs-built_in\"&gt;os&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;path&lt;/span&gt;.exists(curDir&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\\\xls&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; isExists :\n            &lt;span class=\"hljs-built_in\"&gt;os&lt;/span&gt;.makedirs(curDir&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\\\xls&amp;#34;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这段代码&amp;#xff08;上述代码在第9、10行&amp;#xff09;是你每次都会多一次的原因所在&amp;#xff0c;由于是遍历所有子目录&amp;#xff0c;所以肯定不是每个文件夹都有xls这个子目录的&amp;#xff0c;这样就导致了你每次都会新建一个xls文件夹&amp;#xff0c;导致每次多输出一次。&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["关于Python中os.walk(path)循环的问题", ["使用Python对文件夹中的  .sig 后缀文件进行操作，操作后转存到路径下的xls文件夹下，如果文件夹中没有.sig 后缀文件， 会输出  “所给路径不存在.sig文件”  ，但是每执行一次就会多输出一次，关终端、重启软件都无法制止它的增长。不懂其中奥妙，求解。。", "\n", "\n", "\n", "path = ", "\"E:\\\\数据\\\\scr2 - 副本\"", "\nhave_sig = ", "0", "\nisExists = os.path.", "exists", "(path)\n", "if", " not isExists:\n    ", "print", "(", "\"提供的存储.sig文件路径不存在\"", ")\n", "else", ":\n    ", "for", " curDir, dirs, ", "files", " in os.walk(path):\n        isExists = os.path.", "exists", "(curDir+", "\"\\\\xls\"", ")\n        ", "if", " not isExists :\n            os.makedirs(curDir+", "\"\\\\xls\"", ")\n        ", "for", " ", "file", " in ", "files", ":\n            ", "if", " ", "file", ".endswith(", "\".sig\"", "):\n                have_sig = have_sig+", "1", "\n                # ", "print", "(curDir+", "\"\\\\\"", "+", "file", ")\n                # ", "print", "(curDir+", "\"\\\\\"", "+", "file", "[:-", "3", "])\n                os.", "rename", "(curDir+", "\"\\\\\"+file,curDir+\"", "\\\\", "\"+file[:-3]+\"", "txt", "\")", "\n                pass\n                ", "fo", " = ", "open", "(curDir+", "\"\\\\\"+file[:-3]+\"", "txt", "\", \"", "r", "\")", "\n                date = ", "fo", ".", "read", "()\n                date = date.", "split", "(", "\"\\n\"", ")\n                datas = np.array(date[", "30", ":]) \n                code = np.", "empty", "(", "0", ")\n                ", "for", " i in datas:\n                    i = i.", "split", "()\n                    ", "for", " ", "j", " in i:\n                        code = np.", "append", "(code,float(", "j", "))\n                code = code.reshape(-", "1", ",", "4", ")\n                # ", "print", "(code.shape())#", "1023", ",", "4", "\n                ", "fo", ".", "close", "()\n\n                workbook = xlwt.Workbook(encoding = ", "'ascii'", ")\n                worksheet = workbook.add_sheet(", "'sheet'", ")\n                worksheet = workbook.get_sheet(", "'sheet'", ")\n                ", "for", " row in ", "range", "(", "0", ",", "len", "(code),", "1", "):\n                    ", "for", " column in ", "range", "(", "0", ",", "4", ",", "1", "):\n                        worksheet.", "write", "(row, column, code[row][column])\n                workbook.save(curDir+", "\"\\\\xls\\\\\"+file[:-3]+\"", "xls", "\")", "\n        ", "if", " have_sig == ", "0", ":\n            ", "print", "(", "\"所给路径不存在.sig文件\"", ")\n        ", "else", ":\n            ", "print", "(", "\"处理文件数量：\"", ",have_sig)\n \n\n", "\n", "运行结果及报错内容", "\n", "（18次）", "E:\\9-python\\opencv>python -u \"c:\\Users\\star\\Desktop\\Untitled-1.py\"", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "（19次）", "E:\\9-python\\opencv>python -u \"c:\\Users\\star\\Desktop\\Untitled-1.py\"", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "所给路径不存在.sig文件", "\n", "我的解答思路和尝试过的方法", "\n", "尝试输出print(os.walk(path))", "但是结果都一样：", "<generator object _walk at 0x0000022483B67350>", "\n", "我想要达到的结果", "\n", "应该是自己的知识盲区，望指导"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;修改如下&amp;#xff0c;供参考对照&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;calculate&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *arr)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n    {\n            cin &amp;gt;&amp;gt; num;\n            *arr &amp;#43;&amp;#61; num;\n    }\n    \n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;  n &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;  larr[&lt;span class=\"hljs-number\"&gt;128&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    cin &amp;gt;&amp;gt; n;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (n !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {    \n        &lt;span class=\"hljs-built_in\"&gt;calculate&lt;/span&gt;(n, &amp;amp;larr[k&amp;#43;&amp;#43;]);\n        cin &amp;gt;&amp;gt; n;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; k; i&amp;#43;&amp;#43;)\n    {\n        cout &amp;lt;&amp;lt; larr[i] &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["c++数组出了乱码，求帮助", ["想实现的功能是：", "输入一个整数n，再输入n个数字再它的同一行，这时存储后面这n个数字的和。重复这个操作，直到输入的n等于0时，输出每一次的和。", "例如：", "4 1 2 3 4", "5 1 2 3 4 5", "0", "10", "15", "\n", "\n", "#", "include", "<iostream>", "\n", "using", " ", "namespace", " std;\n", "void", " ", "calculate", "(", "int", " n,", "int", "*arr)", "\n", "{\n    ", "int", " num = ", "0", ";\n    ", "int", "* larr2 = ", "new", " ", "int", "[num];\n    ", "while", "(n != ", "0", ")\n    {\n        ", "for", " (", "int", " i = ", "0", "; i < n; i++)\n        {\n            cin >> arr[i];\n            larr2[num] = larr2[num] + arr[i];", "//这个数组出了乱码", "\n        }\n        cin >> n;\n        num++;\n        ", "for", " (", "int", " i = ", "0", "; n == ", "0", " && i < num; i++)\n        {\n            cout << larr2[i] << endl;\n        }\n    }\n}\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " n = ", "0", ";\n    cin >> n;\n    ", "int", "* larr = ", "new", " ", "int", "[n];\n    ", "calculate", "(n, larr);\n    ", "system", "(", "\"pause\"", ");\n    ", "return", " ", "0", ";\n}\n没报错，但输出的是乱码\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;方法一&amp;#xff1a;循环&amp;#xff0c;如下&amp;#xff0c;如果 Dateof 这个参数是固定是可以只用一维数组&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;test&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; fullText)&lt;/span&gt;&lt;/span&gt;{\n        &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; testDate &amp;#61; 你的那个方法(fullText,&lt;span class=\"hljs-string\"&gt;&amp;#34;检定日期&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;Dateof&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;final&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;[][] arr &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;[][]{&lt;!-- --&gt;{&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;检定日期&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;Dateof&amp;#34;&lt;/span&gt;},{&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;2&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;Dateof&amp;#34;&lt;/span&gt;},{&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;3&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;Dateof&amp;#34;&lt;/span&gt;},{&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;4&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;Dateof&amp;#34;&lt;/span&gt;},{&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;5&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;Dateof&amp;#34;&lt;/span&gt;}};\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;[] strings : arr) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(StringUtils.&lt;span class=\"hljs-built_in\"&gt;isEmpty&lt;/span&gt;( testDate )){\n                testDate &amp;#61; 你的那个方法(fullText,strings[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;],strings[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; testDate;\n    }\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["请问这段判空逻辑代码如何优化比较合理？一层层的判空，没有则继续判断，有N种情况", ["感觉重复性很高，字符串用正则工具类赋值的操作，只是后面入参的2个参数会有一些区别。。其他基本语法一致的情况下如何优化呢？希望有好的思路，。，。。", "目前我是这么优化的，不知道是否思路是正确的？", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;因为scanf(&amp;#34;%c&amp;#34;, &amp;amp;c);接收到了一个换行符&amp;#xff0c;每次输入过后你需要一个getchar把多余的换行吸收掉&lt;br /&gt;此外&amp;#xff0c;你可以调用清屏指令&amp;#xff0c;在每次打印之前先清屏&amp;#xff0c;这样就不会一遍又一遍的打印相同的东西&amp;#xff0c;而是永远只有一个数组&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["为什么二维数组的界面会一直重复2次，然后二维数组的界面会出现2次", ["为什么二维数组的界面会一直重复2次，每次输入一个w,s,a或d，让他移动，然后二维数组的界面会出现2次。如何实现二维数组只让他出现一次。代码如下：", "\n", "#include <stdio.h>\n#define ", "ROW", " ", "11", "                 //游戏区行数\n#define ", "COL", " ", "11", "                 //游戏区列数     \n\nchar map[", "ROW", "][", "COL", "] = {\n    {", "'F'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", "},   //x为草坪\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},   //~为水流\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", "},   //o为终点\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},      //", "T", "为乌龟的位置\n    {", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", "},\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", "},\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},\n    {", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'o'", ", ", "'x'", "}\n};\n\nint main() {\n    int i, j;\n    int x = ", "0", ", y = ", "0", ";\n    char c, q;\n    while (", "1", ") {\n        for (i = ", "0", "; i < ", "ROW", "; i++) {\n            for (j = ", "0", "; j < ", "COL", "; j++) {\n                printf(", "\"%c \"", ", map[i][j]);     //生成游戏界面\n            }\n            printf(", "\"\\n\"", ");\n        }\n        printf(", "\"请输入操作：\\n\"", ");\n        scanf(", "\"%c\"", ", &c);                     //w s a d\n\n        if (c == ", "'w'", ") {\n            q = map[x - ", "1", "][y];\n            map[x - ", "1", "][y] = map[x][y];\n            map[x][y] = q;\n            x = x - ", "1", ";\n\n        }\n\n        else if (c == ", "'s'", ") {\n            q = map[x + ", "1", "][y];\n            map[x + ", "1", "][y] = map[x][y];\n            map[x][y] = q;\n            x = x + ", "1", ";\n\n        }\n\n        else if (c == ", "'a'", ") {\n\n            q = map[x][y - ", "1", "];\n            map[x][y - ", "1", "] = map[x][y];\n            map[x][y] = q;\n            y = y - ", "1", ";\n\n        }\n\n        else if (c == ", "'d'", ") {\n\n            q = map[x][y + ", "1", "];\n            map[x][y + ", "1", "] = map[x][y];\n            map[x][y] = q;\n            y = y + ", "1", ";\n\n        }\n\n        else if (c == ", "'l'", ") {\n            int a, b;\n            printf(", "\"添加浮木：请输入浮木放置的横坐标和纵坐标\\n\"", ");//添加浮木\n            scanf(", "\"%d%d\"", ", &a, &b);\n            map[a][b] = ", "'L'", ";\n\n        }\n\n        else if (c == ", "'k'", ") {\n            int a, b;\n            printf(", "\"清除浮木:请输入需要清除浮木的横坐标和纵坐标\\n\"", ");//清除浮木\n            scanf(", "\"%d%d\"", ", &a, &b);\n            if (map[a][b] == ", "'L'", ") {\n                map[a][b] = ", "'~'", ";\n            } else if (map[a][b] == ", "'~'", " || map[a][b] == ", "'F'", " || map[a][b] == ", "'t'", " || map[a][b] == ", "'x'", ") {\n                printf(", "\"该位置没有浮木\"", ");\n            }\n        }\n\n\n\n        else if (c == ", "'b'", ") {\n            int a, b;\n            printf(", "\"请输入臭虫放置的横坐标和纵坐标\\n\"", ");           //添加臭虫\n            scanf(", "\"%d%d\"", ", &a, &b);\n            if (map[a][b] == ", "'L'", ") {\n                map[a][b] = ", "'B'", ";\n            } else if (map[a][b] == ", "'~'", " || map[a][b] == ", "'F'", " || map[a][b] == ", "'t'", " || map[a][b] == ", "'x'", ")\n                printf(", "\"臭虫没有放在浮木上\\n\"", ");\n        }\n\n\n    }\n    return ", "0", ";\n}\n\n", "\n", "问题如图：", "\n", "\n", "请问解决的方案"]], "Tag": "程序设计"}
{"Answer": "void insertlist(LinkList head, int i, char key);    //函数，插入结点\r\n定义时char key 是有*的。少敲了*", "Konwledge_Point": "重复n次操作", "Question": ["VS2019运行单链表的插入和删除操作时引发异常？", ["代码运行时具体异常如下：", "!", "\n具体代码如下", "\n\n", "/*======开发环境：Windows10，Visual Studio Community 2019 版本：16.5.4===========*/\n/*=================头文件=====================*/\n#include <stdio.h>\n#include <string.h>\n#include <malloc.h>\n#include <stdlib.h>\n\n\ntypedef struct node //定义结点\n{\n    char data[10];  //结点的数据域为字符串\n    struct node* next;  //结点的指针域\n}ListNode;\ntypedef ListNode* LinkList; //自定义LinkList单链表类型\n\n\n/*=====================函数声明=========================*/\nLinkList CreatListR1(); //用头插入法建立带头结点的函数\nListNode* LocateNode(LinkList head, char* key); //函数，按值查找结点\nvoid insertlist(LinkList head, int i, char key);    //函数，插入结点\nvoid deletelist(LinkList head, char* key);  //函数，删除指定值的结点\nvoid printlist(LinkList head);  //函数，打印链表中的所有值\nvoid deleteall(LinkList head);  //函数，删除整个链表\n\n\n/*====================主函数=======================*/\nint main()\n{\n    char* ch;\n    char num[4];\n    char b[8];\n    ch = &b[0];\n    int i;\n    LinkList head;\n    head = CreatListR1();   //用头插入法建立单链表，返回头指针\n    printlist(head);\n    printf(\"输入y或n选择是否插入结点。\\n\");\n    scanf(\"%s\", num);\n    if (strcmp(num, \"y\") == 0 || strcmp(num, \"Y\") == 0)\n    {\n        printf(\"请输入要插入的字符串：\");\n        scanf(\"%s\", ch);\n        printf(\"\\n请输入要插入的位置：\");\n        scanf(\"%d\", &i);\n        insertlist(head, i, ch);\n        printlist(head);\n    }\n    printf(\"输入y或n选择是否删除结点。\\n\");\n    scanf(\"%s\", num);\n    if (strcmp(num, \"y\") == 0 || strcmp(num, \"Y\") == 0)\n    {\n        printf(\"请输入要删除的字符串：\");\n        scanf(\"%s\", ch);\n        deletelist(head, ch);\n        printlist(head);\n    }\n    deleteall(head);\n    system(\"pause\");\n}\n\n\n/*============用头插入法建立带头结点的函数==============*/\n/*@param    void*/\n/*@return   返回头指针*/\n/*@note     让用户自己输入字符串，创建单链表*/\nLinkList CreatListR1(void)\n{\n    char* ch;\n    char a[8];\n    ch = &a[0];\n    LinkList head = (LinkList)malloc(sizeof(ListNode)); //创建头结点\n    ListNode* s, * r, * pp;\n    r = head;\n    r->next = NULL; //初始为空链表\n    printf(\"输入“#”代表输入结束。\\n\");\n    printf(\"请输入不重复的字符串：\\n\");\n    scanf(\"%s\", ch);\n    while (strcmp(ch, \"#\") != 0)\n    {\n        pp = LocateNode(head, ch);  //查找是否输入的字符串已经存在\n        if (pp == NULL)\n        {\n            s = (ListNode*)malloc(sizeof(ListNode));    //创建新的结点\n            strcpy(s->data, ch);\n            s->next = r->next;\n            r->next = s;    //将新结点插入表中\n        }\n        else\n        {\n            printf(\"输入了重复的字符串。\\n\");\n        }\n        printf(\"输入“#”代表输入结束。\\n\");\n        printf(\"请输入不重复的字符串：\\n\");\n        scanf(\"%s\", ch);\n    }\n    return head;    //返回头指针\n}\n\n\n/*============按值查找结点，找到则返回结点位置，否则返回NULL==================*/\n/*@param    LinkList head：要查找的单链表的头指针*/\n/*@param    char* key：要查找的字符串*/\n/*@return   若未查找到，返回NULL，如果查找到，返回字符串的结点位置*/\n/*@note     按值查找结点*/\nListNode* LocateNode(LinkList head, char* key)\n{\n    ListNode* p = head->next;   //开始结点比较\n    while (p && (p->data != key))   //直到p=NULL或者p->data==key为止\n        p = p->next;    //扫描下一个结点\n    return p;   //若p=NULL则查找失败，返回NULL，否则p指向查找的字符串的结点位置\n}\n\n\n/*=================向指定结点插入指定值===================*/\n/*@param    LinkList head：要插入指定值的单链表的头指针*/\n/*@param    int i：要插入字符串的位置*/\n/*@param    char* key：要删除的字符串*/\n/*@return   void*/\n/*@note     在指定位置插入指定字符串*/\nvoid insertlist(LinkList head, int i, char* key)\n{\n    ListNode* p, * t, * pp;\n    int j;\n    p = head;\n    j = 0;\n    pp = LocateNode(head, key); //查找是否输入的字符串已存在\n    if (pp == NULL)\n    {\n        while (p != NULL && j < i - 1)  //寻找第i-1个结点\n        {\n            p = p->next;\n            j++;\n        }\n        if (j != i - 1)\n        {\n            printf(\"错误的插入位置。\\n\");\n            return;\n        }\n        t = (ListNode*)malloc(sizeof(ListNode));\n        strcpy(t->data, key);   //将字符串s赋值给数据域\n        t->next = p->next;\n        p->next = t;\n    }\n    else\n        printf(\"输入的字符串已存在。\\n\");\n}\n\n\n/*===================删除指定值的结点=======================*/\n/*@param    LinkList head：要删除指定值的单链表的头指针*/\n/*@param    char* key：要删除的字符串*/\n/*@return   void*/\n/*@note     删除指定字符串的结点*/\nvoid deletelist(LinkList head, char* key)\n{\n    ListNode* p, * r, * q = head;\n    p = LocateNode(head, key);  //按照key值查找结点\n    if (p = NULL)   //若没有找到key值，退出\n    {\n        printf(\"输入的字符串不存在。\\n\");\n        exit(0);\n    }\n    while (q->next != p)    //p为要删除的结点，q为p的前结点\n        q = q->next;\n    r = q->next;\n    q->next = r->next;  //将r的指针域赋值给q的指针域\n    free(r);    //释放结点\n}\n\n\n/*==============打印单链表=============*/\n/*@param    LinkList head：要打印的单链表的头指针*/\n/*@return   void*/\n/*@note     打印单链表*/\nvoid printlist(LinkList head)\n{\n    ListNode* p = head->next;   //从开始结点打印\n    while (p)\n    {\n        printf(\"%s,  \", p->data);\n        p = p->next;\n    }\n    printf(\"\\n\");\n}\n\n\n/*==================删除整个单链表，释放空间=================*/\n/*@param    LinkList head：要删除的单链表的头指针*/\n/*@return   void*/\n/*@note     删除整个单链表*/\nvoid deleteall(LinkList head)\n{\n    ListNode* p = head, * r;\n    while (p->next)\n    {\n        r = p->next;\n        free(p);\n        p = r;\n    }\n    free(p);\n}\n\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; r &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;m,&amp;amp;n);\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(r&amp;#61;m%n)\n        {\n            m &amp;#61; n;\n            n &amp;#61; r;\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,n);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["C语言实训练习（欧几里得求最大公约数", ["编写程序，求两个数的最大公约数（GCD），例如：12 和 28 的最大公约数是 4。", "求最大公约数的经典算法是欧几里德（Euclid）算法，方法如下。分别让变量 m 和 n 存储两个数的值。如果 n 为 0，那么停止操作，m 中的值就是 GCD；否则，计算 m 除以 n 的余数 r，把 n 保存到 m 中，并把余数 r 保存到 n 中。然后重复上述过程，每次都先判定 n 是否为 0。", "\n", "输入格式:", "\n", "在一行中给出 2 个整数 A 和 B，其中 0≤A≤2", "30", " , 0≤B≤2", "30", " 。", "\n", "输出格式:", "\n", "输出 A 和 B 的最大公约数。", "\n", "输入样例:"]], "Tag": "程序设计"}
{"Answer": "你的时间复杂都为O（n2） 你试试qsort", "Konwledge_Point": "重复n次操作", "Question": ["简单选择排序 时间限制: 40 Sec 内存限制: 128 MB", ["题目描述", "\n编一程序用简单选择排序方法对n个整数排序（从大到小）。", "\n对n个数进行降序排列，简单选择排序的算法思想如下：", "\n1）首先通过n-1次比较，从n个元素中找出值最大的元素，将它与第一个元素交换。（第一趟排序）。", "\n2）再通过n-2次比较，从剩余的n-1个元素中找出值次大的元素，将它与第二个元素交换。（第二趟排序）。", "\n3）重复上述操作，共进行n-1趟排序后，排序结束。", "\n输入", "\n先输入整数个数n（n<=100000）", "\n然后输入n个整数", "\n输出", "\n输出排序后的n个整数，整数之间由1个空格隔开。", "\n样例输入", "\n102 7 12 23 23 34 45 56 87 98", "\n样例输出", "\n98 87 56 45 34 23 23 12 7 2", "\n提示", "\n\n", "本题由实验指导书实验9第3题改编而成。", "\n\n", "注意数组元素长度可达100000，也需尽量优化算法以避免超时。", "\n\n", "难度系数为6。", "\n\n", "我的代码是这样的", "\n#include\"stdio.h\"", "\n\n", "void sort(int array[],int n) //排序函数", "\n{", "\n int i,j,temp;", "\n for(i=0; i<n; i++)", "\n   for(j=i+1; j<n; j++)", "\n   {", "\n    if(array[i]<array[j])", "\n    {", "\n     //交换", "\n     temp=array[i];", "\n     array[i]=array[j];", "\n     array[j]=temp;", "\n    }", "\n   }", "\n}", "\n\n", "int main()  //主函数", "\n{", "\nint N;", "\nscanf(\"%d\",&N);", "\n int array[N],i;", "\n    for(i=0; i<N; i++)", "\n {", "\n  scanf(\"%d\",&array[i]);", "\n }", "\n //调用排序函数", "\n    sort(array,N);", "\n //输出排序后的结果", "\n for(i=0; i<N; i++)", "\n {", "\n  printf(\"%d \",array[i]);", "\n }", "\n}", "\n能不能告诉我怎么优化？超时了"]], "Tag": "程序设计"}
{"Answer": "我只有C++的\r\n// name: Kyle Burmark\r\n// professor: M. Gelotte\r\n// date: 2/26/02\r\n// Description: This is a computer version of the game hangman, the user\r\n// can play against a 2nd player or the computer, and he can enter how many \r\n// guesses he gets,\r\n// Start of program\r\n// Header file definitions\r\n\r\n#include &lt;iostream&gt;\t\t\t\t// Standard input/output\r\n#include &lt;string&gt;\t\t\t\t// String manipulation\r\n#include &lt;cctype&gt;\t\t\t\t// Character manipulation and testing\r\n#include &lt;fstream&gt;\t\t\t\t// File stream\r\n#include &lt;cstdlib&gt;\t\t\t\t// Used for random function\r\n#include &lt;time.h&gt;\t\t\t\t// Used for better random number\r\n#include \"draw.h\"\t\t\t\t// Draws hangman\r\n\r\nusing namespace std;\r\n// Function declerations\r\nvoid instruction(int&amp; choice);\t\t// Gives instructions and gets choice\r\nvoid usergame(int i);\t\t\t\t// Plays 2nd user game\r\nvoid compgame(int i);\t\t\t\t// Plays against computer\r\nvoid test(string word, char letter, int&amp; numwrong, string&amp; temp, int i);\t\t// Tests current letter and replaces starred word\r\nvoid lchosen(char letter, string&amp; letterchosen, int&amp; check, int&amp; chosencounter, int i);\t\t\t// Checks current letter and adds it to letters chosen output if not entered already\r\nvoid rnd(string&amp; word, int i);\t\t// Gets random word from file\r\nvoid drawman(int numguess, int numwrong, int i);\t// Draws hangman\r\ninline istream&amp; Flush(istream&amp; stream);\t\t\t\t// Flushes cin stream\r\n\r\n// Start of main\r\nint main()\r\n{\t\r\n\tint i = 0;\t\t\t// Counter variable for loops\r\n\tint exit = 0;\t\t// Main loop exit variable\r\n\tint choice;\t\t\t// Users inputed choice for type of game or to exit\r\n\t// Main control loop\r\n\tdo {\t\t\t\t// while exit != 1\r\n\t\tsystem(\"cls\"); // 执行系统命令清屏Clear the screen\r\n\t\tinstruction(choice);\t\t// Give instructions\r\n\t\tswitch(choice)\r\n\t\t{\r\n\t\tcase 1:\r\n\t\t\tusergame(i);\t\t\t// Calls user game\r\n\t\t\tbreak;\r\n\t\tcase 2: \r\n\t\t\tcompgame(i);\t\t\t// Calls computer game\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tcout &lt;&lt; \"Goodbye\" &lt;&lt; endl;\t// Exits\r\n\t\t\texit = 1;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tcerr &lt;&lt; \"Invalid choice - try again\" &lt;&lt; endl;    // Invalid choice erroe\r\n\t\t}\r\n\t} while (exit != 1);\r\n\t// End main loop\r\n\tsystem(\"pause\"); // 执行系统命令：暂停\r\n\treturn 0;\r\n}\r\n// End main\r\n// Subprograms\r\n// ---------------------------------------------------------------------\r\n// Instructions subprogram\r\n\r\nvoid instruction(int&amp; choice)\r\n{\t\r\n\tcout &lt;&lt; \"\t\t\t-Hangman-\" &lt;&lt; endl &lt;&lt; endl;\r\n\tcout &lt;&lt; \"\t\tCreated by Kyle Burmark\" &lt;&lt; endl &lt;&lt; endl;\r\n\tcout &lt;&lt; \"*****************************************\" &lt;&lt; endl;\r\n\tcout &lt;&lt; endl;\r\n\tcout &lt;&lt; \" Enter -1- to play against user\" &lt;&lt; endl;\r\n\tcout &lt;&lt; \" Enter -2- to play against computer\" &lt;&lt; endl;\r\n\tcout &lt;&lt; \" Enter -3- to quit\" &lt;&lt; endl;\r\n\tcout &lt;&lt; endl;\r\n\tcout &lt;&lt; \"*****************************************\" &lt;&lt; endl &lt;&lt; endl;\r\n\tcout &lt;&lt; \"Choice: \";\t\t// Get user choice\r\n\tcin &gt;&gt; choice;\r\n\t// Bad data type check\r\n\twhile (!cin)\r\n\t{\r\n\t\tcerr &lt;&lt; \"Invalid character\" &lt;&lt; endl\r\n\t\t\t&lt;&lt; \"Enter again - choice: \";\r\n\t\tFlush(cin);\r\n\t\tcin &gt;&gt; choice;\r\n\t}\r\n\t// End check\r\n\tsystem(\"cls\");\r\n}\r\n// End instruction\r\n// User game subprogram\r\nvoid usergame(int i)\r\n{\r\n\tint numguess = 0;\t\t\t// Number of guesses player gets\r\n\tint numwrong = 0;\t\t\t// Number of wrong guesses player has so far\r\n\tint check;\t\t// A variable to test whether to check the letter entered in the test function\r\n\tint wordcheck;\t // A variable to check whether the user has entered an invalid word\r\n\tint end = 0;\t// A variable to test what to output to the user and to exit the usergame loop\r\n\tint chosencounter = 0;\t\t\r\n// A counter to tell the replace function where to put the letter chosen in the letterchosen string\r\n\tchar letter;\t\t\t\t// User inputed letter\r\n\tstring word;\t\t\t\t// Word user is trying to guess\r\n\tstring temp;\t\t\t\t// Updated output word user sees\r\n\tstring letterchosen = \"                         \";\t\t\r\n// Defines length of letterchosen string\r\n\tdo {\t\t\t\t// while user puts in guesses outside of allowed range\r\n\tcout &lt;&lt; \"How many chances does the person have (4 - 10): \";\r\n\tcin &gt;&gt; numguess;\r\n\t} while (numguess &lt; 4 || numguess &gt; 10);\r\n\tcout &lt;&lt; \"Enter word 2nd user: \";\r\n\tcin &gt;&gt; word;\r\n\tdo {\t\t\t\t// while user inputs bad word\r\n\t\twordcheck = 0;\r\n\t\tfor (int i = 0; i &lt; word.length(); i++)\r\n\t\t{\r\n\t\t\tif (!isalpha(word.at(i)))\r\n\t\t\t{\r\n\t\t\t\twordcheck = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (wordcheck == 1)\r\n\t\t{\r\n\t\t\tcout &lt;&lt; \"Invalid - Enter word again: \";\r\n\t\t\tcin &gt;&gt; word; \r\n\t\t}\r\n\t} while (wordcheck == 1);\r\n\ttemp = word;\t\t// Sets temp string length to word string length\r\n\t// Replace temp with stars loop\r\n\tfor (i = 0; i &lt; word.length(); i++)\r\n\t{\r\n\t\ttemp.replace(i, 1, 1,'*');\r\n\t}\r\n\t// End loop\r\n\tsystem(\"cls\");\r\n\t// Main game loop\r\n\tdo {\r\n\t\tdrawman(numguess, numwrong, i);\r\n\t\t// Tests if user guessed word\r\n\t\tif (word == temp)\r\n\t\t{\tcout &lt;&lt; endl &lt;&lt; endl;\r\n\t\t\tcout &lt;&lt; \"You guessed it [ \" &lt;&lt; word &lt;&lt; \" ]\" &lt;&lt; endl &lt;&lt; endl;\r\n\t\t\tsystem(\"pause\");\r\n\t\t\tend = 1;\r\n\t\t}\r\n\t\t// Tests if user failed to guess word\r\n\t\tif (numwrong == numguess)\r\n\t\t{\r\n\t\t\tcout &lt;&lt; endl &lt;&lt; endl;\r\n\t\t\tcout &lt;&lt; \"You failed\" &lt;&lt; endl &lt;&lt; endl;\r\n\t\t\tsystem(\"pause\");\r\n\t\t\tend = 2;\r\n\t\t}\r\n\t\t// Play while above conditions aren't true\r\n\t\tif (end == 0)\r\n\t\t{\r\n\t\t\tcout &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl;\r\n\t\t\tcout &lt;&lt; \"Letters chosen: \" &lt;&lt; letterchosen &lt;&lt; endl;\r\n\t\t\tcout &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl;\r\n\t\t\tcout &lt;&lt; \"Guesses left: \" &lt;&lt; numguess - numwrong &lt;&lt; endl &lt;&lt; endl; \r\n\t\t\tcout &lt;&lt; \"    \" &lt;&lt; temp &lt;&lt; endl &lt;&lt; endl;\r\n\t\t\tcout &lt;&lt; \"Letter: \";\r\n\t\t\tcin &gt;&gt; letter;\r\n\t\t\t// Test for bad letter\r\n\t\t\twhile (!isalpha(letter))\r\n\t\t\t{\r\n\t\t\t\tFlush(cin);\r\n\t\t\t\tcout &lt;&lt; \"Not a letter - enter letter: \";\r\n\t\t\t\tcin &gt;&gt; letter;\r\n\t\t\t}\r\n\t\t\t// End test\r\n\t\t\tlchosen(letter, letterchosen, check, chosencounter, i);\r\n\t\t\t// Test whether to check letter against correct word string\r\n\t\t\tif (check == 0)\t{ test(word, letter, numwrong, temp, i);\t}\r\n\t\t\telse\t{\t;\t}\r\n\t\t\t// End test\r\n\t\t\tsystem(\"cls\");\r\n\t\t}\r\n\t\t// End game\r\n\t\tsystem(\"cls\");\r\n\t} while(end != 1 &amp;&amp; end != 2);\r\n\t// End main game loop\r\n\r\n\t// Tests end variable to see what to display\r\n\tif (end == 2) \r\n\t{\r\n\t\tcout &lt;&lt; \"Correct word was [ \" &lt;&lt; word &lt;&lt; \" ]\" &lt;&lt; endl &lt;&lt; endl;\r\n\t\tsystem(\"pause\");\r\n\t}\r\n\tif (end == 1)\t{\t\tcout &lt;&lt; \" \";\t}\r\n\tsystem(\"cls\");\r\n}\r\n// End user game\r\n// Start computer game\r\n// See user game for variable and loop information\r\nvoid compgame(int i)\r\n{\r\n\tint numguess = 0;\r\n\tint numwrong = 0;\r\n\tint check;\r\n\tint end = 0;\r\n\tint chosencounter = 0;\r\n\tchar letter;\r\n\tstring word;\r\n\tstring temp;\r\n\tstring letterchosen = \"                         \";\r\n\tdo {\r\n\tcout &lt;&lt; \"How many chances do you want (4 - 10): \";\r\n\tcin &gt;&gt; numguess;\r\n\t} while (numguess &lt; 4 || numguess &gt; 10);\r\n\trnd(word, i);\t\t// Gets random word\r\n\ttemp = word;\r\n\tfor (i = 0; i &lt; word.length(); i++)\t{  temp.replace(i, 1, 1, '*');\t}\r\n\tsystem(\"cls\");\r\n\tdo {\r\n\t\tdrawman(numguess, numwrong, i);\r\n\t\tif (word == temp)\r\n\t\t{\r\n\t\t\tcout &lt;&lt; endl &lt;&lt; endl;\r\n\t\t\tcout &lt;&lt; \"You guessed it [ \" &lt;&lt; word &lt;&lt; \" ]\" &lt;&lt; endl &lt;&lt; endl;\r\n\t\t\tsystem(\"pause\");\r\n\t\t\tend = 1;\r\n\t\t}\r\n\t\tif (numwrong == numguess)\r\n\t\t{\r\n\t\t\tcout &lt;&lt; endl &lt;&lt; endl;\r\n\t\t\tcout &lt;&lt; \"You failed\" &lt;&lt; endl &lt;&lt; endl;\r\n\t\t\tsystem(\"pause\");\r\n\t\t\tend = 2;\r\n\t\t}\r\n\t\tif (end == 0)\r\n\t\t{\r\n\t\t\tcout &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl;\r\n\t\t\tcout &lt;&lt; \"Letters chosen: \" &lt;&lt; letterchosen &lt;&lt; endl;\r\n\t\t\tcout &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl;\r\n\t\t\tcout &lt;&lt; \"Guesses left: \" &lt;&lt; numguess - numwrong &lt;&lt; endl &lt;&lt; endl; \r\n\t\t\tcout &lt;&lt; \"    \" &lt;&lt; temp &lt;&lt; endl &lt;&lt; endl;\r\n\t\t\tcout &lt;&lt; \"Letter: \";\r\n\t\t\tcin &gt;&gt; letter;\r\n\t\t\twhile (!isalpha(letter))\r\n\t\t\t{\r\n\t\t\t\tFlush(cin);\r\n\t\t\t\tcout &lt;&lt; \"Not a letter - enter letter: \";\r\n\t\t\t\tcin &gt;&gt; letter;\r\n\t\t\t}\r\n\r\n\t\t\tlchosen(letter, letterchosen, check, chosencounter, i);\r\n\t\t\tif (check == 0)\r\n\t\t\t{\r\n\t\t\t\ttest(word, letter, numwrong, temp, i);\r\n\t\t\t}\r\n\t\t\telse\t{\t;\t}\r\n\t\t\tsystem(\"cls\");\r\n\t\t}\r\n\t\tsystem(\"cls\");\r\n\t} while(end != 1 &amp;&amp; end != 2);\r\n\tif (end == 2) \r\n\t\tcout &lt;&lt; \"Correct word was [ \" &lt;&lt; word &lt;&lt; \" ]\" &lt;&lt; endl &lt;&lt; endl;\r\n\t\tsystem(\"pause\");\r\n\tif (end == 1)\tcout &lt;&lt; endl;\r\n\tsystem(\"cls\");\r\n}\r\n// End computer game\r\n// Checks current letter chosen by user\r\nvoid lchosen(char letter, string&amp; letterchosen, int&amp; check, int&amp; chosencounter, int i)\r\n{\r\n\tcheck = 0;\r\n\t// Check if letter is equal to any letter in letterchosen string loop\r\nfor (i = 0; i &lt; letterchosen.length(); i++)\r\n\t{\r\n\t\tif (letter == letterchosen.at(i))  {check = 1; }\r\n\t}\r\n\t// End loop\r\n\t// Test if letter is already chosen\r\n\tif (check == 1)\r\n\t{\r\n\t\tcout &lt;&lt; endl;\r\n\t\tcout &lt;&lt; \"Letter already chosen\" &lt;&lt; endl;\r\n\t\tsystem(\"pause\");\r\n\t}\r\n\t// Puts letter in string if not chosen\r\n\telse\r\n\t{\r\n\t\tletterchosen.replace(chosencounter, 1, 1, letter);\r\n\t\tchosencounter++;\r\n\t}\r\n}\r\n// End lchosen function\r\n// Tests whether letter is in word string\r\nvoid test(string word, char letter, int&amp; numwrong, string&amp; temp, int i)\r\n{\r\n\tint check2 = 0;\t\t// Checks whether letter is in word string, = 1 if it is\r\n\t// Check for letter match loop\r\n\tfor (i = 0; i &lt; word.length(); i++)\r\n\t{\r\n\t\tif (letter == word.at(i))\r\n\t\t{\r\n\t\t\ttemp.replace(i, 1, 1, letter);\r\n\t\t\tcheck2 = 1;\r\n\t\t}\r\n\t}\r\n\t// End loop\r\n\t// Displays \"wrong letter\" if user inputed bad letter\r\n\tif (check2 == 0)\r\n\t{\r\n\t\tcout &lt;&lt; endl;\r\n\t\tcout &lt;&lt; \"Wrong letter\" &lt;&lt; endl;\r\n\t\tsystem(\"pause\");\r\n\t\tnumwrong++;\r\n\t}\r\n}\r\n// End test function\r\n// Gets random word\r\nvoid rnd(string&amp; word, int i)\r\n{\r\n\tint x;\t\t\t\t\t// Random number to pass to word file loop\r\n\tifstream ins;\t\t\t// File stream\r\n\tsrand(time(NULL));\t\t// Gets better random number based on time\r\n\tx = rand()%100;\t\t\t// Gets number 0 - 99 \r\n\tins.open(\"words.txt\");\t// Opens random word file\r\n\t// Tests for bad file and gets word if not a bad file\r\n\tif (ins.fail())\r\n\t{\r\n\t\tcerr &lt;&lt; \"Words.txt is not in same folder as hangman.exe, \" &lt;&lt; endl\r\n\t\t\t&lt;&lt; \"put in correct file and run again and make sure it's \" &lt;&lt; endl\r\n\t\t\t&lt;&lt; \"called words.txt\" &lt;&lt; endl;\r\n\t\tsystem(\"pause\");\r\n\tmain();\r\n\t}\r\n\telse\r\n\t{\r\n\t\tfor (i = 0; i &lt; (x + 1); i++)\t{\tgetline(ins, word);\t}\r\n\t}\r\n\t// End test\r\n\tins.close();\t\t// Close file\r\n}\r\n// End random function\r\n// Draws hangman\r\nvoid drawman(int numguess, int numwrong, int i)\r\n{\r\n\tdraw d;\t\t\t// Data object\r\n\t// Draw loop based on number of guesses and number of wrong guesses\r\n\tfor (i = 0; i &lt;= numwrong; i++)\r\n\t{\r\n\t\tif (numguess ==  4)\r\n\t\t{\r\n\t\t\tswitch(i)\r\n\t\t\t{\r\n\t\t\tcase 1: d.rope();\tcout &lt;&lt; endl;\td.head();\r\n\t\t\t\tcout &lt;&lt; endl;\td.neck(); \tbreak;\r\n\t\t\tcase 2:\tcout &lt;&lt; endl;\td.leftarm();\r\n\t\t\t\td.rightarm();\tbreak;\r\n\t\t\tcase 3: cout &lt;&lt; endl; d.waisttop();\tbreak;\r\n\t\t\tcase 4: cout &lt;&lt; endl;\td.leftleg();\td.rightleg();\r\n\t\t\t\tcout &lt;&lt; endl &lt;&lt; endl &lt;&lt; \"Dead\" &lt;&lt; endl;\tbreak;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\telse if (numguess == 5)\r\n\t\t{\r\n\t\t\tswitch(i)\r\n\t\t\t{\r\n\t\t\tcase 1:\td.rope();\tbreak;\r\n\t\t\tcase 2:\tcout &lt;&lt; endl;\td.head();\tcout &lt;&lt; endl;\td.neck();\tbreak;\r\n\t\t\tcase 3:\tcout &lt;&lt; endl;\td.leftarm(); d.rightarm(); \tbreak;\r\n\t\t\tcase 4:\tcout &lt;&lt; endl;\td.waisttop();\t\tbreak;\r\n\t\t\tcase 5:\tcout &lt;&lt; endl;\td.leftleg();\t\td.rightleg();\r\n\t\t\t\tcout &lt;&lt; endl &lt;&lt; endl &lt;&lt; \"Dead\" &lt;&lt; endl;\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (numguess == 6)\r\n\t\t{\r\n\t\t\tswitch(i)\r\n\t\t\t{\r\n\t\t\tcase 1:\td.rope();\tbreak;\r\n\t\t\tcase 2:  cout &lt;&lt; endl;\td.head(); \tcout &lt;&lt; endl;\td.neck(); \tbreak;\r\n\t\t\tcase 3:\tcout &lt;&lt; endl;\td.leftarm();\td.rightarm();\tbreak;\r\n\t\t\tcase 4:\tcout &lt;&lt; endl;\td.waisttop();\tbreak;\r\n\t\t\tcase 5:\tcout &lt;&lt; endl;\td.leftleg();\tbreak;\r\n\t\t\tcase 6:\td.rightleg();\tcout &lt;&lt; endl &lt;&lt; \"Dead\" &lt;&lt; endl;\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (numguess == 7)\r\n\t\t{\r\n\t\t\tswitch(i)\r\n\t\t\t{\r\n\t\t\tcase 1:\td.rope();\t\tbreak;\r\n\t\t\tcase 2:\tcout &lt;&lt; endl;\td.head();\tcout &lt;&lt; endl;\td.neck();\tbreak;\r\n\t\t\tcase 3:\tcout &lt;&lt; endl;\td.leftarm();\tbreak;\r\n\t\t\tcase 4:\td.rightarm();\tbreak;\r\n\t\t\tcase 5:\tcout &lt;&lt; endl;\td.waisttop();\tbreak;\r\n\t\t\tcase 6:\tcout &lt;&lt; endl;\td.leftleg();\tbreak;\r\n\t\t\tcase 7:\td.rightleg();\tcout &lt;&lt; endl &lt;&lt; \"Dead\" &lt;&lt; endl;\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (numguess == 8)\r\n\t\t{\r\n\t\t\tswitch(i)\r\n\t\t\t{\r\n\t\t\tcase 1:\td.rope();\tbreak;\r\n\t\t\tcase 2:\tcout &lt;&lt; endl;\td.head(); \tbreak;\r\n\t\t\tcase 3:\tcout &lt;&lt; endl;\td.neck();\t\tbreak;\r\n\t\t\tcase 4:\tcout &lt;&lt; endl;\td.leftarm();\tbreak;\r\n\t\t\tcase 5:\td.rightarm();  break;\r\n\t\t\tcase 6:\tcout &lt;&lt; endl;\td.waisttop();\tbreak;\r\n\t\t\tcase 7:\tcout &lt;&lt; endl;\td.leftleg();\tbreak;\r\n\t\t\tcase 8:\td.rightleg();\tcout &lt;&lt; endl &lt;&lt; \"Dead\" &lt;&lt; endl;\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (numguess == 9)\r\n\t\t{\r\n\t\t\tswitch(i)\r\n\t\t\t{\r\n\t\t\tcase 1:\td.rope();\tbreak;\r\n\t\t\tcase 2:\tcout &lt;&lt; endl;\td.head();\t\tbreak;\r\n\t\t\tcase 3:\tcout &lt;&lt; endl;\td.neck();\t\tbreak;\r\n\t\t\tcase 4:\tcout &lt;&lt; endl;\td.leftarm();\tbreak;\r\n\t\t\tcase 5:\td.rightarm();\tbreak;\r\n\t\t\tcase 6:\tcout &lt;&lt; endl;  d.waisttop();\tbreak;\r\n\t\t\tcase 7:   break;\r\n\t\t\tcase 8:\tcout &lt;&lt; endl;\td.leftleg();\tbreak;\r\n\t\t\tcase 9:\td.rightleg();   cout &lt;&lt; endl &lt;&lt; \"Dead\" &lt;&lt; endl;\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (numguess == 10)\r\n\t\t{\r\n\t\t\tswitch(i)\r\n\t\t\t{\r\n\t\t\tcase 1:\td.rope();\t\tbreak;\r\n\t\t\tcase 2:\tcout &lt;&lt; endl;\td.head();\t\tbreak;\r\n\t\t\tcase 3:\tcout &lt;&lt; endl;\td.neck();\t\tbreak;\r\n\t\t\tcase 4:\tcout &lt;&lt; endl;\td.leftarm();\tbreak;\r\n\t\t\tcase 5:\td.rightarm();\tbreak;\r\n\t\t\tcase 6:\tcout &lt;&lt; endl;\td.waisttop();\tbreak;\r\n\t\t\tcase 7:\tbreak;\r\n\t\t\tcase 8:\tcout &lt;&lt; endl;\td.leftleg();\tbreak;\r\n\t\t\tcase 9:   d.rightleg();\r\n\t\t\t\tcout &lt;&lt; \"One last chance. What do you want on your tombstone?\";\tbreak;\r\n\t\t\tcase 10:\tcout &lt;&lt; endl &lt;&lt; \"Dead\" &lt;&lt; endl;\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// End draw loop\r\n}\r\n// End draw function\r\n// Flushes cin stream\r\ninline istream&amp; Flush(istream&amp; stream)\r\n{\r\n\tstream.clear();\r\n\tint chars_to_skip = stream.rdbuf()-&gt;in_avail();\r\n\treturn stream.ignore(chars_to_skip);\r\n}\r\n// End flush function\r\n// End subprogams\r\n// End program", "Konwledge_Point": "重复n次操作", "Question": ["求助C语言的猜数字游戏", ["C语言课程设计要求", "\n\n", "1、 课程设计目的", "\n1、 掌握用C语言进行程序设计的基本方法 。", "\n2、 熟练掌握window控制台应用程序的编写。", "\n3、 初步完成一个应用程序的设计、编码、调试，了解程序设计过程，锻炼实际应用能力。", "\n2、 设计题目及内容", "\n猜数字游戏：", "\n计算机随机生成没有重复的n个数，由用户从键盘输入要猜测的数。每猜一次，电脑给出提示信息。如果用户输入的数跟计算机生成的数，数值和位置都完全相等，则胜出。", "\n基本功能要求：", "\n1. 随机生成没有重复的4个数。（每个数字在0-9范围内）。", "\n2. 用户从键盘输入4个不重复的数，程序能对用户输入的数与随机生成的数进行匹配，并给出提示信息：“有 x个数数值和位置都相同！有 y个数数值相同，但位置不同。”", "\n3. 控制用户的尝试次数为10次。", "\n4. 计算、输出并保存用户的得分，计分规则：总分是100分，每失败一次扣10分。", "\n5. 有操作菜单，能根据不同选择运行不同功能：", "\n1：开始游戏！", "\n2：查看上次成绩！", "\n3：输出帮助信息！", "\n0：退出程序！", "\n扩展功能要求：", "\n1. 对用户输入的数字进行检查，如果用户输入重复的数，给出提示，要求重新输入。", "\n2. 能对游戏进行设置：在操作菜单中增加相应的选项：“4：系统设置”。", "\n（1） 修改要猜的数字的个数n，根据修改后的n值，计算机可随机生成n个数，用户进行n个数的猜测游戏。", "\n（2） 修改可以尝试的次数。", "\n3. 若游戏胜出且成绩在前五名，可输入并记录对应的用户姓名，并添加到积分榜中。操作菜单中相应选项改为“2：积分榜！”，用于把积分榜中保存的前五名成绩及用户姓名显示出来。", "\n4. 能对积分榜的成绩进行排序和输出。", "\n提示：（1）生成一个0~9的随机数，使用rand函数：", "\n#include", "\n#include  //使用rand函数必须使用此头文件", "\n#include", "\nint main()", "\n{​int a;", "\n​ ​srand(time(0));  //生成一个种子。整个程序只写一次即可。", "\n​ ​a=rand()%10;   //生成一个随机数。", "\n​ printf(\"%d\\n\",a);", "\n​ ​return 0;", "\n}", "\n（2）保证生成的n个数不重复： ", "\n可用数组记录生成的数，每生成一个数，要与之前已经生成的进行比较，如果有相同的​重新生成，直到不相同。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代码不全&amp;#xff0c;不太好判断&amp;#xff0c;&lt;br /&gt;这边简单说下一种可能的解决方法&amp;#xff1a;&lt;/p&gt;\n&lt;h3 id=\"h3_解决方法_1652258204044\"&gt;解决方法&lt;/h3&gt;\n&lt;p&gt;我看了下里面的逻辑&amp;#xff0c;&lt;br /&gt;四个循环里面的n并没有太大关系&amp;#xff0c;&lt;br /&gt;那么是否可以试下&amp;#xff0c;将每个循环里面的变量n换做不同的变量来区分&amp;#xff0c;试下这四个循环是否都可以成功执行。&lt;/p&gt;\n&lt;p&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#!bin/bash&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;ls&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;-al&lt;/span&gt; awk &lt;span class=\"hljs-string\"&gt;&amp;#39;{print $3}&amp;#39;&lt;/span&gt; | &lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;-u&lt;/span&gt; | uniq | &lt;span class=\"hljs-built_in\"&gt;tee&lt;/span&gt; owner.txt  &lt;span class=\"hljs-comment\"&gt;#输出owner并存入文件&lt;/span&gt;\nrc&amp;#61;&lt;span class=\"hljs-variable\"&gt;$&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;cat&lt;/span&gt; owner.txt | wc &lt;span class=\"hljs-literal\"&gt;-l&lt;/span&gt;) &lt;span class=\"hljs-comment\"&gt;#计算owner数量/行数并赋值给变量rc&lt;/span&gt;\nsed &lt;span class=\"hljs-literal\"&gt;-n&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;2,&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;p&amp;#39;&lt;/span&gt; owner.txt | &lt;span class=\"hljs-built_in\"&gt;tee&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;-a&lt;/span&gt; owner.txt &lt;span class=\"hljs-comment\"&gt;#复制owner到文件&lt;/span&gt;\nsed &lt;span class=\"hljs-literal\"&gt;-n&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;2,&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$&lt;/span&gt;((&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;-1&lt;/span&gt;))&lt;span class=\"hljs-string\"&gt;&amp;#39;p&amp;#39;&lt;/span&gt; owner.txt | &lt;span class=\"hljs-built_in\"&gt;tee&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;-a&lt;/span&gt; owner.txt &lt;span class=\"hljs-comment\"&gt;#第二次复制owner到文件&amp;#xff0c;此时文件内有重复有序的4段owner&lt;/span&gt;\n \nm&amp;#61;&lt;span class=\"hljs-variable\"&gt;$&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;pwd&lt;/span&gt;) &lt;span class=\"hljs-comment\"&gt;#将当前目录路径赋值给变量m&lt;/span&gt;\nn&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &lt;span class=\"hljs-comment\"&gt;#设置变量n&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; [[ &lt;span class=\"hljs-variable\"&gt;$n&lt;/span&gt; &amp;lt; &lt;span class=\"hljs-variable\"&gt;$&lt;/span&gt;((&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; ]]  &lt;span class=\"hljs-comment\"&gt;#判断条件&amp;#xff1a;n的范围在第二行到第rc行&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt;\n  sed &lt;span class=\"hljs-literal\"&gt;-i&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$n&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;s/^/hello /g&amp;#39;&lt;/span&gt;  owner.txt   \n&lt;span class=\"hljs-comment\"&gt;#在第n行的行首插入文本&amp;#34;hello &amp;#34;&lt;/span&gt;\n  sed &lt;span class=\"hljs-literal\"&gt;-i&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$n&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;s#$# &amp;#39;&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$m&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;  abccbbbb#g&amp;#39;&lt;/span&gt; owner.txt\n &lt;span class=\"hljs-comment\"&gt;#在第n行的行尾插入文本“ &amp;#39;$m&amp;#39;  vcbbbb” &lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#此时$m内含有分隔符‘/&amp;#39;&amp;#xff0c;所以此条sed命令的分隔符需要变更为除/以外的任意符号&lt;/span&gt;\nn&amp;#61;&lt;span class=\"hljs-variable\"&gt;$&lt;/span&gt;((&lt;span class=\"hljs-variable\"&gt;$n&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))  &lt;span class=\"hljs-comment\"&gt;# 行数加一&amp;#xff0c;对下一行进行操作&lt;/span&gt;\ndone\n&lt;span class=\"hljs-comment\"&gt;#一下while语句同上&amp;#xff0c;只有追加的数据内容有细微变化&lt;/span&gt;\nn1&amp;#61;&lt;span class=\"hljs-variable\"&gt;$&lt;/span&gt;((&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; [[ &lt;span class=\"hljs-variable\"&gt;$n1&lt;/span&gt; &amp;lt; &lt;span class=\"hljs-variable\"&gt;$&lt;/span&gt;((&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt; ]]\n&lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt;\n  sed &lt;span class=\"hljs-literal\"&gt;-i&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$n1&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;s/^/helloo /g&amp;#39;&lt;/span&gt;  owner.txt\n  sed &lt;span class=\"hljs-literal\"&gt;-i&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$n1&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;s#$# &amp;#39;&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$m&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;  jdhym#g&amp;#39;&lt;/span&gt; owner.txt\nn1&amp;#61;&lt;span class=\"hljs-variable\"&gt;$&lt;/span&gt;((&lt;span class=\"hljs-variable\"&gt;$n1&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\ndone\n \nn2&amp;#61;&lt;span class=\"hljs-variable\"&gt;$&lt;/span&gt;((&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;))\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; [[ &lt;span class=\"hljs-variable\"&gt;$n2&lt;/span&gt; &amp;lt; &lt;span class=\"hljs-variable\"&gt;$&lt;/span&gt;((&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; ]]\n&lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt;\n  sed &lt;span class=\"hljs-literal\"&gt;-i&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$n2&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;s/^/hellooo /g&amp;#39;&lt;/span&gt;  owner.txt\n  sed &lt;span class=\"hljs-literal\"&gt;-i&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$n2&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;s#$# &amp;#39;&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$m&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;  fgdddss#g&amp;#39;&lt;/span&gt; owner.txt\nn2&amp;#61;&lt;span class=\"hljs-variable\"&gt;$&lt;/span&gt;((&lt;span class=\"hljs-variable\"&gt;$n2&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\ndone\n \nn3&amp;#61;&lt;span class=\"hljs-variable\"&gt;$&lt;/span&gt;((&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;-1&lt;/span&gt;))\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; [[ &lt;span class=\"hljs-variable\"&gt;$n3&lt;/span&gt; &amp;lt; &lt;span class=\"hljs-variable\"&gt;$&lt;/span&gt;((&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-variable\"&gt;$rc&lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; ]]\n&lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt;\n  sed &lt;span class=\"hljs-literal\"&gt;-i&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$n3&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;s/^/hellooooo /g&amp;#39;&lt;/span&gt;  owner.txt\n  sed &lt;span class=\"hljs-literal\"&gt;-i&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$n3&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;s#$# &amp;#39;&lt;/span&gt;&lt;span class=\"hljs-variable\"&gt;$m&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;  3411s#g&amp;#39;&lt;/span&gt; owner.txt\nn3&amp;#61;&lt;span class=\"hljs-variable\"&gt;$&lt;/span&gt;((&lt;span class=\"hljs-variable\"&gt;$n3&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;))\ndone\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["shell脚本不报错，但是脚本里的某一个while循环并不执行", ["最近写了一个可以格式化输出表格的shell脚本，根据扫描出目录的owner，进而加入一些有规律性的数据，最后输出我想要的表格文件", "脚本中含有4个相同的while循环，循环里面的内容是在指定行段插入数据，不同的只是while的条件语句（判断行号的语句）", "在做测试的时候发现，我再扫描a目录时，第2个while没有执行，在扫描b目录时，第4个while没有执行，以此类推，在给多个目录做测试时，均出现了其中一个while没有执行的情况，剩余3个while都完美执行了。", "\n", "问题相关代码，请勿粘贴截图", "\n", "#!bin/bash", "\n\n", "ls", " ", "-al", " awk ", "'{print $3}'", " | ", "sort", " ", "-u", " | uniq | ", "tee", " owner.txt  ", "#输出owner并存入文件", "\nrc=", "$", "(", "cat", " owner.txt | wc ", "-l", ") ", "#计算owner数量/行数并赋值给变量rc", "\nsed ", "-n", " ", "'2,'", "$rc", "'p'", " owner.txt | ", "tee", " ", "-a", " owner.txt ", "#复制owner到文件", "\nsed ", "-n", " ", "'2,'", "$", "((", "$rc", "+", "$rc", "-1", "))", "'p'", " owner.txt | ", "tee", " ", "-a", " owner.txt ", "#第二次复制owner到文件，此时文件内有重复有序的4段owner", "\n\nm=", "$", "(", "pwd", ") ", "#将当前目录路径赋值给变量m", "\nn=", "2", " ", "#设置变量n", "\n", "while", " [[ ", "$n", " < ", "$", "((", "$rc", "+", "1", ")) ]]  ", "#判断条件：n的范围在第二行到第rc行", "\n", "do", "\n  sed ", "-i", " ", "''", "$n", "'s/^/hello /g'", "  owner.txt   \n", "#在第n行的行首插入文本\"hello \"", "\n  sed ", "-i", " ", "''", "$n", "'s#$# '", "$m", "'  abccbbbb#g'", " owner.txt\n ", "#在第n行的行尾插入文本“ '$m'  vcbbbb” ", "\n", "#此时$m内含有分隔符‘/'，所以此条sed命令的分隔符需要变更为除/以外的任意符号", "\nn=", "$", "((", "$n", "+", "1", "))  ", "# 行数加一，对下一行进行操作", "\ndone\n", "#一下while语句同上，只有追加的数据内容有细微变化", "\nn=", "$", "((", "$rc", "+", "1", "))\n", "while", " [[ ", "$n", " < ", "$", "((", "$rc", "+", "$rc", ")) ]]\n", "do", "\n  sed ", "-i", " ", "''", "$n", "'s/^/helloo /g'", "  owner.txt\n  sed ", "-i", " ", "''", "$n", "'s#$# '", "$m", "'  jdhym#g'", " owner.txt\nn=", "$", "((", "$n", "+", "1", "))\ndone\n\nn=", "$", "((", "$rc", "+", "$rc", "))\n", "while", " [[ ", "$n", " < ", "$", "((", "$rc", "+", "$rc", "+", "$rc", "-", "1", ")) ]]\n", "do", "\n  sed ", "-i", " ", "''", "$n", "'s/^/hellooo /g'", "  owner.txt\n  sed ", "-i", " ", "''", "$n", "'s#$# '", "$m", "'  fgdddss#g'", " owner.txt\nn=", "$", "((", "$n", "+", "1", "))\ndone\n\nn=", "$", "((", "$rc", "+", "$rc", "+", "$rc", "-1", "))\n", "while", " [[ ", "$n", " < ", "$", "((", "$rc", "+", "$rc", "+", "$rc", "+", "$rc", "-", "2", ")) ]]\n", "do", "\n  sed ", "-i", " ", "''", "$n", "'s/^/hellooooo /g'", "  owner.txt\n  sed ", "-i", " ", "''", "$n", "'s#$# '", "$m", "'  3411s#g'", " owner.txt\nn=", "$", "((", "$n", "+", "1", "))\ndone\n\n\n", "\n", "代码并没有完整贴上，只贴了循环这一部分，麻烦大家帮忙看看。", "由于系统的环境是csh，我不清楚是不是bash在csh环境下的问题，也没测试出来，csh我不太了解", "主要是为什么在测试不同的目录时，哪一个循环不执行比较随机没有规律。"]], "Tag": "程序设计"}
{"Answer": "用二进制方式写入文件，同时读取的时候也用二进制读取。", "Konwledge_Point": "重复n次操作", "Question": ["MFC中读写文件问题 CArchive写入文件的是乱码", ["代码如下，写入文件之后再打开txt发现除了前面的学号，后面的都是乱码。各行写有注释，请各位帮忙看一下，我觉得可能是宽字节的问题，但是本人是小白不知道该怎么弄，谢谢各位。", "\n\n", "void Add::OnClickedIdbAdd()\n{\n    // TODO: Add your control notification handler code here\n    UpdateData();\n    if (!m_aComp || !m_aEng || !m_aMath || !m_aGym || m_aName==\"\" || m_aSno==\"\" || m_aMajor==\"\" ){\n        MessageBox(_T(\"请完善信息后再确认输入！\"), _T(\"错误\"));\n        return;\n    }                                                                //判断是否有空没有输入信息\n\n    if (m_aSno.GetLength() != 6){\n        MessageBox(_T(\"学号必须为6位数,请重新输入。\"), _T(\"错误\"));\n        m_aSno = \"\";\n        UpdateData(FALSE);\n        return;\n    }                                                               //学号必须要6位数\n\n    CFile cf;\n    if (!cf.Open(_T(\"D:\\\\SIMS.txt\"), \n        CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite)){\n#if def_DEBUG\n        afxDump << \"unable to open file\" << \"\\n\";\n        exit(1);\n#endif \n    }                                                               //判断是否打开文件成功\n    CArchive cas(&cf, CArchive::store);\n    CArchive cal(&cf, CArchive::load);          //两个CArchive，一个读一个写\n\n    CString strSno;\n    CString strtemp;\n\n    cf.SeekToBegin();\n\n    while (cf.GetPosition() != cf.GetLength()){\n        cal >> strSno;\n        MessageBox(strSno);\n        if (m_aSno == strSno){\n            MessageBox(_T(\"该学号已存在，请重新输入。\"), _T(\"错误\"));\n            m_aSno = \"\";\n            UpdateData(FALSE);\n            return;\n        }                                                               //如果有重复就不写入\n        cal.ReadString(strtemp);                       //读完这一行剩下的数据以便进入下一行\n    }                                                                //不断执行直到文件尾\n\n\n    cf.SeekToEnd();                                    //符合条件了则开始写入，首先移动到末尾\n    cas << m_aSno  << m_aName  << m_aMajor  << m_aComp << m_aMath << m_aEng << m_aGym << \"\\n\";        //利用CArchive写入\n    m_aSno = \"\";\n    m_aName = \"\";\n    m_aMajor = \"\";\n    m_aComp = 0;\n    m_aEng = 0;\n    m_aGym = 0;\n    m_aMath = 0;\n    UpdateData(FALSE);                                  //写完后自动清空对话框中内容\n\n    MessageBox(_T(\"添加成功\"), _T(\"成功\"));\n\n    cal.Close();\n    cas.Close();\n    cf.Close();\n\n\n}\n\n", "\n\n", "写入到文件之后，打开txt结果是这样的。", "\n\n", "不知道这是什么原因？我的vs2013默认的就是unicode。", "\n另外我想知道如果向我上面那样用CArchive往文件里写数据，怎样才能写入一个换行符呢？还有就是CArchive有没有什么办法能够做到像ostream的<<一样能够使用setw来调整格式呢？小弟刚学，问题有点多，谢谢各位~"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://zhuanlan.zhihu.com/p/602320595\" id=\"textarea_1676518619437_1676518771177_0\"&gt;https://zhuanlan.zhihu.com/p/602320595&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["如何用C语言设计一个简单的英文词典排版系统", ["系统实现单词的录入、删除、浏览、排序功能，其中录入功能要求能够完成新单词的录入操作；添加功能完成新单词的添加操作，删除功能完成词典中重复单词的删除操作，浏览功能完成英文词典文件的输出操作；排序功能完成A-Z的顺序排版。", "(1)可通过键盘式菜单实现功能选择，程序运行后首先打印一个菜单：N.录入；D.删除；B.浏览；S.排序；Q.退出。(2)采用指针数组或二维数组进行单词的存储，便于将数据写入文件。(3)单词输入结束标志可以以回车键结束。(4)编写main函数进行演示。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;跟你运行出来了&amp;#xff0c;麻烦采纳一下&amp;#xff0c;谢谢&amp;#xff01;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/285665134456164.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,k,p,num[&lt;span class=\"hljs-number\"&gt;1000000&lt;/span&gt;],times&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    queue&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; que;\n    cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;k&amp;gt;&amp;gt;p;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;k;i&amp;#43;&amp;#43;){\n        que.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(que.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;()){\n        times&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(times%n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n            num[(times&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)/n]&amp;#61;que.&lt;span class=\"hljs-built_in\"&gt;front&lt;/span&gt;();\n        }\n        que.&lt;span class=\"hljs-built_in\"&gt;pop&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;p;i&amp;#43;&amp;#43;){\n            que.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(que.&lt;span class=\"hljs-built_in\"&gt;front&lt;/span&gt;());\n            que.&lt;span class=\"hljs-built_in\"&gt;pop&lt;/span&gt;();\n        }\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; l&amp;#61;k/n;\n    &lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;(num,num&amp;#43;l);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;l;i&amp;#43;&amp;#43;){\n        cout&amp;lt;&amp;lt;num[i]&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["「7-5」E 、发牌者", ["题目描述\n贝西与其他的 ", "N", "-", "1", " 头奶牛围成一圈玩纸牌游戏。已知一副纸牌有 ", "K", " （", "K", " 为 ", "N", "的倍数）张，其中有 ", "K", "/", "N", "张“好牌”。贝茜是游戏的发牌者，发牌规则如下： ", "1", "）、贝茜把牌堆的最上面一张发给她右边的奶牛； ", "2", "）、每当贝茜发完一张牌，她都得将牌堆顶部 ", "P", " 张牌放到底部去（一般把这个操作称为切牌）； ", "3", "）、然后，贝茜对逆时针方向", "(", "右手边", ")", "的下一头奶牛重复上述的操作。 贝茜想把所有好牌都留给自己，于是她找到了你，希望你能告诉她，将“好牌”放在初始牌堆的哪些位置，才能确保它们在发完牌后全集中到贝茜的手里。 注意：我们把牌堆顶的牌定义为 ", "1", "号牌，从上往下第二张定义为 ", "2", " 号牌，依此类推。\n", "\n", "输入格式\n输入包含 ", "3", " 个用空格隔开的整数：", "N", "、", "K", " 以及 ", "P", "。\n", "\n", "输出格式\n一行，包含 M 个整数，表示贝茜应该在初始牌堆的这个位置放一张好牌。所有的位置按升序输出。\n", "\n", "样例\n输入样例\n", "E", ".", "in", "\n", "3", " ", "9", " ", "2", "\n", "\n", "输出样例\nE.", "out", "\n", "3", " ", "7", " ", "8", "\n", "\n", "数据范围与提示\n", "1", " <", "=", " N <", "=", " ", "100", " N<", "=", "K<", "=", "100000", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;malloc.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-regexp\"&gt;//u&lt;/span&gt;sing namespace std;\ntypedef int ElemType;\ntypedef struct node\n{\n    ElemType  data; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;数据域\n    struct node* &lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;指针域\n} SLinkNode; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;单链表类型\n\nvoid InitList(SLinkNode*&amp;amp; L) &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;初始化单链表L\n{\n    L &amp;#61; (SLinkNode*)malloc(sizeof(SLinkNode)); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;创建头结点L\n    L-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt; &amp;#61; NULL;\n}\n\nvoid DestroyList(SLinkNode*&amp;amp; L) &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;销毁单链表L\n{\n    SLinkNode* pre &amp;#61; L, * p &amp;#61; pre-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; NULL)\n    {\n        free(pre);\n        pre &amp;#61; p; \n        p &amp;#61; p-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;pre、p同步后移\n    }\n    free(pre);\n}\n\nint GetLength(SLinkNode* L) &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;求单链表L的长度\n{\n    int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    SLinkNode* p &amp;#61; L-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; NULL)\n    {\n        i&amp;#43;&amp;#43;;\n        p &amp;#61; p-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;;\n    }\n    return i;\n}\n\nint GetElem(SLinkNode* L, int i, ElemType&amp;amp; e) &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;求第i个结点值e\n{\n    int j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    SLinkNode* p &amp;#61; L; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;p指向头结点&amp;#xff0c;计数器j置为&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;参数i错误返回&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; NULL &amp;amp;&amp;amp; j &amp;lt; i)\n    {\n        j&amp;#43;&amp;#43;;\n        p &amp;#61; p-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (p &amp;#61;&amp;#61; NULL)\n        return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;未找到返回&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        e &amp;#61; p-&amp;gt;data;\n        return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;找到后返回&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    }\n}\n\nint Locate(SLinkNode* L, ElemType e) &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;求第一个值为e的结点的逻辑序号\n{\n    SLinkNode* p &amp;#61; L-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;;\n    int j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;p指向第一个数据结点&amp;#xff0c;j置为其序号&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; NULL &amp;amp;&amp;amp; p-&amp;gt;data !&amp;#61; e)\n    {\n        p &amp;#61; p-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;;\n        j&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (p &amp;#61;&amp;#61; NULL) return(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;未找到返回&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; return(j); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;找到后返回其序号\n}\n\nint InsElem(SLinkNode*&amp;amp; L, ElemType x, int i) &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;插入结点值为x的结点\n{\n    int j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    SLinkNode* p &amp;#61; L, * s;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;参数i错误返回&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; NULL &amp;amp;&amp;amp; j &amp;lt; i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;查找第i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;个结点*p\n    {\n        j&amp;#43;&amp;#43;;\n        p &amp;#61; p-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (p &amp;#61;&amp;#61; NULL)\n        return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;未找到第i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;个结点时返回&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;找到第i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;个结点p\n    {\n        s &amp;#61; (SLinkNode*)malloc(sizeof(SLinkNode));\n        s-&amp;gt;data &amp;#61; x; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;创建存放元素x的新结点s\n        s-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt; &amp;#61; p-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;将s结点插入到p结点之后\n        p-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt; &amp;#61; s;\n        return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;插入运算成功,返回&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    }\n}\n\nint DelElem(SLinkNode*&amp;amp; L, int i) &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;删除第i个结点\n{\n    int j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    SLinkNode* p &amp;#61; L, * q;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;参数i错误返回&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; NULL &amp;amp;&amp;amp; j &amp;lt; i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;查找第i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;个结点\n    {\n        j&amp;#43;&amp;#43;;\n        p &amp;#61; p-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (p &amp;#61;&amp;#61; NULL)\n        return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;未找到第i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;个结点时返回&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;找到第i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;个结点p\n    {\n        q &amp;#61; p-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;q指向被删结点\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (q &amp;#61;&amp;#61; NULL)\n            return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;没有第i个结点时返回&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            p-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt; &amp;#61; q-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;从单链表中删除q结点\n            free(q); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;释放其空间\n            return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n    }\n}\n\nvoid DispList(SLinkNode* L) &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;输出单链表\n{\n    SLinkNode* p &amp;#61; L-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; NULL)\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, p-&amp;gt;data);\n        p &amp;#61; p-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;;\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;采用头插法建表的算法\nvoid CreateListF(SLinkNode*&amp;amp; L, ElemType a[], int n)\n{\n    SLinkNode* s; \n    int i;\n    L &amp;#61; (SLinkNode*)malloc(sizeof(SLinkNode)); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;创建头结点\n    L-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt; &amp;#61; NULL; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;头结点的&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;域置空&amp;#xff0c;表示一个空单链表\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;) &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;遍历a数组所有元素\n    {\n        s &amp;#61; (SLinkNode*)malloc(sizeof(SLinkNode));\n        s-&amp;gt;data &amp;#61; a[i]; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;创建存放a[i]元素的新结点s\n        s-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt; &amp;#61; L-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;将s插在头结点之后\n        L-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt; &amp;#61; s;\n    }\n}\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;采用尾插法建表的算法\nvoid CreateListR(SLinkNode*&amp;amp; L, ElemType a[], int n)\n{\n    SLinkNode* s, * tc; \n    int i;\n    L &amp;#61; (SLinkNode*)malloc(sizeof(SLinkNode)); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;创建头结点\n    tc &amp;#61; L; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;tc始终指向尾结点,开始时指向头结点\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n    {\n        s &amp;#61; (SLinkNode*)malloc(sizeof(SLinkNode));\n        s-&amp;gt;data &amp;#61; a[i]; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;创建存放a[i]元素的新结点s\n        tc-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt; &amp;#61; s; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;将s插入tc之后\n        tc &amp;#61; s;\n    }\n    tc-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt; &amp;#61; NULL; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;尾结点&lt;span class=\"hljs-keyword\"&gt;next&lt;/span&gt;域置为NULL\n}\n\nvoid basic_action()\n{\n    ;\n}\n\nvoid expand_action()\n{\n    ;\n}\n\nint main()\n{\n    SLinkNode* L &amp;#61; NULL, * L1 &amp;#61; NULL;\n    ElemType n, a[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; }, i, e;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#xff09;输入一组长度不超过&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;的整数元素\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a[i]);\n\n    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;***使用头插法建立一个带头结点的单链表***\n    CreateListF(L, a, n);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#xff09;使用头插法建立一个带头结点的单向链表\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;L:&amp;#34;&lt;/span&gt;);       \n    DispList(L);         &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#xff09;显示单链表\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;L的长度:%d\\n&amp;#34;&lt;/span&gt;, GetLength(L)); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#xff09;显示单链表的长度\n\n    i &amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;\n    GetElem(L, i, e);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;第%d个位置的值:%d\\n&amp;#34;&lt;/span&gt;, i, e); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;&amp;#xff09;显示第&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;个位置的值\n    e &amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;元素%d的位置:%d\\n&amp;#34;&lt;/span&gt;, e, Locate(L, e));&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;&amp;#xff09;显示链表中某个元素是第几个位置\n\n    i &amp;#61; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;; e &amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    DelElem(L, i);  &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;&amp;#xff09;删除第&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;个位置元素\n    InsElem(L, e, i);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;&amp;#xff09;往第&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;个位置插入元素&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;L:&amp;#34;&lt;/span&gt;);\n    DispList(L);   &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;&amp;#xff09;显示单链表\n\n    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;***使用尾插法建立一个带头结点的单链表***\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    CreateListR(L1, a, n);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#xff09;使用尾插法建立一个带头结点的单向链表\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;L1:&amp;#34;&lt;/span&gt;);\n    DispList(L1);         &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#xff09;显示单链表\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;L1的长度:%d\\n&amp;#34;&lt;/span&gt;, GetLength(L1)); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#xff09;显示单链表的长度\n\n    i &amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;\n    GetElem(L1, i, e);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;第%d个位置的值:%d\\n&amp;#34;&lt;/span&gt;, i, e); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;&amp;#xff09;显示第&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;个位置的值\n    e &amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;元素%d的位置:%d\\n&amp;#34;&lt;/span&gt;, e, Locate(L1, e));&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;&amp;#xff09;显示链表中某个元素是第几个位置\n\n    i &amp;#61; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;; e &amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    DelElem(L1, i);  &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;&amp;#xff09;删除第&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;个位置元素\n    InsElem(L1, e, i);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;&amp;#xff09;往第&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;个位置插入元素&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;L1:&amp;#34;&lt;/span&gt;);\n    DispList(L1);   &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;&amp;#xff09;显示单链表\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["掌握链表的基本操作-建立、查找、插入和删除", ["问题遇到的现象和发生背景", "\n", "基础操作：设计整数单链表的基本运算程序，并用相关数据进行测试", "（1）输入一组长度不超过20的整数元素，使用头插法建立一个带头结点的单向链表", "（2）遍历显示单链表，并显示单链表的长度", "（3）显示第3个位置的值，显示链表中某个元素是第几个位置", "（4）删除第4个位置元素，然后往第4个位置插入元素10，显示单链表", "（5）根据上述数组使用尾插法建立一个带头结点的单链表，重复上述（2）、（3）、（4）操作", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "有链表的基本操作，如建立、查找、插入和删除等基础源码，需要调用", "\n", "我想要达到的结果", "\n", "\n", "链表的基本操作，如建立、查找、插入和删除等基础源码", "\n", "#include <malloc.h>", "#include ", "using namespace std;", "\n", "typedef int ElemType;", "typedef struct node", "{    ElemType data;        //数据域", "    struct node *next;    //指针域", "} SLinkNode;                //单链表类型", "\n", "void InitList(SLinkNode *&L)                //初始化单链表L", "{    L=(SLinkNode ", ")malloc(sizeof(SLinkNode));    //创建头结点", "L", "    L->next=NULL;", "}", "\n", "void DestroyList(SLinkNode *&L)            //销毁单链表L", "{    SLinkNode *pre=L,*p=pre->next;", "    while (p!=NULL)", "    {    free(pre);", "        pre=p; p=p->next;    //pre、p同步后移", "    }", "    free(pre);", "}", "\n", "int GetLength(SLinkNode *L)        //求单链表L的长度", "{    int i=0;", "    SLinkNode *p=L->next;", "    while (p!=NULL)", "    {    i++;", "        p=p->next;", "    }", "    return i;", "}", "\n", "int GetElem(SLinkNode *L,int i,ElemType &e)        //求第i个结点值e", "{    int j=0;", "    SLinkNode *p=L;                //p指向头结点，计数器j置为0", "    if (i<=0) return 0;        //参数i错误返回0", "    while (p!=NULL && j<i)", "    {    j++;", "        p=p->next;", "    }", "    if (p==NULL)", "        return 0;                //未找到返回0", "    else", "    {    e=p->data;", "        return 1;                //找到后返回1", "    }", "}", "\n", "int Locate(SLinkNode *L,ElemType e)        //求第一个值为e的结点的逻辑序号", "{    SLinkNode *p=L->next;", "    int j=1;                        //p指向第一个数据结点，j置为其序号1", "    while (p!=NULL && p->data!=e)", "    {    p=p->next;", "        j++;", "    }", "    if (p==NULL) return(0);            //未找到返回0", "    else return(j);                    //找到后返回其序号", "}", "\n", "int InsElem(SLinkNode ", "&L,ElemType x,int i)    //插入结点值为x的结点", "{    int j=0;", "    SLinkNode ", "p=L,", "s;", "    if (i<=0) return 0;            //参数i错误返回0", "    while (p!=NULL && j<i-1)    //查找第i-1个结点*p", "    {    j++;", "        p=p->next;", "    }", "    if (p==NULL)", "        return 0;                //未找到第i-1个结点时返回0", "    else                        //找到第i-1个结点", "p", "    {    s=(SLinkNode ", ")malloc(sizeof(SLinkNode));", "        s->data=x;                //创建存放元素x的新结点", "s", "        s->next=p->next;        //将", "s结点插入到", "p结点之后", "        p->next=s;", "        return 1;                //插入运算成功,返回1", "    }", "}", "\n", "int DelElem(SLinkNode *&L,int i)    //删除第i个结点", "{    int j=0;", "    SLinkNode ", "p=L,", "q;", "    if (i<=0) return 0;            //参数i错误返回0", "    while (p!=NULL && j<i-1)    //查找第i-1个结点", "    {    j++;", "        p=p->next;", "    }", "    if (p==NULL)", "        return 0;                //未找到第i-1个结点时返回0", "    else                        //找到第i-1个结点", "p", "    {    q=p->next;                //q指向被删结点", "        if (q==NULL)", "            return 0;            //没有第i个结点时返回0", "        else", "        {    p->next=q->next;    //从单链表中删除", "q结点", "            free(q);            //释放其空间", "            return 1;", "        }", "    }", "}", "\n", "void DispList(SLinkNode *L)        //输出单链表", "{    SLinkNode *p=L->next;", "    while (p!=NULL)", "    {    printf(\"%d \",p->data);", "        p=p->next;", "    }", "    printf(\"\\n\");", "}", "\n", "//采用头插法建表的算法", "void CreateListF(SLinkNode *&L,ElemType a[],int n)", "{    SLinkNode ", "s;  int i;", "    L=(SLinkNode ", ")malloc(sizeof(SLinkNode));        //创建头结点", "    L->next=NULL;            //头结点的next域置空，表示一个空单链表", "    for (i=0;i<n;i++)        //遍历a数组所有元素", "    {    s=(SLinkNode *)malloc(sizeof(SLinkNode));", "        s->data=a[i];        //创建存放a[i]元素的新结点", "s", "        s->next=L->next;    //将", "s插在头结点之后", "        L->next=s;", "    }", "}", "\n", "//采用尾插法建表的算法", "void CreateListR(SLinkNode *&L,ElemType a[],int n)", "{    SLinkNode ", "s,", "tc;  int i;", "    L=(SLinkNode ", ")malloc(sizeof(SLinkNode));    //创建头结点", "    tc=L;                        //tc始终指向尾结点,开始时指向头结点", "    for (i=0;i<n;i++)", "    {    s=(SLinkNode *)malloc(sizeof(SLinkNode));", "        s->data=a[i];            //创建存放a[i]元素的新结点", "s", "        tc->next=s;                //将", "s插入", "tc之后", "        tc=s;", "    }", "    tc->next=NULL;                //尾结点next域置为NULL", "}", "\n", "void basic_action()", "{", "\n", "}", "\n", "void expand_action()", "{", "\n", "}", "\n", "int main()", "{", "\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;两个问题&amp;#xff1a;&lt;br /&gt;1、dxr不知道是否在外部定义&amp;#xff0c;如果没有定义&amp;#xff0c;则改为 dxr &amp;#61; [a1, a2, a3, a4]&lt;br /&gt;2、xlsj重复赋值了&amp;#xff0c;第二次赋了个空值&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;while True:\n      xlsj &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[[&lt;span class=\"hljs-string\"&gt;&amp;#39;03/01/2016&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;BJ&amp;#39;&lt;/span&gt;, 8, 5]&lt;/span&gt;, &lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;17/01/2016&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;BJ&amp;#39;&lt;/span&gt;, 12, 2]&lt;/span&gt;, &lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;31/01/2016&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;BJ&amp;#39;&lt;/span&gt;, 19, 2]&lt;/span&gt;, &lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;14/02/2016&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;BJ&amp;#39;&lt;/span&gt;, -3, 3]&lt;/span&gt;, &lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;28/02/2016&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;BJ&amp;#39;&lt;/span&gt;, 19, 2]&lt;/span&gt;, &lt;span class=\"hljs-selector-attr\"&gt;[&lt;span class=\"hljs-string\"&gt;&amp;#39;13/03/2016&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;BJ&amp;#39;&lt;/span&gt;, 5, 3]&lt;/span&gt;]\n      a1 &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;日期:&amp;#34;&lt;/span&gt;)\n      a2 &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;城市:&amp;#34;&lt;/span&gt;)\n      a3 &amp;#61; int(&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;数据1:&amp;#34;&lt;/span&gt;))\n      a4 &amp;#61; int(&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;数据2:&amp;#34;&lt;/span&gt;))\n      dxr &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[a1, a2, a3, a4]&lt;/span&gt;\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; dxr not &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; xlsj:\n            print(&lt;span class=\"hljs-string\"&gt;&amp;#34;数据不存在重复&amp;#34;&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["python 列表操作 为什么两个列表存在相同的数据 用 if i in x:  会报不存在呢. if i not in x: 有一样存在说成不存在", ["问题遇到的现象和发生背景", "\n", "> d:\\", "python", "\\pythonapplication1\\", "20220420", "\\", "write", ".", "py", "(", "42", ")", "write", "()\n-> ", "if", " dxr in xlsj:\n(Pdb) n\n> d:\\", "python", "\\pythonapplication1\\", "20220420", "\\", "write", ".", "py", "(", "53", ")", "write", "()\n-> ", "if", " dxr not in xlsj:\n(Pdb) n\n> d:\\", "python", "\\pythonapplication1\\", "20220420", "\\", "write", ".", "py", "(", "54", ")", "write", "()\n-> ", "print", "(", "\"数据不存在重复\"", ")\n(Pdb) dxr\n[[", "'03/01/2016'", ", ", "'BJ'", ", ", "8", ", ", "5", "]]\n(Pdb) xlsj\n[[", "'03/01/2016'", ", ", "'BJ'", ", ", "8", ", ", "5", "], [", "'17/01/2016'", ", ", "'BJ'", ", ", "12", ", ", "2", "], [", "'31/01/2016'", ", ", "'BJ'", ", ", "19", ", ", "2", "], [", "'14/02/2016'", ", ", "'BJ'", ", -", "3", ", ", "3", "]]\n\n", "\n", "while True:\n      xlsj = ", "[[", "'03/01/2016'", ", ", "'BJ'", ", 8, 5]", ", ", "[", "'17/01/2016'", ", ", "'BJ'", ", 12, 2]", ", ", "[", "'31/01/2016'", ", ", "'BJ'", ", 19, 2]", ", ", "[", "'14/02/2016'", ", ", "'BJ'", ", -3, 3]", ", ", "[", "'28/02/2016'", ", ", "'BJ'", ", 19, 2]", ", ", "[", "'13/03/2016'", ", ", "'BJ'", ", 5, 3]", "]\n      dxr = ", "[]", "\n      a1 = ", "input", "(", "\"日期:\"", ")\n      a2 = ", "input", "(", "\"城市:\"", ")\n      a3 = int(", "input", "(", "\"数据1:\"", "))\n      a4 = int(", "input", "(", "\"数据2:\"", "))\n      dxr", ".append", "(", "[a1, a2, a3, a4]", ")\n      ", "if", " dxr not ", "in", " xlsj:\n            print(", "\"数据不存在重复\"", ")\n", "\n", "问题", "1.为什么我这样错了,我要怎么样写才能判断两个数量不相同的列表里面的数据是不是有重复?"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt; scanf(&amp;#34;%d&amp;#34;,&amp;amp;p);&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["学生通讯录程序：用结构体和数组实现学生通讯录程序。为什么查询时就会运行不下去？", ["\n#", "include", " <stdio.h>\n#", "include", " <", "string", ".h>\n #", "include", " <cstdlib>\n#define N ", "108", "\n\ntypedef ", "struct", " telephone\n{\n    ", "char", " name", "[", "25", "]", ";\n    ", "char", " num", "[", "25", "]", ";\n    ", "char", " tel", "[", "25", "]", ";\n} TEL;\n \nvoid ", "DisplayMenu()", "; ", "//显示主菜单", "\nvoid save(TEL a", "[]", ", ", "int", " n);\nvoid ", "CreateList(TEL ", "a", "[], ", "int", " ", "n", ")", "      ", "//1.创建通讯录", "\n{\n    ", "int", " i;\n    FILE *fp;\n      ", "for", " (i = ", "0", "; i < n; i++)\n            scanf(", "\"%s%s%s\"", ", a", "[", "i", "]", ".name, a", "[", "i", "]", ".num, a", "[", "i", "]", ".tel);\n        save(a, n);\n}\n", "int", " ", "AddList(TEL ", "a", "[], ", "int", " ", "n", ")", ";          ", "//2.添加学生信息", "\nvoid ", "InquireListName(TEL ", "a", "[], ", "int", " ", "n", ")", "; ", "//3.按姓名查询通讯录", "\nvoid ", "InquireListNum(TEL ", "a", "[], ", "int", " ", "n", ")", ";  ", "//3.按学号查询通讯录", "\nvoid ", "ChangeListName(TEL ", "a", "[], ", "int", " ", "n", ")", ";  ", "//4.按姓名修改通讯录", "\n", "int", " ", "DelListName(TEL ", "a", "[], ", "int", " ", "n", ")", ";      ", "//5.按姓名删除通讯录", "\n", "int", " ", "DelListNum(TEL ", "a", "[], ", "int", " ", "n", ")", ";       ", "//6.按学号删除通讯录", "\nvoid ", "DisplayList(TEL ", "a", "[], ", "int", " ", "n", ")", ";     ", "//7.显示通讯录", "\n \n", "int", " main", "()", "\n{\n    \n    ", "struct", " telephone a", "[N]", ";\n    ", "int", "  n,p=", "0", ";\n    scanf(", "\"%d\"", ", &n);\n    ", "DisplayMenu()", "; ", "//显示主菜单", "\n    ", "while", " (", "1", ")\n    {\n        ", "int", " m;\n        ", "int", " name", "[", "25", "]", ";\n        scanf(", "\"%d\"", ", &m);\n \n\n        ", "//if( select=='l' )", "\n        ", "//    break;", "\n \n        switch (m)\n        {\n        case ", "1", ":\n            ", "CreateList(", "a", ",", "n", ")", "; ", "//1.创建通讯录", "\n            break;\n        case ", "2", ":\n             ", "if", " (", "AddList(", "a", ", ", "n", ")", ") ", "//2.添加学生信息", "\n                n++;\n            save(a, n);\n            break;\n        case ", "3", ":\n            printf(", "\"1.按姓名查询 2.按学号查询\\n\"", ");\n            scanf(", "\"%d\"", ",p);\n            ", "if", "(p==", "1", "){", "InquireListName(", "a", ", ", "n", ")", ";} ", "//3.按姓名查询通讯录", "\n            ", "else", " {", "InquireListNum(", "a", ", ", "n", ")", ";} ", "//3.按学号查询通讯录", "\n            break;\n        case ", "4", ":\n            ", "ChangeListName(", "a", ", ", "n", ")", "; ", "//4.按姓名修改通讯录", "\n            break;\n        case ", "5", ":\n            ", "if", " (", "DelListName(", "a", ", ", "n", ")", ") ", "//5.按姓名删除通讯录", "\n                n--;\n            break;\n        case ", "6", ":\n            ", "if", " (", "DelListNum(", "a", ", ", "n", ")", ") ", "//6.按学号删除通讯录", "\n                n--;\n            break;\n        case ", "7", ":\n            ", "DisplayList(", "a", ", ", "n", ")", "; ", "//7.显示通讯录", "\n            break;\n        case ", "8", ":\n            exit(", "0", "); ", "//8.退出系统", "\n            break;\n        }\n    }\n    return ", "0", ";\n}\n \nvoid save(TEL a", "[]", ", ", "int", " n)\n{\n    ", "int", " i;\n    FILE *fp;\n    fp = fopen(", "\"stu.dat\"", ", ", "\"w\"", ");\n    fprintf(fp, ", "\"%d\\n\"", ", n);\n    ", "for", " (i = ", "0", "; i < n; i++)\n        fprintf(fp, ", "\"%s\\t%s\\t%s\\n\"", ", a", "[", "i", "]", ".name, a", "[", "i", "]", ".num, a", "[", "i", "]", ".tel);\n}\n \nvoid ", "DisplayMenu()", " ", "//1.显示主菜单", "\n{\n    printf(", "\"                      学生通讯录管理系统\\n\\n\"", ");\n    printf(", "\"*************************系统功能菜单**************************\\n\"", ");\n    printf(", "\" -------------------------------------------------------------\\n\"", ");\n    printf(", "\"   1.创建通讯录                       2.添加学生信息 \\n\"", ");\n    printf(", "\"************************************************************\\n\"", ");\n    printf(", "\"   3.查询通讯录                       4.按姓名修改通讯录   \\n\"", ");\n    printf(", "\"************************************************************\\n\"", ");\n    printf(", "\"   5.按姓名删除通讯录                 6.按学号删除通讯录\\n\"", ");\n    printf(", "\"************************************************************\\n\"", ");\n    printf(", "\"   7.显示通讯录                       8.退出系统\\n\"", ");\n    printf(", "\"************************************************************\\n\"", ");\n    printf(", "\" -------------------------------------------------------------\\n\"", ");\n    printf(", "\"***************************************************************\\n\\n\"", ");\n    printf(", "\"请选择您需要的操作：\\n\"", ");\n}\n \nvoid ", "DisplayList(TEL ", "a", "[], ", "int", " ", "n", ")", " ", "//2.显示通讯录", "\n{\n    ", "int", " i;\n    printf(", "\"显示通讯录：\\n\"", ");\n    ", "for", " (i = ", "0", "; i < n; i++)\n        printf(", "\"%s\\t%s\\t%s\\n\"", ", a", "[", "i", "]", ".name, a", "[", "i", "]", ".num, a", "[", "i", "]", ".tel);\n    printf(", "\"\\n\"", ");\n}\n \nvoid ", "InquireListName(TEL ", "a", "[], ", "int", " ", "n", ")", " ", "//3.按姓名查询通讯录", "\n{\n    ", "int", " i, flag;\n    ", "char", " SearchName", "[", "25", "]", ";\n    printf(", "\"按姓名查询通讯录：\\n\"", ");\n    scanf(", "\"%s\"", ", SearchName);\n    ", "for", " (i = ", "0", ", flag = ", "0", "; i < n; i++)\n    {\n        ", "if", " (strcmp(SearchName, a", "[", "i", "]", ".name)", " == ", "0", ")\n        {\n            printf(", "\"%s\\t\"", ", a", "[", "i", "]", ".name);\n            printf(", "\"%s\\t\"", ", a", "[", "i", "]", ".num);\n            printf(", "\"%s\\n\"", ", a", "[", "i", "]", ".tel);\n            flag = ", "1", ";\n            break;\n        }\n    }\n    ", "if", " (flag", " == ", "0", ")\n    {\n        printf(", "\"未查询到该姓名信息！\\n\"", ");\n    }\n    printf(", "\"\\n\"", ");\n}\n \nvoid ", "InquireListNum(TEL ", "a", "[], ", "int", " ", "n", ")", " ", "//3.按学号查询通讯录", "\n{\n    ", "int", " i, flag;\n    ", "char", " SearchID", "[", "25", "]", ";\n    printf(", "\"按学号查询通讯录：\\n\"", ");\n    scanf(", "\"%s\"", ", SearchID);\n    ", "for", " (i = ", "0", ", flag = ", "0", "; i < n; i++)\n    {\n        ", "if", " (strcmp(SearchID, a", "[", "i", "]", ".num)", " == ", "0", ")\n        {\n            printf(", "\"%s\\t\"", ", a", "[", "i", "]", ".name);\n            printf(", "\"%s\\t\"", ", a", "[", "i", "]", ".num);\n            printf(", "\"%s\\n\"", ", a", "[", "i", "]", ".tel);\n            flag = ", "1", ";\n            break;\n        }\n    }\n    ", "if", " (flag", " == ", "0", ")\n    {\n        printf(", "\"未查询到该学号信息！\\n\"", ");\n    }\n    printf(", "\"\\n\"", ");\n}\n \nvoid ", "ChangeListName(TEL ", "a", "[], ", "int", " ", "n", ")", " ", "//4.按姓名修改通讯录", "\n{\n    ", "int", " i, flag;\n    ", "char", " SearchName", "[", "25", "]", ";\n    printf(", "\"按姓名修改通讯录：\\n\"", ");\n    scanf(", "\"%s\"", ", SearchName);\n    ", "for", " (i = ", "0", ", flag = ", "0", "; i < n; i++)\n    {\n        ", "if", " (strcmp(SearchName, a", "[", "i", "]", ".name)", " == ", "0", ")\n        {\n            strcpy(a", "[", "i", "]", ".name, SearchName);\n            printf(", "\"请输入要修改的学号：\"", ");\n            scanf(", "\"%s\"", ", a", "[", "i", "]", ".num);\n            printf(", "\"请输入要修改的电话号码：\"", ");\n            scanf(", "\"%s\"", ", a", "[", "i", "]", ".tel);\n            ", "//strcpy(p[i].name,ChangeName);", "\n            ", "//strcpy(p[i].name,ChangeTel);", "\n            save(a, n);\n            printf(", "\"信息修改完毕！\\n\"", ");\n            printf(", "\"%s\\t%s\\t%s\\n\"", ", a", "[", "i", "]", ".name, a", "[", "i", "]", ".num, a", "[", "i", "]", ".tel);\n            flag = ", "1", ";\n            break;\n        }\n    }\n    ", "if", " (flag", " == ", "0", ")\n        printf(", "\"未找到该姓名信息！\"", ");\n    printf(", "\"\\n\"", ");\n}\n \n\n \n", "int", " ", "DelListName(TEL ", "a", "[], ", "int", " ", "n", ")", " ", "//5.按姓名删除通讯录", "\n{\n    ", "int", " i, j;\n    ", "char", " SearchName", "[", "25", "]", ";\n    printf(", "\"按姓名删除通讯录：\\n\"", ");\n    scanf(", "\"%s\"", ", SearchName);\n    ", "for", " (i = ", "0", "; i < n; i++)\n    {\n        ", "if", " (strcmp(a", "[", "i", "]", ".name, SearchName)", " == ", "0", ")\n            break;\n    }\n    ", "if", " (i >= n)\n    {\n        printf(", "\"未查询到该姓名信息！按姓名删除通讯录失败！\\n\"", ");\n        return ", "0", ";\n    }\n    ", "else", "\n    {\n        ", "for", " (j = i; j < n - ", "1", "; j++)\n            a", "[", "j", "]", " = a", "[", "j", " + ", "1", "]", ";\n        save(a, n);\n        printf(", "\"按姓名删除通讯录成功！\\n\"", ");\n        return ", "1", ";\n    }\n}\n \n", "int", " ", "DelListNum(TEL ", "a", "[], ", "int", " ", "n", ")", " ", "//6.按学号删除通讯录", "\n{\n    ", "int", " i, j, flag;\n    ", "char", " SearchNum", "[", "25", "]", ";\n    printf(", "\"按学号删除通讯录：\\n\"", ");\n    scanf(", "\"%s\"", ", SearchNum);\n    ", "for", " (i = ", "0", "; i < n; i++)\n    {\n        ", "if", " (strcmp(a", "[", "i", "]", ".num, SearchNum)", " == ", "0", ")\n            break;\n    }\n    ", "if", " (i >= n)\n    {\n        printf(", "\"未查询到该学号信息！按学号删除通讯录失败！\\n\"", ");\n        return ", "0", ";\n    }\n    ", "else", "\n    {\n        ", "for", " (j = i; j < n - ", "1", "; j++)\n            a", "[", "j", "]", " = a", "[", "j", " + ", "1", "]", ";\n        printf(", "\"按学号删除通讯录成功！\\n\"", ");\n        save(a, n);\n        return ", "1", ";\n    }\n    printf(", "\"\\n\"", ");\n}\n \n \n", "int", " ", "AddList(TEL ", "a", "[], ", "int", " ", "n", ")", " ", "//7.添加学生信息", "\n{\n    ", "int", " i, flag;\n    ", "char", " AddNum", "[", "25", "]", ";\n    printf(", "\"添加通讯录：\\n\"", ");\n    printf(", "\"请输入要添加的学号：\"", ");\n    scanf(", "\"%s\"", ", AddNum);\n    ", "for", " (i = ", "0", ", flag = ", "0", "; i < n; i++)\n    {\n        ", "if", " (strcmp(AddNum, a", "[", "i", "]", ".num)", " == ", "0", ")\n        {\n            flag = ", "1", ";\n            printf(", "\"学号重复！\\n\"", ");\n            return ", "0", ";\n        }\n    }\n    ", "if", " (flag", " == ", "0", ")\n    {\n        ", "//n++;", "\n        printf(", "\"学号不重复！请添加信息：\\n\"", ");\n        printf(", "\"请输入要添加的名字：\"", ");\n        scanf(", "\"%s\"", ", a", "[", "n", "]", ".name);\n        strcpy(a", "[", "n", "]", ".num, AddNum);\n        printf(", "\"请输入要添加的电话号码：\"", ");\n        scanf(", "\"%s\"", ", a", "[", "n", "]", ".tel);\n        ", "//save(a,n);", "\n        printf(", "\"添加信息成功！\\n\"", ");\n        return ", "1", ";\n        ", "//printf(\"%d\",n);", "\n    }\n    printf(", "\"\\n\"", ");\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;因为你这个命令里,主文件和日志文件重名了,建议仔细阅读官方文档,看看你的代码有什么区别&lt;br /&gt;&lt;a href=\"https://docs.microsoft.com/zh-cn/sql/relational-databases/databases/create-a-database?view&amp;#61;sql-server-ver15\" id=\"textarea_1647088569456_1647088726565_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;创建数据库 - SQL Server | Microsoft Docs&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;了解如何使用 SQL Server Management Studio 或 Transact-SQL 在 SQL Server 2019 中创建数据库。 查看有关该过程的建议。&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://docs.microsoft.com/zh-cn/sql/relational-databases/databases/create-a-database?view&amp;#61;sql-server-ver15&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["利用SQL命令创建数据库失败", ["问题遇到的现象和发生背景", "\n", "SQL Server Management Studio", "\n", "问题相关代码，请勿粘贴截图", "\n", "CREATE DATABASE SCHOOLL", "  CONTAINMENT=NONE", "  ON PRIMARY(", "   NAME=N'SCHOOLL',", "   FILENAME=N'D:\\schoolL',", "   SIZE=3328KB,", "   MAXSIZE=UNLIMITED,", "   FILEGROWTH=10%", "   )", "  LOG ON(", "   NAME=N'SCHOOLL_LOG',", "   FILENAME=N'D:\\schoolL',", "   SIZE=1024KB,", "   MAXSIZE=UNLIMITED,", "   FILEGROWTH=10%", "   )", "\n", "运行结果及报错内容", "\n", "消息 5170，级别 16，状态 1，第 1 行", "无法创建文件 'D:\\schoolL'，因为它已存在。请更改文件路径或文件名，然后重试此操作。", "消息 1802，级别 16，状态 4，第 1 行", "CREATE DATABASE 失败。无法创建列出的某些文件名。请查看相关错误。", "\n", "完成时间: 2022-03-12T20:03:50.3825129+08:00", "\n", "我的解答思路和尝试过的方法", "\n", "刚开始文件filename为d盘已经建立的文件夹‘D：\\school’，报错已存在后，改为d盘中不存在的文件夹‘D：\\schoolL’，却还是运行错误，提示已存在", "且文件名NAME=SCHOOLL没有重复", "\n", "我想要达到的结果", "\n", "创建数据库"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代码如下&lt;br /&gt;&lt;code class=\"language-javascript\"&gt;有帮助望采纳~&lt;/code&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;a&amp;#61;&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;()\nwhile &lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;:\n    print(&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;)\n    a&amp;#61;&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[1:]&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; len(a)&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        a&amp;#61;&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[1:]&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/807447336636139.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["按序输出被删除的字符", ["题目描述", "\n", "Ender得到了一个字符串，但是他非常讨厌字符串，因此他准备把字符串中的字符按以下顺序逐个删除。请按序输出被删除的字符。 对于字符串a1a2…an ，依次执行以下操作： (1) 删除当前字符串的第一个字符。 (2) 执行(1)后，将当前字符串的第一个字符移动到最后。 例如字符串“abcd”进行一次操作后将变成“cdb”。 重复以上操作直到字符串为空，按序输出被删除的字符。", "\n", "输入", "\n", "一行，一个字符串。", "\n", "输出", "\n", "N行（N为输入字符串的长度），按序输出被删除的字符。", "\n", "输入样例1", "\n", "abcd", "输出样例1", "\n", "a", "c", "b", "d", "样例解释", "\n", "abcd -> (删除a移动b到字符串最后) cdb -> (删除c移动d到字符串最后) bd -> (删除b) -> d -> (删除d)"]], "Tag": "程序设计"}
{"Answer": "通常来说只需一次 srand 调用\r\n\r\ncpu 速度很块，while 中的 time 在一定时间内返回一样的值，所以rand 返回一样的值列表\r\n\r\n如果使用 srand (1), 每次程序运行 rand 的返回结果和上次运行的一样，只要保证 srand 的值不同就可以了", "Konwledge_Point": "重复n次操作", "Question": ["C++新手上路，编写的代码不能如预想帮运行，是随机数生成出错还是算法出错？", ["该题目中我编写的代码运行后前几个结果随机，后面的结果全部相同，是随机数的生成出错了吗？", "\n同时我的同学编写的程序结果在160左右，而我的总是1000000+，为什么？是数学逻辑错了吗？", "\n还有重复的结果总是1或者15，为什么？", "\n#include", "\n#include", "\n#include", "\n#include", "\nusing namespace std;", "\nint main()", "\n{", "\n    /*题目，在一个16*16的坐标中A，B两点同时出发，", "\n    每一次移动只能平移一个单位向量，单A，B相遇时", "\n    结束，输出移动的步数。并重复上述操作10000次，", "\n    计算平均步数。*/", "\n    cout << \"测试开始\" << endl;", "\n    int x, y, n, m,i,z;", "\n    float Z = 0;", "\n    x = y = 15;", "\n    z = 0;", "\n    i = 0;", "\n    n = m = 0;", "\n    while (true)", "\n    {", "\n        srand((unsigned)time(NULL));", "\n        switch (rand() % 4 + 1)", "\n        {", "\n        case 1:y = (y + 17) % 16;break;//（x，y）上移", "\n        case 2:x = (x + 17) % 16;break;//（x，y）右移", "\n        case 3:y = (y + 15) % 16;break;//（x，y）下移", "\n        case 4:x = (x + 15) % 16;;break;//（x，y）左移", "\n        }", "\n        switch (rand() % 4 + 1)", "\n        {", "\n        case 1:m = (m + 17) % 16;break;//（n，m）上移", "\n        case 2:n = (n + 17) % 16;break;//（n，m）右移", "\n        case 3:m = (m + 15) % 16;;break;//（n，m）下移", "\n        case 4:n = (n + 15) % 16;;break;//（n，m）左移", "\n        }", "\n        i = i + 1;                //计算移动步数", "\n        if (x == n && y == m) //相遇", "\n        {", "\n            cout << i << \"  \";//输出步数", "\n            z++;              //计算运行次数", "\n            Z = Z + i;        //计算总步数", "\n            i = 0;            //重启", "\n            x = y = 15;       //重启", "\n            n = m = 0;        //重启", "\n        }", "\n        if (z == 10000)       //计算平均值", "\n        {", "\n            cout << \"平均值为\" << Z / z << endl;", "\n            break;            //结束循环", "\n        }", "\n    }", "\n}"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;sum&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; s &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (num &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        s &amp;#43;&amp;#61; num % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        num /&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; s;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num1 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, num2, i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;num2);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        num1 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;(num2) * &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        i&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d:%d\\n&amp;#34;&lt;/span&gt;, i, num1);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (num1 &amp;#61;&amp;#61; num2)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        num2 &amp;#61; num1;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["c语言数字陷阱练习题", ["对任意一个自然数No，先将其各位数字相加求和，再将其和乘以3后加上1，变成一个新自然数N:然后对重复这种操作，可以产生新自然数N:多次重复这种操作，运算结果最终会得到一个固定不变的数Nk，就像掉入一个数字“陷阱”", "本题要求对输入的自然数，给出其掉入“陷阱”的过程", "\n", "我写的代码一直跳不出循环找不到问题的原因", "代码如下：", "\n", "#", "include", "<stdio.h>", "\n", "int", " ", "sum", "(", "int", " num)", "{\n    ", "while", "(num>", "0", "){\n        ", "int", " s=", "0", ";\n        s += num%", "10", ";\n        num /= ", "10", ";\n        ", "return", " s;\n    }\n}\n", "int", " ", "main", "(", "void", ")", "{\n    ", "int", " num1=", "0", ",num2,i=", "0", ";\n    ", "scanf", "(", "\"%d\"", ",&num2);\n    ", "while", "(num1!=num2){\n        num1 = ", "sum", "(num2)*", "3", "+", "1", ";\n        i++;\n        ", "printf", "(", "\"%d:%d\"", ",i,num1);\n        ", "if", "(num1 == num2){\n            ", "break", ";\n        }\n        num2=", "sum", "(num1)*", "3", "+", "1", ";\n        i++;\n        ", "printf", "(", "\"%d:%d\"", ",i,num2);\n    }\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "我试过使用线程号作为序列号。但是。线程号过一段时间会重复。 \r\n  使用系统毫微秒 System.nanoTime()  \r\n  或者\r\n  日志类型+系统当前日期的年月日时分秒 + AtomicLong.incrementAndGet()   这个足够了", "Konwledge_Point": "重复n次操作", "Question": ["日志打印", ["前提条件", "\n1.系统打印了n多种日志。如操作日志。调测日志等", "\n\n", "要求", "\n现在需要做一个日志串行化。", "\n1.每打印一条日志。打印一个序列号。", "\n2. 一个线程内。序列号一致。", "\n3.当前线程的子线程序列号也要一致", "\n\n", "我试过使用线程号作为序列号。但是。线程号过一段时间会重复。", "\n\n", "请各位高手 出下主意"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n \n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;\nusing namespace std;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;{\n    ios::sync&lt;span class=\"hljs-constructor\"&gt;_with_stdio(&lt;span class=\"hljs-params\"&gt;false&lt;/span&gt;)&lt;/span&gt;;\n    cin.tie(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n, m, k;\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; k;\n    vector&amp;lt;tuple&amp;lt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt; &amp;gt; vs;&lt;span class=\"hljs-comment\"&gt;//存询问,离线处理&lt;/span&gt;\n    vector&amp;lt;vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt; &amp;gt; g(n);&lt;span class=\"hljs-comment\"&gt;//邻接表存图&lt;/span&gt;\n    vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt; s(n);&lt;span class=\"hljs-comment\"&gt;//集合&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;) s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;m;i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//存图&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; u, v;\n        cin &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v;\n        u -&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        v -&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        g&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;u&lt;/span&gt;]&lt;/span&gt;.push&lt;span class=\"hljs-constructor\"&gt;_back(&lt;span class=\"hljs-params\"&gt;v&lt;/span&gt;)&lt;/span&gt;;\n        g&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;v&lt;/span&gt;]&lt;/span&gt;.push&lt;span class=\"hljs-constructor\"&gt;_back(&lt;span class=\"hljs-params\"&gt;u&lt;/span&gt;)&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;)&amp;gt; FIND &amp;#61; &lt;span class=\"hljs-literal\"&gt;[&amp;amp;]&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; x){\n        return x&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;x&lt;/span&gt;]&lt;/span&gt; ? x : s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;x&lt;/span&gt;]&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-constructor\"&gt;FIND(&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;])&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//并查集&lt;/span&gt;\n    };\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(k--){\n        &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; s;\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; u, v;\n        cin &amp;gt;&amp;gt; s &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v;\n        u -&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        v -&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        vs.push&lt;span class=\"hljs-constructor\"&gt;_back(&lt;span class=\"hljs-params\"&gt;make_tuple&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;u&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;v&lt;/span&gt;)&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//存询问&lt;/span&gt;\n    }\n    reverse(vs.&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;, vs.&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//将询问倒过来&lt;/span&gt;\n    vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;bool&lt;/span&gt;&amp;gt; ans;&lt;span class=\"hljs-comment\"&gt;//存答案&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(auto i : vs){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(get&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;gt;(i)&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;){&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//cut&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; u &amp;#61; get&amp;lt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;gt;(i);\n            &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; v &amp;#61; get&amp;lt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;gt;(i);&lt;span class=\"hljs-comment\"&gt;//一条边的起始顶点&lt;/span&gt;\n            u &amp;#61; &lt;span class=\"hljs-constructor\"&gt;FIND(&lt;span class=\"hljs-params\"&gt;u&lt;/span&gt;)&lt;/span&gt;;\n            v &amp;#61; &lt;span class=\"hljs-constructor\"&gt;FIND(&lt;span class=\"hljs-params\"&gt;v&lt;/span&gt;)&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(u&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;v) continue;\n            s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;u&lt;/span&gt;]&lt;/span&gt; &amp;#61; v;&lt;span class=\"hljs-comment\"&gt;//并查集基本操作&lt;/span&gt;\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n            &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; u &amp;#61; get&amp;lt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;gt;(i);\n            &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; v &amp;#61; get&amp;lt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;gt;(i);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-constructor\"&gt;FIND(&lt;span class=\"hljs-params\"&gt;u&lt;/span&gt;)&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;FIND(&lt;span class=\"hljs-params\"&gt;v&lt;/span&gt;)&lt;/span&gt;) ans.push&lt;span class=\"hljs-constructor\"&gt;_back(&lt;span class=\"hljs-params\"&gt;true&lt;/span&gt;)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//如果u,v在同一个集合里&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; ans.push&lt;span class=\"hljs-constructor\"&gt;_back(&lt;span class=\"hljs-params\"&gt;false&lt;/span&gt;)&lt;/span&gt;;\n        }\n    }\n    reverse(ans.&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;, ans.&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//答案倒过来&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(auto i : ans){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i) cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;YES\\n&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;NO\\n&amp;#34;&lt;/span&gt;;\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["C++ 无向图 判断连通性", ["问题描述", "给定一个无向图和依次应用于该图的查询。", "有两种类型的查询。", "\n", "cut - 切断图，即删除一条边。", "ask - 检查两个顶点是否连通。", "在所有的切割操作之后，图中将没有留下任何边。", "你要找到所有ask查询的正确答案。", "输入：", "• 一行包括n,m和k (1 ≤ n ≤ 5 · 10^4, 0 ≤ m ≤ k ≤ 1.5 · 10^5) 分别代表顶点，边以及查询的数量。", "• m行描述图的边，第i行包括ui 和 vi(1 ≤ ui, vi ≤ n)：是与第i条边相联系的顶点的指数，该图不包含循环和重复的边。", "• k行查询。", "– 一个 cut-类型的查询需输入： “cut u v” (1 ≤ u, v ≤ n), 代表要切掉u和v之间的线。", "– 一个 ask-类型的查询需输入： “ask u v” (1 ≤ u, v ≤ n), 代表你要查询u和v此时是否处于相同的连接部分，也就是连通性。", "注意：可以保证每条边在cut查询中只出现一次", "\n", "输出：", "对于每一个ask查询，如果顶点在同一个连通的组件中，则输出答案 “YES”，否则输出 “NO”。", "答案的顺序应与输入中的ask查询顺序相同。", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n \n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;block&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; value;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; count;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; begin;\n};\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    \n    vector&amp;lt;block&amp;gt; myblocks;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; intput &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;lt;&amp;#61;n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;intput);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;#61;&amp;#61; myblocks.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;())\n        {\n            block first_block;\n            first_block.value &amp;#61; intput;\n            first_block.count &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            first_block.begin &amp;#61; i;\n            myblocks.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(first_block);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            block &amp;amp;cur_block &amp;#61; myblocks.&lt;span class=\"hljs-built_in\"&gt;back&lt;/span&gt;();\n \n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (intput &amp;#61;&amp;#61; cur_block.value)\n            {\n                cur_block.count&amp;#43;&amp;#43;;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            {\n                block new_block;\n                new_block.value &amp;#61; intput;\n                new_block.begin &amp;#61; i;\n                new_block.count &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                myblocks.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(new_block);\n            }\n        }\n        \n    }\n \n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; !&amp;#61; myblocks.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;())\n    {\n        vector&amp;lt;block&amp;gt;::iterator iter &amp;#61; myblocks.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;();\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cur_value &amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (iter !&amp;#61; myblocks.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;())\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#61;&amp;#61;(*iter).count)\n            {\n                iter &amp;#61; myblocks.&lt;span class=\"hljs-built_in\"&gt;erase&lt;/span&gt;(iter);\n                &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (cur_value !&amp;#61; (*iter).value)\n                {\n                    cout &amp;lt;&amp;lt; (*iter).begin &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n                    cur_value &amp;#61; (*iter).value;\n                    (*iter).begin&amp;#43;&amp;#43;;\n                    (*iter).count--;\n                }\n                iter&amp;#43;&amp;#43;;\n            }\n        }    \n        cout &amp;lt;&amp;lt; endl;\n    }\n \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["2021年 CCF入门", ["问题遇到的现象和发生背景", "\n", "CCF 入门（我咋那么菜）小熊的果篮", "小熊的水果店里摆放着一排 n 个水果。每个水果只可能是苹果或桔子，从左到右依次用正整数 1 2 3 n 编号。连续排在一起的同一种水果称为一个“块”。", "小熊要把这一排水果挑到若干个果篮里，具体方法是：每次都把每一个“块”中最左边的水果同时挑出，组成一个果篮。重复这一操作，直至水果用完。注意，每次挑完一个果篮后，“块”可能会发生变化。比如两个苹果“块”之间的唯一桔子被挑走后，两个苹果“块”就变成了一个“块”。请帮小熊计算每个果篮里包含的水果。", "\n", "问题相关代码，请勿粘贴截图", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<cstring>", "\n", "#", "include", "<string>", "\n", "#", "include", "<iomanip>", "\n", "#", "include", "<cstdio>", "\n", "#", "include", "<cmath>", "\n", "#", "include", "<algorithm>", "\n", "#", "include", "<cstdlib>", "\n", "#", "include", "<deque>", "\n", "using", " ", "namespace", " std;\n", "int", " n,a[", "10001", "],l[", "10001", "],r[", "10001", "];\ndeque<", "int", "> b;\n", "int", " ", "main", "()", " \n", "{\n    ", "scanf", "(", "\"%d\"", ",&n);\n    a[", "0", "]=a[n+", "1", "]=", "-1", ";\n    r[", "0", "]=", "1", ";\n    l[n+", "1", "]=n;\n    ", "for", "(", "int", " i=", "1", ";i<=n;i++) \n    {\n        ", "scanf", "(", "\"%d\"", ",&a[i]);\n        ", "if", "(a[i]!=a[i", "-1", "])\n        {\n            b.", "push_back", "(i);\n        }\n        l[i]=i", "-1", ",r[i]=i+", "1", ";\n    }\n    ", "while", "(r[", "0", "]!=n+", "1", ") \n    {\n        deque<", "int", "> t;\n        ", "for", "(", "int", " i=", "0", ";i<b.", "size", "();i++) \n        {\n            ", "printf", "(", "\"%d \"", ",b[i]);\n            ", "int", " u=l[b[i]],v=r[b[i]];\n            r[u]=v;\n            l[v]=u;\n            ", "if", "(a[b[i]]!=a[u]&&a[b[i]]==a[v])\n            {\n                t.", "push_back", "(v); \n            }\n        }\n        ", "printf", "(", "\"\\n\"", ");\n        b=t;\n    }\n    ", "return", " ", "0", ";\n}\n\n", "\n", "运行结果及报错内容", "\n", "40分 运行错误", "\n", "我想要达到的结果"]], "Tag": "程序设计"}
{"Answer": "用一个任务队列保存所有任务，那么无论哪个线程拿到任务后将任务弹出队列，其他线程也就不会拿到重复任务，而且不需要去查询与修改状态。这样的同步队列可以自己去实现，也可以直接使用Concurrent包中提供的，建议使用jdk提供的，这样效率一般是没有问题的，如果还觉得效率不够，可以自己去实现队列，参考CAS或者其他的无锁思想", "Konwledge_Point": "重复n次操作", "Question": ["javaweb多线程并发如何处理？如何保证多线程安全？", ["大家好，感谢大家可以讨论、回答本帖。本人菜鸟一个，也有多年没开发了，也没实际开发过，我所问的是按照我自己的个人想法来提问的，所以很多问题说的不专业，还请谅解。", "\n\n", "    任务需求：\n", "\n\n", "任务管理系统，是一个系统任务平台。", "\n所遇到的问题是。在这个任务系统中有N个任务，那么也有N个人来抢任务做。", "\n最开始的任务状态是0（没有进行操作）1表示已经进行操作。", "\n\n", "任务流程", "\n            ---->>", "\n 客户端请求任务----->>系统查询是否有状态为0的任务----->查询到状态修改为1----->>x返回给客户端。", "\n\n", "那么问题在来了，由于系统的并发量很大。当第一个请求拿到一个为0的任务后还没来得及修改第二个或者第N个请求也拿到了相同的任务，那就造成了重复任务了。", "\n\n", "解决方法：", "\n     synchronized ： ", "\n                效率极低，容易造成系统崩溃。", "\n\n", " 缓存欲加载，提前加载好预定数量到内存中，查询直接查询缓存数据\n        缺陷：无法做分布式，或者来说 做分布式比较麻烦。\n\n\n    想请教各位大佬，这种业务应该怎么做。想了很久也没想出好的方案，该系统考虑做分布式。\n\n\n    该系统一秒可能会有几千个请求。\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;帮你重新弄了下&amp;#xff0c;只是你有写函数并未实现。所以我注释起来了。你写完函数再放开&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdlib.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;conio.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;iostream&amp;gt;\n#define MAX_NAME &lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;         \n#define MAX_DETAIL &lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;      \n#define M &lt;span class=\"hljs-number\"&gt;155&lt;/span&gt;            \n#define N &lt;span class=\"hljs-number\"&gt;155&lt;/span&gt;           \nusing namespace std;\n\nvoid add&lt;span class=\"hljs-constructor\"&gt;_income()&lt;/span&gt;;\nvoid search&lt;span class=\"hljs-constructor\"&gt;_income()&lt;/span&gt;;\nvoid change&lt;span class=\"hljs-constructor\"&gt;TotalIncomeMoneyTOSelect(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;usageJudge&lt;/span&gt;)&lt;/span&gt;;\nvoid select&lt;span class=\"hljs-constructor\"&gt;IncomeByUsage()&lt;/span&gt;;\nvoid income&lt;span class=\"hljs-constructor\"&gt;Percent()&lt;/span&gt;;\nvoid printf&lt;span class=\"hljs-constructor\"&gt;SingleIncome(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;)&lt;/span&gt;;\n\nvoid add&lt;span class=\"hljs-constructor\"&gt;_payout()&lt;/span&gt;;\nvoid search&lt;span class=\"hljs-constructor\"&gt;_payout()&lt;/span&gt;;\nvoid change&lt;span class=\"hljs-constructor\"&gt;TotalPaymentMoneyTOSelect(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;usageJudge&lt;/span&gt;)&lt;/span&gt;;\nvoid select&lt;span class=\"hljs-constructor\"&gt;PaymentByUsage()&lt;/span&gt;;\nvoid payment&lt;span class=\"hljs-constructor\"&gt;Percent()&lt;/span&gt;;\nvoid printf&lt;span class=\"hljs-constructor\"&gt;SinglePayment(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;)&lt;/span&gt;;\nvoid menu&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\nvoid all&lt;span class=\"hljs-constructor\"&gt;PayoutMoneyCount()&lt;/span&gt;;\nvoid all&lt;span class=\"hljs-constructor\"&gt;IncomeMoneyCount()&lt;/span&gt;;\nvoid read&lt;span class=\"hljs-constructor\"&gt;Data()&lt;/span&gt;;\nvoid quit&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; number&lt;span class=\"hljs-constructor\"&gt;Judge()&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; usage&lt;span class=\"hljs-constructor\"&gt;Judge()&lt;/span&gt;;\n\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; payment {\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; id;\n    &lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt; money;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; year;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; month;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; day;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; usage;\n    &lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt; percent;\n}payment&lt;span class=\"hljs-literal\"&gt;[M]&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; comement {\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; id;\n    &lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt; money;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; year;&lt;span class=\"hljs-comment\"&gt;//年&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; month;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; day;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; usage;\n    &lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt; percent;\n}comement&lt;span class=\"hljs-literal\"&gt;[N]&lt;/span&gt;;\n\n\nconst &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; fileName&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;d:\\\\test.txt&amp;#34;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//文件存储路径&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; currentMaxId;&lt;span class=\"hljs-comment\"&gt;//当前文件中的最大id&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n;&lt;span class=\"hljs-comment\"&gt;///当前文件中记录的数目&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; m;\n\n&lt;span class=\"hljs-comment\"&gt;//收入数据&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt; totalIncomeMoney &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt; istudyMoney &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt; icateringMoney &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt; iclothesMoney &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt; irecreationMoney &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; selectIncomeUsage &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n&lt;span class=\"hljs-comment\"&gt;//支出数据&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt; totalPayoutMoney &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt; pstudyMoney &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt; pcateringMoney &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt; pclothesMoney &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt; precreationMoney &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n\nvoid read&lt;span class=\"hljs-constructor\"&gt;Data()&lt;/span&gt;\n{\n    FILE* fp;&lt;span class=\"hljs-comment\"&gt;///定义文件指针&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((fp &amp;#61; fopen(fileName, &lt;span class=\"hljs-string\"&gt;&amp;#34;r&amp;#34;&lt;/span&gt;))&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;NULL)\n    {\n        fp &amp;#61; fopen(fileName, &lt;span class=\"hljs-string\"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (n &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; !feof(fp); n&amp;#43;&amp;#43;)\n        {\n            fscanf&lt;span class=\"hljs-constructor\"&gt;_s(&lt;span class=\"hljs-params\"&gt;fp&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;%d %f %d %d %d %d %d %f %d %d %d %d\\n&amp;#34;&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-params\"&gt;payment&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;].&lt;span class=\"hljs-params\"&gt;id&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-params\"&gt;payment&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;].&lt;span class=\"hljs-params\"&gt;money&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-params\"&gt;payment&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;].&lt;span class=\"hljs-params\"&gt;year&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-params\"&gt;payment&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;].&lt;span class=\"hljs-params\"&gt;month&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-params\"&gt;payment&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;].&lt;span class=\"hljs-params\"&gt;day&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-params\"&gt;payment&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;].&lt;span class=\"hljs-params\"&gt;usage&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-params\"&gt;comement&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;].&lt;span class=\"hljs-params\"&gt;id&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-params\"&gt;comement&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;].&lt;span class=\"hljs-params\"&gt;money&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-params\"&gt;comement&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;].&lt;span class=\"hljs-params\"&gt;year&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-params\"&gt;comement&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;].&lt;span class=\"hljs-params\"&gt;month&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-params\"&gt;comement&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;].&lt;span class=\"hljs-params\"&gt;day&lt;/span&gt;, &amp;amp;&lt;span class=\"hljs-params\"&gt;comement&lt;/span&gt;[&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;].&lt;span class=\"hljs-params\"&gt;usage&lt;/span&gt;)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;///将结构体里的信息写入文本&lt;/span&gt;\n        } &lt;span class=\"hljs-comment\"&gt;///保存文件数据到结构体&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            currentMaxId &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            currentMaxId &amp;#61; payment&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;n&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;.id;\n    }\n    fclose(fp);\n}\n\nvoid quit&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; number&lt;span class=\"hljs-constructor\"&gt;Judge()&lt;/span&gt;\n{\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; usage&lt;span class=\"hljs-constructor\"&gt;Judge()&lt;/span&gt;\n{\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n\n&lt;span class=\"hljs-comment\"&gt;//菜单选项&lt;/span&gt;\nvoid menu&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; flag &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//中断程序的标志&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (flag)\n    {\n        &lt;span class=\"hljs-comment\"&gt;//readData();//重新加载文本数据    //这些函数并未实现&amp;#xff0c;先注释起来&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//allPayoutMoneyCount();//计算当前金额总数&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//allIncomeMoneyCount();&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//system(&amp;#34;cls&amp;#34;);//清屏操作&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//int selectOPS;&lt;/span&gt;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |-------------------------------------------------|\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |----------- 欢迎进入个人财务管理系统 ----------- |\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |-------------------------------------------------|\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |\\t\\tIncome                                       |\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |\\t\\t1.添加收入                                   |\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |\\t\\t2.查询收入明细                               |\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |\\t\\t3.按类别查看收入                             |\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |\\t\\t4.统计收入比例                               |\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |-------------------------------------------------|\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |\\t\\tPayout                                       |\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |\\t\\t5.添加支出                                   |\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |\\t\\t6.查询支出明细                               |\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |\\t\\t7.按类别查看支出                             |\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |\\t\\t8.统计支出比例                               |\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |-------------------------------------------------|\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |\\t\\t0.退出系统                                   |\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |-------------------------------------------------|\\n&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);   &lt;span class=\"hljs-comment\"&gt;//这个阻塞下&amp;#xff0c;不然会一直运行&lt;/span&gt;\n\n        &lt;span class=\"hljs-comment\"&gt;/*printf(&amp;#34;请选择(0-8):[ ]\\b\\b&amp;#34;);\n        selectOPS &amp;#61; numberJudge();\n        if (selectOPS &amp;lt; 0 || selectOPS&amp;gt;8)///错误输入&amp;#xff0c;重新获取输入\n        {\n            printf(&amp;#34;请确定好您要选择的服务&amp;#xff0c;重新输入&amp;#xff01;&amp;#xff01;&amp;#xff01;\\n&amp;#34;);\n            system(&amp;#34;pause&amp;#34;);\n            menu();\n        }\n        else///正确输入\n            switch (selectOPS)///根据输入实现相应函数调用\n            {\n            case 1: add_income();\n                break;\n\n            case 2:search_income();\n                break;\n\n            case 3:selectIncomeByUsage();\n                break;\n\n            case 4:incomePercent();\n                break;\n\n            case 5:add_payout();\n                break;\n\n            case 6:search_payout();\n                break;\n\n            case 7:selectPaymentByUsage();\n                break;\n\n            case 8:paymentPercent();\n                break;\n\n            case 0:flag &amp;#61; 0;\n                break;\n            }*/&lt;/span&gt;\n    }\n}\n\nvoid all&lt;span class=\"hljs-constructor\"&gt;PayoutMoneyCount()&lt;/span&gt;\n{\n}\n\nvoid all&lt;span class=\"hljs-constructor\"&gt;IncomeMoneyCount()&lt;/span&gt;\n{\n}\n\n&lt;span class=\"hljs-comment\"&gt;/*内容过长无法放入*/&lt;/span&gt;\n\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n    &lt;span class=\"hljs-comment\"&gt;//readData();///读取文件数据&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; passw&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;314&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//用来记录登录次数&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (count &amp;lt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; test&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]&lt;/span&gt;;\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入密码-&amp;gt;&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-comment\"&gt;//scanf_s(&amp;#34;%s&amp;#34;, &amp;amp;test, 10);&lt;/span&gt;\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &amp;amp;test);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (strcmp(passw, test)&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n             menu&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;///显示主菜单&lt;/span&gt;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;密码错误\\n&amp;#34;&lt;/span&gt;);\n            count&amp;#43;&amp;#43;;\n        }\n\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;count)\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;退出程序\\n&amp;#34;&lt;/span&gt;);\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\nvoid add&lt;span class=\"hljs-constructor\"&gt;_income()&lt;/span&gt;\n{\n}\n\nvoid search&lt;span class=\"hljs-constructor\"&gt;_income()&lt;/span&gt;\n{\n}\n\nvoid change&lt;span class=\"hljs-constructor\"&gt;TotalIncomeMoneyTOSelect(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;usageJudge&lt;/span&gt;)&lt;/span&gt;\n{\n}\n\nvoid select&lt;span class=\"hljs-constructor\"&gt;IncomeByUsage()&lt;/span&gt;\n{\n}\n\nvoid income&lt;span class=\"hljs-constructor\"&gt;Percent()&lt;/span&gt;\n{\n}\n\nvoid printf&lt;span class=\"hljs-constructor\"&gt;SingleIncome(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;)&lt;/span&gt;\n{\n}\n\nvoid add&lt;span class=\"hljs-constructor\"&gt;_payout()&lt;/span&gt;\n{\n}\n\nvoid search&lt;span class=\"hljs-constructor\"&gt;_payout()&lt;/span&gt;\n{\n}\n\nvoid change&lt;span class=\"hljs-constructor\"&gt;TotalPaymentMoneyTOSelect(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;usageJudge&lt;/span&gt;)&lt;/span&gt;\n{\n}\n\nvoid select&lt;span class=\"hljs-constructor\"&gt;PaymentByUsage()&lt;/span&gt;\n{\n}\n\nvoid payment&lt;span class=\"hljs-constructor\"&gt;Percent()&lt;/span&gt;\n{\n}\n\nvoid printf&lt;span class=\"hljs-constructor\"&gt;SinglePayment(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;)&lt;/span&gt;\n{\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/427517582556185.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["vs中代码没有报错，但是代码没有运行完全", ["一、问题遇到的现象和发生背景", "代码没有报错，但密码输入成功后没有继续运行，只是一直重复上一步", "\n", " 二、相关代码", "\n", "#", "include", " <stdio.h>\n#", "include", " <stdlib.h>\n#", "include", " <conio.h>\n#", "include", " <", "string", ".h>\n#", "include", " <iostream>\n#define MAX_NAME ", "11", "         \n#define MAX_DETAIL ", "21", "      \n#define M ", "155", "            \n#define N ", "155", "           \nusing namespace std;\n\nvoid add", "_income()", ";                     \nvoid search", "_income()", ";                   \nvoid change", "TotalIncomeMoneyTOSelect(", "int", " ", "usageJudge", ")", ";\nvoid select", "IncomeByUsage()", ";             \nvoid income", "Percent()", ";                   \nvoid printf", "SingleIncome(", "int", " ", "i", ")", ";         \n\nvoid add", "_payout()", ";                      \nvoid search", "_payout()", ";                    \nvoid change", "TotalPaymentMoneyTOSelect(", "int", " ", "usageJudge", ")", ";\nvoid select", "PaymentByUsage()", ";            \nvoid payment", "Percent()", ";                  \nvoid printf", "SinglePayment(", "int", " ", "p", ")", ";         \nvoid menu", "()", ";\nvoid all", "PayoutMoneyCount()", ";\nvoid all", "IncomeMoneyCount()", ";\nvoid read", "Data()", ";\nvoid quit", "()", ";\n", "int", " number", "Judge()", ";\n", "int", " usage", "Judge()", ";\n\n", "struct", " payment {\n    ", "int", " id;\n    ", "float", " money;\n    ", "int", " year;\n    ", "int", " month;\n    ", "int", " day;\n    ", "int", " usage;\n    ", "float", " percent;\n}payment", "[M]", ";\n", "struct", " comement {\n    ", "int", " id;\n    ", "float", " money;\n    ", "int", " year;", "//年", "\n    ", "int", " month;\n    ", "int", " day;\n    ", "int", " usage;\n    ", "float", " percent;\n}comement", "[N]", ";\n\n\nconst ", "char", " fileName", "[]", " = ", "\"d:\\\\test.txt\"", ";", "//文件存储路径", "\n", "int", " currentMaxId;", "//当前文件中的最大id", "\n", "int", " n;", "///当前文件中记录的数目", "\n", "int", " m;\n\n", "//收入数据", "\n", "float", " totalIncomeMoney = ", "0", ";\n", "float", " istudyMoney = ", "0", ";\n", "float", " icateringMoney = ", "0", ";\n", "float", " iclothesMoney = ", "0", ";\n", "float", " irecreationMoney = ", "0", ";\n", "int", " selectIncomeUsage = ", "0", ";\n\n", "//支出数据", "\n", "float", " totalPayoutMoney = ", "0", ";\n", "float", " pstudyMoney = ", "0", ";\n", "float", " pcateringMoney = ", "0", ";\n", "float", " pclothesMoney = ", "0", ";\n", "float", " precreationMoney = ", "0", ";\n\n\nvoid read", "Data()", "\n{\n    FILE* fp;", "///定义文件指针", "\n    ", "if", " ((fp = fopen(fileName, ", "\"r\"", "))", " == ", "NULL)\n    {\n        fp = fopen(fileName, ", "\"w\"", ");\n    }\n    ", "else", "\n    {\n        ", "for", " (n = ", "0", "; !feof(fp); n++)\n        {\n            fscanf", "_s(", "fp", ", ", "\"%d %f %d %d %d %d %d %f %d %d %d %d\\n\"", ", &", "payment", "[", "n", "].", "id", ", &", "payment", "[", "n", "].", "money", ", &", "payment", "[", "n", "].", "year", ", &", "payment", "[", "n", "].", "month", ", &", "payment", "[", "n", "].", "day", ", &", "payment", "[", "n", "].", "usage", ", &", "comement", "[", "n", "].", "id", ", &", "comement", "[", "n", "].", "money", ", &", "comement", "[", "n", "].", "year", ", &", "comement", "[", "n", "].", "month", ", &", "comement", "[", "n", "].", "day", ", &", "comement", "[", "n", "].", "usage", ")", ";", "///将结构体里的信息写入文本", "\n        } ", "///保存文件数据到结构体", "\n        ", "if", " (n", " == ", "0", ")\n            currentMaxId = ", "0", ";\n        ", "else", "\n            currentMaxId = payment", "[", "n", " - ", "1", "]", ".id;\n    }\n    fclose(fp);\n}\n\n\n\n\n", "//菜单选项", "\nvoid menu", "()", "\n{\n    ", "int", " flag = ", "0", ";", "//中断程序的标志", "\n    ", "while", " (flag)\n    {\n        read", "Data()", ";", "//重新加载文本数据", "\n        all", "PayoutMoneyCount()", ";", "//计算当前金额总数", "\n        all", "IncomeMoneyCount()", ";\n        system(", "\"cls\"", ");", "//清屏操作", "\n        ", "int", " selectOPS;\n        cout << ", "\" |-------------------------------------------------|\\n\"", " << endl;\n        cout << ", "\" |----------- 欢迎进入个人财务管理系统 ----------- |\\n\"", " << endl;\n        cout << ", "\" |-------------------------------------------------|\\n\"", " << endl;\n        cout << ", "\" |\\t\\tIncome                                       |\\n\"", " << endl;\n        cout << ", "\" |\\t\\t1.添加收入                                   |\\n\"", " << endl;\n        cout << ", "\" |\\t\\t2.查询收入明细                               |\\n\"", " << endl;\n        cout << ", "\" |\\t\\t3.按类别查看收入                             |\\n\"", " << endl;\n        cout << ", "\" |\\t\\t4.统计收入比例                               |\\n\"", " << endl;\n        cout << ", "\" |-------------------------------------------------|\\n\"", " << endl;\n        cout << ", "\" |\\t\\tPayout                                       |\\n\"", " << endl;\n        cout << ", "\" |\\t\\t5.添加支出                                   |\\n\"", " << endl;\n        cout << ", "\" |\\t\\t6.查询支出明细                               |\\n\"", " << endl;\n        cout << ", "\" |\\t\\t7.按类别查看支出                             |\\n\"", " << endl;\n        cout << ", "\" |\\t\\t8.统计支出比例                               |\\n\"", " << endl;\n        cout << ", "\" |-------------------------------------------------|\\n\"", " << endl;\n        cout << ", "\" |\\t\\t0.退出系统                                   |\\n\"", " << endl;\n        cout << ", "\" |-------------------------------------------------|\\n\"", " << endl;\n\n        printf(", "\"请选择(0-8):[ ]\\b\\b\"", ");\n        selectOPS = number", "Judge()", ";\n        ", "if", " (selectOPS < ", "0", " || ", "selectOPS>", "8", ")", "///错误输入，重新获取输入", "\n        {\n            printf(", "\"请确定好您要选择的服务，重新输入！！！\\n\"", ");\n            system(", "\"pause\"", ");\n            menu", "()", ";\n        }\n        ", "else", "///正确输入", "\n            switch (selectOPS)", "///根据输入实现相应函数调用", "\n            {\n            case ", "1", ": add", "_income()", ";\n                break;\n\n            case ", "2", ":search", "_income()", ";\n                break;\n\n            case ", "3", ":select", "IncomeByUsage()", ";\n                break;\n\n            case ", "4", ":income", "Percent()", ";\n                break;\n\n            case ", "5", ":add", "_payout()", ";\n                break;\n\n            case ", "6", ":search", "_payout()", ";\n                break;\n\n            case ", "7", ":select", "PaymentByUsage()", ";\n                break;\n\n            case ", "8", ":payment", "Percent()", ";\n                break;\n\n            case ", "0", ":flag=", "0", ";\n                break;\n            }\n    }\n}\n\n", "/*内容过长无法放入*/", "\n\n\n", "int", " main", "()", "\n{\n    read", "Data()", ";", "///读取文件数据", "\n    ", "char", " passw", "[]", " = ", "\"314\"", ";\n    ", "char", " test", "[", "20", "]", " = ", "\"0\"", ";\n    ", "int", " count = ", "0", ";", "//用来记录登录次数", "\n    \n    ", "while", " (count < ", "3", ")\n        {\n        printf(", "\"请输入密码->\"", ");\n        scanf", "_s(", "\"%s\"", ", &", "test", ",4)", ";\n        ", "if", " (strcmp(passw, test)", " == ", "0", ")\n        {\n            void menu", "()", ";", "///显示主菜单", "\n        }\n        ", "else", "\n        {\n            printf(", "\"密码错误\\n\"", ");\n            count++;\n        }\n    \n    }\n    ", "if", " (", "3", " == ", "count)\n    {\n        printf(", "\"退出程序\\n\"", ");\n    }\n    return ", "0", ";\n}\n\n", "\n", " 三、运行结果", "\n", " 四、我的解答思路和尝试过的方法 ", "\n", "1、把上面的main{}代换成", "\n", "int ", "main", "()\n{\n    readData();", "///读取文件数据", "\n    ", "menu", "();", "///显示主菜单", "\n}\n\n", "\n", "但是结果运行窗口没有任何显示", "\n", "2、我把void menu 放到main{}，结果提示报错", "\n", "五、 我想要达到的结果", "\n", "通过密码正确，正常进入 menu"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;错误比较多&amp;#xff0c;10元悬赏都少啊&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;node&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; data;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;node&lt;/span&gt;* next;\n}NODE;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; NODE *LinkList;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Option&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;1.链表的创建\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;2.链表的插入\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;3.链表的删除\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;4.链表的查找\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;0.退出\\n&amp;#34;&lt;/span&gt;);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LinkList Head)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(Head-&amp;gt;next!&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n    {\n        Head&amp;#61;Head-&amp;gt;next;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,Head-&amp;gt;data);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;CreateLinkList&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LinkList head)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(head-&amp;gt;next!&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请勿重复创建链表&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入5个数&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    LinkList end &amp;#61; head;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        NODE *NewNode&amp;#61;(LinkList)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(NODE));\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;NewNode-&amp;gt;data);\n        NewNode-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n        end-&amp;gt;next&amp;#61;NewNode;\n        end &amp;#61; NewNode;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;Print&lt;/span&gt;(head);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;InsertLinkList&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LinkList head)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(head-&amp;gt;next&amp;#61;&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请先创建链表&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;Print&lt;/span&gt;(head);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; pos,num;\n    LinkList Link&amp;#61;head;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要插入的位置和数值:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;pos,&amp;amp;num);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(Link-&amp;gt;next!&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;&amp;amp;&amp;amp;--pos)\n        Link&amp;#61;Link-&amp;gt;next;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!pos)\n    {\n        NODE *NewNode&amp;#61;(LinkList)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(NODE));\n        NewNode-&amp;gt;data&amp;#61;num;\n        NewNode-&amp;gt;next&amp;#61;Link-&amp;gt;next;\n        Link-&amp;gt;next &amp;#61; NewNode;\n        &lt;span class=\"hljs-built_in\"&gt;Print&lt;/span&gt;(head);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;要插入的位置不存在&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;DeleteLinkList&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LinkList head)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(head-&amp;gt;next&amp;#61;&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) &lt;span class=\"hljs-comment\"&gt;//判断链表是否存在&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请先创建链表&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;Print&lt;/span&gt;(head); &lt;span class=\"hljs-comment\"&gt;//输出先前链表&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; pos;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要删除的位置:\\n&amp;#34;&lt;/span&gt;);\n    LinkList Link&amp;#61;head;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;pos);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(Link-&amp;gt;next!&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;&amp;amp;&amp;amp;-- pos) &lt;span class=\"hljs-comment\"&gt;//找到删除的位置&lt;/span&gt;\n        Link&amp;#61;Link-&amp;gt;next;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!pos)\n    {\n        Link-&amp;gt;next&amp;#61;Link-&amp;gt;next-&amp;gt;next;\n        &lt;span class=\"hljs-built_in\"&gt;Print&lt;/span&gt;(head);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;要插入的位置不存在&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;SearchLinkList&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(LinkList head)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(head-&amp;gt;next&amp;#61;&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) &lt;span class=\"hljs-comment\"&gt;//判断链表是否存在&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请先创建链表&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;Print&lt;/span&gt;(head);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; pos;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要查找数的位置&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;pos);\n    LinkList Link&amp;#61;head;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(Link-&amp;gt;next!&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;&amp;amp;&amp;amp;-- pos) &lt;span class=\"hljs-comment\"&gt;//找到查找的位置&lt;/span&gt;\n        Link&amp;#61;Link-&amp;gt;next;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!pos)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;该位置上的数为%d\\n&amp;#34;&lt;/span&gt;,Link-&amp;gt;next-&amp;gt;data);\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;要查找的数不存在&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Choose&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;span class=\"hljs-comment\"&gt;//选择函数&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请选择要进行的操作&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;k);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; k;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; argc, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    LinkList head;\n    head&amp;#61;(LinkList)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(NODE)); &lt;span class=\"hljs-comment\"&gt;//创建链表并分配地址&lt;/span&gt;\n    head-&amp;gt;data&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    head-&amp;gt;next&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;Option&lt;/span&gt;();\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;Choose&lt;/span&gt;())\n        {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;CreateLinkList&lt;/span&gt;(head);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;InsertLinkList&lt;/span&gt;(head);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;DeleteLinkList&lt;/span&gt;(head);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;: &lt;span class=\"hljs-built_in\"&gt;SearchLinkList&lt;/span&gt;(head);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt; :&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入错误&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["c语言链表的创建插入 删除 查找", ["运行不了", "#include <stdio.h>", "#include <stdlib.h>", "typedef struct node", "{", " int data;", " struct node* next;", "}NODE;", " typedef NODE*LinkList;", "void Option()", "{", " printf(\"1.链表的创建\\n\");", " printf(\"2.链表的插入\\n\");", " printf(\"3.链表的删除\\n\");", " printf(\"4.链表的查找\\n\");", " printf(\"0.退出\\n\");", "}", "\n", "void Print(LinkList Head)", "{", " while(Head->next!=NULL)", " {", "  Head=Head->next;", "  printf(\"%d\",Head->data);", " }", " printf(\"\\n\");", "}", "\n", "void CreateLinkList(LinkList *head)", "{", " system(\"cls\");", " if(head->next!=NULL)", " {", "  printf(\"请勿重复创建链表！\\n\");", "  return;", " }", " else", "  printf(\"请输入5个数：\\n\");", " LinkList end;", " head=end=(LinkList)malloc(sizeof(NODE));", " NODE *NewNode;", " for(int i=1;i<=5;i++)", " {", "  NewNode=(LinkList)malloc(sizeof(NODE));", "  scanf(\"%d\",NewNode->data);", "  end->next=NewNode;", "  end=end->next;", " }", " end->next=NULL;", "}", "\n", "void InsertLinkList(LinkList *head)", "{", " system(\"cls\");", " if(head->next==NULL)", " {", "  printf(\"请先创建链表！\\n\");", "  return;", " }", " Print(head);", " int pos,num;", " LinkList Link=head;", " printf(\"请输入要插入的位置和数值:\\n\");", " scanf(\"%d%d\",&pos,&num);", " while(Link->next!=NULL&&--pos)", "  Link=Link->next;", " if(!pos)", " {", "  NODE *NewNode;", "  NewNode=(LinkList)malloc(sizeof(NODE));", "  NewNode->data=num;", "  NewNode->next=Link->next;", "  Print(head);", " }", " else", "  printf(\"要插入的位置不存在！\\n\");", " printf(\"\\n\");", "}", "void DeleteLinkList(LinkList &head)", "{", " system(\"cls\");", " if(head->next==NULL)    //判断链表是否存在", " {", "  printf(\"请先创建链表！\\n\");", "  return;", " }", " Print(head);    //输出先前链表", " int pos;", " printf(\"请输入要删除的位置:\\n\");", " LinkList Link=head;", " scanf(\"%d\",&pos);", " whlie(Link->next!=NULL&&-- pos)    //找到删除的位置", "  Link=Link->next;", " if(!pos)", " {", "  Link->next=Link->next->next;", "  Print(head);", " }", " else", "  printf(\"要插入的位置不存在！\\n\");", " printf(\"\\n\");", "}", "void SearchLinkList(LinkList &head)", "{", " system(\"cls\");", " if(head->next==NULL)    //判断链表是否存在", " {", "  printf(\"请先创建链表！\\n\");", "  return;", " }", " Print(head);", " int pos;", " printf(\"请输入要查找数的位置：\\n\");", " scanf(\"%d\",&pos);", " LinkList Link=head;", " while(Link->next!=NULL&&-- pos)    //找到查找的位置", "  Link=Link->next;", " if(!pos)", "  printf(\"该位置上的数为%d\",Link->next->data);", " else", "  printf(\"要查找的数不存在！\\n\");", " printf(\"\\n\");", "}", "\n", "int Choose()    //选择函数", "{", " int k;", " printf(\"请选择要进行的操作：\\n\");", " scanf(\"%d\",&k);", " return k;", "}", "int main(int argc, char *argv[])", "{", " LinkList head;", " head=(LinkList)malloc(sizeof(NODE));      //创建链表并分配地址", " head->data=NULL;", " head->next=NULL;", " while(1)", " {", "  Option();", "  switch(Choose())", "  {", "   case 1:CreateLinkList(head);", "     break;", "   case 2:InsertLinkList(head);", "     break;", "   case 3:DeleteLinkList(head);", "     break;", "   case 4: SearchLinkList(head);", "     break;", "   default :printf(\"输入错误！\\n\");", "     break;", "   case 0:return 0;", "  }", " }", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/597697583536136.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["for嵌套循环为何不执行", ["建立一个一维数组a，数组要预留足够的长度，以完成以下任务：", "（1）    自动生成斐波那契数列前10项的值，存入数组a，并输出。（斐波那契数列前两项的值为1，从第三项开始，每一项的值是前两项值的和）；", "（2）    插入操作：将键盘输入的一个整数插入数组a，使得数组a中的元素仍有序。要求可重复插入数据直到数组空间用完，或者用户不再需要插入数据为止", "\n", "代码如下：", "\n", "#include\"stdio.h\"", "\n\nint main()\n{\n    int a[100],", "i", "=0,b=0,j=0,k=0,o,n;char m;\n    a[0]=1;a[1]=1;\n    ", "for", "(", "i", "=1;i<=8;i++)\n        a[i+1]=a[i-1]+a[i];\n    ", "for", "(", "i", "=0;i<=9;i++)\n        printf(", "\"%d \"", ",a[i]);\n    ", "for", "(", "n", "=10;;n++)\n    {\n    printf(", "\"请输入待插入的数据：\"", ");\n    scanf(", "\"%d\"", ",&b);\n    a[n]=b;\n    ", "for", "(", "i", "=0;i<n-1;i++)\n        ", "for", "(", "j", "=0;j<=n-i;j++)\n        ", "if", "(a[j+1]>a[j]){", "k", "=a[j];a[j]=a[j+1];a[j]=k;}\n    printf(", "\"插入数据%d后的有序数列：\\n\"", ",b);\n    ", "for", "(", "o", "=0;o<=n;o++)\n        printf(", "\"%d \"", ",a[o]);\n    putchar(", "'\\n'", ");\n    printf(", "\"是否继续插入数据？（y/n）:\"", ");\n    scanf(", "\"%c\"", ",&m);\n    ", "if", "(", "m", "=", "'y'", ")continue;\n    ", "else", " break;\n    }\n}\n\n", "\n", "为什么第四个for循环不执行？？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代码里几个问题&amp;#xff0c;分别是主函数的注释语句&amp;#xff0c;菜单函数的注释语句&amp;#xff0c;以及void printfSinglePayment(int p) 函数重复定义了。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;//菜单选项&lt;/span&gt;\nvoid menu()\n{\n    int flag &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//中断程序的标志  int flag &amp;#61; 0; 修改&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (flag)\n    {\n        readData();&lt;span class=\"hljs-comment\"&gt;//重新加载文本数据&lt;/span&gt;\n        allPayoutMoneyCount();&lt;span class=\"hljs-comment\"&gt;//计算当前金额总数&lt;/span&gt;\n        allIncomeMoneyCount();\n        system(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//清屏操作&lt;/span&gt;\n        int selectOPS;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |-------------------------------------------------|&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |----------- 欢迎进入个人财务管理系统 ----------- |&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |-------------------------------------------------|&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;Income                                       |&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;1.添加收入                                   |&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;2.查询收入明细                               |&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;3.按类别查看收入                             |&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;4.统计收入比例                               |&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |-------------------------------------------------|&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;Payout                                       |&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;5.添加支出                                   |&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;6.查询支出明细                               |&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;7.按类别查看支出                             |&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;8.统计支出比例                               |&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |-------------------------------------------------|&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;&lt;span class=\"hljs-subst\"&gt;\\t&lt;/span&gt;0.退出系统                                   |&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n        cout &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34; |-------------------------------------------------|&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;\n\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请选择(0-8):[ ]\\b\\b&amp;#34;&lt;/span&gt;);\n        selectOPS &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; numberJudge();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (selectOPS &lt;span class=\"hljs-operator\"&gt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;||&lt;/span&gt; selectOPS&lt;span class=\"hljs-operator\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;///错误输入&amp;#xff0c;重新获取输入&lt;/span&gt;\n        {\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请确定好您要选择的服务&amp;#xff0c;重新输入&amp;#xff01;&amp;#xff01;&amp;#xff01;&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt;);\n            system(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n            menu();\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;///正确输入&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;switch&lt;/span&gt; (selectOPS)&lt;span class=\"hljs-comment\"&gt;///根据输入实现相应函数调用&lt;/span&gt;\n            {\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;: add_income();\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:search_income();\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:selectIncomeByUsage();\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:incomePercent();\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:add_payout();\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;:search_payout();\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;:selectPaymentByUsage();\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;:paymentPercent();\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:flag &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n    }\n}\n\nint main()\n{\n    readData();&lt;span class=\"hljs-comment\"&gt;///读取文件数据&lt;/span&gt;\n    char passw[] &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;314&amp;#34;&lt;/span&gt;;\n    char test[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;] &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;0&amp;#34;&lt;/span&gt;;\n    int count &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//用来记录登录次数&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (count &lt;span class=\"hljs-operator\"&gt;&amp;lt;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入密码-&amp;gt;&amp;#34;&lt;/span&gt;);\n        scanf_s(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, test, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;);  &lt;span class=\"hljs-comment\"&gt;//scanf_s(&amp;#34;%s&amp;#34;, &amp;amp;test, 4); 修改&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (strcmp(passw, test) &lt;span class=\"hljs-operator\"&gt;&amp;#61;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            menu();&lt;span class=\"hljs-comment\"&gt;//显示主菜单 void menu(); 修改 &lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;密码错误&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt;);\n            count&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;;\n        }\n\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&amp;#61;&lt;/span&gt; count)\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;退出程序&lt;span class=\"hljs-subst\"&gt;\\n&lt;/span&gt;&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//下面这个函数重复定义了&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;/*\nvoid printfSinglePayment(int p) {\n    printf(&amp;#34;%d\\t%8.2f\\t&amp;#34;, payment[p].id, payment[p].money);\n    printf(&amp;#34;%d-%d-%d\\t&amp;#34;, payment[p].year, payment[p].month, payment[p].day);\n    const char* usage &amp;#61; &amp;#34;学习&amp;#34;;\n    switch (payment[p].usage)\n    {\n    case 1:\n        usage &amp;#61; &amp;#34;学习&amp;#34;;\n        break;\n    case 2:\n        usage &amp;#61; &amp;#34;餐饮&amp;#34;;\n        break;\n    case 3:\n        usage &amp;#61; &amp;#34;服装&amp;#34;;\n        break;\n    case 4:\n        usage &amp;#61; &amp;#34;娱乐&amp;#34;;\n        break;\n    default:\n        break;\n    }\n    printf(&amp;#34;%s\\t&amp;#34;, usage);\n    printf(&amp;#34;%5.2f\\n&amp;#34;, (payment[p].money / totalPayoutMoney) * 100);\n}\n*/&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/004445482556122.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["代码没有报错，但是运行不完全", ["一、问题遇到的现象和发生背景", "代码没有报错，但密码输入成功后没有继续运行，只是一直重复上一步", "\n", " 二、相关代码", "\n", "#include <stdio.h>", "\n", "#include <stdlib.h>", "\n", "#include <conio.h>", "\n", "#include <string.h>", "\n", "#include <iostream>", "\n", "#define MAX_NAME 11         ", "\n", "#define MAX_DETAIL 21      ", "\n", "#define M 155            ", "\n", "#define N 155           ", "\n", "using", " ", "namespace", " ", "std", ";\n\n", "void", " ", "add_income", "();                     \n", "void", " ", "search_income", "();                   \n", "void", " ", "changeTotalIncomeMoneyTOSelect", "(int ", "usageJudge", ");\n", "void", " ", "selectIncomeByUsage", "();             \n", "void", " ", "incomePercent", "();                   \n", "void", " ", "printfSingleIncome", "(int ", "i", ");         \n\n", "void", " ", "add_payout", "();                      \n", "void", " ", "search_payout", "();                    \n", "void", " ", "changeTotalPaymentMoneyTOSelect", "(int ", "usageJudge", ");\n", "void", " ", "selectPaymentByUsage", "();            \n", "void", " ", "paymentPercent", "();                  \n", "void", " ", "printfSinglePayment", "(int ", "p", ");         \n", "void", " ", "menu", "();\n", "void", " ", "allPayoutMoneyCount", "();\n", "void", " ", "allIncomeMoneyCount", "();\n", "void", " ", "readData", "();\n", "void", " ", "quit", "();\nint ", "numberJudge", "();\nint ", "usageJudge", "();\n\n", "struct", " ", "payment", " {\n    int ", "id", ";\n    ", "float", " ", "money", ";\n    int ", "year", ";\n    int ", "month", ";\n    int ", "day", ";\n    int ", "usage", ";\n    ", "float", " ", "percent", ";\n}", "payment", "[", "M", "];\n", "struct", " ", "comement", " {\n    int ", "id", ";\n    ", "float", " ", "money", ";\n    int ", "year", ";", "//年", "\n    int ", "month", ";\n    int ", "day", ";\n    int ", "usage", ";\n    ", "float", " ", "percent", ";\n}", "comement", "[", "N", "];\n\n\n", "const", " ", "char", " ", "fileName", "[] ", "=", " ", "\"d:", "\\\\", "test.txt\"", ";", "//文件存储路径", "\nint ", "currentMaxId", ";", "//当前文件中的最大id", "\nint ", "n", ";", "///当前文件中记录的数目", "\nint ", "m", ";\n\n", "//收入数据", "\n", "float", " ", "totalIncomeMoney", " ", "=", " ", "0", ";\n", "float", " istudyMoney ", "=", " ", "0", ";\n", "float", " ", "icateringMoney", " ", "=", " ", "0", ";\n", "float", " ", "iclothesMoney", " ", "=", " ", "0", ";\n", "float", " ", "irecreationMoney", " ", "=", " ", "0", ";\nint ", "selectIncomeUsage", " ", "=", " ", "0", ";\n\n", "//支出数据", "\n", "float", " ", "totalPayoutMoney", " ", "=", " ", "0", ";\n", "float", " ", "pstudyMoney", " ", "=", " ", "0", ";\n", "float", " ", "pcateringMoney", " ", "=", " ", "0", ";\n", "float", " ", "pclothesMoney", " ", "=", " ", "0", ";\n", "float", " ", "precreationMoney", " ", "=", " ", "0", ";\n\n\n", "void", " ", "readData", "()\n{\n    ", "FILE", "*", " ", "fp", ";", "///定义文件指针", "\n    ", "if", " ((", "fp", " ", "=", " ", "fopen", "(", "fileName", ", ", "\"r\"", ")) ", "==", " ", "NULL", ")\n    {\n        ", "fp", " ", "=", " ", "fopen", "(", "fileName", ", ", "\"w\"", ");\n    }\n    ", "else", "\n    {\n        ", "for", " (", "n", " ", "=", " ", "0", "; ", "!", "feof", "(", "fp", "); ", "n", "+", "+", ")\n        {\n            ", "fscanf_s", "(", "fp", ", ", "\"%d %f %d %d %d %d %d %f %d %d %d %d", "\\n", "\"", ", ", "&", "payment", "[", "n", "].", "id", ", ", "&", "payment", "[", "n", "].", "money", ", ", "&", "payment", "[", "n", "].", "year", ", ", "&", "payment", "[", "n", "].", "month", ", ", "&", "payment", "[", "n", "].", "day", ", ", "&", "payment", "[", "n", "].", "usage", ", ", "&", "comement", "[", "n", "].", "id", ", ", "&", "comement", "[", "n", "].", "money", ", ", "&", "comement", "[", "n", "].", "year", ", ", "&", "comement", "[", "n", "].", "month", ", ", "&", "comement", "[", "n", "].", "day", ", ", "&", "comement", "[", "n", "].", "usage", ");", "///将结构体里的信息写入文本", "\n        } ", "///保存文件数据到结构体", "\n        ", "if", " (", "n", " ", "==", " ", "0", ")\n            ", "currentMaxId", " ", "=", " ", "0", ";\n        ", "else", "\n            ", "currentMaxId", " ", "=", " ", "payment", "[", "n", " ", "-", " ", "1", "].", "id", ";\n    }\n    ", "fclose", "(", "fp", ");\n}\n\n\n\n\n", "//菜单选项", "\n", "void", " ", "menu", "()\n{\n    int ", "flag", " ", "=", " ", "0", ";", "//中断程序的标志", "\n    ", "while", " (", "flag", ")\n    {\n        ", "readData", "();", "//重新加载文本数据", "\n        ", "allPayoutMoneyCount", "();", "//计算当前金额总数", "\n        ", "allIncomeMoneyCount", "();\n        ", "system", "(", "\"cls\"", ");", "//清屏操作", "\n        int ", "selectOPS", ";\n        ", "cout", " ", "<<", " ", "\" |-------------------------------------------------|", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |----------- 欢迎进入个人财务管理系统 ----------- |", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |-------------------------------------------------|", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |", "\\t", "\\t", "Income                                       |", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |", "\\t", "\\t", "1.添加收入                                   |", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |", "\\t", "\\t", "2.查询收入明细                               |", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |", "\\t", "\\t", "3.按类别查看收入                             |", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |", "\\t", "\\t", "4.统计收入比例                               |", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |-------------------------------------------------|", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |", "\\t", "\\t", "Payout                                       |", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |", "\\t", "\\t", "5.添加支出                                   |", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |", "\\t", "\\t", "6.查询支出明细                               |", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |", "\\t", "\\t", "7.按类别查看支出                             |", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |", "\\t", "\\t", "8.统计支出比例                               |", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |-------------------------------------------------|", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |", "\\t", "\\t", "0.退出系统                                   |", "\\n", "\"", " ", "<<", " ", "endl", ";\n        ", "cout", " ", "<<", " ", "\" |-------------------------------------------------|", "\\n", "\"", " ", "<<", " ", "endl", ";\n\n        ", "printf", "(", "\"请选择(0-8):[ ]", "\\b", "\\b", "\"", ");\n        ", "selectOPS", " ", "=", " ", "numberJudge", "();\n        ", "if", " (", "selectOPS", " ", "<", " ", "0", " ", "||", " ", "selectOPS", ">", "8", ")", "///错误输入，重新获取输入", "\n        {\n            ", "printf", "(", "\"请确定好您要选择的服务，重新输入！！！", "\\n", "\"", ");\n            ", "system", "(", "\"pause\"", ");\n            ", "menu", "();\n        }\n        ", "else", "///正确输入", "\n            ", "switch", " (", "selectOPS", ")", "///根据输入实现相应函数调用", "\n            {\n            ", "case", " ", "1", ": ", "add_income", "();\n                ", "break", ";\n\n            ", "case", " ", "2", ":", "search_income", "();\n                ", "break", ";\n\n            ", "case", " ", "3", ":", "selectIncomeByUsage", "();\n                ", "break", ";\n\n            ", "case", " ", "4", ":", "incomePercent", "();\n                ", "break", ";\n\n            ", "case", " ", "5", ":", "add_payout", "();\n                ", "break", ";\n\n            ", "case", " ", "6", ":", "search_payout", "();\n                ", "break", ";\n\n            ", "case", " ", "7", ":", "selectPaymentByUsage", "();\n                ", "break", ";\n\n            ", "case", " ", "8", ":", "paymentPercent", "();\n                ", "break", ";\n\n            ", "case", " ", "0", ":", "flag", "=", "0", ";\n                ", "break", ";\n            }\n    }\n}\n\n\n", "void", " ", "search_income", "()\n{\n\n    ", "printf", "(", "\"", "\\t", "\\t", " 当前所有的收入记录：", "\\n", "\"", ");\n    ", "printf", "(", "\"记录编号   收入金额", "\\t", "具体日期", "\\t", "类别", "\\t", "百分比", "\\n", "\"", ");\n    ", "for", " (int ", "i", " ", "=", " ", "0", "; ", "i", " ", "<", " ", "n", "; ", "i", "+", "+", ")\n    {\n        ", "printfSingleIncome", "(", "i", ");\n    }\n    ", "system", "(", "\"pause\"", ");\n}\n\n\n", "void", " ", "printfSingleIncome", "(", "int", " ", "i", ") {\n    ", "printf", "(", "\"%d", "\\t", "%8.2f", "\\t", "\"", ", ", "comement", "[", "i", "].", "id", ", ", "comement", "[", "i", "].", "money", ");\n    ", "printf", "(", "\"%d-%d-%d", "\\t", "\"", ", ", "comement", "[", "i", "].", "year", ", ", "comement", "[", "i", "].", "month", ", ", "comement", "[", "i", "].", "day", ");\n    ", "const", " ", "char", "*", " ", "usage", " ", "=", " ", "\"学习\"", ";\n    ", "switch", " (", "comement", "[", "i", "].", "usage", ")\n    {\n    ", "case", " ", "1", ":\n        ", "usage", " ", "=", " ", "\"学习\"", ";\n        ", "break", ";\n    ", "case", " ", "2", ":\n        ", "usage", " ", "=", " ", "\"餐饮\"", ";\n        ", "break", ";\n    ", "case", " ", "3", ":\n        ", "usage", " ", "=", " ", "\"服装\"", ";\n        ", "break", ";\n    ", "case", " ", "4", ":\n        ", "usage", " ", "=", " ", "\"娱乐\"", ";\n        ", "break", ";\n    ", "default", ":\n        ", "break", ";\n    }\n    ", "printf", "(", "\"%s", "\\t", "\"", ", ", "usage", ");\n    ", "printf", "(", "\"%5.2f", "\\n", "\"", ", (", "comement", "[", "i", "].", "money", " / ", "totalIncomeMoney", ") ", "*", " ", "100", ");\n}\n", "void", " ", "printfSinglePayment", "(", "int", " ", "p", ") {\n    ", "printf", "(", "\"%d", "\\t", "%8.2f", "\\t", "\"", ", ", "payment", "[", "p", "].", "id", ", ", "payment", "[", "p", "].", "money", ");\n    ", "printf", "(", "\"%d-%d-%d", "\\t", "\"", ", ", "payment", "[", "p", "].", "year", ", ", "payment", "[", "p", "].", "month", ", ", "payment", "[", "p", "].", "day", ");\n    ", "const", " ", "char", "*", " ", "usage", " ", "=", " ", "\"学习\"", ";\n    ", "switch", " (", "payment", "[", "p", "].", "usage", ")\n    {\n    ", "case", " ", "1", ":\n        ", "usage", " ", "=", " ", "\"学习\"", ";\n        ", "break", ";\n    ", "case", " ", "2", ":\n        ", "usage", " ", "=", " ", "\"餐饮\"", ";\n        ", "break", ";\n    ", "case", " ", "3", ":\n        ", "usage", " ", "=", " ", "\"服装\"", ";\n        ", "break", ";\n    ", "case", " ", "4", ":\n        ", "usage", " ", "=", " ", "\"娱乐\"", ";\n        ", "break", ";\n    ", "default", ":\n        ", "break", ";\n    }\n    ", "printf", "(", "\"%s", "\\t", "\"", ", ", "usage", ");\n    ", "printf", "(", "\"%5.2f", "\\n", "\"", ", (", "payment", "[", "p", "].", "money", " / ", "totalPayoutMoney", ") ", "*", " ", "100", ");\n}\n\n\n", "void", " ", "printfSinglePayment", "(", "int", " ", "p", ") {\n    ", "printf", "(", "\"%d", "\\t", "%8.2f", "\\t", "\"", ", ", "payment", "[", "p", "].", "id", ", ", "payment", "[", "p", "].", "money", ");\n    ", "printf", "(", "\"%d-%d-%d", "\\t", "\"", ", ", "payment", "[", "p", "].", "year", ", ", "payment", "[", "p", "].", "month", ", ", "payment", "[", "p", "].", "day", ");\n    ", "const", " ", "char", "*", " ", "usage", " ", "=", " ", "\"学习\"", ";\n    ", "switch", " (", "payment", "[", "p", "].", "usage", ")\n    {\n    ", "case", " ", "1", ":\n        ", "usage", " ", "=", " ", "\"学习\"", ";\n        ", "break", ";\n    ", "case", " ", "2", ":\n        ", "usage", " ", "=", " ", "\"餐饮\"", ";\n        ", "break", ";\n    ", "case", " ", "3", ":\n        ", "usage", " ", "=", " ", "\"服装\"", ";\n        ", "break", ";\n    ", "case", " ", "4", ":\n        ", "usage", " ", "=", " ", "\"娱乐\"", ";\n        ", "break", ";\n    ", "default", ":\n        ", "break", ";\n    }\n    ", "printf", "(", "\"%s", "\\t", "\"", ", ", "usage", ");\n    ", "printf", "(", "\"%5.2f", "\\n", "\"", ", (", "payment", "[", "p", "].", "money", " / ", "totalPayoutMoney", ") ", "*", " ", "100", ");\n}\n\n\n", "void", " ", "selectIncomeByUsage", "() {\n    int ", "selectIncomeUsage", " ", "=", " ", "usageJudge", "();\n    ", "changeTotalIncomeMoneyTOSelect", "(", "selectIncomeUsage", ");\n    ", "printf", "(", "\"记录编号   收入金额", "\\t", "具体日期", "\\t", "类别", "\\t", "比例", "\\n", "\"", ");\n    ", "for", " (int ", "i", " ", "=", " ", "0", "; ", "i", " ", "<", " ", "n", "; ", "i", "+", "+", ")\n    {\n        ", "if", " (", "payment", "[", "i", "].", "usage", " ", "==", " ", "selectIncomeUsage", ")\n        {\n\n            ", "printfSingleIncome", "(", "i", ");\n        }\n    }\n    ", "system", "(", "\"pause\"", ");\n\n}\n\n", "void", " ", "selectPaymentByUsage", "() {\n    int ", "selectPayoutUsage", " ", "=", " ", "usageJudge", "();\n    ", "changeTotalPaymentMoneyTOSelect", "(", "selectPayoutUsage", ");\n    ", "printf", "(", "\"记录编号   支出金额", "\\t", "具体日期", "\\t", "类别", "\\t", "比例", "\\n", "\"", ");\n    ", "for", " (int ", "p", " ", "=", " ", "0", "; ", "p", " ", "<", " ", "n", "; ", "p", "+", "+", ")\n    {\n        ", "if", " (", "payment", "[", "p", "].", "usage", " ", "==", " ", "selectPayoutUsage", ")\n        {\n\n            ", "printfSinglePayment", "(", "p", ");\n        }\n    }\n    ", "system", "(", "\"pause\"", ");\n\n}\n\n\n", "void", " ", "add_income", "()\n{\n    ", "printf", "(", "\"请填写您要录入的收入的信息：金额 年份 月份 日期 用途（请以空格隔开每个数据）", "\\n", "\"", ");\n\n    ", "printf", "(", "\" 请输入金额: \"", ");\n    ", "scanf_s", "(", "\" %f\"", ", ", "&", "comement", "[", "n", "].", "money", ");\n    ", "printf", "(", "\" 请输入年份: \"", ");\n    ", "comement", "[", "n", "].", "year", " ", "=", " ", "numberJudge", "();\n    ", "printf", "(", "\" 请输入月份(1-12):[] ", "\\b", "\\b", "\"", ");\n    ", "comement", "[", "n", "].", "month", " ", "=", " ", "numberJudge", "();\n    ", "if", " (", "comement", "[", "n", "].", "month", " ", "<", " ", "1", " ", "||", " ", "comement", "[", "n", "].", "month", " ", ">", "12", ")\n    {\n        ", "printf", "(", "\"", "\\n", "\\t", "月份输入有误，请重新输入1-12范围内的数字！\"", ");\n        ", "comement", "[", "n", "].", "month", " ", "=", " ", "numberJudge", "();\n    }\n\n    ", "printf", "(", "\"请输入日期(1-31):[] ", "\\b", "\\b", "\"", ");\n    ", "comement", "[", "n", "].", "day", " ", "=", " ", "numberJudge", "();\n    ", "if", " (", "comement", "[", "n", "].", "day", " ", "<", " ", "1", " ", "||", " ", "comement", "[", "n", "].", "day", " ", ">", "31", ")\n    {\n        ", "printf", "(", "\"", "\\n", "\\t", "日期输入有误，请重新输入1-31范围内的数字！\"", ");\n        ", "comement", "[", "n", "].", "day", " ", "=", " ", "numberJudge", "();\n    }\n\n    ", "comement", "[", "n", "].", "usage", " ", "=", " ", "usageJudge", "();\n\n\n    ", "currentMaxId", " ", "=", " ", "comement", "[", "n", " ", "-", " ", "1", "].", "id", ";\n    ", "comement", "[", "n", "].", "id", " ", "=", " ", "currentMaxId", " ", "+", " ", "1", ";\n    ", "FILE", "*", " ", "fp", ";", "///定义文件指针", "\n    ", "printf", "(", "\"该条记录正在写入文件 list.txt...", "\\n", "\"", ");\n    ", "fp", " ", "=", " ", "fopen", "(", "fileName", ", ", "\"a\"", ");", "//参数\"a\"意思是说将新添加的数据接着文本里的数据写，不会覆盖文本里的内容", "\n    ", "if", " (", "currentMaxId", " ", "==", " ", "0", ")", "//第一条记录之前不用加换行", "\n        ", "fprintf", "(", "fp", ", ", "\"%d", "\\t", "%8.2f", "\\t", "%d", "\\t", "%d", "\\t", "%d", "\\t", "%d\"", ", ", "comement", "[", "n", "].", "id", ", ", "comement", "[", "n", "].", "money", ", ", "comement", "[", "n", "].", "year", ", ", "comement", "[", "n", "].", "month", ", ", "comement", "[", "n", "].", "day", ", ", "comement", "[", "n", "].", "usage", ");", "///将结构体里的信息写入文本", "\n    ", "else", "\n        ", "fprintf", "(", "fp", ", ", "\"", "\\n", "%d", "\\t", "%8.2f", "\\t", "%d", "\\t", "%d", "\\t", "%d", "\\t", "%d\"", ", ", "comement", "[", "n", "].", "id", ", ", "comement", "[", "n", "].", "money", ", ", "comement", "[", "n", "].", "year", ", ", "comement", "[", "n", "].", "month", ", ", "comement", "[", "n", "].", "day", ", ", "comement", "[", "n", "].", "usage", ");", "///将结构体里的信息写入文本", "\n\n    ", "fclose", "(", "fp", ");", "//关闭文件", "\n    ", "printf", "(", "\"", "\\n", "该条记录已经写入文件 list.txt，请前往查看！", "\\n", "\"", ");\n    ", "n", "+", "+", ";\n    ", "system", "(", "\"pause\"", ");\n}\n", "void", " ", "add_payout", "()\n{\n    ", "printf", "(", "\"请填写您要录入的支出的信息：金额 年份 月份 日期 用途（请以空格隔开每个数据）", "\\n", "\"", ");\n\n    ", "printf", "(", "\" 请输入金额: \"", ");\n    ", "scanf_s", "(", "\" %f\"", ", ", "&", "payment", "[", "m", "].", "money", ");\n    ", "printf", "(", "\" 请输入年份: \"", ");\n    ", "payment", "[", "m", "].", "year", " ", "=", " ", "numberJudge", "();\n    ", "printf", "(", "\" 请输入月份(1-12):[] ", "\\b", "\\b", "\"", ");\n    ", "payment", "[", "m", "].", "month", " ", "=", " ", "numberJudge", "();\n    ", "if", " (", "payment", "[", "m", "].", "month", " ", "<", " ", "1", " ", "||", " ", "payment", "[", "m", "].", "month", " ", ">", "12", ")\n    {\n        ", "printf", "(", "\"", "\\n", "\\t", "月份输入有误，请重新输入1-12范围内的数字！\"", ");\n        ", "payment", "[", "m", "].", "month", " ", "=", " ", "numberJudge", "();\n    }\n\n    ", "printf", "(", "\"请输入日期(1-31):[] ", "\\b", "\\b", "\"", ");\n    ", "payment", "[", "m", "].", "day", " ", "=", " ", "numberJudge", "();\n    ", "if", " (", "payment", "[", "m", "].", "day", " ", "<", " ", "1", " ", "||", " ", "payment", "[", "m", "].", "day", " ", ">", "31", ")\n    {\n        ", "printf", "(", "\"", "\\n", "\\t", "日期输入有误，请重新输入1-31范围内的数字！\"", ");\n        ", "payment", "[", "m", "].", "day", " ", "=", " ", "numberJudge", "();\n    }\n\n    ", "payment", "[", "m", "].", "usage", " ", "=", " ", "usageJudge", "();\n\n\n    ", "currentMaxId", " ", "=", " ", "payment", "[", "n", " ", "-", " ", "1", "].", "id", ";\n    ", "payment", "[", "m", "].", "id", " ", "=", " ", "currentMaxId", " ", "+", " ", "1", ";\n    ", "FILE", "*", " ", "fp", ";", "///定义文件指针", "\n    ", "printf", "(", "\"该条记录正在写入文件 list.txt...", "\\n", "\"", ");\n    ", "fp", " ", "=", " ", "fopen", "(", "fileName", ", ", "\"a\"", ");\n    ", "if", " (", "currentMaxId", " ", "==", " ", "0", ")", "//第一条记录之前不用加换行", "\n        ", "fprintf", "(", "fp", ", ", "\"%d", "\\t", "%8.2f", "\\t", "%d", "\\t", "%d", "\\t", "%d", "\\t", "%d\"", ", ", "payment", "[", "m", "].", "id", ", ", "payment", "[", "m", "].", "money", ", ", "payment", "[", "m", "].", "year", ", ", "payment", "[", "m", "].", "month", ", ", "payment", "[", "m", "].", "day", ", ", "payment", "[", "m", "].", "usage", ");\n    ", "else", "\n        ", "fprintf", "(", "fp", ", ", "\"", "\\n", "%d", "\\t", "%8.2f", "\\t", "%d", "\\t", "%d", "\\t", "%d", "\\t", "%d\"", ", ", "payment", "[", "m", "].", "id", ", ", "payment", "[", "m", "].", "money", ", ", "payment", "[", "m", "].", "year", ", ", "payment", "[", "m", "].", "month", ", ", "payment", "[", "m", "].", "day", ", ", "payment", "[", "m", "].", "usage", ");\n\n    ", "fclose", "(", "fp", ");", "//关闭文件", "\n    ", "printf", "(", "\"", "\\n", "该条记录已经写入文件 list.txt", "\\n", "\"", ");\n    ", "m", "+", "+", ";\n    ", "system", "(", "\"pause\"", ");\n}\n\n", "void", " ", "search_payout", "()\n{\n  ", "printf", "(", "\"", "\\t", "\\t", " 当前所有的支出记录：", "\\n", "\"", ");\n    ", "printf", "(", "\"记录编号   支出金额", "\\t", "具体日期", "\\t", "类别", "\\t", "百分比", "\\n", "\"", ");\n    ", "for", " (int ", "p", " ", "=", " ", "0", "; ", "p", " ", "<", " ", "n", "; ", "p", "+", "+", ")\n    {\n        ", "printfSinglePayment", "(", "p", ");\n    }\n    ", "system", "(", "\"pause\"", ");\n}\n\n\n", "/*由于过长，省略中间代码*/", "\n\nint ", "usageJudge", "() {\n    int ", "usage", " ", "=", " ", "0", ";\n    ", "printf", "(", "\"请输入支出的类别(1代表学习，2代表餐饮，3代表服装，4代表娱乐)：", "\\n", "\"", ");\n    ", "printf", "(", "\"请选择(1-4):[ ]", "\\b", "\\b", "\"", ");\n    ", "usage", " ", "=", " ", "numberJudge", "();\n    ", "if", " (", "usage", " ", "<", " ", "1", " ", "||", " ", "usage", " ", ">", "4", ")\n    {\n        ", "printf", "(", "\"", "\\n", "\\t", "类别输入有误，请重新输入1-4范围内的数字！\"", ");\n        ", "usage", " ", "=", " ", "numberJudge", "();\n    }\n    ", "return", " ", "usage", ";\n}\n\nint ", "numberJudge", "() {\n    int ", "num", ";\n    int ", "sign", " ", "=", " ", "0", ";\n    int ", "retur", ";\n    ", "do", " {\n        ", "sign", " ", "=", " ", "0", ";\n        ", "retur", " ", "=", " ", "scanf", "(", "\" %d\"", ", ", "&", "num", ");", "//如果输入的n是十进制数字，则返回1（符合条件的参数）", "\n        ", "if", " (", "retur", " ", "==", " ", "0", ") {\n            ", "printf", "(", "\"", "\\n", "非法输入，请重新输入十进制数字！", "\\n", "\"", ");\n            ", "for", " (; ", "getchar", "() ", "!=", " '\\", "n", "';);\n            ", "sign", " ", "=", " ", "-1", ";\n        }\n    } ", "while", " (", "sign", " ", "==", " ", "-1", ");\n    ", "return", " ", "num", ";\n}\n\n\nint ", "main", "()\n{\n    ", "readData", "();", "///读取文件数据", "\n    ", "char", " ", "passw", "[] ", "=", " ", "\"314\"", ";\n    ", "char", " ", "test", "[", "20", "] ", "=", " ", "\"0\"", ";\n    int ", "count", " ", "=", " ", "0", ";", "//用来记录登录次数", "\n    \n    ", "while", " (", "count", " ", "<", " ", "3", ")\n        {\n        ", "printf", "(", "\"请输入密码->\"", ");\n        ", "scanf_s", "(", "\"%s\"", ", ", "&", "test", ",", "4", ");\n        ", "if", " (", "strcmp", "(", "passw", ", ", "test", ") ", "==", " ", "0", ")\n        {\n            ", "void", " ", "menu", "();", "///显示主菜单", "\n        }\n        ", "else", "\n        {\n            ", "printf", "(", "\"密码错误", "\\n", "\"", ");\n            ", "count", "+", "+", ";\n        }\n    \n    }\n    ", "if", " (", "3", " ", "==", " ", "count", ")\n    {\n        ", "printf", "(", "\"退出程序", "\\n", "\"", ");\n    }\n    ", "return", " ", "0", ";\n}\n\n", "\n", " 三、运行结果", "\n", " 四、我的解答思路和尝试过的方法", "把上面的main{}代换成", "\n", "int ", "main", "()\n{\n    readData();", "///读取文件数据", "\n    ", "menu", "();", "///显示主菜单", "\n}\n\n", "\n", "但是运行窗口没有任何显示", "五、希望", "通过正确输入密码，进入menu界面"]], "Tag": "程序设计"}
{"Answer": "为什么要做的这么复杂？\r\n单独做一个函数，传入需要更改的对象和值，点一下就不会影响其他的，写个demo，给你看看\r\n\r\n\r\n```javascript\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n\t&lt;meta charset=\"UTF-8\"&gt;\r\n\t&lt;title&gt;Document&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\t&lt;table&gt;\r\n\t\t&lt;tr&gt;\r\n\t\t\t&lt;td&gt;&lt;input type=\"text\" value=\"0\"&gt;&lt;input type=\"button\" onclick=\"addNum(this,1)\" value=\"点我加1\"&gt;&lt;/td&gt;\r\n\t\t&lt;/tr&gt;\r\n\t\t&lt;tr&gt;\r\n\t\t\t&lt;td&gt;&lt;input type=\"text\" value=\"0\"&gt;&lt;input type=\"button\" onclick=\"addNum(this,2)\" value=\"点我加2\"&gt;&lt;/td&gt;\r\n\t\t&lt;/tr&gt;\r\n\t\t&lt;tr&gt;\r\n\t\t\t&lt;td&gt;&lt;input type=\"text\" value=\"0\"&gt;&lt;input type=\"button\" onclick=\"addNum(this,3)\" value=\"点我加3\"&gt;&lt;/td&gt;\r\n\t\t&lt;/tr&gt;\r\n\t&lt;/table&gt;\r\n&lt;/body&gt;\r\n&lt;script src=\"http://code.jquery.com/jquery-2.1.1.min.js\"&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n\tfunction addNum(obj,num){\r\n\t\tvar obj = $(obj).siblings(\"input[type='text']\");\r\n\t\tvar old = parseInt(obj.val());\r\n\t\tobj.val(\"\").val(old+num)\r\n\t}\r\n&lt;/script&gt;\r\n&lt;/html&gt;\r\n \r\n```", "Konwledge_Point": "重复n次操作", "Question": ["jquery  table 数字问题", ["  $.each(typeData, function (i, n) {\n                                            //这里是增加1 和减1 HTML\n                                            var jisuan = \"<div class=\\\"amount_box\\\"><a href=\\\"javascript:;\\\"   class=\\\"reduce reSty\\\">-</a><input type=\\\"text\\\" value=\\\"1\\\" class=\\\"sum\\\"><a href=\\\"javascript:;\\\"   class=\\\"plus\\\">+</a></div>\";\n                                            //tr表格\n                                            tbBody += \"<tr><td id=\" + n.ID + \">\" + n.ID + \"</td>\" + \"<td>\" + n.mingcheng + \"</td> \" + \"<td>\" + jisuan + \"</td>\" + \"<td class='sum_price'>\" + n.jiage + \"</td>\" + \"<td class='price'>ss</td><td onClick='d(this)'><i class='fa fa-trash-o'></i></td></tr>\"\n\n                                            //遍历#myTb下所有的进行比对重复则为追加\n                                            if (!$(\"#myTb tr\").children('td[id=' + n.ID + ']').length) {                                              \n\n                                                $(\"#myTb\").append(tbBody);                                                \n\n\n\n                                            }\n                                            else {\n                                                layer.msg('已存在-' + n.mingcheng + '!', { icon: 5, time: 3000 });\n                                                return;\n                                            }\n                                            //操作Plus类 input 进行加1运算，问题出在这里， 如果追加3行tr 点一下.plus类则会出现+3次的现象，不知道问题出在哪里\n                                            //放在这里点一次加+2，放到if里可以执行，如果表有3行，执行后第一行点.plus会出现加3次input显示3，第二行加2次，第3行加一次\n                                            //怎么操作让他们3行数据互不影响？点击plus  input里的数加1 而不是根据行的多少来添加\n\n                                            $('.plus').click(function () {\n\n                                                var $inputVal = $(this).prev('input'),\n                                                   $count = parseInt($inputVal.val()) + 1;\n                                                $inputVal.val($count);\n\n                                            });\n                                        })\n", "\n\n", "//操作Plus类 input 进行加1运算，问题出在这里， 如果追加3行tr 点一下.plus类则会出现+3次的现象，不知道问题出在哪里", "\n                                            //放在这里点一次加+2，放到if里可以执行，如果表有3行，执行后第一行点.plus会出现加3次input显示3，第二行加2次，第3行加一次", "\n                                            //怎么操作让他们3行数据互不影响？点击plus  input里的数+1 而不是根据行的多少来添加"]], "Tag": "程序设计"}
{"Answer": "这算不算一种全新的算法，还请各位老师不吝指点,谢谢。", "Konwledge_Point": "重复n次操作", "Question": ["请教各位大神:一种新的数组排序,初测速度是快速排序的50倍,有无市场价值,时间复杂度能计算出来吗?", ["求助:最近,发现了一种新的数组排序方法,初测其速度是快速排序法的近50倍,想知道有没有市场价值,时间复杂度能计算出来吗?请各位大神赐教!", "\n下面，为了便于区别说明将这个新方法暂且称之占位排序法；", "\n用javascript脚本语言实现快速排序法和占位排序方法之后,然后在同一台（较老旧的，ｃｐｕ是AMD推土机）电脑上，用ie浏览器运行，样本1000时，快速排序法和占位排序法所耗时分别是：18毫秒、15毫秒；样本10000时，所耗时间分别是：95毫秒、80毫秒；样本100000时，耗时分别是：2405毫秒、407毫秒；样本1000000时，耗时分别是：190888毫秒、3962毫秒；占位方比快排法在对100万数据进行排序时,快了近50倍!!!", "\n\n", "占位排序法的理念是：一是，只对数组全局作一次遍历，以后每次只遍历数组的一小部分；二是，把数据的迁移次数降至极致。", "\n占位法的实现方法是：", "\n分段处理、选取代表、萝卜占位、先乱后治、小马快跑、多看少动;", "\n将一个大的数组分割成多个段；首先，要在各段数据p内明确锚点位；其次，锚点位的确定要遵守一个预先明确的固定规范;", "\n其特征还在于，在锚点位上保存的数据不仅要体现自身的数据特征,还要能体现所在段p共同的数据特征。", "\n\n", "举例:如果在段p内,继续分段p_;假设一个索引地址m; m即是段p的锚点位,又是p_的锚点位,那么在索引m存放的数据,要求必须同时体现:自身的数据征、段ｐ的共同的数据特征、段p_的共同的数据特征；如果对锚点位的数据操作直接作用在需要排序的数据集合上，称之为内建锚点(以下所有实例如无特别说明均采用内建锚点的方式)；如果对锚点位的数据进行的操作,还需要额外的映射在另外一个数据集合上，则称之为外建锚点。", "\n列举一个实例,做进一步说明:要从大到小重新排序一个数组A;数组A有100个元素:数据d,规定从A[0]开始每5个数据为一组p_;同时,从A[0]开始每15个数据为一组p;这样一个p内就有3个p_;更进一步,规定每个段的第一个索引对应段的锚点位;那么,A[0]是p的锚点位,又是p_的锚点位;则,A[5]是p_的一个锚点位,而不是p的锚点位;假设初始状态：A[0]存放的数据为5、A[３]为6、A[７]为9、A[12]为8，其他数据均为2；为了在排序过程中,减少遍历和迁移数据的数量,选择最大值来表达每一段数据的共同属性;这样在p_内，A[0]和A[３]的数据值要进行交换；在p内，A[0]和A[7]的数据值还要进行交换，优选的，不仅交换A[0]和A[7]的数据值，还要对A[0]至A[4]与A[5]至A[9]，两个p_段内的数据进行整理,使A[0]至A[9]中最大的5个数迁移至A[0]至A[4]中,A[0]至A[9]中最小的5个数迁移至A[5]至A[9]中;最后的结果为:A[0]为9、A[5]为2、A[10]为8。", "\n所述的萝卜占位,指的是“一个萝卜、一个坑”的占位理论在计算机数据整理和筛选过程中的运用;", "\n一方面,更具体的,假设要从一个更大的数据集合中筛选出最小的n个数据,那么只要从数据集合中任意找出n个数据,然后再从这n个数据中找到最大的一个n_，据此就可以准确的进行以下推断：如果存在一个数据大于n_,那么该数据一定不是要选的数据;如果存在一个数据n_1，只要n_1小于n_,那么就又能证明了n_这个数据一定不是要选的,所以就可以安全的用n_1将n_替换掉了;接下来,对调整后的n个数据重新排查,再次找出n个数据中最大的那个,然后重复以上操作,直到将所有符合要求的数据都找出来;", "\n另一方面,设定锚点存放的是每个数据段ｐ的最小的值，ｐ段里面还有ｐ＿段，要筛选出最小的n个数据;那么,就可以先遍历p的锚点,选择出锚点值最小的n个p段,再从这n个p段中出找出锚点值最小的n个p_段;再从这n个p_中找到锚点的值最大的p_1;最后遍历这n个p_数据段的数据,只有满足小于或等于p_1,同时又小于n_的值才有可能是要选取的值，所以可以安全的操作这些数据与n_的数据进行互换; 否则，一定不是，所以可以将它们安全的排除在目标之外;", "\n而从一个更大的数据集合中筛选出最大的n个数据,与此逻辑相同,但取值相反;具体的, 只要从数据集合中任意找出n个数据,然后再从这n个数据中找到最小的一个n_，据此就可以准确的进行以下推断：如果存在一个数据小于n_,那么该数据一定不是我们要选的数据;如果存在一个数据n_1，只要n_1大于n_,那么就又能证明了n_这个数据一定不是我们要选的,所以就可以安全的用n_1将n_替换掉了;接下来,对调整后的n个数据重新排查,再次找出n个数据中最小的那个,然后重复以上操作,直到将所有符合要求的数据都找出来;", "\n另一方面,更进一步,接上例,更具体的,设定锚点存放的是每个数据段ｐ的最大的值，ｐ段里面还有ｐ＿段，要筛选出最大的n个数据;那么,就可以先遍历p的锚点,选择出锚点值最大的n个p段,再从这n个p段中出找出锚点值最大的n个p_段;再从这n个p_中找到锚点的值最小的p_1;最后遍历这n个p_数据段的数据,只有满足大于或等于p_1,同时又大于n_的值才有可能是要选取的值,所以可以安全的操作这些数据与n_的数据进行互换;否则，一定不是,所以可以将它们安全的排除在目标之外；", "\n通过这种方法有效的减少了数据的遍历数量和数据的交换次数；", "\n\n", "<!doctype html><head><meta charset=\"UTF-8\"><title>占位排序法</title></head><body><script>\n  /**********用于随机产生一个测试用数组*****/\n    function arrcf(arr,arrLength){ \n    for(var i = 0; i < arrLength; i++){arr[i]=Math.floor(Math.random()*10000);};}\n    var arr = new Array(); arrcf(arr,1000000);//调用生成随机数组\n    var d = new Date(); var t = d.getTime();//记录程序开始的\n  /**********用于随机产生一个测试用数组****/\n    var z =25;   //步长,每次可排好的数据个数,可调整\n    var p =4*z;   //数据分段长度,可根据实际情况调整\n    var pxb = 0;    //prr数组中arr[prr[*]]最大值的下标*\n    var pxm = 0;       //arr[prr[*]]中最小值的下标*\n    var f2 = arr.length;    //数组长度\n    var fi = f2-z;     //段的头部\n    var mx = fi;      //步长内极值(最小值)的下标\n    var pi = 0;      //中间过渡变量\n    var prr = new Array();//中间过渡数组\n/**** 预处理 ***************/\n    ycl(f2);\n/**** 全面排序 *************/      \n  for(var fi=f2-z;fi>0;fi-=z){\n        //向prr[]填充z个p节点的下标\n        var prr= new Array();\n        for (var iii=0;iii<z;iii++ ){ prr[iii]=iii*p;}      \n       //找出arr[prr[*]]最小的*值\n         pxb = prrmax(pxb);\n        //便历节点找出最大的z个数据,更新prr[]\n        for(var ii=(z)*p; ii< fi ;ii+= p){   \n            if(arr[prr[pxb]]<arr[ii]){ prr[pxb]=ii;\n              //重新确定prr[]中的最小值\n              pxb = prrmax(pxb);}} \n        mx=colt(z,fi);   //获取步长内的最小值\n        //遍历prr数组\n        for(var i=0;i<z;i++){ pi=prr[i];\n            if(arr[mx]<arr[prr[i]]){     //步长内的最小值,是否小于段的最大值\n                var z1= Math.floor(fi/p)*p; \n                if(z1===pi){     //判断步长的头部是否在段内\n                    //处理尾部数据,即步长头部所在的段\n                    var z1= Math.floor(fi/p)*p; \n                    for(var ii=z1;ii<fi;ii++){   //遍历arr[]数组的当前段\n                        if(arr[ii] >= arr[prr[pxb]]){    //如果当前值不小于arr[prr[]]最小值\n                            if(arr[ii]>arr[mx]){\n                                dtod(ii,mx);\n                                mx=colt(z,fi);   //获取步长内的最小值\n                        }}\n                        if(arr[ii]>arr[pi]){   //动态维护本段的最大值\n                            pi=ii;\n                    }}\n                     //保存最大值到段的开头位置 \n                    if(arr[pi]>arr[prr[i]]){dtod(pi,prr[i]);}\n                }else{\n                    for(var ii=prr[i];ii<prr[i]+p;ii++){  //遍历arr[]数组的当前段\n                        if(arr[ii] >= arr[prr[pxb]]){  //如果当前值大于等于prr[]中的arr[prr[]]最小值\n                            if(arr[ii]>arr[mx]){  //如果当前值大于数组中的最小值\n                                dtod(mx,ii);      //数据交换\n                                mx=colt(z,fi);   //重新获取步长内的最小值\n                        }}\n                        if(arr[ii]>arr[pi]){   //动态维护本段的最大值\n                            pi=ii;\n                    }}\n                    //保存最大值到段的开头位置 \n                    if(arr[pi]>arr[prr[i]]){\n                        dtod(pi,prr[i]);        \n        }}}}\n        if(fi>p*z){\n            var fz=fi;\n            var zf=fi+z;\n            zpx(fz,zf);\n        }else{\n            var fz=0;\n            var zf=fi+z;\n            zpx(fz,zf); \n            break;\n    }}\n/************以下位置用于封装函数*****************************/\n    //标记段数据的最大值属性\n    function ycl(f2){\n        for (var i=0;i<f2;i += p ){ \n            var max=i;\n            var rp=i+p;\n            for(var ii=i;ii<rp;ii++){\n                if(arr[max]<arr[ii]){\n                    max=ii;\n            }}\n            dtod(i,max);\n    }}\n    //选取步长内最小数据的索引号\n    function colt(z,fi){var  mrx=fi+z;\n       for(var i=fi;i<mrx;i++){if(arr[mx]>arr[i]){mx=i;}}return(mx);\n   }\n    //数据交换\n    function dtod(dt1,dt2){y=arr[dt1];arr[dt1]=arr[dt2];arr[dt2]=y;}\n    //找出arr[prr[i]]最小的i值\n    function prrmax(pxb){\n        var pxb=0;\n        for(var pi = 0;pi<z;pi++){if(arr[prr[pxb]]>arr[prr[pi]]){pxb=pi;}}return(pxb);}\n    //以1为步长,双向式,对数据排序\n    function zpx(fz,zf){   //zf排序的开始位置,fz排序的结束位置\n        for(fz;fz<zf;zf){\n            var mi=fz;  //记录最小值\n            var ma=zf-1;   //记录最大值    \n            if(arr[fz]>arr[zf-1]){dtod(fz,zf-1);}//前后两个数比较,交换位置\n            for(var i=fz;i<zf;i++){\n              if(arr[i]<arr[mi]){mi=i;}else if(arr[i]>arr[ma]){\n                  ma=i;\n            }}    \n            dtod(fz,mi);\n            dtod(ma,zf-1);\n            fz++;\n            zf--;\n    }}\n/**********以下用于输出结果**********************/\n//for(var i=0;i<arr.length;i++){ document.write(arr[i]+\",,,,,\"+i+\"<br>\")};\nvar t2=(new Date().valueOf());document.write(\"---开始时间---\"+t2+\"<br>---完成时间---\"+t+\"<br>-占位排序法-用时--------\"+(t2-t)+\"---毫秒<br>\");\nfor(var i=0;i<arr.length;i++){if(arr[i-1]>arr[i]){alert(\"数组排序有误,错误在:\"+i);}else{x1=-1;}};if(x1<0){alert(\"排序正确\");};\n</script></body></html>\n```下面是快排法\n", "\n\n", "<!doctype html><head><meta charset=\"UTF-8\">\n<title>快速法数组排序</title></head><body>\n<script>\n //用于随机产生一个测试用数组\n   function arrcf(arr,arrLength){     //数组名字(调用前在函数外声明一下,做在全局的),数组长度\n      for(var i = 0; i < arrLength; i++){arr[i]=Math.floor(Math.random()*1000);};\n    }\n  //调用生成随机数组\n   var arr = new Array(); arrcf(arr,1000000);\n   var d = new Date(); var  t = d.getTime();//记录程序开始的时间,用于测试程序执行效率  \n/********* (以下代码采用52.0Hz的方案,https://blog.csdn.net/Loving_M/article/details/52993521)******/\n   var times=0;  var quickSort=function(arr){ \n   //如果数组长度小于等于1无需判断直接返回即可\n   if(arr.length<=1){return arr;}\n   var midIndex=Math.floor(arr.length/2);//取基准点\n   var midIndexVal=arr.splice(midIndex,1);//取基准点的值,splice(index,1)函数可以返回数组中被删除的那个数arr[index+1]\n   var left=[];//存放比基准点小的数组\n   var right=[];//存放比基准点大的数组\n    //遍历数组，进行判断分配\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]<midIndexVal){left.push(arr[i]);}//比基准点小的放在左边数组        \n        else{right.push(arr[i]);}//比基准点大的放在右边数组\n    }\n    //递归执行以上操作,对左右两个数组进行操作，直到数组长度为<=1；\n    return quickSort(left).concat(midIndexVal,quickSort(right));\n};  \n    quickSort(arr); \n/*******************************************************************************************/\n//用于输出结果 \nvar t2=(new Date().valueOf()); document.write(\"---开始时间---\"+ t2 +\"<br>---完成时间---\"+t+\"<br>-快速法-用时----\"+(t2-t)+\"---毫秒<br>\");\n</script></body></html>\n", "\n\n"]], "Tag": "程序设计"}
{"Answer": "# 如果问题解决，请点采纳，谢谢\r\n```\r\n#include &lt;stdio.h&gt;\r\nusing namespace std;\r\n\r\nstruct ListNode {\r\n    int val;\r\n    ListNode *next;\r\n    ListNode(int x) : val(x), next(NULL) {}\r\n};\r\n\r\nclass Solution {\r\npublic:\r\n    void deleteDuplication(ListNode** pHead)\r\n    {\r\n        if ((*pHead) == NULL || (*pHead)-&gt;next == NULL)\r\n            return;\r\n        ListNode* pNode = *pHead;\r\n        ListNode* preNode = NULL;\r\n        while (true)\r\n        {\t\t\t\r\n\t\t\tif (preNode == NULL || preNode-&gt;val != pNode-&gt;val)\r\n\t\t\t{\r\n\t\t\t\tpreNode = pNode;\r\n\t\t\t\tpNode = pNode-&gt;next;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif (preNode == NULL)\r\n\t\t\t\t{\r\n\t\t\t\t\t*pHead = pNode-&gt;next;\r\n\t\t\t\t}\r\n\t\t\t\tListNode* del = pNode;\r\n\t\t\t\tpreNode-&gt;next = pNode-&gt;next;\r\n\t\t\t\tpNode = preNode-&gt;next;\r\n\t\t\t\tdelete(del);\r\n\t\t\t}\r\n\t\t\tif (!pNode) break;\r\n        }\r\n    }\r\n};\r\nint main()\r\n{\r\n    //生成链表1-&gt;1-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5\r\n    ListNode* pHead = new ListNode(1);\r\n    pHead-&gt;next = new ListNode(1);\r\n    ListNode* pNode = pHead;\r\n    pNode = pNode-&gt;next;\r\n    pNode-&gt;next = new ListNode(3);\r\n    pNode = pNode-&gt;next;\r\n    pNode-&gt;next = new ListNode(3);\r\n    pNode = pNode-&gt;next;\r\n    pNode-&gt;next = new ListNode(4);\r\n    pNode = pNode-&gt;next;\r\n    pNode-&gt;next = new ListNode(4);\r\n    pNode = pNode-&gt;next;\r\n    pNode-&gt;next = new ListNode(5);\r\n\r\n    Solution so;\r\n\r\n    so.deleteDuplication(&amp;pHead);\r\n    pNode = pHead;\r\n    while (pNode)\r\n    {\r\n        printf(\"%d \", pNode-&gt;val);\r\n        pNode = pNode-&gt;next;\r\n    }\r\n    printf(\"\\n\");\r\n\r\n    return 0;\r\n}\r\n```", "Konwledge_Point": "重复n次操作", "Question": ["链表操作中即使函数传入的是链表指针，若根节点没有改变，链表也会改变？", ["事情是这样的，今天刷剑指offer时，对书中的内容产生了一点点小质疑，所以就拿VS2013和Code::Blocks都跑了一遍，两者结果是一致的，但程序执行的结果让我有点疑惑。", "\n\n", "题目如下：", "\n\n", "在一个排序的链表中，删除链表中重复的节点。", "\n\n", "例如: 1->2->3->3->4->4->5，删除后的结果为1->2->5。", "\n\n", "书中说由于头节点也可能被删除，所以函数应申明为", "\n\n", "void deleteDuplication(ListNode** pHead)\n", "\n\n", "而不是", "\n\n", "void deleteDuplication(ListNode* pHead)\n", "\n\n", "然后我就试了一下第二者，发现如果函数deleteDuplication处理完毕后，如果以形参形式传入的根节点pHead没有发生改变，则在main()函数里打印出链表的时候，链表和处理前的不一样了（即发生了改变）；但如果根节点发生了改变，在mian()函数里打印结果却发现链表和处理前一样（即没有发生改变）。", "\n\n", "所以我就懵了，按书上这句话的意思，应该就是如果传入的根节点为链表指针（即ListNode* pHead），则链表应该出了函数也不会发生任何变化。", "\n\n", "但实际的结果却是由根节点是否发生了变化而决定，求大家赐教哈。", "\n\n", "（注：ListNode** pHead是正常的，却是是出了函数也会改变链表实参本身）。", "\n\n", "还有一个问题就是如果在函数里delete掉形参链表一个节点，也会影响链表实参本身，这又是什么原理。", "\n\n", "完整代码如下：", "\n\n", "1）当形参根节点未发生变化时：", "\n\n", "#include <stdio.h>\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nclass Solution {\npublic:\n    void deleteDuplication(ListNode* pHead)\n    {\n        if (pHead == NULL || pHead->next == NULL)\n            return;\n        ListNode* pNode = pHead;\n        ListNode* preNode = NULL;\n        while (pNode)\n        {\n            bool deleteflag = false;\n            if (pNode->next && pNode->val == pNode->next->val)\n                deleteflag = true;\n\n            if (!deleteflag)\n            {\n                preNode = pNode;\n                pNode = pNode->next;\n            }\n            else\n            {\n                int value = pNode->val;\n                ListNode* next = pNode;\n                while (pNode && pNode->val == value)\n                {\n                    next = pNode->next;\n                    //delete pNode;\n                    pNode = next;\n                }\n                if (preNode == NULL)\n                    pHead = pNode;\n                else\n                    preNode->next = pNode;\n            }\n        }\n    }\n};\nint main()\n{\n    //生成链表1->2->3->3->4->4->5\n    ListNode* pHead = new ListNode(1);\n    pHead->next = new ListNode(2);\n    ListNode* pNode = pHead;\n    pNode = pNode->next;\n    pNode->next = new ListNode(3);\n    pNode = pNode->next;\n    pNode->next = new ListNode(3);\n    pNode = pNode->next;\n    pNode->next = new ListNode(4);\n    pNode = pNode->next;\n    pNode->next = new ListNode(4);\n    pNode = pNode->next;\n    pNode->next = new ListNode(5);\n\n\n    Solution so;\n\n    so.deleteDuplication(pHead);\n    pNode = pHead;\n    while (pNode)\n    {\n        printf(\"%d \", pNode->val);\n        pNode = pNode->next;\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n", "\n\n", "输出结果如下图：", "\n\n", "\n\n", "2）当形参根节点发生变化时：", "\n\n", "#include <stdio.h>\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nclass Solution {\npublic:\n    void deleteDuplication(ListNode* pHead)\n    {\n        if (pHead == NULL || pHead->next == NULL)\n            return;\n        ListNode* pNode = pHead;\n        ListNode* preNode = NULL;\n        while (pNode)\n        {\n            bool deleteflag = false;\n            if (pNode->next && pNode->val == pNode->next->val)\n                deleteflag = true;\n\n            if (!deleteflag)\n            {\n                preNode = pNode;\n                pNode = pNode->next;\n            }\n            else\n            {\n                int value = pNode->val;\n                ListNode* next = pNode;\n                while (pNode && pNode->val == value)\n                {\n                    next = pNode->next;\n                    //delete pNode;\n                    pNode = next;\n                }\n                if (preNode == NULL)\n                    pHead = pNode;\n                else\n                    preNode->next = pNode;\n            }\n        }\n    }\n};\nint main()\n{\n    //生成链表1->1->3->3->4->4->5\n    ListNode* pHead = new ListNode(1);\n    pHead->next = new ListNode(1);\n    ListNode* pNode = pHead;\n    pNode = pNode->next;\n    pNode->next = new ListNode(3);\n    pNode = pNode->next;\n    pNode->next = new ListNode(3);\n    pNode = pNode->next;\n    pNode->next = new ListNode(4);\n    pNode = pNode->next;\n    pNode->next = new ListNode(4);\n    pNode = pNode->next;\n    pNode->next = new ListNode(5);\n\n\n    Solution so;\n\n    so.deleteDuplication(pHead);\n    pNode = pHead;\n    while (pNode)\n    {\n        printf(\"%d \", pNode->val);\n        pNode = pNode->next;\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n", "\n\n", "输出结果如下图：", "\n\n", "\n\n", "3）当函数中delete掉形参链表的一个节点时", "\n\n", "无论形参根节点是否改变，实现链表都会发生变化。且在VS2013下，形参根节点发生改变时，程序会报内存访问出错。", "\n\n", "#include <stdio.h>\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nclass Solution {\npublic:\n\n\n    void deleteDuplication(ListNode* pHead)\n    {\n        if (pHead == NULL || pHead->next == NULL)\n            return;\n        ListNode* pNode = pHead;\n        ListNode* preNode = NULL;\n        while (pNode)\n        {\n            bool deleteflag = false;\n            if (pNode->next && pNode->val == pNode->next->val)\n                deleteflag = true;\n\n            if (!deleteflag)\n            {\n                preNode = pNode;\n                pNode = pNode->next;\n            }\n            else\n            {\n                int value = pNode->val;\n                ListNode* next = pNode;\n                while (pNode && pNode->val == value)\n                {\n                    next = pNode->next;\n                    delete pNode; //删除当前节点\n                    pNode = next; \n                }\n                if (preNode == NULL)\n                    pHead = pNode;\n                else\n                    preNode->next = pNode;\n            }\n        }\n    }\n};\nint main()\n{\n\n    ListNode* pHead = new ListNode(1);\n    pHead->next = new ListNode(1);\n    ListNode* pNode = pHead;\n    pNode = pNode->next;\n    pNode->next = new ListNode(3);\n    pNode = pNode->next;\n    pNode->next = new ListNode(3);\n    pNode = pNode->next;\n    pNode->next = new ListNode(4);\n    pNode = pNode->next;\n    pNode->next = new ListNode(4);\n    pNode = pNode->next;\n    pNode->next = new ListNode(5);\n\n\n    Solution so;\n    so.deleteDuplication(pHead);\n    pNode = pHead;\n    while (pNode)\n    {\n        printf(\"%d \", pNode->val);\n        pNode = pNode->next;\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n", "\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;修改完善如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;conio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;\nstruct Student {   &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;每个运动员对应一个结构体 \n    char ID[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;编号 \n    char Name[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;姓名 \n    float wy;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;蛙泳金牌数 \n    float yy;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;仰泳金牌数 \n    float dy;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;蝶泳金牌数 \n    float zyy;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;自由泳金牌数 \n    float All; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;总金牌数\n    char  pro[&lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;]; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;float pro;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;省份 \n}students[&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;];\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; num &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;计数器\nvoid Welcome(), Password(), Menu(), Load(), Input(), Edit(), deletee(),\n                           insert(), display(), search(), &lt;span class=\"hljs-keyword\"&gt;sort&lt;/span&gt;(), Save();&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;要用到的函数 \nvoid Copy(struct Student* arr, &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i, &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; j)\n{\n    strcpy(arr[i].ID, arr[j].ID);\n    strcpy(arr[i].Name, arr[j].Name);\n    arr[i].wy &amp;#61; arr[j].wy;\n    arr[i].yy &amp;#61; arr[j].yy;\n    arr[i].dy &amp;#61; arr[j].dy;\n    arr[i].zyy &amp;#61; arr[j].zyy;\n    arr[i].All &amp;#61; arr[j].All;\n    strcpy(arr[i].pro, arr[j].pro);&lt;span class=\"hljs-regexp\"&gt;//arr&lt;/span&gt;[i].pro &amp;#61; arr[j].pro;\n}\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; Student_SearchByName(char name[])//通过姓名来检索运动员\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; num; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (strcmp(students[i].Name, name) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)  //通过strcmp函数来对比运动员姓名&amp;#xff0c;找到返回在数组的位置 \n        {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; i;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;未找到返回 -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; \n}\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; Student_SearchByIndex(char id[])//通过编号来检索运动员信息\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; num; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (strcmp(students[i].ID, id) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)  //通过strcmp函数来对比学生id&amp;#xff0c;找到返回位置 \n        {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; i;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;   &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;未找到返回 -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; \n}\n\nvoid Student_DisplaySingle(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;)//输出表头\n{\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s %s %s %s %s %s %s %s\\n&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;编号&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;姓名&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;蛙泳金牌数&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;仰泳金牌数 &amp;#34;&lt;/span&gt;, \n                               &lt;span class=\"hljs-string\"&gt;&amp;#34;蝶泳金牌数 &amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;自由泳金牌数 &amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;总成绩&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;省份&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;-\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%s\\n&amp;#34;&lt;/span&gt;, students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].ID, students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].Name,\n                   students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].wy, students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].yy, students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].dy, students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].zyy, \n                   students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].All, students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].pro);\n}\nvoid Welcome()// 欢迎界面函数\n{\n    &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;color F5&amp;#34;&lt;/span&gt;); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;设置背景色为亮白色&amp;#xff0c;字体颜色为紫色\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t\\t|----------------------------------------------|\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t\\t|                   欢迎进入                   |\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t\\t|             游泳运动员成绩管理系统           |\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t\\t|----------------------------------------------|\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t\\t|----------------------------------------------|\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t\\t|         设计者&amp;#xff1a;才小呆                       |\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t\\t|----------------------------------------------|\\n&amp;#34;&lt;/span&gt;);\n}\nvoid Password()//输入密码 \n{\n    char mm[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\n\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t\\t 请输入登录密码:&amp;#34;&lt;/span&gt;);\n    gets_s(mm);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (strcmp(mm, &lt;span class=\"hljs-string\"&gt;&amp;#34;00&amp;#34;&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)//判断两个字符串是否相等&amp;#xff08;不能直接用“&amp;#61;&amp;#61;”&amp;#xff0c;只能用字符串比较函数&amp;#xff09;\n        Menu();\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t\\t 输入密码有误,请重新输入......\\n&amp;#34;&lt;/span&gt;);\n        Password();\n    }\n}\nvoid Menu() //菜单\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        Load();\n        &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t|--------------------------------------------------|\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t|                                                  |\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t|                 运动员成绩管理                   |\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t|                                                  |\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t|     1.录入运动员信息     2.修改运动员信息        |\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t|                                                  |\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t|     3.删除运动员信息     4.插入运动员信息        |\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t|                                                  |\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t|     5.显示运动员信息     6.查询运动员信息        |\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t|                                                  |\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t|     7.按总金牌数排序     0.退出系统              |\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t|                                                  |\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t|--------------------------------------------------|\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t请在&amp;#xff08;0—7&amp;#xff09;选择要进行的操作!\\n&amp;#34;&lt;/span&gt;); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;菜单的主页面\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;i);\n        switch (i) {\n        case &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:Input(); &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        case &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:Edit(); &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        case &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:deletee(); &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        case &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:insert(); &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        case &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:display(); &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        case &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;:search(); &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        case &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;sort&lt;/span&gt;(); &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        case &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;exit&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n        default:;\n        }\n        Save();\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n}\nvoid Input()//利用循环录入运动员信息\n{\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入编号:&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, students[num].ID); &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;canf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &amp;amp;students[num].ID);\n        getchar();\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入姓名:&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, students[num].Name); &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;canf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &amp;amp;students[num].Name);\n        getchar();\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入蛙泳金牌数:&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;students[num].wy);\n        getchar();\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入仰泳金牌数:&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;students[num].yy);\n        getchar();\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入蝶泳金牌数:&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;students[num].dy);\n        getchar();\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入自由泳金牌数:&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;students[num].zyy);\n        getchar();\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入省份:&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, students[num].pro);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;?\n        getchar();\n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;依次输入各项数据 \n        students[num].All &amp;#61; students[num].wy &amp;#43; students[num].yy &amp;#43; students[num].dy &amp;#43; students[num].zyy;  &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;输完数据后自动计算总金牌数 \n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (Student_SearchByIndex(students[num].ID) &amp;#61;&amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            num&amp;#43;&amp;#43;;  &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;移向下一个位置 \n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;编号重复&amp;#xff0c;输入数据无效 !!!\\n&amp;#34;&lt;/span&gt;);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否继续?(y/n)&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((getchar()) &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n}\nvoid Edit()//修改成绩\n{\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        char id[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n        &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要修改的运动员的编号:&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, id);   &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;canf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &amp;amp;id);\n        getchar();\n        &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt; &amp;#61; Student_SearchByIndex(id);  &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;调用搜查id函数&amp;#xff0c;根据其返回值确定位置 \n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt; &amp;#61;&amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;运动员不存在!\\n&amp;#34;&lt;/span&gt;);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;你要修改的运动员信息为:\\n&amp;#34;&lt;/span&gt;);\n            Student_DisplaySingle(&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;-- 请输入新值--\\n&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入编号:&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].ID); &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;canf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &amp;amp;students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].ID);\n            getchar();\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入姓名:&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].Name);&lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;canf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &amp;amp;students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].Name);\n            getchar();\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入蛙泳金牌数:&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].wy);\n            getchar();\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入仰泳金牌数:&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].yy);\n            getchar();\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入蝶泳金牌数:&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].dy);\n            getchar();\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入自由泳金牌数:&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].zyy);\n            getchar();\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入省份:&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].pro);\n            getchar(); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;重新录入一套新的数据替代 \n            students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].All &amp;#61; students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].wy &amp;#43; students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].yy &amp;#43; students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].dy &amp;#43; students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].zyy;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否继续?(y/n)&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((getchar()) &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n}\nvoid deletee()//删除运动员信息\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        char id[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n        &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要删除的运动员的编号:&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, id); &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;canf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &amp;amp;id);\n        getchar();\n        &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt; &amp;#61; Student_SearchByIndex(id);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;调用搜查id函数&amp;#xff0c;根据其返回值确定位置 \n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt; &amp;#61;&amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;运动员不存在!\\n&amp;#34;&lt;/span&gt;);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;你要删除的运动员信息为:\\n&amp;#34;&lt;/span&gt;);\n            Student_DisplaySingle(&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否真的要删除?(y/n)&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((getchar()) &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;; i &amp;lt; num - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;)\n                {\n                    Copy(students, i, i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n                    &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;tudents[i]&amp;#61;students[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;把后边的对象都向前移动\n                }\n                num--;\n            }\n            getchar();\n        }\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否继续?(y/n)&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((getchar()) &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n}\nvoid insert()//指定位置插入学生信息\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a, b, c;\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入你要插入的位置&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;gt; num) {\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入的位置有误&amp;#xff0c;请重新输入,当前共%d条数据\\n&amp;#34;&lt;/span&gt;, num);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a);\n    }\n    b &amp;#61; num - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; b &amp;gt;&amp;#61; a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; b--)\n    {\n        &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;trcpy(students[b&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].ID,students[b].ID);\n        &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;trcpy(students[b&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].Name,students[b].Name);\n        &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;tudents[b&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].wy&amp;#61;students[b].wy;\n        &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;tudents[b&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].yy&amp;#61;students[b].yy;\n        &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;tudents[b&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].dy&amp;#61;students[b].dy;\n        &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;tudents[b&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].zyy&amp;#61;students[b].zyy;\n        &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;tudents[b&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].All&amp;#61;students[b].All;\n        &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;tudents[b&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].pro&amp;#61;students[b].pro;  \n        Copy(students, b &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, b); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;根据其输入的位置&amp;#xff0c;将其及以后的数据向后移动一个位置 \n    }\n    num&amp;#43;&amp;#43;;\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入编号:&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, students[a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].ID); &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;canf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &amp;amp;students[a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].ID);\n    getchar();\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入姓名:&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, students[a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].Name); &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;canf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &amp;amp;students[a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].Name);\n    getchar();\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入蛙泳金牌数:&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;students[a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].wy);\n    getchar();\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入仰泳金牌数:&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;students[a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].yy);\n    getchar();\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入蝶泳金牌数:&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;students[a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].dy);\n    getchar();\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入自由泳金牌数:&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;students[a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].zyy);\n    getchar();\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入省份:&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, students[a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].pro);\n    getchar();\n    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;输入新数据 \n    students[a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].All &amp;#61; students[a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].wy &amp;#43; students[a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].yy &amp;#43; students[a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].dy &amp;#43; students[a - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].zyy;\n\n}\nvoid display()//显示已录入的运动员信息\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a;\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s %s %s %s %s %s %s %s\\n&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;编号&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;姓名&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;蛙泳金牌数&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;仰泳金牌数 &amp;#34;&lt;/span&gt;,\n                                        &lt;span class=\"hljs-string\"&gt;&amp;#34;蝶泳金牌数 &amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;自由泳金牌数 &amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;总成绩&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;省份&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;-------------------------------------------------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (a &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; a &amp;lt; num; a&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%s\\n&amp;#34;&lt;/span&gt;, students[a].ID, students[a].Name,\n            students[a].wy, students[a].yy, students[a].dy, students[a].zyy, students[a].All, students[a].pro);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;按任意键继续...&amp;#34;&lt;/span&gt;);\n    _getch();\n}\nvoid search()//查询运动员信息\n{\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        char name[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n        &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要查询的运动员的姓名:&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, name);  &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;canf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &amp;amp;name);\n        getchar();\n        &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt; &amp;#61; Student_SearchByName(name); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;调用搜查name函数&amp;#xff0c;根据其返回值确定位置 \n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt; &amp;#61;&amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;运动员不存在!\\n&amp;#34;&lt;/span&gt;);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;你要查询的运动员信息为:\\n&amp;#34;&lt;/span&gt;);\n            Student_DisplaySingle(&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否继续?(y/n)&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((getchar()) &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n}\nvoid &lt;span class=\"hljs-keyword\"&gt;sort&lt;/span&gt;()//根据总金牌数排序\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i, j;\n    &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;truct students tmp;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; num; i&amp;#43;&amp;#43;)\n    {\n        students[i].All &amp;#61; students[i].wy &amp;#43; students[i].yy &amp;#43; students[i].dy &amp;#43; students[i].zyy;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; num; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt; num - i; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (students[j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].All &amp;lt; students[j].All)\n            {\n\n                Copy(students, num, j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n                Copy(students, j - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, j);\n                Copy(students, j, num);\n                &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;tmp&amp;#61;students[j-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;tudents[j-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;students[j];\n                &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;tudents[j]&amp;#61;tmp;      &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;冒泡排序 \n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a;\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s %s %s %s %s %s %s %s\\n&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;编号&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;姓名&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;蛙泳金牌数&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;仰泳金牌数 &amp;#34;&lt;/span&gt;, \n                                    &lt;span class=\"hljs-string\"&gt;&amp;#34;蝶泳金牌数 &amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;自由泳金牌数 &amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;总成绩&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;省份&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;-------------------------------------------------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (a &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; a &amp;lt; num; a&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%s\\n&amp;#34;&lt;/span&gt;, students[a].ID, students[a].Name,\n            students[a].wy, students[a].yy, students[a].dy, students[a].zyy, students[a].All, students[a].pro);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;按任意键继续...&amp;#34;&lt;/span&gt;);\n    _getch();\n}\nvoid Save()\n{\n    FILE* fp &amp;#61; fopen(&lt;span class=\"hljs-string\"&gt;&amp;#34;temp.txt&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;w&amp;#43;&amp;#34;&lt;/span&gt;);\n    fprintf(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, num);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; num; i&amp;#43;&amp;#43;)\n    {\n        fprintf(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;%s %s %f %f %f %f %f %s\\n&amp;#34;&lt;/span&gt;, students[i].ID, students[i].Name, students[i].wy,\n                 students[i].yy, students[i].dy, students[i].zyy, students[i].All, students[i].pro);\n    }\n    fclose(fp);\n}\nvoid Load()\n{\n    FILE* fp &amp;#61; fopen(&lt;span class=\"hljs-string\"&gt;&amp;#34;temp.txt&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (fp &amp;#61;&amp;#61; NULL) {\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Open file fail!\\n&amp;#34;&lt;/span&gt;); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;修改\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    fscanf(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;num);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; num; i&amp;#43;&amp;#43;)\n    {\n        fscanf(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;%s %s %f %f %f %f %f %s\\n&amp;#34;&lt;/span&gt;, students[i].ID, students[i].Name, &amp;amp;students[i].wy, \n            &amp;amp;students[i].yy, &amp;amp;students[i].dy, &amp;amp;students[i].zyy, &amp;amp;students[i].All, &amp;amp;students[i].pro);\n    }\n    fclose(fp);\n}\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    Welcome();\n    Password();\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/590222354556195.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["有没有人可以改一改，4点前需要，急", ["设计一个游泳运动员成绩管理系统，我自己零零碎碎的写了，但是有错，不怎么会改，改成正确的，能正常运行就可以", "\n", "\n\n\n```", "#", "include", "<stdio.h>", "\n", "#", "include", "<conio.h>", "\n", "#", "include", "<stdlib.h>", "\n", "#", "include", "<string.h>", "\n", "struct", " ", "Student", "{   ", "//每个运动员对应一个结构体 ", "\n    ", "char", " ID[", "20", "];", "//编号 ", "\n    ", "char", " Name[", "10", "];", "//姓名 ", "\n    ", "float", " wy;", "//蛙泳金牌数 ", "\n    ", "float", " yy;", "//仰泳金牌数 ", "\n    ", "float", " dy;", "//蝶泳金牌数 ", "\n    ", "float", " zyy;", "//自由泳金牌数 ", "\n    ", "float", " All; ", "//总金牌数", "\n    ", "float", " pro;", "//省份 ", "\n}students[", "1000", "];\n", "int", " num=", "0", "; ", "//计数器", "\n", "void", " ", "Welcome", "()", ",", "Password", "()", ",", "Menu", "()", ",", "Load", "()", ",", "Input", "()", ",", "Edit", "()", ",", "deletee", "()", ",", "insert", "()", ",", "display", "()", ",", "search", "()", ",", "sort", "()", ",", "Save", "()", ";", "//要用到的函数 ", "\n", "void", " ", "Copy", "(", "struct", " Student *arr,", "int", " i,", "int", " j)", "\n", "{\n    ", "strcpy", "(arr[i].ID,arr[j].ID);\n    ", "strcpy", "(arr[i].Name,arr[j].Name);\n    arr[i].wy = arr[j].wy;\n    arr[i].yy = arr[j].yy;\n    arr[i].dy = arr[j].dy;\n    arr[i].zyy = arr[j].zyy;\n    arr[i].All = arr[j].All;\n    arr[i].pro = arr[j].pro;\n}\n", "int", " ", "Student_SearchByName", "(", "char", " name[])", "//通过姓名来检索运动员", "\n", "{\n     ", "int", " i;\n     ", "for", " (i=", "0", ";i<num;i++)\n     {\n         ", "if", " (", "strcmp", "(students[i].Name,name)==", "0", ")  ", "//通过strcmp函数来对比运动员姓名，找到返回在数组的位置 ", "\n         {\n              ", "return", " i;\n       }\n     }\n     ", "return", " ", "-1", ";    ", "//未找到返回 -1 ", "\n}\n", "int", " ", "Student_SearchByIndex", "(", "char", " id[])", "//通过编号来检索运动员信息", "\n", "{\n     ", "int", " i;\n     ", "for", " (i=", "0", ";i<num;i++)\n     {\n         ", "if", " (", "strcmp", "(students[i].ID,id)==", "0", ")  ", "//通过strcmp函数来对比学生id，找到返回位置 ", "\n         {\n              ", "return", " i;\n         }  \n     }\n     ", "return", " ", "-1", ";   ", "//未找到返回 -1 ", "\n}\n\n", "void", " ", "Student_DisplaySingle", "(", "int", " index)", "//输出表头", "\n", "{\n     ", "printf", "(", "\"%10s%10s%8s%8s%8s%10s\\n\"", ",", "\"编号\"", ",", "\"姓名\"", ",", "\"蛙泳金牌数\"", ",", "\"仰泳金牌数 \"", ",", "\"蝶泳金牌数 \"", ",", "\"自由泳金牌数 \"", ",", "\"总成绩\"", ",", "\"省份\"", ");\n     ", "printf", "(", "\"-\\n\"", ");\n     ", "printf", "(", "\"%10s%10s%8.2f%8.2f%8.2f%8.2f%10.2f%10.2f\\n\"", ",stud\nents[index].ID,students[index].Name,\n              students[index].wy,students[index].yy,students[index].dy,students[index].zyy,students[index].All,students[index].pro);\n}\n\n", "void", " ", "Welcome", "()", "// 欢迎界面函数", "\n", "{   ", "system", "(", "\"color F5\"", "); ", "//设置背景色为亮白色，字体颜色为紫色", "\n    ", "printf", "(", "\"\\t\\t|----------------------------------------------|\\n\"", ");\n    ", "printf", "(", "\"\\t\\t|                   欢迎进入                   |\\n\"", ");\n    ", "printf", "(", "\"\\t\\t|             游泳运动员成绩管理系统           |\\n\"", ");\n    ", "printf", "(", "\"\\t\\t|----------------------------------------------|\\n\"", ");\n    ", "printf", "(", "\"\\t\\t|----------------------------------------------|\\n\"", ");\n    ", "printf", "(", "\"\\t\\t|         设计者：才小呆                       |\\n\"", ");\n    ", "printf", "(", "\"\\t\\t|----------------------------------------------|\\n\"", ");\n}\n", "void", " ", "Password", "()", "//输入密码 ", "\n", "{\n   ", "char", " mm[", "20", "];\n   ", "printf", "(", "\"\\n\\n\\n\"", ");\n   ", "printf", "(", "\"\\t\\t 请输入登录密码:\"", ");\n   ", "gets", "(mm);\n   ", "if", "(", "strcmp", "(mm,", "\"00\"", ")==", "0", ")", "//判断两个字符串是否相等（不能直接用“==”，只能用字符串比较函数）", "\n      ", "Menu", "();\n   ", "else", "\n      {\n          ", "printf", "(", "\"\\n\"", ");\n        ", "printf", "(", "\"\\t\\t 输入密码有误,请重新输入......\\n\"", ");\n        ", "Password", "();\n      }\n}\n", "void", " ", "Menu", "()", " ", "//菜单", "\n", "{    ", "int", " i;\n    ", "while", "(", "1", "){\n    ", "Load", "();\n    ", "system", "(", "\"cls\"", ");\n    ", "printf", "(", "\"\\t|--------------------------------------------------|\\n\"", ");\n    ", "printf", "(", "\"\\t|                                                  |\\n\"", ");\n    ", "printf", "(", "\"\\t|                 运动员成绩管理                   |\\n\"", ");\n    ", "printf", "(", "\"\\t|                                                  |\\n\"", ");\n    ", "printf", "(", "\"\\t|     1.录入运动员信息     2.修改运动员信息        |\\n\"", ");\n    ", "printf", "(", "\"\\t|                                                  |\\n\"", ");\n    ", "printf", "(", "\"\\t|     3.删除运动员信息     4.插入运动员信息        |\\n\"", ");\n    ", "printf", "(", "\"\\t|                                                  |\\n\"", ");\n    ", "printf", "(", "\"\\t|     5.显示运动员信息     6.查询运动员信息        |\\n\"", ");\n    ", "printf", "(", "\"\\t|                                                  |\\n\"", ");\n    ", "printf", "(", "\"\\t|     7.按总金牌数排序     0.退出系统              |\\n\"", "); \n    ", "printf", "(", "\"\\t|                                                  |\\n\"", "); \n    ", "printf", "(", "\"\\t|--------------------------------------------------|\\n\"", ");  \n    ", "printf", "(", "\"\\t请在（0—7）选择要进行的操作!\\n\"", "); ", "//菜单的主页面", "\n    ", "scanf", "(", "\"%d\"", ",&i);\n        ", "switch", "(i){\n       ", "case", " ", "1", ":", "Input", "();", "break", ";\n       ", "case", " ", "2", ":", "Edit", "();", "break", ";\n       ", "case", " ", "3", ":", "deletee", "();", "break", ";\n       ", "case", " ", "4", ":", "insert", "();", "break", ";\n       ", "case", " ", "5", ":", "display", "();", "break", ";\n       ", "case", " ", "6", ":", "search", "();", "break", ";\n       ", "case", " ", "7", ":", "sort", "();", "break", ";\n       ", "case", " ", "0", ":", "exit", "(", "0", ");\n       ", "default", ":  ;\n    }\n    ", "Save", "();\n}\n     ", "return", "; \n} \n\n", "void", " ", "Input", "()", "//利用循环录入运动员信息", "\n", "{\n     ", "while", "(", "1", ")\n     {\n         ", "printf", "(", "\"请输入编号:\"", ");\n         ", "scanf", "(", "\"%s\"", ",&students[num].ID);\n         ", "getchar", "();\n         ", "printf", "(", "\"请输入姓名:\"", ");\n         ", "scanf", "(", "\"%s\"", ",&students[num].Name);\n         ", "getchar", "();\n         ", "printf", "(", "\"请输入蛙泳金牌数:\"", ");\n         ", "scanf", "(", "\"%f\"", ",&students[num].wy);\n         ", "getchar", "();\n         ", "printf", "(", "\"请输入仰泳金牌数:\"", ");\n         ", "scanf", "(", "\"%f\"", ",&students[num].yy);\n         ", "getchar", "();\n         ", "printf", "(", "\"请输入蝶泳金牌数:\"", ");\n         ", "scanf", "(", "\"%f\"", ",&students[num].dy);\n         ", "getchar", "();\n         ", "printf", "(", "\"请输入自由泳金牌数:\"", ");\n         ", "scanf", "(", "\"%f\"", ",&students[num].zyy); \n         ", "getchar", "();\n         ", "printf", "(", "\"请输入省份:\"", ");\n         ", "scanf", "(", "\"%f\"", ",&students[num].pro); \n         ", "getchar", "();\n          ", "//依次输入各项数据 ", "\n         students[num].All=students[num].wy+students[num].yy+students[num].dy+students[num].zyy;    ", "//输完数据后自动计算总金牌数 ", "\n         ", "if", "(", "Student_SearchByIndex", "(students[num].ID) == ", "-1", ")\n         {\n             num++;  ", "//移向下一个位置 ", "\n         }\n         ", "else", "\n         {\n             ", "printf", "(", "\"编号重复，输入数据无效 !!!\\n\"", ");\n         }\n         \n          ", "printf", "(", "\"是否继续?(y/n)\"", ");\n         ", "if", " (", "getchar", "()==", "'n'", ")\n         {\n              ", "break", ";\n         }\n     }\n}\n", "void", " ", "Edit", "()", "//修改成绩", "\n", "{\n      ", "while", "(", "1", ")\n     {\n         ", "char", " id[", "20", "];\n         ", "int", " index;\n         ", "printf", "(", "\"请输入要修改的运动员的编号:\"", ");\n         ", "scanf", "(", "\"%s\"", ",&id);\n         ", "getchar", "();\n         index=", "Student_SearchByIndex", "(id);  ", "//调用搜查id函数，根据其返回值确定位置 ", "\n         ", "if", " (index==", "-1", ")\n         {\n              ", "printf", "(", "\"运动员不存在!\\n\"", ");\n         }\n         ", "else", "\n         {\n              ", "printf", "(", "\"你要修改的运动员信息为:\\n\"", ");\n              ", "Student_DisplaySingle", "(index);\n              ", "printf", "(", "\"-- 请输入新值--\\n\"", ");\n              ", "printf", "(", "\"请输入编号:\"", ");\n              ", "scanf", "(", "\"%s\"", ",&students[index].ID);\n              ", "getchar", "();\n              ", "printf", "(", "\"请输入姓名:\"", ");\n              ", "scanf", "(", "\"%s\"", ",&students[index].Name);\n              ", "getchar", "();\n              ", "printf", "(", "\"请输入蛙泳金牌数:\"", ");\n              ", "scanf", "(", "\"%f\"", ",&students[index].wy);\n              ", "getchar", "();\n              ", "printf", "(", "\"请输入仰泳金牌数:\"", ");\n              ", "scanf", "(", "\"%f\"", ",&students[index].yy);\n              ", "getchar", "();\n              ", "printf", "(", "\"请输入蝶泳金牌数:\"", ");\n              ", "scanf", "(", "\"%f\"", ",&students[index].dy);\n              ", "getchar", "();\n              ", "printf", "(", "\"请输入自由泳金牌数:\"", ");\n              ", "scanf", "(", "\"%f\"", ",&students[index].zyy); \n              ", "getchar", "();\n                ", "printf", "(", "\"请输入省份:\"", ");\n              ", "scanf", "(", "\"%f\"", ",&students[index].pro); \n              ", "getchar", "(); ", "//重新录入一套新的数据替代 ", "\n              students[index].All=students[index].wy+students[index].yy+students[index].dy+students[index].zyy;\n         }\n         ", "printf", "(", "\"是否继续?(y/n)\"", ");\n         ", "if", " (", "getchar", "()==", "'n'", ")\n         {\n              ", "break", ";\n         }\n     }\n}\n", "void", " ", "deletee", "()", "//删除运动员信息", "\n", "{\n      ", "int", " i;\n     ", "while", "(", "1", ")\n     {\n         ", "char", " id[", "20", "];\n         ", "int", " index;\n         ", "printf", "(", "\"请输入要删除的运动员的编号:\"", ");\n         ", "scanf", "(", "\"%s\"", ",&id);\n         ", "getchar", "();\n         index=", "Student_SearchByIndex", "(id);   ", "//调用搜查id函数，根据其返回值确定位置 ", "\n         ", "if", " (index==", "-1", ")\n         {\n              ", "printf", "(", "\"运动员不存在!\\n\"", ");\n         }\n         ", "else", "\n         {\n              ", "printf", "(", "\"你要删除的运动员信息为:\\n\"", ");\n              ", "Student_DisplaySingle", "(index);\n              ", "printf", "(", "\"是否真的要删除?(y/n)\"", ");\n              ", "if", " (", "getchar", "()==", "'y'", ")\n              {\n                   ", "for", " (i=index;i<num", "-1", ";i++)\n                   {\n                          ", "Copy", "(students,i,i+", "1", ");\n                       ", "//students[i]=students[i+1];    //把后边的对象都向前移动", "\n                   }\n                   num--;\n              }\n             ", "getchar", "();\n         }\n         ", "printf", "(", "\"是否继续?(y/n)\"", ");\n         ", "if", " (", "getchar", "()==", "'n'", ")\n         {\n              ", "break", ";\n         }\n     }\n}\n", "void", " ", "insert", "()", "//指定位置插入学生信息", "\n", "{\n        ", "int", " a,b,c;\n        ", "printf", "(", "\"请输入你要插入的位置\"", ");\n        ", "scanf", "(", "\"%d\"", ",&a);\n        ", "if", "(a>num) {\n        ", "printf", "(", "\"输入的位置有误，请重新输入,当前共%d条数据\\n\"", ",num); \n        ", "scanf", "(", "\"%d\"", ",&a);}\n \n         b=num", "-1", ";\n         ", "for", "(;b>=a", "-1", ";b--)\n         {\n             ", "//strcpy(students[b+1].ID,students[b].ID);", "\n             ", "//strcpy(students[b+1].Name,students[b].Name);", "\n             ", "//students[b+1].wy=students[b].wy;", "\n             ", "//students[b+1].yy=students[b].yy;", "\n             ", "//students[b+1].dy=students[b].dy;", "\n             ", "//students[b+1].zyy=students[b].zyy;", "\n             ", "//students[b+1].All=students[b].All;", "\n             ", "//students[b+1].pro=students[b].pro;  ", "\n            ", "Copy", "(students,b+", "1", ",b); ", "//根据其输入的位置，将其及以后的数据向后移动一个位置 ", "\n             \n         }\n         num++;\n         ", "printf", "(", "\"请输入编号:\"", ");\n         ", "scanf", "(", "\"%s\"", ",&students[a", "-1", "].ID);\n         ", "getchar", "();\n         ", "printf", "(", "\"请输入姓名:\"", ");\n         ", "scanf", "(", "\"%s\"", ",&students[a", "-1", "].Name);\n         ", "getchar", "();\n         ", "printf", "(", "\"请输入蛙泳金牌数:\"", ");\n         ", "scanf", "(", "\"%f\"", ",&students[a", "-1", "].wy);\n         ", "getchar", "();\n         ", "printf", "(", "\"请输入仰泳金牌数:\"", ");\n         ", "scanf", "(", "\"%f\"", ",&students[a", "-1", "].yy);\n         ", "getchar", "();\n         ", "printf", "(", "\"请输入蝶泳金牌数:\"", ");\n         ", "scanf", "(", "\"%f\"", ",&students[a", "-1", "].dy);\n         ", "getchar", "();\n         ", "printf", "(", "\"请输入自由泳金牌数:\"", ");\n         ", "scanf", "(", "\"%f\"", ",&students[a", "-1", "].zyy); \n         ", "getchar", "();\n         ", "printf", "(", "\"请输入省份:\"", ");\n         ", "scanf", "(", "\"%f\"", ",&students[a", "-1", "].pro); \n         ", "getchar", "();\n         ", "//输入新数据 ", "\n         students[a", "-1", "].All=students[a", "-1", "].wy+students[a", "-1", "].yy+students[a", "-1", "].dy+students[a", "-1", "].zyy;\n \n}\n", "void", " ", "display", "()", "//显示已录入的运动员信息", "\n", "{\n     ", "int", " a;\n     ", "printf", "(", "\"%10s%10s%8s%8s%8s%8s%10s%10s\\n\"", ",", "\"编号\"", ",", "\"姓名\"", ",", "\"蛙泳金牌数\"", ",", "\"仰泳金牌数 \"", ",", "\"蝶泳金牌数 \"", ",", "\"自由泳金牌数 \"", ",", "\"总成绩\"", ",", "\"省份\"", ");\n     ", "printf", "(", "\"-------------------------------------------------------------\\n\"", ");\n     ", "for", " (a=", "0", ";a<num;a++)\n     {\n         ", "printf", "(", "\"%10s%10s%8.2f%8.2f%8.2f%8.2f%10.2f%10.2f\\n\"", ",students[a].ID,students[a].Name,\n              students[a].wy,students[a].yy,students[a].dy,students[a].zyy,students[a].All,students[a].pro);\n     }\n}\n", "void", " ", "search", "()", "//查询运动员信息", "\n", "{\n     ", "while", "(", "1", ")\n     {\n         ", "char", " name[", "20", "];\n         ", "int", " index;\n         ", "printf", "(", "\"请输入要查询的运动员的姓名:\"", ");\n         ", "scanf", "(", "\"%s\"", ",&name);\n         ", "getchar", "();\n         index=", "Student_SearchByName", "(name);   ", "//调用搜查name函数，根据其返回值确定位置 ", "\n         ", "if", " (index==", "-1", ")\n         {\n              ", "printf", "(", "\"运动员不存在!\\n\"", ");\n         }\n         ", "else", "\n         {\n              ", "printf", "(", "\"你要查询的运动员信息为:\\n\"", ");\n              ", "Student_DisplaySingle", "(index);\n         }\n         ", "printf", "(", "\"是否继续?(y/n)\"", ");\n         ", "if", " (", "getchar", "()==", "'n'", ")\n         {\n              ", "break", ";\n         }\n     }\n}\n\n", "void", " ", "sort", "()", "//根据总金牌数排序", "\n", "{\n     ", "int", " i,j;\n     ", "//struct students tmp;", "\n     ", "for", " (i=", "0", ";i<num;i++)\n     {\n         students[i].All=students[i].wy+students[i].yy+students[i].dy+students[i].zyy;\n     }\n     ", "for", " (i=", "0", ";i<num;i++)\n     {\n         ", "for", " (j=", "1", ";j<num-i;j++)\n         {\n              ", "if", " (students[j", "-1", "].All<students[j].All)\n              {\n                  \n                   ", "Copy", "(students,num,j", "-1", ");\n                   ", "Copy", "(students,j", "-1", ",j);\n                   ", "Copy", "(students,j,num); \n                   ", "//tmp=students[j-1];", "\n                   ", "//students[j-1]=students[j];", "\n                   ", "//students[j]=tmp;      //冒泡排序 ", "\n            }  \n         }\n     }\n     ", "int", " a;\n     ", "printf", "(", "\"%10s%10s%8s%8s%8s%8s%10s%10s\\n\"", ",", "\"编号\"", ",", "\"姓名\"", ",", "\"蛙泳金牌数\"", ",", "\"仰泳金牌数 \"", ",", "\"蝶泳金牌数 \"", ",", "\"自由泳金牌数 \"", ",", "\"总成绩\"", ",", "\"省份\"", ");\n     ", "printf", "(", "\"-------------------------------------------------------------\\n\"", ");\n     ", "for", " (a=", "0", ";a<num;a++)\n     {\n         ", "printf", "(", "\"%10s%10s%8.2f%8.2f%8.2f%8.2f%10.2f%10.2f\\n\"", ",students[a].ID,students[a].Name,\n              students[a].wy,students[a].yy,students[a].dy,students[a].zyy,students[a].All,students[a].pro);\n     }\n} \n", "void", " ", "Save", "()", "\n", "{\n    FILE*fp = ", "fopen", "(", "\"temp.txt\"", ",", "\"w+\"", ");\n    ", "fprintf", "(fp,", "\"%d\\n\"", ",num);\n    ", "for", "(", "int", " i = ", "0", " ; i< num ;i++)\n    {\n        ", "fprintf", "(fp,", "\"%s %s %f %f %f %f %f %f\\n\"", ",students[i].ID,students[i].Name,students[i].wy,students[i].yy,students[i].dy,students[i].zyy,students[i].All,students[i].pro);\n    }\n    ", "fclose", "(fp);\n}\n", "void", " ", "Load", "()", "\n", "{\n    FILE*fp = ", "fopen", "(", "\"temp.txt\"", ",", "\"r\"", ");\n    ", "fscanf", "(fp,", "\"%d\"", ",&num);\n    ", "for", "(", "int", " i = ", "0", " ; i< num ;i++)\n    {\n        ", "fscanf", "(fp,", "\"%s %s %f %f %f %f %f %f\\n\"", ",students[i].ID,students[i].Name,&students[i].wy,&students[i].yy,&students[i].dy,&students[i].zyy,&students[i].All,&students[i].pro);\n    }\n    ", "fclose", "(fp);\n} \n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;上面x是&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;x);\n&lt;span class=\"hljs-constructor\"&gt;ListDelete(L,&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;;\n下面\nvoid &lt;span class=\"hljs-constructor\"&gt;LocateElem(LinkList L,&lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;应该为void &lt;span class=\"hljs-constructor\"&gt;LocateElem(LinkList L,&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;\n\nvoid &lt;span class=\"hljs-constructor\"&gt;LocateElem(LinkList L,&lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;中\np-&amp;gt;data.wages!&amp;#61;x\nwages是&lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt;数组&amp;#xff0c;不能直接&amp;#61;&amp;#61;或者!&amp;#61;&amp;#xff0c;如果x也是字符串要用strcmp比较&amp;#xff0c;如果x只是&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;#xff0c;那么需要先把x转成字符串或者wages转成&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;了比较。\n\n下面printf中不需要加&amp;amp;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["数据结构链表指针无法与整数比较无法运行", ["问题遇到的现象和发生背景", "\n", "无法运行，在另一个程序上可以运行出结果，但在这个程序上不行、", "\n", "问题相关代码，请勿粘贴截图", "\n", "#include<stdio.h>", "#include<stdlib.h>", "#include<windows.h>", "//结点类型定义", "typedef struct{", "int id;//职工号", "char name[00];//名字", "char sex[10];//性别", "char birthday[15];//出生年月", "char wages[15];//工资", "char address[60];//住址", "char education[10];//学历", "char positions[10];//职务", "} ElemType;", "typedef struct node{", "ElemType data;", "struct node* next;", "}LNode,* LinkList;", "\n", "//函数声明", "void ListCreate(LinkList &L,int n);  //创建员工基本信息链表", "void ListPrint(LinkList L); //浏览员工基本信息", "void LocateElem(LinkList L,int x); //查找 某个员工基本信息", "void ListInsert(LinkList &L,ElemType e); //添加员工信息到单链表", "void ListDelete(LinkList &L,int x); //删除一个员工信息", "void welcome();", "//主函数", "int main()", "{system(\"color 3f\");", "int control;           // 循环中控制操作", "int x;                 //查找的员工学号", "int n;                 //欲创建的员工个数", "ElemType e;            //员工信息", "LinkList p;            //工作指针", "LinkList L;            //链表头指针", "while(1){", "printf(\" 1创造链表 2输出链表 3查找 4插入 5删除 6 结束程序\\n\");", "//主循环", "scanf(\"%d\",&control);", "printf(\"请输入要创建的员工个数n=：\\n\");", "scanf(\"%d\",&n);", "while(control)", "{", "switch(control)", "{", "case 1:", "{", "printf(\"请依次输入员工职工号，姓名，出生年月日，性别，住址，学历，工资\\n\");", "ListCreate(L,n);", "};break;", "case 2:", "ListPrint(L);break;//输出链表内容 ", "\n", "case 3:", "{", "printf(\"请输入要查找的员工工资\\n\");", "scanf(\"%d\",&x);", "LocateElem(L,x);", "};break;", "case 4:", "{", "printf(\"请输入欲插入的员工信息\\n\");", " scanf(\"%d6个%s\",&p->data.id,p->data.name,&p->data.birthday,p->data.sex,p->data.address,p->data.education,p->data.wages); //输入元素值 ，职工号，姓名，出生年月日，性别，住址，学历，工资", "ListInsert(L,e);", "};break;", "case 5:", "{", "printf(\"请输入欲删除员工的职工号\\n\");", "scanf(\"%d\",&x);", "ListDelete(L,x);", "};break;", "default:", "{", "printf(\"程序结束\\n\");", "exit(0);", "}break;//结束程序", "}", "printf(\"0结束程序 1创造链表 2输出链表 3查找 4插入 5删除\\n\");", "scanf(\"%d\",&control);", "}", "}", "return 0;", "}", "\n", "void ListCreate(LinkList &L,int n){", "      //正位序输入n个元素的值，建立带表头结点的单链表L", "     LinkList p,r;", "     int i;", "FILE *fp;//文件", "fp=fopen(\"employee.txt\",\"a+\");", "    if (fp == NULL)                    //判断文件是否成功打开", "    {", "        printf(\"File open failed!\\n\");", "        exit(0);", "    }", "  L = (LinkList) malloc (sizeof(LNode));", "      L->next=NULL;", "      r=L;                                  //尾指针r指向头结点", "      for(i=0;i<n;++i){", "         p = (LinkList) malloc (sizeof(LNode));      //生成新结点", "            scanf(\"%d6个%s\",&p->data.id,p->data.name,&p->data.birthday,p->data.sex,p->data.address,p->data.education,p->data.wages); //输入元素值 ，职工号，姓名，出生年月日，性别，住址，学历，工资", "            p->next=NULL; r->next=p;       //插入到表尾", "            r=p;                        //r指向新的尾结点", "      }", "    fprintf(fp,\"姓名：%c\\n性别：%c\\n职工号：%d\\n\",p->data.name,p->data.sex,p->data.id);", "    fprintf(fp,\"出生年月日：%d年%d月%d日\\n\",p->data.birthday);", "    fprintf(fp,\"工资：%d\\n住址：%c\\n学历：%c\\n职务：%c\\n\\n\",p->data.wages,p->data.address,p->data.education,p->data.positions);", "    fclose(fp);", "}", "\n", "//输出链表的值", "void ListPrint(LinkList L)", "{", "LinkList p=L->next;", "if(!p)", "printf(\"没有元素输出\\n\");", "while (p)", "{", "printf(\"%d6个%s\",&p->data.id,p->data.name,&p->data.birthday,p->data.sex,p->data.address,p->data.education,p->data.wages); //输chu元素值 ，职工号，姓名，出生年月日，性别，住址，学历，工资", "p=p->next;", "}", "}", "//工资定位", "void LocateElem(LinkList L,char x)", "{", "LinkList p=L->next;", "int j=0;", "while ((p)&&(p->data.wages!=x))", "{p=p->next; j++;}", "if(!p)", "printf(\"没有该信息\\n\");", "else", "printf(\"%d6个%s\",&p->data.id,p->data.name,&p->data.birthday,p->data.sex,p->data.address,p->data.education,p->data.wages); //输chu元素值 ，职工号，姓名，出生年月日，性别，住址，学历，工资 ", "\n", "}", "\n", "//插入", "void ListInsert(LinkList &L,ElemType e)", "{", "// 在带头结点的单链线性表L表尾插入元素e", "LinkList q,p=L;", "while (p->next)", "{p=p->next;}", "q=(LinkList)malloc(sizeof(LNode));", "p->next=q;", "q->data=e;", "q->next=NULL;", "}", "//删除", "void ListDelete(LinkList &L,int x)", "{", "LinkList q,p=L;", "while ((p->next)&&(p->next->data.id!=x))", "p=p->next;", "if(!p->next)", "printf(\"没有找到学号为%d的学生信息\\n\",x);", "else", "{", "q=p->next;", "p->next=p->next->next;", "free(q);", "}", "}", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "改变x类型为char", "\n", "我想要达到的结果", "\n", "可以有正确结果.", "/", "要求职工信息包括职工号、姓名、性别、出生年月、学历、职务、工资、住址、", "电话等（职工号不重复）。试设计一个职工信息管理系统，包括以下功能：", "a) 系统以菜单方式工作；000", "b) 职工信息录入功能(职工信息用文件保存)－－输入；000", "c) 职工信息浏览功能 －－输出；000", "d) 查询或排序功能：(至少一种查询方式)  －－算法；", "  e) 按工资查询；", "  f) 按学历查询。", "/"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;是不是没有#include &amp;lt;stdio.h&amp;gt;啊&amp;#xff0c;找不到scanf的定义啊&lt;br /&gt;\n &lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["请问我的代码应该怎么修改？", ["实验十二 静态表的查找", "\n\n", "一、实验目的", "\n\n", "1. 掌握顺序查找的算法实现。", "\n\n", "2. 掌握二分查找操作的算法实现及实现该查找的前提。", "\n\n", "3. 理解并掌握哈希查找的算法实现过程。", "\n\n", "二、实验内容", "\n\n", "建立顺序查找表，并在此查找表上分别实现顺序查找和二分查找操作；建立哈希表，并在此表上实现哈希查找。", "\n\n", "难度A：根据输入的查找表的长度n和n个关键字值，分别建立顺序查找表，分别进行顺序查找和二分查找；个人完成，评分最高至70分。( 具体数据值请参考课后P362页实验题9的1和2两题)", "\n\n", "难度B：根据输入的查找表的长度n和n个关键字值，构建哈希表，并实现哈希查找；个人完成，评分最高至90分。(具体数据值参考课后P362页实验题5)", "\n\n", "难度C：在主程序中要求设计一个菜单，允许用户通过菜单多次选择执行哪一种查找操作；个人完成，评分最高至100分。", "\n\n", "实验步骤", "\n\n", "查找操作是根据给定的某个值，在查找表中确定一个其关键字等于给定值得数据元素", "\n\n", "或记录的过程。若查找表中存在这样一个记录，则称“查找成功”。查找结果给出整个记录的信息，或指示该记录在查找表中的位置；若在查找表中不再这样的记录，则称“查找不成功”。", "\n\n", "顺序查找基本步骤：从表中最后一个记录开始，逆序扫描查找表，一次将扫描到的结点关键字值与给定值key比较，若当前扫描到的结点关键字值与key相等，则查找成功；若扫描到第一个记录，仍未找到关键字等于key的记录，则查找失败；监视哨可设置在表头，也可设置在表尾。", "二分查找也叫折半查找，这种查找要求查找表必须是有序顺序表；在查找操作的基本步骤：首先取出表中的中间元素，若其关键字值等于给定key，则查找成功，操作结束；否则以中间元素为分界点，将查找表分为两个子表，并判断所查的key值所在的子表前部分，还是后部分，再重复上述步骤直到找到关键字值为key的元素或子表长度为0。", "哈希表查找：哈希表存储的基本思路是：设要存储的对象个数为n，设置一个长度为m的连续内存空间，以线性表中每个对象的关键字k为自变量，通过一个称为哈希函数把k映射为内存单元的地址。其查找过程与建表过程相似，假设给定的值为k，根据建表时设定的哈嘻哈书计算出哈希地址，若表中改地址单元不为空且该地址的关键字不等于k，则按建表时设定的处理冲突的方法找下一个地址，如此反复下去，直到某个单元地址为空或关键字比较相等为止。\n\t", "\n", "#define MAXSIZE 100\ntypedef int keytype;\ntypedef struct\n { keytype key;\n }redtype;\ntypedef struct\n { redtype elem[MAXSIZE];\n int length;\n }Sstable;\nint sxsearch(Sstable ST,keytype Key)/*顺序查找函数*/\n { int i;\n ST.elem[0].key=Key;\n for(i=ST.length;ST.elem[i].key!=Key;--i);\n return i;\n }\nint binsearch(Sstable ST,keytype Key)/*二分法查找函数*/\n { int low,mid,high;\n low=1;high=ST.length;\n while(low<=high)\n { mid=(low+high)/2;\n if (Key==ST.elem[mid].key)\n return mid;\n else if (Key<ST.elem[mid].key)\n high=mid-1;\n else low=mid+1;\n }\n return 0;\n }\nmain()/*主函数*/\n{ Sstable ST ;\n int i,pos,x,key;\n pos=0;\n while(1)\n { printf(\"\\n 1---Sxserach\\n\");\n printf(\" 2---Binserach\\n\");\n printf(\" 3---Exit\\n\");\n printf(\"please input choose(1-3):\");\n scanf(\"%d\",&x);\n switch(x)\n { case 1:\n printf(\"please input table length n:\");/*请求输入顺序表表长*/\n scanf(\"%d\",&ST.length);\n printf(\"please input n data:\\n\");/*请求输入n个关键字值*/\n for(i=1;i<=ST.length;i++)\n scanf(\"%d\",&ST.elem[i].key);\n printf(\"please input key:\");/*请求输入待查找的记录关键字值*/\n scanf(\"%d\",&key);\n pos=sxsearch(ST,key); /*调用顺序查找函数*/\n break;\n case 2:\n printf(\"please input table length n:\");/*请求输入顺序表表长*/\n scanf(\"%d\",&ST.length);\n printf(\"please input n data(sort):\\n\");/*请求输入n个关键字值（必须升序排列）*/\n for(i=1;i<=ST.length;i++)\n scanf(\"%d\",&ST.elem[i].key);\n printf(\"please input key:\");/*请求输入待查找的记录关键字值*/\n scanf(\"%d\",&key);\n pos=binsearch(ST,key);/*调用二分法查找函数*/\n break;\n case 3: return;\n default: printf(\"choose error\\n\");\n }\n if(pos==0)\n printf(\"\\nthe data is not found.\\n\"); /*若找不到，提示信息*/\n else\n printf(\"\\nthe data is at position %d\\n\",pos);} /*若找到，输出位置*/\n}", "\n\n\t", "C:\\Users\\Administrator\\Documents\\未命名1.cpp    In function 'int main()':", "\n\t34    30    C:\\Users\\Administrator\\Documents\\未命名1.cpp    [Error] 'printf' was not declared in this scope", "\n\t38    15    C:\\Users\\Administrator\\Documents\\未命名1.cpp    [Error] 'scanf' was not declared in this scope", "\n\t60    10    C:\\Users\\Administrator\\Documents\\未命名1.cpp    [Error] return-statement with no value, in function returning 'int' [-fpermissive]", "\n\t"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;把Date和Goods结构体定义为GoodsManage类的嵌套结构体。使得成为GoodsManage类的成员&amp;#xff0c;通过GoodsManage类访问它们的成员变量。&lt;br /&gt;只需要修改void GoodsManage::DisplayMainMenu()//定义主菜单函数以前的即可。&lt;br /&gt;如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iomanip&amp;gt;&lt;/span&gt;&lt;/span&gt;\n \n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n \n&lt;span class=\"hljs-keyword\"&gt;enum&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;GoodsType&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//商品类别  &lt;/span&gt;\n{\n    Food&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-comment\"&gt;//食品&lt;/span&gt;\n    Cosmetic,&lt;span class=\"hljs-comment\"&gt;//化妆品&lt;/span&gt;\n    Commodity,&lt;span class=\"hljs-comment\"&gt;//日用品&lt;/span&gt;\n    Drink&lt;span class=\"hljs-comment\"&gt;//饮料&lt;/span&gt;\n};\n \n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Date&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//入库时间 &lt;/span&gt;\n{\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; year;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; month;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; day;\n};\n \n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Goods&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//商品基本信息&lt;/span&gt;\n{\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n    string code;&lt;span class=\"hljs-comment\"&gt;//商品编号&lt;/span&gt;\n    string name;&lt;span class=\"hljs-comment\"&gt;//商品名称&lt;/span&gt;\n    string brand;&lt;span class=\"hljs-comment\"&gt;//生产厂家&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; price;&lt;span class=\"hljs-comment\"&gt;//商品价格&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num;&lt;span class=\"hljs-comment\"&gt;//商品数量&lt;/span&gt;\n    GoodsType type;&lt;span class=\"hljs-comment\"&gt;//商品类别&lt;/span&gt;\n    Date date;&lt;span class=\"hljs-comment\"&gt;//入库时间&lt;/span&gt;\n    Goods *next;\n};\n \n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;GoodsManage&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//商品管理&lt;/span&gt;\n{\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n    &lt;span class=\"hljs-built_in\"&gt;GoodsManage&lt;/span&gt;();\n    ~&lt;span class=\"hljs-built_in\"&gt;GoodsManage&lt;/span&gt;(){}\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;DisplayMainMenu&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//主菜单显示&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;AddGoodsInfo&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//添加商品信息&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;DisplayGoodsInfo&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//浏览商品信息&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;SearchByCode&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//按照商品编号搜索商品信息&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;SearchByName&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//按照商品名称搜索商品信息&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;SearchByType&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//按照商品类别搜索商品信息&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;SearchByBrand&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//按照商品品牌搜索商品信息&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;EditGoodsInfo&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//编辑商品信息&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;DeleteGoodsInfo&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//删除商品信息&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;SellGoodsInfo&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//出售商品信息&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; amount;&lt;span class=\"hljs-comment\"&gt;//商品量&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; DeleteAmount;\n    Goods *head;\n    Goods *DeleteHead;\n};\n \nGoodsManage::&lt;span class=\"hljs-built_in\"&gt;GoodsManage&lt;/span&gt;()&lt;span class=\"hljs-comment\"&gt;//定义构造函数&lt;/span&gt;\n{\n    amount&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    DeleteAmount&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    head&amp;#61;&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; Goods;\n    head-&amp;gt;next&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    DeleteHead&amp;#61;&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; Goods;\n    DeleteHead-&amp;gt;next&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["请问把结构体写到类里面要怎么写", ["请问把结构体写到类里面要怎么写，就是不要结构体。", "\n", "#include<iostream>", "\n", "#include<string>", "\n", "#include<iomanip>", "\n\nusing ", "namespace", " ", "std", ";\n\n", "enum", " ", "GoodsType", "//商品类别  \n", "{\n    Food=", "1", ",", "//食品", "\n    Cosmetic,", "//化妆品", "\n    Commodity,", "//日用品", "\n    Drink", "//饮料", "\n};\n\nstruct Date", "//入库时间 ", "\n{\n    ", "int", " year;\n    ", "int", " month;\n    ", "int", " day;\n};\n\nstruct Goods", "//商品基本信息", "\n{\n    ", "string", " code;", "//商品编号", "\n    ", "string", " name;", "//商品名称", "\n    ", "string", " brand;", "//生产厂家", "\n    ", "double", " price;", "//商品价格", "\n    ", "int", " num;", "//商品数量", "\n    GoodsType type;", "//商品类别", "\n    Date date;", "//入库时间", "\n    Goods *next;\n};\n\n", "class", " ", "GoodsManage", "//商品管理\n", "{\n", "public", ":\n    GoodsManage();\n    ~GoodsManage(){}\n    ", "void", " DisplayMainMenu();", "//主菜单显示", "\n    ", "void", " AddGoodsInfo();", "//添加商品信息", "\n    ", "void", " DisplayGoodsInfo();", "//浏览商品信息", "\n    ", "void", " SearchByCode();", "//按照商品编号搜索商品信息", "\n    ", "void", " SearchByName();", "//按照商品名称搜索商品信息", "\n    ", "void", " SearchByType();", "//按照商品类别搜索商品信息", "\n    ", "void", " SearchByBrand();", "//按照商品品牌搜索商品信息", "\n    ", "void", " EditGoodsInfo();", "//编辑商品信息", "\n    ", "void", " DeleteGoodsInfo();", "//删除商品信息", "\n    ", "void", " SellGoodsInfo();", "//出售商品信息", "\n", "private", ":\n    ", "int", " amount;", "//商品量", "\n    ", "int", " DeleteAmount;\n    Goods *head;\n    Goods *DeleteHead;\n};\n\nGoodsManage::GoodsManage()", "//定义构造函数", "\n{\n    amount=", "0", ";\n    DeleteAmount=", "0", ";\n    head=", "new", " Goods;\n    head->next=", "NULL", ";\n    DeleteHead=", "new", " Goods;\n    DeleteHead->next=", "NULL", ";\n}\n\n", "void", " GoodsManage::DisplayMainMenu()", "//定义主菜单函数", "\n{\n    cout<<", "\" \\t\\t\\t------------------------------------------------------------------\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                                                                *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                   欢迎使用商品库存管理系统                     *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                                                                *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                        【商品进货】…(1)                       *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                                                                *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                        【商品编辑】…(2)                       *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                                                                *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                        【商品删除】…(3)                       *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                                                                *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                     |【按照编号查询】…(4)                     *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                     |                                          *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                     |【按照名称查询】…(5)                     *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*         【商品查询】|                                          *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                     |【按照类别查询】…(6)                     *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                     |                                          *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                     |【按照品牌查询】…(7)                     *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                                                                *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                        【商品出货】…(8)                       *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                                                                *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                        【商品统计】…(9)                       *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                                                                *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                                                                *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                          退出系统…(0)                         *\\n\"", ";\n    cout<<", "\" \\t\\t\\t*                                                                *\\n\"", ";\n    cout<<", "\" \\t\\t\\t------------------------------------------------------------------\\n\"", ";\n    cout<<", "\"\\n                      请输入你要进行的操作编号:\"", ";           \n}\n\n", "void", " GoodsManage::AddGoodsInfo()", "//定义添加商品信息函数", "\n{\n    char c;\n    ", "int", " c1;\n    Goods *tail=head,*p;\n    ", "bool", " flag;\n    ", "while", "(tail->next!=", "NULL", ")\n        tail=tail->next;", "//令tail指向链表中最后一个节点", "\n    ", "do", "\n    {\n        flag=", "0", ";\n        p=", "new", " Goods;\n        cout<<", "\"请选择商品类别:\"", "<<endl;\n        cout<<", "\"1.食品 2.化妆品 3.日用品 4.饮料\"", "<<endl;\n        cout<<", "\"请输入相应编号:\"", ";\n        ", "do", "\n        {\n            cin>>c1;\n            ", "if", "(c1>=", "1", "&&c1<=", "4", ")", "//判断用户输入编号是否存在", "\n                flag=", "1", ";\n            ", "else", "\n            {\n                cout<<", "\"您输入的编号不存在！\"", "<<endl;\n                cout<<", "\"请选择正确的商品类别:\"", "<<endl;\n            }\n        }", "while", "(flag==", "0", ");", "//输入编号存在时跳出循环", "\n        ", "if", "(c1==", "1", ")p->type=Food;\n        ", "if", "(c1==", "2", ")p->type=Cosmetic;\n        ", "if", "(c1==", "3", ")p->type=Commodity;\n        ", "if", "(c1==", "4", ")p->type=Drink;\n        cout<<", "\"商品类别(\"", "<<p->type<<", "\")\"", "<<endl;", "//表示商品类别", "\n        cout<<", "\"请输入商品编号: \"", ";\n        cin>>p->code;\n        ", "do", "\n        {\n            Goods *q=head->next;\n            ", "while", "(q!=", "NULL", "&&q->code!=p->code)", "//当q指向NULL或输入的编号与之前编号重复时跳出循环", "\n                q=q->next;\n            ", "if", "(q==", "NULL", ")", "//当p指向NNULL且编号不重复时", "\n                flag=", "1", ";\n            ", "else", "//编号重复时", "\n            {\n                cout<<", "\"存在该编号的货物!!!请重新输入编号:\"", ";\n                cin>>p->code;\n            }\n        }", "while", "(flag==", "0", ");\n        cout<<", "\"请输入商品名称：\"", ";\n        cin>>p->name;\n        cout<<", "\"请输入生产厂家：\"", "; \n        cin>>p->brand;\n        cout<<", "\"请输入商品价格：\"", ";\n        cin>>p->price;\n        cout<<", "\"请输入商品数量：\"", ";\n        cin>>p->num;\n        cout<<", "\"请输入入库时间（年/月/日）：\"", ";\n        cin>>p->date.year>>p->date.month>>p->date.day;\n        tail->next=p;", "//将p插入链表", "\n        p->next=", "NULL", ";\n        tail=p;\n        amount++;", "//商品量加一", "\n        cout<<", "\"数据输入成功！！！想继续添加吗(y/n):\"", ";\n        cin>>c;\n        ", "while", "(c!=", "'y'", "&&c!=", "'n'", ")\n        {\n            cout<<", "\"指令错误！！！！！<请输入y/n>\"", "<<endl;\n            cout<<", "\"数据添加成功！！！想继续输入吗(y/n):\"", ";\n            cin>>c;\n        }\n    }", "while", "(c==", "'y'", ");\n    cout<<endl;\n    cout<<", "\"信息处理完毕\"", "<<endl;\n    cout<<", "\"按任意键返回主菜单\"", "<<endl;\n    getchar();\n    getchar();\n}\n\n\n", "void", " GoodsManage::EditGoodsInfo()", "//定义编辑商品信息函数", "\n{\n        char c;\n        Goods *p;\n        ", "bool", " flag=", "0", ";\n        ", "string", " EditCode;\n        ", "do", "\n        {\n            p=head->next;", "//令p指向head下一个节点", "\n            flag=", "0", ";\n            cout<<", "\"请输入您要修改的货物编号：\"", ";\n            cin>>EditCode;\n            ", "while", "(p->next!=", "NULL", "&&p->code!=EditCode)", "//直到p指向链表中最后一个节点找到相应编号的商品时跳出循环", "\n                p=p->next;\n            ", "if", "(p->code==EditCode)\n            {\n                flag=", "1", ";\n                cout<<setiosflags(ios::left)<<setw(", "10", ")<<", "\"编号\"", "<<setw(", "16", ")<<", "\"名称\"", "<<setw(", "10", ")<<", "\"生产厂家\"", "<<setw(", "10", ")<<", "\"价格\"", "<<setw(", "10", ")<<\n                ", "\"商品类别\"", "<<setw(", "10", ")<<", "\"数量\"", "<<setw(", "10", ")<<", "\"入库时间\"", "<<endl;\n                cout<<setiosflags(ios::left)<<setw(", "10", ")<<p->code<<setw(", "16", ")<<p->name<<setw(", "10", ")<<p->brand<<setw(", "10", ")<<p->price\n                <<setw(", "10", ")<<p->type<<setw(", "10", ")<<p->num<<p->date.year<<", "\"/\"", "<<p->date.month<<", "\"/\"", "<<p->date.day<<endl;\n                cout<<", "\"确认修改吗？<y/n>\"", ";\n                cin>>c;\n                ", "while", "(c!=", "'y'", "&&c!=", "'n'", ")\n                {\n                    cout<<", "\"指令错误！！！！<请输入y/n>:\"", ";\n                    cin>>c;\n                }\n                ", "if", "(c==", "'y'", ")\n                {\n                    cout<<", "\"请输入商品名称：\"", ";\n                    cin>>p->name;\n                    cout<<", "\"请输入生产厂家：\"", "; \n                    cin>>p->brand;\n                    cout<<", "\"请输入商品价格：\"", ";\n                    cin>>p->price;\n                    cout<<", "\"请输入商品数量：\"", ";\n                    cin>>p->num;\n                    cout<<", "\"请输入入库时间（年/月/日）：\"", ";\n                    cin>>p->date.year>>p->date.month>>p->date.day;\n                    cout<<", "\"修改成功！\"", "<<endl;    \n                }\n                ", "else", " cout<<", "\"取消成功！\"", "<<endl;\n            }\n            ", "if", "(flag==", "0", ")\n            {\n                cout<<", "\"对不起，您修改的货物不存在！！\"", "<<endl;\n\n            }\n            cout<<", "\"您想要继续修改吗？(y/n):\"", ";\n            cin>>c;\n            ", "while", "(c!=", "'y'", "&&c!=", "'n'", ")\n            {\n                cout<<", "\"指令错误！！！<请输入y/n>:\"", "<<endl;\n                cout<<", "\"您想要继续修改吗？(y/n):\"", ";\n                cin>>c;\n            }\n        }", "while", "(c==", "'y'", ");\n        cout<<endl;\n        cout<<", "\"信息编辑完毕\"", "<<endl;\n        cout<<", "\"按任意键返回主菜单\"", "<<endl;\n        getchar();\n        getchar();\n}\n\n", "void", " GoodsManage::DeleteGoodsInfo()", "//定义商品信息删除函数", "\n{\n    Goods *q=head,*p,*tail=DeleteHead;\n    p=", "new", " Goods;\n    char c;\n    ", "string", " Dename;\n    ", "bool", " flag=", "0", ";\n    ", "while", "(tail->next!=", "NULL", ")", "//令tail指向链表中最后一个节点", "\n        tail=tail->next;\n    ", "do", "\n    {\n        \n        cout<<", "\"请输入您要删除的商品名称：\"", ";\n        cin>>Dename;\n        ", "while", "(q->next!=", "NULL", "&&q->next->name!=Dename)", "//直到q指向链表中最后一个节点或者找到相应名称的商品时跳出循环", "\n            q=q->next;\n        ", "if", "(q->next!=", "NULL", ")", "//找到相应名称的商品", "\n        {\n            flag=", "1", ";\n            cout<<", "\"确认删除吗？<y/n>\"", ";\n            cin>>c;\n            ", "while", "(c!=", "'y'", "&&c!=", "'n'", ")\n            {\n                cout<<", "\"指令错误！！！！<请输入y/n>:\"", ";\n                cin>>c;\n            }\n            ", "if", "(c==", "'y'", ")\n            {  \n                p=q->next;\n                q->next=q->next->next;", "//q的下一个节点指向其后的节点", "\n                tail->next=p;\n                tail=p;\n                tail->next=", "NULL", ";", "//在链表中删除指定节点", "\n                DeleteAmount++;\n                amount--;", "//商品量减一", "\n                cout<<", "\"删除成功！！\"", "<<endl;\n            }\n            ", "else", " cout<<", "\"取消成功！！！\"", "<<endl;\n\n        }\n        ", "if", "(flag==", "0", ")\n        {\n            cout<<", "\"对不起，您删除的商品不存在！！！\"", "<<endl;\n\n        }\n        cout<<", "\"您想要继续删除吗？(y/n):\"", ";\n        cin>>c;\n        ", "while", "(c!=", "'y'", "&&c!=", "'n'", ")\n        {\n            cout<<", "\"指令错误！！！<请输入y/n>:\"", "<<endl;\n            cout<<", "\"您想要继续删除吗？(y/n):\"", ";\n            cin>>c;\n        }\n        flag=", "0", ";\n        q=head;", "//令q指向链表中第一个结点再次搜索相应名称的商品", "\n\n    }", "while", "(c==", "'y'", ");\n    cout<<endl;\n    cout<<", "\"信息删除完毕\"", "<<endl;\n    cout<<", "\"按任意键返回主菜单\"", "<<endl;\n    getchar();\n    getchar();\n}\n\n", "void", " GoodsManage::SearchByCode()", "//按照商品编号查找商品信息", "\n{    \n    Goods *p;\n    ", "bool", " flag;\n    ", "string", " FoundCode;\n    p=head;\n    flag=", "0", ";\n    cout<<", "\"请输入您要查找的商品编号：\"", ";\n    cin>>FoundCode;\n       ", "while", "(p->next!=", "NULL", ")\n        {\n        \n                p=p->next;\n                ", "if", "(p->code==FoundCode)", "//找到相应编号的商品", "\n                {\n                 flag=", "1", ";\n                 cout<<setiosflags(ios::left)<<setw(", "10", ")<<", "\"编号\"", "<<setw(", "16", ")<<", "\"名称\"", "<<setw(", "10", ")<<", "\"生产厂家\"", "<<setw(", "10", ")<<", "\"价格\"", "<<setw(", "10", ")<<\n                ", "\"商品类别\"", "<<setw(", "10", ")<<", "\"数量\"", "<<setw(", "10", ")<<", "\"入库时间\"", "<<endl;\n                 cout<<setiosflags(ios::left)<<setw(", "10", ")<<p->code<<setw(", "16", ")<<p->name<<setw(", "10", ")<<p->brand<<setw(", "10", ")<<p->price\n                 <<setw(", "10", ")<<p->type<<setw(", "10", ")<<p->num<<p->date.year<<", "\"/\"", "<<p->date.month<<", "\"/\"", "<<p->date.day<<endl;\n                 ", "break", ";\n                }\n        }\n       ", "if", "(flag==", "0", ")\n        {\n            cout<<", "\"对不起，您查询的商品不存在！！！\"", "<<endl;                \n        }\n        cout<<endl;\n        cout<<", "\"信息查找完毕\"", "<<endl;\n        cout<<", "\"按任意键返回主菜单\"", "<<endl;\n        getchar();\n        getchar();\n}\n\n", "void", " GoodsManage::SearchByName()", "//按照商品名称查找商品信息", "\n{    \n    Goods *p;\n    ", "bool", " flag;\n    ", "string", " FoundName;\n        p=head;\n        flag=", "0", ";\n        cout<<", "\"请输入您要查找的商品名称：\"", ";\n        cin>>FoundName;\n        ", "while", "(p->next!=", "NULL", ")\n        {\n        \n                p=p->next;\n                ", "if", "(p->name==FoundName)", "//找到相应名称的商品", "\n                {\n                 flag=", "1", ";\n                cout<<setiosflags(ios::left)<<setw(", "10", ")<<", "\"编号\"", "<<setw(", "16", ")<<", "\"名称\"", "<<setw(", "10", ")<<", "\"生产厂家\"", "<<setw(", "10", ")<<", "\"价格\"", "<<setw(", "10", ")<<\n                ", "\"商品类别\"", "<<setw(", "10", ")<<", "\"数量\"", "<<setw(", "10", ")<<", "\"入库时间\"", "<<endl;\n                cout<<setiosflags(ios::left)<<setw(", "10", ")<<p->code<<setw(", "16", ")<<p->name<<setw(", "10", ")<<p->brand<<setw(", "10", ")<<p->price\n                <<setw(", "10", ")<<p->type<<setw(", "10", ")<<p->num<<p->date.year<<", "\"/\"", "<<p->date.month<<", "\"/\"", "<<p->date.day<<endl;\n                 ", "break", ";\n                }\n        }\n        ", "if", "(flag==", "0", ")\n        {\n            cout<<", "\"对不起，您查询的商品不存在！！！\"", "<<endl;        \n        }\n        cout<<endl;\n        cout<<", "\"信息查找完毕\"", "<<endl;\n        cout<<", "\"按任意键返回主菜单\"", "<<endl;\n        getchar();\n        getchar();    \n}\n\n", "void", " GoodsManage::SearchByType()", "//按照商品类别查找商品信息", "\n{\n    \n    Goods *p;\n    ", "bool", " flag;\n    ", "int", " FoundType;\n        p=head;\n        flag=", "0", ";\n        cout<<", "\"请输入您要查找的商品类别：\"", ";\n        cin>>FoundType;\n        ", "while", "(p->next!=", "NULL", ")\n        {\n        \n                p=p->next;\n                ", "if", "(FoundType==", "1", "&&p->type==Food)\n                {\n                 flag=", "1", ";\n                 cout<<setiosflags(ios::left)<<setw(", "10", ")<<", "\"编号\"", "<<setw(", "16", ")<<", "\"名称\"", "<<setw(", "10", ")<<", "\"生产厂家\"", "<<setw(", "10", ")<<", "\"价格\"", "<<setw(", "10", ")<<\n                 ", "\"商品类别\"", "<<setw(", "10", ")<<", "\"数量\"", "<<setw(", "10", ")<<", "\"入库时间\"", "<<endl;\n                 cout<<setiosflags(ios::left)<<setw(", "10", ")<<p->code<<setw(", "16", ")<<p->name<<setw(", "10", ")<<p->brand<<setw(", "10", ")<<p->price\n                 <<setw(", "10", ")<<p->type<<setw(", "10", ")<<p->num<<p->date.year<<", "\"/\"", "<<p->date.month<<", "\"/\"", "<<p->date.day<<endl;\n                }\n\n                ", "else", " ", "if", "(FoundType==", "2", "&&p->type==Cosmetic)\n                {\n                 flag=", "1", ";\n                  cout<<setiosflags(ios::left)<<setw(", "10", ")<<", "\"编号\"", "<<setw(", "16", ")<<", "\"名称\"", "<<setw(", "10", ")<<", "\"生产厂家\"", "<<setw(", "10", ")<<", "\"价格\"", "<<setw(", "10", ")<<\n                 ", "\"商品类别\"", "<<setw(", "10", ")<<", "\"数量\"", "<<setw(", "10", ")<<", "\"入库时间\"", "<<endl;\n                 cout<<setiosflags(ios::left)<<setw(", "10", ")<<p->code<<setw(", "16", ")<<p->name<<setw(", "10", ")<<p->brand<<setw(", "10", ")<<p->price\n                 <<setw(", "10", ")<<p->type<<setw(", "10", ")<<p->num<<p->date.year<<", "\"/\"", "<<p->date.month<<", "\"/\"", "<<p->date.day<<endl;\n                }\n                ", "else", " ", "if", "(FoundType==", "3", "&&p->type==Commodity)\n                {\n                 flag=", "1", ";\n                  cout<<setiosflags(ios::left)<<setw(", "10", ")<<", "\"编号\"", "<<setw(", "16", ")<<", "\"名称\"", "<<setw(", "10", ")<<", "\"生产厂家\"", "<<setw(", "10", ")<<", "\"价格\"", "<<setw(", "10", ")<<\n                 ", "\"商品类别\"", "<<setw(", "10", ")<<", "\"数量\"", "<<setw(", "10", ")<<", "\"入库时间\"", "<<endl;\n                 cout<<setiosflags(ios::left)<<setw(", "10", ")<<p->code<<setw(", "16", ")<<p->name<<setw(", "10", ")<<p->brand<<setw(", "10", ")<<p->price\n                 <<setw(", "10", ")<<p->type<<setw(", "10", ")<<p->num<<p->date.year<<", "\"/\"", "<<p->date.month<<", "\"/\"", "<<p->date.day<<endl;\n                }\n                ", "else", " ", "if", "(FoundType==", "4", "&&p->type==Drink)\n                {\n                 flag=", "1", ";\n                  cout<<setiosflags(ios::left)<<setw(", "10", ")<<", "\"编号\"", "<<setw(", "16", ")<<", "\"名称\"", "<<setw(", "10", ")<<", "\"生产厂家\"", "<<setw(", "10", ")<<", "\"价格\"", "<<setw(", "10", ")<<\n                 ", "\"商品类别\"", "<<setw(", "10", ")<<", "\"数量\"", "<<setw(", "10", ")<<", "\"入库时间\"", "<<endl;\n                 cout<<setiosflags(ios::left)<<setw(", "10", ")<<p->code<<setw(", "16", ")<<p->name<<setw(", "10", ")<<p->brand<<setw(", "10", ")<<p->price\n                 <<setw(", "10", ")<<p->type<<setw(", "10", ")<<p->num<<p->date.year<<", "\"/\"", "<<p->date.month<<", "\"/\"", "<<p->date.day<<endl;\n                }            \n        }\n        ", "if", "(flag==", "0", ")\n        {\n            cout<<", "\"对不起，您查询的商品不存在！！！\"", "<<endl;        \n        }    \n        cout<<endl;\n        cout<<", "\"信息查找完毕\"", "<<endl;\n        cout<<", "\"按任意键返回主菜单\"", "<<endl;\n        getchar();\n        getchar();    \n}\n\n", "void", " GoodsManage::SearchByBrand()", "//按照生产厂家查找商品信息", "\n{\n    \n    Goods *p;\n    ", "bool", " flag;\n    ", "string", " FoundBrand;\n        p=head;\n        flag=", "0", ";\n        cout<<", "\"请输入您要查找的商品品牌：\"", ";\n        cin>>FoundBrand;\n        ", "while", "(p->next!=", "NULL", ")\n        {\n        \n                p=p->next;\n                ", "if", "(p->brand==FoundBrand)", "//找到相应生产厂家所对应的商品", "\n                {\n                 flag=", "1", ";\n                  cout<<setiosflags(ios::left)<<setw(", "10", ")<<", "\"编号\"", "<<setw(", "16", ")<<", "\"名称\"", "<<setw(", "10", ")<<", "\"生产厂家\"", "<<setw(", "10", ")<<", "\"价格\"", "<<setw(", "10", ")<<\n                 ", "\"商品类别\"", "<<setw(", "10", ")<<", "\"数量\"", "<<setw(", "10", ")<<", "\"入库时间\"", "<<endl;\n                 cout<<setiosflags(ios::left)<<setw(", "10", ")<<p->code<<setw(", "16", ")<<p->name<<setw(", "10", ")<<p->brand<<setw(", "10", ")<<p->price\n                 <<setw(", "10", ")<<p->type<<setw(", "10", ")<<p->num<<p->date.year<<", "\"/\"", "<<p->date.month<<", "\"/\"", "<<p->date.day<<endl;\n                }    \n        }\n        ", "if", "(flag==", "0", ")\n        {\n            cout<<", "\"对不起，您查询的商品不存在！！！\"", "<<endl;            \n        }\n        cout<<endl;\n        cout<<", "\"信息查找完毕\"", "<<endl;\n        cout<<", "\"按任意键返回主菜单\"", "<<endl;\n        getchar();\n        getchar();\n}    \n\n", "void", " GoodsManage::SellGoodsInfo()", "//定义商品出库函数", "\n{\n        ", "int", " sellNum,year,month,day;\n        ", "double", " sellPrice,sum=", "0.0", ",profit=", "0.0", ";;\n        char c;\n        Goods *p;\n        ", "bool", " flag=", "0", ";\n        ", "string", " SellName;\n        ", "do", "\n        {\n            p=head->next;\n            flag=", "0", ";\n            cout<<", "\"请输入您要出售的商品名称：\"", ";\n            cin>>SellName;\n            ", "while", "(p->next!=", "NULL", "&&p->name!=SellName)\n                p=p->next;\n            ", "if", "(p->name==SellName)\n            {\n                flag=", "1", ";\n                cout<<setiosflags(ios::left)<<setw(", "10", ")<<", "\"编号\"", "<<setw(", "16", ")<<", "\"名称\"", "<<setw(", "10", ")<<", "\"生产厂家\"", "<<setw(", "10", ")<<", "\"价格\"", "<<setw(", "10", ")<<\n                ", "\"商品类别\"", "<<setw(", "10", ")<<", "\"数量\"", "<<setw(", "10", ")<<", "\"入库时间\"", "<<endl;\n          \n                cout<<setiosflags(ios::left)<<setw(", "10", ")<<p->code<<setw(", "16", ")<<p->name<<setw(", "10", ")<<p->brand<<setw(", "10", ")<<p->price\n                <<setw(", "10", ")<<p->type<<setw(", "10", ")<<p->num<<p->date.year<<", "\"/\"", "<<p->date.month<<", "\"/\"", "<<p->date.day<<endl;\n                cout<<", "\"确认出售吗？<y/n>\"", ";\n                cin>>c;\n                ", "while", "(c!=", "'y'", "&&c!=", "'n'", ")\n                {\n                    cout<<", "\"指令错误！！！！<请输入y/n>:\"", ";\n                    cin>>c;\n                }\n                ", "if", "(c==", "'y'", ")\n                {\n                    \n                    cout<<", "\"请输入出售的商品数量：\"", ";\n                    cin>>sellNum;\n                    ", "if", "(sellNum<=p->num)", "//库存量充足", "\n                    {\n                        p->num=p->num-sellNum;", "//计算商品出库后商品的库存量", "\n                        cout<<", "\"请输入出售的商品价格：\"", ";\n                        cin>>sellPrice;\n                        cout<<", "\"请输入出货日期：\"", ";\n                        cin>>year>>month>>day;\n                        sum=sellNum*sellPrice;\n                        profit=sellNum*(sellPrice-p->price);\n                        cout<<", "\"此次销售额为： \"", "<<sum<<endl;\n                        cout<<", "\"此次利润为： \"", "<<profit<<endl;\n                        cout<<", "\"出货日期为：\"", "<<year<<", "\"/\"", "<<month<<", "\"/\"", "<<day<<endl;\n                    }\n                    ", "else", "\n                    {\n                        cout<<", "\"库存不足！出库失败！\"", "<<endl;\n                    }    \n                }\n                ", "else", " cout<<", "\"取消成功！\"", "<<endl;\n            }\n            ", "if", "(flag==", "0", ")\n            {\n                cout<<", "\"对不起，您出售的货物不存在！！\"", "<<endl;\n\n            }\n            cout<<", "\"您想要继续出售吗？(y/n):\"", ";\n            cin>>c;\n            ", "while", "(c!=", "'y'", "&&c!=", "'n'", ")\n            {\n                cout<<", "\"指令错误！！！<请输入y/n>:\"", "<<endl;\n                cout<<", "\"您想要继续出售吗？(y/n):\"", ";\n                cin>>c;\n            }\n        }", "while", "(c==", "'y'", ");\n        cout<<endl;\n        cout<<", "\"出库完毕\"", "<<endl;\n        cout<<", "\"按任意键返回主菜单\"", "<<endl;\n        getchar();\n        getchar();\n}\n\n", "void", " GoodsManage::DisplayGoodsInfo()", "//定义商品信息浏览函数", "\n{\n    Goods *p=head;\n    cout<<setiosflags(ios::left)<<setw(", "10", ")<<", "\"编号\"", "<<setw(", "16", ")<<", "\"名称\"", "<<setw(", "10", ")<<", "\"生产厂家\"", "<<setw(", "10", ")<<", "\"价格\"", "<<setw(", "10", ")<<\n        ", "\"商品类别\"", "<<setw(", "10", ")<<", "\"数量\"", "<<setw(", "10", ")<<", "\"入库时间\"", "<<endl;\n    ", "while", "(p->next!=", "NULL", ")", "//直到p指向链表中最后一个结点", "\n    {\n        p=p->next;\n        cout<<setiosflags(ios::left)<<setw(", "10", ")<<p->code<<setw(", "16", ")<<p->name<<setw(", "10", ")<<p->brand<<setw(", "10", ")<<p->price\n        <<setw(", "10", ")<<p->type<<setw(", "10", ")<<p->num<<p->date.year<<", "\"/\"", "<<p->date.month<<", "\"/\"", "<<p->date.day<<endl;\n    }\n    cout<<endl;\n    cout<<", "\"信息统计完毕\"", "<<endl;\n    cout<<", "\"按任意键返回主菜单\"", "<<endl;\n    getchar();\n    getchar();\n}\n\n", "int", " main()", "//主函数", "\n{\n    ", "int", " c;\n    ", "int", " i=", "0", ";\n    ", "bool", " flag=", "0", ";\n    GoodsManage goods;", "//定义GoodsManage类对象", "\n    goods.DisplayMainMenu();\n    ", "for", "(;;)\n    {\n        ", "do", "\n        {\n            cin>>c;\n            ", "if", "(c>=", "0", "&&c<=", "9", ")", "//判断用户输入编号是否存在", "\n                flag=", "1", ";\n            ", "else", "\n            {\n                cout<<", "\"您输入的编号不存在！\"", "<<endl;\n                cout<<", "\"请选择相应的数字进行操作:\"", "<<endl;\n            }\n        }", "while", "(flag==", "0", ");", "//输入编号存在时跳出循环进行相应操作", "\n        system(", "\"cls\"", ");", "//清屏", "\n        ", "switch", "(c)\n        {\n        ", "case", " ", "1", ":goods.AddGoodsInfo();\n            ", "break", ";\n        ", "case", " ", "2", ":goods.EditGoodsInfo();\n            ", "break", ";\n        ", "case", " ", "3", ":goods.DeleteGoodsInfo();\n            ", "break", ";\n        ", "case", " ", "4", ":goods.SearchByCode();\n            ", "break", ";\n        ", "case", " ", "5", ":goods.SearchByName();\n            ", "break", ";\n        ", "case", " ", "6", ":goods.SearchByType();\n            ", "break", ";\n        ", "case", " ", "7", ":goods.SearchByBrand();\n            ", "break", ";\n        ", "case", " ", "8", ":goods.SellGoodsInfo();\n            ", "break", ";\n        ", "case", " ", "9", ":goods.DisplayGoodsInfo();\n            ", "break", ";\n        ", "case", " ", "0", ":", "exit", "(", "0", ");\n            ", "break", ";\n        }\n        system(", "\"cls\"", ");\n        goods.DisplayMainMenu();\n    }\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;您好&amp;#xff0c;我对代码做了小小的修改&amp;#xff0c;目前可以通过样例。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-cpp\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std ;\n&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; e[&lt;span class=\"hljs-number\"&gt;10000005&lt;/span&gt;]&amp;#61;{};\n&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10000005&lt;/span&gt;]&amp;#61;{};\n&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; b[&lt;span class=\"hljs-number\"&gt;10000005&lt;/span&gt;]&amp;#61;{};&lt;span class=\"hljs-comment\"&gt;//定义很大的数组要放在外面&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;signed&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k;\n    cin&amp;gt;&amp;gt;k;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;k;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; c&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,d&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//c要赋初值&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,m;\n        cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n;j&amp;#43;&amp;#43;){\n            cin&amp;gt;&amp;gt;a[j];\n        }\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;m;j&amp;#43;&amp;#43;){\n            cin&amp;gt;&amp;gt;b[j];\n        }\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(j&amp;lt;n&amp;amp;&amp;amp;k&amp;lt;m){&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//for改while&amp;#xff08;其实一样的&amp;#xff09;&amp;#xff0c;省一个变量l&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[j]&amp;gt;&amp;#61;b[k]){\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[j]&amp;#61;&amp;#61;b[k])c&amp;#43;&amp;#43;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(k&amp;#61;&amp;#61;m&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)d&amp;#61;c^d;\n                k&amp;#43;&amp;#43;;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[j]&amp;lt;b[k]){&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//else&lt;/span&gt;\n                d&amp;#61;c^d;\n                c&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                j&amp;#43;&amp;#43;;\n            }\n        }\n        e[i]&amp;#61;d;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;k;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld\\n&amp;#34;&lt;/span&gt;,e[i]);&lt;span class=\"hljs-comment\"&gt;//输出要%lld&amp;#xff08;其实e数组可以是int&amp;#xff09;&lt;/span&gt;\n    }\n    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["用int类型可以获得答案但改long long就只会输出0", ["#", "include", "<iostream>", "\n", "#", "include", "<vector>", "\n", "#", "include", "<stdio.h>", "\n", "using", " ", "namespace", " std ;\n", "#", "define", " int long long", "\n", "signed", " ", "main", "()", "{\n    ", "int", " k;\n    ", "int", " c,d=", "0", ";\n    cin>>k;\n    ", "int", " e[k]={", "0", "};\n    ", "for", "(", "int", " i=", "0", ";i<k;i++){\n        ", "int", " n,m;\n        cin>>n>>m;\n        ", "int", " a[n];\n        ", "int", " b[m];\n        ", "for", "(", "int", " j=", "0", ";j<n;j++){\n            ", "scanf", "(", "\"%lld\"", ",&a[j]);\n        }\n        ", "for", "(", "int", " j=", "0", ";j<m;j++){\n            ", "scanf", "(", "\"%lld\"", ",&b[j]);\n        }\n        ", "int", " l=", "0", ";\n        ", "for", "(", "int", " j,k=", "0", ";j<n&&k<m;l++){\n            ", "if", "(a[j]>=b[k]){\n                ", "if", "(a[j]==b[k])c++;\n                ", "if", "(k==m", "-1", ")d=c^d;\n                k++;\n            }\n            ", "if", "(a[j]<b[k]){\n                d=c^d;\n                c=", "0", ";\n                j++;\n            }\n        }\n        e[i]=d;\n    }\n    ", "for", "(", "int", " i=", "0", ";i<k;i++){\n        ", "printf", "(", "\"%lld\\n\"", ",e[i]);\n    }\n    \n    ", "return", " ", "0", ";\n}\n", "\n", "\n", "\n", "#include<iostream>", "\n", "#include<vector>", "\nusing namespace std ;\nsigned main(){\n    int k;\n    int c,", "d", "=0;\n    cin>>k;\n    int e[k]={0};\n    ", "for", "(int ", "i", "=0;i<k;i++){\n        int n,m;\n        cin>>n>>m;\n        int a[n];\n        int b[m];\n        ", "for", "(int ", "j", "=0;j<n;j++){\n            scanf(", "\"%d\"", ",&a[j]);\n        }\n        ", "for", "(int ", "j", "=0;j<m;j++){\n            scanf(", "\"%d\"", ",&b[j]);\n        }\n        int ", "l", "=0;\n        ", "for", "(int j,", "k", "=0;j<n&&k<m;l++){\n            ", "if", "(a[j]>=b[k]){\n                ", "if", "(a[j]==b[k])c++;\n                ", "if", "(", "k", "==m-1)d=c^d;\n                k++;\n            }\n            ", "if", "(a[j]<b[k]){\n                ", "d", "=c^d;\n                ", "c", "=0;\n                j++;\n            }\n        }\n        e[i]=d;\n    }\n    ", "for", "(int ", "i", "=0;i<k;i++){\n        printf(", "\"%d\\n\"", ",e[i]);\n    }\n    \n    return 0;\n}\n", "\n", "原题：洛谷p1366有序表的合并", "\n", "有序表的合并", "\n", "题目描述", "\n", "给出两个数列 $a, b$，均按不降序排序。其中保证 $a$ 中没有重复的数字。", "\n", "现在请你求出：$a$ 中每一个数字在 $b$ 中出现了几次？", "\n", "输入格式", "\n", "本题单测试点内有多组测试数据", "。", "\n", "输入的第一行是一个整数，表示数据组数 $T$。接下来按顺序给出每组数据的输入信息：", "\n", "第一行为两个整数，依次表示 $a$ 数列的长度 $n$ 和 $b$ 数列的长度 $m$。", "第二行有 $n$ 个整数表示数列 $a$，第 $i$ 个整数表示 $a_i$。", "第三行有 $m$ 个整数表示数列 $b$，第 $i$ 个整数表示 $b_i$。", "\n", "输出格式", "\n", "为了避免输出过大，对于每组数据，请你输出一行一个整数，表示数列 $a$ 的每个数在 $b$ 中出现次数的", "按位异或和", "。", "\n", "形式化的，设 $a_i$ 在 $b$ 中出现了 $c_i$ 次，则你需要输出 $c_1 \\bigoplus c_2 \\bigoplus \\dots \\bigoplus c_n$ 的值，其中 $\\bigoplus$ 表示按位异或操作。你可以参考提示来完成计算。", "\n", "样例 #1", "\n", "样例输入 #1", "\n", "1", "\n", "3 ", "5", "\n", "1 ", "3", " ", "6", "\n", "1 ", "3", " ", "3", " ", "5", " ", "5", "\n", "\n", "样例输出 #1", "\n", "3\n", "\n", "样例 #2", "\n", "样例输入 #2", "\n", "1", "\n", "9 ", "4", "\n", "1 ", "2", " ", "3", " ", "4", " ", "5", " ", "6", " ", "7", " ", "8", " ", "9", "\n", "1 ", "1", " ", "4", " ", "5", "\n", "\n", "样例输出 #2", "\n", "2\n", "\n", "样例 #3", "\n", "样例输入 #3", "\n", "2", "\n", "3 ", "5", "\n", "1 ", "3", " ", "6", "\n", "1 ", "3", " ", "3", " ", "5", " ", "5", "\n", "9 ", "4", "\n", "1 ", "2", " ", "3", " ", "4", " ", "5", " ", "6", " ", "7", " ", "8", " ", "9", "\n", "1 ", "1", " ", "4", " ", "5", "\n", "\n", "样例输出 #3", "\n", "3\n2\n", "\n", "提示", "\n", "样例 1 解释", "\n", "$a_1 = 1$ 在 $b$ 中出现了 $1$ 次。", "$a_2 = 3$ 在 $b$ 中出现了 $2$ 次。", "$a_3 = 6$ 在 $b$ 中出现了 $0$ 次。", "\n", "故输出为 $1 \\bigoplus 2 = 3$。", "\n", "样例 2 解释", "\n", "$1, 4, 5$ 分别在 $b$ 中出现了 $2, 1, 1$ 次，故输出为 $2 \\bigoplus 1 \\bigoplus 1 = 2$。", "\n", "数据规模与约定", "\n", "对于全部的测试点，保证：", "\n", "$1 \\leq T \\leq 10$；", "$1 \\leq n, m \\leq 10^7$，$\\sum (n + m) \\leq  10^7$；", "$1 \\leq a_i, b_i < 2^{64}$，且 $a_i < a_{i + 1}$，$b_i \\leq b_{i + 1}$。", "\n", "其中 $\\sum (n+m)$ 表示单测试点内所有 $n$ 与 $m$ 的和，即输入数列的总长度不超过 $10^7$。", "\n", "提示", "\n", "请注意大量数据读入对程序效率造成的影响，选择合适的读入方式，避免超时。", "请采用合适的数据类型存储变量，避免溢出。", "如果你不知道什么是按位异或和，可以在你的代码里添加如下的函数：", "\n", "template <", "class", " ", "T", ">\n", "T", " ", "getXorSum", "(", "T", " *", "begin, ", "T", " *", "end", ") {\n  T ret = ", "0", ";\n  ", "for", " (T *it = begin; it != end; ++it) ret ^= *it;\n  ", "return", " ret;\n}\n", "\n", "这一函数的作用是计算传入数组（包括 ", "std::vector", "）某一左闭右开区间的按位异或和，返回值类型与传入数组的类型相同，调用方法与 ", "std::sort", " 类似，例如，要求数组 $a$ 的 $a_1 \\sim a_n$ 的按位异或和，则调用 ", "getXorSum(a + 1, a + 1 + n)", "，求 $a_0 \\sim a_{n - 1}$ 的按位异或和，则调用 ", "getXorSum(a, a + n)", "。如果 $a$ 是 ", "std::vector", "，则将上述调用代码里的 ", "a", " 均改为 ", "a.begin()", " 即可。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;gtk/gtk.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; ROW 11&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; COL 11&lt;/span&gt;\n\n&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; map[ROW][COL] &amp;#61; {\n    {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;},\n    {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;},\n    {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;},\n    {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;},\n    {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;},\n    {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;},\n    {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;},\n    {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;},\n    {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;},\n    {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;},\n    {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;}};\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;draw_cb&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(GtkWidget *widget, &lt;span class=\"hljs-type\"&gt;cairo_t&lt;/span&gt; *cr, gpointer data)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; ROW; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; COL; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c &amp;#61; map[i][j];\n            &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; x &amp;#61; j * &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;;\n            &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; y &amp;#61; i * &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;)\n                &lt;span class=\"hljs-built_in\"&gt;cairo_set_source_rgb&lt;/span&gt;(cr, &lt;span class=\"hljs-number\"&gt;0.5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0.5&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0.5&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;)\n                &lt;span class=\"hljs-built_in\"&gt;cairo_set_source_rgb&lt;/span&gt;(cr, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;)\n                &lt;span class=\"hljs-built_in\"&gt;cairo_set_source_rgb&lt;/span&gt;(cr, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;)\n                &lt;span class=\"hljs-built_in\"&gt;cairo_set_source_rgb&lt;/span&gt;(cr, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                &lt;span class=\"hljs-built_in\"&gt;cairo_set_source_rgb&lt;/span&gt;(cr, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n            &lt;span class=\"hljs-built_in\"&gt;cairo_rectangle&lt;/span&gt;(cr, x, y, &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;);\n            &lt;span class=\"hljs-built_in\"&gt;cairo_fill&lt;/span&gt;(cr);\n        }\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; gboolean &lt;span class=\"hljs-title\"&gt;button_press_event_cb&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(GtkWidget *widget, GdkEventButton *event, gpointer data)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x &amp;#61; event-&amp;gt;x / &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; y &amp;#61; event-&amp;gt;y / &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Clicked at (%d, %d)\\n&amp;#34;&lt;/span&gt;, x, y);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (event-&amp;gt;button &amp;#61;&amp;#61; GDK_BUTTON_PRIMARY)\n        map[y][x] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (event-&amp;gt;button &amp;#61;&amp;#61; GDK_BUTTON_SECONDARY)\n        map[y][x] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;gtk_widget_queue_draw&lt;/span&gt;(widget);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; TRUE;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; argc, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;gtk_init&lt;/span&gt;(&amp;amp;argc, &amp;amp;argv);\n    GtkWidget *window &amp;#61; &lt;span class=\"hljs-built_in\"&gt;gtk_window_new&lt;/span&gt;(GTK_WINDOW_TOPLEVEL);\n    &lt;span class=\"hljs-built_in\"&gt;gtk_window_set_title&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;GTK_WINDOW&lt;/span&gt;(window), &lt;span class=\"hljs-string\"&gt;&amp;#34;Frogger&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;gtk_window_set_default_size&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;GTK_WINDOW&lt;/span&gt;(window), COL * &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;, ROW * &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;);\n    GtkWidget *drawing_area &amp;#61; &lt;span class=\"hljs-built_in\"&gt;gtk_drawing_area_new&lt;/span&gt;();\n    &lt;span class=\"hljs-built_in\"&gt;gtk_container_add&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;GTK_CONTAINER&lt;/span&gt;(window), drawing_area);\n    &lt;span class=\"hljs-built_in\"&gt;g_signal_connect&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;G_OBJECT&lt;/span&gt;(drawing_area), &lt;span class=\"hljs-string\"&gt;&amp;#34;draw&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;G_CALLBACK&lt;/span&gt;(draw_cb), &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;g_signal_connect&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;G_OBJECT&lt;/span&gt;(drawing_area), &lt;span class=\"hljs-string\"&gt;&amp;#34;button-press-event&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;G_CALLBACK&lt;/span&gt;(button_press_event_cb), &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;g_signal_connect&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;G_OBJECT&lt;/span&gt;(window), &lt;span class=\"hljs-string\"&gt;&amp;#34;destroy&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;G_CALLBACK&lt;/span&gt;(gtk_main_quit), &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;gtk_widget_show_all&lt;/span&gt;(window);\n    &lt;span class=\"hljs-built_in\"&gt;gtk_main&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;仅供参考&amp;#xff0c;望采纳。&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["要怎么实现可以用鼠标进行实时修改二维数组的字符，而不是需要用键盘输入坐标进行修改#include <stdio.h>", ["要怎么实现可以用鼠标进行实时修改二维数组的字符，而不是需要用键盘输入坐标进行修改", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n", "#", "define", " ROW 11                 ", "//游戏区行数", "\n", "#", "define", " COL 11                 ", "//游戏区列数     ", "\n\n", "char", " map[ROW][COL] = {\n    {", "'F'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", "},   ", "//x为草坪", "\n    {", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},   ", "//~为水流", "\n    {", "'t'", ", ", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'t'", ", ", "'t'", ", ", "'~'", ", ", "'~'", "},   ", "//o为终点", "\n    {", "'t'", ", ", "'~'", ", ", "'t'", ", ", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},      ", "//t为乌龟", "\n    {", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'t'", "},\n    {", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},\n    {", "'~'", ", ", "'t'", ", ", "'t'", ", ", "'t'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", "},\n    {", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", "},\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},\n    {", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'o'", ", ", "'x'", "}\n};\n\n\n", "int", " ", "main", "()", " ", "{\n\n    ", "int", " i, j;\n    ", "int", " n = ", "1", ";\n    ", "int", " x = ", "0", ", y = ", "0", ";\n    ", "char", " c;\n    ", "while", " (", "1", ") {\n        n = ", "1", ";\n        ", "printf", "(", "\"输入wsad控制青蛙的移动\\n\"", ");\n        ", "printf", "(", "\"输入l添加浮木的位置\\n\"", ");\n        ", "printf", "(", "\"输入k清除浮木需要删除的位置\\n\"", ");\n        ", "printf", "(", "\"输入b添加臭虫的位置\\n\"", ");\n        ", "printf", "(", "\"0   1   2   3   4   5   6   7   8   9   10\\n\"", ");\n        ", "for", " (i = ", "0", "; i < ROW; i++) {\n            ", "if", " (n <= ", "9", ")\n                ", "printf", "(", "\"%d \"", ", n);\n            ", "else", "\n                ", "printf", "(", "\"%d\"", ", n);\n            n++;\n            ", "for", " (j = ", "0", "; j < COL; j++) {\n                ", "printf", "(", "\"  %c \"", ", map[i][j]);     ", "//生成游戏界面", "\n            }\n            ", "printf", "(", "\"\\n\"", ");\n        }\n        ", "printf", "(", "\"请输入操作：\\n\"", ");\n        ", "scanf", "(", "\"%c\"", ", &c);                     ", "//w s a d", "\n        ", "getchar", "();                           ", "//防止重复出现的二维数组", "\n        ", "system", "(", "\"cls\"", ");                      ", "//清理屏幕", "\n        ", "static", " ", "char", " q = ", "'x'", ";\n        ", "if", " (c == ", "'w'", ") {\n\n            map[x][y] = q;\n            q = map[x - ", "1", "][y];\n            map[x - ", "1", "][y] = ", "'F'", ";\n            x = x - ", "1", ";\n\n        }\n\n        ", "else", " ", "if", " (c == ", "'s'", ") {\n            map[x][y] = q;\n            q = map[x + ", "1", "][y];\n            map[x + ", "1", "][y] = ", "'F'", ";\n\n            x = x + ", "1", ";\n\n        }\n\n        ", "else", " ", "if", " (c == ", "'a'", ") {\n            map[x][y] = q;\n            q = map[x][y - ", "1", "];\n            map[x][y - ", "1", "] = ", "'F'", ";\n\n            y = y - ", "1", ";\n\n        }\n\n        ", "else", " ", "if", " (c == ", "'d'", ") {\n            map[x][y] = q;\n            q = map[x][y + ", "1", "];\n            map[x][y + ", "1", "] = ", "'F'", ";\n\n            y = y + ", "1", ";\n\n        }\n\n        ", "else", " ", "if", " (c == ", "'l'", ") {\n            ", "int", " a, b;\n            ", "printf", "(", "\"添加浮木：请输入浮木放置的横坐标和纵坐标\\n\"", ");", "//添加浮木", "\n            ", "scanf", "(", "\"%d%d\"", ", &a, &b);\n            ", "getchar", "();\n            map[b - ", "1", "][a - ", "1", "] = ", "'L'", ";\n\n        }\n\n        ", "else", " ", "if", " (c == ", "'k'", ") {\n            ", "int", " a, b;\n            ", "printf", "(", "\"清除浮木:请输入需要清除浮木的横坐标和纵坐标\\n\"", ");", "//清除浮木", "\n            ", "scanf", "(", "\"%d%d\"", ", &a, &b);\n            ", "getchar", "();\n            ", "if", " (map[b - ", "1", "][a - ", "1", "] == ", "'L'", ") {\n                map[b - ", "1", "][a - ", "1", "] = ", "'~'", ";\n            } ", "else", " ", "if", " (map[b - ", "1", "][a - ", "1", "] == ", "'~'", " || map[b - ", "1", "][a - ", "1", "] == ", "'F'", " || map[b - ", "1", "][a - ", "1", "] == ", "'t'", " || map[b - ", "1", "][a - ", "1", "] == ", "'x'", "\n                       || map[b - ", "1", "][a - ", "1", "] == ", "'B'", ") {\n                ", "printf", "(", "\"该位置没有浮木\"", ");\n            }\n        }\n\n\n\n        ", "else", " ", "if", " (c == ", "'b'", ") {\n            ", "int", " a, b;\n            ", "printf", "(", "\"请输入臭虫放置的横坐标和纵坐标\\n\"", ");           ", "//添加臭虫", "\n            ", "scanf", "(", "\"%d%d\"", ", &a, &b);\n            ", "getchar", "();\n            ", "if", " (map[b - ", "1", "][a - ", "1", "] == ", "'L'", ") {\n                map[b - ", "1", "][a - ", "1", "] = ", "'B'", ";\n            } ", "else", " ", "if", " (map[b - ", "1", "][a - ", "1", "] == ", "'~'", " || map[b - ", "1", "][a - ", "1", "] == ", "'F'", " || map[b - ", "1", "][a - ", "1", "] == ", "'t'", " || map[b - ", "1", "][a - ", "1", "] == ", "'x'", ")\n                ", "printf", "(", "\"臭虫没有放在浮木上\\n\"", ");\n        }\n        ", "if", " ( q == ", "'~'", " || q == ", "'B'", ") {\n            ", "printf", "(", "\"game over\\n\"", ");\n            ", "break", ";\n        } ", "else", " ", "if", " (q == ", "'o'", ") {\n            ", "printf", "(", "\"Congratulations on winning\\n\"", ");\n            ", "break", ";\n        }\n\n    }\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;该回答引用GPTᴼᴾᴱᴺᴬᴵ&lt;br /&gt;1.校验编号唯一性&lt;br /&gt;可以遍历链表&amp;#xff0c;逐个比较编号是否相同&amp;#xff0c;如果有相同的就返回1&amp;#xff0c;没有相同的就返回0。下面是一个示例代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;checkNumberUnique&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* number, Node* head)&lt;/span&gt; &lt;/span&gt;{\n    Node* p &amp;#61; head;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(number, p-&amp;gt;lj.bh) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 编号已存在&lt;/span&gt;\n        }\n        p &amp;#61; p-&amp;gt;next;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 编号不存在&lt;/span&gt;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id=\"h2_在录入信息时&amp;#xff0c;可以使用这个函数来校验编号的唯一性。如果返回1&amp;#xff0c;则需要重新输入编号&amp;#xff1b;如果返回0&amp;#xff0c;则可以继续录入信息。_1677313572298\"&gt;在录入信息时&amp;#xff0c;可以使用这个函数来校验编号的唯一性。如果返回1&amp;#xff0c;则需要重新输入编号&amp;#xff1b;如果返回0&amp;#xff0c;则可以继续录入信息。&lt;/h2&gt;\n&lt;p&gt;2.打开文件&lt;br /&gt;可能是因为你每次都是开辟1KB的空间&amp;#xff0c;但是实际上你保存的信息并不一定占用了整个1KB的空间。因此&amp;#xff0c;读取文件时需要知道实际保存的信息长度&amp;#xff0c;而不能简单地使用1KB的长度。&lt;/p&gt;\n&lt;p&gt;下面是一个示例代码&amp;#xff0c;用于读取文件中保存的信息&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;void readFile(char* filename, Node** head) {\n    FILE* fp;\n    fp &amp;#61; fopen(filename, &lt;span class=\"hljs-string\"&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (fp &amp;#61;&amp;#61; NULL) {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;File not found.\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (!feof(fp)) {\n        Node* &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;Node&lt;/span&gt; &amp;#61; (Node*)malloc(sizeof(Node));\n        int bytesRead &amp;#61; fread(&amp;amp;(&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;Node&lt;/span&gt;-&amp;gt;lj), sizeof(Info), &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, fp);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (bytesRead !&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n            free(&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;Node&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;Node&lt;/span&gt;-&amp;gt;next &amp;#61; NULL;\n        addNode(head, &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;Node&lt;/span&gt;);\n    }\n    fclose(fp);\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;注意&amp;#xff0c;在使用fread()函数读取文件时&amp;#xff0c;需要判断是否读到了文件的末尾&amp;#xff08;feof()函数&amp;#xff09;&amp;#xff0c;否则会导致读取错误。同时&amp;#xff0c;每次读取一个结构体的大小&amp;#xff0c;而不是固定的1KB。&lt;/p&gt;\n&lt;p&gt;希望这些代码可以帮助你解决问题。&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["编号唯一性&读取文件出错，如何解决？", ["写程序出了问题，问了好多人都没解决，因为他们都不用", "头插法", "，我才学C不久，好多知识都不知道，数据结构都没学，我希望有巨佬能忙里偷闲帮我看下我的问题，我必感激不尽", "1、校验编号唯一性", "很多人用录入信息用的是循环的写法，我没用，于是我就不会校验了,我问了别人，给我说是能用递归写，TA帮我写了一点，我根据我自己的完善，然后程序就跑不起来了，我调试了好多次都没解决。我的希望是，传入pjd->lj.bh,用一个函数能够判断链表里有无相同的编号，有就重新输入，没有就继续录入信息，希望有巨佬帮帮忙，告诉我为什么，或者带我一下，写一个检验的函数直接发给我，我的环境是dev的，囚囚了", "2、打开文件", "如果我把之前存在文件里东西用记事本打开并删除，然后我重新保存信息，程序可以执行，但是当我再次保存信息后选择打开文件，程序就直接结束了，并且文件一直只有1kb，我不知道为什么，明明我每次寸的时候都要开辟1kb的空间的，我也调试过，不过以我的水平我真的看不出来是为什么，我同学写的从文件调用可以是先在里面填所有信息，但是我的存信息村的是二进制，用记事本打开也是类似的东西，我不知道是为什么。可以的话，希望你们可以改我的代码，打开函数，文件的代码改成你们的文件，再测试一下，或者直接写一段新的发给我让我观摩观摩，", "以下是我的代码（改），这是我改过的代码，源代码就是把校验模块删除了，最下面是我的文件保存和读取函数还有校验唯一性的函数", "\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <conio.h>\n#include <string.h>\n\n", "//定义采购信息 ", "\ntypedef struct _car\n{\n    char bh[", "20", "]; ", "//编号", "\n    char mc[", "10", "]; ", "//名称", "\n    int year; ", "//日期", "\n    int month;\n    int day;\n    char cgy[", "20", "];", "//采购员", "\n    int num;     ", "//数量", "\n    double dj;    ", "//单价", "\n    char dw[", "5", "];  ", "//单位 ", "\n}car;\n\n\n", "//结点 ", "\ntypedef struct _jd\n{\n    car lj;      ", "//零件", "\n\n    struct _jd* pnext;", "//指向下一个结点的指针 ", "\n}jd;\n\n", "//头结点", "\njd* g_pHead = NULL;\n\n", "//函数：菜单 ", "\nvoid menu();\n\n", "//函数：录入信息", "\nvoid lr();\n\n", "//函数：打印信息", "\nvoid dy();\n\n", "//函数：通过编号查找零部件", "\njd* cz_bh();\n\n", "//函数：通过名称查找零部件", "\njd* cz_mc();\n\n", "//函数：修改零部件信息", "\nvoid xg();\n\n", "//函数：删除零部件是头结点的信息", "\nvoid t_sc();\n\n", "//函数：删除零部件不是头结点的信息", "\nvoid ft_sc();\n\n", "//函数：统计采购金额 ", "\ndouble  cgje();\n\n", "//函数：文件的保存", "\nvoid wj_bc();\n\n", "//函数：文件的读取", "\nvoid wj_dq();\n\n", "//函数：释放内存 ", "\nvoid sf_nc();\n\n", "//验证唯一性", "\nvoid check(char _bh[", "20", "]); \n\nint main()\n{\n    ", "while", " (", "1", ")\n    {\n        jd* p;\n        p = g_pHead;\n\n        system(", "\"cls\"", "); ", "//清屏 ", "\n\n        ", "//打开菜单 ", "\n        menu();\n\n        ", "//输入选择 ", "\n        printf(", "\"请输入你的选择(直接点击数字，不用进行回车)\\n\"", ");\n\n        ", "//从键盘中接收一个字符来直接操作 ", "\n        char ch = getch();\n        switch (ch)\n        {\n        case ", "'1'", ":\n            printf(", "\"接下来是采购信息的录入\\n\"", ");\n            lr();\n            break;\n\n        case ", "'2'", ":\n            printf(", "\"接下来是打印所有零部件采购信息\\n\"", ");\n            dy();\n            break;\n\n        case ", "'3'", ":\n        {\n            printf(", "\"接下来是通过编号查找零部件\\n\"", ");\n            p = cz_bh();\n            ", "if", " (p != NULL)\n            {\n                ", "printf", "(\"*编号:%s\\t*名称:%s\\t*日期:%d-%d-%d\\t*采购员:%s\\t*数量%d\\t*单价:%.2lf\\t*单位:%s*\\n\", p->", "lj", ".bh, p->", "lj", ".mc, p->", "lj", ".year, p->", "lj", ".month, p->", "lj", ".day, p->", "lj", ".cgy, p->", "lj", ".num, p->", "lj", ".dj, p->", "lj.dw);\n            }\n\n            ", "else", "\n            {\n                printf(", "\"查找失败，未检查到所输入的编号，请您重新检查输入\\n\"", ");\n            }\n            system(", "\"pause\"", ");\n            break;\n        }\n\n        case ", "'4'", ":\n        {\n            printf(", "\"接下来是通过名称查找零部件\\n\"", ");\n            p = cz_mc();\n            ", "if", " (p != NULL)\n            {\n                ", "printf", "(\"*编号:%s\\t*名称:%s\\t*日期:%d-%d-%d\\t*采购员:%s\\t*数量%d\\t*单价:%.2lf\\t*单位:%s*\\n\", p->", "lj", ".bh, p->", "lj", ".mc, p->", "lj", ".year, p->", "lj", ".month, p->", "lj", ".day, p->", "lj", ".cgy, p->", "lj", ".num, p->", "lj", ".dj, p->", "lj.dw);\n            }\n\n            ", "else", " ", "if", " (p == NULL)\n            {\n                printf(", "\"查找失败，未检查到所输入的名称，请您重新检查输入\\n\"", ");\n            }\n            system(", "\"pause\"", ");\n            break;\n        }\n\n        case ", "'5'", ":\n            printf(", "\"接下来是给定采购编号，修改采购信息\\n\"", ");\n            xg();\n            break;\n\n        case ", "'6'", ":\n        {\n            int i;\n            printf(", "\"接下来是给定采购编号，删除采购信息\\n\"", ");\n            printf(", "\"请输入需要删除的零部件的编号是否是您最后输入的零部件(是或只有一个零部件按1，不是按0):\\n\"", ");\n            scanf(", "\"%d\"", ", &i);\n            ", "if", " (i == ", "1", ")\n            {\n                t_sc();\n            }\n            ", "else", " ", "if", " (i == ", "0", ")\n            {\n                ft_sc();\n            }\n            ", "else", "\n            {\n                printf(", "\"对不起，您的输入有误，请重新检查输入\\n\"", ");\n                system(", "\"pause\"", ");\n            }\n            break;\n        }\n\n        case ", "'7'", ":\n        {\n            double sum;\n            sum = cgje();\n            printf(", "\"总金额为=%.2lf\\n\"", ", sum);\n            system(", "\"pause\"", ");\n            break;\n        }\n        \n        case ", "'8'", ":\n        {\n            wj_bc();\n            break;        \n        }\n        \n        case ", "'9'", ":\n        {\n           wj_dq();\n           break;         \n        }\n        \n        case ", "'a'", ":\n        {\n            sf_nc();\n            break;\n        }\n            \n\n        case", "'0'", ":\n            printf(", "\"感谢您的下次使用，再见\"", ");\n            return ", "0", ";\n            break;\n\n        default:\n            printf(", "\"您当前输入有误，请您确认您的操作再重试\\n\"", ");\n            system(", "\"pause\"", ");\n            break;\n        }\n    }\n\n    return ", "0", ";\n}\n\nvoid menu()\n{\n    printf(", "\"\\t******汽车零部件采购程序******\\n\"", ");\n    printf(", "\"\\t(1)能从键盘输入采购信息。\"", ");\n    printf(", "\"\\n\\t(2)打印所有零部件信息。\"", ");\n    printf(", "\"\\n\\t(3)指定采购编号，显示采购的零部件信息。\"", ");\n    printf(", "\"\\n\\t(4)指定零部件名称，显示该零部件的所有采购信息。\"", ");\n    printf(", "\"\\n\\t(5)给定采购编号，修改采购信息。\"", ");\n    printf(", "\"\\n\\t(6)给定采购编号，删除采购信息。\"", ");\n    printf(", "\"\\n\\t(7)给定名称，采购员或日期来统计采购金额。\"", ");\n    printf(", "\"\\n\\t(8)把数据保存在文件中。\"", ");\n    printf(", "\"\\n\\t(9)把数据从文件中调出。\"", ");\n    printf(", "\"\\n\\t(a)释放内存\"", "); \n    printf(", "\"\\n\\t(0)退出程序\\n\"", ");\n}\n\nvoid lr()\n{\n    ", "//创建一个新结点", "\n    jd* pjd = (jd*)malloc(sizeof(jd));\n    ", "pjd", "->", "pnext = NULL;\n\n    \n\n    printf(", "\"请输入编号(例如:1 2 3):\\n\\t\"", ");\n    ", "scanf", "(\"%s\", pjd->", "lj.bh); ", "//编号", "\n    ", "//check(pjd->lj.bh);", "\n\n    printf(", "\"请输入零部件名称(例如:xxx):\\n\\t\"", ");\n    ", "scanf", "(\"%s\", pjd->", "lj.mc); ", "//名称", "\n\n    printf(", "\"请输入年份(例如:2010):\\n\\t\"", ");\n    ", "scanf", "(\"%d\", &pjd->", "lj.year); ", "//日期", "\n    ", "if", " (pjd->", "lj", ".year < 1900 || pjd->", "lj.year >", "2023", ")\n    {\n        printf(", "\"年份输入错误，正确年份为1900-2023，请重新输入:\\n\"", ");\n        ", "scanf", "(\"%d\", &pjd->", "lj.year);\n    }\n\n    printf(", "\"请输入月份(例如:10):\\n\\t\"", ");\n    ", "scanf", "(\"%d\", &pjd->", "lj.month);\n    ", "if", " (pjd->", "lj", ".month < 1 || pjd->", "lj.month>", "12", ")\n    {\n        printf(", "\"月份输入错误，正确月份为1-12，请重新输入:\\n\\t\"", ");\n        ", "scanf", "(\"%d\", &pjd->", "lj.month);\n    }\n\n    printf(", "\"请输入天份(例如:22):\\n\\t\"", ");\n    ", "scanf", "(\"%d\", &pjd->", "lj.day);\n    ", "if", " ((pjd->", "lj", ".year % 4 == 0 && pjd->", "lj", ".year % 100 != 0) || pjd->", "lj.year % ", "400", " == ", "0", ")\n    {\n        ", "if", " (pjd->", "lj", ".month == 1 || pjd->", "lj", ".month == 3 || pjd->", "lj", ".month == 5 || pjd->", "lj", ".month == 7 || pjd->", "lj", ".month == 8 || pjd->", "lj", ".month == 10 || pjd->", "lj.month == ", "12", ")\n        {\n            ", "if", " (pjd->", "lj", ".day < 1 || pjd->", "lj.day>", "31", ")\n            {\n                printf(", "\"亲，1，3，5，7，8，10，12月仅有31天哦，请重新输入:\\n\\t\"", ");\n                ", "scanf", "(\"%d\", &pjd->", "lj.day);\n            }\n        }\n\n        ", "else", " ", "if", " (pjd->", "lj", ".month == 4 || pjd->", "lj", ".month == 6 || pjd->", "lj", ".month == 9 || pjd->", "lj.month == ", "11", ")\n        {\n            ", "if", " (pjd->", "lj", ".day < 1 || pjd->", "lj.day>", "30", ")\n            {\n                printf(", "\"亲，4，6，9，11月仅有30天哦，请重新输入:\\n\\t\"", ");\n                ", "scanf", "(\"%d\", &pjd->", "lj.day);\n            }\n        }\n\n        ", "else", " ", "if", " (pjd->", "lj.month == ", "2", ")\n        {\n            ", "if", " (pjd->", "lj", ".day < 1 || pjd->", "lj.day>", "29", ")\n            {\n                printf(", "\"亲，虽然是闰年，但是2月也仅有29天哦，请重新输入:\\n\\t\"", ");\n                ", "scanf", "(\"%d\", &pjd->", "lj.day);\n            }\n        }\n    }\n\n    ", "else", "\n    {\n        ", "if", " (pjd->", "lj", ".month == 1 || pjd->", "lj", ".month == 3 || pjd->", "lj", ".month == 5 || pjd->", "lj", ".month == 7 || pjd->", "lj", ".month == 8 || pjd->", "lj", ".month == 10 || pjd->", "lj.month == ", "12", ")\n        {\n            ", "if", " (pjd->", "lj", ".day < 1 || pjd->", "lj.day>", "31", ")\n            {\n                printf(", "\"亲，1，3，5，7，8，10，12月仅有31天哦，请重新输入:\\n\\t\"", ");\n                ", "scanf", "(\"%d\", &pjd->", "lj.day);\n            }\n        }\n\n        ", "else", " ", "if", " (pjd->", "lj", ".month == 4 || pjd->", "lj", ".month == 6 || pjd->", "lj", ".month == 9 || pjd->", "lj.month == ", "11", ")\n        {\n            ", "if", " (pjd->", "lj", ".day < 1 || pjd->", "lj.day>", "30", ")\n            {\n                printf(", "\"亲，4，6，9，11月仅有30天哦，请重新输入:\\n\\t\"", ");\n                ", "scanf", "(\"%d\", &pjd->", "lj.day);\n            }\n        }\n\n        ", "else", " ", "if", " (pjd->", "lj.month == ", "2", ")\n        {\n            ", "if", " (pjd->", "lj", ".day < 1 || pjd->", "lj.day>", "28", ")\n            {\n                printf(", "\"亲，虽然是平年年，但是2月也仅有28天哦，请重新输入:\\n\\t\"", ");\n                ", "scanf", "(\"%d\", &pjd->", "lj.day);\n            }\n        }\n    }\n\n\n    printf(", "\"请输入采购员名称(例如:张三):\\n\\t\"", ");\n    ", "scanf", "(\"%s\", pjd->", "lj.cgy);", "//采购员 ", "\n\n    printf(", "\"请输入采购数量(例如:2):\\n\\t\"", ");\n    ", "scanf", "(\"%d\", &pjd->", "lj.num);", "//数量 ", "\n\n    printf(", "\"请输入零部件单价(例如:2.00):\\n\\t\"", ");\n    ", "scanf", "(\"%lf\", &pjd->", "lj.dj);", "//单价 ", "\n\n    printf(", "\"请输入零部件价格单位(例如:SF):\\n\\t\"", ");\n    ", "scanf", "(\"%s\", pjd->", "lj.dw); ", "//单位 ", "\n    \n    ", "//头插法", "\n    ", "if", " (g_pHead == NULL) ", "//没有结点，赋予结点 ", "\n    {\n        g_pHead = pjd;\n    }\n    ", "else", "                ", "//有结点", "\n    {\n        ", "pjd", "->", "pnext = g_pHead;", "//新结点的下一个为头结点", "\n        g_pHead = pjd;      ", "//则头结点为新设的结点 ", "\n    }\n\n    printf(", "\"零部件信息录入成功!\\n\"", ");\n    printf(", "\"如果您想继续输入，请在看到请按任意键继续后回到菜单继续按1录入信息\\n\"", ");\n\n    system(", "\"pause\"", "); ", "//停顿 ", "\n    return;\n}\n", "//*********************", "\n", "//********", "\n", "//*************", "\n\nvoid dy()\n{\n    printf(", "\"**************************************************************\\n\"", ");\n    printf(", "\"*\\t               欢迎使用汽车零部件管理系统            *\\n\"", ");\n    printf(", "\"**************************************************************\\n\"", ");\n\n    printf(", "\"*编号\\t*名称\\t*日期\\t        *采购员\\t*数量\\t*单价\\t*单位*\\n\"", ");\n    printf(", "\"**************************************************************\\n\"", ");\n\n    ", "//遍历链表", "\n    jd* p = g_pHead; ", "//让p指向头指针", "\n    ", "while", " (p != NULL)", "//只要结点不为空就让循环往下走 ", "\n    {\n        printf(", "\"*%s\\t*%s\\t*%d-%d-%d\\t*%s\\t*%d\\t*%.2lf\\t*%s*\\n\"", ",\n            ", "p", "->", "lj.bh,\n            ", "p", "->", "lj.mc,\n            ", "p", "->", "lj.year,\n            ", "p", "->", "lj.month,\n            ", "p", "->", "lj.day,\n            ", "p", "->", "lj.cgy,\n            ", "p", "->", "lj.num,\n            ", "p", "->", "lj.dj,\n            ", "p", "->", "lj.dw);\n\n        ", "p", " = p->", "pnext; ", "//指向下一个 ", "\n    }\n\n    system(", "\"pause\"", ");\n}\n\njd* cz_bh()\n{\n    char cz_bh[", "20", "];\n\n    printf(", "\"请输入你想查找的零件的编号:\\n\"", ");\n    scanf(", "\"%s\"", ", cz_bh);\n\n    jd* p = g_pHead;\n    ", "while", " (p != NULL)\n    {\n        ", "if", " (strcmp(p->", "lj.bh, cz_bh) == ", "0", ") ", "//会报警告 ", "\n        {\n            return p;\n        }\n\n        ", "p", " = p->", "pnext;\n    }\n    return NULL;\n}\n\njd* cz_mc()\n{\n    char cz_mc[", "20", "];\n\n    printf(", "\"请输入你想查找的零件的名称:\\n\"", ");\n    scanf(", "\"%s\"", ", cz_mc);\n\n    jd* p = g_pHead;\n    ", "while", " (p != NULL)\n    {\n        ", "if", " (strcmp(p->", "lj.mc, cz_mc) == ", "0", ")\n        {\n            return p;\n        }\n\n        ", "p", " = p->", "pnext;\n    }\n    return NULL;\n}\n\nvoid xg()\n{\n    int i = ", "0", ";\n\n    char xg_bh[", "20", "];\n\n    printf(", "\"请输入需要修改的零部件的采购编号\\n\"", ");\n    scanf(", "\"%s\"", ", xg_bh);\n\n    jd* p = g_pHead;\n    ", "while", " (p != NULL)\n    {\n        ", "if", " (strcmp(p->", "lj", ".bh, xg_bh) == 0) //p->", "li.bh与xg_bh不能用等号比较 \n        {\n            printf(", "\"请输入您想修改的零件信息:\\n修改编号请按1\\n修改名称请按2\\n修改日期请按3\\n修改采购员请按4\\n修改数量请按5\\n修改单价请按6\\n修改单位请按7\\n如果要全部修改请按0\\n\"", ");\n            scanf(", "\"%d\"", ", &i);\n\n            ", "if", " (i == ", "1", ")\n            {\n                printf(", "\"您好，请输入修改后的编号:\\n\"", ");\n                ", "scanf", "(\"%s\", p->", "lj.bh);\n            }\n\n            ", "else", " ", "if", " (i == ", "2", ")\n            {\n                printf(", "\"您好，请输入修改后的名称:\\n\"", ");\n                ", "scanf", "(\"%s\", p->", "lj.mc);\n            }\n\n            ", "else", " ", "if", " (i == ", "3", ")\n            {\n                printf(", "\"您好，如果您想修改年份请按1，修改月份请按2，修改天份请按3:\\n\"", ");\n                scanf(", "\"%d\"", ", &i);\n\n                ", "if", " (i == ", "1", ")\n                {\n                    printf(", "\"请输入修改后的年份:\\n\\t\"", ");\n                    ", "scanf", "(\"%d\", &p->", "lj.year);\n                }\n\n                ", "else", " ", "if", " (i == ", "2", ")\n                {\n                    printf(", "\"请输入修改后的月份:\\n\\t\"", ");\n                    ", "scanf", "(\"%d\", &p->", "lj.month);\n                }\n\n                ", "else", " ", "if", " (i == ", "3", ")\n                {\n                    printf(", "\"请输入修改后的天份:\\n\\t\"", ");\n                    ", "scanf", "(\"%d\", &p->", "lj.day);\n                }\n            }\n\n            ", "else", " ", "if", " (i == ", "4", ")\n            {\n                printf(", "\"您好，请输入修改后的采购员:\\n\"", ");\n                ", "scanf", "(\"%s\", p->", "lj.cgy);\n            }\n\n            ", "else", " ", "if", " (i == ", "5", ")\n            {\n                printf(", "\"您好，请输入修改后的数量:\\n\"", ");\n                ", "scanf", "(\"%d\", &p->", "lj.num);\n            }\n\n            ", "else", " ", "if", " (i == ", "6", ")\n            {\n                printf(", "\"您好，请输入修改后的单价:\\n\"", ");\n                ", "scanf", "(\"%lf\", &p->", "lj.dj);\n            }\n\n            ", "else", " ", "if", " (i == ", "7", ")\n            {\n                printf(", "\"您好，请输入修改后的单位:\\n\"", ");\n                ", "scanf", "(\"%s\", p->", "lj.dw);\n            }\n\n            ", "else", " ", "if", " (i == ", "0", ")\n            {\n                printf(", "\"您好，请输入修改后的编号 名称 日期 采购员 数量 单价 单位:\\n\"", ");\n                ", "scanf", "(\"%s %s %d %d %d %s %d %lf %s\", p->", "lj", ".bh, p->", "lj", ".mc,&p->", "lj", ".year,&p->", "lj", ".month,&p->", "lj", ".day, p->", "lj", ".cgy, &p->", "lj", ".num, &p->", "lj", ".dj, p->", "lj.dw);\n            }\n\n            ", "else", "\n            {\n                printf(", "\"对不起输入错误，请检查您的输入再重试\"", ");\n                system(", "\"pause\"", ");\n                break;\n            }\n\n            printf(", "\"修改成功\\n\"", ");\n            system(", "\"pause\"", ");\n            break;\n        }\n        ", "p", " = p->", "pnext;\n    }\n\n    ", "if", " (p == NULL)\n    {\n        printf(", "\"未能找到此采购编号对应零部件，请检查编号\\n\"", ");\n        system(", "\"pause\"", ");\n    }\n}\n\nvoid t_sc()\n{\n    jd* p1;\n    char sc_bh[", "20", "];\n    printf(", "\"请输入你所想要删除的零部件的编号:\"", ");\n    scanf(", "\"%s\"", ", sc_bh);\n\n    ", "//如果是头结点 ", "\n    ", "if", " (strcmp(g_pHead->", "lj.bh, sc_bh) == ", "0", ")\n    {\n        p1 = g_pHead;            ", "//备份头结点 ", "\n        ", "g_pHead", " = g_pHead->", "pnext;", "// 将头结点指向下一个结点 ", "\n        free(p1); ", "//删除就是释放这段内存 ,p1被赋予了头结点，但是头结点已经指向下一个结点 ", "\n        printf(", "\"恭喜，删除成功\\n\"", ");\n        system(", "\"pause\"", ");\n        return;\n    }\n\n    ", "else", "\n    {\n        printf(", "\"对不起，删除失败，请检查你输入的编号\\n\"", ");\n        system(", "\"pause\"", ");\n        return;\n    }\n}\n\nvoid ft_sc()\n{\n    ", "//如果不是头结点", "\n    char sc1_bh[", "20", "];\n    printf(", "\"请输入你所想要删除的零部件的编号:\"", ");\n    scanf(", "\"%s\"", ", sc1_bh);\n    jd* p = g_pHead;\n    jd* p2;                  ", "//p2是备份的 ", "\n    ", "while", " (p2->", "pnext != NULL)\n    {\n        ", "if", " (strcmp(p->", "pnext", "->", "lj.bh, sc1_bh) == ", "0", ")\n        {\n            ", "p2", " = p->", "pnext;             ", "//备份头结点 ", "\n            ", "p", "->", "pnext", " = p->", "pnext", "->", "pnext;", "//中间结点(要删除的结点)的上一个结点是头结点，头结点的下一个结点是中间节点的后一个结点 ，把中间结点指向第三个结点 ", "\n            free(p2);\n        }\n\n        ", "if", " (p->", "pnext == NULL) ", "//中间结点已删除.  NULL会警告，'0'不会 ，char变量和指针变量不能比较 ", "\n        {\n            printf(", "\"恭喜，成功删除\\n\"", ");\n            system(", "\"pause\"", ");\n            return;\n        }\n\n        ", "p", " = p->", "pnext;\n\n        ", "if", " (p->", "pnext == NULL)", "//跳出循环，表示零件不存在", "\n        {\n            printf(", "\"对不起，删除失败，请检查你输入的编号\\n\"", ");\n            system(", "\"pause\"", ");\n            return;\n        }\n    }\n\n}\n\ndouble  cgje()\n{\n    int i = ", "0", ",j = ", "0", ";\n    double sum = ", "0", ";\n    char tj_mc[", "20", "];\n    char tj_cgy[", "20", "];\n    int tj_rq_year;\n    int tj_rq_month;\n    int tj_rq_day;\n\n    jd* p = g_pHead;\n\n    printf(", "\"您想依据什么来统计采购金额(依据名称请按1，依据采购员请按2，依据采购日期请按3)\\n\"", ");\n    scanf(", "\"%d\"", ", &i);\n\n    ", "if", " (i == ", "1", ")\n    {\n        printf(", "\"请输入被统计零件的名称:\\n\"", ");\n        scanf(", "\"%s\"", ", tj_mc);\n\n        ", "while", " (p != NULL)\n        {\n            ", "if", " (strcmp(tj_mc, p->", "lj.mc) == ", "0", ")\n            {\n                ", "sum", " += p->", "lj", ".dj * p->", "lj.num;\n                ", "p", " = p->", "pnext;\n            }\n\n            ", "else", " ", "if", " (strcmp(tj_mc, p->", "lj.mc) != ", "0", ")\n            {\n                printf(", "\"您输入的名称有误，请返回菜单后再重新统计\\n\"", ");\n                return ", "0", ";\n            }\n        }\n        return sum;\n    }\n\n    ", "else", " ", "if", " (i == ", "2", ")\n    {\n        printf(", "\"请输入被统计零件的采购员:\\n\"", ");\n        scanf(", "\"%s\"", ", tj_mc);\n\n        ", "while", " (p != NULL)\n        {\n            ", "if", " (strcmp(tj_cgy, p->", "lj.cgy) == ", "0", ")\n            {\n                ", "sum", " += p->", "lj", ".dj * p->", "lj.num;\n                ", "p", " = p->", "pnext;\n            }\n\n            ", "else", " ", "if", " (strcmp(tj_cgy, p->", "lj.cgy) != ", "0", ")\n            {\n                printf(", "\"您输入的采购员有误，请返回菜单后再重新统计\\n\"", ");\n                return ", "0", ";\n            }\n        }\n        return sum;\n    }\n    \n    ", "else", " ", "if", "(i==", "3", ")\n    {\n        printf(", "\"按年统计请按1，按月份统计请按2，按天份统计请按3\\n\"", ");\n        scanf(", "\"%d\"", ",&j);\n        \n        ", "if", "(j==", "1", ")\n        {\n            printf(", "\"您想查找那一年的总金额(例如:2022):\\n\"", ");\n            scanf(", "\"%d\"", ",&tj_rq_year);\n            ", "while", "(p != NULL)\n            {\n                ", "if", "(tj_rq_year==p->", "lj.year)\n                {\n                    ", "sum", " += p->", "lj", ".dj * p->", "lj.num;\n                    ", "p", "=p->", "pnext;\n                }\n            }\n            return sum;\n        }\n        \n        ", "else", " ", "if", "(j==", "2", ")\n        {\n            printf(", "\"您想查找那一月的总金额(例如:2022):\\n\"", ");\n            scanf(", "\"%d\"", ",&tj_rq_month);\n            ", "while", "(p != NULL)\n            {\n                ", "if", "(tj_rq_month==p->", "lj.month)\n                {\n                    ", "sum", " += p->", "lj", ".dj * p->", "lj.num;\n                    ", "p", "=p->", "pnext;\n                }\n            }\n            return sum;\n        }\n        \n        ", "else", " ", "if", "(j==", "3", ")\n        {\n            printf(", "\"您想查找那一天的总金额(例如:2022):\\n\"", ");\n            scanf(", "\"%d\"", ",&tj_rq_day);\n            ", "while", "(p != NULL)\n            {\n                ", "if", "(tj_rq_day==p->", "lj.day)\n                {\n                    ", "sum", " += p->", "lj", ".dj * p->", "lj.num;\n                    ", "p", "=p->", "pnext;\n                }\n            }\n            return sum;\n        }\n    }\n}\n\nvoid wj_bc()\n{\n    ", "//打开文件", "\n    FILE* fp = fopen(", "\"C:\\\\Users\\\\joker\\\\dy.data\"", ",", "\"w\"", ");\n    \n    ", "if", "(fp == NULL)\n    {\n        printf(", "\"打开文件失败\\n\"", ");\n        return;\n    }\n    \n    jd* njd = g_pHead;\n    ", "while", "(njd != NULL)\n    {\n        ", "fwrite", "(&njd->", "lj,", "1", ",sizeof(car),fp); ", "//结构体内容 几kb 以什么方式 ", "\n        ", "njd", " = njd->", "pnext;\n    }\n    \n    ", "//关闭文件", "\n    fclose(fp); \n    printf(", "\"数据保存成功\\n\"", ");\n    system(", "\"pause\"", ");\n    system(", "\"cls\"", ");\n    return;\n}\n\nvoid wj_dq()\n{\n    ", "//打开文件", "\n    FILE* fp = fopen(", "\"C:\\\\Users\\\\joker\\\\dy.data\"", ",", "\"r\"", ");\n    ", "if", "(fp == NULL)\n    {\n        printf(", "\"抱歉，文件内容为空\\n\"", ");\n        return;\n    }\n    \n    ", "//读文件", "\n    car lj;\n    ", "while", "(fread(&lj,", "1", ",sizeof(car),fp)) ", "//feof判断是否到末尾 ,但是会多一行 ", "\n    {\n        ", "//创建一个新结点", "\n        jd* djd=(jd*)malloc(sizeof(car)); \n        ", "djd", "->", "pnext=NULL;\n        \n        memcpy(djd,&lj,sizeof(lj)); ", "//添加头文件<string.h> ", "\n        \n        ", "//头插法", "\n        ", "if", " (g_pHead == NULL) ", "//没有结点，赋予结点 ", "\n        {\n            g_pHead = djd;\n        }\n        ", "else", "                ", "//有结点", "\n        {\n             ", "djd", "->", "pnext = g_pHead;", "//新结点的下一个为头结点", "\n            g_pHead = djd;      ", "//则头结点为新设的结点 ", "\n        }\n    } \n    \n    ", "//关闭文件", "\n    fclose(fp); \n    printf(", "\"加载数据成功！\\n\"", ");\n    system(", "\"pause\"", ");\n}\n\nvoid sf_nc()\n{\n    jd* sf_jd =(jd*)malloc(sizeof(jd));\n    ", "sf_jd", "->", "pnext=NULL;\n    ", "//头插法", "\n        ", "if", " (g_pHead == NULL) ", "//没有结点，赋予结点 ", "\n        {\n            g_pHead = sf_jd;\n        }\n        ", "else", "                ", "//有结点", "\n        {\n             ", "sf_jd", "->", "pnext = g_pHead;", "//新结点的下一个为头结点", "\n            g_pHead = sf_jd;      ", "//则头结点为新设的结点 ", "\n        }\n        \n        ", "while", "(sf_jd!=NULL)\n        {\n            ", "sf_jd", "=sf_jd->", "pnext;\n            free(sf_jd);\n        }\n}\n\nvoid check(char _bh[", "20", "])\n{\n    jd* p = g_pHead;\n    ", "while", "(p->", "pnext!=", "0", ")\n    {\n        ", "if", "(strcmp(p->", "lj.bh,_bh)==", "0", ")\n        {\n            printf(", "\"编号重复，请重试\\n\"", ");\n            ", "scanf", "(\"%s\",p->", "lj.bh);\n            check(_bh);\n        }\n        ", "p", "=p->", "pnext;\n    }\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "https://blog.csdn.net/qq_29503203/article/details/53034955", "Konwledge_Point": "重复n次操作", "Question": ["关于HUFFMAN利用数组压缩的算法问题", ["整体代码如下，具体关于问题在最下方，", "\nstruct head", "\n{", "\n unsigned char b;             /*the charactor*/", "\n long count;                  /*the frequency*/", "\n long parent,lch,rch;         /*make a tree*/", "\n char bits[256];              /*the haffuman code*/", "\n}", "\nheader[512],tmp;", "\n\n", "void compress()", "\n{", "\n\n", "clock_t start,end; ", "\n char filename[255],outputfile[255],buf[512];", "\n int fn = 0, sz = 0, sz1 = 0;", "\n double x = 0;", "\n unsigned char c;", "\n long i,j,m,n,f;", "\n long min1,pt1,flength;", "\n FILE ", "ifp,*ofp;", "\n printf(\"源文件名:\");", "\n gets_s(filename);", "\n ifp=fopen(filename,\"rb\");", "\n if(ifp==NULL)", "\n {", "\n  printf(\"源文件打开失败!\\n\");", "\n  return;", "\n }", "\n fn = _fileno(ifp); /", "取得文件指针的底层流式文件号*/", "\n sz = _filelength(fn);/*根据文件号取得文件大小*/", "\n printf(\"文件大小为:%d B.\\n\", sz);", "\n sz1 = sz;", "\n printf(\"压缩后文件名:\");", "\n gets_s(outputfile);", "\n  start=clock(); /* 计时开始 */ ", "\n ofp=fopen(outputfile,\"wb\");", "\n if(ofp==NULL)", "\n {", "\n  printf(\"压缩文件打开失败!\\n\");", "\n  return;", "\n }", "\n flength=0;", "\n\n", "while(!feof(ifp))", "\n {", "\n  fread(&c,1,1,ifp);//读数据", "\n  header[c].count++; //字符重复出现频率+1", "\n  flength++;  //字符出现原文件长度+1", "\n }", "\n flength--;", "\n header[c].count--;//减一平衡位数", "\n for(i=0;i\n {", "\n  if(header[i].count!=0) ", "\n      header[i].b=(unsigned char)i;", "\n  /*将每个哈夫曼码值及其对应的ASCII码存放在一维数组header[i]中，", "\n  且编码表中的下标和ASCII码满足顺序存放关系*/", "\n  else header[i].b=0;", "\n  header[i].parent=-1; //对结点进行初始化", "\n  header[i].lch=header[i].rch=-1;", "\n }", "\n for(i=0;i\n {", "\n  for(j=i+1;j\n  {", "\n   if(header[i].count \n   {", "\n    tmp=header[i];", "\n    header[i]=header[j];", "\n    header[j]=tmp;", "\n   }", "\n  }", "\n }", "\n for(i=0;i\n n=i;", "\n m=2*n-1; //外部叶子结点数为n个时，内部结点数为n-1，整个哈夫曼树的需要的结点数为2*n-1.", "\n for(i=n;i\n {", "\n  min1=999999999;", "\n  for(j=0;j", "\n  {", "\n   if(header[j].parent!=-1) continue;//parent!=-1说明该结点已存在哈夫曼树中，跳出循环重新选择新结点*/", "\n   if(min1>header[j].count)", "\n   {", "\n    pt1=j;", "\n    min1=header[j].count;//找到最小值", "\n    continue;", "\n   }", "\n  }", "\n  header[i].count=header[pt1].count;", "\n  header[pt1].parent=i; //依据parent域值（结点层数）确定树中结点之间的关系", "\n  header[i].lch=pt1;//计算左分支权值大小", "\n  min1=999999999;", "\n  for(j=0;j", "\n  {", "\n   if(header[j].parent!=-1) continue;", "\n   if(min1>header[j].count)", "\n   {", "\n    pt1=j;", "\n    min1=header[j].count;", "\n    continue;", "\n   }", "\n  }", "\n  header[i].count+=header[pt1].count;", "\n  header[i].rch=pt1;//计算右分支权值大小", "\n  header[pt1].parent=i;", "\n }", "\n for(i=0;i\n {", "\n  f=i;", "\n  header[i].bits[0]=0;//根结点编码0   ", "\n  while(header[f].parent!=-1)", "\n  {", "\n   j=f;", "\n   f=header[f].parent;", "\n   if(header[f].lch==j) //置左分支编码0", "\n   {", "\n    j=strlen(header[i].bits);//扫描长度", "\n    memmove(header[i].bits+1,header[i].bits,j+1);//由header复制j+ 1个到前者", "\n                                                 //依次存储连接“0”“1”编码", "\n    header[i].bits[0]='0';", "\n   }", "\n   else//置右分支编码1", "\n   {", "\n    j=strlen(header[i].bits);//计算字符长度？", "\n    memmove(header[i].bits+1,header[i].bits,j+1);", "\n    header[i].bits[0]='1';", "\n   }", "\n  }", "\n }", "\n fseek(ifp,0,SEEK_SET);//从文件开始位置向前移动0字节，即定位到文件开始位置", "\n fwrite(&flength,sizeof(int),1,ofp);/*用来将数据写入文件流中，参数flength指向欲写入的数据地址，", "\n总共写入的字符数以参数size*int来决定，返回实际写入的int数目1*/ ", "\n fseek(ofp,8,SEEK_SET);", "\n buf[0]=0; //定义缓冲区,它的二进制表示00000000", "\n f=0;", "\n pt1=8;", "\n /*假设原文件第一个字符是\"A\"，8位2进制为01000001，编码后为0110识别编码第一个'0'，", "\n 那么我们就可以将其左移一位，看起来没什么变化。下一个是'1'，应该|1，结果00000001", "\n 同理4位都做完，应该是00000110，由于字节中的8位并没有全部用完，我们应该继续读下一个字符，", "\n 根据编码表继续拼完剩下的4位，如果字符的编码不足4位，还要继续读一个字符，", "\n 如果字符编码超过4位，那么我们将把剩下的位信息拼接到一个新的字节里*/", "\n while(!feof(ifp))", "\n {", "\n  c=fgetc(ifp);", "\n  f++;", "\n  for(i=0;i\n  {", "\n   if(c==header[i].b) break;", "\n  }", "\n  strcat(buf,header[i].bits);", "\n  j=strlen(buf);", "\n  c=0;", "\n  while(j>=8) //对哈夫曼编码位操作进行压缩存储", "\n  {", "\n   for(i=0;i\n   {", "\n    if(buf[i]=='1') c=(c\n    else c=c\n   }", "\n   fwrite(&c,1,1,ofp);", "\n   pt1++; //统计压缩后文件的长度", "\n   strcpy(buf,buf+8);//一个字节一个字节拼接", "\n   j=strlen(buf);", "\n  }", "\n  if(f==flength) break;", "\n }", "\n if(j>0) //对哈夫曼编码位操作进行压缩存储", "\n {", "\n  strcat(buf,\"00000000\");", "\n  for(i=0;i<8;i++)", "\n  {", "\n   if(buf[i]=='1') c=(c<<1)|1;", "\n   else c=c<<1;", "\n  }", "\n  fwrite(&c,1,1,ofp);", "\n  pt1++;", "\n }", "\n fseek(ofp,4,SEEK_SET);", "\n fwrite(&pt1,sizeof(long),1,ofp);", "\n fseek(ofp,pt1,SEEK_SET);", "\n fwrite(&n,sizeof(long),1,ofp);", "\n for(i=0;i<n;i++)", "\n {", "\n  fwrite(&(header[i].b),1,1,ofp);", "\n  c=strlen(header[i].bits);", "\n  fwrite(&c,1,1,ofp);", "\n  j=strlen(header[i].bits);", "\n  if(j%8!=0) //若存储的位数不是8的倍数，则补0", "\n  {", "\n   for(f=j%8;f<8;f++)", "\n   strcat(header[i].bits,\"0\");", "\n  }", "\n  while(header[i].bits[0]!=0)", "\n  {", "\n   c=0;", "\n   for(j=0;j<8;j++) //字符的有效存储不超过8位，则对有效位数左移实现两字符编码的连接", "\n   {", "\n    if(header[i].bits[j]=='1') c=(c<<1)|1; //|1不改变原位置上的“0”“1”值", "\n    else c=c<<1;", "\n   }", "\n   strcpy(header[i].bits,header[i].bits+8);// 把字符的编码按原先存储顺序连接", "\n   fwrite(&c,1,1,ofp);", "\n  }", "\n }", "\n fclose(ifp);", " ", "\n\n", "printf(\"压缩成功!\\n\");", "\n end=clock(); /* 计时结束 ", "/", "\n fn = _fileno(ofp); /", "取得文件指针的底层流式文件号*/", "\n sz = _filelength(fn);/*根据文件号取得文件大小*/", "\n printf(\"压缩后文件大小为:%d B.\\n\", sz);", "\n x = (sz / sz1)*1.0;", "\n printf(\"压缩率为:%d B.\\n\", x);", "\n fclose(ofp); ", "\nprintf(\"压缩用时%f秒\\n\",(double)(end - start) / CLOCKS_PER_SEC);", "\n return;", "\n}", "\n\n", "//", "\n整体代码如上，请问下  关于找到最小值以后", "\n\n", "header[i].count=header[pt1].count;", "\n  header[pt1].parent=i; //依据parent域值（结点层数）确定树中结点之间的关系", "\n  header[i].lch=pt1;//计算左分支权值大小", "\n    哈夫曼生成的节点权重不应该两者之和么，这个对于双亲的赋值不是很懂，这种利用数组进行排序以后的这个操作不是很明白，这个i好像是顺序，但不是累加，怎么剔除以后去和剩下的节点比较啊。原来搞不明白这里怎么赋值的"]], "Tag": "程序设计"}
{"Answer": "```\r\n void DeleteLink(List *L,int n){\r\n    List *p = L-&gt;next;\r\n    List *s = L;\r\n    int i=0;\r\n    for(i=0;p!=NULL;i++){\r\n        if(i==n){\r\n            s-&gt;next=p-&gt;next;\r\n            free(p); //这里free p了，p就不能用了\r\n        }\r\n        s=s-&gt;next;\r\n        p=p-&gt;next; 你还在访问p-&gt;next\r\n    }\r\n\r\n}\r\n```", "Konwledge_Point": "重复n次操作", "Question": ["C语言问题 感觉自己是对的  但提交后总 Runtime error", ["描述：", "\n\n", "已知a、b和c三个递增有序的链表，现在要求对a做如下操作：删除其中既即在b中出现又在c中出现的元素（注意同一表中的元素有可能重复）。", "\n\n", "输入：", "\n\n", "先在第一行输入3个小于100的正整数m，n，l分别表示链表a，b，c的长度，然后在第二行输入m个递增的正整数，第三行输入n个递增的正整数，第四行输入l个递增的正整数，分别为这三个链表的元素，", "\n\n", "输出：", "\n\n", "按顺序输出删除元素后的链表a的值，每个元素占一行。", "\n\n", "输入样例：", "\n\n", "3 8 5 ", "\n23 47 88", "\n2 5 7 9 47 47 88 99", "\n10 20 30 40 47", "\n输出样例：", "\n\n", "23", "\n\n", "88", "\n\n", "我的代码：（很多数据都试过了，都没错啊！！！）", "\n#include ", "\n#include", "\ntypedef struct List{", "\n   int data;", "\n   int length;", "\n   struct List *next;", "\n}  List;", "\nList *LA,*LB,*LC;", "\n\n", "void CreateLink(List **L,int length)", "\n{", "\n    List ", "p,*s;", "\n    p=*L=(List *)malloc(sizeof(List));", "\n    (*L)->length=length;", "\n    for(;length>0;length--)", "\n    {", "\n        s=(List *)malloc(sizeof(List));", "\n        scanf(\"%d\",&s->data);", "\n        p->next=s;", "\n        p=s;", "\n    }", "\n    p->next=NULL;", "\n}", "\n/*int GetLinkData(List *L,int n){", "\n    List *p;", "\n    int i=0;", "\n    p=L->next;", "\n    if(n> L->length -1) {", "\n        printf(\"输入位置错误！\\n\");", "\n        return -1;", "\n    }", "\n    for(i=0;p!=NULL;i++){", "\n        if(i==n) return p->data;", "\n        p=p->next;", "\n    }", "\n    return 0;", "\n}", "/", "\nint GetDataPosition(List *L,int value){", "\n    List *p;", "\n    int i=0;", "\n    p=L->next;", "\n    for(i=0;p!=NULL;i++){", "\n        if(p->data == value){", "\n            return i;", "\n        }", "\n        p=p->next;", "\n    }", "\n    return -1;", "\n}", "\nvoid DeleteLink(List *L,int n){", "\n    List *p = L->next;", "\n    List *s = L;", "\n    int i=0;", "\n    for(i=0;p!=NULL;i++){", "\n        if(i==n){", "\n            s->next=p->next;", "\n            free(p);", "\n        }", "\n        s=s->next;", "\n        p=p->next;", "\n    }", "\n\n", "}", "\n\n", "void PrintLink(List ", "L)", "\n{", "\n    List *p;", "\n    p=L->next;", "\n    while(p!=NULL)", "\n    {", "\n        printf(\"%d\\n\",p->data);", "\n        p=p->next;", "\n    }", "\n}", "\n/*void InsertLink(List *L,int insert){", "\n    List *p=L->next;", "\n    List *s=L;", "\n    List *p2=(List *)malloc(sizeof(List));", "\n    p2->data=insert;", "\n    while(p!=NULL){", "\n        if(p->data >= insert){", "\n            p2->next=p;", "\n            s->next=p2;", "\n            return;", "\n        }", "\n        s=s->next;", "\n        p=p->next;", "\n    }", "\n    s->next=p2;", "\n    p2->next=NULL;", "\n}", "/", "\nvoid ProcessLink(List *L1,List *L2,List *L3){", "\n    int i=0,t1=0,t2=0,d=0;", "\n    List *p = L1->next;", "\n    for(i=0;p!=NULL;i++){", "\n        d=p->data;", "\n//       printf(\"p-data %d\\n\",d);", "\n        t1=GetDataPosition(L2,d);", "\n\n", "//       printf(\"在L2表中p-data的位置：%d\\n\",t1);", "\n        t2=GetDataPosition(L3,d);", "\n//       printf(\"在L3表中p-data的位置：%d\\n\",t2);", "\n        if(t1!=-1 && t2!=-1){", "\n            p=p->next;", "\n            DeleteLink(L1,i);", "\n            i--;", "\n/*调试了好几天啊，链表删除一个节点之后总长度减一，如果i不自减，", "\n因为GetDataPosition()都是每次遍历查找的，DeleteLink(L1,i)将会", "\n删去你想要删去的后面那个节点*/", "\n            continue;", "\n        }", "\n        p=p->next;", "\n    }", "\n}", "\nvoid DestroyList(List *L)", "\n{", "\n    List *p,*q;", "\n    p=L;", "\n    while(p!=NULL)", "\n    {", "\n        q=p->next;", "\n        free(p);", "\n        p=q;", "\n    }", "\n    L=NULL;", "\n}", "\nint main()", "\n{", "\n //   freopen(\"input.txt\",\"r\",stdin);", "\n    int l1=0,l2=0,l3=0;", "\n    scanf(\"%d\",&l1);", "\n    scanf(\"%d\",&l2);", "\n    scanf(\"%d\",&l3);", "\n    CreateLink(&LA,l1);", "\n    CreateLink(&LB,l2);", "\n    CreateLink(&LC,l3);", "\n//    PrintLink(LA);", "\n    ProcessLink(LA,LB,LC);", "\n    PrintLink(LA);", "\n    DestroyList(LA);", "\n    DestroyList(LB);", "\n    DestroyList(LC);", "\n    return 0;", "\n}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;首先你的链表元素是int类型&amp;#xff0c;但你输入用getchar()&amp;#xff0c;导致输入的1被当做数字字符&amp;#39;1&amp;#39;接收&amp;#xff0c;存储到int型就是数字&amp;#39;1&amp;#39;的ASCII码了。&lt;br /&gt;另外换行符也是字符啊&amp;#xff0c;换行符的ASCII码是10&amp;#xff0c;所以你最终输出的实际是输入的字符的ASCII码&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["数据结构链表的输出函数", ["为什么ListPrint函数输出的结果是这个？", "\n", "\n", "\n", "\n", "\n#include", "\"stdio.h\"", "\n#include<stdlib.h>\n#define ERROR ", "0", "\n#define OK ", "1", "\ntypedef int ElemType;  \n\ntypedef struct Node", "//结点类型定义 ", "\n{\n    ElemType ", "data", ";\n    struct Node * next;\n}Node, * LinkList;", "//LinkList为结构指针类型 ", "\n\nInitList (LinkList * L)", "//初始化单链表  ", "\n{\n    *L=(LinkList)malloc(sizeof(Node));", "//建立头结点 ", "\n    (*L)->next=NULL;", "//建立空的单链表L ", "\n} \n\nvoid CreateFromHead(LinkList L)", "//头插法逆序建表 ", "\n{\n        Node * s;\n        char c;\n        int flag=", "1", ";\n        ", "while", "(flag)", "//flag初值为1,当输入\"$\"时,置flag为0,建表结束", "\n        {\n            c=getchar();\n            ", "if", "(c!=", "'$'", ")\n                {\n                    s=(Node*)malloc(sizeof(Node));", "//建立新结点S ", "\n                    ", "s", "->", "data", "=c;\n                    ", "s", "->", "next", "=L->", "next;", "//将S结点插入头结点 ", "\n                    L->next=s;\n                }\n            ", "else", " flag=", "0", ";\n        } \n} \n\nvoid CreateFromTail(LinkList L)", "//尾插法顺序建表", "\n{\n    char c;\n    Node * r,* s;\n    int flag=", "1", ";\n    r=L;", "//r指针动态指向链表的当前表尾,以便于插入表尾，其初值指向头结点 ", "\n    ", "while", "(flag)\n    {\n        c=getchar();\n        ", "if", "(c!=flag)\n            {\n                s=(Node*)malloc(sizeof(Node));\n                ", "s", "->", "data", "=c;\n                ", "r", "->", "next=s;\n                r=s;    \n            }\n        ", "else", "\n            {\n                flag=", "0", ";\n                ", "r", "->", "next=NULL;", "//将最后一个结点的next链域置为空,表示链表的结束 ", "\n            }    \n    }\n}\n\nNode * Get(LinkList L,int i)", "//按序号查找 ", "\n{\n    int j;\n    Node * p;\n    ", "p", "=L->", "next;\n    ", "if", "(i<=", "0", ") return NULL;\n    p=L;j=", "0", ";", "//从头结点开始扫描 ", "\n    ", "while", "((p->", "next!=NULL)&&(j<i))\n    {\n        ", "p", "=p->", "next;", "//扫描下一个结点 ", "\n        j++;", "//结点计数器 ", "\n    }\n    ", "if", "(i==j) return p;", "//找到了第i个结点 ", "\n    ", "else", " return NULL;", "//找不到,,i<=0或i>n ", "\n} \n\nNode * Locate(LinkList L,ElemType key)", "//按值查找", "\n{\n    Node * p;\n    ", "p", "=L->", "next;", "//从表中第一个结点开始 ", "\n    ", "while", "(p!=NULL)", "//当前表未查完 ", "\n    {\n        ", "if", "(p->", "data", "!=key)\n            {\n                ", "p", "=p->", "next;\n            }\n        ", "else", " break;    ", "//找到结点值=key时退出循环 ", "\n    }\n    return p;\n}\n\nint ListLength(LinkList L)", "//求单链表的长度 ", "\n{\n    int j;\n    Node * p;\n    ", "p", "=L->", "next;\n    j=", "0", ";", "//存放单链表的长度 ", "\n    ", "while", "(p!=NULL)\n    {\n        ", "p", "=p->", "next;\n        j++;    \n    }\n    return j;    ", "//j为求得的单链表长度    ", "\n}\n\nint InsList(LinkList L,int i,ElemType e)", "//单链表插入操作 ", "\n{\n    Node * pre,* s;\n    int k;\n    ", "if", "(i<=", "0", ") return ERROR;\n    pre=L;k=", "0", ";", "//从头结点开始,查找第i-1个结点 ", "\n    ", "while", "(pre!=NULL&&k<i-", "1", ")", "//表未查完且未查到第i-1个时重复，找到pre指向第i-1个 ", "\n    {\n        ", "pre", "=pre->", "next;\n        k=k+", "1", ";\n    }\n    ", "if", "(pre==NULL)", "//pre为空,表已找完,但是未数到i-1个,说明插入位置不合理 ", "\n    {\n        printf(", "\"插入位置不合理!\"", ");\n        return ERROR;\n    }\n    s=(Node *)malloc(sizeof(Node));", "//申请新节点s ", "\n    ", "s", "->", "data", "=e;", "//值e置入s的数据域 ", "\n    ", "s", "->", "next", "=pre->", "next;", "//修改指针,完成插入操作 ", "\n    ", "pre", "->", "next=s;\n    return OK;\n}\n\nint DelList(LinkList L,int i,ElemType *e)", "//单链表的删除操作 ", "\n{\n    Node * pre,* r;\n    int k;\n    pre=L;k=", "0", ";\n    ", "while", "(pre->", "next!=NULL&&k<i-", "1", ")", "//寻找被删除结点i的前驱i-1使p指向它 ", "\n    {\n        ", "pre", "=pre->", "next;\n        k=k+", "1", ";\n    }\n    ", "if", "(pre->", "next==NULL)", "//没有找到合法的前驱位置 ", "\n    {\n        printf(", "\"删除结点的位置i不合理!\"", ");\n        return ERROR; \n    }\n    ", "r", "=pre->", "next;\n    ", "pre", "->", "next", "=r->", "next;", "//修改指针，删除结点r ", "\n    *", "e", "=r->", "data", ";\n    free(r);", "//释放被删除的结点所占的内存空间 ", "\n    return OK;\n}\n\nLinkList MergeLinkList(LinkList LA,LinkList LB)", "//合并两个有序的单链表 ", "\n{                                                ", "//建议用尾插法来顺序建表 ", "\n    Node * pa,* pb,*r;\n    LinkList LC;", "//将LC初始为空表 ", "\n    ", "pa", "=LA->", "next;", "//pa指向LA表中的第一个结点 ", "\n    ", "pb", "=LB->", "next;\n    LC=LA;\n    LC->next=NULL;r=LC;\n    ", "while", "(pa!=NULL&&pa!=NULL)", "//两表均未处理完，优先选择较小值结点插入LC ", "\n    {\n        ", "if", "(pa->", "data", "<=pb->", "data", ")\n        {\n            ", "r", "->", "next=pa;\n            r=pa;\n            ", "pa", "=pa->", "next;\n        }\n        ", "else", "\n        {\n            ", "r", "->", "next=pb;\n            r=pb;\n            ", "pb", "=pb->", "next;\n        }\n    }\n    ", "if", "(pa) r->", "next=pa;", "//若仅LA表未完 ", "\n    ", "else", " r->", "next=pb;", "//否则 ", "\n    free(LB);\n    return (LC);\n}\n\nvoid ListPrint(Node *L)\n{\n    N", "ode", " *p=L->", "next;                      \n    ", "while", " (p->", "next != NULL)\n    {\n        ", "printf", "(\"%d \", p->", "next", "->", "data", ");\n        ", "p", " = p->", "next;                     \n    }\n}\n\nint main()\n{\n    LinkList L1,L2;\n    InitList(&L1);InitList(&L2);\n    int choose,i;\n    int *e;\n    ", "for", "(i=", "0", ";i<", "9", ";i++)\n    {\n        printf(", "\"*********************************************\\n\"", ");\n                printf(", "\"*                    菜单                   *\\n\"", ");\n         printf(", "\"*    1:头插逆序建表       2:尾插顺序建表    *\\n\"", "); \n        printf(", "\"*    3:单链表插入         4:单链表删除      *\\n\"", ");\n        printf(", "\"*    5:按序号查找         6:按值查找        *\\n\"", ");\n        printf(", "\"*    7:求单链表长         8:合并有序链表    *\\n\"", ");\n        printf(", "\"*    7:单链表逆置         8:输出单链表      *\\n\"", ");\n        printf(", "\"*********************************************\\n\"", ");\n        printf(", "\"输入想要进行操作的序号：\"", "); \n        scanf(", "\"%d\"", ",&choose);\n        \n        ", "if", "(choose==", "1", ")\n        {\n            printf(", "\"头插法逆序建表L1(输入$结束):\"", ");\n            printf(", "\"\\n\"", ");\n            CreateFromHead(L1);\n            printf(", "\"当前单链表L1各元素为:\"", ");\n            ListPrint(L1);\n            printf(", "\"\\n\"", ");\n            printf(", "\"头插法逆序建表L2(输入$结束):\"", ");\n            CreateFromHead(L2);\n            printf(", "\"\\n\"", ");\n            printf(", "\"当前单链表L2各元素为:\"", ");\n            ListPrint(L2);\n        }\n        ", "if", "(choose==", "2", ")\n        {\n            printf(", "\"尾插法逆序建表L1(输入$结束):\"", ");\n            CreateFromTail(L1);\n            printf(", "\"当前单链表L1各元素为:\"", ");\n            ListPrint(L1);\n            printf(", "\"尾插法逆序建表L2(输入$结束):\"", ");\n            CreateFromTail(L2);\n            printf(", "\"当前单链表L2各元素为:\"", ");\n            ListPrint(L2);    \n        }\n        ", "if", "(choose=", "3", ")\n        {\n            \n        } \n    }\n    \n}\n\n"]], "Tag": "程序设计"}
{"Answer": "http://blog.csdn.net/xzlzhq/article/details/27117061", "Konwledge_Point": "重复n次操作", "Question": ["Disk Schedule                      ", ["Problem Description", "\n有很多从磁盘读取数据的需求，包括顺序读取、随机读取。为了提高效率，需要人为安排磁盘读取。然而，在现实中，这种做法很复杂。我们考虑一个相对简单的场景。", "\n磁盘有许多轨道，每个轨道有许多扇区，用于存储数据。当我们想在特定扇区来读取数据时，磁头需要跳转到特定的轨道、具体扇区进行读取操作。为了简单，我们假设磁头可以在某个轨道顺时针或逆时针匀速旋转，旋转一周的时间是360个单位时间。磁头也可以随意移动到某个轨道进行读取，每跳转到一个相邻轨道的时间为400个单位时间，跳转前后磁头所在扇区位置不变。一次读取数据的时间为10个单位时间，读取前后磁头所在的扇区位置不变。磁头同时只能做一件事：跳转轨道，旋转或读取。", "\n现在，需要在磁盘读取一组数据，假设每个轨道至多有一个读取请求，这个读取的扇区是轨道上分布在 0到359内的一个整数点扇区，即轨道的某个360等分点。磁头的起始点在0轨道0扇区，此时没有数据读取。在完成所有读取后，磁头需要回到0轨道0扇区的始点位置。请问完成给定的读取所需的最小时间。", "\n\n", "Input", "\n输入的第一行包含一个整数M（0<M<=100），表示测试数据的组数。", "\n对于每组测试数据，第一行包含一个整数N（0<N<=1000），表示要读取的数据的数量。之后每行包含两个整数T和S（0<T<=1000，0<= S<360），表示每个数据的磁道和扇区，磁道是按升序排列，并且没有重复。", "\n\n", "Output", "\n对于每组测试数据，输出一个整数，表示完成全部读取所需的时间。", "\n\n", "Sample Input", "\n3", "\n1", "\n1 10", "\n3", "\n1 20", "\n3 30", "\n5 10", "\n2", "\n1 10", "\n2 11", "\n\n", "Sample Output", "\n830", "\n4090", "\n1642"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt; 代码修改如下&amp;#xff1a;{如果对你有帮助&amp;#xff0c;可以给我个采纳吗&amp;#xff0c;谢谢!! 点击我这个回答右上方的【采纳】按钮}。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-objectivec\"&gt;#include&amp;lt;stdio.h&amp;gt;\nint f(int x[]) {\n\t//从第二个元素开始往后走一边&amp;#xff0c;看一下当前元素跟前面的重复不\n\t//问题是&amp;#xff1a;当我们处理了某个i的重复以后&amp;#xff0c;他之后的元素整体向前挪了一位&amp;#xff0c;可能导致挪之后的当前位仍是重复的&amp;#xff0c;但是目前的程序里&amp;#xff0c;已经进入下一次循环&amp;#xff0c;i&amp;#43;1往后走了。\n\tint flag;\n\tint i,k,j,len&amp;#61;20;\n\tfor (i &amp;#61; 1; i &amp;lt; len; i&amp;#43;&amp;#43;) {\n\t\tflag &amp;#61; 0;\n\t\tfor (j &amp;#61; 0; j &amp;lt; i; j&amp;#43;&amp;#43;) {\n\t\t\tif (x[j] &amp;#61;&amp;#61; x[i]) {\n\t\t\t\tflag &amp;#61; 1;\n\t\t\t\tbreak;\n\t\t\t\t//置1 表示确实在i前面有和他重复的数&amp;#xff0c;flag&amp;#61;1表示&amp;#xff0c;发生重复\n\t\t\t}\n\t\t}\n\t\tif (flag &amp;#61;&amp;#61; 1) {\n\t\t\t//A是实现“后面整体往前挪一位”操作\n\t\t\tfor(k&amp;#61;j;k&amp;lt;len;k&amp;#43;&amp;#43;)\n\t\t\t{\n\t\t\t\tif (k &amp;#61;&amp;#61; 19) x[k] &amp;#61; 0;\n\t\t\t\telse x[k] &amp;#61; x[k &amp;#43; 1];\n\t\t\t}\n\t\t\ti--;\n\t\t\tlen--;\n\t\t}\n\t}\n\tint fan &amp;#61; 0;\n\tfor (i &amp;#61; 0; i &amp;lt; len; i&amp;#43;&amp;#43;) {\n\t\tif (x[i] !&amp;#61; 0) fan&amp;#43;&amp;#43;;\n\t\tprintf(&amp;#34;%d &amp;#34;, x[i]);\n\t}\n\t//重复    ----\n\t//不重复。  ----\n\treturn fan;\n}\nvoid main() {\n\tint a[] &amp;#61; {2, 2, 2, 3, 4, 4, 5, 6, 6, 6, 6, 7, 7, 8, 9, 9, 10, 10, 10, 10};//20个\n\tprintf(&amp;#34;\\n %d  &amp;#34;, f(a));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"39\" src=\"https://img-ask.csdnimg.cn/upload/1623231180470.png\" width=\"191\" /&gt;&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["神题！！改一处错误，让其完整运行，各位大神快来解答。", ["//  原数组：2 2 2 3 4 4 5 6 6 6 6 7 7 8 9 9 10 10 10", "\n\n", "//          2 2 3 4 4 5 6 6 6 6 7 7 8 9 9 10 10 10", "\n\n", "//  删除后：2 3 4 5 6 7 8 9 10 #include<stdio.h>", "\n\n", "int f(int x[ ])", "\n\n", "{", "\n\n", "//从第二个元素开始往后走一边，看一下当前元素跟前面的重复不", "\n\n", "//问题是：当我们处理了某个i的重复以后，他之后的元素整体向前挪了一位，可能导致挪之后的当前位仍是重复的，但是目前的程序里，已经进入下一次循环，i+1往后走了。", "\n\n", "int flag;", "\n\n", "for(int i=1;i<20;i++)", "\n\n", "{", "\n\n", "flag=0;", "\n\n", "for(int j=0;j<i;j++)", "\n\n", "{", "\n\n", "  if(x[j]==x[i])", "\n\n", "{ flag=1;", "\n\n", "//置1 表示确实在i前面有和他重复的数，flag=1表示，发生重复", "\n\n", "}", "\n\n", "}", "\n\n", "  if(flag==1)   ", "\n\n", "{", "\n\n", "//A是实现“后面整体往前挪一位”操作 for(int k=i;k<20;k++)", "\n\n", "{", "\n\n", "if(k==19) x[k]=0;", "\n\n", "else x[k]=x[k+1];", "\n\n", "}", "\n\n", "}", "\n\n", "}", "\n\n", "int fan=0;", "\n\n", "for(i=0;i<20;i++)", "\n\n", "{", "\n\n", "if(x[i]!=0) fan++;", "\n\n", "printf(\"%d \",x[i]); }", "\n\n", "//重复    ----", "\n\n", "//不重复。  ----", "\n\n", "return fan;", "\n\n", "}", "\n\n", "void main( )", "\n\n", "{ int a[ ]={2,2,2,3,4,4,5,6,6,6,6,7,7,8,9,9,10,10,10,10};", "\n\n", "//20个", "\n\n", "printf(\"\\n %d  \",f(a));", "\n\n", "}", "\n\n", "/*编写程序，在被调函数中删去一维数组中所有相同的数，使之只剩一个，数组中的数已按由小到大的顺序排列，被调函数返回删除后数组中数据的个数。", "\n\n", "例如：", "\n\n", "原数组：2 2 2 3 4 4 5 6 6 6 6 7 7 8 9 9 10 10 10", "\n\n", "删除后：2 3 4 5 6 7 8 9 10 返回数据个数：9", "\n\n", "*/"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;item结构体中的char数组没有初始化&amp;#xff0c;导致在计算strlen的时候出错。只需要给item结构体增加一个构造函数即可&amp;#xff0c;如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;typedef struct item\n{\n    char petname[SLEN]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    char petkind[SLEN][SLEN]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    item()\n    {\n        for (int i &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; SLEN; i&amp;#43;&amp;#43;)&lt;/span&gt;\n        {\n            petname[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n            petkind[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n        }\n            \n    }\n} Item&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;修改后的运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/097740449056176.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["C语言学习，二叉树的实现", ["我在编写下面的程序：", "tree.h", "\n", "//TREE.H二叉查找树，树中不允许有重复项", "\n", "#", "ifndef", " _TREE_H_", "\n", "#", "define", " _TREE_H_", "\n", "#", "define", " SLEN 20", "\n\n", "typedef", " ", "struct", " ", "item", "\n{\n    ", "char", " petname[SLEN];\n    ", "char", " petkind[SLEN][SLEN];\n} Item;\n", "//定义节点的内容", "\n", "#", "define", " MAXITEMS 100", "\n\n", "typedef", " ", "struct", " ", "trnode", "\n{\n    Item item;\n    ", "struct", " ", "trnode", " *left;\n    ", "struct", " ", "trnode", " *right;\n} Trnode;\n", "//定义节点", "\n\n", "typedef", " ", "struct", " ", "tree", "\n{\n    Trnode *root;\n    ", "int", " size;\n} Tree;\n", "//定义二叉查找树", "\n\n", "//函数原型", "\n", "//初始化树", "\n", "void", " ", "InitializeTree", "(Tree *ptree)", ";\n\n", "//判断树是否已空", "\n", "int", " ", "TreeIsEmpty", "(", "const", " Tree *ptree)", ";\n\n", "//判断树是否已满", "\n", "int", " ", "TreeIsFull", "(", "const", " Tree *ptree)", ";\n\n", "//树中的项数", "\n", "int", " ", "TreeItemCount", "(", "const", " Tree *ptree)", ";\n\n", "//添加节点", "\n", "int", " ", "AddItem", "(", "const", " Item *pi, Tree *ptree)", ";\n\n", "//在树内查找", "\n", "int", " ", "InTree", "(", "const", " Item *pi, ", "const", " Tree *ptree)", ";\n\n", "//删除项", "\n", "int", " ", "DeleteItem", "(", "const", " Item *pi, Tree *ptree)", ";\n\n", "//遍历树", "\n", "void", " ", "Traverse", "(", "const", " Tree *ptree, ", "void", " (*pfun)(Item item))", ";\n\n", "//清空树", "\n", "void", " ", "DeleteAll", "(Tree *ptree)", ";\n\n", "#", "endif", "\n\n", "\n", "tree.c", "\n", "//TREE.C查找二叉树的操作函数实现", "\n#", "include", " <stdio.h>\n#", "include", " <", "string", ".h>\n#", "include", " <stdlib.h>\n#", "include", " ", "\"tree.h\"", "\n\ntypedef ", "struct", " pair\n{\n    Trnode *parent;\n    Trnode *child;\n} Pair;\n\nstatic Trnode *", "MakeNode(", "const", " Item ", "*", "pi", ")", ";\nstatic ", "int", " ", "ToLeft(", "const", " Item ", "*", "i1", ", ", "const", " Item ", "*", "i2", ")", ";\nstatic ", "int", " ", "ToRight(", "const", " Item ", "*", "i1", ", ", "const", " Item ", "*", "i2", ")", ";\nstatic void ", "AddNode(Trnode ", "*", "new_node", ", Trnode ", "*", "root", ")", ";\nstatic void ", "InOrder(", "const", " Trnode ", "*", "root", ", ", "void", " (", "*", "pfun", ")", "(Item item));\nstatic Pair ", "SeekItem(", "const", " Item ", "*", "pi", ", ", "const", " Tree ", "*", "ptree", ")", ";\nstatic void ", "DeleteNode(Trnode ", "**", "ptr", ")", ";\nstatic void ", "DeleteAllNodes(Trnode ", "*", "ptr", ")", ";\n\nvoid ", "InitializeTree(Tree ", "*", "ptree", ")", "\n{\n    ptree->root = NULL;\n    ptree->size = ", "0", ";\n}\n\n", "int", " ", "TreeIsEmpty(", "const", " Tree ", "*", "ptree", ")", "\n{\n    ", "if", "(ptree->root", " == ", "NULL)\n        return ", "1", ";\n    ", "else", "\n        return ", "0", ";\n}\n\n", "int", " ", "TreeIsFull(", "const", " Tree ", "*", "ptree", ")", "\n{\n    ", "if", "(ptree->size", " == ", "MAXITEMS)\n        return ", "1", ";\n    ", "else", "\n        return ", "0", ";\n}\n\n", "int", " ", "TreeItemCount(", "const", " Tree ", "*", "ptree", ")", "\n{\n    return ptree->size;\n}\n\n", "int", " ", "AddItem(", "const", " Item ", "*", "pi", ", Tree ", "*", "ptree", ")", "\n{\n    Trnode *new_node;\n    Pair look;\n    ", "int", " i;\n\n    ", "if", "(", "TreeIsFull(", "ptree", ")", ")\n    {\n        fprintf(stderr,", "\"Tree is full\\n\"", ");\n        return ", "0", ";\n    }\n\n    ", "if", "(", "SeekItem(", "pi", ",", "ptree", ")", ".child != NULL)\n    {\n        look = ", "SeekItem(", "pi", ",", "ptree", ")", ";\n        ", "for", "(i=", "0", ";i<SLEN;i++)\n        {\n            ", "if", "(strlen(look.child->item.petkind", "[", "i", "]", ")<", "1", ")\n            {\n                strcpy(look.child->item.petkind", "[", "i", "]", ",pi->petkind", "[", "0", "]", ");\n                break;\n            }\n        }\n        return ", "1", ";\n    }\n    ", "//如果输入数据重复，则在原数据上添加种类", "\n\n    ", "//如果新数据不存在，则添加节点，标记数量为1", "\n    new_node = ", "MakeNode(", "pi", ")", ";\n    ", "if", "(new_node", " == ", "NULL)\n    {\n        fprintf(stderr,", "\"Couldn't create node\\n\"", ");\n        return ", "0", ";\n    }\n    ptree->size++;\n\n    ", "if", "(ptree->root", " == ", "NULL)\n        ptree->root = new_node;\n    ", "else", "\n        ", "AddNode(", "new_node", ",", "ptree", "->", "root", ")", ";\n    return ", "1", ";\n}\n\n", "int", " ", "InTree(", "const", " Item ", "*", "pi", ", ", "const", " Tree ", "*", "ptree", ")", "\n{\n    return (", "SeekItem(", "pi", ",", "ptree", ")", ".child", " == ", "NULL) ? ", "0", " : ", "1", ";\n}\n\n", "int", " ", "DeleteItem(", "const", " Item ", "*", "pi", ", Tree ", "*", "ptree", ")", "\n{\n    Pair look;\n    look = ", "SeekItem(", "pi", ",", "ptree", ")", ";\n    ", "if", "(look.child", " == ", "NULL)\n        return ", "0", ";\n\n    ", "if", "(look.parent", " == ", "NULL)\n        ", "DeleteNode(&", "ptree", "->", "root", ")", ";\n    ", "else", " ", "if", "(look.parent->left", " == ", "look.child)\n        ", "DeleteNode(&", "look", ".", "parent", "->", "left", ")", ";\n    ", "else", "\n        ", "DeleteNode(&", "look", ".", "parent", "->", "right", ")", ";\n    ptree->size--;\n\n    return ", "1", ";\n}\n\nvoid ", "Traverse(", "const", " Tree ", "*", "ptree", ", ", "void", " (", "*", "pfun", ")", "(Item item))\n{\n    ", "if", "(ptree != NULL)\n        ", "InOrder(", "ptree", "->", "root", ",", "pfun", ")", ";\n}\n\nvoid ", "DeleteAll(Tree ", "*", "ptree", ")", "\n{\n    ", "if", "(ptree != NULL)\n        ", "DeleteAllNodes(", "ptree", "->", "root", ")", ";\n    ptree->root = NULL;\n    ptree->size = ", "0", ";\n}\n\n", "//局部函数", "\nstatic void ", "InOrder(", "const", " Trnode ", "*", "root", ", ", "void", " (", "*", "pfun", ")", "(Item item))\n{\n    ", "if", "(root != NULL)\n    {\n        ", "InOrder(", "root", "->", "left", ",", "pfun", ")", ";\n        (*pfun)(root->item);\n        ", "InOrder(", "root", "->", "right", ",", "pfun", ")", ";\n    }\n}\n\nstatic void ", "DeleteAllNodes(Trnode ", "*", "root", ")", "\n{\n    Trnode *pright;\n\n    ", "if", "(root != NULL)\n    {\n        pright = root->right;\n        ", "DeleteAllNodes(", "root", "->", "left", ")", ";\n        free(root);\n        ", "DeleteAllNodes(", "pright", ")", ";\n    }\n}\n\nstatic void ", "AddNode(Trnode ", "*", "new_node", ", Trnode ", "*", "root", ")", "\n{\n    ", "if", "(", "ToLeft(&", "new_node", "->", "item", ", &", "root", "->", "item", ")", ")\n    {\n        ", "if", "(root->left", " == ", "NULL)\n            root->left = new_node;\n        ", "else", "\n            ", "AddNode(", "new_node", ", ", "root", "->", "left", ")", ";\n    }\n    ", "else", " ", "if", "(", "ToRight(&", "new_node", "->", "item", ", &", "root", "->", "item", ")", ")\n    {\n        ", "if", "(root->right", " == ", "NULL)\n            root->right = new_node;\n        ", "else", "\n            ", "AddNode(", "new_node", ", ", "root", "->", "right", ")", ";\n    }\n    ", "else", "\n    {\n        fprintf(stderr,", "\"Location Error! in Add Node()\\n\"", ");\n        exit(", "1", ");\n    }\n}\n\nstatic ", "int", " ", "ToLeft(", "const", " Item ", "*", "i1", ", ", "const", " Item ", "*", "i2", ")", "\n{\n    ", "int", " comp1;\n\n    ", "if", "((comp1 = strcmp(i1->petname, i2->petname))<", "0", ")\n        return ", "1", ";\n    ", "else", "\n        return ", "0", ";\n}\n\nstatic ", "int", " ", "ToRight(", "const", " Item ", "*", "i1", ", ", "const", " Item ", "*", "i2", ")", "\n{\n    ", "int", " comp1;\n\n    ", "if", "((comp1 = strcmp(i1->petname, i2->petname))>", "0", ")\n        return ", "1", ";\n    ", "else", "\n        return ", "0", ";\n}\n\nstatic Trnode *", "MakeNode(", "const", " Item ", "*", "pi", ")", "\n{\n    Trnode *new_node;\n\n    new_node = (Trnode *)malloc(sizeof(Trnode));\n    ", "if", "(new_node != NULL)\n    {\n        new_node->item = *pi;\n        new_node->left = NULL;\n        new_node->right = NULL;\n    }\n    return new_node;\n}\n\nstatic Pair ", "SeekItem(", "const", " Item ", "*", "pi", ", ", "const", " Tree ", "*", "ptree", ")", "\n{\n    Pair look;\n    look.parent = NULL;\n    look.child = ptree->root;\n\n    ", "if", "(look.child", " == ", "NULL)\n        return look;\n    ", "while", "(look.child != NULL)\n    {\n        ", "if", "(", "ToLeft(", "pi", ",&(", "look", ".", "child", "->", "item", ")", "))\n        {\n            look.parent = look.child;\n            look.child = look.child->left;\n        }\n        ", "else", " ", "if", "(", "ToRight(", "pi", ",&(", "look", ".", "child", "->", "item", ")", "))\n        {\n            look.parent = look.child;\n            look.child = look.child->right;\n        }\n        ", "else", "\n            break;\n    }\n    return look;\n}\n\nstatic void ", "DeleteNode(Trnode ", "**", "ptr", ")", "\n{\n    Trnode *temp;\n    ", "if", "((*ptr)->left", " == ", "NULL)\n    {\n        temp = *ptr;\n        *ptr = (*ptr)->right;\n        free(temp);\n    }\n    ", "else", " ", "if", "((*ptr)->right", " == ", "NULL)\n    {\n        temp = *ptr;\n        *ptr = (*ptr)->left;\n        free(temp);\n    }\n    ", "else", "\n    {\n        ", "for", "(temp = (*ptr)->left;temp->right != NULL;temp = temp->right)\n            continue;\n        temp->right = (*ptr)->right;\n        temp = (*ptr);\n        (*ptr) = (*ptr)->left;\n        free(temp);\n    }\n}\n\n", "\n", "petclub.c", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<string.h>", "\n", "#", "include", " ", "<ctype.h>", "\n", "#", "include", " ", "\"tree.h\"", "\n\n", "char", " ", "menu", "(", "void", ")", ";\n", "void", " ", "addpet", "(Tree *pt)", ";\n", "void", " ", "droppet", "(Tree *pt)", ";\n", "void", " ", "showpets", "(", "const", " Tree *pt)", ";\n", "void", " ", "findpet", "(", "const", " Tree *pt)", ";\n", "void", " ", "printitem", "(Item item)", ";\n", "void", " ", "uppercase", "(", "char", " *str)", ";\n", "char", " *", "s_gets", "(", "char", " *st, ", "int", " n)", ";\n\n", "int", " ", "main", "(", "void", ")", "\n", "{\n    Tree pets;  ", "//定义树变量", "\n    ", "char", " choice;\n  \n    ", "InitializeTree", "(&pets);    \n\n    ", "while", "((choice = ", "menu", "()) != ", "'q'", ")\n    {\n        ", "switch", " (choice)\n        {\n        ", "case", " ", "'a'", ": ", "addpet", "(&pets);\n            ", "break", ";\n        ", "case", " ", "'l'", ": ", "showpets", "(&pets);\n            ", "break", ";\n        ", "case", " ", "'f'", ": ", "findpet", "(&pets);\n            ", "break", ";\n        ", "case", " ", "'n'", ":\n            ", "printf", "(", "\"%d pets in club\\n\"", ", ", "TreeItemCount", "(&pets));\n            ", "break", ";\n        ", "case", " ", "'d'", ": ", "droppet", "(&pets);\n            ", "break", ";\n        ", "default", ": ", "puts", "(", "\"Switching error\"", ");\n        }\n    }\n    ", "DeleteAll", "(&pets);\n    ", "puts", "(", "\"Bye.\"", ");\n\n    ", "return", " ", "0", ";\n}\n\n", "char", " ", "menu", "(", "void", ")", "\n", "{\n    ", "int", " ch;\n\n    ", "puts", "(", "\"Nerfville pet Club Membership Program\"", ");\n    ", "puts", "(", "\"Enter the letter corresponding to your choice: \"", ");\n    ", "puts", "(", "\"a)add a pet        l)show list of pets\"", ");\n    ", "puts", "(", "\"n)number of pets   f)find pets\"", ");\n    ", "puts", "(", "\"d)delete a pet     q)quit\"", ");\n    ", "while", " ((ch = ", "getchar", "()) != EOF)\n    {\n        ", "while", " (", "getchar", "() != ", "'\\n'", ")  ", "//丢弃输入行的剩余部分", "\n            ", "continue", ";\n        ch = ", "tolower", "(ch);\n        ", "if", "(", "strchr", "(", "\"alrfndq\"", ", ch) == ", "NULL", ")\n            ", "puts", "(", "\"Please enter an a, l, f, n, d, or q: \"", ");\n        ", "else", "\n            ", "break", ";\n    }\n    ", "if", "(ch == EOF)  ", "//在遇到EOF时程序退出", "\n        ch = ", "'q'", ";\n\n    ", "return", " ch;\n}\n\n", "void", " ", "addpet", "(Tree *pt)", "\n", "{\n    Item temp;\n\n    ", "if", "(", "TreeIsFull", "(pt))\n        ", "puts", "(", "\"No room in the club!\"", ");\n    ", "else", "\n    {\n        ", "puts", "(", "\"Please enter name of pet: \"", ");\n        ", "s_gets", "(temp.petname,SLEN);\n        ", "puts", "(", "\"Please enter pet kind: \"", ");\n        ", "s_gets", "(temp.petkind[", "0", "],SLEN);\n        ", "uppercase", "(temp.petname);\n        ", "uppercase", "(temp.petkind[", "0", "]);\n        ", "AddItem", "(&temp, pt);\n    }\n}\n\n", "void", " ", "showpets", "(", "const", " Tree *pt)", "\n", "{\n    ", "if", " (", "TreeIsEmpty", "(pt))\n        ", "puts", "(", "\"No enteries!\"", ");\n    ", "else", "\n        ", "Traverse", "(pt, printitem);\n}\n\n", "void", " ", "printitem", "(Item item)", "\n", "{\n    ", "int", " i=", "0", ";\n    ", "while", "(", "strlen", "(item.petkind[i])>", "0", ")\n    {\n        ", "printf", "(", "\"pet: %-19s kind: %-19s\\n\"", ",item.petname,item.petkind[i]);\n        i++;\n    }\n}\n\n", "void", " ", "findpet", "(", "const", " Tree *pt)", "\n", "{\n    Item temp;\n\n    ", "if", "(", "TreeIsEmpty", "(pt))\n    {\n        ", "puts", "(", "\"No enteries!\"", ");\n        ", "return", ";\n    }\n\n    ", "puts", "(", "\"Please enter name of pet you wish to find: \"", ");\n    ", "s_gets", "(temp.petname,SLEN);\n    ", "puts", "(", "\"Please enter pet kind: \"", ");\n    ", "s_gets", "(temp.petkind[", "0", "],SLEN);\n    ", "uppercase", "(temp.petname);\n    ", "uppercase", "(temp.petkind[", "0", "]);\n    ", "printf", "(", "\"%s the %s \"", ",temp.petkind[", "0", "],temp.petname);\n    ", "if", "(", "InTree", "(&temp, pt))\n        ", "printf", "(", "\"is a member.\\n\"", ");\n    ", "else", "\n        ", "printf", "(", "\"is not a member.\\n\"", ");\n}\n\n", "void", " ", "droppet", "(Tree *pt)", "\n", "{\n    Item temp;\n\n    ", "if", "(", "TreeIsEmpty", "(pt))\n    {\n        ", "puts", "(", "\"No enteries!\"", ");\n        ", "return", ";\n    }\n    ", "puts", "(", "\"Please enter name of pet you wish to delete: \"", ");\n    ", "s_gets", "(temp.petname,SLEN);\n    ", "puts", "(", "\"Please enter pet dind: \"", ");\n    ", "s_gets", "(temp.petkind[", "0", "],SLEN);\n    ", "uppercase", "(temp.petname);\n    ", "uppercase", "(temp.petkind[", "0", "]);\n    ", "printf", "(", "\"%s the %s \"", ", temp.petname, temp.petkind[", "0", "]);\n\n    ", "if", "(", "DeleteItem", "(&temp,pt))\n        ", "printf", "(", "\"is dropped from the club.\\n\"", ");\n    ", "else", "\n        ", "printf", "(", "\"is not a member.\\n\"", ");\n}\n\n", "void", " ", "uppercase", "(", "char", " *str)", "\n", "{\n    ", "while", "(*str)\n    {\n        *str = ", "toupper", "(*str);\n        str++;\n    }\n}\n\n", "char", " *", "s_gets", "(", "char", " *st, ", "int", " n)", "\n", "{\n    ", "char", " *ret_val;\n    ", "char", " *find;\n    ret_val = ", "fgets", "(st, n, stdin);\n    ", "if", "(ret_val)\n    {\n        find = ", "strchr", "(st,", "'\\n'", ");  ", "//查找换行符", "\n        ", "if", "(find)  ", "//如果地址不是NULL", "\n            *find = ", "'\\0'", ";  ", "//在此处放置一个空字符", "\n        ", "else", " ", "while", " (", "getchar", "() != ", "'\\n'", ")\n            ", "continue", ";  ", "//处理输入行剩余的字符", "\n    }\n    ", "return", " ret_val;\n}\n\n", "\n", "运行结果如下：", "\n", "请问是哪里出问题了？要怎么修改？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;那你不能直接修改这个数组&lt;br /&gt;你应该分为两部分&amp;#xff0c;一个数组是作为底图的&amp;#xff0c;它永远不变&amp;#xff0c;或者至少是基本不变&amp;#xff0c;另一个是把各种可移动物体叠加上去之后的样子&lt;br /&gt;最终显示的是数组2&lt;br /&gt;而每次移动后&amp;#xff0c;你需要重新用数组1和可移动物体生成数组2&lt;br /&gt;否则你的可移动物体把底图信息给覆盖了就找不回来了&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["关于#c语言#的问题：字符离开当前位置后使得当前的位置符号变回原来的符号例如：F向下移动后，F的原本位置变成空白或者变成x，F原本位置的t重新出现", ["如何实现交换位置后，字符离开当前位置后使得当前的位置符号变回原来的符号", "例如：F向下移动后，将t覆盖了，F的原本位置变成空白或者变成x，然后F在向下移动，F原本位置的t重新出现，F把~覆盖了。", "w , s, a ,d的代码应该如何改", "代码如下：", "\n", "#include <stdio.h>\n#include <stdlib.h>\n#define ", "ROW", " ", "11", "                 //游戏区行数\n#define ", "COL", " ", "11", "                 //游戏区列数     \n\nchar map[", "ROW", "][", "COL", "] = {\n    {", "'F'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", "},   //x为草坪\n    {", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},   //~为水流\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", "},   //o为终点\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},      //", "T", "为乌龟的位置\n    {", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", "},\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'t'", ", ", "'~'", ", ", "'~'", "},\n    {", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", ", ", "'~'", "},\n    {", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'x'", ", ", "'o'", ", ", "'x'", "}\n};\n\nint main() {\n    int i, j;\n    int x = ", "0", ", y = ", "0", ";\n    char c, q;\n    while (", "1", ") {\n        for (i = ", "0", "; i < ", "ROW", "; i++) {\n            for (j = ", "0", "; j < ", "COL", "; j++) {\n                printf(", "\"%c \"", ", map[i][j]);     //生成游戏界面\n            }\n            printf(", "\"\\n\"", ");\n        }\n        printf(", "\"请输入操作：\\n\"", ");\n        scanf(", "\"%c\"", ", &c);                     //w s a d\n        getchar();                           //防止重复出现的二维数组\n        system(", "\"cls\"", ");                      //清理屏幕\n\n        if (c == ", "'w'", ") {\n            q = map[x - ", "1", "][y];\n            map[x - ", "1", "][y] = map[x][y];\n            map[x][y] = q;\n            x = x - ", "1", ";\n\n        }\n\n        else if (c == ", "'s'", ") {\n            q = map[x + ", "1", "][y];\n            map[x + ", "1", "][y] = map[x][y];\n            map[x][y] = q;\n            x = x + ", "1", ";\n\n        }\n\n        else if (c == ", "'a'", ") {\n\n            q = map[x][y - ", "1", "];\n            map[x][y - ", "1", "] = map[x][y];\n            map[x][y] = q;\n            y = y - ", "1", ";\n\n        }\n\n        else if (c == ", "'d'", ") {\n\n            q = map[x][y + ", "1", "];\n            map[x][y + ", "1", "] = map[x][y];\n            map[x][y] = q;\n            y = y + ", "1", ";\n\n        }\n\n        else if (c == ", "'l'", ") {\n            int a, b;\n            printf(", "\"添加浮木：请输入浮木放置的横坐标和纵坐标\\n\"", ");//添加浮木\n            scanf(", "\"%d%d\"", ", &a, &b);\n            getchar();\n            map[a][b] = ", "'L'", ";\n\n        }\n\n        else if (c == ", "'k'", ") {\n            int a, b;\n            printf(", "\"清除浮木:请输入需要清除浮木的横坐标和纵坐标\\n\"", ");//清除浮木\n            scanf(", "\"%d%d\"", ", &a, &b);\n            getchar();\n            if (map[a][b] == ", "'L'", ") {\n                map[a][b] = ", "'~'", ";\n            } else if (map[a][b] == ", "'~'", " || map[a][b] == ", "'F'", " || map[a][b] == ", "'t'", " || map[a][b] == ", "'x'", ") {\n                printf(", "\"该位置没有浮木\"", ");\n            }\n        }\n\n\n\n        else if (c == ", "'b'", ") {\n            int a, b;\n            printf(", "\"请输入臭虫放置的横坐标和纵坐标\\n\"", ");           //添加臭虫\n            scanf(", "\"%d%d\"", ", &a, &b);\n            getchar();\n            if (map[a][b] == ", "'L'", ") {\n                map[a][b] = ", "'B'", ";\n            } else if (map[a][b] == ", "'~'", " || map[a][b] == ", "'F'", " || map[a][b] == ", "'t'", " || map[a][b] == ", "'x'", ")\n                printf(", "\"臭虫没有放在浮木上\\n\"", ");\n        }\n\n\n    }\n    return ", "0", ";\n}\n\n", "\n", "\n", "\n", "如何实现不是简单的交换位置"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你的exe放了cmd.xls文件了吗&amp;#xff1f;还有你的图片是否用了绝对路径&amp;#xff0c;可能是路径问题&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["python使用pyautogui打包成EXE运行到图像识别后闪退", ["在网上找到一个pyautogui自动化的代码，自己添加一些键盘热键后，在py上可以正常运行，但是打包成EXE后运行轮到图像识别上就直接闪退了，测试如果是纯键盘操作打包运行是没问题的。请问一下这个是什么问题？", "\n", "\n", "\n```python\n", "import", " pyautogui\n", "import", " time\n", "import", " xlrd\n", "import", " pyperclip\n\n", "#定义鼠标事件", "\n\n", "def", " ", "mouseClick", "(", "clickTimes,lOrR,img,reTry", "):\n    ", "if", " reTry == ", "1", ":\n        ", "while", " ", "True", ":\n            location=pyautogui.locateCenterOnScreen(img,confidence=", "0.9", ")\n            ", "if", " location ", "is", " ", "not", " ", "None", ":\n                pyautogui.click(location.x,location.y,clicks=clickTimes,interval=", "0.2", ",duration=", "0.2", ",button=lOrR)\n                ", "break", "\n            ", "print", "(", "\"未找到匹配图片,0.1秒后重试\"", ")\n            time.sleep(", "0.1", ")\n    ", "elif", " reTry == -", "1", ":\n        ", "while", " ", "True", ":\n            location=pyautogui.locateCenterOnScreen(img,confidence=", "0.9", ")\n            ", "if", " location ", "is", " ", "not", " ", "None", ":\n                pyautogui.click(location.x,location.y,clicks=clickTimes,interval=", "0.2", ",duration=", "0.2", ",button=lOrR)\n            time.sleep(", "0.1", ")\n    ", "elif", " reTry > ", "1", ":\n        i = ", "1", "\n        ", "while", " i < reTry + ", "1", ":\n            location=pyautogui.locateCenterOnScreen(img,confidence=", "0.9", ")\n            ", "if", " location ", "is", " ", "not", " ", "None", ":\n                pyautogui.click(location.x,location.y,clicks=clickTimes,interval=", "0.2", ",duration=", "0.2", ",button=lOrR)\n                ", "print", "(", "\"重复\"", ")\n                i += ", "1", "\n            time.sleep(", "0.1", ")\n\n\n\n\n", "# 数据检查", "\n", "# cmdType.value  1.0 左键单击    2.0 左键双击  3.0 右键单击  4.0 输入  5.0 等待  6.0 滚轮", "\n", "# ctype     空：0", "\n", "#           字符串：1", "\n", "#           数字：2", "\n", "#           日期：3", "\n", "#           布尔：4", "\n", "#           error：5", "\n", "def", " ", "dataCheck", "(", "sheet1", "):\n    checkCmd = ", "True", "\n    ", "#行数检查", "\n    ", "if", " sheet1.nrows<", "2", ":\n        ", "print", "(", "\"没数据\"", ")\n        checkCmd = ", "False", "\n    ", "#每行数据检查", "\n    i = ", "1", "\n    ", "while", " i < sheet1.nrows:\n        ", "# 第1列 操作类型检查", "\n        cmdType = sheet1.row(i)[", "0", "]\n        ", "if", " cmdType.ctype != ", "2", " ", "or", " (cmdType.value != ", "1.0", " ", "and", " cmdType.value != ", "2.0", " ", "and", " cmdType.value != ", "3.0", "\n        ", "and", " cmdType.value != ", "4.0", " ", "and", " cmdType.value != ", "5.0", " ", "and", " cmdType.value != ", "6.0", " ", "and", " cmdType.value != ", "7.0", "\n        ", "and", " cmdType.value != ", "8.0", " ", "and", " cmdType.value != ", "9.0", " ", "and", " cmdType.value != ", "10.0", " ", "and", " cmdType.value !=", "11.0", "):\n            ", "print", "(", "'第'", ",i+", "1", ",", "\"行,第1列数据有毛病\"", ")\n            checkCmd = ", "False", "\n        ", "# 第2列 内容检查", "\n        cmdValue = sheet1.row(i)[", "1", "]\n        ", "# 读图点击类型指令，内容必须为字符串类型", "\n        ", "if", " cmdType.value ==", "1.0", " ", "or", " cmdType.value == ", "2.0", " ", "or", " cmdType.value == ", "3.0", ":\n            ", "if", " cmdValue.ctype != ", "1", ":\n                ", "print", "(", "'第'", ",i+", "1", ",", "\"行,第2列数据有毛病\"", ")\n                checkCmd = ", "False", "\n        ", "# 输入类型，内容不能为空", "\n        ", "if", " cmdType.value == ", "4.0", ":\n            ", "if", " cmdValue.ctype == ", "0", ":\n                ", "print", "(", "'第'", ",i+", "1", ",", "\"行,第2列数据有毛病\"", ")\n                checkCmd = ", "False", "\n        ", "# 等待类型，内容必须为数字", "\n        ", "if", " cmdType.value == ", "5.0", ":\n            ", "if", " cmdValue.ctype != ", "2", ":\n                ", "print", "(", "'第'", ",i+", "1", ",", "\"行,第2列数据有毛病\"", ")\n                checkCmd = ", "False", "\n        ", "# 滚轮事件，内容必须为数字", "\n        ", "if", " cmdType.value == ", "6.0", ":\n            ", "if", " cmdValue.ctype != ", "2", ":\n                ", "print", "(", "'第'", ",i+", "1", ",", "\"行,第2列数据有毛病\"", ")\n                checkCmd = ", "False", "\n        ", "# 键盘事件，内容为空", "\n        ", "if", " cmdType.value == ", "7.0", " ", "or", " cmdType.value == ", "8.0", " ", "or", " cmdType.value == ", "9.0", " ", "or", " cmdType.value == ", "10.0", " ", "or", " cmdType.value == ", "11.0", ":\n            ", "if", " cmdValue.ctype != ", "0", ":\n                checkCmd = ", "False", "\n                ", "print", "(", "'第'", ", i + ", "1", ", ", "\"行,第2列数据有毛病\"", ")\n        i += ", "1", "\n    ", "return", " checkCmd\n\n", "#任务", "\n", "def", " ", "mainWork", "(", "img", "):\n    i = ", "1", "\n    ", "while", " i < sheet1.nrows:\n        ", "#取本行指令的操作类型", "\n        cmdType = sheet1.row(i)[", "0", "]\n        ", "if", " cmdType.value == ", "1.0", ":\n            ", "#取图片名称", "\n            img = sheet1.row(i)[", "1", "].value\n            reTry = ", "1", "\n            ", "if", " sheet1.row(i)[", "2", "].ctype == ", "2", " ", "and", " sheet1.row(i)[", "2", "].value != ", "0", ":\n                reTry = sheet1.row(i)[", "2", "].value\n            mouseClick(", "1", ",", "\"left\"", ",img,reTry)\n            ", "print", "(", "\"单击左键\"", ",img)\n        ", "#2代表双击左键", "\n        ", "elif", " cmdType.value == ", "2.0", ":\n            ", "#取图片名称", "\n            img = sheet1.row(i)[", "1", "].value\n            ", "#取重试次数", "\n            reTry = ", "1", "\n            ", "if", " sheet1.row(i)[", "2", "].ctype == ", "2", " ", "and", " sheet1.row(i)[", "2", "].value != ", "0", ":\n                reTry = sheet1.row(i)[", "2", "].value\n            mouseClick(", "2", ",", "\"left\"", ",img,reTry)\n\n            ", "print", "(", "\"双击左键\"", ",img)\n        ", "#3代表右键", "\n        ", "elif", " cmdType.value == ", "3.0", ":\n            ", "#取图片名称", "\n            img = sheet1.row(i)[", "1", "].value\n            ", "#取重试次数", "\n            reTry = ", "1", "\n            ", "if", " sheet1.row(i)[", "2", "].ctype == ", "2", " ", "and", " sheet1.row(i)[", "2", "].value != ", "0", ":\n                reTry = sheet1.row(i)[", "2", "].value\n            mouseClick(", "1", ",", "\"right\"", ",img,reTry)\n            ", "print", "(", "\"右键\"", ",img)\n        ", "#4代表输入", "\n        ", "elif", " cmdType.value == ", "4.0", ":\n            inputValue = sheet1.row(i)[", "1", "].value\n            pyperclip.copy(inputValue)\n            pyautogui.hotkey(", "'ctrl'", ",", "'v'", ")\n            time.sleep(", "0.5", ")\n            ", "print", "(", "\"输入:\"", ",inputValue)\n        ", "#5代表等待", "\n        ", "elif", " cmdType.value == ", "5.0", ":\n            ", "#取图片名称", "\n            waitTime = sheet1.row(i)[", "1", "].value\n            time.sleep(waitTime)\n            ", "print", "(", "\"等待\"", ",waitTime,", "\"秒\"", ")\n        ", "#6代表滚轮", "\n        ", "elif", " cmdType.value == ", "6.0", ":\n            ", "#取图片名称", "\n            scroll = sheet1.row(i)[", "1", "].value\n            pyautogui.scroll(", "int", "(scroll))\n            ", "print", "(", "\"滚轮滑动\"", ",", "int", "(scroll),", "\"距离\"", ")\n        ", "#7代表“全选”", "\n        ", "elif", " cmdType.value == ", "7.0", ":\n            pyautogui.hotkey(", "'ctrl'", ",", "'a'", ")\n            ", "print", "(", "\"全选\"", ")\n        ", "#8代表“复制”", "\n        ", "elif", " cmdType.value == ", "8.0", ":\n            ", "#键盘ctrl+c", "\n            pyautogui.hotkey(", "'ctrl'", ",", "'c'", ")\n            ", "print", "(", "\"复制\"", ")\n        ", "#9代表\"粘贴\"", "\n        ", "elif", " cmdType.value == ", "9.0", ":\n            ", "#键盘ctrl+v", "\n            pyautogui.hotkey(", "'ctrl'", ",", "'v'", ")\n            ", "print", "(", "\"粘贴\"", ")\n        ", "#10代表“回车”", "\n        ", "elif", " cmdType.value == ", "10.0", ":\n            ", "#键盘 回车", "\n            pyautogui.press(", "'enter'", ")\n            ", "print", "(", "\"回车\"", ")\n        ", "#11 返回桌面", "\n        ", "elif", " cmdType.value == ", "11.0", ":\n            ", "#返回桌面", "\n            pyautogui.hotkey(", "'win'", ",", "'d'", ")\n            ", "print", "(", "\"返回桌面\"", ")\n\n        i += ", "1", "\n\n", "if", " __name__ == ", "'__main__'", ":\n    file = ", "'cmd.xls'", "\n    ", "#打开文件", "\n    wb = xlrd.open_workbook(filename=file)\n    ", "#通过索引获取表格sheet页", "\n    sheet1 = wb.sheet_by_index(", "0", ")\n    ", "#数据检查", "\n    checkCmd = dataCheck(sheet1)\n    ", "if", " checkCmd:\n        key=", "input", "(", "'选择功能: 1.做一次 2.循环到死 \\n'", ")\n        ", "if", " key==", "'1'", ":\n            ", "#循环拿出每一行指令", "\n            mainWork(sheet1)\n        ", "elif", " key==", "'2'", ":\n            ", "while", " ", "True", ":\n                mainWork(sheet1)\n                time.sleep(", "0.1", ")\n                ", "print", "(", "\"等待0.1秒\"", ")\n    ", "else", ":\n        ", "print", "(", "'输入有误或者已经退出!'", ")\n\n\n", "\n", "```"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\nAVLTree&amp;lt;Integer&amp;gt; integerAVLTree &amp;#61; new AVLTree&amp;lt;&amp;gt;();\nintegerAVLTree.&lt;span class=\"hljs-meta\"&gt;put&lt;/span&gt;(5);\nintegerAVLTree.&lt;span class=\"hljs-meta\"&gt;put&lt;/span&gt;(3);\nintegerAVLTree.&lt;span class=\"hljs-meta\"&gt;put&lt;/span&gt;(7);\nintegerAVLTree.&lt;span class=\"hljs-meta\"&gt;put&lt;/span&gt;(1);\nintegerAVLTree.&lt;span class=\"hljs-meta\"&gt;put&lt;/span&gt;(4);\nintegerAVLTree.&lt;span class=\"hljs-meta\"&gt;put&lt;/span&gt;(6);\nintegerAVLTree.&lt;span class=\"hljs-meta\"&gt;put&lt;/span&gt;(8);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(integerAVLTree.rootNode.data);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(integerAVLTree.rootNode.left.data);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(integerAVLTree.rootNode.right.data);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(integerAVLTree.rootNode.left.left.data);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(integerAVLTree.rootNode.left.right.data);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(integerAVLTree.rootNode.right.left.data);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(integerAVLTree.rootNode.right.right.data);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#34;&lt;/span&gt;);\nintegerAVLTree.&lt;span class=\"hljs-keyword\"&gt;remove&lt;/span&gt;(3);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(integerAVLTree.rootNode.data);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(integerAVLTree.rootNode.left.data);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(integerAVLTree.rootNode.right.data);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(integerAVLTree.rootNode.left.left.data);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(integerAVLTree.rootNode.left.right.data);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(integerAVLTree.rootNode.right.left.data);\nSystem.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.printl&lt;span class=\"hljs-meta\"&gt;n&lt;/span&gt;(integerAVLTree.rootNode.right.right.data);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;测试脚本&amp;#xff0c;发现删除并没有成功&amp;#xff0c;获取到右孩子的最左节点后&amp;#xff0c;应该先取下叶子结点置空&amp;#xff0c;然后把原始叶子结点作为新根。&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["自己实现的AVL树，有bug但是没找到（有可能是测试程序的bug）", ["我参考博客，自己写代码实现了AVL树，想验证一下写的是否是正确的，我采用了手动验证和自动化验证的方式，自动化验证就是，在一个死循环里一直调用AVL树的put，remove和find方法，但是会走到我设定的出错逻辑中（或者是出现栈溢出），但是不知道是哪里的问题，已经搞了一天了，这是哪里的问题呢？", "\n", "出错截图如下：", "\n", "\n", "\n", "代码如下，注释很全！", "\n", "package", " com.victory.common.data_structure;\n\n", "import", " java.util.HashSet;\n", "import", " java.util.Scanner;\n", "import", " java.util.Set;\n\n", "/**\n * 平衡二叉树 AVL树的实现\n */", "\n", "public", " ", "class", " ", "AVLTree", "<", "T extends Comparable<T", ">> ", "{\n\n    ", "/**\n     * 树的根节点\n     */", "\n    ", "private", " AVLNode<T> rootNode;\n\n    ", "/**\n     * AVL树的结点个数\n     */", "\n    ", "private", " int size;\n\n    ", "public", " int size() {\n        ", "return", " size;\n    }\n\n    ", "/**\n     * 添加元素到AVL树，不允许null 和重复元素\n     *\n     * ", "@param", " value 待添加的元素\n     * ", "@return", " 添加成功--true，否则--false\n     */", "\n    ", "public", " boolean put(T value) {\n        ", "if", " (value == ", "null", ") ", "return", " ", "false", ";\n        AVLNode<T> newRoot = put(", "this", ".rootNode, value);\n        ", "if", " (newRoot == ", "null", ") ", "return", " ", "false", ";\n        ", "this", ".rootNode = newRoot;\n        ", "return", " ", "true", ";\n    }\n\n    ", "/**\n     * 查找AVL树中是存在结点value\n     *\n     * ", "@param", " value 待查找的结点\n     * ", "@return", " 存在--true，不存在--false\n     */", "\n    ", "public", " boolean find(T value) {\n        ", "if", " (value == ", "null", " || ", "this", ".rootNode == ", "null", ") ", "return", " ", "false", ";\n        AVLNode<T> cur = ", "this", ".rootNode;\n        ", "while", " (cur != ", "null", ") {\n            ", "if", " (cur.", "data", ".compareTo(value) == ", "0", ") ", "return", " ", "true", ";\n            ", "if", " (value.compareTo(cur.", "data", ") < ", "0", ") cur = cur.left;\n            ", "else", " cur = cur.right;\n        }\n        ", "return", " ", "false", ";\n    }\n\n    ", "/**\n     * 删除元素\n     *\n     * ", "@param", " value 待删除的元素\n     * ", "@return", " 删除成功--true，否则--false\n     */", "\n    ", "public", " boolean remove(T value) {\n        ", "if", " (value == ", "null", " || ", "this", ".rootNode == ", "null", ") ", "return", " ", "false", ";\n        RemoveResult<T> removeResult = remove(", "this", ".rootNode, value);\n        ", "if", " (removeResult.success) ", "this", ".rootNode = removeResult.retNode;\n        ", "return", " removeResult.success;\n    }\n\n    ", "/**\n     * 中序打印AVL树\n     */", "\n    ", "public", " void inOrder() {\n        inOrder(", "this", ".rootNode);\n        System.", "out", ".println();\n    }\n\n    ", "private", " void inOrder(AVLNode<T> root) {\n        ", "if", " (root != ", "null", ") {\n            inOrder(root.left);\n            System.", "out", ".print(", "\" \"", " + root.", "data", " + ", "\" \"", ");\n            inOrder(root.right);\n        }\n    }\n\n    ", "/**\n     * 删除某棵AVL树上某个结点，因为删除可能会更换根结点，因此需要返回删除以后的根结点\n     *\n     * ", "@param", " root  树根结点\n     * ", "@param", " value 待删除的值\n     * ", "@return", " 成功返回new RemoveResult<>(true,新的树根节点); 否则 new RemoveResult<>(false,null)\n     */", "\n    ", "private", " RemoveResult<T> remove(AVLNode<T> root, T value) {\n        ", "//如果根为空，则直接返回删除失败", "\n        ", "if", " (root == ", "null", ") ", "return", " new RemoveResult<T>(", "false", ");\n\n        ", "//找到带删除的结点，删除逻辑和BST大致一样", "\n        ", "if", " (root.", "data", ".compareTo(value) == ", "0", ") {\n            ", "if", " (root.left == ", "null", " || root.right == ", "null", ") {\n                --size;\n                ", "if", " (root.left == ", "null", ") root = root.right;\n                ", "else", " root = root.left;\n            } ", "else", " {", "//当左右子树都不为空时，先从右子树找出最左的结点，作为新的根， 然后将其从右子树删除，", "\n                AVLNode<T> leftMostOfRight = mostLeft(root.right);\n                leftMostOfRight.left = root.left;\n                leftMostOfRight.right = remove(root.right, leftMostOfRight.", "data", ").retNode;\n                root = leftMostOfRight;\n            }\n            ", "//如果当前结点不是要删除的，则根据大小关系，分别跳到左右子树 进行删除", "\n        } ", "else", " ", "if", " (value.compareTo(root.", "data", ") < ", "0", ") {\n            ", "// System.out.println(value+\" 小于 \"+root.data+\" 到左子树删除\");", "\n            RemoveResult<T> removeLeft = remove(root.left, value);\n            ", "if", " (!removeLeft.success) ", "return", " removeLeft;\n            root.left = removeLeft.retNode;\n        } ", "else", " {\n            ", "//System.out.println(value+\" 大于 \"+root.data+\" 到右子树删除\");", "\n            RemoveResult<T> removeRight = remove(root.right, value);\n            ", "if", " (!removeRight.success) ", "return", " removeRight;\n            root.right = removeRight.retNode;\n        }\n        ", "//最后需要调整高度和平衡性", "\n        updateHeight(root);\n        ", "return", " new RemoveResult<>(", "true", ", adjustAVLTree(root));\n    }\n\n    ", "/**\n     * 找到AVL树某个结点上最左的结点\n     *\n     * ", "@param", " root 需要搜索到的树根节点\n     * ", "@return", " root上最左的结点\n     */", "\n    ", "private", " AVLNode<T> mostLeft(AVLNode<T> root) {\n        ", "if", " (root == ", "null", ") ", "return", " ", "null", ";\n        AVLNode<T> cur = root;\n        ", "for", " (; cur.left != ", "null", "; cur = cur.left) ;\n        ", "return", " cur;\n    }\n\n    ", "/**\n     * 添加一个元素到AVL树，因为添加以后可能会改变树的根，所以返回添加后的新的根节点\n     *\n     * ", "@param", " root  AVL树根节点\n     * ", "@param", " value 待添加的元素\n     * ", "@return", " 添加后的根结点\n     */", "\n    ", "private", " AVLNode<T> put(AVLNode<T> root, T value) {\n        ", "if", " (root == ", "null", ") {\n            ++", "this", ".size;\n            ", "return", " new AVLNode<>(value);\n        }\n        ", "// 如果找到某个元素和value相等，则不添加，返回", "\n        ", "if", " (root.", "data", ".compareTo(value) == ", "0", ") ", "return", " ", "null", ";\n        ", "if", " (value.compareTo(root.", "data", ") < ", "0", ") {", "//value小于根结点的值，则添加到左子树上，否则添加到右子树上", "\n            AVLNode<T> newLeft = put(root.left, value);\n            ", "if", " (newLeft == ", "null", ") ", "return", " ", "null", ";\n            root.left = newLeft;\n        } ", "else", " {\n            AVLNode<T> newRight = put(root.right, value);\n            ", "if", " (newRight == ", "null", ") ", "return", " ", "null", ";\n            root.right = newRight;\n        }\n        ", "//更新高度", "\n        updateHeight(root);\n\n        ", "//调整AVL树", "\n        ", "return", " adjustAVLTree(root);\n    }\n\n    ", "/**\n     * 获取某个结点的高度\n     *\n     * ", "@param", " node 需要获取其高度的结点\n     * ", "@return", " AVL树某个结点的高度\n     */", "\n    ", "private", " int height(AVLNode<T> node) {\n        ", "//如果树为空，则返回0，否则返回其height字段的值", "\n        ", "return", " node == ", "null", " ? ", "0", " : node.height;\n    }\n\n    ", "/**\n     * 更新某个AVL树结点的高度\n     *\n     * ", "@param", " node 需要更新高度的AVL树结点\n     */", "\n    ", "private", " void updateHeight(AVLNode<T> node) {\n        ", "//某个结点的高度是其左子树和右子树的高度的最大值 +1", "\n        ", "if", " (node != ", "null", ") node.height = Math.max(height(node.left), height(node.right)) + ", "1", ";\n    }\n\n    ", "/**\n     * 获取AVL树某个结点的平衡因子\n     * 平衡因子是左子树的高度减去右子树的高度\n     *\n     * ", "@param", " node 需要获取其平衡因子的结点\n     * ", "@return", " AVL树某个结点的平衡因子\n     */", "\n    ", "private", " int balanceFactor(AVLNode<T> node) {\n        ", "return", " node == ", "null", " ? ", "0", " : height(node.left) - height(node.right);\n    }\n\n    ", "/**\n     * 对AVL树的某个结点进行右旋操作\n     * 右旋的逻辑是，node的左指针指向其左子树的右子树，其左子树的右指针指向node，返回node的左子树\n     *\n     * ", "@param", " node 需要右旋的结点\n     * ", "@return", " 右旋操作以后的根节点\n     */", "\n    ", "private", " AVLNode<T> rightRotate(AVLNode<T> node) {\n        AVLNode<T> left = node.left;\n        node.left = left.right;\n        left.right = node;\n        updateHeight(node);", "//先更新node的高度，然后才可以更新left的高度", "\n        updateHeight(left);\n        ", "return", " left;\n    }\n\n    ", "/**\n     * 对AVL树的某个结点进行左旋操作\n     * 左旋的逻辑是，node的右指针指向其右子树的左子树，其右子树的左指针指向node，返回node的右子树\n     *\n     * ", "@param", " node 需要左旋的结点\n     * ", "@return", " 左旋操作以后的根节点\n     */", "\n    ", "private", " AVLNode<T> leftRotate(AVLNode<T> node) {\n        AVLNode<T> right = node.right;\n        node.right = right.left;\n        right.left = node;\n        updateHeight(node);\n        updateHeight(right);\n        ", "return", " right;\n    }\n\n    ", "/**\n     * 调整AVL树，主要是根据平衡因子进行旋转操作\n     *\n     * ", "@param", " root 待调整的根节点\n     * ", "@return", " 调整之后的根节点\n     */", "\n    ", "private", " AVLNode<T> adjustAVLTree(AVLNode<T> root) {\n        ", "if", " (root == ", "null", ") ", "return", " ", "null", ";\n\n        ", "//判断是否平衡，如果平衡，则直接返回根节点", "\n        int balanceFactor = balanceFactor(root);\n        ", "if", " (Math.abs(balanceFactor) <= ", "1", ") ", "return", " root;\n\n        ", "//否则根据各种不平衡的情况，采取左旋和右旋进行调整", "\n        ", "if", " (balanceFactor > ", "1", ") {", "//当平衡因子大于1时，需要右旋解决", "\n\n            ", "// 如果根的左子树的平衡因子小于0 则说明根的左子树 右重左轻 需要先对其左旋", "\n            ", "if", " (balanceFactor(root.left) < ", "0", ") root.left = leftRotate(root.left);\n            root = rightRotate(root);\n        } ", "else", " {", "//当平衡因子小于-1时，需要左旋解决", "\n\n            ", "// 如果根的左右树的平衡因子大于0 则说明根的右子树 左重右轻 需要先对其右旋", "\n            ", "if", " (balanceFactor(root.right) > ", "0", ") root.right = rightRotate(root.right);\n            root = leftRotate(root);\n        }\n        ", "return", " root;\n    }\n\n    ", "private", " static ", "class", " ", "AVLNode", "<", "T extends Comparable<T", ">> ", "{\n        T ", "data", ";\n        AVLNode<T> left;\n        AVLNode<T> right;\n        int height;\n\n        ", "public", " AVLNode(T ", "data", ") {\n            ", "this", ".", "data", " = ", "data", ";\n            ", "this", ".height = ", "1", ";\n        }\n    }\n\n    ", "/**\n     * 删除结果类\n     *\n     * ", "@param", " <T>\n     */", "\n    ", "private", " static ", "class", " ", "RemoveResult", "<", "T extends Comparable<T", ">> ", "{\n        boolean success; ", "//当前删除是否成功", "\n        AVLNode<T> retNode; ", "// 删除成功后 返回的新的根结点", "\n\n        ", "public", " RemoveResult(boolean success, AVLNode<T> retNode) {\n            ", "this", ".success = success;\n            ", "this", ".retNode = retNode;\n        }\n\n        ", "public", " RemoveResult(boolean success) {\n            ", "this", "(success, ", "null", ");\n        }\n    }\n\n    ", "public", " static void main(String[] args) {\n        automationTest();\n    }\n\n    ", "/**\n     * 手动测试\n     */", "\n    ", "private", " static void artificialTest() {\n        AVLTree<Integer> integerAVLTree = new AVLTree<>();\n        Scanner sc = new Scanner(System.", "in", ");\n        String command = ", "null", ";\n        int n;\n        ", "while", " (", "true", ") {\n            command = sc.next();\n            ", "if", " (", "\"put\"", ".equals(command)) {\n                n = sc.nextInt();\n                ", "if", " (integerAVLTree.put(n)) System.", "out", ".println(n + ", "\" 插入成功\"", ");\n                ", "else", " System.", "out", ".println(n + ", "\" 插入失败\"", ");\n            }\n            ", "if", " (", "\"remove\"", ".equals(command)) {\n                n = sc.nextInt();\n                ", "if", " (integerAVLTree.remove(n)) System.", "out", ".println(n + ", "\" 删除成功\"", ");\n                ", "else", " System.", "out", ".println(n + ", "\" 删除失败\"", ");\n            }\n            ", "if", " (", "\"print\"", ".equals(command)) {\n                integerAVLTree.inOrder();\n            }\n            ", "if", " (", "\"find\"", ".equals(command)) {\n                n = sc.nextInt();\n                ", "if", " (integerAVLTree.find(n)) System.", "out", ".println(n + ", "\" 存在当前树中\"", ");\n                ", "else", " System.", "out", ".println(n + ", "\" 不存在当前树中\"", ");\n            }\n            ", "if", " (", "\"size\"", ".equals(command)) System.", "out", ".println(", "\"当前树的结点个数是：\"", " + integerAVLTree.size());\n            ", "if", " (", "\"exit\"", ".equals(command)) ", "break", ";\n        }\n    }\n\n    ", "private", " static volatile boolean runFlag = ", "true", ";\n\n    ", "/**\n     * 自动测试\n     */", "\n    ", "private", " static void automationTest() {\n\n        new Thread(() -> {\n            ", "//验证的逻辑是 设置一个set集合，每次生成一个随机数number，", "\n            ", "// 1. 测试put方法  如果set集合已经包含number的时候，说明AVLTree已经添加过这个数了，再次添加会失败，校验添加是否失败", "\n            ", "//                如果set集合不包含number，则认为AVLTree没有添加过这个数，测试添加是否成功", "\n\n            ", "//2. 测试remove方法 如果set集合已经包含number的时候，说明AVLTree已经添加过这个数了，测试remove是否成功", "\n            ", "//                  如果set集合不包含number，则认为AVLTree没有添加过这个数，测试remove是否失败", "\n\n            ", "//3. 测试find 如果set集合已经包含number的时候，说明AVLTree已经添加过这个数了，测试find是否成功", "\n            ", "//                   如果set集合不包含number，则认为AVLTree没有添加过这个数，测试find是否失败", "\n            Set<Integer> integerSet = new HashSet<>();\n            AVLTree<Integer> integerAVLTree = new AVLTree<>();\n            int cnt = ", "0", ";\n            int command, number;\n            ", "while", " (runFlag) {\n                command = (int) (Math.random() * ", "4", ") + ", "1", ";\n                number = (int) (Math.random() * Integer.MAX_VALUE) + ", "1", ";\n                switch (command) {\n                    case ", "1", ":", "//put", "\n                        ", "if", " (integerAVLTree.size() < ", "10000", ") {\n                            boolean put = integerAVLTree.put(number);\n                            ", "if", " (integerSet.contains(number)) {\n                                ", "if", " (put) {", "//如果set中已经有了，但还是添加成功了，这是不正确的", "\n                                    System.", "out", ".println(", "\"hash表中已经包含了：\"", " + number + ", "\" 应该添加失败，但是添加成功了\"", ");\n                                    ", "return", ";\n                                }\n                            } ", "else", " {\n                                ", "if", " (!put) {\n                                    System.", "out", ".println(", "\"hash表中没有包含：\"", " + number + ", "\" 应该添加成功，但是添加失败了\"", ");\n                                    ", "return", ";\n                                }\n                                integerSet.add(number);\n                                ++cnt;\n                            }\n                        }\n                        ", "break", ";\n                    case ", "2", ":", "//remove", "\n                        boolean remove = integerAVLTree.remove(number);\n                        ", "if", " (integerSet.contains(number)) {\n                            ", "if", " (!remove) {\n                                System.", "out", ".println(", "\"hash表中已经包含了：\"", " + number + ", "\" 应该删除成功，但是删除失败了\"", ");\n                                ", "return", ";\n                            }\n                            --cnt;\n                            integerSet.remove(number);\n                        } ", "else", " {\n                            ", "if", " (remove) {\n                                System.", "out", ".println(", "\"hash表中没有包含：\"", " + number + ", "\" 应该删除失败，但是删除成功了\"", ");\n                                ", "return", ";\n                            }\n                        }\n                        ", "break", ";\n                    case ", "3", ":", "//find", "\n                        ", "if", " (integerSet.contains(number)) {\n                            boolean b = integerAVLTree.find(number);\n                            ", "if", " (!b) {\n                                System.", "out", ".println(", "\"hash表中已经包含了：\"", " + number + ", "\" 应该查找成功，但是查找失败了\"", ");\n                                ", "return", ";\n                            }\n                        }\n                        ", "break", ";\n                    case ", "4", ":", "//size", "\n                        ", "if", " (integerAVLTree.size() != cnt) {\n                            System.", "out", ".println(", "\"size应该是:\"", " + cnt + ", "\"，但实际上它是\"", " + integerAVLTree.size());\n                            ", "return", ";\n                        }\n                        ", "break", ";\n                }\n            }\n        }).start();\n\n        Scanner scanner = new Scanner(System.", "in", ");\n        String next = scanner.next();\n        ", "if", " (", "\"exit\"", ".equals(next)) runFlag = ", "false", ";\n    }\n}\n"]], "Tag": "程序设计"}
{"Answer": "再补充下，数据量会很大，但现在有大数据也不是问题。如需提供技术支持，可联系我。", "Konwledge_Point": "重复n次操作", "Question": ["一个难倒三线城市所有开发人员，主要在数据库方面的项目，就等给各位大侠发路费了", ["俺生在、活在伟大祖国的一个三线小城市，畴划了一个难倒三线城市所有开发人员，主要在数据库构架，您认为是我的方案行的通吗，还是他们没修炼？到家呢？俺也迷茫了，路过的大侠能给俺点指点吗，发表您的看法，您就说您认为可行不可行，俺将不胜感激！！！", "\n\n", " 开发项目：", "\n         全球线缆管理专家", "\n  开发思路：", "\n            目前，全世界对管线缆的管理水平普遍还处在一个相对较低的水平上！", "\n           至少有95%企业回答不了以下几个问题：企业到目前为止总共铺设了多少条电缆，每条电缆是哪一年铺设的，已经使用了多少年，最大安全使用年限是多少？是否进行了正常的巡检?今年具体是哪条电缆需要更换吗?您公司布设了多少打数据线，它们起点端口和相对应终点端口分别在哪里？3、您家里水、电、暖具体埋设在墙壁、地板的哪个位置？", "\n          然而，企业要达到良好的管理水平就必须持续投入大量的人力、物力和财力。但是这个投入收益效率显然太低了；当企业真正大力投入的时候就会发现这些新电缆老是不坏，旧电缆坏了又不好查；所以大多数企业不愿意去做，准确的说是不愿花大力气去做这个事情。", "\n          所以要提高全社会的线缆管理水平最好的办法就是走社会化的道路。就比如每个企业都有通讯要求，但是如果因此要求每个企业都去建一个通迅公司的话，显然是不可能的。同样，要解决这个问题最好方法是，能有一家企业专注的去做这件事，并在这方面提供社会化的服务。", "\n技术方案：", "\n        概述：  基于无线网络和地理位置定位，运用服务器数据的区块分割管理法对管、线、缆进行系统编码（指出物品在数据库表中的第几条记录）、条形码标识，免查询直接读取数据的管理方法。", "\n       简单说就是：一条线缆被记录在表中是第N条，保持永远是第N条不变，然后把数字“N”，生成条形码贴在线缆上，用手机扫描条形码就能知道，我们要查第几条记录了，直接把指针移过支读取。", "\n      项目要成功的关键就是  要解决两个难题：1、能存下天量数据；2，能快速读取", "\n         具体实施方案：", "\n 一种基于无线网络和地理位置定位，运用数据的区块分割管理法，对管、线、缆进行系统编码、条形码标识的管理方法。共分两个大的部分：", "\n（1）一种数据的区块分割管理法：首先把一个大的数据集合，根据某一特征人为的分成若干个“区块”，作为服务器管理的最小单元；由于“区块分割”从理论上，在边界上误差和错误必然发生，于是“区块分割管理法”要求把每一个区块和与它所有相邻的区块动态的作为一个相对较大的区域来管理：当在查询某一个区块内的数据的时候与他所有相邻的区块内的数据会根据需要进行协作查询；同时要求当向某一个区块增加一个新的数据时不能与其所有相邻的区块内的已有的数据出现某一特定属性的共同特征；用这个方法来进行系统“容错、纠错”，保证即便真的出现了错误，也能正确的还原输出正确信息。如图1所示，如果我们先定一个规则：假定数字“１“先被一个区块记录了，那它相邻的区块都不能再出现“１”这个数字；数字“２”被一个区块记录了，数字“２＂所在区块相邻的区块都不能再出现＂２＂这个数字了；假如有一天我们想找到“１”，但我们只能确定“１”有９０％可能性在某一区域，但是，同时能确定１００％不会超出这个区块和他相邻区块构成的这个总体的区域，所以我只要在这个区块和他相邻区块构成的这个总体的区域里找到了“１“，那么这个“１”就一定是我想要找的那个“１“。显然，这个“１”和在这个区域以外出现的“1”是不一样的。所以，区块分割使同一编码，会因其所在区块不同而代表的含义不同。使编码可以在整个数据集的非相邻区块内重复使用。", "\n（2）一种基于无线网络和地理位置定位，运用数据的区块分割管理法，对管、线、缆进行系统编码、条形码标识的管理方法。", "\n过去有很多事情，由于数据量庞大而很难解决。现在，运用数据的区块分割管理法可以方便解决很多问题，尤其是在智慧城市和数字化城市、数字化地球建设方面将来一定会得到广泛的运用。例如，如果要把所有的管、线、缆全部管理起来，甚至同一条管、线、缆根据所处的地域不同还要分为好多段来管理，整体上必然是一个巨大的数据量。但是，单条记录占用空间并不大，他们的位置（经纬度坐标）却还是相对固定的。根据这一特征，运用本发明所提供的基于无线网络和地理位置定位，运用数据的区块分割管理法，对管、线、缆进行系统编码、条形码标识的管理方法用来解决这一难题。统一管、线、缆编码标准，建设、维护一个能长期保存，方便随时可查、全社会可用的管、线、缆数据的信息系统；在这个信息系统里，服务器就如同所有用户共同使用（共享）的一个“云账本”，大家都在这个帐本上“记账”；在这里又如同给每一条线缆上了一个“户口”。每一个“户口”都记录了管、线、缆日常管理的必要信息。对于“建设单位、负责人联系方式、目前在用还是弃用、弃用，是否允许他人使用”等非涉密的信息，用户可以有选择的向全社会公开，并使全社会的人都有办法方便的了解这些。", "\n “经度”、“纬度”、“编码”共同确定了每一个“户口”的唯一性。由于，强制要求在两条经度线和两条纬度线所围成的每一个“区块”及其相邻的“区块”构成的这个“大区块”内，授予用户的“编码”部分都要保持唯一性；这就等于为把大型数据集合进行了有效分割，并为保障能准确查询打下了坚实的基础。所以，用户只要使用了带有自动定位功能的终端，在一般情况下只需要在目标物上制作条形“编码”和读取条形“编码”部分就足够了，而不需要人工输入所在位置的经纬度信息；即使在自动定位失败的情况下，也只需指定出用户所在“区块”内的任何一个点的位置就可以了，而无需关心具体的经纬度数据，整个过程中系统会根据需要将终端设备所在位置的具体的经纬度自动上传服务器。", "\n本发明所提供的方法便于多个服务器时之间以“区块”作为最小单元进行工作量分配，以方便运营商配置合理的服务器数量，保障恰当的服务响应时间和运营成本的。又因为管、线、缆具有细、长的共同外形特点，所以通过条形码进行标识更具有普遍的易制作和易读取性。", "\n本发明提供的一种基于无线网络和地理位置定位，运用数据的集合区块分割管理法，对管、线、缆进行系统编码、条形码标识的管理方法，使条形码标识在人、机、目标物之间“接口”的准确对接及提高信息交换效率上起了关键性的作用；而地理位置定位的信息系统通过“后台”自动调取、终端设备自动发送方式，为这一过程的顺利进行提供了保障。", "\n实施例1：一用户A正在某处铺设光缆，他通过安装了App的手机向远端服务器发出了要编码请求；服务器收到了请求和用户A所在的位置的经纬度数据，检查用户A所在“区块”的数据库，选出一个编码，确认这个编码不仅用户所在“区块”没有占用，且紧邻的几个“区块”内也没有使用，然后服务器将这个号码发到用户A手机的APP上并将这个编码设为临时占用（24小时）；用户手机通过蓝牙传到了用户的条形码喷枪上，用户A操作喷枪把转换成条形码的编码喷在了光缆上；然后用户用手机扫描该条形码，编码被识别后，给这段光缆填写了“通讯工程1号线、起始于机房、终点红星小区9号中继站、线长1６７2CM、管理单位：通讯公司、电话:123”等信息后，向服务器发送了保存指令；服务器收到指令后保存了信息，并将编码由临时占用（24小时）改为70年保存期。半年后，该用户巡查了这段线路，扫描条形码后，又在信息上增加了“状态正常、巡线员甲、2018年12月8日”的信息后，指令服务器作了保存。10年后，该用户认为60年占用期太短，又申请将这段线路编码的占用期修改为70年。"]], "Tag": "程序设计"}
{"Answer": "&lt;h1 id=\"h1_库_1644668316928\"&gt;库&lt;/h1&gt;\n&lt;p&gt;import xlrd&lt;br /&gt;import tkinter as tk&lt;br /&gt;import ttkbootstrap as ttk&lt;br /&gt;from docx import *&lt;br /&gt;from tkinter import *&lt;br /&gt;from tkinter import filedialog&lt;br /&gt;from docx.shared import Pt, Inches&lt;br /&gt;from docx.enum.text import WD_PARAGRAPH_ALIGNMENT&lt;br /&gt;from ttkbootstrap import Style&lt;br /&gt;from ttkbootstrap.constants import *&lt;/p&gt;\n&lt;p&gt;root &amp;#61; tk.Tk()&lt;/p&gt;\n&lt;h1 id=\"h1_窗口设置&amp;#xff08;固定位置、大小、美化&amp;#xff09;_1644668316928\"&gt;窗口设置&amp;#xff08;固定位置、大小、美化&amp;#xff09;&lt;/h1&gt;\n&lt;p&gt;sw &amp;#61; root.winfo_screenwidth()&lt;br /&gt;sh &amp;#61; root.winfo_screenheight()&lt;br /&gt;ww &amp;#61; 450&lt;br /&gt;wh &amp;#61; 280&lt;br /&gt;x &amp;#61; (sw - ww) / 2&lt;br /&gt;y &amp;#61; (sh - wh) / 2&lt;br /&gt;root.geometry(&amp;#34;%dx%d&amp;#43;%d&amp;#43;%d&amp;#34; % (ww, wh, x, y))&lt;br /&gt;root.title(&amp;#34;批量制作岗位卡&amp;#34;)&lt;br /&gt;root.minsize(450, 280)&lt;br /&gt;root.maxsize(450, 280)&lt;br /&gt;style &amp;#61; Style(theme&amp;#61;&amp;#39;litera&amp;#39;)&lt;br /&gt;window &amp;#61; style.master&lt;/p&gt;\n&lt;h1 id=\"h1_主程序&amp;#xff1a;_1644668316928\"&gt;主程序&amp;#xff1a;&lt;/h1&gt;\n&lt;p&gt;def change_data(wjbh, hh, pm, gd, zw, zlbz, lb, bz, bzgg, bzd, sl):&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    bz &amp;#61; str(bz)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    lb &amp;#61; str(lb)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    bzgg &amp;#61; str(bzgg)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    bzd &amp;#61; str(bzd)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    sl &amp;#61; str(sl)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    pm &amp;#61; str(pm)&lt;/span&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;document &amp;#61; Document(filepath)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; document&lt;span class=\"hljs-selector-class\"&gt;.paragraphs&lt;/span&gt;:\n    &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.replace&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;***&amp;#39;&lt;/span&gt;, gd)\n    &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.replace&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;amp;&amp;amp;&amp;amp;&amp;#39;&lt;/span&gt;, zw)\n    &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.replace&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#xffe5;&amp;#xffe5;&amp;#xffe5;&amp;#39;&lt;/span&gt;, zlbz)\n    &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.replace&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;, bz)\n    &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.replace&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;amp;-&amp;amp;-&amp;amp;&amp;#39;&lt;/span&gt;, bzgg)\n    &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.replace&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;*-*-*&amp;#39;&lt;/span&gt;, bzd)\n    &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.replace&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#xffe5;-&amp;#xffe5;-&amp;#xffe5;&amp;#39;&lt;/span&gt;, sl)\n\n    &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.paragraph_format&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.line_spacing&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;1.25&lt;/span&gt;\n    &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.paragraph_format&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.left_indent&lt;/span&gt; &amp;#61; Inches(&lt;span class=\"hljs-number\"&gt;0.15&lt;/span&gt;)\n\n    head &amp;#61; document&lt;span class=\"hljs-selector-class\"&gt;.sections&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.header&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; head&lt;span class=\"hljs-selector-class\"&gt;.paragraphs&lt;/span&gt;:\n        &lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.replace&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#64;&amp;#39;&lt;/span&gt;, pm)\n        &lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.text&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.replace&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#61;&amp;#39;&lt;/span&gt;, hh)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.runs&lt;/span&gt;:\n        &lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.font&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.size&lt;/span&gt; &amp;#61; Pt(&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;)\n        &lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.font&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.bold&lt;/span&gt; &amp;#61; True\n\nw &amp;#61; head&lt;span class=\"hljs-selector-class\"&gt;.paragraphs&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.add_run&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;公司&amp;#39;&lt;/span&gt;)\nw&lt;span class=\"hljs-selector-class\"&gt;.font&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.bold&lt;/span&gt; &amp;#61; True\nw&lt;span class=\"hljs-selector-class\"&gt;.font&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.size&lt;/span&gt; &amp;#61; Pt(&lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;)\n\ne &amp;#61; head&lt;span class=\"hljs-selector-class\"&gt;.paragraphs&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[1]&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.add_run&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;操作卡&amp;#39;&lt;/span&gt;)\ne&lt;span class=\"hljs-selector-class\"&gt;.font&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.bold&lt;/span&gt; &amp;#61; True\ne&lt;span class=\"hljs-selector-class\"&gt;.font&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.size&lt;/span&gt; &amp;#61; Pt(&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;)\n\nhead&lt;span class=\"hljs-selector-class\"&gt;.paragraphs&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.alignment&lt;/span&gt; &amp;#61; WD_PARAGRAPH_ALIGNMENT&lt;span class=\"hljs-selector-class\"&gt;.CENTER&lt;/span&gt;\nhead&lt;span class=\"hljs-selector-class\"&gt;.paragraphs&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[1]&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.alignment&lt;/span&gt; &amp;#61; WD_PARAGRAPH_ALIGNMENT&lt;span class=\"hljs-selector-class\"&gt;.CENTER&lt;/span&gt;\nhead&lt;span class=\"hljs-selector-class\"&gt;.paragraphs&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[2]&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.alignment&lt;/span&gt; &amp;#61; WD_PARAGRAPH_ALIGNMENT&lt;span class=\"hljs-selector-class\"&gt;.DISTRIBUTE&lt;/span&gt;\n\nfoot &amp;#61; document&lt;span class=\"hljs-selector-class\"&gt;.sections&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.footer&lt;/span&gt;\nk &amp;#61; foot&lt;span class=\"hljs-selector-class\"&gt;.paragraphs&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.add_run&lt;/span&gt;(wjbh)\nk&lt;span class=\"hljs-selector-class\"&gt;.font&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.size&lt;/span&gt; &amp;#61; Pt(&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;)\nfoot&lt;span class=\"hljs-selector-class\"&gt;.paragraphs&lt;/span&gt;&lt;span class=\"hljs-selector-attr\"&gt;[0]&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.alignment&lt;/span&gt; &amp;#61; WD_PARAGRAPH_ALIGNMENT&lt;span class=\"hljs-selector-class\"&gt;.RIGHT&lt;/span&gt;\ndocument&lt;span class=\"hljs-selector-class\"&gt;.save&lt;/span&gt;(lb &amp;#43; pm &amp;#43; gd &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &amp;#43; bz &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;.docx&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;def saveDoc():&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    excel &amp;#61; xlrd.open_workbook(filepath1)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    table &amp;#61; excel.sheet_by_index(0)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    nows &amp;#61; table.nrows&lt;/span&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(nows):\n    wjbh &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;table&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.cell&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)&lt;span class=\"hljs-selector-class\"&gt;.value&lt;/span&gt;\n    hh &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;table&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.cell&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;span class=\"hljs-selector-class\"&gt;.value&lt;/span&gt;\n    pm &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;table&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.cell&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)&lt;span class=\"hljs-selector-class\"&gt;.value&lt;/span&gt;\n    gd &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;table&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.cell&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)&lt;span class=\"hljs-selector-class\"&gt;.value&lt;/span&gt;\n    zw &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;table&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.cell&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;)&lt;span class=\"hljs-selector-class\"&gt;.value&lt;/span&gt;\n    zlbz &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;table&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.cell&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)&lt;span class=\"hljs-selector-class\"&gt;.value&lt;/span&gt;\n    lb &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;table&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.cell&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;)&lt;span class=\"hljs-selector-class\"&gt;.value&lt;/span&gt;\n    bz &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;table&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.cell&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;)&lt;span class=\"hljs-selector-class\"&gt;.value&lt;/span&gt;\n    bzgg &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;table&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.cell&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;)&lt;span class=\"hljs-selector-class\"&gt;.value&lt;/span&gt;\n    bzd &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;table&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.cell&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;)&lt;span class=\"hljs-selector-class\"&gt;.value&lt;/span&gt;\n    sl &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;table&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.cell&lt;/span&gt;(&lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)&lt;span class=\"hljs-selector-class\"&gt;.value&lt;/span&gt;\n\n    change_data(wjbh, hh, pm, gd, zw, zlbz, lb, bz, bzgg, bzd, sl)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1 id=\"h1_打开word文件&amp;#xff08;模板&amp;#xff09;_1644668317093\"&gt;打开word文件&amp;#xff08;模板&amp;#xff09;&lt;/h1&gt;\n&lt;p&gt;def selectdocx():&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    global filepath&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    filepath &amp;#61; filedialog.askopenfilename(filetypes&amp;#61;[(&amp;#39;docx&amp;#39;, &amp;#39;*.docx&amp;#39;)])&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    filename.set(filepath)&lt;/span&gt;&lt;/p&gt;\n&lt;h1 id=\"h1_打开excel文件&amp;#xff08;数据维护&amp;#xff09;_1644668317093\"&gt;打开excel文件&amp;#xff08;数据维护&amp;#xff09;&lt;/h1&gt;\n&lt;p&gt;def selectxls():&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    global filepath1&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    filepath1 &amp;#61; filedialog.askopenfilename(filetypes&amp;#61;[(&amp;#39;xls&amp;#39;, &amp;#39;*.xls&amp;#39;)])&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    filename1.set(filepath1)&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;filename &amp;#61; tk.StringVar()&lt;br /&gt;filename1 &amp;#61; tk.StringVar()&lt;/p&gt;\n&lt;h1 id=\"h1_按钮设置_1644668317093\"&gt;按钮设置&lt;/h1&gt;\n&lt;p&gt;tk.Label(root, text&amp;#61;&amp;#39;选择word文件(.docx)&amp;#39;).grid(&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    row&amp;#61;1, column&amp;#61;2, padx&amp;#61;5, pady&amp;#61;5, sticky&amp;#61;&amp;#34;w&amp;#34;)&lt;/span&gt;&lt;br /&gt;tk.Entry(root, textvariable&amp;#61;filename).grid(row&amp;#61;1, column&amp;#61;0, padx&amp;#61;5, pady&amp;#61;5)&lt;br /&gt;b1 &amp;#61; ttk.Button(root, text&amp;#61;&amp;#39;打开文件&amp;#39;, bootstyle&amp;#61;(INFO, OUTLINE),&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                command&amp;#61;selectdocx).grid(row&amp;#61;1, column&amp;#61;1, padx&amp;#61;5, pady&amp;#61;5)&lt;/span&gt;&lt;br /&gt;tk.Label(root, text&amp;#61;&amp;#39;选择excel文件(.xls) *注意文件格式&amp;#39;).grid(row&amp;#61;2,&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                                                    column&amp;#61;2, padx&amp;#61;5, pady&amp;#61;5, sticky&amp;#61;&amp;#34;w&amp;#34;)&lt;/span&gt;&lt;br /&gt;tk.Entry(root, textvariable&amp;#61;filename1).grid(row&amp;#61;2, column&amp;#61;0, padx&amp;#61;5, pady&amp;#61;5)&lt;br /&gt;b2 &amp;#61; ttk.Button(root, text&amp;#61;&amp;#39;打开文件&amp;#39;, bootstyle&amp;#61;(INFO, OUTLINE),&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                command&amp;#61;selectxls).grid(row&amp;#61;2, column&amp;#61;1, padx&amp;#61;5, pady&amp;#61;5)&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;&amp;#39;&amp;#39;&amp;#39;&lt;br /&gt;现状&amp;#xff1a;&lt;br /&gt;代码可正常运行&amp;#xff0c;但运行逻辑和按钮b3存在问题&amp;#xff1b;&lt;br /&gt;b3 无法command 到 change_data 这个主程序&amp;#xff0c;因此现在只能将 change_data 的代码放到 tkinter 代码的下方&amp;#xff1b;&lt;br /&gt;且让 b3 按钮暂时 command &amp;#34; root.quit &amp;#34;&amp;#xff0c;这样程序选择好文件路径后&amp;#xff0c;窗口消失&amp;#xff0c;再运行了主程序。&lt;br /&gt;&amp;#xff08;但这绝对是错误的逻辑&amp;#xff09;&lt;br /&gt;需求&amp;#xff1a;&lt;br /&gt;纠正逻辑&lt;br /&gt;将 change_data 主程序代码放到 tkinter 代码上方&amp;#xff0c;且b3 按钮正确 command 到 change_data &amp;#xff08;主程序&amp;#xff09;&lt;br /&gt;希望聪明善良的热心网友可以附上代码解决问题&amp;#xff01;&lt;br /&gt;PS&amp;#xff1a;若有闲情雅致&amp;#xff0c;优化一下我的主程序&amp;#xff0c;那是极好的&amp;#xff01;&lt;br /&gt;&amp;#39;&amp;#39;&amp;#39;&lt;br /&gt;b3 &amp;#61; ttk.Button(root, text&amp;#61;&amp;#39;开始运行&amp;#39;, bootstyle&amp;#61;(PRIMARY, OUTLINE),&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                command&amp;#61;saveDoc).grid(row&amp;#61;3, column&amp;#61;1, padx&amp;#61;5, pady&amp;#61;5)&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;root.mainloop()&lt;/p&gt;", "Konwledge_Point": "重复n次操作", "Question": ["Python tkinter 事件绑定问题", ["先来看下代码，需求注释在代码中；", "代码功能及运行步骤：", "     1.获取word文件路径（模板）。", "     2.获取excel文件路径（数据维护）。", "     3.用excel内的数据，批量添加、替换模板中的内容来生成文件，解决冗长重复性劳动。", "\n", "#库", "\n", "import", " xlrd\n", "import", " tkinter as tk\n", "import", " ttkbootstrap as ttk\nfrom docx ", "import", " *\nfrom tkinter ", "import", " *\nfrom tkinter ", "import", " filedialog\nfrom docx.shared ", "import", " Pt, Inches\nfrom docx.enum.text ", "import", " WD_PARAGRAPH_ALIGNMENT\nfrom ttkbootstrap ", "import", " Style\nfrom ttkbootstrap.constants ", "import", " *\n\n", "root", " = tk.Tk()\n\n", "#窗口设置（固定位置、大小、美化）", "\n", "sw", " = root.winfo_screenwidth()\n", "sh", " = root.winfo_screenheight()\n", "ww", " = ", "450", "\n", "wh", " = ", "280", "\n", "x", " = (sw-ww) / ", "2", "\n", "y", " = (sh-wh) / ", "2", "\nroot.geometry(", "\"%dx%d+%d+%d\"", " % (ww, wh, x, y))\nroot.title(", "\"批量制作岗位卡\"", ")\nroot.minsize(", "450", ", ", "280", ")\nroot.maxsize(", "450", ", ", "280", ")\n", "style", " = Style(", "theme='litera')", "\n", "window", " = style.master\n\n", "#打开word文件（模板）", "\ndef selectdocx():\n    global filepath\n    ", "filepath", " = filedialog.askopenfilename(", "filetypes=[('docx',", " '*.docx')])\n    filename.set(filepath)\n\n", "#打开excel文件（数据维护）", "\ndef selectxls():\n    global filepath1\n    ", "filepath1", " = filedialog.askopenfilename(", "filetypes=[('xls',", " '*.xls')])\n    filename1.set(filepath1)\n\n", "filename", " = tk.StringVar()\n", "filename1", " = tk.StringVar()\n\n", "#按钮设置", "\ntk.Label(root, ", "text='选择word文件(.docx)').grid(", "\n    ", "row=1,", " ", "column=2,", " ", "padx=5,", " ", "pady=5,", " ", "sticky=\"w\")", "\ntk.Entry(root, ", "textvariable=filename).grid(row=1,", " ", "column=0,", " ", "padx=5,", " ", "pady=5)", "\n", "b1", " = ttk.Button(root, ", "text='打开文件',", " ", "bootstyle=(INFO,", " OUTLINE),\n                ", "command=selectdocx).grid(row=1,", " ", "column=1,", " ", "padx=5,", " ", "pady=5)", "\ntk.Label(root, ", "text='选择excel文件(.xls)", " *注意文件格式').grid(", "row=2,", "\n                                                    ", "column=2,", " ", "padx=5,", " ", "pady=5,", " ", "sticky=\"w\")", "\ntk.Entry(root, ", "textvariable=filename1).grid(row=2,", " ", "column=0,", " ", "padx=5,", " ", "pady=5)", "\n", "b2", " = ttk.Button(root, ", "text='打开文件',", " ", "bootstyle=(INFO,", " OUTLINE),\n                ", "command=selectxls).grid(row=2,", " ", "column=1,", " ", "padx=5,", " ", "pady=5)", "\n\n", "'''\n现状：\n代码可正常运行，但运行逻辑和按钮b3存在问题；\nb3 无法command 到 change_data 这个主程序，因此现在只能将 change_data 的代码放到 tkinter 代码的下方；\n且让 b3 按钮暂时 command \" root.quit \"，这样程序选择好文件路径后，窗口消失，再运行了主程序。\n（但这绝对是错误的逻辑）\n\n需求：\n纠正逻辑\n将 change_data 主程序代码放到 tkinter 代码上方，且b3 按钮正确 command 到 change_data （主程序）\n\n希望聪明善良的热心网友可以附上代码解决问题！\n\nPS：若有闲情雅致，优化一下我的主程序，那是极好的！\n''", "'\n", "b3", " = ttk.Button(root, ", "text='开始运行',", " ", "bootstyle=(PRIMARY,", " OUTLINE),\n                ", "command=root.quit).grid(row=3,", " ", "column=1,", " ", "padx=5,", " ", "pady=5)", "\n\nroot.mainloop()\n\n\n", "#主程序：", "\ndef change_data(wjbh, hh, pm, gd, zw, zlbz, lb, bz, bzgg, bzd, sl):\n    ", "bz", " = str(bz)\n    ", "lb", " = str(lb)\n    ", "bzgg", " = str(bzgg)\n    ", "bzd", " = str(bzd)\n    ", "sl", " = str(sl)\n    ", "pm", " = str(pm)\n\n    ", "document", " = Document(filepath)\n    for i ", "in", " document.paragraphs:\n        i.", "text", " = i.text.replace('***', gd)\n        i.", "text", " = i.text.replace('&&&', zw)\n        i.", "text", " = i.text.replace('￥￥￥', zlbz)\n        i.", "text", " = i.text.replace('", "#', bz)", "\n        i.", "text", " = i.text.replace('&-&-&', bzgg)\n        i.", "text", " = i.text.replace('*-*-*', bzd)\n        i.", "text", " = i.text.replace('￥-￥-￥', sl)\n\n        i.paragraph_format.", "line_spacing", " = ", "1.25", "\n        i.paragraph_format.", "left_indent", " = Inches(", "0.15", ")\n\n        ", "head", " = document.sections[", "0", "].header\n        for b ", "in", " head.paragraphs:\n            b.", "text", " = b.text.replace('@', pm)\n            b.", "text", " = b.text.replace('=', hh)\n        for q ", "in", " b.runs:\n            q.font.", "size", " = Pt(", "12", ")\n            q.font.", "bold", " = True\n\n    ", "w", " = head.paragraphs[", "0", "].add_run('公司')\n    w.font.", "bold", " = True\n    w.font.", "size", " = Pt(", "14", ")\n\n    ", "e", " = head.paragraphs[", "1", "].add_run('操作卡')\n    e.font.", "bold", " = True\n    e.font.", "size", " = Pt(", "22", ")\n\n    head.paragraphs[", "0", "].", "alignment", " = WD_PARAGRAPH_ALIGNMENT.CENTER\n    head.paragraphs[", "1", "].", "alignment", " = WD_PARAGRAPH_ALIGNMENT.CENTER\n    head.paragraphs[", "2", "].", "alignment", " = WD_PARAGRAPH_ALIGNMENT.DISTRIBUTE\n\n    ", "foot", " = document.sections[", "0", "].footer\n    ", "k", " = foot.paragraphs[", "0", "].add_run(wjbh)\n    k.font.", "size", " = Pt(", "8", ")\n    foot.paragraphs[", "0", "].", "alignment", " = WD_PARAGRAPH_ALIGNMENT.RIGHT\n    document.save(lb + pm + gd + '", "#' + bz + '.docx')", "\n\n\n", "excel", " = xlrd.open_workbook(filepath1)\n", "table", " = excel.sheet_by_index(", "0", ")\n", "nows", " = table.nrows\n\nfor i ", "in", " range(nows):\n    ", "wjbh", " = table.cell(i, ", "0", ").value\n    ", "hh", " = table.cell(i, ", "1", ").value\n    ", "pm", " = table.cell(i, ", "2", ").value\n    ", "gd", " = table.cell(i, ", "3", ").value\n    ", "zw", " = table.cell(i, ", "4", ").value\n    ", "zlbz", " = table.cell(i, ", "5", ").value\n    ", "lb", " = table.cell(i, ", "6", ").value\n    ", "bz", " = table.cell(i, ", "7", ").value\n    ", "bzgg", " = table.cell(i, ", "8", ").value\n    ", "bzd", " = table.cell(i, ", "9", ").value\n    ", "sl", " = table.cell(i, ", "10", ").value\n\n    change_data(wjbh, hh, pm, gd, zw, zlbz, lb, bz, bzgg, bzd, sl)\n\n"]], "Tag": "程序设计"}
{"Answer": "模板方法时一种模式，属于静态表现对象的结构关系。其中的抽象模板方法是构成一个整体行为中的一部分，这部分的行为抽象已经确定，而只是将具体的实现延迟到子类完成。\n     回调不算是模式，它更多地是处理对象间的相互调用关系。回调一般是行为已经确定，而不确定调用者时常用。回调也就是把具体的行为传递给调用者。因为模板和回调都是将实际的对象调用关系延迟，所以会让人有一种错觉。其实很多时候，回调是用在事件处理、消息通知等，比如我们都知道的钩子程序。从这个角度说，回调是与观察器模式相似的，或者应该说回调是观察器模式的主要构成。\n      在spring 的jdbctempate中确实用了回调，但是，它其实是一种变异的模板方法模式，只是因为用了无名内部类，所以让人忽略了对于callback中模板方法的实现而已。而所谓的回调其实只是通过一个统一的方法将模板实现类注入而已，将callback中模板方法所在的整体行为从callback中抽取到独立的template中了。\n      不知道是否说得够清楚了，不过spring这个设计是一个蛮经典的设计。唯一的缺点就是随着方法调用的增多会导致JVM的OldGen中，匿名class对象会增多，每次full GC都会导致class unloading的情况。", "Konwledge_Point": "重复n次操作", "Question": ["模板方法和回调方法的困惑", ["我对他们的理解：", "先看一个例子：", "引用", "jdbcTemplate.update（）的源码", "1. public int update(final String sql) throws DataAccessException {   ", "2.       Assert.notNull(sql, \"SQL must not be null\");   ", "3.        if (logger.isDebugEnabled()) {   ", "4.          logger.debug(\"Executing SQL update [\" + sql + \"]\");   ", "5.     }   ", "6.     ", "7.     class UpdateStatementCallback implements StatementCallback, SqlProvider {   ", "8.           public Object doInStatement(Statement stmt) throws SQLException {   ", "9.              int rows = stmt.executeUpdate(sql);   ", "10.                if (logger.isDebugEnabled()) {   ", "11.                 logger.debug(\"SQL update affected \" + rows + \" rows\");   ", "12.             }   ", "13.              return new Integer(rows);   ", "14.          }   ", "15.          public String getSql() {   ", "16.               return sql;   ", "17.            }   ", "18.      }   ", "19.      return ((Integer) <SPAN style=\"COLOR: #888888\">execute</SPAN>(new UpdateStatementCallback())).intValue();   ", "20.  } ", "1.    public Object execute(StatementCallback action) throws DataAccessException {   ", "2.       Assert.notNull(action, \"Callback object must not be null\");   ", "3.   ", "4.     Connection con = DataSourceUtils.getConnection(getDataSource());   ", "5.        Statement stmt = null;   ", "6.      try {   ", "7.           Connection conToUse = con;   ", "8.          if (this.nativeJdbcExtractor != null &&   ", "9.                 this.nativeJdbcExtractor.isNativeConnectionNecessaryForNativeStatements()) {   ", "10.               conToUse = this.nativeJdbcExtractor.getNativeConnection(con);   ", "11.          }   ", "12.          stmt = conToUse.createStatement();   ", "13.         applyStatementSettings(stmt);   ", "14.          Statement stmtToUse = stmt;   ", "15.            if (this.nativeJdbcExtractor != null) {   ", "16.                stmtToUse = this.nativeJdbcExtractor.getNativeStatement(stmt);   ", "17.         }   ", "18.          Object result = <SPAN style=\"COLOR: #000000\">action.doInStatement(stmtToUse);</SPAN>   ", "19.           handleWarnings(stmt.getWarnings());   ", "20.            return result;   ", "21.     }   ", "22.      catch (SQLException ex) {   ", "23.          // Release Connection early, to avoid potential connection pool deadlock   ", "24.           // in the case when the exception translator hasn't been initialized yet.   ", "25.          JdbcUtils.closeStatement(stmt);   ", "26.            stmt = null;   ", "27.           DataSourceUtils.releaseConnection(con, getDataSource());   ", "28.           con = null;   ", "29.            throw getExceptionTranslator().translate(\"StatementCallback\", getSql(action), ex);   ", "30.     }   ", "31.      finally {   ", "32.          JdbcUtils.closeStatement(stmt);   ", "33.            DataSourceUtils.releaseConnection(con, getDataSource());   ", "34.       }   ", "35.  }  ", "eg:A回调方法。B模板方法", "怎样才能把B中的动态代码写成固定的啊？？？？？", "我们可以采用多态的方法，上面的代码就是采用多态的方法，", "回调的方法是多态的(这样我们就可以写不同的代码了)", "刚开时时，我认为模块和回调是为了代码的复用.我们可以把重复的代码写在模板中，把变化的写在回调方法中，", "现在感觉模块和回调确实可以复用代码，但这不是他存在的主要原因。", "谁能说说他主要的用途", "貌似一切皆在他的名字中 模板（可以理解为相同的流程）", "我们可以吧流程中不同的内容提取出来，", "                       回调：貌似可以‘动态’的加入代码", "希望高手来交流", "问题补充", "unsid 写道", "另外,区别是回调还是模板方法,还有一个很重要的依据,你所变化的类是不是具有\"一次性特征\",思考一下comparable接口,为什么不设计在list之上?因为list里的元素排序方式单一性一次性,比如这次按价格排序只代表这次,下次按出厂日期排序.而你的例子里,适合用模板方法,因为你的实现类相对稳定,总共不会有太多种类的操作.其实回调就是\"访问者\"模式最简单的实现.", "不明白，模板和回调是一起使用的吧？？？", "我在模板方法中去回调。", "你说的貌似他们是分开的，可以单独存在，", "问题补充", "凤舞凰扬 写道", "     模板方法时一种模式，属于静态表现对象的结构关系。其中的抽象模板方法是构成一个整体行为中的一部分，这部分的行为抽象已经确定，而只是将具体的实现延迟到子类完成。", "     回调不算是模式，它更多地是处理对象间的相互调用关系。回调一般是行为已经确定，而不确定调用者时常用。回调也就是把具体的行为传递给调用者。因为模板和回调都是将实际的对象调用关系延迟，所以会让人有一种错觉。其实很多时候，回调是用在事件处理、消息通知等，比如我们都知道的钩子程序。从这个角度说，回调是与观察器模式相似的，或者应该说回调是观察器模式的主要构成。", "      在spring 的jdbctempate中确实用了回调，但是，它其实是一种变异的模板方法模式，只是因为用了无名内部类，所以让人忽略了对于callback中模板方法的实现而已。而所谓的回调其实只是通过一个统一的方法将模板实现类注入而已，将callback中模板方法所在的整体行为从callback中抽取到独立的template中了。", "      不知道是否说得够清楚了，不过spring这个设计是一个蛮经典的设计。唯一的缺点就是随着方法调用的增多会导致JVM的OldGen中，匿名class对象会增多，每次full GC都会导致class unloading的情况。", "感觉你说的和我理解的相差好大，我在好好看看，设计模式", "问题补充", "凤舞凰扬 写道", "     模板方法时一种模式，属于静态表现对象的结构关系。其中的抽象模板方法是构成一个整体行为中的一部分，这部分的行为抽象已经确定，而只是将具体的实现延迟到子类完成。", "     回调不算是模式，它更多地是处理对象间的相互调用关系。回调一般是行为已经确定，而不确定调用者时常用。回调也就是把具体的行为传递给调用者。因为模板和回调都是将实际的对象调用关系延迟，所以会让人有一种错觉。其实很多时候，回调是用在事件处理、消息通知等，比如我们都知道的钩子程序。从这个角度说，回调是与观察器模式相似的，或者应该说回调是观察器模式的主要构成。", "      在spring 的jdbctempate中确实用了回调，但是，它其实是一种变异的模板方法模式，只是因为用了无名内部类，所以让人忽略了对于callback中模板方法的实现而已。而所谓的回调其实只是通过一个统一的方法将模板实现类注入而已，将callback中模板方法所在的整体行为从callback中抽取到独立的template中了。", "      不知道是否说得够清楚了，不过spring这个设计是一个蛮经典的设计。唯一的缺点就是随着方法调用的增多会导致JVM的OldGen中，匿名class对象会增多，每次full GC都会导致class unloading的情况。", "unsid 写道", "实现功能差不多,回调简洁一些,因为模板方法要为每个类型生成一个最终实现类,回调类可以用无名内隐类来代替.另外使用回调的话可以放心地把主类声明为final而避免因子类复写了不该复写的方法而导致的错误.用回调还是模版方法,我觉得看情况吧,如果动态的方法中要用到好多类的变量,那么回调函数要有一个很长的参数表,非常不好理解,如果回调函数要实现多于一个的方法,那么无法用内隐类,也没有简洁性了,总之在设计过程中,能不用继承就不用.", "你们两个是正确的。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;比起修改&amp;#xff0c;我甚至更愿意重写一个。&lt;br /&gt;下面是我重写的代码&amp;#xff0c;那个统计函数还没有写&amp;#xff0c;等明天吧。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;malloc.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;*membername[] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;学号&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;姓名&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;时间&amp;#34;&lt;/span&gt;};\n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *menu &amp;#61;    &lt;span class=\"hljs-string\"&gt;&amp;#34;**************************大学学生考勤签到系统**********\\n&amp;#34;&lt;/span&gt;\n                    &lt;span class=\"hljs-string\"&gt;&amp;#34;*--&amp;gt;               请输入数字实现功能                  *\\n&amp;#34;&lt;/span&gt;\n                    &lt;span class=\"hljs-string\"&gt;&amp;#34;*--&amp;gt;              1 新增学生信息数据                   *\\n&amp;#34;&lt;/span&gt;\n                    &lt;span class=\"hljs-string\"&gt;&amp;#34;*--&amp;gt;                  2 查找数据                       *\\n&amp;#34;&lt;/span&gt;\n                    &lt;span class=\"hljs-string\"&gt;&amp;#34;*--&amp;gt;               3 修改学生记录                      *\\n&amp;#34;&lt;/span&gt;\n                    &lt;span class=\"hljs-string\"&gt;&amp;#34;*--&amp;gt;               4 删除学生记录                      *\\n&amp;#34;&lt;/span&gt;\n                    &lt;span class=\"hljs-string\"&gt;&amp;#34;*--&amp;gt;             5 显示学生考勤数据列表                *\\n&amp;#34;&lt;/span&gt;\n                    &lt;span class=\"hljs-string\"&gt;&amp;#34;*--&amp;gt;                    6 排序                         *\\n&amp;#34;&lt;/span&gt;\n                    &lt;span class=\"hljs-string\"&gt;&amp;#34;*--&amp;gt;                  7 数据统计                       *\\n&amp;#34;&lt;/span&gt;\n                    &lt;span class=\"hljs-string\"&gt;&amp;#34;*--&amp;gt;                    8 保存                         *\\n&amp;#34;&lt;/span&gt;\n                    &lt;span class=\"hljs-string\"&gt;&amp;#34;*--&amp;gt;                    9 退出                         *\\n&amp;#34;&lt;/span&gt;\n                    &lt;span class=\"hljs-string\"&gt;&amp;#34;*******************要老实上课嗷~************************\\n&amp;#34;&lt;/span&gt;\n                    &lt;span class=\"hljs-string\"&gt;&amp;#34;请在此输入你想要进行操作前的数字&amp;#xff1a;&amp;#34;&lt;/span&gt;;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;template&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-keyword\"&gt;typename&lt;/span&gt; listname&amp;gt;\nlistname* &lt;span class=\"hljs-title\"&gt;next_n&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(listname*p, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;{&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//相当于数组的p[n]&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p &amp;amp;&amp;amp; n--) {\n        p &amp;#61; p-&amp;gt;next;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; p;\n}\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;//将计日起点定为1970年1月1日&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; ORIGIN_YEAR 1600&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; OFFSET_DAYS 135141&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; int_64 long long int&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; myio {\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fgetint&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(FILE*fp, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &amp;amp;num)&lt;/span&gt; &lt;/span&gt;{&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//会多吃右端一个字符&amp;#xff0c;建议用空格、回车等分隔&lt;/span&gt;\n        num &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (c &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fgetc&lt;/span&gt;(fp), c !&amp;#61; EOF &amp;amp;&amp;amp; (c &amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; || c &amp;gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;));\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c &amp;#61;&amp;#61; EOF)&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n            num *&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n            num &amp;#43;&amp;#61; c - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n            c &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fgetc&lt;/span&gt;(fp);\n        } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (c &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;MyTime&lt;/span&gt; {\n        int_64 seconds;\n        &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; timemaxlength &amp;#61; &lt;span class=\"hljs-number\"&gt;64&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; MyTimestr[timemaxlength];\n        &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; days, Year, Month, Day, Hour, Minute, Second;\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;MyTime&lt;/span&gt;() {}\n        ~&lt;span class=\"hljs-built_in\"&gt;MyTime&lt;/span&gt;() {};\n        &lt;span class=\"hljs-built_in\"&gt;MyTime&lt;/span&gt;(int_64 seconds);\n        &lt;span class=\"hljs-built_in\"&gt;MyTime&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; days, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; seconds);\n        &lt;span class=\"hljs-built_in\"&gt;MyTime&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; year, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; month, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; day, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; hour, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; minute, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; second);\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;settime&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; year, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; month, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; day, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; hour &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; minute &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; second &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;gettime&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*year, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*month, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*day, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*hour, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*minute, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*second)&lt;/span&gt;&lt;/span&gt;;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;getdays&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n        &lt;span class=\"hljs-function\"&gt;int_64 &lt;span class=\"hljs-title\"&gt;getseconds&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;output&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(FILE *fp&amp;#61;stdout, &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *format &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;%d年%d月%d日%d时%d分%d秒&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;input&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(FILE *fp&amp;#61;stdin, &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *format &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//无格式&amp;#xff0c;强制输入六个数字&amp;#xff0c;跳过一切非数字&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//加减&lt;/span&gt;\n        MyTime &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#43; (int_64 seconds);\n        MyTime &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; - (int_64 seconds);\n        int_64 &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; - (MyTime&amp;amp;MyTime);\n        &lt;span class=\"hljs-comment\"&gt;//自增自减&lt;/span&gt;\n        MyTime&amp;amp; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#43;&amp;#43;();&lt;span class=\"hljs-comment\"&gt;//前置&lt;/span&gt;\n        MyTime &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#43;&amp;#43;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//后置&lt;/span&gt;\n        MyTime&amp;amp; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; --();&lt;span class=\"hljs-comment\"&gt;//前置&lt;/span&gt;\n        MyTime &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; --(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//后置&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//赋值&lt;/span&gt;\n        MyTime&amp;amp; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#61; (int_64 seconds);\n        MyTime&amp;amp; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#61; (MyTime&amp;amp;time);\n        MyTime&amp;amp; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#43;&amp;#61; (int_64 seconds);\n        MyTime&amp;amp; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; -&amp;#61; (int_64 seconds);\n        &lt;span class=\"hljs-comment\"&gt;//比较&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;lt; (MyTime&amp;amp;time);\n        &lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;gt; (MyTime&amp;amp;time);\n        &lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#61;&amp;#61;(MyTime&amp;amp;time);\n        &lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;lt;&amp;#61;(MyTime&amp;amp;time);\n        &lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;gt;&amp;#61;(MyTime&amp;amp;time);\n};\n\n&lt;span class=\"hljs-comment\"&gt;//两个升序链表合并&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;template&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-keyword\"&gt;typename&lt;/span&gt; listname&amp;gt;\n&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;lmerge&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(listname *&amp;amp;h, listname *&amp;amp;t, listname *h1, listname *e1, listname *h2, listname *e2, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; (*cmp)(listname*, listname*))&lt;/span&gt; &lt;/span&gt;{\n    listname h3, *p, *q;\n    t &amp;#61; &amp;amp;h3;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (p &amp;#61; h1, q &amp;#61; h2; p !&amp;#61; e1 &amp;amp;&amp;amp; q !&amp;#61; e2;) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;cmp&lt;/span&gt;(p, q) &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            t-&amp;gt;next &amp;#61; p, t &amp;#61; p, p &amp;#61; p-&amp;gt;next;\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            t-&amp;gt;next &amp;#61; q, t &amp;#61; q, q &amp;#61; q-&amp;gt;next;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; e1) t-&amp;gt;next &amp;#61; p, t &amp;#61; p, p &amp;#61; p-&amp;gt;next;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (q !&amp;#61; e2) t-&amp;gt;next &amp;#61; q, t &amp;#61; q, q &amp;#61; q-&amp;gt;next;\n    t-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    h &amp;#61; h3.next;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//链表归并排序&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;template&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-keyword\"&gt;typename&lt;/span&gt; listname&amp;gt;\n&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;lmergesort&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(listname **head, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; (*cmp)(listname*, listname*))&lt;/span&gt; &lt;/span&gt;{\n    listname *t, *l, *m, *r, hh;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; w;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (w &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-built_in\"&gt;next_n&lt;/span&gt;(*head, w); w &amp;lt;&amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        t &amp;#61; &amp;amp;hh;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (l &amp;#61; *head; l; l &amp;#61; r) {\n            m &amp;#61; &lt;span class=\"hljs-built_in\"&gt;next_n&lt;/span&gt;(l, w);\n            r &amp;#61; &lt;span class=\"hljs-built_in\"&gt;next_n&lt;/span&gt;(m, w);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!m)\n                &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (l)t-&amp;gt;next &amp;#61; l, t &amp;#61; l, l &amp;#61; l-&amp;gt;next;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                &lt;span class=\"hljs-built_in\"&gt;lmerge&lt;/span&gt;(t-&amp;gt;next, t, l, m, m, r, cmp);\n        }\n        *head &amp;#61; hh.next;\n        &lt;span class=\"hljs-comment\"&gt;//t-&amp;gt;next &amp;#61; NULL;&lt;/span&gt;\n    }\n}\n\n&lt;span class=\"hljs-comment\"&gt;//链表查找&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;template&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-keyword\"&gt;typename&lt;/span&gt; listname&amp;gt;\nlistname* &lt;span class=\"hljs-title\"&gt;search&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(listname *head, listname*tail, listname* p, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; (*cmp)(listname*, listname*))&lt;/span&gt; &lt;/span&gt;{\n    listname *q &amp;#61; head;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (q !&amp;#61; tail) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;cmp&lt;/span&gt;(p, q) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        q &amp;#61; q-&amp;gt;next;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; q;\n}\n\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Node&lt;/span&gt; {\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; xuehao[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//学号&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; name[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//姓名&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; banji[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//班级&lt;/span&gt;\n    MyTime time;&lt;span class=\"hljs-comment\"&gt;//日期&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; daoke;&lt;span class=\"hljs-comment\"&gt;//到课情况&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Node&lt;/span&gt;* next;\n} node;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;compare_byxuehao&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node*p, node*q)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(p-&amp;gt;xuehao, q-&amp;gt;xuehao);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;compare_byname&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node*p, node*q)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(p-&amp;gt;name, q-&amp;gt;name);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;compare_bybanji&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node*p, node*q)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(p-&amp;gt;banji, q-&amp;gt;banji);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;compare_bytime&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node*p, node*q)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; p-&amp;gt;time - q-&amp;gt;time;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;compare_bydaoke&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node*p, node*q)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; p-&amp;gt;daoke - q-&amp;gt;daoke;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;allsame&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node *p, node *q)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;compare_byxuehao&lt;/span&gt;(p, q) || &lt;span class=\"hljs-built_in\"&gt;compare_byname&lt;/span&gt;(p, q) || &lt;span class=\"hljs-built_in\"&gt;compare_bytime&lt;/span&gt;(p, q);\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; (*stu_cmp[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;])(node*, node*) &amp;#61; {allsame, compare_byxuehao, compare_byname, compare_bytime, compare_bybanji, compare_bydaoke};\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;read&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;search&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;add&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;output&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node*p, FILE*fp &amp;#61; stdout)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;modify&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;del&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;show&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L, FILE*fp &amp;#61; stdout)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;paixv&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;tongji&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;save&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;erase&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    node stude;\n    &lt;span class=\"hljs-built_in\"&gt;read&lt;/span&gt;(&amp;amp;stude);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n        &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(menu);\n        &lt;span class=\"hljs-built_in\"&gt;fflush&lt;/span&gt;(stdin);\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (n) {\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n                &lt;span class=\"hljs-built_in\"&gt;add&lt;/span&gt;(&amp;amp;stude);\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n                &lt;span class=\"hljs-built_in\"&gt;search&lt;/span&gt;(&amp;amp;stude);\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n                &lt;span class=\"hljs-built_in\"&gt;modify&lt;/span&gt;(&amp;amp;stude);\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:\n                &lt;span class=\"hljs-built_in\"&gt;del&lt;/span&gt;(&amp;amp;stude);\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:\n                &lt;span class=\"hljs-built_in\"&gt;show&lt;/span&gt;(&amp;amp;stude);\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;:\n                &lt;span class=\"hljs-built_in\"&gt;paixv&lt;/span&gt;(&amp;amp;stude);\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;:\n                &lt;span class=\"hljs-comment\"&gt;//tongji(&amp;amp;stude);&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;:\n                &lt;span class=\"hljs-built_in\"&gt;save&lt;/span&gt;(&amp;amp;stude);\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;:\n                &lt;span class=\"hljs-built_in\"&gt;erase&lt;/span&gt;(&amp;amp;stude);\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;感谢使用本系统&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;:\n                &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入正确的操作数&amp;#xff01;&amp;#xff01;&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入按下回车返回主菜单&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;fflush&lt;/span&gt;(stdin);\n        &lt;span class=\"hljs-built_in\"&gt;getchar&lt;/span&gt;();\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;read&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node*L)&lt;/span&gt; &lt;/span&gt;{\n    node* t &amp;#61; L;\n    FILE* FP;\n    FP &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;data.txt&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (FP &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;This file don&amp;#39;t exist!&amp;#34;&lt;/span&gt;);\n        L-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//退出函数&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (!&lt;span class=\"hljs-built_in\"&gt;feof&lt;/span&gt;(FP)) {\n        t-&amp;gt;next &amp;#61; (node*)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(node));&lt;span class=\"hljs-comment\"&gt;//创建节点中转信息&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;fscanf&lt;/span&gt;(FP, &lt;span class=\"hljs-string\"&gt;&amp;#34;%s%s%s&amp;#34;&lt;/span&gt;, t-&amp;gt;next-&amp;gt;xuehao, t-&amp;gt;next-&amp;gt;name, t-&amp;gt;next-&amp;gt;banji)&amp;lt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;){\n            &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(t-&amp;gt;next);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        t-&amp;gt;next-&amp;gt;time.&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(FP);\n        &lt;span class=\"hljs-built_in\"&gt;fscanf&lt;/span&gt;(FP, &lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;t-&amp;gt;next-&amp;gt;daoke);\n        &lt;span class=\"hljs-comment\"&gt;//如果需要&amp;#xff0c;在这里可以用条件判断是否free掉&lt;/span&gt;\n        t &amp;#61; t-&amp;gt;next;\n    }\n    t-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;fclose&lt;/span&gt;(FP);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;add&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node*l)&lt;/span&gt; &lt;/span&gt;{\n    node*t &amp;#61; l, *p;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (t-&amp;gt;next)t &amp;#61; t-&amp;gt;next;\n    t-&amp;gt;next &amp;#61; (node*)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(node));\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入你想新增信息的学生学号:&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, t-&amp;gt;next-&amp;gt;xuehao);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入你想新增信息的学生姓名&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, t-&amp;gt;next-&amp;gt;name);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入到课时间(格式示例: 2001/1/1, 00:00:00)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    t-&amp;gt;next-&amp;gt;time.&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(stdin);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入学生班级&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, t-&amp;gt;next-&amp;gt;banji);\n    p &amp;#61; l;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p &amp;#61; &lt;span class=\"hljs-built_in\"&gt;search&lt;/span&gt;(p-&amp;gt;next, t-&amp;gt;next, t-&amp;gt;next, compare_byxuehao), p !&amp;#61; t-&amp;gt;next) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (p-&amp;gt;time &amp;#61;&amp;#61; t-&amp;gt;next-&amp;gt;time) {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;该学生在该时间的考勤信息已存在&amp;#xff01;&amp;#xff01;&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(t-&amp;gt;next);\n            t-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n        }\n    }\n    t &amp;#61; t-&amp;gt;next;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;注意1为到课  2为旷课  3为事假  4为病假  5为迟到  6为早退\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入该时间的到课情况&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;t-&amp;gt;daoke);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;添加成功&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n    t-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;output&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node*p, FILE*fp)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (fp &amp;#61;&amp;#61; stdout)&lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;学号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;%s  &amp;#34;&lt;/span&gt;, p-&amp;gt;xuehao);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (fp &amp;#61;&amp;#61; stdout)&lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;姓名&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;%s  &amp;#34;&lt;/span&gt;, p-&amp;gt;name);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (fp &amp;#61;&amp;#61; stdout)&lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;班级&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;%s  &amp;#34;&lt;/span&gt;, p-&amp;gt;banji);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (fp &amp;#61;&amp;#61; stdout)&lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;时间&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    p-&amp;gt;time.&lt;span class=\"hljs-built_in\"&gt;output&lt;/span&gt;(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;%04d/%02d/%02d, %02d:%02d:%02d &amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (fp &amp;#61;&amp;#61; stdout)&lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;到课状态&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, p-&amp;gt;daoke);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;search&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt; &lt;/span&gt;{\n    node p, *q;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入1按学号查询&amp;#xff0c;输入2按姓名查询&amp;#xff0c;输入3按考勤时间查询:&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; flag;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;flag);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (flag &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; flag &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; flag2 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入%s&amp;#xff1a;&amp;#34;&lt;/span&gt;, membername[flag - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, p.xuehao);\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, p.name);\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; p.time.&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(stdin);\n        q &amp;#61; L;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (q &amp;#61; &lt;span class=\"hljs-built_in\"&gt;search&lt;/span&gt;(q-&amp;gt;next, (node*)&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;, &amp;amp;p, stu_cmp[flag]), q) {\n            flag2 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            &lt;span class=\"hljs-built_in\"&gt;output&lt;/span&gt;(q);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (flag2) {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s不存在&amp;#xff01;\\n&amp;#34;&lt;/span&gt;, membername[flag - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n        }\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;modify&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt; &lt;/span&gt;{\n    node p, *q;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入你想要修改的学生学号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, p.xuehao);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入你想修改学生记录的具体时间(格式示例: 2001/1/1, 00:00:00)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    p.time.&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(stdin);\n    q &amp;#61; L;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (q &amp;#61; &lt;span class=\"hljs-built_in\"&gt;search&lt;/span&gt;(q-&amp;gt;next, (node*)&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;, &amp;amp;p, compare_byxuehao), q) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (q-&amp;gt;time &amp;#61;&amp;#61; p.time) {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;注意1为到课  2为旷课  3为事假  4为病假  5为迟到  6为早退\\n&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入学生到课情况&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;q-&amp;gt;daoke);\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;修改成功&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;无该日学生信息!&amp;#34;&lt;/span&gt;);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;del&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt; &lt;/span&gt;{\n    node p, *q;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (L-&amp;gt;next &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;无考勤信息&amp;#xff0c;请先添加&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入你想要删除的学生记录的学生学号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, p.xuehao);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入你想要删除的学生记录的具体时间(格式示例: 2001/1/1, 00:00:00)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    p.time.&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(stdin);\n    q &amp;#61; L;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (q &amp;#61; L; q-&amp;gt;next; q &amp;#61; q-&amp;gt;next) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (q-&amp;gt;next-&amp;gt;time &amp;#61;&amp;#61; p.time &amp;amp;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(q-&amp;gt;next-&amp;gt;xuehao, p.xuehao)&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            p.next &amp;#61; q-&amp;gt;next;\n            q-&amp;gt;next &amp;#61; q-&amp;gt;next-&amp;gt;next;\n            &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(p.next);\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;删除成功\\n&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;该学生记录不存在&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;show&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node *L, FILE*fp)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (L-&amp;gt;next &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;无学生信息&amp;#xff0c;请先添加\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (fp &amp;#61;&amp;#61; stdout)&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;注意1为到课  2为旷课  3为事假  4为病假  5为迟到  6为早退\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (L &amp;#61; L-&amp;gt;next; L; L &amp;#61; L-&amp;gt;next) {\n        &lt;span class=\"hljs-built_in\"&gt;output&lt;/span&gt;(L, fp);\n        &lt;span class=\"hljs-built_in\"&gt;fputc&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;, fp);\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;paixv&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (L-&amp;gt;next &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;库中无数据&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入1按学号排序&amp;#xff0c;输入2按姓名排序&amp;#xff0c;输入3按日期排序&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; flag;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;flag);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (flag &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; flag &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;lmergesort&lt;/span&gt;(&amp;amp;L-&amp;gt;next, stu_cmp[flag]);\n        &lt;span class=\"hljs-built_in\"&gt;show&lt;/span&gt;(L);\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;save&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt; &lt;/span&gt;{\n    FILE* fp;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((fp &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;data.txt&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;)) &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;无法打开文件\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;exit&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;show&lt;/span&gt;(L, fp);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;保存成功&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;fclose&lt;/span&gt;(fp);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;erase&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(node* L)&lt;/span&gt; &lt;/span&gt;{\n    node*p;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (L &amp;#61; L-&amp;gt;next; L; L &amp;#61; p) {\n        p &amp;#61; L-&amp;gt;next;\n        &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(L);\n    }\n}\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; MyTime::days, MyTime::Year, MyTime::Month, MyTime::Day, MyTime::Hour, MyTime::Minute, MyTime::Second;\n\nMyTime::&lt;span class=\"hljs-built_in\"&gt;MyTime&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; s) {\n    seconds &amp;#61; s;\n}\n\nMyTime::&lt;span class=\"hljs-built_in\"&gt;MyTime&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; d, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; s) {\n    seconds &amp;#61; (int_64)d * &lt;span class=\"hljs-number\"&gt;86400&lt;/span&gt; &amp;#43; s;\n}\n\nMyTime::&lt;span class=\"hljs-built_in\"&gt;MyTime&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; y, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; mon, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; d, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; h, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; min, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; s) {\n    &lt;span class=\"hljs-built_in\"&gt;settime&lt;/span&gt;(y, mon, d, h, min, s);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;MyTime::settime&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; year, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; month, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; day, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; hour, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; minute, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; second)&lt;/span&gt; &lt;/span&gt;{\n    year -&amp;#61; ORIGIN_YEAR;\n    seconds &amp;#61;\n        month &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; ? (\n            (year - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) * &lt;span class=\"hljs-number\"&gt;365&lt;/span&gt; &amp;#43; (year - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) / &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; - (year - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) / &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; &amp;#43; (year - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) / &lt;span class=\"hljs-number\"&gt;400&lt;/span&gt;\n            &amp;#43; (month - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) * &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt; &amp;#43; month * &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; / &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;\n            &amp;#43; day - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        ) : (\n            (year) * &lt;span class=\"hljs-number\"&gt;365&lt;/span&gt; &amp;#43; (year) / &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; - (year) / &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; &amp;#43; (year) / &lt;span class=\"hljs-number\"&gt;400&lt;/span&gt;\n            - (&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt; - month) * &lt;span class=\"hljs-number\"&gt;30&lt;/span&gt; - (&lt;span class=\"hljs-number\"&gt;14&lt;/span&gt; - month) * &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt; / &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;\n            &amp;#43; day - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        );\n    seconds -&amp;#61; OFFSET_DAYS;\n    seconds &amp;#61; seconds * &lt;span class=\"hljs-number\"&gt;86400&lt;/span&gt; &amp;#43; hour * &lt;span class=\"hljs-number\"&gt;3600&lt;/span&gt; &amp;#43; minute * &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt; &amp;#43; second;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;MyTime::gettime&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*year, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*month, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*day, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*hour, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*minute, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*second)&lt;/span&gt; &lt;/span&gt;{\n    days &amp;#61; seconds / &lt;span class=\"hljs-number\"&gt;86400&lt;/span&gt;;\n    Day &amp;#61; days &amp;#43; &lt;span class=\"hljs-number\"&gt;306&lt;/span&gt; &amp;#43; OFFSET_DAYS;\n    Year &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    Year &amp;#43;&amp;#61; Day / &lt;span class=\"hljs-number\"&gt;146097&lt;/span&gt; * &lt;span class=\"hljs-number\"&gt;400&lt;/span&gt;;\n    Day %&amp;#61; &lt;span class=\"hljs-number\"&gt;146097&lt;/span&gt;;\n    Year &amp;#43;&amp;#61; Day / &lt;span class=\"hljs-number\"&gt;36524&lt;/span&gt; * &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;\n    Day %&amp;#61; &lt;span class=\"hljs-number\"&gt;36524&lt;/span&gt;;\n    Year &amp;#43;&amp;#61; Day / &lt;span class=\"hljs-number\"&gt;1461&lt;/span&gt; * &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;\n    Day %&amp;#61; &lt;span class=\"hljs-number\"&gt;1461&lt;/span&gt;;\n    Year &amp;#43;&amp;#61; Day / &lt;span class=\"hljs-number\"&gt;365&lt;/span&gt;;\n    Day %&amp;#61; &lt;span class=\"hljs-number\"&gt;365&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (Day &amp;lt; &lt;span class=\"hljs-number\"&gt;306&lt;/span&gt;) {\n        Year--;\n    }\n    Year &amp;#43;&amp;#61; ORIGIN_YEAR;\n    Day&amp;#43;&amp;#43;;\n    Month &amp;#61; (Day * &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;) / &lt;span class=\"hljs-number\"&gt;367&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    Day &amp;#61; Day - ((Month - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) * &lt;span class=\"hljs-number\"&gt;367&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;) / &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;;\n    Month &amp;#61; (Month &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) % &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    Second &amp;#61; seconds % &lt;span class=\"hljs-number\"&gt;86400&lt;/span&gt;;\n    Hour &amp;#61; Second / &lt;span class=\"hljs-number\"&gt;3600&lt;/span&gt;;\n    Second %&amp;#61; &lt;span class=\"hljs-number\"&gt;3600&lt;/span&gt;;\n    Minute &amp;#61; Second / &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;;\n    Second %&amp;#61; &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (year)*year &amp;#61; Year;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (month)*month &amp;#61; Month;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (day)*day &amp;#61; Day;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (hour)*hour &amp;#61; Hour;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (minute)*minute &amp;#61; Minute;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (second)*second &amp;#61; Second;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;MyTime::getdays&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; seconds / &lt;span class=\"hljs-number\"&gt;86400&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;MyTime::output&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(FILE*fp, &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;*format)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;gettime&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(fp, format, Year, Month, Day, Hour, Minute, Second);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;MyTime::input&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(FILE*fp, &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;*format)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (format) {\n        &lt;span class=\"hljs-built_in\"&gt;fscanf&lt;/span&gt;(fp, format, &amp;amp;Year, &amp;amp;Month, &amp;amp;Day, &amp;amp;Hour, &amp;amp;Minute, &amp;amp;Second);\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        myio::&lt;span class=\"hljs-built_in\"&gt;fgetint&lt;/span&gt;(fp, Year);\n        myio::&lt;span class=\"hljs-built_in\"&gt;fgetint&lt;/span&gt;(fp, Month);\n        myio::&lt;span class=\"hljs-built_in\"&gt;fgetint&lt;/span&gt;(fp, Day);\n        myio::&lt;span class=\"hljs-built_in\"&gt;fgetint&lt;/span&gt;(fp, Hour);\n        myio::&lt;span class=\"hljs-built_in\"&gt;fgetint&lt;/span&gt;(fp, Minute);\n        myio::&lt;span class=\"hljs-built_in\"&gt;fgetint&lt;/span&gt;(fp, Second);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;settime&lt;/span&gt;(Year, Month, Day, Hour, Minute, Second);\n}\n\nMyTime MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#43; (int_64 s) {\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; seconds &amp;#43; s;\n}\n\nMyTime MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; - (int_64 s) {\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; seconds - s;\n}\n\nint_64 MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; - (MyTime&amp;amp;time) {\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; seconds - time.seconds;\n}\n\nMyTime&amp;amp; MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#61; (int_64 s) {\n    seconds &amp;#61; s;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; *&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;;\n}\n\nMyTime&amp;amp; MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#61; (MyTime&amp;amp;time) {\n    seconds &amp;#61; time.seconds;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; *&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;;\n}\n\nMyTime&amp;amp; MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#43;&amp;#61; (int_64 s) {\n    seconds &amp;#43;&amp;#61; s;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; *&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;;\n}\n\nMyTime&amp;amp; MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; -&amp;#61; (int_64 s) {\n    seconds -&amp;#61; s;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; *&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;;\n}\n\nMyTime&amp;amp; MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#43;&amp;#43;() {\n    &amp;#43;&amp;#43;seconds;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; *&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;;\n}\n\nMyTime MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#43;&amp;#43;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;) {\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; seconds&amp;#43;&amp;#43;;\n}\n\nMyTime&amp;amp; MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; --() {\n    --seconds;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; *&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;;\n}\n\nMyTime MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; --(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;) {\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; seconds--;\n}\n\n&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;lt; (MyTime&amp;amp;time) {\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; seconds &amp;lt; time.seconds;\n}\n\n&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;gt; (MyTime&amp;amp;time) {\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; seconds &amp;gt; time.seconds;\n}\n\n&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#61;&amp;#61;(MyTime&amp;amp;time) {\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; seconds &amp;#61;&amp;#61; time.seconds;\n}\n\n&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;lt;&amp;#61;(MyTime&amp;amp;time) {\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; seconds &amp;lt;&amp;#61; time.seconds;\n}\n\n&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; MyTime::&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;gt;&amp;#61;(MyTime&amp;amp;time) {\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; seconds &amp;gt;&amp;#61; time.seconds;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "重复n次操作", "Question": ["C语言程序设计中链表问题", ["程序设计我想做一个学生考勤系统", "此为结构体要素（几乎大部分功能函数无误可忽略）", "\n", "\n", "\n", "此为读文件代码", "\n", "此为终端输出和保存数据代码", "\n", "运行后输入5  会出现一行无学生信息的文字 ", "\n", "\n", "后输入1 添加一名学生信息", "\n", "\n", "后输入5 再次查看  信息已输入但是无信息文字还在", "\n", "\n", "随后输入8保存后输入9退出  查看文本  文本中存在刚刚输入的一项信息", "\n", "\n", "后再次打开程序 输入5查看  原本发现无信息文字被所输入信息填满  即第一条输入的学生信息会重复两次", "\n", "后续大量数据发现 只有第一个输入的学生信息会被重复两遍 其余功能均正常使用  而在show函数中多添加一个pr=pr->next就能只输出一个首位学生信息", "本人 感觉问题会不会feof（）导致多读一行重复了", "求帮忙看看 以及怎么修改 以下是源码", "\n", "#include", "\"Attendance system.h\"", ";\nint sum1 = ", "0", ", sum2 = ", "0", ", sum3 = ", "0", ";\n\nchar xuehao[", "100", "];", "//学号", "\nchar ", "name", "[", "100", "];", "//姓名", "\nchar banji[", "100", "];", "//班级", "\nchar ", "data", "[", "100", "];", "//时间", "\nchar daoke[", "10", "];", "//到课情况", "\nchar num[", "100", "][", "30", "];", "//存储一共有多少学号", "\nchar num2[", "100", "][", "30", "];", "//存储一共有多少姓名以便后面排序使用", "\nchar num3[", "100", "][", "30", "];", "//存储时间", "\n\nvoid creatnewnode(node*& student)\n{\n    student = (node*)malloc(sizeof(node));\n    ", "student", "->", "next = NULL;\n}\n\nvoid insert(node*& L, node* p)\n{\n    node* q = NULL;\n    q = L;\n    ", "p", "->", "next", " = q->", "next;\n    ", "q", "->", "next = p;\n}\n\nvoid read(node* L)\n{\n    FILE* FP;\n    FP = fopen(", "\"data.txt\"", ", ", "\"rb\"", ");\n    ", "if", " (FP == NULL)\n    {\n        printf(", "\"该文件不存在！\"", ");\n        exit(", "0", ");", "//终止程序 ", "\n    }\n    ", "while", " (!feof(FP))\n    {\n        node* pr = L;\n        node* p=NULL;\n        node* l = (node*)malloc(sizeof(node));", "//创建节点中转信息", "\n        fscanf(FP, ", "\"%s%s%s%s%s\"", ", xuehao, ", "name", ", banji, ", "data", ", daoke);\n        ", "strcpy", "(l->", "data", ".xuehao, xuehao);\n        ", "strcpy", "(l->", "data", ".", "name", ", ", "name", ");\n        ", "strcpy", "(l->", "data", ".banji, banji);\n        ", "strcpy", "(l->", "data", ".", "data", ", ", "data", ");\n        ", "strcpy", "(l->", "data", ".daoke, daoke);\n        int flag = ", "1", ", flag2 = ", "1", ", flag3 = ", "1", ";\n        ", "for", " (int i = ", "0", "; i <= sum1; i++)\n        {\n            ", "if", " (strcmp(num[i], xuehao) == ", "0", ")\n            {\n                flag = ", "0", ";\n            }\n        }\n        ", "if", " (flag)\n        {\n            strcpy(num[sum1], xuehao);\n            sum1++;\n        }\n        ", "for", " (int i = ", "0", "; i <= sum2; i++)\n        {\n            ", "if", " (strcmp(num2[i], ", "name", ") == ", "0", ")\n            {\n                flag2 = ", "0", ";\n            }\n        }\n        ", "if", " (flag2)\n        {\n            strcpy(num2[sum2], ", "name", ");\n            sum2++;\n        }\n        ", "for", " (int i = ", "0", "; i <= sum3; i++)\n        {\n            ", "if", " (strcmp(num3[i], ", "data", ") == ", "0", ")\n            {\n                flag3 = ", "0", ";\n            }\n        }\n        ", "if", " (flag3)\n        {\n            strcpy(num3[sum3], ", "data", ");\n            sum3++;\n        }\n        insert(L, l);\n        ", "l", " = l->", "next;\n    }\n    fclose(FP);\n\n}\n\nvoid search(node* student) \n{\n    ", "node", "* pr = student->", "next;\n    printf(", "\"输入1按学号查询，输入2按姓名查询，输入3按考勤时间查询:\"", ");\n    int flag;\n    scanf(", "\"%d\"", ", &flag);\n    ", "if", " (flag == ", "1", ")\n    {\n        int flag2 = ", "1", ";\n        ", "pr", " = student->", "next;\n        printf(", "\"请输入学号：\"", ");\n        scanf(", "\"%s\"", ", xuehao);\n        ", "while", " (pr != NULL) \n        {\n            ", "if", " (strcmp(pr->", "data", ".xuehao, xuehao) == ", "0", ")\n            {\n                flag2 = ", "0", ";\n                ", "printf", "(\"学号：%s  \", pr->", "data", ".xuehao);\n                ", "printf", "(\"姓名：%s  \", pr->", "data", ".", "name", ");\n                ", "printf", "(\"时间：%s  到课状态：%s\\n\", pr->", "data", ".", "data", ", pr->", "data", ".daoke);\n            }\n            ", "pr", " = pr->", "next;\n        }\n        ", "if", " (flag2)\n        {\n            printf(", "\"学号不存在！\\n\"", ");\n        }\n    }\n    ", "else", " ", "if", " (flag == ", "2", ") ", "//按姓名查询", "\n    {\n        ", "pr", " = student->", "next;\n        printf(", "\"请输入姓名：\"", ");\n        scanf(", "\"%s\"", ", ", "name", ");\n        ", "while", " (pr != NULL)\n        {\n            ", "if", " (strcmp(pr->", "data", ".", "name", ", ", "name", ") == ", "0", ")\n            {\n                ", "printf", "(\"学号：%s\\n\", pr->", "data", ".xuehao);\n                ", "printf", "(\"姓名：%s\\n\", pr->", "data", ".", "name", ");\n                ", "printf", "(\"时间：%s  到课状态：%s\", pr->", "data", ".", "data", ", pr->", "data", ".daoke);\n            }\n            ", "pr", " = pr->", "next;\n        }\n        ", "if", " (pr == NULL)\n        {\n            printf(", "\"姓名不存在！\\n\"", ");\n        }\n    }\n    ", "else", " ", "if", "(flag==", "3", ")  ", "//按时间查询", "\n    {\n        ", "pr", " = student->", "next;\n        printf(", "\"(注意！请严格按照00月00日00点00分输入)请输入具体时间：\"", ");\n        scanf(", "\"%s\"", ", ", "data", ");\n        ", "while", " (pr != NULL)\n        {\n            ", "if", " (strcmp(pr->", "data", ".", "data", ", ", "data", ") == ", "0", ") \n            {\n                ", "printf", "(\"学号：%s\\n\", pr->", "data", ".xuehao);\n                ", "printf", "(\"姓名：%s\\n\", pr->", "data", ".", "name", ");\n                ", "printf", "(\"时间：%s  到课状态：%s\", pr->", "data", ".", "data", ", pr->", "data", ".daoke);\n            }\n            ", "pr", " = pr->", "next;\n        }\n        ", "if", " (pr == NULL)\n        {\n            printf(", "\"该时间不存在记录！\\n\"", ");\n        }\n    }\n}\n\nvoid add(node* L) \n{\n    printf(", "\"请输入你想新增信息的学生学号:\"", ");\n    scanf(", "\"%s\"", ",xuehao);\n    printf(", "\"请输入你想新增信息的学生姓名：\"", ");\n    scanf(", "\"%s\"", ", ", "name", ");\n    printf(", "\"(注意！请严格按照00月00日00点00分输入)请输入到课时间：\"", ");\n    scanf(", "\"%s\"", ", ", "data", ");\n    printf(", "\"请输入学生班级：\"", ");\n    scanf(", "\"%s\"", ", banji);\n    ", "node", "* pr = L->", "next;\n    ", "while", " (pr != NULL)\n    {\n        ", "if", " (strcmp(pr->", "data", ".xuehao, xuehao)==", "0", ")\n        {\n            ", "if", " (strcmp(pr->", "data", ".", "data", ", ", "data", ") == ", "0", ") \n            {\n                printf(", "\"该学生在该时间的考勤信息已存在！！\"", ");\n                break;\n            }\n        }\n        ", "pr", " = pr->", "next;\n    }\n    ", "if", " (pr == NULL) \n    {\n        node* p;\n        creatnewnode(p);\n        ", "strcpy", "(p->", "data", ".xuehao, xuehao);\n        ", "strcpy", "(p->", "data", ".", "name", ", ", "name", ");\n        ", "strcpy", "(p->", "data", ".", "data", ", ", "data", ");\n        ", "strcpy", "(p->", "data", ".banji, banji);\n        printf(", "\"注意1为到课  2为旷课  3为事假  4为病假  5为迟到  6为早退\\n\"", ");\n        printf(", "\"请输入该时间的到课情况：\"", ");\n        scanf(", "\"%s\"", ", daoke);\n        ", "strcpy", "(p->", "data", ".daoke,daoke);\n        int flag = ", "1", ", flag2 = ", "1", ", flag3 = ", "1", ";\n        ", "for", " (int i = ", "0", "; i <= sum1; i++)\n        {\n            ", "if", " (strcmp(num[i], xuehao) == ", "0", ")\n            {\n                flag = ", "0", ";\n            }\n        }\n        ", "if", " (flag)\n        {\n            strcpy(num[sum1], xuehao);\n            sum1++;\n        }\n        ", "for", " (int i = ", "0", "; i <= sum2; i++)\n        {\n            ", "if", " (strcmp(num2[i], ", "name", ") == ", "0", ")\n            {\n                flag2 = ", "0", ";\n            }\n        }\n        ", "if", " (flag2)\n        {\n            strcpy(num2[sum2], ", "name", ");\n            sum2++;\n        }\n        ", "for", " (int i = ", "0", "; i <= sum3; i++)\n        {\n            ", "if", " (strcmp(num3[i], ", "data", ") == ", "0", ")\n            {\n                flag3 = ", "0", ";\n            }\n        }\n        ", "if", " (flag3)\n        {\n            strcpy(num3[sum3], ", "data", ");\n            sum3++;\n        }\n        insert(L, p);\n        printf(", "\"添加成功！\\n\"", ");\n    }\n}\n\nvoid modify(node* L)\n{\n    ", "node", "* pr = L->", "next;\n    printf(", "\"请输入你想要修改的学生学号：\"", ");\n    scanf(", "\"%s\"", ", xuehao);\n    printf(", "\"请输入你想修改学生记录的具体时间：\"", ");\n    scanf(", "\"%s\"", ", ", "data", ");\n    ", "while", " (pr != NULL)\n    {\n        ", "if", "(strcmp(pr->", "data", ".xuehao, xuehao) == ", "0", ")\n        {\n            ", "if", " (strcmp(pr->", "data", ".", "data", ", ", "data", ") == ", "0", ")\n            {\n                printf(", "\"注意1为到课  2为旷课  3为事假  4为病假  5为迟到  6为早退\\n\"", ");\n                printf(", "\"请输入学生到课情况：\"", ");\n                scanf(", "\"%s\"", ", daoke);\n                ", "strcpy", "(pr->", "data", ".daoke, daoke);\n                printf(", "\"修改成功！\\n\"", ");\n                break;\n            }\n        }\n        ", "pr", " = pr->", "next;\n    }\n    ", "if", " (pr == NULL)\n    {\n        printf(", "\"无该日学生信息!\"", ");\n    }\n}\n\nvoid del(node* L)\n{\n    ", "node", "* pr = L->", "next;\n    node* p = L;\n    ", "if", " (L->", "next == NULL)\n    {\n        printf(", "\"无考勤信息，请先添加\"", ");\n        return;\n    }\n    printf(", "\"请输入你想要删除的学生记录的学生学号：\"", ");\n    scanf(", "\"%s\"", ", xuehao);\n    printf(", "\"请输入你想要删除的学生记录的具体时间：\"", ");\n    scanf(", "\"%s\"", ", ", "data", ");\n    int flag = ", "1", ";\n    ", "while", " (pr != NULL)\n    {\n        ", "if", " (strcmp(pr->", "data", ".xuehao, xuehao) == ", "0", ")\n        {\n            ", "if", " (strcmp(pr->", "data", ".", "data", ", ", "data", ") == ", "0", ")\n            {\n                flag = ", "0", ";\n                ", "p", "->", "next", " = pr->", "next;\n                free(pr);\n                ", "node", "* p = L->", "next;\n                int t = ", "0", ", k = ", "0", ";\n                ", "while", " (p != NULL)\n                {\n                    ", "if", " (strcmp(p->", "data", ".xuehao, xuehao) == ", "0", ")\n                    {\n                        t++;\n                    }\n                    ", "if", " (strcmp(p->", "data", ".", "data", ", ", "data", ") == ", "0", ")\n                    {\n                        k++;\n                    }\n                    ", "p", " = p->", "next;\n                }\n                ", "if", " (t == ", "1", ")\n                {\n                    ", "for", " (int i = ", "0", "; i < sum1; i++)\n                    {\n                        strcpy(num[i] , num[i + ", "1", "]);\n                    }\n                    ", "for", " (int i = ", "0", "; i < sum2; i++)\n                    {\n                        strcpy(num2[i], num2[i + ", "1", "]);\n                    }\n                    sum1--;\n                    sum2--;\n                }\n                ", "if", " (k == ", "1", ")\n                {\n                    ", "for", " (int i = ", "0", "; i < sum3; i++)\n                    {\n                        strcpy(num3[i], num3[i + ", "1", "]);\n                    }\n                    sum3--;\n                }\n                printf(", "\"删除成功\\n\"", ");\n                break;\n            }\n        }\n        p = pr;\n        ", "pr", " = pr->", "next;\n    }\n    ", "if", " (flag)\n    {\n        printf(", "\"该学生记录不存在！\\n\"", ");\n    }\n}\n\nvoid show(node* L)\n{\n    ", "if", " (L->", "next== NULL)\n    {\n        printf(", "\"无学生信息，请先添加\\n\"", ");\n        return;\n    }\n    ", "else", "\n    {\n        printf(", "\"注意1为到课  2为旷课  3为事假  4为病假  5为迟到  6为早退\\n\"", ");\n        ", "node", "* pr = L->", "next;\n        ", "while", " (pr != NULL)\n        {\n            ", "printf", "(\"学生学号:%s  \", pr->", "data", ".xuehao);\n            ", "printf", "(\"学生姓名:%s  \", pr->", "data", ".", "name", ");\n            ", "printf", "(\"学生班级:%s  \", pr->", "data", ".banji);\n            ", "printf", "(\"日期:%s  \", pr->", "data", ".", "data", ");\n            ", "printf", "(\"学生到课情况:%s\\n\", pr->", "data", ".daoke);\n            ", "pr", " = pr->", "next;\n        }\n    }\n}\n\nvoid paixv(node* L)\n{\n    ", "node", "* pr = L->", "next;\n    ", "if", " (pr == NULL)\n    {\n        printf(", "\"库中无数据\"", ");\n        return;\n    }\n    ", "else", " \n    {\n        printf(", "\"输入1按学号排序，输入2按姓名排序，输入3按日期排序\"", ");\n        int flag;\n        scanf(", "\"%d\"", ", &flag);\n        ", "if", " (flag == ", "1", ")\n        {\n            char temp[", "1000", "];\n            ", "for", " (int i = ", "0", "; i < sum1 - ", "1", "; i++)\n            {\n                ", "for", " (int j = ", "0", "; j < sum1 - i - ", "1", "; j++)\n                {\n                    ", "if", " (strcmp(num[j], num[j + ", "1", "]) > ", "0", ")\n                    {\n                        strcpy(temp, num[j]);\n                        strcpy(num[j], num[j + ", "1", "]);\n                        strcpy(num[j + ", "1", "], temp);\n                    }\n                }\n            }\n            ", "for", " (int i = ", "0", "; i < sum1; i++)\n            {\n                node* pr2 = pr;\n                ", "while", " (pr2 != NULL)\n                {\n                    ", "if", " (strcmp(pr2->", "data", ".xuehao, num[i]) == ", "0", ") \n                    {\n                        ", "printf", "(\"学生学号:%s  \", pr2->", "data", ".xuehao);\n                        ", "printf", "(\"学生姓名:%s  \", pr2->", "data", ".", "name", ");\n                        ", "printf", "(\"学生班级:%s  \", pr2->", "data", ".banji);\n                        ", "printf", "(\"日期:%s  \", pr2->", "data", ".", "data", ");\n                        ", "printf", "(\"学生到课情况:%s\\n\", pr2->", "data", ".daoke);\n                    }\n                    ", "pr2", " = pr2->", "next;\n                }\n            }\n        }\n        ", "else", " ", "if", " (flag == ", "2", ")\n        {\n            char temp[", "1000", "];\n            ", "for", " (int i = ", "0", "; i < sum2 -", "1", "; i++)\n            {\n                ", "for", " (int j = ", "0", "; j < sum2-i-", "1", "; j++)\n                {\n                    ", "if", " (strcmp(num2[j], num2[j+", "1", "]) > ", "0", ")\n                    {\n                        strcpy(temp, num2[j]);\n                        strcpy(num2[j], num2[j + ", "1", "]);\n                        strcpy(num2[j + ", "1", "], temp);\n                    }\n                }\n            }\n            ", "for", " (int i = ", "0", "; i < sum2; i++)\n            {\n                node* pr2 = pr;\n                ", "while", " (pr2 != NULL)\n                {\n                    ", "if", " (strcmp(pr2->", "data", ".", "name", ", num2[i]) == ", "0", ")\n                    {\n                        ", "printf", "(\"学生学号:%s  \", pr2->", "data", ".xuehao);\n                        ", "printf", "(\"学生姓名:%s  \", pr2->", "data", ".", "name", ");\n                        ", "printf", "(\"学生班级:%s  \", pr2->", "data", ".banji);\n                        ", "printf", "(\"日期:%s  \", pr2->", "data", ".", "data", ");\n                        ", "printf", "(\"学生到课情况:%s\\n\", pr2->", "data", ".daoke);\n                    }\n                    ", "pr2", " = pr2->", "next;\n                }\n            }\n        }\n        ", "else", " ", "if", " (flag == ", "3", ")\n        {\n            char temp[", "1000", "];\n            ", "for", " (int i = ", "0", "; i < sum3-", "1", " ; i++)\n            {\n                ", "for", " (int j =", "0", "; j < sum3-i-", "1", "; j++)\n                {\n                    int x = (num3[j][", "0", "] - ", "'0'", ") * ", "10", "+(num3[j][", "1", "]-", "'0'", ");\n                    int y = (num3[j+", "1", "][", "0", "] - ", "'0'", ") * ", "10", " + (num3[j+", "1", "][", "1", "] - ", "'0'", ");\n                    int z = (num3[j][", "4", "] - ", "'0'", ") * ", "10", " + (num3[j][", "5", "] - ", "'0'", ");\n                    int k = (num3[j+", "1", "][", "4", "] - ", "'0'", ") * ", "10", " + (num3[j+", "1", "][", "5", "] - ", "'0'", ");\n                    ", "if", " (x>y)\n                    {\n                        strcpy(temp, num3[j]);\n                        strcpy(num3[j], num3[j+", "1", "]);\n                        strcpy(num3[j+", "1", "], temp);\n                    }\n                    ", "else", " ", "if", " (x == y)\n                    {\n                        ", "if", " (z > k)\n                        {\n                            strcpy(temp, num3[j]);\n                            strcpy(num3[j], num3[j+", "1", "]);\n                            strcpy(num3[j+", "1", "], temp);\n                        }\n                    }\n                }\n            }\n            ", "for", " (int i = ", "0", "; i < sum3; i++)\n            {\n                node* pr2 = pr;\n                ", "while", " (pr2 != NULL)\n                {\n                    ", "if", " (strcmp(pr2->", "data", ".", "data", ", num3[i]) == ", "0", ")\n                    {\n                        ", "printf", "(\"学生学号:%s  \", pr2->", "data", ".xuehao);\n                        ", "printf", "(\"学生姓名:%s  \", pr2->", "data", ".", "name", ");\n                        ", "printf", "(\"学生班级:%s  \", pr2->", "data", ".banji);\n                        ", "printf", "(\"日期:%s  \", pr2->", "data", ".", "data", ");\n                        ", "printf", "(\"学生到课情况:%s\\n\", pr2->", "data", ".daoke);\n                    }\n                    ", "pr2", " = pr2->", "next;\n                }\n            }\n        }\n\n    }\n}\n\nvoid tongji(node* L)\n{\n    ", "node", "* pr = L->", "next;\n    int flag;\n    printf(", "\"请输入数字查看统计报表 1 考勤日报表 2 考勤汇总表 3 考勤异常表 4 请假汇总表:\"", ");\n    scanf(", "\"%d\"", ", &flag);\n    ", "if", " (flag == ", "1", ")\n    {\n        ", "for", " (int i = ", "0", "; i < sum3; i++)\n        {\n            int k = ", "0", ";\n            printf(", "\"%s\\t\"", ", num3[i]);\n            node* p = pr;\n            int sum4 = ", "0", ", sum5 = ", "0", ", sum6 = ", "0", ", sum7 = ", "0", ",sum8=", "0", ",sum9=", "0", ";\n            ", "while", " (p != NULL)\n            {\n                ", "if", " (strcmp(p->", "data", ".", "data", ", num3[i]) == ", "0", ")\n                {\n                    ", "if", " (strcmp(p->", "data", ".daoke, ", "\"1\"", ") == ", "0", ")\n                    {\n                        sum4++;\n                    }\n                    ", "else", " ", "if", " (strcmp(p->", "data", ".daoke, ", "\"2\"", ") == ", "0", ")\n                    {\n                        sum5++;\n                    }\n                    ", "else", " ", "if", " (strcmp(p->", "data", ".daoke, ", "\"3\"", ") == ", "0", ")\n                    {\n                        sum6++;\n                    }\n                    ", "else", " ", "if", " (strcmp(p->", "data", ".daoke, ", "\"4\"", ") == ", "0", ")\n                    {\n                        sum7++;\n                    }\n                    ", "else", " ", "if", " (strcmp(p->", "data", ".daoke, ", "\"5\"", ") == ", "0", ")\n\n\n                    {\n                        sum8++;\n                    }\n                    ", "else", " ", "if", " (strcmp(p->", "data", ".daoke, ", "\"6\"", ") == ", "0", ")\n                    {\n                        sum9++;\n                    }\n                    ", "printf", "(\"%s\\t\", p->", "data", ".", "name", ");\n                    k++;\n                }\n                ", "p", " = p->", "next;\n            }\n            printf(", "\"当日总考勤人数:%d人 出勤%d人 旷课%d人 事假%d人  病假%d人  迟到%d人  早退%d人\\n\"", ", k,sum4,sum5,sum6,sum7,sum8,sum9);\n        }\n    }\n    ", "else", " ", "if", " (flag == ", "2", ")\n    {\n        ", "for", " (int i = ", "0", "; i < sum1; i++)\n        {\n            int k = ", "0", ";\n            printf(", "\"%s\\t\"", ", num[i]);\n            node* p = pr;\n            int sum4 = ", "0", ", sum5 = ", "0", ", sum6 = ", "0", ", sum7 = ", "0", ", sum8 = ", "0", ", sum9 = ", "0", ";\n            ", "while", " (p != NULL)\n            {\n                ", "if", " (strcmp(p->", "data", ".xuehao, num[i]) == ", "0", ")\n                {\n                    ", "if", " (strcmp(p->", "data", ".daoke, ", "\"1\"", ") == ", "0", ")\n                    {\n                        sum4++;\n                    }\n                    ", "else", " ", "if", " (strcmp(p->", "data", ".daoke, ", "\"2\"", ") == ", "0", ")\n                    {\n                        sum5++;\n                    }\n                    ", "else", " ", "if", " (strcmp(p->", "data", ".daoke, ", "\"3\"", ") == ", "0", ")\n                    {\n                        sum6++;\n                    }\n                    ", "else", " ", "if", " (strcmp(p->", "data", ".daoke, ", "\"4\"", ") == ", "0", ")\n                    {\n                        sum7++;\n                    }\n                    ", "else", " ", "if", " (strcmp(p->", "data", ".daoke, ", "\"5\"", ") == ", "0", ")\n                    {\n                        sum8++;\n                    }\n                    ", "else", " ", "if", " (strcmp(p->", "data", ".daoke, ", "\"6\"", ") == ", "0", ")\n                    {\n                        sum9++;\n                    }\n                    ", "printf", "(\"%s\\t\", p->", "data", ".", "name", ");\n                    k++;\n                }\n                ", "p", " = p->", "next;\n            }\n    \n            printf(", "\"该学生总上课次数%d 出勤%d次 旷课%d次 事假%d次  病假%d次  迟到%d次  早退%d次\\n\"", ", k, sum4, sum5, sum6, sum7, sum8, sum9);\n        }\n    }\n    ", "else", " ", "if", " (flag == ", "3", ")\n    {\n        printf(", "\"注意2为旷课  3为事假  4为病假  5为迟到  6为早退\\n\"", ");\n        node* p = pr;\n        ", "while", " (p != NULL)\n        {\n            ", "if", " (strcmp(p->", "data", ".daoke, ", "\"1\"", ") != ", "0", ")\n            {\n                ", "printf", "(\"%s   %s   %s   %s    到课情况：%s\\n\", p->", "data", ".xuehao, p->", "data", ".", "name", ", p->", "data", ".banji, p->", "data", ".", "data", ", p->", "data", ".daoke);\n            }\n            ", "p", " = p->", "next;\n        }\n    }\n    ", "else", " ", "if", " (flag == ", "4", ")\n    {\n        printf(", "\"3为事假  4为病假  \\n\"", ");\n        node* p = pr;\n        ", "while", " (p != NULL)\n        {\n            ", "if", " (strcmp(p->", "data", ".daoke, \"3\") == 0|| strcmp(p->", "data", ".daoke, ", "\"4\"", ") == ", "0", ")\n            {\n                ", "printf", "(\"%s   %s   %s   %s    到课情况：%s\\n\", p->", "data", ".xuehao, p->", "data", ".", "name", ", p->", "data", ".banji, p->", "data", ".", "data", ", p->", "data", ".daoke);\n            }\n            ", "p", " = p->", "next;\n        }\n    }\n    ", "else", "\n    {\n        printf(", "\"请输入正确的数字\\n\"", ");\n    }\n}\n\nvoid save(node* L)\n{\n    FILE* fp;\n    ", "node", "* pr = L->", "next;\n    ", "if", " ((fp = fopen(", "\"data.txt\"", ", ", "\"wb\"", ")) == NULL)\n    {\n        printf(", "\"无法打开文件\\n\"", ");\n        exit(", "0", ");\n    }\n    ", "while", " (pr)\n    {\n        ", "if", "(pr->", "next == NULL)\n        {\n            ", "fprintf", "(fp, \"%s\\n%s\\n%s\\n%s\\n%s\", pr->", "data", ".xuehao,pr->", "data", ".", "name", ",pr->", "data", ".banji,pr->", "data", ".", "data", ",pr->", "data", ".daoke);\n        }\n        ", "else", "\n        {\n        ", "fprintf", "(fp, \"%s\\n%s\\n%s\\n%s\\n%s\\n\", pr->", "data", ".xuehao, pr->", "data", ".", "name", ", pr->", "data", ".banji, pr->", "data", ".", "data", ", pr->", "data", ".daoke);\n        }\n        ", "pr", " = pr->", "next;\n\n    }\n    printf(", "\"保存成功！\\n\"", ");\n    fclose(fp);\n}\n\n", "\n", "#", "include", "\"Attendance system.h\"", ";", "\n\n\n", "void", " ", "initwindow", "()", " \n", "{\n    ", "printf", "(", "\"**************************大学学生考勤签到系统**********\\n\"", ");\n    ", "printf", "(", "\"*-->               请输入数字实现功能                  *\\n\"", ");\n    ", "printf", "(", "\"*-->              1 新增学生信息数据                   *\\n\"", ");\n    ", "printf", "(", "\"*-->                  2 查找数据                       *\\n\"", ");\n    ", "printf", "(", "\"*-->               3 修改学生记录                      *\\n\"", ");\n    ", "printf", "(", "\"*-->               4 删除学生记录                      *\\n\"", ");\n    ", "printf", "(", "\"*-->             5 显示学生考勤数据列表                *\\n\"", ");\n    ", "printf", "(", "\"*-->                    6 排序                         *\\n\"", ");\n    ", "printf", "(", "\"*-->                  7 数据统计                       *\\n\"", ");\n    ", "printf", "(", "\"*-->                    8 保存                         *\\n\"", ");\n    ", "printf", "(", "\"*-->                    9 退出                         *\\n\"", ");\n    ", "printf", "(", "\"*******************要老实上课嗷~************************\\n\"", ");\n    ", "printf", "(", "\"请在此输入你想要进行操作前的数字：\"", ");\n}\n\n", "int", " ", "main", "()", "\n", "{\n    node* stude;\n    ", "creatnewnode", "(stude);\n    ", "read", "(stude);\n    ", "int", " flag = ", "1", ";\n    ", "while", " (flag)", "//循环页面操作", "\n    {\n        ", "initwindow", "();\n        ", "int", " n;\n        ", "scanf", "(", "\"%d\"", ", &n);\n        ", "switch", " (n)\n        {\n        ", "case", " ", "1", ": \n            ", "add", "(stude);\n            ", "printf", "(", "\"请输入按下回车返回主菜单\"", ");\n            ", "getchar", "();\n            ", "getchar", "();\n            ", "system", "(", "\"cls\"", ");\n            ", "break", ";\n        ", "case", " ", "2", ": \n            ", "search", "(stude);\n            ", "printf", "(", "\"请输入按下回车返回主菜单\"", ");\n            ", "getchar", "();\n            ", "getchar", "();\n            ", "system", "(", "\"cls\"", ");\n            ", "break", ";\n            ", "modify", "(stude);\n            ", "printf", "(", "\"请输入按下回车返回主菜单\"", ");\n            ", "getchar", "();\n            ", "getchar", "();\n            ", "system", "(", "\"cls\"", ");\n            ", "break", ";\n        ", "case", " ", "4", ": \n            ", "del", "(stude);\n            ", "printf", "(", "\"请输入按下回车返回主菜单\"", ");\n            ", "getchar", "();\n            ", "getchar", "();\n            ", "system", "(", "\"cls\"", ");\n            ", "break", ";\n        ", "case", " ", "5", ": \n            ", "show", "(stude);\n            ", "printf", "(", "\"请输入按下回车返回主菜单\"", ");\n            ", "getchar", "();\n            ", "getchar", "();\n            ", "system", "(", "\"cls\"", ");\n            ", "break", ";\n        ", "case", " ", "6", ":\n            ", "paixv", "(stude);\n            ", "printf", "(", "\"请输入按下回车返回主菜单\"", ");\n            ", "getchar", "();\n            ", "getchar", "();\n            ", "system", "(", "\"cls\"", ");\n            ", "break", ";\n        ", "case", " ", "7", ":\n            ", "tongji", "(stude);\n            ", "printf", "(", "\"请输入按下回车返回主菜单\"", ");\n            ", "getchar", "();\n            ", "getchar", "();\n            ", "system", "(", "\"cls\"", ");\n            ", "break", ";\n        ", "case", " ", "8", ":\n            ", "save", "(stude);\n            ", "printf", "(", "\"请输入按下回车返回主菜单\"", ");\n            ", "getchar", "();\n            ", "getchar", "();\n            ", "system", "(", "\"cls\"", ");\n            ", "break", ";\n        ", "case", " ", "9", ":\n            ", "printf", "(", "\"感谢使用本系统！\\n\"", ");\n            flag = ", "0", ";\n            ", "break", ";\n        ", "default", ":\n            ", "printf", "(", "\"请输入正确的操作数！！！\\n\"", ");\n            ", "break", ";\n        }\n    }\n    ", "return", " ", "0", ";\n}\n\n", "\n", "#", "undef", " UNICODE", "\n", "#", "undef", " _UNICODE", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<math.h>", "\n", "#", "include", "<string.h>", "\n", "#", "include", "<stdlib.h>", "\n", "#", "include", "<malloc.h>", "\n\n", "typedef", " ", "struct", " ", "s", "\n{\n    ", "char", " xuehao[", "100", "];", "//学号", "\n    ", "char", " name[", "100", "];", "//姓名", "\n    ", "char", " banji[", "100", "];", "//班级", "\n    ", "char", " data[", "100", "];", "//日期", "\n    ", "char", " daoke[", "100", "];", "//到课情况", "\n}stud;\n", "typedef", " ", "struct", " ", "node", "\n{\n    stud data;\n    ", "struct", " ", "node", "* next;\n}node;\n", "void", " ", "creatnewnode", "(node*& student)", ";\n", "void", " ", "insert", "(node*& L, node* p)", ";\n", "void", " ", "read", "(node* L)", ";\n", "void", " ", "search", "(node* student)", ";\n", "void", " ", "add", "(node* L)", ";\n", "void", " ", "modify", "(node* L)", ";\n", "void", " ", "del", "(node* L)", ";\n", "void", " ", "show", "(node* L)", ";\n", "void", " ", "paixv", "(node* L)", ";\n", "void", " ", "tongji", "(node* L)", ";\n", "void", " ", "save", "(node* L)", ";\n\n"]], "Tag": "程序设计"}
