{"Answer": "预编译就是在向编译器说明你在下面的程序中用到的一些库函数之类的东西，好比你去订饭，你应该告诉吃什么，不能只说我明天中午来吃饭一样。编译器自动搜索\r\n#include关键词，找到后检查后面尖括号的内容，去编译器已有的类似程序集合里寻找相关文件并调入，以免后面影响编译效率。clear？", "Konwledge_Point": "编译预处理", "Question": ["求大神指导？编译预处理 ", ["为什么要进行编译预处理？", "\n编译预处理是怎么进行的？特别想知道这是怎么样一回事！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你保存的文件名格式不一样&amp;#xff0c;.cpp是c&amp;#xff0b;&amp;#xff0b;的&amp;#xff0c;换.c试试&lt;/p&gt;", "Konwledge_Point": "编译预处理", "Question": ["编译预处理命令报错怎么解决", ["编译预处理命令报错该怎么解决？为什么它会报错呢？有没有人知道，可以教教我吗？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;帮你备注在代码中&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; y &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;        &lt;span class=\"hljs-comment\"&gt;//定义全局变量&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fl&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x)&lt;/span&gt;\n&lt;/span&gt;{\n    y &amp;#61; x * x;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;f2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; y &amp;#61; x * x; \n    y&amp;#43;&amp;#43;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x &amp;#61; &amp;#43;&amp;#43;y;    &lt;span class=\"hljs-comment\"&gt;//&amp;#43;&amp;#43;y先使y&amp;#61;y&amp;#43;1,再使用y的值&amp;#xff0c;所以y&amp;#61;2,所以x&amp;#61;2&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;fl&lt;/span&gt;(x);        &lt;span class=\"hljs-comment\"&gt;//调用f1函数&amp;#xff0c;进入f1中&amp;#xff0c;执行y&amp;#61;2*2&amp;#61;4&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;y&amp;#61;%d\\n&amp;#34;&lt;/span&gt;, y&amp;#43;&amp;#43;);        &lt;span class=\"hljs-comment\"&gt;//先使用y的值&amp;#xff0c;再令y&amp;#61;y&amp;#43;1,所以此时y&amp;#61;4&lt;/span&gt;\n    x&amp;#43;&amp;#43;;            &lt;span class=\"hljs-comment\"&gt;//x&amp;#61;2&amp;#43;1&amp;#61;3&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;f2&lt;/span&gt;(x);            &lt;span class=\"hljs-comment\"&gt;//调用f2函数&amp;#xff0c;进入f2中&amp;#xff0c;执行y&amp;#61;3*3&amp;#61;9,但是f2函数中重新定义了变量y&amp;#xff0c;使y为局部变量&amp;#xff0c;f2函数结束后&amp;#xff0c;对应的值也就不存在了&amp;#xff0c;但是外部定义的全局变量y还在&amp;#xff0c;所以y&amp;#61;5&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;y&amp;#61;%d\\n&amp;#34;&lt;/span&gt;, y);   &lt;span class=\"hljs-comment\"&gt;//y&amp;#61;5&lt;/span&gt;\n}\n&lt;span class=\"hljs-comment\"&gt;/*\n        void f1 和 void f1 和 int main都是函数&amp;#xff0c;main函数是程序的入口&amp;#xff0c;也就是说你一运行就先进入main函数中&amp;#xff0c;而不是先进入f1/f2中&amp;#xff0c;在main函数中遇到调用f1/f2才会进入到该函数中。\n        void 表示&amp;#xff1a;没有返回值&amp;#xff0c;即没有return\n        int 表示&amp;#xff1a;返回值类型为int型\n*/&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "编译预处理", "Question": ["c语言编译预处理章节相关问题", ["这个程序结构看不懂 怎么看整个结构 输出看的是哪几段啊😢 那两个void和int main有什么关联啊🧐"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;C&lt;br /&gt;int a[2][3]的内容是&amp;#xff1a;&lt;br /&gt;1 3 5&lt;br /&gt;7 9 11&lt;br /&gt;两行&amp;#xff0c;三列&amp;#xff0c;p[1][1]就是第2行第2列&amp;#xff0c;因为数组下标是从0开始的&amp;#xff0c;所以p[1][1]就是9&lt;/p&gt;", "Konwledge_Point": "编译预处理", "Question": ["c语言编译预处理和动态存储分布", []], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;因为是宏不是函数&amp;#xff0c;所以是k&amp;#61;10*(i)&amp;lt;(j)?(i):()j;&lt;br /&gt;条件其实是10*i&amp;lt;j而不是i&amp;lt;j&lt;/p&gt;", "Konwledge_Point": "编译预处理", "Question": ["关于#c语言#的问题：编译预处理", ["为什么啊，为什么是15啊？答案不应该是100吗？谁能解答一下啊！"]], "Tag": "程序设计"}
{"Answer": "有一个工具来着，名字叫，名字叫 jdbc logger\r\n\r\n对了，就是它，具体详情自己查查吧！", "Konwledge_Point": "编译预处理", "Question": ["请教java如何打印预编译插入值后的完整sql", ["如题！谢谢啦"]], "Tag": "程序设计"}
{"Answer": "gcc？那好像要定义2个宏，可以看看这个解释[http://www.cnblogs.com/wb-DarkHorse/p/3588787.html](http://www.cnblogs.com/wb-DarkHorse/p/3588787.html \"\")", "Konwledge_Point": "编译预处理", "Question": ["预编译连接符＃＃ 　预处理指令", [" #include <stdio.h>\n    #include<stdlib.h>\n", "\n\n", "#define TR(m,n,p)  m##n##p", "\n\n", "int main ()", "\n   {", "\n           printf(\"%s\\n\",TR(\"abc\",\"xy\",\"yz\"));", "\n           return 0;", "\n   }", "\n这段代码为什么编译不过？"]], "Tag": "程序设计"}
{"Answer": "#ifdef _WIN32\r\nxxxxx在Windows上运行的代码\r\n#else\r\nxxxxx在Linux上运行的代码\r\n#endif\r\n在Windows下_WIN32函数被定义为1，在Linux下无定义，为0", "Konwledge_Point": "编译预处理", "Question": ["请问怎么用c语言分辨运行程序的系统是Windows还是Linux", ["请问怎么用c语言分辨运行程序的系统是Windows还是Linux（编译预处理的话我找不到相关的宏定义）", "\n本人刚入门（也许还算不上）菜鸟一个，恳求指点"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Please enter rate, year, capital:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; rate;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; capital;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; deposit;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; year;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf,%d,%lf&amp;#34;&lt;/span&gt;, &amp;amp;rate, &amp;amp;year, &amp;amp;capital);\n    deposit &amp;#61; capital * (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#43;rate) * &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#43;rate,year&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;deposit&amp;#61;%.3f\\n&amp;#34;&lt;/span&gt;,deposit);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果对你有帮助&amp;#xff0c;可以点击我这个回答右上方的【采纳】按钮&amp;#xff0c;给我个采纳吗&amp;#xff0c;谢谢&lt;/p&gt;", "Konwledge_Point": "编译预处理", "Question": ["用C语言或者C++编程", ["假设银行定期存款的年利率r为2.25%，从键盘输入本金和存款年限，编程计算并输出该笔存款到期后的本金和利息一共有多少。（例如：当本金为1000元，存入10后，应得的本金与利息一共有1249.203元）提示：1）本程序最终计算的是复利2）计算幂的数学函数为pow(a,n)，代表a的n次幂3）使用数学函数是，需要在程序的开头加上编译预处理命令#include <math.h>"]], "Tag": "程序设计"}
{"Answer": "# 问题解决的话，请点采纳\r\n```\r\n你的错误的代码呢？\r\n我给你写一个吧\r\n#include &lt;stdio.h&gt;\r\nint main()\r\n{\r\nint n;\r\nprintf(\"Input x:\\n\");\r\nscanf(\"%d\", &amp;n);\r\nif (n &lt; 0) n = -n;\r\nint m = 0;\r\nwhile(n!=0){\r\nm=m*10+n%10;\r\nn=n/10;\r\n}\r\nprintf(\"y=%d\\n\", m);\r\nreturn 0;\r\n}\r\n```", "Konwledge_Point": "编译预处理", "Question": ["简单代码，纠错，在线等，很急。", ["题目内容：", "\n\n", "从键盘任意输入一个3位整数，编程计算并输出它的逆序数（忽略整数前的正负号）。", "\n\n", "提示：", "\n\n", "\n", "从键盘输入数据可以使用函数scanf()。", "\n", "fabs(x)表示计算变量x的绝对值。", "\n", "3.使用数学函数，需要在程序开头加上编译预处理指令 #include ", "\n\n", "Input x:   -123↙   y=321", "\n输入格式: \"%d\"", "\n输出格式：", "\n提示信息：\"Input x:\\n\"", "\n输出格式：\"y=%d\\n\""]], "Tag": "程序设计"}
{"Answer": "# 如果问题解决，请点下采纳\r\n```\r\n#include &lt;stdio.h&gt;\r\n#include &lt;string.h&gt;\r\n#include &lt;conio.h&gt;\r\nvoid cutpaste(char *line,int source,int len)\r\n{\r\n\tchar t[20];\r\n\tint i,length=strlen(line);\r\n\tif(source&gt;=length)return;\r\n\tfor(i=0;i&lt;len&amp;&amp;i&lt;19&amp;&amp;source+i&lt;length;i++)\r\n\t\tt[i]=line[source+i];\r\n\tt[i]='\\0';\r\n\r\n\tstrcpy(&amp;line[source],&amp;line[source+i]);\r\n\tstrcpy(line+length-len,t);\r\n\r\n}\r\nint main()\r\n{\r\n\tchar line[80]=\"this is a test.\";\r\n\r\n\tcutpaste(line,5,2);\r\n\tputs(line);\r\n\tgetch();\r\n\treturn 0;\r\n}\r\n\r\n```", "Konwledge_Point": "编译预处理", "Question": ["56. 程序改错C语言以下程序中函数cutpaste功能是？", ["56.", "\n程序改错：", "\n【要求】", "\n1.按以下程序功能改正程序的错误。", "\n2.可以修改语句中的一部分内容，调整语句次序，增加变量声明或编译预处理命令，但不能增加其他语句，也不能删去整条语句。", "\n【程序功能】", "\n   以下程序中函数cutpaste功能是将line指向的数组中从下标为source开始的连续len个字符作为一个子串复制到一个临时数组中，并将这些字符从line指向的数组中删除；再将临时数组中子串追加到line指向数组中字符串的尾部。", "\n【测试数据与运行结果】", "\n    测试字符串：\"this is a test.\"", "\n                source=5, len=2", "\n          输出：this a test. is", "\n【含有错误的源程序】", "\n#include", "\n#include", "\n#include", "\nvoid cutpaste(char *line,int source,int len); ", "\n{", "\n    char t[20];", "\n    int i,length=strlen(line);", "\n    if(source>=length)return;", "\n    for(i=0;i<len&&i<19&&source+i<length;i++)", "\n        t[i]=line[source+i];", "\n    t[0]='\\0';", "\n    strcpy(&line[source],&line[source+i]);", "\n    strcpy(line,t);", "\n}", "\nint main()", "\n{", "\n    char line[80]=\"this is a test.\";", "\n    cutpaste(line[80],5,2);", "\n    puts(line);", "\n    getch();", "\n    return 0;", "\n}", "\n请改正并认真测试程序的正确性。将源代码以文本方式提交，不要直接提交文件。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;修改完善如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#xff09;编译预处理命令\n&lt;span class=\"hljs-comment\"&gt;#include &amp;#34;stdio.h&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;#34;stdlib.h&amp;#34;//分配内存&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;#34;conio.h&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;#34;string.h&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#define  MaxSize  100     // 修改&lt;/span&gt;\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#xff09;自定义数据类型(typedef)\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;先定义图书数据的数据类型\ntypedef struct {\n    int   no;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;number\n    char  name[&lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;];&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;name\n    float price;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;price\n}STD;\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;再定义顺序表数据类型&amp;#xff1a;\ntypedef  struct {\n    STD  *data; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;data是一个指向STD类型的指针变量\n    int  listSize;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;表容量\n    int  length;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;实际数据个数\n}SQList;\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;&amp;#xff09;各个函数的声明\nint menu();\nint initSqList(SQList *L);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;初始化 int initSqList(SQList *L,int max); 修改\nint dispSqList(SQList L);\nint insertSqList(SQList *L, int i, STD x);\nint deleteSqList(SQList *L, int i);\nint locateSqList(SQList L, STD x);\nint updateSqList(SQList L, int i,  STD x);\nint createSqList(SQList *L);&lt;span class=\"hljs-regexp\"&gt;//i&lt;/span&gt;nt createSqList(SQList *L,int max,STD x); 修改\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;&amp;#xff09;主函数的定义\nint main()\n{\n    int t&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,n, maxSize;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; float fs&amp;#61;.&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;f;有时候不做这个浮点初始化操作程序会报错\n    SQList L; STD s;\n    initSqList(&amp;amp;L);    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;修改 初始化图书数据表\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(t){\n        n&amp;#61;menu( );&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;显示主菜单\n        switch(n){\n        case &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n            createSqList(&amp;amp;L);  &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;修改\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;插入图书数据\n        case &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入需要插入图书的编号、书名、价格&amp;#xff0c;用空格隔开&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%s%f&amp;#34;&lt;/span&gt;,&amp;amp;s.no,s.name, &amp;amp;s.price);\n            int pos;\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入插入位置:\\n&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;pos);\n            insertSqList(&amp;amp;L,pos,s);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;删除图书数据\n        case &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入删除图书书名&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,s.name);\n            s.no &amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            pos&amp;#61;locateSqList(L,s);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(pos &amp;#61;&amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)  &lt;span class=\"hljs-regexp\"&gt;//i&lt;/span&gt;f(pos&amp;#61;&amp;#61;L.length&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;不存在该图书数据\\n&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            {\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;删除的图书数据为&amp;#xff1a;%d %10s %7.2f\\n&amp;#34;&lt;/span&gt;,\n                       L.data[pos].no,L.data[pos].name,L.data[pos].price);\n                deleteSqList(&amp;amp;L, pos);\n            }\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;显示图书数据\n        case &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:\n            dispSqList(L);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n \n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;更新图书数据\n        case &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt;{\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入需要修改的图书 1.编号 或 2.名称\\n&amp;#34;&lt;/span&gt;);\n                scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;maxSize);\n                switch(maxSize){\n                    case &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n                       printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入编号:&amp;#34;&lt;/span&gt;);\n                       scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;s.no);\n                       strcpy(s.name,&lt;span class=\"hljs-string\"&gt;&amp;#34;\\0&amp;#34;&lt;/span&gt;);\n                       &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n                    case &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n                       printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入书名:&amp;#34;&lt;/span&gt;);\n                       scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, s.name);\n                       s.no &amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                       &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n                    default: &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n                }\n            }&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (maxSize !&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; maxSize !&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n\n            n&amp;#61;locateSqList(L,s);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;#61;&amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;不存在该图书\\n&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n                printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入新的图书编号 名称 价格\\n&amp;#34;&lt;/span&gt;);\n                scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%s%f&amp;#34;&lt;/span&gt;,&amp;amp;s.no,s.name,&amp;amp;s.price);\n                updateSqList(L,n,s);\n            }\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n         &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;退出\n        case &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;:\n            t &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n        &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;错误处理\n        default: \n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入有误&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n        }\n    }\n}\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;&amp;#xff08;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&amp;#xff09;各个函数的定义\nint menu(){\n    int n;\n    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;system(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;清屏\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;****welcome to book management system****\\n&amp;#34;&lt;/span&gt;);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;   1、create        2、insert\\n&amp;#34;&lt;/span&gt;);                &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;修改\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;   3、delete        4、display\\n&amp;#34;&lt;/span&gt;);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;   5、update        6、exit\\n&amp;#34;&lt;/span&gt;);                  &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;修改\n    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;   7、exit\\n&amp;#34;&lt;/span&gt;);                                 &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;修改\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;*****************************************\\n&amp;#34;&lt;/span&gt;);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;choose function(1-6)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    return n;\n}\n \n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;初始化操作&amp;#xff1a;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;.分配内存 &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;.给结构体变量赋值&amp;#xff08;length,listsize)\nint initSqList(SQList *L){\n    L-&amp;gt;data&amp;#61;(STD*)malloc(MaxSize*sizeof(STD));\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(L-&amp;gt;data &amp;#61;&amp;#61; NULL){   &lt;span class=\"hljs-regexp\"&gt;//i&lt;/span&gt;f(L-&amp;gt;data&amp;#61;NULL) 修改\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;申请内存失败&amp;#xff01;&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;exit&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    }\n    L-&amp;gt;listSize&amp;#61;MaxSize; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 修改\n    L-&amp;gt;length&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\nint dispSqList(SQList L){\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(L.length &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){ &lt;span class=\"hljs-regexp\"&gt;//i&lt;/span&gt;f(L.data&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) 修改\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;没有信息&amp;#xff01;&amp;#34;&lt;/span&gt;);\n        return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;      &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;修改 \n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;编号 书名 价格\\n &amp;#34;&lt;/span&gt;);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,L.length);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;L.length;i&amp;#43;&amp;#43;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %f\\n&amp;#34;&lt;/span&gt;,L.data[i].no,L.data[i].name,L.data[i].price);\n    }\n    return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\nint insertSqList(SQList *L, int i, STD x){\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;lt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || i &amp;gt; L-&amp;gt;length &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;1error\\n&amp;#34;&lt;/span&gt;);\n        return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(L-&amp;gt;length&amp;gt;&amp;#61;L-&amp;gt;listSize){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;2error\\n&amp;#34;&lt;/span&gt;);\n        return -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int k&amp;#61;L-&amp;gt;length;k &amp;gt; i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;k--)\n        L-&amp;gt;data[k]&amp;#61;L-&amp;gt;data[k-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n    L-&amp;gt;data[i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;x;\n    &amp;#43;&amp;#43;L-&amp;gt;length;\n    return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\nint deleteSqList(SQList *L, int i){\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int k &amp;#61; i;k &amp;lt; L-&amp;gt;length - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;k&amp;#43;&amp;#43;){\n        L-&amp;gt;data[k]&amp;#61;L-&amp;gt;data[k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n    }\n    L-&amp;gt;length--;\n    return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n \nint locateSqList(SQList L, STD x){\n    int i;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(L.length &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        return -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;L.length;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(strcmp(L.data[i].name,x.name)&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;||L.data[i].no&amp;#61;&amp;#61;x.no)\n        &lt;span class=\"hljs-regexp\"&gt;//i&lt;/span&gt;f(strcmp(L.data[i].name,x.name)&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;amp;&amp;amp;L.data[i].no&amp;#61;&amp;#61;x.no&amp;amp;&amp;amp;L.data[i].price&amp;#61;&amp;#61;x.price)\n            return i; &lt;span class=\"hljs-regexp\"&gt;//i&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;gt;&amp;#61; L.length)\n        return -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\nint updateSqList(SQList L, int i, STD x){\n    L.data[i]&amp;#61;x;\n    return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\nint createSqList(SQList *L){  &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;修改\n    int n &amp;#61; L-&amp;gt;length, maxSize;\n    STD x;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (L-&amp;gt;length &amp;gt;&amp;#61; L-&amp;gt;listSize){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;表已满&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n        return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入需要创建的图书数量&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;maxSize);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(int i &amp;#61; n;i &amp;lt; n &amp;#43; maxSize;i&amp;#43;&amp;#43;){\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;input %d\\n&amp;#34;&lt;/span&gt;,i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%s%f&amp;#34;&lt;/span&gt;,&amp;amp;x.no,x.name,&amp;amp;x.price);\n            getchar();\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (insertSqList(L,i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,x) &amp;#61;&amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n               printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;表已满&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n               &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n        }\n    }\n    return &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "编译预处理", "Question": ["请问这个顺序表管理系统怎么修改", ["请问这个顺序表写的图书信息管理系统怎么修改，目前调试出来问题在insert", "\n", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "\n//（", "1", "）编译预处理命令\n", "#include \"stdio.h\"", "\n", "#include \"stdlib.h\"//分配内存 ", "\n", "#include \"conio.h\"", "\n", "#include \"string.h\"", "\n//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "\n//（", "2", "）自定义数据类型(typedef)\n//先定义图书数据的数据类型\ntypedef struct {\n   ", "int", " ", "no", ";", "//num", "ber\n   char name[", "32", "];", "//nam", "e\n   float price;", "//pri", "ce\n}STD;\n", "//", "再定义顺序表数据类型：\ntypedef  struct {\nSTD *data; ", "//da", "ta是一个指向STD类型的指针变量\n", "int", "  listSize;", "//", "表容量 \n", "int", "  ", "length", ";", "//", "实际数据个数 \n}SQList;\n", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "\n//（", "3", "）各个函数的声明\n", "int", " menu();\n", "int", " initSqList(SQList *L,", "int", " max);", "//", "初始化 \n", "int", " dispSqList(SQList L);\n", "int", " insertSqList(SQList *L, ", "int", " i, STD ", "x", ");\n", "int", " deleteSqList(SQList *L, ", "int", " i, STD *", "x", ");\n", "int", " locateSqList(SQList L, STD ", "x", ");\n", "int", " updateSqList(SQList L, ", "int", " i, STD ", "x", ");\n", "int", " createSqList(SQList *L,", "int", " max,STD ", "x", ");\n", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "\n//（", "4", "）主函数的定义\n", "int", " main()\n{\n    ", "int", " t=", "1", ",n, maxSize;", "//", " float fs=.0f;有时候不做这个浮点初始化操作程序会报错\n    SQList L;STD s;\n\n\n    ", "while", "(t){\n        n=menu( );", "//", "显示主菜单 \n        switch(n){\n        ", "//", "初始化图书数据\n        case ", "1", ":\n            ", "printf", "(", "\"请输入需要创建的图书数量：\"", ");\n            scanf(", "\"%d\"", ",&maxSize);\n            initSqList(&L, maxSize);\n\n            ", "break", ";\n\n        ", "//", "插入图书数据\n        case ", "2", ":\n            ", "printf", "(", "\"请输入需要插入图书的编号、书名、价格，用空格隔开：\\n\"", ");\n            scanf(", "\"%d%s%f\"", ",&s.no,s.name, &s.price);\n            ", "int", " ", "pos", ";\n            ", "printf", "(", "\"请输入插入位置:\\n\"", ");\n            scanf(", "\"%d\"", ",&", "pos", ");\n            insertSqList(&L,", "pos", ",s);\n            ", "break", ";\n\n        ", "//", "删除图书数据\n        case ", "3", ":\n            ", "printf", "(", "\"请输入删除图书书名：\\n\"", ");\n            scanf(", "\"%s\"", ",s.name);\n            ", "pos", "=locateSqList(L,s);\n            ", "if", "(", "pos", "==L.length+", "1", ") \n                ", "printf", "(", "\"不存在该图书数据\\n\"", ");\n            ", "else", "\n            {\n                deleteSqList(&L, ", "pos", ", &s);\n                ", "printf", "(", "\"删除的图书数据为：%d %10s %7.2f\\n\"", ", s.no,s.name, s.price);\n            }\n\n            ", "break", ";\n\n        ", "//", "显示图书数据\n        case ", "4", ":\n            dispSqList(L);\n            ", "break", ";\n\n        ", "//", "更新图书数据\n        case ", "5", ":\n            ", "printf", "(", "\"请输入需要修改的图书编号、名称、价格，用空格隔开：\\n\"", ");\n            scanf(", "\"%d%s%f\"", ",&s.no,s.name,&s.price);\n            n=locateSqList(L,s);\n            updateSqList(L,n,s);\n        \n            ", "break", ";\n        case ", "6", ":\n            createSqList(&L,maxSize,s);\n            ", "break", ";\n\n        ", "//", "退出\n        case ", "0", ":\n            t = ", "0", ";\n            ", "break", ";\n\n        ", "//", "错误处理\n        default: \n            ", "printf", "(", "\"输入有误！\\n\"", ");\n\n        }\n    }\n\n}\n//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "//", "\n//（", "5", "）各个函数的定义\n", "int", " menu(){\n    ", "int", " n;\n    ", "//s", "ystem(", "\"cls\"", ");", "//", "清屏\n    ", "printf", "(", "\"****welcome to book management system****\\n\"", ");\n    ", "printf", "(", "\"   1、initialize    2、insert\\n\"", ");\n    ", "printf", "(", "\"   3、delete        4、display\\n\"", ");\n    ", "printf", "(", "\"   5、update        6、create\\n\"", ");\n    ", "printf", "(", "\"   7、exit\\n\"", ");\n    ", "printf", "(", "\"*****************************************\\n\"", ");\n    ", "printf", "(", "\"choose function(0-6)：\"", ");\n    scanf(", "\"%d\"", ",&n);\n    ", "return", " n;\n}\n\n//初始化操作：", "1", ".分配内存 ", "2", ".给结构体变量赋值（", "length", ",listsize) \n \n", "int", " initSqList(SQList *L,", "int", " max){\n    L->data=(STD*)malloc(max*sizeof(STD));\n    ", "if", "(L->data=NULL){\n        ", "printf", "(", "\"申请内存失败！\"", ");\n        ", "exit", "(", "0", ");\n    }\n    L->listSize=max;\n    L->", "length", "=", "0", ";\n    ", "return", " ", "1", ";\n}\n", "int", " dispSqList(SQList L){\n    ", "if", "(L.data=", "0", "){\n        ", "printf", "(", "\"没有信息！\"", ");\n    }\n    ", "printf", "(", "\"编号 书名 价格\\n \"", ");\n    ", "printf", "(", "\"%d\"", ",L.length);\n    ", "for", "(", "int", " i=", "0", ";i<L.length;i++){\n        ", "printf", "(", "\"%d %s %f\\n\"", ",L.data[i].no,L.data[i].name,L.data[i].price);\n    }\n    ", "return", " ", "1", ";\n}\n", "int", " insertSqList(SQList *L, ", "int", " i, STD ", "x", "){\n    ", "if", "(i<", "1", "){\n        ", "printf", "(", "\"1error\"", ");\n        ", "return", " ", "0", ";\n    }\n    ", "if", "(L->", "length", ">=L->listSize){\n        ", "printf", "(", "\"2error\"", ");\n        ", "return", " ", "0", ";\n    }\n    ", "if", "(L->", "length", "=", "0", "){\n        L->data[L->", "length", "]=", "x", ";\n        ++L->", "length", ";\n        ", "return", " ", "1", ";\n    }\n    ", "printf", "(", "\"%d\"", ",L->", "length", ");\n    ", "/*else {\n        for(int k=L->length;k>=i-1;k--){\n        L->data[k+1]=L->data[k];\n    }\n    L->data[i-1]=x;\n    ++L->length;\n    return 1;\n    }*/", "\n}\n", "int", " deleteSqList(SQList *L, ", "int", " i, STD *", "x", "){\n    ", "if", "(i<", "1", "||i>L->", "length", ")", "return", " ", "0", ";\n    ", "if", "(L->listSize>=L->", "length", ")", "return", " ", "0", ";\n    *", "x", "=L->data[i-", "1", "];\n    ", "for", "(", "int", " k=i-", "1", ";k<L->", "length", ";k++){\n        L->data[k]=L->data[k+", "1", "];        \n    }\n    L->", "length", "=L->", "length", "-", "1", ";\n    ", "return", " ", "1", ";\n}\n\n", "int", " locateSqList(SQList L, STD ", "x", "){\n    ", "if", "(L.length==", "0", ")", "return", " ", "0", ";\n    ", "for", "(", "int", " i=", "0", ";i<L.length-", "1", ";i++){\n        ", "if", "(strcmp(L.data[i].name,x.name)==", "0", "&&L.data[i].no==x.no&&L.data[i].price==x.price)", "return", " i+", "1", ";\n    }\n}\n", "int", " updateSqList(SQList L, ", "int", " i, STD ", "x", "){\n    ", "if", "(i<", "1", "||i>L.length-", "1", ")", "return", " ", "0", ";\n    ", "if", "(L.length==", "0", ")", "return", " ", "0", ";\n    L.data[i-", "1", "]=", "x", ";\n    ", "return", " ", "1", ";\n}\n", "int", " createSqList(SQList *L,", "int", " maxSize,STD ", "x", "){\n    ", "int", " n=", "0", ";\n    char c;\n    initSqList(L, maxSize);\n    ", "for", "(", "int", " i=", "0", ";i<maxSize;){\n        ", "printf", "(", "\"input %d\\n\"", ",i+", "1", ");\n        scanf(", "\"%d%s%f\"", ",&x.no,x.name,&x.price);\n        getchar();\n        insertSqList(L,++i,", "x", ");\n    }\n    ", "return", " ", "1", ";\n}\n\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;我们展开来看你就明白了&amp;#xff0c;printf(FORMAT, FORMAT);&lt;br /&gt;相当于printf(&amp;#34;%s! C is cool!\\n&amp;#34;, &amp;#34;%s! C is cool!\\n&amp;#34;);&lt;br /&gt;那么第一个%s表示的就是占位符&amp;#xff0c;表示后一个字符串&amp;#xff0c;而后一个%s表示普通字符&amp;#xff0c;&lt;br /&gt;所以先输出后面的字符串&amp;#xff0c;应为有\\n所以换行再输出! C is cool!\\n&lt;/p&gt;", "Konwledge_Point": "编译预处理", "Question": ["C入门，关于预处理的问题", ["在学习C primer plus 时遇到这样的代码", "\n", "#include <stdio.h>", "#define FORMAT \"%s! C is cool!\\n\"", "int main(void)", "{", "      printf(FORMAT,FORMAT);", "      return 0;", "}", "\n", "通过vs 2022编译后是", "%s! C is cool!\\n", "! C is cool!\\n", "\n", "请问为什么第二行没有%s啊"]], "Tag": "程序设计"}
{"Answer": "已经找到架构师解决此问题", "Konwledge_Point": "编译预处理", "Question": ["（请大神们看描述，标题说不好）hibernate 返回对象预处理问题", ["问题1：", "\n一个查询返回的集合，返回的集合部分字段需要处理成前端可读内容。如某字段存储的是数字格式的IP'12345678'需要查询后转换为字符串'1.1.1.1'。以前的做法就是写一个转换类，迭代集合然后重新封装返回。但是总感觉这样效率极低，尤其是转换的内容较多，转换方式复杂的时候。想找到一个好办法解决这个问题。开始是想在数据库写函数，但是第一无法实现所有业务上的转换，再一个跟踪维护较为费神。后来朋友提了一个想法。如list 《bean》类型数据 在bean对应的set方法里增加处理。数据查询返回后直接是转换好的集合。感觉找到了思路。由于最近没有编译环境没办法实际证实。我对hibernate只限于使用不确定此方法是否可行，请各位大神指点", "\n问题二：", "\n    后来想到了另一种业务场景 返回的内容是list《map《String,object》》 结构。", "\nmap中部分key  value需要转换 并且 某些key value 的转换 基于其他key value进行判断而进行。 这种情况下我首先想到的是自定义一个hashMap 类。然后进行转换处理。再hibernate返回集合中返回此类型的list《myMapS《String,object》》.由于有基于其他key的判断转换。此类我最后编不下去了。想到有没有熟悉hibernate原理的。再hibernate 每存入一条list 的时候，进行一次预处理。这是我觉得最理想的方法。", "\n期待CSDN大神们给出思路，解决这个问题。十分感谢。"]], "Tag": "程序设计"}
{"Answer": "朋友，.cpp可不是用来include的，你需要整理出一个seg.h来，然后引用这个.h", "Konwledge_Point": "编译预处理", "Question": ["导入*.cpp文件后，编译出现错误error LNK2005", ["seg.cpp的代码功能是预处理图片/检测图片", "\n现在Cpig.cpp中加入include < seg.cpp >", "\n出现如下错误：", "\n\n", "1>------ 已启动全部重新生成: 项目: AnimalsFatMeasure, 配置: Release x64 ------\n1>stdafx.cpp\n1>AnimalsFatMeasure.cpp\n1>AnimalsFatMeasureDlg.cpp\n1>Cpig.cpp\n1>INFOR.cpp\n1>seg.cpp\n1>seg.obj : error LNK2005: \"class cv::Mat g_srcImage\" (?g_srcImage@@3VMat@cv@@A) 已经在 Cpig.obj 中定义\n1>seg.obj : error LNK2005: \"class cv::Mat g_grayImage\" (?g_grayImage@@3VMat@cv@@A) 已经在 Cpig.obj 中定义\n1>seg.obj : error LNK2005: \"class cv::Mat out_therImage\" (?out_therImage@@3VMat@cv@@A) 已经在 Cpig.obj 中定义\n1>seg.obj : error LNK2005: \"class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > saveImage\" (?saveImage@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A) 已经在 Cpig.obj 中定义\n1>seg.obj : error LNK2005: \"class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > file_save\" (?file_save@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A) 已经在 Cpig.obj 中定义\n1>Cpig.obj : error LNK2005: \"float __cdecl Zfhanliang(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)\" (?Zfhanliang@@YAMV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z) 已经在 Cpig.obj 中定义\n1>Cpig.obj : error LNK2005: \"bool __cdecl Jh12(int,int)\" (?Jh12@@YA_NHH@Z) 已经在 Cpig.obj 中定义\n", "\n\n", "具体代码如下", "\nseg.cpp", "\n\n", "#include\"stdafx.h\"\n#include <iostream>\n#include<opencv2\\opencv.hpp>\n#include<opencv2/imgproc/imgproc.hpp>\n#include<vector>\n#include<math.h>\n#include<algorithm>\n#include<time.h>\n#include<io.h>\n#include<stdio.h>\n#include<string>\n//#include<squares.cpp>\n\nusing namespace cv;\nusing namespace std;\n\nMat g_srcImage, g_grayImage, out_therImage;\nstring saveImage = \"preidentify/save\";\nstring file_save = \"middleidentify/\";\n", "\n\n", "Cpig.cpp代码如下", "\n\n", "#include \"Resource.h\"\n#include \"stdafx.h\"\n#include \"AnimalsFatMeasure.h\"\n#include \"Cpig.h\"\n#include \"afxdialogex.h\"\n#include \"INFOR.h\"\n#include <opencv2/opencv.hpp>\n#include \"seg.cpp\"\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;编译期间编译器就会生成所需要的函数然后调用它们呀&amp;#xff01;你可以调试的时候打开反汇编看一下&amp;#xff0c;你会看到汇编代码call了函数。就是已经生成并调用了&lt;/p&gt;", "Konwledge_Point": "编译预处理", "Question": ["“调用函数”以实例化模板函数这一概念具体是编译器什么时候对其处理的呢？", ["编译器会对cpp文件进行预处理、编译、汇编、链接后形成可执行程序。", "而通过编译和汇编后会把每个cpp文件转化成二进制指令形成.obj文件。", "链接的时候合并符号表，以填入被调用的函数地址。", "\n", "模板函数是在调用相关函数的时候隐式实例化，因此无法形成符号表，如果将模板函数的声明和定义分离，编译器会报链接错误，也就是在链接之前没有具体调用函数的过程。那么“调用函数”以实例化模板函数这一概念具体是编译器什么时候对其处理的呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;解决&amp;#xff0c;VS2017在涉及到改变控件ID号等信息时&amp;#xff0c;会检测当前目录下有没有recource.h文件&amp;#xff0c;如果没有则会根据当前的控件信息生成resource.h文件并自动放在当前目录下。如果之前的版本创建过resource.h文件且移动过位置&amp;#xff0c;会视为没有此文件&amp;#xff0c;生成新的resource.h并把改动保存在resource.h中&amp;#xff0c;但其在使用时会使用之前版本的resource.h&amp;#xff0c;故可以通过手动移动新resource.h并替换旧resource.h或复制新resource.h中的信息至旧resource.h中来记录下新的改动&amp;#xff0c;从而使VS能够检测到新声明的控件ID等信息。&lt;/p&gt;", "Konwledge_Point": "编译预处理", "Question": ["VS2017如何设置新创建文件的生成目录？", ["  （1）在添加窗口或控件后会在目录A下生成文件b来保存配置信息，但在编译链接阶段程序会和目录C下的同名文件b进行链接，导致新添加的窗口和控件找不到对应的信息而报错（之前采取手动修改文件的方式可以避免，现在有问题（2）的出现需要从根本上处理，目前估计为需要更改工程链接的目录或者生成文件时的目录）。", "\n\n", "  （2）为窗口添加新的类后，类的源文件执行时会执行预处理文件，与（1）相同。在目录A下生成的此文件在目录C中本身也存在一个同名文件，且类的头文件和源文件生成目录也与工程本身的规范习惯不匹配，且两个预处理文件差异较大，故当前也需要处理。"]], "Tag": "程序设计"}
{"Answer": "optimizer='Adam' 你写错了。", "Konwledge_Point": "编译预处理", "Question": ["目前正在学习机器学习，在spyder下出现了关键字无效", ["我的目的是想要通过反序列化重构训练好的网络", "\nmodel.json   model.h5是我已经训练好的模型，我以save_weights()方法将模型权值参数保存到本地。", "\n希望各位大佬看看这是怎么回事", "\n\n", "它提示关键字无效", "\n\n", "01   import numpy as np\n02   from tensorflow.keras.datasets.mnist import load_data\n03   from tensorflow.keras.models import model_from_json\n04   # 导入数据\n05   (X_train,y_train), (X_test, y_test) = load_data()\n06   # 获取图片的大小\n07   in_shape = X_train.shape[1:]           # 形状为(28, 28)\n08   # 获取数字图片的种类\n09   n_classes = len(np.unique(y_train))    #类别数为10\n10   \n11   #数据预处理，将0～255缩放到0～1范围\n12   x_train = X_train.astype('float32') / 255.0\n13   x_test = X_test.astype('float32') / 255.0\n14   \n15   #读入模型文件\n16   json_file = open('model.json', 'r')\n17   loaded_model_json = json_file.read()\n18   json_file.close()\n19   #反序列化：导入模型拓扑结构\n20   loaded_model = model_from_json(loaded_model_json)\n21   # 反序列化：将权值导入到加载的模型中\n22   loaded_model.load_weights(\"model.h5\")\n23   print(\"成功：从本地文件中导入权值参数！\")\n24   #编译导入的模型\n25   loaded_model.compile(optimizer='adam',\n26                 loss='sparse_categorical_crossentropy',\n27                 metrics=['accuracy'])\n28   # 测试模型是否可用\n29   loss, acc = loaded_model.evaluate(x_test, y_test, verbose=0)\n30   print('测试集合的预测准确率:{0:.2f}%'.format(acc * 100))\n\n", "\n\n", "在此跪谢大佬们可以看看怎么回事"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这个问题还是提的挺好的&amp;#xff0c;主要就是需要考虑float 和doubule 在内存中的分布情况。这个你可以网上搜一下。&lt;br /&gt;就这个代码&amp;#xff0c;我们先直接来看第 3 处&amp;#xff0c;我给你看下x 在内存中的分布&amp;#xff1a;&lt;br /&gt;(gdb) p x&lt;br /&gt;$3 &amp;#61; 0.099999999860301614&lt;br /&gt;(gdb) p &amp;amp;x&lt;br /&gt;$4 &amp;#61; (double *) 0x7fffffffe210&lt;br /&gt;(gdb) x /16g 0x7fffffffe210&lt;br /&gt;0x7fffffffe210:    0x3fb9999999000000    0x4139999966666666&lt;/p&gt;\n&lt;p&gt;看到了没0x7fffffffe210 为x 的内存地址&amp;#xff0c;占用8个字节的话&amp;#xff0c;值在内存中为 0x3fb9999999000000&amp;#xff0c;转换成十进制为 0.099999999860301614 &amp;#xff0c;所以&amp;#xff0c;用你的宏定义&amp;#xff0c;那肯定是0.000000&lt;/p&gt;\n&lt;p&gt;再来看下第 2 处&amp;#xff0c;虽然是宏定义&amp;#xff0c;但是在内存中这两个数是存放在静态区的&amp;#xff0c;所以&amp;#xff0c;结果跟第 3 处基本是一样的。&lt;/p&gt;\n&lt;p&gt;至于第 1 处&amp;#xff0c;本身在内存中的数就是0.1&amp;#xff0c;所以&amp;#xff0c;打印出来也是0.100000&lt;/p&gt;\n&lt;p&gt;希望对你有帮助&amp;#xff0c;有其他问题&amp;#xff0c;也可以随时问我。&lt;/p&gt;", "Konwledge_Point": "编译预处理", "Question": ["【C语言】定义一个宏命令，实现对一个数值保留小数点后一位有效数字的问题疑问？", ["问题遇到的现象和发生背景", "\n", "我写了一个保留小数点后一位有效数字的宏定义，不进行四舍五入处理，如下所示：", "\n", "#define PRECISION_1", "(x)", " ", "(((double)", "((int32_t)", "((x)", " * ", "10", "))) / ", "10", ")\n", "\n", "问题相关代码，请勿粘贴截图", "\n", "测试用例如下所示：", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n", "#", "include", " ", "<stdint.h>", "\n\n", "#", "define", " PRECISION_1(x) (((double)((int32_t)((x) * 10))) / 10)", "\n\n", "int", " ", "main", "()", "\n", "{\n    ", "printf", "(", "\"result=%lf\\n\"", ", ", "PRECISION_1", "(", "3.1415926", "));\n    ", "double", " temp = ", "0.100000", ";\n    ", "printf", "(", "\"temp=%lf, result=%lf\\n\"", ", temp, ", "PRECISION_1", "(temp)); ", "// --1", "\n    ", "printf", "(", "\"result=%lf\\n\"", ", ", "PRECISION_1", "(", "0.100000", "));\n    ", "printf", "(", "\"result=%lf\\n\"", ", ", "PRECISION_1", "(", "1677721.400000", "-1677721.300000", ")); ", "// --2", "\n    ", "double", " x = ", "1677721.4", "-1677721.3", ";\n    ", "// float x = 1677721.4-1677721.3;  //改成float类型，结果又是正确的，离谱啊！", "\n    ", "printf", "(", "\"x=%lf, result=%lf\\n\"", ", x, ", "PRECISION_1", "(x)); ", "// --3", "\n    ", "return", " ", "0", ";\n}\n", "\n", "运行结果及报错内容", "\n", "使用 GCC 编译器进行编译：gcc test.c -o test (可以加 -std=c99 或 -std=c11)", "运行结果如下：./test", "\n", "result", "=", "3", ".", "100000", "\n", "temp", "=", "0", ".", "100000", ", result=", "0", ".", "100000", "\n", "result", "=", "0", ".", "100000", "\n", "result", "=", "0", ".", "000000", "\n", "x", "=", "0", ".", "100000", ", result=", "0", ".", "000000", "\n", "\n", "可以看到上述代码第1处、第2处和第3处的 result 输出结果是有区别的，让人匪夷所思！", "\n", "我的解答思路和尝试过的方法", "\n", "我对 test.c 源码进行预处理后：gcc -E test.c -o test.i，打开 test.i 文件，关键代码如下：", "\n", "......\n", "typedef", " ", "int", " ", "int32_t", ";\n......\n# ", "7", " ", "\"test3.c\"", "\n", "int", " ", "main", "()", "\n", "{\n    ", "printf", "(", "\"result=%lf\\n\"", ", (((", "double", ")((", "int32_t", ")((", "3.1415926", ") * ", "10", "))) / ", "10", "));\n    ", "double", " temp = ", "0.100000", ";\n    ", "printf", "(", "\"temp=%lf, result=%lf\\n\"", ", temp, (((", "double", ")((", "int32_t", ")((temp) * ", "10", "))) / ", "10", "));\n    ", "printf", "(", "\"result=%lf\\n\"", ", (((", "double", ")((", "int32_t", ")((", "0.100000", ") * ", "10", "))) / ", "10", "));\n    ", "printf", "(", "\"result=%lf\\n\"", ", (((", "double", ")((", "int32_t", ")((", "1677721.400000", "-1677721.300000", ") * ", "10", "))) / ", "10", "));\n    ", "double", " x = ", "1677721.4", "-1677721.3", ";\n    ", "printf", "(", "\"x=%lf, result=%lf\\n\"", ", x, (((", "double", ")((", "int32_t", ")((x) * ", "10", "))) / ", "10", "));\n    ", "return", " ", "0", ";\n}\n", "\n", "我想要达到的结果", "\n", "我这里不明白的是，为什么上述代码第1处、第2处和第3处的运行结果一个是0.100000，而另外两个却是0.000000，这让我感到很奇怪！", "变量temp和x的值都是0.100000，PRECISION_1(temp)的结果是0.100000，而PRECISION_1(x)的值却是0.000000，离大谱啊！", "\n", "还请C/C++语言开发们帮忙解答一下呀，感谢了！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这个错误提示是因为在构建项目时&amp;#xff0c;链接库文件libmetis.a和项目文件test-mslr.cpp之间没有连接上。可以在add_executable(test-mslr ./preconditioner/test_mslr.cpp)之后添加一行target_link_libraries(test-mslr libmetis.a)来链接库文件和项目文件。或者是你链接错了库&amp;#xff0c;应该是target_link_libraries(test-mslr libmetis.a)。&lt;/p&gt;\n&lt;p&gt;修改代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;cmake_minimum_required&lt;/span&gt;(VERSION &lt;span class=\"hljs-number\"&gt;3.21&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;project&lt;/span&gt;(PMSLS-clion-version)\n\n&lt;span class=\"hljs-keyword\"&gt;set&lt;/span&gt;(CMAKE_CXX_STANDARD &lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;)\n\n&lt;span class=\"hljs-keyword\"&gt;set&lt;/span&gt;(CMAKE_CXX_FLAGS &lt;span class=\"hljs-string\"&gt;&amp;#34;${CMAKE_CXX_FLAGS} -Wall -fexec-charset&amp;#61;UTF-8&amp;#34;&lt;/span&gt;)\n\n&lt;span class=\"hljs-keyword\"&gt;set&lt;/span&gt;(INC_DIR D:/METIS/&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;)   &lt;span class=\"hljs-comment\"&gt;# metis.h所在目录&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;set&lt;/span&gt;(LINK_DIR D:/METIS/bin/libmetis) &lt;span class=\"hljs-comment\"&gt;# libmetis.a所在目录&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;include_directories&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;${INC_DIR}&lt;/span&gt;) &lt;span class=\"hljs-comment\"&gt;#导入第三方库头文件&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;link_directories&lt;/span&gt;(&lt;span class=\"hljs-variable\"&gt;${LINK_DIR}&lt;/span&gt;)   &lt;span class=\"hljs-comment\"&gt;#链接第三方库文件&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# 其他本项目自定义头文件&amp;#xff08;相对路径&amp;#xff09;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;include_directories&lt;/span&gt;(\n        configure_files\n        &lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;/MatrixClass\n        &lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;/VectorClass\n        &lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;/SolverClass\n        preconditioner\n        solver\n)\n\n&lt;span class=\"hljs-comment\"&gt;#测试MSLR预处理&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;add_executable&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;test&lt;/span&gt;-mslr ./preconditioner/test_mslr.cpp)\n\n&lt;span class=\"hljs-comment\"&gt;#链接项目和第三方库metis&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;target_link_libraries&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;test&lt;/span&gt;-mslr libmetis.a)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这样修改之后&amp;#xff0c;在重新编译项目时应该不会出现“undefined reference”错误了。&lt;/p&gt;", "Konwledge_Point": "编译预处理", "Question": ["clion使用第三方软件包时遇到“undefined reference”错误", ["问题遇到的现象和发生背景", "\n", "如题，我使用的软件包叫metis，是用来求图划分的（软件包见", "提取码：9aun ", "），之前怀疑是编译器不兼容，重新编译了整个软件包之后调用其中的api时仍然报undefined reference错误，被这个问题折磨了整整一周，太心累了……", "\n", "完整项目配置信息", "\n", "我用的开发软件是clion，编译器是mingw，我一开始以为往clion工程文件中引入第三方库也就是改个cmakelist文件的事，结果发现没那么简单，相关配置文件如下：", "\n", "cmake_minimum_required", "(VERSION ", "3.21", ")\n", "project", "(PMSLS-clion-version)\n\n", "set", "(CMAKE_CXX_STANDARD ", "11", ")\n\n", "set", "(CMAKE_CXX_FLAGS ", "\"${CMAKE_CXX_FLAGS} -Wall -fexec-charset=UTF-8\"", ")\n\n", "set", "(INC_DIR D:/METIS/", "include", ")   ", "# metis.h所在目录", "\n", "set", "(LINK_DIR D:/METIS/bin/libmetis) ", "# libmetis.a所在目录", "\n", "include_directories", "(", "${INC_DIR}", ") ", "#导入第三方库头文件", "\n", "link_directories", "(", "${LINK_DIR}", ")   ", "#链接第三方库文件", "\n\n", "# 其他本项目自定义头文件（相对路径）", "\n", "include_directories", "(\n        configure_files\n        ", "include", "/MatrixClass\n        ", "include", "/VectorClass\n        ", "include", "/SolverClass\n        preconditioner\n        solver\n)\n\n", "#测试MSLR预处理", "\n", "add_executable", "(", "test", "-mslr ./preconditioner/test_mslr.cpp)\n\n", "#链接项目和第三方库metis", "\n", "target_link_libraries", "(PMSLS-clion-version libmetis.a)\n", "\n", "运行结果及详细报错内容", "\n", "于是重运行cmakelist之后没有错误提示，但点击构建项目时就出现了如下报错信息：", "\n", "====================[ 构建 | ", "test", "-mslr | Debug ]==================================\n", "\"C:\\Program Files\\JetBrains\\CLion 2022.2.4\\bin\\cmake\\win\\bin\\cmake.exe\"", " --build C:\\Users\\24987\\CLionProjects\\PMSLS-clion-", "version", "\\cmake-build-debug --target ", "test", "-mslr -j 9\n[1/1] Linking CXX executable ", "test", "-mslr.exe\nFAILED: ", "test", "-mslr.exe \ncmd.exe /C ", "\"cd . && C:\\PROGRA~1\\JETBRA~1\\CLION2~1.4\\bin\\mingw\\bin\\G__~1.EXE -Wall -fexec-charset=UTF-8 -g  CMakeFiles/test-mslr.dir/preconditioner/test_mslr.cpp.obj -o test-mslr.exe -Wl,--out-implib,libtest-mslr.dll.a -Wl,--major-image-version,0,--minor-image-version,0 -LD:/METIS/bin/libmetis -lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32 && cd .\"", "\nC:\\", "Program", " Files\\JetBrains\\CLion 2022.2.4\\bin\\mingw\\bin/ld.exe: CMakeFiles/", "test", "-mslr.", "dir", "/preconditioner/test_mslr.cpp.obj: ", "in", " function `int mslr::CsrMatrixMetisKway<double>(", "mat", "::CSRMatrix<double>&, unsigned int&, ", "vec", "::GeneralVector<unsigned int>&, bool, ", "vec", "::GeneralVector<unsigned int>&, unsigned int&, ", "vec", "::GeneralVector<unsigned int>&, ", "vec", "::GeneralVector<unsigned int>&)':\nC:/Users/24987/CLionProjects/PMSLS-clion-", "version", "/preconditioner/MSLR.cpp:262: undefined reference to ", "`METIS_PartGraphKway'", "\nC:\\", "Program", " Files\\JetBrains\\CLion 2022.2.4\\bin\\mingw\\bin/ld.exe: C:/Users/24987/CLionProjects/PMSLS-clion-", "version", "/preconditioner/MSLR.cpp:268: undefined reference to ", "`METIS_PartGraphRecursive'", "\ncollect2.exe: ", "error", ": ld returned 1 ", "exit", " status\nninja: build stopped: subcommand failed.\n", "\n", "总的说来，就是编译器认为我没有定义metis软件包中的“METIS_PartGraphKway”函数和“METIS_PartGraphRecursive”函数，但显然，一切都写在了原软件包中，我仅仅只是导入使用而已，调用函数的代码如下：", "\n", "/* 其他代码略 */", "\n        ", "//官方建议划分子图个数超过8，建议使用METIS_PartGraphKway;小规模划分使用METIS_PartGraphRecursive，这样可以得到更高质量的解", "\n        ", "if", " (lnum_dom >= ", "8", ") {\n            ", "METIS_PartGraphKway(&", "lnrows", ", &", "ncon", ", ", "xadj", ".", "getFirstValuePtr", "()", ", adjncy.get", "FirstValuePtr()", ",\n                                vwgt.get", "FirstValuePtr()", ", NULL, adjwgt.get", "FirstValuePtr()", ", &lnum_dom,\n                                NULL, NULL, NULL, &ledgecut, lmap.get", "FirstValuePtr()", ");\n        } ", "else", " {\n            ", "METIS_PartGraphRecursive(&", "lnrows", ", &", "ncon", ", ", "xadj", ".", "getFirstValuePtr", "()", ", adjncy.get", "FirstValuePtr()", ",\n                                     vwgt.get", "FirstValuePtr()", ", NULL, adjwgt.get", "FirstValuePtr()", ", &lnum_dom,\n                                     NULL, NULL, NULL, &ledgecut, lmap.get", "FirstValuePtr()", ");\n        }\n", "\n", "着实不理解哪里出了问题，按理说clion的语法检查也没告警，不应该提示我undefined reference。原软件包头文件定义见下图：", "\n", "\n", "想要达到的结果", "\n", "如果有朋友主要使用clion写代码，并且可以成功让metis在clion中运行，请不吝指教！谢谢！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这个是 带参数的 python 程序文件。&lt;br /&gt;VS 应该也有对应输入参数的设置&lt;br /&gt;pycharm 是这个位置&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/969002519936117.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;比如这个这个程序命名为 work.py  &amp;#xff0c; 你要分析的文件是 doc1.txt&lt;br /&gt;一般就是去命令提示符下&amp;#xff0c; 直接运行即可。&lt;br /&gt;python work.py doc1.txt&lt;/p&gt;", "Konwledge_Point": "编译预处理", "Question": ["如何用python %s调用程序？", ["现有一段2008年的代码，其中的运行方法为", "\n", "python %s [", "<文件名匹配式>", " [", "<更多文件名匹配式>", "...]]\n\n", "\n", "但是尝试在vscode上运行则会报错，如下图", "\n", "在新版IDLE上运行则无响应：", "\n", "\n", "请问这个代码能如何被调用？谢谢！", "\n", "附上完整代码：", "\n", " \n", "# !/usr/bin/env python", "\n", "# This file has following encoding: utf-8", "\n", "######################## 模块文档 ########################", "\n", "\"\"\"\n“%s”汉语拼音-国际音标转换工具 2.1版（2007年9月16日）\n作者：徐清白(http://xuqingbai.googlepages.com)，首发于2007年8月6日\n授权：自由软件（GNU 通用公共许可证）\n要求：必须使用 Python 2.5 或更新版本的解释器运行\n用法：python %s [<文件名匹配式> [<更多文件名匹配式>...]]\n功能：从符合每个<文件名匹配式>的所有文件或标准输入流(stdin)读取汉语拼音文稿，\n      向标准输出流(stdout)写入经过转换得到国际音标文稿。结果仅供学习参考。\n注意：<文件名匹配式> 采用 UNIX shell 风格的 glob 匹配规则\n文稿格式：<单字拼音>[[ |']<更多单字拼音>...]\n其中：<单字拼音> = <汉语拼音字母串>[<声调标号>]\n      <声调标号> 取值1-5（对应四声和轻声）\n标音风格：适度严格的IPA音素音标＋部分汉语言学界专用符号\n详细的用户文档请参看“DOC_USERSGUIDE.html”文件\n\"\"\"", "\n", "######################## 模块导入 ########################", "\n", "import", " os, re\n", "######################## 全局变量 ########################", "\n", "# 三种字符集标志", "\nGB18030, GBK, UTF8 = ", "\"gb18030\"", ", ", "\"gbk\"", ", ", "\"utf8\"", "\n", "# 字符编码页解码失败标志", "\ndecodingFailed = ", "False", "  ", "# 初始状态：关闭", "\n", "# 正则表达式替换命令元组和内部标志", "\ncmdPairTuple = ", "tuple", "()  ", "# 预备空对象", "\nPATTERN, SUBST = ", "0", ", ", "1", "  ", "# 匹配段和替换段", "\n", "# 经过编译的正则表达式对象列表", "\nreList = []  ", "# 预备空对象", "\n", "# 创建正则表达式替换命令元组的默认设置表（固定集合对象）", "\ndefaultPrefSet = ", "frozenset", "([\n    ", "### 以下各行字符串，凡行首用#号注释者均表示无效；", "\n    ", "### 凡行首未用#号注释者均有效，效用如后面注释所述：", "\n    ", "# \"NUMBER_2_BY_AR4\",                      # 数字“二”有大开口度韵腹", "\n    ", "# \"AI_INC_NEAR_OPEN_FRONT\",               # ai/uai韵腹为舌面前次开元音", "\n    ", "# \"AIR_ANR_INC_NEAR_OPEN_CENTRAL\",        # air/anr韵腹为舌面央次低元音", "\n    ", "# \"CENTRAL_A_BY_SMALLCAPS_A\",             # “央a”采用小型大写[A]标明", "\n    ", "# \"IE_YUE_INC_SMALLCAPS_E\",               # ie/yue采用小型大写[E]标明", "\n    ", "# \"IE_YUE_INC_E\",                         # ie/yue采用[e]标明（覆盖上一条）", "\n    ", "# \"IAN_YUAN_AS_AN\",                       # ian/yuan韵腹和an一样", "\n    ", "# \"ONLY_YUAN_AS_AN\",                      # 仅yuan韵腹和an一样（覆盖上一条）", "\n    ", "# \"OU_INC_SCHWA\",                         # ou/iou采用舌面央中元音韵腹", "\n    ", "# \"IONG_BY_IUNG\",                         # iong韵母采用i韵头u韵腹", "\n    ", "# \"ASPIRATE_BY_TURNED_COMMA\",             # 采用反逗号弱送气符号", "\n    ", "# \"RHOTICITY_BY_RHOTIC_HOOK\",             # 儿化韵卷舌动作采用卷舌小钩", "\n    ", "# \"ONLY_ER_BY_RHOTIC_HOOK\",               # 只有er音节卷舌动作采用卷舌小钩", "\n    ", "# \"INITIAL_R_BY_VED_RETRO_FRIC\",          # 声母r为卷舌浊擦音而非卷舌通音", "\n    ", "# \"R_TURNED_WITH_HOOK\",                   # 严格采用卷舌通音符号", "\n    ", "# \"TRANSITIONAL_SCHWA_IN_ING\",            # ing有舌面央中元音韵腹", "\n    ", "# \"TRANSITIONAL_SCHWA_IN_UEN\",            # 合口un有舌面央中元音韵腹", "\n    ", "# \"NO_TRANSITIONAL_U\",                    # bo/po/mo/fo没有[u]韵头", "\n    ", "# \"SYLLABLE_JUNCTURE_BY_PLUS\",            # 音节间断采用开音渡+号而非.号", "\n    ", "# \"HTML_SUP_TAG_FOR_TONE_VALUE\",          # 调值采用HTML上标标签格式", "\n    ", "# \"HIDE_ALL_TONE_VALUE\",                  # 隐藏所有声调转换", "\n    ", "### 以下选项仅存设想，目前尚未实现：", "\n    ", "# \"RETROFLEX_INITIAL_STANDALONE\",         # 卷舌声母可成音节而无需舌尖元音", "\n    ", "# \"ZERO_INITIAL_HAS_CONSONANT\",           # 零声母有辅音", "\n])\n", "# 正则表达式替换命令元组一揽子创建设置方案（元组，[0]位为说明）", "\nrecipeLinWang1992 = (", "U\"林焘、王理嘉《语音学教程》\"", ",\n                     ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"AI_INC_NEAR_OPEN_FRONT\"", "\n                     )\nrecipeBeidaCN2004 = (", "U\"北京大学中文系《现代汉语》（重排本）\"", ",\n                     ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n                     ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ", ", "\"IONG_BY_IUNG\"", ", ", "\"IAN_YUAN_AS_AN\"", "\n                     )\nrecipeHuangLiao2002 = (", "U\"黄伯荣、廖序东《现代汉语》（增订三版）\"", ",\n                       ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"CENTRAL_A_BY_SMALLCAPS_A\"", ",\n                       ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ", ", "\"ONLY_YUAN_AS_AN\"", ", ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ",\n                       ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "\n                       )\nrecipeYangZhou1995 = (", "U\"杨润陆、周一民《现代汉语》（北师大文学院教材）\"", ",\n                      ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n                      ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "\n                      )\nrecipeYuan2001 = (", "U\"袁家骅等《汉语方言概要》（第二版重排）\"", ",\n                  ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n                  ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ", ", "\"IAN_YUAN_AS_AN\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n                  ", "\"IE_YUE_INC_E\"", "\n                  )\nrecipeTang2002 = (", "U\"唐作藩《音韵学教程》（第三版）\"", ",\n                  ", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n                  ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ", ", "\"IAN_YUAN_AS_AN\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n                  ", "\"IE_YUE_INC_E\"", ", ", "\"OU_INC_SCHWA\"", "\n                  )\n \n", "######################## 函数声明 ########################", "\n", "def", " ", "createCmdPairTuple", "(", "prefSet=defaultPrefSet", "):\n    ", "\"\"\"创建正则表达式替换命令元组\n    然后编译便于反复使用的匹配段正则表达式对象列表\n    参数prefSet是一个控制命令元组创建的选项设置序列\"\"\"", "\n    ", "### 预先处理同系列设置的覆盖关系——defaultPrefSet也可能让人动了手脚", "\n    prefSet = ", "set", "(prefSet)  ", "# 先换为可变集合副本，以防固定类型参数", "\n    ", "if", " ", "\"IE_YUE_INC_E\"", " ", "in", " prefSet ", "and", " ", "\"IE_YUE_INC_SMALLCAPS_E\"", " ", "in", " prefSet:\n        prefSet.remove(", "\"IE_YUE_INC_SMALLCAPS_E\"", ")\n    ", "if", " ", "\"ONLY_YUAN_AS_AN\"", " ", "in", " prefSet ", "and", " ", "\"IAN_YUAN_AS_AN\"", " ", "in", " prefSet:\n        prefSet.remove(", "\"IAN_YUAN_AS_AN\"", ")\n    ", "global", " cmdPairTuple\n    cmdPairTuple = (\n        ", "### 转换声母前的预处理", "\n        ", "# 音节间断与隔音符号", "\n        (", "R'([aoeiuvüê][1-5]?)([yw])'", ",  ", "# a/o/e前有元音时必须写隔音符号", "\n         ", "R\"\\1'\\2\"", "),  ", "# 标明不必写出隔音符号的音节间断", "\n        (", "R\"'\"", ", (", "R\"+\"", " ", "if", " ", "\"SYLLABLE_JUNCTURE_BY_PLUS\"", " ", "in", " prefSet ", "else", "\n                 ", "R\".\"", ")),  ", "# 音节间断（开音渡）标记", "\n        ", "# 兼容正规的印刷体字母ɡ/ɑ->g/a", "\n        (", "R\"ɡ\"", ", ", "R\"g\"", "),\n        (", "R\"ɑ\"", ", ", "R\"a\"", "),\n        ", "# 特殊的ê韵母，只能搭配零声母（“诶”字等）", "\n        (", "R\"(ê|ea)\"", ", ", "R\"ɛ\"", "),  ", "# ea是ê的GF 3006表示", "\n        ", "# 消除因可以紧邻韵腹充当声母或韵尾的辅音的歧义", "\n        (", "R\"r([aoeiu])\"", ", ", "R\"R\\1\"", "),  ", "# 声母r暂改为R，以免与卷舌标志r混淆", "\n        (", "R\"n([aoeiuvü])\"", ", ", "R\"N\\1\"", "),  ", "# 声母n暂改为N，以免与韵尾n/ng混淆", "\n        ", "# 需要排除式匹配转换的韵母", "\n        (", "R\"ng(?![aeu])\"", ", ", "R\"ŋ\"", "),  ", "# 双字母ng，后鼻音韵尾或自成音节", "\n        (", "R\"(?<![ieuyüv])e(?![inŋr])\"", ",\n         ", "R\"ɤ\"", "),  ", "# 单韵母e，此前已转换ea和声母r/n", "\n        (", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])er4\"", ",\n         (", "R\"ar4\"", " ", "if", " ", "\"NUMBER_2_BY_AR4\"", " ", "in", " prefSet ", "else", "\n          ", "R\"er4\"", ")),  ", "# 数字“二”是否有大开口度韵腹", "\n        (", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])ar4\"", ",\n         (", "R\"a˞4\"", " ", "if", " ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", " ", "in", " prefSet ", "else", "\n          ", "R\"ar4\"", ")),  ", "# 数字“二”也属于er音节，可特别选用小钩", "\n        (", "R\"a(?![ionŋ])\"", ", (", "R\"ᴀ\"", " ", "if", " ", "\"CENTRAL_A_BY_SMALLCAPS_A\"", " ", "in", " prefSet ", "else", "\n                           ", "R\"a\"", ")),  ", "# “央a”是否用小型大写[A]标明，已转换“二”", "\n        (", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])er\"", ",\n         (", "R\"ə˞\"", " ", "if", " ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", " ", "in", " prefSet ", "else", "\n          ", "R\"ər\"", ")),  ", "# 一般的卷舌单韵母er，此前已排除“二”", "\n        (", "R\"(?<![iuüv])er\"", ", ", "R\"ər\"", "),  ", "# 构成单韵母e的儿化韵的er", "\n        (", "R\"(?<=[bpmf])o(?![uŋ])\"", ",\n         (", "R\"o\"", " ", "if", " ", "\"NO_TRANSITIONAL_U\"", " ", "in", " prefSet ", "else", "\n          ", "R\"uo\"", ")),  ", "# bo/po/mo/fo是否有韵头u", "\n        ", "### 声母——无需转换m/f/n/l/s/r(但r可根据设置执行转换)", "\n        ", "# 送气清辅音声母", "\n        (", "R\"([ptk])\"", ", ", "R\"\\1ʰ\"", "),\n        (", "R\"q\"", ", ", "R\"tɕʰ\"", "),\n        (", "R\"(ch|ĉ)\"", ", ", "R\"tʂʰ\"", "),  ", "# 后者是ch的注音变体", "\n        (", "R\"c\"", ", ", "R\"tsʰ\"", "),  ", "# 此前已排除ch", "\n        ", "# 不送气清辅音声母", "\n        (", "R\"b\"", ", ", "R\"p\"", "),  ", "# 此前已排除送气的p/t/k", "\n        (", "R\"d\"", ", ", "R\"t\"", "),\n        (", "R\"g\"", ", ", "R\"k\"", "),  ", "# 此前已排除后鼻音双字母中的g，注意隔音", "\n        (", "R\"j\"", ", ", "R\"tɕ\"", "),\n        (", "R\"(zh|ẑ)\"", ", ", "R\"tʂ\"", "),  ", "# 后者是zh的注音变体", "\n        (", "R\"z\"", ", ", "R\"ts\"", "),  ", "# 此前已排除zh", "\n        ", "# 擦音声母", "\n        (", "R\"(sh|ŝ)\"", ", ", "R\"ʂ\"", "),  ", "# 后者是sh的注音变体", "\n        (", "R\"x\"", ", ", "R\"ɕ\"", "),  ", "# 声母x，排除后再转换h", "\n        (", "R\"h\"", ", ", "R\"x\"", "),  ", "# 声母h，此前已排除zh/ch/sh", "\n        ", "### 韵母", "\n        ", "# 舌尖元音韵母", "\n        (", "R\"(sʰ?)i\"", ", ", "R\"\\1ɿ\"", "),  ", "# zi/ci/si", "\n        (", "R\"([ʂR]ʰ?)i\"", ", ", "R\"\\1ʅ\"", "),  ", "# zhi/chi/shi/ri", "\n        ", "# 部分韵腹省略表示的韵母+隔音符号和韵头w/y", "\n        (", "R\"iu\"", ", ", "R\"iou\"", "),  ", "# 无需转换iou", "\n        (", "R\"ui\"", ", ", "R\"uei\"", "),  ", "# 无需转换uei", "\n        (", "R\"wu?\"", ", ", "R\"u\"", "),\n        (", "R\"yi?\"", ", ", "R\"i\"", "),  ", "# 此前已排除iu", "\n        ", "# 韵头[i]/[y]的韵母", "\n        (", "R\"iu|[üv]\"", ", ", "R\"y\"", "),  ", "# 转换ü/v，恢复yu/yue，准备yuan/yun", "\n        (", "R\"ian\"", ", (", "R\"ian\"", " ", "if", " ", "\"IAN_YUAN_AS_AN\"", " ", "in", " prefSet ", "else", "\n                   ", "R\"iɛn\"", ")),  ", "# 是否认为ian韵腹和an一样", "\n        (", "R\"yan\"", ", (", "R\"yan\"", " ", "if", " (", "\"ONLY_YUAN_AS_AN\"", " ", "in", " prefSet)\n                              ", "or", " (", "\"IAN_YUAN_AS_AN\"", " ", "in", " prefSet) ", "else", "\n                   ", "R\"yɛn\"", ")),  ", "# 是否认为yuan韵腹和an一样（覆盖上一选项）", "\n        (", "R\"(ɕʰ?)uan\"", ", (", "R\"\\1yan\"", " ", "if", " (", "\"ONLY_YUAN_AS_AN\"", " ", "in", " prefSet)\n                                     ", "or", " (", "\"IAN_YUAN_AS_AN\"", " ", "in", " prefSet) ", "else", "\n                        ", "R\"\\1yɛn\"", ")),  ", "# {j/q/x}uan，是否认为和an一样", "\n        (", "R\"(ɕʰ?)u\"", ", ", "R\"\\1y\"", "),  ", "# {j/q/x}u{e/n}韵头，此前已排除{j/q/x}uan", "\n        (", "R\"([iy])e(?!n)\"", ", (", "R\"\\1ᴇ\"", " ", "if", " ", "\"IE_YUE_INC_SMALLCAPS_E\"", " ", "in", " prefSet ", "else", "\n                            ", "R\"\\1e\"", ")),  ", "# ie/yue/üe/ve，此前已转换{j/q/x}u", "\n        (", "R\"([iy])e(?!n)\"", ", (", "R\"\\1e\"", " ", "if", " ", "\"IE_YUE_INC_E\"", " ", "in", " prefSet ", "else", "\n                            ", "R\"\\1ɛ\"", ")),  ", "# ie/yue是否采用[e]标明，此前已判断[E]", "\n        ", "# 舌面央中元音轻微过渡韵腹", "\n        (", "R\"iŋ\"", ", (", "R\"iəŋ\"", " ", "if", " ", "\"TRANSITIONAL_SCHWA_IN_ING\"", " ", "in", " prefSet ", "else", "\n                  ", "R\"iŋ\"", ")),  ", "# ing是否有舌面央中元音韵腹", "\n        (", "R\"(un|uen)\"", ", (", "R\"uən\"", " ", "if", " ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", " ", "in", " prefSet ", "else", "\n                        ", "R\"un\"", ")),  ", "# 合口un/uen过渡，此前已排除撮口[j/q/x]un", "\n        ", "# 后移的a", "\n        (", "R\"ao\"", ", ", "R\"ɑu\"", "),  ", "# 包括ao/iao，o改为u", "\n        (", "R\"aŋ\"", ", ", "R\"ɑŋ\"", "),  ", "# 包括ang/iang/uang", "\n        ", "# 韵母en/eng韵腹是舌面央中元音", "\n        (", "R\"e([nŋ])\"", ", ", "R\"ə\\1\"", "),\n        ", "# ong类韵母", "\n        (", "R\"ioŋ\"", ", (", "R\"iuŋ\"", " ", "if", " ", "\"IONG_BY_IUNG\"", " ", "in", " prefSet ", "else", "\n                   ", "R\"yŋ\"", ")),  ", "# iong的两种转换，此前yong已转换为iong", "\n        (", "R\"oŋ\"", ", ", "R\"uŋ\"", "),  ", "# ong，此前已排除iong", "\n        ", "### 儿化音变——无需转换ar/ir/ur/aur/our/yur", "\n        ", "# 舌尖元音韵母", "\n        (", "R\"[ɿʅ]r\"", ", ", "R\"ər\"", "),  ", "# {zh/ch/sh/r/z/c/s}ir", "\n        ", "# 鼻韵尾脱落和相应的韵腹元音替换", "\n        (", "R\"[aɛ][in]r\"", ", (", "R\"ɐr\"", " ", "if", " ", "\"AIR_ANR_INC_NEAR_OPEN_CENTRAL\"", " ", "in", " prefSet ", "else", "\n                         ", "R\"ar\"", ")),  ", "# air/anr韵尾脱落后的韵腹替换", "\n        (", "R\"eir|ənr\"", ", ", "R\"ər\"", "),  ", "# eir韵腹央化，韵尾脱落；enr韵尾脱落", "\n        (", "R\"([iy])r\"", ", ", "R\"\\1ər\"", "),  ", "# ir/yr增加央化韵腹", "\n        (", "R\"([iuy])nr\"", ", ", "R\"\\1ər\"", "),  ", "# inr/ynr/unr韵尾脱落后增加央化韵腹", "\n        (", "R\"iuŋr\"", ", ", "R\"iũr\"", "),  ", "# iungr(iongr的可选变换)", "\n        (", "R\"([iuy])ŋr\"", ", ", "R\"\\1ə̃r\"", "),  ", "# ingr/yngr/ungr韵尾脱落后增加央化鼻化韵腹", "\n        (", "R\"ŋr\"", ", ", "R\"̃r\"", "),  ", "# ang/eng韵尾儿化脱落后韵腹鼻化", "\n        ", "### 声母、韵母转换的善后扫尾工作", "\n        ", "# 处理儿化韵卷舌动作", "\n        (", "R\"r\"", ", (", "R\"˞\"", " ", "if", " ", "\"RHOTICITY_BY_RHOTIC_HOOK\"", " ", "in", " prefSet ", "else", "\n                 ", "R\"r\"", ")),  ", "# 是否先把儿化韵卷舌动作改为卷舌小钩", "\n        (", "R\"R\"", ", (", "R\"ʐ\"", " ", "if", " ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", " ", "in", " prefSet ", "else", "\n                 ", "R\"r\"", ")),  ", "# 恢复声母r，是否采用卷舌浊擦音表示声母r", "\n        ", "# 此前已处理完卷舌动作和声母，现在处理剩下的r字符的可选转换", "\n        (", "R\"r\"", ", (", "R\"ɻ\"", " ", "if", " ", "\"R_TURNED_WITH_HOOK\"", " ", "in", " prefSet ", "else", "\n                 ", "R\"r\"", ")),  ", "# 是否严格采用卷舌通音符号[ɻ]", "\n        ", "# 恢复声母n", "\n        (", "R\"N\"", ", ", "R\"n\"", "),  ", "# 此前已处理完单元音韵母e和ie/yue", "\n        ", "# 其他选项", "\n        (", "R\"ʰ\"", ", (", "R\"ʻ\"", " ", "if", " ", "\"ASPIRATE_BY_TURNED_COMMA\"", " ", "in", " prefSet ", "else", "\n                 ", "R\"ʰ\"", ")),  ", "# 是否采用反逗号送气符号", "\n        (", "R\"ai\"", ", (", "R\"æi\"", " ", "if", " ", "\"AI_INC_NEAR_OPEN_FRONT\"", " ", "in", " prefSet ", "else", "\n                  ", "R\"ai\"", ")),  ", "# （非儿化的）ai/uai韵腹为舌面前次开元音", "\n        (", "R\"ou\"", ", (", "R\"əu\"", " ", "if", " ", "\"OU_INC_SCHWA\"", " ", "in", " prefSet ", "else", "\n                  ", "R\"ou\"", ")),  ", "# ou/iou是否采用舌面央中元音韵腹", "\n        ", "### 声调", "\n        ", "# 先期处理", "\n        ((", "R\"[1-5]\"", " ", "if", " ", "\"HIDE_ALL_TONE_VALUE\"", " ", "in", " prefSet ", "else", "\n          ", "R\"5\"", "), ", "R\"\"", "),  ", "# 只隐藏轻声还是隐藏所有的声调转换", "\n        (", "R\"([1-4])\"", ",\n         (", "R\"<sup>\\1</sup>\"", " ", "if", " ", "\"HTML_SUP_TAG_FOR_TONE_VALUE\"", " ", "in", " prefSet ", "else", "\n          ", "R\"(\\1)\"", ")),  ", "# 隔离单个数字调号", "\n        ", "# 标出普通话调值", "\n        (", "\"([(>])1([)<])\"", ", ", "R\"\\1 55\\2\"", "),  ", "# 阴平（第一声）", "\n        (", "\"([(>])2([)<])\"", ", ", "R\"\\1 35\\2\"", "),  ", "# 阳平（第二声）", "\n        (", "\"([(>])3([)<])\"", ", ", "R\"\\1 214\\2\"", "),  ", "# 上声（第三声）", "\n        (", "\"([(>])4([)<])\"", ", ", "R\"\\1 51\\2\"", "),  ", "# 去声（第四声）", "\n        (", "\"([(>]) ([235])\"", ", ", "R\"\\1\\2\"", ")  ", "# 去掉此前标调值时加上的空格", "\n    )\n    ", "### 以上，替换命令元组创建完成！", "\n    ", "# 编译正则表达式对象，以便反复使用", "\n    ", "global", " reList\n    reList = ", "map", "(re.", "compile", ", [pair[PATTERN] ", "for", " pair ", "in", " cmdPairTuple])\n \n", "def", " ", "decodeLine", "(", "encodedLine", "):\n    ", "\"\"\"对每一行拼音字符串做字符编码页解码\"\"\"", "\n    ", "try", ":\n        decodedLine = encodedLine.decode(UTF8)\n    ", "except", " UnicodeDecodeError:  ", "# 如果不是UTF-8", "\n        ", "try", ":\n            decodedLine = encodedLine.decode(GB18030)\n        ", "except", " UnicodeDecodeError:  ", "# 如果GB-18030也不行", "\n            decodedLine = ", "\"\"", " + os.linesep  ", "# 解码失败，只能清空", "\n            ", "global", " decodingFailed\n            decodingFailed = ", "True", "  ", "# 设置字符编码页解码失败标志", "\n    ", "except", " UnicodeEncodeError:  ", "# wx中可能出现编码错误", "\n        decodedLine = encodedLine\n    ", "return", " decodedLine\n \n", "def", " ", "msgOnDecodingFailure", "(", "fileName=", "\"标准输入流\"", "):\n    ", "\"\"\"针对字符编码页解码失败的文件在事后通过标准错误流提出警告\"\"\"", "\n    ", "global", " decodingFailed\n    ", "if", " decodingFailed:  ", "# 检查上次文件处理中是否出现解码错误", "\n        sys.stderr.write((", "U\"%s 警告：%s解码失败！\"", " % (sys.argv[", "0", "], fileName)).encode(GBK) + os.linesep)\n        decodingFailed = ", "False", "  ", "# 重置字符集码页解码失败标志为关闭", "\n \n", "def", " ", "convertLine", "(", "pinyinLine", "):\n    ", "\"\"\"对每一行拼音字符串依次执行全部替换命令，像流编辑器sed一样工作\"\"\"", "\n    ", "# 以单个“#”开头的行不转换，当作注释行", "\n    ", "if", " pinyinLine.startswith(", "\"#\"", ") ", "and", " ", "not", " pinyinLine.startswith(", "\"##\"", "):\n        ", "return", " pinyinLine[", "1", ":]  ", "# 去掉开头的“#”后再返回", "\n    ", "# 以两个“#”开头的行，只保留一个“#”，然后继续", "\n    ", "if", " pinyinLine.startswith(", "\"##\"", "):\n        pinyinLine = pinyinLine[", "1", ":]\n    ipaLine = pinyinLine.lower()  ", "# 大写字母在替换过程中另有意义", "\n    ", "for", " eachRe, eachCmdPair ", "in", " ", "zip", "(reList, cmdPairTuple):\n        ipaLine = eachRe.sub(eachCmdPair[SUBST], ipaLine)\n    ", "return", " ipaLine\n \n", "def", " ", "convertPinyin2IPA", "(", "pinyinLines, linesep=", "\"\"", "):\n    ", "\"\"\"将汉语拼音文稿转换为国际音标文稿\n    参数pinyinLines是输入的字符串序列\n    参数linesep是行分隔符（对于fp.readlines()或s.splitlines(True)的输入，缺省即可）\"\"\"", "\n    ", "# 逐行处理解码和转换，有利于减少解码带来的乱码行", "\n    ipaLines = ", "map", "(convertLine, ", "map", "(decodeLine, pinyinLines))\n    ", "return", " linesep.join(ipaLines).encode(UTF8)  ", "# 必须按UTF-8再encode一下", "\n \n", "######################## 主干函数 ########################", "\n", "def", " ", "Pinyin2IPA", "(", "pinyinLines, *prefs", "):\n    ", "\"\"\"创建转换命令，并将汉语拼音文稿转换为国际音标文稿\n        参数pinyinLines可以是字符串序列或单个字符串（后者也会包装进元组）\n        参数收集元组prefs是一个控制命令元组创建的选项设置表\"\"\"", "\n    ", "# 根据设置表创建替换命令元组（设置表缺省时提供默认值）", "\n    ", "if", " ", "not", " prefs:\n        prefs = defaultPrefSet\n    createCmdPairTuple(prefs)\n    ", "# 将单个字符串包装进元组，以便逐行处理", "\n    ", "if", " ", "isinstance", "(pinyinLines, ", "str", "):\n        pinyinLines = (pinyinLines,)\n    ", "return", " convertPinyin2IPA(pinyinLines)\n \n", "######################## 直接运行 ########################", "\n", "if", " __name__ == ", "'__main__'", ":\n    ", "import", " glob, locale, sys\n    globFailMsg = ", "U\"%s 错误：参数“%s”不能匹配任何有效的文件名！\"", "+ os.linesep\n    readFailMsg = ", "U\"%s 错误：文件“%s”数据读取失败！\"", "+ os.linesep\n    ", "if", " ", "len", "(sys.argv) > ", "1", ":\n        ", "if", " sys.argv[", "1", "].lower() ", "not", " ", "in", " (", "\"/?\"", ", ", "\"/h\"", ", ", "\"--help\"", ", ", "\"-h\"", "):\n            ", "for", " eachArg ", "in", " sys.argv[", "1", ":]:  ", "# 遍历glob表达式参数", "\n                fileNameList = glob.glob(eachArg)  ", "# 考虑DOS不负责glob解析", "\n                ", "if", " ", "not", " fileNameList:\n                    sys.stderr.write(globFailMsg % (sys.argv[", "0", "], eachArg))\n                ", "else", ":\n                    ", "for", " eachFileName ", "in", " fileNameList:\n                        ", "try", ":\n                            sys.stdout.write(Pinyin2IPA(", "open", "(eachFileName, ", "'r'", ").readlines()))\n                            msgOnDecodingFailure(", "U\"文件“%s”\"", " % eachFileName)\n                        ", "except", " IOError:\n                            sys.stderr.write(readFailMsg % (sys.argv[", "0", "], eachFileName))\n        ", "else", ":  ", "# 按照本地设置的编码方式输出模块文档作为简单帮助", "\n            language_dummy, encoding = locale.getdefaultlocale()\n            ", "print", "(__doc__ % (sys.argv[", "0", "], sys.argv[", "0", "])).encode(encoding)\n    ", "else", ":\n        sys.stdout.write(Pinyin2IPA(sys.stdin.readlines()))\n        msgOnDecodingFailure()\n", "######################## 脚本结束 ########################", "\n\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;字符串前加u,后面字符串以 Unicode格式进行编码&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-built_in\"&gt;exp&lt;/span&gt; &amp;#61; U&lt;span class=\"hljs-string\"&gt;&amp;#34;我是中文字符串” &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;字符串前加r 去掉反斜杠的转移机制。&amp;#xff08;特殊字符&amp;#xff1a;即那些&amp;#xff0c;反斜杠加上对应字母&amp;#xff0c;表示对应的特殊含义的&amp;#xff0c;比如最常见的”\\n”表示换行&amp;#xff0c;”\\t”表示Tab等。 &amp;#xff09;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-built_in\"&gt;exp&lt;/span&gt; &amp;#61; r&lt;span class=\"hljs-string\"&gt;&amp;#34;inin\\nin” #表示一个普通生字符串lnininin&amp;#xff0c;而不表示换行了。&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你将加U的注释去除&lt;br /&gt;如下 &lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;U&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;对每一行拼音字符串依次执行全部替换命令&amp;#xff0c;像流编辑器sed一样工作&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n改为\n&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;对每一行拼音字符串依次执行全部替换命令&amp;#xff0c;像流编辑器sed一样工作&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;将UR 改为R&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;U&lt;span class=\"hljs-string\"&gt;R&amp;#34;N&amp;#34;&lt;/span&gt;\n改为\n&lt;span class=\"hljs-string\"&gt;R&amp;#34;N&amp;#34;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;修改后代码如下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n\n&lt;span class=\"hljs-comment\"&gt;# !/usr/bin/env python&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# This file has following encoding: utf-8&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;######################## 模块文档 ########################&lt;/span&gt;\n&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n“%s”汉语拼音-国际音标转换工具 2.1版&amp;#xff08;2007年9月16日&amp;#xff09;\n作者&amp;#xff1a;徐清白(http://xuqingbai.googlepages.com)&amp;#xff0c;首发于2007年8月6日\n授权&amp;#xff1a;自由软件&amp;#xff08;GNU 通用公共许可证&amp;#xff09;\n要求&amp;#xff1a;必须使用 Python 2.5 或更新版本的解释器运行\n用法&amp;#xff1a;python %s [&amp;lt;文件名匹配式&amp;gt; [&amp;lt;更多文件名匹配式&amp;gt;...]]\n功能&amp;#xff1a;从符合每个&amp;lt;文件名匹配式&amp;gt;的所有文件或标准输入流(stdin)读取汉语拼音文稿&amp;#xff0c;\n      向标准输出流(stdout)写入经过转换得到国际音标文稿。结果仅供学习参考。\n注意&amp;#xff1a;&amp;lt;文件名匹配式&amp;gt; 采用 UNIX shell 风格的 glob 匹配规则\n文稿格式&amp;#xff1a;&amp;lt;单字拼音&amp;gt;[[ |&amp;#39;]&amp;lt;更多单字拼音&amp;gt;...]\n其中&amp;#xff1a;&amp;lt;单字拼音&amp;gt; &amp;#61; &amp;lt;汉语拼音字母串&amp;gt;[&amp;lt;声调标号&amp;gt;]\n      &amp;lt;声调标号&amp;gt; 取值1-5&amp;#xff08;对应四声和轻声&amp;#xff09;\n标音风格&amp;#xff1a;适度严格的IPA音素音标&amp;#xff0b;部分汉语言学界专用符号\n详细的用户文档请参看“DOC_USERSGUIDE.html”文件\n&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;######################## 模块导入 ########################&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; os, re\n\n&lt;span class=\"hljs-comment\"&gt;######################## 全局变量 ########################&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 三种字符集标志&lt;/span&gt;\nGB18030, GBK, UTF8 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;gb18030&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;gbk&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 字符编码页解码失败标志&lt;/span&gt;\ndecodingFailed &amp;#61; &lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 初始状态&amp;#xff1a;关闭&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 正则表达式替换命令元组和内部标志&lt;/span&gt;\ncmdPairTuple &amp;#61; &lt;span class=\"hljs-built_in\"&gt;tuple&lt;/span&gt;()  &lt;span class=\"hljs-comment\"&gt;# 预备空对象&lt;/span&gt;\nPATTERN, SUBST &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 匹配段和替换段&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 经过编译的正则表达式对象列表&lt;/span&gt;\nreList &amp;#61; []  &lt;span class=\"hljs-comment\"&gt;# 预备空对象&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;# 创建正则表达式替换命令元组的默认设置表&amp;#xff08;固定集合对象&amp;#xff09;&lt;/span&gt;\ndefaultPrefSet &amp;#61; &lt;span class=\"hljs-built_in\"&gt;frozenset&lt;/span&gt;([\n    &lt;span class=\"hljs-comment\"&gt;### 以下各行字符串&amp;#xff0c;凡行首用#号注释者均表示无效&amp;#xff1b;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;### 凡行首未用#号注释者均有效&amp;#xff0c;效用如后面注释所述&amp;#xff1a;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;NUMBER_2_BY_AR4&amp;#34;,                      # 数字“二”有大开口度韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;AI_INC_NEAR_OPEN_FRONT&amp;#34;,               # ai/uai韵腹为舌面前次开元音&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;AIR_ANR_INC_NEAR_OPEN_CENTRAL&amp;#34;,        # air/anr韵腹为舌面央次低元音&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;CENTRAL_A_BY_SMALLCAPS_A&amp;#34;,             # “央a”采用小型大写[A]标明&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;IE_YUE_INC_SMALLCAPS_E&amp;#34;,               # ie/yue采用小型大写[E]标明&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;IE_YUE_INC_E&amp;#34;,                         # ie/yue采用[e]标明&amp;#xff08;覆盖上一条&amp;#xff09;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;IAN_YUAN_AS_AN&amp;#34;,                       # ian/yuan韵腹和an一样&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;ONLY_YUAN_AS_AN&amp;#34;,                      # 仅yuan韵腹和an一样&amp;#xff08;覆盖上一条&amp;#xff09;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;OU_INC_SCHWA&amp;#34;,                         # ou/iou采用舌面央中元音韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;IONG_BY_IUNG&amp;#34;,                         # iong韵母采用i韵头u韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;,             # 采用反逗号弱送气符号&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;RHOTICITY_BY_RHOTIC_HOOK&amp;#34;,             # 儿化韵卷舌动作采用卷舌小钩&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;,               # 只有er音节卷舌动作采用卷舌小钩&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;,          # 声母r为卷舌浊擦音而非卷舌通音&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;R_TURNED_WITH_HOOK&amp;#34;,                   # 严格采用卷舌通音符号&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;TRANSITIONAL_SCHWA_IN_ING&amp;#34;,            # ing有舌面央中元音韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;,            # 合口un有舌面央中元音韵腹&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;NO_TRANSITIONAL_U&amp;#34;,                    # bo/po/mo/fo没有[u]韵头&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;SYLLABLE_JUNCTURE_BY_PLUS&amp;#34;,            # 音节间断采用开音渡&amp;#43;号而非.号&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;HTML_SUP_TAG_FOR_TONE_VALUE&amp;#34;,          # 调值采用HTML上标标签格式&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;HIDE_ALL_TONE_VALUE&amp;#34;,                  # 隐藏所有声调转换&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;### 以下选项仅存设想&amp;#xff0c;目前尚未实现&amp;#xff1a;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;RETROFLEX_INITIAL_STANDALONE&amp;#34;,         # 卷舌声母可成音节而无需舌尖元音&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# &amp;#34;ZERO_INITIAL_HAS_CONSONANT&amp;#34;,           # 零声母有辅音&lt;/span&gt;\n])\n&lt;span class=\"hljs-comment\"&gt;# 正则表达式替换命令元组一揽子创建设置方案&amp;#xff08;元组&amp;#xff0c;[0]位为说明&amp;#xff09;&lt;/span&gt;\nrecipeLinWang1992 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;林焘、王理嘉《语音学教程》&amp;#34;&lt;/span&gt;,\n                     &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;AI_INC_NEAR_OPEN_FRONT&amp;#34;&lt;/span&gt;\n                     )\nrecipeBeidaCN2004 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;北京大学中文系《现代汉语》&amp;#xff08;重排本&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                     &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;,\n                     &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;IONG_BY_IUNG&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt;\n                     )\nrecipeHuangLiao2002 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;黄伯荣、廖序东《现代汉语》&amp;#xff08;增订三版&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                       &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;CENTRAL_A_BY_SMALLCAPS_A&amp;#34;&lt;/span&gt;,\n                       &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_YUAN_AS_AN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt;,\n                       &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;\n                       )\nrecipeYangZhou1995 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;杨润陆、周一民《现代汉语》&amp;#xff08;北师大文学院教材&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                      &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;,\n                      &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;\n                      )\nrecipeYuan2001 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;袁家骅等《汉语方言概要》&amp;#xff08;第二版重排&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_E&amp;#34;&lt;/span&gt;\n                  )\nrecipeTang2002 &amp;#61; (&lt;span class=\"hljs-string\"&gt;U&amp;#34;唐作藩《音韵学教程》&amp;#xff08;第三版&amp;#xff09;&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt;,\n                  &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_E&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;OU_INC_SCHWA&amp;#34;&lt;/span&gt;\n                  )\n\n\n&lt;span class=\"hljs-comment\"&gt;######################## 函数声明 ########################&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;createCmdPairTuple&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;prefSet&amp;#61;defaultPrefSet&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;创建正则表达式替换命令元组\n    然后编译便于反复使用的匹配段正则表达式对象列表\n    参数prefSet是一个控制命令元组创建的选项设置序列&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;### 预先处理同系列设置的覆盖关系——defaultPrefSet也可能让人动了手脚&lt;/span&gt;\n    prefSet &amp;#61; &lt;span class=\"hljs-built_in\"&gt;set&lt;/span&gt;(prefSet)  &lt;span class=\"hljs-comment\"&gt;# 先换为可变集合副本&amp;#xff0c;以防固定类型参数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_E&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_SMALLCAPS_E&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet:\n        prefSet.remove(&lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_SMALLCAPS_E&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet:\n        prefSet.remove(&lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;global&lt;/span&gt; cmdPairTuple\n    cmdPairTuple &amp;#61; (\n        &lt;span class=\"hljs-comment\"&gt;### 转换声母前的预处理&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 音节间断与隔音符号&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#39;([aoeiuvüê][1-5]?)([yw])&amp;#39;&lt;/span&gt;,  &lt;span class=\"hljs-comment\"&gt;# a/o/e前有元音时必须写隔音符号&lt;/span&gt;\n         &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1&amp;#39;\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 标明不必写出隔音符号的音节间断&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;&amp;#43;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;SYLLABLE_JUNCTURE_BY_PLUS&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;.&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 音节间断&amp;#xff08;开音渡&amp;#xff09;标记&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 兼容正规的印刷体字母ɡ/ɑ-&amp;gt;g/a&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ɡ&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;g&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ɑ&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;a&amp;#34;&lt;/span&gt;),\n        &lt;span class=\"hljs-comment\"&gt;# 特殊的ê韵母&amp;#xff0c;只能搭配零声母&amp;#xff08;“诶”字等&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(ê|ea)&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɛ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ea是ê的GF 3006表示&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 消除因可以紧邻韵腹充当声母或韵尾的辅音的歧义&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;r([aoeiu])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;R\\1&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 声母r暂改为R&amp;#xff0c;以免与卷舌标志r混淆&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;n([aoeiuvü])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;N\\1&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 声母n暂改为N&amp;#xff0c;以免与韵尾n/ng混淆&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 需要排除式匹配转换的韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ng(?![aeu])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ŋ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 双字母ng&amp;#xff0c;后鼻音韵尾或自成音节&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![ieuyüv])e(?![inŋr])&amp;#34;&lt;/span&gt;,\n         &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɤ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 单韵母e&amp;#xff0c;此前已转换ea和声母r/n&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![bpmfdtNlgkhjqxzcsRiywuüv])er4&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ar4&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;NUMBER_2_BY_AR4&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;er4&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 数字“二”是否有大开口度韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![bpmfdtNlgkhjqxzcsRiywuüv])ar4&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;a˞4&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;ar4&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 数字“二”也属于er音节&amp;#xff0c;可特别选用小钩&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;a(?![ionŋ])&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ᴀ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;CENTRAL_A_BY_SMALLCAPS_A&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                           &lt;span class=\"hljs-string\"&gt;R&amp;#34;a&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# “央a”是否用小型大写[A]标明&amp;#xff0c;已转换“二”&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![bpmfdtNlgkhjqxzcsRiywuüv])er&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ə˞&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_ER_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;ər&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 一般的卷舌单韵母er&amp;#xff0c;此前已排除“二”&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;![iuüv])er&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 构成单韵母e的儿化韵的er&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(?&amp;lt;&amp;#61;[bpmf])o(?![uŋ])&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;o&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;NO_TRANSITIONAL_U&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;uo&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# bo/po/mo/fo是否有韵头u&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 声母——无需转换m/f/n/l/s/r(但r可根据设置执行转换)&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 送气清辅音声母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([ptk])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ʰ&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;q&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tɕʰ&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(ch|ĉ)&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tʂʰ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 后者是ch的注音变体&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;c&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tsʰ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除ch&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 不送气清辅音声母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;b&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;p&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除送气的p/t/k&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;d&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;t&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;g&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;k&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除后鼻音双字母中的g&amp;#xff0c;注意隔音&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;j&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tɕ&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(zh|ẑ)&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;tʂ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 后者是zh的注音变体&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;z&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ts&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除zh&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 擦音声母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(sh|ŝ)&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ʂ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 后者是sh的注音变体&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;x&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɕ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 声母x&amp;#xff0c;排除后再转换h&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;h&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;x&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 声母h&amp;#xff0c;此前已排除zh/ch/sh&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 韵母&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 舌尖元音韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(sʰ?)i&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ɿ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# zi/ci/si&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([ʂR]ʰ?)i&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ʅ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# zhi/chi/shi/ri&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 部分韵腹省略表示的韵母&amp;#43;隔音符号和韵头w/y&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iu&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;iou&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 无需转换iou&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ui&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;uei&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 无需转换uei&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;wu?&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;u&amp;#34;&lt;/span&gt;),\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;yi?&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;i&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已排除iu&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 韵头[i]/[y]的韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iu|[üv]&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;y&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 转换ü/v&amp;#xff0c;恢复yu/yue&amp;#xff0c;准备yuan/yun&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ian&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ian&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                   &lt;span class=\"hljs-string\"&gt;R&amp;#34;iɛn&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否认为ian韵腹和an一样&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;yan&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;yan&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet)\n                              &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet) &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                   &lt;span class=\"hljs-string\"&gt;R&amp;#34;yɛn&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否认为yuan韵腹和an一样&amp;#xff08;覆盖上一选项&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(ɕʰ?)uan&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1yan&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;ONLY_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet)\n                                     &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;IAN_YUAN_AS_AN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet) &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                        &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1yɛn&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# {j/q/x}uan&amp;#xff0c;是否认为和an一样&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(ɕʰ?)u&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1y&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# {j/q/x}u{e/n}韵头&amp;#xff0c;此前已排除{j/q/x}uan&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iy])e(?!n)&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ᴇ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_SMALLCAPS_E&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                            &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1e&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# ie/yue/üe/ve&amp;#xff0c;此前已转换{j/q/x}u&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iy])e(?!n)&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1e&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IE_YUE_INC_E&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                            &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ɛ&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# ie/yue是否采用[e]标明&amp;#xff0c;此前已判断[E]&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 舌面央中元音轻微过渡韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iŋ&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iəŋ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_ING&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                  &lt;span class=\"hljs-string\"&gt;R&amp;#34;iŋ&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# ing是否有舌面央中元音韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;(un|uen)&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;uən&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;TRANSITIONAL_SCHWA_IN_UEN&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                        &lt;span class=\"hljs-string\"&gt;R&amp;#34;un&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 合口un/uen过渡&amp;#xff0c;此前已排除撮口[j/q/x]un&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 后移的a&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ao&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɑu&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 包括ao/iao&amp;#xff0c;o改为u&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;aŋ&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ɑŋ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 包括ang/iang/uang&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 韵母en/eng韵腹是舌面央中元音&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;e([nŋ])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ə\\1&amp;#34;&lt;/span&gt;),\n        &lt;span class=\"hljs-comment\"&gt;# ong类韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ioŋ&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iuŋ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IONG_BY_IUNG&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                   &lt;span class=\"hljs-string\"&gt;R&amp;#34;yŋ&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# iong的两种转换&amp;#xff0c;此前yong已转换为iong&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;oŋ&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;uŋ&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ong&amp;#xff0c;此前已排除iong&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 儿化音变——无需转换ar/ir/ur/aur/our/yur&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 舌尖元音韵母&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;[ɿʅ]r&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# {zh/ch/sh/r/z/c/s}ir&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 鼻韵尾脱落和相应的韵腹元音替换&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;[aɛ][in]r&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ɐr&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;AIR_ANR_INC_NEAR_OPEN_CENTRAL&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                         &lt;span class=\"hljs-string\"&gt;R&amp;#34;ar&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# air/anr韵尾脱落后的韵腹替换&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;eir|ənr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# eir韵腹央化&amp;#xff0c;韵尾脱落&amp;#xff1b;enr韵尾脱落&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iy])r&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ir/yr增加央化韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iuy])nr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ər&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# inr/ynr/unr韵尾脱落后增加央化韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;iuŋr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;iũr&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# iungr(iongr的可选变换)&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([iuy])ŋr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1ə̃r&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ingr/yngr/ungr韵尾脱落后增加央化鼻化韵腹&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ŋr&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;̃r&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# ang/eng韵尾儿化脱落后韵腹鼻化&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 声母、韵母转换的善后扫尾工作&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 处理儿化韵卷舌动作&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;˞&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;RHOTICITY_BY_RHOTIC_HOOK&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否先把儿化韵卷舌动作改为卷舌小钩&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;R&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ʐ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;INITIAL_R_BY_VED_RETRO_FRIC&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 恢复声母r&amp;#xff0c;是否采用卷舌浊擦音表示声母r&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 此前已处理完卷舌动作和声母&amp;#xff0c;现在处理剩下的r字符的可选转换&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ɻ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;R_TURNED_WITH_HOOK&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;r&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否严格采用卷舌通音符号[ɻ]&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 恢复声母n&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;N&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;n&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 此前已处理完单元音韵母e和ie/yue&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 其他选项&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ʰ&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ʻ&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;ASPIRATE_BY_TURNED_COMMA&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                 &lt;span class=\"hljs-string\"&gt;R&amp;#34;ʰ&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 是否采用反逗号送气符号&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ai&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;æi&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;AI_INC_NEAR_OPEN_FRONT&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                  &lt;span class=\"hljs-string\"&gt;R&amp;#34;ai&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# &amp;#xff08;非儿化的&amp;#xff09;ai/uai韵腹为舌面前次开元音&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;ou&amp;#34;&lt;/span&gt;, (&lt;span class=\"hljs-string\"&gt;R&amp;#34;əu&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;OU_INC_SCHWA&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                  &lt;span class=\"hljs-string\"&gt;R&amp;#34;ou&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# ou/iou是否采用舌面央中元音韵腹&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;### 声调&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 先期处理&lt;/span&gt;\n        ((&lt;span class=\"hljs-string\"&gt;R&amp;#34;[1-5]&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;HIDE_ALL_TONE_VALUE&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;5&amp;#34;&lt;/span&gt;), &lt;span class=\"hljs-string\"&gt;R&amp;#34;&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 只隐藏轻声还是隐藏所有的声调转换&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;R&amp;#34;([1-4])&amp;#34;&lt;/span&gt;,\n         (&lt;span class=\"hljs-string\"&gt;R&amp;#34;&amp;lt;sup&amp;gt;\\1&amp;lt;/sup&amp;gt;&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;HTML_SUP_TAG_FOR_TONE_VALUE&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; prefSet &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n          &lt;span class=\"hljs-string\"&gt;R&amp;#34;(\\1)&amp;#34;&lt;/span&gt;)),  &lt;span class=\"hljs-comment\"&gt;# 隔离单个数字调号&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;# 标出普通话调值&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;])1([)&amp;lt;])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1 55\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 阴平&amp;#xff08;第一声&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;])2([)&amp;lt;])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1 35\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 阳平&amp;#xff08;第二声&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;])3([)&amp;lt;])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1 214\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 上声&amp;#xff08;第三声&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;])4([)&amp;lt;])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1 51\\2&amp;#34;&lt;/span&gt;),  &lt;span class=\"hljs-comment\"&gt;# 去声&amp;#xff08;第四声&amp;#xff09;&lt;/span&gt;\n        (&lt;span class=\"hljs-string\"&gt;&amp;#34;([(&amp;gt;]) ([235])&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;R&amp;#34;\\1\\2&amp;#34;&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# 去掉此前标调值时加上的空格&lt;/span&gt;\n    )\n    &lt;span class=\"hljs-comment\"&gt;### 以上&amp;#xff0c;替换命令元组创建完成&amp;#xff01;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 编译正则表达式对象&amp;#xff0c;以便反复使用&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;global&lt;/span&gt; reList\n    reList &amp;#61; &lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(re.&lt;span class=\"hljs-built_in\"&gt;compile&lt;/span&gt;, [pair[PATTERN] &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; pair &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; cmdPairTuple])\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;decodeLine&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;encodedLine&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;对每一行拼音字符串做字符编码页解码&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt;:\n        decodedLine &amp;#61; encodedLine.decode(UTF8)\n    &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt; UnicodeDecodeError:  &lt;span class=\"hljs-comment\"&gt;# 如果不是UTF-8&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt;:\n            decodedLine &amp;#61; encodedLine.decode(GB18030)\n        &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt; UnicodeDecodeError:  &lt;span class=\"hljs-comment\"&gt;# 如果GB-18030也不行&lt;/span&gt;\n            decodedLine &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt; &amp;#43; os.linesep  &lt;span class=\"hljs-comment\"&gt;# 解码失败&amp;#xff0c;只能清空&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;global&lt;/span&gt; decodingFailed\n            decodingFailed &amp;#61; &lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 设置字符编码页解码失败标志&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt; UnicodeEncodeError:  &lt;span class=\"hljs-comment\"&gt;# wx中可能出现编码错误&lt;/span&gt;\n        decodedLine &amp;#61; encodedLine\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; decodedLine\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;msgOnDecodingFailure&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;fileName&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;标准输入流&amp;#34;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;针对字符编码页解码失败的文件在事后通过标准错误流提出警告&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;global&lt;/span&gt; decodingFailed\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; decodingFailed:  &lt;span class=\"hljs-comment\"&gt;# 检查上次文件处理中是否出现解码错误&lt;/span&gt;\n        sys.stderr.write((&lt;span class=\"hljs-string\"&gt;U&amp;#34;%s 警告&amp;#xff1a;%s解码失败&amp;#xff01;&amp;#34;&lt;/span&gt; % (sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], fileName)).encode(GBK) &amp;#43; os.linesep)\n        decodingFailed &amp;#61; &lt;span class=\"hljs-literal\"&gt;False&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 重置字符集码页解码失败标志为关闭&lt;/span&gt;\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;convertLine&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;pinyinLine&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;对每一行拼音字符串依次执行全部替换命令&amp;#xff0c;像流编辑器sed一样工作&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 以单个“#”开头的行不转换&amp;#xff0c;当作注释行&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; pinyinLine.startswith(&lt;span class=\"hljs-string\"&gt;&amp;#34;#&amp;#34;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; pinyinLine.startswith(&lt;span class=\"hljs-string\"&gt;&amp;#34;##&amp;#34;&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; pinyinLine[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:]  &lt;span class=\"hljs-comment\"&gt;# 去掉开头的“#”后再返回&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 以两个“#”开头的行&amp;#xff0c;只保留一个“#”&amp;#xff0c;然后继续&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; pinyinLine.startswith(&lt;span class=\"hljs-string\"&gt;&amp;#34;##&amp;#34;&lt;/span&gt;):\n        pinyinLine &amp;#61; pinyinLine[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:]\n    ipaLine &amp;#61; pinyinLine.lower()  &lt;span class=\"hljs-comment\"&gt;# 大写字母在替换过程中另有意义&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; eachRe, eachCmdPair &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;zip&lt;/span&gt;(reList, cmdPairTuple):\n        ipaLine &amp;#61; eachRe.sub(eachCmdPair[SUBST], ipaLine)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ipaLine\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;convertPinyin2IPA&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;pinyinLines, linesep&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;将汉语拼音文稿转换为国际音标文稿\n    参数pinyinLines是输入的字符串序列\n    参数linesep是行分隔符&amp;#xff08;对于fp.readlines()或s.splitlines(True)的输入&amp;#xff0c;缺省即可&amp;#xff09;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 逐行处理解码和转换&amp;#xff0c;有利于减少解码带来的乱码行&lt;/span&gt;\n    ipaLines &amp;#61; &lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(convertLine, &lt;span class=\"hljs-built_in\"&gt;map&lt;/span&gt;(decodeLine, pinyinLines))\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; linesep.join(ipaLines).encode(UTF8)  &lt;span class=\"hljs-comment\"&gt;# 必须按UTF-8再encode一下&lt;/span&gt;\n\n\n&lt;span class=\"hljs-comment\"&gt;######################## 主干函数 ########################&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;Pinyin2IPA&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;pinyinLines, *prefs&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;创建转换命令&amp;#xff0c;并将汉语拼音文稿转换为国际音标文稿\n        参数pinyinLines可以是字符串序列或单个字符串&amp;#xff08;后者也会包装进元组&amp;#xff09;\n        参数收集元组prefs是一个控制命令元组创建的选项设置表&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;# 根据设置表创建替换命令元组&amp;#xff08;设置表缺省时提供默认值&amp;#xff09;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; prefs:\n        prefs &amp;#61; defaultPrefSet\n    createCmdPairTuple(prefs)\n    &lt;span class=\"hljs-comment\"&gt;# 将单个字符串包装进元组&amp;#xff0c;以便逐行处理&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;isinstance&lt;/span&gt;(pinyinLines, &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;):\n        pinyinLines &amp;#61; (pinyinLines,)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; convertPinyin2IPA(pinyinLines)\n\n\n&lt;span class=\"hljs-comment\"&gt;######################## 直接运行 ########################&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__ &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; glob, locale, sys\n\n    globFailMsg &amp;#61; &lt;span class=\"hljs-string\"&gt;U&amp;#34;%s 错误&amp;#xff1a;参数“%s”不能匹配任何有效的文件名&amp;#xff01;&amp;#34;&lt;/span&gt;&amp;#43; os.linesep\n    readFailMsg &amp;#61; &lt;span class=\"hljs-string\"&gt;U&amp;#34;%s 错误&amp;#xff1a;文件“%s”数据读取失败&amp;#xff01;&amp;#34;&lt;/span&gt;&amp;#43; os.linesep\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(sys.argv) &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; sys.argv[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].lower() &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;/?&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;/h&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;--help&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;-h&amp;#34;&lt;/span&gt;):\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; eachArg &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; sys.argv[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:]:  &lt;span class=\"hljs-comment\"&gt;# 遍历glob表达式参数&lt;/span&gt;\n                fileNameList &amp;#61; glob.glob(eachArg)  &lt;span class=\"hljs-comment\"&gt;# 考虑DOS不负责glob解析&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; fileNameList:\n                    sys.stderr.write(globFailMsg % (sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], eachArg))\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n                    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; eachFileName &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; fileNameList:\n                        &lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt;:\n                            sys.stdout.write(Pinyin2IPA(&lt;span class=\"hljs-built_in\"&gt;open&lt;/span&gt;(eachFileName, &lt;span class=\"hljs-string\"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;).readlines()))\n                            msgOnDecodingFailure(&lt;span class=\"hljs-string\"&gt;U&amp;#34;文件“%s”&amp;#34;&lt;/span&gt; % eachFileName)\n                        &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt; IOError:\n                            sys.stderr.write(readFailMsg % (sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], eachFileName))\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:  &lt;span class=\"hljs-comment\"&gt;# 按照本地设置的编码方式输出模块文档作为简单帮助&lt;/span&gt;\n            language_dummy, encoding &amp;#61; locale.getdefaultlocale()\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(__doc__ % (sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], sys.argv[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])).encode(encoding)\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        sys.stdout.write(Pinyin2IPA(sys.stdin.readlines()))\n        msgOnDecodingFailure()\n&lt;span class=\"hljs-comment\"&gt;######################## 脚本结束 ########################&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "编译预处理", "Question": ["在python 2.5 的代码中出现的 “UR” 会导致程序错误，这是一个语法吗？应如何修改？", ["本人python初学者（只学到面向对象），在查找语言学相关资料时找到了“汉语拼音-国际音标转换工具” ，能有效进行音标转化。（", "http://py2ipa.sourceforge.net/", "）", "但是其使用的版本为python 2.5，其中cmdPairTuple函数里多次出现的UR代码意义不明且在网上也没有相关资料（107行左右），会导致程序出错。", "\n", "文件的完整代码如下：", "\n", "\n", "#!/usr/bin/env python", "\n", "# This file has following encoding: utf-8", "\n", "######################## 模块文档 ########################", "\n", "U\"\"\"\n“%s”汉语拼音-国际音标转换工具 2.1版（2007年9月16日）\n\n作者：徐清白(http://xuqingbai.googlepages.com)，首发于2007年8月6日\n授权：自由软件（GNU 通用公共许可证）\n\n要求：必须使用 Python 2.5 或更新版本的解释器运行\n\n用法：python %s [<文件名匹配式> [<更多文件名匹配式>...]]\n功能：从符合每个<文件名匹配式>的所有文件或标准输入流(stdin)读取汉语拼音文稿，\n      向标准输出流(stdout)写入经过转换得到国际音标文稿。结果仅供学习参考。\n注意：<文件名匹配式> 采用 UNIX shell 风格的 glob 匹配规则\n\n文稿格式：<单字拼音>[[ |']<更多单字拼音>...]\n其中：<单字拼音> = <汉语拼音字母串>[<声调标号>]\n      <声调标号> 取值1-5（对应四声和轻声）\n\n标音风格：适度严格的IPA音素音标＋部分汉语言学界专用符号\n\n详细的用户文档请参看“DOC_USERSGUIDE.html”文件\"\"\"", "\n", "######################## 模块导入 ########################", "\n", "import", " os, re\n", "######################## 全局变量 ########################", "\n", "# 三种字符集标志", "\nGB18030, GBK, UTF8 = ", "\"gb18030\"", ", ", "\"gbk\"", ", ", "\"utf8\"", "\n", "# 字符编码页解码失败标志", "\ndecodingFailed = ", "False", "  ", "# 初始状态：关闭", "\n", "# 正则表达式替换命令元组和内部标志", "\ncmdPairTuple = ", "tuple", "()  ", "# 预备空对象", "\nPATTERN, SUBST = ", "0", ", ", "1", "   ", "# 匹配段和替换段", "\n", "# 经过编译的正则表达式对象列表", "\nreList = []             ", "# 预备空对象", "\n", "# 创建正则表达式替换命令元组的默认设置表（固定集合对象）", "\ndefaultPrefSet = ", "frozenset", "([\n", "### 以下各行字符串，凡行首用#号注释者均表示无效；", "\n", "### 凡行首未用#号注释者均有效，效用如后面注释所述：", "\n", "# \"NUMBER_2_BY_AR4\",                      # 数字“二”有大开口度韵腹", "\n", "# \"AI_INC_NEAR_OPEN_FRONT\",               # ai/uai韵腹为舌面前次开元音", "\n", "# \"AIR_ANR_INC_NEAR_OPEN_CENTRAL\",        # air/anr韵腹为舌面央次低元音", "\n", "# \"CENTRAL_A_BY_SMALLCAPS_A\",             # “央a”采用小型大写[A]标明", "\n", "# \"IE_YUE_INC_SMALLCAPS_E\",               # ie/yue采用小型大写[E]标明", "\n", "# \"IE_YUE_INC_E\",                         # ie/yue采用[e]标明（覆盖上一条）", "\n", "# \"IAN_YUAN_AS_AN\",                       # ian/yuan韵腹和an一样", "\n", "# \"ONLY_YUAN_AS_AN\",                      # 仅yuan韵腹和an一样（覆盖上一条）", "\n", "# \"OU_INC_SCHWA\",                         # ou/iou采用舌面央中元音韵腹", "\n", "# \"IONG_BY_IUNG\",                         # iong韵母采用i韵头u韵腹", "\n", "# \"ASPIRATE_BY_TURNED_COMMA\",             # 采用反逗号弱送气符号", "\n", "# \"RHOTICITY_BY_RHOTIC_HOOK\",             # 儿化韵卷舌动作采用卷舌小钩", "\n", "# \"ONLY_ER_BY_RHOTIC_HOOK\",               # 只有er音节卷舌动作采用卷舌小钩", "\n", "# \"INITIAL_R_BY_VED_RETRO_FRIC\",          # 声母r为卷舌浊擦音而非卷舌通音", "\n", "# \"R_TURNED_WITH_HOOK\",                   # 严格采用卷舌通音符号", "\n", "# \"TRANSITIONAL_SCHWA_IN_ING\",            # ing有舌面央中元音韵腹", "\n", "# \"TRANSITIONAL_SCHWA_IN_UEN\",            # 合口un有舌面央中元音韵腹", "\n", "# \"NO_TRANSITIONAL_U\",                    # bo/po/mo/fo没有[u]韵头", "\n", "# \"SYLLABLE_JUNCTURE_BY_PLUS\",            # 音节间断采用开音渡+号而非.号", "\n", "# \"HTML_SUP_TAG_FOR_TONE_VALUE\",          # 调值采用HTML上标标签格式", "\n", "# \"HIDE_ALL_TONE_VALUE\",                  # 隐藏所有声调转换", "\n", "### 以下选项仅存设想，目前尚未实现：", "\n", "# \"RETROFLEX_INITIAL_STANDALONE\",         # 卷舌声母可成音节而无需舌尖元音", "\n", "# \"ZERO_INITIAL_HAS_CONSONANT\",           # 零声母有辅音", "\n])\n", "# 正则表达式替换命令元组一揽子创建设置方案（元组，[0]位为说明）", "\nrecipeLinWang1992 = (  ", "U\"林焘、王理嘉《语音学教程》\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"AI_INC_NEAR_OPEN_FRONT\"", "\n)\nrecipeBeidaCN2004 = (  ", "U\"北京大学中文系《现代汉语》（重排本）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ", ", "\"IONG_BY_IUNG\"", ", ", "\"IAN_YUAN_AS_AN\"", "\n)\nrecipeHuangLiao2002 = (", "U\"黄伯荣、廖序东《现代汉语》（增订三版）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"CENTRAL_A_BY_SMALLCAPS_A\"", ",\n", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ", ", "\"ONLY_YUAN_AS_AN\"", ", ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ",\n", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "\n)\nrecipeYangZhou1995 = ( ", "U\"杨润陆、周一民《现代汉语》（北师大文学院教材）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "\n)\nrecipeYuan2001 = (     ", "U\"袁家骅等《汉语方言概要》（第二版重排）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ", ", "\"IAN_YUAN_AS_AN\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n", "\"IE_YUE_INC_E\"", "\n)\nrecipeTang2002 = (     ", "U\"唐作藩《音韵学教程》（第三版）\"", ",\n", "\"NO_TRANSITIONAL_U\"", ", ", "\"ASPIRATE_BY_TURNED_COMMA\"", ", ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", ",\n", "\"ONLY_ER_BY_RHOTIC_HOOK\"", ", ", "\"IAN_YUAN_AS_AN\"", ", ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", ",\n", "\"IE_YUE_INC_E\"", ", ", "\"OU_INC_SCHWA\"", "\n)\n", "######################## 函数声明 ########################", "\n", "def", " ", "createCmdPairTuple", "(", "prefSet = defaultPrefSet", "):\n    ", "U\"\"\"创建正则表达式替换命令元组\n    然后编译便于反复使用的匹配段正则表达式对象列表\n    参数prefSet是一个控制命令元组创建的选项设置序列\"\"\"", "\n    ", "### 预先处理同系列设置的覆盖关系——defaultPrefSet也可能让人动了手脚", "\n    prefSet = ", "set", "(prefSet)           ", "# 先换为可变集合副本，以防固定类型参数", "\n    ", "if", " ", "\"IE_YUE_INC_E\"", "    ", "in", " prefSet ", "and", " ", "\"IE_YUE_INC_SMALLCAPS_E\"", " ", "in", " prefSet:\n        prefSet.remove(", "\"IE_YUE_INC_SMALLCAPS_E\"", ")\n    ", "if", " ", "\"ONLY_YUAN_AS_AN\"", " ", "in", " prefSet ", "and", " ", "\"IAN_YUAN_AS_AN\"", "         ", "in", " prefSet:\n        prefSet.remove(", "\"IAN_YUAN_AS_AN\"", ")\n    ", "global", " cmdPairTuple\n    cmdPairTuple = (\n    ", "### 转换声母前的预处理", "\n    ", "# 音节间断与隔音符号", "\n    (U", "R'([aoeiuvüê][1-5]?)([yw])'", ",   ", "# a/o/e前有元音时必须写隔音符号", "\n                    U", "R\"\\1'\\2\"", "),      ", "# 标明不必写出隔音符号的音节间断", "\n    (U", "R\"'\"", ",        (U", "R\"+\"", " ", "if", " ", "\"SYLLABLE_JUNCTURE_BY_PLUS\"", "      ", "in", " prefSet ", "else", "\n                    U", "R\".\"", ")),         ", "# 音节间断（开音渡）标记", "\n    ", "# 兼容正规的印刷体字母ɡ/ɑ->g/a", "\n    (U", "R\"ɡ\"", ",         U", "R\"g\"", "),\n    (U", "R\"ɑ\"", ",         U", "R\"a\"", "),\n    ", "# 特殊的ê韵母，只能搭配零声母（“诶”字等）", "\n    (U", "R\"(ê|ea)\"", ",    U", "R\"ɛ\"", "),          ", "# ea是ê的GF 3006表示", "\n    ", "# 消除因可以紧邻韵腹充当声母或韵尾的辅音的歧义", "\n    (U", "R\"r([aoeiu])\"", ",   U", "R\"R\\1\"", "),     ", "# 声母r暂改为R，以免与卷舌标志r混淆", "\n    (U", "R\"n([aoeiuvü])\"", ", U", "R\"N\\1\"", "),     ", "# 声母n暂改为N，以免与韵尾n/ng混淆", "\n    ", "# 需要排除式匹配转换的韵母", "\n    (U", "R\"ng(?![aeu])\"", ",  U", "R\"ŋ\"", "),       ", "# 双字母ng，后鼻音韵尾或自成音节", "\n    (U", "R\"(?<![ieuyüv])e(?![inŋr])\"", ",\n                       U", "R\"ɤ\"", "),       ", "# 单韵母e，此前已转换ea和声母r/n", "\n    (U", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])er4\"", ",\n                      (U", "R\"ar4\"", " ", "if", " ", "\"NUMBER_2_BY_AR4\"", "           ", "in", " prefSet ", "else", "\n                       U", "R\"er4\"", ")),    ", "# 数字“二”是否有大开口度韵腹", "\n    (U", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])ar4\"", ",\n                      (U", "R\"a˞4\"", " ", "if", " ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", "    ", "in", " prefSet ", "else", "\n                       U", "R\"ar4\"", ")),    ", "# 数字“二”也属于er音节，可特别选用小钩", "\n    (U", "R\"a(?![ionŋ])\"", ", (U", "R\"ᴀ\"", " ", "if", " ", "\"CENTRAL_A_BY_SMALLCAPS_A\"", "    ", "in", " prefSet ", "else", "\n                       U", "R\"a\"", ")),      ", "# “央a”是否用小型大写[A]标明，已转换“二”", "\n    (U", "R\"(?<![bpmfdtNlgkhjqxzcsRiywuüv])er\"", ",\n                       (U", "R\"ə˞\"", " ", "if", " ", "\"ONLY_ER_BY_RHOTIC_HOOK\"", "    ", "in", " prefSet ", "else", "\n                        U", "R\"ər\"", ")),    ", "# 一般的卷舌单韵母er，此前已排除“二”", "\n    (U", "R\"(?<![iuüv])er\"", ", U", "R\"ər\"", "),     ", "# 构成单韵母e的儿化韵的er", "\n    (U", "R\"(?<=[bpmf])o(?![uŋ])\"", ",\n                      (U", "R\"o\"", " ", "if", " ", "\"NO_TRANSITIONAL_U\"", "           ", "in", " prefSet ", "else", "\n                       U", "R\"uo\"", ")),     ", "# bo/po/mo/fo是否有韵头u", "\n    ", "### 声母——无需转换m/f/n/l/s/r(但r可根据设置执行转换)", "\n    ", "# 送气清辅音声母", "\n    (U", "R\"([ptk])\"", ",   U", "R\"\\1ʰ\"", "),\n    (U", "R\"q\"", ",         U", "R\"tɕʰ\"", "),\n    (U", "R\"(ch|ĉ)\"", ",    U", "R\"tʂʰ\"", "),        ", "# 后者是ch的注音变体", "\n    (U", "R\"c\"", ",         U", "R\"tsʰ\"", "),        ", "# 此前已排除ch", "\n    ", "# 不送气清辅音声母", "\n    (U", "R\"b\"", ",         U", "R\"p\"", "),          ", "# 此前已排除送气的p/t/k", "\n    (U", "R\"d\"", ",         U", "R\"t\"", "),\n    (U", "R\"g\"", ",         U", "R\"k\"", "),          ", "# 此前已排除后鼻音双字母中的g，注意隔音", "\n    (U", "R\"j\"", ",         U", "R\"tɕ\"", "),\n    (U", "R\"(zh|ẑ)\"", ",    U", "R\"tʂ\"", "),         ", "# 后者是zh的注音变体", "\n    (U", "R\"z\"", ",         U", "R\"ts\"", "),         ", "# 此前已排除zh", "\n    ", "# 擦音声母", "\n    (U", "R\"(sh|ŝ)\"", ",    U", "R\"ʂ\"", "),          ", "# 后者是sh的注音变体", "\n    (U", "R\"x\"", ",         U", "R\"ɕ\"", "),          ", "# 声母x，排除后再转换h", "\n    (U", "R\"h\"", ",         U", "R\"x\"", "),          ", "# 声母h，此前已排除zh/ch/sh", "\n    ", "### 韵母", "\n    ", "# 舌尖元音韵母", "\n    (U", "R\"(sʰ?)i\"", ",    U", "R\"\\1ɿ\"", "),        ", "# zi/ci/si", "\n    (U", "R\"([ʂR]ʰ?)i\"", ", U", "R\"\\1ʅ\"", "),        ", "# zhi/chi/shi/ri", "\n    ", "# 部分韵腹省略表示的韵母+隔音符号和韵头w/y", "\n    (U", "R\"iu\"", ",        U", "R\"iou\"", "),        ", "# 无需转换iou", "\n    (U", "R\"ui\"", ",        U", "R\"uei\"", "),        ", "# 无需转换uei", "\n    (U", "R\"wu?\"", ",       U", "R\"u\"", "),\n    (U", "R\"yi?\"", ",       U", "R\"i\"", "),          ", "# 此前已排除iu", "\n    ", "# 韵头[i]/[y]的韵母", "\n    (U", "R\"iu|[üv]\"", ",   U", "R\"y\"", "),          ", "# 转换ü/v，恢复yu/yue，准备yuan/yun", "\n    (U", "R\"ian\"", ",      (U", "R\"ian\"", " ", "if", " ", "\"IAN_YUAN_AS_AN\"", "               ", "in", " prefSet ", "else", "\n                    U", "R\"iɛn\"", ")),       ", "# 是否认为ian韵腹和an一样", "\n    (U", "R\"yan\"", ",      (U", "R\"yan\"", " ", "if", " (", "\"ONLY_YUAN_AS_AN\"", "             ", "in", " prefSet)\n                            ", "or", " (", "\"IAN_YUAN_AS_AN\"", "              ", "in", " prefSet) ", "else", "\n                    U", "R\"yɛn\"", ")),       ", "# 是否认为yuan韵腹和an一样（覆盖上一选项）", "\n    (U", "R\"(ɕʰ?)uan\"", ", (U", "R\"\\1yan\"", " ", "if", " (", "\"ONLY_YUAN_AS_AN\"", "           ", "in", " prefSet)\n                              ", "or", " (", "\"IAN_YUAN_AS_AN\"", "            ", "in", " prefSet) ", "else", "\n                    U", "R\"\\1yɛn\"", ")),     ", "# {j/q/x}uan，是否认为和an一样", "\n    (U", "R\"(ɕʰ?)u\"", ",    U", "R\"\\1y\"", "),        ", "# {j/q/x}u{e/n}韵头，此前已排除{j/q/x}uan", "\n    (U", "R\"([iy])e(?!n)\"", ",  (U", "R\"\\1ᴇ\"", " ", "if", " ", "\"IE_YUE_INC_SMALLCAPS_E\"", "  ", "in", " prefSet ", "else", "\n                         U", "R\"\\1e\"", ")),  ", "# ie/yue/üe/ve，此前已转换{j/q/x}u", "\n    (U", "R\"([iy])e(?!n)\"", ",  (U", "R\"\\1e\"", " ", "if", " ", "\"IE_YUE_INC_E\"", "            ", "in", " prefSet ", "else", "\n                         U", "R\"\\1ɛ\"", ")),  ", "# ie/yue是否采用[e]标明，此前已判断[E]", "\n    ", "# 舌面央中元音轻微过渡韵腹", "\n    (U", "R\"iŋ\"", ",       (U", "R\"iəŋ\"", " ", "if", " ", "\"TRANSITIONAL_SCHWA_IN_ING\"", "    ", "in", " prefSet ", "else", "\n                    U", "R\"iŋ\"", ")),        ", "# ing是否有舌面央中元音韵腹", "\n    (U", "R\"(un|uen)\"", ", (U", "R\"uən\"", " ", "if", " ", "\"TRANSITIONAL_SCHWA_IN_UEN\"", "    ", "in", " prefSet ", "else", "\n                    U", "R\"un\"", ")),        ", "# 合口un/uen过渡，此前已排除撮口[j/q/x]un", "\n    ", "# 后移的a", "\n    (U", "R\"ao\"", ",        U", "R\"ɑu\"", "),         ", "# 包括ao/iao，o改为u", "\n    (U", "R\"aŋ\"", ",        U", "R\"ɑŋ\"", "),         ", "# 包括ang/iang/uang", "\n    ", "# 韵母en/eng韵腹是舌面央中元音", "\n    (U", "R\"e([nŋ])\"", ",   U", "R\"ə\\1\"", "),\n    ", "# ong类韵母", "\n    (U", "R\"ioŋ\"", ",      (U", "R\"iuŋ\"", " ", "if", " ", "\"IONG_BY_IUNG\"", "                 ", "in", " prefSet ", "else", "\n                    U", "R\"yŋ\"", ")),        ", "# iong的两种转换，此前yong已转换为iong", "\n    (U", "R\"oŋ\"", ",        U", "R\"uŋ\"", "),         ", "# ong，此前已排除iong", "\n    ", "### 儿化音变——无需转换ar/ir/ur/aur/our/yur", "\n    ", "# 舌尖元音韵母", "\n    (U", "R\"[ɿʅ]r\"", ",     U", "R\"ər\"", "),         ", "# {zh/ch/sh/r/z/c/s}ir", "\n    ", "# 鼻韵尾脱落和相应的韵腹元音替换", "\n    (U", "R\"[aɛ][in]r\"", ",(U", "R\"ɐr\"", " ", "if", " ", "\"AIR_ANR_INC_NEAR_OPEN_CENTRAL\"", " ", "in", " prefSet ", "else", "\n                    U", "R\"ar\"", ")),        ", "# air/anr韵尾脱落后的韵腹替换", "\n    (U", "R\"eir|ənr\"", ",   U", "R\"ər\"", "),         ", "# eir韵腹央化，韵尾脱落；enr韵尾脱落", "\n    (U", "R\"([iy])r\"", ",   U", "R\"\\1ər\"", "),       ", "# ir/yr增加央化韵腹", "\n    (U", "R\"([iuy])nr\"", ", U", "R\"\\1ər\"", "),       ", "# inr/ynr/unr韵尾脱落后增加央化韵腹", "\n    (U", "R\"iuŋr\"", ",      U", "R\"iũr\"", "),        ", "# iungr(iongr的可选变换)", "\n    (U", "R\"([iuy])ŋr\"", ", U", "R\"\\1ə̃r\"", "),      ", "# ingr/yngr/ungr韵尾脱落后增加央化鼻化韵腹", "\n    (U", "R\"ŋr\"", ",        U", "R\"̃r\"", "),         ", "# ang/eng韵尾儿化脱落后韵腹鼻化", "\n    ", "### 声母、韵母转换的善后扫尾工作", "\n    ", "# 处理儿化韵卷舌动作", "\n    (U", "R\"r\"", ",        (U", "R\"˞\"", " ", "if", " ", "\"RHOTICITY_BY_RHOTIC_HOOK\"", "       ", "in", " prefSet ", "else", "\n                    U", "R\"r\"", ")),         ", "# 是否先把儿化韵卷舌动作改为卷舌小钩", "\n    (U", "R\"R\"", ",        (U", "R\"ʐ\"", " ", "if", " ", "\"INITIAL_R_BY_VED_RETRO_FRIC\"", "    ", "in", " prefSet ", "else", " \n                    U", "R\"r\"", ")),         ", "# 恢复声母r，是否采用卷舌浊擦音表示声母r", "\n    ", "# 此前已处理完卷舌动作和声母，现在处理剩下的r字符的可选转换", "\n    (U", "R\"r\"", ",        (U", "R\"ɻ\"", " ", "if", " ", "\"R_TURNED_WITH_HOOK\"", "             ", "in", " prefSet ", "else", "\n                    U", "R\"r\"", ")),         ", "# 是否严格采用卷舌通音符号[ɻ]", "\n    ", "# 恢复声母n", "\n    (U", "R\"N\"", ",         U", "R\"n\"", "),          ", "# 此前已处理完单元音韵母e和ie/yue", "\n    ", "# 其他选项", "\n    (U", "R\"ʰ\"", ",        (U", "R\"ʻ\"", " ", "if", " ", "\"ASPIRATE_BY_TURNED_COMMA\"", "       ", "in", " prefSet ", "else", "\n                    U", "R\"ʰ\"", ")),         ", "# 是否采用反逗号送气符号", "\n    (U", "R\"ai\"", ",       (U", "R\"æi\"", " ", "if", " ", "\"AI_INC_NEAR_OPEN_FRONT\"", "        ", "in", " prefSet ", "else", "\n                    U", "R\"ai\"", ")),        ", "# （非儿化的）ai/uai韵腹为舌面前次开元音", "\n    (U", "R\"ou\"", ",       (U", "R\"əu\"", " ", "if", " ", "\"OU_INC_SCHWA\"", "                  ", "in", " prefSet ", "else", "\n                    U", "R\"ou\"", ")),        ", "# ou/iou是否采用舌面央中元音韵腹", "\n    ", "### 声调", "\n    ", "# 先期处理", "\n    ((U", "R\"[1-5]\"", " ", "if", " ", "\"HIDE_ALL_TONE_VALUE\"", "                      ", "in", " prefSet ", "else", "\n      U", "R\"5\"", "),       U", "R\"\"", "),           ", "# 只隐藏轻声还是隐藏所有的声调转换", "\n    (U", "R\"([1-4])\"", ",\n      (U", "R\"<sup>\\1</sup>\"", " ", "if", " ", "\"HTML_SUP_TAG_FOR_TONE_VALUE\"", "     ", "in", " prefSet ", "else", "\n                    U", "R\"(\\1)\"", ")),      ", "# 隔离单个数字调号", "\n    ", "# 标出普通话调值", "\n    (", "\"([(>])1([)<])\"", ", U", "R\"\\1 55\\2\"", "),  ", "# 阴平（第一声）", "\n    (", "\"([(>])2([)<])\"", ", U", "R\"\\1 35\\2\"", "),  ", "# 阳平（第二声）", "\n    (", "\"([(>])3([)<])\"", ", U", "R\"\\1 214\\2\"", "), ", "# 上声（第三声）", "\n    (", "\"([(>])4([)<])\"", ", U", "R\"\\1 51\\2\"", "),  ", "# 去声（第四声）", "\n    (", "\"([(>]) ([235])\"", ",U", "R\"\\1\\2\"", ")      ", "# 去掉此前标调值时加上的空格", "\n    )\n    ", "### 以上，替换命令元组创建完成！", "\n    ", "# 编译正则表达式对象，以便反复使用", "\n    ", "global", " reList\n    reList = ", "map", "(re.", "compile", ", [pair[PATTERN] ", "for", " pair ", "in", " cmdPairTuple])\n", "def", " ", "decodeLine", "(", "encodedLine", "):\n    ", "U\"\"\"对每一行拼音字符串做字符编码页解码\"\"\"", "\n    ", "try", ":\n        decodedLine = encodedLine.decode(UTF8)\n    ", "except", " UnicodeDecodeError:             ", "# 如果不是UTF-8", "\n        ", "try", ":\n            decodedLine = encodedLine.decode(GB18030)\n        ", "except", " UnicodeDecodeError:         ", "# 如果GB-18030也不行", "\n            decodedLine = ", "\"\"", " + os.linesep  ", "# 解码失败，只能清空", "\n            ", "global", " decodingFailed\n            decodingFailed = ", "True", "          ", "# 设置字符编码页解码失败标志", "\n    ", "except", " UnicodeEncodeError:             ", "# wx中可能出现编码错误", "\n        decodedLine = encodedLine\n    ", "return", " decodedLine\n", "def", " ", "msgOnDecodingFailure", "(", "fileName = ", "\"标准输入流\"", "):\n    ", "U\"\"\"针对字符编码页解码失败的文件在事后通过标准错误流提出警告\"\"\"", "\n    ", "global", " decodingFailed\n    ", "if", " decodingFailed:                  ", "# 检查上次文件处理中是否出现解码错误", "\n        sys.stderr.write((", "U\"%s 警告：%s解码失败！\"", "%(sys.argv[", "0", "], fileName)).encode(GBK) + os.linesep)\n        decodingFailed = ", "False", "          ", "# 重置字符集码页解码失败标志为关闭", "\n", "def", " ", "convertLine", "(", "pinyinLine", "):\n    ", "U\"\"\"对每一行拼音字符串依次执行全部替换命令，像流编辑器sed一样工作\"\"\"", "\n    ", "# 以单个“#”开头的行不转换，当作注释行", "\n    ", "if", " pinyinLine.startswith(", "\"#\"", ") ", "and", " ", "not", " pinyinLine.startswith(", "\"##\"", "):\n        ", "return", " pinyinLine[", "1", ":]           ", "# 去掉开头的“#”后再返回", "\n    ", "# 以两个“#”开头的行，只保留一个“#”，然后继续", "\n    ", "if", " pinyinLine.startswith(", "\"##\"", "):\n        pinyinLine = pinyinLine[", "1", ":]\n    ipaLine = pinyinLine.lower()        ", "# 大写字母在替换过程中另有意义", "\n    ", "for", " eachRe, eachCmdPair ", "in", " ", "zip", "(reList, cmdPairTuple):\n        ipaLine = eachRe.sub(eachCmdPair[SUBST], ipaLine)\n    ", "return", " ipaLine\n", "def", " ", "convertPinyin2IPA", "(", "pinyinLines, linesep=", "\"\"", "):\n    ", "U\"\"\"将汉语拼音文稿转换为国际音标文稿\n    参数pinyinLines是输入的字符串序列\n    参数linesep是行分隔符（对于fp.readlines()或s.splitlines(True)的输入，缺省即可）\"\"\"", "\n    ", "# 逐行处理解码和转换，有利于减少解码带来的乱码行", "\n    ipaLines = ", "map", "(convertLine, ", "map", "(decodeLine, pinyinLines))\n    ", "return", " linesep.join(ipaLines).encode(UTF8)  ", "# 必须按UTF-8再encode一下", "\n", "######################## 主干函数 ########################", "\n", "def", " ", "Pinyin2IPA", "(", "pinyinLines, *prefs", "):\n    ", "U\"\"\"创建转换命令，并将汉语拼音文稿转换为国际音标文稿\n        参数pinyinLines可以是字符串序列或单个字符串（后者也会包装进元组）\n        参数收集元组prefs是一个控制命令元组创建的选项设置表\"\"\"", "\n    ", "# 根据设置表创建替换命令元组（设置表缺省时提供默认值）", "\n    ", "if", " ", "not", " prefs:\n        prefs = defaultPrefSet\n    createCmdPairTuple(prefs)\n    ", "# 将单个字符串包装进元组，以便逐行处理", "\n    ", "if", " ", "isinstance", "(pinyinLines, ", "str", "):\n        pinyinLines = (pinyinLines, )\n    ", "return", " convertPinyin2IPA(pinyinLines)\n", "######################## 直接运行 ########################", "\n", "if", " __name__ == ", "'__main__'", ":\n    ", "import", " glob, locale, sys\n    globFailMsg = ", "U\"%s 错误：参数“%s”不能匹配任何有效的文件名！\"", ".encode(GBK) + os.linesep\n    readFailMsg = ", "U\"%s 错误：文件“%s”数据读取失败！\"", ".encode(GBK) + os.linesep\n    ", "if", " ", "len", "(sys.argv) > ", "1", ":\n        ", "if", " sys.argv[", "1", "].lower() ", "not", " ", "in", " (", "\"/?\"", ", ", "\"/h\"", ", ", "\"--help\"", ", ", "\"-h\"", "):\n            ", "for", " eachArg ", "in", " sys.argv[", "1", ":]:              ", "# 遍历glob表达式参数", "\n                fileNameList = glob.glob(eachArg)     ", "# 考虑DOS不负责glob解析", "\n                ", "if", " ", "not", " fileNameList:\n                    sys.stderr.write(globFailMsg%(sys.argv[", "0", "], eachArg))\n                ", "else", ":\n                    ", "for", " eachFileName ", "in", " fileNameList:\n                        ", "try", ":\n                            sys.stdout.write(Pinyin2IPA(", "open", "(eachFileName, ", "'r'", ").readlines()))\n                            msgOnDecodingFailure(", "U\"文件“%s”\"", "%eachFileName)\n                        ", "except", " IOError:\n                            sys.stderr.write(readFailMsg%(sys.argv[", "0", "], eachFileName))\n        ", "else", ":  ", "# 按照本地设置的编码方式输出模块文档作为简单帮助", "\n            language_dummy, encoding = locale.getdefaultlocale()\n            ", "print", " (__doc__%(sys.argv[", "0", "], sys.argv[", "0", "])).encode(encoding)\n    ", "else", ":\n        sys.stdout.write(Pinyin2IPA(sys.stdin.readlines()))\n        msgOnDecodingFailure()\n", "######################## 脚本结束 ########################", "\n", "\n", "尝试运行后会告知在cmdPairTuple函数中出现invalid syntax。", "\n", "\n", "因为不知道UR是否是语法的一部分，所以不敢贸然删除。", "\n", "请帮忙看看这个cmdPairTuple函数怎么改才能让程序正常运行，谢谢！"]], "Tag": "程序设计"}
