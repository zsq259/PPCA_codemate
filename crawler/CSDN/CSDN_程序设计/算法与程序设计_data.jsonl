{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;n &amp;#61; int(input())\nL1 &amp;#61; []\nL2 &amp;#61; []\nfor _ in range(n):\n    L1.append(input())\nfor _ in range(n):\n    L2.append(input())\n\ndef merge_list(L1,L2):\n    L &amp;#61; []\n    for v1,v2 in zip(L1,L2):\n        L.append(v1)\n        L.append(v2)\n    return L\n\nfor i in merge_list(L1,L2):\n    print(i)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;def getScores(n):\n    scores &amp;#61; n * [0]\n    for i in range (n):\n        scores[i] &amp;#61; float(input())\n    return scores\ndef meanScore(scores):\n    mean_score &amp;#61; sum(scores)/len(scores)\n    return mean_score\nn &amp;#61; int(input())\nscores &amp;#61; getScores(n)\nprint(&amp;#34;%.2f&amp;#34; % meanScore(scores))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["计算机上算法与程序设计第三章编程作业（python）计算平均成绩、合并两个列表", ["\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", "\n", "\n标题\n\n", "\n\n", " "]], "Tag": "程序设计"}
{"Answer": "```\r\n#include &lt;stdio.h&gt;\r\n\r\nint main()\r\n{\r\n    int N;\r\n    char color;\r\n    int rp,yp;\r\n\r\n    while (1) {\r\n        rp=0,yp=0;\r\n        scanf(\"%d\",&amp;N);\r\n        getchar();//去掉输入缓存区‘\\n’\r\n\r\n        if(N == 0) //0 结束游戏\r\n            break;\r\n\r\n        while ((color=getchar()) != '\\n') {\r\n            if(color == 'R')\r\n                ++rp;\r\n            else if(color == 'Y')\r\n                ++yp;\r\n            else if(color == 'B')\r\n            {\r\n                if(rp != 7)\r\n                    printf(\"Yellow\\n\");\r\n                else\r\n                    printf(\"Red\\n\");\r\n                break;\r\n            }\r\n            else if(color == 'L')\r\n            {\r\n                if(yp != 7)\r\n                    printf(\"Red\\n\");\r\n                else\r\n                    printf(\"Yellow\\n\");\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n```\r\n\r\n[链接](https://ask.csdn.net/questions/808140 \"\")\r\n\r\n\r\n亲测\r\n![图片说明](https://img-ask.csdn.net/upload/201909/21/1569052492_465703.png)", "Konwledge_Point": "算法与程序设计", "Question": ["算法问题程序设计。。。。。。", ["求大佬讲解，这样写为什么不行", "\n\n", "\n\n", "#include <stdio.h>\n\nint main()\n{\n    int n;\n    int color;\n    int rp=0,yp=0;\n\n    printf(\"请输入击球次数与击球颜色：\\n\");\n    scanf(\"%d\",&n);\n    while(color=getchar()&&n!=0)\n    {\n        if(color=='R')\n        {\n            ++rp;\n        }\n        if(color='Y')\n        {\n            ++yp;\n        }\n        if(color=='B')\n        {\n            rp+=8;\n        }\n        if(color=='L')\n        {\n            yp+=8;\n        }\n        --n;\n    }\n    if(rp==15)\n    {\n        printf(\"Red\");\n    }\n    else{\n        if(rp>7)\n        {\n            printf(\"Yellow\");\n        }\n    }\n    if(yp==15)\n    {\n        printf(\"Yellow\");\n    }\n    else{\n        if(yp>7)\n        {\n            printf(\"Red\");\n        }\n    }\n\n\n\nreturn 0;\n\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "找一个简单的2、3层的神经网络的代码，用openmp或者cuda来实现下。github以及google上搜索下", "Konwledge_Point": "算法与程序设计", "Question": ["高分悬赏：大学《并行程序设计》大作业：XX算法的并行化设计及实现", ["高分+现金悬赏：《并行程序设计》大作业：XX算法的并行化设计及实现", "\n\n", "题目为“XX算法的并行化设计及实现”，其中XX算法最好找各种数据挖掘算法（分类、聚类、关联规则、异常检测等）。", "\n实在不行，找找各种神经网络算法、自然语言处理算法吧。拜托了", "\n\n", "说明：", "\n1、算法不能太简单，常见常用的就可以了，C/C++实现", "\n2、论文主要内容为上述算法的：MPI并行实现、OpenMP并行实现，并对比这二种并行实现的实验结果。", "\n3、希望大佬能帮忙找个有用的代码或者大佬自己写也行！满意绝对悬赏，抱歉没有充值C币，拜托了"]], "Tag": "程序设计"}
{"Answer": "需要考虑的前提很多啊，如果你的对象数量级很大，那不推荐这样，如果你需要给删除配上撤销操作，这样是可行的\r\n数据库里的删除操作，很多时候就不是真的删除，只是状态的改变", "Konwledge_Point": "算法与程序设计", "Question": ["程序设计 方法合并问题", ["对某个对象的删除方法可以合并到编辑方法里面吗？因为就算是删除也只是软删除改一下状态而已嘛  这样做是否合理呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;数组开大点试试&amp;#xff0c;可能正好卡在1000个元素&amp;#xff0c;然后ch&amp;#xff3b;m&amp;#xff3d;&amp;#61;‘&amp;#xff3c;0’这里就越界了&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["算法问题（问题如图），有一个测试点出现错误，请问代码哪里有问题", ["\n", "#", "include", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{\n    ", "char", " ch[", "1000", "];\n    ", "int", " n=", "0", ",i,j,k,w;\n    ", "for", "(w=", "0", ";w<", "1000", ";w++)\n    {\n        ", "scanf", "(", "\"%c\"", ",&ch[w]);\n        ", "if", "(ch[w]==", "'\\n'", ") ", "break", ";\n    }\n    ch[w]=", "'\\0'", ";\n    ", "for", "(i=", "0", ";i<w;i++)\n    {\n        ", "if", "(ch[i]==", "'6'", ")\n        {\n            ", "for", "(j=i;j<", "1000", ";j++)\n            {\n                ", "if", "(ch[j]!=", "'6'", ")\n                {\n                    ", "if", "(n>", "3", "&&n<=", "9", ") ", "printf", "(", "\"9\"", ");\n                    ", "if", "(n>", "9", ") ", "printf", "(", "\"27\"", ");\n                    ", "if", "(n<=", "3", ")\n                    {\n                        ", "for", "(k=", "0", ";k<n;k++)\n                            ", "printf", "(", "\"6\"", ");\n                    }\n                    i=j;\n                    ", "if", "(j!=w) ", "printf", "(", "\"%c\"", ",ch[j]);\n                    ", "break", ";\n                }\n                n++;\n            }\n        }\n        ", "else", " ", "printf", "(", "\"%c\"", ",ch[i]);\n        n=", "0", ";\n    }\n", "return", " ", "0", ";\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/525587660566180.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/159697660566185.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码如下&amp;#xff0c;供参考&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; x, s, a;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入x\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;, &amp;amp;x);\n    a &amp;#61; x;\n    s &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(a) &amp;gt;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;-8&lt;/span&gt;); i&amp;#43;&amp;#43;)\n    {\n        s &amp;#61; s &amp;#43; a;\n        a &amp;#61; -a * &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(x, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) / (&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * i * (&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; * i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;sinx &amp;#61; %.1f\\n&amp;#34;&lt;/span&gt;, s);\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["常用数值计算算法及其程序设计", ["1．采用递推法计算sinx幂级数展开式的近似值，当通项绝对值小于10-8时停止累加。", "【测试数据】", "\n", "当输入x=3.1415926时输出0.0,，当输入x=1.5707963时输出1.0"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\nimport random\n&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[random.randint(1,100) for n in range(100)]&lt;/span&gt;\n&lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-selector-attr\"&gt;[n for n in a if n&amp;gt;&amp;#61;90]&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;大于等于90的有&amp;#xff1a;&amp;#39;&lt;/span&gt;,len(b)&lt;/span&gt;&lt;/span&gt;)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(sum(a)&lt;/span&gt;&lt;/span&gt;,sum(b))\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(sum(a)&lt;/span&gt;&lt;/span&gt;/len(a),sum(b)/len(b))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/917345912046172.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["使用Python设计算法，计算100个元素的一维数组，分别统计其中大于等于90的个数，并求和与平均值。", ["使用Python设计算法，计算100个元素的一维数组，分别统计其中大于等于90的个数，并求和与平均值。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;如有帮助望采纳&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-html\"&gt;    &lt;span class=\"hljs-built_in\"&gt;var&lt;/span&gt; arr &amp;#61; []\n    console.&lt;span class=\"hljs-built_in\"&gt;log&lt;/span&gt;(arr.&lt;span class=\"hljs-built_in\"&gt;length&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;var&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-built_in\"&gt;var&lt;/span&gt; arr2 &amp;#61; [];\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;var&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; i; j&amp;#43;&amp;#43;) {\n             arr2.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(j)\n        }\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;var&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; j &amp;gt; i; j--) {\n\n            arr2.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        }\n        arr.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(arr2)\n    }\n    console.&lt;span class=\"hljs-built_in\"&gt;log&lt;/span&gt;(arr)\n    console.&lt;span class=\"hljs-built_in\"&gt;log&lt;/span&gt;(arr2)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/454030477256140.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["创建一个10*10的二维数组(10行10列的)。", ["创建一个10*10的二维数组(10行10列的)。", "数组右上半三角包括对角线的元素都为1", "数组左下半三角的元素为行和列索引值的最大值。", "使用算法构建数组并输出。", "构建的数组如下所示:", "1111111111", "0111111111", "0111111111", "0121111111", "0123111111", "0123411111", "0123451111", "0123456111", "0123456711", "0123456781"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;看着你第7行的&amp;#xff0c;函数里面传参的时候&amp;#xff0c;传递的是score2&amp;#xff0c;应该是score1吧。&lt;br /&gt;可以把完整代码和报错信息贴出来&amp;#xff0c;还有就是&amp;#xff0c;看你工程中打开了多个.c文件&amp;#xff0c;把不用的.c文件从工程中删掉&amp;#xff0c;只保留需要运行的.c文件&amp;#xff0c;然后再重新编译运行。&lt;br /&gt;运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/548486052176151.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;average&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; arry[], &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; score1[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; };\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; score2[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; };\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;the average of class a is %5.2f\\n&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;average&lt;/span&gt;(score1, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;));\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;the average of class a is %5.2f\\n&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;average&lt;/span&gt;(score2, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;));\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;average&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; array[], &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; aver;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; sum &amp;#61; array[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n        sum &amp;#61; sum &amp;#43; array[i];\n    aver &amp;#61; sum / n;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; aver;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["算法题，C语言程序设计", ["这个算法怎么错了呢问问，我定义了两个数组然后判断，然后就一直报错", "\n"]], "Tag": "程序设计"}
{"Answer": "楼主对于最优就坐的问题没描述清楚啊，什么是最优？靠前、靠中？206个座位是如何布局的呢？\r\n其实可以不用程序来考虑这儿问题，认为把座位划分了，共划分32个区域（选最优的），然后随机将32个组和划分的区域对应起来，最后在每个区域随机把5个组员位置分配了，不知道这样是否可以达到你想要的效果呢？", "Konwledge_Point": "算法与程序设计", "Question": ["教室座位随机分配程序算法", ["问：", "\n    已知某教学班有160名学生，按每5人一组分成32个小组。该班所在的教室有206个座位，按照分组安排，随机分配同学上课座位。", "\n\n", "要求：", "\n1、同组同学就近坐（通牌或前后）；", "\n2、同组同学最优就坐；", "\n3、全体同学最有就坐。         "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;学生信息成绩管理系统&amp;#xff0c;主要使用一些函数和变量&amp;#xff0c;我这里写过类似的代码&amp;#xff0c;如有需要可以私信获取&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["综合应用程序设计——学生信息管理系统", ["1、该系统可以用于管理一个班的学生信息。学生人数在50人左右。", "\n\n", "2、该系统存放了有关学生的某些方面的信息：如学号、姓名、性别、出", "\n\n", "生日期、籍贯、成绩、所在系等，具体包含的数据内容由设计者分析", "\n\n", "确定。", "\n\n", "3、所有学生信息的数据结构及其存储结构由设计者分析确定。", "\n\n", "4、所有学生的信息数据可以用文件形式存放。（可选项）", "\n\n", "5、该系统具有相关的数据输入、输出、查询、修改、统计、排序、插", "\n\n", "入、删除等功能。（功能的多少设计者可根据需要自行调整，但必须", "\n\n", "具备输出、输出、查询、某一方面数据统计的基本功能。）", "\n\n", "6、系统应具有友好的用户界面，并能够让用户通过菜单进行相应功能", "\n\n", "的选择。", "\n\n", "6、上机实验前进行系统分析和设计。", "\n\n", "7、选用适当的算法和数据结构，建立相应的程序代码。", "\n\n", "8、上机调试通过，验证自己编写的程序的结果与预料效果之间的关", "\n\n", "系。"]], "Tag": "程序设计"}
{"Answer": "递归解决\r\n```\r\nusing System;\r\nusing System.Linq;\r\nusing System.Collections.Generic;\r\nusing System.Text.RegularExpressions;\r\n\r\nnamespace Q760027\r\n{\r\n    class Program\r\n    {\r\n        static IEnumerable&lt;string&gt; solve(string s, int[] v, int t)\r\n        {\r\n            if (v.Length == 2)\r\n            {\r\n                if (v[0] + v[1] == t) yield return s + \"+\";\r\n                if (v[0] - v[1] == t) yield return s + \"-\";\r\n                if (v[0] * v[1] == t) yield return s + \"*\";\r\n                if (v[1] != 0 &amp;&amp; v[0] % v[1] == 0) { if (v[0] / v[1] == t) yield return s + \"/\"; }\r\n                yield break;\r\n            }\r\n            foreach (var item in solve(s + \"+\", new int[] { v[0] + v[1] }.Concat(v.Skip(2)).ToArray(), t))\r\n                yield return item;\r\n            foreach (var item in solve(s + \"-\", new int[] { v[0] - v[1] }.Concat(v.Skip(2)).ToArray(), t))\r\n                yield return item;\r\n            foreach (var item in solve(s + \"*\", new int[] { v[0] * v[1] }.Concat(v.Skip(2)).ToArray(), t))\r\n                yield return item;\r\n            if (v[1] != 0 &amp;&amp; v[0] % v[1] == 0)\r\n            {\r\n                foreach (var item in solve(s + \"/\", new int[] { v[0] / v[1] }.Concat(v.Skip(2)).ToArray(), t))\r\n                    yield return item;\r\n            }\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            foreach (string s in solve(\"\", new int[] { 5, 5, 5, 5, 5 }, 5).Where(x =&gt; !Regex.IsMatch(x, @\"[\\+\\-][\\*\\/]\")))\r\n                Console.WriteLine(s);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n```\r\n++--\r\n+-+-\r\n+--+\r\n-++-\r\n-+-+\r\n--++\r\n**//\r\n*/+-\r\n*/-+\r\n*/*/\r\n*//*\r\n/*+-\r\n/*-+\r\n/**/\r\n/*/*\r\n\r\nC:\\Program Files\\dotnet\\dotnet.exe (process 5732) exited with code 0.\r\nPress any key to close this window . . .\r\n\r\n```", "Konwledge_Point": "算法与程序设计", "Question": ["C++程序设计的算法解决问题", ["1，问题描述：在下面的算式中，添加“+”、“-”，“*”，“/”,4个运算符，使得这个式子成立。", "\n5  5  5  5  5=5，不用枚举算法解决，用别的算法解决，求代码"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;前缀加加返回自增后的自己&amp;#xff0c;而后缀加加是返回自增前的值&lt;br /&gt;也就是说c&amp;#61;b&amp;#43;&amp;#43; c应该是b自增之前的值&amp;#xff0c;c&amp;#61;&amp;#43;&amp;#43;b&amp;#xff0c;c应该是b自增之后的值&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["c语言程序设计算法比较", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "\n", "为什么这2个程序输出结果不一样，一直很疑惑？"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; java.util.Random;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; java.util.Scanner;\n\n&lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Test {\n    //使用数组保存n个随机整数&amp;#xff0c;设计算法将数组元素按值递增有序排列&amp;#xff0c;编写一个Java程序实现它\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; main(String[] args) {\n        Scanner scan &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; Scanner(&lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;请输入你需要的随机整数的个数:&amp;#34;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n&amp;#61;scan.nextInt();\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; arr[]&amp;#61;&lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[n];\n        Random random &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; Random();\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.print(&amp;#34;请输入你需要的随机整数的取值范围是[0,m]&amp;#xff0c;m&amp;#61;&amp;#34;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m&amp;#61; scan.nextInt();\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt;n ; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num &amp;#61; random.nextInt(m);\n            arr[i]&amp;#61;num;\n        }\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt;n ; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt;n-i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; ; j&amp;#43;&amp;#43;) {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (arr[j]&amp;gt;arr[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]) {\n                    &lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt;&amp;#61;arr[j];\n                    arr[j]&amp;#61;arr[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                    arr[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-keyword\"&gt;value&lt;/span&gt;;\n                }\n            }\n\n        }\n\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;array&lt;/span&gt;:arr){\n            &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&lt;span class=\"hljs-keyword\"&gt;array&lt;/span&gt;);\n        }\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["编写一个Java程序实现它", ["使用数组保存n个随机整数，设计算法将数组元素按值递增有序排列，编写一个Java程序实现它"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;题目1&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-html\"&gt;void fun(char *s)\n{\n    int i, j;\n    for (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; s[i]!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;; i&amp;#43;&amp;#43;)\n        if (s[i]&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; s[i]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;)//错误&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;&amp;#xff0c;修改为  !(s[i]&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; s[i]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;)原来的条件是判断字符是数字字符&amp;#xff0c;加上取反后才是去掉数字字符\n            s[j] &amp;#61; s[i];  //错误&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#xff1a;修改为s[j&amp;#43;&amp;#43;]&amp;#61;s[i],赋值后&amp;#xff0c;下标需要后移一位\n    s[j] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;\\0&amp;#34;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;题目2&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-html\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{ \n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;43&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;55&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;65&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;87&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;93&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;62&lt;/span&gt;};\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,k,*pa;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; temp;  &lt;span class=\"hljs-comment\"&gt;//在这里添加temp的声明&amp;#xff08;错误1的修改方法&amp;#xff09;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;k&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%3d&amp;#34;&lt;/span&gt;,a[k]);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;;k&amp;#43;&amp;#43;)\n    { \n        pa&amp;#61;a;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;-k&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        { \n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ( *pa&amp;gt;*(pa&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) )\n            { \n                temp&amp;#61;*pa; *pa&amp;#61;*(pa&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;); *(pa&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&amp;#61;temp;&lt;span class=\"hljs-comment\"&gt;//错误1&amp;#xff0c;没有对temp的声明&amp;#xff0c;需要在开头添加int temp;&lt;/span&gt;\n            }\n            pa&amp;#43;&amp;#43;;\n        }\n    }\n    pa &amp;#61; a; &lt;span class=\"hljs-comment\"&gt;//错误2&amp;#xff1a;需要把pa重新指向数组的首地址&amp;#xff0c;需要添加这一句&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;k&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%3d&amp;#34;&lt;/span&gt;,*pa&amp;#43;&amp;#43;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["c程序设计错误代码判断", ["1.字符串在文档处理、基因序列等方面应用广泛。下列给定程序中，函数fun的功能是：依次取出字符串中所有数字字符，形成新的字符串，并取代原字符串。程序有二个错误，写出错行号、原因、和正确代码。", "1  #include <stdio.h>", "2  void fun(char  *s)", "3   {", "4  int  i, j;", "5  for (i=0, j=0; s[i]!='\\0'; i++)", "6    if (s[i]>='0' && s[i]<='9')", "7       s[j] = s[i];", "8  s[j] = \"\\0\";", "9  }", "10  int main()", "11  {", "12  char  item[80];", "13  printf(\"\\nEnter a string :\");", "14  gets(item);", "15  printf(\"\\n\\nThe string is : %s\\n\", item);", "16  fun(item);", "17  printf(\"\\n\\nThe string of changing is : %s\\n\", item);", "18  return 0;", "19  }", "2.排序算法在很多领域得到相当的重视，尤其是在大量数据的处理方面。下列给定程序是使用指针完成冒泡法排序的程序，其中有二个错误，找出其中的错误行和出错原因，写出正确代码。", "1  #include <stdio.h>", "2  int main()", "3  {  int  a[10]={21,43,55,12,65,87,25,93,30,62};", "4     int  i,k,", "pa;", "5     for (k=0;k<10;k++)", "6       printf(\"%3d\",a[k]);", "7     printf(\"\\n\\n\");", "8     for (k=0;k<9;k++)", "9     {  pa=a;", "10       for (i=0;i<10-k-1;i++)", "11        {  if ( *pa>", "(pa+1) )", "12          {  temp=*pa; ", "pa=", "(pa+1); *(pa+1)=temp;", "13           }", "14           pa++;", "15        }", "16      }", "17      for (k=0;k<10;k++)", "18        printf(\"%3d\",*pa++);", "19      printf(\"\\n\\n\");", "20      return 0;", "21   }"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;_seqlist&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; data[&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; length;\n}seqlist;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; L[&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;] &amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;};\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,i;\n    seqlist s;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        s.data[i] &amp;#61; L[i];\n    }\n   s.length &amp;#61; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;s.length;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(s.data[i] % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            count&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;奇数个数为:%d&amp;#34;&lt;/span&gt;,count);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["数据结构程序设计实验题", ["已知线性表{a,a.....a.-1}元素按顺序存储，且每个元素都是不相等的整数。编写算法求表中奇数的个数。例如:L=", "\n", "(1,2,3,4,5,6,7,8)，奇数个数为:4"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;回答&amp;#xff1a;这代码有一些地方格式没写好哦&amp;#xff0c;容易出错&amp;#xff1b;简单判断就是&amp;#xff1a;a !&amp;#61; b 的时候&amp;#xff0c;且(c !&amp;#61; b &amp;amp;&amp;amp; c !&amp;#61; a) 的时候&amp;#xff0c;且b &amp;#61; 2&amp;#xff0c;a &amp;#61; 3的时候输出a、b、c&amp;#xff1b;&lt;br /&gt;流程图如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/292076362176110.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["求此程序的算法数据结构和算法控制结构图", ["求此程序的算法数据结构设计和算法控制结构设计   最好是程序图类的"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;看代码的意思是找出第k对n和n&amp;#43;2同时是素数的孪生素数。&lt;br /&gt;k由用户输入&amp;#xff0c;n从3开始&amp;#xff0c;直到找到第k对n和n&amp;#43;2都为素数为止&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["这个算法设计我该怎么描述呢？", ["麻烦了！", "这是任务描述：", "任务描述：素数是只能被1和本身整除的正整数，也称为质数。孪生素数是相差为2的两个素数。第1对孪生素数是3，5；第2对孪生素数为5，7；第3对孪生素数为11，13；……那么第k对孪生素数是多少呢？请编写程序，找出第k对孪生素数"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main() {\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; m,n,i,j,k,s;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;m,&amp;amp;n);\n    s&amp;#61;n-m; \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;s;i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;做对&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;题的人有i个 \n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&amp;#61;&lt;span class=\"hljs-regexp\"&gt;s/2;j&amp;#43;&amp;#43;){//&lt;/span&gt;做对&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;题的人有j个 \n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&amp;#61;&lt;span class=\"hljs-regexp\"&gt;s/3;k&amp;#43;&amp;#43;){//&lt;/span&gt;做对&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;题的人有k个 \n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;#43;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*j&amp;#43;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;*k&amp;#61;&amp;#61;s){\n                    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d\\n&amp;#34;&lt;/span&gt;,i,j,k);\n                }    \n            }    \n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;br /&gt;\n\n&lt;p&gt;觉得有用的话&lt;font color=\"red\"&gt;&lt;strong&gt;采纳&lt;/strong&gt;&lt;/font&gt;一下哈&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["穷举算法问题，求助大佬", ["计算导论与程序设计某次上机考试共出了4道题，其中每名同学都至少做对了一道题。根据已知条件求做对了2、3、4题的可能的人数。。", "输入格式:", "只有一行，为两个用空格分隔的正整数m和n，分别代表参加考试的总人数和总的解题数。", "输出格式:", "有若干行，每一行为一组解，格式均为用空格分隔的三个整数，依次代表解2题的人数，解3题的人数和解4题的人数。多组解的输出顺序按解2题人数由小到大排序，如果解2题的人数相同则按解3题的人数由小到大排序。所有测试数据保证可以用int存储。", "输入样例:", "15 20", "输出样例:", "0 1 1", "1 2 0", "2 0 1", "3 1 0", "5 0 0"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;name &amp;#61; &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;#34;&lt;/span&gt;)\nN &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;#34;&lt;/span&gt;))\n\ns &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; name:\n    s &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;((&lt;span class=\"hljs-built_in\"&gt;ord&lt;/span&gt;(i) - &lt;span class=\"hljs-number\"&gt;65&lt;/span&gt;) &amp;#43; N)\n    \n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; s !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;100&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(s) &amp;gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n    r &amp;#61; [&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;((&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(s[i]) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(s[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])) % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(s) - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)]\n    s &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;.join(r)\n   \n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(s))\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["Python幸运数字问题 算法求解", ["45、我们经常喜欢说自己的幸运数是多少，但是你认为的幸运数和你的契合度真的那么高吗？其实我们可以通过一段程序来对这点进行一个验证，我们现在有一种很神奇的计算方法：", "第一步： 取出你姓名的缩写，例如，我们上课的珊珊的名字缩写就可以写为SHANSHAN。", "第二步： 将每个字母用数字字符串取代。首先找到一个正整数N表示你的幸运数,之后用N来取代A,N+1来取代 B,N+2 来取代 C,……, N+25来取代Z。例如，如果珊珊觉得他的幸运数字是6，那么N就是6，A就被 6 取代，B 就被7取代，……，Z 则被32取代。上面的例子SHANSHAN则被 24136192413619取代。", "第三步：重复以下操作：将相邻的两位数相加，并写下和的个位数。不难发现这个操作每进行一次，这个数字字符串就会少一位数。当这个数字变成 100 或不超过两位数（第一位是 0 也算两位数）时，这个程序便停止。所得的数字就是你跟你幸运数的契合度。用上面的例子来说，处理的过程如下：", "24136192413619", "6549701654970", "193671719367", "——", "096", "95", "所以如果N为6的话，SHANSHAN跟数字6的契合度高达95！", "相信同学们一定很想知道自己名字和幸运数的契合度吧，你可以尝试着写一个程序，只要输入一个姓名和一个N值，就输出他们的契合度。", "输入格式：", "第一行包括一个仅包含大写字母的姓名字符串", "第二行是一个正整数N", "输出格式：", "一行，输出一个整数，表示契合度。", "输入输出样例：", "输入1:", "DLLSS", "478", "输出1:", "100"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://www.cnblogs.com/NEFPHYS/p/nef20180607.html\" id=\"textarea_1648702344230_1648702406604_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.cnblogs.com/NEFPHYS/p/nef20180607.html&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["r语言用循环计算积分", ["请使用R语言编程实现函数：f(x)=1+exp(-x)*sin(x)在区间[0，10]上的定积分值。基本思想：按照数学分析中的分割求和思想，比较两次分割下，小矩形的面积和只差，小于10^(-6)，就认为该分割下，积分值趋于稳定。"]], "Tag": "程序设计"}
{"Answer": "fgets每次读入时会把回车也放到字符串里，造成比较失败。修改如下：\r\n\r\n```\r\n \twhile(gets(input)!=NULL&amp;&amp;input[0]!='\\0')\r\n\r\n```", "Konwledge_Point": "算法与程序设计", "Question": ["C语言一个简单程序设计问题，找不出原因。", ["这段程序是为了输入一个月份（英文单词），然后返回截止到输入月份的所有月的天数总和（比如我输入march，则返回1-3月份天数总和）。函数部分的功能是如果月份输入正确，就返回总数。如果输入不正确，那就返回-1。但是运行程序后，每次运行函数都是返回-1。不知道哪里出了问题，麻烦大家看下。谢谢。", "\n\n", "代码如下：", "\n#include", "\n#include", "\n#include", "\n\n", "int days(char *p);", "\nstruct month{", "\n    char name[10];", "\n    char abbrev[4];", "\n    int days;", "\n    int monumb;", "\n};", "\n\n", "struct month months[12]={", "\n    {\"january\",  \"jan\",31,1},", "\n    {\"february\", \"feb\",28,2},", "\n    {\"march\",  \"mar\",31,3},", "\n    {\"april\",  \"apr\",30,4},", "\n    {\"may\",   \"may\",31,5},", "\n    {\"june\",  \"jun\",30,6},", "\n    {\"july\",  \"jul\",31,7},", "\n    {\"august\",  \"aug\",31,8},", "\n    {\"september\", \"sep\",30,9},", "\n    {\"october\",  \"oct\",31,10},", "\n    {\"november\", \"nov\",30,11},", "\n    {\"december\", \"dec\",31,12}", "\n};", "\n\n", "int main(void)", "\n{", "\n    char input[10];", "\n    int daytotal;", "\n    printf(\"PLS enter the month\");", "\n    while(fgets(input,100,stdin)!=NULL&&input[0]!='\\0')", "\n    {", "\n        daytotal=days(input);", "\n        if(daytotal>0)", "\n            printf(\"The total days is %d.\",daytotal);", "\n        else", "\n            printf(\"Input is not valid,pls enter again.\\n\");", "\n        puts(\"pls enter the next input\");", "\n    }", "\n    return 0;", "\n}", "\n\n", "int days(char ", "p)    _", "*函数部分**_", "\n{", "\n    int i=0;", "\n    int total=0;", "\n    while( p[i] != '\\0' )", "\n    {", "\n        p[i] = tolower( p[i] );", "\n        i++;", "\n    }", "\n\n", " for(i=0;i<12;i++)\n {\n total += months[i].days ;\n if( strcmp( p, months[i].name) == 0 )\n     return total;\n }\n return -1;\n", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;要求时间复杂度O(n)&amp;#xff0c;那你就不能用数组&amp;#xff0c;用数组那么时间复杂度是O(n^2)&amp;#xff0c;因为你每删掉一个都需要把后续所有的元素往前面挪&lt;br /&gt;你应该改成链表&lt;br /&gt;既然题目整个思路都不对&amp;#xff0c;你之前报的到底是什么错误根本就没意义&amp;#xff0c;删了重来吧&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["设计一个算法，删除其中所有值等于X的元素", ["#####问题遇到的现象和发生背景", "设计一个算法，删除其中所有值等于X的元素，", "（这一部分先不做考虑）（要求算法时间复杂度为O(n)、空间复杂度为O(1)）", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", " ", "#", "include", "<stdio.h>", "\n", "#", "include", "<malloc.h>", "\n", "#", "define", " MaxSize 50", "\n", "typedef", " ", "int", " ElemType;\n", "//顺序表声明", "\n", "typedef", " ", "struct", "{\n    ElemType data[MaxSize];", "//元素 ", "\n    ", "int", " length;", "// 长度 ", "\n}SqList;\n", "//建立顺序表", "\n", "void", " ", "CreatList", "(SqList*&L,ElemType a[],", "int", " n)", "{\n    ", "int", " i=", "0", ",k=", "0", ";\n    L=(SqList*)", "malloc", "(", "sizeof", "(SqList));\n    ", "while", "(i<n){\n        L->data[k]=a[i];\n        k++;i++;\n    }\n    L->length=k;\n} \n", "//初始化 ", "\n", "void", " ", "InitList", "(SqList*&L)", "{\n    L=(SqList*)", "malloc", "(", "sizeof", "(SqList));\n    L->length=", "0", "; \n}\n", "//销毁顺序表 ", "\n", "void", " ", "DestoryList", "(SqList*&L)", "{\n    ", "free", "(L);\n}\n", "//输出顺序表", "\n", "void", " ", "DispList", "(SqList*L)", "{\n    ", "for", "(", "int", " i=", "0", ";i<L->length;i++)\n        ", "printf", "(", "\"%d\"", ",L->data[i]);\n    ", "printf", "(", "\"\\n\"", ");\n}\n \n", "//删除元素X ", "\n", "void", " ", "delnode2", "( SqList *&L,ElemType x )", "{", "//不用数据X未传送 &x输出型参数 ", "\n \n    ", "int", " k=", "0", ",i;", "//k及记录不等于X的元素的数量 ", "\n    ", "for", "(", "int", " i=", "0", ";i<L->length;i++){\n        ", "if", "(L->data[i]!=x)\n            L->data[k]=L->data[i];\n            k++;    \n    }\n    L->length=k;\n}\n", "int", " ", "main", "()", "{\n    SqList *L;\n    ", "InitList", "(L); \n    ElemType x;\n    ", "printf", "(", "\"输入顺序表的长度：\"", ");\n    ", "scanf", "(", "\"%d\"", ",&L->length);", "// L->length不可以吗？？？ ", "\n    ", "for", "(", "int", " i=", "0", ";i < L->length;i++){\n        ", "//cin>>L->data[i];不对", "\n        ", "scanf", "(", "\"%d\"", ",&L->data[i]); \n    }\n    ", "printf", "(", "\"%输入删除元素的值X=\"", ");\n    ", "scanf", "(", "\"%d\"", ",&x);\n    ", "//函数调用    ", "\n    ", "DispList", "(L); \n    ", "delnode2", "(L,x);\n    ", "printf", "(", "\"\\n\"", ");\n    ", "DispList", "(L); \n    ", "DestoryList", "(L);\n    ", "return", " ", "0", "; \n}\n", "\n", "运行结果及报错内容", "\n", "\n", "这是试着调试了一下，这是显示的什么意思？该怎么办？", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", " 不清楚指针和引用具体使用，这个程序该如何修改？", "初学代码，谢谢指导。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;呃,比较简单的方法应该可以循环扑克牌的数组&amp;#xff0c;然后每次随机生成一个0-51的整数&amp;#xff0c;交换当前扑克牌和数组[随机数]的位置&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["扑克算法的程序我不会", ["设计一个扑克算法，没想明白怎么编写，有没有人可以讲解一下。只讲解思路即可，其他的我自己做。谢谢。", "\n"]], "Tag": "程序设计"}
{"Answer": "参考：http://wenku.baidu.com/link?url=hdS4BZwC-a0VHd3pcL7zlnz5TxQ91I3OfDN4zc-7yBW8QVcBteykS1ZrxFL6pCOCYPHiwPz8gt1fxLPVfQxVoa91WDl5ni5M3u98gVql_yO", "Konwledge_Point": "算法与程序设计", "Question": ["最差适配内存分配算法模拟 ", ["最差适配内存分配算法模拟 ", "\n1、目的 用程序实现可变分区内存管理过程，并按最差适配算法进行分配。 ", "\n2、内容 （1）基本思想 可变分区是指系统不预先划分固定分区，而是在装入程序的时候划分内存区 域，使得为程序分配的分区大小恰好等于该程序的需求量，且分区的个数是可变 的。显然可变分区有较大的灵活性，较之固定分区能获得好的内存利用率。 （2）数据结构 可变分区管理可以用两种数据结构实现，一种是已分配区表和空闲区表，也 就是用预先定义好的系统空间来存放空间分配信息。 另一种也是最常用的就是空闲链表，由于对分区的操作是动态的，所以很难 估计数据结构所占用的空间，而且空闲区表会占用宝贵的系统空间，所以提出了 空闲链表的概念。 （3）．设计要求 请实现一个完整的可变分区管理器，包括最差适配内存分配算法进行分配， 并进行回收，分区碎片整理等。 "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;看得出来你这是个“实际”项目&amp;#xff0c;但是不够实践。通常这个情景&amp;#xff0c;是每个电表&amp;#xff0c;间隔定时把当前数据发送给服务器&amp;#xff0c;而非每个电表设备特定的时间点被唤醒。&lt;/p&gt;\n\n&lt;p&gt;在你所讲的这种都被“唤醒”场景&amp;#xff0c;通常是服务器端有所有电表的设备ip,设备号&amp;#xff0c;会用一个执行队列来实现这个功能。通常会按照市区、街道、小区等再去细化分组&amp;#xff0c;执行多线程队列来提高执行效率。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["问大家一个实际项目设计问题", ["假如规定每个月1号，全市的水表都被唤醒，然后去设计一种算法，怎么在功耗、复杂度都比较低的同时，可以拿到这些水表的数据？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;修改处见注释&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;//设有两个按元素值递增有序的单链表A和B(单链表A和B)&amp;#xff0c;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//编一程序将单链表A和B归并成一个新的递增有序的单链表C&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//(值相同的元素均保留在单链表C中)。&lt;/span&gt;\n#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;stdlib.h&amp;gt;\n#include &amp;lt;malloc.h&amp;gt;\n\ntypedef int ElemType;\ntypedef struct node\n{\n    ElemType &lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;;\n    struct node* next;\n}LNode, * LinkList;\n\nvoid CreLinkListTail(LinkList L, int n)\n{\n    LNode* s, * r;\n    ElemType x;\n    int i;\n    r &amp;#61; L;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入结点:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; n; i &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--)\n    {\n        scanf_s(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;x);\n        s &amp;#61; (LNode*)malloc(sizeof(LNode));\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; NULL;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;s&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt; &amp;#61; x;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;r&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; s;\n        r &amp;#61; s;\n    }\n}\n \nvoid OutPut(LNode* L)\n{\n    LNode* p;\n    p &amp;#61; L;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; NULL)\n    {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;printf&lt;/span&gt;(&amp;#34;%d &amp;#34;, p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;);\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt; &amp;#61; p-&amp;gt;&lt;/span&gt;next;\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n \nLNode* guibing(LNode* La, LNode* Lb)\n{\n    LNode* pc &amp;#61; (LNode*)malloc(sizeof(LNode));\n    LNode* p, *q, * linshit &amp;#61; pc; &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    \n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt; &amp;#61; La-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;; q &amp;#61; Lb-&amp;gt;&lt;/span&gt;next;   &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; NULL &amp;amp;&amp;amp; q !&amp;#61; NULL)&lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    {\n        LNode* r &amp;#61; (LNode*)malloc(sizeof(LNode));&lt;span class=\"hljs-comment\"&gt;//Lc 的新结点&lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;r&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61;NULL;           &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;data&lt;/span&gt; &amp;lt;&amp;#61; q-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;){\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;r&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;data&lt;/span&gt; &amp;#61; p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;;\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt; &amp;#61; p-&amp;gt;&lt;/span&gt;next;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;r&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;data&lt;/span&gt; &amp;#61; q-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;;\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt; &amp;#61; q-&amp;gt;&lt;/span&gt;next;\n        }\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;linshit&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; r;  &lt;span class=\"hljs-comment\"&gt;//将新结点链入 Lc &lt;/span&gt;\n        linshit &amp;#61; r;\n        &lt;span class=\"hljs-comment\"&gt;//r-&amp;gt;data &amp;#61; p-&amp;gt;data;  修改&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//p &amp;#61; p-&amp;gt;next;&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//linshit-&amp;gt;next &amp;#61; r;&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//linshit &amp;#61; r;&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (p){\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(p){\n            LNode* r &amp;#61; (LNode*)malloc(sizeof(LNode));\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;r&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61;NULL;\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;r&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;data&lt;/span&gt; &amp;#61; p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;;\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;linshit&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; r;\n            linshit &amp;#61; r;\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt; &amp;#61; p-&amp;gt;&lt;/span&gt;next;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(q){\n            LNode* r &amp;#61; (LNode*)malloc(sizeof(LNode));\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;r&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61;NULL;\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;r&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;data&lt;/span&gt; &amp;#61; q-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;;\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;linshit&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; r;\n            linshit &amp;#61; r;\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;q&lt;/span&gt; &amp;#61; q-&amp;gt;&lt;/span&gt;next;\n        }\n    }\n    &lt;span class=\"hljs-comment\"&gt;//linshit &amp;#61; pc;        修改&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//p &amp;#61; Lb-&amp;gt;next;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//while (linshit-&amp;gt;next !&amp;#61; NULL)&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//{&lt;!-- --&gt;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    linshit &amp;#61; linshit-&amp;gt;next;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//}&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//while (p !&amp;#61; NULL)&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//{&lt;!-- --&gt;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    LNode* s &amp;#61; (LNode*)malloc(sizeof(LNode));&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    s-&amp;gt;data &amp;#61; p-&amp;gt;data;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    p &amp;#61; p-&amp;gt;next;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    linshit-&amp;gt;next &amp;#61; s;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//    linshit &amp;#61; s;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//}&lt;/span&gt;\n    return pc;\n}\nint list_count(LinkList L) {\n    LN&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;ode&lt;/span&gt;* p &amp;#61; L-&amp;gt;&lt;/span&gt;next;\n    int len &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p) {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt; &amp;#61; p-&amp;gt;&lt;/span&gt;next;\n        len&amp;#43;&amp;#43;;\n    }\n    return len;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//void list_bubble_sort(LinkList L)  修改 这个函数不需要&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//{&lt;!-- --&gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//    LNode* p, * q;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//    int len &amp;#61; list_count(L);&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;//    for (int i &amp;#61; 0; i &amp;lt; len; i&amp;#43;&amp;#43;)&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//    {&lt;!-- --&gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//        p &amp;#61; L;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//        for (int j &amp;#61; 0; j &amp;lt; len - i - 1; j&amp;#43;&amp;#43;)&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//        {&lt;!-- --&gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//            if (!p-&amp;gt;next) break;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//            if (!p-&amp;gt;next-&amp;gt;next) break;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//            if (p-&amp;gt;next-&amp;gt;data &amp;gt; p-&amp;gt;next-&amp;gt;next-&amp;gt;data)&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//            {&lt;!-- --&gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//                q &amp;#61; p-&amp;gt;next;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//                p-&amp;gt;next &amp;#61; q-&amp;gt;next;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//                q-&amp;gt;next &amp;#61; q-&amp;gt;next-&amp;gt;next;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//                p-&amp;gt;next-&amp;gt;next &amp;#61; q;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//            }&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//            p &amp;#61; p-&amp;gt;next;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//        }&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//    }&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//}&lt;/span&gt;\n\nvoid main()\n{\n    int n, m;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入La的结点个数:\\n&amp;#34;&lt;/span&gt;);\n    scanf_s(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    LinkList La &amp;#61; (LinkList)malloc(sizeof(LNode));\n    L&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;a&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; NULL;\n    CreLinkListTail(La, n);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;带头结点头插法--输出建立后的La单链表:\\n&amp;#34;&lt;/span&gt;);\n    O&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;utPut&lt;/span&gt;(La-&amp;gt;&lt;/span&gt;next);\n \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入Lb的结点个数:\\n&amp;#34;&lt;/span&gt;);\n    scanf_s(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;m);\n    LinkList Lb &amp;#61; (LinkList)malloc(sizeof(LNode));\n    L&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;b&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; NULL;\n    CreLinkListTail(Lb, m); &lt;span class=\"hljs-comment\"&gt;//CreLinkListTail(Lb, n); 修改&lt;/span&gt;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;带头结点头插法--输出建立后的Lb单链表:\\n&amp;#34;&lt;/span&gt;);\n    O&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;utPut&lt;/span&gt;(Lb-&amp;gt;&lt;/span&gt;next);\n\n    LinkList Lc &amp;#61; (LinkList)malloc(sizeof(LNode));\n    L&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;c&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; NULL;\n \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;输出归并后的Lc单链表:\\n&amp;#34;&lt;/span&gt;);\n    Lc &amp;#61; guibing(La, Lb);\n                       &lt;span class=\"hljs-comment\"&gt;//list_bubble_sort(Lc);   修改&lt;/span&gt;\n    O&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;utPut&lt;/span&gt;(Lc-&amp;gt;&lt;/span&gt;next);  &lt;span class=\"hljs-comment\"&gt;//OutPut(Lc); 修改&lt;/span&gt;\n\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["两个按元素值递增有序的单链表A和B,编一程序将单链表A和B归并成一个新的递增有序的单链表C", ["在vs2022中运行，到下面那段代码就报错了，不清楚怎么回事，希望有人可以解释一下，顺便优化一下代码，还请注释一下，毕竟你修改之后我未必能看懂。", "\n", "\n", "//设有两个按元素值递增有序的单链表A和B(单链表A和B)，", "\n", "//编一程序将单链表A和B归并成一个新的递增有序的单链表C", "\n", "//(值相同的元素均保留在单链表C中)。", "\n#include <stdio.h>\n#include <stdlib.h>\n#include <malloc.h>\n\ntypedef int ElemType;\ntypedef struct node \n{\n    ElemType ", "data", ";\n    struct node* next;\n}LNode, * LinkList;\n\nvoid CreLinkListTail(LinkList L, int n)\n{\n    LNode* s, * r;\n    ElemType x;\n    int i;\n    r = L;\n    printf(", "\"输入结点:\\n\"", ");\n    ", "for", " (i = n; i > ", "0", "; i--)\n    {\n        scanf_s(", "\"%d\"", ", &x);\n        s = (LNode*)malloc(sizeof(LNode));\n        ", "s", "->", "next = NULL;\n        ", "s", "->", "data", " = x;\n        ", "r", "->", "next = s;\n        r = s;\n    }\n}\n\nvoid OutPut(LNode* L)\n{\n    LNode* p;\n    p = L;\n    ", "while", " (p != NULL)\n    {\n        ", "printf", "(\"%d \", p->", "data", ");\n        ", "p", " = p->", "next;\n    }\n    printf(", "\"\\n\"", ");\n}\n\nLNode* guibing(LNode* La, LNode* Lb)\n{\n    LNode* pc = (LNode*)malloc(sizeof(LNode));\n    LNode* p, * linshit = pc;\n    \n    ", "p", " = La->", "next;\n    ", "while", " (p != NULL)\n    {\n        LNode* r = (LNode*)malloc(sizeof(LNode));\n        ", "r", "->", "data", " = p->", "data", ";\n        ", "p", " = p->", "next;\n        ", "linshit", "->", "next = r;\n        linshit = r;\n    }\n\n    linshit = pc;\n    ", "p", " = Lb->", "next;\n    ", "while", " (linshit->", "next != NULL)\n    {\n        ", "linshit", " = linshit->", "next;\n    }\n\n    ", "while", " (p != NULL)\n    {\n        LNode* s = (LNode*)malloc(sizeof(LNode));\n        ", "s", "->", "data", " = p->", "data", ";\n        ", "p", " = p->", "next;\n        ", "linshit", "->", "next = s;\n        linshit = s;\n    }\n    return pc;\n}\nint list_count(LinkList L) {\n    LN", "ode", "* p = L->", "next;\n    int len = ", "0", ";\n    ", "while", " (p) {\n        ", "p", " = p->", "next;\n        len++;\n    }\n    return len;\n}\n\nvoid list_bubble_sort(LinkList L)\n{\n    LNode* p, * q;\n    int len = list_count(L);\n\n    ", "for", " (int i = ", "0", "; i < len; i++)\n    {\n        p = L;\n        ", "for", " (int j = ", "0", "; j < len - i - ", "1", "; j++)\n        {\n            ", "if", " (!p->", "next) break;\n            ", "if", " (!p->", "next", "->", "next) break;\n            ", "if", " (p->", "next", "->", "data", " > p->", "next", "->", "next", "->", "data", ")\n            {\n                ", "q", " = p->", "next;\n                ", "p", "->", "next", " = q->", "next;\n                ", "q", "->", "next", " = q->", "next", "->", "next;\n                ", "p", "->", "next", "->", "next = q;\n            }\n            ", "p", " = p->", "next;\n        }\n    }\n}\n\nvoid main()\n{\n    int n, m;\n    printf(", "\"请输入La的结点个数:\\n\"", ");\n    scanf_s(", "\"%d\"", ", &n);\n    LinkList La = (LinkList)malloc(sizeof(LNode));\n    L", "a", "->", "next = NULL;\n    CreLinkListTail(La, n);\n    printf(", "\"带头结点头插法--输出建立后的La单链表:\\n\"", ");\n    O", "utPut", "(La->", "next);\n\n    printf(", "\"请输入Lb的结点个数:\\n\"", ");\n    scanf_s(", "\"%d\"", ", &m);\n    LinkList Lb = (LinkList)malloc(sizeof(LNode));\n    L", "b", "->", "next = NULL;\n    CreLinkListTail(Lb, n);\n    printf(", "\"带头结点头插法--输出建立后的Lb单链表:\\n\"", ");\n    O", "utPut", "(Lb->", "next);\n\n    LinkList Lc = (LinkList)malloc(sizeof(LNode));\n    L", "c", "->", "next = NULL;\n\n    printf(", "\"输出归并后的Lc单链表:\\n\"", ");\n    Lc = guibing(La, Lb);\n    list_bubble_sort(Lc);\n    OutPut(Lc);\n}\n", "\n", "//", "在vs2022中运行，到这里就报错了\n", "while", " (linshit->", "next", " != NULL)\n    {\n        linshit = linshit->", "next", ";\n    }\n\n", "//", "引发了异常: 读取访问权限冲突。\n", "//", "**linshit** 是 ", "0", "xFFFFFFFFFFFFFFF7。\n"]], "Tag": "程序设计"}
{"Answer": "&lt;数据结构与算法Java语言描述&gt;（java语言）等等这样的书提供了[b]详细的例子和分析。[/b]", "Konwledge_Point": "算法与程序设计", "Question": ["一些关于java的程序设计问题", ["1、    多项式加减（用链实现）", "\n2、    十进制转化为二进制（用队+栈实现）", "\n3、    开放地址法、一次探测法、二次探测法实现快速查找", "\n4、    利用二叉排序树进行排序与查找以及删除一个节点", "\n5、    实现宽度优先或深度优先排序算法", "\n6、        实现Kruskal算法或Prime算法", "\n\n", "大家好，我想用Java来写这些程序，但自己能力有限，请教的大家这些问题，谢谢！！！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;判定1999到2050年中的每一年是否为闰年&amp;#xff0c;&lt;br /&gt;代码如下&amp;#xff1a;&amp;#xff08;如有帮助&amp;#xff0c;望采纳&amp;#xff01;谢谢! 点击我这个回答右上方的&lt;strong&gt;【采纳】&lt;/strong&gt;按钮&amp;#xff09;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n\nvoid main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1999&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;2050&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;%4&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;%100!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;%400&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d是闰年\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;);\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d不是闰年\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/324100178626139.png\" /&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["编写一个程序判定1999到2050年中的每一年是否为闰年，大家来试一试吧", ["1－1/2＋1/3－1/4＋1/5＋⋯⋯＋1/99－1/100"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;可以这样做&amp;#xff0c;具体每行都有解释&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;function s &amp;#61; method3(&lt;span class=\"hljs-name\"&gt;n&lt;/span&gt;)\nq &amp;#61; factor(&lt;span class=\"hljs-name\"&gt;n&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;%因式分解&lt;/span&gt;\nuq &amp;#61; unique(&lt;span class=\"hljs-name\"&gt;q&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;%得到唯一因子&lt;/span&gt;\nk &amp;#61; diff(&lt;span class=\"hljs-name\"&gt;find&lt;/span&gt;([&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,diff(&lt;span class=\"hljs-name\"&gt;q&lt;/span&gt;),&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]~&amp;#61;0))&lt;span class=\"hljs-comment\"&gt;;%每个因子的个数&lt;/span&gt;\ns &amp;#61; prod((&lt;span class=\"hljs-name\"&gt;uq&lt;/span&gt;.^(&lt;span class=\"hljs-name\"&gt;k&amp;#43;1&lt;/span&gt;)&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)./(&lt;span class=\"hljs-name\"&gt;uq-1&lt;/span&gt;))&lt;span class=\"hljs-comment\"&gt;;%公式计算因数之和&lt;/span&gt;\nend\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["算法设计3需要如何编写程序 matlab", ["用Matalab编写程序"]], "Tag": "程序设计"}
{"Answer": "http://blog.csdn.net/effective_coder/article/details/8736718", "Konwledge_Point": "算法与程序设计", "Question": ["请问哪位大神可以帮忙解决一个算法题？", ["具体内容如下:用贪心法解决多仓库 ，( 每个仓库)多库位，库存商品多品牌的出库调度问题"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你的二分查找不能用字符串直接和整型计算&amp;#xff0c;你需要用int将字符串转变一下&amp;#xff0c;另外数组名要紧跟索引。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["大家帮我看看怎么改？初学者什么都不汇。", ["折半查找： 1个列表里存储了20个子列表，各子列表内存储了学生的学号及姓名两个元素，两个元素都是字符串类型。现已知该20个学生子列表已按学号递增排好序。请设计一个程序，使用折半查找算法通过最少次数的比较找到指定学号学生，如果没有，报告未找到。", "\n"]], "Tag": "程序设计"}
{"Answer": "https://blog.csdn.net/sunquana/article/details/8039790", "Konwledge_Point": "算法与程序设计", "Question": ["C语言程序设计解决Pipe Fitters的算法问题的正确思路怎么实现", ["Problem Description", "\nFilters, or programs that pass ", "processed'' data through in some changed form, are an important class of programs in the UNIX operating system. A pipe is an operating system concept that permits data to", "flow'' between processes (and allows filters to be chained together easily.) ", "\n\n", "This problem involves maximizing the number of pipes that can be fit into a storage container (but it's a pipe fitting problem, not a bin packing problem). ", "\n\n", "A company manufactures pipes of uniform diameter. All pipes are stored in rectangular storage containers, but the containers come in several different sizes. Pipes are stored in rows within a container so that there is no space between pipes in any row (there may be some space at the end of a row), i.e., all pipes in a row are tangent, or touch. Within a rectangular cross-section, pipes are stored in either a grid pattern or a skew pattern as shown below: the two left-most cross-sections are in a grid pattern, the two right-most cross-sections are in a skew pattern.", "\n\n", "Note that although it may not be apparent from the diagram, there is no space between adjacent pipes in any row. The pipes in any row are tangent to (touch) the pipes in the row below (or rest on the bottom of the container). When pipes are packed into a container, there may be ``left-over'' space in which a pipe cannot be packed. Such left-over space is packed with padding so that the pipes cannot settle during shipping. ", "\n\n", "Input", "\nThe input is a sequence of cross-section dimensions of storage containers. Each cross-section is given as two real values on one line separated by white space. The dimensions are expressed in units of pipe diameters. All dimensions will be less than 2^7. Note that a cross section with dimensions a*b can also be viewed as a cross section with dimensions b*a.", "\n\n", "Output", "\nFor each cross-section in the input, your program should print the maximum number of pipes that can be packed into that cross section. The number of pipes is an integer -- no fractional pipes can be packed. The maximum number is followed by the word ", "grid'' if a grid pattern results in the maximal number of pipes or the word", "skew'' if a skew pattern results in the maximal number of pipes. If the pattern doesn't matter, that is the same number of pipes can be packed with either a grid or skew pattern, then the word ``grid'' should be printed. ", "\n\n", "Sample Input", "\n3 3", "\n2.9 10", "\n2.9 10.5", "\n11 11", "\n\n", "Sample Output", "\n9 grid", "\n29 skew", "\n30 skew", "\n126 skew"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;sum&amp;#43;&amp;#61;a[i]*x;是&lt;br /&gt;sum&amp;#61;sum&amp;#43;a[i]*x的缩写&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["c++代码疑问希望有善良的人答疑", ["下面是一个图书的单价表：", "计算概论 28.9元/本", "数据结构与算法 32.7元/本", "数字逻辑 45.6元/本", "C++程序设计教程 78元/本", "人工智能 35 元/本", "计算机体系结构 86.2元/本", "编译原理 27.8元/本", "操作系统 43元/本", "计算机网络 56元/本", "JAVA程序设计 65元/本", "给定每种图书购买的数量，编程计算应付的总费用。", "输入", "输入一行，包含10个整数(大于等于0，小于等于100)，分别表示购买的《计算概论》、《数据结构与算法》、《数字逻辑》、《C++程序设计教程》、《人工智能》、《计算机体系结构》、《编译原理》、《操作系统》、《计算机网络》、《JAVA程序设计》的数量（以本为单位）。每两个整数用一个空格分开。", "输出", "输出一行，包含一个浮点数f，表示应付的总费用。精确到小数点后一位。", "样式输入", "1 5 8 10 5 1 1 2 3 4", "样式输出", "2140.2", "接下来是我的代码：", "#include<bits/stdc++.h>", "using namespace std;", "float a[11]={28.9,32.7,45.6,78,35,86.2,27.8,43,56,65};", "int main(){", "  int x;", "  float sum=0;", "  for(int i=0;i<10;i++)", " {", "  cin>>x;", "  sum+=a[i]*x;", " }", "cout<<sum;", "  return 0;", "}", "\n", "然后呢这个代码我也是做对了，但是我不明白代码第10行的sum+为什么要带一个“+”号去掉就错了，希望有人呢回答我的问题并说出原因，栓Q。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;msp430f5529.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; CPU_F ((double)1000000)&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; delay_us(x)__delay_cycles((long)(CPU_F*(double)x/1000000.0))&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; delay_ms(x)__delay_cycles((long)(CPU_F*(double)x/1000.0))    &lt;span class=\"hljs-comment\"&gt;//定义延时函数&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; DC_motor&amp;#61;&lt;span class=\"hljs-number\"&gt;142&lt;/span&gt;;                    &lt;span class=\"hljs-comment\"&gt;//初始化车速值&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i_20&amp;#61;&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Duoji_init&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;                             &lt;span class=\"hljs-comment\"&gt;//初始化舵机函数&lt;/span&gt;\n&lt;/span&gt;{\n    P2DIR |&amp;#61; BIT0;                            &lt;span class=\"hljs-comment\"&gt;// P2.0 output&lt;/span&gt;\n    P2SEL |&amp;#61; BIT0;                            &lt;span class=\"hljs-comment\"&gt;// P2.0 options select&lt;/span&gt;\n    TA1CCR0 &amp;#61; &lt;span class=\"hljs-number\"&gt;13000&lt;/span&gt;;                          &lt;span class=\"hljs-comment\"&gt;// PWM Period &amp;#61; 20ms&lt;/span&gt;\n    TA1CCTL1 &amp;#61; OUTMOD_7;                      &lt;span class=\"hljs-comment\"&gt;// 选择复位/置位模式&lt;/span&gt;\n    TA1CCR1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1300&lt;/span&gt;;                           &lt;span class=\"hljs-comment\"&gt;// CCR1 PWM duty cycle&lt;/span&gt;\n    TA1CTL &amp;#61; TASSEL_2 &amp;#43; MC_1 &amp;#43; TACLR ;        &lt;span class=\"hljs-comment\"&gt;// SMCLK, up mode, clear TAR.&lt;/span&gt;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;DC_Motor_init&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;                           &lt;span class=\"hljs-comment\"&gt;//初始化电机函数&lt;/span&gt;\n&lt;/span&gt;{\n    P2DIR |&amp;#61; BIT4 &amp;#43; BIT5;                      &lt;span class=\"hljs-comment\"&gt;// P2.4,P2.5 output.&lt;/span&gt;\n    P2SEL |&amp;#61; BIT4 &amp;#43; BIT5;                      &lt;span class=\"hljs-comment\"&gt;// P2.4,P2.5 options select&lt;/span&gt;\n    TA2CCR0 &amp;#61; &lt;span class=\"hljs-number\"&gt;200&lt;/span&gt;;                             &lt;span class=\"hljs-comment\"&gt;// PWM Period &amp;#61; 0.2ms&lt;/span&gt;\n    TA2CCTL1 &amp;#61; OUTMOD_7;                       &lt;span class=\"hljs-comment\"&gt;// CCR1 reset/set&lt;/span&gt;\n    TA2CCR1 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;                               &lt;span class=\"hljs-comment\"&gt;// CCR1 PWM duty cycle&lt;/span&gt;\n    TA2CCTL2 &amp;#61; OUTMOD_7;                       &lt;span class=\"hljs-comment\"&gt;// CCR2 reset/set&lt;/span&gt;\n    TA2CCR2 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;                               &lt;span class=\"hljs-comment\"&gt;// CCR2 PWM duty cycle&lt;/span&gt;\n    TA2CTL &amp;#61; TASSEL_2 &amp;#43; MC_1 &amp;#43; TACLR ;         &lt;span class=\"hljs-comment\"&gt;// SMCLK, up mode, clear TAR.&lt;/span&gt;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n   WDTCTL &amp;#61; WDTPW &amp;#43; WDTHOLD;                  &lt;span class=\"hljs-comment\"&gt;// Stop WDT&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;delay_ms&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;Duoji_init&lt;/span&gt;();                               &lt;span class=\"hljs-comment\"&gt;//调用初始化舵机和电机的函数&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;DC_Motor_init&lt;/span&gt;();\n\n    TA0CCTL0 &amp;#61; CCIE;                           &lt;span class=\"hljs-comment\"&gt;// CCR0 interrupt enabled&lt;/span&gt;\n    TA0CCR0 &amp;#61; &lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;;                            &lt;span class=\"hljs-comment\"&gt;//设置定时时间&lt;/span&gt;\n    TA0CTL &amp;#61; TASSEL_2 &amp;#43; MC_1 &amp;#43; TACLR;          &lt;span class=\"hljs-comment\"&gt;// SMCLK, upmode, clear TAR&lt;/span&gt;\n\n    TA2CCR1 &amp;#61; DC_motor;\n    TA2CCR2 &amp;#61; DC_motor;                          &lt;span class=\"hljs-comment\"&gt;//设置小车初始化速度&lt;/span&gt;\n\n\n  __bis_SR_register(LPM0_bits &amp;#43; GIE);          &lt;span class=\"hljs-comment\"&gt;// Enter LPM0, enable interrupts&lt;/span&gt;\n  __no_operation();                            &lt;span class=\"hljs-comment\"&gt;// For debugger&lt;/span&gt;\n}\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;pragma&lt;/span&gt; vector&amp;#61;TIMER0_A0_VECTOR                &lt;span class=\"hljs-comment\"&gt;// Timer0 A0 interrupt service routine&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;__interrupt &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;TIMER0_A0_ISR&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt;(P6IN&amp;amp;&lt;span class=\"hljs-number\"&gt;0x1f&lt;/span&gt;)\n      {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0x0f&lt;/span&gt;:                            &lt;span class=\"hljs-comment\"&gt;//右1传感器识别到黑线&amp;#xff0c;大右转&lt;/span&gt;\n           TA1CCR1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1570&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;*j&amp;#43;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;*i_20;\n           TA2CCR1 &amp;#61; &lt;span class=\"hljs-number\"&gt;157&lt;/span&gt;;\n           TA2CCR2 &amp;#61; &lt;span class=\"hljs-number\"&gt;122&lt;/span&gt;;\n           &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0x17&lt;/span&gt;:                           &lt;span class=\"hljs-comment\"&gt;//右2传感器识别到黑线&amp;#xff0c;小右转&lt;/span&gt;\n           TA1CCR1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1490&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*j&amp;#43;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*i_20;\n           TA2CCR1 &amp;#61; &lt;span class=\"hljs-number\"&gt;152&lt;/span&gt;;\n           TA2CCR2 &amp;#61; &lt;span class=\"hljs-number\"&gt;142&lt;/span&gt;;\n              &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0x1b&lt;/span&gt;:                               &lt;span class=\"hljs-comment\"&gt;//中间传感器识别到黑线&amp;#xff0c;直行&lt;/span&gt;\n           TA1CCR1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1450&lt;/span&gt;;\n           TA2CCR1 &amp;#61; &lt;span class=\"hljs-number\"&gt;161&lt;/span&gt;;\n           TA2CCR2 &amp;#61; &lt;span class=\"hljs-number\"&gt;161&lt;/span&gt;;\n           &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0x1d&lt;/span&gt;:                             &lt;span class=\"hljs-comment\"&gt;//左2传感器识别到黑线&amp;#xff0c;小左转&lt;/span&gt;\n           TA1CCR1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1330&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;-3&lt;/span&gt;*j&lt;span class=\"hljs-number\"&gt;-5&lt;/span&gt;*i_20;\n           TA2CCR1 &amp;#61; &lt;span class=\"hljs-number\"&gt;152&lt;/span&gt;;\n           TA2CCR2 &amp;#61; &lt;span class=\"hljs-number\"&gt;182&lt;/span&gt;;\n           &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0x1e&lt;/span&gt;:\n           TA1CCR1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1260&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;-6&lt;/span&gt;*j&lt;span class=\"hljs-number\"&gt;-10&lt;/span&gt;*i_20;               &lt;span class=\"hljs-comment\"&gt;//左1传感器识别到黑线&amp;#xff0c;大左转&lt;/span&gt;\n           TA2CCR1 &amp;#61; &lt;span class=\"hljs-number\"&gt;162&lt;/span&gt;;\n           TA2CCR2 &amp;#61; &lt;span class=\"hljs-number\"&gt;197&lt;/span&gt;;\n           &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:                          &lt;span class=\"hljs-comment\"&gt;//进入十字时&amp;#xff0c;所有传感器都检测到黑线&amp;#xff0c;继续直行&lt;/span&gt;\n            TA1CCR1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1450&lt;/span&gt;;\n            TA2CCR1 &amp;#61; &lt;span class=\"hljs-number\"&gt;161&lt;/span&gt;;\n            TA2CCR2 &amp;#61; &lt;span class=\"hljs-number\"&gt;161&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;:\n           &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n      }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["智能循迹小车程序报告", [" 程序算法 总框图", "程序设计总思路 方法与算法", "程序设计结果", "写一个实验报告", "\n", "\n", "2.", "\n", "****", "\n\n", "\n", "\n", "- "]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; java.util.ArrayList;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; java.util.List;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; java.util.Scanner;\n\n&lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Yue {\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; main(String[] args) {\n        Scanner scanner &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; Scanner(&lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.print(&amp;#34;请输入总人数&amp;#xff1a;&amp;#34;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; totalNum &amp;#61; scanner.nextInt();\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.print(&amp;#34;请输入报数的大小&amp;#xff1a;&amp;#34;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cycleNum &amp;#61; scanner.nextInt();\n        yuesefu(totalNum, cycleNum);\n        scanner.&lt;span class=\"hljs-keyword\"&gt;close&lt;/span&gt;();\n    }\n\n    &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; yuesefu(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; totalNum, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; countNum) {\n        // 初始化人数\n        List&amp;lt;&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt; start &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; ArrayList&amp;lt;&lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;&amp;gt;();\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; totalNum; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(i);\n        }\n        // 从第K个开始计数\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;.size() &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n            k &amp;#61; k &amp;#43; countNum;\n            // 第m人的索引位置\n            k &amp;#61; k % (&lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;.size()) - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            // 判断是否到队尾\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (k &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n                &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;.size() - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;));\n                &lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;.remove(&lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;.size() - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n                k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n                &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;get&lt;/span&gt;(k));\n                &lt;span class=\"hljs-keyword\"&gt;start&lt;/span&gt;.remove(k);\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["算法设计 约瑟夫环问题", ["算法设计", "约瑟夫环问题", "     约瑟夫环问题：设编号为1  2  3  ……  n的n(n>0)个人按顺时针方向围坐一圈，每个人持有一个正整数密码。开始时任选一个正整数做为报数上限m     从第一个人开始顺时针方向自1起顺序报数  报到m是停止报数   报m的人出列   将他的密码作为新的m值   从他的下一个人开始重新从1报数。如此下去    直到所有人全部出列为止。令n最大值取30。要求设计一个程序模拟此过程  求出出列编号序列。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;简单的结构体应用&amp;#xff0c;定义结构体是初始化五个结构体对象数组。该系统根据功能进行划分&amp;#xff0c;每个模块对应一个方法实现&amp;#xff0c;根据switch 的选择&amp;#xff0c;执行不同的模块功能。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["求c语言代码的详细算法设计", ["求本代码主要算法的基本思想以及程序中函数模块的划分原则，各模块参数接口；可用伪代码或流程图的方式说明所设计模块的基本思想，急！", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "https://blog.csdn.net/xs18952904/article/details/84670271", "Konwledge_Point": "算法与程序设计", "Question": ["利用C语言的程序设计的技术，计算这个图中的最长最短路径的算法怎么实现", ["Problem Description", "\nThe graph diameter is the length of the \"longest shortest path\" between any two vertices of a graph. In other words, a graph's diameter is the longest path which must be traversed in order to travel from any vertex to another when paths which backtrack, detour, or loop are excluded from consideration.", "\nGiven an undirected graph, your mission is to count the number of diameters of it.", "\n\n", "Input", "\nThe input contains multiple test cases. ", "\nFor each test case, it contains n+1 lines. ", "\nLine 1: two integers m, n (2<= m <= 100, 1 <= n <= 4000) indicating that there are m vertices and n edges in the city. ", "\nLine 2~n+1: each contains three integers i, j, d (1 <= i, j <= m, 1 <= d <= 100), indicating that there is an edge of length d connecting vertex i and vertex j.", "\n\n", "Output", "\nOutput the value of the diameter and the number of diameters in a single line, separated by a single space.", "\n\n", "Sample Input", "\n4 5 ", "\n1 2 1 ", "\n2 3 1 ", "\n3 4 1 ", "\n1 4 1 ", "\n1 3 2 ", "\n\n", "Sample Output", "\n2 5"]], "Tag": "程序设计"}
{"Answer": "https://blog.csdn.net/ba82586628365094/article/details/101622179", "Konwledge_Point": "算法与程序设计", "Question": ["C语言的程序设计技术运用，读取文件行，并且计算最小费用", ["Problem Description", "\nEverybody is fond of computers, but buying a new one is always a money challenge. Fortunately, there is always a convenient way to deal with. You can replace your computer and get a brand new one, thus saving some maintenance cost. Of course, you must pay a fixed cost for each new computer you get.", "\n\n", "Suppose you are considering an n year period over which you want to have a computer. Suppose you buy a new computer in year y, 1<=y<=n Then you have to pay a fixed cost c, in the year y, and a maintenance cost m(y,z) each year you own that computer, starting from year y through the year z, z<=n, when you plan to buy - eventually - another computer.", "\n\n", "Write a program that computes the minimum cost of having a computer over the n year period.", "\n\n", "Input", "\nThe program input is from a text file. Each data set in the file stands for a particular set of costs. A data set starts with the cost c for getting a new computer. Follows the number n of years, and the maintenance costs m(y,z), y=1..n, z=y..n. The program prints the minimum cost of having a computer throughout the n year period.", "\n\n", "White spaces can occur freely in the input. The input data are correct and terminate with an end of file.", "\n\n", "Output", "\nFor each set of data the program prints the result to the standard output from the beginning of a line.", "\n\n", "Sample Input", "\n3", "\n3", "\n5 7 50", "\n6 8", "\n10", "\n\n", "Sample Output", "\n19"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;修改如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n;\nstruct employee\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;  num;  &lt;span class=\"hljs-regexp\"&gt;//num&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;];\n    char name[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    char sex;\n    char post[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;职位\n    char department[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;];&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;部门\n    char Addr[&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;];&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;住址\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;  age;\n};struct employee peo[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\nvoid addmessages(struct employee peo[])\n{\n    char c[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;];\n    &lt;span class=\"hljs-regexp\"&gt;//in&lt;/span&gt;t  n&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;员工编号.姓名.性别.年龄.职务.部门.住址\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;canf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %s %d %s %s %s&amp;#34;&lt;/span&gt;,&amp;amp;peo[n].num,&amp;amp;peo[n].name,&amp;amp;peo[n].sex,&amp;amp;peo[n].age,&amp;amp;peo[n].post,&amp;amp;peo[n].department,&amp;amp;peo[n].Addr);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %c %d %s %s %s&amp;#34;&lt;/span&gt;,&amp;amp;peo[n].num,peo[n].name,&amp;amp;peo[n].sex,&amp;amp;peo[n].age,peo[n].post,peo[n].department,peo[n].Addr);\n        n&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n继续输入下一次请按Y或y&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,c);\n    }&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(!(strcmp(c,&lt;span class=\"hljs-string\"&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;))||!(strcmp(c,&lt;span class=\"hljs-string\"&gt;&amp;#34;y&amp;#34;&lt;/span&gt;)));\n}\nvoid show( struct employee peo[])\n{   &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-regexp\"&gt;//prin&lt;/span&gt;tf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %s %d %s %s %s&amp;#34;&lt;/span&gt;,peo[i].num,peo[i].name,peo[i].sex,peo[i].age,peo[i].post,peo[i].department,peo[i].Addr);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %c %d %s %s %s\\n&amp;#34;&lt;/span&gt;,peo[i].num,peo[i].name,peo[i].sex,peo[i].age,peo[i].post,peo[i].department,peo[i].Addr);\n    }\n}\nvoid find(struct employee peo[])\n{\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入部门,性别查找员工信息:&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i;    &lt;span class=\"hljs-regexp\"&gt;//n&lt;/span&gt;,\n    char bm[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    char sex1;\n    &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;canf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s%s&amp;#34;&lt;/span&gt;,bm,&amp;amp;sex1);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s %c&amp;#34;&lt;/span&gt;,bm,&amp;amp;sex1);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n       &lt;span class=\"hljs-regexp\"&gt;//i&lt;/span&gt;f(!(strcmp(peo[i].department,bm))&amp;amp;&amp;amp;!(strcmp(peo[i].sex,sex1)))\n       &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((strcmp(peo[i].department,bm)&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)&amp;amp;&amp;amp;(peo[i].sex &amp;#61;&amp;#61; sex1))\n       {\n          &lt;span class=\"hljs-regexp\"&gt;//prin&lt;/span&gt;tf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %s %d %s %s %s&amp;#34;&lt;/span&gt;,peo[i].num,peo[i].name,peo[i].sex,peo[i].age,peo[i].post,peo[i].department,peo[i].Addr);\n          &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %c %d %s %s %s\\n&amp;#34;&lt;/span&gt;,peo[i].num,peo[i].name,peo[i].sex,peo[i].age,peo[i].post,peo[i].department,peo[i].Addr);\n          &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n       }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;gt;&amp;#61; n)\n       &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;not found!\\n&amp;#34;&lt;/span&gt;);\n}\nmain()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; menu ;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;1. 输入数据 \\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;2. 显示所有员工信息 \\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;3. 输入部门、性别&amp;#xff0c;显示该部门的员工记录\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;4. 结束.&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入数字1—3:&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;menu);\n        switch (menu)\n        {\n        case &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n               addmessages(peo);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt; ;\n        case &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n               show(peo);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        case &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n               find(peo);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        case &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:\n               &lt;span class=\"hljs-keyword\"&gt;exit&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n        }\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["公司员工基本信息管理程序设计 设计结构体数组，结构中包含数据为：员工编号、姓名、性别、年龄、职务、部门、住址。 设计各个函数，通过选择菜单调用以上各函数", ["这个问题没搞懂怎么改，后两个不能跑", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n", "#", "include", " ", "<string.h>", "\n", "int", " n;\n", "struct", " ", "employee", "\n{\n    ", "int", " num[", "1000", "];\n    ", "char", " name[", "20", "];\n    ", "char", " sex;\n    ", "char", " post[", "20", "];", "//职位", "\n    ", "char", " department[", "30", "];", "//部门", "\n    ", "char", " Addr[", "50", "];", "//住址", "\n    ", "int", " age;\n};", "struct", " ", "employee", " peo[", "10", "];\n", "void", " ", "addmessages", "(", "struct", " employee peo[])", "\n", "{\n    ", "char", " c[", "2", "];\n    ", "int", " n=", "0", ";\n    ", "do", "\n    {\n        ", "printf", "(", "\"员工编号.姓名.性别.年龄.职务.部门.住址\\n\"", ");\n        ", "scanf", "(", "\"%d %s %s %d %s %s %s\"", ",&peo[n].num,&peo[n].name,&peo[n].sex,&peo[n].age,&peo[n].post,&peo[n].department,&peo[n].Addr);\n        n++;\n        ", "printf", "(", "\"\\n继续输入下一次请按Y或y：\"", ");\n        ", "scanf", "(", "\"%s\"", ",c);\n\n    }", "while", "(!(", "strcmp", "(c,", "\"Y\"", "))||!(", "strcmp", "(c,", "\"y\"", ")));\n}\n", "void", " ", "show", "( ", "struct", " employee peo[])", "\n", "{   ", "int", " i;\n    ", "for", "(i=", "0", ";i<n;i++)\n    {\n        ", "printf", "(", "\"%d %s %s %d %s %s %s\"", ",peo[i].num,peo[i].name,peo[i].sex,peo[i].age,peo[i].post,peo[i].department,peo[i].Addr);\n    }\n\n}\n", "void", " ", "find", "(", "struct", " employee peo[])", "\n", "{\n    ", "printf", "(", "\"输入部门,性别查找员工信息:\"", ");\n    ", "int", " n,i;\n    ", "char", " bm[", "20", "];\n    ", "char", " sex1;\n    ", "scanf", "(", "\"%s%s\"", ",bm,&sex1);\n    ", "for", "(i=", "0", ";i<n;i++)\n    ", "if", "(!(", "strcmp", "(peo[i].department,bm))&&!(", "strcmp", "(peo[i].sex,sex1)))\n    {\n        ", "printf", "(", "\"%d %s %s %d %s %s %s\"", ",peo[i].num,peo[i].name,peo[i].sex,peo[i].age,peo[i].post,peo[i].department,peo[i].Addr);\n    }\n}\n", "main", "()\n{\n    ", "int", " menu ;\n    ", "while", " (", "1", ")\n    {\n        ", "printf", " (", "\"1. 输入数据 \\n\"", ");\n        ", "printf", " (", "\"2. 显示所有员工信息 \\n\"", ");\n        ", "printf", " (", "\"3. 输入部门、性别，显示该部门的员工记录\\n\"", ");\n        ", "printf", " (", "\"4. 结束.\"", ");\n        ", "printf", "(", "\"请输入数字1—3:\"", ");\n        ", "scanf", "(", "\"%d\"", ",&menu);\n        ", "switch", " (menu)\n        {", "case", " ", "1", ":\n        ", "addmessages", "(peo);", "break", " ;\n        ", "case", " ", "2", ":\n        ", "show", "(peo);", "break", ";\n        ", "case", " ", "3", ":\n        ", "find", "(peo);", "break", ";\n        ", "case", " ", "4", ":\n        ", "exit", "(", "0", ");\n        }\n    }\n}\n\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; matplotlib.pyplot as plt\n&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n&lt;span class=\"hljs-attribute\"&gt;def&lt;/span&gt; f(x):\n    &lt;span class=\"hljs-attribute\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;*np.power(x,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)-&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;*np.power(x,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)&amp;#43;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;*x&amp;#43;np.power(x,-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)&amp;#43;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;def&lt;/span&gt; df(x):\n    &lt;span class=\"hljs-attribute\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;*np.power(x,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;)-&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;*np.power(x,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)&amp;#43;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*np.power(x,-&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n\n&lt;span class=\"hljs-attribute\"&gt;x&lt;/span&gt; &amp;#61; np.arange(-&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.figure(dpi&amp;#61;&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;,figsize&amp;#61;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;))\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.plot(x,f(x),label&amp;#61;&amp;#39;f(x)&amp;#39;)\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.plot(x,df(x), label&amp;#61;&amp;#39;df(x)&amp;#39;)\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.xlim(-&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.xlabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;x&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.ylabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;y&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.legend()\n&lt;span class=\"hljs-attribute\"&gt;plt&lt;/span&gt;.show()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/608027918266122.jpg\" class=\"md_img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["编写程序多项式f(x)", ["编写程序绘制多项式fx）", "及其导两数的图像，多项式", "如下：", "f(x) = 415 - 1023 + 72 + 2-2 + 10."]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这个程序没啥问题&amp;#xff0c;当你输完最后一组数据按下回车的时候&amp;#xff0c;按下ctrl&amp;#43;z&amp;#xff0c;再按下回车就可以结束输入了&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["如何用C语言设计一个随时停的循环？", ["本人小白，码龄不到两周，求大佬指点", "如何设计一个循环，想让它停它才停，不限制最大输入的组数，比如下面这个题：", "一个人去参加商店促销，有满减和打折两种券，可以同时使用。", "第一行输入两个整数表示满减优惠活动，例如：100 50表示满一百减五十；", "第二行输入一个（0，1）之间的数表示商店折扣；", "以下多行输入所选商品的单价和数量，单价不一定是整数；", "输出购买商品最少需要的金额，保留两位小数。", "下面是我的代码：", "\n", "\n\n", "#", "include", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " number,jian;\n    ", "double", " zhe,shu,danjia,sum=", "0", ",realsum1,realsum2;\n    ", "scanf", "(", "\"%d%d\"", ",&number,&jian);\n    ", "scanf", "(", "\"%lf\"", ",&zhe);\n    ", "while", "(~", "scanf", "(", "\"%lf%lf\"", ",&danjia,&shu))\n    {\n        sum+=danjia*shu;\n    }\n    ", "if", "(sum*zhe>=number)\n        realsum1=sum*zhe-(", "int", ")(sum*zhe/number)*jian;\n    ", "else", "\n        realsum1=sum*zhe;\n    ", "if", "(sum>=number)\n        realsum2=(sum-(", "int", ")(sum/number)*jian)*zhe;\n    ", "else", "\n        realsum2=sum*zhe;\n    ", "if", "(realsum1>=realsum2)\n        ", "printf", "(", "\"%.2lf\"", ",realsum2);\n    ", "else", "\n        ", "printf", "(", "\"%.2lf\"", ",realsum1);\n    ", "return", " ", "0", ";\n}\n", "\n", "如果去掉while只输入一组数据得到的答案是正确的，但是现在这个结构无法输出数据。求大佬指点！"]], "Tag": "程序设计"}
{"Answer": "不是很清楚你要做什么，按照我的理解修改了下\r\n\r\n\r\n```\r\n#include&lt;iostream&gt; \r\n#include&lt;iomanip&gt;\r\n\r\nusing namespace std;\r\nint main()\r\n{\r\nint k, a[10], i, j;\r\ndouble sum;\r\ncout &lt;&lt; \"请输入数组数：\";\r\ncin &gt;&gt; k;\r\ncout &lt;&lt; \"请输入具体数据：\";\r\nfor (i = 0; i &lt; k; i++)\r\n\tcin &gt;&gt; a[i];\r\nfor (i = k; i &lt; 10; i++)\r\n\ta[i] = 0;\r\ncout &lt;&lt; endl;\r\nsum = 28.9* a[0] + 32.7 * a[1] + 45.6* a[2] + 78 * a[3] + 35 * a[4] + 86.2* a[5] + 27.8 * a[6] + 43 * a[7] + 65 * a[8] + 65 * a[9];\r\ncout &lt;&lt; \"书费为:\" &lt;&lt; setprecision(2) &lt;&lt; sum;\r\n\r\n}\r\n\r\n```\r\n比较明显的错误是 cin &gt;&gt; a[10]; 这里显然越界了。", "Konwledge_Point": "算法与程序设计", "Question": ["谢谢大佬们看看我打的有什么问题，谢谢啦", ["/***********************************************************", "\n2. 1.      计算书费", "\n描述：下面是一个图书的单价表：计算概论 28.9 元/本；数据结构与算法 32.7 元/本；数字逻辑 45.6元/本；C++程序设计教程 78 元/本；人工智能 35 元/本；计算机体系结构 86.2 元/本；编译原理 27.8元/本；操作系统 43 元/本；计算机网络 56 元/本；JAVA程序设计元/本。给定每种图书购买的数量，编程计算应付的总费用。", "\n输入：输入第一行包含一个正整数k（0<k<100），表示有k组测试数据；接下来k行，每行包含一组测试数据。每组测试数据包含10个整数(大于等于0，小于等于100)，分别表示购买的《计算概论》、《数据结构与算法》、《数字逻辑》、《C++程序设计教程》、《人工智能》、《计算机体系结构》、《编译原理》、《操作系统》、《计算机网络》、《JAVA程序设计》的数量（以本为单位）。每两个整数用一个空格分开。", "\n输出：对于每组测试数据，输出一行。该行包含一个浮点数f，表示应付的总费用。精确到小数点后两位。可用printf(\"%.2f\\n\", sum)来输出sum的值，并精确到小数点后两位。", "\n样例输入：", "\n2", "\n1 5 8 10 5 1 1 2 3 4", "\n3 5 6 3 100 1 1 0 1 0", "\n样例输出：", "\n2140.20", "\n4427.80", "\n\n", "（我的想法是每输入10个数据循环一次出结果，循环K次，但是和题目输出有点不同，我是输入一次循环一次，他是输入完后再进行全部输出。）", "\n*************************************/", "\n#include", "\n#include", "\nusing namespace std;", "\nint main()", "\n{", "\n    int k, a[10], i, j;", "\n    double sum;", "\n    cout << \"请输入数组数：\";", "\n    cin >> k;", "\n    cout << \"请输入具体数据：\";", "\n    cout << endl;", "\n    for (j = 0; j \n    {", "\n    for (i = 0; i \n    cin >> a[i];", "\n    sum = 28.9* a[0] + 32.7 * a[1] + 45.6* a[2] + 78 * a[3] + 35 * a[4] + 86.2* a[5] + 2  7.8 * a[6] + 43 * a[7] + 56 * a[8] + 65 * a[9];", "\n    cout << \"书费为:\" <<  sum;//如果是cout<<\"书费为:\" << setprecision(2)<<sum;  2位小数输出不对为啥呀谢谢", "\n    system(\"pause\");", "\n    }", "\n     return 0;", "\n}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt; 代码&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;stdlib.h&amp;gt;\n#include &amp;lt;time.h&amp;gt;\n#include &amp;lt;algorithm&amp;gt;\nusing namespace std;\n#pragma warning(disable:4996)\nint desc(int x,int y) {\n\treturn x &amp;gt; y;\n}\nint asc(int x, int y) {\n\treturn x &amp;lt; y;\n}\nint main() {\n\tint b &amp;#61; 100;\n\tint a &amp;#61; 0;\n\tint arrs[100];\n\tint count &amp;#61; 0;\n\tint sum &amp;#61; 0;\n\tsrand((unsigned int)time(NULL));\n\t// 生成随机数\n\twhile (count &amp;lt; 100) {\n\n\t\tint x &amp;#61; (rand() % (b - a) &amp;#43; a);\n\t\tarrs[count] &amp;#61; x;\n\t\tcount&amp;#43;&amp;#43;;\n\t}\n\t// 适当形式打印\n\tcount &amp;#61; 0;\n\twhile (count &amp;lt; 100) {\n\t\tif (count % 5 &amp;#61;&amp;#61; 0) {\n\t\t\tprintf(&amp;#34;\\n&amp;#34;);\n\t\t}\n\t\tprintf(&amp;#34;%d\\t&amp;#34;, arrs[count]);\n\t\tsum &amp;#43;&amp;#61; arrs[count];\n\t\tcount&amp;#43;&amp;#43;;\n\t}\n\tint x &amp;#61; arrs[0];\n\tif (arrs[0] % 2 &amp;#61;&amp;#61; 1) {\n\t\t// c&amp;#43;&amp;#43; 11 中 lambda表达式;\n\t\t// 如果编译器比较老 \n\t\t// 可以传递参数  bool cmp(int a,int b);\n\t\tsort(arrs, arrs &amp;#43; 100, asc);\n\t\t// sort(arrs, arrs &amp;#43; 100, [](int x, int y) {return x &amp;gt; y; });\n\t}\n\telse {\n\t\t// sort(arrs, arrs &amp;#43; 100, [](int x, int y) {return x &amp;lt; y; });\n\t\tsort(arrs, arrs &amp;#43; 100, desc);\n\t}\n\tprintf(&amp;#34;\\n第一个数:%d\\n排序后\\n&amp;#34;,x);\n\tcount &amp;#61; 0;\n\twhile (count &amp;lt; 100) {\n\t\tif (count % 5 &amp;#61;&amp;#61; 0) {\n\t\t\tprintf(&amp;#34;\\n&amp;#34;);\n\t\t}\n\t\tprintf(&amp;#34;%d\\t&amp;#34;, arrs[count]);\n\t\tcount&amp;#43;&amp;#43;;\n\t}\n\tif (x % 2 &amp;#61;&amp;#61; 1) {\n\t\tprintf(&amp;#34;\\n最大值%d,最小值%d,总值%d,平均值%lf:\\n&amp;#34;, arrs[99],arrs[0], sum, (double)sum / 100);\n\t}\n\telse {\n\t\tprintf(&amp;#34;\\n最大值%d,最小值%d,总值%d,平均值%lf:\\n&amp;#34;, arrs[0],arrs[99], sum, (double)sum / 100);\n\t}\n\treturn 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;打印值&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;\n90      21      39      49      29\n31      28      19      67      1\n25      68      10      32      82\n4       49      43      22      36\n67      4       91      44      85\n65      75      35      91      56\n40      26      76      37      75\n80      41      63      68      1\n34      77      85      98      38\n30      64      96      24      52\n2       37      39      33      57\n75      19      58      84      30\n84      35      13      37      30\n44      96      16      70      99\n74      64      89      93      33\n10      45      45      46      89\n0       98      22      86      83\n69      1       29      83      35\n4       49      32      21      90\n12      86      96      30      96\n第一个数:90\n排序后\n\n99      98      98      96      96\n96      96      93      91      91\n90      90      89      89      86\n86      85      85      84      84\n83      83      82      80      77\n76      75      75      75      74\n70      69      68      68      67\n67      65      64      64      63\n58      57      56      52      49\n49      49      46      45      45\n44      44      43      41      40\n39      39      38      37      37\n37      36      35      35      35\n34      33      33      32      32\n31      30      30      30      30\n29      29      28      26      25\n24      22      22      21      21\n19      19      16      13      12\n10      10      4       4       4\n2       1       1       1       0\n最大值99,最小值0,总值5031,平均值50.310000:&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["c++ 按以下要求编写程序：①定义一个具有100个元素的整数数组。", ["    按以下要求编写程序：①定义一个具有100个元素的整数数组。②使用随机函数为该数组的各元素赋值为0-100之间的随机整数值。    ③以适当格式显示该数组中的所有元素值。    ④如果数组的第一个数为偶数，则降序排列，如果第一个数为奇数，则升序排列。    ⑤统计该数组中最大值、最小值、总计值和平均值。", "\n\n", " ", "\n\n", "写了好几组都运行不出来，不知道自己思路是不是错了，要怎么编写呢，有没有案例可以让我研究一下"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;餐盒总数&amp;#xff1a;max值&lt;/p&gt;\n\n&lt;p&gt;学生队列&amp;#xff1a;先拿餐盒先买饭&amp;#xff0c;拿出来的餐盒放进 堆栈中&lt;/p&gt;\n\n&lt;p&gt;待堆栈中餐盒数量 &amp;#61; max时&amp;#xff0c;做出栈操作&amp;#xff0c;将出栈的餐盒放进一个队列中&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;\n\n&lt;p&gt;学生吃饭速度不可控&amp;#xff0c;餐盒入栈需要等待过程&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["一个关于栈和队列的程序设计题", ["设计一个演示程序，模拟学生在食堂的就餐过程。", "\n学生在食堂买饭的过程：同学们到食堂按次序由上到下拿快餐盒，然后按先后顺序排队买饭，买饭后离队就餐，吃完后洗净饭盒，并将饭盒按次序放回原处（假设饭盒是由上到下重叠放置，为简化任务，设饭盒只有一碟，买饭窗口只有一个）。模拟该过程的实现。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;流程图如下&amp;#xff1a;&lt;br /&gt;&amp;#xff08;1&amp;#xff09;录入和浏览函数流程图&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/183243436666138.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;&amp;#xff08;2&amp;#xff09;统计函数流程图&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/946563436666198.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&amp;#xff08;3&amp;#xff09;排序函数流程图&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/906273436666167.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["求此题流程图，是流程图，不是代码！", ["战斗机最大飞行高度统计", "实验要求：", "               从键盘输入N（N>=5）架战斗机型号和对应的最大飞行高度（如：MiG-31: 25000米、U2: 24000米、F-22: 22000米、Typhoon: 20000米、F-15: 19697米），要求至少自定义2个函数。", "实现如下功能： ", "               （1）录入和浏览功能：将战斗机的型号和最大飞行高度分别录入到显示系统中，并给出输出。", "               （2）统计功能：计算战斗机的平均飞行高度，并输出大于平均飞行高度的战斗机型号。", "               （3）排序功能：按照从大到小的顺序，依次地输出最大飞行高度值。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/780399163846164.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["一个C语言编程思路的问题", ["\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<string.h>", " ", "\n", "void", " ", "search", "(", "char", " *storage[j])", "{\n    ", "int", " len;\n    len=", "strlen", "(storage[j]);\n    ", "for", "(", "int", " d=", "0", ";d<len;d++){\n        ", "if", "(storage[d]!=", "'P'", "&&storage[d]!=", "'T'", "&&storage[d]!=", "'A'", "){\n            ", "printf", "(", "\"NO\"", ");\n        }", "else", "{\n            ", "printf", "(", "\"YES\"", ");\n        }\n    }\n    \n}\n", "int", " ", "main", "()", "{\n    ", "char", " storage[][", "10", "];\n    ", "int", " n,i;\n    ", "scanf", "(", "\"%d\"", ",%n);\n    ", "for", "(i=", "0", ";i<n;i++){\n        ", "scanf", "(", "\"%s\"", ",storage[i]);\n}\n    ", "for", "(", "int", " j=i;j>=", "0", ";j--){\n        ", "search", "(storage[j]);\n    }\n    ", "return", " ", "0", ";\n}\n", "\n", "我想达到的效果是，能够设计一个函数逐个遍历并审查我存储的每个数组字符串，但是遇到了点问题：", "\n", "\n", "问题具体出在哪里我不太清楚"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;math.h&amp;gt;\nint main()\n{\nfloat x0,x1,x2,y0,y1,y2;\nprintf(&amp;#34;please input x1,x2:\\n&amp;#34;);\nloop: scanf(&amp;#34;%lf %lf&amp;#34;,&amp;amp;x1,&amp;amp;x2);\ny1&amp;#61;2*pow(x1,3)-4*pow(x1,2)&amp;#43;3*x1-6;\ny2&amp;#61;2*pow(x2,3)-4*pow(x2,2)&amp;#43;3*x2-6; if (y1&amp;#43;y2&amp;gt;&amp;#61;y1)\n{\nprintf(&amp;#34;请重新输入&amp;#34;);\ngoto loop;\n}\nelse\n{\ndo\n{ x0&amp;#61;(x1*y2-x2*y1)/(y2-y1);\ny0&amp;#61;2*pow(x0,3)-4*pow(x0,2)&amp;#43;3*x0-6; if(y0*y1&amp;gt;0)\n{\nx1&amp;#61;x0;\ny1&amp;#61;y0;\n}\nelse\n{\nx2&amp;#61;x0;\ny2&amp;#61;y0;\n}\n}\nwhile(fabs(y0)&amp;gt;1e-4);\nprintf(&amp;#34;%f&amp;#34;,x0) ;\n}\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"264\" src=\"https://img-ask.csdnimg.cn/upload/1623466110249.png\" width=\"467\" /&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["用弦截法求程2x3-4x2+3x-6=0在(0,3)内的近似根，直到|f(x)|<0.0001为止。", ["C语言程序。用弦截法求程2x3-4x2+3x-6=0在(0,3)内的近似根，直到|f(x)|<0.0001为止。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;s&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;__init__&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self&lt;/span&gt;):\n        self.ss &amp;#61; &lt;span class=\"hljs-built_in\"&gt;set&lt;/span&gt;()\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n            n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;输入你的元素值&amp;#xff1a;&amp;#39;&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; n &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;:\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n            self.ss.add(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(n))\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;get_child&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, value&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;集合长度为&lt;span class=\"hljs-subst\"&gt;{&lt;!-- --&gt;&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(self.ss)}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; value &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; self.ss:\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;&lt;span class=\"hljs-subst\"&gt;{value}&lt;/span&gt;不在集合里面&amp;#39;&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;&lt;span class=\"hljs-subst\"&gt;{value}&lt;/span&gt;在集合里面&amp;#39;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;delete_child&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, value&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; value &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; self.ss:\n            self.ss.remove(value)\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;集合删除元素&lt;span class=\"hljs-subst\"&gt;{value}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;集合所有元素&lt;span class=\"hljs-subst\"&gt;{self.ss}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;run_set&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;self, new_set&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;集合&lt;span class=\"hljs-subst\"&gt;{self.ss}&lt;/span&gt;与新集合&lt;span class=\"hljs-subst\"&gt;{new_set}&lt;/span&gt;的交集&lt;span class=\"hljs-subst\"&gt;{self.ss &amp;amp; new_set}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;集合&lt;span class=\"hljs-subst\"&gt;{self.ss}&lt;/span&gt;与新集合&lt;span class=\"hljs-subst\"&gt;{new_set}&lt;/span&gt;的合集&lt;span class=\"hljs-subst\"&gt;{self.ss | new_set}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#39;集合&lt;span class=\"hljs-subst\"&gt;{self.ss}&lt;/span&gt;与新集合&lt;span class=\"hljs-subst\"&gt;{new_set}&lt;/span&gt;的差集&lt;span class=\"hljs-subst\"&gt;{self.ss | new_set}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n\ns &amp;#61; s()\ns.get_child(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\ns.delete_child(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\ns.run_set({&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;})\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/594613958546197.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["python数据结构 算法设计题", ["已知构造集合的ADT Set的抽象数据类型如下", "图所示。", "设计．一个完整的程序，实现集合抽象数据类型", "的数据结构，并用相关数据进行测试。要求：", "定义集合类Set，假设其中元素为整型，遵循", "标准数学定义实现以下运算：", "（1） 基本运算：求集合长度、求第i个元素、", "判断一个元素是否属于集合、向集合中添加一", "个元素、从集合中删除一个元素、复制集合和", "输出集合中所有元素。", "（2） 集合运算：求两个集合并Union、集合", "交Inter和集合差Diff。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;dfs呗&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["Python程序设计 中档题 请教", ["要用到什么算法呢，请求DL提供一个思路即可，一点都没有真的！QAQ"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;math.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; IsPrime(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n);\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; hws(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n);\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main( )\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n,i,j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a,b,&lt;span class=\"hljs-regexp\"&gt;m[100]&lt;/span&gt;;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;b);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;a;i&amp;lt;&amp;#61;b;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(hws(i))\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(IsPrime(i))\n            {\n                &lt;span class=\"hljs-regexp\"&gt;m[j]&lt;/span&gt;&amp;#61;i;\n                j&amp;#43;&amp;#43;; \n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j&amp;lt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;回文素数个数为&amp;#xff1a;%d\\n&amp;#34;&lt;/span&gt;,j);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;j-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i--)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-regexp\"&gt;m[i]&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i%2!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; j%2!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;j-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;gt;&amp;#61;j-&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;;i--)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-regexp\"&gt;m[i]&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i%2&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n            }\n        }\n    }    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n//判断是否素数\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; IsPrime(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n)\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; flag&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;lt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n    {\n        flag&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n%i&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            flag&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; flag;\n}\n//判断是否回文数\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; hws(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n)\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;&amp;#61;n,&lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,b;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        b&amp;#61; &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;%10;\n        &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;*&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#43;b;\n        &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt; &amp;#61;&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;/&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;#61;&amp;#61;&lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["程序设计实验：键盘接收两个正整数，输出它们之间的最大6个回文素数。要求每行输出两个数。如果不足6个，要报告实际个数", ["键盘接收两个正整数，输出它们之间的最大6个回文素数。要求每行输出两个数。如果不足6个，要报告实际个数"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://blog.csdn.net/qq_38382925/article/details/113090677\"&gt;https://blog.csdn.net/qq_38382925/article/details/113090677&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["Java程序设计 实验05", ["冒泡排序", "BubbleSort.java", "：定义一个包含1000个元素的一维数组，数组的元素类型是int。\n\t", "使用顺序的数填充该数组，使用冒泡排序算法对数组元素进行排序，并估算排序的时间。", "使用逆序的数填充该数组，使用冒泡排序算法对数组元素进行排序，并估算排序的时间。", "使用Math类随机生成1000个数填充该数组，使用冒泡排序算法对数组元素进行排序，并估算排序的时间。", "试对比上述时间的运行差异，并说明为什么? 把数组元素类型改成double，并观察排序的时间。", "\n\t", "\n\n", " ", "\n\n", "在OI、ICPC和CCPC等程序设计竞赛中，常使用以下几种代码来表示对所提交程序的判定结果:", "\n\n", "AC", "\n\n", "Accepted", "\n\n", "通过", "\n\n", "WA", "\n\n", "Wrong Answer", "\n\n", "答案错误", "\n\n", "TLE", "\n\n", "Time Limit Exceed", "\n\n", "超时", "\n\n", "OLE", "\n\n", "Output Limit Exceed", "\n\n", "超过输出限制", "\n\n", "MLE", "\n\n", "Memory Limit Exceed", "\n\n", "超内存", "\n\n", "RE", "\n\n", "Runtime Error", "\n\n", "运行时错误", "\n\n", "PE", "\n\n", "Presentation Error", "\n\n", "格式错误", "\n\n", "CE", "\n\n", "Compile Error", "\n\n", "无法编译", "\n\n", " ", "\n\n", "请使用枚举编写简易程序判定器：", "\n\n", "\n\t", "定义枚举类型Result，其中包含上述AC、WA等所有常量，并编写构造方法标注各常量对应的中文含义和英文含义。", "随机生成一个整数（1~8，分别表示上述8种情形），并输出该整数对应的枚举常量及其中英文含义。", "\n\t"]], "Tag": "程序设计"}
{"Answer": "http://blog.sina.com.cn/s/blog_6fb8700f0101iupl.html", "Konwledge_Point": "算法与程序设计", "Question": ["求这个题代码的算法设计和流程图", ["问题描述", "\nYOYO非常喜欢CICI，今天他终于向CICI表白了，但是CICI当然不会随随便便的接受，她想找个聪明的男朋友。于是她给YOYO出了个难题，她要求YOYO从商店里中找出一块巧克力。这听 起来不算什么，但是这块巧克力的要求可真是让YOYO犯难了，要求如下：", "\n1、这块巧克力一定要是商店里质量最大的；", "\n2、这块巧克力一定要是质量最大的巧克力中最薄的；", "\n3、这块巧克力一定要是符合前两条的巧克力中编码最大的（每块巧克力都有一个互不相同的编码，越大表示生产日期越近）。", "\n相关的资料到是有，可是，手工从几百块巧克力中选出符合要求的那块…… ", "\n不过YOYO说，这个问题写个小的程序就能解决了。聪明的你一定知道他是怎么解决的吧。", "\n输入：", "\n\n", "有多组数据，第一行一个数字T，表示测试数据的组数。之后有T组数据。", "\n每组数据的第一行为一个整数 N（ N<1000000），表示商店里所有巧克力的数量。", "\n之后N行，每行三个整数，分别表示一块巧克力的质量L、厚度D和编码M（一个9位整数）,所有数字保证最高位非零。", "\n\n", "输出：", "\n\n", "共有T行，第i行只有一个9位整数，表示第i组数据中选出的那块巧克力的编码。", "\n\n", "样例输入：", "\n\n", "1", "\n4", "\n3000 50 872198442", "\n3000 45 752498124", "\n2000 60 765128742", "\n3000 45 652278122", "\n\n", "样例输出：", "\n\n", "752498124", "\n\n", "#include", "\nint main()", "\n{", "\nint n;", "\nscanf(\"%d\",&n);", "\nwhile(n--)", "\n{", "\nint m,a,b,c;", "\nint a1,b1,c1;", "\nscanf(\"%d\",&m);", "\nscanf(\"%d %d %d\",&a,&b,&c);", "\nfor(int i = 1;i < m;i++ )", "\n{", "\nscanf(\"%d %d %d\",&a1,&b1,&c1);", "\nif(a < a1 || (a == a1 && b > b1) || (a == a1 && b == b1 && c < c1))", "\n{", "\na = a1,b = b1,c = c1;", "\n}", "\n}", "\nprintf(\"%d\\n\",c);", "\n}", "\nreturn 0;", "\n}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你这是让别人给你写作业来了吗&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["初级程序设计编程练习题", ["编写并测试一个函数innerProd(x，y) 它计算两个（相同长度）列表的内积。x 和y的内积计算如下：", "编写并测试一个函数removeDuplicates(somelist)，从列表中删除重复值。提示：新建一个空列表mlist，如果somelist中的元素没有出现在mlist中，将此元素追加到mlist中。", "编写并测试一个函数shuffle(myList)，该函数返回一个新的列表，此列表的内容为：随机打乱myList列表中各个元素的顺序。注意：不可使用Python自带的random模考中shuffle()函数。提示：可以使用random模块中的randrange函数产生指定范围的随机数，randrange函数的介绍见教材P179或", "\n  \n    ", "Python randrange() 函数 | 菜鸟教程", "\n    \n  ", "Python  randrange() 函数  Python 数字  描述  randrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。 语法 以下是 randrange() 方法的语法:  import random  random.randrange ([start,] stop [,step])  注意：randrange()是不能直接访问的，需要导入 random  模块，然后通过 random 静态对象调..", "\n  ", "\n  ", "\n    ", "\n      ", "https://www.runoob.com/python/func-number-randrange.html", "\n    ", "\n  ", "埃拉托斯特尼筛法是一种优雅的算法，用于确定不超过n 的所有素数。基本思想是首先创建从2 到n 的数字列表。第一个数字从列表中删除，并作为素数公布，而且将该数字的所有倍数从列表中删除。此过程一直持续到列表为空。例如，如果我们希望找到不超过10 的所有素数，该列表最初将包含2、3、4、5、6、7、8、9、10。2 被删除并宣布为素数。然后4、6、8 和10 被删除，因为它们是2 的倍数。这会留下3、5、7、9。重复该过程，3 被宣布为素数并删除，并且9 被删除，因为它3 的倍数。这会留下5 和7。算法继续宣布5 是素数，并将它从列表中删除。最后，7 被宣布和删除。编写一个程序提示用户输入n，然后用筛选算法找出小于或等于n 的所有素数。"]], "Tag": "程序设计"}
{"Answer": "```\r\nchar* Decode(char *s)\r\n{\r\nchar * s1 = (char *)malloc(sizeof(char) * (strlen(s) + 1));\r\nint i;\r\nfor (i = 0; s[i]; i++)\r\n{\r\nif (s[i] &gt;= 'A' &amp;&amp; s[i] &lt;= 'Z') s1[i] = (s[i] - 'A' + 4) % 26 + 'A';\r\nelse if (s[i] &gt;= 'a' &amp;&amp; s[i] &lt;= 'z') s1[i] = (s[i] - 'a' + 4) % 26 + 'a';\r\nelse s1[i] = s[i];\r\n}\r\ns1[i] = '\\0';\r\nreturn s1;\r\n}\r\n```\r\n# 问题解决的话，请点下采纳", "Konwledge_Point": "算法与程序设计", "Question": ["C语言编程题目——字符串简单加密", ["请问怎么做？", "\n\n", "编写函数char*  Decode(char *s)，实现对纯字母字符串s的加密操作，返回值仍然为加密以后的s。加密规则是将字符串中大小写字母的ascii码值加4，若码值加4后大于’z’或’Z’，则该码值循环映射到a-d或A-D。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;傻子做法&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#include &amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; namespace std;\n\nconst &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; N&amp;#61;&lt;span class=\"hljs-number\"&gt;1e6&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; treee[N];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,flag&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; find_public_father(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; u,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v){\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t1&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,t2&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,arr1[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;],arr2[&lt;span class=\"hljs-number\"&gt;10000&lt;/span&gt;];\n    arr1[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;u; arr2[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;v;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(u&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;){\n        u/&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        arr1[t1&amp;#43;&amp;#43;]&amp;#61;u;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(v&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;){\n        v/&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        arr2[t2&amp;#43;&amp;#43;]&amp;#61;v;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;t1;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;t2;j&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(arr1[i]&amp;#61;&amp;#61;arr2[j]){\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; arr1[i];\n            }\n        }\n    }\n}\n\n&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; u,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; w){\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(u&amp;#61;&amp;#61;v){\n        flag&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(u&amp;gt;v){\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u,v,w);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag){\n        treee[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u]&amp;#43;&amp;#61;w;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,v,w);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag){\n        treee[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#43;&amp;#61;w;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; travel(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; u,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v){\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(u&amp;#61;&amp;#61;v){\n        flag&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(u&amp;gt;v){\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    travel(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u,v);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag){\n        sum&amp;#43;&amp;#61;treee[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u];\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    travel(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,v);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag){\n        sum&amp;#43;&amp;#61;treee[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*u&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; main(){\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; q; cin &amp;gt;&amp;gt; q;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(q&lt;span class=\"hljs-comment\"&gt;--){&lt;!-- --&gt;&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x,u,v,w;; cin &amp;gt;&amp;gt; x;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;){\n            cin &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v &amp;gt;&amp;gt; w;\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; father&amp;#61;find_public_father(u,v); \n            // cout &amp;lt;&amp;lt; &amp;#34;their father is:&amp;#34; &amp;lt;&amp;lt; father &amp;lt;&amp;lt; endl;\n            flag&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(father,u,w);\n            flag&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(father,v,w);\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;){\n            cin &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v;\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; father&amp;#61;find_public_father(u,v);\n            sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            flag&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; travel(father,u);\n            flag&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; travel(father,v);\n            cout &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;\n        }\n        // &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        //     cout &amp;lt;&amp;lt; treee[i] &amp;lt;&amp;lt; &amp;#34; &amp;#34;;\n        // }\n    }\n    // &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&amp;#34;pause&amp;#34;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;正解&amp;#xff1a;&lt;a href=\"https://www.cnblogs.com/wzl19981116/p/10087302.html\" id=\"textarea_1666627756057_1666628053082_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.cnblogs.com/wzl19981116/p/10087302.html&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Add&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(ll x,ll y,ll w)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x&amp;gt;y)\n        {\n            a[x]&amp;#43;&amp;#61;w;\n            x/&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        }&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(x&amp;lt;y)&lt;/span&gt;\n        &lt;/span&gt;{\n            a[y]&amp;#43;&amp;#61;w;\n            y/&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n}\n&lt;span class=\"hljs-function\"&gt;ll &lt;span class=\"hljs-title\"&gt;query&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(ll x,ll y)&lt;/span&gt;\n&lt;/span&gt;{\n    ll ans&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(x&amp;gt;y)\n        {\n            ans&amp;#43;&amp;#61;a[x];\n            x/&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        }&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(x&amp;lt;y)&lt;/span&gt;\n        &lt;/span&gt;{\n            ans&amp;#43;&amp;#61;a[y];\n            y/&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ans;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["数据结构程序设计实践-收费", ["问题遇到的现象和发生背景", "\n", "算法与数据结构", "\n", "★实验任务", "\n", "有一张无限大的图，图中的节点编号从1开始。图中节点由无向边连接，编号为i的节点分别与2i号节点和2i+1号节点连接，显然任意两个点之间的最短路是确定的且唯一的。最开始每条边上的花费都是0。 接下来有两种操作", "\n", "给从u到v的最短路上的每条边都加上w的花费", "\n", "计算走最短路从u到v的总花费（即路上所有边的花费和）", "\n", "★数据输入", "\n", "第一行输入一个整数q，表示操作的数量，接下来q行，每行第一个数字代表操作的类型，如果是1号操作，则紧接着输入u，v，w三个整数；如果是2号操作，接着输入u，v两个整数。", "\n", "★数据输出", "\n", "对于每一个2号操作，输出一行一个数字，代表路上的总花费", "\n", "输入示例", "7", "1 3 4 30", "1 4 1 2", "1 3 6 8", "2 4 3", "1 6 1 40", "2 3 7", "2 2 4", "输出示例", "94", "0", "32", "★数据范围", "\n", "50% : q <= 10, 1≤u,v,w≤1000", "\n", "100% : q <= 1000, 1≤u,v≤1000000,w <= 1e9", "\n", "我的解答思路和尝试过的方法", "\n", "毫无思路，没有学习图的话，如何通过树来完成呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;swap函数有问题啊&amp;#xff0c;int指针和int值怎么能直接相等呢。修改如下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; swap(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *u,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *v)\n{\n   &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;;\n   &lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;&amp;#61;*u;\n   *u&amp;#61;*v;\n   *v&amp;#61;&lt;span class=\"hljs-keyword\"&gt;temp&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;22行的 swap(a[i], a[j]); 改成 swap(&amp;amp;a[i], &amp;amp;a[j]);&lt;br /&gt;下面swap交换的地方&amp;#xff0c;都需要加&amp;amp;&lt;br /&gt;修改后运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/81090479115613.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;完整代码修改如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;//线性时间选择&lt;/span&gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;\nvoid bubble&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Partition(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;val&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Select(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;k&lt;/span&gt;)&lt;/span&gt;;\nvoid swap(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;* u, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;* v);\n\nvoid swap(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;* u, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;* v)\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; temp;\n    temp &amp;#61; *u;\n    *u &amp;#61; *v;\n    *v &amp;#61; temp;\n}\nvoid bubble&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i, j;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; p; i &amp;lt; r; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; r; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt; &amp;lt; a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;) swap(&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;, &amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;);\n        }\n    }\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Partition(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;val&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; pos;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; q, i, j, x;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (q &amp;#61; p; q &amp;lt;&amp;#61; r; q&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;q&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;val&lt;/span&gt;)\n        {\n            pos &amp;#61; q;\n            break;\n        }\n    }\n    swap(&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;p&lt;/span&gt;]&lt;/span&gt;, &amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;pos&lt;/span&gt;]&lt;/span&gt;);\n\n    i &amp;#61; p; j &amp;#61; r &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; x &amp;#61; a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;p&lt;/span&gt;]&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-operator\"&gt;&amp;#43;&amp;#43;&lt;/span&gt;&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;lt; x&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;i &amp;lt; r);\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (a&lt;span class=\"hljs-literal\"&gt;[--&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt; &amp;gt; x);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;gt;&amp;#61; j) break;\n        swap(&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;, &amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;);\n    }\n    a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;p&lt;/span&gt;]&lt;/span&gt; &amp;#61; a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;; a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt; &amp;#61; x;\n    return j;\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Select(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;k&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; s, t;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i, j, n, x;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (r - p &amp;lt; &lt;span class=\"hljs-number\"&gt;75&lt;/span&gt;)\n    {\n        bubble&lt;span class=\"hljs-constructor\"&gt;Sort(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;)&lt;/span&gt;;\n        return a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;p&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-identifier\"&gt;k&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;//找中位数的中位数&amp;#xff0c;r-p-4即上面所说的n-5&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt;&amp;#61; (r - p - &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; i&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;//把每个组的中位数交换到区间[p,p&amp;#43;(r-p-4)/4]&lt;/span&gt;\n    {\n        s &amp;#61; p &amp;#43; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;i; t &amp;#61; s &amp;#43; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;; j&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;//冒泡排序&amp;#xff0c;从后开始排&amp;#xff0c;结果使得后三个数是排好顺序的&amp;#xff08;递增&amp;#xff09;&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (n &amp;#61; s; n &amp;lt; t - j; n&amp;#43;&amp;#43;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;n&lt;/span&gt;]&lt;/span&gt; &amp;gt; a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;n&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;) swap(&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;n&lt;/span&gt;]&lt;/span&gt;, &amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;n&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;);\n            }\n        }\n        swap(&amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;p&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;, &amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;s&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//交换每组中的中位数到前面&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-comment\"&gt;//(r-p-4)/5表示组数-1&amp;#xff0c;则[p,p&amp;#43;(r-p-4)/5]的区间长度等于组数&lt;/span&gt;\n    x &amp;#61; &lt;span class=\"hljs-constructor\"&gt;Select(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt; &amp;#43; (&lt;span class=\"hljs-params\"&gt;r&lt;/span&gt; - &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt; - 4)&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, (r - p &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//求中位数的中位数&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;/*\n    (r-p&amp;#43;1)/10 &amp;#61; (p&amp;#43;(r&amp;#43;p-4)/5-p&amp;#43;1)/2\n    */&lt;/span&gt;\n    i &amp;#61; &lt;span class=\"hljs-constructor\"&gt;Partition(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;; j &amp;#61; i - p &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (k &amp;lt;&amp;#61; j) return &lt;span class=\"hljs-constructor\"&gt;Select(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;k&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; return &lt;span class=\"hljs-constructor\"&gt;Select(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;i&lt;/span&gt; &amp;#43; 1, &lt;span class=\"hljs-params\"&gt;r&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;k&lt;/span&gt; - &lt;span class=\"hljs-params\"&gt;j&lt;/span&gt;)&lt;/span&gt;;\n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main(void)\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; x, i;\n    &lt;span class=\"hljs-comment\"&gt;//数组a存了0-79&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;]&lt;/span&gt; &amp;#61; { &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;17&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;19&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;18&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;23&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;27&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;26&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;29&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;28&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;24&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;33&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;31&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;37&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;36&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;35&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;39&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;38&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;34&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;43&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;41&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;47&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;46&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;45&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;49&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;48&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;42&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;40&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;44&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;53&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;51&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;57&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;56&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;55&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;59&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;58&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;52&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;54&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;63&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;61&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;67&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;66&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;65&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;69&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;68&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;62&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;64&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;73&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;71&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;77&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;76&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;75&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;79&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;78&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;72&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;70&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;74&lt;/span&gt;,\n    };\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;x);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;The %d smallest number is %d\\n&amp;#34;&lt;/span&gt;, x, &lt;span class=\"hljs-constructor\"&gt;Select(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, 0, 79, &lt;span class=\"hljs-params\"&gt;x&lt;/span&gt;)&lt;/span&gt;);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这里有个详细的解答&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/wl1780852311/article/details/101000722\" id=\"textarea_1651197375953_1651197410124_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;算法&amp;#xff1a;线性时间选择_顾道长生&amp;#39;的博客-CSDN博客_线性时间选择算法&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;定义&amp;#xff1a;给定线性序集中n个元素和一个整数k&amp;#xff0c;1≤k≤n&amp;#xff0c;要求找出这n个元素中第k小的元素。&amp;#xff08;1&amp;#xff09;在某些特殊情况下&amp;#xff0c;很容易设计出解选择问题的线性时间算法。如&amp;#xff1a;当要选择最大元素或最小元素时&amp;#xff0c;显然可以在O(n)时间完成。&amp;#xff08;一趟比较即可&amp;#xff09;&amp;#xff08;2&amp;#xff09;一般的选择问题&amp;#xff0c;特别是中位数的选择问题似乎比最小&amp;#xff08;大&amp;#xff09;元素要难。但实际上&amp;#xff0c;从渐近阶的意义上&amp;#xff0c;它们是一样的。也可以在O(n)时间完成。步骤&amp;#xff1a;&amp;#xff08;1&amp;#xff09;将n个输入元...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/wl1780852311/article/details/101000722&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["C语言学习，算法设计，线性时间选择", ["我在学习线性时间选择算法，编写如下程序，算法要求是找到n个元素中第k小的元素：", "\n", "//线性时间选择", "\n#", "include", " <stdio.h>\nvoid bubble", "Sort(", "int", " ", "*", "a", ",", "int", " ", "p", ",", "int", " ", "r", ")", ";\n", "int", " ", "Partition(", "int", " ", "*", "a", ",", "int", " ", "p", ",", "int", " ", "r", ",", "int", " ", "val", ")", ";\n", "int", " ", "Select(", "int", " ", "*", "a", ",", "int", " ", "p", ",", "int", " ", "r", ",", "int", " ", "k", ")", ";\nvoid swap(", "int", " *u,", "int", " *v);\n\nvoid swap(", "int", " *u,", "int", " *v)\n{\n   ", "int", " temp;\n   temp=u;\n   u=v;\n   v=temp;\n}\nvoid bubble", "Sort(", "int", " ", "*", "a", ",", "int", " ", "p", ",", "int", " ", "r", ")", "\n{ \n    ", "int", " i,j;\n    ", "for", "(i=p; i<r; i++)\n    {\n        ", "for", "( j=i+", "1", "; j<=r; j++)\n        {\n            ", "if", "(a", "[", "j", "]", "<a", "[", "i", "]", ") swap(a", "[", "i", "]", ",a", "[", "j", "]", ");\n        }\n    }\n}\n\n", "int", " ", "Partition(", "int", " ", "*", "a", ",", "int", " ", "p", ",", "int", " ", "r", ",", "int", " ", "val", ")", "\n{\n    ", "int", " pos;\n    ", "int", " q,i,j,x;\n    ", "for", "( q=p; q<=r; q++)\n    {\n        ", "if", "(a", "[", "q", "]", "==", "val", ")\n        {\n            pos=q;\n            break;\n        }\n    }\n    swap(a", "[", "p", "]", ",a", "[", "pos", "]", ");\n\n    i=p; j=r+", "1", "; x=a", "[", "p", "]", ";\n    ", "while", "(", "1", ")\n    {\n        ", "while", "(a", "[", "++", "i", "]", "<x", " && ", "i<r);\n        ", "while", "(a", "[--", "j", "]", ">x);\n        ", "if", "(i>=j) break;\n        swap(a", "[", "i", "]", ",a", "[", "j", "]", ");\n    }\n    a", "[", "p", "]", "=a", "[", "j", "]", "; a", "[", "j", "]", "=x;\n    return j;\n}\n\n", "int", " ", "Select(", "int", " ", "*", "a", ",", "int", " ", "p", ",", "int", " ", "r", ",", "int", " ", "k", ")", "\n{\n    ", "int", " s,t;\n    ", "int", " i,j,n,x;\n    ", "if", "(r-p<", "75", ")\n    {\n        bubble", "Sort(", "a", ",", "p", ",", "r", ")", ";\n        return a", "[", "p", "+", "k", "-", "1", "]", ";\n    }\n    ", "//找中位数的中位数，r-p-4即上面所说的n-5", "\n    ", "for", "( i=", "0", "; i<=(r-p-", "4", ")/", "5", "; i++) ", "//把每个组的中位数交换到区间[p,p+(r-p-4)/4]", "\n    {\n        s=p+", "5", "*i; t=s+", "4", ";\n        ", "for", "( j=", "0", "; j<", "3", "; j++) ", "//冒泡排序，从后开始排，结果使得后三个数是排好顺序的（递增）", "\n        {\n            ", "for", "( n=s; n<t-j; n++)\n            {\n                ", "if", "(a", "[", "n", "]", ">a", "[", "n", "+", "1", "]", ") swap(a", "[", "n", "]", ",a", "[", "n", "+", "1", "]", ");\n            }\n        }\n        swap(a", "[", "p", "+", "i", "]", ",a", "[", "s", "+", "2", "]", ");", "//交换每组中的中位数到前面", "\n    }\n    ", "//(r-p-4)/5表示组数-1，则[p,p+(r-p-4)/5]的区间长度等于组数", "\n    x=", "Select(", "a", ",", "p", ",", "p", "+(", "r", "-", "p", "-4)", "/", "5", ",(r-p+", "1", ")/", "10", ");", "//求中位数的中位数", "\n    ", "/*\n    (r-p+1)/10 = (p+(r+p-4)/5-p+1)/2\n    */", "\n    i=", "Partition(", "a", ",", "p", ",", "r", ",", "x", ")", "; j=i-p+", "1", ";\n    ", "if", "(k<=j) return ", "Select(", "a", ",", "p", ",", "i", ",", "k", ")", ";\n    ", "else", " return ", "Select(", "a", ",", "i", "+1,", "r", ",", "k", "-", "j", ")", ";\n}\n", "int", " main(void)\n{\n    ", "int", " x,i;\n    ", "//数组a存了0-79", "\n    ", "int", " a", "[", "80", "]", "= {", "3", ",", "1", ",", "7", ",", "6", ",", "5", ",", "9", ",", "8", ",", "2", ",", "0", ",", "4", ",", "13", ",", "11", ",", "17", ",", "16", ",", "15", ",", "19", ",", "18", ",", "12", ",", "10", ",", "14", ",", "23", ",", "21", ",", "27", ",", "26", ",", "25", ",", "29", ",", "28", ",", "22", ",", "20", ",", "24", ",", "33", ",", "31", ",", "37", ",", "36", ",", "35", ",", "39", ",", "38", ",", "32", ",", "30", ",", "34", ",", "43", ",", "41", ",", "47", ",", "46", ",", "45", ",", "49", ",", "48", ",", "42", ",", "40", ",", "44", ",", "53", ",", "51", ",", "57", ",", "56", ",", "55", ",", "59", ",", "58", ",", "52", ",", "50", ",", "54", ",", "63", ",", "61", ",", "67", ",", "66", ",", "65", ",", "69", ",", "68", ",", "62", ",", "60", ",", "64", ",", "73", ",", "71", ",", "77", ",", "76", ",", "75", ",", "79", ",", "78", ",", "72", ",", "70", ",", "74", ",\n               };\n    scanf(", "\"%d\"", ",&x); \n    printf(", "\"The %d smallest number is %d\\n\"", ",x,", "Select(", "a", ",0,79,", "x", ")", ");\n    return ", "0", ";\n}\n\n", "\n", "运行结果如下：", "\n", "\n", "请问是哪有问题，应该怎么修改。"]], "Tag": "程序设计"}
{"Answer": "http://www.newxing.com/Code/VB/dayin/4844.html", "Konwledge_Point": "算法与程序设计", "Question": ["Visula Basic 6.0程序设计上的问题，网格排序", ["请问点击TrueDbGrid的列头，根据列名对网格中的数据进行排序，用到什么排序算法？怎么实现？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;网上有现成的代码&amp;#xff0c;找一找就有了&amp;#xff0c;可以参考下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; StudentManagementSystem {\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; ArrayList&amp;lt;Student&amp;gt; studentList;\n\npublic &lt;span class=\"hljs-constructor\"&gt;StudentManagementSystem()&lt;/span&gt; {\n    studentList &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n}\n\npublic void show&lt;span class=\"hljs-constructor\"&gt;Menu()&lt;/span&gt; {\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61; 学生信息管理系统 &amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;1. 学生信息录入&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;2. 学生信息浏览&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;3. 学生信息查询&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;4. 学生信息删除&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;5. 学生信息修改&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;0. 退出系统&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#34;&lt;/span&gt;);\n}\n\npublic void add&lt;span class=\"hljs-constructor\"&gt;Student()&lt;/span&gt; {\n    Scanner input &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Scanner(System.&lt;span class=\"hljs-params\"&gt;in&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入学生信息&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;学号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    String id &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;姓名&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    String name &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;年龄&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; age &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Int()&lt;/span&gt;;\n    input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;性别&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    String gender &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;出生年月&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    String birthday &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;地址&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    String address &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;电话&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    String phone &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;E-mail&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    String email &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n    Student student &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Student(&lt;span class=\"hljs-params\"&gt;id&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;age&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;gender&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;birthday&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;address&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;phone&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;email&lt;/span&gt;)&lt;/span&gt;;\n    studentList.add(student);\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;学生信息录入成功&amp;#xff01;&amp;#34;&lt;/span&gt;);\n}\n\npublic void show&lt;span class=\"hljs-constructor\"&gt;StudentList()&lt;/span&gt; {\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (studentList.is&lt;span class=\"hljs-constructor\"&gt;Empty()&lt;/span&gt;) {\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;没有学生信息&amp;#xff01;&amp;#34;&lt;/span&gt;);\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;----------------- 学生信息列表 -----------------&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%-10s%-10s%-5s%-5s%-15s%-20s%-15s%-30s\\n&amp;#34;&lt;/span&gt;,\n                &lt;span class=\"hljs-string\"&gt;&amp;#34;学号&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;姓名&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;年龄&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;性别&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;出生年月&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;地址&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;电话&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;E-mail&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (Student student : studentList) {\n            &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(student);\n        }\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;-------------------------------------------------&amp;#34;&lt;/span&gt;);\n    }\n}\n\npublic void search&lt;span class=\"hljs-constructor\"&gt;StudentById()&lt;/span&gt; {\n    Scanner input &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Scanner(System.&lt;span class=\"hljs-params\"&gt;in&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要查询的学生学号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    String id &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n    boolean found &amp;#61; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (Student student : studentList) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (student.get&lt;span class=\"hljs-constructor\"&gt;Id()&lt;/span&gt;.equals(id)) {\n            &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(student);\n            found &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n            break;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!found) {\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;没有找到该学生&amp;#xff01;&amp;#34;&lt;/span&gt;);\n    }\n}\n\npublic void search&lt;span class=\"hljs-constructor\"&gt;StudentByName()&lt;/span&gt; {\n    Scanner input &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Scanner(System.&lt;span class=\"hljs-params\"&gt;in&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要查询的学生姓名&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    String name &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n    boolean found &amp;#61; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (Student student : studentList) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (student.get&lt;span class=\"hljs-constructor\"&gt;Name()&lt;/span&gt;.equals(name)) {\n            &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(student);\n            found &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!found) {\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;没有找到该学生&amp;#xff01;&amp;#34;&lt;/span&gt;);\n    }\n}\n\npublic void delete&lt;span class=\"hljs-constructor\"&gt;Student()&lt;/span&gt; {\n    Scanner input &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Scanner(System.&lt;span class=\"hljs-params\"&gt;in&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要删除的学生学号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    String id &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n    boolean found &amp;#61; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (Student student : studentList) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (student.get&lt;span class=\"hljs-constructor\"&gt;Id()&lt;/span&gt;.equals(id)) {\n            studentList.remove(student);\n            &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;学生信息删除成功&amp;#xff01;&amp;#34;&lt;/span&gt;);\n            found &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n            break;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!found) {\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;没有找到该学生&amp;#xff01;&amp;#34;&lt;/span&gt;);\n    }\n}\n\npublic void update&lt;span class=\"hljs-constructor\"&gt;Student()&lt;/span&gt; {\n    Scanner input &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Scanner(System.&lt;span class=\"hljs-params\"&gt;in&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要修改的学生学号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    String id &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n    boolean found &amp;#61; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (Student student : studentList) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (student.get&lt;span class=\"hljs-constructor\"&gt;Id()&lt;/span&gt;.equals(id)) {\n            &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入学生姓名&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            String name &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n            &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入学生年龄&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; age &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Int()&lt;/span&gt;;\n            input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n            &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入学生性别&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            String gender &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n            &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入学生出生年月&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            String birthday &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n            &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入学生地址&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            String address &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n            &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入学生电话&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            String phone &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n            &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入学生E-mail&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            String email &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n            student.set&lt;span class=\"hljs-constructor\"&gt;Name(&lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt;;\n            student.set&lt;span class=\"hljs-constructor\"&gt;Age(&lt;span class=\"hljs-params\"&gt;age&lt;/span&gt;)&lt;/span&gt;;\n            student.set&lt;span class=\"hljs-constructor\"&gt;Gender(&lt;span class=\"hljs-params\"&gt;gender&lt;/span&gt;)&lt;/span&gt;;\n            student.set&lt;span class=\"hljs-constructor\"&gt;Birthday(&lt;span class=\"hljs-params\"&gt;birthday&lt;/span&gt;)&lt;/span&gt;;\n            student.set&lt;span class=\"hljs-constructor\"&gt;Address(&lt;span class=\"hljs-params\"&gt;address&lt;/span&gt;)&lt;/span&gt;;\n            student.set&lt;span class=\"hljs-constructor\"&gt;Phone(&lt;span class=\"hljs-params\"&gt;phone&lt;/span&gt;)&lt;/span&gt;;\n            student.set&lt;span class=\"hljs-constructor\"&gt;Email(&lt;span class=\"hljs-params\"&gt;email&lt;/span&gt;)&lt;/span&gt;;\n            &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;学生信息修改成功&amp;#xff01;&amp;#34;&lt;/span&gt;);\n            found &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n            break;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!found) {\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;没有找到该学生&amp;#xff01;&amp;#34;&lt;/span&gt;);\n    }\n}\n\npublic void run&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; {\n    Scanner input &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Scanner(System.&lt;span class=\"hljs-params\"&gt;in&lt;/span&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; choice;\n    &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n        show&lt;span class=\"hljs-constructor\"&gt;Menu()&lt;/span&gt;;\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入操作序号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        choice &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Int()&lt;/span&gt;;\n        input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n        switch (choice) {\n            case &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n                add&lt;span class=\"hljs-constructor\"&gt;Student()&lt;/span&gt;;\n                break;\n            case &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n                show&lt;span class=\"hljs-constructor\"&gt;StudentList()&lt;/span&gt;;\n                break;\n            case &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n                &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;1. 按学号查询&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;2. 按姓名查询&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.print(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入查询方式&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; searchChoice &amp;#61; input.next&lt;span class=\"hljs-constructor\"&gt;Int()&lt;/span&gt;;\n                input.next&lt;span class=\"hljs-constructor\"&gt;Line()&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (searchChoice&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n                    search&lt;span class=\"hljs-constructor\"&gt;StudentById()&lt;/span&gt;;\n                } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (searchChoice&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) {\n                    search&lt;span class=\"hljs-constructor\"&gt;StudentByName()&lt;/span&gt;;\n                } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n                    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入有误&amp;#xff01;&amp;#34;&lt;/span&gt;);\n                }\n                break;\n            case &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:\n                delete&lt;span class=\"hljs-constructor\"&gt;Student()&lt;/span&gt;;\n                break;\n            case &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:\n                update&lt;span class=\"hljs-constructor\"&gt;Student()&lt;/span&gt;;\n                break;\n            case &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n                &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;谢谢使用&amp;#xff01;&amp;#34;&lt;/span&gt;);\n                break;\n            default:\n                &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入有误&amp;#xff01;&amp;#34;&lt;/span&gt;);\n                break;\n        }\n    } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (choice !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n}\n\npublic static void main(String&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt; args) {\n    StudentManagementSystem system &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;StudentManagementSystem()&lt;/span&gt;;\n    system.run&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n}\n}\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Student {\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; String id;\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; String name;\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; age;\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; String gender;\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; String birthday;\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; String address;\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; String phone;\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; String email;\n\npublic &lt;span class=\"hljs-constructor\"&gt;Student(String &lt;span class=\"hljs-params\"&gt;id&lt;/span&gt;, String &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;age&lt;/span&gt;, String &lt;span class=\"hljs-params\"&gt;gender&lt;/span&gt;, String &lt;span class=\"hljs-params\"&gt;birthday&lt;/span&gt;, String &lt;span class=\"hljs-params\"&gt;address&lt;/span&gt;, String &lt;span class=\"hljs-params\"&gt;phone&lt;/span&gt;, String &lt;span class=\"hljs-params\"&gt;email&lt;/span&gt;)&lt;/span&gt; {\n    this.id &amp;#61; id;\n    this.name &amp;#61; name;\n    this.age &amp;#61; age;\n    this.gender &amp;#61; gender;\n    this.birthday &amp;#61; birthday;\n    this.address &amp;#61; address;\n    this.phone &amp;#61; phone;\n    this.email &amp;#61; email;\n}\n\npublic String get&lt;span class=\"hljs-constructor\"&gt;Id()&lt;/span&gt; {\n    return id;\n}\n\npublic void set&lt;span class=\"hljs-constructor\"&gt;Id(String &lt;span class=\"hljs-params\"&gt;id&lt;/span&gt;)&lt;/span&gt; {\n    this.id &amp;#61; id;\n}\n\npublic String get&lt;span class=\"hljs-constructor\"&gt;Name()&lt;/span&gt; {\n    return name;\n}\n\npublic void set&lt;span class=\"hljs-constructor\"&gt;Name(String &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt; {\n    this.name &amp;#61; name;\n}\n\npublic &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; get&lt;span class=\"hljs-constructor\"&gt;Age()&lt;/span&gt; {\n    return age;\n}\n\npublic void set&lt;span class=\"hljs-constructor\"&gt;Age(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;age&lt;/span&gt;)&lt;/span&gt; {\n    this.age &amp;#61; age;\n}\n\npublic String get&lt;span class=\"hljs-constructor\"&gt;Gender()&lt;/span&gt; {\n    return gender;\n}\n\npublic void set&lt;span class=\"hljs-constructor\"&gt;Gender(String &lt;span class=\"hljs-params\"&gt;gender&lt;/span&gt;)&lt;/span&gt; {\n    this.gender &amp;#61; gender;\n}\n\npublic String get&lt;span class=\"hljs-constructor\"&gt;Birthday()&lt;/span&gt; {\n    return birthday;\n}\n\npublic void set&lt;span class=\"hljs-constructor\"&gt;Birthday(String &lt;span class=\"hljs-params\"&gt;birthday&lt;/span&gt;)&lt;/span&gt; {\n    this.birthday &amp;#61; birthday;\n}\n\npublic String get&lt;span class=\"hljs-constructor\"&gt;Address()&lt;/span&gt; {\n    return address;\n}\n\npublic void set&lt;span class=\"hljs-constructor\"&gt;Address(String &lt;span class=\"hljs-params\"&gt;address&lt;/span&gt;)&lt;/span&gt; {\n    this.address &amp;#61; address;\n}\n\npublic String get&lt;span class=\"hljs-constructor\"&gt;Phone()&lt;/span&gt; {\n    return phone;\n}\n\npublic void set&lt;span class=\"hljs-constructor\"&gt;Phone(String &lt;span class=\"hljs-params\"&gt;phone&lt;/span&gt;)&lt;/span&gt; {\n    this.phone &amp;#61; phone;\n}\n\npublic String get&lt;span class=\"hljs-constructor\"&gt;Email()&lt;/span&gt; {\n    return email;\n}\n\npublic void set&lt;span class=\"hljs-constructor\"&gt;Email(String &lt;span class=\"hljs-params\"&gt;email&lt;/span&gt;)&lt;/span&gt; {\n    this.email &amp;#61; email;\n}\n\n&amp;#64;Override\npublic String &lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;String()&lt;/span&gt; {\n    return &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;String&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;format(&lt;span class=\"hljs-string\"&gt;&amp;#34;%-10s%-10s%-5d%-5s%-15s%-20s%-15s%-30s&amp;#34;&lt;/span&gt;,\n            id, name, age, gender, birthday, address, phone, email);\n}\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["JAVA程序设计 学生信息管理系统设计", ["学生信息管理系统设计", "\n", "学生信息包括:学号，姓名，年龄，性别，出生年月，地址，电话, E-maiI等。试设计一学生信息管理系统，使之能提供以下功能: .", "\n", "1、系统以菜单方式工作", "\n", "2、学生信息录入功能- - -输入", "\n", "3、学生信息浏览功能- --输出", "\n", "4、学生信息查询功能一一算法", "\n", "按学号查询", "\n", "按姓名查询", "\n", "5、学生信息的删除与修改(可选项)"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;①处&amp;#xff1a;定义一个有6个元素的单精度浮点数数组&amp;#xff08;sq应该是sequence的缩写&amp;#xff09;&amp;#xff0c;下标从0开始。这个vb6&amp;#xff08;含vbs&amp;#xff09;和其他语言有点区别&amp;#xff0c;vb6中数组项是定义的数字&amp;#43;1个项&amp;#xff0c;下标0 ~ 5&amp;#xff0c;其他语言是定义5个项的数组&amp;#xff0c;下标0 ~ 4.。&lt;/p&gt;\n&lt;p&gt;②处&amp;#xff1a;1 to 4&amp;#xff08;循环四次&amp;#xff09;&amp;#xff0c;可以想象为一个框中有5个数&amp;#xff0c;一次找出一个最小的&amp;#xff0c;是不是找4次就能找完了&amp;#xff0c;还剩一个最大的在框内。所以只需要找4次。&lt;br /&gt;③处&amp;#xff1a;j &amp;#61; i &amp;#43; 1 To 5&amp;#xff0c;这个不难理解了吧&amp;#xff0c;最小的已经拍前面&amp;#xff0c;j再从1开始比较没意义了&amp;#xff0c;i所在位置的前面的数肯定是小于i当前位置的数&amp;#xff0c;所以找比i位置还小的数&amp;#xff0c;应该从下一项开始找&amp;#xff08;j&amp;#61;i&amp;#43;1&amp;#xff09;&lt;/p&gt;\n&lt;p&gt;有帮助或启发麻烦点个&lt;strong&gt;采纳【本回答右上角】&lt;/strong&gt;&amp;#xff0c;谢谢~~&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["排序算法为什么理解不了?", ["  [例 3-8]数组的排序.", "  数据排序的算法问题在任何程序设计语言中都作为一种典型的算法来介绍,因此本书不再赘述.程序代码如下:", "Dim i, j, intMin As Integer", "Dim strMsg As String", "Dim sngSq(5), sngT As Single '①", "'输入原始数据", "For i = 1 To 5", "    strMsg = \"请输入第\" & Str(i) & \"个数:\"", "    sngSq(i) = Val(InputBox(j, \"数据\")) '将输入的数据转换为数值型", "Next", "'排序", "For i = 1 To 4 '②", "    intMin = i '对第i遍排序,初始假定第i个元素最小", "    For j = i + 1 To 5 '找出最小的元素序号  '③", "        If sngSq(j) < sngSq(intMin) Then intMin = j", "    Next j", "    '将找出的最小元素与第i个元素交换", "    sngT = sngSq(i)", "    sngSq(i) = sngSq(intMin)", "    sngSq(intMin) = sngT", "Next i", "'打印输出", "For i = 1 To 5", "    Print sngSq(i) '不换行输出", "Next i", "  在Vbxx工程中新建一个名为frmExam_3_8窗体,在窗体的Click事件中输入上述代码.", "\n", "①处的英文缩写sngSq换成中文是什么意思,创建的sngSq(5)数组是从索引0开始的还是从索引1开始的?", "②处的为什么不是For i = 1 To 5而是For i = 1 To 4?", "③处的j = i + 1又是什么意思,因为i是从1到4?"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;用len()试试&amp;#xff0c;具体参考&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/weixin_43780543/article/details/89847668\" id=\"textarea_1656405216209_1656405307837_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_43780543/article/details/89847668&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["Fortran语言程序设计动态数组", ["\n", "\n", "我想问一下这个fortran里面read  有没有识别输入字符串长度的功能", "额，要不然是不是每次运行程序前都需要先确认新字符串，旧字符串的长度吗"]], "Tag": "程序设计"}
{"Answer": "首先我们假设i &lt; n满足条件，\r\n那么当 i = 1;第一次循环，(j = 1 ; j &lt; i; j++)这个条件不满足，返回。\r\n第二次i = 2; j = 1; k = 1;不满足，返回。\r\n当i = 3；j = 1 &amp;&amp; j &lt; 3;k = 1 &amp;&amp; k &lt; 1;这一个返回。j = 2 &amp;&amp;j &lt; 3;k = 1 &amp;&amp; k &lt; 2;执行一次printf 共执行一次\r\n当i = 4；排除j = 1;直接j = 2开始。执行一次printf，j = 3;k &lt; 3; k = 1,k = 2;执行两次printf 共执行三次\r\n当i = 5;j = 2一次，j = 3两次，j = 4三次 共六次次\r\n当i = 6;j = 2一次，j = 3两次，j = 4三次 j = 5四次 共十次\r\n由此推断n必须大于2\r\n假如n=8;1 + 1 + 2 + 1 + 2 + 3 + 1 + 2 + 3 + 4 + 1 + 2 + 3 + 4 + 5\r\n总次数：1*(n - 3) + 2 *(n - 4) + 3* (n - 5) + ... + (n-3)*(n - n + 1) \r\n\r\ni = n ; j = n - 1 ; k = n -2;", "Konwledge_Point": "算法与程序设计", "Question": ["程序设计题求大神解答", ["分析如下代码for(i=1;i<n;i++) for(j=1;j<i;j++) for(k=1;k<j;k++) printf(\"\\n\");", "\n问printf语句共执行了几次？这段代码执行完以后i+j+k值为多少？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;参考一下&amp;#xff1a;&lt;a href=\"https://www.cnblogs.com/zhaohongjie/p/12751232.html\" id=\"textarea_1635165636197_1635165680165_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;c语言实现通讯录管理系统&amp;#xff08;用链表实现&amp;#xff09; - 头巨铁 - 博客园&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;题目&amp;#xff1a; 通讯录&amp;#xff08;通过链表实现&amp;#xff09; 设计并实现一个简易的通讯录软件&amp;#xff0c;管理个人通讯记录。一条通讯记录可包括&amp;#xff1a;姓名、工作单位、手机、住宅电话、E-Mail、家庭住址等&amp;#xff08;可自行增删&amp;#xff0c;但不可过少&amp;#xff09;。该系统应实现以&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://common.cnblogs.com/favicon.svg\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.cnblogs.com/zhaohongjie/p/12751232.html&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["程序设计 ：移动用户管理系统（注：C语言代码）", ["1 问题描述", "要该系统要求实现一个简单、实用的移动用户管理程序，主要功能包括移动用户数据", "的增加、删除、修改、查找、输出、排序、添加/注销手机号等。所有数据都要利用文件系", "统保存，以备系统下次运行时使用。通过此课题，熟练掌握文件、数组、指针的各种操作，", "以及一些基本算法思想的应用。", "2 功能要求", "代码要能提供以下几个基本功能。", "（1）移动用户数据是由多条记录构成，其信息包括：", "用户名，性别，年龄，身份证号码，手机号，职业，家庭住址等。", "（2）数据保存形式:", "所有图书数据要以文本或二进制文件保存。", "（3）需要实现的功能", "\n", "新增移动用户数据记录。", "查找移动用户（可按用户名身份证号码，手机号等查找）。", "增加/注销手机号码（可以让用户添加新的手机号或注销删除不用的手机号）。", "修改移动用户（可修改除手机号外的其它信息项。要先查找，再修改。若当前", "条件查找出多个记录，则提示用户增加查询条件继续查找，直到确定唯一用户", "后再修改）。", "删除移动用户数据（请参考上面修改的处理，先查找再删除）。", "显示当前所有数据列表，并能按要求（如：用户名，年龄，身份证号码等）排", "序。", "保存移动用户数据到文件中、从文件中读入移动用户数据到程序中。", "（4）界面功能要求：", "采用友好的字符界面，实现一个功能控制菜单。", "每次操作都从该菜单选择，利用循环结构使得一次运行程序可进行多次操作。", "选做要求：", "（1）数据完整性保证。例如：身份证号码、手机号都要保证唯一。一个手机号只能给", "一个用户使用。", "（2）支持一个用户拥有多个手机号功能。", "（3）删除移动用户数据时，必须先注销该用户的所有手机号，才能删除用户数据。", "3 其他要求", "（1）界面美观，交互方便。", "（2）注释详细：每个变量都要求有注释说明用途；函数有注释说明功能，对参数、返", "回值也要以注释的形式说明用途；关键的语句段要求有注释解释。", "（3）程序的层次清晰，可读性强。", "（4）变量、函数命名符合规范。", "（5）如有可能，可使用 MFC 等开发工具，实现彩色或图形操作界面", "C语言代码"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;换一个角度&amp;#xff0c;如果foo返回的是0-1的随机数&amp;#xff0c;这时我们只需要建立一个二进制的随机数生成器就可以满足要求了。&lt;/p&gt;\n&lt;p&gt;现在foo返回1-5&amp;#xff0c;那么需要减1&amp;#xff0c;建立5进制随机数生成器数&amp;#xff0c;产生的随机数最大值必须大于等于n&amp;#xff0c;如果生成的随机数超过n就重新生成一次&amp;#xff0c;直到小于n。&lt;/p&gt;\n&lt;p&gt;或者直接生成5进制下非常非常大的数&amp;#xff0c;然后对n取余数也是可以的&amp;#xff0c;不过需要注明可以忽略。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["一道C语言的算法问题", ["有一个函数 foo() 能够返回 1～5的随机数，那么请使用 foo（），设计一个程序实现 1～n的随机数。要求输出的随机数足够随机，有机会取值1~n的任意数字。前几天面试遇到的，没看懂什么意思啊"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;参考&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/weixin_40850689/article/details/83826390\" id=\"textarea_1635582973439_1635582999886_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;C&amp;#43;&amp;#43;学习--台阶问题_Myliang97的博客-CSDN博客_c&amp;#43;&amp;#43;上台阶问题&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;看到一道题&amp;#xff0c;大意是这样的&amp;#xff1a;一次可以走一级或者走两级台阶&amp;#xff0c;问50级台阶有多少种走法。这种问题都是用到递归求解&amp;#xff0c;找出前面几级走法的依赖关系&amp;#xff0c;但注意的是用int保存结果会不会溢出&amp;#xff0c;并且递归运行效率并不高&amp;#xff0c;C&amp;#43;&amp;#43;有个非常丑陋的语法叫模板元编程&amp;#xff0c;通过牺牲编译时间提高递归运行效率。1.用递归求出结果&amp;#xff1a;先分析前面几级台阶的走法&amp;#xff1a;用num(1)代表1级的方法数&amp;#xff0c;下同。//1级&amp;#xff1a;1种方法 num...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_40850689/article/details/83826390&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["楼梯上有n阶台阶，上楼可以一步上1阶，也可以一步上2阶，编写程序计算共有多少种不同的上楼梯方法。", ["楼梯上有n阶台阶，上楼可以一步上1阶，也可以一步上2阶，编写程序计算共有多少种不同的上楼梯方法。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;谢谢&amp;#xff0c;问题已经解决了&amp;#xff0c;是源文件里有个函数的问题&amp;#xff0c;并不是此处的问题&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["0x7B39FC66 (ucrtbased.dll) (Project1.exe 中)处有未经处理的异常: 将一个无效参数传递给了将无效参数视为严重错误的函数", ["在读文件输入到vector容器时发生错误", "\n", "类文件：", "\n", "class", " ", "Map", "\n{\n", "public", ":\n    ", "Map", "();\n    ", "const", " ", "int", " maxmax = ", "260101", ";\n    ", "int", " maxOfcolumns = ", "900", ";\n    ", "int", " numOfRows = ", "289", ";                  ", "//txt文件的大小就是900*289", "\n    vector<", "char", ">map;\n};\n\n", "\n", "具体实现：", "\n", "map.resize(", "260101", ");\n    map.reserve(", "260101", ");\n    ifstream file;\n    file.open(", "\"001.txt\"", ", ios::", "in", ");\n    ", "if", " (!file)\n    {\n        cerr << ", "\"File could not be opened\"", " << endl;\n        ", "exit", "(EXIT_FAILURE);\n    }\n\n    int i = ", "0", ";\n    \n    file >> noskipws;\n    ", "while", " (!file.eof() && i < maxmax)\n    {\n        file >> map[i];                 ", "//", "这里报错\n        i++;\n    }    ", "//", "这里场景被存进一维容器\n\n", "\n", "\n", "不知道是哪里出了问题，但是之前写过一模一样的这里也没报错"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;在头文件那里加上typedef int Status;就可以了注意大小写&amp;#xff0c;整个status就是一个整形相当于int&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["数据结构中基本程序的设计", ["下面status的错误是为啥？一敲就好多错误啊", "\n", "还有这个算法设计，不太清楚怎么弄"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; MAX_TRIES 3 &lt;span class=\"hljs-comment\"&gt;// 最大尝试次数&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; PASSWORD_LENGTH 6 &lt;span class=\"hljs-comment\"&gt;// 密码长度&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;// 加密算法&amp;#xff08;此处仅作示例&amp;#xff0c;请根据需要自行设计&amp;#xff09;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;encrypt&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *password)&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; PASSWORD_LENGTH; &amp;#43;&amp;#43;i) {\n    password[i] &amp;#61; (password[i] &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) % &lt;span class=\"hljs-number\"&gt;127&lt;/span&gt;;\n  }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; argc, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=\"hljs-comment\"&gt;// 输入学号和姓名&lt;/span&gt;\n  &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; id[&lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;];\n  &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; name[&lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;];\n  &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入学号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n  &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, id);\n  &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入姓名&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n  &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, name);\n\n  &lt;span class=\"hljs-comment\"&gt;// 输入密码并加密&lt;/span&gt;\n  &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; password[PASSWORD_LENGTH &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n  &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入%d位登录密码&amp;#xff1a;&amp;#34;&lt;/span&gt;, PASSWORD_LENGTH);\n  &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, password);\n  &lt;span class=\"hljs-built_in\"&gt;encrypt&lt;/span&gt;(password);\n\n  &lt;span class=\"hljs-comment\"&gt;// 确认密码&lt;/span&gt;\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; tries &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n  &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; confirm[PASSWORD_LENGTH &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n  &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请再次输入密码确认&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, confirm);\n    &amp;#43;&amp;#43;tries;\n  } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(password, confirm) !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; tries &amp;lt; MAX_TRIES);\n\n  &lt;span class=\"hljs-comment\"&gt;// 验证密码&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(password, confirm) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;密码正确\\n&amp;#34;&lt;/span&gt;);\n  } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;密码错误\\n&amp;#34;&lt;/span&gt;);\n  }\n\n  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["编写一个用户密码设置程序的代码", ["编写一个用户密码设置程序。程序功能：输入自己的学号和姓名后，提示设定6位登录密码。对输入的密码进行加密处理（加密算法自行设计）并存储。随后提示确认密码并输入密码，对输入的密码与原密码进行比较验证。如果输入的验证密码错误则提示“密码错误”，错误密码的输入次数超过3次则程序结束。输入密码正确则提示“密码正确”，程序结束。", "（本题40分）", "注意事项：", "（1）要求绘制流程图，通过流程图表达自己的设计思想。并对加密算法进行说明。", "（2）加密、解密功能要求在自定义函数中实现。", "（3）输入、输出信息应简洁美观。", "（4）要求用条件语句、循环语句、结构体、函数、指针等方法解决问题。", "（5）将流程图、源代码以及程序运行结果（截图）粘贴在下方。"]], "Tag": "程序设计"}
{"Answer": ";=================================================================\r\nCODE    SEGMENT PUBLIC USE16 'CODE'\r\n\tASSUME CS:CODE, DS:DATA,ES:DATA,SS:STACK\r\nSHOW_MSG MACRO msg\r\n\tpush ax\r\n\tpush dx\r\n\tmov dx,offset msg\r\n\tmov ah,9\r\n\tint 21h\r\n\tpop dx\r\n\tpop ax\r\n\tENDM\r\nSHOW_ASC MACRO\r\n\tpush ax\r\n\tmov ah,2\r\n\tint 21h\r\n\tpop ax\r\n\tENDM\r\n\r\nShowDat10 proc\r\n\tpush ax\r\n\tpush bx\r\n\tpush cx\r\n\tpush dx\r\n\tpush si\r\n\txor bx,bx\r\n\tmov si,offset DatAsc\r\n\taam\r\n\tmov bl,ah\r\n\tmov dl,[si+bx]\r\n\tSHOW_ASC\r\n\tmov bl,al\r\n\tmov dl,[si+bx]\r\n\tSHOW_ASC\r\n\tpop si\r\n\tpop dx\r\n\tpop cx\r\n\tpop bx\r\n\tpop ax\r\n\tretn\r\nShowDat10 Endp\r\nSTART:\r\n\tmov ax,STACK\r\n\tmov ss,ax\r\n\tmov sp,offset StackE\r\n\tmov ax,DATA\r\n\tmov ds,ax\r\n\tSHOW_MSG msg1\r\n\tmov si,offset dat\r\n\tmov cx,10\r\n\txor bx,bx\r\n\tcld\r\nLocLoop:\r\n\tlodsb\r\n\tcmp al,bl\r\n\tjb NotG\r\n\tmov bl,al\r\nNotG:\r\n\tloop LocLoop\r\n\tmov ax,bx\r\n\tcall ShowDat10\r\n\tSHOW_MSG msgCrLf\r\n\tmov ah,4ch\r\n\tint 21h\r\nCODE ENDS\r\n;============================================================================\r\nSTACK   SEGMENT USE16 'STACK'\r\n        DB 200h dup ('-STACK- ')\r\nStackE  equ $\r\nSTACK   ENDS\r\n;============================================================================\r\nDATA   SEGMENT DWORD PUBLIC USE16 'DATA'\r\nDatAsc  db '0123456789ABCDEF'\r\ndat     DB 6,3,11,66,34,67,31,33,89,45\r\nmsg1    db 'MAX IS $'\r\nmsgCrLf db 0dh,0ah,24h\r\nDATA    ENDS\r\n\tEND START", "Konwledge_Point": "算法与程序设计", "Question": ["用8086汇编语言找出10个字节无符号数中的最大数，并进行显示输出。", ["要求：", "\n数据段提前存好十个无符号数。", "\n得到的最大数也保存在数据段。", "\n利用系统功能调用进行结果的输出。", "\n使用分支和循环程序设计实现。", "\n尽量使用子程序或者宏的程序设计方法使程序整体简洁。", "\n最好写出算法"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n \n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; MAXN &amp;#61; &lt;span class=\"hljs-number\"&gt;2e5&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Edge&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; next;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; to;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; len;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; speed;\n}edge[MAXN];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cnt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; head[MAXN];\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Add_Edge&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; u, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; speed, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; len)&lt;/span&gt;&lt;/span&gt;{\n    edge[cnt].next &amp;#61; head[u];\n    edge[cnt].to &amp;#61; v;\n    edge[cnt].speed &amp;#61; speed;\n    edge[cnt].len &amp;#61; len;\n    head[u] &amp;#61; cnt&amp;#43;&amp;#43;;\n}\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dis[MAXN];\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;st&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; id;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dis;\n    &lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;lt; (&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; st &amp;amp;B)&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; dis &amp;gt; B.dis;\n    }\n};\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; vis[MAXN];\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; INF &amp;#61; &lt;span class=\"hljs-number\"&gt;0x3f3f3f3f&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;dijkstra&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; s)&lt;/span&gt;&lt;/span&gt;{\n    dis[s] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    priority_queue&amp;lt;st&amp;gt; q;\n    q.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(st{s, dis[s]});\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(!q.&lt;span class=\"hljs-built_in\"&gt;empty&lt;/span&gt;()){\n        &lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; u &amp;#61; q.&lt;span class=\"hljs-built_in\"&gt;top&lt;/span&gt;();\n        q.&lt;span class=\"hljs-built_in\"&gt;pop&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(vis[u.id]) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        vis[u.id] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;head[u.id];~i;i&amp;#61;edge[i].next){\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v &amp;#61; edge[i].to;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!vis[v] &amp;amp;&amp;amp; dis[u.id] &amp;#43; edge[i].len &amp;lt; dis[v]){\n                dis[v] &amp;#61; dis[u.id] &amp;#43; edge[i].len;\n                q.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(st{v, dis[v]});\n            }\n        }\n    }\n}\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; eps &amp;#61; &lt;span class=\"hljs-number\"&gt;1e-10&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;dcmp&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(x) &amp;lt; eps) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; x &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ? &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; : &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;st2&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; id;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; t;\n    &lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;lt; (&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; st2 &amp;amp;B)&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;dcmp&lt;/span&gt;(t - B.t) &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n};\n&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; dis2[MAXN];\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; INF2 &amp;#61; &lt;span class=\"hljs-number\"&gt;999999999.0&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;dijkstra2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; s)&lt;/span&gt;&lt;/span&gt;{\n    dis2[s] &amp;#61; &lt;span class=\"hljs-number\"&gt;0.0&lt;/span&gt;;\n    priority_queue&amp;lt;st2&amp;gt; q;\n    q.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(st2{s, dis2[s]});\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(!q.&lt;span class=\"hljs-built_in\"&gt;empty&lt;/span&gt;()){\n        &lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; u &amp;#61; q.&lt;span class=\"hljs-built_in\"&gt;top&lt;/span&gt;();\n        q.&lt;span class=\"hljs-built_in\"&gt;pop&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(vis[u.id]) &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;;\n        vis[u.id] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;head[u.id];~i;i&amp;#61;edge[i].next){\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v &amp;#61; edge[i].to;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(!vis[v] &amp;amp;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;dcmp&lt;/span&gt;(dis2[v] - dis2[u.id] - edge[i].len * &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt; / edge[i].speed) &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n                dis2[v] &amp;#61; dis2[u.id] &amp;#43; edge[i].len * &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt; / edge[i].speed;\n                q.&lt;span class=\"hljs-built_in\"&gt;push&lt;/span&gt;(st2{v, dis2[v]});\n            }\n        }\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    ios::&lt;span class=\"hljs-built_in\"&gt;sync_with_stdio&lt;/span&gt;(&lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;);\n    cin.&lt;span class=\"hljs-built_in\"&gt;tie&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    cout.&lt;span class=\"hljs-built_in\"&gt;tie&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, m;\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;\n    &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(head, &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;sizeof&lt;/span&gt; head);\n    &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(dis, &lt;span class=\"hljs-number\"&gt;0x3f&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;sizeof&lt;/span&gt; dis);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;m;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; u, v, speed, len;\n        cin &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v &amp;gt;&amp;gt; speed &amp;gt;&amp;gt; len;\n        &lt;span class=\"hljs-built_in\"&gt;Add_Edge&lt;/span&gt;(u, v, speed, len);\n        &lt;span class=\"hljs-built_in\"&gt;Add_Edge&lt;/span&gt;(v, u, speed, len);\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; q;\n    &lt;span class=\"hljs-built_in\"&gt;dijkstra&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(vis, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;sizeof&lt;/span&gt; vis);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;) dis2[i] &amp;#61; INF2;\n    &lt;span class=\"hljs-built_in\"&gt;dijkstra2&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    cin &amp;gt;&amp;gt; q;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(q--){\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j;\n        &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c;\n        cin &amp;gt;&amp;gt; j &amp;gt;&amp;gt; c;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(dis[j] &amp;#61;&amp;#61; INF) cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IMPOSSIBLE\\n&amp;#34;&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; cout &amp;lt;&amp;lt; dis[j] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;km\\n&amp;#34;&lt;/span&gt;;\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;dcmp&lt;/span&gt;(dis2[j] - INF2) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;IMPOSSIBLE\\n&amp;#34;&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; cout &amp;lt;&amp;lt; fixed &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;setprecision&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;) &amp;lt;&amp;lt; dis2[j] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;h\\n&amp;#34;&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["算法题求解！最短路径+动态规划 C++", ["题目设计：", "你怀疑你的导航系统有时会选择低效的路线。", "所以你决定收集一些关于你所在地区的道路系统的数据并编写一个程序，计算出从你的家到你所在地区的最短（综合道路长度）和最快（预期旅行时间）的路线。", "为了使这一任务易于管理，你想出了一个简单的模型。道路系统道路系统由路口（数字从1到N）和连接它们的道路组成，每条道路都有一个限速（单位：km/h）和一个长度（单位：km）。", "在其中一个路口转换道路既不耗费时间也不耗费距离。", "为了简单起见，你还假设所有的道路都是双向的，并且你可以一直以限速行驶。", "\n", "输入的内容包括", "\n", "一行包含N和M(2 ≤ N ≤ 5 · 10^4^, 1 ≤ M ≤ 2 · 10^5^) --分别表示路口和道路的数量", "M行描述道路，第 i 行包含bi, ei, vi和 i (1 ≤ bi，ei≤N，20≤vi≤150，1≤ i ≤300）分别代表第i条道路，与其连接的路口，速度限制和长度（所有这些输入都是整数)", "一行包含 Q（1 ≤ Q ≤ 1000）--查询的数量", "Q行给出查询，每行包括一个整数 j：目的地路口的索引和一个字符c∈{'s', 'f'}", "\n", " 输出", "\n", "对于's'类型的查询，输出从你的家（1号路口）到指定目的地的最短路线的长度。", "对于'f'类型的查询，输出从你的家到指定目的地的最短旅行时间（假设一直按限速行驶），精度为10^-3^", "使用与输入相同的单位，用空格分隔数量和单位。如果一个给定的目的地不能到达，输出 \"IMPOSSIBLE\"。", "\n", "例如：", "\n", "\n", "第三组：", "20 80", "19 15 57 179", "20 20 125 175", "5 4 60 34", "9 10 24 85", "18 8 114 244", "19 9 23 245", "1 5 115 132", "7 17 45 117", "6 12 24 109", "1 12 116 83", "3 3 83 270", "20 20 145 65", "9 13 78 47", "11 14 40 152", "9 15 79 70", "18 9 72 101", "19 5 105 282", "2 3 120 90", "20 13 105 186", "2 4 72 145", "13 18 103 90", "1 3 26 143", "19 13 45 7", "5 14 39 295", "9 7 74 218", "15 5 73 131", "6 15 79 255", "6 15 56 113", "14 5 40 157", "17 17 57 216", "17 14 106 260", "18 9 121 201", "7 11 76 25", "14 17 20 144", "10 6 49 285", "6 16 88 95", "6 4 82 96", "10 16 121 187", "19 11 100 294", "6 9 129 241", "4 4 90 99", "11 15 79 130", "5 8 95 108", "19 15 29 285", "19 20 122 280", "19 13 76 13", "12 16 67 88", "18 10 107 56", "2 18 147 300", "6 15 27 130", "16 6 80 28", "8 5 101 96", "16 16 76 130", "12 3 134 1", "17 4 145 284", "14 9 24 203", "5 13 39 140", "12 9 116 254", "5 12 141 52", "16 3 68 95", "17 1 44 14", "12 20 62 161", "18 16 129 72", "16 18 117 114", "20 17 128 271", "2 1 92 255", "1 19 74 115", "15 2 57 240", "18 7 41 140", "14 1 107 280", "4 6 66 205", "6 10 60 209", "17 2 112 42", "8 2 45 14", "7 16 59 33", "13 16 40 270", "17 6 41 59", "4 13 57 245", "19 11 55 97", "2 8 115 80", "10", "2 s", "15 f", "7 s", "17 f", "8 f", "9 f", "17 s", "16 f", "2 s", "3 f", "\n", "输出：", "56 km", "2.87883212 h", "131 km", "0.31818182 h", "1.00429293 h", "2.31217371 h", "14 km", "2.02895008 h", "56 km", "0.72297993 h", "\n", "关于这道题应该要用到Dijkstra算法或者Moore-Bellman-Ford 算法？希望可以给个详细点的代码，谢谢！", "学到的算法如下代码", "\n", "void", " dijkstra_set (", "int", " s, ", "int", " n) {\n    fill (d, d + n + ", "1", ", INF ) ;\n    d[s] = ", "0", ";\n\n    ", "set", " <pair <", "int", " , ", "int", " > > dst ;\n    dst . ", "insert", " ({d[s], s}) ;\n\n    ", "while", " (! dst. empty () ) {\n        ", "int", " v = dst . ", "begin", " () -> second ;\n        dst . erase ( dst . ", "begin", " () );\n        ", "for", " ( auto e: edges [v])\n              ", "if", " (d[v] + e. ", "cost", " < d[e.u]) {\n                  dst . erase ({d[e.u], e.u}) ;\n                  d[e.u] = d[v] + e. ", "cost", " ;\n                  dst . ", "insert", " ({d[e.u], e.u}) ;\n              }\n     }\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;基于Monster 组和GPT的调写&amp;#xff1a;&lt;br /&gt;第一个&amp;#xff1a;&lt;br /&gt;UDP包大小的选择需要根据具体场景来确定&amp;#xff0c;下面是一些可能影响包大小选择的因素&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;网络延迟&amp;#xff1a;在高延迟网络中&amp;#xff0c;发送大包会增加数据包被分割和重新组装的风险&amp;#xff0c;因此使用小包可能更好。\n网络拥塞&amp;#xff1a;在高拥塞网络中&amp;#xff0c;较小的包可能更容易通过网络&amp;#xff0c;而大包可能被阻塞或延迟&amp;#xff0c;因此使用小包可能更好。\n数据大小&amp;#xff1a;如果数据量较小&amp;#xff0c;则发送大包会浪费网络资源&amp;#xff0c;因此使用小包可能更好。\n丢包率&amp;#xff1a;如果网络丢包率很高&amp;#xff0c;使用大包可能更加高效&amp;#xff0c;因为一个数据包中的数据丢失的可能性较小。\n网络带宽&amp;#xff1a;如果网络带宽较小&amp;#xff0c;发送大包可能会浪费带宽&amp;#xff0c;因此使用小包可能更好。\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;综合考虑以上因素&amp;#xff0c;我们可以得出以下建议&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;对于需要快速传输的音视频数据&amp;#xff0c;建议采用UDP协议&amp;#xff0c;因为UDP不需要建立连接&amp;#xff0c;具有较低的延迟和较小的网络开销&amp;#xff0c;适合实时传输。\n对于网络延迟较低的情况&amp;#xff0c;可以考虑使用大包&amp;#xff0c;以减少网络传输的开销。但需要注意包的大小不能超过MTU的大小&amp;#xff0c;否则需要进行分包操作。\n对于网络延迟较高的情况&amp;#xff0c;可以考虑使用小包&amp;#xff0c;以减少由于包分割和重新组装引起的延迟。但需要注意不要过度分割数据&amp;#xff0c;以避免增加网络开销。\n对于网络带宽较小的情况&amp;#xff0c;建议使用小包&amp;#xff0c;以充分利用网络资源。\n对于网络丢包率较高的情况&amp;#xff0c;建议使用大包&amp;#xff0c;以减少数据包丢失的可能性。\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;第二个&amp;#xff1a;&lt;br /&gt;设计“密码竞争破解”网络游戏程序&amp;#xff0c;可以分为以下基本步骤&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;定义密码和悬赏价格&amp;#xff1a;发布方程序需要定义一个密码和一个悬赏价格&amp;#xff0c;并将其向全网&amp;#xff08;局域网&amp;#xff09;广播。\n\n接收方程序接收密码和悬赏价格&amp;#xff1a;众多接收方程序需要监听发布方程序的广播&amp;#xff0c;并接收密码和悬赏价格。\n\n破解密码&amp;#xff1a;接收方程序需要运用自己的破解策略&amp;#xff0c;试图破解密码。这可以通过示范性的函数process&lt;span class=\"hljs-comment\"&gt;(...)&lt;/span&gt;来实现&amp;#xff0c;该函数应该是一个业务逻辑方法&amp;#xff0c;具体实现可以根据不同的破解算法进行设计。\n\n提交破解结果&amp;#xff1a;接收方程序需要将破解结果提交给发布方程序。提交结果的方式可以通过网络通信、数据库、文件等方式来实现。\n\n发布方程序验证破解结果并发放悬赏&amp;#xff1a;发布方程序需要验证接收方程序提交的破解结果是否正确&amp;#xff0c;如果正确&amp;#xff0c;则向接收方程序发放悬赏。悬赏的发放方式可以通过网络通信、支付宝、微信等方式来实现。\n\n接收方程序领取悬赏&amp;#xff1a;接收方程序可以根据发布方程序发放的悬赏方式来领取悬赏。例如&amp;#xff0c;如果使用支付宝、微信等方式&amp;#xff0c;接收方程序可以通过扫描发布方程序提供的二维码或者输入相应的支付宝、微信账号来领取悬赏。\n\n重新发布密码和悬赏&amp;#xff1a;发布方程序可以选择重新发布新的密码和悬赏&amp;#xff0c;或者调整现有密码和悬赏的数值。这可以通过重新启动发布方程序并重新广播密码和悬赏来实现。\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;第三个&amp;#xff1a;&lt;br /&gt;服务器端程序代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import &lt;span class=\"hljs-built_in\"&gt;socket&lt;/span&gt;\n\ndef get_primes(&lt;span class=\"hljs-built_in\"&gt;start&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;):\n    primes &amp;#61; []\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-built_in\"&gt;start&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;):\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; all(&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;%i!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, int(&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;**&lt;span class=\"hljs-number\"&gt;0.5&lt;/span&gt;)&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)):\n            primes.append(&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;)\n    &lt;span class=\"hljs-literal\"&gt;return&lt;/span&gt; primes\n\nhost &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 服务器IP地址&lt;/span&gt;\nport &amp;#61; &lt;span class=\"hljs-number\"&gt;8888&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 端口号&lt;/span&gt;\n\nserver_socket &amp;#61; &lt;span class=\"hljs-built_in\"&gt;socket&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;socket&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;socket&lt;/span&gt;.AF_INET, &lt;span class=\"hljs-built_in\"&gt;socket&lt;/span&gt;.SOCK_STREAM)\nserver_socket.bind((host, port))\nserver_socket.listen(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n\nprint(&lt;span class=\"hljs-string\"&gt;&amp;#39;等待客户端连接...&amp;#39;&lt;/span&gt;)\nclient_socket, addr &amp;#61; server_socket.accept()\nprint(&lt;span class=\"hljs-string\"&gt;&amp;#39;客户端已连接&amp;#xff1a;&amp;#39;&lt;/span&gt;, addr)\n\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; True:\n    data &amp;#61; client_socket.recv(&lt;span class=\"hljs-number\"&gt;1024&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; data:\n        break\n    &lt;span class=\"hljs-keyword\"&gt;command&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-title\"&gt;data&lt;/span&gt;.&lt;span class=\"hljs-title\"&gt;decode&lt;/span&gt;()\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; command.startswith(&lt;span class=\"hljs-string\"&gt;&amp;#39;getPrimes&amp;#39;&lt;/span&gt;):\n        &lt;span class=\"hljs-built_in\"&gt;params&lt;/span&gt; &amp;#61; command.&lt;span class=\"hljs-built_in\"&gt;split&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n        &lt;span class=\"hljs-built_in\"&gt;start&lt;/span&gt; &amp;#61; int(&lt;span class=\"hljs-built_in\"&gt;params&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-title\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-title\"&gt;params&lt;/span&gt;[&lt;span class=\"hljs-title\"&gt;2&lt;/span&gt;])&lt;/span&gt;\n        primes &amp;#61; get_primes(&lt;span class=\"hljs-built_in\"&gt;start&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;)\n        response &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;.join(str(p) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; p &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; primes)\n        client_socket.sendall(response.encode())\n\nclient_socket.&lt;span class=\"hljs-built_in\"&gt;close&lt;/span&gt;()\nserver_socket.&lt;span class=\"hljs-built_in\"&gt;close&lt;/span&gt;()\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;客户端程序代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import &lt;span class=\"hljs-built_in\"&gt;socket&lt;/span&gt;\n\nhost &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 服务器IP地址&lt;/span&gt;\nport &amp;#61; &lt;span class=\"hljs-number\"&gt;8888&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;# 端口号&lt;/span&gt;\n\nclient_socket &amp;#61; &lt;span class=\"hljs-built_in\"&gt;socket&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;socket&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;socket&lt;/span&gt;.AF_INET, &lt;span class=\"hljs-built_in\"&gt;socket&lt;/span&gt;.SOCK_STREAM)\nclient_socket.connect((host, port))\n\n&lt;span class=\"hljs-keyword\"&gt;command&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;getPrimes 20 300&amp;#39;&lt;/span&gt;\nclient_socket.sendall(command.encode())\n\nresponse &amp;#61; client_socket.recv(&lt;span class=\"hljs-number\"&gt;1024&lt;/span&gt;).decode()\nprint(&lt;span class=\"hljs-string\"&gt;&amp;#39;20~300之间的素数为&amp;#xff1a;&amp;#39;&lt;/span&gt;, response)\n\nclient_socket.&lt;span class=\"hljs-built_in\"&gt;close&lt;/span&gt;()\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;基本步骤如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;服务器端创建一个&lt;span class=\"hljs-built_in\"&gt;socket&lt;/span&gt;&amp;#xff0c;并绑定IP地址和端口号&amp;#xff0c;然后开始监听客户端连接请求。\n客户端创建一个&lt;span class=\"hljs-built_in\"&gt;socket&lt;/span&gt;&amp;#xff0c;并连接服务器端的IP地址和端口号。\n客户端向服务器发送一个&lt;span class=\"hljs-string\"&gt;&amp;#34;getPrimes 20 300&amp;#34;&lt;/span&gt;的命令。\n服务器接收到命令后&amp;#xff0c;解析出起始数字和结束数字。\n服务器利用get_primes函数求出&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;~&lt;span class=\"hljs-number\"&gt;300&lt;/span&gt;之间的素数&amp;#xff0c;将这些素数转换为字符串格式。\n服务器将求出的素数作为响应&amp;#xff0c;通过&lt;span class=\"hljs-built_in\"&gt;socket&lt;/span&gt;将响应发送回客户端。\n客户端接收服务器的响应&amp;#xff0c;并将响应打印输出。最后关闭&lt;span class=\"hljs-built_in\"&gt;socket&lt;/span&gt;连接。\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;最后一个&amp;#xff1a;&lt;br /&gt;针对该异构系统之间的数据交换需求&amp;#xff0c;可以设计以下方案&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-selector-tag\"&gt;B&lt;/span&gt;方与&lt;span class=\"hljs-selector-tag\"&gt;A&lt;/span&gt;方的数据交换方案&amp;#xff1a;\n&lt;span class=\"hljs-selector-tag\"&gt;B&lt;/span&gt;方的数据更新可以通过实现一个后台服务程序&amp;#xff0c;将数据变更记录在本地的日志文件中&amp;#xff0c;然后将该日志文件通过FTP/SFTP等协议传输到&lt;span class=\"hljs-selector-tag\"&gt;A&lt;/span&gt;方指定的目录中。&lt;span class=\"hljs-selector-tag\"&gt;A&lt;/span&gt;方可以实现一个轮询程序&amp;#xff0c;定期从该目录中读取日志文件&amp;#xff0c;解析其中的数据变更&amp;#xff0c;并将数据同步到自己的数据库中。\n\nC方与&lt;span class=\"hljs-selector-tag\"&gt;A&lt;/span&gt;方的数据交换方案&amp;#xff1a;\nC方与&lt;span class=\"hljs-selector-tag\"&gt;A&lt;/span&gt;方的数据交换可以通过实现一个基于RESTful风格的Web服务来实现。C方在本地产生数据变更时&amp;#xff0c;向&lt;span class=\"hljs-selector-tag\"&gt;A&lt;/span&gt;方发送HTTP POST请求&amp;#xff0c;通知&lt;span class=\"hljs-selector-tag\"&gt;A&lt;/span&gt;方有数据需要更新。&lt;span class=\"hljs-selector-tag\"&gt;A&lt;/span&gt;方接收到请求后&amp;#xff0c;将请求中的变更记录在本地的日志文件中&amp;#xff0c;并返回一个成功响应。同时&amp;#xff0c;&lt;span class=\"hljs-selector-tag\"&gt;A&lt;/span&gt;方也可以向C方提供一个API&amp;#xff0c;当C方需要获取&lt;span class=\"hljs-selector-tag\"&gt;A&lt;/span&gt;方的数据时&amp;#xff0c;可以通过该API来获取&amp;#xff0c;或者在&lt;span class=\"hljs-selector-tag\"&gt;A&lt;/span&gt;方的后台服务程序中实现一个数据推送服务&amp;#xff0c;将&lt;span class=\"hljs-selector-tag\"&gt;A&lt;/span&gt;方的数据实时推送给C方。\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["TCP/IP网络编程与应用程序", ["1、    在音视频数据需要快速传递的网络传输部分，大部分方案设计采用UDP。在采用UDP方案时，有的方案采用大UDP包（如：接近65000B），有的方案采用小UDP包（如：1KB左右，或1个MTU大小左右）。对比这两种方案，灵活运用你所学的网络程序设计知识与能力，进行分析。提出你的最终建议。", "\n", "2、    “密码竞争破解”网络游戏程序。发布方程序（只有该程序有权发布）向全网（局域网）发布一个有悬赏价格的“密码”，众多接收方程序收到后立即运用自己的破解策略，试图进行破解（破解算法示范性用函数process(…)表示，是一个业务逻辑方法。它的具体代码可不用考虑）。并将破解的结果向发布方进行提交。根据上述基本要求，请给出设计该程序（含发布方程序和接收方程序）的基本步骤（尽可能详细）。", "\n", "3、    设计一个基于TCP协议的程序。完成功能是：客户方向服务器发送一个”getPrimes    20   300”命令，服务器接收该命令后，将20~300之间所有的素数（质数）求出来，并将这些素数返回给客户机。请给出客户机和服务器双方程序的代码或基本步骤（尽可能详细）。", "\n", "方案设计题", "某医院的一款软件的承接方A方（我方：技术栈是Java系列平台），需要从B方的软件系统（比较老，采用的是Delphi技术） 和 C方软件系统（采用的是微软.NET平台，主要是C#为主的系列技术）中，通过医院的局域网进行数据交换。", "具体交换流程是：", "1）    B方与A方（单向：BA）：当B方数据有更新时，将数据推送到A方（我方）。A方不需要向B方传数据。", "2）    C方与A方(双向：CA)：C方因各种原因（主要是基于系统方面的考虑），C方提出：无论C方和A方，有数据更新需要传递到对方时，通知对方，由对方到指定位置处去获取数据。A方同意。", "基于上述的异构系统之间的数据交换，运用你的网络程序设计的知识与能力，设计出该异构系统数据交换的方案。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://blog.csdn.net/Autumn_1/article/details/120704004\" id=\"textarea_1654690889500_1654690932727_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;java实现老鼠迷宫游戏_小小寂寞的城的博客-CSDN博客_老鼠迷宫java&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;最近学java,在递归部分看到老鼠迷宫游戏,感觉挺有意思,记录一下我们可以把迷宫当成一个二位数组,其中1代表障碍物,走不了,初始化一个二维数组,设置好障碍物//老鼠迷宫        int[][] map &amp;#61; {                {1,1,1,1,1,1,1,1},                {1,0,0,0,0,0,0,1},                {1,1,0,0,0,0,0,1},                {1,0,1,0,0,0,0,1},     &lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/Autumn_1/article/details/120704004&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["Java语言迷宫鼠详解", ["（1）概述：用java面向对象程序设计语言，设计和实现一电脑鼠走迷宫的软件程序，", "即一个假想的小车能在图示的迷宫中根据设定的起始点和终点自主寻找路径。", "（2）迷宫地图生成算法的设计和实现", "自动生成迷宫：根据迷宫生成算法自动生成一定复杂度的迷宫地图。", "手动生成迷宫：根据文件中存储的固定数据生成迷宫地图。", "单路径寻找算法的设计与实现：找出迷宫中一条单一的通路。", "迷宫遍历算法的设计与实现：遍历迷宫中所有的可行路径。", "最短路径计算算法的设计与实现：根据遍历结果，找出迷宫中所有通路中的最短通", "路。", "（3）通过动画展示出迷宫鼠在迷宫内的运动。", "（4)具有判断通路和障碍的功能；走不通具备返回的能力（路径记忆）；能够寻找最短路径；"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://blog.csdn.net/wweakness/article/details/100025609\" id=\"textarea_1664953635922_1664953693778_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/wweakness/article/details/100025609&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/weixin_53804806/article/details/124326708?spm&amp;#61;1001.2101.3001.6650.1&amp;amp;utm_medium&amp;#61;distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-124326708-blog-100025609.pc_relevant_multi_platform_whitelistv3&amp;amp;depth_1-utm_source&amp;#61;distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-124326708-blog-100025609.pc_relevant_multi_platform_whitelistv3&amp;amp;utm_relevant_index&amp;#61;2\" id=\"textarea_1664953635922_1664953693778_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_53804806/article/details/124326708?spm&amp;#61;1001.2101.3001.6650.1&amp;amp;utm_medium&amp;#61;distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-124326708-blog-100025609.pc_relevant_multi_platform_whitelistv3&amp;amp;depth_1-utm_source&amp;#61;distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-124326708-blog-100025609.pc_relevant_multi_platform_whitelistv3&amp;amp;utm_relevant_index&amp;#61;2&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["如何从以下所列问题中至少选其一进行求解： ① 设计并实现括号匹配检验问题的求解？", ["1）采用顺序存储结构实现栈的类型定义及其初始化、入栈、出栈作、取栈顶、判空等其操作；", "（2）应用所实现的栈，从以下所列问题中至少选其一进行求解：", " ① 设计并实现括号匹配检验问题的求解；", " ② 设计并实现一个简单的行编辑程序；", "（3）针对所选择的求解问题，编写测试程序，并选取适当的测试数据，通过运行结果验证算法和程序设计的正确性。"]], "Tag": "程序设计"}
{"Answer": "这代码错了\r\n\r\nfor(i=0;i {\r\n if(a[i]y)\r\n {\r\n b[m]=a[i];m++;\r\n }\r\n }\r\n 这不符合语法\r\n \r\n正确的思路是，假设数组长度是N，删除x,y之间的元素\r\n那么从x开始，到N-y+x-1为止，以i作为循环变量将数组的i+y-x拷贝到i即可。\r\n最后输出0~N-y+x-1之间的元素", "Konwledge_Point": "算法与程序设计", "Question": ["不懂这串代码的设计思路？", ["顺序表区间元素的删除", "\n2.1 问题描述", "\n若一个顺序表L，其中所有的元素为正整数。设计一个程序，删除元素值在[x,y]之间的所有元素后输出该顺序表。注意保持元素顺序不变。", "\n\n", "输入", "\n三行数据。", "\n第一行是顺序表的元素个数（不超过20），第二行是顺序表的元素（空格隔开），第三行是x和y。", "\n输出", "\n删除元素值在[x,y]之间的所有元素后的顺序表。空格隔开", "\n样例输入", "\n10", "\n5 1 9 10 67 12 8 33 6 2", "\n3 10", "\n样例输出", "\n1 67 12 33 2", "\n\n", "#include", "\nint main()", "\n{", "\nint a[20];", "\nint b[20];", "\nint n,i,x,y,m=0;", "\nscanf(\"%d\",&n);", "\n\n", "for(i=0;i<n;i++)", "\nscanf(\"%d\",&a[i]);", "\n\n", "scanf(\"%d%d\",&x,&y);", "\n\n", "for(i=0;i\n{", "\nif(a[i]y)", "\n{", "\nb[m]=a[i];m++;", "\n}", "\n}", "\n\n", "for(i=0;i<m;i++)", "\nprintf(\"%d \",b[i]);", "\n\n", "return 0;", "\n}", "\n我是初学者...", "\n大佬请详细讲讲这串代码的算法设计思路和流程图", "\n我在旁边好好学习"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;数据结构对单链表进行数据排序  &lt;a id=\"textarea_1646360079007_1646360945710_0\" target=\"_blank\"&gt;&lt;span class=\"md_link_url\"&gt;http://bbs.csdn.net/topics/392201633&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["单链表的情况下怎么让学号从小到大排序", ["问题描述", "请设计一个简单的学生成绩管理系统，要求系统实现以下功能：", "学生信息包括学号、姓名、性别、语文、数学、英语。", "插入学生信息：", "  Insert id name sex x y z 其中的参数分别为学号、姓名、性别、三门课的成绩，成绩为浮点数。如果链表中已经存在相同学号的学生信息，插入失败。", "输出所有学生信息：", "  List", "  按照学号从小到大的顺序输出所有学生的信息，每行一位学生的信息。每行的格式如下：", " id name sex x y z", " 数据之间用一个空格分隔，成绩保留1位小数。", "查找学生信息：", "  Find id", "  查找学号为id的学生信息。", "修改学生信息：", "  Change id newname，newx，newy，newz", "  把学号为id的学生信息修改为newname，newx，newy，newz（学号保持不变）", "删除学生信息：", "  Delete id", "  删除学号为id的学生信息", "退出程序：", "  Quit或者Exit", "输入", "输入有多行，每行一条指令，指令格式如下：", "Insert id name sex x y z", "  插入学生信息，分别为学号、姓名、性别和三门课的成绩。", "List", "  按照学号从小到大的输出所有学生信息。", "Find id", "  查找学号为id的学生信息。", "Change id newname，newx，newy，newz", "  把学号为id的学生信息修改为newname，newx，newy，newz（学号保持不变）", "Delete id", "  删除学号为id的学生信息", "Quit或者Exit", "  输出\"Good bye!\"后结束程序。", "输出", "输出有多行，对应命令的输出如下：", "Insert id name sex x y z", "   插入后先在单独的一行输出\"Insert:\"。", "   第二行中显示信息如下：如果链表中已经存在相同学号的学生信息，插入失败，显示\"Failed\"。否则插入并显示学生信息，数据之间用一个空格分开，成绩保留1位小数。", "List", "  第一行输出\"List:\"，接下来按照学号从小到大的顺序输出所有学生的信息，每行一位学生的信息。每行的格式如下：", " id name sex x y z", " 数据之间一个空格，成绩保留1位小数。", "Find id", " 第一行显示”Find:\"，第二行显示格式如下：", "  如果找到学号为id的学生，则在单独一行中显示学生信息，格式如List。否则在单独一行显示\"Failed\"。", "Change id newname，newx，newy，newz", "  第一行显示\"Change:\"。如果链表中不存在学号为id的学生，显示\"Failed\"。否则修改该学生信息并在单独一行中显示该生信息，显示格式如List命令。", "Delete id", "  第一行显示\"Delete:\"。如果链表中不存在学号为id的学生，显示\"Failed\"。否则修改该学生信息并在单独一行中显示\"Deleted\"", "Quit或者Exit", "  在单独一行中输出\"Good bye!\"后结束程序。", "输入样列", "Insert 0911002 zhaoliu  F 97 90 55", "Insert 0911001 zhangsan  F 87 78 65", "Insert 0911001 zhangsan  F 87 78 65", "Insert 0911003 Lisi  F 77 72 55", "Change 0911001 Zhangsan  M 77 78 65", "Change 0911004 Wangwu  M 77 78 65", "Insert 0911004 Wangwu  F 68 56 95", "Find 0911004", "List", "Delete 0911004", "Delete 0911004", "List", "Quit", "输出样例", "Insert:", "0911002 zhaoliu F 97.0 90.0 55.0", "Insert:", "0911001 zhangsan F 87.0 78.0 65.0", "Insert:", "Failed", "Insert:", "0911003 Lisi F 77.0 72.0 55.0", "Change:", "0911001 Zhangsan M 77.0 78.0 65.0", "Change:", "Failed", "Insert:", "0911004 Wangwu F 68.0 56.0 95.0", "Find:", "0911004 Wangwu F 68.0 56.0 95.0", "List:", "0911001 Zhangsan M 77.0 78.0 65.0", "0911002 zhaoliu F 97.0 90.0 55.0", "0911003 Lisi F 77.0 72.0 55.0", "0911004 Wangwu F 68.0 56.0 95.0", "Delete:", "Deleted", "Delete:", "Failed", "List:", "0911001 Zhangsan M 77.0 78.0 65.0", "0911002 zhaoliu F 97.0 90.0 55.0", "0911003 Lisi F 77.0 72.0 55.0", "Good bye!", "\n", "#include<bits/stdc++.h>\nusing namespace std;\ntypedef struct Student{\n    char id[", "20", "];\n    char ", "name", "[", "20", "];\n    char sex[", "2", "];\n    double x,y,z;\n    struct Student *next;\n}Student;\nvoid inputSingle(Student *s)\n{\n    int j;\n    ", "scanf", "(\"%s %s %s\",s->", "id", ",s->", "name", ",s->", "sex);\n    ", "scanf", "(\"%lf %lf %lf\",&s->", "x", ",&s->", "y", ",&s->", "z);\n}\nvoid outputSingle(Student *s)\n{\n    int j;\n    ", "printf", "(\"%s %s %s \",s->", "id", ",s->", "name", ",s->", "sex);\n    ", "printf", "(\"%.1f %.1f %.1f\\n\",s->", "x", ",s->", "y", ",s->", "z);\n}\nStudent* createList()\n{\n    Student *L;\n    L=(Student *)malloc(sizeof(Student));\n    L->next=NULL;\n    return L;\n}\nvoid insert(Student *L,Student *S,char id[])\n{\n    Student *pre,*p,*s;\n    pre=L;\n    ", "p", "=L->", "next;\n    ", "while", "(p!=NULL&&p->", "id<id){\n        pre=p;\n        ", "p", "=p->", "next;\n    }\n    ", "s", "->", "next", "=pre->", "next;\n    ", "pre", "->", "next=s;\n}\nvoid outputList(Student *L)\n{\n    Student *p;\n    ", "p", "=L->", "next;\n    ", "while", "(p!=NULL){\n        outputSingle(p);\n        ", "p", "=p->", "next;\n    }\n}\nint Find(Student *L,char id[])\n{\n    Student *pre,*p;\n    pre=L;\n    ", "p", "=L->", "next;\n    ", "while", "(p!=NULL&&strcmp(p->", "id,id)!=", "0", "){\n        pre=p;\n        ", "p", "=p->", "next;\n    }\n    ", "if", "(p==NULL){\n        puts(", "\"Failed\"", ");\n        return ", "0", ";\n    }\n    ", "else", "{\n        outputSingle(p);\n        return ", "1", ";\n    }\n}\nint Change(Student *L,char id[],char ", "name", "[],char sex[],double x,double y,double z)\n{\n    Student *pre,*p;\n    pre=L;\n    ", "p", "=L->", "next;\n    ", "while", "(p!=NULL&&strcmp(p->", "id,id)!=", "0", "){\n        pre=p;\n        ", "p", "=p->", "next;\n    }\n    ", "if", "(p==NULL){\n        puts(", "\"Failed\"", ");\n        return ", "0", ";\n    }\n    ", "else", " ", "if", "(strcmp(p->", "name", ",", "name", ")!=0||strcmp(p->", "sex", ",sex)!=0||p->", "x", "!=x||p->", "y", "!=y||p->", "z!=z){\n        ", "strcpy", "(p->", "name", ",", "name", ");\n        ", "strcpy", "(p->", "sex,sex);\n        ", "p", "->", "x", "=x,p->", "y", "=y,p->", "z=z;\n        outputSingle(p);\n        return ", "1", ";\n    }\n}\nint Delete(Student *L,char id[])\n{\n    Student *pre,*p;\n    pre=L;\n    ", "p", "=L->", "next;\n    ", "while", "(p!=NULL&&strcmp(p->", "id,id)!=", "0", "){\n        pre=p;\n        ", "p", "=p->", "next;\n    }\n    ", "if", "(p==NULL){\n        puts(", "\"Failed\"", ");\n        return ", "0", ";\n    }\n    ", "else", "{\n        ", "pre", "->", "next", "=p->", "next;\n        free(p);\n        puts(", "\"Deleted\"", ");\n        return ", "1", ";\n    }\n}\nint main()\n{\n    string order;\n    Student *L,*s;\n    L=createList();\n    char id[", "20", "];\n    char ", "name", "[", "20", "];\n    char sex[", "2", "];\n    double x,y,z;\n    ", "while", "(", "1", "){\n        cin>>order;\n        ", "if", "(order==", "\"Insert\"", "){\n            puts(", "\"Insert:\"", ");\n            cin>>id;\n            s=(Student *)malloc(sizeof(Student));\n            inputSingle(s);\n            outputSingle(s);\n            insert(L,s,id);\n        }\n        ", "else", " ", "if", "(order==", "\"List\"", "){\n            puts(", "\"List:\"", ");\n            outputList(L);\n        }\n        ", "else", " ", "if", "(order==", "\"Find\"", "){\n            puts(", "\"Find:\"", ");\n            cin>>id;\n            Find(L,id);\n        }\n        ", "else", " ", "if", "(order==", "\"Change\"", "){\n            puts(", "\"Change:\"", ");\n            cin>>id>>", "name", ">>sex>>x>>y>>z;\n            Change(L,id,", "name", ",sex,x,y,z);\n        }\n        ", "else", " ", "if", "(order==", "\"Delete\"", "){\n            puts(", "\"Delete:\"", ");\n            cin>>id;\n            Delete(L,id);\n        }\n        ", "else", "{\n            printf(", "\"Good bye!\\n\"", ");\n            break;\n        }\n    }\n    return ", "0", ";\n}\n \n\n", "\n", "最开始用的是尾插法，那时没出什么问题，但是要求学号排序后我插入改用了按指定位置插入节点的法子，但是出错了T T"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;首先确定自己要参加的比赛&amp;#xff0c;接着找这些比赛的历年题目看看&amp;#xff0c;练习熟练于心&amp;#xff0c;推测下次比赛试题要考察的方向。&lt;br /&gt;所谓的学有余力不过是别人学习的效率更高&amp;#xff0c;你要做的就是提高自己学习的效率&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["计算机竞赛怎么准备呢？怎样分配好时间呢？", ["本人目前大二，计算机科学与技术专业在读，大一学了C++程序设计基础，目前大二开课数据结构与算法，这学年想搞竞赛啦(为保研打基础)，像蓝桥杯，ACM，东北地区大学生程序设计竞赛，团体程序设计天梯赛……之前没什么基础，编程能力一般，想搞竞赛，却没什么努力的方向，想咨询一下大家，我应该怎么准备呢？搞这些竞赛是不需要学习数据结构与算法呢，我是跟着学校学呢，还是自己学呢？还需要什么理论知识的储备，应该什么时候刷题呢？", "  另一个就是如何分配好时间在学好校内课程的同时备赛呢？大家们都是如何分配好时间的呢？有的同学们，不仅课内的知识学的好，还准备建模比赛，各种计算机类的比赛，自己目前只能跟着学校内的课程，大家是怎么学有余力？", "(我真的很想努力，但是不知道的该怎么努力？大家可否给些建议)"]], "Tag": "程序设计"}
{"Answer": "```\r\n class 个人信息{\r\n get set方法  （20个）\r\n }\r\n  class 报告{\r\n get set方法  （3000个）\r\n }\r\n  class 算法表(个人信息，报告){\r\n 将你的算法都录入进来 用到哪个类的 就get哪个类的属性\r\n \r\n 例如 private String 心脏病（报告.心跳）{\r\n if（报告.心跳&gt;100）{\r\n return \"心脏病\";\r\n }\r\n }\r\n }\r\n```\r\n然后在你的主类中直接调用算法类即可 往里传相应的对象属性就好了", "Konwledge_Point": "算法与程序设计", "Question": ["面向对象编程，类的设计", ["现在有3个表，", "\n个人信息（生日，性别，年龄，电话等），约20项", "\n这些人的体检报告（比如血压80/120，心跳：80等），约3000项", "\n算法表（心跳》100是心脏病，血压高于140是高血压等）。300种", "\n程序的功能是根据体检报告和算法得出结果比如心脏病，高血压等。", "\n这几个类和方法怎么设计？最好有伪代码"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/931866185566179.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; _CRT_SECURE_NO_WARNINGS&lt;/span&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;//定义结构体&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;_datatype&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; id; &lt;span class=\"hljs-comment\"&gt;//任务号&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; time; &lt;span class=\"hljs-comment\"&gt;//任务产生的时间&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; space; &lt;span class=\"hljs-comment\"&gt;//任务持续时间&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; start; &lt;span class=\"hljs-comment\"&gt;//任务开始处理时间&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; end; &lt;span class=\"hljs-comment\"&gt;//任务结束时间&lt;/span&gt;\n}&lt;span class=\"hljs-built_in\"&gt;Task&lt;/span&gt;;\n\n&lt;span class=\"hljs-comment\"&gt;//定义链式结构&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;_node&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;Task&lt;/span&gt; task;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;_node&lt;/span&gt;* next;\n}Node,*Queue;\n\n&lt;span class=\"hljs-comment\"&gt;//初始化队列&amp;#xff08;带头节点的队列&amp;#xff09;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;InitQueue&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Queue* head)&lt;/span&gt;\n&lt;/span&gt;{\n    *head &amp;#61; (Queue)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(Node));\n    (*head)-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//判断队列是否为空&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;QueueEmpty&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Queue head)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (head &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (head-&amp;gt;next &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//入队&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;EnQueue&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Queue head, &lt;span class=\"hljs-built_in\"&gt;Task&lt;/span&gt; task)&lt;/span&gt;\n&lt;/span&gt;{\n    Queue p, t;\n    t &amp;#61; (Queue)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(Node));\n    t-&amp;gt;task &amp;#61; task;\n    t-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;//插入队列&lt;/span&gt;\n    p &amp;#61; head;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p-&amp;gt;next)\n        p &amp;#61; p-&amp;gt;next;\n    p-&amp;gt;next &amp;#61; t;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//出队&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;DeQueue&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Queue head, &lt;span class=\"hljs-built_in\"&gt;Task&lt;/span&gt;* task)&lt;/span&gt;\n&lt;/span&gt;{\n    Queue t &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-built_in\"&gt;QueueEmpty&lt;/span&gt;(head))\n    {\n        t &amp;#61; head-&amp;gt;next;\n        head-&amp;gt;next &amp;#61; t-&amp;gt;next;\n        *task &amp;#61; t-&amp;gt;task;\n        &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(t);\n        t &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-comment\"&gt;//显示任务信息&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ShowTask&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-built_in\"&gt;Task&lt;/span&gt; t)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;id:%d,create_time:%d,start_time:%d,time_space:%d,end_time:%d\\n&amp;#34;&lt;/span&gt;, t.id, t.time,t.start,t.space,t.end);\n}\n\n\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    Queue head &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;Task&lt;/span&gt; ntask,dtask;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; totalTime, curTime &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, taskOrd &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, remainTime &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; lastTime &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; flag;&lt;span class=\"hljs-comment\"&gt;//决定是否生成任务&lt;/span&gt;\n    \n    &lt;span class=\"hljs-built_in\"&gt;srand&lt;/span&gt;((&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;)&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;(&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;));&lt;span class=\"hljs-comment\"&gt;//生成随机数种子&lt;/span&gt;\n    dtask.id &amp;#61; taskOrd;\n    &lt;span class=\"hljs-built_in\"&gt;InitQueue&lt;/span&gt;(&amp;amp;head);&lt;span class=\"hljs-comment\"&gt;//初始化队列&lt;/span&gt;\n\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;totalTime);\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (curTime &amp;lt; totalTime)\n        {\n            flag &amp;#61; &lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;() % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (flag &amp;amp;&amp;amp; (curTime - lastTime &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;))&lt;span class=\"hljs-comment\"&gt;//平均约每5分钟生成1个任务&lt;/span&gt;\n            {\n                lastTime &amp;#61; curTime;\n                taskOrd&amp;#43;&amp;#43;;\n                ntask.id &amp;#61; taskOrd;\n                ntask.time &amp;#61; curTime;\n                ntask.space &amp;#61; &lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;() % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//生成1-10的随机数&lt;/span&gt;\n                \n                &lt;span class=\"hljs-built_in\"&gt;EnQueue&lt;/span&gt;(head, ntask);\n            }\n            \n        }\n        \n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (remainTime &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span class=\"hljs-built_in\"&gt;QueueEmpty&lt;/span&gt;(head))\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (dtask.id !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                dtask.end &amp;#61; curTime;\n                &lt;span class=\"hljs-built_in\"&gt;ShowTask&lt;/span&gt;(dtask);\n            }\n            dtask.id &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            &lt;span class=\"hljs-built_in\"&gt;DeQueue&lt;/span&gt;(head, &amp;amp;dtask);\n            dtask.start &amp;#61; curTime;\n            remainTime &amp;#61; dtask.space;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(remainTime &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            remainTime--;\n        }\n        curTime&amp;#43;&amp;#43;;\n\n        &lt;span class=\"hljs-comment\"&gt;//退出循环&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (curTime &amp;gt; totalTime &amp;amp;&amp;amp; remainTime &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;QueueEmpty&lt;/span&gt;(head))\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        \n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["队列应用问题，随机排队问题解答", ["（1）编写代码实现链式队列或循环队列； （2）应用所实现的队列，设计并完成一个随机任务排队问题的求解。要求： ① 任务由任务号、任务产生时间、任务时长、任务开始处理和任务处理完成时间等信息组成； ② 任务由系统随机产生；任务产生后按产生的顺序排队等候处理。可设平均每5分钟（并非每隔5分名 钟）产生一个新任务，任务时长为1~10分钟范围内。 ③ 系统将依次处理排队等候的任务。 ④ 系统运行超过一定时间后将停止产生新任务； ⑤ 按任务处理顺序，输出处理后的任务信息。 （3）针对所选择的求解问题，编写测试程序完成设计任务的求解，并通过运行结果验证算法和程序设计 的正确性。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;要把算法与数据结构学好&amp;#xff0c;这俩很重要&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["怎么提升c语言的水平（已有一定基础）", ["大一新生，已经把c语言基础语法学完了，怎么去进一步提升呢？除了日常做题外，还有没有什么其他途径呢？", "需要转去把c++也了解一下吗？", "对竞赛也有意向，", "我目前挑选了几本书，“算法竞赛入门经典”，“挑战程序设计竞赛”，“深入浅出程序设计竞赛”，不知道哪个比较适合，可不可以给我一些意见。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n \n#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;math.h&amp;gt;\nint main() {\n    int stu[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    int max[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    int min[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    int level[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};;\n    // 输入成绩 在输入时判断输入的成绩是不是这课 是不是 比 max 高&amp;#xff0c;高就写到max里\n    // 判断 输入的成绩 的等级 并在level 里记录下来\n \n    // 遍历每个人\n    for ( int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ; i &amp;lt; &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt; ; i&amp;#43;&amp;#43; ) {\n        // 遍历 每门成绩\n        for ( int j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ; j &amp;lt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; ; j&amp;#43;&amp;#43; ) {\n            // 输入成绩\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;stu[i][j]);\n            // 判断是不是单科最高分\n            if ( max[j] &amp;lt; stu[i][j] ) {\n                max[j] &amp;#61; stu[i][j];\n            }\n            // 判断是不是单科最低分\n            if ( min[j] &amp;gt; stu[i][j] ) {\n                min[j] &amp;#61; stu[i][j];\n            }\n            // 判断等级\n            if ( stu[i][j] &amp;gt; &lt;span class=\"hljs-number\"&gt;90&lt;/span&gt; ) {\n                level[j][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#43;&amp;#43;;\n            } else if ( stu[i][j] &amp;gt; &lt;span class=\"hljs-number\"&gt;80&lt;/span&gt; ) {\n                level[j][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#43;&amp;#43;;\n            } else if ( stu[i][j] &amp;gt; &lt;span class=\"hljs-number\"&gt;70&lt;/span&gt; ) {\n                level[j][&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]&amp;#43;&amp;#43;;\n            } else if ( stu[i][j] &amp;gt; &lt;span class=\"hljs-number\"&gt;60&lt;/span&gt; ) {\n                level[j][&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]&amp;#43;&amp;#43;;\n            } else {\n                level[j][&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;]&amp;#43;&amp;#43;;\n            }\n        }\n    }\n \n    // 打印出来\n    \n    for( int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ; i &amp;lt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; ; i &amp;#43;&amp;#43; ){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n 最高分 : %d \\t &amp;#34;&lt;/span&gt;,max[i] );\n        for( int j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ; j &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; ; j&amp;#43;&amp;#43; ){\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c:%d人  &amp;#34;&lt;/span&gt;,(char)j&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;,level[i][j]);\n        }\n    }\n     for( int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ; i &amp;lt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; ; i &amp;#43;&amp;#43; ){\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n 最低分 : %d \\t &amp;#34;&lt;/span&gt;,min[i] );\n        for( int j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ; j &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; ; j&amp;#43;&amp;#43; ){\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c:%d人  &amp;#34;&lt;/span&gt;,(char)j&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;,level[i][j]);\n        }\n    }\n \n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["c语言管理成绩系统1", ["\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<math.h>", "\n", "int", " ", "main", "()", " ", "{\n    ", "int", " stu[", "30", "][", "6", "] = {", "0", "};\n    ", "int", " max[", "6", "] = {", "0", "};\n    ", "int", " level[", "6", "][", "5", "] = {", "0", "};;\n    ", "// 输入成绩 在输入时判断输入的成绩是不是这课 是不是 比 max 高，高就写到max里", "\n    ", "// 判断 输入的成绩 的等级 并在level 里记录下来", "\n \n    ", "// 遍历每个人", "\n    ", "for", " ( ", "int", " i = ", "0", " ; i < ", "20", " ; i++ ) {\n        ", "// 遍历 每门成绩", "\n        ", "for", " ( ", "int", " j = ", "0", " ; j < ", "6", " ; j++ ) {\n            ", "// 输入成绩", "\n            ", "scanf", "(", "\"%d\"", ", &stu[i][j]);\n            ", "// 判断是不是单科最高分", "\n            ", "if", " ( max[j] < stu[i][j] ) {\n                max[j] = stu[i][j];\n            }\n            ", "// 判断等级", "\n            ", "if", " ( stu[i][j] > ", "90", " ) {\n                level[j][", "0", "]++;\n            } ", "else", " ", "if", " ( stu[i][j] > ", "80", " ) {\n                level[j][", "1", "]++;\n            } ", "else", " ", "if", " ( stu[i][j] > ", "70", " ) {\n                level[j][", "2", "]++;\n            } ", "else", " ", "if", " ( stu[i][j] > ", "60", " ) {\n                level[j][", "3", "]++;\n            } ", "else", " {\n                level[j][", "4", "]++;\n            }\n        }\n    }\n \n    ", "// 打印出来", "\n    \n    ", "for", "( ", "int", " i = ", "0", " ; i < ", "6", " ; i ++ ){\n        ", "printf", "(", "\"\\n 最高分 : %d \\t \"", ",max[i] );\n        ", "for", "( ", "int", " j = ", "0", " ; j < ", "5", " ; j++ ){\n            ", "printf", "(", "\"%c:%d人  \"", ",(", "char", ")j+", "'A'", ",level[i][j]);\n        }\n    }\n \n}\n", "\n", "怎么把最低分加入进去 我该怎么改 请在我的源代码上改一下 谢谢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这是数学思路啊   我记得这个公式可以简化啊&amp;#xff0c;先用数学思路把x的值表达式求出来&amp;#xff0c;然后定义其他变量&amp;#xff0c;按照你的表达式公式&amp;#xff0c;输入就好&lt;/p&gt;\n&lt;p&gt;比如 x &amp;#61;a&amp;#43;b;&lt;br /&gt;你可以定义三个变量&amp;#xff0c;a,b,x 和一个char类型表示操作符d&lt;br /&gt;先输入a,b&lt;br /&gt;再输入字符&amp;#xff1a;d&lt;br /&gt;判断x的符号&amp;#xff0c;如果是&amp;#39;&amp;#43;&amp;#39;符号 &amp;#61;&amp;#61;》这里是你输入的&amp;#43;符号&lt;br /&gt;那么x&amp;#61;a&amp;#43;b;   &amp;#61;&amp;#61;&amp;#61;&amp;gt;这里是数学表达式&lt;/p&gt;\n&lt;p&gt;这是一般方法&amp;#xff0c;除此之外&amp;#xff0c;编译原理那套直接按你输入字符串去解析计算就复杂了&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["求解方程结果用流程图", ["（小白发问）怎么用c语言程序求解方程的根啊？", "像这个应该怎么设计算法，然后设计传统流程图啊？不懂"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt; &amp;#61; input(&lt;span class=\"hljs-string\"&gt;&amp;#39;请输入信用卡卡号(按回车键确定)&amp;#xff1a;&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;   &lt;span class=\"hljs-comment\"&gt;# 奇数位总和&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;)&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#43;&amp;#61; int(&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;[-i])\n\nb &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;   &lt;span class=\"hljs-comment\"&gt;# 偶数位总和&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; range(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;)&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;):\n    &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &amp;#61; int(&lt;span class=\"hljs-built_in\"&gt;number&lt;/span&gt;[-i])*&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; -&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;\n    b &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;&amp;#43;b) % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n    print(&lt;span class=\"hljs-string\"&gt;&amp;#39;校验通过&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n    print(&lt;span class=\"hljs-string\"&gt;&amp;#39;校验不通过&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["Python上机练习，字符类型及其操作", ["本关任务：编写一个能判断信用卡号是否合法的小程序。", "\n", "信用卡号必须通过lun算法进行校验，其过程：", "1、从卡号最后一位数字开始，逆向将奇数位(1、3、5等等)相加。", "2、从卡号倒数第二位数字开始，逆向将偶数位数字，先乘以2（如果乘积为两位数，则将其减去9），再求和。", "3、将奇数位总和加上偶数位总和，结果应该可以被10整除。", "例如，卡号是：5432123456788881", "逆向奇数位为 4 2 2 4 6 8 8 1 和 = 35", "逆向偶数位乘以2（有些要减去9）的结果：1 6 2 6 1 5 7 7，求和 = 35。", "最后 35 + 35 = 70 可以被10整除，认定校验通过。", "注意：信用卡的卡号长度是根据输入来确定的。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;算法与GUI无关&amp;#xff0c;在按钮的事件里面调用就可以了。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["java  GUI设计", ["要写一个java 程序，实现弹窗里输入数据，然后同时在弹窗里显示结果，请问算法的那部分程序应该和Swing容器那部分的程序写在一起吗？", "\n\n", "算法那部分用的事Scanner，哎，我TM一个文科专业的，熬这个java大作业要死要活的。", "\n\n", "我用的是NetBeans", "\n\n", "非常感谢非常感谢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;先按主键排序&amp;#xff0c;相同则按次主键&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;_PUKE&lt;/span&gt;\n{\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; huase;\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; p;\n}PUKE;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;(*f)&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(PUKE *p,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;sort&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(PUKE *p,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j;\n  PUKE t;\n  &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n-i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;j&amp;#43;&amp;#43;)\n    {\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(p[j].huase &amp;lt; p[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].huase)  || ((p[j].huase &amp;#61;&amp;#61; p[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].huase) &amp;amp;&amp;amp; (p[j].p &amp;lt; p[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].p)))\n      {\n        t &amp;#61; p[j];\n        p[j] &amp;#61; p[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n        p[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; t;\n      }\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n  PUKE puke[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,i,j;\n  &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n  &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;puke[i].huase,&amp;amp;puke[i].p);&lt;span class=\"hljs-comment\"&gt;//花色输入1,2,3,4表示黑、方、梅、杏即可&lt;/span&gt;\n  f fun &amp;#61; sort;\n  &lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(puke,n);\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["怎样设计一个先花色后数字的排序", [".设计算法并编写程序，将下列扑克牌按照先花色后点数的规则进行降序排列（要求使用\n函数指针）。\n花色桃方梅杏梅杏桃方桃\n点数K381024710J\n桃桃杏方梅桃杏梅方梅\n589426QKAQ"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;需要根据你的链表是否有头节点&amp;#xff08;哨兵节点&amp;#xff09;来处理。&lt;br /&gt;有头节点的链表逆序&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; datatype;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;link_node&lt;/span&gt; \n{\n    datatype info;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;link_node&lt;/span&gt;* next;\n}node,*linklist;\n&lt;span class=\"hljs-function\"&gt;linklist &lt;span class=\"hljs-title\"&gt;createList&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    datatype x;\n    linklist L;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; ch;\n    L &amp;#61; (linklist)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(node));\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (L &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;error&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    linklist n,p;\n    p &amp;#61; L;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入整数系列&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;); &lt;span class=\"hljs-comment\"&gt;//输入系列并以回车结束&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;scanf_s&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;x,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n        n &amp;#61; (linklist)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(node));\n        n-&amp;gt;info &amp;#61; x;\n        n-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n        p-&amp;gt;next &amp;#61; n;\n        p &amp;#61; n;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;( (ch&amp;#61;&lt;span class=\"hljs-built_in\"&gt;getchar&lt;/span&gt;()) &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; L;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(linklist head)&lt;/span&gt;\n&lt;/span&gt;{\n    linklist p;\n    p &amp;#61; head-&amp;gt;next;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(p)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,p-&amp;gt;info);\n        p &amp;#61; p-&amp;gt;next;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-comment\"&gt;//翻转&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;linklist &lt;span class=\"hljs-title\"&gt;reverse&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(linklist head)&lt;/span&gt;\n&lt;/span&gt;{\n    linklist p,t,k;\n    p &amp;#61; head-&amp;gt;next;\n    t &amp;#61; p-&amp;gt;next;\n    p-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(t)\n    {\n        k &amp;#61; t-&amp;gt;next;\n        head-&amp;gt;next &amp;#61; t;\n        t-&amp;gt;next &amp;#61; p;\n        p &amp;#61; t;\n        t &amp;#61; k;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; head;\n}\n&lt;span class=\"hljs-comment\"&gt;//释放内存&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;release&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(linklist head)&lt;/span&gt;\n&lt;/span&gt;{\n    linklist p;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(head)\n    {\n        p &amp;#61; head-&amp;gt;next;\n        &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(head);\n        head &amp;#61; p;\n    }\n}\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    linklist head &amp;#61; &lt;span class=\"hljs-built_in\"&gt;createList&lt;/span&gt;();\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(head);\n    head &amp;#61; &lt;span class=\"hljs-built_in\"&gt;reverse&lt;/span&gt;(head);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;逆序后&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(head);\n    &lt;span class=\"hljs-built_in\"&gt;release&lt;/span&gt;(head);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n \n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["这个链表程序要怎样正确实现", ["设计一个算法，通过遍历一趟，将链表中所有结点的链接方向逆转，仍利用原表的存储空间。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;img alt=\"\" height=\"4174\" src=\"https://img-ask.csdnimg.cn/upload/1624671557713.png\" width=\"859\" /&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["请运行一下程序，想要程序运行结果的截图", ["#include <stdio.h>", "\n#include <stdlib.h>", "\n#include <conio.h> ", "\n# define m 50", "\n ", "\nint no1;  //进程数", "\nint no2;  //资源数", "\nint r;", "\nint allocation[m][m],need[m][m],available[m],max[m][m]; ", "\nchar name1[m],name2[m];                               //定义全局变量", "\nvoid main()", "\n{", "\n    void check();", "\n    void print();", "\n    int i,j,p=0,q=0;", "\n    char c;", "\n    int request[m],allocation1[m][m],need1[m][m],available1[m];", "\n    printf(\"**********************************************\\n\");", "\n    printf(\"*           银行家算法的设计与实现           *\\n\");", "\n    printf(\"**********************************************\\n\");", "\n    printf(\"请输入进程总数:\\n\");", "\n    scanf(\"%d\",&no1);", "\n    printf(\"请输入资源种类数:\\n\");", "\n    scanf(\"%d\",&no2);", "\n    printf(\"请输入Max矩阵:\\n\");", "\n    for(i=0;i<no1;i++)", "\n        for(j=0;j<no2;j++)", "\n            scanf(\"%d\",&max[i][j]);   //输入已知进程最大资源需求量", "\n\n", "    printf(\"请输入Allocation矩阵:\\n\");", "\n    for(i=0;i<no1;i++)", "\n        for(j=0;j<no2;j++)", "\n            scanf(\"%d\",&allocation[i][j]);  //输入已知的进程已分配的资源数", "\n    ", "\n    for(i=0;i<no1;i++)", "\n        for(j=0;j<no2;j++)", "\n            need[i][j]=max[i][j]-allocation[i][j]; //根据输入的两个数组计算出need矩阵的值", "\n   ", "\n    printf(\"请输入Available矩阵\\n\");", "\n    for(i=0;i<no2;i++)", "\n        scanf(\"%d\",&available[i]);       //输入已知的可用资源数", "\n    ", "\n    print();  //输出已知条件", "\n    check();  //检测T0时刻已知条件的安全状态", "\n\n", "    if(r==1)  //如果安全则执行以下代码", "\n    {", "\n        do{ ", "\nq=0;", "\n            p=0;", "\nprintf(\"\\n请输入请求资源的进程号(0~4)：\\n\");", "\n            for(j=0;j<=10;j++)", "\n            {", "\n                scanf(\"%d\",&i);", "\n                if(i>=no1)", "\n                {", "\n                    printf(\"输入错误，请重新输入：\\n\");", "\n                    continue;      ", "\n                }", "\n                else break;", "\n            }", "\n            printf(\"\\n请输入该进程所请求的资源数request[j]:\\n\");", "\n            for(j=0;j<no2;j++)", "\n                scanf(\"%d\",&request[j]);", "\n            for(j=0;j<no2;j++)", "\n                if(request[j]>need[i][j]) p=1;  ", "\n                //判断请求是否超过该进程所需要的资源数", "\n                if(p)", "\n                    printf(\"请求资源超过该进程资源需求量，请求失败！\\n\");", "\n                else", "\n                {", "\n                    for(j=0;j<no2;j++)", "\n                    if(request[j]>available[j]) q=1;  ", "\n//判断请求是否超过可用资源数", "\n                    if(q) ", "\n                        printf(\"没有做够的资源分配，请求失败！\\n\");", "\n\n", "                    else                             //请求满足条件", "\n                    {", "\n                        for(j=0;j<no2;j++)  ", "\n                        {", "\n                            available1[j]=available[j];  ", "\n                            allocation1[i][j]=allocation[i][j];", "\n                            need1[i][j]=need[i][j];    ", "\n                    //保存原已分配的资源数，仍需要的资源数和可用的资源数", "\n\n", "                            available[j]=available[j]-request[j];  ", "\n                            allocation[i][j]+=request[j];", "\n                            need[i][j]=need[i][j]-request[j];", "\n                            //系统尝试把资源分配给请求的进程", "\n                        }", "\n                        print();", "\n                        check();     //检测分配后的安全性", "\n                        if(r==0)   //如果分配后系统不安全", "\n                        {", "\n                            for(j=0;j<no2;j++)", "\n                            {", "\n                                available[j]=available1[j];  ", "\n                                allocation[i][j]=allocation1[i][j];", "\n                                need[i][j]=need1[i][j];", "\n                    //还原已分配的资源数，仍需要的资源数和可用的资源数", "\n                            }", "\n                            printf(\"返回分配前资源数\\n\");", "\n                            print();", "\n                        }", "\n                    }", "\n                }printf(\"\\n你还要继续分配吗？Y or N ?\\n\");   ", "\n                //判断是否继续进行资源分配", "\n                    c=getche();", "\n        }while(c=='y'||c=='Y');", "\n    }", "\n\n", "}", "\n\n", "void check()   //安全算法函数", "\n{", "\n    int k,f,v=0,i,j;", "\n    int work[m],a[m];", "\n    bool finish[m];", "\n    r=1;", "\n    for(i=0;i<no1;i++)", "\n        finish[i]=false;   // 初始化进程均没得到足够资源数并完成", "\n    for(i=0;i<no2;i++)", "\n        work[i]=available[i];//work[i]表示可提供进程继续运行的各类资源数", "\n    k=no1;", "\n    do{", "\n        for(i=0;i<no1;i++)", "\n        {", "\n            if(finish[i]==false)", "\n            {", "\n                f=1;", "\n                for(j=0;j<no2;j++)", "\n                    if(need[i][j]>work[j])", "\n                        f=0;", "\n                    if(f==1)      //找到还没有完成且需求数小于可提供进程继续运行的资源数的进程", "\n                    {", "\n                        finish[i]=true;", "\n                        a[v++]=i;   //记录安全序列号", "\n                        for(j=0;j<no2;j++)", "\n                            work[j]+=allocation[i][j];  //释放该进程已分配的资源", "\n                    }", "\n            }", "\n        }", "\n        k--;      //每完成一个进程分配，未完成的进程数就减1", "\n    }while(k>0);", "\n    f=1;", "\n    for(i=0;i<no1;i++)    //判断是否所有的进程都完成", "\n    {", "\n        if(finish[i]==false)   ", "\n        {", "\n            f=0;", "\n            break;", "\n        }", "\n    }", "\n    if(f==0)       //若有进程没完成，则为不安全状态", "\n    {", "\n        printf(\"系统处在不安全状态！\");", "\n        r=0;", "\n    }", "\n    else", "\n    {", "\n        printf(\"\\n系统当前为安全状态，安全序列为：\\n\");", "\n        for(i=0;i<no1;i++)", "\n            printf(\"p%d  \",a[i]);  //输出安全序列", "\n    }", "\n\n", "}", "\n\n", "void print()  //输出函数", "\n{", "\n    int i,j;", "\n    printf(\"\\n\");", "\n    printf(\"*************此时刻资源分配情况*********************\\n\");", "\n    printf(\"进程名/号   |   Max     | Allocation  |     Need    |\\n\");", "\n    for (i = 0; i < no1; i++)    ", "\n        {", "\n            printf(\"   p%d/%d      \",i,i);", "\n                ", "\n             for (j = 0; j < no2; j++) ", "\n                {printf(\"%d   \",max[i][j]);}", "\n\n", "            for (j = 0; j < no2; j++) ", "\n                {printf(\" %d   \",allocation[i][j]);}", "\n            ", "\n            for (j = 0; j < no2; j++)", "\n                {printf(\" %d   \",need[i][j]);}", "\n    ", "\n            printf(\"\\n\");", "\n        }", "\n        printf(\"\\n\");", "\n        printf(\"各类资源可利用的资源数为:\");", "\n        for (j = 0; j < no2; j++) ", "\n            {printf(\" %d\",available[j]);}", "\n        printf(\"\\n\");", "\n}", "\n\n", "\n "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;参考一下&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;\n#include&amp;lt;time.h.&amp;gt;\n#include&amp;lt;stdlib.h&amp;gt;\nvoid menu()//菜单\n{\n    printf(&amp;#34;*********************\\n&amp;#34;);\n    printf(&amp;#34;****1.play 0.exit****\\n&amp;#34;);//选择“1”表示“玩游戏”\n    printf(&amp;#34;*********************\\n&amp;#34;);//选择“0”表示“退出”\n}\nvoid play_game()//玩游戏\n{\n    int rand_num &amp;#61; rand() % 100;//随机产生0&amp;#xff5e;99范围内的整数\n    int tmp &amp;#61; 0;\n    while (1)\n    {\n        printf(&amp;#34;请输入你猜的数字&amp;#xff1a;&amp;#34;);\n        scanf(&amp;#34;%d&amp;#34;, &amp;amp;tmp);\n        if (tmp &amp;#61;&amp;#61; rand_num)\n        {\n            printf(&amp;#34;猜对了\\n&amp;#34;);\n            break;\n        }\n        else if (tmp &amp;gt; rand_num)\n        {\n            printf(&amp;#34;猜大了\\n&amp;#34;);\n        }\n        else\n        {\n            printf(&amp;#34;猜小了\\n&amp;#34;);\n        }\n    }\n}\nint main()\n{\n    int input &amp;#61; 0;\n    srand((unsigned int)time(NULL));//srand是随机数发生器的初始化函数\n    //为了防止每次玩游戏时随机产生的数字重复&amp;#xff0c;常使用time函数获得系统时间以初始化\n    do\n    {\n        menu();\n        printf(&amp;#34;请选择&amp;#xff1a;&amp;#34;);\n        scanf(&amp;#34;%d&amp;#34;, &amp;amp;input);\n        switch (input)\n        {\n        case 1:\n            play_game();\n            break;\n        case 0:\n            exit(EXIT_SUCCESS);\n            break;\n        default://当输入菜单中不存在选项时&amp;#xff0c;提醒玩家“选择错误”\n            printf(&amp;#34;选择错误.\\n&amp;#34;);\n            break;\n        }\n    } while (input);\n    system(&amp;#34;pause&amp;#34;);\n    return 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["c语言猜数字问题求解决", ["一、问题描述：该游戏可以由程序随机产生或由用户输入四个0到9之间的数字，且不重复。玩游戏者通过游戏提示输入八次来匹配上面所输入的数字。A表示位置正确且数字正确，B表示数字正确而位置不正确。二、功能要求：本游戏显示这样的菜单：（1） 随机产生数据（2） 用户输入数据（3） 退出游戏游戏成功与否都能返回主菜单三、算法提示：数据结构：数组用简单的程序设计方法四、测试数据：测试数据： 3792第一次输入： 12340A2B第二次输入： 56780A1B第三次输入： 08670A1B第四次输入： 97861A1B第五次输入： 17942A0B第六次输入： 27932A2B第七次输入： 37924A0B游戏成功！！！五、其它：对该系统有兴趣的同学可以在实现系统基本功能后，完善系统的其它功能，如：破记录功能，若你所匹配的次数小于纪录保持者，则为破纪录。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;iostream&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;cstring&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;algorithm&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;vector&amp;gt;\n\nusing namespace std;\n\n&lt;span class=\"hljs-comment\"&gt;// 类An层&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;// 地球类&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Earth {\npublic:\n  &lt;span class=\"hljs-constructor\"&gt;Earth(&lt;span class=\"hljs-params\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;radius&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;population&lt;/span&gt;)&lt;/span&gt; : radius&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;radius&lt;/span&gt;)&lt;/span&gt;, population&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;population&lt;/span&gt;)&lt;/span&gt; {}\n  void &lt;span class=\"hljs-constructor\"&gt;SetPopulation(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;population&lt;/span&gt;)&lt;/span&gt; { population_ &amp;#61; population; }\n  void &lt;span class=\"hljs-constructor\"&gt;SetRadius(&lt;span class=\"hljs-params\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;radius&lt;/span&gt;)&lt;/span&gt; { radius_ &amp;#61; radius; }\n  double &lt;span class=\"hljs-constructor\"&gt;GetRadius()&lt;/span&gt; { return radius_; }\n  &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetPopulation()&lt;/span&gt; { return population_; }\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n  double radius_;\n  &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; population_;\n};\n\n&lt;span class=\"hljs-comment\"&gt;// 太阳系类&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; SolarSystem {\npublic:\n  &lt;span class=\"hljs-constructor\"&gt;SolarSystem(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;number_of_planets&lt;/span&gt;)&lt;/span&gt; : name&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt;, number&lt;span class=\"hljs-constructor\"&gt;_of_planets_(&lt;span class=\"hljs-params\"&gt;number_of_planets&lt;/span&gt;)&lt;/span&gt; {}\n  void &lt;span class=\"hljs-constructor\"&gt;SetName(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt; { name_ &amp;#61; name; }\n  void &lt;span class=\"hljs-constructor\"&gt;SetNumberOfPlanets(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;number_of_planets&lt;/span&gt;)&lt;/span&gt; { number_of_planets_ &amp;#61; number_of_planets; }\n  &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; { return name_; }\n  &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetNumberOfPlanets()&lt;/span&gt; { return number_of_planets_; }\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n  &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; name_;\n  &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; number_of_planets_;\n};\n\n&lt;span class=\"hljs-comment\"&gt;// 类Bn层&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;// 动物类&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Animal {\npublic:\n  &lt;span class=\"hljs-constructor\"&gt;Animal(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;habitat&lt;/span&gt;)&lt;/span&gt; : name&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt;, habitat&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;habitat&lt;/span&gt;)&lt;/span&gt; {}\n  void &lt;span class=\"hljs-constructor\"&gt;SetName(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt; { name_ &amp;#61; name; }\n  void &lt;span class=\"hljs-constructor\"&gt;SetHabitat(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;habitat&lt;/span&gt;)&lt;/span&gt; { habitat_ &amp;#61; habitat; }\n  &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; { return name_; }\n  &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetHabitat()&lt;/span&gt; { return habitat_; }\n  &lt;span class=\"hljs-keyword\"&gt;virtual&lt;/span&gt; void &lt;span class=\"hljs-constructor\"&gt;MakeSound()&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 纯虚函数&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n  &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; name_;\n  &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; habitat_;\n};\n\n&lt;span class=\"hljs-comment\"&gt;// 人类类&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Human : public Animal {\npublic:\n  &lt;span class=\"hljs-constructor\"&gt;Human(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;habitat&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;language&lt;/span&gt;)&lt;/span&gt; : &lt;span class=\"hljs-constructor\"&gt;Animal(&lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;habitat&lt;/span&gt;)&lt;/span&gt;, language&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;language&lt;/span&gt;)&lt;/span&gt; {}\n  void &lt;span class=\"hljs-constructor\"&gt;SetLanguage(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;language&lt;/span&gt;)&lt;/span&gt; { language_ &amp;#61; language; }\n  &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetLanguage()&lt;/span&gt; { return language_; }\n  void &lt;span class=\"hljs-constructor\"&gt;MakeSound()&lt;/span&gt; { cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Hello, my name is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; and I speak &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; language_ &amp;lt;&amp;lt; endl; }\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n  &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; language_;\n};\n\n&lt;span class=\"hljs-comment\"&gt;// 鱼类&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Fish : public Animal {\npublic:\n  &lt;span class=\"hljs-constructor\"&gt;Fish(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;habitat&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;color&lt;/span&gt;)&lt;/span&gt; : &lt;span class=\"hljs-constructor\"&gt;Animal(&lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;habitat&lt;/span&gt;)&lt;/span&gt;, color&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;color&lt;/span&gt;)&lt;/span&gt; {}\n  void &lt;span class=\"hljs-constructor\"&gt;SetColor(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;color&lt;/span&gt;)&lt;/span&gt; { color_ &amp;#61; color; }\n  &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetColor()&lt;/span&gt; { return color_; }\n  void &lt;span class=\"hljs-constructor\"&gt;MakeSound()&lt;/span&gt; { cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Blub, blub&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl; }\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n  &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; color_;\n};\n\n&lt;span class=\"hljs-comment\"&gt;// 其他类Bn&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;// 植物类&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Plant {\npublic:\n&lt;span class=\"hljs-constructor\"&gt;Plant(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;habitat&lt;/span&gt;)&lt;/span&gt; : name&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt;, habitat&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;habitat&lt;/span&gt;)&lt;/span&gt; {}\nvoid &lt;span class=\"hljs-constructor\"&gt;SetName(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt; { name_ &amp;#61; name; }\nvoid &lt;span class=\"hljs-constructor\"&gt;SetHabitat(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;habitat&lt;/span&gt;)&lt;/span&gt; { habitat_ &amp;#61; habitat; }\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; { return name_; }\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetHabitat()&lt;/span&gt; { return habitat_; }\n&lt;span class=\"hljs-keyword\"&gt;virtual&lt;/span&gt; void &lt;span class=\"hljs-constructor\"&gt;Grow()&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 纯虚函数&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; name_;\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; habitat_;\n};\n\n&lt;span class=\"hljs-comment\"&gt;// 花类&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Flower : public Plant {\npublic:\n&lt;span class=\"hljs-constructor\"&gt;Flower(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;habitat&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;color&lt;/span&gt;)&lt;/span&gt; : &lt;span class=\"hljs-constructor\"&gt;Plant(&lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;habitat&lt;/span&gt;)&lt;/span&gt;, color&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;color&lt;/span&gt;)&lt;/span&gt; {}\nvoid &lt;span class=\"hljs-constructor\"&gt;SetColor(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;color&lt;/span&gt;)&lt;/span&gt; { color_ &amp;#61; color; }\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetColor()&lt;/span&gt; { return color_; }\nvoid &lt;span class=\"hljs-constructor\"&gt;Grow()&lt;/span&gt; { cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;I am a &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; color_ &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; flower and I am growing in the &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-constructor\"&gt;GetHabitat()&lt;/span&gt; &amp;lt;&amp;lt; endl; }\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; color_;\n};\n\n&lt;span class=\"hljs-comment\"&gt;// 树类&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Tree : public Plant {\npublic:\n&lt;span class=\"hljs-constructor\"&gt;Tree(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;habitat&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;age&lt;/span&gt;)&lt;/span&gt; : &lt;span class=\"hljs-constructor\"&gt;Plant(&lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;habitat&lt;/span&gt;)&lt;/span&gt;, age&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;age&lt;/span&gt;)&lt;/span&gt; {}\nvoid &lt;span class=\"hljs-constructor\"&gt;SetAge(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;age&lt;/span&gt;)&lt;/span&gt; { age_ &amp;#61; age; }\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetAge()&lt;/span&gt; { return age_; }\nvoid &lt;span class=\"hljs-constructor\"&gt;Grow()&lt;/span&gt; { cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;I am a &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; and I am &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; age_ &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; years old&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl; }\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; age_;\n};\n\n&lt;span class=\"hljs-comment\"&gt;// 类Cn层&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;// 城市类&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; City {\npublic:\n&lt;span class=\"hljs-constructor\"&gt;City(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;population&lt;/span&gt;)&lt;/span&gt; : name&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt;, population&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;population&lt;/span&gt;)&lt;/span&gt; {}\nvoid &lt;span class=\"hljs-constructor\"&gt;SetName(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt; { name_ &amp;#61; name; }\nvoid &lt;span class=\"hljs-constructor\"&gt;SetPopulation(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;population&lt;/span&gt;)&lt;/span&gt; { population_ &amp;#61; population; }\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; { return name_; }\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetPopulation()&lt;/span&gt; { return population_; }\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; name_;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; population_;\n};\n\n&lt;span class=\"hljs-comment\"&gt;// 国家类&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Country {\npublic:\n&lt;span class=\"hljs-constructor\"&gt;Country(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;population&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;vector&lt;/span&gt;&amp;lt;City&amp;gt; &lt;span class=\"hljs-params\"&gt;cities&lt;/span&gt;)&lt;/span&gt; : name&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt;, population&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;population&lt;/span&gt;)&lt;/span&gt;, cities&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;cities&lt;/span&gt;)&lt;/span&gt; {}\nvoid &lt;span class=\"hljs-constructor\"&gt;SetName(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt; { name_ &amp;#61; name; }\nvoid &lt;span class=\"hljs-constructor\"&gt;SetPopulation(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;population&lt;/span&gt;)&lt;/span&gt; { population_ &amp;#61; population; }\nvoid &lt;span class=\"hljs-constructor\"&gt;SetCities(&lt;span class=\"hljs-params\"&gt;vector&lt;/span&gt;&amp;lt;City&amp;gt; &lt;span class=\"hljs-params\"&gt;cities&lt;/span&gt;)&lt;/span&gt; { cities_ &amp;#61; cities; }\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; { return name_; }\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetPopulation()&lt;/span&gt; { return population_; }\nvector&amp;lt;City&amp;gt; &lt;span class=\"hljs-constructor\"&gt;GetCities()&lt;/span&gt; { return cities_; }\nvoid &lt;span class=\"hljs-constructor\"&gt;SortCitiesByPopulation()&lt;/span&gt; {\nsort(cities_.&lt;span class=\"hljs-keyword\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;, cities_.&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;, &lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;(const City&amp;amp; c1, const City&amp;amp; c2) { return c1.&lt;span class=\"hljs-constructor\"&gt;GetPopulation()&lt;/span&gt; &amp;lt; c2.&lt;span class=\"hljs-constructor\"&gt;GetPopulation()&lt;/span&gt;; });\n}\nCity &lt;span class=\"hljs-constructor\"&gt;GetMostPopulatedCity()&lt;/span&gt; {\nCity most_populated_city &amp;#61; cities_&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (const auto&amp;amp; city: cities_) {\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (city.&lt;span class=\"hljs-constructor\"&gt;GetPopulation()&lt;/span&gt; &amp;gt; most_populated_city.&lt;span class=\"hljs-constructor\"&gt;GetPopulation()&lt;/span&gt;) {\nmost_populated_city &amp;#61; city;\n}\n}\nreturn most_populated_city;\n}\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; name_;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; population_;\nvector&amp;lt;City&amp;gt; cities_;\n};\n&lt;span class=\"hljs-comment\"&gt;// 类Dn层&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;// 太空站类&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; SpaceStation {\npublic:\n&lt;span class=\"hljs-constructor\"&gt;SpaceStation(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;number_of_astronauts&lt;/span&gt;)&lt;/span&gt; : name&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt;, number&lt;span class=\"hljs-constructor\"&gt;_of_astronauts_(&lt;span class=\"hljs-params\"&gt;number_of_astronauts&lt;/span&gt;)&lt;/span&gt; {}\nvoid &lt;span class=\"hljs-constructor\"&gt;SetName(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt; { name_ &amp;#61; name; }\nvoid &lt;span class=\"hljs-constructor\"&gt;SetNumberOfAstronauts(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;number_of_astronauts&lt;/span&gt;)&lt;/span&gt; { number_of_astronauts_ &amp;#61; number_of_astronauts; }\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; { return name_; }\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetNumberOfAstronauts()&lt;/span&gt; { return number_of_astronauts_; }\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; name_;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; number_of_astronauts_;\n};\n\n&lt;span class=\"hljs-comment\"&gt;// 飞船类&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Spaceship {\npublic:\n&lt;span class=\"hljs-constructor\"&gt;Spaceship(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;number_of_astronauts&lt;/span&gt;)&lt;/span&gt; : name&lt;span class=\"hljs-constructor\"&gt;_(&lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt;, number&lt;span class=\"hljs-constructor\"&gt;_of_astronauts_(&lt;span class=\"hljs-params\"&gt;number_of_astronauts&lt;/span&gt;)&lt;/span&gt; {}\nvoid &lt;span class=\"hljs-constructor\"&gt;SetName(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;)&lt;/span&gt; { name_ &amp;#61; name; }\nvoid &lt;span class=\"hljs-constructor\"&gt;SetNumberOfAstronauts(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;number_of_astronauts&lt;/span&gt;)&lt;/span&gt; { number_of_astronauts_ &amp;#61; number_of_astronauts; }\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; { return name_; }\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;GetNumberOfAstronauts()&lt;/span&gt; { return number_of_astronauts_; }\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; name_;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; number_of_astronauts_;\n};\n\n&lt;span class=\"hljs-comment\"&gt;// 主函数&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; {\n&lt;span class=\"hljs-comment\"&gt;// 创建地球对象&lt;/span&gt;\nEarth earth(&lt;span class=\"hljs-number\"&gt;6371.0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7000000000&lt;/span&gt;);\ncout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;The radius of Earth is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; earth.&lt;span class=\"hljs-constructor\"&gt;GetRadius()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; km and the population is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; earth.&lt;span class=\"hljs-constructor\"&gt;GetPopulation()&lt;/span&gt; &amp;lt;&amp;lt; endl;\nearth.&lt;span class=\"hljs-constructor\"&gt;SetPopulation(7000000001)&lt;/span&gt;;\ncout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;The radius of Earth is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; earth.&lt;span class=\"hljs-constructor\"&gt;GetRadius()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; km and the population is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; earth.&lt;span class=\"hljs-constructor\"&gt;GetPopulation()&lt;/span&gt; &amp;lt;&amp;lt; endl;\n\n&lt;span class=\"hljs-comment\"&gt;// 创建太阳系对象&lt;/span&gt;\nSolarSystem solar&lt;span class=\"hljs-constructor\"&gt;_system(&lt;span class=\"hljs-string\"&gt;&amp;#34;Solar System&amp;#34;&lt;/span&gt;, 8)&lt;/span&gt;;\ncout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;The name of the solar system is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; solar_system.&lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; and it has &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; solar_system.&lt;span class=\"hljs-constructor\"&gt;GetNumberOfPlanets()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; planets&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\nsolar_system.&lt;span class=\"hljs-constructor\"&gt;SetName(&lt;span class=\"hljs-string\"&gt;&amp;#34;Milky Way&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\ncout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;The name of the solar system is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; solar_system.GetName\n\n&lt;span class=\"hljs-comment\"&gt;// 创建图片对象&lt;/span&gt;\nImage image(&lt;span class=\"hljs-string\"&gt;&amp;#34;Sunset&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;JPEG&amp;#34;&lt;/span&gt;);\ncout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;The name of the image is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; image.&lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; and the format is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; image.&lt;span class=\"hljs-constructor\"&gt;GetFormat()&lt;/span&gt; &amp;lt;&amp;lt; endl;\nimage.&lt;span class=\"hljs-constructor\"&gt;SetName(&lt;span class=\"hljs-string\"&gt;&amp;#34;Sunrise&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\nimage.&lt;span class=\"hljs-constructor\"&gt;SetFormat(&lt;span class=\"hljs-string\"&gt;&amp;#34;PNG&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\ncout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;The name of the image is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; image.&lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; and the format is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; image.&lt;span class=\"hljs-constructor\"&gt;GetFormat()&lt;/span&gt; &amp;lt;&amp;lt; endl;\n\n&lt;span class=\"hljs-comment\"&gt;// 创建视频对象&lt;/span&gt;\nVideo video(&lt;span class=\"hljs-string\"&gt;&amp;#34;Documentary&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3600&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;MP4&amp;#34;&lt;/span&gt;);\ncout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;The name of the video is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; video.&lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; and the duration is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; video.&lt;span class=\"hljs-constructor\"&gt;GetDuration()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; seconds&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\nvideo.&lt;span class=\"hljs-constructor\"&gt;SetName(&lt;span class=\"hljs-string\"&gt;&amp;#34;Movie&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\nvideo.&lt;span class=\"hljs-constructor\"&gt;SetDuration(7200)&lt;/span&gt;;\ncout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;The name of the video is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; video.&lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; and the duration is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; video.&lt;span class=\"hljs-constructor\"&gt;GetDuration()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; seconds&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n\n&lt;span class=\"hljs-comment\"&gt;// 创建音乐对象&lt;/span&gt;\nMusic music(&lt;span class=\"hljs-string\"&gt;&amp;#34;Song&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;180&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;MP3&amp;#34;&lt;/span&gt;);\ncout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;The name of the music is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; music.&lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; and the duration is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; music.&lt;span class=\"hljs-constructor\"&gt;GetDuration()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; seconds&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\nmusic.&lt;span class=\"hljs-constructor\"&gt;SetName(&lt;span class=\"hljs-string\"&gt;&amp;#34;Album&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\nmusic.&lt;span class=\"hljs-constructor\"&gt;SetDuration(3600)&lt;/span&gt;;\ncout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;The name of the music is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; music.&lt;span class=\"hljs-constructor\"&gt;GetName()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; and the duration is &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; music.&lt;span class=\"hljs-constructor\"&gt;GetDuration()&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; seconds&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n\n&lt;span class=\"hljs-comment\"&gt;// 创建时钟对象&lt;/span&gt;\nClock clock;\nclock.timer&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\nreturn &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["如何编写一个三层类函数并调用", ["结合自身已经掌握的面向对象程序设计知识、C++算法知识、数学知识、物理知识、美术知识等，编写一个“MYWORLD”程序。", "要求：（1）大致按照如下图的架构设计程序，其中类名只是个代号，大家需结合“见名知意”的原则从新命名；", "\n", "（2）需满足纵向3层类，类An层至少需有3个类，类Bn层至少需有9个类的要求，让“MYWORLD”这个世界多姿多彩；", "（3）需使用到算法，如：排序、求最大值、交换值等，可结合自身数学和物理知识，丰富程序的功能；", "（4）尽可能的在程序中使用到如cout、cin、for、if、while、switch、构造函数、多态等所学到的知识。"]], "Tag": "程序设计"}
{"Answer": "http://blog.csdn.net/fduan/article/details/7837444\r\nhttp://blog.sina.com.cn/s/blog_686d0fb001012qmh.html", "Konwledge_Point": "算法与程序设计", "Question": ["电工4课程作业2：哈夫曼编码实验", ["1) 问题描述设某编码系统共有n个字符，使用频率分别为{w1, w2, …, wn}，设计一个不等长的编码方案，使得该编码系统的空间效率最好。2) 基本要求(1) 设计数据结构；(2) 设计编码算法；(3) 分析时间复杂度和空间复杂度。"]], "Tag": "程序设计"}
{"Answer": "http://www.lxway.com/4084220604.htm", "Konwledge_Point": "算法与程序设计", "Question": ["统计若干个大型英文txt文件中所有单词出现的次数，并输出出现次数最多的前10个单词及其出现次数", ["统计若干个大型英文txt文件（如英文小说）中所有单词出现的次数，并输出出现次数最多的前10个单词及其出现次数。", "\n\n", "单词字符定义为大小写字母、数字和下划线，", "\n其他字符均看作单词分隔符；", "\n自行设计合适的数据结构及相关算法；", "\n程序运行结束时将txt文件名以及统计结果写入磁盘； ", "\n每次程序启动时（除了首次运行）将上次的结果读入内存、显示；", "\n能根据用户选择实现重新初始化、查找某单词出现次数、追加统计、退出等功能。"]], "Tag": "程序设计"}
{"Answer": "#include&lt;stdio.h&gt;\r\nint main()\r\n{\r\n    double a,n,m,x;\r\n    scanf(\"%lf\",&amp;a);\r\n    n=0;\r\n    m=a;\r\n    while(1)  /*用n，m反复迭代，每次用n，m的平均值逼近*/\r\n    {\r\n        x=(n+m)/2;\r\n        if(a&gt;0)\r\n        {\r\n        if(x*x*x&lt;=a)\r\n        {\r\n            n=x;\r\n        }\r\n        else\r\n            m=x;\r\n        }\r\n        else\r\n        {\r\n            if(x*x*x&lt;=a)\r\n                m=x;\r\n            else\r\n                n=x;\r\n\r\n        }\r\n        if((x*x*x-a&lt;=0.000001)&amp;&amp;(x*x*x-a&gt;=-0.000001))/*设置迭代的精度*/\r\n           break;\r\n\r\n\r\n    }\r\n    printf(\"%lf  %lf\",x,x*x*x);\r\n}\r\n求赞", "Konwledge_Point": "算法与程序设计", "Question": ["一道C语言编程题目求解答！", ["键盘输入一个实数a，输出它的立方根。请自行设计算法编写程序，不允许调用pow函数。", "\n假设a的立方根为x，则x3=a，问题转化求一元高次方程x3-a=0的解", "\n迭代法！！！！！！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;malloc.h&amp;gt;\n\ntypedef struct Node {&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;// 链表节点结构&lt;/span&gt;\n    int    &lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;;\n    struct Node* next;\n}Node, * LinkList;\nvoid destroyNodes(LinkList L)\n{\n    Node *pL &amp;#61; NULL;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(L){\n        pL &amp;#61; L;\n        L &amp;#61; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pL&lt;/span&gt;-&amp;gt;&lt;/span&gt;next;\n        free(pL);\n    }\n}\nvoid show(LinkList L)&lt;span class=\"hljs-comment\"&gt;// 输出单链表&lt;/span&gt;\n{\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (L &amp;#61;&amp;#61; NULL || L-&amp;gt;&lt;/span&gt;next &amp;#61;&amp;#61; NULL) return;\n    N&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;ode&lt;/span&gt;* p &amp;#61; L-&amp;gt;&lt;/span&gt;next;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p) {\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;printf&lt;/span&gt;(p &amp;#61;&amp;#61; L-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt; ? &amp;#34;%d&amp;#34; : &amp;#34;-&amp;gt;&lt;/span&gt;%&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;d&lt;/span&gt;&amp;#34;, p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;);\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt; &amp;#61; p-&amp;gt;&lt;/span&gt;next;\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\nvoid Split(LinkList L1, LinkList* L2)&lt;span class=\"hljs-comment\"&gt;//单链表分离&lt;/span&gt;\n{\n    Node* p &amp;#61; NULL, * pL1 &amp;#61; L1, *pL2 &amp;#61; NULL;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;while&lt;/span&gt; (pL1-&amp;gt;&lt;/span&gt;next) {\n          &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (pL1-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt; % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n              &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((*L2) &amp;#61;&amp;#61; NULL){\n                  (*L2) &amp;#61; (Node*)malloc(sizeof(Node));\n                  (*L2)-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt; &amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                  (*L2)-&amp;gt;next &amp;#61; NULL;\n                  pL2 &amp;#61; (*L2);\n              }\n              &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt; &amp;#61; pL1-&amp;gt;&lt;/span&gt;next;\n              &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pL1&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt; &amp;#61; p-&amp;gt;&lt;/span&gt;next;\n              &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; NULL;\n              &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pL2&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; p;\n              pL2 &amp;#61; p;\n          }\n          &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n              &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pL1&lt;/span&gt; &amp;#61; pL1-&amp;gt;&lt;/span&gt;next;\n          }\n    }\n}\n&lt;span class=\"hljs-comment\"&gt;// 创建链表&lt;/span&gt;\nvoid createListFromHead(LinkList* L)\n{\n    Node* pL;\n    int n;\n    (*L) &amp;#61; (Node*)malloc(sizeof(Node));&lt;span class=\"hljs-comment\"&gt;// 创建头结点&lt;/span&gt;\n    (*L)-&amp;gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt; &amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    (*L)-&amp;gt;next &amp;#61; NULL;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) { &lt;span class=\"hljs-comment\"&gt;// 生成链表&lt;/span&gt;\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)  break;\n        Node* p &amp;#61; (Node*)malloc(sizeof(Node));\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; NULL;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt; &amp;#61; n;\n        pL &amp;#61; (*L);\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;while&lt;/span&gt; (pL-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt; &amp;amp;&amp;amp; pL-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;data&lt;/span&gt; &amp;lt; p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt;)\n             &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pL&lt;/span&gt; &amp;#61; pL-&amp;gt;&lt;/span&gt;next;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt; &amp;#61; pL-&amp;gt;&lt;/span&gt;next;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;pL&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; p;\n    }\n}\nint main()\n{\n    LinkList L1 &amp;#61; NULL, L2 &amp;#61; NULL;\n    createListFromHead(&amp;amp;L1);\n    show(L1);\n    Split(L1, &amp;amp;L2);\n    show(L1);\n    show(L2);\n    destroyNodes(L1);\n    destroyNodes(L2);\n\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["单链表输出偶数元素和剩余元素", ["【问题描述】编写程序，要求完成以下需求：", "1.输入若干正整数，按从小到大次序建立1个带头结点单链表并输出该有序链表", "2.程序中要求设计一个实现单链表分离算法的Split函数，将原单链表中值为偶数的结点分离出来形成一个新单链表，新单链表中头结点重新申请，其余结点来自原链表，分离后，原链表中只剩非偶数值所在结点", "3.最后显示2个单链表，并在程序退出前销毁单链表。", "要求Split算法时间复杂性达到O（n）,程序不可存在内存溢出。", "【输入格式】:", "若干正整数，0结束（0非链表元素）", "【输出格式】:", "每个单链表输出占一行，元素间用分隔符->分隔；初始单链表、剩余元素单链表、偶数元素单链表，共3行。", "【输入样例】:", "100 2 3 50 2 1 5 8 0", "【输出样例】:", "1->2->2->3->5->8->50->100", "1->3->5", "2->2->8->50->100"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;挺有意思&amp;#xff0c;其实主要是写G(c,s)函数&amp;#xff0c;可以从字符串右侧开始统计字符个数&amp;#xff0c;定义一个长度为26的整型数组&amp;#xff0c;初始化为0。&amp;#xff0c;遇到&amp;#39;a&amp;#39;&amp;#xff0c;则第0个元素值设置为1&amp;#xff0c;最后数一下26个元素中有多少个1&amp;#xff0c;或者累加结果即可。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;  &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;G&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c,&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *S)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;26&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;},num&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; len &amp;#61; &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(S);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;len&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i--)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(S[i] !&amp;#61; c)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[S[i]-&lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                num&amp;#43;&amp;#43;;\n                a[S[i]-&lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; num;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;FS&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c,&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *S)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-built_in\"&gt;G&lt;/span&gt;(c,S);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;106&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    &lt;span class=\"hljs-built_in\"&gt;gets&lt;/span&gt;(a);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(a[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;)\n    {\n        a[i] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;FS&lt;/span&gt;(a[i],a);\n        i&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;,a);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["怎么样用C语言写这个程序", ["艾迪设计了一个字符串编码算法，把一个字符串S编码为另一个字符串，本题字符串中的字符均为a-z的小写字母。", "他设计了一个函数FS(c)，将该字符串S的某个字符c映射为另一个字符。该函数定义为：", "FS(c)=chr(G(c,S))", "其中G(c,S)表示字符c在字符串S中最后一次出现的位置后面不重复字符的个数。例如若S=\"abcaedef\"，则G(′a′,S)=3，因为字符'a'在S中最后一次出现的位置是3，该位置后有4个字符，但有2个'e'，故不重复的字符为3个，即'e'、'd'和'f'。函数chr(i)为第i+1个小写字母，例如chr(0)=′a′, chr(1)=′b′, chr(25)=′z′。故对于S=\"abcaedef\"有FS(′a′)=chr(G(′a′,S))=chr(3)=′d′。", "艾迪的编码算法即：依次将S中的每一个字符c替换为FS(c)。例如\"abc\"对应的编码为\"cba\"，因为'a'在字符串最后一次出现的位置后面有2个不重复的字符'b' 和'c'，故其FS值为第3个小写字母'c'；'b'在字符串最后一次出现的位置后面有1个不重复的字符'c'，故其FS值为第2个小写字母'b'；'c'在字符串最后一次出现的位置后面有0个字符，故其FS值为第1个小写字母'a'。同理，\"aacc\"的编码为\"bbaa\"，\"cac\" 的编码为\"aba\"。", "现给定一个字符串，请基于艾迪的算法编写程序，输出其编码后的字符串。", "输入格式:", "输入为一个字符串S。字符串长度不超过105。字符串中的字符为a-z的小写字母。", "输出格式:", "输出一个字符串，表示编码后的字符串。", "输入样例1:", "aca", "输出样例1:", "aba"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;读题&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;相比于其他普通大一计算机专业的学生&amp;#xff0c;你已经相对很优秀了&amp;#xff0c;当然如果你身边全是优秀并且勤奋的同学&amp;#xff0c;你可能感觉不到这一点&lt;/li&gt;&lt;li&gt;以我的理解&amp;#xff0c;除了计算机组成原理、编译原理、计算机网络这些相对偏底层的科目外&amp;#xff0c;其他本应该大二大三计算机专业才需要学习的课程&amp;#xff0c;你现在都已经掌握了&amp;#xff0c;常规课程进度已经跟不上你的学习进度&lt;/li&gt;&lt;li&gt;你和你的家人都很快乐和谐&amp;#xff0c;那么你可能是一个热爱生活的人&amp;#xff0c;算法竞赛对你来说一眼就能看到头&amp;#xff0c;翻来覆去就是那些算法、思路&amp;#xff0c;而且看不到这些算法能解决什么实际生活中的问题&amp;#xff0c;这对你来说有些迷茫和困惑&amp;#xff0c;我在大学的时候也有这种困惑&amp;#xff0c;现在回想起来如果有人在那个时候给我一些指点和帮助&amp;#xff0c;可能我会更“厉害”一点&lt;/li&gt;&lt;li&gt;读研读博最终都是在某一个领域深耕&amp;#xff0c;也就是是在深度上下功夫&amp;#xff0c;如果读研读博是你真实的想法&amp;#xff0c;那么最终你需要回归到“深度”上面来&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;我的建议是&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;课程要重视&amp;#xff0c;学校学院的实践、活动要参加&amp;#xff0c;以你的基础、学习能力和对生活的热爱&amp;#xff0c;绩点和实践分数加起来&amp;#xff0c;保研没问题&lt;/li&gt;&lt;li&gt;学好数学&amp;#xff0c;包括但不限于微积分、线性代数、概率论等&amp;#xff0c;计算机的尽头是算法&amp;#xff0c;算法的尽头是数学计算&lt;/li&gt;&lt;li&gt;一些竞赛可以参加&amp;#xff0c;一是能保研加分&amp;#xff0c;二是能结交朋友&amp;#xff0c;这对你以后的学习和工作会有帮助&amp;#xff0c;不必过分在意证书&amp;#xff0c;有兴趣和时间就去考&amp;#xff0c;没有就不考&lt;/li&gt;&lt;li&gt;了解本校优秀研究生导师&amp;#xff0c;如果你有他的课程那就更好&amp;#xff0c;看看他和他的学生在研究什么&amp;#xff0c;如果有兴趣&amp;#xff0c;你可以和导师了解&amp;#xff0c;甚至到实验室“打工”&amp;#xff0c;一般来说&amp;#xff0c;优秀的导师都很喜欢这种有潜力有兴趣的学生&amp;#xff0c;这会扩大你的知识面&amp;#xff0c;也会让你结交更多朋友&lt;/li&gt;&lt;li&gt;多了解计算机研究如何跟实际问题挂钩&amp;#xff0c;激发兴趣&amp;#xff0c;让“深耕”不那么枯燥&amp;#xff0c;兴趣是最好的老师&amp;#xff0c;比如新闻、招聘网站、博客、开源社区等&amp;#xff0c;比如前段时间的chatGPT&amp;#xff0c;比如很久之前的比特币&amp;#xff0c;比如招聘网站上紧缺的人才等等&amp;#xff0c;对有兴趣的方向通过搜索、学习和请教&amp;#xff0c;了解大概&amp;#xff0c;有机会的话去参加一些线上或线下的讲座&amp;#xff0c;甚至了解本校或其他学校有没有这方面的专家&amp;#xff0c;自己考不考虑去相关学校读研读博等&lt;/li&gt;&lt;li&gt;别忘了和自己的父母讨论&amp;#xff0c;你的父母都是高级知识分子&amp;#xff0c;能给你一些帮助&lt;/li&gt;&lt;li&gt;到了大三大四&amp;#xff0c;自己大概也有个方向了&amp;#xff0c;这时候不会再迷茫&amp;#xff0c;再从这个方向完成深度的追求&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;总结&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;打好基础&amp;#xff0c;学好数学&amp;#xff0c;热爱生活&amp;#xff0c;参加竞赛&amp;#xff0c;广交朋友&amp;#xff0c;力争保研&lt;/li&gt;&lt;li&gt;广泛涉猎&amp;#xff0c;激发兴趣&amp;#xff0c;父母建议&amp;#xff0c;确定方向&lt;/li&gt;&lt;li&gt;追求深度&amp;#xff0c;读研读博&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["大一计算机专业学生应该追求深度学习还是广度学习？", ["我是某大学大一计算机科学与技术专业的学生。", "\n", "除了老师上课讲C语言程序设计基础外，我利用半年的时间自学了C++，数据结构与算法，和数据库管理系统MySQL。", "\n", "我身边的同学大多都在卷算法，学校集训队也会定期举行一些训练赛。我也刷了一些LeetCode上的算法题，但是我只能说我只是对一些基本的东西有所了解，比如递归回溯贪心深搜广搜动态规划啥常用的，有时候LeetCode上面的一些题目，还有ACM的题目对我来说有些费劲。", "\n", "我很有把握地说，我不想在算法竞赛上花费太多时间，只是因为我想更全面地发展。我的学习能力不需要怀疑，如果我真的想认真学算法，精通它，这只是时间的问题，所以不用考虑我是否能学好。", "\n", "所以说我想从更广度的方面进行学习，我下学期开学后回校准备继续用半年时间打磨我计算机的基本功，就是在计算机组成原理、计算机网络等计算机基础学科方面，然后大二参加一些竞赛，雨露均沾。", "\n", "另外的话，我的个人想法是希望我能读研读博，这是由我的家庭环境决定的，因为我妈妈就是博士，虽然发财是从来没有的，但是很有文化、有思想，我们家也过得很快乐，我也希望我也能一样，这也算是我的一种信仰吧。", "\n", "所以我是应该从广度的方面进行学习？还是从深度的方面进行学习呢？我更倾向前者，如果可以，我应该制定并遵循什么样的学习计划？可以考什么样的证书、参加比赛呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n二、需求分析&amp;#xff08;格式&amp;#xff1a;宋体&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;号&amp;#xff0c;加粗&amp;#xff0c;两端对齐&amp;#xff09;\n实现子串匹配\n在该部分中叙述每个模块的功能要求\n&amp;#xff08;正文格式&amp;#xff1a;宋体&amp;#xff0c;小&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;号&amp;#xff0c;不加粗&amp;#xff0c;两端对齐&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;1.5&lt;/span&gt;倍行距&amp;#xff09;\nBF暴力匹配&amp;#xff0c;KMP算法分为求next数组模块与子串匹配模块\n三、概要设计&amp;#xff08;格式&amp;#xff1a;宋体&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;号&amp;#xff0c;加粗&amp;#xff0c;两端对齐&amp;#xff09;\n在此说明每个部分的算法设计说明&amp;#xff08;可以是描述算法的流程图&amp;#xff09;&amp;#xff0c;每个程序中使用的存储结构设计说明&amp;#xff08;如果指定存储结构请写出该存储结构的定义&amp;#xff0c;如果用面向对象的方法&amp;#xff0c;应该给出类中成员变量和成员函数原型声明&amp;#xff09;。\n&amp;#xff08;正文格式&amp;#xff1a;宋体&amp;#xff0c;小&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;号&amp;#xff0c;不加粗&amp;#xff0c;两端对齐&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;1.5&lt;/span&gt;倍行距&amp;#xff09;\n算法使用回溯&amp;#43;双指针,BF算法不开辟额外数组存储&amp;#xff0c;KMP算法要开辟一块与模式串等长的next数组记录回溯下标\n\n四、详细设计&amp;#xff08;格式&amp;#xff1a;宋体&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;号&amp;#xff0c;加粗&amp;#xff0c;两端对齐&amp;#xff09;\n各个算法实现的源程序&amp;#xff08;可以是一组源程序&amp;#xff0c;每个功能模块采用不同的函数实现&amp;#xff09;&amp;#xff0c;源程序要按照写程序的规则来编写。要结构清晰&amp;#xff0c;重点函数的重点变量&amp;#xff0c;重点功能部分要加上清晰的程序注释。\n&amp;#xff08;正文格式&amp;#xff1a;宋体&amp;#xff0c;小&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;号&amp;#xff0c;不加粗&amp;#xff0c;两端对齐&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;1.5&lt;/span&gt;倍行距&amp;#xff09;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;iostream&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;vector&amp;gt;\nusing namespace std;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;BF(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;t&lt;/span&gt;)&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//朴素算法&amp;#xff0c;时间复杂度O(m-n&amp;#43;1)*n&amp;#xff0c;空间复杂度O&amp;#xff08;1&amp;#xff09;,未使用额外数组空间&lt;/span&gt;\n{\n &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;t&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//字符串都没走到&amp;#39;\\0&amp;#39;&lt;/span&gt;\n {\n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;t&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//相等向后匹配&lt;/span&gt;\n  {\n   i&amp;#43;&amp;#43;;\n   j&amp;#43;&amp;#43;;\n  }\n  &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n  {\n   i &amp;#61; i - j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//回退&lt;/span&gt;\n   j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n  }\n }\n &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (t&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//如果匹配串还未走完&amp;#xff0c;则无匹配子串&lt;/span&gt;\n  return -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n  return i - j;\n}\n\n\n&lt;span class=\"hljs-comment\"&gt;//改进&amp;#xff0c;Kmp算法&lt;/span&gt;\nvector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;getnext(&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; t)&lt;span class=\"hljs-comment\"&gt;//获取next数组&lt;/span&gt;\n{\n &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; len &amp;#61; t.size&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;next(len, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; len; i&amp;#43;&amp;#43;)\n {\n  &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (j &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;t&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; !&amp;#61; t&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;)\n   j &amp;#61; next&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//不匹配&amp;#xff0c;模式串指针通过next数组回退&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (t&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;t&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//相等&amp;#xff0c;指针后移&lt;/span&gt;\n   j&amp;#43;&amp;#43;;\n  next&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61; j;&lt;span class=\"hljs-comment\"&gt;//记录回退位置&lt;/span&gt;\n }\n return next;\n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;KMP(&lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;string&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;t&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&amp;gt;&lt;span class=\"hljs-params\"&gt;next&lt;/span&gt;)&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//KMP&amp;#xff0c;时间复杂度O&amp;#xff08;m&amp;#43;n&amp;#xff09;,空间复杂度O&amp;#xff08;n&amp;#xff09;&lt;/span&gt;\n{\n &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; lens &amp;#61; s.size&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;, lent &amp;#61; t.size&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; lens; i&amp;#43;&amp;#43;)\n {\n  &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (j &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; !&amp;#61; t&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;)\n   j &amp;#61; next&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//不相等回退&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;t&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;)\n   j&amp;#43;&amp;#43;;\n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (j&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;lent)&lt;span class=\"hljs-comment\"&gt;//当模式串达到末尾时匹配成功&lt;/span&gt;\n   return i - lent &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n }\n return -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; s &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;afsdasfda&amp;#34;&lt;/span&gt;, t &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;das&amp;#34;&lt;/span&gt;;\n cout &amp;lt;&amp;lt; &lt;span class=\"hljs-constructor\"&gt;BF(&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;t&lt;/span&gt;)&lt;/span&gt; &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; &lt;span class=\"hljs-constructor\"&gt;KMP(&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;t&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;getnext&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;t&lt;/span&gt;)&lt;/span&gt;);\n return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n五、测试数据及其结果分析&amp;#xff08;格式&amp;#xff1a;宋体&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;号&amp;#xff0c;加粗&amp;#xff0c;两端对齐&amp;#xff09;\n&amp;#xff08;正文格式&amp;#xff1a;宋体&amp;#xff0c;小&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;号&amp;#xff0c;不加粗&amp;#xff0c;两端对齐&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;1.5&lt;/span&gt;倍行距&amp;#xff09;\n正确无误\n六、调试过程中的问题&amp;#xff08;格式&amp;#xff1a;宋体&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;号&amp;#xff0c;加粗&amp;#xff0c;两端对齐&amp;#xff09;\n每个模块设计和调试时存在问题的思考&amp;#xff08;问题是哪些&amp;#xff1f;问题如何解决&amp;#xff1f;&amp;#xff09;&amp;#xff0c;以及算法的改进设想。\n尽可能降低时间复杂度&amp;#xff0c;拿空间换时间&amp;#xff0c;多观察数据之间的规律\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["实现字符串的数组存储报告", ["用c++", "1实现字符串的数组存储。", "\n", "2实现串的朴素的匹配算法，找出子串位置", "\n", "3编写改进型的串的匹配算法，指出改进在何处，时间复杂度和空间复杂度各是多少。", "\n", "4叙述该部分每个板块需求", "\n", "5在此说明每个部分的算法设计说明( 可以是描述算法的流程图)，每个程序中使用的存储结构设计说明(如果指定存储结构请写出该存储结构的定义，如果用面向对象的方法，应该给出类中成员变量和成员函数原型声明)", "6调试过程中的问题解决方式和改进设想", "\n", "afsdasfda主串", "das           子串"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;参考一下\n&lt;a href=\"https://max.book118.com/html/2019/0605/8030104126002026.shtm\"&gt;https://max.book118.com/html/2019/0605/8030104126002026.shtm&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["田径比赛的时间安排问题", ["设计内容：\n设某田径比赛共有m个比赛项目，规定每个选手至多可参加三个项目，有n人报名参加比赛。设计比赛日程表，使得比赛能在尽可能短的时间内完成。要求：m个比赛项目及人员的报名情况表均事先存储在文件中，需要用数据时从文件中读取。", "\n", "设计要求：\n(1) 符合课题要求，实现相应功能；\n(2) 要求界面友好美观，操作方便易行；\n(3) 注意程序的实用性、安全性；\n3．设计工作任务及工作量的要求〔包括课程设计说明书、程序等〕：\n(1) 选择合适的数据结构，并定义数据结构的结构体；\n(2) 根据程序所要完成的基本要求和程序实现提示，设计出完整的算法；\n(3) 按格式要求写出课程设计说明书。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;sort&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; p[])&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; temp&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n-i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(p[j]&amp;gt;p[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n            {\n                temp&amp;#61;p[j];\n                p[j]&amp;#61;p[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                p[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;temp;\n            }\n        }\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;  a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]; \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        cin&amp;gt;&amp;gt;a[i];\n    }\n    &lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,a);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        cout&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/437206925436135.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["c语言怎么写啊！111", ["2、利用一维数组存放键盘输入 10个整数，用气泡排序方法将该组数据排", "序（升序或降序）输出。用所学过的高级程序设计语言验证气泡排序算法", "PROC EXCHANGSORT(VAR, R)", "(注意！下面是伪装代码不是程序代码）", "FOR i=1 TO n-1 DO", "Flag=FALSE", "FOR j=1 TO n-l", "IF R(+1).KEY<R(j).KEY", "FLAG=TRUE", "X= R(j): R(j) = R(j+1) : R(j+1)=X", "ENDIF", "IF Flag=FALSE", "RETURN"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;//选择排序&amp;#xff0c;升序&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;select_sort&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; minindex,tmp;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        minindex &amp;#61; i;\n        &lt;span class=\"hljs-comment\"&gt;//找出第i小的数所在的位置&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;lt;n;j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[j] &amp;lt; a[minindex])\n                minindex &amp;#61; j;\n        }\n\n        &lt;span class=\"hljs-comment\"&gt;//将第i小的数放在第i个位置&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i !&amp;#61; minindex)\n        {\n            tmp &amp;#61; a[i];\n            a[i] &amp;#61; a[minindex];\n            a[minindex] &amp;#61; tmp;\n        }\n    }\n\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n    &lt;span class=\"hljs-built_in\"&gt;select_sort&lt;/span&gt;(a,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["大学生c语言问题！问答", ["1、利用一维数组存放键盘输入 10 个整数，用选择排序方法方法使该组 10", "个数有序 （升序或降序）输出。用所学过的高级程序设计语言实现验证下", "列选择排序算法", "（注意！下面是伪装代码不是程序代码）", "PRO SELECTSORT(VAR,R)", "FOR i=1 TO n-1 DO", "Kel", "FOR j= i+1 TO n DO", "IF R().KEY<R(k).KEY THEN", "K=j", "ENDIF", "NEXT i", "IF i<>k THEN", "Temp=R(k)", "R(k)=R(i)", "R(i) = Temp", "ENDIF", "NEXT I", "END"]], "Tag": "程序设计"}
{"Answer": "\"主要是你要准备足够充分的测试数据，这样才能保证代码的覆盖率。\"\r\n这种说法是不对的。测试就是要用尽可能少的测试用例，对代码做尽可能全面的测试。构造测试用例是一个需要技巧的工作。“充分、足够的数据”是一个模糊的概念，如果不加选择的使用大量测试数据，不但大大增加测试花费的时间，而且对于一些代码路径，仍然可能无法覆盖。\r\n\r\n这里举一个例子：\r\n\r\n\r\n```\r\n int foo(int x, int y, int z)\r\n{\r\n    if (z == 0)\r\n\t\t{\r\n\t\t    x = 1;\r\n\t\t\t\ty = -1;\r\n\t\t}\r\n    if (x &gt; 0)\r\n\t\t{\r\n\t\t    if (y &gt; 0)\r\n\t\t\t\t{\r\n\t\t\t\t    return 1;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t    return 2;\r\n\t\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t    if (y &gt; 0)\r\n\t\t\t\t{\r\n\t\t\t\t    return 3;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t    return 4;\r\n\t\t\t\t}\r\n\t\t}\r\n}\r\n```\r\n\r\n对于这样一段代码，要想在测试中覆盖所有的代码路径，需要设计至少多少个测试用例？\r\n答案是8种：\r\nx y z\r\n-1 -1 0\r\n-1 1 0\r\n1 -1 0\r\n1 1 0\r\n-1 -1 1\r\n-1 1 1\r\n1 -1 1\r\n1 1 1\r\n\r\n可见，覆盖所有代码路径就是，确保程序的所有分支的排列组合都尝试过。\r\n\r\n现在再问你，要覆盖所有的代码分支，又需要多少测试用例？答案是5种\r\nx y z\r\n1 1 0\r\n-1 -1 1\r\n-1 1 1\r\n1 -1 1\r\n1 1 1\r\n（当然答案不唯一）\r\n可见，覆盖代码分支，就是确保代码中所有的分支都执行到。但是不覆盖全部的排列组合。\r\n\r\n在真实情况下，覆盖所有路径往往是办不到的，因为程序大一些，那么分支组合的数量是天文数字。一般我们考察的是代码分支的覆盖率。在完备的测试中，要求100%覆盖所有的代码。\r\n是不是覆盖了所有的路径（如果可能）就能确保程序正确？不一定，因为即便是同一个路径，也可能因为不同的测试数据，而造成不同的行为。\r\n\r\n所以，构造测试用例是一个非常有技巧的事情。测试者必须根据他的经验，尽可能测试到极端的、临界的条件，将从概率上很低发生但是可能导致程序出错的条件提取出来。", "Konwledge_Point": "算法与程序设计", "Question": ["如何编写一段c++测试代码", ["如题，我是一位初学者，现有一道题如下：", "\n编一段代码，分别实现插入排序，合并排序和快速排序的算法。然后编写测试代码，设计测试数据集，编写测试程序，测试正确性、算法复杂性和效率。", "\n\n", "题目中注明检测正确性的测试程序应该输出一个遍历结果，保证所有分支语句都检测到。不太理解这是要我做什么……以及比较算法复杂性、效率，是需我明确地输出花费时间吗？", "\n\n", "希望有大神可以在测试代码这方面指点迷津，谢谢！"]], "Tag": "程序设计"}
{"Answer": "我所在的公司的SOA应用就大量使用到了RMI，应用的框架为spring,列个参考给你吧：\r\n&lt;!-- 服务端 --&gt;\r\n&lt;bean id=\"accountService\" class=\"example.AccountServiceImpl\"/&gt;\r\n&lt;bean class=\"org.springframework.remoting.rmi.RmiServiceExporter\"&gt;\r\n\t&lt;property name=\"serviceName\"&gt;&lt;value&gt;AccountService&lt;/value&gt;&lt;/property&gt;\r\n\t&lt;property name=\"service\"&gt;&lt;ref bean=\"accountService\"/&gt;&lt;/property&gt;\r\n\t&lt;property name=\"serviceInterface\"&gt;&lt;value&gt;example.AccountService&lt;/value&gt;&lt;/property&gt;\r\n\t&lt;property name=\"registryPort\" value=\"2099\" /&gt;\r\n&lt;/bean&gt;\r\n\r\n&lt;!-- 客户端 --&gt;\r\n&lt;bean id=\"accountService\" class=\"org.springframework.remoting.rmi.RmiProxyFactoryBean\"&gt;\r\n\t&lt;property name=\"serviceUrl\"&gt;&lt;value&gt;rmi://HOST:1199/AccountService&lt;/value&gt;&lt;/property&gt;\r\n\t&lt;property name=\"serviceInterface\"&gt;&lt;value&gt;example.AccountService&lt;/value&gt;&lt;/property&gt;\r\n&lt;/bean&gt;\r\n\r\n参考：\r\nhttp://oss.org.cn/ossdocs/framework/spring/zh-cn/remoting.html", "Konwledge_Point": "算法与程序设计", "Question": ["关于JAVA开发分布式应用程序的问题", ["大家在开发java分布式应用程序的时候如何来实现分布式的？", "\n\n", "小弟现在正在设计软件结构，初定使用JDK中的RMI框架来实现分布式，但是我发现在在开发分布式应用中大家都几乎不用了吧", "\n\n", "那现在有什么好的解决方案吗，在网上查了半天，没查处个所以然。。。。。。", "\n\n", "小弟没分，大家讨论以下。", "\n\n", "我们的软件分为三个部分，第一个部分是WEB端的，是要于用户直接接触的，第二个部分是数据处理部分，负责WEB端请求的算法分析等等，并且接收第三个部分的数据并持久化。那么第三个部分就是数据采集部分了，这个没什么说的。", "\n\n", "就这种情况来分析，我应该怎么样实现分布式开发呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你可以让算法的同学用C#把算法写成Console Application&amp;#xff0c;输入参数什么的通过命令行参数&amp;#xff0c;标准输入流&amp;#xff0c;或文件形式传递&amp;#xff0c;结果可以直接输出到标准输出或文件。类似于Linux/Unix系统中的很多工具那样&amp;#xff0c;比如cat, sort, find。&lt;br /&gt;这样你的界面就是对这个命令行工具进行封装。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["QT可以和c#配合食用吗", ["最近要做个小组设计，我编写程序界面，用QT，然后编算法的同学用的c#，不知道后面方不方便整合连接起来，想咨询一下各位家人"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;那我来个优化的&amp;#xff0c;动态规划的&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\ndef lengthOfLIS():\n    n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;())\n    nums &amp;#61; &lt;span class=\"hljs-keyword\"&gt;list&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;map&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().&lt;span class=\"hljs-keyword\"&gt;split&lt;/span&gt;()))\n    &lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt; &amp;#61; [&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; _ in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(n)] # 动态转换数组\n    max_length &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; # 最短一个词长度为&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;不是&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,n):\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt; in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(i):\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; nums[i]&amp;gt;nums[&lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt;]: # 代表遍历到当前为递增&amp;#xff0c;可以加入\n                &lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt;[i] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt;[i],&lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt;[&lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt;]&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) # 判断是之前的大&amp;#xff0c;还是现在&lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt;[&lt;span class=\"hljs-keyword\"&gt;j&lt;/span&gt;]加了&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;大\n        max_length &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;dp&lt;/span&gt;[i], max_length) # 当前的长度的最大值和全局长度最大值比较\n    &lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(max_length)\n\nlengthOfLIS()\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["用Python，输出给定数列的最长递增子序列的长度，写一下注释", ["问题遇到的现象和发生背景", "\n", "给定一个由 nn个整数组成的序列 AA。找到最大的 k有一个索引序列 满足不等式a≤a2≤ak", "例如，序列 A=(5 3  2  4  6 1) 具有最长的递增子序列 (3 4  6) 和 (2 4 6)", "\n", "测试输入输出例子如图", "\n", "\n", "数据输入例子解释", "第一个输入行包含一个整数 n(1≤n≤2000)，A中的元素个数。", "第二个输入行包含 n 个整数 ai（1≤ai ≤1000）", "\n", "数据输出解释", "打印一个整数 k，即最长递增子序列的长度。", "\n", "我想要达到的结果", "\n", "用Python实现编写满足图片和任意的例子，输出打印一个整数 k，输出给定数列的最长递增子序列的长度", "数据输入第一行使用 n= int(input())", "第二行使用li = input().split()接收任意参数", "最后输出打印满足任意条件的结果"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;用数组类型来做顺序表&amp;#xff0c;实现对应的功能。&lt;br /&gt;&lt;a href=\"https://www.cnblogs.com/liaohai/articles/6432638.html\" id=\"textarea_1664877380810_1664877457467_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;java实现顺序表 - i廖海 - 博客园&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;java实现顺序表&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://common.cnblogs.com/favicon.svg\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.cnblogs.com/liaohai/articles/6432638.html&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["第一小问，如何解决？", ["(1)编写代码实现顺序表的类型定义及顺序表的初始化、插入、删除、取元素、输出等操作:(2)应用所实现的顺序表，从以下所列问题中至少选其一进行求解:", "\n", "①设计并实现集合的表示集合的创建、输出、并集运算、交集运算等操作;", "\n", "②设计并实现一个简单的学生信息管理(包括信息录入、显示、查找、插入、删除等操作)。", "\n", "(3)针对所选择的求解问题，编写测试程序，并选取适当的测试数据，通过运行结果验证算法和程序设的正确性。"]], "Tag": "程序设计"}
{"Answer": "用二分法查找到该学生，直接输出学生信息\r\n比如使用的是结构体存储了学生的信息\r\n就按照输出结构体变量信息那样输出该学生的信息", "Konwledge_Point": "算法与程序设计", "Question": ["按某关键字查找相关信息", ["n个学生的身高按从小到大的顺序存在一个一维数组中，若用户需要以身高值为关键字查询某学生的相关信息，请设计一个有效的算法。(初学算法不怎么会，麻烦回答的时候附上程序，c或者c++都行。我自己认为用二分查找，找到那个人之后就不知道怎么输出相关信息了)"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/833434107466178.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;还是错了&lt;br /&gt;哥&amp;#xff0c;那个警告是什么意思&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["c++求检查，不知道哪里错了，运行结果和预期不一致", ["问题遇到的现象和发生背景", "\n", "不知道哪里错了，求检查", "题目", "下面是一个图书的单价表：", "计算概论 28.9 元/本", "数据结构与算法 32.7 元/本", "数字逻辑 45.6元/本", "C++程序设计教程 78 元/本", "人工智能 35 元/本", "计算机体系结构 86.2 元/本", "编译原理 27.8元/本", "操作系统 43 元/本", "计算机网络 56 元/本", "JAVA程序设计 65 元/本", "给定每种图书购买的数量，编程计算应付的总费用。", "输入", "输入第一行包含一个正整数k（0<k<100），表示有k组测试数据；接下来k行，每行包含一组测试数据。每组测试数据包含10个整数(大于等于0，小于等于100)，分别表示购买的《计算概论》、《数据结构与算法》、《数字逻辑》、《C++程序设计教程》、《人工智能》、《计算机体系结构》、《编译原理》、《操作系统》、《计算机网络》、《JAVA程序设计》的数量（以本为单位）。每两个整数用一个空格分开。", "输出", "对于每组测试数据，输出一行。该行包含一个浮点数f，表示应付的总费用。精确到小数点后两位。", "\n", "可用printf(\"%.2f\\n\", sum)来输出sum的值，并精确到小数点后两位。", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "\n", "#", "include", "<iostream>", "\n", "#", "include", " ", "<iomanip>", "  ", "//不要忘了头文件", "\n\n\n", "using", " ", "namespace", " std;\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " k, number,c = ", "0", ";", "float", " a[", "10", "] = { ", "28.9", ", ", "32.7", " ,", "45.6", " ,", "78", ",", "35", ",", "86.2", ",", "27.8", ",", "43", ",", "56", ",", "65", " };", "float", " sum = ", "0", ";\n    cin >> k;\n    ", "for", " (", "int", " i = ", "1", ";i <= k;i++)\n    {\n        ", "for", " (", "int", " j = ", "1", ";j <= ", "10", ";j++, c++)\n        {\n            cin >> number;\n            sum += a[c] * number;\n\n\n        }\n        cout << fixed << ", "setprecision", "(", "2", ") << sum<<endl;\n    }\n    ", "return", " ", "0", ";\n\n\n\n}\n", "\n", "运行结果及报错内容", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; N 100&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;tongji&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; data; &lt;span class=\"hljs-comment\"&gt;// 存放数组元素&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k;    &lt;span class=\"hljs-comment\"&gt;// 记录不同元素位次&amp;#xff08;1-n&amp;#xff09; 初始化为0,表示无位次&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; flag; &lt;span class=\"hljs-comment\"&gt;//重复标记位&amp;#xff0c;有重复标记1 &amp;#xff0c;无重复标记0&amp;#xff0c;初始化为0&amp;#xff1b;&lt;/span&gt;\n};\n&lt;span class=\"hljs-comment\"&gt;// int cot[N] &amp;#61; {0}; //按输入顺序记录不同元素出现次数。&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;findnum&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; tongji *tj, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (x &amp;#61;&amp;#61; tj[i].data)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; i;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, t, i, x, cnt &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;tongji&lt;/span&gt; *tj &amp;#61; (&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; tongji *)&lt;span class=\"hljs-built_in\"&gt;calloc&lt;/span&gt;(n, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; tongji));\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;x);\n        t &amp;#61; &lt;span class=\"hljs-built_in\"&gt;findnum&lt;/span&gt;(tj, x, i);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (t &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)\n        {\n            tj[cnt].data &amp;#61; x;\n            tj[cnt].k&amp;#43;&amp;#43;;\n            tj[cnt].flag &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            cnt&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            tj[t].k&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (tj[t].k &amp;gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n                tj[t].flag &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; cnt; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d:%d\\n&amp;#34;&lt;/span&gt;, tj[i].data, tj[i].k);\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["c语言程序问题输入输出问题", ["如何快速地统计出整型数组中不同元素的个数。你可以发挥你的聪明才智，设计高效统计算法。", "我的建议使用结构体实现，仅供参考：", "struct   tongji{", " int  data;  //  存放数组元素", " int k;        // 记录不同元素位次（1-n） 初始化为0,表示无位次", " int flag;    //重复标记位，有重复标记1 ，无重复标记0，初始化为0；", "   }；", "int  cot[N]={0}; //按输入顺序记录不同元素出现次数。", "输入", "输入有两行，第一行是一个正整数n,表示数组元素个数。第二是n个数组元素，数据之间空格区分", "输出", "不同每个元素重复次数，格式如输出样例所示", "难度", "中等", "输入示例", "10", "1 2 3 4 5 2 6 8 6 2", "输出示例", "1:1", "2:3", "4:1", "5:1", "6:2", "8:1 "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1.&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;],n,s,i,t,cnt&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;n,&amp;amp;s);\n    t&amp;#61;n;     &lt;span class=\"hljs-comment\"&gt;//用人数控制循环结束时机 &lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;s;i&amp;#43;&amp;#43;)\n        a[i]&amp;#61;i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[i]!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;//只计数每个退出圈子的人 &lt;/span&gt;\n            cnt&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(cnt&amp;#61;&amp;#61;s) \n        {\n            a[i]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;//退出圈子的人&amp;#xff0c;标记为0 &lt;/span&gt;\n            cnt&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;//cnt清零&amp;#xff0c;重新计数 &lt;/span&gt;\n            t--; &lt;span class=\"hljs-comment\"&gt;//每退出一个&amp;#xff0c;总人数就减少一个 &lt;/span&gt;\n        }  \n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;#61;&amp;#61;n)  \n            i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;//围成一圈---循环 &lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-comment\"&gt;//只剩一个人的时候&amp;#xff0c;退出循环 &lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;; \n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[i]!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n    }    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n} \n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["这俩题的正确程序实现该是怎样的？", ["1.击鼓传花，初始有n个人围成一个圈，花位于第0个人手上，持花人每秒必须向其右边传花，之后每过s秒，手中持花的人退出比赛之后花传给下一个人，求最后剩下的那个人为几号", "2.假设斐波那契列数有1000000项，请设计一个时间复杂度不超过Ｏ（n）每次请求时间复杂度为Ｏ（1）的算法"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;当需要在没有RTC的情况下记录系统运行时间时&amp;#xff0c;我们可以使用STM32的系统滴答定时器&amp;#xff08;SysTick&amp;#xff09;来实现。&lt;/p&gt;\n&lt;p&gt;系统滴答定时器是一个24位的计数器&amp;#xff0c;它可以按照预设的时间间隔&amp;#xff08;通常为1ms&amp;#xff09;自动递减&amp;#xff0c;当计数器减为0时&amp;#xff0c;就会产生一次SysTick中断。在中断服务程序中&amp;#xff0c;我们可以记录系统的运行时间&amp;#xff0c;并进行相应的处理。&lt;/p&gt;\n&lt;p&gt;为了精确到us&amp;#xff0c;我们需要根据SysTick定时器的时钟频率来计算每个SysTick定时器中断所表示的时间。在STM32F4上&amp;#xff0c;SysTick定时器的时钟频率是AHB总线时钟频率&amp;#xff08;通常等于系统时钟频率&amp;#xff09;的1/8。因此&amp;#xff0c;如果我们的系统时钟频率是180MHz&amp;#xff0c;则SysTick定时器的时钟频率是180/8&amp;#61;22.5MHz。&lt;/p&gt;\n&lt;p&gt;计算每个SysTick中断所表示的时间&amp;#xff08;即SysTick定时器的计数周期&amp;#xff09;的方法如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;由于SysTick定时器是一个24位的计数器&amp;#xff0c;因此它的计数周期是2^24 &amp;#61; 16,777,216。&lt;br /&gt;SysTick定时器的时钟频率是22.5MHz&amp;#xff0c;因此每个SysTick中断所表示的时间是16,777,216/22.5MHz ≈ 0.744ms。&lt;br /&gt;在中断服务程序中&amp;#xff0c;我们可以记录系统的运行时间&amp;#xff08;以us为单位&amp;#xff09;的代码如下&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-keyword\"&gt;volatile&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;uint32_t&lt;/span&gt; systick_count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;// 系统运行时间&amp;#xff08;以us为单位&amp;#xff09;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;SysTick_Handler&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    systick_count &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;744&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;// 每个SysTick中断表示的时间是744us&lt;/span&gt;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;uint32_t&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;get_system_time_us&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;uint32_t&lt;/span&gt; ticks;\n    &lt;span class=\"hljs-type\"&gt;uint32_t&lt;/span&gt; cnt;\n    &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n        ticks &amp;#61; systick_count;\n        cnt &amp;#61; SysTick-&amp;gt;VAL;\n    } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (ticks !&amp;#61; systick_count);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ticks &amp;#43; &lt;span class=\"hljs-number\"&gt;744&lt;/span&gt; - cnt / (SystemCoreClock / &lt;span class=\"hljs-number\"&gt;22500000&lt;/span&gt;);\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在上面的代码中&amp;#xff0c;我们定义了一个全局变量systick_count来记录系统运行的时间&amp;#xff08;以us为单位&amp;#xff09;&amp;#xff0c;并在SysTick中断服务程序中每次增加744。这个数值是根据上面的计算得到的每个SysTick中断所表示的时间&amp;#xff08;即0.744ms&amp;#xff09;除以1000得到的&amp;#xff0c;即744us。&lt;/p&gt;\n&lt;p&gt;在get_system_time_us()函数中&amp;#xff0c;我们先读取当前的systick_count值和SysTick定时器的当前计数值&amp;#xff08;cnt&amp;#xff09;&amp;#xff0c;如果在读取过程中SysTick中断发生了&amp;#xff0c;我们就再次读取&amp;#xff0c;直到两次读取得到的systick_count值相同。然后我们将这两个值相加&amp;#xff0c;并减去cnt/(SystemCoreClock/22500000)的值&amp;#xff0c;得到系统运行的时间&amp;#xff08;以us为单位&amp;#xff09;。&lt;/p&gt;\n&lt;p&gt;这个差值的计算方法是根据SysTick计数器的减法计算方法得到的。当SysTick计数器减为0时&amp;#xff0c;它会自动重载&lt;br /&gt;使用DWT(Dat Watchpoint and Trace)寄存器进行计时&lt;br /&gt;DWT寄存器是专门用来进行调试的寄存器&amp;#xff0c;其中包括一个32位的计数器CYCCNT&amp;#xff0c;可以实现精确计时。使用DWT寄存器需要开启调试功能&amp;#xff0c;并且在编译时需要将调试信息加入代码中。&lt;/p&gt;\n&lt;p&gt;具体的使用方法如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;在main函数中开启DWT寄存器&amp;#xff0c;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-r\"&gt;CoreDebug-&amp;gt;DEMCR |&lt;span class=\"hljs-type\"&gt;&amp;#61; CoreDebug_DEMCR_TRCENA_Msk&lt;/span&gt;;\nDWT-&amp;gt;CYCCNT &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\nDWT-&amp;gt;CTRL |&lt;span class=\"hljs-type\"&gt;&amp;#61; DWT_CTRL_CYCCNTENA_Msk&lt;/span&gt;;\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在需要进行计时的地方使用DWT_CYCCNT寄存器获取当前计数值&amp;#xff0c;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-sql\"&gt;uint32_t start &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; DWT-&amp;gt;CYCCNT&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\nalgo()&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\nuint32_t end &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; DWT-&amp;gt;CYCCNT&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\nuint32_t cycles &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; end - start&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这样就可以使用DWT寄存器实现精确计时。&lt;/p&gt;\n&lt;p&gt;需要注意的是&amp;#xff0c;DWT寄存器只能在调试模式下使用&amp;#xff0c;而且在初始化时需要先开启调试模式才能使用DWT寄存器&amp;#xff0c;这会对系统的性能产生一定影响。&lt;/p&gt;\n&lt;p&gt;总结&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;以上是几种常用的方法&amp;#xff0c;在STM32 F4上实现精确计时。不同的应用场景可以选择不同的方法来实现计时。需要根据实际情况选择合适的方法&amp;#xff0c;权衡计时的精度和系统的性能。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["STM32F4 计数器设计", ["要在STM32 F4上 测试算法 性能 （重点原子的开发板 180MHz 的频率)", "1 要精确到us 不是 ms,裸机程序", "2 在不加RTC的情况下如何记录系统运行的时间。一个32位 uint32_t (2^32=4,294,967,296) （大约可以表示1.19小时)", "曾经用过定时器，每中断一次计算器加1.  1ms 中断一次程序可运行，但需要精确到us，如果是1us中断一次，程序就没法跑了，不停中断", "\n", "\nvolatile uint32_t T = ", "0", ";\nvolatile uint32_t ", "T1", " = ", "0", ";\nvolatile uint32_t ", "T2", " = ", "0", ";\nvolatile uint32_t reload = ", "0", ";\n.....\n\nreload = SysTick->LOAD;\n", "T1", " = SysTick->VAL;\nalgo();\n", "T2", " = SysTick->VAL;\nif (", "T1", " != ", "T2", ")\n{\n       if (", "T2", " < ", "T1", ")\n    {\n        T = ", "T1", " - ", "T2", ";\n    }\n    else\n    {\n        T = reload - ", "T2", " + ", "T1", ";\n    }\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "首先要搞清楚为什么要加密，主要是解决这么几个问题：\r\n\r\n（1）确保服务器和客户端之间的通讯如果被窃听，那么窃听者无法知道传输的明文数据是什么。\r\n（2）对于服务器来说，确保只有你认可的客户端在和你通讯，别的伪造的客户端无权和你通讯。\r\n（3）对于服务器来说，确保客户端传输来的数据，通过中间网络转发的时候，数据没有被篡改。\r\n\r\n因此你可以用一种非对称的加密算法，解释下为什么能做到这3点。\r\n对于非对称的加密算法，通讯的双方各需要一个密钥，你生成随机的2个密钥，你掌握一个密钥（k1），叫做私钥，你给第三方一个（k2），叫做公钥。\r\n如果你要和很多第三方通讯，那么你需要生成很多不同的密钥，总之，不同的第三方有不同的密钥。\r\n当你需要和某个第三方通讯的时候，你用你的k1对发送的数据加密。把数据传输给第三方，第三方用你给的k2解密得到原文。第三方给你回传数据正好相反。\r\n\r\n对于问题（1），窃听者没有密钥，所以无法对数据解密，知道你们在通讯的内容\r\n对于问题（2），只有授权的一方有密钥，如果他没有密钥，他加密的数据也是无法解密的，因此是无效的数据。\r\n对于问题（3），因为加密、解密用的密钥不同，所以第三方无法篡改或者伪造你发出的加密数据，他只能解密你的数据，而不能反过来制作加密的数据。\r\n因此即便他知道整个加密算法的原理（比如对你的jar反编译，得到了算法和密钥），知道公钥，但是它不能冒充你。\r\n\r\n那么非对称算法的原理是什么呢，这个主要利用的是大质数因数分解比较困难，而公钥、私钥分别是两个超大的质数。\r\n\r\n上面说的是理论，以java为例，你可以用aes rsa或者des，因为它们都是非对称的加密算法。其中运用最广泛的是aes，甚至现代cpu都在硬件上直接实现了aes。\r\n可以参考：\r\n&gt;https://www.cnblogs.com/chen-lhx/p/5817161.html\r\nhttps://blog.51cto.com/1385903/2094164", "Konwledge_Point": "算法与程序设计", "Question": ["第三方应用接入数据传输加密方案", ["应用场景：程序内部需要和第三方程序进行数据交互，设计了加密方案", "\n加密流程：", "\n1.程序在交互开始前已经提供给第三方某个标识", "\n2.第三方根据该标识访问我方加密服务获取动态密钥", "\n3.第三方根据动态密钥对即将传输给我方的数据进行加密，", "\n   并将动态密钥和加密后的数据传递给我方", "\n4.我方根据得到的动态密钥，对数据进行解密", "\n说明：加密算法使用我方提供的jar包", "\n\n", "本人对加密的业务流程及方法并不熟悉，希望那位能对加密的流程", "\n进行一个详细的说明，尤其是动态密钥在各个环节的用途"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;这些问题&amp;#xff0c;如果不明白&amp;#xff0c;可以反复多去阅读分析的。&lt;br /&gt;比如第一个问题&amp;#xff1a;因为你这个系统的文件系统格式是FAT12的&amp;#xff0c;意味着每个FAT项占12bit&amp;#xff0c;这也所被成为FAT12的原因。而我们计算机每个字节是8bit的&amp;#xff0c;因此在寻址时&amp;#xff0c;是需要1.5倍去换算的。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["关于阅读《一个64位操作系统的设计与实现》遇到的问题", ["\n", "\n", "代码如下：", "\n", "\n", ";=======    get FAT Entry", "\n", "\nFunc_GetFATEntry:", "\n\n    ", "push", "    ", "es", "\n    ", "push", "    ", "bx", "\n    ", "push", "    ", "ax", "\n    ", "mov", "    ", "ax", ",    ", "00", "\n    ", "mov", "    ", "es", ",    ", "ax", "\n    ", "pop", "    ", "ax", "\n    ", "mov", "    ", "byte", "    [Odd],    ", "0", "\n    ", "mov", "    ", "bx", ",    ", "3", "\n    ", "mul", "    ", "bx", "\n    ", "mov", "    ", "bx", ",    ", "2", "\n    ", "div", "    ", "bx", "\n    ", "cmp", "    ", "dx", ",    ", "0", "\n", "    jz    Label", "_Even\n    ", "mov", "    ", "byte", "    [Odd],    ", "1", "\n", "\nLabel_Even:", "\n\n    ", "xor", "    ", "dx", ",    ", "dx", "\n    ", "mov", "    ", "bx", ",    [BPB_BytesPerSec]\n    ", "div", "    ", "bx", "\n    ", "push", "    ", "dx", "\n    ", "mov", "    ", "bx", ",    ", "8000h", "\n    ", "add", "    ", "ax", ",    SectorNumOfFAT1Start\n    ", "mov", "    ", "cl", ",    ", "2", "\n    ", "call", "    Func_ReadOneSector\n    \n    ", "pop", "    ", "dx", "\n    ", "add", "    ", "bx", ",    ", "dx", "\n    ", "mov", "    ", "ax", ",    [", "es", ":", "bx", "]\n    ", "cmp", "    ", "byte", "    [Odd],    ", "1", "\n", "    jnz    Label", "_Even_2\n    ", "shr", "    ", "ax", ",    ", "4", "\n", "\nLabel_Even_2:", "\n    ", "and", "    ", "ax", ",    ", "0fffh", "\n    ", "pop", "    ", "bx", "\n    ", "pop", "    ", "es", "\n    ", "ret", "\n\n", "\n", "以上是我在阅读《一个64位操作系统的设计与实现》时存在问题的部分，问题如下：", "1.请问为何要将FAT表项乘以3除以2，即为何要扩大1.5倍", "2.偏移位置如何计算？", "3.后面的奇偶项错位问题为什么会出现？对于汇编写的处理方法不是很理解", "4.此程序将写入软盘用于引导操作系统启动，FAT12文件系统应该由操作系统解析，这里还没有操作系统，那FAT表，根目录区这些结构是由谁建立并解析呀？", "5.对于这两页的汇编代码还有这个模块的算法思路不是很理解，能否详细解释下,非常感谢！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;穷举呗&amp;#xff0c;把四兄妹排名穷举&amp;#xff0c;然后看看哪个排名符合三种选择各对一半的情况&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint main&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n{\n    int a,b,c,d;\n    int i,j,m,n;\n    &lt;span class=\"hljs-string\"&gt;//&lt;/span&gt;兔子尼克、马克、马尼、波力\n    for&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;i&lt;/span&gt;&amp;#61;1;i&amp;lt;&amp;#61;4;i&amp;#43;&amp;#43;)&lt;/span&gt;\n    {\n        for&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;j&lt;/span&gt;&amp;#61;1;j&amp;lt;&amp;#61;4;j&amp;#43;&amp;#43;)&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;i&lt;/span&gt;&amp;#61;&amp;#61;j)&lt;/span&gt;\n                continue;\n            for&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;m&lt;/span&gt;&amp;#61;1;m&amp;lt;&amp;#61;4;m&amp;#43;&amp;#43;)&lt;/span&gt;\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;m&lt;/span&gt;&amp;#61;&amp;#61;i || &lt;span class=\"hljs-attr\"&gt;m&lt;/span&gt;&amp;#61;&amp;#61;j)&lt;/span&gt;\n                    continue;\n                for&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;n&lt;/span&gt;&amp;#61;1;n&amp;lt;&amp;#61;4;n&amp;#43;&amp;#43;)&lt;/span&gt;\n                {\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;n&lt;/span&gt;&amp;#61;&amp;#61;i || &lt;span class=\"hljs-attr\"&gt;n&lt;/span&gt;&amp;#61;&amp;#61;j || &lt;span class=\"hljs-attr\"&gt;n&lt;/span&gt;&amp;#61;&amp;#61;m)&lt;/span&gt;\n                        continue;\n                    a&amp;#61;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;j&lt;/span&gt;&amp;#61;&amp;#61;1)&lt;/span&gt;;\n                    b&amp;#61;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;n&lt;/span&gt;&amp;#61;&amp;#61;4)&lt;/span&gt;;\n                    c&amp;#61;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;m&lt;/span&gt;&amp;#61;&amp;#61;3)&lt;/span&gt;;\n                    d&amp;#61;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;i&lt;/span&gt;&amp;#61;&amp;#61;2)&lt;/span&gt;;\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a&amp;#43;b&amp;#43;c&amp;#43;d !&amp;#61; 2)&lt;/span&gt;\n                        continue;\n                    a&amp;#61;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;n&lt;/span&gt;&amp;#61;&amp;#61;1)&lt;/span&gt;;\n                    b&amp;#61;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;j&lt;/span&gt;&amp;#61;&amp;#61;4)&lt;/span&gt;;\n                    c&amp;#61;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;m&lt;/span&gt;&amp;#61;&amp;#61;2)&lt;/span&gt;;\n                    d&amp;#61;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;i&lt;/span&gt;&amp;#61;&amp;#61;3)&lt;/span&gt;;\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a&amp;#43;b&amp;#43;c&amp;#43;d !&amp;#61; 2)&lt;/span&gt;\n                        continue;\n                    a&amp;#61;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;j&lt;/span&gt;&amp;#61;&amp;#61;1)&lt;/span&gt;;\n                    b&amp;#61;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;i&lt;/span&gt;&amp;#61;&amp;#61;4)&lt;/span&gt;;\n                    c&amp;#61;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;n&lt;/span&gt;&amp;#61;&amp;#61;3)&lt;/span&gt;;\n                    d&amp;#61;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;m&lt;/span&gt;&amp;#61;&amp;#61;2)&lt;/span&gt;;\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a&amp;#43;b&amp;#43;c&amp;#43;d !&amp;#61; 2)&lt;/span&gt;\n                        continue;\n                    a&amp;#61;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;n&lt;/span&gt;&amp;#61;&amp;#61;4)&lt;/span&gt;;\n                    b&amp;#61;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-attr\"&gt;j&lt;/span&gt;&amp;#61;&amp;#61;3)&lt;/span&gt;;\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a&amp;#43;b !&amp;#61; 1)&lt;/span&gt;\n                        continue;\n                    printf&lt;span class=\"hljs-params\"&gt;(&amp;#34;尼克:%d&amp;#xff0c;马克:%d&amp;#xff0c;马尼:%d&amp;#xff0c;波力:%d\\n&amp;#34;,i,j,m,n)&lt;/span&gt;;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["这个有会的吗，有C语言实现帮我一下。", ["兔子尼克、马克、马尼、波力四兄妹个头差不多，长得很像。一天，格", "莱尔到他们家玩，他们让格莱尔猜谁大谁小。格莱尔第1次猜：马克老大，波力", "最小，马尼老三，尼克老二；第2次猜：波力老大，马克最小，马尼老二，尼克", "老三；第3次猜：波力最小，马克老三；第4次猜：马克老大，尼克最小，波力", "老三，马尼老二。格莱尔每次仅猜对了一半。", "请设计并实现一算法，算一算这四兄妹的真实大小。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;换个浏览器试试&amp;#xff0c;建议chrome最新版&lt;/p&gt;\n\n&lt;p&gt;或者 重启电脑&amp;#xff0c;安装360浏览器试一下。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["AJO平台输入不了代码", ["刚开始看《挑战程序设计竞赛2算法与数据结构》，结果注册好了Aizu Online Judge（AOJ）后发现一直写入不了代码", "\n\n", "看别人的显示是这样的：", "\n\n", "\n\n", "我这边的显示是这样的：", "\n\n", "\n\n", "根本没有写的地方", "\n\n", "请教一下怎么回事，谢谢了！"]], "Tag": "程序设计"}
{"Answer": "# 问题解决的话，请点下采纳\r\n```\r\n#include &lt;stdio.h&gt;\r\n\r\nvoid fun(char *s, char *t, char *u)\r\n{\r\n\tint k = 0;\r\n\tfor (int i = 0; t[i]; i++)\r\n\t{\r\n\t\tint flag = 0;\r\n\t\tfor (int j = 0; s[j]; j++)\r\n\t\t{\r\n\t\t\tif (t[i] == s[j])\r\n\t\t\t{\r\n\t\t\t\tflag = 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!flag) u[k++] = t[i];\r\n\t}\r\n\tu[k] = 0;\r\n}\r\n\r\nint main()\r\n{\r\n\tchar *s = \"ABCDE\";\r\n\tchar *t = \"BDFGG\";\r\n\tchar u[100];\r\n\tfun(s,t,u);\r\n\tprintf(\"%s\\n\", u);\r\n\treturn 0;\r\n}\r\n```", "Konwledge_Point": "算法与程序设计", "Question": ["将未在字符串s中出现而在字符串t中出现的字符形成一个新的字符串放在u中，u中字符按原字符串中字符顺序排列，不去掉重复字符？", ["60.", "\n编程题", "\n将未在字符串s中出现而在字符串t中出现的字符形成一个新的字符串放在u中，u中字符按原字符串中字符顺序排列，不去掉重复字符。", "\n测试数据：", "\ns：ABCDE， t：BDFGG", "\n运行结果：FGG", "\n请认真测试程序的正确性。将源代码以文本方式提交，不要直接提交文件。", "\n【算法提示】", "\n设计函数void fun(char *s, char *t, char *u)实现要求的功能，函数以字符指针作为参数，通过指针移动进行字符比较：", "\n设置两个字符指针p和q，p指针指向t串，q指针指向s串；通过移动指针p和q，将t串中的一个字母与s中的每个字母进行比较，若有相同的，则中断，再看t中的下一个，直到最后都没有相同的，放入u中。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;是否可以理解为对数组排序呢&amp;#xff1f;分别用不同排序方法。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["java学生成绩排序", ["【问题描述】", " 对本班所有学生的上学期的各科平均成绩进行从高到低排序，学生的平均成绩可按照上学期真实平均成绩设计，也可利用随机数自动生成，并对这些平均成绩进行多种方法进行排序。", "【基本要求】", "请用Java语言编写程序，满足以下要求：", "（1）至少采用四种方法实现上述问题求解（提示，可采用的方法有插入排序、希尔排序、起泡排序、快速排序、选择排序、堆排序、归并排序），并把排序后的结果写出到不同的文本文件中，文件名自行设计。", "（2）统计每一种排序方法的性能（以上机运行程序所花费的时间为准进行对比），并分析各个排序算法的优劣。", "【测试数据】", "（1）要求使用全部合法数据，整体非法数据，局部非法数据进行程序测试，以保证程序的稳定。", "（2）若平均成绩随机生成，生成的范围为：[60 - 100]。", "【实现提示】", "成绩的排序可利用学过的排序算法实现，对于结果的写出可利用java的缓冲输入输出字符流进行实现。", "__"]], "Tag": "程序设计"}
{"Answer": "https://blog.csdn.net/weixin_41032720/article/details/94835389", "Konwledge_Point": "算法与程序设计", "Question": ["实在是不懂了。。学校的作业，过两天就要交了，磨了好几天也没动", ["编程一个程序sqllist.cpp实现存储多个整数的顺序表（即ElemType为int），顺序表的个数由键盘输入，并在此基础上设计一个主程序，要求实现如下功能：", "\n初始化顺序表L", "\n依次插入n（由键盘输入）个元素", "\n输出顺序表L", "\n输出顺序表L的长度", "\n判断顺序表L是否为空", "\n输出顺序表L的第3个元素", "\n输出元素a（比如30）的位置", "\n在第4个元素位置上插入b（比如40）元素", "\n输出顺序表L", "\n删除顺序表L的第3个元素", "\n输出顺序表L", "\n输出顺序表中所有元素的平均值", "\n释放顺序表L", "\n根据教材中2.4节中的算法得到sqlist.cpp程序，其中包含如下函数：", "\nStatus InitList_Sq(SqList &L)：初始化顺序表", "\nvoid DestroyList(SqList &L)：销毁顺序表", "\nvoid ClearList(SqList &L) ：清空顺序表", "\nStatus GetLength(SqList L)：求线性表L的长度", "\nStatus IsEmpty(SqList L)：判断线性表L是否为空", "\nStatus GetElem(SqList L,int i,ElemType &e)：获取线性表L中的某个数据元素的内容", "\nStatus LocateELem(SqList L,ElemType e)：在线性表L中查找值为e的数据元素", "\nStatus ListInsert_Sq(SqList &L,int i ,ElemType e)：在线性表L中第i个数据元素之前插入数据元素e", "\nStatus ListDelete_Sq(SqList &L,int i)：将线性表L中第i个数据元素删除", "\nStatus AverageElem_Sq(SqList L)：求顺序表中元素的平均值"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;中文字符所占空间的大小与编码有关&amp;#xff0c;常见的编码比如GBK什么的&amp;#xff0c;每个中文字符占空间的大小是相等的。&lt;br /&gt;你程序的主要问题是i,j没有初始化&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; LEN&amp;#61;&lt;span class=\"hljs-number\"&gt;1e5&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; str1[LEN]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; str2[LEN]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    cin&amp;gt;&amp;gt;str1;\n    cin&amp;gt;&amp;gt;str2;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; lenS&amp;#61;&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(str1);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; lenT&amp;#61;&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(str2);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//初始化&amp;#xff01;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(j&amp;lt;lenT&amp;amp;&amp;amp;i&amp;lt;lenS){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(str1[i]&amp;#61;&amp;#61;str2[j]){\n            i&amp;#43;&amp;#43;;\n            j&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n            i&amp;#43;&amp;#43;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j&amp;#61;&amp;#61;lenT){\n        cout&amp;lt;&amp;lt;str2&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;是&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;str1&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;的子序列!&amp;#34;&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n        cout&amp;lt;&amp;lt;str2&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;不是&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;str1&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;的子序列!&amp;#34;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["在实现非连续性模式匹配时中文汉字怎么处理？", ["我在刷一道教学平台发布的题，这一到就很简单，让我觉得有点离谱。虽然我过了程序，但有一个样例我却不能通过。", "题目如下：", "模式匹配是严格的匹配，即强调模式在主串中连续性，例如，模式“bc”是主串“abcd”的子串，而“ac”就不是主串“abcd”的子串。", "但在实际应用中，有时并不需要模式的连续性，例如，模式“哈工大”与主串“哈尔滨工业大学”是非连续匹配的，称模式“哈工大”是主串“哈尔滨工业大学”的子序列（解释：意思就是：有部分字符匹配，子串中的所有字符都是来自于子串，而且顺序一致）。", "设计算法，判定给定的模式是否为两个主串的公共子序列。", "\n", "【测试数据】", "输入：", "哈尔滨工业大学", "哈工大", "输出：", "哈工大是哈尔滨工业大学的子序列!", "\n", "输入：", "abcdefg", "xyz", "输出：", "xyz不是abcdefg的子序列!", "\n", "【提示】", "实现这个代码可以不采用KMP算法。", "\n", "没错就是这个中文样例。是不是一个中文字符所占的内存不同啊？？", "具体代码如下", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<string.h>", "\n", "using", " ", "namespace", " std;\n", "const", " ", "int", " LEN=", "1e5", ";\n", "int", " ", "main", "()", "{\n    ", "char", " str1[LEN];\n    ", "char", " str2[LEN];\n    cin>>str1;\n    cin>>str2;\n    ", "int", " lenS=", "strlen", "(str1);\n    ", "int", " lenT=", "strlen", "(str2);\n    ", "int", " i,j;\n    ", "while", "(j<lenT&&i<lenS){\n        ", "if", "(str1[i]==str2[j]){\n            i++;\n            j++;\n        }\n        ", "else", "{\n            i++;\n        }\n    }\n    ", "if", "(j==lenT){\n        cout<<str2<<", "\"是\"", "<<str1<<", "\"的子序列!\"", "; \n    }\n    ", "else", "{\n        cout<<str2<<", "\"不是\"", "<<str1<<", "\"的子序列!\"", "; \n    }\n} \n\n", "\n", "我的样例输出：", "哈工大不是哈尔滨工业大学的子序列", "\n", "我试着打印了一下母串跟字串的长度", "分别是：", "14", "6", "而打印出来的 j 是:", "4199739"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; random\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;awm&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;p&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n    生成随机中奖号码\n    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    p[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;] &amp;#61; random.sample(&lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;23&lt;/span&gt;), &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\n    p[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;] &amp;#61; random.randint(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;23&lt;/span&gt;)\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;select&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;f&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n    选择投注号码\n    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请从1~22之间任意选取5个不同的整数作为投注号码:&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-comment\"&gt;# 输入五个数&amp;#xff0c;并排序&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;True&lt;/span&gt;:\n        nums &amp;#61; &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;().strip().split()\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(nums) !&amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入错误&amp;#xff0c;请重新输入五个不同的整数:&amp;#34;&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;continue&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt;:\n            nums &amp;#61; [&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(num) &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; num &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; nums]\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;set&lt;/span&gt;(nums)) !&amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;any&lt;/span&gt;(num &amp;lt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; num &amp;gt; &lt;span class=\"hljs-number\"&gt;22&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; num &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; nums):\n                &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入错误&amp;#xff0c;请重新输入五个不同的1~22的整数:&amp;#34;&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n                f[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sorted&lt;/span&gt;(nums)\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;except&lt;/span&gt; ValueError:\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入错误&amp;#xff0c;请重新输入五个不同的整数:&amp;#34;&lt;/span&gt;)\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;check&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;p, f&lt;/span&gt;):\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n    判断中奖等级\n    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    f_set &amp;#61; &lt;span class=\"hljs-built_in\"&gt;set&lt;/span&gt;(f)\n    count &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;([&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; num &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; f &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; num &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; p[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;]])\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; count &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; f[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61;&amp;#61; p[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;]:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;大奖&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; count &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;一等奖&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; count &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; f[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61;&amp;#61; p[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;]:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;二等奖&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; count &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;三等奖&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; count &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;四等奖&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; count &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;五等奖&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;未中奖&amp;#34;&lt;/span&gt;\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;print_opt&lt;/span&gt;():\n    &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&amp;#34;\n    输出操作菜单\n    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;------------操作------------&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;|抽奖&amp;#xff0c;            请选择1 |&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;|退出本期抽奖&amp;#xff0c;    请选择0 |&amp;#34;&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;----------------------------&amp;#34;&lt;/span&gt;)\n\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;main&lt;/span&gt;():\n    &lt;span class=\"hljs-comment\"&gt;# 初始化&lt;/span&gt;\n    p &amp;#61; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] * &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;\n    f &amp;#61; [&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] * &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;\n    Case &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    opt &amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; opt !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;*************************************第%d期抽奖**********************************&amp;#34;&lt;/span&gt; % Case)\n        print_opt()\n        opt &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请选择操作:&amp;#34;&lt;/span&gt;))\n\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; opt &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n            awm(p)\n            select(f)\n            result &amp;#61; check(p, f)\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;中奖号码:&amp;#34;&lt;/span&gt;, p)\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;投注号码:&amp;#34;&lt;/span&gt;, f)\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;恭喜您&amp;#xff0c;您获得了%s&amp;#34;&lt;/span&gt; % result)\n            Case &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; opt &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;退出本期抽奖&amp;#xff01;&amp;#34;&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入错误&amp;#xff0c;请重新选择操作&amp;#xff01;&amp;#34;&lt;/span&gt;)\n\n\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; __name__ &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:\n    main()\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["python完成兑奖程序", ["问题描述", "\n", "\n", " 基本要求", "（1）    设计投注的数据结构。", "（2）    投注方式：键盘输入", "（3）    设计求解中奖注的算法。", "（4）    输出中奖注。", "（5）   输入随机注，判断是否中奖，中几等奖。", "\n", "import random\nimport time\n \n\n \ndef awm(p):\n   \n    i = 0\n    ", "while", " i <= 5:\n        k = random.randint(1, 22)\n        ", "if", " k ", "not", " ", "in", " p:\n            p[i] = k\n            i += 1\n \ndef select(f):\n    ", "print", "(", "\"请从1~22之间任意选取5个不同的整数作为投注号码:\"", ")\n    # 输入五个数，并排序\n    ", "for", " i ", "in", " range(5):\n        f[i] = int(input())\n    f.sort()\n    \n    # 对输入值进行验证\n    ", "while", " ", "True", ":\n        k = ", "True", "\n        # 判断范围是否在1~22之间\n        ", "if", " any(num < 1 ", "or", " num > 22 ", "for", " num ", "in", " f):\n            k = ", "False", "\n        # 判断输入的五个数是否不同\n        ", "if", " len(", "set", "(f)) < 5:\n            k = ", "False", "\n        # 如果有不符合要求的值，则重新输入\n        ", "if", " ", "not", " k:\n            ", "print", "(", "\"输入错误！请从1~22之间任意选取5个不同的整数作为投注号码:\"", ")\n            ", "for", " i ", "in", " range(5):\n                f[i] = int(input())\n            f.sort()\n        ", "else", ":\n            break\n        \ndef check(p, f):\n  \n    count = 0\n    k = ", "False", "\n    ", "for", " i ", "in", " range(5):\n        ", "if", " f[i] ", "in", " p:\n            count += 1\n    ", "if", " f.count(p[5]) > 0:\n        k = ", "True", "\n    # 根据规则判断中奖情况\n    ", "if", " count == 5:\n        return 1\n    elif count == 4 ", "and", " k:\n        return 2\n    elif count == 4 ", "and", " ", "not", " k:\n        return 3\n    elif count == 3:\n        return 4\n    elif count == 2:\n        return 5\n    ", "else", ":\n        return 0\n    \ndef win(k):\n    ", "if", " k == 1:\n        ", "print", "(", "\"一等奖!\"", ")\n    elif k == 2:\n        ", "print", "(", "\"二等奖!\"", ")\n    elif k == 3:\n        ", "print", "(", "\"三等奖!\"", ")\n    elif k == 4:\n        ", "print", "(", "\"四等奖!\"", ")\n    elif k == 5:\n        ", "print", "(", "\"五等奖!\"", ")\n    ", "else", ":\n        ", "print", "(", "\"未中奖!舒服了!\"", ")\n    \ndef print_opt():\n    ", "print", "(", "\"------------操作------------\"", ")\n    ", "print", "(", "\"|抽奖，            请选择1 |\"", ")\n    ", "print", "(", "\"|大奖设置，        请选择2 |\"", ")\n    ", "print", "(", "\"|退出本期抽奖，    请选择0 |\"", ")\n    ", "print", "(", "\"----------------------------\"", ")\n    \ndef main():\n    f = [0] * 5\n    P = [0] * 6\n    Case = 1\n    ", "print", "(", "\"*************************************第%d期抽奖**********************************\"", " % Case)\n    ", "print", "(", "\"选择1    开始\"", ")\n    ", "print", "(", "\"选择0    退出\"", ")\n    y = int(input(", "\"选择:\"", "))\n    ", "while", " ", "True", ":\n        ", "if", " y == 0:\n            break\n        elif y == 1:\n            awm(P)\n            Case += 1\n            ", "while", " ", "True", ":\n                print_opt()\n                h = int(input(", "\"请选择:\"", "))\n                ", "if", " h == 0:\n                    ", "print", "(", "\"本期抽奖结束!!!\"", ")\n                    ", "print", "(", "\"大奖号为：\"", ", ", "end", "=", "\"\"", ")\n                    ", "print", "(*P[:5], ", "sep", "=", "\"  \"", ")\n                    ", "print", "(", "\"特别号为：%d\"", " % P[5])\n                    break\n                elif h == 1:\n                    select(f)\n                    k = check(P, f)\n                    win(k)\n                elif h == 2:\n                    ", "print", "(", "\"---------兑--------奖----------方-----------式----------\"", ")\n                    ", "print", "(", "\"|头等奖:5个号码与5个暗码完全相同                        |\"", ")\n                    ", "print", "(", "\"|二等奖:4个号码与4个暗码完全相同，另一个号码与特别号相同|\"", ")\n                    ", "print", "(", "\"|三等奖:4个号码与4个暗码完全相同，另一个号码与特别号不同|\"", ")\n                    ", "print", "(", "\"|四等奖:3个号码与3个暗码完全相同                        |\"", ")\n                    ", "print", "(", "\"|五等奖:2个号码与2个暗码完全相同                        |\"", ")\n                    ", "print", "(", "\"|大奖号码将在本期结束公布                               |\"", ")\n                    ", "print", "(", "\"---------------------------------------------------------\"", ")\n    ", "print", "(", "\"结束，谢谢参与!!!\"", ")\n \n", "if", " __name__ == ", "'__main__'", ":\n    main()\n\n", "\n", "对这些代码进行修改，使其满足题目要求"]], "Tag": "程序设计"}
{"Answer": "```\r\n#include&lt;stdio.h&gt;\r\nint pd(double i)\r\n{\r\n    if(i&lt;=1e5){return 1;}\r\n    if(i&gt;1e5&amp;&amp;i&lt;=2e5){return 2;}\r\n    if(i&gt;2e5&amp;&amp;i&lt;=4e5){return 3;}\r\n    if(i&gt;4e5&amp;&amp;i&lt;=6e5){return 4;}\r\n    if(i&gt;6e5&amp;&amp;i&lt;=1e6){return 5;}\r\n    if(i&gt;1e6){return 6;}\r\n}\r\nint main()\r\n{\r\n    double i,y;\r\n    printf(\"请输入利润i：\\n\");\r\n    scanf(\"%lf\",&amp;i);\r\n    switch(pd(i))\r\n    {\r\n        case 1:y=1.1*i;break;\r\n        case 2:y=1.1e5+(i-1e5)*0.075;break;\r\n        case 3:y=11000007500+(i-2e5)*0.05;break;\r\n        case 4:y=11000017500+(i-4e5)*0.03;break;\r\n        case 5:y=11000023500+(i-6e5)*0.015;break;\r\n        case 6:y=11000029500+(i-1e6)*0.01;break;\r\n    }\r\n    printf(\"获得的总奖金为：%f\",y);\r\n}\r\n```", "Konwledge_Point": "算法与程序设计", "Question": ["关于if与switch的使用过程中遇到的问题", ["在谭浩强著的程序设计基础一书中有这样一道题：", "\n\n", "我试着做了一下", "\n程序清单：", "\n\n", "#include<stdio.h>\npd(double i)\n{\n    if(i<=1e5){return 1;}\n    if(i>1e5&&i<=2e5){return 2;}\n    if(i>2e5&&i<=4e5){return 3;}\n    if(i>4e5&&i<=6e5){return 4;}\n    if(i<6e5&&i<=1e6){return 5;}\n    if(i>1e6){return 6;}\n}\nint main()\n{\n    double i,y;\n    printf(\"请输入利润i：\\n\");\n    scanf(\"%lf\",i);\n    switch(pd(i))\n    {\n        case 1:y=1.1*i;break;\n        case 2:y=1.1e5+(i-1e5)*0.075;break;\n        case 3:y=11000007500+(i-2e5)*0.05;break;\n        case 4:y=11000017500+(i-4e5)*0.03;break;\n        case 5:y=11000023500+(i-6e5)*0.015;break;\n        case 6:y=11000029500+(i-1e6)*0.01;break;\n    }\n    printf(\"获得的总奖金为：%f\",y);\n}\n", "\n\n", "但得到的结果却和我想的不太一样：", "\n\n", "初学者一枚，想请教一下代码哪里错误了？", "\n遇到这些较多分类的题目应该怎么用算法？", "\n多谢大神指教。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;参考如下&amp;#xff1a;类图、讲解、代码都比较全&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/qq_25218219/article/details/121540895\" id=\"textarea_1655002177393_1655002357331_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/qq_25218219/article/details/121540895&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["求写C语言代码（C语言）", ["要求：", "1．系统基本信息的描述（如商品编号、商品名称、进价、售价、库存数量等），建议用结构体数组存储，或动态分配内存。", "2．各功能模块用函数实现。", "3．具有用户登录功能；设计程序运行界面；能用菜单选择各功能。", "4．设计报告主要包括：", "（1）程序流程图", "（2）结构体类型说明", "（3）各模块的功能、流程图和对应的函数", "（4）各函数中用到的主要算法和函数间的联系", "（5）程序的使用说明", "\n", "题目:", "网吧管理系统", "网吧收费的增加、删除、修改、查找、排序、计算等。", "\n", "注:只有两天时间", "（一些过程需要在旁边注明这一步是有什么用）"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-comment\"&gt;//要求设计一个函数,求出一元二次方程ax2&amp;#43;bx&amp;#43;c&amp;#61;0的实根,系数a,b,c的值从键盘上输入,&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//求方程根的计算公式为x&amp;#61;b±√b-4ac,当b2-4ac小于0时,输出“无实根!”;否则输出x的两个实根。&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//算法提示:&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//先判断b2-4ac是否大于或等于0,若不满足条件则输出提示信息后直接结束程序。&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;uqe&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a,b,c,q,x1,x2;\n\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf%lf%lf&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;b,&amp;amp;c);\n    q&amp;#61;b*b&lt;span class=\"hljs-number\"&gt;-4&lt;/span&gt;*a*c;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (q&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;无实根!&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lg %lg&amp;#34;&lt;/span&gt;,b&amp;#43;&lt;span class=\"hljs-built_in\"&gt;sqrt&lt;/span&gt;(q),b-&lt;span class=\"hljs-built_in\"&gt;sqrt&lt;/span&gt;(q));\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;uqe&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-comment\"&gt;//输入2 3 1&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//输出4 2&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//输入1 1 1&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//输出无实根!&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["一元二次方程有无实根的问题（求注释）", ["要求设计一个函数,求出一元二次方程ax2+bx+c=0的实根,系数a,b,c的值从键盘上输入,求方程根的计算公式为x=b±√b-4ac,当b2-4ac小于0时,输出“无实根!”;否则输出x的两个实根。", "算法提示:", "先判断b2-4ac是否大于或等于0,若不满足条件则输出提示信息后直接结束程序。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;char P0,P1,P2;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["大佬能帮我修改一下程序吗  提示说没定义  所以要怎么改呀", ["void delay(int t) 调用该子程序能实现延时功能      ", "\n\n", "{                                     通过参数t，可以调成延时时间", "\n\n", "   while(t--)", "\n\n", "  {", "\n\n", "unsigned int i;                      设置变量i的变化范围，能调整延时的单位时间", "\n\n", "   for(i=0;i<200;i++);               长度，i越小，延时的单位时间越短，精度越高", "\n\n", "   }", "\n\n", "} ", "\n\n", " ", "\n\n", "3.2.2 数码管动态刷新显示程序", "\n\n", "void display(int i,int j,int x,int y)   变量i，j，x，y分别为分，秒，A分数，B分数", "\n\n", "{", "\n\n", "     if(jie==1&&bujin!=2)       当中间变量jie==1时，为上半场，此时对P1赋值", "\n\n", "P1=0xbf;                 使P1=0xbf, 即P1=1011 1111B,上半场指示灯对应点亮", "\n\n", "     ", "\n\n", "P2=0xfe;         数码管动态刷新显示程序  P2=1111 1110, i为分钟", "\n\n", "     P0=seg[i%100/10];        P2=0xfe，所以刷新显示时间的分钟十位，调用延时程序，", "\n\n", "     delay(1);                延时数码管的点亮", "\n\n", "     P2=0xff;", "\n\n", "     P0=0;", "\n\n", " ", "\n\n", "     P2=0xfd;                同理，动态刷新时分钟个位并延时点亮", "\n\n", "     P0=seg[i%10];", "\n\n", "     delay(1);", "\n\n", "     P2=0xff;", "\n\n", "     P0=0;", "\n\n", " ", "\n\n", "     P2=0xfb;                同理，动态刷新时秒钟十位并延时点亮", "\n\n", "     P0=seg[j%100/10];", "\n\n", "     delay(1);", "\n\n", "     P0=0;", "\n\n", "     P2=0xff;", "\n\n", " ", "\n\n", "     P2=0xf7;               同理，动态刷新时秒钟个位并延时点亮", "\n\n", "     P0=seg[j%10];", "\n\n", "     delay(1);", "\n\n", "     P0=0;", "\n\n", "     P2=0xff;", "\n\n", " ", "\n\n", "     P2=0xef;           同理，动态刷新A分数十位并延时点亮", "\n\n", "P0=seg[x%100/10];", "\n\n", "delay(1);", "\n\n", "P2=0xff;", "\n\n", "P0=0;", "\n\n", " ", "\n\n", "P2=0xdf;              同理，动态刷新A分数个位并延时点亮", "\n\n", "P0=seg[x%10];", "\n\n", "delay(1);", "\n\n", "P2=0xff;", "\n\n", "P0=0;", "\n\n", "  ", "\n\n", "P2=0xbf;              同理，动态刷新B分数十位并延时点亮", "\n\n", "P0=seg[y%100/10];", "\n\n", "     delay(1);", "\n\n", "     P0=0;", "\n\n", "     P2=0xff;", "\n\n", " ", "\n\n", "P2=0x7f;               同理，动态刷新B分数十位并延时点亮", "\n\n", "     P0=seg[y%10];", "\n\n", "     delay(1);", "\n\n", "     P0=0;", "\n\n", "     P2=0xff;", "\n\n", "}", "\n\n", "本设计中各个数码管采用动态驱动，使各位数码管逐个轮流受控显示，由于扫描速度极快（本实验中大约每20毫秒刷新一次），所以显示效果与静态驱动相同。", "\n\n", " ", "\n\n", "3.2.3 T0中断程序", "\n\n", "void t0(void) interrupt 1 本设计调用定时器T0，计时单位为一秒", "\n\n", "{  ", "\n\n", "TH0=0xb1;                对定时器T0送入计数初值，由于TH0=0xb; ", "\n\n", "   TL0=0x10;                TL0=0x10  故定时器定时为20毫秒，即每", "\n\n", "   if(n==0)               20毫秒调用一次void t0(void) interrupt 1", "\n\n", "   {                      ", "\n\n", "    n=60;", "\n\n", "m--;", "\n\n", "   }", "\n\n", "   i++;", "\n\n", "   if(i==50) ", "\n\n", "   {                          令i值为50  50*20毫秒=1秒，来实现计时", "\n\n", "   n--;                       单位为一秒", "\n\n", "   i=0;", "\n\n", "   }", "\n\n", "   display(m,n-1,x,y);        调用动态刷新显示程序，即每20毫秒刷新一", "\n\n", "}                             次数码管", "\n\n", " ", "\n\n", "3.2.4  加分子程序", "\n\n", "void keyjiafen1()  ", "\n\n", "{                        当检测到RXD按键按下时，调用延时子程序    if(RXD==0)                  实现消除按键抖动功能，即，当     ", "\n\n", "delay(1);，", "\n\n", "   {                        检测到按键按下时候，延时，按键仍按下，说明", "\n\n", "     if(RXD==0)             按键确实按下，非抖动，A对应加分", "\n\n", "      {", "\n\n", "  while(RXD==0); ", "\n\n", "  x++;", "\n\n", "   }", "\n\n", "   }   ", "\n\n", " if(TXD==0)                     检测TXD加分按键时候按下，B加分", "\n\n", "   {", "\n\n", "   delay(1);", "\n\n", "    if(TXD==0)", "\n\n", "  {", "\n\n", "   while(TXD==0);", "\n\n", "   y++;", "\n\n", "  }", "\n\n", "    } ", "\n\n", "}", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", "3.2.5减分子程序", "\n\n", "void keyjianfen1() 减分按键检测子程序，其基本算法及功能与加分", "\n\n", "{                           相同", "\n\n", "   if(WR==0)                        ", "\n\n", "   {", "\n\n", "   delay(1);", "\n\n", "   if(WR==0)", "\n\n", "      {", "\n\n", "   while(WR==0); ", "\n\n", "   x--;", "\n\n", "  }", "\n\n", "   }   ", "\n\n", " if(RD==0)", "\n\n", "   {", "\n\n", "  delay(1);", "\n\n", "  if(RD==0)", "\n\n", "  {", "\n\n", "  while(RD==0);", "\n\n", "   y--;", "\n\n", "  }", "\n\n", "   } ", "\n\n", "}", "\n\n", " ", "\n\n", "3.2.6 调整时间子程序", "\n\n", "调整时间子程序,使时间快速倒退或快进，实现回表功能，同时回表之后能自动暂停", "\n\n", " ", "\n\n", "void key2()  ", "\n\n", "{", "\n\n", "   if(INT0==0)", "\n\n", "  {                   ", "\n\n", "delay(10);", "\n\n", "if(INT0==0)         回表子程序，检测到INT0按下时，使时间回倒", "\n\n", "    { ", "\n\n", "chuzanting==0;    chuzanting==0; zanting=1;为附加变量，当回表按键", "\n\n", "zanting=1;        松开时,表暂停，这两个变量用来调用暂停", "\n\n", "n++;", "\n\n", "if(n==60)", "\n\n", "   {", "\n\n", "m++;", "\n\n", "n=1;", "\n\n", "}", "\n\n", "    }                         ", "\n\n", "  }                           ", "\n\n", "   if(INT1==0)             快表子程序，检测到INT1按下时，使倒计加快，", "\n\n", "  {                        通常情况下与回表子程序配合使用，即当回表", "\n\n", "                            回过的时候，按此键调整时间", "\n\n", "    delay(10);              chuzanting==0; zanting=1;作用同上", "\n\n", "    if(INT1==0)", "\n\n", "{ ", "\n\n", "chuzanting==0;", "\n\n", "zanting=1;", "\n\n", "n--;", "\n\n", "}", "\n\n", "   }", "\n\n", "}", "\n\n", "void shijian()              该程序使回表和快表按键松开时候能自动暂停", "\n\n", "{", "\n\n", "  if(zanting==1&&INT0==1&&INT1==1&&chuzanting==0 ) ", "\n\n", "  {", "\n\n", "EA=0;         zanting==1&&INT0==1&&INT1==1&&chuzanting==0作用为", "\n\n", "zanting=0;     当按键松开的时候，调用暂停程序条件", "\n\n", "huzanting=0;   zanting=0;chuzanting=0,初始化，以便下次回表和快表         while(1)          按键松开时候仍能调用暂停程序", "\n\n", "    {", "\n\n", "          display(m,n,x,y);     ", "\n\n", "             if(P1_0==0)         当检测暂停键按下，开中断，跳出暂停", "\n\n", "             {", "\n\n", "               delay(1);", "\n\n", "               if(P1_0==0)", "\n\n", "                {", "\n\n", "                 while(P1_0==0); ", "\n\n", "                   EA=1;", "\n\n", "  ", "\n\n", "                  break;", "\n\n", "                 }", "\n\n", "             } ", "\n\n", "          }", "\n\n", "   }", "\n\n", "}", "\n\n", " ", "\n\n", "3.2.7  半场交换比分子程序", "\n\n", "void key3()", "\n\n", "{", "\n\n", "   int temp;              定义中间变量temp，检测到有按键按下时候", "\n\n", "   if(zidong==1&&jie==1)  通过temp交换甲队，乙队两队比赛分数", "\n\n", "   {", "\n\n", "    temp=x;               zidong==1&&jie==1是判断半场的条件              ", "\n\n", "    y=temp;", "\n\n", "    display(m,n,x,y);     刷新数码管", "\n\n", "    zidong=0;            ", "\n\n", "bujin=0; ", "\n\n", "   }", "\n\n", "  ", "\n\n", "}", "\n\n", "3.2.8  比赛暂停子程序", "\n\n", "void key4()                         ", "\n\n", "{", "\n\n", " ", "\n\n", "   if(P1_0==0)          检测到暂停按键按下时候，令EA=0关闭中断", "\n\n", "  {", "\n\n", "     delay(1);          同通过死循环程序while(1)，不断刷新数码管", "\n\n", "     if(P1_0==0)       当暂停键再次按下时候，开中断，以使比赛时间", "\n\n", "     {                  继续倒计时，由于在暂停的时候，程序处于死循", "\n\n", "        while(P1_0==0); ", "\n\n", "         EA=0;           无法回到主程序，暂停时，除了暂停键", "\n\n", "         while(1)        其他按键按下均无效", "\n\n", "    {                         ", "\n\n", "          display(m,n,x,y);", "\n\n", "             if(P1_0==0)", "\n\n", "             {          当暂停键再次按下时候，EA=1开中断，计时数码管", "\n\n", "               delay(1);    继续倒计时，同时通过break语句，跳出死循环", "\n\n", "               if(P1_0==0)", "\n\n", "                {", "\n\n", "                 while(P1_0==0); ", "\n\n", "                   EA=1;", "\n\n", "                  break;", "\n\n", "                 }", "\n\n", "             } ", "\n\n", "          }", "\n\n", "       }", "\n\n", "    }", "\n\n", "}   ", "\n\n", "3.2.9    中场指示灯程序", "\n\n", "void over()  ", "\n\n", "{", "\n\n", " if((m==0)&&(n==0))    当m，n均为0的时候，通过变量jie的值判断比赛  ", "\n\n", "   {                   是否结束 ", "\n\n", "       if(jie>1)   如果jie>1,说明半场到了，比赛没有结束，     ", "\n\n", "     {                 令m=2,n=0,关中断，再次按下暂停键时候继续倒计时", "\n\n", "       m=2;         同是T1=1；delay(400) ； delay(400)；，是蜂鸣器", "\n\n", "       n=0;         发声报警", "\n\n", "       EA=0;", "\n\n", "           T1=1;", "\n\n", "        delay(400);", "\n\n", "         T1=0;", "\n\n", "         while(1)        ", "\n\n", "        {             ", "\n\n", "       display(m,n,x,y);  刷新数码管，等待暂停减再次按下，跳出暂停", "\n\n", " ", "\n\n", "  ", "\n\n", "  if(P1_0==0)", "\n\n", "              {", "\n\n", "               delay(1);", "\n\n", "              if(P1_0==0)", "\n\n", "                  {", "\n\n", "                   while(P1_0==0); ", "\n\n", "                     EA=1;", "\n\n", "                    break;", "\n\n", "                   }", "\n\n", "             } ", "\n\n", " ", "\n\n", "            }", "\n\n", "        jie--;", "\n\n", "  }", "\n\n", "   if(jie==1&&bujin==2)     如果jie==1&&bujin==2,说明比赛结束了，   {               关闭中断，比赛秒表不再走动，同时不短刷新数码管， EA=0;                                   ", "\n\n", "m=0;", "\n\n", "n=0;", "\n\n", "T1=1;              全场比赛结束蜂鸣器开始报警", "\n\n", "        delay(400);", "\n\n", "        T1=0;", "\n\n", "P1=0x3f;           P1=0x3f上下半场指示灯同时点亮，比赛结束      while(1)", "\n\n", "     display(m,n,x,y);   同时应当不断刷新数码管", "\n\n", "   }", "\n\n", "}    ", "\n\n", "}", "\n\n", "3.2.10 主程序", "\n\n", "void main()    ", "\n\n", "{   TMOD=0x01;            首先设置定时器工作方式", "\n\n", "    EA=1;                  ", "\n\n", "    ET0=1;                 ", "\n\n", "TH0=0xb1;           定时器送计数初值，EA=1，开中断，P3口电平拉高", "\n\n", "TL0=0x10;            P1=0x7f， 上半场指示灯点亮", "\n\n", "TR0=1;               TR0=1启动定时器", "\n\n", "P3=0xff; ", "\n\n", "P1=0x7f;", "\n\n", "    T1=0;", "\n\n", "while(1)             主程序通过 while(1)，反复调用循环体内的子程序", "\n\n", "{                    来执行相应的功能", "\n\n", "     keyjiafen1();              ", "\n\n", "keyjianfen1();            ", "\n\n", "                            ", "\n\n", "     key2();", "\n\n", "if(zidong==1)             zidong==1为key3()执行条件", "\n\n", "key3();                   key3()半场交换场地时自动交换双方", "\n\n", "if(n==18&&bujin==0)       比赛分数子程序,所以仅当中场时调用", "\n\n", "{", "\n\n", "  bujin=2;                修改变量bujin的值，目的是设定over()", "\n\n", "  }                       中第二个if语句的执行条件", "\n\n", "      shijian();", "\n\n", " ", "\n\n", "key4(); ", "\n\n", "     over();", "\n\n", "}", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1.缺少头文件&amp;#xff0c;在最上面添加&amp;#xff1a;#include &amp;lt;stdio.h&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;2.main函数前面加void或者int &amp;#xff0c;如果是int&amp;#xff0c;返回的时候是return 0&amp;#xff0c;而不是return&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["请问我的代码为什么无法编辑运行？", ["\n", "#define MAXSIZE 100\ntypedef int keytype;\ntypedef struct\n { keytype key;\n }redtype;\ntypedef struct\n { redtype elem[MAXSIZE];\n int length;\n }Sstable;\nint sxsearch(Sstable ST,keytype Key)/*顺序查找函数*/\n { int i;\n ST.elem[0].key=Key;\n for(i=ST.length;ST.elem[i].key!=Key;--i);\n return i;\n }\nint binsearch(Sstable ST,keytype Key)/*二分法查找函数*/\n { int low,mid,high;\n low=1;high=ST.length;\n while(low<=high)\n { mid=(low+high)/2;\n if (Key==ST.elem[mid].key)\n return mid;\n else if (Key<ST.elem[mid].key)\n high=mid-1;\n else low=mid+1;\n }\n return 0;\n }\nmain()/*主函数*/\n{ Sstable ST ;\n int i,pos,x,key;\n pos=0;\n while(1)\n { printf(\"\\n 1---Sxserach\\n\");\n printf(\" 2---Binserach\\n\");\n printf(\" 3---Exit\\n\");\n printf(\"please input choose(1-3):\");\n scanf(\"%d\",&x);\n switch(x)\n { case 1:\n printf(\"please input table length n:\");/*请求输入顺序表表长*/\n scanf(\"%d\",&ST.length);\n printf(\"please input n data:\\n\");/*请求输入n个关键字值*/\n for(i=1;i<=ST.length;i++)\n scanf(\"%d\",&ST.elem[i].key);\n printf(\"please input key:\");/*请求输入待查找的记录关键字值*/\n scanf(\"%d\",&key);\n pos=sxsearch(ST,key); /*调用顺序查找函数*/\n break;\n case 2:\n printf(\"please input table length n:\");/*请求输入顺序表表长*/\n scanf(\"%d\",&ST.length);\n printf(\"please input n data(sort):\\n\");/*请求输入n个关键字值（必须升序排列）*/\n for(i=1;i<=ST.length;i++)\n scanf(\"%d\",&ST.elem[i].key);\n printf(\"please input key:\");/*请求输入待查找的记录关键字值*/\n scanf(\"%d\",&key);\n pos=binsearch(ST,key);/*调用二分法查找函数*/\n break;\n case 3: return;\n default: printf(\"choose error\\n\");\n }\n if(pos==0)\n printf(\"\\nthe data is not found.\\n\"); /*若找不到，提示信息*/\n else\n printf(\"\\nthe data is at position %d\\n\",pos);} /*若找到，输出位置*/\n}\n", "\n\n", "一、实验目的", "\n\n", "1. 掌握顺序查找的算法实现。", "\n\n", "2. 掌握二分查找操作的算法实现及实现该查找的前提。", "\n\n", "3. 理解并掌握哈希查找的算法实现过程。", "\n\n", "二、实验内容", "\n\n", "建立顺序查找表，并在此查找表上分别实现顺序查找和二分查找操作；建立哈希表，并在此表上实现哈希查找。", "\n\n", "难度A：根据输入的查找表的长度n和n个关键字值，分别建立顺序查找表，分别进行顺序查找和二分查找；", "\n\n", "难度B：根据输入的查找表的长度n和n个关键字值，构建哈希表，并实现哈希查找；", "\n\n", "难度C：在主程序中要求设计一个菜单，允许用户通过菜单多次选择执行哪一种查找操作；"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;逐个数字进行1-n之间的求余都不为0就行了&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;void main()\n{\n    int i,j,n,m,count&amp;#61;0;\n    bool bPrime &amp;#61; true;\n    scanf(&amp;#34;%d %d&amp;#34;,&amp;amp;n,&amp;amp;m);\n    for(i&amp;#61;n;i&amp;lt;&amp;#61;m;i&amp;#43;&amp;#43;)\n    {\n        bPrime &amp;#61; true;\n        for(j&amp;#61;2;j&amp;lt;&amp;#61;i/2;j&amp;#43;&amp;#43;)\n        {\n            if(i%j&amp;#61;&amp;#61;0)\n            {\n                bPrime &amp;#61; false;\n                break;\n            }\n        }\n        if(!bPrime)\n        {\n            count&amp;#43;&amp;#43;;\n            printf(&amp;#34;%d &amp;#34;,i);\n        }\n    }\n    if(count&amp;#61;&amp;#61;0)\n        printf(&amp;#34;ERROR&amp;#34;);\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["求质数，还有问题的流程图", ["编写一个C程序，实现以下功能：输入两个正整数，以此作为下限和上限，要求输出这两个正整数之间所有的质数，如果输入的两个数不合要求，则输出ERROR。要求采用结构化的设计方法，并提供实现该功能的算法（流程图）"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这种情况一般是死循环、无限递归&amp;#xff0c;或者被其他输入语句阻塞住了&lt;br /&gt;一步一步调&amp;#xff0c;看从哪一步开始没反应了&amp;#xff0c;不要靠猜&lt;br /&gt;i &amp;lt; a&amp;lt;b?b:a&lt;br /&gt;目测这东西是个死循环&amp;#xff0c;后面的三目运算符没有加括号&lt;br /&gt;改为i &amp;lt; (a&amp;lt;b?b:a)&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["代码问题，程序未终止", ["题目：根据main测试函数设计有理数类CRational，数据成员由分子、分母组成（都是整型，应表示成最简形式），完成分数显示（如用户输入的分子是4，分母是8，输出：1/2）、两个分数相加、相乘等功能。main函数不得修改。提示：用分子分母的最大公约数分别除分子和分母即得最简分数。", "\n", "出现的问题：程序运行后输完a b c d , 没有出现预期结果 ， 程序也没有终止", "\n", "\n", "#", "include", " ", "<iostream>", "\n", "using", " ", "namespace", " std;\n\n", "void", " ", "gongyueshu", "(", "int", " a , ", "int", " b)", "\n", "{\n    ", "int", " p=", "0", ";\n    ", "for", "(", "int", " i = ", "0", " ; i < a<b?b:a ; i++)\n        ", "if", "(a%i==", "0", "&&b%i==", "0", ")p=i;\n    ", "if", "(p!=", "0", "){a/=p;b/=p;}\n}\n\n", "class", " ", "CRational", "\n{\n", "public", ":\n    ", "CRational", "( ", "int", " a , ", "int", " b )\n    {\n        ", "gongyueshu", "(a,b);\n        mu = a;\n        zi = b;\n    }\n    ", "CRational ", "add", "(CRational p)", "\n    ", "{\n        ", "int", " mu1 = mu+p.mu;\n        ", "int", " zi1 = zi+p.zi;\n        ", "gongyueshu", "(mu1,zi1);\n        ", "CRational ", "result", "(mu1,zi1)", ";\n        ", "return", " result;\n    }\n    ", "void", " ", "show", "()", "\n    ", "{\n        cout<<mu<<", "\"/\"", "<<zi<<endl;\n    }\n    ", "CRational ", "multi", "(CRational p)", "\n    ", "{\n        ", "int", " mu2 = mu*p.mu;\n        ", "int", " zi2 = zi*p.zi;\n        ", "gongyueshu", "(mu2,zi2);\n        ", "CRational ", "result", "(mu2,zi2)", ";\n        ", "return", " result;\n    }\n", "private", ":\n    ", "int", " mu;\n    ", "int", " zi;\n    \n};\n\n", "int", " ", "main", "()", "\n\n", "{\n\n     ", "int", " a,b,c,d;", "//接受两个CRational对象的分子和分母", "\n\n     cin>>a>>b>>c>>d;\n\n     ", "CRational ", "f1", "(a,b)", ";", "//f1对象的分子为a，分母为b", "\n\n     ", "CRational ", "f2", "(c,d)", ";\n\n     CRational f3=f1.", "add", "(f2);", "//f1+f2的结果保存到f3中", "\n\n     f3.", "show", "();", "//显示形式：分子/分母", "\n\n     f3=f1.", "multi", "(f2);", "//f1*f2的结果保存到f3中", "\n\n     f3.", "show", "();\n\n     ", "return", " ", "0", ";\n\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;可以用快速排序和选择排序&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["找出a[n]中相差最小的两个元素", ["问题遇到的现象和发生背景", "\n", "设计算法找出数组a[n]中相差最小的两个元素，并说明最坏情况下的比较次数，其中n个元素用随机函数生成，范围在1-1000以内。至少设计两种算法解决该问题，并通过对基本语句计数法对两种算法的时间复杂度进行比较", "\n", "问题相关代码，请勿粘贴截图", "\n", "辅助资料：", "1.//随机函数的使用", "#include", "using namespace std;.", "#include<time.h>", "main()", "{", "int i,j;", "srand((int)time(0));//产生随机数种子", "for(i=0;i<10;i++)", "{", "    j=rand()%100+1;//生成1-100以内的随机数", "cout<<j<<\" \";", "}", "cout<<endl;", "}", "2.//基本语句的统计方法", "void main()", "{", "int a[10];   //定义一个数组即它的元素为10", "int i,j,temp;     //定义3个变量", "int sum=0; //基本语句计数器", "printf(\"输入10个整数：\\n\\a\");", "for(i=0;i<10;i++)", "   scanf(\"%d\",&a[i]); //依次输入10个整数", "for(i=0;i<9;i++)      //进行9轮排序", "{", "   for(j=0;j<9-i;j++) //每轮进行9-i次交换{", "  sum++;开始计数", "   if(a[j]>a[j+1])//基本语句", "   {", "      temp=a[j];", "      a[j]=a[j+1];   //大的沉底，小的上浮", "      a[j+1]=temp;", "   }", "}", "}", "Printf（“%d基本语句的执行次数为：\\n”,sum）;//输出计数结果", "printf(\"排序结果:\");", "for(i=0;i<10;i++)   //依次输出排序结果", "   printf(\"%d\\t \",a[i]);", "}", "\n\n\n", "我想要达到的结果", "\n", "有必要的注释，结合给的代码，完成程序"]], "Tag": "程序设计"}
{"Answer": "&lt;h1 id=\"h1_大致叙述_1640940808583\"&gt;大致叙述&lt;/h1&gt;\n&lt;h2 id=\"h2_问题1_1640940808583\"&gt;问题1&lt;/h2&gt;\n&lt;p&gt;我不知道你要用C/S还是B/S架构&amp;#xff1b;从“客户机”来看似乎是要实现C/S架构&amp;#xff0c;但你的需求描述在我看来还是有点模糊。这里我还是分开来讲。&lt;br /&gt;B/S的web系统的话&amp;#xff0c;springboot&amp;#43;vue就是为初学者、轻量级开发而生的&amp;#xff08;事实上也可以做到企业级开发&amp;#xff0c;我们这里只是说这个技术栈门槛比较低&amp;#xff0c;容易学&amp;#xff09;&amp;#xff0c;基本两三个月就能用这个技术栈做出管理系统。&lt;br /&gt;C/S架构的话&amp;#xff0c;我个人并不熟悉java的有关技术栈&amp;#xff0c;但是C#的WPF是相当简单易学的&amp;#xff1b;值得一提的是C#的.NET技术也适用于B/S架构开发&amp;#xff08;但我个人认为比springboot&amp;#43;vue要麻烦&amp;#xff09;。但既然你是写服务器-客户端交互的软件&amp;#xff0c;那么网络访问肯定是不可避免的&amp;#xff1b;退一步讲&amp;#xff0c;就算你不用网络&amp;#xff0c;也总得用什么方法建立客户端和服务端的通信对吧&amp;#xff1f;可以用CAN&amp;#xff0c;RS232等很多协议&amp;#xff0c;但都比网络要麻烦。&lt;br /&gt;此外在选择C/S还是B/S的时候有一个要注意的地方&amp;#xff1a;B/S架构有很多封装好的框架&amp;#xff0c;比如springboot&amp;#xff0c;甚至不需要去关心通信细节&amp;#xff0c;只要写好接口就可以&amp;#xff0c;使用C/S无论如何恐怕都比B/S的这些架构要更加复杂。&lt;/p&gt;\n&lt;h2 id=\"h2_问题2_1640940808583\"&gt;问题2&lt;/h2&gt;\n&lt;p&gt;不同语言不太一样。java就用java指令&amp;#xff0c;C#的话&amp;#xff0c;简单程序应该是双击打开就可以&amp;#xff0c;需要命令行参数的话我就不太清楚了。&lt;/p&gt;\n&lt;h1 id=\"h1_细节_1640940808583\"&gt;细节&lt;/h1&gt;\n&lt;p&gt;我们再说说细节方面的东西。&lt;/p&gt;\n&lt;h2 id=\"h2_cs架构下如何启动程序&amp;#xff1f;_1640940808583\"&gt;C/S架构下如何启动程序&amp;#xff1f;&lt;/h2&gt;\n&lt;p&gt;Java需要使用java指令。建议考虑maven&amp;#xff0c;maven使用mvn package打包出来的jar文件&amp;#xff0c;比如说叫做a.jar&amp;#xff0c;那么执行就是java -jar a.jar。&lt;br /&gt;C#的话&amp;#xff0c;没有命令行参数应该是双击打开即可&amp;#xff0c;有的话就得用CLI界面。&lt;/p&gt;\n&lt;h2 id=\"h2_技术栈的任务量比较_1640940808583\"&gt;技术栈的任务量比较&lt;/h2&gt;\n&lt;h3 id=\"h3_bs架构_1640940808583\"&gt;B/S架构&lt;/h3&gt;\n&lt;p&gt;SpringBoot&amp;#43;Vue3技术栈非常容易实现。前者需要了解Java&amp;#xff0c;后者需要了解Node.js&amp;#xff1b;都只需要了解基本语法和框架API&amp;#xff0c;完全不需要了解底层原理&amp;#xff0c;工作量非常少&amp;#xff08;对毕设而言&amp;#xff09;。&lt;br /&gt;如果不分离前后端的话&amp;#xff0c;可以舍弃Vue&amp;#xff0c;学习成本可能少一些&amp;#xff0c;但工作量可能会大一些。&lt;/p&gt;\n&lt;h3 id=\"h3_cs架构_1640940808583\"&gt;C/S架构&lt;/h3&gt;\n&lt;p&gt;客户端技术栈比较复杂&amp;#xff0c;我只用过Qt&amp;#xff0c;工作量肯定比硬写C&amp;#43;&amp;#43;要少&amp;#xff0c;但仍然比SpringBoot&amp;#43;Vue复杂。C#的话&amp;#xff0c;优势主要在WPF易用&amp;#xff0c;界面可以直接画&amp;#xff0c;但是仍然需要考虑写通信控制逻辑&amp;#xff0c;而SpringBoot是不需要自己写控制逻辑的&amp;#xff0c;但可以进行优化。&lt;br /&gt;我个人的意见是&amp;#xff1a;SpringBoot&amp;#43;Vue是工作量最少的&amp;#xff0c;但普通本科一般不教&amp;#xff0c;学习成本大一些。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["关于毕设的一个问题，Java||C#", ["问题背景：", "简单描述一下，本人毕设想做一个本地不需联网的单机客户服务器系统", "几个客户机可以给服务器发送信息。服务器作为前台，客户机是服务员。", "\n", "奈何本人本科期间虽认真学过Java语法和算法以及C#但还是感觉无从下手", "\n", "问题1：", "Java的界面设计本科几乎没有涉及，学的都是一些老掉牙的技术，本科教材是2001年的。不过我可以自学，就是问下，java或c＃可以实现我所描述的功能吗？任务量重不重呢？", "\n", "问题2：", "写好的java或c#程序怎么能单独打包出来成咱们用的app的样子呢？总不能每次运行都要先打开eclipse吧？", "\n", "先谢谢佬们了！！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;贴过去试一试效果呢&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#include&amp;lt;string.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;\n\nchar *compress(char *src);\n\nint main()\n{\n    char src[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,src);\n \n    char *ps &amp;#61; compress(src);\n    \n    puts(ps);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\nchar *compress(char *src)\n{\n    char oldch &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//前一个字符&lt;/span&gt;\n    char &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;ch&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//最新字符&lt;/span&gt;\n    char *&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt; &amp;#61; src;&lt;span class=\"hljs-comment\"&gt;//在原来src字符串上面填充压缩后的字符串&lt;/span&gt;\n    char *returnsrc &amp;#61; src;&lt;span class=\"hljs-comment\"&gt;//返回字符串到首地址&lt;/span&gt;\n    int count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ;&lt;span class=\"hljs-comment\"&gt;//记录连续次数&lt;/span&gt;\n        \n    oldch  &amp;#61; *src;&lt;span class=\"hljs-comment\"&gt;//第一个字符串&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(*src !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;ch&lt;/span&gt; &amp;#61; *src;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;ch&lt;/span&gt; &amp;#61;&amp;#61; oldch)\n        {\n            count&amp;#43;&amp;#43;    ;&lt;span class=\"hljs-comment\"&gt;//前一个字符与最新字符相同 计数加一    &lt;/span&gt;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {    &lt;span class=\"hljs-comment\"&gt;//不相同开始统计计算&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(count &amp;lt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(count &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//计算为1 在新到字符串上填一个&lt;/span&gt;\n                {\n                    *&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#61;oldch;\n                    &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#43;&amp;#43;;\n                }\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(count &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//计数为2填两个&lt;/span&gt;\n                {\n                    *&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#61;oldch;\n                    &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#43;&amp;#43;;\n                    *&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#61;oldch;\n                    &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#43;&amp;#43;;\n                }\n\n                                \n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//计数大于3 &lt;/span&gt;\n            {\n                *&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#61;oldch;&lt;span class=\"hljs-comment\"&gt;//填充旧字符和压缩的数值&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#43;&amp;#43;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(count /&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//计算大于10的情况&lt;/span&gt;\n                {\n                    *&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&amp;#43;count/&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n                    &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#43;&amp;#43;;\n                }\n                *&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&amp;#43;count%&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#43;&amp;#43;;\n            }\n            \n            count &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//当前新字符计数1&lt;/span&gt;\n            oldch &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;ch&lt;/span&gt;;\n        }\n        \n        src&amp;#43;&amp;#43;;    &lt;span class=\"hljs-comment\"&gt;//字符串向后滚动&lt;/span&gt;\n            \n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(count &amp;lt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//填充最后字符计算情况 如 abcddddd, 最后d也要统计&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(count &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            *&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#61;oldch;\n            &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(count &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        {\n            *&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#61;oldch;\n            &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#43;&amp;#43;;\n            *&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#61;oldch;\n            &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#43;&amp;#43;;\n        }\n\n                                \n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; \n    {\n        *&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#61;oldch;&lt;span class=\"hljs-comment\"&gt;//填充旧字符和压缩的数值&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(count /&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n        {\n            *&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&amp;#43;count/&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#43;&amp;#43;;\n        }\n        *&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&amp;#43;count%&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt;&amp;#43;&amp;#43;;\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;//截断字符串&amp;#xff0c;丢弃原来没有压缩的字符串&lt;/span&gt;\n    *&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt;&lt;span class=\"hljs-type\"&gt;src&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;\n\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; returnsrc;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["字符串压缩指针函数数组", ["标题：字符串压缩", "问题描述：有一种简单的字符串压缩算法，对于字符串中连续出现的同一个英文字符，用该字符加上连续出现的次数来表示（连续出现次数小于3时不压缩）。", "\n", "\n", "\n", "主程序如下：\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<string.h>", "\n", "#", "include", "<stdlib.h>", "\n", "char", " *", "compress", "(", "char", " *src)", ";\n", "int", " ", "main", "()", "\n", "{\n    ", "char", " src[", "100", "];\n    ", "scanf", "(", "\"%s\"", ",src);\n\n    ", "char", " *ps = ", "compress", "(src);\n    \n    ", "puts", "(ps);\n    ", "return", " ", "0", ";\n}\n\n", "\n", "请设计一个程序，采用该压缩方法对字符串压缩并输出。请编写一个函数compress，采用该压缩方法对字符串src进行压缩。函数定义如下:", "char *compress(char *src);", "返回值：", "指向压缩后的字符串数据", "参数：", "src：输入/输出参数，输入表示待压缩字符串，输出表示压缩后的字符串", "\n", "注意：函数声明已包含在主程序中，不需要自己定义。只需要提交自定义的函数代码。", "\n", "主函数输入说明：", "    输入第一行为源字符串src（长度小于100），该字符串只包含大小写字母。", "主函数输出说明：", "    输出一个数据，表示压缩后的字符串。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你这个代码要写很长啊(((φ(◎ロ◎;)φ))) &amp;#xff0c;望采纳&amp;#xff01;&amp;#xff01;&amp;#xff01;点击该回答右侧的“采纳”按钮即可采纳&amp;#xff01;&amp;#xff01;&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;ctype.h&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 定义单词种类\ntypedef enum {\n  KEYWORD,   &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 关键字\n  DELIMITER, &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 界符\n  IDENTIFIER,&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 标识符\n  INTEGER    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 常整型数\n} TokenType;\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 关键字表\nchar *keywords[] &amp;#61; {\n  &lt;span class=\"hljs-string\"&gt;&amp;#34;int&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;void&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;break&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;float&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;while&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;do&amp;#34;&lt;/span&gt;,\n  &lt;span class=\"hljs-string\"&gt;&amp;#34;struct&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;const&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;case&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;for&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;return&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;if&amp;#34;&lt;/span&gt;,\n  &lt;span class=\"hljs-string\"&gt;&amp;#34;default&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;else&amp;#34;&lt;/span&gt;\n};\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 界符表\nchar delimiters[] &amp;#61; {\n  &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;--&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;lt;&amp;#61;&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;,\n  &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#61;&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#43;&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;{&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;}&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;\\&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;\n};\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 标识符表\nchar *identifiers[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\nint identifier_count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 常整数表\nint integers[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\nint integer_count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; Token 序列\nstruct Token {\n  TokenType type; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 单词种类\n  char *lexeme;   &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 单词内容\n  int value;      &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 单词值\n} tokens[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\nint token_count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 读入的源程序\nchar source[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\nint source_pos &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 读入下一个字符\nchar get_char() {\n  return source[source_pos&amp;#43;&amp;#43;];\n}\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 跳过空白符\nvoid skip_space() {\n  &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (isspace(source[source_pos])) source_pos&amp;#43;&amp;#43;;\n}\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 读入单词\nvoid get_token() {\n  skip_space();\n\n  char ch &amp;#61; get_char();\n\n  &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 如果是字母&amp;#xff0c;则读入单词\n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (isalpha(ch)) {\n    int lexeme_pos &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    char lexeme[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (isalpha(ch) || isdigit(ch)) {\n      lexeme[lexeme_pos&amp;#43;&amp;#43;] &amp;#61; ch;\n      ch &amp;#61; get_char();\n    }\n    lexeme[lexeme_pos] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;\n    source_pos--; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 将最后读入的非字母或数字字符放回去\n\n    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 判断是否为关键字\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (strcmp(keywords[i], lexeme) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\ntokens[token_count].type &amp;#61; KEYWORD;\ntokens[token_count].lexeme &amp;#61; lexeme;\ntoken_count&amp;#43;&amp;#43;;\nreturn;\n}\n}\n\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 如果不是关键字&amp;#xff0c;则加入标识符表\nidentifiers[identifier_count] &amp;#61; lexeme;\ntokens[token_count].type &amp;#61; IDENTIFIER;\ntokens[token_count].lexeme &amp;#61; lexeme;\ntokens[token_count].value &amp;#61; identifier_count;\nidentifier_count&amp;#43;&amp;#43;;\ntoken_count&amp;#43;&amp;#43;;\nreturn;\n}\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 如果是数字&amp;#xff0c;则读入常整数\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (isdigit(ch)) {\nint value &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (isdigit(ch)) {\nvalue &amp;#61; value * &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; (ch - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);\nch &amp;#61; get_char();\n}\nsource_pos--; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 将最后读入的非数字字符放回去\n\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 加入常整数表\nintegers[integer_count] &amp;#61; value;\ntokens[token_count].type &amp;#61; INTEGER;\ntokens[token_count].value &amp;#61; value;\ninteger_count&amp;#43;&amp;#43;;\ntoken_count&amp;#43;&amp;#43;;\nreturn;\n}\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 如果是界符&amp;#xff0c;则读入界符\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;18&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (delimiters[i] &amp;#61;&amp;#61; ch) { \n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 加入 Token 序列\ntokens[token_count].type &amp;#61; DELIMITER;\ntokens[token_count].lexeme &amp;#61; ch;\ntoken_count&amp;#43;&amp;#43;;\nreturn;\n}\n}\n}\n\nint main() {\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 读入源程序\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, source);\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 读入 Token 序列\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (source_pos &amp;lt; strlen(source)) {\nget_token();\n}\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 输出 Token 序列\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; token_count; i&amp;#43;&amp;#43;) {\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (tokens[i].type &amp;#61;&amp;#61; KEYWORD) {\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;(KEYWORD, %s)\\n&amp;#34;&lt;/span&gt;, tokens[i].lexeme);\n} &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (tokens[i].type &amp;#61;&amp;#61; IDENTIFIER) {\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;(IDENTIFIER, %s)\\n&amp;#34;&lt;/span&gt;, tokens[i].lexeme);\n} &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (tokens[i].type &amp;#61;&amp;#61; INTEGER) {\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;(INTEGER, %d)\\n&amp;#34;&lt;/span&gt;, tokens[i].value);\n} &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (tokens[i].type &amp;#61;&amp;#61; DELIMITER) {\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;(DELIMITER, %c)\\n&amp;#34;&lt;/span&gt;, tokens[i].lexeme);\n}\n}\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 输出标识符表\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\nIdentifier Table:\\n&amp;#34;&lt;/span&gt;);\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; identifier_count; i&amp;#43;&amp;#43;) {\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;, identifiers[i]);\n}\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt; 输出常整数表\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\nInteger Table:\\n&amp;#34;&lt;/span&gt;);\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; integer_count; i&amp;#43;&amp;#43;) {\nprintf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, integers[i]);\n}\n\nreturn &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["求下面问题的C语言代码", ["【题目内容】", "内容：", "1．设计扫描器的自动机；", "2．设计翻译、生成Token的算法；", "3．编写代码并上机调试运行通过。", "要求：", "扫描器可识别的单词包括：关键字、界符、标识符和常整型数。", "其中关键字表、界符表、标识符表、常整数表如下：", "关键字表K（1int  2void  3break  4float  5while  6do  7struct  8coust  9case  10for  11return  12if  13default  14else)", "界符表 P（1 -   2 /   3 (  4 )  5 --  6<=   7<   8+   9*   10>  11=  12,  13;  14++  15 {  16 }  17 '  18 \"   )", "标识符表I (1   2   3   4   5   6  7   8  9   10   11   12   13   14)", "常整数表C(1   2   3   4   5   6   7   8   9   10   11   12   13   14)", "【输入形式】", "源程序文件。", "【输出形式】", "（1）相应单词的Token序列；", "（2）标识符表，常数表。", "【测试用例1】", "输入：x10=x+y1*120+10;", "输出：", "Token序列：(I 1)(P 11)等等", "标识符表：x10 x y1", "常数表：120 10"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;那可以使用__hash__特殊方法吗&amp;#xff0c;像这样&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;main&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;obj&lt;/span&gt;):\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; obj.__hash__ &lt;span class=\"hljs-keyword\"&gt;is&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;not&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;None&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;不能用内置函数hash……不知道这个可不可以&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["测试参数是否为可哈希对象", ["函数 main() 接收一个任意类型的对象 obj 作为参数，", "要求测试其是否为可哈希对象", "，", "如果是就放回True，", "否则返回False。", "例如，main(3)返回True，main([])返回False。", "不能使用内置函数hash()，不能使用异常处理结构，不能导入任何模块。", "输出不能有多余内容。", "考点：哈希，面向对象程序设计？", "\n", "def main(obj):\n    ", "return", " ", "type", "(obj)\n    ", "'''\n    if ... hashable...:\n        return Ture\n    else...:\n        return False\n    '''", "\n", "'''\n答题错误！您的代码执行结果为：\n<class '", "int", "'>\n<class '", "str", "'>\n<class '", "tupl", "e'>\n<class '", "list", "'>\n<class '", "set", "'>\n'''", "\n"]], "Tag": "程序设计"}
{"Answer": "我有一个叫做收支管理系统，使用Qt c++写的，你可以改吧改吧，把他编程成绩管理系统，大致都一样，用户验证，数据录入，数据排序，数据查询，\r\n\r\n数据用的是本地sqlite，源码地址：http://download.csdn.net/detail/z609932088/8844945", "Konwledge_Point": "算法与程序设计", "Question": ["学生成绩管理系统 急急急C++", ["1  项目功能介绍", "\n设计实现一个学生成绩管理系统，它具有以下功能：", "\n1）实现单门成绩的输入、存储、输出；", "\n2）实现对单门成绩的排序；", "\n3）实现对不同成绩区间段的统计；", "\n4）实现对用户身份的验证；", "\n5）人机交互界面友好、程序容错能力高；", "\n 跪求！", "\n2  具体要求", "\n1）程序运行后首先显示学生成绩管理系统界面，其中包含系统功能介绍、操作说明及用户身份验证。", "\n​例如，开头显示“欢迎使用XXX学生成绩管理系统”，然后要求输入登录密码进行身份验证（密码为cup2016），接着显示系统包含功能及操作说明，比如输入“1”进行成绩输入，输入“2”进行成绩输出，输入“3”进行成绩查询，输入“4”进行成绩排序，输入“5”进行成绩统计等。", "\n\n", "2）成绩输入要求从键盘输入每个学生的成绩，并存储到文件中。", "\n​要求成绩输入拥有容错能力，如输入成绩必须为0~100之间的数，不符合要求的输入程序能够提示错误。", "\n\n", "3）成绩输出要求从文件中读取学生成绩，并显示在屏幕上。", "\n\n", "4）成绩排序要求能够对原文件中存储的成绩按照从高到低的顺序进行排序，并存储在另一个文件中，注意排序结果对应的学生序号。鼓励使用多种排序算法。", "\n\n", "5）实现对不同成绩段的统计。", "\n​要求输入感兴趣的成绩区间（例如小于60分、60分~80分、80分以上），统计该区间的学生人数及序号。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;定义个96元素数组&amp;#xff0c;初始都为0。然后根据来的人编号&amp;#xff0c;把对应倍数的值改为相反值&amp;#xff0c;即0改为1,1改为0&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;96&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j,count&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;41&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;96&lt;/span&gt;;j&amp;#61;j&amp;#43;i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                a[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                a[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;打开的门为&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;96&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n            count&amp;#43;&amp;#43;;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n总共打开的门数&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,count);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["对于c语言的趣味问题，不知道怎么解决", ["风之巅小学有48间教室，每间教室有2扇门，用1-96分别编号。有一天，狐狸把所有的门都打开，第二个到校的格莱尔把所有编号是2的倍数的房门作相反的处理（原来开着的关上，原来关上的打开），第三个到学校的同学把所有编号是3的倍数的房门做相反的处理……第42个到校的尼克把所有编号是42的倍数的房门做相反的处理。", "请设计并实现一算法，算一算最后共有几扇门是开着的？分别是哪几扇？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;参考改一下即可。&lt;br /&gt;&lt;a href=\"https://www.runoob.com/python3/python-binary-search.html\" id=\"textarea_1649551593320_1649551916278_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;Python 二分查找 | 菜鸟教程&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;Python 二分查找   Python3 实例   二分搜索是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始&amp;#xff0c;如果中间元素正好是要查找的元素&amp;#xff0c;则搜索过程结束&amp;#xff1b;如果某一特定元素大于或者小于中间元素&amp;#xff0c;则在数组大于或小于中间元素的那一半中查找&amp;#xff0c;而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空&amp;#xff0c;则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。      实例 : 递归   [mycode3 type..&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://static.runoob.com/images/favicon.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.runoob.com/python3/python-binary-search.html&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["使用折半查找从而使找到指定的元素方便", [" 1 个列表里存储了 20 个子列表， 各子列表内存储了学生的学号及姓名两个元素， 两个元素都是字符串类型。 现已知该 20 个学生子列表已按学号递增序排好序。请设计一个程序， 使用折半查找算法通过最少次数的比较找到指定学号的学生， 如果有， 输出这个学生的学号和姓名， 如果没有， 输出报告未找到该学生。 列表中存储数据为stu_list=", "[['201801','zhangyi'],['201802','zhanger'],['201803','zhangsan'],['201804','zhangsi'],", "['201805','wangyi'],['201806','wanger'],['201807','wangsan'],['201808','wangsi'],", "['201809','liyi'],['201810','lier'],['201811','lisan'],['201812','lisi'],", "['201813','zhaoyi'],['201814','zhaoer'],['201815','zhaosan'],['201816','zhaosi'],", "['201817','zhouyi'],['201818','zhouer'],['201819','zhousan'],['201820','zhousi']]", "上述是问题所在，我在写代码的时候发现不是很好使用折中查找，只能用传统的方式才能解决。"]], "Tag": "程序设计"}
{"Answer": "尝试一下这个类:java.util.prefs.Base64", "Konwledge_Point": "算法与程序设计", "Question": ["Javaeye API的Http basic验证", ["   看到fins大牛写的JE talker以后，很有冲动自己也来写一下。我的UI设计还很差，还是先实现命令行的吧！", "\n\n", "   我是采用HttpClient模拟get请求来获取数据，再用jsonlib解析数据。", "\n\n", "   开始以为不难实现，不料开始就给我来了一个下马威！Http验证通不过，java eye api 验证采用的是", "HTTP Basic  Access Authentication", "，最常用也是最简单的http验证。通过wiki查看了一下原来就是把\"username:password\"经过Base64加密后，放在header中。当服务器接受请求后，再利用Base64Decode进行验证，不成功则返回httpcode为401。开始我怀疑是不是httpclient采用是不是basic验证。通过查看文档以后，httpclient默认优先采用basic验证。javaeye采用的是basic验证，http优先使用的也是basic验证，而程序死活儿不能通过验证，太奇怪了！", "\n\n", "从", "http://ssword.yo2.cn/2009/01/29/ruby%E4%BD%BF%E7%94%A8open-uri%E5%81%9Ahttp-basic%E9%AA%8C%E8%AF%81/", "中看到ruby的basic验证", "\n\n", "    ", "\n\n", "require 'open-uri'\nrequire 'base64'\nf = open(url,\"Authorization\"=>\"Basic #{Base64.b64encode(\"myaccount:mypassword\")}\")\nputs f.read\n\n", "\n\n", "我自己试了一把，成功通过验证。借鉴网友的思路我把httpclient的basic验证也采用自己用Base64编码后方法放在header中还是通不过，后来发现原来apache的Base64算法和ruby的BASE64模块提供的算法不同，生成的串不同。", "\n\n", "    我对Base64编码方式不了解，恳请熟悉的帮忙分析一下", "问题补充：", "谢谢block！", "向广大javaeyer道个歉", "是我粗心 后来发现是 ruby和java获取的BASE64编码串是一样的！ ", "特此问题关闭"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;该回答引用GPTᴼᴾᴱᴺᴬᴵ&lt;br /&gt;抽卡出货概率可以通过每个品质的概率乘以抽卡次数来计算。例如&amp;#xff0c;抽一次稀有品质的概率是40%&amp;#xff0c;抽十次的概率是40%的十次方&amp;#xff0c;即0.4^10&amp;#xff0c;约等于0.0001。&lt;/p&gt;\n&lt;p&gt;对于有保底的情况&amp;#xff0c;可以先计算没有保底时的概率&amp;#xff0c;然后再减去没有抽中保底情况的概率&amp;#xff0c;得到最终的概率。例如&amp;#xff0c;10连抽中至少有一个精英或史诗品质&amp;#xff0c;可以计算没有保底时10连抽中没有精英或史诗品质的概率&amp;#xff0c;即&amp;#xff08;1-0.1-0.005&amp;#xff09;的十次方&amp;#xff0c;约等于0.394。然后&amp;#xff0c;用1减去这个概率&amp;#xff0c;得到有保底情况下10连抽中至少有一个精英或史诗品质的概率&amp;#xff0c;即1-0.394&amp;#61;0.606。&lt;/p&gt;\n&lt;p&gt;根据以上计算方法&amp;#xff0c;可以编写如下Java代码实现&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; java.util.Random;\n\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;CardGame&lt;/span&gt; {\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;final&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;[] PROBABILITY &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0.495&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0.4&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0.1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0.005&lt;/span&gt;};\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;final&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;QUALITY_NUM&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; PROBABILITY.length;\n\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] getTenGeneral() {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] result &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;Random&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;rand&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Random&lt;/span&gt;();\n    &lt;span class=\"hljs-comment\"&gt;// 抽10次&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;p&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; rand.nextDouble();  &lt;span class=\"hljs-comment\"&gt;// 生成0~1的随机数&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;quality&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;probSum&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-comment\"&gt;// 确定品质&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;j&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; QUALITY_NUM; j&amp;#43;&amp;#43;) {\n            probSum &amp;#43;&amp;#61; PROBABILITY[j];\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (p &amp;lt; probSum) {\n                quality &amp;#61; j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n        }\n        result[i] &amp;#61; quality;\n    }\n    &lt;span class=\"hljs-comment\"&gt;// 判断是否有保底&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;boolean&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;hasEpicOrElite&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; q : result) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (q &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; || q &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;) {\n            hasEpicOrElite &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-comment\"&gt;// 如果没有保底&amp;#xff0c;重新抽取&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!hasEpicOrElite) {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; getTenGeneral();\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; result;\n}\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在上面的代码中&amp;#xff0c;PROBABILITY数组存储了每个品质的概率&amp;#xff0c;QUALITY_NUM变量表示品质的数量。在getTenGeneral方法中&amp;#xff0c;首先抽取10次武将&amp;#xff0c;每次根据概率随机生成品质&amp;#xff0c;并将品质存入结果数组中。然后&amp;#xff0c;检查结果数组中是否有精英或史诗品质&amp;#xff0c;如果没有则重新抽取&amp;#xff0c;直到有保底。最终返回结果数组。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["抽卡出货概率怎么算，有保底？", ["抽卡出货概率怎么算，有保底？", "功能设计题1-抽卡活动", "游戏中通过抽卡获取武将，每次抽卡是⼀次独⽴随机事件，抽到的武将品质符合以下表中的概率：", "\n", "品质 描述 概率", "1 普通 49.5%", "2 稀有 40%", "3 精英 10%", "4 史诗 0.5%", "接下来是激动⼈⼼的10连抽时间，策划同学对此提出额外需求：", "⼗连抽中⾄少有1个是精英或者史诗品质；", "\n", "史诗品质武将的总体出货概率保持0.5%不变。第⼀个需求：", "请你实现以下接⼝： int[] getTenGeneral()，该接⼝返回⼗连抽所得到的武将品质的数组。提示：可以直接使⽤random()⽅法返回⼀个double类型的[0,1)范围内的随机数。", "第⼆个需求：", "\n", "策划同学还想知道在你的实现⽅式下，精英品质武将在十连抽中的总体出货概率⼤致变成多少？注：提供算法伪代码或者思路均可。", "\n", "文档：功能设计题1-抽卡活动.note", "链接：", "http://note.youdao.com/noteshare?id=f5cbbcb88d92c9e2caa466d1319a0425"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;基于Monster 组和GPT的调写&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Lnode&lt;/span&gt; {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; data;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Lnode&lt;/span&gt;* next; &lt;span class=\"hljs-comment\"&gt;// 修改1&amp;#xff1a;将结构体成员的类型从 Lnode 改为 struct Lnode&lt;/span&gt;\n};\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;], cou1 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 修改2&amp;#xff1a;将 cou1 的初始化值改为 0&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c;\n    &lt;span class=\"hljs-comment\"&gt;// 修改3&amp;#xff1a;读取数组时&amp;#xff0c;使用 scanf 读取数字并忽略空格和换行符&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%c&amp;#34;&lt;/span&gt;, &amp;amp;a[cou1], &amp;amp;c) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;amp;&amp;amp; c !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;) {\n        cou1&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;m);\n    &lt;span class=\"hljs-comment\"&gt;// 修改4&amp;#xff1a;输出链表时&amp;#xff0c;使用循环遍历链表而不是数组&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Lnode&lt;/span&gt;* head &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Lnode&lt;/span&gt;* p &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Lnode&lt;/span&gt;* q &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; cou1; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Lnode&lt;/span&gt;* node &amp;#61; (&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Lnode*)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Lnode));\n        node-&amp;gt;data &amp;#61; a[i];\n        node-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (head &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n            head &amp;#61; node;\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            p-&amp;gt;next &amp;#61; node;\n        }\n        p &amp;#61; node;\n        &lt;span class=\"hljs-comment\"&gt;// 如果当前节点的值是 m&amp;#xff0c;那么记录当前节点的前一个节点为 q&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (node-&amp;gt;data &amp;#61;&amp;#61; m) {\n            q &amp;#61; p;\n        }\n    }\n    &lt;span class=\"hljs-comment\"&gt;// 如果 q 是 NULL&amp;#xff0c;说明 m 在链表头部&amp;#xff0c;没有前驱结点&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (q &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;该结点没有前驱结点\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;// 如果 q 是 head&amp;#xff0c;说明 m 的前驱结点是 NULL&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (q &amp;#61;&amp;#61; head) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;该结点没有前驱结点\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;// 否则&amp;#xff0c;删除 q 的前一个节点&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Lnode&lt;/span&gt;* pre &amp;#61; head;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (pre-&amp;gt;next !&amp;#61; q) {\n        pre &amp;#61; pre-&amp;gt;next;\n    }\n    pre-&amp;gt;next &amp;#61; q-&amp;gt;next;\n    &lt;span class=\"hljs-comment\"&gt;// 输出删除前驱结点后的链表&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Lnode&lt;/span&gt;* curr &amp;#61; head;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (curr !&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, curr-&amp;gt;data);\n        curr &amp;#61; curr-&amp;gt;next;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;主要的修改包括&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;将结构体成员的类型从 Lnode 改为 struct Lnode&amp;#xff0c;因为在 C 语言中结构体的类型需要加上 struct 关键字。&lt;/p&gt;\n&lt;p&gt;将 cou1 的初始化值改为 0&amp;#xff0c;因为没有进行初始化的变量的值是不确定的。&lt;/p&gt;\n&lt;p&gt;读取数组时&amp;#xff0c;使用 scanf 读取数字并忽略空格和换行符。&lt;/p&gt;\n&lt;p&gt;输出链表时&amp;#xff0c;使用循环遍历链表而不是数组。&lt;/p&gt;\n&lt;p&gt;此外&amp;#xff0c;程序还进行了一些其他的修改&amp;#xff0c;如将链表的头节点 head 初始化为 NULL&amp;#xff0c;修改了链表的构建方式&amp;#xff0c;以及使用了指针来记录要删除的节点的前一个节点等。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["关于#链表无效内存引用#的问题，如何解决？", ["求帮忙改程序", "题目如下", "对给定的单链表 L ，设计一个算法，删除 L 中值为 x 的结点的直接前驱结点。", "测试输入    期待的输出    时间限制    内存限制    额外进程", "测试用例 1", "11 22 33 44 55 66 77↵", "44↵", "\n", "11 22 44 55 66 77↵", "1秒    64M    0", "测试用例 2", "23 45 11 45 67 88 4 33 78↵", "88↵", "\n", "23 45 11 45 88 4 33 78↵", "1秒    64M    0", "测试用例 3", "12 23 34 45 56 67 78 89↵", "12↵", "\n", "该结点没有前驱结点↵", "1秒    64M    0", "我的程序", "\n", "我的问题", "RE: 无效内存引用", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<stdlib.h>", "\n", "struct", " ", "Lnode", "\n{\n    ", "int", " data;\n    Lnode *next;\n}Lnode;\n", "int", " ", "main", "()", "{\n", "int", " a[", "10", "],cou1,cou2;\n", "for", "(", "int", " i=", "0", ",cou1=", "0", ";a[i]!=", "'\\n'", ";i++){\n", "scanf", "(", "\"%d\"", ",&a[i]);\ncou1++;\n}\n", "int", " m;\n", "scanf", "(", "\"%d\"", ",&m);\n", "for", "(", "int", " i=", "0", ";a[i]!=", "'\\n'", ";i++){\n", "printf", "(", "\"%d\\n\"", ",a[i]);\n}\n", "struct", " ", "Lnode", " *head;\n", "struct", " ", "Lnode", " *p;\np=(", "struct", " Lnode*)", "malloc", "(", "sizeof", "(", "struct", " Lnode));\np->next=", "NULL", ";\nhead=p;\n", "if", "(p->data==a[", "0", "]) ", "printf", "(", "\"该结点没有前驱结点\\n\"", ");\n", "else", "{\n", "for", "(", "int", " n=", "1", ",cou2=", "0", ";p->data!=m;n++)\n{\ncou2++;\n", "if", "(p->next=", "NULL", ") ", "return", " ", "1", ";\n", "else", " p++;\n}\n", "struct", " ", "Lnode", " *q;\nq=(", "struct", " Lnode*)", "malloc", "(", "sizeof", "(", "struct", " Lnode));\nq->next=", "NULL", ";\nhead=q;\n", "for", "(", "int", " j=", "0", ";q<p;j++)\n{\n", "printf", "(", "\"%d\"", ",a[j]);\n}\n", "for", "(", "int", " k=cou2+", "1", ";k<=cou1;k++)\n{\n", "printf", "(", "\"%d\"", ",a[k]);\n}\n", "printf", "(", "\"\\n\"", ");\n", "return", " ", "0", ";\n}\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;按题主的思路&amp;#xff0c;修改如下&amp;#xff0c;改动处见注释&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* &lt;span class=\"hljs-title\"&gt;compress&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* src)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; src[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, src);\n\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* ps &amp;#61; &lt;span class=\"hljs-built_in\"&gt;compress&lt;/span&gt;(src);\n\n    &lt;span class=\"hljs-built_in\"&gt;puts&lt;/span&gt;(ps);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* &lt;span class=\"hljs-title\"&gt;compress&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* src)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; lec[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, s &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(src);) {  &lt;span class=\"hljs-comment\"&gt;// i&amp;#43;&amp;#43; 修改&lt;/span&gt;\n        s &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;                       &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (*(src &amp;#43; i) &amp;#61;&amp;#61; *(src &amp;#43; i &amp;#43; s)) &lt;span class=\"hljs-comment\"&gt;//if (*(src &amp;#43; i) &amp;#61;&amp;#61; *(src &amp;#43; i &amp;#43; 1))修改&lt;/span&gt;\n            s&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-comment\"&gt;//if (*(src &amp;#43; i) !&amp;#61; *(src &amp;#43; i &amp;#43; 1)) { 修改&lt;/span&gt;\n            &lt;span class=\"hljs-comment\"&gt;//if (s &amp;gt;&amp;#61; 3 &amp;amp;&amp;amp; s &amp;lt;&amp;#61; 9)           修改&lt;/span&gt;\n            &lt;span class=\"hljs-comment\"&gt;//    lec[j] &amp;#61; *(src &amp;#43; i), lec[j &amp;#43; 1] &amp;#61; s &amp;#43; &amp;#39;0&amp;#39;, j &amp;#61; j &amp;#43; 2;修改&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (s &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)    &lt;span class=\"hljs-comment\"&gt;//else if (s &amp;gt; 9)     修改&lt;/span&gt;\n            lec[j&amp;#43;&amp;#43;] &amp;#61; *(src &amp;#43; i), lec[j&amp;#43;&amp;#43;] &amp;#61; s / &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;, lec[j&amp;#43;&amp;#43;] &amp;#61; s % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (s &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n            lec[j&amp;#43;&amp;#43;] &amp;#61; *(src &amp;#43; i), lec[j&amp;#43;&amp;#43;] &amp;#61; s &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;            &lt;span class=\"hljs-comment\"&gt;//if (s &amp;#61; 1) 修改&lt;/span&gt;\n            lec[j&amp;#43;&amp;#43;] &amp;#61; *(src &amp;#43; i);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (s &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n            i &amp;#43;&amp;#61; s;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            i&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-comment\"&gt;//s &amp;#61; 1;&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//}&lt;/span&gt;\n    }\n    lec[j] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;    &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;strcpy&lt;/span&gt;(src, lec);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; src;      &lt;span class=\"hljs-comment\"&gt;// 修改&lt;/span&gt;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["c语言，利用指针作为函数参数实现字符串压缩", ["问题描述：有一种简单的字符串压缩算法，对于字符串中连续出现的同一个英文字符，用该字符加上连续出现的次数来表示（连续出现次数小于3时不压缩）。", "请设计一个程序，采用该压缩方法对字符串压缩并输出。请编写一个函数compress，采用该压缩方法对字符串src进行压缩。函数定义如下:", "char *compress(char *src);", "返回值：", "指向压缩后的字符串数据", "参数：", "src：输入/输出参数，输入表示待压缩字符串，输出表示压缩后的字符串", "想问一下为什么我的结果会有重复的", "\n", "这是代码", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<string.h>", "\n", "#", "include", "<stdlib.h>", "\n", "char", " *", "compress", "(", "char", " *src)", ";\n", "int", " ", "main", "()", "\n", "{\n    ", "char", " src[", "100", "];\n    ", "scanf", "(", "\"%s\"", ",src);\n\n    ", "char", " *ps = ", "compress", "(src);\n    \n    ", "puts", "(ps);\n    ", "return", " ", "0", ";\n}\n", "char", " *", "compress", "(", "char", " *src)", "{\n    ", "char", " lec[", "100", "];\n    ", "int", " i,j=", "0", ",s=", "1", ";\n    ", "for", " (i=", "0", ";i<", "strlen", "(src);i++){\n        ", "if", " (*(src+i)==*(src+i+", "1", "))\n        s++;\n        ", "if", " (*(src+i)!=*(src+i+", "1", ")){\n        ", "if", " (s>=", "3", "&&s<=", "9", ")\n        lec[j]=*(src+i),lec[j+", "1", "]=s+", "'0'", ",j=j+", "2", ";\n        ", "else", " ", "if", " (s>", "9", ")\n        lec[j]=*(src+i),lec[j+", "1", "]=s/", "10", "+", "'0'", ",lec[j+", "2", "]=s%", "10", "+", "'0'", ",j=j+", "3", ";\n        ", "else", " ", "if", " (s=", "2", ")\n        lec[j]=*(src+i", "-1", "),lec[j+", "1", "]=*(src+i),j=j+", "2", ";\n        ", "else", " ", "if", " (s=", "1", ")\n        lec[j]=*(src+i),j=j+", "1", ";\n        s=", "1", ";    \n    }\n}\n", "strcpy", "(src,lec);\n}\n\n\n", "\n"]], "Tag": "程序设计"}
{"Answer": "你说的这个我很关系，对这两个参数我也不太了解，但的确是缓解了问题，而且很明显。目前我们只使用了一个TCP连接。对于你说的“这个参数应该调整成你业务需要的发送接收的大小”，我不太明白是什么意思。主要是我不清楚我们需要的大小是多少啊，呵呵。你说的8K，这个是默认配置。但我们使用这个配置时，程序最多只能跑20分钟，程序就死掉了。这涉及到tcp的传输，因为跟我们对接的另一端，他们是C语言写的，目前他们没有设置缓冲区大小，应该用的也是默认的，但C程序我不太了解，不知道是多少。我把这个缓冲区设置为Integer的最大值了，好像是2G（我也觉得有点儿夸张），程序大概跑了四十分钟，服务器宕机了。\r\n\r\n===========\r\n程序死了， 我不知道是你的服务端死了 还是客户死了。 \r\n另外， 你的JAVA程序， 怎么能把缓冲设置成最大？ 你根本不明白这参数的含义。 输入输出的缓冲区， 如果不是性能高度要求， 不需要调整的。 你根本不应该设置这么的BUFF， 当然会导致你的JAVA程序死掉。\r\n\r\n 输入输出的缓冲区，一般是根据你的一次发送／接收多少数据决定的， 一般情况下， 默认值是足够使用的。 如果你真的需要提高一次就发送32K的数据的网络性能， 你可以把发送区设置成32K大小。 一般来说， 你没有必要修改这个东西。 \r\n\r\n另外，我有点东西需要提醒你的是， 如果你把JAVA IO／NIO混合使用的话， 会导致严重的JAVA程序刮起。  千万不可混合使用这些API。  \r\n\r\n程序死了的时候， 是CORE DUMP还是挂起了， 这个需要明白， 如果是CORE DUMP你需要看看CORE DUMP的文件， 如果是挂起了， 你需要看看JAVA程序的当前执行栈的情况。 使用kill -3 把执行线程DUMP出来。", "Konwledge_Point": "算法与程序设计", "Question": ["怎么能观察出JVM的Old区中存储的都是那些对象", ["操作系统：Solaris10", "\nJDK：SUN JDK1.5.0_17", "\n\n", "[b]问题补充：[/b]", "\njmap这个命令我用了，但我发现只是显示出了实例的数量。看不出来哪些对象是在Old区的。你说用Heap工具分析，是什么Heap工具呢？我用了Optimizeit,也是只能看出实例的数量和引用关系，看不出哪些对象是在Old区的。", "\n[b]问题补充：[/b]", "\n我现在的GC策略是这样的，堆最大，最小都是1024m，young区是512m，对象在from和to之间拷贝5次然后扔到old区。回收算法用的是cms。我们的应用对吞吐量的要求比较高，绝大多数都是短生命周期的对象。我在windows下用optimizeit检查了，不存在内存泄漏，但发现在并发量比较大的时候，有几个对象的实例数量是一直在增长的。但当客户端的程序停止的时候，这些对象又是可以被回收的。我们的程序是运行在solaris上的，由于我没下载到optimizeit的solaris安装文件，或者是类似工具的solaris安装文件，因此不确定，olc区中的那些对象是否就是那几个不断增长的对象。我用jvmstat看了，old区涨的很快。而且程序运行大概20分钟左右就core dump了。有的时候会直接把服务器整死。因此我想看看有没有什么手段来看看old区的对象存储的都是什么来帮我肯定一下，就是那几个对象再搞鬼。", "\n[b]问题补充：[/b]", "\n其实这个问题，在昨天临下班之前的10几分钟突然有了进展。终于排查出，我们的程序是没有内存泄漏的。而是由于传输层的拥挤造成的。设置了socket的readReceiveBuffer和sendBuffer之后这个问题得到了缓解。但是为什么会因为传输层的拥挤导致我们old区的对象很多，这点需要再好好研究一下mina框架。", "\n[b]问题补充：[/b]", "\n[quote]根据你的说法， 我觉得你的，配置有问题的， 为什么设计-Xmn512m, 这个是很关键的， 如果你要求很低的world stop. 那么把-Xmn设置到128 或者256m, core dump 的原因可能是因为你CMS机制不起作用， 导致并行收集过多产生的。 另外，也跟你的JAVA的版本有关系。 CMS最好使用JAVA6的版本， 在JAVA5上， 这个技术并不是非常成熟。如果是JAVA5， CMS的启动策略是有BUG的， 这个你可以参考我的BLOG ： ", "http://sdh5724.iteye.com/admin/blogs/283977", " [/quote]", "\n\n", "young区默认的大小是堆的1/4，但是对于吞吐量优先的程序，可以设置为堆的1/2。因为对象的生命周期短，应该尽可能的让对象在young区就被回收掉，免得被拷贝到old区，再进行回收时，暂停时间会相对较长。网上有些资料显示了，对于吞吐量优先的程序，应该设置一个较大的young区的说法，Sun的网站上也有，将堆设置为3G，young区设置为2G的例子。你说的CMS最好在JAVA6下用，这个我真的不知道。听说JAVA6的GC机制要比JAVA5好。这个我回去试试。", "\n\n", "[quote]readReceiveBuffer和sendBuffer 是操作系统参数， 如果你的OS内存很紧张， 也可能导致系统资源不够。  这个参数应该调整成你业务需要的发送接收的大小， 不可以盲目扩大， 每个TCP连接都会占用这个BUFF的大小。 我建议你一般设置成8K。[/quote]", "\n\n", "你说的这个我很关系，对这两个参数我也不太了解，但的确是缓解了问题，而且很明显。目前我们只使用了一个TCP连接。对于你说的“这个参数应该调整成你业务需要的发送接收的大小”，我不太明白是什么意思。主要是我不清楚我们需要的大小是多少啊，呵呵。你说的8K，这个是默认配置。但我们使用这个配置时，程序最多只能跑20分钟，程序就死掉了。这涉及到tcp的传输，因为跟我们对接的另一端，他们是C语言写的，目前他们没有设置缓冲区大小，应该用的也是默认的，但C程序我不太了解，不知道是多少。我把这个缓冲区设置为Integer的最大值了，好像是2G（我也觉得有点儿夸张），程序大概跑了四十分钟，服务器宕机了。", "\n\n", "[quote]我觉得， 你是不是因为TCP的连接断开后， 没有释放TCP连接？ socket.close（）. 会导致大量的time_wait的连接， 你要仔细看下。 OS会在比较长的时间回收[/quote]", "\n\n", "我们现在就一个TCP链接，出现问题时，链接没断过。我们应该是没有内存泄漏的，我用Optimizeit检查了好多次了。", "\n\n", "很高兴与你讨论这个问题，我感觉现在问题出现在TCP的缓冲区上，应该让C那边也设置一个较大的缓冲区，然后再看看问题能不能得到解决。", "\n[b]问题补充：[/b]", "\n经过几天的测试，总结如下：", "\n1.机器宕机居然是机器的问题，那个机器，不管上面运行的是我们的应用程序还是模拟器，都会宕机。换了其他的几台服务器，都没出现宕机的问题。", "\n2.buffer的设置：我们一个消息的长度是20个字节。每秒钟2000条消息，就是40000个字节，因次buffer设置为40000。但最后还是没有设置这个值采用默认的。因为问题可能不在这里。", "\n3.目前的问题，使用mina的client接收消息时，每秒钟2000条，大概运行一段时间之后，就会mina就会接收到一个很大的包（100K以上）。这导致我们应用层解析这个消息的时候调用层次过多，抛出stackOverFlow的异常，并且主动把连接关闭了。其实，我们可以修改一下我们的代码，避免抛出这个异常。但这不是问题的根源，因为mina传了一个这么大的数据包给应用层就是不正常的。于是我看了一下mina的代码，在read的时候，会根据接收到的消息的长度，来调整allocate的长度。这个上限是receiveByteBuffer的2倍。我尝试修改了mina的代码，让他每次固定allocate 1024个字节。但是问题依然存在，目前没找到解决方法。为了规避这个问题，只是让服务端不给我们发送这个应答，这在业务上是允许的。但没找到问题的根源总是感觉心里堵的荒，打算试试grizzly。"]], "Tag": "程序设计"}
{"Answer": "楼主你的F=(eval(temp[0,-1])-32)/1.8写错了，temp[0,-1]修改为temp[0:-1]，截取最后一个字符的前的所有字符", "Konwledge_Point": "算法与程序设计", "Question": ["求大神指点Python温度转换代码报错原因,拜托了", ["想设计一段温度转换的代码", "\n请编写程序将用户输入华氏度转换为摄氏度，或将输入的摄氏度转换为华氏度。", "\n‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬", "\n\n", "转换算法如下：（C表示摄氏度、F表示华氏度）", "\n‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬", "\n\n", "     C = ( F - 32 ) / 1.8\n", "\n\n", "‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬", "\n\n", "     F = C * 1.8 + 32\n", "\n\n", "‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬", "\n下面是dai'ma", "\n\n", "#tempstr.py", "\ntemp=input(\"请输入带有符号的温度值:\")", "\nif temp[-1] in [\"c\",\"C\"]:", "\n    c=eval(temp[0,-1])*1.8+32", "\n    print(\"转换后的温度是{:.2f}F\".format(c))", "\nelif temp[-1] in [\"F\",\"f\"]:", "\n    F=(eval(temp[0,-1])-32)/1.8", "\n    print(\"转换后的温度是{:.2f}C\".format(F))", "\nelse:", "\n    print(\"输入格式错误\")"]], "Tag": "程序设计"}
{"Answer": "`main()`中的`printf()`，前面还用`BiTreeDepth(T)`、`CountNode(T)`做参数，后面怎么直接用`T`做参数了？", "Konwledge_Point": "算法与程序设计", "Question": ["求二叉树叶子结点个数交换二叉树左右子树结果不对", ["// 二叉树的遍历与应用算法的设计与实现.cpp : 定义控制台应用程序的入口点。", "\n//", "\n\n", "#include \"stdafx.h\"", "\n\n", "int _tmain(int argc, _TCHAR* argv[])", "\n{", "\nreturn 0;", "\n}", "\n//节点动态生成，可以充分利用存储空间", "\n#include", "\n#include", "\n#include", "\n#define OK 1", "\n#define ERROR 0", "\n#define OVERFLOW -2", "\n#define STACK_INIT_SIZE 10//存储空间初始分配量", "\n#define STACK_INCREAMENT 2//存储空间分配增量", "\n#define TRUE 1", "\n#define FALSE 0", "\ntypedef int Status;", "\ntypedef char TElemType;", "\n//二叉树的二叉链表存储结构", "\nstruct BiTNode", "\n{", "\nchar data;//节点中的数据的类型", "\nBiTNode ", "lchild, *rchild;//左右孩子指针,指向节点自身", "\n};", "\ntypedef BiTNode *BiTree;", "\n/", "**************************************栈的操作****************************************/", "\n//栈的顺序存储结构", "\nstruct SqStack", "\n{", "\nBiTree ", "base;//栈底指针", "\nBiTree *top;//栈顶指针", "\nint stacksize;//当前已分配的存储空间", "\n};", "\n//构造一个空栈S-------------------------《数据结构》P47", "\nvoid InitStack(SqStack &S)", "\n{", "\nS.base = (BiTree", ")malloc(STACK_INIT_SIZE*sizeof(BiTree));", "\nif (!S.base)", "\nexit(OVERFLOW);//存储空间分配失败", "\nS.top = S.base;", "\nS.stacksize = STACK_INIT_SIZE;", "\n}", "\n//若栈S为空，则返回TRUE，若栈S不空则返回FALSE", "\nStatus StackEmpty(SqStack S)", "\n{", "\nif (S.base == S.top)", "\nreturn TRUE;", "\nelse", "\nreturn FALSE;", "\n}", "\n//插入元素e为新的栈顶元素（入栈）", "\nvoid Push(SqStack &S, BiTree e)", "\n{", "\nif (S.top - S.base >= S.stacksize)//栈满，追加存储空间", "\n{", "\nS.base = (BiTree*)realloc(S.base, (S.stacksize + STACK_INCREAMENT)*sizeof(BiTree));", "\nif (!S.base)", "\nexit(OVERFLOW);", "\nS.top = S.base + S.stacksize;", "\nS.stacksize += STACK_INCREAMENT;", "\n}", "\n//插入栈顶元素", "(S.top) = e;", "\nS.top++;//栈顶指针指向下一个", "\n}", "\n//若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK（出栈）", "\nStatus Pop(SqStack &S, BiTree &e)", "\n{", "\nif (S.top == S.base)", "\nreturn ERROR;", "\nelse", "\ne = *(--S.top);", "\nreturn OK;", "\n}", "\n/", "****************************************栈的操作部分END****************************************/", "\n/*****************************************二叉树的操作部分****************************************/", "\n//构造一个空的二叉树T", "\nvoid InitBiTree(BiTree &T)", "\n{", "\nT = NULL;", "\n}", "\n//二叉树T存在，销毁二叉树T", "\nvoid DestroyBiTree(BiTree &T)", "\n{", "\nif (T)", "\n{", "\nif (T->lchild)", "\nDestroyBiTree(T->lchild);//销毁左孩子子树", "\nif (T->rchild)", "\nDestroyBiTree(T->rchild);//销毁右孩子子树", "\nfree(T);//释放根节点", "\nT = NULL;", "\n}", "\n}", "\n//构造二叉链表表示的二叉树T--------------------------------《数据结构》P131", "\n//按照先序次序输入二叉树中节点的值，空格字符表示空树", "\nvoid CreateBiTree(BiTree &T)", "\n{", "\nchar h;//节点的数据的类型", "\nscanf_s(\"%c\", &h);", "\nif (h == ' ')", "\nT = NULL;", "\nelse", "\n{", "\nT = (BiTree)malloc(sizeof(BiTNode));", "\nif (!T)", "\nexit(OVERFLOW);", "\nT->data = h;", "\nCreateBiTree(T->lchild);//构造左子树", "\nCreateBiTree(T->rchild);//构造右子树", "\n}", "\n}", "\n//先序遍历中的（*visit函数），也就是一个输出函数", "\nStatus PrintElement(TElemType &e)", "\n{", "\nprintf(\"%c\", e);", "\nreturn OK;", "\n}", "\n//用递归算法先序遍历二叉树", "\nint PreOrderTraverse(BiTree T, Status(*Visit)(TElemType &e))", "\n{", "\n\n", "if (T)//二叉树不空", "\n{", "\nif (Visit(T->data))//访问根结点", "\n{", "\nif (PreOrderTraverse(T->lchild, Visit))//遍历左子树", "\n{", "\nif (PreOrderTraverse(T->rchild, Visit))//遍历右子树 ", "\n{", "\nreturn OK;", "\n}", "\n}", "\n}", "\nreturn ERROR;", "\n}", "\nelse", "\n{ ", "\nreturn OK; ", "\n}", "\n}", "\n\n", "//用递归算法中序遍历二叉树", "\nint InOrderTraverse(BiTree T, Status(*Visit)(TElemType &e))", "\n{", "\n\n", "if (T)//二叉树不空", "\n{", "\nif (InOrderTraverse(T->lchild, Visit))//遍历左子树", "\n{", "\nif (Visit(T->data))//访问根结点", "\n{", "\nif (InOrderTraverse(T->rchild, Visit))//遍历右子树 ", "\n{", "\nreturn OK;", "\n}", "\n}", "\n}", "\nreturn ERROR;", "\n}", "\nelse", "\n{", "\nreturn OK;", "\n}", "\n}", "\n//用递归算法后序遍历二叉树", "\nint PostOrderTraverse(BiTree T, Status(*Visit)(TElemType &e))", "\n{", "\n\n", "if (T)//二叉树不空", "\n{", "\nif (PostOrderTraverse(T->lchild, Visit))//遍历左子树", "\n{", "\nif (PostOrderTraverse(T->rchild, Visit))//遍历右子树", "\n{", "\nif (Visit(T->data))//访问根结点 ", "\n{", "\nreturn OK;", "\n}", "\n}", "\n}", "\nreturn ERROR;", "\n}", "\nelse", "\n{", "\nreturn OK;", "\n}", "\n}", "\n//按照层次遍历二叉树", "\nint front = 0, rear = 1;", "\nvoid LevelOrderTraverse(BiTNode *T)", "\n{", "\nBiTNode *q[100];", "\nq[0] = T;", "\nwhile (front\n{", "\nif (q[front])", "\n{", "\nprintf(\"%c\", q[front]->data);", "\nq[rear++] = q[front]->lchild;", "\nq[rear++] = q[front]->rchild;", "\nfront++;", "\n}", "\nelse", "\n{", "\nfront++;", "\n}", "\n}", "\n}", "\n//二叉树T存在，返回T的深度", "\nint BiTreeDepth(BiTree T)", "\n{", "\nint i, j;", "\nif (!T)", "\nreturn 0;", "\nif (T->lchild)", "\ni = BiTreeDepth(T->lchild);//i为左子树的深度", "\nelse", "\ni = 0;", "\nif (T->rchild)", "\nj = BiTreeDepth(T->rchild);", "\nelse", "\nj = 0;", "\nreturn i>j ? i + 1 : j + 1;//T的深度为其左右子树中的大者加1", "\n}", "\n//统计二叉树中结点的个数（先序）", "\nint CountNode(BiTree T)", "\n{", "\nstatic int count = 0;", "\nif (!T) count = 0;", "\nelse{", "\ncount = CountNode(T->lchild) + CountNode(T->rchild) + 1;", "\n}", "\nreturn count;", "\n}", "\n////统计二叉树中叶子结点的个数（先序）", "\n//int CountLeaf(BiTree T, Status(*Visit)(TElemType &e))", "\n//{", "\n//int count = 0;", "\n//if (T)", "\n//{", "\n//if ((!T->lchild) && (!T->rchild))", "\n//{", "\n//count++;", "\n//}", "\n// ", "\n //}", "\n//else", "\n//{", "\n//CountLeaf(T->lchild, Visit);", "\n//CountLeaf(T->rchild, Visit);", "\n//}", "\n//return count;", "\n//}", "\n//递归统计二叉树中叶子结点的个数（先序）", "\nint CountLeaf(BiTree &T)", "\n{", "\nif (T == NULL)", "\n{", "\nreturn 0;", "\n}", "\nelse if (T->lchild == NULL && T->rchild == NULL)", "\n{", "\nreturn 1;", "\n}", "\nelse", "\n{", "\nreturn (CountLeaf(T->lchild) + CountLeaf(T->rchild));", "\n}", "\n}", "\n//递归法将二叉树的左右子树互换", "\nvoid Exchange(BiTree &T, Status(*Visit)(TElemType &e))", "\n{", "\nBiTNode *temp;", "\nif (T)", "\n{", "\nExchange(T->lchild, PrintElement);", "\nExchange(T->rchild, PrintElement);", "\ntemp = T->lchild;", "\nT->lchild = T->rchild;", "\nT->rchild = temp;", "\n}", "\n}", "\nint main()", "\n{", "\nBiTree T;", "\nInitBiTree(T);", "\nprintf(\"\\n构造空的二叉树后,树的深度=%d\\n\", BiTreeDepth(T));", "\nprintf(\"\\n请按照先序的次序输入二叉树（如：ab三个空格表示以a为根节点，b为左子树的二叉树）:\\n\");", "\nCreateBiTree(T);//建立二叉树T", "\nprintf(\"\\n建立二叉树后，树的深度为：%d\\n\", BiTreeDepth(T));", "\nprintf(\"先序递归遍历二叉树：\");", "\nPreOrderTraverse(T, PrintElement);", "\nprintf(\"\\n中序递归遍历二叉树：\");", "\nInOrderTraverse(T, PrintElement);", "\nprintf(\"\\n后序递归遍历二叉树：\");", "\nPostOrderTraverse(T, PrintElement);", "\nprintf(\"\\n层序递归遍历二叉树：\");", "\nLevelOrderTraverse(T);", "\nprintf(\"\\n\\n二叉树中结点的个数：%d\\n\", CountNode(T));", "\nCountNode(T);", "\nprintf(\"\\n二叉树中叶子结点的个数：%d\\n\", T);", "\nCountLeaf(T);", "\nprintf(\"\\n左右子树交换：%d\\n\", T);", "\nExchange(T, PrintElement);", "\nsystem(\"pause\");", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;6&amp;#xff1a;根据课程数据表录入数据&amp;#xff0c;也就是在输入数据时&amp;#xff0c;先判断是否存在课程的编号&amp;#xff0c;如果存在课程的编号&amp;#xff0c;就继续输入数据&amp;#xff0c;否则就提示不存在该课程。&lt;br /&gt;最好把课程表定义为全局变量&amp;#xff0c;这样能够在Student类中访问。&lt;br /&gt;7&amp;#xff1a;统计没门课程的平均分&amp;#xff1a;遍历学生list&amp;#xff0c;用一个map记录每门课的成绩和&amp;#xff0c;最后输出&lt;br /&gt;8&amp;#xff1a;可以使用sort函数进行排序。&lt;/p&gt;\n&lt;p&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n\n&lt;span class=\"hljs-comment\"&gt;// 用C&amp;#43;&amp;#43; STL设计学生成绩存储管理程序&amp;#xff08;第2阶段&amp;#xff1a;对实验13中的学生成绩存储管理程序进行扩展&amp;#xff09;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//    &amp;#xff08;1&amp;#xff09;基本数据结构&amp;#xff1a;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//学生类CStudent&amp;#xff0c;包括以下数据成员&amp;#xff1a;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//学号nID&amp;#xff08;整型&amp;#xff09;&amp;#xff0c;姓名strName&amp;#xff08;字符串&amp;#xff09;&amp;#xff0c;成绩mapScores&amp;#xff08;用map容器存储修读过的各门课程的课程号&amp;#xff08;整型&amp;#xff09;和成绩&amp;#xff09;&amp;#xff1b;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//课程类Course&amp;#xff0c;包括以下数据成员&amp;#xff1a;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//课程号nNo&amp;#xff08;整型&amp;#xff09;&amp;#xff0c;课程名strCourseName&amp;#xff08;字符串&amp;#xff09;&amp;#xff0c;学分fCredit&amp;#xff08;float型&amp;#xff09;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//&amp;#xff08;2&amp;#xff09;数据存储&amp;#xff1a;用某种适当的STL容器存储所有学生的数据&amp;#xff1b;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//&amp;#xff08;3&amp;#xff09;增加三个学生数据&amp;#xff08;每个学生修读若干门课程&amp;#xff09;到容器中&amp;#xff0c;输出容器中所有学生的信息&amp;#xff1b;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//&amp;#xff08;4&amp;#xff09;数据维护&amp;#xff1a;实现对学生数据的增、删、改、查功能&amp;#xff08;包括增、删、改、查学生信息&amp;#xff0c;以及各科成绩&amp;#xff09;&amp;#xff1b;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//&amp;#xff08;5&amp;#xff09;用某种适当的STL容器存储所有课程的信息&amp;#xff08;称为“课程数据表”&amp;#xff09;&amp;#xff1b;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//&amp;#xff08;6&amp;#xff09;输入学生成绩时需参照“课程数据表”&amp;#xff08;“课程数据表”中存在的课程才能输入成绩&amp;#xff09;&amp;#xff1b;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//&amp;#xff08;7&amp;#xff09;统计“课程数据表”中每门课程的平均分&amp;#xff1b;&amp;#xff08;如果某门课程还没有学生成绩&amp;#xff0c;则输出0&amp;#xff09;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//&amp;#xff08;8&amp;#xff09;对所有学生进行排序&amp;#xff0c;排序规则为&amp;#xff1a;根据该生成绩平均分从大到小排序&amp;#xff0c;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//如果平均分相同&amp;#xff0c;则根据学号从小到大排序。&amp;#xff08;可利用STL的sort算法&amp;#xff09;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Course&lt;/span&gt;\n{\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:&lt;span class=\"hljs-comment\"&gt;//增加public修饰&amp;#xff0c;否则变量都是私有成员&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; nNo;\n    string coursename;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; fcredit;\n    &lt;span class=\"hljs-built_in\"&gt;Course&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; id, string name, &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; cre)\n    {\n        nNo &amp;#61; id;\n        coursename &amp;#61; name;\n        fcredit &amp;#61; cre;\n    }\n};\n\nlist&amp;lt;Course&amp;gt; g_vCourse; &lt;span class=\"hljs-comment\"&gt;//定义为全局变量&amp;#xff0c;这样能够在Studnt函数中访问&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;CStudent&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; nID;\n    string strName;\n    map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt; mapScores;  &lt;span class=\"hljs-comment\"&gt;//存储多门课程成绩&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n\n    &lt;span class=\"hljs-built_in\"&gt;CStudent&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; _nID, string _strName);\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;setID&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; _nID)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;getID&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;setName&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(string _name)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-function\"&gt;string &lt;span class=\"hljs-title\"&gt;getName&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-function\"&gt;map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt; &lt;span class=\"hljs-title\"&gt;getScores&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;insertScore&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cno, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; score)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;//增加一门课程成绩 cno是课程编号 &lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;eraseScore&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cno)&lt;/span&gt;&lt;/span&gt;;     &lt;span class=\"hljs-comment\"&gt;//删除一门课程成绩&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;find&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cno)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;modify&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cno, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; score)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;display&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;     &lt;span class=\"hljs-comment\"&gt;//输出学生学号、姓名和各科成绩&lt;/span&gt;\n\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;getAve&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//获取平均成绩&amp;#xff0c;方便后面排序&lt;/span&gt;\n};\n\n\n\n\n\n\nCStudent::&lt;span class=\"hljs-built_in\"&gt;CStudent&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; _nID, string _strName)\n{\n    nID &amp;#61; _nID;\n    strName &amp;#61; _strName;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;CStudent::setID&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; _nID)&lt;/span&gt;\n&lt;/span&gt;{\n    nID &amp;#61; _nID;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;CStudent::getID&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; nID;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;CStudent::setName&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(string _name)&lt;/span&gt;\n&lt;/span&gt;{\n    strName &amp;#61; _name;\n}\n&lt;span class=\"hljs-function\"&gt;string &lt;span class=\"hljs-title\"&gt;CStudent::getName&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; strName;\n}\n&lt;span class=\"hljs-function\"&gt;map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt; &lt;span class=\"hljs-title\"&gt;CStudent::getScores&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; mapScores;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;CStudent::insertScore&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cno, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; score)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;//判断是否存在该课程&amp;#xff0c;解决第6题中的要求&lt;/span&gt;\n    list&amp;lt;Course&amp;gt;::iterator it &amp;#61; g_vCourse.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; it !&amp;#61; g_vCourse.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(); it&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (it-&amp;gt;nNo &amp;#61;&amp;#61; cno)\n        {\n            mapScores.&lt;span class=\"hljs-built_in\"&gt;insert&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;pair&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt;(cno, score));\n            &lt;span class=\"hljs-comment\"&gt;//mapScores.insert(map&amp;lt;int, double&amp;gt;::value_type(cno, score));&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (it &amp;#61;&amp;#61; g_vCourse.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;())\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;该课程不在课程表中&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;CStudent::eraseScore&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cno)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt;::iterator it &amp;#61; mapScores.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;(); it !&amp;#61; mapScores.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(); it&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (it-&amp;gt;first &amp;#61;&amp;#61; cno) {\n            mapScores.&lt;span class=\"hljs-built_in\"&gt;erase&lt;/span&gt;(it);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;CStudent::find&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cno)&lt;/span&gt; &lt;/span&gt;{\n    map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt;::iterator iter &amp;#61; mapScores.&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(cno);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (iter !&amp;#61; mapScores.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;())\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;It is:&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; iter-&amp;gt;second &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Not Found&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;CStudent::modify&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cno, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; score)&lt;/span&gt;\n&lt;/span&gt;{\n    map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt;::iterator iter &amp;#61; mapScores.&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(cno);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (iter !&amp;#61; mapScores.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;())\n    {\n        &lt;span class=\"hljs-comment\"&gt;//iter-&amp;gt;second &amp;#61; score; //无法通过iter修改数据&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;//先删除原来的数据&lt;/span&gt;\n        mapScores.&lt;span class=\"hljs-built_in\"&gt;erase&lt;/span&gt;(iter);\n        mapScores.&lt;span class=\"hljs-built_in\"&gt;insert&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;pair&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt;(cno, score));\n    }\n\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;CStudent::display&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Student ID:&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; nID &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; Name:&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; strName &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Grades of all subjects: &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt;::iterator iter &amp;#61; mapScores.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;(); iter !&amp;#61; mapScores.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(); iter&amp;#43;&amp;#43;)\n    {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Course number:&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; iter-&amp;gt;first &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Scores:&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; iter-&amp;gt;second &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n    cout &amp;lt;&amp;lt; endl;\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;CStudent::getAve&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt;::iterator it &amp;#61; mapScores.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;();\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; it !&amp;#61; mapScores.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(); it&amp;#43;&amp;#43;)\n    {\n        sum &amp;#43;&amp;#61; it-&amp;gt;second;\n        count&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (count &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; sum / count;\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;comp&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(CStudent&amp;amp; s1, CStudent&amp;amp; s2)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (s1.&lt;span class=\"hljs-built_in\"&gt;getAve&lt;/span&gt;() &amp;#61;&amp;#61; s2.&lt;span class=\"hljs-built_in\"&gt;getAve&lt;/span&gt;())\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; s1.&lt;span class=\"hljs-built_in\"&gt;getID&lt;/span&gt;() &amp;lt; s2.&lt;span class=\"hljs-built_in\"&gt;getID&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; s1.&lt;span class=\"hljs-built_in\"&gt;getAve&lt;/span&gt;() &amp;gt; s2.&lt;span class=\"hljs-built_in\"&gt;getAve&lt;/span&gt;();\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;//设置课程表&amp;#xff0c;根据课程表把所有课程保存到g_vCouse中&lt;/span&gt;\n    g_vCourse.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;Course&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;101&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;课程1&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3.0&lt;/span&gt;)); &lt;span class=\"hljs-comment\"&gt;//课程名根据课程数据表修改一下&lt;/span&gt;\n    g_vCourse.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;Course&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;102&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;课程2&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3.0&lt;/span&gt;));\n    g_vCourse.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;Course&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;103&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;课程3&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3.0&lt;/span&gt;));\n    g_vCourse.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;Course&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;104&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;课程4&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3.0&lt;/span&gt;));\n    g_vCourse.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;Course&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;105&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;课程5&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3.0&lt;/span&gt;));\n    g_vCourse.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;Course&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;106&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;课程6&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3.0&lt;/span&gt;));\n\n\n\n    list&amp;lt;CStudent&amp;gt; v1;\n    &lt;span class=\"hljs-function\"&gt;CStudent &lt;span class=\"hljs-title\"&gt;stu1&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-number\"&gt;1001&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;Phoebe&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    stu1.&lt;span class=\"hljs-built_in\"&gt;insertScore&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;101&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;);\n    stu1.&lt;span class=\"hljs-built_in\"&gt;insertScore&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;102&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;99&lt;/span&gt;);\n    stu1.&lt;span class=\"hljs-built_in\"&gt;insertScore&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;103&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;98&lt;/span&gt;);\n    stu1.&lt;span class=\"hljs-built_in\"&gt;insertScore&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;106&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;99.5&lt;/span&gt;);\n    stu1.&lt;span class=\"hljs-built_in\"&gt;display&lt;/span&gt;();\n    &lt;span class=\"hljs-function\"&gt;CStudent &lt;span class=\"hljs-title\"&gt;stu2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-number\"&gt;1002&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;Lilith&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    stu2.&lt;span class=\"hljs-built_in\"&gt;insertScore&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;101&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;95&lt;/span&gt;);\n    stu2.&lt;span class=\"hljs-built_in\"&gt;insertScore&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;104&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;93&lt;/span&gt;);\n    stu2.&lt;span class=\"hljs-built_in\"&gt;display&lt;/span&gt;();\n    stu2.&lt;span class=\"hljs-built_in\"&gt;eraseScore&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;101&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//测试eraseScore &lt;/span&gt;\n    stu2.&lt;span class=\"hljs-built_in\"&gt;display&lt;/span&gt;();\n    stu1.&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;102&lt;/span&gt;);\n    stu1.&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;105&lt;/span&gt;);\n    stu1.&lt;span class=\"hljs-built_in\"&gt;modify&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;106&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;97&lt;/span&gt;);\n    stu1.&lt;span class=\"hljs-built_in\"&gt;display&lt;/span&gt;();\n\n    &lt;span class=\"hljs-comment\"&gt;//把学生信息插入v1&lt;/span&gt;\n    v1.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(stu1);\n    v1.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(stu2);\n    &lt;span class=\"hljs-comment\"&gt;//第7题,统计每门课的平均分&lt;/span&gt;\n    map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt; mapAve;\n    list&amp;lt;CStudent&amp;gt;::iterator it &amp;#61; v1.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; it !&amp;#61; v1.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(); it&amp;#43;&amp;#43;)\n    {\n        map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt; score &amp;#61; it-&amp;gt;&lt;span class=\"hljs-built_in\"&gt;getScores&lt;/span&gt;();\n        map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt;::iterator is &amp;#61; score.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; is !&amp;#61; score.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(); is&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-comment\"&gt;//查找课程在mapAve中的位置&amp;#xff0c;并更新数据&lt;/span&gt;\n            map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt;::iterator iave &amp;#61; mapAve.&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(is-&amp;gt;first);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (iave &amp;#61;&amp;#61; mapAve.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;())\n                mapAve.&lt;span class=\"hljs-built_in\"&gt;insert&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;pair&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt;(is-&amp;gt;first, is-&amp;gt;second));\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            {\n                &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; tt &amp;#61; (iave-&amp;gt;second &amp;#43; is-&amp;gt;second) / &lt;span class=\"hljs-number\"&gt;2.0&lt;/span&gt;;\n                mapAve.&lt;span class=\"hljs-built_in\"&gt;erase&lt;/span&gt;(iave);\n                mapAve.&lt;span class=\"hljs-built_in\"&gt;insert&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;pair&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt;(is-&amp;gt;first, tt));\n            }\n        }\n    }\n    &lt;span class=\"hljs-comment\"&gt;//遍历输出每门课的平均分&lt;/span&gt;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;每门课的平均分&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    list&amp;lt;Course&amp;gt;::iterator ilist &amp;#61; g_vCourse.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;();\n    map&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;&amp;gt;::iterator ia &amp;#61; mapAve.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;();\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; ilist !&amp;#61; g_vCourse.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(); ilist&amp;#43;&amp;#43;)\n    {\n        ia &amp;#61; mapAve.&lt;span class=\"hljs-built_in\"&gt;find&lt;/span&gt;(ilist-&amp;gt;nNo);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ia !&amp;#61; mapAve.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;())\n            cout &amp;lt;&amp;lt; ia-&amp;gt;first &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;  &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; ia-&amp;gt;second &amp;lt;&amp;lt; endl;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            cout &amp;lt;&amp;lt; ilist-&amp;gt;nNo &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;  &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n\n    }\n    &lt;span class=\"hljs-comment\"&gt;//第8题&amp;#xff0c;排序&lt;/span&gt;\n    v1.&lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;(comp);\n\n    &lt;span class=\"hljs-comment\"&gt;//排序后输出&lt;/span&gt;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;根据平均成绩排序后输出&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    list&amp;lt;CStudent&amp;gt;::iterator istu &amp;#61; v1.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; istu !&amp;#61; v1.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(); istu&amp;#43;&amp;#43;)\n    {\n        cout &amp;lt;&amp;lt; istu-&amp;gt;&lt;span class=\"hljs-built_in\"&gt;getID&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;  &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; istu-&amp;gt;&lt;span class=\"hljs-built_in\"&gt;getName&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;  &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; istu-&amp;gt;&lt;span class=\"hljs-built_in\"&gt;getAve&lt;/span&gt;() &amp;lt;&amp;lt; endl;\n    }\n\n\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["后面的要求不会实现了 想知道怎么写", ["6  7 8怎么实现呢", "\n", "\n", "// 用C++ STL设计学生成绩存储管理程序（第2阶段：对实验13中的学生成绩存储管理程序进行扩展）", "\n", "//    （1）基本数据结构：", "\n", "//学生类CStudent，包括以下数据成员：", "\n", "//学号nID（整型），姓名strName（字符串），成绩mapScores（用map容器存储修读过的各门课程的课程号（整型）和成绩）；", "\n", "//课程类Course，包括以下数据成员：", "\n", "//课程号nNo（整型），课程名strCourseName（字符串），学分fCredit（float型）", "\n", "//（2）数据存储：用某种适当的STL容器存储所有学生的数据；", "\n", "//（3）增加三个学生数据（每个学生修读若干门课程）到容器中，输出容器中所有学生的信息；", "\n", "//（4）数据维护：实现对学生数据的增、删、改、查功能（包括增、删、改、查学生信息，以及各科成绩）；", "\n", "//（5）用某种适当的STL容器存储所有课程的信息（称为“课程数据表”）；", "\n", "//（6）输入学生成绩时需参照“课程数据表”（“课程数据表”中存在的课程才能输入成绩）；", "\n", "//（7）统计“课程数据表”中每门课程的平均分；（如果某门课程还没有学生成绩，则输出0）", "\n", "//（8）对所有学生进行排序，排序规则为：根据该生成绩平均分从大到小排序，", "\n", "//如果平均分相同，则根据学号从小到大排序。（可利用STL的sort算法）", "\n#", "include", "<bits/stdc++.h>\nusing namespace std;\n", "class", " CStudent\n{\n    ", "int", " nID;\n    ", "string", " strName;\n    map<", "int", ", double> mapScores;  ", "//存储多门课程成绩", "\npublic:\n    ", "CStudent(", "int", " ", "_nID", ", ", "string", " ", "_strName", ")", ";\n    void set", "ID(", "int", " ", "_nID", ")", ";\n    ", "int", " get", "ID()", ";\n    void set", "Name(", "string", " ", "_name", ")", ";\n    ", "string", " get", "Name()", ";\n    map<", "int", ", double> get", "Scores()", ";\n    void insert", "Score(", "int", " ", "cno", ", ", "double", " ", "score", ")", ";  ", "//增加一门课程成绩 cno是课程编号 ", "\n    void erase", "Score(", "int", " ", "cno", ")", ";     ", "//删除一门课程成绩", "\n    void find(", "int", " cno);\n    void modify(", "int", " cno,double score);\n    void display", "()", ";     ", "//输出学生学号、姓名和各科成绩", "\n};\n", "class", " Course\n{\n    ", "int", " nNo;\n    ", "string", " coursename;\n    ", "float", " fcredit;\n};\nCStudent::", "CStudent(", "int", " ", "_nID", ",", "string", " ", "_strName", ")", "\n{\n    nID=_nID;\n    strName=_strName;\n}\nvoid CStudent::set", "ID(", "int", " ", "_nID", ")", "\n{\n    nID=_nID;\n}\n", "int", " CStudent::get", "ID()", "\n{\n    return nID;\n}\nvoid CStudent::set", "Name(", "string", " ", "_name", ")", "\n{\n    strName=_name;\n}\n", "string", " CStudent::get", "Name()", "\n{\n    return strName;\n}\nmap<", "int", ",double> CStudent::get", "Scores()", "\n{\n    return mapScores;\n}\nvoid CStudent::insert", "Score(", "int", " ", "cno", ", ", "double", " ", "score", ")", "\n{\n   mapScores.insert(map<", "int", ",double>::value", "_type(", "cno", ",", "score", ")", ");\n}\nvoid CStudent::erase", "Score(", "int", " ", "cno", ")", "{\n    ", "for", "(map<", "int", ",double>::iterator it=mapScores.", "begin", "()", ";it!=mapScores.", "end", "()", ";it++)\n    {\n        ", "if", "(it->first==cno){\n            mapScores.erase(it);\n            break;\n        }\n    }\n}   \nvoid CStudent::find(", "int", " cno){\n    map<", "int", ",double>::iterator iter= mapScores.find (cno);\n    ", "if", " (iter!=mapScores.", "end", "()", ") \n       cout<<", "\"It is:\"", "<<iter->second<<endl;\n    ", "else", " cout<<", "\"Not Found\"", "<<endl;\n}\nvoid CStudent::modify(", "int", " cno,double score)\n{\n   map<", "int", ",double>::iterator iter=mapScores.find(cno);\n   ", "if", " (iter!=mapScores.", "end", "()", ") \n     iter->second=score;\n}\nvoid CStudent::display", "()", "{\n    cout<<", "\"Student ID:\"", "<<nID<<", "\" Name:\"", "<<strName<<endl;\n    cout<<", "\"Grades of all subjects: \"", "<<endl;\n    ", "for", "(map<", "int", ",double>::iterator iter=mapScores.", "begin", "()", ";iter!=mapScores.", "end", "()", ";iter++)\n    {\n        cout<<", "\"Course number:\"", "<<iter->first<<", "\"Scores:\"", "<<iter->second<<", "\" \"", "<<endl;\n    }\n    cout<<endl;\n}\n", "int", " main", "()", "\n{\n    ", "list", "<CStudent> v1;\n    ", "list", "<Course> v2;\n    CStudent stu1(", "1001", ",", "\"Phoebe\"", ");\n    stu1.insert", "Score(101,100)", ";\n    stu1.insert", "Score(102,99)", ";\n    stu1.insert", "Score(103,98)", ";\n    stu1.insert", "Score(106,99.5)", ";\n    stu1.display", "()", ";\n    CStudent stu2(", "1002", ",", "\"Lilith\"", ");\n    stu2.insert", "Score(101,95)", ";\n    stu2.insert", "Score(104,93)", ";\n    stu2.display", "()", ";\n    stu2.erase", "Score(101)", ";", "//测试eraseScore ", "\n    stu2.display", "()", ";\n    stu1.find(", "102", ");\n    stu1.find(", "105", ");\n    stu1.modify(", "106", ",", "97", ");\n    stu1.display", "()", ";\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你这是要写代码还是报告哦&amp;#xff0c;内容这么多。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["c语言二叉树的实训报告", ["一、实验目的", "\n\n", "掌握二叉树的定义、基本操作，综合应用所学的知识分析问题、解决问题，学会用建立二叉树并对其进行遍历，提高实际编程能力及程序调试能力。", "\n\n", "二、实验要求", "\n\n", "建立二叉树，并进行遍历（前序遍历、中序遍历、后序遍历）。", "\n\n", "三、实验方法内容", "\n\n", "算法设计思路", "\n\n", "二叉树的非递归遍历是用显示栈来储存二叉树的节点指针，先序遍历时，按二叉树的前序遍历的顺序访问接点，并将结点指针入栈，直到栈顶指针指向结点的左指针域为空时取出栈顶指针并删除栈顶指针，访问刚取出的指针指向的结点的右指针指向结点并将其指针入栈，如此反复执行则为非递归操作。", "\n\n", "二叉树的递归遍历：若二叉树为空，则空操作", "\n\n", " 先序遍历：", "\n\n", " （a）访问根结点；", "\n\n", " （b）先序遍历左子树；", "\n\n", " （c）先序遍历右子树。", "\n\n", "中序遍历：", "\n\n", " （a）中序遍历左子树", "\n\n", " （b） 访问根结点；", "\n\n", " （c）中序遍历右子树。", "\n\n", "后序遍历：", "\n\n", " （a）后序遍历左子树", "\n\n", " （b）后序遍历右子树", "\n\n", " （c）访问根结点；", "\n\n", "层次遍历：", "\n\n", "从二叉树第一层（根节点）开始，从上至下逐层遍历，在同一层中，则按从左到右的顺序对结点逐个访问。", "\n\n", "算法中用到的数据结构", "\n\n", " （1）void CreateBiTree 以二叉链表表示二叉树，建立一棵二叉树；", "\n\n", " （2）void PreOrderTraverse 输出二叉树的前序遍历结果；", "\n\n", " （3）void InOrderTraverse 输出二叉树的中序遍历结果；", "\n\n", " （4）void PostOrderTraverse 输出二叉树的后序遍历结果；", "\n\n", " （5）int LeafNodeCount 统计二叉树的叶结点个数；", "\n\n", " （6）int Node Count 统计二叉树的结点个数；", "\n\n", " （7）int Depth 计算二叉树的深度。", "\n\n", " （8）int Swap 交换二叉树每个结点的左孩子和右孩子；", "\n\n", "主要的常量变量", "\n\n", "void CreateBiTree", "\n\n", "void PreOrderTraverse", "\n\n", "void InOrderTraverse", "\n\n", "void PostOrderTraverse", "\n\n", "int LeafNodeCount", "\n\n", "int NodeCount", "\n\n", "int Depth", "\n\n", "int Swap"]], "Tag": "程序设计"}
{"Answer": "--start--\r\nthis: \t2875\r\n\r\n- polymorphism -----------\r\nimplements interface: \t3625\r\nextends abstract:     \t1578\r\nextends class:        \t6313\r\n\r\n-no polymorphism -----------\r\nimplements interface: \t2859\r\nextends abstract:     \t2828\r\nextends class:        \t2891\r\n\r\n--end--\r\n\r\n\r\n\r\n这个是我公司机子运行的效果，具体原因，我上面已经解释的很清楚了", "Konwledge_Point": "算法与程序设计", "Question": ["java的多态会极大影响速度吗？", ["给出以下代码和运行结果，盼各位指点。。。。。。", "\n\n", "对于接口A，抽象类B，一般类C，各自只有一个共同的方法，通过get()方法返回一个值", "\n\n", "设计另外三个类:AA实现接口A，BB继承抽象类B，CC继承一般类C", "\n\n", "设计test()方法，初始化三个类后，执行各个对象中的get()方法1000000000次，在形如B b = new BB()的前提下，通过b.get()样式运行后时间消耗远远大于通过((BB)b).get()循环的时间消耗，其他几个类似，代码附下", "\n\n", "哪位能给出个比较详细的解释吗？", "\n\n", "[code=\"java\"]package cn.edu.uestc.dmlab.clusterers.dbscan;", "\n\n", "public class InheritancePerformanceTest {", "\n    interface A {", "\n        public int get();", "\n    }", "\n\n", "abstract class B {\n    public abstract int get();\n}\n\nclass C {\n    public int get() {return 2;}\n\n}\n\nclass AA implements A {\n    @Override\n    public int get() {return 1;}\n}\n\nclass BB extends B {\n    @Override\n    public int get() {return 1;}\n}\n\nclass CC extends C {\n    @Override\n    public int get() {return 1;}\n}\n\npublic void test() {\n    A a = new AA();\n    B b = new BB();\n    C c = new CC();\n    int s = 1000000000; \n    long t =System.currentTimeMillis();\n\n    System.out.println(\"--start--\");\n\n    for (int i = 0; i < s; i++) {\n        get();\n    }\n    System.out.println(\"this: \\t\" + (System.currentTimeMillis()-t));\n\n\n    System.out.println(\"\\n- polymorphism -----------\");\n\n    t =System.currentTimeMillis();;\n    for (int i = 0; i < s; i++) {\n        a.get();\n    }\n    System.out.println(\"implements interface: \\t\"+(System.currentTimeMillis()-t));\n\n    t = System.currentTimeMillis();\n    for (int i = 0; i < s; i++) {\n        b.get();\n    }\n    System.out.println(\"extends abstract:     \\t\"+ (System.currentTimeMillis()-t));\n\n    t = System.currentTimeMillis();\n    for (int i = 0; i < s; i++) {\n        c.get();\n    }\n    System.out.println(\"extends class:        \\t\"+ (System.currentTimeMillis()-t));\n\n\n\n    System.out.println(\"\\n-no polymorphism -----------\");\n\n    t = System.currentTimeMillis();\n    for (int i = 0; i < s; i++) {\n        ((AA)a).get();\n    }\n    System.out.println(\"implements interface: \\t\"+ (System.currentTimeMillis()-t));\n\n    t = System.currentTimeMillis();\n    for (int i = 0; i < s; i++) {\n        ((BB)b).get();\n    }\n    System.out.println(\"extends abstract:     \\t\"+ (System.currentTimeMillis()-t));\n\n    t = System.currentTimeMillis();\n    for (int i = 0; i < s; i++) {\n        ((CC)c).get();\n    }\n    System.out.println(\"extends class:        \\t\"+ (System.currentTimeMillis()-t));\n\n    System.out.println(\"\\n--end--\");\n}\n\npublic int get() {\n    return 1;\n}\n\npublic static void main(String[] args) {\n    InheritancePerformanceTest a = new InheritancePerformanceTest();\n    a.test();\n}\n", "\n\n", "}", "\n[/code]", "\n[b]问题补充：[/b]", "\nto jansel:", "\n    调换过了也一样，由于结果不在一个数量级，所以先后顺序并不会影响多少。谢谢回答。", "\n[b]问题补充：[/b]", "\n另外，这里并不是突发奇想来测试这个，确实是在编写一个算法的时候感觉到了时间消耗的巨大差军，才专门做这个试验以求根本性解释问题，指导试验，请各位指点。谢谢！", "\n[b]问题补充：[/b]", "\n\n", "to qqxiaodi:", "\n    请问需要加什么样的“清理语句”呢？谢谢！", "\n\n", "to lovewhzlq:", "\n    不好意思，我没从那些文章里看出关于这段代码问题的所以然来，麻烦你能不能解释下我的测试为什么有问题呢？谢谢！", "\n\n", "[b]问题补充：[/b]", "\n\n", "另外，整个实验就在于使用b.get()方法和((BB)b).get()方法的区别，代码顺序可以随便变换，也可以分成两个来测试\n\n由于使用b.get()时间消耗和使用((BB)b).get()差距在5倍以上，所以我觉得跟机器的关系不大，由代码来看，跟垃圾收集也应该没多大关系。\n", "\n\n", "[b]问题补充：[/b]", "\nto walsh:", "\n    很奇怪你的测试结果，我当然不会随便测试一下就拿上来请教大家，而是分别在10多台机子上测试了这个程序，无论机子配置好坏，得到的结果都是类似如下的结果（比例类似，绝对值不同）", "\n[quote]--start--", "\nthis:  1812", "\n\n", "\n", "polymorphism -----------\nimplements interface:  1782\nextends abstract:      8859\nextends class:         8578", "\n", "-no polymorphism -----------", "\nimplements interface:  1328", "\nextends abstract:      1344", "\nextends class:         1313", "\n\n", "--end--[/quote]", "\n\n", "另外，就算你这里关于B的结果不能说明问题，那C的又如何解释呢，甚至A的也不符合你的说法呢？", "\n[b]问题补充：[/b]", "\nto walsh:", "\n    不好意思，我没有不相信你的意思，但是我又在8台不同机子上做了同样的测试，整个实验过程近20台机子的测试结果仍然和我上述的结果差不多，我真的不能重复你的实验结果。", "\n\n", "整个过程中我最关心的只是b.get()方法和((BB)b).get()，c.get()方法消耗时间多一些可以理解，我不理解的只是b.get()这个抽象方法在继承以后为什么会和c.get()类似。既然你不能重复我的实验结果，而我也不能重复你的实验结果，这个。。。。。难道还有什么其他的问题导致的这个问题啊？？？看来我还需要继续等待以及测试一下。\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;谢邀&amp;#xff0c;私信沟通一手。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["留学狗求大佬帮我看看这个C++哈希的问题怎么解答，需要在linux上跑", ["这是英文原文，链接: https://pan.baidu.com/s/1obkghFd_C59xibGdI_-Mlw 提取码: r75f ", "\n\n", "以下是翻译版本问题要求：", "\n\n", "描述（85分可交付成果/正确性/ 15分设计）", "\n\n", "我们首先提供您对该问题将要做什么的摘要。可交付成果 文件的末尾将提供输出格式。您将测试每个哈希 具有以下内容的实现：", "\n\n", "A）表中的元素总数（N），表的大小（T），负载系数 （Lambda = N / T），平均碰撞次数（M = C / N）和总碰撞次数 碰撞（C），", "\n\n", "B）您将检查另一个给定文件query_words.txt中的每个单词是否在哈希中 表格，并根据是否找到该单词打印相应的输出 找到了，找到该单词需要进行多少次探查（如果存在）。虽然你是 随文件一起提供，我们将使用看不见的测试文件以及另一个文件名，该文件名可能会 包含words.txt中所有单词的子集。", "\n\n", "为了实现上述目的，您将编写一个名为create_and_test_hash.cc的测试程序。 您的程序应像这样从终端运行（终端提示符为％）：", "\n\n", "% ./create_and_test_hash <words file name> <query words file name> <flag>", "\n\n", "对于二次探测应为“二次”，对于线性探测应为“ linear”，而“ double”应为“ double” 用于双重哈希。", "\n\n", "哈希和堆项目 例如，您可以在终端上写：", "\n\n", "% ./create_and_test_hash words.txt query_words.txt quadratic", "\n\n", "您可以使用提供的Makefile来编译和测试您的代码。", "\n\n", "对于双哈希，格式将略有不同，即如下：", "\n\n", "％./create_and_test_hash words.txt query_words.txt double R", "\n\n", "或者，也可以使用：", "\n\n", "％./create_and_test_hash words.txt query_words.txt double", "\n\n", "这里R是在实现double时应该使用的可选R值 在课堂上讨论并在教科书中描述的哈希技术：hash2（x）= R –（x mod R）。如果用户没有输入一个默认的R值，则应在代码中指定一个默认值 命令行。", "\n\n", "一，使用线性和二次探测进行散列（20分）", "\n\n", "修改提供的代码，以进行二次和线性探测，并测试create_and_test_hash。", "\n\n", "不要在其中的main（）函数内编写任何功能 create_and_test_hash.cc。在testHashingWrapper（）中编写所有功能 该文件中的功能。我们将使用我们自己的main函数，直接调用 testHashingWrapper（）。此包装函数将传递所有命令行参数 就像通常在主要功能中一样。", "\n\n", "您将打印上面提到的值，然后打印查询的单词，无论它们是 找到了，并确定了多少次探查。确切的交付物和输出格式 在文件末尾进行了描述。", "\n\n", "二。双重哈希（25分）", "\n\n", "编写代码以实现double_hashing.h，并使用create_and_test_hash进行测试。 这将是二次探测的变体。区别在于功能 FindPos（），现在必须使用其他策略来提供探测。作为第二个哈希 函数，请使用在课堂讲义中讨论并在教科书中找到的hash2（x）= R – （x mod R）。我们将使用我们自己的R值测试您的代码。此外，请指定哪个R README.HASH文件中用于测试程序的值。 切记不要在main（）函数中包含任何功能 create_and_test_hash.cc。", "\n\n", "您将打印当前的R值，上面A部分中提到的值，然后是 查询的单词，是否找到它们以及确定该单词需要进行多少次探查。精确的 文件的末尾描述了可交付成果和输出格式。", "\n\n", "三，拼写检查（40分）", "\n\n", "现在，您可以通过使用线性或二次或双精度来实现拼写检查器 哈希算法。给定一个文档，您的程序应正确输出所有 带有此类标签的拼写单词以及所有拼写错误的单词。对于每个拼写错误的单词 您应该提供字典中的候选更正列表，该列表可以由 将以下规则之一应用于拼写错误的单词：", "\n\n", "a）在任何可能的位置添加一个字符", "\n\n", "b）从单词中删除一个字符", "\n\n", "c）交换单词中的相邻字符 您的程序应从命令行运行，如下所示：", "\n\n", "% ./spell_check <document file> <dictionary file>", "\n\n", "系统会为您提供一个名为document1_short.txt，document_1.txt的小文档， 还有一个字典文件，其中包含大约370k个单词，名为wordsEnglish.txt。 例如，您的拼写检查器应更正以下错误。", "\n\n", "决定性->决定性（情况A） 决策->决策（案例B） 乡镇->国家（案例C）", "\n\n", "纠正提供的词典文件中不存在的任何单词（即使它是正确的） 英文）。", "\n\n", "一些提示：1.请注意，我们提供的词典是实际英语词典的子集， 只要您的拼写检查是合乎逻辑的，您就可以取得成绩。 例如， 字母“ i”不在词典中，更正可能是“中”，“如果”甚至是 “你好”。 这是可接受的输出。", "\n\n", "2.另外，如果将“编辑者”更正为“编辑者”，则可以。 （案例B，删除 特点）", "\n\n", "3.我们建议删除开头和结尾的所有标点符号，对于所有标点符号 单词会将字母转换为小写字母（例如，“ Hello！”被替换为“ hello”， 在拼写检查之前）。", "\n\n", "不要在spell_check.cc的main（）函数内编写任何功能。 写 该文件中的testSpellingWrapper（）内部的所有功能。 我们将使用我们的 自己的主要功能，直接调用testSpellingWrapper（）。 该包装函数是 传递了所有命令行参数，就像通常在main函数中一样。 您将打印该单词，无论它是否已经正确拼写（又名找到），以及所有 如果在词典中找不到该单词，则可能进行拼写更正。 提防 解析时在文档中使用标点符号和格式！ 确切的可交付成果和输出格式如下所述。", "\n\n", "（以下某部分是我要递交的文件，我省略翻译）", "\n\n", "格式 对于线性和二次探测标志（第一部分），格式应如下：", "\n\n", "number_of_elements: <int>", "\nsize_of_table: <int>", "\nload_factor: <float>", "\naverage_collisions: <float>", "\ntotal_collisions: <int>", "\n<new line>", "\n<word1> Found <probes1>", "\n<word2> Not_Found <probes2>", "\n<word3> Found <probes3>", "\n\n", "请包括在表格属性部分和单词列表之间显示的单行（ASCII 10，列为“ <新行>”）。 请加下划线 在“没有”和“找到”之间。 这里显示的单词列表是一个示例，实际输出将取决于query_words.txt中的单词。average_collisions和total_collisions的值将根据所使用的计算机而有所不同。 切换机器或寻求帮助时请注意这一点。 您的提交将在同一台计算机上评分，因此，只要您的实现对其他所有内容都是正确的，这些值就将保持一致。 对于所有标记（线性，二次和双精度），都会发生这种情况。", "\n\n", "正确输出的示例（数字不代表实际表）：", "\n\n", "number_of_elements: 670", "\nsize_of_table: 1560", "\nload_factor: 0.429487", "\naverage_collisions: 0.005", "\ntotal_collisions: 3", "\nhill Found 1", "\nskiny Not_Found 3", "\nbaked Found 1", "\n\n", " ", "\n\n", "对于双标记（第二部分），格式应如下：", "\n\n", "r_value: <int>", "\n<SAME FORMAT AS LINEAR / QUADRATIC>", "\n\n", "双散列的输出之间唯一的区别是增加了一行 r_value：<int>。 紧接在该行下方的输出应与线性输出相同 和二次探查，如上所述。 请在“不”之间添加下划线 和“找到”。", "\n\n", "正确输出的示例（数字不代表实际表）：", "\n\n", "number_of_elements: 200", "\nsize_of_table: 750", "\nload_factor: 0.266666", "\naverage_collisions: 0.0135", "\ntotal_collisions: 3", "\nhill Found 1", "\nskiny Not_Found 3", "\nbaked Found 1", "\n\n", "对于拼写检查（第三部分），输出应如下所示。", "\n\n", "<word1> is CORRECT", "\n<word2> is CORRECT", "\n<word3> is INCORRECT", "\n*** <word3> -> <alternate word> *** case <TYPE: A, B or C>", "\n*** <word3> -> <alternate word> *** case <TYPE: A, B or C>", "\n<word4> is CORRECT", "\n\n", "请确保您的空格，大写字母和换行符正确无误。 请在输出中包括***和->。 这里显示的单词列表是一个 例如，实际输出将取决于文档文件中的单词。 可能有 每个案例类型有一个以上的结果。", "\n\n", "正确输出的示例：（显示的单词不代表实际值 输入）", "\n\n", "country is CORRECT", "\nlikely is CORRECT", "\nclimbing is CORRECT", "\nlwa is INCORRECT", "\n*** lwa -> wa *** case B", "\n*** lwa -> la *** case B", "\n*** lwa -> law *** case C", "\ncases is CORRECT", "\n\n", " ", "\n\n", " "]], "Tag": "程序设计"}
{"Answer": "```\r\nreturninfo staticlinklist::invertlist(void)//静态链表所有数据反转\r\n{\r\n\tint nowp,midp,lastp;//启用多个辅助指针\r\n\tif(empty())\r\n\t\treturn underflow;\r\n\tnowp=dataarray[headp].next;\r\n\tmidp=NULLP;\r\n\tint num=0;\r\n\twhile(nowp!=NULLP)\r\n\t{\r\n\t\tlastp=midp;\r\n\t\tmidp=nowp;\r\n\t\tnowp=dataarray[nowp].next;\r\n\t\tif(num==0)\r\n\t\t{\r\n\t\t\tdataarray[midp].next=headp;\r\n\t\t\tdataarray[headp].next=NULLP;\r\n\t\t}\r\n\t\telse\r\n\t\t\tdataarray[midp].next=lastp;\r\n\t\tnum++;\r\n\t}\r\n\theadp=midp;\r\n\treturn success;\r\n}\r\n```", "Konwledge_Point": "算法与程序设计", "Question": ["静态链表为什么实现不了数据反转，哪里错了，具体的代码如何实现？", ["//vc6.0实现的C++版\n//功能：静态链表实现线性表的基本功能\n#include <iostream.h>//读入必须包含的头文件\n#include <windows.h>//清屏和颜色设置需要\n#include <iomanip.h>\n\nenum returninfo{success,fail,overflow,underflow,range_error};//定义返回信息清单\n#define NULLP -1//静态链表的空地址模拟\nconst int MAXSIZE=10;//静态链表的总空间大小\n\nclass node\n{\npublic:\n    int data;//数据域\n    int next;//指针域\n};\n\n/*\n定义一个线性表类staticlinklist\n*/\nclass staticlinklist\n{\nprivate:\n    node dataarray[MAXSIZE];//定义静态链表的数组\n    int freep,headp;//freep管理空闲空间，headp管理实际线性表空间\n    int count;//计数器 统计结点个数即线性表的长度\npublic:\n    staticlinklist();//构造函数\n    ~staticlinklist();//析构函数\n    int getnewnode(void);//申请一个新的可用空间\n    returninfo create(int number);//静态链表的初始化\n    bool empty(void) const;//判断是否空链\n    int size(void) const;//求静态链表的长度\n    void deletenode(int position);//把某个空间地址归还给空闲空间\n    returninfo traverse(void);//遍历静态链表所有元素\n    returninfo retrieve(int position,int &item) const;//读取一个结点\n    returninfo replace(int position,const int &item);//修改一个结点\n    returninfo insert(int position,const int &item);//插入一个结点\n    returninfo remove(int position);//删除一个结点\n    returninfo invertlist(void);//静态链表所有数据反转\n    void showinfo(void);//显示静态链表相关信息\n};\n\nstaticlinklist::staticlinklist()//构造函数\n{\n    //静态链表初始化，约定开始时地址域为从小到大顺序挂链，最后一个为NULLP（即-1）\n    int i;\n    for(i=0;i<MAXSIZE;i++)\n        dataarray[i].next=i+1;\n    dataarray[MAXSIZE-1].next=-1;\n    freep=0;//设置空闲区的指针\n    count=0;//计数器清零，表明开始时没有实际数据\n    headp=NULLP;\n}\n\nstaticlinklist::~staticlinklist()//析构函数\n{\n}\n\nstaticlinklist::getnewnode(void)\n{\n    int tempaddress;//定义一个临时地址指针\n    tempaddress=freep;//保存目前可用空间的第一个地址\n    freep=dataarray[freep].next;//可用空间头指针后移\n    return tempaddress;\n}\n\nreturninfo staticlinklist::create(int number)//静态链表的初始化\n{\n    int tempaddress,tempp;\n    cout<<\"请依次输入数据（用空格隔开）：\";\n    for(int i=1;i<=number;i++)\n    {\n        tempaddress=getnewnode();\n        cin>>dataarray[tempaddress].data;\n        dataarray[tempaddress].next=NULLP;\n        count++;\n        if(i==1)//挂第一个结点\n        {\n            headp=tempaddress;\n            tempp=headp;\n        }\n        else//挂其他结点\n        {\n            dataarray[tempp].next=tempaddress;\n            tempp=tempaddress;\n        }\n    }\n    return success;\n}\n\nbool staticlinklist::empty(void) const//判断是否空链\n{\n    if(headp==NULLP)\n        return true;\n    else\n        return false;\n}\n\nint staticlinklist::size(void) const//求静态链表的长度\n{\n    return count;\n}\n\nvoid staticlinklist::deletenode(int position)\n{\n    dataarray[position].next=freep;\n    freep=position;\n}\n\nreturninfo staticlinklist::traverse(void)//遍历静态链表中的所有元素\n{\n    int searchp;//启用搜索指针\n    if(empty())\n        return underflow;//空表的处理\n    searchp=headp;\n    cout<<\"静态链表中的全部数据为：Headp->\";//提示显示数据开始\n    while(searchp!=NULLP)//循环显示所有数据\n    {\n        cout<<\"[\"<<dataarray[searchp].data;\n        if(dataarray[searchp].next==NULLP)\n            cout<<\"|^]\";\n        else\n            cout<<\"|-]->\";\n        searchp=dataarray[searchp].next;\n    }\n    cout<<endl;//最后有一个回车的控制\n    return success;//本次操作成功\n}\n\nreturninfo staticlinklist::retrieve(int position,int &item) const//读取一个结点\n{\n    if(empty())//处理意外，空表\n        return underflow;   \n    if(position<=0||position>=count+1)       //处理意外，范围不正确\n        return range_error;\n    int searchp=headp;//定义搜索指针，初始化\n    for(int i=1;i<position&&searchp!=NULLP;i++)//提示：注意小于号\n        searchp=dataarray[searchp].next;//顺序访问方式，用循环，算法复杂度是O(n)\n    item=dataarray[searchp].data;//返回读取的数据\n    return success;//本次操作成功\n}\n\nreturninfo staticlinklist::replace(int position,const int &item)//修改一个结点\n{\n    if(empty())//处理意外，空表\n        return underflow;   \n    if(position<=0||position>=count+1)       //处理意外，范围不正确\n        return range_error;\n    int searchp=headp;//定义搜索指针，初始化\n    for(int i=1;i<position&&searchp!=NULLP;i++)//提示：注意小于号\n        searchp=dataarray[searchp].next;//顺序访问方式，用循环，算法复杂度是O(n)\n    dataarray[searchp].data=item;//实际修改数据的语句\n    return success;//本次操作成功\n}\n\nreturninfo staticlinklist::insert(int position,const int &item)//插入一个结点\n{\n    if(position<=0||position>=count+2)       //处理意外，范围不正确\n        return range_error;\n    int newnodep,searchp=headp,followp=NULLP;\n    newnodep=getnewnode();//此处需要申请新的一个可用空间，地址赋给newnodep\n    if(newnodep==NULLP)\n        return overflow;\n    dataarray[newnodep].data=item;//给数据赋值\n    if(position==1)\n    {\n        dataarray[newnodep].next=headp;\n        headp=newnodep;\n        count++;\n        return success;\n    }\n    for(int i=1;i<position&&searchp!=NULLP;i++)//以下为查找插入位置\n    {\n        followp=searchp;\n        searchp=dataarray[searchp].next;\n    }\n    //以下开始修改链表，完成插入数据\n    dataarray[newnodep].next=dataarray[followp].next;//注意此处的次序相关性\n    dataarray[followp].next=newnodep;\n    count++;//计数器加1\n    return success;\n}\n\nreturninfo staticlinklist::remove(int position)//删除一个结点\n{\n    if(empty())//处理意外，空表\n        return underflow;   \n    if(position<=0||position>=count+1)       //处理意外，范围不正确\n        return range_error;\n    int searchp=headp,followp=NULLP;//这里两个指针的初始值设计一前一后\n    if(position==1)\n    {\n        searchp=headp;\n        headp=dataarray[headp].next;\n        deletenode(searchp);//释放该结点空间\n        count--;//计数器减1\n        return success;\n    }\n    for(int i=1;i<position&&searchp!=NULLP;i++)\n    {\n        followp=searchp;\n        searchp=dataarray[searchp].next;\n    }\n    dataarray[followp].next=dataarray[searchp].next;//删除结点的实际语句\n    deletenode(searchp);//释放该结点\n    count--;//计数器减1\n    return success;\n}\n\nreturninfo staticlinklist::invertlist(void)//静态链表所有数据反转\n{\n    int nowp,midp,lastp;//启用多个辅助指针\n    if(empty())\n        return underflow;\n    nowp=dataarray[headp].next;\n    midp=NULLP;\n    while(nowp!=NULLP)\n    {\n        lastp=midp;\n        midp=nowp;\n        nowp=dataarray[nowp].next;\n        dataarray[midp].next=lastp;\n    }\n    dataarray[headp].next=midp;\n    return success;\n}\n\nvoid staticlinklist::showinfo(void)//显示静态链表相关信息\n{\n    int searchp;\n    cout<<\"目前静态链表总空间：\"<<setw(3)<<MAXSIZE<<\"地址为（0--\"<<MAXSIZE-1<<\"）\"<<endl;\n    cout<<\"其中自由空间大小为：\"<<setw(3)<<MAXSIZE-count<<\"编号为：\";\n    searchp=freep;\n    while(searchp!=NULLP)\n    {\n        cout<<\" \"<<searchp;\n        searchp=dataarray[searchp].next;\n    }\n    cout<<endl;\n    cout<<\"线性表的已用空间为：\"<<setw(3)<<count<<\"编号为：\";\n    searchp=headp;\n    while(searchp!=NULLP)\n    {\n        cout<<\" \"<<searchp;\n        searchp=dataarray[searchp].next;\n    }\n    cout<<endl;\n}\n\n/*\n定义一个实现静态链表功能的菜单处理类interfacebase \n*/\nclass interfacebase\n{\nprivate:\n    staticlinklist listonface;\npublic:\n    void clearscreen(void);//清屏\n    void showmenu(void);//显示菜单函数\n    int userchoice(void);//用户的选项\n    returninfo processmenu(int menuchoice);//菜单函数\n};\n\nvoid interfacebase::clearscreen(void)\n{\n    system(\"cls\");\n}\n\nvoid interfacebase::showmenu(void)\n{\n    cout<<\"静态链表基本功能菜单\"<<endl;\n    cout<<\"==================\"<<endl;\n    cout<<\"1.输入数据（键盘输入）\"<<endl;\n    cout<<\"2.显示数据（遍历全部数据）\"<<endl;\n    cout<<\"3.修改数据（要提供位置和新值）\"<<endl;\n    cout<<\"4.插入数据（要提供位置和新值）\"<<endl;\n    cout<<\"5.删除数据（要提供位置）\"<<endl;\n    cout<<\"6.读取数据（要提供位置）\"<<endl;\n    cout<<\"7.求表长度\"<<endl;\n    cout<<\"8.数据反转（全部数据逆序存储）\"<<endl;\n    cout<<\"9.静态链表相关信息\"<<endl;\n    cout<<\"0.退出程序\"<<endl;\n    cout<<\"==================\"<<endl;\n}\n\nint interfacebase::userchoice(void)\n{\n    int menuchoice;\n    cout<<\"请输入您的选择：\";\n    cin>>menuchoice;\n    return menuchoice;\n}\n\nreturninfo interfacebase::processmenu(int menuchoice)\n{\n    int position,item,returnvalue;\n    switch(menuchoice)//根据用户的选择进行相应的操作\n    {\n    case 1:\n        cout<<\"请问你要输入数据的个数，注意要在\"<<MAXSIZE<<\"个以内：\";\n        cin>>item;\n        if(item>MAXSIZE)\n            cout<<\"对不起，输入数据超限，操作已取消！请按任意键继续...\"<<endl;\n        else\n        {\n            returnvalue=listonface.create(item);\n            if(returnvalue==success)\n                cout<<\"建立静态链表操作成功！请按任意键继续...\"<<endl;\n        }\n        break;\n    case 2:\n        returnvalue=listonface.traverse();\n        if(returnvalue==underflow)\n            cout<<\"静态链表目前为空，没有数据可以显示！请按任意键继续...\"<<endl;\n        else\n            cout<<\"静态链表遍历操作成功！请按任意键继续...\"<<endl;\n        break;\n    case 3:\n        cout<<\"请输入要修改数据的位置：\";\n        cin>>position;\n        cout<<\"请输入要修改的新数据：\";\n        cin>>item;\n        returnvalue=listonface.replace(position,item);\n        if(returnvalue==underflow)\n            cout<<\"对不起，静态链表已空！请按任意键继续...\"<<endl;\n        else if(returnvalue==range_error)\n            cout<<\"对不起，修改的位置超出了范围！请按任意键继续...\"<<endl;\n        else\n            cout<<\"修改操作成功！请按任意键继续...\"<<endl;\n        break;\n    case 4:\n        cout<<\"请输入要插入数据的位置：\";\n        cin>>position;\n        cout<<\"请输入要插入的新数据：\";\n        cin>>item;\n        returnvalue=listonface.insert(position,item);//注意这个位置的参数\n        if(returnvalue==overflow)\n            cout<<\"对不起，静态链表溢出，无法插入新数据！请按任意键继续...\"<<endl;\n        else if(returnvalue==range_error)\n            cout<<\"对不起，插入的位置超出了范围！请按任意键继续...\"<<endl;\n        else\n            cout<<\"插入操作成功！请按任意键继续...\"<<endl;\n        break;\n    case 5:\n        cout<<\"请输入要删除数据的位置：\";\n        cin>>position;\n        returnvalue=listonface.remove(position);//注意这个位置的参数\n        if(returnvalue==underflow)\n            cout<<\"对不起，静态链表已空！请按任意键继续......\"<<endl;\n        else if(returnvalue==range_error)\n            cout<<\"对不起，删除的位置超出了范围！请按任意键继续...\"<<endl;\n        else\n            cout<<\"删除操作成功！请按任意键继续...\"<<endl;\n        break;\n    case 6:\n        cout<<\"请输入要读取数据的位置：\";\n        cin>>position;\n        returnvalue=listonface.retrieve(position,item);\n        if(returnvalue==underflow)\n            cout<<\"对不起，静态链表已空！请按任意键继续......\"<<endl;\n        else if(returnvalue==range_error)\n            cout<<\"对不起，读取的位置超出了范围！请按任意键继续...\"<<endl;\n        else\n            cout<<\"读取的数据为：\"<<item<<endl<<\"读取操作成功！请按任意键继续...\"<<endl;\n        break;\n    case 7:\n        cout<<\"静态链表目前的长度为：\"<<listonface.size()<<endl;\n        cout<<\"求静态链表长度操作成功！请按任意键继续...\"<<endl;\n        break;\n    case 8:\n        returnvalue=listonface.invertlist();\n        if(returnvalue==underflow)\n            cout<<\"对不起，链表已空！请按任意键继续......\"<<endl;\n        else\n            cout<<\"链表所有元素反转操作成功！请按任意键继续...\"<<endl;\n        break;\n    case 9:\n        listonface.showinfo();\n        break;\n    case 0:\n        exit(0);\n    default:\n        cout<<\"对不起，您输入的功能编号有错！请重新输入！！！\"<<endl;\n        break;\n    }\n    return success;\n}\n\n/*\n程序主入口\n*/\nvoid main(void)\n{\n    int menuchoice;//定义变量，菜单选单项的选择\n    interfacebase interfacenow;\n    staticlinklist linklistnow;\n    system(\"color f0\");//修改屏幕的背景色和字的颜色\n    interfacenow.clearscreen();//清屏\n    while(1)//永真循环\n    {\n        interfacenow.showmenu();//显示菜单\n        menuchoice=interfacenow.userchoice();//获取用户的选择\n        interfacenow.processmenu(menuchoice);//处理用户的选择\n        system(\"pause\");//暂停\n        interfacenow.clearscreen();//清屏\n    }\n}//主函数结束\n"]], "Tag": "程序设计"}
{"Answer": "[quote]CONSTRAINT `dy_apply_ibfk_1` FOREIGN KEY (`UID`) REFERENCES `dy_use[/quote]\r\n这个是定义外健\r\n\r\n[quote]LOCK TABLES `dy_revert` WRITE[/quote]\r\n这个是锁表,他在插入前都锁了下,插完解锁[quote]UNLOCK TABLES; [/quote]", "Konwledge_Point": "算法与程序设计", "Question": ["看别人的项目，就是数据库的表看不懂，帮忙解释下", ["-- MySQL dump 10.11", "\n\n", "-- Host: localhost    Database: zxdy", "\n\n", "-- Server version   5.0.41-community-nt", "\n\n", "/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT ", "/;", "\n/", "!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS ", "/;", "\n/", "!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION ", "/;", "\n/", "!40101 SET NAMES latin1 ", "/;", "\n/", "!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE ", "/;", "\n/", "!40103 SET TIME_ZONE='+00:00' ", "/;", "\n/", "!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 ", "/;", "\n/", "!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 ", "/;", "\n/", "!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' ", "/;", "\n/", "!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;", "\n\n", "\n\n", "-- Table structure for table ", "dy_apply", "\n", "\n\n", "DROP TABLE IF EXISTS ", "dy_apply", ";", "\nCREATE TABLE ", "dy_apply", " (", "AID", " int(11) NOT NULL auto_increment,", "UID", " int(11) default NULL,", "TGID", " int(11) default NULL,", "AReason", " varchar(200) NOT NULL,", "AFlag", " int(11) default '0',", "AStatus", " char(10) default '申请中',", "\n  PRIMARY KEY  (", "AID", "),", "\n  KEY ", "UID", " (", "UID", "),", "\n  KEY ", "TGID", " (", "TGID", "),", "\n [color=red] CONSTRAINT ", "dy_apply_ibfk_1", " FOREIGN KEY (", "UID", ") REFERENCES ", "dy_user", " (", "UID", ") ON DELETE CASCADE,", "\n  CONSTRAINT ", "dy_apply_ibfk_2", " FOREIGN KEY (", "TGID", ") REFERENCES ", "dy_topic_group", " (", "TGID", ") ON DELETE CASCADE", "\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;[/color]--", "\n\n", "-- Dumping data for table ", "dy_apply", "\n", "\n\n", "[color=red]LOCK TABLES ", "dy_apply", " WRITE;[/color]/*!40000 ALTER TABLE ", "dy_apply", " DISABLE KEYS ", "/;", "\nINSERT INTO ", "dy_apply", " VALUES (2,1,10002,'范德萨发大萨菲',1,'拒绝申请'),(3,1,10004,'范德萨发大',0,'申请中'),(4,1,10000,'fsfaf',1,'拒绝申请'),(5,1,10002,'dsf',1,'拒绝申请'),(7,3,10002,'范德萨发大是',1,'同意申请'),(8,1,10002,'feafdsafdsafdas',1,'同意申请'),(9,1,10000,'fefewfewa',1,'同意申请'),(10,1,10003,'21',0,'申请中'),(11,1,10008,'fdsa',0,'申请中'),(12,1,10006,'想学习',0,'申请中');", "\n/", "!40000 ALTER TABLE ", "dy_apply", " ENABLE KEYS */;", "\nUNLOCK TABLES;", "\n\n", "\n\n", "-- Table structure for table ", "dy_revert", "\n", "\n\n", "DROP TABLE IF EXISTS ", "dy_revert", ";", "\nCREATE TABLE ", "dy_revert", " (", "RID", " int(11) NOT NULL auto_increment,", "TID", " int(11) default NULL,", "UID", " int(11) default NULL,", "RTitle", " varchar(200) default NULL,", "RContent", " text NOT NULL,", "RDate", " datetime NOT NULL,", "\n  PRIMARY KEY  (", "RID", "),", "\n  KEY ", "TID", " (", "TID", "),", "\n  KEY ", "UID", " (", "UID", "),", "\n [color=red] CONSTRAINT ", "dy_revert_ibfk_1", " FOREIGN KEY (", "TID", ") REFERENCES ", "dy_topic", " (", "TID", ") ON DELETE CASCADE,", "\n  CONSTRAINT ", "dy_revert_ibfk_2", " FOREIGN KEY (", "UID", ") REFERENCES ", "dy_user", " (", "UID", ") ON DELETE CASCADE", "\n\n", ") ENGINE=InnoDB DEFAULT CHARSET=latin1;[/color]", "\n\n", "-- Dumping data for table ", "dy_revert", "\n", "\n\n", "[color=red]LOCK TABLES ", "dy_revert", " WRITE;[/color]/*!40000 ALTER TABLE ", "dy_revert", " DISABLE KEYS ", "/;", "\nINSERT INTO ", "dy_revert", " VALUES (1,2,3,'','看书，上网问问题','2008-12-08 11:08:31'),(2,1,3,'','传说新版本的JAVA 会自动缓存BYTE范围内的值.','2008-12-08 11:08:31'),(3,1,3,'','楼主懂了吗？可以参考Java里的源代码','2008-12-08 11:08:31'),(4,1,3,'','谢谢大家指教','2008-12-08 11:08:31'),(5,3,3,'','认真学习，专心研究的话就好学','2008-12-08 11:08:31'),(6,10,1,'','\\r\\n测试测试测试测试测试测试测试测试测试10\\r\\n测试测试测试测试测试测试测试测试测试10\\r\\n测试测试测试测试测试测试测试测试测试10','2008-12-08 20:13:07'),(7,10,1,'回答 xyz 的问题','\\r\\n测试测试测试测试测试测试测试测试测试10\\r\\n测试测试测试测试测试测试测试测试测试10\\r\\n测试测试测试测试测试测试测试测试测试10','2008-12-08 20:13:15'),(8,1,2,'','都是一个人????','2008-12-10 23:01:33'),(9,6,2,'','新版本会缓存的 呵呵','2008-12-11 23:24:32'),(10,8,1,'','再次测试啊啊啊 啊','2008-12-12 01:16:36'),(11,10,1,'','学生\\r\\n\\r\\n注册时间 2008-12-08\\r\\n\\r\\n最后登陆 2008-12-12\\r\\n 2楼  发表于 2008-12-08 20:13:15 回答 xyz 的问题\\r\\n测试测试测试测试测试测试测试测试测试10 测试测试测试测试测试测试测试测试测试10 测试测试测试测试测试测试测试测试测试10 ','2008-12-12 01:16:56'),(12,4,2,'','回答过的问题嘛算法','2008-12-12 10:58:57'),(13,10,2,'','回答过了，是不是没有了么','2008-12-12 13:08:35'),(14,3,2,'','回答了 谢谢 呵呵。。。','2008-12-12 13:27:24'),(15,15,1,'','bbbbbbbbbbbbbbbbb','2009-03-16 20:45:19'),(16,15,1,'','ccccccccccccccc','2009-03-16 20:59:07'),(17,17,1,'','ssssssssssssssssss','2009-03-16 21:00:10');", "\n/", "!40000 ALTER TABLE ", "dy_revert", " ENABLE KEYS */;", "\nUNLOCK TABLES;", "\n\n", "\n\n", "-- Table structure for table ", "dy_topic", "\n", "\n\n", "DROP TABLE IF EXISTS ", "dy_topic", ";", "\nCREATE TABLE ", "dy_topic", " (", "TID", " int(11) NOT NULL auto_increment,", "UID", " int(11) default NULL,", "TGID", " int(11) default NULL,", "TTitle", " varchar(200) NOT NULL,", "TContent", " text NOT NULL,", "TDate", " datetime NOT NULL,", "TReadCount", " int(11) default '0',", "\n  PRIMARY KEY  (", "TID", "),", "\n  KEY ", "UID", " (", "UID", "),", "\n  KEY ", "TGID", " (", "TGID", "),", "\n  CONSTRAINT ", "dy_topic_ibfk_1", " FOREIGN KEY (", "UID", ") REFERENCES ", "dy_user", " (", "UID", ") ON DELETE CASCADE,", "\n  CONSTRAINT ", "dy_topic_ibfk_2", " FOREIGN KEY (", "TGID", ") REFERENCES ", "dy_topic_group", " (", "TGID", ") ON DELETE CASCADE", "\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;", "\n\n", "\n\n", "-- Dumping data for table ", "dy_topic", "\n", "\n\n", "LOCK TABLES ", "dy_topic", " WRITE;", "\n/*!40000 ALTER TABLE ", "dy_topic", " DISABLE KEYS ", "/;", "\nINSERT INTO ", "dy_topic", " VALUES (1,1,10001,'怎样学习框架ssh','学习struts spring hibernate 的顺序是ssh吗  顺便根据我的情况推荐几本书','2008-12-08 11:07:16',31),(2,2,10003,'C++很难吗？应该怎么样学习呢','请给我推荐几本C++的书，给我讲些学习方法谢谢','2008-12-08 11:07:16',19),(3,2,10001,'测试','测试测试测试测试测试测试测试测试测试','2008-12-08 11:07:16',19),(4,1,10001,'JAVA很难吗？应该怎么样学习呢','请给我推荐几本JAVA的书，给我讲些学习方法谢谢','2008-12-08 11:07:16',14),(5,1,10002,'请教一句SQL这么写。。','这个SQL好难啊，应该怎么学呢','2008-12-08 11:07:16',12),(6,1,10001,'Integer类的一个小问题 ==比较','Integer内的值的大小在Byte范围内时，==比较返回true 在那范围之外返回false \\n这是为什么呢，为什么会这样》？ ','2008-12-08 11:07:34',32),(7,1,10002,'测试71','测试测试测试测试测试测试测试测试测试7','2008-12-08 11:08:09',13),(8,1,10001,'测试81','测试测试测试测试测试测试测试测试测试8','2008-12-08 11:08:09',21),(9,1,10002,'测试91','测试测试测试测试测试测试测试测试测试9','2008-12-08 11:08:09',16),(10,1,10001,'测试101','测试测试测试测试测试测试测试测试测试10','2008-12-08 11:08:09',29),(11,1,10002,'测试111','测试测试测试测试测试测试测试测试测试11','2008-12-08 11:08:09',12),(12,1,10001,'测试121','测试测试测试测试测试测试测试测试测试12','2008-12-08 11:08:09',13),(13,1,10005,'自动控制的课本是哪个？','自动控制的课本是哪个？自动控制的课本是哪个？自动控制的课本是哪个？','2008-12-12 01:18:07',2),(14,1,10000,'我是第一个来到这里的','第一个提问的哦 呵呵','2008-12-12 14:01:29',1),(15,1,10000,'aaaaaaaaaa','aabbbbbbbbbbbbbbbbbbbb','2009-03-16 20:44:05',6),(16,1,10000,'bbccccccccccccc','aaaaaaaaaaaaaa','2009-03-16 20:58:57',0),(17,1,10000,'11111111111111111','22222222222222222222','2009-03-16 21:00:00',2);", "\n/", "!40000 ALTER TABLE ", "dy_topic", " ENABLE KEYS */;", "\nUNLOCK TABLES;", "\n\n", "\n\n", "-- Table structure for table ", "dy_topic_group", "\n", "\n\n", "DROP TABLE IF EXISTS ", "dy_topic_group", ";", "\nCREATE TABLE ", "dy_topic_group", " (", "TGID", " int(11) NOT NULL auto_increment,", "TGName", " varchar(50) NOT NULL,", "TDetail", " varchar(200) NOT NULL,", "\n  PRIMARY KEY  (", "TGID", ")", "\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;", "\n\n", "\n\n", "-- Dumping data for table ", "dy_topic_group", "\n", "\n\n", "LOCK TABLES ", "dy_topic_group", " WRITE;", "\n/*!40000 ALTER TABLE ", "dy_topic_group", " DISABLE KEYS ", "/;", "\nINSERT INTO ", "dy_topic_group", " VALUES (10000,'Java网络编程','计算机与自动控制学院'),(10001,'数据库系统概论','计算机与自动控制学院'),(10002,'C语言程序设计','计算机与自动控制学院'),(10003,'高等数学','理学院'),(10004,'线性代数','理学院'),(10005,'自动控制原理','机械学院'),(10006,'大学英语1','外国语学院'),(10007,'运筹学','经济管理学院'),(10008,'运筹学','经济管理学院'),(10009,'大学物理','基础课程'),(10010,'高等数学','基础课程');", "\n/", "!40000 ALTER TABLE ", "dy_topic_group", " ENABLE KEYS */;", "\nUNLOCK TABLES;", "\n\n", "\n\n", "-- Table structure for table ", "dy_tu", "\n", "\n\n", "DROP TABLE IF EXISTS ", "dy_tu", ";", "\nCREATE TABLE ", "dy_tu", " (", "TUID", " int(11) NOT NULL auto_increment,", "UID", " int(11) default NULL,", "TGID", " int(11) default NULL,", "\n  PRIMARY KEY  (", "TUID", "),", "\n  KEY ", "UID", " (", "UID", "),", "\n  KEY ", "TGID", " (", "TGID", "),", "\n  CONSTRAINT ", "dy_tu_ibfk_1", " FOREIGN KEY (", "UID", ") REFERENCES ", "dy_user", " (", "UID", ") ON DELETE CASCADE,", "\n  CONSTRAINT ", "dy_tu_ibfk_2", " FOREIGN KEY (", "TGID", ") REFERENCES ", "dy_topic_group", " (", "TGID", ") ON DELETE CASCADE", "\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;", "\n\n", "\n\n", "-- Dumping data for table ", "dy_tu", "\n", "\n\n", "LOCK TABLES ", "dy_tu", " WRITE;", "\n/*!40000 ALTER TABLE ", "dy_tu", " DISABLE KEYS ", "/;", "\nINSERT INTO ", "dy_tu", " VALUES (1,2,10000),(2,2,10001),(3,2,10002),(4,1,10001),(6,1,10005),(10,3,10002),(12,1,10000),(13,1,10002),(14,3,10001),(15,4,10001),(17,7,10001);", "\n/", "!40000 ALTER TABLE ", "dy_tu", " ENABLE KEYS */;", "\nUNLOCK TABLES;", "\n\n", "\n\n", "-- Table structure for table ", "dy_user", "\n", "\n\n", "DROP TABLE IF EXISTS ", "dy_user", ";", "\nCREATE TABLE ", "dy_user", " (", "UID", " int(11) NOT NULL auto_increment,", "UName", " varchar(20) NOT NULL,", "UPwd", " varchar(20) NOT NULL,", "UGender", " char(2) default '男',", "UEmail", " varchar(40) default NULL,", "URole", " int(11) default '0',", "UHead", " varchar(50) default 'UserHead/no_head.jpg',", "URegDate", " date default NULL,", "ULastLogin", " datetime default NULL,", "ULastEmit", " datetime default NULL,", "UPermit", " int(11) default '1',", "\n  PRIMARY KEY  (", "UID", "),", "\n  UNIQUE KEY ", "UName", " (", "UName", ")", "\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;", "\n\n", "\n\n", "-- Dumping data for table ", "dy_user", "\n", "\n\n", "LOCK TABLES ", "dy_user", " WRITE;", "\n/*!40000 ALTER TABLE ", "dy_user", " DISABLE KEYS ", "/;", "\nINSERT INTO ", "dy_user", " VALUES (1,'xyz','123456','男','", "fgdsa@163.com", "',0,'UserHead/1.jpg','2008-12-08','2009-03-16 22:16:20','2009-03-16 21:00:10',1),(2,'zrk','123456','男','", "sfdsaga@163.com", "',1,'UserHead/2.JPG','2008-12-08','2009-03-16 23:12:04','2008-12-12 13:27:24',1),(3,'胡再芬','123456','女','", "wereq@163.com", "',0,'UserHead/3.jpg','2008-12-08','2008-12-12 09:26:47',NULL,1),(4,'wyf','123456','男','", "gr4eg@163.com", "',3,'UserHead/1.jpg','2008-12-08','2009-03-17 15:11:32','2008-12-12 14:01:29',1),(5,'fdsa','123123','男','", "rfews@3421.com", "',0,'UserHead/no_head.jpg','2009-03-16','2009-03-16 17:41:24','2009-03-16 17:41:24',1),(7,'wfa','123123','男','", "fdsa@123.com", "',0,'UserHead/no_head.jpg','2009-03-16','2009-03-16 17:44:32','2009-03-16 17:44:32',1),(8,'few','123123','男','", "fdsa@123.com", "',0,'UserHead/no_head.jpg','2009-03-16','2009-03-16 17:45:11','2009-03-16 17:45:11',1);", "\n/", "!40000 ALTER TABLE ", "dy_user", " ENABLE KEYS ", "/;", "\nUNLOCK TABLES;", "\n/", "!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;", "\n\n", "/*!40101 SET SQL_MODE=@OLD_SQL_MODE ", "/;", "\n/", "!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS ", "/;", "\n/", "!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS ", "/;", "\n/", "!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT ", "/;", "\n/", "!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS ", "/;", "\n/", "!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION ", "/;", "\n/", "!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;", "\n\n", "-- Dump completed on 2009-03-17  7:23:17", "\n\n", "红色部分不知道什么意思，如果能解释下这几个表的关系，就更好了"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;getch.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-type\"&gt;time_t&lt;/span&gt; tstart;\n&lt;span class=\"hljs-comment\"&gt;//设置迷宫结构&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Maze&lt;/span&gt;\n{\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n    &lt;span class=\"hljs-comment\"&gt;//地图&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; map[&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;];\n    &lt;span class=\"hljs-comment\"&gt;//空位置数量&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; space; \n    &lt;span class=\"hljs-comment\"&gt;//入口位置&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; in_x,in_y;\n    &lt;span class=\"hljs-comment\"&gt;//出口位置&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; out_x,out_y;\n    &lt;span class=\"hljs-comment\"&gt;//坐标&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; x,y;\n    &lt;span class=\"hljs-comment\"&gt;//老鼠位置&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; m_x,m_y;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; success;\n    &lt;span class=\"hljs-comment\"&gt;//......&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//构造地图&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;create_map&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=\"hljs-built_in\"&gt;srand&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;(&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;));\n        &lt;span class=\"hljs-comment\"&gt;//在地图中全部填#&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;;j&amp;#43;&amp;#43;)\n            {\n                map[i][j]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-comment\"&gt;//设置出口、入口&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;space;)\n        {\n            x&amp;#61;&lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;()%&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            y&amp;#61;&lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;()%&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(map[x][y]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;)\n            {\n                map[x][y]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n                i&amp;#43;&amp;#43;;\n            }\n            \n            \n        }\n \n        map[in_x][in_y]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#64;&amp;#39;&lt;/span&gt;;\n        \n    \n        \n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(map[out_x][out_y]!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n        {\n            map[out_x][out_y]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n        }\n        \n    }\n    &lt;span class=\"hljs-comment\"&gt;//检查地图是否可以走出&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;check_map&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j)&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=\"hljs-comment\"&gt;//参考经典算法大全&lt;/span&gt;\n        map[i][j]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#64;&amp;#39;&lt;/span&gt;;        \n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;#61;&amp;#61; out_x &amp;amp;&amp;amp; j &amp;#61;&amp;#61;out_y )\n        {\n            success &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(success !&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; map[i][j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;check_map&lt;/span&gt;(i, j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(success !&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; map[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;check_map&lt;/span&gt;(i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, j);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(success !&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; map[i][j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;check_map&lt;/span&gt;(i, j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(success !&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; map[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][j] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;check_map&lt;/span&gt;(i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;, j);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(success !&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            map[i][j] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; success;\n    }\n    \n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n    &lt;span class=\"hljs-comment\"&gt;//构建迷宫&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;Maze&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; inx,&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; iny,&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; outx,&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; outy,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; _space)\n    {\n        &lt;span class=\"hljs-comment\"&gt;//使用构造函数的参数对成员初始化&lt;/span&gt;\n        in_x&amp;#61;m_x&amp;#61;inx;\n        in_y&amp;#61;m_y&amp;#61;iny;\n        out_x&amp;#61;outx;\n        out_y&amp;#61;outy;\n        space&amp;#61;_space;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-comment\"&gt;//构造地图&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;create_map&lt;/span&gt;();\n            &lt;span class=\"hljs-comment\"&gt;//检查地图是否可以走出&lt;/span&gt;\n            success&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;check_map&lt;/span&gt;(in_x,in_y)&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            {    \n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;; &amp;#43;&amp;#43;i)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;;j&amp;#43;&amp;#43;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(map[i][j]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#64;&amp;#39;&lt;/span&gt;)\n                {\n                    map[i][j]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n                }\n            }\n        }\n        map[in_x][in_y]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#64;&amp;#39;&lt;/span&gt;;\n        tstart&amp;#61;&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;(&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-comment\"&gt;//显示迷宫&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;show&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;clear&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-comment\"&gt;//printf(&amp;#34;\\33[2J&amp;#34;);&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;;j&amp;#43;&amp;#43;)\n            {\n                cout&amp;lt;&amp;lt;map[i][j]&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n            }\n            cout&amp;lt;&amp;lt;endl;\n        }\n    }\n    &lt;span class=\"hljs-comment\"&gt;//老鼠向上&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;up&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(map[m_x&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][m_y]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n        {\n            map[m_x&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;][m_y]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#64;&amp;#39;&lt;/span&gt;;\n            map[m_x][m_y]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n            m_x-&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; \n        {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-comment\"&gt;//老鼠向下&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;down&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(map[m_x&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][m_y]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n        {\n            map[m_x&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][m_y]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#64;&amp;#39;&lt;/span&gt;;\n            map[m_x][m_y]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n            m_x&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; \n        {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-comment\"&gt;//向右&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;right&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(map[m_x][m_y&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;m_y&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;)\n        {\n            map[m_x][m_y&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#64;&amp;#39;&lt;/span&gt;;\n            map[m_x][m_y]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n            m_y&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; \n        {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-comment\"&gt;//向左&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;left&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(map[m_x][m_y&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;m_y&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            map[m_x][m_y&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#64;&amp;#39;&lt;/span&gt;;\n            map[m_x][m_y]&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;;\n            m_y-&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; \n        {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-comment\"&gt;//检查是否到达出口&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;check&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(m_x&amp;#61;&amp;#61;out_x&amp;amp;&amp;amp;m_y&amp;#61;&amp;#61;out_y)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n    }\n};\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;//创建迷宫对象&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;Maze &lt;span class=\"hljs-title\"&gt;maze&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;140&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n \n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-comment\"&gt;//检查是否走通&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(maze.&lt;span class=\"hljs-built_in\"&gt;check&lt;/span&gt;())\n        {\n            maze.&lt;span class=\"hljs-built_in\"&gt;show&lt;/span&gt;();\n            &lt;span class=\"hljs-type\"&gt;time_t&lt;/span&gt; tend&amp;#61;&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;(&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;);\n            cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;逃出迷宫&amp;#xff01;用时&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;tend-tstart&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;秒&amp;#xff01;&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-comment\"&gt;//显示地图&lt;/span&gt;\n        maze.&lt;span class=\"hljs-built_in\"&gt;show&lt;/span&gt;();\n        \n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;getch&lt;/span&gt;())\n        {\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;183&lt;/span&gt;:maze.&lt;span class=\"hljs-built_in\"&gt;up&lt;/span&gt;();&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;184&lt;/span&gt;:maze.&lt;span class=\"hljs-built_in\"&gt;down&lt;/span&gt;();&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;185&lt;/span&gt;:maze.&lt;span class=\"hljs-built_in\"&gt;right&lt;/span&gt;();&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;186&lt;/span&gt;:maze.&lt;span class=\"hljs-built_in\"&gt;left&lt;/span&gt;();&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;有帮助的话采纳一下哦&amp;#xff01;谢谢&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["C++老鼠走迷宫游戏编程", ["设计一个老鼠走迷宫的模拟程序,其中包括老鼠类,地图类,物品类,其中物品类分为增益物品和减益物品,增益物品可以增加血量,减益物品减少血量。地图是一个一个小格子组成的,老鼠一次走一个小格子,初始血量为100,血量上限为100,地图上定义出口,开始时老鼠处于迷宫中心位置,迷宫格子中有随机生成的碍物,障碍物不允许通行。迷宫只有一个出口,每个格子子上有增益物品或者减益物品,当老鼠血量大于等于0且到达用口格子到,游戏胜利:否则游戏失败,假设老鼠移动一格血量自然减1,请编程实现该模拟过程"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n%% 案例5\nA&amp;#61;[201  &lt;span class=\"hljs-number\"&gt; 203 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 45 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 87 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 56 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 76 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 29 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 230 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 21 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 65 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 485 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 35 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 21 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 344 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 45 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 5 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 45 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt; 445 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 98 &lt;/span&gt;  65;\n     &lt;span class=\"hljs-number\"&gt; 65 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 66 &lt;/span&gt;    &lt;span class=\"hljs-number\"&gt; 9 &lt;/span&gt;   &lt;span class=\"hljs-number\"&gt; 2 &lt;/span&gt;   &lt;span class=\"hljs-number\"&gt; 5 &lt;/span&gt;   &lt;span class=\"hljs-number\"&gt; 88 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 87 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 56 &lt;/span&gt;   &lt;span class=\"hljs-number\"&gt; 23 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 77 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 58 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 52 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 63 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 45 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 36 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 51 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 98 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 63 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 66 &lt;/span&gt;   8;\n    &lt;span class=\"hljs-number\"&gt; 48 &lt;/span&gt;   &lt;span class=\"hljs-number\"&gt; 47 &lt;/span&gt;   &lt;span class=\"hljs-number\"&gt; 23 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 12 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 54 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 17 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 24 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 355 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt; 45 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 67 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 56 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 87 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 9 &lt;/span&gt;   &lt;span class=\"hljs-number\"&gt; 12 &lt;/span&gt;    &lt;span class=\"hljs-number\"&gt; 1 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 34 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 23 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 7 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 75 &lt;/span&gt;   52;\n     0.1    0.1   0.1   0.1   0.1   0.1  0.1  0.1   0.1   0.1   0.2   0.2  0.2  0.2   0.2   0.2  0.2  0.2  0.2  0.2;\n    &lt;span class=\"hljs-number\"&gt; 11 &lt;/span&gt;   &lt;span class=\"hljs-number\"&gt; 12 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 13 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 14 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 15 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 16 &lt;/span&gt;   &lt;span class=\"hljs-number\"&gt; 17 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 18 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 19 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 20 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 11 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 12 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 13 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 14 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 15 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 16 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 17 &lt;/span&gt; &lt;span class=\"hljs-number\"&gt; 18 &lt;/span&gt;  &lt;span class=\"hljs-number\"&gt; 19 &lt;/span&gt;   20];\n %% 获取指定取值的索引\nindex&amp;#61;find(A(4,:)&amp;#61;&amp;#61;0.2);\n\n%% 对应取出索引指定的条件1和条件2的值\nfor j&amp;#61;1:2\n    for i&amp;#61;1:size(index,2)\n        conditions_value(j,i)&amp;#61;A(j,index(i));\n    end   \nend\n\n%% 作图\nplot(conditions_value(2,:),conditions_value(1,:),&amp;#39;ro&amp;#39;);\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["matlab 提取矩阵的某个范围画图", ["截取一段五行二十列的矩阵。矩阵第一行为变量1的值，第二行为变量2的值，第三行为变量3的值，第四行为条件1，第五行为条件2。", "目的：选取条件1 为0.2的情况，对应画变量1和条件2的关系图（横坐标：条件2，纵坐标：变量1）", "因为原矩阵过于庞大，所以具体怎么设计程序呢，请大家指教", "\n", "A", "=[", "201", "   ", "203", "   ", "45", "   ", "87", "    ", "56", "   ", "76", "   ", "29", "    ", "230", "   ", "21", "   ", "65", "   ", "485", "   ", "35", "   ", "21", "   ", "344", "   ", "45", "   ", "5", "    ", "45", "  ", "445", "   ", "98", "   ", "65", ";\n      ", "65", "    ", "66", "      ", "9", "     ", "2", "     ", "5", "     ", "88", "    ", "87", "   ", "56", "     ", "23", "   ", "77", "    ", "58", "    ", "52", "   ", "63", "    ", "45", "    ", "36", "   ", "51", "   ", "98", "   ", "63", "   ", "66", "    ", "8", ";\n     ", "48", "     ", "47", "     ", "23", "   ", "12", "    ", "54", "   ", "17", "    ", "24", "   ", "355", "  ", "45", "    ", "67", "    ", "56", "    ", "87", "   ", "9", "     ", "12", "      ", "1", "    ", "34", "   ", "23", "    ", "7", "   ", "75", "    ", "52", ";\n     ", "0", ".", "1", "    ", "0", ".", "1", "   ", "0", ".", "1", "   ", "0", ".", "1", "   ", "0", ".", "1", "   ", "0", ".", "1", "  ", "0", ".", "1", "  ", "0", ".", "1", "   ", "0", ".", "1", "   ", "0", ".", "1", "   ", "0", ".", "2", "   ", "0", ".", "2", "  ", "0", ".", "2", "  ", "0", ".", "2", "   ", "0", ".", "2", "   ", "0", ".", "2", "  ", "0", ".", "2", "  ", "0", ".", "2", "  ", "0", ".", "2", "  ", "0", ".", "2", ";\n     ", "11", "     ", "12", "    ", "13", "    ", "14", "    ", "15", "   ", "16", "     ", "17", "   ", "18", "    ", "19", "    ", "20", "   ", "11", "    ", "12", "   ", "13", "    ", "14", "   ", "15", "    ", "16", "   ", "17", "   ", "18", "    ", "19", "    ", "20", "]\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;\ntypedef struct link\n{\n    int data;\n    int password;\n    struct link *next;\n} link;\nint main()\n{\n    link *&lt;span class=\"hljs-attribute\"&gt;head&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;,*p&amp;#61;NULL;\n    link &lt;span class=\"hljs-number\"&gt;*a&lt;/span&gt;&amp;#61;(link*)malloc(sizeof(link));\n    int m,n,i;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;m,&amp;amp;n);\n    a-&amp;gt;&lt;span class=\"hljs-attribute\"&gt;data&lt;/span&gt;&amp;#61;1;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a-&amp;gt;password);\n    a-&amp;gt;&lt;span class=\"hljs-attribute\"&gt;next&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-attribute\"&gt;p&lt;/span&gt;&amp;#61;a;\n    &lt;span class=\"hljs-attribute\"&gt;head&lt;/span&gt;&amp;#61;a;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;2; i&amp;lt;&amp;#61;m; i&amp;#43;&amp;#43;)\n    {\n        a&amp;#61;(link*)malloc(sizeof(link));\n        a-&amp;gt;&lt;span class=\"hljs-attribute\"&gt;data&lt;/span&gt;&amp;#61;i;\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a-&amp;gt;password);\n        a-&amp;gt;&lt;span class=\"hljs-attribute\"&gt;next&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n        p-&amp;gt;&lt;span class=\"hljs-attribute\"&gt;next&lt;/span&gt;&amp;#61;a;\n        &lt;span class=\"hljs-attribute\"&gt;p&lt;/span&gt;&amp;#61;p-&amp;gt;next;\n    }\n    a-&amp;gt;&lt;span class=\"hljs-attribute\"&gt;next&lt;/span&gt;&amp;#61;head;\n    &lt;span class=\"hljs-attribute\"&gt;p&lt;/span&gt;&amp;#61;head;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(p-&amp;gt;next!&amp;#61;p)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;1; i&amp;lt;n; i&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;p;\n            &lt;span class=\"hljs-attribute\"&gt;p&lt;/span&gt;&amp;#61;p-&amp;gt;next;\n        }\n        link *&lt;span class=\"hljs-attribute\"&gt;lj&lt;/span&gt;&amp;#61;p;\n        a-&amp;gt;&lt;span class=\"hljs-attribute\"&gt;next&lt;/span&gt;&amp;#61;p-&amp;gt;next;\n        &lt;span class=\"hljs-attribute\"&gt;p&lt;/span&gt;&amp;#61;p-&amp;gt;next;\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,lj-&amp;gt;data);\n        &lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;lj-&amp;gt;password;\n        free(lj);\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,p-&amp;gt;data);\n}\n\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/921288368256186.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["这该怎么处理呢？！。、", ["设计一个程序求出约瑟夫环的出列顺序。约瑟夫问题的一种描述是：编号为1，2，…，n的n个人按顺时针方向围坐一圈，每个人持有一个密码（正整数）。一开始任选一个正整数作为报数上限值m，从第一个人开始按顺时针方向自1开始顺序报数，报到m时停止报数。报m的人出列，将他的密码作为新的m值，从他在顺时针方向上的下一个人开始重新从1报数，如此下去，直到所有人全部出列为止。例如，n=7,7个人的密码依次为：3,1,7,2,4,8,4,m的初值取6，则正确的出列顺序应为6,1,4,7,2,3,5。要求使用单向循环链表模拟此出列过程。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;list.array1 是在异步请求中设置的&amp;#xff0c;当 text computed 属性被设置为 list.array1 时&amp;#xff0c;由于在 onMounted 钩子中的异步请求&amp;#xff0c;list.array1 目前是一个空数组。&lt;br /&gt;尝试修改&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"language-xml\"&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;/span&gt;&lt;span class=\"hljs-template-variable\"&gt;{&lt;!-- --&gt;{ &lt;span class=\"hljs-name\"&gt;text&lt;/span&gt; }}&lt;/span&gt;&lt;span class=\"language-xml\"&gt;\n  &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;\n \n&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;script&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;setup&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; { onMounted, reactive, computed } &lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; list &amp;#61; &lt;span class=\"hljs-title function_\"&gt;reactive&lt;/span&gt;({ &lt;span class=\"hljs-attr\"&gt;array1&lt;/span&gt;: [], &lt;span class=\"hljs-attr\"&gt;array2&lt;/span&gt;: [], &lt;span class=\"hljs-attr\"&gt;array3&lt;/span&gt;: [], &lt;span class=\"hljs-attr\"&gt;arrayChild&lt;/span&gt;: [] })\n\n&lt;span class=\"hljs-title function_\"&gt;onMounted&lt;/span&gt;(&lt;span class=\"hljs-function\"&gt;() &amp;#61;&amp;gt;&lt;/span&gt; {\n  &lt;span class=\"hljs-title function_\"&gt;fetch&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;/4-3/gouwu.json&amp;#39;&lt;/span&gt;)\n    .&lt;span class=\"hljs-title function_\"&gt;then&lt;/span&gt;(&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt; &amp;#61;&amp;gt;&lt;/span&gt; x.&lt;span class=\"hljs-title function_\"&gt;json&lt;/span&gt;())\n    .&lt;span class=\"hljs-title function_\"&gt;then&lt;/span&gt;(&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-params\"&gt;x&lt;/span&gt; &amp;#61;&amp;gt;&lt;/span&gt; {\n      list.&lt;span class=\"hljs-property\"&gt;array1&lt;/span&gt; &amp;#61; x.&lt;span class=\"hljs-property\"&gt;shu&lt;/span&gt;\n      list.&lt;span class=\"hljs-property\"&gt;array2&lt;/span&gt; &amp;#61; x.&lt;span class=\"hljs-property\"&gt;shiwu&lt;/span&gt;\n      list.&lt;span class=\"hljs-property\"&gt;array3&lt;/span&gt; &amp;#61; x.&lt;span class=\"hljs-property\"&gt;qita&lt;/span&gt;\n    })\n})\n\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; text &amp;#61; &lt;span class=\"hljs-title function_\"&gt;computed&lt;/span&gt;(&lt;span class=\"hljs-function\"&gt;() &amp;#61;&amp;gt;&lt;/span&gt; {\n  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; list.&lt;span class=\"hljs-property\"&gt;array1&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;length&lt;/span&gt; &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ? list.&lt;span class=\"hljs-property\"&gt;array1&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] : &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n})\n\n&lt;/span&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n \n&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;style&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;scoped&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt; &lt;br /&gt;如果答案对您有所帮助&amp;#xff0c;望采纳。&lt;/p&gt;", "Konwledge_Point": "算法与程序设计", "Question": ["如何在外面拿到onmounted中定义的值", ["代码", "\n", "<", "template", ">", "\n  ", "<", "div", ">", "\n    ", "<!--    <h1>购物车管理页面</h1>-->", "\n    ", "<!--    <table v-for=\"(item,index) in list.array\">-->", "\n    ", "<!--      <tr>-->", "\n    ", "<!--        <td><input v-model=\"\" type=\"text\"></td>-->", "\n    ", "<!--      </tr>-->", "\n    ", "<!--    </table>-->", "\n    ", "{{ ", "text", " }}", "\n  ", "</", "div", ">", "\n", "</", "template", ">", "\n\n", "<", "script", " ", "setup", ">", "\n", "import", " { onMounted, reactive, ref } ", "from", " ", "'vue'", "\n\n", "const", " list = ", "reactive", "({ ", "array1", ": [], ", "array2", ": [], ", "array3", ": [], ", "arrayChild", ": [] })\n", "const", " text = ", "ref", "()\n\n", "onMounted", "(", "() =>", " {\n  ", "fetch", "(", "'/4-3/gouwu.json'", ").", "then", "(", "x", " =>", " x.", "json", "()).", "then", "(", "x", " =>", " {\n    list.", "array1", " = x.", "shu", "\n    list.", "array2", " = x.", "shiwu", "\n    list.", "array3", " = x.", "qita", "\n    ", "console", ".", "log", "(list.", "array1", ")\n  })\n})\n", "console", ".", "log", "(list.", "array1", ".", "length", ")\ntext.", "value", " = list.", "array1", "\n", "</", "script", ">", "\n\n", "<", "style", " ", "scoped", ">", "\n\n", "</", "style", ">", "\n\n\n\n", "\n", "\n"]], "Tag": "程序设计"}
