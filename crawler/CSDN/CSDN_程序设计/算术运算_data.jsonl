{"Answer": "&lt;p&gt;检查 d 是不是变成 0 了&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["C#中算术运算导致溢出", ["\n", "private", " void picture", "Box1_Paint(", "object", " ", "sender", ", PaintEventArgs ", "e", ")", "\n        {\n            ", "// 获取用户输入的圆形中心点坐标，半径，等分长度", "\n            double rx = Convert.", "ToDouble(", "textBox1", ".Text)", ";\n            double ry = Convert.", "ToDouble(", "textBox2", ".Text)", ";\n            double r = Convert.", "ToDouble(", "textBox3", ".Text)", ";\n            double d = Convert.", "ToDouble(", "textBox4", ".Text)", ";\n\n            ", "// 创建绘图对象", "\n            Graphics g = e.Graphics;\n            g.", "Clear(Color.White)", ";\n\n            ", "// 获取坐标轴原点的坐标", "\n            double originX = this.ClientSize.Width", " / ", "2", ";\n            double originY = this.ClientSize.Height", " / ", "2", ";\n\n            ", "// 绘制坐标轴", "\n\n            Pen axisPen = ", "new", " ", "Pen(Color.Black, 2)", ";\n            g.", "DrawLine(", "axisPen", ", (", "float", ")", "originX, ", "0", ", (", "float", ")originX, this.ClientSize.Height);\n            g.", "DrawLine(", "axisPen", ", 0, (", "float", ")", "originY, this.ClientSize.Width, (", "float", ")originY);\n\n            ", "// 计算圆形的点坐标", "\n            double angle = Math.PI", " * ", "2", " * ", "d", " / ", "r; ", "// 每个角度的大小", "\n            PointF", "[]", " pointF = ", "new", " PointF", "[(", "int", ")(", "r", " ", "/", " ", "d", ")]", "; ", "// 点数组", "\n\n            ", "for", " (", "int", " i = ", "0", "; i < r", " / ", "d; i++)\n            {\n                double x = r", " * ", "Math.", "Cos(", "angle", " ", "*", " ", "i", ")", " + rx + originX; ", "// 计算x坐标", "\n                double y = r", " * ", "Math.", "Sin(", "angle", " ", "*", " ", "i", ")", " + rx + originY; ", "// 计算y坐标", "\n                pointF", "[", "i", "]", " = ", "new", " ", "PointF((", "float", ")", "x, (", "float", ")y); ", "// 将坐标保存到数组中", "\n            }\n            ", "// 绘制圆形", "\n            Pen Pen = ", "new", " ", "Pen(Color.Red, 2)", ";\n            g.", "DrawPolygon(Pen, ", "pointF", ")", ";\n\n            ", "//保存数据到text文本文件中", "\n            using (StreamWriter writer = ", "new", " ", "StreamWriter(", "\"coordinates.txt\"", ")", ")\n            {\n                ", "for", " (", "int", " i = ", "0", "; i < r", " / ", "d; i++)\n                {\n                    writer.", "WriteLine($", "\"({r * Math.Cos(angle * i) + rx}, {r * Math.Sin(angle * i) + rx}，{0})\"", ")", ";\n                }\n\n            }\n        }\n", "\n", "各位牛人帮忙看一下为什么这句 PointF[] pointF = new PointF[(int)(r / d)]; // 点数组，会显示算术运算导致溢出？该怎么改正较好？我是初学者，求各位牛人指点"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;仅供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;malloc.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; STACK_INIT_SIZE 10&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; STACK_GROW_SIZE 5&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; ELEMTYPE char&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; OK 1&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; ERROR 0&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; { &lt;span class=\"hljs-comment\"&gt;/*建立一个栈的首结点*/&lt;/span&gt;\n    ELEMTYPE * base;\n    ELEMTYPE * top;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; stacksize;\n} SpStack;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;InitStack&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SpStack *s)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=\"hljs-comment\"&gt;/*建立空的栈并返回首地址*/&lt;/span&gt;\n    s-&amp;gt;base&amp;#61;((ELEMTYPE*)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(STACK_INIT_SIZE*&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(ELEMTYPE)));\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!s-&amp;gt;base) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ERROR;\n    s-&amp;gt;top&amp;#61;s-&amp;gt;base;\n    s-&amp;gt;stacksize&amp;#61;STACK_INIT_SIZE;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; OK;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;StackEmpty&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SpStack *s)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=\"hljs-comment\"&gt;/*判断栈是否为空*/&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (s-&amp;gt;top&amp;#61;&amp;#61;s-&amp;gt;base) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; OK;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;                 &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ERROR;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Push&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SpStack *s,ELEMTYPE e)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=\"hljs-comment\"&gt;/*往栈顶插入元素即进栈*/&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (s-&amp;gt;top-s-&amp;gt;base&amp;gt;&amp;#61;s-&amp;gt;stacksize) { &lt;span class=\"hljs-comment\"&gt;/*判断是否栈满*/&lt;/span&gt;\n        s-&amp;gt;base&amp;#61;((ELEMTYPE*)&lt;span class=\"hljs-built_in\"&gt;realloc&lt;/span&gt;(s-&amp;gt;base,(s-&amp;gt;stacksize&amp;#43;STACK_GROW_SIZE)*&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(ELEMTYPE)));\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!s-&amp;gt;base) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ERROR;\n        s-&amp;gt;stacksize&amp;#43;&amp;#61;STACK_GROW_SIZE;\n        s-&amp;gt;top&amp;#61;s-&amp;gt;base&amp;#43;s-&amp;gt;stacksize;\n    }\n    *s-&amp;gt;top&amp;#43;&amp;#43;&amp;#61;e;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; OK;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Pop&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SpStack *s,ELEMTYPE *e)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=\"hljs-comment\"&gt;/*让栈顶元素依次输出即出栈*/&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;StackEmpty&lt;/span&gt;(s)) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ERROR;\n    *e&amp;#61;*(--s-&amp;gt;top);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; OK;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Comp&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(ELEMTYPE a,ELEMTYPE b)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((a&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;b!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;)\n      ||(a&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;[&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;b!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;]&amp;#39;&lt;/span&gt;)\n      ||(a&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;{&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;b!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;}&amp;#39;&lt;/span&gt;)) {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ERROR;\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; OK;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Count&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SpStack *s)&lt;/span&gt; &lt;/span&gt;{\n    ELEMTYPE e[STACK_INIT_SIZE*&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;];\n    ELEMTYPE e1;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n\n    &lt;span class=\"hljs-built_in\"&gt;InitStack&lt;/span&gt;(s);\n    &lt;span class=\"hljs-built_in\"&gt;fgets&lt;/span&gt;(e,STACK_INIT_SIZE*&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,stdin);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;&amp;#61;&amp;#61;e[&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(e)&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]) e[&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(e)&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;,e);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;e[i]!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (e[i]) {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;[&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;{&amp;#39;&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;Push&lt;/span&gt;(s,e[i]);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;]&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;}&amp;#39;&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;StackEmpty&lt;/span&gt;(s)) {\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%*s↖右括号多余\\n&amp;#34;&lt;/span&gt;,i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;(ERROR);\n            } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;Pop&lt;/span&gt;(s,&amp;amp;e1);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-built_in\"&gt;Comp&lt;/span&gt;(e1,e[i])) {\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%*s↖左右匹配出错\\n&amp;#34;&lt;/span&gt;,i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;(ERROR);\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-built_in\"&gt;StackEmpty&lt;/span&gt;(s)) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%*s↖左括号多余\\n&amp;#34;&lt;/span&gt;,i,&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;(ERROR);\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;匹配正确\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;(OK);\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    SpStack s;\n    &lt;span class=\"hljs-built_in\"&gt;Count&lt;/span&gt;(&amp;amp;s);\n    &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(s.base);\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["在四则算术运算表达式中，可以包含圆括号和方括号，而且还允许它们嵌套出现。试编写一个算法实现括号匹配。我的问题是 输入数据到数组后，不能进行匹配，不知道错在哪 求指导！", ["\n", "#", "include", "<stdlib.h>", "\n", "#", "include", "<string.h>", "\n", "#", "include", "<stdio.h>", "\n\n", "int", " ", "match", "(", "char", "  *str)", "\n", "{\n    ", "char", " stackMemroy[", "1024", "];\n    ", "int", " top = ", "-1", ";\n    ", "int", " i = ", "0", ";\n    ", "while", " (str[i] != ", "'\\0'", ")\n    {\n        ", "if", " (str[i] == ", "')'", ")", "//出", "\n        {\n            ", "if", " (top > ", "-1", ")\n            {\n                top--;\n            }\n            ", "else", "\n            {\n                ", "return", " ", "-1", ";\n            }\n        }\n        ", "else", " ", "if", " (str[i] == ", "'('", ")", "//入", "\n        {\n            stackMemroy[++top] = str[i];\n        }\n        i++;\n    }\n    ", "if", " (top == ", "-1", ")\n        ", "return", " ", "0", ";\n    ", "else", "\n        ", "return", " ", "1", ";\n}\n\n\n\n\n\n", "int", " ", "main", "()", "\n", "{\n    ", "while", "(", "1", ")\n    {\n        ", "char", " str[", "1024", "] = ", "\"\"", ";\n        ", "gets_s", "(str, ", "1024", ");\n        ", "/*scanf_s(\"%d\", str);*/", "\n        ", "int", " result = ", "match", "(str);\n        ", "if", " (result == ", "0", ")\n        {\n            ", "printf", "(", "\"匹配\\n\"", ");\n        }\n        ", "else", " ", "if", " (result == ", "1", ")\n        {\n            ", "printf", "(", "\"多了左边括号\\n\"", ");\n\n        }\n        ", "else", "\n        {\n            ", "printf", "(", "\"多了右边括号\\n\"", ");\n        }\n    }\n    ", "return", " ", "0", ";\n}\n", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; eval(&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;第一个整数&amp;#xff1a;&amp;#34;&lt;/span&gt;))\n&lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt; &amp;#61; eval(&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;第二个整数&amp;#xff1a;&amp;#34;&lt;/span&gt;))\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a&amp;#43;b&amp;#61;&amp;#34;&lt;/span&gt;,a&amp;#43;b)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a-b&amp;#61;&amp;#34;&lt;/span&gt;,a-b)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a*b&amp;#61;&amp;#34;&lt;/span&gt;,a*b)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; b!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n    print(&lt;span class=\"hljs-string\"&gt;&amp;#34;a/b&amp;#61;{:.2f}&amp;#34;&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.format&lt;/span&gt;(a/b))\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/611842051336186.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/798962051336135.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["算术运算(要求读入两个整数A和B，然后分别输出它们的和、差、乘积、商，其中，商保留2位小数)", ["请求解答", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;By using preg_replace you can strip the 'PHP' part and the comma from value.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;echo preg_replace('|  PHP (\\d+),(\\d+)|', '$1$2', $array[5]) + preg_replace('|  PHP (\\d+),(\\d+)|', '$1$2', $array[11]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or if the number of spaces is random '\\s' is any whitespace char&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    echo preg_replace('|\\s+PHP\\s+(\\d+),(\\d+)|', '$1$2', $array[5]) + preg_replace('|\\s+PHP\\s+(\\d+),(\\d+)|', '$1$2', $array[11]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or str_replace()&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "算术运算", "Question": ["对Array的特定值执行算术运算 -  PHP [关闭]", ["\n\n", "I have an array", "\n\n", " Array\n(\n    [0] => 34\n    [1] => 04:32 PM\n    [2] => 05:32 PM\n    [3] => MNL | ITLY\n    [4] => 2h 10m\n    [5] =>   PHP 9,222\n    [6] => 33\n    [7] => 04:32 PM\n    [8] => 04:32 PM\n    [9] => ITLY | MNL\n    [10] => 2h 10m\n    [11] =>    PHP 7,227\n)\n", "\n\n", "how can i perform arithmetic operation on value of index 5 and 11.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;calculate&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; op, &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (op)\n    {\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a &amp;#43; b;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a - b;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a * b;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a / b;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a, b, c, r;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; op1, op2;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf%c%lf%c%lf&amp;#34;&lt;/span&gt;, &amp;amp;a, &amp;amp;op1, &amp;amp;b, &amp;amp;op2, &amp;amp;c);\n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (op1)\n    {\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (op2)\n        {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n            r &amp;#61; &lt;span class=\"hljs-built_in\"&gt;calculate&lt;/span&gt;(a, op1, b);\n            r &amp;#61; &lt;span class=\"hljs-built_in\"&gt;calculate&lt;/span&gt;(r, op2, c);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n            r &amp;#61; &lt;span class=\"hljs-built_in\"&gt;calculate&lt;/span&gt;(b, op2, c);\n            r &amp;#61; &lt;span class=\"hljs-built_in\"&gt;calculate&lt;/span&gt;(a, op1, r);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n        r &amp;#61; &lt;span class=\"hljs-built_in\"&gt;calculate&lt;/span&gt;(a, op1, b);\n        r &amp;#61; &lt;span class=\"hljs-built_in\"&gt;calculate&lt;/span&gt;(r, op2, c);\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lg%c%lg%c%lg&amp;#61;%lg&amp;#34;&lt;/span&gt;, a, op1, b, op2, c, r);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["c语言swtich制作计算器，急", ["键盘输入三个整数和两个算术运算组成的表达式，计算结果。 运算符包括：加+,减-乘*,除/", "\n", "输入格式:", "三个整数，两个运算符，组成算数表达式，输入的字符之间没有空格", "\n", "输出格式:", "在表达式的后边输出=计算结果", "\n", "输入样例:", "6+3", "11", "结尾无空行", "输出样例:", "6+3", "11=39", "结尾无空行"]], "Tag": "程序设计"}
{"Answer": "提示一下，用简单类工厂的模式去做这种计算器的实现，能够体现面向对象的思想。", "Konwledge_Point": "算术运算", "Question": ["求c++大神解答，最好是面向对象程序设计c++高级语言的", ["\n", "模拟计算器程序\n问题描述\n设计一个程序来模拟一个简单的手持计算器。程序支持算术运算+、-、*、/、=、以及Ｃ（清除）、A（全清除）操作。\n基本要求\n程序运行时，显示一个窗口，等待用户输入，用户可以从键盘输入要计算的表达式，输入的表达式显示在窗口中，用户键入’=’ 符号后，窗口显示出结果。\n测试数据\n程序输入不少于5种不同的表达式进行测试。\n实现提示\n可定义一个计算器类，该类包括两个组件对象，一个计算引擎和一个用户接口，用户接口对象处理接受的键盘输入信息，并显示答案，计算引擎对象对给出的数据执行相应操作，并存储操作的结果。\n选作内容\n如果用户输入的表达式不合法，可以判别出来并给出相应的错误提示。", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;with open(&amp;#39;C:/Users/Lenovo/Desktop/jisuan.txt&amp;#39;,&amp;#39;r&amp;#39;,encoding&amp;#61;&amp;#39;utf-8&amp;#39;) as f_r:\n    expresses &amp;#61; f_r.readlines()\n    with open(&amp;#39;C:/Users/Lenovo/Desktop/jieguo.txt&amp;#39;,&amp;#39;w&amp;#39;,encoding&amp;#61;&amp;#39;utf-8&amp;#39;) as f_w:\n        for exp in expresses:\n            f_w.write(&amp;#34;%.2f&amp;#34;%eval(exp))\n            f_w.write(&amp;#39;\\n&amp;#39;)\n            print(&amp;#34;%.2f&amp;#34;%eval(exp))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"205\" src=\"https://img-ask.csdnimg.cn/upload/1623827850570.png\" width=\"304\" /&gt; &lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["Python 文件 加减法", ["【问题描述】", "\n\n", "从文件jisuan.txt读入任意多行。每一行写有一个两个操作数参加的加法运算式或减法运算式。程序分析每一行的运算式，完成运算，把运算结果写入jieguo.txt，一行一个结果。", "\n【输入形式】", "\n\n", "文件內的每一行 是一个两个操作数参加的加法运算式或减法运算式。算式中不含空格", "\n【输出形式】", "\n\n", "文件，一行一个结果。结果保留两位小数。", "\n【样例输入】", "\n\n", "输入文件内容：", "\n\n", "1+2", "\n\n", "5-2.3", "\n\n", "6+0.8", "\n\n", "【样例输出】", "\n\n", "输出文件内容：", "\n\n", "3.00", "\n\n", "2.70", "\n\n", "6.80"]], "Tag": "程序设计"}
{"Answer": "逻辑上没有意义，但是实践中可以提高运算速度。比如说若干个不同逻辑位的逻辑or运算可以用加法代替。\r\n本质上，bool类型在cpu看来还是整数类型去参与计算，所以bool类型无论算术、逻辑运算都不需要转换，都是本地计算。", "Konwledge_Point": "算术运算", "Question": ["bool类型变量的算术运算有意义吗？", ["1、 bool类型变量的算术运算有意义吗？", "\n2、 bool类型变量进行算术运算时，是否会转变成逻辑运算？", "\n\n", "求解，另外请解释一下。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;iostream&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;stdlib.h&amp;gt;\nusing namespace std;\n#define maxsize &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; flag &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; useless;\n\n&lt;span class=\"hljs-comment\"&gt;//定义顺序表结构&lt;/span&gt;\ntypedef &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt; s;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; length;\n}SeqList;&lt;span class=\"hljs-comment\"&gt;//不要定义成指针&amp;#xff0c;否则你必须开辟空间&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;//定义堆栈&lt;/span&gt;\ntypedef &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; top;\n    &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; elem&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;maxsize&lt;/span&gt;]&lt;/span&gt;;\n}Stack;\n\n&lt;span class=\"hljs-comment\"&gt;//初始化顺序表&lt;/span&gt;\nvoid init&lt;span class=\"hljs-constructor\"&gt;List(SeqList&amp;amp; L)&lt;/span&gt; {\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//初始化堆栈&lt;/span&gt;\nvoid init&lt;span class=\"hljs-constructor\"&gt;Stack(Stack&amp;amp; S)&lt;/span&gt; {\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;S&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;top &amp;#61; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//输入创建顺序表&lt;/span&gt;\nvoid create&lt;span class=\"hljs-constructor\"&gt;List(SeqList&amp;amp; L)&lt;/span&gt; {\n    cin &amp;gt;&amp;gt; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s;\n    &lt;span class=\"hljs-comment\"&gt;//L-&amp;gt;length &amp;#61; sizeof(L-&amp;gt;s)-1;sizeof函数结果包含&amp;#39;\\0&amp;#39;&lt;/span&gt;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s.length&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//入栈&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;bool&lt;/span&gt; push(Stack &amp;amp;S,&lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; ch) {\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;S&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;top&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;maxsize - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        return &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;S&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;top&amp;#43;&amp;#43;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;S&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;elem&lt;span class=\"hljs-literal\"&gt;[S.&lt;span class=\"hljs-identifier\"&gt;top&lt;/span&gt;]&lt;/span&gt; &amp;#61; ch;\n    return &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//出栈&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;bool&lt;/span&gt; pop(Stack &amp;amp;S, &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; &amp;amp;ch) {\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;S&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;top&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        return &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n    }\n    ch &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;S&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;elem&lt;span class=\"hljs-literal\"&gt;[S.&lt;span class=\"hljs-identifier\"&gt;top&lt;/span&gt;]&lt;/span&gt;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;S&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;top--;\n    return &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-built_in\"&gt;bool&lt;/span&gt; is&lt;span class=\"hljs-constructor\"&gt;Empty(Stack S)&lt;/span&gt;{\n    return &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;S&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;top&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; top&lt;span class=\"hljs-constructor\"&gt;Elem(Stack S)&lt;/span&gt; {\n    return &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;S&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;elem&lt;span class=\"hljs-literal\"&gt;[S.&lt;span class=\"hljs-identifier\"&gt;top&lt;/span&gt;]&lt;/span&gt;;\n}\n\nvoid &lt;span class=\"hljs-keyword\"&gt;match&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;Bracket(Stack&amp;amp; S, &lt;span class=\"hljs-params\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;lbracket&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;S&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;elem&lt;span class=\"hljs-literal\"&gt;[S.&lt;span class=\"hljs-identifier\"&gt;top&lt;/span&gt;]&lt;/span&gt; !&amp;#61; lbracket) {\n        pop(S, useless);\n    }\n    pop(S, useless);\n    flag--;\n}\n\n&lt;span class=\"hljs-comment\"&gt;//检测算法&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;bool&lt;/span&gt; check&lt;span class=\"hljs-constructor\"&gt;Exp(SeqList L, Stack S)&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; count &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;length;\n    &lt;span class=\"hljs-comment\"&gt;//char useless;int flag &amp;#61; 0;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (count--) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;gt;&amp;#61; &lt;span class=\"hljs-character\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;lt;&amp;#61; &lt;span class=\"hljs-character\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;) {&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//当前是数字&lt;/span&gt;\n            i&amp;#43;&amp;#43;;\n            continue;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//当前是符号&amp;#xff0c;包括运算符、左括号和右括号&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;[&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;{&amp;#39;&lt;/span&gt;) {\n                push(S, &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n                flag&amp;#43;&amp;#43;;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;#61;&amp;#61;&lt;span class=\"hljs-character\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-character\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;){\n                &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; top &amp;#61; top&lt;span class=\"hljs-constructor\"&gt;Elem(S)&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (top&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;top&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;top&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;top&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;) {&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//if(top &amp;#61;&amp;#61; &amp;#39;(&amp;#39; || ....)&lt;/span&gt;\n                    pop(S, useless);\n                }\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n                    push(S, &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n                }\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;]&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;}&amp;#39;&lt;/span&gt;){&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//当前是右括号&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (flag &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;) {\n                        &lt;span class=\"hljs-keyword\"&gt;match&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;Bracket(S, &amp;#39;(&amp;#39;)&lt;/span&gt;;\n                    }\n                    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;L&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;s&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;]&amp;#39;&lt;/span&gt;) {\n                        &lt;span class=\"hljs-keyword\"&gt;match&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;Bracket(S, &amp;#39;[&amp;#39;)&lt;/span&gt;;\n                    }\n                    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n                        &lt;span class=\"hljs-keyword\"&gt;match&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;Bracket(S, &amp;#39;{&amp;#39;)&lt;/span&gt;;\n                    }\n                }\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n                    return &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n                }\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n                cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;输入的字符有误&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n                return &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n            }\n        }\n        i&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (is&lt;span class=\"hljs-constructor\"&gt;Empty(S)&lt;/span&gt;) {\n        return &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt; top &amp;#61; top&lt;span class=\"hljs-constructor\"&gt;Elem(S)&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (top&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;top&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;top&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt; || &lt;/span&gt;top&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-character\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;) {\n            return &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//栈顶是左括号&lt;/span&gt;\n            return &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n        }\n    }\n}\n\n&lt;span class=\"hljs-comment\"&gt;//[5&amp;#43;(6-3)]-(2&amp;#43;3)]&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//flag记录栈内含有左括号的个数&amp;#xff0c;当flag为0但当前扫描到的字符为右括号&amp;#xff0c;则匹配错误&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; {\n    SeqList l;\n    Stack s;\n    init&lt;span class=\"hljs-constructor\"&gt;List(&lt;span class=\"hljs-params\"&gt;l&lt;/span&gt;)&lt;/span&gt;;\n    init&lt;span class=\"hljs-constructor\"&gt;Stack(&lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;)&lt;/span&gt;;\n    create&lt;span class=\"hljs-constructor\"&gt;List(&lt;span class=\"hljs-params\"&gt;l&lt;/span&gt;)&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (check&lt;span class=\"hljs-constructor\"&gt;Exp(&lt;span class=\"hljs-params\"&gt;l&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;s&lt;/span&gt;)&lt;/span&gt;) {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;yes&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;no&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/539494552336130.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["假设一个算术表达式中可以包含三种括号：园括号“(”和“)”、方括号“[”和“]”、花括号“{”和“}”，且这三种括号可按任意的次序嵌套使用", ["假设一个算术表达式中可以包含三种括号：园括号“(”和“)”、方括号“[”和“]”、花括号“{”和“}”，且这三种括号可按任意的次序嵌套使用（如：…[…{…}…[…]…]…[…]…(…)…)。编写判别给定表达式中所含括号是否正确配对出现的算法（已知表达式已存入数据元素为字符的顺序表中）。"]], "Tag": "程序设计"}
{"Answer": "&lt;ol&gt;&lt;li&gt;首先代码编辑错误&amp;#xff0c;纠正如下&amp;#xff1a;&lt;/li&gt;&lt;/ol&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;age&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;19&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; age &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;18&lt;/span&gt;:\n    &lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;You are old enough to vpte&amp;#34;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["python不会运算，小白问题", ["age=19", "\n", "if ang＞=18", "  print(\"You are old enough to vpte\")", "这个怎么运算"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;When You made some changes in your AR object and want your changes to be saved you should execute &lt;code&gt;-&amp;gt;save()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$subject-&amp;gt;units = $subject-&amp;gt;units - 1; \n$subject-&amp;gt;save();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Looks like You just forgot to do that.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "算术运算", "Question": ["yii 2 Active Query中的数学运算", ["\n\n", "Is there a way to subtract a value in a int column to say by 1?I have a button that when it is clicked it will call a function to save the data in the table but I want to know how to subtracting a number in a database using yii 2 I have tried the following code below but it had no effect. Can someone help me how to make math operations in yii 2? ", "\n\n", "public static function AddSubject($subjectid, $clientid){\n    $subject = ActiveCurriculum::findOne(['subjectid' => $subjectid]);\n\n    $activesubject = new ActiveSubject();\n    $activesubject->clientid = $clientid;\n    $activesubject->subjectid = $subject->subjectid;\n    $activesubject->subjectcode = $subject->subjectcode;\n    $activesubject->days = $subject->days;\n    $activesubject->time = $subject->time;\n    $activesubject->section = $subject->section;\n    $activesubject->room = $subject->room;\n    $activesubject->units = $subject->units;\n    $subject->units = $subject->units - 1; //this should subtract the number \n    //of slots by 1 but now it is not working.\n    $activesubject->save();\n\n    return true;\n\n    //return static::findOne(['subjectid' => $subjectid]);\n                //->where(['subjectid' => $subjectid]);\n\n  }\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-cpp\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a,b;\n\nchar c; \n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    c &amp;#61; getchar();\n    \n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(c !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; c !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; c !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; c !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; c !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;)\n\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; !&lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;input error!&amp;#34;&lt;/span&gt;);\n        \n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;b);\n    \n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;((c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;)&lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; b &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) \n    \n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; !&lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;input error!&amp;#34;&lt;/span&gt;);\n        \n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,a &amp;#43; b );\n    \n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,a - b );\n    \n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,a * b );\n    \n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,a / b );\n    \n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(c &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,a % b );\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["程序，输入字符是算式运作字符就输入2个数计算，如果不是就输出输入错误", []], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;除了优先级&amp;#xff0c;还有结合性。优先级相同的情况下&amp;#xff0c;看结合性&amp;#xff0c;赋值运算从右向左&amp;#xff0c;先执行a&amp;#61;-2&amp;#xff0c;再执行a*&amp;#61;a。&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["运行结果及报错内容，如何解决？(关键词-算术运算)", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "算出来a为什么等于4啊，不是先算术运算再赋值运算吗", "\n", "\n", "#", "include", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " a = ", "12", ", b = ", "7", ", c = ", "3", ";\n    ", "printf", "(", "\"%d\\n\"", ", a > b && b > c);\n    ", "printf", "(", "\" %d\\n\"", ", a > b > c);\n    a *= a = ", "-2", ";\n    ", "printf", "(", "\" %d\\n\"", ", a);\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "程序设计"}
{"Answer": "```cpp\r\n#include &lt;iostream&gt;\r\n#include &lt;string&gt;\r\n#include &lt;cmath&gt;\r\n\r\nusing namespace std;\r\n\r\nstring decimalToTwocomplementString(int num, int length) {\r\n    string binary;\r\n    int positive_num = abs(num);\r\n    while (positive_num != 0) {\r\n        if (num &gt;= 0){\r\n            binary.insert(0,to_string(positive_num &amp; 1));\r\n            positive_num &gt;&gt;= 1;\r\n        } else {\r\n            binary.insert(0,to_string(!(positive_num &amp; 1)));\r\n            positive_num &gt;&gt;=1;\r\n        }\r\n    }\r\n    if (num &lt; 0) {\r\n        for (reverse_iterator it = binary.rbegin(); it != binary.rend(); it++) {\r\n            if (*it == '1') {\r\n                *it = '0';\r\n            } else {\r\n                *it = '1';\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    while (binary.length() &lt; length) {\r\n        if (num &gt;= 0) {\r\n            binary.insert(0, \"0\");\r\n        } else {\r\n            binary.insert(0, \"1\");\r\n        }\r\n    }\r\n    return binary;\r\n}\r\n\r\nstring TwoComplementStringAddition (const string&amp; a, const string&amp; b) {\r\n    int carry = 0;\r\n    string result;\r\n    for (reverse_iterator ita = a.rbegin(), itb = b.rbegin(); ita != a.rend(); ita++, itb++) {\r\n        int num_a = *ita - '0';\r\n        int num_b = *itb - '0';\r\n        result.insert(0,to_string(num_a ^ num_b ^ carry));\r\n        if (num_a == 1 &amp;&amp; num_b == 1) {\r\n            carry = 1;\r\n        } else if (num_a == 0 &amp;&amp; num_b == 0) {\r\n            carry = 0;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nint TwoComplementStringToDecimal(string binary) {\r\n    int result = 0;\r\n    string::iterator it = binary.begin();\r\n    bool negative = *it == '1';\r\n    if (negative) {\r\n        for (; it != binary.end(); it++) {\r\n            *it = *it == '1' ? '0' : '1';\r\n        }\r\n        for (reverse_iterator iterator = binary.rbegin(); iterator != binary.rend(); iterator++) {\r\n            if (*iterator == '1') {\r\n                *iterator = '0';\r\n            } else {\r\n                *iterator = '1';\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    for (it = binary.begin(); it != binary.end(); it++) {\r\n        result += (*it - '0') * pow(2,distance(it,binary.end()) - 1);\r\n    }\r\n    return negative ? -result : result;\r\n}\r\n\r\nint main()\r\n{\r\n//Read in the bit pattern size\r\n    int L;\r\n    do {\r\n        cout &lt;&lt; \"Enter positive integer for the bit pattern size \";\r\n        cin &gt;&gt; L;\r\n    }while (L &lt;= 0);\r\n\r\n    //Read in two integers a and b\r\n    int a, b;\r\n    cout &lt;&lt; \"Enter an integer a \";\r\n    cin &gt;&gt; a;\r\n    cout &lt;&lt; \"Enter an integer b \";\r\n    cin &gt;&gt; b;\r\n\r\n    //Calculate the decimal arithmetic sum of a and b and print the result int\r\n    int c1 = a + b;\r\n    cout &lt;&lt; \"In decimal \" &lt;&lt; a &lt;&lt; \" + \" &lt;&lt; b &lt;&lt; \" is \" &lt;&lt; c1 &lt;&lt; endl;\r\n\r\n    //Compute the two's complement representations of a and b\r\n    //Each integer must be represented in L-bits pattern\r\n    //Also these two's complement representations must be returned as string data types\r\n    string A = decimalToTwocomplementString(a, L);\r\n    string B = decimalToTwocomplementString(b, L);\r\n\r\n    //Print the two's complement representations of a and b\r\n    cout &lt;&lt; \"The two's complement of \" &lt;&lt; a &lt;&lt; \" is\\t \" &lt;&lt; A &lt;&lt; endl;\r\n    cout &lt;&lt; \"The two's complement of \" &lt;&lt; b &lt;&lt; \" is\\t \" &lt;&lt; B &lt;&lt; endl;\r\n\r\n    //Compute the binary sum of the two's complement representations of a and b\r\n    //The result must be returned as L-bit pattern string data type\r\n    string C = TwoComplementStringAddition(A, B);\r\n\r\n    //Print the two's complement representation binary sum\r\n    cout &lt;&lt; \"The binary sum of \" &lt;&lt; A &lt;&lt; \" and \" &lt;&lt; B &lt;&lt; \" is \" &lt;&lt; C &lt;&lt; endl;\r\n\r\n    //Convert the two's complement representation binary sum to decimal and print\r\n    int c2 = TwoComplementStringToDecimal(C);\r\n    cout &lt;&lt; \"In two's complement arithmetic, \" &lt;&lt; a &lt;&lt; \" + \" &lt;&lt; b &lt;&lt; \" is \" &lt;&lt; c2 &lt;&lt; endl;\r\n\r\n    //Print some concluding results\r\n    if (c1 == c2) cout &lt;&lt; c1 &lt;&lt; \" is equal to \" &lt;&lt; c2 &lt;&lt; \". Good Job!\" &lt;&lt; endl;\r\n    else\r\n\r\n    {\r\n        cout &lt;&lt; c1 &lt;&lt; \" is not equal to \" &lt;&lt; c2 &lt;&lt; endl;\r\n        cout &lt;&lt; \"Either \" &lt;&lt; c1 &lt;&lt; \" cannot be represented by the given bit pattern OR we have made some mistake!\" &lt;&lt; endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\n```   \r\n\r\n这个是整个程序的代码，实现了那三个函数，其他的都没有改动。\r\n虽然我实现的方法不算是很聪明，但是应该还是很好理解的", "Konwledge_Point": "算术运算", "Question": ["c++针对二进制补码算术中整数的算术运算问题，请大神指点", ["c++ 二进制问题请教", "\n\n", "以下程序针对二进制补码算术中整数的算术运算问题，要求先确定一个bit pattern size ，然后第一个函数要把输入的两个整数转化为二进制输出，第二个函数把两个二进制数相加输出，第三个函数再把结果转化回十进制。", "\n只使用c++字符串数据类型，不使用任何数组变量。不改变主程序也不更改函数名，实现缺失函数，使程序运行正确。可编写额外的帮助函数，从函数中调用但不能对程序做修改。", "\n需要使用c++字符串数据类型来表示这两个二进制补码的表示形式，不能使用任何数组变量，可使用字符串变量作为一个整体或使用索引访问字符串中变量中的字符。", "\n程序示例运行如下", "\n输入位模式大小的正整数：5", "\n输入整数A：9", "\n输入整数B：-14", "\n十进制  9 + -14 = -5", "\n二进制补码9 是 01001", "\n二进制补码-14  是 10010 ", "\n01001和10010的二进制和是11011。", "\n在二进制补码计算中，9＋ -14=-5。", "\n\n", "#include  iostream>", "\n#include  cmath>", "\n#include  string> ", "\n\n", "using namespace std;", "\n\n", "int main() ", "\n{", "\n     //Read in the bit pattern size ", "\n        int L;", "\n        do {", "\n        cout << \"Enter positive integer for the bit pattern size \"; ", "\n        cin >> L;", "\n        }while (L <= 0); ", "\n\n", "    //Read in two integers a and b \n    int a, b; \n    cout << \"Enter an integer a \"; \n    cin >> a; \n    cout << \"Enter an integer b \"; \n    cin >> b; \n\n    //Calculate the decimal arithmetic sum of a and b and print the result int \n    c1 = a + b; \n    cout << \"In decimal \" << a << \" + \" << b << \" is \" << c1 << endl; \n\n    //Compute the two's complement representations of a and b \n    //Each integer must be represented in L-bits pattern \n    //Also these two's complement representations must be returned as string data types \n    string A = decimalToTwocomplementString(a, L); \n    string B = decimalToTwocomplementString(b, L); \n\n    //Print the two's complement representations of a and b \n    cout << \"The two's complement of \" << a << \" is\\t \" << A << endl; \n    cout << \"The two's complement of \" << b << \" is\\t \" << B << endl; \n\n    //Compute the binary sum of the two's complement representations of a and b \n    //The result must be returned as L-bit pattern string data type \n    string C = TwoComplementStringAddition(A, B);\n\n    //Print the two's complement representation binary sum \n    cout << \"The binary sum of \" << A << \" and \" << B << \" is \" << C << endl; \n\n    //Convert the two's complement representation binary sum to decimal and print \n    int c2 = TwoComplementStringToDecimal(C); \n    cout << \"In two's complement arithmetic, \" << a << \" + \" << b << \" is \" << c2 << endl; \n\n    //Print some concluding results \n    if (c1 == c2) cout << c1 << \" is equal to \" << c2 << \". Good Job!\" << endl; \n    else\n", "\n\n", "{ ", "\n    cout << c1 << \" is not equal to \" << c2 << endl; ", "\n        cout << \"Either \" << c1 << \" cannot be represented by the given bit pattern OR we have made some mistake!\" << endl; ", "\n}", "\nsystem(\"Pause\");", "\nreturn 0; ", "\n}", "\n\n", "原程序拷屏如下："]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你少了一个余数啊&lt;br /&gt;printf(&amp;#34;%d % %d\\n&amp;#34;,a,b,a%b);&lt;br /&gt;另外除法需要先判断b不为0&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["PTA 整数算术运算（30分）", ["本题要求编写程序，计算并输出2个正整数的和、差、积、商与余数。题目保证输入和输出全部在整型范围内。", "\n", "输入格式:", "输入在一行中给出2个正整数A和B。", "\n", "输出格式:", "在5行中按照格式“A 运算符 B = 结果”顺序输出和、差、积、商与余数。", "\n", "输入样例:", "5 3", "结尾无空行", "输出样例:", "在这里给出相应的输出。例如：", "\n", "5 + 3 = 8", "5 - 3 = 2", "5 * 3 = 15", "5 / 3 = 1", "5 % 3 = 2", "结尾无空行", "\n", "我的代码", "\n", "反馈", "到底哪里出错了，望大神指点"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;&lt;a href=\"https://golang.org/pkg/html/template/#Template.Execute\" rel=\"nofollow\"&gt;&lt;code&gt;template.Execute()&lt;/code&gt;&lt;/a&gt; returns an &lt;a href=\"https://golang.org/pkg/builtin/#error\" rel=\"nofollow\"&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt;, you should always check that. Would you have done so:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;template: item.gtpl:3:33: executing \"item.gtpl\" at &amp;lt;.Number&amp;gt;: Number is not a field of struct type main.Item&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The \"problem\" is that &lt;code&gt;{{range}}&lt;/code&gt; changes the pipeline (the &lt;em&gt;dot&lt;/em&gt;, &lt;code&gt;.&lt;/code&gt;) to the current item, so inside the &lt;code&gt;{{range}}&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{{add $i (mul .ID .Number)}}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;.Number&lt;/code&gt; will refer to a field or method of your &lt;code&gt;Item&lt;/code&gt; type since you are looping over a &lt;code&gt;[]Item&lt;/code&gt;. But your &lt;code&gt;Item&lt;/code&gt; type has no such method or field.&lt;/p&gt;\n\n&lt;p&gt;Use &lt;code&gt;$.Number&lt;/code&gt; which will refer to the \"top-level\" &lt;code&gt;Number&lt;/code&gt; and not a field of the current &lt;code&gt;Item&lt;/code&gt; value:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{{add $i (mul .ID $.Number)}}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Try your modified, working code on the &lt;kbd&gt;&lt;a href=\"http://play.golang.org/p/34HgBb_OhZ\" rel=\"nofollow\"&gt;Go Playground&lt;/a&gt;&lt;/kbd&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;$&lt;/code&gt; is documented at &lt;a href=\"https://golang.org/pkg/text/template/\" rel=\"nofollow\"&gt;&lt;code&gt;text/template&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;When execution begins, $ is set to the data argument passed to Execute, that is, to the starting value of dot.&lt;/p&gt;\n&lt;/blockquote&gt;\n    &lt;/div&gt;", "Konwledge_Point": "算术运算", "Question": ["html模板中的golang乘法算法", ["\n\n", "I am new for golang. I met a problem when I use multiplication in html/template.\nSome code like below.", "\n\n", "template code:   ", "\n\n", " {{range $i,$e:=.Items}}\n      <tr>\n           <td>{{add $i (mul .ID .Number)}}</td>\n           <td>{{.Name}}</td>\n      </tr>\n  {{end}}\n", "\n\n", ".go code", "\n\n", "type Item struct{\n        ID int\n        Name string\n    }\nfunc init() {\n    itemtpl,_:=template.New(\"item.gtpl\").\n        Funcs(template.FuncMap{\"mul\": Mul, \"add\": Add}).\n        ParseFiles(\"./templates/item.gtpl\")\n}\n\nfunc itemHandle(w http.ResponseWriter, req *http.Request) {\n\n    items:=[]Item{Item{1,\"name1\"},Item{2,\"name2\"}}\n    data := struct {\n            Items []Item\n            Number int\n            Number2 int\n        }{\n            Items:    items,\n            Number:   5,\n            Number2:  2,\n        }\n        itemtpl.Execute(w, data)\n}\nfunc Mul(param1 int, param2 int) int {\n    return param1 * param2\n}\nfunc Add(param1 int, param2 int) int {\n    return param1 + param2\n}\n", "\n\n", "It will output nothing when I use the code above. But It will output 10 when I use the code outside of array below.", "\n\n", "<html>\n<body>\n    {{mul .Number .Number2}}\n</html>\n</body>\n", "\n\n", "I google a lot. I cannot find the usable like mine. I want to use multiplication in array inside of html/template. Can someone tell me what is wrong with my code?", "\n    "]], "Tag": "程序设计"}
{"Answer": "unsigend char表示0到255的数，7.4.1.254这里1-3=254.再次到这里应该是8.5.2.255最后才能循环到0，一共循环次数（256*2+7）/3次，所以结果为173", "Konwledge_Point": "算术运算", "Question": ["char型与int型之间算术运算问题", ["\n\n", "最后运算结果为173  具体是怎么算出来的啊"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;修改如下&amp;#xff0c;供对照参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;math.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; A,B,C;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;,&amp;amp;A,&amp;amp;B);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#43; %d &amp;#61; %d\\n&amp;#34;&lt;/span&gt;,A,B,A&amp;#43;B);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d - %d &amp;#61; %d\\n&amp;#34;&lt;/span&gt;,A,B,A-B);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d * %d &amp;#61; %d\\n&amp;#34;&lt;/span&gt;,A,B,A*B);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d / %d &amp;#61; %d\\n&amp;#34;&lt;/span&gt;,A,B,A/B);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %% %d &amp;#61; %d\\n&amp;#34;&lt;/span&gt;,A,B,A%B);\n    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["整形算术运算！ 输入之后运行没有结果", ["输入格式:", "输入在一行中给出2个正整数A和B。", "\n", "输出格式:", "在5行中按照格式“A 运算符 B = 结果”顺序输出和、差、积、商与余数。", "\n", "输入样例:", "5 3", "结尾无空行", "输出样例:", "在这里给出相应的输出。例如：", "\n", "5 + 3 = 8", "5 - 3 = 2", "5 * 3 = 15", "5 / 3 = 1", "5 % 3 = 2", "\n", "这样写哪里出错 ", "\n", "#include<stdio.h>", "#include<math.h>", "int main()", "{", "    int A,B,C,D,E,F,G,n;", "    A=5;", "    B=3;", "    C=A+B;", "    D=A-B;", "    E=A*B;", "    F=A/B;", "    G=A%B;", "    scanf(\"%d %d\",n);", "    printf(\"%d + %d = %d\\n\",A,B,C);", "    printf(\"%d - %d = %d\\n\",A,B,D);", "    printf(\"%d * %d = %d\\n\",A,B,E);", "    printf(\"%d / %d = %d\\n\",A,B,F);", "    printf(\"%d % %d = %d\\n\",A,B,G);", "    return 0;", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;编程就是要勇于尝试&amp;#xff0c;删去可不可以啊&amp;#xff1f;删掉再说&amp;#xff08;对于这种编程题而言&amp;#xff09;&amp;#xff0c;运行一下看看呗&lt;br /&gt;确实没有&amp;#xff0c;a&amp;#43;5&amp;#xff0c;也没有人接收&amp;#xff0c;肯定没用啊&lt;br /&gt;有用记得采纳呐&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["关于C++算术运算的问题", ["这个代码运行结果是x=60,a=15，可这样a+5就好像没用了。是不是a+5因为别的什么没影响结果，我可以删去它吗？"]], "Tag": "程序设计"}
{"Answer": "在PHP中，自增自减的运算优先级要高于加减乘除运算的，乘除的优先级略高于加减，所以是先执行自增自减的。++$x和$x++的区别在于++$x在运算的时候是先自增再运算的，而$x++则是先运算在自增。", "Konwledge_Point": "算术运算", "Question": ["PHP自增自减和算术运算的问题", ["$x = 5;\n$y = 6;\n $foo = $x++ + $x--;\n", "\n\n", "这个运行结果是11，计算的顺序是 先自增之后再相加，然后再自减吗？", "\n\n", "$x = 5;\n$y = 6;\n $paper = ++$x + $x++;\n", "\n\n", "还有这个，结果是12，同样没有搞懂计算的顺序。", "\n\n", "自增自减相对于加号减号来说优先级相同吗？对于乘除和取余等运算符号来说呢？", "\n来个大神解释一下。。。把自己绕晕了。。。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这是printf的时候默认的格式&lt;br /&gt;如果只是问值&amp;#xff0c;而不是问打印出来是什么&amp;#xff0c;那3和3.000000是没有区别的&amp;#xff0c;但是打印出来的字符串3和3.000000是不一样的&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["C语言的算术运算及整型表达", ["答案是3.000000", "为什么不能直接写3呢？", "小数点后要加0的话为什么要加6个呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;&lt;em&gt;Short summary (TL;DR) is at the end of the answer.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Untyped arbitrary-precision constants don't live at runtime, constants live only at compile time (during the compilation). That being said, Go does not have to represent constants with arbitrary precision at runtime, only when compiling your application.&lt;/p&gt;\n\n&lt;p&gt;Why? Because constants do not get compiled into the executable binaries. They don't have to be. Let's take your example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const Huge = 1e1000\nfmt.Println(Huge / 1e999)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is a constant &lt;code&gt;Huge&lt;/code&gt; in the &lt;em&gt;source code&lt;/em&gt; (and will be in the package object), but it won't appear in your executable. Instead a function call to &lt;code&gt;fmt.Println()&lt;/code&gt; will be recorded with a value passed to it, whose type will be &lt;code&gt;float64&lt;/code&gt;. So in the executable only a &lt;code&gt;float64&lt;/code&gt; value being &lt;code&gt;10.0&lt;/code&gt; will be recorded. There is no sign of any number being &lt;code&gt;1e1000&lt;/code&gt; in the executable.&lt;/p&gt;\n\n&lt;p&gt;This &lt;code&gt;float64&lt;/code&gt; type is derived from the &lt;em&gt;default&lt;/em&gt; type of the &lt;em&gt;untyped&lt;/em&gt; constant &lt;code&gt;Huge&lt;/code&gt;. &lt;code&gt;1e1000&lt;/code&gt; is a &lt;a href=\"https://golang.org/ref/spec#Floating-point_literals\" rel=\"nofollow noreferrer\"&gt;floating-point literal&lt;/a&gt;. To verify it:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const Huge = 1e1000\nx := Huge / 1e999\nfmt.Printf(\"%T\", x) // Prints float64\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Back to the arbitrary precision:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://golang.org/ref/spec#Constants\" rel=\"nofollow noreferrer\"&gt;Spec: Constants:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Numeric constants represent exact values of arbitrary precision and do not overflow.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So constants represent exact values of arbitrary precision. As we saw, there is no need to represent constants with arbitrary precision at &lt;em&gt;runtime&lt;/em&gt;, but the compiler still has to do something at &lt;em&gt;compile time&lt;/em&gt;. And it &lt;em&gt;does&lt;/em&gt;!&lt;/p&gt;\n\n&lt;p&gt;Obviously \"infinite\" precision cannot be dealt with. But there is no need, as the source code itself is not \"infinite\" (size of the source is finite). Still, it's not practical to &lt;em&gt;allow&lt;/em&gt; truly arbitrary precision. So the spec gives some freedom to compilers regarding to this:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Implementation restriction: Although numeric constants have arbitrary precision in the language, a compiler may implement them using an internal representation with limited precision. That said, every implementation must:&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;Represent integer constants with at least 256 bits.&lt;/li&gt;\n  &lt;li&gt;Represent floating-point constants, including the parts of a complex constant, with a mantissa of at least 256 bits and a signed exponent of at least 32 bits.&lt;/li&gt;\n  &lt;li&gt;Give an error if unable to represent an integer constant precisely.&lt;/li&gt;\n  &lt;li&gt;Give an error if unable to represent a floating-point or complex constant due to overflow.&lt;/li&gt;\n  &lt;li&gt;Round to the nearest representable constant if unable to represent a floating-point or complex constant due to limits on precision.\n  These requirements apply both to literal constants and to the result of evaluating &lt;a href=\"https://golang.org/ref/spec#Constant_expressions\" rel=\"nofollow noreferrer\"&gt;constant expressions&lt;/a&gt;.&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;However, also note that when all the above said, the standard package provides you the means to still represent and work with values (constants) with \"arbitrary\" precision, see package &lt;a href=\"https://golang.org/pkg/go/constant/\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;go/constant&lt;/code&gt;&lt;/a&gt;. You may look into its source to get an idea how it's implemented.&lt;/p&gt;\n\n&lt;p&gt;Implementation is in &lt;a href=\"https://golang.org/src/go/constant/value.go\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;go/constant/value.go&lt;/code&gt;&lt;/a&gt;. Types representing such values:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// A Value represents the value of a Go constant.\ntype Value interface {\n    // Kind returns the value kind.\n    Kind() Kind\n\n    // String returns a short, human-readable form of the value.\n    // For numeric values, the result may be an approximation;\n    // for String values the result may be a shortened string.\n    // Use ExactString for a string representing a value exactly.\n    String() string\n\n    // ExactString returns an exact, printable form of the value.\n    ExactString() string\n\n    // Prevent external implementations.\n    implementsValue()\n}\n\ntype (\n    unknownVal struct{}\n    boolVal    bool\n    stringVal  string\n    int64Val   int64                    // Int values representable as an int64\n    intVal     struct{ val *big.Int }   // Int values not representable as an int64\n    ratVal     struct{ val *big.Rat }   // Float values representable as a fraction\n    floatVal   struct{ val *big.Float } // Float values not representable as a fraction\n    complexVal struct{ re, im Value }\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see, the &lt;a href=\"https://golang.org/pkg/math/big/\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;math/big&lt;/code&gt;&lt;/a&gt; package is used to represent untyped arbitrary precision values. &lt;a href=\"https://golang.org/pkg/math/big/#Int\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;big.Int&lt;/code&gt;&lt;/a&gt; is for example (from &lt;a href=\"https://golang.org/src/math/big/int.go\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;math/big/int.go&lt;/code&gt;&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// An Int represents a signed multi-precision integer.\n// The zero value for an Int represents the value 0.\ntype Int struct {\n    neg bool // sign\n    abs nat  // absolute value of the integer\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where &lt;code&gt;nat&lt;/code&gt; is (from &lt;a href=\"https://golang.org/src/math/big/nat.go\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;math/big/nat.go&lt;/code&gt;&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// An unsigned integer x of the form\n//\n//   x = x[n-1]*_B^(n-1) + x[n-2]*_B^(n-2) + ... + x[1]*_B + x[0]\n//\n// with 0 &amp;lt;= x[i] &amp;lt; _B and 0 &amp;lt;= i &amp;lt; n is stored in a slice of length n,\n// with the digits x[i] as the slice elements.\n//\n// A number is normalized if the slice contains no leading 0 digits.\n// During arithmetic operations, denormalized values may occur but are\n// always normalized before returning the final result. The normalized\n// representation of 0 is the empty or nil slice (length = 0).\n//\ntype nat []Word\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And finally &lt;a href=\"https://golang.org/pkg/math/big/#Word\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;Word&lt;/code&gt;&lt;/a&gt; is (from &lt;a href=\"https://golang.org/src/math/big/arith.go\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;math/big/arith.go&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// A Word represents a single digit of a multi-precision unsigned integer.\ntype Word uintptr\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;At runtime: &lt;em&gt;predefined&lt;/em&gt; types provide limited precision, but you can \"mimic\" arbitrary precision with certain packages, such as &lt;code&gt;math/big&lt;/code&gt; and &lt;code&gt;go/constant&lt;/code&gt;. At compile time: constants seemingly provide arbitrary precision, but in reality a compiler may not live up to this (doesn't have to); but still the spec provides minimal precision for constants that all compiler must support, e.g. integer constants must be represented with at least 256 bits which is 32 bytes (compared to &lt;code&gt;int64&lt;/code&gt; which is \"only\" 8 bytes).&lt;/p&gt;\n\n&lt;p&gt;When an executable binary is created, results of constant expressions (with arbitrary precision) have to be converted and represented with values of finite precision types – which may not be possible and thus may result in compile-time errors. Note that only &lt;em&gt;results&lt;/em&gt; –not intermediate operands– have to be converted to finite precision, constant operations are carried out with arbitrary precision.&lt;/p&gt;\n\n&lt;p&gt;How this arbitrary or enhanced precision is implemented is not defined by the spec, &lt;code&gt;math/big&lt;/code&gt; for example stores \"digits\" of the number in a slice (where digits is not a digit of the base 10 representation, but \"digit\" is an &lt;code&gt;uintptr&lt;/code&gt; which is like base 4294967295 representation on 32-bit architectures, and even bigger on 64-bit architectures).&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "算术运算", "Question": ["Go如何对常数执行算术运算？", ["\n\n", "I've been reading this ", "post on constants in Go", ", and I'm trying to understand how they are stored and used in memory. You can perform operations on very large constants in Go, and as long as the result fits in memory, you can coerce that result to a type. For example, this code prints ", "10", ", as you would expect:", "\n\n", "const Huge = 1e1000\nfmt.Println(Huge / 1e999)\n", "\n\n", "How does this work under the hood? At some point, Go has to store ", "1e1000", " and ", "1e999", " in memory, in order to perform operations on them. So how are constants stored, and how does Go perform arithmetic on them?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;&lt;a href=\"https://golang.org/ref/spec#Integer_overflow\" rel=\"noreferrer\"&gt;Spec: Integer overflow:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;For unsigned integer values, the operations +, -, *, and &amp;lt;&amp;lt; are computed modulo 2&lt;sup&gt;n&lt;/sup&gt;, where &lt;em&gt;n&lt;/em&gt; is the bit width of the &lt;a href=\"https://golang.org/ref/spec#Numeric_types\" rel=\"noreferrer\"&gt;unsigned integer&lt;/a&gt;'s type. Loosely speaking, &lt;strong&gt;these unsigned integer operations discard high bits upon overflow, and programs may rely on \"wrap around\"&lt;/strong&gt;.&lt;/p&gt;\n  \n  &lt;p&gt;For signed integers, the operations +, -, *, /, and &amp;lt;&amp;lt; may legally overflow and the resulting value exists and is deterministically defined by the signed integer representation, the operation, and its operands. &lt;strong&gt;Overflow does not cause a &lt;a href=\"https://golang.org/ref/spec#Run_time_panics\" rel=\"noreferrer\"&gt;run-time panic&lt;/a&gt;.&lt;/strong&gt; A compiler may not optimize code under the assumption that overflow does not occur. For instance, it may not assume that &lt;code&gt;x &amp;lt; x + 1&lt;/code&gt; is always true.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;As quoted above, overflow exists and it does not cause a run-time panic.&lt;/p&gt;\n\n&lt;p&gt;But care must be taken, as if you have a &lt;a href=\"https://golang.org/ref/spec#Constant_expressions\" rel=\"noreferrer\"&gt;constant expressions&lt;/a&gt;, since they have arbitrary precision, if the result is to be converted to a fixed precision where it does not fit into the target type's valid range, it results in a compile time-error.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const maxuint64 = 0xffffffffffffffff\nvar key uint64 = maxuint64 * maxuint64\n\nfmt.Println(key)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above yields:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;constant 340282366920938463426481119284349108225 overflows uint64\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;maxuint64 * maxuint64&lt;/code&gt; is a constant expression which is properly calculated (its value is &lt;code&gt;340282366920938463426481119284349108225&lt;/code&gt;), but when this value is to be assigned to the &lt;code&gt;key&lt;/code&gt; variable of type &lt;code&gt;uint64&lt;/code&gt;, it results in a compile-time error because this value cannot be represented by a value of type &lt;code&gt;uint64&lt;/code&gt;. But this is not a run-time panic.&lt;/p&gt;\n\n&lt;p&gt;See related questions:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://stackoverflow.com/questions/34704843/golang-on-purpose-int-overflow/34704898#34704898\"&gt;Golang: on-purpose int overflow&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://stackoverflow.com/questions/39444852/does-go-compilers-evaluation-differ-for-constant-expression-and-other-expressio/39445372#39445372\"&gt;Does Go compiler's evaluation differ for constant expression and other expression&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://stackoverflow.com/questions/54477761/how-to-store-a-big-float64-in-a-string-without-overflow/54477914#54477914\"&gt;How to store a big float64 in a string without overflow?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://stackoverflow.com/questions/48023473/proper-way-for-casting-uint16-to-int16-in-go/48023533#48023533\"&gt;Proper way for casting uint16 to int16 in Go&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "算术运算", "Question": ["Go允许算术运算溢出而不是抛出异常是预期的行为吗？", ["\n\n", "I am porting some Go code to Rust and I realized that Rust panics when overflow occurs during multiplication while Go allows the overflow to happen.", "\n\n", "Test code below, that does not cause overflow but print reduced value. \n(tested via: ", "https://play.golang.org/", ")", "\n\n", "func main() {\n    fmt.Println(\"test\n\")\n    var key uint64 = 15000;\n\n    key = key*2862933555777941757 + 1\n\n    fmt.Println(key)\n}\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; op; \n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num1, num2;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ans, result; \n    &lt;span class=\"hljs-built_in\"&gt;srand&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;(&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)); \n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请选择要进行的算术运算&amp;#xff08;&amp;#43;或-&amp;#xff09;&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;, &amp;amp;op);\n    num1 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;() % &lt;span class=\"hljs-number\"&gt;101&lt;/span&gt;;\n    num2 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;() % &lt;span class=\"hljs-number\"&gt;101&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (op &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#43; %d &amp;#61; &amp;#34;&lt;/span&gt;, num1, num2);\n        result &amp;#61; num1 &amp;#43; num2;\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (op &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d - %d &amp;#61; &amp;#34;&lt;/span&gt;, num1, num2);\n        result &amp;#61; num1 - num2;\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;错误的运算符&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 退出程序&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;ans);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (ans &amp;#61;&amp;#61; result) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;运算正确&amp;#xff0c;好棒&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;运算错误&amp;#xff0c;正确答案是%d。\\n&amp;#34;&lt;/span&gt;, result);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["关于#c语言#的问题：设计一个加减算术运算练习程序，用户输入想要进行的加减算术运算符，程序随机产生（0—100）之间两个数的算术表达式(用产生随机数函数完成)，用户输出运算结果", ["设计一个加减算术运算练习程序，用户输入想要进行的加减算术运算符，程序随机产生（0—100）之间两个数的算术表达式(用产生随机数函数完成)，用户输出运算结果；程序给出正确或错误的提示信息。", "如：用户输入“+”，随机产生了56+8=  ，用户输出64，提示：“运算正确，好棒！”", "【提示：如何编程控制计算机产生指定范围的随机数呢？可采用下面方法：", "（1）利用求余运算rand()%b将函数rand()所产生的数变化到0~（b-1）之间。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;printf中输出%要用%%&amp;#xff0c;你这里是吧% %d识别为&amp;#xff08;% %&amp;#xff09;d了&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["c语言整数算术运算出了问题，两个数相除且取余该怎么表示？", ["\n", "c语言，输出最后一行的时候有了问题，为什么输出结果是这样？两个数相除取余来着，刚刚学不久，不知如何解决？有人帮忙解答下咩？谢谢啦"]], "Tag": "程序设计"}
{"Answer": "```\r\nimport java.util.Collections;\r\nimport java.util.Stack;\r\n\r\npublic class Calculator {\r\n    private Stack&lt;String&gt; postfixStack  = new Stack&lt;String&gt;();//后缀式栈\r\n    private Stack&lt;Character&gt; opStack  = new Stack&lt;Character&gt;();//运算符栈\r\n    private int [] operatPriority  = new int[] {0,3,2,1,-1,1,0,2};//运用运算符ASCII码-40做索引的运算符优先级\r\n    public static void main(String[] args) {\r\n        System.out.println(5+12*(3+5)/7.0);\r\n        Calculator cal  = new Calculator();\r\n        String s = \"5+12*(3+5)/7\";\r\n        double result  = cal.calculate(s);\r\n        System.out.println(result);\r\n    }\r\n\r\n    /**\r\n     * 按照给定的表达式计算\r\n     * @param expression 要计算的表达式例如:5+12*(3+5)/7\r\n     * @return\r\n     */\r\n    public double calculate(String expression) {\r\n        Stack&lt;String&gt; resultStack  = new Stack&lt;String&gt;();\r\n        prepare(expression);\r\n        Collections.reverse(postfixStack);//将后缀式栈反转\r\n        String firstValue  ,secondValue,currentValue;//参与计算的第一个值，第二个值和算术运算符\r\n        while(!postfixStack.isEmpty()) {\r\n            currentValue  = postfixStack.pop();\r\n            if(!isOperator(currentValue.charAt(0))) {//如果不是运算符则存入操作数栈中\r\n                resultStack.push(currentValue);\r\n            } else {//如果是运算符则从操作数栈中取两个值和该数值一起参与运算\r\n                 secondValue  = resultStack.pop();\r\n                 firstValue  = resultStack.pop();\r\n                 String tempResult  = calculate(firstValue, secondValue, currentValue.charAt(0));\r\n                 resultStack.push(tempResult);\r\n            }\r\n        }\r\n        return Double.valueOf(resultStack.pop());\r\n    }\r\n    \r\n    /**\r\n     * 数据准备阶段将表达式转换成为后缀式栈\r\n     * @param expression\r\n     */\r\n    private void prepare(String expression) {\r\n        opStack.push(',');//运算符放入栈底元素逗号，此符号优先级最低\r\n        char[] arr  = expression.toCharArray();\r\n        int currentIndex  = 0;//当前字符的位置\r\n        int count = 0;//上次算术运算符到本次算术运算符的字符的长度便于或者之间的数值\r\n        char currentOp  ,peekOp;//当前操作符和栈顶操作符\r\n        for(int i=0;i&lt;arr.length;i++) {\r\n            currentOp = arr[i];\r\n            if(isOperator(currentOp)) {//如果当前字符是运算符\r\n                if(count &gt; 0) {\r\n                    postfixStack.push(new String(arr,currentIndex,count));//取两个运算符之间的数字\r\n                }\r\n                peekOp = opStack.peek();\r\n                if(currentOp == ')') {//遇到反括号则将运算符栈中的元素移除到后缀式栈中直到遇到左括号\r\n                    while(opStack.peek() != '(') {\r\n                        postfixStack.push(String.valueOf(opStack.pop()));\r\n                    }\r\n                    opStack.pop();\r\n                } else {\r\n                    while(currentOp != '(' &amp;&amp; peekOp != ',' &amp;&amp; compare(currentOp,peekOp) ) {\r\n                        postfixStack.push(String.valueOf(opStack.pop()));\r\n                        peekOp = opStack.peek();\r\n                    }\r\n                    opStack.push(currentOp);\r\n                }\r\n                count = 0;\r\n                currentIndex = i+1;\r\n            } else {\r\n                count++;\r\n            }\r\n        }\r\n        if(count &gt; 1 || (count == 1 &amp;&amp; !isOperator(arr[currentIndex]))) {//最后一个字符不是括号或者其他运算符的则加入后缀式栈中\r\n            postfixStack.push(new String(arr,currentIndex,count));\r\n        } \r\n        \r\n        while(opStack.peek() != ',') {\r\n            postfixStack.push(String.valueOf( opStack.pop()));//将操作符栈中的剩余的元素添加到后缀式栈中\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 判断是否为算术符号\r\n     * @param c\r\n     * @return\r\n     */\r\n    private boolean isOperator(char c) {\r\n        return c == '+' || c == '-' || c == '*' || c == '/' || c == '(' ||c == ')';\r\n    }\r\n    \r\n    /**\r\n     * 利用ASCII码-40做下标去算术符号优先级\r\n     * @param cur\r\n     * @param peek\r\n     * @return\r\n     */\r\n    public  boolean compare(char cur,char peek) {// 如果是peek优先级高于cur，返回true，默认都是peek优先级要低\r\n        boolean result  = false;\r\n        if(operatPriority[(peek)-40] &gt;= operatPriority[(cur) - 40]) {\r\n           result = true;\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * 按照给定的算术运算符做计算\r\n     * @param firstValue\r\n     * @param secondValue\r\n     * @param currentOp\r\n     * @return\r\n     */\r\n    private String calculate(String firstValue,String secondValue,char currentOp) {\r\n        String result  = \"\";\r\n        switch(currentOp) {\r\n            case '+':\r\n                result = String.valueOf(ArithHelper.add(firstValue, secondValue));\r\n                break;\r\n            case '-':\r\n                result = String.valueOf(ArithHelper.sub(firstValue, secondValue));\r\n                break;\r\n            case '*':\r\n                result = String.valueOf(ArithHelper.mul(firstValue, secondValue));\r\n                break;\r\n            case '/':\r\n                result = String.valueOf(ArithHelper.div(firstValue, secondValue));\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n```", "Konwledge_Point": "算术运算", "Question": ["JAVA实现算术表达式的求值", ["补充中间有补充代码提示的地方就好能附上说明更好", "\n\n", "package eval;\n\npublic class Util {\n\n    /**\n     * 计算表达式 express 的值\n     * 如: eval(\"3+5*3\") 返回 18\n     */\n    public static double eval(String express) {\n        char[] chars = express.toCharArray();\n\n        // .... 补充代码 ....\n\n        return 0;\n    }\n\n    /**\n     * 求 a 和 b 进行算术运算的结果。 \n     * 例如：calculate(3, 5, '+') 返回  8\n     */\n    private static double calculate(double a, double b, char op) {\n        switch (op) {\n        case '+':\n            return a + b; \n        case '-':\n            return a - b; \n        case '*':\n            return a * b; \n        case '/':\n            return a / b; \n        default:\n            throw new RuntimeException(\"不支持此运算\"); \n        }\n    }\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;谁说没规定&amp;#xff1f;参考下面&lt;br /&gt;52&amp;#xff1a; //| *                | Multiplication                          | Left to right |&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;//C&amp;#43;&amp;#43; Operators\n//  Operators specify an evaluation to be performed on one of the following:\n//    One operand (unary operator)\n//    Two operands (binary operator)\n//    Three operands (ternary operator)\n//  The C&amp;#43;&amp;#43; language includes all C operators and adds several new operators.\n//  Table 1.1 lists the operators available in Microsoft C&amp;#43;&amp;#43;.\n//  Operators follow a strict precedence which defines the evaluation order of\n//expressions containing these operators.  Operators associate with either the\n//expression on their left or the expression on their right;    this is called\n//“associativity.” Operators in the same group have equal precedence and are\n//evaluated left to right in an expression unless explicitly forced by a pair of\n//parentheses, ( ).\n//  Table 1.1 shows the precedence and associativity of C&amp;#43;&amp;#43; operators\n//  (from highest to lowest precedence).\n//\n//Table 1.1   C&amp;#43;&amp;#43; Operator Precedence and Associativity\n// The highest precedence level is at the top of the table.\n//&amp;#43;------------------&amp;#43;-----------------------------------------&amp;#43;---------------&amp;#43;\n//|&lt;span class=\"hljs-string\"&gt; Operator         &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Name or Meaning                         &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Associativity &lt;/span&gt;|\n//&amp;#43;------------------&amp;#43;-----------------------------------------&amp;#43;---------------&amp;#43;\n//|&lt;span class=\"hljs-string\"&gt; ::               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Scope resolution                        &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; ::               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Global                                  &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; [ ]              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Array subscript                         &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; ( )              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Function call                           &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; ( )              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Conversion                              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; .                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Member selection (object)               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; -&amp;gt;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Member selection (pointer)              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;#43;&amp;#43;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Postfix increment                       &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; --               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Postfix decrement                       &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; new              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Allocate object                         &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; delete           &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Deallocate object                       &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; delete[ ]        &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Deallocate object                       &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;#43;&amp;#43;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Prefix increment                        &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; --               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Prefix decrement                        &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; *                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Dereference                             &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;amp;                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Address-of                              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;#43;                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Unary plus                              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; -                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Arithmetic negation (unary)             &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; !                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Logical NOT                             &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; ~                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Bitwise complement                      &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; sizeof           &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Size of object                          &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; sizeof ( )       &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Size of type                            &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; typeid( )        &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; type name                               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; (type)           &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Type cast (conversion)                  &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right to left &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; const_cast       &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Type cast (conversion)                  &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; dynamic_cast     &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Type cast (conversion)                  &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; reinterpret_cast &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Type cast (conversion)                  &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; static_cast      &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Type cast (conversion)                  &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; None          &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; .*               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Apply pointer to class member (objects) &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; -&amp;gt;*              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Dereference pointer to class member     &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; *                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Multiplication                          &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; /                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Division                                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; %                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Remainder (modulus)                     &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;#43;                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Addition                                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; -                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Subtraction                             &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;lt;&amp;lt;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left shift                              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;gt;&amp;gt;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right shift                             &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;lt;                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Less than                               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;gt;                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Greater than                            &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;lt;&amp;#61;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Less than or equal to                   &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;gt;&amp;#61;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Greater than or equal to                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;#61;&amp;#61;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Equality                                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; !&amp;#61;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Inequality                              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;amp;                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Bitwise AND                             &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; ^                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Bitwise exclusive OR                    &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Bitwise OR                              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;amp;&amp;amp;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Logical AND                             &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &lt;/span&gt;||&lt;span class=\"hljs-string\"&gt;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Logical OR                              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; e1?e2:e3         &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Conditional                             &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right to left &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;#61;                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Assignment                              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right to left &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; *&amp;#61;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Multiplication assignment               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right to left &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; /&amp;#61;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Division assignment                     &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right to left &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; %&amp;#61;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Modulus assignment                      &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right to left &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;#43;&amp;#61;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Addition assignment                     &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right to left &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; -&amp;#61;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Subtraction assignment                  &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right to left &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;lt;&amp;lt;&amp;#61;              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left-shift assignment                   &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right to left &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;gt;&amp;gt;&amp;#61;              &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right-shift assignment                  &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right to left &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &amp;amp;&amp;#61;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Bitwise AND assignment                  &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right to left &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt;&amp;#61;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Bitwise inclusive OR assignment         &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right to left &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; ^&amp;#61;               &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Bitwise exclusive OR assignment         &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Right to left &lt;/span&gt;|\n//|&lt;span class=\"hljs-string\"&gt; ,                &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Comma                                   &lt;/span&gt;|&lt;span class=\"hljs-string\"&gt; Left to right &lt;/span&gt;|\n//&amp;#43;------------------&amp;#43;-----------------------------------------&amp;#43;---------------&amp;#43;\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;**&lt;br /&gt;不要迷信书、考题、老师、回帖&amp;#xff1b;&lt;br /&gt;要迷信CPU、编译器、调试器、运行结果。&lt;br /&gt;并请结合“盲人摸太阳”和“驾船出海时一定只带一个指南针。”加以理解。&lt;br /&gt;任何理论、权威、传说、真理、标准、解释、想象、知识……都比不上摆在眼前的事实&amp;#xff01;**&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["已知e1和e2是算术表达式，则对于乘法运算e1*e2的运算次序是？正确答案是C选项，但是希望有朋友可以解释C选项的答案。", ["已知e1和e2是算术表达式，则对于乘法运算e1*e2的运算次序是？正确答案是C选项，但是希望有朋友可以解释C选项的答案。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;随机生成100以内加减法&amp;#xff0c;是随机什么数&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["JAVA swing设计一个小学生100以内加减法练习软件", [".小学生算术运算练习软件要求：制作一个可供小学生练习算术运算的小程序，按照要求随机生成100以内加减法，能根据输入题数出题，判断是否正确，最后计算分数，与合格优秀率。并将每次的计算内容与结果保存到相应的文件中。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;srand((unsigned int)time(0)); //设置种子&lt;br /&gt;int a  &amp;#61; rand()%10&amp;#43;1;//生成1-10之间的整数&lt;br /&gt;完整代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;add&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; (a &amp;#43; b);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;sub&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; (a - b);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;mul&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; (a * b);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;div2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a / b;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, b, i;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; op;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; res, c;\n    &lt;span class=\"hljs-built_in\"&gt;srand&lt;/span&gt;((&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;)&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;));\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;//出10个题目&lt;/span&gt;\n    {\n        a &amp;#61; &lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;() % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//生成1-10的整数&lt;/span&gt;\n        b &amp;#61; &lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;() % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        op &amp;#61; &lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;() % &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//生成0-3的整数&amp;#xff0c;0代表&amp;#43;&amp;#xff0c;1代表-&amp;#xff0c;2代表*&amp;#xff0c;3代表/&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (op)\n        {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;请计算&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#43;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#34;&lt;/span&gt;;\n            c &amp;#61; &lt;span class=\"hljs-built_in\"&gt;add&lt;/span&gt;(a, b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;请计算&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#34;&lt;/span&gt;;\n            c &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sub&lt;/span&gt;(a, b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;请计算&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#34;&lt;/span&gt;;\n            c &amp;#61; &lt;span class=\"hljs-built_in\"&gt;mul&lt;/span&gt;(a, b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;请计算&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#34;&lt;/span&gt;;\n            c &amp;#61; &lt;span class=\"hljs-built_in\"&gt;div2&lt;/span&gt;(a, b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        cin &amp;gt;&amp;gt; res; &lt;span class=\"hljs-comment\"&gt;//输入计算结果&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (res &amp;#61;&amp;#61; c)\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;计算正确&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;计算错误&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["c++，请问这个problem该怎么办", ["编程实现: I~10加减乘运算训练系统。", "(1)主函数功能:随机产生一个1710加减乘算术式(数字在1\"10之间随机产生,运算符在加减 乘中随机产生,如2+3=、8-4=、6", "3=),要求用户输入计算结果,通过调用子函数得到正确答 案,判断用户输入的计算结果是否正确并输出结论。", "(2)子函数功能:定义有返回值函数,实现加减乘算术式的计算功能,返回计算结果。", "(3)输入输出格式参见样张:", "请计算3+2=6", "请计算3-1=2", "请计算10", "1=10", "计算错误! 3+2=5||计算准确!", "计算准确!"]], "Tag": "程序设计"}
{"Answer": "#include\"main.h\"\r\nvoid operation(char ch,pNum num);\r\nint judge_priority(char ch1,char ch2);\r\nint judge_ch(char ch);\r\nint main()\r\n{\r\n\t\tchar data[SIZE];\r\n\t\tsNum num;\r\n\t\tsSig sig;\r\n\t\tinit_stack(&amp;num,&amp;sig);\r\n\t\tprintf(\"please input:\\n\");\r\n\t\tscanf(\"%s\",data);\r\n\t\tcalc(&amp;num,&amp;sig,data);\r\n\t\twhile(num.top!=0)\r\n\t\t{\r\n\t\t\t\tint i;\r\n\t\t\t\tpop_num(&amp;num,&amp;i);\r\n\t\t\t\tprintf(\"num:%d \",i);\r\n\t\t}\r\n\t\tprintf(\"\\n\");\r\n\t\twhile(sig.top!=0)\r\n\t\t{\r\n\t\t\t\tchar j;\r\n\t\t\t\tpop_sig(&amp;sig,&amp;j);\r\n\t\t\t\tprintf(\"sig:%c \",j);\r\n\t\t}\r\n\t\tprintf(\"\\n\");\r\n\t\treturn 0;\r\n}\r\n\r\nvoid operation(char ch,pNum num)\r\n{\r\n\t\tint a,b,value;\r\n\t\tpop_num(num,&amp;b);\r\n\t\tpop_num(num,&amp;a);\r\n\t\tswitch(ch)\r\n\t\t{\r\n\t\t\t\tcase '+':\r\n\t\t\t\t\t\tvalue=add(a,b);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\tcase '-':\r\n\t\t\t\t\t\tvalue=sub(a,b);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\tcase '*':\r\n\t\t\t\t\t\tvalue=mul(a,b);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\tcase '/':\r\n\t\t\t\t\t\tvalue=div_(a,b);\r\n\t\t\t\t\t\tbreak;\r\n\t\t}\r\n\t\tprintf(\"%d %c %d \\n\",a,ch,b);\r\n\t\tprintf(\"value:%d \\n\",value);\r\n\t\tpush_num(num,value);\r\n}\r\n\r\nint judge_ch(char ch)\r\n{\r\n\t\tif(ch=='+'||ch=='-'||ch=='*'||ch=='/'||ch=='('||ch==')')\r\n\t\t{\r\n\t\t\t\treturn 0;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t\treturn -1;\r\n\t\t}\r\n}\r\n\r\nint judge_priority(char ch1,char ch2)\r\n{\r\n\t\tif(ch1=='(')\r\n\t\t{\r\n\t\t\t\treturn 0;\r\n\t\t}\r\n\t\tif(ch1==')')\r\n\t\t{\r\n\t\t\t\treturn -2;\r\n\t\t}\r\n\t\tif(ch1=='\\0')\r\n\t\t{\r\n\t\t\t\treturn -1;\r\n\t\t}\r\n\t\tif((ch1=='*'||ch1=='/')&amp;&amp;(ch2=='-'||ch2=='+'))\r\n\t\t{\r\n\t\t\t\treturn 0;\r\n\t\t}\r\n\t\tif((ch1=='*'||ch1=='/')&amp;&amp;(ch2=='*'||ch2=='/'))\r\n\t\t{\r\n\t\t\t\treturn 1;\r\n\t\t}\r\n\t\tif((ch1=='+'||ch1=='-')&amp;&amp;(ch2=='-'||ch2=='+'))\r\n\t\t{\r\n\t\t\t\treturn 1;\r\n\t\t}\r\n\t\tif((ch1=='+'||ch1=='-')&amp;&amp;(ch2=='*'||ch2=='/'))\r\n\t\t{\r\n\t\t\t\treturn -1;\r\n\t\t}\r\n}\r\n\r\nint calc(pNum num, pSig sig, char data[SIZE])\r\n{\r\n\t\tchar ch;\r\n\t\tint result,temp=0;\r\n\t\tint i=0,j=0;\r\n\t\twhile(1)\r\n\t\t{\r\n\t\t\t\tprintf(\"a[i]:%c\\n\",data[i]);\r\n\t\t\t\tif(data[i]&gt;='0'&amp;&amp;data[i]&lt;='9')\r\n\t\t\t\t{\r\n\t\t\t\t\t\ttemp=temp*10+(int)data[i]-48;\r\n\t\t\t\t\t\tj++;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t\tif(data[i]!='('&amp;&amp;data[i-1]!=')')\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpush_num(num,temp);\r\n\t\t\t\t\t\t\t\ttemp=0;\r\n\t\t\t\t\t\t\t\tj=0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tswitch(judge_priority(data[i],sig-&gt;bottom[sig-&gt;top-1]))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\t\t\tpush_sig(sig, data[i]);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\t\t\tpop_sig(sig,&amp;ch);\r\n\t\t\t\t\t\t\t\t\t\toperation(ch,num);\r\n\t\t\t\t\t\t\t\t\t\tpush_sig(sig,data[i]);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase -1:\r\n\t\t\t\t\t\t\t\t\t\twhile(num-&gt;top!=1&amp;&amp;sig-&gt;bottom[sig-&gt;top-1]!='(')\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tpop_sig(sig,&amp;ch);\r\n\t\t\t\t\t\t\t\t\t\tprintf(\"num-&gt;bottom:%d \",num-&gt;bottom[num-&gt;top-1]);\r\n\t\t\t\t\t\t\t\t\t\t\t\toperation(ch,num);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tpush_sig(sig,data[i]);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase -2:\r\n\t\t\t\t\t\t\t\t\t\tpop_sig(sig,&amp;ch);\r\n\t\t\t\t\t\t\t\t\t\tprintf(\"ch:%c\\n\",ch);\r\n\t\t\t\t\t\t\t\t\t\twhile(ch!='(')\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\toperation(ch,num);\r\n\t\t\t\t\t\t\t\t\t\t\t\tprintf(\"num:%d\\n\",num-&gt;bottom[num-&gt;top-1]);\r\n\t\t\t\t\t\t\t\t\t\t\t\tpop_sig(sig,&amp;ch);\r\n\t\t\t\t\t\t\t\t\t\tprintf(\"ch:%c\\n\",ch);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\tpush_sig(sig, data[i]);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(data[i]=='\\0')\r\n\t\t\t\t{\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tprintf(\"top:%d num-&gt;bottom:%d \\n\",num-&gt;top,num-&gt;bottom[num-&gt;top-1]);\r\n\t\t\t\ti++;\r\n\t\t}\r\n\t\treturn result;\r\n}", "Konwledge_Point": "算术运算", "Question": ["怎样用c实现链栈的算术表达式运算，不得使用stl模板", ["按照严蔚敏版的书上的算法，用c语言链栈实现，不让使用stl模板，有没有原代码"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&amp;lt;script type&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&amp;gt;\n\nfunction getArea(){\n\nvar a,b,he,c;\n\na&amp;#61;Number(prompt(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入第一个运算数&amp;#34;&lt;/span&gt;));\n\nhe&amp;#61;prompt(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入运算符(&amp;#43;-*/%)&amp;#34;&lt;/span&gt;);\n\nb&amp;#61;Number(prompt(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入第二个运算数&amp;#34;&lt;/span&gt;));\n\nswitch(he){\n\n&lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-symbol\"&gt;:c&amp;#61;a&amp;#43;b&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n&lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-symbol\"&gt;:c&amp;#61;a-b&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n&lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-symbol\"&gt;:c&amp;#61;a*b&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n&lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-symbol\"&gt;:c&amp;#61;a/b&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n&lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-symbol\"&gt;:c&amp;#61;a%b&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n&lt;span class=\"hljs-symbol\"&gt;default:&lt;/span&gt;c&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;无&amp;#34;&lt;/span&gt;;\n\n}\n\nalert(c);\n\n}\n\ngetArea();\n\n&amp;lt;script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["js定义一个函数 没有参数 返回结果", [" 定义一个函数 没有参数 返回结果", "模拟计算器", "要求 浏览器输入框输入两个number类型的值 和算术运算函数体根据输入的算术运算符 实现两个值的运算 最后把结果返回"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;简单写了下&amp;#xff0c;希望有用&amp;#xff0c;祝你顺利&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//简单方法一 &lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,b,c;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; op;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入表达式,按enter执行&amp;#xff0c;例如 1&amp;#43;2 &amp;#xff1a;&amp;#34;&lt;/span&gt;); \n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%c%d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;op,&amp;amp;b);\n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt;(op){\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n            c&amp;#61;a&amp;#43;b;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n            c&amp;#61;a-b;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n            c&amp;#61;a*b;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n            c&amp;#61;a/b;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;:\n            c&amp;#61;a%b;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;不支持该操作%c&amp;#34;&lt;/span&gt;,op);     \n    }     \n     &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%c%d&amp;#61;%d\\n&amp;#34;&lt;/span&gt;,a,op,b,c); \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/10126463035619.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//简单方法二&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;add&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a&amp;#43;b;\n} \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;sub&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a-b;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;muti&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a*b;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;div&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a/b;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;mod&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a%b;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,b,c;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; op;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入表达式,按enter执行&amp;#xff0c;例如 1&amp;#43;2 &amp;#xff1a;&amp;#34;&lt;/span&gt;); \n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%c%d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;op,&amp;amp;b);\n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt;(op){\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n            c&amp;#61;&lt;span class=\"hljs-built_in\"&gt;add&lt;/span&gt;(a,b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n            c&amp;#61;&lt;span class=\"hljs-built_in\"&gt;sub&lt;/span&gt;(a,b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n            c&amp;#61;&lt;span class=\"hljs-built_in\"&gt;muti&lt;/span&gt;(a,b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n            c&amp;#61;&lt;span class=\"hljs-built_in\"&gt;div&lt;/span&gt;(a,b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;:\n            c&amp;#61;&lt;span class=\"hljs-built_in\"&gt;mod&lt;/span&gt;(a,b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;不支持该操作%c&amp;#34;&lt;/span&gt;,op);     \n    }     \n     &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%c%d&amp;#61;%d\\n&amp;#34;&lt;/span&gt;,a,op,b,c); \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/155518630356115.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["这个c语言该怎么解答呢", ["一、使用两种方法编写一个简单的计算器程序，该计算器程序能实现两个数的加法、减法、乘法、除法和取余等基本的算术运算。1.方法1：根据输入的两个整型操作数和运算符可以完成 + 、—、* 、/ 、% 运算，输出结果必须是一个完整的算术运算式的格式。例如 ：输入3+5，输出结果是 3+5=8。（要求使用switch语句）", "2.方法2：根据输入两个整型操作数和运算符可以完成 + 、—、* 、/ 、% 运算。具体运算过程要求是通过调用对应的子函数来实现。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你题目的解答代码如下&amp;#xff1a;&amp;#xff08;如有帮助&amp;#xff0c;望采纳&amp;#xff01;谢谢! 点击我这个回答右上方的&lt;strong&gt;【采纳】&lt;/strong&gt;按钮&amp;#xff09;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a, b;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; op, f;\n    &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt;\n    {\n\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf%1s%lf&amp;#34;&lt;/span&gt;, &amp;amp;a, &amp;amp;op, &amp;amp;b);\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (op)\n        {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf &amp;#43; %lf &amp;#61; %lf\\n&amp;#34;&lt;/span&gt;, a, b, a &amp;#43; b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf - %lf &amp;#61; %lf\\n&amp;#34;&lt;/span&gt;, a, b, a - b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf * %lf &amp;#61; %lf\\n&amp;#34;&lt;/span&gt;, a, b, a * b);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;fabs&lt;/span&gt;(b) &amp;gt; &lt;span class=\"hljs-number\"&gt;1e-20&lt;/span&gt;)\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf / %lf &amp;#61; %lf\\n&amp;#34;&lt;/span&gt;, a, b, a / b);\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;除数不能是内容0! \\n&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Do you want to continueY/N y/n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%1s&amp;#34;&lt;/span&gt;, &amp;amp;f);\n    } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (f&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt; || f&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/685940026336167.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["c++编辑计算器，求解答", ["要求用switch语句编程设计一个简单的计算器程序。要求根据用户从键盘输入的表达式。操作数1 运算符op 操作数2计算表达式的值。指定的算术运算符为加()、减(-)、乘(*)、除(/)。在此基础上，增加如下要求(1)如果要求程序能进行浮点数运算，程序应该如何修改如何比较实型变量和常数0是否相等(2)如果要求输入的算术表达式中的操作数和运算符之间可以加入任意多个空格符，那么程序如何修改(3)如果要求连续多次算术运算，每次运算结束后，程序都给出提示 Do you want to continueY/N y/n如果用户输入Y或y时，程序继续进行其它算术运算，否则程序才退出运行状态"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Akama Razor tells me, that you don't need to use GO code here. \nit's much better to use JS in such situation. &lt;/p&gt;\n\n&lt;p&gt;Good luck! &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=\"snippet\" data-lang=\"js\" data-hide=\"false\"&gt;\r\n&lt;div class=\"snippet-code\"&gt;\r\n&lt;pre class=\"snippet-code-js lang-js prettyprint-override\"&gt;&lt;code&gt;s = document.getElementsByTagName('td');\r\n\r\nfor (i = 0; i &amp;lt; s.length; i++) {\r\n  if (parseInt(s[i].innerText) &amp;gt; 123) {\r\n    s[i].style = 'color:red';\r\n  }\r\n}&lt;/code&gt;&lt;/pre&gt;\r\n&lt;pre class=\"snippet-code-html lang-html prettyprint-override\"&gt;&lt;code&gt;&amp;lt;head lang=\"en\"&amp;gt;\r\n  &amp;lt;title&amp;gt;123&amp;lt;/title&amp;gt;\r\n&amp;lt;/head&amp;gt;\r\n\r\n&amp;lt;body&amp;gt;\r\n  &amp;lt;table&amp;gt;\r\n    &amp;lt;tbody&amp;gt;\r\n      &amp;lt;tr&amp;gt;\r\n        &amp;lt;td&amp;gt;123&amp;lt;/td&amp;gt;\r\n        &amp;lt;td&amp;gt;1234&amp;lt;/td&amp;gt;\r\n      &amp;lt;/tr&amp;gt;\r\n    &amp;lt;/tbody&amp;gt;\r\n  &amp;lt;/table&amp;gt;\r\n  &amp;lt;script&amp;gt;\r\n    s = document.getElementsByTagName('td');\r\n    for (i = 0; i &amp;lt; s.length; i++) {\r\n      if (parseInt(s[i].innerText) &amp;gt; 123) {\r\n        s[i].color = '#fff';\r\n      }\r\n    }\r\n  &amp;lt;/script&amp;gt;\r\n&amp;lt;/body&amp;gt;&lt;/code&gt;&lt;/pre&gt;\r\n&lt;/div&gt;\r\n&lt;/div&gt;\r\n\n    &lt;/div&gt;", "Konwledge_Point": "算术运算", "Question": ["如何在Golang HTML模板中使用算术运算符", ["\n\n", "I want to compare field 'FileSize' in my html go temple with variable 'minsize' in my code (.FileSize < *minsize). I have no idea how to do it. See below", "\n\n", "{{ if lt .FileSize *minsize }}\n<td style=\"color:red;\">{{.FileSize}}</td>\n{{else}}\n<td>{{.FileSize}}</td>\n{{end}}\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;random&lt;/span&gt;\n\nexp_s &amp;#61; {}\nsym &amp;#61; [&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#43;&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;*&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;//&amp;#34;&lt;/span&gt;]\nanswers &amp;#61; []\npercent &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n\n# 生成算式和結果, 分別作爲鍵/值\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-title function_\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;):\n    &lt;span class=\"hljs-built_in\"&gt;key&lt;/span&gt; &amp;#61; (\n        &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;random&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;randint&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;))\n        &amp;#43; sym[&lt;span class=\"hljs-built_in\"&gt;random&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;randint&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)]\n        &amp;#43; &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;random&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;randint&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;))\n    )\n    exp_s[&lt;span class=\"hljs-built_in\"&gt;key&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-title function_\"&gt;eval&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;key&lt;/span&gt;)\n\n# 獲取答案, 比較結果\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;請作答:&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; k, v in exp_s.&lt;span class=\"hljs-property\"&gt;items&lt;/span&gt;():\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; v &amp;#61;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-title function_\"&gt;input&lt;/span&gt;(k &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#34;&lt;/span&gt;)):\n        percent &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;\n\n# 輸出分數\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#34;得分:{percent}&amp;#34;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;實測可行, 每一條逐次作答:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/33550057194610.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/376309471946186.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;不足之處: 可以再調整一下取值, 和條件選擇, 避免學力之外的算術題目出現&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["关于python的问题", ["用python编写随机产生10组算术运算题（两个数的任意加减乘除），统计得分（百分制）。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://blog.csdn.net/muzihuaner/article/details/105284427\" id=\"textarea_1633850792706_1633850809192_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;输入两个正整数num1、num2,计算并输出它们的和、差、积、整数商和余数_点滴记忆-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;课本例题/*输入两个正整数num1、num2,计算并输出它们的和、差、积、整数商和余数。*/#include&amp;lt;stdio.h&amp;gt;int main(){    int num1, num2;    printf(&amp;#34;输入两个正整数&amp;#xff1a;\\n&amp;#34;);    scanf_s(&amp;#34;%d%d&amp;#34;,&amp;amp;num1,&amp;amp;num2);    printf(&amp;#34;和为&amp;#xff1a;%d\\n差为&amp;#xff1a;...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/muzihuaner/article/details/105284427&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["输入两个非零的正整数num1和num2，计算并输出它们的和、差、积、商（用实数表示，保留2位小数点", ["【样例输入】", "\n", "5 3", "【样例输出】", "\n", "5+3=8", "5-3=2", "5*3=15", "5/3=1.67", "5%3=2", "【样例说明】", "\n", "根据输入的5和3来进行算术运算，并给出相应结果。注意商的精度要求。", "\n", "【数据用例与规模】", "\n", "num1和num2为非零的正整数，均不超过10000。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main() {\n &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a,b,c;\n char s[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;];\n scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;b);\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n请选择&amp;#xff1a;\\n\n&amp;#43;&amp;#xff1a;两个数相加\\n\n-&amp;#xff1a;两个数相减\\n\n*&amp;#xff1a;两个数相乘\\n\n/&amp;#xff1a;两个数相除\\n\n%&amp;#xff1a;两个数取模\\n\nZ&amp;#xff1a;退出系统\\n&amp;#34;&lt;/span&gt;);\nrewind(stdin);\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%1s&amp;#34;&lt;/span&gt;,s);\n c&amp;#61;s[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n switch (c) {\n case &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,a&amp;#43;b);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n case &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,a-b);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n case &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,a*b);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n case &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Can not a/b for b equals 0&amp;#34;&lt;/span&gt;); &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,a/b);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n case &lt;span class=\"hljs-string\"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Can not a%b for b equals 0&amp;#34;&lt;/span&gt;); &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,a%b);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n }\n}\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["这个程序用C语言怎么写", ["输入2个整数，根据自做的操作菜单选项", "，实现对应的算术运算，并输出结果。", "口用while语句实现。口示例：", "请选择：", "+：两个数相加", "-：两个数相减", "*：两个数相乘 910101", "/：两个数相除", "%：两个数取模", "Z：退出系统"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;scanf(&amp;#34;%f %c%f&amp;#34;,&amp;amp;a1,&amp;amp;op,&amp;amp;a2);后面加一句getchar();来接收回车符&amp;#xff0c;否则会影响scanf(&amp;#34;%c&amp;#34;,&amp;amp;a)的读取。&lt;br /&gt;scanf(&amp;#34;%c&amp;#34;,&amp;amp;a);后面也加一句getchar();&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["我问一下为什么我的代码循环不了，只能循环一次就出来了", ["用switch语句编程设计一个简单的计算器程序，要求根据用户从键盘输入的表达式：", "操作数1  运算符op  操作数2", "计算表达式的值，指定的算术运算符为加（+）、减（-）、乘（*）、除（/）。", "\n", "要求如下：", "（1）要求程序能进行浮点数的算术运算，操作数1和2用float类型定义，运算符op用字符型定义。", "（2）要求输入的算术表达式中的操作数和运算符之间可以加入任意多个空白符", " 输入提示信息：\"Please enter the expression:\\n\"", " 输入数据格式：\"%f %c%f\"", " 输出数据格式：以加运算为例：\"%f+ %f = %f\\n\"", "（3）要求连续做多次算术运算，每次运算结束后，程序都给出提示：", "         Do you want to continue(Y/N or y/n)?", "        用户输入Y或y时，程序继续进行其他算术运算；否则程序退出运行状态。", "        输入提示信息：\"Do you want to continue(Y/N or y/n)?\"", "        输入数据格式：\" %c\"", "（4）如果输入错误的运算符，则输出\"Unknown operator!\\n\"，不结束程序运行，继续询问是否做下一次运算。", "(5)如果除数为0，则输出\"Division by zero!\\n\"，不结束程序运行，继续询问是否做下一次运算。", "(6)允许浮点数的误差在1e-7范围内。", "提示：请直接拷贝粘贴题目中给定的格式字符串。", "\n", "#include<stdio.h>", "int main()", "{", "    float a1,a2,b1;", "    char op,a;", "    a='y';", "\n", "while", "(a==", "'y'", "||a==", "'Y'", ")\n{\n    printf(\"Please enter the expression:\\n\");\n    scanf(\"%f %c%f\",&a1,&op,&a2);\n    switch(op)\n    {\n        cas", "e'+'", ":b1=a1+a2;printf(\"%f + %f = %f\\n\",a1,a2,b1);break;\n        cas", "e'-'", ":b1=a1-a2;printf(\"%f - %f = %f\\n\",a1,a2,b1);break;\n        cas", "e'*'", ":b1=a1*a2;printf(\"%f * %f = %f\\n\",a1,a2,b1);break;\n        cas", "e'/'", ":", "if", "(a2==", "0", ")\n               {\n                   printf(\"Division by zero!\\n\");\n                   break;\n               }\n               b1=a1/a2;\n               printf(\"%f / %f = %f\\n\",a1,a2,b1);\n               break;\n        ", "default", ":printf(\"Unknown operator!\\n\");break;      \n    }\n    \n    printf(\"Do you want to continue(Y/N or y/n)?\");\n    scanf(\"%c\",&a);\n}\n", "return", " ", "0", ";\n", "\n", "}", "\n", "\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;没毛病。&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["Java负数补码问题位运算算术右移？", ["-4>>1 有符号右移一位 为-2", "在Java中int值为32位也就是说", "-4原码为：1000 0000 0000 0100", "  反码为： 1111 1111 1111 1011", "  补码为： 1111 1111 1111 1100", "算术右移一位：1111 1111 1111 1110", "  反码为：1000 0000 0000 0001", "  补码为：1000 0000 0000 0010", "十进制为：-2", "\n", "请问我的计算对着不？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;我可以做&amp;#xff0c;有需要可联系。&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["java 最好可以加微信联系", ["1.定义复数类Complex，实现以下功能：", "  (1)构造函数", "  (2)加减乘除取模等函数", "  (3)toString()函数", "  (4)equals()函数", "  (5)编写测试类，实现键盘读取数据创建复数对象，并测试Complex类定义的函数", "2.读取一个文本文件，并对某个特定字符计数。", "  (1)键盘输入要读取的文件名", "  (2)键盘输入要计数的字符", "  (3)读取文件并对字符计数，输出特定字符的计数结果", "3.定义一个GUI程序，实现简易的算术运算。", "  (1)定义窗口类，Grid布局，第一行输入第一个数据，第二行通过choice选择+-*/，第三行输入第二个数据，第四行按钮，计算和退出", "  (2)定义事件处理程序，实现计算和退出功能(计算结果可以采用System.out.println()输出)", "  (3)定义测试类", "4.定义服务器和客户端程序，实现如下功能：", "  (1)服务器为多线程程序，提供文件下载功能。", "  (2)客户端发送一个完整的文件路径，然后读取服务器返回文件数据。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;修改如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;typeinfo&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;iomanip&amp;gt;&lt;/span&gt;\nusing namespace std;\nint main()\n{   \n    double a,b;\n    char ys;\n    cin&amp;gt;&amp;gt;a&amp;gt;&amp;gt;b&amp;gt;&amp;gt;ys;\n    switch(ys)\n    {  \n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-symbol\"&gt;:cout&amp;lt;&amp;lt;a&amp;lt;&amp;lt;ys&amp;lt;&amp;lt;b&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;a&amp;#43;b&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-symbol\"&gt;:cout&amp;lt;&amp;lt;a&amp;lt;&amp;lt;ys&amp;lt;&amp;lt;b&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;a-b&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-symbol\"&gt;:cout&amp;lt;&amp;lt;a&amp;lt;&amp;lt;ys&amp;lt;&amp;lt;b&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;a*b&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(b&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;除数不能为0&amp;#34;&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; \n                cout&amp;lt;&amp;lt;a&amp;lt;&amp;lt;ys&amp;lt;&amp;lt;b&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;a/b;\n        }\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;:\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a &amp;#61;&amp;#61; (int)a &amp;amp;&amp;amp; b &amp;#61;&amp;#61; (int)b)\n                cout&amp;lt;&amp;lt;a&amp;lt;&amp;lt;ys&amp;lt;&amp;lt;b&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;(int)a&lt;span class=\"hljs-string\"&gt;%(int)&lt;/span&gt;b;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; \n                cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;error&amp;#34;&lt;/span&gt;;\n        }\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["大一新生C++，程序错误百出，但是不知道哪里错了", ["设计一个简单的计算器程序，根据输入的操作数和运算符可以完成 + 、—、* 、/ 、% 运算。输出结果必须是一个完整的算术运算式的格式。例如 ：输入3.1  5 + ，输出结果是 3.1+5=8.1。", "\n", "注意：当输入的运算符是\"/\"且第二个操作数是0时，输出“除数不能为0”", "\n", "  当输入的运算符是", "\"%\"", "且操作数中含有小数(如", "6.5", ")时，输出“", "error", "!”。\n", "\n", "输入格式:", "\n", "按顺序依次输入两操作数和运算符。如3 5 /", "\n", "请nice person能仔细讲讲哪里错了，为什么错了，万分感谢！", "Q：switch中每个case 语句中想执行多个语句", "     想要输入运算符，并且在case的常量设为运算符进行匹配", "    想要判断该数是否为整数", "\n", "#include <iostream>", "\n", "#include<typeinfo>", "\n", "#include<iomanip>", "\nusing namespace std;\n\nint main()\n{   double a,b;\nchar ys;\n    cin>>a>>b>>ys;\n    switch(ys)\n   {  ", "case", " +", ":cout<<a<<", "\"ys\"", "<<b<<", "\"=\"", "<<a+b", ";", "break", ";\n      ", "case", " -", ":cout<<a<<", "\"ys\"", "<<b<<", "\"=\"", "<<a-b", ";", "break", ";\n      ", "case", " *", ":cout<<a<<", "\"ys\"", "<<b<<", "\"=\"", "<<a*b", ";", "break", ";\n      ", "case", " /", ":if", "(b==", "0", ")\n             cout<<", "\"除数不能为0\"", ";\n            ", "else", " cout<<a<<", "\"ys\"", "<<b<<", "\"=\"", "<<a/b;\n            ", "break", ";\n\n    ", "case", " % ", ":if", "(typeid(a).name()==", "\"int\"", "&& typeid(b).name()==", "\"int\"", " )\n    cout<<a<<", "\"ys\"", "<<b<<", "\"=\"", "<<a%b;\n    ", "else", " cout<<", "\"error\"", ";\n    ", "break", ";}\n    ", "return", " ", "0", ";\n}\n\n\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt; &lt;span class=\"hljs-comment\"&gt;// 用于生成随机数&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;ctime&amp;gt;&lt;/span&gt;   &lt;span class=\"hljs-comment\"&gt;// 用于获取当前时间&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-comment\"&gt;// 定义函数: 单项加法练习&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;additionExercise&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要练习的加法题数: &amp;#34;&lt;/span&gt;;\n    cin &amp;gt;&amp;gt; n;\n\n    &lt;span class=\"hljs-comment\"&gt;// 随机生成 n 道加法题&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; correct &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;     &lt;span class=\"hljs-comment\"&gt;// 统计学生回答正确的题数&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; score &amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; / n; &lt;span class=\"hljs-comment\"&gt;// 计算每道题的分数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;() % &lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 生成 [0, 20] 之间的随机数 a&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b &amp;#61; &lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;() % &lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 生成 [0, 20] 之间的随机数 b&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c &amp;#61; a &amp;#43; b;       &lt;span class=\"hljs-comment\"&gt;// 计算正确答案&lt;/span&gt;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;第&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;题: &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#43; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#61; &amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; answer;\n        cin &amp;gt;&amp;gt; answer;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (answer &amp;#61;&amp;#61; c)\n        {\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;回答正确!&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n            correct&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;回答错误。正确答案是: &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; endl;\n        }\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 输出最终成绩&lt;/span&gt;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;本次练习的分数是: &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; correct * score &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;分&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n}\n\n&lt;span class=\"hljs-comment\"&gt;// 定义函数: 单项减法练习&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;subtractionExercise&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要练习的减法题数: &amp;#34;&lt;/span&gt;;\n    cin &amp;gt;&amp;gt; n;\n\n    &lt;span class=\"hljs-comment\"&gt;// 随机生成 n 道减法题&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; correct &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;     &lt;span class=\"hljs-comment\"&gt;// 统计学生回答正确的题数&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; score &amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; / n; &lt;span class=\"hljs-comment\"&gt;// 计算每道题的分数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, b;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;请输入第&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;题的被减数和减数: &amp;#34;&lt;/span&gt;;\n        cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;gt;&amp;#61; b)\n        {\n            c &amp;#61; a - b; &lt;span class=\"hljs-comment\"&gt;// 计算正确答案&lt;/span&gt;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            c &amp;#61; b - a; &lt;span class=\"hljs-comment\"&gt;// 计算正确答案&lt;/span&gt;\n        }\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;第&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;题: &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; - &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#61; &amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; answer;\n        cin &amp;gt;&amp;gt; answer;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (answer &amp;#61;&amp;#61; c)\n        {\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;回答正确!&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n            correct&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;回答错误。正确答案是: &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; endl;\n        }\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 输出最终成绩&lt;/span&gt;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;本次练习的分数是: &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; correct * score &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;分&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n}\n\n&lt;span class=\"hljs-comment\"&gt;// 定义函数: 加减混合练习&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;mixedExercise&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;请输入要练习的加减混合题数: &amp;#34;&lt;/span&gt;;\n    cin &amp;gt;&amp;gt; n;\n\n    &lt;span class=\"hljs-comment\"&gt;// 随机生成 n 道加减混合题&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; correct &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;     &lt;span class=\"hljs-comment\"&gt;// 统计学生回答正确的题数&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; score &amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; / n; &lt;span class=\"hljs-comment\"&gt;// 计算每道题的分数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;() % &lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 生成 [0, 20] 之间的随机数 a&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b &amp;#61; &lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;() % &lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 生成 [0, 20] 之间的随机数 b&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;() % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        { &lt;span class=\"hljs-comment\"&gt;// 随机生成 0 或 1&amp;#xff0c;决定是加法还是减法&lt;/span&gt;\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;第&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;题: &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#43; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#61; &amp;#34;&lt;/span&gt;;\n            c &amp;#61; a &amp;#43; b; &lt;span class=\"hljs-comment\"&gt;// 计算正确答案&lt;/span&gt;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;第&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;题: &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; - &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#61; &amp;#34;&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;gt;&amp;#61; b)\n            {\n                c &amp;#61; a - b; &lt;span class=\"hljs-comment\"&gt;// 计算正确答案&lt;/span&gt;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            {\n                c &amp;#61; b - a; &lt;span class=\"hljs-comment\"&gt;// 计算正确答案&lt;/span&gt;\n            }\n        }\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; answer;\n        cin &amp;gt;&amp;gt; answer;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (answer &amp;#61;&amp;#61; c)\n        {\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;回答正确!&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n            correct&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;回答错误。正确答案是: &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; endl;\n        }\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 输出最终成绩&lt;/span&gt;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;本次练习的分数是: &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; correct * score &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;分&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;// 初始化随机数生成器&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;srand&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;(&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;));\n\n    &lt;span class=\"hljs-comment\"&gt;// 显示主菜单&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;)\n    {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;小学生算术运算练习系统&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;1. 单项加法练习&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;2. 单项减法练习&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;3. 加减混合练习&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;4. 退出系统&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;请输入菜单选项: &amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; option;\n        cin &amp;gt;&amp;gt; option;\n\n        &lt;span class=\"hljs-comment\"&gt;// 根据用户的输入执行相应的功能&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (option &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;additionExercise&lt;/span&gt;();\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (option &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;subtractionExercise&lt;/span&gt;();\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (option &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;mixedExercise&lt;/span&gt;();\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (option &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;输入无效。请重新输入。&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        }\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["c++ 小学生算术练习系统", ["小学生算术练习系统", "包括：", "菜单", "单项加法运算", "单项减法运算", "混合运算", "退出系统", "\n", "要求利用函数  写单项减法运算和退出系统", "有偿～比较hurry！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;sc.nextInt()应该放在“你的答案是&amp;#xff1a;”这句输出的后面&amp;#xff1b;另外random.nextInt(4)&amp;#xff0c;是随机 0-3的数字。&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["请问这个哪里错了呢？系统没有报错，但是一直运行不出来", ["//任务需求：完成自动出题、判分程序：执行程序，系统自动显示试题", "//（两个数的算术运算即可），", "//并提示用户输入答案，待用户输入答案后，系统给出答案的判分结果。", "提示：", "1、随机数的产生：", "Random ran = new Random();  //定义Random类的对ran", "x=ran.nextInt(10);  //产生一个0-9之间 的随机数", "2、加减乘除运算符号的产生：先生成一个随机数，而后和加减乘除符号相匹配。", "3、什么时候得到标准答案，如何判断对错。", "//", "\n", "package 第二周实验题目;", "import java.util.Random;", "import java.util.Scanner;", "public class exercise {", "\n", "public static void main(String", "[]", " args) {\n    ", "// TODO Auto-generated method stub", "\n    Random r=", "new", " ", "Random()", ";\n    ", "int", " number1=r.next", "Int(10)", ";\n    ", "int", " number2=r.next", "Int(10)", ";\n    ", "int", " code=r.next", "Int(4)", ";\n    Scanner sc=", "new", " ", "Scanner(System.", "in", ")", ";\n    ", "int", " answer=sc.next", "Int()", ";\n    ", "//double answer2=sc.nextInt();", "\n    switch(code) {\n    case ", "1", ":\n        ", "System", ".", "out.println(", "\"你抽到的题目为：\\n\"", ");\n        ", "System", ".", "out.printf(", "\"%d+%d=?\"", ",number1+number2);\n        ", "System", ".", "out.println(", "\"你的答案是：\"", ");\n        ", "if", "(answer==number1+number2) {\n            ", "System", ".", "out.println(", "\"恭喜你答对了，你将获得10分\"", ");\n        }", "else", " {\n            ", "System", ".", "out.println(", "\"答错了，你将获得0分\"", ");\n            ", "//score=0;", "\n        }\n        break;\n    case ", "2", ":\n        ", "System", ".", "out.println(", "\"你抽到的题目为：\\n\"", ");\n        ", "System", ".", "out.printf(", "\"%d-%d=?\"", ",number1-number2);\n        ", "System", ".", "out.println(", "\"你的答案是：\"", ");\n        ", "if", "(answer==number1-number2) {\n            ", "System", ".", "out.println(", "\"恭喜你答对了，你将获得10分\"", ");\n        ", "//    score=10;", "\n        }", "else", " {\n            ", "System", ".", "out.println(", "\"答错了，你将获得0分\"", ");\n        ", "//    score=0;", "\n        }\n        break;\n    case ", "3", ":\n        ", "System", ".", "out.println(", "\"你抽到的题目为：\\n\"", ");\n        ", "System", ".", "out.printf(", "\"%d*%d=?\"", ",number1*number2);\n        ", "System", ".", "out.println(", "\"你的答案是：\"", ");\n        ", "if", "(answer==number1*number2) {\n            ", "System", ".", "out.println(", "\"恭喜你答对了，你将获得10分\"", ");\n            ", "//score=10;", "\n        }", "else", " {\n            ", "System", ".", "out.println(", "\"答错了，你将获得0分\"", ");\n            ", "//score=0;", "\n        }\n        break;\n    case ", "4", ":\n        ", "System", ".", "out.println(", "\"你抽到的题目为：\\n\"", ");\n        ", "System", ".", "out.printf(", "\"%d/%d=?\"", ",number1/number2);\n        ", "System", ".", "out.println(", "\"你的答案是：\"", ");\n        ", "if", "( answer–", "1.0", "*number1/number2＜", "0.001", ") {\n            ", "System", ".", "out.println(", "\"恭喜你答对了，你将获得10分\"", ");\n            ", "//score=10;", "\n        }", "else", " {\n            ", "System", ".", "out.println(", "\"答错了，你将获得0分\"", ");\n            ", "//score=0;", "\n        }\n        break;\n    }\n    sc.close", "()", ";\n    \n}\n", "\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;找些书先看看不好么&amp;#xff0c;这是敲几行文字就能说清楚的么&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["关于 C++  、算术与 的问题。", ["算术与是怎么算的，符号是什么，如何用C++实现，有什么运算规则，和它类似的运算有什么？", "希望有 大_佬 解救。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;基本正确&amp;#xff0c;但是你可以简化记忆&lt;br /&gt;负数的表示形式是&amp;#xff0c;最高位二进制1&lt;br /&gt;其余为补码&amp;#xff0c;也就是绝对值取反&amp;#43;1&lt;br /&gt;所以你向左向右移动&amp;#xff0c;再转换成十进制&amp;#xff0c;就容易理解了。不要强行记忆。&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["java的<<和>>，算术左移和算术右移", ["刚学java没多久，希望大家帮我看看，我这个笔记对不对？", "\n", "总结，在不溢出的情况下，整数的位运算情况如下(未验证)：", "1.算术左移n位相当于乘2^n", "\n", "2.正整数的算术右移n位，相当于除以2^n，", "m>>n 的结果和 m/2^n 的结果相同", "如 -9>>2 的结果 和 -9/2^2 的结果都为2", "\n", "3.负整数的算术右移n位，跟正整数不同", "若 m除以2^n 的余数为0的时候，也相当于除以2^n，m>>n 的结果和 m/2^n 的结果相同", "若 m除以2^n 的余数不为0的时候，m>>n 的结果应该 为 m/2^n - 1", "如 -9>>2 的结果为-3  但是 -9/2^2 的结果为-2\n        "]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;pragma&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;warning&lt;/span&gt;(disable:4996)&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fac&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;fac&lt;/span&gt;(i))\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;密码正确&amp;#xff0c;登入系统\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;密码错误&amp;#xff0c;退出系统\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fac&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; password[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; };\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入密码&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, password);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(password, &lt;span class=\"hljs-string\"&gt;&amp;#34;123456&amp;#34;&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, i);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你的for语句有问题&lt;br /&gt;然后逻辑也不能把for循环放到判断 是否正确的函数里。&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["C语言设计一个密码输入与处理函数，判断输入密码是否正确，若正确返回1，若连续三次输入不正确则系统退出，返回0。通过主函数调用，显示输入密码情况", ["#include<stdio.h>", "#include<string.h>", "int fac(int i);", "int main()", "{", "    int i;", "    if(fac(i))", "    printf(\"密码正确，登入系统\\n\");", "    else", "    printf(\"密码错误，退出系统\\n\");", "    return 0;", "}", "\n", "int fac(int i)", "{", "    char password[10]={0};", "    printf(\"请输入密码：\\n\");", "    for(i=0;i<3;i++);", "    scanf(\"%s\",password);", "    if(strcmp(password,\"123456\")==0)", "    {", "        return 1;", "    }", "    else", "    {printf(\"%d\\n\",i);", "        return 0 ;", "    }", " }", "请各位帮我看看哪里有问题，运行以后只能输入一次密码"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;if判断就行&amp;#xff0c;如果是星号 那就 代码计算3乘4&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,c&amp;#61;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;\n   &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; b&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;;\n   &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(b&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;){\n       &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d*%d&amp;#61;%d&amp;#34;&lt;/span&gt;,a,c,a*c);\n   }\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["c语言变量表示运算式", ["问题遇到的现象和发生背景", "\n", "各位我举个例子，a c 都是整数，b是四则运算的算术符号，例如：a=3，c=4，b=‘*',怎么用a b c表示3*4呢？感谢回答 ~", "\n", "用代码块功能插入代码，请勿粘贴截图"]], "Tag": "程序设计"}
{"Answer": "浮点数运算有些时候回丢失经度，最好Math.Round下保留二位小数\r\n\r\njs是number.toFixed(保留的小数位)", "Konwledge_Point": "算术运算", "Question": ["java遇到个算术运算符的问题求指点", ["System.out.println(10 / 3.0); ", "\n这行代码输出的是3.3333333333333335", "\n我知道有两个知识点：", "\n1.整数和小数进行运算的时候，整数的类型自动提升为double类型，两个double类型进行相除运算，结果得到小数（也就是3.3333333333333335），即10先自动提升为double类型，再和3.0进行除法运算", "\n2./获取的是除法操作的商，%获取的是除法操作的余数", "\n而我的问题是：这行代码怎么算到是3.3333333333333335？", "\n不知道这么想对不对：按照我们平时的计算法则，10除以3的商是3，余数是1，但是10变成double和同样是double类型的3.0进行除法运算就涉及到二进制除法了，先把double这个8字节的数据类型展开成32个二进制位，然后进行二进制的除法计算得到补码，然后补码倒推出源码，把商提取出来"]], "Tag": "程序设计"}
{"Answer": "# 以正则的方式切割字符串例: /|\\d+[+-*//]+/d|/(正则不一定对差不多是这样的)\r\n# 可以得到数组·［\"|10-13|\",\"+\",\"|23-20|\"］\r\n错误检测可以检查是否有|\\/d+| 或者||d+\\|\r\n当然还会有别的问题需要一一解决", "Konwledge_Point": "算术运算", "Question": ["java解析字符串 算术表达式求值", ["请教CSDN各大神 String字符串\"|A-B|+|C-D|\" 是一个绝对值运算的表达式，我通过替换 A=10,B=13,C=23,D=20得到 “|10-13|+|23-20|”字符串", "\n我怎么在java中解析？获取结果 6？Java中ScriptEngine  支持加减乘除，但不支持|绝对值表达式", "\n不要说通过字符串分割，如果遇到 \"|A-|B-C|+A|> 11\"这种通过上面替换希望返回的结果为 false，这又该怎么解析？ "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt; scanf(&amp;#34;%d&amp;#34;,&amp;amp;c);&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["请教一下这个C语言的链栈运算的实现为什么不能运行？", ["\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<stdlib.h>", "\n", "#", "include", "<string.h>", "\n\n", "#", "define", " OK 1", "\n", "#", "define", " ERROR 0", "\n", "#", "define", " OVERLOW  -2", "\n", "const", " ", "char", " oper[", "7", "] = {", "'+'", " , ", "'-'", " , ", "'*'", " , ", "'/'", " , ", "'('", " , ", "')'", ", ", "'#'", ",};\n", "typedef", " ", "char", " SElem;\n", "typedef", " ", "int", " status;\n\n", "typedef", " ", "struct", " ", "Snode", "{\n    ", "int", " data ;\n    ", "struct", " ", "Snode", "* next ;\n}Snode,*LinkStack;\n\n", "status ", "InitStack", " ", "(LinkStack s)", "{", "//链栈的初始化 ", "\n    (s)=", "NULL", ";\n    ", "return", " OK;\n}\n\n", "int", " ", "stackempty", " ", "(LinkStack s)", "//判空 ", "\n", "{\n    ", "if", "(!s)\n    ", "return", " OK;\n    ", "return", " ERROR;\n}\n", "status ", "Push", " ", "(LinkStack *s, SElem e)", "//入栈 ", "\n", "{\n    Snode *p = (LinkStack )", "malloc", "(", "sizeof", "(LinkStack));\n    ", "if", "( !p )\n    {\n        ", "return", " OVERLOW;\n    }\n    p->data = e;\n    p->next = (*s);\n    (*s) = p;\n    ", "return", " OK;\n}\n\n", "status ", "Pop", " ", "(LinkStack *s,SElem *e)", "//弹出栈 ", "\n", "{\n    Snode *p;\n    ", "if", "( !(*s) )\n    ", "return", " ERROR;\n    (*e) = (*s)->data;\n    p = (*s);\n    (*s) = (*s) ->next;\n    ", "free", "(p);\n    ", "return", " OK;\n}\n\n", "status ", "GetTop", "(LinkStack *s)", "//取数据 ", "\n", "{\n    ", "if", "( !(*s) )\n    ", "return", " ERROR;\n    ", "return", " (*s)->data;\n}\n\n", "int", "  ", "In", "( ", "char", " ch)", "//判断ch是否为运算符 ", "\n", "{\n    ", "int", " i;\n    ", "for", "( i = ", "0", " ; i < ", "7", " ; i++ )\n    {\n        ", "if", " ( ch == oper [i] )\n            ", "return", " OK;\n    }\n    ", "return", " ERROR ;\n}\n\n", "char", " ", "Precede", " ", "(", "char", " theta1, ", "char", " theta2)", "//判断运算符优先级 ", "\n", "{\n    ", "if", "((theta1 == ", "'('", " && theta2 == ", "')'", " ) || (theta1 == ", "'#'", " && theta2 ==", "'#'", " ))\n    {\n        ", "return", " ", "'='", " ;\n    }\n    ", "else", " ", "if", " (theta1 == ", "'('", " || theta1 == ", "'#'", " || theta2 == ", "'('", " || (theta1 == ", "'+'", " || theta1 == ", "'-'", " )\n                                                            && (theta2 == ", "'*'", " || theta2 == ", "'/'", " ))\n    {\n        ", "return", " ", "'<'", " ;", "//theta1的运算符优先级小于theta2 ", "\n      }\n    ", "else", " ", "return", " ", "'>'", " ;\n\n}\n\n", "char", " ", "Operate", " ", "(", "char", " first , ", "char", " theta ,", "char", " second)", "//计算两数运算的结果     ", "\n", "{\n    ", "switch", " (theta){\n    ", "case", " ", "'+'", ":\n    ", "return", " (first -", "'0'", ") + (second -", "'0'", ") + ", "48", ";\n    ", "case", " ", "'-'", ":\n    ", "return", " (first -", "'0'", ") - (second -", "'0'", ") + ", "48", ";\n    ", "case", " ", "'*'", ":\n    ", "return", " (first - ", "'0'", ") * (second -", "'0'", ") + ", "48", ";\n    ", "case", " ", "'/'", ":\n    ", "return", " (first -", "'0'", ") / (second -", "'0'", ") + ", "48", ";\n    }\n    ", "return", " ", "0", ";\n}\n\n", "char", " ", "EvaluateExpression", "()", " ", "{", "//算术表达式求值的算符优先算法，设OPTR和OPND分别为运算符栈和操作数栈", "\n    LinkStack OPTR, OPND;", "//POTR寄存运算符，OPND寄存操作数据或运算结果", "\n    ", "char", " ch, theta, a, b, x, top;\n    ", "InitStack", "(OPND); \n    ", "InitStack", "(OPTR); \n    ", "Push", "(&OPTR, ", "'#'", "); ", "//将表达式起始符“#”压入OPTR栈", "\n    ", "scanf", "(", "\"%s\"", ",ch); \n    ", "while", " (ch != ", "'#'", " || (", "GetTop", "(&OPTR) != ", "'#'", ")) ", "//表达式没有扫描完毕或OPTR的栈顶元素不为“#”", "\n    {\n        ", "if", " (!", "In", "(ch)) {\n            ", "Push", "(&OPND, ch);\n            ", "scanf", "(", "\"%s\"", ",ch);\n        } ", "//ch不是运算符则进OPND栈", "\n        ", "else", "\n            ", "switch", " (", "Precede", "(", "GetTop", "(&OPTR), ch)) ", "//比较OPTR的栈顶元素和ch的优先级", "\n            {\n            ", "case", " ", "'<'", ":\n            ", "Push", "(&OPTR, ch);\n            ", "scanf", "(", "\"%s\"", ",ch); ", "//当前字符ch压入OPTR栈，读入下一字符ch", "\n            ", "break", ";\n            ", "case", " ", "'>'", ":\n            ", "Pop", "(&OPTR, &theta); ", "//弹出OPTR栈顶的运算符", "\n            ", "Pop", "(&OPND, &b);\n            ", "Pop", "(&OPND, &a); ", "//弹出OPND栈顶的两个运算数", "\n            ", "Push", "(&OPND, ", "Operate", "(a, theta, b)); ", "//将运算结果压入OPND栈", "\n            ", "break", ";\n            ", "case", " ", "'='", ": ", "//OPTR的栈顶元素是“(”且ch是“)”", "\n            ", "Pop", "(&OPTR, &x);\n            ", "scanf", "(", "\"%s\"", ",ch); ", "//弹出OPTR栈顶的“(”，读入下一字符ch", "\n            ", "break", ";\n        } \n}\n        ", "return", " ", "GetTop", "(&OPND); ", "//OPND栈顶元素即为表达式求值结果", "\n}\n\n\n", "int", " ", "menu", "()", " ", "{\n    ", "int", " c;\n    ", "printf", "(", "\"0-9以内的多项式计算\\n\"", ");\n    ", "printf", "(", "\"1.计算\\n\"", ");\n    ", "printf", "(", "\"0.退出\\n\"", ");\n    ", "printf", "(", "\"选择：\\n\"", ");\n    ", "scanf", "(", "\"%d\"", ",&c);\n    ", "return", " c;\n}\n\n", "int", " ", "main", "()", " ", "{\n    ", "while", " (", "1", ") {\n        ", "switch", " (", "menu", "()) {\n        ", "case", " ", "1", ": {\n            ", "printf", "(", "\"请输入要计算的表达式（操作数和结果都在0-9的范围内，以#结束）：\\n\"", ");\n            ", "char", " res = ", "EvaluateExpression", "();", "//算法3.22　表达式求值", "\n            ", "printf", "(", "\"计算结果为：%d\\n\"", ",(res", "-48", "));\n        }\n            ", "break", ";\n        ", "case", " ", "0", ":\n            ", "printf", "(", "\"退出成功\\n\"", ");\n            ", "exit", "(", "0", ");\n        ", "default", ":\n            ", "break", ";\n        }\n    }\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&amp;#43;&amp;#43;a使a在参与运算前先自加了1,然后a&amp;#43;&amp;#43;使&amp;#43;&amp;#43;a得到的结果13在参与运算之后自加1,所以你最后的a才得到了14,如果看不懂的话还请见谅,毕竟我也是才学不久的小萌新,如果有帮到你的话就好了&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["刚刚学习js,上课没跟上，学到算术运算符，关于document.write(\"a=\"+(a)+\"<br />\")为什么等于14", ["a=12,但是document.write(\"a=\"+(a)+\"", "\")运算结果等于a=14"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;因为每次输入都有个换行&amp;#xff0c;所以要把这个换行接收了&amp;#xff0c;不然影响后续的输入&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;time.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a,b,result,input,i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    char op;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;srand&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;time&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;));\n        a&amp;#61;&lt;span class=\"hljs-keyword\"&gt;rand&lt;/span&gt;()%100;\n        b&amp;#61;&lt;span class=\"hljs-keyword\"&gt;rand&lt;/span&gt;()%100;\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入算术运算的运算符(&amp;#43;、-、*、/)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;,&amp;amp;op);\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(op!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;op!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;op!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&amp;amp;&amp;amp;op!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (op!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;) getchar();\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入算术运算的运算符(&amp;#43;、-、*、/)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            op&amp;#61;getchar();\n        }\n        getchar();\n        switch(op)\n        {\n            case&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n                result&amp;#61;a&amp;#43;b;\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#43;%d&amp;#61; &amp;#34;&lt;/span&gt;,a,b);\n                scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;input);\n                i&amp;#43;&amp;#43;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            case&lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n                result&amp;#61;a-b;\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d-%d&amp;#61; &amp;#34;&lt;/span&gt;,a,b);\n                scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;input);\n                i&amp;#43;&amp;#43;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            case&lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n                result&amp;#61;a*b;\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d*%d&amp;#61; &amp;#34;&lt;/span&gt;,a,b);\n                scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;input);\n                i&amp;#43;&amp;#43;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            case&lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(b!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                result&amp;#61;a/b;\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d / %d &amp;#61; &amp;#34;&lt;/span&gt;,a,b);\n                scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;input);\n                i&amp;#43;&amp;#43;;\n            }\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;除数为0&amp;#xff0c;不能进行除法运算\\n&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            default:\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入的运算符不正确&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n        }\n        getchar();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(input&amp;#61;&amp;#61;result)//判断用户输入的结果与计算机计算的结果是否相同\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入答案正确 加油&amp;#xff01;\\n\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入答案错误 加水&amp;#xff01;\\n\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["关于循环四则运算系统的实现", ["代码如下：", "\n", "#include <stdio.h>", "\n", "#include<stdlib.h>", "\n", "#include<time.h>", "\n", "int", " main()\n{\n    ", "int", " a,b,result,input,i=", "0", ";\n    char op;\n    ", "while", "(i<=", "10", ")\n    {\n    ", "srand", "(", "time", "(", "0", "));\n    a=", "rand", "()%100;\n    b=", "rand", "()%100;\n    ", "printf", "(", "\"输入算术运算的运算符(+、-、*、/)：\"", ");\n    scanf(", "\"%c\"", ",&op); \n    ", "if", "(op!=", "'\\n'", ")\n    {\n    switch(op)\n    {\n        case", "'+'", ":\n            result=a+b;\n            ", "printf", "(", "\"%d+%d= \"", ",a,b);\n            scanf(", "\"%d\"", ",&input);\n            i++;\n            ", "break", ";\n        case", "'-'", ":\n            result=a-b;\n            ", "printf", "(", "\"%d-%d= \"", ",a,b);\n            scanf(", "\"%d\"", ",&input);\n            i++;\n            ", "break", ";\n        case", "'*'", ":\n            result=a*b;\n            ", "printf", "(", "\"%d*%d= \"", ",a,b);\n            scanf(", "\"%d\"", ",&input);\n            i++;\n            ", "break", ";\n        case", "'/'", ":\n            ", "if", "(b!=", "0", ")\n        {\n            result=a/b;\n            ", "printf", "(", "\"%d / %d = \"", ",a,b);\n            scanf(", "\"%d\"", ",&input);\n            i++;\n        }\n            ", "else", "\n            ", "printf", "(", "\"除数为0，不能进行除法运算\\n\"", ");\n        ", "break", ";\n        default:\n        ", "printf", "(", "\"输入的运算符不正确！\\n\"", ");\n    }\n    ", "if", "(input==result)//判断用户输入的结果与计算机计算的结果是否相同\n        ", "printf", "(", "\"输入答案正确 加油！\\n\\n\"", ");\n    ", "else", "\n        ", "printf", "(", "\"输入答案错误 加水！\\n\\n\"", ");\n    }\n    ", "else", "\n{\n    ", "while", "(op==", "'\\n'", ")\n    op=getchar();\n}\n    }\n    ", "return", " ", "0", ";\n}\n\n\n", "\n", "运行结果", "想要实现的效果就是当你选择一个运算符后，自动生成一个式子计算，然后如此循环。", "现在的问题就是只能做一次，无法循环。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,b&amp;#61;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#43; %d &amp;#61; %d\\n&amp;#34;&lt;/span&gt;,a,b,a&amp;#43;b);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d - %d &amp;#61; %d\\n&amp;#34;&lt;/span&gt;,a,b,a-b);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d * %d &amp;#61; %d\\n&amp;#34;&lt;/span&gt;,a,b,a*b);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d / %d &amp;#61; %d\\n&amp;#34;&lt;/span&gt;,a,b,a/b);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/961889960836173.jpg\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["printf数值输出  并提交截图", ["定义两个变量a, b，分别初始化为10，4 。", "\n", "用printf 输出它们的和、差、积、商。 提示: 算术运算符为 +，-，*，/", "\n", "输出形式为：\" x op y = z \"   , x, y是两个运算数，op是运算符, z是运算结果。", "\n", "提交源代码与运行结果截图"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;package test;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.Vector;\n\npublic &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Calculator {\n    String str1 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;0&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 运算数1 初值一定为0 为了程序的安全&lt;/span&gt;\n    String str2 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;0&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 运算数2&lt;/span&gt;\n    String signal &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#43;&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 运算符&lt;/span&gt;\n    String result &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 结果&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;// 状态开关&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 开关1 用于选择输入方向 将要写入str2或 str2&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k2 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 开关2 符号键 次数 k2&amp;gt;1说明进行的是2&amp;#43;3-9&amp;#43;8 这样的多符号运算&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k3 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 开关3 str1 是否可以被清0 &amp;#61;&amp;#61;1时可以 !&amp;#61;1时不能被清0&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k4 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 开关4 str2 同上&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; k5 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 开关5 控制小数点可否被录入 &amp;#61;&amp;#61;1时可以 !&amp;#61;1 输入的小数点被丢掉&lt;/span&gt;\n    JButton store; &lt;span class=\"hljs-comment\"&gt;// 寄存器 记录 是否连续按下符号键&lt;/span&gt;\n    &amp;#64;&lt;span class=\"hljs-constructor\"&gt;SuppressWarnings(&lt;span class=\"hljs-string\"&gt;&amp;#34;rawtypes&amp;#34;&lt;/span&gt;)&lt;/span&gt;\n    Vector vt &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Vector(20, 10)&lt;/span&gt;;\n    JFrame frame &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JFrame(&lt;span class=\"hljs-string\"&gt;&amp;#34;404 - 计算器&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JTextField result_TextField &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JTextField(&lt;span class=\"hljs-params\"&gt;result&lt;/span&gt;, 20)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 20列&lt;/span&gt;\n    JButton clear_Button &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;清除&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button0 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;0&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button1 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button2 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;2&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button3 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;3&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button4 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;4&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button5 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;5&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button6 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;6&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button7 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;7&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button8 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;8&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button9 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;9&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button_Dian &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button_jia &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#43;&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button_jian &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button_cheng &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;*&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button_chu &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n    JButton button_dy &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n\n    &lt;span class=\"hljs-constructor\"&gt;Calculator()&lt;/span&gt; {\n        button0.set&lt;span class=\"hljs-constructor\"&gt;Mnemonic(KeyEvent.VK_0)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 等效键&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;// 其它 等效键 略,&lt;/span&gt;\n        result_TextField.set&lt;span class=\"hljs-constructor\"&gt;HorizontalAlignment(JTextField.RIGHT)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 文本框 右对齐&lt;/span&gt;\n        JPanel pan &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JPanel()&lt;/span&gt;;\n        pan.set&lt;span class=\"hljs-constructor\"&gt;Layout(&lt;span class=\"hljs-params\"&gt;new&lt;/span&gt; GridLayout(4, 4, 5, 5)&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;// 四行四列 边距为5像素&lt;/span&gt;\n        pan.add(button7);\n        pan.add(button8);\n        pan.add(button9);\n        pan.add(button_chu);\n        pan.add(button4);\n        pan.add(button5);\n        pan.add(button6);\n        pan.add(button_cheng);\n        pan.add(button1);\n        pan.add(button2);\n        pan.add(button3);\n        pan.add(button_jian);\n        pan.add(button0);\n        pan.add(button_Dian);\n        pan.add(button_dy);\n        pan.add(button_jia);\n        pan.set&lt;span class=\"hljs-constructor\"&gt;Border(BorderFactory.&lt;span class=\"hljs-params\"&gt;createEmptyBorder&lt;/span&gt;(5, 5, 5, 5)&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;// pan对象的边距&lt;/span&gt;\n        JPanel pan2 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JPanel()&lt;/span&gt;;\n        pan2.set&lt;span class=\"hljs-constructor\"&gt;Layout(&lt;span class=\"hljs-params\"&gt;new&lt;/span&gt; BorderLayout()&lt;/span&gt;);\n        pan2.add(result_TextField, BorderLayout.WEST);\n        pan2.add(clear_Button, BorderLayout.EAST);\n        frame.set&lt;span class=\"hljs-constructor\"&gt;Location(300, 200)&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 主窗口 出现在位置&lt;/span&gt;\n        frame.set&lt;span class=\"hljs-constructor\"&gt;Resizable(&lt;span class=\"hljs-params\"&gt;false&lt;/span&gt;)&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 不能调大小&lt;/span&gt;\n        frame.get&lt;span class=\"hljs-constructor\"&gt;ContentPane()&lt;/span&gt;.set&lt;span class=\"hljs-constructor\"&gt;Layout(&lt;span class=\"hljs-params\"&gt;new&lt;/span&gt; BorderLayout()&lt;/span&gt;);\n        frame.get&lt;span class=\"hljs-constructor\"&gt;ContentPane()&lt;/span&gt;.add(pan2, BorderLayout.NORTH);\n        frame.get&lt;span class=\"hljs-constructor\"&gt;ContentPane()&lt;/span&gt;.add(pan, BorderLayout.CENTER);\n        frame.pack&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n        frame.set&lt;span class=\"hljs-constructor\"&gt;Visible(&lt;span class=\"hljs-params\"&gt;true&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-comment\"&gt;// 事件处理 程 序&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;// 数 字 键&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Listener implements ActionListener {\n            &amp;#64;&lt;span class=\"hljs-constructor\"&gt;SuppressWarnings(&lt;span class=\"hljs-string\"&gt;&amp;#34;unchecked&amp;#34;&lt;/span&gt;)&lt;/span&gt;\n            public void action&lt;span class=\"hljs-constructor\"&gt;Performed(ActionEvent &lt;span class=\"hljs-params\"&gt;e&lt;/span&gt;)&lt;/span&gt; {\n                String ss &amp;#61; ((JButton) e.get&lt;span class=\"hljs-constructor\"&gt;Source()&lt;/span&gt;).get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;;\n                store &amp;#61; (JButton) e.get&lt;span class=\"hljs-constructor\"&gt;Source()&lt;/span&gt;;\n                vt.add(store);\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (k1&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (k3&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n                        str1 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;\n                        k5 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 还原开关k5状态&lt;/span&gt;\n                    }\n                    str1 &amp;#61; str1 &amp;#43; ss;\n                    k3 &amp;#61; k3 &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                    result_TextField.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-params\"&gt;str1&lt;/span&gt;)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 显示&lt;/span&gt;\n                } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (k1&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) {\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (k4&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n                        str2 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;\n                        k5 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 还原开关k5状态&lt;/span&gt;\n                    }\n                    str2 &amp;#61; str2 &amp;#43; ss;\n                    k4 &amp;#61; k4 &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                    result_TextField.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-params\"&gt;str2&lt;/span&gt;)&lt;/span&gt;;\n                }\n            }\n        }\n        &lt;span class=\"hljs-comment\"&gt;// 符 号&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Listener_signal implements ActionListener {\n            &amp;#64;&lt;span class=\"hljs-constructor\"&gt;SuppressWarnings(&lt;span class=\"hljs-string\"&gt;&amp;#34;unchecked&amp;#34;&lt;/span&gt;)&lt;/span&gt;\n            public void action&lt;span class=\"hljs-constructor\"&gt;Performed(ActionEvent &lt;span class=\"hljs-params\"&gt;e&lt;/span&gt;)&lt;/span&gt; {\n                String ss2 &amp;#61; ((JButton) e.get&lt;span class=\"hljs-constructor\"&gt;Source()&lt;/span&gt;).get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;;\n                store &amp;#61; (JButton) e.get&lt;span class=\"hljs-constructor\"&gt;Source()&lt;/span&gt;;\n                vt.add(store);\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (k2&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n                    k1 &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 开关 k1 为1时,向数1写 为2时&amp;#xff0c;向数2写&lt;/span&gt;\n                    k5 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                    signal &amp;#61; ss2;\n                    k2 &amp;#61; k2 &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 按符号键的次数&lt;/span&gt;\n                } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n                    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a &amp;#61; vt.size&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n                    JButton c &amp;#61; (JButton) vt.get(a - &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!(c.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.equals(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#43;&amp;#34;&lt;/span&gt;))&lt;span class=\"hljs-operator\"&gt;\n                            &amp;amp;&amp;amp; &lt;/span&gt;!(c.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.equals(&lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt;))&lt;span class=\"hljs-operator\"&gt;\n                            &amp;amp;&amp;amp; &lt;/span&gt;!(c.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.equals(&lt;span class=\"hljs-string\"&gt;&amp;#34;*&amp;#34;&lt;/span&gt;))&lt;span class=\"hljs-operator\"&gt;\n                            &amp;amp;&amp;amp; &lt;/span&gt;!(c.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.equals(&lt;span class=\"hljs-string\"&gt;&amp;#34;/&amp;#34;&lt;/span&gt;))) {\n                        cal&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n                        str1 &amp;#61; result;\n                        k1 &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 开关 k1 为1时,向数1写 为2时&amp;#xff0c;向数2写&lt;/span&gt;\n                        k5 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                        k4 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                        signal &amp;#61; ss2;\n                    }\n                    k2 &amp;#61; k2 &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                }\n            }\n        }\n        &lt;span class=\"hljs-comment\"&gt;// 清除&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Listener_clear implements ActionListener {\n            &amp;#64;&lt;span class=\"hljs-constructor\"&gt;SuppressWarnings(&lt;span class=\"hljs-string\"&gt;&amp;#34;unchecked&amp;#34;&lt;/span&gt;)&lt;/span&gt;\n            public void action&lt;span class=\"hljs-constructor\"&gt;Performed(ActionEvent &lt;span class=\"hljs-params\"&gt;e&lt;/span&gt;)&lt;/span&gt; {\n                store &amp;#61; (JButton) e.get&lt;span class=\"hljs-constructor\"&gt;Source()&lt;/span&gt;;\n                vt.add(store);\n                k5 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                k2 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                k1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                k3 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                k4 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                str1 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;0&amp;#34;&lt;/span&gt;;\n                str2 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;0&amp;#34;&lt;/span&gt;;\n                signal &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;\n                result &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;\n                result_TextField.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-params\"&gt;result&lt;/span&gt;)&lt;/span&gt;;\n                vt.clear&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-comment\"&gt;// 等 于&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Listener_dy implements ActionListener {\n            &amp;#64;&lt;span class=\"hljs-constructor\"&gt;SuppressWarnings(&lt;span class=\"hljs-string\"&gt;&amp;#34;unchecked&amp;#34;&lt;/span&gt;)&lt;/span&gt;\n            public void action&lt;span class=\"hljs-constructor\"&gt;Performed(ActionEvent &lt;span class=\"hljs-params\"&gt;e&lt;/span&gt;)&lt;/span&gt; {\n                store &amp;#61; (JButton) e.get&lt;span class=\"hljs-constructor\"&gt;Source()&lt;/span&gt;;\n                vt.add(store);\n                cal&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n                k1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 还原开关k1状态&lt;/span&gt;\n                &lt;span class=\"hljs-comment\"&gt;// str1&amp;#61;result;&lt;/span&gt;\n                k2 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                k3 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 还原开关k3状态&lt;/span&gt;\n                k4 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 还原开关k4状态&lt;/span&gt;\n                str1 &amp;#61; result; &lt;span class=\"hljs-comment\"&gt;// 为7&amp;#43;5&amp;#61;12 &amp;#43;5&amp;#61;17 这种计算做准备&lt;/span&gt;\n            }\n        }\n        &lt;span class=\"hljs-comment\"&gt;// 小数点&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Listener_xiaos implements ActionListener {\n            &amp;#64;&lt;span class=\"hljs-constructor\"&gt;SuppressWarnings(&lt;span class=\"hljs-string\"&gt;&amp;#34;unchecked&amp;#34;&lt;/span&gt;)&lt;/span&gt;\n            public void action&lt;span class=\"hljs-constructor\"&gt;Performed(ActionEvent &lt;span class=\"hljs-params\"&gt;e&lt;/span&gt;)&lt;/span&gt; {\n                store &amp;#61; (JButton) e.get&lt;span class=\"hljs-constructor\"&gt;Source()&lt;/span&gt;;\n                vt.add(store);\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (k5&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n                    String ss2 &amp;#61; ((JButton) e.get&lt;span class=\"hljs-constructor\"&gt;Source()&lt;/span&gt;).get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;;\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (k1&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n                        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (k3&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n                            str1 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;\n                            k5 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 还原开关k5状态&lt;/span&gt;\n                        }\n                        str1 &amp;#61; str1 &amp;#43; ss2;\n                        k3 &amp;#61; k3 &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                        result_TextField.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-params\"&gt;str1&lt;/span&gt;)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 显示&lt;/span&gt;\n                    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (k1&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) {\n                        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (k4&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n                            str2 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;\n                            k5 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 还原开关k5状态&lt;/span&gt;\n                        }\n                        str2 &amp;#61; str2 &amp;#43; ss2;\n                        k4 &amp;#61; k4 &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                        result_TextField.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-params\"&gt;str2&lt;/span&gt;)&lt;/span&gt;;\n                    }\n                }\n                k5 &amp;#61; k5 &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            }\n        }\n        &lt;span class=\"hljs-comment\"&gt;// 注册 监听器&lt;/span&gt;\n        Listener_dy jt_dy &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Listener_dy()&lt;/span&gt;;\n        Listener jt &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Listener()&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 临听数字键&lt;/span&gt;\n        Listener_signal jt_signal &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Listener_signal()&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 临 听符 号键&lt;/span&gt;\n        Listener_clear jt_c &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Listener_clear()&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 清除键&lt;/span&gt;\n        Listener_xiaos jt_xs &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Listener_xiaos()&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 小数点 键&lt;/span&gt;\n        button7.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt&lt;/span&gt;)&lt;/span&gt;;\n        button8.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt&lt;/span&gt;)&lt;/span&gt;;\n        button9.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt&lt;/span&gt;)&lt;/span&gt;;\n        button_chu.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt_signal&lt;/span&gt;)&lt;/span&gt;;\n        button4.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt&lt;/span&gt;)&lt;/span&gt;;\n        button5.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt&lt;/span&gt;)&lt;/span&gt;;\n        button6.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt&lt;/span&gt;)&lt;/span&gt;;\n        button_cheng.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt_signal&lt;/span&gt;)&lt;/span&gt;;\n        button1.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt&lt;/span&gt;)&lt;/span&gt;;\n        button2.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt&lt;/span&gt;)&lt;/span&gt;;\n        button3.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt&lt;/span&gt;)&lt;/span&gt;;\n        button_jian.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt_signal&lt;/span&gt;)&lt;/span&gt;;\n        button0.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt&lt;/span&gt;)&lt;/span&gt;;\n        button_Dian.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt_xs&lt;/span&gt;)&lt;/span&gt;;\n        button_dy.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt_dy&lt;/span&gt;)&lt;/span&gt;;\n        button_jia.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt_signal&lt;/span&gt;)&lt;/span&gt;;\n        clear_Button.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;jt_c&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-comment\"&gt;// 关闭事件处理程序&lt;/span&gt;\n        frame.add&lt;span class=\"hljs-constructor\"&gt;WindowListener(&lt;span class=\"hljs-params\"&gt;new&lt;/span&gt; WindowAdapter()&lt;/span&gt; {\n            public void window&lt;span class=\"hljs-constructor\"&gt;Closing(WindowEvent &lt;span class=\"hljs-params\"&gt;e&lt;/span&gt;)&lt;/span&gt; {\n                &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;exit(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n            }\n        });\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 计 算&lt;/span&gt;\n    public void cal&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; {\n        double a2;&lt;span class=\"hljs-comment\"&gt;// 运算数1&lt;/span&gt;\n        double b2;&lt;span class=\"hljs-comment\"&gt;// 运算数2&lt;/span&gt;\n        String c &amp;#61; signal;&lt;span class=\"hljs-comment\"&gt;// 运算符&lt;/span&gt;\n        double result2 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;// 结果&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c.equals(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;)) {\n            result_TextField.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入运算符&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n        } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (str1.equals(&lt;span class=\"hljs-string\"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)) &lt;span class=\"hljs-comment\"&gt;// 字符串 &amp;#34;.&amp;#34; 转换成double型数据时 会出错 所以手工转&lt;/span&gt;\n                str1 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;0.0&amp;#34;&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (str2.equals(&lt;span class=\"hljs-string\"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;))\n                str2 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;0.0&amp;#34;&lt;/span&gt;;\n            a2 &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Double&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;value&lt;span class=\"hljs-constructor\"&gt;Of(&lt;span class=\"hljs-params\"&gt;str1&lt;/span&gt;)&lt;/span&gt;.double&lt;span class=\"hljs-constructor\"&gt;Value()&lt;/span&gt;;\n            b2 &amp;#61; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Double&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;value&lt;span class=\"hljs-constructor\"&gt;Of(&lt;span class=\"hljs-params\"&gt;str2&lt;/span&gt;)&lt;/span&gt;.double&lt;span class=\"hljs-constructor\"&gt;Value()&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c.equals(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#43;&amp;#34;&lt;/span&gt;)) {\n                result2 &amp;#61; a2 &amp;#43; b2;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c.equals(&lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt;)) {\n                result2 &amp;#61; a2 - b2;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c.equals(&lt;span class=\"hljs-string\"&gt;&amp;#34;*&amp;#34;&lt;/span&gt;)) {\n                result2 &amp;#61; a2&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;b2;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c.equals(&lt;span class=\"hljs-string\"&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)) {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b2&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n                    result2 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n                    result2 &amp;#61; a2&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;b2;\n                }\n            }\n            result &amp;#61; ((&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Double(&lt;span class=\"hljs-params\"&gt;result2&lt;/span&gt;)&lt;/span&gt;).&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;String()&lt;/span&gt;);\n            result_TextField.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-params\"&gt;result&lt;/span&gt;)&lt;/span&gt;;\n        }\n    }\n\n    &amp;#64;&lt;span class=\"hljs-constructor\"&gt;SuppressWarnings(&lt;span class=\"hljs-string\"&gt;&amp;#34;unused&amp;#34;&lt;/span&gt;)&lt;/span&gt;\n    public static void main(String&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt; args) {\n        &lt;span class=\"hljs-comment\"&gt;// 界面风格&amp;#xff0c;可以去除&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt; {\n            &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;UIManager&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;set&lt;span class=\"hljs-constructor\"&gt;LookAndFeel(&lt;span class=\"hljs-string\"&gt;&amp;#34;com.sun.java.swing.plaf.windows.WindowsLookAndFeel&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n        } catch (Exception e) {\n            e.print&lt;span class=\"hljs-constructor\"&gt;StackTrace()&lt;/span&gt;;\n        }\n        Calculator cal &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Calculator()&lt;/span&gt;;\n    }\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/1625064842236image.png\" alt=\"img\" /&gt;&lt;/p&gt;\n&lt;p&gt;运行示例&amp;#xff1a;&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["java,,,,,,", ["字体\n题目1：设计一个图形界面的简易计算器，完成简单的算术运算符，可以完成加法工减法、乘法、除法和取余运算。请自行安排版面，使其美观。"]], "Tag": "程序设计"}
{"Answer": "如果你肯先采纳答案，可以给你一些代码", "Konwledge_Point": "算术运算", "Question": ["用C语言实现求前缀表达式的值 ", ["时间限制 400 ms 内存限制 65536 kB 代码长度限制 8000 B 判题程序 Standard 算术表达式有前缀表示法、中缀表示法和后缀表示法等形式。前缀表达式指二元运算符位于两个运算数之前，例如2+3*(7-4)+8/4的前缀表达式是：+ + 2 * 3 - 7 4 / 8 4。请设计程序计算前缀表达式的结果值。  输入格式说明：  输入在一行内给出不超过30个字符的前缀表达式，只包含+、-、*、\\以及运算数，不同对象（运算数、运算符号）之间以空格分隔。  输出格式说明：  输出前缀表达式的运算结果，精确到小数点后1位，或错误信息“ERROR”。  样例输入与输出：  序号  输入  输出 1    + + 2 * 3 - 7 4 / 8 4 13.0 2    / -25 + * - 2 3 4 / 8 4 12.5 3  / 5 + * - 2 3 4 / 8 2 ERROR 4   +10.23 10.2"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;详细代码实现如下&amp;#xff0c;包括代码注释&amp;#xff0c;望采纳&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;ctype.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=\"hljs-comment\"&gt;// 打开文件&lt;/span&gt;\n  FILE *fp &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;questions.txt&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);\n  &lt;span class=\"hljs-comment\"&gt;// 如果文件打开失败&amp;#xff0c;则退出&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (fp &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Failed to open file.&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n  }\n  &lt;span class=\"hljs-comment\"&gt;// 打开结果文件&lt;/span&gt;\n  FILE *result_fp &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;results.txt&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;);\n  &lt;span class=\"hljs-comment\"&gt;// 如果文件打开失败&amp;#xff0c;则退出&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (result_fp &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Failed to open result file.&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n  }\n  &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; line[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n  &lt;span class=\"hljs-comment\"&gt;// 存储文件中的一行&lt;/span&gt;\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; question_num &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n  &lt;span class=\"hljs-comment\"&gt;// 题目编号&lt;/span&gt;\n  &lt;span class=\"hljs-comment\"&gt;// 循环读取文件中的每一行&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;fgets&lt;/span&gt;(line, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;, fp) !&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n    &lt;span class=\"hljs-comment\"&gt;// 去掉回车符&lt;/span&gt;\n    line[&lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(line)&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;// 设置默认结果为合法&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *result &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;合法&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;// 判断表达式是否合法&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;// 只允许出现 &amp;#43;, -, *, / 和数字&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(line); i&amp;#43;&amp;#43;) {\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-built_in\"&gt;isdigit&lt;/span&gt;(line[i]) &amp;amp;&amp;amp; line[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; line[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; line[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; line[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;) {\n        result &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;表达式中存在非法字符&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n      }\n    }\n    &lt;span class=\"hljs-comment\"&gt;// 如果表达式合法&amp;#xff0c;则进一步判断结果是否合法&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(result, &lt;span class=\"hljs-string\"&gt;&amp;#34;合法&amp;#34;&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n      &lt;span class=\"hljs-comment\"&gt;// 分离出第一个数字&lt;/span&gt;\n      &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num1 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n      &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num1_len &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n      &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;isdigit&lt;/span&gt;(line[num1_len])) {\n        num1 &amp;#61; num1 * &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; line[num1_len] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n        num1_len&amp;#43;&amp;#43;;\n      }\n      &lt;span class=\"hljs-comment\"&gt;// 如果数字超出了范围&amp;#xff0c;则设置结果为&amp;#34;数字超出范围&amp;#34;&lt;/span&gt;\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (num1 &amp;gt; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;) {\n        result &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;数字超出范围&amp;#34;&lt;/span&gt;;\n      }\n      &lt;span class=\"hljs-comment\"&gt;// 如果第一个数字合法&amp;#xff0c;则进一步判断 else {&lt;!-- --&gt;&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num2 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num2_len &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; op_index &amp;#61; num1_len;\n        &lt;span class=\"hljs-comment\"&gt;// 运算符位置&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; end_index &amp;#61; &lt;span class=\"hljs-built_in\"&gt;strlen&lt;/span&gt;(line);\n        &lt;span class=\"hljs-comment\"&gt;// 表达式结束位置&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;// 如果表达式中存在运算符&amp;#xff0c;则分离出第二个数字&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (line[op_index] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt; || line[op_index] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; || line[op_index] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; || line[op_index] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;) {\n          op_index&amp;#43;&amp;#43;;\n          &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;isdigit&lt;/span&gt;(line[op_index &amp;#43; num2_len])) {\n            num2 &amp;#61; num2 * &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; line[op_index &amp;#43; num2_len] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n            num2_len&amp;#43;&amp;#43;;\n          }\n          end_index &amp;#61; op_index &amp;#43; num2_len;\n        }\n        &lt;span class=\"hljs-comment\"&gt;// 如果第二个数字超出范围&amp;#xff0c;则设置结果为&amp;#34;数字超出范围&amp;#34;&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (num2 &amp;gt; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;) {\n          result &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;数字超出范围&amp;#34;&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-comment\"&gt;// 如果两个数字合法&amp;#xff0c;则进一步判断结果是否合法 else {&lt;!-- --&gt;&lt;/span&gt;\n          &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; res &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n          &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (line[op_index] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;) {\n            res &amp;#61; num1 &amp;#43; num2;\n          } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (line[op_index] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) {\n            res &amp;#61; num1 - num2;\n          } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (line[op_index] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;) {\n            res &amp;#61; num1 * num2;\n          } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (line[op_index] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;) {\n            res &amp;#61; (&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;)num1 / num2;\n          }\n          &lt;span class=\"hljs-comment\"&gt;// 如果结果是小数或负数&amp;#xff0c;则设置结果为&amp;#34;结果为小数/负数&amp;#34;&lt;/span&gt;\n          &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (res &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;)res !&amp;#61; res) {\n            result &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;结果为小数/负数&amp;#34;&lt;/span&gt;;\n          }\n        }\n      }\n    }\n    &lt;span class=\"hljs-comment\"&gt;// 如果题目不合法&amp;#xff0c;则将其写入另一个文件中&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (result !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;合法&amp;#34;&lt;/span&gt;) {\n      &lt;span class=\"hljs-built_in\"&gt;fputs&lt;/span&gt;(line, fp2);\n      &lt;span class=\"hljs-built_in\"&gt;fputs&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;, fp2);\n      &lt;span class=\"hljs-built_in\"&gt;fputs&lt;/span&gt;(result, fp2);\n      &lt;span class=\"hljs-built_in\"&gt;fputs&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;, fp2);\n    }\n  }\n  &lt;span class=\"hljs-comment\"&gt;// 关闭两个文件&lt;/span&gt;\n  &lt;span class=\"hljs-built_in\"&gt;fclose&lt;/span&gt;(fp1);\n  &lt;span class=\"hljs-built_in\"&gt;fclose&lt;/span&gt;(fp2);\n  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["求下面问题的C语言代码", ["某个文件中保存着为三年级小学生设计的算术题，要求所有题目运算数必须是100以内，并且结果不能是小数或负数，请检查所有题目是否符合要求，不符合要求题目请将其题号写在另一个文件中，并且附上原因", "输入形式：文本文件", "输出形式：题目检查结果", "测试用例：", "输入：1.3-4  2.5*4  3.3/2", "输出：1.结果为负数", "           2.结果为小数"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你可以参考如下链接&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/weixin_46358119/article/details/104605659\" id=\"textarea_1630748533371_1630748550828_0\" class=\"md_link_card\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n  \n    &lt;span class=\"md_link_title\"&gt;对输入的两个分数选择‘&amp;#43;’、‘-’、‘*’、‘/’四则运算&amp;#xff0c;并以分数形式输出结果。输入&amp;#xff1a;第一行先输入整数T&amp;#xff0c;表示总共有T组数据。接下来共T行&amp;#xff0c;每行输入分数形式的算术表达式。\t输出&amp;#xff1a;最简分数形_超A的大叔的博客-CSDN博客&lt;/span&gt;\n    \n  &lt;span class=\"md_link_desc\" style=\"\"&gt;#include&amp;lt;math.h&amp;gt;#include&amp;lt;stdio.h&amp;gt;int main(){\tint T;\tint num1,num2,num3,num4,i,c,a1,a2;\tchar k;\tint fun(int a1,int a2);//函数调用\tscanf(&amp;#34;%d\\n&amp;#34;,&amp;amp;T);\tfor(i&amp;#61;1;i&amp;lt;&amp;#61;T;i&amp;#43;&amp;#43;)\t{\t\tscanf(...&lt;/span&gt;\n  &lt;span class=\"md_flex_card\"&gt;\n  &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n    &lt;span class=\"flex-1\"&gt;\n      &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_46358119/article/details/104605659&lt;/span&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;&lt;/a&gt;&lt;br /&gt;如果对你有帮助&amp;#xff0c;可以给我个采纳吗&amp;#xff0c;谢谢!! 点击我这个回答右上方的&lt;strong&gt;【采纳】&lt;/strong&gt;按钮&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["想知道思路和代码，急解题", ["对输入的两个分数选择‘+’、‘-’、‘*’、‘", "/’四则运算，并以分数形式输出结果。    输入：第一行先输入整数T，表示总共有T组数据。    接下来共T行，每行输入分数形式的算术表达式。    输出：最简分数形式。    输入样例：    2    -1/", "2", "-", "1", "/3    5/", "6", "/5/", "6", "    输出样例：    -", "5", "/", "6", "    ", "1", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;scanf_s(&amp;#34;%d%c%d&amp;#34;,&amp;amp;x,&amp;amp;c,1,&amp;amp;y); scanf_s输入字符时&amp;#xff0c;%c后面要加个参数1&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["求帮我看看哪里有问题", ["刚学c++，做个简单的运算，结果y和z输出的结果有问题，求帮我看看哪里出问题了。", "代码在这", "#include \"stdio.h\"", "int main()", "{", "    int x,y,z;", "    char c;", "    printf(\"请输入算术式并按enter:\\n\");", "    scanf_s(\"%d%c%d\",&x,&c,&y);", "    switch (c)", "    {", "    case'+':z= x+y;break;", "    case'-':z= x-y;break;", "    case'", "':z= x", "y;break;", "    case'/':z= x/y;break;", "    default:printf(\"输入的不是算术运算符！请重新输入\");", "    }", "    printf(\"%d%c%d=%d\\n\",x,c,y,z);", "    getchar();", "    getchar();", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;完整的代码实现和注释如下&amp;#xff0c;望采纳&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;// 打开输入文件&lt;/span&gt;\n    FILE *input_file &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (input_file &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;无法打开输入文件\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;exit&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-comment\"&gt;// 打开输出文件&lt;/span&gt;\n    FILE *output_file &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;output.txt&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (output_file &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;无法打开输出文件\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;exit&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-comment\"&gt;// 循环读取输入文件中的每一行&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; line[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; line_num &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;fgets&lt;/span&gt;(line, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(line), input_file) !&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-comment\"&gt;// 对于每一行&amp;#xff0c;使用sscanf函数从字符串中读取两个整数和一个运算符&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num1, num2;\n        &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;sscanf&lt;/span&gt;(line, &lt;span class=\"hljs-string\"&gt;&amp;#34;%d %c %d&amp;#34;&lt;/span&gt;, &amp;amp;num1, &amp;amp;&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt;, &amp;amp;num2);\n        &lt;span class=\"hljs-comment\"&gt;// 计算表达式的结果&lt;/span&gt;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; result;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;)\n                result &amp;#61; num1 &amp;#43; num2; &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)\n                result &amp;#61; num1 - num2; &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;)\n                result &amp;#61; num1 * num2; &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)\n                result &amp;#61; num1 / num2;\n        &lt;span class=\"hljs-comment\"&gt;// 如果结果不合法&amp;#xff0c;则将题号和原因写入输出文件&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (result &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || result &amp;gt; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt; || (&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; num2 &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)) {\n            line_num&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (result &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                        &lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(output_file, &lt;span class=\"hljs-string\"&gt;&amp;#34;(%d) 结果为负数\\n&amp;#34;&lt;/span&gt;, line_num); &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (result &amp;gt; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;)\n                        &lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(output_file, &lt;span class=\"hljs-string\"&gt;&amp;#34;(%d) 结果超过100\\n&amp;#34;&lt;/span&gt;, line_num); &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; num2 &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                        &lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(output_file, &lt;span class=\"hljs-string\"&gt;&amp;#34;(%d) 除数为0\\n&amp;#34;&lt;/span&gt;, line_num);\n        }\n    }\n    &lt;span class=\"hljs-comment\"&gt;// 关闭文件&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;fclose&lt;/span&gt;(input_file);\n    &lt;span class=\"hljs-built_in\"&gt;fclose&lt;/span&gt;(output_file);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["求下面问题的完整c语言代码", ["【题目内容】", "某个文件中保存着为3年级小学生设计的算术题，要求所有题目运算数必须是100以内，并且结果不能是小数或负数，请检查所有题目是否符合要求，不符合要求题目请将其题号写在另一个文件中，并且附上原因。", "【输入形式】", "文本文件", "【输出形式】", "题目检查结果", "【测试用例1】", "输入：", "(1) 3-4 (2) 5*4 (3) 3/2", "输出：", "(1) 结果为负数", "(3) 结果为小数"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;下面是一个例子&amp;#xff0c;它使用C语言实现了二叉树来表示表达式并求值的功能&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;ctype.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;// 定义表达式二叉树的结点结构&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;node&lt;/span&gt; {\n  &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; data;  &lt;span class=\"hljs-comment\"&gt;// 结点的数据域&amp;#xff0c;用来存储运算符或者操作数&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;node&lt;/span&gt; *left;  &lt;span class=\"hljs-comment\"&gt;// 左子树指针&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;node&lt;/span&gt; *right;  &lt;span class=\"hljs-comment\"&gt;// 右子树指针&lt;/span&gt;\n} Node;\n\n&lt;span class=\"hljs-comment\"&gt;// 创建表达式二叉树的函数&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;Node *&lt;span class=\"hljs-title\"&gt;create_expression_tree&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *expression)&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=\"hljs-comment\"&gt;// 定义栈&amp;#xff0c;用来存储结点&lt;/span&gt;\n  Node *stack[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; top &amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;// 栈顶指针&lt;/span&gt;\n\n  &lt;span class=\"hljs-comment\"&gt;// 遍历表达式的每一个字符&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; expression[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n    &lt;span class=\"hljs-comment\"&gt;// 如果是数字&amp;#xff0c;创建一个结点并将其压入栈中&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;isdigit&lt;/span&gt;(expression[i])) {\n      Node *node &amp;#61; (Node *) &lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(Node));\n      node-&amp;gt;data &amp;#61; expression[i];\n      node-&amp;gt;left &amp;#61; node-&amp;gt;right &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n      stack[&amp;#43;&amp;#43;top] &amp;#61; node;\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n      &lt;span class=\"hljs-comment\"&gt;// 如果是运算符&amp;#xff0c;从栈中弹出两个结点作为运算符的两个操作数&lt;/span&gt;\n      Node *node &amp;#61; (Node *) &lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(Node));\n      node-&amp;gt;data &amp;#61; expression[i];\n      node-&amp;gt;right &amp;#61; stack[top--];\n      node-&amp;gt;left &amp;#61; stack[top--];\n      &lt;span class=\"hljs-comment\"&gt;// 将新创建的结点压入栈中&lt;/span&gt;\n      stack[&amp;#43;&amp;#43;top] &amp;#61; node;\n    }\n  }\n\n  &lt;span class=\"hljs-comment\"&gt;// 返回表达式二叉树的根结点&lt;/span&gt;\n  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; stack[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n}\n\n&lt;span class=\"hljs-comment\"&gt;// 使用后缀表达式的方式遍历二叉树并求值的函数&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;evaluate&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Node *root)&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=\"hljs-comment\"&gt;// 如果是叶子结点&amp;#xff0c;直接返回数据域中存储的数字&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (root-&amp;gt;left &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt; &amp;amp;&amp;amp; root-&amp;gt;right &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; root-&amp;gt;data - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-comment\"&gt;// 如果是二元运算符&amp;#xff0c;则递归计算左右子树的值并进行计算&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; left &amp;#61; &lt;span class=\"hljs-built_in\"&gt;evaluate&lt;/span&gt;(root-&amp;gt;left);\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; right &amp;#61; &lt;span class=\"hljs-built_in\"&gt;evaluate&lt;/span&gt;(root-&amp;gt;right);\n&lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (root-&amp;gt;data) {\n&lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; left &amp;#43; right;\n&lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; left - right;\n&lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; left * right;\n&lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;: &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; left / right;\n}\n\n&lt;span class=\"hljs-comment\"&gt;// 其他情况返回0&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n&lt;span class=\"hljs-comment\"&gt;// 创建表达式二叉树&lt;/span&gt;\nNode root &amp;#61; &lt;span class=\"hljs-built_in\"&gt;create_expression_tree&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;9&amp;#43;52-4/2&amp;#34;&lt;/span&gt;);\n\n&lt;span class=\"hljs-comment\"&gt;// 计算并打印结果&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; result &amp;#61; &lt;span class=\"hljs-built_in\"&gt;evaluate&lt;/span&gt;(root);\n&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Result: %d\\n&amp;#34;&lt;/span&gt;, result);\n\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;希望Al有所帮助&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["求一段代码，用c语言写", ["利用二叉树求解表达式【基本功能】二叉树表示表达式的递归定义为：（1）若表达式为数或简单变量，则相应二叉树中仅有一个根结点，其数据域存放该表达式信息；（2）若表达式为“第一操作数 运算符 第二操作数”的形式，则相应的二叉树中以左子树表示第一操作数，右子树表示第二操作数，根结点的数据域存放运算符（若为一元运算符，则左子树为空），其中，操作数本身又为表达式对于任意一个算术表达式，都可以用二叉树来表示。表达式对应的二叉树创建后，利用二叉树的遍历操作，可实现表达式的求值运算。【基本要求】（1）设计表达式二叉树的创建与求值函数。（2）编写一个测试主函数。【提示】由于创建的表达式树需要准确的表达运算次序，因此在扫描表达式创建表达式树的过程中，当遇到运算符时不能直接创建结点，而应将其与前面的运算符进行优先级比较，根据比较的结果再进行处理。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;# 随机出题,验题&lt;/span&gt;\nfh &amp;#61; [&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;]\ndc &amp;#61; [&lt;span class=\"hljs-string\"&gt;&amp;#39;√&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;×&amp;#39;&lt;/span&gt;]\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;欢迎使用算术自测程序&amp;#xff0c;测试开始:&amp;#34;&lt;/span&gt;)\n\nfunc &amp;#61; []\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#34;第&lt;span class=\"hljs-subst\"&gt;{i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;}&lt;/span&gt;题&amp;#34;&lt;/span&gt;, end&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)\n    strs &amp;#61; &lt;span class=\"hljs-string\"&gt;f&amp;#34;&lt;span class=\"hljs-subst\"&gt;{random.randint(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)}&lt;/span&gt;&lt;span class=\"hljs-subst\"&gt;{fh[random.randint(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;) % &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;]}&lt;/span&gt;&lt;span class=\"hljs-subst\"&gt;{random.randint(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)}&lt;/span&gt;&amp;#34;&lt;/span&gt;\n    number &amp;#61; &lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(strs &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#61;&amp;#39;&lt;/span&gt;))\n    func.append((strs, number))\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;答题完毕&amp;#xff0c;您的答题结果为:&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(func)):\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;f&amp;#34;第&lt;span class=\"hljs-subst\"&gt;{i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;}&lt;/span&gt;题&amp;#34;&lt;/span&gt;, end&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;(func[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])&amp;#61;&amp;#61;func[i][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(func[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#43;&lt;span class=\"hljs-string\"&gt;f&amp;#39;&amp;#61;&lt;span class=\"hljs-subst\"&gt;{func[i][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]}&lt;/span&gt; &lt;span class=\"hljs-subst\"&gt;{dc[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(func[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#43;&lt;span class=\"hljs-string\"&gt;f&amp;#39;&amp;#61;&lt;span class=\"hljs-subst\"&gt;{func[i][&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]}&lt;/span&gt; &lt;span class=\"hljs-subst\"&gt;{dc[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]}&lt;/span&gt;&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/538598143536110.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["用python写程序！！救命！！", ["十以内加减乘数运算自测小程序", "编写自测小程序，程序随机生成10道加减乘除运算(运算种类随机，参与运算操作数为随机[1-10]之间的正整数)，程序给出一道随机生成的题目，程序使用者来给出答案，当使用者10道题都答完之后，统一将十道题及使用者给出答案进行打印，并在每道题后面给出使用者当前题目的对错情况，如果打错还需另给出正确答案，在最后给出使用者本次测试的总得分(每题10分，总分100分)。说明:", "1、示例中蓝色部分为用户输入部分，黑色部分为程序输出部分，只是为了帮助大家区分哪部分是需要使用者输入的，程序运行时无序进行颜色设置。", "2、除法结果小数点后保留两位有效数字。", "3、本程序题目生成可通过随机数来完成。程序运行示例:", "欢迎使用算术自测程序，测试开始第1题:3+2=5第2题:6-9=-3第3题:3+9=11第4题:5", "3=15第5题:6/4=1.50第6题:4/1=4.00第7题:8-8=0第8题:3", "9=10第9题:6", "7=42第10题:9-3=6", "答题完毕，您的答题结果为:第1题:3+2=5 √第2题:6-9=-3 √", "第3题:3+9=11 x 正确答案为 12第4题:5", "3=15 √第5题:6/4=1.50 √第6题:4/1=4.00 √第7题:8-8=0 √", "第8题:3", "9=10 x 正确答案为 27第9题:6", "7=42 √第10题:9-3=6 √", "您本次测试最终得分为80分！"]], "Tag": "程序设计"}
{"Answer": "include &lt;dos.h&gt; /*DOS接口函数*/ \r\n#include &lt;math.h&gt; /*数学函数的定义*/ \r\n#include &lt;conio.h&gt; /*屏幕操作函数*/ \r\n#include &lt;stdio.h&gt; /*I/O函数*/ \r\n#include &lt;stdlib.h&gt; /*库函数*/ \r\n#include &lt;stdarg.h&gt; /*变量长度参数表*/ \r\n#include &lt;graphics.h&gt; /*图形函数*/ \r\n#include &lt;string.h&gt; /*字符串函数*/ \r\n#include &lt;ctype.h&gt; /*字符操作函数*/ \r\n#define UP 0x48 /*光标上移键*/ \r\n#define DOWN 0x50 /*光标下移键*/ \r\n#define LEFT 0x4b /*光标左移键*/ \r\n#define RIGHT 0x4d /*光标右移键*/ \r\n#define ENTER 0x0d /*回车键*/ \r\nvoid *rar; /*全局变量，保存光标图象*/ \r\nstruct palettetype palette; /*使用调色板信息*/ \r\nint GraphDriver; /* 图形设备驱动*/ \r\nint GraphMode; /* 图形模式值*/ \r\nint ErrorCode; /* 错误代码*/ \r\nint MaxColors; /* 可用颜色的最大数值*/ \r\nint MaxX, MaxY; /* 屏幕的最大分辨率*/ \r\ndouble AspectRatio; /* 屏幕的像素比*/ \r\nvoid drawboder(void); /*画边框函数*/ \r\nvoid initialize(void); /*初始化函数*/ \r\nvoid computer(void); /*计算器计算函数*/ \r\nvoid changetextstyle(int font, int direction, int charsize); /*改变文本样式函数*/ \r\nvoid mwindow(char *header); /*窗口函数*/ \r\nint specialkey(void) ; /*获取特殊键函数*/ \r\nint arrow(); /*设置箭头光标函数*/ \r\n/*主函数*/ \r\nint main() \r\n{ \r\ninitialize();/* 设置系统进入图形模式 */ \r\ncomputer(); /*运行计算器 */ \r\nclosegraph();/*系统关闭图形模式返回文本模式*/ \r\nreturn(0); /*结束程序*/ \r\n} \r\n/* 设置系统进入图形模式 */ \r\nvoid initialize(void) \r\n{ \r\nint xasp, yasp; /* 用于读x和y方向纵横比*/ \r\nGraphDriver = DETECT; /* 自动检测显示器*/ \r\ninitgraph( &amp;GraphDriver, &amp;GraphMode, \"\" ); \r\n/*初始化图形系统*/ \r\nErrorCode = graphresult(); /*读初始化结果*/ \r\nif( ErrorCode != grOk ) /*如果初始化时出现错误*/ \r\n{ \r\nprintf(\"Graphics System Error: %s\\n\", \r\ngrapherrormsg( ErrorCode ) ); /*显示错误代码*/ \r\nexit( 1 ); /*退出*/ \r\n} \r\ngetpalette( &amp;palette ); /* 读面板信息*/ \r\nMaxColors = getmaxcolor() + 1; /* 读取颜色的最大值*/ \r\nMaxX = getmaxx(); /* 读屏幕尺寸 */ \r\nMaxY = getmaxy(); /* 读屏幕尺寸 */ \r\ngetaspectratio( &amp;xasp, &amp;yasp ); /* 拷贝纵横比到变量中*/ \r\nAspectRatio = (double)xasp/(double)yasp;/* 计算纵横比值*/ \r\n} \r\n/*计算器函数*/ \r\nvoid computer(void) \r\n{ \r\nstruct viewporttype vp; /*定义视口类型变量*/ \r\nint color, height, width; \r\nint x, y,x0,y0, i, j,v,m,n,act,flag=1; \r\nfloat num1=0,num2=0,result; /*操作数和计算结果变量*/ \r\nchar cnum[5],str2[20]={\"\"},c,temp[20]={\"\"}; \r\nchar str1[]=\"1230.456+-789*/Qc=^%\";/* 定义字符串在按钮图形上显示的符号 */ \r\nmwindow( \"Calculator\" ); /* 显示主窗口 */ \r\ncolor = 7; /*设置灰颜色值*/ \r\ngetviewsettings( &amp;vp ); /* 读取当前窗口的大小*/ \r\nwidth=(vp.right+1)/10; /* 设置按钮宽度 */ \r\nheight=(vp.bottom-10)/10 ; /*设置按钮高度 */ \r\nx = width /2; /*设置x的坐标值*/ \r\ny = height/2; /*设置y的坐标值*/ \r\nsetfillstyle(SOLID_FILL, color+3); \r\nbar( x+width*2, y, x+7*width, y+height ); \r\n/*画一个二维矩形条显示运算数和结果*/ \r\nsetcolor( color+3 ); /*设置淡绿颜色边框线*/ \r\nrectangle( x+width*2, y, x+7*width, y+height ); \r\n/*画一个矩形边框线*/ \r\nsetcolor(RED); /*设置颜色为红色*/ \r\nouttextxy(x+3*width,y+height/2,\"0.\"); /*输出字符串\"0.\"*/ \r\nx =2*width-width/2; /*设置x的坐标值*/ \r\ny =2*height+height/2; /*设置y的坐标值*/ \r\nfor( j=0 ; j&lt;4 ; ++j ) /*画按钮*/ \r\n{ \r\nfor( i=0 ; i&lt;5 ; ++i ) \r\n{ \r\nsetfillstyle(SOLID_FILL, color); \r\nsetcolor(RED); \r\nbar( x, y, x+width, y+height ); /*画一个矩形条*/ \r\nrectangle( x, y, x+width, y+height ); \r\nsprintf(str2,\"%c\",str1[j*5+i]); \r\n/*将字符保存到str2中*/ \r\nouttextxy( x+(width/2), y+height/2, str2); \r\nx =x+width+ (width / 2) ; /*移动列坐标*/ \r\n} \r\ny +=(height/2)*3; /* 移动行坐标*/ \r\nx =2*width-width/2; /*复位列坐标*/ \r\n} \r\nx0=2*width; \r\ny0=3*height; \r\nx=x0; \r\ny=y0; \r\ngotoxy(x,y); /*移动光标到x,y位置*/ \r\narrow(); /*显示光标*/ \r\nputimage(x,y,rar,XOR_PUT); \r\nm=0; \r\nn=0; \r\nstrcpy(str2,\"\"); /*设置str2为空串*/ \r\nwhile((v=specialkey())!=45) /*当压下Alt+x键结束程序，否则执行下面的循环*/ \r\n{ \r\nwhile((v=specialkey())!=ENTER) /*当压下键不是回车时*/ \r\n{ \r\nputimage(x,y,rar,XOR_PUT); /*显示光标图象*/ \r\nif(v==RIGHT) /*右移箭头时新位置计算*/ \r\nif(x&gt;=x0+6*width) \r\n/*如果右移，移到尾，则移动到最左边字符位置*/ \r\n{ \r\nx=x0; \r\nm=0; \r\n} \r\nelse \r\n{ \r\nx=x+width+width/2; \r\nm++; \r\n} /*否则，右移到下一个字符位置*/ \r\nif(v==LEFT) /*左移箭头时新位置计算*/ \r\nif(x&lt;=x0) \r\n{ \r\nx=x0+6*width; \r\nm=4; \r\n} /*如果移到头，再左移，则移动到最右边字符位置*/ \r\nelse \r\n{ \r\nx=x-width-width/2; \r\nm--; \r\n} /*否则，左移到前一个字符位置*/ \r\nif(v==UP) /*上移箭头时新位置计算*/ \r\nif(y&lt;=y0) \r\n{ \r\ny=y0+4*height+height/2; \r\nn=3; \r\n} /*如果移到头，再上移，则移动到最下边字符位置*/ \r\nelse \r\n{ \r\ny=y-height-height/2; \r\nn--; \r\n} /*否则，移到上边一个字符位置*/ \r\nif(v==DOWN) /*下移箭头时新位置计算*/ \r\nif(y&gt;=7*height) \r\n{ \r\ny=y0; \r\nn=0; \r\n} /*如果移到尾，再下移，则移动到最上边字符位置*/ \r\nelse \r\n{ \r\ny=y+height+height/2; \r\nn++; \r\n} /*否则，移到下边一个字符位置*/ \r\nputimage(x,y,rar,XOR_PUT); /*在新的位置显示光标箭头*/ \r\n} \r\nc=str1[n*5+m]; /*将字符保存到变量c中*/ \r\nif(isdigit(c)||c=='.') /*判断是否是数字或小数点*/ \r\n{ \r\nif(flag==-1) /*如果标志为-1，表明为负数*/ \r\n{ \r\nstrcpy(str2,\"-\"); /*将负号连接到字符串中*/ \r\nflag=1; \r\n} /*将标志值恢复为1*/ \r\nsprintf(temp,\"%c\",c); /*将字符保存到字符串变量temp中*/ \r\nstrcat(str2,temp); /*将temp中的字符串连接到str2中*/ \r\nsetfillstyle(SOLID_FILL,color+3); \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); \r\nouttextxy(5*width,height,str2); /*显示字符串*/ \r\n} \r\nif(c=='+') \r\n{ \r\nnum1=atof(str2); /*将第一个操作数转换为浮点数*/ \r\nstrcpy(str2,\"\"); /*将str2清空*/ \r\nact=1; /*做计算加法标志值*/ \r\nsetfillstyle(SOLID_FILL,color+3); \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); \r\nouttextxy(5*width,height,\"0.\"); /*显示字符串*/ \r\n} \r\nif(c=='-') \r\n{ \r\nif(strcmp(str2,\"\")==0) /*如果str2为空，说明是负号，而不是减号*/ \r\nflag=-1; /*设置负数标志*/ \r\nelse \r\n{ \r\nnum1=atof(str2); /*将第二个操作数转换为浮点数*/ \r\nstrcpy(str2,\"\"); /*将str2清空*/ \r\nact=2; /*做计算减法标志值*/ \r\nsetfillstyle(SOLID_FILL,color+3); \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); /*画矩形*/ \r\nouttextxy(5*width,height,\"0.\"); /*显示字符串*/ \r\n} \r\n} \r\nif(c=='*') \r\n{ \r\nnum1=atof(str2); /*将第二个操作数转换为浮点数*/ \r\nstrcpy(str2,\"\"); /*将str2清空*/ \r\nact=3; /*做计算乘法标志值*/ \r\nsetfillstyle(SOLID_FILL,color+3); bar(2*width+width/2,height/2,15*width/2,3*height/2); \r\nouttextxy(5*width,height,\"0.\"); /*显示字符串*/ \r\n} \r\nif(c=='/') \r\n{ \r\nnum1=atof(str2); /*将第二个操作数转换为浮点数*/ \r\nstrcpy(str2,\"\"); /*将str2清空*/ \r\nact=4; /*做计算除法标志值*/ \r\nsetfillstyle(SOLID_FILL,color+3); \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); \r\nouttextxy(5*width,height,\"0.\"); /*显示字符串*/ \r\n} \r\nif(c=='^') \r\n{ \r\nnum1=atof(str2); /*将第二个操作数转换为浮点数*/ \r\nstrcpy(str2,\"\"); /*将str2清空*/ \r\nact=5; /*做计算乘方标志值*/ \r\nsetfillstyle(SOLID_FILL,color+3); /*设置用淡绿色实体填充*/ \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); /*画矩形*/ \r\nouttextxy(5*width,height,\"0.\"); /*显示字符串*/ \r\n} \r\nif(c=='%') \r\n{ \r\nnum1=atof(str2); /*将第二个操作数转换为浮点数*/ \r\nstrcpy(str2,\"\"); /*将str2清空*/ \r\nact=6; /*做计算模运算乘方标志值*/ \r\nsetfillstyle(SOLID_FILL,color+3); /*设置用淡绿色实体填充*/ \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); /*画矩形*/ \r\nouttextxy(5*width,height,\"0.\"); /*显示字符串*/ \r\n} \r\nif(c=='=') \r\n{ \r\nnum2=atof(str2); /*将第二个操作数转换为浮点数*/ \r\nswitch(act) /*根据运算符号计算*/ \r\n{ \r\ncase 1:result=num1+num2;break; /*做加法*/ \r\ncase 2:result=num1-num2;break; /*做减法*/ \r\ncase 3:result=num1*num2;break; /*做乘法*/ \r\ncase 4:result=num1/num2;break; /*做除法*/ \r\ncase 5:result=pow(num1,num2);break; /*做x的y次方*/ \r\ncase 6:result=fmod(num1,num2);break; /*做模运算*/ \r\n} \r\nsetfillstyle(SOLID_FILL,color+3); /*设置用淡绿色实体填充*/ \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); /*覆盖结果区*/ \r\nsprintf(temp,\"%f\",result); /*将结果保存到temp中*/ \r\nouttextxy(5*width,height,temp); /*显示结果*/ \r\n} \r\nif(c=='c') \r\n{ \r\nnum1=0; /*将两个操作数复位0，符号标志为1*/ \r\nnum2=0; \r\nflag=1; \r\nstrcpy(str2,\"\"); /*将str2清空*/ \r\nsetfillstyle(SOLID_FILL,color+3); /*设置用淡绿色实体填充*/ \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); /*覆盖结果区*/ \r\nouttextxy(5*width,height,\"0.\"); /*显示字符串*/ \r\n} \r\nif(c=='Q')exit(0); /*如果选择了q回车，结束计算程序*/ \r\n} \r\nputimage(x,y,rar,XOR_PUT); /*在退出之前消去光标箭头*/ \r\nreturn; /*返回*/ \r\n} \r\n/*窗口函数*/ \r\nvoid mwindow( char *header ) \r\n{ \r\nint height; \r\ncleardevice(); /* 清除图形屏幕 */ \r\nsetcolor( MaxColors - 1 ); /* 设置当前颜色为白色*/ \r\nsetviewport( 20, 20, MaxX/2, MaxY/2, 1 ); /* 设置视口大小 */ \r\nheight = textheight( \"H\" ); /* 读取基本文本大小 */ \r\nsettextstyle( DEFAULT_FONT, HORIZ_DIR, 1 );/*设置文本样式*/ \r\nsettextjustify( CENTER_TEXT, TOP_TEXT );/*设置字符排列方式*/ \r\nouttextxy( MaxX/4, 2, header ); /*输出标题*/ \r\nsetviewport( 20,20+height+4, MaxX/2+4, MaxY/2+20, 1 ); /*设置视口大小*/ \r\ndrawboder(); /*画边框*/ \r\n} \r\nvoid drawboder(void) /*画边框*/ \r\n{ \r\nstruct viewporttype vp; /*定义视口类型变量*/ \r\nsetcolor( MaxColors - 1 ); /*设置当前颜色为白色 */ \r\nsetlinestyle( SOLID_LINE, 0, NORM_WIDTH );/*设置画线方式*/ \r\ngetviewsettings( &amp;vp );/*将当前视口信息装入vp所指的结构中*/ \r\nrectangle( 0, 0, vp.right-vp.left, vp.bottom-vp.top ); /*画矩形边框*/ \r\n} \r\n/*设计鼠标图形函数*/ \r\nint arrow() \r\n{ \r\nint size; \r\nint raw[]={4,4,4,8,6,8,14,16,16,16,8,6,8,4,4,4}; /*定义多边形坐标*/ \r\nsetfillstyle(SOLID_FILL,2); /*设置填充模式*/ \r\nfillpoly(8,raw); /*画出一光标箭头*/ \r\nsize=imagesize(4,4,16,16); /*测试图象大小*/ \r\nrar=malloc(size); /*分配内存区域*/ \r\ngetimage(4,4,16,16,rar); /*存放光标箭头图象*/ \r\nputimage(4,4,rar,XOR_PUT); /*消去光标箭头图象*/ \r\nreturn 0; \r\n} \r\n/*按键函数*/ \r\nint specialkey(void) \r\n{ \r\nint key; \r\nwhile(bioskey(1)==0); /*等待键盘输入*/ \r\nkey=bioskey(0); /*键盘输入*/ \r\nkey=key&amp;0xff? key&amp;0xff:key&gt;&gt;8; /*只取特殊键的扫描值，其余为0*/ \r\nreturn(key); /*返回键值*/ \r\n}\r\n08-12-26 | 添加评论\r\n0\r\n\r\nexpper\r\n#include &lt;dos.h&gt; /*DOS接口函数*/ \r\n#include &lt;math.h&gt; /*数学函数的定义*/ \r\n#include &lt;conio.h&gt; /*屏幕操作函数*/ \r\n#include &lt;stdio.h&gt; /*I/O函数*/ \r\n#include &lt;stdlib.h&gt; /*库函数*/ \r\n#include &lt;stdarg.h&gt; /*变量长度参数表*/ \r\n#include &lt;graphics.h&gt; /*图形函数*/ \r\n#include &lt;string.h&gt; /*字符串函数*/ \r\n#include &lt;ctype.h&gt; /*字符操作函数*/ \r\n#define UP 0x48 /*光标上移键*/ \r\n#define DOWN 0x50 /*光标下移键*/ \r\n#define LEFT 0x4b /*光标左移键*/ \r\n#define RIGHT 0x4d /*光标右移键*/ \r\n#define ENTER 0x0d /*回车键*/ \r\nvoid *rar; /*全局变量，保存光标图象*/ \r\nstruct palettetype palette; /*使用调色板信息*/ \r\nint GraphDriver; /* 图形设备驱动*/ \r\nint GraphMode; /* 图形模式值*/ \r\nint ErrorCode; /* 错误代码*/ \r\nint MaxColors; /* 可用颜色的最大数值*/ \r\nint MaxX, MaxY; /* 屏幕的最大分辨率*/ \r\ndouble AspectRatio; /* 屏幕的像素比*/ \r\nvoid drawboder(void); /*画边框函数*/ \r\nvoid initialize(void); /*初始化函数*/ \r\nvoid computer(void); /*计算器计算函数*/ \r\nvoid changetextstyle(int font, int direction, int charsize); /*改变文本样式函数*/ \r\nvoid mwindow(char *header); /*窗口函数*/ \r\nint specialkey(void) ; /*获取特殊键函数*/ \r\nint arrow(); /*设置箭头光标函数*/ \r\n/*主函数*/ \r\nint main() \r\n{ \r\ninitialize();/* 设置系统进入图形模式 */ \r\ncomputer(); /*运行计算器 */ \r\nclosegraph();/*系统关闭图形模式返回文本模式*/ \r\nreturn(0); /*结束程序*/ \r\n} \r\n/* 设置系统进入图形模式 */ \r\nvoid initialize(void) \r\n{ \r\nint xasp, yasp; /* 用于读x和y方向纵横比*/ \r\nGraphDriver = DETECT; /* 自动检测显示器*/ \r\ninitgraph( &amp;GraphDriver, &amp;GraphMode, \"\" ); \r\n/*初始化图形系统*/ \r\nErrorCode = graphresult(); /*读初始化结果*/ \r\nif( ErrorCode != grOk ) /*如果初始化时出现错误*/ \r\n{ \r\nprintf(\"Graphics System Error: %s\\n\", \r\ngrapherrormsg( ErrorCode ) ); /*显示错误代码*/ \r\nexit( 1 ); /*退出*/ \r\n} \r\ngetpalette( &amp;palette ); /* 读面板信息*/ \r\nMaxColors = getmaxcolor() + 1; /* 读取颜色的最大值*/ \r\nMaxX = getmaxx(); /* 读屏幕尺寸 */ \r\nMaxY = getmaxy(); /* 读屏幕尺寸 */ \r\ngetaspectratio( &amp;xasp, &amp;yasp ); /* 拷贝纵横比到变量中*/ \r\nAspectRatio = (double)xasp/(double)yasp;/* 计算纵横比值*/ \r\n} \r\n/*计算器函数*/ \r\nvoid computer(void) \r\n{ \r\nstruct viewporttype vp; /*定义视口类型变量*/ \r\nint color, height, width; \r\nint x, y,x0,y0, i, j,v,m,n,act,flag=1; \r\nfloat num1=0,num2=0,result; /*操作数和计算结果变量*/ \r\nchar cnum[5],str2[20]={\"\"},c,temp[20]={\"\"}; \r\nchar str1[]=\"1230.456+-789*/Qc=^%\";/* 定义字符串在按钮图形上显示的符号 */ \r\nmwindow( \"Calculator\" ); /* 显示主窗口 */ \r\ncolor = 7; /*设置灰颜色值*/ \r\ngetviewsettings( &amp;vp ); /* 读取当前窗口的大小*/ \r\nwidth=(vp.right+1)/10; /* 设置按钮宽度 */ \r\nheight=(vp.bottom-10)/10 ; /*设置按钮高度 */ \r\nx = width /2; /*设置x的坐标值*/ \r\ny = height/2; /*设置y的坐标值*/ \r\nsetfillstyle(SOLID_FILL, color+3); \r\nbar( x+width*2, y, x+7*width, y+height ); \r\n/*画一个二维矩形条显示运算数和结果*/ \r\nsetcolor( color+3 ); /*设置淡绿颜色边框线*/ \r\nrectangle( x+width*2, y, x+7*width, y+height ); \r\n/*画一个矩形边框线*/ \r\nsetcolor(RED); /*设置颜色为红色*/ \r\nouttextxy(x+3*width,y+height/2,\"0.\"); /*输出字符串\"0.\"*/ \r\nx =2*width-width/2; /*设置x的坐标值*/ \r\ny =2*height+height/2; /*设置y的坐标值*/ \r\nfor( j=0 ; j&lt;4 ; ++j ) /*画按钮*/ \r\n{ \r\nfor( i=0 ; i&lt;5 ; ++i ) \r\n{ \r\nsetfillstyle(SOLID_FILL, color); \r\nsetcolor(RED); \r\nbar( x, y, x+width, y+height ); /*画一个矩形条*/ \r\nrectangle( x, y, x+width, y+height ); \r\nsprintf(str2,\"%c\",str1[j*5+i]); \r\n/*将字符保存到str2中*/ \r\nouttextxy( x+(width/2), y+height/2, str2); \r\nx =x+width+ (width / 2) ; /*移动列坐标*/ \r\n} \r\ny +=(height/2)*3; /* 移动行坐标*/ \r\nx =2*width-width/2; /*复位列坐标*/ \r\n} \r\nx0=2*width; \r\ny0=3*height; \r\nx=x0; \r\ny=y0; \r\ngotoxy(x,y); /*移动光标到x,y位置*/ \r\narrow(); /*显示光标*/ \r\nputimage(x,y,rar,XOR_PUT); \r\nm=0; \r\nn=0; \r\nstrcpy(str2,\"\"); /*设置str2为空串*/ \r\nwhile((v=specialkey())!=45) /*当压下Alt+x键结束程序，否则执行下面的循环*/ \r\n{ \r\nwhile((v=specialkey())!=ENTER) /*当压下键不是回车时*/ \r\n{ \r\nputimage(x,y,rar,XOR_PUT); /*显示光标图象*/ \r\nif(v==RIGHT) /*右移箭头时新位置计算*/ \r\nif(x&gt;=x0+6*width) \r\n/*如果右移，移到尾，则移动到最左边字符位置*/ \r\n{ \r\nx=x0; \r\nm=0; \r\n} \r\nelse \r\n{ \r\nx=x+width+width/2; \r\nm++; \r\n} /*否则，右移到下一个字符位置*/ \r\nif(v==LEFT) /*左移箭头时新位置计算*/ \r\nif(x&lt;=x0) \r\n{ \r\nx=x0+6*width; \r\nm=4; \r\n} /*如果移到头，再左移，则移动到最右边字符位置*/ \r\nelse \r\n{ \r\nx=x-width-width/2; \r\nm--; \r\n} /*否则，左移到前一个字符位置*/ \r\nif(v==UP) /*上移箭头时新位置计算*/ \r\nif(y&lt;=y0) \r\n{ \r\ny=y0+4*height+height/2; \r\nn=3; \r\n} /*如果移到头，再上移，则移动到最下边字符位置*/ \r\nelse \r\n{ \r\ny=y-height-height/2; \r\nn--; \r\n} /*否则，移到上边一个字符位置*/ \r\nif(v==DOWN) /*下移箭头时新位置计算*/ \r\nif(y&gt;=7*height) \r\n{ \r\ny=y0; \r\nn=0; \r\n} /*如果移到尾，再下移，则移动到最上边字符位置*/ \r\nelse \r\n{ \r\ny=y+height+height/2; \r\nn++; \r\n} /*否则，移到下边一个字符位置*/ \r\nputimage(x,y,rar,XOR_PUT); /*在新的位置显示光标箭头*/ \r\n} \r\nc=str1[n*5+m]; /*将字符保存到变量c中*/ \r\nif(isdigit(c)||c=='.') /*判断是否是数字或小数点*/ \r\n{ \r\nif(flag==-1) /*如果标志为-1，表明为负数*/ \r\n{ \r\nstrcpy(str2,\"-\"); /*将负号连接到字符串中*/ \r\nflag=1; \r\n} /*将标志值恢复为1*/ \r\nsprintf(temp,\"%c\",c); /*将字符保存到字符串变量temp中*/ \r\nstrcat(str2,temp); /*将temp中的字符串连接到str2中*/ \r\nsetfillstyle(SOLID_FILL,color+3); \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); \r\nouttextxy(5*width,height,str2); /*显示字符串*/ \r\n} \r\nif(c=='+') \r\n{ \r\nnum1=atof(str2); /*将第一个操作数转换为浮点数*/ \r\nstrcpy(str2,\"\"); /*将str2清空*/ \r\nact=1; /*做计算加法标志值*/ \r\nsetfillstyle(SOLID_FILL,color+3); \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); \r\nouttextxy(5*width,height,\"0.\"); /*显示字符串*/ \r\n} \r\nif(c=='-') \r\n{ \r\nif(strcmp(str2,\"\")==0) /*如果str2为空，说明是负号，而不是减号*/ \r\nflag=-1; /*设置负数标志*/ \r\nelse \r\n{ \r\nnum1=atof(str2); /*将第二个操作数转换为浮点数*/ \r\nstrcpy(str2,\"\"); /*将str2清空*/ \r\nact=2; /*做计算减法标志值*/ \r\nsetfillstyle(SOLID_FILL,color+3); \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); /*画矩形*/ \r\nouttextxy(5*width,height,\"0.\"); /*显示字符串*/ \r\n} \r\n} \r\nif(c=='*') \r\n{ \r\nnum1=atof(str2); /*将第二个操作数转换为浮点数*/ \r\nstrcpy(str2,\"\"); /*将str2清空*/ \r\nact=3; /*做计算乘法标志值*/ \r\nsetfillstyle(SOLID_FILL,color+3); bar(2*width+width/2,height/2,15*width/2,3*height/2); \r\nouttextxy(5*width,height,\"0.\"); /*显示字符串*/ \r\n} \r\nif(c=='/') \r\n{ \r\nnum1=atof(str2); /*将第二个操作数转换为浮点数*/ \r\nstrcpy(str2,\"\"); /*将str2清空*/ \r\nact=4; /*做计算除法标志值*/ \r\nsetfillstyle(SOLID_FILL,color+3); \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); \r\nouttextxy(5*width,height,\"0.\"); /*显示字符串*/ \r\n} \r\nif(c=='^') \r\n{ \r\nnum1=atof(str2); /*将第二个操作数转换为浮点数*/ \r\nstrcpy(str2,\"\"); /*将str2清空*/ \r\nact=5; /*做计算乘方标志值*/ \r\nsetfillstyle(SOLID_FILL,color+3); /*设置用淡绿色实体填充*/ \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); /*画矩形*/ \r\nouttextxy(5*width,height,\"0.\"); /*显示字符串*/ \r\n} \r\nif(c=='%') \r\n{ \r\nnum1=atof(str2); /*将第二个操作数转换为浮点数*/ \r\nstrcpy(str2,\"\"); /*将str2清空*/ \r\nact=6; /*做计算模运算乘方标志值*/ \r\nsetfillstyle(SOLID_FILL,color+3); /*设置用淡绿色实体填充*/ \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); /*画矩形*/ \r\nouttextxy(5*width,height,\"0.\"); /*显示字符串*/ \r\n} \r\nif(c=='=') \r\n{ \r\nnum2=atof(str2); /*将第二个操作数转换为浮点数*/ \r\nswitch(act) /*根据运算符号计算*/ \r\n{ \r\ncase 1:result=num1+num2;break; /*做加法*/ \r\ncase 2:result=num1-num2;break; /*做减法*/ \r\ncase 3:result=num1*num2;break; /*做乘法*/ \r\ncase 4:result=num1/num2;break; /*做除法*/ \r\ncase 5:result=pow(num1,num2);break; /*做x的y次方*/ \r\ncase 6:result=fmod(num1,num2);break; /*做模运算*/ \r\n} \r\nsetfillstyle(SOLID_FILL,color+3); /*设置用淡绿色实体填充*/ \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); /*覆盖结果区*/ \r\nsprintf(temp,\"%f\",result); /*将结果保存到temp中*/ \r\nouttextxy(5*width,height,temp); /*显示结果*/ \r\n} \r\nif(c=='c') \r\n{ \r\nnum1=0; /*将两个操作数复位0，符号标志为1*/ \r\nnum2=0; \r\nflag=1; \r\nstrcpy(str2,\"\"); /*将str2清空*/ \r\nsetfillstyle(SOLID_FILL,color+3); /*设置用淡绿色实体填充*/ \r\nbar(2*width+width/2,height/2,15*width/2,3*height/2); /*覆盖结果区*/ \r\nouttextxy(5*width,height,\"0.\"); /*显示字符串*/ \r\n} \r\nif(c=='Q')exit(0); /*如果选择了q回车，结束计算程序*/ \r\n} \r\nputimage(x,y,rar,XOR_PUT); /*在退出之前消去光标箭头*/ \r\nreturn; /*返回*/ \r\n} \r\n/*窗口函数*/ \r\nvoid mwindow( char *header ) \r\n{ \r\nint height; \r\ncleardevice(); /* 清除图形屏幕 */ \r\nsetcolor( MaxColors - 1 ); /* 设置当前颜色为白色*/ \r\nsetviewport( 20, 20, MaxX/2, MaxY/2, 1 ); /* 设置视口大小 */ \r\nheight = textheight( \"H\" ); /* 读取基本文本大小 */ \r\nsettextstyle( DEFAULT_FONT, HORIZ_DIR, 1 );/*设置文本样式*/ \r\nsettextjustify( CENTER_TEXT, TOP_TEXT );/*设置字符排列方式*/ \r\nouttextxy( MaxX/4, 2, header ); /*输出标题*/ \r\nsetviewport( 20,20+height+4, MaxX/2+4, MaxY/2+20, 1 ); /*设置视口大小*/ \r\ndrawboder(); /*画边框*/ \r\n} \r\nvoid drawboder(void) /*画边框*/ \r\n{ \r\nstruct viewporttype vp; /*定义视口类型变量*/ \r\nsetcolor( MaxColors - 1 ); /*设置当前颜色为白色 */ \r\nsetlinestyle( SOLID_LINE, 0, NORM_WIDTH );/*设置画线方式*/ \r\ngetviewsettings( &amp;vp );/*将当前视口信息装入vp所指的结构中*/ \r\nrectangle( 0, 0, vp.right-vp.left, vp.bottom-vp.top ); /*画矩形边框*/ \r\n} \r\n/*设计鼠标图形函数*/ \r\nint arrow() \r\n{ \r\nint size; \r\nint raw[]={4,4,4,8,6,8,14,16,16,16,8,6,8,4,4,4}; /*定义多边形坐标*/ \r\nsetfillstyle(SOLID_FILL,2); /*设置填充模式*/ \r\nfillpoly(8,raw); /*画出一光标箭头*/ \r\nsize=imagesize(4,4,16,16); /*测试图象大小*/ \r\nrar=malloc(size); /*分配内存区域*/ \r\ngetimage(4,4,16,16,rar); /*存放光标箭头图象*/ \r\nputimage(4,4,rar,XOR_PUT); /*消去光标箭头图象*/ \r\nreturn 0; \r\n} \r\n/*按键函数*/ \r\nint specialkey(void) \r\n{ \r\nint key; \r\nwhile(bioskey(1)==0); /*等待键盘输入*/ \r\nkey=bioskey(0); /*键盘输入*/ \r\nkey=key&amp;0xff? key&amp;0xff:key&gt;&gt;8; /*只取特殊键的扫描值，其余为0*/ \r\nreturn(key); /*返回键值*/ \r\n}", "Konwledge_Point": "算术运算", "Question": ["c语言设计袖珍计算器，不要太复杂的，我是个新手", ["要求实现：", "\n计算加、减、乘、除、乘方、开方。在用户界面上设置两个编辑框，分别用于输入左操作数和右操作数，两个静态文本分别用于显示“=”号和运算结果，其中用六个单选按钮用于选择运算符。", "\n能够存储操作数、操作码和结果；执行算术操作；实现控制功能，如清除、全部清除和改变符号；根据需要产生在计算引擎中存储的量；对外报告错误时，保存内部状态。", "\n实现扩展1：接收键盘输入；识别操作和数字操作数；从用户输入产生下一个操作和操作数；显示操作码、操作数、结果、错误；限制错误的输入。", "\n实现扩展2：建立合适大小的模拟LCD窗口；在LCD窗口中显示给定的字符串；显示给定的单一字符操作码；清除LCD窗口。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; Solution(object):    def evalRPN(self, tokens):        &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;        :type tokens: List[str]        :rtype: int        &amp;#34;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;        &lt;span class=\"hljs-keyword\"&gt;stack&lt;/span&gt; &amp;#61; []        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;token&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; tokens:            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;token&lt;/span&gt; not &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; [&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#43;&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;*&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;/&amp;#34;&lt;/span&gt;]:                &lt;span class=\"hljs-keyword\"&gt;stack&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(int(&lt;span class=\"hljs-keyword\"&gt;token&lt;/span&gt;))            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:                num1 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;stack&lt;/span&gt;.pop()                num2 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;stack&lt;/span&gt;.pop()                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;token&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#43;&amp;#34;&lt;/span&gt;:                    &lt;span class=\"hljs-keyword\"&gt;stack&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(num1 &amp;#43; num2)                elif &lt;span class=\"hljs-keyword\"&gt;token&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt;:                    &lt;span class=\"hljs-keyword\"&gt;stack&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(num2 - num1)                elif &lt;span class=\"hljs-keyword\"&gt;token&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;*&amp;#34;&lt;/span&gt;:                    &lt;span class=\"hljs-keyword\"&gt;stack&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(num1 * num2)                elif &lt;span class=\"hljs-keyword\"&gt;token&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;/&amp;#34;&lt;/span&gt;:                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; num1 * num2 &amp;lt; 0:                        result &amp;#61; -((-num2) &lt;span class=\"hljs-comment\"&gt;// num1)                        stack.append(result)                    else:                        stack.append(num2 // num1)            print(stack)        return stack.pop()&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["用python解决逆波兰表达式求值问题", ["逆波兰表达式求值", "根据 逆波兰表示法(", "https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437)%EF%BC%8C%E6%B1%82%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%80%BC%E3%80%82", "\n", "有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。", "\n", "说明：", "\n", "整数除法只保留整数部分。", "给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。", "\n", "示例 1：", "\n", "输入：tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]输出：9解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9", "示例 2：", "\n", "输入：tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]输出：6解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6", "示例 3：", "\n", "输入：tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"", "\",\"/\",\"", "\",\"17\",\"+\",\"5\",\"+\"]输出：22解释：该算式转化为常见的中缀算术表达式为：((10 * (6 / ((9 + 3) * -11))) + 17) + 5= ((10 * (6 / (12 * -11))) + 17) + 5= ((10 * (6 / -132)) + 17) + 5= ((10 * 0) + 17) + 5= (0 + 17) + 5= 17 + 5= 22", "\n", "提示：", "\n", "1 <= tokens.length <= 10^4", "tokens[i] 要么是一个算符（\"+\"、\"-\"、\"*\" 或 \"/\"），要么是一个在范围 [-200, 200] 内的整数", "\n", "逆波兰表达式：", "\n", "逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。", "\n", "平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。", "该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。", "逆波兰表达式主要有以下两个优点：", "\n", "去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。", "适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;修改如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;partition2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* string, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* Str, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; position)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j;\n    i &amp;#61; position;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (string[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;)\n    {\n        j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (string[i] &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; string[i] &amp;lt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;) {   &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (string[i] &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; string[i] &amp;lt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; (string[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;))\n            {\n                Str[j] &amp;#61; string[i];\n                &amp;#43;&amp;#43;i;\n                &amp;#43;&amp;#43;j;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{ &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; ((string[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt; || string[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; || string[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; || string[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;) &amp;amp;&amp;amp; (string[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;))\n            {\n                &lt;span class=\"hljs-comment\"&gt;//Str[j] &amp;#61; &amp;#39;\\0&amp;#39;;   //修改&lt;/span&gt;\n                &lt;span class=\"hljs-comment\"&gt;//&amp;#43;&amp;#43;j;             //修改&lt;/span&gt;\n                Str[j] &amp;#61; string[i];\n                &amp;#43;&amp;#43;i;\n                &amp;#43;&amp;#43;j;\n            }\n        }\n        Str[j] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;    &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; i;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; choice;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; string[&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; Str[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; position &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\t\\t①英文句子分割        ②算术表达式分割\\n请选择需要进行的操作&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;choice);\n    &lt;span class=\"hljs-built_in\"&gt;getchar&lt;/span&gt;();\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Please input string(length&amp;lt;&amp;#61;50): &amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;gets_s&lt;/span&gt;(string);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\nPartition result: \\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (choice &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; ((position &amp;#61; &lt;span class=\"hljs-built_in\"&gt;partition1&lt;/span&gt;(string, Str, position)) !&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)\n        {\n            &amp;#43;&amp;#43;k;\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Partition %d : %s\\n&amp;#34;&lt;/span&gt;, k, Str);\n        }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (choice &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; ((position &amp;#61; &lt;span class=\"hljs-built_in\"&gt;partition2&lt;/span&gt;(string, Str, position)) !&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)\n        {\n            &amp;#43;&amp;#43;k;\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Partition %d : %s\\n&amp;#34;&lt;/span&gt;, k, Str);\n        }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;partition2&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt;* &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt;* Str, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; position&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i, j;\n    i &amp;#61; position;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;)\n    {\n        j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[i] &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[i] &amp;lt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;) {   &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[i] &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[i] &amp;lt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; (&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;))\n                Str[j&amp;#43;&amp;#43;] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[i&amp;#43;&amp;#43;];\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{ &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; ((&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt; || &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; || &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; || &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[i] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;) &amp;amp;&amp;amp; (&lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;))\n                Str[j&amp;#43;&amp;#43;] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;[i&amp;#43;&amp;#43;];\n        }\n        Str[j] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;   &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; i;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "算术运算", "Question": ["为什么没有打印出运算符？", ["分割运算对象和运算法，但是运算法打印不出来是为什么？", "\n", "\n", "int", " ", "partition2", "(", "char", "* string, ", "char", "* Str, ", "int", " position)", "\n", "{\n    ", "int", " i, j;\n    i = position;\n    ", "if", " (string[i] != ", "'\\0'", ")\n    {\n        j = ", "0", ";\n        ", "while", " (string[i] >=", "'0'", "&&string[i]<=", "'9'", " && (string[i] != ", "'\\0'", "))\n        {\n            Str[j] = string[i];\n            ++i;\n            ++j;\n        }\n        ", "while", " ((string[i] == ", "'+'", " || string[i] == ", "'-'", " || string[i] == ", "'*'", " || string[i] == ", "'/'", ")&&(string[i]!=", "'\\0'", "))\n        {\n            Str[j] = ", "'\\0'", ";\n            ++j;\n            Str[j] = string[i];\n            ++i;\n            ++j;\n        }\n        ", "return", " i;\n    }\n    ", "else", "\n        ", "return", " ", "-1", ";\n}\n\n", "void", " ", "main", "()", "\n", "{\n    ", "int", " choice;\n    ", "char", " string[", "50", "];\n    ", "char", " Str[", "20", "];\n    ", "int", " position=", "0", ";\n    ", "int", " k=", "0", ";\n    ", "printf", "(", "\"\\t\\t①英文句子分割        ②算术表达式分割\\n请选择需要进行的操作：\"", ");\n    ", "scanf", "(", "\"%d\"", ", &choice);\n    ", "getchar", "();\n    ", "printf", "(", "\"Please input string(length<=50): \"", ");\n    ", "gets_s", "(string);\n    ", "printf", "(", "\"\\nPartition result: \\n\"", ");\n    ", "if", "(choice==", "1", ")\n        ", "while", " ((position = ", "partition1", "(string, Str, position)) != ", "-1", ")\n        {\n            ++k;\n            ", "printf", "(", "\"Partition %d : %s\\n\"", ", k, Str);\n        }\n    ", "if", "(choice==", "2", ")\n        ", "while", " ((position = ", "partition2", "(string, Str, position)) != ", "-1", ")\n        {\n            ++k;\n            ", "printf", "(", "\"Partition %d : %s\\n\"", ", k, Str);\n        }\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;case&amp;#39;&amp;lt;&amp;#39;&lt;br /&gt;case&amp;#39;&amp;#61;&amp;#39;&lt;br /&gt;case&amp;#39;&amp;gt;&amp;#39;&lt;br /&gt;这些case 与&amp;#39;&amp;lt;&amp;#39;符号之间没有空格&amp;#xff0c;连在一起了吧&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["可以输入 但没有输出 等好久也没有", ["主函数", "\n", "/*\n程序运行时，输入合法的算术表达式（中间值及最终结果要在0～9之间，可以包括加减乘除和括号），便可输出相应的计算结果。\n*/", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "\"stack.h\"", "\n", "int", " ", "main", "()", "\n", "{\n     ", "printf", "(", "\"请输入算术表达式（中间值及最终结果要在0-9之间）,并以#结束\\n\"", ");\n     ", "printf", "(", "\"运算结果为：%f\\n\"", ",", "EvaluateExpression", "());\n     ", "return", " ", "0", ";\n } \n\n", "\n", ".h", "\n", "\n\n", "#", "define", " STACK_INT_SIZE 100", "\n", "#", "define", " STACKINCREMENT 10", "\n", "#", "define", " True 1", "\n", "#", "define", " False 0", "\n", "#", "define", " OVERFLOW -2", "\n", "#", "define", " OK 1", "\n", "#", "define", " ERROR -1", "\n", "typedef", " ", "char", " SElemType;\n\n", "typedef", " ", "struct", "{\n    SElemType *base;\n    SElemType *top;\n    ", "int", " stacksize;\n}SqStack; \n", "int", " ", "InitStack", "(SqStack &S)", ";\n", "int", " ", "Push", "(SqStack &S,SElemType e)", ";\n", "int", " ", "Pop", "(SqStack &S,SElemType &e)", ";\n", "int", " ", "GetTop", "(SqStack S,SElemType &e)", ";\n\n\n\n", "int", " ", "In", "(", "char", " c)", ";", "//判断c是否为运算符 ", "\n", "int", " ", "Precede", "(", "char", " t1,", "char", " t2)", ";", "//判断运算符t1 t2的优先级 ", "\n", "int", " ", "Operate", "(", "int", " a,", "char", " theta,", "int", " b)", ";", "//对a和b进行二元运算theta ", "\n", "//OperandType EvaluateExpression();", "\n", "char", " ", "EvaluateExpression", "()", ";\n", "\n", "#include<stdio.h>\n#include", "\"stack.h\"", "\n#include<stdlib.h>\n#include<malloc.h> \nint In(char c)", "//判断c是否为运算符 ", "\n{\n    switch(c){\n        case", "'+'", ":\n            ", "return", " True;\n        case", "'-'", ":\n             ", "return", " True;\n        case", "'*'", ":\n             ", "return", " True;\n        case", "'/'", ":\n             ", "return", " True;\n        case", "'='", ":\n             ", "return", " True;\n        case", "'('", ":\n             ", "return", " True;\n        case", "')'", ":\n             ", "return", " True;\n        case", "'#'", ":\n              ", "return", " OVERFLOW;     \n        default: ", "return", " False;                                   \n    }\n}\n\nint Precede(char t1,char t2)", "//判断运算符t1 t2的优先级 ", "\n{\n    int i,j;\n    char pre[][", "7", "] = {\n            ", "//将运算符之间的优先级制作成一张表格", "\n            {", "'>'", ", ", "'>'", ", ", "'<'", ", ", "'<'", ", ", "'<'", ", ", "'>'", ", ", "'>'", "},\n            {", "'>'", ", ", "'>'", ", ", "'<'", ", ", "'<'", ", ", "'<'", ", ", "'>'", ", ", "'>'", "},\n            {", "'>'", ", ", "'>'", ", ", "'>'", ", ", "'>'", ", ", "'<'", ", ", "'>'", ", ", "'>'", "},\n            {", "'>'", ", ", "'>'", ", ", "'>'", ", ", "'>'", ", ", "'<'", ", ", "'>'", ", ", "'>'", "},\n            {", "'<'", ", ", "'<'", ", ", "'<'", ", ", "'<'", ", ", "'<'", ", ", "'='", ", ", "'0'", "},\n            {", "'>'", ", ", "'>'", ", ", "'>'", ", ", "'>'", ", ", "'0'", ", ", "'>'", ", ", "'>'", "},\n            {", "'<'", ", ", "'<'", ", ", "'<'", ", ", "'<'", ", ", "'<'", ", ", "'0'", ", ", "'='", "}\n    };\n\n    ", "/*if(t2=='+')\n    {\n        if(t1=='('||t1=='#')    return '<';\n        return '>';\n    }\n    if(t2=='-')\n    {\n        if(t1=='('||t1=='#')    return '<';\n        return '>';\n    }\n    if(t2=='*')\n    {\n        if(t1=='*'||t1=='/'||t1==')')    return '>';\n        return '<';\n    }\n    if(t2=='/')\n    {\n        if(t1=='*'||t1=='/'||t1==')')    return '>';\n        return '<';\n    }\n    if(t2=='(')    return '<';\n    if(t2==')')\n    {\n        if(t1=='(')    return '=';\n        return '>';\n    }\n    if(t2=='#')\n    {\n        if(t1=='#')    return '=';\n        return '>';\n    }\n    */", "\n    switch (t1) {\n        case ", "'+'", ":\n            i = ", "0", ";\n            ", "break", ";\n        case ", "'-'", ":\n            i = ", "1", ";\n            ", "break", ";\n        case ", "'*'", ":\n            i = ", "2", ";\n            ", "break", ";\n        case ", "'/'", ":\n            i = ", "3", ";\n            ", "break", ";\n        case ", "'('", ":\n            i = ", "4", ";\n            ", "break", ";\n        case ", "')'", ":\n            i = ", "5", ";\n            ", "break", ";\n        case ", "'#'", ":\n            i = ", "6", ";\n            ", "break", ";\n        default:\n            ", "return", " OVERFLOW;\n    }\n    switch (t2) {\n        case ", "'+'", ":\n            j = ", "0", ";\n            ", "break", ";\n        case ", "'-'", ":\n            j = ", "1", ";\n            ", "break", ";\n        case ", "'*'", ":\n            j = ", "2", ";\n            ", "break", ";\n        case ", "'/'", ":\n            j = ", "3", ";\n            ", "break", ";\n        case ", "'('", ":\n            j = ", "4", ";\n            ", "break", ";\n        case ", "')'", ":\n            j = ", "5", ";\n            ", "break", ";\n        case ", "'#'", ":\n            j = ", "6", ";\n            ", "break", ";\n        default:\n            ", "return", " OVERFLOW;\n    }\n    ", "return", " pre[i][j];\n\n\n } \n\nint Operate(int a,char theta,int b)", "//对a和b进行二元运算theta ", "\n{\n    switch(theta){\n        case", "'+'", ":\n           ", "return", " a+b;\n        case", "'-'", ":\n            ", "return", " a-b;\n        case", "'*'", ":\n            ", "return", " a*b;\n        case", "'/'", ":\n            ", "return", " a/b;             \n    }\n}\nint InitStack(SqStack &S)\n{\n    S.base=(SElemType *)malloc(STACK_INT_SIZE *sizeof(SElemType));\n    ", "if", "(!S.base) exit(OVERFLOW);", "//存储分配失败", "\n    S.top=S.base;\n    S.stacksize= STACK_INT_SIZE;", "//初始容量 ", "\n    ", "return", " OK; \n}\n\nint Push(SqStack &S,SElemType e)\n{\n    ", "if", "(S.top-S.base>=S.stacksize){\n        S.base=(SElemType *)realloc(S.base,(S.stacksize+STACKINCREMENT)*sizeof(SElemType));\n        ", "if", "(!S.base) exit(OVERFLOW);\n        S.top=S.base+S.stacksize;\n        S.stacksize+=STACKINCREMENT;\n    }\n    *S.top++=e;\n    ", "return", " OK;\n}\n\nint Pop(SqStack &S,SElemType *e)\n{\n    ", "if", "(S.top==S.base)   ", "return", " ERROR;\n    *e=*--S.top;\n    ", "return", " OK;\n}\n\nint GetTop(SqStack S,SElemType &e)\n{\n    ", "if", "(S.top==S.base) ", "return", " ERROR;\n    e=*(S.top-", "1", ");\n    ", "return", " OK;\n}\n", "//OperandType EvaluateExpression()", "\nchar EvaluateExpression()\n{\n    SqStack OPTR;\n    SqStack OPND;\n    char c,x,a,b,theta,e;\n    InitStack(OPTR);", "//运算符栈 ", "\n    Push(OPTR,", "'#'", ");\n    InitStack(OPND);", "//运算数栈 ", "\n    c=getchar();", "//接受字符", "\n    \n    ", "while", "(c!=", "'#'", "||GetTop(OPTR,e)!=", "'#'", ")\n    {\n        ", "if", "(!In(c)){\n            Push(OPND,c-", "'0'", ");\n            c=getchar();\n        }\n        ", "else", " \n            switch(Precede(GetTop(OPTR,e),c))\n            {\n                case", "'<'", ":\n                    Push(OPTR,c);\n                    c=getchar();\n                    ", "break", ";\n                case", "'='", ":\n                     Pop(OPTR,&x);\n                    c=getchar();\n                    ", "break", ";\n                case", "'>'", ":\n                    Pop(OPTR,&theta);\n                    Pop(OPND,&b);\n                    Pop(OPND,&a);\n                    Push(OPND,Operate(a,theta,b));\n                    ", "break", ";\n             } \n     } \n     ", "return", " GetTop(OPND,e);\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;哈哈&amp;#xff0c;我看了一下&amp;#xff0c;这样写应该更容易理解。思路都一样&amp;#xff0c;就是先选择商品&amp;#xff0c;再选择数量&amp;#xff0c;一直循环。输入0就结束。这样写是不是容易理解很多&amp;#xff1f;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-java\"&gt;public class Test {\n    public static void main(String[] args) {\n        System.out.println(&amp;#34;商品编号\\t\\t商品名称\\r\\n1\\t\\t\\t钢笔\\n2\\t\\t\\t笔记本\\n3\\t\\t\\tMP3&amp;#34;);\n        Scanner scan &amp;#61; new Scanner(System.in);\n        int number &amp;#61; -1;//接收所有的输入记录\n        int penNo &amp;#61; 0;//统计所有的铅笔数量\n        int diaryNo &amp;#61; 0;//统计所有的笔记本数量\n        int Mp3No &amp;#61; 0;//统计所有的Mp3数量\n        int currentGoods &amp;#61; 0;\n        while (true) {\n            //选择商品\n            System.out.println(&amp;#34;请选择要购买的商品编号&amp;#xff1a;\\t(如需结账&amp;#xff0c;请输入0)&amp;#34;);\n            currentGoods &amp;#61; scan.nextInt();\n            if (currentGoods &amp;#61;&amp;#61; 0) {//输入0结账\n                System.out.println(&amp;#34;结账中......&amp;#34;);\n                break;\n            }\n            switch (currentGoods) {\n                case 1:\n                    System.out.println(&amp;#34;请输入要购买的钢笔数量&amp;#34;);\n                    break;\n                case 2:\n                    System.out.println(&amp;#34;请输入要购买的笔记本数量&amp;#34;);\n                    break;\n                case 3:\n                    System.out.println(&amp;#34;请输入要购买的Mp3数量&amp;#34;);\n                    break;\n            }\n            //选择数量\n            number &amp;#61; scan.nextInt();\n            if (number &amp;#61;&amp;#61; 0) {//输入0结账\n                System.out.println(&amp;#34;结账中......&amp;#34;);\n                break;\n            }\n            switch (currentGoods) {//根据输入的商品编号&amp;#xff0c;计算总的商品数\n                case 1:\n                    penNo &amp;#43;&amp;#61; number;\n                    break;\n                case 2:\n                    diaryNo &amp;#43;&amp;#61; number;\n                    break;\n                case 3:\n                    Mp3No &amp;#43;&amp;#61; number;\n                    break;\n            }\n            String msg &amp;#61; &amp;#34;&amp;#34;;\n            if (penNo !&amp;#61; 0 || diaryNo !&amp;#61; 0 || Mp3No !&amp;#61; 0) {\n                msg &amp;#43;&amp;#61; (penNo !&amp;#61; 0) ? &amp;#34;钢笔&amp;#xff1a;&amp;#34; &amp;#43; penNo &amp;#43; &amp;#34;支&amp;#xff1b;&amp;#34; : &amp;#34;&amp;#34;;\n                msg &amp;#43;&amp;#61; (diaryNo !&amp;#61; 0) ? &amp;#34;笔记本&amp;#xff1a;&amp;#34; &amp;#43; diaryNo &amp;#43; &amp;#34;台&amp;#xff1b;&amp;#34; : &amp;#34;&amp;#34;;\n                msg &amp;#43;&amp;#61; (Mp3No !&amp;#61; 0) ? &amp;#34;Mp3&amp;#xff1a;&amp;#34; &amp;#43; Mp3No &amp;#43; &amp;#34;个&amp;#xff1b;&amp;#34; : &amp;#34;&amp;#34;;\n                System.out.println(&amp;#34;已加入购物车的商品&amp;#xff1a;&amp;#34; &amp;#43; msg);\n            }\n        }\n        double pen &amp;#61; 28.0;//钢笔的单价&amp;#xff0c;数据类型双精度浮点型。此处的钢笔已经被赋值为1.\n        double diary &amp;#61; 15.0;\n        double Mp3 &amp;#61; 128.0;//要实现的是商品顺序是打乱的&amp;#xff0c;实现商品数量的累加&amp;#xff0c;最后计算总值。同时商品数量是很大的&amp;#xff0c;不可能有一千种商品你就敲一千行代码。a\n        double discount &amp;#61; 0.9;//事实证明是自己想多了&amp;#xff0c;显然这个更加人性化。  商品的种类单价是可以通过编号制表储存在表格文件中。需要用的时候读取a\n        System.out.println(&amp;#34;*********消费清单*********&amp;#34;);\n        System.out.println(&amp;#34;商品\\t&amp;#34; &amp;#43; &amp;#34;单价\\t&amp;#34; &amp;#43; &amp;#34;数量\\t&amp;#34; &amp;#43; &amp;#34;金额&amp;#34;);//\\t制表排版\n        System.out.println(&amp;#34;钢笔\\t&amp;#34; &amp;#43; pen &amp;#43; &amp;#34;\\t&amp;#34; &amp;#43; penNo &amp;#43; &amp;#34;\\t&amp;#34; &amp;#43; pen * penNo);//因此此时的不带引号的pen输出为1.\n        System.out.println(&amp;#34;笔记本\\t&amp;#34; &amp;#43; diary &amp;#43; &amp;#34;\\t&amp;#34; &amp;#43; diaryNo &amp;#43; &amp;#34;\\t&amp;#34; &amp;#43; diary * diaryNo);\n        System.out.println(&amp;#34;Mp3\\t&amp;#34; &amp;#43; Mp3 &amp;#43; &amp;#34;\\t&amp;#34; &amp;#43; Mp3No &amp;#43; &amp;#34;\\t&amp;#34; &amp;#43; Mp3 * Mp3No);\n        System.out.println(&amp;#34;会员享受折扣 &amp;#xff1a;\t0.9&amp;#34;);//无须改进\n        double All &amp;#61; (pen * penNo &amp;#43; diary * diaryNo &amp;#43; Mp3 * Mp3No) * discount;//待改进\n        System.out.println(&amp;#34;总计金额\\t\\t&amp;#34; &amp;#43; &amp;#34;¥&amp;#34; &amp;#43; All);//总金额的算术表达或说是逻辑运算\n        System.out.print(&amp;#34;付款金额&amp;#xff1a;&amp;#34;);\n        Scanner pay &amp;#61; new Scanner(System.in);\n        int Pay &amp;#61; pay.nextInt();//付款金额是在已经计算完商品总价之后.总感觉怪怪的。a\n        //int Pay &amp;#61; 200;\n        System.out.println(&amp;#34;付款金额\\t\\t&amp;#34; &amp;#43; &amp;#34;¥&amp;#34; &amp;#43; Pay);\n        double change &amp;#61; Pay - All;\n        System.out.println(&amp;#34;找零\\t\\t&amp;#34; &amp;#43; &amp;#34;¥&amp;#34; &amp;#43; String.format(&amp;#34;%.2f&amp;#34;, change));//这里是实现输出的数据保留小数数量String.format是四舍五入的函数a\n        int integral &amp;#61; (int) All / 10;//\n        System.out.println(&amp;#34;所获积分\\t\\t&amp;#34; &amp;#43; integral);\n    }\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["初学Java。问题已经在代码段里注释了！求大佬援助！！", ["\n", "//直接照抄书上的代码25页\nimport java.util.Scanner;//21年三月十三号的添加a 今日总计需要解决的问题是读取数据，商品顺序的任意输入以及累加，输出语句的改进而不是一条一条的敲 a\npublic class copy_from_page25 \n{\n\tpublic static void main (String[]args) \n\t{\n\t\tSystem.out.println(\"输入商品数量:（目前只有三种商品而且顺序固定）\");//但是这样的话商品清单的输出是固定的。a\n\t\tScanner scan=new Scanner(System.in);\n\t\tdouble pen = 28.0;//钢笔的单价，数据类型双精度浮点型。此处的钢笔已经被赋值为1.\n\t\tint penNo = scan.nextInt();//钢笔的数量，数据类型整型\n\t\tdouble diary = 15.0;\n\t\tint diaryNo = scan.nextInt();//目前的问题三种产品，顺序固定，模拟生活场景这个还不如你拿计算机敲。a\n\t\tdouble Mp3 = 128.0;//要实现的是商品顺序是打乱的，实现商品数量的累加，最后计算总值。同时商品数量是很大的，不可能有一千种商品你就敲一千行代码。a\n\t\tint Mp3No = scan.nextInt();//预测所有商品的数量都是一样的，那怎么实现同时输入多个达成依次使用呢？(解决)a\n\t\tdouble discount = 0.9;//事实证明是自己想多了，显然这个更加人性化。  商品的种类单价是可以通过编号制表储存在表格文件中。需要用的时候读取a\n\t\tSystem.out.println(\"*********消费清单*********\");\n\t\tSystem.out.println(\"商品\\t\" + \"单价\\t\" + \"数量\\t\"+\"金额\");//\\t制表排版\n\t\tSystem.out.println(\"钢笔\\t\" + pen + \"\\t\" + penNo + \"\\t\" + pen * penNo);//因此此时的不带引号的pen输出为1.\n\t\tSystem.out.println(\"笔记本\\t\" + diary + \"\\t\" + diaryNo + \"\\t\" + diary * diaryNo);\n\t\tSystem.out.println(\"Mp3\\t\" + Mp3 + \"\\t\" + Mp3No + \"\\t\" + Mp3 * Mp3No);\n\t\tSystem.out.println(\"会员享受折扣 ：\t0.9\");//无须改进\n\t\tdouble All = (pen * penNo + diary * diaryNo + Mp3 * Mp3No) * discount;//待改进\n\t\tSystem.out.println(\"总计金额\\t\\t\" + \"¥\" + All);//总金额的算术表达或说是逻辑运算\n\t\tSystem.out.print(\"付款金额：\");\n\t\tScanner pay=new Scanner(System.in);\n\t\tint Pay = pay.nextInt();//付款金额是在已经计算完商品总价之后.总感觉怪怪的。a\n\t\t//int Pay = 200;\n\t\tSystem.out.println(\"付款金额\\t\\t\" + \"¥\" + Pay);\n\t\tdouble change = Pay - All;\n\t\tSystem.out.println(\"找零\\t\\t\" + \"¥\" + String.format(\"%.2f\",change));//这里是实现输出的数据保留小数数量String.format是四舍五入的函数a\n\t\tint integral = (int)All / 10;//\n\t\tSystem.out.println(\"所获积分\\t\\t\" + integral);\n\t}//其实这个代码都没有实现就是动态输入输出的过程，考虑到学了c的缘故，可以尝试添加输入语句实现这个代码的动态使用。\n}//商品有限，超市扫码，静态的是价格，动态的是数量，因此商品输出语句只有一条商品名和单价数量都是自动添加（赋值）a\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;initstack函数调用不是这么写的&lt;br /&gt;写为&lt;code class=\"language-javascript\"&gt;InitStack(&amp;amp;s1);&lt;/code&gt;这种形式试一下&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["C语言利用栈求中缀表达式", ["\n#include<stdio.h>\n#include<malloc.h> \n#include<stdlib.h>\n\n#define STACK_INIT_SIZE ", "20", "\n#define STACKINCREMENT ", "20", "\n\ntypedef struct {\n    int* base;\n    int* top;\n    int stacksize;\n}SqStack;\n\nint InitStack(SqStack &S);\nint Push(SqStack& S, char e);\nint Pop(SqStack& S, char& e);\nchar GetTop(SqStack S);\nint In(char ch); ", "//运算符判断", "\nchar Precede(char ch1, char ch2); ", "//优先级判断", "\nint Operate(double a, char theta, double b); ", "//运算方式", "\nint Tz(char* str);", "// 弹栈 ", "\n\nint main() {\n    char str[STACK_INIT_SIZE] = {};", "//输入的字符串算术表达式", "\n    char ch = ", "0", ";\n    int output = ", "0", ";\n    ", "while", " (", "true", ")\n    {\n        scanf(", "\"\"", ",&str);", "//输入", "\n        ch = str[", "0", "];\n        ", "if", " (ch == ", "'='", ")\n            ", "break", ";\n        ", "else", "\n        {\n            output = Tz(str);\n        }\n    }\n    ", "return", " ", "0", ";\n}\n\nint InitStack(SqStack &S) {\n    S.base = (int*)malloc(STACK_INIT_SIZE * sizeof(int));\n    ", "if", " (!S.base)\n        ", "return", " ", "0", ";\n    S.top = S.base;\n    S.stacksize = STACK_INIT_SIZE;\n    ", "return", " ", "1", ";\n}\nint Push(SqStack& S, char e) {\n    ", "if", " (S.top - S.base >= S.stacksize) {\n        S.base = (int*)realloc(S.base, (S.stacksize + STACKINCREMENT));\n        ", "if", " (!S.base)\n            ", "return", " ", "0", ";\n        S.top = S.base + S.stacksize;\n        S.stacksize += STACKINCREMENT;\n    }\n    *S.top = e;\n    S.top++;\n    ", "return", " ", "1", ";\n}\nint Pop(SqStack& S, char& e){\n    ", "if", " (S.top == S.base)\n        ", "return", " -", "1", ";\n    --S.top;\n    e =* S.top;\n    ", "return", " ", "1", ";\n}\nchar GetTop(SqStack S) {\n    ", "if", " (S.base != S.top)\n        ", "return", " *S.top;\n    ", "else", "\n        ", "return", " ", "0", ";\n}\nint In(char ch) {\n    ", "if", " (ch == ", "'+'", " || ch == ", "'-'", " || ch == ", "'*'", "\n        || ch == ", "'/'", " || ch == ", "'('", " || ch == ", "')'", " || ch == ", "'='", ")\n        ", "return", " ", "true", ";\n    ", "else", "\n        ", "return", " ", "false", ";\n\n}\nchar Precede(char ch1, char ch2) {\n    char cmpResult = ", "0", ";", "//返回的比较结果> < =", "\n    switch (ch1)\n    {\n    case ", "'?'", ":\n        cmpResult = ", "'<'", ";\n        ", "break", ";\n    case ", "'+'", ":\n        switch (ch2)\n        {\n        case ", "'+'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'-'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'*'", ":\n            cmpResult = ", "'<'", ";\n            ", "break", ";\n        case ", "'/'", ":\n            cmpResult = ", "'<'", ";\n            ", "break", ";\n        case ", "'('", ":\n            cmpResult = ", "'<'", ";\n            ", "break", ";\n        case ", "')'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'='", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        default:\n            ", "break", ";\n        }\n        ", "break", ";\n    case ", "'-'", ":\n        switch (ch2)\n        {\n        case ", "'+'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'-'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'*'", ":\n            cmpResult = ", "'<'", ";\n            ", "break", ";\n        case ", "'/'", ":\n            cmpResult = ", "'<'", ";\n            ", "break", ";\n        case ", "'('", ":\n            cmpResult = ", "'<'", ";\n            ", "break", ";\n        case ", "')'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'='", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        default:\n            ", "break", ";\n        }\n        ", "break", ";\n    case ", "'*'", ":\n        switch (ch2)\n        {\n        case ", "'+'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'-'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'*'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'/'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'('", ":\n            cmpResult = ", "'<'", ";\n            ", "break", ";\n        case ", "')'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'='", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        default:\n            ", "break", ";\n        }\n        ", "break", ";\n    case ", "'/'", ":\n        switch (ch2)\n        {\n        case ", "'+'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'-'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'*'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'/'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'('", ":\n            cmpResult = ", "'<'", ";\n            ", "break", ";\n        case ", "')'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'='", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        default:\n            ", "break", ";\n        }\n        ", "break", ";\n    case ", "'('", ":\n        switch (ch2)\n        {\n        case ", "'+'", ":\n            cmpResult = ", "'<'", ";\n            ", "break", ";\n        case ", "'-'", ":\n            cmpResult = ", "'<'", ";\n            ", "break", ";\n        case ", "'*'", ":\n            cmpResult = ", "'<'", ";\n            ", "break", ";\n        case ", "'/'", ":\n            cmpResult = ", "'<'", ";\n            ", "break", ";\n        case ", "'('", ":\n            cmpResult = ", "'<'", ";\n            ", "break", ";\n        case ", "')'", ":\n            cmpResult = ", "'='", ";\n            ", "break", ";\n        case ", "'='", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        default:\n            ", "break", ";\n        }\n        ", "break", ";\n    case ", "')'", ":\n        switch (ch2)\n        {\n        case ", "'+'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'-'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'*'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'/'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'('", ":\n            cmpResult = ", "' '", ";\n            ", "break", ";\n        case ", "')'", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        case ", "'='", ":\n            cmpResult = ", "'>'", ";\n            ", "break", ";\n        default:\n            ", "break", ";\n        }\n        ", "break", ";\n    case ", "'='", ":\n        ", "break", ";\n    default:\n        ", "break", ";\n    }\n    ", "return", " cmpResult;\n}\nint Operate(double a, char theta, double b)\n{\n    int result = ", "0", ";\n    switch (theta)\n    {\n    case ", "'+'", ":\n        result = a + b;\n        ", "break", ";\n    case ", "'-'", ":\n        result = a - b;\n        ", "break", ";\n    case ", "'*'", ":\n        result = a * b;\n        ", "break", ";\n    case ", "'/'", ":\n        result = a / b;\n        ", "break", ";\n    default:\n        ", "break", ";\n    }\n    ", "return", " result;\n    ", "return", " result;\n\n}\nint Tz(char* str) {\n    SqStack s1, s2; ", "//s1=数字 s2=操作符", "\n    int InitStack(SqStack & s1);", "//初始化s1 s2", "\n    int InitStack(SqStack & s2);\n    char ch;\n    ch = str[", "0", "];\n    int i = ", "0", ";", "//扫描字符串的下标", "\n    char theta = ", "0", ";\n    char a = ", "0", ";\n    char b = ", "0", ";\n    char x = ", "0", ";\n    int i1 = ", "0", ";", "//数字和小数点构成的字符串下标", "\n    char z[", "10", "] = {};", "//存放数字的字符串", "\n    ", "while", " (", "true", ") {\n        ch = str[i];", "//第i个字符", "\n        ", "if", " (ch == ", "'\\0'", ")\n            ", "break", ";\n        ", "if", " (In(ch))", "//是运算符", "\n        {\n            ch = str[i];\n            switch (Precede(GetTop(s2), ch))\n            {", "//比较s2的栈顶元素和ch的优先级", "\n            case ", "'<'", ":\n                Push(s2, ch); i++; ch = str[i];\n                ", "break", ";\n            case ", "'>'", ":\n                Pop(s2, theta);", "//弹出栈顶的运算符", "\n                Pop(s1, b);\n                Pop(s1, a);", "//弹出栈顶的两个运算数", "\n                Push(s1, Operate(a, theta, b));", "//将运算结果压入OPND栈", "\n                ", "break", ";\n            case ", "'='", ":", "//OPTR的栈顶元素是\"(\"且ch\")\"", "\n                Pop(s1, x);\n                i++; ch = str[i];\n                ", "break", ";\n            default:\n                ", "break", ";\n            }\n        }\n        ", "else", " ", "if", " (ch >= ", "'0'", " && ch <= ", "'9'", ")", "//数字", "\n        {\n            i1 = ", "0", ";\n            ", "do", "\n            {\n                z[i1] = ch;\n                i1++;\n                i++;\n                ch = str[i];\n            } ", "while", " ((ch >= ", "'0'", " && ch <= ", "'9'", ") || ch == ", "'.'", ");\n            z[i1] = ", "0", ";\n            double d = atof(z);\n            Push(s1, d);\n        }\n        ", "else", "\n        {\n            printf(", "\"输入错误！\\n\"", ");\n            ", "break", ";\n        }\n    }\n    ", "return", " GetTop(s1);\n}\n", "\n", "错误如下，明明在上面调用了InitStack函数，为啥还提示这个错误呢？s1却不提示", "其他地方还有错误的话，恳求改正！"]], "Tag": "程序设计"}
{"Answer": "帮楼主调试了下发现，假设你输入2+3#\r\n在第二次循环，即处理+的时候,会跳入case '&gt;':分支，然后会pop两次，但此时其实栈里面只有一个数字2\r\nchar b = pop (OPND,poper);\r\nchar a = pop (OPND,poper);\r\n执行完char a = pop (OPND,poper);自然就显示栈下溢\r\n之后的这句push (OPND,operate(a,op,b));也不对，你传入的op此时是#\r\n里面的operate函数不会进入任何一个case,而是直接执行 s = (char)sum;\r\n\r\n单步调试和设断点调试（VS IDE中编译连接通过以后，按F10或F11键单步执行，按Shift+F11退出当前函数；在某行按F9设断点后按F5执行停在该断点处。）是程序员必须掌握的技能之一。", "Konwledge_Point": "算术运算", "Question": ["C语言 为何总是提示“栈下溢”？", ["本人新手一个，最近才开始上软件课，这是最近的一个简单计算器作业，然而输入式子后却总是显示“栈下溢”，有点怀疑是pop的原因，请各位大神教我，谢谢!!", "\n\n", "\n\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <malloc.h>\n#include <conio.h>\n#include <ctype.h>\n#define maxsize 50\n\ntypedef char datatype;\ntypedef struct\n{\n    int data[maxsize];\n    int Top;\n} SeqStack;\n\nvoid InitStack(SeqStack*&S)\n{\n    S = (SeqStack*)malloc(sizeof(SeqStack));\n    S->Top = 0;\n}\n\nint push(SeqStack*s,datatype e)  //入栈函数\n{\n    if (s->Top>=maxsize - 1)\n    {\n        printf(\"栈上溢\");\n        return 0;\n    }\n    else\n    {\n        s->data[++s->Top] = e;\n        return 1;\n    }\n}\n\nchar pop(SeqStack*s,datatype&e)  //出栈函数\n{\n    if (s->Top<=0)\n    {\n        printf(\"栈下溢\");\n        return 0;\n    }\n    else \n    {\n         return e = s->data[s->Top--];\n    }\n}\n\nchar GetTop(SeqStack*s,datatype&e)  //取栈顶元素函数\n{\n    if (s->Top<=0)\n    {\n        printf(\"栈下溢\");\n        return 0;\n    }\n    else \n    {\n        e = s->data[s->Top];\n        return 1;\n    }\n}\n\nchar precede(char top,char read)  //比较栈顶元素和读取元素的优先级函数\n{\n    switch(read)\n    {\n        case '#':\n            return '>';\n        case '+':\n        case '-':\n            if (top == '#')\n            {\n                return '<';\n            }\n            else\n                return '>';\n        case '*':\n        case '/':\n            if (top == '+'||top == '-'||top == '#')\n            {\n                return '<';\n            }\n            else\n                return '>';\n    }\n}\n\nchar operate(char n1,char op,char n2)  //运算函数\n{\n    int sum;char s;\n    switch (op)\n    {\n        case '+':\n            sum = (n1 - 48) + (n2 - 48);\n        case '-':\n            sum = (n1 - 48) - (n2 - 48);\n        case '*':\n            sum = (n1 - 48) * (n2 - 48);\n        case '/':\n            sum = (n1 - 48) / (n2 - 48);\n    }\n    s = (char)sum;\n    return s;\n}\n\nint EvaluateExpression()\n{\n    SeqStack *OPTR;\n    SeqStack *OPND;\n    InitStack(OPTR);\n    InitStack(OPND);\n    char ch;char top;char poper;\n    push (OPTR,'#');\n    while (((ch = getchar()) != '#')||GetTop(OPTR,top) != '#')\n    {\n        if (ch != '+'&&ch != '-'&&ch != '*'&&ch != '/'&&ch != '('&&ch !=')')\n        {\n            push (OPND,ch);\n        }\n        else\n        {\n            switch (precede(GetTop(OPTR,top),ch))  //判断优先级\n            {\n                case '<':\n                    push (OPTR,ch);\n                    break;\n                case '>':\n                    char op = pop (OPTR,poper);\n                    char b = pop (OPND,poper);\n                    char a = pop (OPND,poper);\n                    push (OPND,operate(a,op,b));\n                    break;\n            }\n        }\n    }\n    int result = (int)GetTop(OPND,top);\n    return result;\n}\n\nint main() \n{\n    int result;\n    printf(\"输入你的算术表达式，以#结束：\\n\");\n    result=EvaluateExpression();\n    printf(\"结果是 :%d\\n\",result);\n    return 0;\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;21行和27行删掉&amp;#xff0c;不需要动态分配空间&amp;#xff0c;main中申明的不是指针变量啊&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["调试的报错没看懂什么意思，希望有人解答一下", ["程序目的是为了实现算数表达式转换为后缀表达式再求其值", "程序正常运行了但是没有将结果输出，三个输出都没输出，调试的报错没看懂什么意思，希望有人解答一下", "\n", "\n", "\n", "\n", "\n", "#", "include", "<stdio.h>\n#", "include", "<stdlib.h>\n#define MaxSize ", "200", "\n#define ", "false", " ", "0", "\n#define ", "true", " ", "1", "\n\ntypedef ", "struct", " Node\n{\n    ", "char", " data", "[M", "axSize", "]", ";\n    ", "int", " top;\n}SqStack;", "//创建一个运算符栈", "\n\ntypedef ", "struct", " Node1\n{\n    double data", "[M", "axSize", "]", ";\n    ", "int", " top;\n}SqStack_double;", "//创建操一个作数栈", "\n\nvoid ", "InitStack(SqStack", "*", " ", "head", ")", "//运算符栈的初始化", "\n{\n    head = (SqStack*)malloc(sizeof(SqStack));\n    head->top = -", "1", ";\n}\n\nvoid ", "InitStack_double(SqStack_double", "*", " ", "head", ")", "//操作数栈的初始化", "\n{\n    head = (SqStack_double*)malloc(sizeof(SqStack_double));\n    head->top = -", "1", ";\n}\n\n", "int", " ", "StackEmpty(SqStack", "*", " ", "head", ")", "//判断栈是否为空的函数", "\n{\n    ", "if", " (head->top", " == ", "-", "1", ") {\n        return ", "false", ";\n    }\n    ", "else", " {\n        return ", "true", ";\n    }\n}\n\n", "int", " ", "GetTop(SqStack", "*", " ", "head", ", ", "char", "*", " ", "n", ")", "//取运算符栈顶函数", "\n{\n    ", "if", " (head->top", " == ", "-", "1", ") {\n        return ", "false", ";\n    }\n    *n = head->data", "[", "head", "->", "top", "]", ";\n    return ", "true", ";\n}\n\n", "int", " ", "GetTop_double(SqStack_double", "*", " ", "head", ", ", "double", "*", " ", "n", ")", "//取操作数栈顶函数", "\n{\n    ", "if", " (head->top", " == ", "-", "1", ") {\n        return ", "false", ";\n    }\n    *n = head->data", "[", "head", "->", "top", "]", ";\n    return ", "true", ";\n}\n\n", "int", " ", "Push(SqStack", "*", " ", "head", ",", "char", " ", "n", ")", "//运算符栈入栈函数", "\n{\n    ", "if", " (head->top", " == ", "MaxSize - ", "1", ") {\n        return ", "false", ";\n    }\n    head->top++;\n    head->data", "[", "head", "->", "top", "]", " = n;\n    return ", "true", ";\n}\n\n", "int", " ", "Push_double(SqStack_double", "*", " ", "head", ", ", "double", " ", "*", "n", ")", "//操作数栈入栈函数", "\n{\n    ", "if", " (head->top", " == ", "MaxSize - ", "1", ") {\n        return ", "false", ";\n    }\n    head->top++;\n    head->data", "[", "head", "->", "top", "]", " = *n;\n    return ", "true", ";\n}\n\n", "int", " ", "Pop(SqStack", "*", " ", "head", ", ", "char", " ", "*", "n", ")", "//运算符栈出栈函数", "\n{\n    ", "if", " (head->top", " == ", "-", "1", ") {\n        return ", "false", ";\n    }\n    *n = head->data", "[", "head", "->", "top", "]", ";\n    head->top--;\n    return ", "true", ";\n}\n", "int", " ", "Pop_double(SqStack_double", "*", " ", "head", ", ", "double", "*", " ", "n", ")", "//操作数栈出栈函数", "\n{\n    ", "if", " (head->top", " == ", "-", "1", ") {\n        return ", "false", ";\n    }\n    *n = head->data", "[", "head", "->", "top", "]", ";\n    head->top--;\n    return ", "true", ";\n}\n\nvoid ", "DestroyStack(SqStack", "*", " ", "head", ")", "//销毁运算符栈", "\n{\n    free(head);\n}\n\nvoid ", "DestroyStack_double(SqStack_double", "*", " ", "head", ")", "//销毁操作数栈", "\n{\n    free(head);\n}\n\n", "int", " main", "()", "\n{\n    void transform(", "char", "* exp, ", "char", "* postexp);", "//声明将表达式转换为后缀表达式的函数", "\n    double evaluation(", "char", "* postexp);", "//声明计算后缀表达式的函数", "\n\n    ", "char", " exp", "[]", " = ", "\"(56-20)/(4+2)\"", ";", "//存放表达式的数组", "\n    ", "char", " postexp", "[M", "axSize", "]", ";", "//存放后缀表达式的数组", "\n    transform(exp, postexp);", "//将算数表达式转换为后缀表达式", "\n    printf(", "\"Arithmetic expression:%s\\n\"", ", exp);", "//输出算数表达式", "\n    printf(", "\"Postfix Expression:%s\\n\"", ", postexp);", "//输出后缀表达式", "\n    printf(", "\"Value of expression:%lf\\n\"", ", evaluation(postexp));", "//输出最终结果", "\n    return ", "1", ";\n}\n\nvoid transform(", "char", "* exp, ", "char", "* postexp)", "//将算术表达式转换为后缀表达式", "\n{\n    ", "char", " e;\n    SqStack Optr;", "//定义存放运算符的栈", "\n    ", "InitStack(&Optr)", ";", "//初始化运算符栈", "\n    ", "int", " i=", "0", ";", "//作为postexp的下标", "\n    ", "while", " (*exp != ", "'\\0'", ")\n    {\n        switch (*exp)\n        {\n        case ", "'('", ":\n            ", "Push(&Optr,'(')", ";", "//将运算符‘（’存入运算符栈中", "\n            exp++;", "//继续遍历其它字符", "\n            break;\n        case ", "')'", ":\n            ", "Pop(&Optr, &", "e", ")", ";", "//将运算符栈中的栈顶元素出栈", "\n            ", "while", " (e != ", "'('", ")", "//当出栈元素不为右括号时，将运算符栈中的元素的全部出栈", "\n            {\n                postexp", "[", "i", "++", "]", " = e;", "//并存入后缀表达式中", "\n                ", "Pop(&Optr, &", "e", ")", ";", "//继续出栈下一个元素", "\n            }\n            exp++;", "//继续遍历表达式数组中的下一个元素", "\n            break;\n        case ", "'-'", ":\n        case ", "'+'", ":\n            ", "while", " (", "StackEmpty(&Optr)", " != ", "0", ")", "//当运算符栈空时停止循环", "\n            {\n                ", "GetTop(&Optr, &", "e", ")", ";", "//取栈顶运算符元素", "\n                ", "if", " (e != ", "'('", ") {", "//如果栈顶元素不为左括号", "\n                    postexp", "[", "i", "++", "]", " = e;", "//将栈顶运算符存入后缀表达式中", "\n                    ", "Pop(&Optr, &", "e", ")", ";", "//将该运算符出栈", "\n                }\n                ", "else", " {", "//如果是左括号中止将运算符存入后缀表达式的循环", "\n                    break;\n                }\n            }\n            ", "Push(&Optr, ", "*", "exp", ")", ";", "//将+或-运算符存入运算符栈中", "\n            exp++;", "//继续遍历表达式下一个元素", "\n            break;\n        case ", "'*'", ":\n        case ", "'/'", ":\n            ", "while", " (", "StackEmpty(&Optr)", " != ", "0", ")", "//运算符栈不为空时循环", "\n            {\n                ", "GetTop(&Optr, &", "e", ")", ";", "//取栈顶元素", "\n                ", "if", " (e", " == ", "'*'", " || ", "e", " == ", "'/'", ") {", "//由于乘除优先级高当出栈运算符为*或/时", "\n                    postexp", "[", "i", "++", "]", " = e;", "//存入后缀表达式中", "\n                    ", "Pop(&Optr, &", "e", ")", ";", "//存入后将该运算符出栈", "\n                }\n                ", "else", " {", "//若不为乘除运算符中止循环", "\n                    break;\n                }\n            }\n            ", "Push(&Optr, ", "*", "exp", ")", ";", "//将新遍历到的*或/运算符入栈", "\n            exp++;", "//继续遍历表达式剩下的元素", "\n            break;\n           default:", "//处理数字字符", "\n            ", "while", " (*exp >= ", "'0'", " && ", "*exp <= ", "'9'", ")", "//当数组exp当前位置存放的是操作数时", "\n            {\n                postexp", "[", "i", "++", "]", " = *exp;", "//存入后缀表达式中", "\n                exp++;", "//表达式数组往下一位移动", "\n            }\n            postexp", "[", "i", "++", "]", " = ", "'#'", ";", "//用字符#把相邻的操作数隔开表示一个数字串结束", "\n        }\n    }\n    ", "//此时表达式遍历完毕", "\n    ", "while", " (", "StackEmpty(&Optr)", " != ", "0", ")", "//若运算符栈不为空，将栈中剩余的运算符存入后缀表达式", "\n    {\n        ", "Pop(&Optr, &", "e", ")", ";", "//运算符出栈", "\n        postexp", "[", "i", "++", "]", " = e;", "//存入后缀表达式", "\n    }\n    postexp", "[", "i", "++", "]", " = ", "'\\0'", ";", "//给后缀表达式结尾加上字符结束符", "\n    ", "DestroyStack(&Optr)", ";", "//销毁运算符栈", "\n}\n\ndouble evaluation(", "char", "* postexp)", "//计算后缀表达式", "\n{\n    double a, b, c, d, e;", "//定义操作数", "\n    SqStack_double opnd;", "//定义操作数栈", "\n    ", "InitStack_double(&", "opnd", ")", ";\n    ", "while", " (*postexp != ", "'\\0'", ")\n    {\n        switch (*postexp)\n        {\n        case ", "'+'", ":\n            ", "Pop_double(&", "opnd", ", &", "a", ")", ";\n            ", "Pop_double(&", "opnd", ", &", "b", ")", ";\n            c = a + b;\n            ", "Push_double(&", "opnd", ", &", "c", ")", ";\n            break;\n        case ", "'-'", ":\n            ", "Pop_double(&", "opnd", ", &", "a", ")", ";\n            ", "Pop_double(&", "opnd", ", &", "b", ")", ";\n            c = a - b;\n            ", "Push_double(&", "opnd", ", &", "c", ")", ";\n            break;\n        case ", "'*'", ":\n            ", "Pop_double(&", "opnd", ", &", "a", ")", ";\n            ", "Pop_double(&", "opnd", ", &", "b", ")", ";\n            c = a", " * ", "b;\n            ", "Push_double(&", "opnd", ", &", "c", ")", ";\n            break;\n        case ", "'/'", ":\n            ", "Pop_double(&", "opnd", ", &", "a", ")", ";\n            ", "Pop_double(&", "opnd", ", &", "b", ")", ";\n            ", "if", " (a != ", "0", ")\n            {\n                c = b/a;\n                ", "Push_double(&", "opnd", ", &", "c", ")", ";\n                break;\n            }\n            ", "else", " {\n                printf(", "\"Divide by zero error\\n\"", ");\n                exit(", "0", ");", "//异常退出", "\n            }\n            break;\n        default:", "//处理数字字符", "\n            d = ", "0", ";\n            ", "while", " (*postexp>=", "'0'", "&&*postexp<=", "'9'", ")", "//当后缀表达式中元素为数字字符时进入循环", "\n            {\n                d = d", " * ", "10", " + *postexp - ", "'0'", ";", "//将两个连续的数字字符转换为对应的数值", "\n                postexp++;", "//遍历下一个操作数", "\n            }\n            ", "Push_double(&", "opnd", ", &", "d", ")", ";", "//将两个操作数合并成的运算数存入操作数栈中", "\n            break;", "//结束循环", "\n        }\n        postexp++;", "//继续处理其它元素", "\n    }\n    ", "//当后缀表达式运算结束后", "\n    ", "GetTop_double(&", "opnd", ", &", "e", ")", ";", "//将结果从操作数栈中取出", "\n    ", "DestroyStack_double(&", "opnd", ")", ";", "//销毁操作数栈", "\n    return e;", "//将最终结果返回", "\n    \n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;中缀转后缀是一种常见的算法&amp;#xff0c;可以使用栈结构来实现。首先&amp;#xff0c;定义一个优先级函数&amp;#xff0c;用于比较运算符的优先级&amp;#xff1b;然后&amp;#xff0c;将中缀表达式的每个字符读入栈中&amp;#xff0c;如果是操作数&amp;#xff0c;则直接输出&amp;#xff1b;如果是运算符&amp;#xff0c;则比较其与栈顶元素的优先级&amp;#xff0c;如果优先级比栈顶元素高&amp;#xff0c;则将其压入栈中&amp;#xff1b;如果优先级比栈顶元素低或者相等&amp;#xff0c;则将栈顶元素弹出&amp;#xff0c;并输出&amp;#xff0c;直到栈顶元素的优先级比当前元素低&amp;#xff0c;然后将当前元素压入栈中&amp;#xff1b;最后&amp;#xff0c;当读取完所有字符后&amp;#xff0c;将栈中剩余的元素依次弹出&amp;#xff0c;并输出&amp;#xff0c;即可得到后缀表达式。&lt;/p&gt;", "Konwledge_Point": "算术运算", "Question": ["关于#中缀转后缀#的问题，如何解决？", ["中缀表达式是一个通用的算术或逻辑公式表示方法，操作符是以中缀形式处于操作数的中间（例：3 + 4），中缀表达式是人们常用的算术表示方法。后缀表达式不包含括号，运算符放在两个运算对象的后面，所有的计算按运算符出现的顺序，严格从左向右进行（不再考虑运算符的优先规则，如：(2 + 1) * 3 ， 即2 1 + 3 *。利用栈结构，将中缀表达式转换为后缀表达式。(测试数据元素为单个字符)", "输入", "中缀表达式", "输出", "后缀表达式", "样例输入", "A+(B-C/D)", "E", "样例输出", "ABCD/-E", "+", "没发现错误的地方，请帮我指出并改正，谢谢。", "\n", "\n", "#", "include", "<bits/stdc++.h>", "\n", "using", " ", "namespace", " std;\n", "char", " ", "Precede", "(", "char", " a, ", "char", " b)", "{\n    ", "if", " (a == ", "'+'", " || a == ", "'-'", "){\n        ", "if", " (b == ", "'+'", " || b == ", "'-'", " || b == ", "')'", " || b == ", "'#'", "){\n            ", "return", " ", "'>'", ";\n        }", "else", "{\n            ", "return", " ", "'<'", ";\n        }\n    }", "else", " ", "if", " (a == ", "'*'", " || a == ", "'/'", "){\n        ", "if", " (b == ", "'+'", " || b == ", "'-'", " || b == ", "'*'", " || b == ", "'/'", " || b == ", "')'", " || b == ", "'#'", "){\n            ", "return", " ", "'>'", ";\n        }", "else", "{\n            ", "return", " ", "'<'", ";\n        }\n    }", "else", " ", "if", " (a == ", "'('", "){\n        ", "if", " (b == ", "')'", "){\n            ", "return", " ", "'='", ";\n        }", "else", " ", "if", " (b == ", "'#'", "){    \n            ", "return", " ", "'?'", ";\n        }", "else", "{\n            ", "return", " ", "'<'", ";\n        }\n    }", "else", " ", "if", " (a == ", "'#'", "){\n        ", "if", " (b == ", "'#'", "){\n            ", "return", " ", "'='", ";\n        }", "else", " ", "if", " (b == ", "')'", "){    \n            ", "return", " ", "'?'", ";\n        }", "else", " {\n            ", "return", " ", "'<'", ";\n        }\n    }\n}\n", "int", " ", "main", "()", "{\n    stack<", "char", ">s;\n    stack<", "char", ">z;\n    ", "char", " b=", "'#'", ";\n    ", "char", " d[", "10005", "]={", "0", "};\n    z.", "push", "(b);\n    ", "char", " a[", "10005", "];\n    ", "scanf", "(", "\"%s\"", ",a);\n    ", "int", " n,i,j;\n    n=", "strlen", "(a);\n    a[n]=b;\n    ", "for", "(i=", "0", ";i<=n;i++){\n        ", "if", "(a[i]!=", "'*'", "&&a[i]!=", "'+'", "&&a[i]!=", "'-'", "&&a[i]!=", "'/'", "&&a[i]!=", "'#'", "&&a[i]!=", "'('", "&&a[i]!=", "')'", "){\n            s.", "push", "(a[i]);\n        }\n        ", "else", " ", "if", "((", "Precede", "(z.", "top", "(),a[i]))==", "'<'", "){\n            z.", "push", "(a[i]);\n        }", "else", " ", "if", "((", "Precede", "(z.", "top", "(),a[i]))==", "'>'", "){\n            ", "if", "(a[i]!=", "')'", "){\n            s.", "push", "(z.", "top", "());\n            z.", "pop", "();\n            i--;\n            }\n            ", "else", " ", "if", "(a[i]==", "')'", "){\n                ", "for", "(;z.", "top", "()!=", "'('", ";){\n                s.", "push", "(z.", "top", "());\n                z.", "pop", "();\n                }\n                z.", "pop", "();\n            }\n        }", "else", " ", "if", "((", "Precede", "(z.", "top", "(),a[i]))==", "'='", "){\n            z.", "pop", "();\n        }\n    }\n    ", "while", "(!s.", "empty", "()){\n    d[i]=s.", "top", "();\n    i++;\n    s.", "pop", "();\n}\n", "for", "(i--;i>=", "0", ";i--){\n    ", "printf", "(", "\"%c\"", ",d[i]);\n}\n}\n"]], "Tag": "程序设计"}
