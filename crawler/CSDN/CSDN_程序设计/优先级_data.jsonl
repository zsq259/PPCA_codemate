{"Answer": "&lt;p&gt;a&amp;#43;&amp;#43;和&amp;#43;&amp;#43;a的区别是&amp;#xff1a; a&amp;#43;&amp;#43;是先赋值后计算  &amp;#43;&amp;#43;a的则相反&lt;br /&gt;举个例子&amp;#xff1a;&lt;br /&gt;a &amp;#61; 10;&lt;br /&gt;b &amp;#61; a&amp;#43;&amp;#43;;&lt;br /&gt;经过这一步后 b的值为10&amp;#xff0c; a 的值为11; (即先赋值再计算)&lt;br /&gt;在看下面的这个列子&amp;#xff1a;&lt;br /&gt;a &amp;#61; 10;&lt;br /&gt;b &amp;#61; &amp;#43;&amp;#43;a;&lt;br /&gt;经过这一步后 b的值为11&amp;#xff0c; a 的值为11; (即先计算再赋值)&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["=赋值运算符与++自增运算符的优先级", ["eg：", "int a=10；", "result=a++；", "=的优先级不应该是低于++么", "结果result=10"]], "Tag": "程序设计"}
{"Answer": "感觉是你B程序的钩子代码有问题，系统本来就可以挂载多个键盘钩子的，哪有什么优先级的问题，挂上钩子之后系统监听到按键事件就会往你钩子指定的句柄发送消息，不存在什么优先级的问题", "Konwledge_Point": "优先级", "Question": ["C#全局钩子链中如何设置最高优先级", ["场景：", "\n两个软件，A、B都有设置钩子。", "\n通过扫码枪扫码钩子捕获扫码枪数据，此时A界面在为前置界面，如果扫码枪数据为特殊数据如前两位（18）则将数据存放到B的TextBox1栏位中，如果不为（18）则将扫码枪数据录入到A，此时B为全局钩子，但是B的TextBox1捕获几次数据后失效，目前看原因极有可能为A的钩子优先级在前导致B的全局钩子失效。"]], "Tag": "程序设计"}
{"Answer": "你所说的linux系统的优先级数确实是这样的。需要注意的是普通用户只能在0～19之间调整应用程序的优先权值，只有超级用户有权调整更高的优先权值（从-20～19）。linux系统属于这种数值越小优先级越高", "Konwledge_Point": "优先级", "Question": ["linux系统运行优先级哪一级最高", ["知道linux系统有七个运行级别，但不知道是否存在最高优先级，哪一级最高"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;一般情况下&amp;#xff0c;可以通过修改网管设备的配置来添加专用频点优先级。具体操作步骤如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1、首先&amp;#xff0c;在网管设备中添加一个新的频点&amp;#xff0c;并设置为专用频点优先级。&lt;/p&gt;\n&lt;p&gt;2、然后&amp;#xff0c;在网管设备中添加新的重选频点&amp;#xff0c;设置为专用频点优先级&amp;#xff0c;并将其频率点设置为NR电子围栏所使用的中心频率625920&amp;#xff0c;子载波间隔30Khz&amp;#xff0c;带宽20M&amp;#xff0c;中心频点3388.8Mkz。&lt;/p&gt;\n&lt;p&gt;3、最后&amp;#xff0c;在网管设备中添加新的RRCrelease消息&amp;#xff0c;并将此消息添加到重现列表中&amp;#xff0c;以实现专用频点优先级的功能。回答不易&amp;#xff0c;记得采纳呀&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["中兴5G网管添加专用优先级异频频点", ["1、某地公安部门建设了NR电子围栏，使用中心频率625920子载波间隔30Khz带宽20M,中心频点3388.8Mkz。", "使用常规已全部完成添加到SIB4异频重现列表中,现公安反馈我存在所谓的专用频点优先级（如图，伪基站厂家发的其他地区添加的625920，此消息在RRCrelease中携带），重选不走常规的sib4，影响其采集效果，请求我们将伪基站工作频点添加到专用频点优先级列表中，鄙人不才，实在不知道网管的如何添加，请求各位指导。", "2、活着说，如何在网管上面将这个专用优先级功能关闭。", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;优先级:局部变量&amp;gt;成员变量&amp;gt;父类继承&lt;br /&gt;想要调用不同的变量的话&amp;#xff0c;局部变量直接用age&amp;#xff0c;成员变量使用this.age&amp;#xff0c;调用父类使用super。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["Java继承中，变量的优先级是怎么排的?", ["在Java继承的知识中，调用变量时候的优先级是什么？如果想要调用不同类中的变量，应该改要加什么修饰符呢？之前学过的记不太清了！"]], "Tag": "程序设计"}
{"Answer": "http://blog.sina.com.cn/s/blog_7e1aec770100r4fb.html\r\njava的你自己改改", "Konwledge_Point": "优先级", "Question": ["基于优先级的时间片轮转调度算法", ["求一个基于优先级的时间片轮转调度算法。实在是不太会做了，没思路。要求java", "\n要求：", "\n（1）设系统中有n个进程，每个进程PCB格式如下：", "\n进程ID；", "\n进程名称：p1,..., pn；", "\n进程状态：1-运行，2-就绪，3-等待，0-完成；", "\n进程类型：0-系统进程，1-用户进程；", "\n请求资源时刻；", "\n需要的CPU时间；", "\n已运行时间；", "\n优先级：数字小的优先级高；", "\n指向下一进程的指针。", "\n（2）在调度程序运行之前，输入进程名称、所需CPU时间等。", "\n（3）设计4个队列，完成队列，运行队列，就绪队列和等待队列。", "\n（4）调度程序选择就绪队列首进程运行，采用时间片轮转法，输出调度过程。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;控制面板\\网络和 Internet\\网络连接&lt;br /&gt;修改网络连接属性-IPv4设置-高级-跃点数&lt;br /&gt;跃点数越小优先级越高&amp;#xff0c;如LAN1 跃点数10 LAN2跃点数20&amp;#xff0c;则LAN1默认路由优先&amp;#xff0c;LAN2精确路由保持不变&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["笔记本双网卡优先级怎么设置", ["笔记本双网卡同时内外网，优先级该怎么填写最佳，我的为什么优先级都是一样的，应该设置多少"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;可以用窗口函数&amp;#xff0c;为每一个姓名&amp;#xff0c;按科主任&amp;lt;主任医师&amp;lt; 主治医师&amp;lt; 住院医师 的顺序排序&amp;#xff0c;降序排列吧控制和空白排到后面&amp;#xff0c;每个姓名只取第一条。这样应该可以达到你要的结果。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;SELECT    *\nFROM    (\n            SELECT    *,\n                    ROW_NUMBER() OVER(PARTITION BY 姓名 ORDER BY 科主任 DESC, 主任医师 DESC,  主治医师 DESC, 住院医师 DESC) AS RowNumber \n            FROM    TableName\n        ) AS T\nWHERE     RN &amp;#61; 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["SQL 语句优先级怎么去实现", ["\n\n", "我想让同一个人的数据只显示一条，优先级按照科主任<主任医师< 主治医师< 住院医师 显示，sql语句怎么实现", "\n "]], "Tag": "程序设计"}
{"Answer": "有时候一知半解自以为自己知道的多，其实比不知道还糟糕。\r\n\r\n所谓“短路”对于常量表达式根本是无稽之谈。如果“短路”导致结果无法预料，那么是C#编译器的设计者大脑短路了。", "Konwledge_Point": "优先级", "Question": ["C#中如何证明&&比||优先级高?", ["https://msdn.microsoft.com/zh-cn/library/ms173145.aspx", "http://www.docin.com/p-428596985.html", "\n上面两个说明了&&比||的优先级高，但是如何证明呢？", "\n比如false || true && false 结果是false。", "\n不知道如何证明，如果知道的话，或者有想法的童靴可以解答下。", "\n感激！"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I updated to the most recent rabbitmq and it worked, I do not know if this is the only solution.&lt;/p&gt;\n\n&lt;p&gt;As well as callign &lt;code&gt;ch.Qos(1, 0, false)&lt;/code&gt; I also needed to remove the &lt;code&gt;auto-ack&lt;/code&gt; and acknowledge the message manually afterwards so that it doesn't acknowledge all the messages in the queue. &lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["AMQP Golang优先级不起作用", ["\n\n", "I am currently testing rabbitmq with golang (github.com/streadway/amqp), and I have three programs, two of them sending messages to the queue with different priorities and one reading from the queue.", "\nAnd the problem I am having is that after sending a few messages with the two programs I then proceed to launch the program that will read from the queue and when it starts to read from the queue it output the result like a FIFO.", "\nI expected to output the high priority first followed by the lower priority message.", "\nDid I misunderstand how rabbitmq works or am I doing something wrong?", "\n\n", "Sending to queues\n    package main", "\n\n", "import (\n        \"log\"\n\n        \"github.com/streadway/amqp\"\n)\n\nfunc failOnError(err error, msg string) {\n        if err != nil {\n                log.Fatalf(\"%s: %s\", msg, err)\n        }\n}\n\nfunc main() {\n        args := make(amqp.Table)\n        args[\"x-max-priority\"] = int64(9)\n\n        conn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\n        failOnError(err, \"Failed to connect to RabbitMQ\")\n        defer conn.Close()\n\n        ch, err := conn.Channel()\n        failOnError(err, \"Failed to open a channel\")\n        defer ch.Close()\n\n        q, err := ch.QueueDeclare(\n                \"test\", // name                                                                                                                                                                                     \n                false,   // durable                                                                                                                                                                                 \n                false,   // delete when unused                                                                                                                                                                      \n                false,   // exclusive                                                                                                                                                                               \n                false,   // no-wait                                                                                                                                                                                 \n                args,     // arguments                                                                                                                                                                              \n        )\n        failOnError(err, \"Failed to declare a queue\")\n\n        body := \"low\"\n        err = ch.Publish(\n                \"\",     // exchange                                                                                                                                                                                 \n                q.Name, // routing key                                                                                                                                                                              \n                false,  // mandatory                                                                                                                                                                                \n                false,  // immediate                                                                                                                                                                                \n                amqp.Publishing{\n                        Headers:         amqp.Table{},\n                        ContentType:     \"text/plain\",\n                        ContentEncoding: \"\",\n                        Body:            []byte(body),\n                        DeliveryMode:    amqp.Transient, // 1=non-persistent, 2=persistent                                                                                                                          \n                        Priority: 0,\n                })\n        log.Printf(\" [x] Sent %s\", body)\n        failOnError(err, \"Failed to publish a message\")\n\n        body = \"low\"\n        err = ch.Publish(\n                \"\",     // exchange                                                                                                                                                                                 \n                q.Name, // routing key                                                                                                                                                                              \n                false,  // mandatory                                                                                                                                                                                \n                false,  // immediate                                                                                                                                                                                \n                amqp.Publishing{\n                        Headers:         amqp.Table{},\n                        ContentType:     \"text/plain\",\n                        ContentEncoding: \"\",\n                        Body:            []byte(body),\n                        DeliveryMode:    amqp.Transient, // 1=non-persistent, 2=persistent                                                                                                                          \n                        Priority: 0,\n                })\n        log.Printf(\" [x] Sent %s\", body)\n        failOnError(err, \"Failed to publish a message\")\n\n        body = \"low\"\n        err = ch.Publish(\n                \"\",     // exchange                                                                                                                                                                                 \n                q.Name, // routing key                                                                                                                                                                              \n                false,  // mandatory                                                                                                                                                                                \n                false,  // immediate                                                                                                                                                                                \n                amqp.Publishing{\n                        Headers:         amqp.Table{},\n                        ContentType:     \"text/plain\",\n                        ContentEncoding: \"\",\n                        Body:            []byte(body),\n                        DeliveryMode:    amqp.Transient, // 1=non-persistent, 2=persistent                                                                                                                          \n                        Priority: 0,\n                })\n        log.Printf(\" [x] Sent %s\", body)\n        failOnError(err, \"Failed to publish a message\")\n\n\n        body = \"high\"\n        err = ch.Publish(\n                \"\",     // exchange                                                                                                                                                                                 \n                q.Name, // routing key                                                                                                                                                                              \n                false,  // mandatory                                                                                                                                                                                \n                false,  // immediate                                                                                                                                                                                \n                amqp.Publishing{\n                        Headers:         amqp.Table{},\n                        ContentType:     \"text/plain\",\n                        ContentEncoding: \"\",\n                        Body:            []byte(body),\n                        DeliveryMode:    amqp.Transient, // 1=non-persistent, 2=persistent                                                                                                                          \n                        Priority: 9,\n                })\n        log.Printf(\" [x] Sent %s\", body)\n        failOnError(err, \"Failed to publish a message\")\n\n\n        body = \"low\"\n        err = ch.Publish(\n                \"\",     // exchange                                                                                                                                                                                 \n                q.Name, // routing key                                                                                                                                                                              \n                false,  // mandatory                                                                                                                                                                                \n                false,  // immediate                                                                                                                                                                                \n                amqp.Publishing{\n                        Headers:         amqp.Table{},\n                        ContentType:     \"text/plain\",\n                        ContentEncoding: \"\",\n                        Body:            []byte(body),\n                        DeliveryMode:    amqp.Transient, // 1=non-persistent, 2=persistent                                                                                                                          \n                        Priority: 0,\n                })\n        log.Printf(\" [x] Sent %s\", body)\n        failOnError(err, \"Failed to publish a message\")\n\n\n        body = \"low\"\n        err = ch.Publish(\n                \"\",     // exchange                                                                                                                                                                                 \n                q.Name, // routing key                                                                                                                                                                              \n                false,  // mandatory                                                                                                                                                                                \n                false,  // immediate                                                                                                                                                                                \n                amqp.Publishing{\n                        Headers:         amqp.Table{},\n                        ContentType:     \"text/plain\",\n                        ContentEncoding: \"\",\n                        Body:            []byte(body),\n                        DeliveryMode:    amqp.Transient, // 1=non-persistent, 2=persistent                                                                                                                          \n                        Priority: 0,\n                })\n        log.Printf(\" [x] Sent %s\", body)\n        failOnError(err, \"Failed to publish a message\")\n\n\n        body = \"low\"\n        err = ch.Publish(\n                \"\",     // exchange                                                                                                                                                                                 \n                q.Name, // routing key                                                                                                                                                                              \n                false,  // mandatory                                                                                                                                                                                \n                false,  // immediate                                                                                                                                                                                \n                amqp.Publishing{\n                        Headers:         amqp.Table{},\n                        ContentType:     \"text/plain\",\n                        ContentEncoding: \"\",\n                        Body:            []byte(body),\n                        DeliveryMode:    amqp.Transient, // 1=non-persistent, 2=persistent                                                                                                                          \n                        Priority: 0,\n                })\n        log.Printf(\" [x] Sent %s\", body)\n        failOnError(err, \"Failed to publish a message\")\n\n}\n", "\n\n", "Reading queue:", "\n\n", "package main\n\nimport (\n        \"log\"\n\n        \"github.com/streadway/amqp\"\n)\n\nfunc failOnError(err error, msg string) {\n        if err != nil {\n                log.Fatalf(\"%s: %s\", msg, err)\n        }\n}\n\nfunc main() {\n        args := make(amqp.Table)\n        args[\"x-max-priority\"] = int64(9)\n\n        conn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\n        failOnError(err, \"Failed to connect to RabbitMQ\")\n\n        ch, err := conn.Channel()\n        failOnError(err, \"Failed to open a channel\")\n\n        q, err := ch.QueueDeclare(\n                \"test\", // name                                                                                                                                                                                     \n                false,   // durable                                                                                                                                                                                 \n                false,   // delete when unused                                                                                                                                                                      \n                false,   // exclusive                                                                                                                                                                               \n                false,   // no-wait                                                                                                                                                                                 \n                args,     // arguments                                                                                                                                                                              \n        )\n        failOnError(err, \"Failed to declare a queue\")\n\n        msgs, err := ch.Consume(\n                q.Name, // queue                                                                                                                                                                                    \n                \"\",     // consumer                                                                                                                                                                                 \n                true,   // auto-ack                                                                                                                                                                                 \n                false,  // exclusive                                                                                                                                                                                \n                false,  // no-local                                                                                                                                                                                 \n                false,  // no-wait                                                                                                                                                                                  \n                args,    // args                                                                                                                                                                                    \n        )\n        failOnError(err, \"Failed to register a consumer\")\n\n        defer ch.Close()\n        defer conn.Close()\n\n        forever := make(chan bool)\n\n        go func() {\n                for d := range msgs {\n                        log.Printf(\"Received a message: %s\", d.Body)\n                }\n        }()\n\n        log.Printf(\" [*] Waiting for messages. To exit press CTRL+C\")\n        <-forever\n}\n", "\n\n", "First I launch the code sending the messages to the queue the following values:", "\n\n", "\n", "low", "\n", "low", "\n", "low", "\n", "high", "\n", "low", "\n", "low", "\n", "low", "\n", "\n", "With the ", "low", " messages having a priority of 0 and the ", "high", " a priority of 9.", "\nThen I launch the program that will receive the queue.", "\nExpected output:", "\n\n", "\n", "high", "\n", "low", "\n", "low", "\n", "low", "\n", "low", "\n", "low", "\n", "low", "\n", "\n", "Actual output:", "\n\n", "\n", "low", "\n", "low", "\n", "low", "\n", "high", "\n", "low", "\n", "low", "\n", "low", "\n", "\n", "Thank you", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;书上应该是错了。赋值运算优先级应该比逻辑运算符低&lt;br /&gt;正确的运算符优先级看这个&lt;br /&gt;&lt;a href=\"https://docs.python.org/zh-cn/3/reference/expressions.html#operator-precedence\" id=\"textarea_1639588928050_1639589246823_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;6. 表达式 — Python 3.10.1 文档&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://docs.python.org/zh-cn/3/_static/py.svg\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://docs.python.org/zh-cn/3/reference/expressions.html#operator-precedence&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于python优先级", ["我在python的一本书上看到了关于运算符优先级的问题 他的顺序是这样的 从高到低哈", "1.算术运算符", "2.比较运算符", "3.赋值运算符", "4.身份运算符", "5.成员运算符", "6.逻辑运算符", "哪位大神能和我说说 这个赋值运算为啥排在第三位 优先级竟然比逻辑运算符要高 麻烦举例说明下 还有是 身份运算符比成员运算符优先级高 也不理解 解答的大神准备举例解释下这个问题 万分感谢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;优先级从高到低分别是&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;括号、后缀累加器&lt;/li&gt;&lt;li&gt;非运算、强制类型转换、前缀累加器&lt;/li&gt;&lt;li&gt;乘法、除法、取余&lt;/li&gt;&lt;li&gt;加法、减法&lt;/li&gt;&lt;li&gt;位运算左移、右移&lt;/li&gt;&lt;li&gt;大于、小于、大于等于、小于等于&lt;/li&gt;&lt;li&gt;等于、不等于&lt;/li&gt;&lt;li&gt;位运算与&lt;/li&gt;&lt;li&gt;位运算异或&lt;/li&gt;&lt;li&gt;位运算或&lt;/li&gt;&lt;li&gt;与运算&lt;/li&gt;&lt;li&gt;或运算&lt;/li&gt;&lt;li&gt;三目运算&lt;/li&gt;&lt;li&gt;各种类型的赋值&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "优先级", "Question": ["请问运算符的优先级顺序是啥", ["一大串式子不会算-_-||"]], "Tag": "程序设计"}
{"Answer": "优先级越高，被调度的几率越大，并不是优先级高就先执行，优先级低就没有机会执行。如果要控制谁先运行，可以使用同步原语，比如锁，信号量之类的。", "Konwledge_Point": "优先级", "Question": ["你如何理解Thread的优先级？", ["每个线程都有优先级。其值为int ，取值范围为 1〜10，其中1为最低优先级，10为优先级。", "\n\n", "通常较高优先级线程在执行中获得较高优先级，但这取决于依赖于操作系统的ThreadScheduler实现。", "\n\n", "我们可以指定线程的优先级，但不能保证较高优先级的线程在低优先级线程之前被执行。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;逻辑非&amp;gt;关系运算符&amp;gt;逻辑与&amp;gt;逻辑或&amp;gt;条件运算符?&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于C语言的问题，运算符优先级比较", ["关系运算符，条件运算符，逻辑运算符优先级排序比较?"]], "Tag": "程序设计"}
{"Answer": "&lt;, &lt;=, &gt;, &gt;=,&lt;&gt;, !=, ==\t这些比较运算符是相同优先级，与in, not in, is, is not同属一个优先级组。\r\n\r\n再来看你的代码  3==3&gt;2 中有两个运算符== 与&gt; ，优先级相同。\r\n\r\n当优先级相同时候，Python会根据关联性Associativity来执行，除去**指数运算以外都是按照从左往右执行。例如\r\n\r\n```\r\nprint(4 * 7 % 3)\r\n# result 1\r\n\r\nprint(4 ** 2 ** 2)\r\n# Output: 256\r\n\r\n```\r\n**但&gt; == 属于非关联性运算符**，赋值和比较都属于非关联性运算符. 对于这类，Python有具体的规则，不能按照关联性来执行。举个例子 5&lt;7&lt;9  是等效于 5&lt;7 and 7&lt;9.\r\n\r\n所以你的代码 \r\n**3==3&gt;2 相当于 3==3 and 3&gt;2**，你的猜测是正确的。\r\n\r\n可以参考[这篇文章](https://www.techbeamers.com/python-operator-precedence-associativity/)查看更详细内容。", "Konwledge_Point": "优先级", "Question": ["python3比较运算符优先级", ["网上都说比较（<=,<,>,>=)的优先级高于等于（==,!=,<>）的优先级", "\n请问下面的代码怎么解释", "\n\n", ">>> 3==3>2\nTrue\n>>> (3==3)>2\nFalse\n>>> 3==(3>2)\nFalse\n", "\n\n", "我唯一能想到的就是它进行了与运算：", "\n\n", "3==2 and 3>2\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;C/C&amp;#43;&amp;#43;语言标准没有规定运算符的操作数的计算顺序&amp;#xff0c;编译器可以按任意顺序来计算操作数的值&amp;#xff0c;因此如果一个变量在同一个运算符的两个操作数分别被修改或一个修改一个读取&amp;#xff0c;其结果在不同的编译器上可能不一样的。以后不要写这种代码&amp;#xff0c;讨论也没有意义。&lt;br /&gt;From &lt;a href=\"https://en.cppreference.com/w/c/language/eval_order\" id=\"textarea_1642152572377_1642152995846_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://en.cppreference.com/w/c/language/eval_order&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Order of evaluation of the operands of any C operator, including the order of evaluation of function arguments in a function-call expression, and the order of evaluation of the subexpressions within any expression is unspecified&lt;/strong&gt; (except where noted below). The compiler will evaluate them in any order, and may choose another order when the same expression is evaluated again.&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "优先级", "Question": ["C语言++自增运算符优先级问题", ["\n            ", "文章目录", "\n            ", "前言", "一、题目：", "二、解决步骤", "1.初步分析", "2.上机运行验证", "3.逐步分析", "问题", "\n", "\n\n", "前言", "\n", "C运算符中，++自增运算符与其他运算符的优先级比较。", "请看下面这一题。", "求解决。", "呃，这个提问里的ai助手一直提示：禁止重复输入同样的词汇或符号：+", "代码无法上传源码，我只能上传图片了，望见谅。", "我的博客主页的最新文章有关于这个问题的详细过程。", "\n", "\n\n\n", "一、题目：", "\n", "\n", "二、解决步骤", "\n", "1.初步分析", "\n", "这是C语言中一道考察运算符优先级的题目。初步分析如下：", "\n", "\n", "所以结果应该是x=3，y=4", "\n", "2.上机运行验证", "\n", "使用Code::Blocks 20.03运行，", "\n", "运行截图：", "\n", "结果出人意料，只有x=3对了。x=3,无需过多解释，不论顺序如何，x一定是自增了3次，所以一定的是等于3的。但是y=5是怎么得到的呢？", "\n", "3.逐步分析", "\n", "运行截图：", "\n", "\n", "运行截图：", "\n", "\n", "运行截图：", "\n", "\n", "\n", "运行截图：", "\n", "\n", "\n\n", "问题", "\n", "经过这么一分析，呃，貌似属于白费力气，还是没有搞清楚原因。", "望解决，本人已经思考了一下午了😭", "\n"]], "Tag": "程序设计"}
{"Answer": "select userid , role , max(orderNo) from role_table group by userid;\r\n\r\n:)", "Konwledge_Point": "优先级", "Question": ["一个SQL优先级问题", ["一个用户user拥有多个角色role，角色有一定的优先级orderNo，选择出某一个优先级用户的最高优先级的SQL语句怎么写啊", "\n也就是", "\n查询用户所有角色的权限，按优先给从低到高，有重复的可以以高优先级覆盖", "\n如何覆盖？？"]], "Tag": "程序设计"}
{"Answer": "没有优先级，从左到右执行。\r\n![图片说明](https://img-ask.csdn.net/upload/201703/13/1489373872_585252.png)", "Konwledge_Point": "优先级", "Question": ["python中 and，or，not是否存在优先级？", ["在官方文档中并没有发现有优先级的描述，不过看资料时发现大家都在说存在优先级，我个人觉得也不存在优先级，如果真的有，特此请教一下大家。。"]], "Tag": "程序设计"}
{"Answer": "这个在深入理解jvm中有介绍，具体数字记不清，原理是这样的，jvm为线程提供了大概9个优先级，但是不同的操作系统提供的优先级等级也不同，windows没到9个，linux比较多，solaris比linux还要多，而且线程或进程的调度是交由操作系统cpu调度策略调度的，如果你是windows操作系统，假如它只提供了两种优先级，那么你设置的jvm优先级1~4可能映射到操作系统的1优先级，而5~9映射到操作系统的2优先级，所以1~4的效果是一样的，5~9的效果是一样的。\r\n这个问题在深入理解jvm中，多线程优化那部分有介绍！", "Konwledge_Point": "优先级", "Question": ["关于Java中进程中的优先级的一点疑问", ["\n", "public class BasicThreadTest extends Thread{\n    private String _name;\n    public BasicThreadTest(String name){\n        _name = name;\n    }\n    \n    public void run(){\n        try{\n            for(int i = 0; i < 30; i++){\n                System.out.println(\"run ... \" + _name + \" ... \" + i);\n            }\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args){\n        BasicThreadTest th1 = new BasicThreadTest(\"A\");\n        th1.setPriority(7);\n        th1.start();\n        \n        BasicThreadTest th2 = new BasicThreadTest(\"B\");\n        System.out.println(th2.getPriority());\n        th2.start();\n    }\n}", "\n", "在上述代码中，为线程A设置优先级为7，而线程B优先级默认为5。线程A的优先级高于线程B，理论上讲，应该改是A全部执行完成之后，才能执行B。但是实际运行结果为什么是这样的呢？", "\n", "5\nrun ... A ... 0\nrun ... A ... 1\nrun ... A ... 2\nrun ... A ... 3\nrun ... A ... 4\nrun ... A ... 5\nrun ... A ... 6\nrun ... A ... 7\nrun ... A ... 8\nrun ... B ... 0\nrun ... A ... 9\nrun ... B ... 1\nrun ... A ... 10\nrun ... A ... 11\nrun ... A ... 12\nrun ... A ... 13\nrun ... A ... 14\nrun ... B ... 2\nrun ... A ... 15\nrun ... A ... 16\nrun ... B ... 3\nrun ... B ... 4\nrun ... B ... 5\nrun ... B ... 6\nrun ... A ... 17\nrun ... B ... 7\nrun ... A ... 18\nrun ... B ... 8\nrun ... A ... 19\nrun ... B ... 9\nrun ... A ... 20\nrun ... B ... 10\nrun ... A ... 21\nrun ... B ... 11\nrun ... A ... 22\nrun ... B ... 12\nrun ... A ... 23\nrun ... B ... 13\nrun ... A ... 24\nrun ... B ... 14\nrun ... A ... 25\nrun ... B ... 15\nrun ... A ... 26\nrun ... B ... 16\nrun ... A ... 27\nrun ... B ... 17\nrun ... A ... 28\nrun ... B ... 18\nrun ... A ... 29\nrun ... B ... 19\nrun ... B ... 20\nrun ... B ... 21\nrun ... B ... 22\nrun ... B ... 23\nrun ... B ... 24\nrun ... B ... 25\nrun ... B ... 26\nrun ... B ... 27\nrun ... B ... 28\nrun ... B ... 29\n", "\n", "多运行几次的结果有时会在线程A全部执行之后，线程B再执行；有时会出现交错的情况。", "\n", " ", "\n", "不是很理解优先级在这里好像没体现出作用，为什么呢？", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;链表节点可以定义如下&amp;#xff1a;&lt;br /&gt;struct StNode&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  int prio;  //优先级&amp;#xff0c;0-n&amp;#xff0c;0的优先级最高&amp;#xff0c;这个可以灵活设置&amp;#xff0c;相同优先级的按插入顺序排放&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  struct StNode &lt;/span&gt;* next; //下一个节点&lt;br /&gt;}&lt;/p&gt;\n&lt;p&gt;每次插入的时候&amp;#xff0c;按照优先级高低插入链表&amp;#xff0c;相同优先级的&amp;#xff0c;按照插入的先后顺序排列。&amp;#xff08;这个题目考察的是链表的排序和插入&amp;#xff09;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["看病要排队不用优先级队列怎么做", ["不用优先级队列怎么用链队列实现优先级看病排队？", "C语言", "队列不是只能尾进头出吗，在杂乱入队的情况下，要怎样能按优先级输出，能查找优先级高的删除中间结点吗？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这个可以试试&lt;br /&gt;#include&amp;lt;stdio.h&amp;gt;&lt;br /&gt;int main()&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    char  a;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    scanf(&amp;#34;%c&amp;#34;,&amp;amp;a);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    switch(a)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        case &amp;#39;&amp;#43;&amp;#39;:&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        case &amp;#39;-&amp;#39;:&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            printf(&amp;#34;4\\n&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            break;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        case &amp;#39;%&amp;#39;:&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            printf(&amp;#34;3\\n&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            break;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        case &amp;#39;&amp;lt;&amp;#39;:&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        case &amp;#39;&amp;gt;&amp;#39;:&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            printf(&amp;#34;6\\n&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            break;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        case &amp;#39;&amp;amp;&amp;#39;:&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            printf(&amp;#34;8\\n&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            break;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        case &amp;#39;&amp;#61;&amp;#39;:&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            printf(&amp;#34;14\\n&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            break;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        default:&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            printf(&amp;#34;-1\\n&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            break;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    return 0;&lt;/span&gt;&lt;br /&gt;}&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["运算符的优先级，怎么编写", ["输入一个单字符的运算符(+-", "1%>&=,输出它的优先级。+-优先级是4,", ",1,%优先级3,>和<优先级6,&优先级8,=优先级14。如果是其它符号,结果-1."]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&amp;amp;&amp;amp;&amp;gt;||&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["谁来解释一下逻辑或运算符与逻辑与运算符的优先级呀？", ["书上说的逻辑与运算符的优先级大于逻辑或运算符的优先级是不是错了呀？你看上面的例子，明显是逻辑或的优先级大于逻辑与的优先级！！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;应该后&amp;#43;&amp;#43;都是等表达式运算结束后才进行的&amp;#xff0c;所以先*S.top &amp;#61; e&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于* ++ =优先级的问题", ["*S", ".", "top", "++", "=e;", "\n\n", "\n", "为什么先是*S.top=e再S.top++;   ？", "\n", " ++  =的优先级是*>++>=吗"]], "Tag": "程序设计"}
{"Answer": "刚好遇见同一个问题，没找到答案。\r\n跟踪代码发现，在**AutoConfigurationSorter**类中，因为**MybatisAutoConfiguration**和**MybatisPlusAutoConfiguration**两个自动配置类都没有指定**AutoConfigureOrder**，所以就直接按照全限定类名进行排序了。\r\n![图片说明](https://img-ask.csdn.net/upload/202005/26/1590467128_165623.png)", "Konwledge_Point": "优先级", "Question": ["Spring Boot AutoConfiguration优先级问题", ["在引入mybatis-plus-boot-starter后，存在MybatisAutoConfiguration.java和", "\nMybatisPlusAutoConfiguration.java两个类，并且两个类中都有以下方法", "\n\n", " @Bean\n @ConditionalOnMissingBean\n public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {...}\n", "\n\n", "启动时是如何保证优先加载装配MybatisPlusAutoConfiguration.java中的sqlSessionFactory的？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/1625302454043Screenshot_20210703_165213_com.huawei.browser.jpg\" /&gt;&lt;/p&gt;\n&lt;p&gt;BA&lt;br /&gt;AA&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["Python优先级优先级", ["\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;||或运算 从左往右&amp;#xff0c;当第一个条件成立时&amp;#xff0c;后续条件不进行判断&lt;br /&gt;a&amp;#43;b&amp;#43;&amp;#43;: a&amp;#43;b b&amp;#43;&amp;#43; a&amp;#43;b&amp;#61;-1 成立&amp;#xff0c;不执行&amp;#43;&amp;#43;b &amp;#xff1b;执行b&amp;#43;&amp;#43; b&amp;#61;0.&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["C语言运算符优先级结合性", ["12题为什么为0", "C语言运算符优先级怎么看哈啊哈", "谢谢哈啊哈", "不太明白"]], "Tag": "程序设计"}
{"Answer": "对啊，所有先是\r\n表达式1?(表达式2):(表达式3);  然后根据表达式1选择执行2/3   a=b是一个表达式", "Konwledge_Point": "优先级", "Question": ["选择符和赋值符优先级的疑惑", ["a ? a : a = b;", "\n为什么是：", "\na ? a : (a = b);", "\n而“?:”的优先级是高于“=”的..."]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;{&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    &amp;#34;prefer-const&amp;#34;: [&amp;#34;error&amp;#34;, {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        &amp;#34;destructuring&amp;#34;: &amp;#34;any&amp;#34;,&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        &amp;#34;ignoreReadBeforeAssign&amp;#34;: false&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }]&lt;/span&gt;&lt;br /&gt;}&lt;/p&gt;\n&lt;p&gt;看看官网配置&amp;#xff0c;按照官网设置试试。&lt;br /&gt;&lt;a href=\"https://eslint.org/docs/rules/prefer-const#suggest-using-const-prefer-const\" id=\"textarea_1633914976291_1633915439814_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;prefer-const - Rules - ESLint - Pluggable JavaScript linter&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;A pluggable and configurable linter tool for identifying and reporting on patterns in JavaScript. Maintain your code quality with ease.&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://eslint.org/docs/rules/prefer-const#suggest-using-const-prefer-const&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["vue3中eslint的优先级问题", ["vue3创建的时候采用脚手架创建,选择了eslint+airbnb", "\n", "现在需要某个规则覆盖airbnb中的某个规则,以为在该文件中的rules下覆盖即可,但是无效,依旧会报错.报错来源于eslint", "\n", "module.", "exports", " ", "=", " ", "{", "\n", "  root:", " true,\n", "  env:", " ", "{", "\n", "    node:", " true\n  ", "}", ",\n", "  extends:", " [", "\"plugin:vue/vue3-essential\"", ", ", "\"@vue/airbnb\"", ", ", "\"@vue/typescript/recommended\"", "],\n", "  parserOptions:", " ", "{", "\n", "    ecmaVersion:", " ", "2020", "\n  ", "}", ",\n", "  rules:", " ", "{", "\n    ", "\"no-console\"", ": process.env.NODE_ENV === ", "\"production\"", " ? ", "\"warn\"", " : ", "\"off\"", ",\n    ", "\"no-debugger\"", ": process.env.NODE_ENV === ", "\"production\"", " ? ", "\"warn\"", " : ", "\"off\"", ",\n    ", "// \"@typescript-eslint/explicit-module-boundary-types\": \"off\"", "\n    ", "\"prefer-const\"", ": ", "0", "\n  ", "}", "\n", "};", "\n"]], "Tag": "程序设计"}
{"Answer": "自己用Queue构建一个就可以了。", "Konwledge_Point": "优先级", "Question": ["link环境下如何实现有序优先级队列？大根堆小根堆能用的么？", ["link环境下如何实现有序优先级队列？大根堆小根堆能用的么？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;function优先级高。&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/qq_41797950/article/details/107153719\" id=\"textarea_1629382213551_1629382363254_0\" class=\"md_link_card\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n  &lt;span class=\"md_link_title\"&gt;js之- 变量提升 和 函数提升&amp;#xff0c;以及优先级_杜明鸣的博客-CSDN博客_js函数提升和变量提升优先级&lt;/span&gt;\n  &lt;span class=\"md_link_desc\" style=\"\"&gt;变量提升在es6之前&amp;#xff0c;js作用域分&amp;#xff1a;全局作用域和函数作用域在javascript中&amp;#xff0c;定义的变量&amp;#xff0c;变量名会提升到 ‘当前作用域’ 顶部&amp;#xff0c;此时该变量为undefined&amp;#xff0c;未赋值&amp;#xff0c;赋值是在js原位置。console.log(a);  // undefinedvar a &amp;#61; &amp;#34;a&amp;#34;;console.log(a)   // &amp;#34;a&amp;#34;相当于var a;console.log(a);  // undefineda &amp;#61; &amp;#34;a&amp;#34;;console.log(a);  // &amp;#34;a&amp;#34;函数提升在js中&amp;#xff0c;函数分&lt;/span&gt;\n  &lt;span class=\"md_flex_card\"&gt;\n  &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n    &lt;span class=\"flex-1\"&gt;\n      &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/qq_41797950/article/details/107153719&lt;/span&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["JavaScript中var和function哪个提升优先级高？", ["    ", "// 变量名和函数名一样,这时候变量提升和函数提升哪个优先级高？", "\n    ", "// 以下两个代码块变量声明了,但没有赋值。调换变量声明的位置,输出结果都是function", "\n    ", "// 是否意味着函数提升优先级高？", "\n\n    ", "var", " fun_1;\n    ", "function", " ", "fun_1", "(", ") { };\n    ", "console", ".", "log", "(", "typeof", " fun_1);\n\n    ", "function", " ", "fun_2", "(", "){};\n    ", "var", " fun_2;\n    ", "console", ".", "log", "(", "typeof", " fun_2);\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你的外中断里有个死循环 退不出去&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["stm32中断优先级配置问题", ["stm32中断优先级配置问题  ,明明配置好了优先级,但TIM6中断无法插入到EXTI中断里", "\n", "#", "include", " ", "\"stm32f10x.h\"", "\n", "#", "include", " ", "\"include.h\"", "\n", "#", "define", " mem *(unsigned int *)", "\n", "#", "define", " MOV(a,b) a=b", "\n", "#", "define", " AND(a,b)  a&=b", "\n", "#", "define", " ADD(a,b) a+=b", "\n", "#", "define", " OR(a,b) a|=b", "\n", "unsigned", " ", "int", " ax=", "0", ";\n\n", "void", "     ", "TIM6_IRQHandler", "()", " ", "{\n        ax++;\n        ", "AND", "(mem ", "0x40001010", ",", "0x0", ");\n     \n        ", "if", "(ax<=", "1000", "){\n         ", "MOV", "(mem ", "0x40010C0C", ",", "0xFFFF", ");   \n        }\n        ", "if", "(ax>", "1000", "){\n     ", "MOV", "(mem ", "0x40010C0C", ",", "0xFFFD", ");   ", "//light up", "\n            ", "if", "(ax==", "2000", "){\n            ax=", "0", ";\n            }\n        }    \n}\n", "void", " ", "EXTI9_5_IRQHandler", "()", "{\n", "if", "((mem ", "0x40010414", "&", "1", "<<", "9", ")!=", "0", "){\n    mem ", "0x40010414", "|=", "1", "<<", "9", ";\n       ax=", "0", ";\n    ", "while", "(", "1", ");\n    }    \n}\n\n", "void", "  ", "Init", "()", "{\n    ", "OR", "(mem ", "0x40021018", " ,", "1", "<<", "3", ");   ", "//CRM_APB2EN GPIOB clock enable", "\n    ", "OR", "(mem ", "0x40021018", " ,", "1", "<<", "0", ");   ", "//CRM_APB2EN IOMUX clock enable", "\n    ", "MOV", "(mem ", "0xE000ED0C", ",(", "0x5FA", ")<<", "16", ");\n    ", "MOV", "(mem ", "0xE000ED0C", " ,", "0x600", ");", "//AIRCR PRIGROUP x.yyy", "\n    ", "MOV", "(mem ", "0xE000E454", " ,", "0x0000", "); ", "//NVIC_IPR set int 54 PRI", "\n    ", "MOV", "(mem ", "0xE000E423", " ,", "0xFFFF", "); ", "//NVIC_IPR set int 23 PRI", "\n    mem ", "0x40010010", "|=(", "1", "<<", "5", "); ", "//EXINT9 PC9", "\n    mem ", "0x40010400", "|=(", "1", "<<", "9", "); ", "//EXINT_INTEN EXINT9", "\n    mem ", "0x4001040C", "|=(", "1", "<<", "9", "); ", "//EXINT_POLCFG1 EXINT9 Falling", "\n    ", "OR", "(mem ", "0x4002101C", " ,", "1", "<<", "4", ");  ", "//CRM_APB1EN  TMR6 clock enable", "\n    ", "OR", "(mem ", "0xE000E104", " ,", "1", "<<", "22", ");   ", "//NVIC_ISER1 int 54 enable", "\n    ", "OR", "(mem ", "0xE000E100", " ,", "1", "<<", "23", ");   ", "//NVIC_ISER1 int 23 enable", "\n    ", "OR", "(mem ", "0x40001000", " ,", "0x1", ");  ", "//GPIOx_CFGLR [0,3] output", "\n    ", "MOV", "(mem ", "0x40001028", " ,", "0xF", ");   ", "//TMR6_DIV 15", "\n    ", "MOV", "(mem ", "0x4000102C", " ,", "0x3E7", ");     ", "//TMR6_PR 999", "\n    ", "MOV", "(mem ", "0x4001100C", " ,", "0xFFF0", ");      ", "//GPIOC_ODT", "\n  ", "MOV", "(mem ", "0X40010C0C", " ,", "0xFFFF", ");     ", "//GPIOB_ODT", "\n  ", "MOV", "(mem ", "0x40011004", " ,", "0x11111144", ");   ", "//GPIOC_CFGHR ", "\n  ", "MOV", "(mem ", "0X40010C00", " ,", "0x11111111", ");    ", "//GPIOC_CFGLR ", "\n    ", "OR", "(mem ", "0x4000100C", ",", "0x1", ");  ", "//TMR6_IDEN (overflow interrupt enable", "\n}\n", "int", " ", "main", "()", "{\n      ", "Init", "();\n     ", "return", " ", "0", ";\n}\n", "\n", "按下PC9后小灯就不闪了"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;y &amp;#61;&amp;#61; z先于&amp;amp;&amp;amp;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["优先级：％ 大于&&大于＝＝", ["\n", "优先级：％ 大于&&大于＝＝", "所以不应该是先算x％2，这一部分等于0，然后0&&y，这一部分等于0，然后0＝＝z，因为z本来就是0，所以0＝＝z为真，值不应该为1吗"]], "Tag": "程序设计"}
{"Answer": "肯定是struts.xml优先级高啊, struts.properties中是默认配置, 你自己写的struts.xml配置相同的常量相当于更改默认配置,其余未配项保持默认配置.", "Konwledge_Point": "优先级", "Question": ["Struts2 配置文件优先级", ["struts.properties和struts.xml中配置了相同的常量，哪个优先级高？"]], "Tag": "程序设计"}
{"Answer": "参考我之前的回答：https://ask.csdn.net/questions/677045\r\n\r\n采纳本回答，可以帮你改写成mfc的", "Konwledge_Point": "优先级", "Question": ["求一个MFC四则运算有优先级的计算器", ["https://blog.csdn.net/dsqsyspa/article/details/78598471", " ", "\n就是1+5X2结果等于11的", "\n主要是**优先级**！！分步计算我是会写的..算一个有优先级的式子不太会..", "\n我看博主的思路写的..但是不对...MFC我也不会怎么逐过程debug...", "有人能给个下载学习一下 或者看下博主代码哪里错了吗 ", "\n还有...MFC怎么像平时C++那样分步debug啊..", "界面大概就这样..上面那个edit是计算的式子..下面那个是得到的结果"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这与运算符优先级没有关系&amp;#xff0c;与&amp;#43;&amp;#43;num和num&amp;#43;&amp;#43;的区别有关系&amp;#xff0c;一个是先自增一个是后自增&amp;#xff0c;如果是&amp;#43;&amp;#43;num&amp;#xff0c;输出应该是1 2&amp;#xff0c;如果是后自增&amp;#xff0c;当n等于2时进入whie((n&amp;#43;&amp;#43;)&amp;lt;&amp;#61;2)语句&amp;#xff0c;先2&amp;lt;&amp;#61;2判断条件为真&amp;#xff0c;再执行a&amp;#43;&amp;#43;使a&amp;#61;3&amp;#xff1b;接下来才来到printf语句&amp;#xff0c;所以输出的是3.&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["新手求问，C语言中C++<=2 到底如何判别？和优先级有冲突吗？", ["在优先级排序中", "\n\n", "算术运算符优先级C++明显高于<=赋值运算符", "\n\n", "所以加了括号以后是：（C++）<=2", "\n\n", "所以是C++与2做比较？", "\n\n", "输出应当是 1,2", "\n\n", "\n\n", "但是输出结果为1,2,3", "\n\n", "也就是说仍然是n和2在作比较，为什么呢？++不是优先级更高一些吗？"]], "Tag": "程序设计"}
{"Answer": "所谓线程优先级，个人理解只是对资源竞争的一个辨别依据，就是说当多个线程竞争资源时，具有较高优先级的线程会优先执行。\n楼主的线程执行过程太短、逻辑太简单，基本不存在竞争问题，当然看不出优先级的作用……\n其实所谓优先级只有在长期稳定运行的系统中才有用，这个很难测试的……", "Konwledge_Point": "优先级", "Question": ["java多线程的setPriority设置线程优先级", ["这是java线程的优先级： ", " java.lang.Thread ", " public static final int MAX_PRIORITY 10 ", " public static final int MIN_PRIORITY 1 ", " public static final int NORM_PRIORITY 5 ", "默认main方法也就是主线程的级别是5，这个我测试过啦:", "\npublic static  void main(String args []){", "\n   ClassLoader  loader = Test.class.getClassLoader();", "\n   System.out.println(loader);", "\n   System.out.println(Thread.currentThread().getPriority());", "\n   System.out.println(Thread.currentThread().getName());", "\n}", "打印输出的结果是5和main", "现在我自己创建5个线程，并分别给每个线程设置最小线程优先级：", "\npublic class Test extends Thread{\n\n", "private int countDown = 5;\n  private int threadNumber;\n  private static int threadCount = 0;\n  public Test() {\n    threadNumber = ++threadCount;\n    System.out.println(\"Making \" + threadNumber);\n  }\n  public void run() {\n    while(true) {\n      System.out.println(\"Thread \" + \n        threadNumber + \"(\" + countDown + \")\");\n      if(--countDown == 0) return;\n    }\n  }\n\n\npublic static  void main(String args []){\n    for(int i = 0; i &lt; 5; i++){\n          Test  test = new Test();\n          System.out.println(\"Test\"+(i+1)+\":\"+test.getName());\n          test.setPriority(1);   //设置为最小级别\n          System.out.println(\"Test\"+(i+1)+\":\"+test.getPriority());\n          test.start();\n    }\n    System.out.println(\"All Threads Started\");\n    System.out.println(Thread.currentThread().getPriority());\n    System.out.println(Thread.currentThread().getName());\n}\n", "\n\n", "}", "按照上面这个代码，我给每个自定义的线程设置优先级为1，应该是等主线程，MAIN执行完之后才执行另外5个自定义线程。", "也就是先要打印构造函数里面的值，才开始执行run，但是为什么输出的结果是一下这个样子：", "Making 1", "Test1:Thread-1", "Test1:1", "Making 2", "Test2:Thread-2", "Test2:1", "Making 3", "Test3:Thread-3", "Thread 2(5)", "Thread 1(5)", "Thread 2(4)", "Test3:1", "Thread 1(4)", "Thread 2(3)", "Thread 2(2)", "Thread 2(1)", "Making 4", "Test4:Thread-4", "Test4:1", "Thread 1(3)", "Thread 3(5)", "Thread 4(5)", "Making 5", "Thread 3(4)", "Thread 1(2)", "Thread 4(4)", "Test5:Thread-5", "Thread 3(3)", "Thread 1(1)", "Thread 4(3)", "Test5:1", "Thread 3(2)", "Thread 4(2)", "Thread 3(1)", "Thread 4(1)", "All Threads Started", "Thread 5(5)", "5", "Thread 5(4)", "main", "Thread 5(3)", "Thread 5(2)", "Thread 5(1)", "是不是我对优先级理解错误啦。寻求真相。", "问题补充", "fmjsjx 写道", "所谓线程优先级，个人理解只是对资源竞争的一个辨别依据，就是说当多个线程竞争资源时，具有较高优先级的线程会优先执行。", "楼主的线程执行过程太短、逻辑太简单，基本不存在竞争问题，当然看不出优先级的作用……", "其实所谓优先级只有在长期稳定运行的系统中才有用，这个很难测试的……", "这样啊。"]], "Tag": "程序设计"}
{"Answer": "参考：http://download.csdn.net/download/Miu__Y/3309472", "Konwledge_Point": "优先级", "Question": ["link中如何用大根堆小根堆实现优先级队列？是不是需要自己写数据结构？", ["link中如何用大根堆小根堆实现优先级队列？是不是需要自己写数据结构？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;我小学的时候写过一个类似的&amp;#xff0c;但是因为那个时候还小。写的好丑&amp;#xff0c;凑合着看吧。不懂问我&amp;#xff1b;&lt;br /&gt;望采纳&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;conio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; TEN 10&lt;/span&gt;\n\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ONE_H;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; area;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; OPERATION_1[TEN];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; OPERATION_2[TEN];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; OPERATION_A_YUN;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; OPERATION_B_YUN;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Clearn&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;AREA&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;OPERATION_FOR_1&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;OPERATION_FOR_2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;VALUATION&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ADD&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;MINUS&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;MULTIPLY&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;DIVISION&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;GUI&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;0&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (;;) {\n        &lt;span class=\"hljs-comment\"&gt;// 结果初始化为0&lt;/span&gt;\n        area &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-comment\"&gt;// 标志现在是 第奇次 还是第偶次运算 运算&lt;/span&gt;\n        ONE_H &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-comment\"&gt;//Clearn();&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n            &lt;span class=\"hljs-comment\"&gt;// 输出答案&lt;/span&gt;\n\n            &lt;span class=\"hljs-comment\"&gt;// 奇次&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (ONE_H % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                &lt;span class=\"hljs-built_in\"&gt;OPERATION_FOR_1&lt;/span&gt;();\n            &lt;span class=\"hljs-comment\"&gt;// 偶次&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (ONE_H % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n                &lt;span class=\"hljs-built_in\"&gt;OPERATION_FOR_2&lt;/span&gt;();\n\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (ONE_H &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                &lt;span class=\"hljs-built_in\"&gt;VALUATION&lt;/span&gt;();\n            &lt;span class=\"hljs-comment\"&gt;// 加法&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;ADD&lt;/span&gt;();\n            &lt;span class=\"hljs-comment\"&gt;// 减法&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;MINUS&lt;/span&gt;();\n            &lt;span class=\"hljs-comment\"&gt;// 乘法&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;MULTIPLY&lt;/span&gt;();\n            &lt;span class=\"hljs-comment\"&gt;// 除法&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;DIVISION&lt;/span&gt;();\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ( &lt;span class=\"hljs-built_in\"&gt;GUI&lt;/span&gt;() ) {\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n            &lt;span class=\"hljs-built_in\"&gt;AREA&lt;/span&gt;();\n            ONE_H&amp;#43;&amp;#43;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;AREA&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{   &lt;span class=\"hljs-comment\"&gt;//?????&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, area);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;OPERATION_FOR_1&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;// 单个字符的读入 在10个字符 范围内&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (OPERATION_A_YUN &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; OPERATION_A_YUN &amp;lt; TEN; OPERATION_A_YUN&amp;#43;&amp;#43;) {\n        OPERATION_1[OPERATION_A_YUN] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;getch&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_A_YUN &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;putchar&lt;/span&gt;(OPERATION_1[OPERATION_A_YUN]);\n        &lt;span class=\"hljs-comment\"&gt;// 如果输入的字符不是 数字的话就停止读入&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_1[OPERATION_A_YUN] &amp;gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt; || OPERATION_1[OPERATION_A_YUN] &amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;OPERATION_FOR_2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (OPERATION_B_YUN &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; OPERATION_B_YUN &amp;lt; TEN; OPERATION_B_YUN&amp;#43;&amp;#43;) {\n        OPERATION_2[OPERATION_B_YUN] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;getch&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_B_YUN &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;putchar&lt;/span&gt;(OPERATION_2[OPERATION_B_YUN]);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_2[OPERATION_B_YUN] &amp;gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt; || OPERATION_2[OPERATION_B_YUN] &amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;VALUATION&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{  &lt;span class=\"hljs-comment\"&gt;//??OPERATION_1???????area&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, E_1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; OPERATION_A_YUN - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) {\n        area &amp;#61; area &amp;#43; (OPERATION_1[i] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) * E_1;\n        E_1 *&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ADD&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_1[OPERATION_A_YUN] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; ONE_H !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ONE_H % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, E_1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; OPERATION_B_YUN - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) {\n            area &amp;#61; area &amp;#43; (OPERATION_2[i] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) * E_1;\n            E_1 *&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_2[OPERATION_B_YUN] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; ONE_H !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ONE_H % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, E_1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; OPERATION_A_YUN - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) {\n            area &amp;#61; area &amp;#43; (OPERATION_1[i] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) * E_1;\n            E_1 *&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        }\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;MINUS&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_1[OPERATION_A_YUN] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; ONE_H !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ONE_H % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, E_1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; OPERATION_B_YUN - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) {\n            area &amp;#61; area - (OPERATION_2[i] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) * E_1;\n            E_1 *&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_2[OPERATION_B_YUN] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; ONE_H !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ONE_H % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, E_1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; OPERATION_A_YUN - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) {\n            area &amp;#61; area - (OPERATION_1[i] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) * E_1;\n            E_1 *&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        }\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;MULTIPLY&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_1[OPERATION_A_YUN] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; ONE_H !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ONE_H % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, E_1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, mod_A &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; OPERATION_B_YUN - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) {\n            mod_A &amp;#61; mod_A &amp;#43; (OPERATION_2[i] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) * E_1;\n            E_1 *&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        }\n        area *&amp;#61; mod_A;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_2[OPERATION_B_YUN] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; ONE_H !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ONE_H % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, E_1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, mod_A &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; OPERATION_A_YUN - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) {\n            mod_A &amp;#61; mod_A &amp;#43; (OPERATION_1[i] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) * E_1;\n            E_1 *&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        }\n        area *&amp;#61; mod_A;\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;DIVISION&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_1[OPERATION_A_YUN] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; ONE_H !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ONE_H % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, E_1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, DIVISION_A &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; OPERATION_B_YUN - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) {\n            DIVISION_A &amp;#61; DIVISION_A &amp;#43; (OPERATION_2[i] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) * E_1;\n            E_1 *&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        }\n        area /&amp;#61; DIVISION_A;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_2[OPERATION_B_YUN] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; ONE_H !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ONE_H % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, E_1 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, DIVISION_A &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; OPERATION_A_YUN - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) {\n            DIVISION_A &amp;#61; DIVISION_A &amp;#43; (OPERATION_1[i] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) * E_1;\n            E_1 *&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        }\n        area /&amp;#61; DIVISION_A;\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;GUI&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;// 如果输入的是 A 的话就归零&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_1[OPERATION_A_YUN] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; || OPERATION_1[OPERATION_A_YUN] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;) {\n        area &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, area);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_2[OPERATION_B_YUN] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; || OPERATION_1[OPERATION_B_YUN] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;) {\n        area &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, area);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_1[OPERATION_A_YUN] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#61;&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; ONE_H !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ONE_H % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, area);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (OPERATION_2[OPERATION_B_YUN] &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#61;&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; ONE_H !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ONE_H % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, area);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Clearn&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    ONE_H &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    area &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ; i &amp;lt; TEN ; i&amp;#43;&amp;#43; ){\n        OPERATION_1[i] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ; i &amp;lt; TEN ; i&amp;#43;&amp;#43; ){\n            OPERATION_2[i] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    OPERATION_A_YUN &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    OPERATION_B_YUN &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["c语言怎么用函数使四则运算不按优先级", ["模拟简单运算器的工作，输入一个算式（没有空格），遇等号\"=\"说明输入 结束，输出结果。假设计算器只能进行加、减、乘、除运算，运算数和结果都是整数，4 种运算符的优先级相同，按从左到右的顺序计算。例如，输入 1+2*10-10/2=后，输出10。试编写相应程序。其中的运算部分要求定义函数实现。", "\n", "我想设四个函数让他分头进行，但是要输入啊——不会了"]], "Tag": "程序设计"}
{"Answer": "线程优先级高的并不一定会先执行完，优先级的唯一作用就是（两个线程同时）在等待的时候，会优先把资源分配给优先级高的线程（产生优先级高的线程先执行的错觉），如果你的（优先级低）线程已经开始执行了，那么后面优先级高的线程并不会抢夺资源优先执行，而是等待系统分配资源，由于在主函数中是顺序执行的，你把优先级低的线程放在前面（更早开始执行），那它的执行顺序就会在高优先级的前面，优先级一般在高并发中才能体现出来，一两个线程没什么意义", "Konwledge_Point": "优先级", "Question": ["简单的线程优先级的问题", ["在实现java编程思想的小例子的时候发现运行结果不一样，书上的结果是先执行完优先级最高的才执行优先级低的，但是我的却没有先把优先级最高的线程执行完", "\n代码如下：", "\npackage concurrency;", "\n\n", "import java.util.concurrent.*;", "\n\n", "public class SimplePriorities implements Runnable{", "\n\n", "private int countDown = 5;\nprivate int priority;\n@SuppressWarnings(\"unused\")\nprivate volatile double d;\n\npublic SimplePriorities(int priority) {\n    this.priority = priority;\n}\n\npublic String toString(){\n    return Thread.currentThread() + \": \" + countDown;\n}\n\n@Override\npublic void run(){ \n    Thread.currentThread().setPriority(priority);\n    while(true){\n        for(int i = 1; i < 100000; i++){\n            d += (Math.PI + Math.E) / (double)i;\n            if(i % 1000 == 0)\n                Thread.yield();\n        }\n        System.out.println(this);\n        if(--countDown == 0)\n            return;\n    }\n}\n\npublic static void main(String[] args) {\n\n    ExecutorService exec = Executors.newCachedThreadPool();\n\n    for (int i = 0; i < 5; i++) {\n        exec.execute(new SimplePriorities(Thread.MIN_PRIORITY));\n    }\n    exec.execute(new SimplePriorities(Thread.MAX_PRIORITY));\n    exec.shutdown();\n\n}\n", "\n\n", "}", "\n运行结果如下", "\nThread[pool-1-thread-6,10,main]: 5", "\nThread[pool-1-thread-6,10,main]: 4", "\nThread[pool-1-thread-4,1,main]: 5", "\nThread[pool-1-thread-3,1,main]: 5", "\nThread[pool-1-thread-1,1,main]: 5", "\nThread[pool-1-thread-2,1,main]: 5", "\nThread[pool-1-thread-6,10,main]: 3", "\nThread[pool-1-thread-5,1,main]: 5", "\nThread[pool-1-thread-6,10,main]: 2", "\nThread[pool-1-thread-6,10,main]: 1", "\nThread[pool-1-thread-4,1,main]: 4", "\nThread[pool-1-thread-1,1,main]: 4", "\nThread[pool-1-thread-3,1,main]: 4", "\nThread[pool-1-thread-2,1,main]: 4", "\nThread[pool-1-thread-5,1,main]: 4", "\nThread[pool-1-thread-4,1,main]: 3", "\nThread[pool-1-thread-2,1,main]: 3", "\nThread[pool-1-thread-1,1,main]: 3", "\nThread[pool-1-thread-3,1,main]: 3", "\nThread[pool-1-thread-5,1,main]: 3", "\nThread[pool-1-thread-3,1,main]: 2", "\nThread[pool-1-thread-2,1,main]: 2", "\nThread[pool-1-thread-4,1,main]: 2", "\nThread[pool-1-thread-1,1,main]: 2", "\nThread[pool-1-thread-5,1,main]: 2", "\nThread[pool-1-thread-3,1,main]: 1", "\nThread[pool-1-thread-4,1,main]: 1", "\nThread[pool-1-thread-2,1,main]: 1", "\nThread[pool-1-thread-1,1,main]: 1", "\nThread[pool-1-thread-5,1,main]: 1", "\n求大神赐教！"]], "Tag": "程序设计"}
{"Answer": "不管什么优先级，只要有括号，都是先执行括号。你这里前面是有括号的。\r\n好比\r\n(1+1)*2，当然先算1+1，不管*优先级多高。", "Konwledge_Point": "优先级", "Question": ["C语言的语法问题，关于等号和赋值号的先后顺序？", ["if((fp=fopen(filepath,\"w\"))==NULL)这句话", "\n等号优先级高于赋值，那么先进行判断", "\n再赋值 fp不就只能有0或者1了吗"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;先是等号或不等号后是并&amp;#xff0c;最后是或&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["如何判断if语句里边的优先级", ["我这里是这么写的判断闰年", "我如果把里面的括号去掉，那么判断的顺序是啥，怎么判断的", "\n", "\n", "if", "((i%", "4", "==", "0", "&&i%", "100", "!=", "0", ")||i%", "400", "==", "0", ")\n"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The PHP statements from the &lt;a href=\"http://php.net/manual/en/function.include.php\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt; family do not copy-paste the content of the included file in the context of the includer. The inclusion happens at runtime.&lt;/p&gt;\n\n&lt;p&gt;In your first example, the function &lt;code&gt;toto()&lt;/code&gt; defined in the main file is created during the compilation. Then, on the execution, the &lt;code&gt;functions.php&lt;/code&gt; file is read and parsed. It generates an error because it attempts to define the function &lt;code&gt;toto()&lt;/code&gt; that is already defined. &lt;/p&gt;\n\n&lt;p&gt;The same happens in the second example during the inclusion of &lt;code&gt;functions.php&lt;/code&gt;. Also, you get the same error if you declare the function &lt;code&gt;toto()&lt;/code&gt; two times in the main script.&lt;/p&gt;\n\n&lt;p&gt;Either way, the PHP functions and constants cannot be re-declared.\nA quick quote from the &lt;a href=\"http://php.net/manual/en/functions.user-defined.php\" rel=\"nofollow noreferrer\"&gt;documentation&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;PHP does not support function overloading, nor is it possible to undefine or redefine previously-declared functions. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You can check if a function is already defined (to avoid defining it again) by using the &lt;a href=\"http://php.net/manual/en/function.function-exists.php\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;function_exists()&lt;/code&gt;&lt;/a&gt; PHP function:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function toto() { return 1; }\n\nif (! function_exists('toto')) {\n    function toto() { return 2; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["PHP优先级函数声明", ["\n\n", "I have a question on the way that functions are declared in PHP.", "\n\n", " First test : ", "\n\n", "File \"functions.php\" => ", "functions toto(){ return \"1\"; }", "\n\n", "Main File", "\n\n", "\n\n    include(\"functions.php\")\n    functions toto(){ return \"main\"; }\n    echo toto();\n\n", "\n\n", "Second test ", "\n\n", "File \"functions.php\" => ", "functions toto(){ return \"1\"; }", "\n\n", "File \"functions2.php\" => ", "functions toto(){ return \"2\"; }", "\n\n", "Main File", "\n\n", "\n\n    include(\"functions.php\")\n    include(\"functions2.php\")\n    echo toto();\n\n", "\n\n", "Results", "\n\n", "The first test work and echo \"main\" ", "\nThe second test doesn't work => fatal error \"function toto already define\"\n", "\nI make complementary tests : ", "\n\n", "\n", "in first test : put the functions toto() before include doesn't change the result.", "\n", "Create twice functions toto() in the main file create Fatal Error", "\n", "\n", "\nSomeone can explain me how exactly this work ?", "\nThanks for reading", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You are actually doing this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var_dump(0b10 &amp;amp; (0b01 == 0));\nvar_dump(0b10 &amp;amp; (0b01 != 0));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Try:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var_dump((0b10 &amp;amp; 0b01) == 0);\nvar_dump((0b10 &amp;amp; 0b01) != 0);\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["优先级和位掩码操作", ["\n\n", "I've come across a (seemingly) very strange case.", "\n\n", "Take the number 2 (", "0b10", ") and bitmask it with 1 (", "0b01", ")", "\n\n", "This should produce ", "0b00", " which is equivalent to 0.", "\n\n", "However, here's where Mr Schrödinger comes in:", "\n\n", "var_dump(0b10 & 0b01); // int(0)\nvar_dump(0b10 & 0b01 == 0); // int(0)\nvar_dump(0b10 & 0b01 != 0); // int(0)\n", "\n\n", "Whiskey. Tango. Foxtrot.", "\n\n", "I am, admittedly, not the sharpest when it comes to bitwise operators - so maybe I've got horribly, horribly wrong somewhere?", "\n\n", "However, in Python:", "\n\n", "0b10 & 0b01 == 0", " = ", "True", "\n\n", "0b10 & 0b01 != 0", " = ", "False", "\n\n", "...so?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;第二行中a&amp;#61;15/10%9&amp;#61;1%9&amp;#61;1.第三行由于&amp;#43;优先级大于&amp;amp;&amp;amp;&amp;#xff0c;所以b&amp;#61;a&amp;amp;&amp;amp;-6&amp;#61;1&amp;amp;&amp;amp;-6&amp;#61;1.&lt;br /&gt;所以答案为1.&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["C++符号的运算优先级", ["\n", "大佬们，这个式子里面b最后等于多少呀"]], "Tag": "程序设计"}
{"Answer": "还一个问题，你的程序中  TestSort p1 = new TestSort(\"selectionSort\");\r\n        TestSort p2 = new TestSort(\"bubleSort\");\r\n        TestSort p3 = new TestSort(\"insertSort\");\r\n\r\n也不会发生数据同步访问的可能性，你这里synchronized (this.name) {\r\n        if(this.name.equals(\"selectionSort\"))\r\n            selectionSort();\r\n        else if(this.name.equalsIgnoreCase(\"bubleSort\"))\r\n            bubbleSort();\r\n        else if(this.name.equals(\"insertSort\"))\r\n            insertionSort();\r\n        }\r\n同步操作没什么意义。\r\n楼主还得多理解下线程使用的场景。", "Konwledge_Point": "优先级", "Question": ["线程优先级问题", ["package thread;", "import java.lang.Runnable;", "import java.math.*;", "import java.util.*;", "public class TestSort extends Thread{", "    int data[] = new int[10000];", "    String name;", "    public TestSort(String name)", "    {", "        super(name);", "        this.name = name;", "        setTheArray();", "    }", "    void setTheArray()", "    {", "        int i=0;", "        while(i<10000)", "        {", "            data[i++]=(int)Math.random();", "        }", "    }", "    public void swap(int []array,int i,int j)", "    {", "        int temp = array[i];", "        array[i] = array[j];", "        array[j] = temp;", "    }", "    public void selectionSort()", "    {", "        Calendar time1 = Calendar.getInstance();", "        int sec1 = time1.get(Calendar.MILLISECOND);", "        System.out.println(\"selectionSort\");", "        for(int i = 0;i<data.length;i++)", "        {", "            int minIdex = i;", "            for( int j = i+1;j<data.length;j++)", "                if (data[j]<data[minIdex])", "                    minIdex =  j;", "            if(minIdex != i)", "                swap(data,minIdex,i);", "        }", "        Calendar time2 = Calendar.getInstance();", "        int sec2 = time2.get(Calendar.MILLISECOND);", "//        System.out.println(\"selectionSort used the millisec is\"+(sec2-sec1));", "        ", "    }", "    ", "    public void bubbleSort()", "    {", "        Calendar time5 = Calendar.getInstance();", "        int sec5 = time5.get(Calendar.MILLISECOND);", "        System.out.println(\"bubbleSort\");", "        for(int i = 0;i<data.length-1;i++)", "        {", "            boolean swapped = false;", "            for(int j = 0;j<data.length-i-1;j++)", "                if(data[j]>data[j+1])", "                {", "                    swap(data,j,j+1);", "                    swapped = true;", "                }", "            if(!swapped)", "                return;", "        }", "        Calendar time6 = Calendar.getInstance();", "        int sec6 = time6.get(Calendar.MILLISECOND);", "//        System.out.println(\"bubbleSortused the millisec is\"+(sec6-sec5));", "        ", "    }", "    public void insertionSort()", "    {", "        Calendar time3 = Calendar.getInstance();", "        int sec3 = time3.get(Calendar.MILLISECOND);", "        System.out.println(\"insertionSort\");", "        for(int i = 1;i<data.length;i++)", "        {", "            int itemToInsert = data[i];", "            int j = i-1;", "            while(j>=0)", "            {", "                if(itemToInsert<data[j])", "                {", "                    data[j+1] = data[j];", "                    j--;", "                }", "                else", "                    break;", "            }", "            data[j+1] = itemToInsert;", "        }", "        Calendar time4 = Calendar.getInstance();", "        int sec4 = time4.get(Calendar.MILLISECOND);", "//        System.out.println(\"insertionSort used the millisec is\"+(sec4-sec3));", "    }", "    public void run()", "    {", "        synchronized (this.name) {", "        if(this.name.equals(\"selectionSort\"))", "            selectionSort();", "        else if(this.name.equalsIgnoreCase(\"bubleSort\"))", "            bubbleSort();", "        else if(this.name.equals(\"insertSort\"))", "            insertionSort();", "        }", "    }", "    ", "    public static void  main(String args[])", "    {", "        TestSort p1 = new TestSort(\"selectionSort\");", "        TestSort p2 = new TestSort(\"bubleSort\");", "        TestSort p3 = new TestSort(\"insertSort\");", "        p1.setPriority(Thread.MAX_PRIORITY);", "        p1.setPriority(Thread.NORM_PRIORITY);", "        p1.setPriority(Thread.MIN_PRIORITY);", "        p1.start();", "        p2.start();", "        p3.start();", "    }", "}", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", "结果是随机调度线程？？？"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You have heard of Weighted Fair Queues?  That is a well developed way to schedule such that a prediction is made about which job should theoretically complete first, and that is the one that is serviced.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["转到：并发和优先级排序", ["\n\n", "I have n ~=1000 jobs running on outside servers, each tied to a go-routine in my program. I started the jobs at different times, and they finish roughly in the order they were started, but that's not guaranteed.", "\n\n", "From each go-routine I poll its corresponding server job: is it done yet? My  outbound requests are rate-limited, so I need to poll smartly.", "\n\n", "I want to prioritize polling by go-routines whose jobs were started earlier. The way I'm doing it now, I have a channel that represents my rate limit, and all go-routines wait to acquire a value from this channel, poll their server, and then put a value back. ", "\n\n", "But, there's no guarantee that these go-routines would even read randomly (much less in priority order), because the behavior of multiple go-routines reading on the same channel is undefined.", "\n\n", "Could someone guide me as to how to think about this problem? It doesn't have to be specific, but I'm not sure what primitives and data structures I would use in Go to read from channels in priority order, while taking into account rate-limiting.", "\n\n", "It seems difficult because individual goroutines do not know the state of the whole program -- which of their colleague routines were started first, etc. They should merely be fed whether or not they should poll their server at any given time.", "\n\n", "Thank you.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你是说i&amp;#43;&amp;#43;增加了括号以后优先级没有提高吗&amp;#xff1f;&lt;/p&gt;\n\n&lt;p&gt;得这句话结束后i才会加1&amp;#xff0c;在这行加再多的括号也没用&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["Java优先级括号为什么不能提高优先级", ["\n", "public class HelloWorld {\n    public static void main(String []args) {\n\t\tint i = 1;\n       \tSystem.out.println(i);\n\t\tSystem.out.println((i++));\n    }\n}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1.轮询的频率不要过密,2请求数据时用异步请求关闭轮询定时器 当请求2成功后在打开轮询, 3因为定时器轮询卡在了程序的进程 所以控制台打印了 界面还没有更新&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["js 轮询 请求优先级的问题", ["有请求1在轮询，不断的请求数据。此时点击按钮，发送请求2，因为请求1在不断请求，导致了请求2被挂起，导致请求2（本身只要1s就能完成）要十几秒才执行完。", "需要让请求2最先执行，不被挂起，要怎么操作？", "\n", "此外，我点击按钮执行请求2时，2s后请求成功了一次输出结果，但是浏览器中查看还在等待，并未完成，当十几秒后浏览器上显示请求完成，请求2又执行了一次且输出结果是为什么？"]], "Tag": "程序设计"}
{"Answer": "```\r\n 首先，&amp;&amp;优先级大，所以表达式其实是  (a&lt;b)|| ((++a==5)&amp;&amp;(c&gt;b--))\r\n因为a&lt;b是ture，而条件是或，两者只要其一为true，后者无论true false都不影响表达式返回true了，所以后面(++a==5)&amp;&amp;(c&gt;b--)不执行了。\r\n这个程序给你的启示是，不要在布尔表达式中使用带有副作用的运算符。\r\n```", "Konwledge_Point": "优先级", "Question": ["优先级问题，伟摄麽大声求救", [" #include<stdio.h>\nint main(){\n  int a=4,b=7,c=5;\n  int d= (a<b)||(++a==5)&&(c>b--);\n  printf(\"%d %d %d %d\",d,a,b,c);\n        return 0;\n\n} ![![图片说明](https://img-ask.csdn.net/upload/201611/01/1478003685_740810.png)图片说明](https://img-ask.csdn.net/upload/201611/01/1478003660_852035.png)\n"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I updated my code, as per the comment from @AniSkywalker to the following code, using the UnmarshalText:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n)\n\ntype Priority int\n\nconst (\n    VERYLOW = Priority(iota)\n    LOW\n    MEDIUM\n    HIGH\n    VERYHIGH\n)\n\nconst (\n    verylow  = \"verylow\"\n    low      = \"low\"\n    medium   = \"medium\"\n    high     = \"high\"\n    veryhigh = \"veryhigh\"\n\n    // ANSI color constants.\n    RESET      = \"\\x1b[0m\"\n    BRIGHT     = \"\\x1b[1m\"\n    DIM        = \"\\x1b[2m\"\n    UNDERSCORE = \"\\x1b[4m\"\n    BLINK      = \"\\x1b[5m\"\n    REVERSE    = \"\\x1b[7m\"\n    HIDDEN     = \"\\x1b[8m\"\n    FGBLACK    = \"\\x1b[30m\"\n    FGRED      = \"\\x1b[31m\"\n    FGGREEN    = \"\\x1b[32m\"\n    FGYELLOW   = \"\\x1b[33m\"\n    FGBLUE     = \"\\x1b[34m\"\n    FGMAGENTA  = \"\\x1b[35m\"\n    FGCYAN     = \"\\x1b[36m\"\n    FGWHITE    = \"\\x1b[37m\"\n    BGBLACK    = \"\\x1b[40m\"\n    BGRED      = \"\\x1b[41m\"\n    BGGREEN    = \"\\x1b[42m\"\n    BGYELLOW   = \"\\x1b[43m\"\n    BGBLUE     = \"\\x1b[44m\"\n    BGMAGENTA  = \"\\x1b[45m\"\n    BGCYAN     = \"\\x1b[46m\"\n    BGWHITE    = \"\\x1b[47m\"\n\n    TITLE_COLOUR = BRIGHT + FGGREEN\n    NUMBER_COLOR = FGGREEN\n\n    //color constants\n    BLACK         = \"BLACK\"\n    RED           = \"RED\"\n    GREEN         = \"GREEN\"\n    YELLOW        = \"YELLOW\"\n    BLUE          = \"BLUE\"\n    MAGENTA       = \"MAGENTA\"\n    CYAN          = \"CYAN\"\n    WHITE         = \"WHITE\"\n    BRIGHTBLACK   = \"BRIGHTBLACK\"\n    BRIGHTRED     = \"BRIGHTRED\"\n    BRIGHTGREEN   = \"BRIGHTGREEN\"\n    BRIGHTYELLOW  = \"BRIGHTYELLOW\"\n    BRIGHTBLUE    = \"BRIGHTBLUE\"\n    BRIGHTMAGENTA = \"BRIGHTMAGENTA\"\n    BRIGHTCYAN    = \"BRIGHTCYAN\"\n    BRIGHTWHITE   = \"BRIGHTWHITE\"\n    NOCOLOR       = \"\"\n)\n\ntype Config struct {\n    Name     string\n    FGColors map[Priority]string\n}\n\ntype MarshalableConfig struct {\n    Name     string\n    FGColors map[string]string\n}\n\nvar priorityMapFromString = map[string]Priority{\n    veryhigh: VERYHIGH,\n    high:     HIGH,\n    medium:   MEDIUM,\n    low:      LOW,\n    verylow:  VERYLOW,\n}\n\nvar priorityToString = map[Priority]string{\n    VERYHIGH: veryhigh,\n    HIGH:     high,\n    MEDIUM:   medium,\n    VERYLOW:  verylow,\n    LOW:      low,\n}\n\nfunc (p Priority) String() string {\n    return priorityToString[p]\n}\n\nfunc PriorityFromString(priority string) Priority {\n    if p, ok := priorityMapFromString[priority]; ok {\n        return p\n    }\n    return MEDIUM\n}\n\nfunc (priority *Priority) UnmarshalText(data []byte) error {\n    *priority = PriorityFromString(string(data))\n    return nil\n}\n\nfunc main() {\n    fgColors := map[string]string{\n        verylow:  RED,\n        low:      BLUE,\n        medium:   GREEN,\n        high:     BRIGHTBLUE,\n        veryhigh: BRIGHTMAGENTA,\n    }\n\n    m := MarshalableConfig{\"Alice\", fgColors}\n    b, err := json.Marshal(m)\n    if err != nil {\n        panic(err)\n    }\n\n    emptyConfig := Config{}\n    err = json.Unmarshal(b, &amp;amp;emptyConfig)\n    if err != nil {\n        fmt.Printf(\"Got a error from unmarshalling: %+v \n\", err)\n        panic(err)\n    }\n    fmt.Printf(\"%+v \n\", emptyConfig)\n    var x interface{} = emptyConfig.FGColors[VERYHIGH]\n    fmt.Println(x.(string))\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["试图解组地图[优先级]字符串", ["\n\n", "I have been playing around with the Golang json package, and been running into a issue, i am simply trying to unmarshal a ", "map[string]string", " into ", "map[Priority]string", " the easiest way, but it seems like my UnmarshalJSON isn't even running, the following is my code, i would've like to made a playground where it could run, but i am using the OS package so:", "\n\n", "import (\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n)\n\ntype Priority int\n\nconst (\n    VERYLOW = Priority(iota)\n    LOW\n    MEDIUM\n    HIGH\n    VERYHIGH\n)\n\nconst (\n    verylow  = \"verylow\"\n    low      = \"low\"\n    medium   = \"medium\"\n    high     = \"high\"\n    veryhigh = \"veryhigh\"\n\n    // ANSI color constants.\n    RESET      = \"\\x1b[0m\"\n    BRIGHT     = \"\\x1b[1m\"\n    DIM        = \"\\x1b[2m\"\n    UNDERSCORE = \"\\x1b[4m\"\n    BLINK      = \"\\x1b[5m\"\n    REVERSE    = \"\\x1b[7m\"\n    HIDDEN     = \"\\x1b[8m\"\n    FGBLACK    = \"\\x1b[30m\"\n    FGRED      = \"\\x1b[31m\"\n    FGGREEN    = \"\\x1b[32m\"\n    FGYELLOW   = \"\\x1b[33m\"\n    FGBLUE     = \"\\x1b[34m\"\n    FGMAGENTA  = \"\\x1b[35m\"\n    FGCYAN     = \"\\x1b[36m\"\n    FGWHITE    = \"\\x1b[37m\"\n    BGBLACK    = \"\\x1b[40m\"\n    BGRED      = \"\\x1b[41m\"\n    BGGREEN    = \"\\x1b[42m\"\n    BGYELLOW   = \"\\x1b[43m\"\n    BGBLUE     = \"\\x1b[44m\"\n    BGMAGENTA  = \"\\x1b[45m\"\n    BGCYAN     = \"\\x1b[46m\"\n    BGWHITE    = \"\\x1b[47m\"\n\n    TITLE_COLOUR = BRIGHT + FGGREEN\n    NUMBER_COLOR = FGGREEN\n\n    //color constants\n    BLACK         = \"BLACK\"\n    RED           = \"RED\"\n    GREEN         = \"GREEN\"\n    YELLOW        = \"YELLOW\"\n    BLUE          = \"BLUE\"\n    MAGENTA       = \"MAGENTA\"\n    CYAN          = \"CYAN\"\n    WHITE         = \"WHITE\"\n    BRIGHTBLACK   = \"BRIGHTBLACK\"\n    BRIGHTRED     = \"BRIGHTRED\"\n    BRIGHTGREEN   = \"BRIGHTGREEN\"\n    BRIGHTYELLOW  = \"BRIGHTYELLOW\"\n    BRIGHTBLUE    = \"BRIGHTBLUE\"\n    BRIGHTMAGENTA = \"BRIGHTMAGENTA\"\n    BRIGHTCYAN    = \"BRIGHTCYAN\"\n    BRIGHTWHITE   = \"BRIGHTWHITE\"\n    NOCOLOR       = \"\"\n)\n\ntype Config struct {\n    Name     string\n    FGColors map[Priority]string\n}\n\ntype MarshalableConfig struct {\n    Name     string\n    FGColors map[string]string\n}\n\nvar priorityMapFromString = map[string]Priority{\n    veryhigh: VERYHIGH,\n    high:     HIGH,\n    medium:   MEDIUM,\n    low:      LOW,\n    verylow:  VERYLOW,\n}\n\nvar priorityToString = map[Priority]string{\n    VERYHIGH: veryhigh,\n    HIGH:     high,\n    MEDIUM:   medium,\n    VERYLOW:  verylow,\n    LOW:      low,\n}\n\nfunc (p Priority) String() string {\n    return priorityToString[p]\n}\n\nfunc PriorityFromString(priority string) Priority {\n    if p, ok := priorityMapFromString[priority]; ok {\n        return p\n    }\n    return MEDIUM\n}\n\nfunc (priority *Priority) UnmarshalJSON(data []byte) error {\n    var s string\n    if err := json.Unmarshal(data, &s); err != nil {\n        return err\n    }\n    *priority = PriorityFromString(s)\n    return nil\n}\n\nfunc main() {\n    fgColors := map[string]string{\n        verylow:  RED,\n        low:      BLUE,\n        medium:   GREEN,\n        high:     BRIGHTBLUE,\n        veryhigh: BRIGHTMAGENTA,\n    }\n\n    m := MarshalableConfig{\"Alice\", fgColors}\n    b, err := json.Marshal(m)\n    if err != nil {\n        panic(err)\n    }\n    file, err := os.Create(\"testfile.json\")\n    if err != nil {\n        panic(err)\n    }\n    file.Write(b)\n\n    emptyConfig := Config{}\n    err = json.Unmarshal(b, &emptyConfig)\n    if err != nil {\n        fmt.Printf(\"Got a error from unmarshalling: %+v \n\", err)\n        panic(err)\n    }\n    fmt.Printf(\"%+v \n\", emptyConfig)\n    var x interface{} = emptyConfig.FGColors[VERYHIGH]\n    fmt.Println(x.(string))\n\n}\n", "\n\n", "I get the error:", "\n\n", "json: cannot unmarshal number high into Go value of type main.Priority  \n", "\n\n", "So the impression i get is that it never calls my UnmarshalJSON method on the priority, and i don't know if thats the way its suppose to work anyway now that i have nested the Priority type inside of the map. ", "\n\n", "So i thouth maybe i have to do a alias type for the whole map like:", "\n\n", "type FGColor map[Priority]string \n", "\n\n", "and implement unmarshal on that instead, but that doesn't seem logical, because nested structs would be a nightmare to unmarshal  i would think. ", "\n\n", "What am i doing wrong??", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Process's scheduling priority is a OS and platform dependent setting, so you might be want to look at the &lt;code&gt;syscall&lt;/code&gt; package:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func Setpriority(which int, who int, prio int) (err error)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works on Linux.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["如何在Golang中以编程方式将流程（应用）优先级从“正常”更改为“低”", ["\n\n", "How to change Process Priority Class Programmatically in Golang?", "\nI have CPU intensive task and I want system and user programs have higher priority so my Golang application run only when the system is idle, or better using free CPU cores. ", "\n\n", "Like this  ", "\n\n", "System.Diagnostics.Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.Idle;\n", "\n\n", "https://stackoverflow.com/questions/10391449/set-process-priority-of-an-application", "\nBut in Golang.", "\nThanks in Advance", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The inner query orders by product and orderid and calculates a running total resetting on product change.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/*\ndrop table orders;\n\ncreate table orders (orderid varchar(6),productid varchar(10),reqqty int);\n\ncreate table stock (productid varchar(6), stock int);\n\ntruncate table orders;\ninsert into orders values\n('OR250','A45',100),('OR250','A55',200),('OR250','A65',400),\n('OR260','A45',150),('OR260','A55',25),\n('OR270','A55',100),('OR270','A65',50),('OR270','B15',500)\n;\n\nTRUNCATE TABLE STOCK;\nINSERT INTO STOCK VALUES\n('A45',200),('A55',250),('A65',180),('A75',300),('A85',400),('A95',780),('B15',150),('B25',225);\n*/\n\nSELECT  T.ORDERID,T.PRODUCTID,T.REQQTY,T.SHORTAGE,T.STOCKREMAINING AS STOCK\nFROM\n(\nSELECT  @RN:=IF (O.PRODUCTID  &amp;lt;&amp;gt; @PRV,1,@RN+1) RN,\n            O.ORDERID,O.PRODUCTID,O.REQQTY\n            ,S.PRODUCTID AS SPRODUCTID,S.STOCK\n            ,@PRV:=O.PRODUCTID PREVPROD\n            ,@RT:=IF(@RT=0 OR @RN = 1,S.STOCK-O.REQQTY,@RT - O.REQQTY)  RT\n            ,CASE WHEN @RT &amp;lt; 0 THEN @RT * -1 ELSE 0 END AS SHORTAGE\n            ,CASE WHEN @RT &amp;gt;= 0 THEN @RT ELSE 0 END AS STOCKREMAINING\nFROM    (SELECT @RN:=0) RN,(SELECT @PRV:='') PRV,(SELECT @RT:=0) RT,ORDERS O\nJOIN  STOCK  S ON S.PRODUCTID = O.PRODUCTID\n) T\nORDER   BY  T.ORDERID,T.PRODUCTID\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["自引用sql查询中基于优先级的订单不足", ["\n\n", "I am a basic developer not having advanced skills. \nI have an order processing system in php/mysql and want to calculate the shortages based on priority in SQL. Presently I use php arrays for this but i want to achieve this in database itself.", "\n\n", "Here is the queries i have", "\n\n", "\n\n", "And this is what i want to achieve", "\n\n", "\n\n", "Thanks.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;As you can see in the &lt;a href=\"http://php.net/manual/en/language.operators.precedence.php\" rel=\"nofollow\"&gt;doc&lt;/a&gt; operators in PHP have different priorities. It means:&lt;code&gt;!&lt;/code&gt; applied to &lt;code&gt;$test&lt;/code&gt; first.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;According to the &lt;a href=\"http://php.net/manual/en/language.types.boolean.php\" rel=\"nofollow\"&gt;doc&lt;/a&gt;, empty string &lt;code&gt;''&lt;/code&gt; or &lt;code&gt;'0'&lt;/code&gt; will be converted to &lt;code&gt;false&lt;/code&gt;, otherwise &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It is not the same. When &lt;code&gt;$test&lt;/code&gt; equals to empty string &lt;code&gt;''&lt;/code&gt; or &lt;code&gt;'0'&lt;/code&gt; this two conditions have different behavior.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["逻辑布尔否定运算符优先级和关联", ["\n\n", "here's my first question(s) on StackOverflow, and as such I imagine it ", "has", " been asked here before, but everything I type into the search bar gives me different questions. (Or sometimes \"no\" results at all!)", "\n\n", "I am learning on w3Schools, but I saw this seemingly simple code snippet which stirred up a small parcel of questions:", "\n\n", "In essence the code says: ", "\n\n", "if(! test === FALSE)\n  display(\"test successful!\");\nelse\n  display(\"test failed...\")\n", "\n\n", "\"", "test", "\" in this particular case returns a string on success or a (Boolean) ", "FALSE", " upon failure.", "\n\n", "Here are the questions that stirred within me.", "\n\n", "\n", "\n", "As for the exclamation point (aka \"Logical NOT\" aka \"Negation Operator\") at the beginning of a conditional/if statement, is that: ", "\n\n", "A) Applied to the whole statement within the parentheses?, or", "\n\n", "B) Only associated to \"test\"?", "\n", "\n", "\n", "Note: The negation operator's associativity may not change the outcome in this instance, but its associativity would matter in a case like: (! FALSE || TRUE), yeah?", "\n\n", "\n", "\n", "I understand how the Negation Operator works on Booleans, but how does the Negation Operator behave when faced with a (PHP) string?", "\n\n", "A) Does the negation operator's behavior change if the string happens to be something tricky like \"true\" or \"0\"?", "\n", "\n", "Is ", "(! test === FALSE)", " the same as ", "(test !== FALSE)", "? Why didn't they just use \"!==\"?", "\n", "\n", "HERE", " is the actual code in question:", "\n\n", "if (!filter_var($email, FILTER_VALIDATE_EMAIL) === false) {\n  echo(\"$email is a valid email address\");\n} else {\n  echo(\"$email is not a valid email address\");\n}\n", "\n\n", "Further PHP question", ": Is there some sort of advantage to use ", "filter_var()", " over ", "filter_input()", " in this circumstance? Why did w3Schools use filter_var() and not filter_input()?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;有没有一种可能这道题是个多选&amp;#xff1f;&lt;br /&gt;选AC呀&amp;#xff0c;傻瓜!&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["C语言循环，符号优先级问题", ["当i=20的时候不是跳出循环了吗，为什么是死循环", "\n", "当i=20的时候不是跳出循环了吗，为什么是死循环", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;code class=\"language-javascript\"&gt;&amp;amp;&amp;amp;&lt;/code&gt;的优先级比&lt;code class=\"language-javascript\"&gt;||&lt;/code&gt;高&amp;#xff0c;所以&lt;code class=\"language-javascript\"&gt;t&amp;#61;&amp;#43;&amp;#43;x&amp;amp;&amp;amp;&amp;#43;&amp;#43;y||&amp;#43;&amp;#43;z;&lt;/code&gt;等价于&lt;code class=\"language-javascript\"&gt;t &amp;#61; (&amp;#43;&amp;#43;x &amp;amp;&amp;amp; &amp;#43;&amp;#43;y) || &amp;#43;&amp;#43;z;&lt;/code&gt;&lt;br /&gt;先计算表达式&lt;code class=\"language-javascript\"&gt;(&amp;#43;&amp;#43;x &amp;amp;&amp;amp; &amp;#43;&amp;#43;y)&lt;/code&gt;的值&amp;#xff0c;这个表达式先计算&amp;#43;&amp;#43;x&amp;#xff0c;得0&amp;#xff0c;即假&amp;#xff0c;根据&lt;code class=\"language-javascript\"&gt;&amp;amp;&amp;amp;&lt;/code&gt;短路计算忽略&lt;code class=\"language-javascript\"&gt;&amp;#43;&amp;#43;y&lt;/code&gt;&amp;#xff0c;y的值不变&amp;#xff0c;表达式的值为假&lt;br /&gt;&lt;code class=\"language-javascript\"&gt;||&lt;/code&gt;表达式的第一个操作数为假&amp;#xff0c;不会触发短路计算&amp;#xff0c;因此还要计算&lt;code class=\"language-javascript\"&gt;&amp;#43;&amp;#43;z&lt;/code&gt;&amp;#xff0c;得0&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["&&和||的运算优先级", ["\n", "为什么这里z是0啊，不应该++x为0后，直接断路了吗，这里y就跳过了，为什么z还要运算"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;An other way using &lt;a href=\"http://php.net/manual/en/function.pack.php\" rel=\"nofollow noreferrer\"&gt;pack&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$result = [];\n$status = ['open'=&amp;gt;1, 'pre-order'=&amp;gt;2, 'closed'=&amp;gt;3];\nforeach ($arr as $v) {\n    $key = $status[$v['status']] . pack(\"n\", $v['sort']);\n    $result[$key] = $v;\n}\nksort($result);\n$result = array_values($result);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or without after all:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$result = [];\n$status = ['open'=&amp;gt;1e5, 'pre-order'=&amp;gt;2e5, 'closed'=&amp;gt;3e5];\nforeach ($arr as &amp;amp;$v) {\n    $key = $status[$v['status']] + $v['sort'];\n    $result[$key] = $v;\n}\nksort($result);\n$result = array_values($result);\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["按优先级php中的键值排序数组", ["\n\n", "i have a array with results. now i want to show the results in a grid in a sorted way. therefor i need to alter this array.", "\n\n", "sort needs to be like this \"order\" - \"pre-order\" - \"closed\"\nbut then i also have a \"sort\" value so i want to first sort on the 3 open status types and then within these types on the sort value, example array:", "\n\n", "            $arr = [\n            0 => ['id'=>1, 'sort'=>2, 'status'=>'closed', 'name'=>'some name...'],\n            1 => ['id'=>2, 'sort'=>1, 'status'=>'closed', 'name'=>'some name...'],\n            2 => ['id'=>3, 'sort'=>3, 'status'=>'open', 'name'=>'some name...'],\n            3 => ['id'=>4, 'sort'=>5, 'status'=>'pre-order', 'name'=>'some name...'],\n            4 => ['id'=>5, 'sort'=>4, 'status'=>'closed', 'name'=>'some name...'],\n            5 => ['id'=>6, 'sort'=>6, 'status'=>'pre-order', 'name'=>'some name...'],\n            6 => ['id'=>7, 'sort'=>7, 'status'=>'pre-order', 'name'=>'some name...'],\n            7 => ['id'=>8, 'sort'=>9, 'status'=>'open', 'name'=>'some name...'],\n            8 => ['id'=>9, 'sort'=>8, 'status'=>'open', 'name'=>'some name...'],\n            9 => ['id'=>10, 'sort'=>10, 'status'=>'closed', 'name'=>'some name...'],\n            10 => ['id'=>11, 'sort'=>11, 'status'=>'closed', 'name'=>'some name...'],\n        ];\n", "\n\n", "i dit it by several loops adding the types to a new array checking the open status, but i can not make it work with the sort.", "\n    "]], "Tag": "程序设计"}
{"Answer": "C语言的运算是从左至右可以执行一步就执行一步来提高执行效率的，首先1+2*5-8+6看1+2可以执行但需要再向又发现下一个符合是*比+的优先级高就执行2*5，然后就是看1+10-8+6，1+10可以执行向右看是-号，+-的优先级一样所以先执行1+10，以此类推，哪怕后面有小括号，那也是从左至右，可以执行一步就执行一步，懂了就采纳![图片说明](http://forum.csdn.net/PointForum/ui/scripts/csdn/Plugin/001/face/3.gif)", "Konwledge_Point": "优先级", "Question": ["这道题(运算符优先级)什么意思？", ["\n", "底下哪个正确地指出下列运算式的运算子优先权？X = 1 + 2 * 5 - 8 + 6 / 7 * 4\nA. (1 + 2) * (5 - 8) + ( 6 / (7 * 4))\nB. 1 + (2 * 5) - 8 + ((6 / 7) * 4)\nC. (1 + 2) * (5 - ((8 + 6) / (7 * 4)))\nD. 1 + (2 * (5 - 8)) + ((6 / 7) * 4)\n答案：B\n看不懂，求解答。", "\n"]], "Tag": "程序设计"}
{"Answer": "优先级高的先执行，把不重要的优先级设置低一点，可以在出现抢占资源的时候让路给优先级别高一点的线程", "Konwledge_Point": "优先级", "Question": ["socket服务器设置多线程优先级的原因。", ["从视频教程看到的建议，但是不理解为什么如此。大家请看图，"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Fixed it by adding the following regex to exclude the word \"doc\" as the following :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;appsite2:\npath:     /{req}/{var}\ndefaults: {_controller: AppBundle:Default:index}\nrequirements:\n        var: '^((?!doc).)*$'\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["如何在Symfony3 routing.yml中更改优先级", ["\n\n", "I have the following generic routing on my symfony project as in (routing.yml):", "\n\n", "appsite2:\n    path:     /{req}/{var}\n    defaults: {_controller: AppBundle:Default:index}\n", "\n\n", "However, it overwrites the routing ", "api/doc", " as:", "\n\n", "NelmioApiDocBundle:\n    resource: \"@NelmioApiDocBundle/Resources/config/routing.yml\"\n    prefix:   /api/doc\n", "\n\n", "So how can I change the first routing and put exception for ", "{var}", ", something like: ", "if({req}/{var} != '/api/doc')", "?", "\n\n", "Note: I already tried to change the order of the 2 routes and it doesn't work.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The problem is that you're adding &lt;code&gt;SetLocale&lt;/code&gt; to your global middleware. The &lt;code&gt;global&lt;/code&gt; middleware does not &lt;code&gt;start a session&lt;/code&gt; and therefore you have no access to session based data - such as the user.&lt;/p&gt;\n\n&lt;p&gt;If you take a look at the &lt;code&gt;web&lt;/code&gt; middleware provided by laravel (cleaned up for brevity)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;protected $middlewareGroups = [\n    'web' =&amp;gt; [\n        EncryptCookies::class,\n        AddQueuedCookiesToResponse::class,\n        CreateFreshApiToken::class,\n        StartSession::class,\n        ShareErrorsFromSession::class,\n        VerifyCsrfToken::class,\n        SubstituteBindings::class\n    ]\n]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You'll see why the any middleware added to &lt;code&gt;web&lt;/code&gt; middleware will have access to the &lt;code&gt;auth&lt;/code&gt; class, because it injects &lt;code&gt;StartSession&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;If you want to access session-based-data, then you'll need to make sure &lt;code&gt;StartSession&lt;/code&gt; is booted.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; just add &lt;code&gt;StartSession&lt;/code&gt; to your global middleware or you're going to have a bad time. Instead, add it to your &lt;code&gt;auth&lt;/code&gt; middleware, and add the &lt;code&gt;SetLocale&lt;/code&gt; after &lt;code&gt;StartSession&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Note that if you're using &lt;code&gt;Web Middleware&lt;/code&gt; you must add &lt;code&gt;SetLocale&lt;/code&gt; to that &lt;code&gt;Middleware Group&lt;/code&gt; as well.&lt;/p&gt;\n\n&lt;p&gt;The priority is only a &lt;code&gt;nsort&lt;/code&gt; where it reorders the &lt;code&gt;middleware&lt;/code&gt; applied to a current request based on the existence of the middleware in the &lt;code&gt;middlewarePriority&lt;/code&gt; array.&lt;/p&gt;\n\n&lt;p&gt;Simplified: If the middleware is not in the middleware group for the route request, the middleware priority means nothing.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["中间件优先级不适用于Laravel 5.5", ["\n\n", "I'm stuck on something which I'm pretty sure is quite basic.. but somehow I can't get it to work.", "\n\n", "I created a middleware to set the locale of my website depending on the user's choice (his choice is registered in the database under 'locale' column). What I do is that I check is user is logged-in, if he is I use his locale, if not I default to English.", "\n\n", "For some reason, my middleware never \"sees\" the user as logged-in and always defaults to English. I've output the result of Auth::check() to a log and indeed this always returns false, even if the user is actually logged-in.", "\n\n", "I suppose this has to do with this Middleware being executed before the Auth one.. I've tried to change the priority in the Kernel file but that still doesn't work.. any idea?", "\n\n", "My middleware", "\n\n", "namespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass SetLocale {\n\n    public function handle($request, Closure $next) {\n\n      if(Auth::check()) {\n        $locale = Auth::user()->locale;\n      } else {\n        $locale = 'en';\n      }\n      \\App::setLocale($locale);\n      return $next($request);\n    }\n}\n", "\n\n", "My route ('auth' is the default auth middleware, 'checkProjectPermission:read' checks if the user logged in has permission to access this project)", "\n\n", "Route::prefix('client')->middleware(['auth','checkRoomPermission:read'])->group(function() {\n    Route::get('{project_id}/checklist', 'ProjectController@accessChecklist')->name('checklist');\n}\n", "\n\n", "My Kernel.php file :", "\n\n", "protected $middleware = [\n    \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,\n    \\Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::class,\n    \\App\\Http\\Middleware\\TrimStrings::class,\n    \\Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull::class,\n    \\App\\Http\\Middleware\\TrustProxies::class,\n    \\App\\Http\\Middleware\\SetLocale::class\n];\n\nprotected $middlewarePriority = [\n    \\Illuminate\\Session\\Middleware\\StartSession::class,\n    \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n    \\Illuminate\\Auth\\Middleware\\Authenticate::class,\n    \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n    \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n    \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n    \\Illuminate\\Auth\\Middleware\\Authorize::class,\n    \\App\\Http\\Middleware\\SetLocale::class\n];\n", "\n\n", "Thanks", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;If the source of the data comes from a mysql database, this custom sort can be easily retrieved with a simple sql query. &lt;/p&gt;\n\n&lt;p&gt;But if we must work with the arrays directly then this should work too: (Sorry for dirty coding and poor mobility.)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$all_arrays = array_merge( $arr1, $arr2, $arr3 ); // merge all arrays into one\n$items = $ascores = $scores = $occurs = $sorted_ids = array();\nforeach( $all_arrays as $elem ) {\n    if(isset($occurs[ $elem['id'] ])) { $occurs[ $elem['id'] ]++; } else { $occurs[ $elem['id'] ] = 1; }\n    if( ! isset($ascores[ $elem['id'] ]) || $elem['score'] &amp;gt; max( $ascores[ $elem['id'] ] ) ) { \n        $ascores[ $elem['id'] ][] = $elem['score']; \n        $scores[ $elem['id'] ] = $elem['score']; \n    }\n    $items[ $elem['id'] ] = array( 'id'=&amp;gt;$elem['id'], 'maxs'=&amp;gt;$scores[ $elem['id'] ], 'occs'=&amp;gt;$occurs[ $elem['id'] ] );\n}\n\narray_multisort( $occurs, SORT_DESC, $scores, SORT_DESC, $items);\n/// print_r( $items ); // $items holds unique sorted data. outputs: Array ( [0] =&amp;gt; Array ( [id] =&amp;gt; 22 [maxs] =&amp;gt; 674 [occs] =&amp;gt; 3 ) [1] =&amp;gt; Array ( [id] =&amp;gt; 34 [maxs] =&amp;gt; 440 [occs] =&amp;gt; 3 ) [2] =&amp;gt; Array ( [id] =&amp;gt; 32 [maxs] =&amp;gt; 213 [occs] =&amp;gt; 3 ) [3] =&amp;gt; Array ( [id] =&amp;gt; 99 [maxs] =&amp;gt; 586 [occs] =&amp;gt; 2 ) [4] =&amp;gt; Array ( [id] =&amp;gt; 16 [maxs] =&amp;gt; 777 [occs] =&amp;gt; 1 ) )\n\nforeach( $items as $item ) $sorted_ids[] = $item['id'];\n/// print_r( $sorted_ids ); // $sorted_ids holds your desired ids list. outputs: Array ( [0] =&amp;gt; 22 [1] =&amp;gt; 34 [2] =&amp;gt; 32 [3] =&amp;gt; 99 [4] =&amp;gt; 16 )\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["php排序具有多个优先级的多个数组", ["\n\n", "I have N number of arrays (eg. 3 arrays):", "\n\n", "$arr1 = array(0 => array('id' => 34, 'score' => 440),\n          1 => array('id' => 32, 'score' => 140),\n          2 => array('id' => 22, 'score' => 121),\n          3 => array('id' => 99, 'score' => 532)\n    );\n\n$arr2 = array(0 => array('id' => 32, 'score' => 213),\n          1 => array('id' => 34, 'score' => 354),\n          2 => array('id' => 22, 'score' => 674)\n    );\n\n$arr3 = array(0 => array('id' => 34, 'score' => 10),\n          1 => array('id' => 22, 'score' => 449),\n          2 => array('id' => 99, 'score' => 586),\n          3 => array('id' => 32, 'score' => 113),\n          4 => array('id' => 16, 'score' => 777)\n\n    );\n", "\n\n", "I want to sort these (N) arrays depending on (id) and (score) but i want to give the priority to the repetition id occurrence in all arrays and then the second priority to the max score, and the result will be (1) filtered unique array which holds unique ids according to these rules of sort.", "\n\n", "I tried to do this using php ", "usort", " function to pass comparison function but i failed to do the job.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;根据代码意思来看&amp;#xff0c;是先非后乘&lt;br /&gt;如果是你自己写的话&amp;#xff0c;加上括号&amp;#xff0c;这样保险点不会出错&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["！跟*的优先级怎么运算", ["\n", "key1", " = !Gpio_GetIO(", "3", ",", "3", ") * ", "1", ";\n    ", "key2", " = !Gpio_GetIO(", "3", ",", "2", ") * ", "2", ";\n    ", "key3", " = !Gpio_GetIO(", "2", ",", "6", ") * ", "4", ";\n    ", "key4", " = !Gpio_GetIO(", "2", ",", "5", ") * ", "8", ";\n    ", "key5", " = !Gpio_GetIO(", "2", ",", "4", ") * ", "16", ";\n    ", "key6", " = !Gpio_GetIO(", "2", ",", "3", ") * ", "1", ";\n    ", "key7", " = !Gpio_GetIO(", "1", ",", "4", ") * ", "1", ";\n"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;pre&gt;&lt;code&gt;package main\nvar PQ pqueue.PQueue\nvar firstNode pqueue.Node\nPQ.Push(firstNode)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The variable &lt;code&gt;firstNode&lt;/code&gt; is passed by value which means that there is an implicit assignment of the argument to the parameter in the function call &lt;code&gt;PQ.Push(firstNode)&lt;/code&gt;. The type &lt;code&gt;pqueue.Node&lt;/code&gt; contains private fields such as &lt;code&gt;row&lt;/code&gt; which are not exported from &lt;code&gt;package pqueue&lt;/code&gt; to &lt;code&gt;package main&lt;/code&gt;: \"implicit assignment of unexported field 'row' of pqueue.Node in function argument.\"&lt;/p&gt;\n\n&lt;p&gt;In &lt;code&gt;Node.go&lt;/code&gt;, add this function to &lt;code&gt;package pqueue&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func NewNode() *Node {\n    return &amp;amp;Node{}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In &lt;code&gt;PQueue.go&lt;/code&gt;, add this function to &lt;code&gt;package pqueue&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func NewPQueue() *PQueue {\n    return &amp;amp;PQueue{}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then. in &lt;code&gt;package main&lt;/code&gt;, you can write:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;PQ := pqueue.NewPQueue()\nfirstNode := pqueue.NewNode()\nPQ.Push(firstNode)\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["使用容器/堆实现优先级队列", ["\n\n", "In the big picture, I'm trying to implement Dijkstra's algorithm using a priority queue. ", "\n\n", "According to members of golang-nuts, the idiomatic way to do this in Go is to use the heap interface with a custom underlying data structure. So I have created Node.go and PQueue.go like so:", "\n\n", "//Node.go\npackage pqueue\n\ntype Node struct {\n    row    int\n    col    int\n    myVal  int\n    sumVal int\n}\n\nfunc (n *Node) Init(r, c, mv, sv int) {\n    n.row = r\n    n.col = c\n    n.myVal = mv\n    n.sumVal = sv\n}\n\nfunc (n *Node) Equals(o *Node) bool {\n    return n.row == o.row && n.col == o.col\n}\n", "\n\n", "And PQueue.go: ", "\n\n", "// PQueue.go\npackage pqueue\n\nimport \"container/vector\"\nimport \"container/heap\"\n\ntype PQueue struct {\n    data vector.Vector\n    size int\n}\n\nfunc (pq *PQueue) Init() {\n    heap.Init(pq)\n}\n\nfunc (pq *PQueue) IsEmpty() bool {\n    return pq.size == 0\n}\n\nfunc (pq *PQueue) Push(i interface{}) {\n    heap.Push(pq, i)\n    pq.size++\n}\n\nfunc (pq *PQueue) Pop() interface{} {\n    pq.size--\n    return heap.Pop(pq)\n}\n\nfunc (pq *PQueue) Len() int {\n    return pq.size\n}\n\nfunc (pq *PQueue) Less(i, j int) bool {\n    I := pq.data.At(i).(Node)\n    J := pq.data.At(j).(Node)\n    return (I.sumVal + I.myVal) < (J.sumVal + J.myVal)\n}\n\nfunc (pq *PQueue) Swap(i, j int) {\n    temp := pq.data.At(i).(Node)\n    pq.data.Set(i, pq.data.At(j).(Node))\n    pq.data.Set(j, temp)\n}\n", "\n\n", "And main.go: (the action is in SolveMatrix)", "\n\n", "// Euler 81\n\npackage main\n\nimport \"fmt\"\nimport \"io/ioutil\"\nimport \"strings\"\nimport \"strconv\"\nimport \"./pqueue\"\n\nconst MATSIZE = 5\nconst MATNAME = \"matrix_small.txt\"\n\nfunc main() {\n    var matrix [MATSIZE][MATSIZE]int\n    contents, err := ioutil.ReadFile(MATNAME)\n    if err != nil {\n        panic(\"FILE IO ERROR!\")\n    }\n    inFileStr := string(contents)\n    byrows := strings.Split(inFileStr, \"\n\", -1)\n\n    for row := 0; row < MATSIZE; row++ {\n        byrows[row] = (byrows[row])[0 : len(byrows[row])-1]\n        bycols := strings.Split(byrows[row], \",\", -1)\n        for col := 0; col < MATSIZE; col++ {\n            matrix[row][col], _ = strconv.Atoi(bycols[col])\n        }\n    }\n\n    PrintMatrix(matrix)\n    sum, len := SolveMatrix(matrix)\n    fmt.Printf(\"len: %d, sum: %d\n\", len, sum)\n}\n\nfunc PrintMatrix(mat [MATSIZE][MATSIZE]int) {\n    for r := 0; r < MATSIZE; r++ {\n        for c := 0; c < MATSIZE; c++ {\n            fmt.Printf(\"%d \", mat[r][c])\n        }\n        fmt.Print(\"\n\")\n    }\n}\n\nfunc SolveMatrix(mat [MATSIZE][MATSIZE]int) (int, int) {\n    var PQ pqueue.PQueue\n    var firstNode pqueue.Node\n    var endNode pqueue.Node\n    msm1 := MATSIZE - 1\n\n    firstNode.Init(0, 0, mat[0][0], 0)\n    endNode.Init(msm1, msm1, mat[msm1][msm1], 0)\n\n    if PQ.IsEmpty() { // make compiler stfu about unused variable\n        fmt.Print(\"empty\")\n    }\n\n    PQ.Push(firstNode) // problem\n\n\n    return 0, 0\n}\n", "\n\n", "The problem is, upon compiling i get the error message:", "\n\n", "[~/Code/Euler/81] $ make\n6g -o pqueue.6 Node.go PQueue.go\n6g main.go\nmain.go:58: implicit assignment of unexported field 'row' of pqueue.Node in function argument\nmake: *** [all] Error 1\n", "\n\n", "And commenting out the line PQ.Push(firstNode) does satisfy the compiler. But I don't understand why I'm getting the error message in the first place. Push doesn't modify the argument in any way. ", "\n\n", "\n", "UPDATE:\nFor the sake of those who come across this in searches in the future, the code above is chock full of gross misconceptions. Take a look below for a much more useful template to work off of:\nNode.go:", "\n\n", "// Node.go\npackage pqueue\n\nimport \"fmt\"\n\ntype Node struct {\n    row    int\n    col    int\n    myVal  int\n    sumVal int\n    parent *Node\n}\n\nfunc NewNode(r, c, mv, sv int, n *Node) *Node {\n    return &Node{r, c, mv, sv, n}\n}\n\nfunc (n *Node) Eq(o *Node) bool {\n    return n.row == o.row && n.col == o.col\n}\n\nfunc (n *Node) String() string {\n    return fmt.Sprintf(\"{%d, %d, %d, %d}\", n.row, n.col, n.myVal, n.sumVal)\n}\n\nfunc (n *Node) Row() int {\n    return n.row\n}\n\nfunc (n *Node) Col() int {\n    return n.col\n}\n\nfunc (n *Node) SetParent(p *Node) {\n    n.parent = p\n}\n\nfunc (n *Node) Parent() *Node {\n    return n.parent\n}\n\nfunc (n *Node) MyVal() int {\n    return n.myVal\n}\n\nfunc (n *Node) SumVal() int {\n    return n.sumVal\n}\n\nfunc (n *Node) SetSumVal(sv int) {\n    n.sumVal = sv\n}\n", "\n\n", "PQueue.go:", "\n\n", "// PQueue.go\npackage pqueue\n\ntype PQueue []*Node\n\nfunc (pq *PQueue) IsEmpty() bool {\n    return len(*pq) == 0\n}\n\nfunc (pq *PQueue) Push(i interface{}) {\n    a := *pq\n    n := len(a)\n    a = a[0 : n+1]\n    r := i.(*Node)\n    a[n] = r\n    *pq = a\n}\n\nfunc (pq *PQueue) Pop() interface{} {\n    a := *pq\n    *pq = a[0 : len(a)-1]\n    r := a[len(a)-1]\n    return r\n}\n\nfunc (pq *PQueue) Len() int {\n    return len(*pq)\n}\n\n// post: true iff is i less than j\nfunc (pq *PQueue) Less(i, j int) bool {\n    I := (*pq)[i]\n    J := (*pq)[j]\n    return (I.sumVal + I.myVal) < (J.sumVal + J.myVal)\n}\n\nfunc (pq *PQueue) Swap(i, j int) {\n    (*pq)[i], (*pq)[j] = (*pq)[j], (*pq)[i]\n}\n\nfunc (pq *PQueue) String() string {\n    var build string = \"{\"\n    for _, v := range *pq {\n        build += v.String()\n    }\n    build += \"}\"\n    return build\n}\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;先进行求余运算&amp;#xff0c;再进行自加。&lt;/p&gt;\n\n&lt;p&gt;答案选D&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["java优先级运算之++与%", ["int i=1;", "\nwhile(i<10)", "\n  if(i++%2==0)", "\n      System.out.print(i);", "\n", "\nA.22222~      B.246810      C.2468     D.3579", "\n\n", "i++%2==0，请这是不是先自加再进行求余运算？"]], "Tag": "程序设计"}
{"Answer": "你这个问题里的优先队列应该就是堆，priority queue 默认是用vector进行实现的。在pop最大值或最小值时，根节点的内存并未被删除，而是把值穿了出来，然后将叶子节点的数据复制到根节点，再进行堆的调整。总而言之，pop出来的只是值，而优先队列里的队头并没有被删除，只是被其他值替换了", "Konwledge_Point": "优先级", "Question": ["c++优先级队列问题...", ["priority_queue 队头的元素只能被查看或者修改，不能被删除。", "\n\n", "为什么网上有这么一句话，队头不能被删除？我百思不得其解，明明可以pop啊"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The problem is that you can't set a percentage of bandwidth limit because you don't know the actual bandwidth of the user, unless you make a download test and estimate the bandwidth of the user !&lt;/p&gt;\n\n&lt;p&gt;You might also try this :\nI had a similar issue with Uploading/Downloading from/to my flex app which was causing every RPC or any kind of external loading to be very slow.. the reason : there were too many concurrent request (one permanent, the up/download, which was taking a browser \"slot\" request, and other variables : the rpc and external loadings).&lt;/p&gt;\n\n&lt;p&gt;Therefore, you might consider downloading/uploading from/to a different url : &lt;/p&gt;\n\n&lt;p&gt;Your app : www.domain.com/myapp&lt;/p&gt;\n\n&lt;p&gt;Your upload url : upload.domain.com&lt;/p&gt;\n\n&lt;p&gt;That tricked the browser into thinking it was two different websites and therefore unclogged the pipe to allow other remote connections to the website when navigating in my app.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["如何设置您传输的数据的优先级？  （所以不要阻止其他http连接）（在PHP < - > Flash对中）", ["\n\n", "I have PHP script which takes some file (FLV for example) and returns it to Flash player (just opens and reads to end), and I have flash(mxml+as3) app that calls that php script in order to recive a file. Ho to make priorety of that connection so that if user goes to some other web page or dowhloads some file my pair (PHP <-> Flash) will not take over all his http trafik, but share it if it will be needed?", "\n\n", "or  is bandwath speed limeting on php script side only option?", "\n\n", "fell free to edit, sory for my en...", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Your code is evaluating like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;while (!($apns = ($this-&amp;gt;getApns($streamContext) &amp;amp;&amp;amp; ($z &amp;lt; 11))))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which is why you see the infinite loop (as soon as &lt;code&gt;$z &amp;gt;= 11&lt;/code&gt;, &lt;code&gt;$apns&lt;/code&gt; is false, so the condition is always true). The reason for this precedence is that the special rules only apply to &lt;code&gt;!&lt;/code&gt; on the &lt;em&gt;left&lt;/em&gt; of the assignment being valid (having lower precedence than &lt;code&gt;=&lt;/code&gt;). It has no effect on the boolean operator on the right, which behaves as it would in any sane language.&lt;/p&gt;\n\n&lt;p&gt;Your style is bad. Try this, which is much more readable and only differs in the final value of &lt;code&gt;$z&lt;/code&gt; (and if that's important you can tweak the &lt;code&gt;break&lt;/code&gt; statement.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for( $z = 1; $z &amp;lt; 11; ++ $z ) {\n    // note extra brackets to make it clear that we intend to do assignment not comparison\n    if( ($apns = $this-&amp;gt;getApns($streamContext)) ) {\n        break;\n    }\n    myerror_log(\"unable to conncect to apple. sleep for 2 seconds and try again\");\n    sleep(2);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["理解php中的运算符优先级", ["\n\n", "I have the following code in production that appears to be causing an infinite loop.", "\n\n", " $z=1;\n while (!$apns = $this->getApns($streamContext) && $z < 11)\n {\n    myerror_log(\"unable to conncect to apple. sleep for 2 seconds and try again\");\n    $z++;\n    sleep(2);\n }\n", "\n\n", "How are the precedence rules getting applied that cause this behavior?", "\n\n", "http://php.net/manual/en/language.operators.precedence.php", "\n\n", "I see this note in the docs:", "\n\n", "\n  ", "Although = has a lower precedence than most other operators, PHP will\n  still allow expressions similar to the following: if (!$a = foo()), in\n  which case the return value of foo() is put into $a.", "\n", "\n\n", "Which makes me think the the = should be evaluated first.  then the ! then the &&, which would not cause an infinite loop.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Replace &lt;code&gt;JOIN&lt;/code&gt;with &lt;code&gt;LEFT JOIN&lt;/code&gt;. The former only selects rows from the tables where a match is found, whereas the latter selects all rows from the first table, even when there is no match in the other table.&lt;/p&gt;\n\n&lt;p&gt;Then you can add a second field to &lt;code&gt;ORDER BY&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT * FROM ir1_police\nLEFT JOIN ir1_police_flags ON ir1_police_flags.uid = ir1_police.uid\nWHERE ir1_police.status=0 AND ir1_police.parent_id=0 \nORDER BY\n    ir1_police_flags.flag ASC,\n    ir1_police.time DESC\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice the &lt;code&gt;LEFT JOIN&lt;/code&gt; produces results where all &lt;code&gt;ir1_police_flags&lt;/code&gt;'s fields are &lt;code&gt;NULL&lt;/code&gt; where there is no match in this table. This is perfect in your case, because &lt;code&gt;NULL&lt;/code&gt; is considered smaller than any value, as far as &lt;code&gt;ORDER BY&lt;/code&gt; is concerned.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Your application might justify this structure, but you should ask yourself whether this flag shouldn't be just a column in the table &lt;code&gt;ir1_police&lt;/code&gt; altogether.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["选择两个表并放置订购优先级", ["\n\n", "I have two tables, \n", "ir1_police", " is included messages that reported to admin.\n", "ir1_police_flag", ", admin can flag reporters from 1 to 2. (1 means medium 2 means low and nothing means high priority).", "\n\n", "If someone try to report something that is not real. Admin will flag it as 1 or 2 .\nSo I would make a list of report that shows first high priority, second medium and at last low.", "\n\n", "I use the mysql statement but there is a problem. if there was nothing ", "ir1_police_report", " nothing will be shown. or if exist only shows they are on ", "ir_police_flags", ".", "\n\n", "I have no idea to select them if no record exists on ", "ir1_police_flags", "\n\n", "SELECT * FROM ir1_police \nJOIN ir1_police_flags on ir1_police_flags.uid = `ir1_police.uid \nWHERE \nir1_police.status=0 AND ir1_police.parent_id=0 \nORDER BY ir1_police.time DESC\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Fragments, the things after &lt;code&gt;#&lt;/code&gt;, &lt;strong&gt;are not sent to the server.&lt;/strong&gt; They're purely local in the browser, and only evaluated by the browser. A rule matching on &lt;code&gt;#&lt;/code&gt; can never match, because the server will never get to see a URL fragment.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["在.htaccess优先级冲突中重写", ["\n\n", "Here are the rewriterules for .htaccess. But I am facing a problem.\nHere is my .htaccess file.", "\n\n", "RewriteEngine On\nRewriteBase /dashboard/sample_proj/\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule t([\\d]+)/ threads/$1/  [R=301]\nRewriteRule f([\\d]+)/ forums/$1/  [R=301,L]\nRewriteRule t([\\d]+)-([\\d]+)/ threads/$1/page-$2 [R=301,L]\nRewriteRule t([\\d]+)/#post([\\d]+) threads/$1/#post-$2 [R=301,L]\n", "\n\n", "But this is a problem because there is a priority conflict between the urls.\nFor Example \n    ", "https://www.url.com/t3550/#post44859", "\nredirects to ", "https://www.url.com/threads/3550/#post44859", " but should instead should redirect to ", "https://www.url.com/threads/3550/#post-44859", " (this is because there is a conflict between the first and the fourth rule).", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;My first thought is to use Beanstalkd priorities, and split the messages into groups, each with a different priority.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;User 1 wants to send 10,000 msgs. &lt;/li&gt;\n&lt;li&gt;&lt;p&gt;User 2 wants to send    101 msgs.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;messages 1-100 of user 1 are put into the queue at priority 1&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;messages 101-200 of user 1 are put into the queue at priority 2&lt;/li&gt;\n&lt;li&gt;messages 201-300 of user 1 are put into the queue at priority 3&lt;/li&gt;\n&lt;li&gt;messages 301-400 of user 1 are put into the queue at priority 4 (etc)&lt;/li&gt;\n&lt;li&gt;messages 1-100 of user 2 are put into the queue at priority 1&lt;/li&gt;\n&lt;li&gt;message  101 of user 2 are put into the queue at priority 2 (etc)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The first 100 messages of each are sent first (which ones really leaves the gate depends on when they were put into the queue). Without a delay (eg, send after 90 seconds) involved, messages/jobs closest to priority 0 get sent first.&lt;/p&gt;\n\n&lt;p&gt;To make sure that some of every user are sent on every round, I'd limit the max priority that you set to the number of customers that you have, so you don't have your biggest customer end up with a priority of 1,000,000 or more, which would that all the rest of their messages had to wait until everyone else had completed. Just restart the priority back at one.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["我应该如何按用户和优先级按比例读取多个队列？", ["\n\n", "I am currently trying to think of ways to replace a MySQL + Cron queuing system with a message queue system (AWS SQS/Beanstalkd/Iron MQ/Redis).", "\n\n", "Let's say I have 100 users. These users are able to make API requests to me. Each API request is an SMS which I must send via a single modem which I operate.", "\n\n", "Each SMS can have a priority of 1-3.", "\n\n", "The problem that I am facing, is that the single modem is a bottleneck, so I can't simply process the queue in a FIFO order, because if one user sends 10,000 SMS and I add these to the queue, my other users would not see any SMS go out until these 10,000 for the first user have finished.", "\n\n", "Right now, I am using MySQL for the task:", "\n\n", "SELECT COUNT(*) AS `count`, `user_id` FROM `queue` GROUP BY `user_id`\n", "\n\n", "This would give me a result like this:", "\n\n", "count  | user_id\n-------|--------\n10000  | 1\n1      | 2\n", "\n\n", "I then add the counts together which gives me ", "10,001", " SMS to process.", "\n\n", "I do a sum on each row:", "\n\n", "(row_count / total_count) * 100 = percentage\n", "\n\n", "E.g.:", "\n\n", "(10000 / 10001) * 100 = 99.9900009999%\n(1 / 10001) * 100 = 0.0099990001%\n", "\n\n", "I know that my modem can handle 140 SMS per second, so if my Cron runs on a 1 minute cycle, I will send 8,400 SMS in a minute.", "\n\n", "I use these calculations to give me my selections:", "\n\n", "ceil( (8400 / 100) * 99.9900009999) ) = 8,400 for user #1\nceil( (8400 / 100) * 0.0099990001) ) = 1 for user #2\n", "\n\n", "So in this case, I do a simple MySQL select for each user with a LIMIT, ordering by priority ASC, to give me any priority 1s first, and any priority 3s last.", "\n\n", "It doesn't matter if we push more than 8,400 to the modem because it will simply queue on the modem, although the modem doesn't guarantee FIFO, so we need to be as tight on the 8,400 per minute as possible. In this case we push 8,401 to the modem.", "\n\n", "This is much better, because rather than sending all 10,000 for user 1 first, we only do 8,400 and also get some of user 2's SMS out even though they only have 1 SMS. It's still weighted on who has the most SMS to process and it keeps inline with the modem throughput too.", "\n\n", "Given the fact that I need priorities, I am currently looking at Beanstalkd as my only option.", "\n\n", "I figured I could create a queue for each user, and when API requests come in, add the SMS to the user queue along with the priority.", "\n\n", "I would then have one worker, which does a count on each queue (some user queues may be empty so I wouldn't want a worker for each user constantly running).", "\n\n", "Once the single worker has the queue count for each user, it will start to read each queue up to the maximum number I specify for each user and push to the modem in order.", "\n\n", "So in this case, it will read 8,400 SMS for user #1 and 1 SMS for user #2 in that order.", "\n\n", "To get SMS to the modem, I have to use HTTP. If I get a 200 OK, I can delete the job. If I get a Error 500, I will not delete the job so it will be picked up again. For anything else, I will throw an exception and bury the job in Beanstalkd for inspection by a human.", "\n\n", "My concerns here is that because I am using HTTP, this is a bottleneck in itself. Ideally I will want to perform 8,400 HTTP requests in 1 minute using cURL (140/sec). I am aware that I can use ", "curl_multi_*", " functions to perform say 10 HTTP requests concurrently to speed this up but I am looking to see if there could be any other options to speed things up further?", "\n\n", "The main issue is that this is blocking. So one user's SMS will go before all of the other users SMS. Here we will process 8,400 SMS for user #1, followed by 1 SMS for user #2.", "\n\n", "For example, should I think about spawning a worker for each user once I have their total count of messages to process? If I did this, we would process SMS for user #1 and user #2 concurrently. With this option though, I do worry that I cannot control the overall amount of HTTP requests going to the modem, because I do not want to overload it. What happens if I have 100 child workers all doing 10 HTTP requests concurrently to the modem?", "\n\n", "These workers would have to be child processes that close once finished. The parent process would need to know about this to then perform another calculation and spawn new child workers.", "\n\n", "If anyone has any suggestions on how to handle this scenario of multiple queues with one queue the other end (the modem), that would be most helpful.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;code class=\"language-javascript\"&gt;*p&amp;#43;&amp;#43;&lt;/code&gt;是等价于&lt;code class=\"language-javascript\"&gt;*(p&amp;#43;&amp;#43;)&lt;/code&gt;&amp;#xff0c;但是后缀&amp;#43;&amp;#43;是返回p的原值&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["请问*与++的运算优先级是怎样的，查到的是同一优先级从右向左运算，那么为什么会出现下面的情况？", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "#include <stdio.h>", "\n", "int", " main()\n{\n    ", "int", " a[] = {", "1111", ", ", "2222", ", ", "3333", ", ", "4444", ", ", "5555", "};\n\n    ", "int", " *p = a;\n\n    ", "printf", "(", "\"*p1 = %d\\n\"", ", *p);\n    ", "printf", "(", "\"*p++ = %d\\n\"", ", *p++);\n    p--;\n    ", "printf", "(", "\"*p2 = %d\\n\"", ", *p);\n    ", "printf", "(", "\"*(p++) = %d\\n\"", ", *(p++));\n    ", "printf", "(", "\"*++p = %d\\n\"", ", *++p);\n    ", "printf", "(", "\"*(++p) = %d\\n\"", ", *(++p));\n    ", "printf", "(", "\"*p + 1 = %d\\n\"", ", *p+", "1", ");\n    ", "printf", "(", "\"*(p+1) = %d\\n\"", ", *(p+", "1", "));\n}\n\n\n", "\n", "结果：", "\n", "如果说像我标题所说，那么第一次 *p++不应该等价为 *（p++），结果不应该是2222吗？"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Does your C++ version generate the same amount of output?  &lt;/p&gt;\n\n&lt;p&gt;The last loop runs &lt;code&gt;lNumToDelete&lt;/code&gt; (100,000) times, and prints up to 64 values from the queue on each iteration.  That is a lot of output, and it takes time to format and write out, even if it is going to &lt;code&gt;/dev/null&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;p&gt;Commenting out the &lt;code&gt;fmt.Printf()&lt;/code&gt; calls inside the delete loop made the program run significantly faster for me.&lt;/p&gt;\n\n&lt;p&gt;A few other suggestions:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;fmt.Printf(\"a = %d\n\", b)&lt;/code&gt; can be replaced with &lt;code&gt;fmt.Println(\"a =\", b)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;lPq[:]&lt;/code&gt; can be replaced with &lt;code&gt;lPq&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Check out the Go profiling tools: &lt;a href=\"http://blog.golang.org/profiling-go-programs\" rel=\"nofollow\"&gt;http://blog.golang.org/profiling-go-programs&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["我的优先级队列测试程序是否很慢，因为我没有正确使用Go？", ["\n\n", "I wrote this crude min heap code that is a translation of a similar program I wrote in C++.  I think I must be using slices incorrectly because the go code is way slower than the C++ code.  Inserting and deleting 100,000 integers takes about 19 seconds in Go, but only 1.73 seconds in C++.  Can anyone offer some advice?  Or is Go that much slower than C++?  I time the code like this under Linux: \"time ./pqgo -n 100000 -d 100000 >/dev/null\". Here is the code:", "\n\n", "package main\n\nimport (\n       \"fmt\"\n       \"time\"\n       \"math/rand\"\n       \"flag\"\n)\n\nfunc insert( key int, lPq []int) []int {\n    lPq = append( lPq[:], key )\n    i := len(lPq) - 1\n\n    for ; i > 1 && lPq[ i/2 ] > lPq[i] ; {\n        lTemp := lPq[ i/2 ]\n        lPq[ i/2 ] =  lPq[i]\n        lPq[i] = lTemp\n        i = i / 2\n    }\n    return lPq\n}\n\nfunc delete_min( lPq []int) (int, []int) {\n  lRetVal := lPq[1]\n\n    lPq[1] = lPq[ len(lPq)-1 ]\n    lPq = lPq[0:len(lPq)-1 ]\n\n  k := 1\n  for ; 2*k <= len(lPq); {\n  j := 2*k\n  if k < len(lPq) && lPq[j] > lPq[j+1] {\n      j++\n    }\n  if lPq[k] <= lPq[j] {\n    break\n    }\n    lTemp := lPq[k]\n    lPq[k] = lPq[j]\n  lPq[j] = lTemp\n    }\n    return lRetVal, lPq\n}\n\nfunc main() {\n  var lPq []int\n    lPq = append(lPq[:], -9999)\n\n    var ip *int = flag.Int(\"n\", 8, \"help message\")\n    var ip2 *int = flag.Int(\"d\", 8, \"help message2\")\n        flag.Parse()\n        lNum := *ip\n\n        fmt.Printf( \"lNum= %d\n\", lNum)   \n\n    lPq = insert( 17, lPq[:] );\n    lPq = insert( 19, lPq[:] );\n    lPq = insert( 9, lPq[:] );\n    lPq = insert( 4 , lPq[:]);\n    lPq = insert ( 12, lPq[:] );\n\n        rand.Seed(time.Now().UnixNano())\n        for i := 0; i < lNum; i++ {\n        lKey := rand.Intn( 4*lNum )\n            lPq = insert(lKey, lPq[:])    \n    }\n    fmt.Printf(\"pq.size = %d\n\", len(lPq) )\n\n        lPrintTo := len(lPq)\n    if lPrintTo > 64 {\n          lPrintTo = 64\n      }\n        var num int\n        for _, num = range lPq[0:lPrintTo] {\n        fmt.Printf( \"%d \", num)\n    }\n    fmt.Println(\"\");\n\n    var lMin int\n    for index := 1; index < 3; index++ {\n        lMin, lPq = delete_min( lPq[:] )\n            fmt.Printf( \"lMin = %d\n\", lMin)\n            for _, num = range lPq[0:lPrintTo] {\n        fmt.Printf( \"%d \", num)\n      }\n      fmt.Println(\"\");\n    }\n\n  lPq = insert( 3, lPq[:] );\n  lPq = insert( 4, lPq[:] );\n  lPq = insert( 1, lPq[:] );\n  lPq = insert( 8, lPq[:] );\n  lPq = insert( 20, lPq[:] );\n  lPq = insert( 21, lPq[:] );\n  lPq = insert( 6, lPq[:] );\n  lPq = insert ( 11, lPq[:]  );\n\n    lNumToDelete := len( lPq )\n    lNumToDelete = *ip2\n\n    for index := 1; index < lNumToDelete-1; index++ {\n    lMin, lPq = delete_min( lPq[:] )\n\n        lPrintTo = len(lPq)\n        if lPrintTo > 64 {\n          lPrintTo = 64\n      }\n        fmt.Printf(\"lPrintTo = %d\n\",lPrintTo )\n      fmt.Printf(\"pq.size = %d\n\", len(lPq) )\n      for _, num = range lPq[0:lPrintTo] {\n            fmt.Printf( \"%d \", num)\n      }\n    fmt.Println(\"\");\n    }\n\n}\n\n// gccgo -Og -I/devserv-home/rspikol/include -o pqgo pq.go -L/devserv-home/rspikol/lib\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Yes. If the operators are placed before the variable then the variable is changed before any other order of operations.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$a=4;\n$x=++$a + 6; will result in $x=11 and $a=5\n$x=$a++ + 6; will result in $x=10 and $a=5\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When the operators are in front it takes precedence over all other operators. \nYou can find a simple explanation at the following site as well:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.php.net/manual/en/language.operators.increment.php\" rel=\"nofollow\"&gt;http://www.php.net/manual/en/language.operators.increment.php&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["PHP后递增/递减运算符优先级", ["\n\n", "In documentation ", "http://www.php.net/manual/en/language.operators.precedence.php", " it is said, that ", "++", " and ", "--", " operators have very high precedence.\nBut as i know, ", "++$x", " and ", "$x++", " is not the same. Moreover, ", "$x++", " should have minimal precedence, because it is calculated after everything is done:", "\n\n", "$x = 1;\nvar_dump(1 and $x--); // and operator is one of last operators in the table, it will be executed before post decrement\n", "\n\n", "So, post- increment/decrement operators should be in this table in the bottom?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;因为只要每次循环满足count&amp;lt;number, 都在 i&amp;#43;&amp;#43;&amp;#xff0c;所以i一直在增加&amp;#xff0c;知道count&amp;#61;100就不会进入循环了。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["C语言的全局变量和本地变量优先级问题", ["C语言问题如图", "while循环中，if判别条件内，isPrime函数的参数i，为何不是每次循环时i都等于3？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;建议你看一下AudioManger类&amp;#xff0c;可以管理音频通道&amp;#xff0c;其中 getDevices() 也可以获取到系统当前的输入输出设备, 通过AudioDeviceCallback可以监听音频设备的连接和断开&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["Android 8.1 修改蓝牙耳机和有线耳机优先级", ["Android系统默认蓝牙耳机和有线耳机输出的逻辑是，声音从后接入的耳机输出，比如先接有线耳机再连蓝牙耳机声音从蓝牙输出，反之，先连接蓝牙耳机再连接有线耳机，声音从有线耳机输出。", "\n客户希望蓝牙耳机输出为优先于有线耳机，我这边研究了蓝牙耳机和有线耳机的连接和断开，目前只找到了通过接收广播获取蓝牙耳机和有线耳机的连接和断开事件，至于系统里面是怎么获取到有线耳机插入事件，然后把声音通道从蓝牙切换到有线耳机的，这块的逻辑还没有找到。", "\n所以要解决这个问题还是要找到系统监听有线耳机插入的事件切换声音通道的地方。客户催的紧，目前我只能退而求其次，在PhoneWindowManager.java里面监听有线耳机插入事件，判断蓝牙耳机如果是连接的状态，就重置一下蓝牙，就是关掉蓝牙立马打开蓝牙，效果就是插上有线耳机后蓝牙耳机立刻没有声音了，然后蓝牙断开，2秒左右蓝牙耳机重新连接，声音就从蓝牙耳机输出了。", "\n先这样应付一下吧，各位同道中人是否有了解这一块的逻辑恳请指点迷津，不胜感激涕零！", "\n "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;参考&amp;#xff1a;优先级顺序为 &amp;#61;&amp;#61; &amp;#xff01;&amp;#61;  &amp;amp;&amp;amp; ||&lt;br /&gt;&lt;a id=\"textarea_1631776598694_1631776689860_0\" target=\"_blank\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;C语言运算符优先级和结合性一览表&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;算术运算符就是完成基本数学运算的符号。在实际编程中&amp;#xff0c;常用的算术运算符主要有&amp;#xff1a; &amp;#43;&amp;#xff1a;加 &amp;#xff1a;减 *&amp;#xff1a;乘 /&amp;#xff1a;除 %&amp;#xff1a;取余 &amp;#43;&amp;#43;&amp;#xff1a;自增 &amp;#xff1a;自减 其中加、减、乘这三个运算符同数学里的一样&amp;#xff0c;不&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;http://c.biancheng.net/view/161.html&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["c语言运算符优先级或结合性问题求解", ["比如这个表达式改如何算呀从哪里开始求大佬扩展"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;四则计算器一般是通过栈来实现的&lt;br /&gt;可以参考&lt;a href=\"https://blog.csdn.net/vipchen1997/article/details/80901288\" id=\"textarea_1633845642449_1633845762803_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;&amp;#xff08;C语言&amp;#xff09;栈应用简易计算器实现_vipchen1997的博客-CSDN博客&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;//利用栈实现简易计算器,计算正数之间的&amp;#43;,-,*,/,(,)计算 #include&amp;amp;lt;stdio.h&amp;amp;gt;#define MaxSize 100 typedef struct CharStack\t\t\t\t//字符栈 {\tchar data[MaxSize];\tint top;}cStack;typedef struct DoubleStack\t\t\t\t//数据栈 {\td...&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/vipchen1997/article/details/80901288&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["用for和if来实现，现在不太清楚加减乘除和括号优先级怎么做", []], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;vue3 中v-if优先于v-for&amp;#xff0c;你可以按下面方法使用&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"language-xml\"&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;template&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;v-for&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;user in users&amp;#34;&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;:key&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;user.id&amp;#34;&lt;/span&gt; \n    &amp;lt;&lt;span class=\"hljs-attr\"&gt;li&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;v-if&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;user.isActive&amp;#34;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=\"hljs-template-variable\"&gt;{&lt;!-- --&gt;{&lt;!-- --&gt;&lt;span class=\"hljs-name\"&gt;user.name&lt;/span&gt;}}&lt;/span&gt;&lt;span class=\"language-xml\"&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["vue3 中 因为 v-if 比 v-for 具有更高的优先级", ["\n", "官方里说的是因为 user 是 v-for的 迭代的变量 所以才会产生 这个问题", "\n", "那我要是这样呢？", "\n", "\n", "v-if 里的变量是单独的，  可行？"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You could just ORDER BY &lt;a href=\"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_instr\" rel=\"nofollow noreferrer\"&gt;INSTR&lt;/a&gt;(item, ?).&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["使用PHP或SQL按发生优先级排序MYSQL结果", ["\n\n", "I use the php script below to query mysql and to display:", "\n\n", "$sql1 = $con->prepare(\"SELECT item FROM product WHERE item LIKE ?\");\n$q = '%' . $q . '%';\n$sql1->bind_param(\"s\", $q);\n$sql1->execute();\n$sql1->bind_result($item);\n\nwhile ($sql1->fetch()) {          \necho \"<div>$item</div>\n", "\n\n", "Let say search $q = 'test tube'\nThe result did come out like this:", "\n\n", "brush for test tube\ntest tube glass\ntest tube plastic\n", "\n\n", "(This is logic since the items are indexed alphabetically in mysql)", "\n\n", "But I after I get result array from query, I want to use PHP to sort it again by giving priority first to which ever item that meets the search keyword at the front most. ", "\n\n", "I expect the result like this:", "\n\n", "test tube glass\ntest tube plastic\nbrush for test tube\n", "\n\n", "How can I do that? Any suggestion?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这里涉及到逻辑运算符的短路求值特性&amp;#xff0c;俗称为惰性。&lt;br /&gt;即已经可以确定整个逻辑运算式的结果时&amp;#xff0c;编译器将结束之后的判断。&lt;br /&gt;题中的(&amp;#43;&amp;#43;a&amp;lt;0)是为假的&amp;#xff0c;而&amp;amp;&amp;amp;运算符只要有一边为假则整个都是假&amp;#xff0c;这个时候编译器就不会去判断后面的(b--&amp;lt;&amp;#61;0)是真还是假了&amp;#xff0c;因为不管你是真还是假&amp;#xff0c;整个逻辑运算式都是假。也就没有执行b--这个语句。所以b的值还是4。&lt;br /&gt;至于你说的&amp;#xff01;的优先级的确高&amp;#xff0c;但比括号低&amp;#xff0c;而括号是是从左到右的&amp;#xff0c;当编译器判断出第一个括号是假的时候&amp;#xff0c;这整个逻辑与的表达式就已经结束判断了。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["答案为什么是0，0，4啊？不应该是！优先级高于&&，所以先算！（b--<=0)吗？难道不是0，0，3？求解", ["\n", "#", "include", "<stdio.h>", "\n", "int", " ", "main", "( )", "\n", "{\n     ", "int", " a=", "-1", ",b=", "4", ",k;\n     k=(++a<", "0", ")&&!(b--<=", "0", ");\n     ", "printf", "( ", "\"%d,%d,%d\"", ",k,a,b);\n     ", "return", " ", "0", ";\n}\n\n\n"]], "Tag": "程序设计"}
{"Answer": "应该先a b作union，得到左边，再left join销售记录，得到完整的表\r\n不过你的数据结构有点奇怪，最好是产品表，型号 名称 单价 类型，把a b合并成一个表，a表的类型叫做a，b表的类型叫做b", "Konwledge_Point": "优先级", "Question": ["请教：sql 中 union 与 join 的顺序", ["有三个表：", "\n\n", "产品A：型号  名称  单价", "\n\n", "产品B：型号  名称  单价", "\n\n", "销售记录表：日期  型号  销售额", "\n\n", "希望得到的结果表：型号  名称 单价 销售总量", "\n\n", "并按型号进行排序", "\n\n", "是先union还是先left join？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;对, &lt;code class=\"language-javascript\"&gt;j &amp;#61; *(p&amp;#43;&amp;#43;); &lt;/code&gt; 就等同 &lt;code class=\"language-javascript\"&gt;j &amp;#61; *p; p&amp;#43;&amp;#43;;&lt;/code&gt;&lt;br /&gt;p&amp;#43;&amp;#43; 是先返回p原本的地址值, 再对p增加1,&lt;br /&gt;也就是让p指向的地址向后移动一个int类型的地址单位&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "优先级", "Question": ["C语言中指针问题，j=*(p++)", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "#include <stdio.h>", "\n\n\n", "//", "重要程度低\nint main()\n{\n    int a[", "3", "] = { ", "2", ",", "7", ",", "8", " };\n    int* p;\n    int j;\n    p = a;  ", "//", "让指针变量p，指向数组的开头\n    ", "//", "j = *p++; ", "//", "j = *p;p++  任何时候都是把后加加去掉，第二步看另一个运算符优先级是否高于加加   \n\n    ", "//", "j = (*p)++;  ", "//", " 第一步 j = *p;  第二步(*p)++\n    \n    ", "//", "j = p[", "0", "]++; ", "//", "第一步 j = p[", "0", "];  第二步 p[", "0", "]++\n\n    ", "//", "j = *(p++);  ", "//", "第一步  j = *p; 第二步 p++\n    printf(", "\"a[0] = %d,j = %d,*p = %d\\n\"", ", a[", "0", "], j, *p);\n\n\n}\n\n", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "第一步  j = *p; 第二步 p++", "\n", "我想要达到的结果"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;可以改下开机程序启动顺序&lt;/p&gt;\n&lt;p&gt; &lt;a href=\"https://jingyan.baidu.com/article/fb48e8be288a0c2f622e14a8.html\" id=\"textarea_1656345043732_1656345578092_0\"&gt;https://jingyan.baidu.com/article/fb48e8be288a0c2f622e14a8.html&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;让程序开机登录之前启动方法:&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"https://blog.csdn.net/u011765923/article/details/90748945\" id=\"textarea_1656345043732_1656345578092_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;Windows 开机运行程序 在登录之前_善良大仙的博客-CSDN博客_windows 登录前运行&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;测试环境&amp;#xff1a;server2012R方法&amp;#xff1a;右键我的电脑-&amp;gt;管理&amp;#xff1a;2.创建任务3.设置&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/u011765923/article/details/90748945&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["软件如何设置优先自启动", ["win10系统", "\n", "有一个桌面软件，开机后要等一段时间(3-5秒）才能启动好", "问:", "有没有在输入完密码后(就是登录用户）提前启动好？"]], "Tag": "程序设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;&lt;p&gt;系统(其实是pam_limits这个模块)会先读入/etc/security/limits.conf&amp;#xff0c;然后读入/etc/security/limits.d/下面的文件&amp;#xff0c;所以是 /etc/security/limits.d/20-nproc.conf这个文件设定的值生效。你可以理解成直接把它们按照读入顺序拼接即可&amp;#xff0c;对于相同的用户指定&amp;#xff0c;越靠后优先级越高。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;第二个问题其实根据我上一个解释&amp;#xff0c;已经退化成为*进行定义&amp;#xff0c;指定用户的优先级&amp;#xff0c;因为你可以把它们先拼在一起作为一个文件理解。指定用户&amp;gt;指定用户组&amp;gt;不指定.&lt;/p&gt;\n&lt;ul&gt;&lt;li&gt;nofile是指定值&amp;#xff0c;看前面对用户和在文件中的位置的优先级即可&lt;/li&gt;&lt;/ul&gt;\n&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "优先级", "Question": ["limits.conf和20-nproc.conf的去区别是什么呢？", ["使用Linux的rhel7.4的limits.conf进行设定时，/etc/security/limits.conf和 /etc/security/limits.d/20-nproc.conf设定有没有优先顺位呢？", "是哪一个会被认为是优先级比较高的呢？", "使用*进行定义，指定用户，还有nofile的值不一样的时候，上面两个哪个权重比较大呢？", "我刚刚入门，想知道一下怎么思考这个问题。"]], "Tag": "程序设计"}
{"Answer": "错误太多了，只能简单修改下编译错误\r\n\r\n```\r\n// Q1062027.cpp : Defines the entry point for the console application.\r\n//\r\n\r\n#include \"stdafx.h\"\r\n\r\n\r\n#include&lt;stdio.h&gt;\r\n#include&lt;stdlib.h&gt;\r\n#include&lt;string.h&gt;\r\n#define OK 1\r\n#define ERROR 0\r\nint M=0;\r\nint N=0;\r\ntypedef int Status;\r\ntypedef struct ElemType\r\n{\r\n    int level;\r\n    char name[20];\r\n    char gender;\r\n    char ID[20];\r\n\r\n}ElemType;\r\ntypedef struct Node   //结点结构\r\n{\r\n    ElemType data;\r\n    struct Node *next;\r\n}Node,*QueuePtr;\r\n\r\ntypedef struct\r\n{\r\n    QueuePtr front,rear;\r\n} LinkQueue;\r\n\r\nStatus InitQueue(LinkQueue **Q)  // 队列初始化\r\n{\r\n   QueuePtr p;\r\n   p=(QueuePtr)malloc(sizeof(QueuePtr));\r\n   if(!p)\r\n   {\r\n       printf(\"内存分配失败\");\r\n       return ERROR;\r\n   }\r\n   *Q=(LinkQueue*)malloc(sizeof(LinkQueue));\r\n   if(!(*Q))\r\n   {\r\n       printf(\"内存分配失败\");\r\n       return ERROR;\r\n   }\r\n   p-&gt;next=NULL;\r\n   (*Q)-&gt;front=p;\r\n   (*Q)-&gt;front=(*Q)-&gt;rear;\r\n   return OK;\r\n}\r\n\r\nStatus EnQueue(LinkQueue *Q, ElemType e)  //入队\r\n{\r\n    QueuePtr s=(QueuePtr)malloc(sizeof(Node));\r\n    if(!s)\r\n    {\r\n       printf(\"内存分配失败\");\r\n       return ERROR;\r\n    }\r\n    s-&gt;data=e;\r\n    s-&gt;next=NULL;\r\n    Q-&gt;rear-&gt;next=s;      //把拥有元素e的新节点s赋值给队尾的后继节点\r\n    Q-&gt;rear=s;            //把当前s设置为队尾节点，rear指向s\r\n    return OK;\r\n}\r\n\r\nStatus DeQueue(LinkQueue *Q,ElemType *e)  //出队\r\n{\r\n    QueuePtr p;\r\n    if(Q-&gt;front==Q-&gt;rear)\r\n    {\r\n        printf(\"队列为空!\");\r\n        return ERROR;\r\n    }\r\n\r\n    p=Q-&gt;front-&gt;next;     //  将预删除的队头结点暂存给p\r\n    *e=p-&gt;data;             // 将删除的队头结点赋值给e 即出队\r\n    Q-&gt;front-&gt;next=p-&gt;next;  //  将原队头结点后继p-&gt;next 赋值给现投结点后继\r\n\r\n    if(Q-&gt;rear==p)\r\n    {\r\n        Q-&gt;rear=Q-&gt;front;      //若队头是队尾，则删除后将rear指向头结点\r\n\r\n    }\r\n     free(p);\r\n\r\n    return OK;\r\n}\r\n\r\nStatus PriorEnQueue(LinkQueue *Q1,LinkQueue *Q2,ElemType e)\r\n{\r\n    if(e.level==3)\r\n       {\r\n           EnQueue(Q1,e);\r\n       }\r\n    else\r\n       {\r\n          EnQueue(Q2,e);\r\n       }\r\n\r\n        return OK;\r\n\r\n}\r\n\r\n\r\nStatus PriorDeQueue(LinkQueue*Q1,LinkQueue*Q2)\r\n{\r\n    ElemType e;\r\n    if(!(Q2-&gt;front==Q2-&gt;rear))\r\n       DeQueue(Q2,&amp;e);\r\n    else if(!(Q1-&gt;front==Q1-&gt;rear))\r\n       DeQueue(Q1,&amp;e);\r\n    else\r\n    {\r\n        return ERROR;\r\n    }\r\n    return OK;\r\n\r\n}\r\n\r\nStatus GetIN(LinkQueue*Q1,LinkQueue*Q2,ElemType*e)\r\n{\r\n    int i;\r\n    int n;\r\n    printf(\"请输入前来就诊的病人数量：\");\r\n    scanf(\"%d\",&amp;n);\r\n    for(i=M;i&lt;M+n;i++)\r\n    {\r\n        printf(\"\\n请输入第%d个病人的优先级：\",i+1);\r\n        scanf(\"%d\",&amp;e[i].level);\r\n        printf(\"\\n请输入第%d个病人的姓名：\",i+1);\r\n        scanf(\"%s\",e[i].name);\r\n        printf(\"\\n请输入第%d个病人的性别：\",i+1);\r\n        scanf(\"%s\",&amp;e[i].gender);\r\n        printf(\"\\n请输入第%d个病人的身份证：\",i+1);\r\n        scanf(\"%s\",e[i].ID);\r\n        PriorEnQueue(Q1,Q2,e[i]);\r\n    }\r\n    M=M+n;\r\n    return OK;\r\n}\r\nStatus ShowInformation(ElemType *e)\r\n{\r\n    int i;\r\n    LinkQueue *Q1,*Q2;\r\n    InitQueue(&amp;Q1);\r\n    InitQueue(&amp;Q2);\r\n    PriorDeQueue(Q1,Q2);\r\n    printf(\"优先级----------姓名----------性别----------身份证\\n\");\r\n    for(i=N;i&lt;N;i++)\r\n    {\r\n        printf(\"\\n\");\r\n        printf(\"%5d %5s %5s %10s\",e[i].level,e[i].name,&amp;e[i].gender,e[i].ID);\r\n    }\r\n    return OK;\r\n}\r\nint main()\r\n{\r\n    LinkQueue Q1,Q2;\r\n\tQ1.front=Q1.rear=NULL;\r\n\tQ2.front=Q2.rear=NULL;\r\n    ElemType e;\r\n    GetIN(&amp;Q1,&amp;Q2,&amp;e);\r\n    ShowInformation(&amp;e);\r\n    return 0;\r\n\r\n}\r\n\r\n\r\n```\r\n# 问题采纳了可以继续帮你看运行的错误", "Konwledge_Point": "优先级", "Question": ["医院排队就诊问题（C语言实现）求大神帮忙查看一下如何修改这些错误", ["问题描述：", "\n医院急诊科室，有医生1名", "\n现有病人7名，先后到达", "\n病人病情轻重各有不同（分3级，3级最重，1级最轻），重症的优先就诊；病症相同的，先来的先就诊。", "\n模型假设：", "\n1.病人挂完号后进入对应的科室，每位病人属性包括姓名，性别，和身份证号", "\n2.一开始的时候，医生空闲（等待病人）。", "\n3.有护士根据病人病情，给出病情优先级后，再排队。", "\n4.排队的病人按照先后次序排队，重症的优先就诊，病症相同的，先来的先就诊。。", "\n5.一位医生每次只能看一个病人。", "\n解决方案模型：", "\n1. 程序模拟医院排队就诊，程序开始输入病人资料（包括优先级，姓名，性别，和身份证号）。", "\n2. 设置一个病人的优先队列，按照优先级由高到低，分段排队，最开头的是优先级最高的病人；如果优先级相同，那么按照先来后到的顺序排队。", "\n3. 对病人队列有两种操作，pop与push，医生每次从病人队列里面pop一个病人，并打印病人信息（包括优先级，姓名，性别，和身份证号），直到队列空。", "\n————————————————", "\n运行输入：", "\n请按照优先级，姓名，性别，和身份证号顺序输入：", "\n1 吕雅畅 男 141130198509277099", "\n1 卞丹丹 女 532925197204181629", "\n2 潘德茂 男 500114197005227938", "\n1 邬碧玉 女 620721198202232320", "\n3 金慧雅 女 533123198508252640", "\n2 岑俊茂 男 152526198707214777", "\n3 毕采萱 女 420600198202107509", "\n\n", "输出：", "\n就诊顺序......", "\n3 金慧雅 女 533123198508252640", "\n3 毕采萱 女 420600198202107509", "\n2 潘德茂 男 500114197005227938", "\n2 岑俊茂 男 152526198707214777", "\n1 吕雅畅 男 141130198509277099", "\n1 卞丹丹 女 532925197204181629", "\n1 邬碧玉 女 620721198202232320", "\n\n", "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#define OK 1\n#define ERROR 0\nint M=0;\nint N=0;\ntypedef int Status;\ntypedef struct ElemType\n{\n    int level;\n    char name[20];\n    char gender;\n    char ID[20];\n\n}ElemType;\ntypedef struct Node   //结点结构\n{\n    ElemType data;\n    struct Node *next;\n}Node,*QueuePtr;\n\ntypedef struct\n{\n    QueuePtr front,rear;\n} LinkQueue;\n\nStatus InitQueue(LinkQueue *Q)  // 队列初始化\n{\n   QueuePtr p;\n   p=(QueuePtr)malloc(sizeof(QueuePtr));\n   if(!p)\n   {\n       printf(\"内存分配失败\");\n       return ERROR;\n   }\n   Q=(LinkQueue*)malloc(sizeof(LinkQueue));\n   if(!Q)\n   {\n       printf(\"内存分配失败\");\n       return ERROR;\n   }\n   p->next=NULL;\n   Q->front=p;\n   Q->front=Q->rear;\n   return OK;\n}\n\nStatus EnQueue(LinkQueue *Q, ElemType e)  //入队\n{\n    QueuePtr s=(QueuePtr)malloc(sizeof(Node));\n    if(!s)\n    {\n       printf(\"内存分配失败\");\n       return ERROR;\n    }\n    s->data=e;\n    s->next=NULL;\n    Q->rear->next=s;      //把拥有元素e的新节点s赋值给队尾的后继节点\n    Q->rear=s;            //把当前s设置为队尾节点，rear指向s\n    return OK;\n}\n\nStatus DeQueue(LinkQueue *Q,ElemType *e)  //出队\n{\n    QueuePtr p;\n    if(Q->front==Q->rear)\n    {\n        printf(\"队列为空!\");\n        return ERROR;\n    }\n\n    p=Q->front->next;     //  将预删除的队头结点暂存给p\n    *e=p->data;             // 将删除的队头结点赋值给e 即出队\n    Q->front->next=p->next;  //  将原队头结点后继p->next 赋值给现投结点后继\n\n    if(Q->rear==p)\n    {\n        Q->rear=Q->front;      //若队头是队尾，则删除后将rear指向头结点\n\n    }\n     free(p);\n\n    return OK;\n}\n\nStatus PriorEnQueue(LinkQueue *Q1,LinkQueue *Q2,ElemType *e)\n{\n    if(e->level==3)\n       {\n           EnQueue(Q1,e);\n       }\n    else\n       {\n          EnQueue(Q2,e);\n       }\n\n        return OK;\n\n}\n\n\nStatus PriorDeQueue(LinkQueue*Q1,LinkQueue*Q2)\n{\n    ElemType *e;\n    if(!(Q2->front==Q2->rear))\n       e=DeQueue(Q2,e);\n    else if(!(Q1->front==Q1->rear))\n        e=DeQueue(Q1,e);\n    else\n    {\n        return ERROR;\n    }\n    return OK;\n\n}\n\nStatus GetIN(LinkQueue*Q1,LinkQueue*Q2,ElemType*e)\n{\n    int i;\n    int n;\n    printf(\"请输入前来就诊的病人数量：\");\n    scanf(\"%d\",&n);\n    for(i=M;i<M+N;i++)\n    {\n        printf(\"\\n请输入第%d个病人的优先级：\",i+1);\n        scanf(\"%d\",&e[i].level);\n        printf(\"\\n请输入第%d个病人的姓名：\",i+1);\n        scanf(\"%s\",e[i].name);\n        printf(\"\\n请输入第%d个病人的性别：\",i+1);\n        scanf(\"%s\",&e[i].gender);\n        printf(\"\\n请输入第%d个病人的身份证：\",i+1);\n        scanf(\"%s\",e[i].ID);\n        PriorEnQueue(Q1,Q2,e);\n    }\n    M=M+n;\n    return OK;\n}\nStatus ShowInformation(ElemType *e)\n{\n    int i;\n    LinkQueue *Q1,*Q2;\n    InitQueue(Q1);\n    InitQueue(Q2);\n    PriorDeQueue(Q1,Q2);\n    printf(\"优先级----------姓名----------性别----------身份证\\n\");\n    for(i=N;i<N;i++)\n    {\n        printf(\"\\n\");\n        printf(\"%5d %5s %5s %10s\",e[i].level,e[i].name,&e[i].gender,e[i].ID);\n    }\n    return OK;\n}\nint main()\n{\n    LinkQueue *Q1,*Q2;\n    ElemType *e;\n    GetIN(Q1,Q2,e);\n    ShowInformation(e);\n    return 0;\n\n}\n\n\n\n\n\n\n", "\n\n"]], "Tag": "程序设计"}
{"Answer": "1. ++运算符的优先级高于大于和小于\r\n2. i++ &gt; 4这种式子表示先用i的值跟4去作比较，完了之后再将i自增\r\n3. 在java里，if (i++ &gt; 4)这种写法是不好的。对于所有的i++你应该写在单独的一句话里。而if(i++ &gt; 4 &amp;&amp; j++ &gt; 9)这种写法则是非常不好的。\r\n4. 之所以说非常不好，是因为运行的结果跟内部机制关系太大。&amp;&amp;, ||称为“快速与或”，它们的特点是，其实一个表达式已经使得条件不可能（或者必然）符合，则不再计算另一个。\r\n5. 以你的程序为例：\r\n初始： i, j == 4, 9\r\n        if ( (i++ &gt; 4) &amp;&amp; (j++ &gt; 9)) ...\r\n        这句话里i++&gt;4返回false，所以已经“不可能”达成&amp;&amp;的条件，则第二句话j++ &gt; 9不再执行。\r\n计算结束后：i, j == 5, 9\r\n        所以第二句话条件不成立\r\n然后：x, y == 4, 9\r\n        if ( ( x++ &gt; 4) &amp; (y++ &gt; 9))...\r\n        这句话用的是&amp;而不是&amp;&amp;，所以x++ &gt; 4执行之后会接着执行y++ &gt; 9，两个结果都出来之后再进行&amp;，然后再判断最后的结果为false\r\n计算结束后：x, y == 5, 10\r\n        所以最后一句话条件成立，输出fourth", "Konwledge_Point": "优先级", "Question": ["JAVA运算符问题", ["public class Test", "\n{", "\npublic static void main( String [] args )", "\n{", "\nint i = 4;", "\nint j = 9;", "\nint x = 4;", "\nint y = 9;\n\n", "if( ( i++ > 4 ) && ( j++ > 9 ) )", "\n        System.out.println( \"first\" );   ", "\n\n", "if( ( i < 4 ) || ( j > 9 ) )", "\n        System.out.println( \"second\" );   ", "\n\n", "if( ( x++ > 4 ) & ( y++ > 9 ) )", "\n        System.out.println( \"third\" );   ", "\n\n", "if( ( x < 4 ) | ( y > 9 ) )", "\n        System.out.println( \"fourth\" );", "\n}", "\n}", "fourth", "问题补充", "我想知道++运算符和大于小于运算符的优先级。不明白为什么结果是这样？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代码1并没有执行后面的 &lt;code class=\"language-javascript\"&gt;false &amp;amp;&amp;amp; false&lt;/code&gt;&amp;#xff0c;它是从左往右执行&amp;#xff0c;对于&lt;code class=\"language-javascript\"&gt;||&lt;/code&gt;,只要左边为true&amp;#xff0c;右边直接连看都不看了&amp;#xff08;因为不论右边是true或false&amp;#xff0c;最终都是true&amp;#xff09;&lt;/p&gt;\n&lt;p&gt;代码2同理&amp;#xff0c;左边 &lt;code class=\"language-javascript\"&gt;&amp;#43;&amp;#43;a&lt;/code&gt; 表达式值为 2&amp;#xff0c;所以 &lt;code class=\"language-javascript\"&gt;||&lt;/code&gt; 左边为true&amp;#xff0c;右边也直接看都不看了&amp;#xff0c;因此 &lt;code class=\"language-javascript\"&gt;&amp;#43;&amp;#43;b&lt;/code&gt;和 &lt;code class=\"language-javascript\"&gt;c&amp;#43;&amp;#43;&lt;/code&gt; 都没有执行&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["短路与、短路或的执行顺序", ["问题：请问短路与、短路或共同使用时，代码执行顺序是怎样的？", "目前使用下面两个代码，但是得出的结论却不太一样。", "\n", "//代码1", "\n", "bool", "ean result = ", "true", " || ", "false", " && ", "false", ";\nSystem.", "out", ".println(result);\n", "\n", "//运行结果：", "\n", "true", "\n", "\n", "执行代码1，可以得出跟公网上一样的答案，&& 的优先级高于 ||，先执行 false && false，再执行 true ||", "\n", "//代码", "2", "\n", "int", " a = ", "1", ";\n", "int", " b = ", "2", ";\n", "int", " c = ", "3", ";\n", "boolean", " result = ++a == ", "2", " || ++b == ", "2", " && c++ == ", "4", ";\n", "System", ".", "out", ".println(result);\n", "System", ".", "out", ".println(\"a：\" + a);\n", "System", ".", "out", ".println(\"b：\" + b);\n", "System", ".", "out", ".println(\"c：\" + c);\n", "\n", "//运行结果：", "\n", "true", "\n", "a", "：", "2", "\n", "b", "：", "2", "\n", "c", "：", "3", "\n", "\n", "执行代码2，发现只执行了 || 前的第一个boolean表达式，后面两个表达式全部短路了。", "但是这样就与代码1的结果有冲突，按照代码1的结论，应该是会先执行后两个boolean表达式，再执行第一个boolean表达式。", "我在网络上搜索了相关的问题，但是大多也只谈到了优先级的情况，也请教了一些同学，但是也都没有得到一个满意的答案，因此还要烦请指点一下。"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I have created threadpools on golang. This should allow easily one to prioritize certain goroutines over others.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/vijayviji/executor\" rel=\"nofollow noreferrer\"&gt;https://github.com/vijayviji/executor&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["在golang中优先使用goroutine", ["\n\n", "I'm writing a low latency network, high throughput server in golang. It has acceptor in the main goroutine (which accepts incoming connections). And it passes the incoming connections to 'n' number of worker goroutines.", "\n\n", "In this case, to not drop connections, I want the acceptor goroutine to be prioritized over other goroutines so that connections won't be dropped. Or atleast this acceptor goroutine should not get evicted by other worker goroutines.", "\n\n", "How can I ensure this?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;*ptr&amp;#43;&amp;#43;  这么执行&amp;#xff1a;先 *ptr,  后 ptr&amp;#43;&amp;#43;。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["计算机二级C语言考试优先级", ["\n", "tpr++考的是优先级吗?我查了他们优先级一样，并且是从右往左可是题目里的优先级好像是先", "tpr输出再++还是说这里的*不是取值"]], "Tag": "程序设计"}
{"Answer": "ETag是一个可以与Web资源关联的记号，通过它可利用客户端的缓存，一般把ETags和GET请求的“If-None-Match”头一起使用。服务器首先产生ETag，客户端则将他与页面一起缓存起来，服务器可在后面使用它来判断页面是否是同一个样的页面！像楼上说的一样，他是通过MD5来处理的，具体百度下吧～～  其实你可以得到页面的大小来判断是否是同一个页面，但是不保险，偷懒的代价！", "Konwledge_Point": "优先级", "Question": ["关于 http的ETag和last-modified的问题啊", ["最近在学习爬虫的相关知识啊，但是遇到了个问题，", "\n\n", "比如我想爬取一个网站，", "\n\n", "我先把这个网站的信息爬取下来", "\n\n", "然后记录下来", "\n\n", "等下次我再来爬取的时候，我先对比一下这个网页的ETag和last-modified的值如果没改变的话我就不用爬取了啊", "\n\n", "但是我发下很多网站都没有ETag和last-modified属性", "\n\n", "这怎么办啊。。。。。。。。。。。。。。", "\n\n", "另外求大声能详细的讲解一下ETag和last-modified属性的意义啊", "\n\n", "还有啊，为什么我自己弄的在tomcate上面的工程爬取下来也是没有这两个属性的啊。。。。。。。", "\n\n", "谢谢了啊。。。。。。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;其实你可以不用 &amp;#64;Asyn&amp;#xff0c;只是想要这三个操作并发执行而已&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-java\"&gt;  public static void main(String[] args) throws Exception {\n    ExecutorService executorService &amp;#61; Executors.newCachedThreadPool();\n    CountDownLatch latch &amp;#61; new CountDownLatch(3);\n\n    executorService.execute(() -&amp;gt; {\n      try {\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(&amp;#34;执行第一个操作&amp;#34;);\n      } catch (InterruptedException e) {\n      } finally {\n        latch.countDown();\n      }\n    });\n\n    executorService.execute(() -&amp;gt; {\n      try {\n        TimeUnit.SECONDS.sleep(2);\n        System.out.println(&amp;#34;执行第二个操作&amp;#34;);\n      } catch (InterruptedException e) {\n      } finally {\n        latch.countDown();\n      }\n    });\n\n    executorService.execute(() -&amp;gt; {\n      try {\n        TimeUnit.SECONDS.sleep(3);\n        System.out.println(&amp;#34;执行第三个操作&amp;#34;);\n      } catch (InterruptedException e) {\n      } finally {\n        latch.countDown();\n      }\n    });\n    \n    // 等待前三个执行完毕\n    latch.await();\n\n    System.out.println(&amp;#34;执行第四个操作&amp;#34;);\n    executorService.shutdown();\n  }&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["springboot的@Async，如何控制执行顺序？", ["假设我有三个方法想要异步，在一个类中，有如下调用", "\n\n", "Utils.insertUser();", "\n\n", "Utils.insertAddress();", "\n\n", "Utils.insertInformation();", "\n\n", "Utils.selectAll()", "\n\n", "首先，前三个方法是设置了@Async的注解方法，假设他是往数据库里面插入数据，第四个是把插入的数据查出来，数据来源就是前三个方法，这个方法没有@Async注解。", "\n\n", "现在的问题是，由于前三个方法设置了@Async，导致前三个方法可能还未执行完毕，第四个查询方法就已经开始执行了，这样就没有意义了。所以，如何做到保证前三个方法异步执行，且全部执行完毕后，再执行第四个方法？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;D 括号的优先级最高&lt;br /&gt;优先级顺序是DCBA&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["选择C语言运算符优先级", ["以下运算符中，优先级最高的运算符是（）。", "A:=", "B:!=", "C:*(乘号)", "D:()"]], "Tag": "程序设计"}
{"Answer": "已匿名内部类的方式实现的子线程,", "Konwledge_Point": "优先级", "Question": ["JAVA多线程和以下程序的区别", ["学习多线程了解到", "\n实现线程有两种方式：", "\n1.继承Thread类，重写run方法，在调用start方法。", "\n2.实现Runnable接口，重写run方法。在传给Thread构造器，调用时调用Thread的start方法。", "\n\n", "以下这个我也觉得也是在多个一起运行啊，为什么不叫多线程呢，而且并没有实现以上两种方式", "\n\n", "    public class Thread_setPriority {\npublic static void main(String[] args) {\n    Thread nor = new Thread() {\n        public void run() {\n            for(int i=0;i<10000;i++) {\n                System.out.println(\"nor\");\n                }\n            }\n    };\n\n    Thread max = new Thread() {\n        public void run() {\n            for(int i=0;i<10000;i++) {\n                System.out.println(\"max\");\n            }\n        }\n    };\n\n    Thread min = new Thread() {\n        public void run() {\n            for(int i=0;i<10000;i++) {\n                System.out.println(\"min\");\n            }\n        }\n    };\n    max.setPriority(Thread.MAX_PRIORITY);\n    min.setPriority(Thread.MIN_PRIORITY);\n    min.start();\n    nor.start();\n    max.start();\n}\n", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "```\r\n x = 3 + 5 * 2;\r\n x = (3+5) * 2;   这个意思？ \r\n```", "Konwledge_Point": "优先级", "Question": ["括号能否改变求值顺序？", ["我想不出例子。", "\n《C++ Primer》第五版，中文版。123 页。"]], "Tag": "程序设计"}
{"Answer": "我的测试代码跟楼主你的类似。\r\n我贴一下错误，当我给类加上注解的时候会报这个错：\r\nxception in thread \"main\" org.springframework.dao.InvalidDataAccessApiUsageException: Write operations are not allowed in read-only mode (FlushMode.NEVER/MANUAL): Turn your Session into FlushMode.COMMIT/AUTO or remove 'readOnly' marker from transaction definition.\r\n\r\n去掉呢。就没事了。我的定义里把save等设置为非read-only，跟你的一样。\r\n\r\n故证明：注解比XML配置优先级要高。", "Konwledge_Point": "优先级", "Question": ["spring中事务的注解配置优先级别", ["spring中对于事务的注解配置可以使用两种方式，一种是", " <tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">", "\n        <tx:attributes>", "\n            <tx:method name=\"create*\">", "\n            <tx:method name=\"save*\">", "\n            <tx:method name=\"delete*\">", "\n            <tx:method name=\"*\" read-only=\"true\">", "\n            <tx:method name=\"*\" rollback-for=\"Exception\">", "\n        </tx:attributes>", "\n    </tx:advice>\n\n", "&lt;bean id=\"transactionManager\" class=\"org.springframework.orm.hibernate3.HibernateTransactionManager\"&gt;\n    &lt;property name=\"sessionFactory\" ref=\"sessionFactory\"&gt;\n&lt;/bean&gt;\n", "\n\n", "<aop:config>", "\n        <aop:advisor pointcut=\"execution(* ", "..service.*Manager.", "(..))\" advice-ref=\"txAdvice\">", "\n    </aop:config>", "如果说在ServiceImpl.java中注明@Transactional，如", "@Transactional(readOnly=true)", "\npublic class ServiceImpl implements Service {", "\n // ...", "\n}", "那么可以在配置中写入以下代码就可以了", "<!---->", "\n    <tx:annotation-driven transaction-manager=\"transactionManager\">", "\n<bean id=\"transactionManager\" class=\"org.springframework.orm.hibernate3.HibernateTransactionManager\">", "\n        <property name=\"sessionFactory\" ref=\"sessionFactory\">", "\n    </bean>", "如果上述两种方式同时存在的时候，代码以何种事务控制的方式为准？在此先谢谢各位的帮助！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  注意&amp;gt;优先级比&amp;#61;&amp;#61;高&lt;/span&gt;&lt;br /&gt;&amp;#xff08;5&amp;gt;3&amp;#xff09; &amp;#61;&amp;#61; (6&amp;gt;4)-------------------1&amp;#61;&amp;#61;1&lt;br /&gt;&amp;#xff08;6 &amp;#61;&amp;#61; 6&amp;#xff09; &amp;#61;&amp;#61; 6---------------------1&amp;#61;&amp;#61;6&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  6 &amp;#61;&amp;#61; &amp;#xff08;6 &amp;gt;0&amp;#xff09;----------------------6&amp;#61;&amp;#61;1&lt;/span&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于运算符优先级问题", ["关于运算符优先级问题", "代码第六行不应该输出1吗？", "\n", "a==b输出1", "然后1>0不就输出1吗？为什么输出0了？"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n#include&amp;lt;reg52.h&amp;gt;\ntypedef unsigned char uchar;\ntypedef unsigned int uint;\nsbit a&amp;#61;P1^&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\nuchar code table[]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0x3f&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x06&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x5b&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x4f&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x66&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x6d&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x7d&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x07&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x7f&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x6f&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x77&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x7c&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x39&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x5e&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x79&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x71&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0x00&lt;/span&gt;};\nvoid delay(uint x);\nuchar temp,key,disnum;\nvoid main()\n{\na&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//接通第一个数码管&lt;/span&gt;\ndisnum&amp;#61;&lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//在没按按键时&amp;#xff0c;数码管什么都不显示&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-comment\"&gt;//大循环&lt;/span&gt;\n{\nP3&amp;#61;&lt;span class=\"hljs-number\"&gt;0xf0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//P3&amp;#61;11110000 列全为1&amp;#xff0c;行全为0&lt;/span&gt;\ntemp&amp;#61;P3; &lt;span class=\"hljs-comment\"&gt;//在没有按键按下时temp&amp;#61;11110000&amp;#xff0c;当有按键被按下时&amp;#xff0c;temp!&amp;#61;11110000&lt;/span&gt;\ntemp&amp;#61;temp&amp;amp;&lt;span class=\"hljs-number\"&gt;0xf0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//将temp的低四位全为0&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(temp!&amp;#61;&lt;span class=\"hljs-number\"&gt;0xf0&lt;/span&gt;) &lt;span class=\"hljs-comment\"&gt;//检测是否有按键被按下&lt;/span&gt;\n{\ndelay(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;); &lt;span class=\"hljs-comment\"&gt;//延时&amp;#xff0c;消抖&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(temp!&amp;#61;&lt;span class=\"hljs-number\"&gt;0xf0&lt;/span&gt;) &lt;span class=\"hljs-comment\"&gt;//检测是否有按键被按下&lt;/span&gt;\n{\ntemp&amp;#61;P3; &lt;span class=\"hljs-comment\"&gt;//将P3口实时的值赋给temp&amp;#xff0c;此时的temp高四位有一位为0&amp;#xff0c;低四位全为0&lt;/span&gt;\ntemp&amp;#61;temp|&lt;span class=\"hljs-number\"&gt;0x0f&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//将temp低四位全置1&lt;/span&gt;\nP3&amp;#61;temp; &lt;span class=\"hljs-comment\"&gt;//将temp值赋给P3口&lt;/span&gt;\nkey&amp;#61;P3; &lt;span class=\"hljs-comment\"&gt;//用key读取P3口的值&lt;/span&gt;\nswitch(key) &lt;span class=\"hljs-comment\"&gt;//拿key的值与case后面的值进行对比&lt;/span&gt;\n{\ncase &lt;span class=\"hljs-number\"&gt;0xee&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//当key&amp;#61;0x00时&amp;#xff0c;把disnum&amp;#61;0并退出switch语句&lt;/span&gt;\ncase &lt;span class=\"hljs-number\"&gt;0xde&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\ncase &lt;span class=\"hljs-number\"&gt;0xbe&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\ncase &lt;span class=\"hljs-number\"&gt;0x7e&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\ncase &lt;span class=\"hljs-number\"&gt;0xed&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\ncase &lt;span class=\"hljs-number\"&gt;0xdd&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\ncase &lt;span class=\"hljs-number\"&gt;0xbd&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\ncase &lt;span class=\"hljs-number\"&gt;0x7d&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\ncase &lt;span class=\"hljs-number\"&gt;0xeb&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\ncase &lt;span class=\"hljs-number\"&gt;0xdb&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\ncase &lt;span class=\"hljs-number\"&gt;0xbb&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\ncase &lt;span class=\"hljs-number\"&gt;0x7b&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\ncase &lt;span class=\"hljs-number\"&gt;0xe7&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\ncase &lt;span class=\"hljs-number\"&gt;0xd7&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\ncase &lt;span class=\"hljs-number\"&gt;0xb7&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;14&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\ncase &lt;span class=\"hljs-number\"&gt;0x77&lt;/span&gt; : disnum&amp;#61;&lt;span class=\"hljs-number\"&gt;15&lt;/span&gt;;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n}\n}\n\n}\nP0&amp;#61;table[disnum]; &lt;span class=\"hljs-comment\"&gt;//把数组中的第disnum位的真值赋给P0&lt;/span&gt;\n}\n}\nvoid delay(uint x) &lt;span class=\"hljs-comment\"&gt;//延时函数&amp;#xff0c;延时时间为x次所花费的时间&lt;/span&gt;\n{\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(x–); &lt;span class=\"hljs-comment\"&gt;//x进行自减&amp;#xff0c;直到x&amp;#61;0时才跳出延时函数&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["51单片机中如何把矩阵键盘按下的数据存到数组中", ["51单片机中如何把矩阵键盘按下的数据存到数组中，写在那个位置，假设已经获得了数据，就等着存", "（有人写过蔬菜大棚温湿度控制系统吗，不是lcd显示的，是数码管显示的）"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;在 C 语言中&amp;#xff0c;单目正和单目负运算符的优先级是一样的&amp;#xff0c;都是算术运算符优先级里面最高的。这意味着在表达式中&amp;#xff0c;单目正和单目负运算符会先被计算。&lt;br /&gt;例如&amp;#xff0c;在表达式 &amp;#34;-1 &amp;#43; 3&amp;#34; 中&amp;#xff0c;单目负运算符会先于加法运算符被计算&amp;#xff0c;因此最终结果是 &amp;#34;-1 &amp;#43; 3 &amp;#61; 2&amp;#34;。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["单目正和单目负运算符是不是算术运算符里优先级最高的", ["单目正和单目负运算符是不是算术运算符里优先级最高的？", "单目正运算符和单目负运算符两者的优先级谁高谁低？或者优先级一样？", "这里有点不清楚"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;没错&amp;#xff0c;的确是先调用&amp;#43;&amp;#43;。但是后置&amp;#43;&amp;#43;的大致代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt;&amp;#43;&amp;#43;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;)\n{\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; temp&amp;#61;*&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;;\n*&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; temp;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;所以说&amp;#xff0c;即使先调用&amp;#43;&amp;#43;&amp;#xff0c;返回的也是加一之前的值。这是语法规定&amp;#xff0c;如果使用前置&amp;#43;&amp;#43;就不会这样。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["c++符号优先级问题", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "\n   int d ", "=", " ", "10", ";   //  测试自增、自减", "\n   ", "c", " ", "=", " d++", ";", "\n   cout << ", "\"Line 6 - c 的值是 \"", " << ", "c", " << endl ", ";\n\n", "\n", "\n", "这是在runnob上学c++时看到的", "Line 6 - c 的值是 10", "按理说从右往左的++优先级在第五，而赋值在第十四，不应该先自减再复制吗？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你能问出这种问题&amp;#xff0c;在于你没有理解什么叫严重程度&lt;br /&gt;严重程度&amp;#61;发生的概率 * 影响大小&lt;br /&gt;一件事情发生的概率越大那么它越严重&amp;#xff0c;一旦发生影响越大那么越严重&lt;br /&gt;所以我们就可以根据发生的概率和影响的大小划分出四象限&lt;br /&gt;1.发生概率大&amp;#xff0c;影响大&lt;br /&gt;2.发生概率大&amp;#xff0c;影响小&lt;br /&gt;3.发生概率小&amp;#xff0c;影响大&lt;br /&gt;4.发生概率小&amp;#xff0c;影响小&lt;br /&gt;1和4不用多说&amp;#xff0c;1非常严重&amp;#xff0c;4非常不严重&amp;#xff0c;甚至可以忽略&lt;br /&gt;那么2和3如果同样严重&amp;#xff0c;应该先解决哪个呢&amp;#xff1f;&lt;br /&gt;这就是你桌子上有个苍蝇和天上可能有陨石之间你想先解决哪个问题的问题&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["为什么说bug的严重程度和优先级不是一一对应的", ["严重程度高的bug优先级不一定高，严重性低的bug也可能优先级高，谁能帮忙举个例子？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;handsome &amp;#61; 1改为handsome &amp;#61;&amp;#61; 1&lt;br /&gt;&amp;#61;&amp;#61;才是判断相等&amp;#xff0c;&amp;#61;是赋值语句&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["C语言编程高富帅问题，报错", ["#define _CRT_SECURE_NO_WARNINGS", "#include<stdio.h>", "\n", "void main() {", "    double height = 0.0;", "    double wealth = 0.0;", "    int handsome = 0;", "\n", "printf", "(", "\"请输入身高(cm)：\"", ");\n", "scanf", "(", "\"%lf\"", ", &height);\n\n", "printf", "(", "\"请输入财富(百万)：\"", ");\n", "scanf", "(", "\"%lf\"", ", &wealth);\n\n", "printf", "(", "\"请输入是否帅气（1/0）：\"", ");\n", "scanf", "(", "\"%d\"", ", &handsome);\n\n", "if", " (height >= ", "180", " && wealth > ", "10", " && handsome = ", "1", ") {\n    ", "printf", "(", "\"我一定要嫁给他\"", ");\n}\n", "else", " ", "if", " (height >= ", "180", " || wealth > ", "10", " || handsome = ", "1", ") {\n    ", "printf", "(", "\"嫁吧，比上不足，比下有余\"", ");\n}\n", "else", " {\n    ", "printf", "(", "\"不嫁\"", ");\n}\n", "getchar", "();\n", "getchar", "();\n", "\n", "}", "\n", "最后提示的结果是"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;c &amp;#61; &amp;#43;&amp;#43;x || --y &amp;amp;&amp;amp; !--z; 相当于是&amp;#xff1a;c &amp;#61; (&amp;#43;&amp;#43;x) || (--y &amp;amp;&amp;amp; !(--z)); &amp;#43;&amp;#43;或者--在前会先进行自增或者自减运算&amp;#xff0c;所以在 &amp;#43;&amp;#43;x &amp;#61; 1 为真&amp;#xff0c;|| 后边不会再执行了&amp;#xff0c;所以结果是 x&amp;#61;1, y&amp;#61;1, z&amp;#61;1, c&amp;#61;1&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于运算符优先级的问题", ["这个z不是--z为什么结果会是1，是运算符优先级我想错了？", "\n", "\n", "\n", "#", "include", " ", "<iostream >", "\n", "using", " ", "namespace", " std;\n\n", "int", "  ", "main", "( )", "\n      ", "{   \n         \n        ", "int", " x=", "0", ",y=", "1", ",z=", "1", ",c;\n        c=++x||--y&&!--z;\n        cout<<x<<y<<z<<c;\n         \n        }\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&amp;#43;&amp;#43;在前先进行自增运算再进行其他运算&amp;#xff0c;&amp;#43;&amp;#43;在后先进行其他运算再进行自增运算&lt;br /&gt;所以 x * y&amp;#43;&amp;#43; 同于 (x) * (y)&lt;br /&gt;x * &amp;#43;&amp;#43;y 同于 (x) * (&amp;#43;&amp;#43;y)&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["有关操作符优先级的问题", ["问题遇到的现象和发生背景", "\n", "在学习操作符优先级时，我遇到了 ", "x * y++", " ，", "++", " 的优先级应该比 ", "*", " 高，所以应该等同于 ", "(x) * (y++)", "，但是我在执行以下代码时，发现二者结果不相等。不知道哪里有问题，请指教！", "\n", "#", "include", " ", "<stdio.h>", "\n\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " a = ", "1", ";\n    ", "int", " b = ", "2", " * a++;\n    ", "int", " c = (", "2", ") * (a++);\n    ", "printf", "(", "\"%d %d\\n\"", ", b, c);\n\n    ", "return", " ", "0", ";\n}\n", "\n", "运行结果及报错内容", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;判断优先级和结合性的前提是&amp;#xff0c;相邻操作符&amp;#xff0c;而这里的 3个函数调用操作符并不是相邻的&amp;#xff0c;所以你并不知道他会先调用那个函数&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/71277680416617.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;优先级和结合形并不能确定唯一的计算路径&amp;#xff0c;列如下面这个表达式也是如此&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101560904166123.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["c的优先级结合性的理解", ["为什么说这样的代码不好？", "不是优先级先调用函数？结合性从左到右计算么?", "不就是输出-10吗？初学不是很懂，最好应该怎么理解？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;上述程序答案为&amp;#xff1a;7&lt;br /&gt;流程解释&amp;#xff1a;f(f(4))&amp;#xff0c;先运算外括号里的f(4)&amp;#xff0c;里面&amp;#43;&amp;#43;k&amp;#xff0c;k &amp;#61; 1&amp;#xff0c;运算完后f(4)返回值为5&amp;#xff1b;5作为了下一次运算的入参&amp;#xff0c;因此再次运算f(5)&amp;#xff0c;里面k&amp;#61;1&amp;#xff0c;&amp;#43;&amp;#43;k后&amp;#xff0c;k&amp;#61;2&amp;#xff0c;运算后返回7。&lt;br /&gt;static int k&amp;#61;0; static表明k为静态变量&amp;#xff0c;该变量只会初始化一次&amp;#xff0c;虽然后面再次调用int f(int n)函数&amp;#xff0c;k也不会被重新初始化&amp;#xff0c;而是保存了上一次调用后的结果&amp;#xff0c;即k &amp;#61; 1。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["函数嵌套 运算优先级问题", ["#include <stdio.h>", "int f(int n)", "{    static int k=0;", "    n+=++k;", "    return n;", "}", "int main()", "{", "    printf(\"%d\\n\",f(f(4)));", "}", "这个程序里的n+=++k的运算优先级是什么", "f（f（4））又是怎么运行的🥺"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;数组变量后面的{}换成[]&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["c语言优先级四则运算函数调用", ["我这个遇到✖️，这到底是哪里出错了。这是个有优先级的四则运算，在遇到✖️后的计算"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&amp;lt;&amp;lt;运算符的优先级高于三目运算符? :&amp;#xff0c;如果没有括号的话&amp;#xff0c;输出的值是 (x&amp;gt;&amp;#61;(y&amp;gt;&amp;#61;z?y:z))这个表达式的真假&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["运算符的结合性和优先级问题", ["用三目运算符求三个数中的最大值，这样写为什么结果是零，我知道应该是优先级和结合性的问题，但是不知道具体问题出在哪里"]], "Tag": "程序设计"}
{"Answer": "我的理解是，按场景名称和食堂名称分组，如果有多个蓝色则认为其是黄色，最终显示还是按场景名称和食堂名称分组，每组只显示优先级最高的那个颜色\r\n```\r\nSELECT 场景名称,食堂名称,\r\nCASE WHEN 优先级=3 THEN '红色' WHEN 优先级=2 THEN '黄色' ELSE '蓝色' END AS 显示颜色\r\nFROM\r\n(\r\n  SELECT 场景名称,食堂名称,MAX(优先级) AS 优先级\r\n\tFROM\r\n\t(\r\n\t\tSELECT 场景名称,食堂名称,显示颜色,\r\n\t\tCASE WHEN 显示颜色='红色' THEN 3 WHEN 显示颜色='黄色' THEN 2 ELSE 1 END AS 优先级\r\n\t\tFROM\r\n\t\t(\r\n\t\t\tSELECT 场景名称,食堂名称,\r\n\t\t\tCASE WHEN 显示颜色='蓝色' AND 颜色数量&gt;1 THEN '黄色' ELSE 显示颜色 END AS 显示颜色\r\n\t\t\tFROM\r\n\t\t\t(\r\n\t\t\t\tSELECT 场景名称,食堂名称,显示颜色,COUNT(1) AS 颜色数量\r\n\t\t\t\tFROM 食堂\r\n\t\t\t\tGROUP BY 场景名称,食堂名称,显示颜色\r\n\t\t\t) AS T1\r\n\t\t) AS T2\t\r\n\t) AS T3\r\n\tGROUP BY 场景名称,食堂名称\r\n) AS T4\r\nORDER BY 场景名称,食堂名称,显示颜色\r\n```", "Konwledge_Point": "优先级", "Question": ["mysql 分组时根据优先级显示", ["需要实现的是，分组前每种场景有多种颜色(红色，黄色，蓝色)", "\n优先级为 红>黄>蓝", "\n比如 下面：食材保鲜’在众多蓝色中有一个黄色，希望实现分组后‘食材保鲜’显示的是黄色", "\n\n", "\n\n", "期望结果", "\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1&amp;#xff0c;这是一个三目运算符&amp;#xff0c;a?b:c。&lt;br /&gt;2&amp;#xff0c;对y&amp;gt;0进行判断&amp;#xff0c;如果是正确的&amp;#xff0c;则为真&amp;#61;1&amp;#xff0c;x&amp;#61;3&amp;#xff1b;如果是错误的&amp;#xff0c;则为假&amp;#61;0&amp;#xff0c;x&amp;#61;5。&lt;br /&gt;3&amp;#xff0c;把它转换为代码&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;&amp;#xff08;a&amp;#xff09;\n{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; b;\n}\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; c;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;4&amp;#xff0c;优先级问题&amp;#xff1a;这里面只涉及赋值运算的优先级&amp;#xff0c;等于号的优先级是最低的。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于C语言中运算符优先级的问题", ["\n", "不懂这个x=y＞0？3：5是什么意思，希望会的小伙伴教教我关于C语言里面运算符优先级的记忆技巧"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;enum class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Priority&lt;/span&gt;\n{\n    Low,\n    Medium,\n    High\n};\n\n&lt;span class=\"hljs-keyword\"&gt;template&lt;/span&gt; &amp;lt;&lt;span class=\"hljs-keyword\"&gt;typename&lt;/span&gt; T, &lt;span class=\"hljs-keyword\"&gt;typename&lt;/span&gt; List &amp;#61; std::list&amp;lt;std::pair&amp;lt;T, Priority&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; PriorityQueue\n{\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; List list_type;\n    &lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;typename&lt;/span&gt; List::value_type value_type;\n    &lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;typename&lt;/span&gt; List::size_type size_type;\n    &lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;typename&lt;/span&gt; List::iterator iterator;\n    &lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;typename&lt;/span&gt; List::const_iterator const_iterator;\n\n    &lt;span class=\"hljs-built_in\"&gt;PriorityQueue&lt;/span&gt;() : _high_end(_list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;()), _medium_end(_list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;()) {}\n    &lt;span class=\"hljs-built_in\"&gt;PriorityQueue&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; PriorityQueue &amp;amp;other) : _list(other._list)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;init&lt;/span&gt;();\n    }\n    &lt;span class=\"hljs-built_in\"&gt;PriorityQueue&lt;/span&gt;(PriorityQueue &amp;amp;&amp;amp;other)\n        : _list(std::&lt;span class=\"hljs-built_in\"&gt;move&lt;/span&gt;(other._list))\n    {\n        &lt;span class=\"hljs-built_in\"&gt;init&lt;/span&gt;();\n        other._high_end &amp;#61; other._list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;();\n        other._medium_end &amp;#61; other._list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;();\n    }\n    &lt;span class=\"hljs-built_in\"&gt;PriorityQueue&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; std::initializer_list&amp;lt;value_type&amp;gt; &amp;amp;list) : _high_end(_list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;()), _medium_end(_list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;())\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; &amp;amp;[value, priority] : list)\n            &lt;span class=\"hljs-built_in\"&gt;insert&lt;/span&gt;(value, priority);\n    }\n    ~&lt;span class=\"hljs-built_in\"&gt;PriorityQueue&lt;/span&gt;() {}\n\n    PriorityQueue &amp;amp;&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt;&amp;#61;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; PriorityQueue &amp;amp;other)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt; !&amp;#61; &amp;amp;other)\n        {\n            _list &amp;#61; other._list;\n            &lt;span class=\"hljs-built_in\"&gt;init&lt;/span&gt;();\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; *&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;;\n    }\n\n    PriorityQueue &amp;amp;&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt;&amp;#61;(PriorityQueue &amp;amp;&amp;amp;other)\n    {\n        _list &amp;#61; std::&lt;span class=\"hljs-built_in\"&gt;move&lt;/span&gt;(other._list);\n        &lt;span class=\"hljs-built_in\"&gt;init&lt;/span&gt;();\n        other._high_end &amp;#61; other._list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;();\n        other._medium_end &amp;#61; other._list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; *&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-function\"&gt;iterator &lt;span class=\"hljs-title\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Priority priority)&lt;/span&gt;\n    &lt;/span&gt;{\n        iterator it;\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (priority)\n        {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::Low:\n            it &amp;#61; _medium_end;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::Medium:\n            it &amp;#61; _high_end;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::High:\n            it &amp;#61; _list.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;();\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; it;\n    }\n\n    &lt;span class=\"hljs-function\"&gt;iterator &lt;span class=\"hljs-title\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Priority priority)&lt;/span&gt;\n    &lt;/span&gt;{\n        iterator it;\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (priority)\n        {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::Low:\n            it &amp;#61; _list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;();\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::Medium:\n            it &amp;#61; _medium_end;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::High:\n            it &amp;#61; _high_end;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; it;\n    }\n\n    &lt;span class=\"hljs-function\"&gt;const_iterator &lt;span class=\"hljs-title\"&gt;begin&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Priority priority)&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt;\n    &lt;/span&gt;{\n        const_iterator it;\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (priority)\n        {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::Low:\n            it &amp;#61; _medium_end;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::Medium:\n            it &amp;#61; _high_end;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::High:\n            it &amp;#61; _list.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;();\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; it;\n    }\n\n    &lt;span class=\"hljs-function\"&gt;const_iterator &lt;span class=\"hljs-title\"&gt;end&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Priority priority)&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt;\n    &lt;/span&gt;{\n        const_iterator it;\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (priority)\n        {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::Low:\n            it &amp;#61; _list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;();\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::Medium:\n            it &amp;#61; _medium_end;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::High:\n            it &amp;#61; _high_end;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; it;\n    }\n\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;empty&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; _list.&lt;span class=\"hljs-built_in\"&gt;empty&lt;/span&gt;(); }\n\n    &lt;span class=\"hljs-function\"&gt;size_type &lt;span class=\"hljs-title\"&gt;size&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; _list.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(); }\n\n    &lt;span class=\"hljs-function\"&gt;size_type &lt;span class=\"hljs-title\"&gt;size&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Priority priority)&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt;\n    &lt;/span&gt;{\n        size_type sz &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (priority)\n        {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::Low:\n            sz &amp;#61; std::&lt;span class=\"hljs-built_in\"&gt;distance&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;const_iterator&lt;/span&gt;(_medium_end), _list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;());\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::Medium:\n            sz &amp;#61; std::&lt;span class=\"hljs-built_in\"&gt;distance&lt;/span&gt;(_high_end, _medium_end);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::High:\n            sz &amp;#61; std::&lt;span class=\"hljs-built_in\"&gt;distance&lt;/span&gt;(_list.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;(), &lt;span class=\"hljs-built_in\"&gt;const_iterator&lt;/span&gt;(_high_end));\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; sz;\n    }\n\n    &lt;span class=\"hljs-function\"&gt;iterator &lt;span class=\"hljs-title\"&gt;insert&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; T &amp;amp;value, Priority priority)&lt;/span&gt;\n    &lt;/span&gt;{\n        iterator it;\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (priority)\n        {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::Low:\n        {\n            &lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; sz_medium &amp;#61; &lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(Priority::Medium);\n            &lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; sz_low &amp;#61; &lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(Priority::Low);\n            it &amp;#61; _list.&lt;span class=\"hljs-built_in\"&gt;insert&lt;/span&gt;(_list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(), std::&lt;span class=\"hljs-built_in\"&gt;make_pair&lt;/span&gt;(value, priority));\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sz_low &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                _medium_end &amp;#61; it;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sz_medium &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                    _high_end &amp;#61; it;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::Medium:\n        {\n            &lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; sz_medium &amp;#61; &lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;(Priority::Medium);\n            it &amp;#61; _list.&lt;span class=\"hljs-built_in\"&gt;insert&lt;/span&gt;(_medium_end, std::&lt;span class=\"hljs-built_in\"&gt;make_pair&lt;/span&gt;(value, priority));\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (sz_medium &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                _high_end &amp;#61; it;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::High:\n            it &amp;#61; _list.&lt;span class=\"hljs-built_in\"&gt;insert&lt;/span&gt;(_high_end, std::&lt;span class=\"hljs-built_in\"&gt;make_pair&lt;/span&gt;(value, priority));\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; it;\n    }\n\n    &lt;span class=\"hljs-function\"&gt;iterator &lt;span class=\"hljs-title\"&gt;erase&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(iterator pos)&lt;/span&gt;\n    &lt;/span&gt;{\n        iterator it &amp;#61; _list.&lt;span class=\"hljs-built_in\"&gt;erase&lt;/span&gt;(pos);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (pos &amp;#61;&amp;#61; _high_end)\n            _high_end &amp;#61; it;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (pos &amp;#61;&amp;#61; _medium_end)\n            _medium_end &amp;#61; it;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; it;\n    }\n\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;remove&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; T &amp;amp;value)&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; it &amp;#61; _list.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            it &amp;#61; &lt;span class=\"hljs-built_in\"&gt;find_if&lt;/span&gt;(it, _list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(), [value](&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; &amp;amp;v)\n                         { &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; v.first &amp;#61;&amp;#61; value; });\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (it &amp;#61;&amp;#61; _list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;())\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            it &amp;#61; &lt;span class=\"hljs-built_in\"&gt;erase&lt;/span&gt;(it);\n        }\n    }\n\n    &lt;span class=\"hljs-function\"&gt;value_type &lt;span class=\"hljs-title\"&gt;front&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; _list.&lt;span class=\"hljs-built_in\"&gt;front&lt;/span&gt;();\n    }\n\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;init&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n    &lt;/span&gt;{\n        _high_end &amp;#61; std::&lt;span class=\"hljs-built_in\"&gt;find_if&lt;/span&gt;(_list.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;(), _list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(), [](&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; &amp;amp;v)\n                                 { &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; v.second !&amp;#61; Priority::High; });\n        _medium_end &amp;#61; std::&lt;span class=\"hljs-built_in\"&gt;find_if&lt;/span&gt;(_high_end, _list.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(), [](&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; &amp;amp;v)\n                                   { &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; v.second !&amp;#61; Priority::Medium; });\n    }\n\n    list_type _list;\n    iterator _high_end;\n    iterator _medium_end;\n};\n\nstd::ostream &amp;amp;&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt;&amp;lt;&amp;lt;(std::ostream &amp;amp;os, Priority priority)\n{\n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (priority)\n    {\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::Low:\n        os &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Low&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::Medium:\n        os &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Medium&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; Priority::High:\n        os &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;High&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; os;\n}\n\n&lt;span class=\"hljs-keyword\"&gt;template&lt;/span&gt; &amp;lt;&lt;span class=\"hljs-keyword\"&gt;typename&lt;/span&gt; T, &lt;span class=\"hljs-keyword\"&gt;typename&lt;/span&gt; List&amp;gt;\nstd::ostream &amp;amp;&lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt;&amp;lt;&amp;lt;(std::ostream &amp;amp;os, &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; PriorityQueue&amp;lt;T, List&amp;gt; &amp;amp;q)\n{\n    os &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;{ &amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; priority : {Priority::High, Priority::Medium, Priority::Low})\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (priority !&amp;#61; Priority::High)\n            os &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;, &amp;#34;&lt;/span&gt;;\n        os &amp;lt;&amp;lt; priority &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;: [&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; it &amp;#61; q.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;(priority); it !&amp;#61; q.&lt;span class=\"hljs-built_in\"&gt;end&lt;/span&gt;(priority); &amp;#43;&amp;#43;it)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (it !&amp;#61; q.&lt;span class=\"hljs-built_in\"&gt;begin&lt;/span&gt;(priority))\n                os &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;, &amp;#34;&lt;/span&gt;;\n            os &amp;lt;&amp;lt; it-&amp;gt;first;\n        }\n        os &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;]&amp;#34;&lt;/span&gt;;\n    }\n    os &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;}&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; os;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    PriorityQueue&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; q &amp;#61; {&lt;!-- --&gt;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, Priority::Low}, {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, Priority::Medium}, {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, Priority::High}, {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;, Priority::High}, {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, Priority::Medium}, {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;, Priority::Low}};\n    std::cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;q &amp;#61; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; q &amp;lt;&amp;lt; std::endl;\n\n    PriorityQueue&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; p1 &amp;#61; q;\n    std::cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;after p1 &amp;#61; q:\\n&amp;#34;&lt;/span&gt;;\n    std::cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;p1 &amp;#61; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; p1 &amp;lt;&amp;lt; std::endl;\n\n    PriorityQueue&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; p2 &amp;#61; std::&lt;span class=\"hljs-built_in\"&gt;move&lt;/span&gt;(p1);\n    std::cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;after p2 &amp;#61; std::move(p1):\\n&amp;#34;&lt;/span&gt;;\n    std::cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;p2 &amp;#61; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; p2 &amp;lt;&amp;lt; std::endl;\n    std::cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;p1 &amp;#61; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; p1 &amp;lt;&amp;lt; std::endl;\n\n    q.&lt;span class=\"hljs-built_in\"&gt;insert&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, Priority::High);\n    std::cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;after q.insert(5, Priority::Hight):\\n&amp;#34;&lt;/span&gt;;\n    std::cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;q &amp;#61; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; q &amp;lt;&amp;lt; std::endl;\n\n    q.&lt;span class=\"hljs-built_in\"&gt;remove&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;);\n    std::cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;after q.remove(5):\\n&amp;#34;&lt;/span&gt;;\n    std::cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;q &amp;#61; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; q &amp;lt;&amp;lt; std::endl;\n\n    std::cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;q.front(): {&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; q.&lt;span class=\"hljs-built_in\"&gt;front&lt;/span&gt;().first &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; q.&lt;span class=\"hljs-built_in\"&gt;front&lt;/span&gt;().second &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;}&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;$ g&amp;#43;&amp;#43; -Wall -std&amp;#61;c&amp;#43;&amp;#43;&lt;span class=\"hljs-number\"&gt;17&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.cpp&lt;/span&gt;\n$ ./&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.out&lt;/span&gt;\n&lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt; &amp;#61; { High: &lt;span class=\"hljs-selector-attr\"&gt;[3, 4]&lt;/span&gt;, Medium: &lt;span class=\"hljs-selector-attr\"&gt;[2, 5]&lt;/span&gt;, Low: &lt;span class=\"hljs-selector-attr\"&gt;[1, 6]&lt;/span&gt;}\nafter p1 &amp;#61; &lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt;:\np1 &amp;#61; { High: &lt;span class=\"hljs-selector-attr\"&gt;[3, 4]&lt;/span&gt;, Medium: &lt;span class=\"hljs-selector-attr\"&gt;[2, 5]&lt;/span&gt;, Low: &lt;span class=\"hljs-selector-attr\"&gt;[1, 6]&lt;/span&gt;}\nafter p2 &amp;#61; std::move(p1):\np2 &amp;#61; { High: &lt;span class=\"hljs-selector-attr\"&gt;[3, 4]&lt;/span&gt;, Medium: &lt;span class=\"hljs-selector-attr\"&gt;[2, 5]&lt;/span&gt;, Low: &lt;span class=\"hljs-selector-attr\"&gt;[1, 6]&lt;/span&gt;}\np1 &amp;#61; { High: &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;, Medium: &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;, Low: &lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;}\nafter &lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.insert&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;, Priority::Hight):\n&lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt; &amp;#61; { High: &lt;span class=\"hljs-selector-attr\"&gt;[3, 4, 5]&lt;/span&gt;, Medium: &lt;span class=\"hljs-selector-attr\"&gt;[2, 5]&lt;/span&gt;, Low: &lt;span class=\"hljs-selector-attr\"&gt;[1, 6]&lt;/span&gt;}\nafter &lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.remove&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;):\n&lt;span class=\"hljs-selector-tag\"&gt;q&lt;/span&gt; &amp;#61; { High: &lt;span class=\"hljs-selector-attr\"&gt;[3, 4]&lt;/span&gt;, Medium: &lt;span class=\"hljs-selector-attr\"&gt;[2]&lt;/span&gt;, Low: &lt;span class=\"hljs-selector-attr\"&gt;[1, 6]&lt;/span&gt;}\nfront: {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, High}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["创建一个基于单向线性列表的 \"具有整数优先级的队列\"。", ["当一个元素被插入时，它的优先级被设置，有三个固定值：低、中、高。一旦被放入队列，元素的优先级就不能改变。", "如果没有具有任何优先级的元素，那么指向尾部的相应指针必须为空。", "无参数的构造函数，复制，移动。", "  复制和移动分配运算符。", "确定队列中具有特定优先级的元素的数量和元素的总数量。", "检查是否有空队列。", "插入一个具有价值和优先权的元素。", "从队列中删除一个元素。", "获得关于队列头部元素的优先级和价值的信息。", "  通过菜单实现的头部程序应检查上述所有方法的操作。"]], "Tag": "程序设计"}
{"Answer": "楼上说的a++是一个未定义行为的结论不知道是怎么来的，a++自增运算符是C/C++语言,以及java语言中都明确定义的语法怎么成了未定义行为了？楼上引用\r\n的链接中的用法确实是未定义的行为取决于编译器的实现。原因是链接中的表达式都是在同一个表达式中多次使用自增运算符。但是a++本身并不是未定义的行为。\r\n回到楼主的问题，楼主这是一个逗号表达式，逗号表达式的计算原则是从左到右计算每个表达式的值，整个表达式的值是最后一个逗号表达式的值，\r\n所以计算顺序是首先给a赋值为3，然后a自加1，a的值变为4，然后a+5的结果为9，但是这个9没有赋值给任何变量，所以这个值丢掉了，然后计算a*6\r\n就是4*6=24，这个是最后一个逗号表达式，所以作为整个表达式的值24。讲解C语言的书上都会讲解这个逗号表达式，楼主多看看书就可以理解了", "Konwledge_Point": "优先级", "Question": ["c语言 请问a=3,a++,a+5,a*6是怎么计算的，结果是多少，优先级是怎样的？", ["逗号表达式的优先级是从左到右吗?", "\n答案是24，求各位大佬帮忙解答一下。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1应该是 &amp;#43;&amp;#43; 和 -- 这个使用分两种情况&amp;#xff1a;1、&amp;#43;&amp;#43;和--在前会先进行自增或自减再进行其他运算&amp;#xff1b;2、&amp;#43;&amp;#43;和--在前会先进行其他运算再进行自增或自减&lt;br /&gt;其他的没什么问题&amp;#xff0c;使用时候不确定的话就用括号就好了&amp;#xff0c;括号肯定是最优先的&lt;br /&gt;希望对你有帮助&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["C语言中怎么理解计算符优先级呢？", ["\n", "\n", "C语言中怎么理解计算符优先级呢？为什么一定要30个字呢？正文长度小于30个字符，请进行修改！"]], "Tag": "程序设计"}
{"Answer": "请参考这个 http://www.cnblogs.com/qieqing/articles/1224085.html", "Konwledge_Point": "优先级", "Question": ["javascript设置的css优先级是什么？是否相当于内联样式？", ["javascript设置的css优先级是什么？是否相当于内联样式？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;如有帮助&amp;#xff0c;请采纳&amp;#xff0c;谢谢&amp;#xff01;&lt;br /&gt;在where语句中&amp;#xff0c;AND和OR可以同时使用&amp;#xff0c;但AND的优先级要高于OR&lt;br /&gt;如&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;condition1 OR condition2 AND condition3&lt;br /&gt;实际执行顺序是&lt;/p&gt;\n&lt;p&gt;condition1 OR (condition2 AND condition3)&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["oracle数据库 优先等级的执行问题", ["想问一下SQL语句的执行顺序（尽量将详细清楚点），特别是OR AND那两行，谁和谁and,谁和谁or，好晕", "要是能说一下这种类型的语句的通用的优先等级的执行顺序就更好了，谢谢！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代表减号&amp;#xff0c;不代表负号。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["-是代表负号还是减号？运算优先级理解", ["这段代码中n-2", "i怎么运算的，如果按照优先级的话不是先2", "i吗？那这个n-怎么理解，求解", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;c语言中没有哦&amp;#xff0c;c&amp;#43;&amp;#43;中才有&amp;#xff0c;之所以c&amp;#43;&amp;#43;是两个加号&amp;#xff0c;就是因为多了模板和对象&amp;#xff0c;c语言中没有这些模板&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["c语言有没有栈和优先级队列的头文件？", ["c语言中有没有自带的栈或者优先级队列的头文件，像c++的queue一样？", "我也是服了百度了，现在百度什么都是一样没什么作用的东西。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;基于Monster 组和GPT的调写&amp;#xff1a;&lt;br /&gt;是的&amp;#xff0c;括号可以提升运算符的优先级&amp;#xff0c;但不能改变运算符的结合性。在Java中&amp;#xff0c;括号的作用是将其中的表达式优先计算&amp;#xff0c;可以提高该表达式的优先级&amp;#xff0c;但并不会影响该表达式的结合性。所以&amp;#xff0c;对于表达式&amp;#34;5&amp;#43;5&amp;#34;&amp;#43;5&amp;#43;5&amp;#xff0c;由于加法运算符的结合性是从左到右&amp;#xff0c;所以首先计算&amp;#34;5&amp;#43;5&amp;#34;得到字符串&amp;#34;5&amp;#43;5&amp;#34;&amp;#xff0c;然后将该字符串与5相加得到字符串&amp;#34;5&amp;#43;5&amp;#34;&amp;#43;5&amp;#xff0c;再将结果字符串&amp;#34;5&amp;#43;5&amp;#34;&amp;#43;5与5相加得到最终结果&amp;#34;5&amp;#43;555&amp;#34;。&lt;/p&gt;\n&lt;p&gt;而在表达式&amp;#34;5&amp;#43;5&amp;#34;&amp;#43;(5&amp;#43;5)中&amp;#xff0c;括号中的表达式(5&amp;#43;5)被优先计算&amp;#xff0c;结果为10&amp;#xff0c;再将结果10与字符串&amp;#34;5&amp;#43;5&amp;#34;相加得到字符串&amp;#34;5&amp;#43;510&amp;#34;。&lt;/p&gt;\n&lt;p&gt;在表达式5&amp;#43;5&amp;#43;(&amp;#34;5&amp;#43;5&amp;#34;)中&amp;#xff0c;首先进行5&amp;#43;5的加法运算&amp;#xff0c;得到10&amp;#xff0c;再将结果10与字符串&amp;#34;5&amp;#43;5&amp;#34;相加得到字符串&amp;#34;105&amp;#43;5&amp;#34;。&lt;/p&gt;\n&lt;p&gt;因此&amp;#xff0c;括号只能提升运算符的优先级&amp;#xff0c;不能改变运算符的结合性。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["Java中括号是不是只能提示算数优先级", ["System.out.println(\"5+5\"+5+5); 结果是5+555", "System.out.println(\"5+5\"+(5+5));结果是105+5", "System.out.println(5+5+(\"5+5\"));结果是105+5  括号不能让字符串优先触发作用,那是不是括号只能提升运算优先级?"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;a id=\"textarea_1663289151770_1663289714046_0\" target=\"_blank\"&gt;&lt;span class=\"md_link_url\"&gt;http://t.zoukankan.com/kuangke-p-9621523.html&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["linux线程调度 和 优先级的问题", ["我创建了两个线程，一个线程不断输出A，另一个线程不断输出B，两个线程同时运行时AB间断打印，现在我想要通过修改 线程调度策略 以及线程的优先级来达到 两个线程都被创建后只有一个线程占据 CPU资源，我的代码如下:", "设置线程的调度策略为FIFO并且设置不同的优先级，但是并不能达到效果。", "\n", "\n#", "include", "<stdio.h>\n#", "include", "<pthread.h>\n#", "include", "<sched.h>\n#", "include", "<unistd.h>\n\nvoid* thread(void *arg) {\n    ", "char", " ch = *(", "char", " *)arg;\n    \n    ", "while", "(", "1", ") {\n        printf(", "\"%c\"", ",ch);\n        fflush(stdout);\n        ", "//sleep(1);", "\n    }\n}\n\n", "int", " main(", "int", " argc, ", "char", " *argv", "[]", ") {\n    pthread_t t1, t2;\n    ", "char", " ch1 = ", "'A'", ", ch2 = ", "'B'", ";\n    pthread_attr_t attr;\n    ", "struct", " sched_param sch;\n\n    pthread", "_attr_init(&", "attr", ")", ";\n    pthread", "_attr_getschedparam(&", "attr", ", &", "sch", ")", ";\n    \n    sch.sched_priority = ", "10", ";\n    pthread", "_attr_setschedpolicy(&", "attr", ", SCHED_FIFO)", ";\n    pthread", "_attr_setschedparam(&", "attr", ", &", "sch", ")", ";\n    pthread", "_create(&", "t1", ", &", "attr", ", ", "thread", ", (", "void", "*", ")", "&ch1);\n    \n    sch.sched_priority = ", "10", ";\n    pthread", "_attr_setschedparam(&", "attr", ", &", "sch", ")", ";\n    pthread", "_create(&", "t2", ", &", "attr", ", ", "thread", ", (", "void", "*", ")", "&ch2);\n\n    pthread", "_join(", "t1", ", NULL)", ";\n    pthread", "_join(", "t2", ", NULL)", ";\n\n    return ", "0", ";\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;b&amp;#61;a&amp;#43;&amp;#43;&amp;#xff0c;是先执行b&amp;#61;a&amp;#xff0c;然后a再加1&amp;#xff0c;这是后&amp;#43;&amp;#43;的特性&amp;#xff0c;并不是&amp;#43;&amp;#43;比&amp;#61;优先级低&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["b = a++自增运算符和优先级的问题", ["问题遇到的现象和发生背景", "\n", "b = a++自增运算符和优先级的问题，具体疑问我写在下方代码中", "\n", "遇到的现象和发生背景，请写出第一个错误信息", "\n", "用代码块功能插入代码，请勿粘贴截图。 不用代码块回答率下降 50%", "\n", "#", "include", " ", "<stdio.h>", "\n\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " a = ", "0", ", b;\n    b = a++;  ", "//++比=优先级高，应该i先自增再赋值给b，但是结果是错的", "\n\n         ", "// 若是按照自增运算符概念理解，就是先将a赋给b，a再自增，结果是对的", "\n\n         ", "//为什么我的这两种理解不同？哪里错了吗？", "\n\n}       \n", "\n", "运行结果及详细报错内容", "\n", "我的解答思路和尝试过的方法，不写自己思路的，回答率下降 60%", "\n", "我想要达到的结果，如果你需要快速回答，请尝试 “付费悬赏”"]], "Tag": "程序设计"}
{"Answer": "作业的等待时间长和作业来的早是一回事。因为来的早，所以等的长。", "Konwledge_Point": "优先级", "Question": ["操作系统“先来先服务”算法中为什么说作业的等待时间越长，其优先级越高啊", ["先来先服务（FCFS）给我的感觉就是，那个作业来的早（就绪的早）我就先执行那个，可是这样不应该是等待时间短优先级高嘛？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;乘法运算符*、除法运算符/、求余运算符%都是第3优先级的&lt;br /&gt;&lt;a href=\"https://baijiahao.baidu.com/s?id&amp;#61;1726892702802305171&amp;amp;wfr&amp;#61;spider&amp;amp;for&amp;#61;pc\" id=\"textarea_1660032788255_1660032889463_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://baijiahao.baidu.com/s?id&amp;#61;1726892702802305171&amp;amp;wfr&amp;#61;spider&amp;amp;for&amp;#61;pc&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于5*4%3*2优先级问题求解", ["5×4%3×2", "乘的优先级高于取余，所以我就想着这个跟5×4+3×2算的规则是一样的，即20＋6", "于是套用，即20%6=2，", "但是其实答案是4", "为什么，求解"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;有个问题&amp;#xff1a;如何分组&amp;#xff1f; 按什么字段分组&amp;#xff1f;&lt;/p&gt;\n&lt;p&gt;大概思路&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;读入一组数据\n按优先级排序\n判断优先级&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; 的承运商&amp;#xff0c;  如为K10 ,  \n       结束\n不是K10 :\n     查找&lt;span class=\"hljs-type\"&gt;K12&lt;/span&gt; &amp;#xff0c; 移动到第&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;位&amp;#xff0c; 优先级改为&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n      遍历剩余数据依次给列表其他承运商赋优先级\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["至今无人能解答！有多组数据，每组数据为相同城市和快递重量的承运商优先级的排序，需对个别组的承运商优先级别进行修改", ["问题遇到的现象和发生背景", "\n", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "用python的循环语句和条件判断语句尝试过，但由于python使用不精通，没做成功", "\n", "我想要达到的结果", "\n", "当优先级为1，承运商编码为K10，则本组的优先级不变；如优先级为1，承运商编码不为K10，则本组承运商编码K12的优先级改为1，其余承运商的优先级顺延即可。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;可参考&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/weixin_39801446/article/details/81097474\" id=\"textarea_1663984994845_1663985119624_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_39801446/article/details/81097474&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["php里&&和!=的优先级哪个高？", ["问题遇到的现象和发生背景", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n\n\n", "我想要达到的结果", "\n", "php里&&和!=的优先级哪个高？"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;No. The ID comes from the database, so you must perform &lt;em&gt;some&lt;/em&gt; query before you can get it.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["Php变量优先", ["\n\n", "I've one issue about php variable. Let's example:", "\n\n", "This is my while loop which i want to edit user contact list. ", "\n\n", "$sql = mysql_query(\"SELECT * FROM addcontacts WHERE name LIKE 'a%' AND uname = \n'$uname'\");\n\nwhile($re = mysql_fetch_array($sql))\n{\n$id = (int) $re['id'];  \n$name = mysql_real_escape_string(htmlspecialchars(trim($re['name'])));\n$surname = mysql_real_escape_string(htmlspecialchars(trim($re['surename'])));\n$group = mysql_real_escape_string(htmlspecialchars(trim($re['group'])));\n$email =  mysql_real_escape_string(htmlspecialchars(trim($re['email'])));\n$skype = mysql_real_escape_string(htmlspecialchars(trim($re['skypeid']))); \n$facebook = mysql_real_escape_string(htmlspecialchars(trim($re['facelink']))); \n$twitter = mysql_real_escape_string(htmlspecialchars(trim($re['twitterlink'])));\n$aim = mysql_real_escape_string(htmlspecialchars(trim($re['aimid'])));\n$myspace = mysql_real_escape_string(htmlspecialchars(trim($re['myspacelink'])));\n$notes = mysql_real_escape_string(htmlspecialchars(trim($re['specialnote'])));\n\nmore code......\n?>\n", "\n\n", "So my questions is, Is there anyway to access this ", "$id", " before ", "$sql", " query ? I need this ", "$id", " value to the top of the form because of there are a button name: Edit Contacts. So if i get this ", "$id", " value then i can edit user contact list.", "\n    "]], "Tag": "程序设计"}
{"Answer": "不用这两个属性，那可以在form resize事件里通过设置size location控制，想怎么移就怎么移", "Konwledge_Point": "优先级", "Question": ["C#panel中有三个子panel，3列，怎么设他们的靠左优先级", ["不要设Anchor和dock，都靠左，怎么安排优先级？？？？？？？？？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/79327045836612.jpg\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于#优先级#的问题，如何解决？", ["\n#", "include", " <stdio.h>\n#define  PF printf\n", "int", " main", "()", "{\n    double  a,b,c;\n    ", "PF(", "\"比较三位同学的分数大小，请输入三位同学的分数\"", ")", ";\n    scanf(", "\"%lf%lf%lf\"", ",&a,&b,&c);\n    ", "PF(", "\"max=%lf\"", ",", "a", ">", "b", "?", "a", ":", "b", "&&", "b", ">", "c", "?", "b", ":", "c", ")", ";\n    \n    \n    \n    \n}\n", "\n", "问题1.看不懂a>b?a:b&&b>c?b:c这个是怎么比出大小的，2.&&优先级高，不应该是先算b&&b吗？3.计算顺序是咋样的，能不能清楚的讲出来"]], "Tag": "程序设计"}
{"Answer": "C编译器在处理带&amp;&amp;指令的时候是很聪明的，他可不会像人一样把两边的值都算出来再给结果，事实上他会先判断&amp;&amp;运算符的左边表达式,一旦该值不为真，他就立刻判断结果为零，不会进行接下来的操作，所以该题编译器在看到3&lt;1不为真时\r\n，就会得出为0，跳过右边运算的。", "Konwledge_Point": "优先级", "Question": ["关于表达式   a<1&&--a>1  的运算优先级问题", ["原题：设int a =3;则表达式a < 1&&-- a>1的运算结果和a的值分别是（）", "\n                    A.0和2      B.0he 3   C.1he2   D.1he3", "\n\n", "虽然我知道&&前面部分是错的，&&后面部分就不运行，但是--优先级是表达式里最高的，是不是先得把--a计算了，a的值为2，然后2< 1&&2>1，表达式：值0&&不考虑，最后答案不应噶是A嘛，我下载来的试题答案是B。", "\n\n", "我的想法是错的吗。。。\n"]], "Tag": "程序设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;给你找了一篇非常好的博客&amp;#xff0c;你可以看看是否有帮助&amp;#xff0c;链接&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/i_Crave/article/details/119860749\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;关于unsigned char的取反操作&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "优先级", "Question": ["为什么这里的char使用unsigned char？另，a>b--为什么不考虑优先级？", ["为什么这里的char使用unsigned char？另，a>b--为什么不考虑优先级？"]], "Tag": "程序设计"}
{"Answer": "从CSS代码存放位置看权重优先级：内嵌样式 &gt; 内部样式表 &gt; 外联样式表。其实这个基本可以忽视之，大部分情况下CSS代码都是使用外联样式表。\r\n\r\n从样式选择器看权重优先级：important &gt; 内嵌样式 &gt; ID &gt; 类 &gt; 标签 | 伪类 | 属性选择 &gt; 伪对象 &gt; 继承 &gt; 通配符。\r\n\r\nimportant的权重为1,0,0,0\r\nID的权重为0,1,0,0\r\n类的权重为0,0,1,0\r\n标签的权重为0,0,0,1\r\n伪类的权重为0,0,1,0\r\n属性的权重为0,0,1,0\r\n伪对象的权重为0,0,0,1\r\n通配符的权重为0,0,0,0\r\n(A)  .main ul li{background:white;}  /*0,0,1,2*/ /*= 12*/\r\n(B) .on{background:blue;}   /*0,0,1,0*/   /*= 10*/\r\n(C) #on{background:blue;}  /*0,1,0,0*/  /*= 100*/\r\n所以优先级：C&gt;A&gt;B\r\n\r\n参考文章如下：\r\n1、http://www.cnblogs.com/52css/archive/2012/06/07/2540550.html\r\nhttp://wenku.baidu.com/link?url=SxULPRpoqoAEdTSuKxxlJqCDecVogWdRc3Hp_RxFkht4tsIi_mve1omPaxA4QQ4T1jUop8Ms7WPx0trA6jrf2SCVpT47beSmiPoV_H5IDb_", "Konwledge_Point": "优先级", "Question": ["CSS优先级的小问题,谢谢了", ["<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<style>\n    .main{width:200px; height:200px; background:black;}\n    .main ul li{background:white;}\n    .on{background:blue;}\n</style>\n<body>\n<div class=\"main\">\n    <ul>\n        <li class=\"on\">第一行文字的颜色为什么不是blue</li>\n        <li>第一行文字</li>\n        <li>第一行文字</li>\n        <li>第一行文字</li>\n    </ul>\n</div>\n</body>\n</html>\n\n", "\n\n", "第一行文字的颜色为什么不是blue?", "\n明明给第一行的li定义class了啊", "\n\n", "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<style>\n    .main{width:200px; height:200px; background:black;}\n    .main ul li{background:white;}\n    #on{background:blue;}\n</style>\n<body>\n<div class=\"main\">\n    <ul>\n        <li id=\"on\">第一行文字的颜色是blue了</li>\n        <li>第一行文字</li>\n        <li>第一行文字</li>\n        <li>第一行文字</li>\n    </ul>\n</div>\n</body>\n</html>\n\n", "\n\n", "用id选择器就好了", "\n\n", "难道.main ul li 的优先级大于 class='on' ??"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-sql\"&gt;select * &lt;span class=\"hljs-built_in\"&gt;from&lt;/span&gt; t_table_a\nwhere (&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;.dw is &lt;span class=\"hljs-literal\"&gt;null&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;.dw&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;88888&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;.bj isnull &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;.bj&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;9999&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这个语句中&amp;#xff0c;t_table_a 这个是表名&amp;#xff0c;还是你想把t_table 设置别名 a&amp;#xff0c;如果是后后者应该是&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-sql\"&gt; select * &lt;span class=\"hljs-built_in\"&gt;from&lt;/span&gt;  t_table  &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;\nwhere (&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;.dw is &lt;span class=\"hljs-literal\"&gt;null&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;.dw&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;88888&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;and&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;.bj isnull &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;.bj&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;9999&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;否则你们后用 a.dw 是会报错的&amp;#xff0c;因为你没有表a 或者别名为 a的表&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["在oracle里where 后的优先级是怎么样的？", ["问题遇到的现象和发生背景", "\n", "在oracle里where 后的优先级是怎么样的？", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "select * from t_table_a a", "where (a.dw is null or a.dw='88888')", "and (a.bj isnull or a.bj='9999')", "\n", "运行结果及报错内容", "\n", "我想要的是先查出", "学院为 ‘8888’或者学院为空的", "数据再在", "这些数据中找班级为 ‘99999’ 或者班级为空", "的数据。请问各位我这个写法是否有错？？性能可以怎么提升 。谢谢(谢谢各位指正，已经改正表别名错误)"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;构造方法用错了&amp;#xff0c;你l放ambda的地方应该放functype而不是func本身&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;queue&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;vector&amp;gt;\n\nauto main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; -&amp;gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;\n{\n    std::priority_queue&amp;lt;std::pair&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;, std::vector&amp;lt;std::pair&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt;&amp;gt;,\n                        std::&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;bool&lt;/span&gt;(std::pair&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt; &amp;amp; map1,\n                                           std::pair&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;&amp;gt; &amp;amp; map2)&amp;gt;&amp;gt;\n    pri&lt;span class=\"hljs-constructor\"&gt;_que([](&lt;span class=\"hljs-params\"&gt;std&lt;/span&gt;::&lt;span class=\"hljs-params\"&gt;pair&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&amp;gt; &amp;amp;&lt;span class=\"hljs-params\"&gt;map1&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;std&lt;/span&gt;::&lt;span class=\"hljs-params\"&gt;pair&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&amp;gt; &amp;amp;&lt;span class=\"hljs-params\"&gt;map2&lt;/span&gt;)&lt;/span&gt; -&amp;gt; &lt;span class=\"hljs-built_in\"&gt;bool&lt;/span&gt; {\n        return map1.second &amp;gt; map2.second;\n    });\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["关于c++用lambda表达式自定义优先级队列出错，如何解决？", ["这样写,正确创建优先级队列", "\n", "class", " ", "mycomparison", " {\n    ", "public", ":\n        ", "bool", " ", "operator", "()", "(", "const", " pair<", "int", ", ", "int", ">& lhs, ", "const", " pair<", "int", ", ", "int", ">& rhs)", " ", "{\n            ", "return", " lhs.second > rhs.second;\n        }\n    };\n\n    ", "vector<", "int", "> ", "topKFrequent", "(vector<", "int", ">& nums, ", "int", " k)", " ", "{\n        priority_queue<pair<", "int", ",", "int", ">,vector<pair<", "int", ",", "int", ">>,mycomparison>pri_que;\n", "\n", "这样写 编译器报错,我的lambda表达式写错了吗?", "\n", "        priority_queue<pair<", "int", ",", "int", ">,vector<pair<", "int", ",", "int", ">>,[](pair<", "int", ",", "int", ">&map1,pair<", "int", ",", "int", ">&map2)\n        {", "return", " map1.second>map2.second;} >pri_que;\n", "\n", "错误信息:", "\n", " error: a lambda expression cannot appear in ", "this", " context\n priority_queue<pair<", "int", ",", "int", ">,vector<pair<", "int", ",", "int", ">>,[](pair<", "int", ",", "int", ">&map1,pair<", "int", ",", "int", ">&map2)\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;在同等使用&lt;code class=\"language-javascript\"&gt;!important&lt;/code&gt;的情况下&amp;#xff0c;内联优先级最高&amp;#xff0c;其他选择器堆叠再多也打不过。想实现这个需求&amp;#xff0c;可以试试删除dom属性style&amp;#xff0c;这样可以去掉他的内联style&amp;#xff0c;删之前可以先获取内容复制一遍&amp;#xff0c;然后修改其中的内容&amp;#xff0c;然后再设置style回去&amp;#xff0c;感觉可以这样&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["油猴插件，修改笔记软件内置颜色，但是原颜色内联，且定义为!important，能否通过代码修改优先级？", ["油猴插件，修改笔记软件内置颜色，但是原颜色为内联且定义为!important，能否通过代码修改优先级？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;内部小区域通过传入的事件对象阻止冒泡到父元素就行&amp;#xff0c;示例如下&amp;#xff0c;有帮助麻烦点个&lt;strong&gt;采纳【本回答右上角】&lt;/strong&gt;&amp;#xff0c;谢谢~~&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;div&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;id&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;div&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;v-on:click&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;outerclick&amp;#34;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        Block Outer\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;div&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;v-on:click&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;innerclick&amp;#34;&lt;/span&gt;&amp;gt;&lt;/span&gt;Block1&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        Block Outer\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"language-javascript\"&gt;\n    &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Vue&lt;/span&gt;({\n        &lt;span class=\"hljs-attr\"&gt;el&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;&amp;#39;#app&amp;#39;&lt;/span&gt;,\n        &lt;span class=\"hljs-attr\"&gt;methods&lt;/span&gt;: {\n            &lt;span class=\"hljs-title function_\"&gt;outerclick&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;e&lt;/span&gt;) { &lt;span class=\"hljs-title function_\"&gt;alert&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;outerclick&amp;#39;&lt;/span&gt;) },\n            &lt;span class=\"hljs-title function_\"&gt;innerclick&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;e&lt;/span&gt;) {\n                e.&lt;span class=\"hljs-title function_\"&gt;stopPropagation&lt;/span&gt;()\n                &lt;span class=\"hljs-title function_\"&gt;alert&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;innerclick&amp;#39;&lt;/span&gt;)\n            }\n        }\n    })\n&lt;/span&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["vue 点击的区域有两个元素分别绑定了不同事件，怎么设置触发事件的优先级？", ["vue 点击的区域有两个元素分别绑定了不同事件，怎么设置触发事件的优先级？", "也就是说，你想点击的区域很小，紧接着这个区域的还有一块很大的区域也绑定了事件，当点击的位置包含了这两个区域，，如何只触发其中一个区域而不触发另外一个区域，这两个区域是同级关系，不是父子关系"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I think you're mistaken about what's happening in your main method... I'm gonna break down what I think is going on for clarity&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func main() {\nc := make(chan int)\nquit := make(chan int) // make a couple channels\ngo func() {\n    for i := 0; i &amp;lt; 10; i++ {\n        fmt.Println(&amp;lt;-c) // blocked here in goroutine\n    }\n    quit &amp;lt;- 0\n}() // go func { ... }() - you're both writing this closure and invoking it as a goroutine\ntime.Sleep(2 * time.Second) // sleep for 2 seconds\nfibonacci(c, quit) // call fibonacci passing in the channels\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;so what's actually happened here is you've called this closure as a goroutine then wait 2 seconds during which your goroutine is still sitting in the body of the for loop waiting to receive on &lt;code&gt;c&lt;/code&gt;, you call &lt;code&gt;fibonacci&lt;/code&gt; which executes as you expect going into the for-select, at which point you keep hitting that code on every iteration of the loop &lt;code&gt;c &amp;lt;- x&lt;/code&gt; (it receives, i gets incremented, you receive again, next value until the loop is over due to i == 10). then you proceed to the next line and send on the quit channel, the select executes that condition and your program exits.&lt;/p&gt;\n\n&lt;p&gt;As far as what executes first the language spec says;&lt;/p&gt;\n\n&lt;p&gt;Execution of a \"select\" statement proceeds in several steps:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;1) For all the cases in the statement, the channel operands of receive\n  operations and the channel and right-hand-side expressions of send\n  statements are evaluated exactly once, in source order, upon entering\n  the \"select\" statement. The result is a set of channels to receive\n  from or send to, and the corresponding values to send. Any side\n  effects in that evaluation will occur irrespective of which (if any)\n  communication operation is selected to proceed. Expressions on the\n  left-hand side of a RecvStmt with a short variable declaration or\n  assignment are not yet evaluated. 2) If one or more of the\n  communications can proceed, a single one that can proceed is chosen\n  via a uniform pseudo-random selection. Otherwise, if there is a\n  default case, that case is chosen. If there is no default case, the\n  \"select\" statement blocks until at least one of the communications can\n  proceed. Unless the selected case is the default case, the respective\n  communication operation is executed. 3) If the selected case is a\n  RecvStmt with a short variable declaration or an assignment, the\n  left-hand side expressions are evaluated and the received value (or\n  values) are assigned. 4) The statement list of the selected case is\n  executed.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It's only psuedo random in race conditions, problem is you're not creating a race condition.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["例行检查：选择是否真的选择了随机情况？", ["\n\n", "Context: ", "https://tour.golang.org/concurrency/5", "\n\n", "Hello everyone, I am learning Go following the above link. ", "\n\n", "The description says \"It chooses one at random if multiple are ready.\"\nHowever, after making the main routine waiting for 2 second, before calling func fibonacci. The channels should be the following after 2 sec:\nc: 10 calls to get value from the channel\nquit: 0", "\n\n", "It looks to me both channels are ready. If \"It chooses one at random if multiple are ready\" is true, then there is a 50% chance that the first call on the case in fibonacci will get the 0 from the quit channel. However, it is not the case. All 10 numbers will always get printed out before quitting. Hence it does not look like the selection is random. Am I missing something?", "\n\n", "package main\n\nimport \"fmt\"\nimport \"time\"\n\nfunc fibonacci(c, quit chan int) {\n    x, y := 0, 1\n    for {\n        select {\n        case c <- x:\n            x, y = y, x+y\n        case <-quit:\n            fmt.Println(\"quit\")\n            return\n        }\n    }\n}\n\nfunc main() {\n    c := make(chan int)\n    quit := make(chan int)\n    go func() {\n        for i := 0; i < 10; i++ {\n            fmt.Println(<-c)\n        }\n        quit <- 0\n    }()\n    time.Sleep(2 * time.Second)\n    fibonacci(c, quit)\n}\n", "\n\n", "In addition, the next page:\n", "https://tour.golang.org/concurrency/6", " ", "\n\n", "It looks like the default code should print out either tick. or BOOM! at 500 milli second. However, only BOOM! is printed, always. If I changed the time in the default from 50 to 55, then both tick and BOOM get printed. Why is this? Does a After take precedence over a Tick in a select?", "\n\n", "package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    tick := time.Tick(100 * time.Millisecond)\n    boom := time.After(500 * time.Millisecond)\n    for {\n        select {\n        case <-tick:\n            fmt.Println(\"tick.\")\n        case <-boom:\n            fmt.Println(\"BOOM!\")\n            return\n        default:\n            fmt.Println(\"    .\")\n            time.Sleep(55 * time.Millisecond)\n        }\n    }\n}\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "没啥问题，相当于动态调整线程优先级。因为线程优先级是影响CPU调度优先级，你修改了，就可以影响下一次CPU的选择。所以可以启动再修改。", "Konwledge_Point": "优先级", "Question": ["疑问：线程启动之后再设置线程的优先级别，逻辑上是不是有问题？", ["正在学习多线程，有这样一个疑问：线程启动之后再设置线程的优先级别，逻辑上是不是有问题？求助大神们解答下。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;使用责任链模式&amp;#xff0c;实现不同渠道根据优先级排序&amp;#xff0c;根据优先级尝试不同渠道。如有失败自动切换到下一个优先级的渠道&amp;#xff0c;直到执行成功或者全部失败。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["怎么设计才能优雅的实现一种接口对接多种渠道，实现失败后自动根据规则或者优先级切换渠道达到所有渠道都尝试一遍", ["怎么设计才能优雅的实现一种接口对接多种渠道，实现失败后自动根据规则或者优先级切换渠道达到所有渠道都尝试一遍，最终失败才是真正失败？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;当然是不行&amp;#xff0c;否则干嘛还要这个。&lt;br /&gt;一个低优先级的任务正在使用一个临界资源&amp;#xff0c;还没释放&amp;#xff0c;然后一个高优先级的任务启动了&amp;#xff0c;它也要使用这个资源&amp;#xff0c;没有互斥量的话&amp;#xff0c;它直接就用了&amp;#xff0c;根本达不到保护效果。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于#stm32#的问题：在FreeRTOS系统中的互斥量和任务处理中，如果把任务的优先级提高或者降低可以等价是互斥量的处理方式吗", ["在FreeRTOS系统中的互斥量和任务处理中，如果把任务的优先级提高或者降低可以等价是互斥量的处理方式吗？"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; op,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt;(op)\n    {\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a&amp;#43;b;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a-b;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a*b;\n    &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;:\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(b!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a/b;\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;999999999&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; op[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;};\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a,b,c,d,e,result,num&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d%d%d%d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;b,&amp;amp;c,&amp;amp;d,&amp;amp;e);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;result);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;k&amp;#43;&amp;#43;)\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;m&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;m&amp;#43;&amp;#43;)\n                {\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(a,op[i],b),op[j],c),op[k],d),op[m],e) &amp;#61;&amp;#61; result)\n                    {\n                        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c %c %c %c\\n&amp;#34;&lt;/span&gt;,op[i],op[j],op[k],op[m]);\n                        num&amp;#43;&amp;#43;;\n                    }\n                }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(num&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;No solution&amp;#34;&lt;/span&gt;);\n      &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["运算符填空（不考虑优先级）", ["（C语言）运算符填空", "【问题描述】输入 5 个数与一个结果，设计程序在 5 个数中填入运算符（ +、 -、 *、 /）使其与结果相等，或回答做不到。5个数顺序固定，运算顺序固定为从左向右，不考虑运算符优先性。除法按整数除法来运算，保证有解的输入都是有唯一解的。", "【输入形式】5个整数a, b, c, d, e和一个结果整数result。0<a,b,c,d,e<50。", "【输出形式】依次输出4个运算符，以空格隔开；没有解时输出\"No solution\"。", "【样例输入1】", "\n", "1 1 1 1 1 5", "【样例输出1】", "\n", "+", "\n", "\n", "\n", "【样例输入2】", "\n", "2 3 4 5 6 -100", "【样例输出2】", "\n", "No solution"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;按这个题应该是这个意思,&lt;br /&gt;从左至右看,如果后面是括号就先算括号,如果后面是乘除就先算乘除,否则按顺序算&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["第27题:圆括号的优先级不是应该比其他的优先级高嘛，为什么先算了a+b", ["计算机二级里面的内容，已经看了好多，基本这种谁先算的问题一直不明白，哪位帮帮忙，计算机二级考试的我，真的好慌"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The correct order would be :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{{ floatVar|default(0)|number_format(3, '.','') }}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;default(0)&lt;/strong&gt; : first you ensure that floatVar has a default value (even if it's not defined)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;number_format(3, '.','')&lt;/strong&gt; : then you format it&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;however, this would print 0.000 if floatvar isn't defined.&lt;/p&gt;\n\n&lt;p&gt;if you want to do this in 1 line, you should consider creating a custom twig extension : &lt;a href=\"http://symfony.com/doc/current/cookbook/templating/twig_extension.html\" rel=\"nofollow\"&gt;http://symfony.com/doc/current/cookbook/templating/twig_extension.html&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;EDIT :\nFollowing @Pierre Olivier's answer, you should try :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{{ floatVar is defined ? floatVar|number_format(3, '.','') : '' }}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(&lt;code&gt;yourelement != null&lt;/code&gt; will raise an error if yourelement isn't defined)&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["Twig过滤器链接和优先级", ["\n\n", "I'm having diffculties trying to find the right syntax for a multiple Twig filter expression.", "\n\n", "I have a var called ", "floatVar", " which is not always defined.", "\n\n", "If it is defined, I would like to truncate this float to the third digit.\nIf it is not defined, I would like to set an empty string. ", "\n\n", "I'm having trouble finding the proper syntax:", "\n\n", "floatVar|number_format(3, '.','')|default('') // generates a Twig_Error_Runtime exception\n\nfloatVar|default('')|number_format(3, '.','') // output \"0\" in every case\n\n(floatVar|number_format(3, '.',''))|default('') // generates a Twig_Error_Runtime exception\n", "\n\n", "Could somebody point me in the right direction ? Is there a way to put paranthesis to explictly express the priority ?\nAny help or link to a related topic would be much appreciated.", "\n\n", "Have a good day.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;menu的display设置为mone是menu整个元素隐藏&amp;#xff0c;包括menu元素的子元素a标签也一起隐藏了&amp;#xff0c;&lt;/p&gt;\n&lt;p&gt;父元素用display&amp;#xff1a;mone隐藏&amp;#xff0c;子元素必然是也一起隐藏&amp;#xff0c;不论子元素display的值是什么。&lt;br /&gt;就算子元素的display的值为block也会一起隐藏。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;对于css选择符优先级的问题&amp;#xff1a;&lt;br /&gt;只有用不同的css选择符对&lt;strong&gt;同一个元素&lt;/strong&gt;的同一属性设置不同的值时才有优先级的问题。&lt;/p&gt;\n&lt;p&gt;父元素menu与子元素a不是&lt;strong&gt;同一个元素&lt;/strong&gt;。所以这和css选择符的优先级没有关系。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于web前端优先级的疑问", ["如图。图中menu的display设置为mone后它整个元素就不见了，但是menu的a标签的display的值为block啊，按道理a标签的权重应该比menu大吧，为什么也会被隐藏呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;#include&amp;lt;stdio.h&amp;gt;&lt;br /&gt;int main()&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    int j,i[5];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    int sign;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    int result;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    int count&amp;#61;0;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    int num[6];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    int left,right;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    char oper[5]&amp;#61;{&amp;#39; &amp;#39;,&amp;#39;&amp;#43;&amp;#39;,&amp;#39;-&amp;#39;,&amp;#39;*&amp;#39;,&amp;#39;/&amp;#39;};&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for(j&amp;#61;1;j&amp;lt;&amp;#61;5;j&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        scanf(&amp;#34;%d&amp;#34;,&amp;amp;num[j]);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        scanf(&amp;#34;%d&amp;#34;,&amp;amp;result);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for(i[1]&amp;#61;1;i[1]&amp;lt;&amp;#61;4;i[1]&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        if((i[1]&amp;lt;4)||(num[2]!&amp;#61;0))&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            for(i[2]&amp;#61;1;i[2]&amp;lt;&amp;#61;4;i[2]&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                if((i[2]&amp;lt;4)||(num[3]!&amp;#61;0))&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                    for(i[3]&amp;#61;1;i[3]&amp;lt;&amp;#61;4;i[3]&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                        if((i[3]&amp;lt;4)||(num[4]!&amp;#61;0))&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                            {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                                for(i[4]&amp;#61;1;i[4]&amp;lt;&amp;#61;4;i[4]&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                                    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                                        if((i[4]&amp;lt;4)||(num[5]!&amp;#61;0))&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                                        {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                                            left&amp;#61;0;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                                            right&amp;#61;num[1];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                                            sign&amp;#61;1;&lt;/span&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;                                        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;1;j&amp;lt;&amp;#61;4;j&amp;#43;&amp;#43;)\n                                            {\n                                                switch(oper[i[j]])\n                                                {\n                                                    case &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n                                                    &lt;span class=\"hljs-attribute\"&gt;left&lt;/span&gt;&amp;#61;left&amp;#43;sign*right;\n                                                    &lt;span class=\"hljs-attribute\"&gt;sign&lt;/span&gt;&amp;#61;1;\n                                                    &lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;num[j&amp;#43;1];\n                                                    break;\n                                                    case &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n                                                    &lt;span class=\"hljs-attribute\"&gt;left&lt;/span&gt;&amp;#61;left&amp;#43;sign*right;\n                                                    &lt;span class=\"hljs-attribute\"&gt;sign&lt;/span&gt;&amp;#61;-1;\n                                                    &lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;num[j&amp;#43;1];\n                                                    break;\n                                                    case &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n                                                    &lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;right*num[j&amp;#43;1];\n                                                    break;\n                                                    case &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n                                                    &lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;right/num[j&amp;#43;1];\n                                                    break;\n                                                }\n                                             }\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(left&amp;#43;sign*&lt;span class=\"hljs-attribute\"&gt;right&lt;/span&gt;&amp;#61;&amp;#61;result)\n                    {\n                        count&amp;#43;&amp;#43;;\n                        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;1;j&amp;lt;&amp;#61;4;j&amp;#43;&amp;#43;)  \n                            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c &amp;#34;&lt;/span&gt;,oper[i[j]]);\n                    }\n                                    }\n                                }\n                        }\n                }\n            }\n        }\n    }\n}\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;count&lt;/span&gt;&amp;#61;&amp;#61;0)\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;No solution&amp;#34;&lt;/span&gt;);\n    getchar();\n    return 0;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;}&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["C语言运算符填空（考虑优先级）", ["用C语言运算符填空plus", "【问题描述】输入 5 个数与一个结果，设计程序在 5 个数中填入运算符（ +、 -、 *、 /）使其与结果相等，或回答做不到。5个数顺序固定，需要考虑运算符优先性。除法按整数除法来运算，保证有解的输入都是有唯一解的。", "\n", "与“运算符填空”一题的区别只在于需要考虑运算符优先性。\n", "\n", "【输入形式】5个整数a, b, c, d, e和一个结果整数result。0<a,b,c,d,e<50。", "【输出形式】依次输出4个运算符，以空格隔开；没有解时输出\"No solution\"。", "\n", "【样例输入】", "\n", "1 3 5 7 9 72", "【样例输出】", "\n", "*", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你可能记错了&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;*&amp;#61;c&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; // 等于a &amp;#61; a*(c&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这是乘后赋值&amp;#xff0c;从右到左的。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["按优先级算为什么不对啊", [" a=3,c=2;", "a*=c+1;", "结果为9"]], "Tag": "程序设计"}
{"Answer": "运算符优先级&amp;&amp;高于||。\r\n另外 ! &gt; &amp;&amp; &gt; ||", "Konwledge_Point": "优先级", "Question": ["c语言&&和‖的优先级问题", ["如果a‖b&c，先算前面的还是后面的，如果是前面的，那为啥&&的比‖高？谢谢各位大神了。"]], "Tag": "程序设计"}
{"Answer": "先算加急的啊，就拿今天来说，送货日期是今天的加急件先送， 然后再排那些常规的。", "Konwledge_Point": "优先级", "Question": ["怎样根据优先级重新排列数据？", ["1.现在我要送一批货物，计算出来送货日期。", "\n2.几号送货是根据一定的规则算出来的。", "\n3.有的货物需要加急送，而且一天能送的最大数量是有限的。", "\n4.遍历这些货物，一开始正常按照规则算送货日期，但是突然出现一个需要加急送的，要放在前面送，但前面那些天已经排好的又已经达到最大送货量了，这怎么办，我快愁死了。", "\n5.欢迎各位大神帮忙想想办法"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1&lt;br /&gt;x&amp;#43;&amp;#43;是先用x进行运算&amp;#xff0c;最后才x加上1&amp;#xff0c;所以代码相当于&lt;br /&gt;x &amp;#61; x&amp;#43;1/x - x;&lt;br /&gt;x &amp;#61; x&amp;#43;1;&lt;br /&gt;1/x是两个整数相除&amp;#xff0c;是整除操作&amp;#xff0c;1/2结果是0&lt;br /&gt;所以x&amp;#61;x&amp;#43;1/x-x&amp;#61;2&amp;#43;0-2&amp;#61;0&lt;br /&gt;x&amp;#61;x&amp;#43;1&amp;#61;0&amp;#43;1&amp;#61;1&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["c语言运算优先级以及自增的结果", ["int x=2;", "x=x+1/x–x++;", "请问结果是多少，谢谢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;需要在main线程中进行打印&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;\npublic static void main(String&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt; args) {\n        Runnable task &amp;#61; &lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; -&amp;gt; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Thread&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;current&lt;span class=\"hljs-constructor\"&gt;Thread()&lt;/span&gt;.get&lt;span class=\"hljs-constructor\"&gt;Name()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34; -- &amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Thread&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;current&lt;span class=\"hljs-constructor\"&gt;Thread()&lt;/span&gt;.get&lt;span class=\"hljs-constructor\"&gt;Priority()&lt;/span&gt;);\n        Thread t1 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Thread(&lt;span class=\"hljs-params\"&gt;task&lt;/span&gt;)&lt;/span&gt;;\n        Thread t2 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;Thread(&lt;span class=\"hljs-params\"&gt;task&lt;/span&gt;)&lt;/span&gt;;\n        &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Thread&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;current&lt;span class=\"hljs-constructor\"&gt;Thread()&lt;/span&gt;.get&lt;span class=\"hljs-constructor\"&gt;Name()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34; -- &amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Thread&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;current&lt;span class=\"hljs-constructor\"&gt;Thread()&lt;/span&gt;.get&lt;span class=\"hljs-constructor\"&gt;Priority()&lt;/span&gt;);\n        t1.start&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n        t2.set&lt;span class=\"hljs-constructor\"&gt;Priority(1)&lt;/span&gt;;\n        t2.start&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["JAVA，多线程，优先级疑问", ["\n", "\n", "这个代码运行后显示台最上面为什么没有main-->5？能够给我解答一下吗？谢谢了"]], "Tag": "程序设计"}
{"Answer": "可以在css后面加一个!important，对原来的样式进行覆盖。", "Konwledge_Point": "优先级", "Question": ["bootstrap自定义样式与原样式优先级问题", ["<div class=\"form-group form-inline col-md-10 col-md-offset-1\">\n    <label class=\"control-label\">联系方式</label>\n    <input class=\"input_of_sign form-control\" style=\"margin-left: 2em; width: 70%;\">\n</div>\n", "\n\n", "\n比如上面的一个应用了bootstrap框架的片段，我想调整input大小让它可以用栅格系统控制，就得加一个width:100%的样式，把样式写在html里（style里面）是可以调整，写在外部css里面在调用，就会出现问题，不论在原bootstrap类之前调用还是之后，都有问题； 望解答\n\n\n    是这样的，我想用bootstrap把label和Input放在同一行，就用了form-inline,但用过之后发现input大小被限制了，所以想通过设置width大小然后在用栅格系统来控制大小~发现如上问题 \n\n"]], "Tag": "程序设计"}
{"Answer": "java和c的运算规则不一样，例如下面这段代码在Java总运行时\r\n1. \t\tlong a = 2,b = 9;\r\n2. \t\ta += b -= a*a;//a = 7,b=5,与C一致\r\n3. \t\ta = 2;\r\n4. \t\ta += a-= a*a;//\r\n在Java中赋值顺序为从左到右，a*a与b的结果送给b，b在和a做运算结果送给a，这个顺序与c语言是一样的，\r\n假若将b换成a即第四行代码重新运算，编译器对其进行了规则优化认为运算中的变量是一个，都采用原先的值对其运算，中间的运算结果暂存在堆栈中，因此a*a与a做减法运算的结果临时存在了堆栈中，此时a中的结果还是2，最后一步是a+=堆栈中的值运算(-2)，所以等于0\r\n在C中第四行的运算规则与第二行一致，他把中间的临时结果更新到变量中了因此最后的结果为-4.，", "Konwledge_Point": "优先级", "Question": ["关于java赋值表达式的优先级的问题", ["刚学java，现遇到这个问题，若有定义int a=2,则执行完语句a+=a-=a*a;后a的值是多少。按以往c语言的语法应该为-4 而现在为什么java运行后值是0呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;后置&amp;#43;&amp;#43;是先使用再&amp;#43;&amp;#43;。所以是printf函数先打印出Z的4&amp;#xff0c;然后z再&amp;#43;&amp;#43;变成5&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于++在printf里的优先级", ["int z=4； printf(\"%d\\n\",z++);这个代码最后输出是5吗，在printf里，输出的是z++最后的结果还是输出4，然后z的值变为5呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;It's happens because PHP and C# differently used memory for save variables.\nRead &lt;a href=\"https://entwickler.de/webandphp/how-php-manages-variables-125644.html\" rel=\"nofollow noreferrer\"&gt;How PHP manages variables&lt;/a&gt;.\nSo PHP not duplicated zval memory for variable \"$a\" and value of $a changed when &lt;code&gt;($a = $a +5)&lt;/code&gt; has been completed so we have that &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$a = 5;\necho $a + ($a = $a + 5);  //20\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and C# has duplicated memory for &lt;code&gt;a&lt;/code&gt; variables read answer &lt;a href=\"https://stackoverflow.com/questions/27937789/whats-happening-with-this-expression-b-a-a-a-5\"&gt; What's happening with this expression? b = a + (a = a + 5)&lt;/a&gt;.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["运算符优先级取决于lanaguage或独立", ["\n\n", "I have seen a question on stack over flow. \n", "What's happening with this expression? b = a + (a = a + 5)", "\n\n", "It shows the value of b will be 15. But when i run this code on Php, value of b is 20.", "\n\n", "Why there is difference of output in php and C#", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Since the underlying data structure of your heap is a slice, you can remove the elements directly from the slice and re-initialize the heap again after.&lt;/p&gt;\n\n&lt;p&gt;Starting from your example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for _, event := range events {\n    i := event.GetIndex()\n    queue[i], queue[len(queue)-1] = queue[len(queue)-1], queue[i]\n    queue = queue[:len(queue)-1]\n}\nheap.Init(&amp;amp;queue)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And a working example: &lt;a href=\"https://play.golang.org/p/-KMEilCm3t9\" rel=\"nofollow noreferrer\"&gt;https://play.golang.org/p/-KMEilCm3t9&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func main() {\n    h := IntHeap{1, 5, 2, 9, 8, 3, 7}\n\n    toRemove := 8\n    for i := 0; i &amp;lt; len(h); i++ {\n        n := h[i]\n        if n == toRemove {\n            h[i], h[len(h)-1] = h[len(h)-1], h[i]\n            h = h[:len(h)-1]\n            i--\n        }\n    }\n\n    heap.Init(&amp;amp;h)\n    fmt.Println(h)\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["从golang中的优先级队列中删除元素", ["\n\n", "I take the full realization of priority queue from ", "golang docs", ". I'm interesting in removing several elements at once like ", "heap.Remove(&queue, index1, index2, ...)", ".", "\n\n", "Now it can be done in the straightforward way:", "\n\n", "for _, event := range events {\n    heap.Remove(&queue, event.getIndex())\n}\n", "\n\n", "But this method has an overhead because every call to ", "heap.Remove", " reorganizes tree. It seems  more efficient if we can remove all unnecessary elements firstly and only then reorganize tree. ", "\n\n", "How it can be implemented?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Arguably, this doesn't really answer your question but consider this code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$b = 1;\n$a = &amp;amp;$b + 123;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The opcodes reveal the following execution strategy:&lt;/p&gt;\n\n&lt;pre class=\"lang-none prettyprint-override\"&gt;&lt;code&gt;compiled vars:  !0 = $b, !1 = $a\nline     # *  op                       fetch          ext  return  operands\n-----------------------------------------------------------------------------\n   3     0  &amp;gt;   ASSIGN                                              !0, 1\n   4     1      ASSIGN_REF                                   $1      !1, !0\n         2      ADD                                          ~2      $1, 123\n         3      FREE                                                 ~2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see, the assignment by reference takes place and the addition gets stored in a temporary variable and then freed; basically, a no-op.&lt;/p&gt;\n\n&lt;p&gt;Perhaps the documentation could be clearer, but I can't imagine a scenario in which this particular code would ever make sense :)&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["尝试通过引用分配来理解运算符优先级", ["\n\n", "Operator precedence", " tells that order should be: ", "+, &, =", ". But this code execution shows that order is: ", "&, =, +", "\n\n", "$b = 1;\n$a = & $b + print('print executed');\nif ($a == 1)\n    echo ' but one was not added and error was not raised';\n", "\n\n", "Output ", "print executed but one was not added and error was not raised", "\n\n", "Why precedence is changed for this case?", "\n\n", "P.S.", "\n\n", "$a = new stdClass();\n\n$c = &$a instanceof $a;\nvar_dump($c); // class stdClass#1 (0) {}\n\n$b = $a instanceof $a;\nvar_dump($b); // bool(true)\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I think the major slowdown in your function is the fact that it's recursive.&lt;/p&gt;\n\n&lt;p&gt;As I've said in my comments, PHP function calls are notoriously heavy work for the engine.&lt;/p&gt;\n\n&lt;p&gt;PHP itself implements &lt;code&gt;levenshtein&lt;/code&gt; as a loop, keeping a running total of the cost incurred for inserts, replacements and deletes. &lt;/p&gt;\n\n&lt;p&gt;I'm sure if you converted your code to a loop as well you'd see some massive performance increases.&lt;/p&gt;\n\n&lt;p&gt;I don't know exactly what your code is doing, but I have ported the native C code to PHP to give you a starting point.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;define('LEVENSHTEIN_MAX_LENGTH', 12);\n\nfunction lev2($s1, $s2, $cost_ins = 1, $cost_rep = 1, $cost_del = 1)\n{\n    $l1 = strlen($s1);\n    $l2 = strlen($s2);\n\n    if ($l1 == 0) {\n        return $l2 * $cost_ins;\n    }\n    if ($l2 == 0) {\n        return $l1 * $cost_del;\n    }\n\n    if (($l1 &amp;gt; LEVENSHTEIN_MAX_LENGTH) || ($l2 &amp;gt; LEVENSHTEIN_MAX_LENGTH)) {\n        return -1;\n    }\n\n    $p1 = array();\n    $p2 = array();\n\n    for ($i2 = 0; $i2 &amp;lt;= $l2; $i2++) {\n        $p1[$i2] = $i2 * $cost_ins;\n    }\n\n    for ($i1 = 0; $i1 &amp;lt; $l1; $i1++) {\n        $p2[0] = $p1[0] + $cost_del;\n\n        for ($i2 = 0; $i2 &amp;lt; $l2; $i2++) {\n            $c0 = $p1[$i2] + (($s1[$i1] == $s2[$i2]) ? 0 : $cost_rep);\n            $c1 = $p1[$i2 + 1] + $cost_del;\n            if ($c1 &amp;lt; $c0) {\n                $c0 = $c1;\n            }\n            $c2 = $p2[$i2] + $cost_ins;\n            if ($c2 &amp;lt; $c0) {\n                $c0 = $c2;\n            }\n            $p2[$i2 + 1] = $c0;\n        }\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return $p1[$l2];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I did a quick benchmark comparing yours, mine, and PHPs internal functions, 100,000 iterations each, time is in seconds.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;float(12.954766988754)\nfloat(2.4660499095917)\nfloat(0.14857912063599)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Obviously it hasn't got your tweaks in it yet, but I'm sure they wont slow it down that much.&lt;/p&gt;\n\n&lt;p&gt;If you really need more of a speed boost, once you have worked out how to change this function, it should be easy enough to port your changes back into C, make a copy of PHPs function definitions, and implement your own native C version of your modified function.&lt;/p&gt;\n\n&lt;p&gt;There's lots of tutorials out there on how to make PHP extensions, so you shouldn't have that much difficulty if you decide to go down that route.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Was looking at ways to improve it further, I noticed&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;        $c0 = $p1[$i2] + (($s1[$i1] == $s2[$i2]) ? 0 : $cost_rep);\n        $c1 = $p1[$i2 + 1] + $cost_del;\n        if ($c1 &amp;lt; $c0) {\n            $c0 = $c1;\n        }\n        $c2 = $p2[$i2] + $cost_ins;\n        if ($c2 &amp;lt; $c0) {\n            $c0 = $c2;\n        }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is the same as&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;        $c0 = min(\n            $p1[$i2 + 1] + $cost_del,\n            $p1[$i2] + (($s1[$i1] == $s2[$i2]) ? 0 : $cost_rep),\n            $c2 = $p2[$i2] + $cost_ins\n        );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which I think directly relates to the &lt;code&gt;min&lt;/code&gt; block in your code. However, this &lt;strong&gt;slows down&lt;/strong&gt; the code quite significantly. (I guess its the overhead of the extra function call)&lt;/p&gt;\n\n&lt;p&gt;Benchmarks with the &lt;code&gt;min()&lt;/code&gt; block as the second timing.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;float(2.484846830368)\nfloat(3.6055288314819)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You were right about the second &lt;code&gt;$cost_ins&lt;/code&gt; not belonging - copy/paste fail on my part.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["PHP  - 优化 - 具有优先级的Levenshtein距离", ["\n\n", "I am trying to implement the ", "levenshtein algorithm", " with a little addon. I want to prioritize values that have consecutive matching letters. I've tried implementing my own form of it using the code below:", "\n\n", "function levenshtein_rating($string1, $string2) {\n    $GLOBALS['lvn_memo'] = array();\n    return lev($string1, 0, strlen($string1), $string2, 0, strlen($string2));\n}\n\nfunction lev($s1, $s1x, $s1l, $s2, $s2x, $s2l, $cons = 0) {\n    $key = $s1x . \",\" . $s1l . \",\" . $s2x . \",\" . $s2l;\n    if (isset($GLOBALS['lvn_memo'][$key])) return $GLOBALS['lvn_memo'][$key];\n\n    if ($s1l == 0) return $s2l;\n    if ($s2l == 0) return $s1l;\n\n    $cost = 0;\n    if ($s1[$s1x] != $s2[$s2x]) $cost = 1;\n    else $cons -= 0.1;\n\n    $dist = min(\n                (lev($s1, $s1x + 1, $s1l - 1, $s2, $s2x, $s2l, $cons) + 1), \n                (lev($s1, $s1x, $s1l, $s2, $s2x + 1, $s2l - 1, $cons) + 1), \n                (lev($s1, $s1x + 1, $s1l - 1, $s2, $s2x + 1, $s2l - 1, $cons) + $cost)\n            );\n    $GLOBALS['lvn_memo'][$key] = $dist + $cons;\n    return $dist + $cons;\n}\n", "\n\n", "You should note the ", "$cons -= 0.1;", " is the part where I am adding a value to prioritize consecutive values. This formula will be checking against a large database of strings. (As high as 20,000 - 50,000) I've done a benchmark test with PHP's built in ", "levenshtein", "\n\n", "Message      Time Change     Memory\nPHP          N/A             9300128\nEnd PHP      1ms             9300864\nEnd Mine     20ms            9310736\nArray\n(\n    [0] => 3\n    [1] => 3\n    [2] => 0\n)\nArray\n(\n    [0] => 2.5\n    [1] => 1.9\n    [2] => -1.5\n)\n", "\n\n", "Benchmark Test Code:", "\n\n", "$string1 = \"kitten\";\n$string2 = \"sitter\";\n$string3 = \"sitting\";\n\n$log = new Logger(\"PHP\");\n$distances = array();\n$distances[] = levenshtein($string1, $string3);\n$distances[] = levenshtein($string2, $string3);\n$distances[] = levenshtein($string3, $string3);\n$log->log(\"End PHP\");\n\n$distances2 = array();\n$distances2[] = levenshtein_rating($string1, $string3);\n$distances2[] = levenshtein_rating($string2, $string3);\n$distances2[] = levenshtein_rating($string3, $string3);\n$log->log(\"End Mine\");\necho $log->status();\n\necho \"<pre>\" . print_r($distances, true) . \"</pre>\";\necho \"<pre>\" . print_r($distances2, true) . \"</pre>\";\n", "\n\n", "I recognize that PHP's built in function will probably always be faster than mine by nature. But I am wondering if there is a way to speed mine up?", "\n\n", "So the question: Is there a way to speed this up? My alternative here is to run levenshtein and then search through the highest X results of that and prioritize them additionally.", "\n\n", "\n", "Based on Leigh's comment, copying PHP's built in form of Levenhstein lowered the time down to 3ms. (EDIT: Posted the version with consecutive character deductions. This may need tweaked, by appears to work.)", "\n\n", "function levenshtein_rating($s1, $s2, $cons = 0, $cost_ins = 1, $cost_rep = 1, $cost_del = 1) {\n    $s1l = strlen($s1);\n    $s2l = strlen($s2);\n    if ($s1l == 0) return $s2l;\n    if ($s2l == 0) return $s1l;\n\n    $p1 = array();\n    $p2 = array();\n\n    for ($i2 = 0; $i2 <= $s2l; ++$i2) {\n        $p1[$i2] = $i2 * $cost_ins;\n    }\n\n    $cons = 0;\n    $cons_count = 0;\n    $cln = 0;\n    $tbl = $s1;\n    $lst = false;\n\n    for ($i1 = 0; $i1 < $s1l; ++$i1) {\n        $p2[0] = $p1[0] + $cost_del;\n\n        $srch = true;\n\n        for($i2 = 0; $i2 < $s2l; ++ $i2) {\n            $c0 = $p1[$i2] + (($s1[$i1] == $s2[$i2]) ? 0 : $cost_rep);\n            if ($srch && $s2[$i2] == $tbl[$i1]) {\n                $tbl[$i1] = \"\\0\";\n                $srch = false;\n                $cln += ($cln == 0) ? 1 : $cln * 1;\n            }\n\n            $c1 = $p1[$i2 + 1] + $cost_del;\n\n            if ($c1 < $c0) $c0 = $c1;\n            $c2 = $p2[$i2] + $cost_ins;\n            if ($c2 < $c0) $c0 = $c2;\n\n            $p2[$i2 + 1] = $c0;\n        }\n\n        if (!$srch && $lst) {\n            $cons_count += $cln;\n            $cln = 0;\n        }\n        $lst = $srch;\n\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    $cons_count += $cln;\n\n    $cons = -1 * ($cons_count * 0.1);\n    return $p1[$s2l] + $cons;\n}\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;可以使用有限状态机&amp;#xff0c;推荐参考&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://blog.csdn.net/Czhenya/article/details/78067542\" id=\"textarea_1662166146936_1662166259351_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/Czhenya/article/details/78067542&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["java怎么加一个判定算术优先级的条件", ["package CalculatorImplementation;", "\n", "public class Calculator {", "    private String brand;", "    private String[] pressButton;", "    private int pressButtonIndex;", "\n", "public", " ", "Calculator", "(){\n    pressButton = ", "new", " ", "String", "[", "100", "];\n    pressButtonIndex = ", "0", ";\n}\n", "public", " ", "void", " ", "setBrand", "(", "String", " brand", "){\n    ", "this", ".", "brand", " = brand;\n}\n", "public", " ", "String", " ", "getBrand", "(", "){\n    ", "return", " brand;\n}\n", "public", " ", "void", " ", "pressOne", "(", "){\n    pressButton[pressButtonIndex] = ", "\"1\"", ";\n    pressButtonIndex++;\n    ", "System", ".", "out", ".", "println", "(", "\"按了数字1\"", ");\n}\n", "public", " ", "void", " ", "pressTwo", "(", "){\n    pressButton[pressButtonIndex] = ", "\"2\"", ";\n    pressButtonIndex++;\n    ", "System", ".", "out", ".", "println", "(", "\"按了数字2\"", ");\n}\n", "public", " ", "void", " ", "pressThree", "(", "){\n    pressButton[pressButtonIndex] = ", "\"3\"", ";\n    pressButtonIndex++;\n    ", "System", ".", "out", ".", "println", "(", "\"按了数字3\"", ");\n}\n", "public", " ", "void", " ", "pressFour", "(", "){\n    pressButton[pressButtonIndex] = ", "\"4\"", ";\n    pressButtonIndex++;\n    ", "System", ".", "out", ".", "println", "(", "\"按了数字4\"", ");\n}\n", "public", " ", "void", " ", "pressFive", "(", "){\n    pressButton[pressButtonIndex] = ", "\"5\"", ";\n    pressButtonIndex++;\n    ", "System", ".", "out", ".", "println", "(", "\"按了数字5\"", ");\n}", "public", " ", "void", " ", "pressSix", "(", "){\n    pressButton[pressButtonIndex] = ", "\"6\"", ";\n    pressButtonIndex++;\n    ", "System", ".", "out", ".", "println", "(", "\"按了数字6\"", ");\n}", "public", " ", "void", " ", "pressSeven", "(", "){\n    pressButton[pressButtonIndex] = ", "\"7\"", ";\n    pressButtonIndex++;\n    ", "System", ".", "out", ".", "println", "(", "\"按了数字7\"", ");\n}", "public", " ", "void", " ", "pressEight", "(", "){\n    pressButton[pressButtonIndex] = ", "\"8\"", ";\n    pressButtonIndex++;\n    ", "System", ".", "out", ".", "println", "(", "\"按了数字8\"", ");\n}", "public", " ", "void", " ", "pressNine", "(", "){\n    pressButton[pressButtonIndex] = ", "\"9\"", ";\n    pressButtonIndex++;\n    ", "System", ".", "out", ".", "println", "(", "\"按了数字9\"", ");\n}\n", "public", " ", "void", " ", "pressAdd", "(", "){\n    pressButton[pressButtonIndex] = ", "\"+\"", ";\n    pressButtonIndex++;\n    ", "System", ".", "out", ".", "println", "(", "\"按了+\"", ");\n}\n", "public", " ", "void", " ", "pressSubtract", "(", "){\n    pressButton[pressButtonIndex] = ", "\"-\"", ";\n    pressButtonIndex++;\n    ", "System", ".", "out", ".", "println", "(", "\"按了-\"", ");\n}\n", "public", " ", "void", " ", "pressMultiply", "(", "){\n    pressButton[pressButtonIndex] = ", "\"*\"", ";\n    pressButtonIndex++;\n    ", "System", ".", "out", ".", "println", "(", "\"按了*\"", ");\n}\n", "public", " ", "void", " ", "pressDivide", "(", "){\n    pressButton[pressButtonIndex] = ", "\"/\"", ";\n    pressButtonIndex++;\n    ", "System", ".", "out", ".", "println", "(", "\"按了/\"", ");\n}\n", "public", " int ", "pressEquals", "(", "){\n    int result = ", "0", ";\n    ", "String", " flag = ", "null", ";\n    ", "for", "(int i = ", "0", ";i < pressButtonIndex;i++){\n        ", "if", "(!pressButton[i].", "equals", "(", "\"+\"", ") && !pressButton[i].", "equals", "(", "\"-\"", ") && !pressButton[i].", "equals", "(", "\"*\"", ") && !pressButton[i].", "equals", "(", "\"/\"", ")){\n            ", "if", "(result == ", "0", "){\n                result = ", "Integer", ".", "parseInt", "(pressButton[i]);\n            }", "else", "{\n                ", "if", "(flag.", "equals", "(", "\"+\"", ")){\n                     result = result + ", "Integer", ".", "parseInt", "(pressButton[i]);\n                }", "else", " ", "if", "(flag.", "equals", "(", "\"-\"", ")){\n                     result = result - ", "Integer", ".", "parseInt", "(pressButton[i]);\n                }", "else", " ", "if", "(flag.", "equals", "(", "\"*\"", ")){\n                     result = result * ", "Integer", ".", "parseInt", "(pressButton[i]);\n                }", "else", " ", "if", "(flag.", "equals", "(", "\"/\"", ")){\n                     result = result / ", "Integer", ".", "parseInt", "(pressButton[i]);\n                }\n            }\n        }", "else", "{\n            ", "if", "(pressButton[i].", "equals", "(", "\"+\"", ")) {\n                flag = ", "\"+\"", ";\n            }", "else", " ", "if", "(pressButton[i].", "equals", "(", "\"-\"", ")){\n                flag = ", "\"-\"", ";\n            }", "else", " ", "if", "(pressButton[i].", "equals", "(", "\"*\"", ")){\n                flag = ", "\"*\"", ";\n            }", "else", " ", "if", "(pressButton[i].", "equals", "(", "\"/\"", ")){\n                flag = ", "\"/\"", ";\n            }\n        }\n    }\n    ", "return", " result;\n}\n", "\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;三目运算符返回值要赋给一个变量吧&amp;#xff0c;而且y&amp;#61;-x 应该写成 y&amp;#61; (-1)*x吧。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["选项B错哪了，运算符的优先级", ["这个B错哪了"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;i--是先用了再减&lt;br /&gt;即a[i--]&amp;#61;*pa--;等价于a[i]&amp;#61;*pa,i--,*pa--&lt;br /&gt;--i是先减了再用&lt;br /&gt;即a[-i]&amp;#61;--*pa;等价于i--,*pa--&amp;#xff0c;a[i]&amp;#61;*pa&lt;br /&gt;如果对你有帮助&amp;#xff0c;望采纳&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["指针自减的优先级是什么样的？", ["\n", "\n", "#", "include", " ", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " a[", "10", "],b,*pa,*pb=&b;\n    ", "for", "(pa=a;pa<a+", "9", ";pa++)\n        ", "scanf", "(", "\"%d\"", ",pa);\n    ", "scanf", "(", "\"%d\"", ",pb);\n    ", "int", " i=", "10", ";\n    ", "while", "(*pb>*pa)\n       a[i--]=*pa--;\n    a[i]=*pb;\n    ", "for", "(pa=a;pa<a+", "10", ";pa++)\n       ", "printf", "(", "\"%d \"", ",*pa);\n}\n为什么答案是这样的啊，懵逼脸•᷄ࡇ•᷅\n"]], "Tag": "程序设计"}
{"Answer": "绿色的表示函数，this表示当前。\r\nthis与var的区别：https://cnodejs.org/topic/5056e007433135ca35034e8d", "Konwledge_Point": "优先级", "Question": ["用js实现优先级队列时遇到一些类的问题", ["问题描述：", "\n\n", "复习数据结构预算法时，想用JS写一个优先级队列，对JS里面的类啊、原型什么的搞懵了,之前没遇到过这种语法问题", "\n\n", "相关截图", "\n\n", "\n\n", "\n\n", "疑问", "\n\n", "vscode里面这种绿色高亮是不是就是表示类?", "\n当我加上this.item时PriorityQueue函数就变成绿色的了，所以想问一下js函数里面this.item这种写法是表示什么呢？如果是定义变量可不可以var?"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;If you just want top M smallest elements from N elements then use the heap that would give you the biggest element and prune the heap whenever its size goes over value M. Then take elements from the heap in reverse order.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    \"container/heap\"\n    \"fmt\"\n    \"math/rand\"\n)\n\ntype IntHeap []int\n\nfunc (h IntHeap) Len() int           { return len(h) }\nfunc (h IntHeap) Less(i, j int) bool { return h[i] &amp;gt; h[j] }\nfunc (h IntHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }\n\nfunc (h *IntHeap) Push(x interface{}) {\n    *h = append(*h, x.(int))\n}\n\nfunc (h *IntHeap) Pop() interface{} {\n    old := *h\n    n := len(old)\n    x := old[n-1]\n    *h = old[0 : n-1]\n    return x\n}\n\nconst (\n    n = 1000000\n    m = 5\n)\n\nfunc main() {\n    h := &amp;amp;IntHeap{}\n    heap.Init(h)\n\n    for i := 0; i &amp;lt; n; i++ {\n        x := rand.Intn(n)\n        heap.Push(h,x)\n        if h.Len() &amp;gt; m {\n            heap.Pop(h)\n        }\n    }\n\n    r := make([]int, h.Len())\n    for i := len(r) - 1; i &amp;gt;= 0; i-- {\n        r[i] = heap.Pop(h).(int)\n    }\n    fmt.Printf(\"%v\n\", r)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This algorithm has memory complexity of M and time complexity of N + N * log M + M * log M.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["Go的堆接口实现的优先级队列的大小限制", ["\n\n", "In Java there is a PriorityQueue with size attribute. I'm expecting the same here (if I'm not wrong).", "\n\n", "Use case: Read millions of data one by one and send it to a priority queue. I want only the top 5 calculated elements so I want a heap/priority queue of size 5 only. ", "\n\n", "I'm trying to use heap interface to achieve  this. As to what I see golang does dynamic array increase but this is not feasible in my case. ", "\n\n", "I am referring to ", "https://play.golang.org/p/wE413xwmxE", "\n\n", "How can I achieve this?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Try this code :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;RewriteEngine On\nRewriteRule ^$ /index.html [L,R=301]\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": [".htaccess中index.php的index.html优先级", ["\n\n", "i am trying to set the priority of ", "index.php", " to ", "index.html", " ", "(but just for landing page)", " in my .htaccess file that works fine  ", "\n\n", "but for ", "?page_id=16", " its also display the same index.html page that i don't want", "\n\n", "RewriteEngine On\nRewriteBase /\n\nRewriteRule ^index\\.php$ - [L]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\n\nDirectoryIndex index.html index.php\n\nRewriteRule . /index.php [L]\n", "\n\n", "NOTE:", " i am using wordpress.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Simply because this is how it is implemented. An &lt;code&gt;error&lt;/code&gt; is more important in practice, so if the &lt;code&gt;error&lt;/code&gt; interface is implemented, that will be printed.&lt;/p&gt;\n\n&lt;p&gt;This is documented, read the package doc of &lt;a href=\"https://golang.org/pkg/fmt/\"&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Except when printed using the verbs %T and %p, special formatting considerations apply for operands that implement certain interfaces. In order of application:&lt;/p&gt;\n  \n  &lt;ol&gt;\n  &lt;li&gt;&lt;p&gt;If an operand implements the Formatter interface, it will be invoked. Formatter provides fine control of formatting.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;If the %v verb is used with the # flag (%#v) and the operand implements the GoStringer interface, that will be invoked.&lt;/p&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n  \n  &lt;p&gt;If the format (which is implicitly %v for Println etc.) is valid for a string (%s %q %v %x %X), the following two rules apply:&lt;/p&gt;\n  \n  &lt;ol start=\"3\"&gt;\n  &lt;li&gt;&lt;p&gt;If an operand implements the &lt;strong&gt;error&lt;/strong&gt; interface, the Error method will be invoked to convert the object to a string, which will then be formatted as required by the verb (if any).&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;If an operand implements method &lt;strong&gt;String() string&lt;/strong&gt;, that method will be invoked to convert the object to a string, which will then be formatted as required by the verb (if any).&lt;/p&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So &lt;code&gt;error&lt;/code&gt; is 3&lt;sup&gt;rd&lt;/sup&gt; on the list while &lt;code&gt;String()&lt;/code&gt; is only 4&lt;sup&gt;th&lt;/sup&gt;.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["为什么Error（）的优先级高于String（）", ["\n\n", "I've been looking through the tour for go, and I can't figure out why this happens.", "\n\n", "When you have a ", "Stringer", " (", "String() string", "), ", "fmt", " will use that method for printing to console. Like suggested in ", "https://tour.golang.org/methods/6", "\n\n", "However if you add ", "Error() string", ", this method gets called instead of ", "String() string", ".", "\n\n", "package main\n\nimport \"fmt\"\n\ntype Person struct {\n    Name string\n    Age  int\n}\n\nfunc (p *Person) String() string {\n    return fmt.Sprintf(\"%v (%v years)\", p.Name, p.Age)\n}\n\nfunc (p *Person) Error() string {\n    return fmt.Sprintf(\"Failed\")\n}\n\nfunc main() {\n    a := &Person{\"Arthur Dent\", 42}\n    z := &Person{\"Zaphod Beeblebrox\", 9001}\n    fmt.Println(a, z)\n}\n", "\n\n", "Results:", "\n\n", "\n  ", "Failed Failed", "\n", "\n\n", "I don't understand why ", "fmt.Println", " uses ", "Error", " instead of ", "String", ".", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;建议先学C语言&amp;#xff0c;注意的地方嘛&amp;#xff0c;细心一点&amp;#xff0c;多思考即可。你看下我的回答对你是否有帮助&amp;#xff0c;如解决问题请采纳&amp;#xff0c;如还有疑问可继续追问&amp;#xff0c;谢谢&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["新手对于c语言和STM32单片机学习的选择优先级？", ["本人小白一枚，现在需要学习C语言在STM32芯片上的编程，问我应该先学习C语言还是先学习STM32芯片？"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;First of all. I noticed a couple of bugs :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;elseif( date = $nyd ) :\n                $nyd = true;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if( $xmas = true ) :\n                $showroom_img = \"/media/gbu0/pagehead/showroom_xmas.jpg\";\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In PHP, '=' is the assignment operator, used to assign value to a variable. What you need here is the comparison operator, '=='. For example :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if( $xmas == true ) :\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or you could also do (it's pointed out in a comment already) :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if( $xmas ) :\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Rgarding priority, the if statements are going to be checked in the order you write them in your code. TO ensure that a condition gets the highest priority, that has to be checked first.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["如何阻止我的IF语句冲突，如何选择优先级？", ["\n\n", "I'm quite new to PHP and I've been asked to write a script that displays an image based on time. I've deducted that I need to use PHP's native 'date' function for this and up until I was asked to implement bank holidays and Christmas into it, all went well.", "\n\n", "I tried to add the Christmas and bank holidays in as a separate if statement but that was when disaster struck and I haven't been able to figure out why it's come to a halt. I've tried using an online PHP validator to no avail.", "\n\n", "Please don't be afraid to throw details and jargon at me as I really wish to expand my knowledge of PHP and rely less on the support of web forums in the future!", "\n\n", "Here is the code:", "\n\n", "<?php\n\n        // Date-time (day of month, month) \n\n        $d = date('j'); // Day of month: Numeric without leading zeroes\n        $m = date('n'); // Month: As above\n        $D = date('w'); // Day of week\n        $H = date('G'); // Hour of day\n\n        // REGULAR OPENING TIMES\n        // Closed before 9am on weekdays\n        if ($H < 9 && $D <= 5) :\n                $showroom_img = '/media/gbu0/pagehead/showroom_closed.jpg';\n        // Open before 5pm (but after 9, as first if statement overrides this) on weekdays\n        elseif ($H < 17 && $D <= 5) :\n                $showroom_img = = '/media/gbu0/pagehead/showroom_open.jpg';\n        // Closed before 10am on Saturdays\n        elseif ($H < 10 && $D == 6) :\n                $showroom_img = = '/media/gbu0/pagehead/showroom_closed.jpg';\n        // Open between 10am and 2pm on Saturdays\n        elseif ($H < 14 && $H > 10 && $D == 6) :\n                $showroom_img = = '/media/gbu0/pagehead/showroom_open.jpg';\n        // Any other time, display closed image :)\n        else :\n                $showroom_img = = '/media/gbu0/pagehead/showroom_closed.jpg';\n        endif;\n\n        // Holidays 2014\n\n        $xmas_starts = ($d == 23 && $m == 12 && $d > 17);\n        $xmas_ends   = ($d == 26 && $m == 12);\n        $nyd         = ($d == 1 && $m = 1);\n\n        // Easter Friday: April 18\n        // Easter Monday: April 21\n        // Early Spring B/H: May 5\n        // Late Spring B/H: May 26\n        // Summer B/H: August 25\n\n        // All bank holidays: 10am - 2pm\n\n        if( date >= $xmas_starts && $day <= $xmas_ends ) :\n                $xmas = true;\n        elseif( date = $nyd ) :\n                $nyd = true;\n        else :\n                $bankhol = false;\n        endif;\n\n        if( $xmas = true ) :\n                $showroom_img = \"/media/gbu0/pagehead/showroom_xmas.jpg\";\n        elseif( $bankhol = true && date('F', 'j') = strpos('April 18' || 'April 21' || 'May 5' || 'May 26' || 'August 25') || date('w') = 6 ) :\n                $showroom_img = \"/media/gbu0/pagehead/showroom_bhol.jpg\";\n        elseif( date('w') = 7 ) :\n                $showroom_img = \"/media/gbu0/pagehead/showroom_closed.jpg\";\n        else :\n                $showroom_img = \"/media/gbu0/pagehead/showroom_open.jpg\";\n        endif;\n\n?>\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I created a wrapper class which calls heap.Push and heap.Pop.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package huffman\n\nimport \"container/heap\"\n\ntype RunePriorityQueue struct {\n    queue PriorityQueue\n}\n\nfunc (RunePriorityQueue) NewRunePriorityQueue() *RunePriorityQueue {\n    newRPQ := new(RunePriorityQueue)\n    heap.Init(&amp;amp;newRPQ.queue)\n    return newRPQ\n}\n\nfunc (rpq *RunePriorityQueue) Push(item *Item) {\n    heap.Push(&amp;amp;rpq.queue, item)\n}\n\nfunc (rpq *RunePriorityQueue) Pop() *Item {\n    return heap.Pop(&amp;amp;rpq.queue).(*Item)\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["编写优先级队列时，如何向用户隐藏堆方法？", ["\n\n", "I'm following ", "this code", " to implement a priority queue. The thing I don't like is that when using it in the main method, the user has to call heap.Push and heap.Pop. It would make more sense to me to have my Priority queue contain a heap, rather than wrapping it in a heap. Am I thinking about this wrong, or does the example code show the right way to do it in Golang?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;x%&amp;#61;17     等于      x&amp;#61;x%17&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-cs\"&gt;int x&amp;#61;24;\n# 设置x为24\nx&amp;#43;&amp;#61;x--;\n# 从等号右边看&amp;#xff0c;--在x之后&amp;#xff0c;所以后运算&amp;#xff0c;当前的x值为24&amp;#xff0c;则等价于\nx &amp;#61; x &amp;#43; x\n# 所以x&amp;#61; 24 &amp;#43; 24&amp;#xff0c;等于48\nx &amp;#43;&amp;#61; x%&amp;#61; 17&amp;#xff1b;\n# 从最右边的等号开始看&amp;#xff0c;x%&amp;#61;17等价于x&amp;#61;x%17&amp;#xff0c;当前x为48%7&amp;#xff0c;等于14&amp;#xff0c;所以这个x变为14\n# 则等式继续为 x&amp;#43;&amp;#61;x&amp;#43;14&amp;#xff0c;此时运算前的x为48&amp;#xff0c;运算后的x为14&amp;#xff0c;怎最终为x&amp;#61;62&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["各位大佬，问一个运算符优先级的小问题。", ["            int x = 24;", "\n            x += x--;", "\n            x += x %= 17;", "\n\n", "其中第三句的x%=17是什么意思，%不是取余吗，不太理解x% = 17的含义。望解答！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;因为是&amp;amp;&amp;amp;&amp;#xff0c;如果左边的条件为false&amp;#xff0c;则结果直接为false&amp;#xff0c;右边的跳过不计算了。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["为什么括号的优先级先却没有执行括号里的自增", ["main()", "int x=1，y=1，z=1；", "--x&&(--y||--z);"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Figured it out, the array below returns &lt;em&gt;all&lt;/em&gt; headers, posting for others...&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;[edit]&lt;/strong&gt; Updated so that headers that may appear more than once are checked and an array with their values are added. The &lt;code&gt;$unlimited&lt;/code&gt; array is sampled from &lt;a href=\"http://tools.ietf.org/html/rfc5322#section-3.6\" rel=\"nofollow\"&gt;http://tools.ietf.org/html/rfc5322#section-3.6&lt;/a&gt;.&lt;strong&gt;[/edit]&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;?php\n$th = imap_fetchheader($mbox,$cms-&amp;gt;page2);\n$th = trim($th);\n$th = str_ireplace(\"\r\",\"\n\",$th);\n$th = str_ireplace(\"\n\n\",\"\n\",$th);\n$p0 = explode(\"\n\",$th);\n$current = '';\n$unlimited = array('comments','keywords','optional-field','resent-bcc','resent-cc','resent-date','resent-from','resent-msg-id','resent-sender','resent-to','trace');\n$headers = array();\n\nforeach ($p0 as $k1)\n{\n $k1 = rtrim($k1);\n $a = $k1;\n $b = trim($k1);\n\n if ($a!==$b)\n {\n  $p1 = trim($k1);\n  if (in_array($current,$unlimited)) {array_push($headers[strtolower($current)],$p1);}\n  else {$headers[strtolower($current)] .= $p1;}\n }\n else if (stristr($k1,':'))\n {\n  $p1 = explode(':',$k1,2);\n  if (in_array(strtolower($p1[0]),$unlimited))\n  {\n   if (!isset($headers[strtolower($p1[0])])) {$headers[strtolower($p1[0])] = array($p1[1]);}\n   else {array_push($headers[strtolower($current)],$p1[1]);}\n  }\n  else\n  {\n   if (!isset($headers[strtolower($p1[0])])) {$headers[strtolower($p1[0])] = $p1[1];}\n   else {$headers[strtolower($p1[0])] .= $p1[1];}\n  }\n\n  $current = $p1[0];\n }\n}\n\nksort($headers);//Mainly for testing purposes, remove this afterwards.\n\necho '&amp;lt;div&amp;gt;&amp;lt;pre&amp;gt;';\n$a = print_r($headers,1);\necho htmlspecialchars($a).'&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;';\n?&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["PHP：imap_header不显示请求读取收据和优先级标头", ["\n\n", "I'm trying to read the Request Read Receipt and Priority headers from email headers via PHP.", "\n\n", "IT seems that ", "imap_header", " only displays ", "select", " headers. The message headers below should but do not include the two headers I'm looking for...", "\n\n", " stdClass Object ( \n [date] => Tue, 30 Jul 2013 18:11:26 -0700 (MST)\n [Date] => Tue, 30 Jul 2013 18:11:26 -0700 (MST) \n [subject] => Return\n Request Receipt + High Priority Test \n [Subject] => Return Request\n Receipt + High Priority Test \n [in_reply_to] => <__@mrmail.com>\n [message_id] => <__@mrmail.com> \n [toaddress] => __@example.com [to] =>\n   Array ( \n   [0] => stdClass Object (\n     [mailbox] => __ [host] => example.com\n   )\n )\n\n [fromaddress] => Someone <__@mrmail.com> \n [from] => \n   Array ( \n     [0] =>\n       stdClass Object ( \n         [personal] => Someone \n         [mailbox] => example \n         [host] => mrmail.com \n   )\n )\n\n [reply_toaddress] => Someone <__@mrmail.com> \n [reply_to] => \n   Array ( \n     [0] => stdClass Object (\n       [personal] => Someone \n       [mailbox] => __ \n       [host] => mrmail.com \n      )\n )\n\n [senderaddress] => Someone <__@mrmail.com> \n [sender] => \n   Array ( \n     [0] => stdClass Object ( \n       [personal] => Someone \n       [mailbox] => example \n       [host] => mrmail.com \n      )\n )\n\n [Recent] => \n [Unseen] => U \n [Flagged] => \n [Answered] => \n [Deleted] =>\n [Draft] => \n [Msgno] => 69 \n [MailDate] => 30-Jul-2013 19:18:03 -0600\n [Size] => 2719 \n [udate] => 1375233483\n", "\n\n", "So what function in PHP do I use to iterate through ", "ALL", " headers?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;因为你的类不是const修饰的&amp;#xff0c;在同名的情况下会优先调用不带const的operator函数。使用const引用&amp;#xff0c;或者const修饰可以调用另外一个版本。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;tarray&amp;lt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&amp;gt;scores &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;auto&lt;/span&gt;&amp;amp; s &amp;#61; scores;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; i&amp;#43;&amp;#43;) cout &amp;lt;&amp;lt; s[i] &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["对同一运算符两次重载，调用时优先级是怎么规定的？", ["######在书上看到了在类内对[]进行了两次重载：", "\n", "\n", "//arraytp.h -- Array Template", "\n#ifndef ARRAYTP_H_\n#define ARRAYTP_H_\n\n#include <iostream>\n#include <cstdlib>\n\ntemplate <", "class", " ", "T, ", "int", " ", "n", ">\n", "class", " ", "ArrayTP", "\n{\n", "private", ":\n    T ar[n];\n", "public", ":\n    ArrayTP() {};\n    ", "explicit", " ArrayTP(", "const", " T & v);\n    virtual T & operator[](", "int", " i);\n    virtual T operator[](", "int", " i) ", "const", ";\n};\n\ntemplate <", "class", " ", "T, ", "int", " ", "n", ">\n", "ArrayTP", "<", "T,", "n", ">::", "ArrayTP", "(", "const", " ", "T", " & ", "v", ")\n{\n    ", "for", " (", "int", " i = ", "0", "; i < n; i++)\n        ar[i] = v;\n}\ntemplate <", "class", " ", "T, ", "int", " ", "n", ">\n", "T", " & ", "ArrayTP", "<", "T,", "n", ">::", "operator", "[](", "int", " ", "i", ")\n{\n    ", "if", " (i < ", "0", " || i >= n)\n    {\n        std::cerr << ", "\"Error in array limits: \"", " << i\n            << ", "\" is out of range\\n\"", ";\n        std::exit(EXIT_FAILURE);\n    }\n    ", "return", " ar[i];\n}\n\ntemplate <", "class", " ", "T, ", "int", " ", "n", ">\n", "T", " ", "ArrayTP", "<", "T,", "n", ">::", "operator", "[](", "int", " ", "i", ") ", "const", "\n{\n    ", "if", " (i < ", "0", " || i >= n)\n    {\n        std::cerr << ", "\"Error in array limits: \"", " << i\n            << ", "\" is out of range\\n\"", ";\n        std::exit(EXIT_FAILURE);\n    }\n    ", "return", " ar[i];\n}\n#endif\n", "\n", "一个返回T&,另一个返回T，可是在用的时候：", "\n", "#", "include", "<iostream>", "\n", "#", "include", "\"arraytp.h\"", "\n", "using", " ", "namespace", " std;\n", "int", " ", "main", "()", "\n", "{\n    tarray<", "int", ", ", "5", ">scores = ", "0", ";\n    ", "for", " (", "int", " i = ", "0", "; i < ", "5", "; i++) cout << scores[i] << endl;\n    ", "return", " ", "0", ";\n}\n", "\n", "我注意到调用的是 virtual T & operator[](int i);", "不太明白为什么有限调用这个版本，以及怎么写才会调用另一个版本的重载呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;*10先算&lt;/p&gt;\n\n&lt;p&gt;MAX(x,y)是宏&amp;#xff0c;不是函数&amp;#xff0c;实际改行的效果是&amp;#xff1a;&lt;/p&gt;\n\n&lt;p&gt;t &amp;#61; (a&amp;#43;b) &amp;gt; (c&amp;#43;d) ? (a&amp;#43;b) : (c&amp;#43;d)*10;&lt;/p&gt;\n\n&lt;p&gt;*10作用只针对(c&amp;#43;d)而已。由于a&amp;#43;b &amp;#61; 7,c&amp;#43;d &amp;#61; 6&amp;#xff0c;所以最终 t &amp;#61; a&amp;#43;b &amp;#61; 7&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["*的优先级高于赋值啊，为啥答案是7呢？", ["\n\n", " "]], "Tag": "程序设计"}
{"Answer": "第一步算的是 5*8 结果是40\r\n第二步是5*8/（7+2）结果是4（余数不管）\r\n第三步4% 5，（商0不管），余数4\r\n所以4\r\n# 问题解决的话，请点下采纳", "Konwledge_Point": "优先级", "Question": ["初学Java算数符的优先级运算 搞不明白求余之后的结果", ["int x =(5*8/(7+2)) % 5;", "\n正确结果是x=4", "\n我第一步算的是 5*8 结果是40", "\n第二步是5*8/（7+2）结果是4余4", "\n第三步(5*8/(7+2)) % 5就搞不明白了 怎么得到的4？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;表达式&lt;code class=\"language-javascript\"&gt;010 &amp;lt;&amp;lt; 1 ^ 1&lt;/code&gt;等价于&lt;code class=\"language-javascript\"&gt;(010&amp;lt;&amp;lt;1)^1&lt;/code&gt;&amp;#xff0c;其中&lt;code class=\"language-javascript\"&gt;010&lt;/code&gt;是八进制数&amp;#xff0c;数值是8。&lt;code class=\"language-javascript\"&gt;8&amp;lt;&amp;lt;1&lt;/code&gt;结果是&lt;code class=\"language-javascript\"&gt;16&lt;/code&gt;。&lt;code class=\"language-javascript\"&gt;16^1&amp;#61;17&lt;/code&gt;。&lt;br /&gt;输出格式&lt;code class=\"language-javascript\"&gt;&amp;#34;%on&amp;#34;&lt;/code&gt;中&lt;code class=\"language-javascript\"&gt;%o&lt;/code&gt;是按八进制输出&amp;#xff0c;最终输出结果应该是&lt;code class=\"language-javascript\"&gt;21n&lt;/code&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["<<的优先级不是大于^吗？为什么答案是1", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;As an example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT\n  FirstName,\n  LastName,\n  IF (FirstName LIKE '%Microsoft%' || LastName LIKE '%Microsoft%', 1, 0) AS One,\n  IF (FirstName LIKE '%John%' || LastName LIKE '%John%', 1, 0) AS Two\nFROM alumni\nORDER BY One DESC, Two DESC\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In your code, this will make the query pretty complicated. The advantage is, that items with both search term appear before items that match only a single search term.&lt;/p&gt;\n\n&lt;p&gt;An alternative is sorting the records into buckets while retrieving them using PHP. Assuming you have the search terms in an array &lt;code&gt;$search&lt;/code&gt; (ordered by descending priority):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;while ($record = mysql_fetch_array($result))\n{\n  $total = join(' ', $record);\n  $found = false;\n  foreach ($search as $term)\n  {\n    if (strpos($total, $term) !== false)\n    {\n      $buckets[$term][] = $record;\n      $found = true;\n      break;\n    }\n  }\n  if (!$found)\n  {\n    $results[] = $record;\n  }\n}\nforeach (array_reverse($search) as $term)\n{\n  if (isset($buckets[$term]))\n  {\n    $result = array_merge($buckets[$term], $result);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you have the results in array &lt;code&gt;$results&lt;/code&gt;. Note that this demonstrates the algorithm, it it not tuned for performance.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["如何通过单词优先级的相关性来命令mysql搜索结果[重复]", ["\n\n", "\n  ", "Possible Duplicate:", "PHP MySQL Search And Order By Relevancy", "  ", "\n", "\n\n\n\n", "Hi,", "\n\n", "I have a table with several columns containing fields like name, address, company etc. Lets say someone search for \"microsoft john\". I want the results containing \"microsoft\" should appear first, then results containing john. vice versa if query is \"john microsoft\"", "\n\n", "My php code is:", "\n\n", "$searchitems=explode(\" \", $trimmed);\n//print_r($searchitems);\n$so = $_GET['so']=='2'?\"2\":\"1\";\n\n$clause = $so=='2'?\"AND\":\"OR\";\ninclude(\"dbconnect.php\");\n// Build SQL Query\n\n$query = \"select FirstName,LastName,course,Department,batch,City,companyjob,companylocation,\n    companyposition,coursename,institutename,coursename2,institutename2,coursename3,\n    institutename3 from alumni WHERE \";\nfor($i=0;$i<count($searchitems);$i++)\n{\n    $queryappend .= \"(FirstName LIKE '\".$searchitems[$i].\"%' OR LastName LIKE '\".$searchitems[$i].\"%'\n    OR City LIKE '\".$searchitems[$i].\"%' OR CountryorRegion LIKE '\".$searchitems[$i].\"%'\n    OR companyjob LIKE '\".$searchitems[$i].\"%' OR companylocation LIKE '\".$searchitems[$i].\"%'\n    OR coursename LIKE '\".$searchitems[$i].\"%' OR institutename LIKE '\".$searchitems[$i].\"%'\n    OR coursename2 LIKE '\".$searchitems[$i].\"%' OR institutename2 LIKE '\".$searchitems[$i].\"%')\";\n    if($i<count($searchitems)-1) $queryappend .= $clause;\n\n}\n$query .=$queryappend;\n", "\n\n", "The problem is MYSQL is ordering the results by id... This makes it funny, because some higher valued results may be stuck deep in the stack. btw, phpmyadmin search has the same flaw. ", "\n\n", "Please suggest.", "\n    "]], "Tag": "程序设计"}
{"Answer": "https://blog.csdn.net/weixin_30823001/article/details/99908757", "Konwledge_Point": "优先级", "Question": ["这个问题使用优先级排序的队列思想方式怎么实现的，要求C语言解释", ["Problem Description", "\nFarmer John's N cows (1 <= N <= 100,000) are lined up in a row.Each cow is labeled with a number in the range 1...K (1 <= K <=10,000) identifying her breed. For example, a line of 14 cows might have these breeds:", "\n\n", "1 5 3 2 5 1 3 4 4 2 5 1 2 3", "\n\n", "Farmer John's acute mathematical mind notices all sorts of properties of number sequences like that above. For instance, he notices that the sequence 3 4 1 3 is a subsequence (not necessarily contiguous) of the sequence of breed IDs above. FJ is curious what is the length of the shortest possible sequence he can construct out of numbers in the range 1..K that is NOT a subsequence of the breed IDs of his cows. Help him solve this problem.", "\n\n", "Input", "\n\n", "\n", "Line 1: Two integers, N and K", "\n", "Lines 2..N+1: Each line contains a single integer that is the breed ID of a cow. Line 2 describes cow 1; line 3 describes cow 2; and so on.", "\n", "Output", "\n\n", "\n", "Line 1: The length of the shortest sequence that is not a subsequence of the input", "\n", "Sample Input", "\n14 5", "\n1", "\n5", "\n3", "\n2", "\n5", "\n1", "\n3", "\n4", "\n4", "\n2", "\n5", "\n1", "\n2", "\n3", "\n\n", "Sample Output", "\n3"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://wenda.so.com/q/1365606454067990?src&amp;#61;140&amp;amp;q&amp;#61;C%2B%2B&amp;#43;%E6%88%96%E5%92%8C%E4%B8%8E%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\" id=\"textarea_1667568876205_1667569313529_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://wenda.so.com/q/1365606454067990?src&amp;#61;140&amp;amp;q&amp;#61;C%2B%2B&amp;#43;%E6%88%96%E5%92%8C%E4%B8%8E%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["a++||b++&&++c的运算顺序是什么？谁可以解释呀？（&&的优先级高于||）", ["#include  <stdio.h>", "\n", "main()", "\n", "{", "\n", "int", " a=", "0", ",b=", "0", ",c=", "0", ";\n\n", "if", " (a++ || b++ && ++c)\n\n    ", "printf", "(", "\"%d,%d,%d\\\\n\"", ", a, b, c);\n\n", "else", "\n\n    ", "printf", "(", "\"%d,%d,%d\\\\n\"", ", a, c, b);\n", "\n", "}", "\n", "程序执行后的输出结果是（）。", "\n", "A", "\n\n", "1", ",", "1", ",", "0", "\n", "B", "\n\n", "1", ",", "1", ",", "1", "\n", "C", "\n\n", "1", ",", "0", ",", "0", "\n", "D", "\n\n", "1", ",", "0", ",", "1", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;优先级高的不一定优先执行&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/059511788346164.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码的顺序改下,多执行几次  &lt;/p&gt;\n&lt;p&gt;有用望采纳&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["设置了线程的优先级，但结果为什么还是按顺序来的。", ["\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;a&amp;#43;&amp;#43;是后加运算&amp;#xff0c;所以也就是说要在a输出执行完成后才会对a执行加一运算&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["请问下++的优先级高于*，为什么这里还是先执行*呢？", []], "Tag": "程序设计"}
{"Answer": "第二步错了， (5*8/(7+2))=4，程序会对结果取整数部分，那个余4只是你认为的，计算结果是4，因此下一步是4%5=4，这里应该没啥问题吧。", "Konwledge_Point": "优先级", "Question": ["Java优先级运算 遇到求余的时候正确结果和自己算的有点懵了", ["int x = (m*8/(n+2)) % m;", "\n\n", "m,n的数值是题目已经给出来的 m=5,n=7 我一直算不明白x为什么就是4了", "\n我第一步算的是 (5*8)=40", "\n第二步 (5*8/(7+2))=4....4", "\n第三步(5*8/(7+2)) % 5为什么是4呢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;public Map GetNbrStaffInfo(Map params) throws Exception {&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  Map retMap &amp;#61; new HashMap();&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  // 0查询成功&amp;#xff0c;1查询失败&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  retMap.put(&amp;#34;code&amp;#34;, &amp;#34;0&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  retMap.put(&amp;#34;msg&amp;#34;, &amp;#34;成功&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  List&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; list1&amp;#61; findBySql(“xxxxxxxxxx”,new String[] {参数})&lt;/span&gt;&lt;br /&gt; if (ListUtil.isEmpty(list1)){&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  list1&amp;#61; findBySql(“yyyyyyyyyy”,new String[] {参数})&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;      ListUtil.isEmpty(list1){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;               list1&amp;#61; findBySql(“zzzzzzzzzz”,new String[] {参数})&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        if(ListUtil.isEmpty(list1)){&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;            list1&amp;#61; findBySql(“wwwwww”,new String[] {参数})&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;      }&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  }&lt;/span&gt;&lt;br /&gt;if(ListUtil.isEmpty(list1)){&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    retMap.put(&amp;#34;staff_code&amp;#34;,list1.get(0).get(&amp;#34;staff_code&amp;#34;));&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    retMap.put(&amp;#34;staff_name&amp;#34;,list1.get(0).get(&amp;#34;staff_name&amp;#34;));&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    return retMap;&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    retMap.put(&amp;#34;code&amp;#34;,&amp;#34;1&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    retMap.put(&amp;#34;msg&amp;#34;,&amp;#34;查无结果&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    retMap.put(&amp;#34;staff_code&amp;#34;,&amp;#34;&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    retMap.put(&amp;#34;staff_name&amp;#34;,&amp;#34;&amp;#34;);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    return retMap;&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;public   List&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt;  findBySql(String sql ,String[] arrys){&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;     return DBUtil.getSimpleQuery().queryForMapListBySql(sql,arrys));&lt;/span&gt;&lt;br /&gt;}&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["JAVA按不同口径进行查询，并按顺序优先级返回，怎么处理返回比较有效", ["我感觉用 if + return 比较死板，但结果又不是一个变量不好使用switch case。测试代码如下：", "\n", "public Map ", "GetNbrStaffInfo(Map ", "params", ")", " throws Exception {\n  Map retMap = ", "new", " ", "HashMap()", ";\n  ", "// 0查询成功，1查询失败", "\n  retMap.put(", "\"code\"", ", ", "\"0\"", ");\n  retMap.put(", "\"msg\"", ", ", "\"成功\"", ");\n  ", "//口径1", "\n  String sql1 = “xxxxxxxxxx”；\n  List<Map<String, String>> list1= ", "DBUtil", ".", "get", "SimpleQuery()", ".query", "ForMapListBySql(", "sql1", ",", "new", " String[] {参数})", ";\n ", "if", " (!", "ListUtil", ".", "is", "Empty(", "list1", ")", "){\n    retMap.put(", "\"staff_code\"", ",list1.get(", "0", ").get(", "\"staff_code\"", "));\n    retMap.put(", "\"staff_name\"", ",list1.get(", "0", ").get(", "\"staff_name\"", "));\n    return retMap;\n  }\n  ", "//口径2", "\n  String sql2 = “yyyyyyyyyy”；\n  List<Map<String, String>> list2= ", "DBUtil", ".", "get", "SimpleQuery()", ".query", "ForMapListBySql(", "sql1", ",", "new", " String[] {参数})", ";\n ", "if", " (!", "ListUtil", ".", "is", "Empty(", "list1", ")", "){\n    retMap.put(", "\"staff_code\"", ",list2.get(", "0", ").get(", "\"staff_code\"", "));\n    retMap.put(", "\"staff_name\"", ",list2.get(", "0", ").get(", "\"staff_name\"", "));\n    return retMap;\n  }\n  ", "//口径3", "\n  String sql3 = “zzzzzzzzzz”；\n  List<Map<String, String>> list3= ", "DBUtil", ".", "get", "SimpleQuery()", ".query", "ForMapListBySql(", "sql1", ",", "new", " String[] {参数})", ";\n ", "if", " (!", "ListUtil", ".", "is", "Empty(", "list1", ")", "){\n    retMap.put(", "\"staff_code\"", ",list3.get(", "0", ").get(", "\"staff_code\"", "));\n    retMap.put(", "\"staff_name\"", ",list3.get(", "0", ").get(", "\"staff_name\"", "));\n    return retMap;\n  }\n  ", "//口径4", "\n  String sql3 = “wwwwwww”；\n  List<Map<String, String>> list4= ", "DBUtil", ".", "get", "SimpleQuery()", ".query", "ForMapListBySql(", "sql1", ",", "new", " String[] {参数})", ";\n   ", "if", " (!", "ListUtil", ".", "is", "Empty(", "list1", ")", "){\n    retMap.put(", "\"staff_code\"", ",list4.get(", "0", ").get(", "\"staff_code\"", "));\n    retMap.put(", "\"staff_name\"", ",list4.get(", "0", ").get(", "\"staff_name\"", "));\n    return retMap;\n  }\n    retMap.put(", "\"code\"", ",", "\"1\"", ");\n    retMap.put(", "\"msg\"", ",", "\"查无结果\"", ");\n    retMap.put(", "\"staff_code\"", ",", "\"\"", ");\n    retMap.put(", "\"staff_name\"", ",", "\"\"", ");\n    return retMap;\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I'd probably use a couple a queuing goroutine. Starting with the data structures in the &lt;a href=\"http://golang.org/pkg/container/heap/#Init\" rel=\"nofollow\"&gt;PriorityQueue example&lt;/a&gt;, I'd build a function like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://play.golang.org/p/hcNFX8ehBW\" rel=\"nofollow\"&gt;http://play.golang.org/p/hcNFX8ehBW&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func queue(in &amp;lt;-chan *Item, out chan&amp;lt;- *Item) {\n    // Make us a queue!\n    pq := make(PriorityQueue, 0)\n    heap.Init(&amp;amp;pq)\n\n    var currentItem *Item       // Our item \"in hand\"\n    var currentIn = in          // Current input channel (may be nil sometimes)\n    var currentOut chan&amp;lt;- *Item // Current output channel (starts nil until we have something)\n\n    defer close(out)\n\n    for {\n        select {\n        // Read from the input\n        case item, ok := &amp;lt;-currentIn:\n            if !ok {\n                // The input has been closed. Don't keep trying to read it\n                currentIn = nil\n                // If there's nothing pending to write, we're done\n                if currentItem == nil {\n                    return\n                }\n                continue\n            }\n\n            // Were we holding something to write? Put it back.\n            if currentItem != nil {\n                heap.Push(&amp;amp;pq, currentItem)\n            }\n\n            // Put our new thing on the queue\n            heap.Push(&amp;amp;pq, item)\n\n            // Turn on the output queue if it's not turned on\n            currentOut = out\n\n            // Grab our best item. We know there's at least one. We just put it there.\n            currentItem = heap.Pop(&amp;amp;pq).(*Item)\n\n            // Write to the output\n        case currentOut &amp;lt;- currentItem:\n            // OK, we wrote. Is there anything else?\n            if len(pq) &amp;gt; 0 {\n                // Hold onto it for next time\n                currentItem = heap.Pop(&amp;amp;pq).(*Item)\n            } else {\n                // Oh well, nothing to write. Is the input stream done?\n                if currentIn == nil {\n                    // Then we're done\n                    return\n                }\n\n                // Otherwise, turn off the output stream for now.\n                currentItem = nil\n                currentOut = nil\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here's an example of using it:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func main() {\n    // Some items and their priorities.\n    items := map[string]int{\n        \"banana\": 3, \"apple\": 2, \"pear\": 4,\n    }\n\n    in := make(chan *Item, 10) // Big input buffer and unbuffered output should give best sort ordering.\n    out := make(chan *Item)    // But the system will \"work\" for any particular values\n\n    // Start the queuing engine!\n    go queue(in, out)\n\n    // Stick some stuff on in another goroutine\n    go func() {\n        i := 0\n        for value, priority := range items {\n            in &amp;lt;- &amp;amp;Item{\n                value:    value,\n                priority: priority,\n                index:    i,\n            }\n            i++\n        }\n        close(in)\n    }()\n\n    // Read the results\n    for item := range out {\n        fmt.Printf(\"%.2d:%s \", item.priority, item.value)\n    }\n    fmt.Println()\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that if you run this example, the order will be a little different every time. That's of course expected. It depends on exactly how fast the input and output channels run.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["开始-等待优先级队列中的下一个项目（如果为空）", ["\n\n", "I am trying to implement a priority queue to send json objects through a network socket based on priority. I am using the ", "container/heap", " package to implement the queue. I came up with something like this:", "\n\n", "for {\n    if pq.Len() > 0 {\n        item := heap.Pop(&pq).(*Item)\n        jsonEncoder.Encode(&item)\n    } else {\n        time.Sleep(10 * time.Millisecond)\n    }\n}\n", "\n\n", "Are there better ways to wait for a new item than just polling the priority queue?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;是的&amp;#xff0c;这个和数学的运算规律是一样&amp;#xff0c;唯一你需要注意的是C语言中5/2的值是2&amp;#xff0c;不是2.5。&lt;br /&gt;5.0/2或者5/2.0或者5.0/2.0&amp;#xff0c;他们的值才为2.5。也就是说&amp;#xff0c;在C语言中&amp;#xff0c;你要整除保留小数的话&amp;#xff0c;分子分母至少有一个是浮点型。&lt;br /&gt;这个题的最终结果是3.8&amp;#xff0c;即3.6-2&amp;#43;1.2&amp;#43;1&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["小白菜鸡提问！这个运算的优先级是直接从左到右吗？", ["这个我算着是C选项，实在搞不懂这个运算的先后顺序了😭", "这个是和数学一样先乘除后加减吗😞"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;仅供参考&amp;#xff0c;望采纳~&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; ch;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; s1,s2;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Enter characters:&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;s1);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;((ch&amp;#61;&lt;span class=\"hljs-built_in\"&gt;getchar&lt;/span&gt;())!&amp;#61;(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#61;&amp;#39;&lt;/span&gt;))&lt;span class=\"hljs-comment\"&gt;//当s2&amp;gt;10时会出错&amp;#xff1b; &lt;/span&gt;\n    {    \n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;s2);\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt;(ch)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:s1&amp;#61;s1&amp;#43;s2;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:s1&amp;#61;s1-s2;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:s1&amp;#61;s1*s2;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:s1&amp;#61;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;)s1/s2;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,s1);\n   \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/317123531866198.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["简单模拟运算器工作，按从左到右顺序计算，4种运算符优先级相同", ["问题遇到的现象和发生背景", "\n", "int", " ", "main", "(", "void", ")", "\n", "{\n    ", "char", " ch;\n    ", "int", " s1,s2;\n    ", "printf", "(", "\"Enter characters:\"", ");\n    ch=", "getchar", "();\n    s1=ch-", "'0'", ";\n    ", "while", "((ch=", "getchar", "())!=(", "'='", "))", "//当s2>10时会出错； ", "\n    {    \n        s2=", "getchar", "()-", "'0'", ";\n        ", "switch", "(ch)\n        {\n            ", "case", " ", "'+'", ":s1=s1+s2;", "break", ";\n            ", "case", " ", "'-'", ":s1=s1-s2;", "break", ";\n            ", "case", " ", "'*'", ":s1=s1*s2;", "break", ";\n            ", "case", " ", "'/'", ":s1=(", "float", ")s1/s2;", "break", ";\n            ", "default", ":;", "break", ";\n        }\n    }\n    ", "printf", "(", "\"%d\"", ",s1);\n    \n    ", "return", " ", "0", ";\n}\n\n", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "当输入的数>=10是，程序会死机，求解决方法；"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;不用加呀&lt;br /&gt;p指向x&amp;#xff0c;那么p其实就是x&lt;br /&gt;p才能点出pk来&lt;br /&gt;你先取得它的值&amp;#xff0c;它一个struct类型哪来的值呀&amp;#xff0c;要里面的元素才有值&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["B和C不用加括号吗？？.和->的优先级大于*啊", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I would do it like so (Note that I've changed the the value of the name attributes on the form elements):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;form id=\"form1\" name=\"form1\" method=\"post\" action=\"\"&amp;gt;\n&amp;lt;input type=\"number\" name=\"lang[php]\" required=\"required\" max=\"3\" min=\"1\"/&amp;gt;PHP     &amp;lt;br /&amp;gt;\n&amp;lt;input type=\"number\" name=\"lang[python]\" required=\"required\" max=\"3\" min=\"1\"/&amp;gt;Python &amp;lt;br /&amp;gt;\n&amp;lt;input type=\"number\" name=\"lang[ruby]\" required=\"required\" max=\"3\" min=\"1\"/&amp;gt;Ruby &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;\n&amp;lt;input type=\"submit\" name=\"button\" id=\"button\" value=\"Submit\" /&amp;gt;\n&amp;lt;/form&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And in the php:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;//Get the form results (which has been converted to an associative array) from the $_POST super global\n$langs = $_POST['lang'];\n\n//Sort the values by rank and keep the key associations.\nasort($langs, SORT_NUMERIC );\n\n//Loop over the array in rank order to print out the values.\nforeach($langs as $lang =&amp;gt; $rank)\n{\n   //echo out here first, second, and third rank with each iteration respectively.\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;a href=\"http://php.net/manual/en/function.asort.php\" rel=\"nofollow\"&gt;asort&lt;/a&gt; function simply sorts the array by value while maintaining key association.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "优先级", "Question": ["如何在PHP中对编号复选框表单中的值进行排名（优先级排序）", ["\n\n", "I am using the code below to ask users to rank which programming language they are more comfortable with.\nThe users need to rank from 1-3 (1 being the one they are most comfortable with)", "\n\n", "<form id=\"form1\" name=\"form1\" method=\"post\" action=\"\">\n<input type=\"number\" name=\"php\" required=\"required\" max=\"3\" min=\"1\"/>PHP     <br />\n<input type=\"number\" name=\"python\" required=\"required\" max=\"3\" min=\"1\"/>Python <br />\n<input type=\"number\" name=\"ruby\" required=\"required\" max=\"3\" min=\"1\"/>Ruby <br /><br />\n<input type=\"submit\" name=\"button\" id=\"button\" value=\"Submit\" />\n</form>\n", "\n\n", "Once the user prioritizes the programming languages and hits submit, how can I on the next page echo the ranking selection? (e.g. Your first choice is x, your second choice is y and your third choice is z) ", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你先理解表达式的意思吧&amp;#xff0c;w&amp;lt;x&amp;#xff1f;w:y&amp;lt;z&amp;#xff1f;y:Z&lt;br /&gt;这一段表示的意思就是如果w&amp;lt;x&amp;#xff0c;那么就取w的值&amp;#xff1b;否则 如果y&amp;lt;z就取y的值&amp;#xff0c;否则取z的值&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["为什么是这个答案呢，优先级问题吗？我是从左到右算的", []], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&amp;amp;&amp;amp;和||优先级一致啊&lt;br /&gt;就像加减法优先级一样&lt;br /&gt;乘除法优先级一样&lt;br /&gt;遇到优先级一样的&amp;#xff0c;按从左往右的顺序计算&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["这为什么按从左往右算？不是按优先级先算&&再||", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;用字符a来举例说明 &lt;/p&gt;\n\n&lt;p&gt;字符:a&lt;br /&gt;\nBin(二进制):01100001 &lt;br /&gt;\nDec十进制 :97&lt;br /&gt;\nHex(十六进制):61     &lt;br /&gt;\n当打印的时候 %c 输出的是字符 printf(&amp;#34;%c &amp;#34;,97)  输出的 a&lt;/p&gt;\n\n&lt;p&gt;*c&amp;#43;1&amp;#61;97&amp;#43;1&amp;#61;98    printf(&amp;#34;%c &amp;#34;,98)  输出 b&lt;/p&gt;\n\n&lt;p&gt;同理如果  printf(&amp;#34;%d &amp;#34;,&amp;#39;a&amp;#39;) 会输出  97 &lt;/p&gt;\n\n&lt;p&gt; printf(&amp;#34;%x &amp;#34;,&amp;#39;a&amp;#39;&amp;#43;1) 会输出  字符a十六进制的值&amp;#43;1 62   &lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["这里的*c=*c+1不会被转化为int吗 int的优先级高于char", ["\n\n", " "]], "Tag": "程序设计"}
{"Answer": "&lt;ol&gt;&lt;li&gt;&lt;code class=\"language-javascript\"&gt;&amp;amp;&amp;amp;&lt;/code&gt; 的优先级比 &lt;code class=\"language-javascript\"&gt;&amp;#61;&amp;#61;&lt;/code&gt; &lt;strong&gt;低&lt;/strong&gt;&amp;#xff1b;&lt;/li&gt;&lt;li&gt;如果需要先执行优先级低的语句&amp;#xff0c;可将低优先级语句使用&lt;strong&gt;括号&lt;/strong&gt;括起来&amp;#xff0c;那么就会优先计算括号中的算式。&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "优先级", "Question": ["&&的优先级比==高 那么以下的代码是什么意思 如果我想要表达b==c同时 d==e怎么搞", []], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;不一样 题目是取k自加一的相反值&amp;#xff0c;B是取k的相反值加一&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["为什么答案是A ，不能是B？按优先级来++在-前面，但也要先赋值给表达式，在对k做+,那为什么B不行", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;自定义验证&amp;#xff0c;了解下&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["el-form表单校验时，输入框输入内容必须为数字项且非必填怎么校验", ["现在有一个el-input，element好像不允许这种校验出现。", "\n", "<", "el", "-form-item label=", "\"优先级：\"", "\n                  prop=", "\"priority\"", ">\n      <", "el", "-", "input", " v-model.", "number", "=", "\"formData.priority\"", "\n                placeholder=", "\"请输入权限优先级\"", "\n                clearable></", "el", "-", "input", ">\n    </", "el", "-form-item>\n", "\n", "我试过网上的方法，但是这样在不填时依然会不让提交表单", "\n", "rules:[\n  priority: [\n          { required: ", "false", ", ", "type", ": ", "'number'", ", message: ", "'优先级必须为数字值'", ", ", "trigger", ": ", "'blur'", " }\n        ]\n]\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;, &amp;amp;c);\n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (c)\n    {\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;4&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;3&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;6&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;8&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#61;&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;14&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;-1&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["c语言简单运用，怎么简单怎么来急", ["输入一个单字符的运算符（+ - * / % > & =)，输出它的优先级。+- 优先级是 4， * ，/， % 优先级 3，> 和< 优先级6，&优先级8，=优先级14。 如果是其它符号，结果-1.", "输入*", "输出3"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-xml\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;job&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; job_number;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; priority;\n};\njob priority_queue[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; length&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;   &lt;span class=\"hljs-comment\"&gt;//队列中的作业个数 全局变量&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; allnumber&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;    &lt;span class=\"hljs-comment\"&gt;//作业号&amp;#xff0c;依次递增&amp;#xff0c;赋给增加的作业&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;remove&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(length&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;There is no job!\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; maxpriority&amp;#61;&lt;span class=\"hljs-number\"&gt;9999&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; number&amp;#61;&lt;span class=\"hljs-number\"&gt;9999&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sign&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;//遍历一次队列&amp;#xff0c;找到最高优先级的作业&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;length;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(priority_queue[i].priority&amp;lt;maxpriority){\n            maxpriority &amp;#61; priority_queue[i].priority;\n            number &amp;#61; priority_queue[i].job_number;\n            sign &amp;#61; i;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(priority_queue[i].priority&amp;#61;&amp;#61;maxpriority)\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(priority_queue[i].job_number&amp;lt;number){\n                maxpriority &amp;#61; priority_queue[i].priority;\n                number &amp;#61; priority_queue[i].job_number;\n                sign &amp;#61; i;\n            }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d\\n&amp;#34;&lt;/span&gt;,priority_queue[sign].job_number,priority_queue[sign].priority);\n\n    &lt;span class=\"hljs-comment\"&gt;//找到了作业&amp;#xff0c;删除它&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//从后往前依次覆盖&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;sign;i&amp;lt;length&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        priority_queue[i] &amp;#61; priority_queue[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n    &lt;span class=\"hljs-comment\"&gt;//作业个数减一&lt;/span&gt;\n    length--;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Remove succeeds!\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;add&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{ &lt;span class=\"hljs-comment\"&gt;//控制台输入一个优先级&amp;#xff0c;系统自动赋予作业号&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Please input the priority: &amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; p;  &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;p);\n    &lt;span class=\"hljs-comment\"&gt;//构成一个作业&amp;#xff1a;作业号&amp;#xff0c;优先级  并且加在队列最后&lt;/span&gt;\n    priority_queue[length] &amp;#61; {allnumber&amp;#43;&amp;#43;,p};\n    &lt;span class=\"hljs-comment\"&gt;//作业个数加一&lt;/span&gt;\n    length&amp;#43;&amp;#43;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d\\n&amp;#34;&lt;/span&gt;,priority_queue[length&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;].job_number,priority_queue[length&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;].priority);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Add succeeds!\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;list&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;List:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-comment\"&gt;//一个for循环遍历整个数组&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;length;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d\\n&amp;#34;&lt;/span&gt;,priority_queue[i].job_number,priority_queue[i].priority);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Over!\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;menu&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Please input your operation:&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; operation;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,&amp;amp;operation);\n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (operation) {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;R&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;remove&lt;/span&gt;();&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;add&lt;/span&gt;();&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;L&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;list&lt;/span&gt;();&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;: &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Illegal input.\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;menu&lt;/span&gt;();\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;menu&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/16256333605271.png\" /&gt;&lt;/p&gt;\n&lt;p&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/16256333750022.png\" /&gt;&lt;/p&gt;\n&lt;p&gt;直接复制粘贴就能运行。&lt;/p&gt;\n&lt;p&gt;使用数组存储作业。每次出队时&amp;#xff0c;先找到优先级最高的作业&amp;#xff0c;然后删除它。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["数据结构（用无序顺序表实现优先队列）", ["需要用c语言编程，加点注释。", "\n", "假设进入计算机系统的作业（job）被赋予一个作业号（job number）和一个从0～9之中的优先级（priority），0表示最大优先级，9表示最小优先级。等待被作业执行的作业的作业号被保存在一个优先级队列（priority queue）中。", "编写一个程序，使用优先级队列来存放作业，并允许用户选择一下菜单操作：R（删除remove）、A（增加add）和L（列举list）。", "对于R，读出当前优先级最高的作业号并把它从优先级队列中删除，如果当前优先级最高的作业有多个，则把作业号小的作业从优先队列中删除；对于A，读入作业号和优先级，然后按上述规则把它加入到优先级队列中；对于L，则列出队列中的所有作业号及其优先级。", "作业号可用一个整数表示，可在作业进入系统时由系统赋予。", "设计适当的数据元素类型，用无序顺序表实现优先队列并写出验证代码验证各个操作，完成上述计算机系统的作业调度的演示方案。新来的作业插入到表尾。假定作业号可以反映作业被加入的先后次序，因此和作业优先级一起可以唯一识别一个作业。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;实验表明如果优先级都被设置为0&amp;#xff0c;不参与DR和BDR选举&amp;#xff0c;无法成功建立邻居关系。所以题目的答案是错误的。&lt;br /&gt;实验结果如下图&amp;#xff1a;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/061970948456159.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["帮看个问题，关于OSPF DR/BDR选举问题", ["如果两台运行 OSPF 的路由器的 Router Priority 均被设置为 0， 那么则会进一步比较两台路由器的 Router ID，", "Router ID 大的会被选举为 DR， Router ID 小的会被选举为 BDR", "A.TRUE", "B.FALSE", "答案： A", "求帮忙看看吧，这个为什么是对的，选DR/BDR到底是看接口优先级还是看路由器优先级？", "我搜到的规则是这么描述的：", "DR的选举规则如下：", "\n", "（1）比较接口的优先级（priority），越大越优，默认优先级为1（范围：0-255。其中优先级为0，表示弃权）；", "\n", "（2）如果优先级相同的情况，则比较设备的router id，越大越优；", "（3）优先以逻辑接口地址作为router id 没有逻辑接口就以物理接口地址作为R ID 大的为优先", "综上，DR选举规则：首先路由器中仅有一台优先级（priority）最大的，那就是DR了；如果存在两台路由器优先级相同的情况，router id较大的就是DR，次小的即为BDR了。", "按照这个规则第一条优先级为0不是弃权吗？怎么还会选举DR/ BDR，我学秃了，想了半天没看懂"]], "Tag": "程序设计"}
{"Answer": "其他线程都能跑到CPU。只不过线程可以绑定CPU", "Konwledge_Point": "优先级", "Question": ["windows核心编程     线程和特定cpu关联", ["当一个线程和特定cpu关联时（调用setthreadaffinitymask），其他线程能", "\n不能使用该cpu？", "\n假如依次设置每个线程的关联性掩码如下：", "\n 线程      优先级    关联性掩码                结果", "\n A             4            0x00000001              cpu0", "\n B             8            0x00000003               ？", "\n C            6             0x00000002              ？", "\n 在这种情况下B能不能再cpu0上运行（同时它的优先级要高于a的优先级）？", "\n C能不能再cpu1上运行？", "\n 为什么？", "\n （我的理解时windows是分时系统。B应该可以在cpu0上运行，同样由于它的优先级     高他会先执行。同时c在cpu1没有其他可调用的更高优先级的线程时也能执行？比如", "\n B 在cpu0上执行时", "\n\n", "）"]], "Tag": "程序设计"}
{"Answer": "```\r\n#include&lt;stdio.h&gt;\r\n#include&lt;stdlib.h&gt;\r\n#include&lt;string.h&gt;\r\n#include&lt;windows.h&gt;\r\n#define MAXSIZE 100\r\ntypedef struct ElemType\r\n{\r\n\tint level;\r\n\tchar name[20];\r\n\tchar gender;\r\n\tchar ID[20];\r\n\r\n}QelemType;\r\ntypedef struct{\r\n\tQelemType *base;\r\n\tint front;\r\n\tint rear;\r\n}squene;\r\nvoid Initquene(squene *s){\r\n\ts-&gt;base=(QelemType *)malloc(MAXSIZE * sizeof(QelemType));\r\n\tif(!s-&gt;base)\r\n\t\texit(-1);\r\n\ts-&gt;front=0;\r\n\ts-&gt;rear=0;\r\n}\r\nvoid enquene(squene *s,QelemType e){\r\n\tif((s-&gt;rear+1)%MAXSIZE==s-&gt;front){\r\n\t\tprintf(\"duimanb\");\r\n\t\texit(0);\r\n\t}\r\n\ts-&gt;base[s-&gt;rear]=e;\r\n\ts-&gt;rear=(s-&gt;rear+1)%MAXSIZE;\r\n}\r\nvoid dequene(squene *s,QelemType *e){\r\n\tif(s-&gt;rear==s-&gt;front){\r\n\t\tprintf(\"栈空\");\r\n\t\texit(-1);\r\n\t}\r\n\t*e=s-&gt;base[s-&gt;front];\r\n\ts-&gt;front=(s-&gt;front+1)  % MAXSIZE;\r\n}\r\nint length(squene s){\r\n\treturn (s.rear-s.front+MAXSIZE) % MAXSIZE;\r\n}\r\n\r\nint main()\r\n{\r\n\tint i,j;\r\n\tint n;\r\n\tsquene Q1;\r\n\tQelemType *e,t;\r\n\tInitquene(&amp;Q1);\r\n\tprintf(\"请输入前来就诊的病人数量：\");\r\n\tscanf(\"%d\",&amp;n);\r\n\te = (QelemType *)malloc(n*sizeof(QelemType));\r\n\tfor(i=0;i&lt;n;i++)\r\n\t{\r\n\t\tprintf(\"\\n请输入第%d个病人的优先级：\",i+1);\r\n\t\tscanf(\"%d\",&amp;e[i].level);\r\n\t\tprintf(\"\\n请输入第%d个病人的姓名：\",i+1);\r\n\t\tscanf(\"%s\",e[i].name);\r\n\t\tfflush(stdin);\r\n\t\tprintf(\"\\n请输入第%d个病人的性别：\",i+1);\r\n\t\tscanf(\"%c\",&amp;e[i].gender);\r\n\t\tprintf(\"\\n请输入第%d个病人的身份证：\",i+1);\r\n\t\tscanf(\"%s\",e[i].ID);\r\n\t}\r\n\r\n\tfor (i=0;i&lt;n-1;i++)\r\n\t{\r\n\t\tfor (j=0;j&lt;n-i-1;j++)\r\n\t\t{\r\n\t\t\tif (e[j].level&lt;e[j+1].level)\r\n\t\t\t{\r\n\t\t\t\tt = e[j];\r\n\t\t\t\te[j] = e[j+1];\r\n\t\t\t\te[j+1] = t;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (i=0;i&lt;n;i++)\r\n\t{\r\n\t\tenquene(&amp;Q1,e[i]);\r\n\t}\r\n\r\n\tfor (i=0;i&lt;n;i++)\r\n\t{\r\n\t\tdequene(&amp;Q1,&amp;t);\r\n\t\tprintf(\"办理业务 姓名：%s，身份证号：%s,性别：%c，优先级：%d\\n\", t.name,t.ID, t.gender,t.level);\r\n\t}\r\n\r\n\tfree(e);\r\n\te=NULL;\r\n\tsystem(\"pause\");\r\n\treturn 0;\r\n\r\n}\r\n\r\n```", "Konwledge_Point": "优先级", "Question": ["医院排队就诊问题（C语言实现）求大神帮忙查看一下如何修改这些错误 （续）", ["问题描述：", "\n医院急诊科室，有医生1名", "\n现有病人7名，先后到达", "\n病人病情轻重各有不同（分3级，3级最重，1级最轻），重症的优先就诊；病症相同的，先来的先就诊。", "\n模型假设：", "\n1.病人挂完号后进入对应的科室，每位病人属性包括姓名，性别，和身份证号", "\n2.一开始的时候，医生空闲（等待病人）。", "\n3.有护士根据病人病情，给出病情优先级后，再排队。", "\n4.排队的病人按照先后次序排队，重症的优先就诊，病症相同的，先来的先就诊。。", "\n5.一位医生每次只能看一个病人。", "\n解决方案模型：", "\n1. 程序模拟医院排队就诊，程序开始输入病人资料（包括优先级，姓名，性别，和身份证号）。", "\n2. 设置一个病人的优先队列，按照优先级由高到低，分段排队，最开头的是优先级最高的病人；如果优先级相同，那么按照先来后到的顺序排队。", "\n3. 对病人队列有两种操作，pop与push，医生每次从病人队列里面pop一个病人，并打印病人信息（包括优先级，姓名，性别，和身份证号），直到队列空。", "\n\n", "\n", "请大佬继续补充回答", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-commonlisp\"&gt;&lt;span class=\"hljs-meta\"&gt;%&lt;/span&gt; *  /  同级&amp;#xff0c;从左到右\n有&lt;span class=\"hljs-comment\"&gt;()&lt;/span&gt;先算&lt;span class=\"hljs-comment\"&gt;()&lt;/span&gt;内\n\na&lt;span class=\"hljs-meta\"&gt;%&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;*&lt;span class=\"hljs-comment\"&gt;(int)&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;(x&amp;#43;y)&lt;/span&gt;&lt;span class=\"hljs-meta\"&gt;%&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;/&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;\n&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;*&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;&lt;span class=\"hljs-meta\"&gt;%&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;/&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;\n&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;/&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;\n&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n最后加个x就是&lt;span class=\"hljs-number\"&gt;2.5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["有人能告诉我这怎么算吗", ["顺便把优先级说一下，谢谢啦"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;优先级一样的&amp;#xff0c;从左到右运算。结果&amp;#61;48&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["Java中*和%谁先运算", ["假设int a=1,请问下面的结果是什么？", "a=45+43%5*(23 * 3%2)  里面*和%的运算符优先级谁更高，还是说两个优先级一样"]], "Tag": "程序设计"}
{"Answer": "优先级高只能说明多个线程抢占时间片时，优先级高的有更大的概率先得到时间片的概率大些，也就是高优先级的有大概率先分配运行。但这不是绝对的，\r\n当处理器为多核时，优先级高的线程和优先级低的线程都有可以先执行。", "Konwledge_Point": "优先级", "Question": [" java中线程的问题~~~", ["高优先级的线程比低优先级的线程运行速度快，这句话对吗？", "\n。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;解决方案&amp;#xff1a;&lt;br /&gt;方案一&amp;#xff1a;&lt;br /&gt;使用Redis &amp;#43; MQ &amp;#43; 任务调度&amp;#xff1b;业务伪逻辑&amp;#xff1a;&lt;br /&gt;1、封装统一发送命令的接口&amp;#xff0c;入参为命令抽象对象集合、设备ID。命令抽象对象集合有优先级字段&lt;br /&gt;2、对命令集合进行排序&lt;br /&gt;3、设备ID最为redis的Key&amp;#xff0c;判断redis中是否已存在&amp;#xff0c;如果不存在&amp;#xff0c;则直接推送MQ&amp;#xff0c;注意MQ使用事务消息&amp;#xff0c;这样可以避免8秒等待&lt;br /&gt;4、如果redis中有该设备ID&amp;#xff0c;去除value&amp;#xff0c;value为已发送成功的命令&amp;#xff0c;循环判断当前命令是否已存在&amp;#xff0c;若已存在则跳过&amp;#xff0c;否则继续发送MQ&amp;#xff0c;并将成功的发送的MQ添加到该value集合里&lt;br /&gt;5、推送MQ失败的命令单独封装为一个有设备ID和命令的对象&amp;#xff0c;并存储到redis或持久化到DB中&amp;#xff0c;使用任务调度补偿重试&lt;/p&gt;\n&lt;p&gt;方案二&amp;#xff1a;&lt;br /&gt;线程池 &amp;#43; 线程安全队列&lt;br /&gt;1、使用线程池管理要推送的命令集合&amp;#xff0c;每一个线程对应一个设备ID&lt;br /&gt;2、要推送的命令集合进行去重和排序&lt;br /&gt;3、使用有界队列避免内存损耗&amp;#xff0c;自定义拒绝策略&amp;#xff0c;避免命令丢失&lt;br /&gt;4、要推送的命令集合注意使用线程安全的队列&lt;br /&gt;5、任何线程都等待8秒响应&amp;#xff0c;不要释放资源&amp;#xff0c;如果发送失败&amp;#xff0c;则存放到失败的共享数据源里&lt;br /&gt;6、单独起一个线程&amp;#xff0c;比如守护线程&amp;#xff0c;对发送失败的数据进行重试机制&lt;/p&gt;\n&lt;p&gt;这是我目前能想到的&amp;#xff0c;推荐方案一&amp;#xff0c;方案二存在集群环境的风险。  如果不明白可以私信讨论&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["求物联网，按机器实现命令队列模式下发技术方案", ["问题背景", "\n", "物联网场景下，平台给设备下发命令。同时给一个设备下发命令时会导致命令一个成功一个失败。", "\n", "需求", "\n", "1、按设备实现命令的对列发送，一个发送成功在发送下一个", "2、命令有优先级，优先级高的命令可以实现插队", "3、命令发送后8秒如果未收到回复认为发送失败"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;三个端口就是三个socket&amp;#xff0c;而且readread只能判断当前的socket是否可以写&amp;#xff0c;就像三根水管同时往水池里加水一个道理。另外还要看你的socket是同步模式还是异步模式&amp;#xff0c;在不同的模式下去处理这种优先级的东西比较麻烦。你可以启用三个线程&amp;#xff0c;分别去处理三个端口&amp;#xff0c;然后设置一下线程的优先级&amp;#xff0c;高优先级的端口放在高优先级的线程里&amp;#xff0c;然后做好你的资源同步策略就可以了。&amp;#xff08;比如优先级高的端口接收数据后&amp;#xff0c;优先级低的端口的数据如何处理&amp;#xff1b;多长时间算是同时接收&amp;#xff0c;特别是异步模式&amp;#xff0c;因为是系统受到消息才会发信号给线程&amp;#xff0c;这时候如果低优先级端口的数据先来到&amp;#xff0c;高优先级端口的数据晚了1毫秒来到&amp;#xff0c;这个算不算同时&amp;#xff0c;如果算同时&amp;#xff0c;如何处理&amp;#xff0c;不算同时&amp;#xff0c;又如何处理&amp;#xff0c;等等&amp;#xff0c;你这个需求还是很麻烦的&amp;#xff09;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["Qt客户端接受多端口数据", ["我这里作为客户端要连接服务器的3个端口，三个端口有从高到低的优先级。当3个端口都收到数据的时候，用优先级最高的端口的数据，如果优先级最高的端口没收到数据则使用次级端口的数据。", "\n\n", "一开始尝试不用readyread，用Qtimer从端口里取数据，进而判断三个端口是否有数据。但是发现会丢包，而且包的顺序也变乱了。", "\n\n", "用readyread的话又不不知道该怎么判断", "\n\n", " "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;按正常赋值语句&amp;#xff0c;num &amp;#61; num&amp;#43;&amp;#43;;是从左到右执行的。首先执行的是num&amp;#43;&amp;#43;&amp;#xff0c;后跟&amp;#43;&amp;#43;说明先运算后赋值。拆开就是num自增&amp;#xff0c;并有一个保留值tnum&amp;#xff0c;运算时用的是保留值tnum。&lt;br /&gt;num&amp;#61;num&amp;#43;&amp;#43;;类似于&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; tnum &amp;#61; &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//后跟&amp;#43;&amp;#43;&amp;#xff0c;先保留原值&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//自增计算&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &amp;#61; tnum;&lt;span class=\"hljs-comment\"&gt;//用原值计算表达式&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;不懂的话可以提问&amp;#xff0c;懂了的话不妨点个采纳&amp;#xff0c;谢谢&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["Java中 num=num++；语句是什么意思？为什么num++没有被使用？", ["下面程序运行的结果正确的是: 0 为什么？", "\n", "\n", "public ", "class", " ", "Demo", "{   \n   public ", "static", " ", "void", " main (", "String", " args[]) {\n     ", "int", " ", "num", "=", "0", ";\n     ", "for", " (", "int", " i=", "0", ";i<", "100", ";i++) {\n       ", "num", "=", "num", "++; ", "//警告提示：num++没有被使用过", "\n     }  \n       System.out.println(", "\"num=\"", "+", "num", ");\n    }\n} \n", "\n", "警告：num++没有被使用过。", "\n", "个人理解：", "\n", "①num=num++; 不等价于 num=num; num++;", "② num=num++语句中只执行了num=num；", "\n", "但是问题是：为什么num++不执行了？这不是个for循环吗？如果是按优先级的话，++优先级比=优先级低了。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&amp;amp;&amp;amp;的优先级高&amp;#xff0c;所以&amp;#43;&amp;#43;x || &amp;#43;&amp;#43;y &amp;amp;&amp;amp; &amp;#43;&amp;#43;z相当于&amp;#43;&amp;#43;x || (&amp;#43;&amp;#43;y &amp;amp;&amp;amp; &amp;#43;&amp;#43;z)&amp;#xff0c;&amp;#43;&amp;#43;x后逻辑或的第一条件已经满足&amp;#xff0c;直接不再运行后面括号中的内容&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["++x||++y&&++z; printf(“x=%d\\ty=%d\\tz=%d\\n”,x,y,z);", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "答案是x=1 y=0 z=0", "这个不需要考虑优先级吗？直接从左往右算？&&优先级不是在||前面吗？不用先算&&吗？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/838886329356142.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;上面的字段替换为你自己的字段啊&amp;#xff01;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["MySQL分组查询，多条件依次查询", ["有一张表CS包含字段ID，姓氏，名字（部分数据为null），优先级（1-9），时间（年月日时分秒）", "除了“名字”，其他字段均非空", "现在针对姓氏和名字均相同的数据进行筛选，筛选逻辑为先筛选出优先级最高（1为最高）的数据，再在筛选出的结果中，筛出时间最新的数据。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/357571153636170.png\" /&gt;&lt;/p&gt;&lt;br /&gt;因为你住线程的输出并没有让输出线程名称&amp;#xff0c;把这行改成&amp;#xff1a;  System.out.println( Thread.currentThread().getName() &amp;#43; i);&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于#java#的题目，请各位专家解答！", ["package Helloworld.exer;\n\n", "/*\n测试Thread中的常用方法：\n1 start():启动当前线程：调用当前线程的run（）\n2 run（）：通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中\n3 currentThread（）：静态方法：执行当前代码的线程\n4 getName():获取当前线程的名字\n5 setName():设置当前线程的名字\n6 yield();释放当前cpu的执行权\n7 join:在线程a中调用线程b的join方法，那么线程a就进入阻塞状态直到线程b完全执行完以后，线程啊\n才结束阻塞状态。\n8 STOP():已过时。当执行此方法时，强行结束当前线程\n9sleep();\n10 isAlive（）判断当前线程是否存活\n\n\n线程的优先级：\n1.MAX_PRIORITY  10\nMIN_PRIORITY 1\nNORM_PRIORITY 5\n如何获取和设置当前线程的优先级：\ngerpriority()获取线程优先级\nsetpriority(int p)设置线程优先级-->默认的优先级\n/\n */", "\n", "class", " ", "th", " ", "extends", "  ", "Thread", "{\n    ", "public", " ", "void", " ", "run", "(", ")", " {\n        ", "for", "(", "int", " i=", "0", ";i<", "100", ";++i){\n            ", "try", "{\n\n                final ", "int", " i1 = ", "55", ";\n                sleep(", "1", ");\n        }", "catch", "(InterruptedException e){\n            e.printStackTrace();\n        }\n            ", "if", "(i%", "3", "==", "0", "){\n                System.", "out", ".println(currentThread().getName()+i);\n            }\n            ", "if", "(i%", "2", "==", "0", "){\n             ", "yield", "();\n            }\n\n        }\n    }\n    ", "public", " ", "th", "(", "String name", ")", "{\n        super(name);\n    }\n}\n", "public", " ", "class", " ", "ThreadMethodTest", " {\n    ", "public", " ", "static", " ", "void", " ", "main", "(", "String[] args", ")", " {\n        th t1=", "new", " th(", "\"八重神子\"", ");\n        ", "//设置分线程的优先级", "\n        t1.setPriority(Thread.MAX_PRIORITY);\n        Thread.currentThread().getPriority();\n        t1.getPriority();\n        Thread.currentThread().setName(", "\"主线程\"", ");\n        t1.start();\n        System.", "out", ".println(", "1", ");\n        ", "for", "(", "int", " i=", "0", ";i<", "100", ";++i){\n            ", "if", "(i%", "3", "==", "0", "){\n                System.", "out", ".println(i);\n            ", "if", "(i==", "3", "){\n\n               ", "try", "{\n                   t1.", "join", "();\n               }", "catch", "(Exception e){\n                   e.printStackTrace();\n               }\n            }\n            }\n        }\n        System.", "out", ".println(t1.isAlive());\n    }\n\n}\n\n\n", "\n", "\n", "为什么主线程的名字没有赋上去。前面还是没有线程名字。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;就是“相当于”&amp;#xff0c;然后2*10.5&amp;#61;21.0&amp;#xff0c;然后(4-2)*4.0&amp;#61;8.0&amp;#xff0c;然后这三个当成字符串连起来的结果&lt;/p&gt;\n\n&lt;p&gt;字符串认识&amp;#43;号&amp;#xff0c;不认识*和&amp;#xff08;&amp;#xff09;。所以先完成*和&amp;#xff08;&amp;#xff09;运算&amp;#xff0c;再进行字符串的&amp;#43;运算。&amp;#43;是按顺序执行&amp;#xff0c;所以不会先执行后面的两个数值的&amp;#43;&amp;#xff0c;而是从左到右执行字符串的&amp;#43;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["java string链接链和数据运算优先问题", ["System.out.println（“相当于”+2*10.5+（4-2）*4.0）；\n得出的答案是 相当于21.08.0\n想知道21.08.0是怎么出来的 以及这里string连接的优先级和运算的优先级"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;没办法避免这个现象。&lt;br /&gt;STM32 CPU 指令执行周期不是固定的&amp;#xff0c;有的汇编指令执行的长&amp;#xff0c;有的汇编指令执行的短。&lt;br /&gt;定时器中断(或其他类型的中断)&amp;#xff0c;在中断信号触发中断时&amp;#xff0c;需要等CPU的当前汇编指令执行完成&amp;#xff0c;才跳转到中断服务程序。由于在中断触发时&amp;#xff0c;当前的汇编指令并不固定&amp;#xff0c;汇编指令执行的时间也不固定&amp;#xff0c;就会使中断程序的进入时间有抖动。就会出现你这个现象。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["stm32g30 TIM定时不稳定", ["STM32G030C8T6的定时器出现了定时不稳定的情况", "\n", "\n", "\n", "情况是这样的外部中断检测到上升沿，进入中断将TIM打开，拉高PD3。然后TIM溢出进入中断拉低PD3并关闭TIM。实现一个脉冲信号，用定时器的定时时长决定这个脉冲的宽度，但是这个脉冲宽度在不停变化如上图", "\n", "担心是定时器的优先级问题，于是将优先级改到最高级问题依然存在", "\n", "\n", "有什么办法可以避免出现这种情况吗?"]], "Tag": "程序设计"}
{"Answer": "以上语句等价于\r\nn += m;\r\nm ++;\r\n\r\n如果是n += ++m;的话，则等价于\r\nm ++;\r\nn += m;", "Konwledge_Point": "优先级", "Question": ["n+=m+＋的运算顺序是什么？", ["如题目啦 n+=m+＋的运算顺序是什么？不是＋＋优先级高点吗？"]], "Tag": "程序设计"}
{"Answer": "ConfigCenterConfig configCenter = ConfigManager.getInstance().getConfigCenter().get();\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tDynamicConfigurationFactory factories = ExtensionLoader\r\n\t\t\t                .getExtensionLoader(DynamicConfigurationFactory.class)\r\n\t\t\t                .getExtension(configCenter.toUrl().getProtocol());\r\n\t\t\t    DynamicConfiguration configuration = factories.getDynamicConfiguration(configCenter.toUrl());\r\n\t\t\t    \r\n\t\t\t    //获取全局配置\r\n\t\t\t    String globalString =  configuration.getConfig(configCenter.getConfigFile(), configCenter.getGroup());\r\n\t\t\t    //获取应用配置\r\n\t\t\t    String appString = configuration.getConfig\r\n                        (StringUtils.isNotEmpty(configCenter.getAppConfigFile()) ? configCenter.getAppConfigFile() : configCenter.getConfigFile(),\r\n                        \t\tConfigManager.getInstance().getApplication().get().getName()\r\n                               );\r\n\t\t\t    \r\n\t\t\t    System.out.println(globalString);\r\n\t\t\t    System.out.println(appString);\r\n\t\t\t    //全局配置监听\r\n\t\t\t\tconfiguration.addListener(\"dubbo.dubbo.properties\", new ConfigurationListener() {\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void process(ConfigChangeEvent event) {\r\n\t\t\t\t\t\tSystem.out.println(event.getKey()+\" - \"+event.getValue()+\"  \"+event.getChangeType().name());\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t\t//应用配置监听\r\n\t\t\t\tconfiguration.addListener(\"testAPP.dubbo.properties\", new ConfigurationListener() {\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void process(ConfigChangeEvent event) {\r\n\t\t\t\t\t\tSystem.out.println(event.getKey()+\" = \"+event.getValue()+\"  \"+event.getChangeType().name());\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t});", "Konwledge_Point": "优先级", "Question": ["dubbo zookeeper配置中心", ["dubbo中有没有方法可以获取到配置中心拿到的所有配置？", "\n\n", "或者说与spring中的定义的properties配置合并， 自定义优先级。", "\n\n", "当zookeeper配置发生改变时有没有办法进行监听？", "\n\n", "不想自己去连接zk获取或者进行监听。", "\n\n", "非常感谢。。"]], "Tag": "程序设计"}
{"Answer": "```\r\nimport java.util.Scanner;\r\npublic class Calculate {\r\n\tString m_exp=new String() ,p_exp=new String();\r\n\tint result=0;\r\n\tpublic Calculate(String exp) {\r\n\t \tm_exp=exp;\r\n    }\r\n    int counter(){\r\n    \tint stk[]=new int[100],a,b;\r\n    \tint top=-1;\r\n    \tfor(int i=0;i&lt;p_exp.length();i++){\r\n    \t\tif(p_exp.charAt(i)&gt;='0'&amp;&amp;p_exp.charAt(i)&lt;='9'){\r\n    \t\t\tstk[++top]=Character.getNumericValue(p_exp.charAt(i));\r\n    \t\t}\r\n    \t\telse{\r\n    \t\t\tswitch (p_exp.charAt(i)) {\r\n\t\t\t\tcase '+':\r\n\t\t\t\t\ta = stk[top--];\r\n\t\t\t\t\tb = stk[top--];\r\n\t\t\t\t\tstk[++top]=a+b;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '*':\r\n\t\t\t\t\ta = stk[top--];\r\n\t\t\t\t\tb = stk[top--];\r\n\t\t\t\t\tstk[++top]=a*b;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '-':\r\n\t\t\t\t\ta = stk[top--];\r\n\t\t\t\t\tb = stk[top--];\r\n\t\t\t\t\tstk[++top]=b-a;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '/':\r\n\t\t\t\t\ta = stk[top--];\r\n\t\t\t\t\tb = stk[top--];\r\n\t\t\t\t\tif(a==0)\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\tstk[++top]=b/a;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n    \t\t}\r\n    \t}\r\n    \t\r\n    \tif(top!=0)\r\n    \t\treturn 1;\r\n    \tresult=stk[0];\r\n    \treturn 0;\r\n    }\r\n\tString trans(){\r\n\t\tchar stk[]=new char[100];\r\n\t\tint top=-1;\r\n\t\tString operators=new String(\"+-*/(\");\r\n\r\n\t\tfor (int i = 0; i &lt; m_exp.length(); i++) {\r\n\t\t\tif (operators.indexOf(m_exp.charAt(i)) != -1) {      //出现操作符\r\n\t\t\t\tif (m_exp.charAt(i) == '(')         //栈中添加左括号\r\n\t\t\t\t\tstk[++top]=m_exp.charAt(i);\r\n\t\t\t\telse {\t\t\t\t\t    //操作符的优先级判断\r\n\t\t\t\t\twhile ((top&gt;=0) &amp;&amp; (priority(m_exp.charAt(i)) &lt;= priority(stk[top]))) {    //当栈不为空时，进行优先级判断\r\n\t\t\t\t\t\tp_exp+=stk[top--];   //若当前操作符优先级低于栈顶，弹出栈顶，放到后缀式中\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstk[++top]=(m_exp.charAt(i));             //将当前操作符入栈\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (m_exp.charAt(i) == ')') {            //出现右括号时，将栈中元素一直弹出，直至弹出左括号\r\n\t\t\t\twhile (stk[top] != '(') {\r\n\t\t\t\t\tp_exp+=stk[top--];\r\n\t\t\t\t}\r\n\t\t\t\ttop--;                       //弹出左括号\r\n\t\t\t}\r\n\t\t\telse {           //把操作数加入到后缀式中\r\n\t\t\t\tp_exp+=m_exp.charAt(i);\r\n\t\t\t}\r\n\t \r\n\t\t}\r\n\t\twhile (top&gt;=0) {    //将栈中剩余操作符放到后缀式中\r\n\t\t\tp_exp+=stk[top--];\r\n\t\t}\r\n\t\treturn p_exp;\r\n\t}\r\n\tint priority(char ch){\r\n\t\tif (ch == '*'||ch=='/')\r\n\t\t\treturn 2;\r\n\t\tif (ch == '+'||ch=='-')\r\n\t\t\treturn 1;\r\n\t\tif (ch == '(')\r\n\t\t\treturn -1;\r\n\t\treturn 0;\r\n\t}\r\n   \tpublic static void main(String []args){\t\t//TEST\r\n   \t\tScanner input=new Scanner(System.in);\r\n   \t\tCalculate my=new Calculate(input.next());\t\t\r\n   \t\tmy.trans();\t\t\t//后缀试转换\r\n   \t\tif(my.counter()==1)\r\n   \t\t\tSystem.out.println(\"ERROR\");\r\n   \t\telse\r\n   \t\t\tSystem.out.println(my.result);\r\n   \t}\r\n    \r\n}\r\n```", "Konwledge_Point": "优先级", "Question": ["【求助】  学习作业，求大佬帮忙看看？？？", ["写个程序，来计算表达式的值。比如计算3+1*4、(7+4)*3、3^2+4等这些式子，显然它们等于7、33、13", "\n\n", "你需要处理+、-、*、/、^，分别代表加、减、乘、除、幂，都是双目运算符，同时表达式中还包含括号()。", "\n\n", "注意运算符的优先顺序，先计算括号里的式子，幂运算符优先级最高，其次乘除运算优先级相同，最后是加减运算。同一优先级的运算符按照从左到右顺序计算。", "\n\n", "川农牛觉得这还不简单嘛，分分钟用Java给他写了个出来。", "\n\n", "Input", "\n输入一个不带空格的字符串（长度不超过10000），代表需要计算值的表达式。表达式中只有正整数，除法也请参照正整数除法比如3/2应该等于1。", "\n\n", "输入的字符串保证是一个合法的表达式。", "\n\n", "Output", "\n输出计算出的值，注意这个值有可能会非常非常大。如果表达式中出现了除0错误，直接输出ERROR"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;面向对象三大特性&amp;#xff0c;封装&amp;#xff0c;继承&amp;#xff0c;多态&lt;br /&gt;神tm复用&lt;br /&gt;函数就能复用&lt;br /&gt;面向过程的语言一样要调用函数&lt;br /&gt;这跟面向对象有什么关系&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于面向对象的复用性", ["面向对象的复用性的优先级比那几大特征高吗，做题是问的主要特征选的复用"]], "Tag": "程序设计"}
{"Answer": "http://download.csdn.net/detail/gamefinity/8695843", "Konwledge_Point": "优先级", "Question": ["C#panel中怎么排列里面panel的横排顺序", ["不使用Anchor，dock都是设为靠左，用Z-Level来决定Dock的优先级具体怎么弄？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;C语言中运算符优先级排序如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;分为优先级15级&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1、圆括号【&amp;#xff08;&amp;#xff09;】、下标运算符【[]】、分量运算符的指向结构体成员运算符【-&amp;gt;】、结构体成员运算符【.】&amp;#xff1b;&lt;/p&gt;\n&lt;p&gt;2、逻辑非运算符【!】、按位取反运算符【~】、自增自减运算符【&amp;#43;&amp;#43;】【 --】、负号运算符【-】、类型转换运算符【(类型)】、指针运算符和取地址运算符【*】【&amp;amp;】、长度运算符【sizeof】&amp;#xff1b;&lt;/p&gt;\n&lt;p&gt;3、乘法运算符【*】、除法运算符【/】、取余运算符【%】&amp;#xff1b;&lt;/p&gt;\n&lt;p&gt;4、加法运算符【&amp;#43;】、减法运算符【-】&amp;#xff1b;&lt;/p&gt;\n&lt;p&gt;5、左移动运算符【&amp;lt;&amp;lt;】、右移动运算符【&amp;gt;&amp;gt;】&amp;#xff1b;&lt;/p&gt;\n&lt;p&gt;6、关系运算符【&amp;lt; 】【&amp;gt;】【&amp;lt;&amp;#61;】【 &amp;gt;&amp;#61; 】&amp;#xff1b;&lt;/p&gt;\n&lt;p&gt;7、等于运算符【&amp;#61;&amp;#61;】、不等于运算符【!&amp;#61;】&amp;#xff1b;&lt;/p&gt;\n&lt;p&gt;8、按位与运算符【&amp;amp;】&amp;#xff1b;&lt;/p&gt;\n&lt;p&gt;9、按位异或运算符【^】&amp;#xff1b;&lt;/p&gt;\n&lt;p&gt;10、按位或运算符【|】&amp;#xff1b;&lt;/p&gt;\n&lt;p&gt;11、逻辑与运算符【&amp;amp;&amp;amp;】&amp;#xff1b;&lt;/p&gt;\n&lt;p&gt;12、逻辑或运算符【||】&amp;#xff1b;&lt;/p&gt;\n&lt;p&gt;13、条件运算符【?:】&amp;#xff1b;&lt;/p&gt;\n&lt;p&gt;14、赋值运算符【&amp;#61;】【/&amp;#61;】【*&amp;#61;】【%&amp;#61;】【&amp;#43;&amp;#61;】【-&amp;#61;】【&amp;lt;&amp;lt;&amp;#61;】【&amp;gt;&amp;gt;&amp;#61;】【&amp;amp;&amp;#61;】【^&amp;#61;】【|&amp;#61;】&amp;#xff1b;&lt;/p&gt;\n&lt;p&gt;15、逗号运算符【,】。&lt;/p&gt;\n&lt;p&gt;按位取反运算符【~】 优先级高于 左移动运算符【&amp;lt;&amp;lt;】  所以是先算∽0&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["C语言中位运算的问题", ["请问 ∽0＜＜4 怎么算", "是先算∽0还是先算0＜＜4", "它们之间有优先级吗"]], "Tag": "程序设计"}
{"Answer": "```\r\n#include&lt;stdio.h&gt;\r\n#include&lt;stdlib.h&gt;       //有用到malloc()\r\n#include&lt;conio.h&gt;       //键盘输入\r\n#include&lt;windows.h&gt;\r\n #define MAX 10\r\n\r\n \r\n#define getpch(type)  (type*)malloc(sizeof(type))\r\n#define NULL 0\r\n\r\nstruct task_struct\r\n{\r\n    char name[10];           /*进程名称*/\r\n    int number;              /*进程编号*/\r\n    float come_time;         /*到达时间*/\r\n    float run_begin_time;     /*开始运行时间*/\r\n    float run_time;          /*需要运行时间*/\r\n    float runed_time;\t\t/*运行时间*/\r\n    float run_end_time;      /*运行结束时间*/\r\n    int priority;           /*优先级*/\r\n    int run_flag;          /*调度标志*/\r\n    int start_flag;     //是否为第一次开始调度\r\n} tasks[MAX];\r\nint counter; /*实际进程个数*/\r\nint time_counter=0;\r\nint poutput(); /*调度结果输出*/\r\nint time();\r\nint charge();//判断是否所有的进程都被执行过\r\n \r\nstruct pcb                   //定义进程控制块\r\n{\r\n\tchar name[10];           //定义进程名\r\n\tchar state;              //进程状态\r\n\tint  super;             //进程优先级\r\n\tint  rtime;              //已经运行时间\r\n\tint  ntime;                //运行所需时间\r\n\tstruct pcb* link;           //定义一个队列指针，定义了一个指向pcb结构类型的指针link作为自己的成员函数\r\n}*ready=NULL,*p;                 //定义两个指向pcb结构指针类型的指针ready和p，ready的初值为空,并建立了一个空的就绪队列\r\n\r\n\r\ntypedef struct pcb PCB;           //定义将struct pcb称为PCB\r\n \r\n \r\n \r\n \r\n//***********************************************************************************************\r\nvoid sort()                       //建立对进程进行优先级排列的函数\r\n{\r\n\tPCB *f,*s;                   //定义两个用来排列的指针first和second\r\n\tint insert=0;                    //插入\r\n\tif((ready==NULL)||(p-&gt;super)&gt;(ready-&gt;super))     //比较优先级，优先级最大者，直接插入队首\r\n\t{\r\n\t\tp-&gt;link=ready;                           //\r\n\t\tready=p;                                // 将新建进程放入队首\r\n\t}\r\n\telse                                      //比较进程的优先级，并将其插入适当的地方\r\n\t{\r\n\t\tf=ready;                          //                                                \r\n\t\ts=f-&gt;link;                              //插入新的进程\r\n\t\twhile(s!=NULL)                           //如果第二个进程不为空\r\n\t\t{\r\n\t\t\tif((p-&gt;super)&gt;(s-&gt;super))            //将插入进程与当前进程比较\r\n\t\t\t{                                   //如果插入进程的优先级大于当前进程优先级，则插入当前优先级的前面\r\n\t\t\t\tp-&gt;link=s;\r\n\t\t\t\tf-&gt;link=p;\r\n\t\t\t\ts=NULL;\r\n\t\t\t\tinsert=1;\r\n\t\t\t}\r\n\t\t\telse                                 //否则，将新插入的进程插入到当前进程的后面，向后移指针\r\n\t\t\t{\r\n\t\t\t\tf=f-&gt;link;\r\n\t\t\t\ts=s-&gt;link;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(insert==0)\r\n\t\t\tf-&gt;link=p;                           //将p指针指向队尾\r\n\t}\r\n}\r\n \r\n \r\n \r\n \r\n//**********************************************************************************\r\nvoid input()                                          //建立进程控制块函数\r\n{\r\n\tint i,num;                               \r\n\tprintf(\"*********************最高优先级优先算法**********************\");\r\n\tprintf(\"\\n 请输入进程的数量：\");\r\n\tscanf(\"%d\",&amp;num);              //键盘上输入\r\n\tfor(i=1;i&lt;=num;i++)\r\n\t{\r\n\t\tprintf(\"\\n 进程号No.%d:\",i);\r\n\t\tp=getpch(PCB);\r\n\t\tprintf(\"\\n 请输入进程名：\");\r\n\t\tscanf(\"%s\",p-&gt;name);\r\n\t\tprintf(\"\\n 请输入进程优先级：\");\r\n\t\tscanf(\"%d\",&amp;p-&gt;super);\r\n\t\tprintf(\"\\n 请输入进程所需运行时间：\");\r\n\t\tscanf(\"%d\",&amp;p-&gt;ntime);\r\n\t\tprintf(\"\\n\");\r\n\t\tp-&gt;rtime=0;\r\n\t\tp-&gt;state='w';\r\n\t\tp-&gt;link=NULL;\r\n\t\tsort();                               //调用sort函数进行排序\r\n\t}\r\n}\r\n \r\n \r\n \r\n \r\n \r\n \r\n//********************************************************************************\r\nint space()                 //计算进程控制块个数的函数\r\n{\r\n\tint k=0;\r\n\tPCB*pr=ready;          //pr指向队首进程\r\n\twhile(pr!=NULL)          //pr为空则说明计数完成，就绪队列没到头，就一直输出\r\n\t{\r\n\t\tk++;\r\n\t\tpr=pr-&gt;link;\r\n\t}\r\n\tprintf(\" 进程数量：%d\\n\",k);\r\n\tprintf(\"*********************************************\\n\");\r\n\treturn(k);\r\n}\r\n \r\n \r\n \r\n \r\n \r\n \r\n//************************************************************************************\r\nvoid disp(PCB*pr)   //建立进程显示函数，显示当前的进程\r\n{\r\n\tprintf(\"\\n name\\t state\\t super \\t ntime\\t rtime\\n\");\r\n\tprintf(\" %s  \\t\",pr-&gt;name);\r\n\tprintf(\" %c  \\t\",pr-&gt;state);\r\n\tprintf(\" %d  \\t\",pr-&gt;super);\r\n\tprintf(\" %d  \\t\",pr-&gt;ntime);\r\n\tprintf(\" %d  \\t\",pr-&gt;rtime);\r\n\tprintf(\"\\n\");\r\n}\r\n \r\n \r\n \r\n \r\n \r\n \r\n//****************************************************************************\r\nvoid check()            //建立进程查看函数，查看已经排列好的情况\r\n{\r\n\tPCB* pr;\r\n\tprintf(\"\\n 当前正在运行的进程：%s\",p-&gt;name);\r\n\tdisp(p);                //调用disp()显示已经筛选出来的正在运行的进程\r\n\tpr=ready;                \r\n\tprintf(\"\\n 当前就绪队列状态为：\\n\");\r\n\twhile(pr!=NULL)\r\n\t{\r\n\t\tdisp(pr);             //调用disp()显示已经排列好的就绪队列  \r\n\t\tpr=pr-&gt;link;\r\n\t}\r\n}\r\n \r\n \r\nvoid destroy()      //建立函数，撤销进程\r\n{\r\n\tprintf(\"\\n 进程[%s]已完成.\\n\",p-&gt;name);\r\n\tfree(p);                            //释放空间\r\n}\r\n \r\n \r\n \r\n \r\n \r\n \r\n//********************************************************************************\r\nvoid running()                 //建立进程就绪函数（进程运行时间到，置为就绪状态）\r\n{\r\n\t(p-&gt;rtime)++;                    //运行时间加一\r\n\tif(p-&gt;rtime==p-&gt;ntime)\r\n\t   destroy();                     //\r\n\t else\r\n\t {\r\n\t\t (p-&gt;super)--;             //运行时间减一\r\n\t\t p-&gt;state='w';\r\n\t\t sort();                   //调用一次之后，运行时间时间和运行状态改变后，重新去排序进程\r\n\t }\r\n} \r\n \r\n \r\n//***************************************************************************\r\nvoid HPF()                        //主函数\r\n{\r\n\tint len,h=0;                                //h是用于计算执行次数的\r\n\tchar ch;\r\n\tinput();                                    //调用input函数输入相关的进程信息\r\n\tlen=space();                              //input调用完之后，回到主函数调用space函数得到对列长度\r\n\twhile((len!=0)&amp;&amp;(ready!=NULL))\r\n\t{\r\n\t\tch=getchar();                  //从键盘输入一个字符型数据，把值赋给变量ch,这个是为了每一次被执行，自己手动回车呈现出来，如果没有，则会一次性出现全部被执行的情况\r\n\t\th++;\r\n\t\tprintf(\"\\n The execute number:%d \\n\",h);\r\n\t\tp=ready;\r\n\t\tready=p-&gt;link;\r\n\t\tp-&gt;link=NULL;\r\n\t\tp-&gt;state='R';\r\n\t\tcheck();                         //调用显示正在运行的函数和就绪的函数\r\n        running();        // 调用进程就绪函数,上一个正在运行的进程运行完之后，运行时间加1，将就绪队列里面优先级最高的进程置为运行状态，如果是同优先级，则看哪个先进来，这个不可以运行在check()前，会导致多计算，并出现错误\r\n\t\tprintf(\"\\n 请回车继续......\");\r\n\t\tch=getchar();\r\n\t}\r\n\tprintf(\"\\n\\n 进程已经完成.\\n\");\r\n\tch=getchar();\r\n}\r\n\r\n \r\nvoid RR()\r\n{\r\n\t\r\n    pinput();\r\n    printf(\"时间片轮转算法。\\n\\n\");\r\n    time();\r\n    poutput();\r\n}\r\n \r\nint time()\r\n{\r\n    float time_temp=0;\r\n    int i;\r\n    int j=0;\r\n    int k=0;\r\n\tchar ch;\r\n    struct task_struct  copy_task[MAX];//备份\r\n    for(i=0; i&lt;counter; i++)\r\n    {\r\n        copy_task[j++]=tasks[i];//对进程的初始化信息备份\r\n    }\r\n \r\n    time_temp=tasks[0].come_time;\r\n    while(charge())\r\n    {\r\n        for(i=0; i&lt;counter; i++)\r\n        {\r\n            if(tasks[i].come_time&gt;time_temp)\r\n            {\r\n                time_temp=tasks[i].come_time;\r\n                poutput();\r\n                printf(\"\\n 新进程进入输入...任意字符继续......\");\r\n\t\t\t\tch=getchar();\r\n            }\r\n            if(tasks[i].run_flag==0)//该进程还未结束\r\n            {\r\n                if(tasks[i].start_flag==0)  //该条件成立则说明，该进程是第一次执行，记录开始执行时间\r\n                {\r\n                    tasks[i].run_begin_time=time_temp;\r\n                    tasks[i].start_flag=1;\r\n                }\r\n                if(tasks[i].run_time/time_counter&gt;1)//至少有两倍的时间片未执行\r\n                {\r\n                    tasks[i].run_time=tasks[i].run_time-time_counter;\r\n                    time_temp=time_temp+time_counter;\r\n                    tasks[i].runed_time = tasks[i].runed_time + (float)time_counter;//加上的不知道又没用 \r\n                    poutput();\r\n                    printf(\"\\n 执行一次时间片了..按任意字符继续........\");\r\n\t\t\t\t\tch=getchar();\r\n                }\r\n                else if(tasks[i].run_time-time_counter==0)\r\n                {\r\n                    time_temp=time_temp+time_counter;\r\n                    tasks[i].run_end_time=time_temp;\r\n                    tasks[i].run_flag=1;\r\n                    tasks[i].run_time=copy_task[i].run_time;\r\n                    tasks[i].runed_time = tasks[i].runed_time + (float)time_counter;//加上的不知道又没用 \r\n                    poutput();\r\n                    printf(\"\\n 任务完成..按任意字符继续........\");\r\n\t\t\t\t\tch=getchar();\r\n                }\r\n                else//仅剩下不足一倍的时间片\r\n                {\r\n                    time_temp=time_temp+tasks[i].run_time;\r\n                    tasks[i].runed_time = tasks[i].runed_time + tasks[i].run_time;//加上的不知道又没用 \r\n                    tasks[i].run_end_time=time_temp;\r\n                    tasks[i].run_flag=1;\r\n                    tasks[i].run_time=copy_task[i].run_time;\r\n                    \r\n                    poutput();\r\n                    printf(\"\\n 任务完成..按任意字符继续........\");\r\n\t\t\t\t\tch=getchar();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n \r\nint charge()//判断是否全部进程都执行完毕\r\n{\r\n    int k;\r\n    int super_flag=0;//判断是否全部的进程都执行完毕\r\n    for(k=0; k&lt;counter; k++)\r\n    {\r\n        if(tasks[k].run_flag==0)\r\n        {\r\n            super_flag=1;\r\n            return super_flag;\r\n            break;\r\n        }\r\n        else\r\n        {\r\n            super_flag=0;\r\n        }\r\n    }\r\n    return super_flag;\r\n}\r\n \r\nint pinput() /*进程参数输入*/\r\n{\r\n\tprintf(\"*********************最高优先级优先算法**********************\\n\");\r\n    int i;\r\n    printf(\"请输入进程数量:\\n\");\r\n    scanf(\"%d\",&amp;counter);\r\n    printf(\"请输入时间片长度:\\n\");\r\n    scanf(\"%d\",&amp;time_counter);\r\n    for(i=0; i&lt;counter; i++)\r\n    {\r\n        printf(\"******************************************\\n\");\r\n        printf(\"请输入第 %d 个进程的信息 :\\n\",i+1);\r\n        printf(\"请输入进程的名字:\\n\");\r\n        scanf(\"%s\",tasks[i].name);\r\n        printf(\"请输入进程编号:\\n\");\r\n        scanf(\"%d\",&amp;tasks[i].number);\r\n        printf(\"请输入进程进入时间:\\n\");\r\n        scanf(\"%f\",&amp;tasks[i].come_time);\r\n        printf(\"请输入进程运行时间:\\n\");\r\n        scanf(\"%f\",&amp;tasks[i].run_time);\r\n        printf(\"进程优先级:\\n\");\r\n        scanf(\"%d\",&amp;tasks[i].priority);\r\n        tasks[i].run_begin_time=0;\r\n        tasks[i].run_end_time=0;\r\n        tasks[i].runed_time=0; //运行时间初始化 \r\n        tasks[i].run_flag=0;  //运行是否结束\r\n        tasks[i].start_flag=0;//是否首次被执行\r\n    }\r\n    return 0;\r\n}\r\n \r\nint poutput() /*调度结果输出*/\r\n{\r\n    int i;\r\n    float turn_round_time=0,f1,w=0;\r\n    printf(\"进程名 进程号 到达时间 需要运行时间 开始时间 结束时间 优先级 周转时间 运行时间 运行状态\\n\");\r\n    for(i=0; i&lt;counter; i++)\r\n    {\r\n        f1=tasks[i].run_end_time-tasks[i].come_time;\r\n        turn_round_time+=f1;\r\n        printf(\"%s\\t%d\\t%5.3f\\t%5.3f\\t    %5.3f\\t %5.3f\\t    %d\\t  %5.3f  %5.3f  %d\\n\",tasks[i].name,tasks[i].number,tasks[i].come_time,tasks[i].run_time,tasks[i].run_begin_time,tasks[i].run_end_time,tasks[i].priority,tasks[i].runed_time,f1,tasks[i].run_flag);\r\n    }\r\n    printf(\"average_turn_round_timer=%5.2f\\n\",turn_round_time/counter);\r\n    return 0;\r\n}\r\nvoid main(){\r\n\tint flag = 0;\r\n\tprintf(\"请输入算法规则（0是HPF-&gt;高优先级优先调度算法,1是RR-&gt;时间片轮转调度算法）：\\n\") ;\r\n\tscanf(\"%d\",&amp;flag);\r\n\tif (flag == 0){\r\n\t\tHPF();\r\n\t} else if(flag = 1){\r\n\t\tRR();\r\n\t} else{\r\n\t\tprintf(\"没有其他了算法\"); \r\n\t}\r\n\t\r\n}\r\n\r\n```", "Konwledge_Point": "优先级", "Question": ["在Windows系统下用C/C++编程实现两种处理机调度算法。", ["\n", "CPU Scheduling\n(1)题目描述\n编程实现两种处理机调度算法，可选择的以下组合方式其中之- -: 1) 高优先级优先调度算法和时间片轮转调度算法; 2) 短进程优先调度算法和时间片轮转调度算法; 3) 先入先出调度算法和时间片轮转让调度算法。\n选择-一个调度算法，实现处理机调度。(2)功能实现\no输入提示选择哪种算法，例如:输入“0”--HPF，输入“1”--RR; )\n输入提示创建进程的个数，初始化进程;\nPCB内容:进程名/PID\n运行时间\n优先权\n状态\nPCB指针\n●运行过程中须提示所创建进程的状态信息，包括:已运行的时间,还需运行的时间，阻塞的时间，要阻塞多长时间;\n●提示进程的状态:运行，就绪，阻塞三者之- -;\n●建立进程的PCB， 用队列实现进程就绪队列和阻塞队列的管理。\n可随机输入若干进程，并按所选算法的规则排序，从就绪队首选进程运行，进程在运行过程中定时(或发生调度时)更新各进程的状态信息，\n进程名状态运行时间 剩余运行时间 优先级进程阻塞属性(有阻塞/无阻塞)\n规定系统可接纳的进程的道数，设置后备队列和挂起状态。若内存中进程少于规定道数，可自动从后备队列调度- -作业进入。\n被挂起进程入挂起队列，设置解挂功能用于将指定挂起进程解挂入就绪队列。", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;先括号&amp;#xff0c;再其他&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["逻辑表达式的基本算法", ["像这样有括号的是不是就先算括号里的，就不能根据！的优先级大于算术运算符来算了？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;可以参考文章 &lt;a href=\"https://blog.csdn.net/leinminna/article/details/100180546\" id=\"textarea_1669560594373_1669560712643_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/leinminna/article/details/100180546&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["java识别字符串内容并运算（输入为一行字符串，输出为整数）", ["输入为字符串，输出为整数，运算符合运算优先级法则，如图，第二行中间有个空格。"]], "Tag": "程序设计"}
{"Answer": "Ext中使用了一个iframe垫在下面，z-index为x；阴影z-index为x+1；窗口主体z-index为x+2。(shim即垫片的意思)\r\n\r\n可以参考以下配置/方法的实现：\r\nExt.Layer#getShim, sync, setZIndex", "Konwledge_Point": "优先级", "Question": ["Ext.Window 弹出窗口被视频覆盖", ["1.附件temp.bmp图片是我做的一个页面，其中有视频，当点击弹出Ext.Window 的浮动窗口时，与视频重叠的部分会被覆盖。", "\n请问有什么办法能让浮动窗口的优先级高于视频", "\n\n", "2.附件temp2.bmp图片中的页面，中间绿色的部分是一个flash，右侧有一个浮动的div菜单（交互区），其中与flash重叠的部分被flash覆盖了，但是用打开的Ext.Window浮动窗口却不会被flash覆盖，我想知道ext.window是用的什么机制让他的优先级高于flash"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;不是&amp;#43;&amp;#43;优先级比*高&amp;#xff0c;&amp;#43;&amp;#43;在前是会先进行自增再进行计算&amp;#xff0c;&amp;#43;&amp;#43;在后是会先进行计算再进行自增。&lt;br /&gt;此处&amp;#43;&amp;#43;在后&amp;#xff0c;(x&amp;#43;&amp;#43; * 1/3)等价于(11 * 1/3)&amp;#xff0c;所以结果应该是3&amp;#xff0c;选B&lt;br /&gt;如果答案不是B那就是答案错了&amp;#xff0c;你可以直接运行一下看结果&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["一个简单的问题的，求详解", ["为什么不选B啊？！？(இдஇ; )，求详解", "++优先级比*，\\高，为什么"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;涉及到一个返回值的问题&amp;#xff0c;所有算式都是有返回值的&amp;#xff0c;比如a&amp;#61;1&amp;#xff1b;这个等式的返回值是a&amp;#xff0c;也就是1&amp;#xff1b;&lt;br /&gt;我们再看一个if&amp;#xff08;a&amp;#61;0&amp;#xff09;&amp;#xff0c;注意不是&amp;#61;&amp;#61;。为什么a&amp;#61;0只是一个算式&amp;#xff0c;凭什么if判断会失败&amp;#xff0c;就是因为这个等式返回值的原因。&lt;br /&gt;同理&amp;#xff0c;a&amp;#43;&amp;#43;的返回值是a变化前的值&amp;#xff0c;但是运算a&amp;#43;&amp;#43;后&amp;#xff0c;a的值就会加一。而&amp;#43;&amp;#43;a的返回值是a变化后的值&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["C语言的基础问题++的问题", ["++的优先级不是高于=吗 b=a++和b=++a不都应该是++先运算吗？？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;CSS的优先级是根据样式声明的特殊性值来判断的。&lt;/p&gt;\n&lt;p&gt;选择器的特殊性值分为四个等级&amp;#xff0c;如下&amp;#xff1a;&lt;br /&gt;&amp;#xff08;1&amp;#xff09;标签内选择符x,0,0,0&lt;br /&gt;&amp;#xff08;2&amp;#xff09;ID选择符0,x,0,0&lt;br /&gt;&amp;#xff08;3&amp;#xff09;class选择符/属性选择符/伪类选择符 0,0,x,0&lt;br /&gt;&amp;#xff08;4&amp;#xff09;元素和伪元素选择符0,0,0,x&lt;br /&gt;&lt;a href=\"https://www.cnblogs.com/weblf/articles/13784380.html\" id=\"textarea_1668164288692_1668164332022_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;CSS 面试题&amp;#xff0c;助你查漏补缺 - 蓝色生活 - 博客园&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;1.介绍一下标准的 CSS 的盒子模型&amp;#xff1f;低版本 IE 的盒子模型有什么不同的&amp;#xff1f; 相关知识点&amp;#xff1a; &amp;#xff08;1&amp;#xff09;有两种盒子模型&amp;#xff1a;IE盒模型&amp;#xff08;border-box&amp;#xff09;、W3C标准盒模型&amp;#xff08;content-box&amp;#xff09;&amp;#xff08;2&amp;#xff09;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://common.cnblogs.com/favicon.svg\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.cnblogs.com/weblf/articles/13784380.html&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["有关css的一些问题", ["如何理解样式的优先级，以及它在网页中是如何应用的？还有伪类选择符以及伪元素选择符如何应用？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;因为 c&amp;#43;&amp;#43; 在 || 的 左操作数&amp;#xff0c; 它肯定是要 执行的&amp;#xff0c;它如果为真&amp;#xff0c;后面 就 不计算了&amp;#xff1b; 只不过你这个 后面 因为 &amp;amp;&amp;amp; 优先级高 &amp;#xff0c;算出来 为 1&amp;#xff0c;如果算出来 还是一个表达式 &amp;#xff0c;那这个表达式 是 不执行的。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["&&和||的综合短路", ["为什么式子1没有被短路？它还是执行了c++；如果按照&&的优先级大于||，式子1只能被短路"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;该回答引用ChatGPT &lt;/p&gt;\n&lt;p&gt;以下是时序图&amp;#xff0c;其中每个箭头表示一个进程在一个时间段内运行&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;根据时序图可以计算每个进程的周转时间&amp;#xff08;等待时间&amp;#43;执行时间&amp;#xff09;&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/735989976776123.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;P1&amp;#xff1a;等待时间为0&amp;#xff0c;执行时间为15ms&amp;#xff0c;所以周转时间为15ms。&lt;br /&gt;P2&amp;#xff1a;等待时间为2.5ms&amp;#xff08;P1执行时的切换开销&amp;#xff09;&amp;#xff0c;执行时间为10ms&amp;#xff0c;所以周转时间为12.5ms。&lt;br /&gt;P3&amp;#xff1a;等待时间为7.5ms&amp;#xff08;P1和P2执行时的切换开销&amp;#xff09;&amp;#xff0c;执行时间为5ms&amp;#xff0c;所以周转时间为12.5ms。&lt;br /&gt;P4&amp;#xff1a;等待时间为12.5ms&amp;#xff08;P1、P2和P3执行时的切换开销&amp;#xff09;&amp;#xff0c;执行时间为0ms&amp;#xff08;在时序图的时间跨度内未执行&amp;#xff09;&amp;#xff0c;所以周转时间为12.5ms。&lt;br /&gt;注意&amp;#xff0c;这里计算的周转时间是指一个进程从被提交到被完成所需的总时间&amp;#xff0c;而不是仅指执行时间。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["（OS)操作系统的两道习题", ["一个系统采用了基于优先级的抢占式调度，一个进程的初始优先级每5毫秒增加1。在一个记录的时间跨度中，系统有四个进程，P1、P2、P3和P4，如下表所示", "画一个类似于教科书中图3.7的时序图，并找出每个进程的周转时间。假设调度员对一个进程的切换需要2.5毫秒。", "这个是3.7", "\n", "请考虑以下的页面引用字符串。", "A, B, D, C, B, E, D, B, A, C, B, C, A, C, F, A, F, D。", "假设有3个可用的框架，它们最初都是空的。完成一个类似于课本图8.14的图，显示以下每个页面替换策略的帧分配。", "(a) 先入先出", "(b) 最优", "(c) 最近使用最少的", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;不同编译器的结果会不一样的。纠结于此没有意义。看老师怎么说&amp;#xff0c;按老师说的规则去解答&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["上机实验，有个不明白的地方", ["划线的那一串为什么不是36而是34啊，课本上++的优先级高于+啊，不应该所有i先变为12再想加吗？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;一个请求配置&lt;br /&gt;\n一个是资源配置&lt;br /&gt;\n业务属性上是不同的&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["SpringSecurity的配置类区别问题", ["请教下，WebSecurityConfigurerAdapter和ResourceServerConfigurerAdapter除了一个是SpringSecurity的配置和OAuth的配置及优先级不同外，还有什么区别么？使用上会有限制么？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;RCT6有定时器6和7吗我怎么记着好像就到4&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/403451483856183.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["stm32f103rct6 tim6和tim7无法进入定时中断", ["#include \"stm32f10x.h\"                  // Device header", "extern uint16_t Num;", "void Timer_Init(void)", "{", "    //1、RCC开启时钟 通用定时器：TIM6", "    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);", "\n", "//", "2", "、选择时基单元时钟 \nTIM_InternalClockConfig(TIM6);    ", "//", "使用内部时钟(默认)\n\n", "//", "3", "、配置时基单元\nTIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;\nTIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1; ", "//", "滤波器分频\nTIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;    ", "//", "计数方式：向上计数\nTIM_TimeBaseInitStructure.TIM_Period = ", "10000", " - ", "1", ";    ", "//", "ARR(", "0", "~", "65535", ")    CK_CNT_OV = CK_PSC", "/(PSC+1)/", "(ARR+", "1", "); ", "1", "S : ", "1", "HZ = ", "72", ",", "000", ",", "000", "/(7200)/", "(", "10000", ")\nTIM_TimeBaseInitStructure.TIM_Prescaler = ", "7200", " - ", "1", ";    ", "//", "PSC(", "0", "~", "65535", ")    \nTIM_TimeBaseInitStructure.TIM_RepetitionCounter = ", "0", ";    ", "//", "重复计数器，高级计数器才有\nTIM_TimeBaseInit(TIM6, &TIM_TimeBaseInitStructure);\n\nTIM_ClearFlag(TIM6, TIM_FLAG_Update);\n\n", "//", "4", "、使能中断\nTIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);\n\n", "//", "5", "、NVIC配置\nNVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);    ", "//", "优先级分组 ", "2", "位响应，", "2", "位抢占\nNVIC_InitTypeDef NVIC_InitStructure;\nNVIC_InitStructure.NVIC_IRQChannel = TIM6_IRQn ;    ", "//", "配置通道\nNVIC_InitStructure.NVIC_IRQChannelCmd  = ENABLE; \nNVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = ", "0", ";    ", "//", "抢占优先级\nNVIC_InitStructure.NVIC_IRQChannelSubPriority = ", "0", ";            ", "//", "响应优先级\nNVIC_Init(&NVIC_InitStructure);\n\n\n", "//", "6", "、启动定时器\nTIM_Cmd(TIM6, ENABLE);\n", "\n", "}", "\n", "void TIM6_IRQHandler(void)", "{", "    if (TIM_GetITStatus(TIM6, TIM_IT_Update) == SET) //更新中断", "    {", "        Num++;", "        TIM_ClearITPendingBit(TIM6, TIM_IT_Update);", "    }", "\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;互不影响啊&amp;#xff0c;移入展示&amp;#xff1b;移除不展示&amp;#xff0c;不展示就不会影像轮播图&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["轮播设置了z-index就失效了，不能够轮播了", ["因为上面这个移入效果不设置z-index的话会被覆盖", "设置了优先级轮播又失效了", "#k是轮播图的盒子", "#c是上面移入效果显示的盒子", "\n", "\n", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;ol&gt;&lt;li&gt;可以 类似生成器这种机制 在使用时才调用 避免提前占用大量空间内存&lt;/li&gt;&lt;li&gt;最好是使用括号这种比较容易区分优先级&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "优先级", "Question": ["发布的新的问题有些不理解，请指点", ["1.合理利用Python表达式的惰性求值，能够提高代码质量吗？为什么？", "2.在Python表达式中如何更准确地表示运算符的优先级以增加代码的可读性？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;-&amp;#xff1e;优先级最高&amp;#xff0c;所以把“pn-&amp;#xff1e;b”看成一个整体就好了&amp;#xff0c;例如把“pn-&amp;#xff1e;b”看成a&amp;#xff0c;整个式子就是&amp;#43;&amp;#43;a&lt;em&gt;a/1&amp;#xff0c;先进性a的自增&amp;#xff0c;然后再将a的值用于计算这个式子&amp;#xff0c;所以就是4&lt;/em&gt;4&amp;#61;16&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于C＋＋运算顺序的疑问", ["这一题答案是16。", "但是我觉得，-＞优先级最高，应该是算完了所有的pn-＞b，再进行＋＋啥的。所以我写的是   12。"]], "Tag": "程序设计"}
{"Answer": "a++，表达式内a的值为a，之后a++\r\n++a，a先++，然后表达式的值为+1之后的\r\n--a a--类似\r\n一个表达式内，某个自增表达式不宜出现2次或以上，此时是编译器未定义行为，不同编译器产生不同的结果\r\na+++b的结合顺序，优先左结合，所以是a++ +b，也就是表达式的结果是a+b，之后a=a+1", "Konwledge_Point": "优先级", "Question": ["小白跪求求大神解答，java se", ["a++, ++a, --a,  a--  详解，例int a=10 int b=3  37*2/a+++b---b=优先级判断详解"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;是的&amp;#xff0c;订单表应该独有一个主键&amp;#xff0c;通过用户购买下单时生成&amp;#xff0c;如果配件号为主键&amp;#xff0c;那么你只能保证每个用户购买的订单&amp;#xff0c;配件号都不能相同&amp;#xff0c;这显然不行&amp;#xff0c;要是遇到两个人需要同一个配件号的东西怎么办&amp;#xff0c;主键可是不能重复的&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["请教下大家这个问题怎么解决，我觉得是题出错了，销售订单表的配件号不应该是主键", ["请教下大家这个问题怎么解决，我觉得是题出错了，销售订单表的配件号不应该是主键，因为如果库存有两种配件号，这样没法匹配到库存表的配件号。", "\n", "4、    假设有一个销售订单表，一个库存表", "销售订单表有partno（配件号，主键）、partsaleno（配件销售数量）、orderby（优先级顺序，99为最优先，1为最不优先）", "库存表有partno（配件号，主键）、partlockno（配件库存数量）", "用sql语法写一个存储过程，按照销售订单优先级顺序，匹配库存表，算出每一个销售订单的数量满足情况（注意，已满足订单A的库存，不可再去满足别的订单）"]], "Tag": "程序设计"}
{"Answer": "int (*(*ptr)(int *))[5];\r\n\t可以这样分解：\r\n\ttypedef  int (*PARA)[5];\r\n\ttypedef PARA (*ptr)(int *);\r\n这种复杂声明之痛苦", "Konwledge_Point": "优先级", "Question": ["int(*(*ptr)(int*))[5]  这个怎么理解 大佬们", ["int(*(*ptr)(int*))[5]  这个怎么理解啊  大佬们  是要考虑它的优先级问题吗？   哪位大佬可以解析一下这道题呢？  谢谢啦"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;其实&amp;#xff0c;地图的这个搜索算法并不是专有的。单纯的从算法角度看&amp;#xff0c;地图的搜索算法和普通的搜索推荐算法是一样的。首先是用户层面&amp;#xff1a;&lt;br /&gt;1、用户过往搜索历史&lt;br /&gt;2、用户定位&amp;#xff0c;优先匹配本地poi点&lt;br /&gt;3、关键词匹配&lt;br /&gt;4、搜索频次&lt;br /&gt;另外&amp;#xff0c;个人认为地图搜索算法的难点&amp;#xff0c;在对关键词的拆分&amp;#xff0c;例如&amp;#xff1a;搜索关键词为北京市海淀区海底捞&amp;#xff0c;算法会优先把关键词进行层级拆分&amp;#xff0c;北京市/海淀区/海底捞&amp;#xff0c;然后分别进行搜索&amp;#xff0c;搜索的优先级和我们语义是不同的&amp;#xff0c;但是具体的设计就各有千秋了&amp;#xff0c;这个细节我也就不太清楚了&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["请问各大地图软件（谷歌、高德、百度、腾讯）后端的搜索算法是如何设计的", ["请问各大地图软件（谷歌、高德、百度、腾讯）后端的搜索算法是如何设计的。对于重名的poi点是如何进行排序的，优先级划分的依据有哪些"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你搜一下python的运算符优先级啊&amp;#xff0c;就知道表达式的运算顺序了&lt;br /&gt;先执行b的取反&amp;#xff0c;b&amp;#61;2&amp;#xff0c;取反就是所有位都由0变1&amp;#xff0c;或由1变0。因此取反后b&amp;#61;0xFFFFFFFD&amp;#xff0c;int型就是-3&lt;br /&gt;然后将取反后的值左移4位&amp;#xff0c;也就是乘以2的4次方&amp;#xff0c;最高位保持为1&amp;#xff0c;因此等于-3 * 16 &amp;#61; -48&lt;br /&gt;最后再与a进行位或&amp;#xff0c;也就是最低位进行或&amp;#xff0c;由于-48最低位是0&amp;#xff0c;所以相当于-48 &amp;#43; 1&amp;#61; -47&lt;br /&gt;选C&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["什么东西啊，不会啊不明白，来个解一下", ["python运算符优先级，运算，课上选择题，不明白这个，怎么做，有会的吗，了解一下a=1,b=2,表达式\"a|~b<<4\"的值是什么"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;%是取余&amp;#xff0c;取余跟除法的优先级是一样的&lt;br /&gt;加法明显优先级低啊&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["为什么删去括号会导致出错", ["虽说(k+a3)%2==0在k+a3==6时绝对成立，优先级也是+高于%=吧，删了括号为什么会什么都不显示？", "\n", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/365587975076144.jpg\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;br /&gt;PS是串口&amp;#xff0c;PT是定时计数器&amp;#xff0c;PX是外部中断&amp;#xff0c;置0就是低优先级&amp;#xff0c;置1就是高优先级&lt;br /&gt;例如&amp;#xff1a;IP&amp;#61;0x04&amp;#xff0c;就是设置外部中断1为高优先级.&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["中断寄存器是怎么配置的", ["我想让外部中断1比定时器0的优先级高，让它能打断定时器0的中断，该怎么配置中断寄存器IP，能不能简单教一下IP配置的方法，感谢感谢！"]], "Tag": "程序设计"}
{"Answer": "因为你的线程在sleep之后就结束了。", "Konwledge_Point": "优先级", "Question": ["为什么线程组 为空。求解", ["public class TestRunnable implements Runnable{", "\n\n", "@Override\npublic void run() {\n   System.out.println(\"我实现了Runnable接口\");        \n}\n\npublic static void main(String[] args) throws InterruptedException{\n    TestRunnable tr=new TestRunnable();\n    ThreadGroup tg=new ThreadGroup(\"线程组1\");\n    Thread tt=new Thread(tg,tr,\"线程1\");\n    tt.start();\n    tt.sleep(2000);\n    //优先级\n    int priority=tt.getPriority();\n    //名称\n    String name=tt.getName();\n    //id\n    long id=tt.getId();\n    System.out.println(\"此线程的优先级是\"+priority+\"  此线程的名称\"+name+\"  此线程的id\"+id);\n\n    //栈追踪元\n    StackTraceElement[] arr=tt.getStackTrace();\n    for(StackTraceElement ele:arr){\n        String eleClassName=ele.getClassName();\n        String FileName=ele.getFileName();\n        int lineNumber=ele.getLineNumber();\n        String eleMethodName=ele.getMethodName();\n        System.out.println(\"栈追踪元eleClassName=\"+eleClassName+\"   FileName\"+FileName\n                +\"  lineNumber=\"+lineNumber+\"   eleMethodName\"+eleMethodName);              \n    }\n    //所属线程组\n    ThreadGroup group= tt.getThreadGroup();\n    if(group!=null){\n        int maxPriority=group.getMaxPriority();\n        String groupName=group.getName();\n        System.out.println(\"最大优先级\"+maxPriority+\" groupName\"+groupName);\n    }\n}\n", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;解析&amp;#xff1a;&lt;br /&gt;一、我们先把两个不同结果的表达式写出来&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;5&amp;#43;2&amp;gt;&lt;span class=\"hljs-attribute\"&gt;3&lt;/span&gt;&amp;#61;&amp;#61;2**0\n(5&amp;#43;2&amp;gt;3)&amp;#61;&amp;#61;2*&lt;span class=\"hljs-number\"&gt;*0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr /&gt;\n&lt;p&gt;二、然后进行简化&amp;#xff0c;由于**的优先级比&amp;#61;&amp;#61;高所以以上两个表达式可以等价为&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;5&amp;#43;2&amp;gt;&lt;span class=\"hljs-attribute\"&gt;3&lt;/span&gt;&amp;#61;&amp;#61;1\n(5&amp;#43;2&amp;gt;3)&amp;#61;&amp;#61;1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr /&gt;\n&lt;p&gt;三、对于第一个表达式&amp;#xff0c;&amp;#43;号优先级最高&amp;#xff0c;同理表达式2括号中的表达式也是&amp;#43;号优先级较高&amp;#xff0c;所以又可以等价为&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;&amp;gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n(&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;&amp;gt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr /&gt;\n&lt;p&gt;好了到这里,运行上面的表达式&amp;#xff0c;结果如下&amp;#xff1a;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/340711316676154.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;所以博主的问题就变为7&amp;gt;3&amp;#61;&amp;#61;1和(7&amp;gt;3)&amp;#61;&amp;#61;1为什么不是都是True&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;经过查阅资料&amp;#xff0c;发现Python支持连续的比较运算符&amp;#xff1a;a &amp;gt; b &amp;#61;&amp;#61; c&amp;#xff0c;但它其实是 a &amp;gt; b and b &amp;#61;&amp;#61; c 的简略写法&amp;#xff0c;而不是表示先进行计算 a &amp;gt; b &amp;#xff0c;然后用结果判断是否等于c&amp;#xff0c;也不是判断a是否大于 b &amp;#61;&amp;#61; c 的结果。&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;所以7&amp;gt;3&amp;#61;&amp;#61;1应为7&amp;gt;3 and 3&amp;#61;&amp;#61;1 为False。&lt;/p&gt;\n&lt;p&gt;参考阅读&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/weixin_39793434/article/details/110025611\" id=\"textarea_1676612649951_1676614184684_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/weixin_39793434/article/details/110025611&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["简单表达式运算结果的疑惑", ["学习运算符时遇到一个这样的表达式：", "\n", "\n", "这两个表达式按运算符优先级进行运算，按True==1和False==0，结果应该都是True吧，可是这里怎么会不同呢？", "有人给咱解解惑吗？谢谢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;解决&amp;#xff1a;&lt;br /&gt;//Thread.currentThread().getName()方法会造成运行时间增加量级远大于一行的工作量&amp;#xff0c;大幅增加运行该线程时间&amp;#xff0c;从而影响线程执行次序&lt;br /&gt;//yield&amp;#xff08;&amp;#xff09;在执行的时候当前线程仍然可以运行小量时间&lt;br /&gt;//对于CSDN上问题的回答&amp;#xff0c;当屏蔽掉代码段的时候因为主线程需要的运行时间非常短&amp;#xff0c;&lt;br /&gt;// 因此就像大多数运行情况一样&amp;#xff0c;第一个占着CPU&amp;#xff0c;执行yield()函数&amp;#xff0c;&lt;br /&gt;// 但是因为剩余的代码片段仅剩下一个print&amp;#xff0c;在yield执行时调主线程到准备状态时&amp;#xff0c;主线程已经运行完毕&amp;#xff0c;因此yield语句对于结果没有影响&lt;br /&gt;//调用耗时长的代码段时&amp;#xff0c;由于主线程子线程在一个个微小的时间片上交替运行&amp;#xff0c;主线程在第一个时间片来不及输出轮到子线程输出1&amp;#xff0c;随后子线程结束后&lt;br /&gt;//主线程输出Now main&amp;#xff0c;之后执行yield让主线程返回准备状态其实也没啥影响因为此时只有主线程这一个线程&amp;#xff0c;因此是先执行子线程&amp;#xff0c;后面是主线程&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于线程执行顺序的问题", ["\n", "public", " ", "class", " MyThread extends Thread{\n    ", "public", " ", "void", " run(){\n        ", "System", ".", "out", ".println(\"1\");\n    }\n    ", "public", " static ", "void", " main(String[] args){\n        MyThread mt = ", "new", " MyThread();\n        mt.", "start", "();\n        //", "System", ".", "out", ".println(\"Now \"+Thread.currentThread().getName());\n        Thread.currentThread().yield();\n        ", "System", ".", "out", ".println(\"2\");\n    }\n}\n", "\n", "概括一下代码就是线程输出1，主线程输出2", "直接上代码图，在屏蔽掉那段Now 的输出文本后，输出结果是", "\n", "2", "1", "\n", "进程已结束，退出代码为 0", "\n", "也就是说，一开始cpu执行主线程的时候，我让", "主线程执行yield方法回到可运行状态，他再一次获得了执行的机会", "，请问是主线程优先级非常高吗？", "\n", "//////////////////////////////////////////////////////////////////", "可是在加上那段之前被屏蔽的代码时，输出结果就变成了这样", "1", "Now main", "2", "\n", "进程已结束，退出代码为 0", "\n", "也就是说在加上一行System.out.println之后，", "主线程的优先级就被降低了？", "我居然可以用field使得主线程让出CPU并且被实例出来的线程占领了？为什么仅仅一个System.out.println就可以改变优先级呢？很不理解，希望能清晰地帮我讲清楚，谢谢！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;a&amp;#43;&amp;#43;表示的是a的值先使用后自增&lt;br /&gt;&amp;#43;&amp;#43;a则表示的是a本身先自增后使用&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["数据类型的一个简单运算问题", ["int a=5,b=4,x,y;", "x=a++乘以a++乘以a++;", "自增优先级大于乘法，x为什么不是等于5乘以6乘以7而是等于5乘以5乘以5？"]], "Tag": "程序设计"}
{"Answer": "线程组：[url]http://caterpillar.onlyfun.net/Gossip/JavaGossip-V2/ThreadGroup.htm[/url]\r\n列锁例子：[url]http://www.cnblogs.com/linjiqin/archive/2011/04/11/2013083.html[/url]\r\n希望对你有帮助", "Konwledge_Point": "优先级", "Question": ["java基础知识问答：线程组，死锁", ["问题1：", "\nThread的toString方法描述：返回该线程的字符串表示形式，包括线程名称、优先级和线程组。请问什么叫“线程组”？", "\n问题2：", "\n求一个死锁的demo，越简单越好"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;flag &amp;#61;&amp;#61; 1&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["MyBatis里if条件失效, 求解答！", ["最近写业务代码时，碰到了一件怪事，sql里的if条件怎么都不生效，具体如下", "\n", "  ", "int", " ", "selectFirstPriority", "(Map<", "String", ", Integer> map)", ";\n", "\n", "场景是数据库里status分为0和1.第一次想查询status为1的数据里的最小优先级。第二次查询所有数据的最小优先级，于是写了如下语句", "\n", "    <", "select", " id=", "\"selectFirstPriority\"", " resultType=", "\"int\"", " parameterType=", "\"map\"", ">\n        ", "select", " sortPriority\n        ", "from", " tableA\n        ", "where", " ", "1", "=", "1", "\n        <", "if", " test=", "\"flag != null and flag = 1\"", ">\n            ", "and", " status = ", "1", "\n        </", "if", ">\n        ", "order", " ", "by", " sortPriority\n        ", "limit", " ", "1", ";\n    </", "select", ">\n", "\n", "一开始是这么写的", "\n", "int i = businessSlotMapper.selectFirstPriority(", "new", " ", "ParameterMap", "<", "String", ", Integer>().put(", "\"flag\"", ", ", "1", "));\nxxxx\nint ", "new", "Priority", " = businessSlotMapper.selectFirstPriority(", "new", " ", "HashMap", "());\n", "\n", "执行到第一个select时，因为将flag放进了map里，所以正确执行了sql语句。但是执行第二个select时，发现if语句没有生效，查询出来的依然只是状态为1的最小优先级。", "\n", "然后我就开始debug，猜测是不是因为加了transactional的缘故，导致在一个事务内操纵同一条select就会忽略限制条件。", "\n", "于是我将两条sql语句换了个位置，变成这样", "\n", "int ", "new", "Priority", " = businessSlotMapper.selectFirstPriority(", "new", " ", "HashMap", "());\nxxxx\nint i = businessSlotMapper.selectFirstPriority(", "new", " ", "ParameterMap", "<", "String", ", Integer>().put(", "\"flag\"", ", ", "1", "));\n", "\n", "这个时候执行到第一个select时，控制台打印出的sql语句如下", "\n", "==>  Preparing: ", "select", " sortPriority ", "from", " tableA ", "where", " ", "1", "=", "1", " ", "and", " status = ", "1", " ", "order", " ", "by", " sortPriority ", "limit", " ", "1", "; \n", "\n", "整个if竟然直接就失效了。非常奇怪"]], "Tag": "程序设计"}
{"Answer": "正好，我曾经写过一个解析自定义表达式的类（当然也支持纯数字的加减乘除和括号优先级了），由于内容太多（有1000多行），就不在此处贴代码了，已经给你发站内短信了，请查收，希望对你有用。", "Konwledge_Point": "优先级", "Question": ["公司给个题目，有点BT，有高手知道怎么实现吗？", ["任选Objective-C/C/C++/Java 之一编写一个数学公式解析器，要求能够实现任意正整数的", "\n加减乘除功能，并支持括号优先级，注意：不允许调用语言自带的表达式解析功能来实现。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;v-show是会执行&amp;#xff0c;只是隐藏而已&amp;#xff0c;v-if是不会渲染出来&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["v-for配合v-if使用会报错，那为什么使用v-show就不报错了？", ["官方文档说：“v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中”", "但是改成v-show就不报错了，问题是v-show不也是一样会被重复运行么？"]], "Tag": "程序设计"}
{"Answer": "我在编写MFC窗体程序时也测验过线程独占的情形，我猜想最可能的原因是：\r\n线程的开辟与管辖范围与主线程相干。", "Konwledge_Point": "优先级", "Question": ["vb.net多线程造成窗体界面“假死”解决办法？", ["我在一个窗体按钮单击事件里开了一个新线程用于连接一硬件设备，结果线程一start窗体就卡死了，造成窗体线程阻塞，我想知道时间片是如何分配的，默认优先级相同，为什新线程会独占时间片？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;STM32的DMA支持多通道工作&amp;#xff0c;在多通道工作时&amp;#xff0c;DMA会根据通道的优先级来决定传输的顺序。通常情况下&amp;#xff0c;优先级较高的通道会优先完成传输。&lt;/p&gt;\n&lt;p&gt;回到问题&amp;#xff0c;在例子中&amp;#xff0c;如果通道2的优先级要高于通道1&amp;#xff0c;那么通道2会优先完成传输&amp;#xff0c;直到完成后才会轮到通道1。所以在例子中&amp;#xff0c;通道2会先完成传输1024个字节&amp;#xff0c;然后再轮到通道1传输一个字节。&lt;/p&gt;\n&lt;p&gt;但是&amp;#xff0c;这只是一般情况下的情况。实际上&amp;#xff0c;DMA的工作方式是可以通过软件配置的。所以可以通过设置DMA的传输模式和中断优先级来控制DMA通道的工作顺序和中断优先级。&lt;/p&gt;\n&lt;p&gt;总结就是STM32的DMA支持多通道工作&amp;#xff0c;可以根据通道的优先级来决定传输的顺序&amp;#xff0c;但是这个顺序也可以通过软件配置来控制。&lt;br /&gt;望采纳。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["STM32 DMA 多通道工作逻辑 疑问", ["STM32 DMA 多通道工作逻辑", "\n", "比如，同一个DMA 配置两个通道同时传输串口数据，通道1发送一个字节，通道2发送1024个字节，通道2的优先级要高于通道1，那么是否一定是等通道2全部传输完后才会轮到通道1"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;按照js标准规则是函数声明先提升,变量声明再提升(如果之前已经有同名的函数,这个变量声明就无效了)&lt;br /&gt;注意&amp;#xff1a;变量只有声明提升&amp;#xff0c;对变量的赋值不会提升。但函数声明提升会连定义的函数一起提升&lt;br /&gt;提升后代码是&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;a&lt;/span&gt;() { //函数声明先提升&lt;/span&gt;\n  console.&lt;span class=\"hljs-built_in\"&gt;log&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n}\nvar &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt; // 变量声明再提升,之前已经有同名的a函数,这个变量声明就无效了&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;()&lt;span class=\"hljs-comment\"&gt;;// 打印 1&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; () {&lt;!-- --&gt;&lt;/span&gt;\n  console.&lt;span class=\"hljs-built_in\"&gt;log&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n}\n&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;();&lt;span class=\"hljs-comment\"&gt; // 打印 2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;其实函数声明先提升,还是变量声明先提升,效果是一样的,你不用纠结这个问题&lt;br /&gt;比如变量声明先提升,函数声明提升时也会覆盖同名的变量,效果是一样的&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;var &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt; // 变量声明先提升&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;a&lt;/span&gt;() { //函数声明提升时也会覆盖同名的&lt;span class=\"hljs-title\"&gt;a&lt;/span&gt;变量&lt;/span&gt;\n  console.&lt;span class=\"hljs-built_in\"&gt;log&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n}\n&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;()&lt;span class=\"hljs-comment\"&gt;;// 打印 1&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; () {&lt;!-- --&gt;&lt;/span&gt;\n  console.&lt;span class=\"hljs-built_in\"&gt;log&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n}\n&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;();&lt;span class=\"hljs-comment\"&gt; // 打印 2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "优先级", "Question": ["变量提升 快 还是 函数提升 快？", ["\n", "a", "()\n", "function", " ", "a", "(", ") {\n  ", "console", ".", "log", "(", "1", ")\n}\n", "var", " a = ", "function", " (", ") {\n  ", "console", ".", "log", "(", "2", ")\n}\n", "a", "();\n\n", "// 打印  1  2", "\n", "\n", "很多博主 都说  ：先打印 1 说明 函数提升快，并且 不会被 同名的变量申明 覆盖", "原理：", "\n", "var ", "a", " = ", "function", " () {", "\n  console.", "log", "(", "1", ")\n}\nvar ", "a", "; ", " // 申明了变量，但是并没有覆盖函数申明", "\n", "a", "()", ";// 打印 1", "\n", "a", " = ", "function", " () {", "\n  console.", "log", "(", "2", ")\n}\n", "a", "();", " // 打印 2", "\n", "\n", "那为啥不能是先申明变量呢？", "\n", "var", " a;\n", "var", " a = ", "function", " ", "()", " ", "{\n  console.log(1)\n}", "\n", "a", "()", ";", "   ", "// 1", "\na = ", "function", " ", "()", " ", "{\n  console.log(2)\n}", "\n", "a", "()", ";", "  ", "// 2", "\n", "\n", "是不是 就没有 谁优先级高的说法，只是臆想的而已。", "根本看不出来谁优先级高，只能看出 变量申明 不会  覆盖同名的 函数申明"]], "Tag": "程序设计"}
{"Answer": "(1)不会有什么优先级的问题，在sql中，单条语句本身构成一个事务它是原子的。比如\r\nupdate table set a = a + 1，这里a = a+1肯定是原子操作，不可能有并发问题。\r\n但是，如果你的程序中有多条sql语句，又没有事务，就不一定了。所以要用事务。\r\n(2)按理说差距不大，因为接口开销是很小的。但是如果你大量执行简单的查询，积少成多，也不一定。对此，你应该优化查询，多用存储过程。", "Konwledge_Point": "优先级", "Question": ["Delphi的ADO访问数据库的问题", ["问题一：", "\n多线程并发时，每个线程使用自己的adoconnection连接oracle，然后各自执行自己的查询，会不会有优先级的问题？", "\n\n", "问题二：", "\nsql语句在代码里通过ado查询和在plsql里查询，速度差异会很大吗？ "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1.计算机底层运算原理是二进制&amp;#xff0c;是集成在cpu里的各种运算模块在实际进行计算&amp;#xff0c;所以只能两个相同类型的值进行运算&amp;#xff0c;输出类型与输入类型相同&lt;br /&gt;2.当不同类型的数值参与运算时&amp;#xff0c;会先统一转换成较大的类型&amp;#xff0c;再计算&amp;#xff0c;比如int&amp;#43;double会先把2个数都转换成double类型再计算&lt;br /&gt;3.5和9都是int型&amp;#xff0c;它们进行除法的结果也会是int型&amp;#xff0c;而int型没有小数&amp;#xff0c;精度会丢失&lt;br /&gt;4.当你先执行乘法&amp;#xff0c;再执行除法&amp;#xff0c;就能保证被除数比除数大&amp;#xff0c;不会出现得数为0的情况&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["c++里为什么c=5*(f-32)/9;和c=5/9*(f-32)运行结果不一样", ["c++里，程序华氏温度转换为摄氏温度，为什么c=5*(f-32)/9;和c=5/9*(f-32)运行结果不一样？乘除优先级不是相同的，都从左到右运算吗？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&amp;#xff08;与运算是双目运算符&amp;#xff09;结合性是从左到右 但是如果左边是假的话 是不考虑右边任何情况的&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["自增自减和与运算的程序", ["请问这一题答案说a自增后等于0所以b的自减不执行答案为A，但是自增自减的优先级不是高于与运算吗？不应该ab算完之后与吗？所以不应该ab都等于0吗？谢谢！"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;.replace(&lt;span class=\"hljs-string\"&gt;&amp;#39;问题&amp;#39;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["怎么从字符串中删除指定文字？", ["str", " = ", "'''\n类问题\n字典推导式问题\n队列问题\n决策排序优先级\n买《万物皆数》\n财富支配\n支配权\n字符串，列表，删除指定字\na,b,c,d,e,f,g，联动关联\nformat问题\n'''", "\n", "# 从字符串中删除指定文字，去掉问题", "\n"]], "Tag": "程序设计"}
{"Answer": "margin-left：116px/;貌似多了个/,且注意使用英文状态下的:", "Konwledge_Point": "优先级", "Question": ["这是我遇到的一个最奇葩的网页代码问题，希望大佬们解答下", ["\n\n", "为啥会失败呢，我很不理解，在元素里改样式优先级应该是最高的，而且我看margin-left也没有拼错啊，求解"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;建议使用for循环&amp;#xff0c;每次循环减7&amp;#xff0c;当小于7&amp;#xff0c;大于等于5的时候用5减&amp;#xff0c;小于5大于等于3的时候用3减&amp;#xff0c;每次去判断一下即可。&lt;/p&gt;\n&lt;p&gt;如果有帮助&amp;#xff0c;请点击我评论右上角采纳&amp;#xff0c;谢谢。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["购物分配，怎么用while或者for循环做", ["一个人有n元，想买3元5元7元的东西，如果他恰好花完钱，请计算3种东西的数量。没有则输出-1。并且此人喜欢贵的东西，7元的优先级大于5元大于3元。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;a^b&amp;amp;-c 是·1&lt;/p&gt;\n&lt;p&gt;先是-c是-3&lt;br /&gt;-3的二进制补码是 11111101&lt;br /&gt;再计算b&amp;amp;-3&amp;#xff0c;b是2&lt;br /&gt;2的二进制补码是  00000010&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;      &lt;span class=\"hljs-number\"&gt;11111101&lt;/span&gt;\n    &amp;amp; &lt;span class=\"hljs-number\"&gt;00000010&lt;/span&gt;\n    &amp;#61; &lt;span class=\"hljs-number\"&gt;00000000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;最后&lt;br /&gt;1 ^ 0  &amp;#61; 1&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["a=1,b=2,c=3,a^b&-c=?", ["我查了优先级，顺序应该是先-c,其结果&b，再拿这步的结果与a进行异或运算，算出3，但是答案是1，主要是没搞懂&-两个连在一起该怎么办，求大神解答！！！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;找个模板把内容改一下就行&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["DIV和CSS的使用", ["请使用不同的样式表形式完成诗画小筑的网页设计要\n求:1、使用DIV+CSS样式布局页面2、能体现不同样式\n表的优先级;3、网页内容要充分体现中国传统文化诗画主\n题;"]], "Tag": "程序设计"}
{"Answer": "{id:'select 字段 from 表名;'\r\n详见：带搜索功能的grid分页实例 http://www.extshow.com/Ext%CA%B5%C0%FD%B7%D6%CE%F6/64.html (它就是这样做的，很经典)", "Konwledge_Point": "优先级", "Question": ["请问怎么样动态定义grid中某个字段的id?", ["我创建了一grid，在columns中 {id:？？（我希望这个Id等于这个字段的value值，从而实现自定义id）,header: '优先级', dataIndex: 'priority',sortable:true, width: 90},", "\n\n", "应该怎么实现呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;用第二个值算&amp;#xff0c;第一个值表示理论上能达到的最大值。&lt;br /&gt;&lt;code class=\"language-javascript\"&gt;-Xmn&lt;/code&gt;控制的是&lt;code class=\"language-javascript\"&gt;Eden&amp;#43;Survivor&lt;/code&gt;的总大小。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["为什么jvm的参数中设置-Xmx、-Xmn后，结果Eden+Survivor+Old的和的大小是超过-Xmx的值？", ["问题遇到的现象和发生背景", "\n", "为什么jvm的参数中设置-Xmx、-Xmn后，结果Eden+Survivor+Old的和的大小是超过xmx的，而Eden+Old和的大小却是与Xmx的值基本相同，这是为什么，是有什么其他的参数有优先级吗？", "\n", "问题截图", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "也许你觉得从左到右是很天经地义的事情。\r\n偏偏阿拉伯文就是从右到左的。\r\n我们知道，windows、office这些软件都有阿拉伯语言的版本，也能正确处理这些语言。\r\n那么微软是否需要为这些国家或者地区的人重新设计一种软件呢？希捷和日立有没有必要为这些人设计一种反过来转的硬盘呢？Intel需不需要设计一种反过来表示数字的cpu呢？\r\n答案是都不需要。因为我们只需要稍微调整软件算法就可以实现了。\r\n甚至可以多说一些给你（你不用深究，为了简化讨论，这里说的只是一个简化过的概念），我们用的Intel处理器，在它的内部，数字表示的形式是反过来的，比如123，实际上它存的是321。\r\n当然，另外一些计算机，比如你的手机上用的cpu存储的是正的123。你在使用的时候发现它们有这样的不同了么？也许我不说你一辈子也感觉不到。\r\n这就是说，其实一个东西的内部原理，其实和它表现的形式并不重要。为什么intel的处理器数字内部存储的都是反的显示出来不是反的呢？因为它怎么设计的我们管不了，但是它运行程序输出的结果如果是反的让我们看见了，我们就不会用它了。", "Konwledge_Point": "优先级", "Question": ["java读取代码顺序是从左往右还是从右往左", ["java编译器读取每行代码顺序是从左往右还是从右往左 例如", "\nint a=1; ", "\nint b=2;", "\nint c=3; ", "\nint d=a+b*c", "\nint d=a+b*c是从左往右读取还是按优先级读取", "\n编译器读取每行代码都是从左往右读取吗"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;花了点时间&amp;#xff0c;用递归和减而治之的思想。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;deque&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Generate&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; deque&amp;lt;&lt;span class=\"hljs-type\"&gt;int64_t&lt;/span&gt;&amp;gt; &amp;amp;operands, &lt;span class=\"hljs-type\"&gt;int64_t&lt;/span&gt; D, deque&amp;lt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;&amp;gt; &amp;amp;operators, &lt;span class=\"hljs-type\"&gt;int64_t&lt;/span&gt; &amp;amp;result)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (operands.&lt;span class=\"hljs-built_in\"&gt;size&lt;/span&gt;() &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1u&lt;/span&gt;) {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((operands[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;gt;&amp;#61; D) &amp;amp;&amp;amp; (result &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;) || (result &amp;gt; operands[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])) {\n            result &amp;#61; operands[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];    \n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 加法运算&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;auto&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;tmpOperands&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(operands)&lt;/span&gt;&lt;/span&gt;;\n    tmpOperands[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43;&amp;#61; tmpOperands[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n    tmpOperands.&lt;span class=\"hljs-built_in\"&gt;pop_front&lt;/span&gt;();\n    operators.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;Generate&lt;/span&gt;(tmpOperands, D, operators, result);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (result &amp;#61;&amp;#61; D) {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt;;\n    }\n    operators.&lt;span class=\"hljs-built_in\"&gt;pop_back&lt;/span&gt;();\n\n    &lt;span class=\"hljs-comment\"&gt;// 乘法运算&lt;/span&gt;\n    tmpOperands[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; operands[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] * operands[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n    operators.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;Generate&lt;/span&gt;(tmpOperands, D, operators, result);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (result !&amp;#61; D) {\n        operators.&lt;span class=\"hljs-built_in\"&gt;pop_back&lt;/span&gt;();\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; **)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int64_t&lt;/span&gt; N, D, i;\n    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; D;\n\n    deque&amp;lt;&lt;span class=\"hljs-type\"&gt;int64_t&lt;/span&gt;&amp;gt; operands;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; N; &amp;#43;&amp;#43;i) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t;\n        cin &amp;gt;&amp;gt; t;\n        operands.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(t);\n    }\n\n    deque&amp;lt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;&amp;gt; operators;\n    &lt;span class=\"hljs-type\"&gt;int64_t&lt;/span&gt; result &amp;#61; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;Generate&lt;/span&gt;(operands, D, operators, result);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (result &amp;#61;&amp;#61; D) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; N - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; &amp;#43;&amp;#43;i) {\n            cout &amp;lt;&amp;lt; operands[i] &amp;lt;&amp;lt; operators[i];\n        }\n        cout &amp;lt;&amp;lt; operands[i] &amp;lt;&amp;lt; endl;\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;NO&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; endl;\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["一道c++算法题，不知道该怎么设计，求指导", ["一道c++算法题，不知道该怎么设计，求指导", "用户可以输入n个数和目标D。", "可使用的运算符限定于加号和乘号两种，且它们之间既没有优先级次序也不得使用括号（故计算总是按输入n个数的顺序及添加的运算符自左向右进行）。", "一旦得不到目标D，希望知道一个能够通过这n个数得出的大于D的最小值。", "【输入】", "第一行两个正整数 N 和 D，分别表示数的个数和目标结果。第二行为 N 个数字，以空格分隔。", "【输出】", "若能得到D，则输出一个对应算式；否则输出No，以及大于D的最小值（最小值不存在则输出-1）。", "【限制】1 ≤ N ≤ 24，1 ≤ D < 2^60", "【输入样例1】", "4 235", "34 12 5 5", "【输出样例1】", "34+12*5+5", "【输入样例2】", "3 600", "9 9 9", "【输出样例2】", "No", "729"]], "Tag": "程序设计"}
{"Answer": "```\r\n#include&lt;stdio.h&gt;\r\n#include&lt;time.h&gt;\r\n#include&lt;stdlib.h&gt;\r\n\r\nint chu(int p,int q)   //除法运算\r\n{\r\n\tif(p%q==0)\r\n\t\treturn p/q;\r\n\telse\r\n\t\treturn 111111; \r\n}\r\n\r\n\r\n\r\nint fun(int i,int j,int c)    //c（局部变量）选择运算符，i，j为运算数字\r\n{\r\n\tint s;\r\n\tswitch(c)\r\n\t{\r\n\tcase 1:  s=i+j;break;\r\n\tcase 2:  s=i-j;break;\r\n\tcase 3:  s=i*j;break;\r\n\tcase 4:  s=chu(i,j);break;\r\n\t}\r\n\treturn s;\r\n}\r\n\r\n\r\nvoid print(int c)     //c（局部变量）选择输出运算符\r\n{\r\n\tif(c==1)printf(\"+\");\r\n\telse if(c==2)printf(\"-\");\r\n\telse if(c==3)printf(\"*\");\r\n\telse printf(\"/\");\r\n}\r\n\r\n\r\nint main()\r\n{\r\n\tint f[4];//四个1-13的数\r\n\tint i,j,m,n;\r\n\tint a,b,c;//符号\r\n\tint d1,d2,d3; //每步的结果\r\n\tsrand(time(NULL));   //随机生成四个数字（四张扑克牌）\r\n\tfor(int w=0;w&lt;4;w++)  \r\n\t{\r\n\t\tf[w]=rand()%13+1;    //生成随机数范围在1~13\r\n\t}\r\n\tfor(w=0;w&lt;4;w++)\r\n\t{\r\n\t\tprintf(\"%d \",f[w]);\r\n\t}\r\n\tprintf(\"\\n\");\r\n\tfor(i=0;i&lt;4;i++)\r\n\t\tfor(j=0;j&lt;4;j++)\r\n\t\t\tif(j!=i)\r\n\t\t\t\tfor(m=0;m&lt;4;m++)\r\n\t\t\t\t\tif(m!=i&amp;&amp;m!=j)\r\n\t\t\t\t\t\tfor(n=0;n&lt;4;n++)\r\n\t\t\t\t\t\t\tif(n!=i&amp;&amp;n!=j&amp;&amp;n!=m)            //四个数字的位置不可重复且多重可能置换位置运算\r\n\t\t\t\t\t\t\t\tfor(a=1;a&lt;5;a++)        \r\n\t\t\t\t\t\t\t\t\tfor(b=1;b&lt;5;b++)\r\n\t\t\t\t\t\t\t\t\t\tfor(c=1;c&lt;5;c++)       //选择四个数字中间的三个运算符，皆有四种可能\r\n\t\t\t\t\t\t\t\t\t\t{                             //避免了对括号的思考，转化为二元运算\r\n\t\t\t\t\t\t\t\t\t\t\td1=fun(f[i],f[j],a);     \r\n\t\t\t\t\t\t\t\t\t\t\td2=fun(d1,f[m],b);      //用前两个数字的运算结果代替\r\n\t\t\t\t\t\t\t\t\t\t\td3=fun(d2,f[n],c);     //同理，两两运算，递归过程\r\n\t\t\t\t\t\t\t\t\t\t\tif(d3==24)\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tprintf(\"%d\",f[i]);\r\n\t\t\t\t\t\t\t\t\t\t\t\tprint(a);\r\n\t\t\t\t\t\t\t\t\t\t\t\tprintf(\"%d\",f[j]);\r\n\t\t\t\t\t\t\t\t\t\t\t\tprint(b);\r\n\t\t\t\t\t\t\t\t\t\t\t\tprintf(\"%d\",f[m]);\r\n\t\t\t\t\t\t\t\t\t\t\t\tprint(c);\r\n\t\t\t\t\t\t\t\t\t\t\t\tprintf(\"%d=24\\n\",f[n]);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\treturn 0;\r\n}\r\n```\r\n\r\n\r\nhttps://blog.csdn.net/qq_36575519/article/details/70147381", "Konwledge_Point": "优先级", "Question": ["超简单的C语言题目，高分悬赏", ["【请按照题目要求回答，谢谢】", "\n\n", "编写一个C语言程序实现以下功能：1、输入1〜13范围内的4个整数（可以有重复）；2、对它们进行加、减、乘、除四则运算后（可以任意的加括号限定计算的优先级）；3、将运算结果等于24的所有运算式子找出来并输出。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;可以通过以下几个方面来提高告警的有效性&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;确定告警的优先级&amp;#xff0c;对于重要的告警及时处理&amp;#xff0c;避免漏报或误报。&lt;/li&gt;&lt;li&gt;对告警进行分类&amp;#xff0c;便于快速定位问题&amp;#xff0c;提高处理效率。&lt;/li&gt;&lt;li&gt;建立告警处理流程&amp;#xff0c;明确责任人和处理时间&amp;#xff0c;避免漏报或延误。&lt;/li&gt;&lt;li&gt;对告警进行监控和分析&amp;#xff0c;及时发现问题并进行优化&amp;#xff0c;提高系统的稳定性和可靠性。&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "优先级", "Question": ["如何提高告警的有效性？", ["监控能力建设过程中，监控指标会越来越全面，产生的告警、预警信息也更为丰富，但是大量的告警似乎不能提高运维的效率，因为需要有效处理的告警比例在降低，请问如何提高告警的有效性，或者怎么样突出告警的优先级和相关性？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;能把音频文件发上来啊&amp;#xff0c;要不然怎么看&lt;br /&gt;只是尖锐噪音的原因可能太多了&amp;#xff0c;采样率不对&amp;#xff0c;混音算法有问题&amp;#xff0c;解码有问题&amp;#xff0c;很多环节可能都有问题&amp;#xff0c;建议先dump音频文件看一下&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["QsoundEffect 出现尖锐噪音", ["程序需要对连续的、频繁变换的问题做出告警，播放声音。使用QsoundEffect 在单独的线程中播放或停止。", "业务逻辑：1、播放过程中会出现优先级高的告警，打断正在播放的告警音。2、也会同时出现多个告警。", "问题现象：出现尖锐的噪音，类似于飞机轰鸣声。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这&amp;#xff0c;自加都运算了&amp;#xff0c;14是这样来的吧&amp;#xff0c;后置&amp;#43;&amp;#43;&amp;#xff0c;先运算后自加&amp;#xff0c;c&amp;#43;&amp;#61;c,再&amp;#43;&amp;#43;&amp;#xff0c;变11&amp;#xff0c;再前置&amp;#43;&amp;#43;&amp;#xff0c;12&amp;#xff0c;加2&amp;#xff0c;14&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["这个++和（）把我搞迷了", ["一开始我想的是，++运算符优先级比较高先算++c，最后改变一下发现不对，然后我就寻思着会不会是c++问题，这个是把值给另外一个c运算之后才能自增，按照道理来说答案为13啊，难不成这个还能影响全局的c吗？", "\n"]], "Tag": "程序设计"}
{"Answer": "```\r\n struct _score data[N];\r\nfor (int i = 0; i &lt; N; i++)\r\n{\r\nfor (int j = 0; j &lt; N - 1; j++)\r\n{\r\nif (data[j].sum &lt; data[j + 1].sum) continue;\r\nif (data[j].sum == data[j + 1].sum &amp;&amp; data[j]. a &lt; data[j + 1].a) continue;\r\nif (data[j].sum == data[j + 1].sum &amp;&amp; data[j].a == data[j + 1].a &amp;&amp; data[j].b &lt; data[j + 1].b) continue;\r\nif (data[j].sum == data[j + 1].sum &amp;&amp; data[j].a == data[j + 1].a &amp;&amp; data[j].b == data[j + 1].b &amp;&amp; data[j].c == data[j + 1].c)) continue;\r\nstruct _score t = data[j];\r\ndata[j] = data[j + 1];\r\ndata[j + 1] = t;\r\n}\r\n}\r\n```", "Konwledge_Point": "优先级", "Question": ["关于C语言结构体多条件排序的问题", ["关于C语言结构体的。 struct _score { int name[11]; int a; int b; int c; int sum; } 对这个结构体 按照sum>a>b>c的优先级顺序进行排序，就是sum相同的话比a这样子，要如何实现呢？ （ps：我是初学者基础很差，希望代码能简单点，有注释最好啦）"]], "Tag": "程序设计"}
{"Answer": "你可以在hibernate.properties中配置show_sql=true来显示执行的sql语句\r\n我猜测执行的语句应该如下:\r\nselect t2.id from UsersRoles t1 \r\ninner join role t2 on t1.role_id=t2.role_id \r\ninner join user t3 on t1.user_id=t3.user_id and t3.user_id=?\r\norder by t2.orderNo desc", "Konwledge_Point": "优先级", "Question": ["HQL 问题   帮忙解释一下", ["//查找用户拥有的角色，并按优先级从低到高排序", "\n\"select r.id from UsersRoles ur join ur.role r join ur.user u \" +", "\n            \"where u.id = ? order by ur.orderNo desc\";", "\n\n", "List roleIds = hibernateTemplate.find(hql,userId);", "\n\n", "能解释 一下这个 Hql  语句吗"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这种能大能小&amp;#xff0c;你有多少预算&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["不懂技术，坐标海外，想开发个同城app该如何避坑", ["坐标海外，发现中国人圈之间的信息还是相对闭塞，所以想搭建一个有益于大家的平台（并赚钱）\n", "\n", "产品方向是大众点评+小红书 toCtoB 但本人不是互联网行业出身，没有技术，链接供应链比较擅长。", "目前还停留在犹豫应该找个人外包还是团队外包的环节，没有头绪", "想请教各位老师帮我梳理一下优先级"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;Aspect用的多少版本&amp;#xff0c;切面里面打印下线程号呢&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["aop执行顺序错误，after在around之前执行了", ["请教各位，今天执行代码的时候修改aop相关代码，发现", "@after居然在@Around之前执行了", "\n", "问题相关代码，请勿粘贴截图", "\n", "\n", "运行结果及报错内容", "\n", "\n", "高版本的aop虽然是存在执行优先级的，但是around在after之前。 after在around之前执行了，项目中就一个Aspect", "\n", "请教各位有没有碰到过，这个具体是什么原因呢"]], "Tag": "程序设计"}
{"Answer": "这两句话先别纠结，你想下，maybtis是如何知道该使用哪个databaseId的sql的，原因很简单，通过Connection#getMetaData()#getDatabaseProductName()来获取数据库信息和databaseId信息做比对，如果匹配那就使用，如果不匹配了可能就使用没有databaseId的通用sql，其实你知己知道原理，加上一些测试都可以得出结论，不必纠结", "Konwledge_Point": "优先级", "Question": ["关于mybaits的providerDatabase", ["1、如果 Configuration 的 databaseId 不为空，则它只会找到配置 databaseId 的 SQL 语句。", "\n2、MyBatis如果同时找到了带有 databaseId 和 不带 databaseId 的相同SQL语句，则后者会被舍去。即带有 databaseId 的 SQL 优先级更高", "\n\n", "这两句话不冲突吗？具体是指什么意思，哪位大神能给解释下啊"]], "Tag": "程序设计"}
{"Answer": "理论上是随机的，哪个抢到cpu资源就执行哪个，线程初始化的时候会设置默认优先级为5，可以通过设置线程优先级让线程更有抢的cpu资源的优势，但是也只是相对随机的，代码实现的时候就当成随机，不要依赖这一点就行了，Thread类有三个静态变量可以设置线程执行优先级分别为高中低 \r\n     Thread.MAX_PRIORITY;\r\n\t\t Thread.MIN_PRIORITY;\r\n\t\t Thread.NORM_PRIORITY;", "Konwledge_Point": "优先级", "Question": ["java多线程中关于使用notify()方法的几个疑问", ["代码：", "\n\n", "public class NotifyAndWaitTest2 implements Runnable {\n    public int i = 0;\n    public Object lock;\n    public SimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n\n    public NotifyAndWaitTest2(Object o) {\n        this.lock = o;\n    }\n\n    @Override\n    public void run() {\n        synchronized (lock) {\n            System.out.println(Thread.currentThread().getName() + \" enter the SYNCHRONIZED block --- \"+ sdf.format(new Date()));\n            try {\n                while (i < 9) {\n                    Thread.sleep(500);\n                    lock.notify();\n                    lock.wait();\n                    System.out.println(Thread.currentThread().getName() + \" say：\" + i++ + \" --- \" + sdf.format(new Date()));\n                }\n                lock.notify();\n                return;\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Object lock = new Object();\n        NotifyAndWaitTest2 test = new NotifyAndWaitTest2(lock);\n        Thread t1 = new Thread(test,\"Thread A\");\n        Thread t2 = new Thread(test,\"Thread B\");\n        Thread t3 = new Thread(test,\"Thread C\");\n        Thread t4 = new Thread(test,\"Thread D\");\n        t1.start();\n        t2.start();\n        t3.start();\n        t4.start();\n    }\n}\n", "\n\n", "执行结果：", "\n\n", "Thread A enter the SYNCHRONIZED block --- 10:47:07.242\nThread B enter the SYNCHRONIZED block --- 10:47:07.743\nThread C enter the SYNCHRONIZED block --- 10:47:08.243\nThread D enter the SYNCHRONIZED block --- 10:47:08.743\nThread C say：0 --- 10:47:09.243\nThread D say：1 --- 10:47:09.744\nThread C say：2 --- 10:47:10.244\nThread D say：3 --- 10:47:10.744\nThread C say：4 --- 10:47:11.245\nThread D say：5 --- 10:47:11.745\nThread C say：6 --- 10:47:12.246\nThread D say：7 --- 10:47:12.746\nThread C say：8 --- 10:47:13.247\nThread D say：9 --- 10:47:13.247\nThread B say：10 --- 10:47:13.247\nThread A say：11 --- 10:47:13.247\n", "\n\n", "这段代码我在 jdk1.7 和 jdk1.8 中都执行过，结果是\"相同的\"", "\n\n", "我主要有两个问题：（以我贴出的这个执行结果为例）", "\n\n", "1、在线程A 和线程B 进入了同步代码块之后，并且线程B 调用了 wait() 方法，为什么接下来一定是另外两个线程进入同步代码块？而不是线程A 开始打印 say。是\"让新的线程进入同步代码块\"的优先级比\"调用wait()方法的线程被唤醒\"的优先级高吗？", "\n\n", "2、为什么调用 notify() 方法只能唤醒最后一个调用了 wait() 方法的线程？就像上面这个执行结果，只有线程C 和线程D 互相唤醒对方，为什么不能唤醒其他的线程，比如线程A 和线程B？", "\n\n", "我认为抢对象锁应该是不规律的、随机的，比如这样：", "\n\n", "Thread A enter the SYNCHRONIZED block\nThread B enter the SYNCHRONIZED block\nThread A say：0\nThread C enter the SYNCHRONIZED block\nThread B say：1\nThread A say：2\nThread D enter the SYNCHRONIZED block\nThread B say：3\nThread C say：4\n"]], "Tag": "程序设计"}
{"Answer": "https://blog.csdn.net/SmartLoveyu/article/details/90239733", "Konwledge_Point": "优先级", "Question": ["进程调度算法中多级反馈队列算法的一个疑惑", ["假设有两个优先级队列Q1、Q2、Q3。", "\nQ1当前无进程，于是执行Q2中的进程J2，此时J2正在一个时间片内执行，但是进程J1加入到了Q1中，请问此时是停止执行J1转向J2执行还是等待J2执行再回到Q1队列？假如是停止执行，那么它停止后到哪里去了？Q2队尾？或者Q3？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;编译器不报错&amp;#xff0c;不代表可以正确运行&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["C语言的正确定义和赋值", ["float b[3][5],", "p[3];", "p[0]=b[0];", "p[2]=", "b+4;", "以上为什么是正确的定义和赋值语句，因为", "的优先级比+高，所以", "b+4不应该是一个值吗？而p中不应该存放地址吗？所以为什么正确呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;不要用类名. class,new一个object对象锁即可。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["java多线程安全同步问题", ["IDEA中同样的代码，在synchronized（）里面放的同步监视器不同，一个是this、另一个是类.class，两者加了锁之后都没有安全问题，但是前者只是一个线程一直在运行，后者才会三个线程交替运行，改了sleep时间、线程优先级还是一样，想不通不应该是程序问题啊，知道的大佬帮帮忙，会不会是idea配置的问题？", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你的问题是&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["了解浏览器缓存机制吗？", ["浏览器缓存就是把一个已经请求过的资源拷贝一份存储起来，当下次需要该资源时，浏览器会根据缓存机制决定直接使用缓存资源还是再次向服务器发送请求.", "from memory cache ; from disk cache", "作用: 减少网络传输的损耗以及降低服务器压力。", "优先级: 强制缓存 > 协商缓存; cache-control > Expires > Etag > Last-modified"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://www.cnblogs.com/hhh5460/p/6926909.html\"&gt;https://www.cnblogs.com/hhh5460/p/6926909.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;参考这篇文档&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["python编写计算小程序", ["习题三 编写程序，随机生成 4 个 1～10 之间的整数，允许重复，判断其能否算出 24。计算规则为：（1）允许使用加减乘除等运算；（2）允许使用括号改变优先级。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;改usr/bin 下面的gcc软连接.这肯定是优先级最高的。&lt;br /&gt;如果usr/bin下面有gcc&amp;#xff0c;那你可以使用mv将gcc重命名为gcc5&amp;#xff0c;然后创建软连接名为gcc去连接到gcc7.然后gcc -v&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["gcc/g++ 版本无法正常更改", ["ubuntu20.04.3lts上，在进行某些编译工作时报错，进一步发现gcc与cc版本不同，前者为5后者为7，于是想统一为gcc-7", "\n", "但是用改软链接、换优先级均无效", "\n", "\n", "\n", "使用gcc -v，发现版本始终没有改变，不知道有没有XD遇到过类似的问题，还是我的理解出了问题"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;SQL的话先查字段一然后union all 字段二不行吗&amp;#xff0c;不然整elasticsearch检索打分&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["查出数据库表中字段1或字段2中能够匹配到关键字key的数据，想优先显示字段1中匹配的数据", ["项目中想要优化一个mysql模糊查询的功能：", "业务场景：查出数据库表中字段1或字段2中能够匹配到关键字key的数据，优先显示字段1中匹配的，但是字段2中能够匹配的记录也要显示；", "现状：我用的mysql concat(str1, str2)的函数，这样虽然能查询出所有匹配的结果，但是不能按优先级让匹配字段1的先展示。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;任务调度方式很多&amp;#xff0c;以时间片轮为例。系统有个tick时钟&amp;#xff0c;tick中断发生的时候&amp;#xff0c;系统的任务调度器就保存当前正在执行的任务的堆栈和程序指针等信息&amp;#xff0c;装入下一个任务的信息&amp;#xff0c;这样就切换到另一个任务了。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["请问想FreeRTOS和UCOS这种嵌入式系统是怎么从每个任务的死循环跳出执行下一个任务的", ["不同优先级的任务都是死循环，有些使用延时触发任务调度，有的没有使用延时，是怎么实现任务调度的", "\n", "\n", " ", "//task1任务函数", "\n", "void", " ", "task1_task", "(", "void", " *pvParameters", ")\n{\n\n\n    \n    ", "while", "(", "1", ")\n    {\n。。。。。。。。。。。。。。。\n    }\n}\n\n", "//task2任务函数", "\n", "void", " ", "task2_task", "(", "void", " *pvParameters", ")\n{\n    ", "while", "(", "1", ")\n    {\n                \n    }\n}\n\n", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "\n\n"]], "Tag": "程序设计"}
{"Answer": "i += ++i -&gt;i = i + (++i) = 1 + (++1) = 1 + 2 = 3", "Konwledge_Point": "优先级", "Question": ["关于java运算符的疑惑？", ["对java的运算规则一脸懵逼，可以详细分析一下吗", "\n\n", "      int i = 1;\n        i = i++;   \n        System.out.println(i); //输出i=1\n\n", "\n\n", "\n      int i = 1;\n        i += ++i; //自增的优先级不是高于“+”吗\n        System.out.println(i); //输出i=3,我以为是4\n"]], "Tag": "程序设计"}
{"Answer": "```\r\n#include&lt;stdio.h&gt;\r\n#include&lt;string.h&gt;\r\n#include&lt;queue&gt;\r\n#include&lt;algorithm&gt;\r\nusing namespace std;\r\nstruct node\r\n{\r\n    int k,x;\r\n    bool operator &lt; (const node &amp;a) const\r\n    {\r\n        if(a.x!=x)\r\n            return a.x&gt;x;\r\n        else\r\n            return a.k&lt;k;\r\n    }\r\n};\r\nint main()\r\n{\r\n    int n;\r\n    while(~scanf(\"%d\",&amp;n))\r\n    {\r\n        int t=1;\r\n        priority_queue&lt;node&gt;q[4];\r\n        struct node now;\r\n        for(int i=0;i&lt;n;i++)\r\n        {\r\n            getchar();\r\n            char s[10];\r\n            int a,b;\r\n            scanf(\"%s%d\",s,&amp;a);\r\n            if(strcmp(s,\"IN\")==0)\r\n            {\r\n                scanf(\"%d\",&amp;b);\r\n                now.k=t++;\r\n                now.x=b;\r\n                q[a].push(now);\r\n            }\r\n            else\r\n            {\r\n                if(!q[a].empty())\r\n                {\r\n                    now=q[a].top();\r\n                    q[a].pop();\r\n                    printf(\"%d\\n\",now.k);\r\n                }\r\n                else\r\n                    printf(\"EMPTY\\n\");\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\n```\r\nhttps://blog.csdn.net/admin__/article/details/81109980", "Konwledge_Point": "优先级", "Question": ["C++编程填空：排队看医生", ["描述\n看病要排队是地球人都知道的常识。不过细心的Rainbow观察发现，医院里排队还是有讲究的：Rainbow所去的医院有三个医生同时看病。而看病的人病情有轻重，所以不能根据简单的先来先服务的原则。所以医院对每种病情规定了10种不同的优先级。级别为10的优先权最高，级别为1的优先权最低。医生在看病时，则会在他的队伍里面选择一个优先权最高的人进行诊治。如果遇到两个优先权一样的病人的话，则选择最早来排队的病人。\n\n现在，请你来模拟一下这个看病的过程吧！\n\n", "\n\n", "输入\n输入数据包含多组测试。第一行一个整数T(1<=T<=20)，表示测试数据数目。\n每组数据第一行有一个正整数N(1<=N<=20000)表示发生事件的数目。\n接下来有N行分别表示发生的事件。\n一共有两种事件：\nIN A B,表示有一个拥有优先级B的病人要求医生A诊治。(1<=A<=3, 1<=B<=10)\nOUT A,表示医生A进行了一次诊治，诊治完毕后，病人出院。(1<=A<=3)\n\n", "\n\n", "输出\n对于每个”OUT A”事件，请在一行里面输出被诊治人的编号ID。如果该事件时无病人需要诊治，则输出”EMPTY”。\n诊治人的编号ID的定义为：在一组测试中，”IN A B”事件发生第K次时，进来的病人ID即为K。从1开始编号。\n", "\n\n", "样例输入", "\n\n", "2\n7\nIN 1 1\nIN 1 2\nOUT 1\nOUT 2\nIN 2 1\nOUT 2\nOUT 1 \n2\nIN 1 1\nOUT 1\n", "\n\n", "样例输出", "\n\n", "2\nEMPTY\n3\n1\n1\n", "\n\n", "\n", "http://cxsjsx.openjudge.cn/2018midexamcloze/B/", "\n"]], "Tag": "程序设计"}
{"Answer": "你把变量绑定到final，也可以在匿名类中访问。或者直接做参数传递进去", "Konwledge_Point": "优先级", "Question": ["java在匿名内部类中如何访问外部的变量？", [" package 线程优先级;\nimport java.awt.*;\nimport javax.swing.*;\npublic class MyThread extends JFrame {\n    static int i=0; \n    private static Thread thread[]=new Thread[4];\n    private static JProgressBar pb[]=new JProgressBar[4];\n    public MyThread(String title)\n     {\n         super(title);\n         Container container=this.getContentPane();\n         container.setLayout(new GridLayout(4,1));\n         for(int i=0;i<4;i++)\n         {\n             pb[i]=new JProgressBar();\n             pb[i].setStringPainted(true);\n         }\n         while(i<4)\n         {\n             thread[i]=new Thread(new Runnable(){\n                 public void run(){\n                     int progress=0;\n                     while(progress<=100)\n                     {\n                         try{\n                             Thread.sleep(100);\n                         }catch(Exception e)\n                         {\n                             e.printStackTrace();\n                         }\n                         pb[i].setValue(progress++);   //此处有问题\n                     }   \n                 }\n             }\n                     );\n                 i++;\n         }\n           for(int i=0;i<4;i++)\n               container.add(pb[i]);\n           this.setSize(400,400);\n           this.setVisible(true);\n           this.setDefaultCloseOperation(EXIT_ON_CLOSE);\n           thread[0].setPriority(5);\n           thread[1].setPriority(5);\n           thread[2].setPriority(4);\n           thread[3].setPriority(3);\n           i=0;\n           while(i<4)\n           {\n               thread[i].start();\n               i++;\n           }\n     }\n           public  static void main(String[] args)\n           {\n               new MyThread(\"线程优先级\");\n           }\n}\n\n", "\n\n", "这段代码由于我在run()方法里设置进度条的数字时用了静态变量，导致在调用线程start()方法的时候里面的进度条只动了一条。如果不用静态变量的话我又不知道怎么在Runnable的匿名内部类中访问外部循环的i，有没有什么办法在匿名内部类中能够访问外部的参数，而且不是常量不是静态变量？"]], "Tag": "程序设计"}
{"Answer": "这个问题主要还是理解 ++ 的功能，与 * 与 ++ 的执行优先级。\r\n++ 在后是先执行，再加一；而在前是先加一，再执行。", "Konwledge_Point": "优先级", "Question": ["怎么理解指针运算符\"*\"和自增\"++\"的应用?", ["例:int a[5]={11,22,33,44,55};", "\n    int ", "p=a;", "\n        printf(\"*p++ = %d\\n\",*p++);", "\n        printf(\"", "++p = %d\\n\",*++p);", "\n        上面的例子,输出结果都不一样,但它们优先级都是自右向左结合,该怎么理解?", "\n\n", "请大神指点迷津,感谢!!!!\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;51单片机有两种触发方式&amp;#xff1a;低电平触发和下降沿触发。&amp;#xff08;配置寄存器设置&amp;#xff09;&lt;br /&gt;低电平触发&amp;#xff1a;当检测到外部引脚为低电平触发中断的为低电平触发。&lt;br /&gt;下降沿触发&amp;#xff1a;当检测到外部引脚由高电平变以低电平的瞬间时触发中断的为下降沿触发。&lt;br /&gt;车辆刚驶入&amp;#xff0c;遮挡住第一个光电开关&amp;#xff0c;第一个光电开关触发后会开始中断程序&amp;#xff0c;也就是由亮变暗&amp;#xff0c;或者暗的时候触发中断&amp;#xff0c;&lt;br /&gt;当车辆驶离第一个光电开关时&amp;#xff0c;是由暗变亮&amp;#xff0c;不会再触发中断。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["51单片机的外部中断问题", ["51单片机外部中断问题", "\n", "  问题一：检测车辆进出，将两个光电开关接到51单片机的两个外部中断口，光电开关先后触发，分别设置中断优先级，车辆刚驶入，遮挡住第一个光电开关，第一个光电开关触发后会开始中断程序，当车辆驶离第一个光电开关时   中断算不算再次触发？然后再次执行？\n问题二：若车辆驶入后又倒车返回，两个光电开关被两次触发，两个中断是如何执行的？\n"]], "Tag": "程序设计"}
{"Answer": "一般会先把中缀表达式转换为后缀表达式，然后再借助栈来处理。", "Konwledge_Point": "优先级", "Question": ["初学C语言，大神帮忙给下思路。", ["算术表达式词法分析程序", "\n1，从键盘输入一个表达式，如（23-（4*5.2-2.8））/-5；", "\n2，支持+，-，*，/，（）等符号。", "\n3，支持运算符的优先级。", "\n4，支持括号的嵌套。", "\n5，要求将输入的算术表达式分解成一个个单词，如（，23，-，（，4，*，5.2，-，2.8，），），/，-5."]], "Tag": "程序设计"}
{"Answer": "C语言是大小写敏感的语言\r\ntypedef struct\r\n{\r\n    StackElementType elem[Stack_Size];\r\n    int Top;\r\n}SeqStack; \r\n你注意看，Top是大写的\r\n\r\nS-&gt;top++;\r\n你这里是小写的。\r\n\r\n错误提示都是这个类型的错误", "Konwledge_Point": "优先级", "Question": ["【数据结构】用栈实现的带括号的多位数四则运算器", ["题目原型：  四则运算器：实现多位整数的带括号的四则运算", "\n\n", "现存问题：", "\n\n", "1.以下代码利用两个char类型的栈分别存取运算数和运算符，但在结束一次优先级高运算后（考虑到运算精度问题，故在程序中，将每次运算的结果都保存为double型）可能会出现浮点值，这个值必须要压栈，并于下一个优先级产生运算，但这个浮点型值无法压入char型栈中，必须要一位一位存取才可实现，请问有没有比较好的办法解决这个问题，应该怎样将数据压入栈中？", "\n\n", "2.程序中出现如图所示错误，麻烦大佬指点一下原因!", "\n", "\n\n", " #include <stdio.h>\n#include <stdlib.h>\n\n#define TRUE 1\n#define FALSE 0\n#define Stack_Size 50\n\ntypedef char StackElementType; \ntypedef struct\n{\n    StackElementType elem[Stack_Size];\n    int Top;\n}SeqStack; \n\nvoid InitStack(SeqStack *S);\nint Push(SeqStack *S,StackElementType x);\nint Pop(SeqStack *S,StackElementType *x);\nint GetTop(SeqStack *S,StackElementType *x);\nStackElementType Compare(StackElementType ch1,StackElementType ch2);\nStackElementType Execute(StackElementType a,StackElementType op,StackElementType b);\n\nint main()\n{\n    printf(\"%c\",ExpEvaluation()); \n    return(0);\n}\nStackElementType ExpEvaluation()\n{\n    SeqStack OPTR,OVS;\n    StackElementType n;\n    StackElementType a,b,ch,op,x,v;\n    InitStack(&OPTR);\n    InitStack(&OVS);\n    Push(&OPTR,'#');\n    printf(\"Please input an expression(Ending with #):\");\n    ch=getchar();//为方便，所以数字也以字符形式来存储 \n    while(ch!='#'||GetTop(&OPTR,&x)!='#')\n    {\n        if(ch>='0'&&ch<='9')//不是操作符，是操作数，进OVS栈 \n        {\n            int temp;\n            temp=ch-'0';//先把当前操作数从字符变为数字 \n            ch=getchar();\n            while(ch>='0'&&ch<='9')//继续判断下一位是否为操作数\n            {\n                temp=temp*10+ch-'0';\n                ch=getchar();\n            } \n            Push(&OVS,temp);\n\n        }\n        else\n        switch(Compare(ch,GetTop(&OPTR,&x)))\n        {\n            case '>':Push(&OPTR,ch);\n              scanf(\"%d\",&ch);\n            case '=':Pop(&OPTR,&op);ch=getchar();break;//脱括号 \n            case '<':Pop(&OPTR,&op);//形成运算 \n            Pop(&OVS,&b);\n            Pop(&OVS,&a);\n            v=Execute(a,op,b);\n            //此处需要将v转换为字符型并且入站 \n            Push(&OVS,v);\n            break; \n        }\n    }\n    v=GetTop(&OVS,&x);\n    return(v);\n} \n\n//初始化\nvoid InitStack(SeqStack *S)\n{\n    /*构造一个空栈S*/\n    S->top=-1; \n} \n//进栈\nint Push(SeqStack *S,StackElementType x)\n{\n    if(S->top==Stack_Size-1)\n     return(FALSE);\n    S->top++;\n    S->elem[S->top]=x;\n    return(TRUE);\n} \n//出栈\nint Pop(SeqStack *S,StackElementType *x)\n{\n    if(S->top==-1)\n     return(FALSE);\n    *x=S->elem[S->top];\n    S->top--;\n    return(TRUE);\n} \n//读栈顶\nint GetTop(SeqStack *S,StackElementType *x)\n{\n    if(S->top==-1)\n     return(FALSE);\n    else\n    {\n        *x=S->elem[S->top];\n        return(TRUE);\n    }\n} \n\n\n//比较优先级，返回'>','<','=' \nStackElementType Compare(StackElementType ch1,StackElementType ch2)\n//ch1为还未进栈的运算符，ch2为当前运算符栈顶元素 \n{\n    //'('未入栈时，优先级最高，入栈后，优先级最低 \n    switch(ch1)\n    {\n        case '(':ch1=6;break;\n        case '*':\n        case '/':ch1=5;break;\n        case '+':\n        case '-':ch1=4;break;\n        case ')':ch1=3;break;\n    }\n    switch(ch2)\n    {\n        case '*':\n        case '/':ch2=5;break;\n        case '+':\n        case '-':ch2=4;break;\n        case ')':ch2=3;break;\n        case '(':ch2=2;break;\n    }\n    if(ch1>ch2)\n     return('>');\n     else if(ch1=ch2)\n      return('=');\n      else\n       return('<');\n}\nStackElementType Execute(StackElementType a,StackElementType op,StackElementType b)\n{\n    double v;\n    switch(op)\n    {\n        case '+':v=(double)a+(double)b;break;\n        case '-':v=(double)a-(double)b;break;\n        case '*':v=(double)a*(double)b;break;\n        case '/':v=(double)a/(double)b;break;\n    }\n    return((StackElementType)v);\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "编译一个线程池，写一个锁，然后所有线程尝试获取这个锁。\r\n再用jvm工具，jstack，查看线程堆栈信息，就能看到，其他未获取锁的线程的状态  不是wait，而是block。\r\n谢谢\r\n方法告诉你了，验证一下就好。", "Konwledge_Point": "优先级", "Question": ["关于java中的多线程问题？", ["如果一个资源被加了锁，只能有一个线程去访问，那么此时没有得到锁的线程是处于什么状态，是和调用了wait()方法的线程一样被放入等待池吗？", "\n如果不是放入线程池，那么调用了notify()方法后，会随机将一个处于等待池的对象转移到锁池中，那么此时处于锁池中的线程，和处于该状态下的线程哪个获取cpu的优先级更高？求大神指点迷津，谢谢了！"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;def applyNumber(x):\n    if x[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]:\n        return x[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]\n    elif x[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]:\n        return x[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]\n    elif x[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;] :\n        return x[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]\n    elif x[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]:\n        return x[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]\n\ndf[&lt;span class=\"hljs-string\"&gt;&amp;#39;服务号码&amp;#39;&lt;/span&gt;] &amp;#61; df.apply(applyNumber,axis&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;x[0]、x[1]分别对应列的序号&amp;#xff0c;0表示入网号码&amp;#xff0c;1表示主卡现金收费号码&amp;#xff0c;以此类推&amp;#xff0c;判断为空那里根据实际的数值类型修改即可。望采纳&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["dataframe多列中选择不空的列生成新列", ["dataframe 内容，有", "4", "列，[", "'入网号码'", ",", "'主卡现金收费号码'", ",", "' 宽带接入号码'", ",", "'ITV接入号码'", "]，\n             入网号码     主卡现金收费号码      宽带接入号码 ITV接入号码\n", "0", "     ", "13376149513", "  ", "13376149513", "         ", "NaN", "     ", "NaN", "\n", "1", "     ", "19951667003", "  ", "19951667003", "         ", "NaN", "     ", "NaN", "\n", "2", "             ", "NaN", "          ", "NaN", "    ", "15147441", "     ", "NaN", "\n", "3", "     ", "17751524089", "  ", "17751524089", "    ", "15147441", "     ", "NaN", "\n", "4", "             ", "NaN", "          ", "NaN", "    ", "21011361", "     ", "NaN", "\n需要新生成一列’服务号码‘\n要求：\n 优先级从前到后，返回第一个不为空的值，填入新列’服务号码‘中\n", "\n", "期待解答"]], "Tag": "程序设计"}
{"Answer": "```\r\n *p++; 不是 *p = *p + 1; 它却是 *p = *(p+1); 而且是后加加。\r\nint a[5]={11,22,33,44,55};\r\nint *p=a;\r\nprintf(\"%d\\n\",*p++); 输出 a[0]的值 11，后加加：表达式里先用原值，不自增。\r\n出了上面打印语句再自增 *p = *(p+1); \r\n接着打印 printf(\"%d\\n\",*p); 打出 a[1]的值 22。\r\n```", "Konwledge_Point": "优先级", "Question": ["当指针'*'和自增\"++\"在一起的时候,如何执行?", ["例: int a[5]={11,22,33,44,55};", "\n    int ", "p=a;", "\n        printf(\"%d\\n\",*p++);", "\n        printf(\"%d\\n\",", "(p++));", "\n上面\"*p++\" 和\"*(p++)\",都是一样的自右向左的优先级.但又怎么先取值,再加1?", "\n不是先进行\"++\"后指针\"*\"吗?"]], "Tag": "程序设计"}
{"Answer": "jstl 使用多个 resource bundle 好像没有特别好的解决方案，你可以定义一个默认的resource bundle，而在其它使用时指定bundle。\r\n&lt;context-param&gt;\r\n        &lt;param-name&gt;javax.servlet.jsp.jstl.fmt.localizationContext&lt;/param-name&gt;\r\n        &lt;param-value&gt;StripesResources&lt;/param-value&gt;\r\n&lt;/context-param&gt;\r\n一般情况下，在项目开发中，resource 在哪个文件应该是比较明确的，分为多个文件事先就应该有规划。不应该出现，自己不知道它在哪个文件，让程序自己查找。\r\n如果在项目不同阶段，出于不同目的要使用不同的文件，可以在打包时处理。比如，提供resource-dev.properties，resource-prod.properties两个文件，打包时用ant 自动处理，复制到目标目录时，修改文件名，达到不同阶段相同resource 文件的目的。\r\n它过去的开发经验中，不同阶段打包的不同主要是出于项目的运行环境不同，一般不会涉及到resource文件的，比如，数据库配置，logging level的配置，服务器特定的配置文件等。\r\n另外，如果一定还是要坚持使用的话，如果是使用 Spring 的话，可以研究其MessageSource 的解决方案，结合它的JSTL view resovler，应该可以找到答案。", "Konwledge_Point": "优先级", "Question": ["jstl资源国际化的疑问", ["我这里所指的国际化，是在页面中显示的资源。", "\n\n", "我的经历：", "\n之前一直使用struts的国际化标签", "bean:message/", "，现在某些不可抗拒原因需要更换成为jstl", "\n现在发现jstl国际化时有些功能无法满足，现在把我的需求列举如下：", "\n[list]", "\n[*]可以在页面中方便的显示资源。可以用一个标签或者el就可以做到", "\n[*]可以同时在一个bundle中使用多个资源文件。", "\n[/list]", "\n\n", "对于第一个需求，struts和jstl都可以做到。", "\n\n", "针对第二个需求，大家都知道产品和项目的区别，产品中提供一套资源文件，而在项目定制中可能会定制其中的部分资源。", "\n那这时我当然希望可以同时引入这2个资源文件，优先级根据配置的顺序决定，例如在struts中这样配置：", "\n[code=\"xml\"]  \n      parameter=\"mypackage.myproduct.resource,mypackage.myproject.resource\"", "\n      null=\"false\">", "[/code]", "\n这就同时引入了2个资源文件，而且myproject资源优先级比myproduct的高。", "\n而在jstl中，只有bundle和资源文件一一对应，无法满足我的需求。", "\n\n", "不知道大家在开发中采用的是哪种方式？是不是有满足我需求的方法？", "\n[b]问题补充：[/b]", "\n如果确实没有方法，也只能定制tag了", "\n\n", "不过hantsy的回答最全面，还提到了一些实现的方法", "\n\n", "再等2天，希望可以有更满意的解决方案", "\n\n", "谢谢所有回答的人！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1.线程是cpu执行的最小单位&amp;#xff0c;而进程是线程的一个打包&amp;#xff0c;每个进程至少由一个线程组成&lt;br /&gt;没有人说过cpu一次只能运行同一个进程里的一个线程啊&amp;#xff0c;可以一个进程里的多个线程同时执行的&lt;br /&gt;而且即使是单核cpu&amp;#xff0c;多线程和单线程效果也完全不一样&lt;br /&gt;如果你的进程只有一个线程&amp;#xff0c;那你一旦执行了sleep&amp;#xff0c;整个进程都被阻塞了&amp;#xff1b;而如果你开2个线程&amp;#xff0c;cpu就可以分时复用&amp;#xff0c;把sleep的线程丢到后台去&amp;#xff0c;先执行其他的线程&lt;br /&gt;2.当cpu不繁忙的时候&amp;#xff0c;它就会按顺序调用栈里的线程来执行&amp;#xff1b;&lt;br /&gt;当cpu变得繁忙了&amp;#xff0c;它会优先调用优先级高的那些线程&amp;#xff0c;忽略优先级低的线程&lt;br /&gt;也就是概率变高了&lt;br /&gt;这样在每次抢占时长不变的情况下&amp;#xff0c;总时长是变长了的&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["学习时关于Java线程的疑问？", ["今天看学习视频时关于java线程有疑惑想请教一下大家：", "1.对于多核CPU，如果是多进程并行，那对每个进程来说，其中的线程是不是只能并发，不能同时并行。", "  一个核心只能处理一个任务，多线程并行和多进程并行（不是并发）是不是不能同时存在。", "2.优先级高的线程抢占的时间片多，这里的时间片多，指的是抢占到时间片的概率高，还是每次抢占到的时间片的时间长，该线程运行的时间长。", "请指点一下，谢谢。"]], "Tag": "程序设计"}
{"Answer": "Comparator&lt;Person&gt; cmp = new Comparator&lt;Person&gt;() {\r\n\r\n            public int compare(Person o1, Person o2) {\r\n                Comparator&lt;Object&gt; cmp = Collator.getInstance(java.util.Locale.CHINA);\r\n\r\n                String[] strs1 = new String[2];\r\n                strs1[0] = o1.getName1();\r\n                strs1[1] = o2.getName1();\r\n\r\n                String[] strs2 = new String[2];\r\n                strs2[0] = o1.getName2();\r\n                strs2[1] = o2.getName2();\r\n\r\n                Arrays.sort(strs1, cmp);\r\n                Arrays.sort(strs2, cmp);\r\n\r\n                if (strs1[0].equals(strs1[1])) {\r\n                    if (strs2[0].equals(strs2[1])) {\r\n                        return 0;\r\n                    }\r\n\r\n                    if (strs2[0].equals(o1.getName2())) {\r\n                        return -1;\r\n                    } else {\r\n                        return 1;\r\n                    }\r\n                } else {\r\n                    if (strs1[0].equals(o1.getName1())) {\r\n                        return -1;\r\n                    } else if (strs1[0].equals(o2.getName1())) {\r\n                        return 1;\r\n                    }\r\n                }\r\n\r\n                // 在这里实现你的比较\r\n\r\n                return 0;\r\n            }\r\n        };\r\n        Collections.sort(sabin, cmp);", "Konwledge_Point": "优先级", "Question": ["java List中关于中文排序的问题", ["问题描述：", "\n当有一个person类，里面有2个属性：name1，name2对应属性的是get，set方法。", "\n构造了4个person类的对象，如下", "\nPerson person1=new Person();", "\nPerson person2=new Person();", "\nPerson person3=new Person();", "\nPerson person4=new Person();", "\n       person1.setName1(\"张三\");", "\n       person1.setName2(\"刘刘\");", "\n\n", "   person2.setName1(\"张三\");\n   person2.setName2(\"照照\");\n\n\n   person3.setName1(\"李四\");\n   person3.setName2(\"窝窝\");\n\n   person4.setName1(\"李四\");\n   person4.setName2(\"牛牛\");\n", "\n\n", "将他们放入list中", "\n\n", "List sabin=new ArrayList();", "\n     sabin.add(person1);", "\n       sabin.add(person3);", "\n       sabin.add(person4);", "\n       sabin.add(person2);", "\n问题出现了，如何对sabin中的记录进行排序。", "\n补充：如果属性值为英文的我会，当象这样是中文的怎么排序呢，日文的呢。。。", "\n高手提供一下思路或相关连接谢了", "\n在补充能否先按name1排序，在按name2排序一下完成。", "\n[b]问题补充：[/b]", "\n你给了我按优先级排列的思路！！太厉害了，网上很少有按优先级排列的例子！但是日文和中文还得继续研究因为没有这句话", "\n Comparator cmp = Collator.getInstance(java.util.Locale.CHINA);", "\n系统也能实现分类排序，只是不知道排列的顺序是什么！！（按什么方式升序和降序）太感谢了"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;供参考\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    vector&amp;lt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;&amp;gt; input;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, b, result &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; str[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n    cin.&lt;span class=\"hljs-built_in\"&gt;getline&lt;/span&gt;(str, &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;);\n\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *s &amp;#61; &lt;span class=\"hljs-built_in\"&gt;strtok&lt;/span&gt;(str, &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (s !&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt; &amp;amp;&amp;amp; *s !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#64;&amp;#39;&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;isdigit&lt;/span&gt;(*s))\n        {\n            result &amp;#61; &lt;span class=\"hljs-built_in\"&gt;atoi&lt;/span&gt;(s);\n            input.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(result);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            b &amp;#61; input.&lt;span class=\"hljs-built_in\"&gt;back&lt;/span&gt;();\n            input.&lt;span class=\"hljs-built_in\"&gt;pop_back&lt;/span&gt;();\n            a &amp;#61; input.&lt;span class=\"hljs-built_in\"&gt;back&lt;/span&gt;();\n            &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (*s)\n            {\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n                result &amp;#61; a &amp;#43; b;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n                result &amp;#61; a - b;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n                result &amp;#61; a * b;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n                result &amp;#61; a / b;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n            input.&lt;span class=\"hljs-built_in\"&gt;pop_back&lt;/span&gt;();\n            input.&lt;span class=\"hljs-built_in\"&gt;push_back&lt;/span&gt;(result);\n        }\n\n        s &amp;#61; &lt;span class=\"hljs-built_in\"&gt;strtok&lt;/span&gt;(&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;);\n    }\n    cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; endl;\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["c++计算方程，求思路和题解", ["题目描述", "\n", "表达式所有计算按运算符号出现的顺序，严格地由左而右新进行（不用考虑运算符的优先级）以", "@表示结束。如 ", "3*(3-1)就写为 3 3 1 - * ", "@;在写表达式 ", "的时候以空格隔开。", "\n", "输入格式", "\n", "输入一行一个字符串 s，表示表达式。", "\n", "输出格式", "\n", "输出一个整数，表示表达式运算后的值", "\n", "样例输入1", "3 3 1 - * @", "样例输出 #1", "6", " 样例输入 #2", "1 1 + 2 3 * - @", "样例输出 #2", "4", "有人可以帮忙看一下吗，蒟蒻不会了。"]], "Tag": "程序设计"}
{"Answer": "我只能看到顺序不对，不知道是不是这个原因，thread[k].sleep(100)；这行代码里，thread[k]还没有new出来，没有实例，你写的代码是在new Runnable(){}里，你new这个不就是为了thread[k]本身实例化吗，在实例化的过程中调用，肯定是不对的啊，不过这里应该报空指针吧，下标越界我就不明白了", "Konwledge_Point": "优先级", "Question": ["java请问这段关于线程的代码出了什么问题？", [" package 线程优先级;\nimport java.awt.*;\nimport javax.swing.*;\npublic class MyThread extends JFrame{\n         static private Thread thread[]=new Thread[4];\n         static int k=0;\n         public MyThread(String title)\n         {\n             super(title);\n             Container container=this.getContentPane();\n             container.setLayout(null);\n             JProgressBar pb[]=new JProgressBar[4];\n             for(int i=0;i<4;i++)\n             {\n                 pb[i]=new JProgressBar();\n                 pb[i].setStringPainted(true);\n             }\n             for(k=0;k<4;k++)\n             {\n                 thread[k]=new Thread(new Runnable(){\n                     public void run()\n                     {\n                         for(int i=0;i<=100;i++)\n                         {\n                             try{\n                                Thread.sleep(100);\n                             }catch(Exception e)\n                             {\n                                 e.printStackTrace();\n                             }\n                            ** pb[k].setValue(i);**             //这句话似乎是错误的\n                         }\n                     }\n                 }\n                         );\n             }\n                  thread[0].setPriority(5);\n                  thread[1].setPriority(5);\n                  thread[2].setPriority(4);\n                  thread[3].setPriority(3);\n                  for(int i=0;i<4;i++)\n                      thread[i].start();\n                  this.setSize(400,400);\n                  this.setVisible(true);\n                  this.setDefaultCloseOperation(EXIT_ON_CLOSE);\n         }\n                 public static void main(String[] args)\n                 {\n                     new MyThread(\"线程优先级\");\n                 }\n  }\n\n", "\n\n", "错误提示是数组下标越界，我没找到究竟怎么会越界的？求解"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;注意两个问题&amp;#xff1a;一个是存在相位差的信号&amp;#xff0c;二是两组方波信号&lt;br /&gt;&lt;strong&gt;定时器配置&lt;/strong&gt;&lt;br /&gt;注&amp;#xff1a;*&lt;em&gt;这种测速的情况必须开启另一个定时器&amp;#xff0c;用来表示在多少时间内测得的脉冲数。&lt;/em&gt;例如目前使用TIM1&amp;#xff0c;设为1s进行计数。&lt;br /&gt;STM32Cube MX中进行定时器配置&amp;#xff1a;定时器时钟频率为80MHz。&lt;br /&gt;&lt;strong&gt;定时器编码器模式设置&lt;/strong&gt;&lt;br /&gt;使用TIM3设为编码器模式&amp;#xff0c;可以对两路有相位差&amp;#xff08;90°或者270°&amp;#xff09;的方波信号进行脉冲计数和方向位测试。&lt;br /&gt;在主循环开始前&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-constructor\"&gt;HAL_TIM_Encoder_Start_IT(&amp;amp;&lt;span class=\"hljs-params\"&gt;htim3&lt;/span&gt;,TIM_CHANNEL_ALL)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//打开编码器中断&lt;/span&gt;\n&lt;span class=\"hljs-constructor\"&gt;HAL_TIM_Base_Start_IT(&amp;amp;&lt;span class=\"hljs-params\"&gt;htim1&lt;/span&gt;)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//开启1S定时中断&lt;/span&gt;\n&lt;span class=\"hljs-constructor\"&gt;__HAL_TIM_ENABLE_IT(&amp;amp;&lt;span class=\"hljs-params\"&gt;htim3&lt;/span&gt;,TIM_IT_UPDATE)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//更新中断用于溢出计数&lt;/span&gt;\n\n在中断中\nvoid &lt;span class=\"hljs-constructor\"&gt;HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;htim&lt;/span&gt;)&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//捕获中断中可以添加自己所需要的标志位&lt;/span&gt;\n{undefined\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(htim3.Instance-&amp;gt;CR1&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0x01&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//顺时针&lt;/span&gt;\n{}\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(htim3.Instance-&amp;gt;CR1&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0x11&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//逆时针&lt;/span&gt;\n{}\n}\nvoid &lt;span class=\"hljs-constructor\"&gt;HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef &lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;htim&lt;/span&gt;)&lt;/span&gt;\n{undefined\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(TIM1&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;htim-&amp;gt;Instance)\n{undefined\nt200 &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(TIM3&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;htim-&amp;gt;Instance)\n{undefined\nTIM3UP&amp;#43;&amp;#43;;\n&lt;span class=\"hljs-constructor\"&gt;__HAL_TIM_CLEAR_IT(&amp;amp;&lt;span class=\"hljs-params\"&gt;htim3&lt;/span&gt;,TIM_IT_UPDATE)&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(htim3.Instance-&amp;gt;CR1&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0x01&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//顺时针&lt;/span&gt;\n{undefined\ncircle_count&amp;#43;&amp;#43;;\n}\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(htim3.Instance-&amp;gt;CR1&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0x11&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//逆时针&lt;/span&gt;\n{undefined\ncircle_count–;\n}\n  }\n   }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在主循环中&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t200&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n  {\n      t200 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n      &lt;span class=\"hljs-constructor\"&gt;HAL_TIM_Encoder_Stop(&amp;amp;&lt;span class=\"hljs-params\"&gt;htim3&lt;/span&gt;,TIM_CHANNEL_ALL)&lt;/span&gt;;\n      &lt;span class=\"hljs-constructor\"&gt;__HAL_TIM_DISABLE_IT(&amp;amp;&lt;span class=\"hljs-params\"&gt;htim3&lt;/span&gt;,TIM_IT_UPDATE)&lt;/span&gt;;\n\n      directuinA &amp;#61; &lt;span class=\"hljs-constructor\"&gt;__HAL_TIM_IS_TIM_COUNTING_DOWN(&amp;amp;&lt;span class=\"hljs-params\"&gt;htim3&lt;/span&gt;)&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//用来获取方向&lt;/span&gt;\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(directuinA&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//顺时针&amp;#xff0c;会从0开始向上计数&amp;#xff0c;来一个脉冲&amp;#xff0c;增加一个计数&lt;/span&gt;\n      {\n        CaptureNumberA &amp;#61; TIM3UP&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;65535&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-constructor\"&gt;__HAL_TIM_GET_COUNTER(&amp;amp;&lt;span class=\"hljs-params\"&gt;htim3&lt;/span&gt;)&lt;/span&gt;;\n      }\n      &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(directuinA&lt;span class=\"hljs-operator\"&gt; &amp;#61;&amp;#61; &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//逆时针&amp;#xff0c;会从65535开始向下计数&amp;#xff0c;来一个脉冲&amp;#xff0c;减去一个计数&amp;#xff1b;TIM3UP 是为了计数溢出所添加的&lt;/span&gt;\n      {\n        CaptureNumberA &amp;#61; TIM3UP&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;65535&lt;/span&gt;  - &lt;span class=\"hljs-constructor\"&gt;__HAL_TIM_GET_COUNTER(&amp;amp;&lt;span class=\"hljs-params\"&gt;htim3&lt;/span&gt;)&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n      }\n      &lt;span class=\"hljs-comment\"&gt;//除以4是由于四倍频的缘故&amp;#xff0c;PULSE_CIRCLE是指一圈有多少脉冲&amp;#xff0c;*60是为了换算成r/min&lt;/span&gt;\n      T_SPEED &amp;#61; (CaptureNumberA&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;4.0&lt;/span&gt;)&lt;span class=\"hljs-operator\"&gt; / &lt;/span&gt;PULSE_CIRCLE&lt;span class=\"hljs-operator\"&gt; * &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;;\n      \n      &lt;span class=\"hljs-constructor\"&gt;HAL_TIM_Base_Stop(&amp;amp;&lt;span class=\"hljs-params\"&gt;htim3&lt;/span&gt;)&lt;/span&gt;;\n      &lt;span class=\"hljs-constructor\"&gt;__HAL_TIM_SET_COUNTER(&amp;amp;&lt;span class=\"hljs-params\"&gt;htim3&lt;/span&gt;,0)&lt;/span&gt;;\n      TIM3UP &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n      &lt;span class=\"hljs-constructor\"&gt;HAL_TIM_Base_Start(&amp;amp;&lt;span class=\"hljs-params\"&gt;htim3&lt;/span&gt;)&lt;/span&gt;;\n  }\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["STM32F407最小系统板HAL库定时器配置编码器模式CNT一直为0", ["问题遇到的现象和发生背景", "\n", "STM32F407最小系统板HAL库定时器配置编码器模式CNT一直为0，编码器是AB相增量式霍尔编码器", "定时器和IO口使用的是TIM3 CH1 CH2, PA6, PA7", "\n", "问题相关代码，请勿粘贴截图", "\n", "编码器初始化：", "\n", "TIM_HandleTypeDef TIM3_Handler;\nTIM_Encoder_InitTypeDef TIM3_Encoder_Handler;\n\nvoid Encoder_Init(void) {\n    \n    TIM_Encoder_InitTypeDef sConfig = {", "0", "};\n    TIM_MasterConfigTypeDef sMasterConfig = {", "0", "};\n\n    ", "/* USER CODE BEGIN TIM3_Init 1 */", "\n\n    ", "/* USER CODE END TIM3_Init 1 */", "\n    TIM3_Handler.Instance = TIM3;\n    TIM3_Handler.Instance->SMCR &= ~TIM_SMCR_SMS;\n    TIM3_Handler.Init.Prescaler = ", "0", ";\n    TIM3_Handler.Init.CounterMode = TIM_COUNTERMODE_UP;\n    TIM3_Handler.Init.Period = ", "65535", ";\n    TIM3_Handler.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;\n    TIM3_Handler.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;\n    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;\n    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;\n    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;\n    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;\n    sConfig.IC1Filter = ", "10", ";\n    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;\n    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;\n    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;\n    sConfig.IC2Filter = ", "10", ";\n    ", "if", " (HAL_TIM_Encoder_Init(&TIM3_Handler, &sConfig) != HAL_OK) {\n        \n        printf(", "\"TIM3 Encoder Init Error!/r/n\"", ");\n        \n    }\n    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;\n    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\n    ", "if", " (HAL_TIMEx_MasterConfigSynchronization(&TIM3_Handler, &sMasterConfig) != HAL_OK) {\n        \n        printf(", "\"TIM3 Master Config Error!/r/n\"", ");\n        \n    }\n", "//", "  ", "/* 清零计数器 */", "\n    __HAL_TIM_SET_COUNTER(&TIM3_Handler, ", "0", ");\n\n", "//", "    ", "/* 清零中断标志位 */", "\n    __HAL_TIM_CLEAR_IT(&TIM3_Handler,TIM_IT_UPDATE);\n", "//", "    ", "/* 使能定时器的更新事件中断 */", "\n", "//", "    __HAL_TIM_ENABLE_IT(&TIM3_Handler,TIM_IT_UPDATE);\n", "//", "    ", "/* 设置更新事件请求源为：计数器溢出 这个地方可能会忘记设置 */", "\n", "//", "    __HAL_TIM_URS_ENABLE(&TIM3_Handler);\n\n", "//", "    ", "/* 设置中断优先级 */", "\n", "//", "    HAL_NVIC_SetPriority(TIM3_IRQn, ", "1", ", ", "0", ");\n", "//", "    ", "/* 使能定时器中断 */", "\n", "//", "    HAL_NVIC_EnableIRQ(TIM3_IRQn);\n\n    HAL_TIM_Encoder_Start(&TIM3_Handler, TIM_CHANNEL_ALL);\n\n}\n\nvoid HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim) {\n    \n    ", "if", " (htim->Instance == TIM3) {\n        printf(", "\"TIM3 Encoder Msp Init\\r\\n\"", ");\n        GPIO_InitTypeDef GPIO_Initure;\n        __HAL_RCC_TIM3_CLK_ENABLE();\n        __HAL_RCC_GPIOA_CLK_ENABLE();\n        \n        GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7;\n        GPIO_Initure.Mode = GPIO_MODE_AF_PP;\n        GPIO_Initure.Pull = GPIO_PULLUP;\n        GPIO_Initure.Speed = GPIO_SPEED_FREQ_LOW;\n        GPIO_Initure.Alternate = GPIO_AF2_TIM3;\n        HAL_GPIO_Init(GPIOA, &GPIO_Initure);\n        \n", "//", "        HAL_NVIC_SetPriority(TIM3_IRQn, ", "0", ", ", "0", ");\n", "//", "        HAL_NVIC_EnableIRQ(TIM3_IRQn);\n        \n    }\n    \n}\n", "\n", "主循环代码：", "\n", "Encoder_Init", "();\n", "while", " (", "1", ") {\n    ", "CaptureNumber", " ", "=", " ( int16_t )", "TIM3", "->", "CNT", ";\n    printf(", "\"输入捕获值：%d ", "\\r", "\\n", "\"", ", ", "CaptureNumber", ");\n    ", "// 4 : 使用定时器编码器接口捕获AB相的上升沿和下降沿，一个脉冲*4.", "\n    ", "// 11：编码器线数(转速一圈输出脉冲数)", "\n    ", "// 34：电机减数比，内部电机转动圈数与电机输出轴转动圈数比，即减速齿轮比", "\n    printf(", "\"电机实际转动速度：%0.2f(圈/s)", "\\r", "\\n", "\"", ",(float) ", "CaptureNumber", "/", "4", "/", "11", "/", "34", ");\n    ", "TIM3", "->", "CNT", " ", "=", " ", "0", ";\n    delay_ms(", "200", ");\n}\n", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "网上大部分HAL库的都试过了", "\n", "我想要达到的结果", "\n", "能正常读取编码器数据就行"]], "Tag": "程序设计"}
{"Answer": "css继承并不能继承所有的样式，你可以看看哪些能够继承，哪些不能\r\nhttps://www.cnblogs.com/guokaifeng/p/10999679.html", "Konwledge_Point": "优先级", "Question": ["CSS中为什么<a>标签下的子元素<p>不能改自己的text-decoration, 而只能由<a>来改？", ["我的CSS代码是这样的：", "\n在a下的p内添加了text-decoration属性，但是网页内a的下划线效果并没有消失。", "\n但是如果这么写：", "\n问题就解决了。按理来说不应该要求是继承样式的优先级是最低的吗？为什么会这样？"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-bash\"&gt;\n$a || $b  就是  a 或者 b ,所以结果是 &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;\n\n同时&amp;#xff0c;如果是表达式&amp;#xff0c;那么 如果表达式a 为真&amp;#xff0c;后面的php就不处理了&amp;#xff0c;直接返回&lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;&amp;#xff0c;如果表达式a为假&amp;#xff0c;那么再去看表达式b\n或的原则就是有一个为真就是真\n\n$c &amp;#61; $a &lt;span class=\"hljs-literal\"&gt;or&lt;/span&gt; $b  这个就像 $c * $a &amp;#43; $b 类型&amp;#xff0c;先处理 $c&amp;#61;$a,然后结果与$b &lt;span class=\"hljs-literal\"&gt;or&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["关于php的运算符问题", ["=  >  and\n// 优先级： ||  >  =  >  or\n \n$a = 3;\n$b = false;\n$c = $a or $b;\nvar_dump($c);          // 这里的 $c 为 int 值3，而不是 boolean 值 true\n$d = $a || $b;\nvar_dump($d);          //这里的 $d 就是 boolean 值 true \n?>\n", "为什么  //这里的 $d 就是 boolean 值 true", "这里一直理解不了，$a || $b 他的内容不是3 || false吗，为什么结果是true"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;消费者手动签收&amp;#xff0c;再重新发送消息试一次&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["springboot整合RabbitMQ3.6.3版本优先队列 队列没有起作用", ["springboot整合RabbitMQ3.6.3版本优先队列 队列没有起作用", "\n", " 问题相关代码", "先创建交换机以及队列等", "\n", "@Configuration\n", "public", " ", "class", " ", "priorityConfig", " {\n    ", "//创建优先级队列等", "\n    ", "//交换机", "\n    ", "public", " ", "static", " ", "final", " ", "String", " PRIORITY_EXCHANGE_NAME =", "\"priority.exchange\"", ";\n    ", "//队列", "\n    ", "public", " ", "static", " ", "final", " ", "String", " PRIORITY_QUEUE_NAME =", "\"priority.queue\"", ";\n    ", "//信道", "\n    ", "public", " ", "static", " ", "final", " ", "String", " PRIORITY_ROTING_KEY_NAME =", "\"k1\"", ";\n\n    ", "//创建交换机", "\n    @", "Bean\n    ", "public", " DirectExchange ", "PRIORITYEXCHANGENAME", "()", "{\n        ", "return", "  ", "new", " ", "DirectExchange", "(PRIORITY_EXCHANGE_NAME);\n    }\n    ", "//创建队列", "\n    @", "Bean\n    ", "public", " Queue ", "PRIORITYQUEUEENAME", "()", "{\n", "//        return QueueBuilder.durable(PRIORITY_QUEUE_NAME).maxPriority(10).build();", "\n        HashMap<", "String", ", Object> map = ", "new", " HashMap<>();\n        map.", "put", "(", "\"x-max-priority\"", ",", "10", ");\n        ", "return", " QueueBuilder.", "durable", "(PRIORITY_QUEUE_NAME).", "withArguments", "(map).", "build", "();\n    }\n    ", "//创建交换机", "\n    @", "Bean\n    ", "public", " Binding ", "Binding", "(@Qualifier(", "\"PRIORITYEXCHANGENAME\"", ") DirectExchange exchange,@Qualifier(", "\"PRIORITYQUEUEENAME\"", ") Queue queue)", "{\n        ", "return", " BindingBuilder.", "bind", "(queue).", "to", "(exchange).", "with", "(PRIORITY_ROTING_KEY_NAME);\n    }\n}\n", "\n", "然后 编写 消息 生产者以及消费者", "生产者", "\n", "@RestController", "\n", "@Slf4j", "\n", "public", " ", "class", " ", "prioritycontroller", " {\n    ", "//交换机", "\n    ", "public", " ", "static", " ", "final", " ", "String", " ", "PRIORITY_EXCHANGE_NAME", " ", "=", "\"priority.exchange\"", ";\n    ", "//队列", "\n    ", "public", " ", "static", " ", "final", " ", "String", " ", "PRIORITY_QUEUE_NAME", " ", "=", "\"priority.queue\"", ";\n    ", "//信道", "\n    ", "public", " ", "static", " ", "final", " ", "String", " ", "PRIORITY_ROTING_KEY_NAME", " ", "=", "\"k1\"", ";\n    ", "@Autowired", "\n    RabbitTemplate rabbitTemplate;\n\n    ", "@GetMapping(\"/kk\")", "\n    ", "public", " ", "void", " ", "test", "()", " {\n        ", "for", " (", "int", " ", "i", " ", "=", " ", "0", "; i < ", "10", "; i++) {\n            ", "if", " (i == ", "5", ") {\n                ", "//1.创建消息属性", "\n                ", "MessageProperties", " ", "messageProperties", " ", "=", " ", "new", " ", "MessageProperties", "();\n                ", "//2.设置优先级", "\n                messageProperties.setPriority(", "9", ");\n                ", "//3.创建消息对象", "\n                ", "Message", " ", "message", " ", "=", " ", "new", " ", "Message", "((", "\"sendMessage...\"", "+i).getBytes(),messageProperties);\n                ", "//4.发送消息", "\n                rabbitTemplate.convertAndSend(PRIORITY_EXCHANGE_NAME,PRIORITY_ROTING_KEY_NAME,message);\n            } ", "else", " {\n                ", "//1.创建消息属性", "\n                ", "MessageProperties", " ", "messageProperties", " ", "=", " ", "new", " ", "MessageProperties", "();\n                ", "//2.设置优先级", "\n                messageProperties.setPriority(", "1", ");\n                ", "//3.创建消息对象", "\n                ", "Message", " ", "message", " ", "=", " ", "new", " ", "Message", "((", "\"sendMessage...\"", "+i).getBytes(),messageProperties);\n                rabbitTemplate.convertAndSend(PRIORITY_EXCHANGE_NAME, PRIORITY_ROTING_KEY_NAME, message );\n            }\n        }\n    }\n}\n", "//消费者", "\n", "@Component", "\n", "@Slf4j", "\n", "public", " ", "class", " ", "Consumer", " {\n    ", "@RabbitListener(queues = \"priority.queue\")", "\n    ", "public", " ", "void", " ", "receiveConfirmMessages", "(Message message)", " {\n        log.info(", "\"收到了消息为：\"", " + ", "new", " ", "String", "(message.getBody()));\n    }\n}\n", "\n", "我先是注销这个消费者模拟一个阻塞状态 消息全部在 队列中 ，生产者发送消息 到队列 我看图形化界面也是 排好序了的 也就是说 第五条消息是在第一位", "\n", "\n", "事实证明我是对的图形化界面 第五条消息是在第一 然后 启用消费者 发现 打印出来的消息 不是第一条 是其他消息条数", "\n", "\n", "尝试过其他博主的方法 没有成功 "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1、D&amp;#xff0c;2、C,3、D&amp;#xff0c;4、面向对象&amp;#xff0c;5、B,&lt;strong&gt;如有帮助,请采纳&lt;/strong&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["1.以下常量定义中正确的是()", ["1.以下常量定义中正确的是()。", "A. const int i=123c      B.final float=7.8", "C. boolean b=1             D.final int num=100", "2.用来导入类或包的语句是()", "A.main    B.package  C.import  D.include", "3.下面哪一个操作符的优先级最高？", "A.&&    B.||     C.!      D.()", "4.java语言是一种_______语言，这是这种语言的程序设计思想与C语言的更本区别。", "5.下面的程序段输出的结果是()", "String s=\"abc\";", "s=s+1;", "System.out.println(s)", "A.abc+1       B.abc1    C.ab    D.错误结果"]], "Tag": "程序设计"}
{"Answer": "我也写了一个，写得不好，请见谅。\r\n\r\npackage com.billy.demo;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport android.app.ListActivity;\r\nimport android.content.Context;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.BaseAdapter;\r\nimport android.widget.CheckBox;\r\nimport android.widget.CompoundButton;\r\nimport android.widget.TextView;\r\nimport android.widget.CompoundButton.OnCheckedChangeListener;\r\n\r\npublic class TestListViewAndCheckbox extends ListActivity {\r\n    /** Called when the activity is first created. */\r\n    Context context = null;\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.main);\r\n        context = getApplicationContext();\r\n        setListAdapter(new MyListAdapter());\r\n    }\r\n    \r\n    class MyListAdapter extends BaseAdapter{\r\n        String data[] = new String[]{\"apple\", \"pear\", \"banana\", \"orange\",\"apple\", \"pear\", \"banana\", \"orange\",\"apple\", \"pear\", \"banana\", \"orange\"};\r\n        List&lt;Integer&gt; checkPosition = new ArrayList&lt;Integer&gt;(data.length);\r\n        @Override\r\n        public int getCount() {\r\n            // TODO Auto-generated method stub\r\n            return data.length;\r\n        }\r\n\r\n        @Override\r\n        public Object getItem(int position) {\r\n            // TODO Auto-generated method stub\r\n            return data[position];\r\n        }\r\n\r\n        @Override\r\n        public long getItemId(int position) {\r\n            // TODO Auto-generated method stub\r\n            return position;\r\n        }\r\n\r\n        @Override\r\n        public View getView(int position, View convertView, ViewGroup parent) {\r\n            // TODO Auto-generated method stub\r\n            if (null == convertView){\r\n                LayoutInflater inflater      = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\r\n                convertView = inflater.inflate(R.layout.list_item, parent, false);\r\n            }\r\n            TextView text       =   (TextView)convertView.findViewById(R.id.info);\r\n            final CheckBox checkbox   =   (CheckBox)convertView.findViewById(R.id.checkstatus);\r\n            checkbox.setTag(new Integer(position));\r\n            text.setText(data[position]);\r\n            if (checkPosition != null){\r\n                checkbox.setChecked((checkPosition.contains(new Integer(position)) ? true : false)); \r\n            }else{\r\n                checkbox.setChecked(false); \r\n            }\r\n            \r\n            checkbox\r\n            .setOnCheckedChangeListener(new OnCheckedChangeListener() {\r\n\r\n                @Override\r\n                public void onCheckedChanged(CompoundButton buttonView,\r\n                        boolean isChecked) {\r\n                    // TODO Auto-generated method stub\r\n                    if (isChecked){\r\n                        if (!checkPosition.contains(checkbox.getTag())){\r\n                            checkPosition.add((Integer)checkbox.getTag());\r\n                        }\r\n                    }else{\r\n                        if (checkPosition.contains(checkbox.getTag())){\r\n                            checkPosition.remove(checkbox.getTag());\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            return convertView;\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n\r\nxml\r\n\r\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:orientation=\"vertical\"\r\n    android:layout_width=\"fill_parent\"\r\n    android:layout_height=\"fill_parent\"\r\n    &gt;\r\n\t&lt;TextView  \r\n    \tandroid:layout_width=\"fill_parent\" \r\n    \tandroid:layout_height=\"wrap_content\" \r\n    \tandroid:text=\"@string/hello\"\r\n    /&gt;\r\n    &lt;ListView \t\r\n       \tandroid:id =\"@android:id/list\" \r\n        android:layout_width=\"wrap_content\" \r\n        android:layout_height=\"fill_parent\"\r\n        android:scrollbarStyle=\"outsideOverlay\"\r\n    /&gt;\r\n&lt;/LinearLayout&gt;\r\n\r\n\r\n\r\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"fill_parent\"\r\n    android:layout_height=\"fill_parent\"\r\n    android:orientation=\"horizontal\"\r\n    &gt;\r\n    &lt;TextView\r\n    \tandroid:id=\"@+id/info\"\r\n    \tandroid:layout_width=\"wrap_content\"\r\n    \tandroid:layout_height=\"wrap_content\"\r\n    /&gt;\r\n\t&lt;CheckBox\r\n\t\tandroid:id=\"@+id/checkstatus\"\r\n    \tandroid:layout_width=\"wrap_content\"\r\n    \tandroid:layout_height=\"wrap_content\"\r\n         android:focusable=\"false\" \r\n\t/&gt;\r\n\t\r\n&lt;/LinearLayout&gt;\r\n\r\n\r\n\r\n只是一个demo，自己写的时候还要多注意。 list文字部分可点击", "Konwledge_Point": "优先级", "Question": ["如何在ListView中添加CheckBox", ["我自定义了一个ListView布局，想在里面添加一个CheckBox按钮，我遇到了下面的第二个问题，虽然有解决方法但不知道具体怎么做，最好能给个完整的例子，谢谢大家了！", "\n1、ListView item中加入checkbox后onListItemClick 事件无法触发。", "\n原因：checkbox的优先级高于ListItem于是屏蔽了ListItem的单击事件。", "\n解决方案：设置checkbox的android:focusable=\"false\"", "\n2、选择其中的checkbox，当滚动ListView的时候，会出现一些Checkbox选择错位的现象，", "\n原因：为记住Checkbox的选择状态", "\n解决方案：当选择Checkbox的时候，记下其状态，然后在getView方法中进行设置"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;i &amp;#61;&amp;#61; 1 or 5 是用 or 分隔的&lt;br /&gt;i &amp;#61;&amp;#61; 1&lt;br /&gt;和&lt;br /&gt;5&lt;br /&gt;两个条件表达式。&lt;br /&gt;其中5是一个单独的条件表达式&amp;#xff0c;5在条件判断时永远为真&amp;#xff0c; or 两边是任何一边为真结果就是真。&lt;br /&gt;所以i &amp;#61;&amp;#61; 1 or 5 表达式的结果就是永远为真。&lt;/p&gt;\n&lt;p&gt;if i &amp;#61;&amp;#61; (1 or 5):  也是不对&lt;br /&gt;or 和 and 是逻辑运算, 具有短路特性。&lt;br /&gt;逻辑运算的工作原理是&amp;#xff1a;&lt;br /&gt;表达式A and 表达式B 的工作原理是&amp;#xff1a;如果A的值为false(或A的值可以被当做为false)就返回A的值并且不执行表达式B&amp;#xff0c;否则执行表达式B并且返回B的值&lt;br /&gt;表达式A or 表达式B 的工作原理是&amp;#xff1a;如果A的值为true(或A的值可以被当做为true)就返回A的值并且不执行表达式B&amp;#xff0c;否则执行表达式B并且返回B的值&lt;/p&gt;\n&lt;p&gt;i &amp;#61;&amp;#61; (1 or 5) 会先计算(1 or 5) , 1可以被当做为true就直接返回1,  5不会计算到&lt;br /&gt;所以if i &amp;#61;&amp;#61; (1 or 5):  等同于 if i &amp;#61;&amp;#61; 1:&lt;/p&gt;\n&lt;p&gt;正确的写法是&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-type\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;or&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;要简写可以这样子&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;if &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; in &lt;span class=\"hljs-selector-attr\"&gt;[1,5]&lt;/span&gt;:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;就是判断i的值是否包含在[1,5]列表中&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "优先级", "Question": ["python if语句中or的语法问题", ["背景", "\n", "在写一个if语句中带有or判断的语句时为了简化，先写成了一下的样子", "\n", "i", " = ", "3", "\n", "if", " ", "i", " == ", "1", " ", "or", " ", "5", ":\n    ", "print", "(", "i", ")", "\n\n结果:\n", "3", "\n", "\n", "由于or优先级最低，因此边成了 i==1和5两个条件的判断，结果不对于是改成下面的样子", "\n", "代码如下", "\n", "i", " = ", "5", "\n", "if", " ", "i", " == (", "1", " ", "or", " ", "5", "):\n    ", "print", "(", "i", ")", "\n", "else", "：\n    ", "print", "(", "'not'", ")", "\n\n结果：\n", "not", "\n", "\n", "i", " = ", "1", "\n", "if", " ", "i", " == (", "1", " ", "or", " ", "5", "):\n    ", "print", "(", "i", ")", "\n", "else", "：\n    ", "print", "(", "'not'", ")", "\n\n结果：\n", "1", "\n", "\n", "不知道为啥这样，我看网上有人说可以这样写的", "\n", "希望的结果", "\n", "i = 5\n", "if", " i == 1 ", "or", " ", "i", "== 5:\n    ", "print", "(i)\n", "else", "：\n    ", "print", "(", "'not'", ")\n\n结果：\n5\n", "\n", "希望与这个效果一样但是省略i== 不知道可以不"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;可以确认一下你的代码实现了PWM输出&amp;#xff0c;是否可以驱动你的舵机。此外&amp;#xff0c;还需要确保舵机的供电电压、电流都满足要求。可以根据舵机的数据手册&amp;#xff0c;检查您的驱动模块是否正常工作。&lt;/p&gt;\n&lt;p&gt;此外&amp;#xff0c;还有一些细节&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;在代码中&amp;#xff0c;P3.5被用作PWM输出&amp;#xff0c;确保该引脚是51单片机的可用输出引脚。&lt;br /&gt;定时器1的初始值需要根据实际情况调整。&lt;br /&gt;在control函数中&amp;#xff0c;角度变量angle的初始值是否与舵机的要求一致。&lt;br /&gt;control函数中的Delay1ms延时是否合适。&lt;br /&gt;还有&amp;#xff1a;&lt;br /&gt;这个问题可能是由于舵机不能得到足够的电流供应造成的。可以尝试通过更换驱动模块&amp;#xff0c;或增加电流供应的方式来解决这个问题。此外&amp;#xff0c;还可以检查舵机的连接是否正确&amp;#xff0c;确保舵机的控制信号被正确地发送到驱动模块。&lt;/p&gt;\n&lt;p&gt;另外&amp;#xff0c;你的代码中存在一些错误&amp;#xff0c;请检查代码&amp;#xff0c;以确保所有的变量都有正确的值&amp;#xff0c;以免对舵机控制造成影响。比如&amp;#xff0c;在 control 函数中&amp;#xff0c; angle 变量没有正确地初始化&lt;br /&gt;如果以上所有因素都没有问题&amp;#xff0c;那么你的代码应该可以正常驱动舵机。如果问题仍然存在&amp;#xff0c;请提供更多信息&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["51单片机驱动不了sg90舵机", ["我是在用51单片机最小系统板做智能小车，用L298N驱动模块输入12v后再通过L298N的5v输出经过稳压给单片机供电。然后通过这样的供电方式使用舵机的时候，舵机有很明显的响声，但是舵机没有转动。请问各位这是什么原因？", "代码如下：", "\n", "#", "include", " ", "<REGX52.H>", "\n", "#", "include", " ", "<intrins.h>", "\n", "#", "include", " ", "\"delay.h\"", "\n\nsbit PWM = P3^", "5", ";\n\n\n", "unsigned", " ", "char", " counter;\n", "unsigned", " ", "char", " angle;\n\n", "void", " ", "Timer1_Init", "()", "        ", "//500微秒@11.0592MHz", "\n", "{\n    TMOD &= ", "0x0F", ";            ", "//设置定时器模式", "\n    TMOD |= ", "0x10", ";            ", "//设置定时器模式", "\n    TL1 = ", "0x33", ";                ", "//设置定时初始值", "\n    TH1 = ", "0xFE", ";                ", "//设置定时初始值", "\n    TF1 = ", "0", ";                ", "//清除TF1标志", "\n    TR1 = ", "1", ";                ", "//定时器1开始计时", "\n    ET1 = ", "1", ";                ", "//使能定时器1中断", "\n    EA = ", "1", ";         ", "//打开总中断", "\n    PT1 = ", "1", ";         ", "//设置优先级", "\n}\n\n", "void", " ", "control", "()", "\n", "{\n    counter = ", "2", ";       ", "//右转", "\n    angle = ", "1", ";           \n    ", "Delay1ms", "(", "1000", ");\n    \n    counter = ;       ", "//左转", "\n    angle = ", "4", "；           \n    ", "Delay1ms", "(", "1000", ");\n    \n    counter = ", "3", ";      ", "//归中", "\n    angle = ;           \n    ", "Delay1ms", "(", "1500", ");\n    \n}\n\n", "void", " ", "Timer1_Isr", "()", " interrupt 3\n", "{\n    TL1 = ", "0x33", ";                ", "//设置定时初始值", "\n    TH1 = ", "0xFE", ";                ", "//设置定时初始值", "\n    counter++;\n    ", "if", "(counter == ", "40", ")\n    {\n        counter = ", "0", ";\n    }\n    ", "if", "(counter <= angle)\n    {\n        PWM = ", "1", ";\n    }\n    ", "else", "\n    {\n        PWM = ", "0", ";\n    }\n    TR1 = ", "1", ";\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;C:\\Program Files (x86)\\Microsoft SDK\\src\\crt\\strtok.c&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;/***\n*strtok.c - tokenize a string with given delimiters\n*\n*       Copyright (c) 1989-2001, Microsoft Corporation. All rights reserved.\n*\n*Purpose:\n*       defines strtok() - breaks string into series of token\n*       via repeated calls.\n*\n*******************************************************************************/&lt;/span&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cruntime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;ifdef&lt;/span&gt; _MT&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;mtdll.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;endif&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;/* _MT */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;/***\n*char *strtok(string, control) - tokenize string with delimiter in control\n*\n*Purpose:\n*       strtok considers the string to consist of a sequence of zero or more\n*       text tokens separated by spans of one or more control chars. the first\n*       call, with string specified, returns a pointer to the first char of the\n*       first token, and will write a null char into string immediately\n*       following the returned token. subsequent calls with zero for the first\n*       argument (string) will work thru the string until no tokens remain. the\n*       control string may be different from call to call. when no tokens remain\n*       in string a NULL pointer is returned. remember the control chars with a\n*       bit map, one bit per ascii char. the null char is always a control char.\n*\n*Entry:\n*       char *string - string to tokenize, or NULL to get next token\n*       char *control - string of characters to use as delimiters\n*\n*Exit:\n*       returns pointer to first token in string, or if string\n*       was NULL, to next token\n*       returns NULL when no more tokens remain.\n*\n*Uses:\n*\n*Exceptions:\n*\n*******************************************************************************/&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; * __cdecl &lt;span class=\"hljs-title\"&gt;strtok&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;(\n        &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; * string,\n        &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; * control\n        )&lt;/span&gt;\n&lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *str;\n        &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *ctrl &amp;#61; control;\n\n        &lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; map[&lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;];\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; count;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;ifdef&lt;/span&gt; _MT&lt;/span&gt;\n        _ptiddata ptd &amp;#61; _getptd();\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;/* _MT */&lt;/span&gt;&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *nextoken;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;endif&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;/* _MT */&lt;/span&gt;&lt;/span&gt;\n\n        &lt;span class=\"hljs-comment\"&gt;/* Clear control map */&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; count &amp;lt; &lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;; count&amp;#43;&amp;#43;)\n                map[count] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n        &lt;span class=\"hljs-comment\"&gt;/* Set bits in delimiter table */&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt; {\n                map[*ctrl &amp;gt;&amp;gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;] |&amp;#61; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (*ctrl &amp;amp; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;));\n        } &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (*ctrl&amp;#43;&amp;#43;);\n\n        &lt;span class=\"hljs-comment\"&gt;/* Initialize str. If string is NULL, set str to the saved\n         * pointer (i.e., continue breaking tokens out of the string\n         * from the last strtok call) */&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (string)\n                str &amp;#61; string;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;ifdef&lt;/span&gt; _MT&lt;/span&gt;\n                str &amp;#61; ptd-&amp;gt;_token;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;/* _MT */&lt;/span&gt;&lt;/span&gt;\n                str &amp;#61; nextoken;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;endif&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;/* _MT */&lt;/span&gt;&lt;/span&gt;\n\n        &lt;span class=\"hljs-comment\"&gt;/* Find beginning of token (skip over leading delimiters). Note that\n         * there is no token iff this loop sets str to point to the terminal\n         * null (*str &amp;#61;&amp;#61; &amp;#39;\\0&amp;#39;) */&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; ( (map[*str &amp;gt;&amp;gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;] &amp;amp; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (*str &amp;amp; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;))) &amp;amp;&amp;amp; *str )\n                str&amp;#43;&amp;#43;;\n\n        string &amp;#61; str;\n\n        &lt;span class=\"hljs-comment\"&gt;/* Find the end of the token. If it is not the end of the string,\n         * put a null there. */&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; ( ; *str ; str&amp;#43;&amp;#43; )\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ( map[*str &amp;gt;&amp;gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;] &amp;amp; (&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (*str &amp;amp; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;)) ) {\n                        *str&amp;#43;&amp;#43; &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;\n                        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n                }\n\n        &lt;span class=\"hljs-comment\"&gt;/* Update nextoken (or the corresponding field in the per-thread data\n         * structure */&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;ifdef&lt;/span&gt; _MT&lt;/span&gt;\n        ptd-&amp;gt;_token &amp;#61; str;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;/* _MT */&lt;/span&gt;&lt;/span&gt;\n        nextoken &amp;#61; str;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;endif&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;/* _MT */&lt;/span&gt;&lt;/span&gt;\n\n        &lt;span class=\"hljs-comment\"&gt;/* Determine if a token has been found. */&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ( string &amp;#61;&amp;#61; str )\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; string;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["请问strtok为什么不能继续输出子串？", ["华为OD题，简单题", "\n", "题目2 标题 火星文计算", "描述 已知火星人使用的运算符为#、$，其与地球人的等价公式如下：", "x#y = 4", "x+3", "y+2", "x$y = 2*x+y+3", "1、其中x,y 是无符号整数", "2、地球人公式按C语言规则计算", "3、火星人公式中，#的优先级高于$，相同的运算符，按从左到右的顺序计算。", "现有一段火星人的字符报文，请你来翻译并计算结果", "\n", "输入描述", "火星人字符串表达式（结尾不带回车换行）", "输入的字符串说明：字符串为仅由无符号整数和操作符（#，$）组成的计算表达式。例如：123#4$5#67$78", "1、用例保证字符串中，操作数与操作符之间没有任何分隔符", "2、用例保证操作数取值范围为32位无符号整数", "3、保证输入以及计算结果不会出现整数溢出", "4、保证输入的字符串为合法的求值报文，例如123#4$5#67$78", "5、保证不会出现非法的求值报文，例如类似这样字符串：", "#4$5  //缺少操作数", "4$5#  //缺少操作数", "4#$5  //缺少操作数", "4 $5    //有空格", "3+4-5*6/7  //有其他操作符", "12345678987654321$54321   //32位整数计算溢出", "\n", "输出描述", "根据输入的火星人字符串输出计算结果（结尾不带回车换行）", "\n", "示例1", "输入", "7#6$5#12", "\n", "输出", "157", "\n", "说明", "示例：", "7#6$5#12", "=（4", "7+3", "6+2）$5#12", "=48$5#12", "=48$(4", "5+3", "12+2)", "=48$58", "=2*48+58+3", "=157", "\n", "我的问题描述:想用strtok分优先级先按照$分段然后逐段再解决，却发现无法成功输出下一个子串，但我没有用p操作而是复制了内存，不知道为什么无法继续分段？", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;把&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;(int)a/&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;改为&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; (int)a / &lt;span class=\"hljs-number\"&gt;100.0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;不然&amp;#xff0c;就按整除计算了。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a; &lt;span class=\"hljs-comment\"&gt;// 88.678&lt;/span&gt;\n  &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入一个三位小数: &amp;#34;&lt;/span&gt;);\n  &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;, &amp;amp;a);\n  a &amp;#61; a * &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 8867.8&lt;/span&gt;\n  a &amp;#61; a &amp;#43; &lt;span class=\"hljs-number\"&gt;0.5&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;// 8868.3&lt;/span&gt;\n  a &amp;#61; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;)a / &lt;span class=\"hljs-number\"&gt;100.0&lt;/span&gt;;\n  &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.2lf\\n&amp;#34;&lt;/span&gt;, a);\n  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["输入一个double数据，对第三位小数四舍五入后输出此数", ["第八行不应该是先强制取整后再用除法吗？", "优先级是强制执行大于乘除的呀[", "  输入23.456出来应该是23.46吧而不是23.00", "\n", "#include<stdio.h>//输入一个double数据，对第三位小数四舍五入后输出此数", "int main(){", "    double a;//88.678", "    printf(\"请输入一个三位小数:\\n\");", "    scanf(\"%lf\",&a);", "    a=a*100;//8867.8", "    a=a+0.5;//8868.3", "    a=(int)a/100;", "\n", "printf", "(", "\"%lf\\n\"", ",a);\n", "\n", "return 0;", " } "]], "Tag": "程序设计"}
{"Answer": "这篇文章&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/jokerljg/article/details/122684745\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;&amp;#64;Scheduled注解详解&lt;/font&gt;&lt;/a&gt; 也许有你想要的答案&amp;#xff0c;你可以看看", "Konwledge_Point": "优先级", "Question": ["@Scheduled 注解多配置", ["@Scheduled ", "注解 ，主要配置方式 有 cron  fixedDelay等,我把配置放到了application.yml,方便修改", "\n", "schedule:", "\n", "  enabled:", " true\n", "  poolSize:", " ", "10", "\n", "  syncHisOriginData:", "\n", "    cron:", " ", "0", "/", "1", " * * * * ?   ", "# - 表示停止此定时任务", "\n", "    delay:", " ", "\"1000\"", " \n\n @Scheduled(fixedDelayS", "tring", " ", "=", " ", "\"${schedule.syncHisOriginData.delay}\"", ")\n", "\n", "我的情况，cron 和 fixedDelayString 一起写，cron  写 “-”，然后就报错了：Encountered invalid ", "@Scheduled ", "method 'execute': Exactly one of the 'cron', 'fixedDelay(String)', or 'fixedRate(String)' attributes is required，由此写一个配置；为什么要这么设计，配置可以写多个，然后设置个优先级这样会不会更好点"]], "Tag": "程序设计"}
{"Answer": "lz你读入运算的方式是什么啊，可以在这上面做一些判断", "Konwledge_Point": "优先级", "Question": ["三个数的四则运算用c语言怎么写。只要思路", ["如何判断优先级来进行三个数的四则运算。。只用printf", "\nscanf switch 和if语句。想了好久了"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;代码有不少问题\n给你整理了一份&amp;#xff1a;\nimport re\n\ndef caculator(eq):\n    format_list &amp;#61; eq_format(eq) &lt;span class=\"hljs-comment\"&gt;# 把字符串变成格式化列表形式&lt;/span&gt;\n    s_eq &amp;#61; simplify(format_list) &lt;span class=\"hljs-comment\"&gt;# 去括号&amp;#xff0c;得到无括号的一个格式化列表&lt;/span&gt;\n    ans &amp;#61; calculate(s_eq)    &lt;span class=\"hljs-comment\"&gt;# 计算最终结果&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; len(ans) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:      &lt;span class=\"hljs-comment\"&gt;# 判断最终结果为正数还是负数&lt;/span&gt;\n        ans &amp;#61; -float(ans[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        ans &amp;#61; float(ans[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;])\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ans\ndef eq_format(eq):\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;\n    :param eq: 输入的算式字符串\n    :return: 格式化以后的列表&amp;#xff0c;如[&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;*&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;]\n    &amp;#39;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n    format_list &amp;#61; re.findall(&lt;span class=\"hljs-string\"&gt;&amp;#39;[\\d\\.]&amp;#43;|\\(|\\&amp;#43;|\\-|\\*|\\/|\\)&amp;#39;&lt;/span&gt;,eq)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; format_list\ndef simplify(format_list):\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;\n    :param format_list: 输入的算式格式化列表如[&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;60&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;*&lt;span class=\"hljs-string\"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;]\n    :return: 通过递归去括号&amp;#xff0c;返回简化后的列表\n    &amp;#39;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n\n    bracket &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;   &lt;span class=\"hljs-comment\"&gt;# 用于存放左括号在格式化列表中的索引&lt;/span&gt;\n    count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in format_list:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;:\n            bracket &amp;#61; count\n        elif i &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;:\n            temp &amp;#61; format_list[bracket &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; : count]\n            &lt;span class=\"hljs-comment\"&gt;# print(temp)&lt;/span&gt;\n            new_temp &amp;#61; calculate(temp)\n            format_list &amp;#61; format_list[:bracket] &amp;#43; new_temp &amp;#43; format_list[count&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:]\n            format_list &amp;#61; change(format_list,bracket)   &lt;span class=\"hljs-comment\"&gt;# 解决去括号后会出现的-- &amp;#43;- 问题&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; simplify(format_list)      &lt;span class=\"hljs-comment\"&gt;# 递归去括号&lt;/span&gt;\n        count &amp;#61; count &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; format_list\ndef calculate(s_eq):\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;\n    :param s_eq: 不带括号的格式化列表\n    :return: 计算结果\n    &amp;#39;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; in s_eq:\n        s_eq &amp;#61; remove_multiplication_division(s_eq)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;or&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; in s_eq:\n        s_eq &amp;#61; remove_plus_minus(s_eq)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; s_eq\ndef remove_multiplication_division(eq):\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;\n    :param eq: 带有乘除号的格式化列表\n    :return: 去除了乘除号的格式化列表\n    &amp;#39;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n    count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in eq:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; e&lt;span class=\"hljs-string\"&gt;q[count&amp;#43;1]&lt;/span&gt; !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n                e&lt;span class=\"hljs-string\"&gt;q[count-1]&lt;/span&gt; &amp;#61; float(e&lt;span class=\"hljs-string\"&gt;q[count-1]&lt;/span&gt;) * float(e&lt;span class=\"hljs-string\"&gt;q[count&amp;#43;1]&lt;/span&gt;)\n                del(e&lt;span class=\"hljs-string\"&gt;q[count]&lt;/span&gt;)\n                del(e&lt;span class=\"hljs-string\"&gt;q[count]&lt;/span&gt;)\n            elif e&lt;span class=\"hljs-string\"&gt;q[count&amp;#43;1]&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n                e&lt;span class=\"hljs-string\"&gt;q[count]&lt;/span&gt; &amp;#61; float(e&lt;span class=\"hljs-string\"&gt;q[count-1]&lt;/span&gt;) * float(e&lt;span class=\"hljs-string\"&gt;q[count&amp;#43;2]&lt;/span&gt;)\n                e&lt;span class=\"hljs-string\"&gt;q[count-1]&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;\n                del(e&lt;span class=\"hljs-string\"&gt;q[count&amp;#43;1]&lt;/span&gt;)\n                del(e&lt;span class=\"hljs-string\"&gt;q[count&amp;#43;1]&lt;/span&gt;)\n            eq &amp;#61; change(eq,count-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; remove_multiplication_division(eq)\n        elif i &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; e&lt;span class=\"hljs-string\"&gt;q[count&amp;#43;1]&lt;/span&gt; !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n                e&lt;span class=\"hljs-string\"&gt;q[count-1]&lt;/span&gt; &amp;#61; float(e&lt;span class=\"hljs-string\"&gt;q[count-1]&lt;/span&gt;) / float(e&lt;span class=\"hljs-string\"&gt;q[count&amp;#43;1]&lt;/span&gt;)\n                del(e&lt;span class=\"hljs-string\"&gt;q[count]&lt;/span&gt;)\n                del(e&lt;span class=\"hljs-string\"&gt;q[count]&lt;/span&gt;)\n            elif e&lt;span class=\"hljs-string\"&gt;q[count&amp;#43;1]&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n                e&lt;span class=\"hljs-string\"&gt;q[count]&lt;/span&gt; &amp;#61; float(e&lt;span class=\"hljs-string\"&gt;q[count-1]&lt;/span&gt;) / float(e&lt;span class=\"hljs-string\"&gt;q[count&amp;#43;2]&lt;/span&gt;)\n                e&lt;span class=\"hljs-string\"&gt;q[count-1]&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;\n                del(e&lt;span class=\"hljs-string\"&gt;q[count&amp;#43;1]&lt;/span&gt;)\n                del(e&lt;span class=\"hljs-string\"&gt;q[count&amp;#43;1]&lt;/span&gt;)\n            eq &amp;#61; change(eq,count-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; remove_multiplication_division(eq)\n        count &amp;#61; count &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; eq\ndef remove_plus_minus(eq):\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;\n    :param eq: 只带有加减号的格式化列表\n    :return: 计算出整个列表的结果\n    &amp;#39;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n    count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; e&lt;span class=\"hljs-string\"&gt;q[0]&lt;/span&gt; !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n        sum &amp;#61; float(e&lt;span class=\"hljs-string\"&gt;q[0]&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;.&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in eq:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n            sum &amp;#61; sum - float(e&lt;span class=\"hljs-string\"&gt;q[count&amp;#43;1]&lt;/span&gt;)\n        elif i &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n            sum &amp;#61; sum &amp;#43; float(e&lt;span class=\"hljs-string\"&gt;q[count&amp;#43;1]&lt;/span&gt;)\n        count &amp;#61; count &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; sum &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n        eq &amp;#61; [str(sum)]\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n        eq &amp;#61; [&lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;,str(-sum)]\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; eq\ndef change(eq,count):\n    &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;\n    :param eq: 刚去完括号或者乘除后的格式化列表\n    :param count: 发生变化的元素的索引\n    :return: 返回一个不存在 &amp;#39;&lt;/span&gt;&amp;#43;-&lt;span class=\"hljs-string\"&gt;&amp;#39; ,&amp;#39;&lt;/span&gt;--&lt;span class=\"hljs-string\"&gt;&amp;#39;类的格式化列表\n    &amp;#39;&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; e&lt;span class=\"hljs-string\"&gt;q[count]&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; e&lt;span class=\"hljs-string\"&gt;q[count-1]&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:\n            e&lt;span class=\"hljs-string\"&gt;q[count-1]&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;\n            del e&lt;span class=\"hljs-string\"&gt;q[count]&lt;/span&gt;\n        elif e&lt;span class=\"hljs-string\"&gt;q[count-1]&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#43;&amp;#39;&lt;/span&gt;:\n            e&lt;span class=\"hljs-string\"&gt;q[count-1]&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;\n            del e&lt;span class=\"hljs-string\"&gt;q[count]&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; eq\n\nexpress &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;1-2*((60-30&amp;#43;(-40/5)*(9-2*5/3&amp;#43;7/3*99/4*2998&amp;#43;10*568/14))-(-4*3)/(16-3*2))&amp;#34;&lt;/span&gt;\nresult &amp;#61;caculator(express)\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(result)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["python，计算机程序运行结果很奇怪", ["问题遇到的现象和发生背景", "\n", "编写了一个计算器程序，但是输出结果很奇怪，希望能改正", "\n", "遇到的现象和发生背景，请写出第一个错误信息", "\n", "用代码块功能插入代码，请勿粘贴截图。 不用代码块回答率下降 50%", "\n", "operators", " = {\n    ", "\"(\"", ": ", "1", ",\n    ", "\")\"", ": ", "1", ",\n    ", "\"+\"", ": ", "2", ",\n    ", "\"-\"", ": ", "2", ",\n    ", "\"*\"", ": ", "3", ",\n    ", "\"/\"", ": ", "3", ",\n    ", "\"%\"", ": ", "3", ",\n    ", "\"^\"", ": ", "4", ",\n}\n", "expression", " = input(", "\"input expression：\"", ")\ndef calculate(expression):\n    ", "operands", " = []\n    ", "operators", " = []\n\n    ", "# 检查表达式是否合法", "\n    ", "if", " expression[", "0", "] ", "in", " operators ", "or", " expression[-", "1", "] ", "in", " operators:\n        return ", "\"Hint：the expression is wrong in format.\"", "\n\n    for i ", "in", " range(", "1", ", len(expression)):\n        ", "if", " expression[i] ", "in", " operators ", "and", " expression[i - ", "1", "] ", "in", " operators:\n            return ", "\"Hint：the expression is wrong in format.\"", "\n\n    ", "negative", " = False\n    for x ", "in", " expression:\n        ", "# 如果字符是数字，则将它压入操作数栈中", "\n        ", "if", " x.isdigit():\n            ", "if", " negative:\n                operands.append(-int(x))\n                ", "negative", " = False\n            ", "else", ":\n                operands.append(int(x))\n        ", "# 如果字符是运算符，则根据优先级规则压入或弹出运算符栈", "\n        elif x ", "in", " operators:\n            ", "if", " ", "x", " == ", "\"(\"", ":\n                operators.append(x)\n            elif ", "x", " == ", "\")\"", ":\n                while operators[-", "1", "] != ", "\"(\"", ":\n                    ", "operator", " = operators.pop()\n                    ", "b", " = operands.pop()\n                    ", "a", " = operands.pop()\n                    ", "if", " ", "operator", " == ", "\"+\"", ":\n                        operands.append(a + b)\n                    elif ", "operator", " == ", "\"-\"", ":\n                        operands.append(a - b)\n                    elif ", "operator", " == ", "\"*\"", ":\n                        operands.append(a * b)\n                    elif ", "operator", " == ", "\"/\"", ":\n                        operands.append(a / b)\n                    elif ", "operator", " == ", "\"%\"", ":\n                        operands.append(a % b)\n                    elif ", "operator", " == ", "\"^\"", ":\n                        operands.append(a ** b)\n                operators.pop()\n                ", "# 如果遇到其他运算符，则弹出运算符栈中优先级大于或等于当前运算符的运算符", "\n            ", "else", ":\n                while operators ", "and", " operators[-", "1", "] != ", "\"(\"", " ", "and", " operators.index(operators[-", "1", "]) >= operators.index(x):\n                    ", "operator", " = operators.pop()\n                    ", "b", " = operands.pop()\n                    ", "a", " = operands.pop()\n                    ", "if", " ", "operator", " == ", "\"+\"", ":\n                        operands.append(a + b)\n                    elif ", "operator", " == ", "\"-\"", ":\n                        operands.append(a - b)\n                    elif ", "operator", " == ", "\"*\"", ":\n                        operands.append(a * b)\n                    elif ", "operator", " == ", "\"/\"", ":\n                        operands.append(a / b)\n                    elif ", "operator", " == ", "\"%\"", ":\n                        operands.append(a % b)\n                    elif ", "operator", " == ", "\"^\"", ":\n                        operands.append(a ** b)\n                ", "# 将当前运算符压入运算符栈中", "\n                operators.append(x)\n        elif ", "x", " == ", "\"-\"", ":\n            ", "negative", " = True\n    return operands.pop()\n\n\n", "result", " = calculate(expression)\nprint(result)\n\n", "\n", "运行结果及详细报错内容", "\n", "1+1=1或1+3=3", "\n", "我的解答思路和尝试过的方法，不写自己思路的，回答率下降 60%", "\n", "建立一个数字栈和一个符号栈，遍历输入值里面的所有字符", "\n", "我想要达到的结果，如果你需要快速回答，请尝试 “付费悬赏”", "\n", "希望最后运行界面大概如下，如果表达式格式有误会提示", "input expresion：", "-2*(3+5)+2^3／4=", "-14", "continue or not(y，n)?", " y", "input expression：", "2 3 5+6=", "Hint：the expression is wrong in format."]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;steam先给A集合分组 分组成为一个集合map M,该map的key为a&amp;#xff0c;value为具有相同a的集合&lt;br /&gt;然后遍历map M&amp;#xff0c;value.steam取b值最大的一个元素 统一放到一个新集合&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["Java集合问题，取不重复集合", ["实体类集合list(A) A里面有字段a和b，b固定可取三个死值1、2、3，a不定，对于相同的a可能有多个不同的b对应(多个元素，里面a相同b不同)", "求：取a不重复的集合result，其中b优先级3>2>1（有3不取2，有2不取1）", "\n", "我的思路是把A根据b的1、2、3拆分成三个集合中A1\\A2\\A3，取最终结果时便利A，A3中存在放入result->A2中存在且result不存在放入result->A1中存在result中不存放入result，但是多次便利(拆分+取结果)，浪费时间浪费内存空间，有没有更好的解法求解答"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;跟硬件的限制有点关系&amp;#xff0c;理论上能达到18MHz&amp;#xff0c;实际上当你设置成2分频的时候属于超频了&amp;#xff0c;不太稳定&amp;#xff0c;有可能会出现通讯异常或者丢数据的情况。这就好比stm32的usb接口&amp;#xff0c;USB2.0全速理论上能达到12M&amp;#xff0c;但实际上受限于硬件&amp;#xff0c;连一半的速度都达不到。&lt;br /&gt;可以用逻辑分析仪或者示波器观察一下通讯时的波形&amp;#xff0c;可能存在变形失真的情况。&lt;br /&gt;还有跟代码的处理也有关系&amp;#xff0c;比如软件模拟SPI和硬件SPI会有差别&amp;#xff0c;用HAL库和直接操作寄存器也有一个运行效率的差别&amp;#xff0c;HAL库里面有些判断和处理也会对传输造成影响&amp;#xff0c;虽然代码的执行速度很快&amp;#xff0c;但是如果传输的数据量较大的时候&amp;#xff0c;这个累计消耗的时间就长了。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["两个STM32用SPI通信遇到的问题", ["在使用两个STM32使用SPI协议通信时  主机设置时钟分频因子为2 从机设置分频因子也为2。从机可以正确收到主机发来的数据，但是主机收到从机的数据不是00就是FF。 而我把主机设置时钟分频因子为256 从机设置分频因子也为256。这样双方都可正确收发数据，我想问这是为什么呢。", "\n", "主机SPI2设置", "\n", "void SPI2_Init(void)\n{\n    GPIO_InitTypeDef  GPIO_InitStructure;\n    SPI_InitTypeDef  SPI_InitStructure;\n    NVIC_InitTypeDef NVIC_InitStructure;\n    \n    ", "/* SPI的IO口和SPI外设打开时钟 */", "\n    RCC_APB2PeriphClockCmd(    RCC_APB2Periph_GPIOB, ENABLE );\n    RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);\n    \n    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;        ", "//", "PB12推挽输出\n    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  ", "//", "\n    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n    GPIO_Init(GPIOB, &GPIO_InitStructure);\n    \n    ", "/* SPI的IO口设置 */", "\n    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;\n    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  ", "//", "PB13", "/14/", "15", "复用推挽输出 \n    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n    GPIO_Init(GPIOB, &GPIO_InitStructure);\n\n    GPIO_SetBits(GPIOB,GPIO_Pin_12);\n    \n    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;  ", "//", "设置SPI单向或者双向的数据模式:SPI设置为双线双向全双工\n    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;        ", "//", "设置SPI工作模式:设置为主SPI\n    SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;        ", "//", "设置SPI的数据大小:SPI发送接收", "8", "位帧结构\n    SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;        ", "//", "串行同步时钟的空闲状态为高电平\n    SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;    ", "//", "串行同步时钟的第二个跳变沿（上升或下降）数据被采样\n    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;        ", "//", "NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制\n    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;        ", "//", "定义波特率预分频的值: \n    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;    ", "//", "指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始\n    SPI_InitStructure.SPI_CRCPolynomial = ", "7", ";    ", "//", "CRC值计算的多项式\n    SPI_Init(SPI2, &SPI_InitStructure);  ", "//", "根据SPI_InitStruct中指定的参数初始化外设SPIx寄存器\n    \n    SPI_Cmd(SPI2, ENABLE); ", "//", "使能SPI外设\n    \n    \n    SPI_I2S_ITConfig(SPI2,SPI_I2S_IT_RXNE,ENABLE);", "//", "开启相关中断\n    ", "//", "Usart1 NVIC 配置\n    NVIC_InitStructure.NVIC_IRQChannel = SPI2_IRQn;", "//", "SPI2中断通道\n    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=", "0", ";", "//", "抢占优先级", "0", "\n    NVIC_InitStructure.NVIC_IRQChannelSubPriority =", "2", ";        ", "//", "子优先级", "2", "\n    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            ", "//", "IRQ通道使能\n    NVIC_Init(&NVIC_InitStructure);    ", "//", "根据指定的参数初始化VIC寄存器、    \n    \n}\nu16 t=", "0", "xDD; ", "//", "中断接收数据\nvoid SPI2_IRQHandler(void) \n{ \n            ", "if", "(SPI_I2S_GetITStatus(SPI2,SPI_I2S_IT_RXNE) != RESET)\n    {\n        ", "while", " (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);\n        t = SPI_I2S_ReceiveData(SPI2);\n        GPIO_SetBits(GPIOB,GPIO_Pin_12);", "//", "关闭片选\n        USART_senddate(USART1,t) ;\n    }\n}\n", "\n", "主机使用串口1发数据之后再用SPI发给从机", "\n", "void ", "USART1_IRQHandler(", "void", ")", "                    ", "//串口1中断服务程序", "\n{\n    u16 r;\n    ", "if", "(", "USART_GetITStatus(USART1, USART_IT_RXNE)", " != RESET)  ", "//接收中断", "\n    {\n        ", "GPIO_ResetBits(GPIOB,GPIO_Pin_12)", ";\n        r =", "USART_ReceiveData(USART1)", ";", "//(USART1->DR);    //读取接收到的数据", "\n        ", "while", " (", "SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)", " == ", "RESET);", "//等待发送区空  ", "\n        ", "SPI_I2S_SendData(SPI2,", "r", ")", "; ", "//通过外设SPIx发送一个byte  数据", "\n    } \n}     \n", "\n", "从机SPI设置，用中断接收主机的数据再把接收的数据发回主机。", "\n", "void SPI2_Init(void)\n{\n    GPIO_InitTypeDef  GPIO_InitStructure;\n    SPI_InitTypeDef  SPI_InitStructure;\n    NVIC_InitTypeDef NVIC_InitStructure;\n    \n    ", "/* SPI的IO口和SPI外设打开时钟 */", "\n    RCC_APB2PeriphClockCmd(    RCC_APB2Periph_GPIOB, ENABLE );\n    RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);\n    \n    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;        ", "//", "PB12推挽输出\n    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  ", "//", "下拉输入\n    GPIO_Init(GPIOB, &GPIO_InitStructure);\n    \n    ", "/* SPI的IO口设置 */", "\n    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;\n    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  ", "//", "PB13", "/14/", "15", "复用推挽输出 \n    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n    GPIO_Init(GPIOB, &GPIO_InitStructure);\n\n    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;  ", "//", "设置SPI单向或者双向的数据模式:SPI设置为双线双向全双工\n    SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;        ", "//", "设置SPI工作模式:设置为主SPI\n    SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;        ", "//", "设置SPI的数据大小:SPI发送接收", "8", "位帧结构\n    SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;        ", "//", "串行同步时钟的空闲状态为高电平\n    SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;    ", "//", "串行同步时钟的第二个跳变沿（上升或下降）数据被采样\n    SPI_InitStructure.SPI_NSS = SPI_NSS_Hard;        ", "//", "NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制\n    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;        ", "//", "定义波特率预分频的值:波特率预分频值为", "256", "\n    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;    ", "//", "指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始\n    SPI_InitStructure.SPI_CRCPolynomial = ", "7", ";    ", "//", "CRC值计算的多项式\n    SPI_Init(SPI2, &SPI_InitStructure);  ", "//", "根据SPI_InitStruct中指定的参数初始化外设SPIx寄存器\n    \n    SPI_Cmd(SPI2, ENABLE); ", "//", "使能SPI外设\n    \n    SPI_I2S_ITConfig(SPI2,SPI_I2S_IT_RXNE,ENABLE);", "//", "开启相关中断\n    ", "//", "Usart1 NVIC 配置\n    NVIC_InitStructure.NVIC_IRQChannel = SPI2_IRQn;", "//", "SPI2中断通道\n    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=", "3", ";", "//", "抢占优先级", "0", "\n    NVIC_InitStructure.NVIC_IRQChannelSubPriority =", "3", ";        ", "//", "子优先级", "2", "\n    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            ", "//", "IRQ通道使能\n    NVIC_Init(&NVIC_InitStructure);    ", "//", "根据指定的参数初始化VIC寄存器、    \n    \n}\nu16 i;\nvoid SPI2_IRQHandler(void) \n{ \n    ", "//", "接收数据 \n    ", "if", "(SPI_I2S_GetITStatus(SPI2,SPI_I2S_IT_RXNE) != RESET)\n    {\n        ", "while", " (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET); ", "//", "等待接收完一个byte\n        i = SPI_I2S_ReceiveData(SPI2);\n        ", "while", " (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);\n        SPI_I2S_SendData(SPI2,i);\n        USART_senddate(USART1, i);    \n    }\n\n", "\n", "左边是主机，显示收到的数据，结果收到的全是FF， 右边是从机，显示的是从主机发过去的g", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你这个代码到处都是错误啊……&lt;br /&gt;第一&amp;#xff0c;直接把a转换为float&amp;#xff0c;这是做什么&amp;#xff1f;a存储的是ASCII码&amp;#xff0c;简单而言&amp;#xff0c;假如a&amp;#61;getchar()你输入了0&amp;#xff0c;那么a获得的&lt;strong&gt;不是0&amp;#xff0c;而是48&lt;/strong&gt;&amp;#xff0c;这是字符&amp;#39;0&amp;#39;的ASCII码。从题目上来看&amp;#xff0c;我完全看不到直接用ASCII码的意义。&lt;br /&gt;第二&amp;#xff0c;你似乎试图用sizeof获取运行期的输入长度。但是&lt;strong&gt;sizeof是编译期运算符&amp;#xff0c;不可能获得运行期的任何数据&lt;/strong&gt;&amp;#xff0c;编译期中&amp;#xff0c;编译器就会解算sizeof内数据的类型&amp;#xff0c;并根据类型的大小赋给sizeof结果&amp;#xff0c;&lt;strong&gt;该结果直接在编译期硬编码到程序&amp;#xff0c;因此不可能在运行期根据输入的不同而改变&lt;/strong&gt;。由于getchar的返回值是int&amp;#xff08;不是char&amp;#xff09;&amp;#xff0c;这个sizeof永远都会获得4&amp;#xff0c;除非你的机器是16位字长&amp;#xff08;现在已经非常少见了&amp;#xff09;。因此&amp;#xff0c;你的while循环体在常见的机器上永远不会执行&amp;#xff0c;因而b不会初始化。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["getchar()到底咋用的呀！求帮我看看这个代码为什么错了", ["表达式求值（Expression Evaluation）", "\n", "编写程序对表达式求值。", "\n", "Enter an expression: 1+2.5*3", "Value of expression: 10.5", "\n", "表达式中的操作数是浮点数，运算符是+、-、*和/。表达式从左向右求值（所有运算符的优先级都⼀样）。", "\n", "下面这个是我写的", "\n", "#", "include", " ", "<stdio.h>", "\n", "int", " ", "main", "()", " ", "{\n    ", "char", " a;\n    ", "float", " b;\n    ", "printf", "(", "\"Enter an expression:\"", ");\n    ", "while", " (", "sizeof", "(a=", "getchar", "())==", "2", ")\n   { b=(", "float", ")a;\n    a=(", "char", ")b;}\n    ", "printf", "(", "\"Value of expression:%f\"", ",b);\n    ", "return", " ", "0", ";}\n\n", "\n", "他老是报错说：warning: ‘b’ is used uninitialized in this function", "为什么啊，getchar不是一个一个输入的嘛？"]], "Tag": "程序设计"}
{"Answer": "https://blog.csdn.net/jasper_ja/article/details/104018397", "Konwledge_Point": "优先级", "Question": ["stm32 + freertos  pwm问题", ["int  main()", "\n{", "\n    。。。。", "\n    。。。。", "\n    xTaskCreate((TaskFunction_t )start_task,            //任务函数", "\n                (const char*    )\"start_task\",          //任务名称", "\n                (uint16_t       )START_STK_SIZE,        //任务堆栈大小", "\n                (void*          )NULL,                  //传递给任务函数的参数", "\n                (UBaseType_t    )START_TASK_PRIO,       //任务优先级", "\n                (TaskHandle_t*  )&StartTask_Handler);   //任务句柄              ", "\n\n", "vTaskStartScheduler();          //开启任务调度\n", "\n\n", "}", "\nvoid start_task(void *pvParameters)", "\n{", "\n    taskENTER_CRITICAL();           //进入临界区", "\n    ..............", "\n    ..............", "\n    pwm_int();", "\n    ..............", "\n    ..............", "\n     vTaskDelete(StartTask_Handler);        //删除开始任务", "\n    taskEXIT_CRITICAL();                    //退出临界区", "\n}", "\n\n", "问题:pwm_int 这个函数如果放在mai'n 函数里，pwm 的频率不对，", "\n放在start_task 里就能正常，这是为什么？难道taskENTER_CRITICAL()这个影响到了？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1、Bug描述&amp;#xff1a;问答数据曲线错误&amp;#xff08;曲线采纳书为零&amp;#xff09;&amp;#xff0c;问答数据错误&amp;#xff08;实际采纳148&amp;#xff0c;界面显示151&amp;#xff0c;应该是加上了3个审核未通过&amp;#xff09;。&lt;br /&gt;2、发生的环境&amp;#xff1a;安卓手机chrome/ pc win10 chrome&lt;br /&gt;3、Bug页面链接&amp;#xff1a;&lt;a href=\"https://mp.csdn.net/mp_others/analysis/ask\" id=\"textarea_1629447949249_1629448186977_0\" class=\"md_link_card\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n  &lt;span class=\"md_link_title\"&gt;CSDN&lt;/span&gt;\n  &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n  &lt;span class=\"md_flex_card\"&gt;\n  &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n    &lt;span class=\"flex-1\"&gt;\n      &lt;span class=\"md_link_url\"&gt;https://mp.csdn.net/mp_others/analysis/ask&lt;/span&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;&lt;/a&gt;&lt;br /&gt;4、Bug截图&amp;#xff1a;提供对应的Bug截图&lt;br /&gt;&lt;img title=\"Screenshot_20210820-152635_Chrome.png\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/931854444926122.png\" /&gt;&lt;br /&gt;&lt;img title=\"Screenshot_20210820-152700_Chrome.png\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/980664444926184.png\" /&gt;&lt;br /&gt;采纳数曲线不准&amp;#xff0c;显示全是零&amp;#xff0c;但实际不是。&lt;br /&gt;&lt;img title=\"1629446241(1).png\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/575742644926196.png\" /&gt;&lt;br /&gt;累积数据亦是零&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["问答-0819（周）版本发布内容，BUG建议反馈有奖！", ["问答本周主要更新功能一览，欢 迎体验建议！按照惯例，请将你本周发现的问答Bug或对问答的建议分享在下方，我们将会选取一名用户的回答给予采纳， 送上赏金，好的回答也能获得随机打赏哦！", "\n", "1、回答和评论支持直接删除", "\n", "点击回答／评论下方的按钮，点击删除即可，不用再到后台进行操作啦，PC和WAP端均支持此功能，但被采纳的回答不支持删除", "\n", "２、创作中心后台增加问答数据看板", "\n", "在创作中心－作品数据这里，可以看到你在问答频道的回答数据统计情况哦，PS被采纳数不包括自己采纳自己和审核不通过的问题", "\n  ", "CSDN问答数据", "\n  ", "\n  ", "\n  ", "\n    ", "\n      ", "https://mp.csdn.net/mp_others/analysis/ask", "\n    ", "\n  ", "\n", "３、评论图片支持查看原图", "\n", "收到许多小伙伴反馈点击查看评论里的配图，图片显示太小了，我们对此进行了优化～现在点击查看评论中的图片，可以直接查看原图了！", "\n", "４、期待你的建议反馈", "\n", "本次其实还有很多小细节的优化，就不一一赘述，等小伙伴们使用过程中发现啦~", "\n", "使用过程中你若发现", "问答的Bug或有对问答的建议，想要添加的功能", "，请在下方回答，我们会选取一个回答进行采纳！如果别人提出的功能建议，你觉得不错可以给他点个赞哦！人气越高优先级越高～", "关于BUG反馈，请按照下方格式反馈：", "\n", "1、Bug描述：描述Bug发生的场景", "2、发生的环境：浏览器版本/电脑版本", "3、Bug页面链接：出现Bug页面的链接", "4、Bug截图：提供对应的Bug截图", "5、其他补充信息"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;查看图片对手机端很不友好。&lt;br /&gt;只支持两指放大缩小操作&amp;#xff0c;而且只能放大特定区域。&lt;br /&gt;建议查看图片时&amp;#xff0c;图片默认为100%大小&amp;#xff0c;最小只能为100%且横向填充&amp;#xff0c;最大有没有限制都行。&lt;br /&gt;增加单指滑动拖拽图片&amp;#xff0c;划到超出界限指定范围时切换下一张图片&amp;#xff0c;就是和手机相册一样的功能。&lt;br /&gt;手机端请删除下面的UI控件&amp;#xff0c;全改为手势操作。&lt;br /&gt;或者加大控件的大小&amp;#xff0c;删减部分不必须的控件&amp;#xff0c;太小了不好点中。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["问答-1014（周）版本发布内容，BUG建议反馈有奖！", ["问答近期主要更新功能一览，欢 迎体验建议！按照惯例，请将你本周发现的问答Bug或对问答的建议分享在下方，如果有合适的回答，我们将会选取一名用户的回答给予采纳， 送上赏金，好的回答也能获得随机打赏哦！", "\n", "1、增加图片旋转和放大等功能", "\n", "点击图片下方对应的按钮，支持图片的左右旋转、放大、缩小和切换等功能！直接滚动鼠标也可以放大缩小图片！", "\n", "\n", "2、问答的问题列表数据扩充", "\n", "问答的问题列表去除了只展示近30天问题的限制，大家可以浏览到更多问题~", "\n", "3、首页精华列表加载速度优化", "\n", "我们对首页的精华列表进行了优化，内容加载速度更快了哦", "\n", "\n", "4、打赏功能重新上线", "\n", "打赏功能重新上线，用户打赏后，80%的打赏金额会自动进入被打赏者的账号，20%的打赏金额会作为平台的答谢基金，后续用于感谢积极帮助他人的用户", "\n", "5、期待你的建议反馈", "\n", "使用过程中你若发现问答的Bug或有对问答的建议，想要添加的功能，请在下方回答，我们会选取一个回答进行采纳！如果别人提出的功能建议，你觉得不错可以给他点个赞哦！人气越高优先级越高～", "关于BUG反馈，请按照下方格式反馈：", "1、Bug描述：描述Bug发生的场景", "2、发生的环境：浏览器版本/电脑版本", "3、Bug页面链接：出现Bug页面的链接", "4、Bug截图：提供对应的Bug截图", "5、其他补充信息"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1、有的图片太大了&amp;#xff0c;我遇到一个图片5M&amp;#43;&amp;#xff0c;点击图片放大加载要好长时间&amp;#xff0c;能不能适当的无失真压缩一下&amp;#xff1b;&lt;br /&gt;2、有的用户的图片是横着或者倒立的&amp;#xff0c;能不能添加左转右转的功能&amp;#xff1b;还有的用户截图挺大&amp;#xff0c;实际内容就一小部分&amp;#xff0c;根本看不清&amp;#xff0c;所以能不能添加图片放大缩小的功能&amp;#xff1b;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["问答-0924（周）版本发布内容，BUG建议反馈有奖！", ["问答本周主要更新功能一览，欢 迎体验建议！按照惯例，请将你本周发现的问答Bug或对问答的建议分享在下方，如果有合适的回答，我们将会选取一名用户的回答给予采纳， 送上赏金，好的回答也能获得随机打赏哦！", "\n", "1、排行榜上可展示用户推广信息", "\n", "如果用户在后台配置了推广信息，且该用户为上榜用户榜，点击排行榜会展示出该用户的推广信息哦", "点我去配置", "\n", "\n", "2、频道首页增加精华列表", "\n", "频道首页新增精华列表，可以看到近期已解决的热门优质内容哦", "\n", "\n", "3、404页增加提问入口", "\n", "问题如果找不到了，可以直接点击按钮去提问哦", "\n", "4、期待你的建议反馈", "\n", "问答还有其他小细节优化和Bug修复，等待小伙伴们使用中发现~使用过程中你若发现问答的Bug或有对问答的建议，想要添加的功能，请在下方回答，我们会选取一个回答进行采纳！如果别人提出的功能建议，你觉得不错可以给他点个赞哦！人气越高优先级越高～", "关于BUG反馈，请按照下方格式反馈：", "1、Bug描述：描述Bug发生的场景", "2、发生的环境：浏览器版本/电脑版本", "3、Bug页面链接：出现Bug页面的链接", "4、Bug截图：提供对应的Bug截图", "5、其他补充信息"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;解决方案:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;echo 0 &amp;gt; /proc/sys/net/ipv4/ipfrag_low_thresh&lt;br /&gt;echo 0 &amp;gt; /proc/sys/net/ipv4/ipfrag_high_thresh&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["iptables -A INPUT -f -j DROP 丢弃碎片规则无效", ["练习iptables的攻击规则，发现如下的命令无效。", "\niptabled -A INPUT -f -j DROP", "\n\n", "测试\nwin10: 192.168.0.2\nlinux: 192.168.0.5\n\n测试1：无分片的报文\nwin10# ping 192.168.0.5 -->可以ping通 \n\n测试2：带分片的报文\nwin10# ping 192.168.0.5 -l 3000 -->可以ping通 \n\n测试3：linux过滤分片的报文\nlinux# iptables -A INPUT -f -j DROP\nwin10# ping 192.168.0.5 -l 3000 -->依旧可以ping通 \n\nlinux# iptables -nvL\nChain INPUT (policy ACCEPT 6729 packets, 8666K bytes)\nnum   pkts bytes target     prot opt in     out     source               destination\n1        0     0 DROP       all  -f  *      *       0.0.0.0/0            0.0.0.0/0\n\n可以发现，规则没有匹配到任何一个报文。\n", "\n\n", "网上找到关于 -f 分片的说明：", "\n\n", "iptables -A INPUT -f\nDropping IP fragments is probably obsolete advice: the Linux kernel can and will automatically re-assemble and sanity-check all fragments as needed anyway. This happens before packets are handled by iptables connection tracking, so it is likely this rule may never match anything.\n", "\n\n", "找到kernel 对于碎片整理的代码", "\n\n", "p_input.c\nip_rcv()\n{\n    return NF_HOOK(NFPROTO_IPV4, NF_INET_PRE_ROUTING,\n               net, NULL, skb, dev, NULL,\n               ip_rcv_finish);\n}\n\nnet/ipv4/netfilter/nf_defrag_ipv4.c\nstatic struct nf_hook_ops ipv4_defrag_ops[] = {\n    {\n        .hook       = ipv4_conntrack_defrag,\n        .pf     = NFPROTO_IPV4,\n        .hooknum    = NF_INET_PRE_ROUTING,          #注册的链\n        .priority   = NF_IP_PRI_CONNTRACK_DEFRAG,   #优先级\n    }\n", "\n\n", "发现defrag(碎片整理) 在PRE_ROUTING chain处理的，优先于INPUT chain 处理。", "\n猜想可能是defrag导致 iptables -f无效，于是在ubuntu上做如下验证。", "\n\n", "猜想验证:\nlinux\n#kernel配置文件\n/usr/src/linux-headers-4.4.0-148-generic/.config\nCONFIG_NF_DEFRAG_IPV4=m\n\nlsmod|grep nf_defrag_ipv4 #确认没有加载此模块\n\nwin10:\nwin10# ping 192.168.0.5 -l 3000 -->依旧可以ping通\n\n\nLinux# iptables -nvL #发现依旧匹配没有匹配到数据包\n\n验证结论:与defrag 功能无关。\n", "\n\n", "计划:", "\n看iptables -f 在netfilter 处理逻辑的，代码是否调用到相关的函数。", "\n\n", "问题:", "\n请问大家，相关的背景，原理。", "\n针对测试，有相关的解决解决方案。", "\n\n", "2020/03/20 更新", "\n\n", "测试环境变更\nwin10: 192.168.0.2\nGetway: 10.110.14.5\nDest_IP:10.110.14.16\n\n分析：\n1.报文分析\nwin10# ping xxx -l 3000 -n 1\n一共发出三个报文,wireshark 抓到信息\nNo1 tcp ip.len=1500 flag=0x2000\nNo2 tcp ip.len=1500 flag=0x2000\nNo3 icmp ip.len=68 flag=0x0x72\n\n2.linux调试\nkernel/net/ip_input.c\nint ip_rcv()\n{\n    ...\n    if((iph->protocol == 1) && ip_is_fragment(iph)){\n        printk(\"xxx find icmp frag len=%d id=%x s%x d%x\\n\",ntohs(iph->tot_len),ntohs(iph->id),\n                ntohs(iph->saddr),ntohs(iph->daddr));\n    }\n}\n可以打印出这个三个报文。\n\n3.验证1：iptables 是否能匹配到这三个报文。\n在iptables PREROUTING, INPUT添加如下规则\niptables -t mangle -A PREROUTING  -s 192.168.0.2 -d 10.110.14.16 -j LOG --log-prefix \"11 mangle\"\niptables -t mangle -A PREROUTING  -s 192.168.0.2 -d 10.110.14.16 -f -j LOG --log-prefix \"12 mangle\"\niptables -t nat -A PREROUTING  -s 192.168.0.2 -d 10.110.14.16 -j LOG --log-prefix \"22 nat\"\niptables  -I INPUT 10 -s 192.168.0.2 -d 10.110.14.16 -j LOG --log-prefix \"33 filt\"\n\ndmesg 打印log:\n[ 3188.325756] 11 mangleIN=BR_LAN OUT= MAC=d8:6c:a1:2f:37:a7:e8:4e:06:66:93:50:08:00 SRC=192.168.0.2 DST=10.110.14.16 LEN=3028 TOS=0x00 PREC=0x00 TTL=128 ID=22063 PROTO=ICMP TYPE=8 CODE=0 ID=1 SEQ=2847\n[ 3188.343275] 22 natIN=BR_LAN OUT= MAC=d8:6c:a1:2f:37:a7:e8:4e:06:66:93:50:08:00 SRC=192.168.0.2 DST=10.110.14.16 LEN=3028 TOS=0x00 PREC=0x00 TTL=128 ID=22063 PROTO=ICMP TYPE=8 CODE=0 ID=1 SEQ=2847\n\n验证结论:\n1.对比第1，2条规则：\n  1.ID=22063(分片报文标志MF 0x2000)说明分片报文。\n  2.-f 无法匹配ip报文MF标志位。\n  3.defrag的优先级是高于mangle PREROUTING的，此处LEN=3028应该是完整报文(待验证)。但No1,No2两个分片报文确认没有匹配。\n2.对比第1,4规则:\n  1.此处验证有误，由于是getway，需要在FORWARD中匹配。\n\n4.验证2：直接在ip_rcv中丢弃报文\nkernel/net/ip_input.c\nint ip_rcv()\n{\n    ...\n    if((iph->protocol == 1) && ip_is_fragment(iph)){\n        printk(\"xxx find icmp frag len=%d id=%x s%x d%x\\n\",ntohs(iph->tot_len),ntohs(iph->id),\n                ntohs(iph->saddr),ntohs(iph->daddr));\n+       goto drop;\n    }\n}\n\nwin10# ping xxx -l 3000 -n 1\n结果:ping failed\n\n\n\n验证结论:\n1.使用ip_is_fragment() 判断可行。\n\n计划:\n1.此处修改不符合规范，暂定使用iptable 新增模块来实现。\n2.很好奇-f 到底是如何匹配报文，暂未找到代码实现。\n\n", "\n\n", "2020/03/24 更新", "\n解决方法", "\n\n", "echo 0 > /proc/sys/net/ipv4/ipfrag_low_thresh\necho 0 > /proc/sys/net/ipv4/ipfrag_high_thresh\n", "\n\n", "Change fragments buffer to 0. Drop fragments packages."]], "Tag": "程序设计"}
{"Answer": "$(\"#tableId\").append(\"&lt;tr style='color:red'&gt;&lt;td&gt;没有显示红色&lt;/td&gt;&lt;/tr&gt;\");\r\n[color=blue][b]\r\n经测试，该语句功能正常。\r\n\r\n请查看你的CSS的设定，应该是CSS属性的继承、优先级等指定有误！[/b][/color]", "Konwledge_Point": "优先级", "Question": ["动态添加的表格行,样式无法正常显示", ["JQuery动态添加的表格行,样式无法正常显示,例如下面这行代码,动态添加了一行,并想让其字体显示为红色:", "\n $(\"#tableId\").append(\"<tr style='color:red'><td>没有显示红色</td></tr>\");", "但是执行结果是:行加了,但颜色没变!这是jQuery的bug?!", "问题补充", "koalaxyq 写道", "可能你在css中设定了td的样式,你这句把style写在tr中,样式优先级没有td高", "没有定义过其他样式,我把style='color:red'从内联方式抽取出来(e.g: .x={color:red}),执行完后从IEDeveloper上面可以看到tr的class名称是:x,但是color属性没有内容!", "而另一行直接写在html中的则是正常设置上color属性的!"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;// GPIO选择复用模式\nGPIO_InitStructure.GPIO_Mode &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; GPIO_Mode_AF&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["STM32编码器模式捕获代码有问题（附自己写的编码器模式配置错误代码）", ["STM32F4系列，自己配置了编码器模式的代码，想捕获外部自带编码器的电机的编码器输出脉冲，但无法捕获到，程序也没有报错，手动转电机后，用仿真器观察对应定时器CNT的值，没有任何变化一直为0，困扰了好几天，有人知道吗orz？", "（使用TIM5的12通道，对应通道12引脚为PA1和PA0）", "\n", "\nvoid Encoder_config(void)\n{\n\n    ", "/*              配置输入通道CH1,CH2             */", "        \n  GPIO_InitTypeDef GPIO_InitStructure;\n  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE); \n    GPIO_InitStructure.", "GPIO_Mode", " =GPIO_Mode_IN;    \n    GPIO_InitStructure.", "GPIO_PuPd", " = GPIO_PuPd_UP;//换成了浮空输入试过也不行\n    GPIO_InitStructure.", "GPIO_Pin", " = GPIO_Pin_0|GPIO_Pin_1;    \n    GPIO_Init(GPIOA, &GPIO_InitStructure);\n    \n    ", "/*              配置TIM5时基结构体            */", "\n    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;\n    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);\n    TIM_TimeBaseStructure.", "TIM_Period", " = ", "4", "*", "11", "*", "168", "-", "1", ";//", "4", "倍频*编码器分辨率*电机减速比-", "1", " \n    TIM_TimeBaseStructure.", "TIM_Prescaler", " =", "0", ";\n    TIM_TimeBaseStructure.", "TIM_ClockDivision", " = TIM_CKD_DIV1; \n    TIM_TimeBaseStructure.", "TIM_CounterMode", " = TIM_CounterMode_Up;\n    TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure);\n    \n    ", "/*              配置TIM5输入捕获结构体            */", "\n    TIM_ICInitTypeDef  TIM_ICInitStructure;\n    TIM_ICInitStructure.", "TIM_Channel", " = TIM_Channel_1| TIM_Channel_2;\n  TIM_ICInitStructure.", "TIM_ICPolarity", " = TIM_ICPolarity_Rising;\n  TIM_ICInitStructure.", "TIM_ICSelection", " = TIM_ICSelection_DirectTI;\n  TIM_ICInitStructure.", "TIM_ICPrescaler", " = TIM_ICPSC_DIV1;\n  TIM_ICInitStructure.", "TIM_ICFilter", " = ", "0", ";\n  TIM_ICInit(TIM5,&TIM_ICInitStructure);\n    \n    ", "/*              配置编码器模式为TI12            */", "\n    TIM_EncoderInterfaceConfig(TIM5, TIM_EncoderMode_TI12,TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);\n    \n    ", "/*              设置TIM5中断              */", "\n    TIM_ClearFlag(TIM5, TIM_FLAG_Update);\n    TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);\n    TIM_SetCounter(TIM5,", "0", ");\n    TIM_Cmd(TIM5, ENABLE);\n    TIM_ClearITPendingBit(TIM5 , TIM_IT_Update);\n\n    ", "/*              设置TIM5中断优先级              */", "\n    NVIC_InitTypeDef NVIC_InitStructure; \n  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);        \n  NVIC_InitStructure.", "NVIC_IRQChannel", " = TIM5_IRQn;     \n  NVIC_InitStructure.", "NVIC_IRQChannelPreemptionPriority", " = ", "0", ";     \n  NVIC_InitStructure.", "NVIC_IRQChannelSubPriority", " = ", "1", ";    \n  NVIC_InitStructure.", "NVIC_IRQChannelCmd", " = ENABLE;\n  NVIC_Init(&NVIC_InitStructure);\n}\n\n", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;建议举报抄袭的选项里可以选择提交被抄袭的链接&amp;#xff0c;从而方便管理员查证&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["问答-1104（周）版本发布内容，BUG建议反馈有奖！", ["问答近期主要更新功能一览，欢 迎体验建议！按照惯例，请将你本周发现的问答Bug或对问答的建议分享在下方，如果有合适的回答，我们将会选取一名用户的回答给予采纳， 送上赏金，好的回答也能获得随机打赏哦！", "\n", "1、PC端和WAP问题详情页样式迭代", "\n", "请对问题和回答投出你宝贵的1票，不好的问题可以给用户提建议修改，违规的问答还可以点击举报哦", "\n", "\n", "2、最热列表内容增加30天时间限制", "\n", "频道下的最热列表增加了30天的时间限制，大家可以看到近期的热门讨论内容", "\n", "\n", "3、支持展示GIF动图", "\n", "问答内容包含GIF图，无须点击查看图片，即可正常展示", "\n", "\n", "4、评论超时，出现重复评论问题修复", "\n", "解决了对于多次点击评论无效，评论服务超时导致重复提交，出现重复评论的问题", "\n", "5、首页全部频道精华列表内容过滤", "\n", "全部频道的精华列表过滤掉了“职场和发展”、“多彩生活”等标签内容，展示更多好的技术内容", "\n", "6、期待你的建议反馈", "\n", "还有一些细节优化，等待大家使用过程中发现。使用过程中你若发现问答的Bug或有对问答的建议，想要添加的功能，请在下方回答，我们会选取一个回答进行采纳！如果别人提出的功能建议，你觉得不错可以给他点个赞哦！人气越高优先级越高～", "关于BUG反馈，请按照下方格式反馈：", "1、Bug描述：描述Bug发生的场景", "2、发生的环境：浏览器版本/电脑版本", "3、Bug页面链接：出现Bug页面的链接", "4、Bug截图：提供对应的Bug截图", "5、其他补充信息"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;int main()\n{\n    int n, m;\n    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;\n    int s &amp;#61; n * m;\n    int i &amp;#61; 1;\n    deque&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt; dq;\n    dq.push_back(make_pair(0,0));\n    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; matrix(n, vector&amp;lt;int&amp;gt;(m));\n    matrix[0][0] &amp;#61; i;\n    i&amp;#43;&amp;#43;;\n    while (!dq.empty()&amp;amp;&amp;amp;i&amp;lt;&amp;#61;s) {\n        auto pos &amp;#61; dq.front();\n        dq.pop_front();\n        int r &amp;#61; pos.first;\n        int c &amp;#61; pos.second;\n        //右\n        int rr &amp;#61; r;\n        int cr &amp;#61; c &amp;#43; 1;\n        if (cr &amp;lt; m  &amp;amp;&amp;amp; matrix[rr][cr] &amp;#61;&amp;#61; 0) {\n            matrix[rr][cr] &amp;#61; i;\n            i&amp;#43;&amp;#43;;\n            dq.push_back(make_pair(rr, cr));\n        }\n        //下\n        int rd &amp;#61; r &amp;#43; 1;\n        int cd &amp;#61; c;\n        if (rd &amp;lt; n  &amp;amp;&amp;amp; matrix[rd][cd] &amp;#61;&amp;#61; 0) {\n            matrix[rd][cd] &amp;#61; i;\n            i&amp;#43;&amp;#43;;\n            dq.push_back(make_pair(rd, cd));\n        }\n        //左\n        int rl &amp;#61; r;\n        int cl &amp;#61; c - 1;\n        if (cl &amp;gt;&amp;#61; 0 &amp;amp;&amp;amp; matrix[rl][cl] &amp;#61;&amp;#61; 0) {\n            matrix[rl][cl] &amp;#61; i;\n            i&amp;#43;&amp;#43;;\n            dq.push_back(make_pair(rl, cl));\n        }              \n        //上\n        int ru &amp;#61; r - 1;\n        int cu &amp;#61; c;\n        if (ru &amp;gt;&amp;#61; 0 &amp;amp;&amp;amp; matrix[ru][cu] &amp;#61;&amp;#61; 0) {\n            matrix[ru][cu] &amp;#61; i;\n            i&amp;#43;&amp;#43;;\n            dq.push_back(make_pair(ru, cu));\n        }\n    }           \n    for (int i &amp;#61; 0; i &amp;lt; n; i&amp;#43;&amp;#43;) {\n        for (int j &amp;#61; 0; j &amp;lt; m; j&amp;#43;&amp;#43;) {\n            cout &amp;lt;&amp;lt; matrix[i][j] &amp;lt;&amp;lt; &amp;#34; &amp;#34;;\n        }\n        cout &amp;lt;&amp;lt; endl;\n    }\n    return 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["【入门】快乐的马里奥 c++", ["说明", "马里奥是一个快乐的油漆工人，这天他接到了一个油漆任务，要求马里奥把一个n行m列的矩阵每一格都用油漆标记一个数字，标记的顺序按照广度优先搜索的方式进行，也就是他会按照如下方式标记：", "\n", "1、首先标记第1行第1列的单元格，标记数字为1；", "\n", "2、然后标记当前单元格上下左右四个方向所有能标记的单元格，且：", "\n", "① 标记顺序按照：右、下、左、上的优先级；", "\n", "② 不能标记到矩阵外，且标记过的数字不能重复标记；", "\n", "3、当本单元格标记结束，寻找比本单元格中数字大1的单元格，标记那个单元格的上下左右四个方向，也是按照步骤2所示的要求进行标记。", "\n", "依次类推，直到所有单元格都被标记。", "\n", "比如：如果有一个3 * 3的矩阵如下，那么首先标记1,1单元格，并按照上面步骤2的要求标记其四周能够标记的单元格，标记结果如下：", "\n", "接下来，标记比1,1格大1的数字的四周的单元格，也就是标记值为2的单元格四周的单元格，标记结果如下：", "\n", "接下来标记值为3的单元格四周的单元格，标记结果如下：", "\n", "接下来标记值为4的单元格四周的单元格，标记结果如下：", "\n", "接下来标记值为5的单元格四周的单元格，标记结果如下：", "\n", "接下来标记值为6的单元格四周的单元格，但这个数字四周的单元格已经被标记，因此继续标记值为7四周的单元格，标记结果如下：", "\n", "此时，发现标记结束，得到如上图所示的标记结果。", "\n", "输入格式", "两个整数n和m，n和m都是3~100之间的整数。", "\n", "输出格式", "输出n行m列的标记后的矩阵，输出每个数后空一格。", "\n", "样例", "输入数据 1", "3 3", "输出数据 1", "1 2 4", "3 5 7", "6 8 9"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;目前没有发现BUG&amp;#xff0c;有几个建议&amp;#xff1a;&lt;br /&gt;1.咱们频道筛选列表中的项目是怎么来的呢&amp;#xff1f;看到有“编程语言”&amp;#xff0c;&amp;#34;java“ 、”Python”、“云计算” 、“嵌入式”等等&amp;#xff0c;那么&amp;#xff0c;java和python是不是属于编程语言呢&amp;#xff1f;如果是&amp;#xff0c;C/C&amp;#43;&amp;#43;为什么没有出现在列表中&amp;#xff1f;所以&amp;#xff0c;个人认为频道列表需要进一步优化。&lt;br /&gt;在提问的时候&amp;#xff0c;需要用户选择C、C&amp;#43;&amp;#43;、qt、java等等标签中的一个&amp;#xff0c;既然有了标签这个东西&amp;#xff0c;为什么不把标签引入频道列表呢&amp;#xff1f;&lt;br /&gt;是否可以考虑设置多级标签呢&amp;#xff08;比如编程语言是一级标签&amp;#xff0c;JAVA/C/Python等等属于编程语言下的二级标签&amp;#xff09;&amp;#xff1f;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/219258662136124.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;而且&amp;#xff0c;当前频道列表最多勾选6项&amp;#xff0c;如果频道列表做的足够合理&amp;#xff0c;6项差不多是能够满足需要的&amp;#xff0c;但是&amp;#xff0c;现在因为各种因素&amp;#xff08;比如提问者选择标签不合适、标签划分模糊等等&amp;#xff09;&amp;#xff0c;导致在选择的时候有一些难以取舍&amp;#xff0c;比如&amp;#xff0c;有一个java开发的读写hdfs的代码&amp;#xff0c;中间出现了问题&amp;#xff0c;那么这个问题属于“JAVA”还是“大数据”&amp;#xff0c;当然&amp;#xff0c;提问的时候可以两者都选择&amp;#xff1b;但是&amp;#xff0c;在答题者来说&amp;#xff0c;因为只有6项可选&amp;#xff0c;而答题者具备JAVA、C、Python等比较全面的开发能力&amp;#xff0c;那么6项限制就不足以满足要求。&lt;br /&gt;2.编译器识别连接的问题。&lt;br /&gt;我个人认为卡片显示方式是比较好的。但是&amp;#xff0c;有的人可能更偏好其他方式&amp;#xff0c;而咱们更改连接显示方式的菜单比较隐晦&amp;#xff08;我一度都不知道还能自己选择显示方式&amp;#xff09;&amp;#xff0c;建议把这个显示设置固定在比较显眼、方便的位置。&lt;br /&gt;3.服务号的问题&lt;br /&gt;服务号建议设置推送消息的时间&amp;#xff0c;因为大家的作息时间有一些差异&amp;#xff0c;有的问题可能半夜才采纳&amp;#xff0c;休息时间频繁接收到推送消息影响休息。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["问答-0909（周）版本发布内容，BUG建议反馈有奖！", ["问答本周主要更新功能一览，欢 迎体验建议！按照惯例，请将你本周发现的问答Bug或对问答的建议分享在下方，如果有合适的回答，我们将会选取一名用户的回答给予采纳， 送上赏金，好的回答也能获得随机打赏哦！", "\n", "1、PC端首页支持频道多选", "\n", "点击PC端问答首页筛选栏，可以选择多个频道，选择后，首页只会出相应频道的内容哦", "\n", "2、编辑器链接识别功能优化", "\n", "在编辑器输入链接后，可以选择链接的展现形式，不选择则默认为卡片样式", "\n", "3、服务号助手弹窗频率优化", "\n", "对于还未关注服务号的用户，弹窗每天仅会提示一次，微信关注服务号吼，你收到的问答消息将在第一时间微信通知给你，", "没有其他任何打扰或者营销信息", "哦~", "\n", "\n", "4、期待你的建议反馈", "\n", "使用过程中你若发现问答的Bug或有对问答的建议，想要添加的功能，请在下方回答，我们会选取一个回答进行采纳！如果别人提出的功能建议，你觉得不错可以给他点个赞哦！人气越高优先级越高～", "关于BUG反馈，请按照下方格式反馈：", "1、Bug描述：描述Bug发生的场景", "2、发生的环境：浏览器版本/电脑版本", "3、Bug页面链接：出现Bug页面的链接", "4、Bug截图：提供对应的Bug截图", "5、其他补充信息"]], "Tag": "程序设计"}
{"Answer": "`pEdit-&gt;SetWindowText(str);`在这一行代码中，子线程向主线程的一个窗口发送WM_SETTEXT消息并等待消息被处理，而此时主线程正在CMultiThread9Dlg::OnBnClickedWritew函数中执行永远不会退出的while循环。注释这一行代码，使用TRACE宏向调试器发送字符串。启动调试并查看调试器的输出窗口，可以看到子线程向调试器发送的内容。参考下面的代码：\r\n\r\n```\r\n//\tpEdit-&gt;SetWindowText(str);\r\nTRACE(L\"WriteW, i : %d, thread id : %d\\r\\n\", i, GetCurrentThreadId());\r\n```\r\n下面是调试器输出窗口的截图：\r\n![图片说明](https://img-ask.csdn.net/upload/201910/03/1570077738_32445.png)\r\n\r\n相关参考文档：\r\n[https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setwindowtextw](https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setwindowtextw \"\")\r\n[https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-sendmessage](https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-sendmessage \"\")", "Konwledge_Point": "优先级", "Question": ["为什么子线程运行之后没有立刻执行？运行如下代码子线程永远不会执行。", ["void CMultiThread9Dlg::OnBnClickedWritew()\n{\n\n    //创建子线程1\n    CWinThread *pWriteD=AfxBeginThread(WriteD,\n        &m_ctrlD,\n        THREAD_PRIORITY_HIGHEST,\n        0,\n        0);\n    //创建子线程2\n    CWinThread *pWriteW=AfxBeginThread(WriteW,\n        &m_ctrlW,\n        THREAD_PRIORITY_HIGHEST,\n        0,\n        0);\n\n//如果去掉此循环，线程1,2可以正常运行，在编辑框里出现数字\n//为什么要等待主线程执行之后才执行子线程。明明子线程优先级高于主线程。\n//感谢您的关注。\n    while(1)\n    {\n        Sleep(100);\n    }\n\n}\n\n", "\n\n", "UINT WriteW(LPVOID pParam)\n\n{\n\n    CEdit *pEdit=(CEdit*)pParam;\n    CString str;\n    for(int i=0;i<10;i++)\n    {\n        str.Format(_T(\"%d\"),i);\n        pEdit->SetWindowText(str);\n        Sleep(100);\n    }\n    eventWriteD.SetEvent();\n    return 0;\n\n}\n\nUINT WriteD(LPVOID pParam)\n\n{\n    CEdit *pEdit=(CEdit*)pParam;\n    WaitForSingleObject(eventWriteD,INFINITE);\n    CString str;\n    for(int i=0;i<10;i++)\n    {\n        str.Format(_T(\"%d\"),i);\n        pEdit->SetWindowText(str);\n        Sleep(100);\n    }\n    return 0;\n\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;head需要初始化一个PBC对象后才能使用里面的成员变量name等&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["疑似空指针的错误，有没有人看看 help 球求了", ["\n", "我调用堆栈查看错误", "\n", "\n", "head是我定义的一个PBC类的一个指针", "\n", "\n", "PBC类的具体代码:", "头文件", "\n", "#pragma once\n\n", "class", " PBC\n{\npublic:\n    ", "PBC(", "void", ")", ";\n    ~", "PBC(", "void", ")", ";\n    ", "PBC(", "string", " ", "name", ",", "int", " ", "time", ",", "int", " Runtime,", "int", " ", "priority", ",", "char", " ", "state", ",PBC", "*", " ", "next", ")", ";", "//构造函数", "\npublic:\n    ", "string", " name;", "//进程名", "\n    ", "int", " time;\n    ", "int", " Runtime;", "//运行时间", "\n    ", "int", " priority;", "//优先级", "\n    ", "char", " state;", "//状态", "\n    PBC* next;", "//指向下一个进程", "\n};\n", "\n", "具体实现", "\n", "#", "include", " ", "\"StdAfx.h\"", "\n#", "include", " ", "\"PBC.h\"", "\n\nPBC::PBC(", "void", ")\n{\n    name=", "\"0\"", ",time=", "0", ",", "Runtime", "=", "0", ",priority=", "0", ",state=", "NULL", ",", "next", "=", "0", ";\n}\nPBC::~PBC(", "void", ")\n{\n}\nPBC::PBC(string name,", "int", " time,", "int", " ", "Runtime", ",", "int", " priority,", "char", " state,PBC* ", "next", ")\n{\n    ", "this", "->name=name;\n    ", "this", "->time=time;\n    ", "this", "->", "Runtime", "=", "Runtime", ";\n    ", "this", "->priority=priority;\n    ", "this", "->state=state;\n    ", "this", "->", "next", "=", "next", ";\n}\n"]], "Tag": "程序设计"}
{"Answer": "对于这段代码片段：\r\n[code]int a = 1; \r\nint b = 2; \r\na = b + (b = a) * 0;\r\n如果将其转换为静态单赋值形式，并限制每个语句都是一个二元运算与一个赋值，就变成：\r\n[code]int a0 = 1;\r\nint b0 = 2;\r\nint b1 = a; // (b = a)\r\nint temp1 = b1 * 0; // (b = a) * 0\r\nint a1 = b0 + temp1; // b + (b = a) * 0\r\n这样就比较明显了：a0、b0是交换前的值，a1、b1是交换后的值。\r\n说真的这样写只是在自己的代码里少用了个临时变量而已。编译器还是得插入一些临时变量，并不是说自己少用了显式的变量就等于实际运行效率高。\r\n\r\n以前也碰到过类似的“优化”的误解，记了一篇，这里http://rednaxelafx.iteye.com/blog/134002", "Konwledge_Point": "优先级", "Question": ["关于不用第三变量交换2个变量的值???", ["public class Test {", "\n    public static void main(String[] args) {", "\n        int a = 1;", "\n        int b = 2;", "\n        a = b + (b = a) * 0;  //这句实现交换", "\n        System.out.println(\"a:\" + a + \"  b:\" + b);", "\n    }", "\n}", "\n\n", "最近朋友给一道题，不用第三变量交换2个变量的值，手法很高明，但不知道原理.", "\n大家一起分析下，怎么完成的，内存分析更好...", "\n\n", "[b]问题补充：[/b]", "\n[b]先感谢lewhwa的回答，不理解的第四步此时b的值应给为1，也就是1+0=1;为什么还是2呢？[/b]", "\n\n", "这个巧妙运用了语言的运算符优先级（右侧优先，括号优先）。", "\n首先，从右边开始。然后是这样的步骤：", "\n1.b=2 已经保存了2;准备计算后边。", "\n2.()>*,将a->b,此时=1;", "\n3.1*0=0;", "\n4.再将2+0=2赋值给a。从而完成整个交换。 "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;产品建议&amp;#xff0c;有关图片的问题&amp;#xff0c;比如您这个问题&amp;#xff0c;上次说无法Esc退出&amp;#xff0c;这次有下面的问题&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;如果问题中有很多图片&amp;#xff0c;打开图片后&amp;#xff0c;键盘的向右键&amp;#xff08;&amp;gt;&amp;#xff09;无法让图片切换&amp;#xff0c;还要找到下面的箭头&amp;#xff0c;有些麻烦&amp;#xff0c;期待加入方向键切换。&lt;/li&gt;&lt;li&gt;问题中的图片循环播放&amp;#xff0c;当打开第一张图片后&amp;#xff0c;点击下面的切换到下一张图片&amp;#xff0c;一直点&amp;#xff0c;一直有&amp;#xff0c;原来是循环播放&amp;#xff0c;是否可以到最后一张提示一下等&amp;#xff0c;期待。&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "优先级", "Question": ["问答-1021（周）版本发布内容，BUG建议反馈有奖！", ["问答近期主要更新功能一览，欢 迎体验建议！按照惯例，请将你", "本周发现的问答Bug或对问答的建议", "分享在下方，如果有合适的回答，我们将会选取一名用户的回答给予采纳， 送上赏金，好的回答也能获得随机打赏哦！", "\n", "1、查看图片功能优化", "\n", "我们对查看图片功能进行了优化升级，解决了一些bug，同时新增了拖拽图片功能，操作图标也更显眼了~", "\n", "\n", "2、PC端采纳按钮调整", "\n", "PC端的采纳按钮由回答右侧调整至回答下方，图标也更加显眼，防止用户采纳误操作", "\n", "\n", "3、增加用户帮助文档", "\n", "首页右侧增加了问答帮助文档，有关问答的功能操作指导和规则介绍在这都能找到", "\n", "4、增加python技能树引导", "\n", "根据问题的标题、内容和标签，将会在问题下方推荐对应的技能树知识点，点击即可跳转阅读学习，通过技能树可以查到很多高质量的资料哦", "\n", "5、首页推荐流增加问答推荐", "\n", "首页推荐流也能看到问答的问题！首页遇到问题可以点击去回答哦！", "\n", "6、期待你的建议反馈", "\n", "还有一些细节优化，等待大家使用过程中发现。使用过程中你若发现", "问答的Bug或有对问答的建议", "，想要添加的功能，请在下方回答，我们会选取一个回答进行采纳！如果别人提出的功能建议，你觉得不错可以给他点个赞哦！人气越高优先级越高～", "关于BUG反馈，请按照下方格式反馈：", "1、Bug描述：描述Bug发生的场景", "2、发生的环境：浏览器版本/电脑版本", "3、Bug页面链接：出现Bug页面的链接", "4、Bug截图：提供对应的Bug截图", "5、其他补充信息"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-bash\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;words&lt;/span&gt; &amp;#61; [n &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; n &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; input().&lt;span class=\"hljs-built_in\"&gt;split&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)]\n&lt;span class=\"hljs-keyword\"&gt;words&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;()\nprint(&lt;span class=\"hljs-string\"&gt;&amp;#34;,&amp;#34;&lt;/span&gt;.join(&lt;span class=\"hljs-keyword\"&gt;words&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;望采纳&amp;#xff0c;谢谢&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["如何用C语言和Python设计一个英语单词自动排序的小程序", ["问题遇到的现象和发生背景", "\n", "如下列单词：intensify, sympathetic, further , personnel, invest, substantial, briefing, staff, at the end of day, in the view of, interlock, in vain, play the devil’s advocate for, hinder, infancy, condition, not least, be subjected to, at every turn, dominate, pervasive, conditioner, adhere to, anthropologist, distinct from, Spaniard, Briton, channel , groove, kaleidoscopic, by means of, fair play。我想设计一个小程序，直接把上列单词粘贴进去后，小程序会按照字母表排序（同一字母大小写优先级一致），若单词首字母相同，则按照第二个字母进行排序。第三第四个字母排序同理。类似于apple和apples这两个单词，单词数量少的排在前头。请问这种小程序难设计吗？如果还算简单的话，可以贡献一下代码吗？我想参考一下思路。", "\n", "问题相关代码，请勿粘贴截图", "\n", "如题", "\n", "运行结果及报错内容", "\n", "如题", "\n", "我的解答思路和尝试过的方法", "\n", "因为单词的字母数并不相同，我不清楚应该如何设计。", "\n", "我想要达到的结果"]], "Tag": "程序设计"}
{"Answer": "https://blog.csdn.net/ChenJinQiZhong/article/details/64437679", "Konwledge_Point": "优先级", "Question": ["使用stm32f1通过串口接收上位机信息产生中断来控制电机，但是中断打不开，想请大佬看看是为什么？", ["主要思路是在串口通信助手中发送“1”，然后串口接收中断打开，在串口通信助手中打印“中断开始”的信息。但是这句“中断开始”信息没有显示，想请大佬看看shi'wei'shen'm", "\n\n", "usart.c", "\n\n", "#include \"stm32f10x.h\"\n#include \"usart.h\"\n\n//已检查 无误\nstatic void NVIC_Config(void)\n{\n    NVIC_InitTypeDef NVIC_InitStructure;\n\n    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);\n\n    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn ;\n    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;\n    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;\n    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;\n\n    NVIC_Init(&NVIC_InitStructure);\n\n}\n\n//串口初始化函数已检查 无误\nvoid USART1_Init(void)\n{\n    USART_InitTypeDef USART_InitStructure;\n    GPIO_InitTypeDef GPIO_InitStructure;\n\n    //看io口和usart的时钟\n    //RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA,ENABLE);  函数用错了\n    //RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);\n\n    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);\n    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);\n    //初始化串口USART1输入输出的io口\n    //输出 推挽复用输出    PA9\n    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;\n    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_9;\n    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n\n    //初始化PA9\n    GPIO_Init( GPIOA , &GPIO_InitStructure );\n    //输出 浮空输入 PA10\n    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;\n    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;\n    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n    //初始化PA10\n    GPIO_Init( GPIOA , &GPIO_InitStructure );\n\n    //初始化串口\n    USART_InitStructure.USART_BaudRate = 115200;\n    USART_InitStructure.USART_Mode = USART_Mode_Rx|USART_Mode_Tx;\n    USART_InitStructure.USART_StopBits = USART_StopBits_1;\n    USART_InitStructure.USART_WordLength = USART_WordLength_8b;\n    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;\n    USART_InitStructure.USART_Parity = USART_Parity_No;\n    USART_Init(USART1,&USART_InitStructure);\n\n    //串口中断优先级配置\n    NVIC_Config();\n\n    //串口接收中断 因为是接受上位机消息后驱动电机转动，所以使用接受中断\n    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);\n\n    //串口使能\n    USART_Cmd( USART1,ENABLE);\n\n}\n\n/* 使用串口发送一个字节 */\nvoid USART_SendByte(USART_TypeDef* pUSARTx,uint16_t Data)\n{\n    USART_SendData( pUSARTx, Data);\n    while( USART_GetFlagStatus( pUSARTx,USART_FLAG_TXE) == RESET);\n}\n\n/* 发送字符串(来自野火教程) */\nvoid USART_SendStr( USART_TypeDef* pUSARTx , uint8_t *str)\n{\n    uint8_t i=0;\n    do\n    {\n        USART_SendByte( pUSARTx, *(str+i));\n        i++;\n    }while( *(str+i) != '\\0' );\n    while( USART_GetFlagStatus( pUSARTx,USART_FLAG_TC) == RESET);\n}\n\n\n///重定向c库函数printf到串口，重定向后可使用printf函数\nint fputc(int ch, FILE *f)\n{\n        /* 发送一个字节数据到串口 */\n        USART_SendData(USART1, (uint8_t) ch);\n\n        /* 等待发送完毕 */\n        while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);       \n\n        return (ch);\n}\n\n///重定向c库函数scanf到串口，重写向后可使用scanf、getchar等函数\nint fgetc(FILE *f)\n{\n        /* 等待串口输入数据 */\n        while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);\n\n        return (int)USART_ReceiveData(USART1);\n}\n", "\n\n", "usart.h", "\n\n", "#ifndef __USART_H\n#define __USART_H\n\n#include \"stm32f10x.h\"\n#include <stdio.h>\n\nvoid USART1_Init(void);\nvoid Usart_SendByte(USART_TypeDef* pUSARTx, uint8_t data);\nvoid Usart_SendStr(USART_TypeDef* pUSARTx, uint8_t *str);\n\n\n#endif /* __USART_H */\n\n", "\n\n", "main.c", "\n\n", "#include \"stm32f10x.h\"\n#include \"moto.h\"\n#include \"usart.h\"\n\nint main(void)\n{\n        USART1_Init();\n    USART_SendStr( USART1 , \"000\\n\");\n    //USART1_Init();\n    while(1){}\n}\n", "\n\n", "中断服务函数", "\n\n", "#include \"stm32f10x_it.h\"\n#include \"usart.h\"\n\n\nu8 Start_Flag=1; //电机启动/锁定标志\nu16 Pluse_High=10; //脉冲高电平中断次数      1->10us\nu16 Pluse_Period=200;//脉冲周期中断次数 （转速）\n\n//脉冲中断服务函数------------------------------------------------------------\n\nu32 TimeCount=0;//进中断计数\nu16 a=0;\n\nvoid SysTick_Handler(void)\n{\n}\n\nvoid USART_IT_Handler(void)\n{\n\n    //USART_SendStr( USART1 , \"test\\n\");\n    if(USART_GetITStatus( USART1 ,USART_IT_RXNE)!=RESET)\n    {\n        printf(\"中断开始\\n\");//这句信息在串口通信助手中不显示\n        while(1)\n        {\n            if( USART_ReceiveData(USART1) == 1 );\n            break;\n        }\n\n            GPIO_SetBits(GPIOE,GPIO_Pin_5);\n        while(a>1000)//让方向信号的输出略大于脉冲信号\n      {a++;}\n        DJ_Init();\n            while(1){TIM4_Int_Init(10-1,84-1);}\n\n    }\n\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "正则中很多特殊符号都可以使用编码代替，如楼上所说 . 可以用 \\56 匹配， 至于 | ，是 或者 的意思", "Konwledge_Point": "优先级", "Question": ["关于正则表达式分割字符串", ["刚学java不久  在写一个优先级的计算机", "\n在网上看了别人写的代码   这一段是可以运行成功的", "\n但是我看不太懂     这是怎么分割的  而且和网上搜的正则表达式都不一样呀   @是之前插入的忽略不看", "\n比如\\\\56\\d这是些啥    \\d我知道是0-9    而且这是默认按照l分割的吗？？？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;PriorityBlockingQueue是一个无界的、线程安全的、可排序的队列&amp;#xff0c;它使用了优先级队列的内部实现。在队列中添加元素时&amp;#xff0c;会根据元素的优先级进行排序&amp;#xff0c;使得在出队的时候&amp;#xff0c;优先级最高的元素先出队。&lt;br /&gt;PriorityBlockingQueue可能会出现排序失灵的情况&amp;#xff0c;这是因为在添加元素时没有任何同步措施&amp;#xff0c;多个线程同时添加元素可能导致排序失灵。另外&amp;#xff0c;如果元素的优先级相同&amp;#xff0c;则无法保证元素的出队顺序。如果出现排序失灵的情况&amp;#xff0c;可以尝试以下几种解决方案&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;&lt;p&gt;使用同步机制来控制PriorityBlockingQueue的访问&amp;#xff0c;保证在操作队列的时候其他线程无法访问&amp;#xff1b;&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用Collections.sort()方法来重新排序队列中的元素&amp;#xff1b;&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;将PriorityBlockingQueue中的元素拷贝到一个新的集合中&amp;#xff0c;然后利用Collections.sort()方法对元素进行排序&amp;#xff0c;最后清空原来的PriorityBlockingQueue&amp;#xff0c;将排好序的元素重新放入&amp;#xff1b;&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用Comparable接口重新实现比较器&amp;#xff0c;以确保PriorityBlockingQueue中的元素按照正确的顺序排列。&lt;/p&gt;\n&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "优先级", "Question": ["#爬虫webmagic#使用PriorityBlockingQueue出现排序失灵，如何解决？", ["最近用的webmagic做垂直爬虫，对方网页是通过js动态加载，不能直接爬html的，所以是从F12里面的Network，抓包拿到网址，再发送请求拿到的数据。", "\n", "因为要做请求排序，我模仿了PriorityScheduler，自定义了一个Scheduler：", "\n", "下面的代码里面：", "level:记录爬取深度", "pageNum:记录分页的页码", "literatureNum:记录文章的顺序", "textIndex:记录全文的内容（因为全文是分开很多个图片，上面无页码，所以从第一页到最后一页，要记录）", "爬取的逻辑是，先有pageNum，再有literatureNum，最后有textIndex，", "但爬虫顺序优先级是textIndex>literatureNum>pageNum。", "对应的深度：pageNum的level是0，literatureNum的level是1，textIndex的level是2", "\n", "用的PriorityBlockingQueue做任务队列：", "\n", "package", " com.huada.priorityScheduler;\n\n", "import", " us.codecraft.webmagic.Request;\n", "import", " us.codecraft.webmagic.Task;\n", "import", " us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;\n", "import", " us.codecraft.webmagic.scheduler.MonitorableScheduler;\n\n", "import", " java.util.concurrent.PriorityBlockingQueue;\n\n", "/**\n * Priority scheduler. Request with higher priority will poll earlier. <br>\n *\n * ", "@author", " code4crafter@gmail.com <br>\n * ", "@since", " 0.2.1\n */", "\n", "public", " ", "class", " ", "MyQueueScheduler", " ", "extends", " ", "DuplicateRemovedScheduler", " ", "implements", " ", "MonitorableScheduler", " {\n\n    ", "public", " ", "static", " ", "final", " ", "int", " ", "INITIAL_CAPACITY", " ", "=", " ", "100", ";\n\n    ", "private", " ", "final", " PriorityBlockingQueue<Request> priorityQueue = ", "new", " ", "PriorityBlockingQueue", "<>(INITIAL_CAPACITY, (o1, o2) -> {\n        ", "//比较优先级，越大越优先", "\n        ", "if", " ((", "int", ") o1.getExtra(", "\"level\"", ") != (", "int", ") o2.getExtra(", "\"level\"", ")) ", "return", " (", "int", ") o2.getExtra(", "\"level\"", ") - (", "int", ") o1.getExtra(", "\"level\"", ");\n        ", "//比较页数，页数越小越优先", "\n        ", "if", " ((", "int", ") o1.getExtra(", "\"pageNum\"", ") != (", "int", ") o2.getExtra(", "\"pageNum\"", ")) ", "return", " (", "int", ") o1.getExtra(", "\"pageNum\"", ") - (", "int", ") o2.getExtra(", "\"pageNum\"", ");\n        ", "//比较文章顺序，文章顺序越前(小)越优先", "\n        ", "if", " ((", "int", ") o1.getExtra(", "\"literatureNum\"", ") != (", "int", ") o2.getExtra(", "\"literatureNum\"", ")) ", "return", " (", "int", ") o1.getExtra(", "\"literatureNum\"", ") - (", "int", ") o2.getExtra(", "\"literatureNum\"", ");\n        ", "//比较全文图片索引，索引越小越优先", "\n        ", "if", " ((", "int", ") o1.getExtra(", "\"textIndex\"", ") != (", "int", ") o2.getExtra(", "\"textIndex\"", ")) ", "return", " (", "int", ") o1.getExtra(", "\"textIndex\"", ") - (", "int", ") o2.getExtra(", "\"textIndex\"", ");\n        ", "return", " ", "0", ";\n    });\n\n    ", "@Override", "\n    ", "public", " ", "void", " ", "pushWhenNoDuplicate", "(Request request, Task task)", " {\n        priorityQueue.put(request);\n    }\n\n    ", "@Override", "\n    ", "public", " ", "synchronized", " Request ", "poll", "(Task task)", " {\n        ", "return", " priorityQueue.poll();\n    }\n\n    ", "@Override", "\n    ", "public", " ", "int", " ", "getLeftRequestsCount", "(Task task)", " {\n        ", "return", " priorityQueue.size();\n    }\n\n    ", "@Override", "\n    ", "public", " ", "int", " ", "getTotalRequestsCount", "(Task task)", " {\n        ", "return", " getDuplicateRemover().getTotalRequestsCount(task);\n    }\n}\n", "\n", "但是最后的排序结果很诡异，排序很乱，不知道为什么：", "\n", "\n", "后面我不用PriorityBlockingQueue，用的CopyOnWriteArrayList，排序则正常，结果如下：", "\n", "package", " com.huada.priorityScheduler;\n\n", "import", " us.codecraft.webmagic.Request;\n", "import", " us.codecraft.webmagic.", "Task", ";\n", "import", " us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;\n", "import", " us.codecraft.webmagic.scheduler.MonitorableScheduler;\n\n", "import", " java.util.concurrent.CopyOnWriteArrayList;\n\n", "/**\n * 自定义任务队列\n */", "\n", "public", " ", "class", " MyArrayListScheduler ", "extends", " DuplicateRemovedScheduler ", "implements", " MonitorableScheduler {\n\n    ", "private", " ", "static", " CopyOnWriteArrayList<Request> priorityList = ", "new", " CopyOnWriteArrayList<>();\n\n    @Override\n    ", "public", " ", "void", " pushWhenNoDuplicate(Request request, ", "Task", " ", "task", ") {\n        priorityList.add(request);\n    }\n\n\n    @Override\n    ", "public", " ", "synchronized", " Request poll(", "Task", " ", "task", ") {\n        ", "if", " (priorityList.", "size", "() == ", "0", ") ", "return", " ", "null", ";\n        ", "if", " (priorityList.", "size", "() >= ", "2", ") {\n            priorityList.", "sort", "((o1, o2) -> {\n                ", "//比较优先级，越大越优先", "\n                ", "if", " ((", "int", ") o1.getExtra(", "\"level\"", ") != (", "int", ") o2.getExtra(", "\"level\"", ")) ", "return", " (", "int", ") o2.getExtra(", "\"level\"", ") - (", "int", ") o1.getExtra(", "\"level\"", ");\n                ", "//比较页数，页数越小越优先", "\n                ", "if", " ((", "int", ") o1.getExtra(", "\"pageNum\"", ") != (", "int", ") o2.getExtra(", "\"pageNum\"", ")) ", "return", " (", "int", ") o1.getExtra(", "\"pageNum\"", ") - (", "int", ") o2.getExtra(", "\"pageNum\"", ");\n                ", "//比较文章顺序，文章顺序越前(小)越优先", "\n                ", "if", " ((", "int", ") o1.getExtra(", "\"literatureNum\"", ") != (", "int", ") o2.getExtra(", "\"literatureNum\"", ")) ", "return", " (", "int", ") o1.getExtra(", "\"literatureNum\"", ") - (", "int", ") o2.getExtra(", "\"literatureNum\"", ");\n                ", "//比较全文图片索引，索引越小越优先", "\n                ", "if", " ((", "int", ") o1.getExtra(", "\"textIndex\"", ") != (", "int", ") o2.getExtra(", "\"textIndex\"", ")) ", "return", " (", "int", ") o1.getExtra(", "\"textIndex\"", ") - (", "int", ") o2.getExtra(", "\"textIndex\"", ");\n                ", "return", " ", "0", ";\n            });\n        }\n        Request req = priorityList.get(", "0", ");\n        priorityList.remove(", "0", ");\n        ", "return", " req;\n    }\n\n    @Override\n    ", "public", " ", "int", " getLeftRequestsCount(", "Task", " ", "task", ") {\n        ", "return", " priorityList.", "size", "();\n    }\n\n    @Override\n    ", "public", " ", "int", " getTotalRequestsCount(", "Task", " ", "task", ") {\n        ", "return", " getDuplicateRemover().getTotalRequestsCount(", "task", ");\n    }\n}\n\n", "\n", "\n", "\n", "所以用PriorityBlockingQueue为什么会出现排序失灵的情况？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;不知道之前有没有人反馈过&amp;#xff0c;不过这问题应该最近几天出现的&amp;#xff0c;之前是正常的。&lt;br /&gt;BUG&amp;#xff1a;回复中的&lt;strong&gt;gif动图&lt;/strong&gt;不会显示&amp;#xff0c;但是点开可以查看&amp;#xff0c;页面上无法显示出来&lt;br /&gt;&lt;a href=\"https://ask.csdn.net/questions/7546963?answer&amp;#61;53567808\" id=\"textarea_1635469110212_1635469136816_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;请问怎么写自动播放下一个视频的脚本?-Java-CSDN问答&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;CSDN问答为您找到请问怎么写自动播放下一个视频的脚本?相关问题答案&amp;#xff0c;如果想了解更多关于请问怎么写自动播放下一个视频的脚本? java、javascript、有问必答 技术问题等相关问答&amp;#xff0c;请访问CSDN问答。&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://ask.csdn.net/questions/7546963?answer&amp;#61;53567808&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;br /&gt;chrome显示&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/16339786453613.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;firefox显示&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/733738864536154.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;回答的中的好像也不行了。。&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/912201964536182.gif\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["问答-1028（周）版本发布内容，BUG建议反馈有奖！", ["问答近期主要更新功能一览，欢 迎体验建议！按照惯例，请将你", "本周发现的问答Bug或对问答的建议", "分享在下方，如果有合适的回答，我们将会选取一名用户的回答给予采纳， 送上赏金，好的回答也能获得随机打赏哦！", "\n", "1、查看图片支持按键操作", "\n", "操作Esc键关闭当前查看的图片，操作上下键可放大缩小图片，左右键可以切换图片", "\n", "2、冲榜分奖金活动规则调整", "\n", "冲榜分奖金活动奖金分配比例调整，第1名的奖金比例由50%调整为40%，同时增加第6-10名均可以获得2%的奖金，下周开始实行~", "\n", "3、APP端采纳样式调整", "\n", "APP端的采纳按钮也由回答右侧调整至回答下方，图标也更加显眼，防止用户采纳误操作", "\n", "4、采纳弹窗文案优化", "\n", "新增文案提示：只能采纳一个回答，采纳后不可以修改！大家注意别采纳错了哦", "\n", "5、问题详情页面相关推荐增加问题分类", "\n", "问题详情页下方的相关推荐问题，页面会展示出问题对应的标签，问题类型更清晰", "\n", "6、期待你的建议反馈", "\n", "还有一些细节优化，等待大家使用过程中发现。使用过程中你若发现问答的Bug或有对问答的建议，想要添加的功能，请在下方回答，我们会选取一个回答进行采纳！如果别人提出的功能建议，你觉得不错可以给他点个赞哦！人气越高优先级越高～", "关于BUG反馈，请按照下方格式反馈：", "1、Bug描述：描述Bug发生的场景", "2、发生的环境：浏览器版本/电脑版本", "3、Bug页面链接：出现Bug页面的链接", "4、Bug截图：提供对应的Bug截图", "5、其他补充信息"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;V&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;/span&gt;) {\n    &lt;span class=\"hljs-comment\"&gt;// 获取元素节点&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;let&lt;/span&gt; color &amp;#61; &lt;span class=\"hljs-title function_\"&gt;useRef&lt;/span&gt;();\n    &lt;span class=\"hljs-comment\"&gt;// 触发点击事件改变样式&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;mousedown&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;/span&gt;) {\n        color.&lt;span class=\"hljs-property\"&gt;current&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;style&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;backgroundColor&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;gray&amp;#39;&lt;/span&gt;;\n        &lt;span class=\"hljs-variable language_\"&gt;console&lt;/span&gt;.&lt;span class=\"hljs-title function_\"&gt;log&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;111&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;function&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;mouseup&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;/span&gt;) {\n        color.&lt;span class=\"hljs-property\"&gt;current&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;style&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;backgroundColor&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;white&amp;#39;&lt;/span&gt;;\n        &lt;span class=\"hljs-variable language_\"&gt;console&lt;/span&gt;.&lt;span class=\"hljs-title function_\"&gt;log&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;222&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; (\n        &lt;span class=\"language-xml\"&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;div&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;className&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;grid&amp;#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;Grid&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;columns&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;{2}&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;gap&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;{4}&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;Grid.Item&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;div&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;className&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;grid-demo-item-block&amp;#39;&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;ref&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;{color}&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;onMouseDown&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;{()&lt;/span&gt; &amp;#61;&amp;gt;&lt;/span&gt; { mousedown() }} onMouseUp&amp;#61;{() &amp;#61;&amp;gt; { mouseup() }}&amp;gt;\n                        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;家住琶洲&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;前景可期&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;img&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;src&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;{require(&lt;/span&gt;&amp;#96;&lt;span class=\"hljs-attr\"&gt;.&lt;/span&gt;/&lt;span class=\"hljs-attr\"&gt;1.jpg&lt;/span&gt;&amp;#96;)} &lt;span class=\"hljs-attr\"&gt;alt&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n                    &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;Grid.Item&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;Grid&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    )\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;我这么写 效果出来了 。我没 ./style.css  &lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["react，实现鼠标点击效果，即鼠标左键按下点击图标后将背景色变为灰色，鼠标左键松开后将背景色变回原来的白色，浏览器没有报错，但也没有实现想要的效果，原因是什么？", ["在用的react版本如下：", "\n", "react，使用ant mobile 使用Grid栅格组件，部分代码如下：", "\n", "import", " React, { useRef } from ", "'react'", ";\n", "import", " { Grid } from ", "'antd-mobile'", ";\n", "import", " ", "'./style.css'", ";\nexport ", "default", " () => {\n  // 获取元素节点\n  ", "let", " color = useRef();\n  // 触发点击事件改变样式\n  ", "function", " mousedown() {\n    color.current.style.backgroundColor = ", "'gray'", ";\n    console.log(", "111", ");\n  }\n  ", "function", " mouseup() {\n    color.current.style.backgroundColor = ", "'white'", ";\n    console.log(", "222", ");\n  }\n  ", "return", " (\n        ", "<", "div", " ", "className", "=", "'grid'", ">", "\n        ", "<", "Grid", " ", "columns", "=", "{", "2", "}", " ", "gap", "=", "{", "4", "}", ">", "\n          ", "<", "Grid.Item", ">", "\n            ", "<", "div", " ", "className", "=", "'grid-demo-item-block'", " ", "ref", "=", "{color}", " ", "onMouseDown", "=", "{() => { mousedown() }", "} ", "onMouseUp", "=", "{() => {mouseup() }", "}>", "\n              ", "<", "p", ">", "家住琶洲", "</", "p", ">", "\n              ", "<", "span", ">", "前景可期", "</", "span", ">", "\n              ", "<", "img", " ", "src", "=", "{require(`./", "1", ".jpg`)}", " ", "alt", "=", "''", " />", "\n            ", "</", "div", ">", "\n          ", "</", "Grid.Item", ">", "\n\n\n", "\n", "chrome浏览器没有报错，审查过元素，看到样式已加上，尝试过另外起一个新的类名，也试过调整样式的优先级为 !important，同时也没有实现想要的效果，如下图：", "\n", "鼠标左键按下后不抬起时，console不出内容，且看不到背景色变成灰色；鼠标左键抬起后，几乎同时console出内容111和222，且背景色依然保持白色，请问代码哪里出了问题？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;可以看看这篇还挺详细的 &lt;a href=\"https://blog.csdn.net/qq_42554719/article/details/118961032?utm_source&amp;#61;app&amp;amp;app_version&amp;#61;5.3.0\" id=\"textarea_1649395505376_1649395676238_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/qq_42554719/article/details/118961032?utm_source&amp;#61;app&amp;amp;app_version&amp;#61;5.3.0&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["java卖票案例 为什么加锁之后全是同一个窗口在卖票呢？", ["问题遇到的现象和发生背景", "\n", "Java入门案例问题", "\n", "问题相关代码，请勿粘贴截图", "\n", "public", " ", "class", " ", "SellTicket", " ", "implements", " ", "Runnable", "{\n    ", "private", " ", "int", " ", "tickets", " ", "=", " ", "100", ";\n    ", "private", " ", "Object", " ", "obj", " ", "=", " ", "new", " ", "Object", "();\n    ", "@Override", "\n    ", "public", " ", "void", " ", "run", "()", " {\n        ", "while", " (", "true", ") {\n            ", "synchronized", " (obj) {\n                ", "if", " (tickets > ", "0", ") {\n                    ", "try", " {\n                        Thread.sleep(", "100", ");\n                    } ", "catch", " (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    System.out.println(Thread.currentThread().getName() + ", "\"正在卖第\"", " + (", "101", " - tickets) + ", "\"张票\"", ");\n                    tickets--;\n                ", "/*} else {\n                    System.out.println(\"票卖光了\");\n                    break;*/", "\n                }\n\n            }\n        }\n    }\n}\n\n", "\n", "public ", "class", " SellTicketDemo {\n    public static void main(String", "[]", " args) {\n        SellTicket st = ", "new", " ", "SellTicket()", ";\n        Thread a = ", "new", " ", "Thread(", "st", ",", "\"窗口1\"", ")", ";\n        Thread b= ", "new", " ", "Thread(", "st", ",", "\"窗口2\"", ")", ";\n        Thread c = ", "new", " ", "Thread(", "st", ",", "\"窗口3\"", ")", ";\n        ", "System", ".", "out.println(a.get", "Priority()", ");\n        ", "System", ".", "out.println(b.get", "Priority()", ");\n        ", "System", ".", "out.println(c.get", "Priority()", ");\n        a.start", "()", ";\n        b.start", "()", ";\n        c.start", "()", ";\n\n", "\n", "运行结果及报错内容", "\n", "运行结果是 只有窗口一在卖票", "\n", "我的解答思路和尝试过的方法", "\n", "我把其他的窗口优先级提高过，但是依旧是窗口一一直在卖票", "\n", "我想要达到的结果", "\n", "窗口一和其他窗口都在卖票"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你的指令光发送不处理吗&amp;#xff1f;有可能是缓冲区满了。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["stm32数据发送一定量后停止工作", ["问题遇到的现象和发生背景", "\n", "数据发送一部分后停止工作了", "\n", "问题相关代码，请勿粘贴截图", "\n", "#include \"delay.h\"", "#include \"sys.h\"", "#include \"usart.h\"", "#include \"usart2.h\"", "#include \"timer.h\"", "#include \"oled.h\"", "#include \"HX711.h\"", "#include \"string.h\"", "extern char j_buf[4];", "extern int n_cnt;", "extern s16 angles[3];", "float Weight = 0;", "extern s16  axis_x,axis_y,axis_z;", " int main(void)", "{", "    delay_init();             //延时函数初始化", "    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); //设置NVIC中断分组2:2位抢占优先级，2位响应优先级", "    uart_init(115200);     //串口初始化为115200", "    usart2_init(9600);     //串口初始化为9600", "    OLED_Init();", "    OLED_ColorTurn(0);//0正常显示，1 反色显示", "    OLED_DisplayTurn(0);//0正常显示 1 屏幕翻转显示", "    OLED_Clear();", "    TIM2_Int_Init(2499,7199);", "    Init_Hx711();", "    delay_ms(2000);", "    Get_Maopi();", "     while(1)", "    {", "\n", "    ", "/**接收倾角**/", "\n    start_work();\n    if(n_cnt == ", "12", ")\n    {    \n        ", "/**x轴的数据存在[5][6]**/", "\n        axis_x = (", "USART2_RX_BUF", "[", "5", "]<<", "8", ")| ", "USART2_RX_BUF", "[", "6", "];\n        angles[", "0", "]=axis_x;\n        \n        if((", "USART2_RX_BUF", "[", "5", "]&", "0x80", ")!=", "0x00", ")\n        {\n            angles[", "0", "]=-angles[", "0", "];\n            printf(", "\"x: -%d.%d °\"", ",angles[", "0", "]/", "10", ",angles[", "0", "]", "%10);", "\n        }\n        else\n        {\n            printf(", "\"x: %d.%d °\"", ",angles[", "0", "]/", "10", ",angles[", "0", "]", "%10);", "\n        }\n        ", "/**y轴的数据存在[7][8]**/", "    \n        axis_y = (", "USART2_RX_BUF", "[", "7", "]<<", "8", ")| ", "USART2_RX_BUF", "[", "8", "];\n        angles[", "1", "]=axis_y;\n        if((", "USART2_RX_BUF", "[", "7", "]&", "0x80", ")!=", "0x00", ")\n        {\n            angles[", "1", "]=-angles[", "1", "];\n            printf(", "\"y: -%d.%d °\"", ",angles[", "1", "]/", "10", ",angles[", "1", "]", "%10);", "\n        }\n        else\n        {\n            printf(", "\"y: %d.%d °\"", ",angles[", "1", "]/", "10", ",angles[", "1", "]", "%10);", "\n        }\n\n        ", "/**z轴的数据存在[9][10]**/", "        \n        axis_z = (", "USART2_RX_BUF", "[", "9", "]<<", "8", ")| ", "USART2_RX_BUF", "[", "10", "];\n        angles[", "2", "]=axis_z;\n        if((", "USART2_RX_BUF", "[", "9", "]&", "0x80", ")!=", "0x00", ")\n        {\n            angles[", "2", "]=-angles[", "2", "];\n            printf(", "\"z: -%d.%d °\"", ",angles[", "2", "]/", "10", ",angles[", "2", "]", "%10);", "\n        }\n        else\n        {\n            printf(", "\"z: %d.%d °\"", ",angles[", "2", "]/", "10", ",angles[", "2", "]", "%10);", "\n        }\n        usart2_clear();\n            \n    }\n    ", "/**接收重力**/", "\n    ", "Weight", " = ", "Get_Weight", "();\n    ", "Weight", " = (float)", "Weight", "/", "1000.0", "f;\n    printf(", "\"weigh;%0.3f N \"", ",", "Weight", "*", "9.8", ");    //串口显示重量    \n\n    delay_ms(", "1000", ");\n}     \n", "\n", "}", "\n", "#include \"delay.h\"", "#include \"sys.h\"", "#include \"usart.h\"", "#include \"usart2.h\"", "#include \"timer.h\"", "#include \"oled.h\"", "#include \"HX711.h\"", "#include \"string.h\"", "extern char j_buf[4];", "extern int n_cnt;", "extern s16 angles[3];", "float Weight = 0;", "extern s16  axis_x,axis_y,axis_z;", " int main(void)", "{", "    delay_init();             //延时函数初始化", "    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); //设置NVIC中断分组2:2位抢占优先级，2位响应优先级", "    uart_init(115200);     //串口初始化为115200", "    usart2_init(9600);     //串口初始化为9600", "    OLED_Init();", "    OLED_ColorTurn(0);//0正常显示，1 反色显示", "    OLED_DisplayTurn(0);//0正常显示 1 屏幕翻转显示", "    OLED_Clear();", "    TIM2_Int_Init(2499,7199);", "    Init_Hx711();", "    delay_ms(2000);", "    Get_Maopi();", "     while(1)", "    {", "\n", "    ", "/**接收倾角**/", "\n    start_work();\n    if(n_cnt == ", "12", ")\n    {    \n        ", "/**x轴的数据存在[5][6]**/", "\n        axis_x = (", "USART2_RX_BUF", "[", "5", "]<<", "8", ")| ", "USART2_RX_BUF", "[", "6", "];\n        angles[", "0", "]=axis_x;\n        \n        if((", "USART2_RX_BUF", "[", "5", "]&", "0x80", ")!=", "0x00", ")\n        {\n            angles[", "0", "]=-angles[", "0", "];\n            printf(", "\"x: -%d.%d °\"", ",angles[", "0", "]/", "10", ",angles[", "0", "]", "%10);", "\n        }\n        else\n        {\n            printf(", "\"x: %d.%d °\"", ",angles[", "0", "]/", "10", ",angles[", "0", "]", "%10);", "\n        }\n        ", "/**y轴的数据存在[7][8]**/", "    \n        axis_y = (", "USART2_RX_BUF", "[", "7", "]<<", "8", ")| ", "USART2_RX_BUF", "[", "8", "];\n        angles[", "1", "]=axis_y;\n        if((", "USART2_RX_BUF", "[", "7", "]&", "0x80", ")!=", "0x00", ")\n        {\n            angles[", "1", "]=-angles[", "1", "];\n            printf(", "\"y: -%d.%d °\"", ",angles[", "1", "]/", "10", ",angles[", "1", "]", "%10);", "\n        }\n        else\n        {\n            printf(", "\"y: %d.%d °\"", ",angles[", "1", "]/", "10", ",angles[", "1", "]", "%10);", "\n        }\n\n        ", "/**z轴的数据存在[9][10]**/", "        \n        axis_z = (", "USART2_RX_BUF", "[", "9", "]<<", "8", ")| ", "USART2_RX_BUF", "[", "10", "];\n        angles[", "2", "]=axis_z;\n        if((", "USART2_RX_BUF", "[", "9", "]&", "0x80", ")!=", "0x00", ")\n        {\n            angles[", "2", "]=-angles[", "2", "];\n            printf(", "\"z: -%d.%d °\"", ",angles[", "2", "]/", "10", ",angles[", "2", "]", "%10);", "\n        }\n        else\n        {\n            printf(", "\"z: %d.%d °\"", ",angles[", "2", "]/", "10", ",angles[", "2", "]", "%10);", "\n        }\n        usart2_clear();\n            \n    }\n    ", "/**接收重力**/", "\n    ", "Weight", " = ", "Get_Weight", "();\n    ", "Weight", " = (float)", "Weight", "/", "1000.0", "f;\n    printf(", "\"weigh;%0.3f N \"", ",", "Weight", "*", "9.8", ");    //串口显示重量    \n\n    delay_ms(", "1000", ");\n}     \n", "\n", "}", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "想使用间隔变量发送，但也只发送几次就结束了", "\n", "我想要达到的结果", "\n", "能够不停止的循环发送"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;采用论坛中 均陵鼠侠 的答案&amp;#xff1a;&lt;/p&gt;\n\n&lt;p&gt;这种写法在标准的C和C&amp;#43;&amp;#43;中都是不合法的&amp;#xff0c;属于 GNU C 的扩展。在 GNU C 中&amp;#xff0c;可以用一对圆括号将复合语句括起来&amp;#xff0c;如此一来&amp;#xff0c;你就可以在表达式中使用循环语句、选择语句和局部变量。&lt;br /&gt;\n&lt;br /&gt;\n具体的说明&amp;#xff0c;详见 GCC 的这篇文档&amp;#xff1a;https://gcc.gnu.org/onlinedocs/gcc-10.2.0/gcc/Statement-Exprs.html&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["C 语言中，关于 ( ) 运算符的解释", ["最近看内核代码的时候，发现一个不太理解的宏定义，大致格式如下", "\n\n", "\n", "#define FUNC(x,y) ({x=1; y=2;})", "\n\n", "这里的效果是，给 x，y 分别赋值，并且把最后一条语句的结果作为 FUNC 的返回值。这个宏应该怎么解释呢？( ) 和 { } 分别代表什么意义？是怎么起到有返回值效果的？", "\n\n", "这个定义中，如果没有 ( ) 符号，则不会有返回值效果", "\n\n", "查看 《C++ Primer》中的 “运算符优先级表” 中对 ( ) 符号的功能解释，只有三种，感觉都匹配不上", "\n\n", "1、函数调用", "\n\n", "2、类型构造", "\n\n", "3、类型转换"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1、Bug描述&amp;#xff1a;前天&amp;#xff0c;我的一个问答的回答我自己删除了&amp;#xff0c;但是在那之后我却收到了别人对我回答的评论&amp;#xff0c;并且还是前后两次。&lt;br /&gt;2、发生的环境&amp;#xff1a;PC win10 chrome&lt;br /&gt;3、Bug页面链接&amp;#xff1a;&lt;a href=\"https://ask.csdn.net/questions/7496712?spm&amp;#61;1005.2025.3001.5141\" id=\"textarea_1630033497752_1630033903908_0\" class=\"md_link_card\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n  &lt;span class=\"md_link_title\"&gt;提问&amp;#xff0c;不知道哪错了有点疑惑-编程语言-CSDN问答&lt;/span&gt;\n  &lt;span class=\"md_link_desc\" style=\"\"&gt;CSDN问答为您找到提问&amp;#xff0c;不知道哪错了有点疑惑相关问题答案&amp;#xff0c;如果想了解更多关于提问&amp;#xff0c;不知道哪错了有点疑惑 c语言、有问必答 技术问题等相关问答&amp;#xff0c;请访问CSDN问答。&lt;/span&gt;\n  &lt;span class=\"md_flex_card\"&gt;\n  &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n    &lt;span class=\"flex-1\"&gt;\n      &lt;span class=\"md_link_url\"&gt;https://ask.csdn.net/questions/7496712?spm&amp;#61;1005.2025.3001.5141&lt;/span&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;&lt;/a&gt;&lt;br /&gt;4、Bug截图&amp;#xff1a;无法提供截图&amp;#xff0c;回答已删除&amp;#xff0c;评论记录已删除。&lt;br /&gt;5、其他补充信息&lt;/p&gt;\n&lt;p&gt;————————————————————————————————————&lt;/p&gt;\n&lt;p&gt;建议&amp;#xff01;在问答区的举报里增加问答抄袭。我个人遇到过不止一次有人在同一问题下直接复制我在同一问题下的回答。甚至还遇到过一个人&amp;#xff08;时间上第一回答人&amp;#xff09;先回答了一个很简略的答案&amp;#xff08;并且是错误的&amp;#xff09;&amp;#xff0c;然后在我回答之后直接复制我的回答。在这种情况下&amp;#xff0c;题主不仅会以为他是正确的回答&amp;#xff0c;还会误以为我抄袭他。所以还建议增加回答修改时间或记录&amp;#xff0c;谢谢。&lt;br /&gt;问答社区自年初开始采取现金悬赏机制后人气逐渐上升&amp;#xff0c;良好风气来之不易&amp;#xff0c;请不要让坏人破坏了社区的风气。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["问答-0826（周）版本发布内容，BUG建议反馈有奖！", ["问答本周主要更新功能一览，欢 迎体验建议！按照惯例，请将你本周发现的问答Bug或对问答的建议分享在下方，我们将会选取一名用户的回答给予采纳， 送上赏金，好的回答也能获得随机打赏哦！", "\n", "1、问答部分数据改为实时更新", "\n", "“我的问答”模块数据（被采纳，被点赞，提问，回答）以及创作中心后台问答数据（回答，被采纳，被点赞），升级为实时更新，可以及时看到你的数据变化~", "\n", "\n", "\n", "2、后台删除评论增加确认提示", "\n", "在删除评论的时候，我们增加了确认提示，防止大家手滑误删~", "\n", "\n", "3、有问必答的问题禁止采纳自己回答", "\n", "带有“有问必答”标签的问题，禁止提问用户采纳自己的回答哦", "\n", "4、CSDN排行榜增加问答酬金榜", "\n", "在这里可以看到高金额还没采纳的付费问题哦，可以去答题得酬金~", "\n  ", "博客排行榜", "\n  ", "博客排行榜", "\n  ", "\n  ", "\n    ", "\n      ", "https://blog.csdn.net/rank/list/ask", "\n    ", "\n  ", "\n", "5、影响力升级为原力", "\n", "“原力”可以用来衡量你在CSDN的成就和影响力，原力分数越高代表影响力越大哦，如果你对原力有任何建议，欢迎到该博客下评论！", "\n  ", "CSDN 原力（声望，影响力） -- 设计草案_SoftwareTeacher的专栏-CSDN博客", "\n  ", "CSDN 希望成为开发者个人职业成长和职业成就的平台， 我们正在探讨用 “CSDN 声望” 来衡量用户在我们社区的声望和技术影响力。 希望得到大家的反馈。", "\n  ", "\n  ", "\n    ", "\n      ", "https://blog.csdn.net/SoftwareTeacher/article/details/114499372", "\n    ", "\n  ", "\n", "\n", "6、期待你的建议反馈", "\n", "本次其实还有很多小细节的优化，期待小伙伴们使用过程中发现！", "使用过程中你若", "发现问答的Bug或有对问答的建议，想要添加的功能", "，请在下方回答，我们会选取一个回答进行采纳！如果别人提出的功能建议，你觉得不错可以给他点个赞哦！人气越高优先级越高～", "关于BUG反馈，请按照下方格式反馈：", "\n", "1、Bug描述：描述Bug发生的场景", "2、发生的环境：浏览器版本/电脑版本", "3、Bug页面链接：出现Bug页面的链接", "4、Bug截图：提供对应的Bug截图", "5、其他补充信息"]], "Tag": "程序设计"}
{"Answer": "不知道你这个问题是否已经解决, 如果还没有解决的话: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;这篇文章&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/qq_42760396/article/details/105325578\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;在Ubuntu上安装Hadoop经历&amp;#xff08;第二部分有遇到的问题和解决方法&amp;#xff09;&lt;/font&gt;&lt;/a&gt; 也许能够解决你的问题&amp;#xff0c;你可以看下&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;如果你已经解决了该问题, 非常希望你能够分享一下解决方案, 写成博客, 将相关链接放在评论区, 以帮助更多的人 ^-^", "Konwledge_Point": "优先级", "Question": ["ubuntu的hadoop集群开不起", ["问题遇到的现象和发生背景", "\n", "基于ubuntu系统,搭建hadoop完全分布式集群,,目前master貌似可以启动..但是另外两台slave并不能随之启动,提示什么优先级的问题", "\n", "\n", "运行结果及报错内容", "\n", "root", "@master:/usr/local# start-", "all", ".sh \n", "Starting", " namenodes ", "on", " [master]", "\n", "Starting", " datanodes\n", "slave1", ": ERROR: Cannot set priority of datanode process ", "5041", "\n", "slave2", ": ERROR: Cannot set priority of datanode process ", "5846", "\n", "master", ": ERROR: Cannot set priority of datanode process ", "20822", "\n", "localhost", ": ERROR: Cannot set priority of datanode process ", "20828", "\n", "Starting", " secondary namenodes", " [master]", "\n", "Starting", " resourcemanager\n", "Starting", " nodemanagers\n", "master", ": mv: 无法将'/usr/local/hadoop-", "3", ".", "3", ".", "4", "/logs/hadoop-root-nodemanager-master.out.", "4", "' 移动至'/usr/local/hadoop-", "3", ".", "3", ".", "4", "/logs/hadoop-root-nodemanager-master.out.", "5", "': 没有那个文件或目录\n", "master", ": mv: 无法获取'/usr/local/hadoop-", "3", ".", "3", ".", "4", "/logs/hadoop-root-nodemanager-master.out.", "3", "' 的文件状态(stat): 没有那个文件或目录\n", "master", ": mv: 无法获取'/usr/local/hadoop-", "3", ".", "3", ".", "4", "/logs/hadoop-root-nodemanager-master.out.", "1", "' 的文件状态(stat): 没有那个文件或目录\n", "localhost", ": mv: 无法获取'/usr/local/hadoop-", "3", ".", "3", ".", "4", "/logs/hadoop-root-nodemanager-master.out' 的文件状态(stat): 没有那个文件或目录\n\n\n"]], "Tag": "程序设计"}
{"Answer": "终于找到问题的答案了！是因为远程证书的原因，我感觉是.Net平台的问题，挂上服务器后会提示证书不可用，但是用Java写的网站就没问题。\r\n解决办法如下：\r\n在发送邮件之前添加代码：\r\nServicePointManager.ServerCertificateValidationCallback =\r\ndelegate(Object obj, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors) { return true; };\r\n强制证书可用就行了", "Konwledge_Point": "优先级", "Question": ["求助~.Net平台网站发邮件特别慢", ["本人为学院做了一个挂号信通知系统，用的是.Net平台开发的，服务器是server 2008 r2版本。在自己的电脑上测试没有问题，但是发布到服务器上后就特别慢，等了大概五分钟才发出来，不知道哪里出了问题。", "\n源码如下：", "\n    protected void rpt_EnvelopeM(object source, RepeaterCommandEventArgs e)", "\n    {", "\n\n", "    if (e.CommandName == \"Inform\")\n    {\n        string id = e.CommandArgument.ToString();\n        string sql = \"select MailBox from Envelope where id=\"+id;\n        string Mailto = Readdatabasestring(sql);\n        string subjet = \"~~\";\n        string content = \"~~\";\n        SendEmail(Mailto, subjet, content);\n        Page.ClientScript.RegisterStartupScript(this.GetType(), \"js\", \"<script>alert('发送成功！')</script>\");\n    }\n}\npublic static bool SendEmail(string mailTo, string mailSubject, string mailContent)\n{\n    // 设置发送方的邮件信息,例如使用网易的smtp\n    string smtpServer = \"smtp.163.com\"; //SMTP服务器\n    string mailFrom = \"xxxx@163.com\"; //登陆用户名\n    string userPassword = \"xxxx\";//登陆密码\n\n    // 邮件服务设置\n    SmtpClient smtpClient = new SmtpClient();\n    smtpClient.DeliveryMethod = SmtpDeliveryMethod.Network;//指定电子邮件发送方式\n    smtpClient.Host = smtpServer; //指定SMTP服务器\n    smtpClient.EnableSsl = true;\n    smtpClient.UseDefaultCredentials = false;\n    smtpClient.Credentials = new System.Net.NetworkCredential(mailFrom, userPassword);//用户名和密码\n\n    // 发送邮件设置       \n    MailMessage mailMessage = new MailMessage(mailFrom, mailTo); // 发送人和收件人\n    mailMessage.Subject = mailSubject;//主题\n    mailMessage.Body = mailContent;//内容\n    mailMessage.BodyEncoding = Encoding.UTF8;//正文编码\n    mailMessage.IsBodyHtml = true;//设置为HTML格式\n    mailMessage.Priority = MailPriority.Low;//优先级\n\n    try\n    {\n        smtpClient.Send(mailMessage); // 发送邮件\n        return true;\n    }\n    catch (SmtpException ex)\n    {\n        return false;\n    }\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;没有看到显示某公司某业务员的逻辑&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\nimport re\n\na &amp;#61; {\n&lt;span class=\"hljs-string\"&gt;&amp;#39;A类&amp;#39;&lt;/span&gt;:(&lt;span class=\"hljs-string\"&gt;&amp;#39;续保&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;续个保&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;续保的&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;上年人保&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;续&amp;#39;&lt;/span&gt;),\n&lt;span class=\"hljs-string\"&gt;&amp;#39;B类&amp;#39;&lt;/span&gt;:(&lt;span class=\"hljs-string\"&gt;&amp;#39;转保&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;转保的&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;上年其他公司&amp;#39;&lt;/span&gt;),\n&lt;span class=\"hljs-string\"&gt;&amp;#39;C类&amp;#39;&lt;/span&gt;:(&lt;span class=\"hljs-string\"&gt;&amp;#39;算价&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;算个价&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;给个价格&amp;#39;&lt;/span&gt;),\n}\nb &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;给我算个沪A12348的价格&amp;#xff0c;续保的&amp;#39;&lt;/span&gt;\nc &amp;#61; re.findall(&lt;span class=\"hljs-string\"&gt;&amp;#39;[\\u4e00-\\u9fa5][A-Z][A-Z\\d]{5,6}&amp;#39;&lt;/span&gt;,b)\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;车牌&amp;#xff1a;&amp;#39;&lt;/span&gt;,c)\ndef &lt;span class=\"hljs-built_in\"&gt;test&lt;/span&gt;(text,result):\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; text:\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; b:\n            &lt;span class=\"hljs-built_in\"&gt;return&lt;/span&gt; result\n\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;test&lt;/span&gt;(a[&lt;span class=\"hljs-string\"&gt;&amp;#39;A类&amp;#39;&lt;/span&gt;],&lt;span class=\"hljs-string\"&gt;&amp;#39;续保&amp;#39;&lt;/span&gt;) !&amp;#61; None:\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;test&lt;/span&gt;(a[&lt;span class=\"hljs-string\"&gt;&amp;#39;A类&amp;#39;&lt;/span&gt;],&lt;span class=\"hljs-string\"&gt;&amp;#39;续保&amp;#39;&lt;/span&gt;))\n&lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;test&lt;/span&gt;(a[&lt;span class=\"hljs-string\"&gt;&amp;#39;B类&amp;#39;&lt;/span&gt;], &lt;span class=\"hljs-string\"&gt;&amp;#39;转保&amp;#39;&lt;/span&gt;) !&amp;#61; None:\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;test&lt;/span&gt;(a[&lt;span class=\"hljs-string\"&gt;&amp;#39;B类&amp;#39;&lt;/span&gt;], &lt;span class=\"hljs-string\"&gt;&amp;#39;录单&amp;#39;&lt;/span&gt;))\n&lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;test&lt;/span&gt;(a[&lt;span class=\"hljs-string\"&gt;&amp;#39;C类&amp;#39;&lt;/span&gt;], &lt;span class=\"hljs-string\"&gt;&amp;#39;算价&amp;#39;&lt;/span&gt;) !&amp;#61; None:\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;test&lt;/span&gt;(a[&lt;span class=\"hljs-string\"&gt;&amp;#39;C类&amp;#39;&lt;/span&gt;], &lt;span class=\"hljs-string\"&gt;&amp;#39;录单&amp;#39;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;剩下的就是根据你自己的想法合并到文件里&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["Python识别判断一句话里的关键字，随后合并为格式文档，怎么实现？", ["首先是，我们对程序输入一段文字，文字中包含很多关键字，且关键字一般不会重复，而且有优先级", "这里进行举例：给我算个沪A123458的价格，续保的", "关键字库有分类", "A类：续保，续个保，续保的，上年人保，续", "B类：转保，转保的，上年其他公司", "C类：算价，算个价，给个价格，", "\n", "文字识别的逻辑是，先识别一段文字中的车牌，一段文字中有且只有一个车牌，而且车牌的规则是一个前缀，后续一个字母，然后5或6个字母或数字，这里有个重要点，这段文字里车牌后不会有干扰性的字母或数字，例如，车牌沪A123456续保，这里的车牌就是沪A123456而不是沪A12345", "\n", "文字识别后，我的想法是，识别完成后，将已识别的文字删除，继续识别剩下的文字", "\n", "另外，识别文字得到结果后输出是格式文档，举个例子：给我算个沪A123458的价格，续个保的", "识别的结果是：", "续保;", "某支公司某业务员;", "沪A123458;", "\n", "如果语句中包含A、B、C三大类的语言，只显示A类，且A类统一后为“续保；”", "如果语句中包含B、C类，则优先显示B类，且统一为“录单；”", "如果语句中只有C类，也是统一为“录单；”"]], "Tag": "程序设计"}
{"Answer": "这段代码错误太多！\r\n1.java的main函数启动参数是在执行时一次性传入的；\r\n2.出现死循环的dowhile；\r\n3.代码如果需要健壮，那么参数个数是必须要判断的其长度的；\r\n\r\n建议：\r\n1.循环使用数组长度界定；\r\n2.如果要逐个写入参数执行可以调用标准控制台输入System.in，当然Scanner对输入流进行了封装，使用也方便；\r\n  这样就可以实时在程序执行中对输入的命令执行想要的操作。\r\n\t\r\n\t\r\n希望可以帮到你。", "Konwledge_Point": "优先级", "Question": ["java中命令行参数的问题", ["学习了一点java ,写程序时遇到一个问题，想让从命令行中读取的参数来指导下一步工作可以吗？", "\n\n", "下面是我写的实现优先级队列的一个主函数，总是报错说“Exception in thread \"main\" the current array has been sortes,now you can execut four commend like:Maximum”", "\njava.lang.ArrayIndexOutOfBoundsException: 0", "\n    at com.nana.Queues.main(Queues.java:72)", "\n\n", " public static void main(String[] args){\n            System.out.println(\"the current array has been sortes,now you can execut four commend like:Maximum,\");\n            int i=0;\n            Queues Qu=new Queues();\n            Qu.BUILDMAXHEAP(A);\n            do{\n            switch(args[i]){\n                case \"Maximum\":Qu.Maximum(A);break;\n                case\"Extract-max\":Qu.Extractmax(A);break;\n                case\"increasekey\":System.out.println(\"please input the number you want to increase and the target:\");\n                Qu.Increasekey(A, Integer.parseInt(args[i+1]), Integer.parseInt(args[i+2]));break;\n                case \"exit\":i=-2;break;\n                case\"insert\":System.out.println(\"please input the number you want to insert:\");\n                    Qu.Insert(A,Integer.parseInt(args[i+1]) );break;\n            }\n            i++;\n        }while(i!=-1);\n        } \n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代表第一个数据啊&amp;#xff0c;比如输入样例的第一个1&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["为什么要先输入一个result", ["模拟简单运算器的工作。假设计算器只能进行加减乘除运算，运算数和结果都是整数，4种运算符的优先级相同，按从左到右的顺序计算。", "输入格式：", "输入在一行中给出一个四则运算算式，没有空格，且至少有一个操作数。遇等号”=”说明输入结束。", "输出格式：", "在一行中输出算式的运算结果，或者如果除法分母为0或有非法运算符，则输出错误信息“ERROR”。", "输入样例：", "1+2*10-10/2=", "输出样例：", "10", "答案是", "#include <stdio.h>", "\n", "int main()", "{", "    char ch = '0';", "    int result, i, flag = 0;", "    scanf(\"%d\", &result);", "    while( ch != '=' )", "    {", "        scanf(\"%c\", &ch);", "        if(ch == '=')", "            break;", "        scanf(\"%d\", &i);", "        if( ch == '+' )", "            result += i;", "        else if( ch == '-' )", "            result -= i;", "        else if( ch == '*' )", "            result *= i;", "        else if( ch == '/' )", "        {", "            if( i != 0 )", "                result /= i;", "            else", "                flag = 1;", "        }", "        else", "            flag = 1;", "    }", "    if(flag)", "        printf(\"ERROR\\n\");", "    else", "        printf(\"%d\", result);", "\n", "return", " ", "0", ";\n", "\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你没完全理解 复用  的意思&lt;br /&gt;GPIO是一个功能&amp;#xff0c;TIM5是另一个功能&lt;br /&gt;当你选择用TIM5时&amp;#xff0c;GPIO那个功能怎么设置的(输入输出&amp;#xff0c;上拉下拉)对TIM5并没有影响&amp;#xff0c;&lt;br /&gt;两个功能模块&amp;#xff0c;共用了一个脚&amp;#xff0c;你选择其中一个功能另一个功能就被断开了。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["输入捕获实验时，pin脚为啥要设置成输出模式，设置成输出模式后，可以对上/升/下降沿进行捕捉吗？", ["在做输入捕获实验时，硬件连接如图所示，", "\n", "\n", "在对GPIO进行初始化时，", "   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0; //GPIOA0", "    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能", "    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;    //速度100MHz", "    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出", "    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ; //下拉", "    GPIO_Init(GPIOA,&GPIO_InitStructure); //初始化PA0", "为啥要设置成输出模式，设置成输出模式后，可以对上升沿进行捕捉吗？（感觉需要设置成输入模式才能知道外界电平信号的变化啊）。", "\n", "这是我感到疑问的地方，或者说是在gpio处设置为输出，但是在对TIM5输入捕获进行初始化时，  TIM5_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;又重新对PA0设置成了输入模式。（TIM_ICSelection_DirectTI定义如下）", "\n", "\n", "\n", "#初始化代码如下", "\n", "void TIM5_CH1_Cap_Init(u32 arr,u16 psc)\n{\n    GPIO_InitTypeDef GPIO_InitStructure;\n    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;\n    NVIC_InitTypeDef NVIC_InitStructure;\n\n    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);      ", "//", "TIM5时钟使能    \n    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);     ", "//", "使能PORTA时钟    \n    \n    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0; ", "//", "GPIOA0\n    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;", "//", "复用功能\n    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;    ", "//", "速度", "100", "MHz\n    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; ", "//", "推挽复用输出\n    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ; ", "//", "下拉\n    GPIO_Init(GPIOA,&GPIO_InitStructure); ", "//", "初始化PA0\n\n    GPIO_PinAFConfig(GPIOA,GPIO_PinSource0,GPIO_AF_TIM5); ", "//", "PA0复用位定时器", "5", "\n  \n    TIM_TimeBaseStructure.TIM_Prescaler=psc;  ", "//", "定时器分频\n    TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up; ", "//", "向上计数模式\n    TIM_TimeBaseStructure.TIM_Period=arr;   ", "//", "自动重装载值\n    TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1; \n    \n    TIM_TimeBaseInit(TIM5,&TIM_TimeBaseStructure);\n    \n\n    ", "//", "初始化TIM5输入捕获参数\n    TIM5_ICInitStructure.TIM_Channel = TIM_Channel_1; ", "//", "CC1S=", "01", "     选择输入端 IC1映射到TI1上\n  TIM5_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;    ", "//", "上升沿捕获\n  TIM5_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI; ", "//", "映射到TI1上\n  TIM5_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;     ", "//", "配置输入分频,不分频 \n  TIM5_ICInitStructure.TIM_ICFilter = ", "0", "x00;", "//", "IC1F=", "0000", " 配置输入滤波器 不滤波\n  TIM_ICInit(TIM5, &TIM5_ICInitStructure);\n        \n    TIM_ITConfig(TIM5,TIM_IT_Update|TIM_IT_CC1,ENABLE);", "//", "允许更新中断 ,允许CC1IE捕获中断    \n    \n  TIM_Cmd(TIM5,ENABLE );     ", "//", "使能定时器", "5", "\n\n \n  NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;\n    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=", "2", ";", "//", "抢占优先级", "3", "\n    NVIC_InitStructure.NVIC_IRQChannelSubPriority =", "0", ";        ", "//", "子优先级", "3", "\n    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            ", "//", "IRQ通道使能\n    NVIC_Init(&NVIC_InitStructure);    ", "//", "根据指定的参数初始化VIC寄存器、\n    \n    \n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;是这样的&amp;#xff0c;代码的逻辑应该是当输入的字符不是&amp;#39;#&amp;#39;字符时&amp;#xff0c;才进行判断&amp;#xff0c;如果只输入&amp;#39;#&amp;#39;字符&amp;#xff0c;则没有进入while循环的循环体&amp;#xff0c;所以在输入&amp;#39;#&amp;#39;字符前需要输入其他字符&amp;#xff0c;才能进行判断&amp;#xff0c;&amp;#39;#&amp;#39;字符是不在统计范围内的&amp;#xff0c;代码是没问题的。&lt;br /&gt;如果去掉la&amp;#61;lb&amp;#61;lc的赋值&amp;#xff0c;最后打印的应该是变量la,lb,lc内存空间原来的数值&amp;#xff0c;而不是进行判断的数值。&lt;br /&gt;进行的测试如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include  &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main(void){\n    \n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; la,lb,&lt;span class=\"hljs-keyword\"&gt;lc&lt;/span&gt;;\n    char ch;\n    \n    la&amp;#61;lb&amp;#61;&lt;span class=\"hljs-keyword\"&gt;lc&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;((ch&amp;#61;getchar())!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;){\n            la&amp;#43;&amp;#43;;\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;){\n            lb&amp;#43;&amp;#43;;\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n            &lt;span class=\"hljs-keyword\"&gt;lc&lt;/span&gt;&amp;#43;&amp;#43;;\n        } \n        \n    }\n    \n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;空格有%d  换行有%d   其他有%d&amp;#34;&lt;/span&gt;,la,lb,&lt;span class=\"hljs-keyword\"&gt;lc&lt;/span&gt;);\n    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n} \n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/438243870756126.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["int变量初始化的影响", ["#include<stdio.h>", "int main(void)", "{", "    int la,lb,lc;", "    char ch;", "    //la=lb=lc=0;", "    while((ch=getchar())!='#')", "    {", "        if(ch==' '){la++;}", "        else if(ch=='\\n'){lb++;}", "        else{lc++;}", "    }", "    printf(\"空格有%d    换行符有%d    其他有%d\",la,lb,lc);", "}", "这是源码，问题点出现在注释行。以只输入#为例。", "没有注释行，输出结果为0 1 0", "有注释行，输出结果为0 0 0", "\n", "\n", "\n", "把lb和la lc任意一个换位置，倒霉的还是lb", "\n", "去掉一个，改成其中一个两次，倒霉就变成了以lc为最高优先级，有lc就倒霉lc，其次再看lb。", "\n", "a a b 010 a a c 001(有c)", "b b a 010 b b c 001(有c)", "c c a 001(有c) c c b 001(有c)", "a b b 010 c b b 001(有c)", "a c c 001(有c) b c c 001(有c)", "b a a 010 c a a 001(有c)", "a b a 010 a c a 001(有c)", "b a b 010 b c b 001(有c)", "c a a 001(有c) c b c 001(有c)", "\n", "如果是三个一样的，就不会发生任何倒霉改变事件。", "这很疑问，这是放在三个不同的条件判断里，按理说必须要满足相对应条件才会进去，但是为什么会出现有c就是c倒霉的情况。"]], "Tag": "程序设计"}
{"Answer": "按照我的理解，你的需求就是在java的主进程中调用一个ffmpeg.exe，这个在java中应该是这样的代码：\r\n        String[] cmdArray = buildComStringArray(cmd);//忽略实现cmd就是你的fmpeg.exe\r\n        ProcessBuilder pb = new ProcessBuilder(cmdArray);\r\n        pb.redirectErrorStream(true);\r\n        Process child = pb.start();\r\n\r\n然后就可以使用child.waitFor();等待结束后继续你的java其他业务逻辑", "Konwledge_Point": "优先级", "Question": ["java多进程调度的问题，求大神帮忙。", ["我是使用ffmpeg.exe来进行视频格式的转换的：", " ", "\n第一：我执行一个main方法，这时（java.exe）这个进程就会被load到内存中被执行，然后继续执行main的主线程。", "\n第二：这时我又开了一个其他线程,来执行视频的格式转换，此时会帮我新创建出一个新进程（ffmpeg.exe）来。 ", "\n第三：这时候出现了两个进程,随之而来的也出现了问题。", "\n\n", "经过分析测试发现：", " ", "\n1、只有java.exe进程结束后，才会执行ffmpeg这个进程。这并不是我想要的。", "\n2、我需要的执行顺序是这样：先执行java.exe进程，再转码进程ffmpeg.exe执行完，然后再继续java.exe进程", "\n3、因为在执行ffmpeg.exe这个进程中，我需要通过java.exe进程 来检测ffmpeg.exe进程的视频转码是否完成，返回给客户端，判断是否继续执行", "\n\n", "我的问题：", " ", "\n1、java在创建进程的时候是否可以设置该进程的优先级？", "\n2、我可以通过java来获取一个进程的执行时间么？", "\n3、为什么只有在java.exe进程结束后才会执行ffmpeg.exe进程？", "\n4、默认的cpu调度进程的算法是什么算法啊？（windows）", "\n\n", "特别说明：", " ", "\n1、可能我的表达不是很清楚，各位大神的帮忙，小弟不胜感激。", "\n2、文字会比较多，如果看不太懂，我可以具体说说"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你这代码问题大了&lt;br /&gt;不管前面判断进哪个if&amp;#xff0c;你后面都是死循环&amp;#xff0c;再也不接受传感器信号了&amp;#xff1f;&lt;br /&gt;主函数里有个死循环就行了&amp;#xff0c;里面的死循环全删掉&lt;br /&gt;还有&amp;#xff0c;使能信号你没有给&amp;#xff0c;直接给电机&amp;#xff0c;电机能动吗&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["51循迹小车代码问题", ["51循迹小车，烧完没有反应，没有报错没有警告，麻烦帮忙看下代码", "\n", "\n#", "include", " <REGX52.H>\n\nsbit In1=P0^", "0", ";", "//L电机", "\nsbit In2=P0^", "1", ";\nsbit In3=P0^", "2", ";", "//R电机", "\nsbit In4=P0^", "3", ";\nsbit ENA1 = P1^", "3", "; ", "//L使能", "\nsbit ENB1 = P1^", "0", "; ", "//R使能", "\nsbit EL = P2^", "0", ";", "//L红外", "\nsbit ER = P2 ^", "1", ";", "//R红外", "\n\n\nunsigned ", "char", " Jishu,Bijiao;\n\nvoid ", "Timer0Init()", "        ", "//100微秒@11.0592MHz", "\n{\n    TMOD &= ", "0xF0", ";        ", "//设置定时器模式", "\n    TL0 = ", "0xA4", ";        ", "//设置定时初值", "\n    TH0 = ", "0xFF", ";        ", "//设置定时初值", "\n    TF0 = ", "0", ";        ", "//清除TF0标志", "\n    TR0 = ", "1", ";        ", "//定时器0开始计时", "\n    ET0 = ", "1", ";        ", "//定时器0中断允许开关", "\n    EA = ", "1", ";         ", "//定时器总开关", "\n    PT0 = ", "0", ";        ", "//定时器0中断优先级", "\n}\nvoid  ", "Timer0_T(", "unsigned", " ", "char", " ABC)", " ", "// 中断", "\n{\n    TMOD &= ", "0xF0", ";\n    TMOD ", "|= 0x01;\n    ", "Bijiao", "=", "ABC", ";\n    ", "Jishu", "++", ";\n    ", "if", "(", "Jishu", ">=100)\n        ", "Jishu", " = 0;\n    ", "if", "(", "Jishu", "<", "Bijiao", ")\n    {\n        ", "ENA1", "=1;\n        ", "ENB1", "=1;\n    }\n    ", "else", "\n    {\n        ", "ENA1", "=0;\n        ", "ENB1", "=0;\n    }\n}\n     \n\nvoid car", "_go()", "\n{\n    ", "In1", "=1;\n    ", "In2", "=0;\n    ", "In3", "=1;\n    ", "In4", "=0;\n}\nvoid car", "_L()", "\n{\n    ", "In1", "=0;\n    ", "In2", "=1;\n    ", "In3", "=1;\n    ", "In4", "=0;\n}\nvoid car", "_R()", "\n{\n    ", "In1", "=1;\n    ", "In2", "=0;\n    ", "In3", "=0;\n    ", "In4", "=1;\n}\n\nvoid ", "Xunji()", "\n{\n    ", "if", "(", "EL", "==", "1", "&&", "ER", "==", "1)\n    {\n        ", "Timer0Init()", ";\n        ", "Timer0_T(50)", ";\n        ", "while", "(1)\n        car", "_go()", ";\n    }\n    ", "else", " ", "if", "(", "EL", "==", "0", "&&", "ER", "==", "0)\n    {\n        ", "Timer0Init()", ";\n        ", "Timer0_T(50)", ";\n        ", "while", "(1)\n        car", "_go()", ";  \n    }\n    ", "else", " ", "if", "(", "EL", "==", "1", "&&", "ER", "==", "0)\n    {\n        ", "Timer0Init()", ";\n        ", "Timer0_T(20)", ";\n        ", "while", "(1)\n        car", "_R()", ";\n    }\n    ", "else", " ", "if", "(", "EL", "==", "0", "&&", "ER", "==", "1)\n    {\n        ", "Timer0Init()", ";\n        ", "Timer0_T(20)", ";\n        ", "while", "(1)\n        car", "_L()", ";   \n    }\n}\nvoid main()\n{\n    ", "while", "(1)\n        ", "Xunji()", ";\n}\n", "\n"]], "Tag": "程序设计"}
{"Answer": "不考虑运行，仅仅修改编译错误，如下：\r\n\r\n\r\n```\r\n// Q715047.cpp : Defines the entry point for the console application.\r\n//\r\n\r\n#include \"stdafx.h\"\r\n\r\n\r\n#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\n\r\n#define TRUE 1\r\n#define FALSE 0\r\n#define Stack_Size 50\r\n\r\ntypedef char StackElementType; //运算符 \r\ntypedef double StackElementType_num; //运算数 \r\ntypedef struct\r\n{\r\n    StackElementType elem[Stack_Size];\r\n    int top;\r\n}SeqStack; //运算符栈 \r\ntypedef struct\r\n{\r\n    StackElementType_num elem[Stack_Size];\r\n    int top;\r\n}SeqStack_num; //运算数栈 \r\n\r\nStackElementType_num ExpEvaluation();\r\n\r\nvoid InitStack(SeqStack *S);\r\nvoid InitStack_num(SeqStack_num *S);\r\nint Push(SeqStack *S,StackElementType x);\r\nint Push_num(SeqStack_num *S,StackElementType_num x);\r\n\r\nint Pop(SeqStack *S,StackElementType *x);\r\nint Pop_num(SeqStack_num *S,StackElementType_num *x);\r\nint GetTop(SeqStack *S,StackElementType *x);\r\nint GetTop_num(SeqStack_num *S,StackElementType_num *x);\r\nStackElementType Compare(StackElementType ch1,StackElementType ch2);\r\nStackElementType_num Execute(StackElementType_num a,StackElementType op,StackElementType_num b);\r\n\r\nint main()\r\n{\r\n    printf(\"%lf\",ExpEvaluation()); \r\n    return(0);\r\n}\r\nStackElementType_num ExpEvaluation()\r\n{\r\n    char exp[100];//用字符数组将运算表达式存起来 \r\n    int i=0,count=0;\r\n    printf(\"Please input an expression (Ending with #:)\");\r\n    exp[i]=getchar();\r\n    while(exp[i]!='#')\r\n    {\r\n        i++;count++; \r\n        exp[i]=getchar();\r\n    }\r\n    SeqStack OPTR;\r\n    SeqStack_num OVS;\r\n    StackElementType ch,op,x;\r\n    StackElementType_num a,b,v;\r\n    InitStack(&amp;OPTR);\r\n    InitStack_num(&amp;OVS);\r\n    Push(&amp;OPTR,'#');\r\n    for(i=0;i&lt;count;i++)\r\n    {\r\n        ch=exp[i];\r\n        while(ch!='#'||GetTop(&amp;OPTR,&amp;x)!='#')\r\n        {\r\n          if(ch&gt;='0'&amp;&amp;ch&lt;='9')//不是操作符，是操作数，进OVS栈 \r\n          {\r\n            int temp;\r\n            temp=ch-'0';//先把当前操作数从字符变为数字 \r\n            i++;\r\n            ch=exp[i];\r\n            while(ch&gt;='0'&amp;&amp;ch&lt;='9')//继续判断下一位是否为操作数\r\n            {\r\n                temp=temp*10+ch-'0';\r\n                i++;\r\n                ch=exp[i];\r\n            } \r\n            Push_num(&amp;OVS,temp);//压栈 \r\n\r\n          }\r\n          else\r\n          switch(Compare(ch,GetTop(&amp;OPTR,&amp;x)))\r\n          {\r\n            case '&gt;':Push(&amp;OPTR,ch);\r\n              i++;ch=exp[i];\r\n            case '=':Pop(&amp;OPTR,&amp;op);i++;ch=exp[i];break;//脱括号 \r\n            case '&lt;':Pop(&amp;OPTR,&amp;op);//形成运算 \r\n            Pop_num(&amp;OVS,&amp;b);\r\n            Pop_num(&amp;OVS,&amp;a);\r\n            v=Execute(a,op,b);\r\n            Push_num(&amp;OVS,v);\r\n            break; \r\n          }\r\n        }\r\n    }\r\n\r\n    GetTop_num(&amp;OVS,&amp;v);\r\n    return(v);\r\n} \r\n\r\n//初始化\r\nvoid InitStack(SeqStack *S)\r\n{\r\n    /*构造一个空栈S*/\r\n    S-&gt;top=-1; \r\n} \r\nvoid InitStack_num(SeqStack_num *S)\r\n{\r\n    /*构造一个空栈S*/\r\n    S-&gt;top=-1; \r\n} \r\n//进栈\r\nint Push(SeqStack *S,StackElementType x)\r\n{\r\n    if(S-&gt;top==Stack_Size-1)\r\n     return(FALSE);\r\n    S-&gt;top++;\r\n    S-&gt;elem[S-&gt;top]=x;\r\n    return(TRUE);\r\n} \r\nint Push_num(SeqStack_num *S,StackElementType_num x)\r\n{\r\n    if(S-&gt;top==Stack_Size-1)\r\n     return(FALSE);\r\n    S-&gt;top++;\r\n    S-&gt;elem[S-&gt;top]=x;\r\n    return(TRUE);\r\n} \r\n\r\n//出栈\r\nint Pop(SeqStack *S,StackElementType *x)\r\n{\r\n    if(S-&gt;top==-1)\r\n     return(FALSE);\r\n    *x=S-&gt;elem[S-&gt;top];\r\n    S-&gt;top--;\r\n    return(TRUE);\r\n} \r\nint Pop_num(SeqStack_num *S,StackElementType_num *x)\r\n{\r\n    if(S-&gt;top==-1)\r\n     return(FALSE);\r\n    *x=S-&gt;elem[S-&gt;top];\r\n    S-&gt;top--;\r\n    return(TRUE);\r\n} \r\n\r\n//读栈顶\r\nint GetTop(SeqStack *S,StackElementType *x)\r\n{\r\n    if(S-&gt;top==-1)\r\n     return(FALSE);\r\n    else\r\n    {\r\n        *x=S-&gt;elem[S-&gt;top];\r\n        return(TRUE);\r\n    }\r\n} \r\n\r\nint GetTop_num(SeqStack_num *S,StackElementType_num *x)\r\n{\r\n    if(S-&gt;top==-1)\r\n     return(FALSE);\r\n    else\r\n    {\r\n        *x=S-&gt;elem[S-&gt;top];\r\n        return(TRUE);\r\n    }\r\n} \r\n\r\n\r\n//比较优先级，返回'&gt;','&lt;','=' \r\nStackElementType Compare(StackElementType ch1,StackElementType ch2)\r\n//ch1为还未进栈的运算符，ch2为当前运算符栈顶元素 \r\n{\r\n    //'('未入栈时，优先级最高，入栈后，优先级最低\r\n    int m,n; \r\n    switch(ch1)\r\n    {\r\n        case '(':m=6;break;\r\n        case '*':\r\n        case '/':m=5;break;\r\n        case '+':\r\n        case '-':m=4;break;\r\n        case ')':m=3;break;\r\n\r\n    }\r\n    switch(ch2)\r\n    {\r\n        case '*':\r\n        case '/':n=6;break;\r\n        case '+':\r\n        case '-':n=5;break;\r\n        case ')':n=4;break;\r\n        case '(':n=3;break;\r\n\r\n    }\r\n    if(ch1&gt;ch2)\r\n     return('&gt;');\r\n     else if(ch1=ch2)\r\n      return('=');\r\n      else\r\n       return('&lt;');\r\n}\r\n\r\nStackElementType_num Execute(StackElementType_num a,StackElementType op,StackElementType_num b)\r\n{\r\n    StackElementType_num v = 0.0;\r\n    switch(op)\r\n    {\r\n        case '+':v=a+b;break;\r\n        case '-':v=a-b;break;\r\n        case '*':v=a*b;break;\r\n        case '/':v=a/b;break;\r\n    }\r\n    return(v);\r\n}\r\n```\r\n但是你StackElementType_num ExpEvaluation()会死循环，原因是你在while循环里面i++，这会导致i超过输入长度范围，而没有办法退出循环\r\n\r\n整个这段代码都要重写。\r\n\r\n\r\n我这里有个写好的，你自己看下吧\r\n\r\n```\r\n// Q703345.cpp : Defines the entry point for the console application.\r\n//\r\n\r\n#include \"stdafx.h\"\r\n\r\n\r\n \r\n#include &lt;iostream&gt;\r\n#include &lt;stack&gt;\t\t//use STL\r\n#include &lt;stdio.h&gt;\r\n#include &lt;string.h&gt;\r\n#include &lt;stdlib.h&gt;\r\nusing namespace std;\r\n \r\nconst int MAXSIZE=256;\r\n \r\n \r\nint InfixToPostfix(char *infix,char *postfix);\r\ndouble Calculate(char *arr);\r\nint main() {\r\n\tcout &lt;&lt; \"请输入表达式：\"; // prints 四则运算\r\n\tchar in[MAXSIZE]={0};\r\n\tchar postfix[MAXSIZE]={'\\0'};\r\n\tfgets(in,MAXSIZE,stdin);\r\n\tif(InfixToPostfix(in,postfix)!=1)\r\n\t{\tcout&lt;&lt;\"错误\";\r\n\t\treturn -1;\r\n\t}\r\n\t//puts(in);\r\n\tputs(postfix);\r\n\tcout&lt;&lt;\"由后缀表达式计算出的结果是\" &lt;&lt; Calculate(postfix) &lt;&lt; endl;\r\n\treturn 0;\r\n}\r\n/*\r\n将中缀表达式转换为后缀表达式\r\n参数:infix 指向中缀表达式，以回车键即\\n结尾。\r\npostfix 指向后缀表达式临时缓冲区，用来存放转换后的结果。\r\n附转换规则：从左到右遍历中缀表达式的每个数字和符号，若是数字则直接保存在postfix数组中；若是符号，则判断其与栈顶符号的优先级，是右括号或者优先级不大于栈顶符号，则栈顶元素依次出栈并输出，直到遇到左括号或者栈空时，才将刚才的那个符号入栈。\r\n*/\r\nint InfixToPostfix(char *infix,char *postfix)\r\n{\r\n  stack&lt;char&gt; s;\r\n  char c,e;\r\n  int j=0,i=0;\r\n  c=*(infix+i); //取出中缀表达式中的第一个字符\r\n  i++;\r\n  while('\\n'!=c) //遇到换行符，表示转换结束\r\n  {\r\n       while(c&gt;='0'&amp;&amp;c&lt;='9') //先判断一下取出的字符是否是数字，如果是数字的话，则直接存入postfix数组\r\n       {\r\n          postfix[j++]=c;\r\n          c=*(infix+i);\r\n          i++;\r\n          if(c&lt;'0'||c&gt;'9') //如果不是数字，则在后面添加空格，以便区分各个符号\r\n            {\r\n            postfix[j++]=' ';\r\n            }\r\n       }\r\n      if(')'==c) //不是数字，则判断是否为右括号。[括号的优先级最高，所以，如果是右括号的话，就得先进行括号里的各种运算]\r\n      {\r\n    \t  e=s.top();s.pop();\r\n          while('('!=e) //直到遇到左括号为止\r\n          {\r\n             postfix[j++]=e;\r\n             postfix[j++]=' ';\r\n             e=s.top();s.pop();\r\n          }\r\n      }\r\n      else if('+'==c||'-'==c) //如果是加减号,因为他俩的优先级最低了，所以此时先将栈里的所有符号出栈后(除非遇到左括号)，再把此符号入栈\r\n        {\r\n          if(!(s.size())) //如果是空栈，则直接将加减号入栈\r\n          {\r\n              s.push(c);\r\n          }\r\n          else//如果不是空栈，首先将所有优先级大于加减的出栈，然后再把加减号入栈\r\n          {\r\n              do{\r\n                  e=s.top();s.pop();\r\n                  if('('==e)\r\n                  {\r\n                    s.push(e);\r\n                  }\r\n                  else\r\n                  {\r\n                    postfix[j++]=e;\r\n                    postfix[j++]=' ';\r\n                  }\r\n                }while(s.size()&amp;&amp;'('!=e);  //将栈里的所有符号出栈(除非遇到左括号)\r\n              s.push(c); //最后将新来的加减号再入栈\r\n            }\r\n        }\r\n      else if('*'==c||'/'==c||'('==c) //如果是乘除号或左括号，因为他们的优先级高，所以直接入栈。\r\n        {\r\n          s.push(c);\r\n        }\r\n      else if('\\n'==c) //判断一下，所有符号是否都已转换完成\r\n        {\r\n          break;\r\n        }\r\n      else //能走到这个else的，都是我不认识的符号了\r\n        {\r\n          // printf(\"\\nError:input error,the character %d cann't recognize!\\n\",c);\r\n          return -1;\r\n        }\r\n      c=*(infix+i); //取出下一个字符进行转换\r\n      i++;\r\n    }\r\n  while(s.size()) //转换完成后，栈里可能还有没出栈的运算符号\r\n    {\r\n      e=s.top();s.pop();\r\n      postfix[j++]=e;\r\n      postfix[j++]=' ';\r\n    }\r\n  return true;\r\n}\r\n \r\n/*\r\n计算后缀表达式的结果\r\n参数：arr使用空格分隔的后缀表达式字符串。例：arr=\"31 5 + \"\r\nresult 保存计算完毕后的结果\r\n注：如何利用栈来计算后缀表达式的结果：依次取出后缀表达式中的符号进行比较，如果是数字，则直接入栈；如果是符号，则出栈两次，弹出两个要计算的因数，进行计算，之后再将计算结果入栈。知道后缀表达式中所有符号都已比较完毕。\r\n*/\r\ndouble Calculate(char *arr)\r\n{\r\n  // printf(\"%s\\n\",arr);\r\n  double d,e,f; //d,e 存放两个因数。f存放d,e计算后的结果.\r\n  stack&lt;double&gt; s;\r\n  char *op; //存放后缀表达式中的每个因数或运算符\r\n  char *buf=arr; //声明bufhe saveptr两个变量，是strtok_r函数的需要。\r\n  char *saveptr=NULL;\r\n  while((op=strtok(buf,\" \"))!=NULL) //利用strtok_r函数分隔字符串\r\n    {\r\n      buf=NULL;\r\n      switch(op[0])\r\n      {\r\n        case '+':\r\n            d=s.top();s.pop();\r\n            e=s.top();s.pop();\r\n          f=d+e;\r\n          s.push(f);\r\n          break;\r\n        case '-':\r\n            d=s.top();s.pop();\r\n            e=s.top();s.pop();\r\n          f=e-d;\r\n          s.push(f);\r\n          break;\r\n        case '*':\r\n          d=s.top();s.pop();\r\n          e=s.top();s.pop();\r\n          f=d*e;\r\n          s.push(f);\r\n          break;\r\n        case '/':\r\n          d=s.top();s.pop();\r\n          e=s.top();s.pop();\r\n          f=e/d;\r\n          s.push(f);\r\n          break;\r\n        default:\r\n          d=atof(op); //不是运算符，就肯定是因数了。所以，用atof函数，将字符串转换为double类型\r\n          s.push(d);\r\n          break;\r\n        }\r\n    }\r\n  double result=s.top();s.pop();\r\n  return result;\r\n}\r\n\r\n\r\n```", "Konwledge_Point": "优先级", "Question": ["【数据结构】求大佬帮忙看一下这个错误是怎么回事？（用栈实现带括号的多位数四则运算器）", ["题目原型：  四则运算器：实现多位整数的带括号的四则运算", "\n\n", "现存问题：", "\n\n", "程序中出现如图所示错误，麻烦大佬指点一下原因", "\n\n", "\n\n", " #include <stdio.h>\n#include <stdlib.h>\n\n#define TRUE 1\n#define FALSE 0\n#define Stack_Size 50\n\ntypedef char StackElementType; //运算符 \ntypedef double StackElementType_num; //运算数 \ntypedef struct\n{\n    StackElementType elem[Stack_Size];\n    int top;\n}SeqStack; //运算符栈 \ntypedef struct\n{\n    StackElementType_num elem[Stack_Size];\n    int top;\n}SeqStack_num; //运算数栈 \n\nStackElementType_num ExpEvaluation();\n\nvoid InitStack(SeqStack *S);\nint Push(SeqStack *S,StackElementType x);\nint Push_num(SeqStack *S,StackElementType_num x);\n\nint Pop(SeqStack *S,StackElementType *x);\nint Pop_num(SeqStack *S,StackElementType_num *x);\nint GetTop(SeqStack *S,StackElementType *x);\nint GetTop_num(SeqStack *S,StackElementType_num *x);\nStackElementType Compare(StackElementType ch1,StackElementType ch2);\nStackElementType Execute(StackElementType_num a,StackElementType op,StackElementType_num b);\n\nint main()\n{\n    printf(\"%lf\",ExpEvaluation()); \n    return(0);\n}\nStackElementType_num ExpEvaluation()\n{\n    char exp[100];//用字符数组将运算表达式存起来 \n    int i=0,count=0;\n    printf(\"Please input an expression (Ending with #:)\");\n    exp[i]=getchar();\n    while(exp[i]!='#')\n    {\n        i++;count++; \n        exp[i]=getchar();\n    }\n    SeqStack OPTR;\n    SeqStack_num OVS;\n    StackElementType ch,op,x;\n    StackElementType_num a,b,v;\n    InitStack(&OPTR);\n    InitStack_num(&OVS);\n    Push(&OPTR,'#');\n    for(i=0;i<count;i++)\n    {\n        ch=exp[i];\n        while(ch!='#'||GetTop(&OPTR,&x)!='#')\n        {\n          if(ch>='0'&&ch<='9')//不是操作符，是操作数，进OVS栈 \n          {\n            int temp;\n            temp=ch-'0';//先把当前操作数从字符变为数字 \n            i++;\n            ch=exp[i];\n            while(ch>='0'&&ch<='9')//继续判断下一位是否为操作数\n            {\n                temp=temp*10+ch-'0';\n                i++;\n                ch=exp[i];\n            } \n            Push_num(&OVS,temp);//压栈 \n\n          }\n          else\n          switch(Compare(ch,GetTop(&OPTR,&x)))\n          {\n            case '>':Push(&OPTR,ch);\n              i++;ch=exp[i];\n            case '=':Pop(&OPTR,&op);i++;ch=exp[i];break;//脱括号 \n            case '<':Pop(&OPTR,&op);//形成运算 \n            Pop_num(&OVS,&b);\n            Pop_num(&OVS,&a);\n            v=Execute(a,op,b);\n            Push_num(&OVS,v);\n            break; \n          }\n        }\n    }\n\n    v=GetTop_num(&OVS,&x);\n    return(v);\n} \n\n//初始化\nvoid InitStack(SeqStack *S)\n{\n    /*构造一个空栈S*/\n    S->top=-1; \n} \nvoid InitStack_num(SeqStack_num *S)\n{\n    /*构造一个空栈S*/\n    S->top=-1; \n} \n//进栈\nint Push(SeqStack *S,StackElementType x)\n{\n    if(S->top==Stack_Size-1)\n     return(FALSE);\n    S->top++;\n    S->elem[S->top]=x;\n    return(TRUE);\n} \nint Push_num(SeqStack *S,StackElementType_num x)\n{\n    if(S->top==Stack_Size-1)\n     return(FALSE);\n    S->top++;\n    S->elem[S->top]=x;\n    return(TRUE);\n} \n\n//出栈\nint Pop(SeqStack *S,StackElementType *x)\n{\n    if(S->top==-1)\n     return(FALSE);\n    *x=S->elem[S->top];\n    S->top--;\n    return(TRUE);\n} \nint Pop_num(SeqStack *S,StackElementType_num *x)\n{\n    if(S->top==-1)\n     return(FALSE);\n    *x=S->elem[S->top];\n    S->top--;\n    return(TRUE);\n} \n\n//读栈顶\nint GetTop(SeqStack *S,StackElementType *x)\n{\n    if(S->top==-1)\n     return(FALSE);\n    else\n    {\n        *x=S->elem[S->top];\n        return(TRUE);\n    }\n} \n\nint GetTop_num(SeqStack *S,StackElementType_num *x)\n{\n    if(S->top==-1)\n     return(FALSE);\n    else\n    {\n        *x=S->elem[S->top];\n        return(TRUE);\n    }\n} \n\n\n//比较优先级，返回'>','<','=' \nStackElementType Compare(StackElementType ch1,StackElementType ch2)\n//ch1为还未进栈的运算符，ch2为当前运算符栈顶元素 \n{\n    //'('未入栈时，优先级最高，入栈后，优先级最低\n    int m,n; \n    switch(ch1)\n    {\n        case '(':m=6;break;\n        case '*':\n        case '/':m=5;break;\n        case '+':\n        case '-':m=4;break;\n        case ')':m=3;break;\n\n    }\n    switch(ch2)\n    {\n        case '*':\n        case '/':n=6;break;\n        case '+':\n        case '-':n=5;break;\n        case ')':n=4;break;\n        case '(':n=3;break;\n\n    }\n    if(ch1>ch2)\n     return('>');\n     else if(ch1=ch2)\n      return('=');\n      else\n       return('<');\n}\nStackElementType_num Execute(StackElementType_num a,StackElementType op,StackElementType_num b)\n{\n    StackElementType_num v;\n    switch(op)\n    {\n        case '+':v=a+b;break;\n        case '-':v=a-b;break;\n        case '*':v=a*b;break;\n        case '/':v=a/b;break;\n    }\n    return(v);\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;题主想的复杂了&amp;#xff0c;修改完善如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;void Delete_list(Node** phead, int num)\n{\n    Node* p &amp;#61; *phead;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!p)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;此表为空&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;while&lt;/span&gt; (p) //&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p-&amp;gt;&lt;/span&gt;next)\n        {\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt; (p-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;data&lt;/span&gt; &amp;#61;&amp;#61; num)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (p &amp;#61;&amp;#61; (*phead)){   &lt;span class=\"hljs-comment\"&gt;//链表第一个结点&lt;/span&gt;\n                    (*&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;phead&lt;/span&gt;) &amp;#61; p-&amp;gt;&lt;/span&gt;next;\n                    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;if&lt;/span&gt;(p-&amp;gt;&lt;/span&gt;next)\n                        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;-&amp;gt;&lt;/span&gt;prior &amp;#61; NULL;\n                }\n                &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!p-&amp;gt;&lt;/span&gt;next){   &lt;span class=\"hljs-comment\"&gt;//链表最末尾结点&lt;/span&gt;\n                    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;prior&lt;/span&gt;-&amp;gt;&lt;/span&gt;next &amp;#61; NULL;\n                }\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n                    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;prior&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt; &amp;#61; p-&amp;gt;&lt;/span&gt;next;\n                    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;next&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;prior&lt;/span&gt; &amp;#61; p-&amp;gt;&lt;/span&gt;prior;\n                }\n                free(p);\n                break;\n            }\n            &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;p&lt;/span&gt; &amp;#61; p-&amp;gt;&lt;/span&gt;next;\n        }\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["C双向链表删除中间节点无法打印", ["C数据结构双向链表节点删除问题。", "出现错误的模块是中间节点（至少3个）的删除，该节点后续无法打印（我根据返回值查到的错误可能是栈溢出", "\n", "//tmp指向  前驱的后继指向 删除的后继  删除后继的前驱指向删除的前驱", "\n", "//空表无删除 ", "\n", "//只有一个置为NULL ", "\n", "//删首节点 不需要前驱节点的操作", "\n", "//删尾结点 不需要后驱节点的操作 ", "\nvoid Delete_list(Node **phead , int num)", "//后者为待删除节点对应键值 ", "\n{\n    Node *tmp  = (Node *) malloc (sizeof(Node));\n    Node *p = *phead;\n    int flag;\n    \n    ", "if", "(!p)\n    printf(", "\"此表为空\"", ");\n    ", "else", "\n    {\n        ", "if", "(!( p ->", " next))", "//单一节点判断 ", "\n        {\n            ", "if", "(p ->", " ", "data", " = num)\n            {\n                flag = ", "1", ";\n                *phead = NULL;\n            }\n         }\n         ", "//非单一节点 ", "\n         ", "else", "\n         {\n             ", "if", "((*phead)->", " ", "data", " == num)\n             {\n                 flag =", "1", ";\n                 tmp = (*phead);\n                 (*", "phead", ") = (*phead)->", "next;", "//运算符 * 取地址的优先级很低 因此使用尽量加括号 ", "\n                 (*", "phead", ")->", "prior=NULL; \n                 free(tmp);\n                 \n              } \n              ", "else", "\n              {\n                  ", "while", "(p->", "next)\n                  {\n                      \n                      ", "if", "(p ->", " ", "data", " == num)\n                      {\n                          flag =", "1", ";\n                          tmp = p;\n                          ", "printf", "(\"%d %d\",p->", "prior", "->", "data", ",p->", "next", "->", "data", ");\n                          Node *test1,*test2;\n                          \n                          ", "tmp", " ->", " ", "prior", "->", " ", "next", " = tmp->", "next;\n                          ", "tmp", " ->", " ", "next", "->", " ", "prior", " = tmp->", "prior;\n                          \n                        ", "test1", "= tmp ->", " ", "prior", "->", " next;", "//4", "\n                          ", "test2", " =tmp ->", " ", "next", "->", " prior;", "//2", "\n                          ", "printf", "(\"\\n%d %d\",test1->", "data", ",test2->", "next", "->", "data", ");\n                                                \n                          free(tmp);\n                          break;\n                    }\n                    ", "p", " = p ->", " next;    \n                 }\n                 ", "if", "(p->", "data", " == num)\n                 \n                 {\n                     flag = ", "1", ";\n                    tmp = p;\n                    ", "p", " ->", " ", "prior", " ->", " next = NULL;\n                    free(tmp);  \n                 }\n              }\n             \n          } \n     } \n    \n}\n\n", "\n", "\n", "双链表我将删除节点的前后节点重新相连为何断链了，但是test测试又表明实际相连，我想请问一下这是哪里出现问题了？"]], "Tag": "程序设计"}
{"Answer": "加上\\n\r\n\r\n```\r\n        printf(\"|        |        |      |        |        |        |        |        |        |\\n\"); \r\n        printf(\"|    %s  |    %d  |   %d | %5.2f  | %5.2f  | %5.2f  | %5.2f  |    %d  | %5.2f  |\\n\",\r\n          PCB[i].name,PCB[i].number,PCB[i].priority,PCB[i].come_T,PCB[i].run_T,PCB[i].run_begin_T,PCB[i].run_end_T,PCB[i].order,f1); \r\n```\r\n\r\n# 问题解决的话请点下采纳", "Konwledge_Point": "优先级", "Question": ["如何让这里换行排布或者显示不这么乱", ["在输入多位名称或者编号后，如何让这里不错行", "\n\n", "void Output()\n{\n    int i;\n    float turn_round_T=0,f1,w=0; //f1是周转时间 w是平均带权周转时间 \n    printf(\"\\n|进程名称|进程编号|优先级|到达时间|运行时间|开始时间|结束时间|运行次序|周转时间|\\n\");\n    for(i=0;i<counter;i++)\n    {\n        f1=PCB[i].run_end_T-PCB[i].come_T;\n        turn_round_T=turn_round_T+f1;\n        w=w+(f1/PCB[i].run_T);\n        printf(\"|        |        |      |        |        |        |        |        |        |\\n\"); \n        printf(\"|    %s   |    %d   |   %d  | %5.2f  | %5.2f  | %5.2f  | %5.2f  |    %d   | %5.2f  |\\n\",\n\n          PCB[i].name,PCB[i].number,PCB[i].priority,PCB[i].come_T,PCB[i].run_T,PCB[i].run_begin_T,PCB[i].run_end_T,PCB[i].order,f1); \n\n\n    }\n    printf(\"\\n           *****平均周转时间为：%5.2f\",turn_round_T/counter);\n    printf(\"\\n           *****平均带权周转时间为：%5.2f\",w/counter);\n\n}\n", "\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;还是看下赋值逻辑&amp;#xff0c;是不是还没来的及改变就提交上去了。。或者后面把data有重写的逻辑。。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["微信小程序发送post请求参数获取时出问题.", ["微信小程序中，两次打印出的data相同都是更改数据后的data，为什么发送的post请求中的数据中的参数里的data还是更改前的data？", "相关函数：", "\n", " click(e) { ", "//数据库修改数据", "\n    var that=this;\n    ", "if", "(that.", "data", ".sex==", "\"未填写\"", "){\n      that.setData({\n        sex:-", "1", ",\n      })\n    }", "else", " ", "if", "(that.", "data", ".sex==", "\"男\"", "){\n      that.setData({\n        sex:", "1", ",\n      })\n    }", "else", " ", "if", "(that.", "data", ".sex==", "\"女\"", "){\n      that.setData({\n        sex:", "0", ",\n      })\n    }\n    console.", "log", "(this.", "data", ");\n    console.", "log", "(that.", "data", ");\n    wx.request({\n      url:app.globalData.apiUrl+ ", "'/user/updateUser'", ",\n      method: ", "'POST'", ",\n      ", "data", ": {\n        openId: that.", "data", ".openid,\n        nickName:that.", "data", ".nick_name,\n        ", "name", ":that.", "data", ".", "name", ",\n        school:that.", "data", ".school,\n        phoneNumber:that.", "data", ".phone_number,\n        sex:that.", "data", ".sex,\n        yuanxi:that.", "data", ".yuanxi,\n        email:that.", "data", ".email,\n        major:that.", "data", ".major,\n        bankcardNumber:that.", "data", ".bankCard_number\n      },\n      success: res => {\n        console.", "log", "(that.", "data", ")\n        console.", "log", "(", "\"发送成功\"", ")\n      }\n    })\n    ", "//关闭当前页面并且回到上页面", "\n    wx.showToast({\n      ", "title", ": ", "\"纺院社区：修改成功\"", ", ", "// 提示的内容", "\n      icon: ", "\"none\"", ", ", "// 图标，默认success", "\n      image: ", "\"\"", ", ", "// 自定义图标的本地路径，image 的优先级高于 icon", "\n      duration: ", "1500", ", ", "// 提示的延迟时间，默认1500", "\n      mask: ", "false", ", ", "// 是否显示透明蒙层，防止触摸穿透", "\n    })\n  setTimeout(function(){\n    wx.navigateBack({\n      delta: ", "1", "\n    })\n  },", "1000", ");\n    \n  },\n\n", "\n", "下面是调试器截图：", "\n", "这三个data信息分别是this.data，that.data 和 回调函数里的 that.data", "\n"]], "Tag": "程序设计"}
{"Answer": "css注释是/**/，不要用html的代码的，用html的导致样式出问题了\r\n\r\n虽然是html代码，但是你放到style里面，里面的内容就要符合css语法    \r\n\r\n```\r\n     /*&lt;!-- 继承性-- &gt;*/ body {\r\n            font-family: '微软雅黑';\r\n        }\r\n\r\n        /*&lt;!-- 层叠性-- &gt;*/ h1 {\r\n            color: red;\r\n        }\r\n\r\n        h1 {\r\n            background-color: silver;\r\n        }\r\n\r\n        /*&lt;!-- 优先级-- &gt; */p {\r\n            color: red;\r\n        }\r\n\r\n        p {\r\n            color: blue;\r\n        }\r\n```", "Konwledge_Point": "优先级", "Question": ["关于验证css层叠性问题", ["今天刚刚接触css，在验证css层叠性时发现了一个奇怪问题，代码如下：", "\n\n", " <!--css规则特性-->\n<!DOCTYPE html>\n<html>\n<head>\n<title>css规则特性</title>\n<style type=\"text/css\">\n\n<!--继承性-->\nbody {\n            font-family:'微软雅黑';\n            }\n\n<!--层叠性-->  \nh1 {\n            color:red;\n        }\nh1 {\n            background-color:silver;\n            }\n\n<!--优先级-->\np {\n        color:red;\n        }\np{\n        color:blue;\n        }\n</style>\n</head>\n<body>\n<h1>AAA</h1>\n<p>BBB</p>\n</body>\n</html>     \n", "\n\n", "在层叠性部分写了两个h1，是为了验证层叠性。然后奇怪的问题来了：", "\n两个特性中只会显示第二个h1的效果，也就是说如果我把这两个h1换个位置，则效果也互换了；如果我删除其中一个h1，那么这个单独的h1也没有效果。", "\n这真是一个好奇怪好奇怪又好费解的问题呀！", "\n三种情况图片如下：", "\n原代码情况下：", "\n交换h1位置情况下：", "\n在删除其中一个h1后：", "\n这个小问题好奇怪好费解，好想知道答案！！！"]], "Tag": "程序设计"}
{"Answer": "&lt;ol&gt;&lt;li&gt;&lt;code class=\"language-javascript\"&gt;std::priority_queue&lt;/code&gt;模板类等第三个模板参数&lt;code class=\"language-javascript\"&gt;Compare&lt;/code&gt;默认是&lt;code class=\"language-javascript\"&gt;std::less&lt;/code&gt;&amp;#xff0c;&lt;code class=\"language-javascript\"&gt;std::priority_queue&amp;lt;Status&amp;gt; q&lt;/code&gt;则要求&lt;code class=\"language-javascript\"&gt;Status&lt;/code&gt;结构体必须提供&lt;code class=\"language-javascript\"&gt;operator&amp;lt;&lt;/code&gt;比较运算符。当然你也可以使用别的严格弱序比较函数对象&amp;#xff0c;那么你就必须在实例化&lt;code class=\"language-javascript\"&gt;std::priority_queue&lt;/code&gt;时提供第三个模板参数&lt;br /&gt;&lt;a href=\"https://en.cppreference.com/w/cpp/container/priority_queue\" id=\"textarea_1640802593070_1640805296022_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://en.cppreference.com/w/cpp/container/priority_queue&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=\"https://en.cppreference.com/w/cpp/utility/functional/less\" id=\"textarea_1640802593070_1640805296022_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://en.cppreference.com/w/cpp/utility/functional/less&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;code class=\"language-javascript\"&gt;Status::operator&amp;lt;&lt;/code&gt;只是比较两个Status结构体&amp;#xff0c;这里的作用是让&lt;code class=\"language-javascript\"&gt;q&lt;/code&gt;优先队列按&lt;code class=\"language-javascript\"&gt;Status::value&lt;/code&gt;降序排列&lt;/li&gt;&lt;li&gt;&lt;code class=\"language-javascript\"&gt;q&lt;/code&gt;队列里的值是&lt;code class=\"language-javascript\"&gt;Status&lt;/code&gt;结构体&amp;#xff0c;插入的话须提供一个&lt;code class=\"language-javascript\"&gt;Status&lt;/code&gt;结构体&amp;#xff0c;&lt;code class=\"language-javascript\"&gt;q.push({node-&amp;gt;value, node})&lt;/code&gt;这里是用初始化列表构建一个&lt;code class=\"language-javascript\"&gt;Status&lt;/code&gt;结构体&amp;#xff0c;这是C&amp;#43;&amp;#43;11语法&lt;/li&gt;&lt;li&gt;用优先队列是确保队列里的元素始终是有序的&lt;/li&gt;&lt;li&gt;&lt;code class=\"language-javascript\"&gt;val&lt;/code&gt;和&lt;code class=\"language-javascript\"&gt;ptr&lt;/code&gt;是在每次&lt;code class=\"language-javascript\"&gt;push&lt;/code&gt;时赋值的。&lt;br /&gt;这个算法的思想是&amp;#xff0c;对k个有序链表&amp;#xff0c;依次把它们的头结点入队列&amp;#xff08;注意优先队列确保队列里的元素是有序的&amp;#xff09;&amp;#xff0c;然后每次取队列里的最前面的元素插入到新列表里&amp;#xff0c;同时把那个节点的下一个节点入队列&amp;#xff08;注意优先队列排序&amp;#xff09;&amp;#xff0c;依此循环直到队列为空&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "优先级", "Question": ["合并k个排序链表，力扣原题，我有几个问题", ["class Solution {", "public:", "    struct Status {", "        int val;", "        ListNode *ptr;", "        bool operator < (const Status &rhs) const {", "            return val > rhs.val;", "        }", "    };", "\n", "priority_queue <Status> q;\n\nListNode* mergeKLists(vector<ListNode*>& lists) {\n    ", "for", " (auto node: lists) {\n        ", "if", " (node) q.push({node->", "val, node});\n    }\n    ListNode head, *tail = &head;\n    ", "while", " (!q.empty()) {\n        auto f = q.top(); q.pop();\n        ", "tail", "->", "next = f.ptr; \n        ", "tail", " = tail->", "next;\n        ", "if", " (f.ptr->", "next", ") q.push({f.ptr->", "next", "->", "val", ", f.ptr->", "next});\n    }\n    return head.next;\n}\n", "\n", "};", "这是力扣上原题的使用优先队列合并法，来个负责任的大佬，回答我几个问题", "问：bool operator < (const Status &rhs) const {return val > rhs.val; }既然是return val>rhs.val，为什么不写成bool operator>，这个重载有什么意义呢", "问：bool operator<能对Status &rhs有什么作用", "问：if (node) q.push({node->val, node});为什么不直接写成q.push（node->val），这是个什么结构", "问：struct里int val;ListNode *ptr;bool operator < (const Status &rhs) const，三个变量有什么关联呢，我感觉ptr和val完全没有任何交集啊，这三个量，在这个函数里是怎么互相作用的", "问：为什么官方解答要特地用优先级队列priorityqueue呢，我还是想不明白", "问：ptr谁给他赋值的呢，从头到尾被赋值的不只有q和f和tail吗，ptr在struct里起到什么角色啊", "来个认真负责任的大佬，希望能仔细举例一下符号重载"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;输入字母就报错&amp;#xff1f;&lt;br /&gt;那你判断输入的是否是字母&amp;#xff0c;是字母就抛出异常。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["栈链四则运算  要求输入字母就报错  应该怎么写", ["#define MaxSize 30", "#include", "#include <stdlib.h>", "using namespace std;", "typedef float datatype;", "typedef char chartype;", "﻿", "//定义栈格式﻿", "typedef struct node", "{", "    int flag; //标记位，1为浮点数，2为字符型﻿", "    datatype num;", "    chartype sign;", "    node* next;", "}node;", "﻿", "typedef struct Sqstack", "{", "    node *Top;", "}SqStack;", "﻿", "//构造一个空栈﻿", "void InitStack(SqStack *& S);", "﻿", "//置空栈", "void SetNull(SqStack ", "S);", "﻿", "//判断栈空", "int Empty(SqStack", "S);", "﻿", "//出栈﻿", "void Pop(SqStack *S,datatype &e);", "void Pop(SqStack *S,chartype &e);", "//入栈﻿", "void Push(SqStack *S,datatype n);", "void Push(SqStack *S,chartype s);", "//", "void GetTop(SqStack *S,datatype &e);", "void GetTop(SqStack ", "S,chartype &e);", "//判断是否为字符型，是返回1，否返回0", "int CharOrNot(char ch);", "//输入表达式保存﻿", "void GetExpression(SqStack ", "&S);", "//输入输出对换﻿", "void ReturnStack(SqStack ", "&S);", "//四则运算﻿", "datatype EvaluateExpression(SqStack ", "C);", "//自带输入的四则运算﻿", "datatype EvaluateExpression();", "//判断优先级﻿", "chartype Precede(chartype a,chartype b);", "//对相关运算进行封装，返回运算结果﻿", "datatype Operate(datatype a,chartype b,datatype c);", "﻿", "//构造一个空栈﻿", "void InitStack(SqStack ", "& S)", "{", "    S = (SqStack", ")malloc(sizeof(SqStack));", "    S->Top = NULL;", "}", "﻿", "//置空栈", "void SetNull(SqStack ", "S)", "{", "    node", " p = NULL;", "    while(S->Top != NULL)", "    {", "        p = S->Top;", "        S->Top = p->next;", "        free(p);p = NULL;", "    }", "    //cout<<\"置空成功\"<<endl;", "}", "﻿", "//判断栈空,空返回1", "int Empty(SqStack*S)", "{", "    if(S->Top<=0) return 1;", "    else return 0;", " }", "﻿", "//入栈﻿", "void Push(SqStack *S,datatype n)", "{", "    node *p = (node*)malloc(sizeof(node));", "    if(p != NULL)", "    {", "        p->flag = 1;", "        p->num = n;", "        p->next = S->Top;", "        S->Top = p;", "        //cout<<\"Num入栈成功:\"<", "num<<endl;", "    }", "    else", "        cout<<\"Error\"<<endl;", "}", "//入栈﻿", "void Push(SqStack *S,chartype s)", "{", "    node *p = (node*)malloc(sizeof(node));", "    if(p != NULL)", "    {", "        p->flag = 2;", "        p->sign = s;", "        p->next = S->Top;", "        S->Top = p;", "        //cout<<\"Sign入栈成功:\"<", "sign<<endl;", "    }", "    else", "        cout<<\"Error\"<<endl;", "}", "﻿", "//出栈﻿", "void Pop(SqStack *S,datatype &e)", "{", "    if(S->Top != NULL)", "    {", "        node", " p = S->Top;", "        e = p->num;", "        S->Top = p->next;", "        free(p);", "        //cout<<\"出栈成功: \"<<e<<endl;", "    }", "    else {}", "}", "void Pop(SqStack *S,chartype &e)", "{", "    if(S->Top != NULL)", "    {", "        node", " p = S->Top;", "        e = p->sign;", "        S->Top = p->next;", "        free(p);", "        //cout<<\"出栈成功: \"<<e<<endl;", "    }", "    else {}", "}", "﻿", "//获得栈顶元素﻿", "void GetTop(SqStack *S,chartype &e)", "{", "    if(S->Top != NULL)", "        e = S->Top->sign;", "    else {}", "}", "void GetTop(SqStack ", "S,datatype &e)", "{", "    if(S->Top != NULL)", "        e = S->Top->num;", "    else {}", "}", "﻿", "//判断运算符﻿为真返回1", "int CharOrNot(char ch)", "{", "    if(ch!='+'&&ch!='-'&&ch!='", "'&&ch!='/'&&ch!='('&&ch!=')'&&ch!='#')", "    return 0;", "    else return 1;", "}", "//获取表达式﻿", "void GetExpression(SqStack ", "&S)", "{", "    cout<<\"请输入计算题：（请在计算式后面加#符号结束）\"<<endl;", "    char ch=0;", "    ch = getchar();", "    while (ch !='\\n')", "    {", "        if(CharOrNot(ch))//为字符﻿", "        {", "            Push(S,ch);", "            ch = getchar();", "        }", "        else", "        {", "            datatype k=1;", "            datatype m=datatype(ch)-48;", "            ch = getchar();", "            while(ch!='.' && !CharOrNot(ch))", "            {", "                m=m", "10+int(ch)-48;", "                ch = getchar();", "            }", "            if(ch=='.') ch=getchar();", "            while(!CharOrNot(ch))", "            {", "                k=0.1", "k;", "                m=m+k", "(int(ch)-48);", "                ch = getchar();", "            }", "            Push(S,m);", "        }", "    }", "    //cout<<\"输入完毕\"<<endl;", "}", "﻿", "//变换顺序﻿", "void ReturnStack(SqStack *&S)", "{", "    SqStack *Q;node *p;", "    InitStack(Q);", "    datatype a;chartype b;", "\n", "while", "(S->Top!=", "NULL", ")\n{\n    p=S->Top;\n    S->Top = p->next;\n    p->next = Q->Top; \n    Q->Top=p;\n}\nS->Top = Q->Top;\nQ->Top = ", "NULL", ";\nfree(Q);\n", "//cout<<\"转变完成\"<<endl;", "\n", "\n", "}", "﻿", "//输入栈﻿处理﻿", "datatype EvaluateExpression(SqStack *C)", "{", "    SqStack *S,*Q;node *p;", "    InitStack(S);InitStack(Q);", "    Push(Q,'#'); //作为结束判断的标志﻿", "    chartype b='!';datatype a;datatype c;", "    //当最后一个和第一个元素都为#时结束﻿", "    while(p->sign!='#' || b!='#')", "    {", "        if(p->flag == 1)//flag = 1 为数字﻿", "        {", "            Push(S,p->num);p=p->next;//进入数字栈﻿", "        }", "        else if(p->flag == 2)  //为字符﻿", "        {", "            GetTop(Q,b);", "            //通过switch判断需要做的操作﻿", "            switch(Precede(b,p->sign)){", "            case'<'://栈顶符号优先级小于当前符号﻿", "                    Push(Q,p->sign);//对当前进行进栈操作﻿", "                    p=p->next;//p指向下一个节点﻿", "                    break;", "            case'='://脱括号﻿", "                    Pop(Q,b);//出栈﻿", "                    p=p->next;//p指向下一个节点﻿", "                    break;", "            case'>':// 栈顶符号优先级大于当前符号﻿", "                    Pop(Q,b);//出栈操作符﻿", "                    Pop(S,a);//得到第二个数字", "                    Pop(S,c);//得到第一个数字", "                    Push(S,Operate(a,b,c));//将运算结果进栈﻿", "                    break;", "                }", "        }", "        GetTop(Q,b);//更新 b 为栈顶元素符号，方便判断﻿", "    }", "    GetTop(S,a);//结束循环，返回数字栈结果﻿", "    SetNull(S);SetNull(Q);//置空﻿", "    free(S);free(Q);free(p);//释放栈格式﻿", "\n", "return", " a;", "//返回结果﻿", "\n", "\n", "}", "﻿", "﻿", "//判断优先级﻿", "chartype Precede(chartype a,chartype b)", "{", "    int m,n;", "    switch(a)", "    {", "        case '#': m=0;break;", "        case '-':", "        case '+': m=2;break;", "        case '", "':", "        case '/': m=3;break;", "        case '(': m=1;break;", "        //default", "        //case')': m=3;", "    }", "    switch(b)", "    {", "        case '#': n=0;break;", "        case '-':", "        case '+': n=2;break;", "        case '", "':", "        case '/': n=3;break;", "        case '(': n=4;break;", "        case ')': n=1;break;", "        //default", "    }", "﻿", "    if(m<n)", "        a='<';", "    else if(m==n && m == 1)//脱括号﻿", "        a='=';", "    else if(m==n &&m != 0 && m!= 1 || m>n)", "        a='>';", "\n", "return", " a;\n", "\n", "}", "﻿", "datatype Operate(datatype a,chartype b,datatype c)", "{", "    switch(b)"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;判断是不是整数之前&amp;#xff0c;你得先确保它是个数&amp;#xff0c;它根本不是数&amp;#xff0c;那就根本谈不上是整数还是非整数&lt;br /&gt;其实你可以在except后面再加另一个except&amp;#xff0c;捕获除了NumberError 之外的其他异常&lt;br /&gt;反正这么简单的代码除了输入不是数&amp;#xff0c;也没有别的异常了&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["python 控制输入整数重写exception的问题", ["###### 问题遇到的现象和发生背景 ", "\n我需要控制输入数字，如果输入非整数，则提示重新输入！\n\n", "###### 问题相关代码，请勿粘贴截图 ", "\n", "def", " ", "input_age", "(", "message", "):\n    ", "while", " ", "True", ":\n        ", "try", ":\n            age = ", "input", "(message)\n            ", "if", " ", "not", " ", "isinstance", "(", "int", "(age), ", "int", "):\n            ", "# if not age.isdigit():", "\n                ", "raise", " NumberError(", "'必须是整数'", ")\n            ", "elif", " ", "int", "(age) < ", "0", " ", "or", " ", "int", "(age) > ", "100", ":\n                ", "raise", " NumberError(", "'必须在0--100之间'", ")\n            ", "else", ":\n                ", "break", "\n        ", "except", " NumberError ", "as", " n:\n            ", "print", "(n.message)\n\n    ", "return", " age\n\n\n", "class", " ", "NumberError", "(", "Exception", "):\n    ", "def", " ", "__init__", "(", "self, message", "):\n        self.message = message\n\n", "print", "(input_age(", "\"请输入年龄：\"", "))\n\n", "###### 运行结果及报错内容 ", "\n请输入年龄：a\nTraceback (most recent call last):\n  File ", "\"C:\\Users\\s\\test.py\"", ", line ", "34", ", ", "in", " <module>\n    ", "print", "(input_age(", "\"请输入年龄：\"", "))\n  File ", "\"C:\\Users\\s\\test.py\"", ", line ", "17", ", ", "in", " input_age\n    ", "if", " ", "not", " ", "isinstance", "(", "int", "(age), ", "int", "):\nValueError: invalid literal ", "for", " ", "int", "() ", "with", " base ", "10", ": ", "'a'", "\n\nProcess finished ", "with", " exit code ", "1", "\n\n\n", "###### 我的解答思路和尝试过的方法 ", "\n上面第五行代码运行出错！如果启用第六行代码则没问题！请大佬指点一下为什么会出现这个问题？我考虑是重新定义exception的问题或有什么优先级的问题。\n因为下面代码可以正确运行：\n", "while", " ", "True", ":\n    ", "try", ":\n        age = ", "input", "(", "\"请输入年龄：\"", ")\n        ", "if", " ", "isinstance", "(", "int", "(age), ", "int", "):\n            ", "break", "\n    ", "except", " Exception ", "as", " e:\n        ", "print", "(e)\n        ", "continue", "\n\n", "print", "(age)\n\n", "###### 我想要达到的结果", "\n请大佬指点， 谢谢\n\n"]], "Tag": "程序设计"}
{"Answer": "写代码不认真，又不懂看浏览器错误信息\r\n\r\n```\r\n        window.onload = function () {\r\n            var oDiv = document.getElementById('div1');//-----------少 1\r\n            var i = 0;\r\n\r\n            oDiv.timer = null;\r\n\r\n            oDiv.onmouseover = function () {\r\n                startMove(oDiv, 'opacity', 100)\r\n            }\r\n            oDiv.onmouseout = function () {\r\n                startMove(oDiv, 'opacity', 30)\r\n            }\r\n        }\r\n\r\n        function getStyle(obj, attr) {\r\n            if (obj.currentStyle) {\r\n                return obj.currentStyle[attr];\r\n            } else {\r\n                return getComputedStyle(obj, false)[attr];\r\n            }\r\n        }\r\n\r\n        function startMove(obj, attr, iTarget) {\r\n            clearInterval(obj.timer);\r\n            obj.timer = setInterval(function () {\r\n                var iCur = 0;\r\n\r\n                if (attr == 'opacity') {//---------------你写成 atrr\r\n                    iCur = parseInt(parseFloat(getStyle(obj, attr)) * 100);//---------------赋值是一个 =\r\n                } else {\r\n                    iCur = parseInt(getStyle(obj, attr));//--------------------赋值是一个 =\r\n                }\r\n                var iSpeed = (iTarget - iCur) / 8;\r\n                iSpeed = iSpeed &gt; 0 ? Math.ceil(iSpeed) : Math.floor(iSpeed);\r\n\r\n                if (iCur == iTarget) {\r\n                    clearInterval(obj.timer);\r\n                } else {\r\n                    if (attr == 'opacity') {\r\n                        obj.style.filter = 'alpha(opacity=' + (iCur + iSpeed) + ')'; //优先级\r\n                        obj.style.opacity = (iCur + iSpeed) / 100;\r\n                    } else {\r\n                        obj.style[attr] = iCur + iSpeed + 'px';\r\n                    }\r\n                }\r\n            }, 30)\r\n        }\r\n\r\n```", "Konwledge_Point": "优先级", "Question": ["为什么设置透明度的功能并没有实现？", ["<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <style>\n        #div1 {\n            width: 100px;\n            height: 100px;\n            background: red;\n            filter: alpha(opacity=30);\n            opacity: 0.3;\n        }\n    </style>\n    <script>\n        window.onload = function () {\n            var oDiv = document.getElementById('div');\n            var i = 0;\n\n            oDiv.timer = null;\n\n            oDiv.onmouseover = function () {\n                startMove(oDiv, 'opacity', 100)\n            }\n            oDiv.onmouseout = function () {\n                startMove(oDiv, 'opacity', 30)\n            }\n        }\n\n        function getStyle(obj, attr) {\n            if (obj.currentStyle) {\n                return obj.currentStyle[attr];\n            } else {\n                return getComputedStyle(obj, false)[attr];\n            }\n        }\n\n        function startMove(obj, attr, iTarget) {\n            clearInterval(obj.timer);\n            obj.timer = setInterval(function () {\n                var iCur = 0;\n\n                if (atrr == 'opacity') {\n                    iCur == parseInt(parseFloat(getStyle(obj, attr)) * 100);\n                } else {\n                    iCur == parseInt(getStyle(obj, attr));\n                }\n                var iSpeed = (iTarget - iCur) / 8;\n                iSpeed = iSpeed > 0 ? Math.ceil(iSpeed) : Math.floor(iSpeed);\n\n                if (iCur == iTarget) {\n                    clearInterval(obj.timer);\n                } else {\n                    if (attr == 'opacity') {\n                        obj.style.filter = 'alpha(opacity=' + (iCur + iSpeed) + ')'; //优先级\n                        obj.style.opacity = (iCur + iSpeed) / 100;\n                    } else {\n                        obj.style[attr] = iCur + iSpeed + 'px';\n                    }\n                }\n            }, 30)\n        }\n    </script>\n</head>\n\n<body>\n    <div id=\"div1\"></div>\n</body>\n\n</html>\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你加权限了吗&amp;#xff1f;Android 9以上更新了一些权限&amp;#xff0c;你看看有用没&amp;#xff1a;&lt;a href=\"https://developer.android.google.cn/about/versions/pie/android-9.0-changes-all?hl&amp;#61;zh-cn#restrict-access-phone-numbers\" id=\"textarea_1631608341196_1631608730517_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;行为变更&amp;#xff1a;所有应用  |  Android 开发者  |  Android Developers&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;span class=\"md_link_img icon iconfont icon-lianjie\"&gt;&lt;/span&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://developer.android.google.cn/about/versions/pie/android-9.0-changes-all?hl&amp;#61;zh-cn#restrict-access-phone-numbers&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["tm.listen(listen, PhoneStateListener.LISTEN_CALL_STATE);无法拦截来电", ["我的问题就是无法拦截来电，无法显示来电的号码，因为我得到的是一个空的来电号码，我尝试了很多方法，都无法解决，", "这是源代码", "\n", "import", " android.content.", "BroadcastReceiver", ";\n", "import", " android.content.", "Context", ";\n", "import", " android.content.", "Intent", ";\n", "import", " android.telephony.", "PhoneStateListener", ";\n", "import", " android.telephony.", "TelephonyManager", ";\n", "import", " android.util.", "Log", ";\n\n", "import", " com.example.mobilegualdar.db.tool.", "DBStoryUtils", ";\n\n\npublic ", "class", " ", "PhoneReceiver", " ", "extends", " ", "BroadcastReceiver", " ", "{\n    ", "private", " ", "TelephonyManager", " tm;\n    ", "private", " ", "MyListener", " listen;\n    ", "private", " ", "DBStoryUtils", " dao;\n    ", "@Override", "\n    public void onReceive(", "Context", " context, ", "Intent", " intent) {\n        tm = (", "TelephonyManager", ") context.getSystemService(", "Context", ".", "TELEPHONY_SERVICE", "); ", "//电话管理服务", "\n        listen = ", "new", " ", "MyListener", "();\n        tm.listen(listen, ", "PhoneStateListener", ".", "LISTEN_CALL_STATE", ");\n        dao = ", "new", " ", "DBStoryUtils", "(context);\n    }\n    ", "private", "  ", "class", " ", "MyListener", " ", "extends", " ", "PhoneStateListener", " ", "{\n        ", "@Override", "\n        public void onCallStateChanged(int state, ", "String", " phoneNumber) {\n            ", "super", ".onCallStateChanged(state, phoneNumber);\n\n            switch (state) {\n                ", "case", " ", "TelephonyManager", ".", "CALL_STATE_IDLE", ":\n                    ", "System", ".out.println(", "\"挂断\"", ");\n                    ", "break", ";\n                ", "case", " ", "TelephonyManager", ".", "CALL_STATE_OFFHOOK", ":\n                    ", "System", ".out.println(", "\"接听\"", ");\n                    ", "break", ";\n                ", "case", " ", "TelephonyManager", ".", "CALL_STATE_RINGING", ": ", "//铃响", "\n                    ", "String", " result = dao.findModel(phoneNumber);\n                    ", "if", " (", "\"电话拦截\"", ".equals(result) || ", "\"全部拦截\"", ".equals(result)) {\n                        ", "Log", ".i(", "\"MainActivity\"", ", ", "\"挂断电话\"", " + phoneNumber);\n                    }\n                    ", "break", ";\n            }\n        }\n    }\n\n}\n\n", "\n", "这是在服务中注册通知", "\n", "    PhoneReceiver phoneReceiver = ", "new", " ", "PhoneReceiver()", ";\n        IntentFilter pfilter = ", "new", " ", "IntentFilter(", "\"android.intent.action.PHONE_STATE\"", ")", ";\n        ", "//pfilter.addAction(\"android.intent.action.NEW_OUTGOING_CALL\");", "\n        pfilter.set", "Priority(IntentFilter.SYSTEM_HIGH_PRIORITY)", "; ", "//设置最高优先级", "\n        register", "Receiver(", "phoneReceiver", ",", "pfilter", ")", ";\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;问&amp;#xff1a;if ((!a) || (!b)) return a ? a : b;这段代码有什么意义呢&amp;#xff0c;为什么不写成if ((a) || (b))&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  这个是如果合并两个链表中有一个指针为空&amp;#xff0c;就没必要执行了&amp;#xff0c;返回不为空的&amp;#xff1b;如果都是空的&amp;#xff0c;返回NULL。&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  写成if ((a) || (b)) 与 if ((!a) || (!b)) 逻辑就不一样了。&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;问&amp;#xff1a;tail-&amp;gt;next &amp;#61; (aPtr ? aPtr : bPtr);这段代码的优先级是什么&amp;#xff0c;为什么不写成&amp;#xff08;tail-&amp;gt;next &amp;#61; aPtr&amp;#xff09; ? aPtr : bPtr;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  给tail-&amp;gt;next赋值&amp;#xff0c;将剩余的未合并的链表添加到末尾。(aPtr ? aPtr : bPtr) : aPtr不为空&amp;#xff0c;就是剩余aPtr&amp;#xff1b;否则就是bPtr&amp;#xff1b;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  写成&amp;#xff08;tail-&amp;gt;next &amp;#61; aPtr&amp;#xff09; ? aPtr : bPtr;  是什么作用呢&amp;#xff1f;&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;问&amp;#xff1a;int mid &amp;#61; (l &amp;#43; r) &amp;gt;&amp;gt; 1;这段代码什么意思&amp;#xff0c;为什么不去写成int mid &amp;#61; (l &amp;#43; r) /2&amp;#xff0c;希望能讲详细一点&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  效果是一样的&amp;#xff0c;右移的执行效率高一点&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;问&amp;#xff1a; ListNode head, *tail &amp;#61; &amp;amp;head&amp;#xff0c;我为什么不能写成 ListNode &amp;amp;head, tail &amp;#61; head&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  定义head以及tail指针。&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  写成ListNode &amp;amp;head, tail &amp;#61; head;  这是定义引用而且没有赋值&amp;#xff0c;再定义tail变量&amp;#xff1f; 那想这么写是想表达什么呢&amp;#xff1f;&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;问&amp;#xff1a;ListNode* mergeTwoLists(ListNode *a, ListNode *b)为什么不能写成ListNode mergeTwoLists(ListNode a, ListNode b)&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  这里链表采用指针结构&amp;#xff0c;修改指针的指向对象&amp;#xff0c;从而达到合并效果。如果写成ListNode方式&amp;#xff0c;那就势必要从指针转换为变量&amp;#xff0c;增加无谓的转换&amp;#xff0c;还有可能出错。&lt;/span&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["合并k个排序链表，力扣上原题，有一些问题", ["class Solution {", "public:", "    ListNode* mergeTwoLists(ListNode *a, ListNode *b) {", "        if ((!a) || (!b)) return a ? a : b;", "        ListNode head, *tail = &head, *aPtr = a, *bPtr = b;", "        while (aPtr && bPtr) {", "            if (aPtr->val < bPtr->val) {", "                tail->next = aPtr; aPtr = aPtr->next;", "            } else {", "                tail->next = bPtr; bPtr = bPtr->next;", "            }", "            tail = tail->next;", "        }", "        tail->next = (aPtr ? aPtr : bPtr);", "        return head.next;", "    }", "\n", "ListNode* ", "merge", "(vector <ListNode*> &lists, ", "int", " l, ", "int", " r)", " ", "{\n    ", "if", " (l == r) ", "return", " lists[l];\n    ", "if", " (l > r) ", "return", " ", "nullptr", ";\n    ", "int", " mid = (l + r) >> ", "1", ";\n    ", "return", " ", "mergeTwoLists", "(", "merge", "(lists, l, mid), ", "merge", "(lists, mid + ", "1", ", r));\n}\n\n", "ListNode* ", "mergeKLists", "(vector<ListNode*>& lists)", " ", "{\n    ", "return", " ", "merge", "(lists, ", "0", ", lists.", "size", "() - ", "1", ");\n}\n", "\n", "};", "这是力扣的原题官方解答，分治合并，我有几个问题，来个认真负责任的大佬", "问：if ((!a) || (!b)) return a ? a : b;这段代码有什么意义呢，为什么不写成if ((a) || (b))", "问：tail->next = (aPtr ? aPtr : bPtr);这段代码的优先级是什么，为什么不写成（tail->next = aPtr） ? aPtr : bPtr;", "问：int mid = (l + r) >> 1;这段代码什么意思，为什么不去写成int mid = (l + r) /2，希望能讲详细一点", "问： ListNode head, *tail = &head，我为什么不能写成 ListNode &head, ", "tail = head", "问：ListNode", " mergeTwoLists(ListNode *a, ListNode ", "b)为什么不能写成ListNode", " mergeTwoLists(ListNode a, ListNode b)", "\n", "来个负责任的大佬"]], "Tag": "程序设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;帮你找了个相似的问题, 你可以看下: &lt;a href=\"https://ask.csdn.net/questions/7537935\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;https://ask.csdn.net/questions/7537935&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;这篇博客你也可以参考下&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/weixin_43534086/article/details/104335865\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;解决scanf获取输入数据时&amp;#xff0c;遇到空格结束的问题&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;这篇博客也不错, 你可以看下&lt;a href=\"https://blog.csdn.net/weixin_43534086/article/details/104335865\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;解决scanf获取输入数据时&amp;#xff0c;遇到空格结束的问题&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "优先级", "Question": ["有什么方法可以避免scanf函数输入时要加入空格的问题", ["编写一个计算器，加减乘除四则运算优先级相同.", "目前计算什么的都正常，但是输入时候必须每个字符中间要加上空格，想问一下有什么方法可以使得在输入过程中不用加空格.", "这个是目前的输入方式", "\n", "    ", "while", "(scanf(", "\"%s\"", ",", "str", "),", "str", "[", "0", "] !=", "'='", ")\n    {\n        ", "if", "(", "str", "[", "0", "] == ", "'+'", " || ", "str", "[", "0", "] == ", "'-'", " || ", "str", "[", "0", "] == ", "'*'", " || ", "str", "[", "0", "] == ", "'/'", ")\n        {\n            a2[i]=", "str", "[", "0", "];\n            i++;\n        }\n        ", "else", "{\n            a1[i]=atoi(", "str", ");\n            i++;\n        }\n\n", "\n", "全部代码", "\n", "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nint main()\n{\n    double a1[", "100", "];\n    char a2[", "100", "]={", "0", "};\n    char str[", "100", "];\n    int i=", "0", ",j=", "0", ";\n    double sum=", "0", ";\n    while(scanf(", "\"%s\"", ",str),str[", "0", "] !=", "'='", ")\n    {\n        if(str[", "0", "] == ", "'+'", " || str[", "0", "] == ", "'-'", " || str[", "0", "] == ", "'*'", " || str[", "0", "] == ", "'/'", ")\n        {\n            a2[i]=str[", "0", "];\n            i++;\n        }\n        else{\n            a1[i]=atoi(str);\n            i++;\n        }\n    }\n        for(j=", "0", ";j<i;j++)\n        {\n            \n            if(a2[j]==", "'+'", ")\n            a1[j+", "1", "]=a1[j", "-1", "]+a1[j+", "1", "];\n            if(a2[j]==", "'-'", ")\n            a1[j+", "1", "]=a1[j", "-1", "]-a1[j+", "1", "];\n            if(a2[j]==", "'*'", ")\n            a1[j+", "1", "]=a1[j", "-1", "]*a1[j+", "1", "];\n            if(a2[j]==", "'/'", ")\n            a1[j+", "1", "]=a1[j", "-1", "]/a1[j+", "1", "];\n        }\n        sum=a1[j", "-1", "];\n    printf(", "\"%.2lf\"", ",sum);\n    }\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;要为JTable的日期列添加排序功能&amp;#xff0c;需要使用TableRowSorter&amp;#xff0c;并为该列创建一个比较器。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;//创建表格排序对象&lt;/span&gt;\n&lt;span class=\"hljs-title class_\"&gt;TableRowSorter&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-title class_\"&gt;TableModel&lt;/span&gt;&amp;gt; sorter &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;TableRowSorter&lt;/span&gt;&amp;lt;&amp;gt;(collectDateJTable.&lt;span class=\"hljs-title function_\"&gt;getModel&lt;/span&gt;());\n&lt;span class=\"hljs-comment\"&gt;//添加排序规则&amp;#xff0c;对日期列使用排序&lt;/span&gt;\nsorter.&lt;span class=\"hljs-title function_\"&gt;setComparator&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Comparator&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-title class_\"&gt;Date&lt;/span&gt;&amp;gt;() {\n&lt;span class=\"hljs-meta\"&gt;&amp;#64;Override&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; int &lt;span class=\"hljs-title function_\"&gt;compare&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;span class=\"hljs-built_in\"&gt;Date&lt;/span&gt; o1, &lt;span class=\"hljs-built_in\"&gt;Date&lt;/span&gt; o2&lt;/span&gt;) {\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; o1.&lt;span class=\"hljs-title function_\"&gt;compareTo&lt;/span&gt;(o2);\n}\n});\n&lt;span class=\"hljs-comment\"&gt;//给Jtable设置表格排序对象&lt;/span&gt;\ncollectDateJTable.&lt;span class=\"hljs-title function_\"&gt;setRowSorter&lt;/span&gt;(sorter);\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["java swing 使用Jtable给表格日期列添加排序功能要怎么做？请帮我解答一下", ["\n\npackage com.chart.display.gf1;\n\nimport com.DB.HbaseGetTaskResultDb;\nimport com.javabean.ComboBoxBean;\nimport com.model.TaskResultDetail;\nimport com.util.*;\nimport org.apache.logging.log4j.Logger;\n\nimport javax.swing.*;\nimport javax.swing.table.DefaultTableModel;\nimport javax.swing.table.TableModel;\nimport javax.swing.table.TableRowSorter;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.*;\nimport java.util.List;\n\npublic ", "class", " GF_E_MP_DAY_READ implements Runnable {\n    ", "private", " final Logger logger = ", "LoggerUtil", ".", "get", "Logger(GF_E_MP_DAY_READ.", "class", ")", ";\n\n    ", "/**\n     * 表格\n     */", "\n    ", "private", " static JTable collectDateJTable = ", "new", " ", "JTable()", ";\n    ", "/**\n     * 表格数据\n     */", "\n    ", "private", " static Vector<Object> vData = ", "new", " Vector<Object>", "()", ";\n    ", "/**\n     * 表格列名\n     */", "\n    ", "private", " static Vector<Object> vName = ", "new", " Vector<Object>", "()", ";\n\n    ", "/**\n     * 表头\n     */", "\n    String jtableHeader = ", "\"日期,采集对象ID,正向有功总,正向有功尖,正向有功峰,正向有功平,正向有功谷,反向有功总,反向有功尖,反向有功峰,反向有功平,反向有功谷\"", ";", "//配置文件获取表头数据", "\n    ", "/**\n     * 显示日志类型集合\n     */", "\n    ", "private", " Vector<ComboBoxBean> refreshTypeBeans = ", "new", " Vector<ComboBoxBean>", "()", ";\n    ", "/**\n     * 任务标志集合\n     */", "\n    ", "private", " Vector<ComboBoxBean> taskFlagBeans = ", "new", " Vector<ComboBoxBean>", "()", ";\n    ", "/*k 优先级集合 */", "\n    ", "private", " Vector<ComboBoxBean> collectPriBeans = ", "new", " Vector<ComboBoxBean>", "()", ";\n   ", "/*** 显示条数集合 */", "\n    ", "private", " Vector<ComboBoxBean> refreshCountBeans = ", "new", " Vector<ComboBoxBean>", "()", "\n    ", "/**\n     * 是否换行集合\n     */", "\n    ", "private", " Vector<ComboBoxBean> isChangeLineBeans = ", "new", " Vector<ComboBoxBean>", "()", ";\n    ", "/**\n     * 任务配置ID集合\n     */", "\n    ", "private", " Vector<ComboBoxBean> taskConfigTypeBeans = ", "new", " Vector<ComboBoxBean>", "()", ";\n\n    ", "/** 显示日志类型集合 */", "\n    ", "private", " static String", "[]", "[]", "REFRESH_TYPE= ", "PropertiesUtil", ".", "get", "Values( ", "\"refreshType\"", ")", ";\n    ", "/** 任务标志 */", "\n    ", "private", " static String", "[]", "[]", "TASK_FLAG = ", "PropertiesUtil", ".", "get", "Values(", "\"taskPlag\"", ")", ";\n    ", "/** 任务优先级 */", "\n    ", "private", " static String", "[]", "[]", "COLLECT_PRI= ", "PropertiesUtil", ".", "get", "Values(", "\"collectPri\"", ")", ";\n    ", "/** 显示条数集合*/", "\n    ", "private", " static String", "[]", "[]", "REFRESH_COUNT = ", "PropertiesUtil", ".", "get", "Values(", "\"refreshCount\"", ")", ";\n    ", "/** 是否换行 */", "\n    ", "private", " static String", "[]", "[]", "IS_CHANGE_LINE = ", "PropertiesUtil", ".", "get", "Values(", "\"isChangeLine\"", ")", ";\n    ", "/**任务配置类型默认为null即全部*/", "\n    ", "private", " static Integer taskConfigType=-", "1", ";\n    ", "/**日志类型：默认显示数组第1个：显示全部*/", "\n    ", "private", " static ", "int", " refreshType = ", "Integer", ".", "parse", "Int(REFRESH_TYPE[0] [0])", ";\n    ", "/**任务标志：默认显示数组第1个：2、全部，0.手动；1，自动*/", "\n    ", "private", " static ", "int", " taskFlag = ", "Integer", ".", "parse", "Int(TASK_FLAG[0][0])", ";\n\n    ", "private", " static ", "int", " collectPri = ", "Integer", ".", "parse", "Int(COLLECT_PRI[0] [0])", ";\n    ", "/** 显示条数：默认显示数组第一个：显示20条*/", "\n    ", "private", " static ", "int", " refreshCount = ", "Integer", ".", "parse", "Int(REPRESH_COUNT[0] [0])", ";\n    ", "/** 刷新时间：默认显示数组第一个：0 不刷新 */", "\n    ", "private", " static ", "int", " refreshTime=", "0", ";\n    ", "/**是否换行：默认显示数组第一个：0不换行 1 换行 */", "\n    ", "private", " static ", "int", " isChangeLine = ", "Integer", ".", "parse", "Int(IS_CHANGE_LINE[0] [0])", ";\n    ", "/** 任务配置类型 */", "\n    ", "private", " static String", "[]", "[]", " TASK_CONFIG_TYPE= ", "PropertiesUtil", ".", "get", "Values( ", "\"taskConfigType\"", ")", ";\n    ", "/** 表头字体 */", "\n    ", "private", " static String TABLEHEAD_FONT=", "\"微软雅黑\"", ";\n    ", "/** 行颜色 值是列表显示的最大值*/", "\n    public static List<Color> TABLEBODY_COLOR_STORM= ", "new", " ArrayList<>", "()", ";\n    ", "/**最后刷新时间*/", "\n    static String lastRefreshTime = ", "Calenders", ".", "date", "ToString(", "new", " Date()", ", Calenders.DATE_FORMAT_1);\n    ", "//自动刷新文本框", "\n    ", "private", " static JTextField consIDText = ", "new", " ", "JTextField(10)", ";\n\n\n    ", "//地市复选框", "\n    ", "private", " static JPanel checkJapnel = ", "new", " ", "JPanel()", ";\n\n    ", "/**\n     * 开始日期按钮\n     */", "\n    ", "private", " JButton timeStartButton = ", "new", " ", "JButton()", ";\n    ", "/**\n     * 结束日期 按钮\n     */", "\n    ", "private", " JButton timeEndButton = ", "new", " ", "JButton()", ";\n    ", "/**\n     * 开始日期 按钮 显示值\n     */", "\n    ", "private", " String startDateTime = ", "Calenders", ".", "getCurrentDayMin1StrO;\n    ", "/**\n     * 结束日期 按钮 显示值\n     */", "\n    ", "private", " String endDateTime = ", "Calenders", ".", "getCurrentTimeSO;\n    ", "/**\n     * 告警JPanel\n     */", "\n    ", "private", " JPanel jpanelWarn = ", "new", " ", "JPanel()", ";\n\n    public void init", "JComboBox()", " {\n    }\n    ", "//顶部按钮", "\n    public JPanel init", "JpanelTop()", " {\n        ", "//初始化顶部下拉框", "\n        init", "JComboBox()", ";\n        ", "// 日期选择控件", "\n        ", "// 开始日期", "\n        JLabel startDate = ", "new", " ", "JLabel()", ";\n        startDate.set", "Text(", "\"开始日期 \"", ")", ";\n        timeStartButton = ", "new", " ", "DatePlug(", "startDateTime", ")", ";\n        ", "// 结束日期", "\n        JLabel endDate = ", "new", " ", "JLabel()", ";\n        endDate.set", "Text(", "\"结束日期 \"", ")", ";\n        timeEndButton = ", "new", " ", "DatePlug(", "endDateTime", ")", ";\n        ", "//查询按钮 ”查询“)，", "\n        final JButton searchButton = ", "new", " ", "JButton(", "\"查询\"", ")", ";\n        searchButton.set", "Visible(", "true", ")", ";\n        searchButton.add", "MouseListener(", "new", " MouseListener()", " {\n\n            @Override\n            public void mouse", "Clicked(MouseEvent ", "arg0", ")", " {\n\n            }\n\n            @Override\n            public void mouse", "Pressed(MouseEvent ", "arg0", ")", " {\n\n            }\n\n            @Override\n            public void mouse", "Released(MouseEvent ", "arg0", ")", " {\n\n            }\n\n            @Override\n            public void mouse", "Entered(MouseEvent ", "arg0", ")", " {\n\n            }\n\n            @Override\n            public void mouse", "Exited(MouseEvent ", "arg0", ")", " {\n                startDateTime = timeStartButton.get", "Text()", ".trim", "()", ";\n                endDateTime = timeEndButton.get", "Text()", ".trim", "()", ";\n                String consId = consIDText.get", "Text()", ".trim", "()", ";\n                read", "UserInfo(", "consId", ", ", "startDateTime", ", ", "endDateTime", ")", ";\n            }\n        });\n       ", "// JLable告警相关", "\n        JLabel reminder = ", "new", " ", "JLabel()", ";\n        reminder.set", "Text(", "\"开始日期不能大于结束日期\"", ")", ";\n        reminder.set", "Font(", "new", " Font(", "\"宋体\"", ",1, 15)", ");\n        reminder.set", "Foreground(Color.RED)", ";\n       ", "//reminder.setVisible(false);", "\n       ", "//JPanel告警", "\n        jpanelWarn.set", "Size(800, 100)", ";\n        jpanelWarn.set", "Visible(", "false", ")", ";\n        jpanelWarn.add(reminder);\n\n        ", "//自动刷新按钮相关", "\n        JLabel consId = ", "new", " ", "JLabel()", ";\n        consId.set", "Text(", "\"采集对象ID\"", ")", ";\n        consIDText.set", "Text(", "\"3\"", ")", ";\n\n        JPanel japenlEast = ", "new", " ", "JPanel()", ";\n        japenlEast.add(searchButton);\n        japenlEast.add(startDate);\n        japenlEast.add(timeStartButton);\n        japenlEast.add(endDate);\n        japenlEast.add(timeEndButton);\n\n        japenlEast.add(consId);\n        japenlEast.add(consIDText);\n\n        JPanel jPanelTop = ", "new", " ", "JPanel()", ";\n        japenlEast.set", "Layout(", "new", " BorderLayout()", ");\n        japenlEast.add(jpanelWarn, BorderLayout.CENTER);\n        japenlEast.add(japenlEast, BorderLayout.WEST);\n        japenlEast.add(checkJapnel, BorderLayout.SOUTH);\n        return jPanelTop;\n    }\n\n\n       ", "/* * Storm采集运行日志界面 */", "\n\n    public JPanel get", "CollectDateJpanel()", "{\n        ", "/* * 初始化顶部选择按钮布局 */", "\n        JPanel jpanelTop =init", "JpanelTop()", ";\n        jpanelTop.set", "Size(700,100)", ";\n\n        ", "/**初始化表格和数据 */", "\n        init", "Jtable()", ";\n        ", "/** 顶部按钮和表格整合 */", "\n        JScrollPane collectDateJscrollPane = ", "new", " ", "JScrollPane(", "collectDateJTable", ")", ";", "/*按钮+表格 */", "\n        JPanel jpanel = ", "new", " ", "JPanel()", ";\n        jpanel.set", "Size( 800, 600)", ";\n        jpanel.set", "Layout(", "new", " BorderLayout()", ");\n        jpanel.add(jpanelTop, BorderLayout. NORTH);\n        jpanel.add(collectDateJscrollPane, BorderLayout.CENTER);\n\n        return jpanel;\n    }\n    public void init", "Jtable()", "{\n        ", "//添加表头", "\n        String", "[]", " jtableHeaders=jtableHeader.split(", "\",\"", ");\n        ", "int", " length = jtableHeaders.length;\n        ", "for", "(", "int", " i=", "0", ";i<length;i++){\n            vName.add(jtableHeaders", "[", "i", "]", ");", "//循环添加表数据", "\n        }\n        ", "//设置表格数据", "\n        DefaultTableModel model = ", "new", " ", "DefaultTableModel()", ";\n        model.set", "DataVector(", "vData", ", ", "vName", ")", ";\n        collectDateJTable.set", "Model(", "model", ")", ";\n    }\n\n    public static void read", "UserInfo(String ", "consId", ",String ", "startDateStr", ",String ", "endDateStr", ")", "{\n        ", "//表格数据sql 未写！", "\n    }\n    public void get", "JtableCenter()", "{}\n    @Override\n    public void run", "()", " {\n        ", "while", " (", "true", ") {\n            ", "if", " (refreshTime != ", "0", ") {\n                ", "try", " {\n                    ", "//更新数据", "\n                    get", "JtableCenter()", ";\n                    ", "//刷新频率", "\n                    ", "Thread", ".", "sleep(refreshTime", " * ", "1000", ");\n                } catch (Exception e) {\n                    e.print", "StackTrace()", ";\n                    logger.error(", "\"定时刷新出错\"", ");\n                }\n            } ", "else", " {\n                ", "try", " {\n                    ", "Thread", ".", "sleep(", "1", ");\n                } catch (Exception e) {\n                    e.print", "StackTrace()", ";\n                    logger.error(", "\"休眠出错\"", ");\n                }\n            }\n        }\n    }\n        }\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;17行的for循环&amp;#xff0c;你的结束条件在哪&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["后缀表达式无输出结果", ["题目描述", "所谓后缀表达式是指这样的一个表达式：式中不再引用括号，运算符号放在两个运算对象之后，所有计算按运算符号出现的顺序，严格地由左而右新进行（不用考虑运算符的优先级）。", "\n", "如：3*(5-2)+7}3*(5-2)+7 对应的后缀表达式为：3.5.2.-*7.+@  在该式中，@ 为表达式的结束符号。. 为操作数的结束符号。", "\n", "输入格式", "输入一行一个字符串 ss，表示后缀表达式。", "\n", "输出格式", "输出一个整数，表示表达式的值。", "\n", "输入输出样例", "输入", "3.5.2.-*7.+@", "输出", "16", "\n", "\n", "#include <bits/stdc++.h>", "\n", "using", " namespace std;\n", "int", " main()\n{\n    stack<", "int", "> nub_stack;\n    string s;\n    ", "int", " ", "temp", "[", "12", "];     //临时数组存放数据 \n    cin>>s;\n    ", "int", " j;\n    ", "int", " num;\n    ", "for", "(", "int", " i = ", "0", ";i < s.size();i ++ ){\n        ", "if", "(s[i] >= ", "'0'", " && s[i] <= ", "'9'", "){\n            j = ", "0", ";\n            ", "temp", "[j] = s[i];\n            j++;\n            ", "for", "(", "int", " p = i+", "1", "; ;p ++)\n            {\n                ", "if", "(s[p] != ", "'.'", "){\n                    ", "temp", "[j]= s[p];\n                    j++;                    \n                }\n                  \n                ", "else", "{\n                    ", "int", " t = ", "0", ";\n                    ", "int", " nu;\n                    ", "for", "(", "int", " q = j - ", "1", ";q >= ", "0", "; q ", "--){", "\n                        nu += ", "temp", "[q] * pow(", "10", ",t);\n                        t++; \n                    }\n                    nub_stack.push(nu);    \n                }    \n            }\n        }\n        ", "int", " m,n;\n        m = nub_stack.top();\n        nub_stack.pop();\n        n = nub_stack.top();\n        ", "if", "(s[i] == ", "'*'", ")\n            num = m * n;\n        ", "if", "(s[i] == ", "'+'", ")\n            num = m + n;\n        ", "if", "(s[i] == ", "'-'", ")\n            num = n - m;\n        ", "if", "(s[i] == ", "'/'", ")\n            num = n / m;    \n    } \n    cout<<num;\n}\n", "\n", "结果没有输出，不知道哪里出错了"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;看了下源码&amp;#xff0c;基本你这配置没啥问题&amp;#xff0c;org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl#loadUserByUsername方法中dbAuths就是你的角色信息了&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/427342993946124.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;把代码搞个压缩包丢网盘看看&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["Springboot简单整合Security基于数据库默认jdbcAuthentication方法，登录上来了，全部权限无法访问，如何解决？", ["数据库很简单，一个记录", "\n", "\n", "SecurityConfig继承WebSecurityConfigurerAdapter重写了认证和授权的方法", "\n", "完整代码：", "\n", "@EnableWebSecurity", "\npublic ", "class", " ", "SecurityConfig", " ", "extends", " ", "WebSecurityConfigurerAdapter", " ", "{\n\n    ", "@Override", "\n    ", "protected", " void configure(", "HttpSecurity", " http) ", "throws", " ", "Exception", " {\n        ", "//首页进入系统所有人可以访问，功能页只有对应有权限的人才能访问", "\n        ", "//请求授权的规则~", "\n        ", "//链式编程", "\n        ", "//授权", "\n        ", "/**\n         * HTTP请求处理\n         */", "\n        http\n                .authorizeRequests()\n                .antMatchers(", "\"/\"", ").permitAll()\n                .antMatchers(", "\"/user/vip\"", ").hasAnyRole(", "\"vip\"", ",", "\"svip\"", ",", "\"ssvip\"", ")              ", "//给角色授权", "\n                .antMatchers(", "\"/user/svip\"", ").hasAnyRole(", "\"svip\"", ",", "\"ssvip\"", ")\n                .antMatchers(", "\"/user/**\"", ").hasRole(", "\"ssvip\"", ")\n            .and()\n            .csrf().disable();\n\n        ", "//没有权限默认到登录页面。需要开启登录页面", "\n        http.formLogin();\n    }\n\n    ", "@Autowired", "\n    ", "DataSource", " dataSource;\n    ", "/**\n     * 授权验证服务\n     */", "\n    ", "//认证", "\n    ", "@Override", "\n    ", "protected", " void configure(", "AuthenticationManagerBuilder", " auth) ", "throws", " ", "Exception", " {\n        ", "//super.configure(auth);", "\n        ", "//内存中", "\n        ", "/*auth.inMemoryAuthentication().passwordEncoder(NoOpPasswordEncoder.getInstance())\n                .withUser(\"simm\").password(\"123\").roles(\"USER\").and()\n                .withUser(\"admin\").password(\"admin\").roles(\"USER\",\"ADMIN\");*/", "\n       ", "/* auth\n                .inMemoryAuthentication()\n                .passwordEncoder(new BCryptPasswordEncoder())//在此处应用自定义PasswordEncoder\n                .withUser(\"root\")\n                .password(new BCryptPasswordEncoder().encode(\"root\"))\n                .roles(\"ssvip\")\n                .and()\n                .withUser(\"user\")\n                .password(new BCryptPasswordEncoder().encode(\"user\"))\n                .roles(\"vip\");\n*/", "\n        ", "//默认", "\n        auth.jdbcAuthentication()\n                .dataSource(dataSource)\n                .usersByUsernameQuery(", "\"select user_name,user_password, 'true' as enabled from users WHERE user_name=?\"", ")  ", "//认证", "\n                .authoritiesByUsernameQuery(", "\"select user_name,user_role from users where user_name=?\"", ")     ", "//授权", "\n                .passwordEncoder(", "new", " ", "BCryptPasswordEncoder", "());\n    }\n\n    ", "@Bean", "\n     public  ", "BCryptPasswordEncoder", " ", "BCryptPasswordEncoder", "(){\n        ", "return", " ", "new", " ", "BCryptPasswordEncoder", "();\n     }\n}\n", "\n", "我先做了一次内存认证，没有问题，认证和权限都可以成功，这里的权限是优先级，ssvip>svip>vip", "\n", "前端页面", "\n", "\n", "点击去就是相应的内容页，这样的，三个页面，body都是一句话：", "\n", "\n", "但是使用了基于数据库认证，可以登录上，但是点哪个都没有权限：", "\n", "\n", "==虚心求解=="]], "Tag": "程序设计"}
{"Answer": "https://blog.csdn.net/zhanghuaichao/article/details/49902431?utm_source=blogxgwz4", "Konwledge_Point": "优先级", "Question": ["想用stm32开发板的485发送modbus，输出不对，怎么解决，为什么", ["我是根据硬石开发板的YSF4_HAL_Modbus_002. 基于RS232&RS485的Modbus主机例程改的程序", "\n\n", "因为要发送", "\n我就直接改变bsp_mb_host.c文件中", "\n\n", "void MB_ReadHoldingReg_03H()\n{\n    uint16_t TxCount = 0;\n    uint16_t crc = 0;\n    Tx_Buf[TxCount++] = 0x01;           /* 从站地址 */\n    Tx_Buf[TxCount++] = 0x03;             /* 功能码 */   \n    Tx_Buf[TxCount++] = 0x00;     /* 寄存器地址 高字节 */\n    Tx_Buf[TxCount++] = 0x00;             /* 寄存器地址 低字节 */\n    Tx_Buf[TxCount++] = 0x00;     /* 寄存器(16bits)个数 高字节 */\n    Tx_Buf[TxCount++] = 0x02;  \n\n    crc = MB_CRC16((uint8_t*)&Tx_Buf,TxCount);\n\n    Tx_Buf[TxCount++] = crc>>8;           /* crc 高字节 */\n  Tx_Buf[TxCount++] = crc;            /* crc 低字节 */\n\n  UART_Tx((uint8_t *)&Tx_Buf,TxCount);\n}\n\n", "\n\n", "的程序的值，希望能通过485串口发送出0x01,0x03,0x00,0x00,0x00,0x02,0xc4,0x0b", "\n但是我将485通过转接口直接接到电脑上通过助手查看数值时发现发送的数据不对。", "\n主函数", "\n\n", "int main(void)\n{\n  /* 复位所有外设，初始化Flash接口和系统滴答定时器 */\n  HAL_Init();\n  /* 配置系统时钟 */\n  SystemClock_Config();\n  /* 初始化串口并配置串口中断优先级 */\n  MX_DEBUG_USART_Init(); \n  /* 定时器初始化 */\n  GENERAL_TIMx_Init();\n  /* LED初始化 */\n // LED_GPIO_Init();\n  /* 使能定时器中断 */\n  __HAL_TIM_ENABLE_IT(&htimx,TIM_IT_CC1);\n  __HAL_TIM_ENABLE_IT(&htimx,TIM_IT_UPDATE);\n  /* 设置字符间超时时间1.5个字符的时间 */\n  __HAL_TIM_SET_COMPARE(&htimx,TIM_CHANNEL_1,(uint16_t)OVERTIME_15CHAR);\n  /* 设置帧间超时时间3.5个字符的时间 */\n  __HAL_TIM_SET_AUTORELOAD(&htimx,(uint16_t)OVERTIME_35CHAR); // 设置帧内间隔时间\n\n  Rx_MSG = MSG_IDLE;\n  /* 无限循环 */\n  while (1)\n  {\n //   if(KEY4_StateRead()==KEY_DOWN)\n  //  {\n    //  Rx_MSG = MSG_IDLE;\n      /* 读取reg_addr 的寄存器状态 */\n      MB_ReadHoldingReg_03H();\n      /* 等待从机响应 */\n      WaitTimeOut(); //等待时间大概为200ms\n  //  }\n\n  }\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-built_in\"&gt;UINT64&lt;/span&gt; 读取Unicode字符串(INT pid, &lt;span class=\"hljs-built_in\"&gt;UINT_PTR&lt;/span&gt; 地址, std::wstring&amp;amp; 结果) {\n    DWORD dwRetSize &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;UINT64&lt;/span&gt; tmp &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n\n    &lt;span class=\"hljs-comment\"&gt;// 输入缓冲区的第一个元素是PID&amp;#xff0c;第二个元素是要读取的地址&amp;#xff0c;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;// 第三个元素是要读取的字符串的长度&amp;#xff08;以字节为单位&amp;#xff09;&amp;#xff0c;第四个元素是0&amp;#xff0c;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;// 这样驱动程序就知道要读取的是Unicode字符串。&lt;/span&gt;\n    std::vector&amp;lt;&lt;span class=\"hljs-built_in\"&gt;UINT64&lt;/span&gt;&amp;gt; 输入缓冲区 &amp;#61; { pid, 地址, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; };\n\n    &lt;span class=\"hljs-comment\"&gt;// 返回缓冲区是一个用来存放字符串的缓冲区&amp;#xff0c;大小为4096个字符。&lt;/span&gt;\n    std::vector&amp;lt;&lt;span class=\"hljs-keyword\"&gt;wchar_t&lt;/span&gt;&amp;gt; 返回缓冲区(&lt;span class=\"hljs-number\"&gt;4096&lt;/span&gt;);\n\n    &lt;span class=\"hljs-comment\"&gt;// 调用DeviceIoControl函数来读取Unicode字符串。&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;BOOL&lt;/span&gt; bResult &amp;#61; DeviceIoControl(\n        DeviceHandle,\n        控制码,\n        输入缓冲区.data(),\n        &lt;span class=\"hljs-keyword\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;UINT64&lt;/span&gt;) * 输入缓冲区.size(),\n        返回缓冲区.data(),\n        &lt;span class=\"hljs-keyword\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;wchar_t&lt;/span&gt;) * 返回缓冲区.size(),\n        &amp;amp;dwRetSize,\n        &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;\n    );\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (bResult &amp;amp;&amp;amp; dwRetSize &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        &lt;span class=\"hljs-comment\"&gt;// 如果读取成功&amp;#xff0c;将结果保存到wstring对象中&amp;#xff0c;并返回字符串的长度。&lt;/span&gt;\n        结果.assign(返回缓冲区.data(), dwRetSize / &lt;span class=\"hljs-keyword\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;wchar_t&lt;/span&gt;));\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; 结果.size();\n    } &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        &lt;span class=\"hljs-comment\"&gt;// 如果读取失败&amp;#xff0c;返回0。&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["如何修改下面的驱动读整数的代码，读取这种字符串并用printf打印", ["我会用这些代码读整数 单双浮点，这种字符串就把我整不明白了", "\n", "\n", "\nNTSTATUS ", "KReadProcessMemory(IN PEPROCESS Process, IN PVOID Address, IN UINT32 Length, IN OUT PVOID Buffer)", "\n{\n    NTSTATUS ret_status = ", "0", ";\n    KAPC_STATE apc_state;\n    ", "RtlZeroMemory(&", "apc_state", ", ", "sizeof", "(KAPC_STATE)", ");\n    \n    PVOID tmpBuf_Kernel = ", "ExAllocatePool(NonPagedPool, Length)", ";\n\n\n    ", "KeStackAttachProcess((PVOID)", "Process, &apc_state);\n\n    \n    BOOLEAN dwRet = ", "MmIsAddressValid(Address)", ";\n\n    ", "if", " (dwRet)\n    {\n        \n        ", "KdPrint((", "\"yjx[sys64] RtlCopyMemory(Address=%p, Buffer=%p, Length=%d);\\r\\n\"", ", Address, Buffer, Length)", ");\n        BOOLEAN isOk = ", "IsOkWritePtr(Address)", ";\n        \n        ", "if", " (isOk)\n        {\n            __try\n            {\n                ", "//可以访问", "\n                ", "RtlCopyMemory(", "tmpBuf_Kernel", ", Address, Length)", "; ", "// c/c++ memcpy ", "\n                ret_status = STATUS_SUCCESS;", "//表示复制成功", "\n            }\n            __except (", "1", ")\n            {\n                ret_status = STATUS_UNSUCCESSFUL; ", "//不可访问", "\n                ", "__debugbreak()", ";\n                ", "KdPrint((", "\"yjx:sys64:Error line=%d\\n\"", ", ", "__LINE__", ")", ");\n            }\n        }\n        ", "else", "\n        {\n            ret_status = STATUS_UNSUCCESSFUL; ", "//不可访问", "\n        }\n\n    }\n    ", "else", "\n    {\n        ", "KdPrint((", "\"yjx:sys64:Error line=%d\\n\"", ", ", "__LINE__", ")", ");\n        ret_status = STATUS_UNSUCCESSFUL;\n    }\n    \n    ", "KeUnstackDetachProcess(&", "apc_state", ")", ";\n    \n    ", "RtlCopyMemory(Buffer, ", "tmpBuf_Kernel", ", Length)", ";\n    \n    ", "ExFreePool(", "tmpBuf_Kernel", ")", ";\n    return ret_status;\n}\n", "//dwPid为目标进程id", "\n", "//lpBaseAddress 目标进程地址", "\n\n", "//lpBuffer 当前进程地址 1", "\n", "//内核内存地址 当前进程地址 2", "\nNTSTATUS ", "ReadProcessMemoryForPid(UINT32 ", "dwPid", ", PVOID ", "pBase", ", PVOID ", "lpBuffer", ", UINT32 ", "nSize", ")", "\n{\n    NTSTATUS retstatus = STATUS_SUCCESS;\n    ", "//根据pid获取PEPROCESS OpenProcess", "\n    PEPROCESS Seleted_pEPROCESS = NULL;\n    ", "KdPrint((", "\"yjx:sys64  pid=%d pBase=%p  %s 行号=%d\\n\"", ", ", "dwPid", ", ", "pBase", ", ", "__FUNCDNAME__", ", ", "__LINE__", ")", ");\n\n    retstatus = ", "PsLookupProcessByProcessId((PVOID)", "(UINT_PTR)(dwPid), &Seleted_pEPROCESS);\n    ", "if", " (retstatus", " == ", "STATUS_SUCCESS)\n    {\n\n        retstatus = ", "KReadProcessMemory(Seleted_pEPROCESS, (PVOID)", "pBase, nSize, lpBuffer);\n        ", "ObDereferenceObject(Seleted_pEPROCESS)", ";\n        ", "//return retstatus;", "\n    }\n    ", "else", "\n    {\n        ", "KdPrint((", "\"yjx sys64 PsLookupProcessByProcessId Fail...%s line=%d\\n\"", ", ", "__FUNCDNAME__", ", ", "__LINE__", ")", ");\n        ", "//return STATUS_UNSUCCESSFUL;", "\n    }\n\n    return retstatus;", "// STATUS_UNSUCCESSFUL;", "\n\n}\n", "\n", "void IRP_IO_通过PID读内存", "1", "(PIRP pirp)\n{\n    PIO_STACK_LOCATION irpStack = IoGetCurrentIrpStackLocation(pirp); ", "//", "获取应用层传来的参数\n    UINT64* 缓冲区 = (UINT64*)(pirp->AssociatedIrp.SystemBuffer);\n    KdPrint((", "\"yjx:%s 行号%d\\n\"", ", __FUNCDNAME__, __LINE__));\n    ", "if", " (缓冲区)\n    {\n        ", "//", "\n        ", "//i", "nt*p = (int*)缓冲区;\n        UINT32 PID = (UINT32)(UINT64)缓冲区[", "0", "]; ", "//", "传入数据\n        \n        PVOID pBase = (PVOID)((UINT64)缓冲区[", "1", "] ); ", "//", "传入数据\n        ", "//", "PVOID lpBuffer = (PVOID)(UINT64)缓冲区[", "2", "]; ", "//", "传入数据\n        UINT64 nSize = (UINT64)缓冲区[", "3", "]; ", "//", "传入数据\n\n\n        UINT32 ReadSize = ReadProcessMemoryForPid(PID, pBase, 缓冲区, nSize);\n\n        ReadSize;\n        pirp->IoStatus.Status = STATUS_SUCCESS;\n        pirp->IoStatus.Information = nSize;", "//", "返回给DeviceIoControl中的 倒数第二个参数lpBytesReturned\n        IoCompleteRequest(pirp, IO_NO_INCREMENT);", "//", "调用方已完成所有I/O请求处理操作 并且不增加优先级 \n    }\n    irpStack;\n}\n\n", "\n", "这是读", "64", "位整数的代码 怎么改成读unicode字符串\nUINT64 PID读内存地址x64(INT pid, UINT_PTR 地址)\n{\n\n\n    DWORD dwRetSize = ", "0", ";", "//", "返回字节数\n\n\n    ULONG64 tmp = ", "0", ";", "//", "存放读取的数据\n\n    UINT64 输入缓冲区[", "4", "] = { pid,地址,", "0", ",", "8", " };\n\n\n    DeviceIoControl(\n        DeviceHandle,", "//", "CreateFile打开驱动设备 返回的句柄\n        通过PID读整数", "1", ",", "//", "控制码 CTL_CODE\n\n        &输入缓冲区,", "//", "输入缓冲区指针\n        ", "8", " * ", "4", ",", "//", "输入缓冲区大小\n\n        &tmp,", "//", "返回缓冲区\n        sizeof(tmp),", "//", "返回缓冲区大小\n\n        &dwRetSize, ", "//", "返回字节数\n        NULL);\n\n    return tmp;\n\n}\n"]], "Tag": "程序设计"}
{"Answer": "ORDER BY 字段 nulls last  非MSSQL的语法。\r\n\r\nSELECT * FROM (\r\nSELECT *,\r\n\tCASE WHEN 排序在前的条件 THEN 1  --排序在前的条件\r\n\t WHEN 排序在二的条件 THEN 2 --\t排序在二的条件\t\r\n\t WHEN 排序在二的条件 THEN 3 --\t排序在二的条件\t\r\n\tEND px\r\nFROM RM_RUL_Results )\r\nORDER BY px ASC", "Konwledge_Point": "优先级", "Question": ["sql server需要把查询结果中的为null的数据放在最后，且为null的字段越少，该数据就越往前", ["在开发过程中，我碰到了一个数据排序的问题，大致情况是在某一张数据表中存在一些数据是空值的情况，显示的时候会比较丑，如图", "\n\n", "因此，我想要对结果进行排序处理，让“不可用设备”、“随机设备”、“敏感性分析”这三个字段中非空的数据优先显示，详细的逻辑可以分解为：", "\n\n", "1.“不可用设备”、“随机设备”、“敏感性分析”都为非空的数据最优先显示", "\n\n", "2.存在两个字段非空，一个字段为空的情形：", "\n\n", "     ①.“不可用设备”、“随机设备”非空，“敏感性分析”为空最优先显示\n     ②.“不可用设备”、“敏感性分析”非空，“随机设备”为空次之\n     ③.“随机设备”、“敏感性分析”非空，“不可用设备”为空最后显示\n", "\n\n", "3.存在一个字段非空，两个字段为空的情形,也分三种情况:", "\n\n", "     ①.“不可用设备非空最优先显示\n     ②.“随机设备”非空次之\n     ③.“敏感性分析”非空最后显示\n", "\n\n", "4.三个字段都为空最后显示", "\n\n", "在这种前提之下，按照字符串排序，那么sql应该怎么写呢", "\n\n", "附上我写的代码，我试过了很多种方法，始终无法实现这种效果，有没有大神能教教我：", "\n\n", "1.SELECT * FROM RM_RUL_Results WHERE 1=1", "\n      ORDER BY components nulls last, random_components nulls last, env nulls last", "\n\n", "我在百度找到的其中一种方法，但是这种方法存在语法错误", "\n\n", "\n\n", "2.SELECT * FROM RM_RUL_Results WHERE 1=1", "\norder by case when components is null then 'zzzzzzzzz' else components end,", "\n            case when random_components is null then 'zzzzzzzzz' else random_components end,", "\n            case when env is null then 'zzzzzzzzz' else env end", "\n\n", "通过case when可以实现对第一个字段“不可用设备”（components）的排序，但是因为优先级的关系，随机设备（random_components）和敏感性分析（env）的空字段会出现在前面", "\n\n", "\n\n", "实在无奈了，有没有大神知道z'm'jie'jue"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;class拼错了&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-html\"&gt; &amp;lt;&lt;span class=\"hljs-keyword\"&gt;div&lt;/span&gt; calss&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;inner&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span class=\"hljs-keyword\"&gt;div&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "优先级", "Question": ["为什么CSS效果无法正常显示？", ["CSS代码", "\n", "/* 引入字体库 */", "\n", "@import", " url(", "'https://fonts.googleapis.com/css?family=Montserrat:300,400,700'", ");\n\n", "/* 对于标签样式的调整 */", "\n* {\n    ", "padding", ":", "0", ";\n    ", "margin", ":", "0", ";\n    ", "position", ":relative;\n}\n\n", "/* 主体的背景和字体 */", "\n", "body", " {\n    ", "background", ": ", "#fff5df", ";\n    ", "font-family", ": ", "'Mongolian Baiti'", ",sans-serif;\n}\n\n", "/* 父，对整体进行调整 */", "\n", ".all", "{\n    ", "position", ":fixed;\n    ", "top", ":", "0", ";\n    ", "left", ":", "0", ";\n    ", "width", ":", "100%", ";\n    ", "height", ":", "100%", ";\n    ", "transform", ":", "scale", "(.", "75", ");\n}\n", "/* 子*/", "\n", ".bowl", "{\n    ", "width", ":", "250px", ";\n    ", "height", ":", "250px", ";\n    ", "border", ":", "5px", " solid ", "#fff", ";\n    ", "border-radius", ":", "50%", ";\n    ", "/* 注意，calc()运算符前后都要保留一个空格 */", "\n    ", "/* 用于动态计算长度值，适用于流体布局上 */", "\n    ", "/* 支持加减乘除运算，数学运算优先级规则 */", "\n    ", "top", ":", "calc", "(", "50%", " - ", "125px", ");\n    ", "left", ":", "calc", "(", "50%", " - ", "125px", ");\n    ", "background", ":", "rgba", "(", "90", ",", "201", ",", "226", ",", "0.3", ");\n}\n", "/* 容器的阴影 */", "\n", ".bowl", "::before", "{\n    ", "content", ":", "\"\"", ";\n    ", "position", ":absolute;\n    ", "bottom", ":-", "25px", ";\n    ", "left", ": ", "50px", ";\n    ", "width", ": ", "150px", ";\n    ", "height", ": ", "50px", ";\n    ", "border-radius", ":", "50%", ";\n    ", "background", ":", "rgba", "(", "0", ",", "0", ",", "0", ",", "0.15", ");\n}\n\n", ".bowl", "::after", "{\n    ", "content", ":", "\"\"", ";\n    ", "position", ":absolute;\n    ", "top", ":", "10px", ";\n    ", "left", ":", "calc", "(", "25%", " - ", "3px", ");\n    ", "width", ":", "50%", ";\n    ", "height", ":", "40px", ";\n    ", "border", ":", "3px", " solid ", "#fff", ";\n    ", "border-radius", ": ", "50%", ";\n}\n\n", ".bowl", " ", ".water", " {\n\n}\n\n", "/* 以下内容无法正常显示 */", "\n", ".bowl", " ", ".water", " ", ".inner", "{\n    ", "position", ":absolute;\n    ", "width", ": ", "225px", ";\n    ", "height", ": ", "225px", ";\n    ", "border-radius", ":", "50%", ";\n    ", "bottom", ":", "0", ";\n    ", "background", ":", "#4e99ce", ";\n}\n", "\n", "HTML代码", "\n", "<!DOCTYPE ", "html", ">", "\n\n", "<", "html", " ", "lang", "=", "\"en\"", ">", "\n", "<", "head", ">", "\n    ", "<", "meta", " ", "charset", "=", "\"utf-8\"", " />", "\n    ", "<", "title", ">", "加载页动画", "</", "title", ">", "\n    ", "<", "link", " ", "rel", "=", "\"stylesheet\"", " ", "href", "=", "\"style.css\"", " />", "\n", "</", "head", ">", "\n", "<", "body", ">", "\n", "<", "div", " ", "class", "=", "\"all\"", ">", "\n ", "<!--容器部分-->", "\n    ", "<", "div", " ", "class", "=", "\"bowl\"", ">", "\n        ", "<!--容器中的水-->", "\n        ", "<", "div", " ", "class", "=", "\"water\"", ">", "\n            ", "<", "div", " ", "calss", "=", "\"inner\"", ">", "</", "div", ">", "\n        ", "</", "div", ">", "\n    ", "</", "div", ">", "\n", "</", "div", ">", "\n", "</", "body", ">", "\n", "</", "html", ">", "\n", "\n", "预期效果", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;一个是 int/int 一个是 int/double呀 int/int结果还是 int没有小数位的&amp;#xff0c;int/double结果是double  9/5&amp;#61;1     9/5.0&amp;#61;1.8&lt;br /&gt;(9/5.0)乘37.6&amp;#43;32&amp;#61;1.5乘37.6&amp;#43;32&amp;#61;99.68&lt;br /&gt;(9/5)乘37.6&amp;#43;32&amp;#61;1乘37.6&amp;#43;32&amp;#61;69.6&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/503364993766144.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/14018499376614.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["java变量转换问题", ["问题遇到的现象和发生背景", "\n", "java问题，关于变量转换？", "\n", "\n", "\n", "p1，第8行代码，我给常量整数5定义成了double型的5.0，进行第13行的运算得出的结果", "为什么和", "p2，第8行代码，我给常量整数5定义成了int型的5，进行第13行的运算，得出的结果不同？", "为什么两个代码的运行结果不一样", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "import", " java.util.Scanner;\n\n", "class", " ", "Temperature", " {\n    ", "public", " ", "static", " ", "void", " ", "main", "(String[] args)", " {\n        ", "double", " c;", "//摄氏度", "\n        ", "double", " f;", "//华氏温度", "\n        ", "final", " ", "int", " ", "I1", " ", "=", " ", "9", ";\n        ", "final", " ", "double", " ", "D2", " ", "=", " ", "5.0", ";\n        ", "final", " ", "int", " ", "I3", " ", "=", " ", "32", ";", "//转换公式 F = (9/5)*C+32", "\n        ", "Scanner", " ", "c1", " ", "=", " ", "new", " ", "Scanner", "(System.in);\n        System.out.print(", "\"请输入摄氏温度c:\"", ");\n        c =  c1.nextDouble();\n        f = (I1/D2)*c+I3;\n        System.out.print(", "\"摄氏温度\"", "+c+", "\"的华氏温度为：\"", "+f);\n    }\n}\n\n\n", "\n", "import", " java.util.Scanner;\n\n", "class", " ", "Temperature2", " {\n    ", "public", " ", "static", " ", "void", " ", "main", "(String[] args)", " {\n        ", "double", " c;", "//摄氏度", "\n        ", "double", " f;", "//华氏温度", "\n        ", "final", " ", "int", " ", "I1", " ", "=", " ", "9", ";\n        ", "final", " ", "int", " ", "I2", " ", "=", " ", "5", ";\n        ", "final", " ", "int", " ", "I3", " ", "=", " ", "32", ";", "//转换公式 F = (9/5)*C+32", "\n        ", "Scanner", " ", "c1", " ", "=", " ", "new", " ", "Scanner", "(System.in);\n        System.out.print(", "\"请输入摄氏温度c:\"", ");\n        c =  c1.nextDouble();\n        f = (I1/I2)*c+I3;\n        System.out.print(", "\"摄氏温度\"", "+c+", "\"的华氏温度为：\"", "+f);\n    }\n}\n\n\n", "\n", "运行结果及报错内容", "\n", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我的思路如下", "(麻烦指正一下哪里想错了，或者遗漏了什么知识点", "根据运算符的优先级，p1，先算括号内的，int型11隐形转换为double型和D2运算，括号内的运算结果再与括号外的double型c运算，13隐形转换为double型运算，全部运算结束的结果为double型的，自动转换没有丢失数据精度", "p2，先算括号内的，int型11和int型12运算结果为int型，括号内的运算结果隐形转换为double型，再与括号外的double型c运算，13隐形转换为double型运算，全部运算结束的结果为double型的，自动转换没有丢失数据精度", "为什么两个代码的运行结果不一样", "\n", "我想要达到的结果", "\n", "知道运行结果不同的原因"]], "Tag": "程序设计"}
{"Answer": "是这样的，严重级别比你设置的高都会出来，总不可能忽略更严重的信息吧，log for java还是写properties文件比较好，这个xml看的懵逼.....，给你看下properties版的吧，应该很容易懂。\r\n#配置自定义日志，用于记录某个组件或事务,或层的的活动,范围越小优先级越高\r\n#非根记录器都继承于根记录器，也可以更改自身的一些样式或设置，下面的配置中分别设置了这个在两个类上的日志级别，严重性低于级别不会输出，高过级别都会输出\r\nlog4j.logger.com.controller.UserAccess = info  \r\nlog4j.logger.com.dao.UserDao = error\r\n\r\n#指定某个类的日志输出配置，单独保存到另一个日志文件中，避免混在根日志中难以查看\r\nlog4j.logger.com.dao.impl.UserDaoImpl = info,userimpl\r\n#additivity设置为false则子日志不会在父日志中输出,这个需要写在子配置的首行，因为配置文件的条目解析执行也是有先后顺序的\r\nlog4j.additivity.com.dao.impl.UserDaoImpl = false\r\nlog4j.appender.userimpl = org.apache.log4j.FileAppender\r\nlog4j.appender.userimpl.layout = org.apache.log4j.HTMLLayout\r\n#使用如${myweb.root}/WEB-INF/log/test.log则保存到相对路径\r\nlog4j.appender.userimpl.File = D:\\\\logs\\\\demo1\\\\sub\\\\dao.html\r\nlog4j.appender.userimpl.Append = true", "Konwledge_Point": "优先级", "Question": ["log4j2  配置分级别输出，但每个级别都包含其等级以上的所有级别信息", ["log4j2  配置分级别输出，但每个级别都包含其等级以上的所有级别信息，比如[info]包含[info,warn,error,fatal] 信息，麻烦高手看看！", "\n\n", "【这是测试类】", "\npackage com.zhangpan.cn;", "\n\n", "import org.apache.logging.log4j.LogManager;", "\nimport org.apache.logging.log4j.Logger;", "\n\n", "public class HelloWorld {", "\n    private static final Logger logger = LogManager.getLogger(HelloWorld.class);", "\n    public static void main(String[] args) {", "\n     String hello = \"Hello, World!\";", "\n        logger.trace(\"TRACE: \" + hello);", "\n        logger.debug(\"DEBUG: \" + hello);", "\n        logger.info(\"INFO: \" + hello);", "\n        logger.warn(\"WARN: \" + hello);", "\n        logger.error(\"ERROR: \" + hello);", "\n        logger.fatal(\"FATAL: \" + hello);", "\n    }", "\n\n", "}", "\n【log42配置】", "\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "\n\n\n\n\n\n\n\n", "\n    <!-- 定义日志目录变量  暂时不用-->", "c:/log", "test.log", "\n\n", "<!--定义所有的appender-->\n<Appenders>\n    <!-- 这个输出控制台的配置 -->\n    <Console name=\"Console\" target=\"SYSTEM_OUT\">\n         <!--输出日志的格式-->\n        <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level - %l - %msg%n\" />\n    </Console>\n\n    <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->\n    <!--<File name=\"log\" fileName=\"log/test.log\" append=\"false\">\n      <PatternLayout pattern=\"%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n\"/>\n    </File> -->\n\n\n    <!-- error -->  \n    <RollingFile name=\"RollingFileError\" fileName=\"${LOG_HOME}/test/error-${FILE_NAME}\"  \n        filePattern=\"${LOG_HOME}/test/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.${FILE_NAME}.gz\">\n        <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n        <PatternLayout pattern=\"[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n\"/>\n        <Policies> \n            <TimeBasedTriggeringPolicy/>\n            <SizeBasedTriggeringPolicy size=\"10 MB\"/>\n        </Policies>\n        <DefaultRolloverStrategy max=\"10\"/>\n    </RollingFile>\n\n\n    <!-- warn -->\n    <RollingFile name=\"RollingFileWarn\" fileName=\"${LOG_HOME}/test/warn-${FILE_NAME}\"  \n        filePattern=\"${LOG_HOME}/test/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.${FILE_NAME}.gz\">\n        <ThresholdFilter level=\"warn\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n        <PatternLayout pattern=\"[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n\"/>\n        <Policies> \n            <TimeBasedTriggeringPolicy/>\n            <SizeBasedTriggeringPolicy size=\"10 MB\"/>\n        </Policies>\n        <DefaultRolloverStrategy max=\"10\"/>\n    </RollingFile>\n\n    <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->\n     <RollingFile name=\"RollingFileInfo\" fileName=\"${LOG_HOME}/test/info-${FILE_NAME}\"  \n        filePattern=\"${LOG_HOME}/test/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.${FILE_NAME}.gz\">\n        <ThresholdFilter level=\"info\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n        <PatternLayout pattern=\"[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n\"/>\n        <Policies> \n            <TimeBasedTriggeringPolicy/>\n            <SizeBasedTriggeringPolicy size=\"10 MB\"/>\n        </Policies>\n        <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了10 -->\n        <DefaultRolloverStrategy max=\"10\"/>\n    </RollingFile>\n\n    <!-- all -->\n    <RollingFile name=\"AllBusinessFile\" fileName=\"${LOG_HOME}/test/all.log-${FILE_NAME}\"\n        filePattern=\"${LOG_HOME}/test/$${date:yyyy-MM}/all.log-%d{yyyy-MM-dd}-%i.${FILE_NAME}.gz\">\n         <ThresholdFilter level=\"all\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n        <PatternLayout\n            pattern=\"%d{yyyy-MM-dd HH:mm:ss,SSS} [%t] %5p [%C{1}:%L] - %m%n\" />\n        <Policies>\n            <TimeBasedTriggeringPolicy interval=\"1\" />\n            <SizeBasedTriggeringPolicy size=\"10 MB\" />\n        </Policies>\n        <DefaultRolloverStrategy>\n            <Delete basePath=\"${LOG_HOME}\" maxDepth=\"2\">\n                <IfFileName glob=\"*/all.log\">\n                    <IfLastModified age=\"30d\">\n                        <IfAny>\n                            <IfAccumulatedFileSize exceeds=\"10 GB\" />\n                        </IfAny>\n                    </IfLastModified>\n                </IfFileName>\n            </Delete>\n        </DefaultRolloverStrategy>\n    </RollingFile>\n\n</Appenders>\n<Loggers>\n    <!--过滤掉Spring和Hibernate的一些无用的debug信息-->\n    <root level=\"info\">\n        <AppenderRef ref=\"Console\" />\n        <AppenderRef ref=\"RollingFileInfo\" />\n        <AppenderRef ref=\"RollingFileWarn\" />\n        <AppenderRef ref=\"RollingFileError\" />\n        <AppenderRef ref=\"AllBusinessFile\" />\n    </root>\n</Loggers>\n", "\n\n", "\n\n", "\n", "\n\n", "【控制台结果】", "\n\n", " 16:16:44.235 [main] INFO  - com.zhangpan.cn.HelloWorld.main(HelloWorld.java:12) - INFO: Hello, World!\n16:16:44.240 [main] WARN  - com.zhangpan.cn.HelloWorld.main(HelloWorld.java:13) - WARN: Hello, World!\n16:16:44.241 [main] ERROR - com.zhangpan.cn.HelloWorld.main(HelloWorld.java:14) - ERROR: Hello, World!\n16:16:44.241 [main] FATAL - com.zhangpan.cn.HelloWorld.main(HelloWorld.java:15) - FATAL: Hello, World!\n", "\n\n", "【输出日志文件】【这里有点问题】", "\n\n", "\n", "\n\n", "【info级别文件】", "\n【error级别文件】"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1.执行顺序为&amp;#xff1a;not&amp;gt;and&amp;gt;or&lt;br /&gt;2.题主写的sql第一段意思变成了&amp;#xff1a;where id相等和部门名字叫sales&amp;#xff0c;或者部门名字叫IT的即可;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   第二段sql是id相等且部门名在sales、IT中。&lt;/span&gt;&lt;br /&gt;&lt;strong&gt;题主理解下这两个意思是不是完全不一样&lt;/strong&gt;&lt;br /&gt;更改思路&amp;#xff1a;第一段sql中把and后的or条件括号起来即可&amp;#xff0c;括号具有优先级作用&amp;#xff0c;先执行or条件&amp;#xff0c;再执行and条件。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["mysql or和in的执行结果不一样", ["问题遇到的现象和发生背景", "\n", "刚学mysql 做题发现or和in执行后的结果不一样，一个是141条记录一个是39条记录，141条的执行结果有很多一个id对应多份工作名的，各位可以帮我看下这个问题的原因吗?", "\n", "问题相关代码，请勿粘贴截图", "\n", "9. 查询部门名为 Sales 或 IT 的员工信息", "\n", "SELECT employee_id,last_name,department_name", "FROM employees e,departments d", "WHERE e.department_id = d.", "department_id", "AND d.", "department_name", " = 'Sales'", "OR  d.", "department_name", " = 'IT';", "#141条记录", "SELECT employee_id,last_name,department_name", "FROM employees e,departments d", "WHERE e.department_id = d.", "department_id", "AND d.", "department_name", " IN ('Sales','IT');", "#39条记录", "\n", "运行结果及报错内容", "\n", "运行结果1：", "100    King    IT", "101    Kochhar    IT", "102    De Haan    IT", "103    Hunold    IT", "104    Ernst    IT", "105    Austin    IT", "106    Pataballa    IT", "107    Lorentz    IT", "108    Greenberg    IT", "109    Faviet    IT", "110    Chen    IT", "111    Sciarra    IT", "112    Urman    IT", "113    Popp    IT", "114    Raphaely    IT", "115    Khoo    IT", "116    Baida    IT", "117    Tobias    IT", "118    Himuro    IT", "119    Colmenares    IT", "120    Weiss    IT", "121    Fripp    IT", "122    Kaufling    IT", "123    Vollman    IT", "124    Mourgos    IT", "125    Nayer    IT", "126    Mikkilineni    IT", "127    Landry    IT", "128    Markle    IT", "129    Bissot    IT", "130    Atkinson    IT", "131    Marlow    IT", "132    Olson    IT", "133    Mallin    IT", "134    Rogers    IT", "135    Gee    IT", "136    Philtanker    IT", "137    Ladwig    IT", "138    Stiles    IT", "139    Seo    IT", "140    Patel    IT", "141    Rajs    IT", "142    Davies    IT", "143    Matos    IT", "144    Vargas    IT", "145    Russell    IT", "145    Russell    Sales", "146    Partners    IT", "146    Partners    Sales", "147    Errazuriz    IT", "147    Errazuriz    Sales", "148    Cambrault    IT", "148    Cambrault    Sales", "149    Zlotkey    IT", "149    Zlotkey    Sales", "150    Tucker    IT", "150    Tucker    Sales", "151    Bernstein    IT", "151    Bernstein    Sales", "152    Hall    IT", "152    Hall    Sales", "153    Olsen    IT", "153    Olsen    Sales", "154    Cambrault    IT", "154    Cambrault    Sales", "155    Tuvault    IT", "155    Tuvault    Sales", "156    King    IT", "156    King    Sales", "157    Sully    IT", "157    Sully    Sales", "158    McEwen    IT", "158    McEwen    Sales", "159    Smith    IT", "159    Smith    Sales", "160    Doran    IT", "160    Doran    Sales", "161    Sewall    IT", "161    Sewall    Sales", "162    Vishney    IT", "162    Vishney    Sales", "163    Greene    IT", "163    Greene    Sales", "164    Marvins    IT", "164    Marvins    Sales", "165    Lee    IT", "165    Lee    Sales", "166    Ande    IT", "166    Ande    Sales", "167    Banda    IT", "167    Banda    Sales", "168    Ozer    IT", "168    Ozer    Sales", "169    Bloom    IT", "169    Bloom    Sales", "170    Fox    IT", "170    Fox    Sales", "171    Smith    IT", "171    Smith    Sales", "172    Bates    IT", "172    Bates    Sales", "173    Kumar    IT", "173    Kumar    Sales", "174    Abel    IT", "174    Abel    Sales", "175    Hutton    IT", "175    Hutton    Sales", "176    Taylor    IT", "176    Taylor    Sales", "177    Livingston    IT", "177    Livingston    Sales", "178    Grant    IT", "179    Johnson    IT", "179    Johnson    Sales", "180    Taylor    IT", "181    Fleaur    IT", "182    Sullivan    IT", "183    Geoni    IT", "184    Sarchand    IT", "185    Bull    IT", "186    Dellinger    IT", "187    Cabrio    IT", "188    Chung    IT", "189    Dilly    IT", "190    Gates    IT", "191    Perkins    IT", "192    Bell    IT", "193    Everett    IT", "194    McCain    IT", "195    Jones    IT", "196    Walsh    IT", "197    Feeney    IT", "198    OConnell    IT", "199    Grant    IT", "200    Whalen    IT", "201    Hartstein    IT", "202    Fay    IT", "203    Mavris    IT", "204    Baer    IT", "205    Higgins    IT", "206    Gietz    IT", "\n", "运行结果2：", "103    Hunold    IT", "104    Ernst    IT", "105    Austin    IT", "106    Pataballa    IT", "107    Lorentz    IT", "145    Russell    Sales", "146    Partners    Sales", "147    Errazuriz    Sales", "148    Cambrault    Sales", "149    Zlotkey    Sales", "150    Tucker    Sales", "151    Bernstein    Sales", "152    Hall    Sales", "153    Olsen    Sales", "154    Cambrault    Sales", "155    Tuvault    Sales", "156    King    Sales", "157    Sully    Sales", "158    McEwen    Sales", "159    Smith    Sales", "160    Doran    Sales", "161    Sewall    Sales", "162    Vishney    Sales", "163    Greene    Sales", "164    Marvins    Sales", "165    Lee    Sales", "166    Ande    Sales", "167    Banda    Sales", "168    Ozer    Sales", "169    Bloom    Sales", "170    Fox    Sales", "171    Smith    Sales", "172    Bates    Sales", "173    Kumar    Sales", "174    Abel    Sales", "175    Hutton    Sales", "176    Taylor    Sales", "177    Livingston    Sales", "179    Johnson    Sales", "\n", "我的解答思路和尝试过的方法", "\n", "看到百度好像and和or的执行优先级不一样，是因为这个原因吗？如果我就想在这个代码中同时使用or和and能不能实现呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;stu2&amp;#xff0c;stu3 是两个对象&amp;#xff08;Bean&amp;#xff09;,  只不过属性值是一样。你可以在注解里改一下 sname 注入的属性值&amp;#xff0c;比如将 “陈玉航” 改为 “陈玉航3” 再运行下代码试试。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["spring同时使用构造器和注解注入引发的属性冲突", ["\n这是applicationcontext.xml构造器的bean", "\n\n", "\n", "通过list注入到注解的list中去\n  <util:list id=\"list\">\n        <value>网络工程</value>\n        <value>计算机网络</value>\n        <value>Android</value>\n        <value>ASP.NET</value>\n    </util:list> \n\n构造器的bean\n<bean id=\"stu2\" class=\"com.cyh.Student\" >\n        <constructor-arg index=\"0\" value=\"105\"/>\n        <constructor-arg index=\"1\" value=\"陈玉航\"/>\n        <constructor-arg index=\"2\" value=\"计算机科学与技术\"/>\n        <constructor-arg index=\"3\" >\n            <list>\n                <value>\"Android课程\"</value>\n                <value>\"ASP.NET课程\"</value>\n                <value>\"SSM课程\"</value>\n                <value>\"网络工程\"</value>\n            </list>\n        </constructor-arg>\n    </bean>", "\n\n", "这是student.java文件", "\n\n", "\n", "@Component(\"stu3\")\npublic class Student {\n   @Value(\"105\")\n    private int sno;\n\n    @Value(\"陈玉航\")\n    private String sname;\n\n    @Value(\"计算机科学与技术\")\n    private String major;\n\n     @Value(\"#{list}\")\n    private List<String> required;", "\n\n", "Main测试方法", "\n\n", "\n", " public static void main(String[] args) {\n        ApplicationContext applicationContext=new ClassPathXmlApplicationContext(\"ApplicationContext.xml\");\n        //属性注入\n        System.out.println( applicationContext.getBean(\"stu1\"));\n       // 构造注入\n       System.out.println(applicationContext.getBean(\"stu2\"));\n        //注解\n        System.out.println(applicationContext.getBean(\"stu3\"));\n    }", "\n\n", "得到的结果是stu2的和stu3的数据一样", "\n\n", "\n", "Student{sno=105, sname='陈玉航', major='计算机科学与技术', required=[\"SSM课程\", \"网络工程\", \"Android课程\", \"ASP.NET课程\"]}\nStudent{sno=105, sname='陈玉航', major='计算机科学与技术', required=[网络工程, 计算机网络, Android, ASP.NET]}\nStudent{sno=105, sname='陈玉航', major='计算机科学与技术', required=[网络工程, 计算机网络, Android, ASP.NET]}", "\n\n", "（去掉tostring方法后发现stu2和stu3的地址是不一样的），这是老师发的实验报告，所以需要三种方法一起用，如果有优先级，为啥属性注入没有受影响，脑壳疼。。。求大神解答一下。跪谢。"]], "Tag": "程序设计"}
{"Answer": "//发送优先级 \r\n \r\nmail.Priority = MailPriority.High; //高，就有叹号\r\n MailPriority.Normal;//正常\r\nMailPriority.Low;//低", "Konwledge_Point": "优先级", "Question": ["C#发送邮件，邮件标题有问题", ["using System.Net.Mail; ", "\n ", "\n///  ", "\n ", "\n/// 发送邮件程序 ", "\n ", "\n///  ", "\n ", "\n/// 发送人邮件地址 ", "\n ", "\n/// 发送人显示名称 ", "\n ", "\n/// 发送给谁（邮件地址） ", "\n ", "\n/// 标题 ", "\n ", "\n/// 内容 ", "\n ", "\n/// 邮件登录名 ", "\n ", "\n/// 邮件密码 ", "\n ", "\n/// 邮件服务器 ", "\n ", "\n/// 附件 ", "\n ", "\n/// send ok ", "\n ", "\n/// 调用方法 SendMail(\"", "abc@126.com", "\", \"某某人\", \"", "cba@126.com", "\", \"你好\", \"我测试下邮件\", \"邮箱登录名\", \"邮箱密码\", \"smtp.126.com\", \"\"); ", "\n ", "\nprivate string SendMail(string from,string fromname,string to,string subject,string body,string username,string password,string server,string fujian) ", "\n ", "\n{ ", "\n ", "\ntry ", "\n ", "\n{ ", "\n ", "\n//邮件发送类 ", "\n ", "\nMailMessage mail = new MailMessage(); ", "\n ", "\n//是谁发送的邮件 ", "\n ", "\nmail.From = new MailAddress(from, fromname); ", "\n ", "\n//发送给谁 ", "\n ", "\nmail.To.Add(to); ", "\n ", "\n//标题 ", "\n ", "\nmail.Subject = subject; ", "\n ", "\n//内容编码 ", "\n ", "\nmail.BodyEncoding = Encoding.Default; ", "\n ", "\n//发送优先级 ", "\n ", "\nmail.Priority = MailPriority.High; ", "\n ", "\n//邮件内容 ", "\n ", "\nmail.Body = body; ", "\n ", "\n//是否HTML形式发送 ", "\n ", "\nmail.IsBodyHtml = true; ", "\n ", "\n//附件 ", "\n ", "\nif (fujian.Length > 0) ", "\n ", "\n{ ", "\n ", "\nmail.Attachments.Add(new Attachment(fujian)); ", "\n ", "\n} ", "\n ", "\n//邮件服务器和端口 ", "\n ", "\nSmtpClient smtp = new SmtpClient(server, 25); ", "\n ", "\nsmtp.UseDefaultCredentials = true; ", "\n ", "\n//指定发送方式 ", "\n ", "\nsmtp.DeliveryMethod = SmtpDeliveryMethod.Network; ", "\n ", "\n//指定登录名和密码 ", "\n ", "\nsmtp.Credentials = new System.Net.NetworkCredential(username, password); ", "\n ", "\n//超时时间 ", "\n ", "\nsmtp.Timeout = 10000; ", "\n ", "\nsmtp.Send(mail); ", "\n ", "\nreturn \"send ok\"; ", "\n ", "\n} ", "\n ", "\ncatch(Exception exp) ", "\n ", "\n{ ", "\n ", "\nreturn exp.Message; ", "\n ", "\n} ", "\n ", "\n\n", "}", "\n\n", "以上是本人在网上看到的一个例子，关于C#发送邮件的，但是这个方法执行成功后，", "\n收件箱里显示标题栏前有一个感叹号！这个是为什么呢？在哪里可以消除掉呢？"]], "Tag": "程序设计"}
{"Answer": "```\r\n  document.getElementById(\"header\").innerHTML=\"&lt;h1&gt;HTML4&lt;/h1&gt;\"\r\n```", "Konwledge_Point": "优先级", "Question": ["div+css,初学者用js获取某个内容显示的样式出问题", [" <!-- 关于样式层叠优先级的问题参考笔记，一般都是id选择器，\n        并且一般是后面的覆盖前面的样式 \n-->\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html lang=\"en\">\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\">\n        <title>HTML4</title>\n        <style>\n            body {\n              font-family: Verdana, sans-serif;\n              font-size: 0.8em;\n              background-color: white;\n            }\n            div#header, div#footer, div#content, div#post {\n                border: 1px solid grey;\n                margin: 5px;\n                margin-bottom: 15px;\n                padding: 8px;\n                background-color: white;\n            }\n            div#header, div#footer {color:white;\n                background-color:#444;\n                margin-bottom:5px;}\n            div#content {background-color: #ddd;}\n            div#menu ul  {margin: 0; padding: 0;}\n            div#menu ul li {display: inline; margin: 5px;}\n        </style>\n    </head>\n    <body>\n\n        <div id=\"header\">\n            <h1>Monday Times</h1>\n            <script>document.getElementById(\"header\").innerHTML=\"HTML4\"</script>\n            <!-- \n            ↑此处希望用JS处理header的内容，希望看到的结果是：\n            HTML4和之前的Monday Times是一样的样式，\n            但是显示出来并没有采用head规定的样式，\n            请问怎么做才可以显示相同的样式 \n            -->\n        </div>\n\n        <div id=\"menu\">\n            <ul>\n                <li>News</li>\n                <li>Sports</li>\n                <li>Weather</li>\n            </ul>\n        </div>\n\n        <div id=\"content\">\n            <h2>News Section</h2>\n            <div id=\"post\">\n                <h2>News Article</h2>\n                <p>Ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum.</p>\n                <p>Ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum.</p>\n                <p>Ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum.</p>\n            </div>\n\n            <div id=\"post\">\n                <h2>News Article</h2>\n                <p>Ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum.</p>\n                <p>Ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum.</p>\n                <p>Ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum.</p>\n            </div>\n\n        </div>\n\n        <div id=\"footer\">\n            <p>© 2014 Monday Times. All rights reserved.</p>\n        </div>\n\n    </body>\n</html>\n\n", "\n\n", "\n\n", "\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;这篇文章&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/hujyhfwfh2/article/details/90598427?utm_source&amp;#61;csdn_ai_ada_ask_robot\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;Java Swing桌面应用开发-组件-表格&amp;#xff08;JTable&amp;#xff09;-表格中增加数据&lt;/font&gt;&lt;/a&gt; 也许能够解决你的问题&amp;#xff0c;你可以看下&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "优先级", "Question": ["java Swing 怎么使用Jtable给表格添加排序功能，请看我代码帮我解答一下", ["\npackage com.chart.display.gf1;\n\nimport com.DB.HbaseGetTaskResultDb;\nimport com.javabean.ComboBoxBean;\nimport com.model.TaskResultDetail;\nimport com.util.*;\nimport org.apache.logging.log4j.Logger;\n\nimport javax.swing.*;\nimport javax.swing.table.DefaultTableModel;\nimport javax.swing.table.TableModel;\nimport javax.swing.table.TableRowSorter;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.*;\nimport java.util.List;\n\npublic ", "class", " GF_E_MP_DAY_READ implements Runnable {\n    ", "private", " final Logger logger = ", "LoggerUtil", ".", "get", "Logger(GF_E_MP_DAY_READ.", "class", ")", ";\n\n    ", "/**\n     * 表格\n     */", "\n    ", "private", " static JTable collectDateJTable = ", "new", " ", "JTable()", ";\n    ", "/**\n     * 表格数据\n     */", "\n    ", "private", " static Vector<Object> vData = ", "new", " Vector<Object>", "()", ";\n    ", "/**\n     * 表格列名\n     */", "\n    ", "private", " static Vector<Object> vName = ", "new", " Vector<Object>", "()", ";\n\n    ", "/**\n     * 表头\n     */", "\n    String jtableHeader = ", "\"日期,采集对象ID,正向有功总,正向有功尖,正向有功峰,正向有功平,正向有功谷,反向有功总,反向有功尖,反向有功峰,反向有功平,反向有功谷\"", ";", "//配置文件获取表头数据", "\n    ", "/**\n     * 显示日志类型集合\n     */", "\n    ", "private", " Vector<ComboBoxBean> refreshTypeBeans = ", "new", " Vector<ComboBoxBean>", "()", ";\n    ", "/**\n     * 任务标志集合\n     */", "\n    ", "private", " Vector<ComboBoxBean> taskFlagBeans = ", "new", " Vector<ComboBoxBean>", "()", ";\n    ", "/*k 优先级集合 */", "\n    ", "private", " Vector<ComboBoxBean> collectPriBeans = ", "new", " Vector<ComboBoxBean>", "()", ";\n   ", "/*** 显示条数集合 */", "\n    ", "private", " Vector<ComboBoxBean> refreshCountBeans = ", "new", " Vector<ComboBoxBean>", "()", "\n    ", "/**\n     * 是否换行集合\n     */", "\n    ", "private", " Vector<ComboBoxBean> isChangeLineBeans = ", "new", " Vector<ComboBoxBean>", "()", ";\n    ", "/**\n     * 任务配置ID集合\n     */", "\n    ", "private", " Vector<ComboBoxBean> taskConfigTypeBeans = ", "new", " Vector<ComboBoxBean>", "()", ";\n\n    ", "/** 显示日志类型集合 */", "\n    ", "private", " static String", "[]", "[]", "REFRESH_TYPE= ", "PropertiesUtil", ".", "get", "Values( ", "\"refreshType\"", ")", ";\n    ", "/** 任务标志 */", "\n    ", "private", " static String", "[]", "[]", "TASK_FLAG = ", "PropertiesUtil", ".", "get", "Values(", "\"taskPlag\"", ")", ";\n    ", "/** 任务优先级 */", "\n    ", "private", " static String", "[]", "[]", "COLLECT_PRI= ", "PropertiesUtil", ".", "get", "Values(", "\"collectPri\"", ")", ";\n    ", "/** 显示条数集合*/", "\n    ", "private", " static String", "[]", "[]", "REFRESH_COUNT = ", "PropertiesUtil", ".", "get", "Values(", "\"refreshCount\"", ")", ";\n    ", "/** 是否换行 */", "\n    ", "private", " static String", "[]", "[]", "IS_CHANGE_LINE = ", "PropertiesUtil", ".", "get", "Values(", "\"isChangeLine\"", ")", ";\n    ", "/**任务配置类型默认为null即全部*/", "\n    ", "private", " static Integer taskConfigType=-", "1", ";\n    ", "/**日志类型：默认显示数组第1个：显示全部*/", "\n    ", "private", " static ", "int", " refreshType = ", "Integer", ".", "parse", "Int(REFRESH_TYPE[0] [0])", ";\n    ", "/**任务标志：默认显示数组第1个：2、全部，0.手动；1，自动*/", "\n    ", "private", " static ", "int", " taskFlag = ", "Integer", ".", "parse", "Int(TASK_FLAG[0][0])", ";\n\n    ", "private", " static ", "int", " collectPri = ", "Integer", ".", "parse", "Int(COLLECT_PRI[0] [0])", ";\n    ", "/** 显示条数：默认显示数组第一个：显示20条*/", "\n    ", "private", " static ", "int", " refreshCount = ", "Integer", ".", "parse", "Int(REPRESH_COUNT[0] [0])", ";\n    ", "/** 刷新时间：默认显示数组第一个：0 不刷新 */", "\n    ", "private", " static ", "int", " refreshTime=", "0", ";\n    ", "/**是否换行：默认显示数组第一个：0不换行 1 换行 */", "\n    ", "private", " static ", "int", " isChangeLine = ", "Integer", ".", "parse", "Int(IS_CHANGE_LINE[0] [0])", ";\n    ", "/** 任务配置类型 */", "\n    ", "private", " static String", "[]", "[]", " TASK_CONFIG_TYPE= ", "PropertiesUtil", ".", "get", "Values( ", "\"taskConfigType\"", ")", ";\n    ", "/** 表头字体 */", "\n    ", "private", " static String TABLEHEAD_FONT=", "\"微软雅黑\"", ";\n    ", "/** 行颜色 值是列表显示的最大值*/", "\n    public static List<Color> TABLEBODY_COLOR_STORM= ", "new", " ArrayList<>", "()", ";\n    ", "/**最后刷新时间*/", "\n    static String lastRefreshTime = ", "Calenders", ".", "date", "ToString(", "new", " Date()", ", Calenders.DATE_FORMAT_1);\n    ", "//自动刷新文本框", "\n    ", "private", " static JTextField consIDText = ", "new", " ", "JTextField(10)", ";\n\n\n    ", "//地市复选框", "\n    ", "private", " static JPanel checkJapnel = ", "new", " ", "JPanel()", ";\n\n    ", "/**\n     * 开始日期按钮\n     */", "\n    ", "private", " JButton timeStartButton = ", "new", " ", "JButton()", ";\n    ", "/**\n     * 结束日期 按钮\n     */", "\n    ", "private", " JButton timeEndButton = ", "new", " ", "JButton()", ";\n    ", "/**\n     * 开始日期 按钮 显示值\n     */", "\n    ", "private", " String startDateTime = ", "Calenders", ".", "getCurrentDayMin1StrO;\n    ", "/**\n     * 结束日期 按钮 显示值\n     */", "\n    ", "private", " String endDateTime = ", "Calenders", ".", "getCurrentTimeSO;\n    ", "/**\n     * 告警JPanel\n     */", "\n    ", "private", " JPanel jpanelWarn = ", "new", " ", "JPanel()", ";\n\n    public void init", "JComboBox()", " {\n    }\n    ", "//顶部按钮", "\n    public JPanel init", "JpanelTop()", " {\n        ", "//初始化顶部下拉框", "\n        init", "JComboBox()", ";\n        ", "// 日期选择控件", "\n        ", "// 开始日期", "\n        JLabel startDate = ", "new", " ", "JLabel()", ";\n        startDate.set", "Text(", "\"开始日期 \"", ")", ";\n        timeStartButton = ", "new", " ", "DatePlug(", "startDateTime", ")", ";\n        ", "// 结束日期", "\n        JLabel endDate = ", "new", " ", "JLabel()", ";\n        endDate.set", "Text(", "\"结束日期 \"", ")", ";\n        timeEndButton = ", "new", " ", "DatePlug(", "endDateTime", ")", ";\n        ", "//查询按钮 ”查询“)，", "\n        final JButton searchButton = ", "new", " ", "JButton(", "\"查询\"", ")", ";\n        searchButton.set", "Visible(", "true", ")", ";\n        searchButton.add", "MouseListener(", "new", " MouseListener()", " {\n\n            @Override\n            public void mouse", "Clicked(MouseEvent ", "arg0", ")", " {\n\n            }\n\n            @Override\n            public void mouse", "Pressed(MouseEvent ", "arg0", ")", " {\n\n            }\n\n            @Override\n            public void mouse", "Released(MouseEvent ", "arg0", ")", " {\n\n            }\n\n            @Override\n            public void mouse", "Entered(MouseEvent ", "arg0", ")", " {\n\n            }\n\n            @Override\n            public void mouse", "Exited(MouseEvent ", "arg0", ")", " {\n                startDateTime = timeStartButton.get", "Text()", ".trim", "()", ";\n                endDateTime = timeEndButton.get", "Text()", ".trim", "()", ";\n                String consId = consIDText.get", "Text()", ".trim", "()", ";\n                read", "UserInfo(", "consId", ", ", "startDateTime", ", ", "endDateTime", ")", ";\n            }\n        });\n       ", "// JLable告警相关", "\n        JLabel reminder = ", "new", " ", "JLabel()", ";\n        reminder.set", "Text(", "\"开始日期不能大于结束日期\"", ")", ";\n        reminder.set", "Font(", "new", " Font(", "\"宋体\"", ",1, 15)", ");\n        reminder.set", "Foreground(Color.RED)", ";\n       ", "//reminder.setVisible(false);", "\n       ", "//JPanel告警", "\n        jpanelWarn.set", "Size(800, 100)", ";\n        jpanelWarn.set", "Visible(", "false", ")", ";\n        jpanelWarn.add(reminder);\n\n        ", "//自动刷新按钮相关", "\n        JLabel consId = ", "new", " ", "JLabel()", ";\n        consId.set", "Text(", "\"采集对象ID\"", ")", ";\n        consIDText.set", "Text(", "\"3\"", ")", ";\n\n        JPanel japenlEast = ", "new", " ", "JPanel()", ";\n        japenlEast.add(searchButton);\n        japenlEast.add(startDate);\n        japenlEast.add(timeStartButton);\n        japenlEast.add(endDate);\n        japenlEast.add(timeEndButton);\n\n        japenlEast.add(consId);\n        japenlEast.add(consIDText);\n\n        JPanel jPanelTop = ", "new", " ", "JPanel()", ";\n        japenlEast.set", "Layout(", "new", " BorderLayout()", ");\n        japenlEast.add(jpanelWarn, BorderLayout.CENTER);\n        japenlEast.add(japenlEast, BorderLayout.WEST);\n        japenlEast.add(checkJapnel, BorderLayout.SOUTH);\n        return jPanelTop;\n    }\n\n\n       ", "/* * Storm采集运行日志界面 */", "\n\n    public JPanel get", "CollectDateJpanel()", "{\n        ", "/* * 初始化顶部选择按钮布局 */", "\n        JPanel jpanelTop =init", "JpanelTop()", ";\n        jpanelTop.set", "Size(700,100)", ";\n\n        ", "/**初始化表格和数据 */", "\n        init", "Jtable()", ";\n        ", "/** 顶部按钮和表格整合 */", "\n        JScrollPane collectDateJscrollPane = ", "new", " ", "JScrollPane(", "collectDateJTable", ")", ";", "/*按钮+表格 */", "\n        JPanel jpanel = ", "new", " ", "JPanel()", ";\n        jpanel.set", "Size( 800, 600)", ";\n        jpanel.set", "Layout(", "new", " BorderLayout()", ");\n        jpanel.add(jpanelTop, BorderLayout. NORTH);\n        jpanel.add(collectDateJscrollPane, BorderLayout.CENTER);\n\n        return jpanel;\n    }\n    public void init", "Jtable()", "{\n        ", "//添加表头", "\n        String", "[]", " jtableHeaders=jtableHeader.split(", "\",\"", ");\n        ", "int", " length = jtableHeaders.length;\n        ", "for", "(", "int", " i=", "0", ";i<length;i++){\n            vName.add(jtableHeaders", "[", "i", "]", ");", "//循环添加表数据", "\n        }\n        ", "//设置表格数据", "\n        DefaultTableModel model = ", "new", " ", "DefaultTableModel()", ";\n        model.set", "DataVector(", "vData", ", ", "vName", ")", ";\n        collectDateJTable.set", "Model(", "model", ")", ";\n    }\n\n    public static void read", "UserInfo(String ", "consId", ",String ", "startDateStr", ",String ", "endDateStr", ")", "{\n        ", "//表格数据sql 未写！", "\n    }\n    public void get", "JtableCenter()", "{}\n    @Override\n    public void run", "()", " {\n        ", "while", " (", "true", ") {\n            ", "if", " (refreshTime != ", "0", ") {\n                ", "try", " {\n                    ", "//更新数据", "\n                    get", "JtableCenter()", ";\n                    ", "//刷新频率", "\n                    ", "Thread", ".", "sleep(refreshTime", " * ", "1000", ");\n                } catch (Exception e) {\n                    e.print", "StackTrace()", ";\n                    logger.error(", "\"定时刷新出错\"", ");\n                }\n            } ", "else", " {\n                ", "try", " {\n                    ", "Thread", ".", "sleep(", "1", ");\n                } catch (Exception e) {\n                    e.print", "StackTrace()", ";\n                    logger.error(", "\"休眠出错\"", ");\n                }\n            }\n        }\n    }\n        }\n    \n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;线程的运行是不确保运行顺序的&amp;#xff0c;所以出现的顺序是随机的。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["线程锁中关于死锁的疑问", ["我在学习线程的时候发现这样一个问题", "\n\n", "\n", "import time \nimport threading\nimport time\n\n\ndef test1():\n    \n    mA.acquire()\n    print(\"test1--上锁A\")\n    time.sleep(1)\n    mB.acquire()\n    print(\"test1---上锁B\")\n    mA.release()\n    print(\"test1---解锁A\")\n    mB.release()\n    print(\"test1---解锁B\")\n\n\ndef test2():\n    mB.acquire()\n    print(\"test2---上锁B\")\n    time.sleep(1)\n  #  mA.acquire()\n    print(\"test2--上锁A\")\n  #  mA.release()\n    print(\"test2---解锁B\")\n    mB.release()\n    print(\"test2---解锁A\")\n\n\nmA = threading.Lock()\nmB = threading.Lock()\ndef main():\n    t1 = threading.Thread(target=test1)\n    t2 = threading.Thread(target=test2)\n    t1.start()\n    t2.start()\n\n\nif __name__ == '__main__':\n    main()", "\n\n", "他给我返回的结果并没有造成死锁，打印的以下内容，可是为什么test2会在test1前面呢？", "\n\n", "test1--上锁A", "\ntest2---上锁B", "\ntest2--上锁A", "\ntest2---解锁B", "\ntest2---解锁Atest1---上锁B", "\n\n", "test1---解锁A", "\ntest1---解锁B", "\n\n", "为什么会有这个疑问呢？因为当我把test1里面的注释掉以后结果成了以下，而不是死锁，也就是没有和test2等待有一秒后产生作用，这算什么情况，是有优先级么？以我的想法不应该是两个函数的语句轮换着出现或是直接产生死锁么？", "\n\n", "\n", "def test1():\n    \n    mA.acquire()\n    print(\"test1--上锁A\")\n    time.sleep(1)\n #   mB.acquire()\n    print(\"test1---上锁B\")\n    mA.release()\n    print(\"test1---解锁A\")\n #   mB.release()\n    print(\"test1---解锁B\")\n\n\ndef test2():\n    mB.acquire()\n    print(\"test2---上锁B\")\n    time.sleep(1)\n    mA.acquire()\n    print(\"test2--上锁A\")\n    mA.release()\n    print(\"test2---解锁B\")\n    mB.release()\n    print(\"test2---解锁A\")", "\n\n", "test1--上锁A", "\ntest2---上锁B", "\ntest1---上锁B", "\ntest1---解锁A", "\ntest1---解锁B", "\ntest2--上锁A", "\ntest2---解锁B", "\ntest2---解锁A", "\n\n", "希望大佬们帮忙解释一下，感激不尽。", "\n\n", "这难道还有趋利避害不成（笑哭笑哭）"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;同问&amp;#xff1f;如何解决&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于this指向的面试题", ["想问的问题是这个this指向的面试题中第三个person.foo2()的结果为什么是person1呢，为什么往上层作用域查找后的this指向person1呢？请详细解答一下", "\n", "var name = 'window'", "function Person(name) {", "this.name = name", "this.foo1 = function() {", "console.log(this.name)", "}", "this.foo2 = () => console.log(this.name)", "this.foo3 = function() {", "return function() {", "console.log(this.name)", "}", "}", "this.foo4 = function() {", "return ()=>{", "console.log(this.name)", "}", "}", "}", "\n", "var person1 = new Person('person1')", "var person2 = new Person('person2')", "\n", "person1.foo1()", "person1.foo1.call(person2)", "\n", "person1.foo2()", "person1.foo2.call(person2)", "\n", "person1.foo3()()", "person1.foo3.call(person2)()", "person1.foo3().call(person2)", "\n", "person1.foo4()()", "person1.foo4.call(person2)()", "person1.foo4().call(person2)", "\n", "面试题三主要考察的是new绑定this的指向", "\n", "person1.foo1(): person1对象调用，隐式绑定，this指向person1，所以输出person1", "person1.foo1.call(person2): 有person1调用，隐式绑定，但是person2的call方法的显式绑定优先级更高，所以输出person2", "person1.foo2(): person1对象调用foo2，foo2是箭头函数没有this，从上层作用域查找，函数是有作用域的，与面试题二中的第三题不同，所以是隐式绑定，输出person1", "person1.foo2.call(person2): 尽管使用call方法试图显式绑定person2，但foo2是箭头函数没有this，还是用的隐式绑定，输出person1", "person1.foo3()(): 调用了foo3，返回了一个方法，又执行了，是独立函数调用，默认绑定，输出window", "person1.foo3.call(person2)(): person1的foo3用call显式绑定了person2，但是独立函数调用，默认绑定，输出window", "person1.foo3().call(person2): person1.foo3()直接执行了，再显式绑定，this指向的就是person2，输出person2", "person1.foo4()(): person1先执行了foo4，返回的是一个箭头函数，没有this，需要从上层作用域找，隐式绑定person1，输出person1", "person1.foo4.call(person2)(): 给foo4这个函数显式绑定了person2，再执行这个函数，执行的是箭头函数，没有this，从上层作用域找，找的是先前绑定的person2，输出person2", "person1.foo4().call(person2): 执行foo4，使用隐式绑定person1，因为执行的函数是箭头函数，所以后面的显式绑定person2不生效，输出person1", "\n", "想问的问题是第三个person.foo2()的结果为什么是person1呢，为什么往上层作用域查找后的this指向person1呢？请详细解答一下"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;如果移植没问题&amp;#xff0c;测试串口可以正常&amp;#xff0c;就排查下硬件连接有无问题&amp;#xff0c;如果因为串口的问题不能进中断&amp;#xff0c;检查下是否两边模块共地&amp;#xff0c;串口通信的电平标准两边是否一致&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["STM32F103C8T6的串口无法接受信息，PWM也不能控制转动", ["调了几天了，一直搞不定，最近刚学嵌入式，求帮助", "\n", "刚入手了一套基于STM32F103C8T6的直流电机套件，想往里移植PID位置算法，但不知道哪出了问题，串口能发送信息但无法接受上位机信息，没有进入接收中断，而且电机也无法控制转动，怀疑可能初始化或移植程序不兼容出问题了，因为我只干了这两件事。。", "\n", "电机接线图,只用到了A电机", "\n", "\n", "IN口控制电机运行及旋转方向", "\n", "USART初始化，用的USART1，", "\n", "#", "if", " USART_EN_RX                                     ", "/* 如果使能了接收 */", "\n\nUART_HandleTypeDef g_uart1_handle;                  ", "/* UART句柄 */", "\n\n", "/**\n * @brief       串口X初始化函数\n * @param       baudrate: 波特率, 根据自己需要设置波特率值\n * @note        注意: 必须设置正确的时钟源, 否则串口波特率就会设置异常.\n *              这里的USART的时钟源在sys_stm32_clock_init()函数中已经设置过了.\n * @retval      无\n */", "\nvoid usart", "_init(", "uint32_t", " ", "baudrate", ")", "\n{\n    g_uart1_handle.Instance = USART1;\n    g_uart1_handle.Init.BaudRate = ", "115200", ";\n    g_uart1_handle.Init.WordLength = UART_WORDLENGTH_8B;\n    g_uart1_handle.Init.StopBits = UART_STOPBITS_1;\n    g_uart1_handle.Init.Parity = UART_PARITY_NONE;\n    g_uart1_handle.Init.Mode = UART_MODE_TX_RX;\n    g_uart1_handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;\n    g_uart1_handle.Init.OverSampling = UART_OVERSAMPLING_16;\n      ", "if", " (", "HAL_UART_Init(&", "g_uart1_handle", ")", " != HAL_OK)\n      {\n        ", "Error_Handler()", ";\n      }\n}\n\n", "/**\n * @brief       UART底层初始化函数\n * @param       huart: UART句柄类型指针\n * @note        此函数会被HAL_UART_Init()调用\n *              完成时钟使能，引脚配置，中断配置\n * @retval      无\n */", "\nvoid ", "HAL_UART_MspInit(UART_HandleTypeDef ", "*", "huart", ")", "\n{\n    GPIO_InitTypeDef gpio_init_struct;\n\n    ", "if", "(huart->Instance", " == ", "USART1)                                ", "/* 如果是串口1，进行串口1 MSP初始化 */", "\n    {\n        ", "__HAL_RCC_USART1_CLK_ENABLE()", ";                            ", "/* USART1 时钟使能 */", "\n        ", "__HAL_RCC_GPIOA_CLK_ENABLE()", ";                            ", "/* 发送接受引脚时钟使能 */", "\n\n        gpio_init_struct.Pin = GPIO_PIN_9;                        ", "/* TX引脚 */", "\n        gpio_init_struct.Mode = GPIO_MODE_AF_PP;                ", "/* 复用推挽输出 */", "\n        gpio_init_struct.Pull = GPIO_PULLUP;                    ", "/* 上拉 */", "\n        gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;            ", "/* 高速 */", "\n        ", "HAL_GPIO_Init(GPIOA, &", "gpio_init_struct", ")", ";                   ", "/* 初始化发送引脚 */", "\n\n        gpio_init_struct.Pin = GPIO_PIN_10;                        ", "/* RX引脚 */", "\n        ", "HAL_GPIO_Init(GPIOA, &", "gpio_init_struct", ")", ";                   ", "/* 初始化接收引脚 */", "\n        ", "__HAL_UART_DISABLE_IT(&", "g_uart1_handle", ", UART_IT_TC)", ";        ", "/* 开启中断 */", "\n\n#", "if", " USART_EN_RX\n\n        ", "__HAL_UART_ENABLE_IT(&", "g_uart1_handle", ", UART_IT_RXNE)", ";    ", "/* 开启接收中断 */", "\n        ", "HAL_NVIC_SetPriority(USART_UX_IRQn, 0, 3)", ";                ", "/* 抢占优先级0，子优先级3 */", "\n        ", "HAL_NVIC_EnableIRQ(USART_UX_IRQn)", ";                        ", "/* 使能USART1中断通道 */", "\n\n#endif\n    }\n}\n\n", "//串口中断函数", "\nvoid ", "USART_UX_IRQHandler(", "void", ")", "\n{\n    uint8_t res;\n\n    ", "if", "(", "__HAL_UART_GET_FLAG(&", "g_uart1_handle", ", UART_FLAG_RXNE)", " != RESET)\n    {\n\n        led", "_on()", ";                ", "//调试用", "\n        delay", "_ms(1000)", ";\n        led", "_off()", ";\n        ", "HAL_UART_Receive(&", "g_uart1_handle", ", &", "res", ", 1, 1000)", ";\n        debug", "_handler(&", "res", ")", ";\n    }\n}\n\n#endif\n\n", "\n", "PWM初始化，电机针脚都是固定的，只能用PIN8：", "\n", "/* 定时器配置句柄 定义 */", "\nTIM_HandleTypeDef g_atimx_cplm_pwm_handle;                              ", "/* 定时器x句柄 */", "\n\n", "/* 互补输出带死区控制 */", "\nTIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;                    ", "/* 死区时间设置 */", "\n\nvoid atim_timx_cplm_pwm_init(uint16_t arr, uint16_t psc)                ", "/* 电机接线用的TIM4定时器，移植程序用的TIM1高级定时器，为避免BUG没修改名称 */", "\n{\n    TIM_OC_InitTypeDef sConfigOC;\n\n    g_atimx_cplm_pwm_handle.Instance = TIM4;                                  ", "/* 定时器x */", "\n    g_atimx_cplm_pwm_handle.Init.Prescaler = psc;                           ", "/* 定时器预分频系数 */", "\n    g_atimx_cplm_pwm_handle.Init.CounterMode = TIM_COUNTERMODE_UP;          ", "/* 向上计数模式 */", "\n    g_atimx_cplm_pwm_handle.Init.Period = arr;                              ", "/* 自动重装载值 */", "\n    g_atimx_cplm_pwm_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;    ", "/* 时钟分频因子 */", "\n    g_atimx_cplm_pwm_handle.Init.RepetitionCounter = ", "0", ";                     ", "/* 重复计数器寄存器为0 */", "\n    g_atimx_cplm_pwm_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;        ", "/* 不使能影子寄存器TIMx_ARR */", "\n    HAL_TIM_PWM_Init(&g_atimx_cplm_pwm_handle);\n\n    ", "/* 设置PWM输出 */", "\n    sConfigOC.OCMode = TIM_OCMODE_PWM1;                                     ", "/* PWM模式1 */", "\n    sConfigOC.Pulse = ", "0", ";                                                    ", "/* 比较值为0 */", "\n    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;                             ", "/* OCy 高电平有效 */", "\n    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;                              ", "/* 不使用快速模式 */", "\n    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;                          ", "/* 通道的空闲状态 */", "\n    HAL_TIM_PWM_ConfigChannel(&g_atimx_cplm_pwm_handle, &sConfigOC, TIM_CHANNEL_3);\n    HAL_TIM_PWM_ConfigChannel(&g_atimx_cplm_pwm_handle, &sConfigOC, TIM_CHANNEL_4);\n\n    ", "/* 设置死区参数，开启死区中断 */", "\n    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;                 ", "/* OSSR设置为1 */", "\n    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;               ", "/* OSSI设置为0 */", "\n    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;                     ", "/* 上电只能写一次，需要更新死区时间时只能用此值 */", "\n    sBreakDeadTimeConfig.DeadTime = ", "0", "X0F;                                   ", "/* 死区时间 */", "\n    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;                    ", "/* BKE = 0, 关闭BKIN检测 */", "\n    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;             ", "/* BKP = 1, BKIN低电平有效 */", "\n    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;     ", "/* 使能AOE位，允许刹车后自动恢复输出 */", "\n    HAL_TIMEx_ConfigBreakDeadTime(&g_atimx_cplm_pwm_handle, &sBreakDeadTimeConfig);         ", "/* 设置BDTR寄存器 */", "\n}\n\n/**\n * @brief       定时器底层驱动，时钟使能，引脚配置\n                此函数会被HAL_TIM_PWM_Init()调用\n * @param       htim:定时器句柄\n * @retval      无\n */\nvoid HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)\n{\n    ", "if", " (htim->Instance == ATIM_TIMX_CPLM)\n    {\n        GPIO_InitTypeDef gpio_init_struct;\n\n        __HAL_RCC_GPIOB_CLK_ENABLE();           ", "/* 通道X对应IO口时钟使能 */", "\n        __HAL_RCC_TIM4_CLK_ENABLE();            ", "/* 定时器x时钟使能 */", "\n\n        ", "/* 配置PWM通道引脚 */", "\n        gpio_init_struct.Pin = GPIO_PIN_8;\n        gpio_init_struct.Mode = GPIO_MODE_AF_PP;\n        gpio_init_struct.Pull = GPIO_NOPULL;\n        gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH ;\n        HAL_GPIO_Init(TIM_TIMX_CPLM_CHY_GPIO_PORT, &gpio_init_struct);\n    }\n}\n\n/**\n * @brief       电机初始化\n * @param       无\n * @retval      无\n */\nvoid dcmotor_init(void)\n{\n    IN_GPIO_CLK_ENABLE();\n    GPIO_InitTypeDef gpio_init_struct;\n\n    ", "/* IN引脚设置，设置为推挽输出 */", "\n    gpio_init_struct.Pin = IN1_Pin|IN2_Pin;\n    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;\n    gpio_init_struct.Pull = GPIO_NOPULL;\n    gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;\n    HAL_GPIO_Init(MOTOR_A_Port, &gpio_init_struct);\n\n    HAL_GPIO_WritePin(MOTOR_A_Port, IN1_Pin|IN2_Pin, GPIO_PIN_SET);      ", "/* IN拉高，关闭输出 */", "\n\n    dcmotor_stop();                 ", "/* 停止电机 */", "\n    dcmotor_dir(", "0", ");                 ", "/* 设置正转 */", "\n    dcmotor_speed(", "0", ");               ", "/* 速度设置为0 */", "\n    dcmotor_start();                ", "/* 开启电机 */", "\n}\n", "\n", "移植的程序是基于STM32F4xx的，原程序用的是PWM互补通道，串口也是USART1，一直对照原程序没找到哪有问题导致没进入中断"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;是不是代码复制的时候不小心按到了,这里多了个分号&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/952035355436143.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["本地vs2019运行正常，在提交的网站上显示Compile Error", ["问题：", "Description", "\n", "由小写字母{'a','b','c','d','z'}和{'+','-','*','/','(',')'}可以组成一个中缀表达式，现在需要你输出它的后缀表达式。", "\n", "Input", "\n", "输入的第一行是一个int型整数T，表示一个有T组数据。", "接下来T行，每行一个一个不含空格的字符串，且每个字符串长度都小于1000。该字符串就是中缀表达式。", "数据保证输入的表达式一定合法。", "\n", "Output", "\n", "输出T行，每行一个后缀表达式，表示求得的结果。输出的表达式同样不含空格。", "\n", "Sample Input", "\n", "2", "a+b", "c+(d", "e+f)*g", "(a+b)*c/d+f/g", "\n", "Sample Output", "\n", "abc*+de", "f+g", "+", "ab+c*d/fg/+", "我的代码如下：", "\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "<string>", "\n", "#", "include", " ", "<stack>", ";", "\n\n", "using", " ", "namespace", " std;\n\n", "//操作符的栈内、外优先级", "\n", "int", " ", "isp", "(", "char", " x)", "//栈内", "\n", "{\n    ", "if", " (x == ", "'*'", " || x == ", "'/'", ") ", "return", " ", "5", ";\n    ", "if", " (x == ", "'+'", " || x == ", "'-'", ") ", "return", " ", "3", ";\n    ", "if", " (x == ", "'('", ") ", "return", " ", "1", ";\n    ", "else", " ", "return", " ", "-1", ";\n}\n", "int", " ", "icp", "(", "char", " x)", "//栈外", "\n", "{\n    ", "if", " (x == ", "'*'", " || x == ", "'/'", ") ", "return", " ", "4", ";\n    ", "if", " (x == ", "'+'", " || x == ", "'-'", ") ", "return", " ", "2", ";\n    ", "if", " (x == ", "'('", ") ", "return", " ", "6", ";\n    ", "else", " ", "return", " ", "-1", ";\n}\n\n", "int", " ", "main", "()", "\n", "{\n    string infix, postfix;\n    stack<", "char", "> operators;\n    ", "int", " T;\n    cin >> T;\n    ", "char", " ch;\n    ", "for", " (", "int", " q = ", "0", "; q < T; ++q)\n    {\n        cin >> infix;\n        ", "for", " (", "int", " i = ", "0", "; i < infix.", "size", "(); i++)\n        {\n            ch = infix[i];\n            ", "if", " (ch >= ", "'a'", " && ch <= ", "'z'", ")\n            {", "//是操作数，输出", "\n                postfix.", "push_back", "(ch);\n            }\n            ", "else", " ", "if", " (operators.", "empty", "())\n            {", "//若是空的，让该操作符进栈", "\n                operators.", "push", "(ch);\n            }\n            ", "else", " ", "if", " (ch == ", "')'", ")\n            {\n                ", "while", " (operators.", "top", "() != ", "'('", " && !operators.", "empty", "())\n                {\n                    postfix.", "push_back", "(operators.", "top", "());\n                    operators.", "pop", "();\n                }\n                operators.", "pop", "();\n            }\n            ", "else", " ", "if", " (ch == ", "'('", ")\n            {\n                operators.", "push", "(ch);\n            }\n            ", "else", " ", "if", " (ch == ", "'+'", " || ch == ", "'-'", "\n                || ch == ", "'*'", " || ch == ", "'/'", ")\n            {", "//是加减乘除", "\n                ", "while", " (", "isp", "(operators.", "top", "()) >= ", "icp", "(ch))\n                {\n                    postfix.", "push_back", "(operators.", "top", "());\n                    operators.", "pop", "();\n                    ", "if", " (operators.", "empty", "())\n                    {\n                        ", "break", ";\n                    }\n                }\n                operators.", "push", "(ch);\n            }\n        }\n        ", "while", " (!operators.", "empty", "())\n        {\n            postfix.", "push_back", "(operators.", "top", "());\n            operators.", "pop", "();\n        }\n        cout << postfix << endl;\n        infix.", "clear", "();\n        postfix.", "clear", "();\n    }\n    ", "return", " ", "0", ";\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;如果编译器支持调试的话&amp;#xff0c;最好使用单步调试去找下问题&amp;#xff0c;和硬件有关的问题&amp;#xff0c;只是看代码的是很难发现的。导致出现你这个问题的原因可能是以下两种&amp;#xff0c;一是你那段计算健值的代码有问题&amp;#xff0c;你可以按下不同的按键&amp;#xff0c;看一下得到的健值是否正常&amp;#xff0c;可能你不同按键的健值判断之间会相互影响&amp;#xff1b;二是存在按键抖动&amp;#xff0c;按同一个按键&amp;#xff0c;但单片机每次收到的数据都不相同&amp;#xff0c;可以检查一下这几个按键&amp;#xff0c;看看每次按下去单片机收到的数据是否相同。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["篮球红外计分器红外遥控部分按键实现不了，如何解决？(语言-c语言)", ["在开始键未按下的时候，分钟的加减键可以顺畅的加减，但是秒钟按下加一后红外接收器就没有反应了；按下开始键后，分数加减也是只能加一之后红外接收器就没反应了。想知道程序有什么问题。", "\n", "\n", "#include<reg51.h>", "\n", "#include <intrins.h>", "\n", "#define LEDData P0", "\n", "#define uchar unsigned char", "\n", "#define uint  unsigned int", "\n    \nuchar time;\nuchar code LEDCode[]={", "0", "xc0,", "0", "xf9,", "0", "xa4,", "0", "xb0,", "0", "x99,", "0", "x92,", "0", "x82,", "0", "xf8,", "0", "x80,", "0", "x90};\n//数码管的段码编码\nuchar table[", "16", "] = {", "0", "x3f,", "0", "x06,", "0", "x5b,", "0", "x4f,", "0", "x66,", "0", "x6d,", "0", "x7d,", "0", "x07,", "0", "x7f,", "0", "x6f,", "0", "x77,", "0", "x7c,", "0", "x39,", "0", "x5e,", "0", "x79,", "0", "x71}; \n\nint minit,second,count,count1,", "playon=0,ad1=1,dec1=1,exchange=1,ad2=1,dec2=1,p24_sec=1,jy,jz;", "\nchar ", "min=15,sec=0;", "\n\nuchar IRCOM[", "7", "];\n\nsbit ", "IRIN=P3^2;", "         //红外接收器数据线\nsbit ", "secondpoint=P0^7;", "                //秒闪动点\n//依次点亮数码管的位\nsbit ", "AA1=P2^0;//一队得分", "\nsbit ", "AA2=P2^1;", "\nsbit ", "AA3=P2^2;", "\n\nsbit ", "BB1=P2^4;//二队得分", "\nsbit ", "BB2=P2^5;", "\nsbit ", "BB3=P2^6;", "\n\nsbit ", "DD1=P3^0;//24秒", "\nsbit ", "DD2=P3^1;", "\n\nsbit ", "CC1=P3^4;//比赛时间", "\nsbit ", "CC2=P3^5;", "\nsbit ", "CC3=P3^6;", "\nsbit ", "CC4=P3^7;", "\n\nsbit ", "alam=P1^7;", "                        //报警\n\nbit  ", "timeover=0;", "                    //比赛结束标志位，为", "1", "时表示时间已经完\nbit  ", "AorB=0;", "                        //甲乙对交换位置标志位\nbit  ", "halfsecond=0;", "                    //半秒标志位\n\nuint scoreA;                //甲队得分\nuint scoreB;                //乙队得分\nchar ", "sec24=24;", "        \n\nvoid delay(unsigned char x)    //x*", "0.14", "MS\n{\n unsigned char i;\n  while(x--)\n {\n  for (", "i", " = ", "0", "; i<", "13", "; i++) {}\n }\n}\nvoid Delay5ms(void)\n{\n    unsigned int i;\n    for(", "i=100;i>0;i--);", "\n}\nvoid IR_init(void)         //红外初始化\n{\n    ", "IT0=0;", "\n    ", "EX0=1;", "\n    ", "EA=1;", "\n    ", "IRIN=1;", "             //相当于打开外部中断", "0", "  此处意义为红外接收器打开\n\n}\nvoid time0_init(void)\n{ //定时器初始化\n    ", "TMOD=0x11;//TR1和TR0都选用直接启动且定时时间为0.05s的定时器", "\n     ", "TL0=0xb0;//定时时间为0.05s，T0和T1的初值都为15536", "\n     ", "TH0=0x3c;", "\n     ", "TL1=0xb0;", "\n     ", "TH1=0x3c;", "\n    ", "minit=min;", "                //初始值为", "15", "：", "00", "\n    ", "second=sec;", "      //初始值为", "0", "\n    ", "EA=1;//打开总中断", "\n    ", "ET0=1;//启动定时器0", "\n    ", "ET1=1;//启动定时器1", "\n     ", "TR0=0;//计时器0，1先停止计数", "\n    ", "TR1=0;", "\n    ", "IT0=1;//定时器0设为下降沿触发", "\n    ", "IT1=1;//定时器1也设为下降沿触发", "\n    ", "PX0=1;//外部中断1设为高优先级", "\n    ", "PT0=0;//定时器0设为低优先级", "\n    ", "P1=0xFF;//端口初始化", "\n    ", "P3=0xFF;", "\n}\n\nvoid display(void)\n{\n//显示时间分\n    ", "CC1=0;", "\n    ", "LEDData=LEDCode[minit/10];", "\n    Delay5ms();\n    ", "CC1=1;", "\n    ", "CC2=0;", "\n    ", "LEDData=LEDCode[minit%10];", "\n    Delay5ms();\n    ", "CC2=1;", "\n    //秒点闪动\n    ", "if", "(", "halfsecond==1)", "\n        ", "LEDData=0x7f;", "\n    ", "else", "\n        ", "LEDData=0xff;", "\n    ", "CC2=0;", "\n    Delay5ms();\n    ", "CC2=1;", "\n    ", "secondpoint=0;", "\n//显示时间秒\n    ", "CC3=0;", "\n    ", "LEDData=LEDCode[second/10];", "\n    Delay5ms();\n    ", "CC3=1;", "\n    ", "CC4=0;", "\n    ", "LEDData=LEDCode[second%10];", "\n    Delay5ms();\n    ", "CC4=1;", "\n//显示", "1", "组的分数百位\n    ", "AA3=0;", "\n    ", "if", "(", "AorB==0)//交换位置", "\n        ", "LEDData=LEDCode[scoreA/100];", "\n    ", "else", "\n        ", "LEDData=LEDCode[scoreB/100];", "\n    Delay5ms();\n    ", "AA3=1;", "\n//显示", "1", "组分数的十位\n    ", "AA2=0;", "\n    ", "if", "(", "AorB==0)", "\n        ", "LEDData=LEDCode[(scoreA%100)/10];", "\n    ", "else", "\n        ", "LEDData=LEDCode[(scoreB%100)/10];", "\n    Delay5ms();\n    ", "AA2=1;", "\n\n//显示", "1", "组分数的个位\n    ", "AA1=0;", "\n    ", "if", "(", "AorB==0)", "\n        ", "LEDData=LEDCode[scoreA%10];", "\n    ", "else", "\n        ", "LEDData=LEDCode[scoreB%10];", "\n    Delay5ms();\n    ", "AA1=1;", "\n\n//显示", "2", "组分数的百位\n    ", "BB3=0;", "\n    ", "if", "(", "AorB==1)", "\n        ", "LEDData=LEDCode[scoreA/100];", "\n    ", "else", "\n        ", "LEDData=LEDCode[scoreB/100];", "\n    Delay5ms();\n    ", "BB3=1;", "\n//显示", "2", "组分数的十位\n    ", "BB2=0;", "\n    ", "if", "(", "AorB==1)", "\n        ", "LEDData=LEDCode[(scoreA%100)/10];", "\n    ", "else", "\n        ", "LEDData=LEDCode[(scoreB%100)/10];", "\n    Delay5ms();\n    ", "BB2=1;", "\n\n//显示", "2", "组分数的个位\n    ", "BB1=0;", "\n    ", "if", "(", "AorB==1)", "\n        ", "LEDData=LEDCode[scoreA%10];", "\n    ", "else", "\n        ", "LEDData=LEDCode[scoreB%10];", "\n    Delay5ms();\n    ", "BB1=1;", "\n\n//显示时间分\n    ", "DD2=0;", "\n    ", "LEDData=LEDCode[sec24/10];", "\n    Delay5ms();\n    ", "DD2=1;", "\n    ", "DD1=0;", "\n    ", "LEDData=LEDCode[sec24%10];", "\n    Delay5ms();\n    ", "DD1=1;", "\n}\n\n//按键检测程序\nvoid keyscan(void)\n{\n    ", "if", "(", "playon==0)", "\n    {\n        ", "if", "(", "ad1==0)", "\n        {\n            ", "ad1=1;", "\n            display();\n                ", "if", "(minit<", "99", ")\n                    minit++;\n                ", "else", "{\n                    ", "minit=99;", " \n                    ", "min=minit;}", "\n        }\n\n        ", "if", "(", "dec1==0)", "\n        {\n            ", "dec1=1;", "\n            display();\n                ", "if", "(minit>", "0", ")\n                    minit--;\n                ", "else", "{\n                    ", "minit=0;", "\n                    ", "min=minit;}", "\n            \n        }\n\n        ", "if", "(", "ad2==0)", "\n        {\n            ", "ad2=1;", "\n            display();\n                ", "if", "(second<", "59", ")\n                    second++;\n                ", "else", "{\n                    ", "second=59;", " \n                    ", "sec=second;}", "\n            \n        }\n\n        ", "if", "(", "dec2==0)", "\n        {\n            ", "dec2=1;", "\n            display();\n                ", "if", "(second>", "0", ")\n                    second--;\n                ", "else", "{\n                    ", "second=0;", "  \n                    ", "sec=second;}", "\n            \n        }\n\n        ", "if", "(", "exchange==0)", "\n        {\n            ", "exchange=1;", "\n            display();\n                ", "TR1=0;", "                    //关闭T1计数器\n                ", "alam=1;", "                    //关报警\n                   ", "AorB=~AorB;", "                //开启交换    \n                ", "minit=min;", "                //并将时间预设为", "15", "：", "00", "\n                ", "second=sec;", "\n                ", "sec24=24;", "\n    }\n  }\n    ", "else", "\n    {\n        ", "if", "(", "ad1==0)", "\n        {\n            ", "ad1=1;", "\n            display();\n                ", "if", "(", "AorB==0)", "\n                {\n                    ", "if", "(scoreA<", "999", ")\n                        scoreA++;\n                    ", "else", "\n                        ", "scoreA=999;", "\n                }\n                ", "else", "\n                {\n                    ", "if", "(scoreB<", "999", ")\n                        scoreB++;\n                    ", "else", "\n                        ", "scoreB=999;", "\n                }\n        }\n\n        ", "if", "(", "dec1==0)", "\n        {\n            ", "dec1=1;", "\n            display();\n                ", "if", "(", "AorB==0)", "\n                {\n                    ", "if", "(scoreA>", "0", ")\n                        scoreA--;\n                    ", "else", "\n                        ", "scoreA=0;", "\n                }\n                ", "else", "\n                {\n                    ", "if", "(scoreB>", "0", ")\n                        scoreB--;\n                    ", "else", "\n                        ", "scoreB=0;", "\n                }\n        }\n\n        ", "if", "(", "ad2==0)", "\n        {\n            ", "ad2=1;", "\n            display();\n                ", "if", "(", "AorB==1)", "\n                {\n                    ", "if", "(scoreA<", "999", ")\n                        scoreA++;\n                    ", "else", "\n                        ", "scoreA=999;", "\n                }\n                ", "else", "\n                {\n                    ", "if", "(scoreB<", "999", ")\n                        scoreB++;\n                    ", "else", "\n                        ", "scoreB=999;", "\n                }\n        }\n\n        ", "if", "(", "dec2==0)", "\n        {\n            ", "dec2=1;", "\n            display();\n                ", "if", "(", "AorB==1)", "\n                {\n                    ", "if", "(scoreA>", "0", ")\n                        scoreA--;\n                    ", "else", "\n                        ", "scoreA=0;", "\n                }\n                ", "else", "\n                {\n                    ", "if", "(scoreB>", "0", ")\n                        scoreB--;\n                    ", "else", "\n                        ", "scoreB=0;", "\n                }\n        }\n        ", "if", "(", "p24_sec==0)", "\n        {\n            ", "p24_sec=1;", "\n            display();\n                ", "sec24=24;", "\n                ", "TR0=1;", "\n                ", "alam=1;", "\n            }\n    }\n}\n//主函数\nvoid main(void)\n{\n    IR_init();\n    time0_init();\n    ", "alam=1;", "\n     while(", "1", ")\n     {\n        while(", "1", ")\n    {\n        while(", "jy==jz)", "\n        {\n                    ", "if", "(", "timeover==1)", "\n    {\n        ", "timeover=0;", "\n    }\n        switch(jz)\n        {\n            case ", "1", ":", "ad1=0;break;", "\n            case ", "2", ":", "dec1=0;break;", "\n            case ", "3", ":", "if", "(", "playon==0)", "\n    {\n        ", "playon=1;", "                //开始标志位\n        ", "TR0=1;", "                    //开启计时\n        \n        ", "if", "((minit+second)==", "0", ")\n        {\n            ", "sec24=24;", "\n            ", "minit=min;", "            \n            ", "second=sec;", "\n        }\n    }\n    ", "else", "\n    {\n        ", "playon=0;", "                //开始标志位清零，表示暂停\n        ", "TR0=0;", "                    //暂时计时\n    }break;\n            case ", "4", ":", "ad2=0;break;", "\n            case ", "5", ":", "dec2=0;break;", "\n            case ", "6", ":", "exchange=0;break;", "\n            case ", "7", ":", "p24_sec=0;break;", "\n        }\n        jy--;\n        }\n        keyscan();\n        display();\n        Delay5ms();\n        Delay5ms();\n    }\n    }\n}\nvoid IR() interrupt ", "0", "   //执行中断:进行读取信号  最后产生键值\n{\n      unsigned char j,k,", "N=0;", "\n     delay(", "15", ");\n     ", "if", " (", "IRIN==1)", " \n     { ", "EX1", " =", "1", ";\n       return;\n      } \n                           \n  while (!IRIN)          \n    {delay(", "1", ");}\n\n for (", "j=0;j<4;j++)", "         \n { \n  for (", "k=0;k<8;k++)", "       \n  {\n   while (IRIN)           \n     {delay(", "1", ");}\n    while (!IRIN)         \n     {delay(", "1", ");}\n     while (IRIN)       \n      {\n    delay(", "1", ");\n    N++;           \n    ", "if", " (N>=", "30", ")\n     { ", "EX1=1;", "\n     return;}                 \n      }                                 \n     IRCOM[j]=IRCOM[j] >> ", "1", ";                 \n     ", "if", " (N>=", "8", ") {IRCOM[j] = IRCOM[j] | ", "0", "x80;}\n     ", "N=0;", "\n  }//end for k\n }//end for j\n   \n   ", "if", " (IRCOM[", "2", "]!=~IRCOM[", "3", "])\n   { ", "EX1=1;", "\n     return; }\n    \n    switch(IRCOM[", "2", "])\n    {\n        case ", "0", "x0c:", "jz=1;break;", "\n        case ", "0", "x18:", "jz=2;break;", "\n        case ", "0", "x5e:", "jz=3;break;", "\n        case ", "0", "x08:", "jz=4;break;", "\n        case ", "0", "x1c:", "jz=5;break;", "\n        case ", "0", "x5a:", "jz=6;break;", "\n        case ", "0", "x42:", "jz=7;break;", "\n        default:break;\n    }\n    ", "jy=jz;", "\n}\nvoid  time0_int(void) interrupt ", "1", " //启动定时器", "0", "\n{\n     ", "TL0=0xb0;", "\n     ", "TH0=0x3c;", "\n     ", "TR0=1;", "\n      count++;\n    ", "if", "(", "count==10)", "\n    {\n        ", "halfsecond=0;", "\n    }\n\n       ", "if", "(", "count==20)", "\n       {\n        ", "count=0;", "\n        ", "halfsecond=1;", "\n//        ", "if", "(second>", "0", ")\n        {\n            second--;\n            ", "if", "(second<", "0", ")\n            {\n                ", "if", "(minit>", "0", ")\n                {\n                    ", "second=59;", "\n                    minit--;\n                }\n                ", "else", "\n                {\n                    ", "second=0;", "\n                    ", "timeover=1;", "\n                    ", "playon=0;", "\n                    ", "TR0=0;", "\n                    ", "TR1=1;", "\n                }\n            }\n            sec24--;\n            ", "if", "(sec24<=", "0", ")\n            {\n                ", "if", "((minit+second)!=", "0", ")\n                {\n                    ", "alam=0;", "\n                    ", "TR0=0;", "\n                }\n                ", "sec24=0;", "\n            }\n        }\n       }\n}\n\nvoid  time1_int(void) interrupt ", "3", "//开定时器中断", "1", "\n{\n    ", "TL1=0xb0;", "\n     ", "TH1=0x3c;", "\n     ", "TR1=1;", "\n      count1++;\n    ", "if", "(", "count1==10)", "\n    {\n        ", "alam=0;", "\n    }\n\n       ", "if", "(", "count1==20)", "\n       {\n        ", "count1=0;", "\n        ", "alam=1;", "\n    }\n} \n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;因为数据类型都是char型&amp;#xff0c;取值范围是-128到127&amp;#xff0c;8&lt;em&gt;5&lt;/em&gt;3&amp;#61;120在取值范围内&amp;#xff0c;所以没问题&amp;#xff1b;但8&lt;em&gt;5&lt;/em&gt;4&amp;#61;160&amp;#xff0c;超过127&amp;#xff0c;溢出了&amp;#xff0c;就成为负数了。负数值等于160-256&amp;#61;-96&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["数据结构表达式求值。为什么8*5*3算出来是120，而8*5*4却是-96，想问一下哪里有问题?", ["\n", "\n", "#include<iostream>\nusing namespace std;\ntypedef int Status;\n#define MAXSIZE ", "100", "\ntypedef char ElemType;\ntypedef struct\n{\n    ElemType* base;\n    ElemType* top;\n    int stacksize;\n}SqStack;\nStatus InitStack(SqStack& s)", "//初始化", "\n{\n    s.base = new ElemType[MAXSIZE];\n    ", "if", " (s.base == NULL)\n        ", "return", " -", "1", ";\n    s.top = s.base;\n    s.stacksize = MAXSIZE;\n    ", "return", " ", "0", ";\n}\nStatus Push(SqStack& s, ElemType e)", "//入栈", "\n{\n    ", "if", " (s.top == s.stacksize + s.base)\n        ", "return", " -", "1", ";\n    *s.top = e;\n    s.top++;\n    ", "return", " ", "0", ";\n}\nStatus Pop(SqStack& s, ElemType& e)", "//出栈", "\n{\n    ", "if", " (s.base == s.top)\n        ", "return", " -", "1", ";\n    e = *(s.top - ", "1", ");\n    s.top--;\n    ", "return", " ", "0", ";\n}\nElemType GetTop(SqStack s)", "//取栈顶元素", "\n{\n    ", "if", " (s.top != s.base) \n        ", "return", " *(s.top - ", "1", ");\n}\nStatus In(ElemType ch)", "//判断是否为运算符", "\n{\n    ", "if", " (ch == ", "'+'", " || ch == ", "'-'", " || ch == ", "'*'", " || ch == ", "'/'", " || ch == ", "'('", " || ch == ", "')'", "||ch==", "'#'", ")\n        ", "return", " ", "1", ";\n    ", "else", "\n        ", "return", " ", "0", ";\n}\nStatus Precede(ElemType a, ElemType b)", "//比较符号优先级", "\n{\n    ", "if", " (a == ", "'#'", ")\n        ", "if", " (b == ", "'#'", ")\n            ", "return", " ", "'='", ";\n        ", "else", "\n            ", "return", " ", "'<'", ";\n    ", "if", " (a == ", "'+'", " || a == ", "'-'", ")\n        ", "if", " (b == ", "'*'", " || b == ", "'/'", " || b == ", "'('", ")\n            ", "return", " ", "'<'", ";\n        ", "else", "\n            ", "return", " ", "'>'", ";\n    ", "if", " (a == ", "'*'", " || a == ", "'/'", ")\n        ", "if", " (b == ", "'('", ")\n            ", "return", " ", "'<'", ";\n        ", "else", "\n            ", "return", " ", "'>'", ";\n    ", "if", " (a == ", "'('", ")\n        ", "if", " (b == ", "')'", ")\n            ", "return", " ", "'='", ";\n        ", "else", "\n            ", "return", " ", "'<'", ";\n    ", "if", " (a == ", "')'", ")\n        ", "return", " ", "'>'", ";\n}\nStatus Operate(ElemType a, ElemType ch, ElemType b)", "//进行二元运算", "\n{\n    ", "if", " (ch == ", "'+'", ")\n        ", "return", " a + b;\n    ", "if", " (ch == ", "'-'", ")\n        ", "return", " a - b;\n    ", "if", " (ch == ", "'*'", ")\n        ", "return", " a * b;\n    ", "if", " (ch == ", "'/'", ")\n        ", "return", " a / b;\n}\nint EvaluateExpression()\n{\n    SqStack OPND,OPTR;\n    char ch,m;\n    ElemType x, y;\n    InitStack(OPND);\n    InitStack(OPTR);\n    Push(OPTR,", "'#'", ");\n    cin >> ch;\n    ", "while", " (ch != ", "'#'", " || GetTop(OPTR) != ", "'#'", ")\n    {\n        ", "if", " (In(ch)==", "0", ")\n        {\n            Push(OPND, ch-", "'0'", ");\n            cin >> ch;\n        }\n        ", "else", "\n            switch (Precede(GetTop(OPTR), ch))\n            {\n            case ", "'<'", ":\n            {\n                Push(OPTR, ch);\n                cin >> ch;\n                ", "break", ";\n            }\n            case ", "'>'", ":\n            {\n                Pop(OPTR, m);\n                Pop(OPND, y);\n                Pop(OPND, x);\n                Push(OPND, Operate(x, m, y));\n                ", "break", ";\n            }\n            case ", "'='", ":\n            {\n                Pop(OPTR, m);\n                cin >> ch;\n                ", "break", ";\n            }\n            }\n    }\n    ", "return", " GetTop(OPND);\n}\nint main()\n{\n    cout << ", "\"输入表达式：\"", " << endl;\n    cout << ", "\"计算结果为：\"", " << EvaluateExpression();\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "offsetHeight,拼写错误", "Konwledge_Point": "优先级", "Question": ["【淡入淡出型菜单】为什么执行不了？", ["<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>淡入淡出型伸缩菜单</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n        }\n\n        #ul1 li {\n            width: 100px;\n            height: 20px;\n            line-height: 20px;\n            text-align: center;\n            position: relative;\n            float: left;\n            list-style: none;\n            background-color: #9F3;\n            border: 1px solid #660;\n        }\n\n        #ul1 li div {\n            background-color: black;\n            overflow: hidden;\n            height: 0;\n            position: absolute;\n            top: 20px;\n            width: 100%;\n            opacity: 0;\n            filter: alpha(opacity=0);\n        }\n\n        span {\n            display: block;\n        }\n    </style>\n\n    <script>\n        window.onload = function () {\n            var oUl = document.getElementById('ul1');\n            var aLi = oUl.getElementsByTagName('li');\n            var i = 0;\n\n            for (i = 0; i < aLi.length; i++) {\n                aLi[i].onmouseover = function () {\n                    var oDiv = this.getElementsByTagName('div')[0];\n\n                    oDiv.style.height = 'auto';\n                    var iHeight = oDiv.offetHeight;\n                    oDiv.style.height = 0; //从零开始展开\n\n                    startMove(oDiv, {\n                        opacity: 100,\n                        height: iHeight\n                    });\n                };\n\n                aLi[i].onmouseout = function () {\n                    var oDiv = this.getElementsByTagName('div')[0];\n\n                    oDiv.style.height = 'auto';\n                    var iHeight = oDiv.offetHeight;\n                    oDiv.style.height = 0;\n\n                    startMove(oDiv, {\n                        opacity: 0,\n                        height: 0\n                    });\n                };\n            }\n        }\n\n        //框架\n\n        function getStyle(obj, attr) {\n            if (obj.currentStyle) {\n                return obj.currentStyle[attr];\n            } else {\n                return getComputedStyle(obj, false)[attr];\n            }\n        }\n\n        function startMove(obj, json, fn) {\n            clearInterval(obj.timer);\n            obj.timer = setInterval(function () {\n                var bStop = true; //所有值都已经到达\n                for (var attr in json) {\n                    //去当前值\n                    var iCur = 0;\n\n                    if (attr == 'opacity') {\n                        iCur = parseInt(parseFloat(getStyle(obj, attr)) * 100);\n                    } else {\n                        iCur = parseInt(getStyle(obj, attr));\n                    }\n\n                    //算速度\n                    var iSpeed = (json[attr] - iCur) / 8;\n                    iSpeed = iSpeed > 0 ? Math.ceil(iSpeed) : Math.floor(iSpeed);\n\n                    //检测停止\n                    if (iCur != json[attr]) {\n                        bStop = false;\n                    }\n\n                    if (attr == 'opacity') {\n                        obj.style.filter = 'alpha(opacity=' + (iCur + iSpeed) + ')'; //优先级\n                        obj.style.opacity = (iCur + iSpeed) / 100;\n                    } else {\n                        obj.style[attr] = iCur + iSpeed + 'px';\n                    }\n                }\n\n                if (bStop) {\n                    clearInterval(obj.timer);\n\n                    if (fn) {\n                        fn();\n                    }\n                }\n            }, 30)\n        }\n    </script>\n</head>\n\n<body>\n    <ul id=\"ul1\">\n        <li>\n            布局\n            <div>\n                这里是布局\n                <span>这里是布局</span>\n                这里是布局\n                <span>这里是布局</span>\n            </div>\n        </li>\n        <li>\n            布局\n            <div>\n                这里是布局<br />\n                <span>这里是布局</span>\n                这里是布局\n                <span>这里是布局</span>\n            </div>\n        </li>\n        <li>\n            布局\n            <div>\n                这里是布局\n                <span>这里是布局</span>\n                这里是布局\n                <span>这里是布局</span>\n            </div>\n        </li>\n    </ul>\n</body>\n\n</html>\n"]], "Tag": "程序设计"}
{"Answer": "mysql实现：\r\nselect id,type,date,context from (\r\n\tselect id,\r\n\t(case type when 'A' then 2 when 'B' then 3 else 1 end) level,\r\n\ttype,\r\n\tdate,\r\n\tcontext\r\n\t from t_context \r\n) t\r\norder by t.level desc,t.date desc;\r\n\r\noracle的话，可以把case部分用decode代替", "Konwledge_Point": "优先级", "Question": ["怎样只用一条Select语句实现该规则下的排序？", ["我现在要写一条查询的SQL语句,试了很长时间还是没写出来,现求各位帮忙了~", "\n\n", " ", "\n\n", "假设有如下表格t_context，其中type共有A、B、C种类型，优先级依次为B>A>C，现在要查询该表格中的", "所有数据", "，不过须按如下规则排序：", "\n\n", "1、类型为B的排在第一，若有多条则按时间递减；", "\n\n", "2、类型为A的排在第二，若有多条则按时间递减；", "\n\n", "3、剩下的则按时间递减即可。", "\n\n", " ", "\n\n", " ", "\n\n", "\n", "\n", "id", "\n", "type", "\n", "date", "\n", "context", "\n", "\n", "\n", "1", "\n", "C", "\n", "xxxx-xx-xx xx:xx:xx", "\n", "...", "\n", "\n", "\n", "2", "\n", "C", "\n", "xxxx-xx-xx xx:xx:xx\n", "\n", "...", "\n", "\n", "\n", "3", "\n", "A", "\n", "xxxx-xx-xx xx:xx:xx\n", "\n", "...", "\n", "\n", "\n", "4", "\n", "C", "\n", "xxxx-xx-xx xx:xx:xx\n", "\n", "...", "\n", "\n", "\n", "5", "\n", "B", "\n", "xxxx-xx-xx xx:xx:xx\n", "\n", "...", "\n", "\n", "\n", "6", "\n", "\n", "A", "\n", "\n", "xxxx-xx-xx xx:xx:xx\n", "\n", "...", "\n", "\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", " ", "\n\n", "怎样用一条select语句实现这种规则的排序结果？"]], "Tag": "程序设计"}
{"Answer": "因为你需要在事件内使用事件外的循环变量i。\r\n当事件触发时，那个循环早就结束了，那时的i的值已经是循环最大值加1了。\r\n所以需要用一些方式保存住当前循环的i的值。\r\n用(function(i){})(i);闭包保存住当前循环的i的值。就是一种方案。", "Konwledge_Point": "优先级", "Question": ["为什么这个多标签的运动实现不了？", ["<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <style>\n\n        .main-guild {\n            font-size: 1.1rem;\n            font-weight: 700;\n        }\n\n        .a {\n            float: left;\n            position: relative;\n            height: 20px;\n            background: red;\n        }\n        .b {\n            /* 0-30 */\n            position: absolute;\n            width: 0px;\n            height: 1px;\n            background: blue;\n        }\n        .c{\n            /* 22   40 */\n            margin-left:22px; \n            height: 40px;\n        }\n        .main-guild li{\n            height: 20px;\n            margin-top: 20px;\n        }\n    </style>\n    <script>\n        window.onload = function () {\n            var a = document.getElementsByClassName('a');\n            var b = document.getElementsByClassName('b');\n            var c = document.getElementsByClassName('c');\n\n            var i = 0;\n\n            for(i=0;i<b.length;i++)\n            {\n                b[i].style.top=(a[0].offsetHeight/2-1)+'px';\n            }\n\n            for(i=0;i<c.length;i++)\n            {\n                c[i].onmouseover=function()\n                {\n                    startMove(b[i],{marginLeft:40});//是这里的问题，如何获取对应的元素执行？？\n                }\n            }\n        }\n\n        //完美运动框架：同时多个属性变化；不会相互影响\n\n        function getStyle(obj, attr) {\n            if (obj.currentStyle) {\n                return obj.currentStyle[attr];\n            } else {\n                return getComputedStyle(obj, false)[attr];\n            }\n        }\n\n        function startMove(obj, json, fn) {\n            clearInterval(obj.timer);\n            obj.timer = setInterval(function () {\n                var bStop = true;  //所有值都已经到达\n                for (var attr in json) {\n                //去当前值\n                    var iCur = 0;\n\n                    if (attr == 'opacity') {\n                        iCur = parseInt(parseFloat(getStyle(obj, attr)) * 100);\n                    } else {\n                        iCur = parseInt(getStyle(obj, attr));\n                    }\n\n                //算速度\n                    var iSpeed = (json[attr] - iCur) / 8;\n                    iSpeed = iSpeed > 0 ? Math.ceil(iSpeed) : Math.floor(iSpeed);\n\n                //检测停止\n                    if (iCur != json[attr]) {\n                        bStop=false;\n                    }\n\n                    if (attr == 'opacity') {\n                            obj.style.filter = 'alpha(opacity=' + (iCur + iSpeed) + ')'; //优先级\n                            obj.style.opacity = (iCur + iSpeed) / 100;\n                        } else {\n                            obj.style[attr] = iCur + iSpeed + 'px';\n                        }\n                    }\n\n                    if(bStop) {\n                        clearInterval(obj.timer);\n\n                        if (fn) {\n                            fn();\n                        }\n                    }\n            }, 30)\n        }\n    </script>\n</head>\n\n<body>\n    <div class=\"main-guild\">\n        <ul>\n            <li>\n                <div class=\"a\"><div class=\"b\"></div></div> <div class=\"c\"><a href=\"#\">Expose</a></div>\n            </li>\n            <li>\n                <div class=\"a\"><div class=\"b\"></div></div>  <div class=\"c\"><a href=\"#\">jsPDF</a></div>\n            </li>\n            <li>\n                <div class=\"a\"><div class=\"b\"></div></div>  <div class=\"c\"><a href=\"#\">BaySentry</a></div>\n            </li>\n            <li>\n                <div class=\"a\"><div class=\"b\"></div></div>  <div class=\"c\"><a href=\"#\">vtop</a></div>\n            </li>\n        </ul>\n\n    </div>\n\n</body>\n\n</html>\n"]], "Tag": "程序设计"}
{"Answer": "你的问题描述很模糊。\r\n\r\n\r\n看你里面是9个字节长，那么“只接受第一节数据”是什么意思？\r\n只有第一字节有数据，后面都是空？还是只发送了一次？\r\n是发送函数问题？还是接收函数有问题？还是2个都有问题？\r\n\r\n你说“接收很完整”，意思是能确定问题在发送上？\r\n\r\n\r\n这样没头绪的搞来搞去，你不觉得是在浪费时间吗？你怎么不给设备接个显示器呢？1602会操作吧？显示一下接收的数据不行吗？\r\n要是接不了1602，printf总会用吧！这不是经典的调试方法吗？", "Konwledge_Point": "优先级", "Question": ["求问，485通信串口助手只能接受到stm32发送的第一节数据，怎么办？", ["程序如下：", "\nvoid bsp_RS485_IRQHandler(void)//串口中断部分", "\n{", "\n    //判断有无溢出", "\n   if(USART_GetITStatus(RS485_usart, USART_IT_ORE)==SET)", "\n  {", "\n\n", "USART_ClearITPendingBit(RS485_usart, USART_IT_ORE);\nUSART_ReceiveData(RS485_usart);\n", "\n\n", "}", "\n        if(USART_GetITStatus(RS485_usart, USART_IT_RXNE) != RESET)", "\n        {", "\n            uart_buff[uart_p] = USART_ReceiveData(RS485_usart);", "\n            uart_p++;", "\n        ｝", "\n      USART_ClearITPendingBit(RS485_usart, USART_IT_RXNE);", "\n   }", "\n    if(uart_p == 9)", "\n    {", "\n     recivestate = 1;//接收到完整的数据时，将接受分析标志位置一", "\n     len = uart_p;", "\n     for(i = 0;i<uart_p;i++)//´«³öÊý¾Ý", "\n       {", "\n        uart_rx_buff[i] = uart_buff[i];//转移数据", "\n       }", "\n     //clean_rebuff();", "\n    }", "\n｝", "\n\n", "void main（）", "\n｛", "\n     RS485_init();", "\n\n", "u16 sum=0;", "\nvoid test()", "\n{", "\nu8 txbuff[1024];", "\nu8 buff[2] = {0x01,0x02};", "\nu16 i,cnt = 0;", "\n\n", "if(recivestate == 1)", "\n{", "\n  recivestate = 0;", "\n  for(i=1;i\n{", "\n  sum += uart_rx_buff[i];", "\n}", "\n   if(uart_rx_buff[cnt] == title1_send && uart_rx_buff[cnt+1] == title2_send)", "\n   {", "\n    if(uart_rx_buff[cnt+5] == (sum&0xff) && uart_rx_buff[cnt+6] == ((sum>>8)&0xff))", "\n\n", "{\n\n  switch(uart_rx_buff[cnt+2])\n {\n case 0x08: //选择功能\n  RS485_TX_EN();//切换到发送\n\n  RESEND(0x08,len);\n\n //RS485_delay(10000);\n   RS485_RX_EN();\n   break;\n ｝\n", "\n\n", "｝", "\n  ｝", "\n\n", "void RESEND(u8 cmd,u8 L)//发送内容", "\n{", "\nu8 data_send[50];", "\nu8 cnt = 0;", "\nu16 i ,sum; ", "\n\n", "data_send[cnt++] = title1_send;", "\ndata_send[cnt++] = title2_send;", "\ndata_send[cnt++] = cmd;", "\ndata_send[cnt++] = L;", "\n\n", "for(i=1;i\n{", "\n  sum += data_send[i];", "\n}", "\ndata_send[cnt++] = (sum&0xff);", "\ndata_send[cnt++] = ((sum>>8)&0xff);", "\ndata_send[cnt++] = 0X0D;", "\ndata_send[cnt++] = 0X0A;", "\n\n", "USART_send_array(RS485_usart,data_send,cnt-1);", "\n}", "\n\n", "//发送数组", "\nvoid USART_send_array(USART_TypeDef *pUSARTx,u8 *array,u8 len)", "\n{", "\nu8 i=0;", "\nwhile(i<len)", "\n{", "\nUSART_SendData(pUSARTx,array[i]);", "\n  while( USART_GetFlagStatus(pUSARTx,USART_FLAG_TC)!= SET);", "\ni++;", "\n}", "\n}", "\n\n", "｝", "\n\n", "配置文件", "\n\n", "void RS485_configure()", "\n{", "\n    GPIO_InitTypeDef GPIO_InitStructure;", "\n    USART_InitTypeDef USART_InitStructure;", "\n    NVIC_InitTypeDef NVIC_InitStructure; ", "\n    //配置时钟", "\n    RCC_APB2PeriphClockCmd(RS485_usart_clk,ENABLE);", "\n    RCC_APB2PeriphClockCmd(RS485_USART_RX_GPIO_CLK,ENABLE);", "\n    RCC_APB2PeriphClockCmd(RS485_USART_TX_GPIO_CLK,ENABLE);", "\n    RCC_APB2PeriphClockCmd(RS485_USART_PE_GPIO_CLK,ENABLE);", "\n    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);", "\n        //配置引脚", "\n    GPIO_InitStructure.GPIO_Pin=RS485_usart_TX_PIN; ", "\n    GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF_PP;", "\n    GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz; ", "\n    GPIO_Init(RS485_USART_TX_GPIO_PORT,&GPIO_InitStructure);                   ", "\n\n", "GPIO_InitStructure.GPIO_Pin=RS485_usart_RX_pin; \nGPIO_InitStructure.GPIO_Mode=GPIO_Mode_IN_FLOATING;     \nGPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;\nGPIO_Init(RS485_USART_RX_GPIO_PORT,&GPIO_InitStructure);  \n\nGPIO_InitStructure.GPIO_Pin=RS485_RE_PIN; \nGPIO_InitStructure.GPIO_Mode=GPIO_Mode_Out_PP;     \nGPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;\nGPIO_Init(RS485_RE_GPIO_PORT,&GPIO_InitStructure);\n//配置中断优先级\nNVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);\nNVIC_InitStructure.NVIC_IRQChannel = RS485_INT_IRQ;      \nNVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;    \nNVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;       \nNVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;          \nNVIC_Init(&NVIC_InitStructure);\n", "\n\n", "//使能中断", "\n   USART_ITConfig(RS485_usart, USART_IT_RXNE, ENABLE);", "\n   USART_ITConfig(RS485_usart, USART_IT_IDLE, ENABLE);", "\n   USART_ITConfig(RS485_usart, USART_IT_ORE, ENABLE);", "\n   //设置为接收状态", "\n    GPIO_ResetBits(RS485_RE_GPIO_PORT,RS485_RE_PIN);", "\n}", "\n\n", "中断里接收到的数据是完整的，比如接收到了3A 16 08 01 00 .... 0D 0A,我想mcu返回3A 16 09 02.....,全速运行后结果只返回了一个3A，然后程序卡住了，之后再怎么发都不返回了，停下来就发现一直在中断里面。我查了下数据，数据也有传到uart_rx_buff[]里面了。求各位大神帮帮忙!!!!!!(还有一点，我按照网上的说法在发送后面加了个延时函数，就发送了3A 16，之后无论怎么加大延时函数也是发这两个。)"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;报错内容贴出来看看呢。　&lt;/p&gt;\n&lt;p&gt;devc&amp;#43;&amp;#43;中能运行&amp;#xff0c;说明语法是没有错的&amp;#xff1b;猜想原因是两个软件的string.h库不一致引起的&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["在dev中能运行，在VS中运行不了", ["这段代码在dev中可以运行，但是到vs里运行不了，该怎么修改才能运行啊 ", "\n", "#include<stdio.h>", "\n", "#include<stdlib.h>", "#include<string.h>", "\n", "#define maxn 100005", "\n", "char s[maxn]={0}, infixList[maxn][10]={0};", "\n", "char suffix[maxn][10]={0};", "\n", "int p = 0;", "\n", "char tmp[maxn]={0};", "\n", "int p1 = 0;", "\n", "//把字符串根据操作数、运算符、括号拆开，存储到infixList数组中", "int toInfixExpression(char* s)", "{", "    int tot = 0,", "        n = strlen(s);  //字符串长度", "    for (int i = 0; i < n; i++)", "    {", "        if (s[i] >= '0' && s[i] <= '9' || 'A' <= s[i] && s[i] <= 'F') {", "            int p = 0;", "            infixList[tot][p++] = s[i];", "\n", "        while (i + ", "1", " < n && (s[i + ", "1", "] >= ", "'0'", " && s[i + ", "1", "] <= ", "'9'", ") || (", "'A'", " <= s[i+", "1", "] && s[i+", "1", "] <= ", "'F'", ")) {\n            infixList[tot][p++] = s[++i];\n        }\n        tot++;//移动到下一位\n    }\n    else if (s[i] == ", "' '", ") \n    {\n        continue;\n    }\n    else {\n        infixList[tot++][", "0", "] = s[i];\n    }\n}\nreturn tot;  //返回存放位数（放到第几位了）\n", "\n", "}", "\n", "//获得优先级", "\n", "int getPriority(char c) {", "    if (c == '+' || c == '-')", "        return 1;", "    else if (c == '*' || c == '/')", "        return 2;", "    else", "        return 0;  //处理'('的情况", "}", "\n", "//转换成后缀表达式", "void parseSuffixExpression(char s[][10], int n) {", "    for (int i = 0; i < n; i++) {", "        if (s[i][0] >= '0' && s[i][0] <= '9' || 'A'<= s[i][0] && s[i][0] <='F') {", "            strcpy_s(suffix[p++], s[i]);", "        }", "        else if (s[i][0] == '(') {", "            tmp[p1++] = s[i][0];", "        }", "        else if (s[i][0] == ')') {", "            while (tmp[p1 - 1] != '(') {", "                suffix[p++][0] = tmp[--p1];", "            }", "            p1--;", "        }", "        else {", "            while (p1 != 0 && getPriority(tmp[p1 - 1]) >= getPriority(s[i][0])) {", "                suffix[p++][0] = tmp[--p1];", "            }", "            tmp[p1++] = s[i][0];", "        }", "    }", "    while (p1 != 0) {", "        suffix[p++][0] = tmp[--p1];", "    }", "}", "\n", "int hexToDecimal(char* p) {", "    int n = 0;", "    int len = 0, i = 0;", "    while (p[i] != '\\0')", "    {", "        len += 1;", "        i++;", "    }", "    for (i = 0; i < len; i++)", "    {", "        if ('0' <= p[i] && p[i] <= '9')", "        {", "            n = n * 10 + p[i] - '0';", "        }", "        else", "        {", "            n = n * 10 + p[i] - 55;", "        }", "    }", "    return n;", "}", "\n", "//计算后缀表达式的值", "int calculate() {", "\n", "int", " tt[", "50", "] = { ", "0", " };\nchar n1[", "50", "] = { ", "'\\0'", " };\nchar n2[", "50", "] = { ", "'\\0'", " };\nchar n3[", "50", "] = { ", "'\\0'", " };\n\n", "int", " ", "pos", " = ", "0", ";\n", "int", " m = ", "1", ";\n", "for", " (", "int", " i = ", "0", "; i < p; i++) {\n    ", "int", " k = strlen(suffix[i]);\n    ", "if", " (suffix[i][", "0", "] >= ", "'0'", " && suffix[i][", "0", "] <= ", "'9'", " || ", "'A'", " <= suffix[i][", "0", "] && suffix[i][", "0", "] <= ", "'F'", ") {\n        ", "//", "tt[", "pos", "++] = hexToDecimal(suffix[i]);\n        sscanf(suffix[i], ", "\"%X\"", ", &tt[", "pos", "++]);\n    }\n    ", "else", " {\n\n        ", "int", " b = tt[--", "pos", "];\n        ", "sprintf", "(n2, ", "\"%X\"", ", b);\n\n        ", "int", " a = tt[--", "pos", "];\n        ", "sprintf", "(n1, ", "\"%X\"", ", a);\n\n        ", "int", " res = ", "0", ";\n        ", "if", " (suffix[i][", "0", "] == ", "'+'", ") {\n            res = a + b;\n        }\n        ", "else", " ", "if", " (suffix[i][", "0", "] == ", "'-'", ") {\n            res = a - b;\n        }\n        ", "else", " ", "if", " (suffix[i][", "0", "] == ", "'*'", ") {\n            res = a * b;\n        }\n        ", "else", " ", "if", " (suffix[i][", "0", "] == ", "'/'", ") {\n            ", "if", " (b == ", "0", ") {\n                ", "printf", "(", "\"除数不能为0！\\n\"", ");\n                ", "return", " -", "1", ";\n            }\n            res = a / b;\n        }\n\n        ", "sprintf", "(n3, ", "\"%X\"", ", res);\n\n        ", "printf", "(", "\"(%d) %s %c %s = %s\\n\"", ", m++, n1, suffix[i][", "0", "], n2, n3);\n\n        tt[", "pos", "++] = res;\n    }\n}\n\n", "return", " tt[", "0", "];\n", "\n", "}", "\n", "int main() {", "\n", "printf(", "\"请输入待计算的表达式：\"", ");\n", "//fflush(stdin);", "\n    \nmemset(s,", "'\\0'", ", maxn);\nscanf", "_s(", "\"%[^\\n]s\"", ", ", "s", ")", ";\n\n", "int", " infixNum = ", "0", ";\n", "int", " infixNum=", "to", "InfixExpression(", "s", ")", ";\nparse", "SuffixExpression(", "infixList", ", ", "infixNum", ")", ";\n", "int", " ans=", "0", ";\n", "int", " ans = calculate", "()", ";\nprintf(", "\"运算结果为:%X\\n\"", ", ans);\n", "\n", "}", "\n", "报错如下：", "documents\\visual studio 2010\\projects\\234567\\234567\\1.cpp(66): warning C4996: 'strcpy': This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.", "1>          c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\string.h(105) : 参见“strcpy”的声明", "1>c:\\users\\chen'tao\\documents\\visual studio 2010\\projects\\234567\\234567\\1.cpp(126): warning C4996: 'sscanf': This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.", "1>          c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\stdio.h(325) : 参见“sscanf”的声明", "1>c:\\users\\documents\\visual studio 2010\\projects\\234567\\234567\\1.cpp(131): warning C4996: 'sprintf': This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.", "1>          c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\stdio.h(371) : 参见“sprintf”的声明", "1>c:\\users\\documents\\visual studio 2010\\projects\\234567\\234567\\1.cpp(134): warning C4996: 'sprintf': This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.", "1>          c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\stdio.h(371) : 参见“sprintf”的声明", "1>c:\\users\\documents\\visual studio 2010\\projects\\234567\\234567\\1.cpp(154): warning C4996: 'sprintf': This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.", "1>          c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\stdio.h(371) : 参见“sprintf”的声明", "1>c:\\users\\documents\\visual studio 2010\\projects\\234567\\234567\\1.cpp(171): warning C4996: 'scanf': This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.", "1>          c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\stdio.h(304) : 参见“scanf”的声明", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "程序设计"}
{"Answer": "[quote]public void scheduleAtFixedRate(TimerTask task,\r\n                                long delay,\r\n                                long period)安排指定的任务在指定的延迟后开始进行重复的固定速率执行。以近似固定的时间间隔（由指定的周期分隔）进行后续执行。 \r\n在固定速率执行中，根据已安排的初始执行时间来安排每次执行。如果由于任何原因（如垃圾回收或其他背景活动）而延迟了某次执行，则将快速连续地出现两次或更多的执行，从而使后续执行能够“追赶上来”。从长远来看，执行的频率将正好是指定周期的倒数（假定 Object.wait(long) 所依靠的系统时钟是准确的）。\r\n[/quote]", "Konwledge_Point": "优先级", "Question": ["关于java中使用timer进行线程调度", ["在使用timer进行线程调度时出现这样一种问题，求大侠们指教", "\n主程序入口", "\n[code=\"java\"]", "\npublic class App {", "\n  public static void main(String[] args) throws Exception {", "\n    Timer fileTransportTimer=new Timer(\"fileTransportTimer\");", "\n    fileTransportTimer.scheduleAtFixedRate(new FileTransportTimer(),        3000, 1000*30);", "\n  }", "\n}", "\n[/code]", "\n\n", "定时任务线程", "\n[code=\"java\"]", "\npublic class FileTransportTimer extends TimerTask{", "\npublic static boolean isRun = false;", "\n\n", "public void run() {", "\n        if (isRun) {", "\n            return;", "\n        }", "\n        isRun = true;", "\n        SimpleDateFormat format = new SimpleDateFormat(\"hh:mm:ss\");", "\n        logger.info(\"开始扫描并发送文件!\");", "\n        try{", "\n            //扫描目录,判断是否有待发送的文件", "\n            String path=AppStart.cache.getLocalFilePath();", "\n            File root=new File(path);", "\n            if(!root.isDirectory()){", "\n                throw new Exception(\"file root is not a directory\");", "\n            }", "\n            File[] files=root.listFiles();", "\n            for(int i=0;i<files.length;i++){", "\n                File tmp=files[i];", "\n                if(tmp.isFile()){", "\n                    try {                       MQHandler.sendFile(tmp);", "\n                    } catch (Exception e) {", "\n                        e.printStackTrace();", "\n                    }", "\n                }", "\n                break;", "\n            }", "\n            logger.info(\"发送文件任务结束!\");", "\n        }catch(Exception e){", "\n            logger.error(\"发送文件任务错误!\");", "\n            e.printStackTrace();", "\n        }finally{", "\n            isRun=false;", "\n        }", "\n    }", "\n\n", "}", "\n[/code]", "\n\n", "这里已经进行了运行状态的控制，程序确实也是这样的一个执行结果，但每次在执行完成后", "\n都会有这样的日志输出", "\n[color=red]", "\n2013-02-21 16:01:08 com.rf.thread.FileTransportTimer开始扫描并发送文件!", "\n2013-02-21 16:01:08 com.rf.util.MQHandler文件War3x.mpq高优先级", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer发送文件任务结束!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer开始扫描并发送文件!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer发送文件任务结束!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer开始扫描并发送文件!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer发送文件任务结束!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer开始扫描并发送文件!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer发送文件任务结束!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer开始扫描并发送文件!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer发送文件任务结束!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer开始扫描并发送文件!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer发送文件任务结束!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer开始扫描并发送文件!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer发送文件任务结束!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer开始扫描并发送文件!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer发送文件任务结束!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer开始扫描并发送文件!", "\n2013-02-21 16:05:20 com.rf.thread.FileTransportTimer发送文件任务结束!", "\n2013-02-21 16:05:38 com.rf.thread.FileTransportTimer开始扫描并发送文件!", "\n2013-02-21 16:05:38 com.rf.thread.FileTransportTimer发送文件任务结束!", "\n[/color]", "\n处理文件的时候线程正在运行，新的定时任务不会执行到文件处理的代码部分就会return掉，但当第一个定时任务执行完成后，一下子就打印出了好多后面的这些日志，这点不太明白？？？"]], "Tag": "程序设计"}
{"Answer": "曾经我也搞过这个 IIS6.0+Tomcat6.0整合. \r\n  不过好像跟你的设置方法有些不同的地方.\r\n  不过好使过. 但是后来. 怎么设置都不好使了. 不知道是哪里出问题了.\r\n  也许是太心急. 后来就再也没弄过. 不过我知道. 我那儿正常使用过. 呵呵\r\n  如果需要资料.\r\n  给我发邮件. 我发给你.\r\n  jingfei_cai@126.com", "Konwledge_Point": "优先级", "Question": ["window 2003 32位 +IIS6+ tomcat6整合问题", ["ISAPI 加载失败功能，访问权限已排除，JK版 尝试过isapi_redirect-1.2.28.dll 、1.2.20、1.0.9", "\n\n", "我的操作步骤::", "\n\n", "一、为IIS写注册表", "\n\n", "Windows Registry Editor Version 5.00", "\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Apache Software Foundation]", "\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Apache Software Foundation\\Jakarta Isapi Redirector]", "\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Apache Software Foundation\\Jakarta Isapi Redirector\\1.0]", "\n\"extension_uri\"=\"/jakarta/isapi_redirect-1.2.28.dll\"", "\n\"worker_file\"=\"D:\\tomcat\\conf\\workers.properties\"", "\n\"worker_mount_file\"=\"D:\\tomcat\\conf\\uriworkermap.properties\"", "\n\"log_file\"=\"D:\\tomcat\\logs\\isapi.log\"", "\n\n", "\"log_level\"=\"info\"", "\n\n", "二、建立配置文件", "\n        按照注册表里所写的，在D:\\tomcat\\conf目录下建立两个配置文件，workers.properties和uriworkermap.properties其内容分别为:", "\n\n", "workers.properties的内容：", "\n\n", "worker.list=ajp13", "\n\n", "worker.ajp13.type=ajp13", "\nworker.ajp13.host=", "www.myyuming.com", "\n\n", "worker.ajp13.port=8009", "\n\n", "uriworkermap.properties的内容：", "\n\n", "/*.jsp=ajp13", "\n\n", "/*.do=ajp13", "\n\n", "三、为jk建立物理目录", "\n\n", "在 D:\\tomcat\\bin目录下建立新目录jakarta，把下载的isapi_redirect-1.2.28.dll文件放到该目录下。", "\n\n", "四、设置筛选器", "\n在IIS管理器左侧网站下面选中新建的web站点，右键选择属性,在ISAPI筛选器标签页添加筛选器，名字为jakarta，路径为isapi_redirect-1.2.27.dll的路径名，即D:\\Tomcat 6.0\\bin\\jakarta\\isapi_redirect-1.2.27.dll。如果成功重新进入属性页，则该新建的筛选器会有一个绿色向上箭头，优先级为高，这说明jk模块加载成功。否则为红色，这时要检查isapi_redirect.dll所在目录的权限或路径是否正确，如果都没问题，那么就访问一下", "http://www.myyuming.com:8080和http://www.myyuming.com", " 把IIS和Tomcat，再去检查下应该为绿色了。", "\n\n", "到这里出问题了，请帮助，谢谢"]], "Tag": "程序设计"}
{"Answer": "谢谢大家帮忙，程序我已经调出来了\r\n问题在于运算符的入栈与出栈，碰到 - * + 时，有点小问题，应该继续比较优先级。\r\n正确代码如下：\r\n\r\n\r\n#include&lt;stdio.h&gt;\r\n#include&lt;stdlib.h&gt;\r\n#include&lt;string.h&gt;\r\n#define MAXZISE 100\r\nstruct oper\r\n{\r\n    char name;\r\n    int priority;\r\n    int opnum;\r\n};\r\ntypedef struct oper OPERATOR;\r\nOPERATOR opStack[MAXZISE];\r\nint OTop=-1;\r\nint numStack[MAXZISE];\r\nint NTop=-1;\r\nvoid pushOp(OPERATOR op)//运算符压栈\r\n{\r\n    if (OTop&lt;MAXZISE-1){\r\n        opStack[++OTop] = op;\r\n    }\r\n}\r\nOPERATOR popOp()//运算符出栈\r\n{\r\n    if (OTop&gt;= 0){\r\n        return opStack[OTop--];\r\n    }\r\n}\r\nvoid pushNum(int num)//操作数压栈\r\n{\r\n    if (NTop&lt;MAXZISE-1){\r\n        numStack[++NTop] = num;\r\n    }\r\n}\r\nint popNum()//操作数出栈\r\n{\r\n    if (NTop &gt;= 0){\r\n        return numStack[NTop--];\r\n    }\r\n}\r\nint getPriority(char name)//获取一个字符所代表的运算符的优先级\r\n{\r\n    if (name=='('||name==')'){\r\n        return 0;\r\n    }\r\n    if (name=='*'||name=='/'){\r\n        return 3;\r\n    }\r\n    if (name=='-'||name=='+'){\r\n        return 2;\r\n    }\r\n}\r\nint getOpNum(char name)//获取一个字符所代表的运算符的目数\r\n{\r\n    if (name=='*'||name=='/'||name=='+'||name=='-'){\r\n        return 2;\r\n    }\r\n    if (name=='('||name==')'){\r\n        return 0;\r\n    }\r\n}\r\nint change(char *s, int *i)//将数字从字符串转换到整型 \r\n{\r\n    int j = 0;\r\n    char numstr[MAXZISE];\r\n    while ((*s) &gt;= '0' &amp;&amp; *s &lt;= '9')\r\n    {\r\n        numstr[j++] = (*s);\r\n        s++;\r\n    }\r\n    (*i) = (*i) + j;\r\n    numstr[j] = '\\0';\r\n    return atoi(numstr);\r\n}\r\nint opertateNum(OPERATOR op)//从操作数栈中弹出两个操作数，完成运算\r\n{\r\n    int num2=popNum();\r\n    int num1=popNum();\r\n    if (op.name=='+'){\r\n        return num1 + num2;\r\n    }\r\n    if (op.name=='-'){\r\n        return num1 - num2;\r\n    }\r\n    if (op.name=='*'){\r\n        return num1 * num2;\r\n    }\r\n    if (op.name=='/'){\r\n        return num1 / num2;\r\n    }\r\n}\r\nint main()\r\n{\r\n    char S[MAXZISE];\r\n    int i,j;\r\n    OPERATOR op,topOp;\r\n    topOp.name='#';\r\n    topOp.priority=0;\r\n    topOp.opnum=0;\r\n    pushOp(topOp);\r\n    gets(S);\r\n    for(i=0;i&lt;strlen(S);i++){\r\n         if(S[i]!=' ') \r\n              S[j++]=S[i]; \r\n      }\r\n      S[j]='\\0'; \r\n    for(i=0; S[i]!='\\0'&amp;&amp;S[i]!='=';){\r\n        if (S[i]&gt;='0'&amp;&amp;S[i]&lt;='9'){\r\n            pushNum(change(&amp;S[i], &amp;i));\r\n        }\r\n        else{\r\n            op.name=S[i];\r\n            op.priority=getPriority(S[i]);\r\n            op.opnum=getOpNum(S[i]);\r\n            topOp=popOp();\r\n            if (op.name=='('){\r\n                //如果是'('，将从栈顶弹出的运算符压回栈内，并将当前运算符则压栈\r\n                pushOp(topOp);\r\n                pushOp(op);\r\n            }\r\n            else if(op.name==')'){\r\n                //如果是')'，则进行运算，每次运算结果作为一个操作数压入操作数栈，直到将'('弹出运算符栈\r\n                while (topOp.name!='('){\r\n                    pushNum(opertateNum(topOp));\r\n                    topOp=popOp();\r\n                }\r\n            }\r\n            else{\r\n                while(topOp.name !='#'&amp;&amp; op.priority&lt;= topOp.priority){\r\n                    pushNum(opertateNum(topOp));\r\n                    topOp=popOp();\r\n                }\r\n                if(topOp.name =='#'|| op.priority&gt; topOp.priority){\r\n                    pushOp(topOp);\r\n                }\r\n                pushOp(op);\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n    \r\n    while ((topOp=popOp()).name!='#'){\r\n        pushNum(opertateNum(topOp));\r\n    }\r\n    printf(\"%d\\n\", popNum());\r\n    return 0;\r\n}\r\n\r\n**进行改动的代码是这几行：**\r\nwhile(topOp.name !='#'&amp;&amp; op.priority&lt;= topOp.priority){\r\n                pushNum(opertateNum(topOp));\r\n                topOp=popOp();\r\n            }\r\n            if(topOp.name =='#'|| op.priority&gt; topOp.priority){\r\n                pushOp(topOp);\r\n            }", "Konwledge_Point": "优先级", "Question": ["C语言 计算器问题(请大神看一下)", ["123+213-67*34+345/23*45*（34+34-345+245+567）=359 183 ", "\n可我的程序等于-363067   代码如下", "\n\n", "#include", "\n#include", "\n#include", "\n#define MAXZISE 1000", "\nstruct oper", "\n{", "\n    char name;", "\n    int priority;", "\n    int opnum;", "\n};", "\ntypedef struct oper OPERATOR;", "\nOPERATOR opStack[MAXZISE];", "\nint OTop=-1;", "\nint numStack[MAXZISE];", "\nint NTop=-1;", "\nint getPriority(char name)//获取一个字符所代表的运算符的优先级", "\n{", "\n    if (name=='('||name==')'){", "\n        return 0;", "\n    }", "\n    if (name=='*'||name=='/'){", "\n        return 2;", "\n    }", "\n    if (name=='+'||name=='-'){", "\n        return 1;", "\n    }", "\n}", "\nint getOpNum(char name)//获取一个字符所代表的运算符的目数", "\n{", "\n    if (name=='*'||name=='/'||name=='+'||name=='-'){", "\n        return 2;", "\n    }", "\n    if (name=='('||name==')'){", "\n        return 0;", "\n    }", "\n}", "\nvoid pushOp(OPERATOR op)//运算符压栈", "\n{", "\n    if (OTop\n        opStack[++OTop] = op;", "\n    }", "\n}", "\nOPERATOR popOp()//运算符出栈", "\n{", "\n    if (OTop>= 0){", "\n        return opStack[OTop--];", "\n    }", "\n}", "\nvoid pushNum(int num)//操作数压栈", "\n{", "\n    if (NTop\n        numStack[++NTop] = num;", "\n    }", "\n}", "\nint popNum()//操作数出栈", "\n{", "\n    if (NTop >= 0){", "\n        return numStack[NTop--];", "\n    }", "\n}", "\nint change(char ", "s, int *i)//将数字从字符串转换到整型 ", "\n{", "\n    int j = 0;", "\n    char str[MAXZISE];", "\n    while ((*s) >= '0' && *s <= '9')", "\n    {", "\n        str[j++] = (*s);", "\n        s++;", "\n    }", "\n    (*i) = (*i) + j;", "\n    str[j] = '\\0';", "\n    return atoi(str);", "\n}", "\nint opertateNum(OPERATOR op)//从操作数栈中弹出两个操作数，完成一次双目运算", "\n{", "\n    int num2=popNum();", "\n    int num1=popNum();", "\n    if (op.name=='+'){", "\n        return num1 + num2;", "\n    }", "\n    if (op.name=='-'){", "\n        return num1 - num2;", "\n    }", "\n    if (op.name=='", "'){", "\n        return num1 * num2;", "\n    }", "\n    if (op.name=='/'){", "\n        return num1 / num2;", "\n    }", "\n}", "\nint main()", "\n{", "\n    char S[MAXZISE];", "\n    int i,j;", "\n    OPERATOR op, topOp;", "\n    topOp.name = '#';", "\n    topOp.priority = 0;", "\n    topOp.opnum = 0;", "\n    pushOp(topOp);", "\n    scanf(\"%s\", S);", "\n    for(i=0;i\n        if(S[i]!=' ') ", "\n            S[j++]=S[i]; ", "\n    }", "\n    S[j]='\\0'; ", "\n    for (i=0;S[i]!='\\0'&&S[i]!='=';){", "\n        if (S[i]>='0'&&S[i]<='9'){", "\n            pushNum(change(&S[i], &i));", "\n        }", "\n        else{", "\n            op.name = S[i];", "\n            op.priority = getPriority(S[i]);", "\n            op.opnum = getOpNum(S[i]);", "\n            topOp = popOp();", "\n            if (op.name == '('){", "\n                //如果是'('，将从栈顶弹出的运算符压回栈内，并将当前运算符则压栈", "\n                pushOp(topOp);", "\n                pushOp(op);", "\n            }", "\n            else if (op.name == ')'){", "\n                //如果是')'，则进行运算，每次运算结果作为一个操作数压入操作数栈，直到将'('弹出运算符栈", "\n                while (topOp.name != '('){", "\n                    pushNum(opertateNum(topOp));", "\n                    topOp = popOp();", "\n                }", "\n            }", "\n            else{", "\n                if (topOp.name !='#'&& op.priority<= topOp.priority){", "\n                    pushNum(opertateNum(topOp));", "\n                }", "\n                else{", "\n                    pushOp(topOp);", "\n                }", "\n                pushOp(op);", "\n            }", "\n            i++;", "\n        }", "\n    }", "\n    while ((topOp = popOp()).name!='#'){", "\n        pushNum(opertateNum(topOp));", "\n    }", "\n    printf(\"%d\\n\", popNum());", "\n    return 0;", "\n}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;改成void main(int argc, char** argv)&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["C++捕获本机网卡IP包并解析的程序中void main(int argc,char *argv[]) 出错了，希望能帮我改正", ["#", "include", "<iostream>", " ", "\n", "#", "include", "<winsock2.h>", " ", "\n", "#", "include", "<ws2tcpip.h>", " ", "\n", "#", "include", "<fstream>", "\n", "#", "include", " ", "<windows.h>", " ", "\n", "#", "pragma", " comment(lib,", "\"ws2_32\"", ") ", "//指定连接到网络应用和internet", "\n", "#", "define", " IO_RCVALL _WSAIOW(IOC_VENDOR,1)", "\n", "using", " ", "namespace", " std; \n", "typedef", " ", "struct", " ", "IP_HEAD", " \n{ \n", "union", " ", "//定义联合", "\n{ \n", "unsigned", " ", "char", " Version; \n", "unsigned", " ", "char", " HeadLen; \n}; \n", "unsigned", " ", "char", " ServiceType; \n", "unsigned", " ", "short", " TotalLen; \n", "unsigned", " ", "short", " Identifier; \n", "union", " \n{ \n", "unsigned", " ", "short", " Flags; ", "//标志 ", "\n", "unsigned", " ", "short", " FragOffset; ", "//分段偏移 ", "\n}; \n", "unsigned", " ", "char", " TimeToLive; ", "//生存时间 ", "\n", "unsigned", " ", "char", " Protocol; \n", "unsigned", " ", "short", " HeadChecksum; \n", "unsigned", " ", "int", " SourceAddr; \n", "unsigned", " ", "int", " DestinAddr; \n", "unsigned", " ", "char", " Options; \n}ip_head; ", "//定义IP头部的数据结构", "\n", "void", " ", "main", "(", "int", " argc,", "char", " *argv[])", " \n", "{ \n", "ofstream ", "outfile", "(", "\"C:\\\\logfile.txt\"", ",ios::out)", ";\n", "if", "(argc!=", "2", ") \n{ \ncout<<endl<<", "\"请以下格式输入命令行:PackParse packet_sum\"", "<<endl; \n", "return", "; \n} \nWSADATA WSAData; \n", "if", "(", "WSAStartup", "(", "MAKEWORD", "(", "2", ",", "2", "), &WSAData)!=", "0", ") \n{ \ncout<<endl<<", "\"WSASTartup初始化失败\"", "<<endl; \n", "return", "; \n} \nSOCKET sock=", "socket", "(AF_INET,SOCK_RAW,IPPROTO_IP); ", "//三个参分别为通信发生的区字段，套接字的类型，与IP协议", "\n", "if", "(sock==INVALID_SOCKET) \n{ \ncout<<endl<<", "\"创建Socket失败!\"", "<<endl; \n", "closesocket", "(sock); \n", "WSACleanup", "(); \n} \nBOOL flag=TRUE; \n", "if", "(", "setsockopt", "(sock,IPPROTO_IP,IP_HDRINCL,(", "char", " *) &flag,", "sizeof", "(flag))==SOCKET_ERROR) \n{ \ncout<<endl<<", "\"setsockopt操作失败:\"", "<<", "WSAGetLastError", "()<<endl; \n", "closesocket", "(sock); \n", "WSACleanup", "(); \n} \n", "char", " hostName[", "128", "];", "//获取主机名 ", "\n", "if", "(", "gethostname", "(hostName,", "100", ")==SOCKET_ERROR) \n{ \ncout<<endl<<", "\"gethostname操作失败:\"", "<<", "WSAGetLastError", "()<<endl; \n", "closesocket", "(sock); \n", "WSACleanup", "(); \n} \nhostent *pHostIP; ", "//获取本地IP", "\n", "if", "((pHostIP=", "gethostbyname", "(hostName))==", "NULL", ") \n{ \ncout<<endl<<", "\"gethostbyname操作失败:\"", "<<", "WSAGetLastError", "()<<endl; \n", "closesocket", "(sock); \n", "WSACleanup", "(); \n} \nsockaddr_in host_addr;", "// ", "\nhost_addr.sin_family=AF_INET; \nhost_addr.sin_port=", "htons", "(", "6000", "); \nhost_addr.sin_addr=*(in_addr *)pHostIP->h_addr_list[", "0", "]; \n", "if", "(", "bind", "(sock,(PSOCKADDR)&host_addr,", "sizeof", "(host_addr))==SOCKET_ERROR) \n{ \ncout<<endl<<", "\"bind操作失败:\"", "<<", "WSAGetLastError", "()<<endl; \n", "closesocket", "(sock); ", "//绑定网卡", "\n", "WSACleanup", "(); \n} \nDWORD dwBufferLen[", "10", "]; \nDWORD dwBufferInLen=", "1", "; \nDWORD dwBytesReturned=", "0", "; \n", "if", "(", "WSAIoctl", "(sock , IO_RCVALL ,&dwBufferInLen , ", "sizeof", "(dwBufferInLen) , &dwBufferLen,", "sizeof", "(dwBufferLen),&dwBytesReturned,", "NULL", ",", "NULL", ")==SOCKET_ERROR) \n{ \ncout<<endl<<", "\"WSAIoctl操作失败:\"", "<<", "WSAGetLastError", "()<<endl; \n", "closesocket", "(sock); ", "//将网卡设为混杂模式，以接受所有数据", "\n", "WSACleanup", "(); \n} \ncout<<endl<<", "\"开始解析IP包:\"", "<<endl; \n", "char", " buffer[", "65535", "]; ", "//设置缓冲区", "\n", "int", " packsum=", "atoi", "(argv[", "1", "]); ", "//字符串转换为整形", "\n", "for", "(", "int", " i=", "0", ";i<packsum;i++) \n{ \n", "if", "(", "recv", "(sock,buffer,", "65535", ",", "0", ")>", "0", ") ", "//四个参数分别是套接字描述符，缓冲区的地址，缓冲区大小，附加标志", "\n{ \nip_head ip=*(ip_head *)buffer; \ncout<<", "\"-----------------------\"", "<<endl; \ncout<<", "\"版本:\"", "<<(ip.Version>>", "4", ")<<endl; ", "//获取头部长度字段", "\ncout<<", "\"头部长度:\"", "<<((ip.HeadLen &", "0x0f", ")*", "4", ")<<endl; ", "//获取头部长度字段", "\ncout<<", "\"服务类型:Priority\"", "<<(ip.ServiceType>>", "5", ")<<", "\", Service\"", "<<((ip.ServiceType>>", "1", ")&", "0x0f", ")<<endl;   ", "//优先级子域和TOS子域", "\ncout<<", "\"总长度:\"", "<<ip.TotalLen<<endl;", "//获取总长度字段 ", "\ncout<<", "\"标识符:\"", "<<ip.Identifier<<endl;", "//获取标识字段 ", "\ncout<<", "\"标志位:\"", "<<((ip.Flags>>", "15", ")&", "0x01", ")<<", "\",DF= \"", "<<((ip.Flags>>", "14", ")&", "0x01", ")<<", "\",Mf=\"", "<<((ip.Flags>>", "13", ")&", "0x01", ")<<endl; ", "//获得标志字段", "\ncout<<", "\"片偏移:\"", "<<(ip.FragOffset&", "0x1fff", ")<<endl; ", "//获取分段偏移字段", "\ncout<<", "\"生存周期:\"", "<<(", "int", ")ip.TimeToLive<<endl; ", "//获取生存时间字段", "\ncout<<", "\"协议:Protocol\"", "<<(", "int", ")ip.Protocol<<endl; ", "//获取协议字段", "\ncout<<", "\"头部校验和:\"", "<<ip.HeadChecksum<<endl; ", "//获取头校验和字段", "\ncout<<", "\"原地址:\"", "<<", "inet_ntoa", "(*(in_addr *)&ip.SourceAddr)<<endl; ", "//获取源IP地址字段", "\ncout<<", "\"目的IP地址:\"", "<<", "inet_ntoa", "(*(in_addr *)&ip.DestinAddr)<<endl; ", "//获取目的IP地址字段", "\noutfile<<", "\"-----------------------\"", "<<endl; \noutfile<<", "\"版本:\"", "<<(ip.Version>>", "4", ")<<endl; \noutfile<<", "\"头部长度:\"", "<<((ip.HeadLen &", "0x0f", ")*", "4", ")<<endl; \noutfile<<", "\"服务类型:Priority\"", "<<(ip.ServiceType>>", "5", ")<<", "\", Service\"", "<<((ip.ServiceType>>", "1", ")&", "0x0f", ")<<endl; \noutfile<<", "\"总长度:\"", "<<ip.TotalLen<<endl; \noutfile<<", "\"标识符:\"", "<<ip.Identifier<<endl; \noutfile<<", "\"标志位:\"", "<<((ip.Flags>>", "15", ")&", "0x01", ")<<", "\",DF= \"", "<<((ip.Flags>>", "14", ")&", "0x01", ")<<", "\",Mf=\"", "<<((ip.Flags>>", "13", ")&", "0x01", ")<<endl; \noutfile<<", "\"片偏移:\"", "<<(ip.FragOffset&", "0x1fff", ")<<endl; \noutfile<<", "\"生存周期:\"", "<<(", "int", ")ip.TimeToLive<<endl; \noutfile<<", "\"协议:Protocol\"", "<<(", "int", ")ip.Protocol<<endl; \noutfile<<", "\"头部校验和:\"", "<<ip.HeadChecksum<<endl; \noutfile<<", "\"原地址:\"", "<<", "inet_ntoa", "(*(in_addr *)&ip.SourceAddr)<<endl; \noutfile<<", "\"目的IP地址:\"", "<<", "inet_ntoa", "(*(in_addr *)&ip.DestinAddr)<<endl; \n} \n} \n", "closesocket", "(sock); \n", "WSACleanup", "(); \n}\n\n\n"]], "Tag": "程序设计"}
{"Answer": "不会调试啊不会调试。建议大学里专门开一门调试课。\r\n这个程序没啥大问题。你碰到的是因为回答y之后，直接把控字符串作为下一次的表达式了。解决方法是在scanf之后再用一个fflush就好了。\r\n另外有点小毛病。用户输入表达式没有以#结束，你也要想办法给个结果啊，哪怕是说“你输入的表达式错误”也是好的。", "Konwledge_Point": "优先级", "Question": ["请教数据结构后缀表达式 求值问题", ["要求是：设操作数：0，1，2，……，8，9（可扩充）；", "\n    运算符：+，—，*，/，（，），#（#号为结束）。", "\n    输入中缀表达式，如：5+(4—2)*3 #，将其转换成后缀表达式：542—3*+#，", "\n然后计算，本例结果为11。", "\n需要实现循环输入表达式，我虽然写了do-while却总是无法实现循环，不知道问题出在哪里。", "\n代码如下：", "\n#include", "\n#include", "\n#include", "\n#define Maxsize 100", "\ntypedef struct ", "\n{", "\n    char data[Maxsize];     //存放运算符", "\n    int top;    //栈顶指针", "\n}operation; //定义运算符栈", "\nvoid Mid_post(char mid[],char post[])", "\n{", "\n    char ch;", "\n    int i=0,j=0;    //i作为mid的下标，j作为post的下标", "\n    operation op;", "\n    op.top=-1;      //栈置空", "\n    ch=mid[i];", "\n    i++;", "\n    while(ch!='#')", "\n    {", "\n        switch(ch)", "\n        {", "\n        case '(':       //若ch为左括号，则进栈", "\n            op.top++;", "\n            op.data[op.top]=ch;", "\n            break;", "\n        case ')':       //若ch为右括号，则出栈，将其中的操作符赋给post[],直到栈顶为左括号", "\n            while(op.data[op.top]!='(')", "\n            {", "\n                post[j++]=op.data[op.top];", "\n                op.top--;", "\n            }", "\n            op.top--;       //将栈顶指针减一", "\n            break;", "\n        case '+':", "\n        case '-':", "\n            while (op.top!=-1 && op.data[op.top]!='(')  //'+'或'-'，优先级不大于栈顶任何运算符，栈顶出栈直到栈顶为左括号", "\n            {", "\n                post[j++]=op.data[op.top];", "\n                op.top--;", "\n            }", "\n            op.top++;       //'+'或'-'进栈", "\n            op.data[op.top]=ch;", "\n            break;", "\n        case '*':", "\n        case '/':", "\n            while(op.top!=-1 && op.data[op.top]!='(' ", "\n                && (op.data[op.top]=='*' || op.data[op.top]=='/'))//当栈顶运算符为'*'或'/'，栈顶出栈，直到栈顶不为'*''/',或遇到左括号", "\n            {", "\n                post[j++]=op.data[op.top];", "\n                op.top--;", "\n            }", "\n            op.top++;", "\n            op.data[op.top]=ch;", "\n            break;", "\n        case ' ':break;", "\n        default:", "\n            while(ch>='0' && ch<='9')   //判定为数字", "\n            {", "\n                post[j++]=ch;", "\n                ch=mid[i++];", "\n            }", "\n            i--;", "\n            post[j++]='@';  //用'@'标识一个数值串结束", "\n        }", "\n        ch=mid[i];", "\n        i++;", "\n    }", "\n    while(op.top!=-1)", "\n    {", "\n        post[j++]=op.data[op.top];", "\n        op.top--;", "\n    }", "\n    post[j]='\\0';   //给post表达式添加结束标识", "\n}", "\n\n", "struct      //数值栈 ", "\n{", "\n    float data[Maxsize];    //存放数值", "\n    int top;        //栈顶指针", "\n}st;", "\n\n", "float Postcount(char post[])    //计算后缀表达式的值", "\n{", "\n    float d;", "\n    char ch;", "\n    int i=0;    //i作为post[]的下标", "\n    st.top=-1;", "\n    ch=post[i];i++;", "\n    while(ch!='\\0')", "\n    {", "\n        switch(ch)", "\n        {", "\n        case '+' : st.data[st.top-1]=st.data[st.top-1] + st.data[st.top];", "\n            st.top--;break;", "\n        case '-' : st.data[st.top-1]=st.data[st.top-1] - st.data[st.top];", "\n            st.top--;break;", "\n        case '*' : st.data[st.top-1]=st.data[st.top-1] * st.data[st.top];", "\n            st.top--;break;", "\n        case '/' : if(st.data[st.top] != 0)", "\n                       st.data[st.top-1]=st.data[st.top-1] / st.data[st.top];", "\n            else", "\n            {", "\n                printf(\"\\n\\t除零错误!\\n\");", "\n                exit(0);    //异常退出", "\n            }", "\n            st.top--;break;", "\n        case '@' : st.top--;break;", "\n        default:", "\n            d=0;    //将数字字符转换成对应的数值存放到d中", "\n            while(ch>='0' && ch<='9')   //判定为数字字符", "\n            {", "\n                d=10*d+ch-'0';", "\n                ch=post[i++];", "\n            }", "\n            st.top++;", "\n            st.data[st.top]=d;", "\n        }", "\n        ch=post[i++];", "\n    }", "\n    return st.data[st.top];", "\n}", "\nint main()", "\n{", "\n    char p;", "\n    char post[100]={0},mid[100]={0};", "\n    float x;", "\n    do{", "\n    gets(mid);", "\n    Mid_post(mid,post);", "\n    x=Postcount(post);", "\n    printf(\"%f\\n\",x);", "\n    printf(\"是否继续？\\n\");", "\n    fflush(stdin);", "\n    scanf(\"%c\",&p);", "\n    }while(p=='Y' || p=='y');", "\n    return 0;", "\n}", "\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;貌似系统时钟都没有初始化吧&amp;#xff0c;还有printf也没有也没有重定向。&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["stmf103驱动max7219点阵无反应", ["stm32f103rb驱动max7219点阵无反应，代码如下求解答", "\n", "**spi.c**\n", "#include \"bsp_spi_dot_matrix_led.h\"", "\n", "#include \"bsp_usart.h\"", "\n/**\n  * @brief  SPI_FLASH初始化\n  * @param  无\n  * @retval 无\n  */\nvoid SPI_DOT_LED_Init(void)\n{\n  \n  GPIO_InitTypeDef GPIO_InitStructure;\n    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOB, ENABLE);\n    \n  ", "/* 配置SPI的 CS引脚，普通IO即可 */", "\n  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;\n    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;\n  GPIO_Init(GPIOB, &GPIO_InitStructure);\n    \n     ", "/* 配置SPI的 CLK引脚，普通IO即可 */", "\n  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;\n    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;\n  GPIO_Init(GPIOB, &GPIO_InitStructure);\n    \n    \n     ", "/* 配置SPI的 DIN引脚，普通IO即可 */", "\n  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;\n    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;\n  GPIO_Init(GPIOB, &GPIO_InitStructure);\n\n}\n ", "//", "//", "-------------------------------------------\n", "//", "//", "功能：向MAX7219写入数据\n", "//", "//", "入口参数：address、dat\n", "//", "//", "出口参数：无\n", "//", "//", "说明：\n\n", "//", "--------------------------------------------\n", "//", "功能：向MAX7219(U3)写入字节\n", "//", "入口参数：DATA \n", "//", "出口参数：无\n", "//", "说明：\nvoid Write_Max7219_byte(uchar DATA)         \n{          \n            uchar i,w;    \n        Max7219_pinCS_LOW();        \n        ", "for", "(i=", "8", ";i>=", "1", ";i--)\n        {          \n            Max7219_pinCLK_LOW();\n                        w=DATA&", "0", "x80;\n                        w=DATA>>", "7", ";\n                      Max7219_pinDIN(w);\n                        printf(", "\" %d \\n\"", ",w);\n                DATA=DATA<<", "1", ";", "//", "八位的data从高到底把数据以此发送给Max7219_pinDIN\n            Max7219_pinCLK_HIGH();\n           }                                 \n}\n\n void Write_Max7219(uchar address,uchar dat)\n{ \n     Max7219_pinCS_LOW();\n       Write_Max7219_byte(address);           ", "//", "写入地址，即数码管编号\n     Write_Max7219_byte(dat);               ", "//", "写入数据，即数码管显示数字 \n       Max7219_pinCS_HIGH();                        \n}\n\nvoid Init_MAX7219(void)\n{\n Write_Max7219(", "0", "x09, ", "0", "x00);       ", "//", "译码方式：BCD码\n Write_Max7219(", "0", "x0a, ", "0", "x03);       ", "//", "亮度 \n Write_Max7219(", "0", "x0b, ", "0", "x07);       ", "//", "扫描界限；", "8", "个数码管显示\n Write_Max7219(", "0", "x0c, ", "0", "x01);       ", "//", "掉电模式：", "0", "，普通模式：", "1", "\n Write_Max7219(", "0", "x0f, ", "0", "x00);       ", "//", "显示测试：", "1", "；测试结束，正常显示：", "0", "\n}\n\n", "/*********************************************END OF FILE**********************/", "\nmain.c\n", "#include \"stm32f10x.h\"", "\n", "#include \"bsp_spi_dot_matrix_led.h\"", "\n", "#include \"bsp_SysTick.h\"", "\n\n", "/* disp1为需要显示字库*/", " ", "//", "其他字可以去网上下载  取模软件\nuchar disp1[", "38", "][", "8", "]={\n{", "0", "xB4,", "0", "x4A,", "0", "x8A,", "0", "xBE,", "0", "x4A,", "0", "x4A,", "0", "x41,", "0", "xFF},", "/*\"迅\",0*/", "\n{", "0", "x40,", "0", "x88,", "0", "x7E,", "0", "x48,", "0", "x4C,", "0", "x52,", "0", "x7F,", "0", "x0},", "/*\"达\",0*/", "\n{", "0", "x0,", "0", "x41,", "0", "x22,", "0", "x14,", "0", "x8,", "0", "x14,", "0", "x22,", "0", "x41},", "//", "X\n{", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x22,", "0", "x1C},", "//", "U\n{", "0", "x0,", "0", "x42,", "0", "x62,", "0", "x52,", "0", "x4A,", "0", "x46,", "0", "x42,", "0", "x0},", "//", "N\n{", "0", "x7C,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x7C,", "0", "x0},", "//", "D\n{", "0", "x8,", "0", "x14,", "0", "x22,", "0", "x3E,", "0", "x22,", "0", "x22,", "0", "x22,", "0", "x22},", "//", "A\n{", "0", "x10,", "0", "x5B,", "0", "x24,", "0", "x24,", "0", "x28,", "0", "x18,", "0", "x18,", "0", "x24},", "/*\"文\",0*/", "\n{", "0", "x00,", "0", "x7E,", "0", "x10,", "0", "x2C,", "0", "x24,", "0", "x3C,", "0", "x24,", "0", "x3C},", "/*\"百\",0*/", "\n", "//", "{", "0", "x3C,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x3C},", "//", "0", "\n", "//", "{", "0", "x10,", "0", "x18,", "0", "x14,", "0", "x10,", "0", "x10,", "0", "x10,", "0", "x10,", "0", "x10},", "//", "1", "\n", "//", "{", "0", "x7E,", "0", "x2,", "0", "x2,", "0", "x7E,", "0", "x40,", "0", "x40,", "0", "x40,", "0", "x7E},", "//", "2", "\n", "//", "{", "0", "x3E,", "0", "x2,", "0", "x2,", "0", "x3E,", "0", "x2,", "0", "x2,", "0", "x3E,", "0", "x0},", "//", "3", "\n", "//", "{", "0", "x8,", "0", "x18,", "0", "x28,", "0", "x48,", "0", "xFE,", "0", "x8,", "0", "x8,", "0", "x8},", "//", "4", "\n", "//", "{", "0", "x3C,", "0", "x20,", "0", "x20,", "0", "x3C,", "0", "x4,", "0", "x4,", "0", "x3C,", "0", "x0},", "//", "5", "\n", "//", "{", "0", "x3C,", "0", "x20,", "0", "x20,", "0", "x3C,", "0", "x24,", "0", "x24,", "0", "x3C,", "0", "x0},", "//", "6", "\n", "//", "{", "0", "x3E,", "0", "x22,", "0", "x4,", "0", "x8,", "0", "x8,", "0", "x8,", "0", "x8,", "0", "x8},", "//", "7", "\n", "//", "{", "0", "x0,", "0", "x3E,", "0", "x22,", "0", "x22,", "0", "x3E,", "0", "x22,", "0", "x22,", "0", "x3E},", "//", "8", "\n{", "0", "x3E,", "0", "x22,", "0", "x22,", "0", "x3E,", "0", "x2,", "0", "x2,", "0", "x2,", "0", "x3E},", "//", "9", "\n{", "0", "x8,", "0", "x14,", "0", "x22,", "0", "x3E,", "0", "x22,", "0", "x22,", "0", "x22,", "0", "x22},", "//", "A\n{", "0", "x3C,", "0", "x22,", "0", "x22,", "0", "x3E,", "0", "x22,", "0", "x22,", "0", "x3C,", "0", "x0},", "//", "B\n{", "0", "x3C,", "0", "x40,", "0", "x40,", "0", "x40,", "0", "x40,", "0", "x40,", "0", "x3C,", "0", "x0},", "//", "C\n{", "0", "x7C,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x7C,", "0", "x0},", "//", "D\n{", "0", "x7C,", "0", "x40,", "0", "x40,", "0", "x7C,", "0", "x40,", "0", "x40,", "0", "x40,", "0", "x7C},", "//", "E\n{", "0", "x7C,", "0", "x40,", "0", "x40,", "0", "x7C,", "0", "x40,", "0", "x40,", "0", "x40,", "0", "x40},", "//", "F\n{", "0", "x3C,", "0", "x40,", "0", "x40,", "0", "x40,", "0", "x40,", "0", "x44,", "0", "x44,", "0", "x3C},", "//", "G\n{", "0", "x44,", "0", "x44,", "0", "x44,", "0", "x7C,", "0", "x44,", "0", "x44,", "0", "x44,", "0", "x44},", "//", "H\n{", "0", "x7C,", "0", "x10,", "0", "x10,", "0", "x10,", "0", "x10,", "0", "x10,", "0", "x10,", "0", "x7C},", "//", "I\n{", "0", "x3C,", "0", "x8,", "0", "x8,", "0", "x8,", "0", "x8,", "0", "x8,", "0", "x48,", "0", "x30},", "//", "J\n{", "0", "x0,", "0", "x24,", "0", "x28,", "0", "x30,", "0", "x20,", "0", "x30,", "0", "x28,", "0", "x24},", "//", "K\n{", "0", "x40,", "0", "x40,", "0", "x40,", "0", "x40,", "0", "x40,", "0", "x40,", "0", "x40,", "0", "x7C},", "//", "L\n{", "0", "x81,", "0", "xC3,", "0", "xA5,", "0", "x99,", "0", "x81,", "0", "x81,", "0", "x81,", "0", "x81},", "//", "M\n{", "0", "x0,", "0", "x42,", "0", "x62,", "0", "x52,", "0", "x4A,", "0", "x46,", "0", "x42,", "0", "x0},", "//", "N\n{", "0", "x3C,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x3C},", "//", "O\n{", "0", "x3C,", "0", "x22,", "0", "x22,", "0", "x22,", "0", "x3C,", "0", "x20,", "0", "x20,", "0", "x20},", "//", "P\n{", "0", "x1C,", "0", "x22,", "0", "x22,", "0", "x22,", "0", "x22,", "0", "x26,", "0", "x22,", "0", "x1D},", "//", "Q\n{", "0", "x3C,", "0", "x22,", "0", "x22,", "0", "x22,", "0", "x3C,", "0", "x24,", "0", "x22,", "0", "x21},", "//", "R\n{", "0", "x0,", "0", "x1E,", "0", "x20,", "0", "x20,", "0", "x3E,", "0", "x2,", "0", "x2,", "0", "x3C},", "//", "S\n{", "0", "x0,", "0", "x3E,", "0", "x8,", "0", "x8,", "0", "x8,", "0", "x8,", "0", "x8,", "0", "x8},", "//", "T\n{", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x22,", "0", "x1C},", "//", "U\n{", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x42,", "0", "x24,", "0", "x18},", "//", "V\n{", "0", "x0,", "0", "x49,", "0", "x49,", "0", "x49,", "0", "x49,", "0", "x2A,", "0", "x1C,", "0", "x0},", "//", "W\n{", "0", "x0,", "0", "x41,", "0", "x22,", "0", "x14,", "0", "x8,", "0", "x14,", "0", "x22,", "0", "x41},", "//", "X\n{", "0", "x41,", "0", "x22,", "0", "x14,", "0", "x8,", "0", "x8,", "0", "x8,", "0", "x8,", "0", "x8},", "//", "Y\n{", "0", "x0,", "0", "x7F,", "0", "x2,", "0", "x4,", "0", "x8,", "0", "x10,", "0", "x20,", "0", "x7F},", "//", "Z\n{", "0", "x8,", "0", "x7F,", "0", "x49,", "0", "x49,", "0", "x7F,", "0", "x8,", "0", "x8,", "0", "x8},", "//", "中\n{", "0", "xFE,", "0", "xBA,", "0", "x92,", "0", "xBA,", "0", "x92,", "0", "x9A,", "0", "xBA,", "0", "xFE},", "//", "国\n};\n\nint main(void)\n{\n    \n    SysTick_Init();", "//", "始终初始化 \n    SPI_DOT_LED_Init();", "//", "初始化传输用的GPIO  \n    Init_MAX7219();", "//", "初始化MAX7219 \n\n\n    ", "while", "(", "1", ")\n {\n     uchar i,j;\n   ", "for", "(j=", "0", ";j<", "38", ";j++)\n  {\n   ", "for", "(i=", "1", ";i<", "9", ";i++)\n    Write_Max7219(i,disp1[j][i-", "1", "]); \n    SysTick_Delay_Ms( ", "1000", ");\n  } \n}\n}\n", "/*********************************************END OF FILE**********************/", "\n\n", "\n", "spi.h\n", "#", "ifndef", "  _DOT_MATRIX_LED", "\n", "#", "define", "  _DOT_MATRIX_LED", "\n\n", "#", "include", " ", "\"stm32f10x.h\"", "\n\n", "#", "define", " uchar unsigned char", "\n", "#", "define", " uint  unsigned int", "\n\n", "//CS(NSS)引脚 片选选普通GPIO即可", "\n", "#", "define", "      FLASH_SPI_CS_CLK                  RCC_APB2Periph_GPIOB   ", "\n", "#", "define", "      FLASH_SPI_CS_PORT                 GPIOB", "\n", "#", "define", "      FLASH_SPI_CS_PIN                  GPIO_Pin_12", "\n\n\n\n", "//CLK()引脚 片选选普通GPIO即可", "\n", "#", "define", "      FLASH_SPI_CLK_CLK                  RCC_APB2Periph_GPIOB   ", "\n", "#", "define", "      FLASH_SPI_CLK_PORT                 GPIOB", "\n", "#", "define", "      FLASH_SPI_CLK_PIN                  GPIO_Pin_13", "\n\n", "//DIN()引脚 片选选普通GPIO即可", "\n", "#", "define", "      FLASH_SPI_DIN_APBxClock_FUN        RCC_APB2PeriphClockCmd", "\n", "#", "define", "      FLASH_SPI_DIN_CLK                  RCC_APB2Periph_GPIOB    ", "\n", "#", "define", "      FLASH_SPI_DIN_PORT                 GPIOB", "\n", "#", "define", "      FLASH_SPI_DIN_PIN                  GPIO_Pin_14", "\n\n", "/*以下定义了各个引脚高低电平的宏*/", "\n", "#", "define", "          Max7219_pinCLK_LOW()                           GPIO_ResetBits( FLASH_SPI_CLK_PORT, FLASH_SPI_CLK_PIN )", "\n", "#", "define", "          Max7219_pinCLK_HIGH()                            GPIO_SetBits( FLASH_SPI_CLK_PORT, FLASH_SPI_CLK_PIN )", "\n\n", "#", "define", "          Max7219_pinCS_LOW()                           GPIO_ResetBits( FLASH_SPI_CS_PORT, FLASH_SPI_CS_PIN )", "\n", "#", "define", "          Max7219_pinCS_HIGH()                            GPIO_SetBits( FLASH_SPI_CS_PORT, FLASH_SPI_CS_PIN )", "\n\n", "#", "define", "          Max7219_pinDIN_LOW()                           GPIO_ResetBits( FLASH_SPI_DIN_PORT,FLASH_SPI_DIN_PIN )", "\n", "#", "define", "          Max7219_pinDIN_HIGH()                            GPIO_SetBits( FLASH_SPI_DIN_PORT, FLASH_SPI_DIN_PIN )             ", "\n", "#", "define", "     Max7219_pinDIN(a)    ", "if", " (a)    \\\n                    Max7219_pinDIN_HIGH() ;\\\n                    ", "else", "        \\\n                    Max7219_pinDIN_LOW() ", "\n                    \n", "void", " ", "SPI_DOT_LED_Init", "(", "void", ")", ";\n", "void", " ", "Write_Max7219_byte", "(uchar DATA)", ";\n", "void", " ", "Write_Max7219", "(uchar address,uchar dat)", ";\n", "void", " ", "Init_MAX7219", "(", "void", ")", ";                \n", "#", "endif", " ", "/* _DOT_MATRIX_LED */", "\n\n\n", "\n", "  \n", "#", "include", " ", "\"bsp_SysTick.h\"", "\n", "#", "include", " ", "\"core_cm3.h\"", "\n", "#", "include", " ", "\"misc.h\"", "\n\n", "static", " __IO u32 TimingDelay;\n \n", "/**\n  * @brief  启动系统滴答定时器 SysTick\n  * @param  无\n  * @retval 无\n  */", "\n", "void", " ", "SysTick_Init", "(", "void", ")", "\n", "{\n    ", "/* SystemFrequency / 1000    1ms中断一次\n     * SystemFrequency / 100000     10us中断一次\n     * SystemFrequency / 1000000 1us中断一次\n     */", "\n", "//    if (SysTick_Config(SystemFrequency / 100000))    // ST3.0.0库版本", "\n    ", "if", " (", "SysTick_Config", "(SystemCoreClock / ", "100000", "))    ", "// ST3.5.0库版本", "\n    { \n        ", "/* Capture error */", " \n        ", "while", " (", "1", ");\n    }\n}\n\n", "/**\n  * @brief   us延时程序,10us为一个单位\n  * @param  \n  *        @arg nTime: Delay_us( 1 ) 则实现的延时为 1 * 10us = 10us\n  * @retval  无\n  */", "\n", "void", " ", "Delay_us", "(__IO u32 nTime)", "\n", "{ \n    TimingDelay = nTime;    \n\n    ", "// 使能滴答定时器  ", "\n    SysTick->CTRL |=  SysTick_CTRL_ENABLE_Msk;\n\n    ", "while", "(TimingDelay != ", "0", ");\n}\n\n", "/**\n  * @brief  获取节拍程序\n  * @param  无\n  * @retval 无\n  * @attention  在 SysTick 中断函数 SysTick_Handler()调用\n  */", "\n", "void", " ", "TimingDelay_Decrement", "(", "void", ")", "\n", "{\n    ", "if", " (TimingDelay != ", "0x00", ")\n    { \n        TimingDelay--;\n    }\n}\n\n", "#", "if", " 0    ", "//0不生效 屏蔽代码；1生效 编译代码", "\n", "// 这个 固件库函数 在 core_cm3.h中", "\n", "static", " __INLINE ", "uint32_t", " ", "SysTick_Config", "(", "uint32_t", " ticks)", "\n", "{ \n  ", "// reload 寄存器为24bit，最大值为2^24", "\n    ", "if", " (ticks > SysTick_LOAD_RELOAD_Msk)  ", "return", " (", "1", ");\n  \n  ", "// 配置 reload 寄存器的初始值    ", "\n  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - ", "1", ";\n    \n    ", "// 配置中断优先级为 1<<4-1 = 15，优先级为最低          1左移四位 0001=1变为    1 0000=16", "\n  ", "NVIC_SetPriority", " (SysTick_IRQn, (", "1", "<<__NVIC_PRIO_BITS) - ", "1", "); \n    \n    ", "// 配置 counter 计数器的值", "\n  SysTick->VAL   = ", "0", ";\n    \n    ", "// 配置systick 的时钟为 72M", "\n    ", "// 使能中断", "\n    ", "// 使能systick", "\n  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | \n                   SysTick_CTRL_TICKINT_Msk   | \n                   SysTick_CTRL_ENABLE_Msk;                    \n  ", "return", " (", "0", "); \n}\n", "#", "endif", "\n\n", "// couter 减1的时间 等于 1/systick_clk", "\n", "// 当counter 从 reload 的值减小到0的时候，为一个循环，如果开启了中断则执行中断服务程序，", "\n", "// 同时 CTRL 的 countflag 位会置1", "\n", "// 这一个循环的时间为 reload * (1/systick_clk)", "\n\n", "void", " ", "SysTick_Delay_Us", "( __IO ", "uint32_t", " us)", "\n", "{\n    ", "uint32_t", " i;\n    ", "/* SystemFrequency / 1000    1ms中断一次\n     * SystemFrequency / 100000     10us中断一次\n     * SystemFrequency / 1000000 1us中断一次\n     */", "\n    ", "SysTick_Config", "(SystemCoreClock/", "1000000", ");", "//用来调节中断的节拍，", "\n    \n    ", "for", "(i=", "0", ";i<us;i++)\n    {\n        ", "// 当计数器的值减小到0的时候，CRTL寄存器的位16会置1    ", "\n        ", "while", "( !((SysTick->CTRL)&(", "1", "<<", "16", ")) );\n    }\n    ", "// 关闭SysTick定时器", "\n    SysTick->CTRL &=~SysTick_CTRL_ENABLE_Msk;\n}\n\n", "void", " ", "SysTick_Delay_Ms", "( __IO ", "uint32_t", " ms)", "\n", "{\n    ", "uint32_t", " i;    \n    ", "SysTick_Config", "(SystemCoreClock/", "1000", ");\n    \n    ", "for", "(i=", "0", ";i<ms;i++)\n    {\n        ", "// 当计数器的值减小到0的时候，CRTL寄存器的位16会置1", "\n        ", "// 当置1时，读取该位会清0", "\n        ", "while", "( !((SysTick->CTRL)&(", "1", "<<", "16", ")) );\n    }\n    ", "// 关闭SysTick定时器", "\n    SysTick->CTRL &=~ SysTick_CTRL_ENABLE_Msk;\n}\n\n\n", "/*********************************************END OF FILE**********************/", "\n\n\n"]], "Tag": "程序设计"}
{"Answer": "不用翻译，猜测就行了。     ADC采集充电宝电压，然后在LCD上显示。出现过电压，过电流，终端控制继电器关闭充电通道。很简单51单片机知识", "Konwledge_Point": "优先级", "Question": ["哪位大神可以帮我翻译一下这个带液晶显示的充电器代码，多谢。", ["#include", "\n#include", "\n\n", "#define uint unsigned int", "\n#define uchar unsigned char", "\n#define nop ", "nop", "\n\n", "/*********端口定义********/", "\nsbit GATE = P2^4;", "\nsbit BP = P3^5;", "\nsbit BusyFlag=P0^7;", "\n//LCD控制接口", "\nsbit E=P2^7;", "\nsbit RW=P2^6;", "\nsbit RS=P2^5;", "\nsbit  CS  = P2^2;", "\nsbit  CLK = P2^1;", "\nsbit  DIO = P2^0;", "\n\n", "sbit  Lu=P3^4;", "\nsbit  Hu=P3^1;", "\nsbit bit7=ACC^7; //单片机内部移位寄存器ACC声明；", "\nsbit bit0=ACC^0;", "\n\n", "//显示界面 LCD1602", "\nuchar LCD_4,LCD_3,LCD_2,LCD_1,LCD_0;", "\nuchar code  LCDData[] =\"0123456789\";", "\nuchar first_line[16]=\"Phone Charging  \";                //LCD第一行显示缓存数组", "\nuchar second_line[16]=\"S:100% Volt=4.20\";               //LCD第二行显示缓存数组,正常显示时间。", "\n/*********************定义全局变量****************/", "\nuint adval;//AD值", "\nuint temp,num;", "\n//uchar data temp_data[2]={0xff,0xff}; //读出温度暂放", "\n\n", "//************************************", "\n//延时程序", "\n//************************************", "\nvoid delay(unsigned int N)", "\n{", "\n  unsigned int i;", "\n  for(i=0;i<N;i++);", "\n}", "\n//************************************", "\n//LCD1602操作程序", "\n//************************************", "\n//LCD1602测忙", "\nvoid check_busy(void)", "\n{", "\n    while(1)", "\n    {", "\n    P0=0xff;", "\n    E=0;", "nop", "();", "\n    RS=0;", "nop", "();", "nop", "();", "\n    RW=1;", "nop", "();", "nop", "();", "\n    E=1;", "nop", "();", "nop", "();", "\n\n", "_nop_();\n_nop_();\nif((P0&0x80)==0)\n{\n    break;\n}\nE=0;\n}\n", "\n\n", "}", "\n//LCD1602写命令", "\nvoid write_command(uchar tempdata)", "\n{", "\n    E=0;", "nop", "();", "nop", "();", "\n    RS=0;", "nop", "();", "nop", "();", "\n    RW=0;", "\n    P0=tempdata;", "nop", "();", "nop", "();", "\n    E=1;", "nop", "();", "nop", "(); ", "\n    E=0;", "nop", "();", "nop", "();", "\n    check_busy();", "\n}", "\n//LCD1602写数据", "\nvoid write_data(uchar tempdata)", "\n{", "\n    E=0;", "nop", "();", "nop", "();", "\n    RS=1;", "nop", "();", "nop", "();", "\n    RW=0;", "\n    P0=tempdata;", "nop", "();", "nop", "();", "\n    E=1;", "nop", "();", "nop", "(); ", "\n    E=0;", "nop", "();", "nop", "();", "\n    check_busy();", "\n}", "\n//初始化LCD1602", "\nvoid init_lcd1602()", "\n{", "\n write_command(0x01);                               //清除屏幕", "\n write_command(0x38);                               //功能设定（8位，2行，5*7点阵式）", "\n write_command(0x0c);                               //显示器ON，光标OFF，闪烁OFF", "\n write_command(0x06);                               //指针地址加1", "\n delay(5);", "\n}", "\n\n", "void display(void)", "\n{", "\n   uchar i;", "\n        write_command(0x80);", "\n        for(i=0;i<16;i++)", "\n        {", "\n          write_data(first_line[i]);", "\n        }", "\n        write_command(0xc0);", "\n        for(i=0;i<16;i++)", "\n        {", "\n          write_data(second_line[i]);", "\n        }", "\n}", "\nunsigned char A_D()", "\n{", "\n   uchar i,dat;", "\n   CS=1;   //一个转换周期开始", "\n   CLK=0;  //为第一个脉冲作准备", "\n   CS=0;  //CS置0，片选有效", "\n\n", "DIO=1;    //DIO置1，规定的起始信号", "\n   CLK=1;   //第一个脉冲", "\n   CLK=0;   //第一个脉冲的下降沿，此前DIO必须是高电平", "\n   DIO=1;   //DIO置1， 通道选择信号", "\n   CLK=1;   //第二个脉冲，第2、3个脉冲下沉之前，DI必须跟别输入两位数据用于选择通道，这里选通道CH0 ", "\n   CLK=0;   //第二个脉冲下降沿 ", "\n   DIO=1;   //DI置1，选择通道1", "\n   CLK=1;    //第三个脉冲", "\n   CLK=0;    //第三个脉冲下降沿 ", "\n   DIO=1;    //第三个脉冲下沉之后，输入端DIO失去作用，应置1", "\n   CLK=1;    //第四个脉冲", "\n   for(i=0;i<8;i++)  //高位在前", "\n    {", "\n      CLK=1;         //第四个脉冲", "\n      CLK=0; ", "\n      dat<<=1;       //将下面储存的低位数据向右移", "\n        dat|=(uchar)DIO;     //将输出数据DIO通过或运算储存在dat最低位 ", "\n    }", "\n    CS=1;          //片选无效 ", "\n     return dat;     //将读书的数据返回", "\n}", "\n void dis_0832(uint k)", "\n{", "\n    uchar Int,Dec;", "\n    Int=(k)/51; ", "\n    Dec=(k%51)*100/51;", "\n    second_line[12]=LCDData[Int];", "\n    second_line[13]='.';", "\n    second_line[14]=LCDData[Dec/10];", "\n    second_line[15]=LCDData[Dec%10];", "\n}", "\n  void S_0832(uint l)", "\n{", "\n    uchar Int,Dec;", "\n    Int=(l)/51; ", "\n    Dec=(l%51)*100/51;", "\n    l=Int*100+Dec;", "\n        if(l<368)", "\n    {", "\n    second_line[2]=' ';", "\n    second_line[3]=' ';", "\n    second_line[4]=LCDData[0];", "\n    }", "\n\n", "    else if(l<378) \n{\n second_line[2]=' ';\n second_line[3]='2';\n second_line[4]=LCDData[0];\n }\n  else if(l<380) \n{\n second_line[2]=' ';\n second_line[3]='3';\n second_line[4]=LCDData[5];\n }   \n  else if(l<385) \n{\n second_line[2]=' ';\n second_line[3]='4';\n second_line[4]=LCDData[8];\n }\n\n    else if(l<390) \n{\n second_line[2]=' ';\n second_line[3]='6';\n second_line[4]=LCDData[8];\n }      else if(l<394) \n{\n second_line[2]=' ';\n second_line[3]='7';\n second_line[4]=LCDData[8];\n }\n    else if(l<400) \n{\n second_line[2]=' ';\n second_line[3]='8';\n second_line[4]=LCDData[6];\n}\n     else if(l<403) \n{\nsecond_line[2]=' ';\n second_line[3]='9';\n second_line[4]=LCDData[2];\n}    else if(l<408) \n{\nsecond_line[2]=' ';\n second_line[3]='9';\n second_line[4]=LCDData[8];\n}\n\nelse \n{\n second_line[2]='1';\n second_line[3]=LCDData[0];\n second_line[4]=LCDData[0];\n}         \n", "\n\n", "}", "\nuint t_count,int0_count;", "\n\n", "/* 初始化 */", "\n\n", "void init()", "\n {", "\n       EA = 1;                        // 打开CPU中断", "\n       PT0 = 1;                    // T0中断设为高优先级", "\n\n", "   TMOD = 0x11;             // 模式1，T0为16位定时/计数器\n   TH0 = (65536-5000)/256;      // 5ms定时\n   TL0 = (65536-5000)%256; \n   TH1 = (65536-5000)/256;      // 5ms定时\n   TL1 = (65536-5000)%256; \n\n   ET0 = 1;               // 打开T0中断\n   TR0=0;\n   ET1 = 1;               // 打开T0中断\n   TR1=0;\n\n   IT0 = 1;                // 外部中断0设为边沿触发\n   EX0 = 1;               // 打开外部中断0 \n\n   GATE = 1;                  // 光耦正常输出电压\n   BP = 1;                         // 关闭蜂鸣器\n\n   int0_count = 0;        // 产生外部中断0的计数器清零\n", "\n\n", "}", "\n\n", "void main()", "\n{", "\n     init_lcd1602();", "\n     init();", "\n    while(1)", "\n    {            adval=A_D();", "\n                 dis_0832(adval);", "\n                 S_0832(adval); ", "\n                 display() ;", "\n                 delay(2000);", "\n    }", "\n}", "\n /* 定时器0中断服务子程序 */", "\n\n", "void timer0() interrupt 1 using 1", "\n\n", "{", "\n       TR0 = 0;                      // 停止计数", "\n       TH0 = (65536-5000)/256;             // 重设计数初值", "\n       TL0 = (65536-5000)%256;", "\n       t_count++;", "\n        if ((t_count>600))        // // 外部中断0产生3s~5s的信号", "\n\n", "   {\n\n          if (int0_count==1)       // 还没有出现第二次外部中断0，则认为充电完毕\n          {\n\n                 GATE = 0;               // 关闭充电电源\n                 BP = 0;                // 打开蜂鸣器报警\n                 ET0 = 0;              // 关闭T0中断\n                 EX0 = 0;             // 关闭外部中断0\n                 Lu=0;\n                 TR1=1;\n          }\n\n       else                       // 否则即是充电出错\n\n          {\n                 GATE = 1;      \n                 BP = 1;\n           }\n\n          int0_count = 0;\n          t_count = 0;\n          }\n\n   else\n\n          TR0 = 1;                  // 启动T0计数\n", "\n\n", "}", "\n/* 外部中断0服务子程序 */", "\n\n", "void int0() interrupt 0 using 1", "\n\n", "{", "\n       if (int0_count==0)", "\n\n", "   {\n          TH0 = (65536-5000)/256;      // 5ms定时\n          TL0 = (65536-5000)%256;   \n          TR0 = 1;                  // 启动定时/计数器0计数\n          t_count = 0;              // 产生定时器0中断的计数器清零\n\n   }\n\n          int0_count++;\n", "\n\n", "}", "\n  void int1() interrupt 3 ", "\n\n", "{ ", "\n       TH0 = (65536-5000)/256;      // 5ms定时", "\n       TL0 = (65536-5000)%256;", "\n       num++;", "\n       if(num==1800)", "\n     {", "\n       Hu=0;                  //提醒灯", "\n       BP = 1;                // 关闭蜂鸣器报警", "\n       TR1=0;", "\n     }", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;谢邀&amp;#xff0c;这边建议您先把warning的具体内容贴出来&amp;#xff0c;然后我们逐条分析才好得出结论&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["c语言怎么把这里面的warning去掉啊(函数PushStake和函数PopStake)", ["#include<stdio.h>", "\n#include<stdlib.h>", "\n#include<string.h>", "\n#include<stdbool.h>", "\n#define MAX 150 ", "\n\n", "\ntypedef struct node{", "\n    char date;", "\n    struct node *next;", "\n} LinkStake;", "\n\n", "typedef struct node2{", "\n    double date;", "\n    struct node *next;", "\n} Stake;", "\n\n", "typedef struct body{", "\n    char date[MAX];", "\n    int j;", "\n} Body;", "\n\n", "LinkStake *CreatStake();//建立空栈", "\nint IsEmpty(LinkStake *s);//判断空栈", "\nvoid Push(char fuhao, LinkStake *s, Body *p);//压栈", "\nint Judge(bool flag, char c);//判断优先级", "\n\n", "LinkStake *CreatStake()", "\n{", "\n    LinkStake *s;", "\n    s=malloc(sizeof(struct node));", "\n    s->next = NULL;", "\n    return s;", "\n}", "\n\n", "int IsEmpty(LinkStake *s)", "\n{", "\n    return(s->next == NULL);", "\n}", "\n\n", "void Push(char fuhao, LinkStake *s, Body *p)", "\n{", "\n    while(s->next != NULL && Judge(false,fuhao)<Judge(true,s->next->date)){", "\n            LinkStake *t;", "\n            printf(\"%c \", s->next->date);", "\n            p->date[p->j] = s->next->date;", "\n            p->j++;", "\n            t = s->next;", "\n            s->next = t->next;", "\n            free(t);", "\n    }", "\n    if(IsEmpty(s)){", "\n        LinkStake *tmp;", "\n        tmp = malloc(sizeof(struct node));", "\n        tmp->date = fuhao;", "\n        tmp->next = s->next;", "\n        s->next = tmp;", "\n    }", "\n    else if(Judge(false,fuhao)>Judge(true,s->next->date)){", "\n            LinkStake *tmp;", "\n            tmp = malloc(sizeof(struct node));", "\n            tmp->date = fuhao;", "\n            tmp->next = s->next;", "\n            s->next = tmp;", "\n        }", "\n    else if(Judge(false,fuhao) == Judge(true,s->next->date)){", "\n            LinkStake *t;", "\n            t = s->next;", "\n            s->next = t->next;", "\n            free(t);", "\n        }", "\n}", "\n\n", "int Judge(bool flag, char c)", "\n{", "\n    if(c == '+' || c == '-')", "\n        if(flag) return 3;", "\n        else return 2;", "\n    else if(c == '*' || c == '/')", "\n        if(flag) return 5;", "\n        else return 4;", "\n    else if(c == '(')", "\n        if(flag) return 1;", "\n        else return 6;", "\n    else if(c == ')')", "\n        if(flag) return 6;", "\n        else return 1;", "\n    else return 0;", "\n}", "\n\n", "void PushStake(double c, LinkStake* s)", "\n{", "\n    Stake *tmp;", "\n    tmp = malloc(sizeof(struct node2));", "\n    tmp->date = c;", "\n    tmp->next = s->next;", "\n    s->next = tmp;", "\n}", "\n\n", "double PopStake(LinkStake *s)", "\n{", "\n    Stake *t;", "\n    double c;", "\n    t = s->next;", "\n    c = t->date;", "\n    s->next = t->next;", "\n    free(t);", "\n    return c;", "\n}", "\n\n", "int main()", "\n{", "\n    int i = 0;", "\n    LinkStake *head;", "\n    Body *p = malloc(sizeof(struct body));", "\n    char s[MAX];", "\n    head = CreatStake();", "\n    p->j = 0;", "\n\n", "//    printf(\"请输入中缀表达式；\\n\");", "\n    scanf(\"%s\",s);", "\n//    printf(\"转换为后缀表达式: \\n\");", "\n    while(s[i]){", "\n        if(s[i]>='0' && s[i]<='9'){", "\n            printf(\"%c \", s[i]);", "\n            p->date[p->j] = s[i];", "\n            p->j++;", "\n        }", "\n        else Push(s[i],head,p);", "\n        i++;", "\n    }", "\n    while(head->next != NULL){", "\n        printf(\"%c \", head->next->date);", "\n        p->date[p->j++] = head->next->date;", "\n        p->j++;", "\n        LinkStake *t;", "\n        t = head->next;", "\n        head->next = t->next;", "\n        free(t);", "\n    }", "\n    printf(\"%c\",8);", "\n    printf(\"\\n\");", "\n\n", "    Stake *stake;", "\n    double sum = 0.0, a, b;", "\n    double sum1=0.0;", "\n    int length;", "\n    length = strlen(s);", "\n    stake = (Stake*)malloc(sizeof(struct node2));", "\n    stake->next = NULL;", "\n    for(i = 0; i < p->j; i++){", "\n        if(p->date[i]>='0' && p->date[i]<='9')", "\n            {", "\n            if(length>1)", "\n            PushStake((double)(p->date[i]-'0'), stake);", "\n            else {", "\n            sum1=p->date[i];", "\n            printf(\"%.3lf\",sum1-'0');goto end;", "\n            }", "\n            }", "\n        else if(p->date[i]=='+'){", "\n            ", "\n            if(length>1){", "\n            ", "\n            b = PopStake(stake);}", "\n            else b=0;", "\n            a = PopStake(stake);", "\n            sum = a+b;", "\n            PushStake(sum, stake);", "\n        }", "\n         else if(p->date[i]=='-'){", "\n             if(length>1){", "\n            b = PopStake(stake);}", "\n            else b=0;", "\n            a = PopStake(stake);", "\n            sum = a-b;", "\n            PushStake(sum, stake);", "\n        }", "\n         else if(p->date[i]=='*'){", "\n             if(length>1){", "\n            b = PopStake(stake);}", "\n            else b=1;", "\n            a = PopStake(stake);", "\n            sum = a*b;", "\n            PushStake(sum, stake);", "\n        }", "\n         else if(p->date[i]=='/'){", "\n             if(length>1){", "\n            b = PopStake(stake);}", "\n            else b=1;", "\n            a = PopStake(stake);", "\n            sum = a/b;", "\n            PushStake(sum, stake);", "\n        }", "\n    }", "\n    printf(\"%.3lf\", sum);", "\n    end:", "\n    return 0;", "\n}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&amp;lt;&amp;gt;为不等号&amp;#xff0c;A的记录跟B的记录不相等&amp;#xff0c;所以A答案符合&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于#数据库#的问题，请各位专家解答！", ["该题目中的<>我不理解它具有什么含义，还有哪个优先级更高一些，求解答，非常感谢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;参考GPT和自己的思路&amp;#xff1a;我们看一下你的问题&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;**1&amp;lt;&amp;lt;get(i,j)是什么意思&amp;#xff1f;**&lt;/p&gt;\n&lt;p&gt;这个是位运算&amp;#xff0c;&amp;lt;&amp;lt;是位左移运算符&amp;#xff0c;比如1&amp;lt;&amp;lt;3&amp;#xff0c;是将1的二进制位置左侧插入3个0&amp;#xff0c;即$0_2&amp;#61;00_2,1_2&amp;#61;01_2,2_2&amp;#61;10_2,0_2&amp;#61;1000_2$ &amp;#xff0c;也就是将1的二进制位向左挪动了3个记号的位置&amp;#xff0c;这个例子相当于计算2的立方。所以这句话中&amp;#xff0c;1&amp;lt;&amp;lt;get(i,j)表示将1的二进制数向左移动get(i,j)位所得的数。另外get(i,j)函数表示&amp;#xff0c;将4*4矩阵看作了一个一维的16个数的序列&amp;#xff0c;并给每个数一个编号&amp;#xff0c;编号规则为先列后行&amp;#xff08;列是第一位&amp;#xff0c;从0开始&amp;#xff09;&amp;#xff0c;即(0,0)的编号为0&amp;#xff0c;(0,1)的编号为1&amp;#xff0c;直到(3,3)的编号为15。所以get(i,j)就取得了一个坐标对应的编号。&lt;/p&gt;\n&lt;p&gt;k&amp;gt;&amp;gt;i&amp;amp;1是什么意思&amp;#xff1f;&lt;/p&gt;\n&lt;p&gt;这句话中&amp;#xff0c;&amp;gt;&amp;gt;是右移位运算符,即将一个数向右移动几位&amp;#xff0c;比如3&amp;gt;&amp;gt;1&amp;#xff0c;则结果是1&amp;#xff0c;即从个位往右第一个数变为了1&amp;#xff0c;由于题目中&amp;#xff0c;状态是用一个整型变量state存储的&amp;#xff0c;即用整型表示了状态&amp;#xff0c;所以这里可以用位运算进行计算。如k取二进制1111表示4*4矩阵都打开&amp;#xff0c;当i&amp;#61;2时&amp;#xff0c;则k&amp;gt;&amp;gt;i&amp;amp;1就表示k向右移动两位&amp;#xff0c;即从k的号位开始&amp;#xff08;前面用了0补位&amp;#xff09;&amp;#xff0c;第一位向右移动到了二进制的个位上&amp;#xff0c;这个时候&amp;#xff0c;&amp;amp;1就表示和1取与运算&amp;#xff0c;即相当于后一位取反&amp;#xff0c;前面全部变成了零&amp;#xff0c;这个时候就得到&amp;#xff0c;3.&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["关于#算法#的问题，请各位专家解答！", ["飞行员兄弟", "“飞行员兄弟”这个游戏，需要玩家顺利的打开一个拥有 16", " 个把手的冰箱。", "\n", "已知每个把手可以处于以下两种状态之一：打开或关闭。", "\n", "只有当所有把手都打开时，冰箱才会打开。", "\n", "把手可以表示为一个 4×4", " 的矩阵，您可以改变任何一个位置 [i,j]", " 上把手的状态。", "\n", "但是，这也会使得第 i", " 行和第 j", " 列上的所有把手的状态也随着改变。", "\n", "请你求出打开冰箱所需的切换把手的次数最小值是多少。", "\n", "输入格式", "\n", "输入一共包含四行，每行包含四个把手的初始状态。", "\n", "符号 + 表示把手处于闭合状态，而符号 - 表示把手处于打开状态。", "\n", "至少一个手柄的初始状态是关闭的。", "\n", "输出格式", "\n", "第一行输出一个整数 N", "，表示所需的最小切换把手次数。", "\n", "接下来 N", " 行描述切换顺序，每行输出两个整数，代表被切换状态的把手的行号和列号，数字之间用空格隔开。", "\n", "注意：如果存在多种打开冰箱的方式，则按照优先级整体从上到下，同行从左到右打开。", "\n", "数据范围", "\n", "1≤i,j≤4", "\n", "输入样例：", "\n", "-+--", "\n", "\n", "-+--", "输出样例：", "\n", "6", "1 1", "1 3", "1 4", "4 1", "4 3", "4 4", "难度： 简单", "时/空限制： 1s / 64MB", "\n", "\n```c++\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "<algorithm>", "\n", "#", "include", " ", "<vector>", "\n", "using", " ", "namespace", " std;\n", "typedef", " pair<", "int", ",", "int", ">  PII;\n", "int", " change[", "4", "][", "4", "];\n", "int", " ", "get", "(", "int", " x,", "int", " y)", "\n", "{\n    ", "return", " x*", "4", "+y;\n}\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " state=", "0", ";\n    ", "for", "(", "int", " i=", "0", ";i<", "4", ";i++)\n    {\n        string line;\n        cin>>line;\n        ", "for", "(", "int", " j=", "0", ";j<", "4", ";j++)\n            ", "if", "(line[j]==", "'+'", ")\n                state+=", "1", "<<", "get", "(i,j);", "//**1<<get(i,j)是什么意思？**", "\n    }\n    ", "for", "(", "int", " i=", "0", ";i<", "4", ";i++)\n        ", "for", "(", "int", " j=", "0", ";j<", "4", ";j++)\n        {\n            ", "for", "(", "int", " k=", "0", ";k<", "4", ";k++)\n            {\n                change[i][j]+=", "1", "<<", "get", "(i,k);\n                change[i][j]+=", "1", "<<", "get", "(k,j);\n            }\n            change[i][j]-=", "1", "<<", "get", "(i,j);\n        }\n    vector<PII>res;\n    ", "for", "(", "int", " k=", "0", ";k<", "1", "<<", "16", ";k++)\n    {\n        ", "int", " now=state;\n        vector<PII>path;\n        ", "for", "(", "int", " i=", "0", ";i<", "16", ";i++)\n            ", "if", "(k>>i&", "1", ")", "//k>>i&1是什么意思？", "\n            {\n                ", "int", " x=i/", "4", ",y=i%", "4", ";\n                now^=change[x][y];\n                path.", "push_back", "({x,y});\n            }\n        ", "if", "(!now&&(res.", "empty", "()||res.", "size", "()>path.", "size", "()))res=path;\n    }\n    cout<<res.", "size", "()<<endl;\n    ", "for", "(", "auto", " p:res) cout<<p.first+", "1", "<<", "' '", "<<p.second+", "1", "<<endl;", "//p:res中：的作用是什么？", "\n    ", "return", " ", "0", ";\n}\n\n\n", "\n", "```"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;首先wx:if和wx:for要加{&lt;!-- --&gt;{}}&amp;#xff0c; 类似这样 wx:for&amp;#61;&amp;#34;{&lt;!-- --&gt;{ myWords }}&amp;#34;  ,如果不加{&lt;!-- --&gt;{}}  那你遍历的是那个单词的字母&amp;#xff0c;不信你数数 myWords 是不是7个字母&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/565537173856117.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["微信小程序循环有个小问题", ["？为什么微信小程序循环只有七个，js对应的方法里for了一下是11个啊（数组有11个元素？", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;别的不知道&amp;#xff0c;第一眼就看到了没调用exti_init,怎么可能跑的通&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["在学习中断的时候可能是因为中断服务函数没有写好导致中断无法实现", ["在学习STM32的外部中断时时根据视频修改代码，目的是通过按键设置的中断改变LED亮灭，因为视频中板子给出的管脚是PE4,使用EXTI4，他说EXTI0-4用的服务函数跟EXTI5-9是不一样的，我改了之后发现我的板子不能实现中断的功能，请问要怎么改。", "这个是我写的代码", "\n", "#", "include", " ", "\"./BSP/EXTI/exti.h\"", "\n#", "include", " ", "\"./SYSTEM/delay/delay.h\"", "\n\nvoid exti", "_init(", "void", ")", "\n{\n    GPIO_InitTypeDef gpioC_init_struct;", "//定义结构体", "\n    \n    ", "__HAL_RCC_GPIOC_CLK_ENABLE()", ";", "//使能时钟", "\n    \n    gpioC_init_struct.Pin=GPIO_PIN_5;", "//Pin是管脚", "\n    gpioC_init_struct.Mode=GPIO_MODE_IT_FALLING;", "//Mode是工作模式，此为推挽", "\n    gpioC_init_struct.Pull=GPIO_PULLUP;", "//Speed是速度", "\n    \n    ", "HAL_GPIO_Init(GPIOC,&", "gpioC_init_struct", ")", ";\n    ", "//配置工作模式", "\n    ", "HAL_NVIC_SetPriority(EXTI9_5_IRQn,2,0)", ";", "//EXTI9_5_IRQn是中断号，应该与引脚号相同，2是抢占优先级，0是响应优先级", "\n    \n    ", "HAL_NVIC_EnableIRQ(EXTI9_5_IRQn)", ";\n\n\n}\nvoid ", "EXTI9_5_IRQHandler(", "void", ")", "//中断服务函数", "\n{\n    ", "HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5)", ";", "//中断号设置为5", "\n    ", "__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5)", ";", "//清除中断", "\n}\nvoid ", "HAL_GPIO_EXTI_Callback(", "uint16_t", " GPIO_Pin)", "\n{\n        delay", "_ms(20)", ";\n    ", "if", "(GPIO_Pin==GPIO_PIN_5)\n    {\n        ", "if", "(", "HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5", "==", "0)", ")", "//检测是否按下键盘", "\n         {\n             ", "HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_8)", ";", "//若是按下键盘则LED PA8取反。", "\n         }\n    }\n}\n", "\n", "下面是主函数", "\n", "#", "include", " ", "\"./SYSTEM/sys/sys.h\"", "\n", "#", "include", " ", "\"./SYSTEM/usart/usart.h\"", "\n", "#", "include", " ", "\"./SYSTEM/delay/delay.h\"", "\n", "#", "include", " ", "\"./BSP/LED/led.h\"", "\n", "#", "include", " ", "\"./BSP/EXTI/exti.h\"", "\n\n\n", "int", " ", "main", "(", "void", ")", "\n", "{\n    \n    ", "HAL_Init", "();                         ", "/* 初始化HAL库 */", "\n    ", "sys_stm32_clock_init", "(RCC_PLL_MUL9); ", "/* 设置时钟, 72Mhz */", "\n    ", "delay_init", "(", "72", ");                     ", "/* 延时初始化 */", "\n    ", "led_init", "();                         ", "/* LED初始化 */", "\n    ", "while", "(", "1", ")\n    { \n      \n        ", "HAL_GPIO_WritePin", "(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);  \n    }\n}\n\n", "\n", "这是厂家给的代码", "\n", "#", "include", " ", "\"./BSP/EXTI/exti.h\"", "\n#", "include", " ", "\"./SYSTEM/delay/delay.h\"", "\n\n\nvoid exti", "_init(", "void", ")", "\n{\n    GPIO_InitTypeDef gpio_init_struct;\n    ", "__HAL_RCC_GPIOE_CLK_ENABLE()", ";\n\n    gpio_init_struct.Pin = GPIO_PIN_4;\n    gpio_init_struct.Mode = GPIO_MODE_IT_FALLING;\n    gpio_init_struct.Pull = GPIO_PULLUP;\n    ", "HAL_GPIO_Init(GPIOE, &", "gpio_init_struct", ")", ";\n    \n    ", "HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0)", ";\n    ", "HAL_NVIC_EnableIRQ(EXTI4_IRQn)", ";\n}\n\nvoid ", "EXTI4_IRQHandler(", "void", ")", "\n{\n    ", "HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4)", ";\n    ", "__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4)", ";\n}\n\nvoid ", "HAL_GPIO_EXTI_Callback(", "uint16_t", " GPIO_Pin)", "\n{\n    delay", "_ms(20)", ";\n    \n    ", "if", "(GPIO_Pin", " == ", "GPIO_PIN_4)\n    {\n        ", "if", "(", "HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4)", "==", "0", ")\n        {\n            ", "HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5)", ";\n        }\n    }\n}\n", "\n", "下面是主函数", "\n", "#", "include", " ", "\"./SYSTEM/sys/sys.h\"", "\n#", "include", " ", "\"./SYSTEM/delay/delay.h\"", "\n#", "include", " ", "\"./SYSTEM/usart/usart.h\"", "\n#", "include", " ", "\"./BSP/LED/led.h\"", "\n#", "include", " ", "\"./BSP/EXTI/exti.h\"", "\n\n\n", "int", " main(void)\n{\n    ", "HAL_Init()", ";                                 ", "/* 初始化HAL库 */", "\n    sys", "_stm32_clock_init(RCC_PLL_MUL9)", ";         ", "/* 设置时钟,72M */", "\n    delay", "_init(72)", ";                             ", "/* 初始化延时函数 */", "\n    led", "_init()", ";                                 ", "/* 初始化LED */", "\n    exti", "_init()", ";\n    \n    ", "while", "(", "1", ")\n    {\n        ", "LED1(1)", ";                                ", "/* LED1 灭 */", "\n        delay", "_ms(500)", ";\n        ", "LED1(0)", ";                                ", "/* LED1 亮 */", "\n        delay", "_ms(500)", ";\n    }\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;如果是共阳数码管P0上拉排阻可以不用R12R11也可不用,是要精准时间还是一般延时?&lt;br /&gt;普通延时演示:&lt;a href=\"https://img-blog.csdnimg.cn/e59dfe9edf7c46af9d3a2da84e5662e3.gif\" id=\"textarea_1681959617815_1681959725938_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://img-blog.csdnimg.cn/e59dfe9edf7c46af9d3a2da84e5662e3.gif&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;电路图有点不同,不影响单数码管显示,是这样的?&lt;/p&gt;", "Konwledge_Point": "优先级", "Question": ["单片机外部中断应用编译", ["请问单片机外部中断0输入引脚p3.2接有一只开关k1，在外部中断1输入引脚p3.3接有一只按钮开关k2，要求k1，k2都未按下时，数码管循环显示0-9，但按下k1时，产生一个低优先级外部中断0请求（跳沿触发），进入外中断0中断服务程序，使8只led流水灯显示3次，此时按下k2，产生一个高级优先级的外部中断1请求，使数码管显示9-0，在从外中断1返回继续执行中断0中断服务程序。设置外部中断0为低优先级，外部中断1为高优先级。设点亮时间为500s的编程怎么写"]], "Tag": "程序设计"}
