{"Answer": "&lt;p&gt;修改如下&amp;#xff0c;见注释&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;    &lt;span class=\"hljs-comment\"&gt;//输入输出头文件&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;    &lt;span class=\"hljs-comment\"&gt;//标准头文件&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;    &lt;span class=\"hljs-comment\"&gt;//字符串头文件&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;    &lt;span class=\"hljs-comment\"&gt;//布尔类型头文件&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; Elemtype; &lt;span class=\"hljs-comment\"&gt;//该队列中的元素超长整型&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Quene&lt;/span&gt;* List;    &lt;span class=\"hljs-comment\"&gt;//将该队列结点的指针命名为List&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;LinkQuene&lt;/span&gt;* SqList;    &lt;span class=\"hljs-comment\"&gt;//将该队列类型的指针命名为SqList&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Quene&lt;/span&gt;            &lt;span class=\"hljs-comment\"&gt;//定义结点&lt;/span&gt;\n{\n    Elemtype data;    &lt;span class=\"hljs-comment\"&gt;//存放病历号&lt;/span&gt;\n    List next;        &lt;span class=\"hljs-comment\"&gt;//下一个结点指针&lt;/span&gt;\n};\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;LinkQuene&lt;/span&gt;\n{\n    List front;    &lt;span class=\"hljs-comment\"&gt;//指向队首结点&lt;/span&gt;\n    List rear;    &lt;span class=\"hljs-comment\"&gt;//指向队尾结点&lt;/span&gt;\n};\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;InitQuene&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SqList* q)&lt;/span&gt;&lt;/span&gt;;                &lt;span class=\"hljs-comment\"&gt;//初始化队列&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//bool InitQuene(SqList&amp;amp; q);&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;DestroyQuene&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SqList q)&lt;/span&gt;&lt;/span&gt;;            &lt;span class=\"hljs-comment\"&gt;//销毁队列&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//bool DestroyQuene(SqList&amp;amp; q);&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;QueneEmpty&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SqList q)&lt;/span&gt;&lt;/span&gt;;              &lt;span class=\"hljs-comment\"&gt;//判断队列是否为空&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//bool QueneEmpty(SqList&amp;amp; q);&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;enQuene&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SqList q, Elemtype e)&lt;/span&gt;&lt;/span&gt;;    &lt;span class=\"hljs-comment\"&gt;//进队列&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//bool enQuene(SqList&amp;amp; q, Elemtype&amp;amp; e);&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;deQuene&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SqList q, Elemtype* e)&lt;/span&gt;&lt;/span&gt;;    &lt;span class=\"hljs-comment\"&gt;//出队列&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//bool deQuene(SqList&amp;amp; q, Elemtype&amp;amp; e);&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Test&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;;                  &lt;span class=\"hljs-comment\"&gt;//病人看病模拟程序&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//bool Test(SqList q);&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;menu&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;                        &lt;span class=\"hljs-comment\"&gt;//菜单&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; argc, &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;//SqList q &amp;#61; NULL;             修改&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; flag &amp;#61; &lt;span class=\"hljs-built_in\"&gt;Test&lt;/span&gt;(); &lt;span class=\"hljs-comment\"&gt;//Test(q); 修改&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (flag)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;谢谢使用,再见。\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Test&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;span class=\"hljs-comment\"&gt;// Test(SqList q)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    SqList q &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    List p;\n    &lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; flag &amp;#61; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;    &lt;span class=\"hljs-comment\"&gt;//是否关闭程序&amp;#xff0c;默认为“否”&lt;/span&gt;\n    Elemtype e;\n    &lt;span class=\"hljs-built_in\"&gt;InitQuene&lt;/span&gt;(&amp;amp;q);    &lt;span class=\"hljs-comment\"&gt;//创建链队  修改&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;menu&lt;/span&gt;();            &lt;span class=\"hljs-comment\"&gt;//输出菜单&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;scanf_s&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n) !&amp;#61; EOF) {\n        &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (n) {\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入您的病历号(不超过十位的整数)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-built_in\"&gt;scanf_s&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;, &amp;amp;e);\n                &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (e &amp;gt; &lt;span class=\"hljs-number\"&gt;1e10&lt;/span&gt;) {\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n病历号不合规&amp;#xff0c;重新输入&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n                    &lt;span class=\"hljs-built_in\"&gt;scanf_s&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;, &amp;amp;e);\n                }\n                &lt;span class=\"hljs-built_in\"&gt;enQuene&lt;/span&gt;(q, e);    &lt;span class=\"hljs-comment\"&gt;//将病历号入队&lt;/span&gt;\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n排队成功。\\n&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!&lt;span class=\"hljs-built_in\"&gt;QueneEmpty&lt;/span&gt;(q)) {\n                    &lt;span class=\"hljs-built_in\"&gt;deQuene&lt;/span&gt;(q, &amp;amp;e);   &lt;span class=\"hljs-comment\"&gt;//当有人排队&amp;#xff0c;即队不为空时出队&lt;/span&gt;\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld 就诊成功。\\n&amp;#34;&lt;/span&gt;,e); &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n                }\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;当前无人排队。\\n&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:p &amp;#61; q-&amp;gt;front;    &lt;span class=\"hljs-comment\"&gt;//遍历一遍链队&lt;/span&gt;\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;排在您前面的人有&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld\\n&amp;#34;&lt;/span&gt;, p-&amp;gt;data);\n                    p &amp;#61; p-&amp;gt;next;\n                }\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:p &amp;#61; q-&amp;gt;front;    &lt;span class=\"hljs-comment\"&gt;//遍历一遍链队&lt;/span&gt;\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;排在您前面的人有&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (p !&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lld\\n&amp;#34;&lt;/span&gt;, p-&amp;gt;data);\n                    p &amp;#61; p-&amp;gt;next;\n                }\n                flag &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:flag &amp;#61; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;:&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;指令错误&amp;#xff0c;重新输入。\\n&amp;#34;&lt;/span&gt;);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (flag)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;menu&lt;/span&gt;();\n    }\n    &lt;span class=\"hljs-built_in\"&gt;DestroyQuene&lt;/span&gt;(q);    &lt;span class=\"hljs-comment\"&gt;//销毁链队&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;menu&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;选择您的操作&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#61;    1.排队            &amp;#61;&amp;#61;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#61;    2.就诊            &amp;#61;&amp;#61;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#61;    3.查看排队        &amp;#61;&amp;#61;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#61;    4.不再排队        &amp;#61;&amp;#61;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#61;    5.下班            &amp;#61;&amp;#61;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;InitQuene&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SqList* q)&lt;/span&gt;\n&lt;/span&gt;{\n    (*q) &amp;#61; (SqList)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(LinkQuene));        &lt;span class=\"hljs-comment\"&gt;//修改&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//malloc有一定几率申请空间失败&amp;#xff0c;此时继续申请&amp;#xff0c;直到申请成功&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (!(*q)) {\n        (*q) &amp;#61; (SqList)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(Quene));\n    }\n    (*q)-&amp;gt;front &amp;#61; (*q)-&amp;gt;rear &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;    &lt;span class=\"hljs-comment\"&gt;//此时队列无元素&amp;#xff08;两个下标之间差的绝对值为0&amp;#xff09;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;DestroyQuene&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SqList q)&lt;/span&gt; &lt;span class=\"hljs-comment\"&gt;//DestroyQuene(SqList&amp;amp; q)&lt;/span&gt;\n&lt;/span&gt;{\n    List p;        &lt;span class=\"hljs-comment\"&gt;//工作指针&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (q-&amp;gt;front !&amp;#61; q-&amp;gt;rear) {    &lt;span class=\"hljs-comment\"&gt;//当队列中的结点大于一个时循环&lt;/span&gt;\n        p &amp;#61; q-&amp;gt;front;                &lt;span class=\"hljs-comment\"&gt;//工作指针指向队首结点&lt;/span&gt;\n        q-&amp;gt;front &amp;#61; q-&amp;gt;front-&amp;gt;next;    &lt;span class=\"hljs-comment\"&gt;//队首结点后移&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(p);                    &lt;span class=\"hljs-comment\"&gt;//释放掉工作指针指向的结点&lt;/span&gt;\n    }\n    p &amp;#61; q-&amp;gt;front;\n    &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(p);    &lt;span class=\"hljs-comment\"&gt;//释放掉最后一个结点&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(q);    &lt;span class=\"hljs-comment\"&gt;//释放掉链队结点&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;QueneEmpty&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SqList q)&lt;/span&gt; &lt;span class=\"hljs-comment\"&gt;//QueneEmpty(SqList&amp;amp; q)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; (q-&amp;gt;front &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;);    &lt;span class=\"hljs-comment\"&gt;//当队列为空时返回“真”&amp;#xff0c;否则返回“假”&lt;/span&gt;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;enQuene&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SqList q, Elemtype e)&lt;/span&gt; &lt;span class=\"hljs-comment\"&gt;//enQuene(SqListz &amp;amp; q, Elemtype&amp;amp; e)&lt;/span&gt;\n&lt;/span&gt;{\n    List p &amp;#61; (List)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(Quene));\n    &lt;span class=\"hljs-comment\"&gt;//malloc有一定几率申请空间失败&amp;#xff0c;此时继续申请&amp;#xff0c;直到申请成功&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (!p) {\n        p &amp;#61; (List)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(Quene));\n    }\n    p-&amp;gt;data &amp;#61; e;\n    p-&amp;gt;next &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (q-&amp;gt;rear &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n        q-&amp;gt;front &amp;#61; q-&amp;gt;rear &amp;#61; p;    &lt;span class=\"hljs-comment\"&gt;//当链队为空时&amp;#xff0c;新结点既是头结点又是尾结点&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        q-&amp;gt;rear-&amp;gt;next &amp;#61; p;    &lt;span class=\"hljs-comment\"&gt;//将新结点接到队尾&lt;/span&gt;\n        q-&amp;gt;rear &amp;#61; p;        &lt;span class=\"hljs-comment\"&gt;//队尾移动&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;bool&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;deQuene&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(SqList q, Elemtype* e)&lt;/span&gt;  &lt;span class=\"hljs-comment\"&gt;//deQuene(SqList&amp;amp; q, Elemtype&amp;amp; e)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (q-&amp;gt;front &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;//当队列为空时无法出队&amp;#xff0c;返回“假”&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n    List p &amp;#61; q-&amp;gt;front;    &lt;span class=\"hljs-comment\"&gt;//工作指针指向队首&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (q-&amp;gt;front &amp;#61;&amp;#61; q-&amp;gt;rear)    &lt;span class=\"hljs-comment\"&gt;//当链队中只有一个结点时&lt;/span&gt;\n        q-&amp;gt;front &amp;#61; q-&amp;gt;rear &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;                        &lt;span class=\"hljs-comment\"&gt;//当链队中有一个以上的结点时&lt;/span&gt;\n        q-&amp;gt;front &amp;#61; q-&amp;gt;front-&amp;gt;next;\n    (*e) &amp;#61; p-&amp;gt;data;\n    &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(p);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "用typedef重新命名类型名", "Question": ["引用改指针怎么改啊有人吗", ["c语言用不了引用有人会改成指针吗，看一下简单不，帮我改一下 感激不尽", "\n", "include<stdio.h>    ", "//输入输出头文件", "\n", "#", "include", "<stdlib.h>", "    ", "//标准头文件", "\n", "#", "include", "<string.h>", "    ", "//字符串头文件", "\n", "#", "include", "<stdbool.h>", "    ", "//布尔类型头文件", "\n\n", "typedef", " ", "long", " ", "long", " ", "int", " Elemtype;    ", "//该队列中的元素超长整型", "\n", "typedef", " ", "struct", " ", "Quene", "* List;    ", "//将该队列结点的指针命名为List", "\n", "typedef", " ", "struct", " ", "LinkQuene", "* SqList;    ", "//将该队列类型的指针命名为SqList", "\n", "struct", " ", "Quene", "            ", "//定义结点", "\n{\n    Elemtype data;    ", "//存放病历号", "\n    List next;            ", "//下一个结点指针", "\n};\n", "struct", " ", "LinkQuene", "\n{\n    List front;    ", "//指向队首结点", "\n    List rear;    ", "//指向队尾结点", "\n};\n\n", "bool", " ", "InitQuene", "(SqList& q)", ";                ", "//初始化队列", "\n", "bool", " ", "DestroyQuene", "(SqList& q)", ";            ", "//销毁队列", "\n", "bool", " ", "QueneEmpty", "(SqList& q)", ";                ", "//判断队列是否为空", "\n", "bool", " ", "enQuene", "(SqList& q, Elemtype& e)", ";    ", "//进队列", "\n", "bool", " ", "deQuene", "(SqList& q, Elemtype& e)", ";    ", "//出队列", "\n", "bool", " ", "Test", "(SqList q)", ";                    ", "//病人看病模拟程序", "\n", "void", " ", "menu", "(", "void", ")", ";                        ", "//菜单", "\n\n", "int", " ", "main", "(", "int", " argc, ", "const", " ", "char", "* argv[])", "\n", "{\n    SqList q = ", "NULL", ";\n    ", "bool", " flag = ", "Test", "(q);\n    ", "if", " (flag)\n        ", "printf", "(", "\"谢谢使用,再见。\\n\"", ");\n    ", "return", " ", "0", ";\n}\n", "bool", " ", "Test", "(SqList q)", "\n", "{\n    ", "int", " n;\n    List p;\n    ", "bool", " flag = ", "false", ";    ", "//是否关闭程序，默认为“否”", "\n    Elemtype e;\n    ", "InitQuene", "(q);    ", "//创建链队", "\n    ", "menu", "();            ", "//输出菜单", "\n    ", "while", " (", "scanf_s", "(", "\"%d\"", ", &n) != EOF) {\n        ", "switch", " (n) {\n            ", "case", " ", "1", ":", "printf", "(", "\"请输入您的病历号(不超过十位的整数)：\"", ");\n                ", "scanf_s", "(", "\"%lld\"", ", &e);\n                ", "while", " (e > ", "1e10", ") {\n                    ", "printf", "(", "\"\\n病历号不合规，重新输入：\"", ");\n                    ", "scanf_s", "(", "\"%lld\"", ", &e);\n                }\n                ", "enQuene", "(q, e);    ", "//将病历号入队", "\n                ", "printf", "(", "\"\\n排队成功。\\n\"", ");\n                ", "break", ";\n            ", "case", " ", "2", ":", "if", " (!", "QueneEmpty", "(q)) {\n                    ", "deQuene", "(q, e);    ", "//当有人排队，即队不为空时出队", "\n                    ", "printf", "(", "\"就诊成功。\\n\"", ");\n                }\n                ", "else", "\n                    ", "printf", "(", "\"当前无人排队。\\n\"", ");\n                ", "break", ";\n            ", "case", " ", "3", ":p = q->front;    ", "//遍历一遍链队", "\n                ", "printf", "(", "\"排在您前面的人有：\\n\"", ");\n                ", "while", " (p != ", "NULL", ") {\n                    ", "printf", "(", "\"%lld\\n\"", ", p->data);\n                    p = p->next;\n                }\n                ", "break", ";\n            ", "case", " ", "4", ":p = q->front;    ", "//遍历一遍链队", "\n                ", "printf", "(", "\"排在您前面的人有：\\n\"", ");\n                ", "while", " (p != ", "NULL", ") {\n                    ", "printf", "(", "\"%lld\\n\"", ", p->data);\n                    p = p->next;\n                }\n                flag = ", "true", ";\n                ", "break", ";\n            ", "case", " ", "5", ":flag = ", "true", ";\n                ", "break", ";\n            ", "default", ":", "printf", "(", "\"指令错误，重新输入。\\n\"", ");\n        }\n        ", "if", " (flag)\n            ", "break", ";\n        ", "menu", "();\n    }\n    ", "DestroyQuene", "(q);    ", "//销毁链队", "\n    ", "return", " ", "true", ";\n}\n", "void", " ", "menu", "(", "void", ")", "\n", "{\n    ", "printf", "(", "\"==========================\\n\"", ");\n    ", "printf", "(", "\"=======选择您的操作=======\\n\"", ");\n    ", "printf", "(", "\"==    1.排队            ==\\n\"", ");\n    ", "printf", "(", "\"==    2.就诊            ==\\n\"", ");\n    ", "printf", "(", "\"==    3.查看排队        ==\\n\"", ");\n    ", "printf", "(", "\"==    4.不再排队        ==\\n\"", ");\n    ", "printf", "(", "\"==    5.下班            ==\\n\"", ");\n    ", "printf", "(", "\"==========================\\n\"", ");\n}\n", "bool", " ", "InitQuene", "(SqList& q)", "\n", "{\n    q = (SqList)", "malloc", "(", "sizeof", "(LinkQuene));\n    ", "//malloc有一定几率申请空间失败，此时继续申请，直到申请成功", "\n    ", "while", " (!q) {\n        q = (SqList)", "malloc", "(", "sizeof", "(Quene));\n    }\n    q->front = q->rear = ", "NULL", ";    ", "//此时队列无元素（两个下标之间差的绝对值为0）", "\n    ", "return", " ", "true", ";\n}\n", "bool", " ", "DestroyQuene", "(SqList& q)", "\n", "{\n    List p;        ", "//工作指针", "\n    ", "while", " (q->front != q->rear) {    ", "//当队列中的结点大于一个时循环", "\n        p = q->front;                ", "//工作指针指向队首结点", "\n        q->front = q->front->next;    ", "//队首结点后移", "\n        ", "free", "(p);                    ", "//释放掉工作指针指向的结点", "\n    }\n    p = q->front;\n    ", "free", "(p);    ", "//释放掉最后一个结点", "\n    ", "free", "(q);    ", "//释放掉链队结点", "\n    ", "return", " ", "true", ";\n}\n", "bool", " ", "QueneEmpty", "(SqList& q)", "\n", "{\n    ", "return", " (q->front == ", "NULL", ");    ", "//当队列为空时返回“真”，否则返回“假”", "\n}\n", "bool", " ", "enQuene", "(SqList& q, Elemtype& e)", "\n", "{\n    List p = (List)", "malloc", "(", "sizeof", "(Quene));\n    ", "//malloc有一定几率申请空间失败，此时继续申请，直到申请成功", "\n    ", "while", " (!p) {\n        p = (List)", "malloc", "(", "sizeof", "(Quene));\n    }\n    p->data = e;\n    p->next = ", "NULL", ";\n    ", "if", " (q->rear == ", "NULL", ")\n        q->front = q->rear = p;    ", "//当链队为空时，新结点既是头结点又是尾结点", "\n    ", "else", " {\n        q->rear->next = p;    ", "//将新结点接到队尾", "\n        q->rear = p;        ", "//队尾移动", "\n    }\n    ", "return", " ", "true", ";\n}\n", "bool", " ", "deQuene", "(SqList& q, Elemtype& e)", "\n", "{\n    ", "if", " (q->front == ", "NULL", ")  ", "//当队列为空时无法出队，返回“假”", "\n        ", "return", " ", "false", ";\n    List p = q->front;    ", "//工作指针指向队首", "\n    ", "if", " (q->front == q->rear)    ", "//当链队中只有一个结点时", "\n        q->front = q->rear = ", "NULL", ";\n    ", "else", "                        ", "//当链队中有一个以上的结点时", "\n        q->front = q->front->next;\n    e = p->data;\n    ", "free", "(p);\n    ", "return", " ", "true", ";\n}\n\n\n"]], "Tag": "程序设计"}
